package kl08;

import as1.common.*;
import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXCURDT;
import corpcom7.XXXMAPNM;
import corpcom7.XXXPRCNM;
import corpcom7.XXXRVNBR;
import corpcom7.ZZ-SETUP-HHMM;
import corpx1.XCE-CR-ANLS-CD;
import corpx1.XGP-GPC-CD;
import corpy2.YATTBL;
import corpy2.YCR-CLM-RSN-CD;
import corpy2.YRC-RT-CSE-CD;
import corpy2.YUATBL;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import iv.common.IV-IVC-ID;
import ku.common.KUCREC;
import op.common.OP-CUST-PO;
import ta.common.TA1REC;
import ta.common.TA2REC;

//*** PROGRAM=KL08 ****
// **********************************************************
// ** This application displays all tc250 records that     **
// ** have been matched with a claim record. (VWOTRN01)    **
// **                                                      **
// ** The Claims Analyst can access the screen (KL08M001)  **
// ** determine if tc250's have been matched to a claim.   **
// ** It will also identify if the tc250 had been written  **
// ** off in the A/R system or not.  If a tc250 was        **
// ** matched to the wrong claim, the Analyst can use the  **
// ** screen KL08M001 to either move the tc250 record to   **
// ** the correct claim, or delete the tc250 record if     **
// ** there are no claim records that it should be matched **
// ** to.                                                  **
// **                                                      **
// **********************************************************
// **                                                      **
// **  date      pgmr    description                       **
// ** --------   ------  --------------------------------- **
// ** 01-01-98   PPERK1  CREATE PROCESS                    **
// ** 04-13-99   GDECKE  ADD TRANSFER TO KL07              **
// ** 06-04-99   GDECKE  expand working storage table to   **
// **                    prevent table over overflow       **
// ************************************************************
// *********************
Program KL08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KL08W01 KL08W01; // record
  KL08W02 KL08W02; // record
  KL08WPL1 KL08WPL1; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VWOHST01 VWOHST01; // record
  VWOTRN01 VWOTRN01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL08M.KL08M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL08000: KL08000();
    exit program;
    KL08001: KL08001();
  end // end main
end // end KL08


// page back - pf7
Function KL08-PF10()
   /* **************************************/
   /* top of list  - pf10*/
   /* **************************************/


  move KL08W-TOT-TRANS-COUNT to KL08W-CLX1 withV60Compat;

  move KL08W-TOT-PAGE to KL08W-CURR-PAGE withV60Compat;
   /* **************************************/
   /* end of list  - pf10*/
   /* **************************************/
end // end KL08-PF10

// page back - pf7
Function KL08-PF7()
   /* **************************************/
   /* page back - pf7 for scrolling**/
   /* **************************************/

  if (KL08M-CUR-PAGE <= 1)
    converseLib.validationFailed(007);
    KL08W-CLX1 = 1;
    return;
  end

  move KL08M-CUR-PAGE to KL08W-CURR-PAGE withV60Compat;

  KL08W-CLX1 = (KL08W-CURR-PAGE * 16) - 32;

  if (KL08W-CLX1 < 1)
    KL08W-CLX1 = 1;
    KL08W-CURR-PAGE = 1;
  end

  KL08W-CURR-PAGE = KL08W-CURR-PAGE - 1;

  if (KL08W-CURR-PAGE < 1)
    KL08W-CURR-PAGE = 1;
  end

  move KL08W-CURR-PAGE to KL08M-CUR-PAGE withV60Compat;

end // end KL08-PF7

// page forward - pf8
Function KL08-PF8()
   /* **************************************/
   /* page forward - pf 8 for scrolling*/
   /* **************************************/

  if (KL08M-TOT-PAGE == 1)
    converseLib.validationFailed(003);
    return;
  end

  move KL08M-CUR-PAGE to KL08W-CURR-PAGE withV60Compat;

  KL08W-CLX1 = (KL08W-CURR-PAGE * 16) + 1;

  if (KL08W-CLX1 > KL08W-TOT-TRANS-COUNT)
    move KL08W-TOT-TRANS-COUNT to KL08W-CLX1 withV60Compat;
    if (converseVar.validationMsgNum == 876)
      return;
    else
      converseLib.validationFailed(003);
      return;
    end
  end

  KL08W-CURR-PAGE = KL08W-CURR-PAGE + 1;
  if (KL08W-CURR-PAGE >= KL08M-TOT-PAGE)
    move KL08M-TOT-PAGE to KL08W-CURR-PAGE withV60Compat;
    if (converseVar.validationMsgNum == 876)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(003);
    end
  end

  move KL08W-CURR-PAGE to KL08M-CUR-PAGE withV60Compat;
end // end KL08-PF8

// page back - pf7
Function KL08-PF9()
   /* **************************************/
   /* top of list  - pf9*/
   /* **************************************/


  KL08W-CLX1 = 1;

  KL08W-CURR-PAGE = 1;
   /* **************************************/
   /* end of list  - pf9*/
   /* **************************************/
end // end KL08-PF9

// main flow
Function KL08000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, init appl maint rev nbr,      **/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  COMMAREA.CACURRAP = "KL08";
  KL08W01.KL08W-CURR-PROC-NM = "KL08000";

  KL08001(); /* initialize the application*/

  KL08W01.KL08W-EOA-FL = "N"; /* set end-of-application*/
                                  /* to 'no'*/
  while (KL08W01.KL08W-EOA-FL == "N")
    KL08200();
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/
end // end KL08000

// init processing
Function KL08001()
   /* *************************************************************/
   /* * initialize local records (all but tables, commarea)      **/
   /* *----------------------------------------------------------**/
   /* *       M A I N T E N A N C E    H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* * 01-01-98  pperk1  create new.                            **/
   /* * 05-26-99  GDECKE  TAKE CLAIM NUMBER SENT FROM KL0E       **/
   /* * 06-04-99  GDECKE  expand kl08w02 occurs to 2000          **/
   /* *************************************************************/

  set CLAREC empty;
  set KL08W01 empty;
  set KL08W02 empty;
  set KL08WPL1 empty;
  set VWOTRN01 empty;
  set VWOHST01 empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set KL08M001 initial;

  KL08W01.KL08W-DTL-ERR-FL = "N";
  KL08W01.KL08W-ERR-FL = "N";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                  /* error*/

  KL08W01.KL08W-CURR-PROC-NM = "KL08001";


  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry check*/

     /* *******************/
     /* set map id's, date*/
     /* *******************/

  KL08M001.XXXPRCNM = "KL08100"; /* primary map process name*/

  KL08W01.KL08W-MAX-CLM-CT = 2000; /* max claims to be processed*/
  KL08W01.KL08W-MAXLN = 15; /* max lines on screens*/
  KL08W01.KL08W-CLX1 = 1; /* clm array index*/
  KL08W01.KL08W-LINEX = 1; /* screen line index*/
  KL08W01.KL08W-PAGE-NBR = 1;
  KL08W01.KL08W-PAGE-LN-CT = 1;
  KL08S-INIT-ARRAY(); /* init clm array*/

  KL08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* MOVE '0' TO KL08M001.XXXRVNBR;   /* appl maint revision number*/

      /* GET AND SAVE CHANGE DATE AND TIME*/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  KL08W01.KL08W-DATE-NUM = TA2REC.TA2GRGGN;
  KL08W01.KL08W-TIME-NUM = TA2REC.TA2TIMHM;

  KL08S-INIT-PL1(); /* init iomod parm list for first time*/
                                   /* call*/

end // end KL08001
// GET CLMS based on select inf
Function KL08010()
   /* *************************************************************/
   /* *     get all suspense claims associated using selection*/
   /* *     criteria passed in parm list KL08wpl1.  Parm list*/
   /* *     values populated during edit of map header.*/
   /* *************************************************************/
   /* NOTE: values for KL08wpl1 are set after the map converse*/
   /* in the screen header edit routines.*/
   /* call iomod to declare & open cursor*/

  call "CL4020" ("S1", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    CLXREC.CLXCPROC = "KL08010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOTRN01";
    TA1REC.TA1LOCAT[2] = ", OPEN  ";
    TA1REC.TA1LOCAT[3] = "CURSOR. ";
    TA1REC.TA1LOCAT[4] = "KL08010";
    KL08S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
    return;
  end


   /* get claims (deductions) in suspense records*/
  while (SQLCA.VAGen_SQLCODE == 0 /* number of recs fetched =*/
   /* KL08w-max-clm-ct*/
   && KL08W01.KL08W-CLX1 <= KL08W01.KL08W-MAX-CLM-CT)

    call "CL4020" ("N1", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};

    /* *claim stat may have been specified by user. Determine here*/
    /* *if record matches.*/
    if (SQLCA.VAGen_SQLCODE == 0)

      KL08S-BUILD-ARRAY(); /* move db fields to working storage tbl*/

      KL08W01.KL08W-CLX1 = KL08W01.KL08W-CLX1 + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL08W01.KL08W-CLX1 = KL08W01.KL08W-CLX1 - 1;
        if (KL08W01.KL08W-CLX1 < 0)
          KL08W01.KL08W-CLX1 = 1;
        end
        KL08W01.KL08W-MAX-CLM-CT = KL08W01.KL08W-CLX1;
      else
        CLXREC.CLXCPROC = "KL08010";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VWOTRN01";
        TA1REC.TA1LOCAT[2] = ", FETCH ";
        TA1REC.TA1LOCAT[3] = "NEXT.   ";
   /* MOVE 'ANLST:' TO KL08W01.KL08W-TA1LOC1-1;*/
        TA1REC.TA1LOCAT[4] = "KL08010";
        KL08S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
        XPCL010();
      end
    end
  end /* WHILE END*/

   /* call iomod to close claims (deductions) in suspense cursor*/
  call "CL4020" ("C1", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXCPROC = "KL08010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOTRN01";
    TA1REC.TA1LOCAT[2] = ", CLOSE ";
    TA1REC.TA1LOCAT[3] = "CURSOR. ";
  /* MOVE 'ANLST:' TO KL08W01.KL08W-TA1LOC1-1;*/
  /* MOVE VWOTRN01.XCE-CR-ANLS-CD TO KL08W01.KL08W-TA1LOC1-2;*/
    TA1REC.TA1LOCAT[4] = "KL08010";
    KL08S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
    XPCL010();
  end

   /* if we have at least 1 claim in suspense then set pointers, count etc.*/
  if (KL08W01.KL08W-CLX1 >= 1)

    KL08W01.KL08W-TOT-TRANS-COUNT = KL08W01.KL08W-CLX1;

    KL08W-TOT-PAGE = KL08W-TOT-TRANS-COUNT / 16;
    KL08W-TOT-PAGE = KL08W-TOT-PAGE * 16;
    if (KL08W-TOT-PAGE < KL08W-TOT-TRANS-COUNT)
      KL08W-TOT-PAGE = KL08W-TOT-PAGE / 16;
      KL08W-TOT-PAGE = KL08W-TOT-PAGE + 1;
    else
      KL08W-TOT-PAGE = KL08W-TOT-PAGE / 16;
    end
    KL08W01.KL08W-CURR-PAGE = 1;
    KL08W01.KL08W-CLX1 = 1;
  else
    converseLib.validationFailed(0009); /* no records found*/
    KL08W01.KL08W-ERR-FL = "Y";
    return;
  end
end // end KL08010

// CONVERSE - MAP
Function KL08200()
   /* ******************************************************************/
   /* kl08200 - begin                            **/
   /* ******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* ----------------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                                  **/
   /* ----------------------------------------------------------------**/
   /* 04-13-99  GDECKE  ADD PF13 TRANSFER TO KL07                   **/
   /* 05-24-99  GDECKE  ADD LOGIC TO HANDLE ENTRY OF IVC NUMBER     **/
   /* 06-04-99  GDECKE  expand kl08w02 to 2000 occurs.              **/
   /* ******************************************************************/
   /* initialize map detail lines*/
   /*  */
   /* IF TRANSFERRING CONTROL FROM KL0E USING PF19 THEN BUILD THE*/
   /* MAP USING THE CLAIM NUMBER THAT WAS SHOWN ON KL0E*/

  KL08210-PF19-TRANS();

  if (KL08W-ERR-FL == "N" && KL08W-DTL-ERR-FL == "N")
    KL08S-MP1-HD-TO-WS();
    set KL08M001 initial;
    KL08S-MP1-WS-TO-HD();
  end

  if (KL08W-DTL-ERR-FL == "N" && KL08W-ERR-FL == "N")
    KL08W01.KL08W-IDX = 1;
    KL08M001.KL08M-CUR-PAGE = KL08W-CURR-PAGE;
    KL08M001.KL08M-TOT-PAGE = KL08W-TOT-PAGE;
    KL08S-LOAD-SCREEN();
  end

  KL08W-DTL-ERR-FL = "N";
  KL08W-ERR-FL = "N";
  KL08W-FIRST-TIME-FL = "N";

  converse KL08M001 ;

  if (converseVar.eventKey is enter)
    if ((KL08M001.CL-CLM-NBR == 0 && 
    KL08M001.AR-REF-NBR == " " && 
    KL08M001.AR-CUST-CLM-REFNBR == " " && 
    KL08M001.IV-IVC-ID == 0 && 
    KL08M001.CU-CO-ID == 0))
      converseLib.validationFailed(242);
      return;
    end
  /*  */
    if (KL08M001.CL-CLM-NBR == KL08W02.CL-CLM-NBR && 
    KL08M001.AR-REF-NBR == KL08W02.AR-REF-NBR && 
    KL08M001.AR-CUST-CLM-REFNBR == KL08W02.AR-CUST-CLM-REFNBR && 
    KL08M001.IV-IVC-ID == KL08W02.IV-IVC-ID && 
    KL08M001.CL-CLM-NBR == KL08W02.CL-CLM-NBR && 
    KL08M001.CU-CO-ID == KL08W02.CU-CO-ID)
  /* next sentence;*/
    else
      KL08W01.KL08W-MAX-CLM-CT = 2000;
      KL08W-TOT-PAGE = 1;
      set KL08W02 empty; /* initialize work record*/
      KL08S-INIT-PL1(); /* initialize parm record*/
  /* verify claim number valid*/
      if (KL08M001.CL-CLM-NBR != KL08W02.CL-CLM-NBR && 
      KL08M001.CL-CLM-NBR != 0)
        KL08WPL1.CL-CLM-NBR = KL08M001.CL-CLM-NBR;
        CLAREC.CLACLMNB = KL08M001.CL-CLM-NBR;
        call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL08M001.CL-CLM-NBR bold;
          KL08W-ERR-FL = "Y";
          converseLib.validationFailed(321);
          return;
        end
      end
      if (KL08M001.AR-REF-NBR != KL08W02.AR-REF-NBR && 
      KL08M001.AR-REF-NBR != " ")
        KL08WPL1.AR-REF-NBR = KL08M001.AR-REF-NBR;
      end
      if (KL08M001.AR-CUST-CLM-REFNBR != KL08W02.AR-CUST-CLM-REFNBR && 
      KL08M001.AR-CUST-CLM-REFNBR != " ")
        KL08WPL1.AR-CUST-CLM-REFNBR = KL08M001.AR-CUST-CLM-REFNBR;
      end
  /* SAVE ENTERED IVC NUMBER*/
      if (KL08M001.IV-IVC-ID != KL08W02.IV-IVC-ID && 
      KL08M001.IV-IVC-ID != " ")
        KL08WPL1.IV-IVC-ID = KL08M001.IV-IVC-ID;
      end
  /* verify company number valid*/
      if (KL08M001.CU-CO-ID != KL08W02.CU-CO-ID && 
      KL08M001.CU-CO-ID != 0)
        KUCREC.KUCCOID = KL08M001.CU-CO-ID;
        call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL08M001.CU-CO-ID bold, cursor;
          KL08W-ERR-FL = "Y";
          converseLib.validationFailed(81);
          return;
        end
        KL08WPL1.CU-CO-ID = KL08M001.CU-CO-ID;
      end
      KL08W-CLX1 = 1;
      KL08W01.KL08W-CURR-PAGE = 1;
      KL08010(); /* load array*/
    end
    if (KL08M001.KL08M-CUR-PAGE is modified)
      if (KL08M-CUR-PAGE > KL08M-TOT-PAGE)
        converseLib.validationFailed(811);
        return;
      end
      if (KL08M-CUR-PAGE < 1)
        KL08M-CUR-PAGE = 1;
      end
      move KL08M-CUR-PAGE to KL08W-CURR-PAGE withV60Compat;
      KL08W-CLX1 = (KL08W-CURR-PAGE * 16) + 1;
    end
  end

  if (converseVar.eventKey is enter)
    KL08S-VRFY-CLM-DTL();
  else
    if ((KL08M001.CL-CLM-NBR == 0 && 
    KL08M001.AR-REF-NBR == " " && 
    KL08M001.AR-CUST-CLM-REFNBR == " " && 
    KL08M001.IV-IVC-ID == 0 && 
    KL08M001.CU-CO-ID == 0))
      /* next sentence*/
    else
      KL08S-VRFY-CLM-DTL();
    end
  end

  if (converseVar.eventKey is pf3)
    KL08W01.KL08W-EOA-FL = "Y";
    return;
  end

  if (converseVar.eventKey is pf6)
    CLAREC.CLACLMNB = 0;
    CLXREC.CLACLMNB = 0;
    COMMAREA.CATOAP = "KL0B";
    XPCL002(); /* /*/
    return;
  end

  if (converseVar.eventKey is pf5)
    CLWMXIDX = 1;
    if (CLXREC.CLACLMNB >= 100000
     && CLXREC.CLACLMNB <= 99000000)
      CLWREC.CLWCLMNB[1] = CLXREC.CLACLMNB;
      CLAREC.CLACLMNB = CLXREC.CLACLMNB;
      /* *    verify claim number valid*/
      CLAREC.CLACLMNB = CLXREC.CLACLMNB;
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL08M001.CL-CLM-NBR bold;
        KL08W-ERR-FL = "Y";
        converseLib.validationFailed(321);
        return;
      end
    else
      /* MOVE 0 TO CLWREC.CLWITM1N;*/
      /* MOVE 0 TO CLAREC.CLACLMNB;*/
      set KL08M001.KL08M-FCT-CD[1] bold, cursor;
      KL08W-ERR-FL = "Y";
      converseLib.validationFailed(530);
      return;
    end

    CLWMNOPT = 5;
    CLWACTIV = "A";
    COMMAREA.CATOAP = "KL0E";
    XPCL002(); /* /*/
  end

  if (converseVar.eventKey is pf13)
    CLAREC.CLACLMNB = 0;
    CLXREC.CLACLMNB = 0;
    COMMAREA.CATOAP = "KL07";
    XPCL002(); /* /*/
  end

  if (converseVar.eventKey is pf7)
    KL08-PF7(); /* /*/
  end

  if (converseVar.eventKey is pf8)
    KL08-PF8(); /* /*/
  end

  if (converseVar.eventKey is pf9)
    KL08-PF9(); /* /*/
  end

  if (converseVar.eventKey is pf10)
    KL08-PF10(); /* /*/
  end
   /* ******************************************************************/
   /* kl08200 - end*/
   /* ******************************************************************/
end // end KL08200

// XFER WITH CLM NBR
Function KL08210-PF19-TRANS()
   /* ******************************************************************/
   /* KL08210-PF19-TRANS                                   **/
   /* ******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* ----------------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                                  **/
   /* ----------------------------------------------------------------**/
   /* 05-26-99  GDECKE  ADD LOGIC TO HANDLE CLM NBR ON TRANSFER     **/
   /* 06-04-99  GDECKE  change kl08w02 occurs to 2000.              **/
   /* ******************************************************************/
   /* initialize map detail lines*/

  if (converseVar.eventKey is pf19
   || converseVar.eventKey is enter)
    if ((KL08M001.CL-CLM-NBR == 0 && 
    KL08M001.AR-REF-NBR == " " && 
    KL08M001.AR-CUST-CLM-REFNBR == " " && 
    KL08M001.IV-IVC-ID == 0 && 
    KL08M001.CU-CO-ID == 0))
      if (CLAREC.CLACLMNB != 0)
        KL08M001.CL-CLM-NBR = CLAREC.CLACLMNB;
      else
        converseLib.validationFailed(242);
        return;
      end
    else
      return;
    end
  else
    return;
  end
  /*  */
  if (KL08M001.CL-CLM-NBR == KL08W02.CL-CLM-NBR && 
  KL08M001.AR-REF-NBR == KL08W02.AR-REF-NBR && 
  KL08M001.AR-CUST-CLM-REFNBR == KL08W02.AR-CUST-CLM-REFNBR && 
  KL08M001.IV-IVC-ID == KL08W02.IV-IVC-ID && 
  KL08M001.CL-CLM-NBR == KL08W02.CL-CLM-NBR && 
  KL08M001.CU-CO-ID == KL08W02.CU-CO-ID)
  /* next sentence;*/
  else
    KL08W01.KL08W-MAX-CLM-CT = 2000;
    KL08W-TOT-PAGE = 1;
    set KL08W02 empty; /* initialize work record*/
    KL08S-INIT-PL1(); /* initialize parm record*/
  /* verify claim number valid*/
    if (KL08M001.CL-CLM-NBR != KL08W02.CL-CLM-NBR && 
    KL08M001.CL-CLM-NBR != 0)
      KL08WPL1.CL-CLM-NBR = KL08M001.CL-CLM-NBR;
      CLAREC.CLACLMNB = KL08M001.CL-CLM-NBR;
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL08M001.CL-CLM-NBR bold;
        KL08W-ERR-FL = "Y";
        converseLib.validationFailed(321);
        return;
      end
    end
    if (KL08M001.AR-REF-NBR != KL08W02.AR-REF-NBR && 
    KL08M001.AR-REF-NBR != " ")
      KL08WPL1.AR-REF-NBR = KL08M001.AR-REF-NBR;
    end
    if (KL08M001.AR-CUST-CLM-REFNBR != KL08W02.AR-CUST-CLM-REFNBR && 
    KL08M001.AR-CUST-CLM-REFNBR != " ")
      KL08WPL1.AR-CUST-CLM-REFNBR = KL08M001.AR-CUST-CLM-REFNBR;
    end
  /* SAVE ENTERED IVC NUMBER*/
    if (KL08M001.IV-IVC-ID != KL08W02.IV-IVC-ID && 
    KL08M001.IV-IVC-ID != " ")
      KL08WPL1.IV-IVC-ID = KL08M001.IV-IVC-ID;
    end
  /* verify company number valid*/
    if (KL08M001.CU-CO-ID != KL08W02.CU-CO-ID && 
    KL08M001.CU-CO-ID != 0)
      KUCREC.KUCCOID = KL08M001.CU-CO-ID;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL08M001.CU-CO-ID bold, cursor;
        KL08W-ERR-FL = "Y";
        converseLib.validationFailed(81);
        return;
      end
      KL08WPL1.CU-CO-ID = KL08M001.CU-CO-ID;
    end
    KL08W-CLX1 = 1;
    KL08W01.KL08W-CURR-PAGE = 1;
    KL08010(); /* load array*/
  end
  if (KL08M001.KL08M-CUR-PAGE is modified)
    if (KL08M-CUR-PAGE > KL08M-TOT-PAGE)
      converseLib.validationFailed(811);
      return;
    end
    if (KL08M-CUR-PAGE < 1)
      KL08M-CUR-PAGE = 1;
    end
    move KL08M-CUR-PAGE to KL08W-CURR-PAGE withV60Compat;
    KL08W-CLX1 = (KL08W-CURR-PAGE * 16) + 1;
  end

   /* ******************************************************************/
   /* END..  KL08210-PF19-TRANS*/
   /* ******************************************************************/
end // end KL08210-PF19-TRANS

// add trn 250 if clm is  chgd
Function KL08S-ADD-TRN()

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-ADD-TRN";

  VWOTRN01.CL-CLM-NBR = KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX];

  XX0XS01();
  VWOTRN01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VWOTRN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VWOTRN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VWOTRN01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
  VWOTRN01.ZZ-CHNG-CNT = 0;

  call "CL4020" ("A ", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    CLXREC.CLXCPROC = "KL08010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOTRN01";
    TA1REC.TA1LOCAT[2] = ",ADD    ";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "KL08010";
    KL08S-TA1TBLKE(); /* populate ta1tblke field in*/
    return;
  end

end // end KL08S-ADD-TRN

// load array with vwotrn01 info
Function KL08S-BUILD-ARRAY()
   /* *************************************************************/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 01-27-98   PPERK1     NEW                                **/
   /* * 05-24-99   GDECKE     ADD IVC-ID TO SELECT LIST          **/
   /* *************************************************************/
   /* kl08s-build-array - begin*/
   /*  */
   /* load working storage array*/
   /*  */
  KL08W02.DTL-CL-CLM-NBR[KL08W-CLX1] = VWOTRN01.CL-CLM-NBR;
  KL08W02.DTL-AR-REF-NBR[KL08W-CLX1] = VWOTRN01.AR-REF-NBR;
  KL08W02.AR-CUST-CK-NBR[KL08W-CLX1] = VWOTRN01.AR-CUST-CK-NBR;
  KL08W02.DTL-CLM-REFNBR[KL08W-CLX1] = VWOTRN01.AR-CUST-CLM-REFNBR;
  set TA2REC empty;
  TA2GRGGN = VWOTRN01.AR-CK-DT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    KL08W02.DTL-AR-CK-DT[KL08W-CLX1] = TA2GRGB;
  end
  KL08W02.AR-AR-AMT[KL08W-CLX1] = VWOTRN01.AR-AR-AMT;
  KL08W02.IV-IVC-ID[KL08W-CLX1] = VWOTRN01.IV-IVC-ID;
  KL08W02.DTL-CU-CO-ID[KL08W-CLX1] = VWOTRN01.CU-CO-ID;
  KL08W02.AR-WROF-STAT-CD[KL08W-CLX1] = VWOTRN01.AR-WROF-STAT-CD;
   /*  */
   /* kl08s-build-array - end*/
   /*  */
end // end KL08S-BUILD-ARRAY

// verify claim detail if chg
Function KL08S-CHECK-GRP-ID()

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-CHECK-GRP-ID";

  KUCREC.KUCCOID = KL08M-DTL-CU-CO-ID[KL08W-IDX];
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
  if (SQLCA.VAGen_SQLCODE == 100)
    set KL08M-DTL-CU-CO-ID[KL08W-IDX] bold, cursor;
    KL08W-DTL-ERR-FL = "Y";
    converseLib.validationFailed(81);
    return;
  end
  /*  */
  KL08W-MAP-CU-GRP-ID = KUCREC.KUCGRPID;
  /*  */
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
  if (SQLCA.VAGen_SQLCODE == 100)
    KL08W-DTL-ERR-FL = "Y";
    converseLib.validationFailed(81);
    return;
  end
  /*  */
  KL08W-CLM-CU-GRP-ID = KUCREC.KUCGRPID;

    /* verify claim number has correct group id*/
  if (KL08W-CLM-CU-GRP-ID != KL08W-MAP-CU-GRP-ID)
    set KL08M-DTL-CL-CLM-NBR[KL08W-IDX] bold, cursor;
    KL08W-DTL-ERR-FL = "Y";
    converseLib.validationFailed(810);
    return;
  end
end // end KL08S-CHECK-GRP-ID

// delete trn 250
Function KL08S-DEL-TRN()

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-DEL-TRN";

  VWOTRN01.CL-CLM-NBR = KL08W02.DTL-CL-CLM-NBR[KL08W-IDX];
  VWOTRN01.AR-REF-NBR = KL08M001.KL08M-DTL-AR-REF-NBR[KL08W-IDX];
  call "CL4020" ("D ", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    CLXREC.CLXCPROC = "KL08010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOTRN01";
    TA1REC.TA1LOCAT[2] = ",DELETE ";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "KL08010";
    KL08S-TA1TBLKE(); /* populate ta1tblke field in*/
    return;
  end

end // end KL08S-DEL-TRN

// write claim detl to hist
Function KL08S-HIST-CLM-DTL()
   /* *************************************************************/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 01-27-98   PPERK1     NEW                                **/
   /* * 05-24-99   GDECKE     ADD IVC-ID TO SELECT LIST          **/
   /* *************************************************************/
  ;
  ;
  KL08W01.KL08W-CURR-PROC-NM = "KL08S-HIST-CLM-DTL";
  ;
  VWOTRN01.CL-CLM-NBR = KL08W02.DTL-CL-CLM-NBR[KL08W-CLX1];
  VWOTRN01.AR-REF-NBR = KL08W02.DTL-AR-REF-NBR[KL08W-CLX1];
  call "CL4020" ("S ", SQLCA, VWOTRN01, KL08WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    CLXREC.CLXCPROC = "KL08S-H";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOTRN01";
    TA1REC.TA1LOCAT[2] = "SELECT ";
    TA1REC.TA1LOCAT[3] = "UNIQUE  ";
    TA1REC.TA1LOCAT[4] = "KL08S-H";
    KL08S-TA1TBLKE(); /* popul*/
    return;
  end
  ;
   /* **************load information into history record*/
  ;
  VWOHST01.CL-CLM-NBR = VWOTRN01.CL-CLM-NBR;
  VWOHST01.AR-REF-NBR = VWOTRN01.AR-REF-NBR;
  VWOHST01.AR-CUST-CK-NBR = VWOTRN01.AR-CUST-CK-NBR;
  VWOHST01.AR-CK-DT = VWOTRN01.AR-CK-DT;
  VWOHST01.AR-CUST-CLM-REFNBR = VWOTRN01.AR-CUST-CLM-REFNBR;
  VWOHST01.AR-AR-AMT = VWOTRN01.AR-AR-AMT;
  VWOHST01.IV-IVC-ID = VWOTRN01.IV-IVC-ID;
  VWOHST01.CU-CO-ID = VWOTRN01.CU-CO-ID;
  VWOHST01.AR-OITM-TRN-DT = VWOTRN01.AR-OITM-TRN-DT;
  VWOHST01.OP-CUST-PO = VWOTRN01.OP-CUST-PO;
  VWOHST01.XGP-GPC-CD = VWOTRN01.XGP-GPC-CD;
  VWOHST01.AR-WROF-STAT-CD = VWOTRN01.AR-WROF-STAT-CD;
  ;
  XX0XS01();
  VWOHST01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VWOHST01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VWOHST01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VWOHST01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
  VWOHST01.ZZ-CHNG-CNT = 0;
  ;
  call "VWOHST01" ("A ", SQLCA, VWOHST01) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    CLXREC.CLXCPROC = "KL08010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOHST01";
    TA1REC.TA1LOCAT[2] = ",ADD    ";
    TA1REC.TA1LOCAT[3] = "        ";
    TA1REC.TA1LOCAT[4] = "KL08010";
    KL08S-TA1TBLKE(); /* populate ta1tblke field in*/
    return;
  end
end // end KL08S-HIST-CLM-DTL
// INIT ARRAY KL08WCLM
Function KL08S-INIT-ARRAY()

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-INIT-ARRAY";

  KL08W01.KL08W-CLX1 = 1;

  while (KL08W-CLX1 <= KL08W01.KL08W-MAX-CLM-CT)
    KL08W02.DTL-CL-CLM-NBR[KL08W-CLX1] = +000000000;
    KL08W02.DTL-AR-REF-NBR[KL08W-CLX1] = "          ";
    KL08W02.AR-CUST-CK-NBR[KL08W-CLX1] = "          ";
    KL08W02.DTL-AR-CK-DT[KL08W-CLX1] = "          ";
    KL08W02.AR-WROF-STAT-CD[KL08W-CLX1] = " ";
    KL08W02.DTL-CLM-REFNBR[KL08W-CLX1] = "                    ";
    KL08W02.AR-AR-AMT[KL08W-CLX1] = 00000000000;
    KL08W02.IV-IVC-ID[KL08W-CLX1] = 00000000000;
    KL08W02.DTL-CU-CO-ID[KL08W-CLX1] = +000000000;

    KL08W01.KL08W-CLX1 = KL08W01.KL08W-CLX1 + 1;
  end

  KL08W01.KL08W-CLX1 = 1;
end // end KL08S-INIT-ARRAY

// INIT KL08WPL1 IOMOD PARM LIST
Function KL08S-INIT-PL1()
   /* *************************************************************/
   /* * Populates parameter list with default values.  Parameter **/
   /* * list is passed to iomod cl4020 to retrieve rows from     **/
   /* * the TC250 database.    VWOTRN01                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 01-27-98   PPERK1     NEW                                **/
   /* * 05-24-99   GDECKE     ADD IVC-ID TO SELECT LIST          **/
   /* *************************************************************/

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-INIT-PL1";

  KL08WPL1.KL08W-SELECT-ID = " ";

  KL08WPL1.KL08W-STAT-CD = " ";

  KL08WPL1.CL-CLM-NBR = -1;

  KL08WPL1.CU-CO-ID = -1;

  KL08WPL1.AR-REF-NBR = "**********";

  KL08WPL1.AR-CUST-CLM-REFNBR = "********************";

  KL08WPL1.IV-IVC-ID = -1;

end // end KL08S-INIT-PL1

// INIT ARRAY KL07WCLM
Function KL08S-LOAD-SCREEN()
   /* ******************************************************************/
   /* KL08S-LOAD-SCREEN                                    **/
   /* ******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* ----------------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                                  **/
   /* ----------------------------------------------------------------**/
   /* 06-04-99  GDECKE  change kl08w02 occurs to 2000, ADD MSG 876   **/
   /* ******************************************************************/
  KL08W01.KL08W-CURR-PROC-NM = "KL08S-LOAD-SCRN";

  KL08W01.KL08W-IDX = 1;

  while (KL08W-IDX <= 16
   && KL08W-CLX1 <= KL08W01.KL08W-MAX-CLM-CT
   && KL08W-CLX1 <= KL08W-TOT-TRANS-COUNT)
    set KL08M-DTL-CL-CLM-NBR[KL08W-IDX] initialAttributes;
    set KL08M-FCT-CD[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-DTL-AR-REF-NBR[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-AR-AR-AMT[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-DTL-CU-CO-ID[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-AR-CK-DT[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-AR-CUST-CK-NBR[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-DTL-CLM-REFNBR[KL08W-IDX] initialAttributes;
    set KL08M001.KL08M-IV-IVC-ID[KL08W-IDX] initialAttributes;
    KL08M001.KL08M-FCT-CD[KL08W-IDX] = KL08W02.FCT-CD[KL08W-CLX1];
    KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] = KL08W02.DTL-CL-CLM-NBR[KL08W-CLX1];
    KL08M001.KL08M-DTL-AR-REF-NBR[KL08W-IDX] = KL08W02.DTL-AR-REF-NBR[KL08W-CLX1];
    KL08M001.KL08M-AR-CUST-CK-NBR[KL08W-IDX] = KL08W02.AR-CUST-CK-NBR[KL08W-CLX1];
    KL08M001.KL08M-IV-IVC-ID[KL08W-IDX] = KL08W02.IV-IVC-ID[KL08W-CLX1];
    KL08M001.KL08M-AR-CK-DT[KL08W-IDX] = KL08W02.DTL-AR-CK-DT[KL08W-CLX1];
    KL08M001.KL08M-DTL-CLM-REFNBR[KL08W-IDX] = KL08W02.DTL-CLM-REFNBR[KL08W-CLX1];
    KL08M001.KL08M-AR-AR-AMT[KL08W-IDX] = KL08W02.AR-AR-AMT[KL08W-CLX1];
    KL08M001.KL08M-DTL-CU-CO-ID[KL08W-IDX] = KL08W02.DTL-CU-CO-ID[KL08W-CLX1];

    if (KL08W02.AR-WROF-STAT-CD[KL08W-CLX1] == "W")
      set KL08M001.KL08M-FCT-CD[KL08W-IDX] yellow;
      set KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] yellow;
      set KL08M001.KL08M-DTL-AR-REF-NBR[KL08W-IDX] yellow;
      set KL08M001.KL08M-AR-AR-AMT[KL08W-IDX] yellow;
      set KL08M001.KL08M-DTL-CU-CO-ID[KL08W-IDX] yellow;
      set KL08M001.KL08M-AR-CK-DT[KL08W-IDX] yellow;
      set KL08M001.KL08M-AR-CUST-CK-NBR[KL08W-IDX] yellow;
      set KL08M001.KL08M-DTL-CLM-REFNBR[KL08W-IDX] yellow;
      set KL08M001.KL08M-IV-IVC-ID[KL08W-IDX] yellow;
    end

    if (KL08M-FCT-CD[KL08W-IDX] == "X")
      set KL08M001.KL08M-FCT-CD[KL08W-IDX] skip;
      set KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] skip;
    end
    KL08W01.KL08W-IDX = KL08W01.KL08W-IDX + 1;
    KL08W01.KL08W-CLX1 = KL08W01.KL08W-CLX1 + 1;
  end

  if (KL08W-CLX1 >= KL08W01.KL08W-MAX-CLM-CT)
    converseLib.validationFailed(876);
  end
end // end KL08S-LOAD-SCREEN

// SAVE HDR FLDS TO WS
Function KL08S-MP1-HD-TO-WS()
   /* *************************************************************/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 01-27-98   PPERK1     NEW                                **/
   /* * 05-24-99   GDECKE     ADD IVC-ID TO SELECT LIST          **/
   /* *************************************************************/

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-MP1-HD-TO-WS";

  KL08W02.XXXPRCNM = KL08M001.XXXPRCNM;
  KL08W02.XXXMAPNM = KL08M001.XXXMAPNM;
  KL08W02.XXXCURDT = KL08M001.XXXCURDT;
  KL08W02.AR-REF-NBR = KL08M001.AR-REF-NBR;
  KL08W02.CU-CO-ID = KL08M001.CU-CO-ID;
  KL08W02.CL-CLM-NBR = KL08M001.CL-CLM-NBR;
  KL08W02.AR-CUST-CLM-REFNBR = KL08M001.AR-CUST-CLM-REFNBR;
  KL08W02.IV-IVC-ID = KL08M001.IV-IVC-ID;
   /*  */
   /*  */

end // end KL08S-MP1-HD-TO-WS

// MOVE WS TO HEADER FIELDS
Function KL08S-MP1-WS-TO-HD()
   /* *************************************************************/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 01-27-98   PPERK1     NEW                                **/
   /* * 05-24-99   GDECKE     ADD IVC-ID TO SELECT LIST          **/
   /* *************************************************************/

   /* ********************************************/
   /* move working storage to map header fields*/
   /* ********************************************/

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-MP1-WS-TO-HD";

  KL08M001.XXXPRCNM = KL08W02.XXXPRCNM;
  KL08M001.XXXMAPNM = KL08W02.XXXMAPNM;
  KL08M001.XXXCURDT = KL08W02.XXXCURDT;
  KL08M001.AR-REF-NBR = KL08W02.AR-REF-NBR;
  KL08M001.CU-CO-ID = KL08W02.CU-CO-ID;
  KL08M001.CL-CLM-NBR = KL08W02.CL-CLM-NBR;
  KL08M001.AR-CUST-CLM-REFNBR = KL08W02.AR-CUST-CLM-REFNBR;
  KL08M001.IV-IVC-ID = KL08W02.IV-IVC-ID;
end // end KL08S-MP1-WS-TO-HD

Function KL08S-TA1TBLKE()
end // end KL08S-TA1TBLKE

// verify claim detail if chg
Function KL08S-VRFY-CLM-DTL()

  KL08W01.KL08W-CURR-PROC-NM = "KL08S-VRFY-CLM-DTL";

  KL08W-IDX = 1;
  KL08W-CLX1 = KL08W-CLX1 - 16;
  if (KL08W-CLX1 < 1)
    KL08W-CLX1 = 1;
  end

  while (KL08W-IDX <= 16)

      /* ************ change claim number *****************/

    if (KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] is modified)
      CLAREC.CLACLMNB = KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX];
      set SQLCA empty;
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
      if (KL08M001.KL08M-DTL-CU-CO-ID != CLAREC.KUCCOID)
        KL08S-CHECK-GRP-ID();
      end
      if (SQLCA.VAGen_SQLCODE == 0 && KL08W-DTL-ERR-FL == "N")
        KL08M-FCT-CD[KL08W-IDX] = "X";
        KL08W02.FCT-CD[KL08W-CLX1] = "X";
        KL08S-HIST-CLM-DTL();
        KL08S-DEL-TRN();
        KL08S-ADD-TRN();
        KL08W02.DTL-CL-CLM-NBR[KL08W-CLX1] = KL08M-DTL-CL-CLM-NBR[KL08W-IDX];
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] cursor, bold;
        KL08W-DTL-ERR-FL = "Y";
        converseLib.validationFailed(321);
        return;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR02";
        TA1REC.TA1TBLKE = "LOOKING FOR CLAIM IN ARRAY";
      end
    end

   /* ************ delete from tran table *********************/
   /* ************ move to history ****************************/

    if (KL08M001.KL08M-FCT-CD[KL08W-IDX] == "D")
      KL08M-FCT-CD[KL08W-IDX] = "X";
      KL08W02.FCT-CD[KL08W-CLX1] = "X";
      KL08S-HIST-CLM-DTL();
      KL08S-DEL-TRN();
    end

    if (KL08M001.KL08M-FCT-CD[KL08W-IDX] == "S")
      CLXREC.CLACLMNB = KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX];
      CLAREC.CLACLMNB = KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX];
      set SQLCA empty;
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* CSP;*/
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL08M001.KL08M-DTL-CL-CLM-NBR[KL08W-IDX] cursor, bold;
        KL08W-DTL-ERR-FL = "Y";
        converseLib.validationFailed(321);
        return;
      end
      KL08W-IDX = 16;
      return;
    end

    KL08W-IDX = KL08W-IDX + 1;
    KL08W-CLX1 = KL08W-CLX1 + 1;
  end
  /*  */
  KL08W-CLX1 = KL08W-CLX1 - 16;
  if (KL08W-CLX1 < 1)
    KL08W-CLX1 = 1;
  end
  /*  */
end // end KL08S-VRFY-CLM-DTL

//*** RECORD=KL08W01 ****
// ************************************************************
// *   WORKING STORAGE AREA FOR APPLICATION KL07              *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 08-07-97  PPERK1  NEW APPLICATION                        *
// ************************************************************
// ***********************
Record KL08W01 type basicRecord
  10 KL08W-EOA-FL KL08W-EOA-FL ; 
  10 KL08W-FIRST-TIME-FL KL08W-FIRST-TIME-FL ; 
  10 KL08W-EOS-FL KL08W-EOS-FL ; 
  10 KL08W-ERR-FL KL08W-ERR-FL ; 
  10 KL08W-BLD-SCRN-FL KL08W-BLD-SCRN-FL ; 
  10 KL08W-BLD-ARRAY-FL KL08W-BLD-ARRAY-FL ; 
  10 KL08W-DTL-CHG-FL KL08W-DTL-CHG-FL ; 
  10 KL08W-DTL-ERR-FL KL08W-DTL-ERR-FL [15] ; 
  10 KL08W-DTL-CLM-NBR-CHG KL08W-DTL-CLM-NBR-CHG ; 
  10 KL08W-UPDT-FCT-CD-CHG KL08W-UPDT-FCT-CD-CHG ; 
  10 KL08W-FCT-CD-FOUND KL08W-FCT-CD-FOUND ; 
  10 KL08W-TOT-TRANS-COUNT KL08W-TOT-TRANS-COUNT ; 
  10 * char(1) ; // SCREEN WORK AREAS
  10 KL08W-IDX KL08W-IDX ; 
  10 KL08W-CLX1 KL08W-CLX1 ; 
  10 KL08W-LINEX KL08W-LINEX ; 
  10 KL08W-CURR-PAGE KL08W-CURR-PAGE ; 
  10 KL08W-MAX-PAGE KL08W-MAX-PAGE ; 
  10 KL08W-PAGEX KL08W-PAGEX ; 
  10 KL08W-PAGE-NBR KL08W-PAGE-NBR ; 
  10 KL08W-PAGE-LN-CT KL08W-PAGE-LN-CT ; 
  10 KL08W-MAXLN KL08W-MAXLN ; 
  10 KL08W-CURR-PROC-NM KL08W-CURR-PROC-NM ; 
  10 KL08W-CURR-MAP-NM KL08W-CURR-MAP-NM ; 
  10 KL08W-MAX-CLM-CT KL08W-MAX-CLM-CT ; 
  10 * char(1) ; // WORK AREAS
  10 KL08W-AR-REF-NBR KL08W-AR-REF-NBR ; 
  10 KL08W-CL-CLM-NBR KL08W-CL-CLM-NBR ; 
  10 KL08W-CU-CO-ID KL08W-CU-CO-ID ; 
  10 KL08W-CLM-CU-GRP-ID KL08W-CLM-CU-GRP-ID ; 
  10 KL08W-MAP-CU-GRP-ID KL08W-MAP-CU-GRP-ID ; 
  10 * char(1) ; 
  10 KL08W-TIME KL08W-TIME ; 
    15 KL08W-TIME-NUM KL08W-TIME-NUM ; 
  10 KL08W-DATE KL08W-DATE ; 
    15 KL08W-DATE-NUM KL08W-DATE-NUM ; 
  10 KL08W-FMT1-DT KL08W-FMT1-DT ; 
    15 KL08W-FMT1-DT-CC KL08W-FMT1-DT-CC ; 
    15 KL08W-FMT1-DT-YY KL08W-FMT1-DT-YY ; 
    15 KL08W-FMT1-DT-MM KL08W-FMT1-DT-MM ; 
    15 KL08W-FMT1-DT-DD KL08W-FMT1-DT-DD ; 
  10 KL08W-FMT2-DT KL08W-FMT2-DT ; 
    15 KL08W-FMT2-DT-MM KL08W-FMT2-DT-MM ; 
    15 KL08W-FMT2-DT-DD KL08W-FMT2-DT-DD ; 
    15 KL08W-FMT2-DT-YY KL08W-FMT2-DT-YY ; 
  10 KL08W-FMT3-DT KL08W-FMT3-DT ; 
    15 KL08W-FMT3-DT-CCYY KL08W-FMT3-DT-CCYY ; 
    15 KL08W-FMT3-DT-MMDD KL08W-FMT3-DT-MMDD ; 
end // end KL08W01

Record KL08W02 type basicRecord
  10 KL08W02-HDR KL08W02-HDR ; 
    20 XXXPRCNM XXXPRCNM ; 
    20 XXXMAPNM XXXMAPNM ; 
    20 XXXRVNBR XXXRVNBR ; 
    20 XXXCURDT XXXCURDT ; 
    20 KL08W-TOT-PAGE KL08W-TOT-PAGE ; 
    20 CL-CLM-NBR CL-CLM-NBR ; 
    20 AR-REF-NBR AR-REF-NBR ; 
    20 CU-CO-ID CU-CO-ID ; 
    20 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
  10 FCT-CD FCT-CD [2000] ; 
  10 DTL-CL-CLM-NBR DTL-CL-CLM-NBR [2000] ; 
  10 DTL-AR-REF-NBR DTL-AR-REF-NBR [2000] ; 
  10 AR-AR-AMT AR-AR-AMT [2000] ; 
  10 DTL-CLM-REFNBR DTL-CLM-REFNBR [2000] ; 
  10 IV-IVC-ID IV-IVC-ID [2000] ; 
  10 AR-CUST-CK-NBR AR-CUST-CK-NBR [2000] ; 
  10 DTL-AR-CK-DT DTL-AR-CK-DT [2000] ; 
  10 DTL-CU-CO-ID DTL-CU-CO-ID [2000] ; 
  10 AR-WROF-STAT-CD AR-WROF-STAT-CD [2000] ; 
  10 ZZ-SDT ZZ-SDT [2000] ; 
end // end KL08W02

//*** RECORD=KL08WPL1 ****
// ************************************************************
// * This record contains parms passed to IOMOD CL4010.       *
// * The parms contains the field values to be used in        *
// * accessing the Claims in suspense database (dwosus01).    *
// * The IOMOD determines what cursor to use based on the     *
// * the fields passed.                                       *
// *                                                          *
// * DATE CREATED        09-16-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 09-16-97  PPERK1  INITIAL RECORD CREATION                *
// * 05-24-99  GDECKE  ADD INVOICE ID TO PARM LIST            *
// *                                                          *
// ************************************************************
// ************************
Record KL08WPL1 type basicRecord
  5 KL08W-PARM-LIST-1-GROUP KL08W-PARM-LIST-1-GROUP ; 
    10 KL08W-SELECT-ID KL08W-SELECT-ID ; 
    10 KL08W-STAT-CD KL08W-STAT-CD ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 IV-IVC-ID IV-IVC-ID ; 
end // end KL08WPL1

//*** RECORD=VWOHST01 ****
// *******  A/R WRITEOFF STATISTICAL HISTORY TABLE*************
// *                                                          *
// * DB2 TABLE:          DCLAIM.VWOHST01                      *
// *                                                          *
// * COPYLIB MEMBER:     DWOHST01                             *
// *                                                          *
// * I/0 MOD:            VWOHST01                             *
// *                                                          *
// * KEY TO DB2 TABLE:   CL-CLM-NBR                           *
// *                     AR-REF-NBR                           *
// *                                                          *
// *                                                          *
// * DATE CREATED        06-03-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 07-03-97  GDECKE  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record VWOHST01 type basicRecord
  5 VWOHST01-GROUP VWOHST01-GROUP ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 AR-CK-DT AR-CK-DT ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-OITM-TRN-DT AR-OITM-TRN-DT ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 AR-WROF-STAT-CD AR-WROF-STAT-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VWOHST01

//*** RECORD=VWOTRN01 ****
// *******  A/R WRITEOFF ACTIVE TRANSACTION ITEM TABLE ********
// *                                                          *
// * DB2 TABLE:          DCLAIM.VWOTRN01                      *
// *                                                          *
// * COPYLIB MEMBER:     DWOTRN01                             *
// *                                                          *
// * I/0 MOD:            VWOTRN01                             *
// *                                                          *
// * KEY TO DB2 TABLE:   CL-CLM-NBR                           *
// *                     AR-REF-NBR                           *
// *                                                          *
// *                                                          *
// * DATE CREATED        06-03-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 07-03-97  GDECKE  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record VWOTRN01 type basicRecord
  5 VWOTRN01-GROUP VWOTRN01-GROUP ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 AR-CK-DT AR-CK-DT ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-OITM-TRN-DT AR-OITM-TRN-DT ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 AR-WROF-STAT-CD AR-WROF-STAT-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VWOTRN01

// AR-CK-DT
DataItem DTL-AR-CK-DT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DTL-AR-REF-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DTL-CL-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem DTL-CLM-REFNBR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DTL-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FCT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-AR-REF-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-BLD-ARRAY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-BLD-SCRN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-CL-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer company id
DataItem KL08W-CLM-CU-GRP-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL08W-CLX1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer company id
DataItem KL08W-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL08W-CURR-MAP-NM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-CURR-PAGE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-CURR-PROC-NM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-DATE-NUM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-DTL-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-DTL-CLM-NBR-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-DTL-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-EOA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-EOS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FCT-CD-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FIRST-TIME-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT1-DT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT1-DT-CC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT1-DT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT1-DT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT1-DT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT2-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT2-DT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT2-DT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
DataItem KL08W-FMT2-DT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT3-DT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT3-DT-CCYY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-FMT3-DT-MMDD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-IDX num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-LINEX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer company id
DataItem KL08W-MAP-CU-GRP-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL08W-MAX-CLM-CT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-MAX-PAGE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-MAXLN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-PAGE-LN-CT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-PAGE-NBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-PAGEX num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-PARM-LIST-1-GROUP char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-SELECT-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-TIME char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W-TIME-NUM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-TOT-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-TOT-TRANS-COUNT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL08W-UPDT-FCT-CD-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL08W02-HDR char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VWOHST01-GROUP char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR WRITEOFF TRANS GROUP ITEM
DataItem VWOTRN01-GROUP char(109)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

