package kl0g;

import corpcom1.*;
import corpcom2.XQWREC;
import corpcom2.XX0XW01;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSFL;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XAUCD;
import corpx1.XGPTBL;
import corpy2.YATTBL;
import corpy2.YCRTBL;
import corpy2.YCTTBL;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUYREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL0G ****
// ************************************************************
// *   M a i n t e n a n c e    H i s t o r y    L o g        *
// ************************************************************
//   Date     Pgmr    Description of Change
// --------  ------  ------------------------------------------
// 01-31-89  JWOOD   ADDED NONCSP OPTION TO CALLS
// 01-31-89  JWOOD   ADDED XSSEGTR LOGIC
// 05-16-89  gdecke  DB2 structure changes: clarec, kucrec.
// 09-22-89  bcourt  remove 5-16 ref to unused tables: X CT,
//                   X WH; & recs: CL I, SY C, SY 2.
// 01-19-90  gdecke  DB2 structure changes for january.
// 02-08-90  sgorga  In process CL0G141- When ENTER is pressed,
//                   added code to cause pgm to flow to the
//                   defective (CL0Y) or RTS (CL0Z) inspection
//                   screens (whichever is appropriate): if
//                   menu option 9 was originally selected and
//                   if the pf20 key was pressed by the user in
//                   the Inspection Summary screen (CL02).
//                   (The pf20 key data is saved in field
//                   CLWREC.CLWMAPFM to be passed to this
//                   application.)
// 03-06-90  sgorga  In process CL0G141 -  In CL0G application,
//                   when the ENTER key has been pressed:
//                   Added code to cause a flow back to
//                   appl. CL0Y or CL0Z - if CL0G was entered
//                   from one of those two applications from
//                   their inspection product summary screen
//                   (....m001) and by pressing the pf18 key.
// 04-03-90  sgorga  DB2 structure changes.  Regen only.
// 07-03-90  sgorga  Added 4 more comment lines to Claim Hdr
//                   Comment screen - M005 (total 14 comment
//                   lines).
// 08-08-91  wjohns  Renamed application and commarea
//                     referrences to renamed claims appls.
// 10-30-91  twatso  added code for osd for dec 91 installation
//                   in process 141(so flow goes to kl0y)
// 01-13-92  sgorga  set ta1rec, ta2rec empty.  kl0g001.
// 12-02-92  lgross  Direct market modifications.  Write a tag
//                   record to dclaim.vdmact01 whenever a
//                   record is updated.  One record is written
//                   however many changes are made during
//                   one session. Changed:  KL0G-GET-CMPNY-REC,
//                   KL0GS-WRIT-DM-REC, KL0G001, KL0G101,
//                   KL0G915, KL0G916, KL0G917, CL0GW01
// 01-26-93  bcourt  change procs to sgrps.
// 01-29-93  jcarey  Changed KL0G915-917 to write an activity
//                   record whenever a tracer came from CSW
//                   (Consumer Services Workstation).
// 02-08-93  bcourt  Replace KL10TBL with KL14TBL to i.d.
//                   consumer services accounts.
// 02-17-93  BCOURT  Fix code to autoskip lines from csw/unix.
// 02-22-93  BCOURT  Drop VDMACT activity log since IBM to CSW
//              send program now always gets comments.
// 05-05-93  BCOURT  Add menu option 19 to mimic option 09.
// 09-28-93  GDECKE  MOVE '*' TO CLTRAC.CLTMPRFL IN KL0G204
// 10-07-94  twatso  removed IV0REC record - not used in app.
// 02-25-98  GDECKE  REMOVE PF KEY FOR KL0H - AR REF SCREEN.
// *********************
Program KL0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0GW01 CL0GW01; // record
  CLAREC CLAREC; // record
  CLGREC CLGREC; // record
  CLHREC CLHREC; // record
  CLTREC CLTREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XQWREC XQWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use KL0GM.KL0GM001,  // forms
      KL0GM.KL0GM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0G000: KL0G000();
    exit program;
    KL0G001: KL0G001();
    KL0G050: KL0G050();
    KL0G100: KL0G100();
    KL0G101: KL0G101();
    KL0G150: KL0G150();
    KL0G110: KL0G110();
    KL0G120: KL0G120();
    KL0G130: KL0G130();
    KL0G140: KL0G140();
    KL0G200: KL0G200();
    KL0G201: KL0G201();
    KL0G250: KL0G250();
    KL0G210: KL0G210();
    KL0G220: KL0G220();
    KL0G240: KL0G240();
    KL0G230: KL0G230();
  end // end main
end // end KL0G

// application main logic
Function KL0G000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xpcl001 checks to ensure that the claim header has    **/
   /* *         been flagged as "in use" if this application    **/
   /* *         is does updates.                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  COMMAREA.CACURRAP = "KL0G";
  ;
  ;
  ;
  ;
  KL0G001(); /* initilize the application*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0G050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/
  ;
  ;
  ;
  ;
end // end KL0G000

// initialize application
Function KL0G001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                           **/
   /* 01-13-92  sgorga  Set ta1rec and ta2rec empty.            **/
   /* 12-02-92  lgross  got date and time from ta0020           **/
   /* 02-22-93  BCOURT drop flag for CSW activity log file.     **/
   /* *************************************************************/
  ;
   /* TEMP001;*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entered thru csp main menu*/
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  XPCL011(); /* claims entry module*/
  ;
  set KL0GM001 initial; /* clear screen*/
  set KL0GM005 initial; /* clear screen*/
  set TA1REC empty;
  set TA2REC empty;
  set CL0GW01 empty; /* clear working storage*/
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  ;
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build-screen flag to 'yes'*/
  ;
  ;
  if (CLWREC.CLWMCMNT == "Y") /* if want memo comments*/
    CLXREC.CLXCSCRN = "KL0GM005"; /* set second screen name*/
  else
    CLXREC.CLXCSCRN = "KL0GM001"; /* set first screen name*/
  end
  ;
  ;
  CLXREC.CLXSNAME[1] = "KL0GM001"; /* screens used in this*/
  CLXREC.CLXSNAME[2] = "KL0GM005"; /* applications*/
  ;
  ;
   /* fields used in both screens*/
  ;
  CL0GW01.CL0GWCMT = "N"; /* switch to update header*/
  CLXREC.CLXERRF = "N";
  ;
   /* fields used in kl0gm005*/
  ;
  CL0GW01.CL0GWLPF = "N"; /* don't want to loop yet*/
  CLXREC.CLXTESTF = "N"; /* no entered seq nbr yet*/
  CLXREC.CLXUPDTF = "N"; /* screen was modified before exiting*/
   /* get time and date from ta0040*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN KL0G001";
    XPCL010(); /* abend*/
  end
end // end KL0G001

// main cl0g branch control
Function KL0G050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G050"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0gm001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0G100(); /* process screen cl0gm001*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0gm005*/
      while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
        KL0G200(); /* process screen cl0gm005*/
      end
    else
      TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
      XPCL010();
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf) = 'n'*/
           /* we go back to the top of cl0g050...*/
       /* if the end-of-application flag (clxeoaf) = 'y'*/
           /* we return to cl0g000.*/
  ;
  ;
  ;
end // end KL0G050

// converse screen m001
Function KL0G100()
   /* ************************************************************/
   /* *    process screen cl0gm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0e050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* * 1/07/93 jhecke changed to accomodate paging (cl1210)    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G100"; /* set current process name*/
  KL0GM001.XXXPRCNM = "KL0G100"; /* set screen  process name*/
  KL0GM001.XXXMAPNM = "KL0GM001"; /* set current map name*/
  KL0GM001.XXXRVNBR = "00"; /* set revision number*/
  KL0GM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0G101(); /* build the screen*/
  end
  ;
  if (CLXREC.CLXERRF == "N")
    KL0G150(); /* check screen security*/
  end
  ;
   /* ***********************************************************/
  converse KL0GM001 ;
   /* ***********************************************************/
  ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* init errors-on-screen flag*/
  CLXREC.CLXUPDTF = "N"; /* init have-updates flag*/
  ;
  ;
     /* set modified fields modified*/
  KL0GS67();
  ;
  ;
  if (KL0GM001.CLGCOMNT[1] is modified
   || KL0GM001.CLGCOMNT[2] is modified
   || KL0GM001.CLGCOMNT[3] is modified
   || KL0GM001.CLGCOMNT[4] is modified
   || KL0GM001.CLGCOMNT[5] is modified
   || KL0GM001.CLGCOMNT[6] is modified
   || KL0GM001.CLGCOMNT[7] is modified
   || KL0GM001.CLGCOMNT[8] is modified
   || KL0GM001.CLGCOMNT[9] is modified
   || KL0GM001.CLGCOMNT[10] is modified
   || KL0GM001.CLGCOMNT[11] is modified
   || KL0GM001.CLGCOMNT[12] is modified
   || KL0GM001.CLGCOMNT[13] is modified
   || KL0GM001.CLGCOMNT[14] is modified)
    CLXREC.CLXEDITF = "Y"; /* set perform-edit-flag to 'yes'*/
  else
    CLXREC.CLXEDITF = "N"; /* if no entries, then no edits*/
  end
  ;
  ;
  KL0GS-UPDATE-WS(); /* update working storage*/
  ;
  KL0GS-ATTRIB-RESET(); /* reset attribute*/
  ;
  KL0G110(); /* handle any special entries*/
  ;
  ;
  if (CLXREC.CLXEDITF == "Y") /* if we stil want to edit*/
    KL0G120(); /* go process screen entries*/
  end
  ;
  if (CLXREC.CLXERRF == "N" /* only update header if no errors*/
   && CLXREC.CLXUPDTF == "Y") /* and we have an update*/
    KL0G130(); /* update comments flag in header*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N") /* only flow if no errors*/
    KL0G140(); /* handle pf keys to transfer out*/
  end
  ;
  KL0G150(); /* re-check security*/
  ;
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
  ;
  ;
  ;
end // end KL0G100

// build screen cl0gm001
Function KL0G101()
   /* ************************************************************/
   /* *        build screen cl0gm001                            **/
   /* *                                                         **/
   /* * 1/07/93 jhecke changed to accomodate paging (cl1210)    **/
   /* *                                                         **/
   /* * 2/2/93  lgross don't allow updates to comments if       **/
   /* *         clgcmtyp = 'b'(direct marketing created on csw) **/
   /* *         bring back all comment types from io mod        **/
   /* *         display only 'b' or 'c' type                    **/
   /* * 2/17/93 BCOURT move askip code from 'storage' area to   **/
   /* *           'move to map' area of the code.               **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0G101"; /* set current process name*/
  ;
   /* move data to screen*/
  ;
  KL0GM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0GM001.KUCCOID = CLAREC.KUCCOID;
  KL0GM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0GM001.XNXCD = CLAREC.XNXCD;
  KL0GM001.KUCCONM = CLWREC.KUCCONM;
  KL0GM001.CLACTCNM = CLAREC.CLACTCNM;
  KL0GM001.XGPCD = CLAREC.XGPCD;
  KL0GM001.YCTCD = CLAREC.YCTCD;
  KL0GM001.YCRCD = CLAREC.YCRCD;
  ;
  KL0GS08(); /* look up gpc abrv*/
  ;
  KL0GS09(); /* look up claim type abrv*/
  ;
  KL0GS10(); /* look up claim reason short desc*/
  ;
   /* move data to record key*/
  ;
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 1; /* always refers to the first return*/
  CLGREC.CL2ISNBR = 0; /* phase b change 08-02-88*/
  CLGREC.CLGCMTYP = "**"; /* working with 'c'omment screen*/
   /* MOVE ' ' TO CLGREC.XGPCD;*/
   /* MOVE ' ' TO CLGREC.SY1STNBR;*/
   /* MOVE ' ' TO CLGREC.SY2CLRID;*/
   /* MOVE ' ' TO CLGREC.XDMCD;*/
  ;
  KL0G911(); /* get set of applicable comments*/
  if (CLXREC.CLXERRF == "Y")
                                   /* in ascending order by comment seq nbr*/
    return;
  end
  ;
  KL0G912(); /* get first comment record*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CLXREC.CLXLSTAX = 0; /* set last filled pointer*/
      CL0GW01.CL0GWFLN = 1;
      CL0GW01.CL0GWTLN = 14;
      KL0GM001.KL0GW-FROM = 1;
      KL0GM001.KL0GW-TO = 14;
      KL0GM001.KL0GW-OF = 0;
      converseLib.validationFailed(126); /* no comments for this claim*/
      return;
    end
  end
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXLINEX <= 99) /* lines on screen*/
    ;
     /* move 'B' and 'C' comments to the working storage.*/
     /* They are moved to screen further below in this stmt.*/
    ;
    if (CLGREC.CLGCMTYP == "B" /* created on csw*/
     || CLGREC.CLGCMTYP == "C") /* created on ibm*/
      CL0GW01.CL0GWDT1 = CLGREC.ZZZCHGDT; /* strip off leading 0*/
      CL0GW01.CL0GW-ADD-DATE[CLXLINEX] = CL0GW01.CL0GWDT2;
      CL0GW01.CL0GW-USER-ID[CLXLINEX] = CLGREC.XXXUSRID;
      CL0GW01.CL0GW-COMMENT[CLXLINEX] = CLGREC.CLGCOMNT;
      CL0GW01.CLGCMSEQ[CLXLINEX] = CLGREC.CLGCMSEQ;
      CL0GW01.CL0GW-COMNT-TYP-CD[CLXLINEX] = CLGREC.CLGCMTYP;
      CL0GW01.CL0GWZZC[CLXLINEX] = CLGREC.ZZZCHGCT;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    ;
    KL0G912(); /* get next comment record*/
    if (CLXREC.CLXERRF == "Y")
      KL0G913();
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
      CLXREC.CLXLSTAX = CLXREC.CLXLINEX; /* set last-filled pointer*/
    end
  end
  ;
  KL0GM001.KL0GW-OF = CLXREC.CLXLINEX; /* show total lines*/
  KL0G913(); /* close cursor for clgrec*/
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 14 /* move everything to the screen*/
   && CL0GW01.CL0GW-USER-ID[CLXLINEX] > " ")
    KL0GM001.CL0GWCDT[CLXLINEX] = CL0GW-ADD-DATE[CLXLINEX];
    KL0GM001.CL0GWUID[CLXLINEX] = CL0GW-USER-ID[CLXLINEX];
    KL0GM001.CLGCOMNT[CLXLINEX] = CL0GW-COMMENT[CLXLINEX];
    if (CL0GW-COMNT-TYP-CD[CLXLINEX] == "B") /* comnts from csw*/
      set KL0GM001.CLGCOMNT[CLXLINEX] skip; /* can't be changed*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  KL0GM001.KL0GW-FROM = 1;
  KL0GM001.KL0GW-TO = 14;
  CL0GW01.CL0GWFLN = 1; /* set from line*/
  CL0GW01.CL0GWTLN = 14; /* set to line*/
  ;
   /* set cursor to next available blank comment line*/
  if (CLXREC.CLXLINEX >= 1
   && CLXREC.CLXLINEX < 14)
    /* CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;*/
    set KL0GM001.CLGCOMNT[CLXLINEX] cursor;
  end
end // end KL0G101

// handle screen m001 spec entrys
Function KL0G110()
   /* ************************************************************/
   /* *     handle special entries from screen cl0gm001         **/
   /* *                                                         **/
   /* * 1/07/93 jhecke changed to accomodate paging (cl1210)    **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G110"; /* set current process name*/
  ;
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf20) /* 1-4-88*/
    return;
  end
   /* PF19 REMOVED 02-27-98 PER SANDY KELLY*/
   /* OR EZEAID IS PF19*/
  ;
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    KL0GS03();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1)
    KL0GS01(); /* handle pfkey 1*/
    return;
  end
  ;
          /* fast path out*/
  ;
  if (converseVar.eventKey is enter)
    if (KL0GM001.CATOAP == " "
     && KL0GM001.CAITEM == " ")
      return;
    else
      if (KL0GM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0GM001.CATOAP;
        COMMAREA.CAITEM = KL0GM001.CAITEM;
        CLXREC.CLXEDITF = "N"; /* don't edit data*/
        XPCL002(); /* try and get there*/
        return;
      else
        if (KL0GM001.CATOAP == " "
         && KL0GM001.CAITEM != " ")
          converseLib.validationFailed(1); /* enter option field*/
          CLXREC.CLXEDITF = "N"; /* don't edit data*/
          CLXREC.CLXERRF = "Y"; /* screen contained errors*/
          return;
        end
      end
    end
  end
  ;
   /* if entered key doesn't match one of the previous conditions*/
  ;
  converseLib.validationFailed(2); /* invalid pf-key*/
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  CLXREC.CLXERRF = "Y"; /* there were errors*/
  CLXREC.CLXEOSF = "N"; /* we want the same screen*/
  CLXREC.CLXEOAF = "N"; /* and the same application*/
  ;
end // end KL0G110

// process screen m001 entries
Function KL0G120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen cl0gm001                   **/
   /* *                                                         **/
   /* * 1/07/93 jhecke changed to accomodate paging (cl1210)    **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G120"; /* set current process name*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9)
    return;
  end
  ;
  CL0GW01.CL0GWLNX = 1;
  ;
  while (CL0GW01.CL0GWLNX <= 99)
    if (CL0GW01.CL0GW-COMMENT-MOD[CL0GWLNX] == "Y") /* comment modified*/
      KL0GS40();
    end
    CL0GW01.CL0GWLNX = CL0GW01.CL0GWLNX + 1;
  end
  ;
  CL0GW01.CL0GWLNX = 1;
  ;
  while (CL0GW01.CL0GWLNX <= 99)
    if (CL0GW01.CL0GW-COMMENT != " ") /* set header flag if comments exist*/
      CL0GW01.CL0GWCMT = "Y";
    end
    CL0GW01.CL0GWLNX = CL0GW01.CL0GWLNX + 1;
  end
  ;
end // end KL0G120
// update header with comments
Function KL0G130()
   /* ************************************************************/
   /* *     this process updates claim header to show if        **/
   /* *      there are comments.*/
   /* *                                                         **/
   /* *  Maintenance History                                    **/
   /* *                                                         **/
   /* *  10-12-89 CHELLM  added loop to attempt clarec update   **/
   /* *                   a second time if -911 occurs.(CL756)  **/
   /* *  04-17-92 BCOURT  Rename CLACMIND to CL-CLCOM-FL.       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G130"; /* set current process name*/
  ;
   /* key is already loaded*/
  ;
  KL0G924(); /* get claims header record*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
   /* save comment indicator for later reference*/
  ;
  CL0GW01.CL-CLCOM-FL = CLAREC.CLACMIND;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (CL0GW01.CL0GWCMT == "Y") /* there are header comments*/
      if (CLAREC.CLACMIND == "N") /* no comments*/
        CLAREC.CLACMIND = "Y"; /* now there are comments*/
      end
      ;
    else /* there are no header comments*/
      CLGREC.CLACLMNB = CLAREC.CLACLMNB;
      CLGREC.CLHSEQNB = -1;
      CLGREC.CL2ISNBR = -1;
      CLGREC.CLGCMTYP = "**";
      ;
      call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
      call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        CLAREC.CLACMIND = "Y"; /* found comments*/
      else
        CLAREC.CLACMIND = "N"; /* found no comments*/
      end
      call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
  ;
  if (CLAREC.CLACMIND == CL0GW01.CL-CLCOM-FL) /* no need to update header*/
    return;
  end
  ;
  XX0XS01(); /* update  date and time    (cwh 8-8-89)*/
  ;
  CLAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  CL0GW01.CL0GWDCT = 0; /* CWH 10-12-89*/
  CL0GW01.CL0GWDFL = "Y";
  ;
  while (CL0GW01.CL0GWDFL == "Y")
    KL0G927(); /* replace claim header;*/
  end
  if (CLXREC.CLXERRF == "Y")
    return;
  end
end // end KL0G130

// act on PF keys and ENTER
Function KL0G140()
   /* ************************************************************/
   /* *     check pf keys and 'enter' for next action. since    **/
   /* *     pf3,pf4 and pf1 were already acted upon, after      **/
   /* *     the converse, we only have to take care of the      **/
   /* *     rest.                                               **/
   /* * 01/07/93 jhecke added pf7-8 (paging) code per task      **/
   /* *                 cl1210.                                 **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G140"; /* set current process name*/
  ;
  if (converseVar.eventKey is enter)
    if (KL0GM001.KL0GW-FROM is modified) /* has user selected line number*/
      if (KL0GM001.KL0GW-FROM > 0) /* is it a valid one*/
        KL0GS-PAGE-SELECT(); /* go to it*/
        return;
      else
        CLXREC.CLXERRF = "Y"; /* error*/
        converseLib.validationFailed(37); /* invalid value (0)*/
        set KL0GM001.KL0GW-FROM cursor, modified, bold;
        return;
      end
    end
    KL0G141();
    XPCL002(); /* transfer to selected appl*/
  end
  ;
  ;
  if (converseVar.eventKey is pf5)
    KL0GS05(); /* handle pfkey 5*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf7)
    KL0GS-PAGE-BACKWRD(); /* handle pfkey 7*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf8)
    KL0GS-PAGE-FORWRD(); /* handle pfkey 8*/
    return;
  end
  ;
  if (converseVar.eventKey is pf9)
    KL0GS-PAGE-MAX(); /* handle pfkey 9*/
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* 1-4-88*/
    KL0GS14(); /* handle pfkey 14 to g/l*/
    KL0GM001.VAGen_EZEMSG = "UNDEFINED CLAIM TYPE - CONTACT MIS";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf16)
    KL0GS16(); /* handle pfkey 16*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf17)
    KL0GS17(); /* handle pfkey 17*/
    return;
  end
  ;
    /* PF19 REMOVED 02-27-98 PER SANDY KELLY*/
   /* IF EZEAID IS PF19;*/
    /* KL0GS19;                        /* handle pfkey 19*/
    /* EZERTN;*/
   /* END;*/
  ;
  ;
  if (converseVar.eventKey is pf20) /* 1-4-88*/
    KL0GS20(); /* handle pfkey 20 to memo cmts*/
    return;
  end
  ;
  ;
end // end KL0G140

// handle pfkeys
Function KL0G141()
   /* ************************************************************/
   /* *                                                         **/
   /* *   if the claim reason is for traffic and g/l, or traffic**/
   /* *   and product, the flow is to g/l, product and traffic  **/
   /* *   comes last                                            **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* *  02-08-90  SGORGA                                       **/
   /* *  Added code that causes a flow to the 'DEF' (CL0Y) or   **/
   /* *  'RTS' (CL0Z) inspection screens:                       **/
   /* *  1) If menu option 9 of the claims menu was selected    **/
   /* *     (Opt 9 flows to the insp. summ. scrn - cl02),  and  **/
   /* *  2) If the PF20 key was pressed by the user.            **/
   /* *     (In application CL02, if PF20 is pressed, the       **/
   /* *     literal "PF20 KEY" is stored in the CLWREC.CLWMAPFM **/
   /* *     field.  Application CL0G (using this statement      **/
   /* *     group) checks for that condition.                   **/
   /* *                                                         **/
   /* *  NOTE:  There is a test used in below code:             **/
   /* *          "or ycttbl.yctdef(ezetst) eq 'y'"              **/
   /* *         This test is used to select 'DEF' claim types,  **/
   /* *         although there are two other claim types with   **/
   /* *         that flag = 'y';  'DFO' and 'NIL'.  I am told   **/
   /* *         that this application does not allow those two  **/
   /* *         claim types "in", so this is suppposed to be a  **/
   /* *         safe test for getting only 'DEF' claim types.   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *  03-05-90  SGORGA                                       **/
   /* *  Added code that causes a flow back to the CL0Y or CL0Z **/
   /* *  application:                                           **/
   /* *  1) If ENTER has been pressed from the KL0GM001 screen, **/
   /* *     and                                                 **/
   /* *  2) If the user came to KL0GM001 (to view comments) by  **/
   /* *     pressing PF18 key while in appl. CL0Y or CL0Z.      **/
   /* *                                                         **/
   /* *  08-08-91  wjohns                                       **/
   /* *            Renamed application names for transfers.     **/
   /* *  10-30-91  twatso  added code for osd for installation  **/
   /* *                    in dec. 91                           **/
   /* *  05-05-93  BCOURT  Add menu options 17 & 19, like 09.   **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G141"; /* set current process name*/
  ;
  CLXREC.CLXEOSF = "Y";
  CLXREC.CLXEOAF = "Y";
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD) /* need this to put value in ezetst*/
                                   /* index*/
  end
  ;
  if (CLWREC.CLWMAPFM == "PF18 KEY")
                                   /* if pressed pf18 in kl0Y or kl0z*/
    if (COMMAREA.CAFROMAP == "KL0Y") /* and coming from kl0y appl.*/
      COMMAREA.CATOAP = "KL0Y"; /* go back to Kl0y*/
      CLWREC.CLWMAPFM = " "; /* init. to spaces*/
    else
      if (COMMAREA.CAFROMAP == "KL0Z") /* if coming from kl0z appl.*/
        COMMAREA.CATOAP = "KL0Z"; /* go back to kl0z*/
        CLWREC.CLWMAPFM = " "; /* init. to spaces*/
      else
        XSCLSFL(); /* determines flow*/
      end
    end
  else
    if (CLWREC.CLWMNOPT == 9  /* if menu opt 9*/
     || CLWREC.CLWMNOPT == 17 /* if menu opt 17  5-5-93*/
     || CLWREC.CLWMNOPT == 19) /* if menu opt 19  5-5-93*/
      if (CLWREC.CLWMAPFM == "PF20 KEY") /* if pressed pf20 in Kl02*/
        if (YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y" /* if 'cdr' claim type*/
         && CLAREC.YCRCD == "RTS")                   /* if 'rts' reason code*/
          COMMAREA.CATOAP = "KL0Z"; /* go to rts inspection screen*/
        else
          if (YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y" /* if 'cdr' claim type*/
           || YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y") /* if 'def' claim type, or osd*/
          /* OR YCTTBL.YCT-OSD-FL(EZETST) EQ 'Y'; /* if 'osd' claim type*/
            COMMAREA.CATOAP = "KL0Y"; /* go to def inspection screen*/
          else
            COMMAREA.CATOAP = "KL0Z"; /* go to rts inspection screen*/
          end
        end
        CLWREC.CLWMAPFM = " "; /* init. to spaces*/
      else /* 5-5-93 change "and 'pf20'" to "if".*/
        XSCLSFL(); /* determines flow*/
      end
    else
      XSCLSFL(); /* determines flow*/
    end
  end
  ;
  XPCL002(); /* and try to get there*/
  CLXREC.CLXEOSF = "N"; /* failed, reset flags*/
  CLXREC.CLXEOAF = "N";
  ;
end // end KL0G141

// check security for map display
Function KL0G150()
   /* **********************************************************/
   /* protects the map from unauthorized add/change/delete*/
   /* functions.*/
   /* **********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G150"; /* set current process name*/
  ;
   /* IF CLWREC.CLWACTIV = 'I';*/
    /* AND CLWREC.CLWMNOPT = 4       ; inquiry mode*/
    /* MOVE 1 TO CLXREC.CLXLINEX;*/
    /* WHILE CLXREC.CLXLINEX LE 14;*/
      /* PERFORM CL0G151             ; set map fields protected*/
    /* END ;*/
    /* SET CL0GM001.CATOAP CURSOR;*/
    /* EZERTN;*/
   /* END ;*/
  ;
  if (COMMAREA.CAADDFL == "Y"
   || COMMAREA.CACHGFL == "Y")
    return; /* LEAVE FIELDS UNPROTECTED*/
  else
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 14)
      KL0G151(); /* set map fields protected*/
    end
    set KL0GM001.CATOAP cursor; /* move cursor to fastpath item*/
    return;
  end
end // end KL0G150

// set fields protected
Function KL0G151()
   /* **********************************************************/
   /* set map fields protected*/
  ;
   /* **********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G151"; /* set current process name*/
  ;
  set KL0GM001.CLGCOMNT[CLXLINEX] skip;
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  ;
end // end KL0G151

// converse screen m005
Function KL0G200()
   /* ************************************************************/
   /* *     process screen cl0%m005                             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *      "while loop" from cl0%050 until the end-of-screen  **/
   /* *      flag (clxeosf) gets set to 'y'                     **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G200"; /* set current process name*/
  KL0GM005.XXXPRCNM = "KL0G200"; /* set screen  process name*/
  KL0GM005.XXXMAPNM = "KL0GM005"; /* set current map name*/
  KL0GM005.XXXRVNBR = "00"; /* set revision number*/
  KL0GM005.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0G201(); /* build screen because new record*/
  end /* to display or pf7/pf8 keyed*/
  ;
  CLXREC.CLXBLDSC = "N"; /* skip build screen next time thru*/
    /* skip build when have errors to show, or pf12 was keyed*/
  ;
  if (CLXREC.CLXERRF == "N")
    KL0G250(); /* check screen security*/
  end
  ;
   /* ***********************************************************/
  converse KL0GM005 ;
   /* ***********************************************************/
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* re-set error flag*/
  ;
  ;
    /* set modified fields modified*/
  KL0GS61();
  ;
    /* to cover for ibm bug*/
  if (KL0GM005.CLHSEQNB is modified
   || KL0GM005.CLGCOMNT[1] is modified
   || KL0GM005.CLGCOMNT[2] is modified
   || KL0GM005.CLGCOMNT[3] is modified
   || KL0GM005.CLGCOMNT[4] is modified
   || KL0GM005.CLGCOMNT[5] is modified
   || KL0GM005.CLGCOMNT[6] is modified
   || KL0GM005.CLGCOMNT[7] is modified
   || KL0GM005.CLGCOMNT[8] is modified
   || KL0GM005.CLGCOMNT[9] is modified
   || KL0GM005.CLGCOMNT[10] is modified)
    CLXREC.CLXEDITF = "Y"; /* then set do-edits-flag to 'yes'*/
    CLXREC.CLXUPDTF = "Y"; /* will need to update header*/
  else
    CLXREC.CLXEDITF = "N"; /* if no entries, then no edits*/
  end
  ;
  KL0G210(); /* handle any special entries*/
    /* may exit appl from this process*/
  ;
  ;
  if (CLXREC.CLXEDITF == "Y") /* if we still want to edit*/
    KL0G220(); /* go edit screen entries*/
  end
  ;
  if (CLXREC.CLXERRF == "N" /* no errors*/
   && CLXREC.CLXUPDTF == "Y") /* screen was modified*/
    KL0G230(); /* if needed, update header with cmnts*/
  end
  ;
  if (CLXREC.CLXERRF == "N")
    KL0G240(); /* check pf keys to exit application*/
  end
  ;
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosf) is 'n'*/
       /* the perform returns to top of process cl0%100.*/
     /* else*/
       /* the perform returns to cl0%050.*/
  ;
  ;
  ;
end // end KL0G200

// initialize screen cl0gm005
Function KL0G201()
   /* ************************************************************/
   /* *        this process initializes screen cl0gm005         **/
   /* *        it will read the necessary tables                **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0G201"; /* set current process name*/
  ;
  ;
   /* need to initialize the map text fields*/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 10)
    KL0GS65();
  end
  ;
  ;
  KL0GM005.CLACLMNB = CLAREC.CLACLMNB;
  KL0GM005.KUCCOID = CLAREC.KUCCOID;
  KL0GM005.KUMSTRID = CLAREC.KUMSTRID;
  KL0GM005.XNXCD = CLAREC.XNXCD;
  KL0GM005.CLACTCNM = CLAREC.CLACTCNM;
  KL0GM005.XGPCD = CLAREC.XGPCD;
  KL0GM005.YCTCD = CLAREC.YCTCD;
  KL0GM005.KUCCONM = CLWREC.KUCCONM;
  ;
  if (CLXREC.CLXTESTF == "Y") /* seq nbr was decided in cl0g240*/
                               /* ; not true first time thru*/
     /* next sentence,         desired nbr is already in map field*/
  else
    if (CLWREC.CLHSEQNB == 0)
      KL0GM005.CLHSEQNB = CLAREC.CLACSQNB;
    else
      KL0GM005.CLHSEQNB = CLWREC.CLHSEQNB; /* this takes priority over*/
       /* the claim header current value, it is the*/
       /* current memo being processed*/
    end
  end
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD)
    KL0GM005.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    KL0GM005.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  ;
  KL0G202(); /* get memo record*/
  ;
  KL0G203(); /* get company record*/
  ;
  KL0G204(); /* get system messages*/
  ;
  KL0G205(); /* get memo messages*/
  ;
  CL0GW01.CL0GWIOF = "N"; /* set inquiry-only flag to 'no'*/
  ;
  if (CLHREC.CLHMEMNB > 0) /* if memo number assigned, then it's*/
                                   /* been printed;*/
    if (CLWREC.CLWACTIV == "A" /* we cant add or change a printed memo so we*/
     || CLWREC.CLWACTIV == "C") /* force the screen to inquiry-only*/
      converseLib.validationFailed(127); /* because memo already printed*/
      CL0GW01.CL0GWIOF = "Y";
                                   /* set inquiry-only flag to 'yes'*/
    else
      CL0GW01.CL0GWIOF = "Y";
                                   /* set inquiry-only flag to 'yes'*/
    end
  end
end // end KL0G201

// get memo record
Function KL0G202()
   /* ************************************************************/
   /* *        get the memo record                              **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0G202"; /* set current process name*/
  ;
   /* load values into record key for lookup*/
  ;
  set CLHREC empty; /* values are used later for db lookups*/
  CLHREC.CLACLMNB = CLAREC.CLACLMNB;
  CLHREC.CLHSEQNB = KL0GM005.CLHSEQNB;
  ;
  KL0G934(); /* get memo comments*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set KL0GM005.CLHSEQNB initialAttributes;
    KL0GM005.CLHMEMNB = CLHREC.CLHMEMNB;
  end
end // end KL0G202

// get company record
Function KL0G203()
   /* ************************************************************/
   /* *        get the company record                           **/
   /* *  for account class code, xaucd. to be used for          **/
   /* *  selecting system messages to print.                    **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0G203"; /* set current process name*/
  ;
  ;
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  ;
  KL0G944(); /* get company record*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
end // end KL0G203

// get system messages
Function KL0G204()
   /* ************************************************************/
   /* *        get applicable system messages                   **/
   /* *  select all messages within valid date range            **/
   /* *                                                         **/
   /* *   this is confusing, but given enough time it will make **/
   /* * sense.  there is a table used for messages. there is    **/
   /* * only one message of 3 lines printed. so there is a      **/
   /* * heirarchy in determining which message to print.        **/
   /* *   first eliminate all messages with effective dates     **/
   /* * outside the current date (this is done in the select).  **/
   /* * next, use the first message that qualifies:             **/
   /* *  -- cl-msg-print-fl = 'i' and xau-acct-cls-cd for the   **/
   /* *     customer matches one of the three on this table     **/
   /* *  -- cl-msg-print-fl = 'e' and xau-acct-cls-cd for the   **/
   /* *     customer does not match one of the three on this    **/
   /* *     table                                               **/
   /* *  -- cl-msg-print-fl = ' '                               **/
   /* ************************************************************/
   /* *******************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y     L O G          ***/
   /* *---------------------------------------------------------------***/
   /* *   DATE     PGMR    DESCRIPTION                                ***/
   /* *---------------------------------------------------------------***/
   /* * 09-16-93  GDECKE   MOVE '*' TO CLTREC.CLTMRPFL.               ***/
   /* *******************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0G204"; /* set current process name*/
  ;
  ;
  set CLTREC empty;
  CL0GW01.CL0GWMFF = "N"; /* set message-found-flag to 'no'*/
  CLTREC.CLTMMEDT = CLHREC.CLHMEMDT;
  CLTREC.CLTMMXDT = CLHREC.CLHMEMDT;
  CLTREC.CLTMPRFL = "*";
  ;
  KL0G951(); /* get set of system messages*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    while (CL0GW01.CL0GWMFF == "N"
     && SQLCA.VAGen_SQLCODE == 0)
      ;
      KL0G952(); /* get system message*/
      if (CLXREC.CLXERRF == "Y")
        KL0G953(); /* close cursor for cltrec*/
        return;
      end
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        if (CLTREC.CLTMPRFL == "I")
          if (KUCREC.XAUCD == CLTREC.XAUCD[1]
           || KUCREC.XAUCD == CLTREC.XAUCD[2]
           || KUCREC.XAUCD == CLTREC.XAUCD[3])
            CL0GW01.CL0GWMFF = "Y";
          end
        else
          if (CLTREC.CLTMPRFL == "E")
            if (KUCREC.XAUCD != CLTREC.XAUCD[1]
             && KUCREC.XAUCD != CLTREC.XAUCD[2]
             && KUCREC.XAUCD != CLTREC.XAUCD[3])
              CL0GW01.CL0GWMFF = "Y";
            end
          else
            if (CLTREC.CLTMPRFL == " ")
              CL0GW01.CL0GWMFF = "Y";
            end
          end
        end
      end
    end
  end
  ;
  KL0G953(); /* close cursor for cltrec*/
  ;
  if (CL0GW01.CL0GWMFF == "Y") /* if message found flag eq yes*/
    KL0GM005.CLTMMSG[1] = CLTREC.CLTMMSG[1];
    KL0GM005.CLTMMSG[2] = CLTREC.CLTMMSG[2];
    KL0GM005.CLTMMSG[3] = CLTREC.CLTMMSG[3];
  end
end // end KL0G204

// get memo messages
Function KL0G205()
   /* ************************************************************/
   /* *                                                         **/
   /* *        get memo comments and move them to the screen    **/
   /* * 03/17/92 fixed key with inspection-nbr ahowar           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0G205"; /* set current process name*/
  ;
  ;
  ;
  CLGREC.CLACLMNB = CLHREC.CLACLMNB; /* load key*/
  CLGREC.CLHSEQNB = CLHREC.CLHSEQNB;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "M";
  ;
  KL0G911(); /* get set of applicable comments*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  KL0G912(); /* get first comment record*/
  if (CLXREC.CLXERRF == "Y")
    KL0G913(); /* close cursor for clgrec*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(126); /* no comments for this claim*/
      CLXREC.CLXLSTAX = 0; /* init array counter*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(04); /* database deadlock*/
        CLXREC.CLXLSTAX = 0; /* init array counter*/
        return;
      end
    end
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXLINEX <= 10)
    KL0GM005.CL0GMUID[CLXLINEX] = CLGREC.XXXUSRID;
    KL0GM005.CLGCOMNT[CLXLINEX] = CLGREC.CLGCOMNT;
    CL0GW01.CLGCMSEQ[CLXLINEX] = CLGREC.CLGCMSEQ;
    CL0GW01.CL0GWZZC[CLXLINEX] = CLGREC.ZZZCHGCT;
    ;
    KL0G912(); /* get next comment record*/
    if (CLXREC.CLXERRF == "Y")
      KL0G913();
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          CLXREC.CLXLSTAX = CLXREC.CLXLINEX; /* set last-filled pointer*/
        end
      end
    end
  end
  ;
  ;
end // end KL0G205

// handle screen m005 spec entrys
Function KL0G210()
   /* ************************************************************/
   /* *     handle special entries from screen cl0gm005         **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G210"; /* set current process name*/
  ;
  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end
   /* PF19 REMOVED 02-27-98 PER SANDY KELLY*/
   /* OR EZEAID IS PF19;*/
  ;
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    KL0GS03();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1)
    KL0GS01(); /* handle pfkey 1*/
    return;
  end
  ;
          /* fast path out*/
  ;
  if (converseVar.eventKey is enter)
    if (KL0GM005.CATOAP == " "
     && KL0GM005.CAITEM == " ")
      return;
    else
      if (KL0GM005.CATOAP != " ")
        COMMAREA.CATOAP = KL0GM005.CATOAP;
        COMMAREA.CAITEM = KL0GM005.CAITEM;
        CLXREC.CLXEDITF = "N"; /* don't edit data*/
        XPCL002(); /* try to get there*/
        return;
      else
        if (KL0GM005.CATOAP == " "
         && KL0GM005.CAITEM != " ")
          converseLib.validationFailed(1); /* enter option field*/
          CLXREC.CLXEDITF = "N"; /* don't edit data*/
          CLXREC.CLXERRF = "Y"; /* screen contained errors*/
          return;
        end
      end
    end
  end
  ;
   /* if entered key doesn't match one of the previous conditions*/
  ;
  converseLib.validationFailed(2); /* invalid pf-key*/
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  CLXREC.CLXEOSF = "N"; /* we want the same screen*/
  CLXREC.CLXEOAF = "N"; /* and the same application*/
  ;
end // end KL0G210

// process screen m005 entries
Function KL0G220()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen cl0gm005                   **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G220"; /* set current process name*/
  ;
  ;
  ;
  if (CLHREC.CLHSEQNB > CLAREC.CLACSQNB)
                                   /* if # originaly on map gt curr #*/
    converseLib.validationFailed(14); /* invalid sequence number*/
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      KL0GS60(); /* set modified fields modified*/
    end
    ;
                                    /* incase user changed value*/
    set KL0GM005.CLHSEQNB cursor, modified, bold;
    return;
  else
    set KL0GM005.CLHSEQNB initialAttributes;
  end
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 10)
    if (KL0GM005.CLGCOMNT[CLXLINEX] is modified)
      KL0GS50();
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 10)
    if (KL0GM005.CLGCOMNT[CLXLINEX] != " ")
      CL0GW01.CL0GWCMT = "Y";
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
end // end KL0G220

// update header with comments
Function KL0G230()
   /* ************************************************************/
   /* *     this process updates claim header to show if        **/
   /* *      there are memo comments.                           **/
   /* * database has already been updated with any changes to   **/
   /* * comments record. so this database is read to see if any **/
   /* * records exist. if there were no records and now there   **/
   /* * are records or there were records and now there are     **/
   /* * none, the claim header comment indicator is changed     **/
   /* *                                                         **/
   /* *   Maintenance History                                   **/
   /* *                                                         **/
   /* *  10-12-89 chellm  added loop to attempt clarec update   **/
   /* *                   a second time if -911 occurs.(CL756)  **/
   /* *  04-17-92 BCOURT  Rename CLACMIND to CL-CLCOM-FL.       **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G230"; /* set current process name*/
  ;
  ;
  ;
  CLGREC.CLACLMNB = CLHREC.CLACLMNB; /* load key*/
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";
  ;
  KL0G911(); /* select set from clgrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  KL0G912(); /* fetch next comment record*/
  if (CLXREC.CLXERRF == "Y")
    KL0G913(); /* close cursor for clgrec*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0GW01.CL0GWCMT = "Y"; /* comments exist*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0GW01.CL0GWCMT = "N";
      end
    end
  end
  ;
  KL0G913(); /* close cursor for clgrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
   /* key is already loaded*/
  ;
  KL0G924(); /* get claims header record*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0GW01.CL-CLCOM-FL = CLAREC.CLACMIND;
      ;
      if (CL0GW01.CL0GWCMT == "Y") /* there are comments*/
        if (CLAREC.CLACMIND == "N") /* no comments*/
          CLAREC.CLACMIND = "Y"; /* now there are comments*/
        end
        ;
      else /* there are no comments*/
        if (CLAREC.CLACMIND == "Y") /* only memo comments*/
          CLAREC.CLACMIND = "N"; /* now there no comments*/
        end
      end
    end
  end
  ;
  if (CLAREC.CLACMIND == CL0GW01.CL-CLCOM-FL) /* no need to update header*/
    return;
  end
  ;
  CL0GW01.CL0GWDCT = 0; /* CWH 10-12-89*/
  CL0GW01.CL0GWDFL = "Y";
  ;
  while (CL0GW01.CL0GWDFL == "Y")
    KL0G927(); /* replace claim header;*/
  end
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
end // end KL0G230

// handle pf keys
Function KL0G240()
   /* ************************************************************/
   /* *     handle exiting pf keys                              **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0G240"; /* set current process name*/
  ;
  if (converseVar.eventKey is enter)
    if (CL0GW01.CL0GWLPF == "Y"
     && KL0GM005.CLHSEQNB not modified)
      KL0GM005.CLHSEQNB = KL0GM005.CLHSEQNB + 1;
      CLXREC.CLXBLDSC = "Y";
      CLXREC.CLXTESTF = "Y"; /* desired seq nbr is in map field*/
      KL0GS63(); /* edit sequence number*/
      return;
    else
      if (KL0GM005.CLHSEQNB is modified)
        if (KL0GM005.CLHSEQNB == 1)
          CL0GW01.CL0GWLPF = "Y";
          CLXREC.CLXBLDSC = "Y";
          CLXREC.CLXTESTF = "Y";
                                   /* desired seq nbr is in map field*/
          KL0GS63(); /* edit sequence number*/
          return;
        else
          CL0GW01.CL0GWLPF = "N";
          CLXREC.CLXBLDSC = "Y";
          CLXREC.CLXTESTF = "Y";
                                   /* desired seq nbr is in map field*/
          KL0GS63(); /* edit sequence number*/
          return;
        end
      else
        if (KL0GM005.CLHSEQNB == 1)
          CL0GW01.CL0GWLPF = "Y";
          CLXREC.CLXBLDSC = "Y";
          CLXREC.CLXTESTF = "Y";
                                   /* desired seq nbr is in map field*/
          KL0GM005.CLHSEQNB = KL0GM005.CLHSEQNB + 1;
          KL0GS63(); /* edit  sequence number*/
          return;
        else
          KL0G141(); /* set next program*/
        end
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf2)
    KL0GS02(); /* handle pfkey 2*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf5)
    KL0GS05(); /* handle pfkey 5*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* 1-4-88 to g/l*/
    KL0GS14(); /* handle pfkey 14*/
    KL0GM005.VAGen_EZEMSG = "UNDEFINED CLAIM TYPE - CONTACT MIS";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf16)
    KL0GS16(); /* handle pfkey 16*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf17)
    KL0GS17(); /* handle pfkey 17*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf18)
    KL0GS18(); /* handle pfkey 18*/
    return;
  end
  ;
   /* REMOVE PF19 02-27-98 PER SANDY KELLY*/
   /* IF EZEAID IS PF19;*/
    /* KL0GS19;                        /* handle pfkey 19*/
    /* EZERTN;*/
   /* END;*/
  ;
  ;
end // end KL0G240

// check security for map display
Function KL0G250()
   /* **********************************************************/
   /* protects the map from unauthorized add/change/delete*/
   /* functions.*/
   /* **********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G250"; /* set current process name*/
  ;
  if (CLWREC.CLWACTIV == "I"
   || CL0GW01.CL0GWIOF == "Y") /* inquiry only flag if memo printed*/
    CLXREC.CLXLINEX = 1;
    set KL0GM005.CLHSEQNB skip;
    while (CLXREC.CLXLINEX <= 10)
      KL0G251(); /* set map fields protected*/
    end
    set KL0GM005.CATOAP cursor;
    return;
  end
  ;
  if (COMMAREA.CAALVL[1] == "Y" /* sales add*/
   || COMMAREA.CACLVL[1] == "Y" /* sales change*/
   || COMMAREA.CAALVL[3] == "Y" /* credit add*/
   || COMMAREA.CACLVL[3] == "Y") /* credit change*/
    return; /* LEAVE FIELDS UNPROTECTED*/
  else
    CLXREC.CLXLINEX = 1;
    set KL0GM005.CLHSEQNB skip;
    while (CLXREC.CLXLINEX <= 10)
      KL0G251(); /* set map fields protected*/
    end
    set KL0GM005.CATOAP cursor; /* move cursor to fastpath item*/
    return;
  end
end // end KL0G250

// set fields protected
Function KL0G251()
   /* **********************************************************/
   /* set map fields protected*/
  ;
   /* **********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0G251"; /* set current process name*/
  ;
  set KL0GM005.CLGCOMNT[CLXLINEX] skip;
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  ;
end // end KL0G251

// select set from clgrec
Function KL0G911()
   /* **************************************/
   /* select set from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G911"; /* location*/
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1260";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G911

// fetch next from clgrec
Function KL0G912()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G912"; /* location*/
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1260";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G912

// close cursor for clgrec
Function KL0G913()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G913"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260";
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G913

// fetch unique from clgrec
Function KL0G914()
   /* **************************************/
   /* select unique on clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G914"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0G914

// delete from clgrec
Function KL0G915()
   /* *********************************************************************/
   /* delete unique on clgrec                                           **/
   /* 12-02-92  lgross write tag record to dclaim.vdmact01 when deleting **/
   /* record                                            **/
   /* 01-26-93  bcourt change proc to sgrp name get-cmpny-               **/
   /* 01-29-93  jcarey added code to write an activity record to         **/
   /* consumer services if comments are being deleted.  **/
   /* 02-08-93  bcourt change to i.d. consumers by account.              **/
   /* 02-19-93  bcourt add ezetst index to kl14 tbl.                     **/
   /* 02-22-93  BCOURT Drop activity log for CSW since IBM send program  **/
   /* now always gets comments.                            **/
   /* *********************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0G915"; /* set current process name*/
  set SQLCA empty;
  call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q915"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
   /* ELSE;*/
                                  /* IF CLAREC.KUCCOID IN*/
                                   /* KL14TBL.CU-CO-ID;/* if consumer*/
                                   /* services account*/
     /* AND KL14TBL.XXX-STAT(EZETST) = 'A';/* is active,*/
     /* KL0GS-WRIT-DM-REC;           /* log activity.*/
   /* END;*/
  end
end // end KL0G915
// add to clgrec
Function KL0G916()
   /* ******************************************************************/
   /* add unique on clgrec*/
   /* 12-02-92  lgross write a tag record to dclaim.vdmact01 whenenver*/
   /* a record is written to dclaim.vclom01*/
   /* 01-29-93  jcarey added code to write an activity record to*/
   /* consumer services if comments are being added.*/
   /* 02-08-93  bcourt change to i.d. consumers by account.*/
   /* 02-19-93  bcourt add ezetst usage to kl14 tbl.*/
   /* 02-22-93  BCOURT drop activity log, see KL0G915 comments.*/
   /* ******************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0G916"; /* set current process name*/
  set SQLCA empty;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q916"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
   /* ELSE;*/
   /* IF CLAREC.KUCCOID IN KL14TBL.CU-CO-ID;/* if active consumer services*/
     /* AND KL14TBL.XXX-STAT(EZETST) = 'A';/* account*/
     /* KL0GS-WRIT-DM-REC;           /* log activity.*/
   /* END;*/
  end
end // end KL0G916

// update unique from clgrec
Function KL0G917()
   /* *****************************************************************/
   /* update unique on clgrec*/
   /* 12-02-92 lgross  write tag record to dclaim.vdmact01 whenever*/
   /* dclaim.vclcom01 is updated*/
   /* 01-29-93 jcarey  added code to write an activity record to*/
   /* consumer services if comments are being added.*/
   /* 02-08-93 bcourt  use accounts to i.d. consumers.*/
   /* 02-19-93 bcourt  add ezetst index to kl14 tbl usage.*/
   /* 02-22-93 BCOURT  Drop activity log, see KL0G915 comments.*/
   /* *****************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0G917"; /* set current process name*/
  set SQLCA empty;
  call "IO1260" ("U ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G917"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
   /* ELSE;*/
   /* IF CLAREC.KUCCOID IN KL14TBL.CU-CO-ID;/* if consumer account*/
     /* AND KL14TBL.XXX-STAT(EZETST) = 'A';/* is active*/
     /* KL0GS-WRIT-DM-REC;           /* log activity.*/
   /* END;*/
  end
end // end KL0G917

// select unique from clarec
Function KL0G924()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G924"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0G924

// update unique from clarec
Function KL0G927()
   /* **************************************/
   /* update unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      CL0GW01.CL0GWDCT = CL0GW01.CL0GWDCT + 1; /* 101289 CWH*/
      if (CL0GW01.CL0GWDCT > 2)
        converseLib.validationFailed(4); /* database is busy*/
        CLXREC.CLXERRF = "Y";
        CL0GW01.CL0GWDFL = "N";
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0GW01.CL0GWDCT = 0; /* 101289 CWH*/
        CL0GW01.CL0GWDFL = "N";
         /* next sentence*/
      else
        ;
        CL0GW01.CL0GWDCT = 0; /* 101289 CWH*/
        CL0GW01.CL0GWDFL = "N";
        TA1REC.TA1LOCAT[2] = "CL0G927"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  else
    CL0GW01.CL0GWDCT = 0; /* 101289 CWH*/
    CL0GW01.CL0GWDFL = "N";
  end
end // end KL0G927

// select unique from clarec
Function KL0G934()
   /* **************************************/
   /* select unique on clhrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1290" ("SA", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G934"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1290"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLMEM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0G934

// select unique from kucrec
Function KL0G944()
   /* **************************************/
   /* select unique on kucrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G944"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0G944

// select set from cltrec
Function KL0G951()
   /* **************************************/
   /* select set from cltrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1400" ("SS", SQLCA, CLTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G951"; /* location*/
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM ";
        TA1REC.TA1TBLVU = "VCLMSG01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1400";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G951

// fetch next from cltrec
Function KL0G952()
   /* **************************************/
   /* fetch next from cltrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1400" ("SN", SQLCA, CLTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G952"; /* location*/
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM ";
        TA1REC.TA1TBLVU = "VCLMST01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1400";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G952

// close cursor for cltrec
Function KL0G953()
   /* **************************************/
   /* fetch next from cltrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1400" ("CS", SQLCA, CLTREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0G953"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1400";
        TA1REC.TA1MAP = "CL0GM001";
        TA1REC.TA1DBASE = "DCLAIM ";
        TA1REC.TA1TBLVU = "VCLMSG01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0G953

// handle entry of pf 8
Function KL0GS-ATTRIB-DARK()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93  TASK CL1210                **/
   /* *      set attribute to dark and protect for those        **/
   /* *      greater than 99.                                   **/
   /* ************************************************************/
  ;
  ;
  while (CLXLINEX <= 14)
    KL0GM001.CLGCOMNT[CLXLINEX] = " ";
    KL0GM001.CL0GWUID[CLXLINEX] = " ";
    KL0GM001.CL0GWCDT[CLXLINEX] = " ";
    set KL0GM001.CLGCOMNT[CLXLINEX] invisible, protect;
    set KL0GM001.CL0GWUID[CLXLINEX] invisible, protect;
    set KL0GM001.CL0GWCDT[CLXLINEX] invisible, protect;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
end // end KL0GS-ATTRIB-DARK

// handle entry of pf 8
Function KL0GS-ATTRIB-RESET()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93. TASK CL1210. JHECKE        **/
   /* *      reset all attributes                               **/
   /* ************************************************************/
  ;
  set KL0GM001.KL0GW-FROM initialAttributes;
  CLXREC.CLXLINEX = 1;
  while (CLXLINEX <= 14)
    set KL0GM001.CLGCOMNT[CLXLINEX] initialAttributes;
    set KL0GM001.CL0GWUID[CLXLINEX] initialAttributes;
    set KL0GM001.CL0GWCDT[CLXLINEX] initialAttributes;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
end // end KL0GS-ATTRIB-RESET

// handle entry of pf 8
Function KL0GS-PAGE-BACKWRD()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93. TASK CL1210                **/
   /* *      handle the entry of pfkey 7                        **/
   /* * 02-17-93 BCOURT protect comments from consumer svcs unix**/
   /* ************************************************************/
  ;
  ;
  KL0GS-UPDATE-WS(); /* move screen data to working storage*/
  ;
  CLXREC.CLXLINEX = 1;
  CL0GW01.CL0GWTLN = CL0GW01.CL0GWFLN - 1; /* set new from line number*/
  if (KL0GM001.KL0GW-TO == 14)
    converseLib.validationFailed(7); /* top of data*/
    CL0GW01.CL0GWTLN = CL0GW01.CL0GWTLN + 1; /* set new from line number*/
    return;
  end
  CL0GW01.CL0GWFLN = CL0GW01.CL0GWTLN - 13; /* set new to line number*/
  if (CL0GW01.CL0GWFLN <= 0)
    CL0GW01.CL0GWFLN = 1;
    CL0GW01.CL0GWTLN = 14;
  end
  KL0GM001.KL0GW-FROM = CL0GW01.CL0GWFLN;
  KL0GM001.KL0GW-TO = CL0GW01.CL0GWTLN;
  ;
  CL0GW01.CL0GWLNI = CL0GW01.CL0GWFLN; /* set ws position index*/
  ;
  while (CLXREC.CLXLINEX <= 14)
    KL0GM001.CL0GWCDT[CLXLINEX] = CL0GW01.CL0GW-ADD-DATE[CL0GWLNI];
    KL0GM001.CL0GWUID[CLXLINEX] = CL0GW01.CL0GW-USER-ID[CL0GWLNI];
    KL0GM001.CLGCOMNT[CLXLINEX] = CL0GW01.CL0GW-COMMENT[CL0GWLNI];
    if (CL0GW01.CL0GW-COMNT-TYP-CD[CL0GWLNI] == "B") /* comments from csw/unix*/
      set KL0GM001.CLGCOMNT[CLXLINEX] skip;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
  end
  ;
  KL0GS-PLACE-CURSOR(); /* position the cursor at 1st blank line*/
  CLXREC.CLXERRF = "Y"; /* set this flag so program will*/
                                   /* converse*/
  ;
end // end KL0GS-PAGE-BACKWRD

// handle entry of pf 8
Function KL0GS-PAGE-FORWRD()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93. TASK CL1210                **/
   /* *      handle the entry of pfkey 8                        **/
   /* * 02-17-93 BCOURT protect comments from consumer services **/
   /* *             unix - update not allowed.                  **/
   /* ************************************************************/
  ;
  ;
  KL0GS-UPDATE-WS(); /* update working storage*/
  ;
  CLXREC.CLXLINEX = 1;
  if (CL0GWTLN < 99) /* dont bump past 99*/
    CL0GW01.CL0GWFLN = CL0GW01.CL0GWTLN + 1; /* set new from line number*/
  end
  ;
  if (KL0GM001.KL0GW-TO == 99)
    converseLib.validationFailed(3);
    CLXREC.CLXERRF = "Y"; /* set this flag so program will*/
    CLXREC.CLXLINEX = CL0GW01.CL0GWTLN - CL0GW01.CL0GWFLN + 2;
    if (CLXREC.CLXLINEX == 0)
      CLXREC.CLXLINEX = 2;
    end
    if (CLXREC.CLXLINEX == 13)
      CLXREC.CLXLINEX = 15;
    end
    KL0GS-ATTRIB-DARK(); /* darken lines past 99*/
    return;
  end
  ;
  if (CL0GW01.CL0GWFLN > 86)
    CL0GW01.CL0GWTLN = 99;
  else
    CL0GW01.CL0GWTLN = CL0GW01.CL0GWFLN + 13; /* set new to line number*/
  end
  KL0GM001.KL0GW-FROM = CL0GW01.CL0GWFLN; /* move to screen*/
  KL0GM001.KL0GW-TO = CL0GW01.CL0GWTLN; /* move to screen*/
  ;
  CL0GW01.CL0GWLNI = CL0GW01.CL0GWFLN; /* set ws position index*/
  ;
  while (CLXREC.CLXLINEX <= 14)
    KL0GM001.CL0GWCDT[CLXLINEX] = CL0GW01.CL0GW-ADD-DATE[CL0GWLNI];
    KL0GM001.CL0GWUID[CLXLINEX] = CL0GW01.CL0GW-USER-ID[CL0GWLNI];
    KL0GM001.CLGCOMNT[CLXLINEX] = CL0GW01.CL0GW-COMMENT[CL0GWLNI];
    if (CL0GW01.CL0GW-COMNT-TYP-CD[CL0GWLNI] == "B") /* protect data from csw*/
      set KL0GM001.CLGCOMNT[CLXLINEX] skip;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
    if (CL0GW01.CL0GWLNI == 100)
      KL0GS-ATTRIB-DARK(); /* set rest of lines dark and protect*/
      CLXREC.CLXERRF = "Y"; /* set this flag so pgm will converse*/
      CLXREC.CLXLINEX = 15; /* get out of the loop*/
    end
  end
  ;
  KL0GS-PLACE-CURSOR(); /* position the cursor at 1st blank line*/
  CLXREC.CLXERRF = "Y"; /* set flag so pgm will converse*/
  ;
end // end KL0GS-PAGE-FORWRD

// handle entry of pf 8
Function KL0GS-PAGE-MAX()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93. TASK CL1210                **/
   /* *      page to the end of comment lines                   **/
   /* * 02-17-93 BCOURT prevent change of csw/unix consumer     **/
   /* *              services comments.                         **/
   /* ************************************************************/
  ;
  ;
  KL0GS-UPDATE-WS(); /* update working storage*/
  ;
  CLXREC.CLXLINEX = 1;
  CL0GW01.CL0GWFLN = KL0GM001.KL0GW-OF;
  KL0GM001.KL0GW-FROM = KL0GM001.KL0GW-OF;
  ;
  if (CL0GW01.CL0GWFLN > 86)
    CL0GW01.CL0GWTLN = 99;
  else
    CL0GW01.CL0GWTLN = CL0GW01.CL0GWFLN + 13; /* set new to line number*/
  end
  ;
  KL0GM001.KL0GW-FROM = CL0GW01.CL0GWFLN; /* move to screen*/
  KL0GM001.KL0GW-TO = CL0GW01.CL0GWTLN; /* move to screen*/
  ;
  CL0GW01.CL0GWLNI = CL0GW01.CL0GWFLN; /* set ws position index*/
  ;
  while (CLXREC.CLXLINEX <= 14)
    KL0GM001.CL0GWCDT[CLXLINEX] = CL0GW01.CL0GW-ADD-DATE[CL0GWLNI];
    KL0GM001.CL0GWUID[CLXLINEX] = CL0GW01.CL0GW-USER-ID[CL0GWLNI];
    KL0GM001.CLGCOMNT[CLXLINEX] = CL0GW01.CL0GW-COMMENT[CL0GWLNI];
    if (CL0GW01.CL0GW-COMNT-TYP-CD[CL0GWLNI] == "B") /* protect csw/unix*/
      set KL0GM001.CLGCOMNT[CLXLINEX] skip;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
    if (CL0GW01.CL0GWLNI == 100)
      KL0GS-ATTRIB-DARK(); /* set rest of lines dark and protect*/
      CLXREC.CLXERRF = "Y"; /* set this flag so pgm will converse*/
      CLXREC.CLXLINEX = 15; /* get out of the loop*/
    end
  end
  ;
  KL0GS-PLACE-CURSOR(); /* position the cursor at 1st blank line*/
  CLXREC.CLXERRF = "Y"; /* set flag so pgm will converse*/
  ;
end // end KL0GS-PAGE-MAX

// handle entry of pf 8
Function KL0GS-PAGE-SELECT()
   /* ************************************************************/
   /* * NEW STATEMENT GROUP 1/07/93. TASK CL1210                **/
   /* *      handle user specified paging                       **/
   /* * 02-17-93 BCOURT prevent update on comments from consumer**/
   /* *              services csw/unix.                         **/
   /* ************************************************************/
  ;
  ;
  KL0GS-UPDATE-WS(); /* update working storage*/
  ;
  CLXREC.CLXLINEX = 1;
  CL0GW01.CL0GWFLN = KL0GM001.KL0GW-FROM; /* set starting point*/
  ;
  if (CL0GW01.CL0GWFLN > 86)
    CL0GW01.CL0GWTLN = 99;
  else
    CL0GW01.CL0GWTLN = CL0GW01.CL0GWFLN + 13; /* set new to line number*/
  end
  ;
  KL0GM001.KL0GW-FROM = CL0GW01.CL0GWFLN;
  KL0GM001.KL0GW-TO = CL0GW01.CL0GWTLN;
  ;
  CL0GW01.CL0GWLNI = CL0GW01.CL0GWFLN; /* set ws position index*/
  ;
  while (CLXREC.CLXLINEX <= 14)
    KL0GM001.CL0GWCDT[CLXLINEX] = CL0GW01.CL0GW-ADD-DATE[CL0GWLNI];
    KL0GM001.CL0GWUID[CLXLINEX] = CL0GW01.CL0GW-USER-ID[CL0GWLNI];
    KL0GM001.CLGCOMNT[CLXLINEX] = CL0GW01.CL0GW-COMMENT[CL0GWLNI];
    if (CL0GW01.CL0GW-COMNT-TYP-CD[CL0GWLNI] == "B") /* from csw/unix*/
      set KL0GM001.CLGCOMNT[CLXLINEX] skip;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
    if (CL0GW01.CL0GWLNI > 99)
      KL0GS-ATTRIB-DARK(); /* set rest of page dark and protect*/
      KL0GM001.KL0GW-TO = 99;
      CL0GW01.CL0GWTLN = 99;
      CLXREC.CLXERRF = "Y"; /* set this flag so program will*/
      CLXREC.CLXLINEX = 15; /* get out of loop*/
    end
  end
  ;
  KL0GS-PLACE-CURSOR(); /* position cursor at first blank line*/
  CLXREC.CLXERRF = "Y"; /* set this flag so program will*/
                                   /* converse*/
  ;
end // end KL0GS-PAGE-SELECT

// position the cursor
Function KL0GS-PLACE-CURSOR()
   /* ************************************************************/
   /* *      NEW STATEMENT GROUP 01/07/93. TASK CL1210          **/
   /* *      position cursor on screen                          **/
   /* ************************************************************/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 14)
    if (KL0GM001.CLGCOMNT[CLXLINEX] == " ")
      set KL0GM001.CLGCOMNT[CLXLINEX] cursor;
      return;
    else
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end
  set KL0GM001.CLGCOMNT[1] cursor; /* all lines full,set to 1st line*/
end // end KL0GS-PLACE-CURSOR

// update working storage
Function KL0GS-UPDATE-WS()
   /* ************************************************************/
   /* *      NEW STATEMENT GROUP 1/07/93. TASK CL1210           **/
   /* *      update working storage with current screen         **/
   /* *      elements before paging.  if a particular comment   **/
   /* *      has changed, set cl0gw01.comment-mod = 'y'.        **/
   /* ************************************************************/
  ;
  CLXREC.CLXLINEX = 1;
  CL0GW01.CL0GWLNI = CL0GW01.CL0GWFLN; /* set ws position index*/
  ;
  while (CLXREC.CLXLINEX <= 14)
    if (KL0GM001.CLGCOMNT[CLXLINEX] != CL0GW01.CL0GW-COMMENT[CL0GWLNI])
      CL0GW01.CL0GW-COMMENT-MOD[CL0GWLNI] = "Y";
    end
    CL0GW01.CL0GW-ADD-DATE[CL0GWLNI] = KL0GM001.CL0GWCDT[CLXLINEX];
    CL0GW01.CL0GW-USER-ID[CL0GWLNI] = KL0GM001.CL0GWUID[CLXLINEX];
    CL0GW01.CL0GW-COMMENT[CL0GWLNI] = KL0GM001.CLGCOMNT[CLXLINEX];
    if (CL0GW01.CL0GWLNI == 99) /* is this the last one*/
      return; /* stop and return*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
  end
  ;
  CL0GW01.CL0GWLNI = 1;
  while (CL0GW01.CL0GWLNI <= 99)
    if (CL0GW01.CL0GW-COMMENT-MOD[CL0GWLNI] == "Y")
      CLXREC.CLXEDITF = "Y";
    end
    CL0GW01.CL0GWLNI = CL0GW01.CL0GWLNI + 1;
  end
  ;
end // end KL0GS-UPDATE-WS

// handle entry of pf 1
Function KL0GS01()
   /* ************************************************************/
   /* *      handle the entry of pfkey 1                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  XSPF1(); /* transfer to help application*/
  ;
  ;
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  CLXREC.CLXEOSF = "N"; /* we are done with this screen*/
  CLXREC.CLXEOAF = "N"; /* we are done with this application*/
  CLXREC.CLXMSG = COMMAREA.CAMSG; /* show why transfer failed*/
  ;
  ;
  ;
  ;
end // end KL0GS01

// handle entry of pf key 2
Function KL0GS02()
   /* ************************************************************/
   /* *      handle the entry of pfkey 2                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  COMMAREA.CATOAP = "KL0M";
  ;
  XPCL002();
  ;
  ;
end // end KL0GS02

// handle entry of pfkey 3
Function KL0GS03()
   /* ************************************************************/
   /* *      handle the entry of pfkey 3                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  CLXREC.CLXEOSF = "Y"; /* we are done with this screen*/
  ;
  ;
  CLXREC.CLXEOAF = "Y"; /* we are done with this application*/
  COMMAREA.CATOAP = "KL0A";
  XPCL002();
  ;
  ;
  ;
end // end KL0GS03

// handle entry of pf key 5
Function KL0GS05()
   /* ************************************************************/
   /* *      handle the entry of pfkey 5                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  COMMAREA.CATOAP = "KL0E";
  ;
  XPCL002();
  ;
  ;
end // end KL0GS05

// format xgpabrv to cl0g001 map
Function KL0GS08()
  ;
  ;
    /* ---------- start stmt grp cl0gs08 -----------------*/
  ;
    /* statement group cl0gs08 - look up general product class*/
       /* description on xgptbl and format to cl0gm001 map*/
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD) /* if in table*/
    KL0GM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* move abreviation to map*/
  end
  ;
    /* -----------   end of stmt grp cl0gs08  ------------*/
  ;
end // end KL0GS08

// find claim type abbreviation
Function KL0GS09()
  ;
  ;
    /* ---------- start stmt grp cl0gs09 -----------------*/
  ;
   /* statement group cl0gs09 - look up claim type abbreviation*/
       /* on ycttbl and format to cl0gm001 map*/
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD) /* if in table*/
    if (YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0GM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex]; /* abreviation to map*/
    end
  end
  ;
    /* -----------   end of stmt grp cl0gs09  ------------*/
  ;
end // end KL0GS09

// find reason code description
Function KL0GS10()
  ;
  ;
    /* ---------- start stmt grp cl0gs10 -----------------*/
  ;
   /* statement group cl0gs10 - look up reason code description*/
       /* on ycrtbl and format to cl0gm001 map*/
  ;
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD) /* if in table*/
    if (YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0GM001.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex]; /* abreviation to map*/
      CLXREC.CLXYCRX = sysVar.arrayIndex; /* set reason index*/
    end
  end
  ;
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0gs10  ------------*/
  ;
end // end KL0GS10

// handle entry of pf key 14
Function KL0GS14()
   /* ************************************************************/
   /* *               handle the entry of pfkey 14              **/
   /* *  added 1-4-88                                           **/
   /* ************************************************************/
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD) /* find claim type in table*/
    if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y") /* if co-op claim type*/
      COMMAREA.CATOAP = "KL0K"; /* go to nike bank claim g/l*/
    else
      COMMAREA.CATOAP = "KL0J"; /* else go to claim g/l*/
    end
    XPCL002();
  end
  ;
  ;
end // end KL0GS14

// handle entry of pfkey 16
Function KL0GS16()
   /* ************************************************************/
   /* *      handle the entry of pfkey 16                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  ;
  COMMAREA.CATOAP = "KL0N";
  ;
  XPCL002();
  ;
  ;
end // end KL0GS16

// handle entry of pfkey 17
Function KL0GS17()
   /* ************************************************************/
   /* *      handle the entry of pfkey 17                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  COMMAREA.CATOAP = "KL0F";
  ;
  XPCL002();
  ;
  ;
end // end KL0GS17

// handle entry of pf key 18
Function KL0GS18()
   /* ************************************************************/
   /* *      handle the entry of pfkey 18                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  ;
  CLWREC.CLWMCMNT = "N";
  ;
  COMMAREA.CATOAP = "KL0G";
  ;
  XPCL002();
  ;
  ;
end // end KL0GS18

// handle entry of pf key 20
Function KL0GS20()
   /* ************************************************************/
   /* *                 handle the entry of pfkey 20            **/
   /* * added 1-4-88                                            **/
   /* *                                                         **/
   /* *  keep consistent with existing code in cl0gs18.         **/
   /* *  both sgrps should be changed to move 'cl0gm001/5'      **/
   /* *    to clxrec.clxcscrn to utilize code in cl0g050,       **/
   /* *    but first need to study the field setting in cl0g001 **/
   /* *    to be sure it is executed properly.                  **/
   /* ************************************************************/
  ;
  ;
  CLWREC.CLWMCMNT = "Y"; /* mark common recd*/
  ;
  COMMAREA.CATOAP = "KL0G"; /* go to memo comments map*/
  ;
  XPCL002();
  ;
end // end KL0GS20

// edit claim status
Function KL0GS40()
   /* ************************************************************/
   /* *      edit and update each claim comment line            **/
   /* *                                                         **/
   /* *   we get here because a line was modified...there       **/
   /* *   is no editing except to check if a line was blanked   **/
   /* *   out.  if a comment is blanked out, the record is      **/
   /* *   deleted.                                              **/
   /* *   1/07/93 jhecke changed to accomodate paging (cl1210)  **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0GS40"; /* set current process name*/
  ;
  ;
  CLXREC.CLXUPDTF = "Y";
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 1;
  CLGREC.CL2ISNBR = 0;
   /* MOVE CLAREC.XGPCD TO CLGREC.XGPCD;*/
  CLGREC.CLGCMTYP = "C";
   /* MOVE ' ' TO CLGREC.SY1STNBR;*/
   /* MOVE ' ' TO CLGREC.SY2CLRID;*/
   /* MOVE ' ' TO CLGREC.XDMCD;*/
  CL0GW01.CL0GW-USER-ID[CL0GWLNX] = COMMAREA.CAUSERID;
  CLGREC.XXXUSRID = CL0GW01.CL0GW-USER-ID[CL0GWLNX];
  CLGREC.CLGCMSEQ = CL0GW01.CLGCMSEQ[CL0GWLNX];
  CLGREC.ZZZCHGCT = CL0GW01.CL0GWZZC[CL0GWLNX];
  CLGREC.CLGCOMNT = CL0GW01.CL0GW-COMMENT[CL0GWLNX];
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  end
  ;
  ;
  if (CL0GW01.CL0GW-COMMENT[CL0GWLNX] == " ") /* if comment is blank*/
    KL0GS41(); /* delete this comment*/
  else
    if (CL0GW01.CL0GWLNX > CLXREC.CLXLSTAX)
      KL0GS42(); /* add this comment*/
    else
      KL0GS43(); /* replace this comment*/
    end
  end
  ;
end // end KL0GS40

// delete comment record
Function KL0GS41()
   /* ************************************************************/
   /* *      delete comment record                              **/
   /* *                                                         **/
   /* * 1/07/93 jhecke changed to accomodate paging (cl1210)    **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0GS41"; /* set process name*/
  ;
  ;
  if (CL0GW01.CL0GWLNX > CLXREC.CLXLSTAX)
     /* if processing lines that aren't on the database, skip them*/
    /* next sentence*/
  else
    KL0G915(); /* delete comment record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CLXREC.CLXBLDSC = "N";
      end
    end
  end
  ;
end // end KL0GS41

// add claim comment
Function KL0GS42()
   /* ************************************************************/
   /* *      add claim comment record                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0GS42"; /* set process name*/
  ;
   /* give each comment a sequence number by incrementing*/
   /* the current sequence number.*/
  ;
  if (CLXREC.CLXLSTAX == 0)
     /* if there are no comments, the index eq 0 and is not valid*/
    CLGREC.CLGCMSEQ = 1;
     /* clxrec.clxlstax eq 0 + 1*/
    CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
     /* move 1 to cl0gw01.clgcmseq(1)*/
    CL0GW01.CLGCMSEQ[CLXLSTAX] = CLGREC.CLGCMSEQ;
  else
    CLGREC.CLGCMSEQ = CL0GW01.CLGCMSEQ[CLXLSTAX] + 1;
    CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
    CL0GW01.CLGCMSEQ[CLXLSTAX] = CLGREC.CLGCMSEQ;
  end
  ;
  KL0G914(); /* select unique from clgrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0G916(); /* add the comment record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      end
      return;
    else
      ;
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* replace the comment record*/
        KL0G917();
        if (SQLCA.VAGen_SQLCODE == 0)
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          CLXREC.CLXBLDSC = "N";
        end
        return;
      end
    end
  end
end // end KL0GS42

// replace claim comment
Function KL0GS43()
   /* ************************************************************/
   /* *      replace claim comment record                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0GS43"; /* set process name*/
  ;
    /* see if the desired record exists*/
  ;
   /* PERFORM CL0G914                 ; select unique from clgrec*/
   /* IF CLXREC.CLXERRF EQ 'Y';*/
    /* EZERTN;*/
   /* END ;*/
   /* ;*/
   /* IF SQLCA.SQLCODE EQ 0;*/
  KL0G917(); /* replace the comment record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CLXREC.CLXBLDSC = "N";
    end
  end
  ;
end // end KL0GS43

// edit claim memo sequence nbr
Function KL0GS50()
   /* ************************************************************/
   /* *      edit and update the memo comments                  **/
   /* *   update is done with value that was displayed on map,*/
   /* *   not current value on map that could have been        **/
   /* *   changed by the user and signifies they want to see    **/
   /* *   comments for another sequence number.                 **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = CLHREC.CLHSEQNB;
  CLGREC.CLGCMTYP = "M";
  CLGREC.CL2ISNBR = 0;
   /* MOVE ' ' TO CLGREC.XGPCD;*/
   /* MOVE ' ' TO CLGREC.SY1STNBR;*/
   /* MOVE ' ' TO CLGREC.SY2CLRID;*/
   /* MOVE ' ' TO CLGREC.XDMCD;*/
  KL0GM005.CL0GMUID[CLXLINEX] = COMMAREA.CAUSERID;
  CLGREC.XXXUSRID = KL0GM005.CL0GMUID[CLXLINEX];
  CLGREC.CLGCMSEQ = CL0GW01.CLGCMSEQ[CLXLINEX];
  CLGREC.ZZZCHGCT = CL0GW01.CL0GWZZC[CLXLINEX];
  CLGREC.CLGCOMNT = KL0GM005.CLGCOMNT[CLXLINEX];
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  end
  ;
  ;
  ;
  ;
  if (KL0GM005.CLGCOMNT[CLXLINEX] == " ") /* if comment is blank*/
    KL0GS41(); /* delete this comment*/
  else
    if (CLXREC.CLXLINEX > CLXREC.CLXLSTAX)
      KL0GS42(); /* add this comment*/
    else
      KL0GS43(); /* replace this comment*/
    end
  end
  ;
  ;
  ;
end // end KL0GS50

// set modified fields modified
Function KL0GS60()
   /* ************************************************************/
   /* *      if there was an error on the screen, set           **/
   /* *       the modified fields modified so on the        **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS60"; /* set current process name*/
  ;
  if (KL0GM005.CLGCOMNT[CLXLINEX] is modified)
    set KL0GM005.CLGCOMNT[CLXLINEX] modified;
  end
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  ;
end // end KL0GS60

// set modified fields modified
Function KL0GS61()
   /* ************************************************************/
   /* *       set the modified fields modified so on the        **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS61"; /* set current process name*/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 10)
    KL0GS60(); /* set modified fields modified*/
  end
end // end KL0GS61

// edit sequence number
Function KL0GS63()
   /* ************************************************************/
   /* *      edit sequence number to see if it is valid         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS63"; /* set current process name*/
  ;
  if (KL0GM005.CLHSEQNB is modified)
    if (KL0GM005.CLHSEQNB > CLAREC.CLACSQNB)
      converseLib.validationFailed(14); /* invalid sequence number*/
      set KL0GM005.CLHSEQNB cursor, modified, bold;
      CLXREC.CLXBLDSC = "N"; /* don't want to over write message*/
      ;
       /* need to initialize the map text fields*/
      ;
      CLXREC.CLXLINEX = 1;
      while (CLXREC.CLXLINEX <= 10)
        KL0GS65();
      end
      ;
    else
      set KL0GM005.CLHSEQNB initialAttributes;
    end
  else
    if (KL0GM005.CLHSEQNB > CLAREC.CLACSQNB)
      KL0G141(); /* user was looping and there are no more valid*/
                         /* seq nbrs, so transfer out*/
    end
  end
  ;
  ;
end // end KL0GS63

// clear map fields
Function KL0GS65()
   /* ************************************************************/
   /* *      clear map fields*/
   /* **/
   /* **/
   /* **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS65"; /* set current process name*/
  ;
  KL0GM005.CLGCOMNT[CLXLINEX] = " ";
  ;
  if (CLXREC.CLXLINEX <= 3)
    KL0GM005.CLTMMSG[CLXLINEX] = " ";
  end
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
end // end KL0GS65

// set modified fields modified
Function KL0GS66()
   /* ************************************************************/
   /* *      if there was an error on the screen, set           **/
   /* *       the modified fields modified so on the        **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS66"; /* set current process name*/
  ;
  if (KL0GM001.CLGCOMNT[CLXLINEX] is modified)
    set KL0GM001.CLGCOMNT[CLXLINEX] modified;
  end
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  ;
end // end KL0GS66

// set modified fields modified
Function KL0GS67()
   /* ************************************************************/
   /* *       set the modified fields modified so on the        **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0GS67"; /* set current process name*/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 14)
    KL0GS66(); /* set modified fields modified*/
  end
end // end KL0GS67

//*** RECORD=CL0GW01 ****
// 070590  sgorga  Increased fields 'clgcmseq' and 'cl0gwzzc'
//                 to occur 14 times (from 10).
// 041792  bcourt  Rename CLACMIND to CL-CLCOM-FL.
// 012293  bcourt  add changes for scrolling and consumer
//                 services.
// 021793  bcourt  Add comment-type code so 'b' types can be
//                 protected since they are changed only on the
//                 consumer services unix.
// 022293  bcourt  Drop DM-UPD-FL since no longer log activity
// ***********************
Record CL0GW01 type basicRecord
  5 CL0GW1GP CL0GW1GP ; 
    10 CLGCMSEQ CLGCMSEQ [99] ; 
    10 CL0GWZZC CL0GWZZC [99] ; 
    10 CL0GW-ADD-DATE CL0GW-ADD-DATE [99] ; 
    10 CL0GW-USER-ID CL0GW-USER-ID [99] ; 
    10 CL0GW-COMMENT CL0GW-COMMENT [99] ; 
    10 CL0GW-COMMENT-MOD CL0GW-COMMENT-MOD [99] ; 
    10 CL0GW-COMNT-TYP-CD CL0GW-COMNT-TYP-CD [99] ; 
    10 CL0GWFLN CL0GWFLN ; 
    10 CL0GWTLN CL0GWTLN ; 
    10 CL0GWLNI CL0GWLNI ; 
    10 CL0GWLNX CL0GWLNX ; 
    10 CL0GWMFF CL0GWMFF ; 
    10 CL0GWIOF CL0GWIOF ; 
    10 CL0GWLPF CL0GWLPF ; 
    10 CL0GWCMT CL0GWCMT ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CL0GWDT1 CL0GWDT1 ; 
      15 CL0GW0DT CL0GW0DT ; 
      15 CL0GWDT2 CL0GWDT2 ; 
    10 CL0GWDCT CL0GWDCT ; 
    10 CL0GWDFL CL0GWDFL ; 
end // end CL0GW01

//*** RECORD=CLTREC ****
// ******************  Claim Message Table  *******************
// 
// DB2 Table:           DCLAIM.VCLMSG01
// 
// Copylib Member:      DCL00224
// 
// I/O Mod:             IO????
// 
// Key to DB2 Table:    cltmmedt
//                      cltmmxdt
//                      cltmprfl
//                      xaucd (occ 3)
// 
// Date Created:        03/01/87
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 03-01-87   PAG       Initial record creation
// 12/10/90  chyde      Correct data item def description.
// 
// **********************
Record CLTREC type basicRecord
  5 CLTGROUP CLTGROUP ; 
    10 CLTMMEDT CLTMMEDT ; 
    10 CLTMMXDT CLTMMXDT ; 
    10 CLTMPRFL CLTMPRFL ; 
    10 XAUCD XAUCD [3] ; 
    10 CLTMMSG CLTMMSG [3] ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
end // end CLTREC

// comment add date
DataItem CL0GW-ADD-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment
DataItem CL0GW-COMMENT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment modified flag
DataItem CL0GW-COMMENT-MOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment type code
DataItem CL0GW-COMNT-TYP-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment added by user
DataItem CL0GW-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold 0
DataItem CL0GW0DT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws record 1 group level
DataItem CL0GW1GP char(8145)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment exists flag
DataItem CL0GWCMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// deadlock count
DataItem CL0GWDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// deadlock flag
DataItem CL0GWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date 0ccyymmdd
DataItem CL0GWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd
DataItem CL0GWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// paging line counter
DataItem CL0GWFLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry-only flag
DataItem CL0GWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage position index
DataItem CL0GWLNI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem CL0GWLNX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// look at all mess. in seq order
DataItem CL0GWLPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// memo-found-flag
DataItem CL0GWMFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display 'to' line number
DataItem CL0GWTLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zzzchange count
DataItem CL0GWZZC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record group level
DataItem CLTGROUP char(171)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-memo-msg-edt
DataItem CLTMMEDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cl-memo-msg1,2,3
DataItem CLTMMSG char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl_memo_msg_xdt
DataItem CLTMMXDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-msg-print-fl
DataItem CLTMPRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

