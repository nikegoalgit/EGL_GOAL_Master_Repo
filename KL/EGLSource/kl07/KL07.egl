package kl07;

import as1.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import iv.common.*;
import kl.common.KL14TBL;
import ku.common.*;
import op.common.*;
import sm.common.*;
import sp.common.SP1ID;
import sp.common.SP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCLHDR02;
import vv.common.VCLHDR02-GROUP;
//*** PROGRAM=KL07 ****
// **********************************************************
// ** This application displays claims (deductions/TC250)  **
// ** in suspense.  In addition, it provides a means to    **
// ** update specific fields on the claims in suspense     **
// ** records.                                             **
// **                                                      **
// ** Three maps are used by this application.             **
// ** 1. The primary screen KL07M001 provides display      **
// **    as well as update functionality.                  **
// ** 2. The secondary screen KL07M005 provides inquiry    **
// **    capability only on additional fields.             **
// ** 3. The third map KL07M010 is a cloned version of     **
// **    of KL0EM KL0EM001.  It provides the ability for   **
// **    the user to select specific claims from the       **
// **    primary screen and display claim header info.     **
// **                                                      **
// ** Non csp files/tables accessed:                       **
// ** FILES               TYPE    USAGE                    **
// ** AC.V0100.ACARTBLE   VSAM    Get credit analyst id    **
// **                             using user id            **
// ** DCLAIM.VWOSUS01      DB2    insert, select, update,  **
// **                             delete                   **
// ** DCLAIM.VCLHDR02      DB2    select                   **
// ** DCUST.VCMPNY01       DB2    select                   **
// **                                                      **
// ** Called modules:                                      **
// **                                                      **
// ** TA0040     Get date and time                         **
// ** TA0020     Abend module                              **
// ** CL4000     Get credit analyst id from vsam file.     **
// ** CL4010     IO mod to claims in suspense database     **
// ** IO0070     Get sales prg abbrev for KL07M010         **
// ** IO0240     Get company id                            **
// ** IO0550     Get customer service rec for KL07M010     **
// ** IO1160     Get claim header                          **
// ** IO1170     Get AR records for claim for KL07M010     **
// ** IO1260     Get claims related comments               **
// ** IO2650     Format auth last & first name for KL07M010**
// **********************************************************
// **          M A I N T E N A N C E   H I S T O R Y       **
// **                                                      **
// **  date      pgmr    description                       **
// ** --------   ------  --------------------------------- **
// ** 07-21-97   PPERK1  CREATE PROCESS                    **
// ** 02-16-98   gdecke  regenarate - new view of vwosus01 **
// ** 02-25-98   gdecke  require active status on clm rsn  **
// ** 03-11-98   GDECKE  MISC POST IMPLEMENTATION CHANGES  **
// ** 03-17-98   GDECKE  RENAME XSCLSDY TO KL07S-GET-DAY-DIFF
// ** 03-21-98   rgilli  Y2K MODIFICATIONS MADE TO:
// **                    KL07W01: Added two new fields
// **                             kl07w-dt-enter & kl07w-cur-dt
// **                    KL07S41: Add year validation from
// **                             xpcl004.  Change year compare
// **                             from yy to ccyy.
// **                    KL07S47: Add year validation from
// **                             xpcl004.  Change year compare
// **                             from yy to ccyy.
// ** 04-12-99   GDECKE  ADD PF19 TRASNFER TO KL08.
// ** 09-09-99   ssank1  Changed Map presentation KL07M010 to
// **                    accomodate 4 digit nike ord id.
// ** 03-03-00   GDECKE  increase max page count to 200
// ** 06-21-00   SSANK1  Added update ability for REF-NBR and
// **                    IV-IVC-ID and also added an option 'E'
// **                    to erase the detail line.This will be
// **                    taken care of in the nightly batch
// **                    processing ( CL3151 ).
// ************************************************************
// *********************
Program KL07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  CLYREC CLYREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IVYREC IVYREC; // record
  IVZREC IVZREC; // record
  KL07DBIO KL07DBIO; // record
  KL07TBIN KL07TBIN; // record
  KL07TBOT KL07TBOT; // record
  KL07W01 KL07W01; // record
  KL07W02 KL07W02; // record
  KL07W03 KL07W03; // record
  KL07W04 KL07W04; // record
  KL07W08 KL07W08; // record
  KL07WCLM KL07WCLM; // record
  KL07WPL1 KL07WPL1; // record
  KL07WSC1 KL07WSC1; // record
  KUCREC KUCREC; // record
  KUDREC KUDREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUYREC KUYREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCLHDR02 VCLHDR02; // record
  VSMCA01 VSMCA01; // record
  VWOSUS01 VWOSUS01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL00ENU {deleteAfterUse = yes}; // table
  use CL7TBL {deleteAfterUse = yes}; // table
  use KL14TBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XCETBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLETBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XTTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YASTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YITTBL {deleteAfterUse = yes}; // table
  use YRCTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL07M.KL07M001,  // forms
      KL07M.KL07M005, 
      KL07M.KL07M010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL07000: KL07000();
    exit program;
    KL07001: KL07001();
  end // end main
end // end KL07

// main flow
Function KL07000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, init appl maint rev nbr,      **/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  COMMAREA.CACURRAP = "KL07";
  KL07W01.KL07W-CURR-PROC-NM = "KL07000";
  ;
  KL07001(); /* initialize the application*/
  ;
  KL07W01.KL07W-EOA-FL = "N"; /* set end-of-application*/
                                           /* to 'no'*/
  KL07W01.KL07W-FIRST-TIME-FL = "Y"; /* set start of application*/
                                           /* to 'yes'*/
  ;
  while (KL07W01.KL07W-EOA-FL == "N") /* while not end of appl*/
    KL07050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/
end // end KL07000

// init processing
Function KL07001()
   /* ***************************************************************/
   /* *  KL07001                                                   **/
   /* *   initialize local records (all but tables, commarea)      **/
   /* *------------------------------------------------------------**/
   /* *   M A I N T E N A N C E    H I S T O R Y   L O G           **/
   /* *------------------------------------------------------------**/
   /* * 07-21-97  pperk1  create new.                              **/
   /* * 03-11-98  GDECKE  EXPAND KL07WCLM MAX OCCURANCES TO 2000.  **/
   /* ***************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07001";
  ;
  set CLAREC empty;
  set KUCREC empty;
  set KL07DBIO empty;
  set KL07TBIN empty;
  set KL07TBOT empty;
  set KL07W01 empty;
  set KL07WCLM empty;
  set KL07WPL1 empty;
  set KL07WSC1 empty;
  set VWOSUS01 empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set VSMCA01 empty;
  set TA1REC empty;
  set TA2REC empty;
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                  /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                  /* error*/
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
   /* init screens used in this application*/
  KL07W01.KL07W-MAP-TBL[1] = "KL07M001"; /* primary screen*/
  KL07W01.KL07W-MAP-TBL[2] = "KL07M005"; /* shifted screen*/
  KL07W01.KL07W-MAP-TBL[3] = "KL07M010"; /* inquiry screen*/
  KL07W01.KL07W-CURR-MAP-NM = "KL07M001";
                                  /* start with prime screen*/
  ;
  ;
     /* *******************/
     /* set map id's, date*/
     /* *******************/
  ;
  KL07M001.XXXPRCNM = "KL07100"; /* primary map process name*/
  KL07M005.XXXPRCNM = "KL07100"; /* secondary map process name*/
  KL07M010.XXXPRCNM = "KL07200"; /* inquiry map process name*/
  ;
  KL07W01.KL07W-MAX-CLM-CT = 2000; /* max claims to be processed*/
  KL07W01.KL07W-MAX-PAGE = 200; /* max screens of data to be displayed*/
  KL07W01.KL07W-MAXLN = 15; /* max lines on screens*/
  KL07W01.KL07W-CURR-CLM-PTR = 1; /* curr clm pointer*/
  KL07W01.KL07W-MAP-PTR = 1; /* curr MAP pointer*/
  KL07W01.KL07W-CLX1 = 1; /* clm array index*/
  KL07W01.KL07W-INQX = 1; /* inquiry screen clm # tbl index*/
  KL07W01.KL07W-LINEX = 1; /* screen line index*/
  KL07S-INIT-PG-TBL(); /* init scrn page table*/
  KL07S-INIT-INQTBL(); /* init inquiry clm# tble*/
  KL07S-INIT-ARRAY(); /* init clm array*/
  ;
  KL07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  KL07M005.XXXCURDT = VGVar.currentShortGregorianDate;
  KL07M010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL07M001.XXXRVNBR = "0"; /* appl maint revision number*/
  KL07M005.XXXRVNBR = "0"; /* appl maint revision number*/
  KL07M010.XXXRVNBR = "0"; /* appl maint revision number*/
  ;
      /* GET AND SAVE CHANGE DATE AND TIME*/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
    KL07W01.ZZ-CHNG-DT = TA2REC.TA2GRGGN;
    KL07W01.ZZ-CHNG-HHMM = TA2REC.TA2TIMHM;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0E001";
    XPCL010(); /* abend*/
  end
  ;
  ;
  KL07W01.XXXUSRID = COMMAREA.CAUSERID;
  KL07005(); /* get claims analyst code*/
  ;
  KL07M001.XCE-CR-ANLS-CD = KL07TBOT.KL07W-TB23-ANAL-CODE;
  ;
  KL07S-INIT-PL1(); /* init iomod parm list for first time*/
                                   /* call*/
  ;
end // end KL07001

// GET CREDIT ANLYST CD
Function KL07005()
   /* ************************************************************/
   /* *                                                         **/
   /* *   THIS ROUTINE CALLS THE VSAM IO RTN CL4000 TO ACCESS   **/
   /* *   THE AR MASTER TABLE FILE FOR CREDIT ANALYST CODE      **/
   /* *   FROM THE TB23 RECORDS.                                **/
   /* *                                                         **/
   /* *   FILE = AC.V0100.ACARTBLE                              **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-16-98  GDECKE  ALLOW SUBROUTINE TO FETCH ANALYST CODE**/
   /* ************************************************************/
  ;
  COMMAREA.CACURRAP = "KL07";
  KL07W01.KL07W-CURR-PROC-NM = "KL07005";
  ;
    /* initialize iomod input & output parms*/
  set KL07TBIN empty;
  set KL07TBOT empty;
  ;
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  KL07TBIN.KL07W-TBIN-FUNCTION = "RKEY ";
  KL07TBIN.KL07W-TBIN-TBL-NBR = "TB23 ";
  KL07TBIN.KL07W-TBIN-TBL-ARG1 = KL07W01.XXXUSRID;
  ;
  call "CL4000" (KL07TBIN, KL07TBOT) {isNoRefresh = yes, isExternal = yes};
  ;
   /* **** TESTING ***** TESTING ***** TESTING ******/
   /* **** following 2 lines for testing purposes in cmd1 ******/
   /* **** because vsam file is not available to cmd1     ******/
   /* MOVE '00' TO KL07TBOT.KL07W-TBOT-VSMST;*/
   /* MOVE 'AE' TO KL07TBOT.KL07W-TB23-ANAL-CODE;*/
  ;
  ;
  if (KL07TBOT.KL07W-TBOT-VSMST != "00")
    KL07TBOT.KL07W-TBOT-VSMST = "00";
    KL07TBOT.KL07W-TB23-ANAL-CODE = "AE";
    /* MOVE 'VSAM' TO TA1REC.TA1TYPE; /* EA.CAUSERA;*/
    /* MOVE 'READ' TO TA1REC.TA1FUNC;*/
    /* SET VSMCA01 EMPTY;             /* clear area*/
    /* MOVE KL07TBOT.KL07W-TBOT-VSMFLNM TO VSMCA01.VSMFLNM;*/
    /* MOVE KL07TBOT.KL07W-TBOT-VSMACT TO VSMCA01.VSMACT;*/
    /* MOVE KL07TBOT.KL07W-TBOT-VSMST TO VSMCA01.VSMST;*/
    /* MOVE KL07TBOT.KL07W-TBOT-VSMRCKEY TO VSMCA01.VSMRCKEY;*/
    /* PERFORM XPCL012;*/
  else
    KL07W01.XCE-CR-ANLS-CD = KL07TBOT.KL07W-TB23-ANAL-CODE;
  end
  ;
end // end KL07005

// GET CLMS ASSOC W/ CLM ANALYST
Function KL07010()
   /* *************************************************************/
   /* *  KL07010                                                 **/
   /* *     get all suspense claims associated using selection   **/
   /* *     criteria passed in parm list kl07wpl1.  Parm list    **/
   /* *     values populated during edit of map header.          **/
   /* *************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G       **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 03-11-98  GDECKE  AVOID ABEND WHEN TABLE IS FULL         **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07010";
                                  /* set current process name*/
   /* initialize map detail lines*/
  ;
  KL07S-MP1-HD-TO-WS();
  set KL07M001 empty;
  KL07S-MP1-WS-TO-HD();
  ;
  KL07S-MP2-HD-TO-WS();
  set KL07M005 empty;
  KL07S-MP2-WS-TO-HD();
  ;
   /* initialize work areas*/
  ;
  KL07S-INIT-ARRAY();
  KL07S-INIT-PG-TBL();
  KL07W01.KL07W-PAGE-NBR[1] = 1;
  KL07W01.KL07W-PAGE-LN-CT[1] = 1;
  KL07W01.KL07W-LAST-CLM-PTR = 1; /* total claims processed*/
  KL07W01.KL07W-CLX1 = 1; /* claims array index*/
  KL07W01.KL07W-TOT-TRANS-AMT = 0;
  KL07W01.KL07W-TOT-TRANS-COUNT = 0;
  converseLib.validationFailed(0);
  KL07W01.KL07W-ERR-FL = "N";
  KL07W01.KL07W-ERR-NO240-FL = "N";
  KL07W01.KL07W-ERR-NO797-FL = "N";
  KL07W01.KL07W-ERR-NO798-FL = "N";
  ;
  set VWOSUS01 empty;
  set SQLCA empty;
  ;
   /* NOTE: values for kl07wpl1 are set after the map converse*/
   /* in the screen header edit routines.*/
   /* call iomod to declare & open cursor*/
  ;
  KL07DBIO.KL07W-DBIO-FUNCTION = "S1"; /* get all records*/
  call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
   /* get claims (deductions) in suspense records*/
  while (SQLCA.VAGen_SQLCODE == 0 /* number of recs fetched =*/
   /* kl07w-max-clm-ct*/
   && KL07W01.KL07W-CLX1 < KL07W01.KL07W-MAX-CLM-CT)
    ;
    KL07DBIO.KL07W-DBIO-FUNCTION = "N1"; /* fetch next record*/
    call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
    ;
    /* *claim stat may have been specified by user. Determine here*/
    /* *if record matches.*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07S-GET-CLST(); /* get claim stat cd1 from claim hdr*/
      if (KL07W01.KL07W-BYPASS-THIS-REC == "N") /* save record to array*/
        KL07S-BUILD-ARRAY(); /* move db fields to working storage tbl*/
        ;
        if (KL07W01.KL07W-PAGEX > 200)
          KL07W01.KL07W-PAGEX = 200;
        end
        ;
        if (KL07W01.KL07W-PAGEX < 1)
          KL07W01.KL07W-PAGEX = 1;
        end
        ;
        KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
        KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] = KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] + 1;
      end
      ;
      /* *determine if built enough array lines to fill a screen (page)*/
      /* *if yes decrease line cnt by 1 on curr page #, add new page #*/
      ;
      if (KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] >  /* max nbr lines on scrn*/
      KL07W01.KL07W-MAXLN)                        
        KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] = KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] - 1;
        KL07W01.KL07W-PAGEX = KL07W01.KL07W-PAGEX + 1; /* increase page tbl*/
                                  /* index*/
   /* add new page to page tbl*/
        KL07W01.KL07W-PAGE-NBR[KL07W-PAGEX] = KL07W01.KL07W-PAGEX;
        KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] = 1;
      end
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 - 1;
        KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] = KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] - 1;
        if (KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] == 0)
          KL07W01.KL07W-PAGE-NBR[KL07W-PAGEX] = 0;
          KL07W01.KL07W-PAGEX = KL07W01.KL07W-PAGEX - 1;
        end
      else
        CLXREC.CLXCPROC = "KL07010";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VWOSUS01";
        TA1REC.TA1LOCAT[2] = ", FETCH ";
        TA1REC.TA1LOCAT[3] = "NEXT.   ";
        KL07W01.KL07W-TA1LOC1-1 = "ANLST:";
        KL07W01.KL07W-TA1LOC1-2 = VWOSUS01.XCE-CR-ANLS-CD;
        TA1REC.TA1LOCAT[4] = KL07W01.KL07W-TA1LOC1;
        KL07S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
        XPCL010();
      end
    end
  end /* WHILE END*/
  ;
   /* call iomod to close claims (deductions) in suspense cursor*/
  KL07DBIO.KL07W-DBIO-FUNCTION = "C1"; /* fetch next record*/
  call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXCPROC = "KL07010";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOSUS01";
    TA1REC.TA1LOCAT[2] = ", CLOSE ";
    TA1REC.TA1LOCAT[3] = "CURSOR. ";
    KL07W01.KL07W-TA1LOC1-1 = "ANLST:";
    KL07W01.KL07W-TA1LOC1-2 = VWOSUS01.XCE-CR-ANLS-CD;
    TA1REC.TA1LOCAT[4] = KL07W01.KL07W-TA1LOC1;
    KL07S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
    XPCL010();
  end
  ;
   /* if we have at least 1 claim in suspense then set pointers, count etc.*/
  if (KL07W01.KL07W-CLX1 >= 1)
    ;
    KL07W01.KL07W-TOT-TRANS-COUNT = KL07W01.KL07W-CLX1;
    ;
    KL07W01.KL07W-LAST-CLM-PTR = KL07W01.KL07W-CLX1;
    KL07W01.KL07W-LAST-CLM-NBR = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
    ;
    if (KL07W01.KL07W-PAGEX > 200)
      KL07W01.KL07W-PAGEX = 200;
    end
    ;
    if (KL07W01.KL07W-PAGEX < 1)
      KL07W01.KL07W-PAGEX = 1;
    end
    ;
    KL07W01.KL07W-MAX-PAGE = KL07W01.KL07W-PAGEX;
    KL07W01.KL07W-CURR-CLM-PTR = 1;
    KL07W01.KL07W-CURR-PAGE = 1;
    KL07W01.KL07W-ERR-NO9-FL = "N";
  else
    converseLib.validationFailed(0009); /* no records found*/
    KL07W01.KL07W-ERR-NO9-FL = "Y";
    KL07W01.KL07W-ERR-FL = "Y";
  end
end // end KL07010

// decide which map to show
Function KL07050()
   /* ************************************************************/
   /* *   Control processing of the application screen(s)       **/
   /* *                                                         **/
   /* *  NOTE:  This process is being performed from within a   **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07050";
                                          /* set current process name*/
  if (KL07W01.KL07W-BLD-ARRAY-FL == "Y")
    KL07010();
  end
  ;
  sysVar.arrayIndex = 0;
  KL07W01.KL07W-MAP-PTR = 0;
  ;
  ;
  if (KL07W01.KL07W-CURR-MAP-NM in KL07W01.KL07W-MAP-TBL)
    KL07W01.KL07W-MAP-PTR = sysVar.arrayIndex; /* if curr MAP name is*/
  end /* in the map array, then set*/
                                   /* the map index*/
  ;
  TA1REC.TA1MAP = KL07W01.KL07W-CURR-MAP-NM;
                                         /* prepare for abend*/
  ;
  KL07W01.KL07W-BLD-SCRN-FL = "Y"; /* set build scrn = yes*/
  KL07W01.KL07W-BLD-ARRAY-FL = "N"; /* set build array = yes*/
  KL07W01.KL07W-EOS-FL = "N"; /* set end scrn fl= no*/
  ;
  if (KL07W01.KL07W-MAP-PTR == 1)
    KL07S-SET-MAP1-FLD(); /* set map 1 fields defined or modified*/
  else
    KL07S-SET-MAP2-FLD(); /* set map 2 fields defined or modified*/
  end
  ;
  while (KL07W01.KL07W-EOS-FL == "N" /* show until user done*/
   && KL07W01.KL07W-BLD-ARRAY-FL == "N")
    KL07100(); /* process deductions in suspense array*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (kl07w-eoa-fl) = 'n'*/
         /* the perform will return to the top of KL07050...*/
       /* else*/
         /* the perform will auto return to KL07000.*/
  ;
end // end KL07050

// process data to maps
Function KL07100()
   /* ************************************************************/
   /* *    Process deductions (claims) in suspense records.     **/
   /* *                                                         **/
   /* *  NOTE: This process is being performed from within a    **/
   /* *     "while loop" from kl07050 until the end-of-screen   **/
   /* *     flag (kl07w-end-of-scrn-fl) is set to 'y'.          **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C    H I S T O R Y    L O G         **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 04-13-99  GDECKE  ADD PF19 TO TRANSFER TO KL08          **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07100";
  ;
  ;
  if (KL07W01.KL07W-BLD-SCRN-FL == "Y")
    if (KL07W01.KL07W-ERR-FL == "N")
      KL07110(); /* BUILD SCREEN*/
      KL07W01.KL07W-BLD-SCRN-FL = "N";
    end
  end
  ;
  ;
  if (KL07W01.KL07W-MAP-PTR == 1)
    KL07111(); /* save & converse map 1 m001*/
    KL07S-SET-MAP1-FLD(); /* set map 1 fields defined or modified*/
  else
    KL07112(); /* save & converse map 2 m005*/
    KL07S-SET-MAP2-FLD(); /* set map 2 fields defined or modified*/
  end
  ;
  KL07W01.KL07W-ERR-FL = "N";
  ;
  KL07120(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  KL07130(); /* process scrn hdr fields*/
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07W01.KL07W-MAP-PTR == 1)
      KL07150(); /* process scrn detail line fields*/
    end
  end
  ;
  ;
  if (KL07W01.KL07W-ERR-FL == "N"
   || (converseVar.validationMsgNum == 9
   && converseVar.eventKey is pf19))
    KL07170(); /* handle enter/PF keys*/
  end
  ;
  ;
   /* at this point;*/
     /* if the end-of-screen flag is 'n'*/
        /* we go back to top of process kl07100.*/
     /* if the end-of-screen flag is 'y'*/
        /* we return to kl07050.*/
  ;
  ;
end // end KL07100

// build screen
Function KL07110()
   /* *******************************************************************/
   /* * KL07110 - BUILD SCREEN                                         **/
   /* *----------------------------------------------------------------**/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* *----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                  **/
   /* *----------------------------------------------------------------**/
   /* * 03-11-98  GDECKE  DO ROUNDING CALCULATION ON TOTAL AMOUNT      **/
   /* *                                                                **/
   /* *******************************************************************/
  KL07W01.KL07W-CURR-PROC-NM = "KL07110";
  ;
  ;
           /* *********************************/
           /* GET CURRENT SUSPENSE CLAIMS DATA*/
           /* *********************************/
  ;
  ;
  if (KL07W01.KL07W-CURR-PAGE == 1)
    KL07W01.KL07W-CURR-CLM-PTR = 1; /* start loop thru array*/
  end
  ;
           /* *********************/
           /* move data to screen*/
           /* *********************/
  ;
  KL07W01.KL07W-PAGEX = KL07W01.KL07W-CURR-PAGE;
  ;
  if (KL07W01.KL07W-MAP-PTR == 1)
    KL07W-CLX1 = KL07W01.KL07W-CURR-CLM-PTR;
    KL07S-MP1-HD-TO-WS(); /* save map1 hdr fields to working*/
                                  /* storage*/
    set KL07M001 empty; /* set map empty*/
    KL07S-MP1-WS-TO-HD(); /* pop map1 hdr fields from working*/
                                  /* storage*/
    KL07M001.XXXCURDT = VGVar.currentShortGregorianDate;
    KL07M001.KL07M-TOT-TRANS-COUNT = KL07W01.KL07W-TOT-TRANS-COUNT; /* total claims count*/
    KL07W01.KL07W-ROUND-AMT = KL07W01.KL07W-TOT-TRANS-AMT + .50;
    KL07M001.KL07M-TOT-TRANS-AMT = KL07W01.KL07W-ROUND-AMT; /* total claims amt*/
    KL07W01.KL07W-LINEX = 1;
    while (
    (KL07W01.KL07W-LINEX <= KL07W-MAXLN) && 
    (KL07W01.KL07W-LINEX <= KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX]))
      /* initialize hold areas for map1 detail line processing*/
      KL07S-BLD-MAP1-LN(); /* build map1 detail lines*/
      KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
      KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
    end /* WHILE END*/
  else
    KL07W-CLX1 = KL07W01.KL07W-CURR-CLM-PTR;
    KL07S-MP2-HD-TO-WS();
    set KL07M005 empty; /* set records empty*/
    KL07S-MP2-WS-TO-HD();
    KL07M005.XXXCURDT = VGVar.currentShortGregorianDate;
    KL07M005.KL07M-TOT-TRANS-COUNT = KL07W01.KL07W-TOT-TRANS-COUNT; /* total claims count*/
    KL07M005.KL07M-TOT-TRANS-AMT = KL07W01.KL07W-ROUND-AMT; /* total claims amt*/
    KL07W01.KL07W-LINEX = 1;
    while (
    (KL07W01.KL07W-LINEX <= KL07W-MAXLN) && 
    (KL07W01.KL07W-LINEX <= KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX]))
      KL07S-BLD-MAP2-LN(); /* build map2 detail lines*/
      KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
      KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
    end /* WHILE END*/
  end
  ;
end // end KL07110

// converse map 1
Function KL07111()
  KL07W01.KL07W-CURR-PROC-NM = "KL07111";
  ;
  if (KL07W-ERR-FL == "N" && converseVar.validationMsgNum == 0)
    KL07W01.KL07W-LINEX = 1;
    while (KL07W01.KL07W-LINEX <= KL07W-MAXLN)
      KL07S-PRV-MAP1-FLD(); /* save variable map fields*/
                                 /* use after converse to compare*/
                                 /* to returned map to check for changes*/
      KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
    end
  end
  ;
  if (KL07W-FIRST-TIME-FL == "Y")
    KL07W-FIRST-TIME-FL = "N";
    set KL07M001.AR-AR-AMT cursor, bold;
  else
    if (KL07W-ERR-FL == "N" && converseVar.validationMsgNum == 0)
      set KL07M-UPDT-FCT-CD[1] cursor, bold;
    end
  end
  ;
  converse KL07M001 ;
end // end KL07111

// converse map 2
Function KL07112()
  KL07W01.KL07W-CURR-PROC-NM = "KL07112";
  ;
  KL07W01.KL07W-LINEX = 1;
  while (KL07W01.KL07W-LINEX <= KL07W-MAXLN)
    KL07S-PRV-MAP2-FLD(); /* save variable map fields*/
                                 /* use after converse to compare*/
                                 /* to returned map to check for changes*/
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
  end
  ;
  converse KL07M005 ;
end // end KL07112

// edit pfkeys
Function KL07120()
   /* *****************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y    L O G          **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 04-12-99  GDECKE  ADD PF19 TRANSFER TO KL08                  **/
   /* *****************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07120";
  ;
  ;
  if (KL07M001.CATOAP != " " /* if any fastpath data entered*/
   || KL07M001.CAITEM != " ")
    COMMAREA.CATOAP = KL07M001.CATOAP;
    COMMAREA.CAITEM = KL07M001.CAITEM;
    XPCL006(); /* see if items to be passed are correct*/
                                   /* length and type*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    XPCL002(); /* check security/xfer*/
    COMMAREA.CATOAP = " ";
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf19)
    return;
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      KL07W01.KL07W-ERR-FL = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          set CLWREC empty; /* initialize clwrec to prevent abend in*/
                                   /* kl0a*/
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            KL07W01.KL07W-ERR-FL = "Y";
          end
        end
      end
    end
  end
  ;
  ;
end // end KL07120

// process map hdr data
Function KL07130()
   /* *************************************************************/
   /* * Edit header fields on maps (kl07m001,kl07m005)           **/
   /* *                                                          **/
   /* * Screen header contains fields which serve 2 different    **/
   /* * purposes:                                                **/
   /* * 1. Fields used to select new records from database       **/
   /* *    and save to internal array.                           **/
   /* *    (VWOSUS01 - write-off items in suspense)              **/
   /* *    KL07M001 & KL07M005 have these type fields.           **/
   /* * 2. Fields used to updt nkcl#, clm rsn cd & rt cse cd     **/
   /* *    on the screen detail lines. Only KL07M001 has these   **/
   /* *    type fields.                                          **/
   /* *                                                          **/
   /* * Edit selection criteria header fields                    **/
   /* * If no edit error found                                   **/
   /* *   check for changed header fields                        **/
   /* *    - changed selection criteria = build new array        **/
   /* *    - changed updt fields = change detail line(s)         **/
   /* *   If updt fields and selection criteria fields changed   **/
   /* *      error                                               **/
   /* *      (cant build array and apply updates to detail       **/
   /* *       lines at same time)                                **/
   /* *   End If                                                 **/
   /* *   If no error                                            **/
   /* *      edit update header fields                           **/
   /* *   End If                                                 **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07130";
  ;
  if (KL07W01.KL07W-MAP-PTR == 1)
    KL07S-HD-MAP1-ED-1(); /* edit selection hdr fields*/
    if (KL07W01.KL07W-ERR-FL == "N")
      KL07S-HD-MAP1-MOD(); /* move selection fields to db parm*/
      ;
      /* set err if updt fields and selection flds changed at same time*/
      ;
      if (KL07W01.KL07W-BLD-ARRAY-FL == "Y")
        if (KL07M001.KL07M-UPDT-CLM-NBR != 0 || 
        KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks || 
        KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
          KL07W-ERR-FL = "Y";
          converseLib.validationFailed(0806);
          if (KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
            set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, red;
          end
          if (KL07M001.KL07M-UPDT-CLM-NBR != 0)
            set KL07M001.KL07M-UPDT-CLM-NBR cursor, red;
          end
          if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks)
            set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD cursor, red;
          end
        end
      end
    end
    ;
    if (KL07W01.KL07W-ERR-FL == "N")
      KL07S-HD-MAP1-ED-2(); /* if no err check updt scrn hdr fields*/
    end
    ;
    /* check for function code 'A' or 'C' entered on detail line(s).*/
    if (KL07W01.KL07W-ERR-FL == "N")
      KL07S-EDIT-FCT-CD();
    end
    ;
    ;
  else
    KL07S-HD-MAP2-EDIT(); /* edit screen header entries*/
    if (KL07W01.KL07W-ERR-FL == "N")
      KL07S-HD-MAP2-MOD(); /* move selection flds to db parm*/
    end
  end
  ;
   /* Error 9 indicates that no records were displayed on map we are*/
   /* currently editing.*/
  if (KL07W01.KL07W-ERR-NO9-FL == "Y")
    KL07W01.KL07W-ERR-FL = "Y";
    converseLib.validationFailed(0009);
  end
  ;
end // end KL07130

// process map1 dtl fld input
Function KL07150()
   /* *************************************************************/
   /* *                                                          **/
   /* *   Perform edits/validation on detail lines (map1 only)   **/
   /* *                                                          **/
   /* *   If detail field changed                                **/
   /* *     If detail errors found                               **/
   /* *        do not process detail updts - display err msg     **/
   /* *     else                                                 **/
   /* *        process detail updts - updt fields on twosus01    **/
   /* *     end                                                  **/
   /* *                                                          **/
   /* *     If inquiry request made on any detail line (fct cd=S)**/
   /* *        perform processes to display clm # info           **/
   /* *     end                                                  **/
   /* *   end                                                    **/
   /* *                                                          **/
   /* *----------------------------------------------------------**/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* * 06-21-00   ssank1     Added new source groups            **/
   /* *                       KL07S-DTL-REFNBR & KL07S-DTL-IVCID **/
   /* *                       to validate ref nbr and iv ivc id  **/
   /* *************************************************************/
  KL07W01.KL07W-CURR-PROC-NM = "KL07150";
  ;
  KL07W01.KL07W-INQX = 1;
  KL07W01.KL07W-INQ-CLM-CT = 0;
  KL07W01.KL07W-DTL-CHG-FL = "N";
  KL07W01.KL07W-ERR-FL = "N";
  KL07W01.KL07W-PAGEX = KL07W01.KL07W-CURR-PAGE;
  ;
   /* set screen index to last detail line and set internal clm array indx*/
  KL07S-SET-INDX-BOT();
  ;
   /* check each detail line for field updts and validate the updates*/
  while (KL07W01.KL07W-LINEX > 0)
    ;
    KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0;
    KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "N";
    ;
    KL07S-DTL-CLM-NBR();
    ;
    KL07S-DTL-FCT-CD();
    ;
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C" || 
    KL07M001.KL07M-UPDT-FCT-CD[1] == "A")
        /* validate hdr to dtl field updates*/
      KL07S-YCR-YRC();
    else
        /* validate dtl field updates*/
      KL07S-DTL-YCR();
      if (KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] == "N")
        KL07S-DTL-YRC();
   /* tcs changes begin 06/21/00*/
        if (KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] == "N")
          KL07S-DTL-REFNBR();
          if (KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] == "N")
            KL07S-DTL-IVCID();
          end
        end
   /* tcs changes end   06/21/00*/
      end
    end
    ;
     /* decrement index by one - editing from bottom to top of scrn*/
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX - 1;
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 - 1;
    ;
  end /* end while*/
  ;
   /* check if error found on any detail line - set err flag to prevent updt*/
  KL07W01.KL07W-LINEX = 1;
  while (KL07W01.KL07W-LINEX <= KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX])
    if (KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] == "Y")
      KL07W01.KL07W-ERR-FL = "Y";
      if (KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX]);
      end
    end
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
  end /* end while*/
  ;
  ;
  if (KL07W01.KL07W-ERR-FL == "N"
   && KL07W01.KL07W-DTL-CHG-FL == "Y")
    KL07S-DTL-UPDTS(); /* process detail updates*/
  end
  ;
  ;
   /* when fct cd S is found on a detail line the claim # was*/
   /* stored in an internal tbl.  Each claim# is retrieved and used*/
   /* to get & display info on the inquiry screen kl07m010.*/
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07W01.KL07W-INQ-CLM-CT >= 1)
      KL07W01.KL07W-INQX = KL07W-INQ-CLM-CT;
      while (KL07W01.KL07W-INQX != 0)
        KL07200();
      end /* end while*/
      KL07W01.KL07W-INQ-CLM-CT = 0;
      KL07W01.KL07W-BLD-SCRN-FL = "Y";
    end
  end
  ;
  ;
end // end KL07150

// flow on 'ENTER' or PF keys
Function KL07170()
   /* *************************************************************/
   /* *    handle enter or PF  key                               **/
   /* *                                                          **/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 08-14-97   PPERK1     NEW APPLICATION                    **/
   /* * 04-12-99   GDECKE     ADD PF19 TRANSFER TO KL08          **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07170";
  ;
  if (converseVar.eventKey is enter)
    KL07M001.KL07M-UPDT-CLM-NBR = 0;
    KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD = "   ";
    KL07M001.KL07M-UPDT-YRC-RT-CSE-CD = "  ";
    return;
  end
  ;
  if (converseVar.eventKey is pf5)
    KL07W01.KL07W-EOS-FL = "Y";
    KL07W01.KL07W-EOA-FL = "Y";
    CLAREC.CLACLMNB = 0;
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf19)
    KL07W01.KL07W-EOS-FL = "Y";
    KL07W01.KL07W-EOA-FL = "Y";
    CLAREC.CLACLMNB = 0;
    COMMAREA.CATOAP = "KL08";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf6)
    KL07W01.KL07W-EOS-FL = "Y";
    KL07W01.KL07W-EOA-FL = "Y";
    COMMAREA.CATOAP = "KL0B";
    CLAREC.CLACLMNB = 0;
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf7)
    KL07S-PF7();
  end
  ;
  if (converseVar.eventKey is pf8)
    KL07S-PF8();
  end
  ;
  if (converseVar.eventKey is pf9) /* go to top of array - first screen/page of data*/
    if (KL07W01.KL07W-CURR-PAGE == 1)
      KL07W-ERR-FL = "Y";
      converseLib.validationFailed(7);
    else
      KL07W01.KL07W-CURR-PAGE = 1;
      KL07W01.KL07W-CURR-CLM-PTR = 1;
      KL07W01.KL07W-BLD-SCRN-FL = "Y";
      KL07W01.KL07W-BLD-ARRAY-FL = "N";
      KL07S-INT-KL07WSC1(); /* init scrn hold areas*/
    end
  end
  ;
  if (converseVar.eventKey is pf10) /* go to bottom of array - last screen/page of data*/
    if (KL07W01.KL07W-CURR-PAGE == KL07W01.KL07W-MAX-PAGE)
      KL07W-ERR-FL = "Y";
      converseLib.validationFailed(3);
    else
          /* set pointer to last screen of data*/
      KL07W01.KL07W-CURR-PAGE = KL07W01.KL07W-MAX-PAGE;
          /* set pointer to first claim on last screen of data*/
      KL07W01.KL07W-CURR-CLM-PTR = ((KL07W01.KL07W-MAX-PAGE * 15) - 14);
      KL07W01.KL07W-BLD-SCRN-FL = "Y";
      KL07W01.KL07W-BLD-ARRAY-FL = "N";
      KL07S-INT-KL07WSC1(); /* init scrn hold areas*/
    end
  end
  ;
  if (converseVar.eventKey is pf11)
    KL07W01.KL07W-EOS-FL = "Y";
   /* MOVE 'N' TO KL07W01.KL07W-BLD-ARRAY-FL;*/
    if (KL07W01.KL07W-MAP-PTR == 1)
      KL07W01.KL07W-CURR-MAP-NM = "KL07M005";
      KL07S-MP1-HD-TO-WS();
      KL07S-MP2-WS-TO-HD();
    else
      KL07W01.KL07W-CURR-MAP-NM = "KL07M001";
      KL07S-MP2-HD-TO-WS();
      KL07S-MP1-WS-TO-HD();
    end
  end
  ;
  if (converseVar.eventKey is pf13)
    converseLib.validationFailed(0804); /* INVALID FUNCTION KEY*/
    KL07W01.KL07W-ERR-FL = "Y";
  end
  ;
end // end KL07170

// set up inquiry-mode screen
Function KL07200()
   /* *************************************************************/
   /* set up inquiry-mode screen                            **/
   /* NOTE: this process contains code copied from kl0e102      **/
   /* on 10/19/97                                         **/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                             **/
   /* -----------------------------------------------------------**/
   /* phase (B) enhancement:                  **/
   /* added the call to cl0e107               **/
   /* 12-23-91  twatso  check yittbl row for active             **/
   /* 10-22-93  GDECKE  REMOVE OVERLAPPING MOVE STMT.           **/
   /* 10-22-93  GDECKE  REMOVE OVERLAPPING MOVE STMT.           **/
   /* -----------------------------------------------------------**/
   /* 10-19-97  PPERK1  clone and change item and process group **/
   /* names.                                  **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07200"; /* set current process name*/
  ;
  set KL07M010 initial;
  KL07M010.XXXPRCNM = "KL07200"; /* set screen  process name*/
  KL07M010.XXXMAPNM = "KL07M010"; /* set current map name*/
  KL07M010.XXXRVNBR = "00"; /* set revision number*/
  KL07M010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL07S-INT-VCLHDR02();
  ;
   /* if claim was not found then show the claim number on the map*/
  if (converseVar.validationMsgNum == 5)
    KL07M010.CLACLMNB = KL07W01.KL07W-INQ-CLM-NBR[KL07W-INQX];
  end
  ;
   /* show current kl07m001 line number on kl07m010 map*/
  KL07M010.KL07M-INQX = KL07W01.KL07W-INQX;
  ;
  KL07207(); /* prepare screen fields*/
  ;
  set KL07M010.CLACLMNB initialAttributes;
  KL07M010.KL07ML1 = "Nike Claim Nbr:";
  ;
  set KL07M010.CLACLMNB cursor;
  ;
  set KL07M010.YCSCD skip;
  ;
  KL07209(); /* protect some screen fields*/
  ;
   /* do not attempt to move fields if no claim header found*/
  if (converseVar.validationMsgNum == 5)
    /* next sentence*/
  else
    KL07205(); /* move header information to screen*/
    ;
    KL07206(); /* edit screen to expand code*/
    ;
    if (KL07W01.OP1CUOID != 0)
      KL07M010.OP1CUOID = KL07W01.OP1CUOID;
      KL07M010.OP1NORID = KL07W01.OP1NORID;
    end
    ;
    if (KL07M010.YITCD == " ")
      CLXREC.CLXYITX = 6;
    else
      if (KL07M010.YITCD in YITTBL.YITCD)
        CLXREC.CLXYITX = sysVar.arrayIndex;
      /* IF YITTBL.XXXSTAT(EZETST) = 'A';/* if row is active*/
      /* ELSE;*/
                                  /* MOVE 128 TO EZEMNO;        /**/
                                   /* invoice/order indicator is not valid*/
        /* SET KL07M010.YITCD CURSOR,BRIGHT;*/
      /* END;*/
      end
      if (KL07M010.YITCD == "I"
       || KL07M010.YITCD == "N")
        KL07M010.YITCD = " ";
      end
    end
  end
  ;
  ;
  CLXREC.CLXBLDSC = "N";
  CLXREC.CLXERRF = "N";
  KL07M010.VAGen_EZEMSG = CLXREC.CLXMSG;
  ;
  converse KL07M010 ;
  ;
  if (converseVar.eventKey is enter)
    /* NEXT SENTENCE*/
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
    else
      if (converseVar.eventKey is pf2) /* rtn to primary scrn kl07m001*/
        KL07W01.KL07W-INQX = 0; /* set index to break out of loop*/
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf7) /* if already at first clm # loaded err*/
                            /* NOTE: first clm select by user was*/
                            /* loaded as last entry in tbl.*/
              if (KL07W01.KL07W-INQX == KL07W01.KL07W-INQ-CLM-CT)
                converseLib.validationFailed(7);
              else /* back up one clm in tbl*/
                KL07W01.KL07W-INQX = KL07W01.KL07W-INQX + 1;
              end
            else
              if (converseVar.eventKey is pf8)
                if (KL07W01.KL07W-INQX == 1)
                  converseLib.validationFailed(3);
                else
                  KL07W01.KL07W-INQX = KL07W01.KL07W-INQX - 1;
                end
              else
                if (converseVar.eventKey is pf9)
                  if (KL07W01.KL07W-INQX == KL07W01.KL07W-INQ-CLM-CT)
                    converseLib.validationFailed(7);
                  else
                    KL07W01.KL07W-INQX = KL07W01.KL07W-INQ-CLM-CT;
                  end
                else
                  if (converseVar.eventKey is pf10)
                    if (KL07W01.KL07W-INQX == 1)
                      converseLib.validationFailed(3);
                    else
                      KL07W01.KL07W-INQX = 1;
                    end
                  else
                    COMMAREA.CATOAP = " ";
                    converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                    KL07W01.KL07W-ERR-FL = "Y";
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end KL07200

// move header info to screen
Function KL07205()
   /* *************************************************************/
   /* * Note: this is a clone of kl0e105. 10/19/97               **/
   /* *************************************************************/
   /* *   move header information to screen                      **/
   /* *                                                          **/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *   1. phase (B) enhancements:                             **/
   /* *      added logic to move proper quantitites to the       **/
   /* *      claim fields                                        **/
   /* *  07-13-90  sgorga  Added code - If acct class code = 21, **/
   /* *                    clm type = 'DAA' or 'ADJ', and G/L =  **/
   /* *                    253, use default agncy/rep 'NATA/600'.**/
   /* *  10-12-90 BCOURT Change XCGCD to OP1COGID.               **/
   /* *                change XCUCD(3) to XCECD, except on CLAREC**/
   /* *  04-16-91  sgorga  Removed the 7-13-90 'DAA'/'ADJ' code. **/
   /* *                    It was decided that in Inquiry the    **/
   /* *                    agency/rep shown on the screen should **/
   /* *                    reflect what is on the claim header.  **/
   /* *************************************************************/
   /* *  10-19-97  PPERK1  cloned from kl0e105 and change item   **/
   /* *                    and process names.                    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07205"; /* set current process name*/
  ;
  KL07M010.CLACLMNB = VCLHDR02.CLACLMNB;
  ;
   /* *********************************************************/
   /* *   1. phase (B) enhancements:*/
   /* *      added logic to move proper quantitites to the*/
   /* *      claim fields*/
   /* *********************************************************/
  ;
  KL07M010.CLAESTVL = VCLHDR02.CLAESTVL;
  KL07M010.CLATQTY = VCLHDR02.CLATQTY;
  ;
  if (KL07W01.KL07WHRA == "Y")
    CLXREC.XXXWDTE = CLJREC.CLJRAXDT;
    KL07M010.CLJRAXDT = CLXREC.XXXWYMD;
  end
  ;
   /* *********************************************************/
   /* *   1. phase (B) enhancements ---  end  --*/
   /* *********************************************************/
  ;
  KL07M010.YCSCD = VCLHDR02.YCSCD1; /* claim status*/
  KL07W01.YCSCD = VCLHDR02.YCSCD1; /* claim status*/
  KL07M010.CLASCGBY = VCLHDR02.CLASCGBY;
  KL07M010.KUCCOID = VCLHDR02.KUCCOID; /* company id*/
  KL07M010.KUMSTRID = VCLHDR02.KUMSTRID; /* store id*/
  KL07M010.XNXCD = VCLHDR02.XNXCD; /* dept*/
  KL07M010.OP1CMPNB = VCLHDR02.OP1CMPNB; /* comp-co id*/
  KL07M010.OP1COGID = VCLHDR02.OP1COGID; /* cogs code*/
  ;
  if (VCLHDR02.KUCCOID != 0)
    if (VCLHDR02.KUCCOID == CLWREC.KUCCOID /* move legal entity cd*/
     && CLWREC.XLECD != "  "               
     && CLWREC.XLEABRV != "      ")       
      KL07M010.XLEABRV = CLWREC.XLEABRV;
    else
      KUCREC.KUCCOID = VCLHDR02.KUCCOID;
      KL07S70(); /* get company record, update clwrec & map*/
      KL07M010.XLEABRV = CLWREC.XLEABRV;
    end
  end
  KL07M010.CLACTCNM = VCLHDR02.CLACTCNM;
  KL07M010.XIECD = VCLHDR02.XIECD;
  KL07M010.CLAOCAMT = VCLHDR02.CLAOCAMT;
  KL07M010.XGPCD = VCLHDR02.XGPCD; /* GPC CODE*/
  KL07M010.YCTCD = VCLHDR02.YCTCD; /* CLAIM TYPE*/
  KL07M010.XDVCD = VCLHDR02.XDVCD; /* DIVISION CODE*/
  KL07M010.XBCCD = VCLHDR02.XBCCD; /* BRAND CODE*/
  KL07M010.OP1CMPNB = VCLHDR02.OP1CMPNB; /* COMP CO ID*/
  if (VCLHDR02.XBCCD in XBCTBL.XBCCD)
    KL07M010.XBCABRV = XBCTBL.XBCABRV;
  else
    KL07M010.XBCABRV = "NOTFND";
  end
  ;
  KL07M010.YCRCD = VCLHDR02.YCRCD;
  KL07M010.OP1CUPO = VCLHDR02.OP1CUPO;
  KL07M010.XWHCD = VCLHDR02.XWHCD;
  KL07M010.XPTCD = VCLHDR02.XPTCD;
  KL07M010.SP1ID = VCLHDR02.SP1ID;
  KL07M010.XOBCD = VCLHDR02.XOBCD;
  KL07M010.XOCCD = VCLHDR02.XOCCD;
  KL07M010.XSOCD = VCLHDR02.XSOCD;
  KL07M010.XCECD = VCLHDR02.XCECD;
  KL07M010.CL-TAKEN-BY-ID = VCLHDR02.CL-TAKEN-BY-ID;
  ;
            /* * Show Agency/Rep on Map in Inquiry Mode **/
   /* This process is executed BEFORE the converse of the map,*/
   /* when first entering the KL07 application.*/
   /* The agency/rep that appears on the KL07M010 screen is*/
   /* taken from the claim header, CLAREC.*/
  ;
  KL07W01.KL07WAGY = VCLHDR02.SM1AGYID; /* move agency from clarec*/
  KL07W01.KL07WREP = VCLHDR02.SM4REPID; /* move rep from clarec*/
  KL07W01.KL07WF1 = "/";
  KL07M010.KL07WARP = KL07W01.KL07WARP; /* move agency/rep to map*/
                /* * End Agency/Rep **/
  ;
  CLXREC.XXXWDTE = VCLHDR02.CLASTTDT;
  KL07M010.KL07WSDT = CLXREC.XXXWYMD;
  ;
  CLXREC.XXXWDTE = VCLHDR02.CLASETDT;
  KL07M010.XXXSDT = CLXREC.XXXWYMD;
  ;
  if (VCLHDR02.CLADNLDT > 0)
    CLXREC.XXXWDTE = VCLHDR02.CLADNLDT;
    KL07M010.KL07WLDT = CLXREC.XXXWYMD;
  end
  ;
  if (VCLHDR02.CLACCLDT > 0)
    CLXREC.XXXWDTE = VCLHDR02.CLACCLDT;
    KL07M010.KL07WCDT = CLXREC.XXXWYMD;
  end
  ;
end // end KL07205

// edit fields to expand codes
Function KL07206()
   /* ************************************************************/
   /* *                                                         **/
   /* ************************************************************/
   /* *   edit screen fields to expand codes                    **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *     phase (B) enhancement: checking the work sheet      **/
   /* *     entered flag to get user name                       **/
   /* *  12-06-89  chellm Added new PROC CL0E117 to format      **/
   /* *              both the Auth By Name and Prev Auth Name.  **/
   /* *  6-14-90 bcourt improve description when agency/rep name**/
   /* *     is missing.                                         **/
   /* *  11-30-90  sgorga  'Not Found' was incorrectly moved to **/
   /* *              cl0em001.clatbynm. Chgd to cl0ew01.xxxusrid**/
   /* *  08-23-91  chellm  added CL0ES-GET-PHN-NBR              **/
   /* *  01-13-92  sgorga  Setting ta1rec empty just before     **/
   /* *       xsivsn1 is called, which calls xsivsn2, which     **/
   /* *       uses ta1rec.                                      **/
   /* *  04-17-92  bcourt  Rename SM5STAT to XXXSTAT.           **/
   /* *  06-12-92  twatso  clatbyid became the commarea.userid  **/
   /* *  04-14-99  GDECKE  REMOVE KL07S47 - DONT NEED TO EDIT DT**/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07206"; /* set current process name*/
  ;
  ;
  if (KL07M010.YCSCD in YCSTBL.YCSCD)
    KL07M010.YCSSDESC = YCSTBL.YCSSDESC[sysVar.arrayIndex];
    CLXREC.CLXYCSX = sysVar.arrayIndex;
  else
   /* MOVE 71 TO EZEMNO;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    KL07M010.YCSSDESC = "NOT FOUND";
  end
  ;
  if (KL07M010.YCTCD in YCTTBL.YCTCD)
    KL07M010.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
    CLXREC.CLXYCTX = sysVar.arrayIndex;
  else
   /* MOVE 87 TO EZEMNO;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    KL07M010.YCTABRV = "NOTFND";
  end
  ;
  ;
   /* ************************************************************/
   /* *      get the division code abbreviation                 **/
   /* ************************************************************/
  ;
  if (KL07M010.XDVCD in XDVTBL.XDVCD)
    KL07M010.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
  else
   /* MOVE 580 TO EZEMNO;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    KL07M010.XDVABRV = "NOTFND";
  end
  ;
   /* ************************************************************/
   /* *      get the brand code abbreviation                    **/
   /* ************************************************************/
  ;
  if (KL07M010.XBCCD in XBCTBL.XBCCD)
    KL07M010.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (KL07M010.XBCCD == "  ")
      KL07M010.XBCABRV = "N/A   ";
    else
     /* MOVE 615 TO EZEMNO;*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      KL07M010.XBCABRV = "NOTFND";
    end
  end
  ;
  ;
  if (KL07M010.YCRCD in YCRTBL.YCRCD)
    KL07M010.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  else
   /* MOVE 88 TO EZEMNO;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    KL07M010.YCRSDESC = "NOT FOUND";
  end
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  KL07S66(); /* edit exception flag*/
  ;
  KL07S63(); /* find if addl ar/cust clm recs exist*/
  ;
  KL07S64(); /* edit a/r status code*/
  ;
  KL07S65(); /* expand rtn auth code*/
  ;
   /* get cust phone number*/
  KL07S-GET-PHN-NBR();
  ;
   /* ************************************************************/
   /* *      get the order class abbreviation                    **/
   /* ************************************************************/
  ;
  if (KL07M010.XOCCD != " ")
    if (KL07M010.XOCCD in XOCTBL.XOCCD) /* if ord class code in table*/
      KL07M010.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
      KL07W02.XOCCD = KL07M010.XOCCD;
    else
     /* MOVE 97 TO EZEMNO;           /* invalid order class code*/
      KL07M010.XOCABRV = "NOT FOUND";
     /* MOVE 'Y' TO CLXREC.CLXERRF;  /* screen has an edit error*/
    end
  else
    KL07M010.XOCCD = " ";
    KL07W02.XOCCD = " ";
    KL07M010.XOCABRV = " ";
  end
  ;
   /* ************************************************************/
   /* *      get the base order type abbreviation                    **/
   /* ************************************************************/
  ;
  if (KL07M010.XOBCD != " ")
    if (KL07M010.XOBCD in XOBTBL.XOBCD)
                                   /* if order type code is in table*/
      KL07M010.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
      KL07W02.XOBCD = KL07M010.XOBCD;
    else
     /* MOVE 96 TO EZEMNO;           /* invalid order type*/
      KL07M010.XOBABRV = "NOT FOUND";
     /* MOVE 'Y' TO CLXREC.CLXERRF;  /* screen has an edit error*/
    end
  else
    KL07M010.XOBCD = " ";
    KL07M010.XOBABRV = " ";
    KL07W02.XOTCD = " ";
    KL07W02.XOBCD = " ";
  end
  ;
  ;
   /* ************************************************************/
   /* *      get the sales program abbreviation                 **/
   /* ************************************************************/
  ;
  ;
  if (KL07M010.SP1ID != " ")
    SP1REC.SP1ID = KL07M010.SP1ID;
    set SQLCA empty;
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
                                   /* get sales program record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07M010.SP1ABRV = SP1REC.SP1ABRV;
      KL07W02.SP1ID = KL07M010.SP1ID;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
       /* MOVE 95 TO EZEMNO;         /* invalid sales program*/
        KL07M010.SP1ABRV = "NOT FOUND";
       /* MOVE 'Y' TO CLXREC.CLXERRF;/* yes, there is an err*/
      else
        TA1REC.TA1TBLKE = "GETTING SALES PROGRAM ABRV";
        TA1REC.TA1DBASE = "DSPGM";
        TA1REC.TA1TBLVU = "VSPGM001";
        TA1REC.TA1LOCAT[2] = "KL07106";
        TA1REC.TA1LOCAT[4] = KL07M010.SP1ID;
        XPCL010(); /* abend*/
      end
    end
  else
    KL07M010.SP1ABRV = " ";
    KL07M010.SP1ID = " ";
    KL07W02.SP1ID = " ";
  end
  ;
   /* ************************************************************/
   /* *      get the terms code                                **/
   /* ************************************************************/
  ;
  if (KL07M010.XPTCD != " ") /* if terms were entered*/
    if (KL07M010.XPTCD in XPTTBL.XPTCD) /* if terms code is in table*/
      KL07M010.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      KL07W02.XPTCD = KL07M010.XPTCD;
    else
      KL07M010.XPTABRV = "??????";
    end
  end
  ;
   /* ************************************************************/
   /* *      get the ship warehouse abbreviation               **/
   /* ************************************************************/
  ;
  if (KL07M010.XWHCD != " ") /* if warehouse is entered*/
    if (KL07M010.XWHCD in XWHTBL.XWHCD) /* if warehouse is valid*/
      KL07M010.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      KL07W02.XWHCD = KL07M010.XWHCD;
    else
     /* MOVE 400 TO EZEMNO;          /* invalid warehouse code*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;  /* there is an error*/
      KL07M010.SP1ABRV = "NOT FOUND";
    end
  else
    KL07M010.XWHCD = " ";
    KL07M010.XWHABRV = " ";
    KL07W02.XWHCD = " ";
  end
  ;
  ;
   /* ************************************************************/
   /* find if addl ivc nbrs exist*/
  KL07S55();
   /* ************************************************************/
  ;
  KL07M010.XGPCD = VCLHDR02.XGPCD;
  if (KL07M010.XGPCD in XGPTBL.XGPCD) /* if a valid product class*/
    KL07M010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    KL07W02.XGPCD = KL07M010.XGPCD;
  else
    KL07M010.XGPABRV = "UNKNOWN";
   /* MOVE 'Y' TO CLXREC.CLXERRF;    /* screen validation failed*/
  end
  ;
  ;
  KL07M010.KL07WCDT = CLXREC.XXXWYMD;
    /* KL07S47;                         /* edit cust claim date*/
  ;
  KL07S43(); /* edit customer number*/
  ;
  ;
  if (VCLHDR02.CLAWSENF == "Y") /* phase (B) enhancement*/
     /* next sentence*/
  else
    if (VCLHDR02.CLYATHID == 0)
      KL07M010.KL07WANM = " "; /* no auth-by name*/
      if (VCLHDR02.CLAPRATH != 0) /* begin (12-6-89) changes*/
        set KL07M010.KL07ML10 initialAttributes;
        set KL07M010.KL07WPNM initialAttributes;
        set CLYREC empty;
        CLYREC.CLYATHID = VCLHDR02.CLAPRATH;
        ;
        KL07217(); /* format name from prior auth ID*/
        ;
        KL07M010.KL07WPNM = IVZREC.IVZFNAME;
        ;
      else
        set KL07M010.KL07ML10 skip, invisible;
        set KL07M010.KL07WPNM skip, invisible;
      end
    else
      set KL07M010.KL07ML10 skip, invisible;
      set KL07M010.KL07WPNM skip, invisible;
      KL07M010.KL07WPNM = " "; /* no prior auth-by name*/
      set CLYREC empty;
      CLYREC.CLYATHID = VCLHDR02.CLYATHID;
      ;
      KL07217(); /* format name from auth by ID*/
      ;
      KL07M010.KL07WANM = IVZREC.IVZFNAME;
      ;
    end
  end
  ;
  ;
  if (VCLHDR02.CLACMIND == "N" /* no comments exist*/
   || VCLHDR02.CLACMIND == " ") /* no comments exist*/
    KL07M010.KL07WCD = "NONE";
  else /* find out which ones exist*/
    ;
    KL07M010.KL07WCD = " ";
    CLXREC.CLXLINEX = 1; /* index for comment field on screen*/
    ;
    CLGREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    CLGREC.CLGCMTYP = "C"; /* look for claim comments*/
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.KL07WCDX[CLXLINEX] = " C";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    ;
    CLGREC.CLGCMTYP = "M"; /* look for memo comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.KL07WCDX[CLXLINEX] = " M";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    ;
    CLGREC.CLGCMTYP = "R"; /* look for R/A comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.KL07WCDX[CLXLINEX] = " R";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    ;
    CLGREC.CLGCMTYP = "D"; /* look for defective comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.KL07WCDX[CLXLINEX] = " I";
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    ;
    CLGREC.CLGCMTYP = "I"; /* look for inspection comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.KL07WCDX[CLXLINEX] = " I";
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (CLXREC.CLXLINEX == 1) /* only have comment for g/l's*/
      KL07M010.KL07WCD = "NONE";
    end
    ;
    KL07M010.KL07WCD = KL07W01.KL07WCD;
  end
  ;
   /* ************************************************************/
                    /* get credit analyst name*/
  KL07S84();
  ;
   /* ************************************************************/
  ;
   /* ************************************************************/
   /* *      get the sales agency/sales rep information         **/
   /* ************************************************************/
  ;
  set SM4REC empty;
  set SM5REC empty;
  SM5REC.SM1AGYID = VCLHDR02.SM1AGYID;
  SM5REC.SM4REPID = VCLHDR02.SM4REPID;
  SM4REC.SM4REPID = VCLHDR02.SM4REPID;
  SM5REC.XXXSTAT = "*"; /* 4-17-92*/
  SM5REC.SM5EDT = -1;
  ;
  set TA1REC empty; /* for use in xsivsn2, which is called*/
                                   /* in -sn1*/
  XSIVSN4(); /* get and format salesman name*/
  ;
  KL07M010.KL07WRNM = IVZREC.IVZFNAME;
  ;
  if (KL07M010.KL07WRNM == "******* REP/AGENCY N") /* 6-14-90 new*/
    KL07M010.KL07WRNM = "* NAME MISSING *";
  end
  ;
   /* ************************************************************/
   /* get taken-by rep name*/
   /* 06-12-92 twatso changed code to use commarea userid to go to*/
   /* the kuyrec with name not a number (changed iomod use to 'sa' from 's'*/
   /* 07-15-92 added message if sqlca = 100*/
   /* ************************************************************/
  ;
  set KUYREC empty;
  set SQLCA empty;
  KUYREC.XXXUSRID = KL07M010.CL-TAKEN-BY-ID; /* chg 06-08-92*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* cust service rep record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    KL07M010.CLATBYNM = KUYREC.KUYREPNM;
    KL07W02.CL-TAKEN-BY-ID = KUYREC.XXXUSRID; /* chg 06-08-92*/
    if (VCLHDR02.CLAORIGI == "T") /* if claim originated on kl0t*/
      KL07M010.CLATBYNM = "FOR C & R DEPT";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL07M010.CLATBYNM = " ";
     /* MOVE 'Y' TO CLXREC.CLXERRF;  /* screen validation failed*/
      if (VCLHDR02.CLAORIGI == "T") /* if claim originated on kl0t*/
        KL07M010.CLATBYNM = "FOR C & R DEPT";
      end
    else
      TA1REC.TA1TBLKE = "GETTING TAKEN-BY REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "KL07S206";
      XPCL010();
    end
  end
  ;
   /* ************************************************************/
          /* get coop-analyst code*/
   /* ************************************************************/
  ;
  KL07S86();
  set KUYREC empty;
  ;
  KUYREC.KUYSVRID = VCLHDR02.KUYSVRID;
  ;
  set SQLCA empty;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* cust service rep record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    KL07W01.KUYREPNM = KUYREC.KUYREPNM;
    KL07W01.XXXUSRID = KUYREC.XXXUSRID;
    KL07W02.KUYSVRID = KUYREC.KUYSVRID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL07W01.KUYREPNM = "NOT FOUND"; /* 11-30-90 slg*/
      KL07W01.KL07WUSR = KUYREC.KUYSVRID; /* show sv rep# not found! slg*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    else
      TA1REC.TA1TBLKE = "GETTING CUST SVC REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "KL07S106";
      XPCL010(); /* abend*/
    end
  end
  ;
   /* ************************************************************/
          /* set up screen cust svc/coop analyst*/
  KL07S80();
  ;
  KL07M010.XSOCD = VCLHDR02.XSOCD;
  ;
  if (KL07M010.XSOCD in XSOTBL.XSOCD)
    KL07M010.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
    KL07W02.XSOCD = XSOTBL.XSOCD[sysVar.arrayIndex];
  else
    KL07M010.XSOABRV = "NOT FOUND";
  end
  ;
   /* ************************************************************/
   /* get territory name*/
  KL07S85();
  ;
   /* ************************************************************/
   /* edit cr denial letter date*/
  KL07S41();
  ;
end // end KL07206

// define top portion of screen
Function KL07207()
   /* ************************************************************/
   /* *   set 1st four lines of screen defined so that they     **/
   /* *      will display.                                      **/
   /* *   maintenance:                                          **/
   /* *   1. phase (B) enhancements                             **/
   /* *      to display proper title depending upon the claim   **/
   /* *      having returns or not                              **/
   /* *                                                         **/
   /* *  NOTE: this is a clone of kl0e107                       **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *    DATE    PGMR    DESCRIPTION                          **/
   /* *---------------------------------------------------------**/
   /* *  02-15-91  CHELLM  Renamed CLAXOPNF to CLAXCIND.        **/
   /* *  10-21-93  GDECKE  Fix bad ref. to stat-cd2:alias=ycscd.**/
   /* *                                                         **/
   /* *  10-19-97  PPERK1  cloned from kl0e107 and changed      **/
   /* *                    item names.                          **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07207"; /* set current process name*/
  ;
  set KL07M010.KL07ML1 initialAttributes;
  set KL07M010.KL07ML2 initialAttributes;
  set KL07M010.KL07ML3 initialAttributes;
  ;
   /* ************************************************************/
   /* *   1. phase (B) enhancements                             **/
   /* *      to display proper title depending upon the claim   **/
   /* *      having returns or not                              **/
   /* ************************************************************/
  ;
  KL07M010.KL07ML2 = "Clm Value";
  KL07M010.KL07ML3 = "TTL Qty";
  ;
  if (CLWREC.CLWMNOPT == 2
   || CLWREC.CLWMNOPT == 6)
    if (VCLHDR02.YCSCD1 != "CMP")
      KL07M010.KL07ML2 = "Auth Value";
      KL07M010.KL07ML3 = "Auth Qty";
    end
  end
  ;
  set KL07M010.KL07ML4 initialAttributes;
  set KL07M010.KL07ML5 initialAttributes;
  set KL07M010.KL07ML6 initialAttributes;
  set KL07M010.KL07ML7 initialAttributes;
  ;
  ;
  if (VCLHDR02.CLAXCIND == "Y") /* phase (B) enhancement*/
    set KL07M010.KL07ML8 initialAttributes;
  else
    set KL07M010.KL07ML8 skip, invisible;
  end
  ;
  ;
  set KL07M010.CLACLMNB initialAttributes;
  set KL07M010.CLAESTVL initialAttributes;
  set KL07M010.CLATQTY initialAttributes;
  set KL07M010.YCSCD initialAttributes;
  set KL07M010.XDVCD initialAttributes;
  set KL07M010.XBCCD initialAttributes;
  set KL07M010.YCSSDESC initialAttributes;
  set KL07M010.KL07WSDT initialAttributes;
  set KL07M010.CLASCGBY initialAttributes;
  set KL07M010.KL07WLDT initialAttributes;
  set KL07M010.KL07WANM initialAttributes;
  set KL07M010.XXXSDT initialAttributes;
  set KL07M010.CLAXCIND initialAttributes;
  ;
end // end KL07207

// protect all screen fields
Function KL07209()
   /* ************************************************************/
   /* * Note: this is a clone of kl0e109 - 10/19/97             **/
   /* ************************************************************/
   /* *   protect all screen fields except claim number         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *    DATE   PGMR   DESCRIPTION                            **/
   /* *---------------------------------------------------------**/
   /* *  08/10/90 chellm added OP1CMPNB to the fields protected.**/
   /* *  10-28-91 twatso added code for osd for installation in **/
   /* *                  Dec. 91                                **/
   /* *  10-22-93 GDECKE  REMOVE OVERLAPPING MOVE STMT.         **/
   /* ************************************************************/
   /* *                                                         **/
   /* *  10-19-97 PPERK1  cloned from kl0e109 and changed item  **/
   /* *                   and process names.                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07209"; /* set current process name*/
  ;
  set KL07M010.KL07WLDT skip;
  set KL07M010.KUCCOID skip;
  set KL07M010.KUMSTRID skip;
  set KL07M010.OP1CMPNB skip; /* 08-10-90 added*/
  set KL07M010.XNXCD skip;
  set KL07M010.CLACTCNM skip;
  set KL07M010.XIECD skip;
  set KL07M010.CLAOCAMT skip;
  set KL07M010.KL07WCDT skip;
  set KL07M010.XGPCD skip;
  set KL07M010.XDVCD skip;
  set KL07M010.XBCCD skip;
  set KL07M010.YCTCD skip;
  set KL07M010.YCRCD skip;
  set KL07M010.YRC-RT-CSE-CD skip;
  set KL07M010.ARCCCREF skip;
  set KL07M010.KL07WACF skip;
  set KL07M010.OP1CUPO skip;
  set KL07M010.IV0IVCID skip;
  set KL07M010.YITCD skip;
  set KL07M010.XWHCD skip;
  set KL07M010.OP1CUOID skip;
  set KL07M010.OP1NORID skip;
  set KL07M010.XPTCD skip;
  set KL07M010.SP1ID skip;
  set KL07M010.XOBCD skip;
  set KL07M010.XOCCD skip;
  set KL07M010.ARCREFNB skip;
  set KL07M010.KL07WAAF skip;
  set KL07M010.YASCD skip;
  set KL07M010.XXXUSRID skip;
  ;
  ;
  if (KL07M010.YCTCD == "RTS"
   || KL07M010.YCTCD == "DEF"
   || KL07M010.YCTCD == "CDR"
   || KL07M010.YCTCD == "OSD"
   || KL07M010.YCTCD == "DFO"
   || KL07M010.YCTCD == "RFL")
    set KL07M010.CLYATHPW skip;
  else
    set KL07M010.CLYATHPW skip, invisible;
  end
  ;
end // end KL07209

// format auth name
Function KL07217()
   /* ************************************************************/
   /* *   Format the authorization last name, first name        **/
   /* *                                                         **/
   /* *  Maintenance History: (KL0E117)                         **/
   /* *  --------------------                                   **/
   /* *  1. 12-6-89 chellm created.                             **/
   /* ************************************************************/
   /* *  NOTE: this process is a clone of kl0e117 10/19/97      **/
   /* *                                                         **/
   /* *  Maintenance History: (KL07217)                         **/
   /* *  --------------------                                   **/
   /* *  1. 12-6-89 chellm created.                             **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07217"; /* set current process name*/
  ;
  ;
  set SQLCA empty;
  ;
  call "IO2650" ("SA", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    ;
     /* need to format name*/
    SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
    SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
    SM4REC.XXXMDINT = CLYREC.XXXMDINT;
    XSIVSN6(); /* format name*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      IVZREC.IVZFNAME = "NOT ON FILE";
    else
      TA1REC.TA1TBLKE = "GETTING AUTH-BY REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "KL07S106";
      XPCL010(); /* abend*/
    end
  end
  ;
end // end KL07217

// BUILD SCR 1 DETAIL LINES
Function KL07S-BLD-MAP1-LN()
   /* *************************************************************/
   /* * Populate fields on primary screen KL07M001.              **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-BLD-MAP1-LN";
  ;
  ;
  if (KL07W01.KL07W-TOT-TRANS-COUNT > 0)
    KL07W01.KL07W-FCT-CD = KL07WCLM.AR-WROF-ACT-CD[KL07W-CLX1];
    ;
    if (KL07WCLM.AR-WROF-STAT-CD[KL07W-CLX1] == "W"
     || KL07WCLM.AR-WROF-STAT-CD[KL07W-CLX1] == "H")
      KL07W01.KL07W-OITM-IND = KL07WCLM.AR-WROF-STAT-CD[KL07W-CLX1];
    else
      KL07W01.KL07W-OITM-IND = " ";
    end
    ;
    KL07M001.KL07M-FCT-CD-OITM-IND[KL07W-LINEX] = KL07W01.KL07W-FCT-CD-OITM-IND;
    ;
    KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
    ;
    KL07M001.KL07M-DTL-CL-STAT-CD[KL07W-LINEX] = KL07WCLM.YCS-CLM-STAT-CD1[KL07W-CLX1];
    KL07M001.KL07M-DTL-CU-CO-ID[KL07W-LINEX] = KL07WCLM.CU-CO-ID[KL07W-CLX1];
    KL07M001.KL07M-DTL-AR-REF-NBR[KL07W-LINEX] = KL07WCLM.AR-REF-NBR[KL07W-CLX1];
    KL07M001.KL07M-DTL-AR-AMT[KL07W-LINEX] = KL07WCLM.AR-AR-AMT[KL07W-CLX1];
    KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1];
    KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1];
    KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] = KL07WCLM.AR-CUST-CLM-REFNBR[KL07W-CLX1];
    KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] = KL07WCLM.IV-IVC-ID[KL07W-CLX1];
    KL07M001.KL07M-DAYS-IN-SUSPENSE[KL07W-LINEX] = KL07WCLM.KL07W-DAYS-IN-SUSPENSE[KL07W-CLX1];
    ;
  end
end // end KL07S-BLD-MAP1-LN
// BLD SCREEN M005 LINES
Function KL07S-BLD-MAP2-LN()
   /* *************************************************************/
   /* *  Populate fields on secondary screen KL07M005.           **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-BLD-MAP2-LN";
  ;
   /* if no records returned don't try to build map2*/
  ;
  if (KL07W01.KL07W-TOT-TRANS-COUNT > 0)
    KL07M005.KL07M-DTL-CU-CO-ID[KL07W-LINEX] = KL07WCLM.CU-CO-ID[KL07W-CLX1];
    KL07M005.KL07M-DTL-AR-REF-NBR[KL07W-LINEX] = KL07WCLM.AR-REF-NBR[KL07W-CLX1];
    KL07M005.KL07M-DTL-AR-AMT[KL07W-LINEX] = KL07WCLM.AR-AR-AMT[KL07W-CLX1];
    KL07M005.KL07M-DTL-CUST-PO[KL07W-LINEX] = KL07WCLM.OP-CUST-PO[KL07W-CLX1];
    KL07M005.KL07M-DTL-CK-NBR[KL07W-LINEX] = KL07WCLM.AR-CUST-CK-NBR[KL07W-CLX1];
    ;
    KL07W01.KL07W-FMT1-DT = KL07WCLM.AR-CK-DT[KL07W-CLX1];
    KL07S-FMT-CCYYMMDD();
    KL07M005.KL07M-DTL-AR-CK-DT[KL07W-LINEX] = KL07W01.KL07W-FMT2-DT;
    ;
    KL07W01.KL07W-DTL-OITM-SRCE = "    ";
    KL07W01.KL07W-DTL-OITM-BANK = KL07WCLM.AR-OITM-LKBX-CD[KL07W-CLX1];
    KL07W01.KL07W-DTL-OITM-DEP-NBR = KL07WCLM.AR-OITM-DEP-NBR[KL07W-CLX1];
    KL07M005.KL07M-DTL-OITM-DEP-NBR[KL07W-LINEX] = KL07W01.KL07W-DTL-OITM-SRCE;
    ;
    KL07M005.KL07M-DTL-OITM-BATCH-NBR[KL07W-LINEX] = KL07WCLM.AR-OITM-BATCH-NBR[KL07W-CLX1];
    ;
    KL07W01.KL07W-DTL-OITM-COLSQ-NBR = 000;
    KL07W01.KL07W-DTL-OITM-COLSQ-NBR = KL07WCLM.AR-OITM-COLSQ-NBR[KL07W-CLX1];
    KL07M005.KL07M-DTL-OITM-COLSQ-NBR[KL07W-LINEX] = KL07W01.KL07W-DTL-OITM-COLSQ-NBR;
    ;
  end
end // end KL07S-BLD-MAP2-LN

// MOVE VWOSUS01 FIELDS
Function KL07S-BUILD-ARRAY()
   /* *************************************************************/
   /* *  Save fields retrieved from the claim in suspense        **/
   /* *  database VWOSUS01 to an array in working storage        **/
   /* *  KL07WCLM.                                               **/
   /* *                                                          **/
   /* *----------------------------------------------------------**/
   /* *   M A I N T E N A N C E     H I S T O R Y     L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* *----------------------------------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* * 03-17-98   GDECKE     CHANGE STMT GRP XSCLSDY TO KL07S-  **/
   /* *                       GET-DAY-DIFF                    -  **/
   /* *************************************************************/
  ;
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-BUILD-ARRAY";
                                  /* Set current process name*/
  ;
  KL07WCLM.CL-CLM-NBR[KL07W-CLX1] = VWOSUS01.CL-CLM-NBR;
  KL07WCLM.AR-REF-NBR[KL07W-CLX1] = VWOSUS01.AR-REF-NBR;
  KL07WCLM.AR-CUST-CK-NBR[KL07W-CLX1] = VWOSUS01.AR-CUST-CK-NBR;
  KL07WCLM.AR-CK-DT[KL07W-CLX1] = VWOSUS01.AR-CK-DT;
  KL07WCLM.AR-CUST-CLM-REFNBR[KL07W-CLX1] = VWOSUS01.AR-CUST-CLM-REFNBR;
  KL07WCLM.AR-AR-AMT[KL07W-CLX1] = VWOSUS01.AR-AR-AMT;
  KL07W01.KL07W-TOT-TRANS-AMT = mathLib.round(VWOSUS01.AR-AR-AMT + KL07W01.KL07W-TOT-TRANS-AMT, -mathLib.decimals(KL07W01.KL07W-TOT-TRANS-AMT));
  KL07WCLM.IV-IVC-ID[KL07W-CLX1] = VWOSUS01.IV-IVC-ID;
  KL07WCLM.CU-CO-ID[KL07W-CLX1] = VWOSUS01.CU-CO-ID;
  KL07WCLM.AR-OITM-TRN-DT[KL07W-CLX1] = VWOSUS01.AR-OITM-TRN-DT;
  KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1] = VWOSUS01.YCR-CLM-RSN-CD;
  KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1] = VWOSUS01.YRC-RT-CSE-CD;
  KL07WCLM.AR-OITM-LKBX-CD[KL07W-CLX1] = VWOSUS01.AR-OITM-LKBX-CD;
  KL07WCLM.AR-OITM-DEP-NBR[KL07W-CLX1] = VWOSUS01.AR-OITM-DEP-NBR;
  KL07WCLM.AR-OITM-BATCH-NBR[KL07W-CLX1] = VWOSUS01.AR-OITM-BATCH-NBR;
  KL07WCLM.AR-OITM-COLSQ-NBR[KL07W-CLX1] = VWOSUS01.AR-OITM-COLSQ-NBR;
  KL07WCLM.XCE-CR-ANLS-CD[KL07W-CLX1] = VWOSUS01.XCE-CR-ANLS-CD;
  KL07WCLM.OP-CUST-PO[KL07W-CLX1] = VWOSUS01.OP-CUST-PO;
  KL07WCLM.AR-WROF-STAT-CD[KL07W-CLX1] = VWOSUS01.AR-WROF-STAT-CD;
  KL07WCLM.AR-WROF-TRN-CD[KL07W-CLX1] = VWOSUS01.AR-WROF-TRN-CD;
  KL07WCLM.AR-WROF-ACT-CD[KL07W-CLX1] = VWOSUS01.AR-WROF-ACT-CD;
  KL07WCLM.CL-CLM-NBR2[KL07W-CLX1] = VWOSUS01.CL-CLM-NBR2;
  KL07WCLM.ZZ-SDT[KL07W-CLX1] = VWOSUS01.ZZ-SDT;
  KL07WCLM.ZZ-SETUP-HHMM[KL07W-CLX1] = VWOSUS01.ZZ-SETUP-HHMM;
  KL07WCLM.ZZ-CHNG-DT[KL07W-CLX1] = VWOSUS01.ZZ-CHNG-DT;
  KL07WCLM.ZZ-CHNG-HHMM[KL07W-CLX1] = VWOSUS01.ZZ-CHNG-HHMM;
  KL07WCLM.ZZ-CHNG-CNT[KL07W-CLX1] = VWOSUS01.ZZ-CHNG-CNT;
  ;
  /* **** stat cd1 is determined as each record is fetched;*/
  KL07WCLM.YCS-CLM-STAT-CD1[KL07W-CLX1] = KL07W01.YCS-CLM-STAT-CD1;
  ;
  /* **** calculate days in suspense - curr date minus setup date;*/
  KL07S-GET-DAY-DIFF();
  KL07WCLM.KL07W-DAYS-IN-SUSPENSE[KL07W-CLX1] = TA2REC.TA2DBDDN;
  ;
  ;
end // end KL07S-BUILD-ARRAY

// CHECK FOR NKCL # ON CL HDR DB
Function KL07S-CHECK-NKCL()
   /* ************************************************************/
   /* *   This statement group checks that the nike claim       **/
   /* *   number to be used to update claims in suspense        **/
   /* *   records is a valid number on the claims header        **/
   /* *   database.                                             **/
   /* *   In addition, the grp company id is retrieved and      **/
   /* *   stored for later use in edit/validation of the        **/
   /* *   any changes made to nike claim number on the          **/
   /* *   claims in suspense records.                           **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-CHECK-NKCL";
  ;
  set CLAREC empty;
  CLAREC.CLACLMNB = KL07W01.CL-CLM-NBR;
  ;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get the claim header*/
  KL07W01.KUCCOID = CLAREC.KUCCOID;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL07W01.KL07W-ERR-NO240-FL = "N";
    KL07S-GRP-CO-ID(); /* get grp co id from cmpny db*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* claim number not found*/
      KL07W01.KL07W-ERR-NO240-FL = "Y";
      SQLCA.VAGen_SQLCODE = 0;
    else /* fatal db call*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "SELECT";
      TA1REC.TA1TBLKE = "LOOKING FOR CLAIM HEADER  ";
      CLXREC.CLXCPROC = "CK-NKCL"; /* set curr process name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to a num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010();
    end
  end
  ;
  if (KL07W01.KL07W-ERR-NO240-FL == "Y")
    KL07W01.KL07W-ERR-FL = "Y";
    converseLib.validationFailed(0240);
  end
  ;
end // end KL07S-CHECK-NKCL

// EDIT MAP 1 DTL LINE UPDT CLM #
Function KL07S-DTL-CLM-NBR()
   /* *************************************************************/
   /* *   Edits completed prior to this statement group          **/
   /* *   1. if claim nbr entered in scrn header:                **/
   /* *      - valid clm#                                        **/
   /* *      - clm grp id# saved                                 **/
   /* *      - required dtl line fct cd (A or C) entered         **/
   /* *                                                          **/
   /* *   2. if dtl function codes entered:                      **/
   /* *      - valid fct code value                              **/
   /* *      - required hdr field values entered                 **/
   /* *                                                          **/
   /* *   Processing done in this statement group:               **/
   /* *   1. If user accepts warning of different grp id#        **/
   /* *      bypass re-editing. (err # 0795)                     **/
   /* *   2. Get the grp id for the clm# on the curr dtl line    **/
   /* *  3a. For clm# update using hdr clm#                      **/
   /* *      compare hdr clm grp id# to detail clm grp id#       **/
   /* *      warn user if grp co id different.                   **/
   /* *  3b. If grp id# are zero then compare the company#       **/
   /* *  4a. For clm# update on the detail line                  **/
   /* *      compare prev detail clm grp id# to new clm id       **/
   /* *      warn user if grp id different.                      **/
   /* *  4b. If grp id# are zero then compare the company#       **/
   /* *                                                          **/
   /* *   Note: 3 & 4 above should not be able to occur at the   **/
   /* *         same time due to function code edits that are    **/
   /* *         are done in a prior stmt group.                  **/
   /* *----------------------------------------------------------**/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-CLM-NBR";
  ;
  set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] initialAttributes;
  set KL07M001.KL07M-UPDT-CLM-NBR initialAttributes;
  ;
   /* did user choose to accept different grp id#/company #*/
  if (KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] == "Y")
     /* if detail clm# or hdr updt clm# changed again then*/
     /* turn off error flag and redo edits*/
    if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] is modified || 
    KL07M001.KL07M-UPDT-CLM-NBR is modified)
      KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "N";
    else
      KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "N";
      KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0;
      KL07W01.KL07W-DTL-CHG-FL = "Y";
      return;
    end
  end
  ;
  /* get grp id # for dtl clm #*/
  if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] != 0)
    KL07W01.KUCCOID = KL07M001.KL07M-DTL-CU-CO-ID[KL07W-LINEX];
    KL07S-GRP-CO-ID();
    KL07W01.KL07W-DTL-KUCGRPID = KL07W01.KUCGRPID;
  else
    KL07W01.KL07W-DTL-KUCGRPID = 0;
  end
  ;
  /* dtl clm# on scrn same as clm# in array but hdr updt clm# changed*/
  /* then compare grp id # of dtl clm to hdr clm grp id#. If grp id#*/
  /* are zero then compare company #.*/
  if ((KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] == 
  KL07WCLM.CL-CLM-NBR[KL07W-CLX1]) && 
  KL07M001.KL07M-UPDT-CLM-NBR != 0 && 
  (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C" || 
  KL07M001.KL07M-UPDT-FCT-CD[1] == "A"))
     /* compare company #*/
    if (KL07W01.KL07W-UPDT-KUCGRPID == 0 && 
    KL07W01.KL07W-DTL-KUCGRPID == 0)
      if (KL07W01.KL07W-UPDT-KUCCOID != 
      KL07M001.KL07M-DTL-CU-CO-ID[KL07W-LINEX])
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0795;
        set KL07M001.KL07M-UPDT-CLM-NBR cursor, red;
        set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
      end
    else
      /* compare grp id  #*/
      if (KL07W01.KL07W-UPDT-KUCGRPID != KL07W01.KL07W-DTL-KUCGRPID)
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0795;
        set KL07M001.KL07M-UPDT-CLM-NBR cursor, red;
        set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
      end
    end
  end
  ;
  /* determine if dtl Clm# changed by comparing scrn clm# to array clm#*/
  if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] != 
  KL07WCLM.CL-CLM-NBR[KL07W-CLX1] && 
  KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] != 0)
    KL07W01.KL07W-DTL-CHG-FL = "Y";
  /* get the grp id # for the clm nbr entered on the screen detail line*/
    KL07W01.CL-CLM-NBR = KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX];
    KL07S-CHECK-NKCL();
    if (KL07W01.KL07W-ERR-FL == "Y")
      KL07W01.KL07W-ERR-FL = "N";
      KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = converseVar.validationMsgNum;
      KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
      set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
    else
      KL07W01.KL07W-NEW-DTL-KUCGRPID = KL07W01.KUCGRPID;
      KL07W01.KL07W-NEW-DTL-KUCCOID = KL07W01.KUCCOID;
  /* check new clm nbr belongs to same co grp acct as clm nbr in clm array*/
      if (KL07W01.KL07W-DTL-KUCGRPID != KL07W01.KL07W-NEW-DTL-KUCGRPID)
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0795;
        set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
      else
  /* no grp id# then check company #*/
        if ((KL07W01.KL07W-DTL-KUCGRPID == 0 && 
        KL07W01.KL07W-NEW-DTL-KUCGRPID == 0))
          if (KL07W01.KL07W-NEW-DTL-KUCCOID != 
          KL07M001.KL07M-DTL-CU-CO-ID[KL07W-LINEX])
            KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
            KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "Y";
            KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0795;
            set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
          end
        end
      end
    end
  end
end // end KL07S-DTL-CLM-NBR

// EDIT MAP 1 DTL UPDT FCT CD
Function KL07S-DTL-FCT-CD()
   /* *************************************************************/
   /* *                                                          **/
   /* * For each detail line on the currently displayed screen:  **/
   /* *   - check for valid function codes (A,C,D,R,S,X,E,' ')   **/
   /* *----------------------------------------------------------**/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 11-10-97   PPERK1     NEW                                **/
   /* * 06-21-00   SSANK1     ADDED FCT-CD 'E'                   **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-FCT-CD";
  ;
  set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] initialAttributes;
  ;
   /* tcs changes begin  06/21/00*/
  if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == " "
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "A"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "D"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "R"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "S"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "X"
   || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "E")
    ;
   /* tcs changes end    06/21/00*/
        /* if fct cd 'S' then must have valid dtl clm #*/
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "S")
      if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] == 0)
        set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0799;
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
      else
        KL07W01.KL07W-INQ-CLM-NBR[KL07W-INQX] = KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX];
        KL07W01.KL07W-INQ-CLM-CT = KL07W01.KL07W-INQ-CLM-CT + 1;
        KL07W-INQX = KL07W-INQX + 1;
      end
    end
    ;
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] != "S" && 
    KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] != " ")
      KL07W01.KL07W-DTL-CHG-FL = "Y";
    end
    ;
  else /* function code entered was not a valid*/
                                   /* value*/
    set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
    KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0802;
    KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
  end
  ;
  ;
  ;
end // end KL07S-DTL-FCT-CD

Function KL07S-DTL-IVCID()
   /* *************************************************************/
   /* *  Edit/validate any changes made to the detail line       **/
   /* *  iv ivc id field                                         **/
   /* *                                                          **/
   /* *  If iv ivc id changed                                    **/
   /* *  1. allow for update for iv-ivc-id                       **/
   /* *                                                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-21-00   ssank1     NEW                                **/
   /* *************************************************************/

  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-IVCID";
  ;
  set KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] initialAttributes;
  ;
   /* check if iv ivc id changed - MAP & ARRAY values not equal*/
  if (KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] != 
  KL07WCLM.IV-IVC-ID[KL07W-CLX1])
    KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "N";
    KL07W01.KL07W-DTL-CHG-FL = "Y";
  end
end // end KL07S-DTL-IVCID

Function KL07S-DTL-REFNBR()
   /* *************************************************************/
   /* *  Edit/validate any changes made to the detail line       **/
   /* *  ref nbr field.                                          **/
   /* *                                                          **/
   /* *  If ref nbr changed                                      **/
   /* *  1. allow for update of ref nbr                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-21-00   ssank1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-REFNBR";
  ;
  set KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] initialAttributes;
  ;
   /* check if claim ref nbr changed - MAP & ARRAY values not equal*/
  if (KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] != 
  KL07WCLM.AR-CUST-CLM-REFNBR[KL07W-CLX1])
    KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "N";
    KL07W01.KL07W-DTL-CHG-FL = "Y";
  end
end // end KL07S-DTL-REFNBR
// updt vwosus01 with dtl data
Function KL07S-DTL-UPDTS()
   /* *************************************************************/
   /* * Process screen detail line updates to the corresponding  **/
   /* * claims in suspense database records.                     **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* * 06-21-00   SSANK1     ADDED FCT-CD 'E'*/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-UPDTS";
  ;
  KL07W01.KL07W-ERR-FL = "N";
  KL07W01.KL07W-LINEX = 1;
  KL07W01.KL07W-PAGEX = KL07W01.KL07W-CURR-PAGE;
  ;
   /* ****************************************************************/
   /* CURR PAGE = current 15 lines of array displayed on scrn*/
   /* CLX1 = claims array index*/
   /* MAXLN = max nbr of lines that can be displayed on scrn*/
   /* LINEX = scrn (detail) line index*/
   /* ****************************************************************/
   /*  */
   /* 1.following calculation will put ptr at bottom of curr scrn/page*/
  ;
  KL07W01.KL07W-CLX1 = KL07W01.KL07W-CURR-PAGE * KL07W01.KL07W-MAXLN;
  ;
   /* 2.following calculation will put ptr at top of curr scrn/page*/
  ;
  KL07W01.KL07W-CLX1 = (KL07W-CLX1 - KL07W-MAXLN) + 1;
   /* ****************************************************************/
   /* now we can process updates to database,map, clm array starting*/
   /* with top of scrn detail and work our way down.*/
   /* ****************************************************************/
  ;
   /* handle processing of updates to detail line*/
   /* fct codes, clm nbrs, rsn & rc codes*/
  ;
  while (KL07W01.KL07W-LINEX <= KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX]
   && KL07W01.KL07W-ERR-FL == "N")
    ;
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "S")
     /* NEXT SENTENCE;*/
    else
    /* tcs changes begin 06/21/00*/
      if (KL07M001.KL07M-UPDT-FCT-CD[1] == "A" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "D" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "R" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "X" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "E")
    /* tcs changes end   06/21/00*/
        KL07S-PROCESS-SUS(); /* handle access & update of vwosus01*/
      else /* no dtl fct cd entered*/
        if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == " ")
           /* detail line clm nbr changed*/
    /* tcs changes begin 06/21/00*/
          if ((KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] != 
          KL07WSC1.KL07W-DTL-CLM-NBR[KL07W-LINEX]) || 
           /* detail line claim reason code changed*/
          (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] != 
          KL07WSC1.KL07W-DTL-YCR-CLM-RSN-CD[KL07W-LINEX]) || 
           /* detail line root cause code changed*/
          (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] != 
          KL07WSC1.KL07W-DTL-YRC-RT-CSE-CD[KL07W-LINEX]) || 
           /* detail refnbr changed*/
          (KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] != 
          KL07WSC1.KL07W-DTL-CLM-REFNBR[KL07W-LINEX]) || 
           /* detail ivc id changed*/
          (KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] != 
          KL07WSC1.KL07W-DTL-IV-IVC-ID[KL07W-LINEX]))
    /* tcs changes end   06/21/00*/
            KL07S-PROCESS-SUS(); /* handle access & update of vwosus01*/
          end /* database*/
        end
      end
    end
    ;
    /* if fct cd processed sucessfully blank it out on screen*/
    /* to avoid redisplay.   If fct cd is an A, then*/
    /* the fct cd only needs to be entered on the first detail*/
    /* line but is applied to all detail lines on the curr scrn.*/
    ;
    if (KL07W01.KL07W-ERR-FL == "N")
      if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "A"
       && KL07W-LINEX == 1)
          /* ******* NEXT SENTENCE*/
      else
        KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
      end
    end
    ;
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
    ;
  end /* END WHILE*/
  ;
  ;
  if (KL07M001.KL07M-UPDT-FCT-CD[1] == "A" && 
  KL07W01.KL07W-ERR-FL == "N")
    KL07M001.KL07M-UPDT-FCT-CD[1] = " ";
  end
end // end KL07S-DTL-UPDTS

// EDIT MAP 1 DTL YCR & YRC
Function KL07S-DTL-YCR()
   /* *************************************************************/
   /* *  Edit/validate any changes made to the detail line       **/
   /* *  ycr field.                                              **/
   /* *                                                          **/
   /* *  If clm rsn cd (ycr) changed                             **/
   /* *  1. check if clm rsn cd (ycr) is valid                   **/
   /* *  2. if clm rsn cd (ycr) is valid                         **/
   /* *        then check if rt cse cd (yrc) is required and     **/
   /* *        and valid with the clm rsn cd                     **/
   /* *                                                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 11-10-97   PPERK1     NEW                                **/
   /* * 02-25-98   gdecke     claim reason code status must = 'a'**/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-YCR";
  ;
  set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] initialAttributes;
  set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] initialAttributes;
  ;
   /* check if claim rsn code changed - MAP & ARRAY values not equal*/
  if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] != 
  KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1])
    /* clm rsn code is required - cant be made blank*/
    if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] is blanks)
      KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
      KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 809;
                                  /* cant blank out clm rsn cd*/
      set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] cursor, red;
      KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1];
    else
      /* if clm rsn code not blank make sure it exists on the ycr table*/
      if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] == "999")
        /* next sentence*/
      else
        if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] in YCRTBL.YCRCD)
          if (YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          /* next sentence*/
          else
            KL07W01.KL07W-ERR-FL = "Y";
            converseLib.validationFailed(88); /* clm rsn is not valid*/
                                   /* clm rsn cd is not valid*/
            set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] cursor, red;
          end
        else
          KL07W01.KL07W-ERR-FL = "Y";
          converseLib.validationFailed(88); /* clm rsn is not valid*/
                                   /* clm rsn cd is not valid*/
          set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] cursor, red;
        end
      end
    end
  end
  ;
   /* at this point any changes to claim rsn code have been validated*/
   /* now we check if rt cse code is required and valid with clm rsn cd*/
  if (KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] == "N")
    if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] != 
    KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1])
      KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
      /* if no rt cse cd - check if rt cse cd is required*/
      if (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] is blanks)
        KL07W01.KL07W-YRCTBL-KEY-YRC = "00";
        if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
          KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 789;
                                   /* a root cause code is required*/
          set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
          KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        else
          KL07W01.KL07W-DTL-CHG-FL = "Y";
        end
      else
        /* rt cse not blank - check if rt cse is valid with clm rsn cd*/
        KL07W01.KL07W-YRCTBL-KEY-YRC = KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX];
        if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* is ycr & yrc combo active*/
          if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            KL07W01.KL07W-DTL-CHG-FL = "Y";
          else
            KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 805;
                                   /* invalid root cause code*/
            set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
            KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
          end
        else /* rt cse code not valid with clm rsn cd*/
          KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 805;
                                   /* invalid root cause code*/
          set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
          KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        end
      end
    end
  end
  ;
end // end KL07S-DTL-YCR

// EDIT MAP 1 DTL YCR & YRC
Function KL07S-DTL-YRC()
   /* *************************************************************/
   /* *  Edit/validate any changes made to the detail line       **/
   /* *  yrc field.                                              **/
   /* *                                                          **/
   /* *  If clm rsn cd (ycr) not changed                         **/
   /* *     then check if rt cse cd (yrc) changed                **/
   /* *  1. if rt cse cd is changed to blank then                **/
   /* *        clm rsn cd must not be blank.                     **/
   /* *  2. if rt cse cd & clm rsn cd are not blank              **/
   /* *        then rt cse cd & clm rsn cd must be a valid       **/
   /* *        combination.                                      **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 11-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-YRC";
  ;
  set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] initialAttributes;
  set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] initialAttributes;
  ;
   /* at this point if the claim reason code was changed*/
   /* then YCR/YRC edits & validations have already been completed*/
   /* in prior stmt group which edits YCR.*/
  if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] != 
  KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1])
    return;
  end
  ;
   /* if only the root cause code was changed then*/
   /* check if it is valid with the clm rsn code*/
  if (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] != 
  KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1])
    if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] is blanks)
      if (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] is blanks)
        KL07W01.KL07W-DTL-CHG-FL = "Y";
      else
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 102;
        set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] cursor, red;
      end
    else
      if (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] is blanks)
        KL07W01.KL07W-YRCTBL-KEY-YRC = "00";
        KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
        if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
          KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 789;
                                   /* a root cause code is required*/
          set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
          KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        else
          KL07W01.KL07W-DTL-CHG-FL = "Y";
        end
      else
        /* check if rt cse and clm rsn code combo are valid*/
        KL07W01.KL07W-YRCTBL-KEY-YRC = KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX];
        KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
        if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* is combo active*/
          if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            KL07W01.KL07W-DTL-CHG-FL = "Y";
          else
            KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0805;
                                   /* invalid root cause code*/
            set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
            KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
          end
        else
          KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0805;
                                   /* invalid root cause code*/
          set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] cursor, modified, red;
          KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        end
      end
    end
  end
  ;
end // end KL07S-DTL-YRC
// chk detail fct cd 'A' & 'C'
Function KL07S-EDIT-FCT-CD()
   /* *************************************************************/
   /* * If screen hdr updt fields not changed (nkcl#, rsn & rt)  **/
   /* *  updt fct cd ('A' or 'C') do not need to be entered.     **/
   /* *                                                          **/
   /* * If screen hdr updt fields changed (nkcl#, rsn & rt)      **/
   /* * -updt fct cd must be entered on detail line(s).          **/
   /* *  Fct cd A on first detail line or Fct cd C on one or     **/
   /* *  more detail line(s).                                    **/
   /* * -check that no fields on detail lines have been changed  **/
   /* *  if there is a detail change than hdr updates will be    **/
   /* *  ignored and detail changes will processed.              **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 11-07-97   PPERK1     NEW                                **/
   /* * 06-21-00   SSANK1     Check for detail field updates*/
   /* *                       for the fields ref nbr & ivc id*/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-EDIT-FCT-CD";
  ;
  KL07W01.KL07W-HDR-DTL-UPDT-FL = "N"; /* hdr & dtl updts found*/
  KL07W01.KL07W-ERR-FL = "N";
  KL07W01.KL07W-FCT-CD-FOUND = "N";
  set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD initialAttributes;
  set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD initialAttributes;
  set KL07M001.KL07M-UPDT-CLM-NBR initialAttributes;
  ;
  if ((KL07M001.KL07M-UPDT-CLM-NBR == 0 && 
  KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD is blanks && 
  KL07M001.KL07M-UPDT-YRC-RT-CSE-CD is blanks))
    ;
    ;
    KL07W01.KL07W-LINEX = KL07W01.KL07W-PAGE-LN-CT[KL07W-CURR-PAGE];
    ;
    while (KL07W01.KL07W-LINEX > 0)
      ;
      set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] initialAttributes;
      ;
      /* fct cd A or C not required if no hdr updt fields entered*/
      if ((KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "A" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C"))
        set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
        set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD red;
        set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD red;
        set KL07M001.KL07M-UPDT-CLM-NBR red;
        converseLib.validationFailed(808);
        KL07W01.KL07W-ERR-FL = "Y";
      end
      KL07W-LINEX = KL07W-LINEX - 1;
    end /* END WHILE*/
  end
  ;
  ;
  if ((KL07M001.KL07M-UPDT-CLM-NBR != 0 || 
  KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks || 
  KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks))
    ;
    KL07W01.KL07W-LINEX = KL07W01.KL07W-PAGE-LN-CT[KL07W-CURR-PAGE];
    ;
    while (KL07W01.KL07W-LINEX > 0)
      ;
      set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] initialAttributes;
      ;
        /* fct cd A should only be entered on first detail line*/
      if (KL07W01.KL07W-LINEX > 1)
        if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "A")
          set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
          converseLib.validationFailed(0803);
          KL07W01.KL07W-ERR-FL = "Y";
        else /* other fct codes can not be entered*/
                                   /* with fct code A*/
          if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] not blanks && 
          KL07M001.KL07M-UPDT-FCT-CD[1] == "A")
            set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
            converseLib.validationFailed(0807);
            KL07W01.KL07W-ERR-FL = "Y";
          end
        end
      end
      ;
      ;
      if (KL07M001.KL07M-UPDT-FCT-CD[1] == "A" || 
      KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C")
        /* indicate fct cd A or C found*/
        KL07W01.KL07W-FCT-CD-FOUND = "Y";
        /* check for any detail fields updates*/
        /* if detail updates found then*/
        /* - set flag to indicate both hdr and detail updates found*/
        /* - reset updt fct cd to blank. This will prevent the*/
        /* header updates from being applied over the detail updates.*/
        if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] is modified)
          KL07W01.KL07W-HDR-DTL-UPDT-FL = "Y";
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
        if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] is modified)
          KL07W01.KL07W-HDR-DTL-UPDT-FL = "Y";
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
        if (KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] is modified)
          KL07W01.KL07W-HDR-DTL-UPDT-FL = "Y";
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
   /* tcs changes begin 06/21/00*/
        if (KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] is modified)
          KL07W01.KL07W-HDR-DTL-UPDT-FL = "Y";
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
        if (KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] is modified)
          KL07W01.KL07W-HDR-DTL-UPDT-FL = "Y";
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
   /* tcs changes end   06/21/00*/
      end
      ;
      /* if hdr updts & detail updates found anywhere on the map*/
      /* - reset updt fct cd to blank. This will prevent the*/
      /* header updates from being applied over the detail updates.*/
      /* NOTE: fct cd 'A' has to be entered on first detail line but*/
      /* the detail updates may have be on other detail line(s).*/
      if (KL07W01.KL07W-LINEX == 1 && 
      KL07W01.KL07W-HDR-DTL-UPDT-FL == "Y")
        if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "A")
          KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] = " ";
        end
      end
      ;
      KL07W-LINEX = KL07W-LINEX - 1;
    end /* /END WHILE*/
    ;
     /* hdr & dtl updts found,*/
     /* bypass hdr updates, issue warning message and process dtl updts*/
    if (KL07W01.KL07W-HDR-DTL-UPDT-FL == "Y")
      KL07W01.KL07W-ERR-FL = "N";
      converseLib.validationFailed(0801);
    else
      /* If fct code 'A' or 'C' not found then error*/
      if (KL07W01.KL07W-FCT-CD-FOUND == "N")
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(798);
        set KL07M001.KL07M-UPDT-FCT-CD[1] cursor, red;
        if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks)
          set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD red;
        end
        if (KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
          set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD red;
        end
        if (KL07M001.KL07M-UPDT-CLM-NBR != 0)
          set KL07M001.KL07M-UPDT-CLM-NBR red;
        end
      end
    end
  end
  ;
  KL07W01.KL07W-LINEX = 1;
  ;
  ;
end // end KL07S-EDIT-FCT-CD

// MOVE WS TO MAP 1 HEADER FIELDS
Function KL07S-FMT-CCYYMMDD()
   /* *************************************************************/
   /* *  Change date from CCYYMMDD format to MMDDYY format.      **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-FMT-CCYYMMDD";
  ;
  KL07W01.KL07W-FMT2-DT-YY = KL07W01.KL07W-FMT1-DT-YY;
  KL07W01.KL07W-FMT2-DT-MM = KL07W01.KL07W-FMT1-DT-MM;
  KL07W01.KL07W-FMT2-DT-DD = KL07W01.KL07W-FMT1-DT-DD;
  ;
end // end KL07S-FMT-CCYYMMDD

// get clm stat cd
Function KL07S-GET-CLST()
   /* *************************************************************/
   /* *   claim status code is retrieved from claim header       **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-GET-CLST";
  ;
   /* bypass stat cd look up if no clm nbr. clm nbr is needed to*/
   /* lookup stat code.*/
  if (VWOSUS01.CL-CLM-NBR == 0)
    KL07W01.YCS-CLM-STAT-CD1 = "***";
  else /* lookup up stat cd1 using clm nbr*/
    set CLAREC empty;
    CLAREC.CLACLMNB = VWOSUS01.CL-CLM-NBR;
    ;
    call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get the claim header*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KL07W01.YCS-CLM-STAT-CD1 = CLAREC.YCSCD1;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* claim number not found*/
        KL07W01.YCS-CLM-STAT-CD1 = "***";
        SQLCA.VAGen_SQLCODE = 0;
      else /* fatal db call*/
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR01";
        TA1REC.TA1LOCAT[2] = ", SELECT";
        TA1REC.TA1TBLKE = "LOOKING FOR CLAIM HEADER  ";
        CLXREC.CLXCPROC = "GET-CLST"; /* set curr process name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to a num field*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
        XPCL010();
      end
    end
  end
  ;
   /* If stat code does not match scrn stat code dont save record to array.*/
  KL07W01.KL07W-BYPASS-THIS-REC = "N";
  ;
   /* Following flag is set in edit map hdr routine if a new code has*/
   /* been entered.*/
  if (KL07W01.KL07W-CHECK-YCS-STAT-CD == "Y")
    if (KL07W01.YCS-CLM-STAT-CD1 == "***") /* no stat code for this record*/
      KL07W01.KL07W-BYPASS-THIS-REC = "Y";
    else
      if (KL07W01.YCS-CLM-STAT-CD1 != KL07M001.YCS-CLM-STAT-CD1)
        KL07W01.KL07W-BYPASS-THIS-REC = "Y";
      end
    end
  end
  ;
  if (KL07W01.YCS-CLM-STAT-CD1 == "***")
    KL07W01.YCS-CLM-STAT-CD1 = "   ";
  end
  ;
end // end KL07S-GET-CLST

// Calc days diff between 2 dates
Function KL07S-GET-DAY-DIFF()
   /* ***************************************************************/
   /* *  KL07S-GET-DAY-DIFF                                        **/
   /* *     CALC DAYS DIFFERENCE BETWEEN 2 DATES                   **/
   /* *------------------------------------------------------------**/
   /* *   M A I N T E N A N C E    H I S T O R Y   L O G           **/
   /* *------------------------------------------------------------**/
   /* * 07-21-97  pperk1  create new.                              **/
   /* * 03-11-98  GDECKE  EXPAND KL07WCLM MAX OCCURANCES TO 2000.  **/
   /* ***************************************************************/
  ;
  set TA2REC empty;
  ;
  TA2REC.TA2DBDFN = VWOSUS01.AR-OITM-TRN-DT; /* from date*/
  TA2REC.TA2DBDTN = KL07W01.ZZ-CHNG-DT; /* to date = curr date*/
  ;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1TBLKE = "RTN CALL FROM TA0040 - DAYSDIFF ";
    CLXREC.CLXCPROC = "XSCLSDY"; /* set curr process name*/
    XPCL010(); /* abend*/
  end
  ;
    /* -----------   end of stmt grp xsclsdy  ------------*/
  ;
end // end KL07S-GET-DAY-DIFF

// get customer phone nbr
Function KL07S-GET-PHN-NBR()
   /* ********************************************************************/
   /* Get Customer Phone Number*/
   /*  */
   /* NOTE: this stmt group is a clone of kl0es-get-phn-nbr 10/19/97*/
   /* MAINTENANCE HISTORY - KL07S-GET-PHN-NBR*/
   /* 10-19-97 PPERK1  cloned.*/
   /*  */
   /* *********************************************************************/
  ;
  CLXREC.CLXCPROC = "-GET-PHN"; /* set current proc name*/
  ;
  KL07W01.KL07W-PHONE-COMMENT = " ";
  CLGREC.CLACLMNB = KL07M010.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "T";
  CLGREC.CLGCMSEQ = 1;
   /* select the customer phone number, if*/
   /* one exists, and put on map*/
  ;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* telephone number already exists so delete it*/
    KL07W01.KL07W-PHONE-COMMENT = CLGREC.CLGCOMNT;
    KL07M010.KL07M-PHONE-AREA-CODE = KL07W01.KL07W-PHONE-AREA-CODE;
    KL07M010.KL07M-PHONE-PREFIX = KL07W01.KL07W-PHONE-PREFIX;
    KL07M010.KL07M-PHONE-SUFFIX = KL07W01.KL07W-PHONE-SUFFIX;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end
  ;
  ;
end // end KL07S-GET-PHN-NBR

// GET CO GRP ID FROM CMPNY
Function KL07S-GRP-CO-ID()
   /* *************************************************************/
   /* *   Use passed customer company id (cu-co-id) to retrieve  **/
   /* *   the customer group company id (cu-grp-co-id)           **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-05-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-GRP-CO-ID";
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = KL07W01.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company id*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL07W01.KL07W-ERR-NO797-FL = "N";
    KL07W01.KUCGRPID = KUCREC.KUCGRPID;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* grp co id not found*/
      KL07W01.KL07W-ERR-NO797-FL = "Y";
      SQLCA.VAGen_SQLCODE = 0;
    else /* fatal db call*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1LOCAT[2] = ", SELECT";
      CLXREC.CLXCPROC = "GRPCOID"; /* set curr process name*/
      CLXREC.XXXWDTE = KUCREC.KUCCOID; /* move to a num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010();
    end
  end
  ;
  if (KL07W01.KL07W-ERR-NO797-FL == "Y")
    KL07W01.KL07W-ERR-FL = "Y";
    converseLib.validationFailed(0797);
  end
  ;
  ;
end // end KL07S-GRP-CO-ID

// edit map1 non-updt hdr fields
Function KL07S-HD-MAP1-ED-1()
   /* *************************************************************/
   /* * Edit the MAP header fields used as database selection    **/
   /* * criteria.                                                **/
   /* *   -these fields are used only as selection criteria      **/
   /* *    to get new data (build array) for the screen          **/
   /* *    detail lines using data from the database             **/
   /* *    (VWOSUS01 - write-off open item suspense)             **/
   /* *                                                          **/
   /* * If an edit error in any of these fields is found then an **/
   /* * error message will be formatted and passed back to the   **/
   /* * screen to allow the user to correct the data.            **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-HD-MAP1-ED-1";
  ;
  KL07W01.KL07W-ERR-FL = "N";
  set KL07M001.XCE-CR-ANLS-CD initialAttributes;
  set KL07M001.KL07M-NBR-OF-DAY2 initialAttributes;
  set KL07M001.CU-CO-ID initialAttributes;
  ;
   /* ***********************************************************/
   /* perform edit/validation on screen hdr fields*/
   /* ***********************************************************/
  ;
  if (KL07M001.XCE-CR-ANLS-CD is blanks)
    KL07W01.KL07W-ERR-FL = "Y";
    converseLib.validationFailed(0796);
    set KL07M001.XCE-CR-ANLS-CD cursor, red;
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    KL07S-TO-FROM-DAYS();
    if (KL07W01.KL07W-ERR-FL == "Y")
      KL07W01.KL07W-ERR-FL = "Y";
      converseLib.validationFailed(0008);
      set KL07M001.KL07M-NBR-OF-DAY2 cursor, red;
    end
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M001.AR-CUST-CK-NBR not blanks)
      if (KL07M001.CU-CO-ID == 0)
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(0021);
        set KL07M001.CU-CO-ID cursor, red;
      end
    end
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M001.OP-CUST-PO not blanks)
      if (KL07M001.CU-CO-ID == 0)
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(0021);
        set KL07M001.CU-CO-ID cursor, red;
      end
    end
  end
  ;
end // end KL07S-HD-MAP1-ED-1

// edit map1 updt hdr fields
Function KL07S-HD-MAP1-ED-2()
   /* *************************************************************/
   /* * Fields on map 1 (kl07m001) are edited.  If an error      **/
   /* * is found then error message will be formatted and passed **/
   /* * back to screen.                                          **/
   /* *                                                          **/
   /* *   -these hdr fields will be used to update detail line   **/
   /* *    and database field values.(Nkcl#, Rsn, RC)            **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* * 02-25-98   gdecke     claim reason status code must = 'a'**/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-HD-MAP1-ED-2";
  ;
  KL07W01.KL07W-ERR-FL = "N";
  set KL07M001.KL07M-UPDT-CLM-NBR initialAttributes;
  set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD initialAttributes;
  set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD initialAttributes;
  set KL07M001.KL07M-UPDT-FCT-CD[1] initialAttributes;
  ;
   /* **************************************************************/
   /* perform edit/validation on the Nike Clm# in screen hdr*/
   /* that will be used to update Nike Clm# in screen dtl lines*/
   /* **************************************************************/
  ;
  if (KL07M001.KL07M-UPDT-CLM-NBR != 0)
    KL07W01.CL-CLM-NBR = KL07M001.KL07M-UPDT-CLM-NBR;
    KL07S-CHECK-NKCL(); /* chk if nkcl valid and get group co id*/
    if (KL07W01.KL07W-ERR-FL == "Y")
      set KL07M001.KL07M-UPDT-CLM-NBR cursor, red;
      KL07W01.KL07W-UPDT-KUCGRPID = -1;
    else
  /* save grp id to be used to compare against grp id of clm*/
  /* on screen detail lines.*/
      KL07W01.KL07W-UPDT-KUCCOID = KL07W01.KUCCOID;
      KL07W01.KL07W-UPDT-KUCGRPID = KL07W01.KUCGRPID;
    end
  end
  ;
   /* **************************************************************/
   /* perform edit/validation on the reason code and root cause*/
   /* code fields in the screen hdr.  These fields will be*/
   /* used to update screen dtl line fields.*/
   /* **************************************************************/
  ;
   /* if updt rsn code entered make sure it exists on the ycr table*/
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD == "   "
     || KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD == "999")
       /* next sentence*/
    else
      if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD in YCRTBL.YCRCD)
        if (YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                                  /* NEXT SENTENCE*/
        else
          KL07W01.KL07W-ERR-FL = "Y";
          converseLib.validationFailed(88); /* clm rsn is not valid*/
          set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD cursor, red;
        end
      else
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(88); /* clm rsn is not valid*/
        set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD cursor, red;
      end
    end
  end
  ;
   /* if updt rsn code entered check if root cause is required*/
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks
     && KL07M001.KL07M-UPDT-YRC-RT-CSE-CD is blanks)
      KL07W01.KL07W-YRCTBL-KEY-YRC = "00";
      KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
      if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
        converseLib.validationFailed(789); /* a root cause is required for this rsn*/
                                   /* cd*/
        set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, red;
        KL07W01.KL07W-ERR-FL = "Y";
      else
        set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD initialAttributes;
      end
    end
  end
  ;
   /* updt rsn code and rt cse code must be valid together*/
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks
     && KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
      KL07W01.KL07W-YRCTBL-KEY-YRC = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
      KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
      if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                /* is combo active*/
        if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD initialAttributes;
          set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD initialAttributes;
        else
          converseLib.validationFailed(805); /* invalid rt cse cd*/
          KL07W01.KL07W-ERR-FL = "Y";
          set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, red;
        end
      else
        converseLib.validationFailed(805); /* invalid rt cse cd*/
        KL07W01.KL07W-ERR-FL = "Y";
        set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, red;
      end
    end
  end
  ;
  ;
end // end KL07S-HD-MAP1-ED-2

// CHK IF MAP1 HDR FLDS MODIFIED
Function KL07S-HD-MAP1-MOD()
   /* *************************************************************/
   /* * Returned map is compared to saved map.  If there has     **/
   /* * been a change,the values are used to populate a parm     **/
   /* * record.  The parm is passed to an iomod which acesses    **/
   /* * vwosus01 database to get  new data to build an internal  **/
   /* * array.                                                   **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-HD-MAP1-MOD";
  ;
  if (KL07M001.XCE-CR-ANLS-CD != KL07WSC1.XCE-CR-ANLS-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  KL07WPL1.XCE-CR-ANLS-CD = KL07M001.XCE-CR-ANLS-CD;
  ;
  if (KL07M001.AR-AR-AMT != KL07WSC1.AR-AR-AMT)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.AR-AR-AMT == 0) /* if no value entered setup wild*/
    KL07WPL1.AR-AR-AMT = -1; /* card value to get all values*/
  else /* otherwise pass entered value*/
    KL07WPL1.AR-AR-AMT = KL07M001.AR-AR-AMT;
  end
  ;
  if (KL07M001.KL07M-NBR-OF-DAY1 != KL07WSC1.KL07W-NBR-OF-DAY1
   || KL07M001.KL07M-NBR-OF-DAY2 != KL07WSC1.KL07W-NBR-OF-DAY2)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  ;
  if (KL07M001.IV-IVC-ID != KL07WSC1.IV-IVC-ID)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.IV-IVC-ID == 0)
    KL07WPL1.IV-IVC-ID = -1;
  else
    KL07WPL1.IV-IVC-ID = KL07M001.IV-IVC-ID;
  end
  ;
  if (KL07M001.YCS-CLM-STAT-CD1 != KL07WSC1.YCS-CLM-STAT-CD1)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.YCS-CLM-STAT-CD1 is blanks)
    KL07W01.KL07W-CHECK-YCS-STAT-CD = "N";
  else
    KL07W01.KL07W-CHECK-YCS-STAT-CD = "Y";
  end
  ;
  if (KL07M001.CL-CLM-NBR != KL07WSC1.CL-CLM-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.CL-CLM-NBR == 0)
    KL07WPL1.CL-CLM-NBR = -1;
  else
    KL07WPL1.CL-CLM-NBR = KL07M001.CL-CLM-NBR;
  end
  ;
  if (KL07M001.AR-CUST-CLM-REFNBR != KL07WSC1.AR-CUST-CLM-REFNBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.AR-CUST-CLM-REFNBR is blanks)
    KL07WPL1.AR-CUST-CLM-REFNBR = "********************";
  else
    KL07WPL1.AR-CUST-CLM-REFNBR = KL07M001.AR-CUST-CLM-REFNBR;
  end
  ;
  if (KL07M001.AR-REF-NBR != KL07WSC1.AR-REF-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.AR-REF-NBR is blanks)
    KL07WPL1.AR-REF-NBR = "**********";
  else
    KL07WPL1.AR-REF-NBR = KL07M001.AR-REF-NBR;
  end
  ;
  if (KL07M001.KL07M-HDR-FCT-CD != KL07WSC1.KL07W-HDR-FCT-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.KL07M-HDR-FCT-CD is blanks)
    KL07WPL1.AR-WROF-ACT-CD = "**";
  else
    KL07WPL1.AR-WROF-ACT-CD = KL07M001.KL07M-HDR-FCT-CD;
  end
  ;
  if (KL07M001.CU-CO-ID != KL07WSC1.CU-CO-ID)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.CU-CO-ID == 0)
    KL07WPL1.CU-CO-ID = -1;
  else
    KL07WPL1.CU-CO-ID = KL07M001.CU-CO-ID;
  end
  ;
  if (KL07M001.AR-CUST-CK-NBR != KL07WSC1.AR-CUST-CK-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.AR-CUST-CK-NBR is blanks)
    KL07WPL1.AR-CUST-CK-NBR = "**********";
  else
    KL07WPL1.AR-CUST-CK-NBR = KL07M001.AR-CUST-CK-NBR;
  end
  ;
  if (KL07M001.OP-CUST-PO != KL07WSC1.OP-CUST-PO)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.OP-CUST-PO is blanks)
    KL07WPL1.OP-CUST-PO = "*************************";
  else
    KL07WPL1.OP-CUST-PO = KL07M001.OP-CUST-PO;
  end
  ;
  if (KL07M001.YCR-CLM-RSN-CD != KL07WSC1.YCR-CLM-RSN-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M001.YCR-CLM-RSN-CD is blanks)
    KL07WPL1.YCR-CLM-RSN-CD = "***";
  else
    KL07WPL1.YCR-CLM-RSN-CD = KL07M001.YCR-CLM-RSN-CD;
  end
  ;
  ;
end // end KL07S-HD-MAP1-MOD

// VALIDATE MAP 2 HDR FIELDS
Function KL07S-HD-MAP2-EDIT()
   /* *************************************************************/
   /* * Fields on map 2 (kl07m005) are edited.  If an error      **/
   /* * is found then error message will be formatted and passed **/
   /* * back to screen.                                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-HD-MAP2-EDIT";
  ;
  KL07W01.KL07W-ERR-FL = "N";
  ;
   /* ***********************************************************/
   /* perform edit/validation on screen hdr fields*/
   /* ***********************************************************/
  ;
  if (KL07M005.XCE-CR-ANLS-CD is blanks)
    KL07W01.KL07W-ERR-FL = "Y";
    converseLib.validationFailed(0796);
    set KL07M005.XCE-CR-ANLS-CD cursor, red;
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    KL07S-TO-FROM-DAYS();
    if (KL07W01.KL07W-ERR-FL == "Y")
      KL07W01.KL07W-ERR-FL = "Y";
      converseLib.validationFailed(0008);
      set KL07M005.KL07M-NBR-OF-DAY2 cursor, red;
    end
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M005.AR-CUST-CK-NBR not blanks)
      if (KL07M005.CU-CO-ID == 0)
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(0021);
        set KL07M005.CU-CO-ID cursor, red;
      end
    end
  end
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    if (KL07M005.OP-CUST-PO not blanks)
      if (KL07M005.CU-CO-ID == 0)
        KL07W01.KL07W-ERR-FL = "Y";
        converseLib.validationFailed(0021);
        set KL07M005.CU-CO-ID cursor, red;
      end
    end
  end
  ;
  ;
end // end KL07S-HD-MAP2-EDIT

// CHK IF MAP2 HDR FLDS MODIFIED
Function KL07S-HD-MAP2-MOD()
   /* *************************************************************/
   /* * Returned map is compared to saved map.  If there has     **/
   /* * been a change the values are used to populate a parm     **/
   /* * record which is passed to an iomod to access the         **/
   /* * vwosus01 database and get new data for the internal      **/
   /* * array.                                                   **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-HD-MAP2-MOD";
  ;
  if (KL07M005.XCE-CR-ANLS-CD != KL07WSC1.XCE-CR-ANLS-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  KL07WPL1.XCE-CR-ANLS-CD = KL07M005.XCE-CR-ANLS-CD;
  ;
  if (KL07M005.AR-AR-AMT != KL07WSC1.AR-AR-AMT)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.AR-AR-AMT == 0) /* if no value entered setup wild*/
    KL07WPL1.AR-AR-AMT = -1; /* card value to get all values*/
  else /* otherwise pass entered value*/
    KL07WPL1.AR-AR-AMT = KL07M005.AR-AR-AMT;
  end
  ;
  if (KL07M005.KL07M-NBR-OF-DAY1 != KL07WSC1.KL07W-NBR-OF-DAY1
   || KL07M005.KL07M-NBR-OF-DAY2 != KL07WSC1.KL07W-NBR-OF-DAY2)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  ;
  if (KL07M005.IV-IVC-ID != KL07WSC1.IV-IVC-ID)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.IV-IVC-ID == 0)
    KL07WPL1.IV-IVC-ID = -1;
  else
    KL07WPL1.IV-IVC-ID = KL07M005.IV-IVC-ID;
  end
  ;
  if (KL07M005.KL07M-HDR-FCT-CD != KL07WSC1.KL07W-HDR-FCT-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.KL07M-HDR-FCT-CD is blanks)
    KL07WPL1.AR-WROF-ACT-CD = "**";
  else
    KL07WPL1.AR-WROF-ACT-CD = KL07M005.KL07M-HDR-FCT-CD;
  end
  ;
  if (KL07M005.YCS-CLM-STAT-CD1 != KL07WSC1.YCS-CLM-STAT-CD1)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.YCS-CLM-STAT-CD1 is blanks)
    KL07W01.KL07W-CHECK-YCS-STAT-CD = "N";
  else
    KL07W01.KL07W-CHECK-YCS-STAT-CD = "Y";
  end
  ;
  if (KL07M005.CL-CLM-NBR != KL07WSC1.CL-CLM-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.CL-CLM-NBR == 0)
    KL07WPL1.CL-CLM-NBR = -1;
  else
    KL07WPL1.CL-CLM-NBR = KL07M005.CL-CLM-NBR;
  end
  ;
  if (KL07M005.AR-CUST-CLM-REFNBR != KL07WSC1.AR-CUST-CLM-REFNBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.AR-CUST-CLM-REFNBR is blanks)
    KL07WPL1.AR-CUST-CLM-REFNBR = "********************";
  else
    KL07WPL1.AR-CUST-CLM-REFNBR = KL07M005.AR-CUST-CLM-REFNBR;
  end
  ;
  if (KL07M005.AR-REF-NBR != KL07WSC1.AR-REF-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.AR-REF-NBR is blanks)
    KL07WPL1.AR-REF-NBR = "**********";
  else
    KL07WPL1.AR-REF-NBR = KL07M005.AR-REF-NBR;
  end
  ;
  if (KL07M005.YCR-CLM-RSN-CD != KL07WSC1.YCR-CLM-RSN-CD)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.YCR-CLM-RSN-CD is blanks)
    KL07WPL1.YCR-CLM-RSN-CD = "***";
  else
    KL07WPL1.YCR-CLM-RSN-CD = KL07M005.YCR-CLM-RSN-CD;
  end
  ;
  if (KL07M005.CU-CO-ID != KL07WSC1.CU-CO-ID)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.CU-CO-ID == 0)
    KL07WPL1.CU-CO-ID = -1;
  else
    KL07WPL1.CU-CO-ID = KL07M005.CU-CO-ID;
  end
  ;
  if (KL07M005.AR-CUST-CK-NBR != KL07WSC1.AR-CUST-CK-NBR)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.AR-CUST-CK-NBR is blanks)
    KL07WPL1.AR-CUST-CK-NBR = "**********";
  else
    KL07WPL1.AR-CUST-CK-NBR = KL07M005.AR-CUST-CK-NBR;
  end
  ;
  if (KL07M005.OP-CUST-PO != KL07WSC1.OP-CUST-PO)
    KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  end
  if (KL07M005.OP-CUST-PO is blanks)
    KL07WPL1.OP-CUST-PO = "*************************";
  else
    KL07WPL1.OP-CUST-PO = KL07M005.OP-CUST-PO;
  end
  ;
end // end KL07S-HD-MAP2-MOD

// INIT ARRAY KL07WCLM
Function KL07S-INIT-ARRAY()
   /* ***************************************************************/
   /* *  KL07S-INIT-ARRAY                                          **/
   /* *   INITIALIZE ARRAY KL07WCLM                                **/
   /* *------------------------------------------------------------**/
   /* *   M A I N T E N A N C E    H I S T O R Y   L O G           **/
   /* *------------------------------------------------------------**/
   /* * 07-21-97  pperk1  create new.                              **/
   /* * 03-11-98  GDECKE  MOVE GROUP ITEMS TO INITIALIZE TABLE     **/
   /* ***************************************************************/
   /*  */
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INIT-ARRAY";
  ;
    /* INITIALIZE THE FIRST OCCURANCE, AND THEN PROPOGATE THE*/
    /* FIRST OCCURANCE TO ALL OTHERS (GROUP MOVE)*/
  ;
  KL07W01.KL07W-CLX1 = 1;
  ;
  KL07WCLM.CL-CLM-NBR[KL07W-CLX1] = +000000000;
  KL07WCLM.AR-REF-NBR[KL07W-CLX1] = "          ";
  KL07WCLM.AR-CUST-CK-NBR[KL07W-CLX1] = "          ";
  KL07WCLM.AR-CK-DT[KL07W-CLX1] = +000000000;
  KL07WCLM.AR-CUST-CLM-REFNBR[KL07W-CLX1] = "                    ";
  KL07WCLM.AR-AR-AMT[KL07W-CLX1] = 00000000000;
  KL07WCLM.IV-IVC-ID[KL07W-CLX1] = +000000000;
  KL07WCLM.CU-CO-ID[KL07W-CLX1] = +000000000;
  KL07WCLM.AR-OITM-TRN-DT[KL07W-CLX1] = +000000000;
  KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1] = "   ";
  KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1] = "  ";
  KL07WCLM.AR-OITM-LKBX-CD[KL07W-CLX1] = "  ";
  KL07WCLM.AR-OITM-DEP-NBR[KL07W-CLX1] = "   ";
  KL07WCLM.AR-OITM-BATCH-NBR[KL07W-CLX1] = 000;
  KL07WCLM.AR-OITM-COLSQ-NBR[KL07W-CLX1] = +0000;
  KL07WCLM.XCE-CR-ANLS-CD[KL07W-CLX1] = "  ";
  KL07WCLM.OP-CUST-PO[KL07W-CLX1] = "                         ";
  KL07WCLM.AR-WROF-STAT-CD[KL07W-CLX1] = "  ";
  KL07WCLM.AR-WROF-TRN-CD[KL07W-CLX1] = "  ";
  KL07WCLM.AR-WROF-ACT-CD[KL07W-CLX1] = "  ";
  KL07WCLM.CL-CLM-NBR2[KL07W-CLX1] = +000000000;
  KL07WCLM.ZZ-SDT[KL07W-CLX1] = +000000000;
  KL07WCLM.ZZ-SETUP-HHMM[KL07W-CLX1] = +0000;
  KL07WCLM.ZZ-CHNG-DT[KL07W-CLX1] = +000000000;
  KL07WCLM.ZZ-CHNG-HHMM[KL07W-CLX1] = +0000;
  KL07WCLM.ZZ-CHNG-CNT[KL07W-CLX1] = +0000;
  KL07WCLM.YCS-CLM-STAT-CD1[KL07W-CLX1] = "   ";
  KL07WCLM.KL07W-DAYS-IN-SUSPENSE[KL07W-CLX1] = 000;
  ;
  KL07W01.KL07W-CLX1 = 2;
  while (KL07W-CLX1 <= KL07W01.KL07W-MAX-CLM-CT)
    KL07WCLM-GROUP[KL07W-CLX1] = KL07WCLM-GROUP[1];
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
  end
  ;
  KL07W01.KL07W-CLX1 = 1;
end // end KL07S-INIT-ARRAY

// INIT INQ TBL FIELDS
Function KL07S-INIT-INQTBL()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INIT-INQTBL";
  ;
  KL07W01.KL07W-INQ-CLM-CT = 0;
  KL07W01.KL07W-INQX = 1;
  ;
  while (KL07W-INQX <= KL07W-MAXLN)
    KL07W01.KL07W-INQ-CLM-NBR[KL07W-INQX] = 0;
    KL07W01.KL07W-INQX = KL07W01.KL07W-INQX + 1;
  end
  ;
  KL07W01.KL07W-INQX = 1;
end // end KL07S-INIT-INQTBL

// INIT PAGE TBL FIELDS
Function KL07S-INIT-PG-TBL()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INIT-PG-TBL";
  ;
  KL07W01.KL07W-CURR-PAGE = 1;
  KL07W01.KL07W-MAX-PAGE = 1;
  KL07W01.KL07W-PAGEX = 1;
  ;
  while (KL07W-PAGEX <= KL07W-MAX-PAGE)
    KL07W01.KL07W-PAGE-NBR[KL07W-PAGEX] = 0;
    KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX] = 0;
    KL07W01.KL07W-PAGEX = KL07W01.KL07W-PAGEX + 1;
  end
  ;
  KL07W01.KL07W-PAGEX = 1;
end // end KL07S-INIT-PG-TBL

// INIT KL07WPL1 IOMOD PARM LIST
Function KL07S-INIT-PL1()
   /* *************************************************************/
   /* * Populates parameter list with default values.  Parameter **/
   /* * list is passed to iomod cl4010 to retrieve rows from     **/
   /* * the suspense database. VWOSUS01                          **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INIT-PL1";
  ;
  KL07W01.KL07W-BLD-ARRAY-FL = "Y";
  ;
  KL07WPL1.CL-CLM-NBR = -1;
  ;
  KL07WPL1.AR-AR-AMT = -1; /* card value to get all values*/
  ;
  KL07WPL1.IV-IVC-ID = -1;
  ;
  KL07WPL1.CU-CO-ID = -1;
  ;
  KL07WPL1.KL07W-LO-DT = -1;
  ;
  KL07WPL1.KL07W-HI-DT = -1;
  ;
  KL07WPL1.AR-REF-NBR = "**********";
  ;
  KL07WPL1.AR-CUST-CK-NBR = "**********";
  ;
  KL07WPL1.AR-CUST-CLM-REFNBR = "********************";
  ;
  KL07WPL1.XCE-CR-ANLS-CD = KL07W01.XCE-CR-ANLS-CD;
  ;
  KL07WPL1.OP-CUST-PO = "*************************";
  ;
  KL07WPL1.AR-WROF-ACT-CD = "**";
  ;
  KL07WPL1.YCR-CLM-RSN-CD = "***";
  ;
end // end KL07S-INIT-PL1

// INIT KL07WSC1 ARRAY FIELDS
Function KL07S-INT-KL07WSC1()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INT-KL07WSC1";
  ;
  KL07W01.KL07W-LINEX = 1;
  ;
  while (KL07W-LINEX <= KL07W-MAXLN)
    KL07WSC1.KL07W-UPDT-FCT-CD[KL07W-LINEX] = " ";
    KL07WSC1.KL07W-DTL-CLM-NBR[KL07W-LINEX] = 0;
    KL07WSC1.KL07W-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = "   ";
    KL07WSC1.KL07W-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = "  ";
   /* tcs changes begin 06/21/00*/
    KL07WSC1.KL07W-DTL-CLM-REFNBR[KL07W-LINEX] = "  ";
    KL07WSC1.KL07W-DTL-IV-IVC-ID[KL07W-LINEX] = 0;
   /* tcs changes end   06/21/00*/
    KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "N";
    KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0; /* '*/
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
  end
  ;
  KL07W01.KL07W-LINEX = 1;
end // end KL07S-INT-KL07WSC1

// INIT VCLHDR02
Function KL07S-INT-VCLHDR02()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-INT-VCLHDR02";
  ;
  set VCLHDR02 empty;
  VCLHDR02.CLACLMNB = KL07W01.KL07W-INQ-CLM-NBR[KL07W-INQX];
   /* get company rec*/
  call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    KL07M010.CLACLMNB = VCLHDR02.CLACLMNB;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set VCLHDR02 empty;
      set CLAREC empty;
      converseLib.validationFailed(5);
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR02";
      TA1REC.TA1LOCAT[2] = ", SELECT";
      CLXREC.CLXCPROC = "KL07200"; /* set curr process name*/
      KL07W01.KL07W-KEY2-1 = "CLM#=";
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* move to a num field*/
      KL07W01.KL07W-KEY2-2 = CLXREC.XXXWDTE; /* and then to key*/
      KL07W01.KL07W-KEY2-COMMA-1 = ",";
      KL07W01.KL07W-KEY2-3 = "LOOKING FOR CLAIM HEADER";
      TA1REC.TA1TBLKE = KL07W01.KL07W-KEY2; /* and then to key*/
      XPCL010();
    end
  end
  ;
end // end KL07S-INT-VCLHDR02

// SAVE MAP 1 HDR FLDS TO WS
Function KL07S-MP1-HD-TO-WS()
   /* **************************************/
   /* save header fields*/
   /* **************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-MP1-HD-TO-WS";
  ;
  KL07WSC1.XXXPRCNM = KL07M001.XXXPRCNM;
  KL07WSC1.XXXMAPNM = "KL07M001";
  KL07WSC1.XXXRVNBR = KL07M001.XXXRVNBR;
  KL07WSC1.XXXCURDT = KL07M001.XXXCURDT;
  KL07WSC1.XCE-CR-ANLS-CD = KL07M001.XCE-CR-ANLS-CD;
  KL07WSC1.AR-AR-AMT = KL07M001.AR-AR-AMT;
  KL07WSC1.KL07W-NBR-OF-DAY1 = KL07M001.KL07M-NBR-OF-DAY1;
  KL07WSC1.KL07W-NBR-OF-DAY2 = KL07M001.KL07M-NBR-OF-DAY2;
  KL07WSC1.IV-IVC-ID = KL07M001.IV-IVC-ID;
  KL07WSC1.KL07W-HDR-FCT-CD = KL07M001.KL07M-HDR-FCT-CD;
  KL07WSC1.YCS-CLM-STAT-CD1 = KL07M001.YCS-CLM-STAT-CD1;
  KL07WSC1.CL-CLM-NBR = KL07M001.CL-CLM-NBR;
  KL07WSC1.AR-CUST-CLM-REFNBR = KL07M001.AR-CUST-CLM-REFNBR;
  KL07WSC1.AR-REF-NBR = KL07M001.AR-REF-NBR;
  KL07WSC1.YCR-CLM-RSN-CD = KL07M001.YCR-CLM-RSN-CD;
  KL07WSC1.CU-CO-ID = KL07M001.CU-CO-ID;
  KL07WSC1.AR-CUST-CK-NBR = KL07M001.AR-CUST-CK-NBR;
  KL07WSC1.OP-CUST-PO = KL07M001.OP-CUST-PO;
  KL07WSC1.KL07W-UPDT-CLM-NBR = KL07M001.KL07M-UPDT-CLM-NBR;
  KL07WSC1.KL07W-UPDT-YCR-CLM-RSN-CD = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
  KL07WSC1.KL07W-UPDT-YRC-RT-CSE-CD = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
  ;
end // end KL07S-MP1-HD-TO-WS

// MOVE WS TO MAP 1 HEADER FIELDS
Function KL07S-MP1-WS-TO-HD()
   /* ********************************************/
   /* move working storage to map header fields*/
   /* ********************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-MP1-WS-TO-HD";
  ;
  KL07M001.XXXPRCNM = KL07WSC1.XXXPRCNM;
  KL07M001.XXXMAPNM = KL07WSC1.XXXMAPNM;
  KL07M001.XXXRVNBR = KL07WSC1.XXXRVNBR;
  KL07M001.XXXCURDT = KL07WSC1.XXXCURDT;
  KL07M001.XCE-CR-ANLS-CD = KL07WSC1.XCE-CR-ANLS-CD;
  KL07M001.XCE-CR-ANLS-CD = KL07WSC1.XCE-CR-ANLS-CD;
  KL07M001.AR-AR-AMT = KL07WSC1.AR-AR-AMT;
  KL07M001.KL07M-NBR-OF-DAY1 = KL07WSC1.KL07W-NBR-OF-DAY1;
  KL07M001.KL07M-NBR-OF-DAY2 = KL07WSC1.KL07W-NBR-OF-DAY2;
  KL07M001.IV-IVC-ID = KL07WSC1.IV-IVC-ID;
  KL07M001.KL07M-HDR-FCT-CD = KL07WSC1.KL07W-HDR-FCT-CD;
  KL07M001.YCS-CLM-STAT-CD1 = KL07WSC1.YCS-CLM-STAT-CD1;
  KL07M001.CL-CLM-NBR = KL07WSC1.CL-CLM-NBR;
  KL07M001.AR-CUST-CLM-REFNBR = KL07WSC1.AR-CUST-CLM-REFNBR;
  KL07M001.AR-REF-NBR = KL07WSC1.AR-REF-NBR;
  KL07M001.YCR-CLM-RSN-CD = KL07WSC1.YCR-CLM-RSN-CD;
  KL07M001.CU-CO-ID = KL07WSC1.CU-CO-ID;
  KL07M001.AR-CUST-CK-NBR = KL07WSC1.AR-CUST-CK-NBR;
  KL07M001.OP-CUST-PO = KL07WSC1.OP-CUST-PO;
  KL07M001.KL07M-UPDT-CLM-NBR = KL07WSC1.KL07W-UPDT-CLM-NBR;
  KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD = KL07WSC1.KL07W-UPDT-YCR-CLM-RSN-CD;
  KL07M001.KL07M-UPDT-YRC-RT-CSE-CD = KL07WSC1.KL07W-UPDT-YRC-RT-CSE-CD;
  ;
end // end KL07S-MP1-WS-TO-HD

// SAVE MAP 2 HDR FLDS TO WS
Function KL07S-MP2-HD-TO-WS()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-MP2-HD-TO-WS";
  ;
  KL07WSC1.XXXPRCNM = KL07M005.XXXPRCNM;
  KL07WSC1.XXXMAPNM = "KL07M005";
  KL07WSC1.XXXRVNBR = KL07M005.XXXRVNBR;
  KL07WSC1.XXXCURDT = KL07M005.XXXCURDT;
  KL07WSC1.XCE-CR-ANLS-CD = KL07M005.XCE-CR-ANLS-CD;
  KL07WSC1.AR-AR-AMT = KL07M005.AR-AR-AMT;
  KL07WSC1.KL07W-NBR-OF-DAY1 = KL07M005.KL07M-NBR-OF-DAY1;
  KL07WSC1.KL07W-NBR-OF-DAY2 = KL07M005.KL07M-NBR-OF-DAY2;
  KL07WSC1.IV-IVC-ID = KL07M005.IV-IVC-ID;
  KL07WSC1.KL07W-HDR-FCT-CD = KL07M005.KL07M-HDR-FCT-CD;
  KL07WSC1.YCS-CLM-STAT-CD1 = KL07M005.YCS-CLM-STAT-CD1;
  KL07WSC1.CL-CLM-NBR = KL07M005.CL-CLM-NBR;
  KL07WSC1.AR-CUST-CLM-REFNBR = KL07M005.AR-CUST-CLM-REFNBR;
  KL07WSC1.AR-REF-NBR = KL07M001.AR-REF-NBR;
  KL07WSC1.YCR-CLM-RSN-CD = KL07M005.YCR-CLM-RSN-CD;
  KL07WSC1.CU-CO-ID = KL07M005.CU-CO-ID;
  KL07WSC1.AR-CUST-CK-NBR = KL07M005.AR-CUST-CK-NBR;
  KL07WSC1.OP-CUST-PO = KL07M005.OP-CUST-PO;
  ;
end // end KL07S-MP2-HD-TO-WS

// MOVE WS TO MAP2 HEADER FIELDS
Function KL07S-MP2-WS-TO-HD()
   /* ********************************************/
   /* move working storage to map header fields*/
   /* ********************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-MP2-WS-TO-HD";
  ;
  KL07M005.XXXPRCNM = KL07WSC1.XXXPRCNM;
  KL07M005.XXXMAPNM = KL07WSC1.XXXMAPNM;
  KL07M005.XXXRVNBR = KL07WSC1.XXXRVNBR;
  KL07M005.XXXCURDT = KL07WSC1.XXXCURDT;
  KL07M005.XCE-CR-ANLS-CD = KL07WSC1.XCE-CR-ANLS-CD;
  KL07M005.XCE-CR-ANLS-CD = KL07WSC1.XCE-CR-ANLS-CD;
  KL07M005.AR-AR-AMT = KL07WSC1.AR-AR-AMT;
  KL07M005.KL07M-NBR-OF-DAY1 = KL07WSC1.KL07W-NBR-OF-DAY1;
  KL07M005.KL07M-NBR-OF-DAY2 = KL07WSC1.KL07W-NBR-OF-DAY2;
  KL07M005.IV-IVC-ID = KL07WSC1.IV-IVC-ID;
  KL07M005.KL07M-HDR-FCT-CD = KL07WSC1.KL07W-HDR-FCT-CD;
  KL07M005.YCS-CLM-STAT-CD1 = KL07WSC1.YCS-CLM-STAT-CD1;
  KL07M005.CL-CLM-NBR = KL07WSC1.CL-CLM-NBR;
  KL07M005.AR-CUST-CLM-REFNBR = KL07WSC1.AR-CUST-CLM-REFNBR;
  KL07M005.AR-REF-NBR = KL07WSC1.AR-REF-NBR;
  KL07M005.YCR-CLM-RSN-CD = KL07WSC1.YCR-CLM-RSN-CD;
  KL07M005.CU-CO-ID = KL07WSC1.CU-CO-ID;
  KL07M005.AR-CUST-CK-NBR = KL07WSC1.AR-CUST-CK-NBR;
  KL07M005.OP-CUST-PO = KL07WSC1.OP-CUST-PO;
  ;
end // end KL07S-MP2-WS-TO-HD

// pf 7 action
Function KL07S-PF7()
   /* ************************************************************/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-PF7";
  ;
  if (KL07W01.KL07W-CURR-PAGE == 1) /* If on first index and first page*/
    KL07W01.KL07W-ERR-FL = "Y"; /* Set error*/
    KL07M001.XXXPRCNM = "KL07S07"; /* Process name*/
    converseLib.validationFailed(7); /* Top of data*/
    KL07W01.KL07W-CURR-CLM-PTR = 1;
    KL07W-PAGEX = 1;
  else
   /* to get to first claim for the new screen subtract*/
   /* current screen nbr of lines and then new screen nbr of lines*/
    ;
    KL07W01.KL07W-CURR-PAGE = KL07W01.KL07W-CURR-PAGE - 1;
                                     /* Decrement index 1 page*/
    KL07W01.KL07W-CURR-CLM-PTR = KL07W01.KL07W-CURR-CLM-PTR - 15;
    KL07W01.KL07W-BLD-SCRN-FL = "Y"; /* rebuild screen*/
    KL07S-INT-KL07WSC1(); /* init scrn hold areas*/
  end
  ;
  ;
end // end KL07S-PF7

// pf 8 action
Function KL07S-PF8()
   /* ************************************************************/
   /* *                                                         **/
   /* *                   PF8 ACTION                            **/
   /* *                                                         **/
   /* *   this process handles the entry of pf key 8            **/
   /* *           (paging forward)                              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-PF8";
                                           /* Set current process name*/
  ;
      /* move first line to the array index*/
  ;
  KL07W01.KL07W-CURR-PAGE = KL07W01.KL07W-CURR-PAGE + 1; /* Set index page*/
                                                   /* forward*/
  if (KL07W01.KL07W-CURR-PAGE <= KL07W01.KL07W-MAX-PAGE)
                                            /* check index page*/
    KL07W01.KL07W-CURR-CLM-PTR = KL07W01.KL07W-CURR-CLM-PTR + 15;
    KL07W01.KL07W-BLD-SCRN-FL = "Y";
    KL07S-INT-KL07WSC1(); /* init scrn hold areas*/
  else
    KL07W01.KL07W-CURR-PAGE = KL07W01.KL07W-CURR-PAGE - 1;
    KL07W01.KL07W-ERR-FL = "Y"; /* Set error*/
    KL07M001.XXXPRCNM = "KL07S08"; /* Process name*/
    converseLib.validationFailed(3); /* end of data*/
  end
  ;
end // end KL07S-PF8

// handle access to vwosus01
Function KL07S-PROCESS-SUS()
   /* *************************************************************/
   /* * In order to update fields in the database the following  **/
   /* * steps are taken:                                         **/
   /* * 1. Select unique the record and save in working storage  **/
   /* * 2. Delete the record from the databases                  **/
   /* * 3. Update saved record in working storage                **/
   /* * 4. Add record back to database                           **/
   /* * 5. update map1 detail and internal array with changes    **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-PROCESS-SUS";
  ;
  set VWOSUS01 empty;
  ;
   /* *populate database key fields*/
  VWOSUS01.CL-CLM-NBR = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
  VWOSUS01.AR-REF-NBR = KL07WCLM.AR-REF-NBR[KL07W-CLX1];
  ;
  KL07S-SUS-S-UNIQ();
  ;
  if (KL07W01.KL07W-ERR-FL == "N")
    ;
    KL07S-SUS-DELETE();
    ;
    KL07S-SUS-POP-FLDS(); /* populate database fields*/
    KL07S-SUS-ADD();
    ;
    if (KL07W01.KL07W-ERR-FL == "Y")
      converseLib.validationFailed(0793);
      set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
    else
      KL07S-UPDT-MP1-ARY();
    end
  else
    converseLib.validationFailed(0793);
    set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] cursor, red;
  end
end // end KL07S-PROCESS-SUS

// SAVE MAP 1 VARIABLE FIELDS
Function KL07S-PRV-MAP1-FLD()
   /* **************************************/
   /* save variable fields*/
   /* **************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-PRV-MAP1-FLD";
  ;
  if (KL07W01.KL07W-LINEX == 1)
    KL07WSC1.XCE-CR-ANLS-CD = KL07M001.XCE-CR-ANLS-CD;
    KL07WSC1.AR-AR-AMT = KL07M001.AR-AR-AMT;
    KL07WSC1.KL07W-NBR-OF-DAY1 = KL07M001.KL07M-NBR-OF-DAY1;
    KL07WSC1.KL07W-NBR-OF-DAY2 = KL07M001.KL07M-NBR-OF-DAY2;
    KL07WSC1.IV-IVC-ID = KL07M001.IV-IVC-ID;
    KL07WSC1.KL07W-HDR-FCT-CD = KL07M001.KL07M-HDR-FCT-CD;
    KL07WSC1.YCS-CLM-STAT-CD1 = KL07M001.YCS-CLM-STAT-CD1;
    KL07WSC1.CL-CLM-NBR = KL07M001.CL-CLM-NBR;
    KL07WSC1.AR-CUST-CLM-REFNBR = KL07M001.AR-CUST-CLM-REFNBR;
    KL07WSC1.AR-REF-NBR = KL07M001.AR-REF-NBR;
    KL07WSC1.YCR-CLM-RSN-CD = KL07M001.YCR-CLM-RSN-CD;
    KL07WSC1.CU-CO-ID = KL07M001.CU-CO-ID;
    KL07WSC1.AR-CUST-CK-NBR = KL07M001.AR-CUST-CK-NBR;
    KL07WSC1.OP-CUST-PO = KL07M001.OP-CUST-PO;
  end
  ;
  KL07WSC1.KL07W-UPDT-FCT-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
  KL07WSC1.KL07W-DTL-CLM-NBR[KL07W-LINEX] = KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX];
  KL07WSC1.KL07W-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
  KL07WSC1.KL07W-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX];
   /* tcs changes begin 06/21/00*/
  KL07WSC1.KL07W-DTL-CLM-REFNBR[KL07W-LINEX] = KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX];
  KL07WSC1.KL07W-DTL-IV-IVC-ID[KL07W-LINEX] = KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX];
   /* tcs changes end   06/21/00*/
  ;
end // end KL07S-PRV-MAP1-FLD

// SAVE MAP 2 VARIABLE FLDS
Function KL07S-PRV-MAP2-FLD()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-PRV-MAP2-HDR";
  ;
  if (KL07W01.KL07W-LINEX == 1)
   /* SET KL07WSC1 EMPTY;*/
    KL07WSC1.XCE-CR-ANLS-CD = KL07M005.XCE-CR-ANLS-CD;
    KL07WSC1.AR-AR-AMT = KL07M005.AR-AR-AMT;
    KL07WSC1.KL07W-NBR-OF-DAY1 = KL07M005.KL07M-NBR-OF-DAY1;
    KL07WSC1.KL07W-NBR-OF-DAY2 = KL07M005.KL07M-NBR-OF-DAY2;
    KL07WSC1.IV-IVC-ID = KL07M005.IV-IVC-ID;
    KL07WSC1.KL07W-HDR-FCT-CD = KL07M005.KL07M-HDR-FCT-CD;
    KL07WSC1.YCS-CLM-STAT-CD1 = KL07M005.YCS-CLM-STAT-CD1;
    KL07WSC1.CL-CLM-NBR = KL07M005.CL-CLM-NBR;
    KL07WSC1.AR-CUST-CLM-REFNBR = KL07M005.AR-CUST-CLM-REFNBR;
    KL07WSC1.AR-REF-NBR = KL07M005.AR-REF-NBR;
    KL07WSC1.YCR-CLM-RSN-CD = KL07M005.YCR-CLM-RSN-CD;
    KL07WSC1.CU-CO-ID = KL07M005.CU-CO-ID;
    KL07WSC1.AR-CUST-CK-NBR = KL07M005.AR-CUST-CK-NBR;
    KL07WSC1.OP-CUST-PO = KL07M005.OP-CUST-PO;
  end
  ;
  KL07WSC1.KL07W-UPDT-FCT-CD[KL07W-LINEX] = 0;
  KL07WSC1.KL07W-DTL-CLM-NBR[KL07W-LINEX] = 0;
  KL07WSC1.KL07W-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = "   ";
  KL07WSC1.KL07W-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = "  ";
  ;
end // end KL07S-PRV-MAP2-FLD

// SET MAP1 FLDS DEFINED
Function KL07S-RESET-ERR795()
   /* ************************************************************/
   /* *    Error 795 is a warning message issued when a claim   **/
   /* *    number on the detail line may be changed to a claim  **/
   /* *    that is in a different grp acct or company.          **/
   /* *    (see stmt group for dtl clm nbr edits)               **/
   /* *                                                         **/
   /* *    This warning error is issued to allow the user to    **/
   /* *    accept or reject the change.  To accept they should  **/
   /* *    press enter to reject they would change one of the   **/
   /* *    fields that caused the issuing of the message.       **/
   /* *    The change could be a new value or blank.            **/
   /* *                                                         **/
   /* *    If they reject the change then the detail lines      **/
   /* *    need to be re-edited.  The warning flag must be      **/
   /* *    turned off in order to prevent bypassing the edits.  **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-RESET-ERR795";
  ;
    /* turn off warn flag if:*/
    /* dtl fct cd value was changed from 'A' - updt fct cd(1)*/
    /* dtl clm nbr changed - also reset dtl clm# if changed to blank*/
    /* hdr updt clm nbr changed*/
    /* dtl fct cd changed*/
    /*  */
    /* 795 warn flag will prevent edit of clm # changes but if anything*/
    /* was changed since the warning message was issued then the*/
    /* clm # will need to be re-edited.*/
  ;
  if (KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] == "Y" && 
  (KL07M001.KL07M-UPDT-CLM-NBR is modified || 
  KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] is modified || 
  KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] is modified || 
  KL07M001.KL07M-UPDT-FCT-CD[1] is modified))
    /* reset detail line err flags*/
    KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0;
    KL07WSC1.KL07W-ERR-NO795-FL[KL07W-LINEX] = "N";
    /* reset dtl clm# to value stored in array if blanked out by user*/
    if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] is modified && 
    KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] is blanks)
      KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
    end
  end
  ;
  ;
end // end KL07S-RESET-ERR795

// SET MAP1 FLDS DEFINED
Function KL07S-SET-INDX-BOT()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SET-INDX-BOT";
  ;
   /* *******************************************************************/
   /* **    NEXT IF STMT DOES THE FOLLOWING:                         ***/
   /* 1. Position line index to edit screen detail lines from the*/
   /* bottom of the screen up.*/
   /*  */
   /* 2. Position claims array index to correspond to screen detail*/
   /* line.*/
   /* ********************************************************************/
   /*  */
   /* set claim array and screen line index*/
  if (KL07W01.KL07W-CURR-PAGE == 1)
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-PAGE-LN-CT[1];
    KL07W01.KL07W-LINEX = KL07W01.KL07W-PAGE-LN-CT[1];
  else
    KL07W01.KL07W-CLX1 = (KL07W01.KL07W-CURR-PAGE - 1) *                                                  KL07W01.KL07W-MAXLN;
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 +                        KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX];
    KL07W01.KL07W-LINEX = KL07W01.KL07W-PAGE-LN-CT[KL07W-PAGEX];
  end
  ;
  ;
end // end KL07S-SET-INDX-BOT

// SET MAP1 FLDS DEFINED
Function KL07S-SET-INDX-TOP()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SET-INDX-TOP";
  ;
   /* *******************************************************************/
   /* **    NEXT IF STMT DOES THE FOLLOWING:                         ***/
   /* 1. Position line index to edit screen detail lines from the*/
   /* TOP of screen down.*/
   /*  */
   /* 2. Position claims array index to correspond to screen detail*/
   /* line.*/
   /* ********************************************************************/
   /*  */
   /* set claim array and screen line index*/
  if (KL07W01.KL07W-CURR-PAGE == 1)
    KL07W01.KL07W-CLX1 = 1;
    KL07W01.KL07W-LINEX = 1;
  else
    KL07W01.KL07W-CLX1 = (KL07W01.KL07W-CURR-PAGE - 1) *                                                  KL07W01.KL07W-MAXLN;
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
    KL07W01.KL07W-LINEX = 1;
  end
  ;
  ;
end // end KL07S-SET-INDX-TOP

// SET MAP1 FLDS DEFINED
Function KL07S-SET-MAP1-FLD()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SET-MAP1-FLD";
  ;
  set KL07M001.XCE-CR-ANLS-CD modified;
  set KL07M001.AR-AR-AMT modified;
  set KL07M001.KL07M-NBR-OF-DAY1 modified;
  set KL07M001.KL07M-NBR-OF-DAY2 modified;
  set KL07M001.IV-IVC-ID modified;
  set KL07M001.KL07M-HDR-FCT-CD modified;
  set KL07M001.KL07M-TOT-TRANS-AMT initialAttributes;
  set KL07M001.YCS-CLM-STAT-CD1 modified;
  set KL07M001.CL-CLM-NBR modified;
  set KL07M001.AR-CUST-CLM-REFNBR modified;
  set KL07M001.AR-REF-NBR modified;
  set KL07M001.YCR-CLM-RSN-CD modified;
  set KL07M001.KL07M-TOT-TRANS-COUNT initialAttributes;
  set KL07M001.CU-CO-ID modified;
  set KL07M001.AR-CUST-CK-NBR modified;
  set KL07M001.OP-CUST-PO modified;
  set KL07M001.KL07M-UPDT-CLM-NBR modified;
  set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD modified;
  set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD modified;
  ;
   /* set screen index to top of detail lines and set array index*/
  KL07S-SET-INDX-TOP();
  ;
  while (KL07W01.KL07W-LINEX <= KL07W-MAXLN)
    ;
    set KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-FCT-CD-OITM-IND[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-CL-STAT-CD[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-CU-CO-ID[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-AR-REF-NBR[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-AR-AMT[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX] initialAttributes;
    set KL07M001.KL07M-DAYS-IN-SUSPENSE[KL07W-LINEX] initialAttributes;
    ;
    /* check if fields modified which will require reset of*/
    /* warning err 795.*/
    KL07S-RESET-ERR795();
    ;
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
    KL07W01.KL07W-CLX1 = KL07W01.KL07W-CLX1 + 1;
  end
  ;
end // end KL07S-SET-MAP1-FLD

// SET map 2 FIELDS
Function KL07S-SET-MAP2-FLD()
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SET-MAP2-FLD";
  ;
  set KL07M005.XCE-CR-ANLS-CD initialAttributes;
  set KL07M005.AR-AR-AMT initialAttributes;
  set KL07M005.KL07M-NBR-OF-DAY1 initialAttributes;
  set KL07M005.KL07M-NBR-OF-DAY2 initialAttributes;
  set KL07M005.IV-IVC-ID initialAttributes;
  set KL07M005.KL07M-TOT-TRANS-AMT initialAttributes;
  set KL07M005.YCS-CLM-STAT-CD1 initialAttributes;
  set KL07M005.CL-CLM-NBR initialAttributes;
  set KL07M005.AR-CUST-CLM-REFNBR initialAttributes;
  set KL07M005.AR-REF-NBR initialAttributes;
  set KL07M005.KL07M-HDR-FCT-CD initialAttributes;
  set KL07M005.KL07M-TOT-TRANS-COUNT initialAttributes;
  set KL07M005.CU-CO-ID initialAttributes;
  set KL07M005.AR-CUST-CK-NBR initialAttributes;
  set KL07M005.OP-CUST-PO initialAttributes;
  set KL07M005.YCR-CLM-RSN-CD initialAttributes;
  ;
  KL07W01.KL07W-LINEX = 1;
  while (KL07W01.KL07W-LINEX <= KL07W01.KL07W-MAXLN)
    ;
    set KL07M005.KL07M-DTL-CU-CO-ID[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-AR-REF-NBR[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-AR-AMT[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-CUST-PO[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-CK-NBR[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-AR-CK-DT[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-OITM-DEP-NBR[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-OITM-BATCH-NBR[KL07W-LINEX] initialAttributes;
    set KL07M005.KL07M-DTL-OITM-COLSQ-NBR[KL07W-LINEX] initialAttributes;
    ;
    KL07W01.KL07W-LINEX = KL07W01.KL07W-LINEX + 1;
  end
  ;
end // end KL07S-SET-MAP2-FLD

// UPDT VWOSUS01 RECORD
Function KL07S-SUS-ADD()
   /* ************************************************************/
   /* *   this statement group calls io module to add a row     **/
   /* *   to the write off suspense item table     (vwosus01)   **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SUS-ADD";
  ;
  KL07DBIO.KL07W-DBIO-FUNCTION = "A "; /* select unique record*/
  call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
  ) /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOSUS01";
    CLXREC.CLXCPROC = "KL07S-3";
    TA1REC.TA1LOCAT[2] = ", ADD   ";
    KL07W01.KL07W-TA1LOC1-1 = "ANLST:";
    KL07W01.KL07W-TA1LOC1-2 = VWOSUS01.XCE-CR-ANLS-CD;
    TA1REC.TA1LOCAT[4] = KL07W01.KL07W-TA1LOC1;
    KL07S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
    XPCL010();
  end
end // end KL07S-SUS-ADD

// DELETE VWOSUS01 RECORD
Function KL07S-SUS-DELETE()
   /* ************************************************************/
   /* *   this statement group calls io module to delete        **/
   /* *   a row from write off suspense item table (vwosus01)   **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SUS-DELETE";
  ;
  KL07DBIO.KL07W-DBIO-FUNCTION = "D "; /* select unique record*/
  call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
  ) /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VWOSUS01";
    CLXREC.CLXCPROC = "KL07S-2";
    TA1REC.TA1LOCAT[2] = ", DELETE";
    KL07W01.KL07W-TA1LOC1-1 = "ANLST:";
    KL07W01.KL07W-TA1LOC1-2 = VWOSUS01.XCE-CR-ANLS-CD;
    TA1REC.TA1LOCAT[4] = KL07W01.KL07W-TA1LOC1;
    KL07S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
    XPCL010();
  end
end // end KL07S-SUS-DELETE

// updt vwosus01 with dtl data
Function KL07S-SUS-POP-FLDS()
   /* *************************************************************/
   /* * Populate claims in suspense fields in order to create a  **/
   /* * record to add a new row to the claims in suspense        **/
   /* * databases.            (vwosus01)                         **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* * 06-21-00   SSANK1     ADDED FCT-CD 'E'                   **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SUS-POP-FLDS";
  ;
  VWOSUS01.ZZ-CHNG-DT = KL07W01.ZZ-CHNG-DT;
  VWOSUS01.ZZ-CHNG-HHMM = KL07W01.ZZ-CHNG-HHMM;
  VWOSUS01.ZZ-CHNG-CNT = VWOSUS01.ZZ-CHNG-CNT + 1;
  ;
  if (KL07M001.KL07M-UPDT-FCT-CD[1] == "A" || 
  KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C")
    ;
    if (KL07M001.KL07M-UPDT-CLM-NBR != 0)
      VWOSUS01.CL-CLM-NBR = KL07M001.KL07M-UPDT-CLM-NBR;
      VWOSUS01.CL-CLM-NBR2 = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
    end
    if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks)
      VWOSUS01.YCR-CLM-RSN-CD = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
      VWOSUS01.YRC-RT-CSE-CD = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
    end
    if (KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
      VWOSUS01.YRC-RT-CSE-CD = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
    end
    ;
  else
    ;
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "D")
      VWOSUS01.AR-WROF-ACT-CD = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
      if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] == 0)
        converseLib.validationFailed(0800);
        set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
      end
    else

      if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "R")
        VWOSUS01.AR-WROF-ACT-CD = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
      else
        ;
        if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "X")
          VWOSUS01.AR-WROF-ACT-CD = "  ";
        else
   /* tcs changes begin  06/21/00*/
          if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "E")
            VWOSUS01.AR-WROF-ACT-CD = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
            if (KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] == 0)
              converseLib.validationFailed(0800);
              set KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] cursor, red;
            end
          end
   /* tcs changes end    06/21/00*/
        end
      end
    end
    ;
    VWOSUS01.CL-CLM-NBR2 = KL07WCLM.CL-CLM-NBR[KL07W-CLX1];
    VWOSUS01.CL-CLM-NBR = KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX];
    ;
    VWOSUS01.YCR-CLM-RSN-CD = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
    ;
    VWOSUS01.YRC-RT-CSE-CD = KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX];
    ;
   /* tcs changes begin  06/21/00*/
    VWOSUS01.AR-CUST-CLM-REFNBR = KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX];
    ;
    VWOSUS01.IV-IVC-ID = KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX];
   /* tcs changes end    06/21/00*/
    ;
  end
end // end KL07S-SUS-POP-FLDS

// SELECT UNIQUE FROM VWOSUS01
Function KL07S-SUS-S-UNIQ()
   /* ************************************************************/
   /* *   this statement group calls io module to retrieve      **/
   /* *   a row from write off suspense item table (vwosus01)   **/
   /* ************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-SUS-S-UNIQ";
  ;
  KL07DBIO.KL07W-DBIO-FUNCTION = "S "; /* select unique record*/
  call "CL4010" (KL07DBIO, SQLCA, VWOSUS01, KL07WPL1) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL07W01.KL07W-ERR-FL = "Y";
      converseLib.validationFailed(0009);
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VWOSUS01";
      CLXREC.CLXCPROC = "KL07S-1";
      TA1REC.TA1LOCAT[2] = ", SELECT";
      TA1REC.TA1LOCAT[3] = "UNIQUE. ";
      KL07W01.KL07W-TA1LOC1-1 = "ANLST:";
      KL07W01.KL07W-TA1LOC1-2 = VWOSUS01.XCE-CR-ANLS-CD;
      TA1REC.TA1LOCAT[4] = KL07W01.KL07W-TA1LOC1;
      KL07S-TA1TBLKE(); /* populate ta1tblke field in ta1rec*/
      XPCL010();
    end
  end
end // end KL07S-SUS-S-UNIQ

// MOVE KL07WPL1 TO TA1REC AREA
Function KL07S-TA1TBLKE()
   /* *************************************************************/
   /* * Populates TA1REC area with values passed to iomod cl4010 **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 10-16-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-KEY1-1 = KL07WPL1.CL-CLM-NBR;
  KL07W01.KL07W-KEY1-COMMA-1 = ",";
  KL07W01.KL07W-KEY1-2 = KL07WPL1.AR-AR-AMT;
  KL07W01.KL07W-KEY1-COMMA-2 = ",";
  KL07W01.KL07W-KEY1-3 = KL07WPL1.KL07W-LO-DT;
  KL07W01.KL07W-KEY1-4 = KL07WPL1.KL07W-HI-DT;
  ;
end // end KL07S-TA1TBLKE

// VALIDATE TO/FROM DAYS
Function KL07S-TO-FROM-DAYS()
   /* **************************************************************/
   /* This statement group determines a date range using the     **/
   /* the number of days entered by the user.  Number of DAY1    **/
   /* is used to calculate the HI or most recent date and the    **/
   /* number in DAY2 is used to calculate the LO or oldest date. **/
   /* For example: day1 = 30 & day2 = 60, curr dt = 19971120     **/
   /* **/
   /* curr dt - day1                     curr dt - day2         **/
   /* 19971020                         19970920               **/
   /* HI dt <-------------------> LO                     **/
   /* **/
   /* records with setup date between these dates will be       **/
   /* retrieved.                                                **/
   /* **************************************************************/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-16-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-TO-FROM-DAYS";
  ;
  KL07W01.KL07W-ERR-FL = "N";
  ;
  if (KL07W01.KL07W-MAP-PTR == 1)
    KL07W01.KL07W-HI-DAY = KL07M001.KL07M-NBR-OF-DAY1;
    KL07W01.KL07W-LO-DAY = KL07M001.KL07M-NBR-OF-DAY2;
  else
    KL07W01.KL07W-HI-DAY = KL07M005.KL07M-NBR-OF-DAY1;
    KL07W01.KL07W-LO-DAY = KL07M005.KL07M-NBR-OF-DAY2;
  end
  ;
  ;
  if (KL07W01.KL07W-LO-DAY < KL07W01.KL07W-HI-DAY && 
  KL07W01.KL07W-LO-DAY != 0)
    KL07W01.KL07W-ERR-FL = "Y";
  else
    if (KL07W01.KL07W-LO-DAY == 0 && 
    KL07W01.KL07W-HI-DAY == 0)
      KL07WPL1.KL07W-LO-DT = -1;
      KL07WPL1.KL07W-HI-DT = -1;
    else
      if (KL07W01.KL07W-LO-DAY == 0) /* if no DAY2 entered then sub 10 yr*/
   /* off of curr dt for lo value*/
        KL07W01.KL07W-FMT3-DT = KL07W01.ZZ-CHNG-DT; /* of date range.*/
        KL07W01.KL07W-FMT3-DT-CCYY = KL07W01.KL07W-FMT3-DT-CCYY - 10;
        KL07WPL1.KL07W-LO-DT = KL07W01.KL07W-FMT3-DT;
      else
        TA2REC.TA2GRGGN = KL07W01.ZZ-CHNG-DT; /* pass currdt & make*/
        KL07W01.KL07W-LO-DAY = KL07W01.KL07W-LO-DAY * -1; /* frm day neg*/
        TA2REC.TA2DYAOD = KL07W01.KL07W-LO-DAY; /* dt prg will sub*/
        XSCLSDT(); /* days from currdt.*/
        KL07WPL1.KL07W-LO-DT = TA2REC.TA2GRGGN;
      end
      ;
      if (KL07W01.KL07W-HI-DAY == 0) /* if no DAY1 then use curr dt*/
   /* for low value of date range.*/
        KL07WPL1.KL07W-HI-DT = KL07W01.ZZ-CHNG-DT;
      else
        TA2REC.TA2GRGGN = KL07W01.ZZ-CHNG-DT; /* pass currdt*/
        KL07W01.KL07W-HI-DAY = KL07W01.KL07W-HI-DAY * -1;
        TA2REC.TA2DYAOD = KL07W01.KL07W-HI-DAY;
        XSCLSDT();
        KL07WPL1.KL07W-HI-DT = TA2REC.TA2GRGGN;
      end
    end
  end
  ;
  ;
end // end KL07S-TO-FROM-DAYS

// updt MAP1 & ARRAY with changes
Function KL07S-UPDT-MP1-ARY()
   /* *************************************************************/
   /* * Make any changes made to data on screen to MAP1 detail   **/
   /* * lines and to the data in the internal array.             **/
   /* * The internal array (kl07wclm) is used to populate        **/
   /* * the screen datail lines and contains the data retrieved  **/
   /* * from the claims in suspense database.                    **/
   /* *                                                          **/
   /* * Update                                                   **/
   /* * Fct cd      Action                                       **/
   /* * -------    --------------------------------------------- **/
   /* *   A        Update nike clm # on displayed detail lines   **/
   /* *            using the Updt Nike clm# from scrn header.    **/
   /* *   C        Update nike clm # on selected detail line     **/
   /* *            using the Updt Nike clm# from scrn header.    **/
   /* * D,R&E      Update function code with enter value.        **/
   /* *   X        Blank out function code.                      **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 09-25-97   PPERK1     NEW                                **/
   /* * 06-21-00   SSANK1     ADDED FCT-CD 'E'                   **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-UPDT-MP1-ARY";
  ;
  if (KL07M001.KL07M-UPDT-FCT-CD[1] == "A" || 
  KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "C")
    if (KL07M001.KL07M-UPDT-CLM-NBR != 0)
      KL07WCLM.CL-CLM-NBR[KL07W-CLX1] = KL07M001.KL07M-UPDT-CLM-NBR;
      KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX] = KL07M001.KL07M-UPDT-CLM-NBR;
    end
    if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks)
      KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1] = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
      KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1] = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
      KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
      KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
    end
    if (KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
      KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1] = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
      KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
    end
  else
    ;
    KL07W01.KL07W-FCT-CD-OITM-IND = KL07M001.KL07M-FCT-CD-OITM-IND;
    /* tcs changes begin  06/21/00*/
    if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "D"
     || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "R"
     || KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "E")
    /* tcs changes end    06/21/00*/
      KL07WCLM.AR-WROF-ACT-CD[KL07W-CLX1] = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
      KL07W01.KL07W-FCT-CD = KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX];
      KL07M001.KL07M-FCT-CD-OITM-IND[KL07W-LINEX] = KL07W01.KL07W-FCT-CD-OITM-IND;
    else
      if (KL07M001.KL07M-UPDT-FCT-CD[KL07W-LINEX] == "X")
        KL07WCLM.AR-WROF-ACT-CD[KL07W-CLX1] = " ";
        KL07W01.KL07W-FCT-CD = " ";
        KL07M001.KL07M-FCT-CD-OITM-IND[KL07W-LINEX] = KL07W01.KL07W-FCT-CD-OITM-IND;
      end
    end
    ;
    KL07WCLM.CL-CLM-NBR[KL07W-CLX1] = KL07M001.KL07M-DTL-CLM-NBR[KL07W-LINEX];
    ;
    KL07WCLM.YCR-CLM-RSN-CD[KL07W-CLX1] = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
    ;
    KL07WCLM.YRC-RT-CSE-CD[KL07W-CLX1] = KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX];
    /* tcs changes begin 06/21/00*/
    KL07WCLM.AR-CUST-CLM-REFNBR[KL07W-CLX1] = KL07M001.KL07M-DTL-CLM-REFNBR[KL07W-LINEX];
    ;
    KL07WCLM.IV-IVC-ID[KL07W-CLX1] = KL07M001.KL07M-DTL-IV-IVC-ID[KL07W-LINEX];
    /* tcs changes end   06/21/00*/
    ;
  end
end // end KL07S-UPDT-MP1-ARY

// EDIT MAP 1 DTL YCR & YRC
Function KL07S-YCR-YRC()
   /* *************************************************************/
   /* * Edit/validate any changes that will be made to the       **/
   /* * detail line ycr/yrc fields from the update fields of     **/
   /* * the screen header fields.                                **/
   /* *                                                          **/
   /* * This stmt group will be executed if function code of     **/
   /* * A or C have been entered on the detail line and no       **/
   /* * detail fields are being updated.                         **/
   /* *                                                          **/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 11-10-97   PPERK1     NEW                                **/
   /* *************************************************************/
  ;
  KL07W01.KL07W-CURR-PROC-NM = "KL07S-DTL-YCR-YRC";
  ;
  set KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD initialAttributes;
  set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD initialAttributes;
  set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] initialAttributes;
  set KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] initialAttributes;
  ;
   /* no changes to make to the detail fields - so nothing to edit*/
  if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD is blanks && 
  KL07M001.KL07M-UPDT-YRC-RT-CSE-CD is blanks)
    return;
  end
  ;
   /* ****************************************************************/
   /* edit changes to dtl line fields from corresponding hdr fields*/
   /* ****************************************************************/
  ;
   /* at this point if updt ycr was entered then the combination*/
   /* of updt ycr & yrc have been validated and can both be used*/
   /* to updt the detail ycr/yrc values.*/
  ;
  if (KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD not blanks)
    KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-YCR-CLM-RSN-CD;
    KL07M001.KL07M-DTL-YRC-RT-CSE-CD[KL07W-LINEX] = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
  else
    ;
  /* if just updt yrc entered then it must be validated in combination*/
  /* with the detail line ycr field value.*/
    if (KL07M001.KL07M-UPDT-YRC-RT-CSE-CD not blanks)
      if (KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] is blanks)
        KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
        KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 102;
        set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] cursor, red;
        set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD red;
      else
        ;
          /* check if clm rsn code requires a rt cse code*/
        KL07W01.KL07W-YRCTBL-KEY-YRC = "00";
        KL07W01.KL07W-YRCTBL-KEY-YCR = KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX];
        if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
            /* root cause code is required for this clm rsn cd*/
           /* check if the entered rt cse code is valid with the dtl ycr*/
          KL07W01.KL07W-YRCTBL-KEY-YRC = KL07M001.KL07M-UPDT-YRC-RT-CSE-CD;
          if (KL07W01.KL07W-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* is combo active*/
            if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
              KL07W01.KL07W-DTL-CHG-FL = "Y";
            else
              KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0805;
                                   /* invalid root cause code*/
              KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
              set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, modified, red;
              set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] red;
            end
          else /* ycr & yrc combo not in table*/
            KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0805;
                                   /* invalid root cause code*/
            KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
            set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, modified, red;
            set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] red;
          end
        else
          KL07WSC1.KL07W-DTL-ERR-NBR[KL07W-LINEX] = 0791;
                                   /* rt cse cd not required*/
          KL07W01.KL07W-DTL-ERR-FL[KL07W-LINEX] = "Y";
          set KL07M001.KL07M-UPDT-YRC-RT-CSE-CD cursor, modified, red;
          set KL07M001.KL07M-DTL-YCR-CLM-RSN-CD[KL07W-LINEX] red;
        end
      end
    end
  end
  ;
end // end KL07S-YCR-YRC

// edit credit denial letter date
Function KL07S41()
   /* ************************************************************/
   /* *      edit the credit denial letter date                 **/
   /* *                                                         **/
   /* *  denial date is only valid if claim status is 'denied'  **/
   /* *                                                         **/
   /* ************************************************************/
   /* * Note: this stmt group is a clone of kl0es41 with item   **/
   /* *       name changes                                      **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S41"; /* set current process name*/
  ;
  ;
  if (KL07M010.YCSCD != "DEN" /* if claim status not denied*/
   && KL07M010.KL07WLDT == " ")
    KL07W02.CLADNLDT = 0;
    return;
  end
  ;
  ;
  if (KL07M010.YCSCD == "DEN" /* if claim status is denied*/
   && KL07M010.KL07WLDT == " ")
    converseLib.validationFailed(56); /* denial date is required*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL07M010.KL07WLDT cursor, modified, bold;
    return;
  end
  ;
  ;
  if (KL07M010.YCSCD != "DEN" /* if claim status not denied*/
   && KL07M010.KL07WLDT != " ")
    converseLib.validationFailed(73); /* denial date invalid for claim status*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL07M010.KL07WLDT cursor, modified, bold;
    return;
  end
  ;
  CLXREC.XXXEDFLD = KL07M010.KL07WLDT;
  XPCL004(); /* edit the date*/
  if (CLXREC.CLXVALDT == "Y")
    /* -------------------------- y2k in begin --------------------*/
    KL07W01.KL07W-DT-ENTER = TA2REC.TA2GRGGN; /* ccyymmdd*/
    KL07W01.KL07W-CUR-DT = VGVar.currentGregorianDate; /* ccyymmdd*/
    if (KL07W01.KL07W-DT-ENTER-CCYY <= KL07W01.KL07W-CUR-DT-CCYY)
      KL07M010.KL07WLDT = CLXREC.XXXFLDT; /* move formatted to screen*/
      KL07W02.CLADNLDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(74); /* denial date not valid*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL07M010.KL07WLDT cursor, modified, bold;
      return;
    end
    /* -------------------------- y2k in end   --------------------*/
  else
    converseLib.validationFailed(74); /* denial date not valid*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL07M010.KL07WLDT cursor, modified, bold;
    return;
  end
  ;
  ;
end // end KL07S41

// edit the customer number
Function KL07S43()
   /* *************************************************************/
   /* * NOTE: this stmt group is a clone of kl0es43 10/19/97     **/
   /* *************************************************************/
   /* *      edit the customer number                            **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY - KL0ES43                            **/
   /* * 1. phase (B) enhancements added xcccd's s and in         **/
   /* *    the customer inactive test (taken out 12/88)          **/
   /* * 2. added edit to not allow customer changes unless the   **/
   /* *    company id stays the same.                            **/
   /* *  6-14-90 bcourt replace cl0et01 with xbctbl to get brand's*/
   /* *      legal entity.                                       **/
   /* * 08-10-90 CHELLM Added edit to allow comp-co's entered for**/
   /* *      only cu-co-id's with XAT=02 and edit to prevent     **/
   /* *      Sales COGS from being entered as Customer Accounts. **/
   /* * 08-24-90 SGORGA  Allow claims against some Nil-customer  **/
   /* *      invoices to bypass code that prevents Nil claims    **/
   /* *      being created in Option 2.                          **/
   /* * 09-28-90 SGORGA  Added another Nil-customer invoices.    **/
   /* * 11-21-90 SGORGA  Added Nil invoices 203447,203451.       **/
   /* * 01-21-91 SGORGA  Added 20 Nil invoices.                  **/
   /* * 02-18-91 SGORGA  Added Nil invoice #6298054              **/
   /* * 02-21-91 SGORGA  Added Nil invoice #6573603              **/
   /* * 03-14-91 SGORGA  Added Nil invoice #6763895,6763634      **/
   /* * 04-19-91 SGORGA  Added Nil invoice #6984512,6978386.     **/
   /* * 05-07-91 SGORGA  Created table CL7TBL to store the NIL   **/
   /* *                  invoice nbrs that we allow domestic     **/
   /* *                  claims to be created against.  Removed  **/
   /* *                  hardcoded NIL invoice nbrs from this    **/
   /* *                  process - replaced with table inquiry.  **/
   /* * 10-28-91 twatso  added code for osd so we can implement  **/
   /* *                  in december 1991                        **/
   /* * 12-30-91 twatso  added code for osd and kuccoid 666666   **/
   /* *                  to not give msg 695 if company 666666   **/
   /* *                  and osd (even tho the ofshr fl = n - for**/
   /* *                  company 666666                          **/
   /* * 11-03-94 sgorga  Consumer claims are no longer being     **/
   /* *                  created in kl0e.  So, the edit here     **/
   /* *                  checks the customer - if a claim is     **/
   /* *                  being created - to be sure it isn't a   **/
   /* *                  consumer customer.                      **/
   /* *************************************************************/
   /* 10-09-92 sgorga  When a claim is created for an inactive   **/
   /* or closed customer, the Claim system won't accept that     **/
   /* customer's account.  To allow the claim to be created (or  **/
   /* updated), there are 3 special account nbrs. The appropriate**/
   /* one is entered in place of the customer nbr.  They are:    **/
   /* . 666666 = for external closed inactive NIKE accts.   **/
   /* .9666666 = for external closed inactive SIDE1 accts.  **/
   /* . 888888 = for internal closed inactive accounts.     **/
   /* **/
   /* By external, we mean the retail-based accounts.            **/
   /* By internal, we mean the NIKE-based accounts.              **/
   /* **/
   /* For task CL1185, I added the new internal acct nbr 888888. **/
   /* **/
   /* *************************************************************/
   /* * NOTE: this stmt group is a clone of kl0es43 10/19/97     **/
   /* * MAINTENANCE HISTORY - KL07S43                            **/
   /* *                                                          **/
   /* * 10-19-97 PPERK1  cloned.                                 **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S43"; /* set current process name*/
  ;
   /* check for consumer customer - don't allow if clm is being created.*/
  if (CLWREC.CLWACTIV == "A" /* if adding*/
   && KL07M010.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
    converseLib.validationFailed(766); /* can't create consumer claim in KL0E*/
    set KL07M010.KUCCOID cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end
  ;
  KL07S4D(); /* get store name now, because name will*/
                                   /* be missed*/
   /* ************************************************/
   /* ** 10-07-92  Below code doesn't make sense  ****/
   /* ** We think it shouldn't be here but are    ****/
   /* ** leaving it for now.  Most of the code    ****/
   /* ** will never execute - there's a mistake.  ****/
   /* ************************************************/
   /* if errors are found with the customer number*/
  if (VCLHDR02.KUCCOID == 999999 /* if old company is nike special co*/
   || VCLHDR02.KUCCOID == 9999999) /* or old company is side-1 spcl co*/
    if (KL07M010.KUCCOID == 666666  /* if new co is external nike special co*/
     || KL07M010.KUCCOID == 9666666 /* or new co is external side-1 spcl co*/
     || KL07M010.KUCCOID == 888888) /* or new co is internal account*/
       /* next sentence ... special exception*/
    else
      if (KL07M010.KUCCOID == 666666  /* if new co is external nike spcl co*/
       || KL07M010.KUCCOID == 9666666 /* or new co is ext. side-1 spcl co*/
       || KL07M010.KUCCOID == 888888) /* or new co is internal account*/
        if (KL07M010.KUCCOID != KL07W03.KUCCOID)
          if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
           || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
            KUCREC.KUCGRP = KL07W01.KUCGRP[1];
            if (KL07W03.KUCCOID != KUCREC.KUCCOID)
              KUCREC.KUCCOID = KL07W03.KUCCOID;
              set SQLCA empty;
              call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get compny record*/
              if (SQLCA.VAGen_SQLCODE != 0) /* if customer is not on file*/
                converseLib.validationFailed(83); /* cant use unless closed or inactive*/
                set KL07M010.KUCCOID cursor, modified, bold;
                CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                return;
              end
            end
            if (KUCREC.XCCCD == "W" /* old company credit status must*/
             || KUCREC.XCCCD == "X" /* be one of these*/
             || KUCREC.XCCCD == "Y" 
             || KUCREC.XCCCD == "Z" 
             || KUCREC.XCCCD == "T" 
             || KUCREC.XXXSTAT == "I")
               /* next sentence*/
            else
              converseLib.validationFailed(619); /* credit status must be = w,x,y,z,i*/
              set KL07M010.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            end
          end
        end
      end
    end
  end
   /* ** 10-07-92  End of questionable code       ****/
   /* ************************************************/
  ;
  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  ;
  ;
                                  /* ;         (cwh 9/5/89)*/
  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (YCTTBL.YCTCDRF[CLXYCTX] == "Y") /* if claim type is cdr*/
      if (KL07M010.KUCCOID == 0) /* and no cust nbr was entered*/
        if (KL07M010.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
         && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
          KL07M010.KUCCOID = 9899999;
        else
          KL07M010.KUCCOID = 899999; /* default to 899999*/
        end
        KL07M010.KUMSTRID = 0;
        KL07M010.XNXCD = 0;
        converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
        set KL07M010.KUCCOID cursor, modified, bold;
        set KL07M010.KUMSTRID modified, bold;
        set KL07M010.XNXCD modified, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end
  ;
  ;
  KL07S4A(); /* select kucrec           (*cwh*/
                                  /* 9/5/89*)*/
  ;
  if (CLWREC.CLWACTIV == "I"   /* IF CL0E IS IN INQUIRY MODE*/
   || VCLHDR02.YCSCD1 == "CMP" /* OR CLAIM STATUS IS 'CMP','CAN','DEN'*/
   || VCLHDR02.YCSCD1 == "CAN" /* 'EXP', OR 'RSP' (RESHIPPED) THEN*/
   || VCLHDR02.YCSCD1 == "DEN" /* DONT SUBSTITUTE CUSTOMER*/
   || VCLHDR02.YCSCD1 == "ERA" /* EXPIRED RA*/
   || VCLHDR02.YCSCD1 == "RSP" /* RESHIPPED*/
   || VCLHDR02.YCSCD1 == "RUA") /* NIKE REFUSAL*/
     /* NEXT SENTNECE*/
  else
    if (KUCREC.XXXSTAT != "A") /* IF CUSTOMER IS NOT ACTIVE SEE IF*/
      KL07S4C(); /* IT IS ON THE DCUST.VCONV001 TABLE*/
      if (KUCREC.XXXSTAT == "A") /* AND SUBSTITUTE OPEN CUST IF FOUND*/
        KL07S4D(); /* get store name now, new*/
                                   /* customer-store found*/
        return;
      end
    end
  end
  ;
  ;
  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (YCTTBL.YCTCDRF[CLXYCTX] == "Y") /* and have cdr claim type*/
      if (KUCREC.XAUCD == "12" /* and cdr acct class*/
       || KUCREC.XAUCD == "13" 
       || KUCREC.XAUCD == "14" 
       || KUCREC.XAUCD == "19" 
       || KUCREC.XAUCD == "43" 
       || KUCREC.XAUCD == "62")
        if (KL07M010.KUCCOID == 899999  /* if nike special customer*/
         || KL07M010.KUCCOID == 806642  
         || KL07M010.KUCCOID == 806643  
         || KL07M010.KUCCOID == 824770  
         || KL07M010.KUCCOID == 922261  
         || KL07M010.KUCCOID == 9899999 /* if side-1 special customer*/
         || KL07M010.KUCCOID == 9806642 
         || KL07M010.KUCCOID == 9806643 
         || KL07M010.KUCCOID == 9824770 
         || KL07M010.KUCCOID == 9922261)
           /* next sentence*/
        else /* else*/
          if (KL07M010.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
           && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
            KL07M010.KUCCOID = 9899999;
          else
            KL07M010.KUCCOID = 899999; /* default to 899999*/
          end
          KL07M010.KUMSTRID = 0;
          KL07M010.XNXCD = 0;
          converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
          set KL07M010.KUCCOID cursor, modified, bold;
          set KL07M010.KUMSTRID modified, bold;
          set KL07M010.XNXCD modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else /* else*/
        if (KL07M010.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
         && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
          KL07M010.KUCCOID = 9899999;
        else
          KL07M010.KUCCOID = 899999; /* default to 899999*/
        end
        KL07M010.KUMSTRID = 0;
        KL07M010.XNXCD = 0;
        converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
        set KL07M010.KUCCOID cursor, modified, bold;
        set KL07M010.KUMSTRID modified, bold;
        set KL07M010.XNXCD modified, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end
  ;
  if (CLWREC.CLWACTIV == "I" /* if only inquiring*/
   || VCLHDR02.YCSCD1 == "CMP"
   || VCLHDR02.YCSCD1 == "CAN")
     /* next sentence...doesnt matter if cmpny closed*/
  else
    if (VCLHDR02.KUCCOID == 999999 /* if old co is nike spcl cust*/
     && KL07M010.KUCCOID == 666666) /* if new co external nike spcl cust*/
       /* next sentence ... special exception*/
    else
      if (VCLHDR02.KUCCOID == 9999999 /* or old co is side-1 spcl cust*/
       && KL07M010.KUCCOID == 9666666) /* or new co extrnl side-1 spcl cust*/
         /* next sentence ... special exception*/
      else
        if (VCLHDR02.KUCCOID == 999999 /* if old co is nike spcl cust*/
         && KL07M010.KUCCOID == 888888) /* if new co is internal account*/
       /* next sentence ... special exception*/
        else
          if (KUCREC.XCCCD == "W" /* these codes mean the company*/
           || KUCREC.XCCCD == "X" /* is inactive.*/
           || KUCREC.XCCCD == "Y" 
           || KUCREC.XCCCD == "Z" 
           || KUCREC.XCCCD == "T" 
           || KUCREC.XXXSTAT == "I") /* inactive company status*/
            if (KUCREC.XAUCD in XAUTBL.XAUCD /* look at the acct class cd*/
             && XAUTBL.XAUARIND[sysVar.arrayIndex] == "I") /* if it's internal*/
              converseLib.validationFailed(746); /* internal company is closed/inactive*/
              set KL07M010.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            else /* default to message saying use 666666 or 9666666*/
              converseLib.validationFailed(137); /* external company is closed/inactive*/
              set KL07M010.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  if (CLWREC.CLWMNOPT == 3) /* if international*/
    if (KUCREC.XAUCD == "31" /* and intl owned*/
     || KUCREC.XAUCD == "32" /* or exports*/
     || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
      /* next sentence*/
    else
      converseLib.validationFailed(33); /* company must be intl*/
      set KL07M010.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end
  ;
    /* 05-07-91 sgorga*/
  if (CLWREC.CLWACTIV == "I") /* if only inquiring*/
     /* next sentence...doesnt matter if intl or not*/
  else
    if (KL07M010.IV0IVCID in CL7TBL.IV0IVCID)
                                   /* 5-07-91  Allow claims against*/
       /* next sentence   the NIL invoice nbrs in CL7TBL to bypass*/
                       /* below edit.*/
    else
      if (KL07M010.YCTCD == "DEF" /* if defective claim type*/
       || KL07M010.YCTCD == "OSD") /* if defective(off shore account)type*/
        if (KUCREC.XAUCD == "31" /* and intl owned*/
         || KUCREC.XAUCD == "32" /* or exports*/
         || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
          converseLib.validationFailed(64); /* intl cmpny shld use menu opt 3*/
          set KL07M010.KUCCOID cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* yes there is an error*/
          return;
        end
      end
    end
  end
  ;
      /* edit  added 08-10-90*/
  ;
  if (KUCREC.XAUCD == "52")
    converseLib.validationFailed(643); /* Sales COGS not allowed as Customer*/
                                   /* account*/
    set KL07M010.KUCCOID cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes, there's an error*/
    return;
  end
  ;
      /* edit  added 08-10-90*/
  ;
  if (KL07M010.OP1CMPNB > 0) /* IF COMP-CO ENTERED*/
    if (KUCREC.XAUCD in XAUTBL.XAUCD)
      if (XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* CAN ONLY BE XAT=02*/
         /* next sentence*/
      else
        converseLib.validationFailed(644); /* comp-co-id not allowed for CUST's*/
                                   /* acct type*/
        set KL07M010.OP1CMPNB cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes, there's an error*/
        return;
      end
    end
  end
  ;
  ;
  if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
   || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
    if (KUCREC.KUCCOID == IV0REC.KUCCOID
     || KUCREC.KUCCOID == 666666  /* nike external special customer*/
     || KUCREC.KUCCOID == 9666666 /* side-1 external special customer*/
     || KUCREC.KUCCOID == 888888) /* nike internal account*/
       /* next sentence*/
    else
      KUCREC.KUCCOID = IV0REC.KUCCOID;
      set SQLCA empty;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
        if (KUCREC.KUCGRPID == KL07W01.KUCGRPID
         && KUCREC.KUCGRPID != 0)
           /* next sentence*/
        else
          if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
           && KL07M010.KUCCOID == 666666) /* external*/
             /* next sentence ... special exception*/
          else
            if (VCLHDR02.KUCCOID == 9999999 /* side-1 special customers*/
             && KL07M010.KUCCOID == 9666666) /* external*/
               /* next sentence ... special exception*/
            else
              if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
               && KL07M010.KUCCOID == 888888) /* internal*/
               /* next sentence ... special exception*/
              else
                converseLib.validationFailed(116); /* company/group dont match*/
                set KL07M010.KUCCOID cursor, modified, bold;
                CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                return;
              end
            end
          end
        end
      else
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "KL07S43";
        XPCL010();
      end
    end
  end
  ;
  if (CLXREC.CLXORDFD == "N" /* if the order was not found*/
   && CLXREC.CLXINVFD == "N") /* and the invoice was not  found*/
    if (KUCREC.KUCCOID == 666666  /* if nike extrnl special customer*/
     || KUCREC.KUCCOID == 9666666 /* or side-1 extrnl special customer*/
     || KUCREC.KUCCOID == 888888) /* or nike internal account*/
      /* next sentence*/
    else
      if (VCLHDR02.KUCCOID != KL07M010.KUCCOID
       && VCLHDR02.KUCCOID != 0)
        KUCREC.KUCCOID = VCLHDR02.KUCCOID;
        set SQLCA empty;
        call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
          if (KUCREC.KUCGRPID == KL07W01.KUCGRPID
           && KUCREC.KUCGRPID != 0)
             /* next sentence*/
          else
            if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
             && KL07M010.KUCCOID == 666666) /* external*/
               /* next sentence ... special exception*/
            else
              if (VCLHDR02.KUCCOID == 9999999 /* side-1 special customers*/
               && KL07M010.KUCCOID == 9666666) /* external*/
                 /* next sentence ... special exception*/
              else
                if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
                 && KL07M010.KUCCOID == 888888) /* internal*/
                 /* next sentence ... special exception*/
                else
                  converseLib.validationFailed(116); /* company/group dont match*/
                  set KL07M010.KUCCOID cursor, modified, bold;
                  CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                  return;
                end
              end
            end
          end
        else
          TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
          TA1REC.TA1DBASE = "DCUST";
          TA1REC.TA1TBLVU = "VCMPNY01";
          TA1REC.TA1LOCAT[2] = "KL07S43";
          XPCL010();
        end
      end
    end
  end
  ;
  ;
  KUCREC.KUCGRP = KL07W01.KUCGRP; /* restore saved record*/
  ;
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KL07M010.KUMSTRID;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if store is on file*/
    KL07M010.KUMSTRNM = KUMREC.KUMSTRNM;
    KL07W02.KUMSTRID = KUMREC.KUMSTRID;
    CLWREC.KUCCONM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if store was not found*/
      converseLib.validationFailed(82); /* store not found*/
      set KL07M010.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "KL07S43";
      XPCL010();
    end
  end
  ;
  if (KUMREC.XXXSTAT == "I")
    if (KL07M010.KUMSTRID == 0
     && KUCREC.XXXSTAT != "I")
      if (KUCREC.XCCCD == "W"
       || KUCREC.XCCCD == "X"
       || KUCREC.XCCCD == "Y"
       || KUCREC.XCCCD == "Z"
       || KUCREC.XCCCD == "T")
        converseLib.validationFailed(376); /* store is inactive*/
        set KL07M010.KUMSTRID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes there is an error*/
        return;
      else
         /* next sentence*/
      end
    else
      converseLib.validationFailed(376); /* store is inactive*/
      set KL07M010.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end
   /* validate that the store is set up for osd if kl07m010.yctcd = 'osd'*/
  ;
  if (KL07M010.YCTCD == "OSD")
    if (KUMREC.CU-OFSHR-FL == "N"
     && KUMREC.KUCCOID != 666666 /* unless company is inactive or closed*/
     && KUMREC.KUCCOID != 888888) /* unless company is inactive or closed*/
      converseLib.validationFailed(695); /* store not approved for offshore*/
      set KL07M010.YCTCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end
  ;
  ;
   /* VALIDATE THE DEPARTMENT ID BY LOOKING FOR A MATCH ON GPC*/
   /* AND DEPARTMENT.*/
   /* IF NOT FOUND THEN SELECT ALL DCUST.VDEPT001 (KUNREC) LINES*/
   /* FOR THE CO-STORE-DEPT.*/
   /* IF ONE IS FOUND THEN DEPT IS OKAY.*/
   /* IF NONE FOUND SHOW THE ERROR MESSAGE.*/
  ;
   /* IF CLAIM TYPE IS 'DAA', 'NBC', OR 'SCO' AND THE DEPT-ID IS*/
   /* ZERO THEN WE SKIP THE EDIT FOR A VALID DEPARTMENT.*/
  ;
  if (KL07M010.YCTCD == "DAA"
   || KL07M010.YCTCD == "NBC"
   || KL07M010.YCTCD == "SCO")
    if (KL07M010.XNXCD == 0)
      KL07W02.XNXCD = KL07M010.XNXCD;
      return;
    end
  end
  ;
  KUNREC.KUCCOID = KUMREC.KUCCOID;
  KUNREC.KUMSTRID = KUMREC.KUMSTRID;
  KUNREC.XNXCD = KL07M010.XNXCD;
  KUNREC.XGPCD = KL07M010.XGPCD;
  ;
  ;
  set SQLCA empty;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* get customer record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    KL07W02.XNXCD = KUNREC.XNXCD;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if customer was not found*/
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "KL07S43";
      XPCL010();
    end
  end
  ;
   /* 072489 add ** due to iomod change,*/
   /* old 'ss' got co/store/dept, new gets co/store/dept/gpc*/
  KUNREC.XGPCD = "**"; /* get all gpc*/
  ;
  set SQLCA empty;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* set of customer records*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING CUSTOMER SET";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1LOCAT[2] = "KL07S43";
    XPCL010();
  end
  ;
  ;
  set SQLCA empty;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* the first record of set*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    KL07W02.XNXCD = KUNREC.XNXCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(693); /* customer number not found*/
      set KUNREC empty;
      set KL07M010.KUCCOID cursor, modified, bold;
      set KL07M010.KUMSTRID modified, bold;
      set KL07M010.XNXCD modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "KL07S43";
      XPCL010();
    end
  end
  ;
  ;
end // end KL07S43

// select KUCREC for cust nbr
Function KL07S4A()
   /* ************************************************************/
   /* *      select KUCREC for customer number                  **/
   /* *                                                         **/
   /* * Maintenance (KL0ES4A)                                   **/
   /* *                                                         **/
   /* *   1. 9/5/89 chellm  sgrp created.                       **/
   /* * 10-12-90 bcourt change XCUCD(3) to XCECD. Due to length,**/
   /* *                 keep CL0EW02.XCUCD until CLAREC is chngd.*/
   /* * 02-15-91 chellm change XCUCD to XCECD in CLAREC         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * Maintenance (KL07S4A)                                   **/
   /* * 10-19-97 PPERK1 cloned from kl0es4a.                    **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S4A"; /* set current process name*/
  ;
  ;
  set KUCREC empty;
  ;
  KUCREC.KUCCOID = KL07M010.KUCCOID;
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    KL07W02.XCECD = KUCREC.XCECD; /* 02-15-91*/
    KL07W02.KUCCOID = KUCREC.KUCCOID;
    KL07W01.KUCGRPID = KUCREC.KUCGRPID;
    KL07W01.KUCGRP = KUCREC.KUCGRP; /* save record*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company was not found*/
      converseLib.validationFailed(81); /* company not on file*/
      set KL07M010.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCMPNY01";
      TA1REC.TA1LOCAT[2] = "KL07S4A";
      XPCL010();
    end
  end
  ;
  ;
end // end KL07S4A

// TRY TO FIND CONVERTED CUSTOMER
Function KL07S4C()
   /* ************************************************************/
   /* *      select KUDREC for customer number (DCUST.VCONV001) **/
   /* *                                                         **/
   /* * Maintenance (KL0ES4C)                                   **/
   /* *                                                         **/
   /* *   1. 3/15/91 GDECKE  CREATED                            **/
   /* ************************************************************/
   /* * Maintenance (KL07S4C)                                   **/
   /* *                                                         **/
   /* *   1. 10/19/97 PPERK1 cloned from kl0es4c                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S4C"; /* set current process name*/
  ;
  ;
  set KUDREC empty;
  ;
  KUDREC.KUCCOID = KL07M010.KUCCOID;
  KUDREC.KUMSTRID = KL07M010.KUMSTRID;
  ;
  set SQLCA empty;
  call "IO5570" ("S ", SQLCA, KUDREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if customer is on file*/
   && KUDREC.KUDCSTAT != "I") 
    KL07M010.KUCCOID = KUDREC.KUDCOCID;
    KL07W01.KUCCOID = KUDREC.KUDCOCID;
    KL07S4A(); /* GET COMPANY RECORD*/
    if (KUCREC.XXXSTAT != "I") /* IF CUSTOMER CONVERSION LINE IS ACTIVE*/
      KL07M010.KUMSTRID = KUDREC.KUDSTCID;
      KL07M010.XNXCD = KUDREC.XNXCD;
      converseLib.validationFailed(686);
      CLXREC.CLXERRF = "Y";
      set KL07M010.KUCCOID cursor, modified, bold;
      set KL07M010.KUMSTRID modified, bold;
      set KL07M010.XNXCD modified, bold;
    else
      KL07M010.KUCCOID = KL07W01.KUCCOID;
      KL07S4A(); /* GET COMPANY RECORD*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company CONVERSION TABLE LINE*/
       /* NEXT SENTENCE             ; NOT FOUND THEN NO ACTION*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR-CUST CONVERSION";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCONV001";
      TA1REC.TA1LOCAT[2] = "KL07S4C";
      XPCL010();
    end
  end
  ;
  ;
end // end KL07S4C

// select kumrec for store name
Function KL07S4D()
   /* *************************************************************/
   /* *      select kumrec for the store name                    **/
   /* *      when customer record is closed or inactive          **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY (KL0ES4D)                            **/
   /* * 05/17/91   gdecke   create new statement group           **/
   /* *************************************************************/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY (KL07S4D)                            **/
   /* * 10/19/97   PPERK1   cloned from kl0es4d                  **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S4D"; /* set current process name*/
  ;
  ;
  set KUMREC empty;
  ;
  if (KL07M010.KUCCOID == 0) /* if customer not entered or previously*/
    KUMREC.KUCCOID = VCLHDR02.KUCCOID; /* displayed then use claim*/
    KUMREC.KUMSTRID = VCLHDR02.KUMSTRID; /* header co-store*/
  else
    KUMREC.KUCCOID = KL07M010.KUCCOID; /* use the entered co-store*/
    KUMREC.KUMSTRID = KL07M010.KUMSTRID;
  end
  ;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if store is on file*/
    KL07M010.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if store was not found*/
      KL07M010.KUMSTRNM = "STORE NAME NOT FOUND";
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "KL07S4D";
      XPCL010();
    end
  end
  ;
  ;
end // end KL07S4D

// find if addl nike ivc's exist
Function KL07S55()
   /* ************************************************************/
   /* *      determine if additional nike invoices exist        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * NOTE: this stmt group is a clone of kl0es55 10/19/97    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S55"; /* set current process name*/
  ;
  ;
  KL07W01.OP1CUOID = 0;
  KL07W01.OP1NORID = 0;
  KL07W01.CLBGLIND = " ";
  KL07W01.CLBSRIND = " ";
  ;
  ;
  CLBREC.CLACLMNB = KL07M010.CLACLMNB;
  CLBREC.CLBPMIVC = "*";
  ;
  ;
  set SQLCA empty; /* select the set of ivc records for this claim*/
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "FETCHING INVOICE SET";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX";
    TA1REC.TA1LOCAT[2] = "KL07S55";
    XPCL010();
  end
  ;
  ;
  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL07M010.YITCD = " ";
      CLXREC.YITCD = " ";
      return;
    else
      TA1REC.TA1TBLKE = "FETCHING FIRST INVOICE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "KL07S55";
      XPCL010();
    end
  end
  ;
  ;
  KL07W01.KL07WPIN = CLBREC.IV0IVCID; /* set ws primary invoice nbr*/
  KL07M010.IV0IVCID = CLBREC.IV0IVCID;
  KL07W01.IV0IVCID = CLBREC.IV0IVCID;
  KL07W01.OP1CUOID = CLBREC.OP1CUOID;
  KL07W01.OP1NORID = CLBREC.OP1NORID;
  KL07W01.CLBGLIND = CLBREC.CLBGLIND;
  KL07W01.CLBSRIND = CLBREC.CLBSRIND;
  KL07M010.YITCD = CLBREC.YITCD;
  CLXREC.YITCD = CLBREC.YITCD;
  ;
  ;
  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* there was more than one*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if there was more than one*/
    if (CLBREC.YITCD == "D")
      KL07M010.YITCD = "A"; /* addl dec*/
    else
      if (CLBREC.YITCD == "O")
        KL07M010.YITCD = "M"; /* addl old ibm*/
      else
        if (CLBREC.YITCD == "I")
          KL07M010.YITCD = "Y"; /* addl current ibm*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FETCHING SECOND INVOICE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "KL07S55";
      XPCL010();
    end
  end
  ;
  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* if there was more than one*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = "CLOSING CURSOR FOR CLIVX";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    TA1REC.TA1LOCAT[2] = "KL07S55";
    XPCL010();
  end
  ;
  if (KL07M010.IV0IVCID != 0)
    KL07S95(); /* get previous-claims-on-ivc info*/
  end
end // end KL07S55

// find if addl a/r ref nbr exist
Function KL07S63()
   /* ************************************************************/
   /* *  determine if additional a/r reference numbers exist    **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * Note: this stmt group is a clone of kl0es63 10/19/97    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S63"; /* set current process name*/
  ;
  ;
  set CLCREC empty;
  KL07W01.ARCREFNB = " ";
  KL07W01.ARCCCREF = " ";
  KL07M010.KL07WACF = "N"; /* set addl cust claim xref flag*/
  KL07M010.KL07WAAF = "N"; /* set addl a/r xref flag*/
  ;
  ;
  CLCREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLCREC.CLCPMAR = "*";
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of ar records for this claim*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "FETCHING CLF RECORD SET";
    XPCL010();
  end
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no first record found*/
      KL07M010.KL07WACF = "N";
      KL07M010.KL07WAAF = "N";
      KL07M010.YASCD = " ";
      return;
    else
      TA1REC.TA1TBLKE = "FETCHING FIRST CLF RECORD";
      XPCL010();
    end
  end
  ;
  KL07W01.KL07WAAC = 0; /* zero addl a/r ref nbr counter*/
  KL07W01.KL07WACC = 0; /* zero addl cust clm nbr counter*/
  KL07W01.KL07WCNT = 1; /* initialize record counter*/
  KL07W01.KL07WDON = "N"; /* init done-flag*/
  ;
  while (KL07W01.KL07WDON == "N") /* while not done*/
    if (CLCREC.ARCREFNB != " ")
      if (KL07W01.ARCREFNB == " ")
        KL07W01.ARCREFNB = CLCREC.ARCREFNB;
        KL07M010.ARCREFNB = CLCREC.ARCREFNB;
        KL07W01.KL07WAAC = KL07W01.KL07WAAC + 1;
      else
             /* IF CLCREC.ARCREFNB NE KL07W01.ARCREFNB;*/
        KL07W01.KL07WAAC = KL07W01.KL07WAAC + 1;
             /* END ;*/
      end
    end
    if (CLCREC.ARCCCREF != " ")
      if (KL07W01.ARCCCREF == " ")
        KL07W01.ARCCCREF = CLCREC.ARCCCREF;
        KL07M010.ARCCCREF = CLCREC.ARCCCREF;
        KL07W01.KL07WACC = KL07W01.KL07WACC + 1;
      else
        if (CLCREC.ARCCCREF != KL07W01.ARCCCREF)
          KL07W01.KL07WACC = KL07W01.KL07WACC + 1;
        end
      end
    end
    if (CLCREC.YASCD == "O" /* if status is open*/
     && CLCREC.ARCREFNB != " ")
      KL07M010.YASCD = CLCREC.YASCD;
    end
    set SQLCA empty;
    call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* get the next xref record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and, if good return, determine*/
      KL07W01.KL07WCNT = KL07W01.KL07WCNT + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL07W01.KL07WDON = "Y"; /* we're done*/
      else
        TA1REC.TA1TBLKE = "FETCHING NEXT CLF RECORD";
        XPCL010();
      end
    end
  end
  ;
  set SQLCA empty;
  call "IO1170" ("C3", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  ;
  ;
  if (KL07W01.ARCREFNB != " ") /* if a/r ref nbr was found*/
    if (KL07W01.KL07WAAC > 1) /* and there was multiple records*/
      KL07M010.KL07WAAF = "Y"; /* set additional recs flag*/
    end
    if (KL07M010.YASCD == " ") /* if no open a/r ref nbrs found*/
      KL07M010.YASCD = "C"; /* were open, set status closed*/
    end
  end
  ;
  ;
  if (KL07W01.ARCCCREF != " ") /* if a/r ref nbr was found*/
    if (KL07W01.KL07WACC > 1)
                                   /* and there were multiple cust clm recs*/
      KL07M010.KL07WACF = "Y"; /* set additional recs flag*/
    end
  end
  ;
  ;
end // end KL07S63

// edit the a/r status code
Function KL07S64()
   /* ************************************************************/
   /* *      edit the a/r status code                           **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * NOTE: this stmt group is a clone of kl0es64 10/19/97    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  if (KL07M010.YASCD == " ") /* if no status entered*/
    if (KL07M010.ARCREFNB != " ") /* if a/r ref nbr was entered*/
      KL07M010.YASCD = "O"; /* a/r status defaults to 'o'*/
    end
  end
  ;
  ;
  ;
  if (KL07M010.YASCD != " ") /* if a/r status was entered*/
    if (KL07M010.YASCD in YASTBL.YASCD)
                                   /* if a/r status code is in table*/
      KL07M010.YASDESC = YASTBL.YASDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(136); /* invalid a/r status code*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL07M010.YASCD cursor, modified, bold;
      return;
    end
  else
    KL07M010.YASCD = " ";
    KL07M010.YASDESC = " ";
  end
  ;
  ;
  ;
end // end KL07S64

// expand the rtn auth id
Function KL07S65()
   /* ************************************************************/
   /* *      expand the return authorization id                 **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) enhancement: checking work sheet entered  **/
   /* *     flag to set the user pass word                      **/
   /* *  2. 12-6-89 chellm moved the code that formats the auth **/
   /* *             by name to new PROC CL0E117 and added code  **/
   /* *             to format Prev Auth Name also in CL0E117.   **/
   /* ************************************************************/
   /* * NOTE: this stmt group is a clone of kl0es65 10/19/97    **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S65"; /* set current process name*/
  ;
  ;
  ;
  ;
  if (VCLHDR02.CLAWSENF == "Y") /* phase (B) enhancement*/
    if (VCLHDR02.CLYATHID != 0)
      set KL07M010.KL07ML10 skip, invisible; /* begin (12-6-89)*/
      set KL07M010.KL07WPNM skip, invisible;
      CLYREC.CLYATHID = VCLHDR02.CLYATHID;
      ;
      KL07217();
      ;
      KL07M010.KL07WANM = IVZREC.IVZFNAME;
      ;
    else
      if (VCLHDR02.CLAPRATH != 0)
        set KL07M010.KL07ML10 initialAttributes;
        set KL07M010.KL07WPNM initialAttributes;
        CLYREC.CLYATHID = VCLHDR02.CLAPRATH;
        ;
        KL07217();
        ;
        KL07M010.KL07WPNM = IVZREC.IVZFNAME;
        ;
      end
    end /* (end 12-6-89)*/
  end
  ;
end // end KL07S65

// edit the exceptions flag
Function KL07S66()
   /* ************************************************************/
   /* * Note: this stmt group is a clone of kl07es66            **/
   /* ************************************************************/
   /* *      edit the exceptions flag                           **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) using the new exception flag to process   **/
   /* *     exceptions                                          **/
   /* ************************************************************/
   /* * 10/19/97 PPERK1                                         **/
   /* ************************************************************/
  ;
  ;
  if (VCLHDR02.CLAXCIND == "N"
   || VCLHDR02.CLAXCIND == " ")
    KL07M010.CLAXCIND = " ";
    set KL07M010.CLAXCIND skip, invisible;
    set KL07M010.KL07ML8 skip, invisible;
  else
    KL07M010.CLAXCIND = "Y";
  end
  ;
  ;
  ;
end // end KL07S66

// GET COMPANY RECORD,UPDT CLWREC
Function KL07S70()
   /* **********************************************************/
   /* *  get company record, update clwrec with new value     **/
   /* *  of legal entity code and legal entity abbreviation   **/
   /* **********************************************************/
   /* * NOTE: this stmt group is a clone of kl07es70 10/19/97 **/
   /* **********************************************************/
  set SQLCA empty;
  if (KUCREC.KUCCOID == 0) /* if no company id then set legal entity code*/
    KUCREC.XLECD = "  "; /* set output fields blank*/
    CLWREC.XLECD = "  "; /* legal entity*/
    CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
    KUCREC.XAUCD = "  "; /* account class code*/
  else
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.XLECD = "  "; /* set output fields blank*/
      CLWREC.XLECD = "  "; /* legal entity*/
      CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
      KUCREC.XAUCD = "  "; /* account class code*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if company not found- abend*/
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0ES70";
        XPCL010();
      else
        CLWREC.XLECD = KUCREC.XLECD;
        if (KUCREC.XLECD in XLETBL.XLECD)
          CLWREC.XLEABRV = XLETBL.XLEABRV[sysVar.arrayIndex];
        else
          CLWREC.XLEABRV = "NOTFND";
        end
      end
    end
  end
  ;
end // end KL07S70

// set up screen cust svc rep fld
Function KL07S80()
   /* *************************************************************/
   /* *      set up screen customer service rep field            **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 11-30-90  sgorga  Removed space in front of literal 'coop**/
   /* *          analyst' & 'cust svc rep' to line up on map.    **/
   /* * 01-07-91  gdecke  see below                              **/
   /* * 01-10-91  sgorga  see below                              **/
   /* *************************************************************/
   /* * Note: this stmt group is a clone of kl0es80 with item    **/
   /* *       and process name changes                           **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S80"; /* set current process name*/
  ;
  if (YCTTBL.YCTCOOPF[CLXYCTX] == "Y" /* if claim type is co-op*/
   && KL07M010.YCTCD != "DAA")       
    KL07M010.KL07ML9 = "Coop Analyst>"; /* set coop analyst title*/
    KL07W01.KL07WUSR = KL07W02.YCPCD;
                                   /* (Kl07wusr redefines xxxusrid)*/
    KL07M010.KUYREPNM = KL07W01.YCPNM;
  else
    KL07M010.KL07ML9 = "Cust Svc Rep>"; /* set cust serv rep title*/
    KL07M010.KUYREPNM = KL07W01.KUYREPNM;
  end
  ;
   /* 01-07-90  gdecke  In the "while" stmt below, changed the*/
   /* "cl0ew01.cloewult(clxltrx1) = '0'" to be checked second,*/
    /* instead of first (like it was).  That way, if the index is*/
    /* +1 over the nbr the field can occur (such as 9 in a field*/
    /* defined as 8), it won't abend doing the 'while' check.*/
  ;
   /* 01-10-90 sgorga*/
      /* Changed  "while - if"  code below to  "while - and"*/
      /* to prevent zeros imbedded in xxxusrid's (such as*/
      /* JROB01) from being blanked out (to JROB 1) and, thereby,*/
      /* causing a 135 (cust svc rep not valid) abend.*/
  ;
  CLXREC.CLXLTRX1 = 1;
  while (CLXREC.CLXLTRX1 <= 8
   && KL07W01.KL07WULT[CLXLTRX1] == "0")
    KL07W01.KL07WULT[CLXLTRX1] = " ";
    CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
  end
  ;
   /* Note:  KL07W01.KL07WUSR redefines KL07W01.XXXUSRID.*/
     /* KL07W01.XXXUSRID will contain the Coop Analyst cd(ycpcd)*/
     /* (see above) if this is a Coop Analyst situation -*/
     /* otherwise, it contains the Svc Rep name.*/
  ;
  KL07M010.XXXUSRID = KL07W01.XXXUSRID;
  ;
end // end KL07S80

// get credit analyst info
Function KL07S84()
   /* ************************************************************/
   /* *      get the credit analyst information                 **/
   /* *                                                         **/
   /* * MAINTENANCE HISTORY (KL0ES84)                           **/
   /* * 10-12-90 bcourt change XCUCD(3) to XCECD, & XCEDESC.    **/
   /* ************************************************************/
   /* * MAINTENANCE HISTORY (KL07S84)                           **/
   /* * 10-19-97 PPERK1 cloned from kl0es84.                    **/
   /* *                                                         **/
   /* ************************************************************/
   /* commented out silly code*/
   /* MOVE KUCREC.XCUCD(1) TO KUCREC.XCUCD(1);*/
   /* MOVE KUCREC.XCUCD(2) TO KUCREC.XCUCD(2);*/
   /* MOVE KUCREC.XCECD TO KUCREC.XCECD;*/
  ;
   /* IF CL0EM001.XCeCD NE ' ';*/
   /* next sentence*/
   /* ELSE ;*/
   /* MOVE KUCREC.XCECD TO KL0EM001.XCECD;*/
   /* END ;*/
  ;
  KL07M010.XCECD = KUCREC.XCECD;
  ;
  if (KL07M010.XCECD in XCETBL.XCECD) /* if analyst code is in table*/
    KL07M010.XCEDESC = XCETBL.XCEDESC[sysVar.arrayIndex];
  else
    KL07M010.XCEDESC = "NOT FOUND";
  end
  ;
  ;
  ;
  ;
end // end KL07S84

// get territory info
Function KL07S85()
   /* ************************************************************/
   /* *      get the territory description                      **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * Note: this stmt group is a clone of kl0es85 with        **/
   /* *       item name changes.                                **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL07S85"; /* set current process name*/
  ;
  ;
  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (IV0REC.IV0IVCID != 0) /* if have ivc record*/
      SM1REC.SM1AGYID = IV0REC.SM1AGYID;
    else
      SM1REC.SM1AGYID = SM5REC.SM1AGYID;
    end
  else
    SM1REC.SM1AGYID = VCLHDR02.SM1AGYID; /* use writing agency*/
  end
  ;
  ;
  set SQLCA empty;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* get sales agency record*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if sales agency was found*/
    if (SM1REC.XTTCD in XTTTBL.XTTCD) /* if territory code is in table*/
      KL07M010.XTTDESC = XTTTBL.XTTDESC[sysVar.arrayIndex];
    else
      KL07M010.XTTDESC = "NOT FOUND";
    end
  else
    KL07M010.XTTDESC = "NO AGENCY FOUND";
  end
  ;
end // end KL07S85

// get coop-analyst information
Function KL07S86()
   /* ************************************************************/
   /* *      get the coop-analyst information                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * MAINTENANCE HISTORY (KL07S86)                           **/
   /* *                                                         **/
   /* * 10/19/97 PPERK1 clone from kl0es86.                     **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "KL07S86"; /* set current process name*/
  ;
  ;
  if (KL07W02.YCPCD == 0)
    if (KUCREC.YCPCD == 0)
      KL07S88(); /* default the coop analyst code*/
    else
      KL07W02.YCPCD = KUCREC.YCPCD;
    end
  end
  ;
  ;
  if (KL07W02.YCPCD in YCPTBL.YCPCD)
    KL07W01.YCPNM = YCPTBL.YCPNM[sysVar.arrayIndex];
  else
    KL07W01.YCPNM = "NOT ON FILE";
  end
  ;
  ;
end // end KL07S86

// default the coop analyst code
Function KL07S88()
   /* ************************************************************/
   /* *      default the coop-analyst code                      **/
   /* *                                                         **/
   /* * MAINTENANCE HISTORY: (KL0ES88)                          **/
   /* * 12-12-90  sgorga  Removed the call to the KUAREC because**/
   /* *              it is being deleted in Feb.'91. Changed the**/
   /* *              call to the kulrec to use kucrec.kucblaid  **/
   /* *              field name instead of kuarec.kuaadrid.     **/
   /* *                                                         **/
   /* ************************************************************/
   /* * MAINTENANCE HISTORY: (KL07S88)                          **/
   /* * 10-19-97  sgorga  Removed the call to the KUAREC because**/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "KL07S88"; /* default the coop analyst code*/
  ;
  ;
  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID; /* move bill-grp # to cust addr tbl*/
  ;
  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    KL07W02.YCPCD = 99; /* default to sonia cook*/
    return;
  end
  ;
  ;
  if (KULREC.XSTCD in XSTTBL.XSTCD)
    KL07W02.YCPCD = XSTTBL.YCPCD[sysVar.arrayIndex];
  else
    KL07W02.YCPCD = 99; /* default to sonia cook*/
  end
  ;
  ;
end // end KL07S88

// set prev claim on ivc ind
Function KL07S95()
  ;
  ;
  ;
  if (KL07M010.IV0IVCID == 0)
    return;
  end
  ;
  ;
  ;
  CLBREC.IV0IVCID = KL07M010.IV0IVCID;
  CLXREC.CLXORDIV = KL07M010.IV0IVCID;
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  CLBREC.YITCD = CLXREC.YITCD;
  ;
  set KL07W08 empty;
  KL07W08.KL07WSQL = "SM"; /* select memoed claim*/
  KL07W08.CLACLMNB = KL07M010.CLACLMNB;
  KL07W08.IV0IVCID = KL07M010.IV0IVCID;
  KL07W08.IV0PARTN = CLXREC.CLXPARTN;
  KL07W08.CLACLMNB = KL07M010.CLACLMNB;
  KL07W08.YITCD = CLXREC.YITCD;
  ;
  set SQLCA empty;
  set KL07W04 empty;
  KL07W04.KL07WSQL = "T2"; /* count nbr of other claims against invoice*/
  call "IO1180" (KL07W04, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  if (KL07W04.KL07WIN1 >= 0)
    CLBREC.ZZZCHGCT = KL07W04.KL07WCN1;
  else
    CLBREC.ZZZCHGCT = 0;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   && CLBREC.ZZZCHGCT > 0)
                                   /* if there are other claims against ivc*/
    KL07M010.KL07WNOC = CLBREC.ZZZCHGCT; /* nbr of claims*/
    set KL07M010.KL07WNOC skip, bold;
    set SQLCA empty;
    call "CL2320" (KL07W08, SQLCA) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
       /* completed claims exist against invoice*/
      KL07M010.KL07WPCI = "M"; /* memos against invoice*/
    else
       /* see if authorized returns exist against invoice*/
      KL07W08.KL07WSQL = "SR"; /* select returned claim*/
      set SQLCA empty;
      call "CL2320" (KL07W08, SQLCA) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
        KL07M010.KL07WPCI = "R"; /* returns against invoice*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KL07M010.KL07WPCI = "C"; /* claims against invoice*/
        end
      end
    end
    set KL07M010.KL07WPCI skip, bold;
  else
    KL07M010.KL07WNOC = 0;
    KL07M010.KL07WPCI = " ";
  end
  ;
end // end KL07S95

// Calc dt using curr dt & # days
Function XSCLSDT()
  ;
   /* **********************************************************/
   /* This stmt group calls the common date routine to       **/
   /* determine a past date using the current date and       **/
   /* days to subtract.                                      **/
   /* **********************************************************/
   /* ** maintenance log **************************************/
   /* 9-16-97 pperk1  new stmt group.*/
   /* ------------------------------------------------------*/
  ;
  ;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G"; /* indicate ccyymmdd format*/
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD == 0)
    /* NEXT SENTENCE*/
  else
    CLXREC.CLXCPROC = "XSCLSDT";
    TA1REC.TA1TBLKE = "RTN FROM TA0040 - CALC DATE - GREGGREG";
    XPCL010(); /* abend*/
  end
  ;
    /* -----------   end of stmt grp xsclsdt  ------------*/
  ;
end // end XSCLSDT

//*** RECORD=KL07DBIO ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - KL07-DBIO-FUNCTION         *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   EACH IOMOD. THE ONE CALL WILL HANDLE ANY FUNCTION CODE *
// *   AS LONG AS THE VALUE IS MOVED TO THE FUNCTION FIELD    *
// *   IN THIS RECORD BEFORE THE IOMOD ROUTINE IS USED.       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 08-08-97  PPERK1  NEW APPLICATION                        *
// ************************************************************
// ************************
Record KL07DBIO type basicRecord
  5 KL07W-DBIO-FUNCTION KL07W-DBIO-FUNCTION ; 
end // end KL07DBIO

//*** RECORD=KL07TBIN ****
// ************************************************************
// *                                                          *
// *   THE USE OF THIS RECORD IN THE VSAM CALLS ALLOWS        *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   THE VSAM IOMOD CL4100.  THE IOMOD WILL HANDLE FUNCTION *
// *   CODES WHEN THE VALUE IS MOVED TO THE FUNCTION FIELD.   *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 08-21-97  PPERK1  NEW APPLICATION                        *
// ************************************************************
// ************************
Record KL07TBIN type basicRecord
  5 KL07W-TBIN-PARM-GROUP KL07W-TBIN-PARM-GROUP ; 
    10 KL07W-TBIN-FUNCTION KL07W-TBIN-FUNCTION ; 
    10 * char(4) ; 
    10 KL07W-TBIN-KEY KL07W-TBIN-KEY ; 
      15 KL07W-TBIN-TBL-NBR KL07W-TBIN-TBL-NBR ; 
      15 KL07W-TBIN-TBL-ARG1 KL07W-TBIN-TBL-ARG1 ; 
      15 KL07W-TBIN-TBL-ARG2 KL07W-TBIN-TBL-ARG2 ; 
end // end KL07TBIN

//*** RECORD=KL07TBOT ****
// ************************************************************
// *                                                          *
// *   THE USE OF THIS RECORD IN THE VSAM CALLS ALLOWS        *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   THE VSAM IOMOD CL4100.  THE IOMOD WILL HANDLE FUNCTION *
// *   CODES WHEN THE VALUE IS MOVED TO THE FUNCTION FIELD.   *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 08-21-97  PPERK1  NEW APPLICATION                        *
// ************************************************************
// ************************
Record KL07TBOT type basicRecord
  5 KL07W-TBLE-OUT-GROUP KL07W-TBLE-OUT-GROUP ; 
    10 KL07W-TB23-LAYOUT KL07W-TB23-LAYOUT ; 
      15 KL07W-TB23-KEY KL07W-TB23-KEY ; 
      15 KL07W-TB23-SRC KL07W-TB23-SRC ; 
      15 * char(1) ; // iomod function to perform
      15 KL07W-TB23-CR-SRC KL07W-TB23-CR-SRC ; 
      15 * char(2) ; // iomod function to perform
      15 KL07W-TB23-USER-NAME KL07W-TB23-USER-NAME ; 
      15 KL07W-TB23-CREDIT-REP-CODE KL07W-TB23-CREDIT-REP-CODE ; 
      15 KL07W-TB23-ANAL-CODE KL07W-TB23-ANAL-CODE ; 
      15 * char(26) ; // iomod function to perform
    10 KL07W-TBOT-VSAMCA KL07W-TBOT-VSAMCA ; 
      15 KL07W-TBOT-VSMFLNM KL07W-TBOT-VSMFLNM ; 
      15 KL07W-TBOT-VSMACT KL07W-TBOT-VSMACT ; 
      15 KL07W-TBOT-VSMST KL07W-TBOT-VSMST ; 
      15 KL07W-TBOT-VSMRCKEY KL07W-TBOT-VSMRCKEY ; 
      15 * char(38) ; 
    10 KL07W-TBOT-MSG1 KL07W-TBOT-MSG1 ; 
    10 KL07W-TBOT-MSG2 KL07W-TBOT-MSG2 ; 
end // end KL07TBOT

//*** RECORD=KL07W01 ****
// ************************************************************
// *   WORKING STORAGE AREA FOR APPLICATION KL07              *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 08-07-97  PPERK1  NEW APPLICATION                        *
// ************************************************************
// ***********************
Record KL07W01 type basicRecord
  5 KL07W-WS-REC-GROUP KL07W-WS-REC-GROUP ; 
    10 * char(1) ; // PROCESSING FLAGS
    10 KL07W-EOA-FL KL07W-EOA-FL ; 
    10 KL07W-FIRST-TIME-FL KL07W-FIRST-TIME-FL ; 
    10 KL07W-EOS-FL KL07W-EOS-FL ; 
    10 KL07W-ERR-FL KL07W-ERR-FL ; 
    10 KL07W-BLD-SCRN-FL KL07W-BLD-SCRN-FL ; 
    10 KL07W-BLD-ARRAY-FL KL07W-BLD-ARRAY-FL ; 
    10 KL07W-CHECK-YCS-STAT-CD KL07W-CHECK-YCS-STAT-CD ; 
    10 KL07W-BYPASS-THIS-REC KL07W-BYPASS-THIS-REC ; 
    10 KL07W-DTL-OITM-SRCE KL07W-DTL-OITM-SRCE ; 
      15 KL07W-DTL-OITM-BANK KL07W-DTL-OITM-BANK ; 
      15 KL07W-DTL-OITM-DEP-NBR KL07W-DTL-OITM-DEP-NBR ; 
    10 KL07W-DTL-OITM-COLSQ-NBR KL07W-DTL-OITM-COLSQ-NBR ; 
    10 KL07W-DTL-CHG-FL KL07W-DTL-CHG-FL ; 
    10 KL07W-DTL-ERR-FL KL07W-DTL-ERR-FL [15] ; 
    10 KL07W-DTL-CLM-NBR-CHG KL07W-DTL-CLM-NBR-CHG ; 
    10 KL07W-UPDT-FCT-CD-CHG KL07W-UPDT-FCT-CD-CHG ; 
    10 KL07W-DTL-YCR-CHG KL07W-DTL-YCR-CHG ; 
    10 KL07W-ERR-NO9-FL KL07W-ERR-NO9-FL ; 
    10 KL07W-ERR-NO240-FL KL07W-ERR-NO240-FL ; 
    10 KL07W-ERR-NO789-FL KL07W-ERR-NO789-FL ; 
    10 KL07W-ERR-NO797-FL KL07W-ERR-NO797-FL ; 
    10 KL07W-ERR-NO798-FL KL07W-ERR-NO798-FL ; 
    10 KL07W-HDR-DTL-UPDT-FL KL07W-HDR-DTL-UPDT-FL ; 
    10 KL07W-FCT-CD-FOUND KL07W-FCT-CD-FOUND ; 
    10 * char(1) ; // SCREEN WORK AREAS
    10 KL07W-CLX1 KL07W-CLX1 ; 
    10 KL07W-LINEX KL07W-LINEX ; 
    10 KL07W-CURR-PAGE KL07W-CURR-PAGE ; 
    10 KL07W-MAX-PAGE KL07W-MAX-PAGE ; 
    10 KL07W-PAGEX KL07W-PAGEX ; 
    10 KL07W-PAGE-TBL KL07W-PAGE-TBL [210] ; 
      15 KL07W-PAGE-NBR KL07W-PAGE-NBR ; 
      15 KL07W-PAGE-LN-CT KL07W-PAGE-LN-CT ; 
    10 KL07W-MAP-PTR KL07W-MAP-PTR ; 
    10 KL07W-CURR-MAP-NM KL07W-CURR-MAP-NM ; 
    10 KL07W-MAP-TBL KL07W-MAP-TBL [3] ; 
    10 KL07W-MAXLN KL07W-MAXLN [2] ; 
    10 KL07W-INQ-CLM-CT KL07W-INQ-CLM-CT ; 
    10 KL07W-INQX KL07W-INQX ; 
    10 KL07W-INQ-CLM-NBR KL07W-INQ-CLM-NBR [15] ; 
    10 KL07WCD KL07WCD ; 
      15 KL07WCDX KL07WCDX [4] ; 
    10 * char(1) ; // WORK AREAS
    10 AR-REF-NBR AR-REF-NBR ; 
    10 ARCREFNB ARCREFNB ; 
    10 ARCCCREF ARCCCREF ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 CLBGLIND CLBGLIND ; 
    10 CLBSRIND CLBSRIND ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 KUCCOID KUCCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KL07W-UPDT-KUCGRPID KL07W-UPDT-KUCGRPID ; 
    10 KL07W-UPDT-KUCCOID KL07W-UPDT-KUCCOID ; 
    10 KL07W-DTL-KUCGRPID KL07W-DTL-KUCGRPID ; 
    10 KL07W-NEW-DTL-KUCGRPID KL07W-NEW-DTL-KUCGRPID ; 
    10 KL07W-NEW-DTL-KUCCOID KL07W-NEW-DTL-KUCCOID ; 
    10 KUCGRP KUCGRP [2] ; 
    10 KUYREPNM KUYREPNM ; 
    10 IV0IVCID IV0IVCID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 YCPNM YCPNM ; 
    10 YCSCD YCSCD ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 XXXUSRID XXXUSRID ; 
      15 KL07WUSR KL07WUSR ; 
        20 KL07WULT KL07WULT [8] ; 
    10 KL07WAAC KL07WAAC ; 
    10 KL07WACC KL07WACC ; 
    10 KL07WARP KL07WARP ; 
      15 KL07WAGY KL07WAGY ; 
      15 KL07WF1 KL07WF1 ; 
      15 KL07WREP KL07WREP ; 
    10 KL07WCNT KL07WCNT ; 
    10 KL07WDON KL07WDON ; 
    10 KL07WHRA KL07WHRA ; 
    10 KL07WPIN KL07WPIN ; 
    10 KL07W-PHONE-COMMENT KL07W-PHONE-COMMENT ; 
      15 KL07W-PHONE-NUMBER KL07W-PHONE-NUMBER ; 
        25 KL07W-PHONE-AREA-CODE KL07W-PHONE-AREA-CODE ; 
        25 KL07W-PHONE-PREFIX KL07W-PHONE-PREFIX ; 
        25 KL07W-PHONE-SUFFIX KL07W-PHONE-SUFFIX ; 
      15 * char(50) ; 
    10 KL07W-CURR-CLM-PTR KL07W-CURR-CLM-PTR ; 
    10 KL07W-CURR-CLM-NBR KL07W-CURR-CLM-NBR ; 
    10 KL07W-CURR-PROC-NM KL07W-CURR-PROC-NM ; 
    10 KL07W-FIRST-CLM-PTR KL07W-FIRST-CLM-PTR ; 
    10 KL07W-FIRST-CLM-NBR KL07W-FIRST-CLM-NBR ; 
    10 KL07W-LAST-CLM-PTR KL07W-LAST-CLM-PTR ; 
    10 KL07W-LAST-CLM-NBR KL07W-LAST-CLM-NBR ; 
    10 * char(1) ; 
    10 KL07W-TA1LOC1 KL07W-TA1LOC1 ; 
      15 KL07W-TA1LOC1-1 KL07W-TA1LOC1-1 ; 
      15 KL07W-TA1LOC1-2 KL07W-TA1LOC1-2 ; 
    10 KL07W-KEY1 KL07W-KEY1 ; 
      15 KL07W-KEY1-1 KL07W-KEY1-1 ; 
      15 KL07W-KEY1-COMMA-1 KL07W-KEY1-COMMA-1 ; 
      15 KL07W-KEY1-2 KL07W-KEY1-2 ; 
      15 KL07W-KEY1-COMMA-2 KL07W-KEY1-COMMA-2 ; 
      15 KL07W-KEY1-3 KL07W-KEY1-3 ; 
      15 KL07W-KEY1-COMMA-3 KL07W-KEY1-COMMA-3 ; 
      15 KL07W-KEY1-4 KL07W-KEY1-4 ; 
    10 KL07W-KEY2 KL07W-KEY2 ; 
      15 KL07W-KEY2-1 KL07W-KEY2-1 ; 
      15 KL07W-KEY2-2 KL07W-KEY2-2 ; 
      15 KL07W-KEY2-COMMA-1 KL07W-KEY2-COMMA-1 ; 
      15 KL07W-KEY2-3 KL07W-KEY2-3 ; 
    10 KL07W-DEADLOCK-CT KL07W-DEADLOCK-CT ; 
    10 KL07W-MAX-CLM-CT KL07W-MAX-CLM-CT ; 
    10 KL07W-TOT-TRANS-COUNT KL07W-TOT-TRANS-COUNT ; 
    10 KL07W-TOT-TRANS-AMT KL07W-TOT-TRANS-AMT ; 
    10 KL07W-ROUND-AMT KL07W-ROUND-AMT ; 
    10 KL07W-YRCTBL-KEY KL07W-YRCTBL-KEY ; 
      15 KL07W-YRCTBL-KEY-YCR KL07W-YRCTBL-KEY-YCR ; 
      15 KL07W-YRCTBL-KEY-YRC KL07W-YRCTBL-KEY-YRC ; 
    10 KL07W-FCT-CD-OITM-IND KL07W-FCT-CD-OITM-IND ; 
      15 KL07W-FCT-CD KL07W-FCT-CD ; 
      15 KL07W-OITM-IND KL07W-OITM-IND ; 
    10 * char(1) ; // DATE AREAS
    10 KL07W-LO-DAY KL07W-LO-DAY ; 
    10 KL07W-HI-DAY KL07W-HI-DAY ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 KL07W-FMT1-DT KL07W-FMT1-DT ; 
      15 KL07W-FMT1-DT-CC KL07W-FMT1-DT-CC ; 
      15 KL07W-FMT1-DT-YY KL07W-FMT1-DT-YY ; 
      15 KL07W-FMT1-DT-MM KL07W-FMT1-DT-MM ; 
      15 KL07W-FMT1-DT-DD KL07W-FMT1-DT-DD ; 
    10 KL07W-FMT2-DT KL07W-FMT2-DT ; 
      15 KL07W-FMT2-DT-MM KL07W-FMT2-DT-MM ; 
      15 KL07W-FMT2-DT-DD KL07W-FMT2-DT-DD ; 
      15 KL07W-FMT2-DT-YY KL07W-FMT2-DT-YY ; 
    10 KL07W-FMT3-DT KL07W-FMT3-DT ; 
      15 KL07W-FMT3-DT-CCYY KL07W-FMT3-DT-CCYY ; 
      15 KL07W-FMT3-DT-MMDD KL07W-FMT3-DT-MMDD ; 
    10 KL07W-DT-ENTER KL07W-DT-ENTER ; 
      15 KL07W-DT-ENTER-CCYY KL07W-DT-ENTER-CCYY ; 
      15 KL07W-DT-ENTER-MMDD KL07W-DT-ENTER-MMDD ; 
    10 KL07W-CUR-DT KL07W-CUR-DT ; 
      15 KL07W-CUR-DT-CCYY KL07W-CUR-DT-CCYY ; 
      15 KL07W-CUR-DT-MMDD KL07W-CUR-DT-MMDD ; 
end // end KL07W01

//*** RECORD=KL07W02 ****
// *******************  Claim Header Table  *******************
// 
// DB2 Table:           DCLAIM.VCLHDR01
// 
//      View:           DCLAIM.VCLHDR02
// 
// Copylib Member:      DCLHDR02
// 
// I/O Mod:             VCLHDR02
// 
// Key to DB2 Table:    CLACLMNB
// 
// Date Created:        10/08/97
// 
// Maintenance Log:
//   Date    Init.   Comment
// --------  -----   ---------------------------------------
// 10-08-97  CHELLM  Initial record creation
// ***********************
Record KL07W02 type basicRecord
  5 VCLHDR02-GROUP VCLHDR02-GROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 CL-WRITE-OFF-IND CL-WRITE-OFF-IND ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CUPO OP1CUPO ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 YCTCD YCTCD ; 
    10 CLAPRYCT CLAPRYCT ; 
    10 CLACAIND CLACAIND ; 
    10 YCSCD1 YCSCD1 ; 
      15 YCSCD YCSCD ; 
    10 YCSCD2 YCSCD2 ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLASTTDT CLASTTDT ; 
    10 CLASCGBY CLASCGBY ; 
    10 CLASETDT CLASETDT ; 
    10 YCRCD YCRCD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 XIECD XIECD ; 
    10 XSOCD XSOCD ; 
    10 CLADNLFL CLADNLFL ; 
    10 CLADNLDT CLADNLDT ; 
    10 CLACTCNM CLACTCNM ; 
    10 CLACCLDT CLACCLDT ; 
    10 CLAOCAMT CLAOCAMT ; 
    10 CLAOCQTY CLAOCQTY ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLATQTY CLATQTY ; 
    10 CLABLGFF CLABLGFF ; 
    10 KUCBLAID KUCBLAID ; 
    10 CLASHPFF CLASHPFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 CLARTNFF CLARTNFF ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 CLYATHID CLYATHID ; 
    10 CLAPRATH CLAPRATH ; 
    10 CLAAUTHF CLAAUTHF ; 
    10 XCECD XCECD ; 
    10 KUYSVRID KUYSVRID ; 
    10 YCPCD YCPCD ; 
    10 XWHCD XWHCD ; 
    10 XPTCD XPTCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 CLACSQNB CLACSQNB ; 
    10 CLACRTNB CLACRTNB ; 
    10 CLACISNB CLACISNB ; 
    10 CLAWSENF CLAWSENF ; 
    10 CLAORIGI CLAORIGI ; 
    10 CLADBOCL CLADBOCL ; 
    10 YITCD YITCD ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
    10 CLAXCIND CLAXCIND ; 
    10 CLAMEIND CLAMEIND ; 
    10 CLACMIND CLACMIND ; 
    10 CLATFIND CLATFIND ; 
    10 CLACNIND CLACNIND ; 
    10 CLADJIND CLADJIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KL07W02

//*** RECORD=KL07W03 ****
// ************************************************************
// *                    KL07W03                               *
// *                    -------                               *
// *                                                          *
// *   This working-storage record record is used to store    *
// *   items that are use in determining whether fields       *
// *   that require expansions (code descriptions, rep        *
// *   names, etc) have been changed.                         *
// *                                                          *
// * Maintenance History:                                     *
// *                                                          *
// * 08-10-90 CHELLM Added OP1CMPNB comp-co-id to the record. *
// * 10-12-90 bcourt change XCGCD to OP1COGID.                *
// *                 change XCUCD(3) to XCECD.                *
// * 11-12-97 PPERK1 cloned from cl0ew03.                     *
// ************************************************************
// ***********************
Record KL07W03 type basicRecord
  5 KL07W3GP KL07W3GP ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 YCTCD YCTCD ; 
    10 XPTCD XPTCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 KL07WARP KL07WARP ; 
    10 XSOCD XSOCD ; 
    10 XCECD XCECD ; 
    10 YCRCD YCRCD ; 
    10 XTTDESC XTTDESC ; 
    10 XWHCD XWHCD ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 XXXUSRID XXXUSRID ; 
    10 YCSCD YCSCD ; 
    10 CLYATHPW CLYATHPW ; 
    10 XLECD XLECD ; 
    10 XBCCD XBCCD ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 CL0EMPHN CL0EMPHN ; 
end // end KL07W03

//*** RECORD=KL07W04 ****
// pass calculated sums from dclaim.vdefit01.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// Cloned from cl0ew04 11/01/97 pperk1.
// ***********************
Record KL07W04 type basicRecord
  5 KL07W4GR KL07W4GR ; 
    10 KL07WSQL KL07WSQL ; 
    10 KL07WCN1 KL07WCN1 ; 
    10 KL07WIN1 KL07WIN1 ; 
end // end KL07W04

//*** RECORD=KL07W08 ****
// find if completed claims exist for a given invoice and
// any authorized returns exist (ycs equal
// cmp,roa,rpa,rpi,rpm,xra)
// ;
// find if any open rfl or rts claims exist for a given invoice
// ;
// ;*=========================================================*
// ;*      M A I N T E N A N C E     H I S T O R Y            *
// ;*---------------------------------------------------------*
// ;* CHNG#   DATE    PGMR     DESCRIPTION                    *
// ;*---------------------------------------------------------*
// ;* CL0    11/22/91 GDECKE  ADDED CLASTTDT,YCRCD,YCTCD.     *
// ;*        11/12/97 pperk1  cloned from cl0ew08.            *
// ;*=========================================================*
// ***********************
Record KL07W08 type basicRecord
  5 KL07W8GP KL07W8GP ; 
    10 KL07WSQL KL07WSQL ; 
    10 YCSCD YCSCD [9] ; 
    10 CLACLMNB CLACLMNB ; 
    10 IV0IVCID IV0IVCID ; 
    10 IV0PARTN IV0PARTN ; 
    10 YITCD YITCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 KL07WCN1 KL07WCN1 ; 
    10 KL07WRTN KL07WRTN ; 
    10 KLASTTDT KLASTTDT ; 
    10 YCRCD YCRCD ; 
    10 YCTCD YCTCD ; 
end // end KL07W08

//*** RECORD=KL07WCLM ****
// *******  A/R WRITEOFF SUSPENSE ITEM TABLE ******************
// *                                                          *
// * DB2 TABLE:          DCLAIM.VWOSUS01                      *
// *                                                          *
// * COPYLIB MEMBER:     DWOSUS01                             *
// *                                                          *
// * I/0 MOD:            VWOSUS01                             *
// *                                                          *
// * KEY TO DB2 TABLE:   CL-CLM-NBR                           *
// *                     AR-REF-NBR                           *
// *                                                          *
// *                                                          *
// * DATE CREATED        06-03-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 07-03-97  GDECKE  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record KL07WCLM type basicRecord
  5 KL07WCLM-GROUP KL07WCLM-GROUP [2000] ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 AR-CK-DT AR-CK-DT ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-OITM-TRN-DT AR-OITM-TRN-DT ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 AR-OITM-LKBX-CD AR-OITM-LKBX-CD ; 
    10 AR-OITM-DEP-NBR AR-OITM-DEP-NBR ; 
    10 AR-OITM-BATCH-NBR AR-OITM-BATCH-NBR ; 
    10 AR-OITM-COLSQ-NBR AR-OITM-COLSQ-NBR ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 AR-WROF-STAT-CD AR-WROF-STAT-CD ; 
    10 AR-WROF-TRN-CD AR-WROF-TRN-CD ; 
    10 AR-WROF-ACT-CD AR-WROF-ACT-CD ; 
    10 CL-CLM-NBR2 CL-CLM-NBR2 ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 ; 
    10 KL07W-DAYS-IN-SUSPENSE KL07W-DAYS-IN-SUSPENSE ; 
end // end KL07WCLM

//*** RECORD=KL07WPL1 ****
// ************************************************************
// * This record contains parms passed to IOMOD CL4010.       *
// * The parms contains the field values to be used in        *
// * accessing the Claims in suspense database (dwosus01).    *
// * The IOMOD determines what cursor to use based on the     *
// * the fields passed.                                       *
// *                                                          *
// * DATE CREATED        09-16-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 09-16-97  PPERK1  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record KL07WPL1 type basicRecord
  5 KL07W-PARM-LIST-1-GROUP KL07W-PARM-LIST-1-GROUP ; 
    10 KL07W-SELECT-ID KL07W-SELECT-ID ; 
    10 KL07W-STAT-CD KL07W-STAT-CD ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD ; 
    10 AR-WROF-ACT-CD AR-WROF-ACT-CD ; 
    10 KL07W-LO-DT KL07W-LO-DT ; 
    10 KL07W-HI-DT KL07W-HI-DT ; 
end // end KL07WPL1

//*** RECORD=KL07WSC1 ****
// ************************************************************
// * This is a working storage area to hold the enterable     *
// * fields from the kl07 maps.                               *
// * After the map is conversed fields saved in this area     *
// * will be compared to the map fields returned from the     *
// * the converse in order to determine if there was any      *
// * user input and/or changes on the screen.                 *
// **********************************************************
// **          M A I N T E N A N C E   H I S T O R Y       **
// **                                                      **
// **  date      pgmr    description                       **
// ** --------   ------  --------------------------------- **
// ** 06-21-00   ssank1  added fields KL07W-DTL-CLM-REFNBR **
// **                    and KL07W-DTL-IV-IVC-ID           **
// ************************************************************
// ************************
Record KL07WSC1 type basicRecord
  5 KL07W-SCRN-HDR-GROUP KL07W-SCRN-HDR-GROUP ; 
    10 XXXPRCNM XXXPRCNM ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 XXXCURDT XXXCURDT ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 KL07W-NBR-OF-DAY1 KL07W-NBR-OF-DAY1 ; 
    10 KL07W-NBR-OF-DAY2 KL07W-NBR-OF-DAY2 ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 KL07W-HDR-FCT-CD KL07W-HDR-FCT-CD ; 
    10 KL07W-TOT-TRANS-AMT KL07W-TOT-TRANS-AMT ; 
    10 YCS-CLM-STAT-CD1 YCS-CLM-STAT-CD1 ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD ; 
    10 KL07W-TOT-TRANS-COUNT KL07W-TOT-TRANS-COUNT ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 KL07W-UPDT-CLM-NBR KL07W-UPDT-CLM-NBR ; 
    10 KL07W-UPDT-YCR-CLM-RSN-CD KL07W-UPDT-YCR-CLM-RSN-CD ; 
    10 KL07W-UPDT-YRC-RT-CSE-CD KL07W-UPDT-YRC-RT-CSE-CD ; 
    10 KL07W-UPDT-FCT-CD KL07W-UPDT-FCT-CD [15] ; 
    10 KL07W-DTL-CLM-NBR KL07W-DTL-CLM-NBR [15] ; 
    10 KL07W-DTL-YCR-CLM-RSN-CD KL07W-DTL-YCR-CLM-RSN-CD [15] ; 
    10 KL07W-DTL-YRC-RT-CSE-CD KL07W-DTL-YRC-RT-CSE-CD [15] ; 
    10 KL07W-DTL-CLM-REFNBR KL07W-DTL-CLM-REFNBR [15] ; 
    10 KL07W-DTL-IV-IVC-ID KL07W-DTL-IV-IVC-ID [15] ; 
    10 KL07W-ERR-NO795-FL KL07W-ERR-NO795-FL [15] ; 
    10 KL07W-DTL-ERR-NBR KL07W-DTL-ERR-NBR [15] ; 
end // end KL07WSC1

//*** RECORD=VSMCA01 ****
// VSMCA01 - vsam communication area
// 
// VSMCA01 is a collection of variables that are used to
// provide information about execution of cics io statements
// to a VSAM file.
// 
// the vsmca01 is the second argument to be passed to TA0020
// online error diagnosis module.
// 
//              call ta0020,ta1rec,vsmca01
// ***********************
Record VSMCA01 type basicRecord
  5 VSMFLNM VSMFLNM ; 
  5 VSMACT VSMACT ; 
  5 VSMST VSMST ; 
  5 VSMRCKEY VSMRCKEY ; 
  5 * char(38) ; 
end // end VSMCA01

//*** RECORD=VWOSUS01 ****
// *******  A/R WRITEOFF SUSPENSE ITEM TABLE ******************
// *                                                          *
// * DB2 TABLE:          DCLAIM.VWOSUS01                      *
// *                                                          *
// * COPYLIB MEMBER:     DWOSUS01                             *
// *                                                          *
// * I/0 MOD:            VWOSUS01                             *
// *                                                          *
// * KEY TO DB2 TABLE:   CL-CLM-NBR                           *
// *                     AR-REF-NBR                           *
// *                                                          *
// *                                                          *
// * DATE CREATED        06-03-97                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR    DESCRIPTION                            *
// * --------  ------  ---------------------------------------*
// * 07-03-97  GDECKE  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record VWOSUS01 type basicRecord
  5 VWOSUS01-GROUP VWOSUS01-GROUP ; 
    10 CL-CLM-NBR CL-CLM-NBR ; 
    10 AR-REF-NBR AR-REF-NBR ; 
    10 AR-CUST-CK-NBR AR-CUST-CK-NBR ; 
    10 AR-CK-DT AR-CK-DT ; 
    10 AR-CUST-CLM-REFNBR AR-CUST-CLM-REFNBR ; 
    10 AR-AR-AMT AR-AR-AMT ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 AR-OITM-TRN-DT AR-OITM-TRN-DT ; 
    10 YCR-CLM-RSN-CD YCR-CLM-RSN-CD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 AR-OITM-LKBX-CD AR-OITM-LKBX-CD ; 
    10 AR-OITM-DEP-NBR AR-OITM-DEP-NBR ; 
    10 AR-OITM-BATCH-NBR AR-OITM-BATCH-NBR ; 
    10 AR-OITM-COLSQ-NBR AR-OITM-COLSQ-NBR ; 
    10 XCE-CR-ANLS-CD XCE-CR-ANLS-CD ; 
    10 OP-CUST-PO OP-CUST-PO ; 
    10 AR-WROF-STAT-CD AR-WROF-STAT-CD ; 
    10 AR-WROF-TRN-CD AR-WROF-TRN-CD ; 
    10 AR-WROF-ACT-CD AR-WROF-ACT-CD ; 
    10 CL-CLM-NBR2 CL-CLM-NBR2 ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VWOSUS01

// AR-OITM-BATCH-NBR
DataItem AR-OITM-BATCH-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR-OITM-SEQ-NBR
DataItem AR-OITM-COLSQ-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AR-OITM-DEP-NBR
DataItem AR-OITM-DEP-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR-OITM-BANK-IND
DataItem AR-OITM-LKBX-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR-WROF-ACTION-IND
DataItem AR-WROF-ACT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR-WROF-TRAN-CD
DataItem AR-WROF-TRN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CLM-NBR
DataItem CL-CLM-NBR2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build array from database (y/n
DataItem KL07W-BLD-ARRAY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen (y/n)
DataItem KL07W-BLD-SCRN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do not process this record y/n
DataItem KL07W-BYPASS-THIS-REC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare dtl to hdr ycs stat cd
DataItem KL07W-CHECK-YCS-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array index
DataItem KL07W-CLX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-CUR-DT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-CUR-DT-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current CL-CLM-NBR
DataItem KL07W-CURR-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pointer to curr clm in array
DataItem KL07W-CURR-CLM-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current map name
DataItem KL07W-CURR-MAP-NM char(8)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// current screen page pointer
DataItem KL07W-CURR-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current process name
DataItem KL07W-CURR-PROC-NM char(24)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DAYS-IN-SUSPENSE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-DBIO-FUNCTION char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// db deadlock count
DataItem KL07W-DEADLOCK-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DT-ENTER num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-DT-ENTER-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-DT-ENTER-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change on any dtl line (y/n)
DataItem KL07W-DTL-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tc250 nike claim number
DataItem KL07W-DTL-CLM-NBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clm nbr changed on detail (y/n
DataItem KL07W-DTL-CLM-NBR-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DTL-CLM-REFNBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err on detail line (y/n)
DataItem KL07W-DTL-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err number
DataItem KL07W-DTL-ERR-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-DTL-IV-IVC-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev dtl clm# cu_grp_co_id
DataItem KL07W-DTL-KUCGRPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL07W-DTL-OITM-BANK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DTL-OITM-COLSQ-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL07W-DTL-OITM-DEP-NBR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DTL-OITM-SRCE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fct cd changed on detail  (y/n
DataItem KL07W-DTL-YCR-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DTL-YCR-CLM-RSN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-DTL-YRC-RT-CSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of application flag
DataItem KL07W-EOA-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem KL07W-EOS-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KL07W-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0240 found (y/n)
DataItem KL07W-ERR-NO240-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0789 found (y/n)
DataItem KL07W-ERR-NO789-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0795 found (y/n)
DataItem KL07W-ERR-NO795-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0797 found (y/n)
DataItem KL07W-ERR-NO797-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0798 found (y/n)
DataItem KL07W-ERR-NO798-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err # 0009 found (y/n)
DataItem KL07W-ERR-NO9-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-FCT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fct code on detail found flag
DataItem KL07W-FCT-CD-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-FCT-CD-OITM-IND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first CL-CLM-NBR
DataItem KL07W-FIRST-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first claim in array
DataItem KL07W-FIRST-CLM-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first time thru app. flag
DataItem KL07W-FIRST-TIME-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// REFORMAT DATE #1 CCYYMMDD
DataItem KL07W-FMT1-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #1 CC
DataItem KL07W-FMT1-DT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #1 DD
DataItem KL07W-FMT1-DT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #1 MM
DataItem KL07W-FMT1-DT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #1 YY
DataItem KL07W-FMT1-DT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #2 MMDDYY
DataItem KL07W-FMT2-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #2 DD
DataItem KL07W-FMT2-DT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #2 MM
DataItem KL07W-FMT2-DT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #2 YY
DataItem KL07W-FMT2-DT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #3 CCYYMMDD
DataItem KL07W-FMT3-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #3 CCYY
DataItem KL07W-FMT3-DT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE #3 MMDD
DataItem KL07W-FMT3-DT-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updts on hdr & detail fields
DataItem KL07W-HDR-DTL-UPDT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select fct cd = hdr fct cd
DataItem KL07W-HDR-FCT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select susp days <=
DataItem KL07W-HI-DAY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hi dt in dt range
DataItem KL07W-HI-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of entries in inq tbl
DataItem KL07W-INQ-CLM-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inq tble
DataItem KL07W-INQ-CLM-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// index for inq tbl
DataItem KL07W-INQX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format flds ta1rec.ta1tblke
DataItem KL07W-KEY1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1tblke fld 1
DataItem KL07W-KEY1-1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta1tblke fld 2
DataItem KL07W-KEY1-2 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta1tblke fld 3
DataItem KL07W-KEY1-3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta1tblke fld 4
DataItem KL07W-KEY1-4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comma
DataItem KL07W-KEY1-COMMA-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem KL07W-KEY1-COMMA-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem KL07W-KEY1-COMMA-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format flds ta1rec.ta1tblke
DataItem KL07W-KEY2 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1tblke fld 1
DataItem KL07W-KEY2-1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1tblke fld 2
DataItem KL07W-KEY2-2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta1tblke fld 3
DataItem KL07W-KEY2-3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem KL07W-KEY2-COMMA-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last claim pointer in table
DataItem KL07W-LAST-CLM-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pointer to last clm in array
DataItem KL07W-LAST-CLM-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screenline index
DataItem KL07W-LINEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select susp days >=
DataItem KL07W-LO-DAY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// lo dt in dt range
DataItem KL07W-LO-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pointer in map name table
DataItem KL07W-MAP-PTR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// tbl containing map names
DataItem KL07W-MAP-TBL char(8)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// max number of claims
DataItem KL07W-MAX-CLM-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// highest screen page pointer
DataItem KL07W-MAX-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// maximum number of lines on map
DataItem KL07W-MAXLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select susp days >=
DataItem KL07W-NBR-OF-DAY1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// select susp days <=
DataItem KL07W-NBR-OF-DAY2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new dtl clm# cu_grp_co_id
DataItem KL07W-NEW-DTL-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new dtl clm# cu_grp_co_id
DataItem KL07W-NEW-DTL-KUCGRPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL07W-OITM-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines on page
DataItem KL07W-PAGE-LN-CT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page number
DataItem KL07W-PAGE-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tbl for # scrn & line per scrn
DataItem KL07W-PAGE-TBL num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen page index
DataItem KL07W-PAGEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AR WRITEOFF SUSPENDED ITEM GRP
DataItem KL07W-PARM-LIST-1-GROUP char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Area Code
DataItem KL07W-PHONE-AREA-CODE char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone Nbr
DataItem KL07W-PHONE-COMMENT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone nbr
DataItem KL07W-PHONE-NUMBER char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Prefix
DataItem KL07W-PHONE-PREFIX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Suffix
DataItem KL07W-PHONE-SUFFIX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ROUNDED TOTAL TRAN AMT
DataItem KL07W-ROUND-AMT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SCREEN HEADER GROUP
DataItem KL07W-SCRN-HDR-GROUP char(527)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-SELECT-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format flds ta1rec.ta1loc
DataItem KL07W-TA1LOC1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1loc1 fld 1
DataItem KL07W-TA1LOC1-1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1loc1 fld 2
DataItem KL07W-TA1LOC1-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-ANAL-CODE char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-CR-SRC char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-CREDIT-REP-CODE char(4)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-KEY char(16)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-LAYOUT char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-SRC char(3)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TB23-USER-NAME char(24)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-FUNCTION char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-KEY char(16)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-PARM-GROUP char(25)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-TBL-ARG1 char(8)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-TBL-ARG2 char(3)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBIN-TBL-NBR char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBLE-OUT-GROUP char(376)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBOT-MSG1 char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBOT-MSG2 char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem KL07W-TBOT-VSAMCA char(136)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-TBOT-VSMACT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-TBOT-VSMFLNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-TBOT-VSMRCKEY char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-TBOT-VSMST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot amt all selected trans
DataItem KL07W-TOT-TRANS-AMT num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// tot trans selected
DataItem KL07W-TOT-TRANS-COUNT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Assign this updt clm nbr
DataItem KL07W-UPDT-CLM-NBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updt function to perform
DataItem KL07W-UPDT-FCT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fct cd changed on detail  (y/n
DataItem KL07W-UPDT-FCT-CD-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UPDT cu_grp_co_id
DataItem KL07W-UPDT-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// UPDT cu_grp_co_id
DataItem KL07W-UPDT-KUCGRPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem KL07W-UPDT-YCR-CLM-RSN-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL07W-UPDT-YRC-RT-CSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KL07 WORKING STORAGE GROUP
DataItem KL07W-WS-REC-GROUP char(2686)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key
DataItem KL07W-YRCTBL-KEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key claim rsn code
DataItem KL07W-YRCTBL-KEY-YCR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key root cause code
DataItem KL07W-YRCTBL-KEY-YRC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of cl0ew03 record
DataItem KL07W3GP char(126)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem KL07W4GR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0ew08 record group level
DataItem KL07W8GP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// addl a/r ref nbr counter
DataItem KL07WAAC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// addl cust clm nbr counter
DataItem KL07WACC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws sales agency code
DataItem KL07WAGY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated sales agency/rep
DataItem KL07WARP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment field on map
DataItem KL07WCD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type of comments for claim
DataItem KL07WCDX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR WRITEOFF SUSPENDED ITEM GRP
DataItem KL07WCLM-GROUP char(138)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem KL07WCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record counter
DataItem KL07WCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// done flag
DataItem KL07WDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 1
DataItem KL07WF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// does a claim have an r.a.
DataItem KL07WHRA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator for sum #1
DataItem KL07WIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// primary invoice number
DataItem KL07WPIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws sales rep code
DataItem KL07WREP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return flag
DataItem KL07WRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql selection
DataItem KL07WSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// letters in user id
DataItem KL07WULT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for user id
DataItem KL07WUSR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-clm-stat-dt
DataItem KLASTTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// type of file io
DataItem VSMACT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vsam filename
DataItem VSMFLNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vsam record key
DataItem VSMRCKEY char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vsam return code
DataItem VSMST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AR WRITEOFF SUSPENDED ITEM GRP
DataItem VWOSUS01-GROUP char(134)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

