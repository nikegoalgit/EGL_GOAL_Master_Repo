package kl0e;

import as1.common.ARCCCREF;
import as1.common.ARCREFNB;
import corpcom1.*;
import corpcom2.XX0XWCHA;
import corpcom2.XX0XWCT1;
import corpcom2.XX0XWCT2;
import corpcom2.XX0XWEND;
import corpcom2.XX0XWERR;
import corpcom2.XX0XWFFL;
import corpcom2.XX0XWHDR;
import corpcom2.XX0XWINX;
import corpcom2.XX0XWNUM;
import corpcom2.XX0XWPIX;
import corpcom2.XX0XWSIX;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSCLSFL;
import corpcom4.XSENTRY;
import corpcom4.XSIVSN4;
import corpcom4.XSIVSN6;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CL-WRITE-OFF-IND;
import corpcom5.CLYATHPW;
import corpcom5.CLYREC;
import corpcom5.COMMAREA;
import corpcom5.CU-BILL-IND;
import corpcom5.CU-CO-SELF-NBR;
import corpcom5.CU-CO-SHORT-NM;
import corpcom5.CU-CR-APPL-DT;
import corpcom5.CU-CUSKU-SZ-FL;
import corpcom5.CU-DOC-BY-ORD-FL;
import corpcom5.CU-EDI-CUST-IND;
import corpcom5.CU-HANG-DFLT-FL;
import corpcom5.CU-LST-DAB-RPT-DT;
import corpcom5.CU-MAX-APRL-YNT-CD;
import corpcom5.CU-MAX-FTWR-YNT-CD;
import corpcom5.CU-PL-STYNM-PRT-FL;
import corpcom5.CU-PO-DT-FL;
import corpcom5.CU-PRT-XREF-FL;
import corpcom5.CU-VEND-NBR;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXX-INTL-PHONE-NBR;
import corpcom7.XXXSTAT;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XBCCD;
import corpx1.XBCTBL;
import corpx1.XCACD;
import corpx1.XCCCD;
import corpx1.XCECD;
import corpx1.XCETBL;
import corpx1.XCRCD;
import corpx1.XCTCD;
import corpx1.XCUCD;
import corpx1.XDSTBL;
import corpx1.XDSWHSEF;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XDZ-DATA-DIST-CD;
import corpx1.XFMCD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XIECD;
import corpx1.XLBCD;
import corpx1.XLCCD;
import corpx1.XLECD;
import corpx1.XLETBL;
import corpx1.XLGCD;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx1.XSOTBL;
import corpx1.XSTTBL;
import corpx1.XTTTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XOBCD;
import corpx2.XOCCD;
import corpx2.XOPCD;
import corpx2.XOTCD;
import corpx2.XPLCD;
import corpx2.XPTCD;
import corpx2.XQACD;
import corpx2.XSOCD;
import corpx2.XTTDESC;
import corpx2.XWHCD;
import corpx2.XXXUSRID;
import corpy2.YASTBL;
import corpy2.YATTBL;
import corpy2.YCH-CHNL-CLS-CD;
import corpy2.YCPCD;
import corpy2.YCPNM;
import corpy2.YCPTBL;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSACTCD;
import corpy2.YCSCD;
import corpy2.YCSCD1;
import corpy2.YCSCD2;
import corpy2.YCSRPTEX;
import corpy2.YCSTBL;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YCU-CRTN-USE-CD;
import corpy2.YCXTBL;
import corpy2.YESCDIND;
import corpy2.YITCD;
import corpy2.YITTBL;
import corpy2.YLICD;
import corpy2.YMOKEY;
import corpy2.YMOTBL;
import corpy2.YRC-RT-CSE-CD;
import corpy2.YRCTBL;
import corpy2.YUATBL;
import corpy2.YVICD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ek.common.EK0EW00;
import ek.common.EKWREC;
import iv.common.IV0GROUP;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV0REC;
import iv.common.IV6REC;
import iv.common.IVAREC;
import iv.common.IVYREC;
import iv.common.IVZREC;
import kl.common.KL14TBL;
import ku.common.KU5REC;
import ku.common.KUCACYDT;
import ku.common.KUCACYNR;
import ku.common.KUCACYRT;
import ku.common.KUCALERT;
import ku.common.KUCAPDEX;
import ku.common.KUCAPRDT;
import ku.common.KUCASMT;
import ku.common.KUCATCSH;
import ku.common.KUCBLAID;
import ku.common.KUCBPIND;
import ku.common.KUCCCAID;
import ku.common.KUCCNSCD;
import ku.common.KUCCNTCT;
import ku.common.KUCCOAID;
import ku.common.KUCCOANM;
import ku.common.KUCCOBDT;
import ku.common.KUCCOID;
import ku.common.KUCCOIDN;
import ku.common.KUCCOLCD;
import ku.common.KUCCOMNT;
import ku.common.KUCCONM;
import ku.common.KUCCRLEF;
import ku.common.KUCCRLEX;
import ku.common.KUCCRLIN;
import ku.common.KUCCSHNF;
import ku.common.KUCCSTDT;
import ku.common.KUCECODY;
import ku.common.KUCFINDT;
import ku.common.KUCFPRDT;
import ku.common.KUCFRTPD;
import ku.common.KUCFTRTI;
import ku.common.KUCGRP;
import ku.common.KUCGRPID;
import ku.common.KUCIDIND;
import ku.common.KUCINSPD;
import ku.common.KUCJSRFL;
import ku.common.KUCLBOFL;
import ku.common.KUCLCAMT;
import ku.common.KUCLCEDT;
import ku.common.KUCLCXDT;
import ku.common.KUCLVIND;
import ku.common.KUCMADID;
import ku.common.KUCMAGCT;
import ku.common.KUCMSTID;
import ku.common.KUCNSCNT;
import ku.common.KUCPDSPD;
import ku.common.KUCPHN;
import ku.common.KUCPOFL;
import ku.common.KUCPRPTI;
import ku.common.KUCPRVRT;
import ku.common.KUCPSFL;
import ku.common.KUCRAUTH;
import ku.common.KUCREC;
import ku.common.KUCSBKFL;
import ku.common.KUCSKIND;
import ku.common.KUCSSCNT;
import ku.common.KUCSTMT;
import ku.common.KUCSTYNT;
import ku.common.KUCUNTCS;
import ku.common.KUCVNDFL;
import ku.common.KUCWHSFL;
import ku.common.KUCXCSFL;
import ku.common.KUCYPOAP;
import ku.common.KUCYPOFT;
import ku.common.KUDREC;
import ku.common.KUKPCOID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSHAID;
import ku.common.KUMSTRID;
import ku.common.KUNREC;
import ku.common.KUYREC;
import ku.common.KUYREPNM;
import ku.common.KUYSVRID;
import op.common.OP1CMPNB;
import op.common.OP1COGID;
import op.common.OP1CUOID;
import op.common.OP1CUPO;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OPKREC;
import pf.common.PFJREC;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import sm.common.SM5REC;
import sp.common.SP1ID;
import sp.common.SP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCLHDR02;
import vv.common.VCLHDR02-GROUP;
import vv.common.VCLRPS01;
import vv.common.VDMACT01;
import vv.common.VLVLPY01;
import vv.common.VXVO0001;
//*** PROGRAM=KL0E ****
// ************************************************************
// *
// *               CLAIM HEADER APPLICATION
// *               ------------------------
// *               ------------------------
// *maint.   by      for
// *-------  ------  ------------------------------------------
// *4-11-88  bcourt  Pull up important processes to show on
// *                 "process list" screen.  Rename
// *                   xpcl007 - cl0esio       (not really
// *                   xpcl008 - cl0esiv        common procs)
// *                   xpcl009 - cl0esih
// *                 Add cl0ewchi flag that primary invoice
// *                 changed, use in cl0esio and cl0es60.
// *
// *7-20-88  ctrouw  can not add invoices after g/l's set-up
// *                 and use i/o modules
// *1-31-89  JWOOD   ADDED NONCSP OPTION ON CALLS
// *1-31-89  JWOOD   ADDED XSSEGTR LOGIC
// *3-22-89  gdecke  add division code logic - sport/casual
// *5-16-89  gdecke  DB2 structure changes, fix edit on xsocd.
// *                 change xcucd3 to xcucd.
// *5-22-89  gdecke  edit changes for sport/casual.
// *8-01-89  gdecke  1B2 structure changes - clarec, clprec,
// *                 cl2rec,ivarec, sp1rec. remove default
// *                 logic for gpc code = '08'.
// *8-17-89  gdecke  remove cl0es50 edit on previous ycrcd.
// *9/05/89  chellm  modified logic in s43,s48 to identify cdr
// *                 claims using xaucd's. removed ycctbl.
// *10-13-89 gdecke  took out test for store status = I in S43
// *10-16-89 chellm  added xautbl to edit for Cole Haan accts
// *                 in S43 using xatcd = 08. see cl742.
// *10-26-89 chellm  added ycxtbl for xsclsex used to calculate
// *                 raxdt using rauthdt instead of sdt.CL502
// *11-13-89 gdecke  db2 structure changes for november.
// *11-27-89 gdecke  took out test for company status = 'i'.
// *                 allow co 999999 to be changed to 666666.
// *                 fix edit at top of stmt grp cl0es43.
// *01-19-90 gdecke  db2 structure changes for january.
// *01-23-90 gdecke  change closed store edit.
// *04-06-90 gdecke  april db2 table changes. multiple reps.
// *04-13-90 gdecke  switch from count to exist test io1330,50
// *05-11-90 gdecke  side-1 changes for brand, legal entity.
// *                 db2 structure changes.
// * 6-14-90 bcourt  replace cl0et01 with xle cd from xbctbl.
// * 6-19-90 gdecke  remove acct class 45, 95 from brand test.
// * 7-13-90 sgorga  In CL0ES82: If claim has acct class cd =
// *                 '21' & has a G/L #253, and if claim type =
// *                 'ADJ'  or 'DAA', default agency/rep
// *                 to NATA/600. Chg also in CL0E105.
// *                 New stmt grp CL0ES89 cks clm for G/L #253.
// * 8-10-90 CHELLM  Added edits and updates form OP1CMPNB
// *                 (CU-COMP-CO-ID).
// *08-24-90 SGORGA  Allow claims against some Nil invoices to
// *      be created in Option 1 & 2.  This is being done by
// *      bypassing code that prevents Nil claims from being
// *      created and processed in Options 1,2,5,6. The
// *      modified stmt grps:  CL0ES43; CL0ES99; CL0ES97.
// * 09-28-90 sgorga  Added another Nil invoice.
// * 10-12-90 bcourt  DB2 structure changes, chg XCU to XCETBL
// * 11-09-90 bcourt  DB2 structure changes, no code change.
// * 11-21-90 sgorga  Made change to cl0es80, cl0es87, cl0e106.
// *       Added code to S87 to skip a sls office comparison if
// *       the order was entered via repnet (avoids err msg 52)
// * 12-19-90 gdecke  remove sls.ofc=11,gpc=2,3 test. cl0e125.
// * 12-21-90 sgorga  Made changes to CL0ES88, S91, 134, & W02
// *                  to remove KUAREC and rename kuablid to
// *                  kucblaid.  See processes for detail.
// * 01-07-91 gdecke  fix abend in cl0es80 search/replace logic
// * 01-10-91 sgorga  Fixed abend in cl0es80 (see s80 comments)
// * 01-21-91 sgorga  Hardcoded 20 NIL invoices to allow
// *                  domestic claims.   Chgd: CL0ES43,S99,S97.
// * 02-15-91 CHELLM  Added PFJREC, IV6REC, and group CL0ESIG
// *                  When invoices are added to the claim that
// *                  have been paid whole or in part with Nike
// *                  Bank ISP Co-op dollars, a warning message
// *                  will be shown to the user.
// *            Also: Changed Auth-by-id security to allow
// *                  only users with yctcd(11) = 'POP' to
// *                  authorize claims with GPCCD = '01' (ISP).
// *            Also: DB2 Structure changes for Feb. 15, 1991.
// * 02-18-91 sgorga  Hardcoded Nil invoice 6298054 (see above)
// * 02-21-91 sgorga  Hardcoded Nil invoice 6573603 (see above)
// * 02-27-91 chellm  Default XIE for ISP claims to I.
// * 03-14-91 sgorga  Hardcoded Nil invoice 6763634,6763895.
// * 03-18-91 chellm  1. Allow creation of ISP claim if cust
// *                     acct is internal comp account.(CL0E125
// *                  2. Allow no special authorization of ISP
// *                     claim if cust acct is internal comp.
// * 04-16-91 sgorga  Changes to CL0ES82,105,112,129.
// *   In Inquiry (cl0e105), always show agcy/rep from the clm
// *   hdr (CLAREC). In Change (following map converse in 100),
// *   if clm typ = DAA or ADJ and acct cls = 21, force cl0e112
// *   and cl0e129 to go to process cl0es82 where G/L 253 will
// *   be checked for.  If 253 is there, update CLAREC agcy/rep
// *   to the default 'NATA/600'. The agcy/rep on map will
// *   always reflect CLAREC's a/rep.  NOTE: the map & clm hdr
// *   agcy/rep may not be correct until the clm is authorized.
// *   because in application CL0J, G/L 253 could be added or
// *   deleted.  However, once authorized, claim and map will
// *   show correct agency/rep.
// * 04-19-91 sgorga  Hardcoded Nil inv # 6984512,6978386.
// * 04-22-91 gdecke  Handle customers translated to a new
// *                  cust nbr because of new department codes.
// * 05-07-91 sgorga  Instead of continuing to hardcode NIL
// *                  invoices (see above comments), table
// *                  CL7TBL has been created to contain all
// *                  NIL invoice nbrs that we want to allow
// *                  domestic claims against.  Removed the
// *                  hardcoded NIL nbrs from processes
// *                  CL0ES43,S97,S99.  Replaced with an
// *                  inquiry to the CL7TBL table.
// * 05-08-91 twatso  added edits between order type profile
// *                  and gpc so a claim for footwear cannot be
// *                  against an apparel account & vice versa.
// * 05-15-91 gdecke  BYPASS COSTOMER CONVERSION ROUTINE WHEN
// *                  IN INQUIRY MODE OR CLM STAT IS 'CMP',
// *                  'CAN','DEN','RSP'.
// * 05-22-91 twatso  added edits between order type profile
// *                  and gpc so a claim for footwear cannot be
// *                  against an apparel account & vice versa.
// * 06-07-91 chellm  Added edit for POP flag if claim is ISP
// *                  ADJ with no special sales office. (S76)
// * 06-14-91 GDECKE  JUNE 1991 DB2 TABLE CHANGES.
// * 08-08-91 wjohns  Renamed application and commarea
// *                    referrences to renamed claims appls.
// * 09-10-91 twatso  allow gpc 04 for sales office 11.
// * 09-16-91 twatso  Renamed sgrps, procs from cl to kl names
// * 10-31-91 twatso  added code for osd to treat it like def
// *                  to be installed in dec 1991
// * 11-21-91 gdecke  kl0es60,6a - changed order type default
// *                  for major accounts where gpc = 02 or 03.
// * 12-02-91 twatso  added brand code to key to look up xvotbl
// *                  to get xot code (order type code)
// *                  changed in s97, s98
// * 12-03-91 gdecke  add clasttdt,ycrcd,yctcd to cl0ew08 rec.
// * 12-16-91 twatso  added hard code to force if brand 07 to
// *                  look for an I.E. agency/rep - or brand 05
// *                  then get a side1 agency/rep.  Will have
// *                  to be updated if these go inactive - see
// *                  comments in kl0es82.
// * 12-18-91 twatso  if xaucd = 26, or 27 do not access cl8tbl
//                    for default agency rep with def items
// * 12-23-91 twatso  added code to check that yittbl row is
//                    active in siv,s67,s87,102,103,125,134
// * 01-06-92 twatso  added code to allow osd against a closed
//                    company -- can change company to 666666
//                    if yctcd = 'osd'.  kl0es43
// * 01-10-92 GDECKE  INITIALIZE TA2REC IN KL0E001,KL0E130 TO
// *                  PREVENT ABEND AND BAD SETUP DATES.
// * 01-15-92 GDECKE  ALLOW CLAIM REASON CHANGE IF IT WILL NOT
// *                  CAUSE DATA PROBLEMS-KL0ES50,5A,5B,5C,5D.
// * 02-11-92 GDECKE  get traffic record for reason change test
// * 02-17-92 twatso  make sure agency/rep gets changed if
//                    brand changes.   Kl0e129
// * 04-07-92 sgorga  Replaced the call to subpgm CU1290 (in
// *                  stmt grp KL0ES4C) with a call to the new
// *                  subpgm, KU1350 (used to get agency/rep).
// *                  Replaced record KUOREC with KU5REC.
// * 04-17-92 twatso  set prev-clms field red
// * 04-22-92 twatso  changed osd gpc edit and placement in sg
// *                  kl0es48
// * 05-22-92 twatso  if ycrcd is changed do an edit that finds
// *                  whether the rps flag is affected - show
// *                  an 'fyi' type message if it is
// * 06-12-92 twatso  database changes - clatbyid renamed to
// *                  cl-taken-by-id and changed from numeric
// *                  to character data.  ch to s81,s84,103,104
// *                  105,106,126.  Source of data is commarea.
// *                  xxxusrid
// * 06-18-92 twatso  replace userid with 'for c&r dept' if
// *                  claim has orig on kl0t - spec services
// *                  complaining if asked about the claim
// * 07-31-92 twatso  need to remove the checking for gl253 if
// *                  xaucd = 21 and yct = daa or adj. New
// *                  sales agencies being added.sany,sada,sata
// * 09-14-92 jhecke  rep name is no longer found on
// *                  dslsmn.vragcy01 and must now be obtained
// *                  from dslsmn.vreps001. kl0es54,s82,106,117
// *10-09-92  sgorga  Added new account nbr to use in creating
// *                  a claim, when the customer is an internal
// *                  account that is now inactive or closed.
// *                  The new internal account nbr is 888888.
// *                  See kl0es43 for more information.
// *11-05-92  JHECKE  Added code so that original authorizer of
// *                  the claim can be tracked per cl1180
// *                  139,and kl0es-add-clgrec.
// *01-12-93  jcarey  When an invoice is not available, default
// *                  the service rep to the taken by id. See
// *                  kl0es87. This does not apply to nbc (nike
// *                  bank claim) claims.
// *01-29-93  jcarey  Added code to create an activity record
// *                  when a CSW adjustment claim has a status
// *                  change. Para KL0E130 and KL0ES73.
// *04-20-93  twatso  added code in e130 to check that an adj
// *                  from the csw is checked to be in either
// *                  can, cmp, or den status to write the
// *                  dmact01 record to send to the csw side.
// *06-21-93  jcarey  changed kl0es45 to assign 'eo' xie code
// *                  to 'e' xie code. also added the pod
// *                  claims assignment to an internal xie code
// *07-22-93  gdecke  kl0e130 - write vdmact01 for status chang
// *                  on any csw claim type.
// *08-04-93  jcarey  changed kl0es45. took out the credit
// *                  status 'u' assignment to internal xie.
// *                  customer xie code assigns our xie code.
// *08-13-93  jcarey  database structure change. also added
// *                  part number to the cl2320 call to
// *                  vclivx01 table.
// *10-21-93  GDECKE  Fix bad ref to stat-cd2:alias=ycscd.
// *11-12-93  GDECKE  DB2 STRUCTURE CHANGE: CL0EW01, CL0EW09.
// *03-11-94  BCOURT  DB2 STRUCTURE CHANGE: CL0EW01, CL0EW09.
// *04-08-94  sgorga  In -S50, removed 1 line of code editing
// *                  for clm rsn code to be 'def' for all
// *                  defective clm types (DEF,CDR,OSD,NIL).
// *06-15-94  sgorga  Added code to allow 'DAA' claims with
// *                  gpc='00'.  Also, in that situation, xob
// *                  code is being defaulted to 'F1'. Changed
// *                  -s48,s56,s60,s97,s98,125,130,cl0ew01.
// *07-18-94  sgorga  Allow sls ofc 11 to have gpc = 00.  For
// *                  gpc=00, chg xob default to 'p1' (was f1),
// *                  per Gloria Fischer.  -125, S60.
// *10-21-94  twatso  add new record - vlvlpy01, new process -
// *                  kl0e-get-mstr-ivc, and code to kl0esi0
// *                  for the golf level pay project.  If ivc
// *                  is entered, check to see if it is a level
// *                  pay invoice (lvl-pay-ind = 'p'.  If so,
// *                  use new iomod to get master invoice, and
// *                  use that invoice after telling the user
// *                  that it is the master invoice - new msg.
// *10-21-94  sgorga  db2 changes: passing '**' to xob code &
// *                  gndr-age field to KU1350 (gets agcy/rep)
// *                  in KL0ES82.
// *11-03-94  sgorga  Added kl14tbl.  Added code to prevent
// *                  consumer claims from being created.
// *12-09-96  kshaw   dec table changes
// *03-06-97  kshaw   allow gpc 01 for slaes office 11 in
// *                  stmt grp  kl0e125
// *09-16-97  chellm  allow entry of sales cogs code id
// *10-08-97  chellm  added yrc root cause reason code to map
// *10-11-97  chellm  added yrc root cause reason code to map
// *10-18-97  chellm  Regen from prodmsl.
// *01-22-98  kclar1  added display only write-off flag
// *02-25-98  gdecke  remove pf key for KL0H - AR REF SCREEN
// *03-10-98  NJana   Replace CSP XVOTBL with IOMOD
// *03-16-98  rgilli  Y2K MODIFICATIONS MADE TO:
// *                  Regen to include new version of xpcl004.
// *                  KL0ES68: Remove hard code of 19 changed
// *                           to use ezedtel vs ezedte.
// *                  KL0ES41: Change year compare to century
// *                           year compare.
// *                  KL0ES47: Change year compare to century
// *                           year compare.
// *                  KL0E104: Change to use w/s field to
// *                           date field vs. xpcl004.
// *                  KL0E105: Change to use w/s field to
// *                           date field vs. xpcl004.
// *03-31-98  GDECKE  DISPLAY 'AUTOMATIC' IN AUTH BY NAME FIELD
// *                  IF MEMOED BY DISPUTE MGMT MEMO LOGIC.
// *04-06-98  NJana   Change the logic to replace CSP XVOTBL
// *                  with IOMOD VXVO0001
// *05-15-98  GDECKE  DO NOT EDIT AUTH ID/PASSWD IF CHANGE-BY
// *                  IS 'AUTOMATC'.
// *06-11-98  GDECKE  USE PF7 TO TRANSFER BACK TO EK0E
// *06-17-98  NJANA    Added code to allow
// *                  force completion thru the screen
// *09-33-98  GDECKE  ROLL OLD CLM STATUS TO YCSCD2 IF CHANGED.
// *10-19-98  GDECKE  CLEAR CLWREC FASTPATH ITM AFTER USE.
// *01-27-98  GDECKE  ALLOW ENTRY OF VALID WAREHOUSE WHEN WHSE
// *                  ON ORDER AND IVC IS BLANK. KL0ES56.
// *04-12-99  GDECKE  ADD PF19 TO TRANSFER TO kl08.
// *09-09-99  ssank1  Changed map presentation in KL0EM001 to
// *                  accomodate 4 digit nike ord id.
// *07-17-01  DSINHA  Added SAP RTN SO NBR as display field on
// *                  map replacing A/R Ref field.
// *11-28-01  SVIJAY  RECOMPILED DUE TO CHANGES IN CLPREC.
// ************************************************************
// *********************
Program KL0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0EW01 CL0EW01; // record
  CL0EW02 CL0EW02; // record
  CL0EW03 CL0EW03; // record
  CL0EW04 CL0EW04; // record
  CL0EW05 CL0EW05; // record
  CL0EW06 CL0EW06; // record
  CL0EW07 CL0EW07; // record
  CL0EW08 CL0EW08; // record
  CL0EW09 CL0EW09; // record
  CL1REC CL1REC; // record
  CL2REC CL2REC; // record
  CL4REC CL4REC; // record
  CL5REC CL5REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLEREC CLEREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLIREC CLIREC; // record
  CLJREC CLJREC; // record
  CLLREC CLLREC; // record
  CLNREC CLNREC; // record
  CLPREC CLPREC; // record
  CLRREC CLRREC; // record
  CLUREC CLUREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  CLYREC CLYREC; // record
  COMMAREA COMMAREA ; // record
  EK0EW00 EK0EW00; // record
  EKWREC EKWREC; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IV6REC IV6REC; // record
  IVAREC IVAREC; // record
  IVYREC IVYREC; // record
  IVZREC IVZREC; // record
  KU5REC KU5REC; // record
  KUCREC KUCREC; // record
  KUDREC KUDREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUYREC KUYREC; // record
  OPKREC OPKREC; // record
  PFJREC PFJREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCLHDR02 VCLHDR02; // record
  VCLRPS01 VCLRPS01; // record
  VDMACT01 VDMACT01; // record
  VLVLPY01 VLVLPY01; // record
  VXVO0001 VXVO0001; // record
  XPYRCW01 XPYRCW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YCTTBL {deleteAfterUse = yes}; // table
  use CL7TBL {deleteAfterUse = yes}; // table
  use CL8TBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XCETBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLETBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XTTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YASTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YRCTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YITTBL {deleteAfterUse = yes}; // table
  use YMOTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL14TBL {deleteAfterUse = yes}; // table
  use KL0EM.KL0EM001,  // forms
      KL0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0E000: KL0E000();
    exit program;
    KL0E001: KL0E001();
    KL0E050: KL0E050();
    KL0E100: KL0E100();
    KL0E101: KL0E101();
    KL0E104: KL0E104();
    KL0E102: KL0E102();
    KL0E103: KL0E103();
    KL0E107: KL0E107();
    KL0E110: KL0E110();
    KL0E120: KL0E120();
    KL0E130: KL0E130();
    KL0E111: KL0E111();
    KL0E114: KL0E114();
  end // end main
end // end KL0E

// update claim comment table
Function KL0E-ADD-CLGREC()
   /* ************************************************************/
   /* *          update the claim comment table                 **/
   /* *          with type 'a' record which contains the        **/
   /* *          original authorizer of the claim and is        **/
   /* *          reported on the cl2011 report.                 **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES-ADD-CLGREC";

  set CLGREC empty;

  CLGREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLGREC.CLGCMTYP = "A";
  CLGREC.CLGCMSEQ = 1;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;

  set SQLCA empty;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TBLKE = "INQUIRING ON CLG RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCOM01";
      TA1REC.TA1LOCAT[2] = "KL0ES-ADD-CLGREC";
      XPCL010();
    end
  end
  CLGREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "A";
  CLGREC.CLGCMSEQ = 1;
  CLGREC.CLGCOMNT = COMMAREA.CAUSERID;
  CLGREC.XXXUSRID = COMMAREA.CAUSERID;
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLGREC.ZZZCHGCT = 0;

  set SQLCA empty;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
   /* NEXT SENTENCE;*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0EW01.CL0EWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING ON CLG RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCOM01";
      TA1REC.TA1LOCAT[2] = "KL0ES-ADD-CLGREC";
      XPCL010();
    end
  end


end // end KL0E-ADD-CLGREC

// select unique from vlvlpy01
Function KL0E-GET-MSTR-IVC()
   /* **************************************/
   /* select unique on vlvlpy01*/
   /* **************************************/
   /* 09-26-94 twatso   added for golf level pay change.*/
   /* If we have found the invoice and it is a*/
   /* level pay invoice, find the master ivc*/
   /* which will be used to find another iv0rec rec*/
   /* **************************************/

  CLXREC.CLXCPROC = "KL0E-GET-MSTR-IVC";

  set SQLCA empty;

  call "VLVLPY01" ("S ", SQLCA, VLVLPY01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(765); /* let them know it is master invoice*/
    KL0EM001.IV0IVCID = VLVLPY01.IV-MSTR-IVC-ID;
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
          /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "KL0E-GET-MSTR-IVC"; /* location*/
        TA1REC.TA1LOCAT[4] = "VLVLPY01"; /* iomod name*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VLVLPY01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0EM001.IV0IVCID; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0E-GET-MSTR-IVC

Function KL0E-INIT-CLAREC()
  set CLAREC empty;

  if (VCLHDR02.CLACLMNB == 0)
    return;
  else
    /* **********************************************************/
    /* *  Get Claim Header Record for view VCLHDR01            **/
    /* *  VCLHDR01 view will be passed to following claims apps**/
    /* **********************************************************/
    CLAREC.CLACLMNB = VCLHDR02.CLACLMNB;
    call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get claim header*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set VCLHDR02 empty;
        set CLAREC empty;
      else
        TA1REC.TA1TBLKE = "FATAL ERROR SELECTING CLAIM HEADER";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR01";
        TA1REC.TA1LOCAT[2] = "KL0E-INIT-CLAREC";
        XPCL010();
      end
    end
  end

end // end KL0E-INIT-CLAREC

Function KL0E-INIT-VCLHDR02()
  set VCLHDR02 empty;

  if (CLAREC.CLACLMNB == 0)
    return;
  else
    /* **********************************************************/
    /* *  Get Claim Header Record for view VCLHDR02            **/
    /* *  VCLHDR02 CONTAINS THE ROOT CAUSE REASON CODE         **/
    /* **********************************************************/
    VCLHDR02.CLACLMNB = CLAREC.CLACLMNB;
    call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes}; /* get company rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set VCLHDR02 empty;
        set CLAREC empty;
      else
        TA1REC.TA1TBLKE = "FATAL ERROR SELECTING CLAIM HEADER";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR02";
        TA1REC.TA1LOCAT[2] = "KL0E-INIT-VCLHDR02";
        XPCL010();
      end
    end
  end

end // end KL0E-INIT-VCLHDR02

// Show Pop-Up Windows
Function KL0E-SHOW-POPUPS()
   /* *************************************************************/
    /* show pop up window for valid ROOT CAUSE CODE YRC-RT-CSE-CD*/
   /* *************************************************************/


  if (KL0EM001.YRC-RT-CSE-CD == "?")
     /* next sentence*/
  else
    return;
  end


  if (KL0EM001.YCRCD == " ") /* must have a valid reason code*/
    converseLib.validationFailed(792); /* in order to select root causes.*/
    set KL0EM001.YCRCD cursor, modified, bold;
    set KL0EM001.YRC-RT-CSE-CD bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
    return;
  end

  CL0EW01.KL0EW-YRCTBL-KEY-YCR = KL0EM001.YCRCD;
  CL0EW01.KL0EW-YRCTBL-KEY-YRC = "00";
  CL0EW01.KL0EW-YRCTBL-KEY-YCR = KL0EM001.YCRCD;
  if (CL0EW01.KL0EW-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
    /* a root cause code is required for the reason code*/
    /* next sentence   OK to show pop-up window*/
  else
    converseLib.validationFailed(791); /* a root cause code is not required*/
    set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
    return;
  end

  set XX0XM001 initial;
  set XPYRCW01 empty;
  XPYRCW01.XX0XWFFL = "Y";
  XPYRCW01.XX0XWEND = "N";
  XPYRCW01.XX0XWERR = "N";
  XPYRCW01.XX0XWCT1 = 1; /* Set up table index*/
  XPYRCW01.YCRCD = KL0EM001.YCRCD;
  while (XPYRCW01.XX0XWEND == "N")
    XPYRC01();
  end
  set KL0EM001.YRC-RT-CSE-CD cursor;
  if (XPYRCW01.XX0XWPIX > 0)
    KL0EM001.YRC-RT-CSE-CD = YRCTBL.YRC-RT-CSE-CD[XX0XWPIX];
  end


  converseLib.clearScreen();
  
end // end KL0E-SHOW-POPUPS

// application main logic
Function KL0E000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xpcl001 checks to ensure that the claim header has    **/
   /* *         been flagged as "in use" if this application    **/
   /* *         is does updates.                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  COMMAREA.CACURRAP = "KL0E";



  KL0E001(); /* initilize the application*/


  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0E050(); /* process the application screen(s)*/
  end


  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/




end // end KL0E000

// initialize application
Function KL0E001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) enhancements: access to the inspection    **/
   /* *     in order to set the have returns flag               **/
   /* *  2. CHELLM 1-7-90 Added CL0EWNBW initialize.            **/
   /* *  3. twatso 10-28-91 added code for osd - installation   **/
   /* *                     during December 91                  **/
   /* *    01/10/92  GDECKE  INITIALIZE TA2REC-PREVENT BAD DATE.**/
   /* *    01-13-92  SGORGA  Set ta1rec empty.                  **/
   /* *    10/19/98  GDECKE  CLEAR FASTPATH ITEM FROM CLWREC.   **/
   /* ************************************************************/

   /* TEMP001;*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/

  XSENTRY(); /* check entered thru csp main menu*/
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  XPCL011(); /* claims entry module*/
   /* CLEAR CLWREC FASTPATH ITEM AFTER USE*/
  CLWREC.CLWITM1N = " ";
  set VCLHDR02 empty;
  KL0E-INIT-VCLHDR02();

  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set CL0EW01 empty;
  set CL0EW02 empty; /* clear out ws copy of clarec*/
  set KULREC empty;


  CL0EW01.CL0EWNBW = "N"; /* set Nike Bank dollars flag to 'no'*/
  CL0EW01.CL0EWCOF = "N"; /* set new-comp-co-entered flag to 'no'*/
  CL0EW01.CL0EWSIA = "N"; /* set stay-in-application-flag to 'no'*/
  CLXREC.CLXEOAF = "N"; /* set application-done-switch to 'no'*/
  CLXREC.CLXBLDSC = "Y"; /* set build-screen flag to 'yes'*/
  CLXREC.CLXERRF = "N"; /* set error flag*/




  if (VCLHDR02.CLACLMNB == 0 /* if there's no claim*/
   && VCLHDR02.YCTCD == " "  
   && VCLHDR02.YCRCD == " ")
     /* next sentence*/
  else
    if (CLWREC.CLWACTIV == "A" /* if there is a claim*/
     || CLWREC.CLWSETBY == "E") /* or inquiry was set by cl0e*/
      if (CLWREC.CLWMNOPT == 5)
        if (VCLHDR02.YCTCD == "ADJ"
         || VCLHDR02.YCTCD == "DAA"
         || VCLHDR02.YCTCD == "NBC")
          CLWREC.CLWACTIV = "C"; /* we need to switch to change*/
        else
          CLWREC.CLWACTIV = "I"; /* we need to switch to inquiry*/
        end
        CLWREC.CLWMNOPT = 5;
      else
        CLWREC.CLWACTIV = "C"; /* we need to switch to change*/
        if (VCLHDR02.YCTCD == "ADJ" /* 7-14-88*/
         || VCLHDR02.YCTCD == "NBC" /* 7-14-88*/
         || VCLHDR02.YCTCD == "DAA") /* 7-14-88*/
          CLWREC.CLWMNOPT = 05;
        else
          if (VCLHDR02.CLAWSENF == "Y")
            if (VCLHDR02.YCTCD == "CDR")
              CLWREC.CLWMNOPT = 12;
            else
              if (VCLHDR02.YCTCD == "DEF"
               || VCLHDR02.YCTCD == "OSD")
                CLWREC.CLWMNOPT = 12;
              else
                if (VCLHDR02.YCTCD == "NIL")
                  CLWREC.CLWMNOPT = 13;
                else
                  if (VCLHDR02.YCTCD == "RFL")
                    CLWREC.CLWMNOPT = 11;
                  else
                    if (VCLHDR02.YCTCD == "RTS")
                      CLWREC.CLWMNOPT = 11;
                    else
                      if (VCLHDR02.YCTCD == "SCO")
                        CLWREC.CLWMNOPT = 8;
                      end
                    end
                  end
                end
              end
            end
          else
            if (VCLHDR02.YCTCD == "CDR" /* phase (B) enhancement*/
             || VCLHDR02.YCTCD == "RFL" 
             || VCLHDR02.YCTCD == "RTS" 
             || VCLHDR02.YCTCD == "DEF" 
             || VCLHDR02.YCTCD == "OSD") /* added for off-shore defectives*/
              CLWREC.CLWMNOPT = 6;
            end
          end
        end
      end
    else
      if (CLWREC.CLWMNOPT == 6) /* phase (B) enhancement*/
        CLWREC.CLWACTIV = "C";
      end
      if (CLWREC.CLWMNOPT == 5)
        if (VCLHDR02.YCTCD == "ADJ"
         || VCLHDR02.YCTCD == "DAA"
         || VCLHDR02.YCTCD == "NBC")
          CLWREC.CLWACTIV = "C"; /* we need to switch to change*/
        else
          CLWREC.CLWACTIV = "I"; /* we need to switch to inquiry*/
        end
      end
    end
  end



  CLXREC.CLXCSCRN = "KL0EM001"; /* set first screen name*/

  CLXREC.CLXSNAME[1] = "KL0EM001"; /* screens used in this*/


  KL0E002(); /* check menu option security*/

   /* *************************************************/
   /* * phase (B) enhancement:*/
   /* * 1. i/o to the inspection table (vrinsp01)*/
   /* *    in order to the the "have return flag" on*/
   /* * 2. also, get the ra record so that it is available*/
   /* *    for processing (vrahdr01)*/
   /* *************************************************/

  KL0E003(); /* access the vrinsp01 table*/

  KL0E004(); /* access the vrahdr01 table*/

   /* *************************************************/
   /* * phase (B) enhancement ---   end   ---*/
   /* *************************************************/

  set TA1REC empty;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0E001";
    XPCL010(); /* abend*/
  end

  if (CLWREC.CLWMXIDX > 0) /* we are processing array*/
    if (CLWREC.CLWCLIDX < 1
     || CLWREC.CLWCLIDX > CLWREC.CLWMXIDX)
      CLXREC.CLXARAYX = 1;
    else
      CLXREC.CLXARAYX = CLWREC.CLWCLIDX; /* save starting index*/
      while (CLXREC.CLXARAYX <= CLWREC.CLWMXIDX
       && CLWREC.CLWSELCD[CLXARAYX] != "S"
       && CLWREC.CLWSELCD[CLXARAYX] != "P")
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      end
      if (CLXREC.CLXARAYX > 200) /* this should never happen, but....*/
        CLXREC.CLXARAYX = CLWREC.CLWCLIDX; /* reset just in case*/
      end
    end
  end


end // end KL0E001

// check menu option security
Function KL0E002()
   /* ************************************************************/
   /* *      check the menu option security                     **/
   /* *  maintenance:                                           **/
   /* *  ------------                                           **/
   /* *  1. phase (B) enhancement: added check to not allow     **/
   /* *     no-credit and non-sales users to update claims      **/


   /* *************************************************************/
   /* *  phase (B) logic to not allow maintenance to non-credit or*/
    /* sales personnel*/
   /* ************************************************************/
   /* *                                                         **/
   /* *08-07-91 wjohns rename appls for transfers               **/
   /* ************************************************************/
  if (CLWREC.CLWMNOPT == 2
   || CLWREC.CLWMNOPT == 6)
    if (COMMAREA.CAALVL[1] == "N"
     && COMMAREA.CAALVL[3] == "N"
     && COMMAREA.CACLVL[1] == "N"
     && COMMAREA.CACLVL[3] == "N")
      converseLib.validationFailed(29); /* changed to inquiry mode*/
      CLWREC.CLWACTIV = "I"; /* set to inquiry mode*/
      return;
    end
  end

   /* *************************************************************/
   /* *  phase (B) enhancement ---   end   ---*/
   /* *************************************************************/


  if (CLWREC.CLWACTIV == "A") /* if in 'add' mode*/
    if (COMMAREA.CAADDFL == "Y")
      /* next sentence*/
    else
      CLWREC.CLWEZMNO = 377; /* not auth to add*/
      COMMAREA.CATOAP = "KL0A";
      XPCL002();
      return;
    end
  else
    if (CLWREC.CLWACTIV == "C") /* if in 'change' mode*/
      if (COMMAREA.CACHGFL == "Y")
        /* next sentence*/
      else
        CLWREC.CLWEZMNO = 378; /* not auth to change*/
        COMMAREA.CATOAP = "KL0A";
        XPCL002();
        return;
      end
    else
      if (CLWREC.CLWACTIV == "I") /* if in 'inquiry' mode*/
        if (COMMAREA.CAINQFL == "Y")
          /* next sentence*/
        else
          CLWREC.CLWEZMNO = 379; /* not auth to inquire*/
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
          return;
        end
      end
    end
  end




end // end KL0E002

// set have-rtn flag (get CLLREC)
Function KL0E003()
   /* *************************************************************/
   /* *                                                          **/
   /* *  SELECT THE RETURN INSPECTION FLAG FROM DCLAIM.VRINSP01  **/
   /* *                                                          **/
   /* *  1) Select for existence using CLlREC.                   **/
   /* *     - If one or more row exists, set have-returns-flag   **/
   /* *       to yes.                                            **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E003"; /* Set current process name*/


  CL0EW01.CL0EWHVR = "N";

  if (VCLHDR02.CLACRTNB > 1) /* current return number*/
    CL0EW01.CL0EWHVR = "Y";
    return;
  end


  set SQLCA empty; /* 11-14-89 add*/
  set CLLREC empty;
  CLLREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLLREC.CLLRTNNB = VCLHDR02.CLACRTNB;

  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0EW01.CL0EWHVR = "Y"; /* Have return for this claim*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTN01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end




end // end KL0E003

Function KL0E004()
   /* *************************************************************/
   /* *                                                          **/
   /* *  SELECT THE RETURN authorization header record VRahdr01  **/
   /* *                                                          **/
   /* *  1) Select the cljrec                                    **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E004"; /* Set current process name*/


  if (VCLHDR02.CLACLMNB > 0)
    set CLJREC empty; /* Claim actual ra header record*/
    CLJREC.CLACLMNB = VCLHDR02.CLACLMNB;

    /* ***************************************/
         /* Select ra header*/
    /* ***************************************/

    call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWHRA = "Y"; /* there is an r.a.*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0EW01.CL0EWHRA = "N"; /* initialize have an r.a. flag*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010(); /* Perform abend routine for claims*/
      end
    end
  end




end // end KL0E004

// access cl2320
Function KL0E005()


   /* *********************************************************/
    /* io to the invoice and claim header table with the*/
    /* purpose of identifing claims that are 'rts'*/
    /*  */
    /* 08-13-93 jcarey added op1partn before calling cl2320.*/
   /* *********************************************************/

  set CL0EW08 empty;
  CL0EW08.CL0EWSQL = "S2";
  CL0EW08.CLACLMNB = KL0EM001.CLACLMNB;
  CL0EW08.OP1CUOID = KL0EM001.OP1CUOID;
  CL0EW08.OP1NORID = KL0EM001.OP1NORID;

  CLXREC.CLXORDIV = KL0EM001.OP1CUOID; /* get the order part number*/
  CL0EW08.OP1PARTN = CLXREC.CLXPARTN;

  call "CL2320" (CL0EW08, SQLCA) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLXIV01";
    XPCL010(); /* Perform abend routine for claims*/
  end




end // end KL0E005

// main cl0e branch control
Function KL0E050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E050"; /* set current process name*/


  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end



  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/


  if (CLXREC.CLXSCRNX == 1) /* if screen cl0%m001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0E100(); /* process screen cl0em001*/
    end
  else
    TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
    XPCL010();
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf) = 'n'*/
           /* we go back to the top of cl0e050...*/
       /* if the end-of-application flag (clxeoaf) = 'y'*/
           /* we return to cl0e000.*/



end // end KL0E050

Function KL0E075()



   /* *************************************************************/
   /* *                                                          **/
   /* *  create an exception record                              **/
   /* *                                                          **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E075"; /* Set current process name*/

  CL1REC.CLACLMNB = VCLHDR02.CLACLMNB; /* set claim number*/
  CL1REC.CL2ISNBR = 0; /* set inspection number*/
  CL1REC.CLLRTNNB = 0; /* set return number*/
  CL1REC.CL1CLMN2 = 0; /* set claim number 2*/
  CL1REC.CL1XOFL = " "; /* set override flag*/
  CL1REC.YCECD = "TFA"; /* set flag*/
  CL1REC.XXXUSRID = " "; /* update the user id*/
  CL1REC.ZZZCHGDT = CLXREC.XXXCDTE; /* set date*/
  CL1REC.ZZZCHGTM = CLXREC.XXXCHHMM; /* set time*/
  CL1REC.ZZZCHGCT = 0; /* set count*/

   /* ***************************************/
       /* create exception record*/
   /* ***************************************/

  call "IO2840" ("A ", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* insert record*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLXCP01";
    XPCL010(); /* Perform abend routine for claims*/
  end




end // end KL0E075

// access the vathlm01 table
Function KL0E080()
   /* *************************************************************/
   /* *  SELECT THE USER / GPC CODE USER authorization record    **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E080"; /* Set current process name*/


  set CL4REC empty; /* authorization by gpc code record*/
  CL4REC.XGPCD = CL0EW02.XGPCD;
  CL4REC.XXXUSRID = CL0EW01.XXXUSRID;

   /* ***************************************/
       /* Select user / gpc code row*/
   /* ***************************************/

  call "IO2820" ("S ", SQLCA, CL4REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VATHLM01";
    XPCL010(); /* Perform abend routine for claims*/
  end




end // end KL0E080

// I/O-is sales ofc valid 4 user?
Function KL0E081()

   /* *************************************************************/
   /* *  SELECT THE USER / sls office record*/
   /* *  to verify sales office is valid for this userID.*/
   /* MAINTENANCE:*/
    /* 04-06-90 bcourt add description to process*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E081"; /* Set current process name*/


   /* ***************************************/
       /* Select user / sls office row*/
   /* ***************************************/

  call "IO2850" ("S ", SQLCA, CL5REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLXSO01";
    XPCL010(); /* Perform abend routine for claims*/
  end




end // end KL0E081

// I/O-get cust svc rep
Function KL0E082()

   /* *************************************************************/
   /* *  SELECT THE kuyrec for the current user*/
   /* MAINTENANCE:*/
   /* 04-06-90 bcourt add process description.*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E082"; /* Set current process name*/


  set KUYREC empty; /* authorization by gpc code record*/
  KUYREC.XXXUSRID = CL0EW01.XXXUSRID;

   /* ***************************************/
       /* Select service rep record*/
   /* ***************************************/

  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VSVREP01";
    XPCL010(); /* Perform abend routine for claims*/
  end




end // end KL0E082

// close exceptions
Function KL0E083()
   /* *************************************************************/
   /* *  close exceptions when special sales office person*/
   /* *  authorizes claim*/
   /* ******************************************************************/
   /* *    M A I N T E N A N C E      H I S T O R Y     L O G         **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 10-22-93  GDECKE  REMOVE OVERLAPPING MOVE STMTS.              **/
   /* ******************************************************************/

  CLXREC.CLXCPROC = "CL0E083"; /* Set current process name*/


  set CL1REC empty; /* exception record*/
  CL1REC.CLACLMNB = KL0EM001.CLACLMNB;
  CL1REC.CL2ISNBR = 0;
  CL1REC.CLLRTNNB = 0;
  CL1REC.YCECD = "AUL";

   /* ***************************************/
       /* Select exception record*/
   /* ***************************************/

  call "IO2840" ("S ", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence ; found exceptions*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return; /* found no exceptions*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[1] = "UNIQUE";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end


  CL1REC.XXXUSRID = CL0EW02.CLASCGBY;
  CL1REC.ZZZCHGDT = CLXREC.XXXCDTE;
  CL1REC.ZZZCHGTM = CLXREC.XXXCHHMM;

  CL1REC.CLACLMNB = KL0EM001.CLACLMNB;
  CL1REC.CL2ISNBR = 0;
  CL1REC.CLLRTNNB = 0;
  CL1REC.YCECD = "AUL";

  call "IO2840" ("U ", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* update unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VSVREP01";
    TA1REC.TA1LOCAT[1] = "UPDATE";
    XPCL010(); /* Perform abend routine for claims*/
  end


end // end KL0E083

// converse screen m001
Function KL0E100()
   /* ************************************************************/
   /* *    process screen cl0em001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0e050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E100"; /* set current process name*/



  if (CLXREC.CLXBLDSC == "Y"
   && CLXREC.CLXERRF == "N") /* ; phase (B) enhancement*/
    KL0E101(); /* build the screen*/
  else
    if (CLWREC.CLWACTIV == "A" /* if adding*/
     && CLXREC.CLXERRF == "N") /* and no errors*/
      KL0E107(); /* set top 4 lines of screen to display*/
    end
  end

  KL0EM001.XXXPRCNM = "KL0E100"; /* set screen  process name*/
  KL0EM001.XXXMAPNM = "KL0EM001"; /* set current map name*/
  KL0EM001.XXXRVNBR = "00"; /* set revision number*/
  KL0EM001.XXXCURDT = VGVar.currentShortGregorianDate;

  CLXREC.CLXBLDSC = "N";
  KL0EM001.VAGen_EZEMSG = CLXREC.CLXMSG;

   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  converse KL0EM001 ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


  if (converseVar.eventKey is enter) /* only check on enter*/
    if (KL0EM001 is modified) /* don't do this logic*/
      /* next sentence                  if user has touched screen*/
    else
      if (CLWREC.CLWMXIDX > 0) /* we are using table*/
        if (CLWREC.CLWSELCD[CLXARAYX] == "P")
          CLWREC.CLWSELCD[CLXARAYX] = "V"; /* set viewed*/
          while (CLXREC.CLXARAYX <= CLWREC.CLWMXIDX
           && CLWREC.CLWSELCD[CLXARAYX] != "S")
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
          if (CLXREC.CLXARAYX > CLWREC.CLWMXIDX) /* at end of table*/
            COMMAREA.CATOAP = CLWREC.CLWAPPFM;
            XPCL002();
            return;
          end
          set VCLHDR02 empty;
          VCLHDR02.CLACLMNB = CLWREC.CLWCLMNB[CLXARAYX];
          set SQLCA empty;
          call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE != 0)
            TA1REC.TA1DBASE = "DCLAIM";
            TA1REC.TA1TBLVU = "VCLHDR01";
            TA1REC.TA1TBLKE = "LOOKING FOR CLAIM IN ARRAY";
            CLXREC.CLXCPROC = "CL0E100"; /* set current process name*/
            XPCL010();
          end
                 /* MOVE 'Y' TO CLXREC.CLXBLDSC    ; build new screen*/
          COMMAREA.CATOAP = "KL0E";
          KL0E-INIT-CLAREC();
          XPCL002();
          return;
        else
          CLWREC.CLWSELCD[CLXARAYX] = "P"; /* claim in process*/
        end
      else
        /* next sentence*/
      end
    end
  end


  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* initialize errors-flag*/
  CLXREC.CLXUPDTF = "N"; /* initialize do-updates-flag*/
  CL0EW01.CL0EWUOK = "N"; /* initialize updates-went-ok-flag*/


  KL0E116(); /* set fields modified*/


  KL0E110(); /* handle any special entries*/


  if (CLXREC.CLXERRF == "Y")
    return; /* go show error message*/
  end


  KL0E112(); /* set edit flag*/


  if (CLXREC.CLXEDITF == "Y") /* if we want to do edits*/
    KL0E120(); /* go process screen entries*/
  end


  KL0E113(); /* set do-updates flag*/


  if (CLXREC.CLXUPDTF == "Y") /* if we want to update*/
    KL0E130(); /* go update the entries*/
  end


  KL0E115(); /* set flow-to-next-process flag*/


  if (CL0EW01.CL0EWFLO == "Y") /* if time to flow to next application*/
    KL0E-INIT-CLAREC();
    if (YCSTBL.YCSAINPF[CLXYCSX] == "N"
     && CLWREC.CLWACTIV != "I") /* and not in inquiry mode*/
      CLWREC.CLWACTIV = "I"; /* switch to inquiry mode*/
         /* MOVE 4 TO CLWREC.CLWMNOPT   ; set menu option to inquiry*/
      CLWREC.CLWSETBY = "E"; /* inquiry set by kl0e*/
    end
    if (converseVar.eventKey is enter) /* 'enter' flow is set up here*/
      KL0E111(); /* set up 'enter' key flow*/
      if (CLXREC.CLXERRF == "Y") /* if errors*/
        return;
      end
    else
      KL0E114(); /* set up pfkey flow*/
      if (CLXREC.CLXERRF == "Y") /* if errors*/
        return;
      end
    end
    XPCL002();
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/



end // end KL0E100

// build screen cl0%m001
Function KL0E101()
   /* ************************************************************/
   /* *        build screen cl0em001                            **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *  08-10-90 chellm Added CL0EW09                          **/
   /* *  08-22-90 chellm Added clgrec to records cleared        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E101"; /* set current process name*/

  set KL0EM001 initial;


   /* remove code to clear cl0ew01. this is done in cl0e001.*/
    /* SET CL0EW01 EMPTY; gdecke 05-16-89*/
  set CL0EW03 empty;
  set CL0EW09 empty; /* added 08-10-90*/
  set IV0REC empty;
  set IVAREC empty;
  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUYREC empty;
  set SM1REC empty;
  set SM4REC empty;
  set SM5REC empty;
  set CLBREC empty;
  set CLCREC empty;
  set CLGREC empty;
  set CLIREC empty;
  set CLLREC empty;
  set CLNREC empty;
  set CLPREC empty;
  set CLRREC empty;
  set SP1REC empty;


  CLXREC.CLXYCTX = 0; /* set claim-type index to 0*/
  CLXREC.CLXYCSX = 0; /* set claim-status index to 0*/
  CLXREC.CLXYCRX = 0; /* set claim-reason index to 0*/
  CL0EW01.CL0EWSF1 = "N"; /* message has not displayed*/



  if (CLWREC.CLWACTIV == "A")
    set VCLHDR02 empty;
    KL0E104(); /* build add screen*/
  else
    CL0EW02.VCLHDR02-GROUP = VCLHDR02.VCLHDR02-GROUP;
    if (CLWREC.CLWACTIV == "I")
      KL0E102(); /* set up inquiry screen*/
    else
      if (CLWREC.CLWACTIV == "C")
        KL0E103(); /* set up change screen*/
      end
    end
  end


  CL0EW02.VCLHDR02-GROUP = VCLHDR02.VCLHDR02-GROUP;




end // end KL0E101

// set up inquiry-mode screen
Function KL0E102()
   /* *************************************************************/
   /* set up inquiry-mode screen                            **/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                             **/
   /* -----------------------------------------------------------**/
   /* phase (B) enhancement:                  **/
   /* added the call to cl0e107               **/
   /* 12-23-91  twatso  check yittbl row for active             **/
   /* 10-22-93  GDECKE  REMOVE OVERLAPPING MOVE STMT.           **/
   /* **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0E102"; /* set current process name*/


  KL0E107(); /* prepare screen fieds*/

  set KL0EM001.CLACLMNB initialAttributes;
  KL0EM001.CL0EML1 = "Nike Claim Nbr:";

  set KL0EM001.CLACLMNB cursor;

  set KL0EM001.YCSCD skip;

  KL0E109(); /* protect some screen fields*/

  KL0E105(); /* move header information to screen*/

  KL0E106(); /* edit screen to expand code*/

  if (CL0EW01.OP1CUOID != 0)
    KL0EM001.OP1CUOID = CL0EW01.OP1CUOID;
    KL0EM001.OP1NORID = CL0EW01.OP1NORID;
  end

  if (KL0EM001.YITCD == " ")
    CLXREC.CLXYITX = 3;
  else
    if (KL0EM001.YITCD in YITTBL.YITCD)
      CLXREC.CLXYITX = sysVar.arrayIndex;
      /* IF YITTBL.XXXSTAT(EZETST) = 'A';/* if row is active*/
      /* ELSE;*/
                                  /* MOVE 128 TO EZEMNO;        /**/
                                   /* invoice/order indicator is not valid*/
       /* SET KL0EM001.YITCD CURSOR,BRIGHT;*/
      /* END;*/
    end
    if (KL0EM001.YITCD == "I"
     || KL0EM001.YITCD == "N")
      KL0EM001.YITCD = " ";
    end
  end

end // end KL0E102

// set up change-mode screen
Function KL0E103()
   /* ************************************************************/
   /* *   set up change-mode screen!                            **/
   /* *                                                         **/
   /* *  maintenance:                                           **/
   /* *  1. phase (B) enhancements:  checking for option 7 from **/
   /* *     the main menu.  it traps it and sends msg if trying **/
   /* *     to edit the claim status                            **/
   /* *  2. check the worksheet entered flag to see if a pass-  **/
   /* *     is required                                         **/
   /* *  08-10-90 CHELLM Moved OP1CMPNB to CL0EW03 rec.         **/
   /* *  10-12-90 bcourt change XCGCD to OP1COGID.              **/
   /* *                  change XCUCD(3) to XCECD.              **/
   /* *  10-28-91 twatso added code for osd for installation in **/
   /* *                  December 91                            **/
   /* *  12-23-91 twatso added code to check yittbl for active  **/
   /* *  04-17-92 GDECKE  SAVE ORIGINAL CLWREC.CLWACTIV FOR KL06**/
   /* *                                                         **/
   /* *  10/29/97 rchauv  REASON CODE CONVERSION - NO MORE S10  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E103"; /* set current process name*/

  KL0E107(); /* prepare header fields*/

  KL0E105(); /* move header information to screen*/

  KL0E106(); /* edit screen to expand code*/

  CL0EW03.CL0EWARP = KL0EM001.CL0EWARP;
  CL0EW03.CL-TAKEN-BY-ID = KL0EM001.CL-TAKEN-BY-ID;
  CL0EW03.XSOCD = KL0EM001.XSOCD;
  CL0EW03.XTTDESC = KL0EM001.XTTDESC;
  CL0EW03.XGPCD = KL0EM001.XGPCD;
  CL0EW03.XPTCD = KL0EM001.XPTCD;
  CL0EW03.XOCCD = KL0EM001.XOCCD;
  CL0EW03.SP1ID = KL0EM001.SP1ID;
  CL0EW03.XCECD = KL0EM001.XCECD;
  CL0EW03.XXXUSRID = KL0EM001.XXXUSRID;
  CL0EW03.YCTCD = KL0EM001.YCTCD;
  CL0EW03.YCRCD = KL0EM001.YCRCD;
  CL0EW03.YRC-RT-CSE-CD = KL0EM001.YRC-RT-CSE-CD;
  CL0EW03.XWHCD = KL0EM001.XWHCD;
  CL0EW03.KUCCOID = KL0EM001.KUCCOID;
  CL0EW03.KUMSTRID = KL0EM001.KUMSTRID;
  CL0EW03.XNXCD = KL0EM001.XNXCD;
  CL0EW01.KUCGRP[1] = KUCREC.KUCGRP;
  CL0EW03.OP1CMPNB = KL0EM001.OP1CMPNB; /* added 08-10-90*/

  if (CL0EW01.OP1CUOID != 0)
    KL0EM001.OP1CUOID = CL0EW01.OP1CUOID;
    KL0EM001.OP1NORID = CL0EW01.OP1NORID;
  end

  set KL0EM001.CLACLMNB initialAttributes;
  KL0EM001.CL0EML1 = "Nike Claim Nbr:";

  set KL0EM001.CLACLMNB cursor; /* cursor to claim number for change*/
                                   /* mode*/
  if (KL0EM001.YITCD == " ")
    CLXREC.CLXYITX = 3;
  else
    if (KL0EM001.YITCD in YITTBL.YITCD) /* if code is in table*/
      CLXREC.CLXYITX = sysVar.arrayIndex;
      if (YITTBL.YITMULTF[sysVar.arrayIndex] == "Y") /* if more than one xref*/
        set KL0EM001.IV0IVCID skip; /* protect invoice*/
        set KL0EM001.YITCD skip; /* and addl flag*/
      end
      if (KL0EM001.YITCD == "I"
       || KL0EM001.YITCD == "N")
        KL0EM001.YITCD = " ";
      end
    end
  end

  if (KL0EM001.IV0IVCID != 0)
    if (CLBREC.CLBSRIND == "Y" /* if product records*/
     || CLBREC.CLBGLIND == "Y" /* or g/l records*/
     || CL0EW01.CL0EWHRA == "Y") /* or there are r.a. records*/
      set KL0EM001.IV0IVCID skip; /* protect invoice*/
      set KL0EM001.YITCD skip; /* and addl flag*/
      set KL0EM001.OP1CUOID skip; /* and order number*/
      set KL0EM001.OP1NORID skip;
    end
  end


  if (VCLHDR02.YCSCD1 in YCSTBL.YCSCD)
    if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "N")
      set KL0EM001.YCSCD skip;
    end
    if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N") /* if cant change claim*/
      KL0E109(); /* protect all fields*/
      if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "N") /* or status*/
        if (CLWREC.TF1CARCD == " ") /* SAVE ORIGINAL ACT CD. PASS TO KL06*/
          CLWREC.TF1CARCD = CLWREC.CLWACTIV;
        end
        CLWREC.CLWACTIV = "I"; /* force to inquiry mode*/
        converseLib.validationFailed(26); /* changed to inquiry mode due to clm*/
                                   /* status*/
      else
        if (KL0EM001.CLACLMNB != 0 /* check for claim brand = cust brand*/
         && KL0EM001.KUCCOID != 0)
          KL0ES9C();
          if (converseVar.validationMsgNum == 638)
            set KL0EM001.YCSCD skip;
            return;
          end
        end

        if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "Y") /* if can change status*/
          converseLib.validationFailed(27); /* only claim status may be changed*/
        end
      end
      if (CLWREC.CLWMNOPT == 7) /* phase (B) enhancement*/
        set KL0EM001.YCSCD bold;
      end

       /* credit users want to be able to change int/ext flag and*/
       /* a/r ref number w/o opening claim*/

      if (KL0EM001.YCSCD == "CAN"
       || KL0EM001.YCSCD == "CMP"
       || KL0EM001.YCSCD == "DEN")
         /* next sentence*/
      else
        if (CLWREC.CLWMNOPT == 5 /* change adjustments*/
         || CLWREC.CLWMNOPT == 6) /* change r/a*/
          if (COMMAREA.CACLVL[3] == "Y" /* must be a credit user*/
           || COMMAREA.CACLVL[7] == "Y") /* or a data entry person*/
            set KL0EM001.XIECD normal; /* credit people can change*/
            set KL0EM001.ARCREFNB normal; /* credit people can change*/
          end
        end
      end

      return;
    else
      if (KL0EM001.CLACLMNB != 0 /* check for claim brand = cust brand*/
       && KL0EM001.KUCCOID != 0)
        KL0ES9C();
        if (converseVar.validationMsgNum == 638)
          KL0E109(); /* protect all fields*/
          set KL0EM001.YCSCD skip;
          return;
        end
      end
    end
    if (YCSTBL.YCSNXTST[sysVar.arrayIndex] == " ") /* if no next status*/
      if (KL0EM001.YCTCD == "RTS" 
       || KL0EM001.YCTCD == "DEF" 
       || KL0EM001.YCTCD == "CDR" 
       || KL0EM001.YCTCD == "OSD" /* added off shore defective 10-28-91*/
       || KL0EM001.YCTCD == "DFO" 
       || KL0EM001.YCTCD == "RFL")
        if (VCLHDR02.CLAWSENF == "N") /* phase (B) enhancement*/
           /* next sentence*/
        else
          set KL0EM001.CLYATHPW skip, invisible; /* can't input auth id*/
        end
      end
    end
  end

  if (VCLHDR02.YCTCD in YCTTBL.YCTCD)
    if (YCTTBL.YCTRQWHS[sysVar.arrayIndex] == "Y")
      /* next sentence*/
    else
      set KL0EM001.XWHCD skip;
    end
  end

  if (CLWREC.CLWMNOPT == 1)
    set KL0EM001.XIECD skip; /* sales office cant change*/
  end

  if (COMMAREA.CACLVL[3] == "Y" /* must be a credit user*/
   || COMMAREA.CACLVL[7] == "Y") /* or a data entry person*/
    /* next sentence....to change the xiecd*/
  else
    set KL0EM001.XIECD skip; /* sales office cant change*/
  end
                                  /* S10 removed f/ IF stmt below10/29*/
  if (VCLHDR02.CLADBOCL == "Y" /* if there is a debit on this claim*/
   || KL0EM001.IV0IVCID == 0)  /* or no invoice number exists*/
    /* OR KL0EM001.YCRCD = 'S10';     /* no more S10 -commented out*/
    /* next sentence                ; then no protection required*/
  else
    set KL0EM001.XOBCD skip; /* otherwise these fields must be*/
    set KL0EM001.XOCCD skip; /* protected*/
    set KL0EM001.SP1ID skip;
    set KL0EM001.XPTCD skip;
  end

  if (VCLHDR02.CLATQTY != 0) /* products have been posted to claim*/
    set KL0EM001.XGPCD skip; /* then can't change gpc code*/
  end

  if (VCLHDR02.YCTCD == "NIL")
    set KL0EM001.CLYATHPW skip;
  end
                          /* phase (B) modification*/
  if (VCLHDR02.YCTCD == "RFL")
    set KL0EM001.YCTCD initialAttributes; /* unprotect in change mode*/
  else
    set KL0EM001.YCTCD skip; /* protect in change mode*/
  end

  if (KL0EM001.IV0IVCID == 0) /* if no invoice number*/
     /* no protection required*/
  else
    if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if invoice is on ibm these*/
      if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and is active*/
        set KL0EM001.OP1CUPO skip; /* fields must be protected*/
        set KL0EM001.OP1CUOID skip;
        set KL0EM001.OP1NORID skip;
        set KL0EM001.XWHCD skip;
        set KL0EM001.XOCCD skip;
        set KL0EM001.XSOCD skip;
        /* IF KL0EM001.YCRCD NE 'S10'; /* rsn-cd cnv10/29/97 NO MORE S10*/
        set KL0EM001.XPTCD skip;
        set KL0EM001.SP1ID skip;
        set KL0EM001.XOBCD skip;
        /* END;                        /* commented 10/29/97 no more S10*/
      else
        converseLib.validationFailed(128); /* invoice/order indicator invalid*/
                                   /* (inactive)*/
      end
    end
  end


  if (KL0EM001.CL0EWAAF == "Y") /* if addl a/r recs exist*/
    set KL0EM001.ARCREFNB skip; /* protect a/r number*/
    set KL0EM001.CL0EWAAF skip; /* and addl flag*/
    set KL0EM001.YASCD skip; /* a/r status code*/
    set KL0EM001.ARCCCREF skip; /* protect cust claim nbr*/
  end


  if (COMMAREA.CACLVL[3] == "Y")
    /* next sentence*/
  else
    set KL0EM001.ARCREFNB skip; /* protect a/r number*/
    set KL0EM001.CL0EWAAF skip; /* and addl flag*/
    set KL0EM001.YASCD skip; /* a/r status code*/
  end



  if (KL0EM001.CL0EWACF == "Y") /* if addl cust claim nbrs exist*/
    set KL0EM001.ARCCCREF skip; /* protect cust claim nbr*/
    set KL0EM001.CL0EWACF skip; /* and addl flag*/
  end


  if (VCLHDR02.CLAWSENF == "Y") /* phase (B) enhancement*/
    /* next sentence*/
  else
    set KL0EM001.CLYATHPW invisible;
  end



  if (COMMAREA.CACLVL[1] == "Y" /* sales change*/
   || COMMAREA.CACLVL[2] == "Y" /* traffic change*/
   || COMMAREA.CACLVL[4] == "Y" /* coop change*/
   || COMMAREA.CACLVL[5] == "Y" /* nil change*/
   || COMMAREA.CACLVL[6] == "Y") /* promo change*/
     /* next sentence*/
  else
    if (COMMAREA.CACLVL[3] == "Y") /* credit change*/
      /* next sentence*/
    else
      if (COMMAREA.CACLVL[3] == "Y" /* credit change*/
       && VCLHDR02.YCTCD == "SCO"   /* for sco claim*/
       && CLWREC.CLWMNOPT == 8)     /* valid only for option 8*/
        /* next sentence*/
      else
        if (KL0EM001.YCTCD == "RTS" /* need to see auth id*/
         || KL0EM001.YCTCD == "DEF" 
         || KL0EM001.YCTCD == "CDR" 
         || KL0EM001.YCTCD == "OSD" /* off shore defectives 10-28-91 added*/
         || KL0EM001.YCTCD == "DFO")
           /* next sentence*/
        else
          set KL0EM001.CLYATHPW skip, invisible;
        end
      end
    end
  end


  CLBREC.CLACLMNB = VCLHDR02.CLACLMNB;
  set SQLCA empty;
  set CL0EW04 empty;
  CL0EW04.CL0EWSQL = "T1"; /* count invc's on claim*/
  call "IO1180" (CL0EW04, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW04.CL0EWIN1 >= 0) /* see if we received valid values*/
    CLBREC.ZZZCHGCT = CL0EW04.CL0EWCN1;
    CL0EW01.CL0EWNOI = CLBREC.ZZZCHGCT; /* nbr of invc's*/
  else
    CLBREC.ZZZCHGCT = 0;
    CL0EW01.CL0EWNOI = 0; /* nbr of invc's*/
  end

  CLIREC.CLICRDFL = "*";
  CLIREC.IV0IVCID = -1;
  CLIREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLIREC.CLHSEQNB = VCLHDR02.CLACSQNB;
  set SQLCA empty;
  set CL0EW05 empty;
  CL0EW05.CL0EWSQL = "SC"; /* count g/l's on claim*/
  call "IO1300" (CL0EW05, SQLCA, CLIREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW05.CL0EWIN1 >= 0) /* see if we received valid values*/
    CLIREC.ZZZCHGCT = CL0EW05.CL0EWCN2;
    CL0EW01.CL0EWNOG = CLIREC.ZZZCHGCT; /* nbr of gls*/
  else
    CLIREC.ZZZCHGCT = 0;
    CL0EW01.CL0EWNOG = 0; /* nbr of gls*/
  end

  CLRREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLRREC.CLHSEQNB = VCLHDR02.CLACSQNB; /* 4-22-88*/
  set SQLCA empty;
  set CL0EW04 empty;
  CL0EW04.CL0EWSQL = "SC"; /* count adj's with qty's > 0 on claim*/
  call "IO1370" (CL0EW04, SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW04.CL0EWIN1 >= 0) /* see if we received valid values*/
    CLRREC.ZZZCHGCT = CL0EW04.CL0EWCN1;
    CL0EW01.CL0EWNOA = CLRREC.ZZZCHGCT; /* nbr of adjustments*/
  else
    CLRREC.ZZZCHGCT = 0;
    CL0EW01.CL0EWNOA = 0; /* nbr of adjustments*/
  end

  if (CLBREC.ZZZCHGCT > 0) /* if already invoices on claim*/
    /* next sentence  ; no, dont protect*/
  else
    if (CLIREC.ZZZCHGCT > 0 /* if there are g/l's*/
     || CLRREC.ZZZCHGCT > 0 
     /* or there are adjustments with > 0 qty*/
     || CL0EW01.CL0EWHRA == "Y") /* have r/a header*/
      set KL0EM001.IV0IVCID skip; /* yes, protect*/
      set KL0EM001.YITCD skip; /* and addl flag*/
      set KL0EM001.OP1CUOID skip; /* yes, protect*/
      set KL0EM001.OP1NORID skip; /* yes, protect*/
    end
  end

  CL0EW03.CL0EWARP = KL0EM001.CL0EWARP;
  CL0EW03.CL-TAKEN-BY-ID = KL0EM001.CL-TAKEN-BY-ID;
  CL0EW03.XSOCD = KL0EM001.XSOCD;
  CL0EW03.XTTDESC = KL0EM001.XTTDESC;
  CL0EW03.XGPCD = KL0EM001.XGPCD;
  CL0EW03.XDVCD = KL0EM001.XDVCD;
  CL0EW03.XBCCD = KL0EM001.XBCCD;
  CL0EW03.OP1COGID = KL0EM001.OP1COGID;
  CL0EW03.OP1CMPNB = KL0EM001.OP1CMPNB;
  CL0EW03.XPTCD = KL0EM001.XPTCD;
  CL0EW03.XOCCD = KL0EM001.XOCCD;
  CL0EW03.SP1ID = KL0EM001.SP1ID;
  CL0EW03.XCECD = KL0EM001.XCECD;
  CL0EW03.XXXUSRID = KL0EM001.XXXUSRID;
  CL0EW03.YCTCD = KL0EM001.YCTCD;
  CL0EW03.YCSCD = KL0EM001.YCSCD;
  CL0EW03.CLYATHPW = KL0EM001.CLYATHPW;
  CL0EW03.YCRCD = KL0EM001.YCRCD;
  CL0EW03.YRC-RT-CSE-CD = KL0EM001.YRC-RT-CSE-CD;
  CL0EW03.XWHCD = KL0EM001.XWHCD;
  CL0EW03.KUCCOID = KL0EM001.KUCCOID;
  CL0EW03.KUMSTRID = KL0EM001.KUMSTRID;
  CL0EW03.XNXCD = KL0EM001.XNXCD;


end // end KL0E103

// set up add-mode screen
Function KL0E104()
   /* ************************************************************/
   /* *   build add screen                                      **/
   /* *   maintenance:                                          **/
   /* *   1. phase (B) enhancement: initialize the work sheet   **/
   /* *      enter flag.  set to  'y' only when option 10 is    **/
   /* *      entering a claim.  otherwise it is 'n'             **/
   /* *   2. initialize invoice number to be zero when adding   **/
   /* *      a claim.  also invoice partition character.        **/
   /* *   3. 12-6-89 chellm set 'Prior Auth>' literal and prev  **/
   /* *              auth name to autoskip dark when building   **/
   /* *              add mode screen.                           **/
   /* *   4. 8-10-90 CHELLM Set OP1CMPNB modified.              **/
   /* *   5. 2-15-91 CHELLM Renamed CLAXOPNF to CLAXCIND.       **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E104"; /* set current process name*/


  set VCLHDR02 empty;


  KL0EM001.CL0EWACF = " ";
  KL0EM001.YITCD = " ";
  KL0EM001.CL0EWAAF = " ";
  VCLHDR02.CLASETDT = CLXREC.XXXCDTE;
  VCLHDR02.CLASTTDT = CLXREC.XXXCDTE;
  VCLHDR02.CLACCLDT = CLXREC.XXXCDTE;
  VCLHDR02.CLACSQNB = 1;
  VCLHDR02.CLACRTNB = 1;
  VCLHDR02.CLACISNB = 1;
  VCLHDR02.IV0IVCID = 0; /* phase (B) enhancement*/
  VCLHDR02.IV0PARTN = "0"; /* phase (B) enhancement*/
  VCLHDR02.YITCD = "N";
  VCLHDR02.CLAMEIND = "N";
  VCLHDR02.CLADBOCL = "N";
  VCLHDR02.CLACMIND = "N";
  VCLHDR02.CLATFIND = "N";
  VCLHDR02.CLACNIND = "N";
  VCLHDR02.CLADJIND = "N";
  VCLHDR02.CLADNLFL = "N";
  VCLHDR02.CLAWSENF = "N"; /* phase (B) enhancement*/
  VCLHDR02.CLARTNFF = "S";
  if (CLWREC.CLWMNOPT == 3) /* if international*/
    VCLHDR02.YCTCD = "NIL";
    KL0EM001.YCTCD = "NIL";
    KL0EM001.XOBCD = "P1";
    VCLHDR02.XOTCD = "30";
    VCLHDR02.XOBCD = "30";
    VCLHDR02.YCRCD = "DEF";
    KL0EM001.YCRCD = "DEF";
    VCLHDR02.XSOCD = "04";
    KL0EM001.XSOCD = "04";
    set KL0EM001.YCTCD skip;
    set KL0EM001.XSOCD skip;
    set KL0EM001.YCRCD skip;
    KL0ES49(); /* expand claim type code*/
    KL0ES50(); /* expand claim reason code*/
    KL0ES-EDIT-YRC-CD(); /* expand root cause code*/
    KL0ES60(); /* expand order type code*/
    KL0ES65(); /* expand rtn auth id*/
    KL0ES83(); /* expand sales office code*/
  end




  set KL0EM001.CL0EML1 skip, invisible;
  set KL0EM001.CL0EML2 skip, invisible;
  set KL0EM001.CL0EML3 skip, invisible;
  set KL0EM001.CL0EML4 skip, invisible;
  set KL0EM001.CL0EML5 skip, invisible;
  set KL0EM001.CL0EML7 skip, invisible;
  set KL0EM001.CL0EML8 skip, invisible;
  set KL0EM001.CL0EML10 skip, invisible; /* (12-6-89)*/
  set KL0EM001.CL0EWPNM skip, invisible; /* (12-6-89)*/
  set KL0EM001.CLACLMNB skip, invisible;
  set KL0EM001.CLAESTVL skip, invisible;
  set KL0EM001.CLATQTY skip, invisible;
  set KL0EM001.YCSCD skip, invisible;
  set KL0EM001.YCSSDESC skip, invisible;
  set KL0EM001.CL0EWSDT skip, invisible;
  set KL0EM001.CLASCGBY skip, invisible;
  set KL0EM001.CL0EWLDT skip, invisible;
  set KL0EM001.CL0EWANM skip, invisible;
  set KL0EM001.XXXSDT skip, invisible;
  set KL0EM001.CLAXCIND skip, invisible;

   /* if option 10, show password field and place cursor there*/
   /* else, don't show password field and place cursor on cust #*/

  if (CLWREC.CLWMNOPT == 10)
    set KL0EM001.CLYATHPW cursor;
    VCLHDR02.CLAWSENF = "Y"; /* phase (B) enhancemnet*/
  else
    set KL0EM001.CL0EML6 skip, invisible;
    set KL0EM001.CLYATHPW skip, invisible;
    set KL0EM001.KUCCOID cursor;
  end


  CLXREC.XXXWDTE = VCLHDR02.CLASTTDT;
  KL0EM001.CL0EWSDT = CLXREC.XXXWDTE;

  CLXREC.XXXWDTE = VCLHDR02.CLASETDT;
  KL0EM001.XXXSDT = CLXREC.XXXWDTE;

  CLXREC.XXXWDTE = VCLHDR02.CLACCLDT;
   /* ---------------------- y2k in begin  ---------------------*/
  if (CLXREC.XXXWDTE != 0)
    CLXREC.XXXFLYY = CLXREC.XXXWYY; /* Format ccyymmdd to mm-dd-yy*/
    CLXREC.XXXSEP5 = "-";
    CLXREC.XXXFLMM = CLXREC.XXXWMM;
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXWDD;
    KL0EM001.CL0EWCDT = CLXREC.XXXFLDT;
  end
   /* ---------------------- y2k in end    ---------------------*/

   /* ---------------------- y2k out begin ---------------------*/
   /* MOVE CLXREC.XXXWYMD TO KL0EM001.CL0EWCDT;*/
   /* KL0ES47;                          /* format cust claim date*/
   /* ---------------------- y2k out end   ---------------------*/


  KL0ES81(); /* get taken-by rep name*/
  VCLHDR02.CL-TAKEN-BY-ID = CL0EW02.CL-TAKEN-BY-ID;

  if (COMMAREA.CAALVL[3] == "Y") /* if credit add*/
    /* next sentence*/
  else
    set KL0EM001.ARCREFNB skip; /* only credit can*/
    set KL0EM001.CL0EWAAF skip; /* update these fields*/
    set KL0EM001.YASCD skip;
  end


  set KL0EM001.XIECD modified; /* phase (B) enhancement*/


  if (CLWREC.CLWMNOPT == 1)
    if (COMMAREA.CAALVL[3] == "Y" /* if credit add*/
     || COMMAREA.CAALVL[4] == "Y" /* or coop add*/
     || COMMAREA.CAALVL[7] == "Y") /* or data entry add*/
      /* next sentence*/
    else
      set KL0EM001.XIECD skip; /* sales office cant change default*/
    end
  end


  KL0EM001.CL0EWCD = "NONE"; /* init comment description*/


  set KL0EM001.KUCCOID modified;
  set KL0EM001.KUMSTRID modified;
  set KL0EM001.OP1CMPNB modified;
  set KL0EM001.XNXCD modified;
  set KL0EM001.XGPCD modified;
  set KL0EM001.XDVCD modified;
  set KL0EM001.XBCCD modified;
  set KL0EM001.YCTCD modified;
  set KL0EM001.YCRCD modified;
  set KL0EM001.YRC-RT-CSE-CD modified;
  set KL0EM001.XWHCD modified;
  set KL0EM001.XPTCD modified;
  set KL0EM001.XOBCD modified;
  set KL0EM001.XOCCD modified;
  set KL0EM001.OP1CUPO modified;
  set KL0EM001.XXXUSRID modified;

end // end KL0E104

// move header info to screen
Function KL0E105()
   /* *************************************************************/
   /* *   move header information to screen                      **/
   /* *                                                          **/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *   1. phase (B) enhancements:                             **/
   /* *      added logic to move proper quantitites to the       **/
   /* *      claim fields                                        **/
   /* *  07-13-90  sgorga  Added code - If acct class code = 21, **/
   /* *                    clm type = 'DAA' or 'ADJ', and G/L =  **/
   /* *                    253, use default agncy/rep 'NATA/600'.**/
   /* *  10-12-90 BCOURT Change XCGCD to OP1COGID.               **/
   /* *                change XCUCD(3) to XCECD, except on CLAREC**/
   /* *  04-16-91  sgorga  Removed the 7-13-90 'DAA'/'ADJ' code. **/
   /* *                    It was decided that in Inquiry the    **/
   /* *                    agency/rep shown on the screen should **/
   /* *                    reflect what is on the claim header.  **/
   /* * 02/18/98 kclar1  added cl-wrof-ind to screen             **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0E105"; /* set current process name*/


  KL0EM001.CLACLMNB = VCLHDR02.CLACLMNB;

   /* *********************************************************/
   /* *   1. phase (B) enhancements:*/
   /* *      added logic to move proper quantitites to the*/
   /* *      claim fields*/
   /* *********************************************************/

  KL0EM001.CLAESTVL = VCLHDR02.CLAESTVL;
  KL0EM001.CLATQTY = VCLHDR02.CLATQTY;

  if (CL0EW01.CL0EWHRA == "Y")
    CLXREC.XXXWDTE = CLJREC.CLJRAXDT;
    KL0EM001.CLJRAXDT = CLXREC.XXXWYMD;
  end

   /* *********************************************************/
   /* *   1. phase (B) enhancements ---  end  --*/
   /* *********************************************************/

  KL0EM001.YCSCD = VCLHDR02.YCSCD1; /* claim status*/
  CL0EW01.YCSCD = VCLHDR02.YCSCD1; /* claim status*/
  KL0EM001.CLASCGBY = VCLHDR02.CLASCGBY;
  KL0EM001.KUCCOID = VCLHDR02.KUCCOID; /* company id*/
  KL0EM001.KUMSTRID = VCLHDR02.KUMSTRID; /* store id*/
  KL0EM001.XNXCD = VCLHDR02.XNXCD; /* dept*/
  KL0EM001.OP1CMPNB = VCLHDR02.OP1CMPNB; /* comp-co id*/
  KL0EM001.OP1COGID = VCLHDR02.OP1COGID; /* cogs code*/

   /* added 01/23/97 - kclar1 - for display only*/
  KL0EM001.CL-WRITE-OFF-IND = VCLHDR02.CL-WRITE-OFF-IND;

  if (VCLHDR02.KUCCOID != 0)
    if (VCLHDR02.KUCCOID == CLWREC.KUCCOID /* move legal entity cd*/
     && CLWREC.XLECD != "  "               
     && CLWREC.XLEABRV != "      ")       
      KL0EM001.XLEABRV = CLWREC.XLEABRV;
    else
      KUCREC.KUCCOID = VCLHDR02.KUCCOID;
      KL0ES70(); /* get company record, update clwrec &*/
                                   /* map*/
      KL0EM001.XLEABRV = CLWREC.XLEABRV;
    end
  end
  KL0EM001.CLACTCNM = VCLHDR02.CLACTCNM;
  KL0EM001.XIECD = VCLHDR02.XIECD;
  KL0EM001.CLAOCAMT = VCLHDR02.CLAOCAMT;
  KL0EM001.XGPCD = VCLHDR02.XGPCD; /* GPC CODE*/
  KL0EM001.YCTCD = VCLHDR02.YCTCD; /* CLAIM TYPE*/
  KL0EM001.XDVCD = VCLHDR02.XDVCD; /* DIVISION CODE*/
  KL0EM001.XBCCD = VCLHDR02.XBCCD; /* BRAND CODE*/
  KL0EM001.OP1CMPNB = VCLHDR02.OP1CMPNB; /* COMP CO ID*/
  if (VCLHDR02.XBCCD in XBCTBL.XBCCD)
    KL0EM001.XBCABRV = XBCTBL.XBCABRV;
  else
    KL0EM001.XBCABRV = "NOTFND";
  end

  KL0EM001.YCRCD = VCLHDR02.YCRCD;
  KL0EM001.YRC-RT-CSE-CD = VCLHDR02.YRC-RT-CSE-CD;
  KL0EM001.OP1CUPO = VCLHDR02.OP1CUPO;
  KL0EM001.XWHCD = VCLHDR02.XWHCD;
  KL0EM001.XPTCD = VCLHDR02.XPTCD;
  KL0EM001.SP1ID = VCLHDR02.SP1ID;
  KL0EM001.XOBCD = VCLHDR02.XOBCD;
  KL0EM001.XOCCD = VCLHDR02.XOCCD;
  KL0EM001.XSOCD = VCLHDR02.XSOCD;
  KL0EM001.XCECD = VCLHDR02.XCECD;
  KL0EM001.CL-TAKEN-BY-ID = VCLHDR02.CL-TAKEN-BY-ID;

            /* * Show Agency/Rep on Map in Inquiry Mode **/
   /* This process is executed BEFORE the converse of the map,*/
   /* when first entering the CL0E application.*/
   /* The agency/rep that appears on the CL0EM001 screen is*/
   /* taken from the claim header, CLAREC.*/

  CL0EW01.CL0EWAGY = VCLHDR02.SM1AGYID; /* move agency from clarec*/
  CL0EW01.CL0EWREP = VCLHDR02.SM4REPID; /* move rep from clarec*/
  CL0EW01.CL0EWF1 = "/";
  KL0EM001.CL0EWARP = CL0EW01.CL0EWARP; /* move agency/rep to map*/
                /* * End Agency/Rep **/

  CLXREC.XXXWDTE = VCLHDR02.CLASTTDT;
  KL0EM001.CL0EWSDT = CLXREC.XXXWYMD;

  CLXREC.XXXWDTE = VCLHDR02.CLASETDT;
  KL0EM001.XXXSDT = CLXREC.XXXWYMD;

  if (VCLHDR02.CLADNLDT > 0)
    CLXREC.XXXWDTE = VCLHDR02.CLADNLDT;
    /* ---------------------- y2k in begin  ---------------------*/
    CLXREC.XXXFLYY = CLXREC.XXXWYY; /* Format ccyymmdd to*/
    CLXREC.XXXSEP5 = "-"; /* mm-dd-yy*/
    CLXREC.XXXFLMM = CLXREC.XXXWMM;
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXWDD;
    KL0EM001.CL0EWLDT = CLXREC.XXXFLDT;
    /* ---------------------- y2k in end    ---------------------*/
  end

  if (VCLHDR02.CLACCLDT > 0)
    CLXREC.XXXWDTE = VCLHDR02.CLACCLDT;
    /* ---------------------- y2k in begin  ---------------------*/
    CLXREC.XXXFLYY = CLXREC.XXXWYY; /* Format ccyymmdd to*/
    CLXREC.XXXSEP5 = "-"; /* mm-dd-yy*/
    CLXREC.XXXFLMM = CLXREC.XXXWMM;
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXWDD;
    KL0EM001.CL0EWCDT = CLXREC.XXXFLDT;
    /* ---------------------- y2k in end    ---------------------*/
  end

   /* ---------------------- y2k out begin ---------------------*/
   /* MOVE CLXREC.XXXWYMD TO KL0EM001.CL0EWLDT;*/
   /* MOVE CLXREC.XXXWYMD TO KL0EM001.CL0EWCDT;*/
   /* ---------------------- y2k out end   ---------------------*/

end // end KL0E105

// edit fields to expand codes
Function KL0E106()
   /* ************************************************************/
   /* *   edit screen fields to expand codes                    **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *     phase (B) enhancement: checking the work sheet      **/
   /* *     entered flag to get user name                       **/
   /* *  12-06-89  chellm Added new PROC CL0E117 to format      **/
   /* *              both the Auth By Name and Prev Auth Name.  **/
   /* *  6-14-90 bcourt improve description when agency/rep name**/
   /* *     is missing.                                         **/
   /* *  11-30-90  sgorga  'Not Found' was incorrectly moved to **/
   /* *              cl0em001.clatbynm. Chgd to cl0ew01.xxxusrid**/
   /* *  08-23-91  chellm  added CL0ES-GET-PHN-NBR              **/
   /* *  01-13-92  sgorga  Setting ta1rec empty just before     **/
   /* *       xsivsn1 is called, which calls xsivsn2, which     **/
   /* *       uses ta1rec.                                      **/
   /* *  04-17-92  bcourt  Rename SM5STAT to XXXSTAT.           **/
   /* *  06-12-92  twatso  clatbyid became the commarea.userid  **/
   /* *  10-09-97  chellm  added yrc-rt-cse-cd                  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E106"; /* set current process name*/


  if (KL0EM001.YCSCD in YCSTBL.YCSCD)
    KL0EM001.YCSSDESC = YCSTBL.YCSSDESC[sysVar.arrayIndex];
    CLXREC.CLXYCSX = sysVar.arrayIndex;
  else
    converseLib.validationFailed(71);
    CLXREC.CLXERRF = "Y";
    KL0EM001.YCSSDESC = "NOT FOUND";
  end

  if (KL0EM001.YCTCD in YCTTBL.YCTCD)
    KL0EM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
    CLXREC.CLXYCTX = sysVar.arrayIndex;
  else
    converseLib.validationFailed(87);
    CLXREC.CLXERRF = "Y";
    KL0EM001.YCTABRV = "NOTFND";
  end


   /* ************************************************************/
   /* *      get the division code abbreviation                 **/
   /* ************************************************************/

  if (KL0EM001.XDVCD in XDVTBL.XDVCD)
    KL0EM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(580);
    CLXREC.CLXERRF = "Y";
    KL0EM001.XDVABRV = "NOTFND";
  end

   /* ************************************************************/
   /* *      get the brand code abbreviation                    **/
   /* ************************************************************/

  if (KL0EM001.XBCCD in XBCTBL.XBCCD)
    KL0EM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    if (KL0EM001.XBCCD == "  ")
      KL0EM001.XBCABRV = "N/A   ";
    else
      converseLib.validationFailed(615);
      CLXREC.CLXERRF = "Y";
      KL0EM001.XBCABRV = "NOTFND";
    end
  end


  if (KL0EM001.YCRCD in YCRTBL.YCRCD)
    KL0EM001.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
    CL0EW02.YCRCD = KL0EM001.YCRCD;
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  else
    converseLib.validationFailed(88);
    CLXREC.CLXERRF = "Y";
    KL0EM001.YCRSDESC = "NOT FOUND";
  end

  if (CLXREC.CLXERRF == "Y")
    return;
  end

   /* edit root cause code*/
  KL0ES-EDIT-YRC-CD();
  KL0ES66(); /* edit exception flag*/

  KL0ES63(); /* find if addl ar/cust clm recs exist*/

  KL0ES64(); /* edit a/r status code*/

  KL0ES65(); /* expand rtn auth code*/

   /* get cust phone number*/
  KL0ES-GET-PHN-NBR();

   /* ************************************************************/
   /* *      get the order class abbreviation                    **/
   /* ************************************************************/

  if (KL0EM001.XOCCD != " ")
    if (KL0EM001.XOCCD in XOCTBL.XOCCD) /* if ord class code in table*/
      KL0EM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
      CL0EW02.XOCCD = KL0EM001.XOCCD;
    else
      converseLib.validationFailed(97); /* invalid order class code*/
      KL0EM001.XOCABRV = "NOT FOUND";
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    end
  else
    KL0EM001.XOCCD = " ";
    CL0EW02.XOCCD = " ";
    KL0EM001.XOCABRV = " ";
  end

   /* ************************************************************/
   /* *      get the base order type abbreviation                    **/
   /* ************************************************************/

  if (KL0EM001.XOBCD != " ")
    if (KL0EM001.XOBCD in XOBTBL.XOBCD)
                                   /* if order type code is in table*/
      KL0EM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
      CL0EW02.XOBCD = KL0EM001.XOBCD;
    else
      converseLib.validationFailed(96); /* invalid order type*/
      KL0EM001.XOBABRV = "NOT FOUND";
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    end
  else
    KL0EM001.XOBCD = " ";
    KL0EM001.XOBABRV = " ";
    CL0EW02.XOTCD = " ";
    CL0EW02.XOBCD = " ";
  end


   /* ************************************************************/
   /* *      get the sales program abbreviation                 **/
   /* ************************************************************/


  if (KL0EM001.SP1ID != " ")
    SP1REC.SP1ID = KL0EM001.SP1ID;
    set SQLCA empty;
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
                                   /* get sales program record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0EM001.SP1ABRV = SP1REC.SP1ABRV;
      CL0EW02.SP1ID = KL0EM001.SP1ID;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(95); /* invalid sales program*/
        KL0EM001.SP1ABRV = "NOT FOUND";
        CLXREC.CLXERRF = "Y"; /* yes, there is an err*/
      else
        TA1REC.TA1TBLKE = "GETTING SALES PROGRAM ABRV";
        TA1REC.TA1DBASE = "DSPGM";
        TA1REC.TA1TBLVU = "VSPGM001";
        TA1REC.TA1LOCAT[2] = "CL0E106";
        TA1REC.TA1LOCAT[4] = KL0EM001.SP1ID;
        XPCL010(); /* abend*/
      end
    end
  else
    KL0EM001.SP1ABRV = " ";
    KL0EM001.SP1ID = " ";
    CL0EW02.SP1ID = " ";
  end

   /* ************************************************************/
   /* *      get the terms code                                **/
   /* ************************************************************/

  if (KL0EM001.XPTCD != " ") /* if terms were entered*/
    if (KL0EM001.XPTCD in XPTTBL.XPTCD) /* if terms code is in table*/
      KL0EM001.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      CL0EW02.XPTCD = KL0EM001.XPTCD;
    else
      KL0EM001.XPTABRV = "??????";
    end
  end

   /* ************************************************************/
   /* *      get the ship warehouse abbreviation               **/
   /* ************************************************************/

  if (KL0EM001.XWHCD != " ") /* if warehouse is entered*/
    if (KL0EM001.XWHCD in XWHTBL.XWHCD) /* if warehouse is valid*/
      KL0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      CL0EW02.XWHCD = KL0EM001.XWHCD;
    else
      converseLib.validationFailed(400); /* invalid warehouse code*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      KL0EM001.SP1ABRV = "NOT FOUND";
    end
  else
    KL0EM001.XWHCD = " ";
    KL0EM001.XWHABRV = " ";
    CL0EW02.XWHCD = " ";
  end


   /* ************************************************************/
   /* find if addl ivc nbrs exist*/
  KL0ES55();
   /* ************************************************************/

  KL0EM001.XGPCD = VCLHDR02.XGPCD;
  if (KL0EM001.XGPCD in XGPTBL.XGPCD) /* if a valid product class*/
    KL0EM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    CL0EW02.XGPCD = KL0EM001.XGPCD;
  else
    KL0EM001.XGPABRV = "UNKNOWN";
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
  end


  KL0ES47(); /* edit cust claim date*/

  KL0ES43(); /* edit customer number*/


  if (VCLHDR02.CLAWSENF == "Y") /* phase (B) enhancement*/
     /* next sentence*/
  else
    if (VCLHDR02.CLYATHID == 0)
      KL0EM001.CL0EWANM = " "; /* no auth-by name*/
      if (VCLHDR02.CLAPRATH != 0) /* begin (12-6-89) changes*/
        set KL0EM001.CL0EML10 initialAttributes;
        set KL0EM001.CL0EWPNM initialAttributes;
        set CLYREC empty;
        CLYREC.CLYATHID = VCLHDR02.CLAPRATH;

        KL0E117(); /* format name from prior auth ID*/

        KL0EM001.CL0EWPNM = IVZREC.IVZFNAME;

      else
        set KL0EM001.CL0EML10 skip, invisible;
        set KL0EM001.CL0EWPNM skip, invisible;
      end
    else
      set KL0EM001.CL0EML10 skip, invisible;
      set KL0EM001.CL0EWPNM skip, invisible;
      KL0EM001.CL0EWPNM = " "; /* no prior auth-by name*/
      set CLYREC empty;
      CLYREC.CLYATHID = VCLHDR02.CLYATHID;

      KL0E117(); /* format name from auth by ID*/

      KL0EM001.CL0EWANM = IVZREC.IVZFNAME;

    end
  end


  if (VCLHDR02.CLACMIND == "N" /* no comments exist*/
   || VCLHDR02.CLACMIND == " ") /* no comments exist*/
    KL0EM001.CL0EWCD = "NONE";
  else /* find out which ones exist*/

    KL0EM001.CL0EWCD = " ";
    CLXREC.CLXLINEX = 1; /* index for comment field on screen*/

    CLGREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    CLGREC.CLGCMTYP = "C"; /* look for claim comments*/
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWCDX[CLXLINEX] = " C";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    CLGREC.CLGCMTYP = "M"; /* look for memo comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWCDX[CLXLINEX] = " M";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    CLGREC.CLGCMTYP = "R"; /* look for R/A comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWCDX[CLXLINEX] = " R";
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    CLGREC.CLGCMTYP = "D"; /* look for defective comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWCDX[CLXLINEX] = " I";
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    CLGREC.CLGCMTYP = "I"; /* look for inspection comments*/
    CLGREC.CLHSEQNB = -1;
    CLGREC.CL2ISNBR = -1;
    call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWCDX[CLXLINEX] = " I";
    end
    call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    if (CLXREC.CLXLINEX == 1) /* only have comment for g/l's*/
      KL0EM001.CL0EWCD = "NONE";
    end

    KL0EM001.CL0EWCD = CL0EW01.CL0EWCD;
  end

   /* ************************************************************/
                    /* get credit analyst name*/
  KL0ES84();

   /* ************************************************************/

   /* ************************************************************/
   /* *      get the sales agency/sales rep information         **/
   /* ************************************************************/

  set SM4REC empty;
  set SM5REC empty;
  SM5REC.SM1AGYID = VCLHDR02.SM1AGYID;
  SM5REC.SM4REPID = VCLHDR02.SM4REPID;
  SM4REC.SM4REPID = VCLHDR02.SM4REPID;
  SM5REC.XXXSTAT = "*"; /* 4-17-92*/
  SM5REC.SM5EDT = -1;

  set TA1REC empty; /* for use in xsivsn2, which is called*/
                                   /* in -sn1*/
  XSIVSN4(); /* get and format salesman name*/

  KL0EM001.CL0EWRNM = IVZREC.IVZFNAME;

  if (KL0EM001.CL0EWRNM == "******* REP/AGENCY N") /* 6-14-90 new*/
    KL0EM001.CL0EWRNM = "* NAME MISSING *";
  end

   /* ************************************************************/
   /* get taken-by rep name*/
   /* 06-12-92 twatso changed code to use commarea userid to go to*/
   /* the kuyrec with name not a number (changed iomod use to 'sa' from 's'*/
   /* 07-15-92 added message if sqlca = 100*/
   /* ************************************************************/

  set KUYREC empty;
  set SQLCA empty;
  KUYREC.XXXUSRID = KL0EM001.CL-TAKEN-BY-ID; /* chg 06-08-92*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* cust service rep record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    KL0EM001.CLATBYNM = KUYREC.KUYREPNM;
    CL0EW02.CL-TAKEN-BY-ID = KUYREC.XXXUSRID; /* chg 06-08-92*/
    if (VCLHDR02.CLAORIGI == "T") /* if claim originated on kl0t*/
      KL0EM001.CLATBYNM = "FOR C & R DEPT";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0EM001.CLATBYNM = " ";
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      if (VCLHDR02.CLAORIGI == "T") /* if claim originated on kl0t*/
        KL0EM001.CLATBYNM = "FOR C & R DEPT";
      end
    else
      TA1REC.TA1TBLKE = "GETTING TAKEN-BY REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "KL0ES106";
      XPCL010();
    end
  end

   /* ************************************************************/
          /* get coop-analyst code*/
   /* ************************************************************/

  KL0ES86();
  set KUYREC empty;

  KUYREC.KUYSVRID = VCLHDR02.KUYSVRID;

  set SQLCA empty;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* cust service rep record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    CL0EW01.KUYREPNM = KUYREC.KUYREPNM;
    CL0EW01.XXXUSRID = KUYREC.XXXUSRID;
    CL0EW02.KUYSVRID = KUYREC.KUYSVRID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0EW01.KUYREPNM = "NOT FOUND"; /* 11-30-90 slg*/
      CL0EW01.CL0EWUSR = KUYREC.KUYSVRID; /* show sv rep# not found! slg*/
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1TBLKE = "GETTING CUST SVC REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "CL0ES106";
      XPCL010(); /* abend*/
    end
  end

   /* ************************************************************/
          /* set up screen cust svc/coop analyst*/
  KL0ES80();

  KL0EM001.XSOCD = VCLHDR02.XSOCD;

  if (KL0EM001.XSOCD in XSOTBL.XSOCD)
    KL0EM001.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
    CL0EW02.XSOCD = XSOTBL.XSOCD[sysVar.arrayIndex];
  else
    KL0EM001.XSOABRV = "NOT FOUND";
  end

   /* ************************************************************/
   /* get territory name*/
  KL0ES85();

   /* ************************************************************/
   /* edit cr denial letter date*/
  KL0ES41();

end // end KL0E106

// define top portion of screen
Function KL0E107()
   /* ************************************************************/
   /* *   set 1st four lines of screen defined so that they     **/
   /* *      will display.                                      **/
   /* *   maintenance:                                          **/
   /* *   1. phase (B) enhancements                             **/
   /* *      to display proper title depending upon the claim   **/
   /* *      having returns or not                              **/
   /* *                                                         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *    DATE    PGMR    DESCRIPTION                          **/
   /* *---------------------------------------------------------**/
   /* *  02-15-91  CHELLM  Renamed CLAXOPNF to CLAXCIND.        **/
   /* *  10-21-93  GDECKE  Fix bad ref. to stat-cd2:alias=ycscd.**/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E107"; /* set current process name*/



  set KL0EM001.CL0EML1 initialAttributes;
  set KL0EM001.CL0EML2 initialAttributes;
  set KL0EM001.CL0EML3 initialAttributes;

   /* ************************************************************/
   /* *   1. phase (B) enhancements                             **/
   /* *      to display proper title depending upon the claim   **/
   /* *      having returns or not                              **/
   /* ************************************************************/

  KL0EM001.CL0EML2 = "Clm Value";
  KL0EM001.CL0EML3 = "TTL Qty";

  if (CLWREC.CLWMNOPT == 2
   || CLWREC.CLWMNOPT == 6)
    if (VCLHDR02.YCSCD1 != "CMP")
      KL0EM001.CL0EML2 = "Auth Value";
      KL0EM001.CL0EML3 = "Auth Qty";
    end
  end

  set KL0EM001.CL0EML4 initialAttributes;
  set KL0EM001.CL0EML5 initialAttributes;
  set KL0EM001.CL0EML6 initialAttributes;
  set KL0EM001.CL0EML7 initialAttributes;


  if (VCLHDR02.CLAXCIND == "Y") /* phase (B) enhancement*/
    set KL0EM001.CL0EML8 initialAttributes;
  else
    set KL0EM001.CL0EML8 skip, invisible;
  end


  set KL0EM001.CLACLMNB initialAttributes;
  set KL0EM001.CLAESTVL initialAttributes;
  set KL0EM001.CLATQTY initialAttributes;
  set KL0EM001.YCSCD initialAttributes;
  set KL0EM001.XDVCD initialAttributes;
  set KL0EM001.XBCCD initialAttributes;
  set KL0EM001.YCSSDESC initialAttributes;
  set KL0EM001.CL0EWSDT initialAttributes;
  set KL0EM001.CLASCGBY initialAttributes;
  set KL0EM001.CL0EWLDT initialAttributes;
   /* SET CL0EM001.CLYATHPW DEFINED;*/
  set KL0EM001.CL0EWANM initialAttributes;
  set KL0EM001.XXXSDT initialAttributes;
  set KL0EM001.CLAXCIND initialAttributes;






end // end KL0E107

// protect all screen fields
Function KL0E109()
   /* ************************************************************/
   /* *   protect all screen fields except claim number         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *    DATE   PGMR   DESCRIPTION                            **/
   /* *---------------------------------------------------------**/
   /* *  08/10/90 chellm added OP1CMPNB to the fields protected.**/
   /* *  10-28-91 twatso added code for osd for installation in **/
   /* *                  Dec. 91                                **/
   /* *  10-22-93 GDECKE  REMOVE OVERLAPPING MOVE STMT.         **/
   /* *                                                         **/
   /* ************************************************************/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E109"; /* set current process name*/


  set KL0EM001.CL0EWLDT skip;
  set KL0EM001.KUCCOID skip;
  set KL0EM001.KUMSTRID skip;
  set KL0EM001.OP1CMPNB skip; /* 08-10-90 added*/
  set KL0EM001.XNXCD skip;
  set KL0EM001.CLACTCNM skip;
  set KL0EM001.XIECD skip;
  set KL0EM001.CLAOCAMT skip;
  set KL0EM001.CL0EWCDT skip;
  set KL0EM001.XGPCD skip;
  set KL0EM001.XDVCD skip;
  set KL0EM001.XBCCD skip;
  set KL0EM001.YCTCD skip;
  set KL0EM001.YCRCD skip;
  set KL0EM001.YRC-RT-CSE-CD skip;
  set KL0EM001.ARCCCREF skip;
  set KL0EM001.CL0EWACF skip;
  set KL0EM001.OP1CUPO skip;
  set KL0EM001.IV0IVCID skip;
  set KL0EM001.YITCD skip;
  set KL0EM001.XWHCD skip;
  set KL0EM001.OP1CUOID skip;
  set KL0EM001.OP1NORID skip;
  set KL0EM001.XPTCD skip;
  set KL0EM001.SP1ID skip;
  set KL0EM001.XOBCD skip;
  set KL0EM001.XOCCD skip;
  set KL0EM001.ARCREFNB skip;
  set KL0EM001.CL0EWAAF skip;
  set KL0EM001.YASCD skip;
  set KL0EM001.XXXUSRID skip;


  if (KL0EM001.YCTCD == "RTS"
   || KL0EM001.YCTCD == "DEF"
   || KL0EM001.YCTCD == "CDR"
   || KL0EM001.YCTCD == "OSD"
   || KL0EM001.YCTCD == "DFO"
   || KL0EM001.YCTCD == "RFL")
    set KL0EM001.CLYATHPW skip;
  else
    set KL0EM001.CLYATHPW skip, invisible;
  end

end // end KL0E109

// handle screen m001 spec entrys
Function KL0E110()
   /* ************************************************************/
   /* *   process enter key and pfkeys to transfer              **/
   /* *  maintenaNCE                                            **/
   /* *  -----------                                            **/
   /* *  1. checking the work sheet entered flag to make sure   **/
   /* *     the options are properly set                        **/
   /* *                                                         **/
   /* 11/07/97 - KCLAR1 - CHANGED IOMOD TO VCLHDR02**/
   /* 06-11-98 - GDECKE - USE PF7 TO TRANSFER BACK TO EK0E      **/
   /* 04-12-99 - GDECKE - USE PF19 TO TRANSFER TO KL08.         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E110"; /* set current process name*/


  if (converseVar.eventKey is enter)
    if (KL0EM001.CATOAP == " " /* if no fast-path requested*/
     && KL0EM001.CAITEM == " ") /* and item is blank*/
      if (KL0EM001.CLACLMNB is modified)
        VCLHDR02.CLACLMNB = KL0EM001.CLACLMNB;
        set SQLCA empty;
        call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes}; /* get claim*/
        if (SQLCA.VAGen_SQLCODE == 0)
          CL0EW01.CLWMNOPT = CLWREC.CLWMNOPT;
          CL0EW01.YCTCD = VCLHDR02.YCTCD;
          if (CL0EW01.YMOKEY in YMOTBL.YMOKEY)
            COMMAREA.CATOAP = "KL0E";
            KL0E-INIT-CLAREC();
            XPCL002();
          else
            if (CLWREC.CLWMNOPT == 5)
              if (VCLHDR02.YCTCD == "ADJ"
               || VCLHDR02.YCTCD == "DAA"
               || VCLHDR02.YCTCD == "NBC")
                if (CACLVL[1] == "Y"
                 || CACLVL[2] == "Y"
                 || CACLVL[3] == "Y"
                 || CACLVL[4] == "Y"
                 || CACLVL[6] == "Y")
                  CLWREC.CLWACTIV = "C";
                else
                  CLWREC.CLWACTIV = "I";
                end
                COMMAREA.CATOAP = "KL0E";
                KL0E-INIT-CLAREC();
                XPCL002();
              end
              CLWREC.CLWACTIV = "I";
              COMMAREA.CATOAP = "KL0E";
              KL0E-INIT-CLAREC();
              XPCL002();
            else
              set KL0EM001 initial;
              KL0E109(); /* protect screen fields*/
              KL0EM001.CLACLMNB = VCLHDR02.CLACLMNB;
              converseLib.validationFailed(114); /* clm typ not valid for menu opt*/
              set KL0EM001.CLACLMNB cursor, modified, bold;
              CLXREC.CLXERRF = "Y";
              return;
            end
          end
        else
          set KL0EM001 initial;
          KL0EM001.CLACLMNB = VCLHDR02.CLACLMNB;
          converseLib.validationFailed(5); /* invalid claim number*/
          set KL0EM001.CLACLMNB cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
        end
        return;
      end
    else
      if (KL0EM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0EM001.CATOAP;
        COMMAREA.CAITEM = KL0EM001.CAITEM;
        KL0E-INIT-CLAREC();
        XPCL002();
        CLXREC.CLXERRF = "Y";
        return;
      else
        if (KL0EM001.CATOAP == " "
         && KL0EM001.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0EM001.CAITEM cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    return;
  end




  if (converseVar.eventKey is pf1)
    KL0ES01(); /* exit to help application*/
    return;
  end


  if (converseVar.eventKey is pf3) /* exit to claims menu*/
    KL0ES03();
    return;
  end


  if (converseVar.eventKey is pf4) /* exit to nike master menu*/
    KL0ES04();
    return;
  end


  if (converseVar.eventKey is pf5) /* exit to inquiry selection*/
    KL0ES05();
    return;
  end


  if (converseVar.eventKey is pf21) /* new claim*/
    if (CLWREC.CLWACTIV == "A")
       /* next sentence*/
    else
      if (VCLHDR02.YCTCD in YCTTBL.YCTCD)
        if (VCLHDR02.CLAWSENF == "N")
            /* next sentence*/
        else
          CLWREC.CLWMNOPT = YCTTBL.YCTMNOPT[sysVar.arrayIndex];
        end
      end
    end
    CLWREC.CLWACTIV = "A";
    set VCLHDR02 empty;
    set CLAREC empty;
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end



  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20
   || converseVar.eventKey is pf24)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa keys cause loss of data*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      return;
    else
      converseLib.validationFailed(2); /* invalid pf key*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      return;
    end
  end


  if (converseVar.eventKey is pf12) /* if requesting edit/expansion*/
    if (CLWREC.CLWACTIV == "I") /* and in inquiry mode*/
      converseLib.validationFailed(23); /* pf12 not valid in inquiry mode*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


  if (converseVar.eventKey is pf15)
    if (KL0EM001.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTADJF[sysVar.arrayIndex] == "Y"
       || YCTTBL.YCTRTSF[sysVar.arrayIndex] == "Y"
       || YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y"
       || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(107); /* pf15 not valid for clm type*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end


end // end KL0E110

// set up 'enter' flow
Function KL0E111()
   /* ************************************************************/
   /* *     this process handles the control of flow to the     **/
   /* *        next application when the enter key is pressed.  **/
   /* *                                                         **/
   /* * maintenance                                             **/
   /* * -----------                                             **/
   /* * 1. phase (B) enhancement: allow the entrance to cl0s    **/
   /* * 2. 02-15-91 CHELLM Renamed CLAXOPNF to CLAXCIND.        **/
   /* * 3. 08-09-91 wjohns renamed application names for        **/
   /* *              transfers.                                 **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E111"; /* set current process name*/


  if (CL0EW01.CL0EWSIA == "Y") /* if supposed to stay in this application*/
    COMMAREA.CATOAP = "KL0E";
    return;
  end

   /* phase (B) enhancement: to allow for the flow to the*/
   /* exceptions application*/

  if (KL0EM001.CLAXCIND == "Y")
    COMMAREA.CATOAP = "KL0S"; /* go to the exceptions application*/
    return;
  end

  if (KL0EM001.CL0EWAAF == "Y")
    CLWREC.CLWADLAR = "Y";
  else
    CLWREC.CLWADLAR = "N";
  end

   /* ******************************************************/
   /* * phase (B) enhancements*/
   /* * 1. exceptions processing*/
   /* * 2. 'rfl' claim type processing*/
   /* ******************************************************/

  if (KL0EM001.YCTCD == "RFL")
    COMMAREA.CATOAP = "KL0I"; /* go to the traffic application*/
    return;
  end


   /* *****************************************/
   /* *  PHASE (B) ENHANCEMENTS ---   END  ---*/
   /* *****************************************/


  if (KL0EM001.YITCD == "Y" /* addl ibm invoices*/
   || KL0EM001.YITCD == "A" /* addl dec invoices*/
   || KL0EM001.YITCD == "M" /* addl old ibm invoices*/
   || KL0EM001.CL0EWACF == "Y") /* addl cust claim nbrs*/
     /* OR CL0EM001.CL0EWAAF = 'Y'    ; addl cust claim nbrs*/
    COMMAREA.CATOAP = "KL0N";
    return;
  end


  XSCLSFL(); /* set next application*/


end // end KL0E111

// test if fields modified
Function KL0E112()
   /* ************************************************************/
   /* *    test if fields are modified to set edit flag         **/
   /* *                                                         **/
   /* * 08-10-90 CHELLM Added check of OP1CMPNB.                **/
   /* * 04-16-91 sgorga Added code to force going to cl0e120    **/
   /* *          (by moving 'y' to edit flag)  if clm type =    **/
   /* *          DAA or ADJ, and acct cls = 21.  This, along    **/
   /* *          with new code in cl0e129, will force cl0es82   **/
   /* *          to be performed just in case G/L 253 has been  **/
   /* *          added or deleted (in cl0j appl) to the claim   **/
   /* *          after the last update of the claim header      **/
   /* *          (which could mean that incorrect agency/rep    **/
   /* *          was showing on the claim header).  CL0ES82     **/
   /* *          will get the correct agency/rep.               **/
   /* * 08-23-91 CHELLM Added check of Cust Phone Nbr fields    **/
   /* *                 CL0EM-PHONE-AREA-CODE                   **/
   /* *                 CL0EM-PHONE-PREFIX                      **/
   /* *                 CL0EM-PHONE-SUFFIX                      **/
   /* * 08-23-91 CHELLM Added check of Cust Phone Nbr fields    **/
   /* * 10-09-97 CHELLM Added yrc-rt-cse-cd root cause code     **/
   /* * 06-11-98 GDECKE USE PF7 TO TRANSFER TO EK0E             **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E112"; /* set current process name*/


  CL0EW01.CL0EWSMF = "N"; /* init screen-modified-flag*/
  CLXREC.CLXEDITF = "N"; /* init do-edits-flag*/


  if (KL0EM001.YCSCD is modified    
   || KL0EM001.CL0EWLDT is modified 
   || KL0EM001.CLYATHPW is modified 
   || KL0EM001.KUCCOID is modified  
   || KL0EM001.KUMSTRID is modified 
   || KL0EM001.OP1CMPNB is modified /* added 08-10-90*/
   || KL0EM001.OP1COGID is modified /* added 09-18-97*/
   || KL0EM001.XNXCD is modified    
   || KL0EM001.CLACTCNM is modified 
   || KL0EM001.CL0EM-PHONE-AREA-CODE is modified
   || KL0EM001.CL0EM-PHONE-PREFIX is modified
   || KL0EM001.CL0EM-PHONE-SUFFIX is modified
   || KL0EM001.XIECD is modified    /* ;*/
   || KL0EM001.CLAOCAMT is modified 
   || KL0EM001.CL0EWCDT is modified 
   || KL0EM001.XGPCD is modified    
   || KL0EM001.XDVCD is modified    
   || KL0EM001.XBCCD is modified    
   || KL0EM001.YCTCD is modified    
   || KL0EM001.YCRCD is modified    
   || KL0EM001.YRC-RT-CSE-CD is modified
   || KL0EM001.ARCCCREF is modified 
   || KL0EM001.CL0EWACF is modified 
   || KL0EM001.OP1CUPO is modified  
   || KL0EM001.IV0IVCID is modified 
   || KL0EM001.YITCD is modified    
   || KL0EM001.XWHCD is modified    
   || KL0EM001.OP1CUOID is modified 
   || KL0EM001.OP1NORID is modified 
   || KL0EM001.XPTCD is modified    
   || KL0EM001.SP1ID is modified    
   || KL0EM001.XOBCD is modified    
   || KL0EM001.XOCCD is modified    
   || KL0EM001.ARCREFNB is modified 
   || KL0EM001.CL0EWAAF is modified 
   || KL0EM001.XXXUSRID is modified)
    CL0EW01.CL0EWSMF = "Y"; /* screen modified flag to 'yes'*/
  end


  if (CL0EW01.CL0EWSMF == "Y") /* if screen was modified*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf2
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf9
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf16
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf18
     || converseVar.eventKey is pf19
     || converseVar.eventKey is pf20
     || converseVar.eventKey is pf21
     || converseVar.eventKey is pf24)
      CLXREC.CLXEDITF = "Y";
    end
  else /* 4-16-91  sgorga  below is new code -*/
                                   /* see comments*/
    if (KUCREC.XAUCD == "21" /* if this is a strategic acct*/
     && VCLHDR02.YCTCD == "DAA") /* and clm type is dealer advertising*/
      if (converseVar.eventKey is enter
       || converseVar.eventKey is pf2
       || converseVar.eventKey is pf6
       || converseVar.eventKey is pf7
       || converseVar.eventKey is pf9
       || converseVar.eventKey is pf10
       || converseVar.eventKey is pf12
       || converseVar.eventKey is pf13
       || converseVar.eventKey is pf14
       || converseVar.eventKey is pf15
       || converseVar.eventKey is pf16
       || converseVar.eventKey is pf17
       || converseVar.eventKey is pf18
       || converseVar.eventKey is pf19
       || converseVar.eventKey is pf20
       || converseVar.eventKey is pf21
       || converseVar.eventKey is pf24)
        CLXREC.CLXEDITF = "Y";
      end
    else
      if (KUCREC.XAUCD == "21" /* if this is a strategic account*/
       && VCLHDR02.YCTCD == "ADJ") /* and clm type is adjustment*/
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf2
         || converseVar.eventKey is pf6
         || converseVar.eventKey is pf7
         || converseVar.eventKey is pf9
         || converseVar.eventKey is pf10
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf13
         || converseVar.eventKey is pf14
         || converseVar.eventKey is pf15
         || converseVar.eventKey is pf16
         || converseVar.eventKey is pf17
         || converseVar.eventKey is pf18
         || converseVar.eventKey is pf19
         || converseVar.eventKey is pf20
         || converseVar.eventKey is pf21
         || converseVar.eventKey is pf24)
          CLXREC.CLXEDITF = "Y";
        end
      end
    end
  end






end // end KL0E112

// set do-updates flag
Function KL0E113()
   /* ************************************************************/
   /* *    set the do-updates flag                              **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E113"; /* set current process name*/



  CLXREC.CLXUPDTF = "N"; /* init to dont-update*/


  if (CLWREC.CLWACTIV == "I") /* if inquiring*/
    if (KL0EM001.YCSCD is modified)
       /* next sentence*/
    else
      return;
    end
  end


  if (converseVar.eventKey is pf12 /* if just expanding codes*/
   || CL0EW01.CL0EWDFF == "Y")     /* or defaults are displayed*/
    return;
  end


  if (CLXREC.CLXEDITF == "Y" /* if we did edits*/
   && CLXREC.CLXERRF == "N") /* and there are no errors*/
    CLXREC.CLXUPDTF = "Y"; /* do updates*/
  end


end // end KL0E113

// set up pf-key branch
Function KL0E114()
   /* ************************************************************/
   /* *       set up the next application to flow to            **/
   /* *           if a pf-key was pressed                       **/
   /* *  maintenance:                                           **/
   /* *  -----------                                            **/
   /* *  1. phase (B) . added functionality to pf6 process.     **/
   /* *     checks for the work sheet flag and the inspection   **/
   /* *     returns flag                                        **/
   /* *  2. phase (B) . checking the worksheet entered flag     **/
   /* *     when setting the proper option.                     **/
   /* *  3. 10-28-91 twatso added code for osd for installation **/
   /* *                     in December 91                      **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G       **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-25-98  GDECKE  REMOVE PF19 KEY FOR KL0H              **/
   /* * 06-11-98  GDECKE  USE PF7 TO RETURN TO EK0E             **/
   /* * 04-12-99  GDECKE  USE PF23 TO GO GO KL08                **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E114"; /* set current process name*/

  if (converseVar.eventKey is pf2)
    if (VCLHDR02.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end


  if (converseVar.eventKey is pf6)
    if (KL0EM001.YCTCD in YCTTBL.YCTCD)
      if (KL0EM001.YCTCD == "NIL") /* if international*/
        COMMAREA.CATOAP = "KL0X"; /* go to intl def insp*/
      else
        if (CL0EW02.CLAWSENF == "N") /* if not done through a work sheet*/
          if (CL0EW01.CL0EWHVR == "N") /* not inspection done yet*/
            converseLib.validationFailed(533); /* can not tranfer, inspection not yet*/
                                   /* done*/
            CLXREC.CLXERRF = "Y"; /* set error flag*/
          else
            COMMAREA.CATOAP = "KL02"; /* go to return insp*/
          end
        else
          if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* if defective, or osd*/
           || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y") /* or consumer defective*/
            COMMAREA.CATOAP = "KL0V"; /* go to regular def insp*/
          else
            COMMAREA.CATOAP = "KL0U"; /* go to return insp*/
          end
        end
      end
      return;
    else
      converseLib.validationFailed(87); /* invalid claim type*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


  if (converseVar.eventKey is pf7)
    EKWREC.EKWREC-GROUP = COMMAREA.CA-USER-WORKAREA-2K-B;
    if (EKWREC.EKW-CAFROMAP == "EK0E")
      COMMAREA.CATOAP = "EK0E";
      EKWREC.EKW-CAFROMAP = "KL0E";
      COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;
      return;
    else
      if (EKWREC.EKW-CAFROMAP == "EK0F")
        COMMAREA.CATOAP = "EK0F";
        EKWREC.EKW-CAFROMAP = "KL0E";
        COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;
        return;
      else
        converseLib.validationFailed(2); /* pf7 invalid if bad from appl*/
        CLXREC.CLXERRF = "Y";
      end
    end
  end


  if (converseVar.eventKey is pf10)
    set EKWREC empty;
    set EK0EW00 empty;
    COMMAREA.CATOAP = "EK0F";
    EKWREC.EKW-CAFROMAP = "KL0E";
    EK0EW00.EK0EW-SV-CL-CLM-NBR = KL0EM001.CLACLMNB;
    EKWREC.EKW-EK0E-AREA = EK0EW00.EK0EW-GROUP;
    COMMAREA.CA-USER-WORKAREA-2K-B = EKWREC.EKWREC-GROUP;
    return;
  end


  if (converseVar.eventKey is pf9)
    COMMAREA.CATOAP = "KL0T";
    return;
  end


  if (converseVar.eventKey is pf11)
    COMMAREA.CATOAP = "KL0S";
    return;
  end


  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "KL0I";
    return;
  end


  if (converseVar.eventKey is pf14)
    if (KL0EM001.YCTCD == "NBC"
     || KL0EM001.YCTCD == "DAA")
      COMMAREA.CATOAP = "KL0K"; /* nike bank claim g/l*/
    else
      COMMAREA.CATOAP = "KL0J"; /* claim g/l*/
    end
    return;
  end


  if (converseVar.eventKey is pf15)
    if (VCLHDR02.CLAWSENF == "N")
      if (KL0EM001.YCTCD == "RTS")
        COMMAREA.CATOAP = "KL0O"; /* rtn auth rts*/
        return;
      end
      if (KL0EM001.YCTCD == "DEF"
       || KL0EM001.YCTCD == "CDR") /* do not want to include osd*/
        COMMAREA.CATOAP = "KL0R"; /* def rtn auth*/
        return;
      end
      if (KL0EM001.YCTCD == "ADJ")
        COMMAREA.CATOAP = "KL0L"; /* adjustment summary*/
        return;
      end
    else

       /* for all other menu options*/

      if (KL0EM001.YCTCD == "RTS")
        COMMAREA.CATOAP = "KL0U"; /* rtn auth rts*/
        return;
      end
      if (KL0EM001.YCTCD == "DEF"
       || KL0EM001.YCTCD == "DFO"
       || KL0EM001.YCTCD == "CDR"
       || KL0EM001.YCTCD == "OSD")
        COMMAREA.CATOAP = "KL0V"; /* def rtn auth*/
        return;
      end
    end
    if (KL0EM001.YCTCD == "NIL")
      COMMAREA.CATOAP = "KL0X"; /* def rtn auth*/
      return;
    else
      converseLib.validationFailed(24); /* pf key not valid for claim type*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KL0N";
    return;
  end


  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "KL0F";
    return;
  end


  if (converseVar.eventKey is pf18)
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G";
    return;
  end


    /* REMOVED PER SANDY KELLY 02-25-98*/
    /* ADDED PER LISA TUFFLI   04-12-99*/
  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "KL08";
    return;
  end


  if (converseVar.eventKey is pf20)
    CLWREC.CLWMCMNT = "Y"; /* want memo comments*/
    COMMAREA.CATOAP = "KL0G";
    return;
  end


  if (converseVar.eventKey is pf24) /* dup claim header*/
    if (VCLHDR02.YCTCD in YCTTBL.YCTCD)
      if (VCLHDR02.CLAWSENF == "N")
        /* next sentence*/
      else
        CLWREC.CLWMNOPT = YCTTBL.YCTMNOPT[sysVar.arrayIndex];
      end
    end
    CLWREC.CLWACTIV = "A";
    COMMAREA.CATOAP = "KL0E";
    return;
  end


end // end KL0E114

// set flow-to-next-screen flag
Function KL0E115()
   /* ************************************************************/
   /* *     set the flow-to-next-process-flag                   **/
   /* *                                                         **/
   /* *    this flag controls whether or not we go on to        **/
   /* *    the next application or stay here.                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E115"; /* set current process name*/


  CL0EW01.CL0EWFLO = "N"; /* initialize flow-flag*/

  if (CLWREC.CLWACTIV == "I") /* if in inquiry mode*/
    CL0EW01.CL0EWFLO = "Y"; /* yes, we want to flow*/
    return;
  end


  if (converseVar.eventKey is pf12) /* if only editing*/
    CL0EW01.CL0EWFLO = "N"; /* no, we dont flow*/
    return;
  end


  if (CLWREC.CLWACTIV == "I" /* if in inquiry mode*/
   || CL0EW01.CL0EWSMF == "N") /* or no screen fields changed*/
    CL0EW01.CL0EWFLO = "Y"; /* yes, we want to flow*/
  else
    if (CLXREC.CLXUPDTF == "Y" /* if we were supposed to update*/
     && CL0EW01.CL0EWUOK == "Y") /* and the update went ok*/
      CL0EW01.CL0EWFLO = "Y"; /* yes, we want to flow*/
    end
  end



end // end KL0E115

// set fields modified
Function KL0E116()
   /* ************************************************************/
   /* *     if any screen field is modified, set it modified    **/
   /* *        in case the screen has to be re-conversed.       **/
   /* *                                                         **/
   /* * 08-10-90 CHELLM Added check of OP1CMPNB.                **/
   /* * 08-23-91 CHELLM Added check of Cust Phone Nbr fields    **/
   /* *          CL0EM-PHONE-AREA-CODE                          **/
   /* *          CL0EM-PHONE-PREFIX                             **/
   /* *          CL0EM-PHONE-SUFFIX                             **/
   /* * 10-28-91 twatso added code for osd to install in dec 91 **/
   /* * 10-09-97 CHELLM Added yrc-rt-cse-cd.                    **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E116"; /* set current process name*/

  if (KL0EM001.KUCCOID is modified)
    set KL0EM001.KUCCOID modified;
  end

  if (KL0EM001.KUMSTRID is modified)
    set KL0EM001.KUMSTRID modified;
  end

  if (KL0EM001.OP1CMPNB is modified) /* added 08-10-90*/
    set KL0EM001.OP1CMPNB modified;
  end

  if (KL0EM001.XNXCD is modified)
    set KL0EM001.XNXCD modified;
  end

  if (KL0EM001.YASCD is modified)
    set KL0EM001.YASCD modified;
  end

  if (KL0EM001.IV0IVCID is modified)
    set KL0EM001.IV0IVCID modified;
  end

  if (KL0EM001.OP1CUOID is modified)
    set KL0EM001.OP1CUOID modified;
  end

  if (KL0EM001.OP1NORID is modified)
    set KL0EM001.OP1NORID modified;
  end

  if (KL0EM001.CL0EWACF is modified)
    set KL0EM001.CL0EWACF modified;
  end

  if (KL0EM001.YITCD is modified)
    set KL0EM001.YITCD modified;
  end

  if (KL0EM001.CL0EWAAF is modified)
    set KL0EM001.CL0EWAAF modified;
  end

  if (KL0EM001.ARCREFNB is modified)
    set KL0EM001.ARCREFNB modified;
  end

  if (KL0EM001.XOCCD is modified)
    set KL0EM001.XOCCD modified;
  end

  if (KL0EM001.XOBCD is modified)
    set KL0EM001.XOBCD modified;
  end

  if (KL0EM001.SP1ID is modified)
    set KL0EM001.SP1ID modified;
  end

  if (KL0EM001.XPTCD is modified)
    set KL0EM001.XPTCD modified;
  end

  if (KL0EM001.XWHCD is modified)
    set KL0EM001.XWHCD modified;
  end

  if (KL0EM001.OP1CUPO is modified)
    set KL0EM001.OP1CUPO modified;
  end

  if (KL0EM001.ARCCCREF is modified)
    set KL0EM001.ARCCCREF modified;
  end

  if (KL0EM001.YCRCD is modified)
    set KL0EM001.YCRCD modified;
  end

  if (KL0EM001.YRC-RT-CSE-CD is modified)
    set KL0EM001.YRC-RT-CSE-CD modified;
  end

  if (KL0EM001.YCTCD is modified)
    set KL0EM001.YCTCD modified;
  end

  if (KL0EM001.XGPCD is modified)
    set KL0EM001.XGPCD modified;
  end

  if (KL0EM001.XDVCD is modified)
    set KL0EM001.XDVCD modified;
  end

  if (KL0EM001.XBCCD is modified)
    set KL0EM001.XBCCD modified;
  end

  if (KL0EM001.CL0EWCDT is modified)
    set KL0EM001.CL0EWCDT modified;
  end

  if (KL0EM001.CLAOCAMT is modified)
    set KL0EM001.CLAOCAMT modified;
  end

  if (KL0EM001.XIECD is modified)
    set KL0EM001.XIECD modified;
  end

  if (KL0EM001.CLACTCNM is modified)
    set KL0EM001.CLACTCNM modified;
  end

  if (KL0EM001.CL0EM-PHONE-AREA-CODE is modified)
    set KL0EM001.CL0EM-PHONE-AREA-CODE modified;
  end

  if (KL0EM001.CL0EM-PHONE-PREFIX is modified)
    set KL0EM001.CL0EM-PHONE-PREFIX modified;
  end

  if (KL0EM001.CL0EM-PHONE-SUFFIX is modified)
    set KL0EM001.CL0EM-PHONE-SUFFIX modified;
  end

  if (KL0EM001.CLYATHPW is modified)
    if (KL0EM001.YCTCD == "RTS"
     || KL0EM001.YCTCD == "DEF"
     || KL0EM001.YCTCD == "CDR"
     || KL0EM001.YCTCD == "OSD"
     || KL0EM001.YCTCD == "DFO")
      set KL0EM001.CLYATHPW modified;
    else
      if (CLWREC.CLWACTIV == "A") /* if creating claim*/
        set KL0EM001.CLYATHPW modified;
      else
        set KL0EM001.CLYATHPW modified, invisible; /* don't want to show password*/
      end
    end
  end

  if (KL0EM001.CL0EWLDT is modified)
    set KL0EM001.CL0EWLDT modified;
  end

  if (KL0EM001.YCSCD is modified)
    set KL0EM001.YCSCD modified;
  end

  if (KL0EM001.XXXUSRID is modified)
    set KL0EM001.XXXUSRID modified;
  end

  if (KL0EM001.XSOCD is modified)
    set KL0EM001.XSOCD modified;
  end

  if (KL0EM001.XIECD is modified)
    set KL0EM001.XIECD modified;
  end


end // end KL0E116

// format auth name
Function KL0E117()
   /* ************************************************************/
   /* *   Format the authorization last name, first name        **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *  --------------------                                   **/
   /* *                                                         **/
   /* *  1. 12-6-89 chellm created.                             **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E117"; /* set current process name*/


  set SQLCA empty;

  call "IO2650" ("SA", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/

     /* need to format name*/
    SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
    SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
    SM4REC.XXXMDINT = CLYREC.XXXMDINT;
    XSIVSN6(); /* format name*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      IVZREC.IVZFNAME = "NOT ON FILE";
    else
      TA1REC.TA1TBLKE = "GETTING AUTH-BY REP NAME";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1LOCAT[2] = "CL0ES106";
      XPCL010(); /* abend*/
    end
  end

end // end KL0E117

// process screen m001 entries
Function KL0E120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields     **/
   /* *                                                         **/
   /* * 08-10-90 CHELLM Added perform of CL0E124 to validate    **/
   /* *                 the CU-COMP-CO-ID OP1CMPNB.             **/
   /* * 10-06-98 GDECKE Added edit for valid taken-by id.       **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E120"; /* set current process name*/


  CLXREC.CLXERRF = "N"; /* init errors-on-screen flag*/
  CL0EW01.CL0EWDCC = "N"; /* init default-cust-clm-nbr flag*/


     /* there are 4 things that must happen before proper*/
     /* validation can proceed:*/
        /* 1. must have a valid claim type*/
        /* 2. must have a valid claim status*/
        /* 3. when adding, must have defaults set up...*/

             /* 1. an invoice nbr*/
                 /* or*/
             /* 2. an order nbr*/

  KL0E-SHOW-POPUPS();

  if (CLXREC.CLXERRF == "Y") /* if claim type was invalid*/
    return;
  end

  KL0ES49(); /* validate claim type*/

  if (CLXREC.CLXERRF == "Y") /* if claim type was invalid*/
    return;
  end



  KL0ES50(); /* validate claim reason*/

  if (CLXREC.CLXERRF == "Y") /* if claim reason was invalid*/
    return;
  end

  KL0ES-EDIT-YRC-CD(); /* edit root cause code*/

  if (CLXREC.CLXERRF == "Y") /* if claim reason was invalid*/
    return;
  end

  KL0ES42(); /* validate authorization*/


  if (CLXREC.CLXERRF == "Y") /* if authorization was invalid*/
    return;
  end

  KL0ES40(); /* validate claim status*/

  if (CLXREC.CLXERRF == "Y" /* if claim status was invalid*/
   || CLWREC.CLWACTIV == "I") /* or we're in inquiry mode*/
    return;
  end


  KL0ES67(); /* validate additional records flags*/

  if (CLXREC.CLXERRF == "Y") /* if any addl flag was invalid*/
    return;
  end


  KL0ES57(); /* get invoice information*/


  if (CLXREC.CLXERRF == "Y") /* if error getting invoice info*/
    return;
  end


  if (KL0EM001.IV0IVCID != 0
   || KL0EM001.OP1CUOID != 0)
    if (KL0EM001.IV0IVCID != CL0EW01.IV0IVCID
     || KL0EM001.OP1CUOID != CL0EW01.OP1CUOID
     || KL0EM001.OP1NORID != CL0EW01.OP1NORID)
      CL0EW01.IV0IVCID = KL0EM001.IV0IVCID;
      CL0EW01.OP1CUOID = KL0EM001.OP1CUOID;
      CL0EW01.OP1NORID = KL0EM001.OP1NORID;
      CL0EW01.CL0EWIEF = "Y";
    end
  else
     /* 060989 if map.ivc erased, move map to storage*/
    CL0EW01.IV0IVCID = KL0EM001.IV0IVCID; /* 060989 zero w01 data*/
    CL0EW01.OP1CUOID = KL0EM001.OP1CUOID; /* "*/
    CL0EW01.OP1NORID = KL0EM001.OP1NORID; /* "*/
    CL0EW01.CL0EWIEF = "N";
  end


  if (KL0EM001.CL-TAKEN-BY-ID == "NOT FO" /* IF TAKEN-BY IS NOT FOUND ON*/
   || KL0EM001.CL-TAKEN-BY-ID == "      ") /* DCUST.VSVREP01 SHOW ERR MSG*/
    converseLib.validationFailed(105); /* valid taken-by is required*/
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    set KL0EM001.CL-TAKEN-BY-ID cursor, modified, bold;
    return;
  end


  if (KL0EM001.IV0IVCID == 0 /* and no invoice nbr entered*/
   && KL0EM001.OP1CUOID == 0 /* and no order nbr entered*/
   && KL0EM001.KUCCOID == 0) /* if company not entered*/
    converseLib.validationFailed(110); /* company required if no ivc/order*/
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    set KL0EM001.KUCCOID cursor, modified, bold;
    return;
  end


  KL0ES48(); /* validate gpc code*/


  if (CLXREC.CLXERRF == "Y") /* if error in gpc code*/
    return;
  end


  KL0ES96(); /* validate division code*/


  if (CLXREC.CLXERRF == "Y") /* if error in division code*/
    return;
  end


  if (KL0EM001.KUCCOID == 0)
    if (CLXREC.CLXINVFD == "Y"
     || CLXREC.CLXORDFD == "Y")
      KL0EM001.KUCCOID = IV0REC.KUCCOID;
      KL0EM001.KUMSTRID = IV0REC.KUMSTRID;
      KL0EM001.XNXCD = IV0REC.XNXCD;
      KL0EM001.XGPCD = IV0REC.XGPCD;
    end
  else
    if (CLXREC.CLXINVFD == "Y"
     || CLXREC.CLXORDFD == "Y")
      if (IV0REC.KUCCOID == KL0EM001.KUCCOID
       && IV0REC.KUMSTRID == KL0EM001.KUMSTRID
       && IV0REC.XNXCD == KL0EM001.XNXCD
       && IV0REC.XGPCD == KL0EM001.XGPCD)
         /* next sentence*/
      else
        set KUNREC empty; /* force edit of customer*/
      end
    end
  end


  if (KL0EM001.KUCCOID != KUNREC.KUCCOID /* customer number changed*/
   || KL0EM001.KUMSTRID != KUNREC.KUMSTRID
   || KL0EM001.XNXCD != KUNREC.XNXCD)   
    CL0EW01.CL0EWCEF = "Y"; /* customer entered flag*/
    KL0ES43(); /* expand customer number*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  else /* changed 12/88*/
    if (KL0EM001.XGPCD != KUNREC.XGPCD) /* same customer number*/
      if (KL0EM001.XGPCD == "01")
         /* next sentence - haven't changed customer but it is*/
         /* different than gpc on customer record (kunrec)*/
      else
        CL0EW01.CL0EWCEF = "Y";
        KL0ES43(); /* expand customer number*/
        if (CLXREC.CLXERRF == "Y")
          return;
        end
      end
    end
  end


  if (KL0EM001.KUCCOID != 0)
    if (KL0EM001.KUCCOID == CLWREC.KUCCOID /* move lgl entity abbrev*/
     && CLWREC.XLECD != "  "               
     && CLWREC.XLEABRV != "      ")       
      KL0EM001.XLEABRV = CLWREC.XLEABRV;
    else
      KUCREC.KUCCOID = KL0EM001.KUCCOID;
      KL0ES70(); /* get company record, update clwrec &*/
                                   /* map*/
      KL0EM001.XLEABRV = CLWREC.XLEABRV;
    end
  end


  KL0ES99(); /* validate brand code*/


  if (CLXREC.CLXERRF == "Y") /* if error in brand code*/
    return;
  end


  KL0ES9A(); /* default the comp-co id*/


  if (CLXREC.CLXERRF == "Y") /* if error in brand code*/
    return;
  end


  KL0ES9B(); /* validate cogs code*/


  if (CLXREC.CLXERRF == "N")
    KL0E124(); /* validate comp-co OP1CMPID*/
  end



  if (CLXREC.CLXERRF == "Y") /* if error in brand code*/
    return;
  end


  KL0E129(); /* do individual field edits*/


  if (CLXREC.CLXERRF == "N"
   && KL0EM001.IV0IVCID == 0) /* no invoice on claim*/
    KL0ES97(); /* validate xdv,xob,xso,xgp,xot on*/
                                   /* xvotbl*/
  end


  if (CLXREC.CLXERRF == "N")
    KL0E125(); /* do group edits*/
  end


  if (CLXREC.CLXERRF == "N")
    KL0E126(); /* check if defaults displayed*/
  end


  if (CLXREC.CLXINVFD == "Y"  /* 1-4-91 if invoice found*/
   && CLXREC.CLXERRF != "Y"   /* and no errors exist*/
   && CL0EW01.CL0EWNBW == "N" /* and the message not already shown*/
   && CL0EW01.CL0EWDFF != "Y" /* and default message not being shown*/
   && KL0EM001.IV0IVCID is modified) /* and the invoice has changed*/
    KL0ESIG(); /* determine of IVC has been paid with*/
                                   /* nike bank dollars*/
  end /* give warning message if NBQ GL's*/
                                   /* exist*/


end // end KL0E120

// VALIDATE COMP-CO (OP1CMPNB)
Function KL0E124()
   /* ************************************************************/
   /* *     VALIDATE THE CU-COMP-CO-ID  (OP1CMPNB)              **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *  08-10-90 CHELLM Created.                               **/
   /* * 10-12-90  bcourt fix indentation. Change test for comp-co*/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E124"; /* set current process name*/

  if (KL0EM001.OP1CMPNB == 0)
                                   /* if no comp account entered or zeroed*/
    if (VCLHDR02.OP1CMPNB > 0 /* IF COMP-CO existed before*/
     || CL0EW02.OP1CMPNB > 0) /* add 10-12-90*/
      set CL0EW09 empty;
      CL0EW02.OP1CMPNB = 0;
      CL0EW01.CL0EWCOF = "Y"; /* set NEW-COMP-CO-FLAG to force*/
    end /* update of the address table*/
    return; /* no need to edit*/
  end

  set SQLCA empty;

  CL0EW09.KUCCOID = KL0EM001.OP1CMPNB;

  call "IO0240" ("S ", SQLCA, CL0EW09) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
                                              /* of comp account*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if comp acct is not on file*/
    converseLib.validationFailed(645); /* comp account invalid not on customer table*/
    set KL0EM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end


  if (CL0EW09.XXXSTAT != "A")
    converseLib.validationFailed(648); /* comp account is inactive*/
    set KL0EM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end

  if (CL0EW09.XAUCD == "52")
    converseLib.validationFailed(646); /* Sales COGS invalid as Comp Account*/
    set KL0EM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end

  if (CL0EW09.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XATCD[sysVar.arrayIndex] == "06")
       /* next sentence*/
    else
      converseLib.validationFailed(647); /* Sales COGS invalid as Comp Account*/
      set KL0EM001.OP1CMPNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end

  if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "I")
     /* next sentence*/
  else
    converseLib.validationFailed(650); /* comp account must have internal A/R ind*/
    set KL0EM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end


  if (CL0EW09.XAUCD == "60"
   || CL0EW09.XAUCD == "63")
    if (CL0EW09.XLECD == KUCREC.XLECD)
       /* next sentence*/
    else
      converseLib.validationFailed(649); /* Comp's legal entity must match Customer's*/
      set KL0EM001.OP1CMPNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end


  CL0EW01.CL0EWCOF = "Y"; /* set new-comp-co-entered flag*/

end // end KL0E124

// group-dependent field edits
Function KL0E125()
   /* ************************************************************/
   /* *     this process handles group-dependent edits of       **/
   /* *        screen fields.                                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* * 10-22-90 bcourt add warning if in-store-promo claim     **/
   /* *                 does not have invoice number.           **/
   /* * 03-18-91 CHELLM Allow ISP claim to be created w/o an IVC**/
   /* *          if the cust acct is an Internal Comp Account.  **/
   /* * 09-10-91 twatso allow gpc 04 to be at sales office 11   **/
   /* * 12-23-91 twatso added code to check yittbl row for activ**/
   /* * 06-15-94 sgorga Added code to bypass validating gpc with**/
   /* *                 warehouse for 'DAA' clms with gpc='00'. **/
   /* * 07-18-94 sgorga Allow sls ofc 11 to have gpc = '00'.    **/
   /* * 10-29-97 RCHAUV REASON CODE CONV - NO MORE S10          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E125"; /* set current process name*/

  KL0ES64(); /* determine a/r status*/

   /* 10-22-90 add new warning message:*/
  if (KL0EM001.XGPCD == "01" /* in store promo/point of purchase*/
   /* AND CL0EM001.XDVCD EQ '03'    ; promo*/
   /* division <= drop 7-90*/
   && KL0EM001.OP1CMPNB == 0 /* no comp-company ID*/
   && KL0EM001.IV0IVCID == 0) /* no invoice ID*/
    if (KL0EM001.YCTCD == "ADJ" /* claim type*/
     || KL0EM001.YCTCD == "RTS" 
     || KL0EM001.YCTCD == "DEF")
      if (KUCREC.XIECD == "I" /* 3-18-91  if internal  account*/
       && KUCREC.XAUCD == "61") /* and COMP account*/
         /* next sentence                       allow 0 invoice*/
      else
        converseLib.validationFailed(641);
                                   /* use invoice if paid with Nike bank $$*/
        set KL0EM001.IV0IVCID cursor, bold; /* skip 'mod', not true error*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end

  CL0EW01.XDSWHSEF = "Y";
  if (CLXREC.CLXINVFD == "Y") /* if invoice was on file*/
    if (IVAREC.XDSCD in XDSTBL.XDSCD) /* find direct ship flag*/
      CL0EW01.XDSWHSEF = XDSTBL.XDSWHSEF[sysVar.arrayIndex];
    end
  end

  if (KL0EM001.XWHCD == " "
   || CL0EW01.XDSWHSEF == "N")
    /* next sentence*/
  else
    if (KL0EM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == KL0EM001.XGPCD
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == KL0EM001.XGPCD)
        /* next sentence*/
      else
        if (KL0EM001.YCTCD == "DAA"
         && KL0EM001.XGPCD == "00")
            /* next sentence*/
        else
          if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if current ibm invoice*/
            if (YITTBL.XXXSTAT[CLXYITX] == "A") /* IF ACTIVE ROW*/
              if (CLXREC.CLXINVFD == "Y")
                converseLib.validationFailed(53); /* gpc not valid for whse on invoice*/
                CLXREC.CLXERRF = "Y";
                if (YITTBL.YITMULTF[CLXYITX] == "N") /* if current ibm invoice*/
                  set KL0EM001.XGPCD cursor, modified, bold;
                  set KL0EM001.IV0IVCID modified, bold;
                else
                  set KL0EM001.XGPCD cursor, modified, bold;
                end
              end
            else
              converseLib.validationFailed(128); /* invoice/order indicator invalid*/
              CLXREC.CLXERRF = "Y";
            end
          end
        end
      end
    else
      converseLib.validationFailed(54); /* gpc not valid for warehouse*/
      set KL0EM001.XGPCD cursor, modified, bold;
      set KL0EM001.XWHCD modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end

  if (CL0EW02.XOTCD == " ")
    /* next sentence*/
      /* check for valid gpc code for a given xot code*/
  else
    if (CL0EW02.XOTCD in XOTTBL.XOTCD)
      if (XOTTBL.XGPCD[sysVar.arrayIndex] == KL0EM001.XGPCD)

        /* *************************/
        /* GET CL0ES68*/
         /* also cannot have a claim against 03 if a footwear only*/
        /* company and vice versa ---tw 050691*/

        if (KL0EM001.XGPCD == "02")
          if (KUCREC.XOPCD[1] == "NOFT")
            if (KUCREC.KUCFPRDT == 0)
              set KL0EM001.XGPCD cursor, bold;
              CLXREC.CLXERRF = "Y";
              converseLib.validationFailed(692); /* company order type profile not*/
            else
              if (KUCREC.KUCFPRDT > 0
               && KUCREC.XOPCD[2] == "NOFT")
                set KL0EM001.XGPCD cursor, bold;
                CLXREC.CLXERRF = "Y";
                converseLib.validationFailed(692);
                                   /* company order type profile not*/
              end /* set up for this gpc code*/
            end /* set up for this gpc code*/
          end
        end

        if (KL0EM001.XGPCD == "03")
          if (KUCREC.XOPCD[3] == "NOAP")
            if (KUCREC.KUCAPRDT == 0)
              set KL0EM001.XGPCD cursor, bold;
              CLXREC.CLXERRF = "Y";
              converseLib.validationFailed(692); /* company order type profile not*/
            else
              if (KUCREC.KUCAPRDT > 0
               && KUCREC.XOPCD[4] == "NOAP")
                set KL0EM001.XGPCD cursor, bold;
                CLXREC.CLXERRF = "Y";
                converseLib.validationFailed(692);
                                   /* company order type profile not*/
              end /* set up for this gpc code*/
            end
          end
        end
        /* ***************************************/
        /* end of get paragraph 050691*/

      else
        if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if current ibm invoice*/
          if (YITTBL.XXXSTAT[CLXYITX] == "A") /* if active*/
            if (CLXREC.CLXINVFD == "Y")
              converseLib.validationFailed(165); /* ord typ not valid invoice gpc*/
              set KL0EM001.XGPCD cursor, modified, bold;
              set KL0EM001.IV0IVCID modified, bold;
              CLXREC.CLXERRF = "Y";
              return;
            end
          else
            converseLib.validationFailed(128); /* invoice/order indicator invalid*/
            CLXREC.CLXERRF = "Y";
            return;
          end
        end
      end
    else
      converseLib.validationFailed(150); /* ord typ not valid for gpc*/
      set KL0EM001.XGPCD cursor, modified, bold;
      set KL0EM001.XOBCD modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end



   /* 10/29/97 REASON CODE CONVERSION - NO MORE S10*/
   /* IF KL0EM001.YCRCD NE CL0EW02.YCRCD*/
   /* AND CL0EW02.YCRCD = 'S10';     /* if old reason was 's10'*/
   /* MOVE IVAREC.SP1ID TO KL0EM001.SP1ID;*/
   /* MOVE IV0REC.XOBCD TO KL0EM001.XOBCD;*/
   /* MOVE IVAREC.XOTCD TO CL0EW02.XOTCD;*/
   /* MOVE IVAREC.XPTCD TO KL0EM001.XPTCD;*/
   /* MOVE ' ' TO KL0EM001.SP1ABRV;*/
   /* MOVE ' ' TO KL0EM001.XOBABRV;*/
   /* MOVE ' ' TO KL0EM001.XPTABRV;*/
   /* SET KL0EM001.XPTCD CURSOR,MODIFIED,BRIGHT;*/
   /* SET KL0EM001.XOBCD MODIFIED,BRIGHT;*/
   /* SET KL0EM001.SP1ID MODIFIED,BRIGHT;*/
   /* MOVE 359 TO EZEMNO;            /* defaulting back to invoice*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
   /* END;*/


  if (CL0EW01.CL0EWVRF == "Y") /* and entered reason was valid*/
    KL0EM001.YCRSDESC = YCRTBL.YCRSDESC[CLXYCRX];
    CL0EW02.YCRCD = KL0EM001.YCRCD;
  end



   /* 10/29/97  RCHAUV reason code conv - no more S10*/
   /* KL0EM001.YCRCD = 'S10';   /* if wrong sales program &/or wrong ord*/
   /* /*  typ*/
   /* IF KL0EM001.SP1ID = IVAREC.SP1ID*/
   /* AND KL0EM001.XOBCD = IV0REC.XOBCD;*/
   /* MOVE 66 TO EZEMNO;           /* sales program must be different*/
   /* SET KL0EM001.SP1ID CURSOR,MODIFIED,BRIGHT;*/
   /* SET KL0EM001.XOBCD MODIFIED,BRIGHT;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/


  if (KL0EM001.XSOCD == "11") /* if sales office 11*/
    if (KL0EM001.XGPCD == "02" /* only gpc codes 2*/
     || KL0EM001.XGPCD == "00" /* and gpc code 00*/
     || KL0EM001.XGPCD == "01" /* and gpc code 01*/
     || KL0EM001.XGPCD == "03" /* and gpc code 3*/
     || KL0EM001.XGPCD == "04") /* and gpc code 4 are valid*/
       /* next sentence               tw 9-10-91 added gpc 4*/
    else
      converseLib.validationFailed(416);
                                   /* sales ofc 11 can only have gpc 2,3,4*/
      set KL0EM001.XGPCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


end // end KL0E125

// check if any screen defaults
Function KL0E126()
   /* ************************************************************/
   /* *     check if any defaults displayed                     **/
   /* *                                                         **/
   /* *  08-10-90 CHELLM Added OP1CMPNB to the default checks.  **/
   /* *  10-12-90 bcourt Change map.XCUCD(3) to map.XCECD.      **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E126"; /* set current process name*/

  CL0EW01.CL0EWDFF = "N"; /* init defaults flag*/

  if (KL0EM001.CL0EWARP != CL0EW03.CL0EWARP)
    CL0EW03.CL0EWARP = KL0EM001.CL0EWARP;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end


  if (KL0EM001.CL-TAKEN-BY-ID != "FOR C & R DEPT")
    if (KL0EM001.CL-TAKEN-BY-ID != CL0EW03.CL-TAKEN-BY-ID)
      CL0EW03.CL-TAKEN-BY-ID = KL0EM001.CL-TAKEN-BY-ID;
      CL0EW01.CL0EWDFF = "Y"; /* have default*/
    end
  end

  if (KL0EM001.XSOCD != CL0EW03.XSOCD)
    CL0EW03.XSOCD = KL0EM001.XSOCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XTTDESC != CL0EW03.XTTDESC)
    CL0EW03.XTTDESC = KL0EM001.XTTDESC;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XGPCD != CL0EW03.XGPCD)
    CL0EW03.XGPCD = KL0EM001.XGPCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XPTCD != CL0EW03.XPTCD)
    CL0EW03.XPTCD = KL0EM001.XPTCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XOCCD != CL0EW03.XOCCD)
    CL0EW03.XOCCD = KL0EM001.XOCCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.SP1ID != CL0EW03.SP1ID)
    CL0EW03.SP1ID = KL0EM001.SP1ID;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XCECD != CL0EW03.XCECD) /* 10-12-90 rename xcecd*/
    CL0EW03.XCECD = KL0EM001.XCECD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XXXUSRID != CL0EW03.XXXUSRID)
    CL0EW03.XXXUSRID = KL0EM001.XXXUSRID;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.YCTCD != CL0EW03.YCTCD)
    CL0EW03.YCTCD = KL0EM001.YCTCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

   /* iF CL0EM001.YCSCD NE CL0EW03.YCSCD;*/
    /* MOVE CL0EM001.YCSCD TO CL0EW03.YCSCD;*/
    /* MOVE 'Y' TO CL0EW01.CL0EWDFF  ; have default*/
   /* END ;*/
   /* ;*/
   /* IF CL0EM001.YCAPSWD NE CL0EW03.YCAPSWD;*/
    /* MOVE CL0EM001.YCAPSWD TO CL0EW03.YCAPSWD;*/
    /* MOVE 'Y' TO CL0EW01.CL0EWDFF  ; have default*/
   /* END ;*/

  if (KL0EM001.YCRCD != CL0EW03.YCRCD)
    CL0EW03.YCRCD = KL0EM001.YCRCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.XWHCD != CL0EW03.XWHCD)
    CL0EW03.XWHCD = KL0EM001.XWHCD;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end

  if (KL0EM001.KUCCOID != CL0EW03.KUCCOID   
   || KL0EM001.KUMSTRID != CL0EW03.KUMSTRID 
   || KL0EM001.OP1CMPNB != CL0EW03.OP1CMPNB /* added 08-10-90*/
   || KL0EM001.XNXCD != CL0EW03.XNXCD)     
    CL0EW03.KUCCOID = KL0EM001.KUCCOID;
    CL0EW03.KUMSTRID = KL0EM001.KUMSTRID;
    CL0EW03.OP1CMPNB = KL0EM001.OP1CMPNB; /* added 8-10-90*/
    CL0EW03.XNXCD = KL0EM001.XNXCD;
    CL0EW01.KUCGRP[1] = KUCREC.KUCGRP;
    CL0EW01.CL0EWDFF = "Y"; /* have default*/
  end


  if (CL0EW01.CL0EWDFF == "Y") /* if defaults are displayed*/
    if (converseVar.eventKey is pf12)
       /* next sentence*/
    else
      if (converseVar.validationMsgNum == 737 /* fyi msg about claim reason*/
       || converseVar.validationMsgNum == 738 /* fyi msg about claim reason*/
       || converseVar.validationMsgNum == 739 /* fyi msg about claim reason*/
       || converseVar.validationMsgNum == 765) /* fyi msg about master invoice*/
       /* next sentence*/
      else
        converseLib.validationFailed(111); /* defaults displayed message*/
      end
    end
  end




end // end KL0E126

// do individual field edits
Function KL0E129()
   /* ************************************************************/
   /* *     this process handles all edits of individual        **/
   /* *        screen fields.                                   **/
   /* *                                                         **/
   /* * when     by     why                                     **/
   /* * 10-12-90 bcourt change XCUCD(3) to XCECD.               **/
   /* * 04-16-91 sgorga In case G/L 253 was added or deleted    **/
   /* *       (in CL0J) since the CLAREC was last updated, this **/
   /* *       process checks for clm type DAA/ADJ  &  acct cls  **/
   /* *       '21'. If found, goes to CL0ES82 to ck for G/l 253 **/
   /* *       and update clarec agency/rep field.               **/
   /* * 08-23-91 chellm added CL0ES-EDIT-PHN-NBR                **/
   /* *                   - edit customer phone number*/
   /* *                 added CL0ES-DFLT-XOCCD                  **/
   /* *                   - edit consumer order class code      **/
   /* * 02-17-92 twatso added edit on agency/rep if brand code  **/
   /* *                 changes from what is on the header      **/
   /* * 07-31-92 twatso removed code for checking for gl253     **/
   /* *                 if xaucd = 21 and yctcd = daa or adj.   **/
   /* *                 New strategic accounts agencies added = **/
   /* *                 SADA,SANY,SATA- AGENCY ASSOCIATED WITH  **/
   /* *                 CUSTOMER AS PER MEMO 6/29/92 S.SWINEHART**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E129"; /* set current process name*/

  if (KL0EM001.CL0EWARP == " "
   || CL0EW01.CL0EWCEF == "Y" /* OR NEW CUSTOMER ENTERED*/
   || CL0EW01.CL0EWIEF == "Y" /* or new invoice entered*/
   || KL0EM001.XBCCD != VCLHDR02.XBCCD) /* 02-17-92  tw*/
    KL0ES82(); /* go get agency/rep info*/
                                  /* LSE;                            /**/
                                  /* 4-16-91  sgorga  code added below*/
    /* IF KUCREC.XAUCD = '21';        /* if this is a strategic acct*/
     /* AND CLAREC.YCTCD = 'DAA';    /* and clm type is dealer advertising*/
     /* KL0ES82;                     /* go get agency/rep (ck for G/L 253)*/
    /* ELSE;*/
     /* IF KUCREC.XAUCD = '21';      /* if this is a strategic acct*/
       /* AND CLAREC.YCTCD = 'ADJ';  /* and clm type is an adjustment*/
       /* KL0ES82;                   /* go get agency/rep (ck for G/L 253)*/
     /* END;*/
    /* END;*/
  end


   /* IF CL0EM001.XXXUSRID IS MODIFIED;*/
  KL0ES86(); /* get coop-analyst information*/
  KL0ES87(); /* get cust svc rep information*/
  KL0ES80(); /* format cust svc/coop analyst*/
   /* END ;*/


  KL0ES83(); /* expand sales office code*/

  if (KL0EM001.XCECD == " "
   || CL0EW01.CL0EWCEF == "Y") /* OR NEW CUSTOMER ENTERED*/
    KL0ES84(); /* expand c/a analyst code*/
  end

  if (KL0EM001.XTTDESC == " ")
    KL0ES85(); /* get territory name*/
  end

  if (KL0EM001.ARCREFNB is modified)
    KL0ES62(); /* edit a/r ref number*/
  end

  if (KL0EM001.YCTCD == "CDR") /* default order class for cdr's*/
    KL0ES-DFLT-XOCCD();
  end

  if (KL0EM001.XOCCD is modified
   || CL0EW01.CL0EWIEF == "Y") /* or invoice was entered*/
    KL0ES61(); /* edit order class code*/
  end

  if (KL0EM001.XOBCD is modified
   || CL0EW01.CL0EWIEF == "Y") /* or invoice was entered*/
    KL0ES60(); /* edit order type code*/
  end

  KL0ES59(); /* edit sales program code*/

  if (KL0EM001.XPTCD is modified
   || CL0EW01.CL0EWIEF == "Y") /* or invoice was entered*/
    KL0ES58(); /* edit terms code*/
  end

  if (KL0EM001.XWHCD is modified
   || CL0EW01.CL0EWIEF == "Y") /* or invoice was entered*/
    KL0ES56(); /* edit ship warehouse code*/
  end

  if (KL0EM001.OP1CUPO is modified
   || CL0EW01.CL0EWIEF == "Y") /* or invoice was entered*/
    KL0ES53(); /* edit purchase order number*/
  end

  if (KL0EM001.ARCCCREF is modified
   || KL0EM001.YCTCD == "NIL")
    KL0ES51(); /* edit cust claim number*/
  end

  if (KL0EM001.CL0EWCDT is modified)
    KL0ES47(); /* edit cust claim date*/
  end

  if (KL0EM001.CLAOCAMT is modified)
    KL0ES46(); /* edit cust claim amount*/
  end


  KL0ES52(); /* default the claim-status-changed-by*/
                                   /* userid*/

   /* IF CL0EM001.XIECD IS MODIFIED;*/
  KL0ES45(); /* edit internal/external flag*/
   /* END ;*/

  if (KL0EM001.CLACTCNM is modified)
    KL0ES44(); /* edit customer contact*/
  end

  if (KL0EM001.CL0EM-PHONE-AREA-CODE is modified /* if area code*/
   || KL0EM001.CL0EM-PHONE-PREFIX is modified    /* or prefix*/
   || KL0EM001.CL0EM-PHONE-SUFFIX is modified)   /* or suffix is changed*/
    KL0ES-EDIT-PHN-NBR(); /* edit customer phone number*/
  end

  KL0ES41(); /* edit cr denial letter date*/

end // end KL0E129

// update the data-base
Function KL0E130()
   /* ************************************************************/
   /* *     make required updates to the data-base tables       **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) enhancement: added io to the exception    **/
   /* *     table for a) update unfinished exceptions           **/
   /* *     b) to write exception each time 'rfl' is changed    **/
   /* *        to 'rts'                                         **/
   /* *  6-14-90 bcourt order type not req'd for gpc =  '00'.   **/
   /* * 08-10-90 CHELLM Added a check of the flag new comp-co   **/
   /* *                 entered to force a change to the address**/
   /* *                 table.                                  **/
   /* * 02-15-91 CHELLM Renamed CLAXOPNF to CLAXCIND.           **/
   /* * 08-23-91 CHELLM Added CL0ES-UPDT-PHONE-NUMBER           **/
   /* * 01/10/92 GDECKE INITIALIZE TA2REC-PREVENT ABEND.        **/
   /* * 01/29/93 jcarey If CSW adjustment claim and the status  **/
   /* *                 has changed, create an activity record. **/
   /* * 04-20-93 twatso if an adjustment claim is from the csw  **/
   /* *                 and status is cmp, den, or can and has  **/
   /* *                 changed, create an activity record.     **/
   /* * 07-22-93 gdecke write vdmact01 line on status change for**/
   /* *                 any csw claim type.                     **/
   /* * 06-15-94 sgorga Removed code that allowed gpc = '00' to **/
   /* *                 have a blank order type.                **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E130"; /* set current process name*/


   /* last ditch effort to catch blank order types*/

  if (KL0EM001.XOBCD == " "
   || CL0EW02.XOBCD == " ")
    converseLib.validationFailed(133); /* order type is required*/
    CLXREC.CLXERRF = "Y";
    set KL0EM001.XOBCD cursor, modified, bold;
    return;
  end

  CL0EW01.CL0EWUOK = "Y"; /* init update-went-ok-flag*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0E001";
    XPCL010(); /* abend*/
  end


   /* *********************************************************/
   /* phase (B) enhancement:  close any outstanding exceptions*/
        /* also, create an exception record for rfl to rts*/
        /* changes*/
   /* *********************************************************/

   /* IF CLXREC.CLXERRF = 'N';*/
    /* IF CL0EW02.CLAXcind = 'Y' if there are outstanding exce*/
      /* CL0ES70;*/
    /* END ;*/
   /* END ;*/

  if (VCLHDR02.YCTCD == "RFL"
   && CL0EW02.YCTCD == "RTS")
    KL0E075(); /* create an exception record*/
    CL0EW02.CLAXCIND = "Y"; /* reset the exception flag*/
  end


   /* ******** END ENHANCEMENT PHASE (B) *******************/

  if (VCLHDR02.CLAORIGI == "D") /* claim came from csw*/
    if (VCLHDR02.YCSCD1 == CL0EW02.YCSCD1) /* no change in claim status*/
       /* next sentence*/
    else
      if (VCLHDR02.YCSCD1 == "CMP" /* if it changed FROM complete OR*/
       || VCLHDR02.YCSCD1 == "CAN" /* if it changed FROM cancelled OR*/
       || VCLHDR02.YCSCD1 == "DEN" /* if it changed FROM denied OR*/
       || CL0EW02.YCSCD1 == "CMP"  /* if it changed TO COMPLETE OR*/
       || CL0EW02.YCSCD1 == "CAN"  /* if it changed TO CANCELLED OR*/
       || CL0EW02.YCSCD1 == "DEN") /* if it changed TO DENIED OR*/
        KL0ES73(); /* write activity record*/
      end
    end
  end

  if (CLWREC.CLWACTIV == "A")
    KL0E131(); /* get and update next-claim-number*/
  end

  if (CL0EW01.CL0EWUOK == "Y"
   && CL0EW01.CL0EWDCC == "Y") /* supposed to default cust clm nbr*/
    CL0EW01.CL0EWNCN = VCLHDR02.CLACLMNB; /* reformat to alpha*/
    KL0EM001.ARCCCREF = CL0EW01.CL0EWCCN;
  end


  if (CL0EW01.CL0EWUOK == "Y") /* if all previous updates were ok*/
    KL0ES-UPDT-PHN-NBR(); /* update claim comment table with*/
  end /* cust phone number*/


  if (CL0EW01.CL0EWIEF == "Y" /* if supposed to update primary ivc*/
   /* xref*/
   && CL0EW01.CL0EWUOK == "Y") /* and the previous updates were ok*/
    KL0E132(); /* update invoice xref*/
  end


  if (CL0EW01.CL0EWAEF == "Y" /* if supposed to update primary a/r*/
   /* xref*/
   && CL0EW01.CL0EWUOK == "Y") /* and the previous updates were ok*/
    KL0E133(); /* update a/r xref*/
  end


  if (CL0EW01.CL0EWIEF == "Y" /* if new invoice was entered*/
   || CL0EW01.CL0EWCEF == "Y" /* or new customer was entered*/
   || CL0EW01.CL0EWCOF == "Y") /* or new comp-co was entered*/
    if (CL0EW01.CL0EWUOK == "Y") /* if the previous updates were ok*/
      KL0E134(); /* update claim address table*/
    end
  end


  if (CL0EW01.CL0EWUOK == "Y" /* if the previous updates were ok*/
   && CL0EW01.CL0EWSCB == "Y") /* & claim status changed back to open*/
    KL0E135(); /* update clm return*/
  end


  if (CL0EW01.CL0EWUOK == "Y") /* if all previous updates were ok*/
    KL0E139(); /* update claim header table*/
  end

  if (CL0EW01.CL0EWUOK == "Y") /* if updates went ok*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit the changes*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* have deadlock*/
       /* set password dark*/
      if (VCLHDR02.CLAWSENF == "Y") /* worksheet entered flag*/
        if (VCLHDR02.YCTCD == "ADJ")
          set KL0EM001.CLYATHPW invisible;
        end
      else /* non worksheet entered*/
        set KL0EM001.CLYATHPW invisible;
      end
      KL0EM001.CL0EWANM = " "; /* clear out user name*/
      KL0EM001.YCSCD = CL0EW01.YCSCD;
    end
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  end
end // end KL0E130

// get & update next claim number
Function KL0E131()
   /* ************************************************************/
   /* *     get and update next claim number                    **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E131"; /* set current process name*/


    /* iomod reads next-claim-number record, adds 1 to it*/
    /* then updates the database.*/

    /* if sqlcode ne 0 on the select,*/
       /* -2 is passed back in clm nbr*/
    /* else                 ; sqlcode eq 0 on select*/
      /* if sqlcode eq 0 on update,*/
         /* clm nbr is passed back in clm nbr*/
      /* else*/
      /* if sqlcode lt 0 on the update,*/
         /* -3 is passed back in clm nbr*/
      /* else*/
      /* if sqlcode gt 0 on the update,*/
          /* the update is tried 10 times*/
          /* if the update fails 10 times,*/
            /* -1 is passed back in clm nbr.*/

  call "IO1380" ("UC", SQLCA, CLUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0EWCNF = "Y"; /* yes, claim nbr is ok*/
    VCLHDR02.CLACLMNB = CLUREC.CLUNXCLM; /* set claim number*/
    CL0EW02.CLACLMNB = VCLHDR02.CLACLMNB;
    CL0EWUOK = "Y"; /* yes, update went ok*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
      converseLib.validationFailed(4); /* deadlock record message*/
      CL0EWCNF = "N"; /* no, claim nbr is not ok*/
      CL0EWUOK = "N"; /* no, update is not ok*/
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "READING NEXT-CLM-NBR REC FOR UPD";
      XPCL010(); /* abend*/
    end
  end


end // end KL0E131

// update invoice xref table
Function KL0E132()
   /* ************************************************************/
   /* *     update the invoice cross-reference table            **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E132"; /* set current process name*/


  CL0EW01.IV0IVCID = IVAREC.IV0IVCID;


  CLBREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLBREC.CLBPMIVC = "Y";
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* see if record exists*/
  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
          converseLib.validationFailed(4); /* deadlock record message*/
          CL0EW01.CL0EWUOK = "N"; /* no, update is not ok*/
          CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
          return;
        else
          TA1REC.TA1TBLKE = "READING INV XREF RECORD";
          TA1REC.TA1DBASE = "DCLAIM";
          TA1REC.TA1TBLVU = "VCLIVX01";
          TA1REC.TA1LOCAT[2] = "CL0E132";
          XPCL010(); /* abend*/
        end
      end
    else

       /* if sqlcode from 's3' ne 0 or 100*/

      if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
        converseLib.validationFailed(4); /* deadlock record message*/
        CL0EW01.CL0EWUOK = "N"; /* no, update is not ok*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
        return;
      else
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLIVX01";
        TA1REC.TA1LOCAT[2] = "CL0E132";
        XPCL010(); /* abend*/
      end
    end

  end



  if (SQLCA.VAGen_SQLCODE == 0) /* if record exists*/
    set SQLCA empty;
    call "IO1180" ("D ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* delthe existing primary*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
        converseLib.validationFailed(4); /* deadlock record message*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
        CL0EW01.CL0EWUOK = "N"; /* update not ok*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLIVX01";
        TA1REC.TA1LOCAT[2] = "CL0E132";
        XPCL010(); /* abend*/
      end
    end
  end



  CLXREC.CLXORDIV = KL0EM001.IV0IVCID;
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  CLBREC.IV0IVCID = KL0EM001.IV0IVCID;
  CLBREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLXREC.CLXORDIV = KL0EM001.OP1CUOID;
  CLBREC.OP1PARTN = CLXREC.CLXPARTN;
  CLBREC.OP1CUOID = KL0EM001.OP1CUOID;
  CLBREC.OP1NORID = KL0EM001.OP1NORID;
  CLBREC.CLBPMIVC = "Y";
  CLBREC.IV0IVCDT = IV0REC.IV0IVCDT;
  CLBREC.CLBGLIND = "N";
  CLBREC.CLBSRIND = "N";

  if (KL0EM001.YITCD == "I" /* ibm*/
   || KL0EM001.YITCD == " " 
   || KL0EM001.YITCD == "Y")
    CLBREC.YITCD = "I"; /* same as ibm*/
    CLBREC.CLBIVIND = "Y";
    CL0EW02.YITCD = "Y";
  else
    if (KL0EM001.YITCD == "M"
     || KL0EM001.YITCD == "O") /* old ibm*/
      CLBREC.YITCD = "O";
      CLBREC.CLBIVIND = "N";
      CL0EW02.YITCD = "M";
    else
      if (KL0EM001.YITCD == "A"
       || KL0EM001.YITCD == "D") /* dec*/
        CLBREC.YITCD = "D";
        CLBREC.CLBIVIND = "N";
        CL0EW02.YITCD = "A";
      end
    end
  end

   /* need to close cursor before any further processing*/

  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clbrec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = "CLOSING INV XREF RECORD";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    TA1REC.TA1LOCAT[2] = "CL0E132";
    XPCL010(); /* abend*/
  end


  CLBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  set SQLCA empty;
  call "IO1180" ("A ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* insert record into table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
      converseLib.validationFailed(4); /* deadlock record message*/
      CL0EW01.CL0EWUOK = "N"; /* no, update is not ok*/
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING INVOICE TO CROSS-REFERENCE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "CL0E132";
      XPCL010(); /* abend*/
    end
  end





end // end KL0E132

// update claim/ar xref table
Function KL0E133()
   /* ************************************************************/
   /* *     update the claim/ar cross-reference table           **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E133"; /* set current process name*/


  set CLCREC empty;

  CLCREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLCREC.CLCPMAR = "Y";
  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* see if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if no db2 errors*/
    set SQLCA empty;
    call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get first record of set*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* or record does not exist*/
       /* next sentence*/
    else
      TA1REC.TA1TBLKE = "READING INV XREF RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      TA1REC.TA1LOCAT[2] = "CL0E133";
      XPCL010(); /* abend*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    if (KL0EM001.ARCREFNB == " "
     && KL0EM001.ARCCCREF == " ")

       /* user has specified the record is to be deleted by clearing*/
       /* out the fields*/

      set SQLCA empty;
      call "IO1170" ("D ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* delete record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        return;
      else
        TA1REC.TA1TBLKE = "REPLACING PRIMARY A/R XREF RECORD";
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLARX01";
        TA1REC.TA1LOCAT[2] = "CL0E133";
        XPCL010(); /* abend*/
      end
    else

       /* user has changed the fields, so we will do a*/
       /* delete and add of the record to keep the keys straight*/

      call "IO1170" ("D ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* delete record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "REPLACING PRIMARY A/R XREF RECORD";
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLARX01";
        TA1REC.TA1LOCAT[2] = "CL0E133";
        XPCL010(); /* abend*/
      end

      CLCREC.ARCREFNB = KL0EM001.ARCREFNB;
      CLCREC.YASCD = "O";
      CLCREC.ARCCCREF = KL0EM001.ARCCCREF;
      if (KL0EM001.IV0IVCID != 0)
        CLCREC.IV0PARTN = IV0REC.IV0PARTN;
        CLCREC.IV0IVCID = IV0REC.IV0IVCID;
      else
        CLCREC.IV0PARTN = " ";
        CLCREC.IV0IVCID = 0;
      end
      CLCREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      CLCREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      set SQLCA empty;
      call "IO1170" ("A ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* replace record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        return;
      else
        TA1REC.TA1TBLKE = "REPLACING PRIMARY A/R XREF RECORD";
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLARX01";
        TA1REC.TA1LOCAT[2] = "CL0E133";
        XPCL010(); /* abend*/
      end
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100) /* record was not found*/
    CLCREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLCREC.ARCREFNB = KL0EM001.ARCREFNB;
    CLCREC.YASCD = KL0EM001.YASCD;
    CLCREC.ARCCCREF = KL0EM001.ARCCCREF;
    if (KL0EM001.IV0IVCID != 0)
      CLXREC.CLXORDIV = KL0EM001.IV0IVCID;
      CLCREC.IV0IVCID = KL0EM001.IV0IVCID;
      CLCREC.IV0PARTN = CLXREC.CLXPARTN;
    end
    CLCREC.CLCPMAR = "Y";
    CLCREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CLCREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    set SQLCA empty;
    call "IO1170" ("A ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* insert record into table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* everthing went fine*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
        converseLib.validationFailed(4); /* deadlock record message*/
        CL0EW01.CL0EWUOK = "N"; /* no update not ok*/
        CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
        return;
      else
        TA1REC.TA1TBLKE = "ADDING TO A/R CROSS-REFERENCE";
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLARX01";
        TA1REC.TA1LOCAT[2] = "CL0E133";
        XPCL010(); /* abend*/
      end
    end
  end





end // end KL0E133

// update claim address table
Function KL0E134()
   /* *************************************************************/
   /* *      update claim address table                          **/
   /* *                                                          **/
   /* * 08-10-90 CHELLM Added a check of the new-comp-co-entered **/
   /* *                 flag CL0EWCOF to force a update to the   **/
   /* *                 bill-to address in change mode.          **/
   /* * 12-21-90 sgorga Changed kucrec.kuablid to kucrec.kucblaid**/
   /* *            and ivarec.kuablid to ivarec.kuaadrid (this   **/
   /* *            will change to kucblaid in Feb. '91).         **/
   /* * 02-15-91 CHELLM Renamed KUAADRID  to  KUCBLAID.          **/
   /* * 12-23-91 twatso added code for checking yittbl xxxstat   **/
   /* *                 for active                               **/
   /* * 10-09-92 sgorga Added new internal acct nbr 888888 to    **/
   /* * be used in a claim in place of internal customers (NIKE  **/
   /* * or SIDE1) that are closed or inactive.  See comments in  **/
   /* * kl0es43 for more information.                            **/
   /* *                                                          **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0E134"; /* set current process name*/


  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (KL0EM001.KUCCOID == 666666  /* and nike external special cmpny*/
     || KL0EM001.KUCCOID == 9666666 /* or side-1 extrnl special company*/
     || KL0EM001.KUCCOID == 888888) /* or nike internal account*/
      if (KL0EM001.IV0IVCID != 0 /* if invoice is present*/
       && YITTBL.YITIOIBM[CLXYITX] == "Y") /* and the invoice is on ibm*/
        if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and is active*/
          CL0EW02.CLABLGFF = "C";
          CL0EW02.KUCBLAID = KUCREC.KUCBLAID; /* 12-21-90 slg*/
          CL0EW01.CL0EWFNC = "ADD";
          KL0ES91(); /* get/write claim bill to addr rec*/
          if (CL0EW02.CLASHPFF != "E")
            CL0EW02.CLASHPFF = "I";
            CL0EW02.KUMSHAID = IVAREC.KUMSHAID;
            CL0EW01.CL0EWFNC = "DELETE";
            KL0ES92(); /* delete existing shipto addr recs*/
            if (CL0EW02.CLARTNFF != "E")
              CL0EW02.CLARTNFF = "S";
            end
          end
        else
          converseLib.validationFailed(128); /* invoice/order indicator invalid*/
          set KL0EM001.YITCD cursor, bold;
          return;
        end
      else
        CL0EW02.CLABLGFF = "C";
        CL0EW02.KUCBLAID = KUCREC.KUCBLAID; /* 12-21-90 slg*/
        CL0EW01.CL0EWFNC = "ADD";
        KL0ES91(); /* get/write claim bill to addr rec*/
        if (CL0EW02.CLASHPFF != "E")
          CL0EW02.CLASHPFF = "C";
          CL0EW02.KUMSHAID = KUMREC.KUMSHAID;
          CL0EW01.CL0EWFNC = "ADD";
          KL0ES92(); /* get/write claim ship to addr rec*/
          if (CL0EW02.CLARTNFF != "E")
            CL0EW02.CLARTNFF = "S"; /* return-to defaults to ship-to*/
          end
        end
      end
      return;
    end
  end


  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (KL0EM001.KUCCOID != 666666  /* and nike external special cmpny*/
     && KL0EM001.KUCCOID != 9666666 /* or side-1 extrnl special company*/
     && KL0EM001.KUCCOID != 888888) /* or nike internal account*/
      if (KL0EM001.IV0IVCID != 0 /* if invoice is present*/
       && YITTBL.YITIOIBM[CLXYITX] == "Y") /* and the invoice is on ibm*/
        if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and active*/
          CL0EW02.CLABLGFF = "I";
          CL0EW02.KUCBLAID = IVAREC.KUCBLAID; /* 12-21-90 slg*/
          CL0EW01.CL0EWFNC = "DELETE";
          KL0ES91(); /* delete existing bill-to addr recs*/

          if (CL0EW09.KUCCOID > 0) /* IF COMP-CO IS BEING USED GET THE*/
            CL0EW02.KUCBLAID = CL0EW09.KUCBLAID; /* COMP CO BILL-GROUP*/
            CL0EW02.CLABLGFF = "C";
                                   /* ADDRESS AND DELETE THE OLD BILL-*/
            CL0EW01.CL0EWFNC = "DELETE"; /* TO ADDRESS.*/
            KL0ES91(); /* DELETE EXISTING BILL-TO ADDR RECS*/
          end

          if (CL0EW02.CLASHPFF != "E")
            CL0EW02.CLASHPFF = "I";
            CL0EW02.KUMSHAID = IVAREC.KUMSHAID;
            CL0EW01.CL0EWFNC = "DELETE";
            KL0ES92(); /* delete existing shipto addr recs*/
            if (CL0EW02.CLARTNFF != "E")
              CL0EW02.CLARTNFF = "S";
            end
          end
        else
          converseLib.validationFailed(128); /* invoice/order indicator invalid*/
          set KL0EM001.YITCD cursor, bold;
          return;
        end
      else
        CL0EW02.CLABLGFF = "C";
        if (CL0EW09.KUCCOID > 0) /* IF COMP-CO IS BEING USED GET THE*/
          CL0EW02.KUCBLAID = CL0EW09.KUCBLAID; /* COMP CO BILL-GROUP*/
        else
          CL0EW02.KUCBLAID = KUCREC.KUCBLAID; /* 12-21-90 slg*/
        end
        CL0EW01.CL0EWFNC = "ADD";
        KL0ES91(); /* get/write claim bill to addr rec*/
        if (CL0EW02.CLASHPFF != "E")
          CL0EW02.CLASHPFF = "C";
          CL0EW02.KUMSHAID = KUMREC.KUMSHAID;
          CL0EW01.CL0EWFNC = "ADD";
          KL0ES92(); /* get/write claim ship to addr rec*/
          if (CL0EW02.CLARTNFF != "E")
            CL0EW02.CLARTNFF = "S"; /* return-to defaults to ship-to*/
          end
        end
      end
      return;
    end
  end

  if (CLWREC.CLWACTIV == "C") /* if changing*/
    if (KL0EM001.IV0IVCID != 0 /* if invoice is present*/
     && YITTBL.YITIOIBM[CLXYITX] == "Y") /* and invoice is on ibm*/
      if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and active*/
        if (CL0EW02.CLABLGFF == "I" /* if already pointing to invoice*/
         && CL0EW01.CL0EWCOF != "Y") /* AND COMP-CO NOT CHANGED  08-10-90*/
          /* next sentence...nothing to do*/
        else
          CL0EW02.CLABLGFF = "I";
          CL0EW02.KUCBLAID = IVAREC.KUCBLAID; /* 12-21-90 slg*/
          CL0EW01.CL0EWFNC = "DELETE";
          KL0ES91(); /* delete existing claims bill-to addr*/
                                   /* recs*/

          if (CL0EW09.KUCCOID > 0) /* IF COMP-CO IS BEING USED GET THE*/
            CL0EW02.KUCBLAID = CL0EW09.KUCBLAID; /* COMP CO BILL-GROUP*/
            CL0EW02.CLABLGFF = "C";
                                   /* ADDRESS AND DELETE THE OLD BILL-*/
            CL0EW01.CL0EWFNC = "DELETE"; /* TO ADDRESS.*/
            KL0ES91(); /* DELETE EXISTING BILL-TO ADDR RECS*/
          end

        end
      else
        converseLib.validationFailed(128);
        return;
      end
      if (CL0EW02.CLASHPFF == "I") /* if alreading pointing to invoice*/
         /* next sentence...nothing to do*/
      else
        if (CL0EW02.CLASHPFF != "E")
          CL0EW02.CLASHPFF = "I";
          CL0EW02.KUMSHAID = IVAREC.KUMSHAID;
          CL0EW01.CL0EWFNC = "DELETE";
          KL0ES92(); /* delete existing claims ship-to addr*/
                                   /* recs*/
        end
      end
      if (CL0EW02.CLARTNFF == "S")
         /* next sentence...nothing to do*/
      else
        if (CL0EW02.CLARTNFF != "E")
          CL0EW02.CLARTNFF = "S";
          CL0EW01.CL0EWFNC = "DELETE";
          KL0ES93(); /* delete existing return-to addr rec*/
        end
      end
    end
    if (CL0EW01.CL0EWCEF == "Y" /* if new customer was entered*/
     || CL0EW01.CL0EWCOF == "Y") /* or new comp-co was entered*/
      if (CL0EW09.KUCCOID > 0) /* IF COMP-CO IS BEING USED GET THE*/
        CL0EW02.KUCBLAID = CL0EW09.KUCBLAID; /* COMP CO BILL-GROUP*/
        CL0EW02.CLABLGFF = "C"; /* ADDRESS*/
      end
      if (CL0EW02.CLABLGFF == "I")
        CL0EW01.CL0EWFNC = "ADD";
        KL0ES91(); /* add new claim bill to addr rec*/
      else
        CL0EW01.CL0EWFNC = "UPDATE";
        KL0ES91(); /* update existing bill to addr rec*/
      end
      CL0EW02.CLABLGFF = "C";
      if (CL0EW09.KUCCOID != 0) /* IF COMP-CO IS IS PRESENT  USE COMP-CO*/
                                   /* ADDR*/
        CL0EW02.KUCBLAID = CL0EW09.KUCBLAID; /* 04-15-91 GDECKE*/
      else
        CL0EW02.KUCBLAID = KUCREC.KUCBLAID; /* 12-21-90 slg*/
      end
      if (KL0EM001.KUCCOID == 666666  /* if nike external special company*/
       || KL0EM001.KUCCOID == 9666666 /* or side-1 ext. special company*/
       || KL0EM001.KUCCOID == 888888) /* or nike internal account*/
         /* next sentence*/
      else
        if (CL0EW02.CLASHPFF != "E")
          if (CL0EW02.CLASHPFF == "I")
            CL0EW01.CL0EWFNC = "ADD";
            KL0ES92(); /* add new claim ship to addr rec*/
          else
            CL0EW01.CL0EWFNC = "UPDATE";
            KL0ES92(); /* update existing ship to addr rec*/
          end
          CL0EW02.CLASHPFF = "C";
          CL0EW02.KUMSHAID = KUMREC.KUMSHAID;
        end
        if (CL0EW02.CLARTNFF != "E")
          if (CL0EW02.CLARTNFF == "S")
             /* next sentence...nothing to do*/
          else
            CL0EW02.CLARTNFF = "S";
            CL0EW01.CL0EWFNC = "DELETE";
            KL0ES93(); /* delete existing return-to addr rec*/
          end
        end
      end
    end
  end

end // end KL0E134

// set cllrec to not complete
Function KL0E135()
   /* ************************************************************/
   /* *   update the return record to reflect the fact          **/
   /* *   that it is no longer completed due to a change in     **/
   /* *    the claim status                                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E135"; /* set current process name*/


  CL2REC.CLACLMNB = VCLHDR02.CLACLMNB;
  CL2REC.CLHSEQNB = VCLHDR02.CLACSQNB;
  CL2REC.CL2ISNBR = VCLHDR02.CLACISNB;

  set SQLCA empty;
  call "IO2870" ("S ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes}; /* GET return insp cl2rec*/


  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    return; /* we don't care if none found*/
  end



  CL2REC.CL2ISXDT = 0;
  CL2REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CL2REC.ZZZCHGTM = TA2REC.TA2TIMHM;

  set SQLCA empty;
  call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
                                   /* update return insp cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    /* next sentence*/
  else
    TA1REC.TA1TBLVU = "CL2REC";
    TA1REC.TA1LOCAT[2] = "CL0E135";
    XPCL010(); /* error abort routine*/
  end





end // end KL0E135

// update claim header table
Function KL0E139()
   /* ************************************************************/
   /* *   update the claim header table                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G    **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 04-15-98  GDECKE  ROLL CHANGED CLAIM STATUS TO YCSCD2.  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E139"; /* default the coop analyst code*/


  VCLHDR02.CLACLMNB = CL0EW02.CLACLMNB;


  set SQLCA empty;
  call "VCLHDR02" ("S ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0EW01.CL0EWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0E139";
      XPCL010();
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100 /* if record was not found*/
   && CLWREC.CLWACTIV == "C")    /* and we're changing*/
    TA1REC.TA1TBLKE = "RECORD TO CHANGE NOT ON FILE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0E139";
    XPCL010();
  end


  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    if (CLWREC.CLWACTIV == "A") /* and we're adding*/
      TA1REC.TA1TBLKE = "RECORD TO ADD ALREADY ON FILE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0E139";
      XPCL010();
    else

      /* if claim status is about to be changed then roll the old status*/
      /* into status-code-2 on the cl0ew02 record which will replace the*/
      /* record currently in the table.*/

      if (CL0EW02.YCSCD1 != VCLHDR02.YCSCD1)
        CL0EW02.YCSCD2 = VCLHDR02.YCSCD1;
      end

      set SQLCA empty;
      call "VCLHDR02" ("D ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes};
                                   /* delete existing rec*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if delete went ok*/
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "DELETING EXISTING CLA RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR01";
        TA1REC.TA1LOCAT[2] = "CL0E139";
        XPCL010();
      end
    end
  end


  CL0EW02.YCRCD = KL0EM001.YCRCD;
  VCLHDR02.VCLHDR02-GROUP = CL0EW02.VCLHDR02-GROUP;

  VCLHDR02.ZZZCHGDT = CLXREC.XXXCDTE;
  VCLHDR02.ZZZCHGTM = CLXREC.XXXCHHMM;

   /* ********************************************************************/
          /* new code for task cl1180.*/
   /* ********************************************************************/

  if (KL0EM001.CLYATHPW is modified)
    if (KL0EM001.CLYATHPW > " ")
      KL0E-ADD-CLGREC(); /* go and build type 'a' comment record*/
                                 /* to record original authorizer of claim*/
    end
  end

  set SQLCA empty;
  call "VCLHDR02" ("A ", SQLCA, VCLHDR02) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
    return;
  else
    TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0E139";
    XPCL010();
  end




end // end KL0E139

// compare ycrcd for rps flag edt
Function KL0ES-CHECK-YCRCD()
   /* ***************************************************************/
   /* kl0es-check-ycrcd                                      5-19-92*/
   /* if the cl0ew02.ycrcd not = kl0em001.ycrcd then this will be done*/
   /* compare held ycrcd to map ycrcd - if different, see whether*/
   /* the difference affects the rps flag  - check cljrec to see what*/
   /* rps flag set to, and check vclrps01 to see if already exists at*/
   /* which point cannot change the cljrec.rps flag. if exists, then*/
   /* a fyi message will be displayed to reconsider the change to claim*/
   /* reason.*/
   /* ***************************************************************/

  CLXREC.CLXCPROC = "CHK-YCRCD";

  set VCLRPS01 empty;
  VCLRPS01.CLACLMNB = VCLHDR02.CLACLMNB;
  KL0ES-READ-VCLRPS(); /* read vclrps01*/

  if (SQLCA.VAGen_SQLCODE == 100) /* vclrps01 not found*/
    set CLJREC empty; /* check the vrahdr01*/
    CLJREC.CLACLMNB = VCLHDR02.CLACLMNB;
    KL0E004(); /* read cljrec/vrahdr01*/
    if (CL0EW01.CL0EWHRA == "Y") /* an rahdr was found*/
      if (CL0EW02.YCRCD in YCRTBL.YCRCD /* old on ok*/
       && YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] == "N") /* old value*/
        if (CLJREC.CL-RPS-LABL-FL == "N") /* not approved for rps yet*/
          if (KL0EM001.YCRCD in YCRTBL.YCRCD /* new one ok*/
           && YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] == "Y") /* new value*/
            converseLib.validationFailed(737); /* rps=y new rsn code will allow rps=n*/
          end
        end
      else
        if (CL0EW02.YCRCD in YCRTBL.YCRCD /* old value ok*/
         && YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] == "Y") /* old value*/
          if (CLJREC.CL-RPS-LABL-FL == "Y") /* rps ok'd for claim*/
            if (KL0EM001.YCRCD in YCRTBL.YCRCD
             && YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] == "N") /* new value*/
              converseLib.validationFailed(738); /* rps=n new rsn code will allow rps=y*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0
     && VCLRPS01.CL-RPS-NBR > 0)
      if (KL0EM001.YCRCD in YCRTBL.YCRCD
       && YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] == "N") /* new value*/
        converseLib.validationFailed(739); /* rps package labels have been issued*/
      end
    end
  end

  KL0ES-CLOSE-VCLRPS(); /* close cursor on vclrps01*/

   /* may need to add some 'else' logic here to handle some cases.*/

end // end KL0ES-CHECK-YCRCD

// close vclrps01
Function KL0ES-CLOSE-VCLRPS()
  /* GET KL0ES-READ-VCLRPS*/
   /* **************************************************************/
   /* kl0es-close vclrps01                                5-19-92*/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CLSE-VCLRPS"; /* set current process name*/

    /* CLOSE CURSOR FOR VCLRPS01*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO6220" ("C1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0ES-READ-VCLRPS"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end

end // end KL0ES-CLOSE-VCLRPS

// Default XOC code for CDR's
Function KL0ES-DFLT-XOCCD()
   /* ************************************************************/
   /* *  Default the Order Class Code for CDR claims.           **/
   /* *       XOCCD 15 = Consumer Service                       **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 7/31/91 CHELLM  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ESOC"; /* set current process name*/

  if (VCLHDR02.XOCCD == "  ")
    VCLHDR02.XOCCD = "15";
    KL0EM001.XOCCD = "15";
    set KL0EM001.XOCCD modified;
  end

end // end KL0ES-DFLT-XOCCD

// Edit Cust Contact Phone Nbr
Function KL0ES-EDIT-PHN-NBR()
   /* ************************************************************/
   /* *  Edit the Customer Contact Phone Number.                **/
   /* *      If a phone number is entered, it must be           **/
   /* *         10 characters.                                  **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 7/31/91 CHELLM  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ESPH"; /* set current process name*/

  CL0EW01.CL0EW-PHONE-AREA-CODE = KL0EM001.CL0EM-PHONE-AREA-CODE;
  CL0EW01.CL0EW-PHONE-PREFIX = KL0EM001.CL0EM-PHONE-PREFIX;
  CL0EW01.CL0EW-PHONE-SUFFIX = KL0EM001.CL0EM-PHONE-SUFFIX;

  if (CL0EW01.CL0EW-PHONE-NUMBER == " ") /* if not entered, no need to edit*/
    return;
  end

  CLXREC.CLXWFLDC = CL0EW01.CL0EW-PHONE-NUMBER;
  sysVar.arrayIndex = 10;
  while (sysVar.arrayIndex > 0)
    if (CLXREC.CLXWLTR[sysVar.arrayIndex] == " ")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(694);
      set KL0EM001.CL0EM-PHONE-AREA-CODE cursor, modified, bold;
      set KL0EM001.CL0EM-PHONE-PREFIX modified, bold;
      set KL0EM001.CL0EM-PHONE-SUFFIX modified, bold;
      return;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end


end // end KL0ES-EDIT-PHN-NBR

// edit the root cause reason cd
Function KL0ES-EDIT-YRC-CD()
   /* ************************************************************/
   /* edit the root cause reason code                    **/
   /* maintenance                                            **/
   /* -----------                                            **/
   /* 10-09-97 CHELLM  CREATED                                 **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES-EDIT-YRC-CD"; /* set current process name*/

  CL0EW01.CL0EWVRF = "N"; /* init valid-reason-flag*/

  if (KL0EM001.YRC-RT-CSE-CD != CL0EW02.YRC-RT-CSE-CD /* YRC has changed*/
   || KL0EM001.YCRCD != CL0EW02.YCRCD)                /* or the YCR has changed*/
    /* next sentence to edit the new entry*/
  else
    return; /* then there is nothing to edit*/
  end

  if (KL0EM001.YRC-RT-CSE-CD == " " /* if no Root-Cause entered*/
   && KL0EM001.YCRCD == " ")        /* and no claim reason*/
    return; /* then there is nothing to edit*/
  end

  if (KL0EM001.YRC-RT-CSE-CD != " " /* if a Root-Cause entered*/
   && KL0EM001.YCRCD == " ")        /* and no claim reason*/
    KL0EM001.YRC-RT-CSE-CD = " ";
    return; /* then default the root cse to space*/
  end

  if (KL0EM001.YRC-RT-CSE-CD == " " /* if root cause not entered*/
   && KL0EM001.YCRCD != " ")        /* and claim reason was entered*/
    CL0EW01.KL0EW-YRCTBL-KEY-YRC = "00";
    CL0EW01.KL0EW-YRCTBL-KEY-YCR = KL0EM001.YCRCD;
    if (CL0EW01.KL0EW-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* chk for required code*/
      converseLib.validationFailed(789); /* a root cause code is requird*/
      set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
      return;
    else
      set KL0EM001.YRC-RT-CSE-CD initialAttributes;
      CL0EW02.YRC-RT-CSE-CD = KL0EM001.YRC-RT-CSE-CD;
      return; /* root cause code not required for this*/
    end
  end
  if (KL0EM001.YRC-RT-CSE-CD != " " /* if root cause was entered*/
   && KL0EM001.YCRCD != " ")        /* and claim reason was entered*/
    CL0EW01.KL0EW-YRCTBL-KEY-YRC = KL0EM001.YRC-RT-CSE-CD;
    CL0EW01.KL0EW-YRCTBL-KEY-YCR = KL0EM001.YCRCD;
    if (CL0EW01.KL0EW-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* chk for valid combo*/
      if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KL0EM001.YRC-RT-CSE-ABRV = YRCTBL.YRC-RT-CSE-ABRV[sysVar.arrayIndex];
        set KL0EM001.YRC-RT-CSE-CD initialAttributes;
        CL0EW02.YRC-RT-CSE-CD = KL0EM001.YRC-RT-CSE-CD;
      else
        converseLib.validationFailed(790); /* invalid claim reason code*/
        set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
        return;
      end
    else
      converseLib.validationFailed(790); /* invalid claim reason code*/
      set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
      return;
    end
  end


  if (KL0EM001.YRC-RT-CSE-CD != CL0EW02.YRC-RT-CSE-CD
   && CL0EW02.YRC-RT-CSE-CD != " ") /* if root cause code changed*/
    CL0EW01.KL0EW-YRCTBL-KEY-YRC = KL0EM001.YRC-RT-CSE-CD;
    CL0EW01.KL0EW-YRCTBL-KEY-YCR = KL0EM001.YCRCD;
    if (CL0EW01.KL0EW-YRCTBL-KEY in YRCTBL.YRCTBL-KEY)
                                   /* chk for valid combo*/
      if (YRCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KL0EM001.YRC-RT-CSE-ABRV = YRCTBL.YRC-RT-CSE-ABRV[sysVar.arrayIndex];
        set KL0EM001.YRC-RT-CSE-CD initialAttributes;
      else
        converseLib.validationFailed(790); /* invalid claim reason code*/
        set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
        return;
      end
    else
      converseLib.validationFailed(790); /* invalid claim reason code*/
      set KL0EM001.YRC-RT-CSE-CD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      KL0EM001.YRC-RT-CSE-ABRV = " "; /* blank out description*/
      return;
    end
  end

end // end KL0ES-EDIT-YRC-CD

// get customer phone nbr
Function KL0ES-GET-PHN-NBR()
   /* ********************************************************************/
   /* Get Customer Phone Number*/
   /*  */
   /* MAINTENANCE HISTORY*/
   /* 08-23-91 CHELLM  Created.*/
   /* 06-15049 sgorga  Corrected process name moved to clxrec.clxcproc.*/
   /* ********************************************************************/

  CLXREC.CLXCPROC = "-GET-PHN"; /* set current proc name*/

  CL0EW01.CL0EW-PHONE-COMMENT = " ";
  CLGREC.CLACLMNB = KL0EM001.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "T";
  CLGREC.CLGCMSEQ = 1;
   /* select the customer phone number, if*/
   /* one exists, and put on map*/

  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* telephone number already exists so delete it*/
    CL0EW01.CL0EW-PHONE-COMMENT = CLGREC.CLGCOMNT;
    KL0EM001.CL0EM-PHONE-AREA-CODE = CL0EW01.CL0EW-PHONE-AREA-CODE;
    KL0EM001.CL0EM-PHONE-PREFIX = CL0EW01.CL0EW-PHONE-PREFIX;
    KL0EM001.CL0EM-PHONE-SUFFIX = CL0EW01.CL0EW-PHONE-SUFFIX;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "CL0ES69"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0ES-GET-PHN-NBR

// read vclrps01
Function KL0ES-READ-VCLRPS()
   /* **************************************************************/
   /* kl0es-read-vclrps                                   5-19-92*/
   /* read the vclrps01 to see if it exists*/
  /* GET KL0TS-GET-RPS-LINE*/
   /* ***********************************************************/
   /* *  SELECT THE DCLAIM.VCLRPS01 LINE TO GET RPS STATUS     **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-24-92  gdecke  created                             **/
   /* *  04-17-92  gdecke  FIX PROBLEM WITH RPS FOUND FLAG     **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "READ-VCLRPS"; /* set current process name*/

   /* ******SELECT SET OF ALL VCLRPS01 LINES FOR THE CLAIM*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO6220" ("S1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0TE-READ-VCLRPS"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end

   /* ***** FETCH THE FIRST LINE FOR THE CLAIM FROM THE RPS TABLE*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO6220" ("N1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* RECORD FOUND*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0TE-READ-VCLRPS"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end


end // end KL0ES-READ-VCLRPS

// insert or delete phone nbr
Function KL0ES-UPDT-PHN-NBR()
   /* *************************************************************/

   /* add or delete/add cust phone nbr (clgrec)*/

    /* Maintenance History:*/
    /* 08-23-91 CHELLM Created.*/


   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0ESUP"; /* set current proc name*/

  CLGREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "T";
  CLGREC.CLGCMSEQ = 1;

   /* INQUIRE TO SEE IF TELEPHONE NUMBER ALREADY  EXISTS*/
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* telephone number already exists so delete it*/
    call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
         /* telephone number already exists so delete it*/
    else
      TA1REC.TA1LOCAT[2] = "CL0ESUP"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "CL0ESUP"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


  if (CL0EW01.CL0EW-PHONE-NUMBER == " ") /* IF USER IS DELETING THE PHN NBR*/
    return; /* DON'T ADD A TABLE ROW*/
  end

  CLGREC.XXXUSRID = " ";
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLGREC.ZZZCHGCT = 0;
  CLGREC.CLGCOMNT = CL0EW01.CL0EW-PHONE-NUMBER;

  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* upd clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CL0EW01.CL0EWUOK = "N";
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0ESUP"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = VCLHDR02.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0ES-UPDT-PHN-NBR

// handle entry of pf 1
Function KL0ES01()
   /* ************************************************************/
   /* *      handle the entry of pfkey 1                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  XSPF1(); /* transfer to help application*/




end // end KL0ES01

// handle entry of pfkey 3
Function KL0ES03()
   /* ************************************************************/
   /* *      handle the entry of pfkey 3                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/


  COMMAREA.CATOAP = "KL0A";


  XPCL002(); /* exit this application*/




end // end KL0ES03

// handle entry of pf key 4
Function KL0ES04()
   /* GET CL0ES01*/
   /* ************************************************************/
   /* *      handle the entry of pfkey 4                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  XSPF4(); /* transfer back to main menu*/




end // end KL0ES04

// handle entry of pfkey 5
Function KL0ES05()
   /* ************************************************************/
   /* *      handle the entry of pfkey 5                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/


   /* ************************************************************/
   /* *      handle the entry of pfkey 5                        **/
   /* *        claim header                                     **/
   /* *                                                         **/
   /* ************************************************************/



     /* ***   this statement group has the chore of looping ****/
     /* *** thru the line item array and marking each entry ****/
     /* *** with an ' ', before returning to menu selection ****/

     /* set index*/

  CLWREC.CLWCLIDX = 1;

     /* loop thru and mark each entry*/

  while (CLWREC.CLWCLIDX <= CLWREC.CLWMXIDX)
    CLWREC.CLWSELCD[CLWCLIDX] = " ";
    CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
  end

  COMMAREA.CATOAP = "KL0B";


  XPCL002(); /* exit this application*/




end // end KL0ES05

// edit claim status
Function KL0ES40()
   /* ************************************************************/
   /* *      edit the entry of claim status                     **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) enhancements: setting the claim status    **/
   /* *     according to the worksheet entered flag = 'y'       **/
   /* *  2. setting the ycsactcd to 'p' if the claim type being **/
   /* *     created is a 'rfl' type.                            **/
   /* *  3. checking the work sheet enter flag in order to      **/
   /* *     update the inspections status when the claim is     **/
   /* *     set to open                                         **/
   /* *                                                         **/
   /* * 04-20-98 NJANA Added code to allow force completion of  **/
   /* *                CSW claims                               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES40"; /* set current process name*/


  if (KL0EM001.YCSCD is modified)
    /* TCS change begins -dated 04/20/98*/
    if (KL0EM001.YCSCD != " "
     && KL0EM001.YCSCD in YCSTBL.YCSCD)
      if (CLAREC.XSOCD == "21"
       && COMMAREA.CACLVL[8] == "Y"
       && KL0EM001.YCSCD == "CMP")
        /* NEXT SENTENCE;*/
      else
        /* IF KL0EM001.YCSCD NE ' '*/
        /* AND KL0EM001.YCSCD IN YCSTBL.YCSCD*/
        /* AND YCSTBL.YCSSGSFL(EZETST) = 'Y';*/
        if (YCSTBL.YCSSGSFL[sysVar.arrayIndex] == "Y")
          converseLib.validationFailed(57); /* status can only be system-generated*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.YCSCD cursor, modified, bold;
          return;
        end
      end
    end
  end
   /* TCS change ends   -dated 04/20/98*/

   /* *************************************************************/
   /* edit for statuses not allowed for work sheet entered claims*/
   /* *************************************************************/

  if (KL0EM001.YCSCD is modified)
    if (KL0EM001.YCSCD == "OIP"
     || KL0EM001.YCSCD == "OIC")
      if (CL0EW02.CLAWSENF == "Y")
        converseLib.validationFailed(566); /* status can only be system-generated*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.YCSCD cursor, modified, bold;
        return;
      end
    else
      if (KL0EM001.YCSCD == "EIP")
        if (CL0EW02.CLAWSENF == "N")
          converseLib.validationFailed(567); /* status can only be system-generated*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.YCSCD cursor, modified, bold;
          return;
        end
      end
    end
  end


  if (CLWREC.CLWACTIV == "A")
    if (YCTTBL.YCTARTNF[CLXYCTX] == "Y"
     && CL0EW02.CLAWSENF == "Y")
      KL0EM001.YCSCD = "EIP";
    else
      KL0EM001.YCSCD = "OIP";
    end
    if (KL0EM001.YCSCD in YCSTBL.YCSCD) /* if claim status is in table*/
      CLXREC.CLXYCSX = sysVar.arrayIndex; /* set up table index*/
      CL0EW01.YCSCD = KL0EM001.YCSCD;
      CL0EW02.YCSCD1 = KL0EM001.YCSCD;
      if (KL0EM001.YCTCD == "RFL")
        CL0EW02.YCSACTCD = "P"; /* phase (B) enahncement*/
      else
        CL0EW02.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
      end
      CL0EW02.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
      KL0EM001.YCSSDESC = YCSTBL.YCSSDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(71); /* invalid claim status*/
      set KL0EM001.YCSCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
    end
    return;
  end


  if (KL0EM001.YCSCD is modified)
    if (KL0EM001.YCSCD != " "
     && KL0EM001.YCSCD in YCSTBL.YCSCD
     && YCSTBL.YCSRAUFL[sysVar.arrayIndex] == "Y"
     && KL0EM001.CLYATHPW == " ")
      converseLib.validationFailed(58); /* must have authorization for this*/
                                   /* status*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.YCSCD cursor, modified, bold;
      return;
    else /* claim status on map is blank, use*/
                                   /* claim status on header*/
      if (KL0EM001.YCSCD == " "
       && VCLHDR02.YCSCD1 == "AIP"
       && KL0EM001.CLYATHPW == " ")
        KL0EM001.YCSCD = "OIP";
      end
    end
  end


    /* don't allow update to cancelled or denied status if 1 or*/
    /* more returns have been logged*/

  if (CL0EW02.CLAWSENF == "Y") /* worksheet entered claim*/
     /* next sentence*/
  else
    if (KL0EM001.YCSCD == "CAN"
     || KL0EM001.YCSCD == "DEN")
      if (CL0EW01.CL0EWHVR == "Y") /* have returns*/
        converseLib.validationFailed(568); /* can't cancel/deny - returns exist*/
        set KL0EM001.YCSCD cursor, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end
  end


  if (KL0EM001.YCSCD == " ")
    KL0EM001.YCSCD = VCLHDR02.YCSCD1;
  end


  if (KL0EM001.YCSCD in YCSTBL.YCSCD) /* if new status is valid*/
    CLXREC.CLXYCSX = sysVar.arrayIndex;
    KL0EM001.YCSSDESC = YCSTBL.YCSSDESC[CLXYCSX];
  else
    converseLib.validationFailed(71); /* invalid claim status*/
    set KL0EM001.YCSCD cursor, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end


  if (KL0EM001.YCSCD == CL0EW01.YCSCD)
    CL0EW01.YCSCD = KL0EM001.YCSCD;
    CL0EW02.YCSCD1 = KL0EM001.YCSCD;
    if (KL0EM001.YCTCD == "RFL")
      CL0EW02.YCSACTCD = "P"; /* phase (B) enahncement*/
    else
      CL0EW02.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    end
    CL0EW02.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
    KL0EM001.YCSSDESC = YCSTBL.YCSSDESC[sysVar.arrayIndex];
    return;
  end


   /* TCS change begins -dated 06/12/98*/
  if (CLAREC.XSOCD == "21"
   && COMMAREA.CACLVL[8] == "Y"
   && KL0EM001.YCSCD == "CMP")
        /* NEXT SENTENCE;*/
  else
    if (YCSTBL.YCSPRST1[CLXYCSX] == "XXX"         /* if any prev status ok*/
     || CL0EW01.YCSCD == YCSTBL.YCSPRST1[CLXYCSX] /* or ok to change*/
     || CL0EW01.YCSCD == YCSTBL.YCSPRST2[CLXYCSX] /* to this status*/
     || CL0EW01.YCSCD == YCSTBL.YCSPRST3[CLXYCSX] /* from previous*/
     || CL0EW01.YCSCD == YCSTBL.YCSPRST4[CLXYCSX] /* status*/
     || CL0EW01.YCSCD == YCSTBL.YCSPRST5[CLXYCSX] 
     || CL0EW01.YCSCD == YCSTBL.YCSPRST6[CLXYCSX] 
     || CL0EW01.YCSCD == YCSTBL.YCSPRST7[CLXYCSX] 
     || CL0EW01.YCSCD == YCSTBL.YCSPRST8[CLXYCSX])
     /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(72); /* new status not consistant w/prev*/
      set KL0EM001.YCSCD cursor, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end
   /* TCS change ends   -dated 06/12/98*/


  if (YCSTBL.YCSVLCT1[CLXYCSX] == "XXX"          /* if any claim type ok*/
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT1[CLXYCSX] /* or valid with*/
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT2[CLXYCSX] /* or valid with*/
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT3[CLXYCSX] /* any of these*/
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT4[CLXYCSX] /* claim types*/
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT5[CLXYCSX] 
   || KL0EM001.YCTCD == YCSTBL.YCSVLCT6[CLXYCSX])
     /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(101); /* status not valid for claim type*/
    set KL0EM001.YCSCD cursor, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end


   /* for traffic and cust service users only:*/
   /* can change status to rsp (reshipped) but must have been*/
   /* refused claim type and return in process status*/

  if (KL0EM001.YCSCD == "RSP"
   && CL0EW02.YCSCD1 != "RSP") /* user changed claim status*/

    if (CL0EW02.YCTCD == "RFL")
      if (CL0EW02.YCSCD1 == "RIP"
       || CL0EW02.YCSCD1 == "OIP")
         /* next sentence*/
      else
        converseLib.validationFailed(72); /* new status not consistent w/prev*/
        KL0EM001.YCSCD = CL0EW02.YCSCD1; /* move in prev status*/
        KL0EM001.YCSSDESC = " ";
        set KL0EM001.YCSCD cursor, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end

    if (COMMAREA.CAALVL[1] == "Y" /* cust serv add*/
     || COMMAREA.CACLVL[1] == "Y" /* cust serv change*/
     || COMMAREA.CAALVL[2] == "Y" /* traffic add*/
     || COMMAREA.CACLVL[2] == "Y") /* traffic change*/
       /* next sentence*/
    else
      set KL0EM001.YCSCD cursor, modified, bold;
      converseLib.validationFailed(562); /* not valid security*/
      CLXREC.CLXERRF = "Y";
      return;
    end

  end



  CL0EW01.CL0EWSCB = "N"; /* inti status-changed-back flag*/

  if (CL0EW02.CLAWSENF == "Y")
    if (YCTTBL.YCTARTNF[CLXYCTX] == "Y") /* if this type allows returns*/
      if (CL0EW01.YCSCD in YCSTBL.YCSCD)
        if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "Y") /* if old status allowed input*/
          /* next sentence...... dont have to do anything*/
        else
          if (YCSTBL.YCSAINPF[CLXYCSX] == "Y") /* if new status allows input*/
            CL0EW01.CL0EWSCB = "Y"; /* set status-changed-back flag*/
            KL0EM001.CLYATHPW = " ";
          end
        end
      end
    end
  end


  CL0EW01.CL0EWSIA = "Y"; /* stay in this application*/
  CL0EW02.YCSCD1 = KL0EM001.YCSCD;
  if (KL0EM001.YCTCD == "RFL")
    CL0EW02.YCSACTCD = "P"; /* phase (B) enahncement*/
  else
    CL0EW02.YCSACTCD = YCSTBL.YCSACTCD[CLXYCSX];
  end
  CL0EW02.YCSRPTEX = YCSTBL.YCSRPTEX[CLXYCSX];
  CL0EW02.CLASTTDT = CLXREC.XXXCDTE;




   /* GET CL0ES49*/
   /* ************************************************************/






end // end KL0ES40

// edit credit denial letter date
Function KL0ES41()
   /* ************************************************************/
   /* *      edit the credit denial letter date                 **/
   /* *                                                         **/
   /* *  denial date is only valid if claim status is 'denied'  **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES41"; /* set current process name*/


  if (KL0EM001.YCSCD != "DEN" /* if claim status not denied*/
   && KL0EM001.CL0EWLDT == " ")
    CL0EW02.CLADNLDT = 0;
    return;
  end


  if (KL0EM001.YCSCD == "DEN" /* if claim status is denied*/
   && KL0EM001.CL0EWLDT == " ")
    converseLib.validationFailed(56); /* denial date is required*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0EM001.CL0EWLDT cursor, modified, bold;
    return;
  end


  if (KL0EM001.YCSCD != "DEN" /* if claim status not denied*/
   && KL0EM001.CL0EWLDT != " ")
    converseLib.validationFailed(73); /* denial date invalid for claim status*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0EM001.CL0EWLDT cursor, modified, bold;
    return;
  end



  CLXREC.XXXEDFLD = KL0EM001.CL0EWLDT;
  XPCL004(); /* edit the date*/
  if (CLXREC.CLXVALDT == "Y")
    /* -------------------------- y2k in begin --------------------*/
    CL0EW01.CL0EW-DT-ENTER = TA2REC.TA2GRGGN; /* ccyymmdd*/
    CL0EW01.CL0EW-CUR-DT = VGVar.currentGregorianDate; /* ccyymmdd*/
    if (CL0EW01.CL0EW-DT-ENTER-CCYY <= CL0EW01.CL0EW-CUR-DT-CCYY)
      KL0EM001.CL0EWLDT = CLXREC.XXXFLDT; /* move formatted to screen*/
      CL0EW02.CLADNLDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(74); /* denial date not valid*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL0EM001.CL0EWLDT cursor, modified, bold;
      return;
    end
    /* -------------------------- y2k in end   --------------------*/
  else
    converseLib.validationFailed(74); /* denial date not valid*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0EM001.CL0EWLDT cursor, modified, bold;
    return;
  end






end // end KL0ES41

// edit authorized-by id
Function KL0ES42()
   /* ************************************************************/
   /* edit the authorized-by id                          **/
   /* **/
   /* maintenance:                                           **/
   /* 1. phase (B) enhancements: use proper claim types      **/
   /* 2. check credit and sales flags to allow authorization **/
   /* 3. initialized the first authorization flag to 'N'     **/
   /* upon creation of claim header.  Recalculated the    **/
   /* RA expiration date the first time the claim is      **/
   /* authorized and set the authf to 'y'. see CL502v     **/
   /* (cwh 10-20-89)                                      **/
   /* 4. Only recalc ra exp date for RTS,RFL,DEF&CDR'S       **/
   /* (CWH 11-01-89)                                      **/
   /* 5. limit re-calc of raxdt to claims with set up date   **/
   /* greater than 19891031                               **/
   /* 6. 12-6-89 chellm Save the auth by ID as the prev auth **/
   /* when opening an authorized claim.           **/
   /* 7. 10-28-91 twatso added the osd flag and began coding **/
   /* for osd in the system - install December 91 **/
   /* 05-15-98  GDECKE  DO NOT EDIT USER ID AND PASSWORD  **/
   /* WHEN CL-STAT-CHNG-BY = 'AUTOMATC'.**/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES42"; /* set current process name*/

   /* **************************************************/
   /* initialize the first authorization flag*/
   /* **************************************************/

  if (VCLHDR02.CLAAUTHF != "Y") /* (cwh 10-20-89)*/
    if (CL0EW02.CLAAUTHF != "Y")
      CL0EW02.CLAAUTHF = "N"; /* initialize the first authorization*/
    end /* flag if creating claim*/
  end

   /* **************************************************/
   /* editing for claims entered thru a worksheet*/
   /* **************************************************/

  if (CL0EW02.CLAWSENF == "Y")
                                   /* if claim entered through a worksheet*/
    KL0ES54();
    return;
  end

   /* **************************************************/
   /* editing for authorization of completed claim*/
   /* **************************************************/

  if (CLWREC.CLWACTIV == "A")
    if (KL0EM001.CLYATHPW == " ")
      set KL0EM001.CLYATHPW modified, invisible;
    else
      converseLib.validationFailed(417); /* not allowed to authorize when*/
                                   /* creating claim*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CLYATHPW cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* exit when not authorizing a claim*/
   /* ************************************************************/

  if (KL0EM001.CL0EWANM != " " /* claim is authorized 2/89*/
   && KL0EM001.YCSCD == VCLHDR02.YCSCD1) /* clm status has not changed*/
    return;
  else
    if (KL0EM001.CLASCGBY == "AUTOMATC")
      return;
    else
      if (KL0EM001.CLYATHPW == " ") /* if authorization is blank*/
        if (CL0EW02.CLYATHID != 0)
          set KL0EM001.CL0EWPNM initialAttributes; /* (12-6-89)*/
          set KL0EM001.CL0EML10 initialAttributes; /* (12-6-89)*/
          CL0EW02.CLAPRATH = CL0EW02.CLYATHID; /* (12-6-89)*/
          KL0EM001.CL0EWPNM = KL0EM001.CL0EWANM; /* (12-6-89)*/
        end
        set KL0EM001.CLYATHPW modified, invisible;
        CL0EW02.CLYATHID = 0; /* remove authorization id*/
        KL0EM001.CL0EWANM = " "; /* and auth-by name*/
        return;
      end
    end
  end


   /* *************************************************************/
   /* when the estimated value is zero, edit for non-zero qtys*/
   /* *************************************************************/

  if (KL0EM001.CLAESTVL == 0)
    CLIREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLIREC.CLHSEQNB = VCLHDR02.CLACSQNB;
    CLIREC.IV0IVCID = -1;
    CLIREC.CLICRDFL = "*";
    set SQLCA empty;
    set CL0EW05 empty;
    CL0EW05.CL0EWSQL = "SC"; /* count g/l's on claim*/
    call "IO1300" (CL0EW05, SQLCA, CLIREC) {isNoRefresh = yes, isExternal = yes};
    if (CL0EW05.CL0EWIN1 >= 0)
      CLIREC.ZZZCHGCT = CL0EW05.CL0EWCN2;
    else
      CLIREC.ZZZCHGCT = 0;
    end

    CLPREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLPREC.CLHSEQNB = VCLHDR02.CLACSQNB;
    set SQLCA empty;
    set CL0EW06 empty;
    CL0EW06.CL0EWSQL = "SE"; /* count defectiv items on claim*/
    call "IO1350" (CL0EW06, SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
      CLPREC.ZZZCHGCT = 1;
                                   /* use '1' to indicate at least one row*/
    else
      CLPREC.ZZZCHGCT = 0; /* use '0' to indicate no clprec rows*/
    end

    CLNREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLNREC.CLHSEQNB = VCLHDR02.CLACSQNB;
    set SQLCA empty;
    set CL0EW07 empty;
    CL0EW07.CL0EWSQL = "SE"; /* count rts items on claim*/
    call "IO1330" (CL0EW07, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
      CLNREC.ZZZCHGCT = 1;
                                   /* use '1' to indicate at least one row*/
    else
      CLNREC.ZZZCHGCT = 0; /* use '0' to indicate no rows exist*/
    end

    CLRREC.CLACLMNB = VCLHDR02.CLACLMNB;
    CLRREC.CLHSEQNB = VCLHDR02.CLACSQNB; /* 4-22-88*/
    set SQLCA empty;
    set CL0EW04 empty;
    CL0EW04.CL0EWSQL = "SC"; /* count adjs with > 0 qtys on claim*/
    call "IO1370" (CL0EW04, SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
    if (CL0EW04.CL0EWIN1 >= 0)
      CLRREC.ZZZCHGCT = CL0EW04.CL0EWCN1;
    else
      CLRREC.ZZZCHGCT = 0;
    end

    /* *************************************************************/
    /* *  SELECT THE RETURN authorization header record VRahdr01  **/
    /* *************************************************************/

    set CLJREC empty; /* Claim actual ra header record*/
    set SQLCA empty;
    CLJREC.CLACLMNB = VCLHDR02.CLACLMNB;

    call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      XPCL010(); /* Perform abend routine for claims*/
    end

    if (CLIREC.ZZZCHGCT > 0 /* if there are g/l's*/
     || CLPREC.ZZZCHGCT > 0 /* or there are defective items*/
     || CLNREC.ZZZCHGCT > 0 /* or there are rts items*/
     || CLRREC.ZZZCHGCT > 0 
     /* or there are adjustments with > 0 qty*/
     || CLJREC.CLJTATHQ > 0) /* or there are qtys on the ra header*/
       /* next sentence...ok to authorize*/
    else
      converseLib.validationFailed(75); /* auth by not allowed for zero value*/
                                   /* claim*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CLYATHPW cursor, modified, invisible;
      return;
    end
  end


   /* *************************************************************/
   /* need fields from ra print screen (cl0q) before author*/
   /* *************************************************************/

  if (KL0EM001.YCTCD == "RTS")
    if (CLJREC.CLACLMNB == 0) /* haven't fetched record yet*/

      /* *************************************************************/
      /* *  SELECT THE RETURN authorization header record VRahdr01  **/
      /* *************************************************************/

      set CLJREC empty; /* Claim actual ra header record*/
      set SQLCA empty;
      CLJREC.CLACLMNB = VCLHDR02.CLACLMNB;

      call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010(); /* Perform abend routine for claims*/
      end
    end

    if (CLJREC.CLJNBLB == 0
     && CLJREC.CLJPRTRA == "Y"
     && CLJREC.CLJPRTLB == "Y")
      converseLib.validationFailed(565); /* ra print requ are incomplete*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CLYATHPW cursor, modified, invisible;
      return;
    end
  end


   /* *********************************************************/
   /* 1. edit cdr and def for user id only.*/
   /* 2. edit all other claim type for user id and password*/
   /* *********************************************************/

  if (KL0EM001.YCTCD == "CDR"
   || KL0EM001.YCTCD == "DEF"
   || KL0EM001.YCTCD == "OSD")
    KL0ES54(); /* edit user id only*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  else

    /* **********************************************************/
     /* split the password into the authorizing id and the actual*/
     /* password*/
    /* **********************************************************/

    COMMAREA.CAITEM = KL0EM001.CLYATHPW;

    if ("/" in COMMAREA.CAITMLTR)
      /* next sentence*/
    else
      converseLib.validationFailed(36); /* invalid userid/password*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CLYATHPW cursor, modified, invisible;
      return;
    end


    CLXREC.CLXWFLDC = " ";
    CLXREC.CLXLTRX1 = 1;
    CLXREC.CLXLTRX2 = 1;

    while (COMMAREA.CAITMLTR[CLXLTRX1] != "/")
      CLXREC.CLXWLTR[CLXLTRX2] = COMMAREA.CAITMLTR[CLXLTRX1];
      CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
      CLXREC.CLXLTRX2 = CLXREC.CLXLTRX2 + 1;
    end

    CL0EW01.XXXUSRID = CLXREC.CLXWFLDC;
    CLXREC.CLXWFLDC = " ";


    CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
    CLXREC.CLXLTRX2 = 1;

    while (COMMAREA.CAITMLTR[CLXLTRX1] != " ")
      CLXREC.CLXWLTR[CLXLTRX2] = COMMAREA.CAITMLTR[CLXLTRX1];
      CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
      CLXREC.CLXLTRX2 = CLXREC.CLXLTRX2 + 1;
    end

    CL0EW01.CLYATHPW = CLXREC.CLXWFLDC;

    COMMAREA.CAITEM = " ";

    /* ***************************************************/
     /* validate authorizing id and the password*/
    /* ***************************************************/

    set CLYREC empty;
    set SQLCA empty;
    CLYREC.XXXUSRID = CL0EW01.XXXUSRID;
    call "IO2650" ("SB", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLYREC.XXXSTAT == "A"
       && CLYREC.CLYATHPW == CL0EW01.CLYATHPW)
         /* next sentence*/
      else
        converseLib.validationFailed(78); /* id not on authorization table*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.CLYATHPW cursor, modified, invisible;
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(78); /* id not on authorization table*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.CLYATHPW cursor, modified, invisible;
        return;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLATH01";
        if (SQLCA.VAGen_SQLCODE == -811)
          TA1REC.TA1TBLKE = "TABLE MAINTENANCE NEEDED ON USERID";
        end
        XPCL010();
        return;
      end
    end
  end

   /* ***************************************************/
   /* validate claim type*/
   /* ***************************************************/

  sysVar.arrayIndex = 1;
  if (CLYREC.YCTCD[sysVar.arrayIndex] == "XXX") /* authorize any claim type*/
    /* next sentence-look at first entry in occurs clause for $ amt*/
  else
    while (sysVar.arrayIndex <= 20
     && KL0EM001.YCTCD != CLYREC.YCTCD[sysVar.arrayIndex])
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end

  if (sysVar.arrayIndex > 20)
    converseLib.validationFailed(35); /* not allowed to auth this claim type*/
    CLXREC.CLXERRF = "Y";
    set KL0EM001.CLYATHPW cursor, modified, invisible;
    return;
  end

   /* ****************************************************/
   /* validate dollar amount*/
   /* ****************************************************/

  CL0EW01.CL0EWNBR = VCLHDR02.CLAESTVL * -1;
  if (CL0EW01.CL0EWNBR <= CLYREC.CLYATHLM[sysVar.arrayIndex])
    /* next sentence*/
  else
    converseLib.validationFailed(77); /* requires higher approval*/
    CLXREC.CLXERRF = "Y";
    set KL0EM001.CLYATHPW cursor, modified, invisible;
    return;
  end

   /* ****************************************************/
   /* validate special arrangement dollar limit*/
   /* ****************************************************/

   /* IF CL0EM001.YCRCD = 'M01'       ; if this is a mgmt special*/
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y")
                                   /* mgmt special arrangement 12/88*/
    if (YCRTBL.YCRALWTF[CLXYCRX] == "Y" /* if this is a traffic reason*/
     && CLYREC.CLYATHFL == "Y")         /* traffic flag eq 'y'*/
       /* have msa flag = 'y' but not req to have $ limit*/
    else
      if (CL0EW01.CL0EWNBR < 0)
        /* next sentence - always allowed to author debit amount*/
      else
        if (CLYREC.YCTCD[sysVar.arrayIndex] == "ADJ")
          if (CLYREC.CLYATHLM[sysVar.arrayIndex] >= 5000) /* limit must be > or = 5000*/
            /* next sentence*/
          else
            converseLib.validationFailed(63); /* spec arangments require 5000 limit*/
            CLXREC.CLXERRF = "Y";
            set KL0EM001.CLYATHPW cursor, modified, invisible;
            return;
          end
        else /* all other claim types 12/88*/
          if (CLYREC.CLYATHLM[sysVar.arrayIndex] >= 10000)
                                   /* limit must be > or = 10000*/
            /* next sentence*/
          else
            converseLib.validationFailed(570); /* spec arangments require 10000 limit*/
            CLXREC.CLXERRF = "Y";
            set KL0EM001.CLYATHPW cursor, modified, invisible;
            return;
          end
        end
      end
    end
  end

   /* ****************************************************/
   /* validate traffic personnel*/
   /* ****************************************************/

  if (YCRTBL.YCRALWTF[CLXYCRX] == "Y") /* if this is a traffic reason*/
    if (CLYREC.CLYATHFL == "Y") /* traffic flag eq 'y'*/
      /* next sentence*/
    else
      converseLib.validationFailed(67); /* must be auth by traffic personnel*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CLYATHPW cursor, modified, invisible;
      return;
    end
  end


  CL0EW02.CLYATHID = CLYREC.CLYATHID;

   /* *************************************************************/
    /* recalc the expiration date if initial authorization*/
   /* *************************************************************/

  if (CL0EW02.CLAAUTHF == "N" /* if no previous authorizations*/
   && VCLHDR02.CLASETDT > 19891031) /* and set up date after 103189*/
    if (KL0EM001.YCTCD == "RTS" /* (cwh 11-1-89)*/
     || KL0EM001.YCTCD == "DEF" 
     || KL0EM001.YCTCD == "CDR" 
     || KL0EM001.YCTCD == "OSD" /* off shore defective claim type*/
     || KL0EM001.YCTCD == "RFL")
      XSCLSEX(); /* recalc the expiration date*/
      CL0EW02.CLAAUTHF = "Y"; /* and reset the auth flag*/

      set SQLCA empty;
      call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/

      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010(); /* Perform abend routine for claims*/
      end
    else
      CL0EW02.CLAAUTHF = "Y"; /* just set the first auth fl*/
                                  /* for adjustments*/
    end
  end


   /* ****************************************************/
   /* update coop flag on clarec      comment out 080989 gdecke*/
   /* ****************************************************/

   /* MOVE 'N' TO CL0EW02.CLACOOPF;*/
   /* IF CL0EM001.YCTCD EQ 'NBC';*/
    /* OR CL0EM001.YCTCD EQ 'DAA';*/
    /* ; must determine if this is coop analyst or not*/
    /* MOVE CLYREC.CLYATHID TO CL0EW01.CLYATHID;*/
    /* IF CLYREC.YCPCD GT 0;*/
      /* MOVE 'Y' TO CL0EW02.CLACOOPF;*/
    /* END ;*/
   /* END ;*/

   /* *********************************************************/
   /* the next claim status after authorization is set here*/
   /* *********************************************************/

  if (CL0EW01.YCSCD in YCSTBL.YCSCD)
    KL0EM001.YCSCD = YCSTBL.YCSNXTST[sysVar.arrayIndex];
  end


   /* *********************************************************/
    /* phase (B) enhancement:*/
    /* 1. complete authorization for 'adj' and 'rts'*/
    /* 2. checks if current claim status is 'oau'.  it resets it.*/
   /* *********************************************************/

  if (KL0EM001.YCTCD == "ADJ"
   || KL0EM001.YCTCD == "RTS")
    if (CL0EW02.CLADJIND == "Y"
     || CLJREC.CLJRAIND == "Y")
      KL0ES76(); /* complete edits for 'adj and 'rts'*/
      if (CLXREC.CLXERRF == "Y")
        return;
      end
    end
  end

  if (KL0EM001.YCSCD == "OAU")
    if ("RAA" in YCSTBL.YCSCD)
      if (KL0EM001.YCTCD == YCSTBL.YCSVLCT1[sysVar.arrayIndex]
       || KL0EM001.YCTCD == YCSTBL.YCSVLCT2[sysVar.arrayIndex]
       || KL0EM001.YCTCD == YCSTBL.YCSVLCT3[sysVar.arrayIndex]
       || KL0EM001.YCTCD == YCSTBL.YCSVLCT4[sysVar.arrayIndex]
       || KL0EM001.YCTCD == YCSTBL.YCSVLCT5[sysVar.arrayIndex]
       || KL0EM001.YCTCD == YCSTBL.YCSVLCT6[sysVar.arrayIndex])
        KL0EM001.YCSCD = "RAA";
      end
    end
  end



  if (VCLHDR02.CLYATHID == 0
   && CL0EW02.CLYATHID != 0)
    CL0EW01.CL0EWSIA = "Y"; /* yes, stay in this application*/
  end

end // end KL0ES42

// edit the customer number
Function KL0ES43()
   /* *************************************************************/
   /* *      edit the customer number                            **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 1. phase (B) enhancements added xcccd's s and in         **/
   /* *    the customer inactive test (taken out 12/88)          **/
   /* * 2. added edit to not allow customer changes unless the   **/
   /* *    company id stays the same.                            **/
   /* *  6-14-90 bcourt replace cl0et01 with xbctbl to get brand's*/
   /* *      legal entity.                                       **/
   /* * 08-10-90 CHELLM Added edit to allow comp-co's entered for**/
   /* *      only cu-co-id's with XAT=02 and edit to prevent     **/
   /* *      Sales COGS from being entered as Customer Accounts. **/
   /* * 08-24-90 SGORGA  Allow claims against some Nil-customer  **/
   /* *      invoices to bypass code that prevents Nil claims    **/
   /* *      being created in Option 2.                          **/
   /* * 09-28-90 SGORGA  Added another Nil-customer invoices.    **/
   /* * 11-21-90 SGORGA  Added Nil invoices 203447,203451.       **/
   /* * 01-21-91 SGORGA  Added 20 Nil invoices.                  **/
   /* * 02-18-91 SGORGA  Added Nil invoice #6298054              **/
   /* * 02-21-91 SGORGA  Added Nil invoice #6573603              **/
   /* * 03-14-91 SGORGA  Added Nil invoice #6763895,6763634      **/
   /* * 04-19-91 SGORGA  Added Nil invoice #6984512,6978386.     **/
   /* * 05-07-91 SGORGA  Created table CL7TBL to store the NIL   **/
   /* *                  invoice nbrs that we allow domestic     **/
   /* *                  claims to be created against.  Removed  **/
   /* *                  hardcoded NIL invoice nbrs from this    **/
   /* *                  process - replaced with table inquiry.  **/
   /* * 10-28-91 twatso  added code for osd so we can implement  **/
   /* *                  in december 1991                        **/
   /* * 12-30-91 twatso  added code for osd and kuccoid 666666   **/
   /* *                  to not give msg 695 if company 666666   **/
   /* *                  and osd (even tho the ofshr fl = n - for**/
   /* *                  company 666666                          **/
   /* * 11-03-94 sgorga  Consumer claims are no longer being     **/
   /* *                  created in kl0e.  So, the edit here     **/
   /* *                  checks the customer - if a claim is     **/
   /* *                  being created - to be sure it isn't a   **/
   /* *                  consumer customer.                      **/
   /* *                                                          **/
   /* *************************************************************/
   /* 10-09-92 sgorga  When a claim is created for an inactive   **/
   /* or closed customer, the Claim system won't accept that     **/
   /* customer's account.  To allow the claim to be created (or  **/
   /* updated), there are 3 special account nbrs. The appropriate**/
   /* one is entered in place of the customer nbr.  They are:    **/
   /* . 666666 = for external closed inactive NIKE accts.   **/
   /* .9666666 = for external closed inactive SIDE1 accts.  **/
   /* . 888888 = for internal closed inactive accounts.     **/
   /* **/
   /* By external, we mean the retail-based accounts.            **/
   /* By internal, we mean the NIKE-based accounts.              **/
   /* **/
   /* For task CL1185, I added the new internal acct nbr 888888. **/
   /* **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0ES43"; /* set current process name*/

   /* check for consumer customer - don't allow if clm is being created.*/
  if (CLWREC.CLWACTIV == "A" /* if adding*/
   && KL0EM001.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
    converseLib.validationFailed(766); /* can't create consumer claim in KL0E*/
    set KL0EM001.KUCCOID cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end

  KL0ES4D(); /* get store name now, because name will*/
                                   /* be missed*/
   /* ************************************************/
   /* ** 10-07-92  Below code doesn't make sense  ****/
   /* ** We think it shouldn't be here but are    ****/
   /* ** leaving it for now.  Most of the code    ****/
   /* ** will never execute - there's a mistake.  ****/
   /* ************************************************/
   /* if errors are found with the customer number*/
  if (VCLHDR02.KUCCOID == 999999 /* if old company is nike special co*/
   || VCLHDR02.KUCCOID == 9999999) /* or old company is side-1 spcl co*/
    if (KL0EM001.KUCCOID == 666666  /* if new co is external nike special co*/
     || KL0EM001.KUCCOID == 9666666 /* or new co is external side-1 spcl co*/
     || KL0EM001.KUCCOID == 888888) /* or new co is internal account*/
       /* next sentence ... special exception*/
    else
      if (KL0EM001.KUCCOID == 666666  /* if new co is external nike spcl co*/
       || KL0EM001.KUCCOID == 9666666 /* or new co is ext. side-1 spcl co*/
       || KL0EM001.KUCCOID == 888888) /* or new co is internal account*/
        if (KL0EM001.KUCCOID != CL0EW03.KUCCOID)
          if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
           || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
            KUCREC.KUCGRP = CL0EW01.KUCGRP[1];
            if (CL0EW03.KUCCOID != KUCREC.KUCCOID)
              KUCREC.KUCCOID = CL0EW03.KUCCOID;
              set SQLCA empty;
              call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get compny record*/
              if (SQLCA.VAGen_SQLCODE != 0) /* if customer is not on file*/
                converseLib.validationFailed(83); /* cant use unless closed or inactive*/
                set KL0EM001.KUCCOID cursor, modified, bold;
                CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                return;
              end
            end
            if (KUCREC.XCCCD == "W" /* old company credit status must*/
             || KUCREC.XCCCD == "X" /* be one of these*/
             || KUCREC.XCCCD == "Y" 
             || KUCREC.XCCCD == "Z" 
             || KUCREC.XCCCD == "T" 
             || KUCREC.XXXSTAT == "I")
               /* next sentence*/
            else
              converseLib.validationFailed(619); /* credit status must be = w,x,y,z,i*/
              set KL0EM001.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            end
          end
        end
      end
    end
  end
   /* ** 10-07-92  End of questionable code       ****/
   /* ************************************************/

  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;


                                  /* ;         (cwh 9/5/89)*/
  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (YCTTBL.YCTCDRF[CLXYCTX] == "Y") /* if claim type is cdr*/
      if (KL0EM001.KUCCOID == 0) /* and no cust nbr was entered*/
        if (KL0EM001.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
         && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
          KL0EM001.KUCCOID = 9899999;
        else
          KL0EM001.KUCCOID = 899999; /* default to 899999*/
        end
        KL0EM001.KUMSTRID = 0;
        KL0EM001.XNXCD = 0;
        converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
        set KL0EM001.KUCCOID cursor, modified, bold;
        set KL0EM001.KUMSTRID modified, bold;
        set KL0EM001.XNXCD modified, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end


  KL0ES4A(); /* select kucrec           (*cwh*/
                                   /* 9/5/89*)*/

  if (CLWREC.CLWACTIV == "I"   /* IF CL0E IS IN INQUIRY MODE*/
   || VCLHDR02.YCSCD1 == "CMP" /* OR CLAIM STATUS IS 'CMP','CAN','DEN'*/
   || VCLHDR02.YCSCD1 == "CAN" /* 'EXP', OR 'RSP' (RESHIPPED) THEN*/
   || VCLHDR02.YCSCD1 == "DEN" /* DONT SUBSTITUTE CUSTOMER*/
   || VCLHDR02.YCSCD1 == "ERA" /* EXPIRED RA*/
   || VCLHDR02.YCSCD1 == "RSP" /* RESHIPPED*/
   || VCLHDR02.YCSCD1 == "RUA") /* NIKE REFUSAL*/
     /* NEXT SENTNECE*/
  else
    if (KUCREC.XXXSTAT != "A") /* IF CUSTOMER IS NOT ACTIVE SEE IF*/
      KL0ES4C(); /* IT IS ON THE DCUST.VCONV001 TABLE*/
      if (KUCREC.XXXSTAT == "A") /* AND SUBSTITUTE OPEN CUST IF FOUND*/
        KL0ES4D(); /* get store name now, new*/
                                   /* customer-store found*/
        return;
      end
    end
  end


  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (YCTTBL.YCTCDRF[CLXYCTX] == "Y") /* and have cdr claim type*/
      if (KUCREC.XAUCD == "12" /* and cdr acct class*/
       || KUCREC.XAUCD == "13" 
       || KUCREC.XAUCD == "14" 
       || KUCREC.XAUCD == "19" 
       || KUCREC.XAUCD == "43" 
       || KUCREC.XAUCD == "62")
        if (KL0EM001.KUCCOID == 899999  /* if nike special customer*/
         || KL0EM001.KUCCOID == 806642  
         || KL0EM001.KUCCOID == 806643  
         || KL0EM001.KUCCOID == 824770  
         || KL0EM001.KUCCOID == 922261  
         || KL0EM001.KUCCOID == 9899999 /* if side-1 special customer*/
         || KL0EM001.KUCCOID == 9806642 
         || KL0EM001.KUCCOID == 9806643 
         || KL0EM001.KUCCOID == 9824770 
         || KL0EM001.KUCCOID == 9922261)
           /* next sentence*/
        else /* else*/
          if (KL0EM001.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
           && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
            KL0EM001.KUCCOID = 9899999;
          else
            KL0EM001.KUCCOID = 899999; /* default to 899999*/
          end
          KL0EM001.KUMSTRID = 0;
          KL0EM001.XNXCD = 0;
          converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
          set KL0EM001.KUCCOID cursor, modified, bold;
          set KL0EM001.KUMSTRID modified, bold;
          set KL0EM001.XNXCD modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else /* else*/
        if (KL0EM001.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
         && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* and legal entity is side-1*/
          KL0EM001.KUCCOID = 9899999;
        else
          KL0EM001.KUCCOID = 899999; /* default to 899999*/
        end
        KL0EM001.KUMSTRID = 0;
        KL0EM001.XNXCD = 0;
        converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
        set KL0EM001.KUCCOID cursor, modified, bold;
        set KL0EM001.KUMSTRID modified, bold;
        set KL0EM001.XNXCD modified, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end

  if (CLWREC.CLWACTIV == "I" /* if only inquiring*/
   || VCLHDR02.YCSCD1 == "CMP"
   || VCLHDR02.YCSCD1 == "CAN")
     /* next sentence...doesnt matter if cmpny closed*/
  else
    if (VCLHDR02.KUCCOID == 999999 /* if old co is nike spcl cust*/
     && KL0EM001.KUCCOID == 666666) /* if new co external nike spcl cust*/
       /* next sentence ... special exception*/
    else
      if (VCLHDR02.KUCCOID == 9999999 /* or old co is side-1 spcl cust*/
       && KL0EM001.KUCCOID == 9666666) /* or new co extrnl side-1 spcl cust*/
         /* next sentence ... special exception*/
      else
        if (VCLHDR02.KUCCOID == 999999 /* if old co is nike spcl cust*/
         && KL0EM001.KUCCOID == 888888) /* if new co is internal account*/
       /* next sentence ... special exception*/
        else
          if (KUCREC.XCCCD == "W" /* these codes mean the company*/
           || KUCREC.XCCCD == "X" /* is inactive.*/
           || KUCREC.XCCCD == "Y" 
           || KUCREC.XCCCD == "Z" 
           || KUCREC.XCCCD == "T" 
           || KUCREC.XXXSTAT == "I") /* inactive company status*/
            if (KUCREC.XAUCD in XAUTBL.XAUCD /* look at the acct class cd*/
             && XAUTBL.XAUARIND[sysVar.arrayIndex] == "I") /* if it's internal*/
              converseLib.validationFailed(746); /* internal company is closed/inactive*/
              set KL0EM001.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            else /* default to message saying use 666666 or 9666666*/
              converseLib.validationFailed(137); /* external company is closed/inactive*/
              set KL0EM001.KUCCOID cursor, modified, bold;
              CLXREC.CLXERRF = "Y"; /* yes there is an error*/
              return;
            end
          end
        end
      end
    end
  end



  if (CLWREC.CLWMNOPT == 3) /* if international*/
    if (KUCREC.XAUCD == "31" /* and intl owned*/
     || KUCREC.XAUCD == "32" /* or exports*/
     || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
      /* next sentence*/
    else
      converseLib.validationFailed(33); /* company must be intl*/
      set KL0EM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end

    /* 05-07-91 sgorga*/
  if (CLWREC.CLWACTIV == "I") /* if only inquiring*/
     /* next sentence...doesnt matter if intl or not*/
  else
    if (KL0EM001.IV0IVCID in CL7TBL.IV0IVCID)
                                   /* 5-07-91  Allow claims against*/
       /* next sentence   the NIL invoice nbrs in CL7TBL to bypass*/
                       /* below edit.*/
    else
      if (KL0EM001.YCTCD == "DEF" /* if defective claim type*/
       || KL0EM001.YCTCD == "OSD") /* if defective(off shore account)type*/
        if (KUCREC.XAUCD == "31" /* and intl owned*/
         || KUCREC.XAUCD == "32" /* or exports*/
         || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
          converseLib.validationFailed(64); /* intl cmpny shld use menu opt 3*/
          set KL0EM001.KUCCOID cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* yes there is an error*/
          return;
        end
      end
    end
  end

      /* edit  added 08-10-90*/

  if (KUCREC.XAUCD == "52")
    converseLib.validationFailed(643); /* Sales COGS not allowed as Customer*/
                                   /* account*/
    set KL0EM001.KUCCOID cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes, there's an error*/
    return;
  end

      /* edit  added 08-10-90*/

  if (KL0EM001.OP1CMPNB > 0) /* IF COMP-CO ENTERED*/
    if (KUCREC.XAUCD in XAUTBL.XAUCD)
      if (XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* CAN ONLY BE XAT=02*/
         /* next sentence*/
      else
        converseLib.validationFailed(644); /* comp-co-id not allowed for CUST's*/
                                   /* acct type*/
        set KL0EM001.OP1CMPNB cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes, there's an error*/
        return;
      end
    end
  end


  if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
   || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
    if (KUCREC.KUCCOID == IV0REC.KUCCOID
     || KUCREC.KUCCOID == 666666  /* nike external special customer*/
     || KUCREC.KUCCOID == 9666666 /* side-1 external special customer*/
     || KUCREC.KUCCOID == 888888) /* nike internal account*/
       /* next sentence*/
    else
      KUCREC.KUCCOID = IV0REC.KUCCOID;
      set SQLCA empty;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
        if (KUCREC.KUCGRPID == CL0EW01.KUCGRPID
         && KUCREC.KUCGRPID != 0)
           /* next sentence*/
        else
          if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
           && KL0EM001.KUCCOID == 666666) /* external*/
             /* next sentence ... special exception*/
          else
            if (VCLHDR02.KUCCOID == 9999999 /* side-1 special customers*/
             && KL0EM001.KUCCOID == 9666666) /* external*/
               /* next sentence ... special exception*/
            else
              if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
               && KL0EM001.KUCCOID == 888888) /* internal*/
               /* next sentence ... special exception*/
              else
                converseLib.validationFailed(116); /* company/group dont match*/
                set KL0EM001.KUCCOID cursor, modified, bold;
                CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                return;
              end
            end
          end
        end
      else
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0ES43";
        XPCL010();
      end
    end
  end

  if (CLXREC.CLXORDFD == "N" /* if the order was not found*/
   && CLXREC.CLXINVFD == "N") /* and the invoice was not  found*/
    if (KUCREC.KUCCOID == 666666  /* if nike extrnl special customer*/
     || KUCREC.KUCCOID == 9666666 /* or side-1 extrnl special customer*/
     || KUCREC.KUCCOID == 888888) /* or nike internal account*/
      /* next sentence*/
    else
      if (VCLHDR02.KUCCOID != KL0EM001.KUCCOID
       && VCLHDR02.KUCCOID != 0)
        KUCREC.KUCCOID = VCLHDR02.KUCCOID;
        set SQLCA empty;
        call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
          if (KUCREC.KUCGRPID == CL0EW01.KUCGRPID
           && KUCREC.KUCGRPID != 0)
             /* next sentence*/
          else
            if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
             && KL0EM001.KUCCOID == 666666) /* external*/
               /* next sentence ... special exception*/
            else
              if (VCLHDR02.KUCCOID == 9999999 /* side-1 special customers*/
               && KL0EM001.KUCCOID == 9666666) /* external*/
                 /* next sentence ... special exception*/
              else
                if (VCLHDR02.KUCCOID == 999999 /* nike special customers*/
                 && KL0EM001.KUCCOID == 888888) /* internal*/
                 /* next sentence ... special exception*/
                else
                  converseLib.validationFailed(116); /* company/group dont match*/
                  set KL0EM001.KUCCOID cursor, modified, bold;
                  CLXREC.CLXERRF = "Y"; /* yes there is an error*/
                  return;
                end
              end
            end
          end
        else
          TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
          TA1REC.TA1DBASE = "DCUST";
          TA1REC.TA1TBLVU = "VCMPNY01";
          TA1REC.TA1LOCAT[2] = "CL0ES43";
          XPCL010();
        end
      end
    end
  end


  KUCREC.KUCGRP = CL0EW01.KUCGRP; /* restore saved record*/

  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KL0EM001.KUMSTRID;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if store is on file*/
    KL0EM001.KUMSTRNM = KUMREC.KUMSTRNM;
    CL0EW02.KUMSTRID = KUMREC.KUMSTRID;
    CLWREC.KUCCONM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if store was not found*/
      converseLib.validationFailed(82); /* store not found*/
      set KL0EM001.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "CL0ES43";
      XPCL010();
    end
  end

  if (KUMREC.XXXSTAT == "I")
    if (KL0EM001.KUMSTRID == 0
     && KUCREC.XXXSTAT != "I")
      if (KUCREC.XCCCD == "W"
       || KUCREC.XCCCD == "X"
       || KUCREC.XCCCD == "Y"
       || KUCREC.XCCCD == "Z"
       || KUCREC.XCCCD == "T")
        converseLib.validationFailed(376); /* store is inactive*/
        set KL0EM001.KUMSTRID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes there is an error*/
        return;
      else
         /* next sentence*/
      end
    else
      converseLib.validationFailed(376); /* store is inactive*/
      set KL0EM001.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end
   /* validate that the store is set up for osd if kl0em001.yctcd = 'osd'*/

  if (KL0EM001.YCTCD == "OSD")
    if (KUMREC.CU-OFSHR-FL == "N"
     && KUMREC.KUCCOID != 666666 /* unless company is inactive or closed*/
     && KUMREC.KUCCOID != 888888) /* unless company is inactive or closed*/
      converseLib.validationFailed(695); /* store not approved for offshore*/
      set KL0EM001.YCTCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end


   /* VALIDATE THE DEPARTMENT ID BY LOOKING FOR A MATCH ON GPC*/
   /* AND DEPARTMENT.*/
   /* IF NOT FOUND THEN SELECT ALL DCUST.VDEPT001 (KUNREC) LINES*/
   /* FOR THE CO-STORE-DEPT.*/
   /* IF ONE IS FOUND THEN DEPT IS OKAY.*/
   /* IF NONE FOUND SHOW THE ERROR MESSAGE.*/

   /* IF CLAIM TYPE IS 'DAA', 'NBC', OR 'SCO' AND THE DEPT-ID IS*/
   /* ZERO THEN WE SKIP THE EDIT FOR A VALID DEPARTMENT.*/

  if (KL0EM001.YCTCD == "DAA"
   || KL0EM001.YCTCD == "NBC"
   || KL0EM001.YCTCD == "SCO")
    if (KL0EM001.XNXCD == 0)
      CL0EW02.XNXCD = KL0EM001.XNXCD;
      return;
    end
  end

  KUNREC.KUCCOID = KUMREC.KUCCOID;
  KUNREC.KUMSTRID = KUMREC.KUMSTRID;
  KUNREC.XNXCD = KL0EM001.XNXCD;
  KUNREC.XGPCD = KL0EM001.XGPCD;


  set SQLCA empty;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* get customer record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0EW02.XNXCD = KUNREC.XNXCD;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if customer was not found*/
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0ES43";
      XPCL010();
    end
  end

   /* 072489 add ** due to iomod change,*/
   /* old 'ss' got co/store/dept, new gets co/store/dept/gpc*/
  KUNREC.XGPCD = "**"; /* get all gpc*/

  set SQLCA empty;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* set of customer records*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING CUSTOMER SET";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1LOCAT[2] = "CL0ES43";
    XPCL010();
  end


  set SQLCA empty;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* the first record of set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0EW02.XNXCD = KUNREC.XNXCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(693); /* customer number not found*/
      set KUNREC empty;
      set KL0EM001.KUCCOID cursor, modified, bold;
      set KL0EM001.KUMSTRID modified, bold;
      set KL0EM001.XNXCD modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0ES43";
      XPCL010();
    end
  end


end // end KL0ES43

// edit the customer contact
Function KL0ES44()
   /* ************************************************************/
   /* *      edit the customer contact                          **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES44"; /* set current process name*/


  if (KL0EM001.CLACTCNM == " ")
    return;
  else
    CL0EW02.CLACTCNM = KL0EM001.CLACTCNM;
  end



end // end KL0ES44

// edit internal/external flag
Function KL0ES45()
   /* **************************************************************/
   /* *      edit the internal/external flag                      **/
   /* *                                                           **/
   /* * Maintenance History:                                      **/
   /* * 08-10-90 CHELLM Added check of OP1CMPNB comp-co to        **/
   /* *                 ensure these memos are always internal.   **/
   /* * 02-27-91 CHELLM Default XIECD for ISP (XGP=01) claims     **/
   /* *                 to Internal.                              **/
   /* * 06-19-91 twatso if 'rfl' claim type code then xiecd = 'i' **/
   /* * 10-28-91 twatso added coding for osd so can be implemented**/
   /* *                 during December 91                        **/
   /* * 06-21-93 jcarey added new code to assign EO xie code to   **/
   /* *                 an 'e' xie code. also added the pod       **/
   /* *                 claims assignment to an internal xie code.**/
   /* * 08-04-93 jcarey took out the claims status of 'u'         **/
   /* *                 assignment to an internal xie code. now   **/
   /* *                 xie depends on customer xie code.         **/
   /* * 10-29-97 RCHAUV reason code conversion - old=new n38=r38  **/
   /* *                 u45=f11 u46=f12 u11=t11 u12=t12 remove n34**/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0ES45"; /* set current process name*/

  if (KL0EM001.XIECD == " ")
    if (KUCREC.XCCCD == "R"
     /* 1-2-90 new value:acct closed by sales*/
     || KUCREC.XCCCD == "S"
     || KUCREC.XCCCD == "T"
     || KUCREC.XCCCD == "V"
     || KUCREC.XCCCD == "W"
     || KUCREC.XCCCD == "X"
     || KUCREC.XCCCD == "Y"
     || KUCREC.XCCCD == "Z")
      KL0EM001.XIECD = "I";
    else
      if (KL0EM001.YCTCD == "NBC"
       && KL0EM001.YCRCD == "R38")
        KL0EM001.XIECD = "I";
      else
        if (KUCREC.XIECD == "I")
          KL0EM001.XIECD = "I";
        else
          if (KUCREC.XIECD == "E")
            KL0EM001.XIECD = "E";
          else
            if (KUCREC.XIECD == "EC")
              if (KL0EM001.YCTCD == "NBC")
                KL0EM001.XIECD = "E";
              else
                KL0EM001.XIECD = "I";
              end
            else
              if (KUCREC.XIECD == "ED")
                if (KL0EM001.YCTCD == "DEF"
                 || KL0EM001.YCTCD == "OSD")
                  KL0EM001.XIECD = "E";
                else
                  KL0EM001.XIECD = "I";
                end
              else
                if (KUCREC.XIECD == "EE")
                  if (KL0EM001.YCTCD == "NBC")
                    KL0EM001.XIECD = "E";
                  else
                    if (KL0EM001.YCTCD == "DEF"
                     || KL0EM001.YCTCD == "OSD")
                      KL0EM001.XIECD = "E";
                    else
                      KL0EM001.XIECD = "I";
                    end
                  end
                else
                  if (KUCREC.XIECD == "ER")
                    if (KL0EM001.YCTCD == "NBC")
                      KL0EM001.XIECD = "E";
                    else
                      if (KL0EM001.YCTCD == "RTS"
                       || KL0EM001.YCTCD == "DEF"
                       || KL0EM001.YCTCD == "OSD")
                        KL0EM001.XIECD = "E";
                      else
                        KL0EM001.XIECD = "I";
                      end
                    end
                  else
                    if (KUCREC.XIECD == "RD")
                      if (KL0EM001.YCTCD == "RTS"
                       || KL0EM001.YCTCD == "DEF"
                       || KL0EM001.YCTCD == "OSD")
                        KL0EM001.XIECD = "E";
                      else
                        KL0EM001.XIECD = "I";
                      end
                    else
                      if (KUCREC.XIECD == "RE")
                        if (KL0EM001.YCTCD == "RTS")
                          KL0EM001.XIECD = "E";
                        else
                          KL0EM001.XIECD = "I";
                        end
                      else
                        if (KUCREC.XIECD == "EO")
                          KL0EM001.XIECD = "E";
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end



  if (KL0EM001.OP1CMPNB > 0) /* 08-10-90*/
    KL0EM001.XIECD = "I"; /* Claims with Comp-co accounts are*/
  end /* always internal*/

  if (KL0EM001.XGPCD == "01") /* for ISP claims (In Store Promo)*/
                                   /* 2-27-91*/
    if (KL0EM001.YCTCD == "RTS"
     || KL0EM001.YCTCD == "DEF"
     || KL0EM001.YCTCD == "OSD"
     || KL0EM001.YCTCD == "ADJ")
      KL0EM001.XIECD = "I";
    end
  end

  if (KL0EM001.YCTCD == "RFL") /* if a refusal then it is an 'i'*/
    KL0EM001.XIECD = "I"; /* internal/external code*/
  end

  if (KL0EM001.YCRCD == "F11" /* all pod claims are internal*/
   || KL0EM001.YCRCD == "F12" 
   || KL0EM001.YCRCD == "T11" 
   || KL0EM001.YCRCD == "T12")
    KL0EM001.XIECD = "I";
  end


  if (KL0EM001.XIECD == "I"
   || KL0EM001.XIECD == "E")
    CL0EW02.XIECD = KL0EM001.XIECD;
  else
    converseLib.validationFailed(28); /* must be 'i' or 'e'*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0EM001.XIECD cursor, modified, bold;
  end


end // end KL0ES45

// edit the customer claim amount
Function KL0ES46()
   /* ************************************************************/
   /* *      edit the customer claim amount                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES46"; /* set current process name*/


  CL0EW02.CLAOCAMT = KL0EM001.CLAOCAMT;





end // end KL0ES46

// edit the customer claim date
Function KL0ES47()
   /* ************************************************************/
   /* *      edit the customer claim date                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES47"; /* set current process name*/



  if (KL0EM001.CL0EWCDT != " ")
    CLXREC.XXXEDFLD = KL0EM001.CL0EWCDT;
    XPCL004();
    if (CLXREC.CLXVALDT == "Y")
      /* -------------------------- y2k in begin --------------------*/
      CL0EW01.CL0EW-DT-ENTER = TA2REC.TA2GRGGN; /* ccyymmdd*/
      CL0EW01.CL0EW-CUR-DT = VGVar.currentGregorianDate; /* ccyymmdd*/
      if (CL0EW01.CL0EW-DT-ENTER-CCYY <= CL0EW01.CL0EW-CUR-DT-CCYY)
        KL0EM001.CL0EWCDT = CLXREC.XXXFLDT;
                                   /* move formatted to screen*/
        CL0EW02.CLACCLDT = TA2REC.TA2GRGGN;
      else
        converseLib.validationFailed(85); /* invalid customer claim date*/
        set KL0EM001.CL0EWCDT cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      end
      /* -------------------------- y2k in end   --------------------*/
    else
      converseLib.validationFailed(85); /* invalid customer claim date*/
      set KL0EM001.CL0EWCDT cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  else
    KL0EM001.CL0EWCDT = " ";
  end




end // end KL0ES47

// edit the gpc code
Function KL0ES48()
   /* ************************************************************/
   /* *      edit the gpc code                                  **/
   /* *                                                         **/
   /* *Maintenance:                                             **/
   /* *                                                         **/
   /* *  1.  9/5/89  chellm  commented out gpc edit for cdr's   **/
   /* *                      based on ycctbl entry.             **/
   /* *     12-19-91 twatso added code for osd and gpc 02 and 03**/
   /* *                     no other gpc is valid for osd       **/
   /* * 04-22-92 twatso changed osd gpc edit and placement      **/
   /* * 06-15-94 sgorga  Added code to bypass error message 112 **/
   /* *                  if gpc = '00' and claim type = 'DAA'.  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES48"; /* set current process name*/

  if (KL0EM001.XGPCD == "05") /* gpc code 5 is always invalid*/
    converseLib.validationFailed(70); /* invalid product class*/
    set KL0EM001.XGPCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end

  if (KL0EM001.XGPCD == " ") /* if no gpc code entered*/
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XGPCD = IV0REC.XGPCD;
    else
      if (KL0EM001.YCTCD == "NBC")
        KL0EM001.XGPCD = "02";
      else
        converseLib.validationFailed(50); /* gpc is required*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XGPCD cursor, modified, bold;
        return;
      end
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0EM001.XGPCD == IV0REC.XGPCD)
        /* next sentence*/
      else
        if (KL0EM001.YCTCD == "DAA"
         && KL0EM001.XGPCD == "00")
            /* next sentence*/
        else
          converseLib.validationFailed(112); /* gpc does not match invoices*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.XGPCD cursor, modified, bold;
          return;
        end
      end
    end
  end

  if (KL0EM001.YCTCD == "OSD") /* if yct = osd then gpc 02 and*/
    if (KL0EM001.XGPCD == "02" /* gpc 03 are the only valid gpcs*/
     || KL0EM001.XGPCD == "03") /**/
   /* next sentence*/
    else
      converseLib.validationFailed(697); /* invalid gpc/claim type*/
      set KL0EM001.XGPCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end

     /* ( below commented out by CHELLM CL651 9/19/89)*/

   /* IF YCTTBL.YCTCDRF(CLXYCTX) = 'Y'     ; if cdr claim type*/
    /* IF CL0EM001.XGPCD IN YCCTBL.XGPCD  ; valid gpc for cdr clm*/
      /* ;next sentence*/
    /* ELSE ;*/
      /* MOVE 80 TO EZEMNO           ; invalid gpc code for cdr*/
      /* SET CL0EM001.XGPCD CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/



  if (KL0EM001.XGPCD in XGPTBL.XGPCD /* if a valid product class*/
   && KL0EM001.XGPCD != "05")        /* gpc code 5 is always invalid*/
    KL0EM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    CL0EW02.XGPCD = KL0EM001.XGPCD;
  else
    converseLib.validationFailed(86); /* invalid product class*/
    set KL0EM001.XGPCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end





end // end KL0ES48

// edit the claim type
Function KL0ES49()
   /* ************************************************************/
   /* *      edit the claim type                                **/
   /* * maintenance                                             **/
   /* * -----------                                             **/
   /* * 1. phase (B) enhancement:                               **/
   /* *    added logic to check 'rfl' claim type to make sure   **/
   /* *    not other claims have been rts for  the same order   **/
   /* *    used io2320                                          **/
   /* * 06-19-91 twatso if claim type cd = 'rfl' and new claim  **/
   /* *                 then flag it as once a refusal with 'r' **/
   /* *                 in the clapryct (prior claim type)      **/
   /* * 10-28-91 twatso if claim type cd = 'osd' then the store **/
   /* *                 must be approved for osd processing     **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0ES49"; /* set current process name*/


  if (KL0EM001.YCTCD == " ")
    converseLib.validationFailed(113); /* claim type code is required*/
    set KL0EM001.YCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    return;
  end


  if (KL0EM001.YCTCD in YCTTBL.YCTCD) /* if a valid claim type*/
    CLXREC.CLXYCTX = sysVar.arrayIndex; /* set the ycttbl index*/
  else
    converseLib.validationFailed(87); /* invalid claim type*/
    set KL0EM001.YCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end

   /* removed because kumrec is not available at this time.*/
   /* IF KL0EM001.YCTCD = 'OSD';       /* off shore defectives flag*/
    /* IF KUMREC.CU-OFSHR-FL = 'N';*/
      /* MOVE 695 TO EZEMNO;          /* store not approved for osd*/
      /* ;                            /*  processing*/
      /* SET KL0EM001.YCTCD CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;  /* screen validation failed*/
      /* EZERTN;*/
    /* END;*/
   /* END;*/


  if (CL0EW02.YCTCD == "RFL")
    if (KL0EM001.YCTCD == "RFL")
       /* next sentence*/
    else /* claim type was RFL but now is RTS*/
      if (KL0EM001.YCTCD == "RTS")

        if (COMMAREA.CAALVL[1] == "Y" /* cust serv add*/
         || COMMAREA.CACLVL[1] == "Y" /* cust serv change*/
         || COMMAREA.CAALVL[2] == "Y" /* traffic add*/
         || COMMAREA.CACLVL[2] == "Y") /* traffic change*/
           /* next sentence*/
        else
          converseLib.validationFailed(562); /* not valid security*/
          KL0EM001.YCTCD = CL0EW02.YCTCD;
          set KL0EM001.YCTCD cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end

        set KL0EM001.YCTCD skip;
      else
        converseLib.validationFailed(553); /* invalid claim type*/
        set KL0EM001.YCTCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end
  end

  CL0EW01.CLWMNOPT = CLWREC.CLWMNOPT;
  CL0EW01.YCTCD = KL0EM001.YCTCD;

  if (CL0EW01.YMOKEY in YMOTBL.YMOKEY)
    /* next sentence*/
  else
    converseLib.validationFailed(114);
    set KL0EM001.YCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    return;
  end


   /* *********************************************************/
   /* phase (B) enhancement*/
   /* check 'rfl' claim type for 'rts' on the same order*/
   /* *********************************************************/

  if (KL0EM001.YCTCD == "RFL")
    if (KL0EM001.OP1CUOID > 0)
      if (KL0EM001.OP1NORID > 0)
        KL0E005(); /* get the other claims that are 'rts'*/
        if (CL0EW08.YCSCD[1] == "RTS")
          converseLib.validationFailed(496);
           /* previous receipts were 'rts' not 'rfl'*/
          set KL0EM001.YCTCD cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else
        converseLib.validationFailed(93); /* nike order id required*/
        set KL0EM001.OP1NORID cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    else
      converseLib.validationFailed(122); /* order  id required*/
      set KL0EM001.OP1CUOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end



  KL0EM001.YCTABRV = YCTTBL.YCTABRV[CLXYCTX];
  CL0EW02.YCTCD = KL0EM001.YCTCD;

  if (KL0EM001.YCTCD == "RFL" /* if refusal and new (nothing in*/
   && CL0EW02.CLAPRYCT == " ") /* prior claim type bucket) then flag*/
    CL0EW02.CLAPRYCT = "R"; /* with an 'r'- 6-19-91*/
  end


end // end KL0ES49

// select KUCREC for cust nbr
Function KL0ES4A()
   /* ************************************************************/
   /* *      select KUCREC for customer number                  **/
   /* *                                                         **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 9/5/89 chellm  sgrp created.                       **/
   /* * 10-12-90 bcourt change XCUCD(3) to XCECD. Due to length,**/
   /* *                 keep CL0EW02.XCUCD until CLAREC is chngd.*/
   /* * 02-15-91 chellm change XCUCD to XCECD in CLAREC         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES4A"; /* set current process name*/


  set KUCREC empty;

  KUCREC.KUCCOID = KL0EM001.KUCCOID;

  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0EW02.XCECD = KUCREC.XCECD; /* 02-15-91*/
    CL0EW02.KUCCOID = KUCREC.KUCCOID;
    CL0EW01.KUCGRPID = KUCREC.KUCGRPID;
    CL0EW01.KUCGRP = KUCREC.KUCGRP; /* save record*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company was not found*/
      converseLib.validationFailed(81); /* company not on file*/
      set KL0EM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCMPNY01";
      TA1REC.TA1LOCAT[2] = "CL0ES4A";
      XPCL010();
    end
  end


end // end KL0ES4A

// TRY TO FIND CONVERTED CUSTOMER
Function KL0ES4C()
   /* ************************************************************/
   /* *      select KUDREC for customer number (DCUST.VCONV001) **/
   /* *                                                         **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 3/15/91 GDECKE  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES4C"; /* set current process name*/


  set KUDREC empty;

  KUDREC.KUCCOID = KL0EM001.KUCCOID;
  KUDREC.KUMSTRID = KL0EM001.KUMSTRID;

  set SQLCA empty;
  call "IO5570" ("S ", SQLCA, KUDREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if customer is on file*/
   && KUDREC.KUDCSTAT != "I") 
    KL0EM001.KUCCOID = KUDREC.KUDCOCID;
    CL0EW01.KUCCOID = KUDREC.KUDCOCID;
    KL0ES4A(); /* GET COMPANY RECORD*/
    if (KUCREC.XXXSTAT != "I") /* IF CUSTOMER CONVERSION LINE IS ACTIVE*/
      KL0EM001.KUMSTRID = KUDREC.KUDSTCID;
      KL0EM001.XNXCD = KUDREC.XNXCD;
      converseLib.validationFailed(686);
      CLXREC.CLXERRF = "Y";
      set KL0EM001.KUCCOID cursor, modified, bold;
      set KL0EM001.KUMSTRID modified, bold;
      set KL0EM001.XNXCD modified, bold;
    else
      KL0EM001.KUCCOID = CL0EW01.KUCCOID;
      KL0ES4A(); /* GET COMPANY RECORD*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company CONVERSION TABLE LINE*/
       /* NEXT SENTENCE             ; NOT FOUND THEN NO ACTION*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR-CUST CONVERSION";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCONV001";
      TA1REC.TA1LOCAT[2] = "CL0ES4C";
      XPCL010();
    end
  end


end // end KL0ES4C

// select kumrec for store name
Function KL0ES4D()
   /* *************************************************************/
   /* *      select kumrec for the store name                    **/
   /* *      when customer record is closed or inactive          **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 05/17/91   gdecke   create new statement group           **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ES4D"; /* set current process name*/


  set KUMREC empty;

  if (KL0EM001.KUCCOID == 0) /* if customer not entered or previously*/
    KUMREC.KUCCOID = VCLHDR02.KUCCOID; /* displayed then use claim*/
    KUMREC.KUMSTRID = VCLHDR02.KUMSTRID; /* header co-store*/
  else
    KUMREC.KUCCOID = KL0EM001.KUCCOID; /* use the entered co-store*/
    KUMREC.KUMSTRID = KL0EM001.KUMSTRID;
  end

  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if store is on file*/
    KL0EM001.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if store was not found*/
      KL0EM001.KUMSTRNM = "STORE NAME NOT FOUND";
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "CL0ES4D";
      XPCL010();
    end
  end


end // end KL0ES4D

// edit the claim reason code
Function KL0ES50()
   /* ************************************************************/
   /* edit the claim reason code                         **/
   /* maintenance                                            **/
   /* -----------                                            **/
   /* Phase (B): when claim reason is entered, the claim       **/
   /* status flag is check to see if it is active         **/
   /* 10-28-91 twatso  added some code for osd for             **/
   /* implementation in December 91           **/
   /* 01-15-92 GDECKE  ALLOW CLAIM REASON CODE CHANGE IF       **/
   /* NO DATA CONFLICTS WILL RESULT.          **/
   /* 04-09-94 sgorga  Delete 1 line editing for 'DEF' claim   **/
   /* types to have rsn cd = 'def' only.      **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES50"; /* set current process name*/

  CL0EW01.CL0EWVRF = "N"; /* init valid-reason-flag*/

  if (KL0EM001.YCRCD == " " /* if no reason code entered*/
   && CL0EW02.YCRCD == " ") /* and none on file*/
    if (YCTTBL.YCTDEF[CLXYCTX] == "Y" /* if a defective claim type*/
     || YCTTBL.YCTNILF[CLXYCTX] == "Y") /* OR INTERNATIONAL*/
      KL0EM001.YCRCD = "DEF"; /* defaults to defective*/
    end
    if (KL0EM001.YCTCD == "OSD") /* off shore defective*/
      KL0EM001.YCRCD = "DEF"; /* osd is defective*/
    end
    if (KL0EM001.YCTCD == "CDR")
      KL0EM001.YCRCD = "DEF"; /* defaults to defective*/
    end
    if (KL0EM001.YCTCD == "SCO") /* if sco claim type*/
      KL0EM001.YCRCD = "SCO"; /* default to sco reason*/
    end
    if (KL0EM001.YCTCD == "DFO") /* if sco claim type*/
      KL0EM001.YCRCD = "DFO"; /* default to sco reason*/
    end
  end

  if (KL0EM001.YCRCD == " " /* if no reason code entered*/
   && CL0EW02.YCRCD != " ") /* and one already on file*/
    KL0EM001.YCRCD = CL0EW02.YCRCD; /* default back to original*/
  end

  if (KL0EM001.YCRCD != " ") /* if claim reason was entered*/
    if (KL0EM001.YCRCD in YCRTBL.YCRCD) /* if a valid claim reason*/
      if (YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* phase (B) enhancement*/
        CLXREC.CLXYCRX = sysVar.arrayIndex; /* set reason index*/
      else
        converseLib.validationFailed(88); /* invalid claim reason code*/
        set KL0EM001.YCRCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        KL0EM001.YCRSDESC = " "; /* blank out description*/
        return;
      end
    else
      converseLib.validationFailed(88); /* invalid claim reason code*/
      set KL0EM001.YCRCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      KL0EM001.YCRSDESC = " "; /* blank out description*/
      return;
    end
  else
    if (YCTTBL.YCTRQRSN[CLXYCTX] == "Y") /* if reason is required*/
      converseLib.validationFailed(102); /* reason code is required*/
      set KL0EM001.YCRCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    end
    KL0EM001.YCRSDESC = " "; /* blank out description*/
    return;
  end

  if (KL0EM001.YCRCD != CL0EW02.YCRCD
   && CL0EW02.YCRCD != " ") /* if claim reason changed*/
    if (CL0EW02.YCRCD in YCRTBL.YCRCD)
      KL0ES5A(); /* ALLOW REASON CHANGE IF NO DATA*/
                                   /* CONFLICTS*/
      if (CL0EW01.CL0EW-ALW-CLM-RSN-CHNG == "N") /* IF NOT ALLOWED*/
        return; /* THEN EXIT THIS ROUTINE*/
      end
    end
  end



  if (KL0EM001.YCTCD == YCRTBL.YCTCD1[CLXYCRX]
   || KL0EM001.YCTCD == YCRTBL.YCTCD2[CLXYCRX]
   || KL0EM001.YCTCD == YCRTBL.YCTCD3[CLXYCRX]
   || KL0EM001.YCTCD == YCRTBL.YCTCD4[CLXYCRX])
     /* next sentence*/
  else
    converseLib.validationFailed(32);
                                   /* claim reason not valid for claim type*/
    set KL0EM001.YCRCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (KL0EM001.YCTCD == "DFO"
   && KL0EM001.YCRCD == "DFO")
     /* next sentence*/
  else
    if (YCTTBL.YCTNILF[CLXYCTX] == "Y") /* If international claim*/
      if (KL0EM001.YCRCD == "DEF") /* if already defective reason*/
         /* next sentence*/
      else
        converseLib.validationFailed(125); /* claim reason must be defective*/
        set KL0EM001.YCRCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        KL0EM001.YCRSDESC = " "; /* blank out description*/
        return;
      end
    end
  end

  if (KL0EM001.YCTCD == "SCO" /* if an sco claim type*/
   && KL0EM001.YCRCD != "SCO") /* if already sco reason*/
    converseLib.validationFailed(30); /* claim reason must be sco*/
    set KL0EM001.YCRCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    KL0EM001.YCRSDESC = " "; /* blank out description*/
    return;
  end

  if (YCTTBL.YCTADJF[CLXYCTX] == "Y"
   && YCTTBL.YCTRQRSN[CLXYCTX] == "Y"
   && YCRTBL.YCRALWPR[CLXYCRX] != "Y")
    converseLib.validationFailed(118); /* reason must be product related*/
    CLXREC.CLXERRF = "Y";
    set KL0EM001.YCRCD cursor, modified, bold;
    return;
  end

   /* if map ycrcd is different then may affect the rps flag on cljrec*/
  if (KL0EM001.YCRCD != CL0EW02.YCRCD
   && CL0EW02.YCRCD != " ") /* if claim reason changed*/
    KL0ES-CHECK-YCRCD(); /* go check for rps allowability*/
  end

  CL0EW01.CL0EWVRF = "Y"; /* set valid-reason-flag to 'yes'*/

end // end KL0ES50

// edit the customer claim number
Function KL0ES51()
   /* ************************************************************/
   /* *      edit the customer claim number                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES51"; /* set current process name*/


  if (KL0EM001.YCTCD == "NIL" /* if an international claim*/
   && KL0EM001.ARCCCREF == " ") /* and no cust clm nbr entered*/
    CL0EW01.CL0EWDCC = "Y"; /* default cust clm nbr*/
    CL0EW01.CL0EWAEF = "Y"; /* set a/r entered flag to 'yes'*/
  else
    if (KL0EM001.ARCCCREF is modified)
      CL0EW01.CL0EWAEF = "Y"; /* set a/r entered flag to 'yes'*/
    end
  end




end // end KL0ES51

// edit the stat chngd by userid
Function KL0ES52()
   /* ************************************************************/
   /* *      edit the status changed by userid                  **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES52"; /* set current process name*/

  if (CLWREC.CLWACTIV == "A") /* if adding claim*/
    KL0EM001.CLASCGBY = COMMAREA.CAUSERID;
  end

  if (KL0EM001.YCSCD != CL0EW03.YCSCD) /* if claim status was changed*/
    KL0EM001.CLASCGBY = COMMAREA.CAUSERID;
  end


  CL0EW02.CLASCGBY = KL0EM001.CLASCGBY;





end // end KL0ES52

// edit the purchase order number
Function KL0ES53()
   /* ************************************************************/
   /* *      edit the purchase order number                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES53"; /* set current process name*/


  if (CLXREC.CLXORDFD == "Y" /* if order was found*/
   || CLXREC.CLXINVFD == "Y") /* or invoice was found*/
     /* IF CL0EM001.OP1CUPO EQ ' ';*/
    KL0EM001.OP1CUPO = IVAREC.OP1CUPO;
     /* END ;*/
    if (KL0EM001.OP1CUPO == IVAREC.OP1CUPO)
      /* next sentence*/
    else
      converseLib.validationFailed(117); /* po number must match invoice*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.OP1CUPO cursor, modified, bold;
      return;
    end
  end


  CL0EW02.OP1CUPO = KL0EM001.OP1CUPO;





end // end KL0ES53

// edit rtn auth for rts,cdr,def
Function KL0ES54()
   /* ************************************************************/
   /* *      edit return authorization for rts,cdr,def,rfl      **/
   /* *                                                         **/
   /* *  maintenance:                                           **/
   /* *  1. phase (B() enhancements to use proper claim types   **/
   /* *  2.   edit claim item qtys for > 0 when the claim type  **/
   /* *       is 'rts', 'def' or 'cdr'                          **/
   /* *  3. also, checks the worksheet enter flag since a pass- **/
   /* *     word is allowed                                     **/
   /* *  4. 3-18-91 CHELLM Allow Auth of ISP claims w/o special **/
   /* *     auth if the customer account is an Internal Comp.   **/
   /* *  5. 10-28-91 twatso add osd coding for implementation   **/
   /* *                     of osd in December 91               **/
   /* * 03-15-92 BCOURT Change CLYREC.YCTCD(11) = 'POP' value   **/
   /* *                 to test new field CL-ISP-POP-AUTH-FL = Y**/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES54"; /* set current process name*/

  if (KL0EM001.CLYATHPW == " ")
    converseLib.validationFailed(21); /* this is a required field*/
    CLXREC.CLXERRF = "Y";
    set KL0EM001.CLYATHPW cursor, modified, bold;
    return;
  end

   /* ********************************************************/
   /* * phase (B) enhancement:*/
   /* * 1. for options 2 or 6, check the sales and credit*/
   /* *    flags to allow authorization*/
   /* ********************************************************/

  if (CL0EW02.CLAWSENF == "N") /* is it worksheet entered?*/
    if (KL0EM001.YCTCD == "DEF"
     || KL0EM001.YCTCD == "CDR"
     || KL0EM001.YCTCD == "OSD") /* off shore defectives*/
      if (COMMAREA.CAALVL[1] == "Y"
       || COMMAREA.CACLVL[1] == "Y"
       || COMMAREA.CAALVL[3] == "Y"
       || COMMAREA.CACLVL[3] == "Y")
         /* next sentence*/
      else
        converseLib.validationFailed(35); /* not allow to authorize claim*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.CLYATHPW cursor, invisible;
        return;
      end
    else
      if (COMMAREA.CAALVL[1] == "Y"
       || COMMAREA.CACLVL[1] == "Y")
         /* next sentence*/
      else
        converseLib.validationFailed(35); /* not allow to authorize claim*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.CLYATHPW cursor, invisible;
        return;
      end
    end
  end

   /* ********************************************************/
   /* * phase (B) enhancement   ---  end  ---*/
   /* ********************************************************/

   /* check to see if userid is on the table*/

  CLYREC.XXXUSRID = KL0EM001.CLYATHPW;

  set SQLCA empty;
  call "IO2650" ("SB", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes}; /* validate authorization*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VCLHDR02.XGPCD == "01") /* if Point of Purchase Claim*/
      if (VCLHDR02.XIECD == "I" /* 3-18-91  if internal account*/
       && KUCREC.XAUCD == "61") /* and account is a COMP acct.*/
                                  /* allow authorization*/
        CL0EW02.CLYATHID = CLYREC.CLYATHID;

         /* need to format name*/
        SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
        SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
        SM4REC.XXXMDINT = CLYREC.XXXMDINT;
        XSIVSN6(); /* format name*/
        KL0EM001.CL0EWANM = IVZREC.IVZFNAME;
      else
        if (CLYREC.CL-ISP-POP-AUTH-FL == "Y") /* 3-15-92 new name*/
                                   /* and OK to authorize this claim type*/
          CL0EW02.CLYATHID = CLYREC.CLYATHID;

           /* need to format name*/
          SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
          SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
          SM4REC.XXXMDINT = CLYREC.XXXMDINT;
          XSIVSN6(); /* format name*/
          KL0EM001.CL0EWANM = IVZREC.IVZFNAME;
        else
          converseLib.validationFailed(685); /* not allow to authorize claim*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.CLYATHPW cursor, invisible;
          return;
        end
      end
    else
      CL0EW02.CLYATHID = CLYREC.CLYATHID;

       /* need to format name*/
      SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
      SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
      SM4REC.XXXMDINT = CLYREC.XXXMDINT;
      XSIVSN6(); /* format name*/
      KL0EM001.CL0EWANM = IVZREC.IVZFNAME;
    end
  else
    converseLib.validationFailed(34); /* id not on authorization table*/
    KL0EM001.CL0EWANM = " ";
    CLXREC.CLXERRF = "Y";
    set KL0EM001.CLYATHPW cursor, modified, invisible;
    return;
  end
end // end KL0ES54

// find if addl nike ivc's exist
Function KL0ES55()
   /* ************************************************************/
   /* *      determine if additional nike invoices exist        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES55"; /* set current process name*/


  CL0EW01.OP1CUOID = 0;
  CL0EW01.OP1NORID = 0;
  CL0EW01.CLBGLIND = " ";
  CL0EW01.CLBSRIND = " ";


  CLBREC.CLACLMNB = KL0EM001.CLACLMNB;
  CLBREC.CLBPMIVC = "*";


  set SQLCA empty; /* select the set of ivc records for this claim*/
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "FETCHING INVOICE SET";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX";
    TA1REC.TA1LOCAT[2] = "CL0ES55";
    XPCL010();
  end


  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0EM001.YITCD = " ";
      CLXREC.YITCD = " ";
      return;
    else
      TA1REC.TA1TBLKE = "FETCHING FIRST INVOICE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "CL0ES55";
      XPCL010();
    end
  end


  CL0EW01.CL0EWPIN = CLBREC.IV0IVCID; /* set ws primary invoice nbr*/
  KL0EM001.IV0IVCID = CLBREC.IV0IVCID;
  CL0EW01.IV0IVCID = CLBREC.IV0IVCID;
  CL0EW01.OP1CUOID = CLBREC.OP1CUOID;
  CL0EW01.OP1NORID = CLBREC.OP1NORID;
  CL0EW01.CLBGLIND = CLBREC.CLBGLIND;
  CL0EW01.CLBSRIND = CLBREC.CLBSRIND;
  KL0EM001.YITCD = CLBREC.YITCD;
  CLXREC.YITCD = CLBREC.YITCD;


  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* there was more than one*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if there was more than one*/
    if (CLBREC.YITCD == "D")
      KL0EM001.YITCD = "A"; /* addl dec*/
    else
      if (CLBREC.YITCD == "O")
        KL0EM001.YITCD = "M"; /* addl old ibm*/
      else
        if (CLBREC.YITCD == "I")
          KL0EM001.YITCD = "Y"; /* addl current ibm*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FETCHING SECOND INVOICE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "CL0ES55";
      XPCL010();
    end
  end

  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
                                   /* if there was more than one*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = "CLOSING CURSOR FOR CLIVX";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    TA1REC.TA1LOCAT[2] = "CL0ES55";
    XPCL010();
  end

  if (KL0EM001.IV0IVCID != 0)
    KL0ES95(); /* get previous-claims-on-ivc info*/
  end
end // end KL0ES55

// edit the ship warehouse code
Function KL0ES56()
   /* ************************************************************/
   /* *      edit the ship warehouse code                       **/
   /* *                                                         **/
   /* * 6-14-90 bcourt skip whse if g.p.c. = '00'               **/
   /* * 11-05-91 bcourt allow blank whse when invoice was       **/
   /* *                 direct shipped.                         **/
   /* * 06-15-94  sgorga  Removed code that allowed gpc = '00'  **/
   /* *                   to have a blank order type.           **/
   /* * 01-27-98  GDECKE  ACCEPT NEW WAREHOUSE CODE IF INVOICE  **/
   /* *                   HAD SPACES AND NEW VALUE IN WHSE TABLE**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES56"; /* set current process name*/


  if (KL0EM001.XWHCD == " ") /* if no whse code entered*/
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XWHCD = IVAREC.XWHCD;
    else
       /* next sentence*/
         /* IF YCTTBL.YCTRQWHS(CLXYCTX) = 'Y'  ;*/
           /* MOVE KUNREC.XWHCD TO CL0EM001.XWHCD;*/
         /* END ;*/
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
   /* ************************************************************/
   /* * GDECKE - 01-27-98 - ALLOW ENTRY OF A VALID WAREHOUSE IF **/
   /* *                     THE VALUE FROM THE INVOICE WAS BLANK**/
   /* ************************************************************/
      if (KL0EM001.XWHCD != "  "
       && IVAREC.XWHCD == "  ")
        CLAREC.XWHCD = KL0EM001.XWHCD;
      else
        KL0EM001.XWHCD = IVAREC.XWHCD;
        if (KL0EM001.XWHCD == IVAREC.XWHCD)
          /* next sentence*/
        else
          converseLib.validationFailed(100); /* whse does not match invoices*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.XWHCD cursor, modified, bold;
          return;
        end
      end
    end
  end



  if (KL0EM001.XWHCD == " ") /* if no warehouse entered*/
    if (YCTTBL.YCTRQWHS[CLXYCTX] == "Y") /* and warehouse is required*/
       /* 11-5-91 add below --------------------------------*/
      if (CLXREC.CLXORDFD == "Y" /* whse from order/invoice?*/
       || CLXREC.CLXINVFD == "Y")
        if (IVAREC.XDSCD in XDSTBL.XDSCD /* was invoice direct shipped?*/
         && XDSTBL.XDSWHSEF[sysVar.arrayIndex] == "N") /* then no whse req'd.*/
           /* next sentence*/
        else
          converseLib.validationFailed(99); /* warehouse is required*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.XWHCD cursor, modified, bold;
        end
      else
        /* 11-5-91 add above ---------------------------------*/
        converseLib.validationFailed(99); /* warehouse is required*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XWHCD cursor, modified, bold;
      end
    end
    return;
  end


  if (KL0EM001.XWHCD != " ") /* if warehouse is entered*/
    if (KL0EM001.XWHCD in XWHTBL.XWHCD) /* if warehouse is valid*/
      KL0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      CL0EW02.XWHCD = KL0EM001.XWHCD;
    else
      converseLib.validationFailed(400); /* invalid warehouse code*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      set KL0EM001.XWHCD cursor, modified, bold;
      return;
    end
  else
    KL0EM001.XWHCD = " ";
    KL0EM001.XWHABRV = " ";
    CL0EW02.XWHCD = " ";
  end
end // end KL0ES56

// edit the nike order number
Function KL0ES57()
   /* ************************************************************/
   /* *      edit the nike order number                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES57"; /* set current process name*/


  CLXREC.CLXINVFD = "N"; /* invoice found*/
  CLXREC.CLXORDFD = "N"; /* order found*/
  CLXREC.CLXWRTIV = "N"; /* need to write invoice record*/
  CLXREC.CLXWRTOR = "N"; /* need to write order record*/


   /* 060989 copy W02 moves from bottom*/
       /* (need to save zero values if user erased invoice/order)*/
    /* save invoice number & part char for updating claim header*/
  CL0EW02.IV0IVCID = KL0EM001.IV0IVCID;
  CLXREC.CLXORDIV = KL0EM001.IV0IVCID;
  CL0EW02.IV0PARTN = CLXREC.CLXPARTN;


  if (YCTTBL.YCTCDRF[CLXYCTX] == "Y")
    if (KL0EM001.OP1CUOID != 0
     || KL0EM001.OP1NORID != 0)
      converseLib.validationFailed(90); /* order not allowed for cdr*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.OP1CUOID cursor, modified, bold;
      set KL0EM001.OP1NORID modified, bold;
    end
    if (KL0EM001.IV0IVCID != 0)
      converseLib.validationFailed(90); /* invoice not allowed for cdr*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.IV0IVCID cursor, modified, bold;
    end
    return; /* exit if error or zero ivc/ord*/
  end


  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y") /* if management special arrangement*/
    if (KL0EM001.IV0IVCID == 0
     && KL0EM001.OP1CUOID == 0)
      return;
    else
      /* next sentence...ivc/ord not required*/
    end
  else
    if (KL0EM001.IV0IVCID == 0
     && KL0EM001.OP1CUOID == 0)
      if (YCTTBL.YCTRQIVC[CLXYCTX] == "Y"
       || YCTTBL.YCTRQORD[CLXYCTX] == "Y")
        converseLib.validationFailed(124); /* ivc and/or ord is required*/
        set KL0EM001.IV0IVCID cursor, modified, bold;
        set KL0EM001.OP1CUOID modified, bold;
        set KL0EM001.OP1NORID modified, bold;
        CLXREC.CLXERRF = "Y";
      end
      return; /* exit if error or zero ivc/ord*/
    end
  end


  if (KL0EM001.OP1CUOID != 0)
    if (KL0EM001.OP1NORID == 0)
      converseLib.validationFailed(93); /* nike sub-order must be > 0*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.OP1NORID cursor, modified, bold;
      return;
    end
  end


  CLXREC.IV0IVCID = KL0EM001.IV0IVCID;
  CLXREC.OP1CUOID = KL0EM001.OP1CUOID;
  CLXREC.OP1NORID = KL0EM001.OP1NORID;
  if (KL0EM001.YITCD == "I" /* ibm*/
   || KL0EM001.YITCD == "D" /* dec*/
   || KL0EM001.YITCD == "O") /* old ibm*/
    CLXREC.YITCD = KL0EM001.YITCD;
  else
    if (KL0EM001.YITCD == " ") /* default to ibm*/
      CLXREC.YITCD = "I";
    else
      if (KL0EM001.YITCD == "Y") /* addl ibm*/
        CLXREC.YITCD = "I";
      else
        if (KL0EM001.YITCD == "M") /* addl old ibm*/
          CLXREC.YITCD = "O";
        else
          if (KL0EM001.YITCD == "A") /* addl dec*/
            CLXREC.YITCD = "D";
          end
        end
      end
    end
  end


   /* PERFORM XPCL007;4-11-88 drop, renamed*/
  KL0ESIO(); /* 4-11-88 rename, search invoice &*/
                                   /* order*/


  if (CLXREC.CLXERRF == "Y")
    if (converseVar.validationMsgNum == 115) /* order # doesnt match invoice*/
      set KL0EM001.IV0IVCID cursor, modified, bold;
      set KL0EM001.OP1CUOID modified, bold;
      set KL0EM001.OP1NORID modified, bold;
    end
    if (converseVar.validationMsgNum == 129 /* yitcd is invalid*/
     || converseVar.validationMsgNum == 130 
     || converseVar.validationMsgNum == 131 
     || converseVar.validationMsgNum == 132)
      set KL0EM001.IV0IVCID cursor, modified, bold;
      set KL0EM001.OP1CUOID modified, bold;
      set KL0EM001.OP1NORID modified, bold;
      set KL0EM001.YITCD modified, bold;
    end
    return; /* always exit since CLXERRF = 'Y'*/
  end


  if (KL0EM001.IV0IVCID == 0) /* use order to get invoice*/
    if (CLXREC.CLXORDFD == "Y")
      KL0EM001.IV0IVCID = CLXREC.IV0IVCID;
      CLXREC.CLXINVFD = "Y";
    end
  end

  if (KL0EM001.OP1CUOID == 0) /* use invoice to get order*/
    if (CLXREC.CLXINVFD == "Y")
      KL0EM001.OP1CUOID = CLXREC.OP1CUOID;
      KL0EM001.OP1NORID = CLXREC.OP1NORID;
      CLXREC.CLXORDFD = "Y"; /* 060989 set order found flag*/
    end
  end


  if (YCTTBL.YCTRQORD[CLXYCTX] == "Y"
   /* AND CL0EM001.YCRCD NE 'M01'   ; AND NOT MANANGEMENT SPECIAL*/
   && YCRTBL.YCRSPARN[CLXYCRX] != "Y") /* not mgmt special arrngmnt*/
    if (KL0EM001.OP1CUOID == 0)
      converseLib.validationFailed(122); /* order is required*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.OP1CUOID cursor, modified, bold;
      set KL0EM001.OP1NORID modified, bold;
    end
  end


  if (YCTTBL.YCTRQIVC[CLXYCTX] == "Y"
   /* AND CL0EM001.YCRCD NE 'M01'; chg 060989-not mgmt spcl arngmt*/
   && YCRTBL.YCRSPARN[CLXYCRX] != "Y") /* not mgmt special arrngmnt*/
    if (KL0EM001.IV0IVCID == 0)
      converseLib.validationFailed(123); /* invoice is required*/
      CLXREC.CLXERRF = "Y";
      set KL0EM001.IV0IVCID cursor, modified, bold;
    end
  end

  if (KL0EM001.IV0IVCID != 0)
    KL0ES95(); /* set prev claims on invoice ind*/
  end

    /* save invoice number and part char for updating*/
    /* claim header*/

  CL0EW02.IV0IVCID = KL0EM001.IV0IVCID;
  CLXREC.CLXORDIV = KL0EM001.IV0IVCID;
  CL0EW02.IV0PARTN = CLXREC.CLXPARTN;


end // end KL0ES57

// edit the terms code
Function KL0ES58()
   /* ************************************************************/
   /* *      edit the terms code                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
   /* * 10/23/97 RCHAUV REASON CODE CONVERSION - REMOVE S10   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES58"; /* set current process name*/


  if (KL0EM001.XPTCD == " ") /* if no terms code entered*/
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XPTCD = IVAREC.XPTCD;
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XPTCD = IVAREC.XPTCD;
      if (KL0EM001.XPTCD == IVAREC.XPTCD)
          /* next sentence*/
      else
        converseLib.validationFailed(142); /* terms code doesnt match ivc*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XPTCD cursor, modified, bold;
        return;
      end
    end
  end



  if (KL0EM001.XPTCD != " ") /* if terms were entered*/
    if (KL0EM001.XPTCD in XPTTBL.XPTCD) /* if terms code is in table*/
      KL0EM001.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      CL0EW02.XPTCD = KL0EM001.XPTCD;
    else
      converseLib.validationFailed(94); /* invalid terms code*/
      set KL0EM001.XPTCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      return;
    end
  else
    KL0EM001.XPTCD = " ";
    KL0EM001.XPTABRV = " ";
    CL0EW02.XPTCD = " ";
  end




end // end KL0ES58

// edit the sales program code
Function KL0ES59()
   /* ************************************************************/
   /* *      edit the sales program code                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *  10/29/97 RCHAUV   REASON CODE CONVERSION - REMOVE S10  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES59"; /* set current process name*/


  if (KL0EM001.SP1ID == " ") /* if no sales program*/
    if (CLXREC.CLXORDFD == "Y" /* but an invoice was entered*/
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.SP1ID = IVAREC.SP1ID; /* default invoice sales pgm*/
    end
  end

  if (KL0EM001.YCRCD == "S10")
     /* next sentence...doesnt have to match for s10 reason*/
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.SP1ID = IVAREC.SP1ID;
      if (KL0EM001.SP1ID == IVAREC.SP1ID)
        /* next sentence*/
      else
        converseLib.validationFailed(143); /* sales prog doesnt match ivc*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.SP1ID cursor, modified, bold;
        return;
      end
    end
  end




  if (KL0EM001.SP1ID != " ")
    SP1REC.SP1ID = KL0EM001.SP1ID;
    set SQLCA empty;
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
                                   /* get sales program record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0EM001.SP1ABRV = SP1REC.SP1ABRV;
      CL0EW02.SP1ID = KL0EM001.SP1ID;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(95); /* invalid sales program*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an err*/
        set KL0EM001.SP1ID cursor, modified, bold;
        return;
      else
        TA1REC.TA1TBLKE = "GETTING SALES PROGRAM ABRV";
        XPCL010(); /* abend*/
      end
    end
  else
    KL0EM001.SP1ABRV = " ";
    KL0EM001.SP1ID = " ";
    CL0EW02.SP1ID = " ";
  end




end // end KL0ES59

// RESTRICT CLAIM REASON CHANGES
Function KL0ES5A()
   /* ************************************************************/
   /* *      restrict claim reason code changes                 **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. 01-14-92 created statement group. prevent reson code**/
   /* *     change if the claim has data not allowed for the new**/
   /* *     reason code.                                        **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES5A"; /* set current process name*/


    /* allow claim reason code to be changed (from management special*/
    /* arrangement to regular claim reason) when the 'allow' flags on*/
    /* the ycr table remain the same, or when the flag is changed to*/
    /* 'y', or when the flag is changed to 'n', but the restricted data*/
    /* is not on the claim.*/

  CL0EW01.CL0EW-ALW-CLM-RSN-CHNG = "Y"; /* INITIALIZE THE FLAG*/

   /* -----------------------------------------------------------------*/
   /* EDIT TRAFFIC FLAG - commented out 02/12/92 per t.luoto - gdecke*/
   /* -----------------------------------------------------------------*/


                                  /* IF YCRTBL.YCRALWTF(EZETST) =*/
                                   /* YCRTBL.YCRALWTF(CLXYCRX); /* IF NO*/
                                   /* CHANGE*/
   /* OR YCRTBL.YCRALWTF(CLXYCRX) = 'Y';   /* OR CHANGE TO 'Y', IT'S OKAY.*/
     /* ; /* NEXT SENTENCE*/
   /* ELSE;*/
                                  /* IF CLAREC.CLATFIND NE 'Y';     /* IF*/
                                   /* TRAFFIC INDICATOR IS 'N' IT'S OK.*/
     /* ; /* NEXT SENTENCE*/
   /* ELSE;*/
     /* KL0ES5E;                 /* GET TRAFFIC RECORD*/
                                  /* IF CLEREC.YPSCD EQ '   '; /* IF NOT*/
                                   /* FOUND OR STATUS IS BLANK OR 'CAN'*/
       /* OR CLEREC.YPSCD EQ 'CAN'; /* THEN IT IS OKAY TO CHANGE REASON*/
       /* ; /* NEXT SENTENCE*/
     /* ELSE;*/
                                  /* MOVE 'N' TO*/
                                   /* CL0EW01.CL0EW-ALW-CLM-RSN-CHNG; /**/
                                   /* STOP REASON CHANGE*/
       /* MOVE 707 TO EZEMNO;      /* cant change claim reason*/
       /* SET KL0EM001.YCRCD CURSOR,MODIFIED,BRIGHT;*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;*/
       /* EZERTN;*/
     /* END;*/
   /* END;*/
   /* END;*/


   /* -----------------------------------------------------------------*/
   /* EDIT ALLOW-GL FLAG - commented out 02/12/92 per t.luoto - gdecke*/
   /* -----------------------------------------------------------------*/

   /* F YCRTBL.YCRALWGL(EZETST) = YCRTBL.YCRALWGL(CLXYCRX); /* IF NO CHANGE*/
   /* OR YCRTBL.YCRALWGL(CLXYCRX) = 'Y';   /* OR CHANGE TO 'Y', IT'S OKAY.*/
     /* ; /* NEXT SENTENCE*/
   /* LSE;*/
   /* KL0ES5B;*/
                                  /* IF CLIREC.ZZZCHGCT = 0;        /* IF*/
                                   /* NO GL RECORDS FOUND - IT'S OKAY.*/
     /* ; /* NEXT SENTENCE*/
   /* ELSE;*/
                                  /* MOVE 'N' TO*/
                                   /* CL0EW01.CL0EW-ALW-CLM-RSN-CHNG; /**/
                                   /* DISALLOW REASON CHANGE*/
     /* MOVE 360 TO EZEMNO;      /* cant change claim reason*/
     /* SET KL0EM001.YCRCD CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
     /* EZERTN;*/
   /* END;*/
   /* ND;*/


   /* -----------------------------------------------------------------*/
   /* EDIT ALLOW-PRODUCT FLAG-COMMENT OUT 02/12/92 PER T.LUOTO - GDECKE*/
   /* -----------------------------------------------------------------*/

   /* SET CLPREC EMPTY;       /* CLEAR NOW FOR DEFECTIVE COUNT EDIT*/
   /* SET CLNREC EMPTY;       /* CLEAR NOW FOR RTS COUNT EDIT*/
   /* SET CLRREC EMPTY;       /* CLEAR NOW FOR ADJ COUNT EDIT*/
   /* SET CLJREC EMPTY;       /* CLEAR NOW FOR NIKE-PAY-FRGT EDIT LATER*/
                            /* AND FOR TOTAL AUTHORIZID QUANTITY EDIT*/
                                  /* IF YCRTBL.YCRALWPR(EZETST) =*/
                                   /* YCRTBL.YCRALWPR(CLXYCRX); /* IF NO*/
                                   /* CHANGE*/
                                  /* OR YCRTBL.YCRALWPR(CLXYCRX) = 'Y';*/
                                   /* /* OR CHANGE TO 'Y', IT'S OKAY.*/
     /* ; /* NEXT SENTENCE*/
   /* ELSE;*/
                                  /* KL0ES5C;             /* GET*/
                                   /* DEFECTIVE, RTS, ADJUSTMENT PRODUCT*/
                                   /* COUNTS*/
    /* KL0ES5D;             /* GET RETURN AUTHORIZATION LINE*/
    /* IF CLPREC.ZZZCHGCT = 0;     /* IF NO DEFECTIVE PRODUCTS*/
      /* AND CLNREC.ZZZCHGCT = 0;     /* AND NO RTS PRODUCTS*/
      /* AND CLRREC.ZZZCHGCT = 0;     /* AND NO ADJ PRODUCTDS*/
                                  /* AND CLJREC.CLJTATHQ = 0;     /* AND*/
                                   /* NO RETURN AUTH PRODUCTS - OKAY.*/
      /* ; /* NEXT SENTENCE*/
    /* ELSE;*/
                                  /* MOVE 'N' TO*/
                                   /* CL0EW01.CL0EW-ALW-CLM-RSN-CHNG; /**/
                                   /* DISALLOW REASON CHANGE*/
     /* MOVE 360 TO EZEMNO;      /* cant change claim reason*/
     /* SET KL0EM001.YCRCD CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
     /* EZERTN;*/
   /* END;*/
   /* END;*/


   /* -----------------------------------------------------------------*/
   /* EDIT NIKE-PAY-FREIGHT FLAG-- COMMENT OUT 2/12/92 NOT NEEDED*/
   /* TERRI LUOTO HAS SPECIFICATIONS THAT SAY THAT WHEN NIKE PAY*/
   /* FREIGHT IS IMPLEMENTED THE RA HEADER NIKE PAY FREIGHT FLAG*/
   /* WILL AUTOMATICALLY BY RESET TO 'N' IF CLM RSN TBL NPAY-FRGT='N'*/
   /* -----------------------------------------------------------------*/

   /* F YCRTBL.YCR-NPAY-FRGT-FL(EZETST) =*/
                      /* YCRTBL.YCR-NPAY-FRGT-FL(CLXYCRX); /* IF NO CHANGE*/
   /* OR YCRTBL.YCR-NPAY-FRGT-FL(CLXYCRX) = 'Y';   /* OR CHANGE TO 'Y',*/
     /* ; /* NEXT SENTENCE                  IT'S OKAY*/
   /* LSE;*/
   /* IF CLJREC.CLACLMNB = 0; /* IF VRAHDR01 NOT YET FETCHED*/
     /* KL0ES5D;           /* GET RETURN AUTHORIZATION LINE*/
     /* END;*/
   /* IF CLJREC.YCR-NPAY-FRGT-FL NE 'Y'; /* IF NIKE PAY FREIGHT = 'N'*/
     /* ; /* NEXT SENTENCE              IT'S OKAY*/
   /* ELSE;*/
                                  /* MOVE 'N' TO*/
                                   /* CL0EW01.CL0EW-ALW-CLM-RSN-CHNG; /**/
                                   /* DISALLOW REASON CHANGE*/
     /* MOVE 698 TO EZEMNO;      /* cant change claim reason*/
     /* SET KL0EM001.YCRCD CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
     /* EZERTN;*/
   /* END;*/
   /* ND;*/


   /* -----------------------------------------------------------------*/
   /* EDIT MANAGEMENT SPECIAL ARRANGEMENT FLAGS*/
   /* -----------------------------------------------------------------*/

  if (YCRTBL.YCRSPARN[sysVar.arrayIndex] != YCRTBL.YCRSPARN[CLXYCRX] /* IF NO CHANGE*/
   && VCLHDR02.IV0IVCID == 0                                         /* CLAIM REASON IS CHANGED AND*/
   && YCRTBL.YCRSPARN[sysVar.arrayIndex] == "Y"                      
   /* THERE IS NO INVOICE ID AND CHANGE*/
   && YCRTBL.YCRSPARN[CLXYCRX] == "N")                              
                                     /* FROM MGMT SPECIAL TO NON MGMT SPCL.*/
    if (CLJREC.CLACLMNB == 0) /* GET RA HEADER*/
      KL0ES5D();
    end
    if (CLPREC.CLACLMNB == 0) /* GET DEFECTIVE, RTS, ADJ PRODUCT*/
      KL0ES5C();
    end
    if (CLIREC.CLACLMNB == 0) /* GET GENERAL LEDGER LINES*/
      KL0ES5B();
    end
    if (CLIREC.ZZZCHGCT > 0
     || CLPREC.ZZZCHGCT > 0
     || CLNREC.ZZZCHGCT > 0
     || CLRREC.ZZZCHGCT > 0
     || CLJREC.CLJTATHQ > 0)
      CL0EW01.CL0EW-ALW-CLM-RSN-CHNG = "N"; /* SHOW ERR MESSAGE*/
      converseLib.validationFailed(706); /* cant change claim reason*/
      set KL0EM001.YCRCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end

end // end KL0ES5A

// CHECK FOR EXISTANCE OF GL LINE
Function KL0ES5B()
   /* ************************************************************/
   /* CHECK FOR EXISTANCE OF ANY GL LINES ON THE CLAIM       **/
   /* -----------------------------------------------------------**/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* CHANGE  DATE     PGMR     DESCRIPTION                      **/
   /* -----------------------------------------------------------**/
   /* #0    01/15/91  GDECKE   CREATED STATEMENT GROUP          **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES5B"; /* set current process name*/

   /* *************************************************************/
   /* SELECT LINES ON THE GL TABLE*/
   /* *************************************************************/

  CLIREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLIREC.CLHSEQNB = VCLHDR02.CLACSQNB;
  CLIREC.IV0IVCID = -1;
  CLIREC.CLICRDFL = "*";
  set SQLCA empty;
  set CL0EW05 empty;
  CL0EW05.CL0EWSQL = "SC"; /* count g/l's on claim*/
  call "IO1300" (CL0EW05, SQLCA, CLIREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW05.CL0EWIN1 >= 0)
    CLIREC.ZZZCHGCT = CL0EW05.CL0EWCN2;
  else
    CLIREC.ZZZCHGCT = 0;
  end

end // end KL0ES5B

// CHECK FOR ANY PRODUCTS ON CLM
Function KL0ES5C()
   /* ************************************************************/
   /* CHECK FOR EXISTANCE OF LINE ITEM LINES ON THE CLAIM    **/
   /* -----------------------------------------------------------**/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* CHANGE  DATE     PGMR     DESCRIPTION                      **/
   /* -----------------------------------------------------------**/
   /* #0    01/15/91  GDECKE   CREATED STATEMENT GROUP          **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES5C"; /* set current process name*/


   /* *************************************************************/
   /* GET DEFECTIVE ITEM LINES*/
   /* *************************************************************/

  CLPREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLPREC.CLHSEQNB = VCLHDR02.CLACSQNB;
  set SQLCA empty;
  set CL0EW06 empty;
  CL0EW06.CL0EWSQL = "SE"; /* count defectiv items on claim*/
  call "IO1350" (CL0EW06, SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CLPREC.ZZZCHGCT = 1;
                                   /* use '1' to indicate at least one row*/
  else
    CLPREC.ZZZCHGCT = 0; /* use '0' to indicate no clprec rows*/
  end


   /* *************************************************************/
   /* GET RETURN TO STOCK ITEM LINES*/
   /* *************************************************************/

  CLNREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLNREC.CLHSEQNB = VCLHDR02.CLACSQNB;
  set SQLCA empty;
  set CL0EW07 empty;
  CL0EW07.CL0EWSQL = "SE"; /* count rts items on claim*/
  call "IO1330" (CL0EW07, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CLNREC.ZZZCHGCT = 1;
                                   /* use '1' to indicate at least one row*/
  else
    CLNREC.ZZZCHGCT = 0; /* use '0' to indicate no rows exist*/
  end


   /* *************************************************************/
   /* GET ADJUSTMENT ITEM LINES*/
   /* *************************************************************/

  CLRREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLRREC.CLHSEQNB = VCLHDR02.CLACSQNB; /* 4-22-88*/
  set SQLCA empty;
  set CL0EW04 empty;
  CL0EW04.CL0EWSQL = "SC"; /* count adjs with > 0 qtys on claim*/
  call "IO1370" (CL0EW04, SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW04.CL0EWIN1 >= 0)
    CLRREC.ZZZCHGCT = CL0EW04.CL0EWCN1;
  else
    CLRREC.ZZZCHGCT = 0;
  end

end // end KL0ES5C

// CHECK RA HEADER QUANTITY > 0
Function KL0ES5D()
   /* ************************************************************/
   /* CHECK FOR EXISTANCE OF ANY PRODUCT ON RA HEADER        **/
   /* -----------------------------------------------------------**/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* CHANGE  DATE     PGMR     DESCRIPTION                      **/
   /* -----------------------------------------------------------**/
   /* #0    01/15/91  GDECKE   CREATED STATEMENT GROUP          **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES5D"; /* set current process name*/


    /* *************************************************************/
    /* *  SELECT THE RETURN AUTHORIZATION HEADER RECORD-VRAHDR01  **/
    /* *************************************************************/

  set CLJREC empty; /* Claim actual ra header record*/
  set SQLCA empty;
  CLJREC.CLACLMNB = VCLHDR02.CLACLMNB;

  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    XPCL010(); /* Perform abend routine for claims*/
  end

end // end KL0ES5D

// edit the order type code
Function KL0ES60()
   /* ************************************************************/
   /* *      edit the order type code                           **/
   /* *  maintenance                                            **/
   /* *  1. phase (B) enhancement: a) set nil order type accord-**/
   /* *     ing to gpc code, b) added terms code '0d' to all    **/
   /* *     hardcoded order types                               **/
   /* *  6-14-90 bcourt skip order type edits for new gpc '00'. **/
   /* * 11-21-91 gdecke default order type to 'F1' for major or **/
   /* *          strategic accounts.                            **/
   /* * 06-15-94 sgorga  Removed code that allowed GPC = '00'   **/
   /* *                  to have a blank order type.  Also,     **/
   /* *                  added code to default xob to 'F1' if   **/
   /* *                  'DAA' claim and gpc='00'.  FYI, DAA    **/
   /* *                  claims do not reference an invoice.    **/
   /* * 07-18-94         For GPC = '00', change xob default to  **/
   /* *                  'P1', per Gloria Fischer.              **/
   /* * 10/29/97 RCHAUV  reason code conversion - no more S10   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES60"; /* set current process name*/

  CL0EW01.CL0EWOTD = "N"; /* init order type default flag*/

  if (KL0EM001.YCTCD == "NBC") /* if nike bank claim defaule xobcd to*/
                                   /* 'p1'*/
    KL0EM001.XOBCD = "P1";
    set KL0EM001.XOBCD protect;
  end

  if (KL0EM001.YCTCD == "DAA" /* if dealer advertising & gpc=00,*/
   /* default xob*/
   && KL0EM001.XGPCD == "00")
    KL0EM001.XOBCD = "P1";
    set KL0EM001.XOBCD protect;
  end

  if (KL0EM001.XOBCD == " ") /* if no order type entered*/
    CL0EW01.CL0EWOTD = "Y"; /* order type will be defaulted*/
    if (CLXREC.CLXORDFD == "Y" /* if order was found*/
     || CLXREC.CLXINVFD == "Y") /* or invoice was found*/
      KL0EM001.XOBCD = IV0REC.XOBCD;
      CL0EW02.XOTCD = IVAREC.XOTCD;
    else
      if (KL0EM001.YCTCD == "NIL")
        if (KL0EM001.XGPCD == "02")
          CL0EW02.XOTCD = "30";
          KL0EM001.XOBCD = "P1";
          KL0EM001.XPTCD = "0D";
        end
        if (KL0EM001.XGPCD == "03")
          CL0EW02.XOTCD = "35";
          KL0EM001.XOBCD = "P1";
          KL0EM001.XPTCD = "0D";
        end
      else
        if (KUCREC.XAUCD == "21" /* default order type to 'F1' for major*/
         || KUCREC.XAUCD == "22") /* or strategic accounts.*/
          KL0ES6A();
        else
          if (KL0EM001.XGPCD == "01") /* if promo*/
            CL0EW02.XOTCD = "20";
            KL0EM001.XOBCD = "P1"; /* in-store promo prop*/
            KL0EM001.XPTCD = "0D";
          end
          if (KL0EM001.XGPCD == "02") /* if footwear*/
            CL0EW02.XOTCD = "04";
            KL0EM001.XOBCD = "P1"; /* footwear at-once prop*/
            KL0EM001.XPTCD = "0D";
          end
          if (KL0EM001.XGPCD == "03") /* if apparel*/
            CL0EW02.XOTCD = "05";
            KL0EM001.XOBCD = "P1"; /* apparel at-once prop*/
            KL0EM001.XPTCD = "0D";
          end
          if (KL0EM001.XGPCD == "04") /* if promo*/
            CL0EW02.XOTCD = "21";
            KL0EM001.XOBCD = "P1"; /* in-store promo prop*/
            KL0EM001.XPTCD = "0D";
          end
          if (KL0EM001.XGPCD == "07") /* if posters*/
            CL0EW02.XOTCD = "19";
            KL0EM001.XOBCD = "P1"; /* posters prop*/
            KL0EM001.XPTCD = "0D";
          end
          /* gpc code '08' not active as of 08-08-89 -- gdecke*/
             /* IF CL0EM001.XGPCD = '08'  ; if point-of-purchase*/
               /* MOVE '22' TO CL0EW02.XOTCD;*/
               /* MOVE 'P1' TO CL0EM001.XOBCD    ; point-of-purchase pr*/
               /* MOVE '0D' TO CL0EM001.XPTCD;*/
             /* END ;*/
          if (KL0EM001.XGPCD == "09")
            CL0EW02.XOTCD = "70";
            KL0EM001.XOBCD = "P1";
            KL0EM001.XPTCD = "0D";
          end
        end
      end
    end
  end


  if (KL0EM001.XOBCD == " ") /* if no order type entered*/
    converseLib.validationFailed(133); /* order type is required*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0EM001.XOBCD cursor, modified, bold;
    return;
  end

   /* add below 4-11-88*/
   /* IF CL0EW01.CL0EWCHI EQ 'Y'      ; if invc changed*/
    /* IF CL0EM001.XOBCD NE IV0REC.XOBCD    ; and map o/t ne ivc*/
      /* MOVE "Warning-New Invoice has Order Type " ;*/
                                  /* TO CL0EW01.CL0EWOT1;*/
      /* MOVE IV0REC.XOBCD TO CL0EW01.CL0EWOT2; build message*/
      /* MOVE ", different than Claim Order Type "*/
                                  /* TO CL0EW01.CL0EWOT3;*/
      /* MOVE CL0EM001.XOBCD TO CL0EW01.CL0EWOT4; build message*/
      /* MOVE CL0EW01.CL0EWOTM TO CLXREC.CLXMSG; new ivc o/t ne c*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* SET CL0EM001.XOBCD CURSOR,MODIFIED,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
   /* add above 4-11-88*/


  if (KL0EM001.XOBCD != " ")
    if (KL0EM001.XOBCD in XOBTBL.XOBCD)
                                   /* if order type code is in table*/
      KL0EM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
      CL0EW02.XOBCD = KL0EM001.XOBCD; /* and xob fields on clm hdr*/
    else
      converseLib.validationFailed(96); /* invalid order type*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL0EM001.XOBCD cursor, modified, bold;
      return;
    end
  else
    converseLib.validationFailed(133); /* order type is required*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0EM001.XOBCD cursor, modified, bold;
    return;
      /* MOVE ' ' TO CL0EM001.XOBCD; changed 12/88*/
      /* MOVE ' ' TO CL0EM001.XOTABRV;*/
      /* MOVE ' ' TO CL0EW02.XOTCD; move spaces to both xot and xob*/
      /* MOVE ' ' TO CL0EW02.XOBCD; for phase a of 'brands' project*/
  end


  if (KL0EM001.IV0IVCID != 0
  ) /* next sentence*/
  else
    KL0ES68(); /* edit order type based on gpc code*/
  end

  if (CL0EW02.XOBCD == " ")
    converseLib.validationFailed(133); /* order type is required*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0EM001.XOBCD cursor, modified, bold;
    return;
  end


end // end KL0ES60

// edit the order class code
Function KL0ES61()
   /* ************************************************************/
   /* *      edit the order class code                          **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES61"; /* set current process name*/


  if (KL0EM001.XOCCD == " ") /* if no terms code entered*/
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XOCCD = IVAREC.XOCCD;
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      KL0EM001.XOCCD = IVAREC.XOCCD;
      if (KL0EM001.XOCCD == IVAREC.XOCCD)
        /* next sentence*/
      else
        converseLib.validationFailed(141); /* order class doesnt match ivc*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XOCCD cursor, modified, bold;
        return;
      end
    end
  end



  if (KL0EM001.XOCCD != " ")
    if (KL0EM001.XOCCD in XOCTBL.XOCCD) /* if ord class code in table*/
      KL0EM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
      CL0EW02.XOCCD = KL0EM001.XOCCD;
    else
      converseLib.validationFailed(97); /* invalid order class code*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL0EM001.XOCCD cursor, modified, bold;
      return;
    end
  else
    KL0EM001.XOCCD = " ";
    CL0EW02.XOCCD = " ";
    KL0EM001.XOCABRV = " ";
  end



end // end KL0ES61

// edit the a/r reference number
Function KL0ES62()
   /* ************************************************************/
   /* *      edit the a/r reference number                      **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES62"; /* set current process name*/


  CL0EW01.CL0EWAEF = "Y"; /* set a/r entered flag to 'yes'*/


end // end KL0ES62

// find if addl a/r ref nbr exist
Function KL0ES63()
   /* ************************************************************/
   /* *  determine if additional a/r reference numbers exist    **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES63"; /* set current process name*/


  set CLCREC empty;
  CL0EW01.ARCREFNB = " ";
  CL0EW01.ARCCCREF = " ";
  KL0EM001.CL0EWACF = "N"; /* set addl cust claim xref flag*/
  KL0EM001.CL0EWAAF = "N"; /* set addl a/r xref flag*/


  CLCREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLCREC.CLCPMAR = "*";


  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of ar records for this claim*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "FETCHING CLF RECORD SET";
    XPCL010();
  end


  set SQLCA empty;
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no first record found*/
      KL0EM001.CL0EWACF = "N";
      KL0EM001.CL0EWAAF = "N";
      KL0EM001.YASCD = " ";
      return;
    else
      TA1REC.TA1TBLKE = "FETCHING FIRST CLF RECORD";
      XPCL010();
    end
  end

  CL0EW01.CL0EWAAC = 0; /* zero addl a/r ref nbr counter*/
  CL0EW01.CL0EWACC = 0; /* zero addl cust clm nbr counter*/
  CL0EW01.CL0EWCNT = 1; /* initialize record counter*/
  CL0EW01.CL0EWDON = "N"; /* init done-flag*/

  while (CL0EW01.CL0EWDON == "N") /* while not done*/
    if (CLCREC.ARCREFNB != " ")
      if (CL0EW01.ARCREFNB == " ")
        CL0EW01.ARCREFNB = CLCREC.ARCREFNB;
        KL0EM001.ARCREFNB = CLCREC.ARCREFNB;
        CL0EW01.CL0EWAAC = CL0EW01.CL0EWAAC + 1;
      else
             /* IF CLCREC.ARCREFNB NE CL0EW01.ARCREFNB;*/
        CL0EW01.CL0EWAAC = CL0EW01.CL0EWAAC + 1;
             /* END ;*/
      end
    end
    if (CLCREC.ARCCCREF != " ")
      if (CL0EW01.ARCCCREF == " ")
        CL0EW01.ARCCCREF = CLCREC.ARCCCREF;
        KL0EM001.ARCCCREF = CLCREC.ARCCCREF;
        CL0EW01.CL0EWACC = CL0EW01.CL0EWACC + 1;
      else
        if (CLCREC.ARCCCREF != CL0EW01.ARCCCREF)
          CL0EW01.CL0EWACC = CL0EW01.CL0EWACC + 1;
        end
      end
    end
    if (CLCREC.YASCD == "O" /* if status is open*/
     && CLCREC.ARCREFNB != " ")
      KL0EM001.YASCD = CLCREC.YASCD;
    end
    set SQLCA empty;
    call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* get the next xref record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and, if good return, determine*/
      CL0EW01.CL0EWCNT = CL0EW01.CL0EWCNT + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0EW01.CL0EWDON = "Y"; /* we're done*/
      else
        TA1REC.TA1TBLKE = "FETCHING NEXT CLF RECORD";
        XPCL010();
      end
    end
  end

  set SQLCA empty;
  call "IO1170" ("C3", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/


  if (CL0EW01.ARCREFNB != " ") /* if a/r ref nbr was found*/
    if (CL0EW01.CL0EWAAC > 1) /* and there was multiple records*/
      KL0EM001.CL0EWAAF = "Y"; /* set additional recs flag*/
    end
    if (KL0EM001.YASCD == " ") /* if no open a/r ref nbrs found*/
      KL0EM001.YASCD = "C"; /* were open, set status closed*/
    end
  end


  if (CL0EW01.ARCCCREF != " ") /* if a/r ref nbr was found*/
    if (CL0EW01.CL0EWACC > 1)
                                   /* and there were multiple cust clm recs*/
      KL0EM001.CL0EWACF = "Y"; /* set additional recs flag*/
    end
  end








end // end KL0ES63

// edit the a/r status code
Function KL0ES64()
   /* ************************************************************/
   /* *      edit the a/r status code                           **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  if (KL0EM001.YASCD == " ") /* if no status entered*/
    if (KL0EM001.ARCREFNB != " ") /* if a/r ref nbr was entered*/
      KL0EM001.YASCD = "O"; /* a/r status defaults to 'o'*/
    end
  end



  if (KL0EM001.YASCD != " ") /* if a/r status was entered*/
    if (KL0EM001.YASCD in YASTBL.YASCD)
                                   /* if a/r status code is in table*/
      KL0EM001.YASDESC = YASTBL.YASDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(136); /* invalid a/r status code*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL0EM001.YASCD cursor, modified, bold;
      return;
    end
  else
    KL0EM001.YASCD = " ";
    KL0EM001.YASDESC = " ";
  end



end // end KL0ES64

// expand the rtn auth id
Function KL0ES65()
   /* ************************************************************/
   /* *      expand the return authorization id                 **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) enhancement: checking work sheet entered  **/
   /* *     flag to set the user pass word                      **/
   /* *  2. 12-6-89 chellm moved the code that formats the auth **/
   /* *             by name to new PROC CL0E117 and added code  **/
   /* *             to format Prev Auth Name also in CL0E117.   **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES65"; /* set current process name*/




  if (VCLHDR02.CLAWSENF == "Y") /* phase (B) enhancement*/
    if (VCLHDR02.CLYATHID != 0)
      set KL0EM001.CL0EML10 skip, invisible; /* begin (12-6-89)*/
      set KL0EM001.CL0EWPNM skip, invisible;
      CLYREC.CLYATHID = VCLHDR02.CLYATHID;

      KL0E117();

      KL0EM001.CL0EWANM = IVZREC.IVZFNAME;

    else
      if (VCLHDR02.CLAPRATH != 0)
        set KL0EM001.CL0EML10 initialAttributes;
        set KL0EM001.CL0EWPNM initialAttributes;
        CLYREC.CLYATHID = VCLHDR02.CLAPRATH;

        KL0E117();

        KL0EM001.CL0EWPNM = IVZREC.IVZFNAME;

      end
    end /* (end 12-6-89)*/
  end

end // end KL0ES65

// edit the exceptions flag
Function KL0ES66()
   /* ************************************************************/
   /* *      edit the exceptions flag                           **/
   /* *  maintenance                                            **/
   /* *  -----------                                            **/
   /* *  1. phase (B) using the new exception flag to process   **/
   /* *     exceptions                                          **/
   /* *                                                         **/
   /* ************************************************************/


  if (VCLHDR02.CLAXCIND == "N"
   || VCLHDR02.CLAXCIND == " ")
    KL0EM001.CLAXCIND = " ";
    set KL0EM001.CLAXCIND skip, invisible;
    set KL0EM001.CL0EML8 skip, invisible;
  else
    KL0EM001.CLAXCIND = "Y";
  end



end // end KL0ES66

// edit additional records flags
Function KL0ES67()
   /* ************************************************************/
   /* *      edit the additional-records flags                  **/
   /* *                                                         **/
   /* 12-23-91 twatso added code to check for active yittbl row **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES67"; /* set current process name*/


  if (KL0EM001.CL0EWAAF == "Y")
    CLWREC.CLWADLAR = "Y"; /* set flag to flow to cl0h*/
  else
    if (KL0EM001.CL0EWAAF == "N"
     || KL0EM001.CL0EWAAF == " ")
       /* next sentence*/
    else
      converseLib.validationFailed(119);
      CLXREC.CLXERRF = "Y";
      set KL0EM001.CL0EWAAF cursor, modified, bold;
    end
  end

   /* added the code to use msg 128 1-6-92 tw.*/
  if (KL0EM001.YITCD == " ")
    CLXREC.CLXYITX = 3; /* same as 'i'*/
  else
    if (KL0EM001.YITCD in YITTBL.YITCD)
      if (YITTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
        if (KL0EM001.YITCD != "N")
          CLXREC.CLXYITX = sysVar.arrayIndex;
          /* next sentence*/
        end
      else
        converseLib.validationFailed(128);
        CLXREC.CLXERRF = "Y";
        set KL0EM001.YITCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(121);
      CLXREC.CLXERRF = "Y";
      set KL0EM001.YITCD cursor, modified, bold;
    end
  end


  if (KL0EM001.CL0EWACF == "Y"
   || KL0EM001.CL0EWACF == "N"
   || KL0EM001.CL0EWACF == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(120);
    CLXREC.CLXERRF = "Y";
    set KL0EM001.CL0EWACF cursor, modified, bold;
  end



end // end KL0ES67

// edit the O.T. based on gpc
Function KL0ES68()
   /* GET OP0CS32*/
   /* *********************************************************/
   /* get the appropriate profile code off the company record*/
   /* (kucrec), based on the order's gpc and need date*/
   /* *********************************************************/

    /* this routine is executed only when all other edits have*/
      /* been passed.*/
    /* kucrec carries four profile codes:  occurrence (1) and (2)*/
      /* for footwear, and (3) and (4) for apparel.*/
    /* if the company profile date = 0, the first profile code is*/
      /* always used.*/
    /* if the current system date is less than the company rec*/
      /* profile date, the first profile code is used.*/
    /* if the current system date is equal to or is greater than*/
      /* the company rec profile date, the second profile code is*/
      /* used.*/
   /* also cannot have a claim against 03 if a footwear only*/
   /* company and vice versa ---tw 050691*/
   /* *********************************************************/

   /* ----------------------- y2k in begin ----------------------*/
  CLXREC.XXXCDTE = VGVar.currentGregorianDate;
   /* ----------------------- y2k in end   ----------------------*/
   /* ----------------------- y2k out begin ---------------------*/
   /* MOVE EZEDTE TO CLXREC.XXXCYMD;    /* yymmdd*/
   /* MOVE 19 TO CLXREC.XXXCCC;         /* century*/
   /* ----------------------- y2k out end   ---------------------*/
   /* current date is in clxrec.xxxcdte*/

   /* also cannot have a claim against 03 if a footwear only*/
   /* company and vice versa ---tw 050691*/

  if (KL0EM001.XGPCD == "02")
    if (KUCREC.XOPCD[1] == "NOFT")
      if (KUCREC.KUCFPRDT == 0) /* cmpny rec ftwr prof date = 0*/
        set KL0EM001.XGPCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(692); /* company order type profile not*/
      else
        if (KUCREC.KUCFPRDT > 0 /* cmpny rec ftwr prof date = 0*/
         && KUCREC.XOPCD[2] == "NOFT")
          set KL0EM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(692); /* company order type profile not*/
        end /* set up for this gpc code*/
      end
    end

    if (KUCREC.KUCFPRDT == 0 /* cmpny rec ftwr prof date = 0*/
     || CLXREC.XXXCDTE < KUCREC.KUCFPRDT) /* curr dt lt cmpny rec date*/
      CL0EW01.XOPCD = KUCREC.XOPCD[1];
    else
      CL0EW01.XOPCD = KUCREC.XOPCD[2];
    end
  end

  if (KL0EM001.XGPCD == "03")
    if (KUCREC.XOPCD[3] == "NOAP")
      if (KUCREC.KUCAPRDT == 0) /* cmpny rec apprl prof date = 0*/
        set KL0EM001.XGPCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(692); /* company order type profile not*/
      else
        if (KUCREC.KUCAPRDT > 0 /* cmpny rec apprl prof date = 0*/
         && KUCREC.XOPCD[4] == "NOAP")
          set KL0EM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(692); /* company order type profile not*/
        end /* set up for this gpc code*/
      end
    end

    if (KUCREC.KUCAPRDT == 0 /* cmpny rec apprl prof date = 0*/
     || CLXREC.XXXCDTE < KUCREC.KUCAPRDT) /* curr dt lt cmpny rec date*/
      CL0EW01.XOPCD = KUCREC.XOPCD[3];
    else
      CL0EW01.XOPCD = KUCREC.XOPCD[4];
    end
  end

   /* *********************************************************/
   /* if the profile code used above is equal to spaces,*/
   /* no further validation is necessary--any order type is*/
   /* valid.  if the profile code is not equal to spaces,*/
   /* validate the order type entered for the claim and the*/
   /* profile found on the cmpny rec against the 'master'*/
   /* profile table (io2550).  can't use an order type that*/
   /* doesn't exist under the master table's profile id.*/
   /* *********************************************************/
  if (CL0EW01.XOPCD == " " /* no need for xop edit if no xop code*/
   || KL0EM001.YCTCD == "NBC") /* claim is nike bank.*/
    return;
  end

   /* get the xot code from the xvo table using xob,xgp,xdv,*/
   /* and xso from the map.*/
  if (KL0EM001.XOBCD != "  "
   && KL0EM001.XGPCD != "  "
   && KL0EM001.XDVCD != "  "
   && KL0EM001.XSOCD != "  ")
    KL0ES97();
  end

  set OPKREC empty;
  OPKREC.XOPCD = CL0EW01.XOPCD;
  OPKREC.XOTCD = CL0EW02.XOTCD;
  OPKREC.OPKOTEDT = CLXREC.XXXCDTE;

  call "IO2550" ("SE", SQLCA, OPKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1LOCAT[2] = "CL0ES68 ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VVALOT01";
                                   /* 6-14-90 fix name from 'votval'*/
      TA1REC.TA1TBLKE = "OPKREC  ";
      XPCL010();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        if (CL0EW01.CL0EWOTD == "N") /* order type was not defaulted*/
          CLXREC.CLXERRF = "Y";
          set KL0EM001.XOBCD cursor, modified, bold;
          converseLib.validationFailed(301); /* order type is not valid for customer*/
          return;
        else
                 /* MOVE ' ' TO OPKREC.XOTCD ; find all valid order types*/
                 /* CALL IO2550 'SS',SQLCA,OPKREC (NOMAPS,NONCSP;*/
                 /* CALL IO2550 'SN',SQLCA,OPKREC (NOMAPS,NONCSP;*/
                 /* WHILE SQLCA.SQLCODE EQ 0;*/
                   /* IF OPKREC.XOTCD IN XOTTBL.XOTCD;*/
                     /* AND XOTTBL.XOTPROPF(EZETST) EQ 'Y';*/
                     /* MOVE XOTTBL.XOTCD(EZETST) TO CL0EW02.XOTCD;*/
                     /* CL0ES98             ;        get xobcd and xobabr*/
                     /* CALL IO2550 'CS',SQLCA,OPKREC (NOMAPS,NONCSP;*/
                     /* EZERTN;*/
                   /* ELSE ;*/
                     /* CALL IO2550 'SN',SQLCA,OPKREC (NOMAPS,NONCSP;*/
                   /* END ;*/
                 /* END ;*/
                 /* CALL IO2550 'CS',SQLCA,OPKREC (NOMAPS,NONCSP;*/
          if (KL0EM001.XOBCD == "  ")
            CLXREC.CLXERRF = "Y";
            set KL0EM001.XOBCD cursor, modified, bold;
            converseLib.validationFailed(316); /* no default prop ord type-enter 1*/
            KL0EM001.XOBCD = " ";
            CL0EW02.XOBCD = " ";
            CL0EW02.XOTCD = " ";
            KL0EM001.XOBABRV = " ";
            return;
          end
        end
      end
    end
  end

end // end KL0ES68

// default ord-typ for major acct
Function KL0ES6A()
   /* ************************************************************/
   /* *      major/strategic account order type defaults        **/
   /* *  maintenance                                            **/
   /* * 11-21-91 GDECKE DEFAULT ORDER TYPE TO 'F1' FOR MAJOR OR **/
   /* *          STRATEGIC ACCOUNTS WHERE GPC = '02' OR '03'.   **/
   /* *          ALL OTHER ACCOUNT CLASSES HAVE STANDARD VALUES.**/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ES6A"; /* set current process name*/

  if (KL0EM001.XGPCD == "01") /* if promo*/
    CL0EW02.XOTCD = "20";
    KL0EM001.XOBCD = "P1"; /* in-store promo prop*/
    KL0EM001.XPTCD = "0D";
  else
    if (KL0EM001.XGPCD == "02") /* if footwear*/
      CL0EW02.XOTCD = "01";
      KL0EM001.XOBCD = "F1"; /* footwear at-once prop*/
      KL0EM001.XPTCD = "0D";
    else
      if (KL0EM001.XGPCD == "03") /* if apparel*/
        CL0EW02.XOTCD = "08";
        KL0EM001.XOBCD = "F1"; /* apparel at-once prop*/
        KL0EM001.XPTCD = "0D";
      else
        if (KL0EM001.XGPCD == "04") /* if promo*/
          CL0EW02.XOTCD = "21";
          KL0EM001.XOBCD = "P1"; /* in-store promo prop*/
          KL0EM001.XPTCD = "0D";
        else
          if (KL0EM001.XGPCD == "07") /* if posters*/
            CL0EW02.XOTCD = "19";
            KL0EM001.XOBCD = "P1"; /* posters prop*/
            KL0EM001.XPTCD = "0D";
          else
   /* gpc code '08' not active as of 08-08-89 -- gdecke*/
       /* IF CL0EM001.XGPCD = '08'  ; if point-of-purchase*/
         /* MOVE '22' TO CL0EW02.XOTCD;*/
         /* MOVE 'P1' TO CL0EM001.XOBCD    ; point-of-purchase pr*/
         /* MOVE '0D' TO CL0EM001.XPTCD;*/
       /* END ;*/
            if (KL0EM001.XGPCD == "09")
              CL0EW02.XOTCD = "70";
              KL0EM001.XOBCD = "P1";
              KL0EM001.XPTCD = "0D";
            end
          end
        end
      end
    end
  end




end // end KL0ES6A

// GET COMPANY RECORD,UPDT CLWREC
Function KL0ES70()
   /* **********************************************************/
   /* *  get company record, update clwrec with new value     **/
   /* *  of legal entity code and legal entity abbreviation   **/
   /* **********************************************************/
  set SQLCA empty;
  if (KUCREC.KUCCOID == 0) /* if no company id then set legal entity code*/
    KUCREC.XLECD = "  "; /* set output fields blank*/
    CLWREC.XLECD = "  "; /* legal entity*/
    CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
    KUCREC.XAUCD = "  "; /* account class code*/
  else
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.XLECD = "  "; /* set output fields blank*/
      CLWREC.XLECD = "  "; /* legal entity*/
      CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
      KUCREC.XAUCD = "  "; /* account class code*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if company not found- abend*/
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0ES70";
        XPCL010();
      else
        CLWREC.XLECD = KUCREC.XLECD;
        if (KUCREC.XLECD in XLETBL.XLECD)
          CLWREC.XLEABRV = XLETBL.XLEABRV[sysVar.arrayIndex];
        else
          CLWREC.XLEABRV = "NOTFND";
        end
      end
    end
  end

end // end KL0ES70

// WRITE ACTIVITY RECORD
Function KL0ES73()
   /* ***************************************************************/
   /* *         WRITE ACTIVITY RECORD - VDMACT01                   **/
   /* *  MAINTENANCE                                               **/
   /* *  -----------                                               **/
   /* *  01/29/93     JCAREY    CREATED MODULE TO WRITE ACTIVTY    **/
   /* *                         RECORD. THIS MODULE EXECUTED WHEN  **/
   /* *                         A CSW ADJ CLAIM STATUS CHANGED.    **/
   /* ****************************************************************/

  CLXREC.CLXCPROC = "KL0ES73"; /* set current process name*/

  set VDMACT01 empty;
  set SQLCA empty;

  VDMACT01.CLACLMNB = VCLHDR02.CLACLMNB; /* claim number*/
  VDMACT01.CLLRTNNB = 0; /* claim return*/
  VDMACT01.CL2ISNBR = 0;
  VDMACT01.XXXPGMNB = "KL0E";
  VDMACT01.XXXSTAT = "A";
  VDMACT01.ZZZSDT = TA2REC.TA2GRGGN; /* date of setup*/
  VDMACT01.ZZZSTM = TA2REC.TA2TIMHM; /* time of setup*/

  call "IO0870" ("A ", SQLCA, VDMACT01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* update ok*/
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING VDMACT01";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VDMACT01";
      TA1REC.TA1LOCAT[2] = "KL0ES73";
      XPCL010();
    end
  end

end // end KL0ES73

// validate special user id
Function KL0ES76()
   /* GET MHIST*/
   /* *************************************************************/

   /* Maintenance History:*/
   /* 06-07-91 CHELLM Add ISP claim authorization authority edit*/
   /* for ADJ claims without special sales office.*/
   /* 06-07-91 CHELLM Add ISP claim authorization authority edit*/
   /* 03-15-92 BCOURT Change CLYREC.YCTCD(11) = 'POP' value*/
   /* to use CL-ISP-POP-AUTH-FL = 'Y'.*/
   /* *************************************************************/


   /* *************************************************************/
   /* *  edit 'adj' and 'rts' claim types for special users      **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ES76"; /* Set current process name*/

   /* *********************************************************/
   /* edit for user and gpc code relationship*/
   /* *********************************************************/

    /* access dclaim.vathlm01*/
  KL0E080(); /* get user / gpc code row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* user can authorize any claim*/
    return;
  end

   /* *********************************************************/
   /* edit for user and sales office relationship*/
   /* *********************************************************/

  set CL5REC empty; /* claim sales office record(vclxso01)*/

  CL5REC.XXXUSRID = " ";
  CL5REC.XSOCD = CL0EW02.XSOCD;
  KL0E081(); /* get user / sls office row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if sales office requires special authorization*/
    KL0E082(); /* match user / sls office against kuyrec*/
    if (SQLCA.VAGen_SQLCODE == 0
     && KUYREC.XSOCD == KL0EM001.XSOCD) /* user has authorization*/
      KL0E083(); /* close aul exceptions 2-89*/
    else
      CL5REC.XXXUSRID = CL0EW01.XXXUSRID;
      CL5REC.XSOCD = CL0EW02.XSOCD;
      KL0E081(); /* get user / sls office row*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0E083(); /* close aul exceptions 2-89*/
      else

        if (CL0EW02.XGPCD == "01")
          if (CLYREC.CL-ISP-POP-AUTH-FL == "Y") /* 3-15-92 new name*/
             /* next sentence*/
          else
            converseLib.validationFailed(685); /* user not allowed to auth POP claim*/
            KL0EM001.YCSCD = "OIP"; /* reset status due to error*/
            CLXREC.CLXERRF = "Y";
            set KL0EM001.CLYATHPW cursor, modified, invisible;
            return;
          end
        end

        if (KL0EM001.YCTCD == "RTS")
          KL0EM001.YCSCD = "AIP";
                                   /* claim requires futher checking*/
        else
          if (KL0EM001.YCTCD == "ADJ")
            converseLib.validationFailed(572); /* user not allowed to auth special sales office*/
            KL0EM001.YCSCD = "OIP"; /* reset status due to error*/
            CLXREC.CLXERRF = "Y";
            set KL0EM001.CLYATHPW cursor, modified, invisible;
            return;
          end
        end
      end
    end
  else /* sales office doesn't require special authorization*/

    if (CL0EW02.XGPCD == "01")
      if (CLYREC.CL-ISP-POP-AUTH-FL == "Y") /* 3-15-92 new name*/
         /* next sentence*/
      else
        converseLib.validationFailed(685); /* user not allowed to auth POP claim*/
        KL0EM001.YCSCD = "OIP"; /* reset status due to error*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.CLYATHPW cursor, modified, invisible;
        return;
      end
    end

    if (KL0EM001.YCTCD == "RTS")
      KL0EM001.YCSCD = "AIP";
                                   /* claim requires futher checking*/
    end
  end


end // end KL0ES76

// set up screen cust svc rep fld
Function KL0ES80()
   /* *************************************************************/
   /* *      set up screen customer service rep field            **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 11-30-90  sgorga  Removed space in front of literal 'coop**/
   /* *          analyst' & 'cust svc rep' to line up on map.    **/
   /* * 01-07-91  gdecke  see below                              **/
   /* * 01-10-91  sgorga  see below                              **/
   /* *                                                          **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ES80"; /* set current process name*/



  if (YCTTBL.YCTCOOPF[CLXYCTX] == "Y" /* if claim type is co-op*/
   && KL0EM001.YCTCD != "DAA")       
    KL0EM001.CL0EML9 = "Coop Analyst>"; /* set coop analyst title*/
    CL0EW01.CL0EWUSR = CL0EW02.YCPCD;
                                   /* (cl0ewusr redefines xxxusrid)*/
    KL0EM001.KUYREPNM = CL0EW01.YCPNM;
  else
    KL0EM001.CL0EML9 = "Cust Svc Rep>"; /* set cust serv rep title*/
    KL0EM001.KUYREPNM = CL0EW01.KUYREPNM;
  end

   /* 01-07-90  gdecke  In the "while" stmt below, changed the*/
   /* "cl0ew01.cloewult(clxltrx1) = '0'" to be checked second,*/
    /* instead of first (like it was).  That way, if the index is*/
    /* +1 over the nbr the field can occur (such as 9 in a field*/
    /* defined as 8), it won't abend doing the 'while' check.*/

   /* 01-10-90 sgorga*/
      /* Changed  "while - if"  code below to  "while - and"*/
      /* to prevent zeros imbedded in xxxusrid's (such as*/
      /* JROB01) from being blanked out (to JROB 1) and, thereby,*/
      /* causing a 135 (cust svc rep not valid) abend.*/

  CLXREC.CLXLTRX1 = 1;
  while (CLXREC.CLXLTRX1 <= 8
   && CL0EW01.CL0EWULT[CLXLTRX1] == "0")
    CL0EW01.CL0EWULT[CLXLTRX1] = " ";
    CLXREC.CLXLTRX1 = CLXREC.CLXLTRX1 + 1;
  end

   /* Note:  CL0EW01.CL0EWUSR redefines CL0EW01.XXXUSRID.*/
     /* CL0EW01.XXXUSRID will contain the Coop Analyst cd(ycpcd)*/
     /* (see above) if this is a Coop Analyst situation -*/
     /* otherwise, it contains the Svc Rep name.*/

  KL0EM001.XXXUSRID = CL0EW01.XXXUSRID;

end // end KL0ES80

// get taken-by rep name
Function KL0ES81()
   /* ************************************************************/
   /* *      get the taken-by rep name                          **/
   /* *                                                         **/
   /* ************************************************************/

  set KUYREC empty;

  if (KL0EM001.CL-TAKEN-BY-ID != " ")
    KUYREC.XXXUSRID = KL0EM001.CL-TAKEN-BY-ID;
    set SQLCA empty;
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
                                   /* cust service rep record*/
  else
    KUYREC.XXXUSRID = COMMAREA.CAUSERID;
    set SQLCA empty;
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
                                   /* cust service rep record*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    KL0EM001.CLATBYNM = KUYREC.KUYREPNM;
    KL0EM001.CL-TAKEN-BY-ID = KUYREC.XXXUSRID;
    CL0EW02.CL-TAKEN-BY-ID = KUYREC.XXXUSRID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0EM001.CL-TAKEN-BY-ID = "NOT FOUND";
      converseLib.validationFailed(105); /* status may not be changed*/
      set KL0EM001.CL-TAKEN-BY-ID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    else
      TA1REC.TA1TBLKE = "GETTING TAKEN-BY REP NAME";
      XPCL010();
    end
  end

  if (VCLHDR02.CLAORIGI == "T") /* if claim originated on kl0t*/
   /* MOVE ' ' TO KL0EM001.CL-TAKEN-BY-ID;*/
    KL0EM001.CLATBYNM = "FOR C & R DEPT";
  end



end // end KL0ES81

// get sales rep/agency info
Function KL0ES82()
   /* **************************************************************/
   /* Get the Sales Agency and Sales/Rep information         **/
   /* **/
   /* This is where Agency/Rep is determined from one of     **/
   /* several sources and moved to the screen (map).         **/
   /* **/
   /* It is also moved to CL0EW02 to UPDATE THE CLAIM HDR    **/
   /* (CLAREC).  The actual update occurs in CL0E130.        **/
   /* **/
   /* MAINTENANCE:                                              **/
   /* 04-09-90 bcourt make meaningful name for agency/rep       **/
   /* when data not found.                      **/
   /* 06-14-90 bcourt when select agency/rep using g.p.c., also **/
   /* check it is currently active (use curr dt = setup dt)**/
   /* 07-13-90 sgorga  If claim has an acct class cd = '21',    **/
   /* and the claim type = 'ADJ' or 'DAA',     **/
   /* check it for a G/L #253.  If it has one, **/
   /* default the agency/rep to NATA/600.      **/
   /* 02-15-91  CHELLM  Comment out code that searched vstore01  **/
   /* for rep/agency when there's no ivc on the**/
   /* claim. VSTORE01 will no longer contain   **/
   /* the rep/agency data.  Now the CU1290 sub **/
   /* pgm is the only method of defaulting the **/
   /* rep/agency data from VCUREP01.           **/
   /* 04-16-91 sgorga  Deleted above commented out code of 2-15.**/
   /* 07-31-91 twatso  added cl8tbl - sales rep default table   **/
   /* tied to the sales agency for use with    **/
   /* 'def' only claims so commissions can be  **/
   /* calculated correctly                     **/
   /* 12-06-91 twatso  added some hard coding for getting the   **/
   /* correct agency/rep  by fooling the called**/
   /* program cu1290 and setting up generic    **/
   /* product category codes for side1 and i.e.**/
   /* this will have to be monitored and updated*/
   /* if and when the hard coded product       **/
   /* category codes change.*/
   /* 12-18-91 twatso  if xaucd = 26  or  27  then do not go to **/
   /* the cl8tbl for a generic agency/rep      **/
   /* because these are specifically for the   **/
   /* reps                                     **/
   /* 04-07-92 sgorga  Replaced the call to subpgm CU1290 with a**/
   /* call to the new subpgm, KU1350 (used to  **/
   /* get agency/rep).                         **/
   /* 04-17-92 sgorga  Rename SM5STAT to XXXSTAT.               **/
   /* 07-31-92 twatso  remove coding if  xaucd = 21, yct = daa  **/
   /* or adj - do not check for gl253 - new    **/
   /* sales agencies being added - sata,sada,  **/
   /* and sada. get rep from the claim header  **/
   /* 10-21-94 sgorga  Moving '**' to xob cd & gndr-age field to**/
   /* ku5rec in call to KU1350 (gets agcy/rep).**/
   /* **************************************************************/

  CLXREC.CLXCPROC = "KL0ES82"; /* set current process name*/

   /* MOVE 'N' TO CL0EW01.CL0EWDAF;    /**/
   /* move 'no' to default agency/rep flag*/

   /* commented out so kl0es89 is not called to check for gl253*/
   /* IF KUCREC.XAUCD = '21';          /* if this is a strategic acct*/
   /* AND CLAREC.YCTCD = 'DAA';*/
                                  /* clm type is dealer advertising*/
    /* KL0ES89;                       /* check the claim for a G/L #253*/
   /* ELSE;*/
    /* IF KUCREC.XAUCD = '21';        /* if this is a strategic acct*/
     /* AND CLAREC.YCTCD = 'ADJ';    /* and clm type is an adjustment*/
      /* KL0ES89;                     /* check the claim for a G/L #253*/
    /* END;*/
   /* END;*/

   /* IF CL0EW01.CL0EWDAF = 'Y';*/
   /* if default ag/rep fl = y (claim has*/
                                  /* G/L #253*/
    /* MOVE '600' TO CL0EW01.CL0EWREP;/* move generic rep*/
    /* MOVE 'NATA' TO CL0EW01.CL0EWAGY;/* and move generic agency*/
   /* ELSE;*/
  if (CLXREC.CLXINVFD == "Y") /* if invoice was found*/
    CL0EW01.CL0EWREP = IV0REC.SM4REPID;
    CL0EW01.CL0EWAGY = IV0REC.SM1AGYID;
  else
  /* if no invoice found, use claim hdr and customer store*/
  /* for the most likely agency/rep*/
    set KU5REC empty;
    KU5REC.KUCCOID = KL0EM001.KUCCOID; /* customer*/
    KU5REC.KUMSTRID = KL0EM001.KUMSTRID; /* cust store id*/
    KU5REC.XNXCD = KL0EM001.XNXCD; /* cust dept id*/
    KU5REC.XDVCD = KL0EM001.XDVCD;
    KU5REC.XPCCD = "**"; /* no product category code known*/

   /* if the brand is  '05'  or  '07'  side1   or  i.e.*/
   /* determine the product category - may need to be changed if the*/
   /* xpc-prod-cat-cd  becomes inactive.*/

    if (KL0EM001.XBCCD == "05")
      if (KL0EM001.XGPCD == "02")
        KU5REC.XPCCD = "94";
      end
      if (KL0EM001.XGPCD == "03")
        KU5REC.XPCCD = "TA";
      end
    end
    if (KL0EM001.XBCCD == "07")
      if (KL0EM001.XGPCD == "02")
        KU5REC.XPCCD = "95";
      end
    end

   /* if brand 07 ;gpc 03 come thru - they will pick up the 'best'*/
   /* whatever that  might be ???  generic ** in prod cat code*/

   /* above code changed in case we go the hard-coded method - else the*/
   /* changes will need to be made in 'l', 'o', 'r'  applications*/

    KU5REC.XGPCD = KL0EM001.XGPCD; /* GPC code*/
    KU5REC.OP1ORCDT = CLXREC.XXXCDTE; /* order recvd. date*/
    KU5REC.XPLCD = "**"; /* no product line code known*/
    KU5REC.XGACD = "**"; /* no gender age info*/
    KU5REC.XOBCD = "**"; /* base order type*/
    KU5REC.KU5-CALLING-PROGRAM-ID = "KL0ES82";

        /* cust # is already converted in kl0es4c,*/
        /* so no need to do it here (in ku1350 subpgm)*/
    KU5REC.KU5-CONV-DEPT-FLAG = "N"; /* don't check to convert*/

    KU5REC.KU5-READ-SA-FLAG = "N"; /* n=use cust syst to process*/

    call "KU1350" (KU5REC) {isNoRefresh = yes, isExternal = yes};

    if (KU5REC.KU5-READ-STATUS == "00") /* read successful*/
      CL0EW01.CL0EWREP = KU5REC.SM4REPID; /* writing rep*/
      CL0EW01.CL0EWAGY = KU5REC.SM1AGYID; /* writing agency*/
    else
      CL0EW01.CL0EWREP = 0;
      CL0EW01.CL0EWAGY = " ";
    end

    if (KL0EM001.YCTCD == "DEF" /* if def and nike owned agency*/
     && KUCREC.XAUCD != "26"    /* these are reps account classes*/
     && KUCREC.XAUCD != "27")   /* tw added 12-18-91*/
      if (CL0EW01.CL0EWAGY in CL8TBL.SM1AGYID)
        CL0EW01.CL0EWREP = CL8TBL.SM4REPID[sysVar.arrayIndex];
      end
    end
  end
   /* END;*/

  CL0EW01.CL0EWF1 = "/";
  KL0EM001.CL0EWARP = CL0EW01.CL0EWARP;


  set SM4REC empty;
  set SM5REC empty;
  SM5REC.SM1AGYID = CL0EW01.CL0EWAGY;
  SM5REC.SM4REPID = CL0EW01.CL0EWREP;
  SM4REC.SM4REPID = CL0EW01.CL0EWREP;
  SM5REC.XXXSTAT = "*"; /* 4-17-92*/
  SM5REC.SM5EDT = -1;

  XSIVSN4(); /* get and format salesman name*/

   /* Move agency/rep to W02 to update clm hdr - CLAREC*/
   /* (update occurs in CL0E130)*/
  CL0EW02.SM1AGYID = CL0EW01.CL0EWAGY; /* Move to W02 to update clm hdr*/
  CL0EW02.SM4REPID = CL0EW01.CL0EWREP; /* Move to W02 to update clm hdr*/

  KL0EM001.CL0EWRNM = IVZREC.IVZFNAME;
  if (KL0EM001.CL0EWRNM == "******* REP/AGENCY N") /* 4-9-90 new*/
    KL0EM001.CL0EWRNM = "* NAME MISSING *";
  end


end // end KL0ES82

// get sales office info
Function KL0ES83()
   /* ************************************************************/
   /* *      get the sales office description                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES83"; /* set current process name*/


  if (KL0EM001.YCTCD == "NBC") /* nbc claim types*/
    KL0EM001.XSOCD = "11"; /* are always sales ofc 11*/
  else
    if (KL0EM001.YCTCD == "DFO") /* defective only claim types*/
      KL0EM001.XSOCD = "10"; /* are always sales ofc 10*/
    else
      if (YCTTBL.YCTNILF[CLXYCTX] == "Y") /* if this is international*/
        KL0EM001.XSOCD = "04"; /* always sales ofc 4*/
      else
        if (KL0EM001.XSOCD == "  ") /* if no sales office entered*/
          if (CLXREC.CLXINVFD == "Y"
           || CLXREC.CLXORDFD == "Y")
            KL0EM001.XSOCD = IV0REC.XSOCD;
          else
            KL0EM001.XSOCD = KUYREC.XSOCD;
          end
        end
      end
    end
  end


  if (KL0EM001.XSOCD in XSOTBL.XSOCD)
    KL0EM001.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
    CL0EW02.XSOCD = XSOTBL.XSOCD[sysVar.arrayIndex];
  else
    converseLib.validationFailed(257); /* sales office required*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0EM001.XSOCD cursor, modified, bold; /* highlight sls ofc*/
    KL0EM001.XSOABRV = "NOT FOUND";
  end


end // end KL0ES83

// get credit analyst info
Function KL0ES84()
   /* ************************************************************/
   /* *      get the credit analyst information                 **/
   /* *                                                         **/
   /* * 10-12-90 bcourt change XCUCD(3) to XCECD, & XCEDESC.    **/
   /* *                                                         **/
   /* ************************************************************/
   /* commented out silly code*/
   /* MOVE KUCREC.XCUCD(1) TO KUCREC.XCUCD(1);*/
   /* MOVE KUCREC.XCUCD(2) TO KUCREC.XCUCD(2);*/
   /* MOVE KUCREC.XCECD TO KUCREC.XCECD;*/

   /* IF CL0EM001.XCeCD NE ' ';*/
   /* next sentence*/
   /* ELSE ;*/
   /* MOVE KUCREC.XCECD TO KL0EM001.XCECD;*/
   /* END ;*/

  KL0EM001.XCECD = KUCREC.XCECD;

  if (KL0EM001.XCECD in XCETBL.XCECD) /* if analyst code is in table*/
    KL0EM001.XCEDESC = XCETBL.XCEDESC[sysVar.arrayIndex];
  else
    KL0EM001.XCEDESC = "NOT FOUND";
  end




end // end KL0ES84

// get territory info
Function KL0ES85()
   /* ************************************************************/
   /* *      get the territory description                      **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES85"; /* set current process name*/


  if (CLWREC.CLWACTIV == "A") /* if adding*/
    if (IV0REC.IV0IVCID != 0) /* if have ivc record*/
      SM1REC.SM1AGYID = IV0REC.SM1AGYID;
    else
      SM1REC.SM1AGYID = SM5REC.SM1AGYID;
    end
  else
    SM1REC.SM1AGYID = VCLHDR02.SM1AGYID; /* use writing agency*/
  end


  set SQLCA empty;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes}; /* get sales agency record*/


  if (SQLCA.VAGen_SQLCODE == 0) /* if sales agency was found*/
    if (SM1REC.XTTCD in XTTTBL.XTTCD) /* if territory code is in table*/
      KL0EM001.XTTDESC = XTTTBL.XTTDESC[sysVar.arrayIndex];
    else
      KL0EM001.XTTDESC = "NOT FOUND";
    end
  else
    KL0EM001.XTTDESC = "NO AGENCY FOUND";
  end








end // end KL0ES85

// get coop-analyst information
Function KL0ES86()
   /* ************************************************************/
   /* *      get the coop-analyst information                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0ES86"; /* set current process name*/


  if (CL0EW02.YCPCD == 0)
    if (KUCREC.YCPCD == 0)
      KL0ES88(); /* default the coop analyst code*/
    else
      CL0EW02.YCPCD = KUCREC.YCPCD;
    end
  end




  if (CL0EW02.YCPCD in YCPTBL.YCPCD)
    CL0EW01.YCPNM = YCPTBL.YCPNM[sysVar.arrayIndex];
  else
    CL0EW01.YCPNM = "NOT ON FILE";
  end






end // end KL0ES86

// get customer service rep
Function KL0ES87()
   /* *************************************************************/
   /* *      get the customer service rep information            **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY:                                     **/
   /* * 11-30-90  sgorga  Added code to skip sales ofc comparison**/
   /* *            if order was a REPNET order (sv rep# 2001).   **/
   /* * 12-23-91  twatso  Added code to check for active row on  **/
   /* *                   yittbl - some were inactivated in dec91**/
   /* * 10-29-92  BCOURT  Bypass sales ofc comparison if order   **/
   /* *            was from EDI (sv rep# 2000).                  **/
   /* * 01-12-93  jcarey  If no invoice is available and the     **/
   /* *                   service rep id is blank, default the   **/
   /* *                   service rep to the taken by id.        **/
   /* * 01-19-93  BCOURT  Do jcarey change only for claim created**/
   /* *                   in KL0E.                               **/
   /* * 10-06-98  GDECKE  Remove edit requiring same sales office**/
   /* *                   for taken-by and for claim xvo value.  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0ES87"; /* set current process name*/

  set KUYREC empty;

  if (KL0EM001.YCTCD == "NBC" /* if nike bank claim*/
   || KL0EM001.YCTCD == "DFO") /* if nike bank claim*/
    return; /* cust svc rep not required*/
  end


  if (KL0EM001.IV0IVCID != 0) /* if an invoice was entered*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and yittbl row is active*/
      if (KL0EM001.XXXUSRID == " "        
       && YITTBL.YITIOIBM[CLXYITX] == "Y" /* and invoice is on ibm*/
       && CLXREC.CLXINVFD == "Y")         /* and invoice was found*/
        KUYREC.KUYSVRID = IVAREC.OP1TBREP;
        set SQLCA empty;
        call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          KL0EM001.XXXUSRID = KUYREC.XXXUSRID;
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            CL0EW01.KUYREPNM = " ";
            CL0EW03.XXXUSRID = " ";
            converseLib.validationFailed(135); /* cust svc rep not on file*/
            set KL0EM001.XXXUSRID cursor, modified, bold;
            CLXREC.CLXERRF = "Y";
            return;
          else
            TA1REC.TA1TBLKE = "GETTING CUST SVC REP NAME";
            XPCL010(); /* abend*/
          end
        end
      end
    else
      converseLib.validationFailed(128); /* yitcd is inactive - inv/order ind*/
                                  /* is invalid*/
      set KL0EM001.YITCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end

   /* jcarey add default of service rep to taken-by id:*/

  if (VCLHDR02.CLAORIGI == " ") /* bcourt default only on kl0e new clm*/
    if (KL0EM001.XXXUSRID == " ") /* there is no service rep*/
      if (VCLHDR02.KUYSVRID == 0) /* no svc rep in storage*/
        KUYREC.XXXUSRID = KL0EM001.CL-TAKEN-BY-ID;
        set SQLCA empty;
        call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
      else
        KUYREC.KUYSVRID = VCLHDR02.KUYSVRID;
        set SQLCA empty;
        call "IO0550" ("S", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0EM001.XXXUSRID = KUYREC.XXXUSRID;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          CL0EW01.KUYREPNM = " ";
          CL0EW03.XXXUSRID = " ";
          converseLib.validationFailed(135); /* cust svc rep not on file*/
          set KL0EM001.XXXUSRID cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        else
          TA1REC.TA1TBLKE = "GETTING CUST SVC REP NAME";
          XPCL010(); /* abend*/
        end
      end
    end
  end


  KUYREC.XXXUSRID = KL0EM001.XXXUSRID;
  CL0EW01.XXXUSRID = KL0EM001.XXXUSRID;

  set SQLCA empty;
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* cust service rep record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0EW01.KUYREPNM = " ";
      CL0EW03.XXXUSRID = " ";
      converseLib.validationFailed(135); /* cust svc rep not on file*/
      set KL0EM001.XXXUSRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = "GETTING CUST SVC REP NAME";
      XPCL010(); /* abend*/
    end
  end

    /* ********  compare sales offices  **********/

   /* 11-30-90 sgorga  In below code, if the 'if' conditions are*/
     /* met, the ivhdx01 sales ofc is compared to either the*/
     /* entered (map's) Cust Srv Rep# or the ivhdr01 sv rep# to*/
     /* be sure they match.  If they don't, err msg #52 appears.*/
     /* I added code to bypass the comparison if it's a Repnet*/
     /* order (sv rep#2001) because the sales ofc for 2001 is 10*/
     /* and probably won't match the ivhdx01 (sales rep) sls ofc.*/
   /* 10-29-92 bcourt Also bypass EDI order (svrep# 2000 for sales*/
     /* office '01').*/

  if (IVAREC.OP1TBREP != 2001 /* if not a repnet order (AIRSPEED)*/
   && IVAREC.OP1TBREP != 2000) /* and not an EDI order*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and yittbl row is active*/
      if (KL0EM001.IV0IVCID != 0          /* and if an invoice was entered*/
       && YITTBL.YITIOIBM[CLXYITX] == "Y" /* and invoice is on IBM*/
       && CLXREC.CLXINVFD == "Y"          /* and invoice was found*/
       && KUYREC.XSOCD != IV0REC.XSOCD)  
        KL0ES98(); /* see if xvo row exists using xsocd in*/
                                   /* iv0rec*/
        if (CL0EW01.CL0EWFVO == "Y") /* if an active row exists,*/
        /* and kuyrec.xsocd ne iv0rec.xsoce show err msg*/
        /* commented out per Lisa Tuffli - gdecke - 10-06-98*/
       /* MOVE 52 TO EZEMNO;       /* Msg #52 means the sales ofc on*/
       /* /* ivhdx01 doesn't*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;/* match the sales ofc of either*/
       /* /* ivhdr01's*/
       /* MOVE ' ' TO CL0EW03.XXXUSRID;*/
       /* /* sv rep# or the "taken by" sv rep#.*/
          if (YITTBL.YITMULTF[CLXYITX] == "N")
            if (YITTBL.XXXSTAT[CLXYITX] == "A") /* if active row*/
              if (CL0EW01.CLBGLIND != "Y" /* no g/l's*/
               && CL0EW01.CLBSRIND != "Y") /* no products*/
                set KL0EM001.IV0IVCID cursor, modified, bold;
                set KL0EM001.XXXUSRID modified, bold;
              end
            else
              converseLib.validationFailed(128); /* invalid invoice/order indicator*/
              CLXREC.CLXERRF = "Y"; /* invalid yitcd*/
            end
          else
            set KL0EM001.XXXUSRID cursor, modified, bold;
          end
          return;
        end
      end
    else
      converseLib.validationFailed(128); /* invalid invoice/order indicator*/
      CLXREC.CLXERRF = "Y"; /* invalid yitcd*/
      return;
    end
  end

  CL0EW02.KUYSVRID = KUYREC.KUYSVRID;
  CL0EW01.KUYREPNM = KUYREC.KUYREPNM;


end // end KL0ES87

// default the coop analyst code
Function KL0ES88()
   /* ************************************************************/
   /* *      default the coop-analyst code                      **/
   /* *                                                         **/
   /* * MAINTENANCE HISTORY:                                    **/
   /* * 12-12-90  sgorga  Removed the call to the KUAREC because**/
   /* *              it is being deleted in Feb.'91. Changed the**/
   /* *              call to the kulrec to use kucrec.kucblaid  **/
   /* *              field name instead of kuarec.kuaadrid.     **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0ES88"; /* default the coop analyst code*/



  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID; /* move bill-grp # to cust addr tbl*/

  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    CL0EW02.YCPCD = 99; /* default to sonia cook*/
    return;
  end


  if (KULREC.XSTCD in XSTTBL.XSTCD)
    CL0EW02.YCPCD = XSTTBL.YCPCD[sysVar.arrayIndex];
  else
    CL0EW02.YCPCD = 99; /* default to sonia cook*/
  end


end // end KL0ES88

// build/write claim bill-to addr
Function KL0ES91()
   /* ************************************************************/
   /* *   build and write the claims bill-to address record     **/
   /* *                                                         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G    **/
   /* *---------------------------------------------------------**/
   /* *    DATE   PGMR   DESCRIPTION                            **/
   /* *---------------------------------------------------------**/
   /* *  08/10/90 CHELLM If the COMP-CO-ID exists use it rather **/
   /* *                  than CU-CO-ID to get the BILL-TO       **/
   /* *                  address for CLFREC.                    **/
   /* *  12/21/90 sgorga Chgd kuarec.kuaadrid to kucrec.kucblaid**/
   /* *           because vblgrp01 table (kuarec) is being      **/
   /* *           deleted.  Deleted a call to kuarec - now using**/
   /* *           kucrec.kucblaid to call address tbl (kulrec). **/
   /* *  12/21/90 sgorga Chgd kuarec.kuaadrid to kucrec.kucblaid     **/
   /* *  11/12/93 GDECKE  CHANGE KULREC.XXXADDRn TO KULREC.XXX-ADDRn.**/
   /* *  03-11-94 BCOURT  CHANGE CLFREC.XXXADDRn TO CLFREC.XXX-ADDRn.**/
   /* *****************************************************************/

  CLXREC.CLXCPROC = "CL0ES91"; /* default the coop analyst code*/


  CLFREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/


  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "READING CLF RECORD";
    XPCL010();
  end


  if (CL0EW01.CL0EWFNC == "DELETE")
    if (SQLCA.VAGen_SQLCODE == 0)
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        /* ezertn*/
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        XPCL010();
      end
    else /* if no record was there to*/
      return; /* delete, that's ok*/
    end
  end


  if (CL0EW01.CL0EWFNC == "ADD") /* if requesting to add*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and record not found*/
       /* next sentence*/
    else
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "DELETING RECORD FOR ADD";
        XPCL010();
      end
    end
  end


  if (CL0EW01.CL0EWFNC == "UPDATE") /* if requesting to update*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and record on file*/
       /* next sentence*/
    else
      if (CL0EW09.KUCCOID > 0) /* IF COMP-CO BILL TO USED IT IS NOT ON*/
        return; /* CLFREC SO NO NEED TO DELETE*/
      else
        TA1REC.TA1TBLKE = "CLF REC TO UPDATE NOT ON FILE";
        XPCL010();
      end
    end
  end

              /* below modified 08-10-90*/
    /* 12-21-90 chgd kuarec.kuaadrid to kucrec.kucblaid*/

  if (CL0EW09.KUCCOID > 0) /* if the comp-co exists*/
    KULREC.KUCCOID = CL0EW09.KUCCOID; /* use comp account COMPANY*/
    KULREC.KULAAID = CL0EW09.KUCBLAID; /* AND BILL GROUP ADDRESS ID*/
  else
    KULREC.KUCCOID = KUCREC.KUCCOID; /* else use the customer acct*/
    KULREC.KULAAID = KUCREC.KUCBLAID;
  end

              /* end 08-10-90 modification*/

  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING BILL-GRP ADDR RECORD";
    XPCL010();
  end


  CLFREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/
  if (CL0EW09.KUCCOID > 0) /* added 08-10-90*/
    CLFREC.CLFADNM = CL0EW09.KUCCONM;
  else
    CLFREC.CLFADNM = KUCREC.KUCCONM;
  end
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* rename clfrec to db2 name*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;



  if (CL0EW01.CL0EWFNC == "UPDATE") /* if updating existing record*/
    set SQLCA empty;
    call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING EXISTING CLF RECORD";
      XPCL010();
    end
  end


  if (CL0EW01.CL0EWFNC == "ADD") /* if adding new record*/
    set SQLCA empty;
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      XPCL010();
    end
  end




end // end KL0ES91

// build/write shipto addr record
Function KL0ES92()
   /* ************************************************************/
   /* *   build and write the claims ship-to address record     **/
   /* *                                                         **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 11-12-93  GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.  **/
   /* * 04-11-94  BCOURT  CHANGE CLFREC.XXXADDRn TO XXX-ADDRn.  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES92"; /* default the coop analyst code*/


  CLFREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/


  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "READING CLF RECORD";
    XPCL010();
  end

  if (CL0EW01.CL0EWFNC == "DELETE")
    if (SQLCA.VAGen_SQLCODE == 0)
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        /* ezertn*/
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        XPCL010();
      end
    else /* if no record was there to*/
      return; /* delete, that's ok*/
    end
  end


  if (CL0EW01.CL0EWFNC == "ADD") /* if requesting to add*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and record not found*/
       /* next sentence*/
    else
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "DELETING RECORD FOR ADD";
        XPCL010();
      end
    end
  end


  if (CL0EW01.CL0EWFNC == "UPDATE") /* if requesting to update*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and record on file*/
       /* next sentence*/
    else
      TA1REC.TA1TBLKE = "CLF REC TO UPDATE NOT ON FILE";
      XPCL010();
    end
  end


  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUMREC.KUMSHAID;

  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get ship-to address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING SHIP-TO ADDR";
    XPCL010();
  end




  CLFREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* bill-to address*/
  CLFREC.CLFADNM = KUMREC.KUMSTRNM;
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* clfrec to db2 names*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;


  if (CL0EW01.CL0EWFNC == "UPDATE") /* if updating existing record*/
    set SQLCA empty;
    call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING EXISTING CLF RECORD";
      XPCL010();
    end
  end


  if (CL0EW01.CL0EWFNC == "ADD") /* if adding new record*/
    set SQLCA empty;
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      XPCL010();
    end
  end





end // end KL0ES92

// delete existing return-to addr
Function KL0ES93()
   /* ************************************************************/
   /* *   delete the existing return-to address record          **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ES93"; /* default the coop analyst code*/


  CLFREC.CLACLMNB = VCLHDR02.CLACLMNB;
  CLFREC.CLFADTYP = "R"; /* bill-to address*/


  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "READING CLF RECORD";
    XPCL010();
  end

  if (CL0EW01.CL0EWFNC == "DELETE")
    if (SQLCA.VAGen_SQLCODE == 0)
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        /* ezertn*/
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        XPCL010();
      end
    else /* if no record was there to*/
      return; /* delete, that's ok*/
    end
  end

end // end KL0ES93

// set prev claim on ivc ind
Function KL0ES95()



  if (KL0EM001.IV0IVCID == 0)
    return;
  end



  CLBREC.IV0IVCID = KL0EM001.IV0IVCID;
  CLXREC.CLXORDIV = KL0EM001.IV0IVCID;
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  CLBREC.YITCD = CLXREC.YITCD;

  set CL0EW08 empty;
  CL0EW08.CL0EWSQL = "SM"; /* select memoed claim*/
  CL0EW08.CLACLMNB = KL0EM001.CLACLMNB;
  CL0EW08.IV0IVCID = KL0EM001.IV0IVCID;
  CL0EW08.IV0PARTN = CLXREC.CLXPARTN;
  CL0EW08.CLACLMNB = KL0EM001.CLACLMNB;
  CL0EW08.YITCD = CLXREC.YITCD;

  set SQLCA empty;
  set CL0EW04 empty;
  CL0EW04.CL0EWSQL = "T2"; /* count nbr of other claims against invoice*/
  call "IO1180" (CL0EW04, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0EW04.CL0EWIN1 >= 0)
    CLBREC.ZZZCHGCT = CL0EW04.CL0EWCN1;
  else
    CLBREC.ZZZCHGCT = 0;
  end

  if (SQLCA.VAGen_SQLCODE == 0
   && CLBREC.ZZZCHGCT > 0)
                                   /* if there are other claims against ivc*/
    KL0EM001.CL0EWNOC = CLBREC.ZZZCHGCT; /* nbr of claims*/
    set KL0EM001.CL0EWNOC skip, bold;
    set SQLCA empty;
    call "CL2320" (CL0EW08, SQLCA) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
       /* completed claims exist against invoice*/
      KL0EM001.CL0EWPCI = "M"; /* memos against invoice*/
    else
       /* see if authorized returns exist against invoice*/
      CL0EW08.CL0EWSQL = "SR"; /* select returned claim*/
      set SQLCA empty;
      call "CL2320" (CL0EW08, SQLCA) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
        KL0EM001.CL0EWPCI = "R"; /* returns against invoice*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KL0EM001.CL0EWPCI = "C"; /* claims against invoice*/
        end
      end
    end
    set KL0EM001.CL0EWPCI skip, bold;
  else
    KL0EM001.CL0EWNOC = 0;
    KL0EM001.CL0EWPCI = " ";
  end

end // end KL0ES95

// edit division code
Function KL0ES96()
   /* *************************************************************/
   /* * edit the division code                                   **/
   /* *************************************************************/

  if (KL0EM001.XDVCD == " ") /* if no division code entered*/
    if (CLXREC.CLXORDFD == "Y" /* default to order or invoice*/
     || CLXREC.CLXINVFD == "Y") /* division if one exists*/
      KL0EM001.XDVCD = IVAREC.XDVCD;
    else
      if (COMMAREA.XDVCD != "  ")
                                   /* default to user logon division code*/
        KL0EM001.XDVCD = COMMAREA.XDVCD; /* if one exists*/
      else
        converseLib.validationFailed(578); /* division code required*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XDVCD cursor, modified, bold;
      end
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0EM001.XDVCD == IVAREC.XDVCD)
        /* next sentence*/
      else
        converseLib.validationFailed(579); /* div does not match invoice*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XDVCD cursor, modified, bold;
      end
    end
  end


  if (KL0EM001.XDVCD in XDVTBL.XDVCD) /* if a valid division code*/
    KL0EM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    CL0EW02.XDVCD = KL0EM001.XDVCD;
  else
    converseLib.validationFailed(580);
                                   /* invalid division code - not in table*/
    set KL0EM001.XDVCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end


end // end KL0ES96

// xdv,xob,xso,xgp,xot on XVOTBL?
Function KL0ES97()
   /* *************************************************************/
   /* * edit for xdv,xob,xso,xgp on xvotbl                       **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 08-24-90  sgorga  Allow claims against some Nil-customer **/
   /* *   invoices to bypass validation of 'Div,GPC,Sls Ofc, Ord **/
   /* *   Typ' combination (xvo table).                          **/
   /* * 09-28-90  sgorga  Added another Nil invoice.             **/
   /* * 11-21-90  sgorga  Added Nil 203447,203451.               **/
   /* * 01-21-91  sgorga  Added 20 Nil invoices.                 **/
   /* * 02-18-91  sgorga  Added Nil invoice # 6298054.           **/
   /* * 02-21-91  sgorga  Added Nil invoice # 6573603.           **/
   /* * 03-14-91  sgorga  Added Nil invoice # 6763895,6763634.   **/
   /* * 04-19-91  sgorga  Added Nil invoice # 6984512,6978386.   **/
   /* * 05-07-91  sgorga  Created table CL7TBL to store the NIL  **/
   /* *                   invoice nbrs that we allow domestic    **/
   /* *                   claims to be created against.  Removed **/
   /* *                   hardcoded NIL invoice nbrs from this   **/
   /* *                   process.  Replaced with table inquiry. **/
   /* * 12-02-91  twatso  added brand code to look up on xvotbl. **/
   /* * 06-15-94  sgorga  Added code to default gpc to '02' for  **/
   /* *                   the xvotbl edit when gpc = '00' and    **/
   /* *                   claim type = 'DAA'.                    **/
   /* * 03-10-98  NJana   Change the code to replace the CSP     **/
   /* *                   XVOTBL with IOMOD VXVO0001             **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0ES97"; /* set current process name*/


  CL0EW01.CL0EWFVO = "N"; /* initialize found line on xvo flag*/
  sysVar.arrayIndex = 1;

  if (KL0EM001.YCTCD == "DAA"
   && KL0EM001.XGPCD == "00")
    CL0EW01.CL0EW-HLD-XGP-GPC-CD = "02";
  else
    CL0EW01.CL0EW-HLD-XGP-GPC-CD = KL0EM001.XGPCD;
  end
   /* 12-03-91 tw  changed the wording so either blank or match on xbccd*/
   /* is required when status is active*/

   /* TCS change begins-dated 03/10/98*/

  set VXVO0001 empty;
  VXVO0001.XOBCD = KL0EM001.XOBCD; /* base order type code*/
  VXVO0001.XDVCD = KL0EM001.XDVCD; /* division code*/
  VXVO0001.XBCCD = KL0EM001.XBCCD; /* brand code*/
  VXVO0001.XGPCD = CL0EW01.CL0EW-HLD-XGP-GPC-CD; /* gpc code*/
  VXVO0001.XSOCD = KL0EM001.XSOCD; /* sales office code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)

    call "VXVO0001" ("N3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* get first*/

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW02.XOTCD = VXVO0001.XOTCD; /* move valid order type code*/
      CL0EW01.CL0EWFVO = "Y"; /* found valid order type*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence,valid order type not found*/
      else
        TA1REC.TA1LOCAT[2] = "KL0ES97";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        XPCL010();
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "KL0ES97";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end

  call "VXVO0001" ("C3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0ES97";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end
   /* TCS change ends  -dated 03/10/98*/

   /* 05-07-91  sgorga*/
  if (KL0EM001.IV0IVCID in CL7TBL.IV0IVCID) /* 5-07-91  Allow claims against*/
     /* next sentence     the NIL invoice nbrs in CL7TBL to*/
                       /* bypass below edit.*/
  else
    if (CL0EW01.CL0EWFVO == "N") /* if nothing was found to load*/
      converseLib.validationFailed(582); /* invalid division code - not in table*/
      set KL0EM001.XDVCD cursor, modified, bold;
      set KL0EM001.XGPCD cursor, modified, bold;
      set KL0EM001.XOBCD cursor, modified, bold;
      set KL0EM001.XSOCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end


end // end KL0ES97

// xdv,xob,xso,xgp,xot on XVOTBL?
Function KL0ES98()
   /* *************************************************************/
   /* * edit for xdv,xob,xso,xgp on xvotbl                       **/
   /* *                                                          **/
   /* * 08-23-90 CHELLM Removed default of xotcd from xvotbl     **/
   /* *          because it should be defaulting from the invoice**/
   /* *          which is done in CL0ES60.  Leave in the setting **/
   /* *          of the CL0EWFVO valid XOT found flag to 'Y'     **/
   /* *          when a valid xot code exists.                   **/
   /* * 12-02-91 twatso added code for brand code for looking    **/
   /* *                 up a valid xvo and xot table entry       **/
   /* * 06-15-94 sgorga  Added code to default gpc to '02' for   **/
   /* *                  the xvotbl edit when gpc = '00' and     **/
   /* *                  claim type = 'DAA'.                     **/
   /* * 03-10-98 NJana  Change the code to replace CSP XVOTBL    **/
   /* *                 an IOMOD                                 **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0ES98";

  CL0EW01.CL0EWFVO = "N"; /* initialize found line on xvo flag*/
  sysVar.arrayIndex = 1;
   /* blank or valid brand code coding added 12-03-91 tw.*/

  if (KL0EM001.YCTCD == "DAA"
   && KL0EM001.XGPCD == "00")
    CL0EW01.CL0EW-HLD-XGP-GPC-CD = "02";
  else
    CL0EW01.CL0EW-HLD-XGP-GPC-CD = KL0EM001.XGPCD;
  end

   /* TCS change begins -dated 03/10/98*/

  set VXVO0001 empty;
  VXVO0001.XOBCD = KL0EM001.XOBCD; /* base order type code*/
  VXVO0001.XDVCD = KL0EM001.XDVCD; /* division code*/
  VXVO0001.XBCCD = KL0EM001.XBCCD; /* brand code*/
  VXVO0001.XGPCD = CL0EW01.CL0EW-HLD-XGP-GPC-CD; /* gpc code*/
  VXVO0001.XSOCD = KL0EM001.XSOCD; /* sales office code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)

    call "VXVO0001" ("N3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* get first*/

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0EW01.CL0EWFVO = "Y"; /* found valid order type*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence,valid order type not found*/
      else
        TA1REC.TA1LOCAT[2] = "KL0ES98";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        XPCL010();
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "KL0ES98";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end

  call "VXVO0001" ("C3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* closecursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0ES98";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end
end // end KL0ES98

// edit brand code
Function KL0ES99()
   /* *************************************************************/
   /* * edit the brand code                                      **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* * 6-14-90 bcourt replace cl0et01 with xbctbl to get brand's**/
   /* *    legal entity.                                         **/
   /* * 08-24-90 sgorga  Allow claims against some Nil invoices  **/
   /* *    to bypass the edit that prevents Nil claims from being**/
   /* *    created in Opt. 1 or 2.                               **/
   /* * 09-28-90 sgorga  Added another Nil invoice               **/
   /* * 10-12-90 bcourt  Describe msg #33 and #64 correctly.     **/
   /* * 11-21-90 sgorga  Added Nil invoices 203447,203451        **/
   /* * 01-21-91 sgorga  Added 20 Nil invoices.                  **/
   /* * 02-18-91 sgorga  Added Nil invoice # 6298054.            **/
   /* * 02-21-91 sgorga  Added Nil invoice # 6573603.            **/
   /* * 03-14-91 sgorga  Added Nil invoice # 6763895;6763634.    **/
   /* * 04-19-91 sgorga  Added Nil invoice # 6984512,6978386.    **/
   /* * 05-07-91 sgorga  Created table CL7TBL to store the NIL   **/
   /* *                  invoice nbrs that we allow domestic     **/
   /* *                  claims to be created against.  Removed  **/
   /* *                  hardcoded NIL invoice nbrs from this    **/
   /* *                  process.  Replaced with table inquiry.  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ES99"; /* set current process name*/

  if (KL0EM001.XBCCD == " ") /* if no brand code entered*/
    if (CLXREC.CLXORDFD == "Y" /* default to order or invoice*/
     || CLXREC.CLXINVFD == "Y") /* brand if one exists*/
      KL0EM001.XBCCD = IVAREC.XBCCD;
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0EM001.XBCCD == IVAREC.XBCCD)
        /* next sentence*/
      else
        converseLib.validationFailed(618); /* brand does not match invoice*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.XBCCD cursor, modified, bold;
        return;
      end
    end
  end

  if (CLXREC.CLXORDFD == "Y" /* if order or invoice found*/
   || CLXREC.CLXINVFD == "Y")
                                   /* allow blank xbccd (claim before 6-90)*/
    if (IVAREC.XBCCD == "  ")
      CL0EW01.CL0EWYIT = "Y"; /* indicator = 'y' if blank brand is ok*/
    else
      CL0EW01.CL0EWYIT = "N"; /* indic = 'n' if blank brand is error*/
    end
  else
    CL0EW01.CL0EWYIT = "N"; /* indicator = 'n' if blank brand is*/
                                   /* error*/
  end

  set KUYREC empty;
  set SQLCA empty;
  CL0EW01.XLECD = "  ";
  KUYREC.XXXUSRID = COMMAREA.CAUSERID;

  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* user logon id record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    if (KUYREC.XBCCD in XBCTBL.XBCCD)
      CL0EW01.XLECD = XBCTBL.XLECD[sysVar.arrayIndex];
    end
    if (KL0EM001.XBCCD in XBCTBL.XBCCD) /* if claim legal entit*/
      if (XBCTBL.XLECD[sysVar.arrayIndex] == CL0EW01.XLECD /* = logon lgl.en*/
                                                           
       /* alternate test if required to match brands instead of xle*/
       /* IF CL0EM001.XBCCD = KUYREC.XBCCD   ; entered brand = logon*/
                                                           
       || KL0EM001.YCTCD == "NBC"                          /* or nbc claim type*/
       || KL0EM001.YCTCD == "DAA")                         /* or daa claim typem*/
        /* next sentence    then it is okay*/
      else
        if (KL0EM001.XBCCD == "  " /* default brand from logon id*/
         && CL0EW01.XLECD != "  "  /* if no brand and no xlecd*/
         && CL0EW01.CL0EWYIT == "N") /* and blank xbccd not from ivc*/
          KL0EM001.XBCCD = KUYREC.XBCCD;
        else
          /* next sentence*/
           /* bypass the error message until edit requirements*/
           /* have been clarified*/
           /* MOVE 626 TO EZEMNO; clm brand's lgl entity ne logon l.e.*/
                 /* SET CL0EM001.XBCCD CURSOR,MODIFIED,BRIGHT;*/
                 /* MOVE 'Y' TO CLXREC.CLXERRF;*/
                 /* EZERTN;*/
        end
      end
    else
      if (CL0EW01.CL0EWYIT == "Y" /* if blank brand from ivc is okay to*/
       /* use*/
       && KL0EM001.XBCCD == "  ") /* and entered brand is blank*/
        /* next sentence*/
      else
        if (KL0EM001.XBCCD == "  " /* default brand from logon id*/
         && CL0EW01.XLECD != "  "  /* if no brand and no xlecd*/
         && CL0EW01.CL0EWYIT == "N") /* and blank xbccd not from ivc*/
          KL0EM001.XBCCD = KUYREC.XBCCD;
        else
          converseLib.validationFailed(616);
                                   /* clm brand's lgl entity not translated*/
          set KL0EM001.XBCCD cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if the record was not found*/
      /* next sentence*/
       /* bypass the error message until edit requirements*/
       /* have been clarified*/
      /* MOVE 638 TO EZEMNO; logon user id not in cust svc rep table*/
         /* SET CL0EM001.CLASCGBY CURSOR,MODIFIED,BRIGHT;*/
         /* MOVE 'Y' TO CLXREC.CLXERRF;*/
         /* EZERTN;*/
    else
      TA1REC.TA1TBLKE = "GETTING LEGAL ENTITY USING LOGON ID";
      TA1DBASE = "DCUST";
      TA1TBLVU = "VSVREP01";
      TA1LOCAT[2] = "CL0ES99";
      XPCL010();
    end
  end

  if (KL0EM001.YCTCD == "CDR"
   /* if claim type is cdr and company not*/
   && KL0EM001.KUCCOID == 0)
                                   /* entered, let cl0es43 default to co id*/
    return;
  end

  if (CL0EW01.CL0EWYIT == "Y" /* if blank brand from ivc is okay to*/
   /* use*/
   && KL0EM001.XBCCD == "  ") /* and the entered brand is blank*/
    KL0EM001.XBCABRV = "N/A   ";
    CL0EW02.XBCCD = KL0EM001.XBCCD;
  else
    if (KL0EM001.XBCCD in XBCTBL.XBCCD) /* if a valid brand code*/
      KL0EM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      CL0EW02.XBCCD = KL0EM001.XBCCD;
    else
      converseLib.validationFailed(615); /* invalid brand code - not in table*/
      set KL0EM001.XBCCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end


   /* only do the following if primary ivc-id = 0 or*/
   /* clhdr.yitcd = 'n'*/

  KUCREC.KUCCOID = KL0EM001.KUCCOID;
  KL0ES70(); /* get cust company record for acct class*/
         /* and legal entity code and abbrev for clwrec*/

  if (KL0EM001.YCTCD == "NBC" /* if nbc claim type*/
   || KL0EM001.YCTCD == "DAA") /* or daa claim type*/
    /* next sentence      skip the test*/
  else
    if (CLWREC.XLECD == CL0EW01.XLECD) /* if cust l.e. = logon l.e., ok*/
      /* next sentence*/
    else
      if (KUCREC.XAUCD == "60" /* if acct class in '60','63'*/
       || KUCREC.XAUCD == "63" /* require matching legal entity codes*/
       || KUCREC.XAUCD == "62" 
       || KUCREC.XAUCD == "12" 
       || KUCREC.XAUCD == "13" 
       || KUCREC.XAUCD == "14" 
       || KUCREC.XAUCD == "43")
        /* next sentence*/
         /* bypass the error message until edit requirements*/
         /* have been clarified*/
        /* MOVE 635 TO EZEMNO; cust brand's lgl entity ne logon l.e.*/
             /* SET CL0EM001.KUCCOID CURSOR,MODIFIED,BRIGHT;*/
          /* MOVE 'Y' TO CLXREC.CLXERRF   ; screen validation failed*/
             /* EZERTN;*/
      else
        if (KUCREC.XAUCD in XAUTBL.XAUCD /* if acct type is '02' require*/
         && XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* matching legal entity codes*/
          /* next sentence*/
           /* bypass the error message until edit requirements*/
           /* have been clarified*/
           /* MOVE 635 TO EZEMNO; cust brand's lgl entity ne logon l.e.*/
                 /* SET CL0EM001.KUCCOID CURSOR,MODIFIED,BRIGHT;*/
                 /* MOVE 'Y' TO CLXREC.CLXERRF;*/
                 /* EZERTN;*/
        end
      end
    end
  end

  if (KL0EM001.IV0IVCID == 0 /* if invoice id is zero or not an ibm invoice*/
   || VCLHDR02.YITCD == "N") /* then do the following edits*/
    if (KL0EM001.XBCCD in XBCTBL.XBCCD)
                                   /* if in brand/legal entity table*/
      CL0EW01.XLECD = XBCTBL.XLECD[sysVar.arrayIndex]; /* save legal entity*/
      if (CL0EW01.XLECD == CLWREC.XLECD) /* brand ok if claim brand's legal*/
        /* NEXT SENTENCE     ; entity equal customer legal entity code*/
      else
        if (KUCREC.XAUCD == "60" /* if acct class in '60','63',etc.*/
         || KUCREC.XAUCD == "63" /* require matching legal entity codes*/
         || KUCREC.XAUCD == "62" 
         || KUCREC.XAUCD == "12" 
         || KUCREC.XAUCD == "13" 
         || KUCREC.XAUCD == "14" 
         || KUCREC.XAUCD == "43")
          converseLib.validationFailed(617); /* clm brand's lgl entity ne cust lgl entity*/
          set KL0EM001.XBCCD cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* screen validation failed*/
          return;
        else
          if (KUCREC.XAUCD in XAUTBL.XAUCD /* if acct type is '02' require*/
           && XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* matching legal entity codes*/
            converseLib.validationFailed(617); /* clm brand's lgl entity ne cust lgl*/
                                   /* entity*/
            set KL0EM001.XBCCD cursor, modified, bold;
            CLXREC.CLXERRF = "Y"; /* screen validation failed*/
            return;
          end
        end
      end
    else
      if (CL0EW01.CL0EWYIT == "Y" /* if blank brand from ivc is okay to*/
       /* use*/
       && KL0EM001.XBCCD == "  ") /* and entered brand is blank*/
        /* next sentence*/
      else
        converseLib.validationFailed(616); /* brand not translated to valid legal entity*/
        set KL0EM001.XBCCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end
  end

  if (CLWREC.XLECD == "08")
    converseLib.validationFailed(603); /* cole-haan not allowed in claims*/
                                   /* system*/
    set KL0EM001.XBCCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end

  if (CLWREC.CLWMNOPT == 3) /* if menu option = 3 then legal entity*/
    if (CLWREC.XLECD != "02") /* must be '02'*/
      converseLib.validationFailed(33); /* company not valid-must be Nil*/
      set KL0EM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end

    /* 05-07-91  sgorga*/
  if (KL0EM001.IV0IVCID in CL7TBL.IV0IVCID)
                                   /* 05-07-91  Allow claims against*/
     /* next sentence         the NIL invoice nbrs in CL7TBL*/
                           /* to bypass below edit.*/
  else
    if (CLWREC.XLECD == "02") /* if legal entity is '02 then menu*/
      /* (nil customer)*/
      if (CLWREC.CLWMNOPT == 3 /* option must be 3 or 13.*/
       || CLWREC.CLWMNOPT == 13)
        /* next sentence*/
      else
        converseLib.validationFailed(64); /* Nil company must use menu option 3 for def*/
        set KL0EM001.KUCCOID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end
  end
end // end KL0ES99

// default the comp-co-id
Function KL0ES9A()
   /* *************************************************************/
   /* * default the comp-co id                                   **/
   /* *                                                          **/
   /* * 08-10-90 CHELLM Added a check of the new-comp-co-entered **/
   /* *                 flag to before defaulting. This will     **/
   /* *                 allow for the user wanting to zero the   **/
   /* *                 comp-co defaulted from the invoice.      **/
   /* *                                                          **/
   /* *************************************************************/

  if (KL0EM001.OP1CMPNB == 0) /* if no comp-co id entered*/
    if (CLXREC.CLXORDFD == "Y" /* default to order or invoice*/
     || CLXREC.CLXINVFD == "Y") /* brand if one exists*/
      if (CLWREC.CLWACTIV == "A" /* and creating new claim 08-10-90*/
       && CL0EW01.CL0EWCOF == "N")
                                   /* and didn't zero out the value*/
        KL0EM001.OP1CMPNB = IVAREC.OP1CMPNB;
      end
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0EM001.OP1CMPNB == IVAREC.OP1CMPNB)
        /* next sentence*/
      else
        converseLib.validationFailed(628); /* comp-co id does not match invoice*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.OP1CMPNB cursor, modified, bold;
        return;
      end
    end
  end

  CL0EW02.OP1CMPNB = KL0EM001.OP1CMPNB; /* save comp-co in clhdr*/

end // end KL0ES9A

// edit cogs code
Function KL0ES9B()
   /* *************************************************************/
   /* * edit the cogs code                                       **/
   /* 10-12-90 bcourt change xcgcd to op1cogid.*/
   /* *************************************************************/

  if (KL0EM001.OP1COGID == 0) /* if no cogs code entered*/
    if (CLXREC.CLXORDFD == "Y" /* default to order or invoice*/
     || CLXREC.CLXINVFD == "Y") /* brand if one exists*/
      KL0EM001.OP1COGID = IVAREC.OP1COGID;
    end
  else
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0EM001.OP1COGID == IVAREC.OP1COGID)
        /* next sentence*/
      else
        converseLib.validationFailed(629); /* cogs code does not match invoice*/
        CLXREC.CLXERRF = "Y";
        set KL0EM001.OP1COGID cursor, modified, bold;
        return;
      end
    end
  end

  CL0EW02.OP1COGID = KL0EM001.OP1COGID; /* save cogs-co id to clarea*/

end // end KL0ES9B

// edit brand code
Function KL0ES9C()
   /* *************************************************************/
   /* * edit the brand code - code commented out until edit      **/
   /* * requirements are clarified.                              **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ES9C"; /* set current process name*/

   /* SET KUYREC EMPTY;*/
   /* SET SQLCA EMPTY;*/
   /* MOVE '  ' TO CL0EW01.XLECD;*/
   /* MOVE COMMAREA.CAUSERID TO KUYREC.XXXUSRID;*/
   /* CALL IO0550 'SA',SQLCA,KUYREC (NOMAPS,NONCSP; get svrep rec.*/
   /* IF SQLCA.SQLCODE = 0            ;    if the record was found*/
    /* IF KUYREC.XBCCD IN CL0ET01.XBCCD;*/
      /* MOVE CL0ET01.XLECD(EZETST) TO CL0EW01.XLECD;*/
    /* END ;*/
   /* ELSE ;*/
    /* IF SQLCA.SQLCODE = 100    ; if the record was not found*/
      /* MOVE 639 TO EZEMNO; changed to inq mode due to logon id*/
      /* MOVE 'I' TO CLWREC.CLWACTIV ; force to inquiry mode*/
      /* EZERTN;*/
    /* ELSE ;*/
   /* MOVE 'GETTING LEGAL ENTITY USING LOGON ID'TO TA1REC.TA1TBLKE*/
      /* MOVE 'DCUST' TO TA1DBASE;*/
      /* MOVE 'VSVREP01' TO TA1TBLVU;*/
      /* MOVE 'CL0ES99' TO TA1LOCAT(2);*/
      /* PERFORM XPCL010;*/
    /* END ;*/
   /* END ;*/

   /* IF CL0EM001.XBCCD = '  '        ; and the brand is blank*/
    /* MOVE 'N/A   ' TO CL0EM001.XBCABRV;*/
    /* MOVE CL0EM001.XBCCD TO CL0EW02.XBCCD;*/
   /* ELSE ;*/
    /* IF CL0EM001.XBCCD IN XBCTBL.XBCCD;if a valid brand code*/
      /* MOVE XBCTBL.XBCABRV(EZETST) TO CL0EM001.XBCABRV;*/
      /* MOVE CL0EM001.XBCCD TO CL0EW02.XBCCD;*/
    /* ELSE ;*/
      /* MOVE 615 TO EZEMNO    ;invalid brand code - not in table*/
      /* SET CL0EM001.XBCCD CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF  ; screen validation failed*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/


   /* only do the following if primary ivc-id = 0 or*/
   /* clhdr.yitcd = 'n'*/

   /* MOVE CL0EM001.KUCCOID TO KUCREC.KUCCOID;*/
   /* CL0ES70           ;   get cust company record for acct class*/
         /* and legal entity code and abbrev for clwrec*/

   /* IF CL0EM001.YCTCD = 'NBC'       ;  if nbc claim type*/
    /* OR CL0EM001.YCTCD = 'DAA'     ;  or daa claim type*/
    /* ;next sentence      skip the test*/
   /* ELSE ;*/
   /* IF CLWREC.XLECD EQ CL0EW01.XLECD;if cust l.e. = logon l.e.*/
      /* ;next sentence*/
    /* ELSE ;*/
   /* IF KUCREC.XAUCD = '60';if acct class in '60','63','45','95'*/
   /* OR KUCREC.XAUCD = '63' ; require matching legal entity codes*/
        /* OR KUCREC.XAUCD = '45';*/
        /* OR KUCREC.XAUCD = '95';*/
        /* OR KUCREC.XAUCD = '62';*/
        /* OR KUCREC.XAUCD = '12';*/
        /* OR KUCREC.XAUCD = '13';*/
        /* OR KUCREC.XAUCD = '14';*/
        /* OR KUCREC.XAUCD = '43';*/
   /* MOVE 639 TO EZEMNO; changed to inquiry mode due to logon id*/
    /* MOVE 'I' TO CLWREC.CLWACTIV      ; force to inquiry mode*/
        /* EZERTN;*/
      /* ELSE ;*/
   /* IF KUCREC.XAUCD IN XAUTBL.XAUCD  ; if acct type is '02' need*/
    /* AND XAUTBL.XATCD(EZETST) = '02'; matching l.e. codes*/
    /* MOVE 639 TO EZEMNO; changed to inq. mode due to logon id*/
      /* MOVE 'I' TO CLWREC.CLWACTIV    ; force to inquiry mode*/
          /* EZERTN;*/
        /* END ;*/
      /* END ;*/
    /* END ;*/
   /* END ;*/
end // end KL0ES9C

// Check for NBQ GL codes on IVC
Function KL0ESIG()
   /* ************************************************************/
   /* *  determine if invoice was paid for, whole or in part,   **/
   /* *  by NIKE BANK DOLLARS.                                  **/
   /* *                                                         **/
   /* * 12-31-90 CHELLM  Group created.                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ESIG"; /* set current process name*/


  set IV6REC empty;

  IV6REC.IV0PARTN = IV0REC.IV0PARTN;
  IV6REC.IV0IVCID = IV0REC.IV0IVCID;
  IV6REC.OP2LNINB = -1; /* get all gl records*/

  CL0EW01.CL0EWCNT = 0; /* initialize record counter*/
  CL0EW01.CL0EWDON = "N"; /* init done-flag*/

  set SQLCA empty;
  call "IO1080" ("SS", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of all invoice GL records*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "SELCT IV6 SET (CL0ESIG)";
    XPCL010();
  end


  set SQLCA empty;
  call "IO1080" ("SN", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no first record found*/
      CL0EW01.CL0EWDON = "N";
    else
      TA1REC.TA1TBLKE = "FETCH 1ST IV6 REC CL0ESIG";
      XPCL010();
    end
  end


  while (CL0EW01.CL0EWDON == "N") /* while not done*/

     /* check the Profitability GL table to see if NBQ GL's exist.*/

    set SQLCA empty;
    set PFJREC empty;

    PFJREC.GLACD = IV6REC.GLACD;

    call "IO4360" ("S ", SQLCA, PFJREC) {isNoRefresh = yes, isExternal = yes}; /* select PFJREC*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if good return check for NBQ GL*/
      if (PFJREC.PFJXREF == "NBQ")
        CL0EW01.CL0EWCNT = CL0EW01.CL0EWCNT + 1;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
      else
        TA1REC.TA1TBLKE = "FETCHING PFJREC  (CL0ESIG)";
        XPCL010();
      end
    end

    set SQLCA empty;
    call "IO1080" ("SN", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* get the next IV6 rec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good return,*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0EW01.CL0EWDON = "Y"; /* we're done*/
      else
        TA1REC.TA1TBLKE = "FETCH NEXT IV6 REC/CL0ESIG";
        XPCL010();
      end
    end
  end

  set SQLCA empty;
  call "IO1080" ("CS", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "CLOSE IV6 SET (CL0ESIG)";
    XPCL010();
  end


  if (CL0EW01.CL0EWCNT > 1) /* If NBQ GL's exist on the invoice*/
    converseLib.validationFailed(682); /* give warning message*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    CL0EW01.CL0EWNBW = "Y"; /* set warning flag*/
    set KL0EM001.IV0IVCID modified, bold;
  end /* invoice paid with Nike Bank $$*/

end // end KL0ESIG

// get ibm ivc header
Function KL0ESIH()
   /* GET XPCL009*/
   /* ************************************************************/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ESIH"; /* set current process name*/


  if (CLXREC.CLXINVFD == "Y")
    IV0REC.IV0GROUP = CLXREC.IV0GROUP;
  end


  IVAREC.IV0PARTN = IV0REC.IV0PARTN;
  IVAREC.IV0IVCID = IV0REC.IV0IVCID;


  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes}; /* get ivc header record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVHDR01";
      TA1REC.TA1LOCAT[2] = "SEL UNIQ";
      CLXREC.XXXWDTE = IVAREC.IV0IVCID;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end


end // end KL0ESIH

// cross-edit ivc & order
Function KL0ESIO()
   /* GET XPCL007*/
   /* ************************************************************/
   /* cross edit invoice and order                            **/
   /* **/
   /* maintenance:                                           **/
   /* 09-27-94 twatso  added code for golf level pay project.   **/
   /* if the invoice entered is a 'p' lvl      **/
   /* invoice, then go for the master invoice  **/
   /* and then go for the data for master ivc  **/
   /* and return the iv0group for the master   **/
   /* invoice.                                 **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ESIO"; /* set current process name*/

  CLXREC.CLXINVFD = "N"; /* invoice found*/
  CLXREC.CLXORDFD = "N"; /* order found*/
  CLXREC.CLXWRTIV = "N"; /* need to write invoice record*/
  CLXREC.CLXWRTOR = "N"; /* need to write order record*/
  CL0EW01.CL0EWCHI = "N"; /* 4-11-88 chged invc, force new ord*/
                                  /* type*/
   /* new code for level pay changes added*/
   /* 9-27-94 tw (new loop to get master*/
   /* and then go back and get invoice group for the master invoice data*/

   /* decide if the invoice exists on the iv0rec*/

  if (CLXREC.IV0IVCID > 0) /* if we have an invoice number*/
    IV0REC.IV0IVCID = CLXREC.IV0IVCID; /* load key*/
    CLXREC.CLXORDIV = CLXREC.IV0IVCID;
    IV0REC.IV0PARTN = CLXREC.CLXPARTN;

    call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes}; /* sel unique vivhdx01*/

    if (SQLCA.VAGen_SQLCODE == 0 /* if invoice found and it is level pay*/
     /* invoice, go for the master invoice*/
     && IV0REC.IV-LVL-PAY-IND == "P")
      set VLVLPY01 empty;
      VLVLPY01.IV0IVCID = IV0REC.IV0IVCID;
      KL0E-GET-MSTR-IVC(); /* returns the master invoice, and*/
                                   /* tells user of the change*/

      if (SQLCA.VAGen_SQLCODE == 0) /* then go and get invoice data for that*/
                                   /* invoice*/
        CLXREC.IV0IVCID = VLVLPY01.IV-MSTR-IVC-ID; /* use master inv*/

        IV0REC.IV0IVCID = CLXREC.IV0IVCID; /* load key*/
        CLXREC.CLXORDIV = CLXREC.IV0IVCID;
        IV0REC.IV0PARTN = CLXREC.CLXPARTN;

        call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes}; /* sel unique on hdx01*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* everything found?*/
      CLXREC.CLXINVFD = "Y";
      CLXREC.IV0GROUP = IV0REC.IV0GROUP;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set IV0REC empty;
        CLXREC.IV0GROUP = IV0REC.IV0GROUP;
        CLXREC.CLXINVFD = "N";
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(4);
          return;
        else
          TA1REC.TA1DBASE = "DINVC";
          TA1REC.TA1TBLVU = "VIVHDX01";
          TA1REC.TA1LOCAT[2] = "SEL UNIQ";
          CLXREC.XXXWDTE = CLXREC.IV0IVCID;
          TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
          XPCL010();
        end
      end
    end
  end


    /* added below 4-11-88*/
  if (CLXREC.CLXINVFD == "Y" /* have new invoice*/
   && IV0REC.IV0IVCID != CL0EW01.IV0IVCID) /* not = previous invoice,*/
    CL0EW01.CL0EWCHI = "Y"; /* use flag in cl0es60, order type edit*/
  end
    /* added above 4-11-88*/


        /* decide if the order exists on the iv0rec*/
  if (CLXREC.OP1CUOID > 0
   && CLXREC.OP1NORID > 0)
    CLXREC.CLXORDIV = CLXREC.OP1CUOID;
    IV0REC.OP1PARTN = CLXREC.CLXPARTN;
    IV0REC.OP1CUOID = CLXREC.OP1CUOID;
    IV0REC.OP1NORID = CLXREC.OP1NORID;

    call "IO1110" ("SS", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO1110" ("SN", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes}; /* get first order*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLXREC.CLXORDFD = "Y"; /* order found flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set IV0REC empty;
          CLXREC.CLXORDFD = "N";
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(4);
            return;
          else
            if (SQLCA.VAGen_SQLCODE < 0)
              TA1REC.TA1DBASE = "DINVC";
              TA1REC.TA1TBLVU = "VIVHDX01";
              TA1REC.TA1LOCAT[2] = "SEL NXT";
              CLXREC.XXXWDTE = CLXREC.IV0IVCID;
              TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
              XPCL010();
            end
          end
        end
      end
    end
    call "IO1110" ("CS", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes}; /* close set for iv0rec*/
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVHDX01";
      TA1REC.TA1LOCAT[2] = "CLS SET";
      CLXREC.XXXWDTE = CLXREC.IV0IVCID;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end


   /* PERFORM XPCL008; validate source code;4-11-88 rename*/
  KL0ESIV(); /* 4-11-88 edit ibm/dec ivc source code*/

  if (CLXREC.CLXERRF == "Y")
    return;
  end


  if (CLXREC.CLXINVFD == "Y"
   || CLXREC.CLXORDFD == "Y")
     /* PERFORM XPCL009;            ;4-11-88 rename*/
    KL0ESIH(); /* 4-11-88 get ibm ivc*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end


  if (CLXREC.CLXINVFD == "Y")
    if (CLXREC.OP1CUOID == IV0REC.OP1CUOID
     /* if entered order nbr matches*/
     && CLXREC.OP1NORID == IV0REC.OP1NORID) /* the invoice nbr*/
      CLXREC.CLXWRTIV = "Y"; /* need to write invoice record*/
      CLBREC.OP1CUOID = IV0REC.OP1CUOID;
      CLBREC.OP1NORID = IV0REC.OP1NORID;
    else
      converseLib.validationFailed(115); /* order nbr doesn't match invoice nbr*/
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXWRTIV = "N"; /* don't write invoice record, error*/
    end
  else
    if (CLXREC.CLXORDFD == "Y")
      if (CLXREC.IV0IVCID == IV0REC.IV0IVCID)
        CLBREC.IV0IVCID = IV0REC.IV0IVCID;
        CLXREC.CLXWRTOR = "Y"; /* need to write order record*/
      else
        converseLib.validationFailed(115); /* order nbr doesn't match invoice nbr*/
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXWRTOR = "N"; /* don't write order, error*/
      end
    end
  end


end // end KL0ESIO

// validate ivc/dec source code
Function KL0ESIV()
   /* GET XPCL008*/
   /* ************************************************************/
   /* 12-23-91 twatso added code to check for active yittbl row **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0ESIV"; /* set current process name*/

    /* if needed change the indicator on clarec*/
    /* what is field name on clarec????????*/
   /* IF CLXREC.CLXITMX EQ 0;*/
    /* MOVE ' ' TO CLAREC.CLBIVIND;*/
   /* ELSE ;*/
    /* IF CLXREC.CLXITMX EQ 2;*/
      /* MOVE 'M' TO CLAREC.CLBIVIND;*/
    /* ELSE ;*/
      /* IF CLXREC.CLXITMX EQ 1;*/
        /* IF CLXREC.CLBIVIND = 'I';*/
          /* MOVE 'I' TO CLAREC.CLBIVIND;*/
        /* ELSE ;*/
          /* IF CLXREC.CLBIVIND = 'D';*/
            /* MOVE 'D' TO CLAREC.CLBIVIND;*/
          /* ELSE ;*/
            /* IF CLXREC.CLBIVIND = 'O';*/
             /* MOVE 'O' TO CLAREC.CLBIVIND;*/
           /* END ;*/
         /* END ;*/
       /* END ;*/
     /* END ;*/
   /* END ;*/
   /* END ;*/

    /* check defaults for invoice/order indicator*/
   /* IF CLXREC.CLXITMX GT 1;*/
    /* IF CLXREC.CLBIVIND EQ CLAREC.CLBIVIND;*/
      /* ; next sentence - same as default value*/
    /* ELSE ;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/

    /* check dec and old ibm invoices and orders*/
  if (YITTBL.YITIOIBM[CLXYITX] == "N") /* if invoice not on ibm*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* if active*/
      if (CLXREC.CLXORDFD == "N"
       && CLXREC.CLXINVFD == "N")
        /* next sentence*/
      else
        if (CLXREC.CLXORDFD == "Y"
         && CLXREC.CLXINVFD == "Y")
          converseLib.validationFailed(129); /* indicator invalid - invoice and order*/
                                   /* on file*/
          CLXREC.CLXERRF = "Y";
        else
          if (CLXREC.CLXORDFD == "Y")
            converseLib.validationFailed(130); /* indicator invalid - order on file*/
            CLXREC.CLXERRF = "Y";
          else
            if (CLXREC.CLXINVFD == "Y")
              converseLib.validationFailed(131); /* indicator invalid - invoice on file*/
              CLXREC.CLXERRF = "Y";
            end
          end
        end
      end
    else
      converseLib.validationFailed(128); /* this in an inactive yitcd*/
      CLXREC.CLXERRF = "Y";
    end
  end

    /* check current ibm invoices and orders*/

  if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if ivc supposed to be on ibm*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* if active*/
      if (CLXREC.CLXORDFD == "Y" /* and both order and*/
       && CLXREC.CLXINVFD == "Y") /* invoice are on file*/
        /* next sentence...nothing else to do*/
      else
        if (CLXREC.CLXORDFD == "N" /* if neither order nor*/
         && CLXREC.CLXINVFD == "N") /* invoice is on file*/
          CLXREC.CLXERRF = "Y"; /* it's an error*/
          converseLib.validationFailed(132); /* indicator invalid - no ivc or ord on*/
                                   /* file*/
        else
          if (CLXREC.CLXORDFD == "Y"
           && CLXREC.CLXINVFD == "N")
            if (CLXREC.IV0IVCID == 0)
              CLXREC.IV0IVCID = IV0REC.IV0IVCID; /* defaults*/
            else
              converseLib.validationFailed(130); /* order on file, invoice isn't*/
              CLXREC.CLXERRF = "Y";
            end
          else
            if (CLXREC.CLXORDFD == "N"
             && CLXREC.CLXINVFD == "Y")
              if (CLXREC.OP1CUOID == 0)
                CLXREC.OP1CUOID = IV0REC.OP1CUOID;
                CLXREC.OP1NORID = IV0REC.OP1NORID;
              else
                converseLib.validationFailed(131); /* invoice on file, order isn't*/
                CLXREC.CLXERRF = "Y";
              end
            end
          end
        end
      end
    else
      converseLib.validationFailed(128); /* this in an inactive yitcd*/
      CLXREC.CLXERRF = "Y";
    end
  end


end // end KL0ESIV

// Converse YRCTBL Pop Up Window
Function XPYRC01()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR THE ROOT CAUSE CODE TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XPYRCW01.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XPYRCW01.XX0XWFFL == "N") /* if not the first time through*/
      XPYRCW01.XX0XWCT1 = XPYRCW01.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = "ROOT CAUSE CODE TABLE"; /* heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XPYRCW01.XX0XWFFL == "Y")   /* Or it is the first time thru*/
      XPYRCW01.XX0XWCT2 = 1; /* Set up screen index*/
      while (XPYRCW01.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YRCTBL.YRC-RT-CSE-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YRCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YRCTBL.YCRCD[XX0XWCT1] == XPYRCW01.YCRCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = YRCTBL.YRC-RT-CSE-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YRCTBL.YRC-RT-CSE-DESC[XX0XWCT1];
            XPYRCW01.XX0XWINX[XX0XWCT2] = XPYRCW01.XX0XWCT1;
                                   /* Save array*/
            if (XPYRCW01.XX0XWFFL == "Y") /* If first time thru*/
              XPYRCW01.XX0XWSIX = XPYRCW01.XX0XWCT1;
                                   /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XPYRCW01.XX0XWCT2 = XPYRCW01.XX0XWCT2 + 1; /* Increment index*/
          end
        end
        XPYRCW01.XX0XWCT1 = XPYRCW01.XX0XWCT1 + 1; /* Increment table index*/
      end
      XPYRCW01.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XPYRCW01.XX0XWCT1 = XPYRCW01.XX0XWINX[1] - 1; /* Set up table index*/
      XPYRCW01.XX0XWCT2 = 10; /* Set up screen index*/
      while (XPYRCW01.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YRCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YRCTBL.YCRCD[XX0XWCT1] == XPYRCW01.YCRCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = YRCTBL.YRC-RT-CSE-CD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YRCTBL.YRC-RT-CSE-ABRV[XX0XWCT1];
            XPYRCW01.XX0XWINX[XX0XWCT2] = XPYRCW01.XX0XWCT1;
                                   /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XPYRCW01.XX0XWCT2 = XPYRCW01.XX0XWCT2 - 1; /* Decrement index*/
          end
        end
        XPYRCW01.XX0XWCT1 = XPYRCW01.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XPYRCW01.XX0XWCT1 < 1) /* If the table index was decremented*/
        XPYRCW01.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XPYRCW01.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XPYRCW01.XX0XWCT2 = 1; /* Screen index*/
  while (XPYRCW01.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != 0)
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XPYRCW01.XX0XWCT2 = XPYRCW01.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YRCTBL.YRC-RT-CSE-CD[XX0XWCT1] == "99")
    XPYRCW01.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XPYRCW01.XX0XWINX[1] <= XPYRCW01.XX0XWSIX)
      XPYRCW01.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XPYRCW01.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XPYRCW01.XX0XWCT2 = 1; /* Screen index*/
        while (XPYRCW01.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XPYRCW01.XX0XWPIX = XPYRCW01.XX0XWINX[XX0XWCT2];
            XPYRCW01.XX0XWCT2 = 11; /* End loop*/
          end
          XPYRCW01.XX0XWCT2 = XPYRCW01.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XPYRCW01.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYRC01

//*** RECORD=CL0EW01 ****
// ************************************************************
// *  description:  working storage for
// *     cl0e.
// *
// *  maintenance:
// *  1. added flag to see if a claim contains
// *     returns or not
// *
// * 08-10-90 CHELLM Added CL0EWCOF 'new comp-co-id' flag.
// * 10-12-90 bcourt KUCREC length change.
// * 01-07-90 chellm Added CL0EWNBW Nike Bank $$ warning fl.
// * 02-15-91 chellm Changed structure length due to KUCREC.
// * 07-31-91 CHELLM Added field to edit Cust Contact Phone#
// * 03-15-92 BCOURT KUCREC length change.
// * 08-13-93 jcarey kucgrp length change. database tbl change.
// * 11-12-93 GDECKE kucgrp,IV0GROUP LENGTH & DB2 CHANGES.
// * 03-11-94 BCOURT kucgrp length DB2 change.
// * 06-15-94 sgorga Added hold field for gpc code.
// * 10-09-97 CHELLM Added Root Cause Code table key fields
// *                    kl0ew-ycrtbl-key
// *                      kl0ew-ycrtbl-key-ycr
// *                      kl0ew-ycrtbl-key-yrc
// * 03-19-98 rgilli Added two date fields cl0ew-dt-enter  &
// *                 cl0ew-cur-dt.  These fields are used to
// *                 complete the date compare ccyy le ccyy.
// ************************************************************
// ***********************
Record CL0EW01 type basicRecord
  5 CL0EW1GP CL0EW1GP ; 
    10 CL0EWVRF CL0EWVRF ; 
    10 XDSWHSEF XDSWHSEF ; 
    10 CL0EWNCN CL0EWNCN ; 
      15 CL0EWCCN CL0EWCCN ; 
    10 CL0EWPIN CL0EWPIN ; 
    10 CL0EWNOI CL0EWNOI ; 
    10 CL0EWNOG CL0EWNOG ; 
    10 CL0EWNOA CL0EWNOA ; 
    10 CL0EWDCC CL0EWDCC ; 
    10 XXXUSRID XXXUSRID ; 
      15 CL0EWUSR CL0EWUSR ; 
        20 CL0EWULT CL0EWULT [8] ; 
    10 CLYATHPW CLYATHPW ; 
    10 CL0EWCUO CL0EWCUO ; 
      15 * char(8) ; 
      15 CL0EWOPC CL0EWOPC ; 
    10 CL0EWFNC CL0EWFNC ; 
    10 YMOKEY YMOKEY ; 
      15 CLWMNOPT CLWMNOPT ; 
      15 YCTCD YCTCD ; 
    10 CL0EWARP CL0EWARP ; 
      15 CL0EWAGY CL0EWAGY ; 
      15 CL0EWF1 CL0EWF1 ; 
      15 CL0EWREP CL0EWREP ; 
    10 CL0EWSIA CL0EWSIA ; 
    10 CL0EWFLO CL0EWFLO ; 
    10 CL0EWDON CL0EWDON ; 
    10 CL0EWNBW CL0EWNBW ; 
    10 CL0EWSCB CL0EWSCB ; 
    10 CL0EWSMF CL0EWSMF ; 
    10 CL0EWDFF CL0EWDFF ; 
    10 CL0EWIEF CL0EWIEF ; 
    10 CL0EWAEF CL0EWAEF ; 
    10 CL0EWOEF CL0EWOEF ; 
    10 CL0EWCEF CL0EWCEF ; 
    10 CL0EWCOF CL0EWCOF ; 
    10 CL0EWCNF CL0EWCNF ; 
    10 CL0EWUOK CL0EWUOK ; 
    10 CL0EWAAC CL0EWAAC ; 
    10 CL0EWACC CL0EWACC ; 
    10 CL0EWCNT CL0EWCNT ; 
    10 CL0EWSF1 CL0EWSF1 ; 
    10 YCSCD YCSCD ; 
    10 ARCREFNB ARCREFNB ; 
    10 ARCCCREF ARCCCREF ; 
    10 IV0IVCID IV0IVCID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 YCPNM YCPNM ; 
    10 CLBGLIND CLBGLIND ; 
    10 CLBSRIND CLBSRIND ; 
    10 KUYREPNM KUYREPNM ; 
    10 KUCGRPID KUCGRPID ; 
    10 CL0EWNBR CL0EWNBR ; 
    10 IV0GROUP IV0GROUP ; 
    10 KUCGRP KUCGRP [2] ; 
    10 CLYATHID CLYATHID ; 
    10 CL0EWCHI CL0EWCHI ; 
    10 CL0EWOTM CL0EWOTM ; 
      15 CL0EWOT1 CL0EWOT1 ; 
      15 CL0EWOT2 CL0EWOT2 ; 
      15 CL0EWOT3 CL0EWOT3 ; 
      15 CL0EWOT4 CL0EWOT4 ; 
    10 XOPCD XOPCD ; 
    10 CL0EWOTD CL0EWOTD ; 
    10 CL0EWHVR CL0EWHVR ; 
    10 CL0EWHRA CL0EWHRA ; 
    10 CL0EWCD CL0EWCD ; 
      15 CL0EWCDX CL0EWCDX [4] ; 
    10 CL0EWFVO CL0EWFVO ; 
    10 XLECD XLECD ; 
    10 CL0EWYIT CL0EWYIT ; 
    10 CL0EWDAF CL0EWDAF ; 
    10 XAUCD XAUCD ; 
    10 CL0EWXLE CL0EWXLE ; 
    10 KUCCOID KUCCOID ; 
    10 CL0EW-PHONE-COMMENT CL0EW-PHONE-COMMENT ; 
      15 CL0EW-PHONE-NUMBER CL0EW-PHONE-NUMBER ; 
        25 CL0EW-PHONE-AREA-CODE CL0EW-PHONE-AREA-CODE ; 
        25 CL0EW-PHONE-PREFIX CL0EW-PHONE-PREFIX ; 
        25 CL0EW-PHONE-SUFFIX CL0EW-PHONE-SUFFIX ; 
      15 * char(50) ; // filler
    10 CL0EW-ALW-CLM-RSN-CHNG CL0EW-ALW-CLM-RSN-CHNG ; 
    10 CL0EW-HLD-XGP-GPC-CD CL0EW-HLD-XGP-GPC-CD ; 
    10 KL0EW-YRCTBL-KEY KL0EW-YRCTBL-KEY ; 
      15 KL0EW-YRCTBL-KEY-YCR KL0EW-YRCTBL-KEY-YCR ; 
      15 KL0EW-YRCTBL-KEY-YRC KL0EW-YRCTBL-KEY-YRC ; 
    10 CL0EW-DT-ENTER CL0EW-DT-ENTER ; 
      15 CL0EW-DT-ENTER-CCYY CL0EW-DT-ENTER-CCYY ; 
      15 CL0EW-DT-ENTER-MMDD CL0EW-DT-ENTER-MMDD ; 
    10 CL0EW-CUR-DT CL0EW-CUR-DT ; 
      15 CL0EW-CUR-DT-CCYY CL0EW-CUR-DT-CCYY ; 
      15 CL0EW-CUR-DT-MMDD CL0EW-CUR-DT-MMDD ; 
end // end CL0EW01

//*** RECORD=CL0EW02 ****
// *******************  Claim Header Table  *******************
// 
// DB2 Table:           DCLAIM.VCLHDR01
// 
//      View:           DCLAIM.VCLHDR02
// 
// Copylib Member:      DCLHDR02
// 
// I/O Mod:             VCLHDR02
// 
// Key to DB2 Table:    CLACLMNB
// 
// Date Created:        10/08/97
// 
// Maintenance Log:
//   Date    Init.   Comment
// --------  -----   ---------------------------------------
// 10-08-97  CHELLM  Initial record creation
// ***********************
Record CL0EW02 type basicRecord
  5 VCLHDR02-GROUP VCLHDR02-GROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 CL-WRITE-OFF-IND CL-WRITE-OFF-IND ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CUPO OP1CUPO ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 YCTCD YCTCD ; 
    10 CLAPRYCT CLAPRYCT ; 
    10 CLACAIND CLACAIND ; 
    10 YCSCD1 YCSCD1 ; 
      15 YCSCD YCSCD ; 
    10 YCSCD2 YCSCD2 ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLASTTDT CLASTTDT ; 
    10 CLASCGBY CLASCGBY ; 
    10 CLASETDT CLASETDT ; 
    10 YCRCD YCRCD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 XIECD XIECD ; 
    10 XSOCD XSOCD ; 
    10 CLADNLFL CLADNLFL ; 
    10 CLADNLDT CLADNLDT ; 
    10 CLACTCNM CLACTCNM ; 
    10 CLACCLDT CLACCLDT ; 
    10 CLAOCAMT CLAOCAMT ; 
    10 CLAOCQTY CLAOCQTY ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLATQTY CLATQTY ; 
    10 CLABLGFF CLABLGFF ; 
    10 KUCBLAID KUCBLAID ; 
    10 CLASHPFF CLASHPFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 CLARTNFF CLARTNFF ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 CLYATHID CLYATHID ; 
    10 CLAPRATH CLAPRATH ; 
    10 CLAAUTHF CLAAUTHF ; 
    10 XCECD XCECD ; 
    10 KUYSVRID KUYSVRID ; 
    10 YCPCD YCPCD ; 
    10 XWHCD XWHCD ; 
    10 XPTCD XPTCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 CLACSQNB CLACSQNB ; 
    10 CLACRTNB CLACRTNB ; 
    10 CLACISNB CLACISNB ; 
    10 CLAWSENF CLAWSENF ; 
    10 CLAORIGI CLAORIGI ; 
    10 CLADBOCL CLADBOCL ; 
    10 YITCD YITCD ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
    10 CLAXCIND CLAXCIND ; 
    10 CLAMEIND CLAMEIND ; 
    10 CLACMIND CLACMIND ; 
    10 CLATFIND CLATFIND ; 
    10 CLACNIND CLACNIND ; 
    10 CLADJIND CLADJIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0EW02

//*** RECORD=CL0EW03 ****
// ************************************************************
// *                    CL0EW03                               *
// *                    -------                               *
// *                                                          *
// *   This working-storage record record is used to store    *
// *   items that are use in determining whether fields       *
// *   that require expansions (code descriptions, rep        *
// *   names, etc) have been changed.                         *
// *                                                          *
// * Maintenance History:                                     *
// *                                                          *
// * 08-10-90 CHELLM Added OP1CMPNB comp-co-id to the record. *
// * 10-12-90 bcourt change XCGCD to OP1COGID.                *
// *                 change XCUCD(3) to XCECD.                *
// ************************************************************
// ***********************
Record CL0EW03 type basicRecord
  5 CL0EW3GP CL0EW3GP ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XDVCD XDVCD ; 
    10 YCTCD YCTCD ; 
    10 XPTCD XPTCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 CL0EWARP CL0EWARP ; 
    10 XSOCD XSOCD ; 
    10 XCECD XCECD ; 
    10 YCRCD YCRCD ; 
    10 YRC-RT-CSE-CD YRC-RT-CSE-CD ; 
    10 XTTDESC XTTDESC ; 
    10 XWHCD XWHCD ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 XXXUSRID XXXUSRID ; 
    10 YCSCD YCSCD ; 
    10 CLYATHPW CLYATHPW ; 
    10 XLECD XLECD ; 
    10 XBCCD XBCCD ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 CL0EMPHN CL0EMPHN ; 
end // end CL0EW03

//*** RECORD=CL0EW04 ****
// pass calculated sums from dclaim.vdefit01.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0EW04 type basicRecord
  5 CL0EW4GR CL0EW4GR ; 
    10 CL0EWSQL CL0EWSQL ; 
    10 CL0EWCN1 CL0EWCN1 ; 
    10 CL0EWIN1 CL0EWIN1 ; 
end // end CL0EW04

//*** RECORD=CL0EW05 ****
// pass calculated sums from database.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0EW05 type basicRecord
  5 CL0EW5GR CL0EW5GR ; 
    10 CL0EWSQL CL0EWSQL ; 
    10 CL0EWCN1 CL0EWCN1 ; 
    10 CL0EWCN2 CL0EWCN2 ; 
    10 CL0EWSM1 CL0EWSM1 ; 
    10 CL0EWIN1 CL0EWIN1 ; 
end // end CL0EW05

//*** RECORD=CL0EW06 ****
// pass calculated sums from database.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0EW06 type basicRecord
  5 CL0EW6GR CL0EW6GR ; 
    10 CL0EWSQL CL0EWSQL ; 
    10 CL0EWCN1 CL0EWCN1 ; 
    10 CL0EW6S1 CL0EW6S1 ; 
    10 CL0EWIN1 CL0EWIN1 ; 
    10 CL0EW6S2 CL0EW6S2 ; 
    10 CL0EWIN2 CL0EWIN2 ; 
    10 CL0EW6S3 CL0EW6S3 ; 
    10 CL0EWIN3 CL0EWIN3 ; 
    10 CL0EW6S4 CL0EW6S4 ; 
    10 CL0EWIN4 CL0EWIN4 ; 
end // end CL0EW06

//*** RECORD=CL0EW07 ****
// pass calculated sums from database.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0EW07 type basicRecord
  5 CL0EW7GR CL0EW7GR ; 
    10 CL0EWSQL CL0EWSQL ; 
    10 CL0EWCN1 CL0EWCN1 ; 
    10 CL0EW7S1 CL0EW7S1 ; 
    10 CL0EW7S2 CL0EW7S2 ; 
    10 CL0EW7S3 CL0EW7S3 ; 
    10 CL0EWIN1 CL0EWIN1 ; 
    10 CL0EWIN2 CL0EWIN2 ; 
    10 CL0EWIN3 CL0EWIN3 ; 
end // end CL0EW07

//*** RECORD=CL0EW08 ****
// find if completed claims exist for a given invoice and
// any authorized returns exist (ycs equal
// cmp,roa,rpa,rpi,rpm,xra)
// ;
// find if any open rfl or rts claims exist for a given invoice
// ;
// ;*=========================================================*
// ;*      M A I N T E N A N C E     H I S T O R Y            *
// ;*---------------------------------------------------------*
// ;* CHNG#   DATE    PGMR     DESCRIPTION                    *
// ;*---------------------------------------------------------*
// ;* CL0    11/22/91 GDECKE  ADDED CLASTTDT,YCRCD,YCTCD.     *
// ;*=========================================================*
// ***********************
Record CL0EW08 type basicRecord
  5 CL0EW8GP CL0EW8GP ; 
    10 CL0EWSQL CL0EWSQL ; 
    10 YCSCD YCSCD [9] ; 
    10 CLACLMNB CLACLMNB ; 
    10 IV0IVCID IV0IVCID ; 
    10 IV0PARTN IV0PARTN ; 
    10 YITCD YITCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 CL0EWCN1 CL0EWCN1 ; 
    10 CL0EWRTN CL0EWRTN ; 
    10 CLASTTDT CLASTTDT ; 
    10 YCRCD YCRCD ; 
    10 YCTCD YCTCD ; 
end // end CL0EW08

//*** RECORD=CL0EW09 ****
// This is an new copy of kucrec to be used after the data
//  base changes in October 1991
// 
// this is the csp working storage format company table.  the
// table contains data that is specific to the company level
// of the customer data base.
// 
// db2 table:        dcust.vcmpny01
// 
// dclgen:           dcl00021
// 
// i/o mod:          io0240
// 
// key to table:     kuccoid   -   cu-co-id
// 
// date created:     4/4/86
// 03-15-92  bcourt  DB structure change.
// 08-13-93  jcarey  db structure change. kucgrp length changed
// 11-12-93  GDECKE  db structure change. kucgrp length changed
// 03-11-94  BCOURT  db structure change. kucgrp length changed
// ************************************************************
// ***********************
Record CL0EW09 type basicRecord
  5 KUCGRP KUCGRP ; 
    10 KUCCOID KUCCOID ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KUCCOIDN KUCCOIDN ; 
    10 KUCCONM KUCCONM ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 KUCCOANM KUCCOANM ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KUCPHN KUCPHN ; 
    10 XLECD XLECD ; 
    10 XCTCD XCTCD ; 
    10 KUCCNTCT KUCCNTCT ; 
    10 KUCCOBDT KUCCOBDT ; 
    10 KUCFINDT KUCFINDT ; 
    10 KUCSSCNT KUCSSCNT ; 
    10 KUCNSCNT KUCNSCNT ; 
    10 KUCMSTID KUCMSTID ; 
    10 KUCMADID KUCMADID ; 
    10 XLGCD XLGCD ; 
    10 XCRCD XCRCD ; 
    10 XCUCD XCUCD [2] ; 
    10 XCECD XCECD ; 
    10 XAUCD XAUCD ; 
    10 YCH-CHNL-CLS-CD YCH-CHNL-CLS-CD ; 
    10 YCPCD YCPCD ; 
    10 KUCCOLCD KUCCOLCD ; 
    10 KUCBPIND KUCBPIND ; 
    10 KUCLBOFL KUCLBOFL ; 
    10 KUCIDIND KUCIDIND ; 
    10 XIECD XIECD ; 
    10 CU-PRT-XREF-FL CU-PRT-XREF-FL ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUCATCSH KUCATCSH ; 
    10 KUCCSHNF KUCCSHNF ; 
    10 KUCPOFL KUCPOFL ; 
    10 KUCYPOFT KUCYPOFT ; 
    10 KUCYPOAP KUCYPOAP ; 
    10 KUCWHSFL KUCWHSFL ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 KUCSTMT KUCSTMT ; 
    10 YVICD YVICD [3] ; 
    10 YLICD YLICD ; 
    10 KUCXCSFL KUCXCSFL ; 
    10 KUCINSPD KUCINSPD ; 
    10 KUCFRTPD KUCFRTPD ; 
    10 KUCALERT KUCALERT ; 
    10 KUCMAGCT KUCMAGCT ; 
    10 KUCCNSCD KUCCNSCD ; 
    10 KUCPSFL KUCPSFL ; 
    10 CU-CR-APPL-DT CU-CR-APPL-DT ; 
    10 KUCCRLEF KUCCRLEF ; 
    10 KUCCRLEX KUCCRLEX ; 
    10 KUCCRLIN KUCCRLIN ; 
    10 KUCASMT KUCASMT ; 
    10 XCCCD XCCCD ; 
    10 KUCCSTDT KUCCSTDT ; 
    10 XCACD XCACD ; 
    10 KUCACYNR KUCACYNR ; 
    10 KUCACYDT KUCACYDT ; 
    10 KUCAPDEX KUCAPDEX ; 
    10 KUCACYRT KUCACYRT ; 
    10 KUCPRVRT KUCPRVRT ; 
    10 KUCLVIND KUCLVIND ; 
    10 CU-LST-DAB-RPT-DT CU-LST-DAB-RPT-DT ; 
    10 KUCLCEDT KUCLCEDT ; 
    10 KUCLCXDT KUCLCXDT ; 
    10 KUCLCAMT KUCLCAMT ; 
    10 KUCJSRFL KUCJSRFL ; 
    10 KUCRAUTH KUCRAUTH ; 
    10 CU-BILL-IND CU-BILL-IND ; 
    10 CU-PO-DT-FL CU-PO-DT-FL ; 
    10 KUCECODY KUCECODY ; 
    10 KUCPDSPD KUCPDSPD ; 
    10 XLBCD XLBCD ; 
    10 CU-HANG-DFLT-FL CU-HANG-DFLT-FL ; 
    10 KUCSTYNT KUCSTYNT ; 
    10 CU-MAX-FTWR-YNT-CD CU-MAX-FTWR-YNT-CD ; 
    10 CU-MAX-APRL-YNT-CD CU-MAX-APRL-YNT-CD ; 
    10 YCU-CRTN-USE-CD YCU-CRTN-USE-CD ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 CU-PL-STYNM-PRT-FL CU-PL-STYNM-PRT-FL ; 
    10 CU-DOC-BY-ORD-FL CU-DOC-BY-ORD-FL ; 
    10 KUCFTRTI KUCFTRTI ; 
    10 KUCPRPTI KUCPRPTI ; 
    10 XOPCD XOPCD [4] ; 
    10 KUCAPRDT KUCAPRDT ; 
    10 KUCFPRDT KUCFPRDT ; 
    10 KUCSBKFL KUCSBKFL ; 
    10 KUCCOMNT KUCCOMNT ; 
    10 KUCSKIND KUCSKIND ; 
    10 CU-CUSKU-SZ-FL CU-CUSKU-SZ-FL ; 
    10 CU-EDI-CUST-IND CU-EDI-CUST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 CU-CO-SELF-NBR CU-CO-SELF-NBR ; 
    10 CU-VEND-NBR CU-VEND-NBR ; 
    10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0EW09

//*** RECORD=CL4REC ****
// *******  Claim Special Users-Special Products Table  *******
// 
// DB2 Table:           DCLAIM.VATHLM01
// 
// Copylib Member:      DCL00518
// 
// I/O Mod:             IO2820
// 
// Key to DB2 Table:    XXXUSERID for Special User's Table
//                      XGPCD
//                  or
//                      XSOCD     for Special Product's Table
//                      product info
// 
// Maintenance Log:
//   Date    Init.  Comment
// --------  -----  ---------------------------------------
// 07-26-88 bcourt  Initial record creation
// 09-19-88 bcourt  fix prologue
// 04-06-90 bcourt  add XBC-BRAND-CD.
// 
// **********************
Record CL4REC type basicRecord
  5 CL4GROUP CL4GROUP ; 
    10 XXXUSRID XXXUSRID ; 
    10 XSOCD XSOCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XGPCD XGPCD ; 
    10 XQACD XQACD ; 
    10 XLCCD XLCCD ; 
    10 XPLCD XPLCD ; 
    10 XFMCD XFMCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL4REC

//*** RECORD=CL5REC ****
// *******  Claim Secondary Sales office Table  ***************
// 
// DB2 Table:           DCLAIM.VCLXSO01
// 
// Copylib Member:      DCL00521
// 
// I/O Mod:             IO2850
// 
// Key to DB2 Table:    XSOCD
//                      XXXUSRID
// 
// Maintenance Log:
//   Date    Init.  Comment
// --------  -----  ---------------------------------------
// 07-26-88 bcourt  Initial record creation
// 09-19-88 bcourt  fix prologue
// 
// **********************
Record CL5REC type basicRecord
  5 CL5GROUP CL5GROUP ; 
    10 XSOCD XSOCD ; 
    10 XXXUSRID XXXUSRID ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL5REC

//*** RECORD=XPYRCW01 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window processes - xpxx001
//            and xp???01. ( Where ??? is the table name
//            associated with the pop-up window process.)
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03-25-88  CEPPLE  Created
//          03-30-89  jvande  replaced xtvcd with xgpcd.
//          07-25-89  mchris  added xwhcd.
//          08/01/89  SPOPA   Added YPGFFFL field.
// ************************************************************
// ************************
Record XPYRCW01 type basicRecord
  10 XX0XWCT1 XX0XWCT1 ; 
  10 XX0XWCT2 XX0XWCT2 ; 
  10 XX0XWSIX XX0XWSIX ; 
  10 XX0XWPIX XX0XWPIX ; 
  10 XX0XWINX XX0XWINX [10] ; 
  10 XX0XWEND XX0XWEND ; 
  10 XX0XWFFL XX0XWFFL ; 
  10 XX0XWERR XX0XWERR ; 
  10 XX0XWHDR XX0XWHDR ; 
  10 YCRCD YCRCD ; 
  10 XX0XWNUM XX0XWNUM ; 
    15 XX0XWCHA XX0XWCHA ; 
  10 YESCDIND YESCDIND ; 
end // end XPYRCW01

// ALLOW CLAIM REASON TO CHANGE
DataItem CL0EW-ALW-CLM-RSN-CHNG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0EW-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0EW-CUR-DT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0EW-CUR-DT-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0EW-DT-ENTER num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0EW-DT-ENTER-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0EW-DT-ENTER-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold field for gpc code
DataItem CL0EW-HLD-XGP-GPC-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Area Code
DataItem CL0EW-PHONE-AREA-CODE char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone Nbr
DataItem CL0EW-PHONE-COMMENT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone Nbr
DataItem CL0EW-PHONE-NUMBER char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Prefix
DataItem CL0EW-PHONE-PREFIX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Suffix
DataItem CL0EW-PHONE-SUFFIX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level of cl0ew01 record
DataItem CL0EW1GP char(1239)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of cl0ew03 record
DataItem CL0EW3GP char(128)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0EW4GR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0EW5GR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0EW6GR char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum of def qty
DataItem CL0EW6S1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum of noncr qty
DataItem CL0EW6S2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum of rtn cust qty
DataItem CL0EW6S3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum of price * def qty
DataItem CL0EW6S4 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record group level
DataItem CL0EW7GR char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum of rts noncr qty
DataItem CL0EW7S1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum of rts cr qty
DataItem CL0EW7S2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum ofrts cr qty * price
DataItem CL0EW7S3 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0ew08 record group level
DataItem CL0EW8GP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// addl a/r clm nbr counter
DataItem CL0EWAAC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// addl cust clm nbr counter
DataItem CL0EWACC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// a/r ref nbr entered flag
DataItem CL0EWAEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws sales agency code
DataItem CL0EWAGY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated sales agency/rep
DataItem CL0EWARP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character-format claim number
DataItem CL0EWCCN char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment field on map
DataItem CL0EWCD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type of comments for claim
DataItem CL0EWCDX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer-nbr-entered-flag
DataItem CL0EWCEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chged invc, force new ord type
DataItem CL0EWCHI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem CL0EWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0EWCN2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new claim-nbr-ok flag
DataItem CL0EWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working counter
DataItem CL0EWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new comp-co entered flag
DataItem CL0EWCOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws customer order id
DataItem CL0EWCUO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// default agency/rep flag
DataItem CL0EWDAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default cust clm nbr flag
DataItem CL0EWDCC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have-default-on-screen flag
DataItem CL0EWDFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// done-flag
DataItem CL0EWDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 1
DataItem CL0EWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flow-to-next-appl-flag
DataItem CL0EWFLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested function
DataItem CL0EWFNC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xvo line found flag
DataItem CL0EWFVO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// does a claim have an r.a.
DataItem CL0EWHRA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// does a claim have returns
DataItem CL0EWHVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem CL0EWIEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// indicator for sum #1
DataItem CL0EWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator for sum #2
DataItem CL0EWIN2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator for sum #3
DataItem CL0EWIN3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator for sum #4
DataItem CL0EWIN4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working number
DataItem CL0EWNBR num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nike Bank $$ warning fl
DataItem CL0EWNBW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric-format claim number
DataItem CL0EWNCN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of adjustments
DataItem CL0EWNOA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of g/l's
DataItem CL0EWNOG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of invoices
DataItem CL0EWNOI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order-entered-flag
DataItem CL0EWOEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws order part character
DataItem CL0EWOPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message part 1
DataItem CL0EWOT1 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new invoice's order type
DataItem CL0EWOT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message part 2
DataItem CL0EWOT3 char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current claim order type
DataItem CL0EWOT4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// did order type default y/n
DataItem CL0EWOTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning message-new o/t ne cur
DataItem CL0EWOTM char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// primary invoice number
DataItem CL0EWPIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws sales rep code
DataItem CL0EWREP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return flag
DataItem CL0EWRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status-chngd-back-to-open flag
DataItem CL0EWSCB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ycaid error msg shown flag
DataItem CL0EWSF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stay-in-this-application flag
DataItem CL0EWSIA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum for database item
DataItem CL0EWSM1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen-was-modified flag
DataItem CL0EWSMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql selection
DataItem CL0EWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// letters in userid
DataItem CL0EWULT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update-went-ok-flag
DataItem CL0EWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0EWUSR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid claim reason flag (y/n)
DataItem CL0EWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE XLE_LGL_ENTITY_CD
DataItem CL0EWXLE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank ivc brand is okay='y'
DataItem CL0EWYIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL4GROUP char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL5GROUP char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key
DataItem KL0EW-YRCTBL-KEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key claim reason code
DataItem KL0EW-YRCTBL-KEY-YCR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yrctbl key root cause code
DataItem KL0EW-YRCTBL-KEY-YRC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

