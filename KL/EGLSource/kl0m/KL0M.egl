package kl0m;

import as1.common.ARCCCREF;
import corpcom1.CLACLMNB;
import corpcom1.CLAREC;
import corpcom1.CLBREC;
import corpcom1.CLCREC;
import corpcom1.CLHMEMAM;
import corpcom1.CLHMEMDT;
import corpcom1.CLHMEMNB;
import corpcom1.CLHNETFL;
import corpcom1.CLHREC;
import corpcom1.CLHSEQNB;
import corpcom1.CLICRDFL;
import corpcom1.CLJREC;
import corpcom1.CLKCLPRC;
import corpcom1.CLKPRCFF;
import corpcom1.CLKREC;
import corpcom1.CLNNTPRC;
import corpcom1.CLNREC;
import corpcom1.CLPREC;
import corpcom1.CLRREC;
import corpcom1.CLWREC;
import corpcom1.CLXREC;
import corpcom2.XQWREC;
import corpcom3.XPCL002;
import corpcom3.XPCL008;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XDMTBL;
import corpx1.XDSTBL;
import corpx1.XGPABRV;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XIETBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XPTTBL;
import corpx1.XQATBL;
import corpx1.XUMTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XQAABRV;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XUMDESC;
import corpy2.YATTBL;
import corpy2.YCSTBL;
import corpy2.YCTADJF;
import corpy2.YCTDEF;
import corpy2.YCTRTSF;
import corpy2.YCTTBL;
import corpy2.YUATBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fy.common.FY1REC;
import iv.common.IV0REC;
import iv.common.IVAREC;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KUIPRDID;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import sm.common.SM4REC;
import sp.common.SP1REC;
import sy.common.SY1REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY4DATA;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import sy.common.SY4ZDESC;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import tf.common.TF1REC;
import vv.common.VCUCPX01;
import ww.common.WCU1710;
//*** PROGRAM=KL0M ****
// maintenance log
//  date   done by  what was done
// -------- ------ --------------------------------------------
// 03-23-89 bcourt move XOT_ORD_TYP_CD from IV0REC to IVAREC.
// 04-26-89 gdecke switch from xot to xob - sport/casual.
// 05-16-89 gdecke DB2 structure changes: clarec,
//                 kucrec, sy2rec, xwhtbl.
// 08-01-89 gdecke DB2 structure changes: clarec, clprec,
//                 ivarec, sp1rec. remove ref to clerec
// 09-14-89 gdecke io1330 changed to use xum, xqa.
// 09-22-89 bcourt DB2 structure changes: PD1rec, XPTTBL.
//                 Remove 5-16 ref to unused recs: CL I, SY C;
//                 & tbl: X CT.
// 01-19-90 bcourt DB2 structure changes: clhrec,ivarec,kucrec,
//                 kumrec,kuirec.
//                 Replace KUIrec with KU2REC; use nike prod ID
//                   to get customer sku ID (cl0m390 & 984).
// 02-22-90 chellm Replaces DWPROD.VFCTY001 with DFCTY.VFCTY001
//                 Renamed PD1... items to FY1... items.
//                 Replaced IO0870 with IO2810.
// 08-15-90 CHELLM ADDED COMP_CO_ID TO THE MAP WITH THE VALUE
//                 ORIGINATING FROM CLAREC.
// 08-16-90 GDECKE Expand product table cl0mw05 to 500 lines.
//                 add cl0mw06 table to handle the overflow
//                 data by segmenting the lines. expand table
//                 cl0mw10 to 500 lines.
//  1-16-91 bcourt remove cl2 rec (VRINSP01) = not used.
// 06-14-91 sgorga DB2 changes.  Replaced KU2REC with KUIREC.
//                 Changed processes CL0M390, 984.
// 08-08-91 wjohns Renamed application and commarea referrences
//                   to claims appls.
// 09-18-91 ahowar changed proc and sgrp from "cl" to "kl".
// 10-31-91 twatso added code for osd to be treated like def
//                 for installation in dec 91
// 01-13-92 sgorga Set ta1rec empty - kl0m001.
// 05-18-92 twatso remove clxerrf = y if new memo number enterd
//                 in m100
// 05-22-92 twatso replace clarec.xobcd abbrev with iv0rec.
//                 xobcd abbreviation.remove clarec code
// 02-25-98 GDECKE REMOVE PF KEY FOR KL0H - AR REF SCREEN.
// 09-09-99 ssank1 Changed map presentation KL0MM001 to
//                 accomodate 4 digit nike ord id.
// 11-28-01 SVIJAY RECOMPILED DUE TO CHANGES IN CLPREC.
// ************************************************************
// *********************
Program KL0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0MW01 CL0MW01; // record
  CL0MW05 CL0MW05; // record
  CL0MW06 CL0MW06; // record
  CL0MW10 CL0MW10; // record
  CL0MW20 CL0MW20; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLHREC CLHREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLNREC CLNREC; // record
  CLPREC CLPREC; // record
  CLRREC CLRREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  IV0REC IV0REC; // record
  IVAREC IVAREC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  SM4REC SM4REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TF1REC TF1REC; // record
  VCUCPX01 VCUCPX01; // record
  WCU1710 WCU1710; // record
  XQWREC XQWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIETBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0MM.KL0MM001, // forms
  	KL0MM.KL0MM005,
  	KL0MM.KL0MM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0M000: KL0M000();
    exit program;
    KL0M001: KL0M001();
    KL0M050: KL0M050();
    KL0M100: KL0M100();
    KL0M101: KL0M101();
    KL0M110: KL0M110();
    KL0M120: KL0M120();
    KL0M200: KL0M200();
    KL0M201: KL0M201();
    KL0M205: KL0M205();
    KL0M210: KL0M210();
    if (CLXREC.CLXERRF == "Y")
      KL0MM005.VAGen_EZEMSG = "INVALID KEY";
      CLXREC.CLXSCRNX = 2;
      CLXREC.CLXCSCRN = "CL0MM005";
      CLXREC.CLXEOSF = "Y";
    end
    ;
    ;
     /* IF CL0MW01.CL0MWISN NE 0;*/
     /* MOVE 0 TO CLWREC.SY5SZID;*/
     /* CL0M300;*/
     /* END ;*/
    ;
    ;
     /* IF EZEAID IS PF7;*/
     /* OR EZEAID IS PF8;*/
     /* PERFORM CL0M200;*/
     /* END ;*/
    KL0M220: KL0M220();
    KL0M290: KL0M290();
    KL0M300: KL0M300();
    KL0M305: KL0M305();
    KL0M310: KL0M310();
     /* IF CLXREC.CLXERRF EQ 'Y';*/
     /* MOVE 244 TO EZEMNO;*/
     /* MOVE 2 TO CLXREC.CLXSCRNX;*/
     /* MOVE 'CL0MM005' TO CLXREC.CLXCSCRN;*/
     /* MOVE 'Y' TO CLXREC.CLXEOSF;*/
     /* END ;*/
    KL0M320: KL0M320();
  end // end main
end // end KL0M

// application main logic
Function KL0M000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xpcl001 checks to ensure that the claim header has    **/
   /* *         been flagged as "in use" if this application    **/
   /* *         is does updates.                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  ;
  ;
  ;
  KL0M001(); /* initilize the application*/
  ;
  KL0MM001.XXXRVNBR = "0"; /* appl maint revision number*/
  KL0MM010.XXXRVNBR = "0"; /* appl maint revision number*/
  KL0MM005.XXXRVNBR = "0"; /* appl maint revision number*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0M050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/
  ;
  ;
  ;
  ;
end // end KL0M000

// initialize application
Function KL0M001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                        **/
   /* 01-13-92  sgorga  Set ta1rec empty.                       **/
   /* ************************************************************/
  ;
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
   /* TEMP001;*/
  ;
  XSENTRY(); /* CHECK ENTERED THRU MAIN MENU*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry module*/
  ;
  XPCL008(); /* reset clwactiv flag*/
  ;
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  ;
  set KL0MM001 initial;
  set KL0MM005 initial;
  set KL0MM010 initial;
  set TA1REC empty;
  set CLBREC empty; /* clear out*/
  set CLHREC empty; /* clear out*/
  set CLKREC empty; /* clear out*/
  set CLNREC empty; /* clear out*/
  set CLRREC empty; /* clear out*/
  set CLPREC empty; /* clear out*/
  set SY4REC empty; /* clear out*/
  set KUCREC empty; /* clear out*/
  set IVAREC empty;
  set IV0REC empty;
  set SQLCA empty;
  set CL0MW01 empty; /* clear out*/
  set CL0MW05 empty; /* clear out*/
  set CL0MW06 empty; /* clear out*/
  set CL0MW10 empty; /* clear out*/
  set CL0MW20 empty; /* clear out*/
  if (COMMAREA.CAFROMAP != "CL0M")
    CL0MW01.CL0MWLID = CLWREC.CLWCLIDX;
    CL0MW01.CL0MWFAP = COMMAREA.CAFROMAP;
    CLWREC.CLWCLIDX = 0;
  end
  CL0MW01.CL0MWFL1 = 0;
  CL0MW01.CL0MWFL2 = 1;
  KL0MM001.CL0MWCD = "NONE"; /* init comment description*/
  ;
  ;
  ;
  CLXREC.CLXCSCRN = "KL0MM001"; /* set first screen name*/
  ;
  CLXREC.CLXSNAME[1] = "KL0MM001"; /* initialize the names of the*/
  CLXREC.CLXSNAME[2] = "KL0MM005"; /* screens used in this*/
  CLXREC.CLXSNAME[3] = "KL0MM010"; /* application*/
  ;
  CLXREC.CLXMAXLN[1] = 10;
  CLXREC.CLXARY1X[1] = 1;
  ;
  ;
  CLXREC.CLXMAXLN[2] = 12;
  CLXREC.CLXARY1X[2] = 1;
  ;
  CLXREC.CLXMAXLN[3] = 11;
  CLXREC.CLXARY1X[3] = 1;
  ;
  CLXREC.CLXARAYX = 1;
  CLXREC.CLXLINEX = 1;
  ;
  CL0MW01.CL0MWMXL = 499;
  CL0MW01.CL0MWMAX = 500;
  CL0MW01.CL0MWMXH = 501;
  ;
  KL0M002();
  ;
  ;
  ;
  ;
end // end KL0M001

// check menu option security
Function KL0M002()
   /* ************************************************************/
   /* *      check the menu option security                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  if (CLWREC.CLWACTIV == "I") /* if in 'inquiry' mode*/
    if (COMMAREA.CAINQFL == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(99); /* not authorized to inquire*/
      CLXREC.CLXBLDSC = "N"; /* don't build the screen*/
      return;
    end
  end
  ;
  ;
  ;
  ;
end // end KL0M002

// main cl0m branch control
Function KL0M050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M050"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0mm001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0M100(); /* process screen cl0mm001*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0mm005*/
      while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
        KL0M200(); /* process screen cl0mm005*/
      end
    else
      if (CLXREC.CLXSCRNX == 3) /* if screen cl0mm010*/
        while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
          KL0M300(); /* process screen cl0mm010*/
        end
      else
        TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
        XPCL010();
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf) = 'n'*/
           /* we go back to the top of cl0m050...*/
       /* if the end-of-application flag (clxeoaf) = 'y'*/
           /* we return to cl0m000.*/
  ;
  ;
  ;
end // end KL0M050

// converse screen m001, memo
Function KL0M100()
   /* ************************************************************/
   /* *    process screen cl0mm001, memo information            **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0m050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
  /* * 09-06-91 bcourt  chg cl to kl for CLXCSCRN.             **/
  /* * 05-18-92 twatso  remove err flag if memo number is different*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0M100"; /* set current process name*/
  ;
  if (CLXREC.CLXERRF != "Y")
    set KL0MM001 initial;
  else
    CLXREC.CLXERRF = "N";
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2)
    if (COMMAREA.CATOAP != "KL0M")
      KL0M101(); /* BUILD SCREEN*/
    end
  end
  ;
  converse KL0MM001 ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  KL0M110(); /* handle any special entries*/
  ;
  if (converseVar.validationMsgNum != 0)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXSCRNX = 1;
    CLXREC.CLXCSCRN = "KL0MM001"; /* reshow same map*/
  else
    ;
    if (KL0MM001.CLHMEMNB is modified
     || KL0MM001.CLHSEQNB is modified)
      COMMAREA.CAFROMAP = "KL0M"; /* used in kl0m101 build map*/
      CLWREC.CLHMEMNB = KL0MM001.CLHMEMNB;
      CLWREC.CLHSEQNB = KL0MM001.CLHSEQNB;
      CL0MW01.CL0MWNEW = "Y";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEDITF = "Y";
     /* MOVE 'Y' TO CLXREC.CLXERRF;is an error?? removed 5-18-92*/
      CLXREC.CLXSCRNX = 1;
      CLXREC.CLXCSCRN = "KL0MM001"; /* 9-6-91 chg cl to kl*/
    else
      /* MOVE COMMAREA.CAFROMAP TO CL0MW01.CL0MWFAP;*/
      CL0MW01.CL0MWNEW = " ";
    end
    ;
    if (CL0MW01.CL0MWNEW != "Y")
      KL0M120(); /* go process screen entries*/
      if (CLXREC.CLXLSTAX == 0)
        CLXREC.CLXERRF = "Y";
      end
      ;
      if (CLXREC.CLXERRF == "Y")
        if (converseVar.validationMsgNum != 0)
          CL0MW01.CL0MWPFF = "N";
        else
          converseLib.validationFailed(289); /* no product info exists for record*/
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          CLXREC.CLXERRF = "N";
        end
      else
        ;
        if (CL0MW01.CL0MWERF == "Y")
          converseLib.validationFailed(14); /* bad sequence number*/
          set KL0MM001.CLHSEQNB cursor, bold;
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          CL0MW01.CL0MWERF = "N";
        else
          KL0M200(); /* build screen*/
        end
      end
    end
  end
  ;
   /* -------------  end process cl0m100  --------------------*/
end // end KL0M100
// initialize map cl0mm001
Function KL0M101()
   /* ************************************************************/
   /* *      this process initializes screen Kl0mm001           **/
   /* * 09-09-91 bcourt add comments and mesg descrips.         **/
   /* *                 change cl0m to kl0m.                    **/
   /* 05-22-92 twatso got iv0rec.xobcd abbrev instead of clarec*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M101"; /* set current process name*/
  KL0MM001.XXXCURDT = VGVar.currentShortGregorianDate;
  set KL0MM001.CLHMEMNB normal;
  set KL0MM001.CLHSEQNB normal;
  ;
  ;
  if (COMMAREA.CAFROMAP == "KL0B")
    if (CLWREC.CLHMEMNB == 0) /* (cwh 7-24-89)*/
      converseLib.validationFailed(213); /* memo number required*/
      CLWREC.CLWEZMNO = 213;
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      XPCL002();
    end
    CLHREC.CLHMEMNB = CLWREC.CLHMEMNB;
    KL0M938(); /* read memo table*/
    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(213); /* MEMO NOT FOUND 12-04-87*/
      CLWREC.CLWEZMNO = 213; /* MEMO NOT FOUND 12-04-87*/
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      XPCL002();
    end
  else
    if (COMMAREA.CAFROMAP == "KL0M") /* 9-9-91 chg cl to kl*/
      if (CLWREC.CLHMEMNB != 0)
        if (converseVar.validationMsgNum == 530) /* must have clm # to xfer to this appl*/
          converseLib.validationFailed(0);
        end
      end
      if (CLWREC.CLHMEMNB != CLHREC.CLHMEMNB
       /* new memo number*/
       && CLWREC.CLHMEMNB != 0) /* (cwh 7-24-89)*/
        if (CLWREC.CLHSEQNB == CLHREC.CLHSEQNB)
          if (CLWREC.CLHSEQNB == 0)
            CLWREC.CLHSEQNB = 1;
          end
          CLHREC.CLHMEMNB = CLWREC.CLHMEMNB;
          KL0M938(); /* read memo table*/
          if (SQLCA.VAGen_SQLCODE != 0)
            CL0MW01.CL0MWNEW = " ";
            set KL0MM001.CLHMEMNB cursor, bold;
            set KL0MM001.CLHSEQNB bold;
            converseLib.validationFailed(213); /* MEMO NOT FOUND 01-13-88*/
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0MM001";
            /* EZERTN;*/
          else
            CLAREC.CLACLMNB = CLHREC.CLACLMNB;
            CLWREC.CLHMEMNB = KL0MM001.CLHMEMNB;
            CLWREC.CLHSEQNB = CLHREC.CLHSEQNB;
            /* MOVE CLWREC.CLHMEMNB TO CL0MM001.CLHMEMNB;*/
            /* MOVE CLWREC.CLHSEQNB TO CL0MM001.CLHSEQNB;*/
            /* MOVE CLAREC.CLACLMNB TO CL0MM001.CLACLMNB;*/
            CL0MW01.CL0MWNEW = "Y";
          end
        else
           /* new memo # and new sequence nbr*/
          if (CLWREC.CLHMEMNB == 0) /* (cwh 7-24-89)*/
            CL0MW01.CL0MWNEW = " ";
            set KL0MM001.CLHMEMNB cursor, bold;
            converseLib.validationFailed(213); /* MEMO NOT FOUND*/
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0MM001";
            return;
          end
          CLHREC.CLHMEMNB = CLWREC.CLHMEMNB;
          KL0M938(); /* read memo table*/
          if (SQLCA.VAGen_SQLCODE != 0)
            CL0MW01.CL0MWNEW = " ";
            set KL0MM001.CLHMEMNB cursor, bold;
            converseLib.validationFailed(213); /* MEMO NOT FOUND 01-13-88*/
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0MM001";
            /* EZERTN;*/
          else
            /* MOVE CL0MM001.CLHMEMNB TO CLWREC.CLHMEMNB;*/
            CLAREC.CLACLMNB = CLHREC.CLACLMNB;
            CLWREC.CLHSEQNB = CLHREC.CLHSEQNB;
            KL0MM001.CLHSEQNB = CLWREC.CLHSEQNB;
            CL0MW01.CL0MWNEW = "Y";
          end
        end
      else
         /* same memo nbr*/
        if (CLWREC.CLHSEQNB != CLHREC.CLHSEQNB)
           /* new sequence number*/
          CLHREC.CLACLMNB = CLAREC.CLACLMNB;
          CLHREC.CLHSEQNB = CLWREC.CLHSEQNB;
          KL0M934(); /* read memo table*/
          if (SQLCA.VAGen_SQLCODE != 0)
            CL0MW01.CL0MWNEW = " ";
            set KL0MM001.CLHSEQNB cursor, bold;
            converseLib.validationFailed(14); /* seq # NOT FOUND*/
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0MM001";
            /* EZERTN;*/
          else
            CLWREC.CLHMEMNB = CLHREC.CLHMEMNB;
            CLWREC.CLHSEQNB = CLHREC.CLHSEQNB;
            KL0MM001.CLHMEMNB = CLWREC.CLHMEMNB;
            KL0MM001.CLHSEQNB = CLWREC.CLHSEQNB;
            CL0MW01.CL0MWNEW = "Y";
          end
        else
           /* same memo # and same seq #*/
          CLHREC.CLACLMNB = CLAREC.CLACLMNB;
          if (CLXREC.CLXEDITF != "Y")
            if (CLAREC.CLACSQNB == 0)
              CLHREC.CLHSEQNB = 1;
            else
              if (CLAREC.CLACSQNB > 1)
                CLAREC.CLACSQNB = CLAREC.CLACSQNB - 1;
                CLHREC.CLHSEQNB = CLAREC.CLACSQNB;
              else
                CLHREC.CLHSEQNB = CLAREC.CLACSQNB;
              end
            end
          end
        end
      end
    else
       /* from map other than kl0m*/
      CLHREC.CLACLMNB = CLAREC.CLACLMNB;
      if (CLXREC.CLXEDITF != "Y")
        if (CLXREC.CLXERRF != "Y")
          if (CLAREC.CLACSQNB == 0)
            CLHREC.CLHSEQNB = 1;
          else
            CLHREC.CLHSEQNB = CLWREC.CLHSEQNB;
            /* MOVE CLWREC.CLHMEMNB TO CLHREC.CLHMEMNB;*/
            /* IF CLAREC.CLACSQNB > 1;*/
            /* CLWREC.CLHSEQNB = CLWREC.CLHSEQNB - 1;*/
            /* MOVE CLWREC.CLHSEQNB TO CLHREC.CLHSEQNB;*/
            KL0M934(); /* read memo table*/
            if (SQLCA.VAGen_SQLCODE != 0)
              CL0MW01.CL0MWNEW = " ";
              set KL0MM001.CLHMEMNB cursor, bold;
              converseLib.validationFailed(213); /* MEMO NOT FOUND 01-13-88*/
              CLXREC.CLXSCRNX = 1;
              CLXREC.CLXEOSF = "Y";
              CLXREC.CLXCSCRN = "KL0MM001";
              /* EZERTN;*/
            else
              CLWREC.CLHMEMNB = CLHREC.CLHMEMNB;
              CLWREC.CLHSEQNB = CLHREC.CLHSEQNB;
              KL0MM001.CLHMEMNB = CLWREC.CLHMEMNB;
              KL0MM001.CLHSEQNB = CLWREC.CLHSEQNB;
              CL0MW01.CL0MWNEW = "Y";
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  TF1REC.TF1CARCD = CLHREC.TF1CARCD;
  KL0M906(); /* read vcarr001 table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0MM001.TF1CARNM = TF1REC.TF1CARNM;
  end
  ;
  KL0MS05();
                                   /* format memo data to kl0mm001 map*/
  CLAREC.CLACLMNB = CLHREC.CLACLMNB;
  KL0M924(); /* read claim header table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0MS10(); /* format header data to kl0mm001 map*/
  end
  ;
  ;
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "*";
  KL0M974(); /* read claim/invoice table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0M975(); /* get first record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      while (SQLCA.VAGen_SQLCODE == 0)
        if (CLBREC.CLBPMIVC == "Y")
          KL0MM001.IV0IVCID = CLBREC.IV0IVCID;
          KL0MM001.OP1CUOID = CLBREC.OP1CUOID;
          KL0MM001.OP1NORID = CLBREC.OP1NORID;
        end
        CL0MW01.CL0MWICT = CL0MW01.CL0MWICT + 1;
        ;
        if (CLBREC.CLBPMIVC == "Y")
          IVAREC.IV0PARTN = CLBREC.IV0PARTN;
          IVAREC.IV0IVCID = CLBREC.IV0IVCID;
          KL0M914(); /* read invoice header*/
          if (SQLCA.VAGen_SQLCODE == 0)
            KL0MM001.SP1ID = IVAREC.SP1ID;
            KL0MM001.OP1CUPO = IVAREC.OP1CUPO;
            KL0MM001.XPTCD[2] = IVAREC.XPTCD;
          end
          ;
          if (IVAREC.XPTCD in XPTTBL.XPTCD) /* if in table use abbrv*/
            KL0MM001.XPTABRV[2] = XPTTBL.XPTABRV[sysVar.arrayIndex];
          end
          ;
          SP1REC.SP1ID = IVAREC.SP1ID;
          KL0M904(); /* read sales table*/
          if (SQLCA.VAGen_SQLCODE == 0)
            KL0MM001.SP1ABRV = SP1REC.SP1ABRV; /* move abbrev to map*/
          end
          ;
          IV0REC.IV0PARTN = CLBREC.IV0PARTN;
          IV0REC.IV0IVCID = CLBREC.IV0IVCID;
          KL0M918(); /* read invoice index table*/
          if (SQLCA.VAGen_SQLCODE == 0)
            /* MOVE IV0REC.SM4REPID TO CL0MM001.SM4REPID;*/
            KL0MM001.XOBCD = IV0REC.XOBCD;
            if (IV0REC.XOBCD in XOBTBL.XOBCD) /* added 5-22-92 tw*/
              KL0MM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
            end
            KL0MM001.IV0IVCDT = IV0REC.IV0IVCDT;
          end
          SM4REC.SM4REPID = CLAREC.SM4REPID;
          KL0M902(); /* read sales rep table*/
          if (SQLCA.VAGen_SQLCODE == 0)
            KL0MM001.CL0MWRNM = SM4REC.XXXLSTNM;
          end
          ;
          ;
          ;
          ;
          ;
        end
        KL0M975(); /* get next record*/
      end
      KL0MM001.CL0MWICT = CL0MW01.CL0MWICT;
      CL0MW01.CL0MWICT = 0;
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* (cwh 7-24-89)*/
   || SQLCA.VAGen_SQLCODE == 100)
    KL0M976(); /* close cursor clbrec*/
  end
  ;
  ;
   /* -------------  End Process CL0M101  --------------------*/
  ;
  ;
end // end KL0M101

// handle map m001 spec entrys
Function KL0M110()
   /* ***********************************************************/
   /* * statement group cl0ms01 - check valid entry key,**/
   /* *    do menu transfers if requested**/
   /* *  9-09-91 bcourt fix handling of new memo #/seq#.*/
   /* ***********************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M110"; /* set current process name*/
  ;
   /* IF EZEAID IS PA2            ; escape key for testing...*/
     /* EZECLOS                   ; comment these three lines out*/
   /* END                         ; when installing to production*/
  ;
  ;
  if (converseVar.eventKey is enter) /* enter - return to process*/
    if (KL0MM001.CATOAP == " " /* if no fast-path requested*/
     && KL0MM001.CAITEM == " ") /* and item is blank*/
      if (KL0MM001.CLHMEMNB is modified
       || KL0MM001.CLHSEQNB is modified)
      end
      if (CLAREC.YCTCD == "NIL")
        converseLib.validationFailed(245); /* clm type 'nil', press pf6 for prods*/
        CLXREC.CLXERRF = "Y";
      end
      return;
    else
      if (KL0MM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0MM001.CATOAP;
        if (COMMAREA.CATOSYS == "KL")
          if (KL0MM001.CAITEM != " ")
            COMMAREA.CATOAP = KL0MM001.CATOAP;
            COMMAREA.CAITEM = KL0MM001.CAITEM;
            XPCL002();
            set KL0MM001.CATOAP cursor, modified, bold;
            set KL0MM001.CAITEM modified, bold;
          else
            if (CLAREC.CLACLMNB != 0)
              COMMAREA.CATOAP = KL0MM001.CATOAP;
              COMMAREA.CAITEM = KL0MM001.CAITEM;
              XPCL002();
              set KL0MM001.CATOAP cursor, modified, bold;
              set KL0MM001.CAITEM modified, bold;
            else
              set KL0MM001.CLHMEMNB cursor, modified, bold;
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(213);
              CLXREC.CLXERRF = "Y";
              return;
            end
          end
        else
          COMMAREA.CATOAP = KL0MM001.CATOAP;
          COMMAREA.CAITEM = KL0MM001.CAITEM;
          XPCL002();
        end
      else
        if (KL0MM001.CATOAP == " "
         && KL0MM001.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0MM001.CATOAP cursor, modified, bold;
          set KL0MM001.CAITEM modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    ;
    ;
  else
    if (converseVar.eventKey is pf1) /* pf1 - help (not yet active)*/
      XSPF1();
    else
      if (converseVar.eventKey is pf3) /* pf3 - return to prior menu*/
        CLXREC.CLXEOSF = "Y";
        COMMAREA.CATOAP = "KL0B"; /* xfer to claim menu*/
        XPCL002();
      else
        if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
          XSPF4();
          COMMAREA.CATOAP = " ";
        else
          if (converseVar.eventKey is pf5) /* pf5 - pass to claim header*/
            if (CLAREC.CLACLMNB != 0)
              CLWREC.CLWCLIDX = CL0MW01.CL0MWLID;
              COMMAREA.CATOAP = "KL0E"; /* xfer to claim menu*/
              XPCL002();
            else
              converseLib.validationFailed(5);
              CLXREC.CLXERRF = "Y";
              return;
            end
          else
            if (converseVar.eventKey is pf6) /* pf6 - pass to 'kl0v'*/
              if (CLAREC.CLACLMNB != 0)
                if (CLAREC.YCTCD == "NIL")
                  COMMAREA.CATOAP = "KL0X";
                                   /* xfer to nil defectives*/
                  XPCL002();
                else
                  converseLib.validationFailed(232);
                  CLXREC.CLXERRF = "Y";
                end
              else
                converseLib.validationFailed(5);
                CLXREC.CLXERRF = "Y";
                return;
              end
            else
              if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
                if (CLAREC.CLACLMNB != 0)
                  if (CLAREC.YCTCD in YCTTBL.YCTCD)
                    if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
                      COMMAREA.CATOAP = "KL0K"; /* xfer to*/
                      XPCL002();
                    else
                      COMMAREA.CATOAP = "KL0J"; /* xfer to*/
                      XPCL002();
                    end
                  else
                    converseLib.validationFailed(232);
                    CLXREC.CLXERRF = "Y";
                  end
                else
                  converseLib.validationFailed(5);
                  CLXREC.CLXERRF = "Y";
                  return;
                end
              else
                if (converseVar.eventKey is pf17) /* pf17 - pass to 'kl0n'*/
                  if (CLAREC.CLACLMNB != 0)
                    COMMAREA.CATOAP = "KL0F"; /* xfer to*/
                    XPCL002();
                  else
                    converseLib.validationFailed(5);
                    CLXREC.CLXERRF = "Y";
                  end
                else
                  if (converseVar.eventKey is pf18) /* pf18 - pass to 'kl0g'*/
                    if (CLAREC.CLACLMNB != 0)
                      CLWREC.CLWMCMNT = "N";
                      COMMAREA.CATOAP = "KL0G"; /* xfer to*/
                      XPCL002();
                    else
                      converseLib.validationFailed(5);
                      CLXREC.CLXERRF = "Y";
                      return;
                    end
                  else
                    /* REMOVE PF19 02-27-98 PER SANDY KELLY*/
                                  /* IF EZEAID IS PF19;     /* pf19 - pass*/
                                   /* to a/r map(kl0h)*/
                     /* IF CLAREC.CLACLMNB NE 0;*/
                       /* MOVE 'KL0H' TO COMMAREA.CATOAP;  /* xfer to*/
                       /* PERFORM XPCL002;*/
                     /* ELSE;*/
                       /* MOVE 5 TO EZEMNO;*/
                       /* MOVE 'Y' TO CLXREC.CLXERRF;*/
                       /* EZERTN;*/
                     /* END;*/
                    /* ELSE;*/
                    if (converseVar.eventKey is pf20) /* pf20 - pass to 'kl0g'*/
                      if (CLAREC.CLACLMNB != 0)
                        CLWREC.CLWMCMNT = "Y";
                        COMMAREA.CATOAP = "KL0G"; /* xfer to*/
                        XPCL002();
                      else
                        converseLib.validationFailed(5);
                        CLXREC.CLXERRF = "Y";
                        return;
                      end
                    else
                      converseLib.validationFailed(2); /* invalid pf key*/
                      CLXREC.CLXERRF = "Y";
                      CL0MW01.CL0MWPFF = "Y";
                      return;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end KL0M110

// process map m001 entries
Function KL0M120()
  ;
   /* --------------- begin process cl0m120 -------------------*/
  ;
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen kl0mm001                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M120"; /* set current process name*/
  ;
  ;
        /* transfer to selected option*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (CL0MW01.CL0MWCTF == "Y")
      COMMAREA.CATOAP = "KL0B";
      XPCL002();
    else
      if (KL0MM001.CLHSEQNB is modified)
        if (KL0MM001.CLHSEQNB != 0)
          if (KL0MM001.CLHSEQNB < CLAREC.CLACSQNB)
            CLWREC.CLHSEQNB = KL0MM001.CLHSEQNB;
          else
            CLXREC.CLXERRF = "Y";
          end
        else
          KL0MM001.CLHSEQNB = 1;
          CLWREC.CLHSEQNB = 1;
          set KL0MM001.CLHSEQNB normal;
        end
      else
        if (KL0MM001.CLHMEMNB != CLWREC.CLHMEMNB)
          if (CLWREC.CLHSEQNB == CLAREC.CLACSQNB)
            COMMAREA.CATOAP = CLWREC.CLWMAPFM;
            XPCL002();
          else
            if (CLWREC.CLHSEQNB < CLAREC.CLACSQNB)
              /* CLWREC.CLHSEQNB = CLWREC.CLHSEQNB + 1;*/
              CLXREC.CLXEOSF = "Y";
              CLXREC.CLXSCRNX = 1;
              CLXREC.CLXCSCRN = "KL0MM001";
            end
          end
        else
          if (KL0MM001.CLHSEQNB == 0)
            KL0MM001.CLHSEQNB = 1;
            CLWREC.CLHSEQNB = 1;
            /* SET CL0MM001.CLhSEQNB NORMAL;*/
            /* EZERTN;*/
          else
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXSCRNX = 2;
            CLXREC.CLXCSCRN = "KL0MM005";
          end
        end
      end
    end
  end
  ;
  if (CL0MW01.CL0MWPFF != "Y")
    if (CL0MW01.CL0MWAYX == 1)
      CLXREC.CLXARY1X = 1;
      /* MOVE 0 TO CL0MW01.CL0MWPUP;*/
      /* MOVE 0 TO CL0MW01.CL0MWPRQ;*/
      /* MOVE 0 TO CL0MW01.CL0MWPNP;*/
    end
    KL0M201(); /* build product summary array*/
    if (CLXREC.CLXERRF != "Y")
      CLXREC.CLXCURLN = 1;
    else
      /* next sentence*/
    end
  end
  ;
  ;
  ;
  ;
   /* -------------  end process cl0m120  --------------------*/
  ;
  ;
end // end KL0M120

// converse map m005, prod summ
Function KL0M200()
   /* ************************************************************/
   /* *     process screen kl0mm005                             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *      "while loop" from cl0m050 until the end-of-screen  **/
   /* *      flag (clxeosfl) gets set to 'y'                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M200"; /* set current process name*/
  CL0MW01.CL0MWSEF = " ";
  ;
  ;
  ;
  ;
  if (CLXREC.CLXERRF == "Y"
   && CL0MW01.CL0MWPFF == " ")
  else
    set KL0MM005 initial;
  end
  KL0M205(); /* build screen*/
   /* ************/
  if (CL0MW01.CL0MWRET == "Y"
   && CL0MW01.CL0MWMTS == "Y")
    CL0MW01.CL0MWZUP = CL0MW01.CL0MWTUP;
    CL0MW01.CL0MWZRQ = CL0MW01.CL0MWTRQ;
    CL0MW01.CL0MWZNP = CL0MW01.CL0MWTNP;
    CL0MW01.CL0MWRET = " ";
  end
   /* ************/
  CLXREC.CLXERRF = "N";
  ;
  converse KL0MM005 ;
  ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error msg to spaces*/
  ;
  ;
  ;
  set KL0MM005.CATOAP normal;
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf8)
    CLXREC.CLXCURLN = CL0MW01.CL0MWAYX;
    if (CL0MW01.CL0MWPRV > CL0MW01.CL0MWAYX)
      CL0MW01.CL0MWPRV = CL0MW01.CL0MWAYX;
    end
  else
    if (converseVar.eventKey is pf7)
      if (CL0MW01.CL0MWPRV == 0)
        CL0MW01.CL0MWPRV = 1;
      end
      CLXREC.CLXCURLN = CL0MW01.CL0MWPRV;
      if (CL0MW01.CL0MWPRV < CL0MW01.CL0MWAYX)
        CL0MW01.CL0MWAYX = CL0MW01.CL0MWPRV;
      end
    end
  end
   /* MOVE CLXREC.CLXARY1X TO CLXREC.CLXCURLN;*/
  CLXREC.CLXLINEX = 1;
  CLXREC.CLXARAYX = CLXREC.CLXCURLN;
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[2])
    if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      KL0MS21(); /* save selections to array*/
      if (CL0MW01.CL0MWSEF == " ")
        CLXREC.CLXEDITF = " ";
      end
      if (CLXREC.CLXERRF == "Y")
        converseLib.validationFailed(8);
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXCSCRN = "KL0MM005";
        CLXREC.CLXEOSF = "Y";
        CL0MW01.CL0MWPFF = " ";
        CLXREC.CLXLINEX = 12;
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      /* IF CLXREC.CLXLINEX GE 13;*/
      /* MOVE 'Y' TO CL0MW01.CL0MWMTS;*/
      /* END ;*/
    else
      CLXREC.CLXLINEX = 13;
    end
  end
  CL0MW01.CL0MWEDT = "Y";
  if (KL0MM005.CL0MMOPT[1] == "A")
    CLXCURLN = CLXREC.CLXARY1X;
  else
    if (CLXREC.CLXARAYX <= CLXREC.CLXMAXLN[2])
      CLXREC.CLXCURLN = 1;
    else
      CLXREC.CLXCURLN = CLXREC.CLXARAYX;
    end
  end
  ;
  ;
  ;
  KL0M210(); /* handle special entries*/
  ;
  ;
  if (converseVar.eventKey is pf2)
    set CL0MW01 empty;
    set CL0MW05 empty;
    set CL0MW06 empty;
    set CL0MW10 empty;
    CL0MW01.CL0MWPFK = " ";
    CLXREC.CLXARY1X = 1;
    CL0MW01.CL0MWPFF = " ";
    CLXREC.CLXSCRNX = 1;
    CLXREC.CLXCSCRN = "KL0MM001";
    CLXREC.CLXEOSF = "Y";
  else
    if (converseVar.eventKey is enter)
      if (CLXREC.CLXEDITF == "Y")
        if (CLXREC.CLXERRF == "Y")
          CLXREC.CLXLINEX = 1;
          CLXREC.CLXSCRNX = 2;
          CLXREC.CLXCSCRN = "KL0MM005";
          CLXREC.CLXEOSF = "Y";
        else
          CLXREC.CLXLINEX = 1;
          KL0M220(); /* edit screen entries*/
        end
      else
        /* IF COMMAREA.CAFROMAP EQ 'kL0E';*/
        /* OR COMMAREA.CAFROMAP EQ 'kL0C';*/
        if (COMMAREA.CAFROMAP == "KL0M")
          if (CLWREC.CLWCLIDX > 0)
            CL0MW01.CL0MWPFK = " ";
            CLXREC.CLXARY1X = CLWREC.CLWCLIDX;
            /* MOVE 0 TO CLWREC.CLWCLIDX;*/
            CL0MW01.CL0MWPFF = " ";
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXCSCRN = "KL0MM001";
            CLXREC.CLXEOSF = "Y";
          else
            if (CL0MW01.CL0MWMTS == "Y")
              CL0MW01.CL0MWZUP = 0;
              CL0MW01.CL0MWZRQ = 0;
              CL0MW01.CL0MWZNP = 0;
            else
              CL0MW01.CL0MWPUP = 0;
              CL0MW01.CL0MWPRQ = 0;
              CL0MW01.CL0MWPNP = 0;
            end
            CL0MW01.CL0MWPFF = " ";
            CL0MW01.CL0MWPFK = " ";
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXCSCRN = "KL0MM001";
            CLXREC.CLXEOSF = "Y";
          end
        else
          if (COMMAREA.CAFROMAP == "KL0E"
           || COMMAREA.CAFROMAP == "KL0C")
            COMMAREA.CATOAP = CL0MW01.CL0MWFAP;
            CLWREC.CLWCLIDX = CL0MW01.CL0MWLID;
            /* MOVE 'kL0C' TO COMMAREA.CAFROMAP;*/
            XPCL002();
          else
            COMMAREA.CATOAP = "KL0M";
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXCSCRN = "KL0MM001";
            CLXREC.CLXEOSF = "Y";
            XPCL002();
            /* END ;*/
          end
          /* F CLWREC.CLWCLIDX GT 0;*/
          /* OVE ' ' TO CL0MW01.CL0MWPFK;*/
          /* OVE CLWREC.CLWCLIDX TO CLXREC.CLXARY1X;*/
          /* ;MOVE CLXREC.CLXCURLN TO CLXREC.CLXARY1X;*/
          /* ;MOVE 0 TO CLWREC.CLWCLIDX;*/
          /* MOVE ' ' TO CL0MW01.CL0MWPFF;*/
          /* MOVE 1 TO CLXREC.CLXSCRNX;*/
          /* MOVE 'KL0MM001' TO CLXREC.CLXCSCRN;*/
          /* MOVE 'Y' TO CLXREC.CLXEOSF;*/
          /* ElSE ;*/
          /* ;IF COMMAREA.CAFROMAP EQ 'KL0E';*/
          /* MOVE 'KL0E' TO COMMAREA.CATOAP;*/
           /* ;ELSE ;*/
           /* MOVE CL0MW01.CL0MWLID TO CLWREC.CLWCLIDX;*/
           /* ;MOVE 'KL0M' TO COMMAREA.CATOAP;*/
           /* ;END ;*/
           /* PERFORM XPCL002;*/
        end
      end
    else
      CLXREC.CLXSCRNX = 2;
      CLXREC.CLXCSCRN = "KL0MM005";
      CLXREC.CLXEOSF = "Y";
    end
  end
  ;
  ;
   /* at this point;*/
      /* if the end-of-screen flag (clxeosfl) = 'n'*/
          /* we go back to the top of cl0m100.*/
      /* if the end-of-screen flag (clxeosfl) = 'y'*/
          /* we return to cl0m050.*/
  ;
  ;
end // end KL0M200

// build prod summary array
Function KL0M201()
   /* ************************************************************/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *      "while loop" from cl0m050 until the end-of-screen  **/
   /* *      flag (clxeosfl) gets set to 'y'                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M201"; /* set current process name*/
  ;
  CLXREC.CLXLSTKE = " "; /* set number of records to zero*/
  KL0M290(); /* get 200 records*/
  if (CLXREC.CLXLSTAX != 0)
    CLXREC.CLXERRF = "N";
  end
  return;
  ;
  ;
  ;
end // end KL0M201

// build map cl0mm005
Function KL0M205()
   /* ************************************************************/
   /* *      this process builds screen cl0mm005                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M205"; /* set current process name*/
  KL0MM005.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  if (CLXREC.CLXEOFF == "Y")
    CLXREC.CLXBLDAY = "N";
  else
    CLXREC.CLXBLDSC = "Y"; /* build screen flag*/
    ;
    ;
    ;
    ;
    if (converseVar.validationMsgNum == 244)
      CLXREC.CLXCURLN = CL0MW01.CL0MWAYX;
    else
      CLXREC.CLXCURLN = CLXREC.CLXARY1X;
      CL0MW01.CL0MWAYX = CLXREC.CLXARY1X;
      CL0MW01.CL0MWARX = CL0MW01.CL0MWAYX - CLXREC.CLXMAXLN[2];
      if (CL0MW01.CL0MWARX < 1)
        CL0MW01.CL0MWARX = 1;
      end
    end
    if (CLXREC.CLXCURLN <= CLXREC.CLXLSTAX)
      CLXREC.CLXARAYX = CLXREC.CLXCURLN;
    else
      if (CLXREC.CLXARY1X <= CLXREC.CLXMAXLN[2])
        CLXREC.CLXARAYX = 1;
      else
        CLXREC.CLXARAYX = CLXREC.CLXARY1X - 1;
      end
    end
    KL0MM005.CL0MMMTP = CL0MW05.CL0MMMTP[CLXARAYX];
    KL0MM005.KUCCOID = CL0MW05.KUCCOID[CLXARAYX];
    KL0MM005.KUCCONM = CL0MW05.KUCCONM[CLXARAYX];
    KL0MM005.KUMSTRID = CL0MW05.KUMSTRID[CLXARAYX];
    KL0MM005.XNXCD = CL0MW05.XNXCD[CLXARAYX];
    KL0MM005.CLHMEMNB = CL0MW05.CLHMEMNB[CLXARAYX];
    KL0MM005.ARCCCREF = CL0MW06.ARCCCREF[CLXARAYX];
    KL0MM005.XXXMEMDT = CL0MW06.CLHMEMDT[CLXARAYX];
    KL0MM005.CLHSEQNB = CL0MW05.CLHSEQNB[CLXARAYX];
    KL0MM005.CLHNETFL = CL0MW06.CLHNETFL[CLXARAYX];
    KL0MM005.CLACLMNB = CL0MW05.CLACLMNB[CLXARAYX];
  end
  if (CLXREC.CLXARY1X >= CLXREC.CLXLSTAX /* ^^^^^^^^11/15/88*/
   && CLXREC.CLXLINEX >= 13)            
    CLXREC.CLXARAYX = CLXREC.CLXARY1X; /* ^^^^^11/15/88*/
  end /* ^^^^^^^^^^^11/15/88*/
  ;
  CLXREC.CLXLINEX = 1;
  CL0MW01.CLNNTPRC = 0;
  ;
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[2])
    if (CL0MW06.SY1STNBR[CLXARAYX] != " "
     && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
      CL0MW01.CL0MWSTH = CL0MW06.SY1STNBR[CLXARAYX];
      CL0MW01.CL0MWCLH = CL0MW06.SY2CLRID[CLXARAYX];
      CL0MW01.CL0MWGPH = CL0MW06.CLNNTPRC[CLXARAYX];
      while (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
       && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
        if (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[2])
          if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
           && CLXREC.CLXLSTAX <= CL0MW01.CL0MWMAX)
            KL0MS25(); /* build each screen line*/
            if (CLXREC.CLXLINEX >= 12)
              /* MOVE 'Y' TO CL0MW01.CL0MWRET;*/
              CL0MW01.CL0MWMTS = "Y";
            end
            CL0MW01.CL0MWINP = 0;
            if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
              if (CL0MW06.CL0MWPR2[CLXARAYX] == "Y"
               || CL0MW06.CL0MWPR3[CLXARAYX] == "Y")
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
              end
            end
            if (CLXREC.CLXARAYX == CL0MW01.CL0MWMAX)
              CL0MW01.CL0MWPUP = 0;
              CL0MW01.CL0MWPRQ = 0;
              CL0MW01.CL0MWPNP = 0;
              CL0MW01.CL0MWSTH = " ";
              CL0MW01.CL0MWCLH = " ";
              CL0MW01.CL0MWFTS = "Y";
              converseLib.validationFailed(457); /* maximum number of claims exceeded*/
              CLWREC.CLWCLIDX = CLXREC.CLXLSTAX;
            end
          else
            CL0MW01.CL0MWSTH = "99999";
            CLXREC.CLXLINEX = 13;
            converseLib.validationFailed(3); /* end of data*/
            CLWREC.CLWCLIDX = CLXREC.CLXLSTAX;
            /* MOVE 'N' TO CL0MW01.CL0MWMTS ;$$$$$$$$11/16/88*/
          end
        else
          /* MOVE 'Y' TO CL0MW01.CL0MWMTS   ;$$$$$$$$11/16/88*/
          CL0MW01.CL0MWSTH = "99999";
        end
      end
      if (CL0MW01.CL0MWSTH != "99999")
        CL0MW01.CL0MWSTH = " "; /* ****************/
        CL0MW01.CL0MWTOT = "Y";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
        KL0MS25(); /* display each screen line*/
      else
        if (CLXREC.CLXLINEX < 12)
          CL0MW01.CL0MWTOT = " ";
        else
          CL0MW01.CL0MWTOT = "Y";
          CL0MW01.CL0MWMTS = "Y";
        end
      end
      CLXREC.CLXMAPMX = CLXREC.CLXARAYX;
      CLXREC.CLXEDITF = "Y";
      if (CL0MW01.CL0MWFTS == " ")
        CL0MW01.CL0MWFTS = "Y";
      end
    else
      if (CL0MW01.CL0MWTOT != "Y")
        if (CLXREC.CLXLINEX < 12)
          KL0MM005.CL0MMMTP = CL0MW05.CL0MMMTP[CLXLSTAX];
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
          KL0MM005.SY2CLRAB[CLXLINEX] = "MEMO TOTALS";
          if (CL0MW01.CL0MWPFK == " ")
            if (CL0MW01.CL0MWFTS == "Y")
              CL0MW01.CL0MWFTS = "N";
              CL0MW01.CL0MWPUP = CL0MW01.CL0MWPUP + CL0MW01.CL0MWTUP;
              CL0MW01.CL0MWPRQ = CL0MW01.CL0MWPRQ + CL0MW01.CL0MWTRQ;
              CL0MW01.CL0MWPNP = CL0MW01.CL0MWPNP + CL0MW01.CL0MWTNP;
              CL0MW01.CL0MWTUP = 0;
              CL0MW01.CL0MWTRQ = 0;
              CL0MW01.CL0MWTNP = 0;
              KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWPUP;
              KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWPRQ;
              KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWPNP;
            else
              CL0MW01.CL0MWPUP = CL0MW01.CL0MWPUP + CL0MW01.CL0MWTUP;
              CL0MW01.CL0MWPRQ = CL0MW01.CL0MWPRQ + CL0MW01.CL0MWTRQ;
              CL0MW01.CL0MWPNP = CL0MW01.CL0MWPNP + CL0MW01.CL0MWTNP;
              CL0MW01.CL0MWTUP = 0;
              CL0MW01.CL0MWTRQ = 0;
              CL0MW01.CL0MWTNP = 0;
              KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWPUP;
              KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWPRQ;
              KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWPNP;
            end
          else
            if (CL0MW01.CL0MWRTF == "Y")
              if (CL0MW01.CL0MWSAF == "Y")
                CL0MW01.CL0MWTOT = "Y";
                CL0MW01.CL0MWPUP = CL0MW01.CL0MWZUP;
                CL0MW01.CL0MWPRQ = CL0MW01.CL0MWZRQ;
                CL0MW01.CL0MWPNP = CL0MW01.CL0MWZNP;
                /* MOVE 0 TO CL0MW01.CL0MWZUP;*/
                /* MOVE 0 TO CL0MW01.CL0MWZRQ;*/
                /* MOVE 0 TO CL0MW01.CL0MWZNP;*/
                CL0MW01.CL0MWRTF = " ";
              end
            else
              /* next sentence*/
            end
            KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWPUP;
            KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWPRQ;
            KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWPNP;
          end
          CLXREC.CLXLINEX = 13;
        else
          /* MOVE 'Y' TO CL0MW01.CL0MWTOT;*/
          CL0MW01.CL0MWMTS = "Y";
          CLXREC.CLXLINEX = 13;
        end
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KL0M205

// handle map m005 spec entrys
Function KL0M210()
   /* ************************************************************/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M210"; /* set current process name*/
  ;
  ;
   /* IF EZEAID IS PA2            ; escape key for testing...*/
     /* EZECLOS                   ; comment these three lines out*/
   /* END                         ; when installing to production*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (KL0MM005.CATOAP == " " /* if no fast-path requested*/
     && KL0MM005.CAITEM == " ") /* and item is blank*/
      return;
    else
      if (KL0MM005.CATOAP != " ")
        COMMAREA.CATOAP = KL0MM005.CATOAP;
        COMMAREA.CAITEM = KL0MM005.CAITEM;
        XPCL002();
      else
        if (KL0MM005.CATOAP == " "
         && KL0MM005.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0MM005.CAITEM cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
  else
    if (converseVar.eventKey is pf7)
      CLXREC.CLXCURLN = CLXREC.CLXARY1X - CLXREC.CLXMAXLN[2];
      if (CLXREC.CLXCURLN <= 1)
        if (CL0MW01.CL0MWTOT == "N" /* ##############*/
         && CL0MW01.CL0MWMTS != "Y")
          if (CL0MW01.CL0MWFTS == "N")
            CL0MW01.CL0MWPUP = 0;
            CL0MW01.CL0MWPRQ = 0;
            CL0MW01.CL0MWPNP = 0;
          end
          /* MOVE ' ' TO CL0MW01.CL0MWPFK   ;+++++++++++++++++++*/
        end /* ######################*/
        if (CLXREC.CLXCURLN <= 8)
          if (CL0MW01.CL0MWFTS == "Y")
            CL0MW01.CL0MWTOT = "N";
            CLXREC.CLXARAYX = 1;
            CL0MW01.CL0MWRTF = " ";
          end
          CL0MW01.CL0MWRTF = "Y";
          converseLib.validationFailed(7);
          CLXREC.CLXERRF = "Y";
        end
        if (CL0MW01.CL0MWMTS == "Y")
          CL0MW01.CL0MWPFK = " ";
          CL0MW01.CL0MWTUP = 0;
          CL0MW01.CL0MWTRQ = 0;
          CL0MW01.CL0MWTNP = 0;
        end
      else
        if (CLXREC.CLXLSTAX > CLXREC.CLXARY1X)
          if (CL0MW01.CL0MWMTS == "Y")
            CL0MW01.CL0MWTUP = 0;
            CL0MW01.CL0MWTRQ = 0;
            CL0MW01.CL0MWTNP = 0;
          end
          CL0MW01.CL0MWPFK = " ";
        else
          if (CL0MW01.CL0MWMTS != "Y")
            CL0MW01.CL0MWTUP = 0;
            CL0MW01.CL0MWTRQ = 0;
            CL0MW01.CL0MWTNP = 0;
          end
        end
      end
      CL0MW01.CL0MWRTF = " "; /* +++++++++++++++++++*/
      CLXREC.CLXARY1X = CLXREC.CLXARAYX;
      CLXREC.CLXSCRNX = 2;
      CLXREC.CLXCSCRN = "KL0MM005";
      CLXREC.CLXEOSF = "Y";
    else
      if (converseVar.eventKey is pf8)
        if (CLXREC.CLXMAPMX >= CLXREC.CLXLSTAX)
          if (CL0MW01.CL0MWFTS == " ")
            if (CL0MW01.CL0MWMTS == "Y")
              CL0MW01.CL0MWPFK = " ";
              CL0MW01.CL0MWRTF = "Y"; /* ^^^^^^^^^^11/15/88*/
              CL0MW01.CL0MWSAF = "Y"; /* ^^^^^^^^^^11/15/88*/
              CLXREC.CLXARAYX = CLXREC.CLXMAPMX; /* ^^^^^^^^^11/15/88*/
            else
              CLXREC.CLXARAYX = CLXREC.CLXARY1X; /* ^^^^^^^^^11/15/88*/
              CL0MW01.CL0MWPUP = 0;
              CL0MW01.CL0MWPRQ = 0;
              CL0MW01.CL0MWPNP = 0;
            end
          else
            if (CL0MW01.CL0MWFTS == "Y")
              if (CL0MW01.CL0MWMTS == "Y")
                if (CL0MW01.CL0MWRET == "Y")
                  CL0MW01.CL0MWPFK = "Y"; /* ******************/
                  CL0MW01.CL0MWZUP = CL0MW01.CL0MWTUP;
                  CL0MW01.CL0MWZRQ = CL0MW01.CL0MWTRQ;
                  CL0MW01.CL0MWZNP = CL0MW01.CL0MWTNP;
                  CL0MW01.CL0MWRET = " ";
                else
                  CL0MW01.CL0MWPFK = " "; /* ******************/
                end
                CL0MW01.CL0MWTOT = "N"; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWRTF = "Y"; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWSAF = "Y"; /* ^^^^^^^^^^11/15/88*/
                CLXREC.CLXARAYX = CLXREC.CLXMAPMX;
                                   /* ^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWFTS = "N";
              else /* *****************/
                CLXREC.CLXARAYX = CLXREC.CLXARY1X;
                                   /* ^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWPFK = "Y";
                CL0MW01.CL0MWRTF = "Y"; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWSAF = "Y"; /* ^^^^^^^^^^11/15/88*/
              end /* ^^^^^^^^^^^^11/15/88*/
            else
              if (CL0MW01.CL0MWMTS != "Y")
                CLXREC.CLXMAPMX = 1;
                CL0MW01.CL0MWPUP = 0;
                CL0MW01.CL0MWPRQ = 0;
                CL0MW01.CL0MWPNP = 0;
                CL0MW01.CL0MWPFK = " ";
                CL0MW01.CL0MWRTF = " "; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWSAF = " "; /* ^^^^^^^^^^11/15/88*/
              else
                CL0MW01.CL0MWPFK = "Y";
                CL0MW01.CL0MWRTF = " "; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWSAF = " "; /* ^^^^^^^^^^11/15/88*/
                CL0MW01.CL0MWTUP = 0;
                CL0MW01.CL0MWTRQ = 0;
                CL0MW01.CL0MWTNP = 0;
              end
              CLXREC.CLXARAYX = CLXREC.CLXMAPMX; /* ^^^^^^^^^11/15/88*/
            end /* ^^^^^^^^^^^^11/15/88*/
          end /* ^^^^^^^^^^^^11/15/88*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(3);
        else
          CLXREC.CLXARAYX = CLXREC.CLXMAPMX;
          CLXREC.CLXMAPMX = CLXREC.CLXMAPMX + CLXMAXLN[CLXSCRNX];
          if (CLXREC.CLXLSTAX < CLXREC.CLXMAPMX)
            CL0MW01.CL0MWPUP = 0;
            CL0MW01.CL0MWPRQ = 0;
            CL0MW01.CL0MWPNP = 0;
            CL0MW01.CL0MWPFK = " ";
          end
          CL0MW01.CL0MWRTF = " ";
          CLXREC.CLXERRF = "N";
        end
        CLXREC.CLXARY1X = CLXREC.CLXARAYX;
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXEOSF = "Y";
        CLXREC.CLXCSCRN = "KL0MM005";
        CL0MW01.CL0MWPFF = "Y";
      else
        if (converseVar.eventKey is pf1)
          XSPF1();
        else
          if (converseVar.eventKey is pf2)
            return;
          else
            if (converseVar.eventKey is pf3)
              COMMAREA.CATOAP = "KL0B";
              CLXREC.CLXEOSF = "Y"; /* done with screen 005*/
              XPCL002();
            else
              if (converseVar.eventKey is pf4)
                CLXREC.CLXEOSF = "Y"; /* done with screen 005*/
                XSPF4();
              else
                if (converseVar.eventKey is pf5)
                  COMMAREA.CATOAP = "KL0E";
                  XPCL002();
                else
                  if (converseVar.eventKey is pf20)
                    COMMAREA.CATOAP = "KL0G";
                    CLWREC.CLWMCMNT = "Y";
                    XPCL002();
                  else
                    converseLib.validationFailed(2); /* invalid pf key*/
                    CLXREC.CLXERRF = "Y";
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0M210

// process map m005 entries
Function KL0M220()
  ;
   /* --------------- begin process cl0m220 -------------------*/
  ;
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen kl0mm005                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M220"; /* set current process name*/
  ;
  ;
        /* transfer to selected option*/
  ;
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is enter)
    CL0MW01.CL0MWSAF = " ";
    CLXREC.CLXARY1X = 1;
    CLXREC.CLXARAYX = CLXREC.CLXARY1X; /* *****************/
    while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
        KL0M301(); /* build internal size array*/
        if (CLXREC.CLXARAYX == CLXREC.CLXLSTAX)
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
        CLXREC.CLXEDITF = "Y";
      else
        CLXREC.CLXEDITF = "N";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      end
    end
    CLXREC.CLXARAYX = 1;
    if (CLXREC.CLXEDITF == "Y")
      CLXREC.CLXMAPMX = 0;
      while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
        if (converseVar.validationMsgNum != 244)
          if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
            if (converseVar.eventKey is enter)
              KL0M300(); /* build screen*/
              if (CL0MW01.CL0MWMSF == "Y")
                /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
                CL0MW01.CL0MWARX = CLXREC.CLXARAYX;
                /* MOVE 'S' TO CL0MW10.CL0MWISF(CLXARAYX);*/
                /* MOVE CLXREC.CLXLSTAX TO CLXREC.CLXARAYX;*/
              else
                CLXREC.CLXARAYX = CLXREC.CLXARY1X;
              end
            else
              if (converseVar.eventKey is pf2)
                CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                CLXREC.CLXEOSF = "Y";
                CLXREC.CLXSCRNX = 1;
                CLXREC.CLXCSCRN = "KL0MM001";
              else
                if (converseVar.eventKey is pf15)
                  CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                  CLXREC.CLXEOSF = "Y";
                  CLXREC.CLXSCRNX = 2;
                  CLXREC.CLXCSCRN = "KL0MM005";
                else
                  CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                end
              end
            end
          else
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        else
          CLXREC.CLXARAYX = CLXREC.CLXLSTAX + 1;
          CLXREC.CLXARY1X = CL0MW01.CL0MWAYX;
          CLXREC.CLXERRF = "Y";
        end
        if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
          if (CL0MW01.CL0MWSAF != "Y")
            CL0MW01.CL0MWRTF = "Y";
            /* MOVE 0 TO CL0MW01.CL0MWTUP;*/
            /* MOVE 0 TO CL0MW01.CL0MWTRQ;*/
            /* MOVE 0 TO CL0MW01.CL0MWTNP;*/
            CL0MW01.CL0MWZUP = CL0MW01.CL0MWZUP + CL0MW01.CL0MWPUP;
            CL0MW01.CL0MWZRQ = CL0MW01.CL0MWZRQ + CL0MW01.CL0MWPRQ;
            CL0MW01.CL0MWZNP = CL0MW01.CL0MWZNP + CL0MW01.CL0MWPNP;
          else
            CL0MW01.CL0MWRTF = " ";
            /* MOVE ' ' TO CL0MW01.CL0MWPFK;*/
            CL0MW01.CL0MWSAF = " ";
          end
          if (CLXREC.CLXSCRNX == 2)
            converseLib.validationFailed(244);
          end
        end
      end
      CLXREC.CLXEDITF = "N";
    else
      if (CLWREC.CLHMEMNB == CLHREC.CLHMEMNB)
        CLXREC.CLXERRF = "Y";
      else
        if (CLWREC.CLHSEQNB == CLHREC.CLHSEQNB)
          COMMAREA.CATOAP = CLWREC.CLWMAPFM;
          XPCL002();
        else
          if (CLWREC.CLHSEQNB < CLHREC.CLHSEQNB)
            CLWREC.CLHSEQNB = CLWREC.CLHSEQNB + 1;
            CLXREC.CLXSCRNX = 1;
            CLXREC.CLXCSCRN = "KL0MM001";
            CLXREC.CLXEOSF = "Y";
          end
        end
      end
    end
  end
  ;
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    if (converseVar.eventKey is enter)
      if (converseVar.validationMsgNum == 244)
        if (CL0MW01.CL0MWMTS == "Y")
          if (CL0MW01.CL0MWRET == " ")
            CL0MW01.CL0MWFTS = " ";
            CL0MW01.CL0MWZUP = CL0MW01.CL0MWZUP + CL0MW01.CL0MWTUP;
            CL0MW01.CL0MWZRQ = CL0MW01.CL0MWZRQ + CL0MW01.CL0MWTRQ;
            CL0MW01.CL0MWZNP = CL0MW01.CL0MWZNP + CL0MW01.CL0MWTNP;
            CL0MW01.CL0MWRET = "Y";
          end
        end
        CL0MW01.CL0MWTUP = 0;
        CL0MW01.CL0MWTRQ = 0;
        CL0MW01.CL0MWTNP = 0;
        CL0MW01.CL0MWPFF = " ";
        CLXREC.CLXEOSF = "Y";
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXCSCRN = "KL0MM005";
        /* MOVE 'N' TO CLXREC.CLXERRF;*/
      else
        if (CLWREC.CLWCLIDX == 0)
          converseLib.validationFailed(279); /* NO DETAIL INFORMATION*/
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          CLXREC.CLXERRF = "N";
        else
          /* IF COMMAREA.CAFROMAP EQ 'kL0E';*/
          /* MOVE CL0MW01.CL0MWFAP TO COMMAREA.CATOAP;*/
          /* MOVE CL0MW01.CL0MWLID TO CLWREC.CLWCLIDX;*/
          /* PERFORM XPCL002;*/
          /* ELSE ;*/
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          /* END ;*/
        end
      end
    else
      if (converseVar.eventKey is pf15)
        CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        CLXREC.CLXEOSF = "Y";
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXCSCRN = "KL0MM005";
        CLXREC.CLXERRF = "N";
      else
        if (CLXREC.CLXCSCRN == "KL0MM005")
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          CLXREC.CLXERRF = "N";
        else
          /* next sentence*/
        end
      end
    end
  else
    CLXREC.CLXARY1X = CL0MW01.CL0MWARX;
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0M220
// select prod summary records
Function KL0M290()
   /* ************************************************************/
   /* *                                                         **/
   /* *      select product summary array detail                **/
   /* *                                                         **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD as wild cards for **/
   /* *          selecting Defective Items.                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
   /* MOVE CLXREC.CLXLSTKE TO CLXREC.CLXARY1X;*/
  ;
  ;
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    if (YCTTBL.YCTADJF[sysVar.arrayIndex] == "Y")
      CLRREC.CLACLMNB = KL0MM001.CLACLMNB;
      CLRREC.CLHSEQNB = CLHREC.CLHSEQNB;
      CLRREC.XGPCD = "**";
      CLRREC.SY1STNBR = "******";
      CLRREC.SY2CLRID = "***";
      CLRREC.XDMCD = "**";
      CLRREC.CLICRDFL = "*";
      KL0M996(); /* get all records greater than key*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLXREC.CLXEOFF = "N";
        if (CL0MW01.CL0MWAYX != 0)
          CLXREC.CLXARAYX = 1;
          /* ELSE ;*/
          /* MOVE 1 TO CLXREC.CLXARY1X;*/
        end
        CL0MW01.CL0MWCTR = 1;
        KL0M997(); /* get first record*/
        if (SQLCA.VAGen_SQLCODE == 0)
          while (SQLCA.VAGen_SQLCODE == 0
           && CLXREC.CLXARAYX < CL0MW01.CL0MWMXH)
            if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
              if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
                CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
                KL0M997(); /* get next record*/
              else
                CLXREC.CLXARAYX = 1;
                set CL0MW05 empty;
                set CL0MW06 empty;
                set CL0MW06 empty;
                set CL0MW10 empty;
                while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
                 && SQLCA.VAGen_SQLCODE == 0)
                  ;
                  /* IF CLRREC.CLRRQTQ NE 0;*/
                  KL0MS80(); /* move header fields to array*/
                  ;
                  KL0MS90(); /* move selected fields to array*/
                  CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                  ;
                  KL0MS27(); /* look up style and color*/
                  ;
                  KL0MS70(); /* move xumdesc to array*/
                  ;
                  KL0MS71(); /* move xqaabrv to array*/
                  ;
                  KL0MS72(); /* move xgpabrv to array*/
                  ;
                  /* END ;*/
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                  CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                  KL0M997(); /* get next record*/
                end
              end
            else
              while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
               && SQLCA.VAGen_SQLCODE == 0)
                ;
                /* IF CLRREC.CLRRQTQ NE 0;*/
                KL0MS80(); /* move header fields to array*/
                ;
                KL0MS90(); /* move selected fields to array*/
                CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                ;
                KL0MS27(); /* look up style and color*/
                ;
                KL0MS70(); /* move xumdesc to array*/
                ;
                KL0MS71(); /* move xqaabrv to array*/
                ;
                KL0MS72(); /* move xgpabrv to array*/
                ;
                /* END ;*/
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                KL0M997(); /* get next record*/
              end
            end
            /* END ;*/
          end
          CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
          CLXREC.CLXLSTAX = CLXREC.CLXARAYX;
          CLXREC.CLXARY1X = 1;
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            CLXREC.CLXERRF = "Y";
            /* EZERTN;*/
          else
            TA1REC.TA1LOCAT[2] = "CL0M290"; /* location*/
            TA1REC.TA1LOCAT[4] = "IO1370"; /* location*/
            TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
            TA1REC.TA1TBLVU = "VCLMEM01"; /* table view name*/
            CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
            TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
            XPCL010();
          end
        end
      end
      ;
      KL0M998(); /* close set clrrec*/
      ;
    else
      if (YCTTBL.YCTRTSF[sysVar.arrayIndex] == "Y") /* if claim type 'rts'*/
        CLNREC.CLACLMNB = KL0MM001.CLACLMNB;
        CLNREC.CLHSEQNB = CLHREC.CLHSEQNB;
        ;
         /* the inspection number select will need to be changed*/
        ;
        CLNREC.CL2ISNBR = -1;
        CLNREC.XGPCD = "**";
        CLNREC.SY1STNBR = "******";
        CLNREC.SY2CLRID = "***";
        CLNREC.XDMCD = "**";
        CLNREC.XQACD = "**";
        CLNREC.XUMCD = "**";
        CLNREC.IV0IVCID = -1;
        KL0M990(); /* get all records greater than key*/
        if (SQLCA.VAGen_SQLCODE == 0)
          CLXREC.CLXEOFF = "N";
          if (CL0MW01.CL0MWAYX != 0)
            CLXREC.CLXARAYX = 1;
            /* ELSE ;*/
            /* MOVE cl0mw01.cl0mwmax TO CLWREC.CLWCLIDX;*/
          end
          CL0MW01.CL0MWCTR = 1;
          KL0M991(); /* get first record*/
          if (SQLCA.VAGen_SQLCODE == 0)
            while (SQLCA.VAGen_SQLCODE == 0
             && CLXREC.CLXARAYX < CL0MW01.CL0MWMXH)
              if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
                if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
                  CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
                  KL0M991(); /* get next record*/
                else
                  CLXREC.CLXARAYX = 1;
                  set CL0MW05 empty;
                  set CL0MW06 empty;
                  set CL0MW10 empty;
                  while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
                   && SQLCA.VAGen_SQLCODE == 0)
                    ;
                    /* IF CLNREC.CLNRTSQ NE 0;*/
                    KL0MS80(); /* move header fields to array*/
                    ;
                    KL0MS91(); /* move selected fields to array*/
                    CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                    ;
                    KL0MS27(); /* look up style and color*/
                    ;
                    KL0MS70(); /* move xumdesc to array*/
                    ;
                    KL0MS71(); /* move xqaabrv to array*/
                    ;
                    KL0MS72(); /* move xgpabrv to array*/
                    ;
                    /* END ;*/
                    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                    CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                    KL0M991(); /* get next record*/
                  end
                end
              else
                while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
                 && SQLCA.VAGen_SQLCODE == 0)
                  ;
                  /* IF CLNREC.CLNRTSQ NE 0;*/
                  KL0MS80(); /* move header fields to array*/
                  ;
                  KL0MS91(); /* move selected fields to array*/
                  CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                  ;
                  KL0MS27(); /* look up style and color*/
                  ;
                  KL0MS70(); /* move xumdesc to array*/
                  ;
                  KL0MS71(); /* move xqaabrv to array*/
                  ;
                  KL0MS72(); /* move xgpabrv to array*/
                  ;
                  /* END ;*/
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                  KL0M991(); /* get next record*/
                end
              end
            end
            /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
            /* MOVE CLXREC.CLXARAYX TO CLXREC.CLXLSTAX;*/
            /* MOVE 1 TO CLXREC.CLXARY1X;*/
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              CLXREC.CLXERRF = "Y";
              /* EZERTN;*/
            else
              TA1REC.TA1LOCAT[2] = "CL0M290"; /* location*/
              TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
              TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
              TA1REC.TA1TBLVU = "VCLMEM01"; /* table view name*/
              CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
              TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
              XPCL010();
            end
          end
        end
        ;
        KL0M992(); /* close set clnrec*/
        ;
        KL0MS50(); /* adj indicator for an 'rts' claim*/
        ;
        KL0MS55(); /* def indicator for an 'rts' claim*/
        ;
        CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
        CLXREC.CLXLSTAX = CLXREC.CLXARAYX;
        CLXREC.CLXARY1X = 1;
        ;
      else
        if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* if claim type 'def', or osd*/
         || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y") /* if claim type 'cdr'*/
         /* OR YCTTBL.YCT-OSD-FL(EZETST) EQ 'Y'; /* if claim type 'osd'*/
          CLPREC.CLACLMNB = KL0MM001.CLACLMNB;
          CLPREC.CLHSEQNB = CLHREC.CLHSEQNB;
          ;
           /* the inspection number select will need to be changed*/
          ;
          CLPREC.CL2ISNBR = -1;
          CLPREC.XGPCD = "**";
          CLPREC.SY1STNBR = "******";
          CLPREC.SY2CLRID = "***";
          CLPREC.XDMCD = "**";
          CLPREC.XQACD = "**"; /* 10-04-90*/
          CLPREC.XUMCD = "**"; /* 10-04-90*/
          CLPREC.IV0IVCID = -1;
          KL0M993(); /* get all records greater than key*/
          if (SQLCA.VAGen_SQLCODE == 0)
            CLXREC.CLXEOFF = "N";
            if (CL0MW01.CL0MWAYX != 0)
              CLXREC.CLXARAYX = 1;
              /* ELSE ;*/
              /* MOVE cl0mw01.cl0mwmax TO CLWREC.CLWCLIDX;*/
            end
            CL0MW01.CL0MWCTR = 1;
            KL0M994(); /* get first record*/
            if (SQLCA.VAGen_SQLCODE == 0)
              while (SQLCA.VAGen_SQLCODE == 0
               && CLXREC.CLXARAYX < CL0MW01.CL0MWMXH)
                if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
                  if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
                    CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
                    KL0M994(); /* get next record*/
                  else
                    CLXREC.CLXARAYX = 1;
                    set CL0MW05 empty;
                    set CL0MW06 empty;
                    set CL0MW10 empty;
                    while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
                     && SQLCA.VAGen_SQLCODE == 0)
                      /* IF CLPREC.CLPDEFQ NE 0;*/
                      ;
                      KL0MS80(); /* move header fields to array*/
                      ;
                      KL0MS92(); /* move selected fields to array*/
                      CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                      ;
                      KL0MS27(); /* look up style and color*/
                      ;
                      KL0MS70(); /* move xumdesc to array*/
                      ;
                      KL0MS71(); /* move xqaabrv to array*/
                      ;
                      KL0MS72(); /* move xgpabrv to array*/
                      ;
                      /* END ;*/
                      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                      CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                      KL0M994(); /* get next record*/
                    end
                  end
                else
                  while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
                   && SQLCA.VAGen_SQLCODE == 0)
                    /* IF CLPREC.CLPDEFQ NE 0;*/
                    ;
                    KL0MS80(); /* move header fields to array*/
                    ;
                    KL0MS92(); /* move selected fields to array*/
                    CL0MW05.CL0MMMTP[CLXARAYX] = CLAREC.YCTCD;
                    ;
                    KL0MS27(); /* look up style and color*/
                    ;
                    KL0MS70(); /* move xumdesc to array*/
                    ;
                    KL0MS71(); /* move xqaabrv to array*/
                    ;
                    KL0MS72(); /* move xgpabrv to array*/
                    ;
                    /* END ;*/
                    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                    KL0M994(); /* get next record*/
                  end
                end
              end
              ;
              /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
              /* MOVE CLXREC.CLXARAYX TO CLXREC.CLXLSTAX;*/
              /* MOVE 1 TO CLXREC.CLXARY1X;*/
            else
              if (SQLCA.VAGen_SQLCODE == 100)
                CLXREC.CLXERRF = "Y";
                /* EZERTN;*/
              else
                TA1REC.TA1LOCAT[2] = "CL0M290"; /* location*/
                TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
                TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
                TA1REC.TA1TBLVU = "VDEFIT01"; /* table view name*/
                CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
                TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
                XPCL010();
              end
            end
          end
          ;
          KL0M995(); /* close set clprec*/
          ;
          KL0MS60();
          ;
          CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
          CLXREC.CLXLSTAX = CLXREC.CLXARAYX;
          CLXREC.CLXARY1X = 1;
          ;
        end
      end
    end
  end
end // end KL0M290

// converse map m010, prod detail
Function KL0M300()
   /* ************************************************************/
   /* *           process screen kl0mm010                       **/
   /* *                                                         **/
   /* *   note that this process is being performed in a        **/
   /* *      "while loop" from cl0m050 until the end-of-screen  **/
   /* *      flag (clxeosfl) gets set to 'y'.                   **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0M300"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    CLXREC.CLXERRF = "N";
  else
    CLXREC.CLXERRF = "N";
    set KL0MM010 initial;
    KL0M305(); /* build screen*/
  end
  ;
  ;
  ;
  ;
  ;
  converse KL0MM010 ;
  ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error msg to spaces*/
  ;
  ;
  ;
  ;
  KL0M310(); /* handle any special entries*/
  ;
  ;
  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXSCRNX = 2;
    CLXREC.CLXCSCRN = "KL0MM005";
  else
    if (converseVar.eventKey is pf2)
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXSCRNX = 1;
      CLXREC.CLXCSCRN = "KL0MM001";
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        if (CLXREC.CLXSCRNX == 3)
          CLXREC.CLXSCRNX = 3;
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXCSCRN = "KL0MM010";
        else
          if (CLXREC.CLXERRF != "Y")
            ;
             /* recursive call of cl0m320 is okay to use here*/
             /* according to jim ohrtman & john wood*/
            ;
            KL0M320();
          end
        end
      end
    end
  end
  ;
  ;
    /* at this point;*/
        /* if the end-of-screen flag (clxeosfl) = 'n'*/
           /* we go back to the top of cl0m300.*/
        /* if the end-of-screen flag (clxeosfl) = 'y'*/
           /* we return to cl0m050.*/
  ;
  ;
end // end KL0M300

// build internal size array
Function KL0M301()
   /* ************************************************************/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *      "while loop" from cl0m050 until the end-of-screen  **/
   /* *      flag (clxeosfl) gets set to 'y'                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M301"; /* set current process name*/
  ;
  CLXREC.CLXLSTKE = " "; /* set number of records to zero*/
  KL0M390(); /* get 40 records*/
  ;
  ;
  ;
end // end KL0M301

// build map cl0mm010
Function KL0M305()
   /* ************************************************************/
   /* *      this process builds screen cl0mm010                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M305"; /* set current process name*/
  KL0MM010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  if (CLXREC.CLXEOFF == "Y")
    CLXREC.CLXBLDAY = "N";
  else
    CLXREC.CLXBLDSC = "Y"; /* build screen flag*/
    ;
    ;
    CLXREC.CLXARAYX = CLXREC.CLXARY1X;
    CL0MW01.CL0MWAXY = CLXREC.CLXARY1X;
    while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
     && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
      if (CL0MW06.CL0MWISF[CLXARAYX] == "S"
       || CL0MW01.CL0MWMSF == "Y")
        CLXREC.CLXCURLN = CLXREC.CLXARAYX;
        CL0MW01.CL0MWSTH = CL0MW06.SY1STNBR[CLXARAYX];
        CL0MW01.CL0MWCLH = CL0MW06.SY2CLRID[CLXARAYX];
        if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
         && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
          CL0MW10.CL0MWISF[CLXARAYX] = "S";
          KL0MM010.CL0MWMTY = CL0MW05.CL0MMMTP[CLXARAYX];
          KL0MM010.KUCCOID = CL0MW05.KUCCOID[CLXARAYX];
          KL0MM010.KUMSTRID = CL0MW05.KUMSTRID[CLXARAYX];
          KL0MM010.XNXCD = CL0MW05.XNXCD[CLXARAYX];
          KL0MM010.KUCCONM = CL0MW05.KUCCONM[CLXARAYX];
          KL0MM010.CLHMEMNB = CL0MW05.CLHMEMNB[CLXARAYX];
          KL0MM010.CLACLMNB = CL0MW05.CLACLMNB[CLXARAYX];
          KL0MM010.CLHSEQNB = CL0MW05.CLHSEQNB[CLXARAYX];
          KL0MM010.SY1STNBR = CL0MW06.SY1STNBR[CLXARAYX];
          KL0MM010.SY2CLRID = CL0MW06.SY2CLRID[CLXARAYX];
          KL0MM010.XDMCD = CL0MW06.XDMCD[CLXARAYX];
          KL0MM010.XGPCD = CL0MW05.XGPCD[CLXARAYX];
          KL0MM010.XGPABRV = CL0MW05.XGPABRV[CLXARAYX];
          KL0MM010.KUIPRDID = CL0MW10.KUIPRDID[CLXARAYX];
          KL0MM010.XUMCD = CL0MW05.XUMCD[CLXARAYX];
          KL0MM010.XUMABRV = CL0MW05.XUMDESC[CLXARAYX];
          KL0MM010.XQACD = CL0MW05.XQACD[CLXARAYX];
          KL0MM010.XQAABRV = CL0MW05.XQAABRV[CLXARAYX];
        end
        ;
        ;
        CLXREC.CLXLINEX = 1;
        ;
        while (CLXREC.CLXLINEX <= 8)
          if (CL0MW10.CL0MWISF[CLXARAYX] == "S")
            CL0MW01.CL0MWSTH = CL0MW06.SY1STNBR[CLXARAYX];
            CL0MW01.CL0MWCLH = CL0MW06.SY2CLRID[CLXARAYX];
            CLXREC.CLXMAPMX = 1;
            CL0MW01.CLICRDFL = CL0MW05.CLICRDFL[CLXARAYX];
            CL0MW06.CL0MWPRF[CLXARAYX] = "Y";
            if (CL0MW01.CL0MWMSF != "Y")
              CL0MW01.CL0MWTUP = 0;
              CL0MW01.CL0MWTNP = 0;
              CL0MW01.CL0MWTRQ = 0;
            end
            while (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
             && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH
             && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
              if (CL0MW05.CLICRDFL[CLXARAYX] == CL0MW01.CLICRDFL)
                if (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[3])
                  KL0MS30(); /* build each screen line*/
                  CL0MW01.CL0MWMSF = "N"; /* 03-03-88*/
                  /* MOVE 'V' TO CL0MW06.CL0MWISF(CLXARAYX);*/
                  CL0MW10.CL0MWISF[CLXARAYX] = "V";
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                else
                  CL0MW01.CL0MWMSF = "Y"; /* 03-03-88*/
                  CL0MW01.CL0MWSAF = " ";
                  CL0MW01.CL0MWSTH = "9999";
                end
                if (CL0MW01.CL0MWSTH == "9999")
                  if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
                    CLXREC.CLXCURLN = CLXREC.CLXARAYX;
                  else
                    CL0MW01.CL0MWTOT = " ";
                    CLXREC.CLXCURLN = CLXREC.CLXARAYX;
                    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
                  end
                else
                  if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
                    if (CLXREC.CLXLINEX <= 8) /* ******************* 12-16-87*/
                      CLXREC.CLXCURLN = CLXREC.CLXARAYX;
                      CL0MW01.CL0MWSAF = " ";
                    else
                      CL0MW01.CL0MWTOT = " ";
                      if (CLXREC.CLXARAYX == CLXREC.CLXLSTAX)
                        if (CLXREC.CLXLSTAX < 9)
                          CL0MW01.CL0MWMSF = " ";
                        else
                          CL0MW01.CL0MWMSF = "Y";
                        end
                      else
                        if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
                         && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
                          CL0MW01.CL0MWMSF = "Y";
                        else
                          CL0MW01.CL0MWMSF = " ";
                        end
                      end
                      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* *********** 08-31-88*/
                      if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
                        if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
                         && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
                          CL0MW01.CL0MWMSF = "Y";
                          /* ELSE ;*/
                          /* MOVE ' ' TO CL0MW01.CL0MWMSF;*/
                        end
                      end
                      CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1; /* *********** 08-31-88*/
                      CL0MW06.CL0MWPRF[CLXARAYX] = "Y";
                      CL0MW01.CL0MWSTH = "9999"; /* *********** 09-25-87*/
                      CLXREC.CLXCURLN = CLXREC.CLXARAYX; /* *****09-24-87*/
                      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1; /* *******09-24-87*/
                      CLXREC.CLXARY1X = CLXREC.CLXARAYX;
                    end /* ******************** 09-24-87*/
                  end
                end
              else
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* *********** 08-31-88*/
              end
            end
            if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH)
              if (CL0MW06.SY2CLRID[CLXARAYX] != CL0MW01.CL0MWCLH)
                if (CLXREC.CLXLINEX < 9)
                  if (CL0MW01.CL0MWMSF == "Y")
                    CL0MW01.CL0MWPFF = "Y";
                    /* ;MOVE 'Y' TO CL0MW01.CL0MWTOT;*/
                    /* END ;*/
                  else
                    /* MOVE 'Y' TO CL0MW01.CL0MWMSF;*/
                    CL0MW01.CL0MWPFF = " ";
                  end
                end
              end
            else
              if (CLXREC.CLXLINEX < 9)
                if (CL0MW01.CL0MWMSF == "Y")
                  CL0MW01.CL0MWPFF = "Y";
                  /* ;MOVE 'Y' TO CL0MW01.CL0MWTOT;*/
                  /* END ;*/
                else
                  /* MOVE 'Y' TO CL0MW01.CL0MWMSF;*/
                  CL0MW01.CL0MWPFF = " ";
                end
              end
            end
            if (CL0MW01.CL0MWCF == "Y"
             && CL0MW01.CL0MWDF == "Y"
             && CLXREC.CLXARAYX >= CLXREC.CLXLSTAX)
              CLXREC.CLXARY1X = 1;
            else
              CLXREC.CLXARY1X = CLXREC.CLXARAYX;
            end
            CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1; /* *********** 09-24-87*/
            if (CL0MW01.CL0MWMSF != "Y") /* ************** 09-25-87*/
              if (CL0MW01.CL0MWSAF == "Y")
                CL0MW01.CL0MWPFF = " ";
                CL0MW01.CL0MWTOT = "Y";
              else
                CL0MW01.CL0MWTOT = "Y";
                CL0MW01.CL0MWPFF = "Y";
                CLXREC.CLXERRF = " ";
              end
            else
              if (CL0MW01.CL0MWTOT != "Y")
                if (CL0MW01.CL0MWSTH == "9999")
                  CL0MW01.CL0MWTOT = "Y";
                end
                CL0MW01.CL0MWSAF = " ";
                if (CLXREC.CLXARY1X <= CLXREC.CLXLSTAX)
                  if (CL0MW05.CLICRDFL[CLXARAYX] == CL0MW01.CLICRDFL)
                    if (CL0MW01.CL0MWTOT == "Y")
                      if (CL0MW01.CL0MWMSF != "Y")
                        /* MOVE 0 TO CL0MW01.CL0MWQRQ;*/
                        /* MOVE 0 TO CL0MW01.CL0MWQNP;*/
                        CL0MW01.CL0MWPFF = "Y";
                      end
                    else
                      /* MOVE 0 TO CL0MW01.CL0MWTRQ;*/
                      /* MOVE 0 TO CL0MW01.CL0MWTNP;*/
                      /* MOVE 0 TO CL0MW01.CL0MWTUP;*/
                      CL0MW01.CL0MWPFF = " ";
                    end
                  end
                else
                  CL0MW01.CL0MWPFF = " ";
                end /* ******************* 09-25-87*/
              end
            end
          end
          if (CL0MW01.CL0MWTOT == "Y")
            CLXREC.CLXMAPMX = CLXREC.CLXMAPMX + CLXREC.CLXLINEX - 1;
            CL0MW01.CL0MWSID = "9";
            if (CL0MW01.CL0MWMSF != "Y")
              CL0MW01.CL0MWPFK = "Y";
              CL0MW01.CL0MWPFF = " ";
            end
            KL0MS30(); /* display each screen line*/
            if (CL0MW01.CL0MWERF == "Y")
              converseLib.validationFailed(243);
              CL0MW01.CL0MWERF = " ";
            end
            CLXREC.CLXLINEX = 12;
            CL0MW01.CL0MWTOT = "N";
            CL0MW01.CL0MWSAF = " ";
            /* MOVE ' ' TO CL0MW01.CL0MWMSF;*/
            CL0MW01.CL0MWSET = " ";
          else
            CLXREC.CLXLINEX = 12;
          end
          /* MOVE ' ' TO CL0MW01.CL0MWPFF;*/
          CLXREC.CLXARAYX = CLXREC.CLXLSTAX + 1;
        end
        /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
        /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
      else
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0M305

// handle map m010 spec entrys
Function KL0M310()
   /* ************************************************************/
   /* *     handle special entries                              **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0M310"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* escape key for testing...*/
    exit program; /* comment these three lines out*/
  end /* when installing to production*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (KL0MM010.CATOAP == " " /* if no fast-path requested*/
     && KL0MM010.CAITEM == " ") /* and item is blank*/
      /* MOVE 0 TO CL0MW01.CL0MWTRQ;*/
      /* MOVE 0 TO CL0MW01.CL0MWTNP;*/
       /* MOVE ' ' TO CL0MW01.CL0MWMSF;*/
      /* MOVE CL0MW01.CL0MWAXY TO CLXREC.CLXARY1X;03/04/88******/
      if (CLXREC.CLXARY1X <= CLXREC.CLXLSTAX
       && CLXREC.CLXERRF != "Y")
        CLXREC.CLXARAYX = CLXREC.CLXARY1X;
        if (CL0MW01.CL0MWMSF == "Y")
          CLXREC.CLXARAYX = CLXREC.CLXCURLN; /* 09/04/88******/
        end
        while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
          if (CL0MW10.CL0MWISF[CLXARAYX] == "S")
            CLXREC.CLXARY1X = CLXREC.CLXARAYX;
            return;
          else
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        end
      end
      CL0MW01.CL0MWEND = "Y";
      if (CL0MW01.CL0MWEND == "Y")
        CLXREC.CLXARAYX = 1;
        while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
          if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
            CL0MW06.CL0MWISF[CLXARAYX] = "V";
            CL0MW10.CL0MWISF[CLXARAYX] = "V";
          end
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
        /* MOVE ' ' TO CL0MW01.CL0MWSAF;*/
        CL0MW01.CL0MWEND = " ";
        converseLib.validationFailed(244);
        CLXREC.CLXARY1X = 1;
        /* MOVE 'Y' TO CLXREC.CLXEDITF;*/
        CL0MW01.CL0MWRTF = " ";
        CL0MW01.CL0MWPFF = " ";
        CL0MW01.CL0MWPFK = "Y";
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXEOSF = "Y";
        CLXREC.CLXCSCRN = "KL0MM005";
      end
    else
      if (KL0MM010.CATOAP != " ")
        COMMAREA.CATOAP = KL0MM010.CATOAP;
        COMMAREA.CAITEM = KL0MM010.CAITEM;
        XPCL002();
      else
        if (KL0MM010.CATOAP == " "
         && KL0MM010.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0MM010.CAITEM cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
  else
    if (converseVar.eventKey is pf7)
      CLXREC.CLXARY1X = CL0MW01.CL0MWAXY;
      if (CL0MW01.CL0MWMSF != "Y")
        CLXREC.CLXARAYX = CL0MW01.CL0MWAXY;
        if (CLXREC.CLXARAYX > 1)
          CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
        else
          CLXREC.CLXARAYX = 1;
          converseLib.validationFailed(7);
        end
        while (CL0MW06.CL0MWPRF[CLXARAYX] != "Y"
         && CLXREC.CLXARAYX > 1)
          CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
        end
        if (CL0MW06.CL0MWPRF[CLXARAYX] == "Y")
          if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH)
            CLXREC.CLXARY1X = CLXREC.CLXARAYX;
          else
            converseLib.validationFailed(7);
          end
          if (CLXREC.CLXCURLN <= 1)
            converseLib.validationFailed(7);
            CLXREC.CLXCURLN = 1;
          end
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
          CLXREC.CLXSCRNX = 3;
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXCSCRN = "KL0MM010";
        end
      else
        if (CLXREC.CLXCURLN <= 1)
          CL0MW01.CL0MWQRQ = 0;
          CL0MW01.CL0MWQNP = 0;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(7);
          CLXREC.CLXCURLN = 1;
        else
          /* CLXREC.CLXARAYX = CLXREC.CLXARY1X - CLXREC.CLXMAPMX;*/
          CLXREC.CLXARAYX = CL0MW01.CL0MWARX;
          if (CLXREC.CLXARAYX == 0)
            CLXREC.CLXARAYX = 1;
            converseLib.validationFailed(7);
          end
          CLXREC.CLXCURLN = CL0MW10.CL0MWASV[CLXARAYX];
          if (CLXREC.CLXCURLN <= CLXREC.CLXLSTAX)
            if (CLXREC.CLXCURLN == 0)
              CLXREC.CLXERRF = "Y";
              converseLib.validationFailed(7);
              CLXREC.CLXCURLN = 1;
              CLXREC.CLXARY1X = CLXREC.CLXCURLN;
              CLXREC.CLXSCRNX = 3;
            else
              if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
                CLXREC.CLXARY1X = CLXREC.CLXCURLN;
                CLXREC.CLXSCRNX = 3;
                CLXREC.CLXEOSF = "Y";
                CLXREC.CLXCSCRN = "KL0MM010";
                CL0MW01.CL0MWPFK = "Y";
                if (CL0MW01.CL0MWMSF == "Y")
                  CL0MW01.CL0MWPFF = " ";
                end
              else
                CLXREC.CLXERRF = "Y";
                converseLib.validationFailed(244);
                CLXREC.CLXSCRNX = 2;
                CLXREC.CLXEOSF = "Y";
                CLXREC.CLXCSCRN = "KL0MM005";
              end
            end
          else
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(244);
            CLXREC.CLXSCRNX = 2;
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0MM005";
          end
        end
      end
    else
      if (converseVar.eventKey is pf8)
        if (CL0MW01.CL0MWMSF != "Y")
          CL0MW01.CL0MWSAF = "Y";
          CLXREC.CLXARY1X = CL0MW01.CL0MWAXY;
          converseLib.validationFailed(3);
          CLXREC.CLXERRF = "Y";
          CLXREC.CLXSCRNX = 3;
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXCSCRN = "KL0MM010";
        else
          CL0MW01.CL0MWSAF = "Y";
          CLXREC.CLXARAYX = CL0MW01.CL0MWAXY;
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          while (CL0MW06.CL0MWPRF[CLXARAYX] != "Y")
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
          if (CL0MW06.CL0MWPRF[CLXARAYX] == "Y")
            CLXREC.CLXARY1X = CLXREC.CLXARAYX;
            CLXREC.CLXCURLN = CLXREC.CLXARY1X;
            if (CLXREC.CLXCURLN > CLXREC.CLXLSTAX)
              converseLib.validationFailed(3);
              CLXREC.CLXSCRNX = 3;
              CLXREC.CLXERRF = "Y";
              CLXREC.CLXEOSF = "Y";
              CLXREC.CLXCSCRN = "KL0MM010";
            else
              if (CL0MW01.CL0MWSAF != "Y")
                CLXREC.CLXARAYX = CLXREC.CLXCURLN;
                if (CL0MW10.CL0MWISF[CLXARAYX] == "S")
                  CLXREC.CLXARY1X = CLXREC.CLXCURLN;
                  CLXREC.CLXERRF = "N";
                  CLXREC.CLXSCRNX = 3;
                  CLXREC.CLXEOSF = "Y";
                  CLXREC.CLXCSCRN = "KL0MM010";
                  CL0MW01.CL0MWPFK = "Y";
                  CL0MW01.CL0MWPFF = " ";
                end
              else
                /* IF CL0MW01.CL0MWMSF NE 'Y';*/
                /* MOVE 3 TO EZEMNO;*/
                /* MOVE 'Y' TO CLXREC.CLXERRF;*/
                /* MOVE 3 TO CLXREC.CLXSCRNX;*/
                /* MOVE 'Y' TO CLXREC.CLXEOSF;*/
                /* MOVE 'KL0MM010' TO CLXREC.CLXCSCRN;*/
                /* ELSE ;*/
                ;
                CLXREC.CLXMAPMX = CLXREC.CLXARY1X;
                CLXREC.CLXARAYX = CLXREC.CLXARY1X;
                /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
                /* MOVE 3 TO EZEMNO;*/
                CLXREC.CLXERRF = "N";
                /* MOVE ' ' TO CL0MW01.CL0MWSAF;*/
                if (CL0MW01.CL0MWMSF == "Y")
                  CL0MW01.CL0MWTOT = " ";
                else
                  CL0MW01.CL0MWTOT = "Y";
                end
                CLXREC.CLXSCRNX = 3;
                CL0MW01.CL0MWPFK = "Y";
                CL0MW01.CL0MWPFF = " ";
                ;
              end
            end
          end
        end
      else
        if (converseVar.eventKey is pf1)
          XSPF1();
        else
          if (converseVar.eventKey is pf2)
            return;
          else
            if (converseVar.eventKey is pf3)
              COMMAREA.CATOAP = "KL0B";
              CLXREC.CLXEOSF = "Y"; /* done with screen*/
              XPCL002();
            else
              if (converseVar.eventKey is pf4)
                CLXREC.CLXEOSF = "Y"; /* done with screen*/
                XSPF4();
              else
                if (converseVar.eventKey is pf5)
                  CLWREC.CLWCLIDX = CL0MW01.CL0MWLID;
                  COMMAREA.CATOAP = "KL0E";
                  XPCL002();
                else
                  if (converseVar.eventKey is pf15)
                    KL0MS35(); /* ; set current array entry viewed*/
                    CLXREC.CLXEDITF = "N";
                    CL0MW01.CL0MWPFK = "Y";
                    CLXREC.CLXSCRNX = 2;
                    CLXREC.CLXEOSF = "Y";
                    CLXREC.CLXCSCRN = "KL0MM005";
                  else
                    if (converseVar.eventKey is pf14)
                      COMMAREA.CATOAP = "KL0J";
                      XPCL002();
                    else
                      if (converseVar.eventKey is pf20)
                        COMMAREA.CATOAP = "KL0G";
                        CLWREC.CLWMCMNT = "Y"; /* done with screen*/
                        XPCL002();
                      else
                        CLXREC.CLXSCRNX = 3;
                        CLXREC.CLXEOSF = "Y";
                        CLXREC.CLXCSCRN = "KL0MM010";
                        converseLib.validationFailed(2); /* invalid pf-key*/
                        CLXREC.CLXERRF = "Y";
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0M310

// process map 010
Function KL0M320()
   /* ************************************************************/
   /* *           process screen kl0mm010                       **/
   /* *                                                         **/
   /* *   note that this process is being performed in a        **/
   /* *      "while loop" from cl0m050 until the end-of-screen  **/
   /* *      flag (clxeosfl) gets set to 'y'.                   **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  ;
  ;
  ;
  ;
  if (CLXREC.CLXERRF != "Y")
    if (CLWREC.CLHMEMNB == CLHREC.CLHMEMNB)
      CLXREC.CLXSCRNX = 2;
      CLXREC.CLXCSCRN = "KL0MM005";
      CLXREC.CLXEOSF = "Y";
    else
      if (CLWREC.CLHSEQNB == CLHREC.CLHSEQNB)
        COMMAREA.CATOAP = CLWREC.CLWMAPFM;
        XPCL002();
      else
        if (CLWREC.CLHSEQNB < CLHREC.CLHSEQNB)
          CLWREC.CLHSEQNB = CLWREC.CLHSEQNB + 1;
          CLXREC.CLXSCRNX = 1;
          CLXREC.CLXCSCRN = "KL0MM001";
          CLXREC.CLXEOSF = "Y";
        end
      end
    end
  end
  if (converseVar.eventKey is enter)
    if (CLXREC.CLXSCRNX == 2)
      CLXREC.CLXERRF = "Y";
      /* next sentence*/
    else
      CLXREC.CLXARAYX = CLXREC.CLXARY1X;
      while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
        if (CLXREC.CLXEDITF == "Y")
          if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf8)
              CL0MW01.CL0MWPFF = " ";
              ;
               /* recursive call of cl0m300 is okay to use here*/
               /* according to jim ohrtman & john wood*/
              ;
              KL0M300();
            else
              CLXREC.CLXARAYX = CLXREC.CLXLSTAX + 1;
            end
          else
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        else
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
      end
      CL0MW01.CL0MWERF = "Y";
      CLXREC.CLXERRF = "N";
    end
  else
    if (converseVar.eventKey is pf2)
      CLXREC.CLXSCRNX = 1;
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXCSCRN = "KL0MM001";
    else
      if (CLXREC.CLXERRF == "Y")
        if (CLXREC.CLXSCRNX == 2)
          CLXREC.CLXSCRNX = 2;
          CLXREC.CLXCSCRN = "KL0MM005";
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXERRF = "N";
        else
          CLXREC.CLXSCRNX = 3;
          CLXREC.CLXCSCRN = "KL0MM010";
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXERRF = "Y";
        end
      else
        CLXREC.CLXSCRNX = 2;
        CLXREC.CLXCSCRN = "KL0MM005";
        CLXREC.CLXEOSF = "Y";
      end
    end
  end
  ;
  ;
    /* at this point;*/
        /* if the end-of-screen flag (clxeosfl) = 'n'*/
           /* we go back to the top of cl0m300.*/
        /* if the end-of-screen flag (clxeosfl) = 'y'*/
           /* we return to cl0m050.*/
  ;
  ;
end // end KL0M320

// select size detail records
Function KL0M390()
   /* ************************************************************/
   /* * MAINTENANCE HISTORY*/
   /* *  06-11-91  sgorga  DB2 Chgs. Replaced KU2REC with KUIREC.*/
   /* *  07-08-97  SARUMU  DB2 Chgs. Replaced KUIREC with VCUCPX01.*/
   /* ************************************************************/
  ;
   /* ************************************************************/
   /* *                                                         **/
   /* *      select size array detail                           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
   /* MOVE CLXREC.CLXLSTKE TO CLXREC.CLXARY1X;*/
  ;
   /* TCS CHANGE BEGIN - 07-08-97*/
  ;
  CL0MW01.PROD-ARRAY = CLXREC.CLXARAYX; /* store the array value*/
  if (CLXREC.CLXLSTAX >= CL0MW01.CL0MWMAX)
    CL0MW01.CL0MWLST = CLXREC.CLXLSTAX + 1;
  else
    CL0MW01.CL0MWLST = CLXREC.CLXLSTAX;
  end
  ;
  while (CLXREC.CLXARAYX < CL0MW01.CL0MWLST)
    set WCU1710 empty; /* INITIALIZE THE RECORD*/
    WCU1710-INQUIRY-OPTION = "2";
    WCU1710-IN-CU-CO-ID = CL0MW05.KUCCOID[CLXARAYX]; /* company-id*/
    WCU1710-XNX-DEPT-ID-XREF = 0; /* customer dept id cross ref*/
    if (CLAREC.IV0IVCID > 0)
      move PRIMARY-IV-IVC-DT to WCU1710-CU-PROD-XREF-EDT withV60Compat;
    else
      WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT;
    end
    WCU1710-IN-SY-STY-NBR = CL0MW06.SY1STNBR[CLXARAYX];
    WCU1710-IN-SY-COLR-CD-ID = CL0MW06.SY2CLRID[CLXARAYX];
    WCU1710-IN-XDM-DIM-CD = CL0MW06.XDMCD[CLXARAYX];
    WCU1710-IN-SY-SZ-ID = 0;
    WCU1710-IN-XGP-GPC-CD = CL0MW05.XGPCD[CLXARAYX];
   /* IF Qual code is blank default to '01' to get prod-id from cu1710*/
    if (CL0MW05.XQACD[CLXARAYX] == " ")
      WCU1710-IN-XQA-QUAL-CD = "01";
    else
      WCU1710-IN-XQA-QUAL-CD = CL0MW05.XQACD[CLXARAYX];
    end
    ;
    KL0M984(); /* get customer prod id*/
    if (WCU1710-RETURN-CODE == 0)
      CL0MW10.KUIPRDID[CLXARAYX] = WCU1710.CU-CUST-PROD-ID[1];
    else
      CL0MW10.KUIPRDID[CLXARAYX] = " ";
    end
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
  CLXREC.CLXARAYX = CL0MW01.PROD-ARRAY; /* restore the array value*/
  ;
   /* TCS CHANGE END - 07-08-97*/
  ;
  while (CLXREC.CLXARAYX < CL0MW01.CL0MWLST)
    CL0MW01.CL0MWSTH = CL0MW06.SY1STNBR[CLXARAYX];
    while (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
     && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
      KL0MS94(); /* move selected fields to array*/
      CL0MW10.CL0MWASV[CLXARAYX] = CL0MW01.CL0MWFL1;
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
    if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      CL0MW01.CL0MWFL1 = CL0MW01.CL0MWFL2;
      CL0MW01.CL0MWFL2 = CLXREC.CLXARAYX;
    else
      CL0MW10.CL0MWASV[CLXARAYX] = CL0MW01.CL0MWFL1;
    end
    if (CLXREC.CLXARAYX == CL0MW01.CL0MWMAX)
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
  end
end // end KL0M390

// select unique from kucrec
Function KL0M894()
   /* **************************************/
   /* select unique on kucrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M894"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0340"; /* location*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VSTORE01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M894

// select unique from cljrec
Function KL0M900()
   /* **************************************/
   /* select unique on cljrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M900"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M900

// select unique from sm4rec
Function KL0M902()
   /* **************************************/
   /* select unique on sm4rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M902"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0020"; /* location*/
        TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
        TA1REC.TA1TBLVU = "VREPS001"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M902

// select unique from sp1rec
Function KL0M904()
   /* **************************************/
   /* select unique on sp1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M904"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0070"; /* location*/
        TA1REC.TA1DBASE = "DSPGM"; /* database name*/
        TA1REC.TA1TBLVU = "VSPGM001"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M904

// select unique from tf1rec
Function KL0M906()
   /* **************************************/
   /* select unique on tf1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M906"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0860"; /* location*/
        TA1REC.TA1DBASE = "DPICK"; /* database name*/
        TA1REC.TA1TBLVU = "VCARR001"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M906

// select unique from pd1rec
Function KL0M908()
   /* **************************************/
   /* select unique on pd1rec*/
   /* **************************************/
  ;
    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/
             /* Replaced DWPROD.VFCTY001 with DFCTY.VFCTY001.*/
             /* Replaced IO0870 with IO2810.*/
  ;
  ;
  ;
  set SQLCA empty;
  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M908"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0870"; /* location*/
        TA1REC.TA1DBASE = "DFCTY"; /* database name*/
        TA1REC.TA1TBLVU = "VFCTY001"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M908

// select unique from ivarec
Function KL0M914()
   /* **************************************/
   /* select unique on ivarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M914"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1040"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDR01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M914

// select unique from iv0rec
Function KL0M918()
   /* **************************************/
   /* select unique on iv0rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M918"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1110"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDX01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M918

// select unique from clarec
Function KL0M924()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M924"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M924

// select unique from clhrec
Function KL0M934()
   /* **************************************/
   /* select unique on clhrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1290" ("SA", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M934"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1290"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLMEM01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M934

// select unique from clhrec
Function KL0M938()
   /* **************************************/
   /* select unique on clhrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1290" ("SB", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M938"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1290"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLMEM01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLHREC.CLHMEMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M938

// select unique from sy1rec
Function KL0M954()
   /* **************************************/
   /* select unique on sy1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M954"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0120"; /* location*/
        TA1REC.TA1DBASE = "DPROD"; /* database name*/
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M954

// select unique from sy2rec
Function KL0M955()
   /* **************************************/
   /* select unique on sy2rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M955"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
        TA1REC.TA1DBASE = "DPROD"; /* database name*/
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M955

// select set from clcrec
Function KL0M964()
   /* **************************************/
   /* select set from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M964"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M964

// select next from clcrec
Function KL0M965()
   /* **************************************/
   /* select next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M965"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M965

// close set from clcrec
Function KL0M966()
   /* **************************************/
   /* close set from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M966"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M966

// select unique from sy4rec
Function KL0M970()
   /* **************************************/
   /* select unique on sy4rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0M970"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0040"; /* location*/
        TA1REC.TA1DBASE = "DPROD"; /* database name*/
        TA1REC.TA1TBLVU = "VSCALE01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M970

// select set from clbrec
Function KL0M974()
   /* **************************************/
   /* select set from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M974"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M974

// select next from clbrec
Function KL0M975()
   /* *******************************************************************/
   /* Maintenence History*/
   /* 07/08/97 SARUMU   Invoice id is stored to use in KL0M390 process*/
   /* *******************************************************************/
   /* **************************************/
   /* select next from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M975"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  else
    CL0MW01.PRIMARY-IV-IVC-DT = CLBREC.IV0IVCDT;
  end
end // end KL0M975

// close set from clbrec
Function KL0M976()
   /* **************************************/
   /* close set from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M976"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M976

// sel on vcucpx01 , VCUCPX01
Function KL0M984()
   /* *************************************************************/
   /* select unique on kuirec*/
  ;
    /* MAINTENANCE HISTORY*/
  ;
   /* dcust.vcusku01, use nike sku as primary key*/
  ;
   /* 1-19-90 change from kuirec to ku2rec.*/
   /* 06-14-91  sgorga  DB2 chgs.  Replaced KU2REC with KUIREC.*/
                     /* Replaced 'S ' with 'SB'.*/
   /* 07-08-97  SARUMU  Replaced VCUSKU01 BY VCUCPX01*/
   /* Return code from cu1710 is moved to error*/
   /* location 4.*/
   /* *************************************************************/
  ;
  set SQLCA empty;
  ;
  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* To get cust prod id from vcucpx01*/
  if (WCU1710-RETURN-CODE != 0)
    ;
    if (WCU1710-RETURN-CODE == 3)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (WCU1710-RETURN-CODE == 1 || 
      WCU1710-RETURN-CODE == 2 || 
      WCU1710-RETURN-CODE == 6 || 
      WCU1710-RETURN-CODE == 8 || 
      WCU1710-RETURN-CODE == 9)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M984"; /* location*/
        TA1REC.TA1LOCAT[3] = "CU1710"; /* location*/
        TA1REC.TA1LOCAT[4] = WCU1710-RETURN-CODE; /* cu1710 rtn code*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VCUCPX01"; /* table view name*/
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0M984

// select set from clnrec
Function KL0M990()
   /* **************************************/
   /* select set from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M990"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M990

// select next from clnrec
Function KL0M991()
   /* **************************************/
   /* select next from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M991"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M991

// close set from clnrec
Function KL0M992()
   /* **************************************/
   /* close set from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M992"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M992

// select set from clprec
Function KL0M993()
   /* **************************************/
   /* select set from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M993"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M993

// select next from clprec
Function KL0M994()
   /* **************************************/
   /* select next from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M994"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M994

// close set from clprec
Function KL0M995()
   /* **************************************/
   /* close set from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M995"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M995

// select set from clrrec
Function KL0M996()
   /* **************************************/
   /* select set from clrrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M996"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLADJ01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1370";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M996

// select next from clrrec
Function KL0M997()
   /* **************************************/
   /* select next from clrrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M997"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLADJ01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1370";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M997

// close set from clrrec
Function KL0M998()
   /* **************************************/
   /* close set from clrrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M998"; /* location*/
        TA1REC.TA1MAP = "CL0MM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLADJ01";
        CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM;
        TA1REC.TA1LOCAT[4] = "IO1370";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0M998

// format memo data to map 001
Function KL0MS05()
  ;
  ;
    /* ---------- start stmt grp cl0ms05 -----------------*/
  ;
    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/
  ;
    /* statement group cl0ms05 - format memo data to map*/
       /* cl0mm001.*/
  ;
  ;
  if (CLHREC.CLHMEMAM > 0)
    KL0MM001.CL0MWMTY = "DEBIT";
  else
    KL0MM001.CL0MWMTY = "CREDIT";
  end
  KL0MM001.CLHSHPDT = CLHREC.CLHSHPDT;
  KL0MM001.XXXMEMDT = CLHREC.CLHMEMDT;
  KL0MM001.CLHMEMNB = CLHREC.CLHMEMNB;
  CLWREC.CLHSEQNB = CLHREC.CLHSEQNB;
  KL0MM001.CLHGMAMT = CLHREC.CLHGMAMT;
  KL0MM001.CLHMEMGL = CLHREC.CLHMEMGL;
  KL0MM001.CLHASODT = CLHREC.CLHASODT;
  KL0MM001.CLHMEMAM = CLHREC.CLHMEMAM;
  KL0MM001.CLHNETFL = CLHREC.CLHNETFL;
  KL0MM001.TF1CARCD = CLHREC.TF1CARCD;
  KL0MM001.TF2PRONO = CLHREC.TF2PRONO;
  KL0MM001.PK1BLLAD = CLHREC.PK1BLLAD;
  KL0MM001.CLENBCRT = CLHREC.CLENBCRT;
  KL0MM001.CLHWGT = CLHREC.CLHWGT;
  KL0MM001.CLHSHPCG = CLHREC.CLHSHPCG;
  KL0MM001.XDSCD = CLHREC.XDSCD;
  if (CLHREC.XDSCD == "1")
    KL0MM001.CL0MWSFC = CLHREC.FY1FCTYC; /* 1-19-90 chng pd1 to fy1*/
    /* *************************************************************/
    /* *     Validate factory code to the DB2 table VFCTY001. If  **/
    /* *     ok, move factory description to screen.              **/
    /* *************************************************************/
    FY1REC.FY1FCTYC = CLHREC.FY1FCTYC;
    FY1REC.XGPCD = CLAREC.XGPCD; /* (02-22-90)*/
    KL0M908(); /* try and find it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found it, move in name*/
      KL0MM001.CL0MWSFA = FY1REC.FY1FCTNM;
    end
  else
    if (CLHREC.CLHSHPDT != 0)
      KL0MM001.CL0MWSFC = CLHREC.XWHCD;
      /* *************************************************************/
      /* *     Validate Warehouse code using the XWHTBL table. If   **/
      /* *     found, move the warehouse description to screen.     **/
      /* *************************************************************/
      ;
      if (CLHREC.XWHCD in XWHTBL.XWHCD) /* is warehouse in table*/
        KL0MM001.CL0MWSFA = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* move desc.*/
      end
    end
  end
  ;
  ;
    /* -----------   end of stmt grp cl0ms05  ------------*/
  ;
end // end KL0MS05

// format header data to map 001
Function KL0MS10()
    /* statement group cl0ms10 - format claim header data*/
       /* to map cl0mm001.*/
  ;
   /* **********************************************************/
   /* 6-14-90 bcourt move sales program ID and abrv from clm hdr*/
   /* 8-10-90 chellm move comp-co-id from clhdr to map.*/
  ;
   /* **********************************************************/
  ;
  set KUMREC empty;
  KUMREC.KUCCOID = CLAREC.KUCCOID; /* 12/88*/
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;
  KL0M894(); /* dcust.vstore01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0MM001.KUMSTRNM = KUMREC.KUMSTRNM;
    CLWREC.KUCCONM = KUMREC.KUMSTRNM;
  end
  KL0MM001.CLHSEQNB = CLWREC.CLHSEQNB;
  KL0MM001.KUCCOID = CLAREC.KUCCOID;
  KL0MM001.OP1CMPNB = CLAREC.OP1CMPNB; /* 08-10-90 add comp-co*/
  KL0MM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0MM001.XNXCD = CLAREC.XNXCD;
  KL0MM001.CLACCLDT = CLAREC.CLACCLDT;
  KL0MM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0MM001.XXXSDT = CLAREC.CLASETDT;
  KL0MM001.YCSCD = CLAREC.YCSCD1;
  KL0MM001.CLASTTDT = CLAREC.CLASTTDT;
  KL0MM001.XPTCD[1] = CLAREC.XPTCD;
  KL0MM001.XPTCD[2] = CLAREC.XPTCD;
  KL0MM001.XIECD = CLAREC.XIECD;
   /* MOVE CLAREC.XOBCD TO KL0MM001.XOBCD;*/
  KL0MM001.SP1ID = CLAREC.SP1ID; /* 6-14-90 add sls pgm*/
  KL0MM001.XOCCD = CLAREC.XOCCD;
  KL0MM001.SM4REPID = CLAREC.SM4REPID;
  KL0MM001.YCTCD = CLAREC.YCTCD;
  KL0MM001.YCRCD = CLAREC.YCRCD;
  KL0MM001.XGPCD = CLAREC.XGPCD;
  ;
  KL0MS11(); /* look up claim status description*/
  ;
  KL0MS12(); /* look up int/ext abreviation*/
  ;
  KL0MS13(); /* look up terms abreviation*/
  ;
                                  /* KL0MS14;*/
                                   /* /* look up order type abreviation*/
  ;
  if (CLAREC.SP1ID != " ") /* 6-14-90 add lookup*/
    SP1REC.SP1ID = CLAREC.SP1ID;
    KL0M904(); /* read sales table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0MM001.SP1ABRV = SP1REC.SP1ABRV; /* move abbrev to map*/
    else
      KL0MM001.SP1ABRV = "?";
    end
  end
  ;
  KL0MS15(); /* look up order class abreviation*/
  ;
  KL0MS16(); /* look up method abreviation*/
  ;
  KL0MS17(); /* set up comment description*/
  ;
  KL0MS18(); /* look up claim type*/
  ;
  KL0MS19(); /* look up claim gpc abreviation*/
  ;
  KL0MS63(); /* look up customer claim number*/
  KL0MM001.ARCCCREF = CL0MW01.ARCCCREF;
  ;
    /* -----------   end of stmt grp cl0ms10  ------------*/
  ;
end // end KL0MS10

// format ycsabrv to cl0mm001 map
Function KL0MS11()
  ;
  ;
    /* ---------- start stmt grp cl0ms11 -----------------*/
  ;
    /* statement group cl0ms11 - look up claim status description*/
       /* on ycstbl and format to cl0mm001 map*/
  ;
  ;
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* if in table*/
    KL0MM001.YCSABRV = YCSTBL.YCSABRV[sysVar.arrayIndex]; /* abreviation to map*/
  end
  ;
    /* -----------   end of stmt grp cl0ms11  ------------*/
  ;
end // end KL0MS11

// format xieabrv to cl0m001 map
Function KL0MS12()
  ;
  ;
    /* ---------- start stmt grp cl0ms12 -----------------*/
  ;
    /* statement group cl0ms12 - look up internal/external*/
       /* description on xietbl and format to cl0mm001 map*/
  ;
  ;
  if (CLAREC.XIECD in XIETBL.XIECD) /* if in table*/
    KL0MM001.XIEABRV = XIETBL.XIEABRV[sysVar.arrayIndex]; /* move abreviation to map*/
  end
  ;
    /* -----------   end of stmt grp cl0ms12  ------------*/
  ;
end // end KL0MS12

// format xptabrv to cl0mm001 map
Function KL0MS13()
  ;
  ;
    /* ---------- start stmt grp cl0ms13 -----------------*/
  ;
    /* statement group cl0ms13 - look up terms abreviation*/
       /* on xpttbl and format to cl0mm001 map*/
  ;
  ;
  if (CLAREC.XPTCD in XPTTBL.XPTCD) /* if in table*/
    KL0MM001.XPTABRV[1] = XPTTBL.XPTABRV[sysVar.arrayIndex];
                                   /* move abrev to map*/
  end
  ;
    /* -----------   end of stmt grp cl0ms13  ------------*/
  ;
end // end KL0MS13

// format xocabrv to cl0mm001 map
Function KL0MS15()
  ;
  ;
    /* ---------- start stmt grp cl0ms15 -----------------*/
  ;
    /* statement group cl0ms15 - look up order class abreviation*/
       /* on xoctbl and format to cl0mm001 map*/
  ;
  ;
  if (CLAREC.XOCCD in XOCTBL.XOCCD) /* if in table*/
    KL0MM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* move abrev to map*/
  end
  ;
    /* -----------   end of stmt grp cl0ms15  ------------*/
  ;
end // end KL0MS15

// format xdsabrv to cl0mm001 map
Function KL0MS16()
  ;
  ;
    /* ---------- start stmt grp cl0ms16 -----------------*/
  ;
    /* statement group cl0ms16 - look up method abreviation*/
       /* on xdstbl and format to cl0mm001 map*/
  ;
  ;
  if (KL0MM001.XDSCD in XDSTBL.XDSCD) /* if in table*/
    KL0MM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex]; /* move abrev to map*/
  end
  ;
    /* -----------   end of stmt grp cl0ms16  ------------*/
  ;
end // end KL0MS16

// format xdsabrv to cl0mm001 map
Function KL0MS17()
  ;
  ;
    /* ---------- start stmt grp cl0ms17 -----------------*/
  ;
  ;
  if (CLAREC.CLACMIND == "B") /* if both claim & memo comments*/
    KL0MM001.CL0MWCD = "BOTH";
  else
    if (CLAREC.CLACMIND == "C") /* if both claim & memo comments*/
      KL0MM001.CL0MWCD = "CLAIM";
    else
      if (CLAREC.CLACMIND == "M") /* if both claim & memo comments*/
        KL0MM001.CL0MWCD = "MEMO";
      else
        if (CLAREC.CLACMIND == "N") /* if both claim & memo comments*/
          KL0MM001.CL0MWCD = "NONE";
        end
      end
    end
  end
  ;
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0ms17  ------------*/
  ;
end // end KL0MS17

// set yct flag
Function KL0MS18()
  ;
  ;
    /* ---------- start stmt grp cl0ms18 -----------------*/
  ;
    /* statement group cl0ms18 - look up claim type*/
       /* on ycttbl and set flag.*/
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD) /* if in table*/
    if (YCTTBL.YCTMNOPT[sysVar.arrayIndex] == "01"
     && YCTTBL.YCTADJF[sysVar.arrayIndex] != "Y")
      CL0MW01.CL0MWCTF = "Y";
    end
  end
  ;
    /* -----------   end of stmt grp cl0ms18  ------------*/
  ;
end // end KL0MS18

// look up gpc abrv
Function KL0MS19()
  ;
  ;
    /* ---------- start stmt grp cl0ms19 -----------------*/
  ;
    /* statement group cl0ms19 - look up claim gpc abrv*/
       /* on xgptbl and set flag.*/
  ;
  ;
  ;
  if (KL0MM001.XGPCD in XGPTBL.XGPCD) /* if in table*/
    KL0MM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* move abrev to map*/
  end
  ;
  ;
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0ms19  ------------*/
  ;
end // end KL0MS19

// Save off Selections to array
Function KL0MS21()
  ;
     /* ***   This statement group checks for any selections ****/
     /* *** made by the user on the product summary screen,  ****/
     /* *** and records them in the line item array.         ****/
  ;
     /* set indexes*/
  ;
  ;
  ;
  if (KL0MM005.CL0MMOPT[CLXLINEX] is modified)
    if (KL0MM005.CL0MMOPT[CLXLINEX] == " " /* no entry,*/
     || KL0MM005.CL0MMOPT[CLXLINEX] == "V" /* marked as viewed*/
     || KL0MM005.CL0MMOPT[CLXLINEX] == "S") /* line selected*/
      if (KL0MM005.CL0MMOPT[CLXLINEX] == "S") /* line selected*/
        CL0MW01.CLICRDFL = KL0MM005.CLICRDFL[CLXLINEX];
      end
      CL0MW01.CL0MWSTH = KL0MM005.SY1STNBR[CLXLINEX];
      CL0MW01.CL0MWCLH = KL0MM005.SY2CLRID[CLXLINEX];
      while (KL0MM005.SY1STNBR[CLXLINEX] == CL0MW01.CL0MWSTH
       && KL0MM005.SY2CLRID[CLXLINEX] == CL0MW01.CL0MWCLH)
        if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
         && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
          if (CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
           && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
            if (KL0MM005.CL0MMOPT[CLXLINEX] == "S" 
             || KL0MM005.CL0MMOPT[CLXLINEX] == " " /* no entry,*/
             || KL0MM005.CL0MMOPT[CLXLINEX] == "V")
              if (CL0MW05.CLICRDFL[CLXARAYX] == CL0MW01.CLICRDFL)
                CL0MW06.CL0MWISF[CLXARAYX] = KL0MM005.CL0MMOPT[CLXLINEX];
                CL0MW10.CL0MWISF[CLXARAYX] = KL0MM005.CL0MMOPT[CLXLINEX];
                CLXREC.CLXEDITF = "Y";
                if (KL0MM005.CL0MMOPT[CLXLINEX] == " ") /* no entry,*/
                  CL0MW01.CL0MWRTF = " ";
                  CL0MW01.CL0MWPFK = "Y";
                  CLXREC.CLXERRF = "N";
                  set KL0MM005.CL0MMOPT[CLXLINEX] normal;
                end
                if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
                  if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
                    if (CL0MW01.CL0MWARF != "Y")
                      CL0MW01.CL0MWARF = "Y";
                    end
                  end
                end
              end
              CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* set indexes for next*/
              CL0MW01.CL0MWSTH = CL0MW06.SY1STNBR[CLXARAYX];
              CL0MW01.CL0MWCLH = CL0MW06.SY2CLRID[CLXARAYX];
            end
          else
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* set indexes for next*/
          end
        else
          CLXREC.CLXARAYX = 1;
          CL0MW01.CL0MWSTH = "9999";
        end
      end
    else
      if (KL0MM005.CL0MMOPT[CLXLINEX] == "A" /* all lines selected*/
       && CLXREC.CLXLINEX == 1)              /* entered on line 1*/
        if (CLXREC.CLXARAYX == 1)
          CLXREC.CLXEDITF = "Y";
          KL0MS22(); /* set all entries in array to s*/
        else
          set KL0MM005.CL0MMOPT[CLXLINEX] cursor, modified, bold;
          CL0MW01.CL0MWPFK = "Y";
          CLXREC.CLXEDITF = "Y";
          CLXREC.CLXERRF = "Y";
        end
      else
        set KL0MM005.CL0MMOPT[CLXLINEX] cursor, modified, bold;
        CL0MW01.CL0MWSEF = "Y"; /* selection flag*/
        CL0MW01.CL0MWPFK = "Y";
        CLXREC.CLXEDITF = "Y";
        CLXREC.CLXERRF = "Y";
      end
    end
  end
  ;
  ;
  if (KL0MM005.CL0MMOPT[CLXLINEX] == "S"
   || KL0MM005.CL0MMOPT[CLXLINEX] == "A")
    CL0MW01.CL0MWSEF = "Y"; /* selection flag*/
  end
  ;
  ;
end // end KL0MS21

// For All Selection, Set all 'S'
Function KL0MS22()
  ;
     /* ***   this statement group has the chore of looping ****/
     /* *** thru the line item array and marking each entry ****/
     /* *** with an 's', because some user has decided      ****/
     /* *** to display all detail screen for the invoice.   ****/
  ;
     /* set index*/
  ;
  CLXREC.CLXARAYX = 1;
  ;
     /* loop thru and mark each entry*/
  ;
  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
   && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
    CL0MW06.CL0MWISF[CLXARAYX] = "S";
    CL0MW10.CL0MWISF[CLXARAYX] = "S";
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
end // end KL0MS22

// build each screen line
Function KL0MS25()
   /* ************************************************************/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
    ;
    ;
    ;
    if (CL0MW06.CL0MWPR1[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        CL0MW01.CLICRDFL = CL0MW05.CLICRDFL[CLXARAYX];
        while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
         && CL0MW05.CLICRDFL[CLXARAYX] == CL0MW01.CLICRDFL
         && CL0MW06.SY1STNBR[CLXARAYX] == CL0MW01.CL0MWSTH
         && CL0MW06.SY2CLRID[CLXARAYX] == CL0MW01.CL0MWCLH)
          if (CL0MW10.CL0MWISF[CLXARAYX] == "V")
            KL0MM005.CL0MMOPT[CLXLINEX] = "V";
            CL0MW06.CL0MWISF[CLXARAYX] = " ";
            CL0MW10.CL0MWISF[CLXARAYX] = " ";
          else
            if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
              KL0MM005.CL0MMOPT[CLXLINEX] = CL0MW06.CL0MWISF[CLXARAYX];
              set KL0MM005.CL0MMOPT[CLXLINEX] modified;
              CLXREC.CLXEDITF = "Y";
            else
              KL0MM005.CL0MMOPT[CLXLINEX] = " ";
            end
          end
          if (KL0MM005.CL0MMOPT[CLXLINEX] != "V") /* ******12/01/88*****/
            CL0MW01.CL0MWQT = CL0MW01.CL0MWQT + CL0MW06.CL0MWQT[CLXARAYX];
            CL0MW01.CL0MWINP = CL0MW06.CLNNTPRC[CLXARAYX] * CL0MW06.CL0MWQT[CLXARAYX];
            CL0MW01.CLNNTPRC = CL0MW01.CLNNTPRC + CL0MW01.CL0MWINP;
          end /* ********12/01/88 ****************/
          if (CL0MW05.CLICRDFL[CLXARAYX] == "C")
            CL0MW01.CL0MWCF = "Y";
            ;
            if (CL0MW06.CLNNTPRC[CLXARAYX] != CL0MW01.CL0MWGPH)
              CL0MW01.CL0MWVFL = "V";
            end
            ;
            CL0MW01.CL0MWDCQ = CL0MW06.CL0MWQT[CLXARAYX] + CL0MW01.CL0MWDCQ;
            CL0MW01.CL0MWINC = CL0MW06.CLNNTPRC[CLXARAYX] * CL0MW06.CL0MWQT[CLXARAYX];
            CL0MW01.CL0MWNP1 = CL0MW01.CL0MWNP1 + CL0MW01.CL0MWINC;
            CL0MW01.CL0MWPFC = CL0MW06.CLKPRCFF[CLXARAYX];
          else
            if (CL0MW05.CLICRDFL[CLXARAYX] == "D")
              CL0MW01.CL0MWDF = "Y";
              ;
              if (CL0MW06.CLNNTPRC[CLXARAYX] != CL0MW01.CL0MWGPH)
                CL0MW01.CL0MWVFL = "V";
              end
              ;
              CL0MW01.CL0MWDDQ = CL0MW06.CL0MWQT[CLXARAYX] + CL0MW01.CL0MWDDQ;
              CL0MW01.CL0MWIND = CL0MW06.CLNNTPRC[CLXARAYX] * CL0MW06.CL0MWQT[CLXARAYX];
              CL0MW01.CL0MWNP2 = CL0MW01.CL0MWNP2 + CL0MW01.CL0MWIND;
              CL0MW01.CL0MWPFD = CL0MW06.CLKPRCFF[CLXARAYX];
            end
          end
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
        if (CLXREC.CLXLSTAX == CL0MW01.CL0MWMAX)
          if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
            CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
          end
        end
        if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
          CL0MW01.CL0MWTOT = "Y";
        else
          CL0MW01.CL0MWTOT = " ";
        end
        CL0MW01.CL0MWSTH = "ZZZZZ";
      else
        CL0MW01.CL0MWFNP = CL0MW01.CL0MWFNP + CL0MW01.CLNNTPRC;
        if (CL0MW01.CL0MWVFL == "V")
          KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
          set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
          CL0MW01.CL0MWNUP = 0;
          CL0MW01.CL0MWTUP = 0;
        else
          if (CL0MW01.CL0MWQT != 0)
            CL0MW01.CL0MWNUP = CL0MW01.CLNNTPRC / CL0MW01.CL0MWQT;
          else
            CL0MW01.CL0MWNUP = 0;
          end
        end
        if (CL0MW01.CL0MWDCQ != 0)
          if (CLXREC.CLXLINEX <= 12)
            KL0MM005.CLICRDFL[CLXLINEX] = "C";
            KL0MM005.CL0MMADF[CLXLINEX] = CL0MW06.CL0MMADF[CLXARAYX];
            KL0MM005.SY1STNBR[CLXLINEX] = CL0MW06.SY1STNBR[CLXARAYX];
            KL0MM005.SY2CLRID[CLXLINEX] = CL0MW06.SY2CLRID[CLXARAYX];
            KL0MM005.XDMCD[CLXLINEX] = CL0MW06.XDMCD[CLXARAYX];
            KL0MM005.CLKPRCFF[CLXLINEX] = CL0MW01.CL0MWPFC;
            KL0MM005.SY1SSTNM[CLXLINEX] = CL0MW06.SY1SSTNM[CLXARAYX];
            KL0MM005.SY2CLRAB[CLXLINEX] = CL0MW06.SY2CLRAB[CLXARAYX];
            CL0MW01.CL0MWCNP = CL0MW01.CL0MWCNP + CL0MW01.CL0MWNP1;
            KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWCNP;
            KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWDCQ;
            KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWNUP;
            CL0MW01.CL0MWCNP = 0;
            CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
          else
            return;
          end
        end
        if (CL0MW01.CL0MWDDQ != 0)
          if (CLXREC.CLXLINEX <= 12)
            KL0MM005.CLICRDFL[CLXLINEX] = "D";
            KL0MM005.CL0MMADF[CLXLINEX] = CL0MW06.CL0MMADF[CLXARAYX];
            KL0MM005.SY1STNBR[CLXLINEX] = CL0MW06.SY1STNBR[CLXARAYX];
            KL0MM005.SY2CLRID[CLXLINEX] = CL0MW06.SY2CLRID[CLXARAYX];
            KL0MM005.XDMCD[CLXLINEX] = CL0MW06.XDMCD[CLXARAYX];
            KL0MM005.CLKPRCFF[CLXLINEX] = CL0MW01.CL0MWPFD;
            KL0MM005.SY1SSTNM[CLXLINEX] = CL0MW06.SY1SSTNM[CLXARAYX];
            KL0MM005.SY2CLRAB[CLXLINEX] = CL0MW06.SY2CLRAB[CLXARAYX];
            CL0MW01.CL0MWDNP = CL0MW01.CL0MWDNP + CL0MW01.CL0MWNP2;
            KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWDNP;
            KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWDDQ;
            KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWNUP;
            CL0MW01.CL0MWDNP = 0;
            CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
          else
            return;
          end
        end
        if (CL0MW01.CL0MWRTF == "Y")
          if (CLXREC.CLXARAYX > CL0MW01.CL0MWAYX)
            CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
            CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWFNP;
            if (CL0MW01.CL0MWVFL == "V")
              KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
              set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
              CL0MW01.CL0MWVFL = " ";
            else
              if (CL0MW01.CL0MWTRQ != 0)
                CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
              else
                CL0MW01.CL0MWTUP = 0;
              end
            end
          end
        else
          CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
          CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWFNP;
          if (CL0MW01.CL0MWVFL == "V")
            KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
            set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
            CL0MW01.CL0MWVFL = " ";
          else
            if (CL0MW01.CL0MWTRQ != 0)
              CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
            else
              CL0MW01.CL0MWTUP = 0;
            end
          end
          CL0MW01.CL0MWFNP = 0;
        end
        ;
        ;
        CL0MW01.CL0MWTOT = "N";
        CL0MW01.CL0MWFNP = 0;
        CL0MW01.CLNNTPRC = 0;
        CL0MW01.CL0MWNP1 = 0;
        CL0MW01.CL0MWNP2 = 0;
        CL0MW01.CL0MWQT = 0;
        CL0MW01.CL0MWDCQ = 0;
        CL0MW01.CL0MWDDQ = 0;
        CL0MW01.CL0MWVFL = " ";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        return;
      end
    end
    ;
    if (CL0MW06.CL0MWPR2[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        if (KL0MM005.CL0MMOPT[CLXLINEX] != "V") /* ******12/01/88*****/
          CL0MW01.CL0MWNPC = CL0MW06.CL0MWQT[CLXARAYX] * CL0MW06.CLNNTPRC[CLXARAYX];
          CL0MW01.CLNNTPRC = CL0MW01.CLNNTPRC + CL0MW01.CL0MWNPC;
          CL0MW01.CL0MWQT = CL0MW01.CL0MWQT + CL0MW06.CL0MWQT[CLXARAYX];
        end /* ********12/01/88 ****************/
      else
        if (CL0MW10.CL0MWISF[CLXARAYX] == "V")
          KL0MM005.CL0MMOPT[CLXLINEX] = CL0MW10.CL0MWISF[CLXARAYX];
          CL0MW06.CL0MWISF[CLXARAYX] = " ";
          CL0MW10.CL0MWISF[CLXARAYX] = " ";
        else
          if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
            KL0MM005.CL0MMOPT[CLXLINEX] = CL0MW06.CL0MWISF[CLXARAYX];
            set KL0MM005.CL0MMOPT[CLXLINEX] modified;
            CLXREC.CLXEDITF = "Y";
          else
            KL0MM005.CL0MMOPT[CLXLINEX] = " ";
          end
        end
        if (CL0MW01.CL0MWVFL == "V")
          KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
          set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
          CL0MW01.CL0MWNUP = 0;
        else
          if (CL0MW01.CL0MWQT != 0)
            CL0MW01.CL0MWNUP = CL0MW01.CLNNTPRC / CL0MW01.CL0MWQT;
          else
            CL0MW01.CL0MWNUP = 0;
          end
        end
        KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CLNNTPRC;
        KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQT;
        KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWNUP;
        if (CL0MW01.CL0MWRTF == "Y")
          if (CLXREC.CLXARAYX > CL0MW01.CL0MWAYX)
            CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
            CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWFNP;
            if (CL0MW01.CL0MWVFL == "V")
              KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
              set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
              CL0MW01.CL0MWVFL = " ";
            else
              if (CL0MW01.CL0MWTRQ != 0)
                CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
              else
                CL0MW01.CL0MWTUP = 0;
              end
            end
            CL0MW01.CL0MWFNP = 0;
          end
        else
          CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
          CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CLNNTPRC;
          if (CL0MW01.CL0MWVFL == "V")
            KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
            set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
            CL0MW01.CL0MWVFL = " ";
          else
            if (CL0MW01.CL0MWTRQ != 0)
              CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
            else
              CL0MW01.CL0MWTUP = 0;
            end
          end
          ;
        end
        KL0MM005.CLICRDFL[CLXLINEX] = "C";
        KL0MM005.CL0MMADF[CLXLINEX] = CL0MW06.CL0MMADF[CLXARAYX];
        KL0MM005.SY1STNBR[CLXLINEX] = CL0MW06.SY1STNBR[CLXARAYX];
        KL0MM005.SY2CLRID[CLXLINEX] = CL0MW06.SY2CLRID[CLXARAYX];
        KL0MM005.XDMCD[CLXLINEX] = CL0MW06.XDMCD[CLXARAYX];
        KL0MM005.SY1SSTNM[CLXLINEX] = CL0MW06.SY1SSTNM[CLXARAYX];
        KL0MM005.SY2CLRAB[CLXLINEX] = CL0MW06.SY2CLRAB[CLXARAYX];
        KL0MM005.CLKPRCFF[CLXLINEX] = CL0MW06.CLKPRCFF[CLXARAYX];
        ;
        CL0MW01.CL0MWTOT = "N";
        CL0MW01.CLNNTPRC = 0;
        CL0MW01.CL0MWQT = 0;
        CL0MW01.CL0MWVFL = " ";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        return;
      end
    end
    ;
    if (CL0MW06.CL0MWPR3[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        if (KL0MM005.CL0MMOPT[CLXLINEX] != "V") /* ******12/01/88*****/
          CL0MW01.CL0MWNPC = CL0MW06.CL0MWQT[CLXARAYX] * CL0MW06.CLNNTPRC[CLXARAYX];
          CL0MW01.CLNNTPRC = CL0MW01.CLNNTPRC + CL0MW01.CL0MWNPC;
          CL0MW01.CL0MWQT = CL0MW01.CL0MWQT + CL0MW06.CL0MWQT[CLXARAYX];
        end /* ********12/01/88 ****************/
      else
        if (CL0MW10.CL0MWISF[CLXARAYX] == "V")
          KL0MM005.CL0MMOPT[CLXLINEX] = CL0MW10.CL0MWISF[CLXARAYX];
          CL0MW06.CL0MWISF[CLXARAYX] = " ";
          CL0MW10.CL0MWISF[CLXARAYX] = " ";
        else
          if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
            KL0MM005.CL0MMOPT[CLXLINEX] = CL0MW06.CL0MWISF[CLXARAYX];
            set KL0MM005.CL0MMOPT[CLXLINEX] modified;
            CLXREC.CLXEDITF = "Y";
          else
            if (CLXREC.CLXERRF != "Y")
              KL0MM005.CL0MMOPT[CLXLINEX] = " ";
            end
          end
        end
        if (CL0MW01.CL0MWVFL == "V")
          KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
          set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
          CL0MW01.CL0MWNUP = 0;
        else
          if (CL0MW01.CL0MWQT != 0)
            CL0MW01.CL0MWNUP = CL0MW01.CLNNTPRC / CL0MW01.CL0MWQT;
          else
            CL0MW01.CL0MWNUP = 0;
          end
        end
        KL0MM005.CLHMEMAM[CLXLINEX] = CL0MW01.CLNNTPRC;
        KL0MM005.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQT;
        KL0MM005.CLKCLPRC[CLXLINEX] = CL0MW01.CL0MWNUP;
        if (CL0MW01.CL0MWRTF == "Y")
          if (CLXREC.CLXARAYX > CL0MW01.CL0MWAYX)
            CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
            CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWFNP;
            if (CL0MW01.CL0MWVFL == "V")
              KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
              set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
              CL0MW01.CL0MWVFL = " ";
            else
              if (CL0MW01.CL0MWTRQ != 0)
                CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
              else
                CL0MW01.CL0MWTUP = 0;
              end
            end
            CL0MW01.CL0MWFNP = 0;
          end
        else
          CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW01.CL0MWQT;
          CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CLNNTPRC;
          if (CL0MW01.CL0MWVFL == "V")
            KL0MM005.CL0MMVPF = "VARYING PRICE"; /* 1-21-88*/
            set KL0MM005.CL0MMVPF bold; /* 1-21-88*/
            CL0MW01.CL0MWVFL = " ";
          else
            if (CL0MW01.CL0MWTRQ != 0)
              CL0MW01.CL0MWTUP = CL0MW01.CL0MWTNP / CL0MW01.CL0MWTRQ;
            else
              CL0MW01.CL0MWTUP = 0;
            end
          end
          ;
        end
        KL0MM005.CLICRDFL[CLXLINEX] = "C";
        KL0MM005.CL0MMADF[CLXLINEX] = CL0MW06.CL0MMADF[CLXARAYX];
        KL0MM005.SY1STNBR[CLXLINEX] = CL0MW06.SY1STNBR[CLXARAYX];
        KL0MM005.SY2CLRID[CLXLINEX] = CL0MW06.SY2CLRID[CLXARAYX];
        KL0MM005.XDMCD[CLXLINEX] = CL0MW06.XDMCD[CLXARAYX];
        KL0MM005.SY1SSTNM[CLXLINEX] = CL0MW06.SY1SSTNM[CLXARAYX];
        KL0MM005.SY2CLRAB[CLXLINEX] = CL0MW06.SY2CLRAB[CLXARAYX];
        KL0MM005.CLKPRCFF[CLXLINEX] = CL0MW06.CLKPRCFF[CLXARAYX];
        ;
        CL0MW01.CL0MWTOT = "N";
        CL0MW01.CLNNTPRC = 0;
        CL0MW01.CL0MWQT = 0;
        CL0MW01.CL0MWVFL = " ";
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        return;
      end
    end
    if (CLXREC.CLXLINEX >= CLXREC.CLXMAXLN[2])
      if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
        CL0MW01.CL0MWPFK = "Y";
        CL0MW01.CL0MWRTF = " ";
      else
        CL0MW01.CL0MWTOT = " ";
        CL0MW01.CL0MWPFK = " ";
        CL0MW01.CL0MWRTF = "Y";
      end
    end
  else
    CLXREC.CLXMAPMX = CLXREC.CLXLINEX;
    CLXREC.CLXLINEX = 13;
  end
  ;
  ;
  ;
  ;
end // end KL0MS25

// look up style and color
Function KL0MS27()
   /* ************************************************************/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  SY1REC.SY1STNBR = CL0MW06.SY1STNBR[CLXARAYX];
  SY1REC.XGPCD = CL0MW05.XGPCD[CLXARAYX];
  KL0M954(); /* look-up style number*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0MW06.SY1SSTNM[CLXARAYX] = SY1REC.SY1SSTNM;
    CL0MW06.SY4SZSCL[CLXARAYX] = SY1REC.SY4SZSCL;
  end
  ;
  ;
  ;
  SY2REC.SY1STNBR = CL0MW06.SY1STNBR[CLXARAYX];
  SY2REC.SY2CLRID = CL0MW06.SY2CLRID[CLXARAYX];
  SY2REC.XGPCD = CL0MW05.XGPCD[CLXARAYX];
  SY2REC.XDMCD = CL0MW06.XDMCD[CLXARAYX];
  KL0M955(); /* look-up color number*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0MW06.SY2CLRAB[CLXARAYX] = SY2REC.SY2CLRAB;
  end
  ;
end // end KL0MS27

Function KL0MS30()
   /* ************************************************************/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
    CL0MW01.CL0MWERF = "N";
    ;
    if (CLXREC.CLXARAYX == 1)
      if (CL0MW01.CL0MWTOT != "Y"
       && CL0MW01.CL0MWMSF != "Y")
        CL0MW01.CL0MWTRQ = 0;
        CL0MW01.CL0MWTNP = 0;
        CL0MW01.CL0MWTUP = 0;
      end
    end
    ;
    ;
    ;
    if (CL0MW06.CL0MWPR1[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
          if (CL0MW10.SY4IDDSC[CLXARAYX] != " ")
            CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW10.CL0MWQT[CLXARAYX];
            CL0MW01.CL0MWTUP = CL0MW01.CL0MWTUP + CL0MW10.CLNNTPRC[CLXARAYX];
            CL0MW01.CL0MWMAM = CL0MW10.CL0MWQT[CLXARAYX] * CL0MW10.CLNNTPRC[CLXARAYX];
            KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW10.CL0MWQT[CLXARAYX];
            KL0MM010.CLKCLPRC[CLXLINEX] = CL0MW10.CLNNTPRC[CLXARAYX];
            KL0MM010.CLKPRCFF[CLXLINEX] = CL0MW10.CLKPRCFF[CLXARAYX];
            KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWMAM;
            CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWMAM;
            ;
            if (CL0MW06.CL0MWSIF == "Y")
              KL0MM010.SY4IDDSC[CLXLINEX] = CL0MW10.SY4IDDSC[CLXARAYX];
            end
            CL0MW01.CL0MWMAM = 0;
          else
            CL0MW01.CL0MWERF = "Y";
            CL0MW01.CL0MWTOT = "N";
            CL0MW01.CL0MWPFK = " "; /* ************08-24-88*/
          end
        else
          CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1; /* ******** 08-30-88*/
        end
        ;
      else
        ;
        CL0MW01.CL0MWTOT = "N";
        if (CLXREC.CLXLINEX <= 8) /* ********** 09-24-87*/
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 3;
        else /* ************** 09-24-87*/
          CL0MW01.CL0MWMSF = "Y";
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 2; /* ******** 09-24-87*/
        end /* ************* 09-24-87*/
        if (CL0MW01.CL0MWPFK == "Y")
          if (CL0MW01.CL0MWPFF == " ")
            KL0MM010.SY4IDDSC[CLXLINEX] = "TOTALS";
            CL0MW01.CL0MWQRQ = CL0MW01.CL0MWTRQ;
            KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
            CL0MW01.CL0MWQNP = CL0MW01.CL0MWTNP;
            KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
            CL0MW01.CL0MWPFF = "Y";
            /* MOVE 0 TO CL0MW01.CL0MWTRQ;*/
            /* MOVE 0 TO CL0MW01.CL0MWTNP;*/
            CL0MW01.CL0MWQRQ = 0;
            CL0MW01.CL0MWQNP = 0;
          else
            KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
            KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
            /* MOVE 0 TO CL0MW01.CL0MWQRQ;*/
            /* MOVE 0 TO CL0MW01.CL0MWQNP;*/
          end
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    if (CL0MW06.CL0MWPR2[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        if (CL0MW10.SY4IDDSC[CLXARAYX] != " ")
          CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW10.CL0MWQT[CLXARAYX];
          CL0MW01.CL0MWTUP = CL0MW01.CL0MWTUP + CL0MW10.CLNNTPRC[CLXARAYX];
          CL0MW01.CL0MWMAM = CL0MW10.CL0MWQT[CLXARAYX] * CL0MW10.CLNNTPRC[CLXARAYX];
          ;
          KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW10.CL0MWQT[CLXARAYX];
          KL0MM010.CLKCLPRC[CLXLINEX] = CL0MW10.CLNNTPRC[CLXARAYX];
          KL0MM010.CLKPRCFF[CLXLINEX] = CL0MW10.CLKPRCFF[CLXARAYX];
          KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWMAM;
          CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWMAM;
          ;
          if (CL0MW06.CL0MWSIF == "Y")
            KL0MM010.SY4IDDSC[CLXLINEX] = CL0MW10.SY4IDDSC[CLXARAYX];
          end
          CL0MW01.CL0MWMAM = 0;
        else
          CL0MW01.CL0MWPFK = " "; /* ************08-24-88*/
          CL0MW01.CL0MWERF = "Y";
          CL0MW01.CL0MWTOT = "N";
        end
      else
        CL0MW01.CL0MWTOT = "N";
        if (CLXREC.CLXLINEX <= 8) /* ********** 09-24-87*/
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 3; /* ******** 09-24-87*/
        else /* ************** 09-24-87*/
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 2; /* ******** 09-24-87*/
        end /* ************* 09-24-87*/
        if (CL0MW01.CL0MWSET == "Y")
          /* next sentence*/
        else
          if (CL0MW01.CL0MWPFK == "Y")
            /* CL0MW01.CL0MWQRQ = CL0MW01.CL0MWQRQ + CL0MW01.CL0MWTRQ;*/
            /* CL0MW01.CL0MWQNP = CL0MW01.CL0MWQNP + CL0MW01.CL0MWTNP;*/
            if (CL0MW01.CL0MWPFF == " ")
              KL0MM010.SY4IDDSC[CLXLINEX] = "TOTALS";
              CL0MW01.CL0MWQRQ = CL0MW01.CL0MWTRQ;
              CL0MW01.CL0MWQNP = CL0MW01.CL0MWTNP;
              KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
              KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
              CL0MW01.CL0MWPFF = "Y";
              CL0MW01.CL0MWTRQ = 0;
              CL0MW01.CL0MWTNP = 0;
              CL0MW01.CL0MWQRQ = 0;
              CL0MW01.CL0MWQNP = 0;
            else
              KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
              KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
              CL0MW01.CL0MWQRQ = 0;
              CL0MW01.CL0MWQNP = 0;
            end
          end
          if (CL0MW01.CL0MWMSF == "Y")
            CL0MW01.CL0MWSET = "Y";
          end
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    if (CL0MW06.CL0MWPR3[CLXARAYX] == "Y")
      if (CL0MW01.CL0MWTOT != "Y")
        if (CL0MW10.SY4IDDSC[CLXARAYX] != " ")
          CL0MW01.CL0MWTRQ = CL0MW01.CL0MWTRQ + CL0MW10.CL0MWQT[CLXARAYX];
          CL0MW01.CL0MWTUP = CL0MW01.CL0MWTUP + CL0MW10.CLNNTPRC[CLXARAYX];
          CL0MW01.CL0MWMAM = CL0MW10.CL0MWQT[CLXARAYX] * CL0MW10.CLNNTPRC[CLXARAYX];
          KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW10.CL0MWQT[CLXARAYX];
          KL0MM010.CLKCLPRC[CLXLINEX] = CL0MW10.CLNNTPRC[CLXARAYX];
          KL0MM010.CLKPRCFF[CLXLINEX] = CL0MW10.CLKPRCFF[CLXARAYX];
          KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWMAM;
          CL0MW01.CL0MWTNP = CL0MW01.CL0MWTNP + CL0MW01.CL0MWMAM;
          ;
          if (CL0MW06.CL0MWSIF == "Y")
            KL0MM010.SY4IDDSC[CLXLINEX] = CL0MW10.SY4IDDSC[CLXARAYX];
          end
          CL0MW01.CL0MWMAM = 0;
        else
          CL0MW01.CL0MWPFK = " "; /* ************08-24-88*/
          CL0MW01.CL0MWERF = "Y";
          CL0MW01.CL0MWTOT = "N";
        end
      else
        CL0MW01.CL0MWTOT = "N";
        if (CLXREC.CLXLINEX <= 8) /* ********** 09-24-87*/
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 3;
        else /* ************** 09-24-87*/
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 2; /* ******** 09-24-87*/
        end /* ************* 09-24-87*/
        if (CL0MW01.CL0MWPFK == "Y")
          if (CL0MW01.CL0MWPFF == " ")
            KL0MM010.SY4IDDSC[CLXLINEX] = "TOTALS";
            CL0MW01.CL0MWQNP = CL0MW01.CL0MWTNP;
            KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
            CL0MW01.CL0MWQRQ = CL0MW01.CL0MWTRQ;
            KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
            CL0MW01.CL0MWPFF = "Y";
            CL0MW01.CL0MWTRQ = 0;
            CL0MW01.CL0MWTNP = 0;
            CL0MW01.CL0MWQRQ = 0;
            CL0MW01.CL0MWQNP = 0;
          else
            KL0MM010.CLPDEFQ[CLXLINEX] = CL0MW01.CL0MWQRQ;
            KL0MM010.CLHMEMAM[CLXLINEX] = CL0MW01.CL0MWQNP;
            CL0MW01.CL0MWQRQ = 0;
            CL0MW01.CL0MWQNP = 0;
          end
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  else
    CLXREC.CLXMAPMX = CLXREC.CLXLINEX;
    CLXREC.CLXLINEX = 12;
  end
  ;
  ;
  ;
  ;
end // end KL0MS30

// Set selections to 'v' for view
Function KL0MS35()
  ;
  ;
  ;
  CL0MW01.CL0MWSF1 = 0;
  CLXREC.CLXARAYX = 1;
  ;
  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX) /* while le to last*/
    if (CL0MW06.CL0MWISF[CLXARAYX] == "V") /* if current record eq 'v'*/
      CLXREC.CLXCURLN = CLXREC.CLXARAYX; /* ***************/
      CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
      CL0MW01.CL0MWSF1 = 1;
    end
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
  ;
  if (CL0MW01.CL0MWSF1 == 0)
    CLXREC.CLXARAYX = 1;
    while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      if (CL0MW06.CL0MWISF[CLXARAYX] == "S")
        CL0MW06.CL0MWISF[CLXARAYX] = "V";
      end
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
  end
  ;
  ;
end // end KL0MS35

// adj indicator for 'rts' claim
Function KL0MS50()
  ;
   /* if adjustment indicator is set on an 'rts' claim*/
  ;
  if (CLAREC.CLADJIND == "Y") /* if claim type 'adj'*/
    CLRREC.CLACLMNB = KL0MM001.CLACLMNB;
    CLRREC.CLHSEQNB = CLHREC.CLHSEQNB;
    CLRREC.XGPCD = "**";
    CLRREC.SY1STNBR = "******";
    CLRREC.SY2CLRID = "***";
    CLRREC.XDMCD = "**";
    CLRREC.CLICRDFL = "*";
    KL0M996(); /* get all records greater than key*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CLXREC.CLXEOFF = "N";
      KL0M997(); /* get first record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        while (SQLCA.VAGen_SQLCODE == 0
         && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
          if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
            if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
              CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
              KL0M997(); /* get next record*/
            else
              /* MOVE 1 TO CLXREC.CLXARAYX;*/
              set CL0MW05 empty;
              set CL0MW06 empty;
              set CL0MW10 empty;
              while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
               && SQLCA.VAGen_SQLCODE == 0)
                /* IF CLRREC.CLRRQTQ NE 0;*/
                ;
                KL0MS80(); /* move header fields to array*/
                ;
                KL0MS90(); /* move selected fields to array*/
                CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* adjustment for rts claim flag*/
                CL0MW05.CL0MMMTP[CLXARAYX] = "RTS/ADJ*";
                ;
                KL0MS27(); /* look up style and color*/
                ;
                KL0MS70(); /* move xumdesc to array*/
                ;
                KL0MS71(); /* move xqaabrv to array*/
                ;
                KL0MS72(); /* move xgpabrv to array*/
                ;
                /* END ;*/
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                KL0M997(); /* get next record*/
              end
            end
          else
            while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
             && SQLCA.VAGen_SQLCODE == 0)
              ;
              /* IF CLRREC.CLRRQTQ NE 0;*/
              KL0MS80(); /* move header fields to array*/
              ;
              KL0MS90(); /* move selected fields to array*/
              CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* adjustment for rts claim flag*/
              CL0MW05.CL0MMMTP[CLXARAYX] = "RTS/ADJ*";
              ;
              KL0MS27(); /* look up style and color*/
              ;
              KL0MS70(); /* move xumdesc to array*/
              ;
              KL0MS71(); /* move xqaabrv to array*/
              ;
              KL0MS72(); /* move xgpabrv to array*/
              ;
              /* END ;*/
              CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
              KL0M997(); /* get next record*/
            end
          end
        end
        /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
        /* MOVE CLXREC.CLXARAYX TO CLXREC.CLXLSTAX;*/
        /* MOVE 1 TO CLXREC.CLXARY1X;*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
          return;
        else
          TA1REC.TA1LOCAT[2] = "CL0MS50"; /* location*/
          TA1REC.TA1LOCAT[4] = "IO1370"; /* location*/
          TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
          TA1REC.TA1TBLVU = "VCLADJ01"; /* table view name*/
          CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
          TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
          XPCL010();
        end
      end
    end
    ;
    KL0M998(); /* close set clrrec*/
    ;
  end
  ;
  ;
end // end KL0MS50

// def indicator for 'rts' claim
Function KL0MS55()
  ;
   /* if defective indicator is set on an 'rts' claim*/
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0M900();
                                   /* select unique from ra header*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* IF CLJREC.CLJRDIND eq 'y'     ; if claim type 'def'*/
    CLPREC.CLACLMNB = KL0MM001.CLACLMNB;
    CLPREC.CLHSEQNB = CLHREC.CLHSEQNB;
    CLPREC.CL2ISNBR = -1;
    CLPREC.IV0IVCID = -1;
    CLPREC.XGPCD = "**";
    CLPREC.SY1STNBR = "******";
    CLPREC.SY2CLRID = "***";
    CLPREC.XDMCD = "**";
    KL0M993(); /* get all records greater than key*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CLXREC.CLXEOFF = "N";
      /* MOVE 1 TO CLXREC.CLXARAYX;*/
      KL0M994(); /* get first record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        while (SQLCA.VAGen_SQLCODE == 0
         && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
          if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
            if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
              CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
              KL0M994(); /* get next record*/
            else
              CLXREC.CLXARAYX = 1;
              set CL0MW05 empty;
              set CL0MW06 empty;
              set CL0MW10 empty;
              while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
               && SQLCA.VAGen_SQLCODE == 0)
                /* IF CLPREC.CLPDEFQ NE 0;*/
                ;
                KL0MS80(); /* move header fields to array*/
                ;
                KL0MS92(); /* move selected fields to array*/
                CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* adjustment for rts claim flag*/
                CL0MW05.CL0MMMTP[CLXARAYX] = "RTS/DEF*";
                ;
                KL0MS27(); /* look up style and color*/
                ;
                KL0MS70(); /* move xumdesc to array*/
                ;
                KL0MS71(); /* move xqaabrv to array*/
                ;
                KL0MS72(); /* move xgpabrv to array*/
                ;
                /* END ;*/
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                KL0M994(); /* get next record*/
              end
            end
          else
            while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
             && SQLCA.VAGen_SQLCODE == 0)
              ;
              /* IF CLPREC.CLPDEFQ NE 0;*/
              KL0MS80(); /* move header fields to array*/
              ;
              KL0MS92(); /* move selected fields to array*/
              CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* adjustment for rts claim flag*/
              CL0MW05.CL0MMMTP[CLXARAYX] = "RTS/DEF*";
              ;
              KL0MS27(); /* look up style and color*/
              ;
              KL0MS70(); /* move xumdesc to array*/
              ;
              KL0MS71(); /* move xqaabrv to array*/
              ;
              KL0MS72(); /* move xgpabrv to array*/
              ;
              /* END ;*/
              CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
              KL0M994(); /* get next record*/
            end
          end
        end
        /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
        /* MOVE CLXREC.CLXARAYX TO CLXREC.CLXLSTAX;*/
        /* MOVE 1 TO CLXREC.CLXARY1X;*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
          return;
        else
          TA1REC.TA1LOCAT[2] = "CL0MS55"; /* location*/
          TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
          TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
          TA1REC.TA1TBLVU = "VDEFIT01"; /* table view name*/
          CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
          TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
          XPCL010();
        end
      end
    end
    ;
    KL0M995(); /* close set clrrec*/
    ;
    /* END ;*/
  end
  ;
end // end KL0MS55

// rts indicator for 'def' claim
Function KL0MS60()
  ;
   /* if adjustment indicator is set on an 'rts' claim*/
  ;
  ;
   /* ************************************************************/
   /* *                                                         **/
   /* *      select product summary array detail                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0M900(); /* select unique from ra header*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* IF CLJREC.CLJRDIND EQ 'Y'     ; if claim type 'rts'*/
    CLNREC.CLACLMNB = KL0MM001.CLACLMNB;
    CLNREC.CLHSEQNB = CLHREC.CLHSEQNB;
    ;
     /* the inspection number select will need to be changed*/
    ;
    CLNREC.CL2ISNBR = -1;
    CLNREC.XGPCD = "**";
    CLNREC.SY1STNBR = "******";
    CLNREC.SY2CLRID = "***";
    CLNREC.XDMCD = "**"; /* dimension*/
    CLNREC.XQACD = "**"; /* qulaity*/
    CLNREC.XUMCD = "**"; /* unit of measure*/
    KL0M990(); /* get all records greater than key*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CLXREC.CLXEOFF = "N";
      /* MOVE 1 TO CLXREC.CLXARAYX;*/
      KL0M991(); /* get first record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        while (SQLCA.VAGen_SQLCODE == 0
         && CLXREC.CLXARAYX < CL0MW01.CL0MWMAX)
          if (CLXREC.CLXARY1X > CL0MW01.CL0MWMXL)
            if (CL0MW01.CL0MWCTR < CLXREC.CLXARY1X)
              CL0MW01.CL0MWCTR = CL0MW01.CL0MWCTR + 1;
              KL0M991(); /* get next record*/
            else
              CLXREC.CLXARAYX = 1;
              set CL0MW05 empty;
              set CL0MW06 empty;
              set CL0MW10 empty;
              while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
               && SQLCA.VAGen_SQLCODE == 0)
                ;
                /* IF CLNREC.CLNRTSQ NE 0;*/
                KL0MS80(); /* move header fields to array*/
                ;
                KL0MS91(); /* move selected fields to array*/
                CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* rts for def claim flag*/
                CL0MW05.CL0MMMTP[CLXARAYX] = "DEF/RTS*";
                ;
                KL0MS27(); /* look up style and color*/
                ;
                KL0MS70(); /* move xumdesc to array*/
                ;
                KL0MS71(); /* move xqaabrv to array*/
                ;
                KL0MS72(); /* move xgpabrv to array*/
                ;
                /* END ;*/
                CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
                KL0M991(); /* get next record*/
              end
            end
          else
            while (CLXREC.CLXARAYX <= CL0MW01.CL0MWMAX
             && SQLCA.VAGen_SQLCODE == 0)
              ;
              /* IF CLNREC.CLNRTSQ NE 0;*/
              KL0MS80(); /* move header fields to array*/
              ;
              KL0MS91(); /* move selected fields to array*/
              CL0MW06.CL0MMADF[CLXARAYX] = "*"; /* rts for def claim flag*/
              CL0MW05.CL0MMMTP[CLXARAYX] = "DEF/RTS*";
              ;
              KL0MS27(); /* look up style and color*/
              ;
              KL0MS70(); /* move xumdesc to array*/
              ;
              KL0MS71(); /* move xqaabrv to array*/
              ;
              KL0MS72(); /* move xgpabrv to array*/
              ;
              /* END ;*/
              CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
              KL0M991(); /* get next record*/
            end
          end
        end
        /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;*/
        /* MOVE CLXREC.CLXARAYX TO CLXREC.CLXLSTAX;*/
        /* MOVE 1 TO CLXREC.CLXARY1X;*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          CLXREC.CLXERRF = "Y";
          return;
        else
          TA1REC.TA1LOCAT[2] = "CL0MS60"; /* location*/
          TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
          TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
          TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
          CL0MW01.CL0MWNUM = CLAREC.CLACLMNB;
          TA1REC.TA1TBLKE = CL0MW01.CL0MWNUM; /* table key*/
          XPCL010();
        end
      end
    end
    ;
    KL0M992(); /* close set clnrec*/
    /* END ;*/
  end
  ;
  ;
  ;
  ;
end // end KL0MS60

// find if addl a/r ref nbr exist
Function KL0MS63()
   /* ************************************************************/
   /* *  determine if additional a/r reference numbers exist    **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0MS63"; /* set current process name*/
  ;
  ;
  set CLCREC empty;
  CL0MW01.ARCCCREF = " ";
  ;
  CLCREC.CLACLMNB = CLAREC.CLACLMNB;
  CLCREC.CLCPMAR = "*";
  ;
  ;
  KL0M964(); /* select the set of ar records for this claim*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "FETCHING CLF RECORD SET";
    XPCL010();
  end
  ;
  ;
  KL0M965(); /* get the first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no first record found*/
      return;
    else
      TA1REC.TA1TBLKE = "FETCHING FIRST CLF RECORD";
      XPCL010();
    end
  end
  ;
  CL0MW01.CL0MWCNT = 1; /* initialize record counter*/
  ;
  while (CL0MW01.ARCCCREF == " "
   && SQLCA.VAGen_SQLCODE == 0)
    if (CLCREC.ARCCCREF != " "
     && CL0MW01.ARCCCREF == " ")
      if (CLCREC.CLCPMAR == "Y")
        CL0MW01.ARCCCREF = CLCREC.ARCCCREF;
      end
    end
    KL0M965(); /* get the next xref record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if there was more than one*/
      CL0MW01.CL0MWCNT = CL0MW01.CL0MWCNT + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
      else
        TA1REC.TA1TBLKE = "FETCHING NEXT CLF RECORD";
        XPCL010();
      end
    end
  end
  ;
  KL0M966(); /* close set*/
  ;
  ;
  ;
  ;
  ;
  ;
  ;
end // end KL0MS63

// format xumdesc to cl0mw05
Function KL0MS70()
  ;
  ;
    /* ---------- start stmt grp cl0ms70 -----------------*/
  ;
    /* statement group cl0ms13 - look up terms abreviation*/
       /* on xpttbl and format to cl0mm001 map*/
  ;
  ;
  if (CL0MW05.XUMCD[CLXARAYX] in XUMTBL.XUMCD) /* if in table*/
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if status is active*/
      CL0MW05.XUMDESC[CLXARAYX] = XUMTBL.XUMDESC;
    else
      KL0MM005.VAGen_EZEMSG = "STATUS CODE INACTIVE";
    end
  end
  ;
    /* -----------   end of stmt grp cl0ms70  ------------*/
  ;
end // end KL0MS70

// format xqaabrv to cl0mw05
Function KL0MS71()
  ;
  ;
    /* ---------- start stmt grp cl0ms71 -----------------*/
  ;
    /* statement group cl0ms71 - look up terms abreviation*/
       /* on xpttbl and format to cl0mw05*/
  ;
  ;
  if (CL0MW05.XQACD[CLXARAYX] in XQATBL.XQACD) /* if in table*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if status is active*/
      CL0MW05.XQAABRV[CLXARAYX] = XQATBL.XQAABRV;
    else
      KL0MM005.VAGen_EZEMSG = "STATUS CODE INACTIVE";
    end
  end
  ;
    /* -----------   end of stmt grp cl0ms71  ------------*/
  ;
end // end KL0MS71

// format xgpabrv to cl0mw05
Function KL0MS72()
  ;
  ;
    /* ---------- start stmt grp cl0ms72 -----------------*/
  ;
    /* statement group cl0ms72 - look up terms abreviation*/
       /* on xgptbl and format to cl0mw05*/
  ;
  ;
  if (CL0MW05.XGPCD[CLXARAYX] in XGPTBL.XGPCD) /* if in table*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if status is active*/
      CL0MW05.XGPABRV[CLXARAYX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      KL0MM005.VAGen_EZEMSG = "STATUS CODE INACTIVE";
    end
  end
  ;
    /* -----------   end of stmt grp cl0ms72  ------------*/
  ;
end // end KL0MS72

// move header info to array
Function KL0MS80()
  ;
  ;
   /* MOVE CLAREC.YCTCD TO CL0MW05.CL0MMMTP(CLXARAYX);*/
  CL0MW05.KUCCOID[CLXARAYX] = CLAREC.KUCCOID;
  CL0MW05.KUMSTRID[CLXARAYX] = CLAREC.KUMSTRID;
  CL0MW05.XNXCD[CLXARAYX] = CLAREC.XNXCD;
  CL0MW05.KUCCONM[CLXARAYX] = CLWREC.KUCCONM;
  CL0MW06.CLHMEMAM[CLXARAYX] = CLHREC.CLHMEMAM;
  CL0MW05.CLHMEMNB[CLXARAYX] = CLHREC.CLHMEMNB;
  CL0MW06.ARCCCREF[CLXARAYX] = CL0MW01.ARCCCREF;
  CL0MW06.CLHMEMDT[CLXARAYX] = CLHREC.CLHMEMDT;
  CL0MW05.CLHSEQNB[CLXARAYX] = CLHREC.CLHSEQNB;
  CL0MW06.CLHNETFL[CLXARAYX] = CLHREC.CLHNETFL;
  CL0MW05.CLACLMNB[CLXARAYX] = CLAREC.CLACLMNB;
  ;
  ;
  ;
  ;
end // end KL0MS80

// move clrrec info to array
Function KL0MS90()
  ;
  ;
    /* ---------- start stmt grp cl0ms90 -----------------*/
  ;
    /* statement group cl0ms90 - move adjustment product summary*/
      /* information to array.*/
  ;
  ;
  CL0MW06.SY1STNBR[CLXARAYX] = CLRREC.SY1STNBR;
  CL0MW06.SY2CLRID[CLXARAYX] = CLRREC.SY2CLRID;
  CL0MW05.XGPCD[CLXARAYX] = CLRREC.XGPCD;
  CL0MW06.XDMCD[CLXARAYX] = CLRREC.XDMCD;
  CL0MW06.CLKPRCFF[CLXARAYX] = CLRREC.CLKPRCFF;
  if (CLRREC.CLICRDFL == "C")
    CL0MW06.CL0MWQT[CLXARAYX] = CLRREC.CLRCLMQ * -1;
  else
    CL0MW06.CL0MWQT[CLXARAYX] = CLRREC.CLRCLMQ;
  end
   /* IF CLXREC.CLXARAYX = 1;*/
   /* MOVE CLRREC.CLNNTPRC TO CL0MW01.CL0MWGPH;*/
   /* END ;*/
   /* IF CLRREC.CLNNTPRC NE CL0MW01.CL0MWGPH;*/
   /* MOVE 'V' TO CL0MW01.CL0MWVFL;*/
   /* END ;*/
  CL0MW06.CLNNTPRC[CLXARAYX] = CLRREC.CLNNTPRC;
  CL0MW06.CLKCLPRC[CLXARAYX] = CLRREC.CLNGRPRC;
  CL0MW05.CLICRDFL[CLXARAYX] = CLRREC.CLICRDFL;
  CL0MW06.SY5SZID[CLXARAYX] = CLRREC.SY5SZID;
  CL0MW06.CL0MWSIF[CLXARAYX] = "Y";
  CL0MW06.YCTADJF[CLXARAYX] = "Y";
  CL0MW06.CL0MWPR1[CLXARAYX] = "Y";
  ;
    /* -----------   end of stmt grp cl0ms90  ------------*/
  ;
end // end KL0MS90

// move clnrec info to array
Function KL0MS91()
    /* statement group cl0ms91 - move RTS item*/
      /* information to array.*/
  ;
   /* *************************************************************/
   /* 6-14-90 bcourt hold new field, clkprcff. No longer need to*/
      /* get price-from-flag from the associated ra item record.*/
   /* *************************************************************/
  ;
  CL0MW06.SY1STNBR[CLXARAYX] = CLNREC.SY1STNBR;
  CL0MW06.SY2CLRID[CLXARAYX] = CLNREC.SY2CLRID;
  CL0MW05.XGPCD[CLXARAYX] = CLNREC.XGPCD;
  CL0MW05.XUMCD[CLXARAYX] = CLNREC.XUMCD;
  CL0MW05.XQACD[CLXARAYX] = CLNREC.XQACD;
  CL0MW06.XDMCD[CLXARAYX] = CLNREC.XDMCD;
  CL0MW06.CL0MWQT[CLXARAYX] = CLNREC.CLNRTSQ * -1;
  CL0MW05.CLICRDFL[CLXARAYX] = "C";
  CL0MW06.CLNNTPRC[CLXARAYX] = CLNREC.CLNNTPRC;
  CL0MW06.CLKCLPRC[CLXARAYX] = CLNREC.CLNGRPRC;
  CL0MW06.SY5SZID[CLXARAYX] = CLNREC.SY5SZID;
  CL0MW06.CL0MWSIF[CLXARAYX] = "Y";
  CL0MW06.YCTRTSF[CLXARAYX] = "Y";
  CL0MW06.CL0MWPR2[CLXARAYX] = "Y";
   /* *******************/
  if (CLAREC.CLAWSENF == "N") /* not worksheet entered*/
    if (CLNREC.CLKPRCFF == " ") /* 6-14-90 use new clkprcff on clnrec*/
      CL0MW06.CLKPRCFF[CLXARAYX] = "P"; /* deflt if not found*/
    else
      CL0MW06.CLKPRCFF[CLXARAYX] = CLNREC.CLKPRCFF;
    end
     /* 6-14-90 following is obsolete since added clnrec.clkprcff:*/
     /* get all sizes and CLKCRFL for the product*/
     /* store the size=0 (auth at product level)*/
            /* or size=# (auth at size level)*/
    /* MOVE CL0MW05.CLACLMNB(CLXARAYX) TO CLKREC.CLACLMNB;*/
    /* MOVE CLAREC.IV0IVCID TO CLKREC.IV0IVCID; primary*/
    /* MOVE CL0MW06.SY1STNBR(CLXARAYX) TO CLKREC.SY1STNBR;*/
    /* MOVE CL0MW06.SY2CLRID(CLXARAYX) TO CLKREC.SY2CLRID;*/
    /* MOVE CL0MW05.XGPCD(CLXARAYX) TO CLKREC.XGPCD;*/
    /* MOVE CL0MW06.XDMCD(CLXARAYX) TO CLKREC.XDMCD;*/
    /* ;MOVE CL0MW06.SY5SZID(CLXARAYX) CLKREC.SY5SZID; 72089 obsole*/
    /* MOVE '*' TO CLKREC.CLKCRFL    ;072089 add*/
    /* PERFORM CL0M915               ; select set RA items*/
    /* WHILE SQLCA.SQLCODE EQ 0;*/
      /* IF CLKREC.SY5SZID EQ 0;*/
        /* MOVE CLKREC.CLKPRCFF TO CL0MW06.CLKPRCFF(CLXARAYX);*/
      /* ELSE ;*/
        /* IF CL0MW06.SY5SZID(CLXARAYX) EQ CLKREC.SY5SZID;*/
          /* MOVE CLKREC.CLKPRCFF TO CL0MW06.CLKPRCFF(CLXARAYX);*/
        /* END ;*/
      /* END ;*/
      /* CALL IO1280 'N1',SQLCA,CLKREC (NOMAPS,NONCSP;*/
    /* END ;*/
    /* CALL IO1280 'C1',SQLCA,CLKREC (NOMAPS,NONCSP; close set*/
     /* 6-14-90 above is obsolete since added clnrec.clkprcff.*/
  else
    CL0MW06.CLKPRCFF[CLXARAYX] = "E";
  end
  ;
    /* -----------   end of stmt grp cl0ms91  ------------*/
  ;
end // end KL0MS91

// move clprec info to array
Function KL0MS92()
   /* ********************************************************/
   /* comes from kl0m290 to move defective items(arayx)to*/
   /* cl0mw05 record and cl0mw06 record*/
  ;
   /* ********************************************************/
  ;
    /* ---------- start stmt grp cl0ms92 -----------------*/
  ;
    /* statement group cl0ms92 - move product summary*/
      /* defective claim information to array.*/
  ;
  ;
  CL0MW05.CLACLMNB[CLXARAYX] = CLPREC.CLACLMNB;
  CL0MW05.CLHSEQNB[CLXARAYX] = CLPREC.CLHSEQNB;
  CL0MW06.SY1STNBR[CLXARAYX] = CLPREC.SY1STNBR;
  CL0MW06.SY2CLRID[CLXARAYX] = CLPREC.SY2CLRID;
  CL0MW05.XGPCD[CLXARAYX] = CLPREC.XGPCD;
  CL0MW05.XUMCD[CLXARAYX] = CLPREC.XUMCD;
  CL0MW06.XDMCD[CLXARAYX] = CLPREC.XDMCD;
  CL0MW06.CL0MWSIF[CLXARAYX] = "N";
  ;
  CL0MW06.CL0MWQT[CLXARAYX] = CLPREC.CLPDEFQ * -1;
   /* MOVE CLPREC.CLpdefQ TO CL0MW05.CLpdefQ(CLXARAYX);*/
  ;
   /* *******************/
   /* IF CLXREC.CLXARAYX = 1;*/
   /* MOVE CLPREC.CLKCLPRC TO CL0MW01.CL0MWGPH;*/
   /* END ;*/
   /* IF CLPREC.CLKCLPRC NE CL0MW01.CL0MWGPH;*/
   /* MOVE 'V' TO CL0MW01.CL0MWVFL;*/
   /* END ;*/
   /* *******************/
  ;
  CL0MW05.CLICRDFL[CLXARAYX] = "C";
  CL0MW06.CLNNTPRC[CLXARAYX] = CLPREC.CLKCLPRC;
  if (CLAREC.CLAWSENF == "N")
    CL0MW06.CLKPRCFF[CLXARAYX] = CLPREC.CLKPRCFF;
  else
    CL0MW06.CLKPRCFF[CLXARAYX] = "P";
  end
  CL0MW06.YCTDEF[CLXARAYX] = "Y";
  CL0MW06.CL0MWPR3[CLXARAYX] = "Y";
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0ms92  ------------*/
  ;
end // end KL0MS92

// move detail to array
Function KL0MS94()
  ;
  ;
    /* ---------- start stmt grp cl0ms94 -----------------*/
  ;
    /* statement group cl0ms94 - move detail product summary*/
      /* information to array.*/
  ;
  ;
  SY4REC.SY4SZSCL = CL0MW06.SY4SZSCL[CLXARAYX];
  KL0M970();
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0MW20.SY4SZSCL = SY4REC.SY4SZSCL;
    CLXREC.CLXCURSZ = 1;
    while (CLXREC.CLXCURSZ <= 40)
      if (SY4REC.SY4IDDSC[CLXCURSZ] != " ")
        CL0MW20.SY4IDDSC[CLXCURSZ] = SY4REC.SY4IDDSC[CLXCURSZ];
      else
        CLXREC.CLXCURSZ = CLXREC.CLXCURSZ - 1;
        CLXREC.CLXLSTSZ = CLXREC.CLXCURSZ;
        CLXREC.CLXCURSZ = 40;
      end
      CLXREC.CLXCURSZ = CLXREC.CLXCURSZ + 1;
    end
    if (CLXREC.CLXCURSZ == 41)
      CLXREC.CLXCURSZ = CLXREC.CLXCURSZ - 1;
      CLXREC.CLXLSTSZ = CLXREC.CLXCURSZ;
    end
    ;
    CLXREC.CLXCURSZ = 0;
    CL0MW01.CL0MWIDX = 1;
    while (CLXREC.CLXCURSZ <= CLXREC.CLXLSTSZ)
      if (CL0MW06.SY4SZSCL[CLXARAYX] == CL0MW20.SY4SZSCL)
        if (CL0MW06.SY5SZID[CLXARAYX] == CLXREC.CLXCURSZ)
          if (CL0MW06.SY5SZID[CLXARAYX] != 0)
            CL0MW01.CL0MWIDX = CL0MW01.CL0MWIDX - 1;
          end
          CL0MW10.SY4IDDSC[CLXARAYX] = CL0MW20.SY4IDDSC[CL0MWIDX];
          CL0MW10.SY1STNBR[CLXARAYX] = CL0MW06.SY1STNBR[CLXARAYX];
          CL0MW10.SY4SZSCL[CLXARAYX] = CL0MW06.SY4SZSCL[CLXARAYX];
          CL0MW10.CL0MWQT[CLXARAYX] = CL0MW06.CL0MWQT[CLXARAYX];
          CL0MW10.CLNNTPRC[CLXARAYX] = CL0MW06.CLNNTPRC[CLXARAYX];
          CL0MW10.CLKCLPRC[CLXARAYX] = CL0MW06.CLKCLPRC[CLXARAYX];
          CL0MW10.CLKPRCFF[CLXARAYX] = CL0MW06.CLKPRCFF[CLXARAYX];
          CL0MW10.CL0MWISF[CLXARAYX] = CL0MW06.CL0MWISF[CLXARAYX];
          CL0MW10.CLICRDFL[CLXARAYX] = CL0MW05.CLICRDFL[CLXARAYX];
          CLXREC.CLXCURSZ = 40;
          ;
          CL0MW10.CLHMEMAM = CL0MW10.CL0MWQT[CLXARAYX] * CL0MW10.CLNNTPRC[CLXARAYX];
        end
      end
      CL0MW01.CL0MWIDX = CL0MW01.CL0MWIDX + 1;
      CLXREC.CLXCURSZ = CLXREC.CLXCURSZ + 1;
    end
  end
  ;
  ;
    /* -----------   end of stmt grp cl0ms94  ------------*/
  ;
end // end KL0MS94

//*** RECORD=CL0MW01 ****
// the "commarea" is is the communication area that will be
// used between csp applications.  this area will be used to
// transport system required information and application
// specific information between applications.  all online
// main transactions will be required to use the commarea as
// working storage.
// ***********************
Record CL0MW01 type basicRecord
  10 CL0MWITM CL0MWITM [200] ; 
    15 CL0MWOLN CL0MWOLN ; 
    15 CL0MWISF CL0MWISF ; 
    15 SY4SZSCL SY4SZSCL ; 
  10 CL0MWSF CL0MWSF ; 
  10 CL0MWUSR CL0MWUSR ; 
  10 CL0MWIX1 CL0MWIX1 ; 
  10 CL0MWIX2 CL0MWIX2 ; 
  10 CL0MWICT CL0MWICT ; 
  10 CL0MWCNT CL0MWCNT ; 
  10 ARCCCREF ARCCCREF ; 
  10 CL0MWTOT CL0MWTOT ; 
  10 CL0MWNUP CL0MWNUP ; 
  10 CL0MWTUP CL0MWTUP ; 
  10 CL0MWTUC CL0MWTUC ; 
  10 CL0MWPUP CL0MWPUP ; 
  10 CL0MWZUP CL0MWZUP ; 
  10 CL0MWTRQ CL0MWTRQ ; 
  10 CL0MWTQC CL0MWTQC ; 
  10 CL0MWPRQ CL0MWPRQ ; 
  10 CL0MWZRQ CL0MWZRQ ; 
  10 CL0MWQRQ CL0MWQRQ ; 
  10 CL0MWQT CL0MWQT ; 
  10 CLNNTPRC CLNNTPRC ; 
  10 CL0MWNPC CL0MWNPC ; 
  10 CL0MWINP CL0MWINP ; 
  10 CL0MWFNP CL0MWFNP ; 
  10 CL0MWCNP CL0MWCNP ; 
  10 CL0MWDNP CL0MWDNP ; 
  10 CL0MWTNP CL0MWTNP ; 
  10 CL0MWTNC CL0MWTNC ; 
  10 CL0MWPNP CL0MWPNP ; 
  10 CL0MWZNP CL0MWZNP ; 
  10 CL0MWQNP CL0MWQNP ; 
  10 CL0MWMAM CL0MWMAM ; 
  10 CL0MWMAC CL0MWMAC ; 
  10 CL0MWTAM CL0MWTAM ; 
  10 CL0MWSTH CL0MWSTH ; 
  10 CL0MWCLH CL0MWCLH ; 
  10 CL0MWSF1 CL0MWSF1 ; 
  10 CL0MWSTN CL0MWSTN ; 
  10 CL0MWSID CL0MWSID ; 
  10 CL0MWEDT CL0MWEDT ; 
  10 CL0MWARF CL0MWARF ; 
  10 CL0MWPFF CL0MWPFF ; 
  10 CL0MWPFC CL0MWPFC ; 
  10 CL0MWPFD CL0MWPFD ; 
  10 CL0MWPFK CL0MWPFK ; 
  10 CL0MWERF CL0MWERF ; 
  10 CL0MWCTF CL0MWCTF ; 
  10 CL0MWVFL CL0MWVFL ; 
  10 CL0MWMSF CL0MWMSF ; 
  10 CL0MWMTS CL0MWMTS ; 
  10 CL0MWFTS CL0MWFTS ; 
  10 CL0MWENT CL0MWENT ; 
  10 CL0MWGPH CL0MWGPH ; 
  10 CL0MWFL1 CL0MWFL1 ; 
  10 CL0MWFL2 CL0MWFL2 ; 
  10 CL0MWARX CL0MWARX ; 
  10 CL0MWRTF CL0MWRTF ; 
  10 CL0MWSAF CL0MWSAF ; 
  10 CL0MWEND CL0MWEND ; 
  10 CL0MWAYX CL0MWAYX ; 
  10 CL0MWAXY CL0MWAXY ; 
  10 CL0MWNEW CL0MWNEW ; 
  10 CL0MWNUM CL0MWNUM ; 
  10 CL0MWSET CL0MWSET ; 
  10 CL0MWPRV CL0MWPRV ; 
  10 CL0MWSEF CL0MWSEF ; 
  10 CL0MWDCQ CL0MWDCQ ; 
  10 CL0MWDDQ CL0MWDDQ ; 
  10 CL0MWNP1 CL0MWNP1 ; 
  10 CL0MWNP2 CL0MWNP2 ; 
  10 CL0MWINC CL0MWINC ; 
  10 CL0MWIND CL0MWIND ; 
  10 CLICRDFL CLICRDFL ; 
  10 CL0MWDF CL0MWDF ; 
  10 CL0MWCF CL0MWCF ; 
  10 CL0MMOPC CL0MMOPC ; 
  10 CL0MMOPD CL0MMOPD ; 
  10 CL0MWCRO CL0MWCRO ; 
  10 CL0MWDRO CL0MWDRO ; 
  10 CL0MWIDX CL0MWIDX ; 
  10 CL0MWLST CL0MWLST ; 
  10 CL0MWCTR CL0MWCTR ; 
  10 CL0MWRET CL0MWRET ; 
  10 CL0MWLID CL0MWLID ; 
  10 CL0MWFAP CL0MWFAP ; 
  10 CL0MWMXL CL0MWMXL ; 
  10 CL0MWMAX CL0MWMAX ; 
  10 CL0MWMXH CL0MWMXH ; 
  10 PRIMARY-IV-IVC-DT PRIMARY-IV-IVC-DT ; 
  10 PROD-ARRAY PROD-ARRAY ; 
end // end CL0MW01

//*** RECORD=CL0MW05 ****
// Hold product info for map CL0MM005, product summary.
// Allow max of 500 products. Table cl0mw06 is a continuation
// of the lines in this table, and share the same index. If
// this table is changed, then corresponding changes need to
// be made for cl0mw06.
// ***********************
Record CL0MW05 type basicRecord
  5 CL0MW5GP CL0MW5GP [500] ; 
    10 CLACLMNB CLACLMNB ; 
    10 CLHSEQNB CLHSEQNB ; 
    10 CL0MMMTP CL0MMMTP ; 
    10 CLICRDFL CLICRDFL ; 
    10 CLHMEMNB CLHMEMNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XGPABRV XGPABRV ; 
    10 XUMCD XUMCD ; 
    10 XUMDESC XUMDESC ; 
    10 XQACD XQACD ; 
    10 XQAABRV XQAABRV ; 
  5 CL0MW5GB CL0MW5GB [500] ; 
    10 KUCCONM KUCCONM ; 
    10 * char(15) ; 
end // end CL0MW05

//*** RECORD=CL0MW06 ****
// Hold product info for map CL0MM005, product summary.
// Allow max of 500 products. This record is a continuation
// of the lines in cl0mw05 and they both share the same index
// value at all times. If changes are made cl0mw05 then the
// same change must be made in this table, and the appropriate
// application logic updated.
// ***********************
Record CL0MW06 type basicRecord
  5 CL0MW6GC CL0MW6GC [500] ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRID SY2CLRID ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 SY5SZID SY5SZID ; 
    10 CL0MWQT CL0MWQT ; 
  5 CL0MW6GD CL0MW6GD [500] ; 
    10 CLHNETFL CLHNETFL ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CLNNTPRC CLNNTPRC ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 CLHMEMAM CLHMEMAM ; 
    10 CLHMEMDT CLHMEMDT ; 
    10 ARCCCREF ARCCCREF ; 
    10 XDMCD XDMCD ; 
    10 YCTADJF YCTADJF ; 
    10 YCTRTSF YCTRTSF ; 
    10 YCTDEF YCTDEF ; 
    10 CL0MWISF CL0MWISF ; 
    10 CL0MMADF CL0MMADF ; 
    10 CL0MWPR1 CL0MWPR1 ; 
    10 CL0MWPR2 CL0MWPR2 ; 
    10 CL0MWPR3 CL0MWPR3 ; 
    10 CL0MWPRF CL0MWPRF ; 
    10 CL0MWSIF CL0MWSIF ; 
end // end CL0MW06

//*** RECORD=CL0MW10 ****
// the "commarea" is is the communication area that will be
// used between csp applications.  this area will be used to
// transport system required information and application
// specific information between applications.  all online
// main transactions will be required to use the commarea as
// working storage.
// ***********************
Record CL0MW10 type basicRecord
  5 CL0MW10G CL0MW10G [500] ; 
    10 CL0MWQT CL0MWQT ; 
    10 SY1STNBR SY1STNBR ; 
    10 CL0MWISF CL0MWISF ; 
    10 CLNNTPRC CLNNTPRC ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CLHMEMAM CLHMEMAM ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 KUIPRDID KUIPRDID ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 SY4IDDSC SY4IDDSC ; 
    10 CL0MWASV CL0MWASV ; 
    10 CLICRDFL CLICRDFL ; 
end // end CL0MW10

//*** RECORD=CL0MW20 ****
// *******************  size scale table  *********************
// 
// db2 table:           dprod.vscale01
// 
// copylib member:      dcl00012
// 
// key to db2 table:    sy4szscl
// 
// date created:        jan. 31,1986
// 
// maintenance:
// 
// date      init       comment
// --------  -------    ---------------------------------------
// 1-31-86   jjr        created csp record
// 5-07-86   sr         added 05 sy4data group item
// ************************************************************
// ***********************
Record CL0MW20 type basicRecord
  5 SY4DATA SY4DATA ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 SY4ZDESC SY4ZDESC ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0MW20

// adj flg on rts clm
DataItem CL0MMADF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim type desc
DataItem CL0MMMTP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0MMOPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0MMOPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0mw10 group item
DataItem CL0MW10G char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0mw05 segment-b group item
DataItem CL0MW5GB char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0mw05 group item
DataItem CL0MW5GP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0mw06 segment-c group item
DataItem CL0MW6GC char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0mw06 segment-d group item
DataItem CL0MW6GD char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// clxaryx flag
DataItem CL0MWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array index
DataItem CL0MWARX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array scroll value
DataItem CL0MWASV num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem CL0MWAXY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array index
DataItem CL0MWAYX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cr-fl
DataItem CL0MWCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color hold area
DataItem CL0MWCLH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// final net price credit
DataItem CL0MWCNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record count
DataItem CL0MWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit flag
DataItem CL0MWCRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim type flag
DataItem CL0MWCTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of product detail
DataItem CL0MWCTR num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defective credit qty
DataItem CL0MWDCQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defective debit qty
DataItem CL0MWDDQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dbt-fl
DataItem CL0MWDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// final net price debit
DataItem CL0MWDNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// debit flag
DataItem CL0MWDRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag
DataItem CL0MWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all claims viewed
DataItem CL0MWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entered flag
DataItem CL0MWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem CL0MWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save commarea from applic id
DataItem CL0MWFAP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field 1 for scrolling
DataItem CL0MWFL1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field 2 for scrolling
DataItem CL0MWFL2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// final net price by product
DataItem CL0MWFNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem CL0MWFTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gross price hold area
DataItem CL0MWGPH decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice counter
DataItem CL0MWICT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for sizes
DataItem CL0MWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// intermediate net price credit
DataItem CL0MWINC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// intermediate net pricedebit
DataItem CL0MWIND decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// intermediate net price
DataItem CL0MWINP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item select flag
DataItem CL0MWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item array
DataItem CL0MWITM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1
DataItem CL0MWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem CL0MWIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save clm array map start index
DataItem CL0MWLID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last filled array row plus 1
DataItem CL0MWLST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo total price credit
DataItem CL0MWMAC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo total price
DataItem CL0MWMAM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index for cl0mw05
DataItem CL0MWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple screen flag 010
DataItem CL0MWMSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple screen flag 005
DataItem CL0MWMTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max index for cl0mw05 plus 1
DataItem CL0MWMXH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index for cl0mw05 less 1
DataItem CL0MWMXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new memo number entered
DataItem CL0MWNEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-net-unit-prc credit
DataItem CL0MWNP1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-net-unit-prc debit
DataItem CL0MWNP2 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-net-unit-prc
DataItem CL0MWNPC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert binary to numeric
DataItem CL0MWNUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total amount
DataItem CL0MWNUP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output line number
DataItem CL0MWOLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pf flag credit
DataItem CL0MWPFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf flag debit
DataItem CL0MWPFD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf flag
DataItem CL0MWPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total flag
DataItem CL0MWPFK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved net price
DataItem CL0MWPNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product rec set adj fl
DataItem CL0MWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product rec set rts fl
DataItem CL0MWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product rec set def fl
DataItem CL0MWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first rec on map flag
DataItem CL0MWPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved memo qty
DataItem CL0MWPRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous pf index
DataItem CL0MWPRV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved memo total
DataItem CL0MWPUP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved net price cl0mm010
DataItem CL0MWQNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved memo qty cl0mm010
DataItem CL0MWQRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-qty
DataItem CL0MWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return from 010 flag
DataItem CL0MWRET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return from map cl0mm010 flag
DataItem CL0MWRTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select all flag
DataItem CL0MWSAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem CL0MWSEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// totals added flag
DataItem CL0MWSET char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem CL0MWSF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0MWSF1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id
DataItem CL0MWSID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size indicator flag
DataItem CL0MWSIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number hold area
DataItem CL0MWSTH char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0MWSTN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// final product total price
DataItem CL0MWTAM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo net price credit
DataItem CL0MWTNC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo net price
DataItem CL0MWTNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total flag
DataItem CL0MWTOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// memo qty credit
DataItem CL0MWTQC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo qty debit
DataItem CL0MWTRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo total credit
DataItem CL0MWTUC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// memo total
DataItem CL0MWTUP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea user id
DataItem CL0MWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// varied price flag
DataItem CL0MWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved return net price
DataItem CL0MWZNP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved return memo qty
DataItem CL0MWZRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved return memo total
DataItem CL0MWZUP decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PRIMARY-IV-IVC-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PROD-ARRAY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

