package kl0y;

import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom3.XPCL002;
import corpcom3.XPCL008;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XBCABRV;
import corpx1.XBCCD;
import corpx1.XBCTBL;
import corpx1.XBK-BK-SESN-CD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XGPABRV;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XOTTBL;
import corpx1.XQATBL;
import corpx1.XUMTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XPCCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpy2.YATTBL;
import corpy2.YCICD;
import corpy2.YCIDESC;
import corpy2.YCITBL;
import corpy2.YCSTBL;
import corpy2.YCTABRV;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YDDCD;
import corpy2.YDFCD;
import corpy2.YDFTBL;
import corpy2.YDRCD;
import corpy2.YDRTBL;
import corpy2.YDSTBL;
import corpy2.YRMDFRGT;
import corpy2.YRMTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import fq.common.FQ0XSECD;
import fq.common.FQ0XSEYR;
import fq.common.FQWPCPOID;
import fq.common.FQWPOIDN3;
import fq.common.FQWPOIDN6;
import fq.common.FQWPOIDN9;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV5REC;
import iv.common.IVEREC;
import kl.common.KL14TBL;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import mn.common.MN1REC;
import mn.common.MN2REC;
import op.common.OP-BK-MO;
import op.common.OP-BK-YR;
import pc.common.PC-BAR-CD-SEQ-NBR;
import pc.common.PC-PO-ID-MO-RNG;
import pc.common.PC-PO-ID-SESN-CD;
import pc.common.PC3POIDT;
import pc.common.PC6REC;
import pc.common.PCFREC;
import pc.common.PCFSECD;
import pc.common.PCYREC;
import sp.common.SP5REC;
import sp.common.SP5SZPR;
import sy.common.SY-SZ-ID;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY2CEDT1;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY5REC;
import sy.common.SY6REC;
import sy.common.SYCREC;
import sy.common.SYPREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
import vv.common.VBARCD01;
import vv.common.VDEFGR01;
import vv.common.VDFTRL01;
import vv.common.VDMACT01;
import vv.common.VINSPH02;
import vv.common.VUSRGR01;
import xa.common.XA0AW02;
//*** PROGRAM=KL0Y ****
// ************************************************************
// 
//               KL0Y - Defective Inspection
//               ---------------------------
// 
// This program will allow the special services users to enter
// their defective items during the inspection process.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 12-07-88 mhalst #CL401  Change program to use the IV5REC
//                 when neccessary to retrieve the return to
//                 address to show on map M010.
// 12-21-88 mhalst #CL443 Correct to check inspection end date
//                 CL2ISXDT when deciding if inspection can be
//                 re-opened. Also correct scrolling prblems
//                 when multiple inspections selected.
// 12-30-88 mhalst CL423 Correct Cartons received on M001 to be
//                 total of all return records. Also allow
//                 entry for claim status ERA.
// 01-19-89 mhalst CL491 Do not allow inspection complete if no
//                 quantities for inspection.
//                 CL501 Do not change claim status/activity
//                 code if authorized-by ID is zero.
//                 Tweak array handling.
// 02-28-89 jwood  added noncsp option to calls
// 02-28-89 jwood  added xssegtr logic
// 05-19-89 bcourt DB2 structure changes: CLAREC, KUCREC,KUMREC
//                 SY2REC, XCTTBL, XGPTBL, XWHTBL.
//          CL301V When Fcty PO bad, bright it & style & fctory
// 06-20-89 bcourt when RAA/RIP inspection is completed and not
//                 authorized, change claim status to 'RPA' for
//                  batch processing.
//                  Make CL-FCTY-PO-VALD-FL valid for style/po/
//                  factory combo edit.
//                  If footwear factory is numeric, convert to
//                  alpha and show warning msg 595(hard-coded)
// 08-01-89 gdecke  DB2 structure changes: CLAREC,clpREC,cl2REC
// 09-05-89 JWOOD   CL0Y125 CHANGED FOR NEW MN2REC KEY...
// 09-14-89 gdecke  io1330 changed to use xum, xqa.
// 01-19-90 gdecke  DB2 structure changes for january.
// 02-22-90 chellm  Replaced DWPROD.VFCTY001 with
//                  DVCTY.VFCTY001.  Replaced IO0870 with
//                  IO2810 and renamed PD1... items as FY1...
// 02-12-90 SGORGA  In process CL0Y001 -
//                  Modified pgm to go to the detail screen
//                  (CL0YM005) if the claim doesn't have items
//                  that have been returned or authorized for
//                  return (3 new stmt grps - CL0YSRA, RI, DI -
//                  are used to check. See more comments in
//                  CL0Y001.)
// 03-06-90 SGORGA  In process CL0Y130 -
//                  When in CL0YM001 'Def Insp Prod Sum' screen
//                  added code to store info that PF18 key was
//                  pressed.  CL0G will use that info to flow
//                  back to CL0Y appl. - see CL0G comments.
// 04-03-90 SGORGA  DB2 structure changes.  Regen only.
// 05-31-90 CHELLM  Added edits to prevent Claim Brand -
//                  Product Brand mis-match.  Added Claim Brand
//                  and abbrv to maps 001 and 005.
// 05-31-90 CHELLM  Changed the Fcty Code PO Nbr edit from a
//                  warning to a hard edit.(Goal Phase IV)
//                  FctY Code is now a required field and only
//                  valid Sty-FctyCd-PO Nbr combo are excepted.
// 06-05-90 chellm  Added XOTTBL for product brand-claim div
//                  edit when clarec.xbc = blank.
// 06-14-90 chellm  db2 structure changes.  replaced pd2rec
//                  (dwprod.vpdfpo01) with pc6rec (dprodc.
//                  vpoitm01) form factory po verification.
// 08-01-90 gdecke  change number of product occurances in
// #cl875          table cl0yw02 to 1000. change cl0yw03 to 500
// 11-09-90 bcourt  db2 structure changes, no code change.
// 12-28-90 gdecke  #cl972 - handle closeout pricing override
//                  for defectives with no invoice.
// 01-09-91 GDECKE  #CL920,CL974. COLOR/DIMENSION CHANGES.
// 02-12-91 GDECKE  #CL0. FEB. DB2 TABLE CHANGES.
// 02-18-91 GDECKE  INITIALIZE CL2TOSLF IN CL0YS49
// 03-26-91 gdecke  #cl972 - ADJUST closeout pricing override.
// 04-22-91 gdecke  #cl972 - ADJUST closeout pricing override.
// 05-03-91 sgorga  CL977,978,979.  Made changes to the PO/Fcty
//          combo edit.  Repeat edit if any of the 4 fields are
//          changed.  Also, if combo edit fails, retry the edit
//          using parent fcty cd.  If successful, no need to
//          send err msg 364.  Chgd:  If no row found to match
//          fcty cd and trailer stat cd in dclaim.vtralr01,
//          don't transfer to CL0A; instead, send err msg 690.
//          Deleted stmt grp CL0YS51.  Deleted CL0YW01.CL0YWHPO
//          field. Deleted bogus code & corrected minor errors.
//          Changes made to: CL0YS53,S54,S55,S68,S69,S70,S71,
//          S72,S78,200,201,220,W01.
// 05-28-91 gdecke  cl0ys01 - allow whse 51,32,04 to be mixed.
// 06-14-91 sgorga  DB2 changes.  Replaced KUNREC with KUJREC.
//                  Chgd processes cl0ys87, s86.
// 08-08-91 wjohns  Renamed application and commarea
//                    referrences to renamed claims appls.
// 09-05-91 gdecke  added 'cost' pricing for employee store and
//                  other customers that need it.
// 10-01-91 ahowar  changed proc and sgrp from "cl" to "kl".
// 10-23-91 twatso  changed the edit in 220 to always edit the
//                  style/color (getting bad style/color combo
//                  with the hardcoded 00 color and 00 dim).
// 11-05-91 twatso  added code for osd to be installed in Dec91
// 12-17-91 twatso  changed code in s87 for osd - wasn;t doing
//                  the code - was exiting all the time
// 01-13-92 sgorga  set ta1rec, ta2rec, xa0aw02 empty - kl0y001
// 02-28-92 GDECKE  USE COLOR/XDM WILDCARD TO GET PRICE WHEN
//                  NOT FOUND USING COLOR/XDM (KL0YS0A)
// 03-29-92 GDECKE  BYPASS FREIGHT CREDIT FOR CLAIMS WITH RPS
//                  LABELS.
// 04-13-92 twatso  db2 change name of clacmind to cl-clcom-fl
// 05-04-92 twatso  added another read of iverec so it is read
//                  before we need the data in s34. pricing
//                  problems. added set iverec empty in 001.
// 08-10-92 gdecke  give freight credit on prepaid return only
//                  returned on carrier other than rps.
// 09-02-92 twatso  change some coding to correspond to the
//                  change in specs for the reasonableness
//                  project.  a copy of most of the stmt grps
//                  was put in clmsl to save for later info.
// 12-02-92 lgross  Direct market changes.  Write a tag record
//                  to dclaim.vdmact01 whenever inspection
//                  marked complete on a 'cdr' record.
//                  Changed:  KLPY-GET-ACCT-CLS, KL0YS-WRIT-DM,
//                  KL0YS-WRIT-DM-REC, KL0YS28, KL0Y001
// 01-26-93 bcourt  change 1 proc to sgrp.
// 02-08-93 bcourt  Write tag when change to consumer account.
// 03-10-93 bcourt  Change when csw activity log written in
//                  KL0YS-WRIT-DM.
// 05-04-93 gdecke  Central returns changes. Add logic for menu
//                  option 19. Variable map and detail headings
//                  No duty code, po number, factory defective
//                  code required if product going to central
//                  returns area in wilsonville.
// 06-03-93 BCOURT  Since side1 products converted to NIKE brnd
//                  allow brand '01' products on brand '05' clm
// 06-15-93 GDECKE  ALLOW ENTRY OF FACTORY AND PO FOR APPAREL
//                  DEFECTIVE INSPECTIONS.
// 08-13-93 jcarey  Database structure change. Changed cllpdcfl
//                  to cl-ppd-coll-ind.
// 09-28-93 GDECKE  HANDLE CHARACTER SEASON CODE IN PO INPUT
//                  FIELD.
// 10-12-93 GDECKE  PREVENT CREDIT DENIAL CODE (YDRCD) FROM
//                  BEING SET TO BLANK WHILE NONCREDIT QTY IS
//                  GREATER THAN ZERO (KL0YS22, KL0YS89)
// 10-21-93 GDECKE  Remove reference to clwrec select list.
//                 Fix bad reference to status cd2:alias=ycscd.
// 10-26-93 GDECKE  Reinstate modified use of clwrec sel list.
// 11-12-93 GDECKE  NOV. 93' DB2 TABLE CHANGES. KL0YS29
// 02-28-94 JCAREY  Changed the temporary fix that used xbk-bk-
//                  sesn-cd for the apparel season code. Now
//                  using pc-po-id-sesn-cd. Also added code to
//                  move booking info in clprec. Para kl0ys06,
//                  s17,s20,s21,s22,s37,s90 & cl0yw02.
// 03-11-94 BCourt  Rename sy6cstfl to xqacd & default values
//             for country & currency in KL0YS0D.
//             Rename CLFREC.xxxaddrn to xxx-addrn but KEEP map
//             names for 30 chars. Orders & Invc also 30 chars.
// 05-20-94 sgorga  Added SYPREC record. Removed YDDTBL record.
// 
// 05-07-97 HMACAL  Added logic to validate defect code against
//                  User/Group D/C Assignment; Put default
//                  defect code and quantity;
// 01-27-98 HBASKA  In KL0Y220,commented out the condition that
//                  checks for warehouse code ='07' and in
//                  KL0YS-EDT-INSP-HOLD, included a move state-
//                  ment to move warehouse code to key value.
//                  The above 2 changes are due to the
//                  the change in io6670.
// 03-04-98 dbettr  Y2KFIX
//                  CHANGES FOR YEAR 2000 MADE TO PROCESSES
//                  KL0Y001, KL0YS12, KL0Y120, KL0YS47 AND
//                  KL0YS-EDT-INSP-HLD.
// 12-23-98 CHELLM  Added new abend info in kl0ys25.
// 04-19-99 GDECKE  CHANGED DEF CODE DEFAULT FROM 999 TO SPACE
// 05-09-00 ltanik  changes made to kl0y120 to validate qual
//                  cod and uom cod
// 06-09-00 bparan  changes made to kl0y101 not to move totals
//                  when no rows in defective item table
// 06-16-00 rgomat  changes made to po-id field              s
// 07-25-01 dsinha  Bypass price look up on product file
//                  and default all returns to zero price.
// 11-28-01 SVIJAY  Added DIT03REC(Record) for the IO VDEFIT03
//                  as cl-dty-dwbk-fl was not included in the
//                  CLPREC which caused wrong values to be
//                  added/updated in the Dclaim.vdefit03 table.
// *********************
Program KL0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0YW01 CL0YW01; // record
  CL0YW02 CL0YW02; // record
  CL0YW03 CL0YW03; // record
  CL0YW04 CL0YW04; // record
  CL0YW05 CL0YW05; // record
  CL2REC CL2REC; // record
  CLAREC CLAREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLMREC CLMREC; // record
  CLNREC CLNREC; // record
  CLOREC CLOREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  DIT03REC DIT03REC; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  IV5REC IV5REC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC; // record
  PC6REC PC6REC; // record
  PCFREC PCFREC; // record
  PCYREC PCYREC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VBARCD01 VBARCD01; // record
  VDEFGR01 VDEFGR01; // record
  VDFTRL01 VDFTRL01; // record
  VDMACT01 VDMACT01; // record
  VINSPH02 VINSPH02; // record
  VUSRGR01 VUSRGR01; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCITBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YDFTBL {deleteAfterUse = yes}; // table
  use YDRTBL {deleteAfterUse = yes}; // table
  use YDSTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KL15TBL {deleteAfterUse = yes}; // table
  use KL14TBL; // table
  use KL0YM.KL0YM001,  // forms
      KL0YM.KL0YM005, 
      KL0YM.KL0YM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0Y000: KL0Y000();
    exit program;
    KL0Y001: KL0Y001();
    KL0Y050: KL0Y050();
    KL0Y100: KL0Y100();
    KL0Y101: KL0Y101();
    KL0Y110: KL0Y110();
    KL0Y120: KL0Y120();
    KL0Y130: KL0Y130();
    KL0Y200: KL0Y200();
    KL0Y201: KL0Y201();
    KL0Y210: KL0Y210();
    KL0Y220: KL0Y220();
    KL0Y230: KL0Y230();
    KL0Y300: KL0Y300();
    KL0Y301: KL0Y301();
    KL0Y310: KL0Y310();
    KL0Y320: KL0Y320();
    KL0Y330: KL0Y330();
  end // end main
end // end KL0Y

// main flow
Function KL0Y000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Y000";
  COMMAREA.CACURRAP = "KL0Y";

  KL0Y001(); /* initilize the application*/

  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0Y050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0Y000

// init claims menu processing
Function KL0Y001()
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-14-90  sgorga                                       **/
   /* *  Added code to check 3 table for authorized returns or  **/
   /* *  returned items (whether returned 'RTS' or defective).  **/
   /* *  Created a new working storage field in CL0YW01 called  **/
   /* *  CL0yWARF (claims-auth-or-returned-items flag).         **/
   /* *  This field contains a 'y' if these have been items on  **/
   /* *  the claim that were returned or authorized for return. **/
   /* *  06-14-90 chellm Replaced pd2rec with pc6rec.           **/
   /* *  09-16-91 GDECKE GET EFFECTIVE DATE FOR COST LOOKUP.    **/
   /* *  01-13-92 sgorga  Set ta1rec, ta2rec, & xa0aw02 empty.  **/
   /* *  12-02-92 lgross  added call to ta0040 to get and store **/
   /* *           date and times.                               **/
   /* *  05-10-93 GDECKE  SWITCH FROM CLAIMS TO FOOTWEAR QUALITY**/
   /* *           VERSION OF TRAILER TABLE.                     **/
   /* *  06-03-94 sgorga  Set syprec empty. Init. sz-warning-fl.**/
   /* *  11-28-01 svijay  Introduced DIT03REC rec.              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0Y001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/

  set CL0YW01 empty; /* clear working storage rec1*/
  set CL0YW02 empty; /* clear working storage rec2*/
  set CL0YW03 empty; /* clear working storage rec3*/
  set SQLCA empty;
  set CLFREC empty;
  set CLGREC empty;
  set CLJREC empty;
  set CLKREC empty;
  set CLLREC empty;
  set CL2REC empty;
  set CLMREC empty;
  set CLNREC empty;
  set CLOREC empty;
   /* TCS Change begins - 11/28/2001*/
  /* SET CLPREC EMPTY;*/
  set DIT03REC empty;
   /* TCS Change ends   - 11/28/2001*/
  set VDFTRL01 empty;
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set IVEREC empty;
  set FY1REC empty;
  set PC6REC empty;
  set SYPREC empty;
  set SY1REC empty;
  set SY2REC empty;
  set SY5REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set XA0AW02 empty;

  CL0YW01.KL0YW-SZ-WARNING-FL = "N"; /* message has not displayed*/
  CL0YW01.KL0YW-INPUT-MODE = "K"; /* Set to Keyboard mode*/

   /* TEMP001;*/

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry check*/
  XPCL008(); /* reset clwactiv flag*/


  set CLXREC empty; /* clear common working storage*/

  CL0YW01.CLACLMNB = CLAREC.CLACLMNB; /* save key claim info*/

  KL0YS50(); /* determine insp nbr*/

  if (CLWREC.CLHSEQNB == 0)
    CL0YW01.CLHSEQNB = CLAREC.CLACSQNB;
  else
    CL0YW01.CLHSEQNB = CLWREC.CLHSEQNB;
  end

  CLXREC.CLXSNAME[1] = "KL0YM001"; /* init screens used in this appl*/
  CLXREC.CLXSNAME[2] = "KL0YM005";
  CLXREC.CLXSNAME[3] = "KL0YM010";

       /* *****************************/
       /* decide which screen to go to*/
       /* *****************************/

    /* * set claims-authorized-or-returned-items-flag to 'no'*/
  CL0YW01.CL0YWARF = "N";

    /* * SET INSPECTOR HOLD MESSAGE FLAG TO 'N' - NOT-SHOWN.*/
  CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "N";

   /* initialize the working storage for the comparison of auth vs returned*/
  CL0YW01.KL0YW-TINSP = 0;
  CL0YW01.KL0YW-TINSPH = 0;
  CL0YW01.KL0YW-PINSP = 0;

    /* * Below code checks three tables to determine if any*/
    /* * items on the claim have been returned or authorized for*/
    /* * return.  If not (If CL0YWARF flag = 'N'), go to detail*/
    /* * screen (kL0YM005).*/

  KL0YSRA(); /* ck return authoriz. items tbl*/

  if (CL0YW01.CL0YWARF == "N") /* no auth. items on claim*/
    KL0YSRI(); /* ck claims rts item detail tbl*/
  end

  if (CL0YW01.CL0YWARF == "N") /* no rts items returned*/
    KL0YSDI();
                                   /* ck claims def items detail tbl*/
  end

  if (CL0YW01.CL0YWARF == "N") /* no def or rts items rtnd & no rtn*/
                                   /* auth items*/
    CLXREC.CLXCSCRN = "KL0YM005"; /* display detail screen*/
  else
    if (CLWREC.CLWYZSWT == "Z") /* came from cl0z application*/
      CLXREC.CLXCSCRN = "KL0YM005"; /* display detail screen*/
    else
      CLXREC.CLXCSCRN = "KL0YM001"; /* display summary screen*/
    end
  end

   /* get current date for cost lookup*/
  XX0XS01();
  CL0YW01.CL0YWPED = XX0XW01.XX0XWDAT;

  KL0YS01(); /* check security*/
  CL0YW01.CL0YWWRN = "N"; /* init warning flag*/
  CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/

     /* *******************/
     /* set map id's, date*/
     /* *******************/

  KL0YM001.XXXERRID = "KL0Y100"; /* map process name*/
  KL0YM005.XXXERRID = "KL0Y200";
  KL0YM010.XXXERRID = "KL0Y300";

  CL0YW01.CL0YWMX2 = 1000; /* max lines in cl0yw02*/
  CL0YW01.CL0YWMX3 = 500; /* max lines in cl0yw03*/

  KL0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  KL0YM005.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0YM010.XXXCURDT = VGVar.currentShortGregorianDate;

   /* ====== Y2K OUT BEGIN ======*/

   /* MOVE EZEDTE TO CL0YW01.CL0YWTDT; /* save for compare*/
   /* CL0YW01.CL0YWTDT = CL0YW01.CL0YWTDT + 19000000;*/

   /* ====== Y2K OUT END ========*/


   /* ====== Y2K IN BEGIN ======*/

  CL0YW01.CL0YWTDT = VGVar.currentGregorianDate;

   /* ====== Y2K IN END ========*/

   /* get dates for later updates to database*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN KL0Y001";
    XPCL010(); /* abend*/
  end

end // end KL0Y001

// get invoice specialty tbl line
Function KL0Y016()
   /* *************************************************************/
   /* *                                                          **/
   /* *          GET INVOICE SPECIALTY TABLE LINE                **/
   /* *                                                          **/
   /* *  1) find company account type code, PRICE/COST INDICATOR **/
   /* *     for product pricing.                                 **/
   /* *                                                          **/
   /* *----------------------------------------------------------**/
   /* *   M A I N T E N A N C E    H I S T O R Y     L O G       **/
   /* *----------------------------------------------------------**/
   /* *   09/18/91   GDECKE    ADD LOGIC TO GET COST TABLE PRICES**/
   /* *   04/17/92   BCOURT    Initialize IVEREC (DINVC.VSPECL01)**/
   /* *************************************************************/

  CL0YW01.XATCD = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    CL0YW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end

     /* ********************************************************/
     /* read invoice speciality table to get:*/
       /* price/cost indicator - use product price or cost?*/
       /* price/cost type - either xpycd or xcocd*/
       /* price/cost pct - signed percent field to add to 100%*/
                        /* to make a multiplier for the std*/
                        /* price/cost value.*/
     /* table record may have blanks in order type or acct class,*/
     /* so the order of reading is:*/
     /* 1. read for acct type, acct class & order type*/
        /* if not found,*/
     /* 2. read for acct type, acct class & blank o/t*/
        /* if not found,*/
     /* 3. read for acct type, blank acct class & blank o/t*/
        /* if not found,*/
          /* zero price/cost indicator, so clngrprc is 0.*/
     /* ********************************************************/

     /* data from the company*/

  set IVEREC empty; /* 4-17-92*/
  IVEREC.XATCD = CL0YW01.XATCD; /* account type*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* account class*/
  IVEREC.XOTCD = CLAREC.XOTCD; /* order type*/

  call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence, matched all 3 codes*/
  else
    IVEREC.XOTCD = " ";
    call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence, matched 2 codes*/
    else
      IVEREC.XAUCD = " ";
      call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence, matched 1 code*/
      else
        IVEREC.IVEPCIND = " "; /* no match at all*/
        IVEREC.IVEPCTYP = " ";
        IVEREC.IVEPCPCT = 0;
      end
    end
  end


end // end KL0Y016

// decide which map to display
Function KL0Y050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Y050"; /* set current process name*/


  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;

  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/

  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/

  if (CL0YW01.CL0YWINT == "N")
                                   /* do not clear on initial entry to cl0y*/
    converseLib.validationFailed(0); /* clear error nbr*/
  else
    CL0YW01.CL0YWINT = "N";
  end


  if (CLXREC.CLXSCRNX == 1) /* if screen cl0om001*/
    /* MOVE 0 TO CL0YW01.CL0YWDX2    ; set start of array to dspy*/
    /* SET CL0YW02 EMPTY;*/
    set CL0YW03 empty;
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0Y100(); /* inquiry selects*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0om005*/
      while (CLXREC.CLXEOSF == "N") /* show until user is done*/
        KL0Y200(); /* customer sub-selects*/
      end
    else
      if (CLXREC.CLXSCRNX == 3) /* if screen cl0om010*/
        while (CLXREC.CLXEOSF == "N") /* show until user is done*/
          KL0Y300(); /* slsmn/whse sub-selects*/
        end
      else
        TA1REC.TA1MAP = CLXREC.CLXCSCRN;
        TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
        TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
        XPCL010(); /* abend*/
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050...*/
       /* else*/
         /* the perform will auto return to cl0%000.*/

end // end KL0Y050

// map inquiry selection, summary
Function KL0Y100()
   /* ************************************************************/
   /* *    process screen cl0ym001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Y100";

  if (CLXREC.CLXBLDSC == "Y")
    KL0Y101();
    CLXREC.CLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse KL0YM001 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";

  KL0Y110(); /* validate pfkeys*/

  if (CL0YW01.CL0YWDCT > 0)
    CL0YW01.CL0YWDCT = 0;
    return;
  end

  if (CLXREC.CLXERRF == "N"
   && KL0YM001 is modified)
    KL0Y120(); /* edit entries and update*/
  end

  if (CLXREC.CLXERRF == "N")
    KL0Y130(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0Y100

// build screen
Function KL0Y101()
   /* **************************************/
   /* build screen*/
   /* **************************************/

    /* Maintenance History:*/
    /* 05-31-90 CHELLM Added XBCCD and XBCABRV to the map.*/
    /* 09-16-91 GDECKE   ADD PERFORM CL0Z016 - GET IVC SPCL TABLE*/
    /* FOR GETTING COST TABLE PRICES.*/


   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0Y101";

  set KL0YM001 initial;
  KL0YM001.XXXCURDT = VGVar.currentShortGregorianDate;
   /* SET CL0YW02 EMPTY;*/
  if (CL0YW01.CL0YWUDF == "N")
    KL0YS15();
  end

  if (CLAREC.CLACLMNB == 0) /* user must input claim*/
     /* next sentence*/
  else
    KL0YS12(); /* get header info and move to ws*/
    if (CL0YW01.CL0YWDCT > 0) /* deadlock count 062089*/
      return;
    end
    if (CL0YW01.CL0YWPID == "Y") /* if protect insp-by-id and date*/
      set KL0YM001.CL0YWUSR skip;
      set KL0YM001.CL0YMIDT skip;
    end
  end

   /* ** GET ACCOUNT TYPE CODE FROM XAUTBL AND SELECT INVOICE SPECIALTY*/
   /* ** TABLE LINE TO DETERMINE COST TYPE AND PRODUCT PRICES.*/
  KL0Y016();


  KL0YM001.CLACLMNB = CL0YW01.CL0YWCLM;
  KL0YM001.KUCCOID = CL0YW01.KUCCOID;
  KL0YM001.KUMSTRID = CL0YW01.KUMSTRID;
  KL0YM001.XNXCD = CL0YW01.XNXCD;
  KL0YM001.KUCCONM = CL0YW01.KUCCONM;

  if (CL0YW01.CL0YWINS == -1)
    KL0YM001.CL0YMINB = "** ";
    KL0YM001.CL0YWUSR = " ";
    KL0YM001.CL0YMIDT = " ";
  else
    CL0YW01.CL0YWISN = CL0YW01.CL0YWINS;
    KL0YM001.CL0YMINB = CL0YW01.CL0YWISN;
    KL0YM001.CL0YWUSR = CL0YW01.CL0YWUSR;
    KL0YM001.CL0YMIDT = CL0YW01.CL0YWDTE;
  end

  KL0YM001.CLHSEQNB = CL0YW01.CL0YWSEQ;
  KL0YM001.CL0YWATQ = CL0YW01.CL0YWATQ;
  KL0YM001.CLODMAMT = CL0YW01.CLODMAMT;
  KL0YM001.XGPCD = CL0YW01.XGPCD;
  KL0YM001.YCTCD = CL0YW01.YCTCD;
  KL0YM001.XGPABRV = CL0YW01.XGPABRV;
  KL0YM001.YCTABRV = CL0YW01.YCTABRV;
  KL0YM001.CLOFGAQ = CL0YW01.CLOFGAQ;
  KL0YM001.CLOFGAAM = CL0YW01.CLOFGAAM;
  KL0YM001.XWHCD = CL0YW01.XWHCD;
  KL0YM001.XWHABRV = CL0YW01.XWHABRV;
  KL0YM001.CL0YMIST = CL0YW01.YCICD;
  KL0YM001.CL0YMISD = CL0YW01.YCIDESC;
  KL0YM001.CLJNCRFL = CL0YW01.CLJNCRFL;
  KL0YM001.XBCCD = CL0YW01.XBCCD; /* (05-31-90)*/
  KL0YM001.XBCABRV = CL0YW01.XBCABRV; /* (05-31-90)*/

  KL0YM001.CL0YMRAC = CL0YW01.CL0YWRAC;
  if (CL0YW01.CL0YWRAC == "Y")
    set KL0YM001.CL0YMRAC skip, bold;
  else
    set KL0YM001.CL0YMRAC initialAttributes;
  end

  if (CL0YW01.CL0YWRTF == "Y") /* we rebuilt array*/

    /* sort ws detail array*/

    CL0YW01.CL0YWEND = "N";
    while (CL0YW01.CL0YWEND == "N")
      KL0YS08();
    end
    CL0YW01.CL0YWRTF = "N";

     /* below will create total line*/
    CL0YWDX6 = 0;
    CL0YW01.CL0YWDX9 = CL0YW01.CL0YWDX1 + 1;

    if (CL0YW01.CL0YWDX1 > CL0YW01.CL0YWMX2) /* if exceeding max lines in*/
      CL0YW01.CL0YWDX1 = CL0YW01.CL0YWMX2; /* table, show message*/
      converseLib.validationFailed(251);
      CLXREC.CLXERRF = "Y";
      return;
    end

    while (CL0YWDX6 < CL0YWDX1)
      CL0YWDX6 = CL0YWDX6 + 1;
      CL0YW01.CL0YWHDQ = CL0YW02.CLPDEFQ[CL0YWDX6];
      CL0YW02.CLPDEFQ[CL0YWDX9] = CL0YW02.CLPDEFQ[CL0YWDX9] + CL0YWHDQ;
      CL0YW01.CL0YWHCQ = CL0YW02.CL0YW2CQ[CL0YWDX6];
      CL0YW02.CL0YW2CQ[CL0YWDX9] = CL0YW02.CL0YW2CQ[CL0YWDX9] + CL0YWHCQ;
      CL0YW01.CL0YWHNQ = CL0YW02.CLNNCRQ[CL0YWDX6];
      CL0YW02.CLNNCRQ[CL0YWDX9] = CL0YW02.CLNNCRQ[CL0YWDX9] + CL0YWHNQ;
      CL0YW01.CL0YWHRQ = CL0YW02.CLNRTSQ[CL0YWDX6];
      CL0YW02.CLNRTSQ[CL0YWDX9] = CL0YW02.CLNRTSQ[CL0YWDX9] + CL0YWHRQ;
    end
    CL0YW01.CL0YWDX1 = CL0YW01.CL0YWDX9;
    /* Tcs Change Begins - 06/09/2000.*/
    if (CL0YW02.CLPDEFQ[CL0YWDX9] > 0)
      CL0YW02.SY1STNBR[CL0YWDX1] = "TOTALS";
    end
    /* Tcs Change Ends - 06/09/2000.*/
  end

   /* if something in style, lookup in array*/

  if (CL0YW01.SY1STNBR != " ")
    if (CL0YW01.SY1STNBR == "TOP")
      CL0YW01.CL0YWDX2 = 1;
    else
      if (CL0YW01.SY1STNBR == "BOTTOM")
        CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX1;
        CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX2 - 8;
      else
        CL0YW01.CL0YWDX2 = 1; /* reset index*/
        while (CL0YW01.CL0YWDX2 < CL0YW01.CL0YWDX1
         && CL0YW01.SY1STNBR != " ")
          if (CL0YW02.SY1STNBR[CL0YWDX2] < CL0YW01.SY1STNBR)
            CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX2 + 1;
          else
            CL0YW01.SY1STNBR = " ";
          end
        end
      end
    end
    CL0YW01.SY1STNBR = " ";
    if (CL0YW01.CL0YWDX2 >= CL0YW01.CL0YWDX1) /* end of array*/
      CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX1;
      CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX2 - 9;
      if (CL0YW01.CL0YWDX2 < 1)
        CL0YW01.CL0YWDX2 = 1;
      end
    end
  end

   /* move nine records in array to screen*/

   /* if back from cl0z*/
  if (CLWREC.CLWYZSWT == "Y") /* set dx2 and clear passing info*/
    KL0YS44();
  end

  CL0YW01.CL0YWDX3 = 1;
  CLXREC.CLXARAYX = CL0YW01.CL0YWDX2;
  while (CL0YWDX3 < 10)
    KL0YS10();
  end
  CL0YW01.CL0YWDX3 = 9;

   /* fill insp clmpt and rls stk flags*/
  KL0YM001.CL0YMNFD = " "; /* clear 'complete' msg*/
  if (CL2REC.CL2ISXDT == 0  
   || CL2REC.YCICD == "IIP" /* temp until all clms run ok*/
   || CL2REC.YCICD == "RSO") /* temp until all clms run ok*/
    KL0YM001.CL0YMICF = "N";
  else
    KL0YM001.CL0YMICF = "Y";
    KL0YM001.CL0YMNFD = "INSPECTION COMPLETE";
    set KL0YM001.CL0YMICF skip;
  end
  if (CL0YW01.YCICD == "IIP") /* new insp reqstd, or insp not found*/
    KL0YM001.CL0YMICF = "N";
    KL0YM001.CL0YMNFD = " "; /* clear 'complete' msg*/
  end

   /* IF CL2REC.YCICD = 'IIP';*/
    /* MOVE 'N' TO CL0YM001.cl0ymicf;*/
    /* MOVE 'N' TO CL0YM001.CL0YMRST;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RSO';*/
    /* MOVE 'N' TO CL0YM001.cl0ymicf;*/
    /* MOVE 'Y' TO CL0YM001.CL0YMRST;*/
    /* SET CL0YM001.CL0YMRST AUTOSKIP;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RMO';*/
    /* MOVE 'Y' TO CL0YM001.cl0ymicf;*/
    /* MOVE 'INSPECTION COMPLETE' TO CL0YM001.CL0YMNFD*/
    /* SET CL0YM001.cl0ymicf AUTOSKIP;*/
    /* MOVE 'N' TO CL0YM001.CL0YMRST;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RMS';*/
    /* OR CL2REC.YCICD = 'CMP';*/
    /* MOVE 'Y' TO CL0YM001.cl0ymicf;*/
    /* MOVE 'INSPECTION COMPLETE' TO CL0YM001.CL0YMNFD*/
    /* SET CL0YM001.cl0ymicf AUTOSKIP;*/
    /* MOVE 'Y' TO CL0YM001.CL0YMRST;*/
    /* SET CL0YM001.CL0YMRST AUTOSKIP;*/
   /* END ;*/
   /* IF CL0YW01.YCICD = 'IIP'; new insp reqstd, or insp not found*/
    /* MOVE 'N' TO CL0YM001.cl0ymicf;*/
    /* MOVE 'N' TO CL0YM001.CL0YMRST;*/
    /* MOVE ' ' TO CL0YM001.CL0YMNFD ; clear 'complete' msg*/
   /* END ;*/

  if (CL2REC.YCICD != "CMP")
    if (CL2REC.CL2ISXDT == CL0YW01.CL0YWTDT)
      set KL0YM001.CL0YMICF initialAttributes;
        /* SET CL0YM001.CL0YMRST DEFINED;*/
    end
  end

  if (CLXREC.CLXERRF == "N")
    KL0YM001.CL0YMSEL[1] = CL0YW01.CL0YWVIW[1];
    KL0YM001.CL0YMSEL[2] = CL0YW01.CL0YWVIW[2];
    KL0YM001.CL0YMSEL[3] = CL0YW01.CL0YWVIW[3];
    KL0YM001.CL0YMSEL[4] = CL0YW01.CL0YWVIW[4];
    KL0YM001.CL0YMSEL[5] = CL0YW01.CL0YWVIW[5];
    KL0YM001.CL0YMSEL[6] = CL0YW01.CL0YWVIW[6];
    KL0YM001.CL0YMSEL[7] = CL0YW01.CL0YWVIW[7];
    KL0YM001.CL0YMSEL[8] = CL0YW01.CL0YWVIW[8];
    KL0YM001.CL0YMSEL[9] = CL0YW01.CL0YWVIW[9];
    CL0YW01.CL0YWVIW[1] = " "; /* clear ws array*/
    CL0YW01.CL0YWVIW[2] = " ";
    CL0YW01.CL0YWVIW[3] = " ";
    CL0YW01.CL0YWVIW[4] = " ";
    CL0YW01.CL0YWVIW[5] = " ";
    CL0YW01.CL0YWVIW[6] = " ";
    CL0YW01.CL0YWVIW[7] = " ";
    CL0YW01.CL0YWVIW[8] = " ";
    CL0YW01.CL0YWVIW[9] = " ";
  end

end // end KL0Y101

// edit pfkeys
Function KL0Y110()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Y110";

  if (KL0YM001.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = KL0YM001.CATOAP;
    COMMAREA.CAITEM = KL0YM001.CAITEM;
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
     /* if exit fails*/
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf21)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CATOAP = "KL0A";
            XPCL002();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
end // end KL0Y110

// edit entries and update
Function KL0Y120()
   /* **************************************/
   /* edit entries and update*/
   /* **************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G       **/
   /* *-----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                             **/
   /* *-----------------------------------------------------------**/
   /* * 03-29-92  GDECKE  SUPPRESS FREIGHT CREDIT IF RPS LABELS.  **/
   /* * 05-04-92  GDECKE  compute FREIGHT CREDIT IF rps clm prepaid*/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID RPS CLAIM  **/
   /* *                   WITH CARRIER CODE 927 OR 200            **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.    **/
   /* * 04-28-00  LTANIK  ADDED VALIDATION FOR QUAL AND UOM CD.   **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0Y120";

  set KL0YM001.CLACLMNB cursor;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX < 10)
    if (KL0YM001.SY1STNBR[CLXLINEX] != " "
     && KL0YM001.SY1STNBR[CLXLINEX] != "TOTALS")
      set KL0YM001.CL0YMSEL[CLXLINEX] normal;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  set KL0YM001.CL0YWUSR normal;
  set KL0YM001.CL0YMIDT normal;
  set KL0YM001.CLACLMNB normal;
  set KL0YM001.CL0YMINB normal;

   /* edit rls stock flag*/
   /* IF CL0YM001.CL0YMRST IS MODIFIED;*/
    /* IF CL0YM001.CL0YMRST NE 'Y';*/
      /* AND CL0YM001.CL0YMRST NE 'N';*/
      /* MOVE 497 TO EZEMNO;*/
      /* SET CL0YM001.CL0YMRST CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* ELSE ;*/
      /* SET CL0YM001.CL0YMRST NORMAL;*/
    /* END ;*/
   /* END ;*/

   /* edit insp complete flag*/
  if (KL0YM001.CL0YMICF is modified)
    set KL0YM001.CL0YMICF normal;
    if (KL0YM001.CL0YMICF == "Y")
      if (CL0YW02.CL0YW2CQ[CL0YWDX1] == 0 /* total cr qty = zero*/
       && CL0YW02.CLNNCRQ[CL0YWDX1] == 0) /* and noncr = zero*/
        converseLib.validationFailed(574); /* no qty inspected - can't complete*/
        set KL0YM001.CL0YMICF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end

      /* Tcs addition begins.*/
      CLXREC.CLXLINEX = 1;
      CLXREC.CLXARAYX = 1;
      while (CLXREC.CLXLINEX < 10)
        if (KL0YM001.SY1STNBR[CLXLINEX] != " "
         && KL0YM001.SY1STNBR[CLXLINEX] != "TOTALS")
          if (KL0YM001.XUMCD[CLXLINEX] in XUMTBL.XUMCD) /* CHECK FOR UOM CD*/
            if (KL0YM001.XQACD[CLXLINEX] in XQATBL.XQACD) /* CHECK FOR QUAL*/
                /* NEXT SENTENCE;*/
            else
              converseLib.validationFailed(879);
              set KL0YM001.XQACD[CLXLINEX] cursor, modified, bold;
              set KL0YM001.CL0YMICF modified, bold;
              CLXREC.CLXERRF = "Y";
            end
          else
            converseLib.validationFailed(880);
            set KL0YM001.XQACD[CLXLINEX] cursor, modified, bold;
            set KL0YM001.XUMCD[CLXLINEX] cursor, modified, bold;
            set KL0YM001.CL0YMICF modified, bold;
            CLXREC.CLXERRF = "Y";
          end
        end
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        if (CLXREC.CLXLINEX == 10)
          CLXREC.CLXARAYX = 10;
          while (CLXREC.CLXARAYX < CL0YW01.CL0YWDX1)
            if (CL0YW02.SY1STNBR[CLXARAYX] != "TOTALS")
              if (CL0YW02.XUMCD[CLXARAYX] in XUMTBL.XUMCD)
                if (CL0YW02.XQACD[CLXARAYX] in XQATBL.XQACD)
                  /* NEXT SENTENCE;*/
                else
                  CLXREC.CLXLINEX = 1;
                  while (CLXREC.CLXLINEX < 10)
                    KL0YM001.SY1STNBR[CLXLINEX] = CL0YW02.SY1STNBR[CLXARAYX];
                    KL0YM001.SY2CLRID[CLXLINEX] = CL0YW02.SY2CLRID[CLXARAYX];
                    KL0YM001.XDMCD[CLXLINEX] = CL0YW02.XDMCD[CLXARAYX];
                    KL0YM001.XUMCD[CLXLINEX] = CL0YW02.XUMCD[CLXARAYX];
                    KL0YM001.XQACD[CLXLINEX] = CL0YW02.XQACD[CLXARAYX];
                    KL0YM001.CL0YMTQ[CLXLINEX] = CL0YW02.CLPDEFQ[CLXARAYX];
                    KL0YM001.CL0YMCRQ[CLXLINEX] = CL0YW02.CL0YW2CQ[CLXARAYX];
                    KL0YM001.CL0YMNRT[CLXLINEX] = CL0YW02.CLNNCRQ[CLXARAYX];
                    KL0YM001.CL0YMRQ[CLXLINEX] = CL0YW02.CLNRTSQ[CLXARAYX];
                    KL0YM001.CL0YMCFL[CLXLINEX] = CL0YW02.CL-CLCOM-FL[CLXARAYX];
                    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
                    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                  end
                  converseLib.validationFailed(879);
                  set KL0YM001.XQACD[1] cursor, bold;
   /* SET KL0YM001.CL0YMICF MODIFIED;*/
                  CLXREC.CLXERRF = "Y";
                end
              else
                CLXREC.CLXLINEX = 1;
                while (CLXREC.CLXLINEX < 10)
                  KL0YM001.SY1STNBR[CLXLINEX] = CL0YW02.SY1STNBR[CLXARAYX];
                  KL0YM001.SY2CLRID[CLXLINEX] = CL0YW02.SY2CLRID[CLXARAYX];
                  KL0YM001.XDMCD[CLXLINEX] = CL0YW02.XDMCD[CLXARAYX];
                  KL0YM001.XUMCD[CLXLINEX] = CL0YW02.XUMCD[CLXARAYX];
                  KL0YM001.XQACD[CLXLINEX] = CL0YW02.XQACD[CLXARAYX];
                  KL0YM001.CL0YMTQ[CLXLINEX] = CL0YW02.CLPDEFQ[CLXARAYX];
                  KL0YM001.CL0YMCRQ[CLXLINEX] = CL0YW02.CL0YW2CQ[CLXARAYX];
                  KL0YM001.CL0YMNRT[CLXLINEX] = CL0YW02.CLNNCRQ[CLXARAYX];
                  KL0YM001.CL0YMRQ[CLXLINEX] = CL0YW02.CLNRTSQ[CLXARAYX];
                  KL0YM001.CL0YMCFL[CLXLINEX] = CL0YW02.CL-CLCOM-FL[CLXARAYX];
                  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
                  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
                end
                converseLib.validationFailed(880);
                set KL0YM001.XQACD[1] cursor, bold;
                set KL0YM001.XUMCD[1] cursor, bold;
   /* SET KL0YM001.CL0YMICF MODIFIED;*/
                CLXREC.CLXERRF = "Y";
              end
            end
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        end
      end
    else
      if (KL0YM001.CL0YMICF != "N")
        converseLib.validationFailed(504);
        set KL0YM001.CL0YMICF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    end
  end

   /* edit selections*/
  CL0YW01.CL0YWDX6 = 0;
  while (CL0YW01.CL0YWDX6 < CL0YW01.CL0YWDX3) /* nbr recs on screen*/
    KL0YS45();
  end

   /* edit noncred rtn flag*/
  if (KL0YM001.CLJNCRFL is modified)
    if (KL0YM001.CLJNCRFL != "Y"
     && KL0YM001.CLJNCRFL != "N")
      converseLib.validationFailed(498);
      set KL0YM001.CLJNCRFL cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      set KL0YM001.CLJNCRFL normal;
    end
  end

   /* edit insp by id*/
  if (KL0YM001.CL0YWUSR is modified)
    KL0Y125();
  end

   /* edit insp date*/
  if (KL0YM001.CL0YMIDT is modified)
    KL0YS47();
  end

   /* edit insp nbr*/
  if (KL0YM001.CL0YMINB is modified)
    if (KL0YM001.CL0YMINB > "00"
     && KL0YM001.CL0YMINB <= "99")
       /* next sentence*/
    else
      if (KL0YM001.CL0YMINB == "  ") /* attempt to add new insp nbr*/
         /* next sentence*/
      else
        if (KL0YM001.CL0YMINB == "**")
           /* next sentence*/
        else
          converseLib.validationFailed(499);
          set KL0YM001.CL0YMINB cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
  end

   /* edit insp nbr*/
  if (KL0YM001.CL0YMINB is modified
   || KL0YM001.CLACLMNB is modified)
    if (KL0YM001.CL0YMINB != "  "
     && KL0YM001.CL0YMINB != "**")
      CL2REC.CLACLMNB = KL0YM001.CLACLMNB;
      CL0YW01.CL0YWISN = KL0YM001.CL0YMINB;
      CL2REC.CL2ISNBR = CL0YW01.CL0YWISN;
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS64(); /* select unique cl2rec*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        CL0YW01.CL2ISNBR = CL0YW01.CL0YWISN;
        CL0YW01.CLHSEQNB = CL2REC.CLHSEQNB;
        CL0YW01.CL0YWSEQ = CL2REC.CLHSEQNB;
      else
        converseLib.validationFailed(456);
        set KL0YM001.CL0YMINB cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    end
  end

   /* edit claim nbr*/
  if (KL0YM001.CLACLMNB is modified)
    CLAREC.CLACLMNB = KL0YM001.CLACLMNB;
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS67(); /* select unique clarec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLAREC.YCTCD == "DEF"
       || CLAREC.YCTCD == "OSD"
       || CLAREC.YCTCD == "RTS"
       || CLAREC.YCTCD == "CDR")
        CL0YW01.CLACLMNB = KL0YM001.CLACLMNB;
        CL0YW01.CL0YWRTF = "Y"; /* build table*/
      else
        converseLib.validationFailed(114);
        set KL0YM001.CLACLMNB cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      converseLib.validationFailed(005);
      set KL0YM001.CLACLMNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end

  if (CLXREC.CLXERRF == "Y")
    return; /* if edit errors do not update*/
  end

  if (KL0YM001.CL0YWUSR is modified
   || KL0YM001.CL0YMIDT is modified)
    CL0YW01.CL0YWUSR = KL0YM001.CL0YWUSR;
    CL0YW01.CL0YWDTE = KL0YM001.CL0YMIDT;

    /* ====== Y2K OUT BEGIN =====*/

    /* CL0YW01.CL0YWDTE = CL0YW01.CL0YWDTE + 19000000;*/

    /* ====== Y2K OUT END =======*/


    /* ====== Y2K IN BEGIN =====*/

    if (CL0YW01.CL0YWDYY < 60)
      CL0YW01.CL0YWDCC = 20;
    else
      CL0YW01.CL0YWDCC = 19;
    end

    /* ====== Y2K IN END  =======*/

    CL2REC.XXXUSRID = KL0YM001.CL0YWUSR;
    CL2REC.CL2ISBDT = CL0YW01.CL0YWDTE;
  end

  if (KL0YM001.CL0YMICF is modified) /* inspection complete*/
    CL0YW01.CL0YWICF = KL0YM001.CL0YMICF;
    CL0YW01.CL0YWRSF = KL0YM001.CL0YMRST;
    KL0YS28(); /* update clarec & cl2rec*/
  end

   /* IF CL0YM001.CL0YMRST IS MODIFIED       ; release stock*/
    /* MOVE CL0YM001.cl0ymicf TO CL0YW01.CL0YWICF;*/
    /* MOVE CL0YM001.CL0YMRST TO CL0YW01.CL0YWRSF;*/
    /* CL0YS31                       ; update cl2rec*/
   /* END ;*/

  if (KL0YM001.CL0YMINB == "  " /* new insp will be added on m005*/
   || KL0YM001.CL0YMINB == "00")
     /* next sentence*/
  else
     /* IF CL0YM001.CL0YMRST IS MODIFIED     ; release stock*/
    if (KL0YM001.CL0YMICF is modified /* inspection complete*/
     || KL0YM001.CL0YWUSR is modified /* insp by*/
     || KL0YM001.CL0YMIDT is modified) /* insp dt*/
      call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes}; /* update cl2rec*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0YS01(); /* determine security mode*/
        KL0YM001.CL0YMIST = CL2REC.YCICD; /* (MSH) move to screen*/
        if (CL2REC.YCICD == "CMP"
         || CL2REC.YCICD == "RMS"
         || CL2REC.YCICD == "RMO")
          KL0YM001.CL0YMNFD = "INSPECTION COMPLETE";
        else
          KL0YM001.CL0YMNFD = " ";
        end
        CL0YW01.YCICD = CL2REC.YCICD; /* save to ws*/
        KL0YM001.CL0YMISD = " "; /* (MSH) blank desc*/
        if (CL2REC.YCICD in YCITBL.YCICD) /* (MSH) and look it up*/
          KL0YM001.CL0YMISD = YCITBL.YCISDESC[sysVar.arrayIndex]; /* (MSH)*/
        end /* (MSH)*/
        CL0YW01.YCIDESC = KL0YM001.CL0YMISD; /* save to ws*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Y120"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  if (KL0YM001.CLJNCRFL is modified)
    KL0YS27(); /* update cljrec*/
    CL0YW01.CLJNCRFL = KL0YM001.CLJNCRFL; /* save to ws*/
  end

  CL0YW01.CL0YWDQT = 0; /* totals for deletes*/
  CL0YW01.CL0YWNCT = 0;
  CL0YW01.CL0YWAMT = 0;
  CL0YW01.CL0YWDEL = "N"; /* delete flag*/
  CL0YW01.CL0YWDX6 = 0; /* work index for 9 scrn selctns*/
  while (CL0YWDX6 < CL0YW01.CL0YWDX3) /* nbr recs on screen*/
    CL0YWDX6 = CL0YWDX6 + 1;
    KL0YS16(); /* check for and process deletes*/
  end

  if (CL0YW01.CL0YWDEL == "Y") /* if any clprec deleted*/
     /* update related clorec*/
    CLOREC.CLOTDFQY = CLOREC.CLOTDFQY - CL0YW01.CL0YWDQT;
    CLOREC.CLMTNCRQ = CLOREC.CLMTNCRQ - CL0YW01.CL0YWNCT;
    CLOREC.CLODMAMT = CLOREC.CLODMAMT - CL0YW01.CL0YWAMT;
    if (KL0YM001.XGPCD == "02"
     && CL0YW01.XATCD == "02")
      if (CLJREC.CL-RPS-LABL-FL != "Y")
        CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
        CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
      else
        if (CLLREC.CL-PPD-COLL-IND == "P")
          if (CLLREC.TF1CARCD == "0927"
           || CLLREC.TF1CARCD == "0200")
             /* NEXT SENTENCE*/
          else
            CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
            CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
          end
        end
      end
    end
    XX0XS01();
    CLOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    CLOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
     /* update clorec*/
    call "IO1340" ("U ", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0Y120"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1340"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFHD01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end

    /* DO NOT...   10-3-88*/
     /* update related clarec*/
     /* CLAREC.CLATQTY = CLAREC.CLATQTY - CL0YW01.CLPDEFQT;*/
     /* CLAREC.CLAESTVL = CLAREC.CLAESTVL + CL0YW01.CL0YWAMT;*/
     /* MOVE XX0XW01.XX0XWDAT TO CLAREC.ZZZCHGDT;*/
     /* MOVE XX0XW01.XX0XWTIM TO CLAREC.ZZZCHGTM;*/
     /* CALL IO1160 'U ',SQLCA,CLAREC (nomaps,noncsp; update clarec*/
     /* IF SQLCA.SQLCODE EQ 0;*/
       /* ; next sentence*/
     /* ELSE ;*/
       /* MOVE 'CL0Y120' TO TA1REC.TA1LOCAT(2); location*/
       /* MOVE 'IO1160' TO TA1REC.TA1LOCAT(4); location*/
       /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE   ; database*/
       /* MOVE 'VCLHDR01' TO TA1REC.TA1TBLVU ; table view*/
       /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE; claim number*/
       /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE; table key*/
       /* PERFORM XPCL010             ; error diagnosis routine*/
     /* END ;*/
  end


   /* user req new insp#*/
  if (KL0YM001.CL0YMINB is modified
   && KL0YM001.CL0YMINB == " ")
    KL0YS01(); /* determine security mode*/
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (CL0YW01.CL0YWUDF == "N" /* inquiry mode in effect*/
     && CL0YW01.CL0YWCOK == "N") /* and not based on insp nbr*/
      converseLib.validationFailed(343);
      set KL0YM001.CL0YMINB cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
    CL0YW01.CL2ISNBR = 0; /* clear insp nbr*/
    CL0YW01.CL0YWINS = 0;
  end


end // end KL0Y120

// read user rec for validation
Function KL0Y125()

  set MN1REC empty;

   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/

   /* set up file key for application read*/

  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = KL0YM001.CL0YWUSR; /* user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL   field in key*/

  try
    get MN1REC ;
  end

   /* the following statements check for a file error*/

  if (MN1REC is noRecordFound) /* not found condition*/
    converseLib.validationFailed(455); /* invalid userid*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    set KL0YM001.CL0YWUSR cursor, modified, bold;
  else
    if (MN1REC is ioError) /* not found condition*/
      converseLib.validationFailed(455); /* invalid userid*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
      set KL0YM001.CL0YWUSR cursor, modified, bold;
    end
  end

end // end KL0Y125

// determine next action
Function KL0Y130()
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *************************************************************/
   /* DATE    PGMR    DESCRIPTION                             **/
   /* *************************************************************/
   /* 10-06-90  SGORGA                                          **/
   /* When in the KL0YM001 screen (Def Insp - Product Summary): **/
   /* Added code to save the information that the PF18 key was  **/
   /* pressed to get to the claim header comments in application**/
   /* CL0G.  That information will be used in application CL0G  **/
   /* to flow back to this application when enter is pressed    **/
   /* (from CL0G).                                              **/
   /* **/
   /* 10-21-93  GDECKE  Remove reference to clwrec select list. **/
   /* 10-26-93  GDECKE  Reinstate modified use of clwrec select.**/
                                  /* **/
   /* *************************************************************/

   /* **************************************/
   /* determine next action*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Y130";

  if (converseVar.eventKey is enter)
    if (KL0YM001.CL0YMINB == "  ")
      CL0YW01.CL0YWDX2 = 0; /* reset end of array on screen*/
      CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
      return;
    end
  end

  if (converseVar.eventKey is enter)
    if (KL0YM001.CL0YMINB == "**")
      CL0YW01.CL2ISNBR = -1; /* set to get all insp nbrs*/
      CL0YW01.CLHSEQNB = -1; /* set to get all seq nbrs*/
      CL0YW01.CL0YWDX2 = 1; /* reset end of array on screen*/
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
      CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/
      CL0YW01.CL0YWUDF = "N"; /* no upd allowed*/
    end
  end

  if (converseVar.eventKey is enter
   && KL0YM001.CL0YMINB != "**")
    if (KL0YM001.CLACLMNB is modified
     || KL0YM001.CL0YMINB is modified)
      KL0YS01();
      if (CL0YW01.CL0YWDCT > 0)
        return;
      end
      CL0YW01.CL0YWDX2 = 1; /* reset end of array on screen*/
      CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
      return;
    end
  end

  if (converseVar.eventKey is enter)
    CL0YW01.CL0YWDX8 = 0; /* set screen display index for m005*/
    CL0YW01.CL0YWDX6 = 0; /* work index for 9 scrn selctns*/
    CL0YW01.CL0YWDX7 = 0; /* reset m005 array index*/
    CL0YW01.CL0YWEND = "N";
    if (KL0YM001.CL0YMSEL[1] == "A")
      CL0YW01.KL0YW-INPUT-MODE = "K"; /* Keyboard Mode*/
      CL0YW01.CL0YWEND = "Y";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXCSCRN = "KL0YM005";
      while (CL0YWDX6 < CL0YWDX1) /* until end of m001 array*/
        CL0YWDX6 = CL0YWDX6 + 1;
        CL0YW01.CL0YWNDF = "Y";
        KL0YS13(); /* add to detail array for m005*/
        if (CL0YW01.CL0YWDCT > 0) /* deadlock occurred*/
          return;
        end
        if (CL0YW01.CL0YWNDF == "Y" /* no clprecs for prod selected*/
         && CL0YW02.SY1STNBR[CL0YWDX6] != "TOTALS") /* not totals line*/
          CL0YW01.CL0YWDX7 = CL0YW01.CL0YWDX7 + 1;

          if (CL0YW01.CL0YWDX7 > CL0YW01.CL0YWMX3)
                                   /* if exceeding max lines*/
            CL0YW01.CL0YWDX7 = CL0YW01.CL0YWMX3;
                                   /* in table, show msg*/
            converseLib.validationFailed(251);
            CLXREC.CLXERRF = "Y";
            return;
          end

          CL0YW03.SY1STNBR[CL0YWDX7] = CL0YW02.SY1STNBR[CL0YWDX6];
          CL0YW03.SY2CLRID[CL0YWDX7] = CL0YW02.SY2CLRID[CL0YWDX6];
          CL0YW03.XDMCD[CL0YWDX7] = CL0YW02.XDMCD[CL0YWDX6];
          /* hmacal 06/20/97*/
          CL0YW03.XUMCD[CL0YWDX7] = CL0YW02.XUMCD[CL0YWDX6];
          CL0YW03.XQACD[CL0YWDX7] = CL0YW02.XQACD[CL0YWDX6];
        end
      end
    else
      while (CL0YWDX6 < CL0YWDX3) /* until end of recs on screen*/
        CL0YWDX6 = CL0YWDX6 + 1;
        KL0YS11(); /* check selection*/
        if (CL0YW01.CL0YWDCT > 0) /* deadlock occurred*/
          return;
        end
      end
    end
    if (CL0YW01.CL0YWDEL == "Y") /* after delete reset screen*/
      CL0YW01.CL0YWDX2 = 1; /* reset end of array on screen*/
      CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
    end
    if (CL0YW01.CL0YWEND == "Y") /* user has entered 's', 'x', or 'a'*/
      return;
    end
  end

  if (converseVar.eventKey is enter)
    if (KL0YM001 is modified)
      if (KL0YM001.CAITEM != " ") /* search mode*/
        CL0YW01.SY1STNBR = KL0YM001.CAITEM;
        KL0YM001.CAITEM = " ";
        CLXREC.CLXBLDSC = "Y"; /* build screen*/
      end
    else
      /* The following clwrec select table code helps KL0Y to set up*/
      /* the inspection number. It involves a non-standard use of the*/
      /* clwclmnb field for initial value of cl0yw01.cl2isnbr.*/
      /* It would be a good idea to set up special fields in clwrec to*/
      /* handle this function using a more standard technique.*/
      /* Related code is also in KL02S20, KL02130, KL0YS50, KL0ZS05*/
      /* and KL0Z100.*/
      /*  */
      /*  */
      if ("S" in CLWREC.CLWSELCD)
        CL0YW01.CL2ISNBR = CLWREC.CLWCLMNB[sysVar.arrayIndex];
        CLWREC.CLWSELCD[sysVar.arrayIndex] = "V";
        KL0YS01();
        if (CL0YW01.CL0YWDCT > 0)
          return;
        end
        CL0YW01.CL0YWDX2 = 1;
        CL0YW01.CL0YWRTF = "Y"; /* rebuild table*/
        CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
        CL0YW01.KL0YW-INPUT-MODE = "K"; /* Keyboard Mode*/
        return;
      else
        COMMAREA.CATOAP = "KL02";
        CLXREC.CLXEOAF = "Y";
        CLXREC.CLXEOSF = "Y";
        XPCL002();
        return;
      end
    end
  end


  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end


  if (converseVar.eventKey is pf3)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf7)
    if (CL0YW01.CL0YWDX2 == 1)
      converseLib.validationFailed(007);
    else
      CL0YW01.CL0YWDX2 = CL0YW01.CL0YWDX2 - 9;
      if (CL0YW01.CL0YWDX2 < 1)
        CL0YW01.CL0YWDX2 = 1;
      end
      CLXREC.CLXBLDSC = "Y";
    end
    return;
  end

  if (converseVar.eventKey is pf8)
    CLXREC.CLXARAYX = CL0YW01.CL0YWDX2 + 9;
    if (CLXREC.CLXARAYX > CL0YW01.CL0YWDX1)
      converseLib.validationFailed(003);
    else
      CL0YW01.CL0YWDX2 = CLXREC.CLXARAYX;
      CLXREC.CLXBLDSC = "Y";
    end
    return;
  end

  if (converseVar.eventKey is pf9)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf10)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0W";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf13)
    if (KL0YM001.CLACLMNB is modified
     || KL0YM001.CL0YMINB is modified)
      CL0YW01.CL0YWCLM = 0; /* reset screen header info*/
      KL0YS01();
      if (CL0YW01.CL0YWDCT > 0)
        return;
      end
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXCSCRN = "KL0YM010";
    return;
  end

  if (converseVar.eventKey is pf15)
    if (KL0YM001.CLACLMNB is modified
     || KL0YM001.CL0YMINB is modified)
      CL0YW01.CL0YWCLM = 0; /* reset screen header info*/
      KL0YS01();
      if (CL0YW01.CL0YWDCT > 0)
        return;
      end
    end
    if (CL0YW01.CL0YWUDF == "N" /* no upd allowed*/
     && KL0YM001.CL0YMINB != "00") /* new insp requested*/
      converseLib.validationFailed(541);
      return;
    end
    CLXREC.CLXEOSF = "Y";
    CL0YW01.KL0YW-INPUT-MODE = "K";
    CL0YW01.CL0YWDX7 = 0; /* reset m005 array index*/
    CLXREC.CLXCSCRN = "KL0YM005";
    return;
  end

  if (converseVar.eventKey is pf18)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0G"; /* go look at clm hdr comments*/
    CLWREC.CLWMAPFM = "PF18 KEY"; /* save that pf18 was pressed*/
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf21)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0Z";
    XPCL002();
    return;
  end

end // end KL0Y130

// process map cl0ym005,detail sz
Function KL0Y200()
   /* **************************************************************/
   /* *    process screen cl0ym005                                **/
   /* *                                                           **/
   /* *  note that this process is being performed in a           **/
   /* *     "while loop" from cl0%050 until the end-of-screen     **/
   /* *     flag (clxeosfl) is set to 'y'.                        **/
   /* *                                                           **/
   /* * 05-03-91  sgorga  Deleted a few lines of code that had    **/
   /* *      been commented out since 05-31-90. (It had cleared   **/
   /* *      some warning hold fields).                           **/
   /* * 06-03-94  sgorga  Added code to turn off sz-warning-fl    **/
   /* *     if this warning msg (764) has already been displayed. **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "KL0Y200";

  if (CLXREC.CLXBLDSC == "Y")
    KL0Y201();
    CLXREC.CLXBLDSC = "N";
  end

  if (converseVar.validationMsgNum == 764) /* if size invalid warning about to be displayed*/
    CL0YW01.KL0YW-SZ-WARNING-FL = "Y"; /* set size-warning-displayed*/
  end

   /* ***********************************************************/
  converse KL0YM005 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
   /* 062089 msg 595 = 'ftwr gpc factory # changed to alpha'*/
  KL0YM005.CL0YMSG1 = " "; /* reset message 595 part 1*/
  KL0YM005.CL0YMSG2 = " "; /* reset message 595 part 2*/

  KL0Y210(); /* validate pfkeys*/

  if (CLXREC.CLXERRF == "N")
    if (KL0YM005 is modified         
     || converseVar.eventKey is pf12 /* added for reasonableness check*/
     || CL0YW01.KL0YW-PF12FL == "Y") /* if pf12 needed*/
      KL0Y220(); /* edit entries and update*/
    end
  end

  if (CLXREC.CLXERRF == "N")
    KL0Y230(); /* determine next action*/
  end

  if (CLXREC.CLXEOSF == "N"
   && CLXREC.CLXERRF == "N"
   && CL0YW03.SY1STNBR[CL0YWDX8] == " ") /* no old clprec 1 or 2*/
    KL0YS42(); /* clear detail on screen*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosf) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosf) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0Y200

// build screen
Function KL0Y201()
   /* ***************************************/
   /* build screen*/
   /* ***************************************/

   /* ******************************************************************/
    /* MAINTENANCE*/
    /* 05-31-90 CHELLM Added XBCCD and XBCABRV to the map.*/
    /* 05-03-91 sgorga  Added code to display Err Msg #690, instead of*/
    /* transferring application to CL0A, when a row isn't*/
    /* found on the dclaim.vtralr01 table to match the whse*/
    /* cd (from vclrtn01) and trailer status cd.*/
    /* 05-04-93 GDECKE  Central returns changes - set attributes*/
    /* and values for new or modified fields.*/
    /* SWITCH FORM CLAIMS TO FOOTWEAR QUALITY*/
    /* VERSION OF TRAILER TABLE.*/
   /* 06-03-94 sgorga Replaced duty drawback with size id desc.*/
   /* Added code to darken & skip size desc (Opt.9) when*/
   /* gpc NE 02 because size is entered only for footwear.*/
   /* 06-20-97 HMACAL Added Scan Mode attribute setting;*/
   /* ******************************************************************/

  CLXREC.CLXCPROC = "KL0Y201";

  set KL0YM005 initial;
  KL0YM005.XXXCURDT = VGVar.currentShortGregorianDate;
  CL0YW01.KL0YW-PF12FL = "N"; /* init pf12 flag*/

  if (CL0YW01.CL0YWUDF == "N") /* if no upd allowed*/
    KL0YS46(); /* protect screen*/
  end

  if (CL0YW01.CL0YWCLM == 0) /* header info not in ws rec*/
    KL0YS12(); /* create header info and move to ws*/
  end

  KL0YM005.KL0YM-TINSP = CL0YW01.KL0YW-TINSP;

  KL0YM005.CLACLMNB = CL0YW01.CL0YWCLM;
  KL0YM005.KUCCOID = CL0YW01.KUCCOID;
  KL0YM005.KUMSTRID = CL0YW01.KUMSTRID;
  KL0YM005.XNXCD = CL0YW01.XNXCD;
  KL0YM005.KUCCONM = CL0YW01.KUCCONM;

  if (CL0YW01.CL0YWINS == -1) /* all inspections*/
    KL0YM005.CL0YMINB = 0;
    KL0YM005.CL0YWUSR = " ";
    KL0YM005.CL0YMIDT = " ";
  else
    KL0YM005.CL0YMINB = CL0YW01.CL0YWINS;
    KL0YM005.CL0YWUSR = CL0YW01.CL0YWUSR;
    KL0YM005.CL0YMIDT = CL0YW01.CL0YWDTE;
  end

  KL0YM005.CLHSEQNB = CL0YW01.CL0YWSEQ;
  KL0YM005.CL0YWATQ = CL0YW01.CL0YWATQ;
  KL0YM005.CLODMAMT = CL0YW01.CLODMAMT;
  KL0YM005.XGPCD = CL0YW01.XGPCD;
  KL0YM005.YCTCD = CL0YW01.YCTCD;
  KL0YM005.XGPABRV = CL0YW01.XGPABRV;
  KL0YM005.YCTABRV = CL0YW01.YCTABRV;
  KL0YM005.CLOFGAQ = CL0YW01.CLOFGAQ;
  KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;
  KL0YM005.XWHCD = CL0YW01.XWHCD;
  KL0YM005.XWHABRV = CL0YW01.XWHABRV;
  KL0YM005.CL0YMIST = CL0YW01.YCICD;
  KL0YM005.CL0YMISD = CL0YW01.YCIDESC;
  KL0YM005.CLJNCRFL = CL0YW01.CLJNCRFL;
  KL0YM005.XBCCD = CL0YW01.XBCCD; /* (05-31-90)*/
  KL0YM005.XBCABRV = CL0YW01.XBCABRV; /* (05-31-90)*/

  if (CL0YW01.CL0YWDHF == "Y") /* defective header exists*/
    KL0YM005.CLOTLRID = CLOREC.CLOTLRID;
  else
    VDFTRL01.XGPCD = CL0YW01.XGPCD;
    VDFTRL01.XWHCD = CL0YW01.XWHCD;
    VDFTRL01.FQ0KWTST = "O";
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS68(); /* select unique VDFTRL01*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0YM005.CLOTLRID = CL0YW01.CLOTLRID;
    else
      converseLib.validationFailed(690); /* No row in VTRALR01 table with the*/
                                   /* whse cd or*/
      CLXREC.CLXERRF = "Y"; /* trailer status code, so ERROR!*/
    end
  end

  KL0YM005.CL0YMRAC = CL0YW01.CL0YWRAC;
  if (CL0YW01.CL0YWRAC == "Y")
    set KL0YM005.CL0YMRAC skip, bold;
  else
    set KL0YM005.CL0YMRAC initialAttributes;
  end

   /* set attributes for fields related to central returns*/

  if (CLWREC.CLWMNOPT == 19)
    set KL0YM005.SY-SZ-ID-DESC skip, invisible;
    set KL0YM005.CLPFTYPO skip, invisible;
    set KL0YM005.FY1FCTYC skip, invisible;
    set KL0YM005.CL0YMDC1 skip, invisible;
    set KL0YM005.CL0YMDC2 skip, invisible;
    set KL0YM005.CL0YMDQ2 skip, invisible;
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[2];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[5];
    KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[6];
  else /* (option eq 9)*/
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[1];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[3];
    if (KL0YM005.XGPCD != "02") /* size can only be entered for ftwr*/
      set KL0YM005.SY-SZ-ID-DESC skip, invisible;
      set KL0YM005.CLENBRCT skip, invisible;
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[7];
    else
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[4];
    end
  end

  KL0YS56(); /* Set field attributes depending on Input Mode*/

   /* Display PF24 key only for GPC 02 and WHSE 04 AND 07*/
  if ((KL0YM005.XWHCD == "04" || 
  KL0YM005.XWHCD == "07") && 
  KL0YM005.XGPCD == "02")
    set KL0YM005.CL0YMPF24 normal;
    set KL0YM005.CL0YMPF24 skip;
  else
    set KL0YM005.CL0YMPF24 initialAttributes;
  end

   /* fill in screen detail - if available*/
  KL0YS19();

  if (KL0YM005.XUMCD != "01" /* if uom not each's*/
   && KL0YM005.XUMCD != "  ") /* display warning message*/
    converseLib.validationFailed(588);
  end

    /* reset inspector hold message flag so that it will not be shown*/
    /* a second time*/

  if (CL0YW01.KL0YW-INSP-HOLD-WARN-FL == "Y")
    if (converseVar.validationMsgNum == 753
     || converseVar.validationMsgNum == 754)
      CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "D";
    end
  end

end // end KL0Y201

// edit pfkeys
Function KL0Y210()
   /* ***************************************/
   /* edit pk keys*/
   /* ***************************************/

  CLXREC.CLXCPROC = "CL0Y210";

   /* if from cl0z*/
  if (CLWREC.CLWYZSWT == "Z")
    if (converseVar.eventKey is enter)
      return;
    else
      converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end

  if (KL0YM005.CATOAP != " " /* if any fastpath data entered*/
   || KL0YM005.CAITEM != " ")
    COMMAREA.CATOAP = KL0YM005.CATOAP;
    COMMAREA.CAITEM = KL0YM005.CAITEM;
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
     /* if exit fails*/
    CLXREC.CLXERRF = "Y";
    return;
  end

   /* IF EZEAID IS ENTER;*/
    /* AND CL0YW01.KL0YW-PF12FL = 'Y';*/
    /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* MOVE 740 TO EZEMNO;            /* pf12 is needed to continue*/
    /* SET KL0YM005 ALARM;*/
       /* EZERTN;*/
   /* END;*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2  
   || converseVar.eventKey is pf5  
   || converseVar.eventKey is pf7  
   || converseVar.eventKey is pf8  
   || converseVar.eventKey is pf9  
   || converseVar.eventKey is pf10 
   || converseVar.eventKey is pf12 /* added 07-13-92*/
   || converseVar.eventKey is pf13 
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf20 
   || converseVar.eventKey is pf21)
    return;
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf24)
              if ((KL0YM005.XWHCD == "04" || 
              KL0YM005.XWHCD == "07") && 
              KL0YM005.XGPCD == "02")
                return;
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                CLXREC.CLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end KL0Y210

// edit -M005 entries,update
Function KL0Y220()
   /* ***************************************/
   /* edit -M005 screen entries and update*/
   /* ***************************************/
   /* ****************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G          **/
   /* --------------------------------------------------------------**/
   /* DATE   PGMR   DESCRIPTION                                **/
   /* --------------------------------------------------------------**/
    /* Maintenance History:*/
    /* 05-31-90 CHELLM Added Product Brand - Claim Brand edit.*/
                    /* Split out the Fcty Cd and PO Nbr edits*/
                    /* from CL0YS51 Warning Edits into CL0YS53*/
                    /* and CL0YS54.  Goal Phase IV now requires*/
                    /* valid Fcty Cd - PO combo or Fcty Cd= '99'*/
    /* 06-06-90 chellm remove 'if modified only' from fctycd edit*/
                    /* so the edit occurs reguardless.*/
    /* 06-18-90 CHELLM Change PO Edit back to just a warning only*/
                    /* to allow for oldy moldy PO Numbers that*/
                    /* are not on DPROD.VPOITM01.  Split out the*/
                    /* PO Combo edit from CL0YS54 to CL0YS55 to*/
                    /* be performed from warning edit group*/
                    /* CL0YS51.*/
   /* 05-03-91 sgorga Added code to force the re-edit of PO combo*/
   /* (by moving 'N' to the CL06W01.CL0YWWRN field) each*/
   /* time the fcty cd, PO id#, style, and/or color field*/
   /* is modified.  Coded the SQL retn cd inquiry from DB*/
   /* call for style to be in -S72 process instead of both*/
   /* -S72 & S77 (moved perform of -S77 to -S72 instead of*/
   /* -220).  Removed bogus and redundant code.  DELETED*/
   /* STMT GRP -S51 (-S55 is now performed from -220).*/
   /* -S55 was an 'if' stmt - moved the 'if' stmt to -220.*/
   /* Added cl0ym005.sy2clrid to fields being set to normal.*/
   /* Added code to display Err Msg #690, INSTEAD of*/
   /* transferring application to CL0A, when a row isn't*/
   /* found on the dclaim.vtralr01 to match whse cd (from*/
   /* claims actual rtrn tbl - vclrtn01) & trailer stat cd.*/
   /* 10-23-91 twatso  removed some code which will now force the*/
   /* style/color edit to be performed every time this module*/
   /* is entered. Profitability was abending on bad colors*/
   /* being passed to them.  The default 00 color and 00 dim*/
   /* are no longer valid for all styles.*/
   /* 07-09-92 twatso  added code to do the qty edit and compare for*/
   /* reasonableness check.*/
   /* 05-05-93 gdecke  bypass factory, def code, and other edits if*/
   /* entered through option 19.*/
   /* IF OPT=9 AND PROD IS INSP HOLD, SHOW MESSAGE.*/
   /* ALLOW FACTORY AND PO FOR APPAREL.*/
   /* SWITCH FROM CLAIM TO FOOTWEAR QUALITY VERSION*/
   /* OF TRAILER TABLE*/
   /* 06-15-93 gdecke  ALLOW APPAREL PO AND FACTORY ENTRY.*/
   /* 06-03-94 sgorga  Replace duty cd (yddcd) with size desc. Added*/
   /* code to perform new process (kl0ys-sz-edit-tran)*/
   /* that calls subpgm sy1120 to edit size desc and*/
   /* and translate size desc to size id.*/
   /* 05-05-97 KSHAW/HMACAL*/
   /* Added logic to validate the Defect Code against*/
   /* User Group*/
   /* 06-20-97 HMACAL  Added Product Bar Code validation and processing.*/
   /* 01-27-98 hbaska  commented out the condition checking for*/
   /* WHCode = '07' under option '09' processing*/
   /* 04-19-99 GDECKE  CHANGED DEF CODE DEFAULT FROM 999 TO SPACES.*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0Y220";

   /* =================================================*/
   /* this sets all fields to normal state to be set later if errors*/
   /* if no error, field will appear as defined*/

  if (CLWREC.CLWMNOPT == 9
   && KL0YM005.XGPCD == "02"
   && CL0YW01.KL0YW-INSP-HOLD-WARN-FL != "N")
    if (KL0YM005.SY1STNBR is modified
     || KL0YM005.SY2CLRID is modified
     || KL0YM005.XDMCD is modified
     || KL0YM005.SY-SZ-ID-DESC is modified
     || KL0YM005.FY1FCTYC is modified)
      CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "N";
    end
  end

  if (CL0YW01.KL0YW-INPUT-MODE == "K") /* If in Keyboard Mode*/
    set KL0YM005.SY1STNBR cursor, normal;
    set KL0YM005.SY2CLRID normal; /* 05-03-91*/
    set KL0YM005.XDMCD normal;
    set KL0YM005.XUMCD normal;
    set KL0YM005.XQACD normal;
    set KL0YM005.SY-SZ-ID-DESC normal;
    set KL0YM005.CLPFTYPO normal;
    set KL0YM005.FY1FCTYC normal;
    if (KL0YM005.XGPCD == "02") /* If Footwear*/
      set KL0YM005.CLENBRCT normal;
    else /* Apparel*/
      set KL0YM005.CLENBRCT skip, invisible;
    end
    set KL0YM005.CL0YMDC1 normal;
    set KL0YM005.CL0YMDQ1 normal;
    set KL0YM005.CL0YMDC2 normal;
    set KL0YM005.CL0YMDQ2 normal;
    set KL0YM005.CL0YMNCC normal;
    set KL0YM005.CL0YMNCQ normal;
  else /* in Scan Mode*/
    set KL0YM005.PC-BAR-CD-SEQ-NBR cursor, normal;
    set KL0YM005.SY1STNBR skip;
    set KL0YM005.SY2CLRID skip;
    set KL0YM005.XDMCD skip;
    set KL0YM005.XUMCD skip;
    set KL0YM005.XQACD skip;
    set KL0YM005.SY-SZ-ID-DESC skip;
    set KL0YM005.CLPFTYPO skip;
    set KL0YM005.FY1FCTYC skip;
    if (KL0YM005.XGPCD == "02") /* If Footwear*/
      set KL0YM005.CLENBRCT normal;
    end
    set KL0YM005.CL0YMDC1 normal;
    set KL0YM005.CL0YMDQ1 normal;
    set KL0YM005.CL0YMDC2 normal;
    set KL0YM005.CL0YMDQ2 normal;
    set KL0YM005.CL0YMNCC normal;
    set KL0YM005.CL0YMNCQ normal;
  end

    /* reset attributes of menu option 19 - central returns*/
  if (CLWREC.CLWMNOPT == 19)
    set KL0YM005.SY-SZ-ID-DESC skip, invisible;
    set KL0YM005.CLPFTYPO skip, invisible;
    set KL0YM005.FY1FCTYC skip, invisible;
    set KL0YM005.CL0YMDC1 skip, invisible;
    set KL0YM005.CL0YMDC2 skip, invisible;
    set KL0YM005.CL0YMDQ2 skip, invisible;
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[2];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[5];
    KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[6];
  else /* (option eq 9)*/
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[1];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[3];
    if (KL0YM005.XGPCD != "02") /* size can be entered only for ftwr*/
      set KL0YM005.SY-SZ-ID-DESC skip, invisible;
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[7];
    else
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[4];
    end
  end

   /* If Bar Code was scanned, verify Bar code and derive associated*/
   /* map fields.*/

  if (KL0YM005.PC-BAR-CD-SEQ-NBR != 0) /* Bar Code was scanned*/

    if (KL0YM005.PC-BAR-CD-SEQ-NBR is modified)

      KL0Y221(); /* Validate Bar Code*/

      if (CL0YW01.KL0YW-INSP-HOLD-WARN-FL != "N")
        CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "N";
      end
    end

    if (CLXREC.CLXERRF == "Y") /* Bar Code has error*/
      return;
    end

  else /* Bar Code scanned was zeroes, or no bar code entered*/
    if (CL0YW01.KL0YW-INPUT-MODE == "S" /* If in Scan Mode*/
     && converseVar.eventKey is enter)  /* and ENTER key*/
      converseLib.validationFailed(788); /* Zero Bar Code was entered*/
      CLXREC.CLXERRF = "Y";
      set KL0YM005.PC-BAR-CD-SEQ-NBR cursor, modified, bold;
      return;
    end
  end

   /* =================================================*/
   /* if user wants out*/
   /* 05/14/97 HMACAL changed to check Default values*/

  if (KL0YM005.SY-SZ-ID-DESC == " "
   && KL0YM005.CLPFTYPO == " "
   && KL0YM005.FY1FCTYC == " "
   && (KL0YM005.CLENBRCT == CL0YW01.CLPCRTNB
   || KL0YM005.CLENBRCT == " ")
   && (KL0YM005.CL0YMDC1 == "   "
   || KL0YM005.CL0YMDC1 == " ")
   && (KL0YM005.CL0YMDQ1 == 1
   || KL0YM005.CL0YMDQ1 == 0)
   && KL0YM005.CL0YMDC2 == " "
   && KL0YM005.CL0YMDQ2 == 0
   && KL0YM005.CL0YMNCC == " "
   && KL0YM005.CL0YMNCQ == 0
   && KL0YM005.CLGCOMNT == " ")
    if (converseVar.eventKey is enter
     && CLWREC.CLWYZSWT == "Z") /* user wants back to 'z' - prod id*/
                                   /* protectd*/
      return;
    else
      if (KL0YM005.SY1STNBR == " " /* user wants out and must clear all*/
       /* detail*/
       && KL0YM005.SY2CLRID == " " 
       && KL0YM005.XDMCD == " "    
       && KL0YM005.XUMCD == " "    
       && KL0YM005.XQACD == " ")  
        return;
      end
    end
  end

   /* Save Current Product Id*/
  CL0YW01.CL0YMSTY = KL0YM005.SY1STNBR;
  CL0YW01.CL0YMCLR = KL0YM005.SY2CLRID;
  CL0YW01.CL0YMDIM = KL0YM005.XDMCD;

   /* If change in Keyboard/Scan Mode, skip edit checks and re-display*/
   /* map depending on mode selected.*/

  if (converseVar.eventKey is pf24) /* Mode Changed*/
    return;
  end

   /* =================================================*/
   /* set default values if needed*/

  if (KL0YM005.XGPCD != "03" /* if not apparel default*/
   && KL0YM005.SY2CLRID == " ")
    KL0YM005.SY2CLRID = "00";
  end
  if (KL0YM005.XDMCD == " ")
    KL0YM005.XDMCD = "00";
  end

   /* =================================================*/
   /* then start at the bottom and edit fields up the screen*/
   /* check for input errors*/
   /* =================================================*/

   /* set to update comment*/
  if (CL0YW01.KL0YW-PF12FL == "N") /* everything is ok with qty so far*/

    if (KL0YM005.CLGCOMNT is modified)
      CL0YW01.CL0YWCOM = "Y";
    end

   /* =================================================*/
    /* edit no cred qty*/

    if (KL0YM005.CL0YMNCQ is modified
     || KL0YM005.CL0YMNCC is modified)
      if (KL0YM005.CL0YMNCC != " ")
        if (KL0YM005.CL0YMNCQ == 0)
          converseLib.validationFailed(231);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMNCQ cursor, modified, bold;
        else
          KL0YM005.CL0YMDC1 = " ";
          KL0YM005.CL0YMDQ1 = 0;
          KL0YM005.CL0YMDC2 = " ";
          KL0YM005.CL0YMDQ2 = 0;
          set KL0YM005.CL0YMDC1 initialAttributes;
          set KL0YM005.CL0YMDQ1 initialAttributes;
          set KL0YM005.CL0YMDC2 initialAttributes;
          set KL0YM005.CL0YMDQ2 initialAttributes;
        end
      else
        if (KL0YM005.CL0YMNCQ != 0)
          converseLib.validationFailed(295);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMNCC cursor, modified, bold;
        end
      end
    end

   /* =================================================*/
    /* edit no cred cd*/

    if (KL0YM005.CL0YMNCC is modified)
      if (KL0YM005.CL0YMNCC != " ")
        if (KL0YM005.CL0YMNCC in YDRTBL.YDRCD
         && YDRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active entry*/
          set KL0YM005.CL0YMNCC normal;
        else
          converseLib.validationFailed(295);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMNCC cursor, modified, bold;
        end
      end
    end

   /* =================================================*/
    /* edit def code2 and qty2*/

   /* IF KL0YM005.CL0YMDC2 IS MODIFIED*/
   /* OR KL0YM005.CL0YMDQ2 IS MODIFIED;*/
    if (KL0YM005.CL0YMDC2 != " ")
      CL0YW01.CL0YWYDF = KL0YM005.CL0YMDC2;
      CL0YW01.CL0YWGPC = KL0YM005.XGPCD;
      if (CL0YW01.CL0YWKY1 in YDFTBL.YDFKEY
       && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active entry*/
           /*  */
           /* Validate the User/Group Defect Code assignment*/
           /*  */

        KL0YS-VAL-USR-AUTH(); /* Validate User Group/Defect Code*/

        if (CL0YW01.CL0YWYDF == KL0YM005.CL0YMDC2 && 
        (converseVar.validationMsgNum == 769
         || converseVar.validationMsgNum == 770)) /* Error found in Def Code validation*/
          set KL0YM005.CL0YMDC2 cursor, modified, bold;
        end
      else
        converseLib.validationFailed(410);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC2 cursor, modified, bold;
      end
      if (KL0YM005.CL0YMDQ2 == 0)
        converseLib.validationFailed(231);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDQ2 cursor, modified, bold;
      end
      if (KL0YM005.CL0YMDC1 == " ") /* must have key1*/
        converseLib.validationFailed(505);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC2 cursor, modified, bold;
      end
    else
      if (KL0YM005.CL0YMDQ2 != 0)
        converseLib.validationFailed(410);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC2 cursor, modified, bold;
      end
    end
   /* END;*/

   /* =================================================*/
    /* edit def code2 - check trailer*/

    if (KL0YM005 is modified     
     && KL0YM005.CL0YMDC2 != " " /* key 2 entered*/
     && CL0YW03.CL0YWYD2[CL0YWDX8] == " ") /* no prev key 2*/
      VDFTRL01.XGPCD = CL0YW01.XGPCD; /* build key to look up VDFTRL01*/
      VDFTRL01.XWHCD = CL0YW01.XWHCD; /* build key to look up VDFTRL01*/
      VDFTRL01.FQ0KWTST = "O";
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS68(); /* select unique VDFTRL01*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(690); /* No row in VTRALR01 table with the*/
                                   /* whse cd or*/
        CLXREC.CLXERRF = "Y"; /* trailer status code, so ERROR!*/
      else
        if (CL0YW01.CL0YWDHF == "Y") /* defective header exists*/
          if (CL0YW01.CLOTLRID != CLOREC.CLOTLRID)
            converseLib.validationFailed(542); /* must start new inspection*/
            CLXREC.CLXERRF = "Y";
            set KL0YM005.CL0YMDC2 cursor, modified, bold;
          end
        else
          KL0YM005.CLOTLRID = CL0YW01.CLOTLRID;
        end
      end
    end

   /* =================================================*/
    /* edit def code2 only*/

    if (KL0YM005.CL0YMDC2 is modified)
      if (KL0YM005.CL0YMDC2 == " " /* attempt to clear out old clprec*/
       && CL0YW03.CL0YWYD2[CL0YWDX8] != " ")
                                   /* should be done on m001 scrn*/
        converseLib.validationFailed(531); /* cannot delete from this screen*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC2 cursor, modified, bold;
      end
    end

   /* =================================================*/
    /* edit def qty1*/

    if (KL0YM005.CL0YMDQ1 is modified
     || KL0YM005.CL0YMDC1 is modified)
      if (CLWREC.CLWMNOPT == 19
       || KL0YM005.CL0YMDC1 != " ")
        if (KL0YM005.CL0YMDQ1 == 0)
          converseLib.validationFailed(231);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMDQ1 cursor, modified, bold;
        end
      else
        if (CLWREC.CLWMNOPT == 9
         && KL0YM005.XGPCD == "02"
         && KL0YM005.CL0YMDQ1 != 0)
          converseLib.validationFailed(410);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMDC1 cursor, modified, bold;
        end
      end
    end

   /* =================================================*/
    /* edit def qty1*/

    if (KL0YM005.SY1STNBR is modified
     && CLWREC.CLWMNOPT == 19
     && KL0YM005.CL0YMDQ1 == 0
     && KL0YM005.CL0YMNCQ == 0)
      converseLib.validationFailed(231);
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CL0YMDQ1 cursor, modified, bold;
    end

   /* =================================================*/
    /* edit for def cd 1 & 2 cannot be equal*/

    if (KL0YM005.CL0YMDC1 is modified
     || KL0YM005.CL0YMDC2 is modified)
      if (KL0YM005.CL0YMDC1 == KL0YM005.CL0YMDC2
       && KL0YM005.CL0YMDC1 != " ") /* and they aren't both blank*/
        converseLib.validationFailed(502);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC2 cursor, modified, bold;
        set KL0YM005.CL0YMDC1 cursor, modified, bold;
      end
    end

   /* =================================================*/
    /* edit def code1 only*/

    if (KL0YM005.CL0YMDC1 is modified)
      if (KL0YM005.CL0YMDC1 == " " /* attempt to clear out old clprec*/
       && CL0YW03.CL0YWYD1[CL0YWDX8] != " ")
                                   /* should be done on m001 scrn*/
        converseLib.validationFailed(531); /* cannot delete from this screen*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC1 cursor, modified, bold;
      end
    end

   /* =================================================*/
    /* edit def code1*/

   /* IF KL0YM005.CL0YMDC1 IS MODIFIED;*/
    if (KL0YM005.CL0YMDC1 != " ")
      CL0YW01.CL0YWYDF = KL0YM005.CL0YMDC1;
      CL0YW01.CL0YWGPC = KL0YM005.XGPCD;
      if (CL0YW01.CL0YWKY1 in YDFTBL.YDFKEY
       && YDFTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active entry*/
           /*  */
           /* Validate the User/Group Defect Code assignment*/
           /*  */
        KL0YS-VAL-USR-AUTH(); /* Validate User Group/Defect Code*/

        if (CL0YW01.CL0YWYDF == KL0YM005.CL0YMDC1 && 
        (converseVar.validationMsgNum == 769
         || converseVar.validationMsgNum == 770)) /* Error found in Def Code validation*/
          set KL0YM005.CL0YMDC1 cursor, modified, bold;
        else
          set KL0YM005.CL0YMDC1 normal;
        end
      else
        converseLib.validationFailed(410); /* defective code not valid*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CL0YMDC1 cursor, modified, bold;
      end
    end
   /* END;*/
   /* =================================================*/
    /* edit for def cd and no cred code*/

    if (KL0YM005 is modified)
      if (KL0YM005.CL0YMDC1 == " "
       && KL0YM005.CL0YMNCC == " "
       && CLWREC.CLWMNOPT == 9)
        if (KL0YM005.XGPCD == "02"
         || KL0YM005.XGPCD == "03")
          converseLib.validationFailed(503);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.CL0YMDC1 cursor, modified, bold;
          set KL0YM005.CL0YMNCC modified, bold;
          if (KL0YM005.XGPCD == "02") /* If Footwear*/
            KL0YM005.CL0YMDC1 = "   "; /* Set Def Cd to '   '*/
          end
        end
      /* ELSE;*/
      /* SET KL0YM005.CL0YMDC1 NORMAL;*/
      /* SET KL0YM005.CL0YMNCC NORMAL;*/
      end
    end


   /* =================================================*/
    /* edit def code1 - check trailer- VDFTRL01*/

    if (KL0YM005 is modified              
     && KL0YM005.CL0YMDC1 != " "          /* key 1 entered(def cd 1)*/
     && CL0YW03.CL0YWYD1[CL0YWDX8] == " " /* no prev key 1(def cd 1)*/
     && CL0YW03.YDRCD[CL0YWDX8] == " ")   /* no prev key 1*/
      if (KL0YM005.XGPCD != "02") /* TRAILER ID NOT NEEDED IF NOT FTWR*/
        KL0YM005.CLOTLRID = " "; /* trailer id*/
      else
        VDFTRL01.XGPCD = CL0YW01.XGPCD;
                                   /* build key to look up trailer*/
        VDFTRL01.XWHCD = CL0YW01.XWHCD;
                                   /* build key to look up trailer*/
        VDFTRL01.FQ0KWTST = "O"; /* trailer - VDFTRL01*/
        CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
        CL0YW01.CL0YWDCT = 0; /* deadlock count*/
        while (CL0YW01.CL0YWDFL == "Y")
          KL0YS68(); /* select unique VDFTRL01(trailer)*/
        end
        if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE != 0)
          converseLib.validationFailed(690); /* No row in VTRALR01 table with the*/
                                   /* whse cd or*/
          CLXREC.CLXERRF = "Y"; /* trailer status code, so ERROR!*/
        else
          if (CL0YW01.CL0YWDHF == "Y") /* defective header exists*/
            if (CL0YW01.CLOTLRID != CLOREC.CLOTLRID)
              converseLib.validationFailed(542); /* must start new inspection*/
              CLXREC.CLXERRF = "Y";
              set KL0YM005.CL0YMDC1 cursor, modified, bold;
            end
          else
            KL0YM005.CLOTLRID = CL0YW01.CLOTLRID; /* trailer id*/
          end
        end
      end
    end

   /* =================================================*/
    /* edit factory code*/

    if (KL0YM005.FY1FCTYC is modified) /* If factory cd has been modified*/
      CL0YW01.CL0YWWRN = "N"; /* we need to validate po combo again*/
    end /* (po/fcty combo is edited in -S55)*/
                                   /* 5-3-91*/
    KL0YS53(); /* edit factory code*/

   /* =================================================*/
    /* Edit Purchase Order ID Nbr*/

    if (KL0YM005.CLPFTYPO is modified)
                                   /* If po id date has been modified*/
      CL0YW01.CL0YWWRN = "N"; /* we need to validate po combo again*/
    end /* (po/fcty combo is edited in -S55)*/
                                   /* 5-3-91*/
    if (CLWREC.CLWMNOPT == 9) /* DO PO EDIT FOR MENU OPTION 9 ONLY*/
      KL0YS54(); /* edit po id number*/
    end

   /* HMACAL - moved Size Id Desc validation after Quality Code edits.*/
   /* ===================================================================*/
   /* size description - verify size is entered IF opt = 09 & gpc = 02*/

    if (KL0YM005.SY-SZ-ID-DESC is modified)
      CL0YW01.CL0YWWRN = "N";
    end

    if (KL0YM005.XGPCD == "02"
     && CLWREC.CLWMNOPT == 9
     && KL0YM005.SY-SZ-ID-DESC == " ")
      set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(756); /* size must be entered for ftwr claims*/
        CLXREC.CLXERRF = "Y";
      end
    end

   /* ===================================================================*/
   /* edit size description*/

   /* (edit size, modified or not, since PRODUCT may have been modified)*/

   /* Added code below to edit only if kl0yw-sz-warning-fl = 'N'. If it*/
   /* = 'Y' (instead of 'N'),  it means this process is being entered while*/
   /* 'viewing' an existing inspection AND that the size (from clprec) for*/
   /* the inspection is invalid AND that a warning (764 msg in -S19) has*/
   /* already been displayed.  The size shouldn't be being edited here*/
   /* under these circumstances.*/

    if (KL0YM005.XGPCD == "02"
     && CLWREC.CLWMNOPT == 9
     && converseVar.validationMsgNum == 0
     && CL0YW01.KL0YW-SZ-WARNING-FL == "N") /* see above comments*/
      KL0YS-EDIT-SIZE(); /* <-- calls subpgm sy1120 to edit size*/
      if (SYPREC.SYPRC == 0) /* if call successful ...*/
        CL0YW01.KL0YW-SY-SZ-ID-FND-FL = "N"; /* init size found flag*/
        sysVar.arrayIndex = 1;
        while (sysVar.arrayIndex <= 40) /* search array (from sy1120) to get size id*/
          if (KL0YM005.SY-SZ-ID-DESC == SYPREC.SY4IDDSC[sysVar.arrayIndex])
            CL0YW01.KL0YW-HLD-SY-SZ-ID = SYPREC.SY5SZID[sysVar.arrayIndex];
            CL0YW01.KL0YW-SY-SZ-ID-FND-FL = "Y";
            sysVar.arrayIndex = 41; /* to force loop end*/
          else
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end
        if (CL0YW01.KL0YW-SY-SZ-ID-FND-FL == "N")
          set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
          converseLib.validationFailed(763); /* size not valid for this product*/
          CLXREC.CLXERRF = "Y";
        end
      else
        if (SYPREC.SYPRC == 9)
          set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
          converseLib.validationFailed(4); /* -911 Database busy - please try again*/
          CLXREC.CLXERRF = "Y";
        else
          if (SYPREC.SYPRC == 2)
            set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
            converseLib.validationFailed(763); /* size not valid for this product*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end

   /* =================================================*/
    /* edit quality code*/

    if (KL0YM005.XQACD is modified)
      if (KL0YM005.XQACD == "  ")
        KL0YM005.XQACD = "01";
    /* SET KL0YM005.XQACD DEFINED;*/
      else
        if (KL0YM005.XQACD in XQATBL.XQACD
         && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* quality code is active*/
          if (KL0YM005.XQACD == "01"
           || KL0YM005.XQACD == "02")
    /* SET KL0YM005.XQACD DEFINED;*/
          else
            converseLib.validationFailed(468);
            CLXREC.CLXERRF = "Y";
            set KL0YM005.XQACD cursor, modified, bold;
          end
        else
          converseLib.validationFailed(468);
          CLXREC.CLXERRF = "Y";
          set KL0YM005.XQACD cursor, modified, bold;
        end
      end
    else
      if (KL0YM005.XQACD == "01"
       || KL0YM005.XQACD == "02")
    /* SET KL0YM005.XQACD DEFINED;*/
      else
        KL0YM005.XQACD = "01";
    /* SET KL0YM005.XQACD DEFINED;*/
      end
    end


   /* if anything modified edit all style, color, dim and uom*/

   /* edit the unit of measure*/
   /* ============================================================*/

    if (KL0YM005.XUMCD == " ")
      SY1REC.XGPCD = KL0YM005.XGPCD;
      SY1REC.SY1STNBR = KL0YM005.SY1STNBR;
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS72(); /* select unique sy1rec*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0YM005.XUMCD = SY1REC.XUMCD;
      end
    end

   /* =================================================*/
    /* edit uom*/

    if (KL0YM005.XUMCD is modified)
      if (KL0YM005.XUMCD in XUMTBL.XUMCD
       && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active entry*/
        set KL0YM005.XUMCD normal;
      else
        converseLib.validationFailed(333); /* unit of measure not valid*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.XUMCD cursor, modified, bold;
      end
    end

   /* =================================================*/
    /* edit color & dim*/

    if (KL0YM005.SY2CLRID is modified) /* If color has been modified,*/
      CL0YW01.CL0YWWRN = "N"; /* we need to validate po combo again*/
    end /* (po/fcty combo is edited in -S55)*/
                                   /* 5-3-91*/

   /* IF KL0YM005.SY2CLRID IS MODIFIED;/* removed these if's so that the*/
    /* OR KL0YM005.SY2CLRID EQ ' ';/* edit is done all the time10-22-91*/
    /* OR KL0YM005.XDMCD IS MODIFIED;*/
    SY2REC.XGPCD = KL0YM005.XGPCD;
    SY2REC.SY1STNBR = KL0YM005.SY1STNBR;
    SY2REC.SY2CLRID = KL0YM005.SY2CLRID;
    SY2REC.XDMCD = KL0YM005.XDMCD;
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS71(); /* validate color & dimension*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
   /* END;*/

   /* =================================================*/
    /* edit style*/

    if (KL0YM005.SY1STNBR is modified) /* If style has been modified,*/
      CL0YW01.CL0YWWRN = "N"; /* we need to validate po combo again*/
    end /* (po/fcty combo is edited in -S55)*/
                                   /* 5-3-91*/

   /* IF KL0YM005 IS MODIFIED;/* even if not modified we want to edit*/
    if (KL0YM005.SY1STNBR == " ") /* 10-22-91 changes are that the edits*/
      converseLib.validationFailed(200); /* happen anyway  if this module is*/
                                   /* entered*/
      CLXREC.CLXERRF = "Y";
      set KL0YM005.SY1STNBR cursor, modified, bold;
    else
      /* IF KL0YM005.SY1STNBR IS MODIFIED;*/
      SY1REC.XGPCD = KL0YM005.XGPCD;
      SY1REC.SY1STNBR = KL0YM005.SY1STNBR;
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS72(); /* validate style sy1rec*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0YS77(); /* edit product brand (5-31-90)*/
      end
      /* END;*/
    end

   /* ============================================================*/
   /*  */
   /* EDIT FOR INSPECTOR HOLD PRODUCTS. IF PRODUCT ON HOLD SHOW*/
   /* A WARNING MESSAGE. THE INSP-HOLD-WARN-FL ALLOWS THE MESSAGE*/
   /* TO SHOW ONLY ONCE FOR THE PRODUCT.*/

    if (CLWREC.CLWMNOPT == 9   /* DO INSPECTOR HOLD EDIT ONLY*/
     && KL0YM005.XGPCD == "02" /* WHEN USING MENU OPTION 9 AND*/
     /* AND KL0YM005.XWHCD = '07'    /* INSPECTING FTWR AT WLSN WAREHOUSE*/
     && CL0YW01.KL0YW-INSP-HOLD-WARN-FL == "N"
     && KL0YM005.YCTCD != "CDR"
     && KL0YM005.YCTCD != "OSD")
      CL0YW05.CL0YW-FQYCNT1 = 0;
      KL0YS-EDT-INSP-HLD();
    /* WARNING MESSAGE IF PRODUCT IS ON HOLD*/
    /* IF CARTON# ENTERED ON A HOLD PRODUCT THEN*/
    /* CLEAR CARTON# AND SHOW OTHER WARNING MESSAGE*/
      if (CL0YW05.CL0YW-FQYCNT1 > 0)
        if (KL0YM005.CLENBRCT != " ") /* CARTON COUNT*/
          KL0YM005.CLENBRCT = " "; /* SHOW MSG - DO NOT ENTER CARTON*/
          converseLib.validationFailed(754); /* IF SHOE IS ON INSPECTOR HOLD*/
          CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "Y";
          CLXREC.CLXERRF = "Y";
          set KL0YM005.XQACD modified;
          set KL0YM005.CLENBRCT modified;
        else
          converseLib.validationFailed(753);
                                   /* SHOW MSG: WARNING THAT PRODUCT*/
          CLXREC.CLXERRF = "Y"; /* IS ON INSPECTOR HOLD*/
          CL0YW01.KL0YW-INSP-HOLD-WARN-FL = "Y";
          set KL0YM005.XQACD modified;
        end
      end
    end

    if (CLXREC.CLXERRF == "Y")
      CL0YW01.CL0YWWRN = "N"; /* warning flag off*/
      return; /* if input errors - do not update*/
    end

   /* ============================================================*/
    /* Determine if PO/Factory combo needs to be edited.*/

    if (CL0YW01.CL0YWWRN == "Y") /* (if = 'y')*/
      CL0YW01.CL0YWWRN = "N";
    else /* (Else cl0ywwrn does = 'N')*/
      if (KL0YM005.XUMCD != "01"
       && KL0YM005.XUMCD != "  ")
        converseLib.validationFailed(588); /* Warning: unit of meas cd not ='01'*/
        set KL0YM005.XUMCD cursor, modified, bold;
        CL0YW01.CL0YWWRN = "Y";
      end
      if (KL0YM005.CLPFTYPO != " ") /* if PO id number isn't zero*/
        KL0YS55(); /* edit po id number*/
      end
    end

    if (CL0YW01.CL0YWWRN == "Y") /* if error, then go back and display*/
      CLXREC.CLXERRF = "Y"; /* and fix the errors*/
      set KL0YM005.XQACD modified;
      return;
    end

  end
   /* =================================================*/
    /* edit Carton Nbr*/
    /* HMACAL - Edit Carton number everytime and must be numeric,if given.*/
    /* Carton number is optional for Footwear and always blank*/
    /* for Apparel. When specified, blanks are changed to zeroes.*/

   /* IF KL0YM005.CLENBRCT IS MODIFIED;/* If Carton Nbr has been modified*/
  CL0YW01.CLPCRTNB = KL0YM005.CLENBRCT;
  if (CL0YW01.CLPCRTNB-CHAR1 == " ")
    CL0YW01.CLPCRTNB-CHAR1 = "0";
  end
  if (CL0YW01.CLPCRTNB-CHAR2 == " ")
    CL0YW01.CLPCRTNB-CHAR2 = "0";
  end
  if (CL0YW01.CLPCRTNB-CHAR3 == " ")
    CL0YW01.CLPCRTNB-CHAR3 = "0";
  end
       /* check if Carton Number is Numeric*/
  if ((CL0YW01.CLPCRTNB-CHAR1 >= "0" && 
  CL0YW01.CLPCRTNB-CHAR1 <= "9") && 
  (CL0YW01.CLPCRTNB-CHAR2 >= "0" && 
  CL0YW01.CLPCRTNB-CHAR2 <= "9") && 
  (CL0YW01.CLPCRTNB-CHAR3 >= "0" && 
  CL0YW01.CLPCRTNB-CHAR3 <= "9"))
           /* okay*/
  else
    converseLib.validationFailed(787); /* Carton Number must be Numeric*/
    CLXREC.CLXERRF = "Y";
    set KL0YM005.CLENBRCT cursor, modified, bold;
  end

  if (CL0YW01.CLPCRTNB == "000")
    KL0YM005.CLENBRCT = " ";
  else
    KL0YM005.CLENBRCT = CL0YW01.CLPCRTNB;
  end
   /* END;*/

   /* ============================================================*/
   /* if warning flag = n and no errors on the screen and quantities*/
   /* have changed then do the qty edits*/

  if (CL0YW01.CL0YWWRN == "N") /* no warnings on from above*/
    if (CLXREC.CLXERRF == "N")
      KL0YS-EDIT-QTY();
    end
  end


   /* ============================================================*/
   /* added this so if any errors no updating*/
  if (CLXREC.CLXERRF == "Y")
    CL0YW01.CL0YWWRN = "N"; /* warning flag off*/
    return; /* if input errors - do not update*/
  end


   /* ================================================================*/
   /* =****** now to update clprec - defective items table **********=*/
   /* ================================================================*/
   /* at this point user has hit enter and wants to update clprec*/
   /* in some manner*/

   /* init save areas*/

  CL0YW01.CL0YWHQ1 = 0;
  CL0YW01.CL0YWHQ2 = 0;
  CL0YW01.CL0YWHPC = 0;
  CL0YW01.CL0YWHNC = 0;
  CL0YW01.CL0YWRTF = "Y"; /* rebuild table for map 001*/

   /* must add cl2 here to insure insp# for clprec upd*/
  KL0YS49(); /* add cl2rec if needed (MSH)*/
                                  /* (return inspection table-cl2rec)*/
  if (CLXREC.CLXERRF == "Y") /* had problems*/
    return;
  end

  if (CL0YW03.CL0YWYD1[CL0YWDX8] == " " /* no old clprec 1 or 2*/
   && CL0YW03.YDRCD[CL0YWDX8] == " ")   /* no old clprec 1 or 2*/
    KL0YS22(); /* add new clprec 1 & 2*/
  else
    KL0YS20(); /* delete old clprec 1*/
    if (CL0YW01.CL0YWDCT > 0) /* deadlock on delete*/
      return;
    end
    if (CL0YW03.CL0YWYD2[CL0YWDX8] == " ") /* no old clprec 2*/
       /* next sentence*/
    else
      KL0YS21(); /* delete old clprec 2*/
    end
    KL0YS22(); /* add new clprec 1 & 2*/
  end

  if (CLXREC.CLXERRF == "Y")
    return;
  end

  if (CL0YW01.CL0YWCOM == "Y")
    CL0YW01.CL0YWCOM = "N"; /* reset flag*/
    if (KL0YM005.CLGCOMNT != " ")
      KL0YS35(); /* update related clgrec*/
    end
  end
  KL0YS23(); /* update related clorec*/
   /* do not update clarec qty and val 10-3-88*/

  KL0YS39(); /* update comment indicator in clarec*/

  CL0YW01.KL0YW-PF12FL = "N"; /* reset pf12 flag so can use enter*/

end // end KL0Y220

// Verify Bar Code
Function KL0Y221()
   /* ***************************************/
   /* Verify Bar Code, then derive related data and move to map fields*/
   /* ***************************************/

  CLXREC.CLXCPROC = "KL0Y221";

  set VBARCD01 empty;

  VBARCD01.PC-BAR-CD-SEQ-NBR = KL0YM005.PC-BAR-CD-SEQ-NBR;
  CL0YW01.PC-BAR-CD-SEQ-NBR = KL0YM005.PC-BAR-CD-SEQ-NBR;

  KL0YS-VBARCD01-S(); /* Select Unique DPRODC.VBARCD01*/

  if (SQLCA.VAGen_SQLCODE != 0)
   /* SET KL0YM005 CLEAR;*/
   /* MOVE CL0YW01.PC-BAR-CD-SEQ-NBR TO KL0YM005.PC-BAR-CD-SEQ-NBR;*/
   /* MOVE CL0YW01.CLPCRTNB TO KL0YM005.CLENBRCT;*/
   /* MOVE 'Y' TO CLXREC.CLXBLDSC;*/
   /* ***commented above 4 lines, then inserted next 9 lines*********/
    KL0YM005.SY1STNBR = " ";
    KL0YM005.SY2CLRID = " ";
    KL0YM005.XDMCD = " ";
    KL0YM005.XUMCD = " ";
    KL0YM005.XQACD = " ";
    KL0YM005.SY-SZ-ID-DESC = " ";
    KL0YM005.CLPFTYPO = " ";
    KL0YM005.FY1FCTYC = " ";
    KL0YM005.CL0YMDC1 = " ";
    KL0YM005.CL0YMDQ1 = 1;
    KL0YM005.CL0YMDC2 = " ";
    KL0YM005.CL0YMDQ2 = 0;
    KL0YM005.CL0YMCRQ = 0;
    KL0YM005.CL0YMNCC = " ";
    KL0YM005.CL0YMNCQ = 0;
    KL0YM005.CLGCOMNT = " ";
   /* ****/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(786); /* Invalid Bar Code*/
    set KL0YM005.PC-BAR-CD-SEQ-NBR cursor, bold;
    set KL0YM005.PC-BAR-CD-SEQ-NBR underline;
    return;
  end

  KL0YM005.SY1STNBR = VBARCD01.SY1STNBR;
  KL0YM005.SY2CLRID = VBARCD01.SY2CLRID;
  KL0YM005.XDMCD = VBARCD01.XDMCD;
  CL0YW01.KL0YW-PO-TEST-NUM-CYMM = VBARCD01.PC3POIDT;
  KL0YM005.CLPFTYPO = CL0YW01.KL0YW-PO-TEST-CHA-YMM;
  KL0YM005.FY1FCTYC = VBARCD01.FY1FCTYC;

   /* Translate the Size Id into the Size Id Description*/

  set SYPREC empty;

  SYPREC.SYPFC = "IE";
  SYPREC.SY5SZID[1] = VBARCD01.SY5SZID;
  SYPREC.SYPCMPSW = "C";
  SYPREC.XGPCD = KL0YM005.XGPCD;
  SYPREC.SY1STNBR = VBARCD01.SY1STNBR;
  SYPREC.SY2CLRID = VBARCD01.SY2CLRID;
  SYPREC.XDMCD = VBARCD01.XDMCD;
  SYPREC.XQACD = "**";

  KL0YS-GET-SIZ-DESC();

  if (SYPREC.SYPRC == 10)
    converseLib.validationFailed(338); /* Not on database*/
    set KL0YM005.SY-SZ-ID-DESC bold, cursor;
    set KL0YM005.SY-SZ-ID-DESC underline;
    return;
  end

  if (SYPREC.SYPRC == 12)
    converseLib.validationFailed(763); /* Bad Size Description*/
    set KL0YM005.SY-SZ-ID-DESC bold, cursor;
    set KL0YM005.SY-SZ-ID-DESC underline;
    return;
  end

  KL0YM005.SY-SZ-ID-DESC = SYPREC.SY4IDDSC;
end // end KL0Y221

// determine next action
Function KL0Y230()
   /* ***************************************/
   /* determine next action*/
   /* ***************************************/
   /* ************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* ----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                           **/
   /* ----------------------------------------------------------**/
   /* 06-15-93  GDECKE  ALLOW APPAREL PO AND FACTORY ENTRY.   **/
   /* 06-03-94  sgorga  Replace duty cd (yddcd) with size.    **/
   /* 05-14-97  HMACAL  Added check for default value when    **/
   /* user wants to leave screen            **/
   /* 06-19-97  HMACAL  Added PF24 key check                  **/
   /* 04-19-99 GDECKE  CHANGED DEF CODE DEFAULT FROM 999 TO SPACES.*/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0Y230";

   /* from Kl0z*/
  if (KL0YM005 is modified)
     /* next sentence*/
  else
    if (CLWREC.CLWYZSWT == "Z")
      COMMAREA.CATOAP = "KL0Z";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    end
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12) /* added 07-27-92*/
    if (CL0YW01.CL0YWCLZ == "Y")
      KL0YS43(); /* set up passing data for cl0z*/
      COMMAREA.CATOAP = "KL0Z";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    else
      if (KL0YM005 is modified
       || converseVar.eventKey is pf12) /* added 07-27-92*/
        if (KL0YM005.SY-SZ-ID-DESC == " " /* user wants out*/
         && KL0YM005.CLPFTYPO == " "      
         && KL0YM005.FY1FCTYC == " "      
         && (KL0YM005.CLENBRCT == CL0YW01.CLPCRTNB
         || KL0YM005.CLENBRCT == " ")     
         && (KL0YM005.CL0YMDC1 == "   "   
         || KL0YM005.CL0YMDC1 == " ")     
         && (KL0YM005.CL0YMDQ1 == 1       
         || KL0YM005.CL0YMDQ1 == 0)       
         && KL0YM005.CL0YMDC2 == " "      
         && KL0YM005.CL0YMDQ2 == 0        
         && KL0YM005.CL0YMNCC == " "      
         && KL0YM005.CL0YMNCQ == 0        
         && KL0YM005.CLGCOMNT == " ")    
          if (CLWREC.CLWYZSWT == "Z")
            COMMAREA.CATOAP = "KL0Z";
            CLXREC.CLXEOAF = "Y";
            CLXREC.CLXEOSF = "Y";
            XPCL002();
          else
            CL0YW01.CL0YWCLM = 0; /* set to clear out saved header info*/
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXCSCRN = "KL0YM001";
            return;
          end
        else
          return;
        end
      else
        if (CL0YW01.CL0YWDX8 == CL0YW01.CL0YWDX7 /* end of array*/
         || CL0YW01.CL0YWDX7 == 0)               /* in add mode*/
          CL0YW01.CL0YWCLM = 0; /* set to clear out saved header info*/
          CLXREC.CLXEOSF = "Y";
          CL0YW01.KL0YW-INPUT-MODE = "K";
          CLXREC.CLXCSCRN = "KL0YM001";
          return;
        else
          KL0YS19();
          return;
        end
      end
    end
  end


  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end


  if (converseVar.eventKey is pf3)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf7)
    CL0YW01.CL0YWDX8 = CL0YWDX8 - 2;
    if (CL0YW01.CL0YWDX8 < 0)
      CL0YW01.CL0YWDX8 = 0;
      converseLib.validationFailed(007);
    end
    KL0YS19();
    return;
  end

  if (converseVar.eventKey is pf8)
    if (CL0YW01.CL0YWDX8 == CL0YW01.CL0YWDX7) /* end of array*/
      converseLib.validationFailed(003);
    else
      KL0YS19();
    end
    return;
  end

  if (converseVar.eventKey is pf9)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf10)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0W";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXCSCRN = "KL0YM010";
    return;
  end

  if (converseVar.eventKey is pf15)
    CL0YW01.CL0YWCLM = 0; /* set to clear out saved header info*/
    CLXREC.CLXEOSF = "Y";
    CL0YW01.KL0YW-INPUT-MODE = "K"; /* Keyboard Mode*/
    CLXREC.CLXCSCRN = "KL0YM001";
    return;
  end

  if (converseVar.eventKey is pf20)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0G";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf21)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0Z";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf24)
    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      CL0YW01.KL0YW-INPUT-MODE = "K"; /* Switch to Keyboard Mode*/
    else /* Else, in Keyboard Mode*/
      CL0YW01.KL0YW-INPUT-MODE = "S"; /* Switch to Scan Mode*/
    end

    CL0YW01.CLPCRTNB = KL0YM005.CLENBRCT; /* Save Carton Nbr*/
    CL0YW01.CL0YMSTY = KL0YM005.CL0YMSTY; /* Previous Style*/
    CL0YW01.CL0YMCLR = KL0YM005.CL0YMCLR; /* Previous Color*/
    CL0YW01.CL0YMDIM = KL0YM005.CL0YMDIM; /* Previous Dimension*/

    KL0YS56(); /* Set field attributes depending on Input Mode*/

    return;
  end

end // end KL0Y230

// process screen cl0%m010
Function KL0Y300()
   /* ************************************************************/
   /* *    process screen cl0ym010                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Y300";

  if (CLXREC.CLXBLDSC == "Y")
    KL0Y301();
    CLXREC.CLXBLDSC = "N";
  end


   /* ***********************************************************/
  converse KL0YM010 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";

  KL0Y310(); /* edit pfkeys*/

  if (CLXREC.CLXERRF == "N"
   && KL0YM010 is modified)
    KL0Y320(); /* edit entries*/
  end

  if (CLXREC.CLXERRF == "N")
    KL0Y330(); /* handle enter key*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0Y300

// build screen
Function KL0Y301()
   /* **************************************/
   /* build screen*/
   /* *** Maintenance Log **************************************/
   /* 03-11-94  BCourt  Rename CLFREC.xxxaddrn to xxx-addrn. **/
   /* NOTE do NOT rename map addr names from 30 to 38 chr**/
   /* **********************************************************/

  CLXREC.CLXCPROC = "CL0Y301";

  set KL0YM010 initial;
  KL0YM010.XXXCURDT = VGVar.currentShortGregorianDate;

  if (CL0YW01.CL0YWUDF == "N") /* if no upd allowed*/
    KL0YS48(); /* protect screen*/
  end

  if (CL0YW01.CL0YWCLM == 0) /* header info not in ws rec*/
    KL0YS12(); /* create header info and move to ws*/
  end

  if (CL0YW01.CL0YWINS == -1) /* all inspections*/
    KL0YM010.CL0YMINB = 0;
    KL0YM010.CL0YWUSR = " ";
    KL0YM010.CL0YMIDT = " ";
  else
    KL0YM010.CL0YMINB = CL0YW01.CL0YWINS;
    KL0YM010.CL0YWUSR = CL0YW01.CL0YWUSR;
    KL0YM010.CL0YMIDT = CL0YW01.CL0YWDTE;
  end

  KL0YM010.CLACLMNB = CL0YW01.CL0YWCLM;
  KL0YM010.KUCCOID = CL0YW01.KUCCOID;
  KL0YM010.KUMSTRID = CL0YW01.KUMSTRID;
  KL0YM010.XNXCD = CL0YW01.XNXCD;
  KL0YM010.KUCCONM = CL0YW01.KUCCONM;
  KL0YM010.CLHSEQNB = CL0YW01.CL0YWSEQ;
  KL0YM010.CL0YWATQ = CL0YW01.CL0YWATQ;
  KL0YM010.CLODMAMT = CL0YW01.CLODMAMT;
  KL0YM010.XGPCD = CL0YW01.XGPCD;
  KL0YM010.YCTCD = CL0YW01.YCTCD;
  KL0YM010.XGPABRV = CL0YW01.XGPABRV;
  KL0YM010.YCTABRV = CL0YW01.YCTABRV;
  KL0YM010.CLOFGAQ = CL0YW01.CLOFGAQ;
  KL0YM010.CLOFGAAM = CL0YW01.CLOFGAAM;
  KL0YM010.XWHCD = CL0YW01.XWHCD;
  KL0YM010.XWHABRV = CL0YW01.XWHABRV;
  KL0YM010.CL0YMIST = CL0YW01.YCICD;
  KL0YM010.CL0YMISD = CL0YW01.YCIDESC;
  KL0YM010.CLJNCRFL = CL0YW01.CLJNCRFL;

   /* fill in screen detail*/

  KL0YS81(); /* get return to address*/
  KL0YM010.XXXADNM = CLFREC.CLFADNM;
  KL0YM010.XXXADDR1 = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
  KL0YM010.XXXADDR2 = CLFREC.XXX-ADDR2; /* to db2 names*/
  KL0YM010.XXXADDR3 = CLFREC.XXX-ADDR3;
  KL0YM010.XXXCITY = CLFREC.XXXCITY;
  KL0YM010.XSTCD = CLFREC.XSTCD;
  KL0YM010.XXXZIP = CLFREC.XXXZIP;
  KL0YM010.XCTCD = CLFREC.XCTCD;

  if (KL0YM010.XCTCD in XCTTBL.XCTCD)
    KL0YM010.XCTNM = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end

   /* set insp cmplt and rls stck*/
  KL0YM010.CL0YMNFD = " "; /* clear 'complete' msg*/
  if (CL2REC.CL2ISXDT == 0  
   || CL2REC.YCICD == "IIP" /* temp until all clms run ok*/
   || CL2REC.YCICD == "RSO") /* temp until all clms run ok*/
    KL0YM010.CL0YMICF = "N";
  else
    KL0YM010.CL0YMICF = "Y";
    KL0YM010.CL0YMNFD = "INSPECTION COMPLETE";
    set KL0YM010.CL0YMICF skip;
  end
  if (CL0YW01.YCICD == "IIP") /* new insp reqstd, or insp not found*/
    KL0YM010.CL0YMICF = "N";
    KL0YM010.CL0YMNFD = " "; /* clear complete msg*/
  end

   /* IF CL2REC.YCICD = 'IIP';*/
    /* MOVE 'N' TO CL0YM010.CL0YMICF;*/
    /* MOVE 'N' TO CL0YM010.CL0YMRSF;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RSO';*/
    /* MOVE 'N' TO CL0YM010.CL0YMICF;*/
    /* MOVE 'Y' TO CL0YM010.CL0YMRSF;*/
    /* SET CL0YM010.CL0YMRSF AUTOSKIP;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RMO';*/
    /* MOVE 'Y' TO CL0YM010.CL0YMICF;*/
    /* MOVE 'INSPECTION COMPLETE' TO CL0YM010.CL0YMNFD*/
    /* SET CL0YM010.CL0YMICF AUTOSKIP;*/
    /* MOVE 'N' TO CL0YM010.CL0YMRSF;*/
   /* END ;*/
   /* IF CL2REC.YCICD = 'RMS';*/
    /* OR CL2REC.YCICD = 'CMP';*/
    /* MOVE 'Y' TO CL0YM010.CL0YMICF;*/
    /* MOVE 'INSPECTION COMPLETE' TO CL0YM010.CL0YMNFD*/
    /* SET CL0YM010.CL0YMICF AUTOSKIP;*/
    /* MOVE 'Y' TO CL0YM010.CL0YMRSF;*/
    /* SET CL0YM010.CL0YMRSF AUTOSKIP;*/
   /* END ;*/
  if (CL2REC.YCICD != "CMP")
    if (CL2REC.CL2ISXDT == CL0YW01.CL0YWTDT)
      set KL0YM010.CL0YMICF initialAttributes;
        /* SET CL0YM010.CL0YMRSF DEFINED;*/
    end
  end

   /* get rtn auth comments*/
  CLGREC.CLACLMNB = CL0YW01.CL0YWCLM;
  CLGREC.CLHSEQNB = CL0YW01.CL0YWSEQ;
  CLGREC.CL2ISNBR = CL0YW01.CL0YWINS;
  CLGREC.CLGCMTYP = "R";
  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* start cursor for comnts*/
  CL0YW01.CL0YWDX6 = 0;
  while (CL0YWDX6 < 4
   && SQLCA.VAGen_SQLCODE == 0)
    call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0YW01.CL0YWDX6 = CL0YW01.CL0YWDX6 + 1;
      KL0YM010.CLGCOMNT[CL0YWDX6] = CLGREC.CLGCOMNT;
    end
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

end // end KL0Y301

// edit pfkeys
Function KL0Y310()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Y310";

  if (KL0YM010.CATOAP != " " /* if any fastpath data entered*/
   || KL0YM010.CAITEM != " ")
    COMMAREA.CATOAP = KL0YM010.CATOAP;
    COMMAREA.CAITEM = KL0YM010.CAITEM;
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
     /* if exit fails*/
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf21)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
end // end KL0Y310

// edit entries & update
Function KL0Y320()
   /* **************************************/
   /* edit entries*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Y320";

   /* edit fields*/

  set KL0YM010.XXXADNM cursor;

   /* edit insp complete flag*/
  if (KL0YM010.CL0YMICF is modified)
    set KL0YM010.CL0YMICF normal;
    if (KL0YM010.CL0YMICF == "Y")
      if (CL0YW02.CL0YW2CQ[CL0YWDX1] == 0 /* total cr qty = zero*/
       && CL0YW02.CLNNCRQ[CL0YWDX1] == 0) /* and noncr = zero*/
        converseLib.validationFailed(574); /* no qty inspected - can't complete*/
        set KL0YM010.CL0YMICF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      if (KL0YM010.CL0YMICF != "N")
        converseLib.validationFailed(504);
        set KL0YM010.CL0YMICF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    end
  end

   /* edit release stock flag*/
   /* IF CL0YM010.CL0YMRSF IS MODIFIED;*/
    /* IF CL0YM010.CL0YMRSF NE 'Y';*/
      /* AND CL0YM010.CL0YMRSF NE 'N';*/
      /* MOVE 497 TO EZEMNO;*/
      /* SET CL0YM010.CL0YMRSF CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* ELSE ;*/
      /* SET CL0YM010.CL0YMRSF DEFINED;*/
    /* END ;*/
   /* END ;*/

  if (KL0YM010.XXXADDR1 is modified
   || KL0YM010.XXXADDR2 is modified
   || KL0YM010.XXXADDR3 is modified
   || KL0YM010.XXXCITY is modified
   || KL0YM010.XSTCD is modified
   || KL0YM010.XXXZIP is modified
   || KL0YM010.XCTCD is modified)
    KL0YS29(); /* edit address fields*/
  end

  if (CLXREC.CLXERRF == "Y")
    return; /* if edit errors do not update*/
  end

  if (KL0YM010.CL0YMICF is modified) /* inspection complete*/
    CL0YW01.CL0YWICF = KL0YM010.CL0YMICF;
    CL0YW01.CL0YWRSF = KL0YM010.CL0YMRSF;
    KL0YS28();
  end

   /* IF CL0YM010.CL0YMRSF IS MODIFIED       ; release stock*/
    /* MOVE CL0YM010.CL0YMICF TO CL0YW01.CL0YWICF;*/
    /* MOVE CL0YM010.CL0YMRSF TO CL0YW01.CL0YWRSF;*/
    /* CL0YS31;*/
   /* END ;*/

  if (KL0YM010.CL0YMICF is modified) /* inspection complete*/
     /* OR CL0YM010.CL0YMRSF IS MODIFIED     ; release stock*/
    call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes}; /* update cl2rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0YS01(); /* check security mode*/
      KL0YM010.CL0YMIST = CL2REC.YCICD; /* move to screen*/
      if (CL2REC.YCICD == "CMP"
       || CL2REC.YCICD == "RMS"
       || CL2REC.YCICD == "RMO")
        KL0YM010.CL0YMNFD = "INSPECTION COMPLETE";
      else
        KL0YM010.CL0YMNFD = " ";
      end
      CL0YW01.YCICD = CL2REC.YCICD; /* save to ws*/
      KL0YM010.CL0YMISD = " "; /* blank desc*/
      if (CL2REC.YCICD in YCITBL.YCICD) /* and look it up*/
        KL0YM010.CL0YMISD = YCITBL.YCISDESC[sysVar.arrayIndex];
      end
      CL0YW01.YCIDESC = KL0YM010.CL0YMISD; /* save to ws*/
    else
      TA1REC.TA1LOCAT[2] = "CL0Y320"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (KL0YM010.XXXADNM is modified
   || KL0YM010.XXXADDR1 is modified
   || KL0YM010.XXXADDR2 is modified
   || KL0YM010.XXXADDR3 is modified
   || KL0YM010.XXXCITY is modified
   || KL0YM010.XSTCD is modified
   || KL0YM010.XXXZIP is modified
   || KL0YM010.XCTCD is modified)
    KL0YS30();
  end
end // end KL0Y320

// determine next action
Function KL0Y330()
   /* **************************************/
   /* determine next action*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Y330";

  if (converseVar.eventKey is enter)
    if (KL0YM010 is modified)
      return;
    else
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXCSCRN = "KL0YM001";
      return;
    end
  end

  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end


  if (converseVar.eventKey is pf3)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf9)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXCSCRN = "KL0YM001";
    return;
  end

  if (converseVar.eventKey is pf21)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0Z";
    XPCL002();
    return;
  end
end // end KL0Y330

// Close C1 on VDEFGR01
Function KL0YS-C1-VDEFGR01()
   /* *****************************************************/
   /* Close cursor C1 on VNESCO01*/
   /* *****************************************************/

  CLXREC.CLXCPROC = "KL0YS-C1-VDEFGR01";

   /* close cursor on - VDEFGR01*/

  call "VDEFGR01" ("C1", SQLCA, VDEFGR01) {isNoRefresh = yes, isExternal = yes}; /* close C1 on VDEFGR*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0YS-C1-VDEFGR01";
    TA1REC.TA1LOCAT[4] = "VDEFGR01";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFGR01";
    TA1REC.TA1TBLKE = CL0YW01.CL0YWUSR;
    XPCL010(); /* Error Diagnostic routine*/
  end

end // end KL0YS-C1-VDEFGR01

// check auth/rtn qtys
Function KL0YS-EDIT-QTY()
   /* ***************************************************************/
   /* KL0YS-edit-qty*/
   /* compare the returned-inspected quantities to '1'; if greater than*/
   /* 1, display a message with pf12 to accept/edit/update*/
   /* 09-28-92 twatso expand the place for error message 741*/
   /* so the right field is lit up with correct message*/
   /* ***************************************************************/

  CLXREC.CLXCPROC = "EDT-QTY";

  CL0YW01.KL0YW-PINSP = 0; /* set the product total to zero*/
  CL0YW01.KL0YW-TINSPH = 0; /* set the total hold to zero*/

  CL0YW01.KL0YW-PINSP = CL0YW01.KL0YW-PINSP + KL0YM005.CL0YMDQ1;
  CL0YW01.KL0YW-PINSP = CL0YW01.KL0YW-PINSP + KL0YM005.CL0YMDQ2;
  CL0YW01.KL0YW-PINSP = CL0YW01.KL0YW-PINSP + KL0YM005.CL0YMNCQ;

  CL0YW01.KL0YW-TINSPH = CL0YW01.KL0YW-TINSP;
  CL0YW01.KL0YW-TINSPH = CL0YW01.KL0YW-TINSPH - KL0YM005.CL0YMCRQ;
  CL0YW01.KL0YW-TINSPH = CL0YW01.KL0YW-TINSPH + CL0YW01.KL0YW-PINSP;

  if (converseVar.eventKey not pf12)
    if (KL0YM005.CL0YMDQ1 is modified
     || KL0YM005.CL0YMDQ2 is modified
     || KL0YM005.CL0YMNCQ is modified
     || CL0YW01.KL0YW-PINSP > 1)
      if (KL0YM005.CL0YMDQ1 > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMDQ1 cursor, bold;
      end
      if (KL0YM005.CL0YMDQ2 > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMDQ2 cursor, bold;
      end
      if (KL0YM005.CL0YMNCQ > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMNCQ cursor, bold;
      end
      if (CL0YW01.KL0YW-PINSP > 1
       && KL0YM005.CL0YMDQ1 > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMDQ1 cursor, bold;
      end
      if (CL0YW01.KL0YW-PINSP > 1
       && KL0YM005.CL0YMDQ2 > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMDQ2 cursor, bold;
      end
      if (CL0YW01.KL0YW-PINSP > 1
       && KL0YM005.CL0YMNCQ > 1)
        CLXREC.CLXERRF = "Y";
        CL0YW01.KL0YW-PF12FL = "Y"; /* set pf12 flag on*/
        converseLib.validationFailed(741); /* change to 'qty > 1,use pf12'*/
        set KL0YM005 alarm;
        set KL0YM005.CL0YMNCQ cursor, bold;
      end
    end
  end

  KL0YM005.CL0YMCRQ = CL0YW01.KL0YW-PINSP;
  KL0YM001.KL0YM-TINSP = CL0YW01.KL0YW-TINSPH; /* move to map field*/
  KL0YM005.KL0YM-TINSP = CL0YW01.KL0YW-TINSPH; /* move to map field*/

  CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSPH; /* move to map field*/

  if (converseVar.eventKey is enter
   && CL0YW01.KL0YW-PF12FL == "Y"
   && converseVar.validationMsgNum == 0)
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(740); /* change to 'qty > 1,use pf12'*/
    set KL0YM005 alarm;
    set KL0YM005.CL0YMDQ1 cursor;
  end


end // end KL0YS-EDIT-QTY

// Call sy1120 to edit size id.
Function KL0YS-EDIT-SIZE()
   /* *************************************************************/
   /* This module uses common subroutine SY1120.                **/
   /* 1) Process KL0Y220 uses this module to edit size desc.    **/
   /* 2) AND to get the matching size id for the clprec (dclaim.**/
   /* vdefit01).  (-S22 moves the held size id to clprec.)   **/
   /* **/
   /* Check the SYPREC.SYPRC return cd - NOT the SQLCODE -      **/
   /* to determine the success of the call.                     **/
   /* **/
   /* MAINTENANCE                                               **/
   /* 06/03/94  sgorga  created.                                **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "EDIT-SIZ";

  set SYPREC empty;
  SYPREC.SY1STNBR = KL0YM005.SY1STNBR; /* moving key:  style*/
  SYPREC.SY2CLRID = KL0YM005.SY2CLRID; /* :  color*/
  SYPREC.XDMCD = KL0YM005.XDMCD; /* :  dimension*/
  SYPREC.XGPCD = KL0YM005.XGPCD; /* :  GPC*/
  SYPREC.XQACD = "**"; /* default quality code*/
  SYPREC.SYPFC = "PC"; /* external to internal translation*/
  SYPREC.SYPCMPSW = "C"; /* indicates compressed format*/

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  else
    if (SYPREC.SYPRC == 2) /* size not valid for the product*/
      return;
    else
      if (SYPREC.SYPRC == 9) /* database busy (-911)*/
        return;
      else
        TA1REC.TA1PGMNM = "KL0Y    ";
        TA1REC.TA1MAP = "KL0YM005";
        TA1REC.TA1LOCAT[1] = "BAD RTN=";
        TA1REC.TA1LOCAT[2] = SYPREC.SYPRC; /* return cd from sy1120*/
        TA1REC.TA1LOCAT[3] = "KL0YS-ED";
        TA1REC.TA1LOCAT[4] = "IT-SIZE.";
        TA1REC.TA1TBLKE = SYPREC.SYPKEY; /* show product & gpc#*/
        TA1REC.TA1DBTBL = "CALL TO SY1120";
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end
    end
  end

end // end KL0YS-EDIT-SIZE

// Select VINSPH01 (SB) option
Function KL0YS-EDT-INSP-HLD()
   /* ****************************************************************/
   /* *  KL0YS-EDT-INSP-HLD:                                        **/
   /* *     GET A COUNT OF THE INSPECTOR HOLD LINES THAT MATCH      **/
   /* *     THE PRODUCT BEING INSPECTED.                            **/
   /* *     COPIED FROM FQ0IS26.                                    **/
   /* ****************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G          **/
   /* --------------------------------------------------------------**/
   /* * CHANGE#   DATE    PGRM    REASON                            **/
   /* --------------------------------------------------------------**/
   /* * #CL0    05-07-93 GDECKE   CREATE STATEMENT GROUP            **/
   /* * #CL0    06-11-93 GDECKE   CHANGE PO TO CHARACTER FIELD-MAP 5**/
   /* * #CL0    09-28-93 GDECKE   handle character season code in   **/
   /* *                           po input field.                   **/
   /* *         01-27-98 hbaska   move whcd also to key field while **/
   /* *                           searchig in VINSPH01              **/
   /* *         06-17-00 rgomat   populate the prod-cat code ,season**/
   /* *                           code and season year in vinsph02  **/
   /* *                           from dprod.vcolor02 table         **/
   /* ****************************************************************/
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  CLXREC.CLXCPROC = "KL0YS-EDT-INSP-HLD"; /* Mod id*/

   /* TCS change begin*/
  set SYCREC empty; /* Product table*/
  SYCREC.XGPCD = KL0YM005.XGPCD; /* GPC*/
  SYCREC.SY1STNBR = KL0YM005.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = KL0YM005.SY2CLRID; /* color*/
  SYCREC.XDMCD = KL0YM005.XDMCD; /* dim*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* move in key*/
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCOLOR02";
    XPCL010();
  end

   /* tcs change end*/
  set VINSPH02 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  CL0YW05.CL0YW-FQYFUNC = "SC";
  CL0YW05.CL0YW-FQYCNT1 = 0;

  VINSPH02.XGPCD = KL0YM005.XGPCD; /* GPC*/
   /* tcs change begin*/
  VINSPH02.XPCCD = SYCREC.XPCCD; /* Prod cat code*/
   /* tcs change begin*/
  VINSPH02.XWHCD = KL0YM005.XWHCD; /* WareHouseCode*/
  VINSPH02.SY1STNBR = KL0YM005.SY1STNBR; /* style*/
  VINSPH02.SY2CLRID = KL0YM005.SY2CLRID; /* color*/
  VINSPH02.XDMCD = KL0YM005.XDMCD; /* dim*/
  VINSPH02.YDFCD = KL0YM005.CL0YMDC1; /* defect code*/
  VINSPH02.FY1FCTYC = KL0YM005.FY1FCTYC; /* factory*/
   /* tcs change begin*/
  VINSPH02.FQ0XSECD = SYCREC.XSECD; /* Season code*/
  VINSPH02.FQ0XSEYR = SYCREC.XSNYR; /* Season year*/
   /* tcs change end*/

  if (KL0YM005.CLPFTYPO == " ")
    VINSPH02.PC-PO-ID-MO-RNG = 0;
  else
    CL0YW01.CL0YW-PO-ID-6-CHAR = KL0YM005.CLPFTYPO;
    if (CL0YW01.CL0YW-PO-ID-Y1 < "0"
     || CL0YW01.CL0YW-PO-ID-Y1 > "9"
     || CL0YW01.CL0YW-PO-ID-Y2 < "0"
     || CL0YW01.CL0YW-PO-ID-Y2 > "9"
     || CL0YW01.CL0YW-PO-ID-M1 < "0"
     || CL0YW01.CL0YW-PO-ID-M1 > "9"
     || CL0YW01.CL0YW-PO-ID-M2 < "0"
     || CL0YW01.CL0YW-PO-ID-M2 > "9"
     || CL0YW01.CL0YW-PO-ID-R1 < "0"
     || CL0YW01.CL0YW-PO-ID-R1 > "9"
     || CL0YW01.CL0YW-PO-ID-R2 < "0"
     || CL0YW01.CL0YW-PO-ID-R2 > "9")
      VINSPH02.PC-PO-ID-MO-RNG = 0;
    else
      CL0YW01.FQWPOIDN6 = CL0YW01.FQWPCPOID;

      /* ===== Y2K OUT BEGIN ======*/

       /* MOVE 19 TO CL0YW01.FQWPOIDN3;*/

      /* ===== Y2K OUT END ========*/


      /* ===== Y2K IN BEGIN ======*/

      if (CL0YW01.FQWPOIDYR < 60)
        CL0YW01.FQWPOIDN3 = 20;
      else
        CL0YW01.FQWPOIDN3 = 19;
      end

      /* ===== Y2K IN END ========*/

      CL0YW01.PC-PO-ID-MO-RNG = CL0YW01.FQWPOIDN9;
      VINSPH02.PC-PO-ID-MO-RNG = CL0YW01.PC-PO-ID-MO-RNG;
    end
  end
   /* the following 3 lines are for testing only*/
   /* MOVE 2 TO CL0YW05.CL0YW-FQYCNT1;*/
   /* MOVE O TO SQLCA.SQLCODE;*/
   /* EZERTN;*/

   /* ------------------------------------------------------------*/
   /* Select VINSPH02 with 2nd unique option.*/
   /* ------------------------------------------------------------*/
  try
    call "VINSPH02" (CL0YW05, SQLCA, VINSPH02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* Null return*/
      return;
    end

    /* F SQLCA.SQLCODE EQ -305;       /* Null return*/
    /* MOVE 0 TO CL0YW05.FQYCNT1;     /* zero to count*/
    /* *EZERTN;*/
    /* ND;*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(2); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
   /* MOVE FQWREC.XXXMODID TO TA1REC.TA1PGMNO; /* Program number*/
  TA1REC.TA1DBASE = "DFQAUL"; /* Data base name*/
  TA1REC.TA1TBLVU = "VINSPH02"; /* Table view name*/
  TA1REC.TA1PGMAP = VINSPH02.VINSPH02-KEY; /* Pgm application*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KL0YS-EDT-INSP-HLD

// Fetch cursor 1 on VDEFGR01
Function KL0YS-F1-VDEFGR01()
   /* ***********************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y    L O G               ***/
   /* ***********************************************************************/
   /* *    DATE      PGMR       DESCRIPTION                               ***/
   /* *  --------  --------   ------------------------------------------- ***/
   /* *  05-08-97  KSHAW      Created.                                    ***/
   /* ***********************************************************************/
   /* * Fetch cursor on VDEFGR01*/
   /* ***********************************************************************/

  CLXREC.CLXCPROC = "KL0YS-F1-VDEFGR01";

   /* Fetch cursor on - VDEFGR01*/

  call "VDEFGR01" ("F1", SQLCA, VDEFGR01) {isNoRefresh = yes, isExternal = yes}; /* fetch next VDEFGR01*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not found condtion*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0YS-F1-VDEFGR01";
    TA1REC.TA1LOCAT[4] = "VDEFGR01";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFGR01";
    TA1REC.TA1TBLKE = CL0YW01.CL0YWUSR;
    XPCL010(); /* Error Diagnostic routine*/
  end

end // end KL0YS-F1-VDEFGR01

// Call sy1120 to get size desc.
Function KL0YS-GET-SIZ-DESC()
   /* ************************************************************/
   /* This module uses common subroutine SY1120.               **/
   /* KL0YS19 calls this module to get the size desc matching  **/
   /* the size id from the clprec.                             **/
   /* **/
   /* Check the SYPREC.SYPRC return cd - NOT the SQLCODE -     **/
   /* to determine the success of the call.                    **/
   /* **/
   /* MAINTENANCE                                              **/
   /* 06/03/94  sgorga  created.                               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "GET-SIZ-";

   /* SET SYPREC EMPTY;*/
   /* MOVE CL0YW03.SY1STNBR(CL0YWDX8) TO SYPREC.SY1STNBR;/* move key:  style*/
   /* MOVE CL0YW03.SY2CLRID(CL0YWDX8) TO SYPREC.SY2CLRID;/* :  color*/
   /* MOVE CL0YW03.XDMCD(CL0YWDX8) TO SYPREC.XDMCD;      /* :  dimension*/
   /* MOVE CLPREC.XGPCD TO SYPREC.XGPCD;                 /* :  GPC*/
   /* MOVE '**' TO SYPREC.XQACD;/* default quality code*/
   /* MOVE 'PC' TO SYPREC.SYPFC;/* external to internal translation*/
   /* MOVE 'C' TO SYPREC.SYPCMPSW;/* indicates compressed format*/

  call "SY1120" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  else
    if (SYPREC.SYPRC == 9)
      return;
    else
      TA1REC.TA1PGMNM = "KL0Y    ";
      TA1REC.TA1MAP = "KL0YM005";
      TA1REC.TA1LOCAT[1] = "BAD RTN=";
      TA1REC.TA1LOCAT[2] = SYPREC.SYPRC; /* return cd from sy1120*/
      TA1REC.TA1LOCAT[3] = "KL0YS-GE";
      TA1REC.TA1LOCAT[4] = "T-SIZ-DE";
      TA1REC.TA1TBLKE = SYPREC.SYPKEY; /* show product & gpc#*/
      TA1REC.TA1DBTBL = "CALLED SY1120.";
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

end // end KL0YS-GET-SIZ-DESC

// GET PO SEASON & YEAR FRM TAG
Function KL0YS-PO-SEASON-YR()
   /* ************************ CL0YS78 ****************************/
       /* - This Process verifies the apparel season/buy-month*/
       /* entry on the inspection screen*/
   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G          **/
   /* ------------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                             **/
   /* ------------------------------------------------------------**/
   /* 05-06-93  GDECKE  ADD CALL TO GET APPAREL SEASON AND YEAR  **/
   /* FROM CODE ON TAG.                        **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0YS-PO-SEASON-YR"; /* current proc name*/


  set SQLCA empty;

  call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* dprodc.vpoitm01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CLPVLDFL = "Y"; /* valid po combo*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0YW01.CLPVLDFL = "N"; /* unverified PO combo*/
      converseLib.validationFailed(757);
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CLPFTYPO cursor, modified, bold; /* ERROR ON PO ID*/
    else
      TA1REC.TA1PGMNM = "KL0Y";
      TA1REC.TA1DBASE = "DPRODC   "; /* database*/
      TA1REC.TA1DBTBL = "VPOVFY01 "; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS-PO-SEASON-YR

// Declare/Open on VDEFGR01
Function KL0YS-S1-VDEFGR01()
  /* ************************************************************************/
  /* Open cursor on VDEFGR01*/
  /* ************************************************************************/

  CLXREC.CLXCPROC = "KL0YS-S1-VDEFGR01";

   /* Declare and Open Cursor ON VDEFGR01*/

  call "VDEFGR01" ("S1", SQLCA, VDEFGR01) {isNoRefresh = yes, isExternal = yes}; /* open cur on VDEFGR01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0YS-S1-VDEFGR01";
    TA1REC.TA1LOCAT[4] = "VDEFGR01";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFGR01";
    TA1REC.TA1TBLKE = CL0YW01.CL0YWUSR;
    XPCL010(); /* Error Diagnostic Routine*/
  end

end // end KL0YS-S1-VDEFGR01

// Select User's Group Name
Function KL0YS-SEL-USR-GRP()
   /* *************************************************************/
   /* M A I N T E N A N C E   H I S T O R Y   L O G           **/
   /* *************************************************************/
   /* DATE     PGMR    DESCRIPTION                            **/
   /* --------  ------   -------------------------------------- **/
   /* 04-23-97  KSHAW    Created.                               **/
   /* **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "SEL-USR"; /* set current proc name*/

    /* select user's group*/
  call "VUSRGR01" ("S ", SQLCA, VUSRGR01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0YS-SEL-USR-GRP"; /* location*/
    TA1REC.TA1LOCAT[4] = "KL0Y"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VUSRGR01"; /* table view*/
    TA1REC.TA1TBLKE = CL0YW01.CL0YWUSR; /* disp userid*/
    XPCL010(); /* error diagnosis routine*/
  end
end // end KL0YS-SEL-USR-GRP

// total the defective returns
Function KL0YS-TOTAL-DEF()
   /* *******************************************************************/
   /* total the defective returns for a claim - all inspections and*/
   /* sequence numbers for a claim.*/
   /* maintenance log*/
   /* 07-07-92 twatso  created*/


   /* *******************************************************************/

  CLXREC.CLXCPROC = "KL0YS-TOTAL-DEF";
  set SQLCA empty;
  set CLOREC empty;
  CLOREC.CLACLMNB = CLAREC.CLACLMNB;
  CLOREC.CLHSEQNB = -1; /* sequence number*/
  CLOREC.CL2ISNBR = -1; /* inspection number*/
  call "IO1340" ("S1", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};
  call "IO1340" ("N1", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes}; /* read next defhdr*/
  while (SQLCA.VAGen_SQLCODE == 0) /* add all to total inspected for later*/
    CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSP + CLOREC.CLOTDFQY;
    CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSP + CLOREC.CLMTNCRQ;
    CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSP + CLOREC.CLOTRCQY;
    call "IO1340" ("N1", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes}; /* read next defhdr*/
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    call "IO1340" ("C1", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor defhdr*/
  else
    TA1REC.TA1LOCAT[2] = "DEF-TOT"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1340"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFHD01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end
end // end KL0YS-TOTAL-DEF

// total all the rts headers
Function KL0YS-TOTAL-RTS()
   /* *******************************************************************/
   /* total the rts returns for a claim - all inspections and*/
   /* sequence numbers for a claim.*/
   /* *******************************************/
   /* maintenance log*/
   /* 07-07-92 twatso  created*/
   /* *******************************************************************/

  CLXREC.CLXCPROC = "KL0YS-TOTAL-RTS";
  set SQLCA empty;
  set CLMREC empty;
  CLMREC.CLACLMNB = CLAREC.CLACLMNB;
  CLMREC.CLHSEQNB = -1;
  CLMREC.CL2ISNBR = -1;
  call "IO1320" ("S1", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};
  call "IO1320" ("N1", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes}; /* read next rtshdr*/
  while (SQLCA.VAGen_SQLCODE == 0) /* add all to total inspected for later*/
    CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSP + CLMREC.CLMTRTSQ;
    CL0YW01.KL0YW-TINSP = CL0YW01.KL0YW-TINSP + CLMREC.CLMTNCRQ;
    call "IO1320" ("N1", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes}; /* read next rtshdr*/
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    call "IO1320" ("C1", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor defhdr*/
  else
    TA1REC.TA1LOCAT[2] = "RTS-TOT"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRTSHD01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end
end // end KL0YS-TOTAL-RTS

// check user auth to use cd
Function KL0YS-VAL-USR-AUTH()
   /* ***************************************************************/
   /* KL0YS-val-usr-auth*/
   /* this statement group validates if the inspector is allowed to*/
   /* use the entered defect code.*/
   /* the validation process is as follows:*/
   /* get inspector's associated group name.*/
   /* set authorized flag to 'n'*/
   /* a cursor is declaredfor all the defect codes for a given*/
   /* group name*/
   /* fetch until the authoized flag is y or sqlcode = 100*/
   /* after each fetch the row's cl-def-grp-fl is evaluated.*/
   /* if the cl-def-grp-fl is = to 'y'*/
   /* then all that needs to match is the first*/
   /* position of the defect code with the first*/
   /* position of the fetched  defective coded*/
   /* if a match is made set authorized flag to y*/
   /* else*/
   /* both defective code most match entirely.*/
   /* if a match is made set authorized flag to y*/
   /* if authorized flag = 'n'        in calling grp*/
   /* error*/
   /* otherwise continue processing*/
   /* **********************************************************************/
   /* **       M A I N T E N A N C E   H I S T O R Y   L O G             ***/
   /* **********************************************************************/
   /* **    DATE      PGMR         DESCRIPTION                           ***/
   /* **  --------  --------     --------------------------------------- ***/
   /* **  05/08/97  KSHAW/HMACAL  Created.                               ***/
   /* **********************************************************************/

  CLXREC.CLXCPROC = "USR-ATH";

  set VUSRGR01 empty;
  VUSRGR01.XXXUSRID = CL0YW01.CL0YWUSR;
  KL0YS-SEL-USR-GRP();
  if (SQLCA.VAGen_SQLCODE == 100)
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(769); /* user id not assigned to a group*/
    return;
  end

  KL0YW-CL-USER-AUTHORIZED-FL = "N";
  set VDEFGR01 empty;
  VDEFGR01.CLM-DEF-GRP-NM = VUSRGR01.CLM-DEF-GRP-NM;

  KL0YS-S1-VDEFGR01(); /* Declare VDEFGR01 cursor*/

  KL0YS-F1-VDEFGR01(); /* Fetch next VDEFGR01*/

  while (SQLCA.VAGen_SQLCODE == 0
   && KL0YW-CL-USER-AUTHORIZED-FL == "N")
    if (VDEFGR01.XGPCD == CL0YW01.CL0YWGPC)
      if (VDEFGR01.CLM-DEF-GRP-FL == "Y")
        CL0YW01.KL0YW-ENTERED-YDF-CHAR1 = CL0YW01.CL0YWYDF;
        CL0YW01.KL0YW-DB2-YDF-CHAR1 = VDEFGR01.YDFCD;
        if (CL0YW01.KL0YW-ENTERED-YDF-CHAR1 == CL0YW01.KL0YW-DB2-YDF-CHAR1)
          KL0YW-CL-USER-AUTHORIZED-FL = "Y";
        end
      else
        if (VDEFGR01.YDFCD == CL0YW01.CL0YWYDF)
          KL0YW-CL-USER-AUTHORIZED-FL = "Y";
        end
      end
    end
    KL0YS-F1-VDEFGR01(); /* Fetch VDEFGR01 cursor*/
  end

  KL0YS-C1-VDEFGR01(); /* Close VDEFGR01 cursor*/

  if (KL0YW-CL-USER-AUTHORIZED-FL == "N")
    converseLib.validationFailed(770); /* User/Group not auth for Defect Code*/
    CLXREC.CLXERRF = "Y";
  end
end // end KL0YS-VAL-USR-AUTH

// SELECT 'S' DPRODC.VBARCD01
Function KL0YS-VBARCD01-S()
   /* -----------------------------------------------------------**/
   /* Modification History                                  **/
   /* Date    Userid     Description                          **/
   /* ---------- ------  --------------------------------------- **/
   /* 07-01-1997 HMACAL  Added this SGRP to verify bar code      **/
   /* -----------------------------------------------------------**/
   /* Select 's' DPRODC.VBARCD01*/
   /* ------------------------------------------------------------*/

  try
    call "VBARCD01" ("S ", SQLCA, VBARCD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODC.VBARCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBARCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VBARCD01.VBARCD01-GROUP; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KL0YS-VBARCD01-S

// APPAREL P.O. ID EDIT
Function KL0YS-VFY-APRL-PO()
    /* KL0YS-VFY-APRO-PO*/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 06-10-93  GDECKE  VERIFY PO ENTERED IN CORRECT FORMAT    **/
   /* *                   FOR THE GPC AND PRODUCT/FACTORY        **/
   /* *----------------------------------------------------------**/

  if (KL0YM005.CLPFTYPO == " ")
    CL0YW01.KL0YW-PO-FMT-VALID-FL = "N";
    converseLib.validationFailed(757);
    CLXREC.CLXERRF = "Y";
    set KL0YM005.CLPFTYPO cursor, modified, bold;
    return;
  end

  CL0YW01.KL0YW-PO-TEST-CHA-YMM = KL0YM005.CLPFTYPO;
  set PCFREC empty;

  if (KL0YM005.XGPCD == "03")
    if (CL0YW01.KL0YW-PO-TEST-CHA-M1 >= "01"
     && CL0YW01.KL0YW-PO-TEST-CHA-M1 <= "12"
     && CL0YW01.KL0YW-PO-TEST-CHA-M2 >= "01"
     && CL0YW01.KL0YW-PO-TEST-CHA-M2 <= "12")
      PCFREC.PCFBUYMO = CL0YW01.KL0YW-PO-TEST-NUM-M1;
      PCFREC.PCFSECD = CL0YW01.KL0YW-PO-TEST-CHA-Y;
      KL0YS-PO-SEASON-YR();
      if (SQLCA.VAGen_SQLCODE == 0)
        CL0YW01.KL0YW-PO-TEST-NUM-Y = 0; /* ZERO OUT YEAR*/
        CL0YW01.KL0YW-PO-TEST-NUM-C = 0; /* ZERO OUT CENTURY*/
        CL0YW01.KL0YW-PO-TEST-NUM-CYMM = CL0YW01.KL0YW-PO-TEST-NUM-CYMM +                PCFREC.PCFBUYYR * 10000;
        CL0YW01.PCFSECD = PCFREC.PCFSECD;
        CL0YW01.KL0YW-PO-FMT-VALID-FL = "Y";
        return;
      else
        CL0YW01.KL0YW-PO-FMT-VALID-FL = "N";
        converseLib.validationFailed(757);
        CLXREC.CLXERRF = "Y";
        set KL0YM005.CLPFTYPO cursor, modified, bold;
        return;
      end
    else
      CL0YW01.KL0YW-PO-FMT-VALID-FL = "N";
      converseLib.validationFailed(757);
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CLPFTYPO cursor, modified, bold;
      return;
    end
  else

    /* CHECK FOR FOOTWEAR PO ENTERED IN CORRECT FORMAT*/

    if (CL0YW01.KL0YW-PO-TEST-CHA-M1 >= "01"
     && CL0YW01.KL0YW-PO-TEST-CHA-M1 <= "12"
     && CL0YW01.KL0YW-PO-TEST-CHA-M2 >= "01"
     && CL0YW01.KL0YW-PO-TEST-CHA-M2 <= "12"
     && CL0YW01.KL0YW-PO-TEST-CHA-Y >= "00"
     && CL0YW01.KL0YW-PO-TEST-CHA-Y <= "99")
      CL0YW01.KL0YW-PO-FMT-VALID-FL = "Y";
      if (CL0YW01.KL0YW-PO-TEST-NUM-Y < 50)
        CL0YW01.KL0YW-PO-TEST-NUM-C = 20;
      else
        CL0YW01.KL0YW-PO-TEST-NUM-C = 19;
      end
      return;
    else
      CL0YW01.KL0YW-PO-FMT-VALID-FL = "N";
      converseLib.validationFailed(364);
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CLPFTYPO cursor, modified, bold;
      return;
    end
  end


end // end KL0YS-VFY-APRL-PO

// Edit PO/Fcty Combo
Function KL0YS-VFY-PO-ID()
   /* *************************************************************/

   /* /* * Edit PO-id         **/
   /* ****************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G         **/
   /* *-------------------------------------------------------------**/
   /* *     DATE    rgomat   DESCRIPTION                            **/
   /* *-------------------------------------------------------------**/
   /* ****************************************************************/
    /* Maintenance History:*/
    /* 06-17-00 rgomat Created. edit the po-id and vlidate*/
             /* if the po-id is greater than three year*/
             /* set the carton-number to zero.*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "KL0YS-VFY-PO-ID"; /* set current proc name*/

   /* TCS Change begin*/
   /* get current date from the system*/
  XX0XS01();
  TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT;
  CL0YW01.KL0YW-PO-TEST-CHA-YMM = KL0YM005.CLPFTYPO;
  if (CL0YW01.KL0YW-PO-TEST-CHA-M1 >= "01"
   && CL0YW01.KL0YW-PO-TEST-CHA-M1 <= "12"
   && CL0YW01.KL0YW-PO-TEST-CHA-M2 >= "01"
   && CL0YW01.KL0YW-PO-TEST-CHA-M2 <= "12"
   && CL0YW01.KL0YW-PO-TEST-CHA-Y >= "00"
   && CL0YW01.KL0YW-PO-TEST-CHA-Y <= "99")
    CL0YW01.KL0YW-PO-FMT-VALID-FL = "Y";
    if (CL0YW01.KL0YW-PO-TEST-NUM-Y < 50)
      CL0YW01.KL0YW-PO-TEST-NUM-C = 20;
    else
      CL0YW01.KL0YW-PO-TEST-NUM-C = 19;
    end
  else
    CL0YW01.KL0YW-PO-FMT-VALID-FL = "N";
    converseLib.validationFailed(364);
    CLXREC.CLXERRF = "Y";
    set KL0YM005.CLPFTYPO cursor, modified, bold;
    return;
  end
  CL0YW01.KL0YW-PO-ID-NUM-D = 01;
  CL0YW01.KL0YW-PO-ID-NUM-M = CL0YW01.KL0YW-PO-TEST-NUM-M2;
  if (CL0YW01.KL0YW-PO-TEST-CHA-M2 < CL0YW01.KL0YW-PO-TEST-CHA-M1)
    CL0YW01.KL0YW-PO-ID-NUM-Y = CL0YW01.KL0YW-PO-TEST-NUM-Y;
    CL0YW01.KL0YW-PO-ID-NUM-Y = CL0YW01.KL0YW-PO-ID-NUM-Y + 1;
  else
    CL0YW01.KL0YW-PO-ID-NUM-Y = CL0YW01.KL0YW-PO-TEST-NUM-Y;
  end
  if (CL0YW01.KL0YW-PO-ID-NUM-Y < 50)
    CL0YW01.KL0YW-PO-ID-NUM-C = 20;
  else
    CL0YW01.KL0YW-PO-ID-NUM-C = 19;
  end

  TA2REC.TA2DBDFN = CL0YW01.KL0YW-PO-ID-NUM-CYMM;
  CL0YW01.KL0YW-PO-ID-NUM-CYMM = 0;
  CL0YW01.KL0YW-PO-ID-NUM-YMM = VGVar.currentShortGregorianDate;
  if (CL0YW01.KL0YW-PO-ID-NUM-Y < 50)
    CL0YW01.KL0YW-PO-ID-NUM-C = 20;
  else
    CL0YW01.KL0YW-PO-ID-NUM-C = 19;
  end
  TA2REC.TA2DBDTN = CL0YW01.KL0YW-PO-ID-NUM-CYMM;

  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = 0;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2DBDDN > 1095)
    KL0YM005.CLENBRCT = 0;
    converseLib.validationFailed(877);
    /* ELSE;*/
    /* SET KL0YM005.CLPFTYPO CURSOR,MODIFIED,BRIGHT;*/
  end
end // end KL0YS-VFY-PO-ID

// check if dmact01 rec needed
Function KL0YS-WRIT-DM()
   /* ****************************************************************/
   /* if this a direct market record, need to write out a tag      **/
   /* record to dclaim.vdmact01 whenever inspection is marked      **/
   /* complete.  Can remove references to account class when all   **/
   /* direct market records are marked 'cdr'.                      **/
   /* 12-02-92 lgross          creation                            **/
   /* 01-26-93 bcourt change proc to sgrp.                         **/
   /* 02-08-93 bcourt if consumer account, then write tag record.  **/
   /* 02-19-93 bcourt add ezetst usage to kl14 tbl.                **/
   /* 03-10-93 bcourt  Change test to log csw activity to check    **/
   /* if claims from csw or s/b sent there.            **/
   /* ****************************************************************/
   /* KL0YS-GET-ACCT-CLS;              /*temp until all cdr*/
   /* IF CLAREC.YCTCD EQ 'CDR';*/
   /* OR KUCREC.XAUCD IN KL10TBL.XAU-ACCT-CLS-CD;/* temp until all cdr*/
  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
    if (CLAREC.CLAORIGI == "D" /* if from csw*/
     || CLAREC.CLAORIGI == "T") /* or ibm generated*/
      KL0YS-WRIT-DM-REC(); /* write tag record*/
    end
  end
end // end KL0YS-WRIT-DM

// update dmact01
Function KL0YS-WRIT-DM-REC()
   /* *******************************************************************/
   /* * THIS STATEMENT GROUP WILL WRITE OUT A RECORD TO DCLAIM.VCMACT01**/
   /* * EVERY TIME inspection is marked complete.                      **/
   /* *12-02-92  lgross   creation                                     **/
   /* *******************************************************************/
  set VDMACT01 empty;
  set SQLCA empty;

  VDMACT01.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  VDMACT01.CLLRTNNB = 0; /* return number*/
  VDMACT01.CL2ISNBR = CL2REC.CL2ISNBR;
  VDMACT01.XXXPGMNB = "KL0Y";
  VDMACT01.XXXSTAT = "A";
  VDMACT01.ZZZSDT = CLXREC.XXXCDTE; /* date of setup*/
  VDMACT01.ZZZSTM = CLXREC.XXXCHHMM; /* time of setup*/

  call "IO0870" ("A ", SQLCA, VDMACT01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* update ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING VDMACT01";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VDMACT01";
      TA1REC.TA1LOCAT[2] = "KL0YS-WRIT-DM-REC";
      XPCL010();
    end
  end
end // end KL0YS-WRIT-DM-REC

// set act mode flag & first scrn
Function KL0YS01()

   /* ******************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G           **/
   /* ******************************************************************/
   /* *    DATE    PGMR    DESCRIPTION                                **/
   /* ******************************************************************/
   /* *  10-21-93  GDECKE  Fix bad reference to status cd2:alias=ycscd**/
   /* ******************************************************************/
  CLXREC.CLXCPROC = "CL0YS01"; /* set current proc name*/

   /* this checks for inquiry only mode for user or claim*/

  if (CLWREC.CLWACTIV == "I")
    CL0YW01.CL0YWUDF = "N"; /* set update flag to no*/
  else
    if (COMMAREA.CAALVL[6] == "Y"
     || COMMAREA.CACLVL[6] == "Y")
      CL0YW01.CL0YWUDF = "Y"; /* set update flag to yes*/
    else
      CL0YW01.CL0YWUDF = "N";
    end
  end

  if (CL0YW01.CL0YWUDF == "N")
     /* next sentence*/
  else
    if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* check claim status*/
      if (YCSTBL.YCSCD[sysVar.arrayIndex] == "RAA" /* special status'*/
       || YCSTBL.YCSCD[sysVar.arrayIndex] == "RIP" 
       || YCSTBL.YCSCD[sysVar.arrayIndex] == "ERA" 
       || YCSTBL.YCSCD[sysVar.arrayIndex] == "RPA") /* 062089 return pending authztn*/
         /* next sentence*/
      else
        if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
          CL0YW01.CL0YWUDF = "N";
        end
      end
    end
  end

  if (CL0YW01.CL0YWUDF == "N")
     /* next sentence*/
  else
    CLLREC.CLACLMNB = CLAREC.CLACLMNB;
    CLLREC.CLLRTNNB = CLAREC.CLACRTNB;
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS63(); /* select unique cllrec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLLREC.XWHCD == COMMAREA.XWHCD)
        /* next sentence*/
      else
        if (CLLREC.XWHCD == "04"
         || CLLREC.XWHCD == "32"
         || CLLREC.XWHCD == "51")
          if (COMMAREA.XWHCD == "04"
           || COMMAREA.XWHCD == "32"
           || COMMAREA.XWHCD == "51")
            /* next sentence*/
          else
            CL0YW01.CL0YWUDF = "N";
            converseLib.validationFailed(556);
          end
        else
          CL0YW01.CL0YWUDF = "N";
          converseLib.validationFailed(556);
        end
      end
    else
      CL0YW01.CL0YWUDF = "N";
      converseLib.validationFailed(525);
    end
  end


   /* must check all non-inspection level security before*/
    /* reaching this point - in order to set cl0ywcok correctly*/

  if (CL0YW01.CL0YWUDF == "N")
    CL0YW01.CL0YWCOK = "N"; /* security at claim or mode level*/
  else
    CL0YW01.CL0YWCOK = "Y"; /* claim ok, sec by insp#*/
    CL2REC.CLACLMNB = CLAREC.CLACLMNB;
    CL2REC.CL2ISNBR = CL0YW01.CL2ISNBR;
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS64(); /* select unique cl2rec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL2REC.YCICD == "RMO")
        CL0YW01.CL0YWUDF = "N"; /* this will be rechecked later*/
      end
      if (CL2REC.YCICD == "RSO")
        CL0YW01.CL0YWUDF = "N"; /* this will be rechecked later*/
      end
      if (CL2REC.YCICD == "RMS"
       || CL2REC.YCICD == "CMP")
        CL0YW01.CL0YWUDF = "N";
      end
    end
  end

end // end KL0YS01

// read clprec for cl0ym001
Function KL0YS02()
   /* **********************************************/
   /* 11-26-90 bcourt add u.o.m. field to key     **/
   /* 11-29-01 SVIJAY Changed clprec to dit03rec  **/
   /* **********************************************/

  CLXREC.CLXCPROC = "CL0YS02"; /* set current proc name*/

   /* fetch from cursor*/
   /* CALL IO1350 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS change begins - 11/29/01*/
   /* CALL VDEFIT03 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("N1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS change ends   - 11/29/01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWPID = "Y"; /* protect insp by id*/
   /* build ws-prod-key*/

   /* TCS change begins - 11/29/01*/
   /* MOVE CLPREC.SY1STNBR TO CL0YW01.CL0YWHST;*/
   /* MOVE CLPREC.SY2CLRID TO CL0YW01.CL0YWHCL;*/
   /* MOVE CLPREC.XDMCD TO CL0YW01.CL0YWHDM;*/
   /* MOVE CLPREC.XQACD TO CL0YW01.CL0YWHQL;*/
   /* MOVE CLPREC.XUMCD TO CL0YW01.CL0YWHUM; /* 11-26-90*/

    CL0YW01.CL0YWHST = DIT03REC.SY1STNBR;
    CL0YW01.CL0YWHCL = DIT03REC.SY2CLRID;
    CL0YW01.CL0YWHDM = DIT03REC.XDMCD;
    CL0YW01.CL0YWHQL = DIT03REC.XQACD;
    CL0YW01.CL0YWHUM = DIT03REC.XUMCD; /* 11-26-90*/
   /* TCS change ends   - 11/29/01*/

     /* perform check array and summ or add*/
    KL0YS05();
  else
    if (SQLCA.VAGen_SQLCODE == 100)
   /* CALL IO1350 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS Change begins - 11/29/01*/
   /* CALL VDEFIT03 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
      call "VDEFIT03" ("C1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS Change ends   - 11/29/01*/

      CL0YW01.CL0YWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0YS02"; /* location*/
      TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0YS02

// read clkrec for cl0ym001
Function KL0YS03()

  CLXREC.CLXCPROC = "CL0YS03"; /* set current proc name*/

   /* fetch from cursor*/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* build ws-prod-key*/
    CL0YW01.CL0YWHST = CLKREC.SY1STNBR;
    CL0YW01.CL0YWHCL = CLKREC.SY2CLRID;
    CL0YW01.CL0YWHDM = CLKREC.XDMCD;
    CL0YW01.CL0YWHQL = CLKREC.XQACD;
    CL0YW01.CL0YWHUM = CLKREC.XUMCD; /* 10-03-90*/
     /* perform check array and summ or add*/
    KL0YS06();
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
      CL0YW01.CL0YWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0YS03"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS03

// read clnrec for cl0ym001
Function KL0YS04()
   /* ********************************************/
   /* 11-26-90 bcourt add u.o.m. to key*/
   /* ********************************************/

  CLXREC.CLXCPROC = "CL0YS04"; /* set current proc name*/

   /* fetch from cursor*/
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWPID = "Y"; /* protect insp by id*/
     /* build ws-prod-key*/
    CL0YW01.CL0YWHST = CLNREC.SY1STNBR;
    CL0YW01.CL0YWHCL = CLNREC.SY2CLRID;
    CL0YW01.CL0YWHDM = CLNREC.XDMCD;
    CL0YW01.CL0YWHQL = CLNREC.XQACD;
    CL0YW01.CL0YWHUM = CLNREC.XUMCD; /* 11-26-90*/
     /* perform check array and summ or add*/
    KL0YS07();
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
      CL0YW01.CL0YWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0YS04"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0YS04

// sum or add clprecs to array
Function KL0YS05()
   /* **********************************************************/
   /* 03-11-94 BCourt Hold booking info from VDEFIT01,clprec.**/
   /* 11-29-01 AALAGA Changed clprec to dit03rec.            **/
   /* **********************************************************/

  CLXREC.CLXCPROC = "CL0YS05"; /* set current proc name*/

   /* perform check array and sum or add*/
  CLXREC.CLXARAYX = 1; /* reset index*/
  while (CLXREC.CLXARAYX <= CL0YW01.CL0YWDX1)
    if (CL0YW01.CL0YWPKY == CL0YW02.CL0YW2KY[CLXARAYX])
       /* sum*/

   /* TCS Change begins  - 11/29/01*/
   /* CL0YW02.CLPDEFQ(CLXARAYX) = CL0YW02.CLPDEFQ(CLXARAYX) +*/
   /* CLPREC.CLPDEFQ;*/
   /* CL0YW02.CLNNCRQ(CLXARAYX) = CL0YW02.CLNNCRQ(CLXARAYX) +*/
   /* CLPREC.CLNNCRQ;*/
      CL0YW02.CLPDEFQ[CLXARAYX] = CL0YW02.CLPDEFQ[CLXARAYX] +       DIT03REC.CLPDEFQ;
      CL0YW02.CLNNCRQ[CLXARAYX] = CL0YW02.CLNNCRQ[CLXARAYX] +       DIT03REC.CLNNCRQ;
   /* TCS Change ends    - 11/29/01*/

      CL0YW01.CLPDEFQ = CL0YW02.CLPDEFQ[CLXARAYX];
      CL0YW01.CLNNCRQ = CL0YW02.CLNNCRQ[CLXARAYX];
      /* CL0YW02.CL0YW2CQ(clxarayx)=CL0YW01.CLPDEFQ-CL0YW01.CLNNCRQ*/
       /* MOVE CL0YW01.CLPDEFQ TO CL0YW02.CL0YW2CQ(clxarayx);*/

   /* TCS Change begins  - 11/29/01*/
   /* CL0YW02.CL0YW2CQ(CLXARAYX) = CL0YW02.CL0YW2CQ(CLXARAYX) +*/
   /* CLPREC.CLPDEFQ;*/
      CL0YW02.CL0YW2CQ[CLXARAYX] = CL0YW02.CL0YW2CQ[CLXARAYX] +       DIT03REC.CLPDEFQ;
   /* IF CLPREC.CL-CLCOM-FL = 'Y';*/
      if (DIT03REC.CL-CLCOM-FL == "Y")
   /* TCS Change ends    - 11/29/01*/

        CL0YW02.CL-CLCOM-FL[CLXARAYX] = "Y";
        CL0YW02.CLNRTSQ[CLXARAYX] = 0;
      end
      return;
    end
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* add to index*/
  end
   /* add to bottom of array*/
  CL0YW01.CL0YWDX1 = CL0YW01.CL0YWDX1 + 1;

  if (CL0YW01.CL0YWDX1 > CL0YW01.CL0YWMX2) /* if exceeding max lines in*/
    CL0YW01.CL0YWDX1 = CL0YW01.CL0YWMX2; /* table, show message*/
    converseLib.validationFailed(251);
    CLXREC.CLXERRF = "Y";
    return;
  end

   /* 3-11-94 Store data from clprec = VDEFIT01.*/
  CL0YW02.CL0YW2KY[CL0YWDX1] = CL0YW01.CL0YWPKY;

   /* TCS change begins -  11/28/01*/
   /* MOVE CLPREC.XUMCD TO CL0YW02.XUMCD(CL0YWDX1);*/
  CL0YW02.XUMCD[CL0YWDX1] = DIT03REC.XUMCD;
   /* MOVE CLPREC.XQACD TO CL0YW02.XQACD(CL0YWDX1);*/
  CL0YW02.XQACD[CL0YWDX1] = DIT03REC.XQACD;
   /* MOVE CLPREC.CLPDEFQ TO CL0YW02.CLPDEFQ(CL0YWDX1);*/
  CL0YW02.CLPDEFQ[CL0YWDX1] = DIT03REC.CLPDEFQ;
   /* TCS change ends   -  11/28/01*/

   /* CL0YW02.CL0YW2CQ(CL0YWDX1) = CLPREC.CLPDEFQ - CLPREC.CLNNCRQ*/

   /* TCS change begins -  11/28/01*/
   /* MOVE CLPREC.CLPDEFQ TO CL0YW02.CL0YW2CQ(CL0YWDX1);*/
  CL0YW02.CL0YW2CQ[CL0YWDX1] = DIT03REC.CLPDEFQ;
   /* MOVE CLPREC.CLNNCRQ TO CL0YW02.CLNNCRQ(CL0YWDX1);*/
  CL0YW02.CLNNCRQ[CL0YWDX1] = DIT03REC.CLNNCRQ;
   /* MOVE CLPREC.CL-CLCOM-FL TO CL0YW02.CL-CLCOM-FL(CL0YWDX1);*/
  CL0YW02.CL-CLCOM-FL[CL0YWDX1] = DIT03REC.CL-CLCOM-FL;
  CL0YW02.CLNRTSQ[CL0YWDX1] = 0;
   /* MOVE CLPREC.XBK-BK-SESN-CD TO CL0YW02.XBK-BK-SESN-CD(CL0YWDX1);3-94add*/
  CL0YW02.XBK-BK-SESN-CD[CL0YWDX1] = DIT03REC.XBK-BK-SESN-CD;
   /* MOVE CLPREC.OP-BK-YR TO CL0YW02.OP-BK-YR(CL0YWDX1);/* 3-11-94*/
  CL0YW02.OP-BK-YR[CL0YWDX1] = DIT03REC.OP-BK-YR; /* 3-11-94*/
   /* MOVE CLPREC.OP-BK-MO TO CL0YW02.OP-BK-MO(CL0YWDX1);/* 3-11-94*/
  CL0YW02.OP-BK-MO[CL0YWDX1] = DIT03REC.OP-BK-MO; /* 3-11-94*/
   /* TCS change ends  - 11/28/01*/

end // end KL0YS05

// sum or add clkrecs to array
Function KL0YS06()
   /* ****************************************************************/
   /* **  M A I N T E N C E  H I S T O R Y  L O G                  ***/
   /* **-----------------------------------------------------------***/
   /* ** 02-28-94 JCAREY Added code to move booking info into      ***/
   /* **                 storage from clkrec = VRAITM01.           ***/
   /* ****************************************************************/
  CLXREC.CLXCPROC = "CL0YS06"; /* set current proc name*/

   /* perform check array and sum or add*/
  CLXREC.CLXARAYX = 1;
  while (CLXREC.CLXARAYX <= CL0YW01.CL0YWDX1)
    if (CL0YW01.CL0YWPKY == CL0YW02.CL0YW2KY[CLXARAYX])
      return;
    end
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
   /* add to bottom of array*/
  CL0YW01.CL0YWDX1 = CL0YW01.CL0YWDX1 + 1;

  if (CL0YW01.CL0YWDX1 > CL0YW01.CL0YWMX2) /* if exceeding max lines in*/
    CL0YW01.CL0YWDX1 = CL0YW01.CL0YWMX2; /* table, show message*/
    converseLib.validationFailed(251);
    CLXREC.CLXERRF = "Y";
    return;
  end

  CL0YW02.CL0YW2KY[CL0YWDX1] = CL0YW01.CL0YWPKY;
  CL0YW02.XBK-BK-SESN-CD[CL0YWDX1] = CLKREC.XBK-BK-SESN-CD; /* add*/
  CL0YW02.OP-BK-YR[CL0YWDX1] = CLKREC.OP-BK-YR; /* booking information*/
  CL0YW02.OP-BK-MO[CL0YWDX1] = CLKREC.OP-BK-MO;

end // end KL0YS06

// sum or add clnrecs to array
Function KL0YS07()
   /* *************************************************************/
   /* 03-11-94 BCourt hold bookings data from VRTSIT01 = clnrec.**/
   /* init def qty field to 0.                  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0YS07"; /* set current proc name*/

   /* perform check array and sum or add*/
  CLXREC.CLXARAYX = 1;
  while (CLXREC.CLXARAYX <= CL0YW01.CL0YWDX1)
    if (CL0YW01.CL0YWPKY == CL0YW02.CL0YW2KY[CLXARAYX])
       /* sum*/
      CL0YW02.CL0YW2CQ[CLXARAYX] = CL0YW02.CL0YW2CQ[CLXARAYX] +       CLNREC.CLNRTSQ;
      CL0YW02.CLNNCRQ[CLXARAYX] = CL0YW02.CLNNCRQ[CLXARAYX] +       CLNREC.CLNNCRQ;
      CL0YW02.CLNRTSQ[CLXARAYX] = CL0YW02.CLNRTSQ[CLXARAYX] +       CLNREC.CLNRTSQ;
      return;
    end
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
   /* add to bottom of array*/
  CL0YW01.CL0YWDX1 = CL0YW01.CL0YWDX1 + 1;

  if (CL0YW01.CL0YWDX1 > CL0YW01.CL0YWMX2) /* if exceeding max lines in*/
    CL0YW01.CL0YWDX1 = CL0YW01.CL0YWMX2; /* table, show message*/
    converseLib.validationFailed(251);
    CLXREC.CLXERRF = "Y";
    return;
  end

   /* 3-11-94 i know this has been working for years, but*/
   /* i'm adding code to init defective fields to 0 or ' '.*/
   /* They have no values on clnrec = VRTSIT01.*/

  CL0YW02.CL0YW2KY[CL0YWDX1] = CL0YW01.CL0YWPKY;
  CL0YW02.CLPDEFQ[CL0YWDX1] = 0; /* 3-11-94 add*/
  CL0YW02.CL0YW2CQ[CL0YWDX1] = CLNREC.CLNRTSQ;
  CL0YW02.CLNNCRQ[CL0YWDX1] = CLNREC.CLNNCRQ;
  CL0YW02.CLNRTSQ[CL0YWDX1] = CLNREC.CLNRTSQ;
  CL0YW02.CL-CLCOM-FL[CL0YWDX1] = " "; /* 3-94 add*/
  CL0YW02.XBK-BK-SESN-CD[CL0YWDX1] = CLNREC.XBK-BK-SESN-CD; /* 3-94 ad*/
  CL0YW02.OP-BK-YR[CL0YWDX1] = CLNREC.OP-BK-YR; /* 3-94 add*/
  CL0YW02.OP-BK-MO[CL0YWDX1] = CLNREC.OP-BK-MO; /* 3-94 add*/

end // end KL0YS07

// sort ws array - step 1
Function KL0YS08()

  CLXREC.CLXCPROC = "CL0YS08"; /* set current proc name*/

  CL0YW01.CL0YWDX4 = 1;
  CL0YW01.CL0YWDX5 = 2;
  CL0YW01.CL0YWCHG = "N";
   /* perform the following until end of array (dx1) is reached*/
  while (CL0YWDX4 < CL0YWDX1)
    KL0YS09();
  end
  if (CL0YW01.CL0YWCHG == "N")
    CL0YW01.CL0YWEND = "Y";
  end

end // end KL0YS08

// sort ws array - step 2
Function KL0YS09()
   /* ************************************************************/
   /* 03-11-94 BCourt  Since cl0yw02 group length changed with **/
   /* addition of 3 bookings fields, change cl0ywpgp**/
   /* group in cl0yw01 to use same group nm as w02. **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YS09"; /* set current proc name*/

  if (CL0YW02.CL0YW2KY[CL0YWDX4] > CL0YW02.CL0YW2KY[CL0YWDX5])
    CL0YW01.CL0YW2GP = CL0YW02.CL0YW2GP[CL0YWDX4]; /* 3-11-94*/
    CL0YW02.CL0YW2GP[CL0YWDX4] = CL0YW02.CL0YW2GP[CL0YWDX5];
    CL0YW02.CL0YW2GP[CL0YWDX5] = CL0YW01.CL0YW2GP; /* 3-11-94*/
    CL0YW01.CL0YWCHG = "Y";
  end

  CL0YW01.CL0YWDX4 = CL0YW01.CL0YWDX4 + 1;
  CL0YW01.CL0YWDX5 = CL0YW01.CL0YWDX5 + 1;

end // end KL0YS09

// move summary recs to cl0ym001
Function KL0YS10()

  CLXREC.CLXCPROC = "CL0YS10";

   /* move summary recs to screen*/

  if (CLXREC.CLXARAYX <= CL0YW01.CL0YWDX1)
    KL0YM001.SY1STNBR[CL0YWDX3] = CL0YW02.SY1STNBR[CLXARAYX];
    KL0YM001.SY2CLRID[CL0YWDX3] = CL0YW02.SY2CLRID[CLXARAYX];
    KL0YM001.XDMCD[CL0YWDX3] = CL0YW02.XDMCD[CLXARAYX];
    KL0YM001.XUMCD[CL0YWDX3] = CL0YW02.XUMCD[CLXARAYX];
    KL0YM001.XQACD[CL0YWDX3] = CL0YW02.XQACD[CLXARAYX];
    KL0YM001.CL0YMTQ[CL0YWDX3] = CL0YW02.CLPDEFQ[CLXARAYX];
    KL0YM001.CL0YMCRQ[CL0YWDX3] = CL0YW02.CL0YW2CQ[CLXARAYX];
    KL0YM001.CL0YMNRT[CL0YWDX3] = CL0YW02.CLNNCRQ[CLXARAYX];
    KL0YM001.CL0YMRQ[CL0YWDX3] = CL0YW02.CLNRTSQ[CLXARAYX];
    KL0YM001.CL0YMCFL[CL0YWDX3] = CL0YW02.CL-CLCOM-FL[CLXARAYX];
    if (CL0YW02.XUMCD[CLXARAYX] != "  "
     && CL0YW02.XUMCD[CLXARAYX] != "01") /* if xumcd not eachs*/
      converseLib.validationFailed(593); /* set up warning message*/
    end
  end

  if (CLXREC.CLXARAYX < CL0YW01.CL0YWDX1)
    set KL0YM001.CL0YMSEL[CL0YWDX3] normal;
  else
    set KL0YM001.CL0YMSEL[CL0YWDX3] skip, invisible;
  end

  CLXARAYX = CLXARAYX + 1;
  CL0YWDX3 = CL0YWDX3 + 1;


end // end KL0YS10

// check selections on cl0ym001
Function KL0YS11()
   /* **********************************************************************/
   /* Modification History                                         **/
   /* Date     Userid       Description                              **/
   /* ----------  ------    ------------------------------------------  **/
   /* 07-31-1997  HMACAL    Added MOVE stmts to pass XQACD and UOMCD    **/
   /* **********************************************************************/

  CLXREC.CLXCPROC = "CL0YS11";

   /* check selections*/

  if (KL0YM001.CL0YMSEL[CL0YWDX6] == "S")
    CL0YW01.CL0YWNDF = "Y";
    KL0YS13(); /* add to detail array for m005*/
    if (CL0YW01.CL0YWDCT > 0) /* deadlock occurred*/
      return;
    end
    if (CL0YW01.CL0YWNDF == "Y") /* no clprecs for prod selected*/
      CL0YW01.CL0YWDX7 = CL0YW01.CL0YWDX7 + 1;

      if (CL0YW01.CL0YWDX7 > CL0YW01.CL0YWMX3) /* if exceeding max lines in*/
        CL0YW01.CL0YWDX7 = CL0YW01.CL0YWMX3; /* table, show message*/
        converseLib.validationFailed(251);
        CLXREC.CLXERRF = "Y";
        return;
      end

      CL0YW03.SY1STNBR[CL0YWDX7] = KL0YM001.SY1STNBR[CL0YWDX6];
      CL0YW03.SY2CLRID[CL0YWDX7] = KL0YM001.SY2CLRID[CL0YWDX6];
      CL0YW03.XDMCD[CL0YWDX7] = KL0YM001.XDMCD[CL0YWDX6];
      /* HMACAL 06-20-97 - added next two stmts*/
      CL0YW03.XUMCD[CL0YWDX7] = KL0YM001.XUMCD[CL0YWDX6];
      CL0YW03.XQACD[CL0YWDX7] = KL0YM001.XQACD[CL0YWDX6];
    end
    CL0YW01.CL0YWEND = "Y";
    CLXREC.CLXCSCRN = "KL0YM005";
    CLXREC.CLXEOSF = "Y";
  end

  if (KL0YM001.CL0YMSEL[CL0YWDX6] == "X")
    CL0YW01.CL0YWEND = "Y";
  end

end // end KL0YS11

// build screen header info
Function KL0YS12()


   /* *************************************************************/
    /* Maintenance History:*/
    /* 05-31-90 CHELLM Added XBCCD and XBCABRV to maps 001 & 005.*/
    /* 10-04-90 CHELLM Added XUMCD and XQACD to the select key*/
             /* when scanning DCLAIM.VRAITM01 rows.*/
    /* 03-28-92 GDECKE SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LBL*/
    /* 05-04-92 GDECKE COMPUTE FREIGHT CREDIT IF RPS CLM IS PREPAID*/
    /* 07-20-92 twatso add coding for reasonableness check - get*/
                       /* all the deective and rts qtys returned to date*/
    /* 08-14-92 GDECKE NO FREIGHT CREDIT ON PREPAID RPS CLAIMS*/
                       /* WITH CARRIER CODE 927 OR 200*/
    /* 08-13-93 JCAREY CHANGED CLLPDCFL TO CL-PPD-COLL-IND.*/
    /* 11-28-01 SVIJAY ADDED DIT03REC FOR THE VDEFIT03 VIEW.*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS12";

   /* build screen header info*/

   /* MOVE ' ' TO CL0YWHDR            ; clear out ws scrn hdr area*/
  CL0YW01.CL0YWPID = "N"; /* init protect id flag*/

  CL0YW01.CL0YWCLM = CLAREC.CLACLMNB;
  CL0YW01.KUCCOID = CLAREC.KUCCOID;
  CL0YW01.KUMSTRID = CLAREC.KUMSTRID;
  CL0YW01.XNXCD = CLAREC.XNXCD;
  CL0YW01.KUCCONM = CLWREC.KUCCONM;

  KUCREC.KUCCOID = CLAREC.KUCCOID;
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS62(); /* select unique kucrec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    /* MOVE KUCREC.KUCCONM TO CL0YW01.KUCCONM 12/88 get from clwrec*/
    if (KUCREC.XAUCD in XAUTBL.XAUCD)
      CL0YW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex]; /* save for freight chk*/
    else /* throughout appl*/
      CL0YW01.XATCD = " ";
    end
  else
    CL0YW01.KUCCONM = " ";
    CL0YW01.XATCD = " ";
  end

  CL0YW01.CL0YWINS = CL0YW01.CL2ISNBR;

  CL2REC.CLACLMNB = CLAREC.CLACLMNB;
  CL2REC.CL2ISNBR = CL0YW01.CL2ISNBR;
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS64(); /* select unique cl2rec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CLHSEQNB = CL2REC.CLHSEQNB;
    CL0YW01.YCICD = CL2REC.YCICD;
    CL0YW01.CL0YWUSR = CL2REC.XXXUSRID;
    CL0YW01.CL0YWDTE = CL2REC.CL2ISBDT;
  else
     /* do not set seq if not found - defaults set elsewhere*/
     /* MOVE CLAREC.CLACSQNB TO CL0YW01.CLHSEQNB;*/
    CL0YW01.YCICD = "IIP";
    CL0YW01.CL0YWUSR = COMMAREA.CAUSERID;

    /* ===== Y2K OUT BEGIN ======*/

    /* MOVE EZEDTE TO CL0YW01.CL0YWDTE;*/
    /* CL0YW01.CL0YWDTE = CL0YW01.CL0YWDTE + 19000000;*/

    /* ===== Y2K OUT END ======*/


    /* ===== Y2K IN BEGIN ======*/

    CL0YW01.CL0YWDTE = VGVar.currentGregorianDate;

    /* ===== Y2K IN END ======*/

  end
  if (CL0YW01.YCICD in YCITBL.YCICD)
    CL0YW01.YCIDESC = YCITBL.YCIDESC[sysVar.arrayIndex];
  else
    CL0YW01.YCIDESC = " ";
  end

  CL0YW01.CL0YWSEQ = CL0YW01.CLHSEQNB;

    /* retrieve data from cljrec*/
  CLJREC.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS60(); /* select unique cljrec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWATQ = CLJREC.CLJTATHQ;
    CL0YW01.CLJNCRFL = CLJREC.CLJNCRFL;
  else
    CL0YW01.CL0YWATQ = 0;
    CL0YW01.CLJNCRFL = " ";
  end

   /* **************************************************************/
   /* added 7-20-92 twatso*/
   /* before selecting 'u' for update from clorec go and get all the*/
   /* def and rts for the claim number.  Will be held in hold field and*/
   /* redisplayed when the map changes and needs to be redisplayed*/

  CL0YW01.KL0YW-TINSP = 0;
  KL0YS-TOTAL-DEF();
  KL0YS-TOTAL-RTS();
  KL0YM001.KL0YM-TINSP = CL0YW01.KL0YW-TINSP;

   /* **************************************************************/

    /* retrieve data from clorec*/
  CLOREC.CLACLMNB = CL0YW01.CL0YWCLM;
  CLOREC.CLHSEQNB = CL0YW01.CLHSEQNB;
  CLOREC.CL2ISNBR = CL0YW01.CL2ISNBR;
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS61(); /* select unique clorec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CLODMAMT = CLOREC.CLODMAMT;
    CL0YW01.CL0YWDHF = "Y"; /* set defective header exists flag*/
  else
    CL0YW01.CLODMAMT = 0;
    CL0YW01.CL0YWDHF = "N"; /* set defective header flag*/
  end

  CL0YW01.XGPCD = CLAREC.XGPCD;
  CL0YW01.YCTCD = CLAREC.YCTCD;
  if (CLAREC.XGPCD in XGPTBL.XGPCD)
    CL0YW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  if (CLAREC.XGPCD in YRMTBL.XGPCD) /* save for freight calc*/
    CL0YW01.YRMDFRGT = YRMTBL.YRMDFRGT[sysVar.arrayIndex]; /* throughout appl*/
  else
    CL0YW01.YRMDFRGT = 0;
  end


  if (CLAREC.YCTCD == "OSD") /* no automatic freight allowance if*/
                                   /* offshore*/
    CL0YW01.YRMDFRGT = 0; /* because we will pay the postage if*/
                                   /* they mail their clippings back*/
  end


  if (CLAREC.XBCCD != "  ") /* (05-31-90)*/
    CL0YW01.XBCCD = CLAREC.XBCCD;
    if (CLAREC.XBCCD in XBCTBL.XBCCD)
      CL0YW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  else
    CL0YW01.XBCCD = " ";
    CL0YW01.XBCABRV = " ";
  end

  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    CL0YW01.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end

   /* now sum the cartons for all returns*/
  KL0YS82();

  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS63(); /* select unique cllrec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.XWHCD = CLLREC.XWHCD;
    if (CLLREC.XWHCD in XWHTBL.XWHCD)
      CL0YW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      CL0YW01.XWHABRV = " ";
    end
  else
    CL0YW01.CL0YWUDF = "N";
    CL0YW01.CL0YWCOK = "N";
    converseLib.validationFailed(525); /* no insp until log a return 062089*/
    CL0YW01.XWHCD = " ";
    CL0YW01.XWHABRV = " ";
  end

   /* look for clm hdr comments*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = CL0YW01.CL0YWSEQ;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "C";
  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* check for comment*/
   /* fetch from cursor*/
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* comment exist*/
    CL0YW01.CL0YWRAC = "Y";
  else
     /* comment does not exist*/
    CL0YW01.CL0YWRAC = "N";
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor on eof*/

   /* fill in the summary records*/
   /* note: we only do this section if cl0ywrtf is Y*/

  if (CL0YW01.CL0YWRTF == "Y") /* yes, we need to rebuild table*/
    set CL0YW02 empty; /* clear out table*/
    CL0YW01.CL0YWDX2 = 1; /* reset index*/

     /* TCS change begins - 11/28/01*/
     /* declare cursor for clprec, DEF items*/
     /* MOVE CLAREC.CLACLMNB TO CLPREC.CLACLMNB;*/
     /* MOVE CL0YW01.CLHSEQNB TO CLPREC.CLHSEQNB;*/
     /* MOVE CL0YW01.CL2ISNBR TO CLPREC.CL2ISNBR;*/
     /* MOVE CLAREC.XGPCD TO CLPREC.XGPCD;*/
     /* MOVE '******' TO CLPREC.SY1STNBR;*/
     /* MOVE '***' TO CLPREC.SY2CLRID;*/
     /* MOVE '**' TO CLPREC.XDMCD;*/
     /* MOVE '**' TO CLPREC.XQACD;     /* 10-04-90*/
     /* MOVE '**' TO CLPREC.XUMCD;     /* 10-04-90*/
     /* MOVE -1 TO CLPREC.IV0IVCID;*/
     /* CALL io1350   'S1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
     /* CALL VDEFIT03 'S1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
    DIT03REC.CLACLMNB = CLAREC.CLACLMNB;
    DIT03REC.CLHSEQNB = CL0YW01.CLHSEQNB;
    DIT03REC.CL2ISNBR = CL0YW01.CL2ISNBR;
    DIT03REC.XGPCD = CLAREC.XGPCD;
    DIT03REC.SY1STNBR = "******";
    DIT03REC.SY2CLRID = "***";
    DIT03REC.XDMCD = "**";
    DIT03REC.XQACD = "**"; /* 10-04-90*/
    DIT03REC.XUMCD = "**"; /* 10-04-90*/
    DIT03REC.IV0IVCID = -1;
    call "VDEFIT03" ("S1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
     /* TCS change ends - 11/28/01*/

     /* declare cursor for clkrec, RA items*/
    CLKREC.CLACLMNB = CLAREC.CLACLMNB;
    CLKREC.XGPCD = CLAREC.XGPCD;
    CLKREC.SY1STNBR = "******";
    CLKREC.SY2CLRID = "***";
    CLKREC.XDMCD = "**";
    CLKREC.XUMCD = "**"; /* 10-04-90*/
    CLKREC.XQACD = "**"; /* 10-04-90*/
    CLKREC.CLKCRFL = "*"; /* 072089 add*/
    CLKREC.IV0IVCID = -1;
    call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

     /* declare cursor for clnrec, RTS items*/
    CLNREC.CLACLMNB = CLAREC.CLACLMNB;
    CLNREC.CLHSEQNB = CL0YW01.CLHSEQNB;
    CLNREC.CL2ISNBR = CL0YW01.CL2ISNBR;
    CLNREC.XGPCD = CLAREC.XGPCD;
    CLNREC.SY1STNBR = "******";
    CLNREC.SY2CLRID = "***";
    CLNREC.XDMCD = "**";
    CLNREC.XQACD = "**";
    CLNREC.XUMCD = "**";
    CLNREC.IV0IVCID = -1;
    call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

     /* fetch row from clprec,clkrec,clnrec*/
     /* perform each of these while sqlcode = 0*/
     /* after each fetch run through the array load module*/
    CL0YW01.CL0YWEND = "N";
    CL0YW01.CL0YWDX1 = 0;
    while (CL0YW01.CL0YWEND == "N")
      KL0YS02(); /* clprec, DEF items*/
    end
    CL0YW01.CL0YWEND = "N";
    while (CL0YW01.CL0YWEND == "N")
      KL0YS03(); /* clkrec, RA items*/
    end
    CL0YW01.CL0YWEND = "N";
    while (CL0YW01.CL0YWEND == "N")
      KL0YS04(); /* clnrec, RTS items*/
    end

     /* below will sum detail to get frt alw qty - only for gpc 02*/
    CL0YW01.CLOFGAQ = 0;
    CL0YW01.CLOFGAAM = 0;
    if (CLAREC.XGPCD == "02"
     && CL0YW01.XATCD == "02")
      if (CLJREC.CL-RPS-LABL-FL != "Y")
        CL0YWDX6 = 0;
        while (CL0YWDX6 < CL0YWDX1)
          CL0YWDX6 = CL0YWDX6 + 1;
          CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CL0YW02.CLPDEFQ[CL0YWDX6];
        end
      else
        if (CLLREC.CL-PPD-COLL-IND == "P") /* IF RPS, BUT PREPAID*/
          if (CLLREC.TF1CARCD == "0927"
           || CLLREC.TF1CARCD == "0200")
             /* NEXT SENTENCE*/
          else
            CL0YWDX6 = 0;
            while (CL0YWDX6 < CL0YWDX1)
              CL0YWDX6 = CL0YWDX6 + 1;
              CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CL0YW02.CLPDEFQ[CL0YWDX6];
            end
          end
        end
      end
    end

    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
  end

end // end KL0YS12

// add to detail array for m005
Function KL0YS13()
   /* **************************************************************/
              /* ADD TO DETAIL ARRAY FOR M005                    **/
   /* **/
   /* 10-04-90 CHELLM Added XUMCD to the Select key for scanning  **/
   /* Def items.                                  **/
   /* 11-29-01 AALAGA Changed CLPREC to DIT03REC                  **/
   /* ***************************************************************/

  CLXREC.CLXCPROC = "CL0YS13";

   /* add to detail array for m005*/

   /* declare cursor for clprec*/

   /* TCS change begins  - 11-29-01*/
   /* MOVE CLAREC.CLACLMNB TO CLPREC.CLACLMNB;*/
  DIT03REC.CLACLMNB = CLAREC.CLACLMNB;
   /* MOVE CL0YW01.CL0YWSEQ TO CLPREC.CLHSEQNB;*/
  DIT03REC.CLHSEQNB = CL0YW01.CL0YWSEQ;
   /* MOVE CL0YW01.CL0YWINS TO CLPREC.CL2ISNBR;*/
  DIT03REC.CL2ISNBR = CL0YW01.CL0YWINS;
   /* MOVE CLAREC.XGPCD TO CLPREC.XGPCD;*/
  DIT03REC.XGPCD = CLAREC.XGPCD;
   /* MOVE -1 TO CLPREC.IV0IVCID;*/
  DIT03REC.IV0IVCID = -1;
   /* TCS Change ends - 11-29-01*/

   /* if user selects 'all', take from m001 array*/
   /* else take from screen*/
  if (KL0YM001.CL0YMSEL[1] == "A")

   /* TCS Change begins  - 11-29-01*/
   /* MOVE CL0YW02.SY1STNBR(CL0YWDX6) TO CLPREC.SY1STNBR;*/
    DIT03REC.SY1STNBR = CL0YW02.SY1STNBR[CL0YWDX6];
   /* MOVE CL0YW02.SY2CLRID(CL0YWDX6) TO CLPREC.SY2CLRID;*/
    DIT03REC.SY2CLRID = CL0YW02.SY2CLRID[CL0YWDX6];
   /* MOVE CL0YW02.XDMCD(CL0YWDX6) TO CLPREC.XDMCD;*/
    DIT03REC.XDMCD = CL0YW02.XDMCD[CL0YWDX6];
   /* MOVE CL0YW02.XQACD(CL0YWDX6) TO CLPREC.XQACD;*/
    DIT03REC.XQACD = CL0YW02.XQACD[CL0YWDX6];
   /* MOVE CL0YW02.XUMCD(CL0YWDX6) TO CLPREC.XUMCD;*/
    DIT03REC.XUMCD = CL0YW02.XUMCD[CL0YWDX6];
   /* TCS change ends  -  11-29-01*/

    CL0YW01.CL0YWCQL = CL0YW02.XQACD[CL0YWDX6];
  else

   /* TCS change begins-  11-29-01*/
   /* MOVE KL0YM001.SY1STNBR(CL0YWDX6) TO CLPREC.SY1STNBR;*/
    DIT03REC.SY1STNBR = KL0YM001.SY1STNBR[CL0YWDX6];
   /* MOVE KL0YM001.SY2CLRID(CL0YWDX6) TO CLPREC.SY2CLRID;*/
    DIT03REC.SY2CLRID = KL0YM001.SY2CLRID[CL0YWDX6];
   /* MOVE KL0YM001.XDMCD(CL0YWDX6) TO CLPREC.XDMCD;*/
    DIT03REC.XDMCD = KL0YM001.XDMCD[CL0YWDX6];
   /* MOVE KL0YM001.XUMCD(CL0YWDX6) TO CLPREC.XUMCD;*/
    DIT03REC.XUMCD = KL0YM001.XUMCD[CL0YWDX6];
   /* MOVE KL0YM001.XQACD(CL0YWDX6) TO CLPREC.XQACD;*/
    DIT03REC.XQACD = KL0YM001.XQACD[CL0YWDX6];
   /* TCS change ends  -  11-29-01*/

    CL0YW01.CL0YWCQL = KL0YM001.XQACD[CL0YWDX6];
  end

   /* CALL IO1350 'S1',SQLCA,CLPREC (NOMAPS,NONCSP; /* build clprec cursor*/

   /* TCS change begins - 11-29-01*/
   /* CALL VDEFIT03 'S1',SQLCA,CLPREC (NOMAPS,NONCSP; /* build clprec cursor*/
  call "VDEFIT03" ("S1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* build clprec cursor*/
   /* TCS change ends  -  11-29-01*/


   /* fetch row from clprec*/
   /* perform while sqlcode = 0*/
   /* after each fetch run through the array load module*/
  CL0YW01.CL0YWEND = "N";
  CL0YW01.CL0YWCHK = "N";
  while (CL0YW01.CL0YWEND == "N")
    KL0YS14();
    if (CL0YW01.CL0YWDCT > 0) /* deadlock occurred*/
      return;
    end
  end

end // end KL0YS13

// read clprec for cl0ym005
Function KL0YS14()

   /* Maintenance History:*/
   /* 06-14-90 CHELLM Renamed FY2FTYPO to PC3POIDT.*/
   /* 04-13-92 twatso Renamed clacmind to cl-clcom-fl*/
   /* 06-03-94 sgorga Replaced duty cd (yddcd) with size id.*/
   /* 11-29-01 AALAGA changed CLPREC to DIT03REC*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "KL0YS14"; /* set current proc name*/

   /* fetch from cursor*/
   /* CALL IO1350 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS change begins  - 11-29-01*/
   /* CALL VDEFIT03 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("N1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* IF SQLCA.SQLCODE EQ 0*/
   /* AND CLPREC.XQACD = CL0YW01.CL0YWCQL;*/
  if (SQLCA.VAGen_SQLCODE == 0
   && DIT03REC.XQACD == CL0YW01.CL0YWCQL)
   /* TCS change ends    - 11-29-01*/

    CL0YW01.CL0YWNDF = "N";
    if (CL0YW01.CL0YWCHK == "Y") /* previous rec was not key2 type*/

   /* TCS change begins  - 11-29-01*/
   /* IF CLPREC.XUMCD = CL0YW03.XUMCD(CL0YWDX7)*/
   /* AND CLPREC.SY-SZ-ID = CL0YW03.SY-SZ-ID(CL0YWDX7)*/
   /* AND CLPREC.XQACD = CL0YW03.XQACD(CL0YWDX7)*/
   /* AND CLPREC.PC3POIDT = CL0YW03.PC3POIDT(CL0YWDX7)/* match pt 1*/
   /* AND CLPREC.FY1FCTYC = CL0YW03.FY1FCTYC(CL0YWDX7)*/
   /* AND CLPREC.CLPCRTNB = CL0YW03.CLPCRTNB(CL0YWDX7);*/
   /* ;*/
   /* IF CLPREC.YDRCD = CL0YW03.YDRCD(CL0YWDX7)/* match pt 2*/
   /* OR CLPREC.YDRCD = ' ';*/
   /*  */
   /* IF CLPREC.CL-CLCOM-FL = 'Y'*/
      if (DIT03REC.XUMCD == CL0YW03.XUMCD[CL0YWDX7]       
       && DIT03REC.SY-SZ-ID == CL0YW03.SY-SZ-ID[CL0YWDX7] 
       && DIT03REC.XQACD == CL0YW03.XQACD[CL0YWDX7]       
       && DIT03REC.PC3POIDT == CL0YW03.PC3POIDT[CL0YWDX7] /* match pt 1*/
       && DIT03REC.FY1FCTYC == CL0YW03.FY1FCTYC[CL0YWDX7] 
       && DIT03REC.CLPCRTNB == CL0YW03.CLPCRTNB[CL0YWDX7])

        if (DIT03REC.YDRCD == CL0YW03.YDRCD[CL0YWDX7] /* match pt 2*/
         || DIT03REC.YDRCD == " ")                   

          if (DIT03REC.CL-CLCOM-FL == "Y"
           && CL0YW03.CL0YWMN1[CL0YWDX7] == "Y") /* match pt 3*/
   /* TCS change ends    - 11-29-01*/


   /* TCS change begins  - 11-29-01*/
   /* IF CLPREC.CLGCMSEQ = CL0YW03.CL0YWCS1(CL0YWDX7);*/
            if (DIT03REC.CLGCMSEQ == CL0YW03.CL0YWCS1[CL0YWDX7])
   /* TCS change ends    - 11-29-01*/

              KL0YS18(); /* combine*/
            else
              KL0YS17(); /* do not combine*/
            end
          else
            KL0YS18(); /* combine*/
          end
        else
          KL0YS17(); /* do not combine*/
        end
      else
        KL0YS17(); /* do not combine*/
      end
    else
      KL0YS17(); /* do not combine*/
    end
  else

   /* TCS Change begins  - 11-29-01*/
   /* IF SQLCA.SQLCODE EQ 0*/
   /* AND CLPREC.XQACD NE CL0YW01.CL0YWCQL;*/
    if (SQLCA.VAGen_SQLCODE == 0
     && DIT03REC.XQACD != CL0YW01.CL0YWCQL)
   /* TCS Change ends    - 11-29-01*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* CALL IO1350 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS Change begins  - 11-29-01*/
   /* CALL VDEFIT03 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
        call "VDEFIT03" ("C1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS Change ends    - 11-29-01*/
                                   /* close cursor on eof*/
        CL0YW01.CL0YWEND = "Y";
      else
        TA1REC.TA1LOCAT[2] = "CL0YS14"; /* location*/
        TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

end // end KL0YS14

// set map fields
Function KL0YS15()
   /* ************************************************************/
   /* *  protect all the screen fields if update not allowed.   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YS15"; /* set current proc name*/

  set KL0YM001.CL0YWUSR skip;
  set KL0YM001.CL0YMIDT skip;
  set KL0YM001.CLJNCRFL skip;
  set KL0YM001.CL0YMRAC skip;

  if (CL2REC.YCICD == "RMO")
     /* next sentence*/
  else
    set KL0YM001.CL0YMRST skip;
  end

  if (CL2REC.YCICD == "RSO")
     /* next sentence*/
  else
    set KL0YM001.CL0YMICF skip;
  end


end // end KL0YS15

// check for and process deletes
Function KL0YS16()
   /* ************************************************************/
                /* CHECK FOR AND PROCESS DELETES**/
   /* **/
   /* 10-04-90 CHELLM Added XUMCD to the Select key for scanning**/
   /* DCLAIM.VDEFIT01 rows.                     **/
   /* 11-29-01 AALAGA Changed CLPREC to DIT03REC                **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YS16";

   /* check for and process deletes*/

  if (KL0YM001.CL0YMSEL[CL0YWDX6] == "X")
    CL0YW01.CL0YWDEL = "Y";
     /* declare cursor for clprec*/

   /* TCS Change begins  11-29-01*/
   /* MOVE KL0YM001.CLACLMNB TO CLPREC.CLACLMNB;*/
    DIT03REC.CLACLMNB = KL0YM001.CLACLMNB;
   /* MOVE KL0YM001.CLHSEQNB TO CLPREC.CLHSEQNB;*/
    DIT03REC.CLHSEQNB = KL0YM001.CLHSEQNB;
   /* TCS Change ends    11-29-01*/

    CL0YW01.CL0YWISN = KL0YM001.CL0YMINB;

   /* TCS Change begins  11-29-01*/
   /* MOVE CL0YW01.CL0YWISN TO CLPREC.CL2ISNBR;*/
    DIT03REC.CL2ISNBR = CL0YW01.CL0YWISN;
   /* MOVE KL0YM001.XGPCD TO CLPREC.XGPCD;*/
    DIT03REC.XGPCD = KL0YM001.XGPCD;
   /* MOVE KL0YM001.SY1STNBR(CL0YWDX6) TO CLPREC.SY1STNBR;*/
    DIT03REC.SY1STNBR = KL0YM001.SY1STNBR[CL0YWDX6];
   /* MOVE KL0YM001.SY2CLRID(CL0YWDX6) TO CLPREC.SY2CLRID;*/
    DIT03REC.SY2CLRID = KL0YM001.SY2CLRID[CL0YWDX6];
   /* MOVE KL0YM001.XDMCD(CL0YWDX6) TO CLPREC.XDMCD;*/
    DIT03REC.XDMCD = KL0YM001.XDMCD[CL0YWDX6];
   /* MOVE KL0YM001.XUMCD(CL0YWDX6) TO CLPREC.XUMCD;*/
    DIT03REC.XUMCD = KL0YM001.XUMCD[CL0YWDX6];
   /* MOVE KL0YM001.XQACD(CL0YWDX6) TO CLPREC.XQACD;*/
    DIT03REC.XQACD = KL0YM001.XQACD[CL0YWDX6];
   /* TCS Change ends    11-29-01*/

    CL0YW01.CL0YWCQL = KL0YM001.XQACD[CL0YWDX6];
     /* only the clprecs with invc nbr = 0 should be deleted*/

   /* TCS Change begins  11-29-01*/
   /* MOVE 0 TO CLPREC.IV0IVCID;*/
    DIT03REC.IV0IVCID = 0;
   /* TCS Change ends    11-29-01*/

    /* CALL IO1350 'S1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS Change begins  11-29-01*/
   /* CALL VDEFIT03 'S1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
    call "VDEFIT03" ("S1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS Change ends    11-29-01*/

     /* perform while sqlcode = 0*/
    CL0YW01.CL0YWEND = "N";
    while (CL0YW01.CL0YWEND == "N")
      KL0YS32(); /* fetch -  delete -  bld ttls  for clprec*/
    end

     /* update cl2rec if all clprecs for inspection are deleted*/
    KL0YS33();
  end

end // end KL0YS16

// build m005 array rec
Function KL0YS17()
    /* KL0YS17 --  BUILD KL0YM005 ARRAY RECORD*/
   /* ******************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *---------------------------------------------------------------**/
   /* *     DATE     PGMR   DESCRIPTION                               **/
   /* *---------------------------------------------------------------**/
   /* 06-14-90 CHELLM  Renamed FY2FTYPO to PC2POIDT.*/
   /* 04-13-92 twatso  Renamed clacmind to cl-clcom-fl*/
   /* 06-11-93 GDECKE  SAVE SEASON CODE IN CL0YW03 TABLE*/
   /* 02-28-94 JCAREY  Changed xbk-bk-ses-cd to pc-po-id-sesn-cd.*/
   /* This was a temporary fix for apparel season*/
   /* code that was waiting for a database update.*/
   /* 06-03-94 sgorga  Replaced duty cd (yddcd) with size desc.*/
   /* 11-29-01 AALAGA  Changed CLPREC to DIT03REC*/
   /* ******************************************************************/

  CLXREC.CLXCPROC = "KL0YS17"; /* set current proc name*/

   /* build m005 array rec*/

  CL0YW01.CL0YWDX7 = CL0YW01.CL0YWDX7 + 1;

  if (CL0YW01.CL0YWDX7 > CL0YW01.CL0YWMX3)
                                   /* if exceeding max lines in table*/
    CL0YW01.CL0YWDX7 = CL0YW01.CL0YWMX3; /* show message*/
    converseLib.validationFailed(251);
    CLXREC.CLXERRF = "Y";
    return;
  end

   /* TCS Change begins - 11-29-01*/
   /* MOVE CLPREC.SY1STNBR TO CL0YW03.SY1STNBR(CL0YWDX7);*/
  CL0YW03.SY1STNBR[CL0YWDX7] = DIT03REC.SY1STNBR;
   /* MOVE CLPREC.SY2CLRID TO CL0YW03.SY2CLRID(CL0YWDX7);*/
  CL0YW03.SY2CLRID[CL0YWDX7] = DIT03REC.SY2CLRID;
   /* MOVE CLPREC.XDMCD TO CL0YW03.XDMCD(CL0YWDX7);*/
  CL0YW03.XDMCD[CL0YWDX7] = DIT03REC.XDMCD;
   /* MOVE CLPREC.XUMCD TO CL0YW03.XUMCD(CL0YWDX7);*/
  CL0YW03.XUMCD[CL0YWDX7] = DIT03REC.XUMCD;
   /* MOVE CLPREC.XQACD TO CL0YW03.XQACD(CL0YWDX7);*/
  CL0YW03.XQACD[CL0YWDX7] = DIT03REC.XQACD;
   /* IF CLPREC.XGPCD = '02';*/
  if (DIT03REC.XGPCD == "02")
   /* MOVE CLPREC.SY-SZ-ID TO CL0YW03.SY-SZ-ID(CL0YWDX7);*/
    CL0YW03.SY-SZ-ID[CL0YWDX7] = DIT03REC.SY-SZ-ID;
   /* TCS Change ends - 11-29-01*/
  else
    CL0YW03.SY-SZ-ID[CL0YWDX7] = 0;
  end

   /* TCS Change begins -  11-29-01*/
   /* MOVE CLPREC.PC3POIDT TO CL0YW03.PC3POIDT(CL0YWDX7);*/
  CL0YW03.PC3POIDT[CL0YWDX7] = DIT03REC.PC3POIDT;
   /* IF CLPREC.XGPCD = '03';*/
  if (DIT03REC.XGPCD == "03")
   /* MOVE CLPREC.PC-PO-ID-SESN-CD TO CL0YW03.PCFSECD(CL0YWDX7);*/
    CL0YW03.PCFSECD[CL0YWDX7] = DIT03REC.PC-PO-ID-SESN-CD;
   /* TCS Change ends - 11-29-01*/

  else
    CL0YW03.PCFSECD[CL0YWDX7] = " ";
  end
   /* TCS Change begins - 11-29-01*/
   /* MOVE CLPREC.FY1FCTYC TO CL0YW03.FY1FCTYC(CL0YWDX7);*/
  CL0YW03.FY1FCTYC[CL0YWDX7] = DIT03REC.FY1FCTYC;
   /* MOVE CLPREC.CLPCRTNB TO CL0YW03.CLPCRTNB(CL0YWDX7);*/
  CL0YW03.CLPCRTNB[CL0YWDX7] = DIT03REC.CLPCRTNB;
   /* MOVE CLPREC.CLPDEFQ TO CL0YW03.CL0YW3TL(CL0YWDX7);*/
  CL0YW03.CL0YW3TL[CL0YWDX7] = DIT03REC.CLPDEFQ;
   /* MOVE CLPREC.YDRCD TO CL0YW03.YDRCD(CL0YWDX7);*/
  CL0YW03.YDRCD[CL0YWDX7] = DIT03REC.YDRCD;
   /* MOVE CLPREC.CLNNCRQ TO CL0YW03.CLNNCRQ(CL0YWDX7);*/
  CL0YW03.CLNNCRQ[CL0YWDX7] = DIT03REC.CLNNCRQ;

   /* MOVE CLPREC.YDFCD TO CL0YW03.CL0YWYD1(CL0YWDX7);*/
  CL0YW03.CL0YWYD1[CL0YWDX7] = DIT03REC.YDFCD;
   /* MOVE CLPREC.CLPDEFQ TO CL0YW03.CL0YWDQ1(CL0YWDX7);*/
  CL0YW03.CL0YWDQ1[CL0YWDX7] = DIT03REC.CLPDEFQ;
   /* MOVE CLPREC.CLKCLPRC TO CL0YW03.CL0YWPC1(CL0YWDX7);*/
  CL0YW03.CL0YWPC1[CL0YWDX7] = DIT03REC.CLKCLPRC;
   /* MOVE CLPREC.CL-CLCOM-FL TO CL0YW03.CL0YWMN1(CL0YWDX7);*/
  CL0YW03.CL0YWMN1[CL0YWDX7] = DIT03REC.CL-CLCOM-FL;
   /* MOVE CLPREC.CLGCMSEQ TO CL0YW03.CL0YWCS1(CL0YWDX7);*/
  CL0YW03.CL0YWCS1[CL0YWDX7] = DIT03REC.CLGCMSEQ;
   /* MOVE CLPREC.ZZZCHGCT TO CL0YW03.CL0YWZC1(CL0YWDX7);*/
  CL0YW03.CL0YWZC1[CL0YWDX7] = DIT03REC.ZZZCHGCT;
   /* add comment also*/
   /* IF CLPREC.CL-CLCOM-FL = 'Y';*/
  if (DIT03REC.CL-CLCOM-FL == "Y")
   /* MOVE CLPREC.CLACLMNB TO CLGREC.CLACLMNB;*/
    CLGREC.CLACLMNB = DIT03REC.CLACLMNB;
   /* MOVE CLPREC.CLHSEQNB TO CLGREC.CLHSEQNB;*/
    CLGREC.CLHSEQNB = DIT03REC.CLHSEQNB;
   /* MOVE CLPREC.CL2ISNBR TO CLGREC.CL2ISNBR;*/
    CLGREC.CL2ISNBR = DIT03REC.CL2ISNBR;
    CLGREC.CLGCMTYP = "D";
   /* MOVE CLPREC.CLGCMSEQ TO CLGREC.CLGCMSEQ;*/
    CLGREC.CLGCMSEQ = DIT03REC.CLGCMSEQ;
   /* TCS chnage ends - 11-29-01*/

    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS65(); /* select unique clgrec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0YW03.CLGCOMNT[CL0YWDX7] = CLGREC.CLGCOMNT;
    end
  end

  CL0YW01.CL0YWCHK = "Y";

end // end KL0YS17

// add key2 to m005 array rec
Function KL0YS18()
   /* ********************************************************************/
   /* maintenance log*/
   /* 04-13-92  twatso  renamed clacmind to cl-clcom-fl*/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC*/

   /* ********************************************************************/
  CLXREC.CLXCPROC = "CL0YS18"; /* set current proc name*/

   /* add key2 to m005 array rec*/

   /* TCS change begins - 11-29-01*/
   /* CL0YW03.CL0YW3TL(CL0YWDX7) = CL0YW03.CL0YW3TL(CL0YWDX7) +*/
   /* CLPREC.CLPDEFQ;*/
  CL0YW03.CL0YW3TL[CL0YWDX7] = CL0YW03.CL0YW3TL[CL0YWDX7] +                                DIT03REC.CLPDEFQ;
   /* CL0YW03.CLNNCRQ(CL0YWDX7) = CL0YW03.CLNNCRQ(CL0YWDX7) +*/
   /* CLPREC.CLNNCRQ;*/
  CL0YW03.CLNNCRQ[CL0YWDX7] = CL0YW03.CLNNCRQ[CL0YWDX7] +                                 DIT03REC.CLNNCRQ;

   /* MOVE CLPREC.YDFCD TO CL0YW03.CL0YWYD2(CL0YWDX7);*/
  CL0YW03.CL0YWYD2[CL0YWDX7] = DIT03REC.YDFCD;
   /* MOVE CLPREC.CLPDEFQ TO CL0YW03.CL0YWDQ2(CL0YWDX7);*/
  CL0YW03.CL0YWDQ2[CL0YWDX7] = DIT03REC.CLPDEFQ;
   /* MOVE CLPREC.CLKCLPRC TO CL0YW03.CL0YWPC2(CL0YWDX7);*/
  CL0YW03.CL0YWPC2[CL0YWDX7] = DIT03REC.CLKCLPRC;
   /* MOVE CLPREC.CL-CLCOM-FL TO CL0YW03.CL0YWMN2(CL0YWDX7);*/
  CL0YW03.CL0YWMN2[CL0YWDX7] = DIT03REC.CL-CLCOM-FL;
   /* MOVE CLPREC.CLGCMSEQ TO CL0YW03.CL0YWCS2(CL0YWDX7);*/
  CL0YW03.CL0YWCS2[CL0YWDX7] = DIT03REC.CLGCMSEQ;
   /* MOVE CLPREC.ZZZCHGCT TO CL0YW03.CL0YWZC2(CL0YWDX7);*/
  CL0YW03.CL0YWZC2[CL0YWDX7] = DIT03REC.ZZZCHGCT;

   /* add comment if clprec has comment and key1 did not*/
   /* IF CLPREC.CL-CLCOM-FL = 'Y'*/
   /* AND CL0YW03.CLGCOMNT(CL0YWDX7) = ' ';*/
  if (DIT03REC.CL-CLCOM-FL == "Y"
   && CL0YW03.CLGCOMNT[CL0YWDX7] == " ")
   /* MOVE CLPREC.CLACLMNB TO CLGREC.CLACLMNB;*/
    CLGREC.CLACLMNB = DIT03REC.CLACLMNB;
   /* MOVE CLPREC.CLHSEQNB TO CLGREC.CLHSEQNB;*/
    CLGREC.CLHSEQNB = DIT03REC.CLHSEQNB;
   /* MOVE CLPREC.CL2ISNBR TO CLGREC.CL2ISNBR;*/
    CLGREC.CL2ISNBR = DIT03REC.CL2ISNBR;
   /* TCS change ends - 11-29-01*/

    CLGREC.CLGCMTYP = "D";

   /* TCS Change begins - 11-29-01*/
   /* MOVE CLPREC.CLGCMSEQ TO CLGREC.CLGCMSEQ;*/
    CLGREC.CLGCMSEQ = DIT03REC.CLGCMSEQ;
   /* TCS Change ends   - 11-29-01*/
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS65(); /* select unique clgrec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0YW03.CLGCOMNT[CL0YWDX7] = CLGREC.CLGCOMNT;
    end
  end

  CL0YW01.CL0YWCHK = "N";

end // end KL0YS18

// fill in m005 detail rec area
Function KL0YS19()
   /* *************************************************************/
   /* KL0YS19  --  FILL IN M005 DETAIL RECORD AREA*/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* -----------------------------------------------------------**/
   /* 06-14-90  CHELLM  Renamed FY2FCTPO to PC3POIDT.           **/
   /* 06-11-93  GDECKE  MOVE SEASON CODE WHEN PO MOVED.         **/
   /* 06-03-94  sgorga  Replace yddcd (duty cd) with size desc. **/
   /* Code added to perform new process that trans- **/
   /* lates sz id to sz desc (kl0ys-szid-translt)   **/
   /* 05-15-97  HMACAL  Set default value for Defect Code & Qty **/
   /* 06-20-97  HMACAL  Set up key fields to get Size Id desc   **/
   /* 04-19-99  GDECKE  CHANGED DEF CODE DEFAULT FROM 999 TO SPACES.*/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0YS19"; /* set current proc name*/

   /* fill in screen detail - if avail*/

   /* if from cl0z*/
  if (CLWREC.CLWYZSWT == "Z")
    CL0YW01.CL0YWDX8 = CL0YW01.CL0YWDX8 + 1; /* dummy set up for array chks*/
    KL0YM005.SY1STNBR = CLWREC.SY1STNBR;
    KL0YM005.SY2CLRID = CLWREC.SY2CLRID;
    KL0YM005.XDMCD = CLWREC.XDMCD;
    KL0YM005.XUMCD = CLWREC.XUMCD;
    set KL0YM005.SY1STNBR skip;
    set KL0YM005.SY2CLRID skip;
    set KL0YM005.XDMCD skip;
    if (KL0YM005.XGPCD == "02")
      set KL0YM005.XUMCD skip;
      set KL0YM005.SY-SZ-ID-DESC cursor;
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[4];
    else
      set KL0YM005.XUMCD cursor;
      set KL0YM005.CLENBRCT skip, invisible;
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[7];
    end
    return;
  end

  CL0YW01.CL0YWDX8 = CL0YW01.CL0YWDX8 + 1;
  KL0YM005.SY1STNBR = CL0YW03.SY1STNBR[CL0YWDX8];
  KL0YM005.SY2CLRID = CL0YW03.SY2CLRID[CL0YWDX8];
  KL0YM005.XDMCD = CL0YW03.XDMCD[CL0YWDX8];
  KL0YM005.XUMCD = CL0YW03.XUMCD[CL0YWDX8];
  KL0YM005.XQACD = CL0YW03.XQACD[CL0YWDX8];

   /* =============================================================*/
   /* size id  -  if size id not blank, translate to size desc &*/
   /* move to map; else move ' ' to map*/

   /* hmacal - 06/20/97*/
   /* IF KL0YM005.XGPCD = '02';*/
   /* SET KL0YM005.SY-SZ-ID-DESC NORMAL;*/
   /* END;*/

  if (KL0YM005.XGPCD == "02"
   && CLWREC.CLWMNOPT == 9
   && CL0YW03.SY-SZ-ID[CL0YWDX8] == 0) /* If no size id for clm's product*/
    KL0YM005.SY-SZ-ID-DESC = " "; /* move spaces to map size field*/
  else
    if (KL0YM005.XGPCD == "02"
     && CLWREC.CLWMNOPT == 9)

      set SYPREC empty;

      SYPREC.SY1STNBR = CL0YW03.SY1STNBR[CL0YWDX8];
      SYPREC.SY2CLRID = CL0YW03.SY2CLRID[CL0YWDX8];
      SYPREC.XDMCD = CL0YW03.XDMCD[CL0YWDX8];
   /* TCS change begins - 11-29-01*/
   /* MOVE CLPREC.XGPCD TO SYPREC.XGPCD;*/
      SYPREC.XGPCD = DIT03REC.XGPCD;
   /* TCS change ends  - 11-29-01*/
      SYPREC.XQACD = "**";
      SYPREC.SYPFC = "PC";
      SYPREC.SYPCMPSW = "C";

      KL0YS-GET-SIZ-DESC(); /* get size desc that matches the size id*/

      if (SYPREC.SYPRC == 0)
        CL0YW01.KL0YW-SY-SZ-ID-FND-FL = "N"; /* init size found flag*/
        sysVar.arrayIndex = 1;
        while (sysVar.arrayIndex <= 40) /* read array (from sy1120) to get sz desc*/
          if (CL0YW03.SY-SZ-ID[CL0YWDX8] == SYPREC.SY5SZID[sysVar.arrayIndex])
            KL0YM005.SY-SZ-ID-DESC = SYPREC.SY4IDDSC[sysVar.arrayIndex];
            CL0YW01.KL0YW-SY-SZ-ID-FND-FL = "Y";
            sysVar.arrayIndex = 41; /* to force loop end*/
          else
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end
        if (CL0YW01.KL0YW-SY-SZ-ID-FND-FL == "N") /* if clprec sz not found*/
          KL0YM005.SY-SZ-ID-DESC = "UNKWN"; /* invalid size on databas*/
          CL0YW01.KL0YW-HLD-BAD-SY-SZ-ID = CL0YW03.SY-SZ-ID[CL0YWDX8];
          if (CL0YW01.KL0YW-SZ-WARNING-FL == "N") /* hasn't been warned yet*/
            set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
            converseLib.validationFailed(764); /* warning msg - size on vdefit01 not valid*/
            CLXREC.CLXERRF = "Y";
          end
        end
        if (CL0YW03.SY-SZ-ID[CL0YWDX8] == 0) /* If blank, no match was found*/
          KL0YM005.SY-SZ-ID-DESC = " "; /* so move spaces to map size*/
        end
      else
        if (SYPREC.SYPRC == 9)
          set KL0YM005.SY-SZ-ID-DESC cursor, modified, bold;
          converseLib.validationFailed(4); /* (-911  Database busy - please try again)*/
        end
      end
    end
  end

   /* =================================================================*/
   /* PO Date conversion added 06-14-90*/
   /* MOVE CL0YW03.PC3POIDT(CL0YWDX8) TO CLXREC.XXXWCYMD;*/
   /* MOVE CLXREC.XXXWYMD TO KL0YM005.CLPFTYPO;*/

  if (CL0YW03.PC3POIDT[CL0YWDX8] == 0)
    CL0YW01.KL0YW-PO-TEST-CHA-CYMM = " ";
  else
    CL0YW01.KL0YW-PO-TEST-NUM-CYMM = CL0YW03.PC3POIDT[CL0YWDX8];
  end
  if (KL0YM005.XGPCD == "03")
    CL0YW01.KL0YW-PO-TEST-CHA-Y = CL0YW03.PCFSECD[CL0YWDX8];
  end
  KL0YM005.CLPFTYPO = CL0YW01.KL0YW-PO-TEST-CHA-YMM;

  KL0YM005.FY1FCTYC = CL0YW03.FY1FCTYC[CL0YWDX8];
  KL0YM005.CLENBRCT = CL0YW03.CLPCRTNB[CL0YWDX8];

   /* Set default values for Defect Code and Quantity*/

  if (KL0YM005.XGPCD == "02" && 
  CL0YW03.YDRCD[CL0YWDX8] == " " && 
  CL0YW03.CL0YWYD1[CL0YWDX8] == " ")
    if (CL0YW01.KL0YW-INPUT-MODE == "K") /* If in Keyboard Mode*/
      KL0YM005.CL0YMDC1 = "   "; /* Default Def Code TO SPACES*/
    else /* Else, in Scan Mode*/
      KL0YM005.CL0YMDC1 = "   "; /* No Default Defect Code*/
    end
    KL0YM005.CL0YMDQ1 = 1; /* Set default Qty to 1*/
  else
    if (KL0YM005.XGPCD == "03" && 
    CL0YW03.YDRCD[CL0YWDX8] == " " && 
    CL0YW03.CL0YWYD1[CL0YWDX8] == " ")
      KL0YM005.CL0YMDC1 = " "; /* No default Defect Code*/
      KL0YM005.CL0YMDQ1 = 0; /* No default Quantity*/
    else
      KL0YM005.CL0YMDC1 = CL0YW03.CL0YWYD1[CL0YWDX8];
      KL0YM005.CL0YMDQ1 = CL0YW03.CL0YWDQ1[CL0YWDX8];
    end
  end

  KL0YM005.CL0YMDC2 = CL0YW03.CL0YWYD2[CL0YWDX8];
  KL0YM005.CL0YMDQ2 = CL0YW03.CL0YWDQ2[CL0YWDX8];
  KL0YM005.CL0YMCRQ = CL0YW03.CL0YW3TL[CL0YWDX8];
  KL0YM005.CL0YMNCC = CL0YW03.YDRCD[CL0YWDX8];
  KL0YM005.CL0YMNCQ = CL0YW03.CLNNCRQ[CL0YWDX8];
  KL0YM005.CLGCOMNT = CL0YW03.CLGCOMNT[CL0YWDX8];
end // end KL0YS19

// delete clprec key1
Function KL0YS20()
     /* KL0YS20  --  DELETE CLPREC KEY1*/
   /* *************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G       **/
   /* *----------------------------------------------------------**/
   /* *   date     pgmr    description                           **/
   /* *----------------------------------------------------------**/
   /* * 06-14-90  CHELLM   Renamed FY2FTYPO to PC3POIDT.         **/
   /* * 06-15-93  GDECKE   ALLOW APPAREL PO AND FACTORY ENTRY.   **/
   /* * 02-28-94  JCAREY   CHANGED INITIALIZATION OF APPAREL PO  **/
   /* *                    SEASON CODE FROM XBK-BK-SESN-CD TO    **/
   /* *                    PC-PO-ID-SESN-ID. XBK HAD BEEN A      **/
   /* *                    TEMPORARY FIX UNTIL DATABASE UPDATED. **/
   /* * 06-03-94  sgorga   Replaced duty cd (yddcd) with size id.**/
   /* * 11-28-01  SVIJAY   REPLACED CLPREC BY DIT03REC FOR IO    **/
   /* *                    MOD VDEFIT03.                         **/
   /* *************************************************************/


  CLXREC.CLXCPROC = "KL0YS20"; /* set current proc name*/

   /* delete clprec key1 - using old key*/


   /* TCS CHANGE BEGINS - 11/28/01*/
   /* MOVE KL0YM005.CLACLMNB TO CLPREC.CLACLMNB;*/
   /* MOVE KL0YM005.CL0YMINB TO CLPREC.CL2ISNBR;*/
   /* MOVE KL0YM005.CLHSEQNB TO CLPREC.CLHSEQNB;*/
   /* MOVE KL0YM005.XGPCD TO CLPREC.XGPCD;*/
   /* ;*/
   /* MOVE CL0YW03.SY1STNBR(CL0YWDX8) TO CLPREC.SY1STNBR;*/
   /* MOVE CL0YW03.SY2CLRID(CL0YWDX8) TO CLPREC.SY2CLRID;*/
   /* MOVE CL0YW03.XDMCD(CL0YWDX8) TO CLPREC.XDMCD;*/
   /* IF KL0YM005.XGPCD = '02';*/
   /* MOVE CL0YW03.SY-SZ-ID(CL0YWDX8) TO CLPREC.SY-SZ-ID;*/
   /* ELSE;*/
   /* MOVE 0 TO CLPREC.SY-SZ-ID;*/
   /* END;*/
   /* MOVE CL0YW03.XUMCD(CL0YWDX8) TO CLPREC.XUMCD;*/
   /* MOVE CL0YW03.XQACD(CL0YWDX8) TO CLPREC.XQACD;*/
   /* MOVE CL0YW03.CL0YWPC1(CL0YWDX8) TO CLPREC.CLKCLPRC;*/
   /* MOVE CL0YW03.FY1FCTYC(CL0YWDX8) TO CLPREC.FY1FCTYC;*/
   /* MOVE CL0YW03.PC3POIDT(CL0YWDX8) TO CLPREC.PC3POIDT;*/
   /* IF KL0YM005.XGPCD = '03';*/
   /* MOVE CL0YW03.PCFSECD(CL0YWDX8) TO CLPREC.PC-PO-ID-SESN-CD;*/
   /* ELSE;*/
   /* MOVE ' ' TO CLPREC.PC-PO-ID-SESN-CD;*/
   /* END;*/
   /* ;*/
   /* MOVE CL0YW03.CLPCRTNB(CL0YWDX8) TO CLPREC.CLPCRTNB;*/
   /* MOVE CL0YW03.CL0YWYD1(CL0YWDX8) TO CLPREC.YDFCD;*/
   /* MOVE '0' TO CLPREC.IV0PARTN;*/
   /* MOVE 0 TO CLPREC.IV0IVCID;*/
  DIT03REC.CLACLMNB = KL0YM005.CLACLMNB;
  DIT03REC.CL2ISNBR = KL0YM005.CL0YMINB;
  DIT03REC.CLHSEQNB = KL0YM005.CLHSEQNB;
  DIT03REC.XGPCD = KL0YM005.XGPCD;

  DIT03REC.SY1STNBR = CL0YW03.SY1STNBR[CL0YWDX8];
  DIT03REC.SY2CLRID = CL0YW03.SY2CLRID[CL0YWDX8];
  DIT03REC.XDMCD = CL0YW03.XDMCD[CL0YWDX8];
  if (KL0YM005.XGPCD == "02")
    DIT03REC.SY-SZ-ID = CL0YW03.SY-SZ-ID[CL0YWDX8];
  else
    DIT03REC.SY-SZ-ID = 0;
  end
  DIT03REC.XUMCD = CL0YW03.XUMCD[CL0YWDX8];
  DIT03REC.XQACD = CL0YW03.XQACD[CL0YWDX8];
  DIT03REC.CLKCLPRC = CL0YW03.CL0YWPC1[CL0YWDX8];
  DIT03REC.FY1FCTYC = CL0YW03.FY1FCTYC[CL0YWDX8];
  DIT03REC.PC3POIDT = CL0YW03.PC3POIDT[CL0YWDX8];
  if (KL0YM005.XGPCD == "03")
    DIT03REC.PC-PO-ID-SESN-CD = CL0YW03.PCFSECD[CL0YWDX8];
  else
    DIT03REC.PC-PO-ID-SESN-CD = " ";
  end

  DIT03REC.CLPCRTNB = CL0YW03.CLPCRTNB[CL0YWDX8];
  DIT03REC.YDFCD = CL0YW03.CL0YWYD1[CL0YWDX8];
  DIT03REC.IV0PARTN = "0";
  DIT03REC.IV0IVCID = 0;

   /* TCS CHANGE ENDS - 11/28/01*/
   /* delete record*/
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS76(); /* delete unique clprec*/
  end

end // end KL0YS20

// delete clprec key2
Function KL0YS21()
      /* KL0YS21  --  DELETE CLPREC KEY2*/
   /* **************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* *-----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                             **/
   /* *-----------------------------------------------------------**/
   /* * 06-14-90  CHELLM  Renamed FY2FTYPO to PC3POIDT.           **/
   /* * 06-11-93  GDECKE  MOVE SEASON CODE WHEN PO MOVED          **/
   /* * 02-28-94  JCAREY  CHANGED APPAREL PO SEASON CODE          **/
   /* *                   INITIALIZATION FROM XBK-BK-SESN-CD TO   **/
   /* *                   PC-PO-ID-SESN-CD. XBK WAS A TEMPORARY   **/
   /* *                   FIX UNTIL DATABASE WAS UPDATED.         **/
   /* * 06-03-94  sgorga  Replace duty cd (yddcd) with size id.   **/
   /* * 11-28-01  SVIJAY  ADDED NEW RECORD(DIT03REC) FOR VDEFIT03 **/
   /* **************************************************************/


  CLXREC.CLXCPROC = "KL0YS21"; /* set current proc name*/

   /* delete clprec key2 - using old key*/


   /* TCS CHANGE BEGINS - 11/28/01*/
   /* MOVE KL0YM005.CLACLMNB TO CLPREC.CLACLMNB;*/
   /* MOVE KL0YM005.CL0YMINB TO CLPREC.CL2ISNBR;*/
   /* MOVE KL0YM005.CLHSEQNB TO CLPREC.CLHSEQNB;*/
   /* MOVE KL0YM005.XGPCD TO CLPREC.XGPCD;*/

   /* MOVE CL0YW03.SY1STNBR(CL0YWDX8) TO CLPREC.SY1STNBR;*/
   /* MOVE CL0YW03.SY2CLRID(CL0YWDX8) TO CLPREC.SY2CLRID;*/
   /* MOVE CL0YW03.XDMCD(CL0YWDX8) TO CLPREC.XDMCD;*/
   /* IF KL0YM005.XGPCD = '02';*/
   /* MOVE CL0YW03.SY-SZ-ID(CL0YWDX8) TO CLPREC.SY-SZ-ID;*/
   /* ELSE;*/
   /* MOVE 0 TO CLPREC.SY-SZ-ID;*/
   /* END;*/
   /* MOVE CL0YW03.XUMCD(CL0YWDX8) TO CLPREC.XUMCD;*/
   /* MOVE CL0YW03.XQACD(CL0YWDX8) TO CLPREC.XQACD;*/
   /* MOVE CL0YW03.CL0YWPC2(CL0YWDX8) TO CLPREC.CLKCLPRC;*/
   /* MOVE CL0YW03.FY1FCTYC(CL0YWDX8) TO CLPREC.FY1FCTYC;*/
   /* MOVE CL0YW03.PC3POIDT(CL0YWDX8) TO CLPREC.PC3POIDT;*/
   /* IF KL0YM005.XGPCD = '03';*/
   /* MOVE CL0YW03.PCFSECD(CL0YWDX8) TO CLPREC.PC-PO-ID-SESN-CD;*/
   /* ELSE;*/
   /* MOVE ' ' TO CLPREC.PC-PO-ID-SESN-CD;*/
   /* END;*/
   /* MOVE CL0YW03.CLPCRTNB(CL0YWDX8) TO CLPREC.CLPCRTNB;*/
   /* MOVE CL0YW03.CL0YWYD2(CL0YWDX8) TO CLPREC.YDFCD;*/
   /* MOVE '0' TO CLPREC.IV0PARTN;*/
   /* MOVE 0 TO CLPREC.IV0IVCID;*/

   /* delete record*/
   /* CALL IO1350 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
   /* CALL VDEFIT03 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  DIT03REC.CLACLMNB = KL0YM005.CLACLMNB;
  DIT03REC.CL2ISNBR = KL0YM005.CL0YMINB;
  DIT03REC.CLHSEQNB = KL0YM005.CLHSEQNB;
  DIT03REC.XGPCD = KL0YM005.XGPCD;

  DIT03REC.SY1STNBR = CL0YW03.SY1STNBR[CL0YWDX8];
  DIT03REC.SY2CLRID = CL0YW03.SY2CLRID[CL0YWDX8];
  DIT03REC.XDMCD = CL0YW03.XDMCD[CL0YWDX8];
  if (KL0YM005.XGPCD == "02")
    DIT03REC.SY-SZ-ID = CL0YW03.SY-SZ-ID[CL0YWDX8];
  else
    DIT03REC.SY-SZ-ID = 0;
  end
  DIT03REC.XUMCD = CL0YW03.XUMCD[CL0YWDX8];
  DIT03REC.XQACD = CL0YW03.XQACD[CL0YWDX8];
  DIT03REC.CLKCLPRC = CL0YW03.CL0YWPC2[CL0YWDX8];
  DIT03REC.FY1FCTYC = CL0YW03.FY1FCTYC[CL0YWDX8];
  DIT03REC.PC3POIDT = CL0YW03.PC3POIDT[CL0YWDX8];
  if (KL0YM005.XGPCD == "03")
    DIT03REC.PC-PO-ID-SESN-CD = CL0YW03.PCFSECD[CL0YWDX8];
  else
    DIT03REC.PC-PO-ID-SESN-CD = " ";
  end
  DIT03REC.CLPCRTNB = CL0YW03.CLPCRTNB[CL0YWDX8];
  DIT03REC.YDFCD = CL0YW03.CL0YWYD2[CL0YWDX8];
  DIT03REC.IV0PARTN = "0";
  DIT03REC.IV0IVCID = 0;

   /* delete record*/
  call "VDEFIT03" ("D ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS CHANGE ENDS - 11/28/01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
     /* abend since key1 rec deleted and not yet added back*/
    TA1REC.TA1LOCAT[2] = "CL0YS21"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS21

// add new clprec 1 & 2
Function KL0YS22()
   /* KL0YS22  --  ADD NEW CLPREC  1 & 2*/
   /* *************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 06-14-90  CHELLM  Renamed FY2FTYPO to PC3POIDT.*/
   /* 06-22-90  CHELLM  corrected PO Nbr date conversion.*/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl*/
   /* 06-15-93  GDECKE  ALLOW APPAREL PO AND FACTORY INPUT*/
   /* 10-11-93  GDECKE  bypass edit for 'duplicate' row*/
   /* 02-28-94  JCAREY  Changed the storage of pcfsecd to*/
   /* pc-po-id-sesn-cd. We temporarily used*/
   /* xbk-bk-sesn-cd until database updated.*/
   /* This is only for apparel.*/
   /* 06-03-94  sgorga  Replaced yddcd (duty code) with size id.*/
   /* 05-14-97  HMACAL  Store Carton Nbr like 3-digit numeric*/
   /* 09-19-97  HMACAL  Blank out Carton Nbr when Denial Code is*/
   /* specified;*/
   /* 11-29-01  AALAGA  Changed clprec to DIT03REC*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0YS22"; /* set current proc name*/

   /* TCS Change begins - 11-29-01*/
   /* SET CLPREC EMPTY;*/
  set DIT03REC empty;
   /* TCS Change ends - 11-29-01*/
   /* add new clprec 1 & 2*/

   /* build key and check for dup add*/
   /* TCS change begins - 11-29-01*/
   /* MOVE KL0YM005.CLACLMNB TO CLPREC.CLACLMNB;*/
  DIT03REC.CLACLMNB = KL0YM005.CLACLMNB;
   /* MOVE KL0YM005.CLHSEQNB TO CLPREC.CLHSEQNB;*/
  DIT03REC.CLHSEQNB = KL0YM005.CLHSEQNB;
   /* MOVE KL0YM005.CL0YMINB TO CLPREC.CL2ISNBR;*/
  DIT03REC.CL2ISNBR = KL0YM005.CL0YMINB;
   /* MOVE KL0YM005.XGPCD TO CLPREC.XGPCD;*/
  DIT03REC.XGPCD = KL0YM005.XGPCD;
   /* MOVE KL0YM005.SY1STNBR TO CLPREC.SY1STNBR;*/
  DIT03REC.SY1STNBR = KL0YM005.SY1STNBR;
   /* MOVE KL0YM005.SY2CLRID TO CLPREC.SY2CLRID;*/
  DIT03REC.SY2CLRID = KL0YM005.SY2CLRID;
   /* MOVE KL0YM005.XDMCD TO CLPREC.XDMCD;*/
  DIT03REC.XDMCD = KL0YM005.XDMCD;
   /* TCS change ends  - 11-29-01*/

   /* Regarding below hold-bad-size code:   In stmt group KL0YS19 -*/
   /* if, for some reason, the size id being stored on the defit01*/
   /* (clprec) database is no longer valid, the invalid size is*/
   /* stored in the cl0yw01.kl0yw-hld-bad-sy-sz-id field.*/
   /* Below is where clprec is being 're-built'.  Even if size id is*/
   /* invalid, we want to restore clprec with the (original invalid)*/
   /* size.  That is what below code is doing.*/

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.KL0YW-HLD-BAD-SY-SZ-ID == 0) /* there isn't an invalid size*/

   /* /TCS Change begins - 11-29-01*/
   /* MOVE CL0YW01.KL0YW-HLD-SY-SZ-ID TO CLPREC.SY-SZ-ID;/*store original sz*/
    DIT03REC.SY-SZ-ID = CL0YW01.KL0YW-HLD-SY-SZ-ID; /* store original sz*/
   /* /TCS Change ends   - 11-29-01*/

  else
    if (KL0YM005.XGPCD == "02"
     && CL0YW01.KL0YW-HLD-BAD-SY-SZ-ID != 0) /* there IS an invalid size*/

   /* /TCS Change begins - 11-29-01*/
   /* MOVE CL0YW01.KL0YW-HLD-BAD-SY-SZ-ID TO CLPREC.SY-SZ-ID;/*store it ...*/
      DIT03REC.SY-SZ-ID = CL0YW01.KL0YW-HLD-BAD-SY-SZ-ID; /* store it ...*/
    else
   /* MOVE 0 TO CLPREC.SY-SZ-ID;/* if not footwear claim, size is 0*/
      DIT03REC.SY-SZ-ID = 0; /* if not footwear claim, size is 0*/
   /* /TCS Change ends   - 11-29-01*/

    end
  end

   /* /TCS Change begins - 11-29-01*/
   /* MOVE KL0YM005.XUMCD TO CLPREC.XUMCD;*/
  DIT03REC.XUMCD = KL0YM005.XUMCD;
   /* MOVE KL0YM005.XQACD TO CLPREC.XQACD;*/
  DIT03REC.XQACD = KL0YM005.XQACD;
   /* MOVE '0' TO CLPREC.IV0PARTN;*/
  DIT03REC.IV0PARTN = "0";
   /* MOVE 0 TO CLPREC.IV0IVCID;*/
  DIT03REC.IV0IVCID = 0;
   /* /TCS Change ends   - 11-29-01*/

   /* look up price*/
  XX0XS01(); /* format date and time - used in*/
                                   /* cl0ys34*/
  KL0YS34(); /* look up price*/

   /* final price check - uom conversion if needed*/

   /* TCS change begins -  11-29-01*/
   /* IF CLPREC.CLKCLPRC = 0;*/
  if (DIT03REC.CLKCLPRC == 0)
   /* TCS Change ends - 11-29-01*/
     /* next sentence*/
  else
    if (CL0YW01.CL0YWPFL == "SY1")
      if (SY1REC.XUMCD != "01"
       && KL0YM005.XUMCD == "01")
        if (SY1REC.XUMCD in XUMTBL.XUMCD)
   /* TCS Change begins -  11-29-01*/
   /* CLPREC.CLKCLPRC = CLPREC.CLKCLPRC / XUMTBL.XUMCONVF(EZETST);*/
          DIT03REC.CLKCLPRC = DIT03REC.CLKCLPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        else
   /* MOVE 0 TO CLPREC.CLKCLPRC;*/
          DIT03REC.CLKCLPRC = 0;
   /* TCS Change ends   -  11-29-01*/
          converseLib.validationFailed(374);
        end
      end
    else
      if (CLKREC.XUMCD != "01"
       && KL0YM005.XUMCD == "01")
        if (CLKREC.XUMCD in XUMTBL.XUMCD)
   /* TCS Change begins -  11-29-01*/
   /* CLPREC.CLKCLPRC = CLPREC.CLKCLPRC / XUMTBL.XUMCONVF(EZETST);*/
          DIT03REC.CLKCLPRC = DIT03REC.CLKCLPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        else
   /* MOVE 0 TO CLPREC.CLKCLPRC;*/
          DIT03REC.CLKCLPRC = 0;
   /* TCS Change ends   -  11-29-01*/
          converseLib.validationFailed(374);
        end
      end
    end
  end

   /* TCS Change begins -  11-29-01*/
   /* MOVE KL0YM005.FY1FCTYC TO CLPREC.FY1FCTYC;*/
  DIT03REC.FY1FCTYC = KL0YM005.FY1FCTYC;
   /* TCS Change ends   -  11-29-01*/

   /* MOVE KL0YM005.CLENBRCT TO CLPREC.CLPCRTNB;*/
  if (KL0YM005.CL0YMNCC != " ")

   /* TCS Change begins -  11-29-01*/
   /* MOVE ' ' TO CLPREC.CLPCRTNB;*/
    DIT03REC.CLPCRTNB = " ";
  else
   /* MOVE CL0YW01.CLPCRTNB TO CLPREC.CLPCRTNB;*/
    DIT03REC.CLPCRTNB = CL0YW01.CLPCRTNB;
   /* TCS Change ends   -  11-29-01*/

  end

   /* PO Date conversion added 06-14-90*/
   /* Changed xbk-bk-sesn-cd to pc-po-id-sesn-cd 02-10-94*/
  if (KL0YM005.CLPFTYPO != " ")
    KL0YS-VFY-APRL-PO(); /* check for valid po format*/
    if (CL0YW01.KL0YW-PO-FMT-VALID-FL == "Y")
   /* TCS change begins -  11-29-01*/
   /* MOVE CL0YW01.KL0YW-PO-TEST-NUM-CYMM TO CLPREC.PC3POIDT;*/
      DIT03REC.PC3POIDT = CL0YW01.KL0YW-PO-TEST-NUM-CYMM;
   /* TCS Change ends   -  11-29-01*/
      if (KL0YM005.XGPCD == "03") /* move season code if apparel prod.*/
   /* TCS change begins -  11-29-01*/
   /* MOVE CL0YW01.PCFSECD TO CLPREC.PC-PO-ID-SESN-CD;*/
        DIT03REC.PC-PO-ID-SESN-CD = CL0YW01.PCFSECD;
      else
   /* MOVE ' ' TO CLPREC.PC-PO-ID-SESN-CD;*/
        DIT03REC.PC-PO-ID-SESN-CD = " ";
      end
    else
   /* MOVE 0 TO CLPREC.PC3POIDT;*/
      DIT03REC.PC3POIDT = 0;
   /* MOVE ' ' TO CLPREC.PC-PO-ID-SESN-CD;*/
      DIT03REC.PC-PO-ID-SESN-CD = " ";
    end
  else
   /* MOVE 0 TO CLPREC.PC3POIDT;*/
    DIT03REC.PC3POIDT = 0;
   /* MOVE ' ' TO CLPREC.PC-PO-ID-SESN-CD;*/
    DIT03REC.PC-PO-ID-SESN-CD = " ";
   /* TCS change ends - 11-29-01*/
  end

   /* check for dup add on key1*/

   /* TCS Change begins - 11-29-01*/
   /* MOVE KL0YM005.CL0YMDC1 TO CLPREC.YDFCD;*/
  DIT03REC.YDFCD = KL0YM005.CL0YMDC1;
   /* MOVE KL0YM005.CL0YMNCC TO CLPREC.YDRCD;*/
  DIT03REC.YDRCD = KL0YM005.CL0YMNCC;
   /* TCS change ends -  11-29-01*/
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS66(); /* select unique clprec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
   /* TCS Change begins - 11-29-01*/
   /* IF CLPREC.CL-CLCOM-FL = 'Y'    /* check for comment err*/
    if (DIT03REC.CL-CLCOM-FL == "Y" /* check for comment err*/
     && KL0YM005.CLGCOMNT != " ")  
   /* TCS change ends  - 11-29-01*/

      converseLib.validationFailed(527); /* dup record has comment - cannot upd*/
      set KL0YM005.CLGCOMNT cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
    /* IF CLPREC.YDRCD NE ' '         /* check for non cr cd in old*/
     /* AND KL0YM005.CL0YMNCC NE ' ';/* and in new*/
     /* MOVE 546 TO EZEMNO;*/
                                  /* dup record has non cr cd - cannot upd*/
     /* SET KL0YM005.CL0YMNCC CURSOR,MODIFIED,BRIGHT;*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
     /* EZERTN;*/
    /* END;*/
    KL0YS89(); /* upd key 1 clprec*/
  else
    KL0YS90(); /* build general rec data*/
    KL0YS91(); /* build key 1 rec data*/
    KL0YS92(); /* add new key 1 clprec*/
  end

   /* check for dup add on key2*/

  if (KL0YM005.CL0YMDC2 == " ") /* no key 2 add*/
     /* next sentence*/
  else
   /* TCS change begins - 11-29-01*/
   /* MOVE KL0YM005.CL0YMDC2 TO CLPREC.YDFCD;*/
    DIT03REC.YDFCD = KL0YM005.CL0YMDC2;
   /* MOVE '  ' TO CLPREC.YDRCD;*/
    DIT03REC.YDRCD = "  ";
   /* TCS change ends   - 11-29-01*/

    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS66(); /* select unique clprec*/
    end
    if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0YS93(); /* upd key 2 clprec*/
    else
      KL0YS90(); /* build general rec data*/
      KL0YS94(); /* build key 2 rec data*/
      KL0YS95(); /* add new key2 clprec*/
    end
  end

end // end KL0YS22

// check for old clorec
Function KL0YS23()

  CLXREC.CLXCPROC = "CL0YS23"; /* set current proc name*/

   /* add or update clorec*/

  CLOREC.CLACLMNB = CL0YW01.CLACLMNB;
  CLOREC.CLHSEQNB = CL0YW01.CLHSEQNB;
  CLOREC.CL2ISNBR = CL0YW01.CL2ISNBR;
  if (CL0YW01.CL0YWDHF == "Y") /* defective header exists*/
    KL0YS25(); /* update clorec*/
  else
    KL0YS24(); /* add new clorec*/
  end

end // end KL0YS23

// add clorec
Function KL0YS24()
     /* KL0YS24  --   ADD CLOREC  (VDEFHD01)*/
   /* *****************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G          **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 02-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LBL **/
   /* * 05-04-92  GDECKE  COMPUTE FREIGHT CREDIT IF RPS CLM IS PREPAID*/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID RPS CLAIMS    **/
   /* *                   WITH CARRIER CODE '0927' OR '0200'.        **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.       **/
   /* * 11-29-01  AALAGA  Changed CLPREC to DIT03REC                 **/
   /* *****************************************************************/
  CLXREC.CLXCPROC = "CL0YS24"; /* set current proc name*/

   /* add clorec*/

  CLOREC.CLOTLRID = KL0YM005.CLOTLRID;
   /* add key1 and key2 info together*/

   /* TCS Change begins  11-29-01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ1; /* 1*/
  CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ1; /* 1*/
   /* CL0YW01.CL0YWAMT = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ2; /* 2*/
  CL0YW01.CL0YWAMT = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ2; /* 2*/
   /* TCS Change begins  11-29-01*/

  CLOREC.CLODMAMT = CL0YW01.CL0YWAMT + CL0YW01.CL0YWAM1;
  CLOREC.CLOTDFQY = KL0YM005.CL0YMDQ1 + KL0YM005.CL0YMDQ2;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    if (CLJREC.CL-RPS-LABL-FL != "Y")
      CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
      CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
    else
      if (CLLREC.CL-PPD-COLL-IND == "P")
        if (CLLREC.TF1CARCD == "0927"
         || CLLREC.TF1CARCD == "0200")
          CLOREC.CLOFGAQ = 0;
          CLOREC.CLOFGAAM = 0;
        else
          CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
          CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
        end
      else
        CLOREC.CLOFGAQ = 0;
        CLOREC.CLOFGAAM = 0;
      end
    end
  else
    CLOREC.CLOFGAQ = 0;
    CLOREC.CLOFGAAM = 0;
  end

  CLOREC.CLMTOGL1 = " ";
  CLOREC.CLORCTFL = " ";
  CLOREC.CLOTRCQY = 0;
  CLOREC.CLMTNCRQ = KL0YM005.CL0YMNCQ;

  XX0XS01();
  CLOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* add clorec*/
  call "IO1340" ("A ", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWDHF = "Y"; /* set defective header exists flag*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS24"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1340"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFHD01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS24

// update clorec
Function KL0YS25()
    /* KL0YS25  --  UPDATE CLOREC*/
   /* ******************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y      L O G         **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 03-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLAIM HAS RPS LBL**/
   /* * 05-04-92  GDECKE  COMPUTE FREIGHT CREDIT IF RPS CLM ID PREPAID**/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID RPS CLAIMS WITH**/
   /* *                   CARRIER CODE '0927' OR '0200'.              **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.        **/
   /* * 11-29-01  AALAGA  Changed CLPREC to DIT03REC                  **/
   /* ******************************************************************/
  CLXREC.CLXCPROC = "CL0YS25"; /* set current proc name*/

   /* update clorec*/

  if (CL0YW03.CL0YWYD1[CL0YWDX8] == " " /* no old clprec1*/
   && CL0YW03.YDRCD[CL0YWDX8] == " ")   /* no old clprec1*/
     /* then chg clorec as an additional amt*/
   /* TCS change begins - 11-29-01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ1;/* 1*/
    CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ1; /* 1*/
   /* TCS change ends   - 11-29-01*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAM1;
   /* TCS change begins - 11-29-01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ2;/* 2*/
    CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ2; /* 2*/
   /* TCS change ends   - 11-29-01*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAMT + CL0YW01.CL0YWAM1;
    CL0YW01.CL0YWQTY = KL0YM005.CL0YMDQ1 + KL0YM005.CL0YMDQ2;
    CLOREC.CLOTDFQY = CLOREC.CLOTDFQY + CL0YW01.CL0YWQTY;
    CLOREC.CLODMAMT = CLOREC.CLODMAMT + CL0YW01.CL0YWAMT;
  else
     /* chg clorec as updated amt*/
     /* first subtract old*/
    CL0YW01.CL0YWAM1 = CL0YW01.CL0YWHPC * CL0YW01.CL0YWHQ1; /* 1*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAM1;
    CL0YW01.CL0YWAM1 = CL0YW01.CL0YWHPC * CL0YW01.CL0YWHQ2; /* 2*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAMT + CL0YW01.CL0YWAM1;
    CL0YW01.CL0YWQTY = CL0YW01.CL0YWHQ1 + CL0YW01.CL0YWHQ2;
    CLOREC.CLOTDFQY = CLOREC.CLOTDFQY - CL0YW01.CL0YWQTY;
    CLOREC.CLODMAMT = CLOREC.CLODMAMT - CL0YW01.CL0YWAMT;
     /* then add new*/
   /* TCS change begins  - 11-29-01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ1;/* 1*/
    CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ1; /* 1*/
   /* TCS change ends    - 11-29-01*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAM1;
   /* TCS change begins  - 11-29-01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * KL0YM005.CL0YMDQ2;/* 2*/
    CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * KL0YM005.CL0YMDQ2; /* 2*/
   /* TCS change ends    - 11-29-01*/
    CL0YW01.CL0YWAMT = CL0YW01.CL0YWAMT + CL0YW01.CL0YWAM1;
    CL0YW01.CL0YWQTY = KL0YM005.CL0YMDQ1 + KL0YM005.CL0YMDQ2;
    CLOREC.CLOTDFQY = CLOREC.CLOTDFQY + CL0YW01.CL0YWQTY;
    CLOREC.CLODMAMT = CLOREC.CLODMAMT + CL0YW01.CL0YWAMT;
  end

  CLOREC.CLMTNCRQ = CLOREC.CLMTNCRQ - CL0YW01.CL0YWHNC;
  CLOREC.CLMTNCRQ = CLOREC.CLMTNCRQ + KL0YM005.CL0YMNCQ;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    if (CLJREC.CL-RPS-LABL-FL != "Y")
      CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
      CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
    else
      if (CLLREC.CL-PPD-COLL-IND == "P")
        if (CLLREC.TF1CARCD == "0927"
         || CLLREC.TF1CARCD == "0200")
          CLOREC.CLOFGAQ = 0;
          CLOREC.CLOFGAAM = 0;
        else
          CLOREC.CLOFGAQ = CLOREC.CLOTDFQY;
          CLOREC.CLOFGAAM = CLOREC.CLOFGAQ * CL0YW01.YRMDFRGT;
        end
      else
        CLOREC.CLOFGAQ = 0;
        CLOREC.CLOFGAAM = 0;
      end
    end
  else
    CLOREC.CLOFGAQ = 0;
    CLOREC.CLOFGAAM = 0;
  end

  XX0XS01();
  CLOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* upd clorec*/
  call "IO1340" ("U ", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS25"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1340"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFHD01"; /* table view*/
    CL0YW01.KL0YW-KEY-CLACLMNB = CLOREC.CLACLMNB;
    CL0YW01.KL0YW-KEY-CLHSEQNB = CLOREC.CLHSEQNB;
    CL0YW01.KL0YW-KEY-CL2ISNBR = CLOREC.CL2ISNBR;
    CL0YW01.KL0YW-KEY-SLASH1 = "\\";
    CL0YW01.KL0YW-KEY-SLASH2 = "\\";
    TA1REC.TA1TBLKE = CL0YW01.KL0YW-KEY; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS25

// update cljrec
Function KL0YS27()

  CLXREC.CLXCPROC = "CL0YS27"; /* set current proc name*/

   /* update cljrec*/

  XX0XS01();
  CLJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  CLJREC.CLJNCRFL = KL0YM001.CLJNCRFL;

   /* update record*/
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS27"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRAHDR01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


end // end KL0YS27

// insp cmplt - upd clarec
Function KL0YS28()

   /* ******************************************************************/
   /* /12-02-92 lgross  if this a direct market and inspection is marked*/
   /* /                 'yes' write a tag record to dclaim.vdmact01*/
   /* *****************************************************************/
  CLXREC.CLXCPROC = "CL0YS28"; /* set current proc name*/

   /* inspection completed - update clarec and cl2rec*/
   /* NOTE: Update CLAREC only if CLYATHID not zero*/
     /* 062089 if CLYATHID is zero, chg clarec to new stat 'RPA'*/

  CL0YW01.CL0YWDFL = "Y";
  CL0YW01.CL0YWDCT = 0;
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS67(); /* get current claim header*/
  end

  if (CLXREC.CLXERRF == "Y" /* had error*/
   || SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(18); /* data base changed by other user*/
    end
    return;
  end

  XX0XS01(); /* convert system date and time*/

  if (CL0YW01.CL0YWICF == "Y") /* insp complete - not reset*/
    KL0YS-WRIT-DM(); /* write tag record if direct market*/
    if (CLAREC.CLYATHID != 0) /* and authorized-by not zero*/
      if (CLAREC.YCSCD1 != "RIP" /* if not in rip status*/
       || CLAREC.YCSACTCD != "J") /* or activity code not 'j'*/
        CLAREC.YCSCD2 = CLAREC.YCSCD1;
        CLAREC.YCSCD1 = "RIP";
        CLAREC.YCSACTCD = "J"; /* (hard-coded since ycstbl has 'E')*/
                                         /* (must force claim to batch)*/
        KL0YSHD();
      end
       /* below added 062089*/
    else
      if (CLAREC.YCSCD1 == "RAA"
       || CLAREC.YCSCD1 == "RIP"
       || CLAREC.YCSCD1 == "RPA")
        if (CLAREC.YCSCD1 != "RPA")
          CLAREC.YCSCD2 = CLAREC.YCSCD1;
        end
        CLAREC.YCSCD1 = "RPA"; /* return pending authoriztion*/
        if (CLAREC.YCSCD1 in YCSTBL.YCSCD
         && YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        else
          CLAREC.YCSACTCD = "A"; /* hard-coded to force batch*/
        end
        KL0YSHD(); /* update claim header, clarec*/
      end
       /* above added 062089*/
    end
  end

  CL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  CL2REC.XXXUSRID = CL0YW01.CL0YWUSR;
  CL2REC.CL2ISBDT = CL0YW01.CL0YWDTE;

  if (CL0YW01.CL0YWICF == "Y")
    CL2REC.CL2ISXDT = XX0XW01.XX0XWDAT;
    CL2REC.YCICD = "RMS";
  else
    CL2REC.CL2ISXDT = 0;
    CL2REC.YCICD = "IIP";
  end

   /* IF CL0YW01.CL0YWICF = 'Y';*/
    /* AND CL0YW01.CL0YWRSF = 'Y';*/
    /* MOVE 'RMS' TO CL2REC.YCICD;*/
   /* END ;*/
   /* IF CL0YW01.CL0YWICF = 'Y';*/
    /* AND CL0YW01.CL0YWRSF = 'N';*/
    /* MOVE 'RMO' TO CL2REC.YCICD;*/
   /* END ;*/
   /* IF CL0YW01.CL0YWICF = 'N';*/
    /* AND CL0YW01.CL0YWRSF = 'N';*/
    /* MOVE 'IIP' TO CL2REC.YCICD;*/
   /* END ;*/
   /* IF CL0YW01.CL0YWICF = 'N';*/
    /* AND CL0YW01.CL0YWRSF = 'Y';*/
    /* MOVE 'RSO' TO CL2REC.YCICD;*/
   /* END ;*/

end // end KL0YS28

// edit addr,city,state,zip,ctry
Function KL0YS29()
   /* kl0ys29  --  edit addr, city, state, zip, country*/
   /* *********************************************************************/
   /* *      M A I N T E N A N C E      H I S T O R Y     L O G          **/
   /* *------------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                    **/
   /* *------------------------------------------------------------------**/
   /* * 11-12-93  GDECKE  NOV. 93' DB2 TABLE CHANGES - XA0AW02.XXX-ADDRn **/
   /* *********************************************************************/

    /* check address - use xa0a - address appl*/

  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KL0YM010.XXXADDR1;
  XA0AW02.XXX-ADDR2 = KL0YM010.XXXADDR2;
  XA0AW02.XXX-ADDR3 = KL0YM010.XXXADDR3;
  XA0AW02.XXXCITY = KL0YM010.XXXCITY;
  XA0AW02.XSTCD = KL0YM010.XSTCD;
  XA0AW02.XXXZIP = KL0YM010.XXXZIP;
  XA0AW02.XCTCD = KL0YM010.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/

  call "XA0A" (XA0AW02); /* call address appl*/
  KL0YM010.XCTCD = XA0AW02.XCTCD;

  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KL0YM010.XCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(380);
  else
    set KL0YM010.XCTCD normal;
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KL0YM010.XXXZIP cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(381);
  else
    set KL0YM010.XXXZIP normal;
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KL0YM010.XSTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(382);
  else
    set KL0YM010.XSTCD normal;
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KL0YM010.XXXCITY cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(383);
  else
    set KL0YM010.XXXCITY normal;
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address line*/
    set KL0YM010.XXXADDR3 cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(383);
  else
    set KL0YM010.XXXADDR3 normal;
  end

  KL0YM010.XXXADDR1 = XA0AW02.XXX-ADDR1;
  KL0YM010.XXXADDR2 = XA0AW02.XXX-ADDR2;
  KL0YM010.XXXADDR3 = XA0AW02.XXX-ADDR3;

end // end KL0YS29

// add or update clfrec
Function KL0YS30()
   /* ****** Maintenance Log  *************************************/
   /* 03-11-94  BCourt  Rename CLFREC.xxxaddrn to xxx-addrn.    **/
   /* NOTE - do NOT rename map address names.  Keep 30 chars.**/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0YS30"; /* set current proc name*/

    /* add or update clfrec*/

  XX0XS01();
  CLFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "R";
  CLFREC.CLFADNM = KL0YM010.XXXADNM;
  CLFREC.XXX-ADDR1 = KL0YM010.XXXADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KL0YM010.XXXADDR2; /* to db2 names*/
  CLFREC.XXX-ADDR3 = KL0YM010.XXXADDR3;
  CLFREC.XXXCITY = KL0YM010.XXXCITY;
  CLFREC.XSTCD = KL0YM010.XSTCD;
  CLFREC.XXXZIP = KL0YM010.XXXZIP;
  CLFREC.XCTCD = KL0YM010.XCTCD;

  if (CLAREC.CLARTNFF != "E") /* add clfrec*/
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS30"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CLAREC.CLARTNFF == "E") /* update clfrec*/
    call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS30"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CLAREC.CLARTNFF != "E") /* add occurred above*/
     /* now we will get the claim header to be sure we have*/
     /* the most current one before we update.  This will*/
     /* prevent 100 sqlcode when the clarec is updated.*/
    CL0YW01.CL0YWDFL = "Y";
    CL0YW01.CL0YWDCT = 0;
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS67(); /* get current claim header*/
    end
    if (CLXREC.CLXERRF == "Y" /* had error*/
     || SQLCA.VAGen_SQLCODE != 0)
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(18); /* data base changed by other user*/
      end
      return;
    end
    CLAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    CLAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    CLAREC.CLARTNFF = "E";
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update clarec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS30"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS30

// fetch clprec, delete clp & clg
Function KL0YS32()
   /* *****************************************************************/
   /* maintenance log*/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl*/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC*/
   /*  */
   /* *****************************************************************/

  CLXREC.CLXCPROC = "CL0YS32";

   /* fetch and delete clprecs*/

   /* fetch from cursor*/
   /* CALL IO1350 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS Change begins  11-29-01*/
   /* CALL VDEFIT03 'N1',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("N1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS Change ends    11-29-01*/

  if (SQLCA.VAGen_SQLCODE == 0)
   /* TCS Change begins - 11-29-01*/
   /* IF CLPREC.XQACD NE CL0YW01.CL0YWCQL;*/
    if (DIT03REC.XQACD != CL0YW01.CL0YWCQL)
   /* TCS Change ends   - 11-29-01*/
                                   /* if quality code does not match*/
      return; /* ; quality in clprec then do not*/
    else /* ; delete, but skip to next record*/
       /* next sentence              ; in select set. 'next sentence'*/
    end /* ; will do delete process.*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
   /* CALL IO1350 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;/* close cursor on eof*/

   /* TCS Change begins  11-29-01*/
   /* CALL VDEFIT03 'C1',SQLCA,CLPREC (NOMAPS,NONCSP;/* close cursor on eof*/
      call "VDEFIT03" ("C1", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* close csr on eof*/
   /* TCS Change ends    11-29-01*/

      CL0YW01.CL0YWEND = "Y";
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0YS32"; /* location*/
      TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

   /* build delete totals*/

   /* TCS Change begins - 11-29-01*/
   /* CL0YW01.CL0YWDQT = CL0YW01.CL0YWDQT + CLPREC.CLPDEFQ;*/
  CL0YW01.CL0YWDQT = CL0YW01.CL0YWDQT + DIT03REC.CLPDEFQ;
   /* CL0YW01.CL0YWNCT = CL0YW01.CL0YWNCT + CLPREC.CLNNCRQ;*/
  CL0YW01.CL0YWNCT = CL0YW01.CL0YWNCT + DIT03REC.CLNNCRQ;
   /* CL0YW01.CL0YWAM1 = CLPREC.CLKCLPRC * CLPREC.CLPDEFQ;*/
  CL0YW01.CL0YWAM1 = DIT03REC.CLKCLPRC * DIT03REC.CLPDEFQ;
   /* TCS Change ends   - 11-29-01*/

  CL0YW01.CL0YWAMT = CL0YW01.CL0YWAMT + CL0YW01.CL0YWAM1;

   /* delete clprec*/
   /* CALL IO1350 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS Change begins - 11-29-01*/
   /* CALL VDEFIT03 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("D ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS Change ends   - 11-29-01*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
     /* abend since could be in middle of series of deletes*/
     /* upon which totals are being accumd for upd of clo & cla*/
    TA1REC.TA1LOCAT[2] = "CL0YS32"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* delete comment also*/

   /* TCS change begins - 11-29-01*/
   /* IF CLPREC.CL-CLCOM-FL = 'Y';*/
  if (DIT03REC.CL-CLCOM-FL == "Y")
   /* MOVE CLPREC.CLACLMNB TO CLGREC.CLACLMNB;*/
    CLGREC.CLACLMNB = DIT03REC.CLACLMNB;
   /* MOVE CLPREC.CLHSEQNB TO CLGREC.CLHSEQNB;*/
    CLGREC.CLHSEQNB = DIT03REC.CLHSEQNB;
   /* MOVE CLPREC.CL2ISNBR TO CLGREC.CL2ISNBR;*/
    CLGREC.CL2ISNBR = DIT03REC.CL2ISNBR;
   /* TCS change ends   - 11-29-01*/

    CLGREC.CLGCMTYP = "D";

   /* TCS change begins - 11-29-01*/
   /* MOVE CLPREC.CLGCMSEQ TO CLGREC.CLGCMSEQ;*/
    CLGREC.CLGCMSEQ = DIT03REC.CLGCMSEQ;
   /* TCS change ends   - 11-29-01*/

    call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* get the claim header*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100) /* comment may be shared with prev del*/
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS32"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS32

// upd cl2rec if all clprec delet
Function KL0YS33()
   /* *****************************************************************/
   /* Maintenance History*/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC*/
   /*  */
   /* *****************************************************************/

  CLXREC.CLXCPROC = "CL0YS33";

   /* update cl2rec if all clprecs for inspection are deleted*/

   /* TCS change begins  11-29-01*/
   /* MOVE KL0YM001.CLACLMNB TO CLPREC.CLACLMNB;*/
  DIT03REC.CLACLMNB = KL0YM001.CLACLMNB;
   /* MOVE KL0YM001.CLHSEQNB TO CLPREC.CLHSEQNB;*/
  DIT03REC.CLHSEQNB = KL0YM001.CLHSEQNB;
   /* TCS change ends    11-29-01*/

  CL0YW01.CL0YWISN = KL0YM001.CL0YMINB;

   /* TCS change begins  11-29-01*/
   /* MOVE CL0YW01.CL0YWISN TO CLPREC.CL2ISNBR;*/
  DIT03REC.CL2ISNBR = CL0YW01.CL0YWISN;
   /* MOVE KL0YM001.XGPCD TO CLPREC.XGPCD;*/
  DIT03REC.XGPCD = KL0YM001.XGPCD;
   /* MOVE ' ' TO CLPREC.SY1STNBR;*/
  DIT03REC.SY1STNBR = " ";
   /* TCS change ends    11-29-01*/

   /* CALL IO1350 'S2',SQLCA,CLPREC (NOMAPS,NONCSP; /* build cursor*/

   /* TCS change begins  11-29-01*/
   /* CALL VDEFIT03 'S2',SQLCA,CLPREC (NOMAPS,NONCSP; /* build cursor*/
  call "VDEFIT03" ("S2", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* build cursor*/
   /* TCS change ends    11-29-01*/

   /* CALL IO1350 'N2',SQLCA,CLPREC (NOMAPS,NONCSP;   /* fetch record*/

   /* TCS change begins  11-29-01*/
   /* CALL VDEFIT03 'N2',SQLCA,CLPREC (NOMAPS,NONCSP;   /* fetch record*/
  call "VDEFIT03" ("N2", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* fetch record*/
   /* TCS change ends    11-29-01*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* do not update cl2rec*/
   /* CALL IO1350 'C2',SQLCA,CLPREC (NOMAPS,NONCSP; /* close cursor*/

   /* TCS change begins  11-29-01*/
   /* CALL VDEFIT03 'C2',SQLCA,CLPREC (NOMAPS,NONCSP; /* close cursor*/
    call "VDEFIT03" ("C2", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
   /* TCS change ends    11-29-01*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (CL2REC.CLJRDIND == "B")
        CL2REC.CLJRDIND = "R";
         /* update cl2rec*/
        XX0XS01();
        CL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        CL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
        CL2REC.XXXUSRID = CL0YW01.CL0YWUSR;
        CL2REC.CL2ISBDT = CL0YW01.CL0YWDTE;
        call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes}; /* update cl2rec*/
        if (SQLCA.VAGen_SQLCODE == 0)
           /* next sentence*/
        else
          TA1REC.TA1LOCAT[2] = "CL0YS33"; /* location*/
          TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
          TA1REC.TA1DBASE = "DCLAIM"; /* database*/
          TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
          CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
          TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
          XPCL010(); /* error diagnosis routine*/
        end
      end
   /* CALL IO1350 'C2',SQLCA,CLPREC (NOMAPS,NONCSP; /* close cursor on eof*/

   /* TCS change begins  11-29-01*/
   /* CALL VDEFIT03 'C2',SQLCA,CLPREC (NOMAPS,NONCSP; /* closecursor on eof*/
      call "VDEFIT03" ("C2", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes}; /* closecursor on eof*/
   /* TCS change ends    11-29-01*/

    else
      TA1REC.TA1LOCAT[2] = "CL0YS33"; /* location*/
      TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0YS33

// look up price
Function KL0YS34()
   /* *************************************************************/

                        /* LOOK UP PRICE*/

   /* 10-04-90 CHELLM Added XUMCD and XQACD to the select when*/
            /* scanning the DCLAIM.VRAITM01 for price.*/
   /* 09/18/91 GDECKE MODIFY CODE TO GET COST TABLE PRICE WHEN*/
                      /* PRICE/COST INDICATOR IS = 'C'.*/
   /* 07/25/01 DSINHA Default the price to zero.*/
   /* 11-29-01 AALAGA Changed CLPREC to DIT03REC*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0YS34"; /* set current proc name*/

   /* look up price*/

   /* look up price from raitm file*/
  CL0YW01.CL0YWPFL = "CLK"; /* price from flag*/

   /* find primary invoice rec in clkrec*/
   /* 081589 code from 072089 change was not put in PROD.*/
    /* 'NC' item will have Invoice #.*/
   /* DEF items have no sizes and CLKCRFL always = 'y'*/
    /* but we may be getting price for DEF return on RTS claim.*/
   /* Change 'S' to 'S1' since don't know CLKCRFL value.*/

   /* 5-4-92 twatso pricing problems led here - iverec is blank when*/
   /* this is the first inspection - kl0y016 was not performed.  If*/
   /* iverec.ivepcind = ' 'then perform kl0y016. If still blank then it*/
   /* will default to flowing thru kl0ysoa as before, and will be coded*/
   /* as a 'p'.(at bottom of this statement group.)*/

  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.IV0IVCID = CLAREC.IV0IVCID; /* primary ivc*/
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = KL0YM005.SY1STNBR;
  CLKREC.SY2CLRID = KL0YM005.SY2CLRID;
  CLKREC.XDMCD = KL0YM005.XDMCD;
  CLKREC.XUMCD = KL0YM005.XUMCD; /* 10-04-90*/
  CLKREC.XQACD = KL0YM005.XQACD; /* 10-04-90*/
  CLKREC.SY5SZID = 0; /* 081589/072089 obsolete for 's1'*/
  CLKREC.CLKCRFL = "*"; /* 081589/072089 add*/

  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLKREC.SY5SZID == 0) /* 081589/072089 use product summ*/

   /* TCS change begins -  11-29-01*/
   /* IF CLKREC.XQACD EQ CLPREC.XQACD;/* 072089*/
      if (CLKREC.XQACD == DIT03REC.XQACD) /* 072089*/
   /* MOVE CLKREC.CLKPRCFF TO CLPREC.CLKPRCFF;*/
        DIT03REC.CLKPRCFF = CLKREC.CLKPRCFF;
   /* MOVE CLKREC.CLKCLPRC TO CLPREC.CLKCLPRC;*/
        DIT03REC.CLKCLPRC = CLKREC.CLKCLPRC;
   /* TCS change ends - 11-29-01*/

        call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
        return; /* and handle uom conversion if needed*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  else
    TA1REC.TA1LOCAT[2] = "CL0YS34"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1280-1"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* ***************************************/
   /* select all invoices in clkrec*/

  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = KL0YM005.SY1STNBR;
  CLKREC.SY2CLRID = KL0YM005.SY2CLRID;
  CLKREC.XDMCD = KL0YM005.XDMCD;
  CLKREC.XUMCD = KL0YM005.XUMCD; /* 10-04-90*/
  CLKREC.XQACD = KL0YM005.XQACD; /* 10-04-90*/
  CLKREC.CLKCRFL = "*"; /* 081589/072089 add*/

  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLKREC.SY5SZID == 0)
                                 /* ; 081589 restructure IF's*/
   /* TCS change begins - 11-29-01*/
   /* IF CLKREC.XQACD EQ CLPREC.XQACD;/* 072089*/
      if (CLKREC.XQACD == DIT03REC.XQACD) /* 072089*/
   /* MOVE CLKREC.CLKPRCFF TO CLPREC.CLKPRCFF;*/
        DIT03REC.CLKPRCFF = CLKREC.CLKPRCFF;
   /* MOVE CLKREC.CLKCLPRC TO CLPREC.CLKCLPRC;*/
        DIT03REC.CLKCLPRC = CLKREC.CLKCLPRC;
   /* TCS change ends   - 11-29-01*/

        call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
                                   /* close cursor on eof*/
        return; /* and handle uom conversion if needed*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor on eof*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS34"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1280-2"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* ***********************************************************/
   /* look up price from price file OR COST FILE, DEPENDING ON*/
   /* COST/PRICE INDICATOR ON THE INVOICE SPECIALTY TABLE.*/
   /* (DINVC.VSPECL01 - "IVEREC")*/
   /* ***********************************************************/
   /* 5-4-92 twatso pricing problems led here - iverec is blank when*/
   /* this is the first inspection - kl0y016 was not performed.  If*/
   /* iverec.ivepcind = ' 'then perform kl0y016. if still blank then it*/
   /* will default to flowing thru kl0ysoa as before, and will be coded*/
   /* as a 'p'.*/

  if (IVEREC.IVEPCIND == " ") /* need to read iverec - may not have*/
    KL0Y016(); /* to get the ivepcind*/
  end


   /* ** TCS Change begin - 07/25/01 Default price to zero*/

   /* TCS Change begins - 11-29-01*/
   /* MOVE 0 TO CLPREC.CLKCLPRC;          /* Default price to zero*/
  DIT03REC.CLKCLPRC = 0; /* Default price to zero*/
   /* TCS Change ends   - 11-29-01*/

   /* IF IVEREC.IVEPCIND EQ 'P';       /* USE PRODUCT TABLE PRICES*/
   /* KL0YS0A;*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';     /* USE PRODUCT TABLE PRICES*/
   /* KL0YS0C;                     /* ELSE, USE COST TABLE PRICES*/
   /* ELSE;*/
   /* /* NOTE: IVEPCIND MAY BE BLANK, IF IVEREC NOT FOUND IN CL0Y016*/
   /* KL0YS0A;*/
   /* END;*/
   /* END;*/
   /* ** TCS Change end - 07/25/01*/
end // end KL0YS34

// insert or update clgrec
Function KL0YS35()

   /* *********************************************************/
   /* MAINTENANCE HISTORY*/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC*/
   /* *********************************************************/

  CLXREC.CLXCPROC = "CL0YS35"; /* set current proc name*/

   /* add or update clgrec*/

  XX0XS01();
  CLGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  CLGREC.CLACLMNB = KL0YM005.CLACLMNB;
  CLGREC.CLHSEQNB = KL0YM005.CLHSEQNB;
  CLGREC.CL2ISNBR = KL0YM005.CL0YMINB;
  CLGREC.CLGCMTYP = "D";

   /* TCS change begins - 11-29-01*/
   /* MOVE CLPREC.CLGCMSEQ TO CLGREC.CLGCMSEQ;*/
  CLGREC.CLGCMSEQ = DIT03REC.CLGCMSEQ;
   /* TCS change ends - 11-29-01*/

  CLGREC.XXXUSRID = KL0YM005.CL0YWUSR;
  CLGREC.CLGCOMNT = KL0YM005.CLGCOMNT;

  if (CL0YW03.CL0YWYD1[CL0YWDX8] == " " /* no old clprec*/
   && CL0YW03.YDRCD[CL0YWDX8] == " ")   /* no old clprec*/
    CL0YW01.CL0YWOCP = "N";
  else
    CL0YW01.CL0YWOCP = "Y";
  end

  if (CL0YW01.CL0YWOCP == "N" /* no old clprec*/
   || CL0YW03.CL0YWCS1[CL0YWDX8] == 0) /* no old comment*/
     /* add clgrec*/
    call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS35"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  else
    call "IO1260" ("U ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* upd clgrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS35"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

   /* rebuild array info for comment*/
  CL0YW03.CLGCOMNT[CL0YWDX8] = KL0YM005.CLGCOMNT;
  CL0YW03.CL0YWCS1[CL0YWDX8] = CLGREC.CLGCMSEQ;

end // end KL0YS35

// fetch clgrec
Function KL0YS36()

  CLXREC.CLXCPROC = "CL0YS36"; /* set current proc name*/

   /* fetch from cursor*/
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CLGCMSEQ = CLGREC.CLGCMSEQ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor on eof*/
      CL0YW01.CL0YWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0YS36"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0YS36

// update m005 array from clprec
Function KL0YS37()
   /* This module moves fields from CLPREC to CL0YW03 array*/
   /*  */
   /* MAINTENANCE HISTORY*/
   /* 06-14-90 CHELLM Renamed FY2FTYPO to PC3POIDT.product key*/
   /* 03-28-92 GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LBL*/
   /* 04-13-92 twatso renamed clacmind to cl-clcom-fl*/
   /* 05-04-92 GDECKE  COMPUTE FREIGHT CREDIT IF RPS CLM IS PREPAID*/
   /* 06-22-93 GDECKE  SAVE SEASON CODE IN CL0YW03*/
   /* 08-13-93 JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.*/
   /* 02-28-94 JCAREY  CHANGED SEASON CODE FROM XBK-BK-SESN-CD TO*/
   /* PC-PO-ID-SESN-ID FOR APPAREL. THE XBK WAS A*/
   /* TEMPORARY FIX WAITING FOR A DATABASE UPDATE.*/
   /* 06-03-94 sgorga  Replaced duty cd (yddcd) with size.*/
   /* 11-28-01 SVIJAY  ADDED DIT03REC FOR IO VDEFIT03.*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0YS37"; /* set current proc name*/

   /* update m005 array*/

   /* save to upd clarec and clorec*/
  CL0YW01.CL0YWHQ1 = CL0YW03.CL0YWDQ1[CL0YWDX8];
  CL0YW01.CL0YWHPC = CL0YW03.CL0YWPC1[CL0YWDX8];
  CL0YW01.CL0YWHNC = CL0YW03.CLNNCRQ[CL0YWDX8];

   /* build screen header info*/
   /* subtract old, then add new*/
  CL0YW01.CL0YWAM1 = CL0YW03.CL0YWDQ1[CL0YWDX8];
  CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * CL0YW03.CL0YWPC1[CL0YWDX8];
  CL0YW01.CLODMAMT = CL0YW01.CLODMAMT - CL0YW01.CL0YWAM1;

   /* TCS CHANGE BEGINS - 11/28/01*/
  /* MOVE CLPREC.CLPDEFQ TO CL0YW01.CL0YWAM1;*/
  CL0YW01.CL0YWAM1 = DIT03REC.CLPDEFQ;
   /* CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * CLPREC.CLKCLPRC;*/
  CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * DIT03REC.CLKCLPRC;
   /* TCS CHANGE ENDS   - 11/28/01*/

  CL0YW01.CLODMAMT = CL0YW01.CLODMAMT + CL0YW01.CL0YWAM1;
  KL0YM005.CLODMAMT = CL0YW01.CLODMAMT;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - CL0YW03.CL0YWDQ1[CL0YWDX8];
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CL0YW03.CLNNCRQ[CL0YWDX8];
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CLPREC.CLPDEFQ;*/
   /* CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - CLPREC.CLNNCRQ;*/
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + DIT03REC.CLPDEFQ;
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - DIT03REC.CLNNCRQ;
   /* TCS CHANGE ENDS   - 11/28/01*/
    KL0YM005.CLOFGAQ = CL0YW01.CLOFGAQ;
  end
  if (CLJREC.CL-RPS-LABL-FL != "Y")
    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
  else
    if (CLLREC.CL-PPD-COLL-IND == "P")
      if (CLLREC.TF1CARCD == "0927"
       || CLLREC.TF1CARCD == "0200")
        CL0YW01.CLOFGAAM = 0;
      else
        CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
      end
    else
      CL0YW01.CLOFGAAM = 0;
    end
  end
  KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;

   /* now rebuild array info*/

   /* TCS CHANGE BEGINS   - 11/28/01*/
   /* MOVE CLPREC.SY1STNBR TO CL0YW03.SY1STNBR(CL0YWDX8);*/
   /* MOVE CLPREC.SY2CLRID TO CL0YW03.SY2CLRID(CL0YWDX8);*/
   /* MOVE CLPREC.XDMCD TO CL0YW03.XDMCD(CL0YWDX8);*/
   /* MOVE CLPREC.XUMCD TO CL0YW03.XUMCD(CL0YWDX8);*/
   /* MOVE CLPREC.XQACD TO CL0YW03.XQACD(CL0YWDX8);*/
   /* IF CLPREC.XGPCD = '02';*/
   /* MOVE CLPREC.SY-SZ-ID TO CL0YW03.SY-SZ-ID(CL0YWDX8);*/
   /* ELSE;*/
   /* MOVE 0 TO CL0YW03.SY-SZ-ID(CL0YWDX8);*/
   /* END;*/
   /* MOVE CLPREC.PC3POIDT TO CL0YW03.PC3POIDT(CL0YWDX8);*/
   /* IF CLPREC.XGPCD = '03';*/
   /* MOVE CLPREC.PC-PO-ID-SESN-CD TO CL0YW03.PCFSECD(CL0YWDX8);*/
   /* ELSE;*/
   /* MOVE ' ' TO CL0YW03.PCFSECD(CL0YWDX8);*/
   /* END;*/
   /* MOVE CLPREC.FY1FCTYC TO CL0YW03.FY1FCTYC(CL0YWDX8);*/
   /* MOVE CLPREC.CLPCRTNB TO CL0YW03.CLPCRTNB(CL0YWDX8);*/
   /* CL0YW03.CL0YW3TL(CL0YWDX8) = CLPREC.CLPDEFQ +*/
   /* CL0YW03.CL0YWDQ2(CL0YWDX8);*/
   /* MOVE CLPREC.YDRCD TO CL0YW03.YDRCD(CL0YWDX8);*/
   /* MOVE CLPREC.CLNNCRQ TO CL0YW03.CLNNCRQ(CL0YWDX8);*/
   /* MOVE CLPREC.YDFCD TO CL0YW03.CL0YWYD1(CL0YWDX8);*/
   /* MOVE CLPREC.CLPDEFQ TO CL0YW03.CL0YWDQ1(CL0YWDX8);*/
   /* MOVE CLPREC.CLKCLPRC TO CL0YW03.CL0YWPC1(CL0YWDX8);*/
   /* MOVE CLPREC.CL-CLCOM-FL TO CL0YW03.CL0YWMN1(CL0YWDX8);*/
   /* MOVE CLPREC.ZZZCHGCT TO CL0YW03.CL0YWZC1(CL0YWDX8);*/
  CL0YW03.SY1STNBR[CL0YWDX8] = DIT03REC.SY1STNBR;
  CL0YW03.SY2CLRID[CL0YWDX8] = DIT03REC.SY2CLRID;
  CL0YW03.XDMCD[CL0YWDX8] = DIT03REC.XDMCD;
  CL0YW03.XUMCD[CL0YWDX8] = DIT03REC.XUMCD;
  CL0YW03.XQACD[CL0YWDX8] = DIT03REC.XQACD;
  if (DIT03REC.XGPCD == "02")
    CL0YW03.SY-SZ-ID[CL0YWDX8] = DIT03REC.SY-SZ-ID;
  else
    CL0YW03.SY-SZ-ID[CL0YWDX8] = 0;
  end
  CL0YW03.PC3POIDT[CL0YWDX8] = DIT03REC.PC3POIDT;
  if (DIT03REC.XGPCD == "03")
    CL0YW03.PCFSECD[CL0YWDX8] = DIT03REC.PC-PO-ID-SESN-CD;
  else
    CL0YW03.PCFSECD[CL0YWDX8] = " ";
  end
  CL0YW03.FY1FCTYC[CL0YWDX8] = DIT03REC.FY1FCTYC;
  CL0YW03.CLPCRTNB[CL0YWDX8] = DIT03REC.CLPCRTNB;
  CL0YW03.CL0YW3TL[CL0YWDX8] = DIT03REC.CLPDEFQ +                                          CL0YW03.CL0YWDQ2[CL0YWDX8];
  CL0YW03.YDRCD[CL0YWDX8] = DIT03REC.YDRCD;
  CL0YW03.CLNNCRQ[CL0YWDX8] = DIT03REC.CLNNCRQ;
  CL0YW03.CL0YWYD1[CL0YWDX8] = DIT03REC.YDFCD;
  CL0YW03.CL0YWDQ1[CL0YWDX8] = DIT03REC.CLPDEFQ;
  CL0YW03.CL0YWPC1[CL0YWDX8] = DIT03REC.CLKCLPRC;
  CL0YW03.CL0YWMN1[CL0YWDX8] = DIT03REC.CL-CLCOM-FL;
  CL0YW03.CL0YWZC1[CL0YWDX8] = DIT03REC.ZZZCHGCT;
   /* TCS CHANGE ENDS     - 11/28/01*/

   /* update screen qty total*/
  KL0YM005.CL0YMCRQ = CL0YW03.CL0YW3TL[CL0YWDX8];

   /* key 2 info update directly after db upd*/
   /* comment info updated in array after comment upd*/

end // end KL0YS37

// upd m005 array - key 2
Function KL0YS38()
     /* KL0YS38  --  UPDATE M005 ARRAY - KEY 2*/
   /* *****************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 03-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LBL **/
   /* * 04-13-92  twatso  rename clacmind to cl-clcom-fl             **/
   /* * 05-04-92  GDECKE  COMPUTE FREIGHT CREDIT IF RPS CLM IS PREPAID*/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID CLAIMS WITH   **/
   /* *                   CARRIER CODE '0927' OR '0200'.             **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.       **/
   /* * 11-28-01  SVIJAY  REPLACED CLPREC BY DIT03REC FOR IO MOD     **/
   /* *                   VDEFIT03.                                  **/
   /* *****************************************************************/
  CLXREC.CLXCPROC = "CL0YS38"; /* set current proc name*/

   /* update m005 array - key 2*/

   /* save old first*/
  CL0YW01.CL0YWHQ2 = CL0YW03.CL0YWDQ2[CL0YWDX8];

   /* update header info*/
   /* subtract old, then add new*/
  CL0YW01.CL0YWAM1 = CL0YW03.CL0YWDQ2[CL0YWDX8];
  CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * CL0YW03.CL0YWPC2[CL0YWDX8];
  CL0YW01.CLODMAMT = CL0YW01.CLODMAMT - CL0YW01.CL0YWAM1;
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* MOVE CLPREC.CLPDEFQ TO CL0YW01.CL0YWAM1;*/
  CL0YW01.CL0YWAM1 = DIT03REC.CLPDEFQ;
   /* CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * CLPREC.CLKCLPRC;*/
  CL0YW01.CL0YWAM1 = CL0YW01.CL0YWAM1 * DIT03REC.CLKCLPRC;
   /* TCS CHANGE ENDS   - 11/28/01*/
  CL0YW01.CLODMAMT = CL0YW01.CLODMAMT + CL0YW01.CL0YWAM1;
  KL0YM005.CLODMAMT = CL0YW01.CLODMAMT;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - CL0YW03.CL0YWDQ2[CL0YWDX8];
                                   /* old val*/
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CL0YW03.CLNNCRQ[CL0YWDX8];
                                   /* old val*/
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + CLPREC.CLPDEFQ;/* new val*/
   /* CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - CLPREC.CLNNCRQ;/* new val*/
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ + DIT03REC.CLPDEFQ; /* new val*/
    CL0YW01.CLOFGAQ = CL0YW01.CLOFGAQ - DIT03REC.CLNNCRQ; /* new val*/
   /* TCS CHANGE ENDS   - 11/28/01*/
    KL0YM005.CLOFGAQ = CL0YW01.CLOFGAQ;
  end
  if (CLJREC.CL-RPS-LABL-FL != "Y")
    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
    KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;
  else
    if (CLLREC.CL-PPD-COLL-IND == "P")
      if (CLLREC.TF1CARCD == "0927"
       || CLLREC.TF1CARCD == "0200")
        CL0YW01.CLOFGAAM = 0;
        KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;
      else
        CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
        KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;
      end
    else
      CL0YW01.CLOFGAAM = 0;
      KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;
    end
  end

   /* then update array*/
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CL0YW03.CL0YW3TL(CL0YWDX8) = CLPREC.CLPDEFQ +*/
   /* CL0YW03.CL0YWDQ1(CL0YWDX8);*/
   /* MOVE CLPREC.YDFCD TO CL0YW03.CL0YWYD2(CL0YWDX8);*/
   /* MOVE CLPREC.CLPDEFQ TO CL0YW03.CL0YWDQ2(CL0YWDX8);*/
   /* MOVE CLPREC.CLKCLPRC TO CL0YW03.CL0YWPC2(CL0YWDX8);*/
   /* MOVE CLPREC.CL-CLCOM-FL TO CL0YW03.CL0YWMN2(CL0YWDX8);*/
   /* MOVE CLPREC.ZZZCHGCT TO CL0YW03.CL0YWZC2(CL0YWDX8);*/
  CL0YW03.CL0YW3TL[CL0YWDX8] = DIT03REC.CLPDEFQ +                                   CL0YW03.CL0YWDQ1[CL0YWDX8];
  CL0YW03.CL0YWYD2[CL0YWDX8] = DIT03REC.YDFCD;
  CL0YW03.CL0YWDQ2[CL0YWDX8] = DIT03REC.CLPDEFQ;
  CL0YW03.CL0YWPC2[CL0YWDX8] = DIT03REC.CLKCLPRC;
  CL0YW03.CL0YWMN2[CL0YWDX8] = DIT03REC.CL-CLCOM-FL;
  CL0YW03.CL0YWZC2[CL0YWDX8] = DIT03REC.ZZZCHGCT;
   /* TCS CHANGE ENDS   - 11/28/01*/

   /* update qty total on screen*/
  KL0YM005.CL0YMCRQ = CL0YW03.CL0YW3TL[CL0YWDX8];

end // end KL0YS38

// update clarec comment ind
Function KL0YS39()
   /* ******************************************************************/
   /* maintenance log*/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl*/


   /* ******************************************************************/

  CLXREC.CLXCPROC = "CL0YS39"; /* set current proc name*/

    /* set comment indicator to be updated on clarec*/

    /* save the current change count for additional updates*/
  CL0YW01.CL0YWZC1 = CLGREC.ZZZCHGCT; /* (*cwh 82989*)*/

  CLGREC.CLACLMNB = KL0YM005.CLACLMNB;
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";

  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vclcom01*/
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL-CLCOM-FL = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0YW01.CL-CLCOM-FL = "N";
    end
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

    /* update clarec*/

  XX0XS01();

  if (CL0YW01.CL-CLCOM-FL != CLAREC.CLACMIND) /* changed comment indicator*/
    call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes}; /* get current record*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS39"; /* location*/
      TA1REC.TA1LOCAT[4] = "SELECT"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
    CLAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    CLAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    CLAREC.CLACMIND = CL0YW01.CL-CLCOM-FL;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes}; /* update clarec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS39"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

    /* reset the previous change count for additional updates*/

  CLGREC.ZZZCHGCT = CL0YW01.CL0YWZC1; /* (*cwh 82989*)*/

end // end KL0YS39

// upd m005 scrn hdr on clp add
Function KL0YS40()
      /* KL0YS40   --   UPDATE M005 SCREEN HDR ON CLP ADD*/
   /* ******************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 03-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LABEL**/
   /* * 05-04-92  GDECKE  COMPUTE FREIGHT CREDIT IF RPS CLM IS PREPAID**/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID RPS CLAIM WITH **/
   /* *                   CARRIER CODE '0927' OR '0200'.              **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.        **/
   /* * 11-28-01  SVIJAY  REPLACED CLPREC BY DIT03REC FOR IO VDEFIT03.**/
   /* ******************************************************************/
  CLXREC.CLXCPROC = "CL0YS40"; /* set current proc name*/

   /* update screen header on clprec add*/

   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CL0YW01.CL0YWAM1 = CLPREC.CLPDEFQ * CLPREC.CLKCLPRC;*/
  CL0YW01.CL0YWAM1 = DIT03REC.CLPDEFQ * DIT03REC.CLKCLPRC;
   /* TCS CHANGE ENDS   - 11/28/01*/
  KL0YM005.CLODMAMT = KL0YM005.CLODMAMT + CL0YW01.CL0YWAM1;
  CL0YW01.CLODMAMT = KL0YM005.CLODMAMT;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ + CLPREC.CLPDEFQ;*/
   /* KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ - CLPREC.CLNNCRQ;*/
    KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ + DIT03REC.CLPDEFQ;
    KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ - DIT03REC.CLNNCRQ;
   /* TCS CHANGE ENDS   - 11/28/01*/
    CL0YW01.CLOFGAQ = KL0YM005.CLOFGAQ;
  end
  if (CLJREC.CL-RPS-LABL-FL != "Y")
    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
  else
    if (CLLREC.CL-PPD-COLL-IND == "P")
      if (CLLREC.TF1CARCD == "0927"
       || CLLREC.TF1CARCD == "0200")
        CL0YW01.CLOFGAAM = 0;
      else
        CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
      end
    else
      CL0YW01.CLOFGAAM = 0;
    end
  end
  KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;

end // end KL0YS40

// upd cl2rec if first clprec add
Function KL0YS41()

  CLXREC.CLXCPROC = "CL0YS41";

   /* update cl2rec if first clprec was added*/

  if (CL2REC.CLJRDIND == "R")
    CL2REC.CLJRDIND = "B";
     /* update cl2rec*/
    XX0XS01();
    CL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    CL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    CL2REC.XXXUSRID = CL0YW01.CL0YWUSR;
    CL2REC.CL2ISBDT = CL0YW01.CL0YWDTE;
     /* CL2REC.CL2ISBDT = CL2REC.CL2ISBDT + 19000000;*/
    call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes}; /* update cl2rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0YS41"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS41

// clear detail on screen
Function KL0YS42()
   /* This module clears the detail screen*/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G      **/
   /* -----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                            **/
   /* -----------------------------------------------------------**/
   /* 06-15-93  GDECKE  ALLOW APPAREL PO AND FACTROY ENTRY     **/
   /* 06-03-94  sgorga  Replace map yddcd (duty cd) with size. **/
   /* 05-14-97  HMACAL  Setup default values                   **/
   /* 07-11-97  HMACAL  Remove default Qty if Apparel;         **/
   /* Protect/Askip Carton Nbr if Apparel;   **/
   /* Remove default Defect Code is Footwear **/
   /* and in Scan Mode;                      **/
   /* Initialize Bar Code.                   **/
   /* Note: When Apparel can use Bar Code,   **/
   /* this SGRP must be modified       **/
   /* 04-19-99 GDECKE  CHANGED DEF CODE DEFAULT FROM 999 TO '   '*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "KL0YS42"; /* set current proc name*/

   /* blank out screen for more adds*/

   /* first move to prev area on scrn*/
   /* *HMACAL - display previous Product Id processed from work area*/
   /* MOVE KL0YM005.SY1STNBR TO KL0YM005.CL0YMSTY;*/
   /* MOVE KL0YM005.SY2CLRID TO KL0YM005.CL0YMCLR;*/
   /* MOVE KL0YM005.XDMCD TO KL0YM005.CL0YMDIM;*/
  KL0YM005.CL0YMSTY = CL0YW01.CL0YMSTY;
  KL0YM005.CL0YMCLR = CL0YW01.CL0YMCLR;
  KL0YM005.CL0YMDIM = CL0YW01.CL0YMDIM;

  KL0YM005.PC-BAR-CD-SEQ-NBR = 0;

  KL0YM005.SY1STNBR = " ";
  KL0YM005.SY2CLRID = " ";
  KL0YM005.XDMCD = " ";

  KL0YM005.XUMCD = " ";
  KL0YM005.XQACD = " ";

  if (KL0YM005.XGPCD == "02")
    KL0YM005.SY-SZ-ID-DESC = " "; /* display size for footwear only*/
    KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[4];
  else
    set KL0YM005.SY-SZ-ID-DESC skip, invisible;
    KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[7];
  end

  KL0YM005.CLPFTYPO = " ";
  KL0YM005.FY1FCTYC = " ";

  if (CL0YW01.CLPCRTNB == "000")
    KL0YM005.CLENBRCT = " "; /* Set Carton Nbr to blanks*/
  else
    KL0YM005.CLENBRCT = CL0YW01.CLPCRTNB; /* Display prev Carton Nbr*/
  end

  if (KL0YM005.XGPCD == "02") /* If Footwear*/
    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      KL0YM005.CL0YMDC1 = " "; /* Set Def Cd1 to blank*/
    else /* Else in Keyboard Mode*/
      KL0YM005.CL0YMDC1 = "   "; /* Set Def Cd1 to 999*/
    end
    KL0YM005.CL0YMDQ1 = 1; /* Set Qty to 1*/
  else /* Else, it's Apparel*/
    KL0YM005.CL0YMDC1 = " "; /* Set Def Cd1 to blank*/
    KL0YM005.CL0YMDQ1 = 0; /* Set Qty to 0*/
    set KL0YM005.CLENBRCT skip, invisible; /* Set Carton Nbr to DARK,ASK*/
  end

  KL0YM005.CL0YMCRQ = 0;
  KL0YM005.CL0YMNCC = " ";
  KL0YM005.CL0YMNCQ = 0;
  KL0YM005.CLGCOMNT = " ";
  KL0YM005.CL0YMDC2 = " "; /* clear key2 on screen*/
  KL0YM005.CL0YMDQ2 = 0;

end // end KL0YS42

// build data to pass to cl0z
Function KL0YS43()

  CLXREC.CLXCPROC = "CL0YS43"; /* set current proc name*/

   /* build data to pass to cl0z*/

  CLWREC.CL2ISNBR = KL0YM005.CL0YMINB;
  CLWREC.SY1STNBR = KL0YM005.SY1STNBR;
  CLWREC.SY2CLRID = KL0YM005.SY2CLRID;
  CLWREC.XDMCD = KL0YM005.XDMCD;
  CLWREC.XUMCD = KL0YM005.XUMCD;
  CLWREC.CLWYZIDX = CL0YW01.CL0YWDX2;
  CLWREC.CLWYZSWT = "Y"; /* from cl0y*/

end // end KL0YS43

// set dx2 and clear passing info
Function KL0YS44()

  CLXREC.CLXCPROC = "CL0YS44"; /* set current proc name*/

   /* set dx2 and clear passing info*/

  CL0YW01.CL0YWDX2 = CLWREC.CLWYZIDX;

  CLWREC.CL2ISNBR = 0;
  CLWREC.SY1STNBR = " ";
  CLWREC.SY2CLRID = " ";
  CLWREC.XDMCD = " ";
  CLWREC.XUMCD = " ";
   /* MOVE ' ' TO CLWREC.XQACD;*/
  CLWREC.CLWYZIDX = 0;
  CLWREC.CLWYZSWT = " "; /* z or y switch*/

end // end KL0YS44

// edit user selections
Function KL0YS45()

  CLXREC.CLXCPROC = "CL0YS45"; /* set current proc name*/

   /* edit user selections*/

  CL0YW01.CL0YWDX6 = CL0YW01.CL0YWDX6 + 1;

  if (KL0YM001.CL0YMSEL[1] == "A" /* select all prods*/
   && KL0YM001.SY1STNBR[CL0YWDX6] != "TOTALS")
    CL0YW01.CL0YWVIW[CL0YWDX6] = "V";
  end

  if (KL0YM001.CL0YMSEL[CL0YWDX6] == "S") /* select prod*/
    CL0YW01.CL0YWVIW[CL0YWDX6] = "V";
  else
    if (KL0YM001.CL0YMSEL[CL0YWDX6] == "V") /* select prod*/
      KL0YM001.CL0YMSEL[CL0YWDX6] = " ";
    end
  end

  if (KL0YM001.CL0YMSEL[CL0YWDX6] is modified
   && KL0YM001.CL0YMSEL[CL0YWDX6] == "X") /* attempt delete*/
    if (KL0YM001.CL0YMTQ[CL0YWDX6] == 0
     && KL0YM001.CL0YMNRT[CL0YWDX6] == 0)
      converseLib.validationFailed(569); /* no defective items to delete*/
      set KL0YM001.CL0YMSEL[CL0YWDX6] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
    if (CL0YW01.CL0YWUDF == "N") /* upd flag = no*/
      converseLib.validationFailed(343);
      set KL0YM001.CL0YMSEL[CL0YWDX6] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end

  if (KL0YM001.CL0YMSEL[CL0YWDX6] is modified
   && CL0YW01.CL0YWDX6 != 1) /* not first select line*/
    if (KL0YM001.CL0YMSEL[CL0YWDX6] == "S"
     || KL0YM001.CL0YMSEL[CL0YWDX6] == "X"
     || KL0YM001.CL0YMSEL[CL0YWDX6] == " ")
       /* next sentence*/
    else
      converseLib.validationFailed(500);
      set KL0YM001.CL0YMSEL[CL0YWDX6] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  else
    if (KL0YM001.CL0YMSEL[CL0YWDX6] == "S" /* on first select line*/
     || KL0YM001.CL0YMSEL[CL0YWDX6] == "X" 
     || KL0YM001.CL0YMSEL[CL0YWDX6] == "A" 
     || KL0YM001.CL0YMSEL[CL0YWDX6] == " ")
       /* next sentence*/
    else
      converseLib.validationFailed(501);
      set KL0YM001.CL0YMSEL[CL0YWDX6] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end

  if (KL0YM001.CL0YMSEL[CL0YWDX6] is modified
   && KL0YM001.CL0YMSEL[CL0YWDX6] != " "
   && KL0YM001.SY1STNBR[CL0YWDX6] == "TOTALS")
    converseLib.validationFailed(008);
    set KL0YM001.CL0YMSEL[CL0YWDX6] cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end

end // end KL0YS45

// set map fields
Function KL0YS46()
   /* ************************************************************/
   /* protect all the screen fields if update not allowed.    **/
   /* ************************************************************/
   /* ************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* **/
   /* 05-14-93  gdecke  Change attributes & headings for central**/
   /* returns - menu option 9/19 split.       **/
   /* 06-03-94  sgorga  Remove duty drawback (yddcd) & replace  **/
   /* with size desc.  Add code that darkens  **/
   /* size on map if gpc ne '02' (since size  **/
   /* shows on Opt.9 only if footwear product.**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0YS46"; /* set current proc name*/

  set KL0YM005.SY1STNBR skip;
  set KL0YM005.SY2CLRID skip;
  set KL0YM005.XDMCD skip;
  set KL0YM005.XUMCD skip;
  set KL0YM005.XQACD skip;
  set KL0YM005.SY-SZ-ID-DESC skip;
  set KL0YM005.CLPFTYPO skip;
  set KL0YM005.FY1FCTYC skip;
  set KL0YM005.CLENBRCT skip;
  set KL0YM005.CL0YMDC1 skip;
  set KL0YM005.CL0YMDQ1 skip;
  set KL0YM005.CL0YMDC2 skip;
  set KL0YM005.CL0YMDQ2 skip;
  set KL0YM005.CL0YMCRQ skip;
  set KL0YM005.CL0YMNCC skip;
  set KL0YM005.CL0YMNCQ skip;
  set KL0YM005.CLGCOMNT skip;

    /* RESET FIELD ATTRIBUTES AND MAP AND DETAIL INPUT HEADINGS DEPENDING*/
    /* ON THE MENU OPTION*/
  if (CLWREC.CLWMNOPT == 19)
    set KL0YM005.SY-SZ-ID-DESC skip, invisible;
    set KL0YM005.CLPFTYPO skip, invisible;
    set KL0YM005.FY1FCTYC skip, invisible;
    set KL0YM005.CL0YMDC1 skip, invisible;
    set KL0YM005.CL0YMDC2 skip, invisible;
    set KL0YM005.CL0YMDQ2 skip, invisible;
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[2];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[5];
    KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[6];
  else /* (option = 9)*/
    KL0YM005.KL0YM-MAP-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[1];
    KL0YM005.KL0YM-DTL-HDG1 = KL15TBL.KL15TBL-HEADING-LINE[3];
    if (KL0YM005.XGPCD != "02") /* size can only be entered for ftwr*/
      set KL0YM005.SY-SZ-ID-DESC skip, invisible;
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[7];
    else
      KL0YM005.KL0YM-DTL-HDG2 = KL15TBL.KL15TBL-HEADING-LINE[4];
    end
  end

end // end KL0YS46

// edit insp date
Function KL0YS47()

  CLXREC.CLXCPROC = "CL0YS47";

        /* edit inspection date*/

   /* cannot be greater than current date*/

   /* ====== Y2K OUT BEGIN ======*/

   /* IF KL0YM001.CL0YMIDT GT KL0YM001.XXXCURDT;*/

   /* ====== Y2K OUT END ========*/


   /* ====== Y2K IN BEGIN ======*/

  CL0YW04.CL0YWIDT = KL0YM001.CL0YMIDT;
  if (CL0YW04.CL0YWIYY < 60)
    CL0YW04.CL0YWICC = 20;
  else
    CL0YW04.CL0YWICC = 19;
  end
  CL0YW04.CL0YWCDT = VGVar.currentGregorianDate;
  if (CL0YW04.CL0YWIDT > CL0YW04.CL0YWCDT)

    /* ====== Y2K IN END ========*/

    CLXREC.CLXERRF = "Y"; /* error flag*/
    set KL0YM001.CL0YMIDT cursor, modified, bold;
    converseLib.validationFailed(17); /* invalid date*/
  end

   /* check for date not more than 25 days previous*/

  set TA2REC empty;
  TA2REC.TA2GRGEN = KL0YM001.XXXCURDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2DYAOD = -25;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
     /* abend - error in routine*/
    TA1REC.TA1LOCAT[2] = "CL0YS47"; /* location*/
    TA1REC.TA1LOCAT[4] = "TA0040"; /* location*/
    TA1REC.TA1DBASE = "      "; /* database*/
    TA1REC.TA1TBLVU = "        "; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* ===== Y2K OUT BEGIN ======*/

   /* IF KL0YM001.CL0YMIDT GE TA2REC.TA2GRGEN; /* dt within 25 days*/
   /* ; /* next sentence*/
   /* ELSE;*/
    /* MOVE 'Y' TO CLXREC.CLXERRF;      /* error flag*/
    /* SET KL0YM001.CL0YMIDT CURSOR,MODIFIED,BRIGHT;*/
    /* MOVE 17 TO EZEMNO;               /* invalid date*/
   /* END;*/

   /* ===== Y2K OUT END ======*/


   /* ===== Y2K IN BEGIN ======*/

  CL0YW04.CL0YWFDT = TA2REC.TA2GRGEN;

  if (CL0YW04.CL0YWFYY < 60)
    CL0YW04.CL0YWFCC = 20;
  else
    CL0YW04.CL0YWFCC = 19;
  end

  if (CL0YW04.CL0YWIDT >= CL0YW04.CL0YWFDT)
    CLXREC.CLXERRF = "Y"; /* error flag*/
    set KL0YM001.CL0YMIDT cursor, modified, bold;
    converseLib.validationFailed(17); /* invalid date*/
  end

   /* ===== Y2K IN END ======*/


end // end KL0YS47

// set map fields
Function KL0YS48()
   /* ************************************************************/
   /* *  protect all the screen fields if update not allowed.   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YS48"; /* set current proc name*/

  set KL0YM010.XXXADNM skip;
  set KL0YM010.XXXADDR1 skip;
  set KL0YM010.XXXADDR2 skip;
  set KL0YM010.XXXADDR3 skip;
  set KL0YM010.XXXCITY skip;
  set KL0YM010.XSTCD skip;
  set KL0YM010.XXXZIP skip;
  set KL0YM010.XCTCD skip;
  set KL0YM010.CL0YMICF skip;
  set KL0YM010.CL0YMRSF skip;

end // end KL0YS48

// add cl2rec if needed
Function KL0YS49()

  CLXREC.CLXCPROC = "CL0YS49"; /* set current proc name*/

   /* add cl2rec if needed*/

  CL2REC.CLACLMNB = CL0YW01.CLACLMNB;
  if (CL0YW01.CL2ISNBR == 0) /* need a new number*/
     /* now we will get the claim header to be sure we have*/
     /* the most current one before we update.  This will*/
     /* prevent 100 sql's when the clarec is updated.*/
    CL0YW01.CL0YWDFL = "Y";
    CL0YW01.CL0YWDCT = 0;
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS67(); /* get current claim header*/
    end
    if (CLXREC.CLXERRF == "Y" /* had error*/
     || SQLCA.VAGen_SQLCODE != 0)
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(18); /* data base changed by other user*/
      end
      return;
    end
    if (CLAREC.CLACISNB == 1) /* first number*/
      CL2REC.CL2ISNBR = CLAREC.CLACISNB;
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS64(); /* select unique cl2rec*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == 100) /* not there*/
        /* next sentence (so we'll add this one)*/
      else /* already have this one*/
        CL2REC.CL2ISNBR = CLAREC.CLACISNB + 1; /* so we can get new one*/
      end
    else
      CL2REC.CL2ISNBR = CLAREC.CLACISNB + 1;
    end
    CLAREC.CLACISNB = CL2REC.CL2ISNBR;
                                   /* set to upd curnt insp in cla*/

     /* update related clarec*/
    CLAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    CLAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update clarec*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* clarec changed*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back changes*/
        converseLib.validationFailed(18); /* database changed*/
        set KL0YM005.SY1STNBR modified; /* to force edits*/
        CLXREC.CLXERRF = "Y";
        return;
      else
        TA1REC.TA1LOCAT[2] = "CL0YS49"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS64(); /* select unique cl2rec*/
  end
  if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL2ISNBR = CL2REC.CL2ISNBR;
    CL0YW01.CL0YWINS = CL2REC.CL2ISNBR;
    CL0YW01.CL0YWNIN = CL2REC.CL2ISNBR;
    return; /* cl2 already exists*/
  end

   /* add new cl2rec*/

  CL2REC.CLHSEQNB = CLAREC.CLACSQNB;
  CL2REC.YCICD = "IIP";
  CL2REC.CLJRDIND = "D";
  CL2REC.CL2ISXDT = 0;
  CL2REC.XXXUSRID = KL0YM005.CL0YWUSR;
  CL2REC.XWHCD = COMMAREA.XWHCD; /* TSK# 716 AHOWAR 10/30/91*/
  CL2REC.CL2ISBDT = CL0YW01.CL0YWDTE;
  XX0XS01();
  CL2REC.CL2TOSLF = "N"; /* GDECKE 02-18-91 CL TO STOCK LOCATE FLAG*/
  CL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  CL2REC.ZZZCHGCT = 0;

  call "IO2870" ("A ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS49"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


  KL0YM005.CL0YMINB = CL2REC.CL2ISNBR; /* fill on screen*/
  CL0YW01.CL2ISNBR = CL2REC.CL2ISNBR; /* fill in ws*/
  CL0YW01.CL0YWINS = CL2REC.CL2ISNBR;
  CL0YW01.CL0YWNIN = CL2REC.CL2ISNBR;

end // end KL0YS49

// determine insp nbr
Function KL0YS50()

   /* *******************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G           **/
   /* *----------------------------------------------------------------**/
   /* *    DATE    PGMR    DESCRIPTION                                 **/
   /* *----------------------------------------------------------------**/
   /* *  10-21-93  GDECKE  Remove reference to clwrec select list.     **/
   /* *  10-26-93  GDECKE  Reinstate modified use of clwrec select list**/
   /* *******************************************************************/
  CLXREC.CLXCPROC = "CL0YS50"; /* set current proc name*/

   /* determine insp nbr*/

   /* The following clwrec select table code helps kl0y to set up*/
   /* the inspection number. It involves a non-standard use of the*/
   /* clwrec.clwclmnb field for initial value of cl0yw01.cl2isnbr.*/
   /* It would be a good idea to set up special fields in clwrec to*/
   /* handle this function using a more standardized technique.*/
   /* Related code is also in KL02S20, kl02130, KL0Y130, KL0ZS05,*/
   /* and KL0Z100.*/
   /*  */
  if ("S" in CLWREC.CLWSELCD)
    CL0YW01.CL2ISNBR = CLWREC.CLWCLMNB[sysVar.arrayIndex];
    CLWREC.CLWSELCD[sysVar.arrayIndex] = "V";
  else
    if (CLWREC.CL2ISNBR == 0)
      CL0YW01.CL2ISNBR = CLAREC.CLACISNB;
    else
      CL0YW01.CL2ISNBR = CLWREC.CL2ISNBR;
    end
  end

end // end KL0YS50

// Edit Factory Code
Function KL0YS53()
   /* *************************************************************/

                        /* Edit Factory Code*/

    /* Maintenance History:*/
   /* 05-31-90 Goal Phase IV enhancement to requires valid*/
            /* factory code to be entered.  This edit was changed*/
            /* from a warning edit to a hard edit.*/
   /* 05-03-91  sgorga  Made this an if/else process and moved*/
                /* all the inquiries about the sql rtn code into*/
                /* process -S69, where the IO call is.  (Half*/
                /* were in here - half in there.)*/
   /* 05-05-93  gdeckl  bypass factory code edit if entered using*/
   /* option 19 for central returns.*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS53"; /* set current proc name*/

  if (CLAREC.XGPCD != "02") /* allow fcty only on ftwr claims*/
    if (KL0YM005.FY1FCTYC != "  ")
    /* next sentence - dont show msg for ftwr anymore- gdecke - 5/13-93*/
     /* MOVE 624 TO EZEMNO;           /* factory code valid only for ftwr*/
     /* MOVE 'Y' TO CLXREC.CLXERRF;*/
     /* SET KL0YM005.FY1FCTYC CURSOR,MODIFIED,BRIGHT;*/
     /* EZERTN;*/
    else
      return; /* no need to edit factory code for non ftwr claims*/
    end
  else /* else the gpc = 02 and it's a footwear claim*/
    if (KL0YM005.FY1FCTYC != " "
     && KL0YM005.FY1FCTYC != CL0YW01.CL0YWHFC)
      FY1REC.FY1FCTYC = KL0YM005.FY1FCTYC;
      FY1REC.XGPCD = KL0YM005.XGPCD;
      CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
      CL0YW01.CL0YWDCT = 0; /* deadlock count*/
      while (CL0YW01.CL0YWDFL == "Y")
        KL0YS69(); /* validate factory code*/
      end
      if (CL0YW01.CL0YWDCT > 0) /* deadlock exists*/
        return;
      end
    else
      if (CLWREC.CLWMNOPT == 9)
        converseLib.validationFailed(620); /* factory code required*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.FY1FCTYC cursor, modified, bold;
      else
        return;
      end
    end
  end

end // end KL0YS53

// Edit PO ID Number
Function KL0YS54()
   /* *************************************************************/
   /* /* Edit PO ID Number*/
   /* *************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* *----------------------------------------------------------**/
   /* *  DATE   PGMR    DESCRIPTION                              **/
   /* *----------------------------------------------------------**/
    /* 05-31-90 CHELLM Created. Goal Phase IV requires valid*/
             /* Factory with valid PO Number.  This edit was*/
             /* changed from a warning only to a hard edit.*/
    /* 06-14-90 Replaced pd2rec with pc6rec to verify fcty po nbr*/
             /* required that factory and PO Nbr be required*/
             /* valid entries instead of warnings.*/
    /* 06-18-90 CHELLM changed the PO Edit back to just a warning*/
             /* only by move the PO - FCTY Combo Edit portion of*/
          /* the edit to new group CL0YS55 to be performed during*/
             /* the warning edits routine CL0YS51.*/
             /* This needed to be done to allow for oldy moldy*/
          /* PO Numbers inspected that are not on DPRODC.VPOITM01*/
             /* Set the cl-fcty-po-fald-fl to 'n' to indicate*/
             /* those PO Nbrs. not verified on the table.*/
   /* 05-03-91  sgorga  Set this up as an if/else process and*/
             /* set the PO ID nbr field to 'normal' when it*/
             /* passes the edits below.*/
   /* 06-11-93  GDECKE  CHANGE TO CHARACTER PO FIELD ON MAP 5.*/

   /* 07-11-97  HMACAL  Changed setting Factory field to NORMAL*/
   /* if in Scan Mode*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0YS54"; /* set current proc name*/

  if (CLAREC.XGPCD == "02" /* only footwear and apparel claims*/
   || CLAREC.XGPCD == "03") /* may use to po id field.*/
      /* next sentence*/
  else
    if (KL0YM005.CLPFTYPO != " ") /* if po id field has been entered*/
      converseLib.validationFailed(625); /* PO only allowed on ftwr claims*/
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CLPFTYPO cursor, modified, bold;
      return;
    end
  end

  if (KL0YM005.FY1FCTYC == "99"
   && KL0YM005.CLPFTYPO != " ")
    CLXREC.CLXERRF = "Y";
    set KL0YM005.CLPFTYPO cursor, modified, bold;
    converseLib.validationFailed(614); /* If fcty cd is 99, PO Nbr must be*/
                                   /* blank*/
  else
    if (KL0YM005.FY1FCTYC != " " /* If fcty cd is not blank and*/
     && KL0YM005.FY1FCTYC != "99"
     /* is not '99', the po nbr cannot*/
     && KL0YM005.CLPFTYPO == " ") /* be BLANK.*/
      CLXREC.CLXERRF = "Y";
      set KL0YM005.CLPFTYPO cursor, modified, bold;
      converseLib.validationFailed(623); /* PO Nbr required for Fcty Cd*/
    else
      /* TCS change begin*/
      if (KL0YM005.FY1FCTYC != "99"
       && KL0YM005.XGPCD != "03")
        KL0YS-VFY-PO-ID();
      end
      /* TCS change end*/
      set KL0YM005.CLPFTYPO normal;
      if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
        set KL0YM005.CLPFTYPO skip;
      end
    end
  end

end // end KL0YS54

// Edit PO/Fcty Combo
Function KL0YS55()
   /* *************************************************************/

   /* /* * Edit PO/Fcty Combo **/
   /* ****************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G         **/
   /* *-------------------------------------------------------------**/
   /* *     DATE    GDECKE   DESCRIPTION                            **/
   /* *-------------------------------------------------------------**/
   /* ****************************************************************/
    /* Maintenance History:*/
    /* 05-31-90 CHELLM Created. Goal Phase IV requires valid*/
             /* Factory with valid PO Number.  This edit was*/
             /* changed from a warning only to a hard edit.*/
    /* 06-14-90 Replaced pd2rec with pc6rec to verify fcty po nbr*/
             /* required that factory and PO Nbr be required*/
             /* valid entries instead of warnings.*/
    /* 06-18-90 CHELLM changed the PO Edit back to just a warning*/
             /* only by commenting out CL0YS54 in CL0Y220 and*/
             /* adding the perform in this group.*/
             /* This needed to be done to allow for oldy moldy*/
          /* PO Numbers inspected that are not on DPRODC.VPOITM01*/
             /* Set the cl-fcty-po-fald-fl to 'n' to indicate*/
             /* those PO Nbrs. not verified on the table.*/
   /* 05-03-91  sgorga  Added code to do the following:*/
             /* - If the PO/Fcty combo is not valid (sqlcode =*/
               /* 100; not found), try again.  This time use the*/
               /* parent factory cd.  If THAT combo is valid, it*/
               /* won't be necessary for warning msg (# 364).*/
             /* - Originally, nothing in this process was*/
               /* performed unless the first stmt, which was an*/
               /* 'if' stmt, was satisfied.  So, I moved that*/
               /* 'if' stmt to the -220 process.*/
   /* 06-05-91  sgorga  Corrected error - I typed wrong date fld.*/
   /* 06-07-93  GDECKE  CHANGED CL0YW04 TO CLYREC FOR IO CALL.*/
   /* 07-11-97  HMACAL  Changed setting STYLE, COLOR, DIM to NORMAL,*/
   /* ASKIP when in Scan Mode*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0YS55"; /* set current proc name*/

    /* po date conversion added 06-14-90*/

  KL0YS-VFY-APRL-PO(); /* check format of po on map*/
  if (KL0YW-PO-FMT-VALID-FL == "N")
    return;
  end

   /* TCS Change begin*/
  if (KL0YM005.FY1FCTYC != "99"
   && KL0YM005.XGPCD != "03")
    KL0YS-VFY-PO-ID(); /* edit check for the po-id*/
  end
   /* TCS Change end*/
    /* * set up pc6rec fields for call to database **/

  set PCYREC empty;
  PCYREC.PCYFRDT = CL0YW01.KL0YW-PO-TEST-NUM-CYMM;
  PCYREC.PCYTODT = CL0YW01.KL0YW-PO-TEST-NUM-CYMM;

  PC6REC.PC3POIDT = CL0YW01.KL0YW-PO-TEST-NUM-CYMM; /* po id nbr*/
  PC6REC.XGPCD = KL0YM005.XGPCD; /* and gpc field*/
  PC6REC.SY1STNBR = KL0YM005.SY1STNBR; /* and style field*/
  PC6REC.SY2CLRID = KL0YM005.SY2CLRID; /* and color field*/
  PC6REC.FY1FCTYC = KL0YM005.FY1FCTYC; /* and fcty cd field*/
  PC6REC.XDMCD = "*"; /* to validate po/fcty combo*/
  PC6REC.PCFSECD = "*";
  PC6REC.PC4ORTYP = "*";
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = "*";
  PC6REC.XPGCD = "*";
  PC6REC.XUMCD = "*";
  PC6REC.XWHCD = "*";
  PC6REC.PC2INSEG = "*";
  PC6REC.PC2CUXID = "*";
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";
  PC6REC.PC6STAT = "*";

  PCYREC.PCYFUNC = "S3"; /* 'S3' is to declare cursor*/
  CL0YW01.CL0YWDCT = 0; /* deadlock count*/
  CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/

  while (CL0YW01.CL0YWDFL == "Y")
    KL0YS70(); /* set cursor up to validate po/fcty*/
                                   /* combo*/
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0YS78(); /* validate po/fcty combo  (select next*/
                                   /* pc6rec)*/
  end
  KL0YS79(); /* close cursor*/

    /* * If PO/Pcty Combo Invalid, Try Again Using Parent Fcty Cd*/

  if (CL0YW01.CLPVLDFL != "Y") /* if po/fcty combo not valid,*/
    PC6REC.FY1FCTYC = FY1REC.FY1PFYCD; /* use PARENT fcty cd*/
        /* ** reset fields to make 2nd call to the database (in*/
        /* ** -S78, they were set bright from SQL code = 100)*/
    CL0YW01.CL0YWWRN = "N"; /* Reset this field -*/
    converseLib.validationFailed(0); /* and this field -*/
    set KL0YM005.SY1STNBR normal; /* and this field -*/
    set KL0YM005.SY2CLRID normal; /* and this field -*/
    set KL0YM005.CLPFTYPO normal; /* and this field -*/
    set KL0YM005.FY1FCTYC normal; /* and this field.*/

    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      set KL0YM005.SY1STNBR skip;
      set KL0YM005.SY2CLRID skip;
      set KL0YM005.CLPFTYPO skip;
    end

    PCYREC.PCYFUNC = "S3"; /* 's3' is to declare cursor*/
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "Y"; /* deadlock flag*/
    while (CL0YW01.CL0YWDFL == "Y")
      KL0YS70(); /* set cursor up to validate po/fcty*/
                                   /* combo*/
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0YS78(); /* validate po/fcty combo  (select next*/
                                   /* pc6rec)*/
    end
    KL0YS79(); /* close cursor*/
  end

end // end KL0YS55

// Set field attributes
Function KL0YS56()
   /* This module sets the field attributes depending on Mode*/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G      **/
   /* -----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                            **/
   /* -----------------------------------------------------------**/
   /* 08-02-97  HMACAL  Created                                **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0YS56"; /* set current proc name*/

  if (CL0YW01.KL0YW-INPUT-MODE == "K")
    KL0YM005.PC-BAR-CD-SEQ-NBR = 0;
    KL0YM005.CL0YMODE = " ";
    set KL0YM005.CL0YM-BC-LBL invisible, skip;
    set KL0YM005.PC-BAR-CD-SEQ-NBR invisible, skip;
    set KL0YM005.PC-BAR-CD-SEQ-NBR noHighLight;
    set KL0YM005.SY1STNBR normal, cursor;
    set KL0YM005.SY1STNBR underline;
    set KL0YM005.SY2CLRID normal;
    set KL0YM005.SY2CLRID underline;
    set KL0YM005.XDMCD normal;
    set KL0YM005.XDMCD underline;
    set KL0YM005.XUMCD normal;
    set KL0YM005.XUMCD underline;
    set KL0YM005.XQACD normal;
    set KL0YM005.XQACD underline;
    if (KL0YM005.XGPCD == "02")
      set KL0YM005.SY-SZ-ID-DESC normal;
      set KL0YM005.SY-SZ-ID-DESC underline;
      set KL0YM005.CLENBRCT normal;
    else
      set KL0YM005.SY-SZ-ID-DESC skip, noHighLight;
      set KL0YM005.CLENBRCT skip, invisible;
    end
    set KL0YM005.CLPFTYPO normal;
    set KL0YM005.CLPFTYPO underline;
    set KL0YM005.FY1FCTYC normal;
    set KL0YM005.FY1FCTYC underline;
    set KL0YM005.CLPFTYPO normal;
    set KL0YM005.CLPFTYPO underline;
  else /* In Scan Mode*/
    KL0YM005.PC-BAR-CD-SEQ-NBR = 0;
    set KL0YM005.CL0YM-BC-LBL normal;
    set KL0YM005.CL0YM-BC-LBL skip;
    set KL0YM005.PC-BAR-CD-SEQ-NBR normal, cursor;
    set KL0YM005.PC-BAR-CD-SEQ-NBR underline;
    KL0YM005.CL0YMODE = "SCAN MODE";
    set KL0YM005.SY1STNBR skip, noHighLight;
    set KL0YM005.SY2CLRID skip, noHighLight;
    set KL0YM005.XDMCD skip, noHighLight;
    set KL0YM005.XUMCD skip, noHighLight;
    set KL0YM005.XQACD skip, noHighLight;
    set KL0YM005.SY-SZ-ID-DESC skip, noHighLight;
    if (KL0YM005.XGPCD == "02")
      set KL0YM005.CLENBRCT normal;
    end
    set KL0YM005.CLPFTYPO skip, noHighLight;
    set KL0YM005.FY1FCTYC skip, noHighLight;
  end

  set KL0YM005.CL0YMDC1 normal;
  set KL0YM005.CL0YMDQ1 normal;
  set KL0YM005.CL0YMDC2 normal;
  set KL0YM005.CL0YMDQ2 normal;
  set KL0YM005.CL0YMNCC normal;
  set KL0YM005.CL0YMNCQ normal;
end // end KL0YS56

// select unique from cljrec
Function KL0YS60()

  CLXREC.CLXCPROC = "CL0YS60"; /* set current proc name*/

  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS60"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRAHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS60

// select unique from clorec
Function KL0YS61()

  CLXREC.CLXCPROC = "CL0YS61"; /* set current proc name*/

  call "IO1340" ("S ", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS61"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1340"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VDEFHD01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS61

// select unique from kucrec
Function KL0YS62()

  CLXREC.CLXCPROC = "CL0YS62"; /* set current proc name*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS62"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
  TA1REC.TA1DBASE = "DCUST "; /* database*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS62

// select unique from cllrec
Function KL0YS63()

  CLXREC.CLXCPROC = "CL0YS63"; /* set current proc name*/

  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS63"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1310"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS63

// select unique from cl2rec
Function KL0YS64()

  CLXREC.CLXCPROC = "CL0YS64"; /* set current proc name*/

  call "IO2870" ("S ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS64"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS64

// select unique from clgrec
Function KL0YS65()

  CLXREC.CLXCPROC = "CL0YS65"; /* set current proc name*/

  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS65"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS65

// select unique from clprec
Function KL0YS66()

   /* ************************************************/
   /* MAINTENANCE HISTORY*/
   /* 11-29-01  AALAGA  Changed CLPREC TO DIT03REC*/
   /* ************************************************/

  CLXREC.CLXCPROC = "CL0YS66"; /* set current proc name*/

   /* CALL IO1350 'S ',SQLCA,CLPREC (NOMAPS,NONCSP;*/

   /* TCS change begins - 11-29-01*/
   /* CALL VDEFIT03 'S ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("S ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS change ends   - 11-29-01*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS66"; /* location*/
  TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS66

// select unique from clarec
Function KL0YS67()

  CLXREC.CLXCPROC = "CL0YS67"; /* set current proc name*/

  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS67"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS67

// select unique from clsrec
Function KL0YS68()
   /* *************************************************************/
    /* Maintenance History*/

    /* 05-03-91  sgorga  Changed the checking of the sql return*/
                      /* code to if/else code.*/
    /* 05-10-93  GDECKE  SWITCH FROM CLAIMS TO FOOTWEAR QUALITY*/
    /* VERSION OF TRAILER TABLE*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0YS68"; /* set current proc name*/

  CL0YW01.CLOTLRID = " "; /* default trailer id - blank if not found*/

  if (KL0YM005.XGPCD != "02") /* TRAILER ID IS ONLY NEEDED FOR FOOTWEAR*/
    set SQLCA empty; /* DEFAULT TO ZERO IF NOT FOOTWEAR*/
    CL0YW01.CL0YWDFL = "N";
    VDFTRL01.FQ0JWTID = 0;
    return;
  end

  call "IO6690" ("S ", SQLCA, VDFTRL01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWDFL = "N"; /* show it's not a deadlock*/
    CL0YW01.CLOTLRID = VDFTRL01.FQ0JWTID;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (KL0YM005.XWHCD != "07") /* TRAILER ID IS ONLY NEEDED FOR FOOTWEAR*/
        set SQLCA empty; /* DEFAULT TO ZERO IF NOT FOOTWEAR*/
        CL0YW01.CL0YWDFL = "N";
        VDFTRL01.FQ0JWTID = 0;
        return;
      else
        CL0YW01.CL0YWDFL = "N"; /* show it's not a deadlock*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
        if (CL0YW01.CL0YWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[2] = "  IO1390"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM  "; /* database*/
        TA1REC.TA1TBLVU = "VTRALR01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0YS68

// Validate Fcty Cd using FY1REC
Function KL0YS69()

   /* **************************************************************/
          /* * This process validates factory code **/

    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/
             /* Replaced DWPROD.VFCTY001 with DFCTY.VFCTY001.*/
             /* Replaced IO0870 with IO2810.*/
    /* 05-03-91 sgorga  Changed this to an if/else process and*/
               /* moved all inquiries about the sql rtn code*/
               /* to this process (instead of some here and some*/
               /* in -S53).*/
    /* 07-11-97 HMACAL  Changed setting Factory field to NORMAL,*/
    /* ASKIP if in Scan Mode;*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS69"; /* set current proc name*/

  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWDFL = "N"; /* to show this is not a deadlock*/
    set KL0YM005.FY1FCTYC normal;
    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      set KL0YM005.FY1FCTYC skip;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0YW01.CL0YWDFL = "N";
                                   /* to show this is not a deadlock*/
      converseLib.validationFailed(363); /* factory code is not valid*/
      CLXREC.CLXERRF = "Y";
      if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
        set KL0YM005.FY1FCTYC bold;
      else /* In Keyboard Mode*/
        set KL0YM005.FY1FCTYC cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
        if (CL0YW01.CL0YWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[2] = "  IO2810"; /* location*/
        TA1REC.TA1DBASE = "DFCTY   "; /* database*/
        TA1REC.TA1TBLVU = "VFCTY001"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0YS69

// Set Cursor - PC6REC
Function KL0YS70()

     /* This Process Sets Up Cursor For PO/Fcty Combo Validation*/

   /* ***************************************************************/
   /* *       M A I N T E N A N C E    H I S T O T Y     L O G     **/
   /* *------------------------------------------------------------**/
   /* *      DATE   PGMR   DESCRIPTION                             **/
   /* *------------------------------------------------------------**/
    /* 06-14-90 CHELLM Replaced pd2rec with pc6rec for fcty po*/
                    /* number verification.*/
   /* 05-03-91 sgorga  Removed code moving fields to themselves.*/
                    /* Changed the sql rtrn cd checking to an*/
                    /* if/else style.*/
   /* 06-07-93 GDECKE  CHANGE CL0YW04 RECORD TO PCYREC IN CALL.*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS70"; /* set current proc name*/

  set SQLCA empty;
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
                                   /* dprodc.vpoitm01 061490*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDFL = "N"; /* to show it is not a deadlock*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
      if (CL0YW01.CL0YWDCT > 2)
        converseLib.validationFailed(4); /* database busy*/
        CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
        CLXREC.CLXERRF = "Y"; /* error flag*/
      end
    else
      TA1REC.TA1LOCAT[2] = "  IO3310"; /* location*/
      TA1REC.TA1DBASE = "DPRODC"; /* database*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0YS70

// Validate Color/Dim With SY2REC
Function KL0YS71()
   /* *************************************************************/
   /* *   - This process validates color and dimension code -*/
   /* **/
   /* *  MAINTENANCE HISTORY*/
   /* **/
   /* * 05-03-91  sgorga  Moved the sql return code inquiries*/
   /* *         occurring in -220 to this process (some were there*/
   /* *         and some here).  Also, the wrong err msg was used*/
   /* *         (# 200) for invalid color or dimension so I*/
   /* *         created an appropriate new err msg # 689.*/
   /* **/
   /* * 07-11-97  HMACAL  Changed setting of COLOR and DIM to NORMAL*/
   /* *                   and AUTOSKIP when in Scan Mode*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0YS71"; /* set current proc name*/

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWDFL = "N"; /* to show this isn't a deadlock*/
    set KL0YM005.SY2CLRID normal;
    set KL0YM005.XDMCD normal;
    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      set KL0YM005.SY2CLRID skip;
      set KL0YM005.XDMCD skip;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0YW01.CL0YWDFL = "N"; /* to show this isn't a deadlock*/
      converseLib.validationFailed(689); /* Nike color and/or dimension cd is not valid*/
      CLXREC.CLXERRF = "Y";
      if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
        set KL0YM005.SY2CLRID bold;
        set KL0YM005.XDMCD bold;
      else /* In Keyboard Mode*/
        set KL0YM005.SY2CLRID cursor, modified, bold;
        set KL0YM005.XDMCD modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
        if (CL0YW01.CL0YWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[4] = "  IO0130"; /* location*/
        TA1REC.TA1DBASE = "DPROD   "; /* database*/
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0YS71

// select unique from sy1rec
Function KL0YS72()
   /* **************************************************************/
               /* * This Process Validates Style **/

    /* Maintenance History*/

   /* 05-03-91  sgorga  Moved all inquiries of the sql rtrn cd*/
                 /* (after call to database) to this process.*/
                 /* They were previously half in this process and*/
                 /* half in the -220 process.  Changed this*/
                 /* process to "if/else" (regarding checking the*/
                 /* sql rtrn codes.  Deleted redundant code.*/

   /* 07-11-97  HMACAL  Changed setting of STYLE to NORMAL,ASKIP*/
   /* when in Scan Mode;*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0YS72"; /* set current proc name*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CL0YWDFL = "N"; /* to show it is not a deadlock*/
    set KL0YM005.SY1STNBR normal;
    if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
      set KL0YM005.SY1STNBR skip;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* style not valid*/
      CL0YW01.CL0YWDFL = "N"; /* to show it is not a deadlock*/
      converseLib.validationFailed(200); /* NIKE product ID is not valid*/
      CLXREC.CLXERRF = "Y";
      if (CL0YW01.KL0YW-INPUT-MODE == "S") /* If in Scan Mode*/
        set KL0YM005.SY1STNBR bold;
      else /* In Keyboard Mode*/
        set KL0YM005.SY1STNBR cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
        if (CL0YW01.CL0YWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[2] = "  IO0120"; /* location*/
        TA1REC.TA1DBASE = "DPROD   "; /* database*/
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0YS72

// delete unique from clprec
Function KL0YS76()
   /* **************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* *-----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                             **/
   /* *-----------------------------------------------------------**/
   /* * 11-28-01  SVIJAY  ADDED DIT03REC FOR THE IO VDEFIT03      **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0YS76"; /* set current proc name*/

   /* CALL IO1350 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CALL VDEFIT03 'D ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("D ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS CHANGE ENDS   - 11/28/01*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0YW01.CL0YWDCT = 0; /* deadlock count*/
    CL0YW01.CL0YWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0YW01.CL0YWDCT = CL0YW01.CL0YWDCT + 1;
    if (CL0YW01.CL0YWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0YW01.CL0YWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0YS76"; /* location*/
  TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0YS76

// Edit Product Brand
Function KL0YS77()
   /* *************************************************************/

    /* Edit the product brand code for customer-product legal*/
    /* entity mis-match.*/

    /* Maintenance History:*/
    /* 05-31-90 CHELLM created*/
    /* 06-03-93 BCOURT allow product brand '01', NIKE, on*/
    /* side1 claim brand '05'.*/
    /* On 6/2/93, all '05' products converted to NIKE*/
    /* brand '01'.  Allow old and new side1 claims*/
    /* to use products with new brand.*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS77";


   /* If either the claim or the invoice was set up prior*/
   /* to 06-01-90 it doesnt have a brand code, so make sure*/
   /* the legal entity of customer match the legal entity of*/
   /* the product.*/
  if (CLAREC.XBCCD == " ")

    if (CLWREC.XLECD == "01") /* If Nike Customer*/
      if (SY1REC.XBCCD == "01") /* and Nike Product*/
                                 /* ;   Product xle is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.SY1STNBR cursor, modified, bold;
        return;
      end
    end

    if (CLWREC.XLECD == "05") /* If Side 1 Customer*/
      if (SY1REC.XBCCD == "05" /* and Side 1 Product*/
       || SY1REC.XBCCD == "06" /* or Relay  product*/
       || SY1REC.XBCCD == "07") /* or i.e    product*/
                                 /* ;  then Product xle is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.SY1STNBR cursor, modified, bold;
        return;
      end
    end

     /* check the division code value against allowable*/
     /* division codes for the claims order type.*/

    if (CLAREC.XOTCD in XOTTBL.XOTCD)

      if (SY2REC.XDVCD == XOTTBL.XDVCD1[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD2[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD3[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD4[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD5[sysVar.arrayIndex])
         /* next sentence*/
      else
        converseLib.validationFailed(637); /* the product brand must match the*/
        CLXREC.CLXERRF = "Y"; /* claims division or new division*/
        set KL0YM005.SY1STNBR cursor, modified, bold;
      end
    else
      converseLib.validationFailed(096); /* order type not on system table*/
      CLXREC.CLXERRF = "Y";
    end

  else

    if (SY1REC.XBCCD != CLAREC.XBCCD) /* if brand codes don't match*/
      if (SY1REC.XBCCD == "01"
       && CLAREC.XBCCD == "05") /* mismatch ok as of 6/2/93*/
        /* next sentence*/
      else
        converseLib.validationFailed(611); /* Product brand must match claim brand*/
        CLXREC.CLXERRF = "Y";
        set KL0YM005.SY1STNBR cursor, modified, bold;
      end
    end

  end


end // end KL0YS77

// Validate PO/Fcty Combo- PC6REC
Function KL0YS78()
   /* ************************ CL0YS78 ****************************/
       /* - This Process Validates The PO/Fcty Combo -*/

    /* Along with GPC (which user can't enter), the four fields*/
    /* being edited in the combo are:  Sy1stnbr,  Sy2clrid,*/
    /* Fy1fctyc,  Pc3poidt (style, color, fcty cd, & po id nbr).*/

   /* ****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *-------------------------------------------------------------**/
   /* *      DATE   PGMR   DESCRIPTION                              **/
   /* *-------------------------------------------------------------**/
   /* ****************************************************************/
    /* 06-14-90 CHELLM Replaced pd2rec with pc6rec for fcty po*/
                    /* number verification.*/
    /* 06-18-90 CHELLM changed the PO Edit back to just a warning*/
             /* only by commenting out CL0YS54 in CL0Y220 and*/
             /* adding the perform in this group.*/
             /* This needed to be done to allow for oldy moldy*/
          /* PO Numbers inspected that are not on DPRODC.VPOITM01*/
             /* Set the cl-fcty-po-fald-fl to 'n' to indicate*/
             /* those PO Nbrs. not verified on the table.*/
   /* 05-03-91  sgorga  Added code to hi-lite the 'color' field*/
             /* when the po/fcty combo is found to be invalid.*/
             /* It should have been being hi-lited, but wasn't.*/
             /* Also, removed the "modified" attribute being*/
             /* assigned to the "enterable" combo fields.*/
   /* 08-08-91  wjohns  Renamed applications for transfers.*/
   /* 06-06-93  GDECKE  CHANGE CL0YW04 TO PCYREC IN IO CALL.*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0YS78"; /* set current proc name*/


  set SQLCA empty;
  set PCYREC empty;

  PCYREC.PCYFUNC = "N3";

  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* dprodc.vpoitm01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0YW01.CLPVLDFL = "Y"; /* valid po combo*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0YW01.CLPVLDFL = "N"; /* unverified PO combo*/
      CL0YW01.CL0YWWRN = "Y"; /* set warning flag*/
      converseLib.validationFailed(364);
                                   /* Style/Colr/Fcty/PO ID combo not valid*/
      set KL0YM005.SY1STNBR cursor, bold; /* hi-lite style field*/
      set KL0YM005.SY2CLRID bold; /* hi-lite color field*/
      set KL0YM005.CLPFTYPO bold; /* hi-lite po id nbr field*/
      set KL0YM005.FY1FCTYC bold; /* hi-lite factory code field*/
    else
      TA1REC.TA1PGMNM = "KL0Y";
      TA1REC.TA1DBASE = "DPRODC   "; /* database*/
      TA1REC.TA1DBTBL = "VPOITM01 "; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0YS78

// close set pc6rec
Function KL0YS79()
   /* GET CL0YS70*/

   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* ------------------------------------------------------------**/
   /* DATE   PGMR   DESCRIPTION                             **/
   /* ------------------------------------------------------------**/
    /* 06-14-90 CHELLM Replaced pd2rec with pc6rec for fcty po*/
                    /* number verification.*/
    /* 06-07-93 GDECKE  CHANGE CL0YW04 TO PCYREC IN IO CALL.*/

   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0YS79"; /* set current proc name*/
  set SQLCA empty;
  set PCYREC empty;

  PCYREC.PCYFUNC = "C3";

  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* dprodc.vpoitm01*/

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0YS70"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO3310"; /* location*/
      TA1REC.TA1DBASE = "DPRODC"; /* database*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/

    end
  end
end // end KL0YS79

// Get Proper Return to address
Function KL0YS81()
   /* ************************************************************/
   /* *        get and format the return-to address             **/
   /* *  valid values for clartnff are 's' and 'e'              **/
   /* *  's' means default from shipto address                  **/
   /* *  'e' means user entered the data                        **/
   /* *                                                         **/
   /* *** Maintenance Log *****************************************/
   /* 03-11-94  BCourt  Rename CLFREC.xxxaddrn to xxx-addrn.    **/
   /* NOTE do not rename invoice addresses.  Keep 30 chars.  **/
   /* ************************************************************/

  set CLFREC empty;

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;

  if (CLAREC.CLARTNFF == "S") /* return to is ship to*/
    if (CLAREC.CLASHPFF == "I") /* if ship-to not from invoice*/
      IV5REC.IV0PARTN = CLAREC.IV0PARTN;
      IV5REC.IV0IVCID = CLAREC.IV0IVCID;
      call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes}; /* inv address record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLFREC.CLFADNM = IV5REC.IV5SHPNM;
        CLFREC.XXX-ADDR1 = IV5REC.IV5SHPA1; /* 3-11-94 rename*/
        CLFREC.XXX-ADDR2 = IV5REC.IV5SHPA2; /* to db2 names*/
        CLFREC.XXX-ADDR3 = IV5REC.IV5SHPA3;
        CLFREC.XXXCITY = IV5REC.IV5SHPCT;
        CLFREC.XSTCD = IV5REC.IV5SHPST;
        CLFREC.XXXZIP = IV5REC.IV5SHPZP;
        CLFREC.XCTCD = IV5REC.IV5SHPCY;
      else
        TA1REC.TA1TBLKE = "GETTING INVOICE ADDRESS";
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVADR01";
        XPCL010();
      end
    else
      CLFREC.CLFADTYP = "S"; /* want claim shipto address*/
    end
  else
    CLFREC.CLFADTYP = "R"; /* want return to address*/
  end

  if (CLFREC.CLFADNM == " ") /* if didnt get invoice address*/
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get claims address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(156); /* return to address not on file*/
        return;
      else
        TA1REC.TA1TBLKE = "GETTING CLAIM RETURN-TO ADDRESS";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end

end // end KL0YS81

// Select set of CLLREC's
Function KL0YS82()

  CLXREC.CLXCPROC = "CL0YS82"; /* set current proc name*/

  KL0YM001.CL0YMCRD = 0; /* zero screen field*/
  set CLLREC empty;
  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = -1;
  call "IO1310" ("SS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO1310" ("SN", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* Only include inspected cartons rcvd*/
      if (CLLREC.CLLRTDSP == "INSP") /* (CL586e CWH 6-27-89)*/
        KL0YM001.CL0YMCRD = KL0YM001.CL0YMCRD + CLLREC.CLLNBRCV;
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1310" ("CS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS82

// upd clprec 1
Function KL0YS89()
     /* KL0YS89   --  UPDATE CLPREC 1*/
   /* ******************************************************************/
   /* *    M A I N T E N A N C E      H I S T O R Y     L O G         **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 03-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LBL  **/
   /* * 04-13-92  twatso  rename clacmind to cl-clcom-fl              **/
   /* * 05-04-92  GDECKE  compute fREIGHT CREDIT IF rps clm is prepaid**/
   /* * 08-14-92  GDECKE  NO FREIGHTCREDIT ON RPS CLAIM WITH CARRIER  **/
   /* *                   CODE '0927' OR '0200'.                      **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.        **/
   /* * 10-08-93  GDECKE  FIX PROBLEMS WITH NO-CREDIT CODE UPDATES.   **/
   /* * 06-19-00  rgomat  to add the prod-cat, season-cd and season   **/
   /* *                   year in the new view defit03.               **/
   /* * 11-29-01  AALAGA  Changed CLPREC to DIT03REC*/
   /* ******************************************************************/
  CLXREC.CLXCPROC = "CL0YS89"; /* set current proc name*/

   /* upd clprec 1*/

   /* TCS change begins  -  11-29-01*/
   /* CLPREC.CLPDEFQ = CLPREC.CLPDEFQ + KL0YM005.CL0YMDQ1;*/
  DIT03REC.CLPDEFQ = DIT03REC.CLPDEFQ + KL0YM005.CL0YMDQ1;

  /* IF CLPREC.YDRCD = ' '*/
  /* AND CLPREC.CLNNCRQ = 0;*/
  if (DIT03REC.YDRCD == " "
   && DIT03REC.CLNNCRQ == 0)
   /* TCS change ends    -  11-29-01*/

    if (KL0YM005.CL0YMNCC == " "
     && KL0YM005.CL0YMNCQ == 0)
         /* NEXT SENTENCE*/
    else
      if (KL0YM005.CL0YMNCC != " "
       && KL0YM005.CL0YMNCQ != 0)

   /* TCS change begins  -  11-29-01*/
   /* MOVE KL0YM005.CL0YMNCC TO CLPREC.YDRCD;*/
        DIT03REC.YDRCD = KL0YM005.CL0YMNCC;
   /* MOVE KL0YM005.CL0YMNCQ TO CLPREC.CLNNCRQ;*/
        DIT03REC.CLNNCRQ = KL0YM005.CL0YMNCQ;
   /* TCS change ends    -  11-29-01*/

      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(756);
        set KL0YM005.CL0YMNCC cursor, modified, bold;
        return;
      end
    end
  else

   /* TCS Change begins  - 11-29-01*/
   /* IF CLPREC.YDRCD NE ' '*/
   /* AND CLPREC.CLNNCRQ NE 0;*/
    if (DIT03REC.YDRCD != " "
     && DIT03REC.CLNNCRQ != 0)
   /* TCS Change ends    - 11-29-01*/

      if (KL0YM005.CL0YMNCC == " "
       && KL0YM005.CL0YMNCQ == 0)
         /* NEXT SENTENCE*/
      else
        if (KL0YM005.CL0YMNCC != " "
         && KL0YM005.CL0YMNCQ != 0)

   /* TCS Change begins  - 11-29-01*/
   /* MOVE KL0YM005.CL0YMNCC TO CLPREC.YDRCD;*/
          DIT03REC.YDRCD = KL0YM005.CL0YMNCC;
   /* CLPREC.CLNNCRQ = CLPREC.CLNNCRQ + KL0YM005.CL0YMNCQ;*/
          DIT03REC.CLNNCRQ = DIT03REC.CLNNCRQ + KL0YM005.CL0YMNCQ;
   /* TCS Change ends    - 11-29-01*/

        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(756);
          set KL0YM005.CL0YMNCC cursor, modified, bold;
          return;
        end
      end
    end
  end

  if (KL0YM005.CLJNCRFL == "Y")
   /* TCS Change begins  - 11-29-01*/
   /* MOVE CLPREC.CLNNCRQ TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = DIT03REC.CLNNCRQ;
  else
   /* MOVE 0 TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = 0;
   /* TCS Change ends    - 11-29-01*/
  end

   /* determine comment seq nbr*/
  if (CL0YW01.CL0YWCOM == "Y") /* comment has been chgd*/
    if (KL0YM005.CLGCOMNT == " ")
       /* next sentence*/
    else
   /* TCS change begins  - 11-29-01*/
   /* MOVE 'Y' TO CLPREC.CL-CLCOM-FL;*/
      DIT03REC.CL-CLCOM-FL = "Y";
   /* TCS change ends    - 11-29-01*/
      CLGREC.CLACLMNB = KL0YM005.CLACLMNB;
      CLGREC.CLHSEQNB = KL0YM005.CLHSEQNB;
      CLGREC.CL2ISNBR = KL0YM005.CL0YMINB;
      CLGREC.CLGCMTYP = "D";
      call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* cursor for clgrecs*/
      CL0YW01.CL0YWEND = "N";
      CL0YW01.CLGCMSEQ = 0;
      while (CL0YW01.CL0YWEND == "N")
        KL0YS36();
      end
   /* TCS change begins - 11-29-01*/
   /* CLPREC.CLGCMSEQ = CL0YW01.CLGCMSEQ + 1;*/
      DIT03REC.CLGCMSEQ = CL0YW01.CLGCMSEQ + 1;
   /* TCS change ends  -11-29-01*/
    end
  end

   /* TCS change begins - 11-29-01*/
   /* MOVE XX0XW01.XX0XWDAT TO CLPREC.ZZZCHGDT;*/
  DIT03REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
   /* MOVE XX0XW01.XX0XWTIM TO CLPREC.ZZZCHGTM;*/
  DIT03REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* upd record*/
   /* TCS change begin*/
   /* MOVE VINSPH02.XPCCD TO CLPREC.XPCCD;*/
  DIT03REC.XPCCD = VINSPH02.XPCCD;
   /* MOVE VINSPH02.FQ0XSECD TO CLPREC.FQ0XSECD;*/
  DIT03REC.FQ0XSECD = VINSPH02.FQ0XSECD;
   /* MOVE VINSPH02.FQ0XSEYR TO CLPREC.FQ0XSEYR;*/
  DIT03REC.FQ0XSEYR = VINSPH02.FQ0XSEYR;
   /* TCS change end*/
   /* CALL VDEFIT03 'U ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("U ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS change ends   - 11-29-01*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS89"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* update screen header info*/

   /* TCS Change begins - 11-29-01*/
   /* CL0YW01.CL0YWAM1 = KL0YM005.CL0YMDQ1 * CLPREC.CLKCLPRC;*/
  CL0YW01.CL0YWAM1 = KL0YM005.CL0YMDQ1 * DIT03REC.CLKCLPRC;
   /* TCS Change ends   - 11-29-01*/

  KL0YM005.CLODMAMT = KL0YM005.CLODMAMT + CL0YW01.CL0YWAM1;
  CL0YW01.CLODMAMT = KL0YM005.CLODMAMT;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ + KL0YM005.CL0YMDQ1;
    KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ - KL0YM005.CL0YMNCQ;
    CL0YW01.CLOFGAQ = KL0YM005.CLOFGAQ;
  end
  if (CLJREC.CL-RPS-LABL-FL != "Y")
    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
  else
    if (CLLREC.CL-PPD-COLL-IND == "P")
      if (CLLREC.TF1CARCD == "0927"
       || CLLREC.TF1CARCD == "0200")
        CL0YW01.CLOFGAAM = 0;
      else
        CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
      end
    else
      CL0YW01.CLOFGAAM = 0;
    end
  end
  KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;

end // end KL0YS89

// build general clprec data
Function KL0YS90()
    /* KL0YS90 -- BUILD GENERAL CLPREC DATA*/
   /* ***************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                              **/
   /* *------------------------------------------------------------**/
   /* * 06-11-93  GDECKE  CHANGE PO TO CHARACTER FIELD ON MAP 5.   **/
   /* * 02-28-94  JCAREY  Move booking information to clp record.  **/
   /* * 11-29-01  AALAGA  Changed CLPREC to DIT03REC               **/
   /* ***************************************************************/


  CLXREC.CLXCPROC = "CL0YS90"; /* set current proc name*/

   /* build clprec data*/

  if (KL0YM005.CLPFTYPO == " ") /* set 'valid p.o. combo' flag*/
   /* TCS Change begins - 11-29-01*/
   /* MOVE 'N' TO CLPREC.CLPVLDFL;*/
    DIT03REC.CLPVLDFL = "N";
  else
   /* MOVE CL0YW01.CLPVLDFL TO CLPREC.CLPVLDFL; /* 062089*/
    DIT03REC.CLPVLDFL = CL0YW01.CLPVLDFL; /* 062089*/
  end

  if (KL0YM005.CLJNCRFL == "Y")
   /* MOVE CLPREC.CLNNCRQ TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = DIT03REC.CLNNCRQ;
  else
   /* MOVE 0 TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = 0;
  end

   /* MOVE XX0XW01.XX0XWDAT TO CLPREC.ZZZCHGDT;*/
  DIT03REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
   /* MOVE XX0XW01.XX0XWTIM TO CLPREC.ZZZCHGTM;*/
  DIT03REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
   /* TCS Change ends - 11-29-01*/

  CL0YW01.CL0YWDX9 = 1;
  CL0YW01.CL0YWEND = "N";

   /* TCS change begins - 11-29-01*/
   /* MOVE ' ' TO CLPREC.XBK-BK-SESN-CD;*/
  DIT03REC.XBK-BK-SESN-CD = " ";
   /* MOVE 0 TO CLPREC.OP-BK-YR;*/
  DIT03REC.OP-BK-YR = 0;
   /* MOVE 0 TO CLPREC.OP-BK-MO;*/
  DIT03REC.OP-BK-MO = 0;
   /* TCS change ends   - 11-29-01*/

  while (CL0YW01.CL0YWEND == "N")
    if (KL0YM005.SY1STNBR == CL0YW02.SY1STNBR[CL0YWDX9]
     && KL0YM005.SY2CLRID == CL0YW02.SY2CLRID[CL0YWDX9]
     && KL0YM005.XDMCD == CL0YW02.XDMCD[CL0YWDX9])
   /* TCS change begins - 11-29-01*/
   /* MOVE CL0YW02.XBK-BK-SESN-CD(CL0YWDX9) TO CLPREC.XBK-BK-SESN-CD;*/
      DIT03REC.XBK-BK-SESN-CD = CL0YW02.XBK-BK-SESN-CD[CL0YWDX9];
   /* MOVE CL0YW02.OP-BK-YR(CL0YWDX9) TO CLPREC.OP-BK-YR;*/
      DIT03REC.OP-BK-YR = CL0YW02.OP-BK-YR[CL0YWDX9];
   /* MOVE CL0YW02.OP-BK-MO(CL0YWDX9) TO CLPREC.OP-BK-MO;*/
      DIT03REC.OP-BK-MO = CL0YW02.OP-BK-MO[CL0YWDX9];
   /* TCS change ends   -  11-29-01*/

      CL0YW01.CL0YWEND = "Y";
    else
      CL0YW01.CL0YWDX9 = CL0YW01.CL0YWDX9 + 1;
    end

    if (CL0YW02.SY1STNBR[CL0YWDX9] == " ")
      CL0YW01.CL0YWEND = "Y";
    end
  end
end // end KL0YS90

// build key 1 data
Function KL0YS91()
   /* *******************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G             **/
   /* *******************************************************************/
   /* DATE    PGMR    DESCRIPTION                                    **/
   /* *******************************************************************/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl                 **/
   /* 10-14-93  GDECKE  FIX CUST RETURN QUANTITY LOGIC                 **/
   /* 11-29-01  AALAGA  Changed CLPREC to DIT03REC                     **/
   /* *******************************************************************/

  CLXREC.CLXCPROC = "CL0YS91"; /* set current proc name*/

   /* build key 1 data*/

   /* TCS change begins - 11-29-01*/
   /* MOVE KL0YM005.CL0YMDC1 TO CLPREC.YDFCD;*/
  DIT03REC.YDFCD = KL0YM005.CL0YMDC1;
   /* MOVE KL0YM005.CL0YMDQ1 TO CLPREC.CLPDEFQ;*/
  DIT03REC.CLPDEFQ = KL0YM005.CL0YMDQ1;
   /* MOVE KL0YM005.CL0YMNCQ TO CLPREC.CLNNCRQ;*/
  DIT03REC.CLNNCRQ = KL0YM005.CL0YMNCQ;
   /* MOVE KL0YM005.CL0YMNCC TO CLPREC.YDRCD;*/
  DIT03REC.YDRCD = KL0YM005.CL0YMNCC;

  if (KL0YM005.CLJNCRFL == "Y")
   /* MOVE CLPREC.CLNNCRQ TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = DIT03REC.CLNNCRQ;
  else
   /* MOVE 0 TO CLPREC.CLPRTCTQ;*/
    DIT03REC.CLPRTCTQ = 0;
   /* TCS Change ends - 11-29-01*/
  end

  if (CL0YW03.CL0YWYD1[CL0YWDX8] == " " /* no old clprec*/
   && CL0YW03.YDRCD[CL0YWDX8] == " ")   /* no old clprec*/
    CL0YW01.CL0YWOCP = "N";
  else
    CL0YW01.CL0YWOCP = "Y";
  end

   /* determine comment seq nbr*/
  if (CL0YW01.CL0YWCOM == "Y") /* comment has been chgd*/
    if (KL0YM005.CLGCOMNT == " ")
   /* TCS Change begins - 11-29-01*/
   /* MOVE 'N' TO CLPREC.CL-CLCOM-FL;*/
      DIT03REC.CL-CLCOM-FL = "N";
   /* TCS Change ends  - 11-29-01*/
       /* delete comment record*/
      CLGREC.CLACLMNB = KL0YM005.CLACLMNB; /* added 11/88*/
      CLGREC.CLHSEQNB = KL0YM005.CLHSEQNB;
      CLGREC.CL2ISNBR = KL0YM005.CL0YMINB;
      CLGREC.CLGCMTYP = "D";

   /* TCS Change begins - 11-29-01*/
   /* MOVE CLPREC.CLGCMSEQ TO CLGREC.CLGCMSEQ;/* added 11/88*/
      CLGREC.CLGCMSEQ = DIT03REC.CLGCMSEQ; /* added 11/88*/
      call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* cursor for clgrecs*/
   /* MOVE 0 TO CLPREC.CLGCMSEQ;*/
      DIT03REC.CLGCMSEQ = 0;
   /* TCS Change ends  - 11-29-01*/

      CLGREC.CLGCMSEQ = 0;
      CL0YW03.CL0YWCS1[CL0YWDX8] = 0; /* reset the seq nbr (cwh083090)*/
      CL0YW01.CLGCMSEQ = 0; /* reset the seq nbr (cwh083089)*/
    else
   /* TCS Change begins  - 11-29-01*/
   /* MOVE 'Y' TO CLPREC.CL-CLCOM-FL;*/
      DIT03REC.CL-CLCOM-FL = "Y";
   /* TCS Change ends  - 11-29-01*/
      if (CL0YW01.CL0YWOCP == "N" /* no old clprec*/
       || CL0YW03.CL0YWCS1[CL0YWDX8] == 0) /* no old comment*/
        CLGREC.CLACLMNB = KL0YM005.CLACLMNB;
        CLGREC.CLHSEQNB = KL0YM005.CLHSEQNB;
        CLGREC.CL2ISNBR = KL0YM005.CL0YMINB;
        CLGREC.CLGCMTYP = "D";
        call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* cursor for clgrecs*/
        CL0YW01.CL0YWEND = "N";
        CL0YW01.CLGCMSEQ = 0;
        while (CL0YW01.CL0YWEND == "N")
          KL0YS36();
        end
   /* TCS change begins - 11-29-01*/
   /* CLPREC.CLGCMSEQ = CL0YW01.CLGCMSEQ + 1;*/
        DIT03REC.CLGCMSEQ = CL0YW01.CLGCMSEQ + 1;
      else
   /* MOVE CL0YW03.CL0YWCS1(CL0YWDX8) TO CLPREC.CLGCMSEQ;/* upd clgrec*/
        DIT03REC.CLGCMSEQ = CL0YW03.CL0YWCS1[CL0YWDX8]; /* upd clgrec*/
   /* TCS Change ends - 11-29-01*/
      end
    end
  else
    if (CL0YW01.CL0YWOCP == "N") /* no old clprec*/
   /* TCS change begins - 11-29-01*/
   /* MOVE 'N' TO CLPREC.CL-CLCOM-FL;*/
      DIT03REC.CL-CLCOM-FL = "N";
   /* MOVE 0 TO CLPREC.CLGCMSEQ;*/
      DIT03REC.CLGCMSEQ = 0;
    else
   /* MOVE CL0YW03.CL0YWCS1(CL0YWDX8) TO CLPREC.CLGCMSEQ;*/
      DIT03REC.CLGCMSEQ = CL0YW03.CL0YWCS1[CL0YWDX8];
   /* TCS Change ends - 11-29-01*/
    end
  end

  if (CL0YW01.CL0YWOCP == "N") /* no old clprec*/
   /* TCS Change begins -  11-29-01*/
   /* MOVE 0 TO CLPREC.ZZZCHGCT;*/
    DIT03REC.ZZZCHGCT = 0;
  else
   /* CLPREC.ZZZCHGCT = CL0YW03.CL0YWZC1(CL0YWDX8) + 1;*/
    DIT03REC.ZZZCHGCT = CL0YW03.CL0YWZC1[CL0YWDX8] + 1;
   /* TCS Change ends - 11-29-01*/
  end

end // end KL0YS91

// add new clprec 1
Function KL0YS92()
   /* ******************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 11-28-01  SVIJAY  ADDED DIT03REC(RECORD) FOR IO VDEFIT03.     **/
   /* ******************************************************************/

  CLXREC.CLXCPROC = "CL0YS92"; /* set current proc name*/

   /* add new clprec 1*/

   /* CALL IO1350 'A ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CALL VDEFIT03 'A ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("A ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS CHANGE ENDS   - 11/28/01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0YW03.SY1STNBR[CL0YWDX8] != " ") /* old clprec exists*/
      KL0YS37(); /* update m005 array*/
    else
      KL0YS40(); /* update screen hdr only*/
    end
    KL0YS41(); /* check for cl2rec upd*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS92"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS92

// upd clprec 2
Function KL0YS93()
      /* KL06S93  --   UPDATE CLPREC 2*/
   /* ******************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *---------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                 **/
   /* *---------------------------------------------------------------**/
   /* * 03-28-92  GDECKE  SUPPRESS FREIGHT CREDIT IF CLM HAS RPS LABEL**/
   /* * 05-04-92  GDECKE  compute freiGHT CREDIT IF rps clm is prepaid**/
   /* * 08-14-92  GDECKE  NO FREIGHT CREDIT ON PREPAID RPS CLAIM WITH **/
   /* *                   CARRIER CODE '0927' OR '0200'.              **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-CLL-IND.         **/
   /* * 10-14-93  GDECKE  FIS CUST RETURN QUANTITY LOGIC.             **/
   /* * 11-28-01  SVIJAY  ADDED DIT03REC FOR IO VDEFIT03.             **/
   /* ******************************************************************/
  CLXREC.CLXCPROC = "CL0YS93"; /* set current proc name*/

   /* TCS CHANGE BEGINS - 11/28/01*/
   /* upd clprec 2*/

   /* CLPREC.CLPDEFQ = CLPREC.CLPDEFQ + KL0YM005.CL0YMDQ2;*/
   /* MOVE 0 TO CLPREC.CLNNCRQ;*/
   /* MOVE ' ' TO CLPREC.YDRCD;*/
   /* MOVE 0 TO CLPREC.CLPRTCTQ;*/
   /* MOVE XX0XW01.XX0XWDAT TO CLPREC.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO CLPREC.ZZZCHGTM;*/

   /* upd record*/
   /* TCS change begin*/
   /* MOVE VINSPH02.XPCCD TO CLPREC.XPCCD;*/
   /* MOVE VINSPH02.FQ0XSECD TO CLPREC.FQ0XSECD;*/
   /* MOVE VINSPH02.FQ0XSEYR TO CLPREC.FQ0XSEYR;*/
   /* TCS change end*/
   /* CALL VDEFIT03 'U ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  DIT03REC.CLPDEFQ = DIT03REC.CLPDEFQ + KL0YM005.CL0YMDQ2;
  DIT03REC.CLNNCRQ = 0;
  DIT03REC.YDRCD = " ";
  DIT03REC.CLPRTCTQ = 0;
  DIT03REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  DIT03REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* upd record*/
  DIT03REC.XPCCD = VINSPH02.XPCCD;
  DIT03REC.FQ0XSECD = VINSPH02.FQ0XSECD;
  DIT03REC.FQ0XSEYR = VINSPH02.FQ0XSEYR;
  call "VDEFIT03" ("U ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS CHANGE ENDS - 11/28/01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS93"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

   /* update screen header info*/

   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CL0YW01.CL0YWAM1 = KL0YM005.CL0YMDQ2 * CLPREC.CLKCLPRC;*/
  CL0YW01.CL0YWAM1 = KL0YM005.CL0YMDQ2 * DIT03REC.CLKCLPRC;
   /* TCS CHANGE ENDS   - 11/28/01*/

  KL0YM005.CLODMAMT = KL0YM005.CLODMAMT + CL0YW01.CL0YWAM1;
  CL0YW01.CLODMAMT = KL0YM005.CLODMAMT;

  if (KL0YM005.XGPCD == "02"
   && CL0YW01.XATCD == "02")
    KL0YM005.CLOFGAQ = KL0YM005.CLOFGAQ + KL0YM005.CL0YMDQ1;
    CL0YW01.CLOFGAQ = KL0YM005.CLOFGAQ;
  end
  if (CLJREC.CL-RPS-LABL-FL != "Y")
    CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
  else
    if (CLLREC.CL-PPD-COLL-IND == "P")
      if (CLLREC.TF1CARCD == "0927"
       || CLLREC.TF1CARCD == "0200")
        CL0YW01.CLOFGAAM = 0;
      else
        CL0YW01.CLOFGAAM = CL0YW01.CLOFGAQ * CL0YW01.YRMDFRGT;
      end
    else
      CL0YW01.CLOFGAAM = 0;
    end
  end
  KL0YM005.CLOFGAAM = CL0YW01.CLOFGAAM;

end // end KL0YS93

// build key 2 data
Function KL0YS94()
   /* ****************************************************************/
   /* **     M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* **------------------------------------------------------------**/
   /* **   DATE    PGMR    DESCRIPTION                              **/
   /* **------------------------------------------------------------**/
   /* ** 10-14-93  GDECKE  FIX CUST RETURN QUANTITY LOGIC.          **/
   /* ** 11-29-01  AALAGA  Changed CLPREC to DIT03REC               **/
   /* ****************************************************************/

  CLXREC.CLXCPROC = "CL0YS94"; /* set current proc name*/

   /* build key 2 data*/

   /* TCS Changes begins - 11-29-01*/
   /* MOVE KL0YM005.CL0YMDC2 TO CLPREC.YDFCD;*/
  DIT03REC.YDFCD = KL0YM005.CL0YMDC2;
   /* MOVE KL0YM005.CL0YMDQ2 TO CLPREC.CLPDEFQ;*/
  DIT03REC.CLPDEFQ = KL0YM005.CL0YMDQ2;
   /* MOVE 0 TO CLPREC.CLNNCRQ;*/
  DIT03REC.CLNNCRQ = 0;
   /* /MOVE ' ' TO CLPREC.YDRCD;*/
  DIT03REC.YDRCD = " ";
   /* MOVE 0 TO CLPREC.CLPRTCTQ;*/
  DIT03REC.CLPRTCTQ = 0;
   /* TCS Change ends     - 11-29-01*/

  if (CL0YW03.CL0YWYD2[CL0YWDX8] == " ") /* no old clprec*/
   /* TCS Change begins   - 11-29-01*/
   /* MOVE 0 TO CLPREC.ZZZCHGCT;*/
    DIT03REC.ZZZCHGCT = 0;
  else
   /* CLPREC.ZZZCHGCT = CL0YW03.CL0YWZC2(CL0YWDX8) + 1;*/
    DIT03REC.ZZZCHGCT = CL0YW03.CL0YWZC2[CL0YWDX8] + 1;
   /* TCS Change ends     - 11-29-01*/
  end

end // end KL0YS94

// add new clprec 2
Function KL0YS95()
   /* **************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* *-----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                             **/
   /* *-----------------------------------------------------------**/
   /* * 11-28-01  SVIJAY  ADDED DIT03REC FOR THE IO VDEFIT03      **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0YS95"; /* set current proc name*/

   /* add new clprec 2*/

  if (KL0YM005.CL0YMDC2 == " ") /* no key 2 entered*/
    return;
  end

   /* CALL IO1350 'A ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
   /* TCS CHANGE BEGINS - 11/28/01*/
   /* CALL VDEFIT03 'A ',SQLCA,CLPREC (NOMAPS,NONCSP;*/
  call "VDEFIT03" ("A ", SQLCA, DIT03REC) {isNoRefresh = yes, isExternal = yes};
   /* TCS CHANGE ENDS   - 11/28/01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0YW03.CL0YWYD1[CL0YWDX8] != " " /* old clprec exists*/
     || CL0YW03.YDRCD[CL0YWDX8] != " ")   /* old clprec exists*/
      KL0YS38(); /* update m005 array*/
    else
      KL0YS40(); /* update screen hdr only*/
    end
  else
    TA1REC.TA1LOCAT[2] = "CL0YS95"; /* location*/
    TA1REC.TA1LOCAT[4] = "VDEFIT03"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT03"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YS95

// Ck for DEF Returned Items
Function KL0YSDI()
   /* ************************************************************/
   /* *  Check the Claims Defectives Header Table to determine  **/
   /* *  if any items on the claim have been returned defective.**/
   /* *  If yes, move 'Y' to the claims-authorized-or-returned- **/
   /* *  items-flag.                                            **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-12-90  sgorga  created                              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YSDI"; /* set current process name*/
  set CLOREC empty; /* init. clms defective hdr table rec*/
  set SQLCA empty; /* init. sqlca*/
  CLOREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1340" ("SE", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes}; /* ck for clm# in table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row is found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CL0YW01.CL0YWARF = "Y"; /* yes to clm-auth-rtnd-items flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VDEFHD01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0YSDI

// update clarec, claim header
Function KL0YSHD()
  CLXREC.CLXCPROC = "CL0YSHD"; /* set current proc name*/
   /* create this sgrp 6-20-89; take it from cl0ys28.*/

   /* inspection completed - update clarec, claim header*/


  CLAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  CLAREC.CLASTTDT = XX0XW01.XX0XWDAT;
  CLAREC.CLASCGBY = COMMAREA.CAUSERID;

  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update clarec*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0YS28"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0YSHD

// Ck for Return Authorization
Function KL0YSRA()
   /* ************************************************************/
     /* Check the Claims Return Authorization Header Table     **/
     /* for a unique claim (which means that the claim was     **/
     /* authorized for return).                                **/
     /* If yes, move 'Y' to the claims-authorized-or-returned- **/
     /* items-flag.                                            **/
                                                            /* **/
     /* NOTE:  Although claim nbr is the unique key of the     **/
     /* Claims RA Hdr (meaning, if found, the sqlcode should   **/
     /* = 0), the test (selecting for existence) in the IO mod **/
     /* has the potential to return a -811 (duplicate rows)    **/
     /* sqlcode.  If a -811 is returned, it will be treated as **/
     /* though there are authorized products (so 'Y' will be   **/
     /* moved to the CL0YWARF flag).                           **/
                                                            /* **/
   /* ************************************************************/
    /* MAINTENANCE HISTORY                                     **/
    /* 02-12-90  sgorga  created                               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YSRA"; /* set current process name*/
  set CLJREC empty; /* init. working storage rec*/
  set SQLCA empty; /* init. sqlca*/
  CLJREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* select unique record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row is found*/
    if (CLJREC.CLJRAIND == "Y") /* the auth. items indicator = yes*/
      CL0YW01.CL0YWARF = "Y"; /* yes, items auth/rtnd flag*/
    else
       /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -811) /* duplicate row found*/
      CL0YW01.CL0YWARF = "Y"; /* yes, items auth/rtnd flag*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if record not found*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
        TA1REC.TA1TBLVU = "VRAHDR01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
        XPCL010(); /* standard abend routine for claims*/
      end
    end
  end
end // end KL0YSRA

// Ck for RTS Returned Items
Function KL0YSRI()
   /* ************************************************************/
   /* *  Check the Claims RTS Item Header Table to find out if  **/
   /* *  any items on the claim have been returned RTS.         **/
   /* *  If yes, move 'Y' to the claims-authorized-or-returned- **/
   /* *  items-flag.                                            **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-12-90  sgorga  created                              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0YSRI"; /* set current process name*/
  set CLMREC empty; /* init. clms rts header table rec*/
  set SQLCA empty; /* init. sqlca*/
  CLMREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1320" ("SE", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes}; /* ck for clm# in table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CL0YW01.CL0YWARF = "Y"; /* yes to clm-auth-rtnd-items flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VRTSHD01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* bad sql code, so abend*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0YSRI

//*** RECORD=CL0YW01 ****
// * this is the main working storage record for cl0y.
// *
// ************************************************************
// *    M A I N T E N A N C E     H I S T O R Y    L O G      *
// ************************************************************
// *  DATE     PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 05-03-91  sgorga  Deleted field clpywhpo - not used .    *
// * 09-16-91  GDECKE  ADDED FIELDS FOR GETTING COST PRICES   *
// * 06-15-94  GDECKE  ADDED FIELDS ALLOWING APPAREL PO AND   *
// *                   FACTORY ENTRY                          *
// * 03-11-94  BCourt  rename cl0ywpgp to cl0yw2gp so any     *
// *             change to cl0yw02 record will be made here.  *
// * 06-03-94  sgorga  Added 4 fields:  hold size id, size id *
// *                   found flag, size warning flag to       *
// *                   indicate invalid size msg has displayed*
// *                   and hold invalid (bad) size id field.  *
// * 04-23-97  KSHAW   Added KL0YW-USER-AUTHORIZED-FL,        *
// *                         KL0YW-ENTERED-YDF-CHAR1,         *
// *                         KL0YW-DB2-YDF-CHAR1              *
// * 06-19-97  HMACAL  Added KL0YW-INPUT-MODE,                *
// *                         PC-BAR-CD-SEQ-NBR for Scanner    *
// *                         related changes.                 *
// * 12-23-98  chellm  added more abend key information to    *
// *                   io1340 call in KL0ys25.                *
// ************************************************************
// ***********************
Record CL0YW01 type basicRecord
  10 CLACLMNB CLACLMNB ; 
  10 CL2ISNBR CL2ISNBR ; 
  10 CL0YWISN CL0YWISN ; 
  10 CLHSEQNB CLHSEQNB ; 
  10 CL0YWUSR CL0YWUSR ; 
  10 CL0YWDTE CL0YWDTE ; 
    15 CL0YWDCC CL0YWDCC ; 
    15 CL0YWDYY CL0YWDYY ; 
    15 CL0YWDMM CL0YWDMM ; 
    15 CL0YWDDD CL0YWDDD ; 
  10 CL0YWTDT CL0YWTDT ; 
  10 CL0YWNIN CL0YWNIN ; 
  10 CL0YWHDQ CL0YWHDQ ; 
  10 CL0YWHCQ CL0YWHCQ ; 
  10 CL0YWHNQ CL0YWHNQ ; 
  10 CL0YWHRQ CL0YWHRQ ; 
  10 CL0YWHFC CL0YWHFC ; 
  10 CL0YWPKY CL0YWPKY ; 
    15 CL0YWHST CL0YWHST ; 
    15 CL0YWHCL CL0YWHCL ; 
    15 CL0YWHDM CL0YWHDM ; 
    15 CL0YWHQL CL0YWHQL ; 
    15 CL0YWHUM CL0YWHUM ; 
  10 CL0YWKY1 CL0YWKY1 ; 
    15 CL0YWYDF CL0YWYDF ; 
    15 CL0YWGPC CL0YWGPC ; 
  10 XATCD XATCD ; 
  10 YRMDFRGT YRMDFRGT ; 
  10 CL0YWRAC CL0YWRAC ; 
  10 CL0YWHQ1 CL0YWHQ1 ; 
  10 CL0YWHQ2 CL0YWHQ2 ; 
  10 CL0YWHPC CL0YWHPC ; 
  10 CL0YWHNC CL0YWHNC ; 
  10 CL0YW2GP CL0YW2GP ; 
  10 * char(1) ; // sort cl0yw02 records
  10 CL0YWWRN CL0YWWRN ; 
  10 KL0YW-INSP-HOLD-WARN-FL KL0YW-INSP-HOLD-WARN-FL ; 
  10 CL0YWDHF CL0YWDHF ; 
  10 CL0YWOCP CL0YWOCP ; 
  10 CL0YWPFL CL0YWPFL ; 
  10 CL0YWEND CL0YWEND ; 
  10 CL0YWCHK CL0YWCHK ; 
  10 CL0YWUDF CL0YWUDF ; 
  10 CL0YWDEL CL0YWDEL ; 
  10 CL0YWCOM CL0YWCOM ; 
  10 CL0YWCLZ CL0YWCLZ ; 
  10 CL0YWINT CL0YWINT ; 
  10 CL0YWRTF CL0YWRTF ; 
  10 SY1STNBR SY1STNBR ; 
  10 CL0YWCOK CL0YWCOK ; 
  10 CL0YWPID CL0YWPID ; 
  10 CL0YWDFL CL0YWDFL ; 
  10 CL0YWDCT CL0YWDCT ; 
  10 CL0YWDX1 CL0YWDX1 ; 
  10 CL0YWDX2 CL0YWDX2 ; 
  10 CL0YWDX3 CL0YWDX3 ; 
  10 CL0YWDX4 CL0YWDX4 ; 
  10 CL0YWDX5 CL0YWDX5 ; 
  10 CL0YWDX6 CL0YWDX6 ; 
  10 CL0YWDX7 CL0YWDX7 ; 
  10 CL0YWDX8 CL0YWDX8 ; 
  10 CL0YWDX9 CL0YWDX9 ; 
  10 CL0YWCHG CL0YWCHG ; 
  10 CLPDEFQ CLPDEFQ ; 
  10 CLNNCRQ CLNNCRQ ; 
  10 CL0YWDQT CL0YWDQT ; 
  10 CL0YWAMT CL0YWAMT ; 
  10 CL0YWAM1 CL0YWAM1 ; 
  10 CL0YWQTY CL0YWQTY ; 
  10 CL0YWNCT CL0YWNCT ; 
  10 CL0YWICF CL0YWICF ; 
  10 CL0YWRSF CL0YWRSF ; 
  10 CL0YWNDF CL0YWNDF ; 
  10 CLGCMSEQ CLGCMSEQ ; 
  10 CL0YWZC1 CL0YWZC1 ; 
  10 CL0YWVIW CL0YWVIW [9] ; 
  10 CL0YWHDR CL0YWHDR ; 
    15 CL0YWCLM CL0YWCLM ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 KUCCONM KUCCONM ; 
    15 CL0YWINS CL0YWINS ; 
    15 CL0YWSEQ CL0YWSEQ ; 
    15 CL0YWATQ CL0YWATQ ; 
    15 CLODMAMT CLODMAMT ; 
    15 XGPCD XGPCD ; 
    15 YCTCD YCTCD ; 
    15 XGPABRV XGPABRV ; 
    15 YCTABRV YCTABRV ; 
    15 CLOFGAQ CLOFGAQ ; 
    15 CLOFGAAM CLOFGAAM ; 
    15 XWHCD XWHCD ; 
    15 XWHABRV XWHABRV ; 
    15 YCICD YCICD ; 
    15 YCIDESC YCIDESC ; 
    15 CLJNCRFL CLJNCRFL ; 
    15 XBCCD XBCCD ; 
    15 XBCABRV XBCABRV ; 
  10 CL-CLCOM-FL CL-CLCOM-FL ; 
  10 CLPVLDFL CLPVLDFL ; 
  10 CL0YWCQL CL0YWCQL ; 
  10 CL0YWARF CL0YWARF ; 
  10 XDVCD XDVCD ; 
  10 CL0YWMX2 CL0YWMX2 ; 
  10 CL0YWMX3 CL0YWMX3 ; 
  10 CL0YWCLF CL0YWCLF ; 
  10 CL0YWCLP CL0YWCLP ; 
  10 SY2CEDT1 SY2CEDT1 ; 
  10 CL0YWCLC CL0YWCLC ; 
  10 CL0YWCLS CL0YWCLS ; 
  10 CL0YWPCP CL0YWPCP ; 
  10 SP5SZPR SP5SZPR ; 
  10 CL0YWSTP CL0YWSTP ; 
  10 CL0YWPED CL0YWPED ; 
  10 KL0YW-AQ1 KL0YW-AQ1 ; 
  10 KL0YW-AQ2 KL0YW-AQ2 ; 
  10 KL0YW-AQ3 KL0YW-AQ3 ; 
  10 KL0YW-TINSP KL0YW-TINSP ; 
  10 KL0YW-TINSPH KL0YW-TINSPH ; 
  10 KL0YW-PINSP KL0YW-PINSP ; 
  10 KL0YW-PF12FL KL0YW-PF12FL ; 
  10 FQWPCPOID FQWPCPOID ; 
    15 CL0YW-PO-ID-6-CHAR CL0YW-PO-ID-6-CHAR ; 
      20 CL0YW-PO-ID-Y1 CL0YW-PO-ID-Y1 ; 
      20 CL0YW-PO-ID-Y2 CL0YW-PO-ID-Y2 ; 
      20 CL0YW-PO-ID-M1 CL0YW-PO-ID-M1 ; 
      20 CL0YW-PO-ID-M2 CL0YW-PO-ID-M2 ; 
      20 CL0YW-PO-ID-R1 CL0YW-PO-ID-R1 ; 
      20 CL0YW-PO-ID-R2 CL0YW-PO-ID-R2 ; 
  10 FQWPOIDN9 FQWPOIDN9 ; 
    15 FQWPOIDN3 FQWPOIDN3 ; 
    15 FQWPOIDN6 FQWPOIDN6 ; 
      20 FQWPOIDYR FQWPOIDYR ; 
      20 FQWPOIDMT FQWPOIDMT ; 
      20 FQWPOIDDD FQWPOIDDD ; 
  10 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
  10 CLOTLRID CLOTLRID ; 
  10 KL0YW-PO-TEST-CHA-CYMM KL0YW-PO-TEST-CHA-CYMM ; 
    15 KL0YW-PO-TEST-NUM-CYMM KL0YW-PO-TEST-NUM-CYMM ; 
      20 KL0YW-PO-TEST-NUM-C KL0YW-PO-TEST-NUM-C ; 
      20 KL0YW-PO-TEST-CHA-YMM KL0YW-PO-TEST-CHA-YMM ; 
        25 KL0YW-PO-TEST-NUM-YMM KL0YW-PO-TEST-NUM-YMM ; 
          30 KL0YW-PO-TEST-CHA-Y KL0YW-PO-TEST-CHA-Y ; 
            35 KL0YW-PO-TEST-NUM-Y KL0YW-PO-TEST-NUM-Y ; 
          30 KL0YW-PO-TEST-CHA-M1 KL0YW-PO-TEST-CHA-M1 ; 
            35 KL0YW-PO-TEST-NUM-M1 KL0YW-PO-TEST-NUM-M1 ; 
          30 KL0YW-PO-TEST-CHA-M2 KL0YW-PO-TEST-CHA-M2 ; 
            35 KL0YW-PO-TEST-NUM-M2 KL0YW-PO-TEST-NUM-M2 ; 
  10 KL0YW-PO-ID-NUM-CYMM KL0YW-PO-ID-NUM-CYMM ; 
    20 KL0YW-PO-ID-NUM-C KL0YW-PO-ID-NUM-C ; 
    20 KL0YW-PO-ID-NUM-YMM KL0YW-PO-ID-NUM-YMM ; 
      25 KL0YW-PO-ID-NUM-Y KL0YW-PO-ID-NUM-Y ; 
      25 KL0YW-PO-ID-NUM-M KL0YW-PO-ID-NUM-M ; 
      25 KL0YW-PO-ID-NUM-D KL0YW-PO-ID-NUM-D ; 
  10 PCFSECD PCFSECD ; 
  10 KL0YW-PO-FMT-VALID-FL KL0YW-PO-FMT-VALID-FL ; 
  10 KL0YW-SY-SZ-ID-FND-FL KL0YW-SY-SZ-ID-FND-FL ; 
  10 KL0YW-HLD-SY-SZ-ID KL0YW-HLD-SY-SZ-ID ; 
  10 KL0YW-SZ-WARNING-FL KL0YW-SZ-WARNING-FL ; 
  10 KL0YW-HLD-BAD-SY-SZ-ID KL0YW-HLD-BAD-SY-SZ-ID ; 
  10 KL0YW-CL-USER-AUTHORIZED-FL KL0YW-CL-USER-AUTHORIZED-FL ; 
  10 KL0YW-ENTERED-YDF-CHAR1 KL0YW-ENTERED-YDF-CHAR1 ; 
  10 KL0YW-DB2-YDF-CHAR1 KL0YW-DB2-YDF-CHAR1 ; 
  10 CLPCRTNB CLPCRTNB ; 
    15 CLPCRTNB-CHAR1 CLPCRTNB-CHAR1 ; 
    15 CLPCRTNB-CHAR2 CLPCRTNB-CHAR2 ; 
    15 CLPCRTNB-CHAR3 CLPCRTNB-CHAR3 ; 
  10 KL0YW-INPUT-MODE KL0YW-INPUT-MODE ; 
  10 PC-BAR-CD-SEQ-NBR PC-BAR-CD-SEQ-NBR ; 
  10 CL0YMSTY CL0YMSTY ; 
  10 CL0YMCLR CL0YMCLR ; 
  10 CL0YMDIM CL0YMDIM ; 
  10 KL0YW-KEY KL0YW-KEY ; 
    15 KL0YW-KEY-CLACLMNB KL0YW-KEY-CLACLMNB ; 
    15 KL0YW-KEY-SLASH1 KL0YW-KEY-SLASH1 ; 
    15 KL0YW-KEY-CLHSEQNB KL0YW-KEY-CLHSEQNB ; 
    15 KL0YW-KEY-SLASH2 KL0YW-KEY-SLASH2 ; 
    15 KL0YW-KEY-CL2ISNBR KL0YW-KEY-CL2ISNBR ; 
end // end CL0YW01

//*** RECORD=CL0YW02 ****
// this is a working storage array for the summary recs for
// screen cl0ym001. maximum of 1000 rows.
// *
// * Maintenance History:
// * 10-04-90 CHELLM Added XUMCD as part of the Summ Rec Key
// * 04-04-91 gdecke expanded from 200 to 1000 rows.
// * 09-16-91 gdecke update prologue comments.
// * 02-28-94 jcarey added booking season, year and month.
// ***********************
Record CL0YW02 type basicRecord
  5 CL0YW2GP CL0YW2GP [1000] ; 
    10 CL0YW2KY CL0YW2KY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XUMCD XUMCD ; 
    10 CLPDEFQ CLPDEFQ ; 
    10 CL0YW2CQ CL0YW2CQ ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 CLNRTSQ CLNRTSQ ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
end // end CL0YW02

//*** RECORD=CL0YW03 ****
// this is a working storage array for the detail recs for
// screen cl0ym005. maximum of 200 rows.
// ;
// ;/*********************************************************
// ;/*  M A I N T E N A N C E    H I S T O R Y    L O G      *
// ;/*-------------------------------------------------------*
// ;/*   DATE    PGMR    DESCRIPTION                         *
// ;/*-------------------------------------------------------*
// ;/* 06-15-93  GDECKE  ADD PCFSECD (SEASON CODE) TO ENABLE *
// ;/*                   APPAREL PO AND FACTORY CODE.        *
// ;/* 06-03-94  sgorga  Added sy-sz-id.  Removed yddtbl.    *
// ;/*********************************************************
// ***********************
Record CL0YW03 type basicRecord
  5 CL0YW3GP CL0YW3GP [500] ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XUMCD XUMCD ; 
    10 XQACD XQACD ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 CLPCRTNB CLPCRTNB ; 
    10 CL0YW3TL CL0YW3TL ; 
    10 YDRCD YDRCD ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 CL0YWYD1 CL0YWYD1 ; 
    10 CL0YWDQ1 CL0YWDQ1 ; 
    10 CL0YWPC1 CL0YWPC1 ; 
    10 CL0YWMN1 CL0YWMN1 ; 
    10 CL0YWCS1 CL0YWCS1 ; 
    10 CL0YWZC1 CL0YWZC1 ; 
    10 CL0YWYD2 CL0YWYD2 ; 
    10 CL0YWDQ2 CL0YWDQ2 ; 
    10 CL0YWPC2 CL0YWPC2 ; 
  5 CL0YW3GB CL0YW3GB [500] ; 
    10 CLGCOMNT CLGCOMNT ; 
    10 CL0YWMN2 CL0YWMN2 ; 
    10 CL0YWCS2 CL0YWCS2 ; 
    10 CL0YWZC2 CL0YWZC2 ; 
end // end CL0YW03

//*** RECORD=CL0YW04 ****
// IO3310:
// pass PO Number Date to iomod.
// 06-14-90 CHELLM Created record.
// ***********************
Record CL0YW04 type basicRecord
  10 CL0YWSQL CL0YWSQL ; 
  10 CL0YWCN1 CL0YWCN1 ; 
  10 CL0YWDT1 CL0YWDT1 ; 
  10 CL0YWDT2 CL0YWDT2 ; 
  10 CL0YWIDT CL0YWIDT ; 
    15 CL0YWICC CL0YWICC ; 
    15 CL0YWIYY CL0YWIYY ; 
    15 CL0YWIDD CL0YWIDD ; 
    15 CL0YWIMM CL0YWIMM ; 
  10 CL0YWCDT CL0YWCDT ; 
  10 CL0YWFDT CL0YWFDT ; 
    15 CL0YWFCC CL0YWFCC ; 
    15 CL0YWFYY CL0YWFYY ; 
    15 CL0YWFDD CL0YWFDD ; 
    15 CL0YWFMM CL0YWFMM ; 
end // end CL0YW04

//*** RECORD=CL0YW05 ****
// ************* INSPCETOR HOLD LINE COUNT RECORD ************
// 
//   THIS RECORD CONTAINS A COUNT OF RECORDS FOUND AND A
//   FUNCTION TO BE PASSED TO IO MOD IO6670
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/07/93   GDECKE   New record COPIED FROM FQYREC
// ***********************
Record CL0YW05 type basicRecord
  5 CL0YW-GROUP CL0YW-GROUP ; 
    10 CL0YW-FQYFUNC CL0YW-FQYFUNC ; 
    10 CL0YW-FQYCNT1 CL0YW-FQYCNT1 ; 
end // end CL0YW05

//*** RECORD=DIT03REC ****
// **************  Claim Defective Item Table  ****************
// 
// DB2 Table:           DCLAIM.VDEFIT03
// 
// Copylib Member:      DDEFIT03
// 
// I/O Mod:             VDEFIT03
// 
// Key to DB2 Table:    claclmnb
//                      cl2isnbr
//                      clhseqnb
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      yddcd
// 
// Date Created:        11/29/01
// 
// Maintenance Log:
// 
//   Date    Init.   Comment
// --------  -----   ------------------------------------------
// 11-29-01  svijay  Initial record creation
// ------------------------------------------------------------
// ************************
Record DIT03REC type basicRecord
  5 DITGROUP DITGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 CLHSEQNB CLHSEQNB ; 
    10 CL2ISNBR CL2ISNBR ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 YDDCD YDDCD ; 
    10 XQACD XQACD ; 
    10 XUMCD XUMCD ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC-PO-ID-SESN-CD PC-PO-ID-SESN-CD ; 
    10 CLPVLDFL CLPVLDFL ; 
    10 CLPCRTNB CLPCRTNB ; 
    10 YDFCD YDFCD ; 
    10 CLPDEFQ CLPDEFQ ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 YDRCD YDRCD ; 
    10 CLPRTCTQ CLPRTCTQ ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CLGCMSEQ CLGCMSEQ ; 
    10 CL-DTY-DWBK-FL CL-DTY-DWBK-FL ; 
    10 XPCCD XPCCD ; 
    10 FQ0XSECD FQ0XSECD ; 
    10 FQ0XSEYR FQ0XSEYR ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end DIT03REC

DataItem CL-DTY-DWBK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev identifying color
DataItem CL0YMCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev dimension code
DataItem CL0YMDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev style number
DataItem CL0YMSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iomod function
DataItem CL0YW-FQYFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0YW-GROUP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id - last 6 characters
DataItem CL0YW-PO-ID-6-CHAR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id month - 1st char
DataItem CL0YW-PO-ID-M1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id month - 2nd char
DataItem CL0YW-PO-ID-M2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id range - 1st char
DataItem CL0YW-PO-ID-R1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id range - 2nd char
DataItem CL0YW-PO-ID-R2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id - season/year - 1st char
DataItem CL0YW-PO-ID-Y1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id - season/year - 2nd char
DataItem CL0YW-PO-ID-Y2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cr qty
DataItem CL0YW2CQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array group level
DataItem CL0YW2GP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array key
DataItem CL0YW2KY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array group-b level
DataItem CL0YW3GB char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array group level
DataItem CL0YW3GP char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-def-qty total
DataItem CL0YW3TL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-mrch-amt work area
DataItem CL0YWAM1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-mrch-amt total deleted
DataItem CL0YWAMT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-auth-or-rtnd-items-flag
DataItem CL0YWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-auth-rtn-qty
DataItem CL0YWATQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT DATE
DataItem CL0YWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// chg in sort order flag
DataItem CL0YWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work check flag
DataItem CL0YWCHK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND NON-CLOSEOUT PRICE-C
DataItem CL0YWCLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found non-closeout price-c
DataItem CL0YWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen claim number
DataItem CL0YWCLM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by style,color
DataItem CL0YWCLP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOUND NON-CLOSEOUT PRICE-S
DataItem CL0YWCLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit to cl0z flag
DataItem CL0YWCLZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem CL0YWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim ok, secrty by insp flag
DataItem CL0YWCOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// upd comment flag
DataItem CL0YWCOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current quality code
DataItem CL0YWCQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-comnt-seq-nbr
DataItem CL0YWCS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-comnt-seq-nbr
DataItem CL0YWCS2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0YWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// deadlock count
DataItem CL0YWDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0YWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete flag
DataItem CL0YWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// deadlock flag
DataItem CL0YWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// defective header flag
DataItem CL0YWDHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0YWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-qty key1
DataItem CL0YWDQ1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-qty key2
DataItem CL0YWDQ2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-qty total deleted
DataItem CL0YWDQT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Number Date
DataItem CL0YWDT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Number Date
DataItem CL0YWDT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// claim insp date
DataItem CL0YWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index value for m001 array
DataItem CL0YWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of array on m001 index
DataItem CL0YWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen display index
DataItem CL0YWDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort index
DataItem CL0YWDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort index + 1
DataItem CL0YWDX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem CL0YWDX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index value for m005 array
DataItem CL0YWDX7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of array on m005 index
DataItem CL0YWDX8 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index - 2
DataItem CL0YWDX9 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0YWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit process flag
DataItem CL0YWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY
DataItem CL0YWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MONTH
DataItem CL0YWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT DATE + 25
DataItem CL0YWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DAY
DataItem CL0YWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem CL0YW-FQYCNT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem CL0YWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc code
DataItem CL0YWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold first color code
DataItem CL0YWHCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cr qty work hold field
DataItem CL0YWHCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem CL0YWHDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// def qty work hold field
DataItem CL0YWHDQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0y screen header info
DataItem CL0YWHDR char(138)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold fcty cd
DataItem CL0YWHFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-noncr-qty old
DataItem CL0YWHNC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non cr qty work hold field
DataItem CL0YWHNQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-clm-prc old
DataItem CL0YWHPC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-qty old1
DataItem CL0YWHQ1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-def-qty old2
DataItem CL0YWHQ2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold first quality code
DataItem CL0YWHQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rts qty work hold field
DataItem CL0YWHRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold first style number
DataItem CL0YWHST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold first UOM code
DataItem CL0YWHUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CENTURY
DataItem CL0YWICC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// insp complt flag
DataItem CL0YWICF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem CL0YWIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ITEM DATE
DataItem CL0YWIDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DAY
DataItem CL0YWIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen claim insp nbr
DataItem CL0YWINS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// initial entry to cl0y flag
DataItem CL0YWINT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-insp-nbr
DataItem CL0YWISN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem CL0YWIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold key for ydfcd table
DataItem CL0YWKY1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-clcom-ind
DataItem CL0YWMN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-clcom-ind
DataItem CL0YWMN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max index on cl0yw02
DataItem CL0YWMX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max index on cl0yw03
DataItem CL0YWMX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-noncr-qty total deleted
DataItem CL0YWNCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no clprecs flag
DataItem CL0YWNDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next insp nbr
DataItem CL0YWNIN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old clprec flag
DataItem CL0YWOCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-clm-prc key1
DataItem CL0YWPC1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-clm-prc key2
DataItem CL0YWPC2 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-CLM-PRC
DataItem CL0YWPCP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT PRICE EFFECTIVE DATE
DataItem CL0YWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price from flag
DataItem CL0YWPFL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// protect insp by id & dt flag
DataItem CL0YWPID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold key for prod summ
DataItem CL0YWPKY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-def-qty work area
DataItem CL0YWQTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clm hdr (rtn auth) comn ind
DataItem CL0YWRAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rls stock flag
DataItem CL0YWRSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rebuild table flag
DataItem CL0YWRTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen claim seq nbr
DataItem CL0YWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql selection
DataItem CL0YWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DEFAULT PRICE BY STYLE
DataItem CL0YWSTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// todays date formatted
DataItem CL0YWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update mode flag
DataItem CL0YWUDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-insp-by-id
DataItem CL0YWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// view ind array
DataItem CL0YWVIW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning edit flag
DataItem CL0YWWRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ydf-def-cd key1
DataItem CL0YWYD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ydf-def-cd key2
DataItem CL0YWYD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ydfcd
DataItem CL0YWYDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change count
DataItem CL0YWZC1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count
DataItem CL0YWZC2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL-CARTON-NBR (1ST CHAR)
DataItem CLPCRTNB-CHAR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CARTON-NBR (2ND CHAR)
DataItem CLPCRTNB-CHAR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL-CARTON-NBR (3RD CHAR)
DataItem CLPCRTNB-CHAR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem DITGROUP char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DAY
DataItem FQWPOIDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MONTH
DataItem FQWPOIDMT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem FQWPOIDYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// auth qty * 1.05
DataItem KL0YW-AQ1 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// auth qty + 10
DataItem KL0YW-AQ2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// auth qty * 1.50
DataItem KL0YW-AQ3 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// is user allowed to use ydfcd
DataItem KL0YW-CL-USER-AUTHORIZED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first position of db2 ydf
DataItem KL0YW-DB2-YDF-CHAR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first position of entered ydf
DataItem KL0YW-ENTERED-YDF-CHAR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold invalid size id field
DataItem KL0YW-HLD-BAD-SY-SZ-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold size id field
DataItem KL0YW-HLD-SY-SZ-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Keyboard or Scan Mode swtch
DataItem KL0YW-INPUT-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inps hold edit warning flag
DataItem KL0YW-INSP-HOLD-WARN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// abend key
DataItem KL0YW-KEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspection number
DataItem KL0YW-KEY-CL2ISNBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim number
DataItem KL0YW-KEY-CLACLMNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sequence number
DataItem KL0YW-KEY-CLHSEQNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim number
DataItem KL0YW-KEY-SLASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim number
DataItem KL0YW-KEY-SLASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// will need to use pf12 to cont.
DataItem KL0YW-PF12FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inspected prod qty (on screen)
DataItem KL0YW-PINSP int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// basic format of po looks ok
DataItem KL0YW-PO-FMT-VALID-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD CENTURY
DataItem KL0YW-PO-ID-NUM-C num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD CCCYYMMMM
DataItem KL0YW-PO-ID-NUM-CYMM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 1
DataItem KL0YW-PO-ID-NUM-D num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 1
DataItem KL0YW-PO-ID-NUM-M num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD YEAR
DataItem KL0YW-PO-ID-NUM-Y num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD YYMMMM
DataItem KL0YW-PO-ID-NUM-YMM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD CCCYYMMMM
DataItem KL0YW-PO-TEST-CHA-CYMM char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 1
DataItem KL0YW-PO-TEST-CHA-M1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 2
DataItem KL0YW-PO-TEST-CHA-M2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD YEAR
DataItem KL0YW-PO-TEST-CHA-Y char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO TEST/EDIT FIELD YYMMMM
DataItem KL0YW-PO-TEST-CHA-YMM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL0YW-PO-TEST-NUM-C num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// PO TEST/EDIT FIELD CCCYYMMMM
DataItem KL0YW-PO-TEST-NUM-CYMM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 1
DataItem KL0YW-PO-TEST-NUM-M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO TEST/EDIT FIELD MONTH 2
DataItem KL0YW-PO-TEST-NUM-M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KL0YW-PO-TEST-NUM-Y num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// PO TEST/EDIT FIELD YYMMMM
DataItem KL0YW-PO-TEST-NUM-YMM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id found flag
DataItem KL0YW-SY-SZ-ID-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid size msg displayed flg
DataItem KL0YW-SZ-WARNING-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total inspected qty to date
DataItem KL0YW-TINSP int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total inspected qty hold
DataItem KL0YW-TINSPH int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

