package kl03;

import corpcom1.*;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XGPTBL;
import corpx1.XWHTBL;
import corpx2.XWHCD;
import corpy2.YATTBL;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL03 ****
// ************************************************************
// *    m a i n t e n a n c e     h i s t o r y    log        *
// ************************************************************
// * date      pgmr    description                            *
// *----------------------------------------------------------*
// *02-28-89  jwood   added noncsp option to calls            *
// *02-28-89  jwood   added xssegtr logic                     *
// *05-16-89  gdecke  DB2 structure changes: clarec, xwhtbl.  *
// *09-22-89  bcourt  remove 5-16 ref to unused table: X CT;  *
// *                  & recs: CL I, KU C, SY C, SY 2.
// *08-08-91  wjohns  Renamed application and commarea        *
// *                    referrences to renamed claims appls.  *
// *09-19-91  ahowar  changed proc and sgrp from "cl" to "kl" *
// *01-13-92  sgorga  Set ta1rec empty.  kl03001.
// ************************************************************
// *********************
Program KL03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL03W01 CL03W01; // record
  CLAREC CLAREC; // record
  CLSREC CLSREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YATTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KL03M.KL03M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL03000: KL03000();
    exit program;
  end // end main
end // end KL03

// main flow
Function KL03000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL03000";
  COMMAREA.CACURRAP = "KL03";
  ;
  KL03001(); /* initilize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL03050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL03000

// init claims menu processing
Function KL03001()
   /* *********************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  set ta1rec, ta2rec empty.*/
   /* *********************************************************/
  ;
  CLXREC.CLXCPROC = "CL03001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  ;
   /* TEMP001;*/
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction logic*/
  XPCL011(); /* claims entry check*/
  ;
  ;
  set TA1REC empty;
  set TA2REC empty;
  set CLXREC empty; /* clear common working storage*/
  set CL03W01 empty;
  ;
  ;
  ;
  CLXREC.CLXSNAME[1] = "KL03M001"; /* init screens used in this appl*/
  CLXREC.CLXCSCRN = "KL03M001";
  ;
end // end KL03001

// decide which map to show
Function KL03050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL03050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0); /* clear error nbr*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0pm001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL03100(); /* inquiry selects*/
    end
  else
    TA1REC.TA1MAP = CLXREC.CLXCSCRN;
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
    XPCL010(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050...*/
       /* else*/
         /* the perform will auto return to cl0%000.*/
  ;
end // end KL03050

// map inquiry selections
Function KL03100()
   /* ************************************************************/
   /* *    process screen cl0%m001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL03100";
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL03101();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
  KL03102(); /* protect fields*/
  ;
  ;
   /* ***********************************************************/
  converse KL03M001 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL03110(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL03120(); /* edit entries*/
  end
  ;
  ;
  if (CLXREC.CLXUPDTF == "Y")
    KL03130(); /* process entries*/
    CLXREC.CLXUPDTF = "N";
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL03111(); /* handle enter key*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL03100

// build screen
Function KL03101()
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL03101";
  ;
  set KL03M001 initial;
  KL03M001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y")
    CLXREC.CLXBLDSC = "N";
    set SQLCA empty;
    set CLSREC empty;
    CLSREC.XWHCD = CL03W01.XWHCD;
    CLSREC.CLSTLRST = CL03W01.CLSTLRST;
    call "IO1390" ("S ", SQLCA, CLSREC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      CL03W01.XWHCD = CLSREC.XWHCD;
      CL03W01.CL03WTID = CLSREC.CLOTLRID; /* change char to numeric*/
      CL03W01.CLSTLRST = CLSREC.CLSTLRST;
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE < 0)
        TA1REC.TA1LOCAT[2] = "CL03101";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VTRALR01";
        XPCL010();
      end
    end
  end
  ;
  KL03M001.XWHCD = CL03W01.XWHCD;
  KL03M001.CLOTLRID = CL03W01.CL03WTID;
  KL03M001.CLSTLRST = CL03W01.CLSTLRST;
  if (KL03M001.CLOTLRID == "0000")
    KL03M001.CLOTLRID = "    ";
  end
  ;
  ;
   /* IF CLWREC.CLWACTIV EQ 'I';*/
   /* OR COMMAREA.CAALVL(6) EQ 'Y'  ; warehouse supervisor*/
   /* OR COMMAREA.CACLVL(6) EQ 'Y'  ; warehouse supervisor*/
    /* SET CL03M001.CLSTLRST PROTECT;*/
    /* SET CL03M001.XWHCD PROTECT;*/
   /* END ;*/
  ;
  ;
end // end KL03101

// protect fields
Function KL03102()
   /* **************************************/
   /* protect screen fields*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL03102";
  ;
  ;
  if (KL03M001.XWHCD == " ")
    set KL03M001.CLSTLRST protect;
  else
    if (COMMAREA.XWHCD == " ")
      set KL03M001.CLSTLRST protect;
    else
      if (COMMAREA.XWHCD == KL03M001.XWHCD) /* found a match*/
         /* next sentence*/
      else
        set KL03M001.CLSTLRST protect;
      end
    end
  end
   /* next sentence*/
  ;
  ;
end // end KL03102

// edit pfkeys
Function KL03110()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL03110";
  ;
  if (KL03M001.CATOAP != " " /* if any fastpath data entered*/
   || KL03M001.CAITEM != " ")
    COMMAREA.CATOAP = KL03M001.CATOAP;
    COMMAREA.CAITEM = KL03M001.CAITEM;
     /* edit or act on fastpath*/
    XPCL002();
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
          CLXREC.CLXERRF = "Y";
          return;
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          end
        end
      end
    end
  end
end // end KL03110

// handle enter key
Function KL03111()
   /* **************************************/
   /* handle enter key*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL03111";
  ;
  if (converseVar.eventKey is enter)
    if (CL03W01.CL03WRSH == "Y") /* reshow screen to user*/
       /* next sentence*/
    else
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      COMMAREA.CATOAP = "KL0A"; /* return author. print*/
      XPCL002();
      return;
    end
  end
  ;
end // end KL03111

// edit entries
Function KL03120()
   /* **************************************/
   /* edit entries*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL03120";
  ;
  CL03W01.CL03WRSH = "N"; /* init re-show screen to user flag*/
  ;
  if (KL03M001.XWHCD != CL03W01.XWHCD)
    if (KL03M001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      CLXREC.CLXBLDSC = "Y"; /* need to show new warehouse*/
      CL03W01.CL03WRSH = "Y"; /* re-show screen to user*/
      CL03W01.XWHCD = KL03M001.XWHCD;
      CL03W01.CL03WTID = 0;
      KL03M001.CLOTLRID = " ";
      CL03W01.CLSTLRST = " ";
      KL03M001.CLSTLRST = " ";
    else
      converseLib.validationFailed(258); /* warehouse is not valid*/
      set KL03M001.XWHCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL03M001.CLOTLRID = " ";
      KL03M001.CLSTLRST = " ";
      return;
    end
  end
  ;
  ;
  if (KL03M001.CLSTLRST == " ") /* default trailer id*/
    KL03M001.CLSTLRST = "O";
  end
  ;
  ;
  if (KL03M001.CLSTLRST != CL03W01.CLSTLRST)
    if (KL03M001.CLSTLRST == "O"
     || KL03M001.CLSTLRST == "C"
     || KL03M001.CLSTLRST == " ")
      CL03W01.CLSTLRST = KL03M001.CLSTLRST;
       /* next sentence*/
    else
      converseLib.validationFailed(547); /* status is not valid*/
      set KL03M001.CLSTLRST cursor, bold;
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
   /* ********************************************/
    /* when user closes the current trailer id, the*/
    /* program increments the trailer id on the database*/
    /* and closes the previous trailer id*/
   /* ********************************************/
  CLXREC.CLXUPDTF = "N"; /* init update flag*/
  ;
  if (KL03M001.CLSTLRST == "C")
    /* AND CL03W01.CLSTLRST NE 'C';*/
    CLXREC.CLXUPDTF = "Y"; /* update clsrec record*/
    CL03W01.CL03WRSH = "Y"; /* re-show screen to user*/
  end
  ;
  ;
end // end KL03120

// process screen
Function KL03130()
   /* **************************************/
    /* when user closes the current trailer id, the*/
    /* program closes the current trailer id and the*/
    /* program increments the trailer id on the database*/
   /* ********************************************/
  ;
  CLXREC.CLXCPROC = "CL03130";
  ;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLSREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CLSREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0P001";
    XPCL010(); /* abend*/
  end
  ;
  ;
   /* update status of current trailer*/
  ;
  CLSREC.XWHCD = KL03M001.XWHCD;
  CLSREC.CLOTLRID = KL03M001.CLOTLRID;
  CLSREC.CLSTLRST = KL03M001.CLSTLRST;
  ;
  call "IO1390" ("U ", SQLCA, CLSREC) {isNoRefresh = yes, isExternal = yes}; /* trailer record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(4); /* database busy*/
    else
      TA1REC.TA1LOCAT[2] = "IO1390";
      TA1REC.TA1LOCAT[2] = "SEL RECD ";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VTRALR01";
      XPCL010();
    end
  end
  ;
   /* increment to next trailer id*/
  ;
  CL03W01.CL03WTID = CL03W01.CL03WTID + 1;
  if (CL03W01.CL03WTID > 9998) /* re-init trailer id number*/
    CL03W01.CL03WTID = 1;
  end
  CLSREC.CLOTLRID = CL03W01.CL03WTID;
  CLSREC.CLSTLRST = "O";
  CL03W01.CLSTLRST = "O";
  ;
  ;
  call "IO1390" ("A ", SQLCA, CLSREC) {isNoRefresh = yes, isExternal = yes}; /* trailer record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    KL03M001.CLOTLRID = CL03W01.CL03WTID;
    KL03M001.CLSTLRST = CL03W01.CLSTLRST;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(4); /* database busy*/
    else
      TA1REC.TA1LOCAT[2] = "IO1390";
      TA1REC.TA1LOCAT[2] = "ADD RECD ";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VTRALR01";
      XPCL010();
    end
  end
  ;
  ;
end // end KL03130

Record CL03W01 type basicRecord
  10 XWHCD XWHCD ; 
  10 CL03WTID CL03WTID ; 
  10 CLSTLRST CLSTLRST ; 
  10 CL03WRSH CL03WRSH ; 
end // end CL03W01

// y/n reshow screen to user
DataItem CL03WRSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-def-trailer-id
DataItem CL03WTID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

