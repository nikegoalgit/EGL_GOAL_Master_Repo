package kl0q;

import corpcom1.CL-CLCOM-FL;
import corpcom1.CL-RPS-LABL-FL;
import corpcom1.CL-TAKEN-BY-ID;
import corpcom1.CL-UPC-LABL-FL;
import corpcom1.CL2REC;
import corpcom1.CL9TBL;
import corpcom1.CLAAUTHF;
import corpcom1.CLABLGFF;
import corpcom1.CLACAIND;
import corpcom1.CLACCLDT;
import corpcom1.CLACISNB;
import corpcom1.CLACLMNB;
import corpcom1.CLACNIND;
import corpcom1.CLACRTNB;
import corpcom1.CLACSQNB;
import corpcom1.CLACTCNM;
import corpcom1.CLADBOCL;
import corpcom1.CLADJIND;
import corpcom1.CLADNLDT;
import corpcom1.CLADNLFL;
import corpcom1.CLAESTVL;
import corpcom1.CLAGROUP;
import corpcom1.CLAMEIND;
import corpcom1.CLAOCAMT;
import corpcom1.CLAOCQTY;
import corpcom1.CLAORIGI;
import corpcom1.CLAPRATH;
import corpcom1.CLAPRYCT;
import corpcom1.CLAREC;
import corpcom1.CLARTNFF;
import corpcom1.CLASCGBY;
import corpcom1.CLASETDT;
import corpcom1.CLASHPFF;
import corpcom1.CLASTTDT;
import corpcom1.CLATFIND;
import corpcom1.CLATQTY;
import corpcom1.CLAWSENF;
import corpcom1.CLAXCIND;
import corpcom1.CLBREC;
import corpcom1.CLFREC;
import corpcom1.CLGCMSEQ;
import corpcom1.CLGREC;
import corpcom1.CLIREC;
import corpcom1.CLJFRCRF;
import corpcom1.CLJFRDBF;
import corpcom1.CLJGROUP;
import corpcom1.CLJLBRQT;
import corpcom1.CLJLBTOT;
import corpcom1.CLJNBLB;
import corpcom1.CLJNCRFL;
import corpcom1.CLJORAXD;
import corpcom1.CLJPRTLB;
import corpcom1.CLJPRTRA;
import corpcom1.CLJRAIDT;
import corpcom1.CLJRAIND;
import corpcom1.CLJRARQT;
import corpcom1.CLJRAXDT;
import corpcom1.CLJRBGFL;
import corpcom1.CLJRBXFL;
import corpcom1.CLJRDIND;
import corpcom1.CLJREC;
import corpcom1.CLJRSKFL;
import corpcom1.CLJRTGFL;
import corpcom1.CLJTATHQ;
import corpcom1.CLJUNLFL;
import corpcom1.CLKREC;
import corpcom1.CLLREC;
import corpcom1.CLNREC;
import corpcom1.CLPREC;
import corpcom1.CLRREC;
import corpcom1.CLWREC;
import corpcom1.CLXREC;
import corpcom1.CLYATHID;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CLYATHPW;
import corpcom5.CLYREC;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XAUTBL;
import corpx1.XBCCD;
import corpx1.XCCCD;
import corpx1.XCECD;
import corpx1.XCTCD;
import corpx1.XCUCD;
import corpx1.XDACD;
import corpx1.XDVCD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XIECD;
import corpx1.XSOTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XOBCD;
import corpx2.XOCCD;
import corpx2.XOTCD;
import corpx2.XPTCD;
import corpx2.XSOCD;
import corpx2.XSTCD;
import corpx2.XWHCD;
import corpx2.XXXUSRID;
import corpx2.XXXZIP;
import corpy2.YATTBL;
import corpy2.YCPCD;
import corpy2.YCPTBL;
import corpy2.YCR-NPAY-FRGT-FL;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSACTCD;
import corpy2.YCSCD;
import corpy2.YCSCD1;
import corpy2.YCSCD2;
import corpy2.YCSRPTEX;
import corpy2.YCSTBL;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YCXTBL;
import corpy2.YITCD;
import corpy2.YRMRESTK;
import corpy2.YUATBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV5REC;
import iv.common.IVAREC;
import iv.common.IVZREC;
import kl.common.KL17TBL;
import ku.common.KUCBLAID;
import ku.common.KUCCOID;
import ku.common.KUCCOLCD;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSHAID;
import ku.common.KUMSTRID;
import ku.common.KUYREC;
import ku.common.KUYSVRID;
import mn.common.MN1REC;
import mn.common.MN2REC;
import op.common.OP1CMPNB;
import op.common.OP1COGID;
import op.common.OP1CUPO;
import sm.common.SM1AGYID;
import sm.common.SM4REPID;
import sm.common.SM5REC;
import sp.common.SP1ID;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCLRPS01;
//*** PROGRAM=KL0Q ****
// ************************************************************
// *    m a i n t e n a n c e    h i s t o r y    l o g      **
// ************************************************************
// * date     pgmr   description                             **
// *---------------------------------------------------------**
// *2/20/89   jwood  added noncsp option to calls            **
// *2/20/89   jwood  added xssegtr logic                     **
// *5/16/89   gdecke DB2 structure changes: clarec, clirec,  **
// *                 kucrec, xwhtbl.                         **
// *8/01/89   gdecke DB2 structure changes: clarec, clprec,  **
// *                 cl2rec, ivarec.                         **
// *9/05/89   JWOOD  CL0Q121,122 CHANGES FOR NEW MN2REC KEY  **
// *9/14/89   GDECKE io1330 changed to use xum, xqa.         **
// *9/20/89   chellm added xautbl for defaulting ncrfl for   **
// *                 consumer claims.
// *9-22-89   bcourt remove 5-16 ref to unused tables: X CT; **
// *                 & recs: SY C, SY 2.                     **
//  01-19-90 bcourt DB2 structure changes: clirec, ivarec,
//                  kucrec, kumrec.  regen only.
// 10-12-90  chellm Db2 structure changes. Changed name of
//                  XCGCD to OP1COGID (cost of good sold ID)
// 12-12-90  sgorga In cl0qw02, renamed KUABLID to KUCBLAID
//                  (bill group address id).
// *06-10-91 twatso  DB2 structure changes: kucrec, sy1rec - -*
// *                 replaced sy1rec with sy2rec - new iomod
// *                 io0130 in cl0q970
// *08-08-91 wjohns  Renamed application and commarea
// *                   referrences to renamed claims appls.
// *10-11-91 GDECKE  OCTOBER DB2 TABLE CHANGES (VPARM101).
// *01-13-92 sgorga  Set ta1rec empty in kl0q001.
// *02-14-92 GDECKE  ADD LOGIC TO HANDLE PROCESSING RPS FLAG.
// *04-16-92 twatso  add stmt grps to set rps-stat-id to 'a'
// *                 if claim has expired and then has been
// *                 extended. if rps-stat = 'x' change, but
// *                 not if any other value.
// *06-26-92 GDECKE  MODIFY SEARCH LOGIC FOR CL9TBL.
// *10-16-92 sgorga  correct process name/delete obsolete commt
// * 5-31-93 BCOURT  Add menu option 19, like 09.
// *            Add KL16TBL of abusive customers. These will be
// *            defaulted with a claims comment and a special
// *            mark on the RA Label (grey background on claim
// *            type). Force default of return-to whse = grnld
// *            for DEF or CDR/DEF ftwr. to be memphis ftwr.
// *              Drop CL0QW06 since not used.
// *              Use  CL0QW04 in KL0QS-add cl comnt.
// *              Expand RA comment from 48 to 60 chars.
// * 7-01-93 GDECKE  ALLOW INTRASTATE RPS SERVICE FOR SELECTED
// *              ZIPCODES IF THEY ARE IN KL17TBL.
// *              ADD LOGIC FOR PARTIAL RPS ZIPCODE SERVICE.
// *08-13-93 jcarey  database change. added cl-upc-labl-fl to
// *              cl0qw08.
// * 9-08-93 BCOURT Stop printing RA message about diverting
// *  CL#1267     Grnld defective clms to Memphis Ftwr.
// *06-24-94 sgorga Default whse 25 to whse 51 (until Sept 1).
// *              Coded in kl0qs-dflt-rtn-whs.
// *07-05-94 sgorga Default whse 02 to whse 04.
// *08-31-94 sgorga Removed default code dflting whse 25 to 51.
// *08-18-95 kshaw  Removed kl17tbl logic in kl0q-rps-hard-edt.
// *11-18-98 chellm added xat's 05,06 promo to the acct type
// *                edit in the rps hard edit routine.
// *03-17-00 GDECKE MAKE RPS WEIGHT EDITS HARD ERRORS INSTEAD
// *                OF WARNING MESSAGES.
// *08-08-00 ctran  CHANGE RPS TO FEDEX ON KL0QM001
// *11-05-01 SSANK1 Allowed for edit of labels when claim is
// *                not 'CMP' or 'CAN'. Changed KL0Q101,KL0Q100
// *                and added CL0QW-INQ-UPDATE-FL in CL0QW01.
// *11-28-01 SVIJAY RECOMPILED DUE TO CHANGES IN CLPREC.
// *01-30-02 SVIJAY Allowed for edition of CL-FRGT-CR-FL flag
// *                in KL0Q101.Also allowed edition of RA Auth
// *                comments - KL0Q001,KL0Q101 & KL0Q102.
// ************************************************************
// *********************
Program KL0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0QW01 CL0QW01; // record
  CL0QW02 CL0QW02; // record
  CL0QW03 CL0QW03; // record
  CL0QW04 CL0QW04; // record
  CL0QW05 CL0QW05; // record
  CL0QW07 CL0QW07; // record
  CL0QW08 CL0QW08; // record
  CL2REC CL2REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLIREC CLIREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLNREC CLNREC; // record
  CLPREC CLPREC; // record
  CLRREC CLRREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  CLYREC CLYREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV5REC IV5REC; // record
  IVAREC IVAREC; // record
  IVZREC IVZREC; // record
  KL0QW-RPS-PARM-REC KL0QW-RPS-PARM-REC; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUYREC KUYREC; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCLRPS01 VCLRPS01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL9TBL {deleteAfterUse = yes}; // table
  use KL16TBL {deleteAfterUse = yes}; // table
  use KL17TBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0QM.KL0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0Q000: KL0Q000();
    KL0Q001: KL0Q001();
    KL0Q100: KL0Q100();
    KL0Q101: KL0Q101();
    KL0Q110: KL0Q110();
    KL0Q120: KL0Q120();
    KL0Q130: KL0Q130();
    KL0Q140: KL0Q140();
  end // end main
end // end KL0Q

// main flow
Function KL0Q000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q000";
  COMMAREA.CACURRAP = "KL0Q";
  ;
  KL0Q001(); /* initilize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0Q050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0Q000

// init claims menu processing
Function KL0Q001()
   /* ******************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* 04-03-92  GDECKE  SET RPS WARNING FLAG TO 'N'*/
   /* 05-30-93  BCOURT  cl#1230 init comment flags.*/
   /* Drop CL0QW 06 since not used.*/
   /* 09-08-93  BCOURT  cl#1267 stop setting RA comment flag*/
   /* to tell Grnld cust that return goes to MemFt*/
   /* 01-30-02  SVIJAY  Set CL0QW-RA-COMNT-FL to 'N' for allowing*/
   /* users to edit RA auth comments.*/
   /* ******************************************************/
  set TA1REC empty;
  CLXREC.CLXCPROC = "CL0Q001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
   /* TEMP001;*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry check*/
  ;
  ;
  set SQLCA empty; /* clear sqlca*/
  set CLGREC empty; /* clear clgrec*/
  set CLKREC empty; /* clear clgrec*/
  set CLLREC empty; /* clear clgrec*/
  set CLIREC empty; /* clear clirec*/
  set CLJREC empty; /* clear cljrec*/
  set CLNREC empty; /* clear clnrec*/
  set CLPREC empty; /* clear clprec*/
  set CLRREC empty; /* clear clrrec*/
  set CLXREC empty; /* clear common working storage*/
  set KUYREC empty; /* clear kuyrec*/
  set CL0QW01 empty; /* clear working storage*/
  set CL0QW02 empty; /* clear working storage*/
  set CL0QW03 empty; /* clear working storage*/
  set CL0QW04 empty; /* clear working storage*/
  set CL0QW05 empty; /* clear working storage*/
  set CL0QW07 empty; /* clear working storage*/
  set TA2REC empty; /* clear ta2rec*/
  ;
  ;
  ;
  CLXREC.CLXSNAME[1] = "KL0QM001"; /* init screens used in this appl*/
  CLXREC.CLXCSCRN = "KL0QM001";
  ;
  ;
     /* *******************/
     /* set map id's, date*/
     /* *******************/
  ;
  KL0QM001.XXXERRID = "CL0Q100"; /* map process name*/
  ;
  ;
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0Q001";
    XPCL010(); /* abend*/
  end
  ;
  ;
     /* move date to map then save it for database updates/adds*/
  CLXREC.XXXFLYY = CLXREC.XXXCYY;
  CLXREC.XXXSEP5 = "-";
  CLXREC.XXXFLMM = CLXREC.XXXCMM;
  CLXREC.XXXSEP6 = "-";
  CLXREC.XXXFLDD = CLXREC.XXXCDD;
  CL0QW02.CL0QWZZD = CLXREC.XXXFLDT;
  ;
   /* INITIALIZE RPS WARNING FLAG TO 'N'*/
  CL0QW01.CL0QW-RPS-WARN-FLAG = "N";
  ;
   /* INITIALIZE flag to insert comments for abusive accnt, 5/93*/
   /* or for changing Greenld defective return to Memp FT.*/
  CL0QW01.CL0QW-CL-COMNT-FL = "N";
   /* TCS change begins - 01-30-02*/
   /* MOVE 'N' TO CL0QW01.CL0QW-RA-COMNT-FL;9-8-93 stop using this*/
  CL0QW01.CL0QW-RA-COMNT-FL = "N";
   /* TCS change ends   - 01-30-02*/
  ;
end // end KL0Q001

// decide which map to show
Function KL0Q050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0); /* clear error nbr*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0pm001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0Q100(); /* inquiry selects*/
    end
  else
    TA1REC.TA1MAP = CLXREC.CLXCSCRN;
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
    XPCL010(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050...*/
       /* else*/
         /* the perform will auto return to cl0%000.*/
  ;
end // end KL0Q050

// map 1 Rtn Auth Print
Function KL0Q100()
   /* ************************************************************/
   /* *    process screen cl0qm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *                                                         **/
   /* *  11-06-89 CHELLM added procedure CL0Q102 to be executed **/
   /* *           to rebuild the comment area of the screen     **/
   /* *           even tho errors may exist elswhere on the     **/
   /* *           screen.                                       **/
   /* *  02-17-91 gdecke   added logic to handle rps labels.    **/
   /* *  03-17-00 gdecke   CHANGE RPS WEIGHT MSG TO HARD ERROR  **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q100";
  ;
  ;
  ;
  if (converseVar.eventKey is enter)
    if (CLXREC.CLXBLDSC == "Y")
      if (CLXREC.CLXERRF != "Y")
        set KL0QM001 initial;
        KL0QM001.XXXCURDT = VGVar.currentShortGregorianDate;
        KL0Q101();
      else
        KL0Q102(); /* just rebuild comments*/
      end
    end
  end
  ;
  if (converseVar.eventKey is pf12)
    if (CLXREC.CLXBLDSC == "Y")
      KL0Q102(); /* just rebuild comments*/
    end
  end
  ;
    /* turn on rps override flags only when the rps message*/
    /* is the one being shown. if other errors occur at the same*/
    /* time as the rps warnings, then the user would not see the*/
    /* warning message;*/
  ;
  if (CL0QW01.CL0QW-RPS-WARN-FLAG == "Y")
    CL0QW01.CL0QW-RPS-WARN-FLAG = "N";
    if (converseVar.validationMsgNum == 728)
      CL0QW01.CL0QW-RPS-WARN-EXCL = "Y";
    else
      if (converseVar.validationMsgNum == 702)
        CL0QW01.CL0QW-RPS-WARN-RSN = "Y";
      else
        if (converseVar.validationMsgNum == 704)
          CL0QW01.CL0QW-RPS-WARN-NPAY = "Y";
          /* ELSE;*/
          /* MOVE '*' TO KL0QM001.CL-RPS-LABL-FL;*/
          /* SET KL0QM001.CL-RPS-LABL-FL MODIFIED,AUTOSKIP;*/
        end
      end
    end
  end
  ;
   /* ***********************************************************/
  converse KL0QM001 ;
   /* ***********************************************************/
  ;
  CLXREC.CLXEDITF = "N";
  if (CLXREC.CLXERRF == "Y")
    CLXREC.CLXEDITF = "Y";
    CLXREC.CLXERRF = "N";
  else
    CLXREC.CLXERRF = "N";
  end
  ;
  KL0QS67(); /* set comment fields modified (CWH*/
                                   /* CL756 10-10-89)*/
  ;
  if (KL0QM001 is modified
   || KL0QM001.CLJNCRFL == " ")
    CLXREC.CLXEDITF = "Y";
  end
  ;
  KL0Q110(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  if (CLWREC.CLWACTIV == "I")
    CLXREC.CLXEDITF = "N";
    CLXREC.CLXERRF = "N";
  end
  ;
  ;
   /* TCS changes begin 11/05/2001*/
  if (CLWREC.CLWACTIV == "I"
   && CL0QW-INQ-UPDATE-FL == "Y")
    CLXREC.CLXEDITF = "Y";
  end
   /* IF CLAREC.YCTCD EQ 'RAA';*/
   /* MOVE 'I' TO CLWREC.CLWACTIV;*/
   /* MOVE 'N' TO CLXREC.CLXEDITF;*/
   /* MOVE 'N' TO CLXREC.CLXERRF;*/
   /* END;*/
   /* TCS changes end   11/05/2001*/
  ;
  if (CLWREC.CLWACTIV != "I")
    if (KL0QM001.CLJPRTLB == "Y"
     && KL0QM001.CLJNBLB == 0)
      CLXREC.CLXEDITF = "Y";
    end
    if (KL0QM001.CLJNCRFL == " ")
      CLXREC.CLXEDITF = "Y";
    end
  end
  ;
  ;
  ;
  if (CLXREC.CLXEDITF == "Y")
    KL0Q120(); /* edit entries*/
    CL0QW08.CLJGROUP = CLJREC.CLJGROUP;
  end
  ;
  ;
  if (converseVar.eventKey not pf12)
    if (CLXREC.CLXEDITF == "Y")
      if (CLXREC.CLXERRF == "N"
      ) /* TCS changes begin 11/05/2001*/
        /* AND CLWREC.CLWACTIV NE 'I';*/
        if (CLWREC.CLWACTIV != "I"
         || CL0QW-INQ-UPDATE-FL == "Y")
          KL0Q130(); /* process entries to updates*/
          ;
          KL0Q133(); /* process claim header table*/
          ;
          /* TCS changes end   11/05/2001*/
          CLXREC.CLXEDITF = "N";
        end
      end
    end
  end
  ;
  ;
  if (CLXREC.CLXEDITF == "N"
   && CLXREC.CLXERRF == "N")
    KL0Q140(); /* handle flow*/
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf12)
    if (CLXREC.CLXERRF == "N")
      converseLib.validationFailed(340); /* edits passed press enter to continue*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0Q100

// build screen
Function KL0Q101()
   /* ************************************************************/
   /* *                      build screen*/
   /* **/
   /* *   Maintenance History:*/
   /* **/
   /* *  11-06-89 CHELLM created a new statement group CL0Q102*/
   /* *                  containing the code to build the comment area*/
   /* *                  of the screen so the comment table can be*/
   /* *                  updated even tho errors may exist in other areas*/
   /* *                  of the screen.*/
   /* *  10 04-90 CHELLM Added XUMCD and XQACD to wild card values*/
   /* *                  when scanning DEFITs*/
   /* *  11-14-91 TWATSO added code to default no credit return flag*/
   /* *                  if clarec.yctcd = osd*/
   /* *  02-21-92 GDECKE ADD LOGIC TO HANDLE RPS LABEL FLAG.*/
   /* *  04-20-92 GDECKE DEFAULT RETURN NO-CREDIT FLAG TO 'Y'.*/
   /* 10-16-92  sgorga  delete comment with obsolete field.*/
   /* 5-5-93  BCOURT   Add menu option 19, like 09.*/
   /* Split off the code to default the return-to whse*/
   /* & put into KL0QS-dflt-rtn-whse.*/
   /* 01-30-02 SVIJAY   Allowed for edition of CLJFRCRF FLAG.Also*/
   /* allowed users to edit RA Auth comments -*/
   /* KL0QM001.CLGCOMNT.*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q101";
  ;
  set KL0QM001 initial;
  KL0QM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL0QM001.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  KL0QM001.KUCCOID = CLAREC.KUCCOID; /* company number*/
  KL0QM001.KUMSTRID = CLAREC.KUMSTRID; /* store*/
  KL0QM001.XNXCD = CLAREC.XNXCD; /* department number*/
  KL0QM001.KUCCONM = CLWREC.KUCCONM; /* company name*/
  KL0QM001.XGPCD = CLAREC.XGPCD; /* g.p.c.*/
  KL0QM001.CLATQTY = CLAREC.CLATQTY;
  ;
   /* added code here for osd because it seems to display the map*/
   /* and message that something needs to be entered in this field*/
  ;
  if (CLAREC.YCTCD == "OSD")
    KL0QM001.CLJNCRFL = "N";
    CLJREC.CLJNCRFL = "N";
  else
    ;
    /* SET RETURN NO CREDIT FLAG TO 'Y' (DEFAULT)*/
    ;
    if (KL0QM001.CLJNCRFL == "Y"
     || KL0QM001.CLJNCRFL == "N")
       /* NEXT SENTENCE*/
    else
      KL0QM001.CLJNCRFL = "Y";
      CLJREC.CLJNCRFL = "Y";
    end
  end
  ;
  ;
  KL0QS08(); /* look up gpc abreviation*/
  ;
  ;
  KL0QS14(); /* determine claim value*/
  KL0QM001.CLAESTVL = CLAREC.CLAESTVL;
  ;
  ;
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLNREC.CL2ISNBR = -1;
  CLNREC.XGPCD = "**";
  CLNREC.SY1STNBR = "******";
  CLNREC.SY2CLRID = "***";
  CLNREC.XDMCD = "**";
  CLNREC.XQACD = "**";
  CLNREC.XUMCD = "**";
  CLNREC.IV0IVCID = -1;
  KL0Q990(); /* get all records greater than key*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0Q991(); /* get first record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLNREC.CLNRTSQ;
      CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLNREC.CLNNCRQ;
      while (SQLCA.VAGen_SQLCODE == 0)
        KL0Q991(); /* get next record*/
        if (SQLCA.VAGen_SQLCODE == 0)
          CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLNREC.CLNRTSQ;
          CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLNREC.CLNNCRQ;
        end
      end
    end
  end
  KL0Q992(); /* close set clnrec*/
  ;
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = CLWREC.CLHSEQNB;
  ;
  ;
  CLPREC.CL2ISNBR = -1;
  CLPREC.XGPCD = "**";
  CLPREC.SY1STNBR = "******";
  CLPREC.SY2CLRID = "***";
  CLPREC.XDMCD = "**";
  CLPREC.XUMCD = "**"; /* 10-04-90*/
  CLPREC.XQACD = "**"; /* 10-04-90*/
  CLPREC.IV0IVCID = -1;
  KL0Q996(); /* get all records greater than key*/
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    KL0Q997(); /* get first record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLPREC.CLPDEFQ;
      CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLPREC.CLNNCRQ;
      while (SQLCA.VAGen_SQLCODE == 0)
        KL0Q997(); /* get next record*/
        if (SQLCA.VAGen_SQLCODE == 0)
          CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLPREC.CLPDEFQ;
          CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY + CLPREC.CLNNCRQ;
        end
      end
    end
  end
  KL0Q998(); /* close set clprec*/
  ;
  CL0QW01.CL0QWQTY = CL0QW01.CL0QWQTY * -1;
  KL0QM001.CLATQTY = CL0QW01.CL0QWQTY; /* claim return quantity*/
  KL0QM001.CL0QMTQT = CLAREC.CLATQTY;
  KL0QM001.CLACTCNM = CLAREC.CLACTCNM; /* customer contact*/
  ;
  ;
  KL0QM001.YCTCD = CLAREC.YCTCD; /* claim type*/
  KL0QS09(); /* find claim type abbreviation*/
  ;
  KL0QM001.YCRCD = CLAREC.YCRCD; /* reason code*/
  KL0QS10(); /* find reason code short description*/
  ;
  ;
  ;
   /* 5-30-93 BCOURT  FYI, the DCLAIM.VRAHDR01 = CLJREC*/
   /* may be built here or in these other routines:*/
   /* KL0O133 (make rtn-to whse = CLAREC ship-from whse)*/
   /* KL0O233 (use ship-from whse)*/
   /* KL0P130 (use ship-from whse)*/
   /* KL0R157 (use ship-from whse)*/
   /* KL0T137 (make rtn-to whse = actual receiving whse)*/
   /* KL05S-BLD-CLJREC (use whse from screen)*/
   /* All of them are the same, and use XSCLSEX to get*/
   /* the RA expiration date.*/
   /* > The code below does many extra tests and checks*/
   /* than the code in the other routines.*/
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0Q900(); /* check for 'ra' header CLJREC*/
  if (SQLCA.VAGen_SQLCODE == 100) /* if no 'ra' header*/
    ;
    XSCLSEX(); /* create expiration date*/
    KL0QM001.CLJRAXDT = CLJREC.CLJRAXDT;
    ;
    KL0QS-DFLT-RTN-WHS(); /* default the return-to whse cd*/
    KL0QS12(); /* find warehouse abbreviation*/
    ;
    if (CLAREC.YCTCD != "RTS")
      KL0QM001.CLJFRCRF = "N"; /* freight credit flag*/
      CLJREC.CLJFRCRF = "N";
    else
      KL0QM001.CLJFRCRF = " ";
      CLJREC.CLJFRCRF = " ";
    end
    KL0QM001.CLJFRDBF = "N"; /* freight debit flag*/
    CLJREC.CLJFRDBF = "N";
    ;
    if (CLAREC.YCTCD == "OSD" /* if offshore defective, default*/
     || KL0QM001.YCTCD == "OSD") /* no-credit*/
      KL0QM001.CLJNCRFL = "N"; /* return flag to  no*/
      CLJREC.CLJNCRFL = "N";
    end
                                  /* (*9/20/89 Cl691 CWH *)*/
    KL0QS11(); /* default non-credit-return-flag for*/
                                  /* consumer claims*/
    ;
      /* SET RETURN NO-CREDIT FLAG TO 'Y' (DEFAULT)*/
    ;
    if (KL0QM001.CLJNCRFL == "Y"
     || KL0QM001.CLJNCRFL == "N")
       /* NEXT SENTENCE*/
    else
      KL0QM001.CLJNCRFL = "Y";
      CLJREC.CLJNCRFL = "Y";
    end
    ;
    CLJREC.CLJNCRFL = KL0QM001.CLJNCRFL;
    KL0QM001.CLJPRTRA = "Y"; /* default ra print complete map field*/
    CLJREC.CLJPRTRA = "Y"; /* default ra print complete record*/
    KL0QM001.CLJPRTLB = "Y"; /* default label print complete value*/
    CLJREC.CLJPRTLB = "Y"; /* default label print complete record*/
    set KL0QM001.CLJPRTLB modified;
  else /* have vrahdr01, cljrec*/
    if (CLJREC.CLJRAXDT == 0)
      XSCLSEX(); /* create expiration date*/
      KL0QM001.CLJRAXDT = CLJREC.CLJRAXDT; /* expiration date*/
    else
      KL0QM001.CLJRAXDT = CLJREC.CLJRAXDT; /* expiration date*/
    end
    if (CLJREC.XSOCD != " ")
      if (CLJREC.XSOCD in XSOTBL.XSOCD) /* if in table*/
        if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
          KL0QM001.XSOCD = CLJREC.XSOCD;
          KL0QM001.XSOSNM = XSOTBL.XSOSNM[sysVar.arrayIndex];
                                   /* short name to map*/
        else
          if (CLWREC.CLWACTIV != "I")
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(257); /* sales office code not valid*/
            set KL0QM001.XSOCD cursor, modified, bold;
          end
        end
      else
        if (CLWREC.CLWACTIV != "I")
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(257); /* sales office code not valid*/
          set KL0QM001.XSOCD cursor, modified, bold;
        end
      end
    end
    ;
    if (CLAREC.YCTCD == "OSD" /* if offshore defective, default no*/
     /* credit*/
     || KL0QM001.YCTCD == "OSD")
      KL0QM001.CLJNCRFL = "N"; /* return flag to  no*/
      CLJREC.CLJNCRFL = "N";
    end
    ;
    /* SET RETURN NO CREDIT FLAG TO 'Y' (DEFAULT)*/
    ;
    if (KL0QM001.CLJNCRFL == "Y"
     || KL0QM001.CLJNCRFL == "N")
       /* NEXT SENTENCE*/
    else
      KL0QM001.CLJNCRFL = "Y";
      CLJREC.CLJNCRFL = "Y";
    end
    ;
    KL0QM001.CLJFRCRF = CLJREC.CLJFRCRF; /* credit return frt*/
    KL0QM001.CLJFRDBF = CLJREC.CLJFRDBF; /* debit return frt*/
    KL0QM001.CLJNCRFL = CLJREC.CLJNCRFL; /* return non-credit items*/
    KL0QM001.CLJPRTRA = CLJREC.CLJPRTRA; /* ra print complete*/
    KL0QM001.CLJPRTLB = CLJREC.CLJPRTLB; /* label print complete*/
    KL0QM001.CLJRARQT = CLJREC.CLJRARQT; /* tot authorize qty*/
    KL0QM001.CL0QMEXT = " "; /* extend*/
    KL0QM001.CLJORAXD = CLJREC.CLJORAXD; /* original exp. date*/
    KL0QM001.CLJNBLB = CLJREC.CLJNBLB; /* nbr of labels*/
    KL0QM001.CL-RPS-LABL-FL = CLJREC.CL-RPS-LABL-FL; /* nbr of labels*/
    KL0QM001.CLJRAIDT = CLJREC.CLJRAIDT; /* print date*/
    KL0QM001.CL0QMUID = CLJREC.XXXUSRID; /* route to id*/
    KL0QS55(); /* find user name*/
    KL0QM001.CLJLBRQT = CLJREC.CLJLBRQT; /* ttl lbl reqs.*/
    KL0QM001.CLJLBTOT = CLJREC.CLJLBTOT; /* ttl lbl prt.*/
    ;
    if (CLJREC.XWHCD != " ")
      KL0QM001.XWHCD = CLJREC.XWHCD; /* return warehouse*/
    end
    KL0QS-DFLT-RTN-WHS(); /* dflt whse value into map & cljrec*/
    ;
    KL0QS13(); /* find warehouse abbreviation*/
    ;
    KL0Q102(); /* build comment area (11-06-89 CWH)*/
    ;
  end
  ;
  ;
  KL0QS25(); /* check claims status table*/
  ;
   /* ______________________________*/
  ;
  if (CLAREC.CLAWSENF == "Y") /* if worksheet entered, this map n/a*/
    CLWREC.CLWACTIV = "I";
  end
  ;
   /* ______________________________*/
  ;
   /* TCS changes begin 11/05/2001*/
  CL0QW-INQ-UPDATE-FL = "N";
   /* TCS changes end   11/05/2001*/
  if (CLWREC.CLWACTIV == "I"
   || YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N"
   || CLWREC.CLWMNOPT == 7  
   || CLWREC.CLWMNOPT == 8  
   || CLWREC.CLWMNOPT == 9  
   || CLWREC.CLWMNOPT == 17 /* 5-5-93*/
   || CLWREC.CLWMNOPT == 19) /* 5-5-93*/
    set KL0QM001.CL0QMEXT skip;
    set KL0QM001.XWHCD skip;
    set KL0QM001.CL0QMTQT skip;
    set KL0QM001.CLJRARQT skip;
   /* TCS changes begin - 01-30-02*/
   /* SET KL0QM001.CLJFRCRF AUTOSKIP;*/
   /* TCS changes end   - 01-30-02*/
    set KL0QM001.CLJFRDBF skip;
    set KL0QM001.CLJNCRFL skip;
    set KL0QM001.CLJPRTRA skip;
    set KL0QM001.CLJPRTLB skip;
    set KL0QM001.CLJNBLB skip;
   /* SET KL0QM001.CL-RPS-LABL-FL AUTOSKIP;*/
    set KL0QM001.CL0QMUID skip;
    set KL0QM001.MN2USRNM skip;
   /* ** tcs change begins - 01-30-02*/
   /* SET KL0QM001.CLGCOMNT(1) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(2) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(3) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(4) AUTOSKIP;*/
   /* ** tcs change ends   - 01-30-02*/
    set KL0QM001.XSOCD skip;
    if (CLAREC.CLAWSENF == "Y")
      converseLib.validationFailed(536); /* worksheet entered claim*/
      set KL0QM001.CATOAP cursor;
      CLXREC.CLXERRF = "Y";
    else
   /* TCS changes begin 11/05/2001*/
      if (CLAREC.YCSCD1 != "CMP"
       && CLAREC.YCSCD1 != "CAN")
        CL0QW-INQ-UPDATE-FL = "Y";
        set KL0QM001.CLJPRTRA initialAttributes;
        set KL0QM001.CLJPRTLB initialAttributes;
        set KL0QM001.CLJNBLB initialAttributes;
        set KL0QM001.CL-RPS-LABL-FL initialAttributes;
   /* TCS changes begin - 01-30-02*/
        set KL0QM001.CLJFRCRF initialAttributes;
   /* TCS changes end   - 01-30-02*/
      else
        converseLib.validationFailed(26); /* changed to inquiry mode*/
        set KL0QM001.CATOAP cursor;
        CLXREC.CLXERRF = "Y";
      end
   /* TCS changes end   11/05/2001*/
    end
  end
  ;
  if (COMMAREA.CAALVL[1] == "Y" /* sales group*/
   || COMMAREA.CAALVL[3] == "Y" /* credit group*/
   || COMMAREA.CACLVL[1] == "Y" 
   || COMMAREA.CACLVL[3] == "Y")
    /* next sentence*/
  else
    set KL0QM001.CL0QMEXT skip;
    set KL0QM001.CL0QMTQT skip;
    set KL0QM001.CLJRARQT skip;
    set KL0QM001.XWHCD skip;
    set KL0QM001.CLJFRCRF skip;
    set KL0QM001.CLJFRDBF skip;
    set KL0QM001.CLJNCRFL skip;
    set KL0QM001.CLJPRTRA skip;
    set KL0QM001.CLJPRTLB skip;
    set KL0QM001.CLJNBLB skip;
   /* SET KL0QM001.CL-RPS-LABL-FL AUTOSKIP;*/
    set KL0QM001.CL0QMUID skip;
    set KL0QM001.MN2USRNM skip;
   /* ** tcs change begins - 01-30-02 commented the autoskip of comments*/
   /* sET KL0QM001.CLGCOMNT(1) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(2) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(3) AUTOSKIP;*/
   /* SET KL0QM001.CLGCOMNT(4) AUTOSKIP;*/
   /* ** tcs change ends   - 01-30-02*/
    set KL0QM001.XSOCD skip;
    converseLib.validationFailed(29); /* changed to inquiry mode*/
    set KL0QM001.CATOAP cursor;
    CLXREC.CLXERRF = "Y";
  end
  ;
  CL0QW03.CLAGROUP = CLAREC.CLAGROUP; /* save for authorization*/
  ;
    /* SHOW OR EDIT THE RPS LABEL FLAG*/
  ;
   /* * TCS CHANGE BEGIN - 11/05/01*/
   /* IF CLWREC.CLWACTIV EQ 'I'    /* IF INQUIRY MODE GET AND SHOW THE RPS*/
   /* OR CLJREC.CLJLBTOT GT 0;       /* no update if already printed labels*/
  ;
  if (CLWREC.CLWACTIV == "I" /* IF INQUIRY MODE GET AND SHOW THE RPS*/
   && CL0QW-INQ-UPDATE-FL == "N")
    ;
   /* * TCS CHANGE END - 11/05/01*/
    set KL0QM001.KL0QM-RPS-TITLE initialAttributes;
    set KL0QM001.CL-RPS-LABL-FL skip;
  else /* ELSE (IF 'ADD' OR 'UPDATE' MODE*/
    if (KL0QM001.CL-RPS-LABL-FL == " "
     || KL0QM001.CL-RPS-LABL-FL == "*")
      KL0QM001.CL-RPS-LABL-FL = "Y";
      set KL0QM001.CL-RPS-LABL-FL modified;
    end
    KL0QS-RPS-UPDATE();
    /* DO THIS EXTRA EDIT SO CURSOR WILL BE ON 'RTN NO-CR ITEMS' IF*/
    /* THIS IS THE INITIAL DISPLAY. THIS WILL MAKE IT SO USER DOES NOT*/
    /* NEED TO BACKTAB FROM THE RPS FIELD;*/
  end
  ;
  ;
  ;
  if (KL0QM001.CLJNCRFL == "Y"
   || KL0QM001.CLJNCRFL == "N")
     /* NEXT SENTENCE*/
  else
    KL0QM001.CLJNCRFL = "Y";
    CLJREC.CLJNCRFL = "Y";
  end
  ;
end // end KL0Q101

// build comment area
Function KL0Q102()
   /* ********************************************************/
   /* *               build comment area*/
   /* **/
   /* *  Maintenance History:*/
   /* **/
   /* *  11-06-89 CHELLM installed this section of code as*/
   /* *           a new statement group to correct a problem*/
   /* *           updating the Comment Table when errors*/
   /* *           existed on the screen.*/
   /* * 05-30-93 BCOURT if KL0 Q101 decided this new claim*/
   /* *             is defective ftwr to rtn to grnld, it forced*/
   /* *             the rtn whse to be memphis and set a flag*/
   /* *             to default an RA comment, done here.*/
   /* * 09-08-93 BCOURT Stop inserting RA comment that defective*/
   /* * CL#1267     returns for Greenland are going to Memphis.*/
   /* 01-30-02  SVIJAY  Allowed for edition of RA comments -*/
   /* CL0QW-RA-COMNT-FL & KL0QM001.CLGCOMNT.*/
   /* ********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q102";
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 4) /* clear the comment lines on screen*/
    ;
    KL0QM001.CL0QMCDT[CLXLINEX] = 0;
    KL0QM001.CLGCOMNT[CLXLINEX] = " ";
    KL0QM001.XXXUSRID[CLXLINEX] = " ";
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    ;
  end
  ;
  ;
   /* move data to record key for clgrec(comment) search*/
  ;
  CLGREC.CLACLMNB = CLJREC.CLACLMNB;
  CLGREC.CLHSEQNB = 1; /* always refers to the first return*/
  CLGREC.CLGCMTYP = "R"; /* working with 'r'a comments*/
  CLGREC.CL2ISNBR = 0;
  ;
  KL0Q911(); /* get set of applicable comments*/
  if (SQLCA.VAGen_SQLCODE != 0)
                                   /* in ascending order by comment seq nbr*/
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      return;
    end
  end
  ;
  KL0Q912(); /* get first comment record*/
  if (SQLCA.VAGen_SQLCODE != 0
   /* in ascending order by comment seq nbr*/
   && SQLCA.VAGen_SQLCODE != 100)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CLXREC.CLXLSTAX = 0; /* set last filled pointer*/
   /* ** TCS change begins - 01-30-02*/
   /* IF CL0QW01.CL0QW-RA-COMNT-FL EQ 'Y';/* add 5/93, drop 9/93*/
      if (CL0QW01.CL0QW-RA-COMNT-FL == "Y")
   /* TCS change ends     - 01-30-02*/
      /* MOVE '******** THIS DEFECTIVE RETURN*/
      /* WILL BE PROCESSED IN MEMPHIS.'*/
   /* KL0QM001.CLGCOMNT(1);*/
   /* MOVE '* -->  * THIS CHANGE REFLECTS OUR COMMITMENT TO IMPROVE THE'*/
   /* KL0QM001.CLGCOMNT(2);*/
   /* MOVE '* NOTE * QUALITY OF OUR PRODUCTS.  IF YOU WOULD LIKE MORE'*/
   /* KL0QM001.CLGCOMNT(3);*/
   /* MOVE '******** INFORMATION, CONTACT NIKE CUSTOMER SERVICE.'*/
   /* KL0QM001.CLGCOMNT(4);*/
   /* ** TCS change begins - 01-30-02*/
   /* SET KL0QM001.CLGCOMNT(1) MODIFIED;*/
        set KL0QM001.CLGCOMNT[1] modified;
   /* SET KL0QM001.CLGCOMNT(2) MODIFIED;*/
        set KL0QM001.CLGCOMNT[2] modified;
   /* SET KL0QM001.CLGCOMNT(3) MODIFIED;*/
        set KL0QM001.CLGCOMNT[3] modified;
   /* SET KL0QM001.CLGCOMNT(4) MODIFIED;*/
        set KL0QM001.CLGCOMNT[4] modified;
   /* MOVE 'N' TO CL0QW01.CL0QW-RA-COMNT-FL;*/
        CL0QW01.CL0QW-RA-COMNT-FL = "N";
   /* END;*/
      end
   /* ** TCS change ends   - 01/30/02*/
    else
      CLXREC.CLXLINEX = 1;
      ;
      while (SQLCA.VAGen_SQLCODE == 0
       && CLXREC.CLXLINEX <= 4) /* lines on screen*/
        ;
         /* move comments to screen and also save them in*/
         /* working storage*/
        ;
        CL0QW01.CL0QWDT1 = CLGREC.ZZZCHGDT; /* strip off leading 0*/
        KL0QM001.CL0QMCDT[CLXLINEX] = CL0QW01.CL0QWDT2;
        KL0QM001.CLGCOMNT[CLXLINEX] = CLGREC.CLGCOMNT;
        KL0QM001.XXXUSRID[CLXLINEX] = CLGREC.XXXUSRID;
        CL0QW01.CLGCMSEQ[CLXLINEX] = CLGREC.CLGCMSEQ;
        CL0QW01.CL0QWZZC[CLXLINEX] = CLGREC.ZZZCHGCT;
        ;
        KL0Q912(); /* get next comment record*/
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100)
          KL0Q913();
          return;
        end
        ;
        if (SQLCA.VAGen_SQLCODE == 0)
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            CLXREC.CLXLSTAX = CLXREC.CLXLINEX;
          end
        end
      end
      ;
      KL0Q913(); /* close cursor for clgrec*/
    end
  end
  ;
  ;
end // end KL0Q102

// edit pfkeys
Function KL0Q110()
   /* **************************************/
   /* edit pf keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q110";
  if (converseVar.eventKey is enter)
    if (KL0QM001.CATOAP == " "
     && KL0QM001.CAITEM == " ")
      return;
    else
      if (KL0QM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0QM001.CATOAP;
        COMMAREA.CAITEM = KL0QM001.CAITEM;
        CLXREC.CLXEDITF = "N"; /* dont edit data*/
        XPCL002(); /* try to get there*/
        return;
      else
        if (KL0QM001.CATOAP == " "
         && KL0QM001.CAITEM != " ")
          converseLib.validationFailed(01); /* enter option field*/
          CLXREC.CLXEDITF = "N"; /* dont edit data*/
          CLXREC.CLXERRF = "Y"; /* there are errors in*/
          return;
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXEDITF = "N";
          CLXREC.CLXERRF = "Y";
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXEDITF = "N";
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
end // end KL0Q110

// edit entries
Function KL0Q120()
   /* *************************************************************/
   /* *            edit r/a screen entries (cl0qm001)            **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 04-03-92  GDECKE  ADD EDITS FOR VALID RPS FLAG           **/
   /* * 04-16-92  twatso  add update to rps-stat-id if claim     **/
   /* *                   auth date is extended after expiring   **/
   /* 10-16-92  sgorga  delete comment with obsolete field.     **/
   /* 5-30-93   BCOURT  CL#1230 Defective centralization.       **/
   /* If clm group co id is in kl16 tbl as abusive **/
   /* accnt, then insert clm comment to tell whse  **/
   /* inspector to do full quality insp.before     **/
   /* give credit on claim.                        **/
   /* *************************************************************/
  ;
   /* *************************************************************/
   /* **/
   /* *   if any of the following information is entered it must*/
   /* *   be edited for validity.some fields are defaulted(see*/
   /* *   each one individually for default values).*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q120";
  CL0QW03.CLAGROUP = CLAREC.CLAGROUP;
  ;
   /* ************************************************************/
   /* *this process handles all edits of comment fields,        **/
   /* *  and any subsequent updating, required by               **/
   /* *  entries into screen cl0qm001                           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
   /* 5/93 flag set 'y' in kl0qs-dflt-rtn-whs in kl0q101*/
  ;
  if (CL0QW01.CL0QW-CL-COMNT-FL == "Y") /* if account is 'abusive',*/
    KL0QS-ADD-CL-COMNT(); /* insert clm comment for inspector*/
    CL0QW01.CL0QW-CL-COMNT-FL = "N";
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 4)
    if (KL0QM001.CLGCOMNT[CLXLINEX] is modified)
      KL0QS40();
    end /* add/del/chg comnts*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  CLXREC.CLXLINEX = 1;
  ;
  while (CLXREC.CLXLINEX <= 4)
    if (KL0QM001.CLGCOMNT[CLXLINEX] != " ")
      CL0QW01.CL0QWCMT = "Y";
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  set KL0QM001.XSOCD normal;
  set KL0QM001.XSOSNM normal;
  set KL0QM001.CL0QMUID normal;
  if (KL0QM001.CL0QMUID != " ")
    if (KL0QM001.XSOCD != " ")
      if (KL0QM001.XSOCD in XSOTBL.XSOCD) /* if in table*/
        if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
          /* MOVE 'Y' TO CL0QW01.CL0QWUPJ   ;  update to cljrec flag*/
          KL0QM001.XSOSNM = XSOTBL.XSOSNM[sysVar.arrayIndex]; /* short name to*/
          CLJREC.XSOCD = KL0QM001.XSOCD;
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(257); /* sales office code not valid*/
          set KL0QM001.XSOCD cursor, modified, bold;
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(257); /* sales office code not valid*/
        set KL0QM001.XSOCD cursor, modified, bold;
      end
    else
      KL0QM001.XSOCD = MN2REC.XSOCD;
      if (KL0QM001.XSOCD != " ")
        if (KL0QM001.XSOCD in XSOTBL.XSOCD) /* if in table*/
          if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
            KL0QM001.XSOSNM = XSOTBL.XSOSNM[sysVar.arrayIndex]; /* short name to map*/
            CLJREC.XSOCD = KL0QM001.XSOCD;
             /* MOVE 'Y' TO CL0QW01.CL0QWUPJ ;  update to cljrec flag*/
          else
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(257); /* sales office code not valid*/
            set KL0QM001.XSOCD cursor, modified, bold;
          end
        else
          KL0QM001.XSOSNM = " "; /* clear short name on map*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(257); /* sales office code not valid*/
          set KL0QM001.XSOCD cursor, modified, bold;
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(515); /* no default sales office*/
        set KL0QM001.XSOCD cursor, modified, bold;
      end
    end
  else
    if (KL0QM001.XSOCD != " ")
      if (KL0QM001.XSOCD in XSOTBL.XSOCD) /* if in table*/
        if (XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
          /* MOVE 'Y' TO CL0QW01.CL0QWUPJ   ;  update to cljrec flag*/
          KL0QM001.XSOSNM = XSOTBL.XSOSNM[sysVar.arrayIndex];
                                   /* short name to map*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(315); /* userid code not valid*/
          set KL0QM001.CL0QMUID cursor, bold;
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(257); /* sales office code not valid*/
          set KL0QM001.XSOCD cursor, modified, bold;
        end
      else
        KL0QM001.XSOSNM = " "; /* clear short name on map*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(257); /* sales office code not valid*/
        set KL0QM001.XSOCD cursor, modified, bold;
      end
    else
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
      CLJREC.XSOCD = KL0QM001.XSOCD;
      CLJREC.XXXUSRID = KL0QM001.CL0QMUID;
      KL0QM001.XSOSNM = " ";
      KL0QM001.MN2USRNM = " ";
    end
  end
  ;
  KL0QS55(); /* edit user id for route to*/
  ;
  set KL0QM001.CLJNBLB normal;
  if (KL0QM001.CLJPRTLB == "Y")
    if (KL0QM001.CLJNBLB <= 0)
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(310); /* print labels? number of labels must*/
                                   /* be > zero*/
      set KL0QM001.CLJNBLB cursor, modified, bold;
    else
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
      CLJREC.CLJNBLB = KL0QM001.CLJNBLB;
    end
  else
    if (KL0QM001.CLJNBLB != 0)
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(311); /* print labels? number of labels not*/
                                   /* permitted*/
      set KL0QM001.CLJNBLB cursor, modified, bold;
    else
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
      CLJREC.CLJNBLB = KL0QM001.CLJNBLB;
    end
  end
  ;
  set KL0QM001.CLJPRTLB normal;
  if (KL0QM001.CLJPRTLB is modified) /* print labels*/
    if (KL0QM001.CLJPRTLB == "Y")
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
      CLJREC.CLJPRTLB = KL0QM001.CLJPRTLB;
      CLJREC.CLJRAIDT = 0;
      KL0QM001.CLJRAIDT = 0;
    else
      if (KL0QM001.CLJPRTLB == "N"
       || KL0QM001.CLJPRTLB == " ")
        CLJREC.CLJPRTLB = KL0QM001.CLJPRTLB;
        /* MOVE 'Y' TO CL0QW01.CL0QWUPJ     ;  update to cljrec flag*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(309); /* print labels? not valid-enter y,n,or*/
                                   /* ' '*/
        set KL0QM001.CLJPRTLB cursor, modified, bold;
      end
    end
  end
  ;
  set KL0QM001.CLJPRTRA normal;
  if (KL0QM001.CLJPRTRA is modified) /* print ra*/
    if (KL0QM001.CLJPRTRA == "Y")
      CLJREC.CLJRAIDT = 0;
      KL0QM001.CLJRAIDT = 0;
      CLJREC.CLJPRTRA = KL0QM001.CLJPRTRA;
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
    else
      if (KL0QM001.CLJPRTRA == "N"
       || KL0QM001.CLJPRTRA == " ")
        CLJREC.CLJPRTRA = KL0QM001.CLJPRTRA;
        /* MOVE 'Y' TO CL0QW01.CL0QWUPJ     ;  update to cljrec flag*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(308); /* print ra? not valid-enter y,n,or ' '*/
        set KL0QM001.CLJPRTRA cursor, modified, bold;
      end
    end
  end
  ;
  set KL0QM001.CLJNCRFL normal;
  if (KL0QM001.CLJNCRFL != " ") /* non-credit return*/
    if (KL0QM001.CLJNCRFL == "Y"
     || KL0QM001.CLJNCRFL == "N")
      CLJREC.CLJNCRFL = KL0QM001.CLJNCRFL;
      /* MOVE 'Y' TO CL0QW01.CL0QWUPJ       ;  update to cljrec flag*/
    else
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(307); /* return no-credit items? not*/
                                   /* valid-enter y or n*/
      set KL0QM001.CLJNCRFL cursor, modified, bold;
    end
  else
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(307); /* return no-credit items? not*/
                                   /* valid-enter y or n*/
    set KL0QM001.CLJNCRFL cursor, modified, bold;
  end
  ;
  set KL0QM001.CLJFRDBF normal;
  if (KL0QM001.CLJFRDBF == "Y")
    if (KL0QM001.CLJFRCRF == "Y")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(304); /* choose cr or db not both*/
      set KL0QM001.CLJFRCRF cursor, modified, bold;
      set KL0QM001.CLJFRDBF modified, bold;
    else
      if (KL0QM001.CLJFRCRF == "N"
       || KL0QM001.CLJFRCRF == " ")
        CLJREC.CLJFRCRF = KL0QM001.CLJFRCRF;
        CLJREC.CLJFRDBF = KL0QM001.CLJFRDBF;
        /* MOVE 'Y' TO CL0QW01.CL0QWUPJ     ;  update to cljrec flag*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(305); /* credit return f.c. flag? not*/
                                   /* valid-enter y,*/
        set KL0QM001.CLJFRCRF cursor, modified, bold;
      end
    end
  else
    if (KL0QM001.CLJFRDBF == "N"
     || KL0QM001.CLJFRDBF == " ")
      if (KL0QM001.CLJFRCRF == "Y"
       || KL0QM001.CLJFRCRF == "N"
       || KL0QM001.CLJFRCRF == " ")
        CLJREC.CLJFRCRF = KL0QM001.CLJFRCRF;
        CLJREC.CLJFRDBF = KL0QM001.CLJFRDBF;
        /* MOVE 'Y' TO CL0QW01.CL0QWUPJ     ;  update to cljrec flag*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(305); /* credit return f.c. flag? not*/
                                   /* valid-enter y,n*/
        set KL0QM001.CLJFRCRF cursor, modified, bold;
      end
    else
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(306); /* debit return f.c.flag? not*/
                                   /* valid-enter y,n*/
      set KL0QM001.CLJFRDBF cursor, modified, bold;
    end
  end
  ;
  set KL0QM001.CLJFRCRF normal;
  if (KL0QM001.CLJFRCRF == "Y")
    if (KL0QM001.CLJFRDBF == "Y")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(304); /* choose cr or db not both*/
      set KL0QM001.CLJFRCRF cursor, modified, bold;
      set KL0QM001.CLJFRDBF modified, bold;
    else
      if (KL0QM001.CLJFRDBF == "N"
       || KL0QM001.CLJFRDBF == " ")
        CLJREC.CLJFRCRF = KL0QM001.CLJFRCRF;
        CLJREC.CLJFRDBF = KL0QM001.CLJFRDBF;
        /* MOVE 'Y' TO CL0QW01.CL0QWUPJ     ;  update to cljrec flag*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(306); /* debit return f.c. flag? not*/
                                   /* valid-enter y,*/
        set KL0QM001.CLJFRDBF cursor, modified, bold;
      end
    end
  else
    if (CLAREC.YCTCD != "RTS")
      if (KL0QM001.CLJFRCRF == "N"
       || KL0QM001.CLJFRCRF == " ")
        if (KL0QM001.CLJFRDBF == "Y"
         || KL0QM001.CLJFRDBF == "N"
         || KL0QM001.CLJFRDBF == " ")
          CLJREC.CLJFRDBF = KL0QM001.CLJFRDBF;
          CLJREC.CLJFRCRF = KL0QM001.CLJFRCRF;
          /* MOVE 'Y' TO CL0QW01.CL0QWUPJ   ;  update to cljrec flag*/
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(306); /* debit return f.c. flag? not*/
                                   /* valid-enter y*/
          set KL0QM001.CLJFRDBF cursor, modified, bold;
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(305); /* credit return f.c.flag? not*/
                                   /* valid-enter*/
        set KL0QM001.CLJFRCRF cursor, modified, bold;
      end
    else
      if (KL0QM001.CLJFRCRF == "N")
        if (KL0QM001.CLJFRDBF == "Y"
         || KL0QM001.CLJFRDBF == "N"
         || KL0QM001.CLJFRDBF == " ")
          CLJREC.CLJFRDBF = KL0QM001.CLJFRDBF;
          CLJREC.CLJFRCRF = KL0QM001.CLJFRCRF;
          /* MOVE 'Y' TO CL0QW01.CL0QWUPJ   ;  update to cljrec flag*/
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(306); /* debit return f.c. flag? not*/
                                   /* valid-enter y*/
          set KL0QM001.CLJFRDBF cursor, modified, bold;
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(307); /* credit return f.c.flag? not*/
                                   /* valid-enter y or n*/
        set KL0QM001.CLJFRCRF cursor, modified, bold;
      end
    end
  end
  ;
     /* EDIT WAREHOUSE CODE*/
  ;
  KL0QS30(); /* edit warehouse codes*/
  CLJREC.XWHCD = KL0QM001.XWHCD;
  ;
  ;
   /* edit all rps collect freight flag*/
  ;
   /* * TCS change begin - 11/05/01*/
   /* IF CLWREC.CLWACTIV EQ 'I'      /* if in inquiry mode get and show*/
   /* OR CLJREC.CLJLBTOT GT 0;     /* if already printed some labels*/
  ;
  if (CLWREC.CLWACTIV == "I") /* if in inquiry mode get and show*/
    ;
   /* * TCS change end - 11/05/01*/
    set KL0QM001.KL0QM-RPS-TITLE initialAttributes; /* no input if in inquiry mode*/
    set KL0QM001.CL-RPS-LABL-FL skip;
  else
    if (KL0QM001.CL-RPS-LABL-FL == " " /* initialize rps labl flag to*/
     || KL0QM001.CL-RPS-LABL-FL == "*")
      KL0QM001.CL-RPS-LABL-FL = "Y"; /* 'y' if no value or ra header*/
      set KL0QM001.CL-RPS-LABL-FL modified; /* and none was entered*/
    end
    ;
   /* EDIT the rps field - if in update mode*/
    ;
    KL0QS-RPS-UPDATE();
    ;
  end
  ;
  set KL0QM001.CL0QMEXT normal;
  if (KL0QM001.CL0QMEXT is modified) /* extend (y or n)*/
    if (KL0QM001.CL0QMEXT == "Y")
      if (CLJREC.CLJORAXD != 0)
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(303); /* claim already extended once*/
        set KL0QM001.CL0QMEXT cursor, modified, bold;
      else
        KL0QM001.CLJORAXD = KL0QM001.CLJRAXDT;
        CLJREC.CLJORAXD = CLJREC.CLJRAXDT;
                                  /* MOVE 'Y' TO CL0QW01.CL0QWUPJ*/
                                  /* update to cljrec flag*/
        XSCLSEX(); /* create expiration date*/
        ;
        if (CLJREC.CL-RPS-LABL-FL == "Y")
          set VCLRPS01 empty;
          VCLRPS01.CLACLMNB = CLAREC.CLACLMNB;
          KL0QS-RPS-PKG-STAT();
        end
        if (CLAREC.YCSCD1 == "ERA")
          CLAREC.YCSCD1 = CLAREC.YCSCD2;
          CLAREC.CLASTTDT = VGVar.currentShortGregorianDate;
          CLAREC.CLASCGBY = COMMAREA.CAUSERID;
          CL0QW01.CL0QWUPA = "Y"; /* update flag for clarec*/
        else /* next sentence*/
        end
      end
    else
      if (KL0QM001.CL0QMEXT == "N"
       || KL0QM001.CL0QMEXT == " ")
        /* next sentence*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(318); /* invalid code*/
        set KL0QM001.CL0QMEXT cursor, modified, bold;
      end
    end
  end
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
end // end KL0Q120

// read user rec for validation
Function KL0Q121()
  ;
  ;
  set MN1REC empty;
  ;
   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/
  ;
  ;
   /* set up file key for application read*/
  ;
  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = KL0QM001.CL0QMUID; /* do not user user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL   field in key*/
  ;
  ;
  ;
  try
    get MN1REC ;
  end
  ;
  ;
  ;
   /* the following statements check for a file error*/
  ;
  if (MN1REC is noRecordFound) /* not found condition*/
    KL0QM001.VAGen_EZEMSG = "USER DOES NOT EXIST - REENTER";
  else
    if (MN1REC is ioError) /* not found condition*/
      KL0QM001.VAGen_EZEMSG = "ERROR FOUND ON MENU FILE I/O";
    else
      /* next sentence*/
    end
  end
  ;
  ;
  ;
end // end KL0Q121

// read user rec for validation
Function KL0Q122()
  ;
  ;
  set MN1REC empty;
  ;
   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/
  ;
  ;
   /* set up file key for application read*/
  ;
  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = COMMAREA.CAUSERID; /* do not use user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL   field in key*/
  ;
  ;
  ;
  try
    get MN1REC ;
  end
  ;
  ;
  ;
   /* the following statements check for a file error*/
  ;
  if (MN1REC is noRecordFound) /* not found condition*/
    KL0QM001.VAGen_EZEMSG = "USER DOES NOT EXIST - REENTER";
  else
    if (MN1REC is ioError) /* not found condition*/
      KL0QM001.VAGen_EZEMSG = "ERROR FOUND ON MENU FILE I/O";
    else
      /* next sentence*/
    end
  end
  ;
  ;
  ;
end // end KL0Q122

// process screen
Function KL0Q130()
   /* **************************************/
   /* process screen*/
   /* **************************************/
   /* Maintenance Log:*/
    /* 1-29-91 bcourt  add comments*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q130";
  ;
  CLJREC.CLACLMNB = CL0QW08.CLACLMNB;
  KL0Q900(); /* get single ra header, cljrec*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    ;
     /* key is already loaded*/
    ;
    set TA2REC empty; /* clear out*/
    ;
    ;
    TA2REC.TA2DTOPT = "GETDATE";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      CL0QW08.ZZZCHGDT = TA2REC.TA2GRGGN;
      CL0QW08.ZZZCHGTM = TA2REC.TA2TIMHM;
    else
      TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0Q130";
      XPCL010(); /* abend*/
    end
    CL0QW08.ZZZCHGCT = CLJREC.ZZZCHGCT;
    CLJREC.CLJGROUP = CL0QW08.CLJGROUP;
  end
  ;
   /* DEFAULT RPS FLAG TO 'N' IF NOT SET TO 'Y' OR 'N'.*/
  ;
  if (KL0QM001.CL-RPS-LABL-FL == "Y"
   || KL0QM001.CL-RPS-LABL-FL == "N")
    CLJREC.CL-RPS-LABL-FL = KL0QM001.CL-RPS-LABL-FL;
  else
    if (CLJREC.CL-RPS-LABL-FL == "Y"
     || CLJREC.CL-RPS-LABL-FL == "N")
       /* NEXT SENTENCE*/
    else
      CLJREC.CL-RPS-LABL-FL = "N";
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0Q917(); /* check if record exists lock and*/
                                   /* update*/
    if (SQLCA.VAGen_SQLCODE == 0) /* record exists*/
      converseLib.validationFailed(298); /* record updated*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no record found,*/
      CLJREC.CLJRSKFL = "N"; /* initialize restocking flag*/
      CLJREC.YRMRESTK = 0; /* initialize restocking amount*/
      KL0Q920(); /* add record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(299); /* record added*/
      end
    end
  end
  ;
  if (CL0QW01.CL0QWUPA == "Y")
    KL0Q131(); /* update claim header*/
    CL0QW01.CL0QWUPA = "N"; /* reset update flag*/
  end
  ;
  CLXREC.CLXBLDSC = "Y";
  return;
  ;
  ;
end // end KL0Q130

// update claim header table
Function KL0Q131()
   /* ************************************************************/
   /* *   update the claim header table                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q131"; /* default the coop analyst code*/
  ;
  ;
  CLAREC.CLACLMNB = CL0QW03.CLACLMNB;
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* find out if record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0QW01.CL0QWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0Q131";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
  CL0QW03.ZZZCHGCT = CLAREC.ZZZCHGCT;
  CLAREC.CLAGROUP = CL0QW03.CLAGROUP;
  ;
   /* ================================*/
  CLAREC.CLASCGBY = COMMAREA.CAUSERID;
  CLAREC.CLASTTDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
   /* ================================*/
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* change record on table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set SQLCA empty;
      call "IO1160" ("A ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    else
      TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0Q131";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
end // end KL0Q131

// update claim header table
Function KL0Q132()
   /* ************************************************************/
   /* *   Update the Comment Indicator on the Claim             **/
   /* *   Header table.                                         **/
   /* *                                                         **/
   /* *   Maintenance History:                                  **/
   /* *                                                         **/
   /* * 11-07-89 CHELLM Created this procedure to prevent the   **/
   /* *          the CLACMIND value from being out of sync with **/
   /* *          the contents of the Comment Table.             **/
   /* * 04-17-92 BCOURT Rename CLACMIND to CL-CLCOM-FL.         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q132"; /* default the coop analyst code*/
  ;
  ;
  CLAREC.CLACLMNB = CL0QW03.CLACLMNB;
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* find out if record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0QW01.CL0QWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0Q132";
      XPCL010();
    end
  end
  ;
  ;
  ;
  if (CLAREC.CLACMIND == CL0QW03.CL-CLCOM-FL) /* if no change*/
    return;
                                   /* no need to update*/
  end
  ;
  CL0QW03.ZZZCHGCT = CLAREC.ZZZCHGCT;
  CLAREC.CLACMIND = CL0QW03.CL-CLCOM-FL;
  ;
   /* ================================*/
  CLAREC.CLASTTDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
   /* ================================*/
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* change record on table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CLAREC.CLAGROUP = CL0QW03.CLAGROUP;
      set SQLCA empty;
      call "IO1160" ("A ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    else
      TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0Q132";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
end // end KL0Q132

// update claim header table
Function KL0Q133()
   /* ************************************************************/
   /* *   Update the Comment Indicator on the Claim             **/
   /* *   Header table.                                         **/
   /* *                                                         **/
   /* *   Maintenance History:                                  **/
   /* *                                                         **/
   /* * 11-07-89 CHELLM Created this procedure to prevent the   **/
   /* *          the CLACMIND value from being out of sync with **/
   /* *          the contents of the Comment Table.             **/
   /* * 04-17-92 BCOURT Rename CLACMIND to CL-CLCOM-FL.         **/
   /* *                                                         **/
   /* * 11-05-01 Cloned from proc KL0Q132 to update claim status**/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q133"; /* default the coop analyst code*/
  ;
  CLAREC.CLACLMNB = CL0QW03.CLACLMNB;
  ;
  CL0QW03.ZZZCHGCT = CLAREC.ZZZCHGCT;
  CLAREC.YCSCD1 = "RAA";
  CLAREC.YCSCD2 = " ";
  CLAREC.YCSACTCD = "J";
  ;
   /* ================================*/
  CLAREC.CLASTTDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
   /* ================================*/
  set SQLCA empty;
  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* change record on table*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
    return;
  else
    TA1REC.TA1TBLKE = "UPDATING CLA RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0Q133";
    XPCL010();
  end
  ;
  ;
  ;
  ;
end // end KL0Q133

// act on ENTER or PF key
Function KL0Q140()
   /* **************************************/
   /* handle enter/PF key*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0Q140";
  ;
  if (converseVar.eventKey is enter) /* transfer to header*/
    if (CLXREC.CLXERRF == "N")
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      COMMAREA.CATOAP = "KL0F";
      XPCL002();
    else
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf2) /* transfer to memo*/
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf5)
                                   /* transfer to header*/
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
  end
  ;
  if (converseVar.eventKey is pf6) /* transfer to inspection*/
    if (CL0QW01.CL0QWCIF == "N")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(317); /* can't xfer. insp. not yet done*/
      return;
    end
    if (KL0QM001.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* if defective*/
       || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y") /* or consumer defective*/
        COMMAREA.CATOAP = "KL0Y"; /* go to regular def insp*/
      else
        COMMAREA.CATOAP = "KL0Z"; /* go to return insp*/
      end
    else
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(87); /* unknown claim type*/
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
    if (CLAREC.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
        COMMAREA.CATOAP = "KL0K"; /* xfer to*/
      else
        COMMAREA.CATOAP = "KL0J"; /* xfer to*/
      end
    else
      converseLib.validationFailed(87);
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf15)
                                   /* transfer to summary*/
    if (KL0QM001.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* if defective*/
       || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y") /* or consumer defective*/
        COMMAREA.CATOAP = "KL0R";
      else
        COMMAREA.CATOAP = "KL0O";
      end
    else
      converseLib.validationFailed(87); /* unknown claim type*/
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is pf17)
                                   /* transfer to address*/
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0F";
  end
  ;
  ;
  if (converseVar.eventKey is pf18) /* transfer to claim comments*/
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G";
  end
  ;
  ;
  if (converseVar.eventKey is pf19) /* transfer to restocking/remerchandising*/
    if (CLAREC.YCTCD == "RTS")
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      COMMAREA.CATOAP = "KL0P";
    else
      converseLib.validationFailed(24); /* pf key not valid for this claim type*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf20) /* transfer to memo comments*/
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    CLWREC.CLWMCMNT = "Y"; /* want memo comments*/
    COMMAREA.CATOAP = "KL0G";
  end
  ;
  XPCL002();
  ;
end // end KL0Q140

// select unique from cljrec
Function KL0Q900()
   /* **************************************/
   /* select unique on cljrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q900"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q900

// select set from clgrec
Function KL0Q911()
   /* **************************************/
   /* select set from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q911"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1260";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q911

// fetch next from clgrec
Function KL0Q912()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q912"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1260";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q912

// close cursor for clgrec
Function KL0Q913()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q913"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260";
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q913

// fetch unique from clgrec
Function KL0Q914()
   /* **************************************/
   /* select unique on clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q914"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q914

// delete from clgrec
Function KL0Q915()
   /* **************************************/
   /* delete unique on clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0G915"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q915

// add unique to clgrec
Function KL0Q916()
   /* **************************************/
   /* add unique on clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q916"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q916

// modify cljrec
Function KL0Q917()
   /* **************************************/
   /* update cljrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q917"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q917

// add to cljrec
Function KL0Q920()
   /* **************************************/
   /* add on cljrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q920"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q920

// update unique from clgrec
Function KL0Q927()
   /* **************************************/
   /* update unique on clgrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1260" ("U ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q927"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q927

// select set from clkrec
Function KL0Q931()
   /* **************************************/
   /* select set from clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q931"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1280";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q931

// fetch next from clkrec
Function KL0Q932()
   /* **************************************/
   /* fetch next from clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q932"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO1280";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q932

// close cursor for clkrec
Function KL0Q933()
   /* **************************************/
   /* close clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q933"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280";
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q933

// select set from cl2rec
Function KL0Q940()
   /* **************************************/
   /* select set from cl2rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2870" ("S1", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q940"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRINSP01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO2870";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q940

// fetch next from cl2rec
Function KL0Q941()
   /* **************************************/
   /* fetch next from cl2rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2870" ("N1", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q941"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRINSP01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO2870";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q941

// close cursor for cl2rec
Function KL0Q942()
   /* **************************************/
   /* close cl2rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2870" ("C1", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q942"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2870";
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRINSP01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q942

// select unique from sy2rec
Function KL0Q970()
   /* **************************************/
   /* select unique on sy2rec - vcolor01 record*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q970"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0120"; /* location*/
        TA1REC.TA1DBASE = "DPROD"; /* database name*/
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view name*/
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q970

// select set from clnrec
Function KL0Q990()
   /* **************************************/
   /* select set from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q990"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q990

// select next from clnrec
Function KL0Q991()
   /* **************************************/
   /* select next from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q991"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q991

// close set from clnrec
Function KL0Q992()
   /* **************************************/
   /* close set from clnrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q992"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1330";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q992

// fetch unique from clkrec
Function KL0Q994()
   /* **************************************/
   /* select unique on clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q994"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q994

// update unique from clkrec
Function KL0Q995()
   /* **************************************/
   /* update unique on clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("U ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0Q995"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0Q995

// select set from clprec
Function KL0Q996()
   /* **************************************/
   /* select set from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q996"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q996

// select next from clprec
Function KL0Q997()
   /* **************************************/
   /* select next from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q997"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q997

// close set from clprec
Function KL0Q998()
   /* **************************************/
   /* close set from clprec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0Q998"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VDEFIT01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1350";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0Q998

Function KL0QS-ADD-CL-COMNT()
   /* ************************************************************/
   /* *     insert claim comment into dclaim.vclcom01, clgrec.  **/
   /* *   This comment tells the inspector at the whse to       **/
   /* *   do a quality inspection before granting credit to     **/
   /* *   the abusive account (as found in KL16 tbl).           **/
   /* *                                                         **/
   /* * 5-30-93  BCOURT  cl#1230 created from KL0g 120.         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0QS-ADD-CL-COMNT"; /* set current process name*/
  ;
  set CLGREC empty;
  set SQLCA empty;
  set CL0QW04 empty;
  ;
  CLXREC.CLXUPDTF = "Y";
  ;
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 1;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "C"; /* claims comment, not ra type*/
   /* find highest current seq number for 'c'laim comments*/
  CL0QW04.CL0QWSQL = "MX";
  call "IO1260" (CL0QW04, SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    if (CL0QW04.CL0QWIN1 <= 0) /* if indicator negative*/
      CL0QW04.CL0QWCN1 = 0; /* replace nulls with value.*/
    end
  else
    TA1REC.TA1LOCAT[2] = "KL0QS-ADD-CL-COMNT"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1260";
    TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
    TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end
  ;
  set TA2REC empty; /* get current date & time*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  end
  ;
  ;
   /* see above where keys & type moved to record.*/
  CL0QW04.CL0QWCN1 = CL0QW04.CL0QWCN1 + 1; /* increment highest comt seq #*/
  CLGREC.CLGCMSEQ = CL0QW04.CL0QWCN1; /* claims comment, not ra type*/
  CLGREC.CLGCOMNT = "===> INSPECT PRODUCT THOROUGHLY   BEFORE GIVING CREDIT <===";
  CLGREC.XXXUSRID = COMMAREA.CAUSERID; /* see above where date & time moved to*/
                                 /* record.*/
  CLGREC.ZZZCHGCT = 0;
  ;
  set SQLCA empty;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "KL0QS-ADD-CL-COMNT"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260";
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  end
  ;
end // end KL0QS-ADD-CL-COMNT

// close vclrps01
Function KL0QS-CLOSE-RPS()
   /* ************************************************************/
   /* close cursor on vclrps01*/
   /* -------------------------------------------------------------*/
   /* maintenance log*/
   /* 04-14-92  twatso   created*/
  ;
   /* ************************************************************/
  CLXREC.CLXCPROC = "CLOSE-RPS";
  ;
   /* close vclrps01*/
  ;
  set SQLCA empty;
  call "IO6220" ("C1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "KL0Q-CLS-RPS"; /* location*/
        TA1REC.TA1MAP = "KL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLRPS01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO6220";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
end // end KL0QS-CLOSE-RPS

// dflt rtn-to whse cd
Function KL0QS-DFLT-RTN-WHS()
   /* ************************************************************/
   /* Default the return-to whse cd to memphis ftwr*/
   /* when DEFective or CDR ftwr.claim (with DEF reason cd)*/
   /* is originally due to return to greenland.*/
   /* Place hard-coded message in the comment area-see kl0q102.*/
   /* Get KUC record for company code and group cmpny ID.*/
   /* If company is an 'abusive' account (frequently forces shoes*/
   /* defective), then tell inspector to do quality inspection*/
   /* before giving credit to the account (use menu option 19).*/
   /*  */
   /* Maintenance History:*/
   /*  */
   /* 5-30-93 BCOURT  Created.*/
   /* 9-08-93 BCOURT  remove cl0qw-ra-comnt-fl - it has served*/
   /* its purpose: notified Grnld customers that*/
   /* their defectives are returned to MemFtwr.*/
   /* 06-24-94 sgorga  Default whse 25 to whse 51 until Sept 1 '94*/
   /* 07-05-94 sgorga  Default whse 02 to whse 04.*/
   /* 08-31-94 sgorga  Remove code to default whse 25 to whse 51.*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0QS-DFLT-RTN-WHS";
  ;
  if (KL0QM001.XWHCD == " ")
    if (CLAREC.XGPCD == "01")
      KL0QM001.XWHCD = "04"; /* dflt isp/pop return to mem ftwr*/
    else
      if (CLAREC.XWHCD != " ")
        KL0QM001.XWHCD = CLAREC.XWHCD; /* dflt rtn whse=shipto whs*/
      end
    end
  end
  ;
  if (KL0QM001.XWHCD == " ")
    if (CLAREC.IV0IVCID != 0)
      KL0QS45(); /* find warehouse default on dinvc*/
    end
  end
  ;
  if (KL0QM001.XWHCD == " ")
    if (CLAREC.KUCCOID != 0)
      KL0QS46(); /* find warehouse dflt on dcust.vstore*/
    end
  end
  ;
   /* GET KL0QS11 move code to this sgrp (5/30/93)*/
  set KUCREC empty;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company was not found*/
      converseLib.validationFailed(81); /* company not on file*/
      set KL0QM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCMPNY01";
      TA1REC.TA1LOCAT[2] = "KL0QS11";
      XPCL010();
    end
  end
  ;
  if (CLAREC.XGPCD == "02"  /* 5/93 ftwr*/
   && CLAREC.YCTCD == "DEF" /* defectives*/
   && CLWREC.CLWACTIV == "A") /* adding claim*/
    if (KUCREC.KUCGRPID in KL16TBL.CU-CO-ID /* if abusive account*/
     || KUCREC.KUCCOID in KL16TBL.CU-CO-ID) /* (either group or regulr acct)*/
   /* insert claims comment*/
      CL0QW01.CL0QW-CL-COMNT-FL = "Y"; /* to do full quality inspection before granting credit on rtn.*/
         /* (see kl0q102 for comment)*/
      if (KL16TBL.XWH-WHSE-CD[sysVar.arrayIndex] != " ")
        KL0QM001.XWHCD = KL16TBL.XWH-WHSE-CD[sysVar.arrayIndex];
                                 /* override dflt*/
      end
    end
  end
  ;
  if (KL0QM001.XWHCD == "02" /* 5/93 dflt greenland 7/94-all clm typs*/
   && CLAREC.XGPCD == "02"   /* ftwr*/
   && CLWREC.CLWACTIV == "A") /* if adding claim*/
    KL0QM001.XWHCD = "04"; /* to memphis ftwr.*/
   /* IF CLAREC.YCTCD NE 'CDR';  /* skip comment for consumer clm*/
   /* MOVE 'Y' TO CL0QW01.CL0QW-RA-COMNT-FL;*/
   /* END;*/
  end
  ;
  CLJREC.XWHCD = KL0QM001.XWHCD;
  ;
  if (KL0QM001.XWHCD == " ") /* if still blank, show error*/
    CLXREC.CLXERRF = "Y";
  end
  ;
end // end KL0QS-DFLT-RTN-WHS

// GET CLAIM ADDRESS ZIP,STATE.
Function KL0QS-GET-CLM-ADR()
   /* ***********************************************************/
   /* *  SELECT CLAIM ADDRESS ZIPCODE AND STATE.               **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-18-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-GET-CLM-ADR "; /* set current process name*/
  ;
  ;
  set SQLCA empty; /* CLEAR SQL RECORD*/
  ;
  ;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0QW01.XXXZIP = CLFREC.XXXZIP; /* SAVE ZIPCODE*/
    CL0QW01.XSTCD = CLFREC.XSTCD; /* SAVE STATE CODE*/
    CL0QW01.XCTCD = CLFREC.XCTCD; /* SAVE country code*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = CL0QW01.CL0QW-DEADLOCK-COUNT + 1;
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "KL0QS-GET-IVC-ADR"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO1050"; /* LOCATION*/
  TA1REC.TA1DBASE = "DINVC "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VIVADR01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
  ;
  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  ;
   /* --- END OF STATEMENT GROUP ---*/
end // end KL0QS-GET-CLM-ADR

// GET STORE ADDRESS ZIP,STATE.
Function KL0QS-GET-CUST-ADR()
   /* ***********************************************************/
   /* *  SELECT CUSTOMER STORE ADDRESS ZIPCODE AND STATE.      **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-18-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-GET-CUST-ADR"; /* set current process name*/
  ;
  ;
  set SQLCA empty; /* CLEAR SQL RECORD*/
  ;
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0QW01.XXXZIP = KULREC.XXXZIP; /* SAVE ZIPCODE*/
    CL0QW01.XSTCD = KULREC.XSTCD; /* SAVE STATE CODE*/
    CL0QW01.XCTCD = KULREC.XCTCD; /* SAVE country code*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = CL0QW01.CL0QW-DEADLOCK-COUNT + 1;
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "KL0QS-GET-IVC-ADR"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO0170"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCUST "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VADDR001"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
  ;
  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  ;
   /* --- END OF STATEMENT GROUP ---*/
end // end KL0QS-GET-CUST-ADR

// SELECT CUSTOMER COMPANY RECORD
Function KL0QS-GET-CUST-REC()
   /* ***********************************************************/
   /* *  SELECT THE DCUST.VCMPNY01 LINE TO GET CUST TYPE (XAUCD)*/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  04-02-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-GET-CUST-REC"; /* set current process name*/
  ;
  ;
  set SQLCA empty; /* CLEAR SQL RECORD*/
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    converseLib.validationFailed(81); /* SHOW ERROR MESSAGE*/
    CLXREC.CLXERRF = "Y";
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = CL0QW01.CL0QW-DEADLOCK-COUNT + 1;
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "KL0QS-GET-CUST-REC"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO0240"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCUST "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
  ;
  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  ;
   /* --- END OF STATEMENT GROUP ---*/
end // end KL0QS-GET-CUST-REC

// GET INVOICE ADDRESS ZIP,STATE.
Function KL0QS-GET-IVC-ADR()
   /* ***********************************************************/
   /* *  SELECT INVOICE ADDRESS ZIPCODE AND STATE.             **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-18-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-GET-IVC-ADR "; /* set current process name*/
  ;
  ;
  set SQLCA empty; /* CLEAR SQL RECORD*/
  ;
  ;
  call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0QW01.XXXZIP = IV5REC.IV5SHPZP; /* SAVE ZIPCODE*/
    CL0QW01.XSTCD = IV5REC.IV5SHPST; /* SAVE STATE CODE*/
    CL0QW01.XCTCD = IV5REC.IV5SHPCY; /* SAVE country code*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = CL0QW01.CL0QW-DEADLOCK-COUNT + 1;
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "KL0QS-GET-IVC-ADR"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO1050"; /* LOCATION*/
  TA1REC.TA1DBASE = "DINVC "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VIVADR01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
  ;
  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  ;
   /* --- END OF STATEMENT GROUP ---*/
end // end KL0QS-GET-IVC-ADR

// GET BEST GUESS RPS ZIP,STATE
Function KL0QS-GET-ZIP-ST()
   /* ***********************************************************/
   /* * GET BEST GUESS RPS ZIPCODE AND STATE CODE.             **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-18-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-GET-ZIP-ST  "; /* set current process name*/
  ;
  CL0QW01.XXXZIP = " "; /* CLEAR ZIPCODE AND STATE CODE SAVE FIELDS*/
  CL0QW01.XSTCD = " ";
  CL0QW01.XCTCD = " "; /* clear country code field*/
  ;
    /* GET CLAIMS SHIP-TO ADDRESS IF IT EXISTS*/
  ;
  set CLFREC empty;
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S";
  CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
  CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
  while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
    KL0QS-GET-CLM-ADR();
  end
  if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0)
    return;
  end
  if (CL0QW01.XXXZIP != " ")
    return;
  end
  if (CL0QW01.XSTCD != " ")
    return;
  end
  if (CL0QW01.XCTCD != " ")
    return;
  end
  ;
    /* GET INVOICE SHIP-TO ADDRESS IF IT EXISTS*/
  ;
  if (CLAREC.CLASHPFF == "I" /* IF CLAIM HAS AN INVOICE, GET IVC ADDR*/
   && CLAREC.IV0IVCID != 0) 
    set IV5REC empty;
    IV5REC.IV0IVCID = CLAREC.IV0IVCID;
    IV5REC.IV0PARTN = CLAREC.IV0PARTN;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
      KL0QS-GET-IVC-ADR();
    end
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0)
      return;
    end
    if (CL0QW01.XXXZIP != " ")
      return;
    end
    if (CL0QW01.XSTCD != " ")
      return;
    end
    if (CL0QW01.XCTCD != " ")
      return;
    end
  end
  ;
    /* GET CUSTOMER STORE SHIP-TO ADDRESS IF IT EXISTS*/
  ;
  set KUMREC empty;
  KUMREC.KUCCOID = CLAREC.KUCCOID;
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;
  KL0QS46();
  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end
  ;
  set KULREC empty;
  KULREC.KULAAID = KUMREC.KUMSHAID;
  KULREC.KUCCOID = CLAREC.KUCCOID;
  CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
  CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
  while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
    KL0QS-GET-CUST-ADR();
  end
  if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0)
    return;
  end
  if (CL0QW01.XXXZIP != " ")
    return;
  end
  if (CL0QW01.XSTCD != " ")
    return;
  end
  if (CL0QW01.XCTCD != " ")
    return;
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0QS-GET-ZIP-ST

// CAN CUSTOMER USE RPS?
Function KL0QS-RPS-EXCLUDE()
   /* ***********************************************************/
   /* * search entire cl9tbl for company and store             **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  06-26-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-RPS-EXCLUDE "; /* set current process name*/
  CL0QW01.CL0QW-FOUND-CO-STOR = "N";
  sysVar.arrayIndex = 1;
  ;
   /* DO COMPANY SELF-EXCLUSION table search*/
  ;
  while (CL0QW01.CL0QW-FOUND-CO-STOR == "N"
   && CL9TBL.KUCCOID[sysVar.arrayIndex] != 999999999)
    if (CLAREC.KUCCOID == CL9TBL.KUCCOID[sysVar.arrayIndex])
      if (CLAREC.KUMSTRID == CL9TBL.KUMSTRID[sysVar.arrayIndex]
       || CL9TBL.KUMSTRID[sysVar.arrayIndex] == -1)
        CL0QW01.CL0QW-FOUND-CO-STOR = "Y";
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end
  ;
  ;
end // end KL0QS-RPS-EXCLUDE

// CAN CUSTOMER USE RPS?
Function KL0QS-RPS-HARD-EDT()
   /* ***********************************************************/
   /* * DETERMINE WHETHER THE CUSTOMER QUALIFIES FOR USING RPS **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  04-02-92  gdecke  created                             **/
   /* *  04-17-92  gdecke  FIX ACCOUNT TYPE EDIT PROBLEM       **/
   /* *  04-28-92  gdecke  ADD EDIT FOR RTN WHSE ZIP IN TABLE  **/
   /* *  10-16-92  SGORGA  CORRECT PROCESS NAME.               **/
   /* *  07-01-93  GDECKE  USE KL17TBL TO ALLOW RPS INTRASTATE.**/
   /* *  08-18-95  kshaw   comment out kl17tbl logic           **/
   /* *  11-18-98  chellm  added xat 05 and 06 for promo accts **/
   /* *                    to the xat edit.                    **/
   /* *  03-17-00  GDECKE  CHANGE RPS WEIGHT WARNING TO HARD   **/
   /* *                    ERROR CONDITION.                    **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-RPS-HARD-EDT"; /* set current process name*/
  ;
  ;
   /* DO OFFSHORD DELIVERY CLAIM TYPE CKECK*/
  ;
  if (CLAREC.YCTCD == "OSD")
    CL0QW01.CL0QW-RPS-MSG-NBR = 727;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    return;
  end
  ;
  ;
     /* RPS ALLOWED ONLY FOR RTS OF DEF CLAIMS*/
  ;
  if (CLAREC.YCTCD == "RTS"
   || CLAREC.YCTCD == "DEF")
       /* NEXT SENTENCE*/
  else
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    CL0QW01.CL0QW-RPS-MSG-NBR = 705;
    return;
  end
  ;
    /* THIS EDIT LIMITS RPS LABELS TO RETURN AUTHORIZATIONS THAT*/
    /* SHOULD WEIGH LESS THAN 300 POUNDS*/
  ;
  if (CLAREC.XGPCD == "02"
   && CLJREC.CLJTATHQ > 150)
    CL0QW01.CL0QW-RPS-MSG-NBR = 708;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    return;
  end
  ;
  if (CLAREC.XGPCD == "03"
   && CLJREC.CLJTATHQ > 600)
    CL0QW01.CL0QW-RPS-MSG-NBR = 708;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    return;
  end
   /* ;*/
   /* TRY TO FIND THE CLAIM RETURN TO WAREHOUSE ZIPCODE IN RPS TABLE*/
  ;
  if (KL0QM001.XWHCD == "07")
     /* NEXT SENTENCE*/
  else
    if (KL0QM001.XWHCD in XWHTBL.XWHCD) /* check for customer in same state*/
      KL0QW-RPS-PARM-REC.XXXZIP = XWHTBL.XXXZIP[sysVar.arrayIndex];
      CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
      CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
      while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
        KL0QS-RPS-PARM-REC();
      end
      ;
      if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, SHOW MSG.*/
        return;
      end
      ;
      if (KL0QW-RPS-PARM-REC.KL0QW-RPS-ZIP-COUNT == 0) /* IF BAD ZIPCODE SET*/
        CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
        CL0QW01.CL0QW-RPS-MSG-NBR = 736;
        return;
      end
    end
  end
  ;
  ;
   /* DO ZIPCODE CHECK (ZIPCODE IN DCORP.VPARM101)*/
  ;
  set KL0QW-RPS-PARM-REC empty;
  ;
  ;
  KL0QS-GET-ZIP-ST(); /* GET BEST GUESS ZIPCODE AND STATE FOR*/
                                  /* CLAIM*/
  ;
  if (CL0QW01.XCTCD != "USA") /* if address not in 'usa' show message*/
    CL0QW01.CL0QW-RPS-MSG-NBR = 725;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    return;
  end
  ;
  if (CL0QW01.XXXZIP == " " /* IF ZIPCODE OR STATE NOT FOUND THEN*/
   || CL0QW01.XSTCD == " ") /* NO VALID ADDRESS WAS FOUND*/
    CL0QW01.CL0QW-RPS-MSG-NBR = 724;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    return;
  end
  ;
    /* TRY TO FIND THE CLAIM ADDRESS ZIPCODE ON RPS ZIPCODE TABLE*/
  ;
  KL0QW-RPS-PARM-REC.XXXZIP = CL0QW01.XXXZIP;
  CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
  CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
  while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
    KL0QS-RPS-PARM-REC();
  end
  ;
  if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, SHOW MSG.*/
    return;
  end
  ;
  if (KL0QW-RPS-PARM-REC.KL0QW-RPS-ZIP-COUNT == 0) /* IF BAD ZIPCODE SET*/
    CL0QW01.CL0QW-RPS-MSG-NBR = 723;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    return;
  end
  ;
   /* below logic removed 8-18-95 kshaw*/
   /* DO STATE (SHIPTO VS. WHSE STATE CODE) TEST*/
  ;
   /* IF KL0QM001.XWHCD IN XWHTBL.XWHCD;/* check for customer in same state*/
   /* IF CL0QW01.XSTCD EQ XWHTBL.XSTCD(EZETST);/* as nike warehouse*/
   /* ;                          /* all nike rtn whse in 'or','tn',or 'nh'*/
   /* MOVE XWHTBL.XXXZIP(EZETST) TO CL0QW01.CL0QW-RPS-WHSE-ZIP;*/
   /* MOVE CL0QW01.XXXZIP TO CL0QW01.CL0QW-RPS-CUST-ZIP;*/
   /* IF CL0QW01.CL0QW-RPS-CUST-ZIP IN KL17TBL.KL17TBL-RPS-CUST-ZIP;*/
   /* IF CL0QW01.CL0QW-RPS-WHSE-ZIP =*/
   /* KL17TBL.KL17TBL-RPS-WHSE-ZIP(EZETST);*/
   /* /* NEXT SENTENCE*/
   /* ELSE;*/
   /* MOVE 722 TO CL0QW01.CL0QW-RPS-MSG-NBR;*/
   /* MOVE 'N' TO CL0QW01.CL0QW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* MOVE 722 TO CL0QW01.CL0QW-RPS-MSG-NBR;*/
   /* MOVE 'N' TO CL0QW01.CL0QW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* ; /* NEXT SENTENCE*/
   /* END;*/
   /* ELSE;*/
   /* MOVE 701 TO CL0QW01.CL0QW-RPS-MSG-NBR;*/
   /* MOVE 'N' TO CL0QW01.CL0QW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* EZERTN;*/
   /* END;*/
  ;
   /* DO CHECK FOR RETAIL CUSTOMER*/
   /* CREDIT STATUS MUST BE BETWEEN 'A' AND 'H'*/
   /* IN-COLLECTION STATUS MUST BE = 'N'*/
   /* CREDIT RESPONSIBILITY MUST BE IN ('A','B','C','D','E','F','M')*/
   /* OR = 'KA'.*/
   /*  */
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  CL0QW01.CL0QW-DEADLOCK-FLAG = "Y";
  CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
  while (CL0QW01.CL0QW-DEADLOCK-FLAG == "Y")
    KL0QS-GET-CUST-REC();
  end
  if (CL0QW01.CL0QW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, EXIT AND SHOW*/
    return; /* MESSAGE*/
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* IF CUSTOMER RECORD NOT FOUND*/
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    CL0QW01.CL0QW-RPS-MSG-NBR = 83;
    return;
  end
  ;
     /* EDIT account type CODE*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XATCD[sysVar.arrayIndex] == "02"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "04"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "01"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "05"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "06")
      if (KUCREC.XAUCD == "12"
       || KUCREC.XAUCD == "13"
       || KUCREC.XAUCD == "14"
       || KUCREC.XAUCD == "19"
       || KUCREC.XAUCD == "43"
       || KUCREC.XAUCD == "62"
       || KUCREC.XAUCD == "81"
       || KUCREC.XAUCD == "82"
       || KUCREC.XAUCD == "85"
       || KUCREC.XAUCD == "86"
       || KUCREC.XAUCD == "93")
        CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
        CL0QW01.CL0QW-RPS-MSG-NBR = 720;
        return;
      else
         /* NEXT SENTENCE*/
      end
    else
      CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
      CL0QW01.CL0QW-RPS-MSG-NBR = 709;
      return;
    end
  else
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    CL0QW01.CL0QW-RPS-MSG-NBR = 709;
    return;
  end
  ;
     /* EDIT credit return freight flag*/
  ;
  if (KL0QM001.CLJFRCRF == "Y")
    KL0QM001.CLJFRCRF = "N";
    set KL0QM001.CLJFRCRF modified;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    CL0QW01.CL0QW-RPS-MSG-NBR = 731;
    return;
  end
  if (KL0QM001.CLJFRCRF == " ")
    KL0QM001.CLJFRCRF = "N";
    set KL0QM001.CLJFRCRF modified;
  end
  ;
     /* EDIT debit return freight flag*/
  ;
  if (KL0QM001.CLJFRDBF == "Y")
    KL0QM001.CLJFRDBF = "N";
    set KL0QM001.CLJFRDBF modified;
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
    CL0QW01.CL0QW-RPS-MSG-NBR = 732;
    return;
  end
  if (KL0QM001.CLJFRDBF == " ")
    KL0QM001.CLJFRDBF = "N";
    set KL0QM001.CLJFRDBF modified;
  end
  ;
  ;
end // end KL0QS-RPS-HARD-EDT

// SELECT VPARM101 FOR RPS ZIPS
Function KL0QS-RPS-PARM-REC()
   /* ***********************************************************/
   /* *  SELECT THE DCORP.VPARM101 LINE FOR RPS ZIPCODES       **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-14-92  gdecke  created                             **/
   /* *  07-02-93  GDECKE  ADD LOGIC FOR RPS PARTIAL ZIP SERVICE*/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-RPS-PARM-REC"; /* set current process name*/
  ;
  ;
  set SQLCA empty; /* CLEAR SQL RECORD*/
  CL0QW01.CL0QW-RPS-PARTIAL-SVC-FL = " ";
  ;
  call "CL1080" ("SC", SQLCA, KL0QW-RPS-PARM-REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    ;
     /* NOW CHECK THE RETURNED PARTIAL SERVICE ZIPCODE FLAG:*/
     /* IF = 'Y' THE RPS ZIPCODE IS IN PARTIAL ZIPCODE SERVICE AREA.*/
    CL0QW01.CL0QW-RPS-PARTIAL-SVC-FL = KL0QW-RPS-PARM-REC.KL0QW-RPS-PART-ZIP-IND;
    ;
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = 0;
    CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0QW01.CL0QW-DEADLOCK-COUNT = CL0QW01.CL0QW-DEADLOCK-COUNT + 1;
    if (CL0QW01.CL0QW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0QW01.CL0QW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "KL0QS-RPS-PARM-REC"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "CL1080"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCORP "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VPARM101"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
  ;
  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  ;
   /* --- END OF STATEMENT GROUP ---*/
end // end KL0QS-RPS-PARM-REC

// reset rps pkg stat
Function KL0QS-RPS-PKG-STAT()
   /* ************************************************************/
   /* reset the rps package status if 'x' and the expiration*/
   /* date is extended.  Make status = 'a'*/
   /* --------------------------------------------------------------*/
   /* maintenance log*/
   /* 04-14-92  twatso   created*/
  ;
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "SEL-RPS";
  ;
   /* select from vclrps01*/
  ;
  set SQLCA empty;
  call "IO6220" ("S1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "KL0Q-RPS-STAT"; /* location*/
        TA1REC.TA1MAP = "KL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLRPS01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO6220";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0QS-SEL-RPS(); /* reads first record*/
  end
  ;
   /* if sqlcode = 0*/
  ;
  while (CLAREC.CLACLMNB == VCLRPS01.CLACLMNB
   && SQLCA.VAGen_SQLCODE == 0)
    KL0QS-UPDT-RPS(); /* update the rps package status*/
    KL0QS-SEL-RPS(); /* read next rps record*/
  end
  ;
  KL0QS-CLOSE-RPS();
  ;
end // end KL0QS-RPS-PKG-STAT

// CAN CUSTOMER USE RPS?
Function KL0QS-RPS-SOFT-EDT()
   /* ***********************************************************/
   /* * DETERMINE WHETHER THE CUSTOMER QUALIFIES FOR USING RPS **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-14-92  gdecke  created                             **/
   /* *  10-16-92  sgorga  corrected process name.             **/
   /* *  07-02-93  GDECKE  ADD LOGIC FOR PARTIAL RPS ZIPCODES  **/
   /* *  03-17-00  GDECKE  CHANGE RPS WEIGHT WARNING TO HARD   **/
   /* *                    ERROR CONDITION.                    **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-RPS-SOFT-EDT"; /* set current process name*/
  CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
  ;
   /* DO COMPANY SELF-EXCLUSION CHECK*/
  ;
  KL0QS-RPS-EXCLUDE(); /* SEARCH FOR OTHER STORES*/
  if (CL0QW01.CL0QW-FOUND-CO-STOR == "Y")
    if (CL0QW01.CL0QW-RPS-WARN-EXCL != "Y")
      CL0QW01.CL0QW-RPS-WARN-FLAG = "Y";
      CL0QW01.CL0QW-RPS-MSG-NBR = 728;
      CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
      return;
    end
  end
  ;
  ;
   /* DO claim reason nike-pay-freight edit*/
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD)
    if (YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] != "Y")
      if (CL0QW01.CL0QW-RPS-WARN-RSN != "Y")
        CL0QW01.CL0QW-RPS-WARN-FLAG = "Y";
        CL0QW01.CL0QW-RPS-MSG-NBR = 702;
        CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
        return;
      end
    end
  end
  ;
  ;
  ;
   /* DO return authorization header nike-pay-freight edit*/
  ;
  if (CLJREC.YCR-NPAY-FRGT-FL == "N")
    if (CL0QW01.CL0QW-RPS-WARN-NPAY != "Y")
      CL0QW01.CL0QW-RPS-WARN-FLAG = "Y";
      CL0QW01.CL0QW-RPS-MSG-NBR = 704;
      CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
      return;
    end
  end
  ;
   /* CHECK FOR PARTIAL ZIPCODE SERVICE AREA - SHOW WARNING MESSAGE*/
  ;
  if (CL0QW01.CL0QW-RPS-PARTIAL-SVC-FL == "Y")
    if (CL0QW01.CL0QW-RPS-WARN-PART-SVC != "Y")
      CL0QW01.CL0QW-RPS-WARN-PART-SVC = "Y";
      CL0QW01.CL0QW-RPS-MSG-NBR = 747;
      CL0QW01.CL0QW-RPS-QUALIFY-FL = "N";
      return;
    end
  end
  ;
     /* PASSED ALL THE EDITS - CUSTOMER CAN USE RPS PREPAID SHIPPING*/
  ;
  CL0QW01.CL0QW-RPS-QUALIFY-FL = "Y";
  ;
  ;
end // end KL0QS-RPS-SOFT-EDT

// HANDLE RPS IN UPDATE MODE
Function KL0QS-RPS-UPDATE()
   /* ***********************************************************/
   /* *  HANDLE PROCESSING OF RPS DATA IN UPDATE MODE.         **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  04-01-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0QS-RPS-UPDATE  "; /* set current process name*/
  ;
  set KL0QM001.KL0QM-RPS-TITLE initialAttributes; /* INITIALIZE RPT*/
  set KL0QM001.CL-RPS-LABL-FL initialAttributes; /* ATTRIBUTES*/
  ;
  if (KL0QM001.CL-RPS-LABL-FL == "N") /* if 'n' entered or default of*/
    return; /* 'n' accepted - no edits needed*/
  end
  ;
  ;
   /* IF KL0QM001.CL-RPS-LABL-FL = ' '; /* if rps is still blank then*/
   /* MOVE 'Y' TO CL0QW01.CL0QW-RPS-QUALIFY-FL;*/
   /* MOVE 0 TO CL0QW01.CL0QW-RPS-MSG-NBR;*/
   /* KL0QS-RPS-HARD-EDT;             /* find a default value*/
   /* IF CL0QW01.CL0QW-RPS-QUALIFY-FL = 'Y';*/
     /* KL0QS-RPS-SOFT-EDT;*/
   /* END;*/
   /* IF CL0QW01.CL0QW-RPS-QUALIFY-FL = 'Y';*/
     /* MOVE 'Y' TO KL0QM001.CL-RPS-LABL-FL;*/
     /* SET KL0QM001.CL-RPS-LABL-FL MODIFIED;*/
   /* ELSE;*/
     /* MOVE 'N' TO KL0QM001.CL-RPS-LABL-FL;*/
     /* SET KL0QM001.CL-RPS-LABL-FL MODIFIED;*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/
  ;
  ;
  if (KL0QM001.CL-RPS-LABL-FL == "Y") /* if rps = 'y' was entered:*/
    CL0QW01.CL0QW-RPS-QUALIFY-FL = "Y";
    CL0QW01.CL0QW-RPS-MSG-NBR = 0;
    KL0QS-RPS-HARD-EDT(); /* find a default value*/
    if (CL0QW01.CL0QW-RPS-QUALIFY-FL == "N")
      if (CL0QW01.CL0QW-RPS-MSG-NBR != 731
       && CL0QW01.CL0QW-RPS-MSG-NBR != 732)
        KL0QM001.CL-RPS-LABL-FL = "N";
      end
      if (CL0QW01.CL0QW-RPS-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(CL0QW01.CL0QW-RPS-MSG-NBR);
      end
      CLXREC.CLXERRF = "Y";
      set KL0QM001.CL-RPS-LABL-FL cursor, modified, bold;
    else
      if (CLJREC.CL-RPS-LABL-FL == "Y") /* if rps flag is already set to 'y'*/
        return; /* do not repeat edits*/
      else
        KL0QS-RPS-SOFT-EDT();
        if (CL0QW01.CL0QW-RPS-QUALIFY-FL == "N")
          KL0QM001.CL-RPS-LABL-FL = "N";
          if (CL0QW01.CL0QW-RPS-MSG-NBR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(CL0QW01.CL0QW-RPS-MSG-NBR);
          end
          CLXREC.CLXERRF = "Y";
          set KL0QM001.CL-RPS-LABL-FL cursor, modified, bold;
          return; /* do not repeat edits*/
        end
      end
    end
    return; /* do not repeat edits*/
  end
  ;
  ;
  ;
    /* if still in this routine - the rps flag is invalid*/
  ;
  converseLib.validationFailed(703);
  CLXREC.CLXERRF = "Y";
  KL0QM001.CL-RPS-LABL-FL = "?";
  set KL0QM001.KL0QM-RPS-TITLE initialAttributes; /* INITIALIZE RPT*/
  set KL0QM001.CL-RPS-LABL-FL cursor, modified, bold;
  ;
      /* END OF STATEMENT GROUP KL0QS-RPS-UPDATE*/
  ;
end // end KL0QS-RPS-UPDATE

// select next vclrps01
Function KL0QS-SEL-RPS()
   /* ************************************************************/
   /* select the next vclrps01*/
   /* when claim expiration date is extended.  Make status = 'a'*/
    /* ---------------------------------------------------------*/
   /* maintenance log*/
   /* 04-14-92  twatso   created*/
  ;
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "SEL-RPS";
  ;
   /* select next vclrps01*/
  ;
  set SQLCA empty;
  call "IO6220" ("N1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "KL0Q-SEL-RPS"; /* location*/
        TA1REC.TA1MAP = "KL0QM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLRPS01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        TA1REC.TA1LOCAT[4] = "IO6220";
        XPCL010(); /* error diagnosis routine*/
        return;
      end
    end
  end
  ;
end // end KL0QS-SEL-RPS

// update vclrps01 loop
Function KL0QS-UPDT-RPS()
   /* ************************************************************/
   /* update the line(s) on the vclrps01 where status is 'x'*/
   /* when claim expiration date is extended.  Make status = 'a'*/
    /* ---------------------------------------------------------*/
   /* maintenance log*/
   /* 04-14-92  twatso   created*/
  ;
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "UPDT-RPS";
  ;
   /* update to  vclrps01*/
  ;
  if (VCLRPS01.CL-RPS-STAT-ID == "X")
    VCLRPS01.CL-RPS-STAT-ID = "A";
    VCLRPS01.ZZZCHGDT = CLXREC.XXXCDTE;
    VCLRPS01.ZZZCHGTM = CLXREC.XXXCHHMM;
    ;
    set SQLCA empty;
    call "IO6220" ("U ", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database is busy*/
        CLXREC.CLXERRF = "Y";
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          /* next sentence*/
        else
          TA1REC.TA1LOCAT[2] = "KL0Q-UPD-RPS"; /* location*/
          TA1REC.TA1MAP = "KL0QM001";
          TA1REC.TA1DBASE = "DCLAIM  ";
          TA1REC.TA1TBLVU = "VCLRPS01";
          CLXREC.XXXWDTE = CLAREC.CLACLMNB;
          TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
          TA1REC.TA1LOCAT[4] = "IO6220";
          XPCL010(); /* error diagnosis routine*/
          return;
        end
      end
    end
  end
  ;
  ;
end // end KL0QS-UPDT-RPS

// format xgpabrv to cl0q001 map
Function KL0QS08()
  ;
  ;
    /* ---------- start stmt grp cl0qs08 -----------------*/
  ;
    /* statement group cl0qs08 - look up general product class*/
       /* description on xgptbl and format to cl0qm001 map*/
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD) /* if in table*/
    KL0QM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex]; /* move abreviation to map*/
  end
  ;
    /* -----------   end of stmt grp cl0qs08  ------------*/
  ;
end // end KL0QS08

// find claim type abbreviation
Function KL0QS09()
  ;
  ;
    /* ---------- start stmt grp cl0qs09 -----------------*/
  ;
   /* statement group cl0qs09 - look up claim type abbreviation*/
       /* on ycttbl and format to cl0qm001 map*/
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD) /* if in table*/
    if (YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0QM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex]; /* abreviation to map*/
    end
  end
  ;
    /* -----------   end of stmt grp cl0qs09  ------------*/
  ;
end // end KL0QS09

// find reason code description
Function KL0QS10()
  ;
  ;
    /* ---------- start stmt grp cl0qs10 -----------------*/
  ;
   /* statement group cl0qs10 - look up reason code description*/
       /* on ycrtbl and format to cl0qm001 map*/
  ;
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD) /* if in table*/
    if (YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0QM001.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex]; /* abreviation to map*/
      CLXREC.CLXYCRX = sysVar.arrayIndex; /* set reason index*/
    end
  end
  ;
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0qs10  ------------*/
  ;
end // end KL0QS10

// default non-credit return flag
Function KL0QS11()
   /* *************************************************************/
   /* This statement group defaults the non-credit return flag.*/
   /* For CDR account types, the flag is defaulted to 'y'.*/
   /* For osd account types, the flag is defaulted to 'n'.*/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                            **/
   /* *----------------------------------------------------------**/
   /* * 04-20-92  GDECKE  INITIALIZE RETURN NO-CREDIT ITEMS      **/
   /* * 05-30-93  BCOURT  Remove getting company rec since already*/
   /* *             read it in new sgrp 'dflt rtn whse'.         **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS11"; /* set current process name*/
  ;
   /* IF KUCREC.XAUCD IN XAUTBL.XAUCD;*/
    /* IF XAUTBL.XAUCD(EZETST) = '12';*/
      /* OR XAUTBL.XAUCD(EZETST) = '13';*/
      /* OR XAUTBL.XAUCD(EZETST) = '14';*/
      /* OR XAUTBL.XAUCD(EZETST) = '19';*/
      /* OR XAUTBL.XAUCD(EZETST) = '43';*/
      /* OR XAUTBL.XAUCD(EZETST) = '62';*/
      /* MOVE 'Y' TO CLJREC.CLJNCRFL;*/
    /* ELSE;*/
      /* MOVE ' ' TO CLJREC.CLJNCRFL;*/
    /* END;*/
   /* END;*/
  ;
  if (KL0QM001.YCTCD == "OSD"
   || CLAREC.YCTCD == "OSD")
    CLJREC.CLJNCRFL = "N";
    KL0QM001.CLJNCRFL = "N";
  else
    CLJREC.CLJNCRFL = "Y";
    KL0QM001.CLJNCRFL = "Y";
  end
  ;
end // end KL0QS11

// find warehouse abbreviation
Function KL0QS12()
  ;
  ;
    /* ---------- start stmt grp cl0qs12 -----------------*/
  ;
   /* statement group cl0qs12 - look up sales office short name*/
       /* on xsotbl and format to cl0qm001 map*/
  ;
  ;
  if (KL0QM001.XWHCD in XWHTBL.XWHCD) /* if in table*/
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
      KL0QM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* short name to map*/
    end
  end
  ;
    /* -----------   end of stmt grp cl0qs12  ------------*/
  ;
end // end KL0QS12

// find warehouse abbreviation
Function KL0QS13()
  ;
  ;
    /* ---------- start stmt grp cl0qs13 -----------------*/
  ;
   /* statement group cl0qs13 - look up sales office short name*/
       /* on xsotbl and format to cl0qm001 map*/
  ;
  ;
  if (CLJREC.XWHCD in XWHTBL.XWHCD) /* if in table*/
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active*/
      KL0QM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* short name to map*/
    end
  end
  ;
    /* -----------   end of stmt grp cl0qs13  ------------*/
  ;
end // end KL0QS13

// determine claim value
Function KL0QS14()
  ;
  ;
    /* ---------- start stmt grp cl0qs14 -----------------*/
  ;
   /* statement group cl0qs14 - determine claim value from cl2rec*/
   /* or from cljrec*/
  ;
  ;
  CL2REC.CLACLMNB = CLAREC.CLACLMNB;
  CL2REC.CLHSEQNB = -1;
  CL2REC.CL2ISNBR = -1;
  ;
  KL0Q940(); /* select set return inspection headers*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0Q941(); /* fetch next return insp.header*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL2REC.CL2ISBDT != 0)
        CL0QW01.CL0QWCIF = "Y";
      else
        CL0QW01.CL0QWCIF = "N";
      end
      KL0QM001.CL0QMCVL = "Clm Value>";
      /* MOVE CLAREC.CLAESTVL TO CL0QM001.CLAESTVL;*/
    else
      CL0QW01.CL0QWCIF = "N";
      KL0QM001.CL0QMCVL = "Auth Value>";
      /* MOVE CLJREC.CLJTATHQ TO CL0QM001.CLAESTVL;*/
    end
    KL0Q942(); /* close return insp.header*/
  end
  ;
    /* -----------   end of stmt grp cl0qs14  ------------*/
  ;
end // end KL0QS14

// check status input flag
Function KL0QS25()
  ;
  ;
    /* ---------- start stmt grp cl0qs25 -----------------*/
  ;
   /* statement group cl0qs25 - check status input flag*/
       /* on ycstbl*/
  ;
  ;
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* if in table*/
    if (YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    end
  end
  ;
    /* -----------   end of stmt grp cl0qs25  ------------*/
  ;
end // end KL0QS25

// edit warehouse codes
Function KL0QS30()
   /* *  KL0QS30  - EDIT WAREHOUSE CODE                                 **/
   /* ********************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G              **/
   /* *-----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                   **/
   /* *-----------------------------------------------------------------**/
   /* * 04-28-92  GDECKE  ADD EDIT FOR RPS ZIP IF SHIP TO WHSE CHANGED. **/
   /* ********************************************************************/
  ;
    /* ---------- start stmt grp cl0qs30 -----------------*/
  ;
  ;
   /* statement group cl0qs30 - validate warehouse against claim*/
       /* g.p.c.'s in the warehouse table*/
  ;
  ;
  set KL0QM001.XWHCD normal;
  if (KL0QM001.XWHCD != " ")
    ;
    if (KL0QM001.XWHCD is modified)
      KL0QS50(); /* one warehouse restriction edit*/
    end
    ;
    if (KL0QM001.XWHCD in XWHTBL.XWHCD)
      KL0QM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
                                        /* search table for image*/
    if (sysVar.arrayIndex == 0) /* if warehouse code not found*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(37); /* error "invalid code"*/
      set KL0QM001.XWHCD cursor, modified, bold;
                                 /* ;          highlight field in err*/
    else /* else(warehouse cd found)*/
      /* ***************  check status code of entry  ****************/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(37); /* error "invalid code*/
        set KL0QM001.XWHCD cursor, modified, bold;
                                     /* ;        highlight field in err*/
        KL0QM001.XWHABRV = " ";
                                 /* ;        blank out decode*/
      else /* else(status is active)*/
        if (CLAREC.XGPCD != " ") /* if gpc code is not blank*/
          /* ***** test that warehouse supplies customers gpc ******/
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD2[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD3[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD4[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD5[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD6[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD7[sysVar.arrayIndex] != CLAREC.XGPCD
           && XWHTBL.XGPCD8[sysVar.arrayIndex] != CLAREC.XGPCD)
            CLXREC.CLXERRF = "Y";
            set KL0QM001.XWHCD cursor, modified, bold;
            converseLib.validationFailed(312);
                                   /* error "invalid warehouse, gpc"*/
            if (KL0QM001.XWHCD is modified)
                                 /* ;          if warehouse was modified*/
              set KL0QM001.XWHCD cursor, modified, bold;
              set KL0QM001.XWHABRV skip, bold;
                                   /* ;        highlight error*/
            else /* else warehouse not modified*/
              /* next sentence*/
            end /* end of "if" statement*/
          else /* else(valid warehouse for gpc)*/
            CLJREC.XWHCD = KL0QM001.XWHCD; /* okay*/
            if (KL0QM001.CL-RPS-LABL-FL == "Y")
              KL0QS-RPS-HARD-EDT(); /* REPEAT RPS FATAL ERROR CHECK*/
            end
          end /* end of "if" statement*/
        else /* else(gpc code not entered)*/
          /* next sentence          ;      don't bother*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(319); /* ERROR "invalid code"*/
    KL0QM001.XWHABRV = " ";
    set KL0QM001.XWHCD cursor, modified, bold;
  end /* end of "if" statement*/
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0qs30  ------------*/
  ;
end // end KL0QS30

// process comment records
Function KL0QS40()
   /* ************************************************************/
   /* *      edit and update each claim comment line            **/
   /* *                                                         **/
   /* *   we get here because a line was modified...there       **/
   /* *   is no editing except to check if a line was blanked   **/
   /* *   out.  if a comment is blanked out, the record is      **/
   /* *   deleted.                                              **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *                                                         **/
   /* *  11-07-89 CHELLM added CL0Q132 to update and commit     **/
   /* *           changes to the VCLHDR01's CLACMIND each time  **/
   /* *           comment changes are commited to VCLCOM01.     **/
   /* *  04-17-92 BCOURT Rename CLACMIND to CL-CLCOM-FL.        **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS40"; /* set current process name*/
  ;
  ;
  CLXREC.CLXUPDTF = "Y";
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 1;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "R";
  CLGREC.CLGCMSEQ = CL0QW01.CLGCMSEQ[CLXLINEX];
  CLGREC.ZZZCHGCT = CL0QW01.CL0QWZZC[CLXLINEX];
  KL0QS65();
  CLGREC.CLGCOMNT = KL0QM001.CLGCOMNT[CLXLINEX];
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CL0QW01.CL0QWDT1 = CLGREC.ZZZCHGDT;
    KL0QM001.CL0QMCDT[CLXLINEX] = CL0QW01.CL0QWDT2;
  else
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  end
  ;
  ;
  if (KL0QM001.CLGCOMNT[CLXLINEX] == " ") /* if comment is blank*/
    KL0QS41(); /* delete this comment*/
  else
    if (CLXREC.CLXLINEX > CLXREC.CLXLSTAX)
      KL0QS42(); /* add this comment*/
    else
      KL0QS43(); /* replace this comment*/
    end
  end
  ;
  ;
   /* set comments indicator on claim header*/
  ;
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";
  ;
  KL0Q911(); /* select set from dclaim.vclcom01*/
  KL0Q912(); /* fetch next from dclaim.vclcom01*/
  if (SQLCA.VAGen_SQLCODE == 0) /* found comments*/
    if (CLAREC.CLACMIND == "N")
      CL0QW03.CL-CLCOM-FL = "Y"; /* held for update in cl0o130*/
      CL0QW01.CL0QWUPA = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* found no comments*/
      if (CLAREC.CLACMIND == "Y")
        CL0QW03.CL-CLCOM-FL = "N"; /* held for update in CL0Q132*/
        CL0QW01.CL0QWUPA = "Y";
      end
    end
  end
  KL0Q913(); /* close cursor for dclaim.vclcom01*/
  ;
  ;
  KL0Q132(); /* update the comment indicator on*/
                                   /* VCLHDR01  (11-07-89 CHELLM)*/
  ;
  ;
    /* -----------   end of stmt grp cl0qs40  ------------*/
end // end KL0QS40

// delete comment record
Function KL0QS41()
   /* ************************************************************/
   /* *      delete comment record                              **/
   /* *             cl0qs41                                     **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS41"; /* set process name*/
  ;
  ;
  if (CLXREC.CLXLINEX > CLXREC.CLXLSTAX)
     /* if processing lines that aren't on the database, skip them*/
    /* next sentence*/
  else
    KL0Q915(); /* delete comment record*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(298);
      CLXREC.CLXBLDSC = "Y";
      KL0QM001.XXXUSRID[CLXLINEX] = " ";
      KL0QM001.CL0QMCDT[CLXLINEX] = 0;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CLXREC.CLXBLDSC = "N";
      end
    end
  end
  ;
  ;
  ;
   /* ************ end stmt group cl0qs41 ************************/
  ;
  ;
  ;
end // end KL0QS41

// add claim comment
Function KL0QS42()
   /* ************************************************************/
   /* *      add claim comment record                           **/
   /* *               cl0qs42                                   **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS42"; /* set process name*/
  ;
   /* give each comment a sequence number by incrementing*/
   /* the current sequence number.*/
  ;
  if (CLXREC.CLXLSTAX == 0)
     /* if there are no comments, the index eq 0 and is not valid*/
    CLGREC.CLGCMSEQ = 1;
     /* clxrec.clxlstax eq 0 + 1*/
    CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
     /* move 1 to cl0gw01.clgcmseq(1)*/
    CL0QW01.CLGCMSEQ[CLXLSTAX] = CLGREC.CLGCMSEQ;
  else
    CLGREC.CLGCMSEQ = CL0QW01.CLGCMSEQ[CLXLSTAX] + 1;
    CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
    CL0QW01.CLGCMSEQ[CLXLSTAX] = CLGREC.CLGCMSEQ;
  end
  ;
  KL0Q914(); /* select unique from clgrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      CLGREC.CLGCMSEQ = CL0QW01.CLGCMSEQ[CLXLSTAX];
      KL0Q916(); /* add the comment record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(299);
        CLXREC.CLXBLDSC = "Y";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      end
      return;
    else
      ;
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* replace the comment record*/
        KL0Q917();
        if (SQLCA.VAGen_SQLCODE == 0)
          CLXREC.CLXBLDSC = "Y";
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          CLXREC.CLXBLDSC = "N";
        end
        return;
      end
    end
  end
  ;
  ;
  ;
   /* ***************** end stmt group cl0qs42 *******************/
  ;
  ;
end // end KL0QS42

// replace claim comment
Function KL0QS43()
   /* ************************************************************/
   /* *      replace claim comment record                       **/
   /* *                   cl0qs43                               **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS43"; /* set process name*/
  ;
    /* see if the desired record exists*/
  ;
  KL0Q927(); /* replace the comment record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(298);
    CLXREC.CLXBLDSC = "Y";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    TA1REC.TA1TBLKE = "COMMENT TO REPLACE NOT FOUND";
    XPCL010();
  end
  ;
  ;
  ;
   /* ******************** end stmt group cl0qs43 *****************/
  ;
  ;
end // end KL0QS43

// find default whse in vivhdr01
Function KL0QS45()
  ;
  ;
    /* ---------- start stmt grp cl0qs45 -----------------*/
  ;
   /* statement group cl0qs45 - find default warehouse in*/
       /* dinvc.vivhdr01 table.*/
  ;
  ;
  IVAREC.IV0IVCID = CLAREC.IV0IVCID;
  IVAREC.IV0PARTN = CLAREC.IV0PARTN;
   /* **************************************/
   /* select unique on ivarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0QS45"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DINVC  ";
        TA1REC.TA1TBLVU = "VIVHDR01";
        CL0QW01.CL0QWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO1040";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  else
    if (IVAREC.XWHCD != " ")
      KL0QM001.XWHCD = IVAREC.XWHCD;
    end
  end
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0qs45  ------------*/
  ;
end // end KL0QS45

// find default whse in vstore01
Function KL0QS46()
    /* ---------- start stmt grp cl0qs46 -----------------*/
   /* *************************************************************/
   /* Maintenance Log:*/
    /* 1-29-91 bcourt hard code whse 51 to be 32, until 5-1-91*/
    /* 4-29-91 bcourt hard code whse 51 to be 32, until 5-6-91*/
    /* 5-06-91 bcourt hard code whse 51 to be 32, until 5-20-91*/
   /* *************************************************************/
  ;
   /* statement group cl0qs46 - find default warehouse in*/
       /* dcust.vstore01 table.*/
  ;
  ;
  KUMREC.KUCCOID = CLAREC.KUCCOID;
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;
   /* **************************************/
   /* select unique on kumrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0QS46"; /* location*/
        TA1REC.TA1MAP = "CL0QM001";
        TA1REC.TA1DBASE = "DCUST  ";
        TA1REC.TA1TBLVU = "VSTORE01";
        CL0QW01.CL0QWNUM = CLAREC.KUCCOID;
        TA1REC.TA1TBLKE = CL0QW01.CL0QWNUM;
        TA1REC.TA1LOCAT[4] = "IO0340";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  else
    if (KUMREC.XGPCD[1] == CLAREC.XGPCD)
      KL0QM001.XWHCD = KUMREC.XWHCD[1];
    else
      if (KUMREC.XGPCD[2] == CLAREC.XGPCD)
        KL0QM001.XWHCD = KUMREC.XWHCD[2];
      else
        if (KUMREC.XGPCD[3] == CLAREC.XGPCD)
          KL0QM001.XWHCD = KUMREC.XWHCD[3];
        else
          KL0QM001.XWHCD = " ";
        end
      end
    end
  end
  ;
  ;
   /* 1-29-91 bcourt - hard code new whse 51 to be old whse 32*/
  ;
  if (KL0QM001.XWHCD == "51")
    set TA2REC empty; /* get current date*/
    TA2REC.TA2DTOPT = "GETDATE";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0QS46";
      XPCL010(); /* abend*/
    end
    if (TA2REC.TA2GRGGN < 19910520) /* change whse before May 20, 1991*/
      KL0QM001.XWHCD = "32";
    end
  end
  ;
    /* -----------   end of stmt grp cl0qs46  ------------*/
  ;
end // end KL0QS46

// one warehouse restriction edit
Function KL0QS50()
   /* *************************************************************/
      /* statement group cl0qs50 - one warehouse restriction*/
       /* edits*/
  ;
   /* 10-04-90 CHELLM added xumcd and xqacd to wild card values*/
                   /* when scanning RAITMs.*/
   /* 06-10-91 twatso db2 changes - sy1rec.xwhcd replaced by*/
                   /* sy2rec.xwhcd ; io0130 added in cl0q970*/
  ;
   /* *************************************************************/
  ;
  ;
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* skip 'DEF','CDR' clm types*/
     || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y")
      /* next sentence*/
    else
      CLKREC.CLACLMNB = CLAREC.CLACLMNB;
      CLKREC.IV0IVCID = -1; /* 072089 add*/
      CLKREC.XGPCD = "**";
      CLKREC.SY1STNBR = "******";
      CLKREC.SY2CLRID = "***";
      CLKREC.XDMCD = "**";
      CLKREC.XUMCD = "**";
      CLKREC.XQACD = "**";
      CLKREC.CLKCRFL = "*"; /* 072089 add*/
      ;
      KL0Q931(); /* get set of applicable products*/
      if (CLXREC.CLXERRF == "Y")
        return;
      end
      ;
      KL0Q932(); /* get first product record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SY2REC.XGPCD = CLKREC.XGPCD;
        SY2REC.SY1STNBR = CLKREC.SY1STNBR;
        SY2REC.SY2CLRID = CLKREC.SY2CLRID;
        SY2REC.XDMCD = CLKREC.XDMCD;
        KL0Q970(); /* edit warehouse on sy2rec*/
        if (SQLCA.VAGen_SQLCODE == 0) /* sy2rec db2 change 06-10-91*/
          CLXREC.CLXLINEX = 1;
          while (CLXREC.CLXLINEX <= 6)
            if (SY2REC.XWHCD[CLXLINEX] != " ")
              if (SY2REC.XWHCD[CLXLINEX] == KL0QM001.XWHCD)
                CL0QW01.CL0QWOWF = "Y"; /* one whse*/
                CL0QW01.CL0QWNMF = "N"; /* no match flg*/
                CLXREC.CLXLINEX = 7; /* force exit*/
              else
                CL0QW01.CL0QWOWF = "Y"; /* one whse*/
                CL0QW01.CL0QWNMF = "Y"; /* no match flg*/
                CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
              end
            else
              CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
            end
          end
          if (CL0QW01.CL0QWOWF == "Y")
            CL0QW01.CL0QWOWF = "N"; /* reset flag*/
            CLKREC.CLKWHSXF = "Y"; /* 1 whse xception*/
            KL0Q994(); /* select clkrec*/
            if (SQLCA.VAGen_SQLCODE == 0)
              /* 072089 select overwrites 'Y' moved above, so re-move:*/
              CLKREC.CLKWHSXF = "Y"; /* 1 whse xception*/
              CLKREC.ZZZCHGDT = CLXREC.XXXCDTE;
              CLKREC.ZZZCHGTM = CLXREC.XXXCHHMM;
              KL0Q995(); /* update clkrec*/
              if (CL0QW01.CL0QWNMF == "Y") /* no match flag*/
                CLXREC.CLXERRF = "Y";
                CL0QW01.CL0QWERF = " ";
                converseLib.validationFailed(320); /* 1 or more prods not stocked at whse*/
                set KL0QM001.XWHCD cursor, bold;
              else
                CL0QW01.CL0QWERF = " ";
              end
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            converseLib.validationFailed(126); /* no products for this claim*/
            return;
          end
        end
        ;
        ;
        while (SQLCA.VAGen_SQLCODE == 0)
          ;
           /* move comments to screen and also save them in*/
           /* working storage*/
          ;
          ;
          KL0Q932(); /* get next product record*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            SY2REC.XGPCD = CLKREC.XGPCD;
            SY2REC.SY1STNBR = CLKREC.SY1STNBR;
            SY2REC.SY2CLRID = CLKREC.SY2CLRID;
            SY2REC.XDMCD = CLKREC.XDMCD;
            KL0Q970(); /* edit warehouse on sy2rec*/
            if (SQLCA.VAGen_SQLCODE == 0)
              CLXREC.CLXLINEX = 1;
              while (CLXREC.CLXLINEX <= 6)
                if (SY2REC.XWHCD[CLXLINEX] != " ")
                  if (SY2REC.XWHCD[CLXLINEX] == KL0QM001.XWHCD)
                    CL0QW01.CL0QWOWF = "Y"; /* one whse flag*/
                    CL0QW01.CL0QWNMF = "N"; /* no match flag*/
                    CLXREC.CLXLINEX = 7;
                  else
                    CL0QW01.CL0QWOWF = "Y"; /* one whse flag*/
                    CL0QW01.CL0QWNMF = "Y"; /* no match flag*/
                    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
                  end
                else
                  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
                end
              end
              if (CL0QW01.CL0QWOWF == "Y")
                CL0QW01.CL0QWOWF = "N";
                CLKREC.CLKWHSXF = "Y"; /* 1 whse restriction*/
                KL0Q994(); /* select clkrec*/
                if (SQLCA.VAGen_SQLCODE == 0)
                  /* 072089 'S1' overwrites 'Y' moved abov,so re-move:*/
                  CLKREC.CLKWHSXF = "Y"; /* 1 whse xception*/
                  CLKREC.ZZZCHGDT = CLXREC.XXXCDTE;
                  CLKREC.ZZZCHGTM = CLXREC.XXXCHHMM;
                  KL0Q995(); /* update clkrec*/
                  if (CL0QW01.CL0QWNMF == "Y")
                    CLXREC.CLXERRF = "Y";
                    CL0QW01.CL0QWERF = " ";
                    converseLib.validationFailed(320);
                                   /* 1 or mor prod not stockd at whs*/
                    set KL0QM001.XWHCD cursor, bold;
                  else
                    CL0QW01.CL0QWERF = " ";
                  end
                end
              end
            else
              if (SQLCA.VAGen_SQLCODE == 100)
                converseLib.validationFailed(126); /* no products for this claim*/
                return;
              end
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              /* next sentence*/
            end
          end
        end
        ;
        KL0Q933(); /* close cursor for clkrec*/
        ;
      end
    end
  end
  ;
  ;
  ;
    /* -----------   end of stmt grp cl0qs50  ------------*/
  ;
end // end KL0QS50

// edit user i.d.
Function KL0QS55()
   /* ***************************************************/
    /* edit user id **/
    /* by using goal security menu user i.d.s cl0qs55 **/
   /* ***************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS55";
  TA1REC.TA1LOCAT[1] = "CL0QS55";
  ;
  ;
  if (KL0QM001.CL0QMUID != " ")
    if (KL0QM001.CL0QMUID != COMMAREA.CAUSERID)
      KL0Q121();
      if (KL0QM001.VAGen_EZEMSG == " ")
        if (MN2REC.MN2STAT == "A")
          CLJREC.XXXUSRID = KL0QM001.CL0QMUID;
          KL0QM001.MN2USRNM = MN2REC.MN2USRNM;
          if (KL0QM001.XSOCD == " ")
            KL0QM001.XSOCD = MN2REC.XSOCD;
          end
        else
          if (CLWREC.CLWACTIV != "I")
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(315);
            set KL0QM001.CL0QMUID cursor, modified, bold;
          end
        end
      else
        if (CLWREC.CLWACTIV != "I")
          converseLib.validationFailed(315);
          set KL0QM001.CL0QMUID cursor, bold;
          CLXREC.CLXERRF = "Y";
        end
      end
    else
      KL0Q121();
      CLJREC.XXXUSRID = KL0QM001.CL0QMUID;
      KL0QM001.MN2USRNM = MN2REC.MN2USRNM;
      if (KL0QM001.XSOCD == " ")
        KL0QM001.XSOCD = MN2REC.XSOCD;
      end
      set KL0QM001.CL0QMUID normal;
      set KL0QM001.MN2USRNM normal;
    end
  end
  ;
  ;
  ;
   /* *************** end stmt group cl0qs55 *******************/
  ;
  ;
  ;
end // end KL0QS55

// edit user i.d.
Function KL0QS65()
   /* ***************************************************/
    /* edit user id                                   **/
    /* by using goal security menu user i.d.scl0qs65  **/
   /* ***************************************************/
  ;
  CLXREC.CLXCPROC = "CL0QS65";
  TA1REC.TA1LOCAT[1] = "CL0QS65";
  ;
  ;
  KL0Q122();
  KL0QM001.XXXUSRID[CLXLINEX] = COMMAREA.CAUSERID;
  if (CLXREC.CLXERRF != "Y")
    CLGREC.XXXUSRID = KL0QM001.XXXUSRID[CLXLINEX];
  end
  ;
  ;
  ;
   /* ************* end stmt group cl0qs65 *****************/
  ;
  ;
end // end KL0QS65

// set modified fields modified
Function KL0QS66()
   /* ************************************************************/
   /* *      if there was an error on the screen, set           **/
   /* *       the modified fields modified so on the            **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *   Maintenance History                                   **/
   /* *---------------------------------------------------------**/
   /* *                                                         **/
   /* *   CHELLM  10-10-89   added this statement group to CL0G **/
   /* *                      see CL756.                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0QS66"; /* set current process name*/
  ;
  if (KL0QM001.CLGCOMNT[CLXLINEX] is modified)
    set KL0QM001.CLGCOMNT[CLXLINEX] modified;
  end
  ;
  CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  ;
end // end KL0QS66

// set modified fields modified
Function KL0QS67()
   /* ************************************************************/
   /* *       set the modified fields modified so on the        **/
   /* *       next pass of the screen the memo comments         **/
   /* *       will still be modified and can be updated.        **/
   /* *                                                         **/
   /* *   Maintence History                                     **/
   /* *---------------------------------------------------------**/
   /* *  CHELLM 10-10-89  added this group to CL0q. see CL756   **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0QS67"; /* set current process name*/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 4)
    KL0QS66(); /* set modified fields modified*/
  end
end // end KL0QS67

//*** RECORD=CL0QW01 ****
// ;***********************************************************
// ;*       working storage for return authorization print    *
// ;*---------------------------------------------------------*
// ;*     M A I N T E N A N C E    H I S T O R Y    L O G     *
// ;*---------------------------------------------------------*
// ;*  CHNG#   DATE   PGMR      DESCRIPTION                   *
// ;*---------------------------------------------------------*
// ;* #1051 02-14-92  GDECKE  ADD FIELDS FOR HANDLING RPS     *
// ;*       04-17-92  bcourt  rename CLACMIND to CL-CLCOM-FL. *
// ;* #1230 04-30-93  BCOURT  Add flag to write claims commnt *
// ;*                   if have abusive customer.             *
// ;*                   Add flag to default RA comments when  *
// ;*                   rtn to Grnld changed to rtn to MemFT. *
// ;* #0    07-01-93  GDECKE  ADD CL0QW-RPS-3CHAR-ZIP.        *
// ;*       11-07-01  SSANK1  ADDED  CL0QW-INQ-UPDATE-FL      *
// ;***********************************************************
// ***********************
Record CL0QW01 type basicRecord
  5 CL0QW1GP CL0QW1GP ; 
    10 CLGCMSEQ CLGCMSEQ [4] ; 
    10 CL0QWZZC CL0QWZZC [4] ; 
    10 CL0QWMFF CL0QWMFF ; 
    10 CL0QWIOF CL0QWIOF ; 
    10 CL0QWLPF CL0QWLPF ; 
    10 CL0QWCMT CL0QWCMT ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CL0QWDT1 CL0QWDT1 ; 
      15 CL0QW0DT CL0QW0DT ; 
      15 CL0QWDT2 CL0QWDT2 ; 
    10 CL0QWOWF CL0QWOWF ; 
    10 CL0QWNMF CL0QWNMF ; 
    10 CL0QWNUM CL0QWNUM ; 
    10 CL0QWUOK CL0QWUOK ; 
    10 XXXUSRID XXXUSRID ; 
    10 CLYATHPW CLYATHPW ; 
    10 CL0QWDON CL0QWDON ; 
    10 CL0QWNUB CL0QWNUB ; 
    10 CL0QWSIA CL0QWSIA ; 
    10 CLYATHID CLYATHID ; 
    10 YCSCD YCSCD ; 
    10 CL0QWCIF CL0QWCIF ; 
    10 CL0QWNBR CL0QWNBR ; 
    10 CL0QWQTY CL0QWQTY ; 
    10 CL0QWERF CL0QWERF ; 
    10 CL0QWUPA CL0QWUPA ; 
    10 CL0QW-DEADLOCK-COUNT CL0QW-DEADLOCK-COUNT ; 
    10 CL0QW-DEADLOCK-FLAG CL0QW-DEADLOCK-FLAG ; 
    10 CL0QW-HAVE-RA-FL CL0QW-HAVE-RA-FL ; 
    10 CL0QW-RPS-LABL-MOD-FL CL0QW-RPS-LABL-MOD-FL ; 
    10 CL0QW-RPS-QUALIFY-FL CL0QW-RPS-QUALIFY-FL ; 
    10 CL0QW-RPS-UPDT-FL CL0QW-RPS-UPDT-FL ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 CL0QW-RPS-WARN-FLAG CL0QW-RPS-WARN-FLAG ; 
    10 CL0QW-RPS-WARN-QTY CL0QW-RPS-WARN-QTY ; 
    10 CL0QW-RPS-WARN-EXCL CL0QW-RPS-WARN-EXCL ; 
    10 CL0QW-RPS-WARN-RSN CL0QW-RPS-WARN-RSN ; 
    10 CL0QW-RPS-WARN-NPAY CL0QW-RPS-WARN-NPAY ; 
    10 CL0QW-RPS-WARN-PART-SVC CL0QW-RPS-WARN-PART-SVC ; 
    10 CL0QW-RPS-PARTIAL-SVC-FL CL0QW-RPS-PARTIAL-SVC-FL ; 
    10 XCCCD XCCCD ; 
      15 CL0QW-XCCCD-1 CL0QW-XCCCD-1 ; 
      15 CL0QW-XCCCD-2 CL0QW-XCCCD-2 ; 
    10 KUCCOLCD KUCCOLCD ; 
    10 XCUCD XCUCD ; 
      15 CL0QW-XCUCD-1 CL0QW-XCUCD-1 ; 
      15 CL0QW-XCUCD-2 CL0QW-XCUCD-2 ; 
      15 CL0QW-XCUCD-3-4 CL0QW-XCUCD-3-4 ; 
    10 CL0QW-RPS-MSG-NBR CL0QW-RPS-MSG-NBR ; 
    10 CL0QW-FOUND-CO-STOR CL0QW-FOUND-CO-STOR ; 
    10 CL0QW-CL-COMNT-FL CL0QW-CL-COMNT-FL ; 
    10 CL0QW-RA-COMNT-FL CL0QW-RA-COMNT-FL ; 
    10 CL0QW-RPS-CUST-ZIP CL0QW-RPS-CUST-ZIP ; 
    10 CL0QW-RPS-WHSE-ZIP CL0QW-RPS-WHSE-ZIP ; 
    10 CL0QW-INQ-UPDATE-FL CL0QW-INQ-UPDATE-FL ; 
end // end CL0QW01

Record CL0QW02 type basicRecord
  5 CL0QW2GP CL0QW2GP ; 
    10 CL0QWZZD CL0QWZZD ; 
    10 CL0QWZZT CL0QWZZT ; 
    10 CL0QWNUM CL0QWNUM ; 
    10 CL0QWAFS CL0QWAFS ; 
    10 CL0QWEFL CL0QWEFL ; 
end // end CL0QW02

//*** RECORD=CL0QW03 ****
// *******************  Claim Header Table  *******************
// 
// ==>  copy of CLAREC  <===
// 
// DB2 Table:           DCLAIM.VCLHDR01
// Copylib Member:      DCL00203
// I/O Mod:             IO1160
// Key to DB2 Table:    CLACLMNB
// 
// Date Created:        03/01/87
// 
// Maintenance Log:
//   Date    Init.   Comment
// --------  -----   ---------------------------------------
// 03-01-87   PAG    Initial record creation
// 08-11-87  gdecke  change CLACOOPF to CLAAUTHF.
// 11-17-89  bcourt  add OP1CMPNB, CLAPRYCT, CLAPRATH, CLAOCQTY
// 04-06-90  bcourt  add XBCCD, XCGCD.
// 10-04-90  CHELLM  Renamed XCGCD to OP1COGID.
// 12-11-90  sgorga  Renamed KUABLID to KUCBLAID (bill grp addr
//  2-15-91  bcourt  Renamed XCUCD3 to XCECD
//                   Renamed CLAXOPNF to CLAXCIND.
//  4-17-92  bcourt  Renamed CLACMIND to CL-CLCOM-FL.
// ***********************
Record CL0QW03 type basicRecord
  5 CLAGROUP CLAGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CUPO OP1CUPO ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 YCTCD YCTCD ; 
    10 CLAPRYCT CLAPRYCT ; 
    10 CLACAIND CLACAIND ; 
    10 YCSCD1 YCSCD1 ; 
      15 YCSCD YCSCD ; 
    10 YCSCD2 YCSCD2 ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLASTTDT CLASTTDT ; 
    10 CLASCGBY CLASCGBY ; 
    10 CLASETDT CLASETDT ; 
    10 YCRCD YCRCD ; 
    10 XIECD XIECD ; 
    10 XSOCD XSOCD ; 
    10 CLADNLFL CLADNLFL ; 
    10 CLADNLDT CLADNLDT ; 
    10 CLACTCNM CLACTCNM ; 
    10 CLACCLDT CLACCLDT ; 
    10 CLAOCAMT CLAOCAMT ; 
    10 CLAOCQTY CLAOCQTY ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLATQTY CLATQTY ; 
    10 CLABLGFF CLABLGFF ; 
    10 KUCBLAID KUCBLAID ; 
    10 CLASHPFF CLASHPFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 CLARTNFF CLARTNFF ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 CLYATHID CLYATHID ; 
    10 CLAPRATH CLAPRATH ; 
    10 CLAAUTHF CLAAUTHF ; 
    10 XCECD XCECD ; 
    10 KUYSVRID KUYSVRID ; 
    10 YCPCD YCPCD ; 
    10 XWHCD XWHCD ; 
    10 XPTCD XPTCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 CLACSQNB CLACSQNB ; 
    10 CLACRTNB CLACRTNB ; 
    10 CLACISNB CLACISNB ; 
    10 CLAWSENF CLAWSENF ; 
    10 CLAORIGI CLAORIGI ; 
    10 CLADBOCL CLADBOCL ; 
    10 YITCD YITCD ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
    10 CLAXCIND CLAXCIND ; 
    10 CLAMEIND CLAMEIND ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CLATFIND CLATFIND ; 
    10 CLACNIND CLACNIND ; 
    10 CLADJIND CLADJIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0QW03

//*** RECORD=CL0QW04 ****
// pass maximum sequence number and status code from io1260
// dclaim.vclcom01, clgrec.
// 
// 05-30-93 BCOURT re-write prologue from vdefit01.
// ***********************
Record CL0QW04 type basicRecord
  5 CL0QW4GR CL0QW4GR ; 
    10 CL0QWSQL CL0QWSQL ; 
    10 CL0QWCN1 CL0QWCN1 ; 
    10 CL0QWIN1 CL0QWIN1 ; 
end // end CL0QW04

//*** RECORD=CL0QW05 ****
// pass calculated sums from database.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0QW05 type basicRecord
  5 CL0QW5GR CL0QW5GR ; 
    10 CL0QWSQL CL0QWSQL ; 
    10 CL0QWCN1 CL0QWCN1 ; 
    10 CL0QWCN2 CL0QWCN2 ; 
    10 CL0QWSM1 CL0QWSM1 ; 
    10 CL0QWIN1 CL0QWIN1 ; 
end // end CL0QW05

//*** RECORD=CL0QW07 ****
// pass calculated sums from database.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
// ***********************
Record CL0QW07 type basicRecord
  5 CL0QW7GR CL0QW7GR ; 
    10 CL0QWSQL CL0QWSQL ; 
    10 CL0QWCN1 CL0QWCN1 ; 
    10 CL0QWCN2 CL0QWCN2 ; 
    10 CL0QWCN3 CL0QWCN3 ; 
    10 CL0QWCN4 CL0QWCN4 ; 
    10 CL0QWCN5 CL0QWCN5 ; 
    10 CL0QWSM1 CL0QWSM1 ; 
    10 CL0QWIN1 CL0QWIN1 ; 
end // end CL0QW07

//*** RECORD=CL0QW08 ****
// ************  Claim Return Authorization Table  ************
// 
// DB2 Table:           DCLAIM.VRAHDR01
// 
// Copylib Member:      DCL00213
// 
// I/O Mod:             IO1270
// 
// Key to DB2 Table:    CLACLMNB
// Maintenance Log:
//   Date    Init.  Comment
// --------  -----  ---------------------------------------
// 03-01-87   PAG   Initial record creation
// 06-03-88 bcourt  add fields:
//                      CL_NBR_RAUTH_RQT    CL_NBR_LABL_RQT
//                      CL_TOT_LABL_PRT     CL_FRGT_DBT_FL
//                      CL_FRGT_CR_FL       XXX_USER_ID
//                      XSO_SLS_OFC_ID      XDA_DEF_ALW_CD
//                  drop fields:
//                      CL_FRGT_DB_CR_FL    CL_DEF_ALW_FL
//                  chnge name:
//                      CL_AUTH_RTN_QTY  to CL_TOT_RAUTH_QTY
// 10-11-91 bcourt  add fields:
//                      CL_RPS_LABL_FL      YCR_NPAY_FRGT_FL
// 08-13-93 jcarey  database change. added cl-upc-labl-fl.
// ***********************
Record CL0QW08 type basicRecord
  5 CLJGROUP CLJGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 XXXUSRID XXXUSRID ; 
    10 XSOCD XSOCD ; 
    10 CLJPRTLB CLJPRTLB ; 
    10 CLJLBRQT CLJLBRQT ; 
    10 CLJNBLB CLJNBLB ; 
    10 CLJLBTOT CLJLBTOT ; 
    10 CL-RPS-LABL-FL CL-RPS-LABL-FL ; 
    10 CLJPRTRA CLJPRTRA ; 
    10 CLJRARQT CLJRARQT ; 
    10 CLJRAIDT CLJRAIDT ; 
    10 CLJRAXDT CLJRAXDT ; 
    10 CLJORAXD CLJORAXD ; 
    10 CLJFRCRF CLJFRCRF ; 
    10 CLJFRDBF CLJFRDBF ; 
    10 YCR-NPAY-FRGT-FL YCR-NPAY-FRGT-FL ; 
    10 CLJNCRFL CLJNCRFL ; 
    10 XWHCD XWHCD ; 
    10 CLJTATHQ CLJTATHQ ; 
    10 CLJRDIND CLJRDIND ; 
    10 CLJRSKFL CLJRSKFL ; 
    10 YRMRESTK YRMRESTK ; 
    10 CLJRBGFL CLJRBGFL ; 
    10 CLJRBXFL CLJRBXFL ; 
    10 CLJRTGFL CLJRTGFL ; 
    10 CLJUNLFL CLJUNLFL ; 
    10 CL-UPC-LABL-FL CL-UPC-LABL-FL ; 
    10 XDACD XDACD ; 
    10 CLJRAIND CLJRAIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0QW08

//*** RECORD=KL0QW-RPS-PARM-REC ****
// ;***********************************************************
// ;*  KL0QW-RPS-PARM-REC                                     *
// ;*      THIS IS THE PARM RECORD FOR CALLING IO-MOD CL1080. *
// ;*      SUPPLY A ZIPCODE and receive a count of vparm101   *
// ;*      lines having the first 3 digits. the zipcode is    *
// ;*      served by rps if the count is 1 (one).             *
// ;***********************************************************
// ;*    M A I N T E N A N C E     H I S T O R Y     L O G    *
// ;*---------------------------------------------------------*
// ;* CHANGE#   DATE    PGMR    DESCRIPTION                   *
// ;*---------------------------------------------------------*
// ;* #1051   02/14/92  GDECKE  CREATE PARM RECORD.           *
// ;*         01/25/93  JRAMOS  Added KL0Q-RPS-PART-ZIP-IND   *
// ;*                           Field. If 'Y', then the zipcd *
// ;*                           is a partial service zipcode. *
// ;***********************************************************
// **********************************
Record KL0QW-RPS-PARM-REC type basicRecord
  5 KL0QW-RPS-GROUP KL0QW-RPS-GROUP ; 
    10 XXXZIP XXXZIP ; 
    10 KL0QW-RPS-ZIP-COUNT KL0QW-RPS-ZIP-COUNT ; 
    10 KL0QW-RPS-PART-ZIP-IND KL0QW-RPS-PART-ZIP-IND ; 
end // end KL0QW-RPS-PARM-REC

// add clm comnt for abusive acct
DataItem CL0QW-CL-COMNT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB2 DEADLOCK COUNT (-811)
DataItem CL0QW-DEADLOCK-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 DEADLOCK FLAG (-811)
DataItem CL0QW-DEADLOCK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND COMPANY AND STORE-CL9TBL
DataItem CL0QW-FOUND-CO-STOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VRAHDR01 LINE FOUND FLAG
DataItem CL0QW-HAVE-RA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update RA flds in Inquiry mode
DataItem CL0QW-INQ-UPDATE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add RA cmt: Grn chngd to MemFt
DataItem CL0QW-RA-COMNT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 3 CHARS FROM CUST ZIP
DataItem CL0QW-RPS-CUST-ZIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RPS LABEL MODIFIED FLAG
DataItem CL0QW-RPS-LABL-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE RPS EXCEPTION MSG NUMBER
DataItem CL0QW-RPS-MSG-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SAVES PARTIAL SVC FROM PARM
DataItem CL0QW-RPS-PARTIAL-SVC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CLAIM/CUST CAN USE RPS
DataItem CL0QW-RPS-QUALIFY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UPDATE RPS FLAG ON RA HEADER
DataItem CL0QW-RPS-UPDT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag-RPS CUST EXCLUDE
DataItem CL0QW-RPS-WARN-EXCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDICATES RPS SOFT ERROR FOUND
DataItem CL0QW-RPS-WARN-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS RAHDR NPAY-FR
DataItem CL0QW-RPS-WARN-NPAY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS PARTIAL SERVC
DataItem CL0QW-RPS-WARN-PART-SVC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag-RPS/GPC quantity
DataItem CL0QW-RPS-WARN-QTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS CLM RSN TBL
DataItem CL0QW-RPS-WARN-RSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 3 CHARS FROM WHSE ZIP
DataItem CL0QW-RPS-WHSE-ZIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUSTOMER CREDIT STATUS-1ST CHA
DataItem CL0QW-XCCCD-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUSTOMER CREDIT STATUS-2ND CHA
DataItem CL0QW-XCCCD-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY #1
DataItem CL0QW-XCUCD-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY #2
DataItem CL0QW-XCUCD-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY-3-4
DataItem CL0QW-XCUCD-3-4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold 0
DataItem CL0QW0DT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws record 1 group level
DataItem CL0QW1GP char(146)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws record 1 group level
DataItem CL0QW2GP char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0QW4GR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0QW5GR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0QW7GR char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all fields security flag
DataItem CL0QWAFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim inspection flag
DataItem CL0QWCIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment exists flag
DataItem CL0QWCMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem CL0QWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0QWCN2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0QWCN3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0QWCN4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0QWCN5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// done-flag
DataItem CL0QWDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date 0ccyymmdd
DataItem CL0QWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd
DataItem CL0QWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date conversion field
DataItem CL0QWEFL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// one whse error flag
DataItem CL0QWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator for db item
DataItem CL0QWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry-only flag
DataItem CL0QWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// look at all mess. in seq order
DataItem CL0QWLPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// memo-found-flag
DataItem CL0QWMFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working number
DataItem CL0QWNBR num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no match flag
DataItem CL0QWNMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working number
DataItem CL0QWNUB num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ta1rec info
DataItem CL0QWNUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// one warehouse flag
DataItem CL0QWOWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total qty plus non cr tot
DataItem CL0QWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stay-in-this-application flag
DataItem CL0QWSIA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum for database item
DataItem CL0QWSM1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql selection
DataItem CL0QWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update-went-ok-flag
DataItem CL0QWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag for clarec
DataItem CL0QWUPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zzzchange count
DataItem CL0QWZZC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date for zzchgdt
DataItem CL0QWZZD char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time for zzchgtm
DataItem CL0QWZZT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for RPS PARM REC
DataItem KL0QW-RPS-GROUP char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'PARTIAL SERVICE' Indicator.
DataItem KL0QW-RPS-PART-ZIP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COUNT OF ZIP/CARRIER LINES FND
DataItem KL0QW-RPS-ZIP-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

