package kl0f;

import corpcom1.*;
import corpcom2.XQWREC;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXADDR;
import corpcom7.XXXADDR1;
import corpcom7.XXXADDR2;
import corpcom7.XXXADDR3;
import corpx1.XAUTBL;
import corpx1.XCCCD;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XCUCD;
import corpx1.XSTTBL;
import corpx1.XWHTBL;
import corpx2.XSTCD;
import corpx2.XXXCITY;
import corpx2.XXXZIP;
import corpy2.YATTBL;
import corpy2.YCRTBL;
import corpy2.YCTTBL;
import corpy2.YUATBL;
import iv.common.IV5REC;
import kl.common.KL14TBL;
import kl.common.KL17TBL;
import ku.common.KUCCOLCD;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSHAID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCLRPS01;
import vv.common.VDMACT01;
//*** PROGRAM=KL0F ****
// ************************************************************
// *  KL0F - Claims Address Entry/Inquiry program
// *
// * Maintenance History:
// * Date     Who    Changes
// * -------- ------ ------------------------------------------
// * 02-24-88 MHALST Changed program to use IOMods
// * 01-31-89 JWOOD  ADDED NONCSP OPTION TO CALLS
// * 01-31-89 JWOOD  ADDED XSSEGTR LOGIC
// * 03-23-89 bcourt remove IV0REC from table list
// * 05-16-89 gdecke db2 structure changes: clarec, clirec,
// *                 kucrec, sycrec, sy2rec, xcttbl, xwhtbl.
// * 01-19-90 gdecke db2 structure changes for january.
// * 10-12-90 bcourt db2 structure changes, drop XCUTBL.
// * 01-04-91 sgorga Renamed kuablid to kucblaid in CL0FM001.
// *                 Removed kuarec from table definition list.
// *                 Made changes to cl0fs94,103,109,112,131,
// *                 m001.
// * 02-15-91 CHELLM Renamed KUAADRID to KUCBLAID and KUABLID
// *                 to KUCBLAID.
// * 04-24-91 gdecke correct logic for getting bill to address
// *                 when comp-co company is non-zero.
// * 08-08-91 wjohns renamed application and commarea
// *                   referrences to renamed claims appls.
// * 09-03-91 chellm Added Consumer Phone Number to the screen
// *                 along with edits, etc.
// * 09-16-91 twatso renamed sgrps and procs from cl to kl
// * 10-31-91 twatso added code for osd so treated like def
// *                 to be installed in dec 91
// * 02-07-92 GDECKE ADDED LOGIC TO HANDLE RPS PREPAID FREIGHT
// * 06-26-92 GDECKE MODIFY TABLE SEARCH LOGIC FOR CL9TBL
// * 10-16-92 sgorga db2 - corrected process name.
// * 12-02-92 lgross Modification for direct market application
// *          broke consumer name into first, middle init and
// *          last.  Will get ship to name from consumer name
// *          if modified and 'cdr'. Each time a record
// *          is updating address information or adding to it,
// *          a tag record is written to dclaim.vdmact001.
// *          changed:  kl0f-get-acct-cls, kl0fm001, kl0fs-
// *          form-nm, kl0fs-get-phn-nbr, fl0fs-prs-update,
// *          kl0fs-ship-nm, kl0fs-updt-phn-nbr, kl0fs-writ-dm,
// *          kl0fs-writ-dm-rec, kl0fs60, kl0fs74, kl0fs91,
// *          kl0fs92, kl0fs93, kl0fs95, kl0fw02, kl0f100,
// *          kl0f101, kl0f106, kl0f109, kl0f112, kl0f120,
// *          cl0fw01
// * 01-26-93 bcourt change procs to sgrps.
// * 02-08-93 bcourt Write tag record only if company is in
// *              KL14TBL of consumer accounts & is active.
// * 02-25-93 jcampb add 3270-2 device type to map m001
// *                 because of dzg42p error in production.
// * 07-01-93 GDECKE  ADD RPS INTRASTATE RETURN IF CUST ZIPCODE
// *                  IS IN KL17TBL.
// * 07-02-93 JRAMOS/GDECKE  Added logic to process RPS
// *                'partial service' zipcodes. All revisions
// *                have 'jcr' in comments.
// * 07-20-93 jdecker unknown
// * 11-12-93 GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn IN
// *                  KL0F103, AND KL0FS76.
// * 03-11-94 BCOURT  CHANGE CLFREC.XXXADDRn TO XXX-ADDRn
// *            in KL0F103, 104, 105, and S72.
// *   NOTE - Keep map names as xxxaddrn since are 30 chars.
// *   FYI names xxx-addrn (with the '-') are long 38 chars.
// *   Orders, Invoices, Claims all use only 30 chars.
// * 03-14-94 BCourt  Change CL0FW01 fields that mimic address
// *            fields in CLFREC = CL0FWBTA, RTA & STA.
// * 08-18-95 kshaw  remove kl17tbl logic in kl0fs-rps-hard-edt
// * 11-18-98 chellm added xat 05,06 to the RPS hard edit to
// *                allow RPS collect shipments.
// * 08-08-00 CTRAN CHANGE RPS TO FEDEX ON KL0FM001
// ************************************************************
// *********************
Program KL0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0FW01 CL0FW01; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLDREC CLDREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV5REC IV5REC; // record
  KL0FW-RPS-PARM-REC KL0FW-RPS-PARM-REC; // record
  KL0FW02 KL0FW02; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCLRPS01 VCLRPS01; // record
  VDMACT01 VDMACT01; // record
  XQWREC XQWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KL14TBL {deleteAfterUse = yes}; // table
  use KL17TBL {deleteAfterUse = yes}; // table
  use CL9TBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0FM.KL0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0F000: KL0F000();
    exit program;
  end // end main
end // end KL0F

// application main logic
Function KL0F000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xpcl001 checks to ensure that the claim header has    **/
   /* *         been flagged as "in use" if this application    **/
   /* *         is does updates.                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  COMMAREA.CACURRAP = "KL0F";


  KL0F001(); /* initilize the application*/


  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0F050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/




end // end KL0F000

// initialize application
Function KL0F001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* ************************************************************/
   /* MAINTNENANCE HISTORY                               **/
   /* 01-13-92  sgorga  Set ta1rec and ta2rec empty.  Changed   **/
   /* kl0fm001 from being set empty to being  **/
   /* set clear.                              **/
   /* 12-2-92  lgross   initialize kl0fw-dm-upd-fl to 'n'       **/
   /* *************************************************************/



  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/

   /* TEMP001                         ; used for testing only*/
  XSENTRY(); /* check entered thru csp main menu*/
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  XPCL011(); /* claims entry module*/

  set TA1REC empty;
  set TA2REC empty;
  set KL0FM001 initial; /* clear screen*/
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/


  CLXREC.CLXBLDSC = "Y"; /* set build-screen flag to 'yes'*/
  CLXREC.CLXERRF = "N"; /* set error flag to no to save field*/
                                   /* in cl0fs30 first time thru*/
  CL0FW01.CL0FW12K = "N"; /* set pfkey 12 to 'no'*/
  CL0FW01.KL0FW-DM-UPD-FL = "N"; /* dclaim.vdmact01 flag*/

  CLXREC.CLXCSCRN = "KL0FM001"; /* set first screen name*/



  CLXREC.CLXSNAME[1] = "KL0FM001"; /* screens used in this*/


end // end KL0F001

// main cl0f branch control
Function KL0F050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F050"; /* set current process name*/


  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end



  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/


  while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
    KL0F100(); /* process screen cl0fm001*/
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf) = 'n'*/
           /* we go back to the top of cl0f050...*/
       /* if the end-of-application flag (clxeoaf) = 'y'*/
           /* we return to cl0f000.*/



end // end KL0F050

// converse screen cl0fm001
Function KL0F100()
   /* ************************************************************/
   /* *    process screen cl0fm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0e050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 04-06-92  GDECKE  FIX PROBLEM WITH SAVING DATA WHEN     **/
   /* *                   THERE ARE RPS ERRORS                  **/
   /* 10-16-92  sgorga  deleted comment with obsolete field.    **/
   /* /  12-2-92   LGROSS  broke kl0fm-rps-title into 2 parts- 1 &2**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F100"; /* set current process name*/
  KL0FM001.XXXPRCNM = "KL0F100"; /* set screen  process name*/
  KL0FM001.XXXMAPNM = "KL0FM001"; /* set current map name*/
  KL0FM001.XXXRVNBR = "00"; /* set revision number*/
  KL0FM001.XXXCURDT = VGVar.currentShortGregorianDate;


  if (converseVar.validationMsgNum == 0)
    KL0F101(); /* build the screen*/
  end


   /* saves screen values to use later for comparisions instead*/
   /* of checking for modified fields*/
  if (CLXREC.CLXERRF == "N")
    KL0FS30();
  end

  if (converseVar.eventKey is pf12 /* if default of 'i' of 'c' was entered*/
   && CLXREC.CLXERRF == "N")      
    KL0FS60(); /* screen was rebuilt and modified tag was lost*/
  end

    /* PERFROM THE RPS SETUP/EDIT ROUTINES*/

  if (CLAREC.CLAWSENF == "Y")
    set KL0FM001.KL0FM-RPS-TITLE1 skip, invisible;
    set KL0FM001.KL0FM-RPS-TITLE2 skip, invisible;
    set KL0FM001.CL-RPS-LABL-FL skip, invisible;
  else
    if (CLAREC.YCTCD == "RTS"
     || CLAREC.YCTCD == "DEF")
      if (CLJREC.CLJLBTOT > 0) /* ALREADY PRINTED RPS LABEL DONT ALLOW*/
        set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* CHANGES*/
        set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* CHANGES*/
        set KL0FM001.CL-RPS-LABL-FL skip;
      else
        if (CLWREC.CLWACTIV == "I")
          set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* DONT ALLOW CHANGES*/
          set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* DONT ALLOW CHANGES*/
          set KL0FM001.CL-RPS-LABL-FL skip;
        else
          if (CLXREC.CLXERRF == "N")
            KL0FS-RPS-UPDATE();
          end
        end
      end
    else
      set KL0FM001.KL0FM-RPS-TITLE1 skip, invisible;
      set KL0FM001.KL0FM-RPS-TITLE2 skip, invisible;
      set KL0FM001.CL-RPS-LABL-FL skip, invisible;
    end
  end



   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  converse KL0FM001 ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CL0FW01.CL0FWTCF = "N"; /* init 'no text was changed on screen'*/
  CL0FW01.CL0FWACF = "N"; /* init 'no text was changed on screen'*/


  KL0F110(); /* handle any special entries*/

  KL0FS60(); /* set modified fields modified*/



  KL0F112(); /* set the do-edits-flag*/


  if (CLXREC.CLXEDITF == "Y") /* if we want to do edits*/
    KL0F120(); /* go process screen entries*/
  end


  KL0F113(); /* set the do-updates flag*/


  if (converseVar.eventKey is pf12
   && CLXREC.CLXERRF == "N")
    KL0F131(); /* need to update clarec*/
  else
    if (CLXREC.CLXUPDTF == "Y") /* if ok to do updates*/
      KL0F130(); /* update tables*/
    end
  end


  CL0FW01.CL0FWFLO = "N"; /* initialize flow-flag*/

  if (CL0FW01.CL0FWTCF == "Y") /* if text on screen changed*/
    CL0FW01.CL0FWFLO = "N"; /* no, we don't want to flow*/
  else
    if (CLWREC.CLWACTIV == "I" /* if in inquiry mode*/
     || CL0FW01.CL0FWSMF == "N") /* if screen was not modified*/
      CL0FW01.CL0FWFLO = "Y"; /* yes, we want to flow*/
    else
      if (CLXREC.CLXUPDTF == "Y" /* if we were supposed to update*/
       && CL0FW01.CL0FWUOK == "Y") /* and the update went ok*/
        CL0FW01.CL0FWFLO = "Y"; /* yes, we want to flow*/
      end
    end
  end


  if (CL0FW01.CL0FWFLO == "Y")
    KL0F140(); /* set up flow to next application*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0f100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0f050.*/



end // end KL0F100

// build screen cl0fm001
Function KL0F101()
   /* ************************************************************/
   /* *        build screen cl0fm001                            **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G   **/
   /* *---------------------------------------------------------**/
   /* *    DATE    PGMR    DESCRIPTION                          **/
   /* *---------------------------------------------------------**/
   /* *  09/03/91  chellm  added CL0FS-GET-PHN-NBR.             **/
   /* *  04-03-92  GDECKE  ADD SELECT FOR RA HEADER-GET RPS FLAG**/
   /* *  02-18-93  lgross  changed consumer name to include     **/
   /* *                    first, middle and last               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F101"; /* set current process name*/

  if (converseVar.eventKey is pf12 /* the values are not committed*/
   && KL0FM001.CLASHPFF == "E")    /* section. the values were moved*/
                              /* ; to the database until the update*/
    return; /* to the screen in cl0fs76 or entered*/
  end /* don't want to destroy what is on screen*/


   /* SET CL0FM001 CLEAR;*/


  KL0FM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0FM001.KUCCOID = CLAREC.KUCCOID;
  KL0FM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0FM001.XNXCD = CLAREC.XNXCD;
  KL0FM001.KUCCONM = CLWREC.KUCCONM;


  KL0F102(); /* read invoice address record*/

  if (converseVar.validationMsgNum != 0) /* if invoice wasn't found*/
    return; /* don't do any more processing*/
  end

    /* GET THE RA HEADER LINE FOR THE CLAIM - TO SHOW RPS LABEL FLAG*/

  if (CLAREC.YCTCD == "RTS"
   || CLAREC.YCTCD == "DEF")
    set CLJREC empty;
    CLJREC.CLACLMNB = CLAREC.CLACLMNB;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "Y";
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    while (CL0FW01.CL0FW-DEADLOCK-FLAG == "Y")
      KL0FS-GET-RA-HDR();
    end
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 0) /* IF DEADLOCK, SHOW MESSAGE*/
      return;
    end
    if (CL0FW01.CL0FW-HAVE-RA-FL == "N")
      if (CLWREC.CLWACTIV == "I")
        KL0FM001.CL-RPS-LABL-FL = " ";
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(733);
        return;
      end
    else
      if (KL0FM001.CL-RPS-LABL-FL == " ")
        KL0FM001.CL-RPS-LABL-FL = CLJREC.CL-RPS-LABL-FL;
      end
    end
  end


  KL0F103(); /* format bill-to-address*/
  KL0F104(); /* format shipto address*/
  KL0F105(); /* format return-to-address*/

  CL0FW01.CL0FWCSN = "N"; /* ; consumer name is not needed*/

  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    if (YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y"
     || CLAREC.YCTCD == "RTS"
     || CLAREC.YCTCD == "DEF")
      KL0F106(); /* get and format consumer name*/
      KL0FS-GET-PHN-NBR(); /* get phone number*/
    else
      set KL0FM001.KL0FM-CNSMR-NM-LABL skip, invisible;
      set KL0FM001.XXX-LAST-NM skip, invisible; /* don't show consumer info*/
      set KL0FM001.XXX-FRST-NM skip, invisible;
      set KL0FM001.XXX-MID-INIT skip, invisible;
      set KL0FM001.XXX-LAST-NM-LBL skip, invisible;
      set KL0FM001.XXX-FRST-NM-LBL skip, invisible;
      set KL0FM001.XXX-MID-INIT-LBL skip, invisible;
      set KL0FM001.KL0FM-PHONE-LBL skip, invisible;
      set KL0FM001.CL0FM-PHONE-AREA-CD skip, invisible;
      set KL0FM001.CL0FM-PHONE-PREFIX skip, invisible;
      set KL0FM001.CL0FM-PHONE-SUFFIX skip, invisible;
      set KL0FM001.CLASHPFF cursor; /* and place cursor here*/
    end
  end


  KL0F107(); /* get and format store self-id*/
  KL0F108(); /* get and format department self-id*/


  KL0F109(); /* protect screen fields*/




end // end KL0F101

// read invoice address record
Function KL0F102()
   /* ************************************************************/
   /* *     read the invoice address record if required         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F102"; /* set current process name*/

     /* get invoice nbr to use for later db read*/
  if (CLAREC.CLABLGFF == "I" /* if bill-group from invoice*/
   || CLAREC.CLASHPFF == "I") /* or ship-to from invoice*/
    CLBREC.CLACLMNB = CLAREC.CLACLMNB;
    CLBREC.CLBPMIVC = "Y";
    call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* try and open set*/
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1LOCAT[2] = "OPEN";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010();
    end

    call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* try for 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(163); /* shipgroup or bill group not on file*/
      else
        if (SQLCA.VAGen_SQLCODE < 0)
          TA1REC.TA1LOCAT[2] = "FETCH";
          TA1REC.TA1DBASE = "DCLAIM";
          TA1REC.TA1TBLVU = "VCLIVX01";
          XPCL010();
        end
      end
    end

    call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/

  end

end // end KL0F102

// get and format bill-to addr
Function KL0F103()
   /* ************************************************************/
   /* *        get and format the bill-to address               **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-90 sgorga  Renamed cl0m001.kuablid to             **/
   /* *                  cl0m001.kucblaid.                      **/
   /* * 02-15-91 chellm  DB2 changes. Deleted KUAADRID from the **/
   /* *                  the map. Now only use KUCBLAID.        **/
   /* * 04-12-91 GDECKE  GET BILL TO ADDRESS FROM THE CUSTOMER  **/
   /* *                  ADDRESS TABLE IF CLAIM HEADER HAS NON- **/
   /* *                  ZERO COMP-CO-ID. USE COMP-CO AND BILL  **/
   /* *                  GROUP ADDRESS ID TO SELECT ADDRESS LINE.*/
   /* * 11-12-93 GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.   **/
   /* * 03-11-94 BCOURT  CHANGE CLFREC.XXXADDRn TO XXX-ADDRn.   **/
   /* *      KEEP xxxaddr (without '-') on map since it's 30 char*/
   /* *      NOTE that xxx-addr (with '-') is defined 38 chars. **/
   /* *      Orders, Invoices, Claims all work with 30 chars.   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F103"; /* set current process name*/

    /* use primary invoice nbr for billgroup*/
  if (CLAREC.OP1CMPNB != 0)
                                   /* IF COMP-CO-ID IS ON CLAREC THEN GET*/
    KUCREC.KUCCOID = CLAREC.OP1CMPNB; /* ADDRESS FROM CUST ADDR TBL*/
    set SQLCA empty;
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* GET COMPANY RECORD*/
    if (SQLCA.VAGen_SQLCODE == 0) /* FOR COMPANY NAME*/
      KL0FM001.XXXADDR[1] = KUCREC.KUCCONM;
    else
      converseLib.validationFailed(645);
      set KL0FM001.KUCBLAID bold;
      KL0FM001.KUCBLAID = CLAREC.KUCBLAID;
         /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      return;
    end
    KULREC.KUCCOID = CLAREC.OP1CMPNB; /* GET COMP-CO BILL-GROUP ADDR*/
    KULREC.KULAAID = CLAREC.KUCBLAID;
    set SQLCA empty;
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* GET BILL GROUP ADDR*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0FM001.CLABLGFF = "C";
      KL0FM001.KUCBLAID = KULREC.KULAAID;
      KL0FM001.XXXADDR1[1] = KULREC.XXX-ADDR1;
      KL0FM001.XXXADDR2[1] = KULREC.XXX-ADDR2;
      KL0FM001.XXXADDR3[1] = KULREC.XXX-ADDR3;
      KL0FM001.XXXCITY[1] = KULREC.XXXCITY;
      KL0FM001.XSTCD[1] = KULREC.XSTCD;
      KL0FM001.XXXZIP[1] = KULREC.XXXZIP;
      KL0FM001.XCTCD[1] = KULREC.XCTCD;
    else
      converseLib.validationFailed(154);
      set KL0FM001.KUCBLAID bold;
      KL0FM001.KUCBLAID = CLAREC.KUCBLAID;
         /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      return;
    end
  end

   /* DO THE FOLLOWING IF COMP-CO ID IS NOT ON CLAIM HEADER*/


  if (CLAREC.CLABLGFF == "I"
   || CLAREC.CLASHPFF == "I")
    IV5REC.IV0PARTN = CLBREC.IV0PARTN;
    IV5REC.IV0IVCID = CLBREC.IV0IVCID;
    call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* get invoice addr record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLAREC.OP1CMPNB == 0) /* MOVE IVC ADDRESS IF NO COMP-CO*/
        KL0FM001.CLABLGFF = "I";
        /* MOVE 0 TO CL0FM001.KUAADRID 2-15-91 cspname kuaadrid deleted*/
        KL0FM001.KUCBLAID = CLAREC.KUCBLAID;
        KL0FM001.XXXADDR[1] = IV5REC.IV5BILNM;
        KL0FM001.XXXADDR1[1] = IV5REC.IV5BILA1;
        KL0FM001.XXXADDR2[1] = IV5REC.IV5BILA2;
        KL0FM001.XXXADDR3[1] = IV5REC.IV5BILA3;
        KL0FM001.XXXCITY[1] = IV5REC.IV5BILCT;
        KL0FM001.XSTCD[1] = IV5REC.IV5BILST;
        KL0FM001.XXXZIP[1] = IV5REC.IV5BILZP;
        KL0FM001.XCTCD[1] = IV5REC.IV5BILCY;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
      else
        TA1REC.TA1TBLKE = "GETTING INVOICE ADDRESS";
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVADR01";
        XPCL010();
      end
    end
  end

  if (CLAREC.OP1CMPNB != 0) /* IF COMP-CO-ID IS ON CLAREC THEN*/
    return; /* EXIT THIS ROUTINE HERE*/
  end

  if (CLAREC.CLABLGFF != "I")
    CLFREC.CLACLMNB = CLAREC.CLACLMNB;
    CLFREC.CLFADTYP = "B";
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* claims bill-to address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0FM001.CLABLGFF = CLAREC.CLABLGFF;
      /* MOVE 0 TO CL0FM001.KUAADRID; 2-15-91*/
      KL0FM001.KUCBLAID = CLAREC.KUCBLAID; /* 2-15-91*/
      KL0FM001.XXXADDR[1] = CLFREC.CLFADNM;
      KL0FM001.XXXADDR1[1] = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
      KL0FM001.XXXADDR2[1] = CLFREC.XXX-ADDR2; /* to db2 names*/
      KL0FM001.XXXADDR3[1] = CLFREC.XXX-ADDR3;
      KL0FM001.XXXCITY[1] = CLFREC.XXXCITY;
      KL0FM001.XSTCD[1] = CLFREC.XSTCD;
      KL0FM001.XXXZIP[1] = CLFREC.XXXZIP;
      KL0FM001.XCTCD[1] = CLFREC.XCTCD;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(154); /* bill-to address not on file*/
        return;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        TA1REC.TA1TBLKE = "GETTING CLAIM BILL-TO ADDRESS";
        XPCL010();
      end
    end
  end

end // end KL0F103

// get and format shipto addr
Function KL0F104()
   /* ************************************************************/
   /* *        get and format the ship-to address               **/
   /* *                                                         **/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* -----------------------------------------------------------**/
   /* CHNG#   DATE    PGMR    DESCRIPTION                       **/
   /* -----------------------------------------------------------**/
   /* 0    01/16/91  GDECKE  ADD RPS LOGIC                     **/
   /* 10-16-92  sgorga  deleted below comment because the field **/
   /* no longer exists:                        **/
   /* "KL0FS-RPS-INQUIRY;       /* SHOW RPS DATA WHEN NEEDED"    **/
   /* 03-11-94  BCOURT  rename CLFREC.XXXADDRn to XXX-ADDRn.    **/
   /* NOTE Keep MAP name xxxaddrn since it's 30 chars.      **/
   /* FYI  xxx-addrn (with the '-') is defined 38 chars.    **/
   /* Orders, Invoicing, Claims all use 30 chars.           **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0F104"; /* set current process name*/

   /* use claim nbr to get shipto address*/
  if (CLAREC.CLASHPFF != "I") /* if ship-to not from invoice*/
    CLFREC.CLACLMNB = CLAREC.CLACLMNB;
    CLFREC.CLFADTYP = "S";
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get claims shipto address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* MOVE 155 TO EZEMNO        ; shipto address not on file*/
        return;
      else
        TA1REC.TA1TBLKE = "GETTING CLAIM SHIPTO ADDRESS";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end


  if (CLAREC.CLASHPFF == "I")
    KL0FM001.CLASHPFF = "I";
    KL0FM001.KUMSHAID = 0;
    KL0FM001.XXXADDR[2] = IV5REC.IV5SHPNM;
    KL0FM001.XXXADDR1[2] = IV5REC.IV5SHPA1;
    KL0FM001.XXXADDR2[2] = IV5REC.IV5SHPA2;
    KL0FM001.XXXADDR3[2] = IV5REC.IV5SHPA3;
    KL0FM001.XXXCITY[2] = IV5REC.IV5SHPCT;
    KL0FM001.XSTCD[2] = IV5REC.IV5SHPST;
    KL0FM001.XXXZIP[2] = IV5REC.IV5SHPZP;
    KL0FM001.XCTCD[2] = IV5REC.IV5SHPCY;
  else
    KL0FM001.CLASHPFF = CLAREC.CLASHPFF;
    if (CLAREC.CLASHPFF == "C")
      KL0FM001.KUMSHAID = CLAREC.KUMSHAID;
    else
      KL0FM001.KUMSHAID = 0;
    end
    KL0FM001.XXXADDR[2] = CLFREC.CLFADNM;
    KL0FM001.XXXADDR1[2] = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
    KL0FM001.XXXADDR2[2] = CLFREC.XXX-ADDR2; /* to db2 names*/
    KL0FM001.XXXADDR3[2] = CLFREC.XXX-ADDR3;
    KL0FM001.XXXCITY[2] = CLFREC.XXXCITY;
    KL0FM001.XSTCD[2] = CLFREC.XSTCD;
    KL0FM001.XXXZIP[2] = CLFREC.XXXZIP;
    KL0FM001.XCTCD[2] = CLFREC.XCTCD;
  end

   /* IF CLAREC.CLAWSENF = 'Y';*/
    /* SET KL0FM001.KL0FM-RPS-TITLE AUTOSKIP,DARK;*/
    /* SET KL0FM001.CL-RPS-LABL-FL AUTOSKIP,DARK;*/
   /* ELSE;*/
   /* IF CLAREC.YCTCD = 'RTS';*/
    /* OR CLAREC.YCTCD = 'DEF';*/
      /* ; /* NEXT SENTENCE*/
    /* IF CLWREC.CLWACTIV = 'I';  /* IF IN INQUIRY MODE GET AND*/
    /* ELSE;                /* ('ADD' OR 'UPDATE' MODE)*/
      /* KL0FS-RPS-UPDATE;  /* OTHERWISE, SET UP THE DISPLAY FOR POSSIBLE*/
    /* END;                 /* UPDATING OF RPS DATA WHERE APPROPRIATE*/
      /* ELSE;*/
        /* SET KL0FM001.KL0FM-RPS-TITLE AUTOSKIP,DARK;*/
        /* SET KL0FM001.CL-RPS-LABL-FL AUTOSKIP,DARK;*/
   /* END;*/
   /* END;*/


end // end KL0F104

// get and format return-to addr
Function KL0F105()
   /* ************************************************************/
   /* *        get and format the return-to address             **/
   /* *  valid values for clartnff are 's' and 'e'              **/
   /* *  's' means default from shipto address                  **/
   /* *  'e' means user entered the data                        **/
   /* *                                                         **/
   /* * 03-11-94 BCOURT  Rename CLFREC.XXXADDRn to XXX-ADDRn.   **/
   /* *    NOTE  Keep map name xxxaddrn since it's 30 chars.    **/
   /* *    FYI xxx-addrn (with the '-') is defined 38 chars.    **/
   /* *    Order, Invoices, Claims all use just 30 chars.       **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F105"; /* set current process name*/


  if (CLAREC.CLARTNFF != "S") /* if return-to not from invoice*/
    CLFREC.CLACLMNB = CLAREC.CLACLMNB;
    CLFREC.CLFADTYP = "R";
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get claims shipto address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* MOVE 156 TO EZEMNO        ; return to address not on file*/
        return;
      else
        TA1REC.TA1TBLKE = "GETTING CLAIM RETURN-TO ADDRESS";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end


  KL0FM001.CLARTNFF = CLAREC.CLARTNFF;

  if (CLAREC.CLARTNFF != "S")
    KL0FM001.XXXADDR[3] = CLFREC.CLFADNM;
    KL0FM001.XXXADDR1[3] = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
    KL0FM001.XXXADDR2[3] = CLFREC.XXX-ADDR2; /* to db2 name*/
    KL0FM001.XXXADDR3[3] = CLFREC.XXX-ADDR3;
    KL0FM001.XXXCITY[3] = CLFREC.XXXCITY;
    KL0FM001.XSTCD[3] = CLFREC.XSTCD;
    KL0FM001.XXXZIP[3] = CLFREC.XXXZIP;
    KL0FM001.XCTCD[3] = CLFREC.XCTCD;
  else
    KL0FM001.XXXADDR[3] = KL0FM001.XXXADDR[2];
    KL0FM001.XXXADDR1[3] = KL0FM001.XXXADDR1[2];
    KL0FM001.XXXADDR2[3] = KL0FM001.XXXADDR2[2];
    KL0FM001.XXXADDR3[3] = KL0FM001.XXXADDR3[2];
    KL0FM001.XXXCITY[3] = KL0FM001.XXXCITY[2];
    KL0FM001.XSTCD[3] = KL0FM001.XSTCD[2];
    KL0FM001.XXXZIP[3] = KL0FM001.XXXZIP[2];
    KL0FM001.XCTCD[3] = KL0FM001.XCTCD[2];
  end

end // end KL0F105

// get consumer name
Function KL0F106()
   /* ************************************************************/
   /* *        get and format the consumer name                 **/
   /* *                                                         **/
   /* * 07-30-91 CHELLM If the consumer last name does not exist**/
   /* *          in the consumer table, use the PO field on clarec*/
   /* * 09-03-91 CHELLM set consumer phone number dark of not cdr*/
   /* * 02-17-93 lgross if xxx-last-nm > spaces display xxx-last**/
   /* *           name rather than cl0fw01.cl0fwcnm - changed   **/
   /* *           display of consumer name to include first,    **/
   /* *           middle and last name                          **/
   /* ************************************************************/

    /* 9/19/89  cl651  chellm  removed customer table lookup of*/
                    /* XAUCD to determine last name entry*/
                    /* requirement. replaced it with YCTCD=CDR.*/

  CLXREC.CLXCPROC = "CL0F106"; /* set current process name*/


  if (CLAREC.YCTCD == "RTS"
   || CLAREC.YCTCD == "DEF"
   || CLAREC.YCTCD == "OSD")
    if (CLAREC.CLAWSENF == "Y") /* worksheet entered claim*/
      /* SET KL0FM001.CL0FWCNM AUTOSKIP,DARK;/* dont show consumer name*/
      /* SET KL0FM001.CL0FMCNL AUTOSKIP,DARK;/* or consumer name lable*/
      set KL0FM001.XXX-LAST-NM skip, invisible;
      set KL0FM001.XXX-FRST-NM skip, invisible;
      set KL0FM001.XXX-MID-INIT skip, invisible;
      set KL0FM001.KL0FM-CNSMR-NM-LABL skip, invisible;
      set KL0FM001.XXX-LAST-NM-LBL skip, invisible;
      set KL0FM001.XXX-FRST-NM-LBL skip, invisible;
      set KL0FM001.XXX-MID-INIT-LBL skip, invisible;
      set KL0FM001.KL0FM-PHONE-LBL skip, invisible;
      set KL0FM001.CL0FM-PHONE-AREA-CD skip, invisible;
      set KL0FM001.CL0FM-PHONE-PREFIX skip, invisible;
      set KL0FM001.CL0FM-PHONE-SUFFIX skip, invisible;
      set KL0FM001.CLASHPFF cursor; /* and place cursor here*/
      return;
    else
      if (CLAREC.CLAWSENF == "N") /* not worksheet entered claim*/
        if (CLAREC.YCTCD == "CDR") /* and consumer def claim type*/
          /* next sentence            require last name entry*/
        else /* dont show consumer name*/
          set KL0FM001.XXX-LAST-NM skip, invisible;
          set KL0FM001.XXX-FRST-NM skip, invisible;
          set KL0FM001.XXX-MID-INIT skip, invisible;
          set KL0FM001.KL0FM-CNSMR-NM-LABL skip, invisible;
          set KL0FM001.XXX-LAST-NM-LBL skip, invisible;
          set KL0FM001.XXX-FRST-NM-LBL skip, invisible;
          set KL0FM001.XXX-MID-INIT-LBL skip, invisible;
          set KL0FM001.KL0FM-PHONE-LBL skip, invisible;
          set KL0FM001.CL0FM-PHONE-AREA-CD skip, invisible;
          set KL0FM001.CL0FM-PHONE-PREFIX skip, invisible;
          set KL0FM001.CL0FM-PHONE-SUFFIX skip, invisible;
          set KL0FM001.CLASHPFF cursor; /* and place cursor here*/
          return;
        end
      end
    end
  end


  set KL0FM001.XXX-LAST-NM initialAttributes;
  set KL0FM001.XXX-FRST-NM initialAttributes;
  set KL0FM001.XXX-MID-INIT initialAttributes;
  set KL0FM001.KL0FM-CNSMR-NM-LABL initialAttributes;
  set KL0FM001.XXX-LAST-NM-LBL initialAttributes;
  set KL0FM001.XXX-FRST-NM-LBL initialAttributes;
  set KL0FM001.XXX-MID-INIT initialAttributes;
  set KL0FM001.XXX-FRST-NM cursor; /* and place cursor*/
  set KL0FM001.KL0FM-PHONE-LBL initialAttributes;
  set KL0FM001.CL0FM-PHONE-AREA-CD initialAttributes;
  set KL0FM001.CL0FM-PHONE-PREFIX initialAttributes;
  set KL0FM001.CL0FM-PHONE-SUFFIX initialAttributes;
  CL0FW01.CL0FWCSN = "Y";
  set SQLCA empty;
  set CLDREC empty;
  CLDREC.CLACLMNB = CLAREC.CLACLMNB;

  call "IO1190" ("S ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* get consumer name record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0FW01.CLD3NM = CLDREC.CLD3NM;
    CL0FW01.CLD7NM = CLDREC.CLD7NM;
    if (CLDREC.XXX-LAST-NM > " ") /* if last name on dclaim.cnsrmr01*/
      KL0FM001.XXX-LAST-NM = CLDREC.XXX-LAST-NM;
    else /* before direct market change*/
      KL0FM001.XXX-LAST-NM = CL0FW01.CL0FWCNM;
    end
    KL0FM001.XXX-FRST-NM = CLDREC.XXX-FRST-NM;
    KL0FM001.XXX-MID-INIT = CLDREC.XXX-MID-INIT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (CLAREC.OP1CUPO != " ")
        KL0FM001.XXX-LAST-NM = CLAREC.OP1CUPO;
        CL0FW01.CL0FWCNM = CLAREC.OP1CUPO;
        set KL0FM001.XXX-LAST-NM modified;
      else
        KL0FM001.XXX-LAST-NM = " ";
        CL0FW01.CL0FWCNM = " ";
        set KL0FM001.XXX-LAST-NM modified;
      end
    else
      TA1REC.TA1TBLKE = "GETTING CONSUMER NAME";
      XPCL010();
    end
  end

end // end KL0F106

// get and format store self-id
Function KL0F107()
   /* ************************************************************/
   /* *        get and format the store self-id                 **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F107"; /* set current process name*/


  KUMREC.KUCCOID = CLAREC.KUCCOID;
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0FM001.KUMSLFID = KUMREC.KUMSLFID;
    KL0FM001.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0FM001.KUMSLFID = "NOT FOUND";
    else
      TA1REC.TA1TBLKE = "GETTING STORE SELF-ID";
      XPCL010();
    end
  end





end // end KL0F107

// get and format dept self-id
Function KL0F108()
   /* ************************************************************/
   /* *        get and format the department self-id            **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F108"; /* set current process name*/


  KUJREC.KUCCOID = CLAREC.KUCCOID;
  KUJREC.XNXCD = CLAREC.XNXCD;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* get department record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0FM001.KUJSLFID = KUJREC.KUJSLFID;
    KL0FM001.KUJSLFNM = KUJREC.KUJSLFNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0FM001.KUJSLFID = "NOT FOUND";
      KL0FM001.KUJSLFNM = " ";
    else
      TA1REC.TA1TBLKE = "GETTING DEPARTMENT SELF-ID";
      XPCL010();
    end
  end





end // end KL0F108

// set up screen protection
Function KL0F109()
   /* ************************************************************/
   /* *        set up screen field protection                   **/
   /* *                                                         **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-90 sgorga  renamed cl0fm001.kuablid to            **/
   /* *                  cl0fm001.kucblaid.                     **/
   /* * 09-03-90 CHELLM  Added Consumer Phone Number fields     **/
   /* * 02-17-93 lgross  changed consumer name to include first **/
   /* *                  middle and last name                   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F109"; /* set current process name*/


  set KL0FM001.KUCBLAID skip;
  set KL0FM001.XXXADDR[1] skip;
  set KL0FM001.XXXADDR1[1] skip;
  set KL0FM001.XXXADDR2[1] skip;
  set KL0FM001.XXXADDR3[1] skip;
  set KL0FM001.XXXCITY[1] skip;
  set KL0FM001.XSTCD[1] skip;
  set KL0FM001.XXXZIP[1] skip;
  set KL0FM001.XCTCD[1] skip;


  if (CLWREC.CLWACTIV == "I")
    set KL0FM001.CATOAP cursor;
    set KL0FM001.CLASHPFF skip;
    set KL0FM001.CLARTNFF skip;
    set KL0FM001.KUMSLFID skip;
    set KL0FM001.KUMSTRNM skip;
    set KL0FM001.KUJSLFID skip;
    set KL0FM001.KUJSLFNM skip;
    set KL0FM001.KUMSHAID skip;
    set KL0FM001.XXXADDR[2] skip;
    set KL0FM001.XXXADDR1[2] skip;
    set KL0FM001.XXXADDR2[2] skip;
    set KL0FM001.XXXADDR3[2] skip;
    set KL0FM001.XXXCITY[2] skip;
    set KL0FM001.XSTCD[2] skip;
    set KL0FM001.XXXZIP[2] skip;
    set KL0FM001.XCTCD[2] skip;
    set KL0FM001.XXXADDR[3] skip;
    set KL0FM001.XXXADDR1[3] skip;
    set KL0FM001.XXXADDR2[3] skip;
    set KL0FM001.XXXADDR3[3] skip;
    set KL0FM001.XXXCITY[3] skip;
    set KL0FM001.XSTCD[3] skip;
    set KL0FM001.XXXZIP[3] skip;
    set KL0FM001.XCTCD[3] skip;
    if (KL0FM001.XXX-LAST-NM == " ")
      set KL0FM001.KL0FM-CNSMR-NM-LABL skip, invisible;
      set KL0FM001.XXX-LAST-NM-LBL skip, invisible;
      set KL0FM001.XXX-FRST-NM-LBL skip, invisible;
      set KL0FM001.XXX-MID-INIT-LBL skip, invisible;
      set KL0FM001.XXX-LAST-NM skip, invisible;
      set KL0FM001.XXX-FRST-NM skip, invisible;
      set KL0FM001.XXX-MID-INIT skip, invisible;
      set KL0FM001.KL0FM-PHONE-LBL skip, invisible;
      set KL0FM001.CL0FM-PHONE-AREA-CD skip, invisible;
      set KL0FM001.CL0FM-PHONE-PREFIX skip, invisible;
      set KL0FM001.CL0FM-PHONE-SUFFIX skip, invisible;
    else
      set KL0FM001.KL0FM-CNSMR-NM-LABL skip;
      set KL0FM001.XXX-LAST-NM-LBL skip;
      set KL0FM001.XXX-FRST-NM-LBL skip;
      set KL0FM001.XXX-MID-INIT-LBL skip;
      set KL0FM001.XXX-LAST-NM skip;
      set KL0FM001.XXX-FRST-NM skip;
      set KL0FM001.XXX-MID-INIT skip;
      set KL0FM001.KL0FM-PHONE-LBL skip;
      set KL0FM001.CL0FM-PHONE-AREA-CD skip;
      set KL0FM001.CL0FM-PHONE-PREFIX skip;
      set KL0FM001.CL0FM-PHONE-SUFFIX skip;
    end
  else
    set KL0FM001.CLASHPFF normal;
    set KL0FM001.KUMSHAID normal;
    set KL0FM001.KUMSLFID normal;
    set KL0FM001.KUMSTRNM normal;
    set KL0FM001.KUJSLFID normal;
    set KL0FM001.KUJSLFNM normal;
    set KL0FM001.CLARTNFF normal;
    set KL0FM001.XXXADDR[2] normal;
    set KL0FM001.XXXADDR1[2] normal;
    set KL0FM001.XXXADDR2[2] normal;
    set KL0FM001.XXXADDR3[2] normal;
    set KL0FM001.XXXCITY[2] normal;
    set KL0FM001.XSTCD[2] normal;
    set KL0FM001.XXXZIP[2] normal;
    set KL0FM001.XCTCD[2] normal;
    set KL0FM001.XXXADDR[3] normal;
    set KL0FM001.XXXADDR1[3] normal;
    set KL0FM001.XXXADDR2[3] normal;
    set KL0FM001.XXXADDR3[3] normal;
    set KL0FM001.XXXCITY[3] normal;
    set KL0FM001.XSTCD[3] normal;
    set KL0FM001.XXXZIP[3] normal;
    set KL0FM001.XCTCD[3] normal;
  end



end // end KL0F109

// handle screen m001 spec entrys
Function KL0F110()
   /* ************************************************************/
   /* *     handle screen cl0fm001 special entries              **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F110"; /* set current process name*/



  if (converseVar.eventKey is enter)
    if (KL0FM001.CATOAP == " " /* if no fast-path requested*/
     && KL0FM001.CAITEM == " ") /* and item is blank*/
      return;
    else
      if (KL0FM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0FM001.CATOAP;
        COMMAREA.CAITEM = KL0FM001.CAITEM;
        XPCL002();
        CLXREC.CLXERRF = "Y";
        return;
      else
        if (KL0FM001.CATOAP == " "
         && KL0FM001.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0FM001.CAITEM cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
        end
      end
    end
  end




  if (converseVar.eventKey is pf1)
    XSPF1(); /* transfer to help application*/
    CLXREC.CLXERRF = "Y"; /* we have an error*/
    CLXREC.CLXMSG = COMMAREA.CAMSG; /* show why transfer failed*/
    return;
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KL0A";
    XPCL002(); /* transfer to desired application*/
    return;
  end


  if (converseVar.eventKey is pf4)
    XSPF4(); /* transfer to help application*/
    CLXREC.CLXERRF = "Y"; /* we have an error*/
    CLXREC.CLXMSG = COMMAREA.CAMSG; /* show why transfer failed*/
    return;
  end


  if (converseVar.eventKey is pf12)
    CL0FW01.CL0FW12K = "Y";
    return;
  end

  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf19
   || converseVar.eventKey is pf20)
    return;
  end


  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62); /* pa keys cause loss of data*/
    CLXREC.CLXERRF = "Y"; /* we have an error*/
    return;
  end


  converseLib.validationFailed(2); /* invalid pf-key*/
  CLXREC.CLXERRF = "Y"; /* we have an error*/
  return;
end // end KL0F110

// test if fields modified
Function KL0F112()
   /* ************************************************************/
   /* *    test if fields are modified to set edit flag         **/
   /* *                                                         **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-90  sgorga  Renamed cl0m001.kuablid to            **/
   /* *                   cl0m001.kucblaid                      **/
   /* * 02-15-91  CHELLM  Commented out CL0FM001.KUAADriD since **/
   /* *                   its no longer used.                   **/
   /* * 09-03-91  CHELLM  Added Consumer Phone Number fields.   **/
   /* * 01-16-92  GDECKE  ADD RPS LOGIC                         **/
   /* * 12-2-92   lgross  If any part of consumer name is       **/
   /* *           modified set consumer name update flag.       **/
   /* * 07-2-93   GDECKE  RESET RPS WARINING FLAGS IF ZIP CHANGED*/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0F112"; /* set current process name*/

  CL0FW01.CL0FWA1M = "N";
  CL0FW01.CL0FWA2M = "N";
  CL0FW01.CL0FWA3M = "N";
  CL0FW01.CL0FW-RPS-LABL-MOD-FL = "N";
  CL0FW01.CL0FWCM = "N";
  CL0FW01.CL0FW-PHN-MODIFIED-FL = "N";
  CLXREC.CLXEDITF = "N";


    /* for the present these fields are always protected so*/
    /* address 1 will never be modified*/
  if (KL0FM001.KUCBLAID is modified
   || KL0FM001.XXXADDR[1] is modified
   /* OR CL0FM001.KUAADRID IS MODIFIED 2-15-91;*/
   || KL0FM001.XXXADDR1[1] is modified
   || KL0FM001.XXXADDR2[1] is modified
   || KL0FM001.XXXADDR3[1] is modified
   || KL0FM001.XXXCITY[1] is modified
   || KL0FM001.XSTCD[1] is modified
   || KL0FM001.XXXZIP[1] is modified
   || KL0FM001.XCTCD[1] is modified)
    CL0FW01.CL0FWA1M = "Y"; /* addr 1 modified*/
  end


  if (KL0FM001.KUMSHAID is modified
   || KL0FM001.CLASHPFF is modified
   || KL0FM001.XXXADDR[2] is modified
   || KL0FM001.XXXADDR1[2] is modified
   || KL0FM001.XXXADDR2[2] is modified
   || KL0FM001.XXXADDR3[2] is modified
   || KL0FM001.XXXCITY[2] is modified
   || KL0FM001.XSTCD[2] is modified
   || KL0FM001.XXXZIP[2] is modified
   || KL0FM001.XCTCD[2] is modified)
    CL0FW01.CL0FWA2M = "Y"; /* address 2 modified*/
  end


  if (KL0FM001.CL-RPS-LABL-FL is modified)
    CL0FW01.CL0FW-RPS-LABL-MOD-FL = "Y"; /* RPS FLAG MODIFIED*/
  end


  if (KL0FM001.CLARTNFF is modified
   || KL0FM001.XXXADDR[3] is modified
   || KL0FM001.XXXADDR1[3] is modified
   || KL0FM001.XXXADDR2[3] is modified
   || KL0FM001.XXXADDR3[3] is modified
   || KL0FM001.XXXCITY[3] is modified
   || KL0FM001.XSTCD[3] is modified
   || KL0FM001.XXXZIP[3] is modified
   || KL0FM001.XCTCD[3] is modified)
    CL0FW01.CL0FWA3M = "Y"; /* addr 3 is modified*/
  end


  if (KL0FM001.XXX-LAST-NM is modified)
    CL0FW01.CL0FWCM = "Y"; /* consumer name modified*/
  end

  if (KL0FM001.XXX-FRST-NM is modified)
    CL0FW01.CL0FWCM = "Y"; /* consumer name modified*/
  end

  if (KL0FM001.XXX-MID-INIT is modified)
    CL0FW01.CL0FWCM = "Y"; /* consumer name modified*/
  end

  if (KL0FM001.CL0FM-PHONE-AREA-CD is modified)
    CL0FW01.CL0FW-PHN-MODIFIED-FL = "Y"; /* consumer phone modified*/
  end

  if (KL0FM001.CL0FM-PHONE-PREFIX is modified)
    CL0FW01.CL0FW-PHN-MODIFIED-FL = "Y"; /* consumer phone modified*/
  end

  if (KL0FM001.CL0FM-PHONE-SUFFIX is modified)
    CL0FW01.CL0FW-PHN-MODIFIED-FL = "Y"; /* consumer phone modified*/
  end


  if (CL0FW01.CL0FWA1M == "Y"
   || CL0FW01.CL0FWA2M == "Y"
   || CL0FW01.CL0FWA3M == "Y"
   || CL0FW01.CL0FWCM == "Y"
   || CL0FW01.CL0FW-PHN-MODIFIED-FL == "Y"
   || CL0FW01.CL0FW-RPS-LABL-MOD-FL == "Y"
   || converseVar.eventKey is pf12)
    CLXREC.CLXEDITF = "Y";
    CL0FW01.CL0FWSMF = "Y"; /* yes, screen was modified*/
  else
    CL0FW01.CL0FWSMF = "N"; /* no, screen was not modified*/
  end

    /* RESET RPS WARNING FLAGS IF ZIPCODE WAS CHANGED*/

  if (KL0FM001.XXXZIP[2] != CL0FW01.CL0FW-SAVE-RPS-ZIP)
    CL0FW01.CL0FW-SAVE-RPS-ZIP = KL0FM001.XXXZIP[2];
    CL0FW01.CL0FW-RPS-WARN-QTY = " ";
    CL0FW01.CL0FW-RPS-WARN-EXCL = " ";
    CL0FW01.CL0FW-RPS-WARN-RSN = " ";
    CL0FW01.CL0FW-RPS-WARN-NPAY = " ";
    CL0FW01.CL0FW-RPS-WARN-PART-SVC = " ";
  end


end // end KL0F112

// set do-updates flag
Function KL0F113()
   /* ************************************************************/
   /* *    set the do-updates flag                              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F113"; /* set current process name*/


  if (CLWREC.CLWACTIV == "I")
    CLXREC.CLXUPDTF = "N"; /* dont update when inquiring*/
  else
    if (CLXREC.CLXEDITF == "Y" /* if we did edits*/
     && CLXREC.CLXERRF == "N") /* and there are no errors*/
      if (converseVar.eventKey is pf12) /* if just expanding codes*/
        CLXREC.CLXUPDTF = "N"; /* dont do updates*/
      else
        CLXREC.CLXUPDTF = "Y"; /* do updates*/
      end
    else
      CLXREC.CLXUPDTF = "N"; /* dont do updates*/
    end
  end

end // end KL0F113

// process screen m001 entries
Function KL0F120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen cl0fm001                   **/
   /* * 09/03/91 chellm  added edit for consumer phone number.  **/
   /* *                  CL0FS-EDIT-PHONE-NBR                   **/
   /* * 04/03/92 GDECKE  added edit RPS LABEL FLAG CHANGES.     **/
   /* * 10/16/92 sgorga  deleted comment with obsolete field.   **/
   /* * 12/02/92 lgross broke kl0fm-rps-title into 2 lines 1 & 2**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F120"; /* set current process name*/

  CLXREC.CLXERRF = "N"; /* init errors-on-screen flag*/


  if (CL0FW01.CL0FWCM == "Y" /* consumer name modified*/
   || CL0FW01.CL0FWCSN == "Y") /* consumer name needed*/
    KL0FS74(); /* so edit it*/
    KL0FS-SHIP-NM(); /* enter consumer name as ship to name*/
  end


  if (CL0FW01.CL0FW-PHN-MODIFIED-FL == "Y")
    KL0FS-EDIT-PHN-NBR(); /* so edit it*/
  end

     /* edit and process the rps field*/

  CL0FW01.CL0FW-RPS-UPDT-FL = "N"; /* INITIALIZE UPDATE FLAG*/
  if (CLAREC.CLAWSENF == "Y") /* WORKSHEET ENTERED CLAIMS WILL NOT SHOW*/
    set KL0FM001.KL0FM-RPS-TITLE1 skip, invisible; /* THE RPS FLAG*/
    set KL0FM001.KL0FM-RPS-TITLE2 skip, invisible; /* THE RPS FLAG*/
    set KL0FM001.CL-RPS-LABL-FL skip, invisible;
  else
    if (CLAREC.YCTCD == "RTS"
     || CLAREC.YCTCD == "DEF")
      if (CLJREC.CLJLBTOT > 0)
        set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* SKIP THE RPS FIELD*/
        set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* SKIP THE RPS FIELD*/
        set KL0FM001.CL-RPS-LABL-FL skip;
      else
        if (CL0FW01.CL0FW-RPS-LABL-MOD-FL == "Y" /* if RPS LABEL FLAG MODIFIED*/
         || CL0FW01.CL0FWA2M == "Y")             /* OR POSSIBLE ZIP CODE CHANGE*/
          if (CLWREC.CLWACTIV == "I") /* IF IN INQUIRY MODE GET AND SHOW*/
            set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* SKIP THE RPS FIELD*/
            set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* SKIP THE RPS FIELD*/
            set KL0FM001.CL-RPS-LABL-FL skip;
          else /* ('ADD', OR 'UPDATE' MODE)*/
            KL0FS-RPS-UPDATE(); /* OTHERWISE SET UP THE DISPLAY FOR POSSIBLE*/
            if (CLXREC.CLXERRF != "Y"
             && CLJREC.CL-RPS-LABL-FL != KL0FM001.CL-RPS-LABL-FL)
              if (KL0FM001.CL-RPS-LABL-FL == "Y"
               || KL0FM001.CL-RPS-LABL-FL == "N")
                CLJREC.CL-RPS-LABL-FL = KL0FM001.CL-RPS-LABL-FL;
                CL0FW01.CL0FW-RPS-UPDT-FL = "Y";
              end
            end
          end
        end
      end
    else
      set KL0FM001.KL0FM-RPS-TITLE1 skip, invisible;
      set KL0FM001.KL0FM-RPS-TITLE2 skip, invisible;
      set KL0FM001.CL-RPS-LABL-FL skip, invisible;
    end
  end



  if (CL0FW01.CL0FWA3M == "Y") /* if return-to address modified*/
    CL0FW01.CL0FWAX = 3; /* set addr index to return-to*/
    KL0FS75(); /* edit return-to*/
  end


  if (CL0FW01.CL0FWA2M == "Y") /* if ship-to-address modified*/
    CL0FW01.CL0FWAX = 2; /* set addr index to ship-to*/
    KL0FS73(); /* edit ship-to address*/
  end


   /* for the present bill to can't be modified*/
  if (CL0FW01.CL0FWA1M == "Y") /* if bill-group address modified*/
    CL0FW01.CL0FWAX = 1; /* set addr index to bill-to*/
    KL0FS72(); /* edit bill-to-address*/
  end

end // end KL0F120

// update header/address tables
Function KL0F130()
   /* ************************************************************/
   /* *    this process updates the claim header and the        **/
   /* *    claim address tables.                                **/
   /* * 09-03-91 CHELLM added update to DCLAIM.VCLCOM01 for     **/
   /* *                 Consumer Phone Number.                  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F130"; /* set current process name*/


  CL0FW01.CL0FWUOK = "Y"; /* init updates-went-ok-flag*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1DBASE = "TA2REC";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0F001";
    XPCL010(); /* abend*/
  end



  if (CL0FW01.CL0FWA1M == "Y") /* if billto was modified*/
    KL0FS91(); /* update billto address*/
  end


  if (CL0FW01.CL0FWA2M == "Y" /* if ship-to was modified*/
   && CL0FW01.CL0FWUOK == "Y") /* and previous updates went ok*/
    KL0FS92(); /* update ship-to address*/
  end


  if (CL0FW01.CL0FWA3M == "Y" /* if return-to was modified*/
   && CL0FW01.CL0FWUOK == "Y") /* and previous updates went ok*/
    KL0FS93(); /* update return-to address*/
  end


  if (CL0FW01.CL0FWCM == "Y" /* if consumer name was modified*/
   && CL0FW01.CL0FWUOK == "Y") /* and previous updates went ok*/
    KL0FS95(); /* update/insert consumer name*/
  end


  if (CL0FW01.CL0FW-PHN-MODIFIED-FL == "Y"
   && CL0FW01.CL0FWUOK == "Y") /* and previous updates went ok*/
    KL0FS-UPDT-PHN-NBR(); /* delete/add consumer phone-nbr*/
  end


  if (CL0FW01.CL0FW-RPS-UPDT-FL == "Y" /* IF RA HEADER MUST BE UPDATED*/
   && CL0FW01.CL0FWUOK == "Y")         /* and previous updates went ok*/
    CL0FW01.CL0FW-DEADLOCK-FLAG = "Y";
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    while (CL0FW01.CL0FW-DEADLOCK-FLAG == "Y")
      KL0FS-UPDT-RA-HDR(); /* UPDATE RPS FLAG OR RA HEADER*/
    end
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED*/
      CL0FW01.CL0FWUOK = "N"; /* SET UPDATE OKAY FLAG TO 'N'*/
    end
  end


  if (CL0FW01.CL0FWUOK == "Y") /* if previous updates went ok*/
    KL0FS94(); /* update claim header*/
  end



  if (CL0FW01.CL0FWUOK == "Y") /* if updates went ok*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit changes*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes made*/
  end





end // end KL0F130

// update header/address tables
Function KL0F131()
   /* ************************************************************/
   /* *    this process updates the claim header*/
   /* **/
   /* *************************************************************/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *                                                          **/
   /* * 01-04-90  sgorga  Renamed cl0m001.kuablid to             **/
   /* *                   cl0m001.kucblaid.                      **/
   /* * 02-15-91  chellm  clarec.kuablid to kucblaid             **/
   /* *                                                          **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0F131"; /* set current process name*/


  CLAREC.CLABLGFF = KL0FM001.CLABLGFF;
  CLAREC.KUCBLAID = KL0FM001.KUCBLAID;
  CLAREC.CLASHPFF = KL0FM001.CLASHPFF;
   /* MOVE 0 TO CLAREC.KUMSHAID;*/
   /* MOVE CL0FM001.KUMSHAID TO CLAREC.KUMSHAID;*/
  CLAREC.CLARTNFF = KL0FM001.CLARTNFF;


end // end KL0F131

// handle screen m001 spec entrys
Function KL0F140()
   /* ************************************************************/
   /* *     check pf keys and 'enter' for next action. since    **/
   /* *     pf1, pf3 and pf4 were alread acted upon, after the  **/
   /* *     converse, we only have to take care of the rest     **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F140"; /* set current process name*/



  if (converseVar.eventKey is enter)
    KL0F141();
    if (CLXREC.CLXERRF == "N") /* if no errors*/
      XPCL002();
    end
    return;
  end



  if (converseVar.eventKey is pf2)
    COMMAREA.CATOAP = "KL0M";
    XPCL002();
    CLXREC.CLXERRF = "Y"; /* error*/
    return;
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    CLXREC.CLXERRF = "Y"; /* there are errors on the screen*/
    return;
  end


  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "KL0N"; /* additional invoices*/
    XPCL002();
    CLXREC.CLXERRF = "Y";
    return;
  end


  if (converseVar.eventKey is pf18)
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G";
    XPCL002();
    CLXREC.CLXERRF = "Y"; /* there are errors on the screen*/
    return;
  end


  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "KL0H";
    XPCL002();
    CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
    CLXREC.CLXERRF = "Y"; /* there were errors on the screen*/
    return;
  end

  if (converseVar.eventKey is pf20)
    CLWREC.CLWMCMNT = "Y";
    COMMAREA.CATOAP = "KL0G";
    XPCL002();
    CLXREC.CLXERRF = "Y"; /* there are errors on the screen*/
    return;
  end

     /* no other condition was met*/
  converseLib.validationFailed(8); /* selection is not valid*/
  CLXREC.CLXEOSF = "N";
  CLXREC.CLXEOAF = "N";





end // end KL0F140

// set up next application
Function KL0F141()
   /* ************************************************************/
   /* *     this process handles the control of flow to the     **/
   /* *        next application when the enter key is pressed.  **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0F141"; /* set current process name*/


  if (CLWREC.CLWADLAR == "Y")
    COMMAREA.CATOAP = "KL0H";
    return;
  end


  if (CLAREC.YCRCD in YCRTBL.YCRCD)
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  else
    TA1REC.TA1TBLKE = "YCRCD NOT IN YCRTBL";
    XPCL010();
  end


  if (CLWREC.CLWMNOPT == 7)
    COMMAREA.CATOAP = "KL0T";
    return;
  end


  if (CLWREC.CLWMNOPT == 3
   || CLWREC.CLWMNOPT == 13)
    if (CLAREC.YCTCD == "NIL")
      COMMAREA.CATOAP = "KL0X"; /* intl defective*/
      return;
    end
  end


   /* *********************************************************/
     /* transfer relate to adjustments claim types*/
   /* *********************************************************/


  if (CLWREC.CLWMNOPT == 1
   || CLWREC.CLWMNOPT == 4
   || CLWREC.CLWMNOPT == 5
   || CLWREC.CLWMNOPT == 8)
    if (CLAREC.YCTCD == "NBC")
      COMMAREA.CATOAP = "KL0K"; /* nike bank g/l*/
      return;
    else
      if (CLAREC.YCTCD == "SCO")
        COMMAREA.CATOAP = "KL0W"; /* shipping charges*/
        return;
      else
        if (CLAREC.YCTCD == "ADJ")
          if (YCRTBL.YCRALWPR[CLXYCRX] == "Y") /* if product reason*/
            COMMAREA.CATOAP = "KL0L"; /* adjustment summary*/
            return;
          else
            if (YCRTBL.YCRALWGL[CLXYCRX] == "Y") /* if g/l claim reason*/
              COMMAREA.CATOAP = "KL0J"; /* general ledger*/
              return;
            else
              if (YCRTBL.YCRALWTF[CLXYCRX] == "Y") /* if traffic reason*/
                COMMAREA.CATOAP = "KL0I"; /* traffic*/
                return;
              end
            end
          end
        else
          if (CLAREC.YCTCD == "DAA")
            if (YCRTBL.YCRALWGL[CLXYCRX] == "Y") /* if g/l claim reason*/
              COMMAREA.CATOAP = "KL0K"; /* general ledger*/
              return;
            else
              if (YCRTBL.YCRALWPR[CLXYCRX] == "Y") /* if product reason*/
                COMMAREA.CATOAP = "KL0L"; /* adjustment summary*/
                return;
              else
                if (YCRTBL.YCRALWTF[CLXYCRX] == "Y") /* if traffic reason*/
                  COMMAREA.CATOAP = "KL0I"; /* traffic*/
                  return;
                end
              end
            end
          end
        end
      end
    end
  end


   /* *********************************************************/
    /* transfer according to worksheet entered flags*/
   /* *********************************************************/


  if (CLAREC.CLAWSENF == "Y") /* worksheet entry*/
    if (CLAREC.YCTCD == "RTS"
     || CLAREC.YCTCD == "RFL")
      COMMAREA.CATOAP = "KL0U"; /* ra/rts summary*/
      return;
    else
      if (CLAREC.YCTCD == "DEF"
       || CLAREC.YCTCD == "OSD"
       || CLAREC.YCTCD == "CDR"
       || CLAREC.YCTCD == "DFO")
        COMMAREA.CATOAP = "KL0V"; /* defective authorization*/
        return;
      end
    end
  else /* not worksheet entry flag*/
    COMMAREA.CATOAP = "KL0E"; /* return inspection*/
    return;
  end



     /* no other condition was met*/
  converseLib.validationFailed(22); /* please use pf key*/
  CLXREC.CLXERRF = "Y";

end // end KL0F141

// Edit Cust Contact Phone Nbr
Function KL0FS-EDIT-PHN-NBR()
   /* ************************************************************/
   /* *  Edit the Customer Contact Phone Number.                **/
   /* *      If a phone number is entered, it must be           **/
   /* *         10 characters.                                  **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 9/03/91 CHELLM  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0FS-EDIT-PHN-NBR"; /* set current process name*/

  CL0FW01.CL0FW-PHONE-AREA-CD = KL0FM001.CL0FM-PHONE-AREA-CD;
  CL0FW01.CL0FW-PHONE-PREFIX = KL0FM001.CL0FM-PHONE-PREFIX;
  CL0FW01.CL0FW-PHONE-SUFFIX = KL0FM001.CL0FM-PHONE-SUFFIX;

  if (CL0FW01.CL0FW-PHONE-NUMBER == " ") /* if not entered, no need to edit*/
    return;
  end

  CLXREC.CLXWFLDC = CL0FW01.CL0FW-PHONE-NUMBER;
  sysVar.arrayIndex = 10;
  while (sysVar.arrayIndex > 0)
    if (CLXREC.CLXWLTR[sysVar.arrayIndex] == " ")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(694);
      set KL0FM001.CL0FM-PHONE-AREA-CD cursor, modified, bold;
      set KL0FM001.CL0FM-PHONE-PREFIX modified, bold;
      set KL0FM001.CL0FM-PHONE-SUFFIX modified, bold;
      return;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end


end // end KL0FS-EDIT-PHN-NBR

// format name from consumer
Function KL0FS-FORM-NM()


   /* *************************************************************/
   /* *****  R E F O R M A T    consumer name                ******/
   /* This statment group will take the first name, middle*/
   /* initial and last name and combine them to form one name*/
   /* 12-02-92  lgross         created*/
   /* *************************************************************/


  KL0FW02.KL0FW-FULL-NM = " ";
   /* ********** find last character in first name ***********/
  KL0FW02.KL0FW-NM = " ";
  KL0FW02.KL0FW-NM = KL0FM001.XXX-FRST-NM;
  KL0FW02.KL0FW-IDX3 = 25;
  while (KL0FW02.KL0FW-IDX3 >= 1
   && KL0FW02.KL0FW-CHA[KL0FW-IDX3] == " ")
    KL0FW02.KL0FW-IDX3 = KL0FW02.KL0FW-IDX3 - 1;
  end
   /* ********** last character is in position 'kl0fw02.kl0fw-idx3*/

   /* ********** move first name to full name field ***********/
  KL0FW02.KL0FW-IDX2 = 1;
  while (KL0FW02.KL0FW-IDX2 <= KL0FW02.KL0FW-IDX3
   && KL0FW02.KL0FW-IDX2 <= 35)
    KL0FW02.KL0FW-FULL-CHA[KL0FW-IDX2] = KL0FW02.KL0FW-CHA[KL0FW-IDX2];
    KL0FW02.KL0FW-IDX2 = KL0FW02.KL0FW-IDX2 + 1;
  end
   /* **********space between first name and mid init or last name*/
  KL0FW02.KL0FW-FULL-CHA[KL0FW-IDX2] = " ";
  KL0FW02.KL0FW-IDX2 = KL0FW02.KL0FW-IDX2 + 1;

   /* ********** move middle initial to full name field ***********/
  if (KL0FM001.XXX-MID-INIT > " ") /* if mid init entered*/
    if (KL0FW02.KL0FW-IDX2 <= 35)
      KL0FW02.KL0FW-FULL-CHA[KL0FW-IDX2] = KL0FM001.XXX-MID-INIT;
      KL0FW02.KL0FW-IDX2 = KL0FW02.KL0FW-IDX2 + 1;
      KL0FW02.KL0FW-FULL-CHA[KL0FW-IDX2] = " ";
      KL0FW02.KL0FW-IDX2 = KL0FW02.KL0FW-IDX2 + 1;
    end
  end

   /* ********** find last character in last name ***********/
  KL0FW02.KL0FW-NM = " ";
  KL0FW02.KL0FW-NM = KL0FM001.XXX-LAST-NM;
  KL0FW02.KL0FW-IDX3 = 25;
  while (KL0FW02.KL0FW-IDX3 >= 1
   && KL0FW02.KL0FW-CHA[KL0FW-IDX3] == " ")
    KL0FW02.KL0FW-IDX3 = KL0FW02.KL0FW-IDX3 - 1;
  end
   /* ********** last character is in position 'kl0fw-idx3'********/

   /* ********** move last name to full name field ***********/
  KL0FW02.KL0FW-IDX4 = 1;
  while (KL0FW02.KL0FW-IDX4 <= KL0FW02.KL0FW-IDX3)
    KL0FW02.KL0FW-FULL-CHA[KL0FW-IDX2] = KL0FW02.KL0FW-CHA[KL0FW-IDX4];
    KL0FW02.KL0FW-IDX2 = KL0FW02.KL0FW-IDX2 + 1;
    KL0FW02.KL0FW-IDX4 = KL0FW02.KL0FW-IDX4 + 1;
  end





end // end KL0FS-FORM-NM

// SELECT CUSTOMER COMPANY RECORD
Function KL0FS-GET-CUST-REC()
   /* ***********************************************************/
   /* *  SELECT THE DCUST.VCMPNY01 LINE TO GET CUST TYPE (XAUCD)*/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-30-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-GET-CUST-REC"; /* set current process name*/


  set SQLCA empty; /* CLEAR SQL RECORD*/


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    converseLib.validationFailed(81); /* SHOW ERROR MESSAGE*/
    CLXREC.CLXERRF = "Y";
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = CL0FW01.CL0FW-DEADLOCK-COUNT + 1;
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0FS-GET-CUST-REC"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO0240"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCUST "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0FS-GET-CUST-REC

// get customer phone nbr
Function KL0FS-GET-PHN-NBR()
   /* *************************************************************/
   /* Get Customer Phone Number*/
   /*  */
   /* MAINTENANCE HISTORY*/
   /*  */
   /* 09-03-91 CHELLM Created.*/
   /* 12-03-92 lgross  changed name of cl0fm-phone-literal to*/
   /* kl0fm-phone-lbl*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0FS-GET-PHN-NBR"; /* set current proc name*/

  set KL0FM001.KL0FM-PHONE-LBL initialAttributes;
  CL0FW01.CL0FW-PHONE-COMMENT = " ";
  CLGREC.CLACLMNB = KL0FM001.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "T";
  CLGREC.CLGCMSEQ = 1;
   /* select the customer phone number, if*/
   /* one exists, and put on map*/

  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0FW01.CL0FW-PHONE-COMMENT = CLGREC.CLGCOMNT;
    KL0FM001.CL0FM-PHONE-AREA-CD = CL0FW01.CL0FW-PHONE-AREA-CD;
    KL0FM001.CL0FM-PHONE-PREFIX = CL0FW01.CL0FW-PHONE-PREFIX;
    KL0FM001.CL0FM-PHONE-SUFFIX = CL0FW01.CL0FW-PHONE-SUFFIX;
    set KL0FM001.KL0FM-PHONE-LBL initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "CL0FS-GET-PHN-NBR"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


end // end KL0FS-GET-PHN-NBR

// SELECT RETURN AUTH HEADER REC.
Function KL0FS-GET-RA-HDR()
   /* ***********************************************************/
   /* *  SELECT THE DCLAIM.VRAHDR01 LINE TO GET RPS FLAG       **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-16-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-GET-RA-HDR  "; /* set current process name*/


  set SQLCA empty; /* CLEAR SQL RECORD*/

  CL0FW01.CL0FW-HAVE-RA-FL = "N"; /* CLEAR RA LINE FOUND FLAG*/

  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    CL0FW01.CL0FW-HAVE-RA-FL = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = CL0FW01.CL0FW-DEADLOCK-COUNT + 1;
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0FS-GET-RA-HDR"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO1270"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
  TA1REC.TA1TBLVU = "VRAHDR01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0FS-GET-RA-HDR

// CAN CUSTOMER USE RPS?
Function KL0FS-RPS-EXCLUDE()
   /* ***********************************************************/
   /* * search entire cl9tbl for company and store             **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  06-26-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-RPS-EXCLUDE "; /* set current process name*/
  CL0FW01.CL0FW-FOUND-CO-STOR = "N";
  sysVar.arrayIndex = 1;

   /* DO COMPANY SELF-EXCLUSION table search*/

  while (CL0FW01.CL0FW-FOUND-CO-STOR == "N"
   && CL9TBL.KUCCOID[sysVar.arrayIndex] != 999999999)
    if (CLAREC.KUCCOID == CL9TBL.KUCCOID[sysVar.arrayIndex])
      if (CLAREC.KUMSTRID == CL9TBL.KUMSTRID[sysVar.arrayIndex]
       || CL9TBL.KUMSTRID[sysVar.arrayIndex] == -1)
        CL0FW01.CL0FW-FOUND-CO-STOR = "Y";
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end


end // end KL0FS-RPS-EXCLUDE

// CAN CUSTOMER USE RPS?
Function KL0FS-RPS-HARD-EDT()
   /* ***********************************************************/
   /* * DETERMINE WHETHER THE CUSTOMER QUALIFIES FOR USING RPS **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  04-02-92  gdecke  created                             **/
   /* *  04-28-92  gdecke  ADD EDIT FOR WAREHOUSE ZIPCODE      **/
   /* *  10-16-92  sgorga  correct process name.               **/
   /* *  07-01-93  GDECKE  ALLOW RPS INTRASTATE RETURN IF CUST **/
   /* *                    ZIPCODE IS IN KL17TBL.              **/
   /* *  08-18-95  kshaw   remove all kl17tbl logic            **/
   /* *  11-18-98  chellm  added xat 05,06 to xat edit         **/

   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-RPS-HARD-EDT"; /* set current process name*/


   /* DO OFFSHORD DELIVERY CLAIM TYPE CKECK*/

  if (CLAREC.YCTCD == "OSD")
    CL0FW01.CL0FW-RPS-MSG-NBR = 727;
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
    return;
  end


     /* RPS ALLOWED ONLY FOR RTS OF DEF CLAIMS*/

  if (CLAREC.YCTCD == "RTS"
   || CLAREC.YCTCD == "DEF")
       /* NEXT SENTENCE*/
  else
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
    CL0FW01.CL0FW-RPS-MSG-NBR = 705;
    return;
  end


   /* CHECK FOR RETURN TO WAREHOUSE IN RPS ZIPCODE TABLE*/

  if (CLJREC.XWHCD == "07")
     /* NEXT SENTENCE*/
  else
    if (CLJREC.XWHCD in XWHTBL.XWHCD) /* check for customer in same state*/
      KL0FW-RPS-PARM-REC.XXXZIP = XWHTBL.XXXZIP[sysVar.arrayIndex];
      CL0FW01.CL0FW-DEADLOCK-FLAG = "Y";
      CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
      while (CL0FW01.CL0FW-DEADLOCK-FLAG == "Y")
        KL0FS-RPS-PARM-REC();
      end

      if (CL0FW01.CL0FW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, SHOW MSG.*/
        return;
      end

      if (KL0FW-RPS-PARM-REC.KL0FW-RPS-ZIP-COUNT == 0) /* IF BAD ZIPCODE SET*/
        CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
        CL0FW01.CL0FW-RPS-MSG-NBR = 736;
        return;
      end
    end
  end


   /* DO ZIPCODE CHECK (ZIPCODE IN DCORP.VPARM101)*/

  set KL0FW-RPS-PARM-REC empty;


  if (KL0FM001.XCTCD[2] != "USA" /* if address not in 'usa' show message*/
   && KL0FM001.XCTCD[2] != "   ") /* 'USA' SOMETIMES SUPPRESSED*/
    CL0FW01.CL0FW-RPS-MSG-NBR = 725;
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
    return;
  end

  if (KL0FM001.XXXZIP[2] == " " /* IF ZIPCODE OR STATE NOT FOUND THEN*/
   || KL0FM001.XSTCD[2] == " ") /* NO VALID ADDRESS WAS FOUND*/
    CL0FW01.CL0FW-RPS-MSG-NBR = 724;
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    return;
  end

    /* TRY TO FIND THE CLAIM ADDRESS ZIPCODE ON RPS ZIPCODE TABLE*/

  KL0FW-RPS-PARM-REC.XXXZIP = KL0FM001.XXXZIP[2];
  CL0FW01.CL0FW-DEADLOCK-FLAG = "Y";
  CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
  while (CL0FW01.CL0FW-DEADLOCK-FLAG == "Y")
    KL0FS-RPS-PARM-REC();
  end

  if (CL0FW01.CL0FW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, SHOW MSG.*/
    return;
  end

  if (KL0FW-RPS-PARM-REC.KL0FW-RPS-ZIP-COUNT == 0) /* IF BAD ZIPCODE SET*/
    CL0FW01.CL0FW-RPS-MSG-NBR = 723;
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    return;
  end


   /* DO STATE (SHIPTO VS. WHSE STATE CODE) TEST*/

   /* IF CLJREC.XWHCD IN XWHTBL.XWHCD;  /* check for customer in same state*/
   /* IF KL0FM001.XSTCD(2) EQ XWHTBL.XSTCD(EZETST); /* as nike warehouse*/
   /* /* all nike rtn whse in 'or','tn',or 'nh'*/
   /* MOVE XWHTBL.XXXZIP(EZETST) TO CL0FW01.CL0FW-RPS-WHSE-ZIP;*/
   /* MOVE KL0FM001.XXXZIP(2) TO CL0FW01.CL0FW-RPS-CUST-ZIP;*/
   /* IF CL0FW01.CL0FW-RPS-CUST-ZIP IN KL17TBL.KL17TBL-RPS-CUST-ZIP;*/
   /* IF CL0FW01.CL0FW-RPS-WHSE-ZIP =*/
   /* KL17TBL.KL17TBL-RPS-WHSE-ZIP(EZETST);*/
   /* ; /* NEXT SENTENCE*/
   /* ELSE;*/
   /* MOVE 'N' TO CL0FW01.CL0FW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* MOVE 722 TO CL0FW01.CL0FW-RPS-MSG-NBR;*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* MOVE 'N' TO CL0FW01.CL0FW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* MOVE 722 TO CL0FW01.CL0FW-RPS-MSG-NBR;*/
   /* EZERTN;*/
   /* END;*/
   /* ELSE;*/
   /* ; /* NEXT SENTENCE*/
   /* END;*/
   /* else*/
   /* MOVE 701 TO CL0FW01.CL0FW-RPS-MSG-NBR;*/
   /* MOVE 'N' TO CL0FW01.CL0FW-RPS-QUALIFY-FL;/* RPS FLAG AND EXIT*/
   /* EZERTN;*/
   /* END;*/

   /* DO CHECK FOR RETAIL CUSTOMER*/
   /* CREDIT STATUS MUST BE BETWEEN 'A' AND 'H'*/
   /* IN-COLLECTION STATUS MUST BE = 'N'*/
   /* CREDIT RESPONSIBILITY MUST BE IN ('A','B','C','D','E','F','M')*/
   /* OR = 'KA'.*/
   /*  */

  set KUCREC empty;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  CL0FW01.CL0FW-DEADLOCK-FLAG = "Y";
  CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
  while (CL0FW01.CL0FW-DEADLOCK-FLAG == "Y")
    KL0FS-GET-CUST-REC();
  end
  if (CL0FW01.CL0FW-DEADLOCK-COUNT > 0) /* IF DEADLOCKED, EXIT AND SHOW*/
    return; /* MESSAGE*/
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* IF CUSTOMER RECORD NOT FOUND*/
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N"; /* RPS FLAG AND EXIT*/
    CL0FW01.CL0FW-RPS-MSG-NBR = 83;
    return;
  end

     /* EDIT ACCOUNT TYPE CODE*/

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XATCD[sysVar.arrayIndex] == "02"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "04"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "05"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "06"
     || XAUTBL.XATCD[sysVar.arrayIndex] == "01")
      if (KUCREC.XAUCD == "12"
       || KUCREC.XAUCD == "13"
       || KUCREC.XAUCD == "14"
       || KUCREC.XAUCD == "19"
       || KUCREC.XAUCD == "43"
       || KUCREC.XAUCD == "62"
       || KUCREC.XAUCD == "81"
       || KUCREC.XAUCD == "82"
       || KUCREC.XAUCD == "85"
       || KUCREC.XAUCD == "86"
       || KUCREC.XAUCD == "93")
        CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
        CL0FW01.CL0FW-RPS-MSG-NBR = 720;
        return;
      else
         /* NEXT SENTENCE*/
      end
    else
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      CL0FW01.CL0FW-RPS-MSG-NBR = 709;
      return;
    end
  else
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
    CL0FW01.CL0FW-RPS-MSG-NBR = 709;
    return;
  end


end // end KL0FS-RPS-HARD-EDT

// SELECT VPARM101 FOR RPS ZIPS
Function KL0FS-RPS-PARM-REC()
   /* ***********************************************************/
   /* *  SELECT THE DCORP.VPARM101 LINE FOR RPS ZIPCODES       **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-16-92  gdecke  created                             **/
   /* *  07-01-93  GDECKE  MOVE PARTIAL ZIPCODE IND TO SAVE FIELD*/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-RPS-PARM-REC"; /* set current process name*/


  set SQLCA empty; /* CLEAR SQL RECORD*/
  CL0FW01.CL0FW-RPS-PARTIAL-SVC-FL = " ";

  call "CL1080" ("SC", SQLCA, KL0FW-RPS-PARM-REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";

     /* NOW CHECK TO RETURNED PARTIAL SERVICE ZIPCODE FLAG:*/
     /* IF = 'Y' THE RPS ZIPCODE IS IN PARTIAL ZIPCODE SERVICE AREA.*/

    CL0FW01.CL0FW-RPS-PARTIAL-SVC-FL = KL0FW-RPS-PARM-REC.KL0FW-RPS-PART-ZIP-IND;

    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = CL0FW01.CL0FW-DEADLOCK-COUNT + 1;
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0FS-RPS-PARM-REC"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "CL1080"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCORP "; /* DATABASE*/
  TA1REC.TA1TBLVU = "VPARM101"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0FS-RPS-PARM-REC

// CAN CUSTOMER USE RPS?
Function KL0FS-RPS-SOFT-EDT()
   /* ***********************************************************/
   /* * DETERMINE WHETHER THE CUSTOMER QUALIFIES FOR USING RPS **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  02-14-92  gdecke  created                             **/
   /* *  10-16-92  sgorga  corrected process name.             **/
   /* *  07-02-93  GDECKE  ADD RPS PARTIAL ZIPCODE SERVICE EDIT**/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-RPS-SOFT-EDT"; /* set current process name*/
  CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";

   /* DO COMPANY SELF-EXCLUSION CHECK*/

  KL0FS-RPS-EXCLUDE();
  if (CL0FW01.CL0FW-FOUND-CO-STOR == "Y")
    if (CL0FW01.CL0FW-RPS-WARN-EXCL != "Y")
      CL0FW01.CL0FW-RPS-WARN-EXCL = "Y";
      CL0FW01.CL0FW-RPS-MSG-NBR = 728;
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      return;
    end
  end


   /* DO claim reason nike-pay-freight edit*/

  if (CLAREC.YCRCD in YCRTBL.YCRCD)
    if (YCRTBL.YCR-NPAY-FRGT-FL[sysVar.arrayIndex] != "Y")
      if (CL0FW01.CL0FW-RPS-WARN-RSN != "Y")
        CL0FW01.CL0FW-RPS-WARN-RSN = "Y";
        CL0FW01.CL0FW-RPS-MSG-NBR = 702;
        CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
        return;
      end
    end
  end



   /* DO return authorization header nike-pay-freight edit*/

  if (CLJREC.YCR-NPAY-FRGT-FL == "N")
    if (CL0FW01.CL0FW-RPS-WARN-NPAY != "Y")
      CL0FW01.CL0FW-RPS-WARN-NPAY = "Y";
      CL0FW01.CL0FW-RPS-MSG-NBR = 704;
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      return;
    end
  end


   /* IF FOOTWEAR AND ITEM COUNT > 300 OR APPAREL AND ITEM COUNT*/
   /* > 600 SHOW WARING MESSAGE*/

  if (CLAREC.XGPCD == "02"
   && CLJREC.CLJTATHQ > 150)
    if (CL0FW01.CL0FW-RPS-WARN-QTY != "Y")
                                  /* SHOW THE FYI MESSAGE*/
      CL0FW01.CL0FW-RPS-WARN-QTY = "Y";
      CL0FW01.CL0FW-RPS-MSG-NBR = 708;
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      return;
    end
  end

  if (CLAREC.XGPCD == "03"
   && CLJREC.CLJTATHQ > 600)
    if (CL0FW01.CL0FW-RPS-WARN-QTY != "Y")
                                  /* SHOW THE FYI MESSAGE*/
      CL0FW01.CL0FW-RPS-WARN-QTY = "Y";
      CL0FW01.CL0FW-RPS-MSG-NBR = 708;
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      return;
    end
  end

   /* CHECK FOR PARTIAL ZIPCODE SERVICE AREA - SHOW WARNING MESSAGE*/

  if (CL0FW01.CL0FW-RPS-PARTIAL-SVC-FL == "Y")
    if (CL0FW01.CL0FW-RPS-WARN-PART-SVC != "Y")
      CL0FW01.CL0FW-RPS-WARN-PART-SVC = "Y";
      CL0FW01.CL0FW-RPS-MSG-NBR = 747;
      CL0FW01.CL0FW-RPS-QUALIFY-FL = "N";
      return;
    end
  end


     /* PASSED ALL THE EDITS - CUSTOMER CAN USE RPS PREPAID SHIPPING*/

  CL0FW01.CL0FW-RPS-QUALIFY-FL = "Y";

end // end KL0FS-RPS-SOFT-EDT

// HANDLE RPS IN UPDATE MODE
Function KL0FS-RPS-UPDATE()
   /* ***********************************************************/
   /* *  HANDLE PROCESSING OF RPS DATA IN UPDATE MODE.         **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  04-01-92  gdecke  created                             **/
   /* * 12/02/92 lgross broke kl0fm-rps-title into 2 parts 1&2 **/
   /* * 07/02/93 GDECKE  RESET RPS WARNING FLAG IF ZIP CHANGED.**/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-RPS-UPDATE  "; /* set current process name*/

  set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* INITIALIZE RPT*/
  set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* INITIALIZE RPT*/
  set KL0FM001.CL-RPS-LABL-FL initialAttributes; /* ATTRIBUTES*/

    /* IF THE RPS FLAG ON THE MAP IS NOT THE SAME AS THE ONE*/
    /* ON THE CLJREC (RA HEADER) THEN TURN ON THE FLAG THAT INDICATES*/
    /* THAT FIELDS WERE CHANGED.*/

  if (KL0FM001.CL-RPS-LABL-FL != CLJREC.CL-RPS-LABL-FL)
    CL0FW01.CL0FWTCF = "Y";
  end

  if (KL0FM001.CL-RPS-LABL-FL == "N") /* if 'n' entered or default of*/
    return; /* 'n' accepted - no edits needed*/
  end


   /* IF KL0FM001.CL-RPS-LABL-FL = ' '; /* if rps is still blank then*/
   /* MOVE 'Y' TO CL0FW01.CL0FW-RPS-QUALIFY-FL;*/
   /* MOVE 0 TO CL0FW01.CL0FW-RPS-MSG-NBR;*/
   /* KL0FS-RPS-HARD-EDT;             /* find a default value*/
   /* IF CL0FW01.CL0FW-RPS-QUALIFY-FL = 'Y';*/
     /* KL0FS-RPS-SOFT-EDT;*/
   /* END;*/
   /* IF CL0FW01.CL0FW-RPS-QUALIFY-FL = 'Y';*/
     /* MOVE 'Y' TO KL0FM001.CL-RPS-LABL-FL;*/
     /* SET KL0FM001.CL-RPS-LABL-FL MODIFIED;*/
   /* ELSE;*/
     /* MOVE 'N' TO KL0FM001.CL-RPS-LABL-FL;*/
     /* SET KL0FM001.CL-RPS-LABL-FL MODIFIED;*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/

     /* RESET WARNING SHOWN STATUS FLAGS TO SPACES IF THE ZIPCODE*/
     /* HAS BEEN CHANGED.*/
   /* IF KL0FM001.XXXZIP(2) IS MODIFIED;*/
    /* MOVE ' ' TO CL0FW01.CL0FW-RPS-WARN-QTY;*/
    /* MOVE ' ' TO CL0FW01.CL0FW-RPS-WARN-EXCL;*/
    /* MOVE ' ' TO CL0FW01.CL0FW-RPS-WARN-RSN;*/
    /* MOVE ' ' TO CL0FW01.CL0FW-RPS-WARN-NPAY;*/
    /* MOVE ' ' TO CL0FW01.CL0FW-RPS-WARN-PART-SVC;*/
   /* END;*/

  if (KL0FM001.CL-RPS-LABL-FL == "Y") /* if rps = 'y' was entered:*/
    CL0FW01.CL0FW-RPS-QUALIFY-FL = "Y";
    CL0FW01.CL0FW-RPS-MSG-NBR = 0;
    KL0FS-RPS-HARD-EDT(); /* find a default value*/
    if (CL0FW01.CL0FW-RPS-QUALIFY-FL == "N")
      KL0FM001.CL-RPS-LABL-FL = "N";
      if (CL0FW01.CL0FW-RPS-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(CL0FW01.CL0FW-RPS-MSG-NBR);
      end
      CLXREC.CLXERRF = "Y";
      set KL0FM001.CL-RPS-LABL-FL cursor, modified, bold;
    else
      if (CLJREC.CL-RPS-LABL-FL == "Y") /* if rps flag is already set to 'y'*/
        return; /* do not repeat edits*/
      else
        KL0FS-RPS-SOFT-EDT();
        if (CL0FW01.CL0FW-RPS-QUALIFY-FL == "N")
          KL0FM001.CL-RPS-LABL-FL = "N";
          if (CL0FW01.CL0FW-RPS-MSG-NBR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(CL0FW01.CL0FW-RPS-MSG-NBR);
          end
          CLXREC.CLXERRF = "Y";
          set KL0FM001.CL-RPS-LABL-FL cursor, modified, bold;
          return; /* do not repeat edits*/
        end
      end
    end
    return; /* do not repeat edits*/
  end



    /* if still in this routine - the rps flag is invalid*/

  converseLib.validationFailed(703);
  CLXREC.CLXERRF = "Y";
  KL0FM001.CL-RPS-LABL-FL = "?";
  set KL0FM001.KL0FM-RPS-TITLE1 initialAttributes; /* INITIALIZE RPT*/
  set KL0FM001.KL0FM-RPS-TITLE2 initialAttributes; /* INITIALIZE RPT*/
  set KL0FM001.CL-RPS-LABL-FL cursor, modified, bold;

      /* END OF STATEMENT GROUP KL0FS-RPS-UPDATE*/

end // end KL0FS-RPS-UPDATE

// take shipto name from consumer
Function KL0FS-SHIP-NM()
   /* ***************************************************************/
   /* this will take the name from the consumer if entered and use*/
   /* it as the shipto nameafter it has been combined in kl0fs-*/
   /* form-nm*/
   /* 12-3-92  lgross        created*/
   /* ****************************************************************/
  if (KL0FM001.XXX-FRST-NM > " " /* if first name entered*/
   && CL0FW01.CL0FWCM == "Y")    /* and consumer name field has been changed*/
    KL0FS-FORM-NM(); /* reformat name to one field*/
    KL0FM001.XXXADDR[2] = KL0FW02.KL0FW-FULL-NM; /* reformatted field*/
    set KL0FM001.XXXADDR[2] modified;
    CL0FW01.CL0FWA2M = "Y"; /* mark shiprec field changed*/
  end
end // end KL0FS-SHIP-NM

// insert or delete phone nbr
Function KL0FS-UPDT-PHN-NBR()
   /* *************************************************************/

   /* add or delete/add cust phone nbr (clgrec)*/

    /* Maintenance History:*/
    /* 09-03-91 CHELLM Created.*/
    /* 12-2-92  lgross  write record to vclaim.dmact01 when*/
    /* updating or adding a phone number*/

   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0FS-UPDT-PHN-NBR"; /* set current proc name*/

  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "T";
  CLGREC.CLGCMSEQ = 1;

   /* INQUIRE TO SEE IF TELEPHONE NUMBER ALREADY  EXISTS*/
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* telephone number already exists so delete it*/
    call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* add clgrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
         /* telephone number already exists so delete it*/
    else
      TA1REC.TA1LOCAT[2] = "CL0FS-UPDT-PHN-NBR"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "CL0FS-UPDT-PHN-NBR"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


  if (CL0FW01.CL0FW-PHONE-NUMBER == " ") /* IF USER IS DELETING THE PHN NBR*/
    KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
    return; /* DON'T ADD A TABLE ROW*/
  end

  CLGREC.XXXUSRID = " ";
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLGREC.ZZZCHGCT = 0;
  CLGREC.CLGCOMNT = CL0FW01.CL0FW-PHONE-NUMBER;

  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* upd clgrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CL0FW01.CL0FWUOK = "N";
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0FS-UPDT-PHN-NBR"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0FS-UPDT-PHN-NBR

// UPDATE RETURN AUTH HEADER REC.
Function KL0FS-UPDT-RA-HDR()
   /* ***********************************************************/
   /* *  UPDATE THE DCLAIM.VRAHDR01 LINE WITH NEW RPS FLAG     **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-16-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0FS-UPDT-RA-HDR "; /* set current process name*/


  set SQLCA empty; /* CLEAR SQL RECORD*/

  CLJREC.ZZZCHGDT = CLXREC.XXXCDTE; /* update zz-family*/
  CLJREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = 0;
    CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
    return;
  end


  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0FW01.CL0FW-DEADLOCK-COUNT = CL0FW01.CL0FW-DEADLOCK-COUNT + 1;
    if (CL0FW01.CL0FW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0FW01.CL0FW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0FS-GET-RA-HDR"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO1270"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
  TA1REC.TA1TBLVU = "VRAHDR01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0FS-UPDT-RA-HDR

// check if dmact01 rec needed
Function KL0FS-WRIT-DM()
   /* ****************************************************************/
   /* if this a direct market record, need to write out a tag      **/
   /* record to dclaim.vdmact01 whenever inspection is record is   **/
   /* updated.                                                     **/
   /* 11-24-92 lgross          creation                            **/
   /* 01-26-93 bcourt change proc to sgrp:get-acct-                **/
   /* 02-08-93 bcourt Use consumer account to decide activity log. **/
   /* ****************************************************************/

  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID /* if consumer account*/
   && KL14TBL.XXX-STAT == "A")           /* and active*/
    KL0FS-WRIT-DM-REC(); /* log activity to pass to unix.*/
  end
end // end KL0FS-WRIT-DM

// update dmact01
Function KL0FS-WRIT-DM-REC()
   /* *******************************************************************/
   /* * THIS STATEMENT GROUP WILL WRITE OUT A RECORD TO DCLAIM.VCMACT01**/
   /* * EVERY TIME A RECORD IS ADDED OR UPDATED on dclaim.vcladr01,    **/
   /* * dclaim.vclcom01 or dclaim.cnsmr01.                             **/
   /* *12-02-92  lgross   creation                                     **/
   /* *******************************************************************/
  if (CL0FW01.KL0FW-DM-UPD-FL == "Y")
    return;
  else
    CL0FW01.KL0FW-DM-UPD-FL = "Y";
  end
  set VDMACT01 empty;
  set SQLCA empty;

  VDMACT01.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  VDMACT01.CLLRTNNB = 0; /* return number*/
  VDMACT01.CL2ISNBR = 0; /* inspection number*/
  VDMACT01.XXXPGMNB = "KL0F";
  VDMACT01.XXXSTAT = "A";
  VDMACT01.ZZZSDT = CLXREC.XXXCDTE; /* date of setup*/
  VDMACT01.ZZZSTM = CLXREC.XXXCHHMM; /* time of setup*/

  call "IO0870" ("A ", SQLCA, VDMACT01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* update ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING VDMACT01";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VDMACT01";
      TA1REC.TA1LOCAT[2] = "KL0FS-WRIT-DM-REC";
      XPCL010();
    end
  end
end // end KL0FS-WRIT-DM-REC

// save map fields for comparing
Function KL0FS30()
      /* *********************************************************/
      /* * this statement group saves the map fields to compare **/
      /* * to later instead of checking for modified fields     **/
      /* *********************************************************/
   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* ------------------------------------------------------------**/
   /* CHNG#   DATE    PGMR    DESCRIPTION                        **/
   /* ------------------------------------------------------------**/
   /* #0   01/16/91  GDECKE  ADD RPS LOGIC                      **/
   /* ------------------------------------------------------------**/

  CL0FW01.XXXADDR[1] = KL0FM001.XXXADDR[1];

  CL0FW01.XXXADDR1[1] = KL0FM001.XXXADDR1[1];

  CL0FW01.XXXADDR2[1] = KL0FM001.XXXADDR2[1];

  CL0FW01.XXXADDR3[1] = KL0FM001.XXXADDR3[1];

  CL0FW01.XXXCITY[1] = KL0FM001.XXXCITY[1];

  CL0FW01.XSTCD[1] = KL0FM001.XSTCD[1];

  CL0FW01.XXXZIP[1] = KL0FM001.XXXZIP[1];

  CL0FW01.XCTCD[1] = KL0FM001.XCTCD[1];


  CL0FW01.CLASHPFF = KL0FM001.CLASHPFF;

  CL0FW01.KUMSHAID = KL0FM001.KUMSHAID;

  CL0FW01.XXXADDR[2] = KL0FM001.XXXADDR[2];

  CL0FW01.XXXADDR1[2] = KL0FM001.XXXADDR1[2];

  CL0FW01.XXXADDR2[2] = KL0FM001.XXXADDR2[2];

  CL0FW01.XXXADDR3[2] = KL0FM001.XXXADDR3[2];

  CL0FW01.XXXCITY[2] = KL0FM001.XXXCITY[2];

  CL0FW01.XSTCD[2] = KL0FM001.XSTCD[2];

  CL0FW01.XXXZIP[2] = KL0FM001.XXXZIP[2];

  CL0FW01.XCTCD[2] = KL0FM001.XCTCD[2];

  CL0FW01.CL-RPS-LABL-FL = KL0FM001.CL-RPS-LABL-FL;


  CL0FW01.CLARTNFF = KL0FM001.CLARTNFF;

  CL0FW01.XXXADDR[3] = KL0FM001.XXXADDR[3];

  CL0FW01.XXXADDR1[3] = KL0FM001.XXXADDR1[3];

  CL0FW01.XXXADDR2[3] = KL0FM001.XXXADDR2[3];

  CL0FW01.XXXADDR3[3] = KL0FM001.XXXADDR3[3];

  CL0FW01.XXXCITY[3] = KL0FM001.XXXCITY[3];

  CL0FW01.XSTCD[3] = KL0FM001.XSTCD[3];

  CL0FW01.XXXZIP[3] = KL0FM001.XXXZIP[3];

  CL0FW01.XCTCD[3] = KL0FM001.XCTCD[3];

end // end KL0FS30

// set modified fields modified
Function KL0FS60()
      /* *********************************************************/
      /* * this statement group sets modified fields modified   **/
      /* * 12-02-92 lgross added xxx-last-nm, xxx-frst-nm, xxx- **/
      /* *          mid-init                                    **/
      /* *********************************************************/

  if (KL0FM001.CLASHPFF is modified)
    set KL0FM001.CLASHPFF modified;
  end

  if (KL0FM001.KUMSHAID is modified)
    set KL0FM001.KUMSHAID modified;
  end

  if (KL0FM001.CLARTNFF is modified)
    set KL0FM001.CLARTNFF modified;
  end

  if (KL0FM001.XXX-FRST-NM is modified)
    set KL0FM001.XXX-FRST-NM modified;
  end

  if (KL0FM001.XXX-MID-INIT is modified)
    set KL0FM001.XXX-MID-INIT modified;
  end

  if (KL0FM001.XXX-LAST-NM is modified)
    set KL0FM001.XXX-LAST-NM modified;
  end

  if (KL0FM001.CL0FM-PHONE-AREA-CD is modified)
    set KL0FM001.CL0FM-PHONE-AREA-CD modified;
  end

  if (KL0FM001.CL0FM-PHONE-PREFIX is modified)
    set KL0FM001.CL0FM-PHONE-PREFIX modified;
  end

  if (KL0FM001.CL0FM-PHONE-SUFFIX is modified)
    set KL0FM001.CL0FM-PHONE-SUFFIX modified;
  end

  if (KL0FM001.XXXADDR[2] is modified)
    set KL0FM001.XXXADDR[2] modified;
  end

  if (KL0FM001.XXXADDR1[2] is modified)
    set KL0FM001.XXXADDR1[2] modified;
  end

  if (KL0FM001.XXXADDR2[2] is modified)
    set KL0FM001.XXXADDR2[2] modified;
  end

  if (KL0FM001.XXXADDR3[2] is modified)
    set KL0FM001.XXXADDR3[2] modified;
  end

  if (KL0FM001.XXXCITY[2] is modified)
    set KL0FM001.XXXCITY[2] modified;
  end

  if (KL0FM001.XSTCD[2] is modified)
    set KL0FM001.XSTCD[2] modified;
  end

  if (KL0FM001.XXXZIP[2] is modified)
    set KL0FM001.XXXZIP[2] modified;
  end

  if (KL0FM001.XCTCD[2] is modified)
    set KL0FM001.XCTCD[2] modified;
  end


  if (KL0FM001.CL-RPS-LABL-FL is modified)
    set KL0FM001.CL-RPS-LABL-FL modified;
  end



  if (KL0FM001.XXXADDR[3] is modified)
    set KL0FM001.XXXADDR[3] modified;
  end

  if (KL0FM001.XXXADDR1[3] is modified)
    set KL0FM001.XXXADDR1[3] modified;
  end

  if (KL0FM001.XXXADDR2[3] is modified)
    set KL0FM001.XXXADDR2[3] modified;
  end

  if (KL0FM001.XXXADDR3[3] is modified)
    set KL0FM001.XXXADDR3[3] modified;
  end

  if (KL0FM001.XXXCITY[3] is modified)
    set KL0FM001.XXXCITY[3] modified;
  end

  if (KL0FM001.XSTCD[3] is modified)
    set KL0FM001.XSTCD[3] modified;
  end

  if (KL0FM001.XXXZIP[3] is modified)
    set KL0FM001.XXXZIP[3] modified;
  end

  if (KL0FM001.XCTCD[3] is modified)
    set KL0FM001.XCTCD[3] modified;
  end

end // end KL0FS60

// edit/save address changes
Function KL0FS72()
    /* kl0fs72 - edit/save address changes*/
    /* *********************************************************/
    /* * this statement group edits the bill to name/addr.    **/
   /* **************************************************************/
   /* M A I N T E N A N C E    H I S T O R Y    L O G          **/
   /* ------------------------------------------------------------**/
   /* DATE   PGMR    DESCRIPTION                               **/
   /* ------------------------------------------------------------**/
   /* 07-20-93 GDECKE  CORRECT LOGIC STRUCTURE OF COUNTRY EDIT   **/
   /* 03-11-94 BCOURT  Rename CLFREC.xxxaddrn to xxx-addrn.      **/
   /* NOTE Keep map names as xxxaddrn since they're 30 chars. **/
   /* FYI names xxx-addrn (with the '-') are defined 38 chars.**/
   /* Order, Invoicing, Claims all use just 30 chars.         **/
   /* **************************************************************/


      /* validate required entries*/


      /* set default country code if null*/

  if (KL0FM001.XCTCD[CL0FWAX] == " " /* null?*/
   || KL0FM001.XCTCD[CL0FWAX] == "USA") /* null?*/
    KL0FM001.XCTCD[CL0FWAX] = "USA";
  end


      /* edit country code*/

  if (KL0FM001.XCTCD[CL0FWAX] in XCTTBL.XCTCD) /* valid code*/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* active status*/
      converseLib.validationFailed(380); /* country code is not valid*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      KL0FM001.XCTDESC[CL0FWAX] = " "; /* cntry cd desc*/
      set KL0FM001.XCTCD[CL0FWAX] cursor, modified, bold;
    else
      if (KL0FM001.XCTCD[CL0FWAX] != "USA")
        if (KL0FM001.XSTCD[CL0FWAX] == " ")
          KL0FM001.XCTDESC[CL0FWAX] = XCTTBL.XCTDESC[sysVar.arrayIndex];
        else
          if (KL0FM001.XSTCD[CL0FWAX] in XSTTBL.XSTCD /* valid code*/
           && XSTTBL.XXXSTAT == "A")                  /* active status*/
            KL0FM001.XCTCD[CL0FWAX] = "USA";
          else
            converseLib.validationFailed(385); /* state code is not valid if not usa*/
            CLXREC.CLXERRF = "Y"; /* set error flag*/
            set KL0FM001.XSTCD[CL0FWAX] cursor, modified, bold;
          end
        end
      else
        KL0FM001.XCTDESC[CL0FWAX] = " "; /* cntry cd desc*/
      end
    end
  else
    converseLib.validationFailed(380); /* country code is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    KL0FM001.XCTDESC[CL0FWAX] = " "; /* cntry cd desc*/
    set KL0FM001.XCTCD[CL0FWAX] cursor, modified, bold;
  end


      /* if usa, then zip is required*/

  if (KL0FM001.XCTCD[CL0FWAX] == "USA")
    if (KL0FM001.XXXZIP[CL0FWAX] <= "00000     " /* zip*/
     || KL0FM001.XXXZIP[CL0FWAX] <= "000000    " /* zip*/
     || KL0FM001.XXXZIP[CL0FWAX] <= "0000000   " /* zip*/
     || KL0FM001.XXXZIP[CL0FWAX] <= "00000000  " /* zip*/
     || KL0FM001.XXXZIP[CL0FWAX] <= "000000000 " /* zip*/
     || KL0FM001.XXXZIP[CL0FWAX] <= "0000000000") /* zip*/
      converseLib.validationFailed(381); /* zip code not valid*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      set KL0FM001.XXXZIP[CL0FWAX] cursor, modified, bold;
    end
  end


    /* edit state code if usa*/

  if (KL0FM001.XCTCD[CL0FWAX] == "USA")
    if (KL0FM001.XSTCD[CL0FWAX] in XSTTBL.XSTCD /* valid code*/
     && XSTTBL.XXXSTAT == "A")                  /* active status*/
       /* next sentence*/
    else
      converseLib.validationFailed(382); /* state code is not valid*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      set KL0FM001.XSTCD[CL0FWAX] cursor, modified, bold;
    end
  end


      /* city is required*/

  if (KL0FM001.XXXCITY[CL0FWAX] == " ")
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0FM001.XXXCITY[CL0FWAX] cursor, modified, bold;
  end


      /* at least one address line is required*/

  if (KL0FM001.XXXADDR1[CL0FWAX] == " " /* null?*/
   && KL0FM001.XXXADDR2[CL0FWAX] == " " /* null?*/
   && KL0FM001.XXXADDR3[CL0FWAX] == " ") /* null?*/
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0FM001.XXXADDR1[CL0FWAX] cursor, modified, bold;
    set KL0FM001.XXXADDR2[CL0FWAX] modified, bold;
    set KL0FM001.XXXADDR3[CL0FWAX] modified, bold;
  end


      /* name is required*/

  if (KL0FM001.XXXADDR[CL0FWAX] == " ") /* null?*/
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0FM001.XXXADDR[CL0FWAX] cursor, modified, bold;
  end


     /* get out if error*/

  if (CLXREC.CLXERRF == "Y") /* if error, get out*/
    if (KL0FM001.XCTCD[CL0FWAX] == "USA") /* if usa, then*/
      KL0FM001.XCTCD[CL0FWAX] = " "; /* clear country code*/
      KL0FM001.XCTCD[CL0FWAX] = " "; /* clear country code desc*/
      return; /* get out*/
    else
      return; /* get out*/
    end
  end


    /* set flags and format addr record*/

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADNM = KL0FM001.XXXADDR[CL0FWAX]; /* bill to name*/
  CLFREC.XXX-ADDR1 = KL0FM001.XXXADDR1[CL0FWAX]; /* bill to addr 1*/
  CLFREC.XXX-ADDR2 = KL0FM001.XXXADDR2[CL0FWAX]; /* bill to addr 2*/
  CLFREC.XXX-ADDR3 = KL0FM001.XXXADDR3[CL0FWAX]; /* bill to addr 3*/
  CLFREC.XXXCITY = KL0FM001.XXXCITY[CL0FWAX]; /* bill to city*/
  CLFREC.XSTCD = KL0FM001.XSTCD[CL0FWAX]; /* bill to state*/
  CLFREC.XXXZIP = KL0FM001.XXXZIP[CL0FWAX]; /* bill to zip*/
  CLFREC.XCTCD = KL0FM001.XCTCD[CL0FWAX]; /* bill to country*/
  if (CL0FW01.CL0FWAX == 1) /* if bill-to address*/
    CLFREC.CLFADTYP = "B";
    CL0FW01.CL0FWBTA = CLFREC.CLFGROUP;
  else
    if (CL0FW01.CL0FWAX == 2) /* if ship-to address*/
      CLFREC.CLFADTYP = "S";
      CL0FW01.CL0FWSTA = CLFREC.CLFGROUP;
    else
      if (CL0FW01.CL0FWAX == 3) /* if return-to address*/
        CLFREC.CLFADTYP = "R";
        CL0FW01.CL0FWRTA = CLFREC.CLFGROUP;
      end
    end
  end


  if (converseVar.eventKey is pf12)
     /* next sentence - the fields need to stay modified to be*/
     /* updated on the next converse*/
  else
    set KL0FM001.XXXADDR[CL0FWAX] normal;
    set KL0FM001.XXXADDR1[CL0FWAX] normal;
    set KL0FM001.XXXADDR2[CL0FWAX] normal;
    set KL0FM001.XXXADDR3[CL0FWAX] normal;
    set KL0FM001.XXXCITY[CL0FWAX] normal;
    set KL0FM001.XSTCD[CL0FWAX] normal;
    set KL0FM001.XXXZIP[CL0FWAX] normal;
    set KL0FM001.XCTCD[CL0FWAX] normal;
  end



    /* clear country code in map if usa*/

  if (KL0FM001.XCTCD[CL0FWAX] == "USA")
    KL0FM001.XCTCD[CL0FWAX] = " "; /* clear country code*/
    KL0FM001.XCTDESC[CL0FWAX] = " "; /* clear country code desc*/
  end



   /* *************************************************************/
end // end KL0FS72

// edit ship to addr txt modified
Function KL0FS73()
      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the ship to address and id.                      **/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0FS73"; /* set current process name*/


  KL0FS79(); /* if text on screen was changed, set cl0fwacf to 'y'*/

    /* if CL0FWTCF eq 'n' then we will flow on an 'enter'*/
    /* otherwise the screen will be redisplayed*/

  if (CL0FW01.CL0FWACF == "N")
    if (KL0FM001.CLASHPFF == CL0FW01.CLASHPFF
     && KL0FM001.KUMSHAID == CL0FW01.KUMSHAID)
      /* next sentence - nothing was changed on the screen*/
    else
      CL0FW01.CL0FWTCF = "Y"; /* something was changed on the screen*/
    end
  else
    CL0FW01.CL0FWTCF = "Y"; /* something was changed on the screen*/
  end


   /* check to make sure only one of the 3 possible values*/
   /* was changed*/

  if (CL0FWTCF == "Y")
    KL0FS77();
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end



     /* is clashpff valid*/

  if (KL0FM001.CLASHPFF != " ")
    if (KL0FM001.CLASHPFF == "I"
     || KL0FM001.CLASHPFF == "C")
       /* SET CL0FM001.CLASHPFF DEFINED;*/
    else
      if (KL0FM001.CLASHPFF == "E")
        if (KL0FM001.CLASHPFF not modified)
          /* next sentence*/
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(386); /* ship from flag may only be entered as*/
                                   /* 'i' or 'c'*/
          set KL0FM001.CLASHPFF cursor, modified, bold;
          return;
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(145); /* invalid ship from flag*/
        set KL0FM001.CLASHPFF cursor, modified, bold;
        return;
      end
    end
  end

       /* is kumshaid valid*/

  if (KL0FM001.KUMSHAID != 0
   && KL0FM001.KUMSHAID <= 0)
    converseLib.validationFailed(149); /* invalid customer address id*/
    set KL0FM001.KUMSHAID cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    return;
  else
    set KL0FM001.KUMSHAID initialAttributes;
  end

    /* if address text changed*/
      /* edit text*/
      /* move 'e'ntered to claim header for shipto default*/
    /* else*/
      /* check if value in customer ship-to was modified*/
      /* if it wasn't then read store address kulrec for address*/
      /* edit text*/

  if (CL0FW01.CL0FWACF == "Y")
    KL0FS72(); /* process addr text change*/
    KL0FM001.CLASHPFF = "E"; /* text was entered*/
  else
    KL0FS76(); /* get default values*/
  end

end // end KL0FS73

// Edit/Save Consumer Name
Function KL0FS74()

   /* *************************************************************/
   /* * This statement group edits the consumer name field       **/
   /* * 12-02-92 lgross    changed name to xxx-last-nm           **/
   /* *************************************************************/

  if (KL0FM001.XXX-LAST-NM == " ") /* spaces are not valid*/
    converseLib.validationFailed(21); /* required field*/
    set KL0FM001.XXX-LAST-NM cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    CL0FW01.CL0FWCNM = KL0FM001.XXX-LAST-NM;
  end

end // end KL0FS74

// edit return to addr text
Function KL0FS75()
      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the return to address and id.*/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0FS75"; /* set current process name*/

     /* is clartnff valid*/
  if (KL0FM001.CLARTNFF != CL0FW01.CLARTNFF)
    if (KL0FM001.CLARTNFF == "S"
     || KL0FM001.CLARTNFF == " "
     || KL0FM001.CLARTNFF == "E")
       /* next sentence*/
    else
      converseLib.validationFailed(145); /* invalid default value*/
      CLXREC.CLXERRF = "Y";
      set KL0FM001.CLARTNFF cursor, modified, bold;
      return;
    end
  end

    /* if default entered*/
      /* check if return addr text modified*/
    /* else*/
      /* edit entered text*/

  if (KL0FM001.CLARTNFF != CL0FW01.CLARTNFF
   && KL0FM001.CLARTNFF != " ")
    KL0FS79(); /* edit for addr text modified*/
    if (CL0FW01.CL0FWACF == "Y")
      /* IF CL0FM001.XXXADNM(3) NE CL0FW01.XXXADNM(CL0FWAX);*/
        /* OR CL0FM001.XXXADDR1(3) NE CL0FW01.XXXADDR1(CL0FWAX);*/
        /* OR CL0FM001.XXXADDR2(3) NE CL0FW01.XXXADDR2(CL0FWAX);*/
        /* OR CL0FM001.XXXADDR3(3) NE CL0FW01.XXXADDR3(CL0FWAX);*/
        /* OR CL0FM001.XXXCITY(3) NE CL0FW01.XXXCITY(CL0FWAX);*/
        /* OR CL0FM001.XSTCD(3) NE CL0FW01.XSTCD(CL0FWAX);*/
        /* OR CL0FM001.XXXZIP(3) NE CL0FW01.XXXZIP(CL0FWAX);*/
        /* OR CL0FM001.XCTCD(3) NE CL0FW01.XCTCD(CL0FWAX);*/
      CLXREC.CLXERRF = "Y";
                        /* cannot enter defaults and address text*/
      converseLib.validationFailed(144);
      set KL0FM001.CLARTNFF cursor, modified, bold;
      return;
    else
      /* SET CL0FM001.CLARTNFF DEFINED; 11/07/88 take away modified*/
      CL0FW01.CL0FWTCF = "Y"; /* don't want to flow on 'enter'*/
      if (KL0FM001.CLARTNFF == "E") /* 9/21/88*/
        KL0FS72(); /* store return to addr9/21/88*/
      end /* 9/21/88*/
    end
  else
    KL0FS72(); /* process addr text change*/
    KL0FM001.CLARTNFF = "E"; /* set default for claim header*/
  end
end // end KL0FS75

// edit ship to addr id
Function KL0FS76()
      /* *********************************************************/
      /* * this statement group edits the ship to addr id       **/
   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* ------------------------------------------------------------**/
   /* CHNG#   DATE     PGMR     DESCRIPTION                      **/
   /* ------------------------------------------------------------**/
   /* #0     02/29/92  GDECKE   ADD RPS LOGIC                    **/
   /* #0     11/12/93  GDECKE   CHANGE KULREC.XXXADDR TO XXX-ADDR**/
   /* ------------------------------------------------------------**/
   /* **************************************************************/
  CLXREC.CLXCPROC = "CL0FS76"; /* set current process name*/

  if (KL0FM001.CLASHPFF is modified
   && KL0FM001.CLASHPFF == "I")
                                   /* don't need to look up value on kumrec*/
    return;
  end


  if (KL0FM001.CLASHPFF is modified
   && KL0FM001.CLASHPFF != " ")
    if (KL0FM001.CLASHPFF == "C")
      KUMREC.KUCCOID = CLAREC.KUCCOID;
      KUMREC.KUMSTRID = CLAREC.KUMSTRID;

      call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store rec*/

      if (SQLCA.VAGen_SQLCODE == 0)
        KULREC.KULAAID = KUMREC.KUMSHAID; /* load key*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(145); /* no customer record for this customer*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(4); /* DATABASE DEADLOCK*/
            return;
          else
            TA1REC.TA1DBASE = "DCUST";
            TA1REC.TA1TBLVU = "VSTORE01";
            TA1REC.TA1TBLKE = "GETTING STORE SELF-ID";
            XPCL010();
          end
        end
      end
    else
      return; /* clashpff = 'i' so we don't want defaults*/
    end
  else
     /* kumshaid was changed*/
    KULREC.KULAAID = KL0FM001.KUMSHAID; /* load key - ship to addr id*/
    KL0FM001.CLASHPFF = "E"; /* if customer default, shows as 'e'*/
  end



      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = CLAREC.KUCCOID; /* load key - cust co*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    XPCL010();
    /* MOVE KULREC.KULGRP TO TA1REC.TA1TBLKE; key value*/
    /* MOVE 'CL0FS76 ' TO TA1REC.TA1LOCAT(3); statement group*/
    /* MOVE 'XQKULI0 ' TO TA1REC.TA1LOCAT(4); i/o mod name*/
    /* CALL RESET                    ; invoke syncpoint rollback*/
    /* CALL TA0020 TA1REC,SQLCA (NONCSP     ; call abend formatter*/
    /* MOVE ' ' TO COMMAREA.CAUSERA  ; clear user commarea*/
    /* XSPF4                         ; invoke master menu*/
    /* EZECLOS;*/
  end


      /* if not found, then tell user*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(146);
                                   /* no ship-to addr record for desired id*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0FM001.KUMSHAID cursor, modified, bold;
    return;
  end


      /* save ship to addr id and set flags*/

   /* SET CL0FM001.KUMSHAID NORMAL;*/
   /* MOVE CL0FM001.KUMSHAID TO CL0FW01.KUMSHAID; save addr id*/


      /* format name and address on screen*/

  KL0FM001.KUMSHAID = KULREC.KULAAID; /* address id*/
  CL0FW01.KUMSHAID = KL0FM001.KUMSHAID; /* save addr id*/
  KL0FM001.XXXADDR[2] = CLWREC.KUCCONM; /* store name*/
  KL0FM001.XXXADDR1[2] = KULREC.XXX-ADDR1; /* addr line 1*/
  KL0FM001.XXXADDR2[2] = KULREC.XXX-ADDR2; /* addr line 2*/
  KL0FM001.XXXADDR3[2] = KULREC.XXX-ADDR3; /* addr line 3*/
  KL0FM001.XXXCITY[2] = KULREC.XXXCITY; /* city*/
  KL0FM001.XSTCD[2] = KULREC.XSTCD; /* state*/
  KL0FM001.XXXZIP[2] = KULREC.XXXZIP; /* zip*/
  KL0FM001.XCTCD[2] = " "; /* country code*/
  KL0FM001.XCTDESC[2] = " "; /* country code desc*/
  if (KULREC.XCTCD > " " /* country code present?*/
   && KULREC.XCTCD != "USA") /* and not equal u.s.a.*/
    KL0FM001.XCTCD[2] = KULREC.XCTCD; /* country code*/
    if (KULREC.XCTCD in XCTTBL.XCTCD)
      KL0FM001.XCTDESC[2] = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* country desc*/
    end
  end


  KL0FS72();


   /* *************************************************************/
end // end KL0FS76

// edit shipto values
Function KL0FS77()
      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the ship to address and id.                      **/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0FS77"; /* set current process name*/


  if (KL0FM001.CLASHPFF != " "
   /* if clashpff was the only value on map*/
   && KL0FM001.KUMSHAID == 0
   && CL0FW01.CL0FWACF == "N")
    return;
  end

  if (KL0FM001.KUMSHAID != 0 /* if kumshaid was the only value on map*/
   && KL0FM001.CLASHPFF == " "
   && CL0FW01.CL0FWACF == "N")
    return;
  end

  if (CL0FW01.CL0FWACF == "Y" /* if text was the only value on map*/
   && KL0FM001.KUMSHAID == 0  
   && KL0FM001.CLASHPFF == " ")
    return;
  end

   /* if the address text was changed, enter here*/

  if (CL0FW01.CL0FWACF == "Y")
    if (KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
     && KL0FM001.KUMSHAID == 0
     && KL0FM001.CLASHPFF != CL0FW01.CLASHPFF
     && KL0FM001.CLASHPFF == " ")
      return;
    else
      if (KL0FM001.KUMSHAID == CL0FW01.KUMSHAID
       && KL0FM001.CLASHPFF == CL0FW01.CLASHPFF)
        return;
      else
        if (KL0FM001.KUMSHAID == CL0FW01.KUMSHAID
         && KL0FM001.CLASHPFF != CL0FW01.CLASHPFF
         && KL0FM001.CLASHPFF == " ")
          return;
        else
          if (KL0FM001.CLASHPFF == CL0FW01.CLASHPFF
           && KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
           && KL0FM001.KUMSHAID == 0)
            return;
          else
            KL0FS78();
            return;
          end
        end
      end
    end
  end

  if (KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
   && KL0FM001.KUMSHAID != 0
   && KL0FM001.CLASHPFF != CL0FW01.CLASHPFF
   && KL0FM001.CLASHPFF == " ")
    return;
  end

  if (KL0FM001.CLASHPFF == CL0FW01.CLASHPFF
   && KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
   && KL0FM001.KUMSHAID > 0)
    return;
  end

  if (KL0FM001.CLASHPFF == " "
   && KL0FM001.KUMSHAID == 0
   && CL0FW01.CL0FWACF == "N")
    KL0FM001.CLASHPFF = CL0FW01.CLASHPFF;
    return;
  end

  if (KL0FM001.CLASHPFF != CL0FW01.CLASHPFF
   && KL0FM001.CLASHPFF != " "
   && KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
   && KL0FM001.KUMSHAID == 0)
    return;
  end

  if (KL0FM001.CLASHPFF != CL0FW01.CLASHPFF
   && KL0FM001.CLASHPFF != " "
   && KL0FM001.KUMSHAID == CL0FW01.KUMSHAID)
    return;
  end

   /* if we make it this far, there was an error on the screen*/
  KL0FS78();



   /* *************************************************************/
end // end KL0FS77

// edit ship to addr txt modified
Function KL0FS78()
      /* *********************************************************/
      /* * this statement group sets fields in error if more    **/
      /* * than one value was changed                           **/
      /* * when this group is entered, too many fields have been*/
      /* * changed.  so all fields that are changed are in error.*/
      /* * the messages are covered later due to the different*/
      /* * combinations of changes that could have been made.*/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0FS78"; /* set current process name*/


  if (CL0FW01.CL0FWACF == "Y")
    set KL0FM001.XXXADDR[2] cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
     /* only set first line in error*/
  end

  if (KL0FM001.KUMSHAID != CL0FW01.KUMSHAID)
    set KL0FM001.KUMSHAID cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end

  if (KL0FM001.CLASHPFF != CL0FW01.CLASHPFF)
    set KL0FM001.CLASHPFF cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end

  if (CL0FW01.CL0FWACF == "Y")
    if (KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
     || KL0FM001.CLASHPFF != CL0FW01.CLASHPFF)
      converseLib.validationFailed(144); /* can't enter default value and addresstext*/
      return;
    end
  end

  if (KL0FM001.KUMSHAID != CL0FW01.KUMSHAID
   && KL0FM001.CLASHPFF != CL0FW01.CLASHPFF)
    converseLib.validationFailed(148); /* can't enter ship from flag and*/
     /* customer address id*/
  end

   /* *************************************************************/
end // end KL0FS78

// check for text changes on map
Function KL0FS79()
      /* *********************************************************/
      /* * this statement group checks for changes in the       **/
      /* * address text area of the map                         **/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0FS79"; /* set current process name*/


   /* if the address text changed, set a flag*/

  if (KL0FM001.XXXADDR[CL0FWAX] != CL0FW01.XXXADDR[CL0FWAX]
   && KL0FM001.XXXADDR[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XXXADDR1[CL0FWAX] != CL0FW01.XXXADDR1[CL0FWAX]
   && KL0FM001.XXXADDR1[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XXXADDR2[CL0FWAX] != CL0FW01.XXXADDR2[CL0FWAX]
   && KL0FM001.XXXADDR2[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
  end

  if (KL0FM001.XXXADDR3[CL0FWAX] != CL0FW01.XXXADDR3[CL0FWAX]
   && KL0FM001.XXXADDR3[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XXXCITY[CL0FWAX] != CL0FW01.XXXCITY[CL0FWAX]
   && KL0FM001.XXXCITY[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XSTCD[CL0FWAX] != CL0FW01.XSTCD[CL0FWAX]
   && KL0FM001.XSTCD[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XXXZIP[CL0FWAX] != CL0FW01.XXXZIP[CL0FWAX]
   && KL0FM001.XXXZIP[CL0FWAX] != 0)
    CL0FW01.CL0FWACF = "Y";
    return;
  end

  if (KL0FM001.XCTCD[CL0FWAX] != CL0FW01.XCTCD[CL0FWAX]
   && KL0FM001.XCTCD[CL0FWAX] != " ")
    CL0FW01.CL0FWACF = "Y";
    return;
  end

   /* *************************************************************/
end // end KL0FS79

// build/write claim bill-to addr
Function KL0FS91()
   /* ************************************************************/
   /* *   build and write the claims bill-to address record     **/
   /* *  12-2-92 lgross write record to dclaim.vdmact01 when    **/
   /* *          address is added or updated                    **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0FS91"; /* set current process name*/


     /* delete an existing billto address record if there is one*/
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* ship-to address*/

  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get the change count*/

  if (SQLCA.VAGen_SQLCODE == 0 /* change count is now in the record*/
   || SQLCA.VAGen_SQLCODE == 100) /* there aren't any records out there already*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was there*/
    call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end



  CLFREC.CLFGROUP = CL0FW01.CL0FWBTA;
  CLFREC.CLFADTYP = "B"; /* ship-to address*/

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update record*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if record not currently on file*/
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      KL0FS-WRIT-DM(); /* write record to vclaim.vdmact01*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* if record updated*/
      KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
      return;
    end
  end




end // end KL0FS91

// build/write shipto addr record
Function KL0FS92()
   /* ************************************************************/
   /* *   build and write the claims ship-to address record     **/
   /* * 12-2-92 lgross write record to dclaim.vdmact01 when     **/
   /* *         address is added or updated                     **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0FS92"; /* set current process name*/

     /* delete an existing shipto address record if there is one*/
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/

  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get the change count*/

  if (SQLCA.VAGen_SQLCODE == 0 /* change count is now in the record*/
   || SQLCA.VAGen_SQLCODE == 100) /* there aren't any records out there already*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0) /* if record was there*/
    call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete it*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end


   /* if default value of 'I' (invoice) was entered only want*/
   /* to delete the record and not add another one*/

  if (KL0FM001.CLASHPFF == "I")
    return; /* default address will be used*/
  end



  CLFREC.CLFGROUP = CL0FW01.CL0FWSTA;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update it*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if record not currently on file*/
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* if update successful*/
      KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
      return;
    end
  end




end // end KL0FS92

// build/write return to addr rec
Function KL0FS93()
   /* ************************************************************/
   /* *   build and write the claims return-to address record   **/
   /* * 12-2-92 lgross write record to dclaim.vdmact01 when     **/
   /* *          address is updated or added                    **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0FS93"; /* set current process name*/


   /* delete an existing return-to address record if there is one*/
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "R"; /* ship-to address*/

  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get the change count*/

  if (SQLCA.VAGen_SQLCODE == 0 /* change count is now in the record*/
   || SQLCA.VAGen_SQLCODE == 100) /* there aren't any records out there already*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was there*/
    call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete it*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end


   /* if default value of 's' (ship-to address) is entered, only*/
   /* want to delete record on db and not add another one*/

  if (KL0FM001.CLARTNFF == "S"
   && KL0FM001.CLARTNFF != CL0FW01.CLARTNFF)
    return; /* default values will be used*/
  end



  CLFREC.CLFGROUP = CL0FW01.CL0FWRTA;
  CLFREC.CLFADTYP = "R"; /* ship-to address*/

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update it*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if record not currently on file*/
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* update worked*/
      KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
      return;
    end
  end


end // end KL0FS93

// update the claim header
Function KL0FS94()
   /* *************************************************************/
   /* *   update the claim header table*/
   /* *************************************************************/
   /* *   MAINTENANCE HISTORY                                    **/
   /* *                                                          **/
   /* * 01-04-90 sgorga  Renamed cl0fm001.kuablid to             **/
   /* *                  cl0fm001.kucblaid.                      **/
   /* * 02-15-91 CHELLM  Renamed CLAREC.KUABLID to KUCBLAID      **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0FS94"; /* set current process name*/


  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    XPCL010();
  end


  CLAREC.CLABLGFF = KL0FM001.CLABLGFF;
  CLAREC.KUCBLAID = KL0FM001.KUCBLAID; /* 2-15-91*/
  CLAREC.CLASHPFF = KL0FM001.CLASHPFF;
  CLAREC.KUMSHAID = KL0FM001.KUMSHAID;
  CLAREC.CLARTNFF = KL0FM001.CLARTNFF;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;


  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return*/
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "REPLACING CLA REC";
    XPCL010();
  end

end // end KL0FS94

// upd/insert consumer name rec
Function KL0FS95()
   /* ************************************************************/
   /* *   build and write the claims consumer name record       **/
   /* * 12-02-92 lgross update consumer record with xxx-last-nm,**/
   /* *          xxx-first-nm, xxx-mid-init                     **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0FS95"; /* set current process name*/

  call "IO1190" ("S ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1TBLKE = "READING CLD RECORD FOR UPDATE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCNSMR01";
      XPCL010();
    end
  end

  CLDREC.CLD3NM = CL0FW01.CLD3NM;
  CLDREC.CLD7NM = CL0FW01.CLD7NM;
  CLDREC.XXX-LAST-NM = KL0FM001.XXX-LAST-NM; /* move consumer name*/
  CLDREC.XXX-FRST-NM = KL0FM001.XXX-FRST-NM;
  CLDREC.XXX-MID-INIT = KL0FM001.XXX-MID-INIT;

  if (SQLCA.VAGen_SQLCODE == 0) /* we have a record*/
    call "IO1190" ("U ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* update record*/
  else
    call "IO1190" ("A ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* add record*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
    KL0FS-WRIT-DM(); /* write record to dclaim.vdmact01*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0FW01.CL0FWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLD RECORD TO TABLE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCNSMR01";
      XPCL010();
    end
  end


end // end KL0FS95

//*** RECORD=CL0FW01 ****
// ;*******************************************************
// ;*   M A I N T E N A N C     H I S T O R Y    L O G    *
// ;*-----------------------------------------------------*
// ;*   DATE    PGMR    DESCRIPTION                       *
// ;*-----------------------------------------------------*
// ;* 02-02-92  lgross  added kl0fw-dm-upd-fl             *
// ;* 07-01-93  GDECKE  ADDED Cl0FW-RPS-WHSE-ZIP, CUST-ZIP*
// ;* 07-03-93  jramos/gdecke added cl0fw-part-zip-msgno  *
// ;* 03-14-94  BCourt  Increase CL0FWBTA, STA & RTA to   *
// ;*                   match new CLFREC.CLFGROUP length  *
// ;*                   due to xxx-addr change 30 to 38.  *
// ;*******************************************************
// ***********************
Record CL0FW01 type basicRecord
  5 CL0FW1GP CL0FW1GP ; 
    10 CL0FWAX CL0FWAX ; 
    10 CL0FWSMF CL0FWSMF ; 
    10 CL0FWFLO CL0FWFLO ; 
    10 CL0FWUOK CL0FWUOK ; 
    10 CL0FW12K CL0FW12K ; 
    10 CL0FWTCF CL0FWTCF ; 
    10 CL0FWACF CL0FWACF ; 
    10 CL0FWCSN CL0FWCSN ; 
    10 CL0FWCNM CL0FWCNM ; 
      15 CLD3NM CLD3NM ; 
      15 CLD7NM CLD7NM ; 
    10 CL0FWA1M CL0FWA1M ; 
    10 CL0FWA2M CL0FWA2M ; 
    10 CL0FWA3M CL0FWA3M ; 
    10 CL0FWCM CL0FWCM ; 
    10 CLASHPFF CLASHPFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 XXXADDR XXXADDR [3] ; 
    10 XXXADDR1 XXXADDR1 [3] ; 
    10 XXXADDR2 XXXADDR2 [3] ; 
    10 XXXADDR3 XXXADDR3 [3] ; 
    10 XXXCITY XXXCITY [3] ; 
    10 XSTCD XSTCD [3] ; 
    10 XXXZIP XXXZIP [3] ; 
    10 XCTCD XCTCD [3] ; 
    10 CLARTNFF CLARTNFF ; 
    10 CL0FWBTA CL0FWBTA ; 
    10 CL0FWSTA CL0FWSTA ; 
    10 CL0FWRTA CL0FWRTA ; 
    10 CL0FW-PHN-MODIFIED-FL CL0FW-PHN-MODIFIED-FL ; 
    10 CL0FW-PHONE-COMMENT CL0FW-PHONE-COMMENT ; 
      15 CL0FW-PHONE-NUMBER CL0FW-PHONE-NUMBER ; 
        20 CL0FW-PHONE-AREA-CD CL0FW-PHONE-AREA-CD ; 
        20 CL0FW-PHONE-PREFIX CL0FW-PHONE-PREFIX ; 
        20 CL0FW-PHONE-SUFFIX CL0FW-PHONE-SUFFIX ; 
      15 * char(50) ; 
    10 CL0FW-RPS-QUALIFY-FL CL0FW-RPS-QUALIFY-FL ; 
    10 CL0FW-HAVE-RA-FL CL0FW-HAVE-RA-FL ; 
    10 CL0FW-DEADLOCK-FLAG CL0FW-DEADLOCK-FLAG ; 
    10 CL0FW-DEADLOCK-COUNT CL0FW-DEADLOCK-COUNT ; 
    10 CL-RPS-LABL-FL CL-RPS-LABL-FL ; 
    10 CL0FW-RPS-LABL-MOD-FL CL0FW-RPS-LABL-MOD-FL ; 
    10 CL0FW-RPS-UPDT-FL CL0FW-RPS-UPDT-FL ; 
    10 CL0FW-RPS-WARN-QTY CL0FW-RPS-WARN-QTY ; 
    10 CL0FW-RPS-WARN-EXCL CL0FW-RPS-WARN-EXCL ; 
    10 CL0FW-RPS-WARN-RSN CL0FW-RPS-WARN-RSN ; 
    10 CL0FW-RPS-WARN-NPAY CL0FW-RPS-WARN-NPAY ; 
    10 CL0FW-RPS-WARN-PART-SVC CL0FW-RPS-WARN-PART-SVC ; 
    10 CL0FW-RPS-PARTIAL-SVC-FL CL0FW-RPS-PARTIAL-SVC-FL ; 
    10 XCCCD XCCCD ; 
      15 CL0FW-XCCCD-1 CL0FW-XCCCD-1 ; 
      15 CL0FW-XCCCD-2 CL0FW-XCCCD-2 ; 
    10 KUCCOLCD KUCCOLCD ; 
    10 XCUCD XCUCD ; 
      15 CL0FW-XCUCD-1 CL0FW-XCUCD-1 ; 
      15 CL0FW-XCUCD-2 CL0FW-XCUCD-2 ; 
      15 CL0FW-XCUCD-3-4 CL0FW-XCUCD-3-4 ; 
    10 CL0FW-RPS-MSG-NBR CL0FW-RPS-MSG-NBR ; 
    10 CL0FW-FOUND-CO-STOR CL0FW-FOUND-CO-STOR ; 
    10 KL0FW-DM-UPD-FL KL0FW-DM-UPD-FL ; 
    10 CL0FW-RPS-WHSE-ZIP CL0FW-RPS-WHSE-ZIP ; 
    10 CL0FW-RPS-CUST-ZIP CL0FW-RPS-CUST-ZIP ; 
    10 CL0FW-SAVE-RPS-ZIP CL0FW-SAVE-RPS-ZIP ; 
end // end CL0FW01

//*** RECORD=KL0FW-RPS-PARM-REC ****
// ;***********************************************************
// ;*  KL0FW-RPS-PARM-REC                                     *
// ;*      THIS IS THE PARM RECORD FOR CALLING IO-MOD CL1080. *
// ;*      SUPPLY A ZIPCODE and receive a count of vparm101   *
// ;*      lines having the first 3 digits. the zipcode is    *
// ;*      served by rps if the count is 1 (one).             *
// ;***********************************************************
// ;*    M A I N T E N A N C E     H I S T O R Y     L O G    *
// ;*---------------------------------------------------------*
// ;* CHANGE#   DATE    PGMR    DESCRIPTION                   *
// ;*---------------------------------------------------------*
// ;*   #0    01/15/92  GDECKE  CREATE PARM RECORD            *
// ;*         01/26/93  JRAMOS  Added RPS partial service     *
// ;*                           zipcode indicator.            *
// ;***********************************************************
// **********************************
Record KL0FW-RPS-PARM-REC type basicRecord
  5 KL0FW-RPS-GROUP KL0FW-RPS-GROUP ; 
    10 XXXZIP XXXZIP ; 
    10 KL0FW-RPS-ZIP-COUNT KL0FW-RPS-ZIP-COUNT ; 
    10 KL0FW-RPS-PART-ZIP-IND KL0FW-RPS-PART-ZIP-IND ; 
end // end KL0FW-RPS-PARM-REC

//*** RECORD=KL0FW02 ****
// 12-02-92 lgross      created
// ***********************
Record KL0FW02 type basicRecord
  5 KL0FW-GRP KL0FW-GRP ; 
    10 KL0FW-IDX2 KL0FW-IDX2 ; 
    10 KL0FW-IDX3 KL0FW-IDX3 ; 
    10 KL0FW-IDX4 KL0FW-IDX4 ; 
    10 KL0FW-NM KL0FW-NM ; 
      15 KL0FW-CHA KL0FW-CHA [25] ; 
    10 KL0FW-FULL-NM KL0FW-FULL-NM ; 
      15 KL0FW-FULL-CHA KL0FW-FULL-CHA [35] ; 
end // end KL0FW02

// DB2 DEADLOCK COUNT (-811)
DataItem CL0FW-DEADLOCK-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 DEADLOCK FLAG (-811)
DataItem CL0FW-DEADLOCK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOUND COMPANY & STORE - CL9TBL
DataItem CL0FW-FOUND-CO-STOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VRAHDR01 LINE FOUND FLAG
DataItem CL0FW-HAVE-RA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0FW-PHN-MODIFIED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Area Code
DataItem CL0FW-PHONE-AREA-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone Nbr
DataItem CL0FW-PHONE-COMMENT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust Contact Phone Nbr
DataItem CL0FW-PHONE-NUMBER char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0FW-PHONE-PREFIX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Phone Nbr Suffix
DataItem CL0FW-PHONE-SUFFIX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 3 CHARS OF CUSTOMER ZIP
DataItem CL0FW-RPS-CUST-ZIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RPS LABEL MODIFIED FLAG
DataItem CL0FW-RPS-LABL-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE RPS EXCEPTION MSG NUMBER
DataItem CL0FW-RPS-MSG-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CUST ZIP IN RPS PARTL SVC AREA
DataItem CL0FW-RPS-PARTIAL-SVC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CLAIM/CUST CAN USE RPS
DataItem CL0FW-RPS-QUALIFY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// UPDATE RPS FLAG ON RA HEADER
DataItem CL0FW-RPS-UPDT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag-RPS CUST EXCLUDE
DataItem CL0FW-RPS-WARN-EXCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS RAHDR NPAY-FR
DataItem CL0FW-RPS-WARN-NPAY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS PARTIAL SVC
DataItem CL0FW-RPS-WARN-PART-SVC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag-RPS/GPC quantity
DataItem CL0FW-RPS-WARN-QTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WARNING FLAG-RPS CLM RSN TBL
DataItem CL0FW-RPS-WARN-RSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 3 CHARS OF WAREHOUSE ZIP
DataItem CL0FW-RPS-WHSE-ZIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE SHIPTO ZIPCODE/4 RPS TEST
DataItem CL0FW-SAVE-RPS-ZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUSTOMER CREDIT STATUS-1ST CHA
DataItem CL0FW-XCCCD-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUSTOMER CREDIT STATUS-2ND CHA
DataItem CL0FW-XCCCD-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY #1
DataItem CL0FW-XCUCD-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY #2
DataItem CL0FW-XCUCD-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CUST CREDIT RESPONSIBILITY-3-4
DataItem CL0FW-XCUCD-3-4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf12 was hit
DataItem CL0FW12K char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for w01 record
DataItem CL0FW1GP char(1209)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address 1 modified flag
DataItem CL0FWA1M char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address 2 modified flag
DataItem CL0FWA2M char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address 3 modified flag
DataItem CL0FWA3M char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address text was changed
DataItem CL0FWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address index
DataItem CL0FWAX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bill-to addr grp lvl=CLFGROUP
DataItem CL0FWBTA char(198)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// consumer name modified flag
DataItem CL0FWCM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0FWCNM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// consumer name is needed
DataItem CL0FWCSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flow-to-next-application flag
DataItem CL0FWFLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws return-to addr grp=CLFGROUP
DataItem CL0FWRTA char(198)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-modified flag
DataItem CL0FWSMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws ship-to addr grp =CLFGROUP
DataItem CL0FWSTA char(198)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen was changed
DataItem CL0FWTCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update went ok flag
DataItem CL0FWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each character in name
DataItem KL0FW-CHA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KL0FW-DM-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each character in full name
DataItem KL0FW-FULL-CHA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// full name(last,first,mi)
DataItem KL0FW-FULL-NM char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group working storage fld
DataItem KL0FW-GRP char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd index
DataItem KL0FW-IDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3nd index
DataItem KL0FW-IDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4nd index
DataItem KL0FW-IDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// name field
DataItem KL0FW-NM char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for RPS PARM REC
DataItem KL0FW-RPS-GROUP char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PARTIAL SERVICE ZIPCODE INDIC.
DataItem KL0FW-RPS-PART-ZIP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COUNT OF ZIP/CARRIER LINES FND
DataItem KL0FW-RPS-ZIP-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

