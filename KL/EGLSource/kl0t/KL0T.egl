package kl0t;

import corpcom1.*;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL008;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSCLSFL;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CLYREC;
import corpcom5.CLZREC;
import corpcom5.COMMAREA;
import corpcom5.CU-BILL-IND;
import corpcom5.CU-CO-SELF-NBR;
import corpcom5.CU-CO-SHORT-NM;
import corpcom5.CU-CR-APPL-DT;
import corpcom5.CU-CUSKU-SZ-FL;
import corpcom5.CU-DOC-BY-ORD-FL;
import corpcom5.CU-EDI-CUST-IND;
import corpcom5.CU-HANG-DFLT-FL;
import corpcom5.CU-LST-DAB-RPT-DT;
import corpcom5.CU-MAX-APRL-YNT-CD;
import corpcom5.CU-MAX-FTWR-YNT-CD;
import corpcom5.CU-PL-STYNM-PRT-FL;
import corpcom5.CU-PO-DT-FL;
import corpcom5.CU-PRT-XREF-FL;
import corpcom5.CU-VEND-NBR;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXX-INTL-PHONE-NBR;
import corpcom7.XXXADDR1;
import corpcom7.XXXADDR2;
import corpcom7.XXXADDR3;
import corpcom7.XXXSTAT;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XBCCD;
import corpx1.XBCTBL;
import corpx1.XCACD;
import corpx1.XCCCD;
import corpx1.XCECD;
import corpx1.XCRCD;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XCUCD;
import corpx1.XDATBL;
import corpx1.XDSTBL;
import corpx1.XDSWHSEF;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XDZ-DATA-DIST-CD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XIECD;
import corpx1.XLBCD;
import corpx1.XLECD;
import corpx1.XLETBL;
import corpx1.XLGCD;
import corpx1.XOBTBL;
import corpx1.XOTTBL;
import corpx1.XPTTBL;
import corpx1.XSOTBL;
import corpx1.XSTTBL;
import corpx1.XTTTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XOBCD;
import corpx2.XOCCD;
import corpx2.XOPCD;
import corpx2.XOTCD;
import corpx2.XPTCD;
import corpx2.XSOCD;
import corpx2.XSTCD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpx2.XXX-ADDR1;
import corpx2.XXX-ADDR2;
import corpx2.XXX-ADDR3;
import corpx2.XXXCITY;
import corpx2.XXXUSRID;
import corpx2.XXXZIP;
import corpy2.YASTBL;
import corpy2.YATTBL;
import corpy2.YCCTBL;
import corpy2.YCH-CHNL-CLS-CD;
import corpy2.YCPCD;
import corpy2.YCPTBL;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSACTCD;
import corpy2.YCSCD;
import corpy2.YCSCD1;
import corpy2.YCSCD2;
import corpy2.YCSRPTEX;
import corpy2.YCSTBL;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YCU-CRTN-USE-CD;
import corpy2.YCXTBL;
import corpy2.YITCD;
import corpy2.YITTBL;
import corpy2.YLICD;
import corpy2.YMOKEY;
import corpy2.YMOTBL;
import corpy2.YRMTBL;
import corpy2.YUATBL;
import corpy2.YVICD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import iv.common.IV0GROUP;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV5REC;
import kl.common.KL14TBL;
import ku.common.KU5REC;
import ku.common.KUCACYDT;
import ku.common.KUCACYNR;
import ku.common.KUCACYRT;
import ku.common.KUCALERT;
import ku.common.KUCAPDEX;
import ku.common.KUCAPRDT;
import ku.common.KUCASMT;
import ku.common.KUCATCSH;
import ku.common.KUCBLAID;
import ku.common.KUCBPIND;
import ku.common.KUCCCAID;
import ku.common.KUCCNSCD;
import ku.common.KUCCNTCT;
import ku.common.KUCCOAID;
import ku.common.KUCCOANM;
import ku.common.KUCCOBDT;
import ku.common.KUCCOID;
import ku.common.KUCCOIDN;
import ku.common.KUCCOLCD;
import ku.common.KUCCOMNT;
import ku.common.KUCCONM;
import ku.common.KUCCRLEF;
import ku.common.KUCCRLEX;
import ku.common.KUCCRLIN;
import ku.common.KUCCSHNF;
import ku.common.KUCCSTDT;
import ku.common.KUCECODY;
import ku.common.KUCFINDT;
import ku.common.KUCFPRDT;
import ku.common.KUCFRTPD;
import ku.common.KUCFTRTI;
import ku.common.KUCGRP;
import ku.common.KUCGRPID;
import ku.common.KUCIDIND;
import ku.common.KUCINSPD;
import ku.common.KUCJSRFL;
import ku.common.KUCLBOFL;
import ku.common.KUCLCAMT;
import ku.common.KUCLCEDT;
import ku.common.KUCLCXDT;
import ku.common.KUCLVIND;
import ku.common.KUCMADID;
import ku.common.KUCMAGCT;
import ku.common.KUCMSTID;
import ku.common.KUCNSCNT;
import ku.common.KUCPDSPD;
import ku.common.KUCPHN;
import ku.common.KUCPOFL;
import ku.common.KUCPRPTI;
import ku.common.KUCPRVRT;
import ku.common.KUCPSFL;
import ku.common.KUCRAUTH;
import ku.common.KUCREC;
import ku.common.KUCSBKFL;
import ku.common.KUCSKIND;
import ku.common.KUCSSCNT;
import ku.common.KUCSTMT;
import ku.common.KUCSTYNT;
import ku.common.KUCUNTCS;
import ku.common.KUCVNDFL;
import ku.common.KUCWHSFL;
import ku.common.KUCXCSFL;
import ku.common.KUCYPOAP;
import ku.common.KUCYPOFT;
import ku.common.KUDREC;
import ku.common.KUJREC;
import ku.common.KUKPCOID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSHAID;
import ku.common.KUMSTRID;
import ku.common.KUNREC;
import ku.common.KUTREC;
import ku.common.KUYREC;
import ku.common.KUYREPNM;
import ku.common.KUYSVRID;
import op.common.OP1CMPNB;
import op.common.OP1COGID;
import op.common.OP1CUOID;
import op.common.OP1CUPO;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import sm.common.SM1AGYID;
import sm.common.SM4REPID;
import sp.common.SP1ID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import tf.common.TF1ABRV;
import tf.common.TF1CARCD;
import tf.common.TF1REC;
import tf.common.TF2PRONO;
import ts.common.TS-NIKE-PL-NBR;
import vv.common.VCLRPS01;
import vv.common.VDMACT01;
import vv.common.VIVHDR04;
import vv.common.VXVO0001;
//*** PROGRAM=KL0T ****
// ************************************************************
// 
//             KL0T - SPECIAL SERVICES LOG
//             ---------------------------
// 
// This is the special services log program. It is used to log
// returns when they come into the warehouse and before in-
// pection begins. This program has similarities to CL0E in
// that it can create claim headers as well as the log records.
// 
// Maintenance History:
//  Date    Who    Comments
// -------- ------ --------------------------------------------
// 12-7-88  mhalst #CL393 - Add new statement group S71 to get
//                 order number from VCLIVX01 and move to
//                 screen when existing claim is used
// 12-09-88 mhalst #CL415 - Add PF18 to go to comments screen.
//                 Also, clear CLAREC on reentry.
// 12-15-88 MHALST #CL433 - Correct to set parts of screen pro-
//                 tected based on what 'key' data was entered
//                 (Claim, Order, Consumer Name, or Customer)
// 01-27-89 mhalst Correct program to function properly when
//                 using the 'NCLM' option.
// 02-27-89 jwood  added noncsp option to calls
// 02-27-89 jwood  added xssegtr logic
// 03-23-89 bcourt chg XOT-ORD-TYP-CD from IVAREC, not IV0REC
//                 drop 8 YCE-XCEP-CD's from CLAREC
//                 add CL-ORIG-IND in CL0T140.
//                 drop OPKREC from table list.
// 04-18-89 bcourt put division, base order type & sales office
//                 on map. Add edits, group requirements for
//                 sport/casual enhancement.
//                 Drop CL0TW04, never used.
// 05-19-89 bcourt Rename XCUCD3 to XCUCD.
//                 Structure changes: CLAREC, KUAREC, KUCREC,
//                 KUMREC,KUNREC, XCTTBL, XGPTBL, XOTTBL,XPTTBL
//                 IVAREC.
// 05-23-89 bcourt Add CL0TW01.CL0TWCMB, combination-edit-flag.
//                 Use in CL0T100, CL0T121, CL0T113 to skip
//                 protecting fields.  Allows user correction
//                 of bad data combinations.
//                 Change entered field to match claim or
//                   invoice (from order #):
//                 CL0TSDV- Division     CL0TSSO- Sales Office
//                 CL0TSBO- Order Type   CL0TS45- G.P.C.
// 10-26-89 chellm CL502 -- update claauthf to 'y' when auto-
//                 authorizing cdr claims.
// 12-05-89 chellm No # -- Prevent TA0111 FYIs from being gen'd
//                 when the user changes the claim nbr on the
//                 screen.  Change logic to re-build & display
//                 the new claim information before creating
//                 the return.
// 01-19-90 chellm DB2 structure changes regen only
// 01-24-90 chellm CL478 Reinstalled and corrected edit to
//                 prevent returns from being logged if the
//                 receipt date is more than 25 days old.
// 04-06-90 gdecke april db2 table changes. multiple agcy/rep.
// 05-11-90 gdecke side-1 changes for brand, legal entity.
// 06-19-90 gdecke remove acct class 45, 95 from brand test.
// 08-10-90 CHELLM Modified Comp-Co field for input and update
//                 to the Claim Header.
// 08-10-90 sgorga Removed a line of code in CL0TS47 that
//                 sometimes caused the bypassing of the code
//                 that validates clm type/rsn cd combinations.
// 08-24-90 sgorga  Allow claims against certain Nil-customer
//      invoices to be logged in using Option 7 - Special
//      Services Log - by bypassing the code that PREVENTS Nil
//      from being logged there.  Modified CL0TSBC, CL0TS39,
//      and CL0T126.
// 09-28-90 sgorga  Added another Nil invoice.
// 10-12-90 bcourt  DB2 structure changes, drop XCUTBL.
// 11-21-90 sgorga  Added Nil Inv 203447 & 203451 (see 8-24-90)
// #cl909  12-04-90  gdecke  add logic to process sales
//                           sample claims.
// 01-08-91 sgorga  Made changes to cl0ts91,134,143,w02,w06
//                  to remove KUAREC and rename kuablid to
//                  kucblaid.  See processes for detail.
// 01-16-91 GDECKE  SALES SAMPLE CLAIM MUST HAVE ORIGIN-CD='B'
//                  CHANGED STMT GROUP CL0TSSE
// 01-21-91 sgorga  Added 20 Nil invoices to allow domestic clm
//                  processing.  Chgd:  CL0TSBC,S39,126.
// 02-18-91 sgorga  Added Nil inv# 6298054. See above.
// 02-21-91 sgorga  Added Nil inv# 6573603. See above.
// 03-14-91 sgorga  Added Nil inv# 6763895;6763634.
// 04-19-91 sgorga  Added Nil inv# 6984512,6978386.
// 04-22-91 GDECKE  REMOVED REFERENCES TO XOCTBL.
// 05-06-91 gdecke  Check for converted company.  Replace
//                  customer with converted to nbr - show msg.
// 05-07-91 sgorga  Instead of continuing to hardcode NIL
//                  invoices (see above comments), table CL7TBL
//                  has been created to contain all NIL
//                  invoice nbrs that we want to allow domestic
//                  claims against.  Removed the hardcoded NIL
//                  nbrs from processes CL0TSBC,S39,126.
//                  Replaced with an inquiry to the CL7TBL tbl.
// 05-13-91 gdecke  DO CHECK FOR CONVERTED COMPANY AND DO SUB-
//                  STUTION ONLY IF SETUP AFTER 05-12-91.
// 05-15-91 twatso  add edit so connot enter footwear claims
//                  against an account that is set up for
//                  apparel.   Use order type profile and gpc.
//                  changes to cl0ts45 and cl0t126.
//                  same changes to cl0es68 and cloe125.
// 05-20-91 gdecke  dont show msg 440 if new cust nbr defaults
//                  from conversion table.
// 05-15-91 twatso  add edit so cannot enter footwear claims
//                  against an account that is set up for
//                  apparel.   Use order type profile and gpc.
//                  changes to cl0ts45 and cl0t126.
//                  same changes to cl0es68 and cloe125.
// 05-28-91 gdecke  cl0t130 - allow whse 51,32,04 to be mixed.
// 06-11-91 twatso  db2 structure changes  cl0tw06 matches
//                  kucrec.  copied kucrec for cl0tw06
// 08-08-91 wjohns  Renamed application and commarea references
//                    to renamed claims appls.
// 09-03-91 twatso  added edit of gpc after check for converted
//                  company
// 10-25-91 sgorga  cl1065. Set cljrec restock flag = 'y' if
//                  'rts' claim.  If 'rts' or 'rfl', set cljrec
//                  restock charge % (yrmrestk).  See kl0t137
//                  comments.  Added yrmtbl.
// 11-01-91 twatso  began coding for osd installation for 12-91
// 12-03-91 twatso  added code in 126 so blank or valid xbccd
//                  is ok in xvotbl when status is active.
// 12-03-91 gdecke  add clasttdt,ycrcd,yctcd to cl0tw08 record.
// 12-16-91 twatso  added hard code in kl0t140 to force brand
//                  07 to pick up an I.E. agcy/rep and  05 to
//                  pick up a side1 agency/rep.
//                  Will have to be changed if the product
//                  category codes become inactive.
// 12-18-91 twatso  if xaucd = 26 or 27 do not access cl8tbl
//                  for default agency/rep with def items
// 12-23-91 twatso  added code in sbc to check for active line
//                  when checking yittbl - some were set inact.
// 01-06-92 twatso  added code to allow osd claim type if comp.
//                  is closed or inactive by using 666666 as  .
//                  the company id.  kl0ts39
// 01-13-92 sgorga  Initializing ta1rec, ta2rec, errsqlca.
//                  kl0t103, 130,126,001, and xpcl010.
// 04-06-92 gdecke  Added logic to handle RPS prepaid freight.
// 04-07-92 sgorga  Replaced the call to subpgm CU1290 (in stmt
//                  grp KL0T140) with a call to the new subpgm,
//                  KU1350 (used to get agency/rep).  Replaced
//                  KUOREC with KU5REC.
// 04-21-92 twatso  for osd credit and debit freight fl = 'n'
//                  kl0t137  task # cl1120
// 05-15-92 GDECKE  ALWAYS SHOW CARRIER DESCRIPTION. DO NOT
//                  CHANGE PPD/COLLECT FLAG ON INQUIRY.
// 06-12-92 sgorga  DB2 chgs.  Renamed clatbyid to cl-taken-by-
//                  id.  Chnged kl0t140, cl0tw02, cl0tw06.
// 07-08-92 twatso  changed kl0t141  - osd- xiecd - internal
//                  external code to mimic the def coding -
//                  removed the coding at bottom of process.
//                  which set it to 'e' if it was 'osd'.
// 08-10-92 GDECKE  CHANGE EDIT FOR RPS CARRIER 200 TO DEFAULT
//                  RPT STATUS TO 'R' SIMILAR TO CARRIER 927.
// 10-09-92 sgorga  Added new account number 888888 to be used
//                  to create a claim when the customer the
//                  claim is for has now become inactive or is
//                  closed.  See kl0ts39 for more information.
// 12-2-92  lgross  Changed logic to allow 'cdr' claims to be
//                  entered by entering order id and last
//                  name.  These are changes required by the
//                  direct marketing project.  A tag record to
//                  DCLAIM.VDMACT01 will be written each time
//                  a header record is added to the database
//                  or updated.
//                  Changed:  KL0TS39, CL0TW01, KL0T13A,
//                  KL0T13B, KL0T139, KL0TS-WRIT-DM-REC, KL0T-
//                  GET-ACCT-CLS, KL0T-GET-CMPNY-REC, KL0T121,
//                  KL0T125, KL0T130
// 01-26-93 bcourt  change procs to sgrps.
// 02-08-93 bcourt  Write tag rec for consumer account active
//                  on the unix.
// 02-12-93 sgorga  For RFL clms:  Added pack list # to screen.
//                  (Pack list # + order # gets unique invoice
//                  for the RFL claim - KL0T123).  Replaced
//                  IVAREC/IV0REC with IVBREC in KL0T program.
// 03-02-93 sgorga  Shifted Name/Address flds on screen down 1.
//                  Deleted initialize code for iv0rec -kl0t101
// 03-05-93 sgorga  Added ts-nike-pl-nbr (pack list #) kl0t116.
// 03-12-93 sgorga  Added pack list # to be edited for invalid
//          field combinations.  Kl0t121,S72,112,117 & cl0tw05.
// 03-26-93 sgorga  Created an FYI message to display whenever
//                  order # is entered without pack list nbr.
//                  Changes to kl0t100, 101, 115, 121, S72.
// 06-21-93 jcarey  Changed kl0t141 to assign 'eo' xie code to
//                  an 'e' xie code. Also added the pod claims
//                  assignment to an internal xie code.
// 08-04-93 jcarey  Deleted the credit status 'u' assignment to
//                  xie internal code. Paragraph kl0t141.
//                  Customer xie code will now be used instead.
// 08-13-93 jcarey  Database structure change. Renamed cllpdcfl
//                  to cl-ppd-coll-ind.
// 10-07-93 jcarey  Added code to kl0t135 & kl0t145 to
//                  initialize zz-sdt.
// 10-29-93 GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1
// 11-12-93 GDECKE  DB2 STRUCTURE CHANGES - CL0TW01, CL0TW06
// 02-07-94 jcarey  Added statements to initialize the sqlca
//                  record. Para kl0ts33,s49,s50,s71,s92,s93,
//                  108,110,114,123,124,125,131,133,146,150.
// 03-11-94 BCourt  Rename CLFREC.xxxaddrn to xxx-addrn
//            Do not rename map addresses from 30 to 38 char.
//            Orders,Invoices & Claims use just 30 chars.
//            Change KL0T121, S49, S94, S50, S43, S91.
//            DB2 changes- fix length in CL0TW01 and W06.
// 04-15-94 twatso  Made changes to -s49, -s50, & s94 to write
//                  ship-to (consumer) name & address on clfrec
//                  when RFL claims are created in KL0T screen
//                  IF there is an invoice nbr available.
// 05-21-94 sgorga  Removed line of code in -S47 that allowed
//                  only 'def' reason cd for 'DEF' claim type.
// 10-21-94 sgorga  DB2 chgs:  Added xob cd & '**' in gndr-age
//                  field to pass to ku1350, via ku5rec.
// 10-26-94 twatso  changed auto authorization for CDR claims
//                  from Jackie Evey -#439 to Susan Schmidt
//                  rep #2652  kl0ts-auto-auth, kl0ts61
// 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04 FOR NEW
//                  VERSION OF IO1140 WHICH USES IV-LVL-PAY-IND
// 11-09-94 sgorga  -S48.  Corrected 'exp' status to 'era'.
//                  -S45.  Fixed abend of bad cust to err msg.
// 11-23-94 sgorga  -S48.  Added 2 new clm statuses (wpo, dpl)
//                  to edit indicating clm isn't authorized.
// 12-09-96 kshaw   dec table changes.
// 11-07-97 RCHAUV  CHANGES FOR CLAIM REASON CODE CONVERSION
// 04-06-98 NJANA   Replace the  CSP table XVOTBL by an iomod
//                  VXVO0001
// 02-26-98 rgilli  Y2K MODIFICATIONS MADE TO:
//                  KL0TS31: Changed from Julian date compare
//                           to ccyymmdd.
// 09-09-99 ssank1  Changed Map presentation of KL0TM001 to
//                  accomodate 4 digit nike ord id.
// 07-17-01 DSINHA  Added SAP RTN SO NBR as display field on
//                  map KL0TM001.
// *********************
Program KL0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0TW01 CL0TW01; // record
  CL0TW02 CL0TW02; // record
  CL0TW03 CL0TW03; // record
  CL0TW05 CL0TW05; // record
  CL0TW06 CL0TW06; // record
  CL0TW08 CL0TW08; // record
  CL0TW09 CL0TW09; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLDREC CLDREC; // record
  CLEREC CLEREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLLREC CLLREC; // record
  CLUREC CLUREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  CLYREC CLYREC; // record
  CLZREC CLZREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV5REC IV5REC; // record
  KU5REC KU5REC; // record
  KUCREC KUCREC; // record
  KUDREC KUDREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUTREC KUTREC; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF1REC TF1REC; // record
  VCLRPS01 VCLRPS01; // record
  VDMACT01 VDMACT01; // record
  VIVHDR04 VIVHDR04; // record
  VXVO0001 VXVO0001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use CL7TBL {deleteAfterUse = yes}; // table
  use CL8TBL {deleteAfterUse = yes}; // table
  use KL10TBL {deleteAfterUse = yes}; // table
  use KL14TBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLETBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XTTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YASTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCCTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YITTBL {deleteAfterUse = yes}; // table
  use YMOTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0TM.KL0TM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0T000: KL0T000();
    exit program;
    KL0T001: KL0T001();
    KL0T050: KL0T050();
    KL0T100: KL0T100();
    KL0T101: KL0T101();
    KL0T102: KL0T102();
    KL0T103: KL0T103();
    KL0T110: KL0T110();
    KL0T120: KL0T120();
    KL0T113: KL0T113();
    KL0T130: KL0T130();
    KL0T115: KL0T115();
    KL0T111: KL0T111();
    KL0T114: KL0T114();
    KL0T117: KL0T117();
  end // end main
end // end KL0T

// application main logic
Function KL0T000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xpcl001 checks to ensure that the claim header has    **/
   /* *         been flagged as "in use" if this application    **/
   /* *         is does updates.                                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  COMMAREA.CACURRAP = "KL0T";



  KL0T001(); /* initilize the application*/


  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0T050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/




end // end KL0T000

// initialize application
Function KL0T001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                      **/
   /* 01-13-92  sgorga  Set ta1rec empty.                      **/
   /* ************************************************************/

   /* TEMP001;*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/

  XSENTRY(); /* check entered thru csp main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry module*/
  XPCL008(); /* set activity indicator*/

  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set CL0TW01 empty;
  set CL0TW02 empty; /* clear out ws copy of clarec*/
  set CL0TW03 empty; /* clear out header display items*/
  set CL0TW05 empty; /* clear out header display items*/
  set CL0TW09 empty; /* clear out ezemno holders*/


  CL0TW01.CL0TWSIA = "N"; /* set stay-in-application-flag to 'no'*/
  CLXREC.CLXEOAF = "N"; /* set application-done-switch to 'no'*/
  CLXREC.CLXERRF = "N"; /* set error-flag to 'no'*/
  CLXREC.CLXBLDSC = "Y"; /* set build-screen flag to 'yes'*/

  if (CLWREC.CLWMNOPT == 7 /* if in option 7*/
   || CLWREC.CLWMNOPT == 16) /* if in option 16*/
    if (CLAREC.CLACLMNB != 0) /* and we have claim number*/
      CL0TW03.CL0TMLCN = CLAREC.CLACLMNB; /* save it for screen*/
      set CLAREC empty; /* and clear clarec*/
    end
  end

  CLXREC.CLXCSCRN = "KL0TM001"; /* set first screen name*/

  CLXREC.CLXSNAME[1] = "KL0TM001"; /* screens used in this*/


  KL0T002(); /* check menu option security*/

  set TA1REC empty;
  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CL0TW01.CL0TWCJD = TA2REC.TA2JULNN; /* set current julian date*/
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0E001";
    XPCL010(); /* abend*/
  end


    /* set up first time defaults*/

  CL0TW03.CLLWRDT = TA2REC.TA2GRGGN;
  CL0TW03.CL0TMRDT = TA2REC.TA2GRGB;
  if (COMMAREA.XWHCD != " ")
    KL0TM001.XWHCD = COMMAREA.XWHCD;
    KL0TS30(); /* get whse description*/
  end


end // end KL0T001

// check menu option security
Function KL0T002()
   /* ************************************************************/
   /* *      check the menu option security                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  if (CLWREC.CLWMNOPT == 7 /* if option 7*/
   || CLWREC.CLWMNOPT == 16) /* if option 7*/
    /* next sentence*/
  else
    CL0TW01.CL0TWACT = "I"; /* default to inquiry mode*/
    return;
  end

  if (CLWREC.CLWACTIV == "A") /* if in 'add' mode*/
    if (COMMAREA.CAADDFL == "Y")
      CL0TW01.CL0TWACT = "A"; /* ok to add*/
    end
  else
    if (CLWREC.CLWACTIV == "C") /* if in 'change' mode*/
      if (COMMAREA.CACHGFL == "Y")
        CL0TW01.CL0TWACT = "A"; /* ok to add*/
      end
    else
      if (CLWREC.CLWACTIV == "I") /* if in 'inquiry' mode*/
        if (COMMAREA.CAINQFL == "Y")
          CL0TW01.CL0TWACT = "I"; /* default to inquiry mode*/
        else
          CLWREC.CLWEZMNO = 379; /* not auth to inquire*/
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
          return;
        end
      end
    end
  end

end // end KL0T002

// main cl0e branch control
Function KL0T050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E050"; /* set current process name*/


  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end



  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/


  if (CLXREC.CLXSCRNX == 1) /* if screen cl0%m001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0T100(); /* process screen cl0em001*/
    end
  else
    TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
    XPCL010();
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf) = 'n'*/
           /* we go back to the top of cl0e050...*/
       /* if the end-of-application flag (clxeoaf) = 'y'*/
           /* we return to cl0e000.*/



end // end KL0T050

// converse screen M001
Function KL0T100()
   /* ************************************************************/
   /* process screen cl0tm001                              **/
   /* **/
   /* note that this process is being performed in a         **/
   /* "while loop" from cl0e050 until the end-of-screen   **/
   /* flag (clxeosfl) is set to 'y'.                      **/
   /* **/
   /* Maintenance History:                                   **/
   /* **/
   /* 12-5-89 CHELLM to prevent TA0111 FYIs for HD/PMY Ivc    **/
   /* mis-matches when returns are logged,     **/
   /* dont save the screen fields in CL0T117   **/
   /* when invalid combo errors exist.         **/
   /* 03-26-93 sgorga  Where EZEMNO error messages are checked, **/
   /* included the pack list warning msg #750. **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T100"; /* set current process name*/

   /* cl0tw09 is table of ezemno numbers created in*/
   /* individual field edits.  Since they were not done in*/
   /* bottom-right to top-left sequence, the next 'if in'*/
   /* will get the message for the top-left field (note, the*/
   /* cursor may not be there).  See prologue for cl0tw09.*/

  if (converseVar.validationMsgNum == 0)
    if ("E" in CL0TW09.CL0TWIND) /* if there was an error*/
      if (CL0TW09.CL0TWMNO[sysVar.arrayIndex] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(CL0TW09.CL0TWMNO[sysVar.arrayIndex]);
      end
      CLXREC.CLXERRF = "Y";
    end
  end


  if (CLXREC.CLXBLDSC == "Y" /* if supposed to build screen*/
   && CLXREC.CLXERRF == "N") /* and no errors*/
    KL0T101(); /* build the screen*/
  end


  KL0T108(); /* always get total cartons if possible*/

  if (CLAREC.CLACLMNB != 0)
    KL0T104(); /* check sales sample menu option*/
  end

  if (converseVar.validationMsgNum == 446 /* if freight warning*/
   || converseVar.validationMsgNum == 537)
    CL0TW01.CL0TWFWF = "Y"; /* set frgt-warning-displayed-flag*/
  else
    if (converseVar.validationMsgNum == 447) /* if pro-number warning*/
      CL0TW01.CL0TWPWF = "Y"; /* set pro-#-wwarning-displayed-flag*/
    else
      if (converseVar.validationMsgNum == 458) /* rfl/rts claims exist*/
        CL0TW01.CL0TWCWF = "Y"; /* set clms-exist-warn-dsp-flag*/
      else
        if (converseVar.validationMsgNum == 555) /* auth expired warn*/
          CL0TW01.CL0TWRXF = "Y";
          set KL0TM001 alarm;
        else
          if (converseVar.validationMsgNum == 676)
                                   /* sample claim used with wrong menu opt*/
            CL0TW01.CL0TWSWF = "Y";
            set KL0TM001 alarm;
          else
            if (converseVar.validationMsgNum == 559) /* GPC/Warehouse mismatch*/
              CL0TW01.CL0TWGXF = "Y";
            else
              if (converseVar.validationMsgNum == 750) /* pack list nbr warning (3-26-93)*/
                CL0TW01.CL0TW-PL-WARN-FL = "Y";
              end
            end
          end
        end
      end
    end
  end

   /* 4/89*/
  KL0TM001.XXXRVNBR = "01"; /* set revision number*/
  KL0TM001.XXXCURDT = VGVar.currentShortGregorianDate;

  CLXREC.CLXBLDSC = "N";
  KL0TM001.VAGen_EZEMSG = CLXREC.CLXMSG;

  if (converseVar.validationMsgNum > 999
   || converseVar.validationMsgNum < 0)
    converseLib.validationFailed(666);
  end

   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
  converse KL0TM001 ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


  set CL0TW09 empty; /* reset error messages*/


  if (converseVar.eventKey is enter) /* only check on enter*/
    if (KL0TM001 is modified) /* don't do this logic*/
      /* next sentence                  if user has touched screen*/
    else
      if (CLWREC.CLWMXIDX > 0) /* we are using table*/
        if ("S" in CLWREC.CLWSELCD)
          CLWREC.CLWSELCD[sysVar.arrayIndex] = "V"; /* set viewed*/
          if ("S" in CLWREC.CLWSELCD) /* if more to look at*/
            CLXREC.CLXBLDSC = "Y";
          else
            COMMAREA.CATOAP = CLWREC.CLWAPPFM; /* otherwise*/
            XPCL002(); /* we're done viewing*/
            return;
          end
        end
      end
    end
  end


  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* initialize errors-flag*/
  CLXREC.CLXUPDTF = "N"; /* initialize do-updates-flag*/
  CL0TW01.CL0TWUOK = "N"; /* initialize updates-went-ok-flag*/
  CL0TW01.CL0TWCMB = "N"; /* init combination-err-flag 5/89*/

   /* 4/89 turned OFF if bad edit of sls ofc,base O/T,div, or GPC*/
   /* Used in CL0T126, CL0TS72*/
  CLXREC.CLXTESTF = "Y"; /* init flag for order type combo test*/


  set KL0TM001.CLACLMNB cursor;


  KL0T116(); /* set fields modified*/


  KL0T112(); /* set edit flag*/


  KL0T110(); /* handle any special entries*/


  if (CLXREC.CLXERRF == "Y")
    return; /* go show error message*/
  end


  if (CLXREC.CLXEDITF == "Y") /* if we want to do edits*/
    KL0T120(); /* go process screen entries*/
  end


  KL0T113(); /* set do-updates flag*/


  if (CLXREC.CLXUPDTF == "Y") /* if we want to update*/
    KL0T130(); /* go update the entries*/
  end


  KL0T115(); /* set flow-to-next-process flag*/


  if (CL0TW01.CL0TWFLO == "Y") /* if time to flow to next application*/
    if (converseVar.eventKey is enter) /* 'enter' flow is set up here*/
      KL0T111(); /* set up 'enter' key flow*/
      if (CLXREC.CLXERRF == "Y") /* if errors*/
        return;
      end
    else
      KL0T114(); /* set up pfkey flow*/
      if (CLXREC.CLXERRF == "Y") /* if errors*/
        return;
      end
    end
    XPCL002();
  end

                                   /* (12-5-89)*/
  if (CL0TW01.CL0TWCMB == "N") /* as long as there's no combo errors*/
    KL0T117(); /* save screen fields*/
  end


   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/



end // end KL0T100

// build screen, decide add/chg
Function KL0T101()
   /* *************************************************************/
   /* build screen cl0tm001                             **/
   /* **/
   /* MAINTENANCE HISTORY                                       **/
   /* **/
   /* 02-12-93  sgorga  Set IVBREC empty.                       **/
   /* 03-26-93  sgorga  Set pack list warning flag to 'N'.      **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.           **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0T101"; /* set current process name*/


  set KL0TM001 initial;

  if (CLLREC.CLACLMNB != 0)
    CL0TW01.CLLRTDSP = CLLREC.CLLRTDSP;
  else
    CL0TW01.CLLRTDSP = "    ";
  end

  set VIVHDR04 empty;
  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUYREC empty;
  set CLBREC empty;
  set CLDREC empty;
  set CLFREC empty;
  set CLJREC empty;
  set CLLREC empty;
  set CLZREC empty;
  set CL0TW08 empty;


  CLXREC.CLXYCTX = 0; /* set claim-type index to 0*/
  CLXREC.CLXYCSX = 0; /* set claim-status index to 0*/
  CLXREC.CLXYCRX = 0; /* set claim-reason index to 0*/
  CL0TW01.CL0TWPWF = "N"; /* message has not displayed*/
  CL0TW01.CL0TWCWF = "N"; /* message has not displayed*/
  CL0TW01.CL0TWFWF = "N"; /* message has not displayed*/
  CL0TW01.CL0TWSWF = "N"; /* sales sample warning not displayed*/
  CL0TW01.CL0TWRXF = "N"; /* message has not displayed*/
  CL0TW01.CL0TWGXF = "N"; /* message has not displayed*/
   /* msg has not displayed (3-26-93)*/
  CL0TW01.CL0TW-PL-WARN-FL = "N";
  CLXREC.CLXINVFD = "N"; /* invoice found*/
  CLXREC.CLXORDFD = "N"; /* order found*/


  if (CL0TW01.CL0TWACT == "A") /* if adding or changing*/
    KL0TM001.CL0TMPFK = "20:Refresh";
    set KL0TM001.XWHCD modified; /* this forces edits*/
  else
    KL0TM001.CL0TMPFK = " 5:ClmHdr "; /* 4/89 add ' '*/
    KL0T109(); /* protect the screen*/
  end


  if (CLAREC.CLACLMNB == 0) /* if no current claim*/
    KL0T102(); /* setup new screen*/
  else
    KL0T103(); /* show return for this claim*/
  end

end // end KL0T101

// set up add-mode screen
Function KL0T102()
   /* ************************************************************/
   /* set up add-mode screen                                **/
   /* ************************************************************/
   /* M A I N T E N A N C E    H I S T O R Y     L O G      **/
   /* -----------------------------------------------------------**/
   /* DATE   PGMR    DESCRIPTION                            **/
   /* ---------------------------------------------------------**/
   /* 01/27/92 GDECKE  ADD RPS LOGIC.                         **/
   /* 04/07/92 twatso  added lines to use msg 700             **/
   /* 04/09/92 bcourt  add cl-rps-nbr to 'set defined'.       **/
   /* 04/15/92 GDECKE  CHANGE RPS STATUS, PPC/COLLECT STATUS. **/
   /* 08/10/92 GDECKE  CHANGE EDIT ON RPS CARRIER CODE 200    **/
   /* 08/13/93 JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T102"; /* set current process name*/

  KL0TM001.XWHCD = CL0TW03.XWHCD;
  KL0TM001.XWHABRV = CL0TW03.XWHABRV;
  KL0TM001.CL0TMRDT = CL0TW03.CL0TMRDT;

  if (CL0TW03.TF1CARCD == "    "
   && CLWREC.TF1CARCD != "    ")
    CL0TW03.TF1CARCD = CLWREC.TF1CARCD;
    CLWREC.TF1CARCD = "    ";
    CL0TW03.CL0TMLCN = CLWREC.CLACLMNB;
    CLWREC.CLACLMNB = 0;
  end

  KL0TM001.TF1CARCD = CL0TW03.TF1CARCD;
  KL0TM001.TF1ABRV = CL0TW03.TF1ABRV;
  KL0TM001.CL-PPD-COLL-IND = " ";
                                  /* prepaid/collect 4/89 add comment*/
  KL0TM001.CL0TMLCN = CL0TW03.CL0TMLCN; /* last clm nbr*/
  KL0TM001.XXXUSRID = COMMAREA.CAUSERID;


   /* decide whether to show rps title and field.*/
   /* get rps label line if one exists*/

  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M"
   && KL0TM001.CLACLMNB == 0
   && KL0TM001.CL0TMLCN != 0
   && CLWREC.CLWACTIV == "C")
    if (CL0TW01.CLLRTDSP == "INSP"
     || CL0TW01.CLLRTDSP == "RFSD")
      COMMAREA.CATOAP = "KL06";
      CLWREC.TF1CARCD = KL0TM001.TF1CARCD;
      CLWREC.CLACLMNB = KL0TM001.CL0TMLCN;
      if (CLAREC.CLACLMNB != KL0TM001.CL0TMLCN)
        CLAREC.CLACLMNB = KL0TM001.CL0TMLCN;
        CLAREC.CLACRTNB = CL0TW01.CLLRTNNB;
        CLWREC.CLAGROUP = CLAREC.CLAGROUP;
      end
      XPCL002();
    end
  end


  KL0T128(); /* GET RTN AUTH HEADER*/

  set KL0TM001.CL-RPS-STAT-ID skip;
  CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "N";
  if (CLJREC.CL-RPS-LABL-FL == "Y")
    set VCLRPS01 empty;
    VCLRPS01.CLACLMNB = CLAREC.CLACLMNB;
    KL0TS-GET-RPS-LINE();
    if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y")
      if (VCLRPS01.CL-RPS-STAT-ID == "A")
        if (KL0TM001.TF1CARCD == "0927"
         || KL0TM001.TF1CARCD == "0200")
          KL0TM001.CL-PPD-COLL-IND = "C"; /* prepaid/collect*/
          KL0TM001.CL-RPS-STAT-ID = "R";
          set KL0TM001.CL-PPD-COLL-IND skip;
        else
          KL0TM001.CL-PPD-COLL-IND = "P"; /* prepaid/collect*/
          KL0TM001.CL-RPS-STAT-ID = "O";
        end
      else
        KL0TM001.CL-RPS-STAT-ID = VCLRPS01.CL-RPS-STAT-ID;
        converseLib.validationFailed(735);
        if (CLLREC.CL-PPD-COLL-IND != " ")
          KL0TM001.CL-PPD-COLL-IND = CLLREC.CL-PPD-COLL-IND;
        else
          if (KL0TM001.TF1CARCD == "0927"
           || KL0TM001.TF1CARCD == "0200")
            KL0TM001.CL-PPD-COLL-IND = "C"; /* prepaid/collect*/
            set KL0TM001.CL-PPD-COLL-IND skip;
          else
            KL0TM001.CL-PPD-COLL-IND = "P"; /* prepaid/collect*/
          end
        end
      end
      set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
      if (KL0TM001.CL-RPS-STAT-ID == " ")
        set KL0TM001.CL-RPS-STAT-ID cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(700);
      end
      if (KL0TM001.CL-RPS-STAT-ID == " ")
        if (CLAREC.CLACRTNB == 1)
          set KL0TM001.CL-RPS-STAT-ID cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(700);
        end
      end
    else
      if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
        KL0TM001.CL-RPS-STAT-ID = "M";
        if (KL0TM001.TF1CARCD == "0927"
         || KL0TM001.TF1CARCD == "0200")
          KL0TM001.CL-PPD-COLL-IND = "C"; /* prepaid/collect*/
          set KL0TM001.CL-PPD-COLL-IND skip;
        else
          KL0TM001.CL-PPD-COLL-IND = "P"; /* prepaid/collect*/
        end
        set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
        set KL0TM001.CL-RPS-NBR initialAttributes;
      end
    end
  end


  if (KL0TM001.CL-PPD-COLL-IND == " ") /* default ppd/coll to 'p' if blank*/
    KL0TM001.CL-PPD-COLL-IND = "P"; /* prepaid/collect 4/89 add comnt*/
  end

  if (KL0TM001.XWHCD == " ")
    set KL0TM001.XWHCD cursor;
  else
    if (KL0TM001.TF1CARCD == " ")
      set KL0TM001.TF1CARCD cursor;
    else
      set KL0TM001.CLACLMNB cursor;
    end
  end

  set KL0TM001.CL0TMSAM protect, invisible;
  set KL0TM001.CL0TMNBR protect, invisible;
  set KL0TM001.CL0TMCLM protect, invisible;


end // end KL0T102

// set up change-mode screen
Function KL0T103()
   /* ************************************************************/
   /* set up change-mode screen                             **/
   /* **/
   /* 08-10-90 CHELLM Protect the Comp-Co field if it's from    **/
   /* an existing claim.                        **/
   /* 10-12-90 bcourt change XCGCD to OP1COGID.                 **/
   /* 01-13-92 sgorga  Set ta2rec empty.                        **/
   /* 01-27-92 GDECKE  ADD RPS LOGIC.                           **/
   /* 01-27-92 GDECKE  CHANGE RPS STATUS,PPD/COLLECT DEFAULTS.  **/
   /* 08-10-92 GDECKE  CHANGE EDIT FOR RPS CARRIER CODE 200.    **/
   /* 08-13-93 JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.     **/
   /* 10-29-93 GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1     **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0T103"; /* set current process name*/

  set CLLREC empty;
  CL0TW01.CLLGROUP = CLLREC.CLLGROUP;

  if (CLWREC.CLWMXIDX > 0
   && "S" in CLWREC.CLWSELCD)
    KL0TM001.CLLRTNNB = CLWREC.CLWCLMNB[sysVar.arrayIndex];
  end

  KL0T124(); /* get cllrec, first & last dates,*/
                                   /* carton count*/


  KL0TM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0TM001.CL0TMLCN = CL0TW03.CL0TMLCN; /* last claim number*/
  KL0TM001.XWHCD = CLLREC.XWHCD;

  if (CL0TW03.TF1CARCD == "    "
   && CLWREC.TF1CARCD != "    ")
    CL0TW03.TF1CARCD = CLWREC.TF1CARCD;
    CLWREC.TF1CARCD = "    ";
    CL0TW03.CL0TMLCN = CLWREC.CLACLMNB;
    CLWREC.CLACLMNB = 0;
  end

  KL0TM001.TF1CARCD = CLLREC.TF1CARCD;

  KL0TM001.CLLNBRCV = CL0TW01.CLLNBRCV; /* tot crtns for return*/
  KL0TM001.CL0TMTC3 = CL0TW01.CL0TMTC3; /* tot crtns for claim*/
  KL0TM001.CL0TMFDT = CL0TW01.CL0TMFDT; /* first return date*/
  KL0TM001.CL0TMLDT = CL0TW01.CL0TMLDT; /* last return date*/
  KL0TM001.CL-PPD-COLL-IND = CLLREC.CL-PPD-COLL-IND;
                                           /* ppd/collect flag*/
  KL0TM001.CLLPDCCG = CLLREC.CLLPDCCG; /* ppd/collect charge*/
  if (CLLREC.CLLRTDSP == " ") /* if no return disposition*/
    KL0TM001.CLLRTDSP = "INSP"; /* default return disposition*/
  else
    KL0TM001.CLLRTDSP = CLLREC.CLLRTDSP; /* return disposition*/
  end
  KL0TM001.XXXUSRID = CLLREC.XXXUSRID; /* rcvd by userid*/

  if (CLAREC.CLATFIND == "Y") /* if traffic record exists*/
    KL0TS34(); /* get pro number for this claim*/
    KL0TM001.TF2PRONO = CLEREC.TF2PRONO;
  else
    KL0TM001.TF2PRONO = " ";
  end

  if (CLAREC.YCTCD == "CDR") /* if consumer-defective*/
    KL0T125(); /* get consumer last name*/
  end


  if (CLLREC.CLLWRDT == 0)
    CL0TW03.CLLWRDT = CLXREC.XXXCDTE; /* default to todays date*/
  else
    CL0TW03.CLLWRDT = CLLREC.CLLWRDT; /* use return record date*/
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = CL0TW03.CLLWRDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CL0TW03.CL0TMRDT = TA2REC.TA2GRGB; /* save formated receipt date*/
    KL0TM001.CL0TMRDT = CL0TW03.CL0TMRDT;
  else
    TA1REC.TA1TBLKE = "FORMATTING WHSE RECEIPT DATE";
    XPCL010(); /* abend*/
  end


  KL0TM001.KUCCOID = CLAREC.KUCCOID;
  KL0TM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0TM001.XNXCD = CLAREC.XNXCD;
  KL0TM001.XGPCD = CLAREC.XGPCD;
  KL0TM001.YCTCD = CLAREC.YCTCD;
  KL0TM001.YCRCD = CLAREC.YCRCD;
  KL0TM001.YCSCD = CLAREC.YCSCD1;
  KL0TM001.XDVCD = CLAREC.XDVCD; /* 4/89 div code*/
  KL0TM001.XBCCD = CLAREC.XBCCD;
  if (CLAREC.XBCCD in XBCTBL.XBCCD)
    KL0TM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
  else
    KL0TM001.XBCABRV = "NOTFND";
  end

  if (CLAREC.KUCCOID == CLWREC.KUCCOID /* move legal entity code*/
   && CLWREC.XLECD != "  "             
   && CLWREC.XLEABRV != "      ")     
    KL0TM001.XLEABRV = CLWREC.XLEABRV;
  else
    KUCREC.KUCCOID = CLAREC.KUCCOID;
    KL0TS73(); /* get company record, update clwrec &*/
                                   /* map*/
    KL0TM001.XLEABRV = CLWREC.XLEABRV;
  end

  KL0TM001.OP1COGID = CLAREC.OP1COGID;
  KL0TM001.OP1CMPNB = CLAREC.OP1CMPNB;
  set KL0TM001.OP1CMPNB skip; /* 08-09-90*/

  KL0TM001.XOBCD = CLAREC.XOBCD; /* base order type*/
  KL0TM001.XSOCD = CLAREC.XSOCD; /* sales office*/

  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M"
   && KL0TM001.CLACLMNB == 0
   && KL0TM001.CL0TMLCN != 0
   && CLWREC.CLWACTIV == "C")
    if (CL0TW01.CLLRTDSP == "INSP"
     || CL0TW01.CLLRTDSP == "RFSD")
      CLWREC.TF1CARCD = KL0TM001.TF1CARCD;
      CLWREC.CLACLMNB = KL0TM001.CL0TMLCN;
      COMMAREA.CATOAP = "KL06";
      if (CLAREC.CLACLMNB != KL0TM001.CL0TMLCN)
        CLAREC.CLACLMNB = KL0TM001.CL0TMLCN;
        CLAREC.CLACRTNB = CL0TW01.CLLRTNNB;
        CLWREC.CLAGROUP = CLAREC.CLAGROUP;
      end
      XPCL002();
    end
  end

  KL0T128(); /* get rtn auth record*/

  KL0TM001.CLJRAXDT = CLJREC.CLJRAXDT;

    /* DECIDE WHETHER TO SHOW RPS TITLE AND STATUS VALUE.*/
    /* GET RPS LABEL LINE IF ONE EXISTS.*/

  set KL0TM001.CL-RPS-STAT-ID skip;
  CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "N";
  if (CLJREC.CL-RPS-LABL-FL == "Y")
    set VCLRPS01 empty;
    VCLRPS01.CLACLMNB = CLAREC.CLACLMNB;
    KL0TS-GET-RPS-LINE();
    if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y")
      if (VCLRPS01.CL-RPS-STAT-ID == "A")
        if (KL0TM001.TF1CARCD == "0927"
         || KL0TM001.TF1CARCD == "0200")
          KL0TM001.CL-PPD-COLL-IND = "C";
          KL0TM001.CL-RPS-STAT-ID = "R";
          set KL0TM001.CL-PPD-COLL-IND skip;
        else
          KL0TM001.CL-PPD-COLL-IND = "P";
          KL0TM001.CL-RPS-STAT-ID = "O";
        end
      else
        KL0TM001.CL-RPS-STAT-ID = VCLRPS01.CL-RPS-STAT-ID;
        converseLib.validationFailed(735);
        if (CLLREC.CL-PPD-COLL-IND != " ")
          KL0TM001.CL-PPD-COLL-IND = CLLREC.CL-PPD-COLL-IND;
        else
          if (KL0TM001.TF1CARCD == "0927"
           || KL0TM001.TF1CARCD == "0200")
            KL0TM001.CL-PPD-COLL-IND = "C";
            set KL0TM001.CL-PPD-COLL-IND skip;
          else
            if (KL0TM001.CL-PPD-COLL-IND == " ")
              KL0TM001.CL-PPD-COLL-IND = "P";
            end
          end
        end
      end
      set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
      set KL0TM001.CL-RPS-NBR initialAttributes;
    else
      if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
        if (KL0TM001.TF1CARCD == "0927"
         || KL0TM001.TF1CARCD == "0200")
          KL0TM001.CL-PPD-COLL-IND = "C";
          set KL0TM001.CL-PPD-COLL-IND skip;
        else
          if (KL0TM001.CL-PPD-COLL-IND == " ")
            KL0TM001.CL-PPD-COLL-IND = "P";
          end
        end
        KL0TM001.CL-RPS-STAT-ID = "M";
        set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
        set KL0TM001.CL-RPS-NBR initialAttributes;
      end
    end
  end


  KL0TS41(); /* get address*/
  KL0TS71(); /* get order number*/

  KL0TS45(); /* expand gpc*/
  KL0TS46(); /* expand claim type*/
  KL0TS47(); /* expand claim reason*/
  KL0TS32(); /* expand carrier*/
  KL0TS30(); /* expand warehouse*/
  KL0TSDV(); /* expand div code*/
  KL0TSBO(); /* expand base order type*/
  KL0TSSO(); /* expand sales office*/
  KL0TSBC(); /* expand brand code*/
  KL0TSCM(); /* expand comp-co id*/
  KL0TSCG(); /* expand cogs-co id*/

  if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* claim status*/
    KL0TM001.YCSSDESC = YCSTBL.YCSSDESC[sysVar.arrayIndex];
  else
    KL0TM001.YCSSDESC = "NOT FOUND";
  end


  if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
    if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "N")
      set KL0TM001.YCSCD skip;
    end
    if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N") /* if cant change claim*/
      KL0T109(); /* protect all fields*/
      if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "N") /* or status*/
        CLWREC.CLWACTIV = "I"; /* force to inquiry mode*/
        converseLib.validationFailed(26); /* changed to inquiry mode due to clm*/
                                   /* status*/
      else
        if (YCSTBL.YCSACHGF[sysVar.arrayIndex] == "Y") /* if can change status*/
          converseLib.validationFailed(27); /* only claim status may be changed*/
        end
      end
      return;
    end
  end


  if (CLWREC.CLWMXIDX > 0) /* we are processing array*/
    if (CLWREC.CLWCLIDX < 1
     || CLWREC.CLWCLIDX > CLWREC.CLWMXIDX)
      CLXREC.CLXARAYX = 1;
    else
      CLXREC.CLXARAYX = CLWREC.CLWCLIDX; /* save starting index*/
      while (CLXREC.CLXARAYX <= CLWREC.CLWMXIDX
       && CLWREC.CLWSELCD[CLXARAYX] != "S"
       && CLWREC.CLWSELCD[CLXARAYX] != "P")
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      end
      if (CLXREC.CLXARAYX > 200) /* this should never happen, but....*/
        CLXREC.CLXARAYX = CLWREC.CLWCLIDX; /* reset just in case*/
      end
    end
  end




end // end KL0T103

// check menu opt on sales sample
Function KL0T104()
   /* ************************************************************/
   /* *   check menu option on sales sample claims              **/
   /* *                                                         **/
   /* * 11-21-90 gdecke create                                  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T104"; /* set current process name*/



  CL0TW01.CL0TWSAM = "N"; /* init. sales sample claim flag*/
  if (CLAREC.CLAORIGI == "B") /* if origin is sales sample batch*/
                                   /* gener.*/
    if (CLWREC.CLWMNOPT == 4 /* get and show the sales sample claim nbr.*/
     || CLWREC.CLWMNOPT == 14
     || CLWREC.CLWMNOPT == 16
     || CLWREC.CLWMNOPT == 17)
      KL0TSSC(); /* get sample claim number from comment line*/
      set KL0TM001.CL0TMSAM initialAttributes;
      set KL0TM001.CL0TMNBR initialAttributes;
      set KL0TM001.CL0TMCLM initialAttributes;
      if (CL0TW01.CL0TWSAM == "N") /* if sample claim nbr not found*/
        if (CLXREC.CLXERRF == "Y")
          /* NEXT SENTENCE*/
        else
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(659);
          set KL0TM001.CL0TMCLM cursor, modified, bold;
        end
      else
        KL0TM001.CL0TMCLM = CL0TW01.CL0TWCLM[1];
      end
    else
      set KL0TM001.CL0TMSAM initialAttributes;
      set KL0TM001.CL0TMNBR initialAttributes;
      CLXREC.CLXERRF = "Y"; /* wrong menu option for sample claim*/
      converseLib.validationFailed(670);
      set KL0TM001.CL0TMCLM cursor, modified, bold;
    end
  else
    set KL0TM001.CL0TMSAM protect, invisible;
    set KL0TM001.CL0TMNBR protect, invisible;
    set KL0TM001.CL0TMCLM protect, invisible;
  end

  if (CLAREC.CLAORIGI != "B") /* if origin is not sales sample batch gener.*/
    if (CLWREC.CLWMNOPT == 16 /* but menu option is for sales sample claims*/
     || CLWREC.CLWMNOPT == 17) /* show error message*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(233);
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.CL0TMSAM protect, invisible;
      set KL0TM001.CL0TMNBR protect, invisible;
      set KL0TM001.CL0TMCLM protect, invisible;
    end
  end


  if (CL0TW01.CL0TWSWF != "Y") /* sales sample warning previously viewed.*/
    if (CLAREC.CLAORIGI == "B" /* if origin is sales sample batch*/
     /* gener.*/
     && CLWREC.CLWMNOPT == 7)  /* and menu option is not sales sample claims*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(676); /* claim not valid for menu option*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.CL0TMSAM protect, invisible;
      set KL0TM001.CL0TMNBR protect, invisible;
      set KL0TM001.CL0TMCLM protect, invisible;
    end
  end


end // end KL0T104

// get total cartons
Function KL0T108()
   /* *************************************************************/
   /* *     get total cartons for warehouse/receipt date and     **/
   /* *     warehouse/receipt date/carrier.                      **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized sqlca empty.                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T108"; /* set current process name*/


  if (KL0TM001.XWHCD == " " /* if no warehouse*/
   || KL0TM001.CL0TMRDT == " ") /* or no receipt date*/
    return; /* can't get carton records*/
  end


  CLZREC.XWHCD = KL0TM001.XWHCD; /* select record for this*/
  CLZREC.CLLWRDT = CL0TW03.CLLWRDT; /* warehouse and receipt date*/
  CLZREC.TF1CARCD = " ";
  set SQLCA empty;
  call "IO2830" ("S ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* if found a record*/
    KL0TM001.CL0TMTC1 = CLZREC.CLLNBRCV; /* whse/date*/
    CL0TW01.CL0TMTC1 = 0; /* whse/date*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record NOT found*/
      KL0TM001.CL0TMTC1 = 0; /* zero whse/date carton ttl*/
      CL0TW01.CL0TMTC1 = 0; /* whse/date*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  end


  CLZREC.XWHCD = KL0TM001.XWHCD; /* select record for this*/
  CLZREC.CLLWRDT = CL0TW03.CLLWRDT; /* warehouse and receipt date*/
  CLZREC.TF1CARCD = KL0TM001.TF1CARCD; /* and carrier*/
  call "IO2830" ("S ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes};
  set SQLCA empty;
  if (SQLCA.VAGen_SQLCODE == 0) /* if found a record*/
    KL0TM001.CL0TMTC2 = CLZREC.CLLNBRCV; /* whse/date/carrier*/
    CL0TW01.CL0TMTC2 = CLZREC.CLLNBRCV;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record NOT found*/
      KL0TM001.CL0TMTC2 = 0; /* zero whse/date/carrier carton ttl*/
      CL0TW01.CL0TMTC2 = 0; /* zero whse/date/carrier carton ttl*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  end


end // end KL0T108

// protect all screen fields
Function KL0T109()
   /* ************************************************************/
   /* *   protect all screen fields                             **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G       **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR   DESCRIPTION                            **/
   /* *---------------------------------------------------------**/
   /* * 08-10-90  chellm  Added comp-co (OP1CMPNB)              **/
   /* * 01/27/92  GDECKE  ADDED RPS LOGIC                       **/
   /* * 03/03/93  sgorga  Added ts-nike-pl-nbr.                 **/
   /* * 08/13/93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T109"; /* set current process name*/


  if (CLWREC.CLWMNOPT != 7
   && CLWREC.CLWMNOPT != 16)
    set KL0TM001.XWHCD skip;
    set KL0TM001.CL0TMRDT skip;
    set KL0TM001.TF1CARCD skip;
    set KL0TM001.TF2PRONO skip;
    set KL0TM001.CLACLMNB skip;
    set KL0TM001.CLLRTNNB skip;
  end


  set KL0TM001.CL-PPD-COLL-IND skip;
  set KL0TM001.CL-RPS-STAT-ID skip;
  set KL0TM001.CLLPDCCG skip;
  set KL0TM001.KUCCOID skip;
  set KL0TM001.KUMSTRID skip;
  set KL0TM001.OP1CMPNB skip; /* 08-10-90*/
  set KL0TM001.XNXCD skip;
  set KL0TM001.CL0TMCLN skip;
  set KL0TM001.OP1CUOID skip;
  set KL0TM001.OP1NORID skip;
  set KL0TM001.TS-NIKE-PL-NBR skip; /* 03/03/93*/
  set KL0TM001.CLLNBRCV skip;
  set KL0TM001.CLFADNM skip;
  set KL0TM001.XXXADDR1 skip;
  set KL0TM001.XXXADDR2 skip;
  set KL0TM001.XXXADDR3 skip;
  set KL0TM001.XXXCITY skip;
  set KL0TM001.XSTCD skip;
  set KL0TM001.XCTCD skip;
  set KL0TM001.XXXZIP skip;
  set KL0TM001.XGPCD skip;
  set KL0TM001.YCTCD skip;
  set KL0TM001.YCRCD skip;
  set KL0TM001.XDVCD skip; /* 4/89 division*/
  set KL0TM001.XOBCD skip; /* base order type*/
  set KL0TM001.XSOCD skip; /* sales office*/
  set KL0TM001.CLLRTDSP skip;
  set KL0TM001.XBCCD skip; /* 5/90 brand*/


end // end KL0T109

// handle screen m001 spec entrys
Function KL0T110()
   /* ************************************************************/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized the sqlca record.           **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T110"; /* set current process name*/


  if (converseVar.eventKey is enter)
    if (KL0TM001.CATOAP == " " /* if no fast-path requested*/
     && KL0TM001.CAITEM == " ") /* and item is blank*/
       /* next sentence*/
    else
      if (KL0TM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0TM001.CATOAP;
        COMMAREA.CAITEM = KL0TM001.CAITEM;
        if (KL0TM001.CL0TMLCN != 0
         || CLWREC.CLWMNOPT == 7
         || CLWREC.CLWMNOPT == 16)
          set CLAREC empty;
          CLAREC.CLACLMNB = KL0TM001.CL0TMLCN;
          set SQLCA empty;
          call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get header*/
          if (SQLCA.VAGen_SQLCODE != 0)
            set CLAREC empty;
          end
        end
        XPCL002();
        CLXREC.CLXERRF = "Y";
        return;
      else
        if (KL0TM001.CATOAP == " "
         && KL0TM001.CAITEM != " ")
          converseLib.validationFailed(1); /* item not valid without option*/
          set KL0TM001.CAITEM cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    return;
  end




  if (converseVar.eventKey is pf1)
    KL0TS01(); /* exit to help application*/
    return;
  end


  if (converseVar.eventKey is pf3) /* exit to claims menu*/
    KL0TS03();
    return;
  end


  if (converseVar.eventKey is pf4) /* exit to nike master menu*/
    KL0TS04();
    return;
  end


  if (converseVar.eventKey is pf5 /* exit to claim header*/
   && CL0TW01.CL0TWACT == "I")    /* and in inquiry mode*/
    if (CLAREC.CLACLMNB == 0
     && KL0TM001.CL0TMLCN != 0)
      set CLAREC empty;
      CLAREC.CLACLMNB = KL0TM001.CL0TMLCN;
    end
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end


  if (converseVar.eventKey is pf20 /* screen refresh*/
   && CL0TW01.CL0TWACT == "A")     /* and in add/change mode*/
    return; /* it's ok*/
  end


  if (converseVar.eventKey is pf18) /* or going to comments*/
    return;
  end


  if (converseVar.eventKey is pf12) /* validate only*/
    return;
  end


  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62); /* pa keys cause loss of data*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    return;
  else
    converseLib.validationFailed(2); /* invalid pf key*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    return;
  end





end // end KL0T110

// set up 'enter' flow
Function KL0T111()
   /* ************************************************************/
   /* *     this process handles the control of flow to the     **/
   /* *        next application when the enter key is pressed.  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E111"; /* set current process name*/


  if (CL0TW01.CL0TWSIA == "Y") /* if supposed to stay in this application*/
    COMMAREA.CATOAP = "KL0E";
    return;
  end



  XSCLSFL(); /* set next application*/


end // end KL0T111

// test if fields modified
Function KL0T112()
   /* ************************************************************/
   /* *    test if fields are modified to set edit flag         **/
   /* ************************************************************/
   /*  */
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR     DESCRIPTION                          **/
   /* *---------------------------------------------------------**/
   /* * 01/21/91  GDECKE   ADD RPS LOGIC.                       **/
   /* * 03/12/93  sgorga   Added pack list nbr to logic.        **/
   /* * 08/13/93  JCAREY   CHANGED CLLPDCFL TO CL-PPD-COLL-IND. **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E112"; /* set current process name*/


  CL0TW01.CL0TWSFC = "Y"; /* init screen-fields-changed flag*/
  CL0TW01.CL0TWSMF = "N"; /* init screen-modified-flag*/
  CLXREC.CLXEDITF = "N"; /* init do-edits-flag*/


  if (KL0TM001.XWHCD == CL0TW05.XWHCD 
   && KL0TM001.CL0TMRDT == CL0TW05.CL0TMRDT
   && KL0TM001.TF1CARCD == CL0TW05.TF1CARCD
   && KL0TM001.TF2PRONO == CL0TW05.TF2PRONO
   && KL0TM001.CL-PPD-COLL-IND == CL0TW05.CL-PPD-COLL-IND
   && KL0TM001.CL-RPS-STAT-ID == CL0TW05.CL-RPS-STAT-ID
   && KL0TM001.CLLPDCCG == CL0TW05.CLLPDCCG
   && KL0TM001.CLACLMNB == CL0TW05.CLACLMNB
   && KL0TM001.CLLRTNNB == CL0TW05.CLLRTNNB
   && KL0TM001.KUCCOID == CL0TW05.KUCCOID
   && KL0TM001.XNXCD == CL0TW05.XNXCD 
   && KL0TM001.CL0TMCLN == CL0TW05.CL0TMCLN
   && KL0TM001.OP1CUOID == CL0TW05.OP1CUOID
   && KL0TM001.TS-NIKE-PL-NBR == CL0TW05.TS-NIKE-PL-NBR
   && KL0TM001.OP1CUOID == CL0TW05.OP1CUOID
   && KL0TM001.CLLNBRCV == CL0TW05.CLLNBRCV
   && KL0TM001.XGPCD == CL0TW05.XGPCD 
   && KL0TM001.YCTCD == CL0TW05.YCTCD 
   && KL0TM001.YCRCD == CL0TW05.YCRCD 
   && KL0TM001.XDVCD == CL0TW05.XDVCD /* 4/89 division*/
   && KL0TM001.XOBCD == CL0TW05.XOBCD /* base order type*/
   && KL0TM001.XSOCD == CL0TW05.XSOCD /* sales office*/
   && KL0TM001.CLLRTDSP == CL0TW05.CLLRTDSP
   && KL0TM001.CLFADNM == CL0TW05.CLFADNM
   && KL0TM001.XXXADDR1 == CL0TW05.XXXADDR1
   && KL0TM001.XXXADDR2 == CL0TW05.XXXADDR2
   && KL0TM001.XXXADDR3 == CL0TW05.XXXADDR3
   && KL0TM001.XXXCITY == CL0TW05.XXXCITY
   && KL0TM001.XSTCD == CL0TW05.XSTCD 
   && KL0TM001.XXXZIP == CL0TW05.XXXZIP
   && KL0TM001.XBCCD == CL0TW05.XBCCD)
    CL0TW01.CL0TWSFC = "N"; /* screen fields changed flag*/
  end


  if (KL0TM001 is modified)
    CL0TW01.CL0TWSMF = "Y"; /* yes, screen was modified*/
  end


  if (CL0TW01.CL0TWSMF == "Y") /* if screen was modified*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf2
     || converseVar.eventKey is pf5
     || converseVar.eventKey is pf12)
      CLXREC.CLXEDITF = "Y";
    end
  end



end // end KL0T112

// set do-updates flag
Function KL0T113()
   /* ************************************************************/
   /* *    set the do-updates flag                              **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E113"; /* set current process name*/



  CLXREC.CLXUPDTF = "N"; /* init to dont-update*/


  if (CL0TW01.CL0TWSFC == "Y") /* screen field changed*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12)
      if (CL0TW01.CL0TWCMB == "N") /* if CL0T121 had no combo edit errs,*/
        KL0TS72(); /* protect fields*/
      end /* 5/89 do S72 only if new flag = N*/
    end
    return;
  else
    if (converseVar.eventKey is pf20 /* if want refresh of screen*/
     || converseVar.eventKey is pf12) /* validate only*/
      return;
    end
  end


  if (CLXREC.CLXEDITF == "Y" /* if we did edits*/
   && CLXREC.CLXERRF == "N") /* and there are no errors*/
    CLXREC.CLXUPDTF = "Y"; /* do updates*/
  end


end // end KL0T113

// set up pf-key branch
Function KL0T114()
   /* ************************************************************/
   /* *       set up the next application to flow to            **/
   /* *           if a pf-key was pressed                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E114"; /* set current process name*/

  if (converseVar.eventKey is pf18)
    if (CL0TW03.CL0TMLCN != 0
     || CLWREC.CLWMNOPT == 7
     || CLWREC.CLWMNOPT == 16)
      set CLAREC empty;
      set SQLCA empty;
      CLAREC.CLACLMNB = CL0TW03.CL0TMLCN;
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE != 0)
        set CLAREC empty;
      end
    else
      if (CLAREC.CLACLMNB == 0
       && CL0TW03.CL0TMLCN == 0)
        converseLib.validationFailed(530); /* must have claim number displayed*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
    COMMAREA.CATOAP = "KL0G";
    return;
  end


end // end KL0T114

// set flow-to-next-screen flag
Function KL0T115()
   /* *************************************************************/
   /* set the flow-to-next-process-flag                    **/
   /* **/
   /* this flag controls whether or not we go on to         **/
   /* the next application or stay here.                    **/
   /* **/
   /* MAINTENANCE HISTORY                                       **/
   /* 03-26-93  sgorga  Set pack list warning flag to 'N'.       **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0T115"; /* set current process name*/

  CL0TW01.CL0TWFLO = "N"; /* initialize flow-flag*/


  if (converseVar.eventKey is pf12) /* validate only*/
    if (CLXREC.CLXERRF == "N") /* no errors*/
      converseLib.validationFailed(340); /* all edits passed*/
      CLXREC.CLXERRF = "Y"; /* to prevent redisplay*/
    end
    return;
  end


  if (CLXREC.CLXUPDTF == "Y" /* if we were supposed to update*/
   && CL0TW01.CL0TWUOK == "Y") /* and the update went ok*/
    CL0TW01.CL0TWPWF = "N";
    CL0TW01.CL0TWFWF = "N";
    CL0TW01.CL0TWSWF = "N"; /* sales sample warning flag*/
    CL0TW01.CL0TWCWF = "N";
    CL0TW01.CL0TWRXF = "N";
    CL0TW01.CL0TWGXF = "N";
    CL0TW01.CL0TW-PL-WARN-FL = "N"; /* 3-26-93  pack list warning flag*/
    set CLAREC empty;
    CLXREC.CLXBLDSC = "Y"; /* want to build screen*/
    return;
  end


  if (converseVar.eventKey is pf20) /* or want to refresh the screen*/
    CL0TW01.CL0TWPWF = "N";
    CL0TW01.CL0TWFWF = "N";
    CL0TW01.CL0TWSWF = "N"; /* sales sample warning flag*/
    CL0TW01.CL0TWCWF = "N";
    CL0TW01.CL0TW-PL-WARN-FL = "N"; /* 3-26-93  pack list warning flag*/
    set CLAREC empty;
    CLXREC.CLXBLDSC = "Y"; /* want to build screen*/
    return;
  end


  if (CL0TW01.CL0TWACT == "I") /* if in inquiry mode*/
    if (COMMAREA.CAFROMAP == "KL02"
     && converseVar.eventKey is enter)
       /* next sentence*/
    else
      CL0TW01.CL0TWFLO = "Y"; /* yes, we want to flow*/
      return;
    end
  else
    if (converseVar.eventKey is pf18) /* to comments*/
      CL0TW01.CL0TWFLO = "Y";
    end
  end




end // end KL0T115

// set fields modified
Function KL0T116()
   /* ************************************************************/
   /* *     if any screen field is modified, set it modified    **/
   /* *        in case the screen has to be re-conversed.       **/
   /* *---------------------------------------------------------**/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR     DESCRIPTION                          **/
   /* *---------------------------------------------------------**/
   /* * 01/27/92  GDECKE   ADDED RPS LOGIC.                     **/
   /* * 03/05/93  sgorga   Added ts-nike-pl-nbr (pack list nbr).**/
   /* * 08/13/93  JCAREY   CHANGED CLLPDCFL TO CL-PPD-COLL-IND. **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E116"; /* set current process name*/



  if (KL0TM001.XWHCD is modified)
    set KL0TM001.XWHCD modified;
  end

  if (KL0TM001.CL0TMRDT is modified)
    set KL0TM001.CL0TMRDT modified;
  end

  if (KL0TM001.TF1CARCD is modified)
    set KL0TM001.TF1CARCD modified;
  end

  if (KL0TM001.TF2PRONO is modified)
    set KL0TM001.TF2PRONO modified;
  end

  if (KL0TM001.CL-PPD-COLL-IND is modified)
    set KL0TM001.CL-PPD-COLL-IND modified;
  end

  if (KL0TM001.CL-RPS-STAT-ID is modified)
    set KL0TM001.CL-RPS-STAT-ID modified;
  end

  if (KL0TM001.CLLPDCCG is modified)
    set KL0TM001.CLLPDCCG modified;
  end

  if (KL0TM001.CL0TMCLM is modified)
    set KL0TM001.CL0TMCLM modified;
  end

  if (KL0TM001.CLACLMNB is modified)
    set KL0TM001.CLACLMNB modified;
  end

  if (KL0TM001.CLLRTNNB is modified)
    set KL0TM001.CLLRTNNB modified;
  end

  if (KL0TM001.KUCCOID is modified)
    set KL0TM001.KUCCOID modified;
  end

  if (KL0TM001.KUMSTRID is modified)
    set KL0TM001.KUMSTRID modified;
  end

  if (KL0TM001.XNXCD is modified)
    set KL0TM001.XNXCD modified;
  end

  if (KL0TM001.CL0TMCLN is modified)
    set KL0TM001.CL0TMCLN modified;
  end

  if (KL0TM001.OP1CUOID is modified)
    set KL0TM001.OP1CUOID modified;
  end

  if (KL0TM001.OP1NORID is modified)
    set KL0TM001.OP1NORID modified;
  end

  if (KL0TM001.TS-NIKE-PL-NBR is modified)
    set KL0TM001.TS-NIKE-PL-NBR modified;
  end

  if (KL0TM001.CLLNBRCV is modified)
    set KL0TM001.CLLNBRCV modified;
  end

  if (KL0TM001.CLFADNM is modified)
    set KL0TM001.CLFADNM modified;
  end

  if (KL0TM001.XXXADDR1 is modified)
    set KL0TM001.XXXADDR1 modified;
  end

  if (KL0TM001.XXXADDR2 is modified)
    set KL0TM001.XXXADDR2 modified;
  end

  if (KL0TM001.XXXADDR3 is modified)
    set KL0TM001.XXXADDR3 modified;
  end

  if (KL0TM001.XXXCITY is modified)
    set KL0TM001.XXXCITY modified;
  end

  if (KL0TM001.XSTCD is modified)
    set KL0TM001.XSTCD modified;
  end

  if (KL0TM001.XXXZIP is modified)
    set KL0TM001.XXXZIP modified;
  end

  if (KL0TM001.YCTCD is modified)
    set KL0TM001.YCTCD modified;
  end

  if (KL0TM001.XGPCD is modified)
    set KL0TM001.XGPCD modified;
  end

  if (KL0TM001.YCRCD is modified)
    set KL0TM001.YCRCD modified;
  end

  if (KL0TM001.XDVCD is modified) /* 4/89 division cd*/
    set KL0TM001.XDVCD modified;
  end

  if (KL0TM001.XBCCD is modified) /* 5/90 brand cd*/
    set KL0TM001.XBCCD modified;
  end

  if (KL0TM001.XOBCD is modified) /* 4/89 base order type*/
    set KL0TM001.XOBCD modified;
  end

  if (KL0TM001.XSOCD is modified) /* 4/89 sales office*/
    set KL0TM001.XSOCD modified;
  end

  if (KL0TM001.CLLRTDSP is modified)
    set KL0TM001.CLLRTDSP modified;
  end




end // end KL0T116

// save screen fields
Function KL0T117()
   /* ************************************************************/
   /* *     save all screen fields for checking if they         **/
   /* *     change on the next screen converse.                 **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *  DATE      PGMR        DESCRIPTION                      **/
   /* *---------------------------------------------------------**/
   /* * 01/27/92  GDECKE   ADD RPS LOGIC.                       **/
   /* * 03/12/93  sgorga   Add move of pack list # to cl0tw05.  **/
   /* * 08-13-93  JCAREY   CHANGED CLLPDCFL TO CLL-PPD-COLL-IND.**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T117"; /* set current process name*/


  CL0TW05.XWHCD = KL0TM001.XWHCD;
  CL0TW05.CL0TMRDT = KL0TM001.CL0TMRDT;
  CL0TW05.TF1CARCD = KL0TM001.TF1CARCD;
  CL0TW05.TF2PRONO = KL0TM001.TF2PRONO;
  CL0TW05.CL-PPD-COLL-IND = KL0TM001.CL-PPD-COLL-IND;
  CL0TW05.CL-RPS-STAT-ID = KL0TM001.CL-RPS-STAT-ID;
  CL0TW05.CLLPDCCG = KL0TM001.CLLPDCCG;
  CL0TW05.CLACLMNB = KL0TM001.CLACLMNB;
  CL0TW05.CLLRTNNB = KL0TM001.CLLRTNNB;
  CL0TW05.KUCCOID = KL0TM001.KUCCOID;
  CL0TW05.KUMSTRID = KL0TM001.KUMSTRID;
  CL0TW05.XNXCD = KL0TM001.XNXCD;
  CL0TW05.CL0TMCLN = KL0TM001.CL0TMCLN;
  CL0TW05.OP1CUOID = KL0TM001.OP1CUOID;
  CL0TW05.OP1NORID = KL0TM001.OP1NORID;
  CL0TW05.TS-NIKE-PL-NBR = KL0TM001.TS-NIKE-PL-NBR;
  CL0TW05.CLLNBRCV = KL0TM001.CLLNBRCV;
  CL0TW05.XGPCD = KL0TM001.XGPCD;
  CL0TW05.YCTCD = KL0TM001.YCTCD;
  CL0TW05.YCRCD = KL0TM001.YCRCD;
  CL0TW05.XBCCD = KL0TM001.XBCCD;
  if (CL0TW01.CL0TWCMB == "N") /* 5/89 don't hold if edit not done*/
    CL0TW05.XDVCD = KL0TM001.XDVCD; /* 4/89 division cd*/
    CL0TW05.XOBCD = KL0TM001.XOBCD; /* base order type*/
    CL0TW05.XSOCD = KL0TM001.XSOCD; /* sales office*/
  end
  CL0TW05.CLLRTDSP = KL0TM001.CLLRTDSP;
  CL0TW05.CLFADNM = KL0TM001.CLFADNM;
  CL0TW05.XXXADDR1 = KL0TM001.XXXADDR1;
  CL0TW05.XXXADDR2 = KL0TM001.XXXADDR2;
  CL0TW05.XXXADDR3 = KL0TM001.XXXADDR3;
  CL0TW05.XXXCITY = KL0TM001.XXXCITY;
  CL0TW05.XSTCD = KL0TM001.XSTCD;
  CL0TW05.XXXZIP = KL0TM001.XXXZIP;



end // end KL0T117

// process screen m001 entries
Function KL0T120()
   /* ************************************************************/
   /* this process handles all edits of screen fields     **/
   /* **/
   /* **/
   /* Maintenance History:                                      **/
   /* **/
   /* 12-05-89 CHELLM to prevent TA0111 FYIs from being gen'ed  **/
   /* when HD/PMY Ivc's mis-match dont edit the order  **/
   /* number when it's just being zeroed out.          **/
   /* 09-03-91 twatso added cl0ts45 after the conversion edit   **/
   /* 04-06-92 twatso added the rps set cursor bright if ' '    **/
   /* 08-10-92 GDECKE  ADD EDIT FOR RPS CARRIER CODE 200.       **/
   /* 02-12-93 sgorga  Replaced iv0rec fields with ivbrec.      **/
   /* 08-13-93 JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.     **/
   /* 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04.            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T120"; /* set current process name*/


  CLXREC.CLXERRF = "N"; /* init errors-on-screen flag*/
  CL0TW01.CL0TWRAE = "N"; /* init rtn-auth exists flag*/
  CL0TW01.CL0TWCNV = "Y"; /* init claim-number-is-valid-flag*/
  CL0TW01.CL0TWDDF = "Y"; /* disp can default*/


  KL0T121(); /* check for correct cross-combinations*/


  if (CLXREC.CLXERRF == "Y") /* if there was an error*/
    return;
                                   /* ; cant continue...go back*/
  end


  if (CLAREC.CLAORIGI == "B") /* if sales sample claim*/
    if (CLWREC.CLWMNOPT == 4
     || CLWREC.CLWMNOPT == 14
     || CLWREC.CLWMNOPT == 16
     || CLWREC.CLWMNOPT == 17)
      KL0TSSE(); /* edit for paired sample clm from*/
                                   /* comment*/
    else
      set KL0TM001.CL0TMSAM protect, invisible;
                                   /* initialize sales sample clm nbr.*/
      set KL0TM001.CL0TMNBR protect, invisible; /* and literal attributes*/
      set KL0TM001.CL0TMCLM protect, invisible;
    end
  else
    set KL0TM001.CL0TMSAM protect, invisible; /* initialize sales sample clm nbr.*/
    set KL0TM001.CL0TMNBR protect, invisible; /* and literal attributes*/
    set KL0TM001.CL0TMCLM protect, invisible;
  end


  KL0TS36(); /* validate freight charges*/


  KL0TS35(); /* validate pre-paid/collect flag*/


  KL0TS32(); /* validate carrier*/
  if (CLXREC.CLXERRF == "N") /* if no error*/
    KL0TS34(); /* validate pro number*/
  end

  KL0TS31(); /* validate date received*/

  KL0TS30(); /* validate warehouse*/

  if (converseVar.eventKey is pf20) /* if only want screen refresh*/
    return;
  end


    /* if cl2320 finds an open rfl claim against an order*/
      /* it returns "rfl" in the second ycscd bucket of cl0tw08*/
      /* and puts the associated claim number in the*/
      /* cl0tw08.claclmnb*/


  if (KL0TM001.OP1CUOID != CLBREC.OP1CUOID /* if order number changed*/
   || KL0TM001.OP1NORID != CLBREC.OP1NORID)
    if (KL0TM001.OP1CUOID != 0) /* and order not zeroed out(12-05-89)*/
      KL0T123(); /* validate order number*/
      if (CLXREC.CLXORDFD == "N") /* if order was not found*/
        return;
      end
      if (CL0TW08.CL0TWRTN == "Y" /* if there are open rts/rfl clms*/
       && CL0TW08.YCSCD[2] == "RFL") /* cl2320 rtns rfl if found*/
        KL0TM001.CLACLMNB = CL0TW08.CLACLMNB;
      end
    end
  else
    if (KL0TM001.OP1CUOID != 0
     && KL0TM001.CLLRTDSP == "NCLM")
      KL0T123(); /* validate order number*/
      if (CLXREC.CLXORDFD == "N") /* if order was not found*/
        return;
      end
    end
  end


  if (KL0TM001.CLACLMNB != CLAREC.CLACLMNB) /* if claim number changed*/
    KL0T122(); /* validate claim number*/
  end

   /* TCS Change begin - 07/17/01*/
  CLCREC.CLACLMNB = KL0TM001.CLACLMNB; /* Claim number*/
   /* Primary Flag*/
  CLCREC.CLCPMAR = "Y";
  KL0TS80(); /* Select SAP Rtn SO Nbr*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
    KL0TM001.ARCREFNB = CLCREC.ARCREFNB; /* SAP Rtn SO Nbr*/
  end

  KL0TS81(); /* Close cursor*/

   /* TCS Change end   - 07/17/01*/

  if (CL0TW01.CL0TWCNV == "N") /* if claim number was not valid*/
    return;
  end


  if (KL0TM001.CLACLMNB != 0) /* if claim number changed*/
    KL0T124(); /* get first, last, tot ctns for claim*/
    KL0TM001.CL0TMTC3 = CL0TW01.CL0TMTC3; /* tot crtns for claim*/
    KL0TM001.CL0TMFDT = CL0TW01.CL0TMFDT; /* first return date*/
    KL0TM001.CL0TMLDT = CL0TW01.CL0TMLDT; /* last return date*/
    KL0T128(); /* get rtn auth record*/
    KL0TM001.CLJRAXDT = CLJREC.CLJRAXDT;
  else
    CL0TW01.CL0TWUTR = "N"; /* reset update this return flag*/
  end

   /* 4-9-92 bcourt*/
  set KL0TM001.CL-RPS-STAT-ID skip;
  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "N") /* add*/
   /* MOVE 'N' TO CL0TW01.CL0TW-RPS-NBR-FOUND-FL;*/
    if (CLJREC.CL-RPS-LABL-FL == "Y") /* IF CLAIM HAS RPS LABELS*/
      set VCLRPS01 empty;
      VCLRPS01.CLACLMNB = CLAREC.CLACLMNB;
      KL0TS-GET-RPS-LINE();
      if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y")
        if (VCLRPS01.CL-RPS-STAT-ID == "A")
          if (KL0TM001.TF1CARCD == "0927"
           || KL0TM001.TF1CARCD == "0200")
            KL0TM001.CL-PPD-COLL-IND = "C";
            KL0TM001.CL-RPS-STAT-ID = "R";
            set KL0TM001.CL-PPD-COLL-IND skip;
          else
            KL0TM001.CL-PPD-COLL-IND = "P";
            KL0TM001.CL-RPS-STAT-ID = "O";
          end
        else
          KL0TM001.CL-RPS-STAT-ID = VCLRPS01.CL-RPS-STAT-ID;
          converseLib.validationFailed(735);
          if (CLLREC.CL-PPD-COLL-IND != " ")
            KL0TM001.CL-PPD-COLL-IND = CLLREC.CL-PPD-COLL-IND;
          else
            if (KL0TM001.TF1CARCD == "0927"
             || KL0TM001.TF1CARCD == "0200")
              KL0TM001.CL-PPD-COLL-IND = "C";
              set KL0TM001.CL-PPD-COLL-IND skip;
            else
              KL0TM001.CL-PPD-COLL-IND = "P";
            end
          end
        end
        KL0TS-EDIT-RPS-ST(); /* validate RPS STATUS CODE*/
        if (CLXREC.CLXERRF != "Y")
          set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
          set KL0TM001.CL-RPS-NBR initialAttributes;
        end
        if (KL0TM001.CL-RPS-STAT-ID == " ")
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(700);
          set KL0TM001.CL-RPS-STAT-ID cursor, bold;
        end
                                  /* IF KL0TM001.CL-RPS-STAT-ID = ' ';/**/
                                   /* <-- this dups prev if id = ' '*/
         /* IF CLAREC.CLACRTNB = 1;*/
           /* MOVE 'Y' TO CLXREC.CLXERRF;*/
           /* MOVE 700 TO EZEMNO;*/
           /* SET KL0TM001.CL-RPS-STAT-ID CURSOR,BRIGHT;*/
         /* END;*/
        /* END;*/
      else
        if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
          KL0TM001.CL-RPS-STAT-ID = "M";
          set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
          set KL0TM001.CL-RPS-NBR initialAttributes;
          if (KL0TM001.TF1CARCD == "0927"
           || KL0TM001.TF1CARCD == "0200")
            KL0TM001.CL-PPD-COLL-IND = "C";
            set KL0TM001.CL-PPD-COLL-IND skip;
          else
            KL0TM001.CL-PPD-COLL-IND = "P";
          end
        end
      end
    end
  else
    KL0TS-EDIT-RPS-ST(); /* validate RPS STATUS CODE*/
  end


  KL0TS51(); /* expand claim status*/

  KL0TSSO(); /* validate sales office*/
  KL0TSBO(); /* validate base order type*/
  KL0TSDV(); /* validate division*/
  KL0TS47(); /* validate claim reason*/
  KL0TS46(); /* validate claim type*/
  KL0TS45(); /* validate gpc code*/
  KL0TSBC(); /* validate brand code*/
  KL0TSCM(); /* validate comp co id*/
  KL0TSCG(); /* validate cogs co id*/

  KL0TS44(); /* default nbr ctns received*/


  if (KL0TM001.CLACLMNB != 0)
    KL0TM001.KUCCOID = CLAREC.KUCCOID;
    KL0TM001.KUMSTRID = CLAREC.KUMSTRID;
    KL0TM001.XNXCD = CLAREC.XNXCD;
  else
    if (CL0TW01.CL0TWCON != "Y") /* if customer id not from conv table*/
      if (KL0TM001.OP1CUOID != 0)
        KL0TM001.KUCCOID = VIVHDR04.KUCCOID;
        KL0TM001.KUMSTRID = VIVHDR04.KUMSTRID;
        KL0TM001.XNXCD = VIVHDR04.XNXCD;
      end
      if (CLXREC.CLXORDFD == "Y")
        if (VIVHDR04.KUCCOID == KL0TM001.KUCCOID
         && VIVHDR04.KUMSTRID == KL0TM001.KUMSTRID
         && VIVHDR04.XNXCD == KL0TM001.XNXCD
         && VIVHDR04.XGPCD == KL0TM001.XGPCD)
           /* next sentence*/
        else
          set KUNREC empty; /* force edit of customer*/
        end
      end
    end
  end


  if (KL0TM001.KUCCOID != KUNREC.KUCCOID
   || KL0TM001.KUMSTRID != KUNREC.KUMSTRID
   || KL0TM001.XNXCD != KUNREC.XNXCD
   || KL0TM001.XGPCD != KUNREC.XGPCD
   || KL0TM001.KUCCOID == 0)
    if (CLAREC.CLACLMNB == 0) /* making new claim*/
      CL0TW01.CL0TWCEF = "Y";
    end
    KL0TS39(); /* expand customer number*/
    if (CL0TW01.CL0TWEGC == "Y") /* if error getting customer*/
      return;
    end
  end


  if (KL0TM001.CLACLMNB != 0) /* if claim was entered*/
    if (CLAREC.YCTCD == "CDR") /* and consumer claim*/
      KL0T125(); /* get consumer last name*/
    end
  end

  KL0TS63(); /* edit the customer last name*/

           /* check for authorization of consumer claim.*/
           /* and offshore defective claim types*/
  if (KUCREC.KUCCOID != 0) /* if company entered*/
    if (CLAREC.CLYATHID == 0) /* and not already authorized*/
      KL0TS61(); /* check to auto-auth consumer claim*/
    end
  end

  if (CLAREC.YCTCD == "OSD") /* and consumer claim*/
    KL0TS61(); /* check to auto-auth consumer or*/
  end /* offshore defective claim types*/

  if (CLAREC.KUCCOID == CLWREC.KUCCOID /* get legal entity abbreviation*/
   && CLWREC.XLECD != "  "             
   && CLWREC.XLEABRV != "      ")     
    KL0TM001.XLEABRV = CLWREC.XLEABRV;
  else
    KUCREC.KUCCOID = CLAREC.KUCCOID;
    KL0TS73(); /* get company record, update clwrec &*/
                                   /* map*/
    KL0TM001.XLEABRV = CLWREC.XLEABRV;
  end

  KL0TSBC(); /* validate brand code*/
  KL0TSCG(); /* validate cogs code*/
  KL0TSCM(); /* validate comp-co id*/


  KL0TS48(); /* default disposition*/


  KL0TS41(); /* get address information*/
  KL0TS71(); /* get order number*/

  KL0TS45(); /* validate gpc code*/

  KL0T126(); /* group-dependent edit/defaults*/



end // end KL0T120

// cross check entered fields
Function KL0T121()
   /* *************************************************************/
   /* check that the correct combination of fields has     **/
   /* been entered before other validation is done.        **/
   /* **/
   /* 11-01-91 twatso osd coding added - if yct is osd - what  **/
   /* we need are the carrier, warehouse, and customer**/
   /* number and yctcd = 'osd'                        **/
   /* 02-12-93 sgorga  Replace iv0rec fields with ivbrec.      **/
   /* 03-12-93 sgorga  Added edits for pack list nbr that      **/
   /* duplicate the edits for order nbr.      **/
   /* 03-26-93 sgorga  Added warning msg that displays if order**/
   /* nbr is entered without a pack list nbr. **/
   /* 03-11-94 BCourt  Rename CLFREC.xxxaddrn to xxx-addrn.     **/
   /* Note - Do NOT rename map names from 30 to 38 chars.   **/
   /* 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04.            **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0T121"; /* set current process name*/


  if (KL0TM001.CLACLMNB == 0   /* if claim nbr not entered*/
   && KL0TM001.CL0TMCLN == " " /* and consumer last name not ent*/
   && KL0TM001.OP1CUOID == 0   /* and order nbr not entered*/
   && KL0TM001.KUCCOID == 0    /* and company nbr not entered*/
   && KL0TM001.TF2PRONO == " ") /* and pro number not entered*/
    converseLib.validationFailed(486); /* at least one of these fields is*/
                                   /* required*/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
    set KL0TM001.CLACLMNB cursor, modified, bold;
    set KL0TM001.CL0TMCLN modified, bold;
    set KL0TM001.OP1CUOID modified, bold;
    set KL0TM001.KUCCOID modified, bold;
    return;
  end

  if (KL0TM001.YCTCD == "CDR" /* 9/20/89 cwh order not with cdr*/
   && KL0TM001.OP1CUOID != 0) /* re-insert 2-8-93, instead of above.*/
    converseLib.validationFailed(601); /* ord # not allowd for cdr clm type*/
    set KL0TM001.OP1CUOID cursor, modified, bold; /* allow cdr claim*/
    CLXREC.CLXERRF = "Y";
    CL0TW01.CL0TWCMB = "Y";
    return;
  end

  if (KL0TM001.YCTCD == "OSD" /* 11/01/91 taw order not allowed*/
   && KL0TM001.OP1CUOID != 0) /* with osd claim type*/
    converseLib.validationFailed(601);
    set KL0TM001.OP1CUOID cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    CL0TW01.CL0TWCMB = "Y";
    return;
  end

  if (KL0TM001.CLACLMNB != 0   /* if claim nbr was entered*/
   && KL0TM001.CL0TMCLN != " " /* and consumer last name was entered*/
   && KL0TM001.OP1CUOID != 0)  /* and order nbr was entered*/
    converseLib.validationFailed(436); /* cust last name and ord # invalid*/
                                   /* w/claim #*/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
    set KL0TM001.CLACLMNB cursor, modified, bold;
    set KL0TM001.CL0TMCLN modified, bold;
    set KL0TM001.OP1CUOID modified, bold;
    return;
  end
   /*  */
  if (KL0TM001.CLACLMNB != 0       /* if claim nbr was entered*/
   && KL0TM001.CL0TMCLN != " "     /* and consumer last name was entered*/
   && KL0TM001.TS-NIKE-PL-NBR != 0 /* and pack list # was entered*/
   && CL0TW01.CL0TW-PL-WARN-FL != "Y") /* and pack list warning msg didn't*/
                                   /* display    (3-26-93)*/
    converseLib.validationFailed(749); /* pack list nbr can only be entered*/
                                   /* w/order #  (3-12-93)*/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
    set KL0TM001.CLACLMNB cursor, modified, bold;
    set KL0TM001.CL0TMCLN modified, bold;
    set KL0TM001.TS-NIKE-PL-NBR modified, bold;
    return;
  end


  if (KL0TM001.CLACLMNB != 0   /* if claim nbr was entered*/
   && KL0TM001.CL0TMCLN != " " /* and consumer last name was entered*/
   && KL0TM001.CL0TMCLN != CL0TW01.CL0TMCLN)
    if (CLAREC.CLACLMNB == CLDREC.CLACLMNB
     && CLAREC.CLACLMNB != 0) /* 5/89 clm found*/
       /* next sentence*/
    else
      converseLib.validationFailed(437); /* cust last name invalid w/claim #*/
      CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
      CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.CL0TMCLN modified, bold;
      return;
    end
  end


  if (KL0TM001.CLACLMNB != 0 /* if claim nbr was entered*/
   && KL0TM001.OP1CUOID != 0) /* and order nbr was entered*/
    if (KL0TM001.CLACLMNB != CL0TW05.CLACLMNB /* if claim nbr changed*/
     || KL0TM001.OP1CUOID != CL0TW05.OP1CUOID /* or order changed*/
     || KL0TM001.OP1NORID != CL0TW05.OP1NORID)
      converseLib.validationFailed(438); /* ord # invalid w/claim #*/
      CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
      CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.OP1CUOID modified, bold;
      return;
    end
  end

  if (KL0TM001.CLACLMNB != 0       /* if claim nbr was entered*/
   && KL0TM001.TS-NIKE-PL-NBR != 0 /* and pack list # was entered*/
   && CL0TW01.CL0TW-PL-WARN-FL != "Y") /* and pack list warning msg didn't*/
                                        /* display    (3-26-93)*/
    if (KL0TM001.CLACLMNB != CL0TW05.CLACLMNB /* if claim nbr changed*/
     || KL0TM001.TS-NIKE-PL-NBR != CL0TW05.TS-NIKE-PL-NBR) /* or pack list*/
      converseLib.validationFailed(749); /* pack list # can only be entered with*/
                                   /* order nbr  (3-12-93)*/
      CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
      CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.TS-NIKE-PL-NBR modified, bold;
      return;
    end
  end


  if (KL0TM001.CL0TMCLN != " " /* if consumer last name was entered*/
   && KL0TM001.OP1CUOID != 0)  /* and order nbr was entered*/
    converseLib.validationFailed(439); /* cust last name invalid w/order nbr*/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
    set KL0TM001.CL0TMCLN cursor, modified, bold;
    set KL0TM001.OP1CUOID modified, bold;
    return;
  end

  if (KL0TM001.CL0TMCLN != " "     /* if consumer last name was entered*/
   && KL0TM001.TS-NIKE-PL-NBR != 0 /* and pack list # was entered*/
   && CL0TW01.CL0TW-PL-WARN-FL != "Y") /* and pack list warning msg didn't*/
                                       /* display    (3-26-93)*/
    converseLib.validationFailed(749); /* pack list nbr can only be entered*/
                                   /* w/order #  (3-12-93)*/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
    set KL0TM001.CL0TMCLN cursor, modified, bold;
    set KL0TM001.TS-NIKE-PL-NBR modified, bold;
    return;
  end



  if (KL0TM001.CLACLMNB != 0 /* if claim nbr entered*/
   && KL0TM001.KUCCOID != 0) /* and company id entered*/
    if (CLAREC.KUCCOID == KL0TM001.KUCCOID
     && CLAREC.KUMSTRID == KL0TM001.KUMSTRID
     && CLAREC.XNXCD == KL0TM001.XNXCD)
       /* next sentence*/
    else
      converseLib.validationFailed(441); /* customer must match claim number*/
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protection*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      set KL0TM001.KUCCOID modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
      return;
    end
  else
    if (KL0TM001.OP1CUOID != 0 /* if order nbr entered*/
     && KL0TM001.KUCCOID != 0) /* and company entered*/
      if (VIVHDR04.KUCCOID == KL0TM001.KUCCOID
       && VIVHDR04.KUMSTRID == KL0TM001.KUMSTRID
       && VIVHDR04.XNXCD == KL0TM001.XNXCD)
         /* next sentence*/
      else
        KL0TS4D(); /* verify if co-stor-dept from conv.*/
                                   /* table*/
        if (CL0TW01.CL0TWCON == "Y")
           /* next sentence*/
        else
          converseLib.validationFailed(440); /* customer must match order number*/
          CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
          CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protect*/
          set KL0TM001.OP1CUOID cursor, modified, bold;
          set KL0TM001.OP1NORID modified, bold;
          set KL0TM001.KUCCOID modified, bold;
          set KL0TM001.KUMSTRID modified, bold;
          set KL0TM001.XNXCD modified, bold;
          return;
        end
      end
    end
  end

  if (KL0TM001.TS-NIKE-PL-NBR != 0 /* if pack list #entered (3-12-93)*/
   && KL0TM001.KUCCOID != 0)       /* and company entered*/
    if (VIVHDR04.KUCCOID == KL0TM001.KUCCOID
     && VIVHDR04.KUMSTRID == KL0TM001.KUMSTRID
     && VIVHDR04.XNXCD == KL0TM001.XNXCD)
         /* next sentence*/
    else
      KL0TS4D(); /* verify if co-stor-dept from conv.*/
                                   /* table*/
      if (CL0TW01.CL0TWCON == "Y")
           /* next sentence*/
      else
        converseLib.validationFailed(749); /* pack list nbr can only be entered*/
                                 /* w/order #  (3-12-93)*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
        CL0TW01.CL0TWCMB = "Y"; /* CL0T113 skip field protect*/
        set KL0TM001.TS-NIKE-PL-NBR cursor, modified, bold;
        set KL0TM001.KUCCOID modified, bold;
        set KL0TM001.KUMSTRID modified, bold;
        set KL0TM001.XNXCD modified, bold;
        return;
      end
    end
  end



  if (KL0TM001.CLFADNM != " " /* if any part of address was entered*/
   || KL0TM001.XXXADDR1 != " "
   || KL0TM001.XXXADDR2 != " "
   || KL0TM001.XXXADDR3 != " "
   || KL0TM001.XXXCITY != " " 
   || KL0TM001.XSTCD != " "   
   || KL0TM001.XXXZIP != " ")
    if (KL0TM001.CLFADNM == CLFREC.CLFADNM    /* if it hasnt changed*/
     && KL0TM001.XXXADDR1 == CLFREC.XXX-ADDR1 /* 3-11-94 rename*/
     && KL0TM001.XXXADDR2 == CLFREC.XXX-ADDR2 /* to db2 names*/
     && KL0TM001.XXXADDR3 == CLFREC.XXX-ADDR3 
     && KL0TM001.XXXCITY == CLFREC.XXXCITY    
     && KL0TM001.XSTCD == CLFREC.XSTCD        
     && KL0TM001.XXXZIP == CLFREC.XXXZIP)    
      /* next sentence.....then it's ok*/
    else
      if (KL0TM001.CLACLMNB != 0) /* if claim nbr was entered*/
        converseLib.validationFailed(442); /* claim invalid with address*/
        CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
        CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protect*/
        set KL0TM001.CLACLMNB cursor, modified, bold;
        return;
      else
        if (KL0TM001.OP1CUOID != 0) /* and order nbr was entered*/
          converseLib.validationFailed(443); /* ord invalid with address*/
          CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
          CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protect*/
          set KL0TM001.OP1CUOID cursor, modified, bold;
          return;
        else
          if (KL0TM001.TS-NIKE-PL-NBR != 0 /* if pack list # was entered*/
           && CL0TW01.CL0TW-PL-WARN-FL != "Y") /* & pack list warning msg*/
                                           /* didn't display  (3-26-93)*/
            converseLib.validationFailed(749); /* pack list nbr can only be entered*/
                                   /* w/order #  (3-12-93)*/
            CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
            CL0TW01.CL0TWCMB = "Y"; /* 5/89 CL0T113 skip field protect*/
            set KL0TM001.TS-NIKE-PL-NBR cursor, modified, bold;
            return;
          end
        end
      end
    end
  end

   /* 03-26-93  Order Nbr/Pack List Nbr Combination:  Display warning*/
   /* message if pack list # is not entered with order #.*/

  if (CLXREC.CLXERRF == "N"           /* If no errors*/
   && KL0TM001.OP1CUOID != 0          /* and order nbr is entered*/
   && KL0TM001.TS-NIKE-PL-NBR == 0    /* and pack list # is blank*/
   && CL0TW01.CL0TW-PL-WARN-FL != "Y" /* and warning hasn't yet displayed,*/
   && KL0TM001.CLACLMNB == 0)         /* meaning claim # wasn't the field entered on*/
                             /* the screen*/
    CL0TW09.CL0TWMNO[7] = 750; /* Then display warning message*/
    CL0TW09.CL0TWIND[7] = "E"; /* that pack list should be entered*/
    CLXREC.CLXERRF = "Y"; /* with order nbr.*/
    set KL0TM001.TS-NIKE-PL-NBR cursor, modified, bold;
    return;
  end

end // end KL0T121

// validate claim number
Function KL0T122()
   /* *************************************************************/
   /* *     validate the claim number                            **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G     **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR     DESCRIPTION                           **/
   /* *----------------------------------------------------------**/
   /* * 12-05-89 CHELLM    TO PREVENT TA0111 FYI'S WHEN HD & PMY **/
   /* *                    IVC NUMBERS MIS-MATCH, CLEAR SEREEN   **/
   /* *                    FIELDS WHEN THE CLAIM NUMBER CHANGES  **/
   /* *                    BECAUSE THEY NO LONGER APPLY.         **/
   /* * 10-12-90 BCOURT    change XCGCD to OP1COGID.             **/
   /* * 01/27/92 GDECKE    ADD RPS LOGIC.                        **/
   /* * 08/13/93 JCAREY    CHANGED CLLPDCFL TO CL-PPD-COLL-IND.  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0T122"; /* set current process name*/



  if (KL0TM001.CLACLMNB == 0) /* if have erased claim number*/
    set CLAREC empty;
    return; /* dont need to do anything else*/
  end


  if (KL0TM001.CLACLMNB != CLAREC.CLACLMNB /* if we changed the claim*/
   && CLAREC.CLACLMNB != 0)                /* number then these fields*/
    KL0TM001.YCTCD = " "; /* need to default from the*/
    KL0TM001.XGPCD = " "; /* new claim without giving the*/
    KL0TM001.YCRCD = " "; /* "defaulting" error msg*/
    KL0TM001.XDVCD = " "; /* 4/89 division cd*/
    KL0TM001.XBCCD = " "; /* 5/90 brand cd*/
    KL0TM001.OP1COGID = 0; /* 5/90 brand cd*/
    KL0TM001.OP1CMPNB = 0; /* 5/90 brand cd*/
    KL0TM001.XOBCD = " "; /* base order type*/
    KL0TM001.XSOCD = " "; /* sales office*/
    KL0TM001.YCSCD = " ";
    KL0TM001.XXXADDR1 = " ";
    KL0TM001.XXXADDR2 = " ";
    KL0TM001.XXXADDR3 = " ";
    KL0TM001.XXXCITY = " ";

    KL0TM001.KUCCOID = 0; /* below added (12-05-89)*/
    KL0TM001.KUMSTRID = 0;
    KL0TM001.OP1CUOID = 0;
    KL0TM001.OP1NORID = 0;
    KL0TM001.TF2PRONO = " ";
    KL0TM001.CL-PPD-COLL-IND = " ";
    KL0TM001.CL-RPS-STAT-ID = " ";
    KL0TM001.CL-RPS-NBR = " ";
    KL0TM001.CLLPDCCG = 0;
  end


  set CLAREC empty;


  CLAREC.CLACLMNB = KL0TM001.CLACLMNB;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* claim number not found*/
      CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
      CL0TW01.CL0TWCNV = "N";
                                   /* no, claim number was not valid*/
      set KL0TM001.CLACLMNB cursor, modified, bold;
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1TBLKE = "LOOKING FOR CLAIM IN ARRAY";
      XPCL010();
    end
  end
end // end KL0T122

// validate order number
Function KL0T123()
   /* ************************************************************/
   /* edit the nike order number                         **/
   /* **/
   /* **/
   /* MAINTENANCE HISTORY                                      **/
   /* **/
   /* 02-12-93  sgorga  Pack list nbr has been added to map.   **/
   /* Order # & pack list # are used to read ivbrec  **/
   /* to try to get a unique invoice; otherwise, the **/
   /* most recent invoice is used.  That invoice is  **/
   /* then used to check for an existing RTS or RFL  **/
   /* claim not in RSP, CMP, ERA, DEN, or CAN status.**/
   /* If found, the return being logged may be       **/
   /* attached to the existing open claim.  My chng: **/
   /* 1) added pack list # to help find invoice.     **/
   /* 2) chngd from using iva & ivorec to ivbrec.    **/
   /* 3) chngd from using ord # to using inv# to     **/
   /* search for claim in cl2330 iomod.           **/
   /* 02-07-94  jcarey Initialized sqlca record.               **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T123"; /* set current process name*/


  CLXREC.CLXINVFD = "N"; /* invoice found*/
  CLXREC.CLXORDFD = "N"; /* order found*/


  if (KL0TM001.OP1CUOID != 0 /* if cust order entered*/
   && KL0TM001.OP1NORID == 0) /* but nike ord id not entered*/
    KL0TM001.OP1NORID = 1; /* default nike ord id to 1*/
    set KL0TM001.OP1NORID modified;
  end


  CLXREC.CLXORDIV = KL0TM001.OP1CUOID;
  VIVHDR04.OP1PARTN = CLXREC.CLXPARTN; /* move order # to VIVHDR04*/
  VIVHDR04.OP1CUOID = KL0TM001.OP1CUOID;
  VIVHDR04.OP1NORID = KL0TM001.OP1NORID;
  if (KL0TM001.TS-NIKE-PL-NBR == 0) /* if pack list # not entered*/
    VIVHDR04.TSIPLNBR = -1;
  else
    VIVHDR04.TSIPLNBR = KL0TM001.TS-NIKE-PL-NBR; /* move pack list #*/
  end

   /* Below call selects set from vivhdr02 using order # & pack*/
   /* list #. Only the 1st rec is read ('N1').  Order # + pack*/
   /* list # = unique invoice. So, if pack # is entered (^= 0),*/
   /* there will be only 1 rec anyway. Else, we pick up the most*/
   /* recent invoice (IO1140 selects in descending order)*/

  set SQLCA empty;
  call "IO1140" ("S1", SQLCA, VIVHDR04) {isNoRefresh = yes, isExternal = yes}; /* select set/open cursor*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDR02";
    TA1REC.TA1LOCAT[2] = "OPEN CUR";
    TA1REC.TA1TBLKE = "BAD RTN CD FROM S1 CALL TO SELECT SET";
    XPCL010();
  end

  call "IO1140" ("N1", SQLCA, VIVHDR04) {isNoRefresh = yes, isExternal = yes}; /* read invoice rec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CLXREC.CLXORDFD = "Y"; /* invoice found for order*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy - try again msg*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVHDR02";
        TA1REC.TA1LOCAT[2] = "BAD READ";
        TA1REC.TA1TBLKE = "BAD RTN CD FROM N1 CALL TO READ REC";
        XPCL010();
      end
    end
  end

  set SQLCA empty;
  call "IO1140" ("C1", SQLCA, VIVHDR04) {isNoRefresh = yes, isExternal = yes}; /* close set for VIVHDR04*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDR02";
    TA1REC.TA1LOCAT[2] = "CLS SET";
    TA1REC.TA1TBLKE = "BAD RTN CD FROM C1 CALL TO CLOSE SET";
    XPCL010();
  end

  if (CLXREC.CLXORDFD == "N") /* no invoice for this order*/
    converseLib.validationFailed(748); /**/
    CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
    set KL0TM001.OP1CUOID cursor, modified, bold;
    set KL0TM001.OP1NORID modified, bold;
    set KL0TM001.TS-NIKE-PL-NBR modified, bold;
    set VIVHDR04 empty;
  end


  if (CLXREC.CLXERRF == "Y") /* if there is an error*/
    return;
  end


   /* *********************************************************/
   /* - Below -*/
   /* Select all (if any) RTS or RFL claims that exist for*/
   /* the selected invoice with call to cl2320 (iomod).*/
   /* (Selects claims where status not = RSP,DEN,CAN,ERA,CMP)*/
   /* (Reads both dclaim.vclhdr01 & dclaim.vclivx01.        )*/
   /* *********************************************************/

  if (KL0TM001.CLACLMNB == CL0TW08.CLACLMNB /* if already done*/
   && CL0TW08.CLACLMNB != 0)               
    return;
  end

  set CL0TW08 empty;
  CL0TW08.CL0TWSQL = "S4"; /* Read clhdr & clivx using inv. #*/
  CL0TW08.CLACLMNB = KL0TM001.CLACLMNB;
  CLXREC.CLXORDIV = KL0TM001.OP1CUOID;
  CL0TW08.IV0PARTN = VIVHDR04.IV0PARTN;
  CL0TW08.IV0IVCID = VIVHDR04.IV0IVCID;
  set SQLCA empty;

  call "CL2320" (CL0TW08, SQLCA) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0TW08.CL0TWRTN == "N") /* no rfl or rts claims against invoice*/
       /* next sentence*/
    else
      if (CL0TW08.YCSCD[2] == "RFL")
         /* NEXT SENTENCE*/
      else
        if (CL0TW01.CL0TWCWF == "N") /* if warning hasn't been displayed*/
          converseLib.validationFailed(458); /* warning rts or rfl claims exist for*/
                                   /* inv*/
          CLXREC.CLXERRF = "Y";
          set KL0TM001.OP1CUOID cursor, modified, bold;
          set KL0TM001.OP1NORID modified, bold;
          return;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy - try again msg*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      CLXREC.XXXWDTE = VIVHDR04.IV0IVCID; /* move inv # to abend msg*/
      TA1REC.TA1LOCAT[2] = CLXREC.XXXWDTE;
      TA1REC.TA1TBLKE = "BAD OPEN, READ, OR CLOSE IN CL2320";
      XPCL010();
    end
  end
end // end KL0T123

// get first/last dates & cartons
Function KL0T124()
   /* ************************************************************/
   /* *      get all return records for this claim...determine  **/
   /* *      the first/last dates and the total number of       **/
   /* *      cartons for the claim.                             **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T124"; /* set current process name*/

  CL0TW01.CL0TWUTR = "N"; /* init update-this-return-flag*/


  set CLLREC empty;
  CL0TW01.CLLGROUP = CLLREC.CLLGROUP;

  CL0TW01.CL0TMFDT = 0; /* init first date*/
  CL0TW01.CL0TMLDT = 0; /* init last date*/
  CL0TW01.CL0TWMRN = 0; /* init max rtn number on file*/
  CL0TW01.CLLNBRCV = 1; /* default nbr of ctns in this return*/
  CL0TW01.CL0TMTC3 = 0;
                                   /* default total number of ctns in claim*/

  if (CLAREC.CLACLMNB == 0)
     /* next sentence*/
  else

    CLLREC.CLACLMNB = CLAREC.CLACLMNB;
    CLLREC.CLLRTNNB = -1;
    set SQLCA empty;
    call "IO1310" ("SS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO1310" ("SN", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* first return*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if a return was found*/
        KL0T127(); /* set first/last dates and nbr of cartons*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if no returns on claim*/
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(4);
            return;
          else
            if (SQLCA.VAGen_SQLCODE < 0)
              TA1REC.TA1DBASE = "DCLAIM";
              TA1REC.TA1TBLVU = "VCLRTN01";
              TA1REC.TA1LOCAT[2] = "SEL NXT";
              CLXREC.XXXWDTE = KL0TM001.CLACLMNB;
              TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
              XPCL010();
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4);
        return;
      else
        if (SQLCA.VAGen_SQLCODE < 0)
          TA1REC.TA1DBASE = "DCLAIM";
          TA1REC.TA1TBLVU = "VCLRTN01";
          TA1REC.TA1LOCAT[2] = "SEL SET";
          CLXREC.XXXWDTE = KL0TM001.CLACLMNB;
          TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
          XPCL010();
        end
      end
    end
  end
  set SQLCA empty;
  call "IO1310" ("CS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* close set for cllrec*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLRTN01";
    TA1REC.TA1LOCAT[2] = "CLS SET";
    CLXREC.XXXWDTE = CLXREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010();
  end

  CLLREC.CLLGROUP = CL0TW01.CLLGROUP; /* restore requested record*/

  if (KL0TM001.CLLRTNNB != 0
   && KL0TM001.CLLRTNNB != CLLREC.CLLRTNNB)
    converseLib.validationFailed(488); /* requested return not found*/
    CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
    set KL0TM001.CLLRTNNB cursor, modified, bold;
  end





end // end KL0T124

// get consumer last name
Function KL0T125()
   /* ************************************************************/
   /* *     get consumer last name**/
   /* * 12-02-92  lgross only put blanks in name when not found **/
   /* *           on consumer name table or not entered on map  **/
   /* *           by user                                       **/
   /* * 02-07-94  jcarey Initialized sqlca record.              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T125"; /* set current process name*/


  CLDREC.CLACLMNB = CLAREC.CLACLMNB;
  set SQLCA empty;
  call "IO1190" ("S ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* get consumer name record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KL0TM001.CL0TMCLN == " ") /* if no last name entered*/
      CL0TW01.CLD3NM = CLDREC.CLD3NM;
      CL0TW01.CLD7NM = CLDREC.CLD7NM;
      KL0TM001.CL0TMCLN = CL0TW01.CL0TMCLN;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (KL0TM001.CL0TMCLN == " ") /* if not last name entered*/
        KL0TM001.CL0TMCLN = " ";
        CL0TW01.CL0TMCLN = " ";
        set KL0TM001.CL0TMCLN modified;
      end
          /* next sentence  - don't overlay entered name with blanks*/
    else
      TA1REC.TA1TBLKE = "GETTING CONSUMER NAME";
      XPCL010();
    end
  end


end // end KL0T125

// group-dependent field edits
Function KL0T126()
   /* ************************************************************/
   /* group-dependent field edits                         **/
   /* **/
   /* MAINTENANCE HISTORY                                     **/
   /* **/
   /* 08-24-90  sgorga  Allow claims against certain Nil-cust   **/
   /* invoices to bypass validation of 'Div,GPC,Sls Ofc,Ord  **/
   /* Typ' combination (xvo table).                          **/
   /* 09-28-90  sgorga  Added another Nil invoice.              **/
   /* 11-21-90  sgorga  Added Nil invoices 203447,203451.       **/
   /* 01-21-91  sgorga  Added 20 Nil invoices.                  **/
   /* 02-18-91  sgorga  Added Nil inv #6298054.                 **/
   /* 02-21-91  sgorga  Added Nil inv #6573603.                 **/
   /* 03-14-91  sgorga  Added Nil inv #6763895,6763634.         **/
   /* 04-19-91  sgorga  Added Nil inv #6984512,6978386.         **/
   /* 05-07-91  sgorga  Created table CL7TBL to store the NIL   **/
   /* invoice nbrs that we allow domestic     **/
   /* claims to be created against.  Removed  **/
   /* hardcoded NIL invoice nbrs from this    **/
   /* process.  Replaced with table inquiry.  **/
   /* 12-03-91  twatso  added code for valid or blank brand     **/
   /* when status is active on xvo table      **/
   /* 01-13-92  sgorga  Set ta2rec empty.                       **/
   /* 04-06-98  NJANA   Change the logic to replace the CSP     **/
   /* XVOTBL with an iomod VXVO0001           **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T126"; /* set current process name*/

  if (CL0TW01.CL0TWACT == "I") /* if inquiry-only*/
    KL0T109(); /* protect all fields*/
  end


  if (KL0TM001.CLLRTNNB != 0) /* if a return number was entered*/
    if (KL0TM001.XWHCD != CLLREC.XWHCD
     && CLLREC.XWHCD != " ")
      KL0TM001.XWHCD = CLLREC.XWHCD;
      KL0TS30(); /* get description*/
      converseLib.validationFailed(516); /* default whse from return*/
      set KL0TM001.XWHCD bold;
    end
    if (CL0TW03.CLLWRDT != CLLREC.CLLWRDT /* if date recvd changed*/
     && CLLREC.CLLWRDT != 0)             
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2GRGGN = CLLREC.CLLWRDT;
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD == 0)
        CL0TW03.CL0TMRDT = TA2REC.TA2GRGB;
        KL0TM001.CL0TMRDT = CL0TW03.CL0TMRDT;
      else
        TA1REC.TA1TBLKE = "FORMATTING WHSE RECEIPT DATE";
        XPCL010(); /* abend*/
      end
      converseLib.validationFailed(517); /* default receipt date from return*/
      set KL0TM001.CL0TMRDT bold;
    end
    if (KL0TM001.TF1CARCD != CLLREC.TF1CARCD
     && CLLREC.TF1CARCD != " ")
      KL0TM001.TF1CARCD = CLLREC.TF1CARCD;
      KL0TS32(); /* get description*/
      converseLib.validationFailed(518); /* default carrier from return*/
      set KL0TM001.TF1CARCD bold;
    end
  end

   /* ****************************************************/
   /* 4/89 add group edit for sport/casual enhancement*/

  if (CLXREC.CLXTESTF == "N") /* do below only if 4 flds OK*/
    return;
  end

  if (KL0TM001.CLACLMNB != 0) /* 5/89 if claim found, the dflt GPC,*/
    return; /* sls ofc, div & base ord type are OK*/
  end /* even if XVOTBL row status = 'I'*/

   /* TCS change begins -dated 04/06/98*/
  CLXREC.CLXTESTF = "N";

  set VXVO0001 empty;
  VXVO0001.XOBCD = KL0TM001.XOBCD; /* base order type code*/
  VXVO0001.XDVCD = KL0TM001.XDVCD; /* division code*/
  VXVO0001.XBCCD = KL0TM001.XBCCD; /* brand code*/
  VXVO0001.XGPCD = KL0TM001.XGPCD; /* gpc code*/
  VXVO0001.XSOCD = KL0TM001.XSOCD; /* sales office code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)

    call "VXVO0001" ("N3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* get first*/

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0TW01.XOTCD = VXVO0001.XOTCD; /* move valid order type code*/
      CLXREC.CLXTESTF = "Y"; /* found valid order type*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence,valid order type not found*/
      else
        TA1REC.TA1LOCAT[2] = "KL0T126";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "KL0T126";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end

  call "VXVO0001" ("C3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor to scan*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0T126";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end
   /* TCS change ends   -dated 04/06/98*/

   /* *********************************************************/
   /* get the appropriate profile code off the company record*/
   /* (kucrec), based on the order's gpc*/

  if (KL0TM001.YCTCD != "CDR")
    if (KL0TM001.XGPCD == "02")
      if (KUCREC.XOPCD[1] == "NOFT")
        if (KUCREC.KUCFPRDT == 0)
          set KL0TM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(692); /* company order type profile not*/
        else
          if (KUCREC.KUCFPRDT > 0
           && KUCREC.XOPCD[2] == "NOFT")
            set KL0TM001.XGPCD cursor, bold;
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(692); /* company order type profile not*/
          end /* set up for this gpc code*/
        end
      end
    end

    if (KL0TM001.XGPCD == "03")
      if (KUCREC.XOPCD[3] == "NOAP")
        if (KUCREC.KUCAPRDT == 0)
          set KL0TM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(692); /* company order type profile not*/
        else
          if (KUCREC.KUCAPRDT > 0
           && KUCREC.XOPCD[4] == "NOAP")
            set KL0TM001.XGPCD cursor, bold;
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(692); /* company order type profile not*/
          end /* set up for this gpc code*/
        end
      end
    end
  end

   /* *this is end of the get paragraph*/

     /* 05-07-91  sgorga*/
  if (CLAREC.IV0IVCID in CL7TBL.IV0IVCID)
                                   /* 05-07-91  Allow claims against*/
    /* next sentence        the NIL invoice nbrs in CL7TBL to*/
                          /* bypass the below edit.*/
  else
    if (CLXREC.CLXTESTF == "N")
      converseLib.validationFailed(582); /* bad combo div, gpc, sls ofc, order*/
                                   /* type*/
      CLXREC.CLXERRF = "Y";
      set KL0TM001.XSOCD modified, bold;
      set KL0TM001.XOBCD modified, bold;
      set KL0TM001.XDVCD modified, bold;
      set KL0TM001.XGPCD cursor, modified, bold;
      return;
    end
  end


end // end KL0T126

// set first/last dates & cartons
Function KL0T127()
   /* ************************************************************/
   /* *      get all return records for this claim...determine  **/
   /* *      the first/last dates and the total number of       **/
   /* *      cartons for the claim.                             **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T127"; /* set current process name*/


  CL0TW01.CL0TMFDT = CLLREC.CLLWRDT; /* init first date*/
  CL0TW01.CL0TMLDT = CLLREC.CLLWRDT; /* init last date*/
  CL0TW01.CL0TMTC3 = 0; /* init nbr ctns in claim*/
  CL0TW01.CL0TWMRN = CLLREC.CLLRTNNB; /* init max rtn nbr*/

  CL0TW01.CL0TWDON = "N"; /* init done-flag;*/

  while (CL0TW01.CL0TWDON == "N")
    if (CLLREC.CLLRTNNB == KL0TM001.CLLRTNNB) /* if specific rtn requested*/
      CL0TW01.CL0TWUTR = "Y"; /* yes, update this return*/
      CL0TW01.CLLGROUP = CLLREC.CLLGROUP; /* save requested return*/
      CL0TW01.CLLNBRCV = CLLREC.CLLNBRCV; /* save nbr of crtns*/
    else
      if (CLWREC.CLWMNOPT == 7 /* if adding*/
       && CLLREC.XWHCD == KL0TM001.XWHCD
       && CLLREC.TF1CARCD == KL0TM001.TF1CARCD
       && CLLREC.CLLWRDT == CL0TW03.CLLWRDT
       && CLLREC.CLLRTDSP == KL0TM001.CLLRTDSP)
        CL0TW01.CL0TWUTR = "Y"; /* yes, update this return*/
        CL0TW01.CLLGROUP = CLLREC.CLLGROUP; /* save requested return*/
      else
        if (CLWREC.CLWMNOPT == 16 /* if adding sales sample claim*/
         && CLLREC.XWHCD == KL0TM001.XWHCD
         && CLLREC.TF1CARCD == KL0TM001.TF1CARCD
         && CLLREC.CLLWRDT == CL0TW03.CLLWRDT
         && CLLREC.CLLRTDSP == KL0TM001.CLLRTDSP)
          CL0TW01.CL0TWUTR = "Y"; /* yes, update this return*/
          CL0TW01.CLLGROUP = CLLREC.CLLGROUP;
                                   /* save requested return*/
        else
          if (KL0TM001.CLLRTNNB == 0
           && CLLREC.CLLRTNNB > CL0TW01.CLLRTNNB)
            CL0TW01.CLLGROUP = CLLREC.CLLGROUP; /* save latest return*/
            CL0TW01.CLLRTNNB = CLLREC.CLLRTNNB;
          end
        end
      end
    end
    if (CLLREC.CLLRTNNB > CL0TW01.CL0TWMRN)
      CL0TW01.CL0TWMRN = CLLREC.CLLRTNNB; /* set max rtn nbr*/
    end
    if (CLLREC.CLLWRDT < CL0TW01.CL0TMFDT)
      CL0TW01.CL0TMFDT = CLLREC.CLLWRDT;
    end
    if (CLLREC.CLLWRDT > CL0TW01.CL0TMLDT)
      CL0TW01.CL0TMLDT = CLLREC.CLLWRDT;
    end
    CL0TW01.CL0TMTC3 = CL0TW01.CL0TMTC3 + CLLREC.CLLNBRCV;

    call "IO1310" ("SN", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* try for another return*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a return was found*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no returns on claim*/
        CL0TW01.CL0TWDON = "Y"; /* then we are done*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(4);
          return;
        else
          if (SQLCA.VAGen_SQLCODE < 0)
            TA1REC.TA1DBASE = "DCLAIM";
            TA1REC.TA1TBLVU = "VCLRTN01";
            TA1REC.TA1LOCAT[2] = "SEL NXT";
            CLXREC.XXXWDTE = KL0TM001.OP1CUOID;
            TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
            XPCL010();
          end
        end
      end
    end
  end


end // end KL0T127

// get rtn auth header record
Function KL0T128()
   /* *************************************************************/
   /* *     get the return-authorization header record           **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T128"; /* set current process name*/


  set CLJREC empty;

  if (KL0TM001.CLACLMNB == 0) /* if no claim number*/
    return; /* dont need to do anything else*/
  end

  CLJREC.CLACLMNB = KL0TM001.CLACLMNB;
  set SQLCA empty;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0TW01.CL0TWRAE = "Y"; /* yes, rtn auth exists*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0TW01.CL0TWRAE = "N"; /* no, rtn auth doesnt exist*/
      set CLJREC empty;
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1TBLKE = "LOOKING FOR CLAIM IN ARRAY";
      XPCL010();
    end
  end
   /* now check the expired date in the record*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  CLXREC.XXXWDTE = TA2REC.TA2GRGGN; /* save date for later*/
  set TA2REC empty;
  TA2REC.TA2GRGGN = CLJREC.CLJRAXDT;
  TA2REC.TA2DYAOD = 5;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2GRGGN < CLXREC.XXXWDTE) /* claim has expired*/
    CL0TW01.CL0TWDDF = "N"; /* disp cannot default*/
    if (CL0TW01.CL0TWRXF == "N") /* haven't told them yet*/
      converseLib.validationFailed(555); /* aothorization expired*/
      set KL0TM001.CLJRAXDT skip, bold;
      CLXREC.CLXERRF = "Y";
    end
  end

end // end KL0T128

// update the data-base
Function KL0T130()
   /* ************************************************************/
   /* Make required updates to the data-base tables       **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                           **/
   /* ************************************************************/
   /* DATE    PGMR    DESCRIPTION                             **/
   /* ************************************************************/
   /* 01-13-92  sgorga  Set ta1rec and errsqlca empty.          **/
   /* 01-27-92  GDECKE  ADD RPS LOGIC.                          **/
   /* 12-02-92  lgross  always update consumer table when       **/
   /* consumer name entered and  'cdr' claim          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T130"; /* set current process name*/

  if (KL0TM001.XWHCD != COMMAREA.XWHCD)
    if (COMMAREA.XWHCD == "04" /* it's ok for warehouse 04 and 32*/
     || COMMAREA.XWHCD == "32" /* to use one anothers warehouse*/
     || COMMAREA.XWHCD == "51") /* to use one anothers warehouse*/
      if (KL0TM001.XWHCD == "04"
       || KL0TM001.XWHCD == "32"
       || KL0TM001.XWHCD == "51")
        /* next sentence*/
      else
        converseLib.validationFailed(557); /* warehouse inconsistent*/
        CLXREC.CLXERRF = "Y";
        set KL0TM001.XWHCD cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(557); /* warehouse inconsistent*/
      CLXREC.CLXERRF = "Y";
      set KL0TM001.XWHCD cursor, modified, bold;
      return;
    end
  end


  CL0TW01.CL0TWUOK = "Y"; /* init update-went-ok-flag*/
  CL0TW01.CL0TWHVI = "N"; /* init 'have invc' flag 062089*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0T130";
    XPCL010(); /* abend*/
  end


  if (KL0TM001.CLLRTDSP == "NCLM" /* if want new claim*/
   || KL0TM001.CLLRTDSP == "RFSD") /* or this return was refused*/
    if (KL0TM001.CLACLMNB == 0) /* if there is no claim number*/
       /* next sentence*/
    else
      CL0TW01.CL0TWDON = "N"; /* init done-flag*/
      while (CL0TW01.CL0TWDON == "N") /* while not done*/
        KL0T135(); /* we have to add/update rtn for this claim*/
      end
    end
  end


  CL0TW01.CL0TWHCN = 0; /* init 'hold clm #' to zero*/

  if (KL0TM001.CLACLMNB == 0) /* if there is no claim number*/
    CL0TW01.CL0TWCEF = "Y"; /* to be sure we create address*/
    KL0T131(); /* get and update next-claim-number*/
    KL0T140(); /* build clarec if necessary*/
  else
    if (KL0TM001.CLLRTDSP == "NCLM") /* supposed to create new claim*/
      CL0TW01.CL0TWCEF = "Y"; /* be sure we create address*/
      /* if old claim had entered return to address, save*/
      /* the claim number for address creation later.*/
      if (KL0TM001.CLACLMNB != 0
       && CLAREC.CLARTNFF == "E")
        CL0TW01.CL0TWHCN = CLAREC.CLACLMNB;
      end
      if (KL0TM001.CLACLMNB != 0 /* if there is a claim number*/
       && CLAREC.CLASHPFF == "E") /* claim had entered shipto*/
        CL0TW01.CL0TWACF = "Y"; /* then make new claim that way*/
      end
      CLCREC.CLACLMNB = CLAREC.CLACLMNB; /* for CL0T150*/
      KL0T131(); /* get and update next-claim-number*/
      KL0T143(); /* build clarec from old claim*/
      KL0T150(); /* build CLCREC if exists*/
    end
  end


  if (KL0TM001.OP1CUOID != 0 /* if have order*/
   && CL0TW01.CL0TWUOK == "Y") /* and the previous updates were ok*/
    CL0TW01.CL0TWHVI = "Y"; /* set 'have invc' flag 062089*/
    if (CLXREC.CLXORDFD == "Y" /* and valid order found        cwh*/
     /* 7-11-89*/
     || KL0TM001.CLLRTDSP == "NCLM") /* or new claim function*/
      KL0T132(); /* update invoice xref*/
    end
  end


  if (KL0TM001.CL0TMCLN != " " /* if consumer last name was entered*/
   && CLAREC.YCTCD == "CDR")   /* and clm typ is cnsmr def*/
                                  /* IF KL0TM001.CL0TMCLN IS MODIFIED  /**/
                                   /* if consumer last name was entered*/
     /* OR KL0TM001.CLLRTDSP EQ 'NCLM'      /* or new claim function*/
    KL0T133(); /* update consumer/claim xref*/
  end
   /* END*/


                                   /* (cwh 9/19/89 cl651)*/
  if (CL0TW01.CL0TWUOK == "Y" /* if the previous updates were ok*/
   && KL0TM001.KUCCOID != 0   /* and not already authorized*/
   && CLAREC.CLYATHID == 0)   /* check for a consumer acct class*/
    KL0TS61(); /* set auth-by-id to Jackie Evey*/
  end

  if (CL0TW01.CL0TWIEF == "Y" /* if new invoice was entered*/
   || CL0TW01.CL0TWCEF == "Y" /* or new customer was entered*/
   || CL0TW01.CL0TWACF == "Y") /* or address changed*/
    if (CL0TW01.CL0TWUOK == "Y") /* if the previous updates were ok*/
      KL0T134(); /* update claim address table*/
    end
  end


  if (CL0TW01.CL0TWUOK == "Y") /* if the previous updates were ok*/
    if (KL0TM001.CLLRTDSP == "RFSD") /* if return was refused*/
       /* next sentence....dont update carton count*/
    else
      KL0T136(); /* update carton count table*/
    end
  end


  if (CL0TW01.CL0TWRAE == "N" /* if no rtn auth exists*/
   && CL0TW01.CL0TWUOK == "Y") /* if the previous updates were ok*/
    KL0T137(); /* then create one*/
  end


  if (KL0TM001.TF2PRONO != CLEREC.TF2PRONO /* if pro nbr changed*/
   && CL0TW01.CL0TWUOK == "Y")             /* if the previous updates were ok*/
    KL0T138(); /* then create one*/
    CLAREC.CLATFIND = "Y"; /* set traffic indicator to yes*/
  end


  if (CL0TW01.CL0TWUOK == "Y") /* if the previous updates were ok*/
    if (KL0TM001.CLLRTDSP == "RFSD" /* if return was refused*/
     && KL0TM001.CLACLMNB != 0)     /* logged above for existing clm*/
       /* next sentence....dont update carton count*/
    else
      if (KL0TM001.CLLRTDSP == "RFSD") /* if return was refused*/
        /* next sentence*/
      else
        KL0TM001.CLLRTDSP = "INSP";
      end
      CL0TW01.CL0TWMRN = 0; /* init max-return nbr*/
      CL0TW01.CL0TWDON = "N"; /* init done-flag*/
      while (CL0TW01.CL0TWDON == "N") /* while not done*/
        KL0T135(); /* update clm return*/
      end
    end
  end


    /* UPDATE THE RPS TABLE WHEN RPS STATUS IS CHANGED*/

  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y"
   && KL0TM001.CL-RPS-STAT-ID != VCLRPS01.CL-RPS-STAT-ID
   && CLLREC.CLLRTNNB != 0)
    if (CLLREC.CLLRTDSP == "INSP"
     || CLLREC.CLLRTDSP == "RFSD")
      VCLRPS01.CL-RPS-STAT-ID = KL0TM001.CL-RPS-STAT-ID;
      VCLRPS01.CLLRTNNB = CLLREC.CLLRTNNB;
      VCLRPS01.ZZZSDT = CLXREC.XXXCDTE;
      VCLRPS01.ZZZCHGDT = CLXREC.XXXCDTE;
      VCLRPS01.ZZZCHGTM = CLXREC.XXXCHHMM;
      CL0TW01.CL0TW-DEADLOCK-FLAG = "Y";
      CL0TW01.CL0TW-DEADLOCK-COUNT = 0;
      while (CL0TW01.CL0TW-DEADLOCK-FLAG == "Y")
        KL0TS-UPDATE-CLRPS();
      end
      if (CL0TW01.CL0TW-DEADLOCK-COUNT > 0)
        return;
      end
    end
  end


  if (CL0TW01.CL0TWUOK == "Y") /* if all previous updates were ok*/
    KL0T139(); /* update claim header table*/
    if (CL0TW01.CL0TWSAM == "Y")
                                   /* if sales sample claim then update the*/
      KL0T13A(); /* secondary claim's clarec also*/
    end
  end


  if (CL0TW01.CL0TWUOK == "Y") /* if updates went ok*/
    CL0TW03.CL0TMLCN = CLAREC.CLACLMNB; /* last claim number*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit the changes*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  end


   /* 062089 add below*/

  if (CL0TW01.CL0TWHVI == "Y" /* if created primary invoice*/
   && CLAREC.IV0IVCID != CLBREC.IV0IVCID) /* & it's not=clm hdr*/
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX";
    CLXREC.CLXORDIV = CLAREC.CLACLMNB;
    TA1REC.TA1MAP = CLXREC.CLXORDIV;
    if (KL0TM001.OP1CUOID is modified) /* if order was modified*/
      CL0TW01.CL0TWMOD = "ORDMOD,";
    end
    if (KL0TM001.CLLRTDSP == "NCLM") /* or new claim function*/
      CL0TW01.CL0TWNCL = "NCLM,";
    end
    CL0TW01.CL0TWMS1 = "HD IVC=";
    CL0TW01.CL0TWCIV = CLAREC.IV0IVCID;
    CL0TW01.CL0TWMS2 = ",PMY=";
    CL0TW01.CL0TWIIV = CLBREC.IV0IVCID;
    TA1REC.TA1TBLKE = CL0TW01.CL0TWMSG;
    TA1REC.TA1TYPE = "DB2"; /* abend type*/
    TA1REC.TA1FUNC = "POST"; /* abend func post to log, no map shown*/
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
    TA1REC.TA1LOCAT[1] = "CL0T130"; /* aborting process*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* messg then return*/
  end

   /* 062089 add above*/


end // end KL0T130

// get & update next claim number
Function KL0T131()
   /* ************************************************************/
   /* *     get and update next claim number                    **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E131"; /* set current process name*/


    /* iomod reads next-claim-number record, adds 1 to it*/
    /* then updates the database.*/

    /* if sqlcode ne 0 on the select,*/
       /* -2 is passed back in clm nbr*/
    /* else                 ; sqlcode eq 0 on select*/
      /* if sqlcode eq 0 on update,*/
         /* clm nbr is passed back in clm nbr*/
      /* else*/
      /* if sqlcode lt 0 on the update,*/
         /* -3 is passed back in clm nbr*/
      /* else*/
      /* if sqlcode gt 0 on the update,*/
          /* the update is tried 10 times*/
          /* if the update fails 10 times,*/
            /* -1 is passed back in clm nbr.*/

  set SQLCA empty;
  call "IO1380" ("UC", SQLCA, CLUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0TWCNF = "Y"; /* yes, claim nbr is ok*/
    CLAREC.CLACLMNB = CLUREC.CLUNXCLM; /* set claim number*/
    CL0TWUOK = "Y"; /* yes, update went ok*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
      converseLib.validationFailed(4); /* deadlock record message*/
      CL0TWCNF = "N"; /* no, claim nbr is not ok*/
      CL0TWUOK = "N"; /* no, update is not ok*/
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "READING NEXT-CLM-NBR REC FOR UPD";
      XPCL010(); /* abend*/
    end
  end


end // end KL0T131

// update invoice xref table
Function KL0T132()
   /* ************************************************************/
   /* update the invoice cross-reference table            **/
   /* **/
   /* MAINTENANCE HISTORY                                      **/
   /* **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with ivbrec.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0E132"; /* set current process name*/



  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "Y";
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* see if record exists*/
  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
          converseLib.validationFailed(4); /* deadlock record message*/
          CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
          CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
          return;
        else
          TA1REC.TA1TBLKE = "READING INV XREF RECORD";
          TA1REC.TA1DBASE = "DCLAIM";
          TA1REC.TA1TBLVU = "VCLIVX01";
          TA1REC.TA1LOCAT[2] = "CL0E132";
          XPCL010(); /* abend*/
        end
      end
    else

       /* if sqlcode from 's3' ne 0 or 100*/

      if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
        converseLib.validationFailed(4); /* deadlock record message*/
        CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
        return;
      else
        TA1REC.TA1TBLKE = "READING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLIVX01";
        TA1REC.TA1LOCAT[2] = "CL0E132";
        XPCL010(); /* abend*/
      end
    end

  end



  if (SQLCA.VAGen_SQLCODE == 0) /* if record exists*/
    set SQLCA empty;
    call "IO1180" ("D ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* del the existing primary*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
        converseLib.validationFailed(4); /* deadlock record message*/
        CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
        CL0TW01.CL0TWUOK = "N"; /* update not ok*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING INV XREF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLIVX01";
        TA1REC.TA1LOCAT[2] = "CL0E132";
        XPCL010(); /* abend*/
      end
    end
  end



  CLBREC.IV0PARTN = VIVHDR04.IV0PARTN;
  CLBREC.IV0IVCID = VIVHDR04.IV0IVCID;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.OP1PARTN = VIVHDR04.OP1PARTN;
  CLBREC.OP1CUOID = VIVHDR04.OP1CUOID;
  CLBREC.OP1NORID = VIVHDR04.OP1NORID;
  CLBREC.CLBPMIVC = "Y";
  CLBREC.IV0IVCDT = VIVHDR04.IV0IVCDT;
  CLBREC.YITCD = "I";
  CLBREC.CLBIVIND = "Y";
  CLBREC.CLBGLIND = "N";
  CLBREC.CLBSRIND = "N";
  CLBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLBREC.ZZZCHGTM = TA2REC.TA2TIMHM;

   /* need to close cursor before any further processing*/

  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clbrec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = "CLOSING INV XREF RECORD";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    TA1REC.TA1LOCAT[2] = "CL0E132";
    XPCL010(); /* abend*/
  end


  set SQLCA empty;
  call "IO1180" ("A ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* insert record into table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock*/
      converseLib.validationFailed(4); /* deadlock record message*/
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING INVOICE TO CROSS-REFERENCE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      TA1REC.TA1LOCAT[2] = "CL0E132";
      XPCL010(); /* abend*/
    end
  end





end // end KL0T132

// update claim/ar xref table
Function KL0T133()
   /* ************************************************************/
   /* *   build and write the claims consumer name record       **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T133"; /* set current process name*/


  set CLDREC empty;
  CLDREC.CLACLMNB = CLAREC.CLACLMNB;

  set SQLCA empty;
  call "IO1190" ("S ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0TW01.CL0TWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1TBLKE = "READING CLD RECORD FOR UPDATE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCNSMR01";
      XPCL010();
    end
  end

  CL0TW01.CL0TMCLN = KL0TM001.CL0TMCLN;

  CLDREC.CLD3NM = CL0TW01.CLD3NM;
  CLDREC.CLD7NM = CL0TW01.CLD7NM;

  if (SQLCA.VAGen_SQLCODE == 0) /* we have a record*/
    call "IO1190" ("U ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* update record*/
  else
    call "IO1190" ("A ", SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* add record*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0TW01.CL0TWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLD RECORD TO TABLE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCNSMR01";
      XPCL010();
    end
  end






end // end KL0T133

// update claim address table
Function KL0T134()
   /* ************************************************************/
   /* update claim address table                         **/
   /* **/
   /* NOTE: This section has been changed to no longer write  **/
   /* a return to address.  If this is a new claim, we  **/
   /* will set the return to address indicator to use   **/
   /* the ship-to address for the return to address.    **/
   /* **/
   /* MAINTENANCE HISTORY                                    **/
   /* 01-08-91  sgorga  Renamed kucrec.kuablid to            **/
   /* kucrec.kucblaid.  Renamed ivarec.kuablid to  **/
   /* ivarec.kuaadrid.                             **/
   /* 2-15-91  bcourt Renamed IVAREC.KUAADRID to KUCBLAID   **/
   /* Renamed CLAREC.KUABLID  to KUCBLAID   **/
   /* 10-09-92  sgorga  Added internal acct nbr 888888.       **/
   /* to be used in a claim in place of internal customers    **/
   /* (NIKE or SIDE1) that are closed or inactive.  See       **/
   /* comments in kl0ts39 for more information.               **/
   /* 02-12-93  sgorga  Replaced ivarec fields with ivbrec.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T134"; /* set current process name*/

  if (KL0TM001.OP1CUOID == 0) /* if no invoice/order*/
    CLAREC.CLABLGFF = "C";
    if (KL0TM001.OP1CMPNB != 0) /* IF COMP-CO-ID IS PRESENT GET THE*/
                                   /* BLGRP*/
      CLAREC.KUCBLAID = CL0TW06.KUCBLAID; /* ADDR ID FROM COMP-CO*/
    else
      CLAREC.KUCBLAID = KUCREC.KUCBLAID; /* 2-15-91*/
    end
    CL0TW01.CL0TWFNC = "ADD";
    KL0TS91(); /* get/write claim bill to addr rec*/
    if (CL0TW01.CL0TWACF == "Y") /* if address changed*/
      CLAREC.CLASHPFF = "E";
      CL0TW01.CL0TWFNC = "ADD";
      KL0TS92(); /* write claim ship-to addr rec*/
    else
      if (KL0TM001.CLACLMNB == 0 /* new claim*/
       || KL0TM001.CLLRTDSP == "NCLM")
        CLAREC.CLASHPFF = "C";
        CLAREC.KUMSHAID = KUMREC.KUMSHAID;
        CL0TW01.CL0TWFNC = "ADD";
        KL0TS92();
      end
    end
    /* if clxrec.claclmnb not zero, then we need to create a*/
    /* return to address because the user is using the NCLM*/
    /* option to 'replicate' an existing claim (and that claim*/
    /* has an entered return to address).*/
    if (CL0TW01.CL0TWHCN != 0)
      KL0TS93(); /* create return-to*/
    end
    return;
  end

   /* if we get here then we must have an invoice*/
   /* the only difference is whether or not the customer*/
   /* is 666666, 9666666, or 888888.*/

  if (KL0TM001.KUCCOID == 666666  /* if external nike special company*/
   || KL0TM001.KUCCOID == 9666666 /* or external side-1 special company*/
   || KL0TM001.KUCCOID == 888888) /* or internal account*/
    CLAREC.CLABLGFF = "C";
    CLAREC.KUCBLAID = KUCREC.KUCBLAID; /* 2-15-91*/
    CL0TW01.CL0TWFNC = "ADD";
    KL0TS91(); /* get/write claim bill to addr rec*/
    if (CL0TW01.CL0TWACF == "Y") /* if address changed*/
      CLAREC.CLASHPFF = "E";
      CL0TW01.CL0TWFNC = "ADD";
      KL0TS92(); /* write claim ship-to addr rec*/
    else
      if (KL0TM001.CLACLMNB == 0 /* if new claim*/
       || KL0TM001.CLLRTDSP == "NCLM")
        CLAREC.CLASHPFF = "I";
        CLAREC.KUMSHAID = VIVHDR04.KUMSHAID;
        CL0TW01.CL0TWFNC = "DELETE";
        KL0TS92(); /* delete existing shipto addr recs*/
      end
    end
    /* if clxrec.claclmnb not zero, then we need to create a*/
    /* return to address because the user is using the NCLM*/
    /* option to 'replicate' an existing claim (and that claim*/
    /* has an entered return to address).*/
    if (CL0TW01.CL0TWHCN != 0)
      KL0TS93(); /* create return-to*/
    end
  else
    if (KL0TM001.OP1CMPNB != 0) /* IF COMP-CO-ID IS PRESENT GET THE*/
                                   /* BLGRP*/
      CLAREC.CLABLGFF = "C";
      CLAREC.KUCBLAID = CL0TW06.KUCBLAID; /* ADDR ID FROM COMP-CO*/
    else
      CLAREC.CLABLGFF = "I";
      CLAREC.KUCBLAID = VIVHDR04.KUCBLAID; /* 2-15-91*/
    end
    CL0TW01.CL0TWFNC = "DELETE";
    KL0TS91(); /* delete existing bill-to addr recs*/
    if (CL0TW01.CL0TWACF == "Y") /* if address changed*/
      CLAREC.CLASHPFF = "E";
      CL0TW01.CL0TWFNC = "ADD";
      KL0TS92(); /* write claim ship-to addr rec*/
    else
      if (KL0TM001.CLACLMNB == 0
       || KL0TM001.CLLRTDSP == "NCLM")
        CLAREC.CLASHPFF = "I";
        CLAREC.KUMSHAID = VIVHDR04.KUMSHAID;
        CL0TW01.CL0TWFNC = "DELETE";
        KL0TS92(); /* delete existing shipto addr recs*/
      end
    end
    /* if clxrec.claclmnb not zero, then we need to create a*/
    /* return to address because the user is using the NCLM*/
    /* option to 'replicate' an existing claim (and that claim*/
    /* has an entered return to address).*/
    if (CL0TW01.CL0TWHCN != 0)
      KL0TS93(); /* create return-to*/
    end
  end

end // end KL0T134

// add/update return record
Function KL0T135()
   /* ************************************************************/
   /* *   update the return record to reflect the fact          **/
   /* *   that it is no longer completed due to a change in     **/
   /* *    the claim status                                     **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                         **/
   /* *---------------------------------------------------------**/
   /* * 01/27/92  GDECKE   ADD MAINTENANCE HISTORY AREA         **/
   /* * 08/13/93  JCAREY   CHANGED CLLPDCFL TO CL-PPD-COLL-IND. **/
   /* * 10/06/93  JCAREY   ADDED CODE TO INITIALIZE ZZ-SDT ON   **/
   /* *                    AN INSERT.                           **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0E135"; /* set current process name*/


  CLLREC.CLACLMNB = CLAREC.CLACLMNB;

  if (CL0TW01.CL0TWUTR == "Y") /* if supposed to update current return*/
     /* next sentence*/
  else
    CL0TW01.CL0TWMRN = CL0TW01.CL0TWMRN + 1;
    CLLREC.CLLRTNNB = CL0TW01.CL0TWMRN;
  end

  set SQLCA empty;
  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* actual return cllrec*/


  if (SQLCA.VAGen_SQLCODE == +0)
    if (CL0TW01.CL0TWUTR == "Y")
       /* next sentence*/
    else
      CL0TW01.CL0TWDON = "N"; /* not done if record exists*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
       /* next sentence*/
    else
      TA1REC.TA1TBLVU = "CLLREC";
      TA1REC.TA1LOCAT[2] = "CL0E135";
      XPCL010(); /* error abort routine*/
    end
  end


  CLLREC.CLLWRDT = CL0TW03.CLLWRDT;
  CLLREC.XWHCD = KL0TM001.XWHCD;
  CLLREC.TF1CARCD = KL0TM001.TF1CARCD;
  CLLREC.CL-PPD-COLL-IND = KL0TM001.CL-PPD-COLL-IND;
  CLLREC.CLLPDCCG = KL0TM001.CLLPDCCG;

  if (CL0TW01.CL0TWUTR == "Y") /* if supposed to update current return*/
    CLLREC.CLLNBRCV = CLLREC.CLLNBRCV + KL0TM001.CLLNBRCV;
  else
    CLLREC.CLLNBRCV = KL0TM001.CLLNBRCV;
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* if this is a brand new return record*/
    CLLREC.ZZ-SDT = CLXREC.XXXCDTE; /* initialize the setup date*/
  end

  if (KL0TM001.CLLRTDSP == "NCLM") /* if creating new claim entry*/
    CLLREC.TF1CARCD = " ";
    CLLREC.CLLNBRCV = 0;
    CLLREC.CL-PPD-COLL-IND = " ";
    CLLREC.CLLPDCCG = 0;
  end

  CLLREC.CLMTOGL1 = " ";
  CLLREC.XXXUSRID = COMMAREA.CAUSERID;
  CLLREC.CLLRTDSP = KL0TM001.CLLRTDSP;
  CLLREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLLREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  if (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "IO1310" ("U ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* updt existg rtn cllrec*/
  else
    set SQLCA empty;
    call "IO1310" ("A ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* add new return cllrec*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0TW01.CL0TWDON = "Y"; /* we're done*/
  else
    TA1REC.TA1TBLVU = "CLLREC";
    TA1REC.TA1LOCAT[2] = "CL0E135";
    XPCL010(); /* error abort routine*/
  end


  if (CLAREC.CLAORIGI == "B"  /* if this is a sales sample claim we*/
   && CL0TW01.CL0TWSAM == "Y" /* and sample flag is on*/
   && KL0TM001.CL0TMCLM != 0) /* and have secondary claim number*/
    KL0T145(); /* must update vclrtn01 for the other claim also.*/
  end


end // end KL0T135

// update carton count table
Function KL0T136()
   /* *************************************************************/
   /* *     update the carton counts for                         **/
   /* *          1.  warehouse/receipt date*/
   /* *          2.  warehouse/receipt date/carrier.*/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T136"; /* set current process name*/


  if (KL0TM001.XWHCD == " " /* if no warehouse*/
   || KL0TM001.CL0TMRDT == " ") /* or no receipt date*/
    return; /* can't get carton records*/
  end



    /* first we update the record for whse/receipt date*/

  CLZREC.XWHCD = KL0TM001.XWHCD; /* select record for this*/
  CLZREC.CLLWRDT = CL0TW03.CLLWRDT; /* warehouse and receipt date*/
  CLZREC.TF1CARCD = " ";
  call "IO2830" ("S ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* if found a record*/
   || SQLCA.VAGen_SQLCODE == 100) /* or record not found*/
     /* next sentence*/
  else /* we have a fatal db2 error*/
    TA1REC.TA1LOCAT[2] = "CL0T108";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLCTN01";
    XPCL010(); /* so abort program*/
  end


  CLZREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLZREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    CLZREC.CLLNBRCV = CLZREC.CLLNBRCV + KL0TM001.CLLNBRCV;
    call "IO2830" ("U ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* then updt existg record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if update went ok*/
       /* next sentence*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  else
    CLZREC.CLLNBRCV = 0;
    CLZREC.CLLNBRCV = CLZREC.CLLNBRCV + KL0TM001.CLLNBRCV;
    call "IO2830" ("A ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes}; /* otherwise add new record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if update went ok*/
       /* next sentence*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  end




   /* now we update the record for whse/receipt date/carrier*/


  CLZREC.XWHCD = KL0TM001.XWHCD; /* select record for this*/
  CLZREC.CLLWRDT = CL0TW03.CLLWRDT; /* warehouse and receipt date*/
  CLZREC.TF1CARCD = KL0TM001.TF1CARCD; /* and carrier*/
  call "IO2830" ("S ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* if found a record*/
   || SQLCA.VAGen_SQLCODE == 100) /* record NOT found*/
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[2] = "CL0T108";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLCTN01";
    XPCL010(); /* so abort program*/
  end


  CLZREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLZREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    CLZREC.CLLNBRCV = CLZREC.CLLNBRCV + KL0TM001.CLLNBRCV;
    call "IO2830" ("U ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes}; /* update existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if update went ok*/
       /* next sentence*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  else
    CLZREC.CLLNBRCV = 0;
    CLZREC.CLLNBRCV = CLZREC.CLLNBRCV + KL0TM001.CLLNBRCV;
    call "IO2830" ("A ", SQLCA, CLZREC) {isNoRefresh = yes, isExternal = yes}; /* otherwise add new record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if update went ok*/
       /* next sentence*/
    else /* we have a fatal db2 error*/
      TA1REC.TA1LOCAT[2] = "CL0T108";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCTN01";
      XPCL010(); /* so abort program*/
    end
  end




end // end KL0T136

// create rtn auth record
Function KL0T137()
   /* *************************************************************/
   /* CREATE A RETURN AUTHORIZATION HEADER RECORD          **/
   /* **/
   /* - this process only executes if no ra hdr rec exists -    **/
   /* **/
   /* **/
   /* Maintenance                                             **/
   /* 06-06-91  twatso  initialize restock flag (cljrskfl)     **/
   /* to 'y' if claim type (yctcd) = 'rfl'   **/
   /* 10-25-91  sgorga  Deleted stmt 'move 0 to cljrec.yrmrestk'.**/
   /* Added code:                                      **/
   /* (restock flag was already being set to 'y' if 'rfl' clm) **/
   /* If claim type is 'RFL' or 'RTS',                **/
   /* 1) set the restock charge flag = 'y'        **/
   /* 2) use the restock charge % from the yrmtbl **/
   /* (remerchandising tbl) to update cljrec.- **/
   /* yrmrestk, if a match is found using gpc  **/
   /* (see code).  If no match is found,       **/
   /* yrmrestk will be 0.                      **/
   /* 10-28-91  bcourt  init cr/db freight flags to 'n', not ' '.**/
   /* Replace above change with KL0OS91 code.       **/
   /* 11-11-91  twatso  added code for 'osd' to be treated like  **/
   /* 'def' for installation in dec 91.        **/
   /* 04-20-92  twatso  removed credit return flag = y;          **/
   /* cl#1020 - set both credit and debit return*/
   /* freight fields to 'n'                    **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0T137"; /* set current process name*/

  set CLJREC empty;

  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
   /* MOVE COMMAREA.CAUSERID TO CLJREC.XXXUSRID;(let Q assign)*/
   /* move ???? to cljrec.xsocd; only needed when requested in KL0Q*/
  CLJREC.CLJPRTLB = "N"; /* ; print label*/
  CLJREC.CLJLBRQT = 0; /* ; # label requests*/
  CLJREC.CLJNBLB = 0; /* ; # labels requested*/
  CLJREC.CLJLBTOT = 0; /* ; total labels printed*/
  CLJREC.CLJPRTRA = "N"; /* ; print RA flag*/
  CLJREC.CLJRARQT = 0; /* ; number RA requests*/
  CLJREC.CLJRAIDT = CLXREC.XXXCDTE; /* RA init date*/

  XSCLSEX(); /* get expiration date*/

  CLJREC.CLJORAXD = 0; /* original expir date*/
  CLJREC.CLJFRCRF = "N"; /* 10-28-91 move 'n', not ' '.*/
  CLJREC.CLJFRDBF = "N"; /* "*/

   /* this code removed 4-20-92 task #cl1120 - to avoid exception*/
   /* IF KL0TM001.YCTCD = 'OSD';*/
    /* MOVE 'Y' TO CLJREC.CLJFRCRF;   /* 11-22-91 move 'y if osd*/
   /* END;*/


                                 /* (*cwh 9/5/89*)*/
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XAUCD[sysVar.arrayIndex] == "12" /* if consumer def acct class*/
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "13" 
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "14" 
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "19" 
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "43" 
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "62")
      CLJREC.CLJNCRFL = "Y"; /* then non-credt return fl ='y'*/
    else
      CLJREC.CLJNCRFL = " ";
    end
  end

  CLJREC.XWHCD = KL0TM001.XWHCD;
  CLJREC.CLJTATHQ = 0;

  if (YCTTBL.YCTRTSF[CLXYCTX] == "Y") /* if type is rts*/
    CLJREC.CLJRDIND = "R";
  else
    if (YCTTBL.YCTDEF[CLXYCTX] == "Y") /* if type is defective or osd*/
      CLJREC.CLJRDIND = "D";
    end
  end

   /* ;;;;;;;;;; replace below with code copied from kl0os91 ;;;;;;;;*/
    /* 10-25-91  sgorga*/
   /* charge for restocking if clm typ is 'rfl' or 'rts',*/
   /* and use % from yrmtbl as cljrec restocking charge percent.*/

   /* IF KL0TM001.YCTCD = 'RFL'; /*  if claim is refusal*/
   /* OR KL0TM001.YCTCD = 'RTS'; /*  or 'rts',*/
    /* MOVE 'Y' TO CLJREC.CLJRSKFL; /* charge for restocking*/
    /* IF CLAREC.XGPCD IN YRMTBL.XGPCD; /* if gpc match found*/
    /* AND YRMTBL.XXXSTAT EQ 'A';      /*  and active*/
      /* MOVE YRMTBL.YRMRESTK TO CLJREC.YRMRESTK; /* use yrm % for cljrec*/
    /* END;*/
   /* ELSE;*/
    /* MOVE 'N' TO CLJREC.CLJRSKFL; /* don't charge for restocking*/
   /* END;*/
   /* ;;;;;;;;;; replace above with code copied from kl0os91 ;;;;;;;;*/
   /* -------------------------------------*/
  /* GET KL0OS91*/
   /* *************************************************************/
   /* *       default remerchandising flags on ra header         **/
   /* *************************************************************/

  CLJREC.CLJRSKFL = " "; /* init restocking charge flag*/
  CLJREC.YRMRESTK = 0; /* init restocking percent*/

  if (CLAREC.YCTCD == "DEF"
   || CLAREC.YCTCD == "CDR"
   || CLAREC.YCTCD == "OSD")
    CLJREC.CLJRSKFL = "N"; /* restocking charge   all NO*/
    CLJREC.CLJRBGFL = "N"; /* rebagging charge*/
    CLJREC.CLJRBXFL = "N"; /* reboxing charge*/
    CLJREC.CLJRTGFL = "N"; /* tag removal charge*/
    CLJREC.CLJUNLFL = "N"; /* unlacing charge*/
  else
    CLJREC.CLJRSKFL = "Y"; /* restock             all YES*/
    CLJREC.CLJRBGFL = "Y"; /* rebag*/
    CLJREC.CLJRBXFL = "Y"; /* rebox*/
    CLJREC.CLJRTGFL = "Y"; /* tag removal*/
    CLJREC.CLJUNLFL = "Y"; /* unlace*/

    if (CLAREC.XGPCD in YRMTBL.XGPCD /* find ftwr or aprl %*/
     && YRMTBL.XXXSTAT == "A")      
      CLJREC.YRMRESTK = YRMTBL.YRMRESTK; /* restocking percent*/
    end

  end

     /* **************************************************/
     /* read customer company vcmpny01,*/
     /* to get xau_acct_cls-cd, read account type table*/
     /* to get account type code. if not '02' value we  have*/
     /* internal account and don't charge for restocking*/
     /* **************************************************/
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT == "A")
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "02")
      CLJREC.CLJRSKFL = "N";
    end
  end

    /* ********************************************/
    /* if haven't found 'n' for restocking flag,*/
    /* default flag from claim reason code table.*/
    /* ********************************************/
  if (CLJREC.CLJRSKFL == "N")
     /* next sentence*/
  else
    if (CLAREC.YCRCD in YCRTBL.YCRCD
     && YCRTBL.XXXSTAT == "A")
      CLJREC.CLJRSKFL = YCRTBL.CLJRSKFL[sysVar.arrayIndex];
    end
  end

   /* --  end of copy from kl0os91  ----------------------*/

  CLJREC.CLJRBGFL = "N"; /* drop*/
  CLJREC.CLJRBXFL = "N"; /* "*/
  CLJREC.CLJRTGFL = "N"; /* "*/
  CLJREC.CLJUNLFL = "N"; /* "*/

  KL0T146(); /* get cljrec.xdacd from customer terms*/
  CLJREC.CLJRAIND = "N";
  CLJREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLJREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  set SQLCA empty;
  call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1TBLKE = "ADDING RTN AUTH HEADER";
    XPCL010();
  end

end // end KL0T137

// add transp. pro number record
Function KL0T138()
   /* *************************************************************/
   /* *     add transportation pro-number for this claim*/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T138"; /* set current process name*/


  set CLEREC empty;

  CLEREC.CLACLMNB = CLAREC.CLACLMNB;
  set SQLCA empty;
  call "IO1240" ("S ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* traffic rec for claim*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLTRF01";
    TA1REC.TA1TBLKE = "ADDING TRAFFIC RECORD";
    XPCL010();
  end


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLEREC empty;
    end
  end


  CLEREC.CLACLMNB = CLAREC.CLACLMNB;
  CLEREC.TF2PRONO = KL0TM001.TF2PRONO;
  CLEREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLEREC.ZZZCHGTM = CLXREC.XXXCHHMM;



  if (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "IO1240" ("U ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* traffic rec for claim*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      TA1REC.TA1TBLKE = "ADDING TRAFFIC RECORD";
      XPCL010();
    end
  else
    set SQLCA empty;
    call "IO1240" ("A ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* traffic rec for claim*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      TA1REC.TA1TBLKE = "ADDING TRAFFIC RECORD";
      XPCL010();
    end
  end





end // end KL0T138

// update claim header table
Function KL0T139()
   /* ************************************************************/
   /* *   update the claim header table                        **/
   /* *  12-02-92  LGROSS  added cl0tw-upd-fl to indicate if a  **/
   /* *            record will be updated or added.  This will  **/
   /* *            be used in kl0ts-writ-dm-rec which will write**/
   /* *            out a tag record for every direct market     **/
   /* *            transaction.  KL0T-GET-ACCT-CLS and the check**/
   /* *            for xau codes can be removed when all direct **/
   /* *            market records are marked 'cdr'.             **/
   /* *  12-03-92  JHECKE  added code to call new statement     **/
   /* *            group which will add type 'a' comment record **/
   /* *            for tracking original authorizer of claim.   **/
   /* *  01-07-93  BCOURT change 'dsd' to 'osd' (code ok in prod**/
   /* *            but this will replace prod and must be ok).  **/
   /* *            Add comment to skip error check.             **/
   /* *            Drop get-acct-cls since have KUCREC.         **/
   /* *  02-08-93  BCOURT Check consumer account table.         **/
   /* *  02-19-93  BCOURT add ezetst usage to kl14 tbl.         **/
   /* *  03-10-93  BCOURT  Change test to write csw activity log**/
   /* *               to check if from csw or s/b on csw.       **/
   /* *  10-29-93  GDECKE  Change CLAREC.YCSCD TO CLAREC.YCSCD1 **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T139"; /* default the coop analyst code*/
  CL0TW-UPD-FL = "N"; /* turn off update flag*/


  if (KL0TM001.CLLRTDSP == "RFSD") /* if refused*/
    if (CLAREC.YCSCD1 != "RUA"
     && CL0TW01.CL0TWMRN <= 1)
      CLAREC.YCSCD2 = CLAREC.YCSCD1;
      CLAREC.YCSCD1 = "RUA"; /* refused-unauthorized*/
      if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
        CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
      end
      CLAREC.CLASCGBY = COMMAREA.CAUSERID;
      CLAREC.CLASTTDT = CLXREC.XXXCDTE;
    end
  else
    if (CLAREC.YCSCD1 != "RIP")
      CLAREC.YCSCD2 = CLAREC.YCSCD1;
      CLAREC.YCSCD1 = "RIP"; /* return in process*/
      if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
        CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
         /* 4/89 expand straight move from tbl to clarec:*/
        if (CLAREC.YCTCD == "RFL") /* if a refusal*/
          CLAREC.YCSACTCD = "J"; /* then force to process in batch*/
        else
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        end
      end
      CLAREC.CLASCGBY = COMMAREA.CAUSERID;
      CLAREC.CLASTTDT = CLXREC.XXXCDTE;
    end
  end

  if (CL0TW01.CL0TWMRN > CLAREC.CLACRTNB)
    CLAREC.CLACRTNB = CL0TW01.CL0TWMRN;
  end

            /* if the primary invoice has changed,    cwh 7-13-89*/
               /* change the invoice on the claim header*/
  if (CLXREC.CLXORDFD == "Y"
   && CLAREC.IV0IVCID != CLBREC.IV0IVCID
   && CLBREC.IV0IVCID != 0)
    CLAREC.IV0IVCID = CLBREC.IV0IVCID;
    CLAREC.IV0PARTN = CLBREC.IV0PARTN;
  end

  CL0TW02.CLAGROUP = CLAREC.CLAGROUP; /* hold new clarec*/
   /* use below to test if row changed*/

  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0T139";
      XPCL010();
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    if (CLAREC.YCSCD1 == CL0TW02.YCSCD1     /* if status hasn't changed*/
     && CLAREC.CLATFIND == CL0TW02.CLATFIND /* nor traffic ind*/
     && CLAREC.CLACRTNB == CL0TW02.CLACRTNB /* curr return nbr*/
     && CLAREC.CLABLGFF == CL0TW02.CLABLGFF /* bill group address*/
     && CLAREC.CLASHPFF == CL0TW02.CLASHPFF /* ship from address*/
     && CLAREC.CLARTNFF == CL0TW02.CLARTNFF /* return to address*/
     && CLAREC.IV0IVCID == CL0TW02.IV0IVCID)
                                   /* invoice 8-8-89 see 7-13 abov*/
      return; /* ...no need to update*/
    end
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    if (CLAREC.ZZZCHGCT != CL0TW02.ZZZCHGCT) /* if changed*/
      converseLib.validationFailed(18); /* chngd by another user...reenter*/
      CLXREC.CLXERRF = "Y";
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      return;
    else
      set SQLCA empty;
      call "IO1160" ("D ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* delete existing record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if delete went ok*/
        CL0TW-UPD-FL = "Y"; /* this will be an update*/
      else
        TA1REC.TA1TBLKE = "DELETING EXISTING CLA RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLHDR01";
        TA1REC.TA1LOCAT[2] = "CL0E139";
        XPCL010();
      end
    end
  end


  CLAREC.CLAGROUP = CL0TW02.CLAGROUP; /* restore new data*/

  CLAREC.CLAWSENF = "N"; /* not worksheet entered*/
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;

   /* ************ new code for task cl1180 **************************/
   /* IF CLAREC.YCTCD = 'CDR';drop 2-8-93*/
  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID /* add 2-8-93 consumer acct.*/
   || CLAREC.YCTCD == "OSD")             /* change from 'dsd' 1-7-93*/
    KL0TS-AUTO-AUTH(); /* Jackie Evey and Bob Kreinberg Claims*/
  end
   /* ************* end of new code**********************************/

  set SQLCA empty;
  call "IO1160" ("A ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if add/update not ok*/
    TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0T139";
    XPCL010();
  else /* add/update ok*/
    if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
      if (CLAREC.CLAORIGI == "D" /* if from the csw*/
       || CLAREC.CLAORIGI == "T") /* or ibm generated*/
        KL0TS-WRIT-DM-REC(); /* write tag record for direct marketing*/
      end
    end
  end



end // end KL0T139

// update clm hdr tbl-sales sampl
Function KL0T13A()
   /* ************************************************************/
   /* *   update the claim header table on the secondary claim  **/
   /* *   for a sales sample claim.                             **/
   /* * 12-02-92  lgross  added cl0tw01-upd-fl to indicate when **/
   /* *           record has been updated rather than added.    **/
   /* *           This flag will be used in kl0ts-writ-dm-rec.  **/
   /* *           Call to KL0T-GET-ACCT-CLS and check for acct  **/
   /* *           class can be removed when all d.m are marked  **/
   /* *           'cdr'.                                        **/
   /* * 01-07-93  bcourt  add comment to skip error check.      **/
   /* *                   Drop get-acct-cls since have KUCREC.  **/
   /* * 02-08-93  bcourt  Use consumer acct tbl to id for unix. **/
   /* * 02-19-93  bcourt  add ezetst usage to kl14 tbl.         **/
   /* * 03-10-93  bcourt  Change from testing active csw acct   **/
   /* *              to test if is or should-be on csw.         **/
   /* * 10-29-93  GDECKE  Change CLAREC.YCSCD TO CLAREC.YCSCD1  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T13A";
  CL0TW01.CL0TW-UPD-FL = "N"; /* turn off update flag*/

  CL0TW02.CLAGROUP = CLAREC.CLAGROUP; /* hold primary claim clarec*/

  CLAREC.CLACLMNB = CL0TW01.CL0TWCLM; /* sales sample secondary claim*/
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "INQUIRING ON CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0T13A";
      XPCL010();
    end
  end


  if (KL0TM001.CLLRTDSP == "RFSD") /* if refused*/
    if (CLAREC.YCSCD1 != "RUA"
     && CL0TW01.CL0TWMRN <= 1)
      CLAREC.YCSCD2 = CLAREC.YCSCD1;
      CLAREC.YCSCD1 = "RUA"; /* refused-unauthorized*/
      if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
        CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
      end
      CLAREC.CLASCGBY = COMMAREA.CAUSERID;
      CLAREC.CLASTTDT = CLXREC.XXXCDTE;
    end
  else
    if (CLAREC.YCSCD1 != "RIP")
      CLAREC.YCSCD2 = CLAREC.YCSCD1;
      CLAREC.YCSCD1 = "RIP"; /* return in process*/
      if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
        CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
         /* 4/89 expand straight move from tbl to clarec:*/
        if (CLAREC.YCTCD == "RFL") /* if a refusal*/
          CLAREC.YCSACTCD = "J"; /* then force to process in batch*/
        else
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        end
      end
      CLAREC.CLASCGBY = COMMAREA.CAUSERID;
      CLAREC.CLASTTDT = CLXREC.XXXCDTE;
    end
  end

  if (CL0TW01.CL0TWMRN > CLAREC.CLACRTNB)
    CLAREC.CLACRTNB = CL0TW01.CL0TWMRN;
  end



  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    set SQLCA empty;
    call "IO1160" ("D ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* delete existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if delete went ok*/
      CL0TW01.CL0TW-UPD-FL = "Y"; /* this will be an update not add*/
    else
      TA1REC.TA1TBLKE = "DELETING EXISTING CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0E139";
      XPCL010();
    end
  end



  CLAREC.CLAWSENF = "N"; /* not worksheet entered*/
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;



  set SQLCA empty;
  call "IO1160" ("A ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
  if (SQLCA.VAGen_SQLCODE != 0) /* add/update didn't work*/
    TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0T13A";
    XPCL010();
  else
    if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
      if (CLAREC.CLAORIGI == "D" /* from csw*/
       || CLAREC.CLAORIGI == "T") /* or ibm generated*/
        KL0TS-WRIT-DM-REC(); /* update tag file*/
      end
    end
  end

   /* 03-10-93 drop ezertn after the above code,*/
     /* so the next sentence will be executed.*/
     /* used to be: if kl14tbl ... ezertn else ezertn.*/
  CLAREC.CLAGROUP = CL0TW02.CLAGROUP; /* restore primary claim clarec*/


end // end KL0T13A

// update clm hdr-CUST DEPT CONV.
Function KL0T13B()
   /* ************************************************************/
   /* *   update the claim header table WITH CONVERTED TO       **/
   /* *   COMPANY-STORE-DEPARTMENT.                             **/
   /* * 12-02-92  lgross add cl0tw-upd-fl which will indicate   **/
   /* *           whether a record has been updated or added.   **/
   /* *           This flag is used when records are written    **/
   /* *           to DCLAIM.VDMACT01 in kl0ts-writ-dm-rec.      **/
   /* *           Call to KL0T-GET-ACCT-CLS and check for xau-  **/
   /* *           acct-cls-cd can be removed after all direct   **/
   /* *           markets are marked with 'cdr'.                **/
   /* * 01-07-93  BCOURT Drop get-acct-cls since have KUCREC.   **/
   /* * 02-08-93  BCOURT Check consumer acct tbl for unix.      **/
   /* * 02-19-93  BCOURT add ezetst usage to kl14 tbl.          **/
   /* * 03-10-93  BCOURT  Change csw activity log test          **/
   /* *              to check if on csw or s/b on csw.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T13B";
  CL0TW01.CL0TW-UPD-FL = "N"; /* turn off update flag*/

  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      return;
    else
      return; /* IF NOT FOUND- NO NEED TO UPDATE*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0) /* if record was found*/
    set SQLCA empty;
    call "IO1160" ("D ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* delete existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if delete went ok*/
      CL0TW-UPD-FL = "Y"; /* this is an update*/
    else
      TA1REC.TA1TBLKE = "DELETING EXISTING CLA RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "CL0E139";
      XPCL010();
    end
  end

  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLAREC.KUCCOID = KL0TM001.KUCCOID; /* MOVE CONVERTED-TO COMPNAY ID*/
  CLAREC.KUMSTRID = KL0TM001.KUMSTRID; /* MOVE CONV-TO STORE ID*/
  CLAREC.XNXCD = KL0TM001.XNXCD; /* MOVE CONV-TO DEPARTMENT*/

  set SQLCA empty;
  call "IO1160" ("A ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if add/update no ok*/
    TA1REC.TA1TBLKE = "ADDING CLA RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    TA1REC.TA1LOCAT[2] = "CL0T13B";
    XPCL010();
  else /* if update ok*/
    if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
      if (CLAREC.CLAORIGI == "D" /* from csw*/
       || CLAREC.CLAORIGI == "T") /* or ibm generated*/
        KL0TS-WRIT-DM-REC(); /* write out direct market tag record*/
      end
    end
  end


end // end KL0T13B

// build new clarec from defaults
Function KL0T140()
   /* ************************************************************/
   /* build new clarec from entries/defaults                **/
   /* **/
   /* Maintenance:                                            **/
   /* when       who    why                                   **/
   /* 10-12-90  bcourt  change XCGCD to OP1COGID.             **/
   /* change XCUCD(3) to XCECD.             **/
   /* 2-15-91  bcourt  change CLAREC.XCUCD to XCECD          **/
   /* drop KUMREC.YSBCD, SM4REPID, SM1AGYID **/
   /* 6-06-91  twatso  cl#1024 --*/
   /* initialize  clapryct = 'r'  if yctcd  **/
   /* is =  'rfl'  refusal to be used in    **/
   /* later processing (previous yctcd)     **/
   /* 07-31-91  twatso  added code for cl8tbl - agency/rep*/
   /* default table to use for def claims.  **/
   /* 09-03-91  chellm  Added CL0TS-DFLT-XOCCD to defalut the*/
   /* Order Class code 15 on Consumer Claims*/
   /* 12-12-91 twatso   added default code for side1 and i.e. **/
   /* (for product category -hinge on brand*/
   /* and gpc code) so we can pick up agcy/rep*/
   /* for them, rather than just best bet*/
   /* may need to be changed if brand05,product*/
   /* cat code 9402, or ta03; or brand07*/
   /* product cat code 9502 are ever inactivated.*/
   /* 12-18-91  twatso  exclude getting xaucd 26 and 27 from the*/
   /* cl8tbl because they are rep account classes*/
   /* 04-07-92  sgorga  Replaced the call to subpgm CU1290 with*/
   /* a call to the new subpgm, KU1350 (used to*/
   /* get agency/rep).*/
   /* 06-12-92  sgorga  DB2 Chngs.  Replaced code using xwhtbl.-*/
   /* xwhcrsvp field, since the field wasdeleted.*/
   /* Now using commarea.causerid.  Renamed clarec.-*/
   /* clatbyid to clarec.cl-taken-by-id*/
   /* 02-12-93  sgorga  Replaced iva/iv0 rec fields with ivbrec.*/
   /* 10-21-94  sgorga  Added xob cd & '**' in gndr-age field to*/
   /* pass to KU1350, via ku5rec.*/
   /* 10-28-94  sgorga  REPLACE IVBREC WITH VIVHDR04.*/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0T140"; /* set current process name*/

  set CLAREC empty;

  CLAREC.CLACLMNB = CLUREC.CLUNXCLM; /* set claim number*/
  CLAREC.KUCCOID = KL0TM001.KUCCOID;
  CLAREC.KUMSTRID = KL0TM001.KUMSTRID;
  CLAREC.XNXCD = KL0TM001.XNXCD;
  CLAREC.XGPCD = KL0TM001.XGPCD;
  CLAREC.YCTCD = KL0TM001.YCTCD;
  CLAREC.YCRCD = KL0TM001.YCRCD;
  CLAREC.XDVCD = KL0TM001.XDVCD; /* 4/89 division code*/
  CLAREC.XBCCD = KL0TM001.XBCCD; /* 5/90 brand code*/
  CLAREC.OP1COGID = KL0TM001.OP1COGID; /* 5/90 cogd code*/
  CLAREC.OP1CMPNB = KL0TM001.OP1CMPNB; /* 5/90 comp-co id*/
  CLAREC.XOBCD = KL0TM001.XOBCD; /* base order type*/
  CLAREC.XOTCD = CL0TW01.XOTCD; /* order type from cl0t126*/
  CLAREC.XSOCD = KL0TM001.XSOCD; /* sales office*/
  CLAREC.XCECD = KUCREC.XCECD; /* 10/90, 2-15-91*/

  if (KL0TM001.YCTCD == "RFL") /* 6-6-91 change  - initialize*/
    CLAREC.CLAPRYCT = "R"; /* prior claim type to use later*/
  end

  KL0T141(); /* default internal/external code*/

  if (KUCREC.YCPCD == 0)
    KL0T142(); /* default coop-analyst*/
  else
    CLAREC.YCPCD = KUCREC.YCPCD;
  end

   /* get most likely sales agcy/rep for customer,gpc*/

  if (KL0TM001.OP1CUOID == 0)
                                   /* if no order number, default from cust*/
    CLAREC.YITCD = "N"; /* no invoice*/
    set KU5REC empty; /* get the most likely rep and agency*/
    KU5REC.KUCCOID = CLAREC.KUCCOID; /* for entered cust/stor/dpt,gpc*/
    KU5REC.KUMSTRID = CLAREC.KUMSTRID;
    KU5REC.XNXCD = CLAREC.XNXCD;
    KU5REC.XDVCD = CLAREC.XDVCD;
    KU5REC.XPCCD = "**"; /* no product category known*/

    /* if side1 or ie brand codes hard code a default product category*/
    /* so that we can get a side1 or id agency rep when doing the call*/
      /* at this time there is no gpc 03 for ie - all handled thru gpc02*/
    /* code added 12-11-91 (tw)gpc03, brand 07 will pick up generic*/
    /* product category code*/

    if (KL0TM001.XBCCD == "05") /* side1 brand 05 cat code 9402*/
      if (KL0TM001.XGPCD == "02")
        KU5REC.XPCCD = "94"; /* default product category*/
      end
      if (KL0TM001.XGPCD == "03") /* brand 05, cat code ta03*/
        KU5REC.XPCCD = "TA"; /* default product category*/
      end
    end
    if (KL0TM001.XBCCD == "07") /* i.e.  brand 07 cat code 9502*/
      if (KL0TM001.XGPCD == "02")
        KU5REC.XPCCD = "95"; /* default product category*/
      end
    end

    KU5REC.XGPCD = CLAREC.XGPCD;
     /* MOVE CLAREC.CLASETDT TO KU5REC.OP1ORCDT;*/
    KU5REC.OP1ORCDT = CLXREC.XXXCDTE; /* today's date*/
    KU5REC.XPLCD = "**"; /* no product line known*/
    KU5REC.XGACD = "**"; /* no gender age info*/
    KU5REC.XOBCD = CLAREC.XOBCD;
    KU5REC.KU5-CALLING-PROGRAM-ID = "KL0T140";

        /* Cust # is already converted in kl0ts4c,*/
        /* so no need to do it here (in subpgm ku1350)*/
    KU5REC.KU5-CONV-DEPT-FLAG = "N"; /* don't check to convert*/
    KU5REC.KU5-READ-SA-FLAG = "N"; /* use cust system for processing*/

    call "KU1350" (KU5REC) {isNoRefresh = yes, isExternal = yes}; /* get best bet sales agcy/rep*/

    if (KU5REC.KU5-READ-STATUS == "00") /* read successfully*/
      CLAREC.SM4REPID = KU5REC.SM4REPID;
      CLAREC.SM1AGYID = KU5REC.SM1AGYID;
    else
      CLAREC.SM4REPID = 0; /* this should mean company is closed*/
      CLAREC.SM1AGYID = " "; /* & edits in other sgrp will have user*/
    end /* ; set company = 666666 so this*/
                                   /* process is done again*/
    /* **********************************************/
    /* if claim is a defective,*/
    /* hard to determine who should pay back the commission,*/
    /* so check the table and move in default salesrep*/
    /* depending on agency*/
    /* do not go to table if account class = '26' or '27'*/

    /* added osd to this paragraph 11-11-91*/
    if (KL0TM001.YCTCD == "DEF" /* 7-31-91 change*/
     || KL0TM001.YCTCD == "OSD") /* 7-31-91 change*/
      if (KUCREC.XAUCD != "26"
       && KUCREC.XAUCD != "27")
        if (CLAREC.SM1AGYID in CL8TBL.SM1AGYID) /* default sales rep table*/
          CLAREC.SM4REPID = CL8TBL.SM4REPID[sysVar.arrayIndex];
        end
      end
    end

    /* **********************************************/
    CLAREC.OP1CUPO = " ";
    CLAREC.IV0PARTN = "0";
    CLAREC.IV0IVCID = 0;
    CLAREC.SP1ID = " ";
    CLAREC.XOCCD = " ";
     /* MOVE ' ' TO CLAREC.XOTCD; 4/89 drop 3 lines (moved from map*/
     /* MOVE ' ' TO CLAREC.XOBCD; 3-31-89 add*/
     /* MOVE ' ' TO CLAREC.XDVCD; 3-31-89 add*/
    CLAREC.XPTCD = " ";
    CLAREC.XWHCD = KL0TM001.XWHCD;
  else
    CLAREC.YITCD = "I"; /* build claim from invoice*/
    CLAREC.CLABLGFF = "I";
    CLAREC.CLASHPFF = "I";
    CLAREC.SM1AGYID = VIVHDR04.SM1AGYID;
    CLAREC.SM4REPID = VIVHDR04.SM4REPID;
    CLAREC.XSOCD = VIVHDR04.XSOCD;
    CLAREC.OP1CUPO = VIVHDR04.OP1CUPO;
    CLAREC.IV0PARTN = VIVHDR04.IV0PARTN;
    CLAREC.IV0IVCID = VIVHDR04.IV0IVCID;
    CLAREC.SP1ID = VIVHDR04.SP1ID;
    CLAREC.XOCCD = VIVHDR04.XOCCD;
    CLAREC.XPTCD = VIVHDR04.XPTCD;
    CLAREC.XWHCD = VIVHDR04.XWHCD;
    CLAREC.KUYSVRID = VIVHDR04.OP1TBREP;
  end

  CLAREC.CL-TAKEN-BY-ID = COMMAREA.CAUSERID; /* 06-12-92 sgorga*/

   /* 4/89 no longer valid to default sales office*/
   /* IF CLAREC.XSOCD = ' ';*/
    /* PERFORM CL0T145 ; deflt sales office from cust svc rep*/
   /* END ;*/

   /* 4/89 no longer valid to default order type*/
   /* IF CLAREC.XOBCD = ' ';*/
    /* PERFORM CL0T147 ; default order type*/
   /* END ;*/

  CLAREC.YCSCD1 = "RIP"; /* force status 'return in process'*/
  CLAREC.YCSCD2 = " ";
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
    CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
    if (CLAREC.YCTCD == "RFL") /* if a refusal*/
      CLAREC.YCSACTCD = "J"; /* then force to process in batch*/
    else
      CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    end
  end

  CLAREC.CLASCGBY = COMMAREA.CAUSERID;
  CLAREC.CLASETDT = CLXREC.XXXCDTE;
  CLAREC.CLASTTDT = CLXREC.XXXCDTE;
  CLAREC.CLACCLDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  if (CLAREC.YCTCD == "CDR") /* creating a CDR*/
    KL0TS70(); /* so try for authorize id*/
    KL0TS-DFLT-XOCCD(); /* default the order class code*/
  else
    CLAREC.CLYATHID = 0;
  end
  CLAREC.CLAOCAMT = 0;
  CLAREC.CLAESTVL = 0;
  CLAREC.CLATQTY = 0;
  CLAREC.CLADNLDT = 0;
  CLAREC.CLACTCNM = " ";
  CLAREC.CLAORIGI = "T"; /* so we know T created claim*/
  CLAREC.CLACSQNB = 1; /* curr sequence code*/
  CLAREC.CLACRTNB = 1; /* curr return nbr*/
  CLAREC.CLACISNB = 1; /* curr inspection nbr*/
  CLAREC.CLACAIND = "N";
  CLAREC.CLAAUTHF = "N"; /* 080889 chng from CLACOOPF*/
  CLAREC.CLAMEIND = "N";
  CLAREC.CLADBOCL = "N";
  CLAREC.CLACMIND = "N";
  CLAREC.CLATFIND = "N";
  CLAREC.CLACNIND = "N";
  CLAREC.CLADJIND = "N";
  CLAREC.CLADNLFL = "N";
  CLAREC.CLARTNFF = "S";

end // end KL0T140
// default internal/externalflag
Function KL0T141()
   /* **************************************************************/
   /* *  default the internal/external flag                       **/
   /* * Maintenance                                               **/
   /* *  06-06-91 - twatso  cl#999 --                             **/
   /* *                     added  clarec.xiecd = 'i'             **/
   /* *                     if claim type (yctcd) = 'rfl'         **/
   /* *  11-11-91   twatso  added if osd them external flag at end**/
   /* *  07-08-92   twatso  above not true - should be same as def**/
   /* *                     removed default at bottom and changed **/
   /* *                     in the 'ifs' in the body of coding    **/
   /* *  06-21-93   jcarey  added new code to assign EO xie code  **/
   /* *                     to an 'e' xie code. also added the    **/
   /* *                     pod claims assignment to an internal  **/
   /* *                     xie code.                             **/
   /* *  08-04-93   jcarey  took on the assignment of credit      **/
   /* *                     status 'u' to an internal assignment. **/
   /* *                     customer xie code will now be used.   **/
   /* *                                                           **/
   /* *  10-30-97   RCHAUV  reason code conversion - OLD=NEW      **/
   /* *                     U45=F11 U46=F12 U11=T11 U12=T12       **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0T141"; /* set current process name*/

  if (KUCREC.XCCCD == "R" /* 2-1-90 new value: acct closed by*/
   /* sales*/
   || KUCREC.XCCCD == "S" 
   || KUCREC.XCCCD == "T" 
   || KUCREC.XCCCD == "V" 
   || KUCREC.XCCCD == "W" 
   || KUCREC.XCCCD == "X" 
   || KUCREC.XCCCD == "Y" 
   || KUCREC.XCCCD == "Z")
    CLAREC.XIECD = "I";
  else
    if (KUCREC.XIECD == "I")
      CLAREC.XIECD = "I";
    else
      if (KUCREC.XIECD == "E")
        CLAREC.XIECD = "E";
      else
        if (KUCREC.XIECD == "EC")
          CLAREC.XIECD = "I";
        else
          if (KUCREC.XIECD == "ED")
            if (KL0TM001.YCTCD == "DEF"
             || KL0TM001.YCTCD == "OSD")
              CLAREC.XIECD = "E";
            else
              CLAREC.XIECD = "I";
            end
          else
            if (KUCREC.XIECD == "EE")
              if (KL0TM001.YCTCD == "DEF"
               || KL0TM001.YCTCD == "OSD")
                CLAREC.XIECD = "E";
              else
                CLAREC.XIECD = "I";
              end
            else
              if (KUCREC.XIECD == "ER")
                if (KL0TM001.YCTCD == "RTS"
                 || KL0TM001.YCTCD == "DEF"
                 || KL0TM001.YCTCD == "OSD")
                  CLAREC.XIECD = "E";
                else
                  CLAREC.XIECD = "I";
                end
              else
                if (KUCREC.XIECD == "RD")
                  if (KL0TM001.YCTCD == "RTS"
                   || KL0TM001.YCTCD == "DEF"
                   || KL0TM001.YCTCD == "OSD")
                    CLAREC.XIECD = "E";
                  else
                    CLAREC.XIECD = "I";
                  end
                else
                  if (KUCREC.XIECD == "RE")
                    if (KL0TM001.YCTCD == "RTS")
                      CLAREC.XIECD = "E";
                    else
                      CLAREC.XIECD = "I";
                    end
                  else
                    if (KUCREC.XIECD == "EO")
                      CLAREC.XIECD = "E";
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  if (KL0TM001.OP1CMPNB > 0) /* 08-10-90*/
    CLAREC.XIECD = "I"; /* Claims with Comp-co accounts are*/
  end /* always internal*/

  if (KL0TM001.YCTCD == "RFL") /* 06-06-91 - if it was a refusal*/
    CLAREC.XIECD = "I"; /* refusals should be internal to apply*/
  end /* to existing invoices by cr analysts*/

   /* 10/30/97 rchauv REASON CODE CONVERSION - SEE NOTE AT TOP*/
  if (KL0TM001.YCRCD == "F11" /* all pod claims are internal*/
   || KL0TM001.YCRCD == "F12" 
   || KL0TM001.YCRCD == "T11" 
   || KL0TM001.YCRCD == "T12")
    CLAREC.XIECD = "I";
  end

   /* 07-08-92 twatso removed because was not acting like defectives*/
   /* need to be getting from the kucrec and using that as the determinant*/
   /* so handled lile the defectives above.*/

   /* IF KL0TM001.YCTCD = 'OSD';       /* if it was offshore defective*/
    /* MOVE 'E' TO CLAREC.XIECD;      /* should be handled like defective*/
   /* END;                             /**/
                                  /* easier to see here than in the above*/

end // end KL0T141

// default the coop analyst code
Function KL0T142()
   /* ************************************************************/
   /* *      default the coop-analyst code                      **/
   /* *                                                         **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  01-08-91  sgorga  Deleted call to KUAREC.  Renamed     **/
   /* *                    kuarec.kuaadrid to kucrec.kucblaid.  **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0T142"; /* default the coop analyst code*/


   /* 01-08-91 sgorga  deleted call to KUAREC.*/
   /* Renamed kuarec.kuaadrid to kucrec.kucblaid*/

  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID;

  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    CLAREC.YCPCD = 99; /* default to sonia cook*/
    return;
  end


  if (KULREC.XSTCD in XSTTBL.XSTCD)
    CLAREC.YCPCD = XSTTBL.YCPCD[sysVar.arrayIndex];
  else
    CLAREC.YCPCD = 99; /* default to sonia cook*/
  end


end // end KL0T142

// build NCLM clarec from deflts
Function KL0T143()
   /* ************************************************************/
   /* *   build new clarec from entries                         **/
   /* *                                                         **/
   /* *      This routine is used when the user has specified   **/
   /* *      the NCLM option. Since we allready have a claim    **/
   /* *      header, we don't have much else to do.             **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T143"; /* set current process name*/


  CLAREC.CLACLMNB = CLUREC.CLUNXCLM; /* set claim number*/

  KL0T141(); /* internal/external code*/

  CLAREC.YCSCD1 = "RIP";
  CLAREC.YCSCD2 = " ";
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
    CLAREC.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
    if (CLAREC.YCTCD == "RFL") /* if a refusal 4/89*/
      CLAREC.YCSACTCD = "J"; /* then force to process in batch*/
    else
      CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    end
  end


  CLAREC.CLASCGBY = COMMAREA.CAUSERID;
  CLAREC.CLASETDT = CLXREC.XXXCDTE;
  CLAREC.CLASTTDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLAREC.CLAOCAMT = 0;
  CLAREC.CLAESTVL = 0;
  CLAREC.CLATQTY = 0;
  CLAREC.CLADNLDT = 0;
  CLAREC.CLAORIGI = "T"; /* so we know T created claim*/
  CLAREC.CLACSQNB = 1;
  CLAREC.CLACRTNB = 1;
  CLAREC.CLACISNB = 1;
  CLAREC.CLACAIND = "N";
  CLAREC.CLAAUTHF = "N"; /* 080889 chng from CLACOOPF*/
  CLAREC.CLAMEIND = "N";
  CLAREC.CLADBOCL = "N";
  CLAREC.CLACMIND = "N";
  CLAREC.CLATFIND = "N";
  CLAREC.CLACNIND = "N";
  CLAREC.CLADJIND = "N";
  CLAREC.CLADNLFL = "N";

end // end KL0T143

// add/update return record
Function KL0T145()
   /* ************************************************************/
   /* *   update the return record for secondary sales sample clm*/
   /* **/
   /* * 08-13-93 JCAREY CHANGED CLLPDCFL TO CL-PPD-COLL-IND.*/
   /* * 10-06-93 JCAREY ADDED CODE TO INITIALIZE ZZ-SDT ON AN*/
   /* *          INSERT.*/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0T145"; /* set current process name*/


  CLLREC.CLACLMNB = CL0TW01.CL0TWCLM[1];


  set SQLCA empty;
  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* actual return cllrec*/


  if (SQLCA.VAGen_SQLCODE == +0)
    if (CL0TW01.CL0TWUTR == "Y")
       /* next sentence*/
    else
      CL0TW01.CL0TWDON = "N"; /* not done if record exists*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
       /* next sentence*/
    else
      TA1REC.TA1TBLVU = "CLLREC";
      TA1REC.TA1LOCAT[2] = "CL0T145";
      XPCL010(); /* error abort routine*/
    end
  end


  CLLREC.CLLWRDT = CL0TW03.CLLWRDT;
  CLLREC.XWHCD = KL0TM001.XWHCD;
  CLLREC.TF1CARCD = KL0TM001.TF1CARCD;
  CLLREC.CL-PPD-COLL-IND = KL0TM001.CL-PPD-COLL-IND;
  CLLREC.CLLPDCCG = KL0TM001.CLLPDCCG;

  if (CL0TW01.CL0TWUTR == "Y") /* if supposed to update current return*/
    CLLREC.CLLNBRCV = CLLREC.CLLNBRCV + KL0TM001.CLLNBRCV;
  else
    CLLREC.CLLNBRCV = KL0TM001.CLLNBRCV;
  end

  if (KL0TM001.CLLRTDSP == "NCLM") /* if creating new claim entry*/
    CLLREC.TF1CARCD = " ";
    CLLREC.CLLNBRCV = 0;
    CLLREC.CL-PPD-COLL-IND = " ";
    CLLREC.CLLPDCCG = 0;
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* if this is a brand new return record*/
    CLLREC.ZZ-SDT = CLXREC.XXXCDTE; /* initialize the setup date*/
  end

  CLLREC.CLMTOGL1 = " ";
  CLLREC.XXXUSRID = COMMAREA.CAUSERID;
  CLLREC.CLLRTDSP = KL0TM001.CLLRTDSP;
  CLLREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLLREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  if (SQLCA.VAGen_SQLCODE == 0)
    set SQLCA empty;
    call "IO1310" ("U ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* updt existg rtn cllrec*/
  else
    set SQLCA empty;
    call "IO1310" ("A ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* add new return cllrec*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0TW01.CL0TWDON = "Y"; /* we're done*/
  else
    TA1REC.TA1TBLVU = "CLLREC";
    TA1REC.TA1LOCAT[2] = "CL0T145";
    XPCL010(); /* error abort routine*/
  end





end // end KL0T145

// Select def. allow. VTERMS01
Function KL0T146()
   /* *************************************************************/
                                                             /* **/
      /* SELECT THE DEFECTIVE ALLOWANCE FROM DCUST.VTERMS01     **/
                                                             /* **/
     /* 1) Select the terms record and keep the appropiate      **/
        /* value for the defective allowance field.             **/
                                                             /* **/
   /* 02-07-94 jcarey Initialized sqlca record.                 /* **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0T146"; /* Set current process name*/


  KUTREC.KUCCOID = CLAREC.KUCCOID;
  KUTREC.KUMSTRID = CLAREC.KUMSTRID;
  KUTREC.XNXCD = CLAREC.XNXCD;
  KUTREC.XGPCD = CLAREC.XGPCD;
  KUTREC.XOTCD = CLAREC.XOTCD;

  set SQLCA empty;
  call "IO0350" ("S ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* Read terms record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLAREC.CLASETDT >= KUTREC.KUTENDT[1] /* Obtain appropriate xndcd*/
     && CLAREC.CLASETDT <= KUTREC.KUTXNDT[1])
      if (KUTREC.XDACD[1] in XDATBL.XDACD /* If code in table*/
       && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        CLJREC.XDACD = XDATBL.XDACD[sysVar.arrayIndex];
      end
    else
      if (CLAREC.CLASETDT >= KUTREC.KUTENDT[2] /* Obtain appropriate xndcd*/
       && CLAREC.CLASETDT <= KUTREC.KUTXNDT[2])
        if (KUTREC.XDACD[2] in XDATBL.XDACD /* If code in table*/
         && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
          CLJREC.XDACD = XDATBL.XDACD[sysVar.arrayIndex];
        end
      else
        if (CLAREC.CLASETDT >= KUTREC.KUTENDT[3]
         /* Obtain appropriate xndcd*/
         && CLAREC.CLASETDT <= KUTREC.KUTXNDT[3])
          if (KUTREC.XDACD[3] in XDATBL.XDACD /* If code in table*/
           && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
            CLJREC.XDACD = XDATBL.XDACD[sysVar.arrayIndex];
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end


end // end KL0T146

// Create CLCREC if needed
Function KL0T150()

   /* This routine will create a CLCREC (VCLARX01) if one existed*/
   /* for the claim we are replicating from (NCLM disposition).*/
   /* The old claim number has already been pre-loaded from the*/
   /* CL0T130 module before this routine is called.*/
     /* 02-07-94 jcarey Initialized the sqlca record.*/

  CLXREC.CLXCPROC = "CL0T150"; /* set current process name*/

  set SQLCA empty;
  CLCREC.CLCPMAR = "Y"; /* want primary*/
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
    TA1REC.TA1TBLVU = "VCLARX01";
    TA1REC.TA1LOCAT[2] = "CL0T150";
    XPCL010(); /* error abort routine*/
  end

  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    return; /* so don't add one*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
      TA1REC.TA1TBLVU = "VCLARX01";
      TA1REC.TA1LOCAT[2] = "CL0T150";
      XPCL010(); /* error abort routine*/
    end
  end

  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
    TA1REC.TA1TBLVU = "VCLARX01";
    TA1REC.TA1LOCAT[2] = "CL0T150";
    XPCL010(); /* error abort routine*/
  end

  CLCREC.CLACLMNB = CLAREC.CLACLMNB; /* move new claim number*/
  CLCREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLCREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLCREC.ZZZCHGCT = 0;

  set SQLCA empty;
  call "IO1170" ("A ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLVU = "VCLARX01";
    TA1REC.TA1LOCAT[2] = "CL0T150";
    XPCL010(); /* error abort routine*/
  end

end // end KL0T150

// update claim comment table
Function KL0TS-AUTO-AUTH()
   /* ************************************************************/
   /* update the claim comment table                 **/
   /* with a type 'a' record which contains          **/
   /* the original authorizer of the claim and is    **/
   /* reported on the cl2011 report.                 **/
   /* **/
   /* 10-26-94 twatso changed jevey to sschmi for auto-         **/
   /* authorization of a CDR claim              **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TS-AUTO-AUTH";

  set CLGREC empty;

  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLGCMTYP = "A";
  CLGREC.CLGCMSEQ = 1;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;

  set SQLCA empty;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
                                   /* find out if record exists*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TBLKE = "INQUIRING ON CLG RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCOM01";
      TA1REC.TA1LOCAT[2] = "KL0TS-AUTO-AUTH";
      XPCL010();
    end
  end
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = 0;
  CLGREC.CL2ISNBR = 0;
  CLGREC.CLGCMTYP = "A";
  CLGREC.CLGCMSEQ = 1;
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  CLGREC.ZZZCHGCT = 0;

   /* IF CLAREC.YCTCD = 'CDR'; drop 2-8-93*/
  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
    CLGREC.CLGCOMNT = "SSCHMI"; /* susan schmidt #2652*/
    CLGREC.XXXUSRID = "SSCHMI";
  end

  if (CLAREC.YCTCD == "OSD")
    CLGREC.CLGCOMNT = "BKREIN";
    CLGREC.XXXUSRID = "BKREIN";
  end

  set SQLCA empty;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE;*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database lock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      CL0TW01.CL0TWUOK = "N"; /* no, update is not ok*/
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING ON CLG RECORD";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLCOM01";
      TA1REC.TA1LOCAT[2] = "KL0TS-AUTO-AUTH";
      XPCL010();
    end
  end


end // end KL0TS-AUTO-AUTH

// Default XOC code for CDR's
Function KL0TS-DFLT-XOCCD()
   /* ************************************************************/
   /* *  Default the Order Class Code for CDR claims.           **/
   /* *       XOCCD 15 = Consumer Service                       **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 7/31/91 CHELLM  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS-DFLT-XOCCD";

  if (KL0TM001.YCTCD == "CDR"
   && CLAREC.XOCCD == "  ")
    CLAREC.XOCCD = "15";
  end

end // end KL0TS-DFLT-XOCCD

// EDIT RPS STATUS CODE INPUT
Function KL0TS-EDIT-RPS-ST()
   /* ***********************************************************/
   /* *  IF THE RA HEADER RPS FLAG IS 'Y' TRY TO GET THE RPS   **/
   /* *  TABLE LINES FOR THE CLAIM, AND EDIT FOR VALID RPS     **/
   /* *  STATUS INPUT.                                         **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-24-92  GDECKE  CREATED STATEMENT GROUP             **/
   /* *  04-09-92  bcourt  add cl-rps-nbr to 'set defined'.    **/
   /* *  05-15-92  GDECKE  dont change ppd/coll flag on inquiry**/
   /* *  08-10-92  GDECKE  ADD EDIT FOR RPS CARRIER CODE 200.  **/
   /* *  08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.**/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "CL0TS-EDIT-RPS-ST"; /* set process name*/

  if (CLWREC.CLWACTIV == "I")
    if (KL0TM001.CL-RPS-STAT-ID == " ")
      if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
        KL0TM001.CL-RPS-STAT-ID = "M";
        return;
      else
        if (VCLRPS01.CL-RPS-STAT-ID != "A")
          KL0TM001.CL-RPS-STAT-ID = VCLRPS01.CL-RPS-STAT-ID;
          return;
        end
      end
    end
  end

   /* if user changed carrier code to or from rps collect carrier code*/
   /* then change rps status default and prepaid/collect flag to*/
   /* correspond to the new value.*/
  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y"
   && VCLRPS01.CL-RPS-STAT-ID == "A")
    if (KL0TM001.TF1CARCD == "0927"
     || KL0TM001.TF1CARCD == "0200")
      if (KL0TM001.CL-RPS-STAT-ID != "R"
       || KL0TM001.CL-PPD-COLL-IND != "C")
        KL0TM001.CL-RPS-STAT-ID = "R";
        KL0TM001.CL-PPD-COLL-IND = "C";
        set KL0TM001.CL-RPS-STAT-ID skip;
        set KL0TM001.CL-PPD-COLL-IND skip;
      end
    else
      if (KL0TM001.CL-RPS-STAT-ID == "R")
        KL0TM001.CL-RPS-STAT-ID = "O";
        KL0TM001.CL-PPD-COLL-IND = "P";
        set KL0TM001.CL-RPS-STAT-ID skip;
        set KL0TM001.CL-PPD-COLL-IND initialAttributes;
      end
    end
  end

  if (KL0TM001.CL-RPS-STAT-ID == "R"
   || KL0TM001.CL-RPS-STAT-ID == "O")
    return;
  end

  if (KL0TM001.CL-RPS-STAT-ID == "M"
   && CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
    return;
  end

  if (KL0TM001.CL-RPS-STAT-ID == " ")
    if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "M")
      KL0TM001.CL-RPS-STAT-ID = "M";
      return;
    else
      if (VCLRPS01.CL-RPS-STAT-ID != "A")
        KL0TM001.CL-RPS-STAT-ID = VCLRPS01.CL-RPS-STAT-ID;
        return;
      end
    end
  end

  if (KL0TM001.CL-RPS-STAT-ID == "A") /* if a then should cause msg 700*/
    KL0TM001.CL-RPS-STAT-ID = " ";
  end

  converseLib.validationFailed(700);
  CLXREC.CLXERRF = "Y";
  set KL0TM001.KL0TM-RPS-TITLE initialAttributes;
  set KL0TM001.CL-RPS-NBR initialAttributes;
  set KL0TM001.CL-RPS-STAT-ID cursor, modified, bold;


end // end KL0TS-EDIT-RPS-ST

// SELECT LINE FROM VCLRPS01 TBL.
Function KL0TS-GET-RPS-LINE()
   /* ***********************************************************/
   /* *  SELECT THE DCLAIM.VCLRPS01 LINE TO GET RPS STATUS     **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-24-92  gdecke  created                             **/
   /* *  04-17-92  gdecke  FIX PROBLEM WITH RPS FOUND FLAG     **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0TS-GET-RPS-LINE"; /* set current process name*/

  CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "N";


    /* SELECT SET OF ALL VCLRPS01 LINES FOR THE CLAIM*/

  set SQLCA empty; /* CLEAR SQL RECORD*/

  call "IO6220" ("S1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0TS-GET-RPS-LINE"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end


    /* FETCH THE FIRST LINE FOR THE CLAIM FROM THE RPS TABLE*/


  set SQLCA empty; /* CLEAR SQL RECORD*/

  call "IO6220" ("N1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "Y"; /**/
    KL0TM001.CL-RPS-NBR = VCLRPS01.CL-RPS-NBR; /* show if only 1*/
    set KL0TM001.CL-RPS-NBR initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "N";
    else
      TA1REC.TA1LOCAT[2] = "KL0TS-GET-RPS-LINE"; /* LOCATION*/
      TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
      TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
      TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

      XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
    end
  end


    /* FETCH THE second LINE FOR THE CLAIM FROM THE RPS TABLE*/


  if (CL0TW01.CL0TW-RPS-NBR-FOUND-FL == "Y")
    set SQLCA empty; /* CLEAR SQL RECORD*/

    call "IO6220" ("N1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
      CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "M";
      KL0TM001.CL-RPS-NBR = 0; /* do not show if there are many*/
      set KL0TM001.CL-RPS-NBR invisible;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        CL0TW01.CL0TW-RPS-NBR-FOUND-FL = "Y";
      else
        TA1REC.TA1LOCAT[2] = "KL0TS-GET-RPS-LINE";
        TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
        TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
        TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

        XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
      end
    end
  end


    /* CLOSE CURSOR FOR VCLRPS01*/

  set SQLCA empty; /* CLEAR SQL RECORD*/

  call "IO6220" ("C1", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0TS-GET-RPS-LINE"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0TS-GET-RPS-LINE

// UPDATE STATUS ON VCLRPS01 TBL.
Function KL0TS-UPDATE-CLRPS()
   /* ***********************************************************/
   /* *  UPDATE STATUS ON DCLAIM.VCLRPS01.                     **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  01-24-92  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "KL0TS-UPDATE-CLRPS"; /* set current process name*/


  set SQLCA empty; /* CLEAR SQL RECORD*/

  call "IO6220" ("U ", SQLCA, VCLRPS01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* RECORD FOUND*/
    CL0TW01.CL0TW-DEADLOCK-COUNT = 0;
    CL0TW01.CL0TW-DEADLOCK-FLAG = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* DEADLOCK*/
    CL0TW01.CL0TW-DEADLOCK-COUNT = CL0TW01.CL0TW-DEADLOCK-COUNT + 1;
    if (CL0TW01.CL0TW-DEADLOCK-COUNT > 2) /* IF DEADLOCKED THREE TIMES*/
      converseLib.validationFailed(4); /* SHOW ERROR MESSAGE*/
      CL0TW01.CL0TW-DEADLOCK-FLAG = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0TS-UPDATE-CLRPS"; /* LOCATION*/
  TA1REC.TA1LOCAT[4] = "IO6220"; /* LOCATION*/
  TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
  TA1REC.TA1TBLVU = "VCLRPS01"; /* TABLE VIEW*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/

  XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/

   /* --- END OF STATEMENT GROUP ---*/
end // end KL0TS-UPDATE-CLRPS

// update dmact01
Function KL0TS-WRIT-DM-REC()
   /* *******************************************************************/
   /* * THIS STATEMENT GROUP WILL WRITE OUT A RECORD TO DCLAIM.VCMACT01**/
   /* * EVERY TIME A HEADER RECORD IS ADDED OR UPDATED.                **/
   /* *12-02-92  lgross   creation                                     **/
   /* *******************************************************************/
  set VDMACT01 empty;
  set SQLCA empty;
  VDMACT01.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  VDMACT01.CLLRTNNB = CLAREC.CLACRTNB; /* return number*/
  VDMACT01.CL2ISNBR = 0;
  if (CL0TW01.CL0TW-UPD-FL == "Y") /* if header is being updated*/
    VDMACT01.XXXPGMNB = "KL0TUP";
  else /* must be an add*/
    VDMACT01.XXXPGMNB = "KL0TIN";
  end
  VDMACT01.XXXSTAT = "A";
  VDMACT01.ZZZSDT = CLXREC.XXXCDTE; /* date of setup*/
  VDMACT01.ZZZSTM = CLXREC.XXXCHHMM; /* time of setup*/
  call "IO0870" ("A ", SQLCA, VDMACT01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* update ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4);
      CL0TW01.CL0TWUOK = "N"; /* no update*/
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING VDMACT01";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VDMACT01";
      TA1REC.TA1LOCAT[2] = "KL0TS-WRIT-DM-REC";
      XPCL010();
    end
  end
end // end KL0TS-WRIT-DM-REC

// handle entry of pf 1
Function KL0TS01()
   /* ************************************************************/
   /* *      handle the entry of pfkey 1                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  XSPF1(); /* transfer to help application*/




end // end KL0TS01

// handle entry of pfkey 3
Function KL0TS03()
   /* ************************************************************/
   /* *      handle the entry of pfkey 3                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/


  COMMAREA.CATOAP = "KL0A";


  XPCL002(); /* exit this application*/




end // end KL0TS03

// handle entry of pf key 4
Function KL0TS04()
   /* GET CL0ES01*/
   /* ************************************************************/
   /* *      handle the entry of pfkey 4                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  XSPF4(); /* transfer back to main menu*/




end // end KL0TS04

// edit the ship warehouse code
Function KL0TS30()
   /* ************************************************************/
   /* *      edit the ship warehouse code                       **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS30"; /* set current process name*/


  if (KL0TM001.XWHCD == CL0TW03.XWHCD
   && KL0TM001.XWHABRV == CL0TW03.XWHABRV
   && CL0TW03.XWHCD != " ")
    return;
  end

  if (KL0TM001.XWHCD == " ") /* if no warehouse entered*/
    CL0TW09.CL0TWMNO[1] = 519; /* warehouse is required*/
    CL0TW09.CL0TWIND[1] = "E"; /* there is an error*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0TM001.XWHCD cursor, modified, bold;
  else
    if (KL0TM001.XWHCD in XWHTBL.XWHCD /* if warehouse is valid*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
      KL0TM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      CL0TW03.XWHCD = KL0TM001.XWHCD;
      CL0TW03.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      CL0TW09.CL0TWMNO[1] = 400; /* invalid warehouse code*/
      CL0TW09.CL0TWIND[1] = "E"; /* there is an error*/
      set KL0TM001.XWHCD cursor, modified, bold;
      return;
    end
  end





end // end KL0TS30

// edit date received
Function KL0TS31()
   /* ************************************************************/
   /* *      edit the credit denial letter date                 **/
   /* *                                                         **/
   /* *  denial date is only valid if claim status is 'denied'  **/
   /* *                                                         **/
   /* * Maintenance History:                                    **/
   /* *                                                         **/
   /* * 01-24-90 CHELLM reinstalled a corrected version of the  **/
   /* *          'more than 25 days old' edit.                  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS31"; /* set current process name*/


  if (KL0TM001.CL0TMRDT == " ") /* if no receipt date entered*/
    CL0TW09.CL0TWMNO[2] = 510; /* date received is required*/
    CL0TW09.CL0TWIND[2] = "E"; /* screen has an edit error*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0TM001.CL0TMRDT cursor, modified, bold;
    return;
  end



  CLXREC.XXXEDFLD = KL0TM001.CL0TMRDT;
  XPCL004(); /* edit the date*/
  if (CLXREC.CLXVALDT == "Y")
     /* next sentence*/
  else
    CL0TW09.CL0TWMNO[2] = 511; /* receipt date not valid*/
    CL0TW09.CL0TWIND[2] = "E"; /* screen has an edit error*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0TM001.CL0TMRDT cursor, modified, bold;
    return;
  end


   /* -------------------- y2k out begin ------------------------*/
   /* IF TA2REC.TA2JULNN GT CL0TW01.CL0TWCJD;  /* if > current-julian-date*/
   /* -------------------- y2k out end   ------------------------*/
   /* -------------------- y2k in begin  ------------------------*/
  if (TA2REC.TA2GRGGN > CLXREC.XXXCDTE) /* if > current ccyymmdd*/
    /* -------------------- y2k in end    ------------------------*/
    CL0TW09.CL0TWMNO[2] = 512; /* date cant be > current date*/
    CL0TW09.CL0TWIND[2] = "E"; /* screen has an edit error*/
    CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
    set KL0TM001.CL0TMRDT cursor, modified, bold;
    return;
  end

   /* the check for the date < 25 days from current has been*/
   /* disabled because the users often need to cancel and*/
   /* reenter a return. This code may be replaces with something*/
   /* else when the date edit need is more clearly defined.*/

   /* NOTE: This logic is in ERROR! You cannot add 25 to a julian*/
   /* date when it is greater than December 5th!*/

   /* MOVE 0 TO CL0TW01.CL0TWNBR;*/
   /* CL0TW01.CL0TWNBR = TA2REC.TA2JULNN + 25;*/

   /* IF CL0TW01.CL0TWNBR LT CL0TW01.CL0TWCJD;*/
   /* MOVE 513 CL0TW09.CL0TWMNO(2)    ;cant be older than 25 days*/
    /* MOVE 'E' TO CL0TW09.CL0TWIND(2) ; screen has an edit error*/
    /* MOVE 'Y' TO CLXREC.CLXERRF    ; screen has an edit error*/
    /* SET CL0TM001.CL0TMRDT CURSOR,MODIFIED,BRIGHT;*/
    /* EZERTN;*/
   /* END ;*/




   /* 01-24-90 reinstalled 'more than 25 days old' edit below*/

  TA2REC.TA2DBDFN = TA2REC.TA2GRGGN;
                                   /* date from - entered return date*/
  TA2REC.TA2DBDTN = CLXREC.XXXCDTE; /* date to - current date*/
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 25)
      CL0TW09.CL0TWMNO[2] = 513; /* cant be older than 25 days*/
      CL0TW09.CL0TWIND[2] = "E"; /* screen has an edit error*/
      CLXREC.CLXERRF = "Y"; /* screen has an edit error*/
      set KL0TM001.CL0TMRDT cursor, modified, bold;
      return;
    end
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0E001";
    XPCL010(); /* abend*/
  end




  KL0TM001.CL0TMRDT = CLXREC.XXXFLDT; /* move formatted to screen*/
  CL0TW03.CL0TMRDT = CLXREC.XXXFLDT; /* move formatted to screen*/
  CL0TW03.CLLWRDT = TA2REC.TA2GRGGN;


end // end KL0TS31

// edit carrier code
Function KL0TS32()
   /* *************************************************************/
   /* *     Validate ship via (carrier code) using the VCARR001  **/
   /* *     DB2 table.  If valid, move description to screen.    **/
   /* * maintenance:                                            **/
   /* * 12-11-89 bcourt check dpick.vcarr001 row status.        **/
   /* * 05-14-92 GDECKE   GET DESC IF BLANK EVEN IF SAME CODE   **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TS32"; /* set current process name*/


  if (KL0TM001.TF1CARCD == CL0TW03.TF1CARCD
   && CL0TW03.TF1CARCD != " "
   && KL0TM001.TF1ABRV != " ")
    return;
  end

  if (KL0TM001.TF1CARCD == " ") /* user has not entered anything*/
    CL0TW09.CL0TWMNO[3] = 402; /* carrier code required*/
    CL0TW09.CL0TWIND[3] = "E";
    set KL0TM001.TF1CARCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    TF1REC.TF1CARCD = KL0TM001.TF1CARCD;
    set SQLCA empty; /* 4/89*/
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* try and find it*/
    if (SQLCA.VAGen_SQLCODE == 0 /* found it*/
     && TF1REC.XXXSTAT == "A")   /* 12-11-89 added*/
      KL0TM001.TF1ABRV = TF1REC.TF1ABRV; /* move desc.*/
      CL0TW03.TF1CARCD = KL0TM001.TF1CARCD;
      CL0TW03.TF1ABRV = TF1REC.TF1ABRV; /* move desc.*/
    else
      if (SQLCA.VAGen_SQLCODE == 100 /* record NOT found*/
       || SQLCA.VAGen_SQLCODE == 0)  /* 12-11-89 or row inactive*/
        KL0TM001.TF1ABRV = " ";
        CL0TW09.CL0TWMNO[3] = 403; /* carrier code invalid*/
        CL0TW09.CL0TWIND[3] = "E";
        set KL0TM001.TF1CARCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else /* we have a fatal db2 error*/
        TA1REC.TA1LOCAT[2] = "CL0TS32";
        TA1REC.TA1DBASE = "DPICK";
        TA1REC.TA1TBLVU = "VCARR001";
        XPCL010(); /* so abort program*/
      end
    end
  end



end // end KL0TS32

// Edit pro-number (No claim)
Function KL0TS33()
   /* ************************************************************/
   /* *     'Validate' Pro number                               **/
   /* *     NOTE: This routine is used when we have a pro       **/
   /* *           number but not a claim number. The routine    **/
   /* *           will try to link the pro number to a claim.   **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS33"; /* set current process name*/



  set CLEREC empty;
  set SQLCA empty;

  CLEREC.TF2PRONO = KL0TM001.TF2PRONO;
  call "IO1240" ("SS", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLTRF01";
    TA1REC.TA1TBLKE = "SELECT SET";
    XPCL010();
  end

  call "IO1240" ("SN", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* select record*/
  if (SQLCA.VAGen_SQLCODE == 100) /* no records*/
    CL0TW01.CL0TWTPE = "N"; /* no pro number*/
    call "IO1240" ("CS", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
    set CLEREC empty; /* clear out record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      TA1REC.TA1TBLKE = "SELECT NEXT";
      XPCL010();
    else
      KL0TM001.CLACLMNB = CLEREC.CLACLMNB;
      set CLAREC empty;
    end
  end

  call "IO1240" ("SN", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* select record*/
  if (SQLCA.VAGen_SQLCODE == 100) /* no more records*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      TA1REC.TA1TBLKE = "SELECT NEXT";
      XPCL010();
    else /* if zero, we have more than 1 claim for this number*/
      KL0TM001.VAGen_EZEMSG = "MULTIPLE CLAIMS FOR PRO NUMBER";
      set CLEREC empty;
      CLEREC.TF2PRONO = KL0TM001.TF2PRONO;
    end
  end

  call "IO1240" ("CS", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* done with set*/

end // end KL0TS33

// edit pro-number
Function KL0TS34()
   /* *************************************************************/
   /* *     'Validate' Pro number*/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS34"; /* set current process name*/



  set CLEREC empty;

  if (KL0TM001.CLACLMNB == 0)
    if (KL0TM001.TF2PRONO != " ") /* pro entered*/
      KL0TS33(); /* try to link to claim*/
    else
      CL0TW01.CL0TWTPE = "N"; /* no trans pro-number exists*/
    end
  else
    CLEREC.CLACLMNB = KL0TM001.CLACLMNB;
    set SQLCA empty;
    call "IO1240" ("S ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* traffic rec for claim*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0TW01.CL0TWTPE = "Y"; /* trans pro-number does exist*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0TW01.CL0TWTPE = "N"; /* no trans pro-number exists*/
        CLEREC.TF2PRONO = " ";
        CLEREC.CLACLMNB = 0;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLTRF01";
        TA1REC.TA1TBLKE = "GETTING TRAFFIC RECORD";
        XPCL010();
      end
    end
  end


  if (KL0TM001.TF2PRONO == " " /* if no pro number entered*/
   && CLEREC.TF2PRONO != " ")  /* but one exists*/
    KL0TM001.TF2PRONO = CLEREC.TF2PRONO; /* default it*/
  end


  if (CLEREC.TF2PRONO != " ")
    if (CLEREC.TF2PRONO == KL0TM001.TF2PRONO)
       /* next sentence*/
    else
      CL0TW09.CL0TWMNO[4] = 453; /* different than traffic record*/
      CL0TW09.CL0TWIND[4] = "E";
      set KL0TM001.TF2PRONO cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


  if (TF1REC.TF1FCARF == "Y") /* if carrier is a freight carrier*/
    if (KL0TM001.TF2PRONO == " " /* if pro number is blank*/
     && CL0TW01.CL0TWPWF != "Y") /* and hasnt been warned yet*/
      CL0TW09.CL0TWMNO[4] = 447;
                                   /* pro nbr required for frgt carrier*/
      CL0TW09.CL0TWIND[4] = "E";
      set KL0TM001.TF2PRONO cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end


  if (CLEREC.CLACLMNB != 0
   && KL0TM001.CLACLMNB == 0)
    KL0TM001.CLACLMNB = CLEREC.CLACLMNB;
  end



end // end KL0TS34

// edit ppd/collect flag
Function KL0TS35()
   /* ************************************************************/
   /* *      edit the ppd/collect flag                          **/
   /* *                                                         **/
   /* *  2-15-91 bcourt change msg 402 'carrier code'           **/
   /* *                     to msg 397 'ship method'.           **/
   /* * 08-13-93 jcarey changed cllpdcfl to cl-ppd-coll-ind.    **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS35"; /* set current process name*/

  if (KL0TM001.CL-PPD-COLL-IND == "P"
   || KL0TM001.CL-PPD-COLL-IND == "C")
     /* next sentence*/
  else
    if (CLWREC.CLWMNOPT == 16
     && KL0TM001.CL-PPD-COLL-IND == " ")
      /* NEXT SENTENCE*/
    else
      if (CLWREC.CLWMNOPT == 17
       && KL0TM001.CL-PPD-COLL-IND == " ")
        /* NEXT SENTENCE*/
      else
        CL0TW09.CL0TWMNO[5] = 397; /* ship method must be p or d*/
        CL0TW09.CL0TWIND[5] = "E"; /* yes, there was an error*/
        CLXREC.CLXERRF = "Y"; /* yes, there was an error*/
        set KL0TM001.CL-PPD-COLL-IND cursor, modified, bold;
      end
    end
  end

end // end KL0TS35

// edit freight charges
Function KL0TS36()
   /* ************************************************************/
   /* *      edit the FREIGHT CHARGES                           **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E    H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 03-27-92  GDECKE  BYPASS MESSAGE 537 IF RPS CLAIM       **/
   /* * 08-13-93  JCAREY  CHANGED CLLPDCFL TO CL-PPD-COLL-IND.  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS36"; /* set current process name*/


  if (KL0TM001.CLLPDCCG < 0)
    CL0TW09.CL0TWMNO[6] = 28; /* cannot be negative*/
    CL0TW09.CL0TWIND[6] = "E"; /* there is an error*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0TM001.CLLPDCCG cursor, modified, bold;
    return;
  end


  if (KL0TM001.CL-PPD-COLL-IND == "P"
   && CLJREC.CLJFRCRF == "Y"      /* supposed to credit frgt chrgs*/
   && KL0TM001.CLLPDCCG == 0      
   && KL0TM001.CLLRTDSP != "RFSD" /* and not refusing*/
   && CL0TW01.CL0TWFWF != "Y")    /* and warning hasnt been displayed*/
    CL0TW09.CL0TWMNO[6] = 446;
                                   /* pre-paid, frgt chgs should be entered*/
    CL0TW09.CL0TWIND[6] = "E"; /* there is an error*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0TM001.CLLPDCCG cursor, modified, bold;
    return;
  end


  if (KL0TM001.CL-PPD-COLL-IND == "C"
   /* AND CLJREC.CLJFRDBF = 'Y'; supposed to debit frgt chrgs*/
   && KL0TM001.CLLPDCCG == 0      
   && KL0TM001.CLLRTDSP != "RFSD" /* and not refusing*/
   && CL0TW01.CL0TWFWF != "Y"     /* and warning hasnt been displayed*/
   && CLJREC.CL-RPS-LABL-FL != "Y") /* AND RPS COLLECT FREIGHT NOT USED*/
    CL0TW09.CL0TWMNO[6] = 537; /* billed, frgt chgs should be entered*/
    CL0TW09.CL0TWIND[6] = "E"; /* there is an error*/
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    set KL0TM001.CLLPDCCG cursor, modified, bold;
    return;
  end



end // end KL0TS36

// edit the customer number
Function KL0TS39()
   /* ************************************************************/
   /* edit the customer number                           **/
   /* **/
   /* MAINTENANCE HISTORY                                     **/
   /* **/
   /* 08-24-90  sgorga  Allow 'def' claims against certain    **/
   /* Nil-cust invoices to bypass code that prevents      **/
   /* claims from being inspected in Option 7.            **/
   /* 09-28-90  sgorga  Added another Nil invoice.            **/
   /* 11-21-90  sgorga  Added Nil invoices 203447,203451.     **/
   /* 01-21-91  sgorga  Added 20 Nil invoices.                **/
   /* 02-18-91  sgorga  Added Nil inv #6298054.               **/
   /* 02-21-91  sgorga  Added Nil inv #6573603.               **/
   /* 03-14-91  sgorga  Added Nil inv #6763895,6763634.       **/
   /* 04-19-91  sgorga  Added Nil inv #6984512,6978386.       **/
   /* 05-06-91  gdecke  Check for converted company, replace  **/
   /* cust with converted to nbr, and show  **/
   /* msg.                                  **/
   /* 05-07-91  sgorga  Created table CL7TBL to store the     **/
   /* NIL invoice nbrs that we allow        **/
   /* domestic claims to be created against.**/
   /* Removed hardcoded NIL invoice nbrs    **/
   /* from this process.  Replaced with     **/
   /* table inquiry.                        **/
   /* 11-11-91  twatso  added code to check store and yctcd   **/
   /* to see if 'osd' and the store is valid**/
   /* (cu_ofshr_fl = 'y') for offshore def  **/
   /* processing.                           **/
   /* 11-11-91  twatso  added code to check company = 666666  **/
   /* and osd - allow - do not give msg695  **/
   /* 10-09-92  sgorga  When a claim is created for an inactive **/
   /* or closed customer, the Claim system won't accept that**/
   /* cust's account.  To allow the claim to be created (or **/
   /* updated), there are 3 special account nbrs. The proper**/
   /* one is entered in place of the customer nbr.  They are**/
   /* .  666666 = for external closed inactive NIKE accts. **/
   /* . 9666666 = for external closed inactive SIDE1 accts.**/
   /* .  888888 = for internal closed inactive account.    **/
   /* By external, we mean the retail accounts.            **/
   /* By internal, we mean the NIKE-based accounts.        **/
   /* For task CL1185, I added the new internal account nbr**/
   /* 888888.                                              **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with ivbrec.     **/
   /* 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1    **/
   /* 10-28-94  GDECKE  CHANGE IVBREC TO VIVHDR04.              **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0TS39"; /* set current process name*/

  CL0TW01.CL0TWEGC = "N"; /* init error-getting-customer flag*/


  if (KL0TM001.KUCCOID == 0
   && KL0TM001.KUMSTRID == 0
   && KL0TM001.XNXCD == 0)
    if (CLAREC.CLACLMNB != 0)
      KL0TM001.KUCCOID = CLAREC.KUCCOID;
      KL0TM001.KUMSTRID = CLAREC.KUMSTRID;
      KL0TM001.XNXCD = CLAREC.XNXCD;
    end
  end


  if (KL0TM001.KUCCOID == 666666  /* if new cmpny is external nike special co*/
   || KL0TM001.KUCCOID == 9666666 /* or it is an extrnl side1 spec co*/
   || KL0TM001.KUCCOID == 888888) /* or it is an internal account*/
    if (KL0TM001.KUCCOID != CLAREC.KUCCOID)
      if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
       || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
        KUCREC.KUCGRP = CL0TW01.KUCGRP[1];
        if (KUCREC.XCCCD == "W" /* old company credit status must*/
         || KUCREC.XCCCD == "X" /* be one of these*/
         || KUCREC.XCCCD == "Y" 
         || KUCREC.XCCCD == "Z" 
         || KUCREC.XCCCD == "T" 
         || KUCREC.XXXSTAT == "I")
           /* next sentence*/
        else
          CL0TW09.CL0TWMNO[12] = 292; /* must be closed or inactive*/
          CL0TW09.CL0TWIND[12] = "E"; /* yes there is an error*/
          set KL0TM001.KUCCOID cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* yes there is an error*/
          CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
          return;
        end
      end
    end
  end


  if (KL0TM001.YCTCD != " "          /* if a claim typ was entered*/
   && CLXREC.CLXYCTX != 0            /* have valid index*/
   && YCTTBL.YCTCDRF[CLXYCTX] == "Y" /* if claim type is cdr*/
   && KL0TM001.KUCCOID == 0)         /* and no cust nbr was entered*/
    if (KL0TM001.XBCCD in XBCTBL.XBCCD) /* if brand is in brand table*/
      if (XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* if side-1 legal entity*/
        KL0TM001.KUCCOID = 9899999; /* side-1 cdr dflt customer*/
      else
        KL0TM001.KUCCOID = 899999; /* nike cdr dflt customer*/
      end
      KL0TM001.KUMSTRID = 0;
      KL0TM001.XNXCD = 0;
      converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
    end
  end

  set KUMREC empty;
  set KUNREC empty;

  KL0TS62(); /* select KUCREC for customer number*/

  if (KUCREC.XXXSTAT != "A") /* 5-6-91 If company is not active,*/
                                   /* check customer*/
    KL0TS4C(); /* conversion table for converted to*/
                                   /* customer id.*/
    if (KUCREC.XXXSTAT == "A") /* If found, skip the other checks*/
      return;
    end
  end

  if (KL0TM001.YCTCD != " " /* if a claim typ was entered*/
   && CLXREC.CLXYCTX != 0   /* have valid index*/
   && YCTTBL.YCTCDRF[CLXYCTX] == "Y") /* if claim type is cdr*/
    if (KUCREC.XAUCD == "12" /* if cdr account class*/
     || KUCREC.XAUCD == "13" 
     || KUCREC.XAUCD == "14" 
     || KUCREC.XAUCD == "19" 
     || KUCREC.XAUCD == "43" 
     || KUCREC.XAUCD == "62")
      if (KL0TM001.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer customer*/
        /* next sentence                   ;*/
      else
        if (KL0TM001.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
         && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* if side-1 legal entity*/
          KL0TM001.KUCCOID = 9899999; /* side-1 cdr dflt customer*/
        else
          KL0TM001.KUCCOID = 899999; /* nike cdr dflt customer*/
        end
        KL0TM001.KUMSTRID = 0;
        KL0TM001.XNXCD = 0;
        converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
        set KL0TM001.KUCCOID cursor, modified, bold;
        set KL0TM001.KUMSTRID modified, bold;
        set KL0TM001.XNXCD modified, bold;
        KL0TS62(); /* re-read the kucrec*/
      end
    else
      if (KL0TM001.XBCCD in XBCTBL.XBCCD /* if brand is in brand table*/
       && XBCTBL.XLECD[sysVar.arrayIndex] == "05") /* if side-1 legal entity*/
        KL0TM001.KUCCOID = 9899999; /* side-1 cdr dflt customer*/
      else
        KL0TM001.KUCCOID = 899999; /* nike cdr dflt customer*/
      end
      KL0TM001.KUMSTRID = 0;
      KL0TM001.XNXCD = 0;
      converseLib.validationFailed(79); /* cmpny/store/dept defaulting for cdr*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
      KL0TS62(); /* re-read the kucrec*/
    end
  end


  if (CLWREC.CLWACTIV == "I" /* if only inquiring*/
   || CLAREC.YCSCD1 == "CMP" 
   || CLAREC.YCSCD1 == "CAN")
     /* next sentence...doesnt matter if cmpny closed*/
  else
    if (KUCREC.XCCCD == "W" /* these codes mean the company is inactive*/
     || KUCREC.XCCCD == "X" /* So, if the company is inactive*/
     || KUCREC.XCCCD == "Y" 
     || KUCREC.XCCCD == "Z" 
     || KUCREC.XCCCD == "T" 
     || KUCREC.XXXSTAT == "I")
      if (KUCREC.XAUCD in XAUTBL.XAUCD /* look at acct class code*/
       && XAUTBL.XAUARIND[sysVar.arrayIndex] == "I") /* if it's an internal acct.*/
        converseLib.validationFailed(746); /* internal company is closed or inactive*/
        set KL0TM001.KUCCOID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes there is an error*/
        CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
        return;
      else
        converseLib.validationFailed(137); /* external company is closed or inactive*/
        set KL0TM001.KUCCOID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes there is an error*/
        CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
        return;
      end
    end
  end



  if (CLWREC.CLWMNOPT == 3) /* if international*/
    if (KUCREC.XAUCD == "31" /* and intl owned*/
     || KUCREC.XAUCD == "32" /* or exports*/
     || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
      /* next sentence*/
    else
      converseLib.validationFailed(33); /* company must be intl*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    end
  end


  if (CLWREC.CLWACTIV == "I") /* if only inquiring*/
     /* next sentence...doesnt matter if intl or not*/
  else /* 05-07-91  sgorga*/
    if (CLAREC.IV0IVCID in CL7TBL.IV0IVCID) /* 05-07-91 Allow claims against*/
       /* next sentence      the NIL invoice nbrs in CL7TBL to*/
                          /* bypass the below edit.*/
    else
      if (KL0TM001.YCTCD == "DEF" /* if defective claim type*/
       || KL0TM001.YCTCD == "OSD") /* if off shore defective claim type*/
        if (KUCREC.XAUCD == "31" /* and intl owned*/
         || KUCREC.XAUCD == "32" /* or exports*/
         || KUCREC.XAUCD == "33") /* or intl idependent dist.*/
          converseLib.validationFailed(64); /* intl cmpny shld use menu opt 3*/
          set KL0TM001.KUCCOID cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* yes there is an error*/
          CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
          return;
        end
      end
    end
  end


   /* Don't allow Cole Haan customers*/

  if (KUCREC.XAUCD in XAUTBL.XAUCD) /* CL742 10-16-89 CWH*/
    if (XAUTBL.XATCD[sysVar.arrayIndex] == "08")
      set KL0TM001.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(603);
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    end
  end

  if (CLXREC.CLXORDFD == "Y" /* if the order was found*/
   || CLXREC.CLXINVFD == "Y") /* or the invoice was found*/
    if (KUCREC.KUCCOID == VIVHDR04.KUCCOID
     || KUCREC.KUCCOID == 666666  /* external nike special customer*/
     || KUCREC.KUCCOID == 9666666 /* external side-1 special customer*/
     || KUCREC.KUCCOID == 888888  /* internal nike special customer*/
     || KL0TM001.YCTCD == "CDR")  /* if direct market claim*/
       /* next sentence*/
    else
      KUCREC.KUCCOID = VIVHDR04.KUCCOID;
      set SQLCA empty;
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
        if (KUCREC.KUCGRPID == CL0TW01.KUCGRPID
         && KUCREC.KUCGRPID != 0)
           /* next sentence*/
        else
          converseLib.validationFailed(116); /* company/group dont match*/
          set KL0TM001.KUCCOID cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* yes there is an error*/
          CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
          return;
        end
      else
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0TS39";
        XPCL010();
      end
    end
  end


  KUCREC.KUCGRP = CL0TW01.KUCGRP; /* restore saved record*/


  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KL0TM001.KUMSTRID;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if store is on file*/
     /* MOVE KUMREC.KUMSTRNM TO CL0TM001.KUMSTRNM;*/
    CL0TW02.KUMSTRID = KUMREC.KUMSTRID;
    CLWREC.KUCCONM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if store was not found*/
      converseLib.validationFailed(82); /* store not found*/
      set KL0TM001.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "CL0TS39";
      XPCL010();
    end
  end


  if (KUMREC.XXXSTAT == "I")
    if (KL0TM001.KUMSTRID == 0
     && KUCREC.XXXSTAT != "I")
      if (KUCREC.XCCCD == "W"
       || KUCREC.XCCCD == "X"
       || KUCREC.XCCCD == "Y"
       || KUCREC.XCCCD == "Z"
       || KUCREC.XCCCD == "T")
        converseLib.validationFailed(376); /* store is inactive*/
        set KL0TM001.KUMSTRID cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* yes there is an error*/
        CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
        return;
      else
         /* next sentence*/
      end
    else
      converseLib.validationFailed(376); /* store is inactive*/
      set KL0TM001.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    end
  end

   /* edit store  and yctcd         added 11-04-91 (twatso)*/
  if (KL0TM001.YCTCD == "OSD")
    if (KUMREC.CU-OFSHR-FL == "N"
     && KUMREC.KUCCOID != 666666 /* if inactive go ahead and allow*/
     && KUMREC.KUCCOID != 888888) /* if inactive go ahead and allow*/
      converseLib.validationFailed(695); /* store not approved for off shore*/
      set KL0TM001.YCTCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    end
  end



  KUNREC.KUCCOID = KUMREC.KUCCOID;
  KUNREC.KUMSTRID = KUMREC.KUMSTRID;
  KUNREC.XNXCD = KL0TM001.XNXCD;
  KUNREC.XGPCD = KL0TM001.XGPCD;


  set SQLCA empty;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* get customer record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0TW02.XNXCD = KUNREC.XNXCD;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if customer was not found*/
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0TS39";
      XPCL010();
    end
  end

   /* 7-24-89 due to io0280 change*/
   /* old 'ss' used co,store,dept; new also uses gpc*/
  KUNREC.XGPCD = "**"; /* get all GPC*/

  set SQLCA empty;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* set of customer records*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING CUSTOMER SET";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1LOCAT[2] = "CL0TS39";
    XPCL010();
  end


  set SQLCA empty;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* the first record of set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(83); /* customer number not found*/
      set KUNREC empty;
      set KL0TM001.KUCCOID cursor, modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0TS39";
      XPCL010();
    end
  end


end // end KL0TS39

// edit address
Function KL0TS41()
      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the return to address*/
   /* ***** Maintenance Log *****************************************/
   /* 03-11-94 BCourt  Rename CL0TW01.CLFREC.xxxaddrn to xxx-addrn.*/
   /* Only CLFREC addresses renames to match 38char DB2.*/
   /* Do NOT change map since file really just 30 chars.*/
   /* ***************************************************************/

  CLXREC.CLXCPROC = "CL0TS41"; /* set current process name*/


  if (KL0TM001.XXXADDR1 == " "
   && KL0TM001.XXXADDR2 == " "
   && KL0TM001.XXXADDR3 == " "
   && KL0TM001.XXXCITY == " ")
    KL0TS49();
                                   /* default address from invoice or store*/
  end


    /* if default entered*/
      /* check if return addr text modified*/
    /* else*/
      /* edit entered text*/

      /* *********************************************************/
      /* * first check if address modified*/
      /* *********************************************************/


  CLXREC.CLXCPROC = "CL0TS41"; /* set current process name*/


   /* if the address text changed, set a flag*/

  if (KL0TM001.CLFADNM != CL0TW01.CLFADNM
   && KL0TM001.CLFADNM != " ")
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XXXADDR1 != CL0TW01.XXX-ADDR1 /* 3-11-94 rename*/
   && KL0TM001.XXXADDR1 != " ")             
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XXXADDR2 != CL0TW01.XXX-ADDR2 /* 3-11-94 rename*/
   && KL0TM001.XXXADDR2 != " ")             
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XXXADDR3 != CL0TW01.XXX-ADDR3 /* 3-11-94 rename*/
   && KL0TM001.XXXADDR3 != " ")             
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XXXCITY != CL0TW01.XXXCITY
   && KL0TM001.XXXCITY != " ")
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XSTCD != CL0TW01.XSTCD
   && KL0TM001.XSTCD != " ")
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XXXZIP != CL0TW01.XXXZIP
   && KL0TM001.XXXZIP != " ")
    CL0TW01.CL0TWACF = "Y";
  end

  if (KL0TM001.XCTCD != CL0TW01.XCTCD
   && KL0TM001.XCTCD != " ")
    CL0TW01.CL0TWACF = "Y";
  end


  if (CL0TW01.CL0TWACF == "Y")
    KL0TS43(); /* process addr text change*/
  end
end // end KL0TS41

// edit/save address changes
Function KL0TS43()
      /* *********************************************************/
      /* * this statement group edits the  name/addr.           **/
      /* *********************************************************/
   /* ***** Maintenance Log  ***************************************/
   /* 03-11-94  BCourt  Rename CLFREC.xxxaddrn to xxx-addrn.     **/
   /* Note - do NOT rename map address from 30 to 38 chars.  **/
   /* **************************************************************/

      /* validate required entries*/



      /* set default country code if null*/

  if (KL0TM001.XCTCD == " " /* null?*/
   || KL0TM001.XCTCD == "USA") /* null?*/
    KL0TM001.XCTCD = "USA";
  end


      /* edit country code*/

  if (KL0TM001.XCTCD in XCTTBL.XCTCD /* valid code*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
    if (KL0TM001.XCTCD != "USA")
      if (KL0TM001.XSTCD == " ")
        KL0TM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
      else
             /* IF CL0TM001.XSTCD IN XSTTBL.XSTCD; valid code*/
               /* AND XSTTBL.XXXSTAT(EZETST) EQ 'A'; active status*/
               /* MOVE 'USA' TO CL0TM001.XCTCD;*/
             /* ELSE ;*/
        converseLib.validationFailed(385); /* state code is not valid if not usa*/
        CLXREC.CLXERRF = "Y"; /* set error flag*/
        set KL0TM001.XSTCD cursor, modified, bold;
      end
    else
      KL0TM001.XCTABRV = " "; /* cntry cd desc*/
    end
  else
    converseLib.validationFailed(380); /* country code is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    KL0TM001.XCTABRV = " "; /* cntry cd desc*/
    set KL0TM001.XCTCD cursor, modified, bold;
  end



  if (KL0TM001.XCTCD == "USA")
    if (KL0TM001.XXXZIP <= "00000     " /* zip*/
     || KL0TM001.XXXZIP <= "000000    " /* zip*/
     || KL0TM001.XXXZIP <= "0000000   " /* zip*/
     || KL0TM001.XXXZIP <= "00000000  " /* zip*/
     || KL0TM001.XXXZIP <= "000000000 " /* zip*/
     || KL0TM001.XXXZIP <= "0000000000") /* zip*/
      converseLib.validationFailed(381); /* zip code not valid*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      set KL0TM001.XXXZIP cursor, modified, bold;
    end
  end


    /* edit state code*/

  if (KL0TM001.XCTCD == "USA")
    if (KL0TM001.XSTCD in XSTTBL.XSTCD /* valid code*/
     && XSTTBL.XXXSTAT == "A")         /* active status*/
       /* next sentence*/
    else
      converseLib.validationFailed(382); /* state code is not valid*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      set KL0TM001.XSTCD cursor, modified, bold;
    end
  end


      /* city is required*/

  if (KL0TM001.XXXCITY == " ")
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0TM001.XXXCITY cursor, modified, bold;
  end


      /* at least one address line is required*/

  if (KL0TM001.XXXADDR1 == " " /* null?*/
   && KL0TM001.XXXADDR2 == " " /* null?*/
   && KL0TM001.XXXADDR3 == " ") /* null?*/
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0TM001.XXXADDR1 cursor, modified, bold;
    set KL0TM001.XXXADDR2 modified, bold;
    set KL0TM001.XXXADDR3 modified, bold;
  end


      /* name is required*/

  if (KL0TM001.CLFADNM == " ") /* null?*/
    converseLib.validationFailed(383); /* bill to address is not valid*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
    set KL0TM001.CLFADNM cursor, modified, bold;
  end


     /* get out if error*/

  if (CLXREC.CLXERRF == "Y") /* if error, get out*/
    return; /* get out*/
  end


    /* set flags and format addr record*/

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADNM = KL0TM001.CLFADNM; /* bill to name*/
  CLFREC.XXX-ADDR1 = KL0TM001.XXXADDR1; /* bill to addr 1/*3-11-94*/
  CLFREC.XXX-ADDR2 = KL0TM001.XXXADDR2; /* bill to addr 2/* nename*/
  CLFREC.XXX-ADDR3 = KL0TM001.XXXADDR3; /* bill to addr 3*/
  CLFREC.XXXCITY = KL0TM001.XXXCITY; /* bill to city*/
  CLFREC.XSTCD = KL0TM001.XSTCD; /* bill to state*/
  CLFREC.XXXZIP = KL0TM001.XXXZIP; /* bill to zip*/
  CLFREC.XCTCD = KL0TM001.XCTCD; /* bill to state*/
  CLFREC.CLFADTYP = "R";
  CL0TW01.CLFGROUP = CLFREC.CLFGROUP;


  if (converseVar.eventKey is pf12)
     /* next sentence - the fields need to stay modified to be*/
     /* updated on the next converse*/
  else
    set KL0TM001.CLFADNM normal;
    set KL0TM001.XXXADDR1 normal;
    set KL0TM001.XXXADDR2 normal;
    set KL0TM001.XXXADDR3 normal;
    set KL0TM001.XXXCITY normal;
    set KL0TM001.XSTCD normal;
    set KL0TM001.XXXZIP normal;
    set KL0TM001.XCTCD normal;
  end





   /* *************************************************************/
end // end KL0TS43

// validate/default nbr of crtns
Function KL0TS44()
   /* ************************************************************/
   /* *      determine the numer of cartons                     **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS48"; /* set current process name*/


  if (CL0TW01.CL0TWACT == "I")
    KL0TM001.CLLNBRCV = 0;
  else
    if (KL0TM001.CLLNBRCV == 0) /* if no entry*/
      if (KL0TM001.CLLRTNNB == 0)
        KL0TM001.CLLNBRCV = 1; /* default to 1*/
      else
        KL0TM001.CLLNBRCV = CL0TW01.CLLNBRCV;
      end
    end
  end


end // end KL0TS44

// edit the gpc code
Function KL0TS45()
   /* ************************************************************/
   /* edit the gpc code                                  **/
   /* **/
   /* MAINTENANCE HISTORY                                      **/
   /* **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with IVBREC.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* 11-09-94  sgorga  Replaced abend for invalid company     **/
   /* with error message 81.                 **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "KL0TS45"; /* set current process name*/


  if (KL0TM001.XGPCD == "05") /* gpc code 5 is always invalid*/
    converseLib.validationFailed(70); /* invalid product class*/
    set KL0TM001.XGPCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    CLXREC.CLXTESTF = "N"; /* skip combo edit*/
    return;
  end


  if (KL0TM001.XGPCD == " ") /* if no gpc code entered*/
    if (CLAREC.XGPCD == " ")
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.XGPCD = VIVHDR04.XGPCD;
      end
    else
      KL0TM001.XGPCD = CLAREC.XGPCD;
    end
    if (KL0TM001.XGPCD == " ")
      converseLib.validationFailed(50); /* gpc is required*/
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      set KL0TM001.XGPCD cursor, modified, bold;
      return;
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* 5/89 force to match claim*/
      if (KL0TM001.XGPCD == CLAREC.XGPCD)
        /* next sentence*/
      else
        converseLib.validationFailed(592); /* change to match claim*/
        KL0TM001.XGPCD = CLAREC.XGPCD;
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
        set KL0TM001.XGPCD cursor, modified, bold;
      end
    end
    if (CLXREC.CLXORDFD == "Y"
     || CLXREC.CLXINVFD == "Y")
      if (KL0TM001.XGPCD == VIVHDR04.XGPCD)
        /* next sentence*/
      else
        converseLib.validationFailed(112); /* gpc does not match invoices*/
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
        set KL0TM001.XGPCD cursor, modified, bold;
        return;
      end
    end
  end

  if (KL0TM001.YCTCD == "OSD") /* only gpc 02 and 03 are valid*/
    if (KL0TM001.XGPCD == "02" /* when claim type code = 'osd'*/
     || KL0TM001.XGPCD == "03") /**/
      /* next sentence*/
    else
      converseLib.validationFailed(697); /* invalid product class*/
      set KL0TM001.XGPCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      return;
    end
  end

  if (KL0TM001.YCTCD != "CDR")
    /* *********************************************************/
    /* GET CL0TS73*/
    /* get the vcmpny record to test order type profile code*/
    /* *********************************************************/
    set SQLCA empty;
    set KUCREC empty;
    if (KL0TM001.KUCCOID != 0)
      KUCREC.KUCCOID = KL0TM001.KUCCOID;
    else
      if (CLAREC.KUCCOID != 0)
        KUCREC.KUCCOID = CLAREC.KUCCOID;
      else
        KUCREC.KUCCOID = VIVHDR04.KUCCOID;
      end
    end
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(81); /* invalid company - not found on file*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes, there is an error*/
      CL0TW01.CL0TWEGC = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* bad sql code*/
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0TS45";
        XPCL010();
      end
    end
     /* end of get cl0ts73*/
    /* *********************************************************/
    /* GET CL0ES68*/
     /* get the appropriate profile code off the company record*/
     /* (kucrec), based on the order's gpc*/
     /* also cannot have a claim against 03 if a footwear only*/
     /* company and vice versa ---tw 050691*/
    /* *********************************************************/

    /* IF CL0TM001.XGPCD IN XGPTBL.XGPCD ;if a valid product class*/
      /* AND CL0TM001.XGPCD NE '05' ; gpc code 5 is always invalid*/
      /* AND XGPTBL.XXXSTAT(EZETST) EQ 'A'    ; active status*/

    if (KL0TM001.XGPCD == "02")
      if (KUCREC.XOPCD[1] == "NOFT")
        if (KUCREC.KUCFPRDT == 0)
          set KL0TM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          CLXREC.CLXTESTF = "N"; /* skip combo edit*/
          converseLib.validationFailed(692); /* company order type profile not*/
          return;
        else
          if (KUCREC.KUCFPRDT > 0
           && KUCREC.XOPCD[2] == "NOFT")
            set KL0TM001.XGPCD cursor, bold;
            CLXREC.CLXERRF = "Y";
            CLXREC.CLXTESTF = "N"; /* skip combo edit*/
            converseLib.validationFailed(692); /* company order type profile not*/
            return;
          end /* set up for this gpc code*/
        end
      end
    end

    if (KL0TM001.XGPCD == "03")
      if (KUCREC.XOPCD[3] == "NOAP")
        if (KUCREC.KUCAPRDT == 0)
          set KL0TM001.XGPCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          CLXREC.CLXTESTF = "N"; /* skip combo edit*/
          converseLib.validationFailed(692); /* company order type profile not*/
          return;
        else
          if (KUCREC.KUCAPRDT > 0
           && KUCREC.XOPCD[4] == "NOAP")
            set KL0TM001.XGPCD cursor, bold;
            CLXREC.CLXERRF = "Y";
            CLXREC.CLXTESTF = "N"; /* skip combo edit*/
            converseLib.validationFailed(692); /* company order type profile not*/
            return;
          end /* set up for this gpc code*/
        end
      end
    end

  end

   /* ****************************************/
   /* *this is end of the get paragraph*/

  if (KL0TM001.XGPCD in XGPTBL.XGPCD /* if a valid product class*/
   && KL0TM001.XGPCD != "05"         /* gpc code 5 is always invalid*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
    KL0TM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    CL0TW02.XGPCD = KL0TM001.XGPCD;
  else
    converseLib.validationFailed(86); /* invalid product class*/
    set KL0TM001.XGPCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    CLXREC.CLXTESTF = "N"; /* skip combo edit*/
    return;
  end

   /* now see if this gpc is in table for return whse*/

  if (KL0TM001.XWHCD in XWHTBL.XWHCD)
    if (KL0TM001.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]
     || KL0TM001.XGPCD == XWHTBL.XGPCD8[sysVar.arrayIndex])
      /* next sentence (is valid for warehouse)*/
    else
      if (CL0TW01.CL0TWGXF == "N") /* haven't told them yet*/
        converseLib.validationFailed(559); /* warehouse/GPC mismatch*/
        set KL0TM001.XGPCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      end
    end
  end


end // end KL0TS45
// edit the claim type
Function KL0TS46()
   /* ************************************************************/
   /* *      edit the claim type                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CLT0S46"; /* set current process name*/


  CLXREC.CLXYCTX = 0;

   /* (*cwh 9/11/89*)*/
   /* this edit is now done after cl0ts39 is performed.*/
   /* cl0ts63 uses the kucrec.xaucd to determine if a consumer*/
   /* claim exists.*/
   /* IF CL0TM001.CL0TMCLN NE ' '     ;*/
    /* IF CL0TM001.YCTCD = 'CDR'     ; if already consumer def*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* IF CL0TM001.YCTCD = ' ';*/
      /* MOVE 'CDR' TO CL0TM001.YCTCD     ; default yct  to cdr*/
    /* ELSE ;*/
      /* MOVE 522 TO EZEMNO        ; claim type must be cdr*/
      /* SET CL0TM001.YCTCD CURSOR,MODIFIED,BRIGHT;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF       ; there is an error*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
   /* END ;*/

  if (KL0TM001.YCTCD == " ") /* if no claim type entered*/
    if (KL0TM001.CLACLMNB != 0) /* if a claim nbr was entered*/
      KL0TM001.YCTCD = CLAREC.YCTCD; /* default it*/
    else
      if (KL0TM001.OP1CUOID != 0) /* if an order was entered*/
        KL0TM001.YCTCD = "RFL"; /* default it to refusal*/
      end
    end
  end

  if (KL0TM001.CLACLMNB != 0 /* if a claim nbr was entered*/
   && KL0TM001.YCTCD != " ") /* and a claim type was entered*/
    if (KL0TM001.YCTCD == CLAREC.YCTCD)
       /* next sentence*/
    else
      converseLib.validationFailed(521); /* claim type must be same as claim's*/
      KL0TM001.YCTCD = CLAREC.YCTCD;
      set KL0TM001.YCTCD cursor, modified, bold;
    end
  end



  if (KL0TM001.YCTCD == " ")
    converseLib.validationFailed(113); /* claim type code is required*/
    set KL0TM001.YCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* there is an error*/
    return;
  end


  if (KL0TM001.YCTCD in YCTTBL.YCTCD /* if a valid claim type*/
   && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active 4/89*/
    CLXREC.CLXYCTX = sysVar.arrayIndex; /* set the ycttbl index*/
  else
    converseLib.validationFailed(87); /* invalid claim type*/
    set KL0TM001.YCTCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end


  CL0TW01.CLWMNOPT = CLWREC.CLWMNOPT;
  CL0TW01.YCTCD = KL0TM001.YCTCD;

  if (CLWREC.CLWACTIV == "I") /* if only inquiring*/
     /* next sentence*/
  else
    if (CL0TW01.YMOKEY in YMOTBL.YMOKEY
     && YMOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active 4/89*/
      if (KL0TM001.YCTCD == "RFL"
       && KL0TM001.CLACLMNB == 0
       && KL0TM001.OP1CUOID == 0)
        converseLib.validationFailed(573); /* RFL claims must have order #*/
        set KL0TM001.YCTCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      converseLib.validationFailed(114); /* clm type not valid for menu option*/
      set KL0TM001.YCTCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end


  KL0TM001.YCTABRV = YCTTBL.YCTABRV[CLXYCTX];
  CL0TW02.YCTCD = KL0TM001.YCTCD;



end // end KL0TS46

// edit the claim reason code
Function KL0TS47()
   /* *************************************************************/
   /* *      edit the claim reason code                          **/
   /* *                                                          **/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *  08/10/90  sgorga  The edit that ensures that the claim  **/
   /* *            type & rsn code are valid together had a line **/
   /* *            of code that caused the edit to be bypassed   **/
   /* *            sometimes, so the line was removed.           **/
   /* * 11-11-91 twatso added code for 'osd' to be treated like  **/
   /* *                 'def' for 12-91 installation.            **/
   /* * 04-21-94 sgorga  Deleted 1 line that required 'DEF' clm  **/
   /* *                  type to have 'def' reason cd only.      **/
   /* * 10-30-97 RCHAUV  reason code conversion - A04 now C04    **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0TS47"; /* set current process name*/


  CL0TW01.CL0TWVRF = "N"; /* init valid-reason-flag*/


  if (KL0TM001.YCRCD == " " /* if no reason code entered*/
   && CLAREC.YCRCD != " ")  /* and one already on file*/
    KL0TM001.YCRCD = CLAREC.YCRCD; /* default back to original*/
  end


  if (KL0TM001.YCRCD == " " /* if no reason code entered*/
   && CLAREC.YCRCD == " ")  /* and none on file*/
    if (KL0TM001.YCTCD == "CDR"
     || KL0TM001.YCTCD == "OSD") /* if offshore defective should be def*/
      KL0TM001.YCRCD = "DEF"; /* defaults to defective*/
    end
    if (KL0TM001.YCTCD == "RFL")
      KL0TM001.YCRCD = "C04"; /* account related*/
    end
  end


  if (KL0TM001.CLACLMNB != 0) /* if a claim nbr was entered*/
    if (KL0TM001.YCRCD == CLAREC.YCRCD) /* if reason codes are equal*/
       /* next sentence*/
    else
      if (KL0TM001.YCRCD != " ")
        converseLib.validationFailed(520); /* claim reason must match claim's*/
        KL0TM001.YCRCD = CLAREC.YCRCD;
        set KL0TM001.YCRCD cursor, modified, bold;
      end
    end
  end


  if (KL0TM001.YCRCD != " ") /* if claim reason was entered*/
    if (KL0TM001.YCRCD in YCRTBL.YCRCD /* if a valid claim reason*/
     && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active 4/89*/
      CLXREC.CLXYCRX = sysVar.arrayIndex; /* set reason index*/
    else
      converseLib.validationFailed(88); /* invalid claim reason code*/
      set KL0TM001.YCRCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      KL0TM001.YCRSDESC = " "; /* blank out description*/
      return;
    end
  else
    converseLib.validationFailed(102); /* reason code is required*/
    set KL0TM001.YCRCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    KL0TM001.YCRSDESC = " "; /* blank out description*/
    return;
  end


  if (KL0TM001.YCTCD != " ") /* if a clm type was entered*/
    if (KL0TM001.YCTCD == YCRTBL.YCTCD1[CLXYCRX]
     || KL0TM001.YCTCD == YCRTBL.YCTCD2[CLXYCRX]
     || KL0TM001.YCTCD == YCRTBL.YCTCD3[CLXYCRX]
     || KL0TM001.YCTCD == YCRTBL.YCTCD4[CLXYCRX])
       /* next sentence*/
    else
      converseLib.validationFailed(32);
                                   /* claim reason not valid for claim type*/
      set KL0TM001.YCRCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
    if (CLXREC.CLXYCTX != 0) /* if yctcd has been edited*/
      if (YCTTBL.YCTNILF[CLXYCTX] == "Y") /* if international claim*/
        if (KL0TM001.YCRCD == "DEF") /* if already defective reason*/
           /* next sentence*/
        else
          converseLib.validationFailed(125); /* claim reason must be defective*/
          set KL0TM001.YCRCD cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* screen validation failed*/
          KL0TM001.YCRSDESC = " "; /* blank out description*/
          return;
        end
      end
    end
  end


  KL0TM001.YCRSDESC = YCRTBL.YCRSDESC[CLXYCRX];
  CL0TW01.CL0TWVRF = "Y"; /* set valid-reason-flag to 'yes'*/


end // end KL0TS47

// determine return disposition
Function KL0TS48()
   /* ************************************************************/
   /* *      determine the return disposition                   **/
   /* *                                                         **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G    **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1  **/
   /* * 11-09-94  sgorga  Changed the status code for 'expired' **/
   /* *                   from 'exp' (wrong!!) to 'era'.        **/
   /* * 11-23-94  sgorga  Added 2 new statuses ('wpo', 'dpl') to**/
   /* *                   edit indicating claim isn't authorized**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TS48"; /* set current process name*/


  if (KL0TM001.CLLRTDSP == "INSP" /* inspection*/
   || KL0TM001.CLLRTDSP == "RFSD" /* refused*/
   || KL0TM001.CLLRTDSP == "NCLM" /* new claim*/
   || KL0TM001.CLLRTDSP == "    ") /* defaulting (set later)*/
     /* next sentence*/
  else
    set KL0TM001.CLLRTDSP cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(454); /* invalid return disposition*/
    return;
  end


  if (KL0TM001.CLLRTDSP == "NCLM"
   && KL0TM001.CLACLMNB == 0)
    converseLib.validationFailed(577); /* NCLM requires Nike claim number*/
    CLXREC.CLXERRF = "Y";
    set KL0TM001.CLLRTDSP cursor, modified, bold;
    return;
  end

  if (CLAREC.YCSCD1 == "CMP"
   || CLAREC.YCSCD1 == "DEN"
   || CLAREC.YCSCD1 == "CAN"
   || CLAREC.YCSCD1 == "ERA")
    if (KL0TM001.CLLRTDSP == "INSP"
     || KL0TM001.CLLRTDSP == "    ")
      set KL0TM001.CLLRTDSP cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      if (CLAREC.YCSCD1 == "CMP")
        converseLib.validationFailed(449); /* claim status is cmp*/
      end
      if (CLAREC.YCSCD1 == "DEN")
        converseLib.validationFailed(450); /* claim status is den*/
      end
      if (CLAREC.YCSCD1 == "CAN")
        converseLib.validationFailed(451); /* claim status is can*/
      end
      if (CLAREC.YCSCD1 == "ERA")
        converseLib.validationFailed(452); /* claim status is expired*/
      end
      return;
    end
  end

  if (CL0TW01.CL0TWMRN == 0) /* no returns created yet*/
    if (CLAREC.YCSCD1 == "AIP" /* these statuses mean no authorization*/
     || CLAREC.YCSCD1 == "OCC" /* has yet been created for claim*/
     || CLAREC.YCSCD1 == "OIC" 
     || CLAREC.YCSCD1 == "OIP" 
     || CLAREC.YCSCD1 == "OPA" 
     || CLAREC.YCSCD1 == "WPO" 
     || CLAREC.YCSCD1 == "DPL" 
     || CLAREC.YCSCD1 == "POD")
      if (KL0TM001.CLLRTDSP != "RFSD") /* can only refuse*/
        if (KL0TM001.CLLRTDSP == " ") /* default not set*/
          KL0TM001.CLLRTDSP = "RFSD";
        end
        set KL0TM001.CLLRTDSP cursor, modified, bold;
        converseLib.validationFailed(560); /* inspection not authorized*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end


  if (KL0TM001.CLLRTDSP == " "
   && CL0TW01.CL0TWDDF == "Y") /* and can default*/
    KL0TM001.CLLRTDSP = "INSP"; /* default to inspection*/
  end

  if (KL0TM001.CLLRTDSP == " "
   && CL0TW01.CL0TWRXF == "Y") /* and we have warned them*/
    converseLib.validationFailed(561); /* cannot default disp*/
    CLXREC.CLXERRF = "Y";
    set KL0TM001.CLLRTDSP cursor, modified, bold;
  end



end // end KL0TS48

// get return-to address
Function KL0TS49()
   /* ************************************************************/
   /* *        get and format the return-to address             **/
   /* *  valid values for clartnff are 's' and 'e'              **/
   /* *  's' means default from shipto address                  **/
   /* *  'e' means user entered the data                        **/
   /* *                                                         **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* 03-11-94 BCourt  Rename CLFREC.xxxaddrn to xxx-addrn.     **/
   /* Do NOT rename map names from 30 to 38 chars.          **/
   /* 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04.            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS49"; /* set current process name*/


  set CLFREC empty;


  CLFREC.CLACLMNB = CLAREC.CLACLMNB;

   /* added 3-24-94 twatso for refusal address from invoice.*/

  if (CLAREC.CLASHPFF == "I") /* if ship-to from invoice*/
    IV5REC.IV0PARTN = CLAREC.IV0PARTN;
    IV5REC.IV0IVCID = CLAREC.IV0IVCID;
    KL0TS50(); /* get invoice address record*/
  end
  if (CLAREC.CLASHPFF == " " /* if no ship-to-from flag*/
   && VIVHDR04.IV0IVCID > 0) /* and we have an invoice (RFL)*/
    IV5REC.IV0PARTN = VIVHDR04.IV0PARTN;
    IV5REC.IV0IVCID = VIVHDR04.IV0IVCID;
    KL0TS50(); /* get invoice address record*/
  else
    if (CLAREC.CLASHPFF == " ") /* if no ship-to-from flag*/
      KL0TS94(); /* get customer default address*/
    else
      CLFREC.CLFADTYP = "S"; /* want claim shipto address*/
    end
  end

   /* commented out to test change - getting invoice address to map*/
   /* iF CLAREC.CLASHPFF = ' ';         /* if no ship-to-from flag*/
    /* KL0TS94;                        /* get customer default address*/
   /* ELSE;*/
    /* IF CLAREC.CLASHPFF EQ 'I';      /* if ship-to not from invoice*/
     /* KL0TS50;                      /* get invoice address record*/
   /* ELSE;*/
     /* MOVE 'S' TO CLFREC.CLFADTYP;  /* want claim shipto address*/
   /* END;*/
   /* END;*/

  if (CLFREC.CLFADNM == " ") /* if didnt get invoice address*/
    set SQLCA empty;
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get claims address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* MOVE 156 TO EZEMNO        ; return to address not on file*/
        return;
      else
        TA1REC.TA1TBLKE = "GETTING CLAIM RETURN-TO ADDRESS";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end

    /* note that cl0ts50 and cl0ts93 move the custome and invoice*/
         /* addresses to the clfrec*/


  KL0TM001.CLFADNM = CLFREC.CLFADNM;
  KL0TM001.XXXADDR1 = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
  KL0TM001.XXXADDR2 = CLFREC.XXX-ADDR2; /* to db2 names.*/
  KL0TM001.XXXADDR3 = CLFREC.XXX-ADDR3;
  KL0TM001.XXXCITY = CLFREC.XXXCITY;
  KL0TM001.XSTCD = CLFREC.XSTCD;
  KL0TM001.XXXZIP = CLFREC.XXXZIP;
  KL0TM001.XCTCD = CLFREC.XCTCD;
  if (KL0TM001.XCTCD == "USA"
   || KL0TM001.XCTCD == " ")
    KL0TM001.XCTABRV = " ";
  else
    if (KL0TM001.XCTCD in XCTTBL.XCTCD)
      KL0TM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
    end
  end
  CL0TW01.CLFGROUP = CLFREC.CLFGROUP;

end // end KL0TS49

// TRY TO FIND CONVERTED CUSTOMER
Function KL0TS4C()
   /* ************************************************************/
   /* *      select KUDREC for customer number (DCUST.VCONV001) **/
   /* *                                                         **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 3/15/91 GDECKE  CREATED                            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS4C"; /* set current process name*/


  set KUDREC empty;

  KUDREC.KUCCOID = KL0TM001.KUCCOID;
  KUDREC.KUMSTRID = KL0TM001.KUMSTRID;

  set SQLCA empty;
  call "IO5570" ("S ", SQLCA, KUDREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if customer is on file*/
   && KUDREC.KUDCSTAT != "I") 
    KL0TM001.KUCCOID = KUDREC.KUDCOCID;
    CL0TW01.KUCCOID = KUDREC.KUDCOCID;
    KL0TS62(); /* GET COMPANY RECORD*/
    if (KUCREC.XXXSTAT != "I") /* IF CUSTOMER CONVERSION LINE IS ACTIVE*/
      KL0TM001.KUMSTRID = KUDREC.KUDSTCID;
      KL0TM001.XNXCD = KUDREC.XNXCD;
      converseLib.validationFailed(686);
      CLXREC.CLXERRF = "Y";
      set KL0TM001.KUCCOID cursor, modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
      KL0T13B(); /* UPDATE THE CLAREC WITH THE NEW CO-STOR-DEPT*/
    else
      KL0TM001.KUCCOID = CL0TW01.KUCCOID;
      KL0TS62(); /* GET COMPANY RECORD*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company CONVERSION TABLE LINE*/
       /* NEXT SENTENCE             ; NOT FOUND THEN NO ACTION*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR-CUST CONVERSION";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCONV001";
      TA1REC.TA1LOCAT[2] = "CL0TS4C";
      XPCL010();
    end
  end


end // end KL0TS4C

// verify cust. dept converted
Function KL0TS4D()
   /* ************************************************************/
   /* select KUDREC for customer number (DCUST.VCONV001) **/
   /* **/
   /* Maintenance                                             **/
   /* **/
   /* 1. 3/20/91 GDECKE  CREATED                            **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with ivbrec.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TS4C"; /* set current process name*/


  CL0TW01.CL0TWCON = "N"; /* init. converted customer flag*/
  set KUDREC empty;

  KUDREC.KUCCOID = VIVHDR04.KUCCOID;
  KUDREC.KUMSTRID = VIVHDR04.KUMSTRID;

  set SQLCA empty;
  call "IO5570" ("S ", SQLCA, KUDREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    if (KUDREC.KUDCOCID == KL0TM001.KUCCOID
     && KUDREC.KUDSTCID == KL0TM001.KUMSTRID
     && KUDREC.XNXCD == KL0TM001.XNXCD)
      CL0TW01.CL0TWCON = "Y"; /* new cust# taken from conv tbl*/
    else
       /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company CONVERSION TABLE LINE*/
       /* NEXT SENTENCE             ; NOT FOUND THEN NO ACTION*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR-CUST CONVERSION";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCONV001";
      TA1REC.TA1LOCAT[2] = "CL0TS4C";
      XPCL010();
    end
  end


end // end KL0TS4D

// get invoice address record
Function KL0TS50()
   /* ************************************************************/
   /* *        get the invoice address record                   **/
   /* * 02-07-94 jcarey Initialized sqlca record.               **/
   /* * 03-11-94 jBCourt Rename CLFREC.xxxaddrn to xxx-addrn.   **/
   /* *      Do NOT rename map or invoicing addresss to 38 char.**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS50"; /* set current process name*/

   /* this is only called from kl0ts49 and if get here we will have invoice*/
   /* and data from ivbrec is already in iv0partn and iv0ivcid*/

   /* IF IV5REC.IV0IVCID ^= IVBREC.IV0IVCID;*/
    /* MOVE CLAREC.IV0PARTN TO IV5REC.IV0PARTN;*/
    /* MOVE CLAREC.IV0IVCID TO IV5REC.IV0IVCID;*/
   /* END;*/

  set SQLCA empty;
  call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes}; /* invoice address record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CLFREC.CLFADNM = IV5REC.IV5SHPNM;
    CLFREC.XXX-ADDR1 = IV5REC.IV5SHPA1; /* 3-11-94 rename*/
    CLFREC.XXX-ADDR2 = IV5REC.IV5SHPA2; /* to db2 names.*/
    CLFREC.XXX-ADDR3 = IV5REC.IV5SHPA3;
    CLFREC.XXXCITY = IV5REC.IV5SHPCT;
    CLFREC.XSTCD = IV5REC.IV5SHPST;
    CLFREC.XXXZIP = IV5REC.IV5SHPZP;
    CLFREC.XCTCD = IV5REC.IV5SHPCY;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = "GETTING INVOICE ADDRESS";
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVADR01";
      XPCL010();
    end
  end


end // end KL0TS50

// validate claim status
Function KL0TS51()
   /* ************************************************************/
   /* *      edit the claim status*/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS51"; /* set current process name*/



  if (KL0TM001.YCSCD == " ")
    KL0TM001.YCSCD = CLAREC.YCSCD1;
  end


  if (KL0TM001.YCSCD == " ")
    KL0TM001.YCSCD = "RIP"; /* always defaults to rip*/
  end

  if (KL0TM001.YCSCD in YCSTBL.YCSCD) /* if new status is valid*/
    CLXREC.CLXYCSX = sysVar.arrayIndex;
    KL0TM001.YCSSDESC = YCSTBL.YCSSDESC[CLXYCSX];
  end




end // end KL0TS51

// default auth by id for cdr's
Function KL0TS61()
   /* *************************************************************/
   /* *************************************************************/
   /* This statement group will scan the xautbl using the kuccoid*/
   /* for CDR account types.  If the claim being created is for a*/
   /* CDR customer, then the claim will be 'auto authorized' by*/
   /* Jackie Evey.rep #439*/
   /* 11-14-91 twatso added code to do the same type thing for*/
   /* offshore defectives as for cdr, except use*/
   /* Bob Kreinberg #912 for the authorization*/
   /* 02-08-93 bcourt Use consumer account table to i.d. auto*/
   /* auth.*/
   /* 10-26-94 twatso Jackie Evey replaced with Susan Schmidt for*/
   /* auto authorization of CDR claims. Rep #2652*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0TS61"; /* set current process name*/

   /* 2-8-93 drop old condition, use new account # table:*/
   /* IF KUCREC.XAUCD IN XAUTBL.XAUCD;*/
   /* IF XAUTBL.XAUCD(EZETST) = '12';/* if consumer account class*/
   /* OR XAUTBL.XAUCD(EZETST) = '13';*/
   /* OR XAUTBL.XAUCD(EZETST) = '14';*/
   /* OR XAUTBL.XAUCD(EZETST) = '19';*/
   /* OR XAUTBL.XAUCD(EZETST) = '43';*/
   /* OR XAUTBL.XAUCD(EZETST) = '62';*/
   /* Susan Schmidt = #2652*/
  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* consumer account*/
    if (CLAREC.YCSCD1 != "CMP" /* and claim not complete*/
     && CLAREC.YCSCD1 != "DEN" /* and not denied*/
     && CLAREC.YCSCD1 != "CAN" /* and not cancelled*/
     && CLAREC.YCSCD1 != "ERA") /* and not expired*/
      CLAREC.CLYATHID = 2652; /* ok to auto authorize*/
      CLAREC.CLAAUTHF = "Y"; /* set 1st auth flag 10-25-89*/
      CLAREC.YCSCD2 = CLAREC.YCSCD1; /* reset the claim status*/
      CLAREC.YCSCD1 = "RAA";
    end /* 439 = Jackie Evey*/
  end

   /* Below code added 11-14-91 for automatic authorization of 'osd'*/
   /* claim types by Bob Kreinberg, as per specs.  twatso.*/

  if (CLAREC.YCTCD == "OSD")
    if (CLAREC.YCSCD1 != "CMP" /* and claim not complete*/
     && CLAREC.YCSCD1 != "DEN" /* and not denied*/
     && CLAREC.YCSCD1 != "CAN" /* and not cancelled*/
     && CLAREC.YCSCD1 != "ERA") /* and not expired*/
      CLAREC.CLYATHID = 912; /* ok to auto authorize*/
      CLAREC.CLAAUTHF = "Y"; /* set 1st auth flag 10-25-89*/
      CLAREC.YCSCD2 = CLAREC.YCSCD1; /* reset the claim status*/
      CLAREC.YCSCD1 = "RAA";
    end /* 912 = Bob Kreinberg*/
  end

end // end KL0TS61

// select kucrec for customer nbr
Function KL0TS62()
   /* ************************************************************/
   /* *      select KUCREC for customer number                  **/
   /* *                                                         **/
   /* * Maintenance:                                            **/
   /* * when     by      why                                    **/
   /* * 10-12-90 bcourt  change XCUCD(3) to XCECD.              **/
   /* *  2-15-91 bcourt  change CLAREC.XCUCD to XCECD.          **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS62"; /* set current process name*/

  CL0TW01.CL0TWEGC = "N"; /* init error-getting-customer flag*/


  set KUCREC empty;

  KUCREC.KUCCOID = KL0TM001.KUCCOID;

  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0TW02.XCECD = KUCREC.XCECD; /* 5/89 chng xcucd3, 2-15-91*/
    CL0TW02.KUCCOID = KUCREC.KUCCOID;
    CL0TW01.KUCGRPID = KUCREC.KUCGRPID;
    CL0TW01.KUCGRP = KUCREC.KUCGRP; /* save record*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company was not found*/
      converseLib.validationFailed(81); /* company not on file*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      CL0TW01.CL0TWEGC = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCMPNY01";
      TA1REC.TA1LOCAT[2] = "CL0TSZZ";
      XPCL010();
    end
  end


end // end KL0TS62

// edit the cdr claim type
Function KL0TS63()
   /* ************************************************************/
   /* *      edit the CDR claim type                            **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS63"; /* set current process name*/


  if (KL0TM001.CL0TMCLN != " ") /* if consumer last name was entered*/
    if (KL0TM001.YCTCD == "CDR") /* if already consumer def*/
       /* next sentence*/
    else
      if (KL0TM001.YCTCD == " ")
        KL0TM001.YCTCD = "CDR"; /* default claim type to cdr*/
      else
        converseLib.validationFailed(522); /* claim type must be cdr*/
        set KL0TM001.YCTCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        return;
      end
    end
  else /* if no last name entered*/
    if (KL0TM001.YCTCD == "CDR") /* and claim type is cdr*/
      converseLib.validationFailed(021); /* consumer last name required for*/
      set KL0TM001.CL0TMCLN cursor, modified, bold; /* yctcd=cdr*/
      CLXREC.CLXERRF = "Y"; /* flag the error*/
      return;
    else
       /* next sentence              its ok*/
    end
  end



end // end KL0TS63

// Get authorize by Id for CDRs
Function KL0TS70()
   /* *************************************************************/
   /* *     This routine will get the authorize-by Id from the   **/
   /* *     DCLAIM.VCLATH01 table for the user id creating the   **/
   /* *     claim.  This is done ONLY for CDR claim types.       **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0TS70";

  set CLYREC empty;
  CLYREC.XXXUSRID = COMMAREA.CAUSERID;
  call "IO2650" ("SB", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    CLAREC.CLYATHID = 0;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* bad problems*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLATH01";
      TA1REC.TA1TBLKE = COMMAREA.CAUSERID;
      XPCL010();
    end
  end

   /* now check if this user can authorize CDRs*/

  if (CLAREC.YCTCD in CLYREC.YCTCD) /* if in table*/
    CLAREC.CLYATHID = CLYREC.CLYATHID;
  else /* user can't, so put zero in record*/
    CLAREC.CLYATHID = 0;
  end

end // end KL0TS70

// Get order number for VCLIVX01
Function KL0TS71()
   /* *************************************************************/
   /* *    This routine will look-up the order number for the    **/
   /* *    claim using the DCLAIM.VCLIVX01 table. If we find     **/
   /* *    a record, we will move the number to the screen.      **/
   /* * 02-07-94 jcarey Initialized the sqlca record.            **/
   /* *************************************************************/

  if (CLAREC.CLACLMNB == 0 /* if no claim number*/
   || CLAREC.IV0IVCID == 0) /* or no invoice id*/
    return; /* we have nothing to do*/
  end

  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.IV0PARTN = CLAREC.IV0PARTN;
  CLBREC.IV0IVCID = CLAREC.IV0IVCID;
  set SQLCA empty;
  call "IO1180" ("S ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* try for record*/
  if (SQLCA.VAGen_SQLCODE == 100) /* can't find record*/
    return; /* nothing else to do*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* got problems*/
      CLXREC.CLXCPROC = "CL0TS71";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end

  KL0TM001.OP1CUOID = CLBREC.OP1CUOID;
  KL0TM001.OP1NORID = CLBREC.OP1NORID;

end // end KL0TS71

// Protect screen based on entry
Function KL0TS72()
   /* ************************************************************/
   /* *   protect screen fields based on the data entered by    **/
   /* *   the user. This rule is as follows:                    **/
   /* *                                                         **/
   /* *     IF Claim Nbr, Order Nbr, or Pack List Nbr entered   **/
   /* *        If Claim Nbr entered                             **/
   /* *           Protect Order Nbr and Pack List Nbr           **/
   /* *        ELSE                                             **/
   /* *           Protect Claim Nbr                             **/
   /* *        END                                              **/
   /* *        Protect all remaining fields except Number of    **/
   /* *                cartons and return disposition           **/
   /* *     ELSE                                                **/
   /* *        Protect Claim Nbr, Order Nbr, and Pack List Nbr  **/
   /* **/
   /* MAINTENANCE HISTORY                                     **/
   /* 03/12/93  sgorga  Added Pack list nbr to code.           **/
   /* 03/26/93  sgorga  Don't autoskip pack list (pl) field if **/
   /* pl warning flag ='Y' and pl not entered.**/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TS72"; /* set current process name*/

  if (KL0TM001.CLACLMNB != 0
   || KL0TM001.OP1CUOID != 0
   || KL0TM001.TS-NIKE-PL-NBR != 0) /* 03-12-93*/
    if (KL0TM001.CLACLMNB != 0 /* cwh 7-11-89*/
     || KL0TM001.CLLRTNNB is modified)
      if (KL0TM001.TS-NIKE-PL-NBR == 0 /* 3-26-93  If pack list not entered*/
       && CL0TW01.CL0TW-PL-WARN-FL == "Y") /* and FYI warning is yes*/
         /* next sentence*/
      else
        set KL0TM001.OP1CUOID skip;
        set KL0TM001.OP1NORID skip;
        set KL0TM001.TS-NIKE-PL-NBR skip; /* 03-12-93*/
      end
    else
      if (KL0TM001.OP1CUOID != 0 /* cwh 7-11-89*/
       || KL0TM001.OP1NORID is modified
       || KL0TM001.TS-NIKE-PL-NBR is modified) /* 03-12-93*/
        set KL0TM001.CLACLMNB skip;
        set KL0TM001.CLLRTNNB skip;
        if (CLXREC.CLXERRF != "Y") /* if no error*/
          set KL0TM001.OP1CUOID cursor;
        end
      end
    end

    set KL0TM001.KUCCOID skip;
    set KL0TM001.KUMSTRID skip;
    set KL0TM001.XNXCD skip;
    set KL0TM001.CL0TMCLN skip;
    set KL0TM001.CLFADNM skip;
    set KL0TM001.XXXADDR1 skip;
    set KL0TM001.XXXADDR2 skip;
    set KL0TM001.XXXADDR3 skip;
    set KL0TM001.XXXCITY skip;
    set KL0TM001.XSTCD skip;
    set KL0TM001.XCTCD skip;
    set KL0TM001.XXXZIP skip;
    set KL0TM001.YCTCD skip;
    if (CLXREC.CLXTESTF == "Y") /* 5/89 if no errs, stop bright*/
      set KL0TM001.XGPCD skip;
      set KL0TM001.XDVCD skip; /* 4/89 division*/
      set KL0TM001.XOBCD skip; /* base order type*/
      set KL0TM001.XSOCD skip; /* sales office*/
    end
    if (KL0TM001.CLACLMNB != 0) /* claim found for order*/
      set KL0TM001.YCRCD skip;
    end
  else
    if (KL0TM001.KUCCOID != 0)
      set KL0TM001.CLACLMNB skip;
      set KL0TM001.CLLRTNNB skip;
      set KL0TM001.OP1CUOID skip;
      set KL0TM001.OP1NORID skip;
      set KL0TM001.TS-NIKE-PL-NBR skip; /* 03-12-93*/
      if (CLXREC.CLXERRF != "Y") /* if no error*/
        set KL0TM001.KUCCOID cursor;
      end
    end
  end

end // end KL0TS72

// GET COMPANY RECORD,UPDT CLWREC
Function KL0TS73()
   /* **********************************************************/
   /* *  get company record, update clwrec with new value     **/
   /* *  of legal entity code and legal entity abbreviation   **/
   /* **********************************************************/
  set SQLCA empty;
  if (KUCREC.KUCCOID == 0) /* if no company id then set legal entity code*/
    KUCREC.XLECD = "  "; /* set output fields blank*/
    CLWREC.XLECD = "  "; /* legal entity*/
    CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
    KUCREC.XAUCD = "  "; /* account class code*/
  else
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* get company rec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.XLECD = "  "; /* set output fields blank*/
      CLWREC.XLECD = "  "; /* legal entity*/
      CLWREC.XLEABRV = "      "; /* legal entity abbreviation*/
      KUCREC.XAUCD = "  "; /* account class code*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* if company not found- abend*/
        TA1REC.TA1TBLKE = "FATAL ERROR GETTING COMPANY";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCMPNY01";
        TA1REC.TA1LOCAT[2] = "CL0TS73";
        XPCL010();
      else
        CLWREC.XLECD = KUCREC.XLECD;
        if (KUCREC.XLECD in XLETBL.XLECD)
          CLWREC.XLEABRV = XLETBL.XLEABRV[sysVar.arrayIndex];
        else
          CLWREC.XLEABRV = "NOTFND";
        end
      end
    end
  end

end // end KL0TS73

// Read DCLAIM.VCLARX01
Function KL0TS80()
   /* **************************************************************/
   /* *  SELECT THE DCLAIM.VCLARX01 LINE TO GET SAP RTN SO NBR **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  07-27-01  DSINHA  created                             **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "READ-VCLARX"; /* set current process name*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0TS80"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end

   /* ***** FETCH THE FIRST LINE FOR THE CLAIM FROM THE ARX TABLE*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* RECORD FOUND*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0TS80-FETCH"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end


end // end KL0TS80

// close cursor DCLAIM.VCLARX01
Function KL0TS81()
   /* **************************************************************/
   /* *  SELECT THE DCLAIM.VCLARX01 LINE TO GET SAP RTN SO NBR **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  07-17-01  DSINHA  created                             **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "CLOSE-VCLARX"; /* set current process name*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0TS81"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end
end // end KL0TS81

// build/write claim bill-to addr
Function KL0TS91()
   /* ************************************************************/
   /* *   build and write the claims bill-to address record     **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE   PGMR    DESCRIPTION                            **/
   /* *---------------------------------------------------------**/
   /* * 01-08-91 sgorga  Removed call to kuarec, since kuarec   **/
   /* *                  will be deleted during Feb. '91 DB2    **/
   /* *                  changes.  Renamed kuarec.kuaadrid to   **/
   /* *                  kucrec.kucblaid.                       **/
   /* * 11-12-93 GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.   **/
   /* * 03-11-94 BCourt  Rename CLFREC.XXXADDRn TO XXX-ADDRn.   **/
   /* *     Note - do NOT rename map names to 38 chars.         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS91"; /* default the coop analyst code*/


  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/


  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADR01";
    TA1REC.TA1TBLKE = "READING BILL-TO ADDRESS";
    XPCL010();
  end


  if (CL0TW01.CL0TWFNC == "DELETE")
    if (SQLCA.VAGen_SQLCODE == 0)
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        /* ezertn*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        XPCL010();
      end
    else /* if no record was there to*/
      return; /* delete, that's ok*/
    end
  end


  if (CL0TW01.CL0TWFNC == "ADD") /* if requesting to add*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and record not found*/
       /* next sentence*/
    else
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        TA1REC.TA1TBLKE = "DELETING RECORD FOR ADD";
        XPCL010();
      end
    end
  end


  if (CL0TW01.CL0TWFNC == "UPDATE") /* if requesting to update*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and record on file*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      TA1REC.TA1TBLKE = "CLF REC TO UPDATE NOT ON FILE";
      XPCL010();
    end
  end

   /* 01-08-91 sgorga removed call to kuarec*/
   /* renamed kuarec.kuaadrid to kucrec.kucblaid*/

  if (KL0TM001.OP1CMPNB > 0) /* IF COMP-CO-ID IS NOT ZERO THEN USE THE COMP*/
    KULREC.KUCCOID = CL0TW06.KUCCOID; /* COMPANY BILL GROUP ADDRESS*/
    KULREC.KULAAID = CL0TW06.KUCBLAID;
  else
    KULREC.KUCCOID = KUCREC.KUCCOID; /* IF NO COMP-CO THEN JUST USE*/
    KULREC.KULAAID = KUCREC.KUCBLAID;
                                   /* THE COMPANY BILL GROUP ADDRESS*/
  end

  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1TBLKE = "GETTING BILL-GRP ADDR RECORD";
    XPCL010();
  end


  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/
  CLFREC.CLFADNM = KUCREC.KUCCONM;
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* to db2 names*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;



  if (CL0TW01.CL0TWFNC == "UPDATE") /* if updating existing record*/
    set SQLCA empty;
    call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update existing record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      TA1REC.TA1TBLKE = "UPDATING EXISTING CLF RECORD";
      XPCL010();
    end
  end


  if (CL0TW01.CL0TWFNC == "ADD") /* if adding new record*/
    set SQLCA empty;
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      XPCL010();
    end
  end




end // end KL0TS91

// build/write return to addr rec
Function KL0TS92()
   /* ************************************************************/
   /* *   build and write the claims return-to address record   **/
   /* * 02-07-94 jcarey Initialized the sqlca record.           **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS92"; /* set current process name*/


   /* delete an existing ship-to address record if there is one*/
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/

  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get the change count*/

  if (SQLCA.VAGen_SQLCODE == 0 /* change count is now in the record*/
   || SQLCA.VAGen_SQLCODE == 100) /* there aren't any records out there already*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0TW01.CL0TWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if record was there*/
    call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete it*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database deadlock*/
        CL0TW01.CL0TWUOK = "N"; /* don't do updates*/
        return;
      else
        TA1REC.TA1TBLKE = "DELETING CLF RECORD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLADR01";
        XPCL010();
      end
    end
  end


  CLFREC.CLFGROUP = CL0TW01.CLFGROUP;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  set SQLCA empty;
  call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* update it*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if record not currently on file*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database deadlock*/
      CL0TW01.CL0TWUOK = "N"; /* don't do updates*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end


end // end KL0TS92

// build/write return to addr rec
Function KL0TS93()
   /* ************************************************************/
   /* *   build and write the claims return-to address record   **/
   /* * 02-07-94 jcarey Initialized the sqlca record.           **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS93"; /* set current process name*/


   /* get return to from claim we are replicating from*/
  CLFREC.CLACLMNB = CL0TW01.CL0TWHCN;
  CLFREC.CLFADTYP = "R"; /* return-to address*/

  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get it*/

  if (SQLCA.VAGen_SQLCODE == 0) /* found it*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* can't find it*/
      return; /* can't add what we can't find*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLADR01";
      XPCL010();
    end
  end

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "R"; /* return-to address*/

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;

  call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add it*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if record not currently on file*/
    CLAREC.CLARTNFF = "E"; /* set flag in clarec*/
  else
    TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADR01";
    XPCL010();
  end


end // end KL0TS93

// get customer address record
Function KL0TS94()
   /* ************************************************************/
   /* *   get the customer default ship-to address record       **/
   /* *                                                         **/
   /* ************************************************************/
   /* *      M A I N T E N A N C E     H I S T O R Y    L O G   **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 11-12-93  GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.  **/
   /* * 03-11-94  BCourt  CHANGE CLFREC.XXXADDRn TO XXX-ADDRn.  **/
   /* *   Note - do NOT rename map names from 30 to 38 chars.   **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TS94"; /* default the coop analyst code*/


  set KUMREC empty; /* 4/89*/
  set SQLCA empty;

  KUMREC.KUCCOID = KL0TM001.KUCCOID;
  KUMREC.KUMSTRID = KL0TM001.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING STORE RECORD";
    XPCL010();
  end


  set KULREC empty;
  set SQLCA empty;

  KULREC.KUCCOID = KUMREC.KUCCOID;
  KULREC.KULAAID = KUMREC.KUMSTAID;

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING STORE ADDR RECORD";
    XPCL010();
  end


  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/
  CLFREC.CLFADNM = KUCREC.KUCCONM;
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* to db2 names.*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;

  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;


end // end KL0TS94

// edit brand code
Function KL0TSBC()
   /* *************************************************************/
   /* * edit the brand code                                      **/
   /* *                                                          **/
   /* * MAINTENANCE HISTORY                                      **/
   /* *                                                          **/
   /* * 08-24-90 sgorga  Allow claims against 3 Nil-cust invoices**/
   /* *    to bypass edit that prevents Nil claims from being    **/
   /* *    inspected in Option 7 - Special Services Log.         **/
   /* * 09-28-90 sgorga  Added another Nil invoice.              **/
   /* * 11-21-90 sgorga  Added Nil invoices 203447,203451.       **/
   /* * 01-21-91 sgorga  Added 20 Nil invoices.                  **/
   /* * 02-18-91 sgorga  Added Nil invoice #6298054.             **/
   /* * 02-21-91 sgorga  Added Nil invoice #6573603.             **/
   /* * 03-14-91 sgorga  Added Nil invoice #6763895,6763634.     **/
   /* * 04-19-91 sgorga  Added Nil invoice #6984512,6978386.     **/
   /* 05-07-91 sgorga  Created table CL7TBL to store the NIL    **/
   /* invoice nbrs that we allow domestic      **/
   /* claims to be created against.  Removed   **/
   /* hardcoded NIL invoices nbrs from this    **/
   /* process. Replaced with table in inquiry  **/
   /* 02-12-93 sgorga  Replaced ivarec fields with ivbrec.      **/
   /* 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04             **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0TSBC"; /* set current process name*/

  if (KL0TM001.XBCCD == " ")
    if (CLAREC.XBCCD == " ")
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.XBCCD = VIVHDR04.XBCCD; /* default from ivc*/
      end
    else
      KL0TM001.XBCCD = CLAREC.XBCCD; /* default from clm*/
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* default brand from claim*/
      if (KL0TM001.XBCCD == CLAREC.XBCCD)
        /* next sentence*/
      else
        converseLib.validationFailed(631); /* changed brand to match claim*/
        KL0TM001.XBCCD = CLAREC.XBCCD;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        set KL0TM001.XBCCD cursor, modified, bold;
      end
    else
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        if (KL0TM001.XBCCD == VIVHDR04.XBCCD) /* brand must match pmry ivc*/
          /* next sentence*/
        else
          converseLib.validationFailed(631); /* changed brand to match ivc*/
          KL0TM001.XBCCD = VIVHDR04.XBCCD;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          set KL0TM001.XBCCD cursor, modified, bold;
        end
      end
    end
  end


  if (CLXREC.CLXORDFD == "Y" /* if order or invoice found*/
   || CLXREC.CLXINVFD == "Y")
                                   /* allow blank xbccd (claim before 6-90)*/
    if (VIVHDR04.XBCCD == "  ")
      CL0TW01.CL0TWYIT = "Y"; /* indicator = 'y' if blank brand is ok*/
    else
      CL0TW01.CL0TWYIT = "N"; /* indicator = 'n' if blank brand is error*/
    end
  else
    if (CLAREC.IV0IVCID != 0
     && CLAREC.XBCCD == "  ")
      if (CLAREC.YITCD in YITTBL.YITCD) /* check for ibm-ind in yittbl*/
        if (YITTBL.YITIOIBM[sysVar.arrayIndex] == "Y")
                                   /* = yes, then zero xbccd is okay*/
          CL0TW01.CL0TWYIT = "Y";
        else
          CL0TW01.CL0TWYIT = "N";
        end
      else
        CL0TW01.CL0TWYIT = "N";
      end
    else
      if (KL0TM001.CLACLMNB != 0 /* if claim already exists (from cl0e)*/
       && KL0TM001.XBCCD == "  ") /* and brand is blank then it's ok.*/
        CL0TW01.CL0TWYIT = "Y";
      else
        CL0TW01.CL0TWYIT = "N";
      end
    end /* ; indicator = 'n' if blank brand is error*/
  end

  if (CL0TW01.CL0TWYIT == "N" /* if brand was not taken from the invoice*/
   && KL0TM001.XBCCD == "  "  /* and is blank then default to logon brand*/
   && KL0TM001.CLACLMNB == 0) /* and claim is being setup in cl0t*/
    set KUYREC empty;
    set SQLCA empty;
    KUYREC.XXXUSRID = COMMAREA.CAUSERID;
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* user logon id*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
      if (KUYREC.XBCCD in XBCTBL.XBCCD) /* and logon brand is valid*/
        KL0TM001.XBCCD = KUYREC.XBCCD; /* default to logon brand*/
      end
    else
      /* next sentence*/
    end
  end

  if (KL0TM001.XBCCD in XBCTBL.XBCCD) /* if a valid brand code*/
    KL0TM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    CL0TW02.XBCCD = KL0TM001.XBCCD;
  else
    if (CL0TW01.CL0TWYIT == "Y" /* if okay to use blank brand*/
     && KL0TM001.XBCCD == " ")  /* and brand is blank, okay to use*/
      KL0TM001.XBCABRV = "N/A   ";
      CL0TW02.XBCCD = KL0TM001.XBCCD;
    else
      converseLib.validationFailed(615); /* invalid brand code - not in table*/
      set KL0TM001.XBCCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      return;
    end
  end


   /* only do the following if primary ivc-id = 0 or*/
   /* clhdr.yitcd = 'n'*/

  KUCREC.KUCCOID = KL0TM001.KUCCOID;
  KL0TS73(); /* get cust company record for acct class*/
         /* and legal entity code and abbrev for clwrec*/

     /* 05-07-91  sgorga*/
  if (CLAREC.IV0IVCID in CL7TBL.IV0IVCID) /* Allow claims against*/
     /* next sentence        NIL invoice nbrs in CL7TBL to*/
                          /* bypass below edit.*/
  else
    if (CLWREC.XLECD == "02") /* if legal entity is '02' (nil),*/
      converseLib.validationFailed(64); /* allow no nil customers*/
      set KL0TM001.KUCCOID cursor, modified, bold;
      set KL0TM001.KUMSTRID modified, bold;
      set KL0TM001.XNXCD modified, bold;
      CLXREC.CLXERRF = "Y"; /* screen validation failed*/
      CL0TW01.CL0TWCMB = "Y"; /* skip field protection*/
      return;
    end
  end


  if (CLAREC.IV0IVCID != 0 /* if invoice id is not zero and is on ibm*/
   && CLAREC.YITCD in YITTBL.YITCD
   && YITTBL.YITIOIBM[sysVar.arrayIndex] == "Y")
    /* next sentence    then skip the following edit*/
  else
    if (KL0TM001.XBCCD in XBCTBL.XBCCD)
                                   /* if in brand/legal entity table*/
      CL0TW01.XLECD = XBCTBL.XLECD[sysVar.arrayIndex]; /* save legal entity*/
      if (CL0TW01.XLECD == CLWREC.XLECD) /* brand ok if claim brand's legal*/
        /* NEXT SENTENCE     ; entity equal customer legal entity code*/
      else
        if (KUCREC.XAUCD == "60" /* if acct class in '60','63',etc.*/
         || KUCREC.XAUCD == "63" /* claim and cust brand must match*/
         || KUCREC.XAUCD == "62" 
         || KUCREC.XAUCD == "90" 
         || KUCREC.XAUCD == "12" 
         || KUCREC.XAUCD == "13" 
         || KUCREC.XAUCD == "14" 
         || KUCREC.XAUCD == "43")
          converseLib.validationFailed(617); /* clm brand's lgl entity ne cust lgl entity*/
          set KL0TM001.KUCCOID cursor, modified, bold;
          set KL0TM001.KUMSTRID modified, bold;
          set KL0TM001.XNXCD modified, bold;
          CLXREC.CLXERRF = "Y"; /* screen validation failed*/
          CL0TW01.CL0TWCMB = "Y"; /* skip field protection*/
          return;
        else
          if (KUCREC.XAUCD in XAUTBL.XAUCD /* if acct type is '02'*/
           && XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* claim and cust brand must match*/
            converseLib.validationFailed(617); /* clm brand's lgl entity ne cust lgl*/
                                   /* entity*/
            set KL0TM001.KUCCOID cursor, modified, bold;
            set KL0TM001.KUMSTRID modified, bold;
            set KL0TM001.XNXCD modified, bold;
            CLXREC.CLXERRF = "Y"; /* screen validation failed*/
            CL0TW01.CL0TWCMB = "Y"; /* skip field protection*/
            return;
          end
        end
      end
    else
      if (CL0TW01.CL0TWYIT == "Y" /* if blank brand code is ok to use*/
       && KL0TM001.XBCCD == "  ") /* and brand is blank, okay to use*/
        /* next sentence*/
      else
        converseLib.validationFailed(616); /* brand not translated to valid legal entity*/
        set KL0TM001.XBCCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* screen validation failed*/
        return;
      end
    end
  end

  if (CLWREC.XLECD == "08")
    converseLib.validationFailed(603); /* cole-haan not allowed in claims*/
                                   /* system*/
    set KL0TM001.XBCCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    return;
  end

end // end KL0TSBC

// edit base order type
Function KL0TSBO()
   /* ************************************************************/
   /* *      edit the base order type                    4/89   **/
   /* **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with ivbrec.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04           **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "KL0TSBO"; /* set current process name*/

  if (KL0TM001.XOBCD == " ") /* if no base order type entered*/
    if (CLAREC.XOBCD == " ") /* and no claim header avail*/
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.XOBCD = VIVHDR04.XOBCD; /* default from invoice*/
      end
    else
      KL0TM001.XOBCD = CLAREC.XOBCD; /* or default from claim*/
    end
    if (KL0TM001.XOBCD == " ")
      converseLib.validationFailed(133); /* sls ofc required*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      set KL0TM001.XOBCD cursor, modified, bold;
      return;
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* 5/89 force match claim/order*/
      if (KL0TM001.XOBCD == CLAREC.XOBCD)
        /* next sentence*/
      else
        converseLib.validationFailed(591); /* change to match claim*/
        KL0TM001.XOBCD = CLAREC.XOBCD;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
        set KL0TM001.XOBCD cursor, modified, bold;
      end
    else
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        if (KL0TM001.XOBCD == VIVHDR04.XOBCD)
          /* next sentence*/
        else
          converseLib.validationFailed(591); /* change to match order*/
          KL0TM001.XOBCD = VIVHDR04.XOBCD;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          CLXREC.CLXTESTF = "N"; /* skip combo edit*/
          set KL0TM001.XOBCD cursor, modified, bold;
        end
      end
    end
  end


  if (KL0TM001.XOBCD in XOBTBL.XOBCD /* if base order type valid*/
   && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    KL0TM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(96); /* invalid base o/t*/
    set KL0TM001.XOBCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    CLXREC.CLXTESTF = "N"; /* skip combo edit*/
  end
end // end KL0TSBO

// edit cogs-co code
Function KL0TSCG()
   /* *************************************************************/
   /* * edit the cogs-co id                                      **/

   /* MAINTENANCE HISTORY*/
   /*  */
   /* 10-12-90  bcourt  change XCGCD to OP1COGID*/
   /* 02-12-93  sgorga  Replaced ivarec fields with IVBREC.*/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04*/
   /* *************************************************************/

  if (KL0TM001.OP1COGID == 0)
    if (CLAREC.OP1COGID == 0)
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.OP1COGID = VIVHDR04.OP1COGID; /* default from ivc*/
      end
    else
      KL0TM001.OP1COGID = CLAREC.OP1COGID; /* default from clm*/
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* default cogs-co from claim*/
      if (KL0TM001.OP1COGID == CLAREC.OP1COGID)
        /* next sentence*/
      else
        converseLib.validationFailed(632); /* changed cogs-co to match claim*/
        KL0TM001.OP1COGID = CLAREC.OP1COGID;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        set KL0TM001.OP1COGID cursor, modified, bold;
      end
    else
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        if (KL0TM001.OP1COGID == VIVHDR04.OP1COGID) /* match cogs-co, pmry*/
          /* next sentence*/
        else
          converseLib.validationFailed(632); /* changed cogs-co to match ivc*/
          KL0TM001.OP1COGID = VIVHDR04.OP1COGID;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          set KL0TM001.OP1COGID cursor, modified, bold;
        end
      end
    end
  end

end // end KL0TSCG

// edit comp-co code
Function KL0TSCM()
   /* *************************************************************/
   /* edit the comp-co id                                      **/
   /* **/
   /* 08-10-90 CHELLM Protected comp-co field if defaulted.     **/
   /* 02-12-93 sgorga  Replaced ivarec fields with ivbrec.      **/
   /* 10-28-94 GDECKE  REPLACE IVBREC WITH VIVHDR04             **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "KL0TSCM"; /* set current process name*/

     /* DEFAULT THE COMP-CO NUMBER*/

  if (KL0TM001.OP1CMPNB == 0) /* IF THE COMP-CO ID FIELD IN CL0TM001*/
                                   /* IS*/
    if (CLAREC.OP1CMPNB == 0) /* STILL ZERO AND HEADER COMP-CO IS ALSO ZERO*/
      if (CLXREC.CLXORDFD == "Y" /* IF ORDER OR INVOICE WAS FOUND THEN*/
       || CLXREC.CLXINVFD == "Y") /* TAKE COMP-CO-ID FROM INVOICE HEADER.*/
        KL0TM001.OP1CMPNB = VIVHDR04.OP1CMPNB; /* default from ivc*/
        set KL0TM001.OP1CMPNB skip, modified; /* 08-10-90*/
      end
      set KL0TM001.OP1CMPNB skip, modified; /* 08-10-90*/
    else /* OTHERWISE, USE CLAIM HEADER COMP-CO*/
                                   /* ID*/
      KL0TM001.OP1CMPNB = CLAREC.OP1CMPNB; /* default from clm*/
      set KL0TM001.OP1CMPNB skip, modified; /* 08-10-90*/
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* REQUIRES CL0TM001 COMP-CO TO BE THE SAME*/
      if (KL0TM001.OP1CMPNB == CLAREC.OP1CMPNB) /* AS CLM HDR COMP-CO-ID*/
        /* NEXT SENTENCE;*/
      else
        converseLib.validationFailed(633); /* changed comp-co to match claim*/
        KL0TM001.OP1CMPNB = CLAREC.OP1CMPNB;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        set KL0TM001.OP1CMPNB cursor, modified, bold;
      end
    else /* IF CL0TM001 CLAIM NUMBER IS STILL ZERO*/
      if (CLXREC.CLXORDFD == "Y" /* THEN CL0TM001 COMP-CO MUST BE THE*/
       /* SAME*/
       || CLXREC.CLXINVFD == "Y") /* AS PRIMARY INVOICE COMP-CO.*/
        if (KL0TM001.OP1CMPNB == VIVHDR04.OP1CMPNB) /* match comp-co, pmry*/
          /* NEXT SENTENCE;*/
        else
          converseLib.validationFailed(633); /* changed comp-co to match ivc*/
          KL0TM001.OP1CMPNB = VIVHDR04.OP1CMPNB;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          set KL0TM001.OP1CMPNB cursor, modified, bold;
        end
      end
    end
  end


                    /* EDIT THE COMP-CO NUMBER*/
  if (KL0TM001.OP1CMPNB == 0) /* IF NO COMP-CO ID THEN EXIT*/
    return;
  end

  set SQLCA empty;

  CL0TW06.KUCCOID = KL0TM001.OP1CMPNB;

  call "IO0240" ("S ", SQLCA, CL0TW06) {isNoRefresh = yes, isExternal = yes}; /* get compny record*/
                                              /* of comp account*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if comp acct is not on file*/
    converseLib.validationFailed(645); /* comp account invalid not on customer table*/
    set KL0TM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end


  if (CL0TW06.XXXSTAT != "A")
    converseLib.validationFailed(648); /* comp account is inactive*/
    set KL0TM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end

  if (CL0TW06.XAUCD == "52")
    converseLib.validationFailed(646); /* Sales COGS invalid as Comp Account*/
    set KL0TM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end

  if (CL0TW06.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XATCD[sysVar.arrayIndex] == "06")
       /* next sentence*/
    else
      converseLib.validationFailed(647); /* Sales COGS invalid as Comp Account*/
      set KL0TM001.OP1CMPNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end

  if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "I")
                                   /* A/R INTERNAL/EXTERNAL INDICATOR*/
     /* next sentence*/
  else
    converseLib.validationFailed(650); /* comp account must have internal A/R ind*/
    set KL0TM001.OP1CMPNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    return;
  end


  if (CL0TW06.XAUCD == "60"
   || CL0TW06.XAUCD == "63")
    if (CL0TW06.XLECD == KUCREC.XLECD)
       /* next sentence*/
    else
      converseLib.validationFailed(649); /* Comp's legal entity must match Customer's*/
      set KL0TM001.OP1CMPNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    end
  end


end // end KL0TSCM

// edit division code
Function KL0TSDV()
   /* edit the division code                       4/89  **/
   /* **/
   /* MAINTENANCE HISTORY                                      **/
   /* **/
   /* 02-12-93  sgorga  Replaced ivarec fields with ivbrec.     **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.           **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0TSDV"; /* set current process name*/


   /* IF CL0TM001.XDVCD = CL0TW05.XDVCD      ; if no change, exit*/
    /* AND CL0TW05.XDVCD NE ' '     ; drop 5/89*/
    /* EZERTN;*/
   /* END ;*/

  if (KL0TM001.XDVCD == " ") /* if no division entered*/
    if (CLAREC.XDVCD == " ")
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.XDVCD = VIVHDR04.XDVCD; /* default from invoice*/
      end
    else
      KL0TM001.XDVCD = CLAREC.XDVCD;
    end
    if (KL0TM001.XDVCD == " ")
      converseLib.validationFailed(578); /* div required*/
      set KL0TM001.XDVCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      return;
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* 5/89 default div from claim*/
      if (KL0TM001.XDVCD == CLAREC.XDVCD)
        /* next sentence*/
      else
        converseLib.validationFailed(589); /* div changed to match claim 5/89*/
        KL0TM001.XDVCD = CLAREC.XDVCD;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
        set KL0TM001.XDVCD cursor, modified, bold;
      end
    else
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        if (KL0TM001.XDVCD == VIVHDR04.XDVCD) /* div must match primary ivc*/
          /* next sentence*/
        else
          converseLib.validationFailed(589); /* div changed to match order 5/89*/
          KL0TM001.XDVCD = VIVHDR04.XDVCD;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          CLXREC.CLXTESTF = "N"; /* skip combo edit*/
          set KL0TM001.XDVCD cursor, modified, bold;
        end
      end
    end
  end


  if (KL0TM001.XBCCD == " ") /* 6-1-90 add brand*/
    if (KL0TM001.XDVCD in XDVTBL.XDVCD) /* if division valid*/
      /* AND XDVTBL.XXXSTAT(EZETST) = 'A'  ; and active-drop 6-1-90*/
      KL0TM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(580); /* invalid division cd*/
      set KL0TM001.XDVCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      return;
    end
  else
    if (KL0TM001.XDVCD in XDVTBL.XDVCD /* if division valid*/
     && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
      KL0TM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(580); /* invalid division cd*/
      set KL0TM001.XDVCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      return;
    end
  end


  if (KL0TM001.XDVCD == "08") /* cole-haan not valid entry*/
    converseLib.validationFailed(581); /* not allowed to use claims*/
    set KL0TM001.XDVCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    CLXREC.CLXTESTF = "N"; /* skip combo edit*/
  end


end // end KL0TSDV

// add Sample Rtn Cmt w/clm nbrs
Function KL0TSSA()
   /* ***********************************************************/
   /* *  add new sales sample cross reference comments         **/
   /* ***********************************************************/
   /* *  MAINTENANCE HISTORY                                   **/
   /* *  11-21-90  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "CL0TSSA"; /* set current process name*/


    /* insert first comment line to primary sales sample claim*/
    /* that has the secondary claim number in the comment area*/

  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  CLGREC.CLGCOMNT = CL0TW01.CLGCOMNT[1]; /* save 'other' clm nbr*/
                           /* ; on a comment line of this claim*/
  CLGREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE; /* change date*/
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM; /* change time*/
  CLGREC.ZZZCHGCT = 0; /* change count*/
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
    TA1REC.TA1TBLVU = "VCLCOM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
    XPCL010(); /* std abend routine for claims*/
  end

    /* insert second comment line to associated sales sample*/
    /* claim that has primary claim number in the comment area*/

  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = CL0TW01.CL0TWCLM[1]; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  CLGREC.CLGCOMNT = CL0TW01.CLGCOMNT[2]; /* save 'other' clm nbr*/
                           /* ; on a comment line of this claim*/
  CLGREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  CLGREC.ZZZCHGDT = CLXREC.XXXCDTE; /* change date*/
  CLGREC.ZZZCHGTM = CLXREC.XXXCHHMM; /* change time*/
  CLGREC.ZZZCHGCT = 0; /* change count*/
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
    TA1REC.TA1TBLVU = "VCLCOM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
    XPCL010(); /* std abend routine for claims*/
  end
end // end KL0TSSA

// Search for Sample Rtn Comments
Function KL0TSSC()
   /* ***********************************************************/
   /* *  Check the Claims Comments Table for Sample Return     **/
   /* *  claim pair comment(claim type code = 'S ') on a claim.**/
   /* *  If found move comment to cl0tw01 for use showing on   **/
   /* *  map cl0tm001.                                         **/
   /* ***********************************************************/
   /* *  MAINTENANCE HISTORY                                   **/
   /* *  10-16-90  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "CL0TSSC"; /* set current process name*/
  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  CLGREC.CLGCMTYP = "S ";
                                   /* look for only claim-hdr type comments*/
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    CL0TW01.CLGCOMNT[1] = CLGREC.CLGCOMNT; /* move comment to w/s table*/
    CL0TW01.CL0TWSAM = "Y"; /* turn on sample claim indicator*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      CL0TW01.CLGCOMNT[1] = " "; /* clear comment on w/s table*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VCLCOM01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0TSSC

// delete Sample Cmt w/clm nbrs
Function KL0TSSD()
   /* ***********************************************************/
   /* *  del sales sample retrun comments with claim numbers.  **/
   /* *  (comment type = 's'). delete comment on each claim.   **/
   /* ***********************************************************/
   /* *  MAINTENANCE HISTORY                                   **/
   /* *  10-16-90  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "CL0TSSD"; /* set current process name*/


    /* select comment line on primary sales sample claim*/
    /* that has the secondary claim number in the comment area*/

  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    /* next sentence;*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* no comment exists-dont do the delete*/
       /* next sentnce              ;*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VCLCOM01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end

    /* delete secondary comment line to associated sales sample*/
    /* claim that has primary claim number in the comment area*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    set SQLCA empty; /* init. sqlca*/
    CL0TW01.CLGCOMNT[3] = CLGREC.CLGCOMNT;
    set CLGREC empty; /* init. claims comment record*/
    CLGREC.CLACLMNB = CL0TW01.CL0TWCLM[3]; /* claim nbr*/
    CLGREC.CLHSEQNB = 1; /* claim sequence number*/
    CLGREC.CL2ISNBR = 0; /* inspection number*/
    CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
    CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
    call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
                                   /* CK FOR CLM HDR COMMENTS*/

    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      /* next sentence;*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VCLCOM01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end

   /* delete comment line for the new secondary sample claim nbr*/

  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = KL0TM001.CL0TMCLM; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
    TA1REC.TA1TBLVU = "VCLCOM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
    XPCL010(); /* std abend routine for claims*/
  end

   /* delete comment line for the new primary sample claim nbr*/

  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = KL0TM001.CLACLMNB; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMTYP = "S"; /* comment type is sales sample*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == +100) /* row not found*/
    /* next sentence;*/
  else
    TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
    TA1REC.TA1TBLVU = "VCLCOM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
    XPCL010(); /* std abend routine for claims*/
  end
end // end KL0TSSD

// edit for paired sample claim#
Function KL0TSSE()
   /* ************************************************************/
   /* *   edit and add paired sample claim number               **/
   /* *                                                         **/
   /* * 10-17-90 gdecke added statement group.                  **/
   /* ************************************************************/


  CL0TW01.CL0TWSAM = "N"; /* init. sales sample claim flag*/
  set KL0TM001.CL0TMSAM initialAttributes;
  set KL0TM001.CL0TMNBR initialAttributes;
  set KL0TM001.CL0TMCLM initialAttributes;
  if (CLAREC.CLAORIGI == "B") /* if origin is sales sample batch*/
                                   /* gener.*/
    if (CLWREC.CLWMNOPT == 4 /* get and show the sales sample claim nbr.*/
     || CLWREC.CLWMNOPT == 14
     || CLWREC.CLWMNOPT == 16
     || CLWREC.CLWMNOPT == 17)
      if (KL0TM001.CL0TMCLM == 0)
        KL0TSSC(); /* get sample claim number from comment line*/
        if (CL0TW01.CL0TWSAM == "N") /* if sample claim nbr not found*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(659);
          set KL0TM001.CL0TMCLM cursor, modified, bold;
        else
          KL0TM001.CL0TMCLM = CL0TW01.CL0TWCLM[1];
        end
      else
        if (KL0TM001.CL0TMCLM == CL0TW01.CL0TWCLM[1])
          CL0TW01.CL0TWSAM = "Y"; /* this is a good sales sample clm*/
          /* next sentence--secondary sales sample clm. nbr. not chg'd*/
        else /* if sample claim was entered and changed*/
           /* if primary and secondary sales sample claim #'s the same*/
          if (KL0TM001.CL0TMCLM == KL0TM001.CLACLMNB)
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(659);
            set KL0TM001.CL0TMCLM cursor, modified, bold;
          else
            CL0TW01.CLAGROUP = CLAREC.CLAGROUP;
            CL0TW01.OP1CUPO = CLAREC.OP1CUPO;
            CL0TW01.KUCCOID = CLAREC.KUCCOID;
            CL0TW01.KUMSTRID = CLAREC.KUMSTRID;
            set CLAREC empty;
            CLAREC.CLACLMNB = KL0TM001.CL0TMCLM;
            set SQLCA empty;
            call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE == 0)
              if (CLAREC.OP1CUPO == CL0TW01.OP1CUPO
               && CLAREC.KUCCOID == CL0TW01.KUCCOID
               && CLAREC.YCTCD == "RTS")
                if (CLAREC.KUMSTRID == CL0TW01.KUMSTRID
                 || CLAREC.CLAORIGI != "B") /* MUST HAVE ORIGIN IND='B'*/
                  converseLib.validationFailed(671); /* store number on second clm*/
                  CLXREC.CLXERRF = "Y"; /* same as primary claim*/
                  set KL0TM001.CL0TMCLM cursor, modified, bold;
                else
                  CL0TW01.CL0TWCLM[1] = KL0TM001.CL0TMCLM;
                  CLAREC.CLAGROUP = CL0TW01.CLAGROUP;
                  CL0TW01.CL0TWCLM[2] = CLAREC.CLACLMNB;
   /* if same claim #-error, if no prev cmt add, if changing*/
                   /* claim number then do delete first.*/
                  KL0TSSD(); /* delete any sales sample comments now existing*/
                  KL0TSSA(); /* add the new sales sample comments*/
                  CL0TW01.CL0TWSAM = "Y"; /* this is a good sales sample clm*/
                end
              else
                converseLib.validationFailed(671);
                                   /* po, company, clm. typ. on both claims*/
                CLXREC.CLXERRF = "Y"; /* must be the same*/
                set KL0TM001.CL0TMCLM cursor, modified, bold;
              end
            else
              if (SQLCA.VAGen_SQLCODE == 100) /* claim header line not found*/
                converseLib.validationFailed(5);
                CLXREC.CLXERRF = "Y";
                set KL0TM001.CL0TMCLM cursor, modified, bold;
              else
                TA1REC.TA1DBASE = "DCLAIM";
                TA1REC.TA1TBLVU = "VCLHDR01";
                TA1REC.TA1TBLKE = "GET SECOND SALES SAMPLE CLAIM";
                XPCL010();
              end
            end
          end
        end
      end
    else
      set KL0TM001.CL0TMSAM initialAttributes;
      set KL0TM001.CL0TMNBR initialAttributes;
      CLXREC.CLXERRF = "Y"; /* wrong menu option for sample claim*/
      converseLib.validationFailed(670);
      set KL0TM001.CL0TMCLM cursor, modified, bold;
    end
  else
    set KL0TM001.CL0TMSAM protect, invisible;
    set KL0TM001.CL0TMNBR protect, invisible;
    set KL0TM001.CL0TMCLM protect, invisible;
  end

  CLAREC.CLAGROUP = CL0TW01.CLAGROUP; /* reset clm hdr line*/

end // end KL0TSSE

// edit sales office
Function KL0TSSO()
   /* ************************************************************/
   /* edit the sales office                        4/89  **/
   /* 02-12-93  sgorga  Replaced iv0rec fields with ivbrec.    **/
   /* 10-28-94  GDECKE  REPLACE IVBREC WITH VIVHDR04.          **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "KL0TSSO"; /* set current process name*/

  if (KL0TM001.XSOCD == " ") /* if no sales office entered*/
    if (CLAREC.XSOCD == " ") /* and no claim header avail*/
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        KL0TM001.XSOCD = VIVHDR04.XSOCD; /* default from invoice*/
      else
        if (KUYREC.XSOCD != " ") /* 5/89 default from customer*/
          KL0TM001.XSOCD = KUYREC.XSOCD;
        end
      end
    else
      KL0TM001.XSOCD = CLAREC.XSOCD; /* or default from claim*/
    end
    if (KL0TM001.XSOCD == " ")
      converseLib.validationFailed(584); /* sls ofc required*/
      CLXREC.CLXERRF = "Y"; /* there is an error*/
      CLXREC.CLXTESTF = "N"; /* skip combo edit*/
      set KL0TM001.XSOCD cursor, modified, bold;
      return;
    end
  else
    if (KL0TM001.CLACLMNB != 0) /* 5/89 force to claim/order value*/
      if (KL0TM001.XSOCD == CLAREC.XSOCD)
        /* next sentence*/
      else
        converseLib.validationFailed(590); /* changed to match claim*/
        KL0TM001.XSOCD = CLAREC.XSOCD;
        CLXREC.CLXERRF = "Y"; /* there is an error*/
        CLXREC.CLXTESTF = "N"; /* skip combo edit*/
        set KL0TM001.XSOCD cursor, modified, bold;
      end
    else
      if (CLXREC.CLXORDFD == "Y"
       || CLXREC.CLXINVFD == "Y")
        if (KL0TM001.XSOCD == VIVHDR04.XSOCD)
          /* next sentence*/
        else
          converseLib.validationFailed(590); /* changed to match order*/
          KL0TM001.XSOCD = VIVHDR04.XSOCD;
          CLXREC.CLXERRF = "Y"; /* there is an error*/
          CLXREC.CLXTESTF = "N"; /* skip combo edit*/
          set KL0TM001.XSOCD cursor, modified, bold;
        end
      end
    end
  end

  if (KL0TM001.XSOCD in XSOTBL.XSOCD /* if sales office valid*/
   && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    KL0TM001.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(257); /* invalid sales office*/
    set KL0TM001.XSOCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y"; /* screen validation failed*/
    CLXREC.CLXTESTF = "N"; /* skip combo edit*/
  end
end // end KL0TSSO

//*** RECORD=CL0TW01 ****
//   when    by     why
// 04-18-89 bcourt add xotcd (derived from base order type,
//                 division, sales office & G.P.C. in cl0t126.
//                 Add XOPCD to use in cl0t126 edit = cl0es68.
// 05-23-89 bcourt add CL0TWCMB, see CL0T prologue.
// 06-20-89 bcourt add message when clm header invoice ne CLIVX
// 12-02-92 lgross add cl0tw-upd-fl
// 03-26-93 sgorga Add packlist warning flag: cl0tw-pl-warn-fl.
// 08-13-93 jcarey Database structure change.
// 11-12-93 GDECKE Database structure change: KUCGRP,IV0GROUP
// 03-11-94 BCourt Database structure change: KUCGRP length.
//                 Rename CLFREC.xxxaddrn to xxx-addrn to match
//                 DCLgen.
// 10-21-94 sgorga DB2 chgs:  IV0GROUP length increased.
// ***********************
Record CL0TW01 type basicRecord
  5 CL0TW01G CL0TW01G ; 
    10 CL0TWMRN CL0TWMRN ; 
    10 CL0TWACT CL0TWACT ; 
    10 CL0TWTPE CL0TWTPE ; 
    10 CL0TWCNV CL0TWCNV ; 
    10 CL0TWSFC CL0TWSFC ; 
    10 CL0TWRAE CL0TWRAE ; 
    10 CL0TWEGC CL0TWEGC ; 
    10 CL0TWUTR CL0TWUTR ; 
    10 CL0TWVRF CL0TWVRF ; 
    10 CL0TWCWF CL0TWCWF ; 
    10 CL0TWRXF CL0TWRXF ; 
    10 CL0TWDDF CL0TWDDF ; 
    10 CL0TWGXF CL0TWGXF ; 
    10 CL0TWFWF CL0TWFWF ; 
    10 CL0TWSWF CL0TWSWF ; 
    10 CL0TWPWF CL0TWPWF ; 
    10 CL0TW-PL-WARN-FL CL0TW-PL-WARN-FL ; 
    10 CL0TWACF CL0TWACF ; 
    10 CLLNBRCV CLLNBRCV ; 
    10 CL0TMFDT CL0TMFDT ; 
    10 CL0TMLDT CL0TMLDT ; 
    10 CL0TMTC1 CL0TMTC1 ; 
    10 CL0TMTC2 CL0TMTC2 ; 
    10 CL0TMTC3 CL0TMTC3 ; 
    10 XDSWHSEF XDSWHSEF ; 
    10 CL0TMCLN CL0TMCLN ; 
      15 CLD3NM CLD3NM ; 
      15 CLD7NM CLD7NM ; 
    10 CL0TWCJD CL0TWCJD ; 
    10 CL0TWNCN CL0TWNCN ; 
      15 CL0TWCCN CL0TWCCN ; 
    10 CL0TWPIN CL0TWPIN ; 
    10 XXXUSRID XXXUSRID ; 
    10 CL0TWFNC CL0TWFNC ; 
    10 YMOKEY YMOKEY ; 
      15 CLWMNOPT CLWMNOPT ; 
      15 YCTCD YCTCD ; 
    10 CL0TWSIA CL0TWSIA ; 
    10 CL0TWFLO CL0TWFLO ; 
    10 CL0TWDON CL0TWDON ; 
    10 CL0TWSCB CL0TWSCB ; 
    10 CL0TWSMF CL0TWSMF ; 
    10 CL0TWOEF CL0TWOEF ; 
    10 CL0TWCEF CL0TWCEF ; 
    10 CL0TWCNF CL0TWCNF ; 
    10 CL0TWUOK CL0TWUOK ; 
    10 CL0TWCNT CL0TWCNT ; 
    10 YCSCD YCSCD ; 
    10 CL0TWIEF CL0TWIEF ; 
    10 IV0IVCID IV0IVCID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 CLBSRIND CLBSRIND ; 
    10 CLFGROUP CLFGROUP ; 
      15 CLACLMNB CLACLMNB ; 
      15 CLFADTYP CLFADTYP ; 
      15 CLFADNM CLFADNM ; 
      15 XXX-ADDR1 XXX-ADDR1 ; 
      15 XXX-ADDR2 XXX-ADDR2 ; 
      15 XXX-ADDR3 XXX-ADDR3 ; 
      15 XXXCITY XXXCITY ; 
      15 XSTCD XSTCD ; 
      15 XXXZIP XXXZIP ; 
      15 XCTCD XCTCD ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 KUYREPNM KUYREPNM ; 
    10 KUCGRPID KUCGRPID ; 
    10 CL0TWNBR CL0TWNBR ; 
    10 IV0GROUP IV0GROUP ; 
    10 KUCGRP KUCGRP [2] ; 
    10 CLLGROUP CLLGROUP ; 
    10 CLLRTNNB CLLRTNNB ; 
    10 CL0TWCHI CL0TWCHI ; 
    10 CL0TWHCN CL0TWHCN ; 
    10 XOTCD XOTCD ; 
    10 XOPCD XOPCD ; 
    10 CL0TWCMB CL0TWCMB ; 
    10 CL0TWHVI CL0TWHVI ; 
    10 CL0TWMSG CL0TWMSG ; 
      15 CL0TWMOD CL0TWMOD ; 
      15 CL0TWNCL CL0TWNCL ; 
      15 CL0TWMS1 CL0TWMS1 ; 
      15 CL0TWCIV CL0TWCIV ; 
      15 CL0TWMS2 CL0TWMS2 ; 
      15 CL0TWIIV CL0TWIIV ; 
    10 XLECD XLECD ; 
    10 CL0TWYIT CL0TWYIT ; 
    10 CL0TWSAM CL0TWSAM ; 
    10 OP1CUPO OP1CUPO ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 CLAGROUP CLAGROUP ; 
    10 CLGCOMNT CLGCOMNT [3] ; 
      15 CL0TWCLM CL0TWCLM ; 
      15 * char(51) ; 
    10 CL0TWCON CL0TWCON ; 
    10 CL0TW-RPS-NBR-FOUND-FL CL0TW-RPS-NBR-FOUND-FL ; 
    10 CL0TW-DEADLOCK-COUNT CL0TW-DEADLOCK-COUNT ; 
    10 CL0TW-DEADLOCK-FLAG CL0TW-DEADLOCK-FLAG ; 
    10 CLLRTDSP CLLRTDSP ; 
    10 CL0TW-UPD-FL CL0TW-UPD-FL ; 
end // end CL0TW01

//*** RECORD=CL0TW02 ****
// ==== >   copy of CLAREC.   <=====
// used in CL0T139 to hold updated version of clarec, while
// the actual row is selected, compared to new row, then
// the decision is made to delete and add the new row, or
// just to skip the update.
// 
// *******************  Claim Header Table  *******************
// 
// DB2 Table:           DCLAIM.VCLHDR01
// 
// Copylib Member:      DCL00203
// 
// I/O Mod:             IO1160
// 
// Key to DB2 Table:    CLACLMNB
// 
// Date Created:        03/01/87
// 
// Maintenance Log:
//   Date    Init.   Comment
// --------  -----   ---------------------------------------
// 03-01-87   PAG    Initial record creation
// 07-20-88  bcourt  add ycs-clm-stat-cd2,
//                       cl-curr-rtn-nbr,
//                       cl-curr-insp-nbr,
//                   chg ycs-clm-stat-cd to ycs-clm-stat-cd1
//                   drop cl-clm-lock-fl.
// 08-31-88  bcourt  add CL_WRKSHT_ENTR_FL,
//                       CL_CLXCP_IND
// 03-23-89  bcourt  add XOB-BADE-OT-CD, XDV-DIV-CD,CL-ORIG-IND
//                   drop YCE-XCEP-CD1 through CD8.
// 05-15-89  bcourt  rename XCUCD3 to XCUCD.
// 08-08-89  bcourt  rename CLACOOPF to CLAAUTHF.
// 10-12-90 bcourt  rename XCGCD to OP1COGID.
// 01-08-91 sgorga  rename KUABLID to KUCBLAID.
//  2-15-91 bcourt  rename XCUCD to XCECD and chng size 4 to 2.
//                  rename CLAXOPNF to CLAXCIND.
//  4-17-92 bcourt  Rename CLACMIND to CL-CLCOM-FL.
// 06-12-92 sgorga  DB2 chgs.  Renamed CLATBYID to CL-TAKEN-BY-
//                  ID.  And, chgd to character field, 8 bytes.
// ***********************
Record CL0TW02 type basicRecord
  5 CLAGROUP CLAGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CUPO OP1CUPO ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 YCTCD YCTCD ; 
    10 CLAPRYCT CLAPRYCT ; 
    10 CLACAIND CLACAIND ; 
    10 YCSCD1 YCSCD1 ; 
      15 YCSCD YCSCD ; 
    10 YCSCD2 YCSCD2 ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLASTTDT CLASTTDT ; 
    10 CLASCGBY CLASCGBY ; 
    10 CLASETDT CLASETDT ; 
    10 YCRCD YCRCD ; 
    10 XIECD XIECD ; 
    10 XSOCD XSOCD ; 
    10 CLADNLFL CLADNLFL ; 
    10 CLADNLDT CLADNLDT ; 
    10 CLACTCNM CLACTCNM ; 
    10 CLACCLDT CLACCLDT ; 
    10 CLAOCAMT CLAOCAMT ; 
    10 CLAOCQTY CLAOCQTY ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLATQTY CLATQTY ; 
    10 CLABLGFF CLABLGFF ; 
    10 KUCBLAID KUCBLAID ; 
    10 CLASHPFF CLASHPFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 CLARTNFF CLARTNFF ; 
    10 CL-TAKEN-BY-ID CL-TAKEN-BY-ID ; 
    10 CLYATHID CLYATHID ; 
    10 CLAPRATH CLAPRATH ; 
    10 CLAAUTHF CLAAUTHF ; 
    10 XCECD XCECD ; 
    10 KUYSVRID KUYSVRID ; 
    10 YCPCD YCPCD ; 
    10 XWHCD XWHCD ; 
    10 XPTCD XPTCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 SP1ID SP1ID ; 
    10 XOCCD XOCCD ; 
    10 CLACSQNB CLACSQNB ; 
    10 CLACRTNB CLACRTNB ; 
    10 CLACISNB CLACISNB ; 
    10 CLAWSENF CLAWSENF ; 
    10 CLAORIGI CLAORIGI ; 
    10 CLADBOCL CLADBOCL ; 
    10 YITCD YITCD ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
    10 CLAXCIND CLAXCIND ; 
    10 CLAMEIND CLAMEIND ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CLATFIND CLATFIND ; 
    10 CLACNIND CLACNIND ; 
    10 CLADJIND CLADJIND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0TW02

//*** RECORD=CL0TW03 ****
// ************************************************************
// *                    CL0EW03                               *
// *                    -------                               *
// *                                                          *
// *                                                          *
// *   This working-storage record record is used to store    *
// *   items that are use in determining whether fields       *
// *   that require expansions (code descriptions, rep        *
// *   names, etc) have been changed.                         *
// *                                                          *
// *                                                          *
// ************************************************************
// ***********************
Record CL0TW03 type basicRecord
  5 CL0TW3GP CL0TW3GP ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 CLLWRDT CLLWRDT ; 
    10 CL0TMRDT CL0TMRDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF1ABRV TF1ABRV ; 
    10 CL0TMLCN CL0TMLCN ; 
end // end CL0TW03

//*** RECORD=CL0TW05 ****
// 4/89  see cl0t112 and cl0t117 and cl0t121 -
// 
// this is used to compare last to next map, field by field,
// to see if map needs editing.
// 
//  when     by      why
//  10-12-90 bcourt  change XCGCD to OP1COGID.
//  03-12-93 sgorga  Added pack list nbr to record.
// 
// ***********************
Record CL0TW05 type basicRecord
  5 CL0TW5GR CL0TW5GR ; 
    10 XWHCD XWHCD ; 
    10 CL0TMRDT CL0TMRDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 TF2PRONO TF2PRONO ; 
    10 CL-PPD-COLL-IND CL-PPD-COLL-IND ; 
    10 CLLPDCCG CLLPDCCG ; 
    10 CLACLMNB CLACLMNB ; 
    10 CLLRTNNB CLLRTNNB ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 CL0TMCLN CL0TMCLN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
    10 CLLNBRCV CLLNBRCV ; 
    10 XGPCD XGPCD ; 
    10 YCTCD YCTCD ; 
    10 YCRCD YCRCD ; 
    10 XDVCD XDVCD ; 
    10 XOBCD XOBCD ; 
    10 XSOCD XSOCD ; 
    10 CLLRTDSP CLLRTDSP ; 
    10 CLFADNM CLFADNM ; 
    10 XXXADDR1 XXXADDR1 ; 
    10 XXXADDR2 XXXADDR2 ; 
    10 XXXADDR3 XXXADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XLECD XLECD ; 
    10 XBCCD XBCCD ; 
    10 OP1COGID OP1COGID ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 CL-RPS-STAT-ID CL-RPS-STAT-ID ; 
end // end CL0TW05

//*** RECORD=CL0TW06 ****
// this working storage record is -- company rec (KUCREC)
// it contains cu-comp-co-id data for editing
// of the customer data base.
// 
// date created:     8/10/90  chellm
// maintanence log:
//   who       when     why
// --------- --------  ---------------------------------------
// 10-12-90  bcourt    db2 structure changes
// 02-15-91  bcourt    db2 structure changes see kucrec.
// 06-11-91  twatso    db2 structure changes see kucrec.
// 03-13-92  bcourt    db2 structure changes see kucrec.
// 06-12-92  sgorga    DB2 Chgs. Added ycu-crtn-use-cd.
//                     Renamed kuceom to cu-bill-ind.
//                     Renamed kucpdind to cu-po-dt-fl.
// 08-13-93  jcarey    Database structure change.
// 11-12-93  GDECKE    Database structure change.
// 03-11-94  BCourt    Database structure change.
// ***********************
Record CL0TW06 type basicRecord
  5 KUCGRP KUCGRP ; 
    10 KUCCOID KUCCOID ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCGRPID KUCGRPID ; 
    10 KUCCOIDN KUCCOIDN ; 
    10 KUCCONM KUCCONM ; 
    10 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
    10 KUCCOANM KUCCOANM ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KUCPHN KUCPHN ; 
    10 XLECD XLECD ; 
    10 XCTCD XCTCD ; 
    10 KUCCNTCT KUCCNTCT ; 
    10 KUCCOBDT KUCCOBDT ; 
    10 KUCFINDT KUCFINDT ; 
    10 KUCSSCNT KUCSSCNT ; 
    10 KUCNSCNT KUCNSCNT ; 
    10 KUCMSTID KUCMSTID ; 
    10 KUCMADID KUCMADID ; 
    10 XLGCD XLGCD ; 
    10 XCRCD XCRCD ; 
    10 XCUCD XCUCD [2] ; 
    10 XCECD XCECD ; 
    10 XAUCD XAUCD ; 
    10 YCH-CHNL-CLS-CD YCH-CHNL-CLS-CD ; 
    10 YCPCD YCPCD ; 
    10 KUCCOLCD KUCCOLCD ; 
    10 KUCBPIND KUCBPIND ; 
    10 KUCLBOFL KUCLBOFL ; 
    10 KUCIDIND KUCIDIND ; 
    10 XIECD XIECD ; 
    10 CU-PRT-XREF-FL CU-PRT-XREF-FL ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUCATCSH KUCATCSH ; 
    10 KUCCSHNF KUCCSHNF ; 
    10 KUCPOFL KUCPOFL ; 
    10 KUCYPOFT KUCYPOFT ; 
    10 KUCYPOAP KUCYPOAP ; 
    10 KUCWHSFL KUCWHSFL ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 KUCSTMT KUCSTMT ; 
    10 YVICD YVICD [3] ; 
    10 YLICD YLICD ; 
    10 KUCXCSFL KUCXCSFL ; 
    10 KUCINSPD KUCINSPD ; 
    10 KUCFRTPD KUCFRTPD ; 
    10 KUCALERT KUCALERT ; 
    10 KUCMAGCT KUCMAGCT ; 
    10 KUCCNSCD KUCCNSCD ; 
    10 KUCPSFL KUCPSFL ; 
    10 CU-CR-APPL-DT CU-CR-APPL-DT ; 
    10 KUCCRLEF KUCCRLEF ; 
    10 KUCCRLEX KUCCRLEX ; 
    10 KUCCRLIN KUCCRLIN ; 
    10 KUCASMT KUCASMT ; 
    10 XCCCD XCCCD ; 
    10 KUCCSTDT KUCCSTDT ; 
    10 XCACD XCACD ; 
    10 KUCACYNR KUCACYNR ; 
    10 KUCACYDT KUCACYDT ; 
    10 KUCAPDEX KUCAPDEX ; 
    10 KUCACYRT KUCACYRT ; 
    10 KUCPRVRT KUCPRVRT ; 
    10 KUCLVIND KUCLVIND ; 
    10 CU-LST-DAB-RPT-DT CU-LST-DAB-RPT-DT ; 
    10 KUCLCEDT KUCLCEDT ; 
    10 KUCLCXDT KUCLCXDT ; 
    10 KUCLCAMT KUCLCAMT ; 
    10 KUCJSRFL KUCJSRFL ; 
    10 KUCRAUTH KUCRAUTH ; 
    10 CU-BILL-IND CU-BILL-IND ; 
    10 CU-PO-DT-FL CU-PO-DT-FL ; 
    10 KUCECODY KUCECODY ; 
    10 KUCPDSPD KUCPDSPD ; 
    10 XLBCD XLBCD ; 
    10 CU-HANG-DFLT-FL CU-HANG-DFLT-FL ; 
    10 KUCSTYNT KUCSTYNT ; 
    10 CU-MAX-FTWR-YNT-CD CU-MAX-FTWR-YNT-CD ; 
    10 CU-MAX-APRL-YNT-CD CU-MAX-APRL-YNT-CD ; 
    10 YCU-CRTN-USE-CD YCU-CRTN-USE-CD ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 CU-PL-STYNM-PRT-FL CU-PL-STYNM-PRT-FL ; 
    10 CU-DOC-BY-ORD-FL CU-DOC-BY-ORD-FL ; 
    10 KUCFTRTI KUCFTRTI ; 
    10 KUCPRPTI KUCPRPTI ; 
    10 XOPCD XOPCD [4] ; 
    10 KUCAPRDT KUCAPRDT ; 
    10 KUCFPRDT KUCFPRDT ; 
    10 KUCSBKFL KUCSBKFL ; 
    10 KUCCOMNT KUCCOMNT ; 
    10 KUCSKIND KUCSKIND ; 
    10 CU-CUSKU-SZ-FL CU-CUSKU-SZ-FL ; 
    10 CU-EDI-CUST-IND CU-EDI-CUST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 CU-CO-SELF-NBR CU-CO-SELF-NBR ; 
    10 CU-VEND-NBR CU-VEND-NBR ; 
    10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0TW06

//*** RECORD=CL0TW08 ****
// find if completed claims exist for a given invoice and
// any authorized returns exist (ycs equal
// cmp,roa,rpa,rpi,rpm,xra)
// ;
// find if any rfl or rts claims exist for a given invoice
// ;*=========================================================*
// ;*      M A I N T E N A N C E     H I S T O R Y            *
// ;*---------------------------------------------------------*
// ;* CHNG#   DATE    PGMR    DESCRIPTION                     *
// ;*---------------------------------------------------------*
// ;* CL0    11/22/91 GDECKE  ADDED CLASTTDT,YCRCD,YCTCD.     *
// ;*=========================================================*
// ***********************
Record CL0TW08 type basicRecord
  5 CL0TW8GP CL0TW8GP ; 
    10 CL0TWSQL CL0TWSQL ; 
    10 YCSCD YCSCD [9] ; 
    10 CLACLMNB CLACLMNB ; 
    10 IV0IVCID IV0IVCID ; 
    10 IV0PARTN IV0PARTN ; 
    10 YITCD YITCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 CL0TWCN1 CL0TWCN1 ; 
    10 CL0TWRTN CL0TWRTN ; 
    10 CLASTTDT CLASTTDT ; 
    10 YCRCD YCRCD ; 
    10 YCTCD YCTCD ; 
end // end CL0TW08

//*** RECORD=CL0TW09 ****
// ************************************************************
// *   this record keeps track of whether or not each field
// *   on the screen has an error and, if so, what the error
// *   message number is.  this is necessary due to the comp-
// *   licated editing routine which disallows the bottom-right
// *   to top-left normal editing.   the buckets in the array
// *   correspond to screen fields; top-left being number 1
// *   and bottom-right being the last-used field in the array.
// *   Be careful when adding/changing screen fields as it
// *   may alter which bucket goes with which field.
// *       where
// * index  set   field edited
// *   1 cl0ts30  warehouse
// *   2 cl0ts31  received date
// *   3 cl0ts32  carrier code
// *   4 cl0ts34  pro number
// *   5 cl0ts35  prepaid/collect flag
// *   6 cl0ts36  freight charge
// *  12 cl0ts39  customer number
// *
// ************************************************************
// ***********************
Record CL0TW09 type basicRecord
  5 CL0TW9GP CL0TW9GP ; 
    10 CL0TWIND CL0TWIND [50] ; 
    10 CL0TWMNO CL0TWMNO [50] ; 
end // end CL0TW09

// ws consumer last name
DataItem CL0TMCLN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first rtn receipt date
DataItem CL0TMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, dateFormat = "MM-dd-yy", inputRequired = no
}
end

// cl-clm-nbr
DataItem CL0TMLCN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last rtn receipt date
DataItem CL0TMLDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, dateFormat = "MM-dd-yy", inputRequired = no
}
end

// formated whse receipt date
DataItem CL0TMRDT char(8)  {
  align = right, fillCharacter = " ", dateFormat = "MM-dd-yy", 
  inputRequired = no
}
end

// total cartons for warehouse
DataItem CL0TMTC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total cartons for carrier/whse
DataItem CL0TMTC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total cartons for claim
DataItem CL0TMTC3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 DEADLOCK COUNT (-811)
DataItem CL0TW-DEADLOCK-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 DEADLOCK FLAG (-811)
DataItem CL0TW-DEADLOCK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack list warning display flag
DataItem CL0TW-PL-WARN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RPS LABEL NUMBER FOUND FLAG
DataItem CL0TW-RPS-NBR-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0TW-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem CL0TW01G char(1771)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of cl0ew03 record
DataItem CL0TW3GP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0TW5GR char(258)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0tw08 record group level
DataItem CL0TW8GP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0tw09 record group level
DataItem CL0TW9GP char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address text was changed
DataItem CL0TWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0t activity flag (a/c/i)
DataItem CL0TWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character-format claim number
DataItem CL0TWCCN char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer-nbr-entered-flag
DataItem CL0TWCEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chged invc, force new ord type
DataItem CL0TWCHI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CLAREC.IV0IVCID
DataItem CL0TWCIV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current julian date
DataItem CL0TWCJD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim number
DataItem CL0TWCLM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// combination edit error flag
DataItem CL0TWCMB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for db item
DataItem CL0TWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new claim-nbr-ok flag
DataItem CL0TWCNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working counter
DataItem CL0TWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim-number-is-valid flag
DataItem CL0TWCNV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust. nbr. from conv. tbl.fl.
DataItem CL0TWCON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rfl/rts clms exist warning flg
DataItem CL0TWCWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Can disp default (Y/N)
DataItem CL0TWDDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// done-flag
DataItem CL0TWDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error-getting-customer flag
DataItem CL0TWEGC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flow-to-next-appl-flag
DataItem CL0TWFLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested function
DataItem CL0TWFNC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freight warning displayed flag
DataItem CL0TWFWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC/Warehouse mismatch warn
DataItem CL0TWGXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold claim # for address dup.
DataItem CL0TWHCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// have primary invoice, ck mesg
DataItem CL0TWHVI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice-entered-flag
DataItem CL0TWIEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CLBREC.IV0IVCID
DataItem CL0TWIIV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0t indicator
DataItem CL0TWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message number
DataItem CL0TWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'ordmod,'
DataItem CL0TWMOD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max existing return number
DataItem CL0TWMRN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'hd ivc='
DataItem CL0TWMS1 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ',pmy='
DataItem CL0TWMS2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message:
DataItem CL0TWMSG char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working number
DataItem CL0TWNBR num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'nclm,'
DataItem CL0TWNCL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric-format claim number
DataItem CL0TWNCN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order-entered-flag
DataItem CL0TWOEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// primary invoice number
DataItem CL0TWPIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pro # warning displayed flag
DataItem CL0TWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rtn auth exists flag
DataItem CL0TWRAE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return flag
DataItem CL0TWRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// authorization expired warning
DataItem CL0TWRXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales sample claim flag
DataItem CL0TWSAM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// status-chngd-back-to-open flag
DataItem CL0TWSCB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-fields-changed flag
DataItem CL0TWSFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stay-in-this-application flag
DataItem CL0TWSIA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen-was-modified flag
DataItem CL0TWSMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql selection
DataItem CL0TWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales sample menu opt warning
DataItem CL0TWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// transp. pro-number exists flag
DataItem CL0TWTPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update-went-ok-flag
DataItem CL0TWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update-this-return flag
DataItem CL0TWUTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid claim reason flag (y/n)
DataItem CL0TWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank ivc brand is okay='y'
DataItem CL0TWYIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

