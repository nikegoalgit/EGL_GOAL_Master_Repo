package kl0i;

import corpcom1.*;
import corpcom2.XQWREC;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDSTBL;
import corpx1.XGPTBL;
import corpx1.XWHTBL;
import corpx2.XXXUSRID;
import corpy2.YATTBL;
import corpy2.YCRTBL;
import corpy2.YCSACTCD;
import corpy2.YCSCD1;
import corpy2.YCSRPTEX;
import corpy2.YCSTBL;
import corpy2.YCTTBL;
import corpy2.YPSCD;
import corpy2.YPSTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import fy.common.FY1REC;
import iv.common.IV5REC;
import iv.common.IV6REC;
import iv.common.IV9REC;
import iv.common.IVAREC;
import ku.common.KUCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import tf.common.TF1REC;
import tf.common.TF2PRONO;
//*** PROGRAM=KL0I ****
// MAINTENANCE LOG:
//   DAY     BY      WHY
// --------  ------  ------------------------------------------
// 01-31-89  JWOOD   ADDED NONCPS OPTION TO CALLS
// 01-31-89  JWOOD   ADDED XSSEGTR LOGIC
// 05-19-89  bcourt  DB2 structure changes: CLAREC, KUCREC,
//                   XGPTBL, XWHTBL, IVAREC.
// 09-26-89  chellm  added to map field, xxxusrid. this will be
//                   the 'status changed by' user id and will
//                   updated in clerec whenever the status
//                   changes.
// 11-15-89  gdecke  change color on status date literal of map
//                   regen applic for db2 table changes.
// 01-19-90  gdecke  DB2 structure changes for january.
// 02-22-90  chellm  Replaced DWPROD.VFCTY001 with DFCTY.
//                   VFCTY001. Renamed all PD1.. items to FY1..
//                   Replaced IO0870 with IO2810.
// 08-08-91  wjohns  Renamed application and commarea
//                     referrences to renamed claims appls.
// 09-18-91  ahowar  Renamed proc and sgrp from "cl" to "kl".
// 01-13-92  sgorga  set ta1rec emtpy. kl0is99, 001.
// 02-28-98  rgilli  Y2K MODIFICATIONS MADE TO:
//                   Re-generate to include new version of
//                   xpcl004.
// *********************
Program KL0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0IW01 CL0IW01; // record
  CL0IW02 CL0IW02; // record
  CL1REC CL1REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLEREC CLEREC; // record
  CLFREC CLFREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  IV5REC IV5REC; // record
  IV6REC IV6REC; // record
  IV9REC IV9REC; // record
  IVAREC IVAREC; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF1REC TF1REC; // record
  XQWREC XQWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDSTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YPSTBL {deleteAfterUse = yes}; // table
  use KL0IM.KL0IM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0I000: KL0I000();
     /* ************************************************************/
     /* *       FLOW FOR PROCESS CL0I1000                         **/
     /* *                                                         **/
     /* *                                                         **/
     /* *                                                         **/
     /* *                                                         **/
     /* *                                                         **/
     /* ************************************************************/
    ;
    ;
    KL0I001: KL0I001();
    KL0I050: KL0I050();
    KL0I100: KL0I100();
    KL0I101: KL0I101();
    KL0I110: KL0I110();
    KL0I120: KL0I120();
    KL0I130: KL0I130();
    KL0I140: KL0I140();
  end // end main
end // end KL0I

// application main logic
Function KL0I000()
   /* *************************************************************/
   /* *   this is the 'main logic' for the application.          **/
   /* *                                                          **/
   /* *   xsentry checks to ensure that this application was     **/
   /* *       entered from another csp application.              **/
   /* *   xclentry checks to ensure that the claim header has    **/
   /* *       has been flagged as "in use" if this application   **/
   /* *       is  doing updates.                                 **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  COMMAREA.CACURRAP = "KL0I";
  ;
  ;
  KL0I001(); /* initialize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
   /* WHILE CLXREC.CLXEOAFL = 'N'  while not end-of-application*/
  KL0I050(); /* process the application screen*/
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit the application*/
                                   /* using claims exit module*/
  ;
  ;
end // end KL0I000

// initailize application
Function KL0I001()
   /* *************************************************************/
   /* *     INITIALIZE APPLICATION FOR TRAFFIC SCREEN PROCESSING **/
   /* *************************************************************/
   /* MAINTENANCE HISTORY                                  **/
   /* 01/13/92  sgorga  Set ta1rec empty.                        **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I001"; /* set current procces name*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  set SQLCA empty; /* clear out*/
  ;
   /* TEMP001;*/
  ;
  XSENTRY(); /* check entry through main menu*/
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  XPCL011(); /* claims entry module*/
  ;
  ;
  set CLBREC empty; /* clear 'clbrec'*/
  set CLEREC empty; /* clear 'clbrec'*/
  set CLFREC empty; /* clear 'clbrec'*/
  set KUCREC empty; /* clear 'kucrec'*/
  set IVAREC empty; /* clear 'ivarec'*/
  set CLXREC empty; /* clear 'common' working storage*/
  set CL0IW01 empty; /* clear storage for cl0i*/
  set TA1REC empty; /* clear out*/
  set TA2REC empty; /* clear out*/
  ;
   /* *************************/
  ;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0I001";
    XPCL010(); /* abend*/
  end
  ;
  ;
   /* *************************/
     /* move date to map then save it for database updates/adds*/
  KL0IM001.XXXCURDT = VGVar.currentShortGregorianDate;
  CLXREC.XXXFLYY = CLXREC.XXXCYY;
  CLXREC.XXXSEP5 = "-";
  CLXREC.XXXFLMM = CLXREC.XXXCMM;
  CLXREC.XXXSEP6 = "-";
  CL0IW01.CL0IWCYM = CLXREC.XXXCDTE;
  CLXREC.XXXFLDD = CLXREC.XXXCDD;
  CL0IW01.CL0IWZZD = CLXREC.XXXFLDT;
  ;
  CLXREC.CLXCSCRN = "KL0IM001"; /* set first screen name*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set need to build-screen to yes*/
  ;
  KL0IS01(); /* check security*/
  ;
  ;
  ;
end // end KL0I001

// branch control process
Function KL0I050()
   /* *************************************************************/
   /* *    PROCESS THE APPLICATION SCREENS                       **/
   /* *  NOTE THAT THIS PROCESS IS BEING PERFORMED IN A          **/
   /* *  'DO WHILE LOOP" UNTIL THE END_OF_APPLICATION SWITCH IS  **/
   /* *  RESET TO "Y".                                           **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I050"; /* set current process name*/
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end of screen flag to 'no'*/
  ;
  while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
    KL0I100(); /* process screen cl0im001*/
  end
  ;
    /* at this point--*/
      /* if the end-of-application flag (clxeoafl) = 'n'*/
        /* we go back to the top of cl0i050*/
      /* otherwise*/
        /* if the end-of-application flag (clxeoafl) = 'y'*/
        /* we return to cl0i050*/
  ;
  ;
  ;
  ;
end // end KL0I050

// build screen control module
Function KL0I100()
   /* *************************************************************/
   /* *            PROCESS SCREEN CL0Im001                       **/
   /* *                                                          **/
   /* *   note that this process is being performed in a         **/
   /* *   'while loop' from cl0h050 until the end-of-screen      **/
   /* *   flag (elxeosfl) is set to 'y'.                         **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I100"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (CLXREC.CLXBLDSC == "Y") /* screen has no data in its body*/
      if (CLXREC.CLXERRF != "Y")
        set KL0IM001 initial;
        KL0IM001.XXXCURDT = VGVar.currentShortGregorianDate;
        KL0I101(); /* build traffic screen*/
      end
    end
  end
  ;
  KL0IS50(); /* check security for map fields*/
  ;
  ;
   /* **********************************************************/
  converse KL0IM001 ;
   /* **********************************************************/
  ;
   /* *************************************************************/
   /* *   currently only display fields are showing on the map.*/
   /* *   there are no edits/changes/adds.  these fields will be*/
   /* *   incorporated later, so the code was left in.*/
   /* *   the map displays data, then follows the flow.*/
   /* **/
   /* *************************************************************/
  CLXREC.CLXERRF = "N"; /* reset error flag*/
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  ;
  if (KL0IM001 is modified) /* if there were entries*/
    CLXREC.CLXEDITF = "Y"; /* then set do-edits flag to 'yes'*/
  else
    CLXREC.CLXEDITF = "N"; /* if no entries, then no edits*/
  end
  ;
  KL0I110(); /* handle any special entries*/
         /* may exit appl from this process*/
  ;
  if (CLXREC.CLXERRF == "Y") /* if function key error*/
    KL0IS60(); /* set modified fields modified*/
    return; /* we don't continue*/
  end
  ;
   /* *************************************************************/
      /* do edits starting with last field on screen, and finish*/
      /* with first one. this places cursor on the first error on*/
      /* traffic screen.*/
   /* *************************************************************/
  ;
  if (CLXREC.CLXEDITF == "Y" /* if edits are needed*/
   && CLWREC.CLWACTIV != "I") /* and not inquiry mode*/
    KL0I120(); /* process traffic screen entry*/
    CL0IW02.CLEGROUP = CLEREC.CLEGROUP;
  end
  ;
  ;
  if (converseVar.eventKey not pf12)
    if (CLXREC.CLXEDITF == "Y" /* if edits are needed*/
     && CLXREC.CLXERRF == "N"  /* if there were no errors in the edit*/
     && CLWREC.CLWACTIV != "I") /* and not inquiry mode*/
      KL0I130(); /* add or change traffic table line*/
      CLXREC.CLXEDITF = "N";
    end
  end
  ;
  ;
   /* *************************************************************/
    /* flow of program*/
   /* *************************************************************/
  if (CLXREC.CLXEDITF == "N" /* if edits are needed*/
   && CLXREC.CLXERRF == "N") /* IF THERE WERE NO ERRORS IN THE EDIT*/
    KL0I140(); /* follow flow of program*/
  end
  ;
  if (converseVar.eventKey is pf12)
    if (CLXREC.CLXERRF == "N")
      converseLib.validationFailed(340);
      CLXREC.CLXERRF = "Y";
      KL0IS60(); /* set fields modified*/
    end
  end
  ;
    /* at this point:*/
       /* if the end-of-screen flag (clxeosfl) is 'n'*/
         /* go back to top of process cl0i100.*/
       /* if the end-of-screen flag (clxeosfl) is 'y'*/
         /* return to process cl0i050.*/
  ;
  ;
end // end KL0I100

// build traffic screen display
Function KL0I101()
   /* *************************************************************/
   /* *            build traffic screen (cl0im001)               **/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
   /* **/
  CLXREC.CLXCPROC = "CL0I101"; /* set current process name*/
   /* **/
  ;
  ;
   /* *************************************************************/
   /* **/
   /* *   The claim #, cust #, gpc, claim type, claim reason and*/
   /* *   contact will come directly from here. look up gpc, claim*/
   /* *   type, and claim reason descriptions from the xgp, yct*/
   /* *   and ycr tables respectively.*/
   /* *   if the company name is already present on clarec then*/
   /* *   move is to the screen. Otherwise,obtain name from kucrec*/
   /* *************************************************************/
  ;
  KL0IM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0IM001.CLACTCNM = CLAREC.CLACTCNM;
  KL0IM001.KUCCOID = CLAREC.KUCCOID;
  KL0IM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0IM001.XNXCD = CLAREC.XNXCD;
  KL0IM001.XGPCD = CLAREC.XGPCD;
  KL0IM001.YCTCD = CLAREC.YCTCD;
  KL0IM001.YCRCD = CLAREC.YCRCD;
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* get gpc abbreviation*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0IM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    KL0IM001.XGPABRV = " ";
  end
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* get yct code abbreviation*/
   && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0IM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  else
    KL0IM001.YCTABRV = " ";
  end
  ;
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD /* get ycr code abbreviation*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0IM001.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
  else
    KL0IM001.YCRSDESC = " ";
  end
  ;
  ;
  if (CLWREC.KUCCONM != " ") /* if company name is present*/
    KL0IM001.KUCCONM = CLWREC.KUCCONM; /* use it*/
  else
    KUCREC.KUCCOID = CLAREC.KUCCOID; /* load key*/
    KL0I900(); /* read company table to get name*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if co. table found use co name*/
      KL0IM001.KUCCONM = KUCREC.KUCCONM;
    end
  end
  ;
  ;
  ;
   /* *************************************************************/
   /* *   look up the ship to address record using the cl-shgrp-*/
   /* *   from-fl value to determine what address record to use*/
   /* *   for the name and city-state. If cl-shgrp-from-fl = 'I'*/
   /* *   look up address on invoice address table vivadr01 using*/
   /* *   ship-to address fields. If cl-shgrp-from-fl = 'c' or 'e'*/
   /* *   look up address on claim address table with cl-addr-typ*/
   /* *   -cd of 's'. (vcladr01)*/
   /* **/
   /* *************************************************************/
  ;
  ;
   /* find invoice number to go with this claim. only found*/
   /* on clbrec.*/
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "Y";
  KL0I910(); /* select scan 3*/
  ;
  KL0I911(); /* select next record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* MOVE 140 TO EZEMNO        ; warning no invoice number found*/
      CLBREC.IV0IVCID = 0;
      CLBREC.IV0PARTN = 0;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(4); /* database dealock*/
        CLBREC.IV0IVCID = 0;
        CLBREC.IV0PARTN = 0;
      end
    end
  end
  ;
  KL0I912(); /* close scan*/
  ;
  if (CLAREC.CLASHPFF == "I") /* look up address on invoice*/
    IV5REC.IV0IVCID = CLBREC.IV0IVCID; /* load key*/
    IV5REC.IV0PARTN = CLBREC.IV0PARTN;
    KL0I920(); /* address table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0IM001.XXXCITY = IV5REC.IV5SHPCT;
      KL0IM001.XSTCD = IV5REC.IV5SHPST;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL0IM001.XXXCITY = " ";
        KL0IM001.XSTCD = " ";
      end
    end
  end
  ;
  ;
  ;
  if (CLAREC.CLASHPFF == "C"
   || CLAREC.CLASHPFF == "E")
    CLFREC.CLACLMNB = CLAREC.CLACLMNB; /* get line for given claim id*/
    CLFREC.CLFADTYP = "S";
    KL0I930(); /* get address from claim address*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0IM001.XXXCITY = CLFREC.XXXCITY;
      KL0IM001.XSTCD = CLFREC.XSTCD;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL0IM001.XXXCITY = " ";
        KL0IM001.XSTCD = " ";
      end
    end
  end
  ;
  ;
   /* *************************************************************/
   /* *   Check for a claim / invoice record for the primary*/
   /* *   invoice with cl-prmy-ivc-fl of 'y'. If found, use the*/
   /* *   invoice number to look up the invoice header (vivhdr01).*/
   /* *   Fill the remaining header fields from this record.*/
   /* *************************************************************/
  ;
   /* use clbrec info from previous fetch of that record*/
  ;
  ;
  IVAREC.IV0IVCID = CLBREC.IV0IVCID;
  IVAREC.IV0PARTN = CLBREC.IV0PARTN;
  KL0I940(); /* get invoice header for invoice id*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if invoice header found*/
    KL0IM001.IV0IVCID = IVAREC.IV0IVCID; /* move data to screen*/
    if (IVAREC.PK1PKSCH == -1)
      KL0IS90(); /* retrieve multiple pick schedule*/
                                   /* numbers*/
    else
      CL0IW01.CL0IWCVN = IVAREC.PK1PKSCH;
      KL0IS97(); /* remove leading zeroes*/
      KL0IM001.PK1PKSCH[1] = CL0IW01.CL0IWCVA;
    end
    KL0IM001.FY1FCTYC = IVAREC.FY1FCTYC;
    KL0IM001.SR1SHPDT = IVAREC.SR1SHPDT;
    KL0IM001.TF1CARCD = IVAREC.TF1CARCD;
    KL0IM001.TF1CARNM = IVAREC.TF1CARNM;
    KL0IM001.TF2PRONO = IVAREC.TF2PRONO;
    KL0IM001.PK1BLLAD = IVAREC.PK1BLLAD;
    KL0IM001.XDSCD = IVAREC.XDSCD;
    KL0IM001.PK1NBCTN = IVAREC.PK1NBCTN;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0IM001.IV0IVCID = 0; /* move data to screen*/
      KL0IM001.FY1FCTYC = " ";
      KL0IM001.SR1SHPDT = 0;
      KL0IM001.TF1CARCD = " ";
      KL0IM001.TF1CARNM = " ";
      KL0IM001.TF2PRONO = " ";
      KL0IM001.PK1BLLAD = 0;
      KL0IM001.XDSCD = " ";
      KL0IM001.PK1NBCTN = 0;
    end
  end
  ;
   /* *************************************************************/
   /* *   get the 'via' code and description.*/
   /* *   if the xds-dir-shp-cd is not = 1, get the code from the*/
   /* *   warehouse code and the description from the warehouse*/
   /* *   table*/
   /* *   if xds-dir-shp-cd = 1, get the code from factory code*/
   /* *   field on the invoice header, and the description from*/
   /* *   dfcty.vfcty001*/
   /* *************************************************************/
  ;
  if (IVAREC.XDSCD == "1")
    FY1REC.FY1FCTYC = IVAREC.FY1FCTYC;
    FY1REC.XGPCD = CLAREC.XGPCD; /* 02-22-90*/
    KL0I950();
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0IM001.FY1FCTNM = FY1REC.FY1FCTNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL0IM001.FY1FCTNM = " ";
      end
    end
  end
  ;
  ;
  ;
  if (IVAREC.XDSCD != "1")
    KL0IM001.FY1FCTYC = IVAREC.XWHCD;
    if (IVAREC.XWHCD in XWHTBL.XWHCD /* get warehouse abreviation*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0IM001.FY1FCTNM = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      KL0IM001.FY1FCTNM = " ";
    end
  end
  ;
  if (IVAREC.XDSCD in XDSTBL.XDSCD /* get xds code abbreviation*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0IM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
  else
    KL0IM001.XDSABRV = " ";
  end
  ;
   /* *************************************************************/
   /* *   the ship chgs field on the header refers to the original*/
   /* *   invoice ship charges, and comes from the invoice gl*/
   /* *   table (dinvc.vivglx01).*/
   /* *************************************************************/
  ;
  IV6REC.IV6FBTYP = "F";
  IV6REC.OP2LNINB = 0;
  IV6REC.IV6GLSEQ = " ";
  IV6REC.PFJXREF = "SHP";
  IV6REC.IV0PARTN = IVAREC.IV0PARTN;
  IV6REC.IV0IVCID = IVAREC.IV0IVCID;
  KL0I960();
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0IM001.IV6GLAMT = IV6REC.IV6GLAMT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KL0IM001.IV6GLAMT = 0;
    end
  end
   /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
      /* specs were changed 5/9/87 to not include the following*/
  ;
       /* set modified field attributes as dark,askip.*/
       /* the fields won't appear to the users*/
  ;
  if (CL0IW01.CL0IWPPS == "Y"
   && CL0IW01.CL0IWAFS != "Y")
    set KL0IM001.CLETRFDT skip;
    set KL0IM001.CLETNFDT skip;
    set KL0IM001.CLETFGD skip;
    set KL0IM001.CLETFGDN skip;
    set KL0IM001.CLETFGDD skip;
    set KL0IM001.CLETFGCG skip;
    set KL0IM001.CLETMICG skip;
    set KL0IM001.CL0IMTCG skip;
    set KL0IM001.CL0IMPNO skip;
    set KL0IM001.CLENBCRT skip;
    set KL0IM001.CL0IMPOD cursor;
  end
  ;
  ;
  if (CLWREC.CLWACTIV == "I")
    set KL0IM001.CLETRFDT skip;
    set KL0IM001.CLETNFDT skip;
    set KL0IM001.CLETFGD skip;
    set KL0IM001.CLETFGDN skip;
    set KL0IM001.CLETFGDD skip;
    set KL0IM001.CLETFGCG skip;
    set KL0IM001.CLETMICG skip;
    set KL0IM001.CL0IMTCG skip;
    set KL0IM001.CL0IMPNO skip;
    set KL0IM001.CLENBCRT skip;
    set KL0IM001.CL0IMPOD skip;
    set KL0IM001.CL0IMPOS skip;
    set KL0IM001.CLEPPRQD skip;
    set KL0IM001.CLEPPRQC skip;
    set KL0IM001.YPSCD skip;
    set KL0IM001.YPSDESC skip;
    set KL0IM001.XXXUSRID skip;
    set KL0IM001.CLEPPSDT skip;
    set KL0IM001.CATOAP cursor;
    converseLib.validationFailed(300);
  end
  ;
   /* *************************************************************/
   /* *   fill in values from the traffic record if it already*/
   /* *   exists.*/
   /* *************************************************************/
  ;
  CLAREC.CLATFIND = "Y";
  if (CLAREC.CLATFIND == "N")
    return;
  end
  ;
  CLEREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0I970();
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0IM001.CLENBCRT = CLEREC.CLENBCRT;
    if (CLEREC.CLETRFDT != 0)
      ;
      CLXREC.XXXWDTE = CLEREC.CLETRFDT;
      CLXREC.XXXFLYY = CLXREC.XXXWYY;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLMM = CLXREC.XXXWMM;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD;
      KL0IM001.CLETRFDT = CLXREC.XXXFLDT;
    else
      KL0IM001.CLETRFDT = " ";
    end
    ;
    ;
    if (CLEREC.CLETNFDT != 0)
      CLXREC.XXXWDTE = CLEREC.CLETNFDT;
      CLXREC.XXXFLYY = CLXREC.XXXWYY;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLMM = CLXREC.XXXWMM;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD;
      KL0IM001.CLETNFDT = CLXREC.XXXFLDT;
    else
      if (CLWREC.CLWACTIV != "I")
        KL0IM001.CLETNFDT = CL0IW01.CL0IWZZD;
        set KL0IM001.CLETNFDT modified;
      end
    end
    ;
    KL0IM001.CLETFGD = CLEREC.CLETFGD;
    KL0IM001.CLETFGDN = CLEREC.CLETFGDN;
    ;
    KL0IM001.XXXUSRID = CLEREC.XXXUSRID;
    ;
    if (CLEREC.CLETFGDD != 0)
      CLXREC.XXXWDTE = CLEREC.CLETFGDD;
      CLXREC.XXXFLYY = CLXREC.XXXWYY;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLMM = CLXREC.XXXWMM;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD;
      KL0IM001.CLETFGDD = CLXREC.XXXFLDT;
    else
      KL0IM001.CLETFGDD = " ";
    end
    ;
    KL0IM001.CLETFGCG = CLEREC.CLETFGCG;
    KL0IM001.CLETMICG = CLEREC.CLETMICG;
    ;
    CL0IW01.CL0IWTLC = KL0IM001.CLETFGCG + KL0IM001.CLETMICG;
    KL0IM001.CL0IMTCG = CL0IW01.CL0IWTLC;
    CL0IW01.CL0IWTLC = 0;
    ;
    KL0IM001.CL0IMPNO = CLEREC.TF2PRONO;
    ;
    if (CLEREC.CLEPPRQD != 0)
      CLXREC.XXXWDTE = CLEREC.CLEPPRQD;
      CLXREC.XXXFLYY = CLXREC.XXXWYY;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLMM = CLXREC.XXXWMM;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD;
      KL0IM001.CLEPPRQD = CLXREC.XXXFLDT;
    else
      KL0IM001.CLEPPRQD = " ";
    end
    ;
    KL0IM001.CLEPPRQC = CLEREC.CLEPPRQC;
    ;
    ;
    if (CLEREC.CLEPPSDT != 0)
      CLXREC.XXXWDTE = CLEREC.CLEPPSDT;
      CLXREC.XXXFLYY = CLXREC.XXXWYY;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLMM = CLXREC.XXXWMM;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD;
      KL0IM001.CLEPPSDT = CLXREC.XXXFLDT;
    else
      KL0IM001.CLEPPSDT = " ";
    end
    ;
    KL0IM001.YPSCD = CLEREC.YPSCD;
  else
    if (CLWREC.CLWACTIV != "I")
      if (SQLCA.VAGen_SQLCODE == 100)
        KL0IM001.CLETNFDT = CL0IW01.CL0IWZZD;
      else
        XPCL010();
      end
    end
  end
  ;
  ;
   /* *************************************************************/
   /* *   set the pod and pos flags:*/
   /* *     if cl-pod-pos-fl = 'd' set pod to 'y', pos to 'n' and*/
   /* *     if cl-pod-pos-fl = 's' set pod to 'n', pos to 'y'*/
   /* *************************************************************/
  ;
  if (CLEREC.CLEPPFL == "D")
    KL0IM001.CL0IMPOD = "Y";
    KL0IM001.CL0IMPOS = "N";
  end
  if (CLEREC.CLEPPFL == "S")
    KL0IM001.CL0IMPOD = "N";
    KL0IM001.CL0IMPOS = "Y";
  end
  if (CLEREC.CLEPPFL == " ")
    if (CLWREC.CLWACTIV != "I")
      KL0IM001.CL0IMPOD = "N";
      KL0IM001.CL0IMPOS = "N";
    end
  end
  ;
  ;
   /* *************************************************************/
   /* *   lookup yps code on yps table.*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  if (CLEREC.YPSCD in YPSTBL.YPSCD
   && YPSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0IM001.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
  else
    KL0IM001.YPSDESC = " ";
  end
  ;
  ;
   /* *************************************************************/
   /* *   compute total charges = ship charges + misc charges*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
   /* CLIREC.CLetMICG = IV6REC.IV6GLAMT + CLEREC.CLETMICG;*/
   /* MOVE CLIREC.CL0IMTCG TO CL0IM001.CL0IMTG;*/
  ;
end // end KL0I101

// handle special process entry
Function KL0I110()
   /* ***********************************************************/
   /* *  check pf keys entry, or Option/item entry.            **/
   /* *  if enter, pf14 or pf15 or pf12*/
   /* *  was pressed skip them.*/
   /* **/
   /* **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I110"; /* set current process name*/
  ;
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEDITF = "N";
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end
  ;
  ;
    /* ************************  fast path out ************/
  if (converseVar.eventKey is enter)
    if (KL0IM001.CATOAP == " "
     && KL0IM001.CAITEM == " ")
      return;
    else
      if (KL0IM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0IM001.CATOAP;
        COMMAREA.CAITEM = KL0IM001.CAITEM;
        CLXREC.CLXEDITF = "N"; /* dont edit data*/
        XPCL002(); /* try to get there*/
        return;
      else
        if (KL0IM001.CATOAP == " "
         && KL0IM001.CAITEM != " ")
          converseLib.validationFailed(01); /* enter option field*/
          CLXREC.CLXEDITF = "N"; /* dont edit data*/
          CLXREC.CLXERRF = "Y"; /* there are errors in*/
          return;
            /* ******************************************************/
        end
      end
    end
  end
  ;
   /* if no other condition was met, show message*/
  ;
  converseLib.validationFailed(2); /* invalid pfkey*/
  CLXREC.CLXERRF = "Y";
  CLXREC.CLXEDITF = "N"; /* dont edit data*/
  ;
end // end KL0I110

// edit traffic screen entries
Function KL0I120()
   /* *************************************************************/
   /* *            edit traffic screen entries (cl0im001)        **/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
   /* **/
  CLXREC.CLXCPROC = "CL0I120"; /* set current process name*/
   /* **/
  ;
  ;
   /* *************************************************************/
   /* **/
   /* *   if any of the following information is entered it must*/
   /* *   be edited for validity.some fields are defaulted(see*/
   /* *   each one individually for default values).*/
   /* **/
   /* *************************************************************/
  ;
  set KL0IM001.CLETRFDT normal;
  if (KL0IM001.CLETRFDT is modified) /* date refused*/
    if (KL0IM001.CLETRFDT > " ")
      KL0IS24();
    else
      KL0IM001.CLETRFDT = " ";
      CLEREC.CLETRFDT = 0;
    end
  end
  ;
  ;
  set KL0IM001.CLETNFDT normal;
  if (KL0IM001.CLETNFDT is modified) /* notify date*/
    if (KL0IM001.CLETNFDT > " ")
      KL0IS26();
    else
      KL0IM001.CLETNFDT = CL0IW01.CL0IWZZD; /* default current date*/
      CLEREC.CLETNFDT = TA2REC.TA2GRGGN; /* default current date*/
    end
  end
  ;
  ;
  set KL0IM001.CLETFGD normal;
  if (KL0IM001.CLETFGD is modified) /* freight disposition*/
    /* next sentence*/
  else
    if (KL0IM001.CLETFGD > " ") /* if greater than blank*/
      /* next sentence*/
    else
      KL0IM001.CLETFGD = " "; /* default to spaces*/
    end
  end
  CLEREC.CLETFGD = KL0IM001.CLETFGD;
  ;
  ;
  set KL0IM001.CLETFGDN normal;
  if (KL0IM001.CLETFGDN is modified) /* disposition number*/
    /* next sentence*/
  else
    if (KL0IM001.CLETFGDN > 0) /* if greater than 0*/
      /* next sentence*/
    else
      KL0IM001.CLETFGDN = 0;
    end
  end
  CLEREC.CLETFGDN = KL0IM001.CLETFGDN;
  ;
  ;
  set KL0IM001.CLETFGDD normal;
  if (KL0IM001.CLETFGDD is modified) /* disposition date*/
    if (KL0IM001.CLETFGDD > " ")
      KL0IS32();
    else
      KL0IM001.CLETFGDD = " "; /* default to zeroes*/
      CLEREC.CLETFGDD = 0; /* default to zeroes*/
    end
  end
  ;
  ;
  set KL0IM001.CLETFGCG normal;
  if (KL0IM001.CLETFGCG is modified) /* freight charges*/
    /* next sentence*/
  else
    if (KL0IM001.CLETFGCG > 0) /* if greater than 0*/
      /* next sentence*/
    else
      KL0IM001.CLETFGCG = 0; /* default to zero*/
    end
  end
  CLEREC.CLETFGCG = KL0IM001.CLETFGCG;
  ;
  ;
  set KL0IM001.CLETMICG normal;
  if (KL0IM001.CLETMICG is modified) /* misc charges*/
    /* next sentence*/
  else
    if (KL0IM001.CLETMICG > 0) /* if greater than 0*/
      /* next sentence*/
    else
      KL0IM001.CLETMICG = 0; /* default to zero*/
    end
  end
  CLEREC.CLETMICG = KL0IM001.CLETMICG;
  ;
  ;
  CL0IW01.CL0IWTLC = KL0IM001.CLETFGCG + KL0IM001.CLETMICG;
  KL0IM001.CL0IMTCG = CL0IW01.CL0IWTLC;
  CL0IW01.CL0IWTLC = 0;
  ;
  ;
  set KL0IM001.CL0IMPNO normal;
  if (KL0IM001.CL0IMPNO is modified) /* return pro number*/
    /* next sentence*/
  else
    if (KL0IM001.CL0IMPNO > " ") /* if greater than ' '*/
      /* next sentence*/
    else
      KL0IM001.CL0IMPNO = " "; /* default to zero*/
    end
  end
  CLEREC.TF2PRONO = KL0IM001.CL0IMPNO;
  ;
  ;
  set KL0IM001.CLENBCRT normal;
  if (KL0IM001.CLENBCRT is modified) /* number of cartons*/
    /* next sentence*/
  else
    if (KL0IM001.CLENBCRT > 0) /* if greater than 0*/
      /* next sentence*/
    else
      KL0IM001.CLENBCRT = 0; /* default to zero*/
    end
  end
  CLEREC.CLENBCRT = KL0IM001.CLENBCRT;
  ;
  ;
  set KL0IM001.CL0IMPOD normal;
  if (KL0IM001.CL0IMPOD is modified) /* proof of delivery*/
    KL0IS44();
  else
    if (KL0IM001.CL0IMPOD == " ")
      KL0IM001.CL0IMPOD = "N"; /* default to no*/
    end
  end
  ;
  ;
  set KL0IM001.CL0IMPOS normal;
  if (KL0IM001.CL0IMPOS is modified) /* proof of shipment*/
    KL0IS46();
  else
    if (KL0IM001.CL0IMPOS == " ")
      KL0IM001.CL0IMPOS = "N"; /* default to no*/
    end
  end
  ;
  ;
  if (KL0IM001.CL0IMPOD == "Y" /* if proof of delivery equal yes*/
   && KL0IM001.CL0IMPOS == "Y") /* or proof of shipment equal yes*/
    converseLib.validationFailed(152); /* both pod and pos can't equal yes*/
    set KL0IM001.CL0IMPOD cursor, modified, bold;
    set KL0IM001.CL0IMPOS modified, bold;
  end
  ;
  ;
  if (KL0IM001.CL0IMPOD == "N" /* if proof of delivery equal yes*/
   && KL0IM001.CL0IMPOS == "N") /* or proof of shipment equal yes*/
    CLEREC.CLEPPFL = " "; /* both pod and pos equal no*/
  end
  ;
  ;
  if (KL0IM001.CL0IMPOD == "Y" /* if proof of delivery equal yes*/
   || KL0IM001.CL0IMPOS == "Y") /* or proof of shipment equal yes*/
    if (CLEREC.CLEPPRQD == 0)
      CLXREC.XXXEDFLD = CL0IW01.CL0IWZZD;
      XPCL004(); /* validate*/
      if (CLXREC.CLXVALDT == "N") /* bad date*/
        converseLib.validationFailed(17);
        set KL0IM001.CLEPPRQD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else
        if (CLXREC.XXXFLDT > CL0IW01.CL0IWZZD) /* if greater than current date*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(293); /* date refused can't be greater than*/
                                   /* current date*/
          set KL0IM001.CLEPPRQD cursor, bold;
        else
          KL0IM001.CLEPPRQD = CLXREC.XXXFLDT; /* date ok, move it*/
          CLEREC.CLEPPRQD = TA2REC.TA2GRGGN; /* and save*/
        end
      end
    else
      CLXREC.XXXEDFLD = KL0IM001.CLEPPRQD;
      XPCL004(); /* validate*/
      if (CLXREC.CLXVALDT == "N") /* bad date*/
        converseLib.validationFailed(17);
        set KL0IM001.CLEPPRQD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else
        if (TA2REC.TA2GRGGN > CL0IW01.CL0IWCYM) /* if greater than current date*/
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(293); /* date refused can't be greater than*/
                                   /* current date*/
          set KL0IM001.CLEPPRQD cursor, bold;
        else
          KL0IM001.CLEPPRQD = CLXREC.XXXFLDT; /* date ok, move it*/
          CLEREC.CLEPPRQD = TA2REC.TA2GRGGN; /* and save*/
        end
      end
    end
    ;
  else
    if (KL0IM001.CLEPPRQD is modified)
      if (KL0IM001.CLEPPRQD != " ")
        converseLib.validationFailed(341);
        set KL0IM001.CLEPPRQD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      KL0IM001.CLEPPRQD = " "; /* date ok, move it*/
      CLEREC.CLEPPRQD = 0; /* and save*/
      KL0IM001.YPSCD = " ";
      CLEREC.YPSCD = " ";
    end
  end
  ;
  ;
  set KL0IM001.CLEPPRQC normal;
  if (KL0IM001.CLEPPRQC is modified)
    if (KL0IM001.CL0IMPOD == "Y" /* if proof of delivery equal yes*/
     || KL0IM001.CL0IMPOS == "Y") /* or proof of shipment equal yes*/
      /* next sentence*/
    else
      if (KL0IM001.CLEPPRQC != 0)
        converseLib.validationFailed(294); /* # times requested not permitted(pod & pos = n)*/
        set KL0IM001.CLEPPRQC cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    end
  else
    if (KL0IM001.CL0IMPOD == "Y" /* if proof of delivery equal yes*/
     || KL0IM001.CL0IMPOS == "Y") /* or proof of shipment equal yes*/
      KL0IM001.CLEPPRQC = 01; /* default to 01*/
    else
      if (KL0IM001.CL0IMPOD == "N" /* if proof of delivery equal yes*/
       && KL0IM001.CL0IMPOS == "N")
                                   /* or proof of shipment equal yes*/
        KL0IM001.CLEPPRQC = 0; /* default to spaces*/
      end
    end
  end
  CLEREC.CLEPPRQC = KL0IM001.CLEPPRQC;
  ;
  ;
  if (KL0IM001.CL0IMPOD is modified /* proof of delivery*/
   && KL0IM001.CL0IMPOD == "Y")     /* if proof of delivery equal yes*/
    KL0IM001.YPSCD = "REQ";
  end
  if (KL0IM001.CL0IMPOS is modified /* proof of shipment*/
   && KL0IM001.CL0IMPOS == "Y")     /* or proof of shipment equal yes*/
    KL0IM001.YPSCD = "REQ";
  end
  ;
  ;
  if (KL0IM001.CL0IMPOD is modified
   || KL0IM001.CL0IMPOS is modified)
    if (KL0IM001.CL0IMPOD == "N"
     && KL0IM001.CL0IMPOS == "N")
      if (KL0IM001.YPSCD is modified)
        if (KL0IM001.YPSCD != " ")
          /* next sentence*/
        else
          KL0IM001.YPSCD = " ";
          KL0IM001.YPSDESC = " ";
          CLEREC.YPSCD = KL0IM001.YPSCD;
        end
      end
      CL0IW01.YCSCD1 = "OIP";
    end
  end
  ;
  ;
  if (CL0IW01.YCSCD1 in YCSTBL.YCSCD)
    CL0IW01.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    CL0IW01.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
  end
                                     /* (*9/26/89 CL211e CWH*)*/
  if (KL0IM001.YPSCD != CLEREC.YPSCD) /* if the status changed*/
    if (KL0IM001.YPSCD in YPSTBL.YPSCD) /* and valid ypscd*/
      CLEREC.XXXUSRID = COMMAREA.CAUSERID; /* change the user*/
      KL0IM001.XXXUSRID = CLEREC.XXXUSRID;
    else
      if (KL0IM001.YPSCD == " ") /* if no status*/
        KL0IM001.XXXUSRID = " "; /* no need for user id*/
        CLEREC.XXXUSRID = " ";
      end
    end
  end
  ;
  set KL0IM001.YPSCD normal;
  if (KL0IM001.YPSCD != " ")
    if (KL0IM001.YPSCD in YPSTBL.YPSCD /* get yps description*/
     && YPSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0IM001.YPSCD = YPSTBL.YPSCD[sysVar.arrayIndex];
      KL0IM001.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
      CLEREC.YPSCD = KL0IM001.YPSCD;
    else
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(295); /* invalid yps code*/
      set KL0IM001.YPSCD cursor, modified, bold;
      KL0IM001.YPSDESC = " ";
    end
  else
    CLEREC.YPSCD = KL0IM001.YPSCD;
    KL0IM001.YPSDESC = " ";
    KL0IM001.XXXUSRID = " ";
    CLEREC.XXXUSRID = " ";
  end
  ;
  ;
  ;
  if (KL0IM001.YPSCD != " ")
    CLXREC.XXXEDFLD = CL0IW01.CL0IWZZD;
    XPCL004(); /* validate*/
    if (CLXREC.CLXVALDT == "N") /* bad date*/
      converseLib.validationFailed(17);
      set KL0IM001.CLEPPSDT cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      if (TA2REC.TA2GRGGN > CL0IW01.CL0IWCYM)
                                   /* if greater than current date*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(293); /* date refused can't be greater than*/
                                   /* current date*/
        set KL0IM001.CLEPPSDT cursor, bold;
      end
      KL0IM001.CLEPPSDT = CLXREC.XXXFLDT; /* date ok, move it*/
      CLEREC.CLEPPSDT = TA2REC.TA2GRGGN; /* and save*/
    end
  end
  ;
  ;
  ;
end // end KL0I120

// update header with comments
Function KL0I130()
   /* ************************************************************/
   /* *                                                         **/
   /* *     this process updates clerec and clarec.             **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I130"; /* set current process name*/
  ;
  CLEREC.CLACLMNB = CL0IW02.CLACLMNB;
  KL0I970(); /* select unique*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    ;
     /* key is already loaded*/
    ;
    set TA2REC empty; /* clear out*/
    ;
    ;
    TA2REC.TA2DTOPT = "GETDATE";
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      CL0IW02.ZZZCHGDT = TA2REC.TA2GRGGN;
      CL0IW02.ZZZCHGTM = TA2REC.TA2TIMHM;
    else
      TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0I001";
      XPCL010(); /* abend*/
    end
    CL0IW02.ZZZCHGCT = CLEREC.ZZZCHGCT;
    CLEREC.CLEGROUP = CL0IW02.CLEGROUP;
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* record exists*/
    KL0I917(); /* check if record exists & lock it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* record exists*/
      converseLib.validationFailed(298); /* record updated*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no record found,*/
      KL0I918();
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(299); /* record added*/
        CLXREC.CLXBLDSC = "Y";
        CL0IW01.CLATFIND = "Y";
        /* EZERTN;*/
      end
    end
  end
  ;
  KL0IS55(); /* handle refusal claims 'rfl'*/
  ;
  if (CL0IW01.YCSCD1 == "POD"
   || CL0IW01.YCSCD1 == "OIP")
    KL0I980();
    if (SQLCA.VAGen_SQLCODE == 0) /* record exists*/
      CLAREC.CLATFIND = CL0IW01.CLATFIND;
      CLAREC.YCSCD1 = CL0IW01.YCSCD1;
      CLAREC.YCSACTCD = CL0IW01.YCSACTCD;
      CLAREC.YCSRPTEX = CL0IW01.YCSRPTEX;
      CLAREC.CLASCGBY = COMMAREA.CAUSERID;
      CLAREC.CLASTTDT = CLXREC.XXXCDTE;
      CLAREC.ZZZCHGDT = CLXREC.XXXCDTE;
      CLAREC.ZZZCHGTM = CLXREC.XXXCHHMM;
      KL0I981();
      if (SQLCA.VAGen_SQLCODE == 0 /* record exists*/
       || SQLCA.VAGen_SQLCODE == 100) /* record exists*/
        converseLib.validationFailed(298); /* record updated*/
        return;
      else
        XPCL010(); /* abend*/
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KL0I130

// handle pf key transfers
Function KL0I140()
   /* ***********************************************************/
   /* *  process pf keys that take us to another screen        **/
   /* *                                                        **/
   /* ***********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0I140"; /* set current process name*/
  ;
  if (converseVar.eventKey is enter)
    if (converseVar.validationMsgNum == 0)
      if (COMMAREA.CAFRMSYS == "KL")
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
                                   /* return to calling appl*/
      else
        COMMAREA.CATOAP = "KL0A"; /* menu*/
      end
    else
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf12)
    return;
  end
  if (converseVar.eventKey is pf5)
    KL0IS05();
  end
  ;
  if (converseVar.eventKey is pf14)
    if (CLAREC.YCTCD == "NBC"
     || CLAREC.YCTCD == "DAA")
      COMMAREA.CATOAP = "KL0K";
    else
      COMMAREA.CATOAP = "KL0J";
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf15)
    if (CLAREC.YCTCD == "ADJ")
      COMMAREA.CATOAP = "KL0L";
    else
      if (CLAREC.YCTCD == "RTS")
        COMMAREA.CATOAP = "KL0U";
      else
        if (CLAREC.YCTCD == "DEF"
         || CLAREC.YCTCD == "CDR")
          COMMAREA.CATOAP = "KL0V";
        else
          if (CLAREC.YCTCD == "NIL")
            COMMAREA.CATOAP = "KL0X";
          else
            converseLib.validationFailed(24); /* pf key is not valid for this claim type*/
            CLXREC.CLXEOSF = "N"; /* thru processing screen*/
            CLXREC.CLXEOAF = "N"; /* thru processing application*/
            return;
          end
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf18)
    KL0IS18();
  end
  ;
  if (converseVar.eventKey is pf20)
    KL0IS20();
  end
  ;
  XPCL002(); /* try to get to application*/
  ;
end // end KL0I140

// select unique from kucrec
Function KL0I900()
   /* **************************************/
   /* select unique on kucrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I900"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I900

// select set from clbrec
Function KL0I910()
   /* **************************************/
   /* select set from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(9);
        exit stack;
      else
        TA1REC.TA1LOCAT[2] = "CL0I910"; /* location*/
        TA1REC.TA1MAP = "CL0IM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I910

// select next from clbrec
Function KL0I911()
   /* **************************************/
   /* select next from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0I911"; /* location*/
        TA1REC.TA1MAP = "CL01M001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I911

// close set from clbrec
Function KL0I912()
   /* **************************************/
   /* close set from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0I912"; /* location*/
        TA1REC.TA1MAP = "CL0IM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I912

// update unique on clerec
Function KL0I917()
   /* **************************************/
   /* update unique on clerec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1240" ("U ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I917"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1240"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLTRF01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I917

// add unique to clerec
Function KL0I918()
   /* **************************************/
   /* add unique on clerec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1240" ("A ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I918"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1240"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLTRF01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I918

// select unique from iv5rec
Function KL0I920()
   /* **************************************/
   /* select unique on iv5rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I920"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1050"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVADR01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I920

// select unique from clfrec
Function KL0I930()
   /* **************************************/
   /* select unique on clfrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I930"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLADR01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I930

// select unique from ivarec
Function KL0I940()
   /* **************************************/
   /* select unique on ivarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I940"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1040"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDR01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I940

// select unique from pd1rec
Function KL0I950()
   /* **************************************/
   /* select unique on fy1rec*/
   /* **************************************/
  ;
    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/
             /* Replaced DWPROD.VFCTY001 with DFCTY.VFCTY001.*/
             /* Replaced IO0870 with IO2810.*/
  ;
  ;
  set SQLCA empty;
  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I950"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2810"; /* location*/
        TA1REC.TA1DBASE = "DFCTY"; /* database name*/
        TA1REC.TA1TBLVU = "VFCTY001"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I950

// select unique from cl1rec
Function KL0I955()
   /* **************************************/
   /* select unique on cl1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2840" ("S ", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I955"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2840"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLXCP01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I955

// update unique on cl1rec
Function KL0I956()
   /* **************************************/
   /* update unique on cl1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2840" ("U ", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I956"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2840"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLXCP01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I956

// select set from cl1rec
Function KL0I957()
   /* **************************************/
   /* select set from cl1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2840" ("S1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        return;
      else
        TA1REC.TA1LOCAT[2] = "CL0I955"; /* location*/
        TA1REC.TA1MAP = "CL0IM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLXCP01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO2840";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I957

// select next from cl1rec
Function KL0I958()
   /* **************************************/
   /* select next from cl1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2840" ("N1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0I956"; /* location*/
        TA1REC.TA1MAP = "CL01M001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLXCP01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO2840";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I958

// close set from cl1rec
Function KL0I959()
   /* **************************************/
   /* close set from cl1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO2840" ("C1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0I957"; /* location*/
        TA1REC.TA1MAP = "CL0IM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLXCP01";
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM;
        TA1REC.TA1LOCAT[4] = "IO2840";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0I959

// select unique from iv6rec
Function KL0I960()
   /* **************************************/
   /* select unique on iv6rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1080" ("S ", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I960"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1080"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVGLX01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I960

// select unique from clerec
Function KL0I970()
   /* **************************************/
   /* select unique on clerec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1240" ("S ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I970"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1240"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLTRF01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I970

// select unique on clarec
Function KL0I980()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I980"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I980

// update unique on clarec
Function KL0I981()
   /* **************************************/
   /* update unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0I981"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0IW01.CL0IWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0IW01.CL0IWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0I981

// check security
Function KL0IS01()
   /* ************************************************************/
   /* *                                                         **/
   /* *             verify and set security                     **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS01"; /* set process name*/
  ;
  ;
  if (CLWREC.CLWACTIV == "A"
   || CLWREC.CLWACTIV == "C")
    if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
      if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
        CLWREC.CLWACTIV = "I";
      else
        if (COMMAREA.CAALVL[1] == "Y"
         || COMMAREA.CAALVL[3] == "Y")
          CL0IW01.CL0IWPPS = "Y"; /* set pod pos security to yes*/
        end
        if (COMMAREA.CAALVL[2] == "Y"
         || COMMAREA.CAALVL[6] == "Y")
          CL0IW01.CL0IWAFS = "Y";
                                   /* set all fields security to yes*/
        end
      end
    end
  end
  ;
  ;
end // end KL0IS01

// handle entry of pf key 5
Function KL0IS05()
   /* ************************************************************/
   /* *      handle the entry of pfkey 5                        **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  COMMAREA.CATOAP = "KL0E";
  ;
  XPCL002(); /* try to get there*/
  ;
  ;
end // end KL0IS05

// pf 18 action
Function KL0IS18()
   /* ************************************************************/
   /* *      handle the entry of pfkey 18                       **/
   /* *      claim comments                                     **/
   /* ************************************************************/
  ;
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  ;
  CLWREC.CLWMCMNT = "N";
  COMMAREA.CATOAP = "KL0G";
  ;
  XPCL002();
  ;
end // end KL0IS18

// pk 20 action
Function KL0IS20()
   /* ************************************************************/
   /* *      handle the entry of pfkey 20                       **/
   /* *      memo  comments                                     **/
   /* ************************************************************/
  ;
  CLXREC.CLXEDITF = "N"; /* we don't want to do edits*/
  ;
  CLWREC.CLWMCMNT = "Y";
  COMMAREA.CATOAP = "KL0G";
  ;
  XPCL002();
  ;
end // end KL0IS20

// edit date refused
Function KL0IS24()
   /* ************************************************************/
   /* *      edit date refused field,cannot be greater than     **/
   /* *      current date,default to spaces.                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS24"; /* set process name*/
  ;
  ;
  CLXREC.XXXEDFLD = KL0IM001.CLETRFDT;
  XPCL004(); /* validate*/
  if (CLXREC.CLXVALDT == "N") /* bad date*/
    converseLib.validationFailed(17);
    set KL0IM001.CLETRFDT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    if (TA2REC.TA2GRGGN > CL0IW01.CL0IWCYM) /* if greater than current date*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(293); /* date refused can't be greater than*/
                                   /* current date*/
      set KL0IM001.CLETRFDT cursor, bold;
    else
      KL0IM001.CLETRFDT = CLXREC.XXXFLDT; /* date ok, move it*/
      CLEREC.CLETRFDT = TA2REC.TA2GRGGN; /* and save*/
    end
  end
  ;
  ;
  ;
end // end KL0IS24

// edit notify date
Function KL0IS26()
   /* ************************************************************/
   /* *      edit notify date field,cannot be greater than      **/
   /* *      current date,default to current date.              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS26"; /* set process name*/
  ;
  ;
  CLXREC.XXXEDFLD = KL0IM001.CLETNFDT;
  XPCL004(); /* validate*/
  if (CLXREC.CLXVALDT == "N") /* bad date*/
    converseLib.validationFailed(17);
    set KL0IM001.CLETNFDT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    if (TA2REC.TA2GRGGN > CL0IW01.CL0IWCYM) /* if greater than current date*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(293); /* notify date can't be greater than current date*/
      set KL0IM001.CLETNFDT cursor, bold;
    else
      KL0IM001.CLETNFDT = CLXREC.XXXFLDT; /* date ok, move it*/
      CLEREC.CLETNFDT = TA2REC.TA2GRGGN; /* and save*/
    end
  end
  ;
  ;
  ;
  ;
end // end KL0IS26

// edit disposition date
Function KL0IS32()
   /* ************************************************************/
   /* *      edit disposition date field,cannot be greater than **/
   /* *      current date,default to spaces.                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS32"; /* set process name*/
  ;
  ;
  CLXREC.XXXEDFLD = KL0IM001.CLETFGDD;
  XPCL004(); /* validate*/
  if (CLXREC.CLXVALDT == "N") /* bad date*/
    converseLib.validationFailed(17);
    set KL0IM001.CLETFGDD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    if (TA2REC.TA2GRGGN > CL0IW01.CL0IWCYM) /* if greater than current date*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(293); /* disp date can't be greater than current date*/
      set KL0IM001.CLETFGDD cursor, bold;
    else
      KL0IM001.CLETFGDD = CLXREC.XXXFLDT; /* date ok, move it*/
      CLEREC.CLETFGDD = TA2REC.TA2GRGGN; /* and save*/
    end
  end
  ;
  ;
  ;
  ;
end // end KL0IS32

// edit proof of delivery
Function KL0IS44()
   /* ************************************************************/
   /* *      edit proof of delivery,must equal 'y' or 'n'       **/
   /* *      default to 'n'.                                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS44"; /* set process name*/
  ;
  ;
  if (KL0IM001.CL0IMPOD != " ")
    if (KL0IM001.CL0IMPOD == "Y") /* if equal yes*/
      if (KL0IM001.CL0IMPOS != "Y")
        CLEREC.CLEPPFL = "D";
        CL0IW01.YCSCD1 = "POD";
        /* MOVE 'POD' TO CLWREC.YCSCD;*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(152); /* pod and pos may not both equal 'y'*/
        set KL0IM001.CL0IMPOD cursor, bold;
      end
    else
      if (KL0IM001.CL0IMPOD == "N") /* if equal no*/
        /* next sentence*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(296); /* proof of delivery must equal 'y' or 'n'*/
        set KL0IM001.CL0IMPOD cursor, bold;
      end
    end
  else
    KL0IM001.CL0IMPOD = "N";
  end
  ;
  ;
end // end KL0IS44

// edit proof of shipment
Function KL0IS46()
   /* ************************************************************/
   /* *      edit proof of shipment,must equal 'y' or 'n'       **/
   /* *      default to 'n'.                                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS46"; /* set process name*/
  ;
  ;
  if (KL0IM001.CL0IMPOS != " ")
    if (KL0IM001.CL0IMPOS == "Y") /* if equal yes*/
      if (KL0IM001.CL0IMPOD != "Y")
        CLEREC.CLEPPFL = "S";
        CL0IW01.YCSCD1 = "POD";
        /* MOVE 'POD' TO CLWREC.YCSCD;*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(152); /* pos and pod can't both equal 'y'*/
        set KL0IM001.CL0IMPOS cursor, bold;
      end
    else
      if (KL0IM001.CL0IMPOS == "N") /* if equal no*/
        /* next sentence*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(297); /* proof of shipment must equal 'y' or 'n'*/
        set KL0IM001.CL0IMPOS cursor, bold;
      end
    end
  else
    KL0IM001.CL0IMPOS = "N";
  end
  ;
  ;
end // end KL0IS46

// check security for map fields
Function KL0IS50()
   /* *******************************************************/
   /* waiting for phase 'b'........*/
   /* we assume all map fields  are defined as unprotected.*/
   /* in certain situations, we must prevent the user from*/
   /* entering data by protecting some fields.*/
   /* if caalvl(2) = 'y'        ;traffice add*/
   /* or caclvl(2) = 'y'        ; traffic change*/
      /* user may enter data in the i/o middle fields, or*/
      /* pod? or pos? or status or status date.*/
      /* all other fields may not be entered (date req and*/
      /* # times req).*/
  ;
   /* if caalvl(1) = 'y'        ; sales add*/
   /* or caclvl(1) = 'y'        ; sales change*/
   /* or caalvl(3) = 'y'        ; credit add*/
   /* or caclvl(3) = 'y'        ; credit change*/
      /* user may enter data in pod? or pos? or date req or*/
      /* # times req.  all other fields may not be entered*/
      /* (10 fields in middle, or status or status date.*/
   /* *******************************************************/
  CLXREC.CLXCPROC = "CL0IS51"; /* set current process name*/
end // end KL0IS50

// handle refusal type claims
Function KL0IS55()
   /* ************************************************************/
   /* *      edit refusal type claims 'rfl' or 'rts' claims     **/
   /* *      that have been changed from 'rfl'.                 **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0IS55"; /* set process name*/
  ;
  set CL1REC empty;
  if (CLAREC.YCTCD == "RFL")
    CL1REC.YCECD = "TF6";
  else
    if (CLAREC.YCTCD == "RTS")
      CL1REC.YCECD = "TF7";
    else
      return;
    end
  end
  ;
  CL1REC.CLACLMNB = CLAREC.CLACLMNB;
  CL1REC.CL2ISNBR = 0;
  CL1REC.CLLRTNNB = 0;
  KL0I955(); /* select cl1rec*/
  if (SQLCA.VAGen_SQLCODE == 100) /* if no record found*/
    return;
  else
    CL1REC.XXXUSRID = COMMAREA.CAUSERID;
    KL0I956(); /* update record*/
    CL1REC.XXXUSRID = " ";
    KL0I957(); /* select set cl1rec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0I958(); /* select first record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KL0I959(); /* close set*/
        return;
      else
        if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
          KL0I959(); /* close set*/
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
          return;
        end
      end
    end
  end
  ;
end // end KL0IS55

// Set fields modified when Error
Function KL0IS60()
  ;
   /* Set all enterable fields modified so the user*/
   /* does not need to rekey them if an error has*/
   /* been made.*/
  ;
  if (KL0IM001.CLETRFDT is modified)
    set KL0IM001.CLETRFDT modified;
  end
  ;
  if (KL0IM001.CLETNFDT is modified)
    set KL0IM001.CLETNFDT modified;
  end
  ;
  if (KL0IM001.CLETFGD is modified)
    set KL0IM001.CLETFGD modified;
  end
  ;
  if (KL0IM001.CLETFGDN is modified)
    set KL0IM001.CLETFGDN modified;
  end
  ;
  if (KL0IM001.CLETFGDD is modified)
    set KL0IM001.CLETFGDD modified;
  end
  ;
  if (KL0IM001.CLETFGCG is modified)
    set KL0IM001.CLETFGCG modified;
  end
  ;
  if (KL0IM001.CLETMICG is modified)
    set KL0IM001.CLETMICG modified;
  end
  ;
  if (KL0IM001.CL0IMPNO is modified)
    set KL0IM001.CL0IMPNO modified;
  end
  ;
  if (KL0IM001.CLENBCRT is modified)
    set KL0IM001.CLENBCRT modified;
  end
  ;
  if (KL0IM001.CL0IMPOD is modified)
    set KL0IM001.CL0IMPOD modified;
  end
  ;
  if (KL0IM001.CL0IMPOS is modified)
    set KL0IM001.CL0IMPOS modified;
  end
  ;
  if (KL0IM001.CLEPPRQD is modified)
    set KL0IM001.CLEPPRQD modified;
  end
  ;
  if (KL0IM001.CLEPPRQC is modified)
    set KL0IM001.CLEPPRQC modified;
  end
  ;
  if (KL0IM001.YPSCD is modified)
    set KL0IM001.YPSCD modified;
  end
  ;
  if (KL0IM001.CATOAP is modified)
    set KL0IM001.CATOAP modified;
  end
  ;
  if (KL0IM001.CAITEM is modified)
    set KL0IM001.CAITEM modified;
  end
  ;
end // end KL0IS60

// GET ALL PICKING SCHEDULES
Function KL0IS90()
  ;
  ;
   /* *************************************************************/
   /* *****       G E T     A L L     P I C K I N G          ******/
   /* *****               S C H E D U L E S                  ******/
   /* *****                                                  ******/
   /* ***** CALL DBII IO-MODULE IO1060 TO GET PICKING        ******/
   /* ***** SCHEDULES FOR THIS INVOICE ( DINVC.VIVPIK01 )    ******/
   /* *************************************************************/
  ;
  ;
  IV9REC.IV0PARTN = IVAREC.IV0PARTN;
  IV9REC.IV0IVCID = IVAREC.IV0IVCID;
  ;
  call "IO1060" ("S ", SQLCA, IV9REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0IW01.CL0IWSUB = 1; /* initialize index to 1*/
    while (CL0IW01.CL0IWSUB <= 8 /* loop thru all picking nbrs*/
     && IV9REC.PK1PKSCH[CL0IWSUB] > 0)
      /* ***** convert pic s9(9) comp to x(7) **************/
      CL0IW01.CL0IWCVN = IV9REC.PK1PKSCH[CL0IWSUB];
      KL0IS97(); /* remove leading zeroes*/
      KL0IM001.PK1PKSCH[CL0IWSUB] = CL0IW01.CL0IWCVA;
      /* ***************************************************/
      CL0IW01.CL0IWSUB = CL0IW01.CL0IWSUB + 1;
    end
    if (IV9REC.PK1PKSCH[9] != 0)
      KL0IM001.PK1PKSCH[8] = "MORE   ";
    end
  else
    /* *****************************************************/
    /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
    /* *****************************************************/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVPIK01";
    TA1REC.TA1TBLKE = IV9REC.IV9KEY;
    TA1REC.TA1LOCAT[3] = "CL0IS90 ";
    TA1REC.TA1LOCAT[4] = "IO1060";
    KL0IS99();
    /* *****************************************************/
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0IS90

// REMOVE PICK SCHED LEAD ZEROES
Function KL0IS97()
  ;
  ;
   /* *****************************************************;*/
   /* *** REMOVE LEADING ZEROES FROM PICK SCHEDULE NUMBERS ;*/
   /* *****************************************************;*/
  ;
  ;
  CL0IW01.CL0IWSU1 = 1; /* initialize index to 1*/
  while (CL0IW01.CL0IWLTR[CL0IWSU1] == "0") /* loop thru chars*/
    CL0IW01.CL0IWLTR[CL0IWSU1] = " "; /* blank-fill*/
    CL0IW01.CL0IWSU1 = CL0IW01.CL0IWSU1 + 1;
  end
  ;
  ;
  ;
end // end KL0IS97

// COMMON ERROR ROUTINE, TA0020
Function KL0IS99()
  ;
      /* *********************************************************/
      /* * online abort routine for kl0i*/
      /* *********************************************************/
  ;
   /* **********************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* **********************************************************/
  ;
  set TA1REC empty;
  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  TA1REC.TA1PGMNM = "KL0I"; /* pgm name, 10-30-87*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/
  ;
  ;
  ;
   /* *************************************************************/
end // end KL0IS99

Record CL0IW01 type basicRecord
  5 CL0IW1GP CL0IW1GP ; 
    10 CL0IWSUB CL0IWSUB ; 
    10 CL0IWSU1 CL0IWSU1 ; 
    10 YCSCD1 YCSCD1 ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLATFIND CLATFIND ; 
    10 CL0IWZZD CL0IWZZD ; 
    10 CL0IWZZT CL0IWZZT ; 
    10 CL0IWNUM CL0IWNUM ; 
    10 CL0IWTLC CL0IWTLC ; 
    10 CL0IWPPS CL0IWPPS ; 
    10 CL0IWAFS CL0IWAFS ; 
    10 CL0IWEFL CL0IWEFL ; 
    10 CL0IWCVN CL0IWCVN ; 
      15 CL0IWCVA CL0IWCVA ; 
        20 CL0IWLTR CL0IWLTR [7] ; 
    10 CL0IWCYM CL0IWCYM ; 
end // end CL0IW01

//*** RECORD=CL0IW02 ****
// ******************  Claim Traffic Table  *******************
// 
// DB2 Table:           DCLAIM.VCLTRF01
// 
// Copylib Member:      DCL00210
// 
// I/O Mod:             IO1240
// 
// Key to DB2 Table:    claclmnb
// 
// Date Created:        03/01/87
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 03-01-87   PAG       Initial record creation
// 
// ***********************
Record CL0IW02 type basicRecord
  5 CLEGROUP CLEGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 TF2PRONO TF2PRONO ; 
    10 CLETRFDT CLETRFDT ; 
    10 CLETNFDT CLETNFDT ; 
    10 CLETFGD CLETFGD ; 
    10 CLETFGDN CLETFGDN ; 
    10 CLETFGDD CLETFGDD ; 
    10 CLETFGCG CLETFGCG ; 
    10 CLETMICG CLETMICG ; 
    10 CLENBCRT CLENBCRT ; 
    10 CLEPPFL CLEPPFL ; 
    10 YPSCD YPSCD ; 
    10 CLEPPSDT CLEPPSDT ; 
    10 CLEPPRQC CLEPPRQC ; 
    10 CLEPPRQD CLEPPRQD ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0IW02

// cl0iw01 group level
DataItem CL0IW1GP char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all fields security flag
DataItem CL0IWAFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ALPHA CONVERSION FIELD
DataItem CL0IWCVA char(7)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NUMERIC CONVERSION FLD
DataItem CL0IWCVN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in cccyymmdd format
DataItem CL0IWCYM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date conversion field
DataItem CL0IWEFL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// each char alpha cvn fld
DataItem CL0IWLTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ta1rec info
DataItem CL0IWNUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pod pos security flag
DataItem CL0IWPPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wk sub
DataItem CL0IWSU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wk sub
DataItem CL0IWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total charges
DataItem CL0IWTLC num(8,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date for zzchgdt
DataItem CL0IWZZD char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time for zzchgtm
DataItem CL0IWZZT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

