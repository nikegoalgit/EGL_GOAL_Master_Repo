package kl0z;

import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom3.*;
import corpcom4.*;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import iv.common.IV5REC;
import iv.common.IVEREC;
import kl.common.KL14TBL;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import mn.common.MN1REC;
import mn.common.MN2REC;
import op.common.OP-BK-MO;
import op.common.OP-BK-YR;
import pc.common.PC2INSEG;
import pc.common.PC2REC;
import sl.common.SL2PALET;
import sl.common.SL4ZONE;
import sl.common.SL5LOCTN;
import sl.common.SL5REC;
import sl.common.SL7REC;
import sp.common.SP5REC;
import sp.common.SP5SZPR;
import sy.common.SY1REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY1UNPCS;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY3REC;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY5PRCUN;
import sy.common.SY5REC;
import sy.common.SY5SZID;
import sy.common.SY6REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VDMACT01;
import xa.common.XA0AW02;
//*** PROGRAM=KL0Z ****
// Purpose: This program is designed to allow Distribution
//          Special Services to enter detail information about
//          the return.  The return is 'grouped' by inspection
//          number.  Within inspection, the user can enter
//          and/or change the product information.  When the
//          inspection is finished, the user can tell the
//          system via the inspection complete flag.  They can
//          also change the return to address and indicate
//          whether any RTS quantities should be released to
//          stock locate.
// 
// ************************************************************
// * Maintenance History:                                     *
// *----------------------------------------------------------*
// *   Date     Who    Description                            *
// *==========================================================*
// * 08/09/88  CTROUW  Installed                              *
// * 11/08/88  ctrouw  fixed pf15 on screen cl0zm005          *
// * 12/07/88  mhalst  Correct program to look-up address in  *
// *                   IV5REC (invoicing) if it need to.
// * 12/20/88  ctrouw  increase size of size table to 150
// * 12/21/88  ctrouw  fixed program when clqrec's deleted
// * 12/27/88  ctrouw  set price to zero for non-credit returns
// * 12/30/88  mhalst  CL423 Allow chang for ERA status, cart-
// *                   ons received should be total of all
// *                   return records. CL400 show size detail
// *                   even when no stock locate records exist.
// * 01/06/89  ctrouw  fix display of non-cred qty on cl0zm005.
// * 01/17/89  ctrouw  fix fastpath to carry correct insp nbr.
// *                   and view 'rms' insp with no clqrec's
// * 01/20/89  mhalst  CL491 Cannot enter Y in inspection com-
// *                   plete in no quantities entered.
// *                   CL501 Do not change activity code if
// *                   authorized by id is zero.
// *
// * 02/28/89  jwood   added noncsp option to calls
// * 02/28/89  jwood   added xssegtr logic
// * 04/18/89  MHALST  CL336 Add call to IO1490 to validate
// *                   Stock Locate location data.
// * 05-19-89  bcourt  DB2 structure changes: CLAREC, KUMREC,
// *                   SY2REC, SCTTBL, XGPTBL, XWHTBL.
// * 06-20-89  bcourt  when RAA/RIP claim inspection is compltd
// *                   and not authorized, change claim status
// *                   to 'RPA' for batch processing.
// * 07-24-89  gdecke  allow duplicate zone/location,uom,qualty
// * 08-01-89  gdecke  db2 structure changes: clarec, clprec,
// *                   cl2rec.
// * 09-14-89  gdecke  add logic to handle varible entered zone
// *                   /location, uom and quality codes.
// *                   io1330,io1360 changed to use xum, xqa.
// * 10-19-89  gdecke  adjust logic for variable zone/location
// *                   and variable palet nbr.
// * 01-19-90  gdecke  db2 structure changes for january.
// * 02-09-90  gdecke  allow loc 7 or 8 if clrtn whse = '04'.
// * 02-14-90  sgorga  In process CL0Z001 -
// *                   Modified application to go to the detail
// *                   screen (CL0ZM005) if the claim doesn't
// *                   have items on it that have been returned
// *                   or authorized for return (the CL0ZW01.-
// *                   CL0ZWARF flag will = 'n').  Added three
// *                   new statement groups (CL0ZSRA, RI, DI)
// *                   to check.  See more comments in CL0Z001.
// *
// *                   In process CL0Z200 -
// *                   Added code to check CL0ZWARF flag = 'n'.
// *                   If true, perform CL0ZS05 and do not
// *                   perform CL0ZS45.  More comments in
// *                   CL0Z200.
// *
// * 03-07-90  SGORGA  Added code to store information that
// *                   PF18 key was pressed.  CL0G will use
// *                   information to flow back to CL0Z appl. -
// *                   see CL0G comments.
// * 04-03-90  SGORGA  DB2 structure changes.
// *                   On table and record list, removed
// *                   'xsdtbl' and replaced with 'pc2rec'.
// *                   In Process CL0Z220:  Replaced code
// *                   looking at XSDTBL with code that calls
// *                   IO3340 using PC2REC (DPRODC.VPRDCU01).
// * 04-12-90  gdecke  allow owner group code default of '00'
// * #cl800            for warehouse number '03'
// * 04-12-90  SGORGA  Changed cl0zm005 map heading 'spec' to
// *                   'iseg' for inventory segment.  Changed
// *                   map field name from xsdcd to pc2inseg.
// *                   Also, in all of CL0Z appl, changed:
// *                     - cl0zm005.xsdcd to cl0zm005.pc2inseg
// *                     - cl0zw01.xsdcd  to cl0zw01.pc2inseg
// *                     - cl0zw05.xsdcd  to cl0zw05.pc2inseg
// * 05-31-90 CHELLM  added edit to prevent product brand -
//                    claim brand mis-match.  Added Brand Code
//                    to the claim header area of maps 001 005.
// * 06-06-90 chellm  replaced the product brand - claim old
// *                  division edit with product division -
// *                  claim order type division.
// *                  added XOTTBL to this application.
// * 07-03-90 gdecke  change number of occurances in table
// *                  cl0zw02 to 500.
// *#cl909  12-04-90  gdecke  add sales sample claim processing
// *#CL920,CL974 01-09-91 GDECKE COLOR/DIMENSION CHANGES.
// *#cl909  01-10-91  gdecke  EXPAND CL0ZW02 TO 1450 OCCURANCES
// *#cl909  01-30-91  gdecke  FIX SORT (CL0ZS20)-CALL XC0040.
// *#cl0    02-12-91  gdecke  FEB. DB2 TABLE CHANGES.
// *#cl0    02-18-91  gdecke  INITIALIZE CL2TOSLF IN CL0ZS40,4A
// *#cl0    02-22-91  chellm  rename cllibyid to xxxusrid.
// *#cl909  02-22-91  gdecke  add 'sty=', 'top', 'bot' function
// *                          add sales sample select-all.
// *#cl0    05-28-91  gdecke  allow whse 51,32,04 mix: cl0zs23
// *#cl0    06-14-91  gdecke  JUNE 1991 DB2 TABLE CHANGES.
// *#cL0    06-18-91  gdecke  LET NON SALES SAMPLE USE DIRECT
// *                          POSITINING WITH SELECT-ALL.
// *        08-08-91  wjohns  Renamed application and commarea
// *                            referrences to renamed claims
// *                            appls.
// *#cl0    09-16-91  gdecke  added 'cost' pricing for employee
// *                          store and other customers.
// *        10-01-91  ahowar  changed proc and sgrp from "cl"
// *                          to "kl".
// *#cl0    01-06-92  gdecke  SET MAPS CLEAR IN KL0Z001.
// *#CL0    01-13-92  sgorga  clear xaoaw02, ta1rec, ta2rec.
// *                          kl0zs90, kl0z001.
// *#CL0    02-28-92  GDECKE  USE COLOR/XDM WILDCARD VALUE WHEN
// *                          NO PRICE FOUND USING COLOR/XDM
// *                          CHANGED KL0ZS0P
// *#CL0    03-13-92  GDECKE  MARCH DB2 TABLE CHANGES. ADD
// *                          LOGIC TO HANDLE XEG-ENGR-DIFF-CD,
// *                          XBK-BK-SESN-CD, OP-BK-YR.
// *#CL0    04-13-92  TWATSO  APRIL DB2 TABLE CHANGES. ADD
// *                          OP-BK-MO.
// *        05-07-92  twatso  increased the length of kl0zm010-
// *                          claclmnb. Numbers were being
// *                          truncated.
// *        12-02-92  lgross  Direct market changes.  Write
// *                          a tag record to dclaim.vdmact001
// *                          when 'cdr' claim is marked
// *                          complete
// *                          Changed: KL0Z-GET-ACCT-CLS,
// *                          KL0ZS-WRIT-DM, KL0ZS-WRIT-DM-REC,
// *                          KLL0Z001, KL0Z120, KL0Z230
// * 01-26-93  bcourt  change 1 proc to sgrp.
// * 02-08-93  bcourt  Add KL14tbl of active consumer accounts.
// * 03-10-93  bcourt  Change when csw activity log written:
// *                   KL0ZS-WRIT-DM.
// *  5-05-93  BCOURT  Add menu option 19, like 09.
// *  6-03-93  BCOURT  Since side1 products converted to NIKE
// *             brand, allow brand '01' prod on brand '05' clm
// * 10-21-93  GDECKE  Remove reference to clwrec select list.
// *               Fix bad reference to status-cd2:alias=ycscd
// * 10-26-93  GDECKE  reinstate use of clwrec select list
// * 11-12-93  GDECKE  NOV. 93' DB2 TABLE CHANGES. KL0ZS90
// * 12-15-93  JCAREY  Added code for upc relabeling. The new
// *                   remerchandising option was added to the
// *                   kl0zm010 screen and the cost is now
// *                   added to the total remerchandising cost.
// *                   Also blocked quantity entry for options
// *                   that don't apply.
// *                   para: kl0z001,320,s84,s88,s91,s9a, and
// *                   kl0z300.
//  03-11-94 BCourt  Rename CLFREC.XXXADDRn to XXX-ADDRn.
//              Do NOT rename map addr names from 30 to 38 char
//                in KL0ZS86, S93 and S94.
//              KL0ZS0D rename sy6cstfl to xqacd and add
//                defaults for country & currency.
//              Add group item to CL0ZW01.
//  04-05-94 BCourt  Default owner group to '00' for whse '25'.
//              Similar to whse '03', '51'.  KL0ZS45.
//  02-07-97 KSHAW   ADDED EQUIPMENT WAREHOUSE (70, 72) EDITS
//                   TO BYPASS STOCK LOCATE LOGIC AND TO
//                   SET THE DETAIL STOCK LOCATE HEADER AND
//                   DATA ENTRY FIELDS TO AUTO SKIP DARK.
//                   EFFECTED STATEMENT GROUPS:
//                   KL0Z
//                   KL0ZM005
//                   KL0ZS45
//                   KL0ZS57
//                   KL0ZS67
//                   KL0Z200
//                   KL0Z220
//  07-15-97 KSHAW   quality code for warehouse 70 & 72
//                   was not defaulting to 01 when blank.
//                   kl0zs45.
//  03-03-98 rgilli  Y2K MODIFICATIONS MADE TO:
//                   Regenerate to include new version of
//                   xx0xs01.
//                   KL0ZS27: Change date compare from yymmdd
//                            to ccyymmdd.
//                   KL0ZS37: Add century windowing.
//                   KL0ZS40: Add century windowing.
//                   KL0ZS4A: Add century windowing.
//  11-06-98 GDECKE  ADD LOGIC TO CHECK GPC, STYLE, COLOR,UOM
//                   BEFORE DOING ADDS OR CHANGES ON VRTSIT01.
//  03-29-99 marbuc  ADD bypass of stock locate for whse 51
//  07-17-01 DSINHA  Added SAP RTN SO NBR as display field on
//                   map KL0ZM001. Default the price to zero.
//  07-27-01 NJANA   Commented out the code for not validating
//                   location and the palate code
//  11-28-01 SVIJAY  RECOMPILED DUE TO CHANGES IN CLPREC.
// ************************************************************
// *********************
Program KL0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0ZW01 CL0ZW01; // record
  CL0ZW02 CL0ZW02; // record
  CL0ZW03 CL0ZW03; // record
  CL0ZW04 CL0ZW04; // record
  CL0ZW05 CL0ZW05; // record
  CL0ZW06 CL0ZW06; // record
  CL0ZW07 CL0ZW07; // record
  CL0ZW08 CL0ZW08; // record
  CL0ZW09 CL0ZW09; // record
  CL2REC CL2REC; // record
  CLAREC CLAREC; // record
  CLCREC CLCREC; // record
  CLFREC CLFREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLMREC CLMREC; // record
  CLNREC CLNREC; // record
  CLOREC CLOREC; // record
  CLPREC CLPREC; // record
  CLQREC CLQREC; // record
  CLUREC CLUREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV5REC IV5REC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC { redefines = MN1REC }; // record
  PC2REC PC2REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VDMACT01 VDMACT01; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KL14TBL; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCITBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YDRTBL {deleteAfterUse = yes}; // table
  use YDSTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use KL0ZM.KL0ZM001,  // forms
      KL0ZM.KL0ZM005, 
      KL0ZM.KL0ZM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0Z000: KL0Z000();
    exit program;
    KL0Z001: KL0Z001();
    KL0Z050: KL0Z050();
    KL0Z100: KL0Z100();
    KL0Z110: KL0Z110();
    KL0Z120: KL0Z120();
    KL0Z125: KL0Z125();
    KL0Z200: KL0Z200();
    KL0Z210: KL0Z210();
    KL0Z220: KL0Z220();
    KL0Z300: KL0Z300();
    KL0Z310: KL0Z310();
    KL0Z320: KL0Z320();
  end // end main
end // end KL0Z

// main flow
Function KL0Z000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Z000";
  COMMAREA.CACURRAP = "KL0Z";

  KL0Z001(); /* initilize the application*/

  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0Z050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0Z000

// init claims menu processing
Function KL0Z001()
   /* **********************************************************/
   /* INITIALIZE CLAIMS MENU PROCESSING                  **/
   /* **********************************************************/
   /* M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* -----------------------------------------------------------**/
   /* 02-21-90  sgorga                                       **/
   /* Added code to check 3 tables for authorized returns or **/
   /* returned items (whether returned 'RTS' or defective).  **/
   /* Created a new working storage field in CL0ZW01 called  **/
   /* CL0ZWARF (claims-auth-or-returned-items flag).         **/
   /* This field contains a 'y' if there have been items on  **/
   /* the claim that were returned or authorized for return. **/
   /* **********************************************************/
   /* MAINTENANCE HISTORY                       **/
   /* 09/16/91  GDECKE  GET EFFECTIVE DATE FOR COST LOOKUP.  **/
   /* 01/06/92  GDECKE  SET MAPS CLEAR.                      **/
   /* 01/13/92  sgorga  Set xa0aw02, ta1rec, ta2rec empty.   **/
   /* 12-02-92  lgross used ta0020 to get dates for later    **/
   /* db2 updates                                  **/
   /* 11-30-93  jcarey  Added the upc charges move from the  **/
   /* remerchandising table (yrm) into     **/
   /* storage.                             **/
   /* **********************************************************/
  CLXREC.CLXCPROC = "CL0Z001";
  set KL0ZM001 initial;
  set KL0ZM005 initial;
  set KL0ZM010 initial;
  set CL0ZW01 empty;
  set CL0ZW02 empty;
  set CL0ZW03 empty;
  set CL0ZW04 empty;
  set CL0ZW05 empty;
  set CL0ZW06 empty;
  set CL0ZW07 empty;
  set CL0ZW08 empty;
  set CL0ZW09 empty;
  set CLAREC empty;
  set CLFREC empty;
  set CLGREC empty;
  set CLJREC empty;
  set CLKREC empty;
  set CLLREC empty;
  set CL2REC empty;
  set CLMREC empty;
  set CLNREC empty;
  set CLOREC empty;
  set CLPREC empty;
  set CLQREC empty;
  set CLXREC empty;
  set KUCREC empty;
  set KUMREC empty;
  set SY1REC empty;
  set SY2REC empty;
  set SY3REC empty;
  set SY4REC empty;
  set IVEREC empty;
  set SP5REC empty;
  set SYCREC empty;
  set SY6REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set XA0AW02 empty;


   /* TEMP001;*/

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

  XPCL011(); /* claims entry check*/

  XPCL008(); /* check activity*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  CL0ZW01.CL0ZWWRN = "N"; /* warning flag*/
  CL0ZW01.CL0ZWNSW = "N"; /* clnrec switch*/
  CL0ZW01.CL0ZWIXM = 1450; /* maximum size of product array*/
  CL0ZW01.CL0ZWSXM = 150; /* maximum size of size array*/
   /* ********************************/
   /* if cl0zwsxm is changed,*/
   /* must change cl0zw05 & cl0zw06,*/
   /* also change if statement at*/
      /* bottom of cl0zs45*/
   /* ********************************/
  CLXREC.CLXMAXLN = 9; /* maximum number of lines on m001*/
  CL0ZW01.CL0ZWMLN = 10; /* maximum number of lines on m005*/
  CL0ZW01.CL0ZWHAX = 18; /* used with pf7 for map m001*/
  CL0ZW01.CL0ZWHSZ = 20; /* used with pf7 for map m005*/
  CLXREC.CLXBLDAY = "Y"; /* build array*/
  CL0ZW01.CL0ZWFST = "Y"; /* first time thru flag*/
  CL0ZW01.CL0ZWCMD = "Y"; /* claim nbr modified switch*/

  KL0ZS02(); /* get todays date*/
  KL0ZS03(); /* determine mode*/

  CLXREC.CLXSNAME[1] = "KL0ZM001";
                                   /* init screens used in this appl*/
  CLXREC.CLXSNAME[2] = "KL0ZM005";
  CLXREC.CLXSNAME[3] = "KL0ZM010";

       /* *****************************/
       /* decide which screen to go to*/
       /* *****************************/

    /* * set claims-authorized-or-returned-items-flag to 'no'*/
  CL0ZW01.CL0ZWARF = "N";

    /* * below code checks three tables to determine if any*/
    /* * items on the claim have been returned or authorized for*/
    /* * return.  If no (If CL0ZWARF flag = 'N'), go to detail*/
    /* * screen (KL0ZM005).*/

  KL0ZSRA(); /* ck return authoriz. items tbl*/

  if (CL0ZW01.CL0ZWARF == "N") /* no return authoriz. items*/
    KL0ZSRI(); /* ck claims rts item detail tbl*/
  end

  if (CL0ZW01.CL0ZWARF == "N") /* no returned rts items*/
    KL0ZSDI();
                                   /* ck claims def items detail tbl*/
  end

  if (CL0ZW01.CL0ZWARF == "N") /* no retnd def items (or rts or auth*/
                                   /* rtn items)*/
    CLXREC.CLXCSCRN = "KL0ZM005"; /* display detail screen*/
  else
    if (CLWREC.CLWYZSWT == "Y") /* came from cl0y application*/
      CLXREC.CLXCSCRN = "KL0ZM005"; /* display detail screen*/
    else
      CLXREC.CLXCSCRN = "KL0ZM001"; /* display summary screen*/
    end
  end

    /* GET CURRENT DATE TO USE AS EFFECTIVE DATE FOR COST LOOKUP*/

  XX0XS01();
  CL0ZW01.CL0ZWPED = XX0XW01.XX0XWDAT;

  if (CLAREC.XGPCD in YRMTBL.XGPCD)
    CL0ZW01.YRMRESTK = YRMTBL.YRMRESTK[sysVar.arrayIndex];
    CL0ZW01.YRMREBAG = YRMTBL.YRMREBAG[sysVar.arrayIndex];
    CL0ZW01.YRMREBOX = YRMTBL.YRMREBOX[sysVar.arrayIndex];
    CL0ZW01.YRMTAGRM = YRMTBL.YRMTAGRM[sysVar.arrayIndex];
    CL0ZW01.YRMUNLCE = YRMTBL.YRMUNLCE[sysVar.arrayIndex];
    CL0ZW01.YRMDFRGT = YRMTBL.YRMDFRGT[sysVar.arrayIndex];
    CL0ZW01.YRM-REUPC-CHG = YRMTBL.YRM-REUPC-CHG[sysVar.arrayIndex];
  else
    CL0ZW01.YRMRESTK = 0;
    CL0ZW01.YRMREBAG = 0;
    CL0ZW01.YRMREBOX = 0;
    CL0ZW01.YRMTAGRM = 0;
    CL0ZW01.YRMUNLCE = 0;
    CL0ZW01.YRMDFRGT = 0;
    CL0ZW01.YRM-REUPC-CHG = 0;
  end


     /* *******************/
     /* set map id's, date*/
     /* *******************/

  KL0ZM001.XXXERRID = "KL0Z100"; /* map process name*/
  KL0ZM005.XXXERRID = "KL0Z200";
  KL0ZM010.XXXERRID = "KL0Z300";

  KL0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  KL0ZM005.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0ZM010.XXXCURDT = VGVar.currentShortGregorianDate;

  set KL0ZM005.CL0ZMUML protect, invisible;
  set KL0ZM005.CL0ZMXUM[1] protect, invisible;
  set KL0ZM005.CL0ZMXUM[2] protect, invisible;
  set KL0ZM005.CL0ZMXUM[3] protect, invisible;
  set KL0ZM005.CL0ZMXUM[4] protect, invisible;
  set KL0ZM005.CL0ZMXUM[5] protect, invisible;
  set KL0ZM005.CL0ZMXUM[6] protect, invisible;
  set KL0ZM005.CL0ZMXUM[7] protect, invisible;
  set KL0ZM005.CL0ZMXUM[8] protect, invisible;
  set KL0ZM005.CL0ZMXUM[9] protect, invisible;
  set KL0ZM005.CL0ZMXUM[10] protect, invisible;
   /* ** get dates for updating databases*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN KL0Z001";
  end

end // end KL0Z001

// get invoice specialty tbl line
Function KL0Z016()
   /* *************************************************************/
   /* *                                                          **/
   /* *          GET INVOICE SPECIALTY TABLE LINE                **/
   /* *                                                          **/
   /* *  1) find company account type code, PRICE/COSE INDICATOR **/
   /* *     for product pricing.                                 **/
   /* *                                                          **/
   /* ------------------------------------------------------------**/
   /* /   M A I N T E N A N C E     H I S T O R Y    L O G          **/
   /* ------------------------------------------------------------**/
   /* 09/18/91   GDECKE   COPY CL0R016 TO GET INVOICE SPECIALTY **/
   /* TABLE LINE TO HELP GET COST FILE PRICE**/
   /* ------------------------------------------------------------**/
   /* *************************************************************/

  CL0ZW01.XATCD = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    CL0ZW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end

     /* ********************************************************/
     /* read invoice speciality table to get:*/
       /* price/cost indicator - use product price or cost?*/
       /* price/cost type - either xpycd or xcocd*/
       /* price/cost pct - signed percent field to add to 100%*/
                        /* to make a multiplier for the std*/
                        /* price/cost value.*/
     /* table record may have blanks in order type or acct class,*/
     /* so the order of reading is:*/
     /* 1. read for acct type, acct class & order type*/
        /* if not found,*/
     /* 2. read for acct type, acct class & blank o/t*/
        /* if not found,*/
     /* 3. read for acct type, blank acct class & blank o/t*/
        /* if not found,*/
          /* zero price/cost indicator, so clngrprc is 0.*/
     /* ********************************************************/

     /* data from the company*/

  IVEREC.XATCD = CL0ZW01.XATCD; /* account type*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* account class*/
  IVEREC.XOTCD = CLAREC.XOTCD; /* order type*/

  call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence, matched all 3 codes*/
  else
    IVEREC.XOTCD = " ";
    call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence, matched 2 codes*/
    else
      IVEREC.XAUCD = " ";
      call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence, matched 1 code*/
      else
        IVEREC.IVEPCIND = " "; /* no match at all*/
        IVEREC.IVEPCTYP = " ";
        IVEREC.IVEPCPCT = 0;
      end
    end
  end


end // end KL0Z016

// decide which map to show
Function KL0Z050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Z050"; /* set current process name*/


  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;


  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/

  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0); /* clear error nbr*/


  if (CLXREC.CLXSCRNX == 1) /* if screen cl0zm001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0Z100(); /* inquiry selects*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0zm005*/
      while (CLXREC.CLXEOSF == "N") /* show until user is done*/
        KL0Z200(); /* customer sub-selects*/
      end
    else
      if (CLXREC.CLXSCRNX == 3) /* if screen cl0zm010*/
        while (CLXREC.CLXEOSF == "N") /* show until user is done*/
          KL0Z300(); /* slsmn/whse sub-selects*/
        end
      else
        TA1REC.TA1MAP = CLXREC.CLXCSCRN;
        TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
        TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
        XPCL010(); /* abend*/
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0b050...*/
       /* else*/
         /* the perform will auto return to cl0b000.*/

end // end KL0Z050

// map inquiry selections
Function KL0Z100()
   /* ------------------------------------------------------------**/
         /* MAP INQUIRY SELECTIONS                               **/

   /* ***************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G            **/
   /* ------------------------------------------------------------**/
   /* DATE     PGMR     DESCRIPTION                             **/
   /* ------------------------------------------------------------**/
   /* 09/18/91   GDECKE   MODIFY LOGIC TO GET COST FILE PRICES.   **/
   /* (PERFORM CL0Z016, CL0ZS0F)            **/
   /* 03/13/92   GDECKE   MARCH DB2 TABLE CHANGES.                **/
   /* 04/13/92   TWATSO   APRIL DB2 TABLE CHANGES.                **/
   /* 10/21/93   GDECKE   REMOVE REFERENCE TO CLWREC SELECT LIST  **/
   /* 10/26/93   GDECKE   REINSTATE USE OF CLWREC SELECT LIST.    **/
   /* ***************************************************************/


   /* ************************************************************/
   /* *    process screen kl0zm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0z050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Z100";

  if (CLXREC.CLXBLDAY == "Y")
    KL0ZS04(); /* build array*/
  end

  if (CLXREC.CLXBLDSC == "Y")
    KL0ZS22(); /* build screen*/
    CLXREC.CLXBLDSC = "N";
  end

  if (CLXREC.CLXERRF == "N") /* no errors found*/
    if (KL0ZM001.SY1STNBR[1] == " ")
      set KL0ZM001.CLACLMNB cursor;
    else
      if (CL0ZW01.CL0ZWSAM == "Y")
         /* next sentence;*/
      else
        set KL0ZM001.CL0ZMSEL[1] cursor;
      end
    end
  end


   /* ***********************************************************/
  converse KL0ZM001 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  CL0ZW01.CL0ZWADD = "N"; /* add flag*/
  KL0ZS2B(); /* SET CL0ZW06 EMPTY;*/

  KL0Z110(); /* edit pfkeys*/
   /* may transfer out of application*/

  if (converseVar.validationMsgNum != 0) /* error encountered in pfkey edit*/
    return;
  end


  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock count*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock may have occurred during*/
    return; /* building of array*/
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    return;
  end

   /* ********************************************************/
       /* if claim nbr modified - verify claim*/

  if (KL0ZM001.CLACLMNB == 0)
    converseLib.validationFailed(5);
    CLXREC.CLXERRF = "Y";
    set KL0ZM001.CLACLMNB cursor, modified, bold;
    return;
  end

  if (KL0ZM001.CLACLMNB is modified) /* claim nbr*/
    CLAREC.CLACLMNB = KL0ZM001.CLACLMNB;
    CL0ZW01.CL0ZWNSW = "N";
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS24(); /* select clarec*/
    end

    if (SQLCA.VAGen_SQLCODE != 0)
      set KL0ZM001.CLACLMNB cursor, modified, bold;
      converseLib.validationFailed(321); /* claim not found*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    else
      if (CLAREC.YCTCD != "RTS"
       && CLAREC.YCTCD != "DEF"
       && CLAREC.YCTCD != "CDR")
        converseLib.validationFailed(233); /* claim not valid for this pgm*/
        CLXREC.CLXERRF = "Y"; /* error flag*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
        set KL0ZM001.CLACLMNB cursor, modified, bold;
      else
        set KL0ZM001.CLACLMNB initialAttributes;
        CL0ZW01.CL0ZWCMD = "Y"; /* claim nbr modified switch*/
      end
    end
  end

  if (CLAREC.CLACLMNB == 0) /* USER MUST INPUT CLAIM NUMBER*/
     /* NEXT SENTENCE*/
  else
    if (KUCREC.KUCCOID == CLAREC.KUCCOID) /* if already have dcust.vcmpny01*/
       /* next sentence*/
    else
      set KUCREC empty;
      KUCREC.KUCCOID = CLAREC.KUCCOID;
      CL0ZW01.CL0ZWDFL = "Y";
      CL0ZW01.CL0ZWDCT = 0;
      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS0F(); /* GET CUSTOMER RECORD*/
      end
      if (CL0ZW01.CL0ZWDCT > 0)
        return;
      end
    end
  end

    /* GET ACCOUNT TYPE CODE FROM XAUTBL AND SELECT INVOICE SPECIALTY*/
    /* TABLE LINE TO DETERMINE COST TYPE AND PRODUCT PRICES.*/
  KL0Z016();

   /* ************************************************************/
      /* if claim nbr or insp nbr modified - verify insp nbr*/

  if (KL0ZM001.CL2ISNBR is modified /* insp nbr*/
   || KL0ZM001.CLACLMNB is modified) /* claim nbr*/
    CL0ZW01.CL0ZWISP = " ";
    CL0ZW01.CL0ZWNSW = "N";
    if (KL0ZM001.CL2ISNBR == " ") /* request new insp nbr*/
      CL0ZWHDF = CL0ZW01.CL0ZWUDF;
      KL0ZS03(); /* check security*/
      if (CL0ZW01.CL0ZWUDF == "Y") /* in update mode*/
        /* next sentence*/
      else
        CL0ZW01.CL0ZWUDF = CL0ZW01.CL0ZWHDF;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(456);
        set KL0ZM001.CL2ISNBR cursor, modified, bold;
        KL0ZM005.CL2ISNBR = 0;
      end
    else
      if (KL0ZM001.CL2ISNBR == "**")
        if (KL0ZM001.CLACLMNB is modified)
          CLXREC.CLXERRF = "Y";
        else
          CL0ZW01.CL0ZWISP = KL0ZM001.CL2ISNBR;
        end
      else
        if (KL0ZM001.CL2ISNBR >= "01"
         && KL0ZM001.CL2ISNBR <= "99")
          KL0ZS26(); /* select unique insp nbr*/
        else
          CLXREC.CLXERRF = "Y";
        end
      end
    end
    if (CLXREC.CLXERRF == "Y")
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(456);
        set KL0ZM001.CL2ISNBR cursor, modified, bold;
      end
    else
      set KL0ZM001.CL2ISNBR initialAttributes;
    end
  end


  if (KL0ZM001.CLACLMNB is modified /* claim nbr*/
   || KL0ZM001.CL2ISNBR is modified) /* insp nbr*/
    if (CLXREC.CLXERRF == "N")
      if (KL0ZM001.CL2ISNBR == " ") /* requesting new insp nbr*/
        CL0ZW01.CL0ZWNBR = 0;
        KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        KL0ZM005.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        KL0ZM010.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        CL0ZW01.CLACISNB = 0;
        CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec flag*/
        CLXREC.CLXBLDSC = "Y";
        CLXREC.CLXBLDAY = "Y";
      else
        CLXREC.CLXBLDAY = "Y";
      end
    end
    return;
  end

   /* ********************************************************/
                    /* edit routine*/

  KL0Z120(); /* edit entries*/

  if (CLXREC.CLXERRF == "Y") /* error encountered*/
    return;
  end

  if (converseVar.eventKey is pf12) /* confirm only*/
    converseLib.validationFailed(340); /* press enter to update*/
    return;
  end


   /* ********************************************************/
               /* update process*/

  if (CL0ZW01.CL0ZWUJR == "Y") /* update cljrec flag*/
    KL0ZS28(); /* update cljrec*/
  end

  if (converseVar.validationMsgNum != 0 /* error encountered*/
   || CLXREC.CLXERRF == "Y")           
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    if (converseVar.validationMsgNum == 18) /* record already updated*/
      set KL0ZM001.CLACLMNB cursor, modified, bold;
    end
    return;
  end

  if (CL0ZW01.CL0ZWDEL == "Y") /* deletes selected*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLMREC.CLACLMNB = KL0ZM001.CLACLMNB;
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
    CLMREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLMREC.CLHSEQNB = KL0ZM001.CLHSEQNB;

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS30(); /* select clmrec header*/
    end

    if (CL0ZW01.CL0ZWDCT > 0 /* if deadlock exists*/
     || CLXREC.CLXERRF == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 0)
      CLXREC.CLXLINEX = 1;
      while (CLXREC.CLXLINEX < 10)
        if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "X")
          CLNREC.CLACLMNB = KL0ZM001.CLACLMNB;
          CLNREC.XUMCD = KL0ZM001.XUMCD[CLXLINEX];
          KL0ZS31(); /* delete clnrecs*/
          if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim do the same*/
            CLNREC.CLACLMNB = KL0ZM001.CL0ZMCLM;
                                   /* deletes for second*/
            CLNREC.XUMCD = CL0ZW01.CL0ZWSSU; /* sales sample claim*/
            KL0ZS31();
          end
        end
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      end
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* if deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (KL0ZM001.CL2ISNBR == "00")
    if (CL0ZW01.CL0ZWU2R == "Y"
     && CL0ZW01.CL0ZWNSW == "Y")
      KL0ZS36();
    end
  end

  if (CL0ZW01.CL0ZWU2R == "Y") /* update cl2rec flag*/
    if (CL0ZW01.CL0ZW2SW == "Y") /* if cl2rec exists*/
      if (CL2REC.CLACLMNB != KL0ZM001.CLACLMNB)
                                   /* if cl2rec belongs to second*/
        CL2REC.CLACLMNB = KL0ZM001.CLACLMNB; /* sales sample claim then*/
        CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* fetch the primary claim*/
        CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        CL2REC.CLHSEQNB = KL0ZM001.CLHSEQNB;
        CL0ZW01.CL0ZWDFL = "Y"; /* deadlock count--cl2rec line.*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock flag*/
        while (CL0ZW01.CL0ZWDFL == "Y")
          KL0ZS08(); /* get cl2rec inspection for primary*/
                                   /* claim*/
        end
        if (CL0ZW01.CL0ZWDCT > 0) /* show message if deadlocked*/
          return;
        end
      end
      KL0ZS37(); /* update cl2rec*/
      if (CL0ZW01.CL0ZWSAM == "Y")
                                   /* if sales sample claim - update cl2rec*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* on secondary claim get*/
        CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* the secondary clm cl2rec*/
        CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        CL2REC.CLHSEQNB = KL0ZM001.CLHSEQNB;
        CL0ZW01.CL0ZWDFL = "Y"; /* deadlock count*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock flag*/
        while (CL0ZW01.CL0ZWDFL == "Y")
          KL0ZS08(); /* get cl2rec inspection for secondary*/
                                   /* claim*/
        end
        if (CL0ZW01.CL0ZWDCT > 0) /* show message if deadlocked*/
          return;
        end
        KL0ZS37();
      end
    else
      KL0ZS40(); /* insert cl2rec*/
      if (CL0ZW01.CL0ZWSAM == "Y")
                                   /* if sales sample claim - insert cl2rec*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* on secondary claim*/
        KL0ZS4A();
      end
    end
    if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample claim and*/
     && CL2REC.YCICD == "RMS")  /* inspection status is 'rms'*/
      KL0ZS3A(); /* ; update claims stock records to*/
                                   /* combine*/
    end /* units of measure 'R' and 'L'*/
    KL0ZS23(); /* reset security using ycicd*/
  end

  if (converseVar.validationMsgNum != 0 /* error encountered*/
   || CLXREC.CLXERRF == "Y")           
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    if (converseVar.validationMsgNum == 18) /* record already updated*/
      set KL0ZM001.CLACLMNB cursor, modified, bold;
    end
    return;
  end

  if (CL0ZW01.CL0ZWUMR == "Y") /* update clmrec flag*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set CL0ZW04 empty;
    CLMREC.CLACLMNB = KL0ZM001.CLACLMNB;
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
    CLMREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLMREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
    CL0ZW04.CL0ZW4SQ = "SM";

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS13(); /* sum clmrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
      return;
    end

    if (CL0ZW04.CL0ZW4I1 >= 0)
      CLMREC.CLMTNCRQ = CL0ZW04.CL0ZW4Q1;
    else
      CLMREC.CLMTNCRQ = 0;
    end
    if (CL0ZW04.CL0ZW4I1 >= 0)
      CLMREC.CLMTRTSQ = CL0ZW04.CL0ZW4Q2;
    else
      CLMREC.CLMTRTSQ = 0;
    end
    if (CL0ZW04.CL0ZW4I3 >= 0)
      CLMREC.CLMRMAMT = CL0ZW04.CL0ZW4Q3;
    else
      CLMREC.CLMRMAMT = 0;
    end

    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS42(); /* update clmrec*/
    end

    if (converseVar.validationMsgNum != 0 /* error encountered*/
     || CLXREC.CLXERRF == "Y")           
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      if (converseVar.validationMsgNum == 18) /* record already updated*/
        set KL0ZM001.CLACLMNB cursor, modified, bold;
      end
      return;
    end

    if (CL0ZW01.CL0ZWCLM == "Y") /* if sales sample claim update 2nd clm*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      set CL0ZW04 empty;
      CLMREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
      CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
      CLMREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
      CLMREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
      CL0ZW04.CL0ZW4SQ = "SM";

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS13(); /* sum clmrec*/
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end

      if (CL0ZW04.CL0ZW4I1 >= 0)
        CLMREC.CLMTNCRQ = CL0ZW04.CL0ZW4Q1;
      else
        CLMREC.CLMTNCRQ = 0;
      end
      if (CL0ZW04.CL0ZW4I1 >= 0)
        CLMREC.CLMTRTSQ = CL0ZW04.CL0ZW4Q2;
      else
        CLMREC.CLMTRTSQ = 0;
      end
      if (CL0ZW04.CL0ZW4I3 >= 0)
        CLMREC.CLMRMAMT = CL0ZW04.CL0ZW4Q3;
      else
        CLMREC.CLMRMAMT = 0;
      end

      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS42(); /* update clmrec*/
      end

      if (converseVar.validationMsgNum != 0 /* error encountered*/
       || CLXREC.CLXERRF == "Y")           
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        if (converseVar.validationMsgNum == 18) /* record already updated*/
          set KL0ZM001.CL0ZMCLM cursor, modified, bold;
        end
        return;
      end
    end
  end

  if (CL0ZW01.CL0ZWUAR == "Y" /* update clarec flag*/
   || CL0ZW01.CL0ZWUAR == "I") /* ;  inspection number only*/
    KL0ZS43(); /* update clarec*/
  end

  if (converseVar.validationMsgNum != 0 /* error encountered*/
   || CLXREC.CLXERRF == "Y")           
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    if (converseVar.validationMsgNum == 18) /* record already updated*/
      set KL0ZM001.CLACLMNB cursor, modified, bold;
    end
    return;
  end

  CL0ZW01.CL0ZWUJR = "N"; /* update cljrec flag*/
  CL0ZW01.CL0ZWU2R = "N"; /* update cl2rec flag*/
  CL0ZW01.CL0ZWUAR = "N"; /* update clarec flag*/
  CL0ZW01.CL0ZWUMR = "N"; /* update clmrec flag*/
  CL0ZW01.CL0ZWDEL = "N"; /* delete flag*/
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX < 10)
    if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "X")
      KL0ZM001.CL0ZMSEL[CLXLINEX] = " ";
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commits deletes at this point*/


   /* *********************************************************/
                /* determine flow*/


   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0z100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0z050.*/
     /* if the end-of-application flag (clxeoafl) is 'y'*/
        /* we return to cl0z001.*/


  CLXREC.CLXARY1X = 0;


    /* START PROCESSING SELECT OPTIONS.*/

  if (CL0ZW01.CL0ZWSEL == "Y" /* selections were entered*/
   || CL0ZW01.CL0ZWALL == "Y" /* select all*/
   || CL0ZW01.CL0ZWSAL == "Y") /* SALES SAMPLE select-all*/
    CL0ZW01.SY1STNBR = " ";
    CL0ZW01.SY2CLRID = " ";
    CL0ZW01.XDMCD = " ";
    CL0ZW01.CL0ZWQSW = "N";
    CLXREC.CLXARY1X = CLXREC.CLXARAYX - 9;
  end

    /* PROCESS FOR SELECT-ALL*/

  if (CL0ZW01.CL0ZWALL == "Y")
    CLXREC.CLXARAYX = 1;
    while (CLXREC.CLXARAYX < CLXREC.CLXLSTAX)
      if (CL0ZW01.CL0ZWUDF != "Y"
       || CL0ZW01.CL0ZWUPP == "Y")
        if (KL0ZM001.CLNRTSQ[CLXARAYX] == 0)
          /* next sentence*/
        else
          CL0ZW02.CL0ZWSEL[CLXARAYX] = "S";
          if (CL0ZW01.SY1STNBR == " "
           && CL0ZW01.SY2CLRID == " "
           && CL0ZW01.XDMCD == " ")
            CL0ZW01.SY1STNBR = KL0ZM001.SY1STNBR[CLXARAYX];
            KL0ZM005.SY1STNBR = KL0ZM001.SY1STNBR[CLXARAYX];
            CL0ZW01.SY2CLRID = KL0ZM001.SY2CLRID[CLXARAYX];
            KL0ZM005.SY2CLRID = KL0ZM001.SY2CLRID[CLXARAYX];
            CL0ZW01.XDMCD = KL0ZM001.XDMCD[CLXARAYX];
            KL0ZM005.XDMCD = KL0ZM001.XDMCD[CLXARAYX];
            KL0ZM005.CL0ZMATH = KL0ZM001.CLKAUTHQ[CLXARAYX];
            CL0ZW01.XQACD = CL0ZW02.XQACD[CLXARAYX];
            CL0ZW01.XEGCD = CL0ZW02.XEGCD[CLXARAYX];
            CL0ZW01.XBK-BK-SESN-CD = CL0ZW02.XBK-BK-SESN-CD[CLXARAYX];
            CL0ZW01.OP-BK-YR = CL0ZW02.OP-BK-YR[CLXARAYX];
            CL0ZW01.OP-BK-MO = CL0ZW02.OP-BK-MO[CLXARAYX];
            CL0ZW01.XOWCD = CL0ZW02.XOWCD[CLXARAYX];
            CL0ZW01.XUMCD = CL0ZW02.XUMCD[CLXARAYX];
            CL0ZW02.CL0ZWSEL[CLXARAYX] = " ";
          end
        end
      else
        CL0ZW02.CL0ZWSEL[CLXARAYX] = "S";
        if (CLXREC.CLXARAYX == 1)
          CL0ZW01.SY1STNBR = KL0ZM001.SY1STNBR[CLXARAYX];
          KL0ZM005.SY1STNBR = KL0ZM001.SY1STNBR[CLXARAYX];
          CL0ZW01.SY2CLRID = KL0ZM001.SY2CLRID[CLXARAYX];
          KL0ZM005.SY2CLRID = KL0ZM001.SY2CLRID[CLXARAYX];
          CL0ZW01.XDMCD = KL0ZM001.XDMCD[CLXARAYX];
          KL0ZM005.XDMCD = KL0ZM001.XDMCD[CLXARAYX];
          KL0ZM005.CL0ZMATH = KL0ZM001.CLKAUTHQ[CLXARAYX];
          CL0ZW01.XQACD = CL0ZW02.XQACD[CLXARAYX];
          CL0ZW01.XEGCD = CL0ZW02.XEGCD[CLXARAYX];
          CL0ZW01.XBK-BK-SESN-CD = CL0ZW02.XBK-BK-SESN-CD[CLXARAYX];
          CL0ZW01.OP-BK-YR = CL0ZW02.OP-BK-YR[CLXARAYX];
          CL0ZW01.OP-BK-MO = CL0ZW02.OP-BK-MO[CLXARAYX];
          CL0ZW01.XOWCD = CL0ZW02.XOWCD[CLXARAYX];
          CL0ZW01.XUMCD = CL0ZW02.XUMCD[CLXARAYX];
          CL0ZW02.CL0ZWSEL[CLXARAYX] = " ";
        end
      end
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
  end

    /* PROCESS FOR SELECTION OF INDIVIDUAL LINES*/
           /* OR SALES SAMPLE SELECT-ALL WAS USED*/

  if (CL0ZW01.CL0ZWSEL == "Y"
   || CL0ZW01.CL0ZWSAL == "Y")
    CLXREC.CLXARAYX = 1;
    while (CLXREC.CLXARAYX < CLXREC.CLXLSTAX)
      if (CL0ZW02.CL0ZWSEL[CLXARAYX] == "S")
        CL0ZW01.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];
        KL0ZM005.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];
        CL0ZW01.SY2CLRID = CL0ZW02.SY2CLRID[CLXARAYX];
        KL0ZM005.SY2CLRID = CL0ZW02.SY2CLRID[CLXARAYX];
        CL0ZW01.XDMCD = CL0ZW02.XDMCD[CLXARAYX];
        KL0ZM005.XDMCD = CL0ZW02.XDMCD[CLXARAYX];
        KL0ZM005.CL0ZMATH = CL0ZW02.CLKAUTHQ[CLXARAYX];
        CL0ZW01.XQACD = CL0ZW02.XQACD[CLXARAYX];
        CL0ZW01.XEGCD = CL0ZW02.XEGCD[CLXARAYX];
        CL0ZW01.XBK-BK-SESN-CD = CL0ZW02.XBK-BK-SESN-CD[CLXARAYX];
        CL0ZW01.OP-BK-YR = CL0ZW02.OP-BK-YR[CLXARAYX];
        CL0ZW01.OP-BK-MO = CL0ZW02.OP-BK-MO[CLXARAYX];
        CL0ZW01.XOWCD = CL0ZW02.XOWCD[CLXARAYX];
        CL0ZW01.XUMCD = CL0ZW02.XUMCD[CLXARAYX];
        CL0ZW01.CL0ZWVFL[CLXARAYX] = "V";
        CL0ZW02.CL0ZWSEL[CLXARAYX] = " ";
        CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
      end
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
  end

    /* FINISH PROCESSING SELECT OPTIONS.*/

  if (CL0ZW01.CL0ZWSEL == "Y" /* selections were entered*/
   || CL0ZW01.CL0ZWALL == "Y" /* select all*/
   || CL0ZW01.CL0ZWSAL == "Y") /* SALES SAMPLE select-all*/
    CL0ZW01.XPGCD = " ";
    KL0ZM005.XPGCD = " ";
    KL0ZM005.XOWCD = " ";
    KL0ZM005.XQACD = " ";
    KL0ZM005.XUMCD = " ";
    KL0ZM005.XQAABRV = " ";
    KL0ZM005.XOWABRV = " ";
    KL0ZM005.XPGABRV = " ";
    KL0ZM005.XUMDESC = " ";
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDAY = "Y";
    CLXREC.CLXBLDSC = "Y";
    CLXREC.CLXCSCRN = "KL0ZM005";
    return;
  end


   /* **********************************************************/
     /* handling of scrolling - STYLE SELECTED USING CAITEM*/

  if (converseVar.eventKey is enter
   /* SCROLL DIRECTLY TO SELECTED STYLE*/
   && CL0ZW01.CL0ZWSTL != " ")
    CL0ZW01.CL0ZWCYX = 1;
    while (CL0ZW01.CL0ZWCYX <= CLXREC.CLXLSTAX)
      if (CL0ZW01.CL0ZWSTL == CL0ZW02.SY1STNBR[CL0ZWCYX])
        CLXREC.CLXARY1X = CL0ZW01.CL0ZWCYX; /* SAVE STYLE LOCATION*/
        CLXREC.CLXARY1X = CLXREC.CLXARY1X - 1;
        CLXREC.CLXBLDSC = "Y";
                                   /* REBUILD SCREEN STARTING AT NEW STYLE*/
        CL0ZW01.CL0ZWCYX = 1500; /* FORCE EXIT FROM LOOP*/
      else
        if (CL0ZW01.CL0ZWSTL < CL0ZW02.SY1STNBR[CL0ZWCYX])
          CLXREC.CLXARY1X = CL0ZW01.CL0ZWCYX; /* SAVE STYLE LOCATION*/
          CLXREC.CLXARY1X = CLXREC.CLXARY1X - 3;
          CLXREC.CLXBLDSC = "Y"; /* REBUILD SCREEN STARTING AT NEW STYLE*/
          CL0ZW01.CL0ZWCYX = 1500; /* FORCE EXIT FROM LOOP*/
        else
          CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
        end
      end
    end
    if (CLXREC.CLXARY1X >= CLXREC.CLXLSTAX)
      CLXREC.CLXARY1X = 1;
      converseLib.validationFailed(3);
    end
  end


   /* **********************************************************/
     /* handling of scrolling - GO TO BOTTOM OF SUMMARY LIST*/

  if (converseVar.eventKey is enter /* SCROLL TO BOTTOM OF SUMMARY LIST*/
   && CL0ZW01.CL0ZWBOT == "B")     
    CLXREC.CLXARY1X = CLXREC.CLXLSTAX;
    CLXREC.CLXARY1X = CLXREC.CLXARY1X - 7;
    CLXREC.CLXBLDSC = "Y"; /* REBUILD SCREEN STARTING AT NEW STYLE*/
  end


   /* **********************************************************/
     /* handling of scrolling - GO TO TOP OF SUMMARY LIST*/

  if (converseVar.eventKey is enter /* SCROLL TO TOP OF SUMMARY LIST*/
   && CL0ZW01.CL0ZWBOT == "T")     
    CLXREC.CLXARY1X = 0;
    CLXREC.CLXBLDSC = "Y"; /* REBUILD SCREEN STARTING AT NEW STYLE*/
  end

   /* **********************************************************/
             /* handling of scrolling - pf7 or pf8*/

  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (CLXREC.CLXARAYX >= CL0ZW01.CL0ZWHAX)
      CLXREC.CLXARY1X = CLXREC.CLXARAYX - CL0ZW01.CL0ZWHAX;
      CLXREC.CLXBLDSC = "Y";
    else
      if (CLXREC.CLXARAYX < CL0ZW01.CL0ZWHAX)
        CLXREC.CLXARY1X = 0;
        CLXREC.CLXBLDSC = "Y";
      else
        converseLib.validationFailed(7);
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    if (CLXREC.CLXARAYX >= CLXREC.CLXLSTAX)
      converseLib.validationFailed(3);
    else
      CLXREC.CLXARY1X = CLXREC.CLXARAYX;
      CLXREC.CLXBLDSC = "Y";
    end
    return;
  end
   /* ***********************************************************/
           /* handle pf13 action - rts address*/

  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDSC = "Y";
    CLXREC.CLXBLDAY = "N";
    CLXREC.CLXCSCRN = "KL0ZM010";
    return;
  end

   /* ***********************************************************/
           /* handle pf15 action - add*/

  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CL0ZW01.CL0ZWADD = "Y"; /* add flag*/
    CL0ZW01.CL0ZWQSW = "N";
    CLXREC.CLXBLDSC = "Y";
    CLXREC.CLXBLDAY = "N";
    CL0ZW01.CL0ZWINS = "Y"; /* insert flag*/
    CL0ZW01.SY1STNBR = " ";
    CL0ZW01.SY2CLRID = " ";
    CL0ZW01.XDMCD = " ";
    CL0ZW01.XUMCD = " ";
    CL0ZW01.XOWCD = " ";
    CL0ZW01.XPGCD = " ";
    CL0ZW01.XQACD = " ";
    CL0ZW01.XEGCD = "000";
    CL0ZW01.XBK-BK-SESN-CD = " ";
    CL0ZW01.OP-BK-YR = 0;
    CL0ZW01.OP-BK-MO = 0;
    KL0ZM005.SL8ZNCD2 = " ";
    KL0ZM005.SL8LCCD2 = " ";
    KL0ZM005.XARCD2 = " ";
    KL0ZM005.SY1STNBR = " ";
    KL0ZM005.SY2CLRID = " ";
    KL0ZM005.XDMCD = " ";
    KL0ZM005.CL0ZMSZL = " ";
    KL0ZM005.CL0ZMSZH = " ";
    KL0ZM005.XUMCD = " ";
    KL0ZM005.XOWCD = " ";
    KL0ZM005.XPGCD = " ";
    KL0ZM005.XOWABRV = " ";
    KL0ZM005.XPGABRV = " ";
    KL0ZM005.XUMDESC = " ";
    KL0ZM005.XQACD = " ";
    KL0ZM005.XQAABRV = " ";
    KL0ZM005.CL0ZMATH = 0;
    set CL0ZW05 empty;
    CLXREC.CLXCSCRN = "KL0ZM005";
    return;
  end

  if (KL0ZM001 is modified) /* IF ANY MAP FIELD WAS CHANGED*/
    if (CL0ZW01.CL0ZWSTL != " " /* IF DIRECT PATH TO CHOSEN STYLE*/
     || CL0ZW01.CL0ZWBOT != " ") /* IF POSITIONING AT TOP OR BOTTOM*/
      CL0ZW01.CL0ZWSTL = " "; /* CLEAR SAVED STYLE ID*/
      CL0ZW01.CL0ZWBOT = " "; /* CLEAR TOP/BOTTOM INDICATOR*/
      return; /* DON'T REPOSITION ARRAY INDEX*/
    else
      CLXREC.CLXARY1X = CLXREC.CLXARAYX - 9; /* REPOSITION ARRAY INDEX*/
      return;
    end
  end
  CL0ZW01.CL0ZWSTL = " "; /* CLEAR SAVED STYLE ID*/
  CL0ZW01.CL0ZWBOT = " "; /* CLEAR TOP/BOTTOM INDICATOR*/


   /* CHECK IF MORE INSPECTION NUMBERS SELECTED*/

   /* The following clwrec select table code helps kl0z to set up*/
   /* the inspection number. It involves a non-standard use of the*/
   /* clwclmnb field for initial value of cl0yw01.cl0zwnbr.*/
   /* It would be a good idea to set up special fields in clwrec to*/
   /* handle this function using a more standardized technique.*/
   /* Related code is also in KL02S20, KL02130, KL0Y130, KL0YS50,*/
   /* AND KL0ZS05.*/
   /*  */
  if ("S" in CLWREC.CLWSELCD)
    CLWREC.CLWSELCD[sysVar.arrayIndex] = "V";
    CL0ZW01.CL0ZWNBR = CLWREC.CLWCLMNB[sysVar.arrayIndex];
    KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM005.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM010.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLXREC.CLXBLDAY = "Y";
    return;
  end


  COMMAREA.CATOAP = "KL02";
  XPCL002();

  CLXREC.CLXEOSF = "Y";
  CLXREC.CLXEOAF = "Y";


end // end KL0Z100

// edit pfkeys
Function KL0Z110()
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                      **/
                                                            /* **/
   /* 03-07-90  SGORGA                                         **/
   /* When in the KL0ZM001 screen (RTS Insp. Prod Summary):    **/
   /* Added code to save the information that the PF18 key was **/
   /* pressed to get to the claim hdr comment screen (CL0G).   **/
   /* That information will be used in application CL0G to     **/
   /* flow back to this application when ENTER is pressed      **/
   /* (from CL0G).                                             **/
                                                            /* **/
   /* 08-07-91  WJOHNS                                         **/
   /* Rename appls for transfer.                               **/
   /* ************************************************************/

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Z110";

  CL0ZW01.CL0ZWBOT = " "; /* CLEAR LAST PAGE FLAG*/
  CL0ZW01.CL0ZWSTL = " "; /* CLEAR SAVED STYLE FIELD*/

  if (converseVar.eventKey is enter)

    if (KL0ZM001.CATOAP == "STY=") /* IF USER WANTS TO LOCATE DISPLAY*/
      if (KL0ZM001.CAITEM != " ") /* ON A SPECIFIC STYLE THEN DO NOT DO*/
        CL0ZW01.CL0ZWSTL = KL0ZM001.CAITEM; /* THE PF OR FASTPATH THING.*/
        KL0ZM001.CATOAP = " "; /* SAVE THE STYLE ID AND RESET THE*/
        KL0ZM001.CAITEM = " "; /* APPLICATION AND ITEM FIELDS.*/
        set KL0ZM001.CATOAP initialAttributes;
        set KL0ZM001.CAITEM initialAttributes;
        return;
      end
    end

    if (KL0ZM001.CATOAP == "BOT ") /* IF USER WANTS TO LOCATE DISPLAY*/
      CL0ZW01.CL0ZWBOT = "B"; /* ON LAST PAGE SET 'BOT' FLAG*/
      KL0ZM001.CATOAP = " "; /* SAVE THE STYLE ID AND RESET THE*/
      KL0ZM001.CAITEM = " "; /* APPLICATION AND ITEM FIELDS.*/
      set KL0ZM001.CATOAP initialAttributes;
      set KL0ZM001.CAITEM initialAttributes;
      return;
    end

    if (KL0ZM001.CATOAP == "TOP ") /* IF USER WANTS TO LOCATE DISPLAY*/
      CL0ZW01.CL0ZWBOT = "T"; /* ON FIRST PAGE, SET 'BOT' FLAG*/
      KL0ZM001.CATOAP = " "; /* SAVE THE STYLE ID AND RESET THE*/
      KL0ZM001.CAITEM = " "; /* APPLICATION AND ITEM FIELDS.*/
      set KL0ZM001.CATOAP initialAttributes;
      set KL0ZM001.CAITEM initialAttributes;
      return;
    end

  end

  if (KL0ZM001.CATOAP != " " /* if any fastpath data entered*/
   || KL0ZM001.CAITEM != " ")
    COMMAREA.CATOAP = KL0ZM001.CATOAP;
    COMMAREA.CAITEM = KL0ZM001.CAITEM;
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    XPCL002();
    return;
  end

  if (converseVar.eventKey is enter)
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
     /* set alterable fields modified*/
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end

  if (converseVar.eventKey is pf2)
    COMMAREA.CATOAP = "KL0M";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    return;
  end

  if (converseVar.eventKey is pf9)
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf10)
    COMMAREA.CATOAP = "KL0W";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf12)
    return;
  end

  if (CL0ZW01.CL0ZWISP != "**"
   && KL0ZM001.CL2ISNBR != "00")
    if (converseVar.eventKey is pf13)
      return;
    end
  end

  if (CL0ZW01.CL0ZWISP != "**")
    if (converseVar.eventKey is pf15)
      if (CL0ZW01.CL0ZWUDF != "Y") /* if not update mode*/
        converseLib.validationFailed(2); /* invalid function*/
        CLXREC.CLXERRF = "Y"; /* error flag*/
      else
        if (CL0ZW01.CL0ZWUPP == "Y") /* partial update only*/
          converseLib.validationFailed(2); /* invalid function*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      end
      return;
    end
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "KL0G"; /* go look at clm hdr comments*/
    CLWREC.CLWMAPFM = "PF18 KEY"; /* save that pf18 was pressed*/
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf21)
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    COMMAREA.CATOAP = "KL0Y";
    XPCL002();
    return;
  end

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";
  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
  CLXREC.CLXERRF = "Y";

end // end KL0Z110

// edit entries
Function KL0Z120()
   /* **************************************/
   /* edit entries*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E     H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-18-91   GDECKE    CHANGE SELECT-ALL AND DIRECT        **/
   /* *                      POSITIONING LOGIC FOR REGULAR CLAIMS**/
   /* *                      (NOT SALES SAMPLES CLAIMS)          **/
   /* * 12-02-92   lgross    write out tag record to dclaim.     **/
   /* *                      dmact01 when inspection flag = y    **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0Z120";


   /* ********************************************************/
        /* edit release stock flag and insp complete flag*/

  if (KL0ZM001.CL0ZMRST is modified /* rel stock flag*/
   || KL0ZM001.CL0ZMINF is modified) /* insp complete flag*/
    if (KL0ZM001.CL0ZMRST == "Y" /* rel stock flag*/
     || KL0ZM001.CL0ZMRST == "N" 
     || KL0ZM001.CL0ZMRST == " ")
      set KL0ZM001.CL0ZMRST initialAttributes;
      KL0ZM010.CL0ZMRST = KL0ZM001.CL0ZMRST;
      CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
      CL0ZW01.CL0ZWNSW = "Y";
    else
      converseLib.validationFailed(367); /* must be 'y' or 'n'*/
      set KL0ZM001.CL0ZMRST cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      CL0ZW01.CL0ZWU2R = "N";
    end

    if (KL0ZM001.CL0ZMINF == " ")
      KL0ZM001.CL0ZMINF = "N";
    end
    set KL0ZM001.CL0ZMINF initialAttributes;
    if (KL0ZM001.CL0ZMINF == "Y")
      if (CL0ZW02.CL0ZWCRQ[CLXLSTAX] == 0 /* total cr qty = zero*/
       && CL0ZW02.CLNNCRQ[CLXLSTAX] == 0) /* and noncr = zero*/
        converseLib.validationFailed(574); /* no qty inspected - can't complete*/
        set KL0ZM001.CL0ZMINF cursor, modified, bold;
        KL0ZM001.CL0ZMINF = "N";
        CLXREC.CLXERRF = "Y";
      else
        KL0ZM010.CL0ZMINF = KL0ZM001.CL0ZMINF;
        CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
        CL0ZW01.CL0ZWNSW = "Y";
        CL0ZW01.CL0ZWUAR = "Y"; /* update clarec*/
      end
    else
      if (KL0ZM001.CL0ZMINF != "N")
        converseLib.validationFailed(367);
        set KL0ZM001.CL0ZMINF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        CL0ZW01.CL0ZWU2R = "N";
      else
        KL0ZM010.CL0ZMINF = KL0ZM001.CL0ZMINF;
        CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
        CL0ZW01.CL0ZWNSW = "Y";
      end
    end
  end



   /* ********************************************************/
        /* edit select fields*/

  CL0ZW01.CL0ZWALL = "N"; /* initial select all flag*/
  CL0ZW01.CL0ZWDEL = "N"; /* initial delete flag*/
  CL0ZW01.CL0ZWSEL = "N"; /* initial select flag*/
  CL0ZW01.CL0ZWSAL = "N"; /* initial SALES SAMPLE SELECT FL*/
  CLXREC.CLXLINEX = 9;
  while (CLXREC.CLXLINEX > 0)
    if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "V")
      KL0ZM001.CL0ZMSEL[CLXLINEX] = " ";
    end
    if (KL0ZM001.CL0ZMSEL[CLXLINEX] == " " 
     || KL0ZM001.CL0ZMSEL[CLXLINEX] == "S" /* select for next screen*/
     || KL0ZM001.CL0ZMSEL[CLXLINEX] == "X" /* delete*/
     || KL0ZM001.CL0ZMSEL[CLXLINEX] == "A") /* select all*/
      if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "X"
       && CL0ZW01.CL0ZWUDF != "Y") /* if inquiry mode*/
        converseLib.validationFailed(368); /* can not delete*/
        CLXREC.CLXERRF = "Y";
        set KL0ZM001.CL0ZMSEL[CLXLINEX] cursor, modified, bold;
      else
        if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "S")
          if (CL0ZW01.CL0ZWUDF != "Y"
           || CL0ZW01.CL0ZWUPP == "Y")
            if (KL0ZM001.CLNRTSQ[CLXLINEX] == 0
             && KL0ZM001.CLNNCRQ[CLXLINEX] == 0)
              converseLib.validationFailed(552);
              CLXREC.CLXERRF = "Y";
              set KL0ZM001.CL0ZMSEL[CLXLINEX] cursor, modified, bold;
            end
          end
        end
        if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "X"
         && CL0ZW01.CL0ZWUPP == "Y") /* partial updates*/
          converseLib.validationFailed(8); /* can not delete*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
          set KL0ZM001.CL0ZMSEL[CLXLINEX] cursor, modified, bold;
        else
          if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "A")
            /* **IF CL0ZW01.CL0ZWSAM = 'Y';IF SALES SAMPLE SELECT-ALL USED*/
            KL0ZS2A(); /* SET UP CL0ZW02 SELECT FIELDS*/
            if (CL0ZW01.CL0ZWSAL == "Y") /* LINE FOUND IN CL0ZW02 TABLE*/
              CL0ZW01.CL0ZWSEL = "N";
              set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
            else
              converseLib.validationFailed(8);
                                   /* LINE NOT FOUND IN CL0ZW02 TABLE*/
              CLXREC.CLXERRF = "Y";
              set KL0ZM001.CL0ZMSEL[CLXLINEX] cursor, modified, bold;
            end
            /* *        ELSE ;*/
            /* *          IF CLXREC.CLXLINEX EQ 1;*/
            /* *            MOVE 'Y' TO CL0ZW01.CL0ZWALL;*/
            /* *            MOVE 'N' TO CL0ZW01.CL0ZWSEL;*/
            /* *            SET CL0ZM001.CL0ZMSEL(CLXLINEX) DEFINED;*/
            /* *          ELSE ;*/
            /* *            MOVE 8 TO EZEMNO;*/
            /* *            MOVE 'Y' TO CLXREC.CLXERRF;*/
                                  /* *    SET CL0ZM001.CL0ZMSEL(CLXLINEX)*/
                                   /* CURSOR,MODIFIED,BRIGHT;*/
            /* *          END ;*/
            /* *        END ;*/
          else
            CL0ZW01.CL0ZWALL = "N";
            if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "S"
             || KL0ZM001.CL0ZMSEL[CLXLINEX] == " ")
              CL0ZW01.CL0ZWINX = CLXREC.CLXARAYX - CLXREC.CLXMAXLN;
              CL0ZW01.CL0ZWINX = CL0ZW01.CL0ZWINX + CLXREC.CLXLINEX;
              CL0ZW02.CL0ZWSEL[CL0ZWINX] = KL0ZM001.CL0ZMSEL[CLXLINEX];
              if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "S")
                CL0ZW01.CL0ZWSEL = "Y"; /* select flag*/
                if (CLXREC.CLXERRF != "Y")
                  set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
                end
              end
              if (KL0ZM001.CL0ZMSEL[CLXLINEX] == " ")
                if (KL0ZM001.CL0ZMSEL[CLXLINEX] is modified)
                  set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
                end
              end
            else
              if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "X")
                set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
                CL0ZW01.CL0ZWDEL = "Y"; /* delete flag*/
              end
            end
          end
        end
      end
    else
      set KL0ZM001.CL0ZMSEL[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* error flag*/
      converseLib.validationFailed(8);
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end

  if (CL0ZW01.CL0ZWSEL == "Y"
   && CL0ZW01.CL0ZWDEL == "Y")
    converseLib.validationFailed(371);
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CLXREC.CLXLINEX = 9;
    while (CLXREC.CLXLINEX > 0)
      if (KL0ZM001.CL0ZMSEL[CLXLINEX] == "S"
       || KL0ZM001.CL0ZMSEL[CLXLINEX] == "X")
        set KL0ZM001.CL0ZMSEL[CLXLINEX] modified, bold;
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    end
  end


   /* ********************************************************/
        /* edit inspection date*/

  if (KL0ZM001.CLLIDT is modified) /* insp date*/
    KL0ZS27(); /* edit date*/
  end


   /* ********************************************************/
        /* edit inspected by*/

  if (KL0ZM001.XXXUSRID is modified)
    KL0Z125(); /* edit userid*/
  end


   /* ********************************************************/
        /* check inspection status*/

  if (CL0ZW01.CL0ZWU2R == "Y") /* if cl2rec update flag eq 'y'*/
    if (KL0ZM001.CL0ZMINF == "N") /* reset inspection code*/
       /* AND CL0ZM001.CL0ZMRST EQ 'N';*/
      if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample cannot reopen insp*/
       && KL0ZM001.CL0ZMINF is modified)
        converseLib.validationFailed(679); /* must be 'y' or 'n'*/
        set KL0ZM001.CL0ZMINF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        CL0ZW01.CL0ZWU2R = "N";
      else
        KL0ZM001.YCICD = "IIP";
        KL0ZM010.YCICD = "IIP";
        KL0ZM001.CL0ZMMSG = " ";
        KL0ZM010.CL0ZMMSG = " ";
      end
    else
       /* IF CL0ZM001.cl0zminf EQ 'Y'  ;  inspection complete flag*/
         /* AND CL0ZM001.CL0ZMRST EQ 'N'     ;  release stock flag*/
         /* MOVE 'RMO' TO CL0ZM001.YCICD     ;  inspection code*/
         /* MOVE 'RMO' TO CL0ZM010.YCICD     ;  inspection code*/
         /* MOVE 'INSPECTION COMPLETE' TO CL0ZM001.CL0ZMMSG;*/
         /* MOVE 'INSPECTION COMPLETE' TO CL0ZM010.CL0ZMMSG;*/
       /* ELSE ;*/
         /* IF CL0ZM001.cl0zminf EQ 'N';*/
           /* AND CL0ZM001.CL0ZMRST EQ 'Y';*/
           /* MOVE 'RSO' TO CL0ZM001.YCICD;*/
           /* MOVE 'RSO' TO CL0ZM010.YCICD;*/
           /* MOVE ' ' TO CL0ZM001.CL0ZMMSG;*/
           /* MOVE ' ' TO CL0ZM010.CL0ZMMSG;*/
         /* ELSE ;*/
      if (KL0ZM001.CL0ZMINF == "Y")
         /* AND CL0ZM001.CL0ZMRST EQ 'Y';*/
        KL0ZM001.YCICD = "RMS";
        KL0ZM010.YCICD = "RMS";
        KL0ZM001.CL0ZMMSG = "INSPECTION COMPLETE";
        KL0ZM010.CL0ZMMSG = "INSPECTION COMPLETE";
        KL0ZS-WRIT-DM(); /* write out tag record to dclaim.vdmact01*/
      end
       /* END ;*/
       /* END ;*/
    end
    if (KL0ZM001.YCICD in YCITBL.YCICD)
      KL0ZM001.YCISDESC = YCITBL.YCISDESC[sysVar.arrayIndex];
    end
  end


   /* ********************************************************/
          /* edit non-credit return flag*/

  if (KL0ZM001.CLJNCRFL is modified) /* noncred rtn flag*/
    if (KL0ZM001.CLJNCRFL == "Y"
     || KL0ZM001.CLJNCRFL == "N")
      set KL0ZM001.CLJNCRFL initialAttributes;
      KL0ZM010.CLJNCRFL = KL0ZM001.CLJNCRFL;
      CL0ZW01.CL0ZWUJR = "Y";
      CL0ZW01.CL0ZWNSW = "Y";
    else
      converseLib.validationFailed(367);
      set KL0ZM001.CLJNCRFL cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      CL0ZW01.CL0ZWUJR = "N";
    end
  end

end // end KL0Z120

// read user rec for validation
Function KL0Z125()

   /* *************************************************************/

    /* Maintenance History:*/
    /* 02-21-91 CHELLM Remaned CLLIBYID  to XXXUSRID.*/


   /* *************************************************************/


  set MN1REC empty;

   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/


   /* set up file key for application read*/

  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = KL0ZM001.XXXUSRID; /* user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL   field in key*/

  try
    get MN1REC ;
  end

   /* the following statements check for a file error*/

  if (MN1REC is noRecordFound) /* not found condition*/
    converseLib.validationFailed(455); /* invalid userid*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CL0ZW01.CL0ZWU2R = "N"; /* update cl2rec switch*/
    set KL0ZM001.XXXUSRID cursor, modified, bold;
  else
    if (MN1REC is ioError) /* not found condition*/
      converseLib.validationFailed(455); /* invalid userid*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
      CL0ZW01.CL0ZWU2R = "N"; /* update cl2rec switch*/
      set KL0ZM001.XXXUSRID cursor, modified, bold;
    else
      CL0ZW01.CL0ZWU2R = "Y"; /* udpate cl2rec*/
      KL0ZM010.XXXUSRID = KL0ZM001.XXXUSRID;
      set KL0ZM001.XXXUSRID initialAttributes;
    end
  end

end // end KL0Z125

// process map cl0zm005
Function KL0Z200()
   /* ************************************************************/
   /* *    process screen kl0zm005                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0z050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *    DATE    PGMR      DESCRIPTION                         **/
   /* *----------------------------------------------------------**/
   /* *  03/14/90  SGORGA                                        **/
   /* *  Added code to check the claim-authorized-or-returned-   **/
   /* *  items-flag (CL0ZW01.CL0ZWARF).  If the flag = 'N',      **/
   /* *  then the claim has no return authorization and no       **/
   /* *  returned items.  So, the flag is set to spaces, the     **/
   /* *  claim hdr information is moved to the screens (01, 05,  **/
   /* *  10), 'N' is moved to the CLXREC.CLXBLDAY flag, and the  **/
   /* *  the CL0ZS45 stmt grp code is bypassed.                  **/
   /* *                                                          **/
   /* *  04-11-90  SGORGA    CHANGED CL0ZM005.XSDCD TO PC2INSEG. **/
   /* *  08-08-91  WJOHNS    RENAMED APPLICATIONS FOR TRANSFERS. **/
   /* *  03-13-92  GDECKE    MARCH DB2 TABLE CHANGES             **/
   /* *  04-13-92  TWATSO    APRIL DB2 TABLE CHANGES             **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0Z200";
  CL0ZW01.CL0ZWRNC = 0; /* sales sample right uom ncr qty total*/
  CL0ZW01.CL0ZWLNC = 0; /* sales sample left uom ncr qty total*/
  CL0ZW01.CL0ZWRCR = 0; /* sales sample right uom credit qty.*/
  CL0ZW01.CL0ZWLCR = 0;
                                   /* sales sample left uom credit quantity*/
  CL0ZW01.CL0ZWATQ = 0;
                                   /* sales sample left uom credit quantity*/

  if (CL0ZW01.CL0ZWARF == "N") /* No Rtn Auth or Rtnd Items*/
    CL0ZW01.CL0ZWARF = " "; /* set flag to blank*/
    CLXREC.CLXBLDAY = "N"; /* don't build array*/
    KL0ZS05(); /* move claim hdr info to m001, m005,*/
                                   /* m010 screen*/
  else
    if (CLXREC.CLXBLDAY == "Y") /* build array flag - used throughout*/
                                   /* appl.*/
      KL0ZS45(); /* build array*/
    end
  end

  if (CL0ZW01.CL0ZWUDF != "Y"
   || CL0ZW01.CL0ZWUPP == "Y")
    if (CLXREC.CLXLSTSZ == 0)
      CL0ZW01.CL0ZWEOF = "N";
      while (CL0ZW01.CL0ZWEOF == "N")
        KL0ZS63();
        if (CL0ZW01.CL0ZWNXT == "Y")
          KL0ZS45(); /* ; build array*/
          if (CLXREC.CLXLSTSZ > 0)
            CL0ZW01.CL0ZWEOF = "Y";
          end
        else
          KL0ZS0B(); /* set cl0zw06 empty*/
                 /* SET CL0ZW06 EMPTY;*/
          KL0ZM005.CL0ZMSZL = " ";
          KL0ZM005.CL0ZMSZH = " ";
          CLXREC.CLXCSCRN = "KL0ZM001";
          CL0ZW01.CL0ZWINS = "N";
          CLXREC.CLXEOSF = "Y";
          CLXREC.CLXBLDAY = "Y";
          CL0ZW01.CL0ZWEOF = "Y";
        end
      end
      if (CLXREC.CLXLSTSZ == 0)
        return;
      end
    end
  end

  if (CLXREC.CLXBLDSC == "Y")
    if (converseVar.eventKey is pf20)
      KL0ZS6A();
      CLXREC.CLXBLDSC = "N";
    else
      KL0ZS64();
      CLXREC.CLXBLDSC = "N";
    end
  end

  if (KL0ZM005.SY1STNBR == " "
   && KL0ZM005.SY2CLRID == " "
   && KL0ZM005.XDMCD == " ")
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
      if (CL0ZW01.CL0ZWSAM == "Y")
        set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
      else
        set KL0ZM005.CL0ZMXUM[CLXLINEX] skip;
      end
      set KL0ZM005.CLNRTSQ[CLXLINEX] skip;
      set KL0ZM005.SL8ZNCD1[CLXLINEX] skip;
      set KL0ZM005.SL8LCCD1[CLXLINEX] skip;
      set KL0ZM005.SL2PALET[CLXLINEX] skip;
      set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip;
      set KL0ZM005.YDRCD[CLXLINEX] skip;
      set KL0ZM005.CLNNCRQ[CLXLINEX] skip;
      set KL0ZM005.CL0ZMDEF[CLXLINEX] skip;
      set KL0ZM005.CL0ZMDLT[CLXLINEX] skip;
      set KL0ZM005.PC2INSEG[CLXLINEX] skip;
      set KL0ZM005.XSLCD[CLXLINEX] skip;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end


  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 10)
    if (CL0ZW01.CL0ZWSAM == "Y")
      if (KL0ZM005.CL0ZMXUM[CLXLINEX] != "  ") /* if xum field is not blank*/
        set KL0ZM005.CL0ZMXUM[CLXLINEX] skip; /* then prevent changes*/
      else
        set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
      end
    else
      set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  if (CL0ZW01.CL0ZWSAM == "Y")
    set KL0ZM005.CL0ZMUML initialAttributes;
  else
    set KL0ZM005.CL0ZMUML skip, invisible;
  end

  if (CL0ZW01.CL0ZWINS == "Y" /* in insert mode*/
   || CL0ZW01.CL0ZWADD == "Y")
    set KL0ZM005.CL0ZMSZL initialAttributes;
    set KL0ZM005.CL0ZMSZH initialAttributes;
  else
    set KL0ZM005.CL0ZMSZL skip;
    set KL0ZM005.CL0ZMSZH skip;
  end

  if (CLXREC.CLXERRF == "N") /* no errors found*/
    if (converseVar.eventKey is pf20)
      set KL0ZM005.SY4IDDSC[1] cursor;
    else
      if (CL0ZW01.CL0ZWSEL == "Y"
       || CL0ZW01.CL0ZWALL == "Y"
       || CL0ZW01.CL0ZWSAL == "Y")
        if (KL0ZM005.SY4IDDSC[1] != " ")
          if (KL0ZM005.XOWCD == " ")
            set KL0ZM005.XOWCD cursor;
          else
            set KL0ZM005.CLNRTSQ[1] cursor;
          end
        else
          if (KL0ZM005.XOWCD == " ")
            set KL0ZM005.XOWCD cursor;
          else
            set KL0ZM005.SY4IDDSC[1] cursor;
          end
        end
      else
        if (KL0ZM005.SY1STNBR != " ")
          if (KL0ZM005.XOWCD == " ")
            set KL0ZM005.XOWCD cursor;
          else
            set KL0ZM005.CLNRTSQ[1] cursor;
          end
        else
          set KL0ZM005.SY1STNBR cursor;
        end
      end
    end
    if (CL0ZW01.CL0ZWUDF != "Y" /* updating not allowed*/
     || CL0ZW01.CL0ZWUPP == "Y")
      set KL0ZM005.CATOAP cursor;
    end
  end

  if (CLWREC.CLWYZSWT == "Y") /* if from kl0y*/
    set KL0ZM005.CATOAP skip;
    set KL0ZM005.CAITEM skip;
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      set KL0ZM005.CL0ZMDEF skip;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end

  KL0ZS0A(); /* accumulate rts credit and noncredit*/
                                   /* totals*/
   /* MOVE 0 TO CL0ZM005.CL0ZMRTS;*/
   /* MOVE 0 TO CL0ZM005.CL0ZMNCD;*/
   /* MOVE 1 TO CL0ZW01.CL0ZWCYX;*/
   /* WHILE CL0ZW01.CL0ZWCYX LE CL0ZW01.CL0ZWSXM;  max size table*/
    /* CL0ZM005.CL0ZMRTS = CL0ZM005.CL0ZMRTS + CL0ZW05.CLNRTSQ  ;*/
        /* (CL0ZWCYX);*/
    /* CL0ZM005.CL0ZMNCD = CL0ZM005.CL0ZMNCD + CL0ZW05.CLNNCRQ  ;*/
        /* (CL0ZWCYX);*/
    /* CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;*/
   /* END ;*/

  if (CL0ZW01.CL0ZWQSW == "Y")
    set KL0ZM005.XUMCD skip;
    set KL0ZM005.XPGCD skip;
    set KL0ZM005.XOWCD skip;
    set KL0ZM005.XQACD skip;
  else
    if (CL0ZW01.CL0ZWUDF != "Y"
     || CL0ZW01.CL0ZWUPP == "Y")
      /* next sentence*/
    else
      if (CLXREC.CLXERRF != "Y")
        set KL0ZM005.XUMCD initialAttributes;
        set KL0ZM005.XPGCD initialAttributes;
        set KL0ZM005.XOWCD initialAttributes;
        set KL0ZM005.XQACD initialAttributes;
      end
    end
  end

  if (CLXREC.CLXERRF == "N" /* if no errors found*/
   && CL0ZW01.CL0ZWSAM != "Y") /* and not a sales sample claim*/
    if (KL0ZM005.XUMCD != "  "
     /* if the unit of measure code is*/
     && KL0ZM005.XUMCD != "01") /* not equal to each's*/
      converseLib.validationFailed(588); /* display warning message.*/
    end
  end

  if (CL0ZW01.CL0ZWSAM != "Y")
    set KL0ZM005.CL0ZMSAM skip, invisible;
    set KL0ZM005.CL0ZMNBR skip, invisible;
    set KL0ZM005.CL0ZMCLM skip, invisible;
  end

  set KL0ZM-SPRVE-LOC-TXT initialAttributes;
  set KL0ZM-ZN-LOC-PAL-TXT initialAttributes;

  if (KL0ZM005.XWHCD == "70" /* equipment warehouses do not use*/
   || KL0ZM005.XWHCD == "72" /* stock locate and whse 51*/
   || KL0ZM005.XWHCD == "51") /* add whse 51 3/29/99*/
    set KL0ZM-SPRVE-LOC-TXT skip, invisible;
    set KL0ZM-ZN-LOC-PAL-TXT skip, invisible;
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      set KL0ZM005.SL8ZNCD1[CLXLINEX] skip, invisible;
      set KL0ZM005.SL8LCCD1[CLXLINEX] skip, invisible;
      set KL0ZM005.SL2PALET[CLXLINEX] skip, invisible;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end /* end while*/
  end /* end warehouse if*/

   /* ***********************************************************/
  converse KL0ZM005 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";

  KL0Z210(); /* edit pfkeys*/
   /* may transfer out of application*/

  if (converseVar.validationMsgNum != 0) /* error encountered in pfkey edit*/
    return;
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock count*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock may have occurred during*/
    return; /* building of array*/
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    return;
  end

   /* ********************************************************/
       /* edit product, uom, owner group, package type*/

  if (KL0ZM005.SY1STNBR is modified
   || KL0ZM005.SY2CLRID is modified
   || KL0ZM005.XDMCD is modified
   || KL0ZM005.XUMCD is modified
   || KL0ZM005.XOWCD is modified
   || KL0ZM005.XPGCD is modified
   || KL0ZM005.XQACD is modified
   || CL0ZW01.CL0ZWOFL == "Y")
    KL0ZS65();
    if (converseVar.eventKey is pf15)
      KL0ZM005.CL0ZMSZL = " ";
      KL0ZM005.CL0ZMSZH = " ";
      CLXREC.CLXCSCRN = "KL0ZM001";
      CL0ZW01.CL0ZWINS = "N"; /* insert flag*/
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXBLDAY = "Y";
      CLXREC.CLXERRF = "N";
    end
    return;
  end

  if (KL0ZM005.CL0ZMSZL is modified
   || KL0ZM005.CL0ZMSZH is modified)
    CLXREC.CLXBLDAY = "Y";
    return;
  end


   /* ********************************************************/
               /* edit routine*/

  if (CL0ZW01.CL0ZWUDF != "Y" /* inquire only?*/
   || CL0ZW01.CL0ZWUPP == "Y") /* partial update only?*/
    /* next sentence*/
  else
    KL0Z220(); /* edit entries*/

    if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim and left no*/
                                   /* credits*/
      if (KL0ZM005.CL0ZMXUM[1] != "  "
       && KL0ZM005.CL0ZMXUM[2] == "  "
       && KL0ZM005.CLNRTSQ[1] != 0)
        CLXREC.CLXERRF = "Y"; /* then show error message*/
        converseLib.validationFailed(680);
        set KL0ZM005.CLNNCRQ[1] modified, bold;
        set KL0ZM005.YDRCD[1] cursor, modified, bold;
      end
      if (CL0ZW01.CL0ZWRNC != CL0ZW01.CL0ZWLNC
       /* not equal right no credits*/
       || CL0ZW01.CL0ZWRCR != CL0ZW01.CL0ZWLCR)
                                   /* unequal credit quanities*/
        CL0ZW01.CL0ZWATQ = CL0ZW01.CL0ZWATQ - CL0ZW01.CL0ZWRNC;
        CL0ZW01.CL0ZWATQ = CL0ZW01.CL0ZWATQ - CL0ZW01.CL0ZWLNC;
        CL0ZW01.CL0ZWATQ = CL0ZW01.CL0ZWATQ - CL0ZW01.CL0ZWRCR;
        CL0ZW01.CL0ZWATQ = CL0ZW01.CL0ZWATQ - CL0ZW01.CL0ZWLCR;
        if (CL0ZW01.CL0ZWATQ != 0)
          CLXREC.CLXERRF = "Y"; /* then show error message*/
          converseLib.validationFailed(675);
          CLXREC.CLXLINEX = 10;
          while (CLXREC.CLXLINEX >= 1)
            if (KL0ZM005.CLNNCRQ[CLXLINEX] != 0
             || KL0ZM005.YDRCD[CLXLINEX] != "  ")
              set KL0ZM005.CLNNCRQ[CLXLINEX] modified, bold;
              set KL0ZM005.YDRCD[CLXLINEX] cursor, modified, bold;
            end
            if (KL0ZM005.CLNRTSQ[CLXLINEX] != 0)
              set KL0ZM005.CLNRTSQ[CLXLINEX] modified, bold;
            end
            CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
          end
        end
      end
    end
  end


  if (CLXREC.CLXERRF == "Y") /* ERRORS ENCOUNTERED*/
    if (converseVar.eventKey is pf15)
      KL0ZM005.CL0ZMSZL = " ";
      KL0ZM005.CL0ZMSZH = " ";
      CLXREC.CLXCSCRN = "KL0ZM001";
      CL0ZW01.CL0ZWINS = "N"; /* insert flag*/
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXBLDAY = "Y";
      CLXREC.CLXERRF = "N";
    end
    return;
  end

  if (converseVar.eventKey is pf12) /* confirm only*/
    converseLib.validationFailed(340);
    return;
  end


   /* ********************************************************/
                 /* update process*/

  CL0ZW01.CL0ZWRT1 = 0; /* total rts qty to be deleted from*/
                                   /* clmrec*/
  CL0ZW01.CL0ZWRT2 = 0; /* total rts qty to be added to clmrec*/
  CL0ZW01.CL0ZWNT1 = 0; /* total nocred qty to be deleted from*/
                                   /* clmrec*/
  CL0ZW01.CL0ZWNT2 = 0; /* total nocred qty to be added to*/
                                   /* clmrec*/
  CL0ZW01.CLACISNB = 0;

  if (KL0ZM001.CL2ISNBR == "00"
   || KL0ZM005.CL2ISNBR == 0)
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= CL0ZW01.CL0ZWMLN)
      if (CL0ZW01.CL0ZWUQR[CLXLINEX] == "Y"
       || CL0ZW01.CL0ZWUPD[CLXLINEX] == "Y")
        CL0ZW01.CL0ZWU2R = "Y";
        CLXREC.CLXLINEX = 10;
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    if (CL0ZW01.CL0ZWU2R == "Y")
      KL0ZS36(); /* get next inspection nbr*/
      CL0ZW01.CL0ZWUAR = "I"; /* update clarec*/
    else
      CL0ZW01.CLACISNB = 0;
    end
  end

  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= CL0ZW01.CL0ZWMLN)
    if (CL0ZW01.CL0ZWUQR[CLXLINEX] == "Y") /* update flag*/
      if (KL0ZM005.XWHCD == "70"
       || KL0ZM005.XWHCD == "72"
       || KL0ZM005.XWHCD == "51") /* add whse 51 on 3/29/99*/
        /* next sentence    do not update stock locate table*/
      else
        KL0ZS73();
      end /* end warehouse if*/
      CL0ZW01.CL0ZWASW[CLXLINEX] = " "; /* add switch*/
    end
    if (CL0ZW01.CL0ZWUPD[CLXLINEX] == "Y" /* line has been changed*/
     || CL0ZW01.CL0ZWUQR[CLXLINEX] == "Y")
      KL0ZS75(); /* update clnrec*/
      CL0ZW01.CL0ZWASW[CLXLINEX] = " "; /* add switch*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (CL0ZW01.CL0ZWU2R == "Y") /* update cl2rec flag*/
    CL0ZW01.CL0ZWNCT = CL0ZW01.CL0ZWNCT + CL0ZW01.CL0ZWRCT;
    CL0ZW01.CL0ZWRCT = 0;
    if (CL0ZW01.CL0ZW2SW == "Y") /* if cl2rec exists*/
      KL0ZS37(); /* update cl2rec*/
      if (CL0ZW01.CL0ZWSAM == "Y") /* IF SALES SAMPLE CLAIM UPDATE CL2REC*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* on secondary claim*/
        CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
        while (CL0ZW01.CL0ZWDFL == "Y") /* get sales sample secondary claim*/
          KL0ZS08(); /* inspection cl2rec line*/
        end
        if (CL0ZW01.CL0ZWDCT > 0) /* if table is deadlocked*/
          return; /* show error message*/
        end
        KL0ZS37();
      end
    else
      KL0ZS40(); /* insert cl2rec*/
      if (CL0ZW01.CL0ZWSAM == "Y") /* IF SALES SAMPLE CLAIM UPDATE CL2REC*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* on secondary claim*/
        KL0ZS4A();
      end
    end
    if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample claim and insp*/
     && CL2REC.YCICD == "RMS")  /* status is now 'rms' update claims*/
      KL0ZS3A(); /* stock records to combine 'l' and 'r'*/
    end /* units of measure*/
  end

  if (CL0ZW01.CL0ZWUMR == "Y") /* update clmrec flag*/
    if (CL0ZW01.CL0ZWSAM == "Y") /* if salse sample claim*/
      KL0ZS81(); /* update clmrec*/
      KL0ZS8A(); /* update clmrec on secondary clm*/
    else
      KL0ZS81(); /* update clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWUAR == "Y" /* update clarec flag*/
   || CL0ZW01.CL0ZWUAR == "I")
    KL0ZS83(); /* update clarec*/
  end

  CL0ZW01.CL0ZWUMR = "N";
  CL0ZW01.CL0ZWUAR = "N";
  CL0ZW01.CL0ZWU2R = "N";
  CL0ZW01.CL0ZWRFL = "N"; /* rts qty update flag*/

  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 10)
    CL0ZW01.CL0ZWUPD[CLXLINEX] = " ";
    CL0ZW01.CL0ZWUQR[CLXLINEX] = " ";
    CL0ZW01.CL0ZWAPD[CLXLINEX] = " ";
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

   /* ******************************************************/
              /* check if defective selected*/

  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 10)
    if (KL0ZM005.CL0ZMDEF[CLXLINEX] == "Y")
      CL0ZW01.CL0ZWDEF = "Y";
      CLXREC.CLXLINEX = 10;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  if (CL0ZW01.CL0ZWDEF == "Y")
    CLWREC.XUMCD = KL0ZM005.XUMCD;
    CLWREC.XDMCD = KL0ZM005.XDMCD;
    CLWREC.SY2CLRID = KL0ZM005.SY2CLRID;
    CLWREC.SY1STNBR = KL0ZM005.SY1STNBR;
    CLWREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
    CLWREC.CLWYZSWT = "Z";
    CLWREC.CLWYZIDX = CLXREC.CLXITMX - 10;
    COMMAREA.CATOAP = "KL0Y";
    CL0ZW01.CL0ZWDEF = "N";
    XPCL002();
    return;
  end

   /* ******************************************************/
        /* handling of scrolling - pf7 or pf8*/

  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (CLXREC.CLXITMX >= CL0ZW01.CL0ZWHSZ)
      CLXREC.CLXITMX = CLXREC.CLXITMX - CL0ZW01.CL0ZWHSZ;
      CLXREC.CLXBLDSC = "Y";
    else
      CLXREC.CLXBLDSC = "N";
      converseLib.validationFailed(7);
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    if (CLXREC.CLXITMX >= CL0ZW01.CL0ZWLST)
      converseLib.validationFailed(3);
    else
      CLXREC.CLXLINEX = 1;
      CL0ZW01.CL0ZWCT = 0; /* counter*/
      while (CLXREC.CLXLINEX <= 10)
        if (KL0ZM005.SY4IDDSC[CLXLINEX] == " ") /* if any blank lines on*/
          CL0ZW01.CL0ZWCT = CL0ZW01.CL0ZWCT + 1; /* screen*/
        end
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      end
      if (CL0ZW01.CL0ZWCT > 0)
        converseLib.validationFailed(3);
        CLXREC.CLXBLDSC = "N";
      else
        if (CL0ZW01.CL0ZWUDF == "N"
         || CL0ZW01.CL0ZWUPP == "Y")
          if (CLXREC.CLXITMX >= CLXREC.CLXLSTSZ)
            converseLib.validationFailed(3);
            CLXREC.CLXBLDSC = "N";
          else
            CLXREC.CLXBLDSC = "Y";
          end
        else
          CLXREC.CLXBLDSC = "Y";
        end
      end
    end
    return;
  end

   /* ******************************************************/
        /* handling of - pf13*/

  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDSC = "Y";
    CLXREC.CLXBLDAY = "Y";
    CLXREC.CLXCSCRN = "KL0ZM010";
    return;
  end

   /* ******************************************************/
        /* handling of - pf15*/

  if (converseVar.eventKey is pf15)
    KL0ZM005.CL0ZMSZL = " ";
    KL0ZM005.CL0ZMSZH = " ";
    CLXREC.CLXCSCRN = "KL0ZM001";
    CL0ZW01.CL0ZWINS = "N"; /* insert flag*/
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDAY = "Y";
    return;
  end

   /* ******************************************************/
        /* handling of - pf20*/

  if (converseVar.eventKey is pf20)
    CLXREC.CLXBLDSC = "Y";
    return;
  end

  if (KL0ZM005 is modified)
    CLXREC.CLXBLDSC = "N";
    return;
  end

   /* ******************************************************/
        /* scroll forward if not at end of list*/

  if (CLXREC.CLXITMX >= CL0ZW01.CL0ZWLST)
    /* next sentence*/
  else
    CLXREC.CLXLINEX = 1;
    CL0ZW01.CL0ZWCT = 0; /* counter*/
    while (CLXREC.CLXLINEX <= 10)
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == " ") /* if any blank lines on*/
        CL0ZW01.CL0ZWCT = CL0ZW01.CL0ZWCT + 1; /* screen*/
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    if (CL0ZW01.CL0ZWCT > 0)
      /* next sentence*/
    else
      if (CL0ZW01.CL0ZWUDF == "N"
       || CL0ZW01.CL0ZWUPP == "Y")
        if (CLXREC.CLXITMX >= CLXREC.CLXLSTSZ)
          /* next sentence*/
        else
          CLXREC.CLXBLDSC = "Y";
          return;
        end
      else
        CLXREC.CLXBLDSC = "Y";
        return;
      end
    end
  end

   /* ********************************************************/
               /* return to kl0y*/

  if (CLWREC.CLWYZSWT == "Y")
    COMMAREA.CATOAP = "KL0Y";
    XPCL002();
    return;
  end

   /* ********************************************************/
             /* check if more locations from sl7rec*/

  KL0ZS63();

  if (CL0ZW01.CL0ZWNXT == "Y")
    return;
  end

   /* ********************************************************/
                /* selection process*/

  if (CL0ZW01.CL0ZWSEL == "Y"
   || CL0ZW01.CL0ZWALL == "Y"
   || CL0ZW01.CL0ZWSAL == "Y")
    CL0ZW01.CL0ZWADD = "N";
    CLXREC.CLXARAYX = 1;
    while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      if (CL0ZW02.CL0ZWSEL[CLXARAYX] == "S")
        CL0ZW01.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];
        KL0ZM005.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];
        CL0ZW01.SY2CLRID = CL0ZW02.SY2CLRID[CLXARAYX];
        KL0ZM005.SY2CLRID = CL0ZW02.SY2CLRID[CLXARAYX];
        CL0ZW01.XDMCD = CL0ZW02.XDMCD[CLXARAYX];
        KL0ZM005.XDMCD = CL0ZW02.XDMCD[CLXARAYX];
        KL0ZM005.CL0ZMATH = CL0ZW02.CLKAUTHQ[CLXARAYX];
        CL0ZW01.XQACD = CL0ZW02.XQACD[CLXARAYX];
        CL0ZW01.XEGCD = CL0ZW02.XEGCD[CLXARAYX];
        CL0ZW01.XBK-BK-SESN-CD = CL0ZW02.XBK-BK-SESN-CD[CLXARAYX];
        CL0ZW01.OP-BK-YR = CL0ZW02.OP-BK-YR[CLXARAYX];
        CL0ZW01.OP-BK-MO = CL0ZW02.OP-BK-MO[CLXARAYX];
        CL0ZW01.XOWCD = CL0ZW02.XOWCD[CLXARAYX];
        CL0ZW01.XUMCD = CL0ZW02.XUMCD[CLXARAYX];
        CL0ZW01.CL0ZWQSW = "N";
        KL0ZM005.CL0ZMSZL = " ";
        KL0ZM005.CL0ZMSZH = " ";
        CL0ZW01.XPGCD = " ";
        KL0ZM005.XPGCD = " ";
        KL0ZM005.XOWCD = " ";
        KL0ZM005.XQACD = " ";
        KL0ZM005.XUMCD = " ";
        KL0ZM005.XQAABRV = " ";
        KL0ZM005.XPGABRV = " ";
        KL0ZM005.XOWABRV = " ";
        KL0ZM005.XUMDESC = " ";
        KL0ZM005.SL8ZNCD2 = " ";
        KL0ZM005.SL8LCCD2 = " ";
        KL0ZM005.XARCD2 = " ";
        if (CL0ZW01.CL0ZWSEL == "Y")
          CL0ZW01.CL0ZWVFL[CLXARAYX] = "V";
        end
        CL0ZW02.CL0ZWSEL[CLXARAYX] = " ";
        CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
        CLXREC.CLXBLDAY = "Y";
        CLXREC.CLXBLDSC = "Y";
        return;
      else
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
          CL0ZW01.CL0ZWSEL = "N";
          CL0ZW01.CL0ZWALL = "N";
          CL0ZW01.CL0ZWSAL = "N";
        end
      end
    end
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0z100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0z050.*/

  KL0ZS0B(); /* set cl0zw06 empty*/
   /* seT CL0ZW06 EMPTY;*/
  KL0ZM005.CL0ZMSZL = " ";
  KL0ZM005.CL0ZMSZH = " ";
  CLXREC.CLXCSCRN = "KL0ZM001";
  CL0ZW01.CL0ZWINS = "N"; /* insert flag*/
  CLXREC.CLXEOSF = "Y";
  CLXREC.CLXBLDAY = "Y";

end // end KL0Z200

// edit pfkeys
Function KL0Z210()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Z210";

  if (KL0ZM005.CATOAP != " " /* if any fastpath data entered*/
   || KL0ZM005.CAITEM != " ")
    COMMAREA.CATOAP = KL0ZM005.CATOAP;
    COMMAREA.CAITEM = KL0ZM005.CAITEM;
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    XPCL002();
    return;
  end

  if (converseVar.eventKey is enter)
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62);
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (converseVar.eventKey is pf1
   && CLWREC.CLWYZSWT != "Y")
    XSPF1();
    return;
  end

  if (converseVar.eventKey is pf3
   && CLWREC.CLWYZSWT != "Y")
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf4
   && CLWREC.CLWYZSWT != "Y")
    XSPF4();
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf20)
    return;
  end

  if (converseVar.eventKey is pf9
   && CLWREC.CLWYZSWT != "Y")
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf10
   && CLWREC.CLWYZSWT != "Y")
    COMMAREA.CATOAP = "KL0W";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf12)
    return;
  end

  if (converseVar.eventKey is pf13)
    if (CLWREC.CLWYZSWT != "Y")
      if (CL0ZW01.CL0ZWISP != "**"
       && KL0ZM005.CL2ISNBR != 0)
        return;
      end
    end
  end

  if (converseVar.eventKey is pf15)
    if (CLWREC.CLWYZSWT != "Y")
      return;
    end
  end

  if (converseVar.eventKey is pf21
   && CLWREC.CLWYZSWT != "Y")
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    COMMAREA.CATOAP = "KL0Y";
    XPCL002();
    return;
  end

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";

  converseLib.validationFailed(2);
  CLXREC.CLXERRF = "Y";

end // end KL0Z210

// edit entries
Function KL0Z220()
   /* *************************************************************/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *----------------------------------------------------------**/
   /* *    DATE    PGMR    DESCRIPTION                           **/
   /* *----------------------------------------------------------**/
   /* *  04-04-90  SGORGA                                        **/
   /* *----------------------------------------------------------**/
   /* *  DB2 structure changes:  The Corporate Spec Difference   **/
   /* *  table (XSDTBL) has been replaced with a DPRODC table    **/
   /* *  (DPRODC.VPRDCU01).  In this process, I replaced the     **/
   /* *  code that used the XSDTBL with a call to the DPRODC.    **/
   /* *  VPRDCU01 IO module 3340 (using the PC2REC record).      **/
   /* *                                                          **/
   /* *  04-11-90  SGORGA  Changed cl0zm005.xsdcd field          **/
   /* *                    name to cl0zm005.pc2inseg.            **/
   /* *  10-21-93  GDECKE  REMOVED OVERLAPPING MOVE STMT.        **/
   /* *  03-29-99  MARBUC  add whse 51 to bypass location edits  **/
   /* *  07-27-01  njana   comment out the code for not          **/
   /* *                    validating loaction and pallate code  **/
   /* *                                                          **/
   /* *************************************************************/


   /* **************************************/
   /* edit entries*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Z220";

  CL0ZW01.CL0ZWCNT = CLXREC.CLXLSTSZ;
  CLXREC.CLXLINEX = 10;
  while (CLXREC.CLXLINEX > 0)

    /* *********************************************************/
                    /* edit shade code*/

    if (KL0ZM005.XSLCD[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.XSLCD[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
      if (KL0ZM005.XSLCD[CLXLINEX] == " ")
        if (CL0ZW01.CL0ZWASW[CLXLINEX] == " ")
          KL0ZM005.XSLCD[CLXLINEX] = "000";
        end
      else
        if (KL0ZM005.XSLCD[CLXLINEX] in XSATBL.XSACD)
          if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence*/
          else
            set KL0ZM005.XSLCD[CLXLINEX] cursor, modified, bold;
            converseLib.validationFailed(466);
            CLXREC.CLXERRF = "Y"; /* error flag*/
          end
        else
          set KL0ZM005.XSLCD[CLXLINEX] cursor, modified, bold;
          converseLib.validationFailed(466);
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      end
    end

    /* *********************************************************/
                 /* edit spec difference code*/

    if (KL0ZM005.PC2INSEG[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.PC2INSEG[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
      if (KL0ZM005.PC2INSEG[CLXLINEX] == " ")
        if (CL0ZW01.CL0ZWASW[CLXLINEX] == " ")
          KL0ZM005.PC2INSEG[CLXLINEX] = "000";
        end
      else
        set PC2REC empty; /* init pc2rec record*/
        set SQLCA empty; /* init sqlca area*/
        PC2REC.XGPCD = CLAREC.XGPCD; /* gpc code*/
              /* ** move prod orders customer inventory segment cd ***/
        PC2REC.PC2INSEG = KL0ZM005.PC2INSEG[CLXLINEX];
        call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select unique rec*/
        if (SQLCA.VAGen_SQLCODE == 0 /* if gpc code found*/
         && PC2REC.XXXSTAT == "A")   /* and gpc cd is active*/
          /* next sentence*/
        else /* '*/
          if (SQLCA.VAGen_SQLCODE == 0 /* gpc code found but inactive*/
           || SQLCA.VAGen_SQLCODE == 100) /* gpc code not found*/
            set KL0ZM005.PC2INSEG[CLXLINEX] cursor, modified, bold;
            converseLib.validationFailed(467);
            CLXREC.CLXERRF = "Y"; /* error flag*/
          else
            TA1REC.TA1DBASE = "DPRODC"; /* bad sql code, so abend*/
            TA1REC.TA1TBLVU = "VPRDCU01";
            TA1REC.TA1LOCAT[4] = "IO3340"; /* io mod*/
            CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
            TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
          end
        end
      end
    end

    /* *********************************************************/
                  /* edit select defectives*/

    if (KL0ZM005.CL0ZMDEF[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.CL0ZMDEF[CLXLINEX] initialAttributes;
      if (KL0ZM005.CL0ZMDEF[CLXLINEX] == "N")
        KL0ZM005.CL0ZMDEF[CLXLINEX] = " ";
      end
      if (KL0ZM005.CL0ZMDEF[CLXLINEX] == " ")
        /* next sentence*/
      else
        if (KL0ZM005.CL0ZMDEF[CLXLINEX] == "Y")
          /* next sentence*/
        else
          set KL0ZM005.CL0ZMDEF[CLXLINEX] cursor, modified, bold;
          converseLib.validationFailed(367);
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      end
    end


    /* *********************************************************/
                  /* EDIT CHANGE/DELETE FLAG*/

    if (KL0ZM005.CL0ZMDLT[CLXLINEX] is modified)
      set KL0ZM005.CL0ZMDLT[CLXLINEX] initialAttributes;
      if (KL0ZM005.CL0ZMDLT[CLXLINEX] == "N")
        KL0ZM005.CL0ZMDLT[CLXLINEX] = " ";
      end
      if (KL0ZM005.CL0ZMDLT[CLXLINEX] == " ")
        /* next sentence*/
      else
        if (KL0ZM005.CL0ZMDLT[CLXLINEX] == "X")
          KL0ZM005.CLNRTSQ[CLXLINEX] = 0;
          KL0ZM005.CLNNCRQ[CLXLINEX] = 0;
          set KL0ZM005.CLNRTSQ[CLXLINEX] modified;
          set KL0ZM005.CLNNCRQ[CLXLINEX] modified;
        else
          set KL0ZM005.CL0ZMDLT[CLXLINEX] cursor, modified, bold;
          converseLib.validationFailed(8);
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      end
    end
    /* *********************************************************/

    if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample claim*/
     && CLXREC.CLXERRF == "N")  /* and no other errors found yet*/
      KL0ZS5C(); /* add sales sample defaults to detail*/
                                   /* lines*/
    end

    /* *********************************************************/
                  /* edit no cred qty*/

    if (KL0ZM005.CLNNCRQ[CLXLINEX] is modified
     || KL0ZM005.YDRCD[CLXLINEX] is modified
     || KL0ZM005.CLNRTSQ[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.CLNNCRQ[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
      if (KL0ZM005.YDRCD[CLXLINEX] != " "
       && KL0ZM005.CLNNCRQ[CLXLINEX] == 0
       && KL0ZM005.CL0ZMDLT[CLXLINEX] != "X") /* NOT AN ERROR IF dlt FL=x*/
        set KL0ZM005.CLNNCRQ[CLXLINEX] cursor, modified, bold;
        converseLib.validationFailed(469);
        CLXREC.CLXERRF = "Y"; /* error flag*/
      else
        if (KL0ZM005.CLNNCRQ[CLXLINEX] > 0
         || KL0ZM005.CLNRTSQ[CLXLINEX] > 0)
          /* next sentence*/
        else
          if (CL0ZW01.CL0ZWASW[CLXLINEX] == " "
           && KL0ZM005.CL0ZMDLT[CLXLINEX] != "X")
                                   /* NOT AN ERROR IF dlt FL=x*/
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(469);
            set KL0ZM005.CLNNCRQ[CLXLINEX] cursor, modified, bold;
          end
        end
      end
    end

    /* *********************************************************/
                  /* edit no cred code*/

    if (KL0ZM005.YDRCD[CLXLINEX] is modified
     || KL0ZM005.CLNNCRQ[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.YDRCD[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
      if (KL0ZM005.YDRCD[CLXLINEX] == " "
       && KL0ZM005.CLNNCRQ[CLXLINEX] > 0)
        set KL0ZM005.YDRCD[CLXLINEX] cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* error flag*/
        converseLib.validationFailed(470);
      else
        if (KL0ZM005.YDRCD[CLXLINEX] != " ")
          if (KL0ZM005.YDRCD[CLXLINEX] in YDRTBL.YDRCD)
            if (YDRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
              /* next sentence*/
            else
              converseLib.validationFailed(475);
              CLXREC.CLXERRF = "Y"; /* error flag*/
              set KL0ZM005.YDRCD[CLXLINEX] cursor, modified, bold;
            end
          else
            converseLib.validationFailed(475);
            CLXREC.CLXERRF = "Y"; /* error flag*/
            set KL0ZM005.YDRCD[CLXLINEX] cursor, modified, bold;
          end
        end
      end
    end

    /* *********************************************************/
                  /* edit credit qty*/

    if (KL0ZM005.CL0ZWCSQ[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.CL0ZWCSQ[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
      CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
      if (KL0ZM005.CLNRTSQ[CLXLINEX] is modified)
        /* next sentence*/
      else
        KL0ZM005.CLNRTSQ[CLXLINEX] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
        CL0ZW01.CL0ZWRFL = "Y"; /* rts qty update flag*/
      end
    end

    /* *********************************************************/
                  /* edit spsrv location*/

    if (KL0ZM005.XWHCD == "70"
     || KL0ZM005.XWHCD == "72"
     || KL0ZM005.XWHCD == "51")
      /* next sentence*/
    else
      if (KL0ZM005.SL2PALET[CLXLINEX] is modified
       || KL0ZM005.SL8LCCD1[CLXLINEX] is modified
       || KL0ZM005.SY4IDDSC[CLXLINEX] is modified
       || KL0ZM005.CLNRTSQ[CLXLINEX] > 0)
        set KL0ZM005.SL2PALET[CLXLINEX] initialAttributes;
        set KL0ZM005.SL8LCCD1[CLXLINEX] initialAttributes;
        if (KL0ZM005.CLNRTSQ[CLXLINEX] > 0
         || KL0ZM005.SL8LCCD1[CLXLINEX] != " "
         || KL0ZM005.SL2PALET[CLXLINEX] != " ")
          if (KL0ZM005.SL8ZNCD1[CLXLINEX] == " ")
            KL0ZM005.SL8ZNCD1[CLXLINEX] = "90";
            CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
            if (KL0ZM005.XWHCD == "51" /* TEMPORARY CODE*/
             && CLAREC.CLACLMNB < 471000)
              KL0ZM005.SL8ZNCD1[CLXLINEX] = "89";
            end
          end
          CL0ZW01.SL8LCCD1 = KL0ZM005.SL8LCCD1[CLXLINEX];
          if (CL0ZW01.CL0ZWCL1 >= "0"
           && CL0ZW01.CL0ZWCL1 <= "9"
           && CL0ZW01.CL0ZWCLA == " ")
            CL0ZW01.CL0ZWCLA = "00000";
            KL0ZM005.SL8LCCD1[CLXLINEX] = CL0ZW01.SL8LCCD1;
            CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
          end
          if (CL0ZW01.SL8LCCD1 == "400000"
           && KL0ZM005.SL2PALET[CLXLINEX] == " ")
            KL0ZM005.SL2PALET[CLXLINEX] = "    1";
            CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
          end
          if (CL0ZW01.SL8LCCD1 == "700000"
           || CL0ZW01.SL8LCCD1 == "800000")
            if (KL0ZM005.SL2PALET[CLXLINEX] == " ")
              CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
              CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
              KL0ZS5B(); /* get cllrec (vclrtn01) warehouse code*/
              if (CLLREC.XWHCD == "04")
                KL0ZM005.SL2PALET[CLXLINEX] = "    1";
                CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
              end
            end
          end
          if (KL0ZM005.SL2PALET[CLXLINEX] is modified
           || KL0ZM005.SL8LCCD1[CLXLINEX] is modified
           || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
            CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
          end
          /* TCS CHANGE BEGINS:07/27/2001(NSC)*/
          /* IF KL0ZM005.SL2PALET(CLXLINEX) EQ ' '*/
          /* OR KL0ZM005.SL8LCCD1(CLXLINEX) EQ ' ';*/
          /* SET KL0ZM005.SL8LCCD1(CLXLINEX) CURSOR,MODIFIED,BRIGHT;*/
          /* SET KL0ZM005.SL2PALET(CLXLINEX) MODIFIED,BRIGHT;*/
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
          /* MOVE 538 TO EZEMNO;*/
          /* ELSE;*/
          /* KL0ZSA1;               /* validate location*/
          /* END;*/
          /* TCS CHANGE ENDS  :07/27/2001(NSC)*/
        else
          KL0ZM005.SL8ZNCD1[CLXLINEX] = " ";
        end
      end
    end /* end warehouse 70 72*/

    /* *********************************************************/
                  /* edit rts qty*/

    if (KL0ZM005.CLNRTSQ[CLXLINEX] is modified
     || KL0ZM005.CLNNCRQ[CLXLINEX] is modified
     || KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0ZM005.CLNRTSQ[CLXLINEX] initialAttributes;
      CL0ZW01.CL0ZWTTL = CL0ZW01.CL0ZWTTL - CL0ZW01.CL0ZWRTS[CLXLINEX];
      CL0ZW01.CL0ZWRTS[CLXLINEX] = KL0ZM005.CLNRTSQ[CLXLINEX];
      CL0ZW01.CL0ZWTTL = CL0ZW01.CL0ZWTTL + CL0ZW01.CL0ZWRTS[CLXLINEX];
      CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
      CL0ZW01.CL0ZWUQR[CLXLINEX] = "Y";
      CL0ZW01.CL0ZWRFL = "Y"; /* rts qty update flag*/
      KL0ZM005.CL0ZWCSQ[CLXLINEX] = KL0ZM005.CLNRTSQ[CLXLINEX];
      if (KL0ZM005.YDRCD[CLXLINEX] == " "
       && KL0ZM005.CLNNCRQ[CLXLINEX] == 0)
        if (KL0ZM005.CLNRTSQ[CLXLINEX] == 0)
          if (CL0ZW01.CL0ZWASW[CLXLINEX] == " "
           && KL0ZM005.CL0ZMDLT[CLXLINEX] != "X")
                                   /* NOT AN ERROR IF dlt FL=x*/
            converseLib.validationFailed(464);
            CLXREC.CLXERRF = "Y";
            set KL0ZM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
          end
        end
      end
    end

    if (KL0ZM005.CLNRTSQ[CLXLINEX] > 0
     || KL0ZM005.CLNNCRQ[CLXLINEX] > 0
     || KL0ZM005.YDRCD[CLXLINEX] != " ")
      if (KL0ZM005.PC2INSEG[CLXLINEX] == " ")
        KL0ZM005.PC2INSEG[CLXLINEX] = "000";
      end
      if (KL0ZM005.XSLCD[CLXLINEX] == " ")
        KL0ZM005.XSLCD[CLXLINEX] = "000";
      end
    end

    if (KL0ZM005.SL8LCCD1[CLXLINEX] != " " /* IF LOCATION,PALLET, INVENTORY*/
     || KL0ZM005.SL2PALET[CLXLINEX] != " " /* SEGMENT CODE, OR STK LOCATE*/
     || KL0ZM005.PC2INSEG[CLXLINEX] != " " /* CODE IS ENTERED, THEN CR QTY,*/
     || KL0ZM005.XSLCD[CLXLINEX] != " ")  
                                   /* NO-CR QTY,OR DENIAL CODE SHOULD*/
      if (KL0ZM005.CLNRTSQ[CLXLINEX] == 0 /* ALSO BE ENTERED.*/
       && KL0ZM005.CLNNCRQ[CLXLINEX] == 0 
       && KL0ZM005.YDRCD[CLXLINEX] == " ")
        if (KL0ZM005.CL0ZMDLT[CLXLINEX] != "X") /* NOT AN ERROR IF CHG FL=x*/
          converseLib.validationFailed(464);
          set KL0ZM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
          set KL0ZM005.CLNNCRQ[CLXLINEX] modified, bold;
          CLXREC.CLXERRF = "Y";
        end
      end
    end
    /* *********************************************************/
                    /* edit size description*/

    KL0ZS67();

    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end

  CLXREC.CLXLINEX = 10;
  while (CLXREC.CLXLINEX > 0)
    if (KL0ZM005.SY4IDDSC[CLXLINEX] != " ")


        /* accumulate sales sample left and right uom total noncredit*/
        /* quantities.*/
      CL0ZW01.CL0ZWATQ = CL0ZW01.CL0ZWATQ + KL0ZM005.CLKAUTHQ[CLXLINEX];
      if (KL0ZM005.CLNNCRQ[CLXLINEX] != 0)
        if (KL0ZM005.CL0ZMXUM[CLXLINEX] == "R")
          CL0ZW01.CL0ZWRNC = CL0ZW01.CL0ZWRNC + KL0ZM005.CLNNCRQ[CLXLINEX];
        else
          if (KL0ZM005.CL0ZMXUM[CLXLINEX] == "L")
            CL0ZW01.CL0ZWLNC = CL0ZW01.CL0ZWLNC +             KL0ZM005.CLNNCRQ[CLXLINEX];
          end
        end
      end


        /* accumulate sales sample left and right uom total credit*/
        /* quantities.*/
      if (KL0ZM005.CLNRTSQ[CLXLINEX] != 0)
        if (KL0ZM005.CL0ZMXUM[CLXLINEX] == "R")
          CL0ZW01.CL0ZWRCR = CL0ZW01.CL0ZWRCR + KL0ZM005.CLNRTSQ[CLXLINEX];
        else
          if (KL0ZM005.CL0ZMXUM[CLXLINEX] == "L")
            CL0ZW01.CL0ZWLCR = CL0ZW01.CL0ZWLCR +             KL0ZM005.CLNRTSQ[CLXLINEX];
          end
        end
      end

         /* AND CL0ZW01.CL0ZWAPD(CLXLINEX) EQ 'A';*/
       /* the following line replaced by more efficient code*/
         /* MOVE 10 TO CL0ZW01.CL0ZWLNX; on the next line*/
      CL0ZW01.CL0ZWLNX = CLXREC.CLXLINEX - 1;
      while (CL0ZW01.CL0ZWLNX > 0)
        if (KL0ZM005.SY4IDDSC[CLXLINEX] == KL0ZM005.SY4IDDSC[CL0ZWLNX]
         && CLXREC.CLXLINEX != CL0ZW01.CL0ZWLNX
         && KL0ZM005.SL8ZNCD1[CLXLINEX] == KL0ZM005.SL8ZNCD1[CL0ZWLNX]
         && KL0ZM005.SL8LCCD1[CLXLINEX] == KL0ZM005.SL8LCCD1[CL0ZWLNX]
         && KL0ZM005.SL2PALET[CLXLINEX] == KL0ZM005.SL2PALET[CL0ZWLNX])
          if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample duplacate has same*/
                                   /* uom*/
            if (KL0ZM005.CL0ZMXUM[CLXLINEX] == KL0ZM005.CL0ZMXUM[CL0ZWLNX])
              converseLib.validationFailed(473);
              CLXREC.CLXERRF = "Y";
              set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
            else
              CL0ZW01.CL0ZWLNX = CL0ZW01.CL0ZWLNX - 1;
            end
          else
            converseLib.validationFailed(473);
            CLXREC.CLXERRF = "Y";
            set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
          end
        end
        CL0ZW01.CL0ZWLNX = CL0ZW01.CL0ZWLNX - 1;
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end



  if (CLXREC.CLXERRF == "Y")
    CL0ZW01.CL0ZWWRN = "N"; /* warning flag*/
    return;
  end

   /* *************************************************************/
    /* edit rts qty - warning only, to be checked after good edit*/


  if (CL0ZW01.CL0ZWWRN == "N" /* if no previous warning and*/
   && CL0ZW01.CL0ZWSAM != "Y") /* not a sales sample claim*/
    if (CL0ZW01.CL0ZWRFL == "Y") /* rts qty update flag*/
      if (CL0ZW01.CL0ZWTTL > KL0ZM005.CL0ZMATH)
        converseLib.validationFailed(465);
        set KL0ZM005.CLNRTSQ[1] cursor;
        set KL0ZM005.CL0ZMDEF[1] modified;
        CL0ZW01.CL0ZWWRN = "Y"; /* warning flag*/
      end
    end
  else
    CL0ZW01.CL0ZWWRN = "N";
  end

  if (CL0ZW01.CL0ZWWRN == "Y")
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end

end // end KL0Z220

// process screen cl0zm010
Function KL0Z300()
   /* ************************************************************/
   /* *    process screen kl0zm010                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0z050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0Z300";

  if (CLXREC.CLXBLDSC == "Y")
    KL0ZS84();
    CLXREC.CLXBLDSC = "N";
  end

  if (CLXREC.CLXERRF == "N") /* no errors*/
    if (CL0ZW01.CL0ZWUDF == "N")
      set KL0ZM010.CATOAP cursor;
    else
      if (CL0ZW01.CL0ZWUPP == "Y")
        if (KL0ZM001.YCICD == "RMO")
          set KL0ZM010.CL0ZMRST cursor;
        else
          if (KL0ZM001.YCICD == "RSO")
            if (CL0ZW01.CL0ZWSAM == "Y")
              set KL0ZM010.CLMUNLQ cursor;
            else
              set KL0ZM010.CLMRTGQ cursor;
            end
          else
            set KL0ZM010.CATOAP cursor;
          end
        end
      else
        if (CL0ZW01.CL0ZWSAM == "Y")
          set KL0ZM010.CLMUNLQ cursor;
        else
          set KL0ZM010.CLMRTGQ cursor;
        end
      end
    end
  end

  if (CL0ZW01.CL0ZWSAM != "Y")
    set KL0ZM010.CL0ZMSAM skip, invisible;
    set KL0ZM010.CL0ZMNBR skip, invisible;
    set KL0ZM010.CL0ZMCLM skip, invisible;
  end

   /* ***********************************************************/
  converse KL0ZM010 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  CL0ZW01.CL0ZWUAS = "N"; /* sales sample 2nd clm clarec update flag*/
  CL0ZW01.CL0ZWCMI = " "; /* sales sample 2nd clm clmrec indic*/

  KL0Z310(); /* edit pfkeys*/
   /* may transfer out of application*/

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    CL0ZW01.CL0ZWDCT = 0;
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    return;
  end

   /* ******************************************************/
                 /* edit routine*/

  KL0Z320(); /* edit entries*/

  if (CLXREC.CLXERRF == "Y") /* edit error*/
    return;
  end

  if (converseVar.eventKey is pf12)
    converseLib.validationFailed(340); /* confirm only*/
    return;
  end

   /* ******************************************************/
                 /* update process*/

  if (CL0ZW01.CL0ZWU2R == "Y") /* update cl2rec flag*/
    if (CL0ZW01.CL0ZW2SW == "Y") /* if cl2rec exists*/
      if (CL2REC.CLACLMNB != KL0ZM010.CLACLMNB) /* is cl2rec is not from the*/
        CL2REC.CLACLMNB = KL0ZM010.CLACLMNB;
                                   /* primary claim then get*/
        CL0ZW01.CL0ZWNBR = KL0ZM010.CL2ISNBR;
                                   /* primary claim cl2rec.*/
        CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* primary claim cl2rec.*/
        CL2REC.CLHSEQNB = KL0ZM010.CLHSEQNB;
        CL0ZWDFL = "Y"; /* deadlock flag*/
        CL0ZWDCT = 0; /* deadlock count*/
        while (CL0ZW01.CL0ZWDFL == "Y")
                                   /* select sales sample secondary claim*/
          KL0ZS08(); /* inspection cl2rec line*/
        end
        if (CL0ZW01.CL0ZWDCT > 0) /* if deadlocked table*/
          return; /* show error message*/
        end
      end
      KL0ZS37(); /* update clarec*/
      if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim then update*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* secondary claim cl2rec*/
        CL0ZWDFL = "Y"; /* deadlock flag*/
        CL0ZWDCT = 0; /* deadlock count*/
        while (CL0ZW01.CL0ZWDFL == "Y")
                                   /* select sales sample secondary claim*/
          KL0ZS08(); /* inspection cl2rec line*/
        end
        if (CL0ZW01.CL0ZWDCT > 0) /* if deadlocked table*/
          return; /* show error message*/
        end
        KL0ZS37();
      end
    else
      KL0ZS40(); /* insert cl2rec*/
      if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim then update*/
        CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* secondary claim cl2rec*/
        KL0ZS4A();
      end
    end
    if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample clami and insp*/
     && CL2REC.YCICD == "RMS")  /* status is 'rms' update claims stock*/
      KL0ZS3A(); /* records to combine 'L' & 'R' uom's.*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    if (converseVar.validationMsgNum == 18) /* record already updated*/
      set KL0ZM010.CLACLMNB cursor, modified, bold;
    end
    return;
  end

  if (CL0ZW01.CL0ZWUMR == "Y") /* update clmrec flag*/
    if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim*/
      KL0ZS91(); /* update clmrec for primary claim*/
      KL0ZS9A(); /* update clmrec for secondary claim*/
    else
      KL0ZS91(); /* update clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  KL0ZS95(); /* update inspect comments*/

  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim then*/
    KL0ZS9B(); /* then update inspection comments for*/
  end /* secondary claim*/

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (CL0ZW01.CL0ZWUFR == "D") /* delete claim address*/
    KL0ZS92(); /* delete clfrec*/
  else
    if (CL0ZW01.CL0ZWUFR == "C") /* update claim address*/
      KL0ZS93(); /* change clfrec*/
    else
      if (CL0ZW01.CL0ZWUFR == "A") /* add claim address*/
        KL0ZS94(); /* add clfrec*/
      end
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  if (CL0ZW01.CL0ZWUAR == "Y" /* update clarec flag*/
   || CL0ZW01.CL0ZWUAS == "Y") /* update sales sample 2nd clarec*/
    if (CLXREC.CLXERRF == "N") /* and no errors*/
      if (CL0ZW01.CL0ZWUFR == "D") /* deleted clfrec*/
        CLAREC.CLARTNFF = "S";
      else
        if (CL0ZW01.CL0ZWUFR == "A"
         || CL0ZW01.CL0ZWUFR == "C")
          CLAREC.CLARTNFF = "E";
        end
      end
      KL0ZS83(); /* update clarec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0 /* deadlock exists*/
   || CLXREC.CLXERRF == "Y")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    return;
  end

  KL0ZS88(); /* check security*/

  CL0ZW01.CL0ZWUAR = "N"; /* update clarec flag*/
  CL0ZW01.CL0ZWUMR = "N"; /* update clmrec flag*/
  CL0ZW01.CL0ZWUFR = "N"; /* update clfrec flag*/
  CL0ZW01.CL0ZWU2R = "N"; /* update cl2rec flag*/
  CL0ZW01.CL0ZWUCM[1] = "N"; /* update first insp comment*/
  CL0ZW01.CL0ZWUCM[2] = "N"; /* update second insp comment*/
  CL0ZW01.CL0ZWUCM[3] = "N"; /* update third insp comment*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* ********************************************************/
                 /* determine flow*/

  if (KL0ZM010 is modified)
    return;
  end

  CLXREC.CLXEOSF = "Y";
  CLXREC.CLXBLDSC = "Y";
  CLXREC.CLXBLDAY = "Y";
  CLXREC.CLXCSCRN = "KL0ZM001";

end // end KL0Z300

// edit pfkeys
Function KL0Z310()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  CLXREC.CLXCPROC = "CL0Z310";

  if (KL0ZM010.CATOAP != " " /* if any fastpath data entered*/
   || KL0ZM010.CAITEM != " ")
    COMMAREA.CATOAP = KL0ZM010.CATOAP;
    COMMAREA.CAITEM = KL0ZM010.CAITEM;
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    XPCL002();
    return;
  end

  if (converseVar.eventKey is enter)
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
     /* set alterable fields modified*/
    CLXREC.CLXERRF = "Y";
    return;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    return;
  end

  if (converseVar.eventKey is pf2)
    COMMAREA.CATOAP = "KL0M";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
  end

  if (converseVar.eventKey is pf9)
    COMMAREA.CATOAP = "KL02";
    XPCL002();
    return;
  end

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf15)
    return;
  end

  if (converseVar.eventKey is pf21)
    CLWREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    CLWREC.CLHSEQNB = CL0ZW01.CLHSEQNB;
    COMMAREA.CATOAP = "KL0Y";
    XPCL002();
    return;
  end

  COMMAREA.CATOAP = " ";
  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
  CLXREC.CLXERRF = "Y";

end // end KL0Z310

// edit entries
Function KL0Z320()
   /* edit entries*/
   /* ************************************************************/
   /* maintenance log*/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl*/
   /* 12/02/92  lgross  write out tag record to dclaim.vdmact01*/
   /* when inspection flag is marked yes*/
   /* 11/30/93  jcarey  added code to set upc label qty as*/
   /* defined and set update flag if map*/
   /* quantity has been changed.*/
   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0Z320";

  set KL0ZM010.CLFADNM initialAttributes;
  set KL0ZM010.XXXADDR1 initialAttributes;
  set KL0ZM010.XXXADDR2 initialAttributes;
  set KL0ZM010.XXXADDR3 initialAttributes;
  set KL0ZM010.XXXCITY initialAttributes;
  set KL0ZM010.XSTCD initialAttributes;
  set KL0ZM010.XXXZIP initialAttributes;
  set KL0ZM010.XCTCD initialAttributes;
  set KL0ZM010.CLMRBGQ initialAttributes;
  set KL0ZM010.CLMRBXQ initialAttributes;
  set KL0ZM010.CLMRTGQ initialAttributes;
  set KL0ZM010.CLMUNLQ initialAttributes;
  set KL0ZM010.CL-UPC-LABL-QTY initialAttributes;
  set KL0ZM010.CL0ZMINC[1] initialAttributes;
  set KL0ZM010.CL0ZMINC[2] initialAttributes;
  set KL0ZM010.CL0ZMINC[3] initialAttributes;
  set KL0ZM010.CL0ZMINF initialAttributes;
  set KL0ZM010.CL0ZMRST initialAttributes;

   /* *******************************************************/
            /* edit release stock flag*/

  if (KL0ZM010.CL0ZMRST is modified)
    if (KL0ZM010.CL0ZMRST == "Y"
     || KL0ZM010.CL0ZMRST == "N"
     || KL0ZM010.CL0ZMRST == " ")
      KL0ZM001.CL0ZMRST = KL0ZM010.CL0ZMRST;
      CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
      CL0ZW01.CL0ZWNSW = "Y";
    else
      converseLib.validationFailed(367); /* must be 'y' or 'n';*/
      set KL0ZM010.CL0ZMRST cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* error flag*/
      CL0ZW01.CL0ZWU2R = "N";
    end
  end

   /* *******************************************************/
            /* edit inspection complete flag*/

  if (KL0ZM010.CL0ZMINF is modified) /* insp complete flag*/

    if (KL0ZM010.CL0ZMINF == " ")
      KL0ZM010.CL0ZMINF = "N";
    end
    set KL0ZM010.CL0ZMINF initialAttributes;
    if (KL0ZM010.CL0ZMINF == "Y")
      if (CL0ZW02.CL0ZWCRQ[CLXLSTAX] == 0 /* total cr qty = zero*/
       && CL0ZW02.CLNNCRQ[CLXLSTAX] == 0) /* and noncr = zero*/
        converseLib.validationFailed(574); /* no qty inspected - can't complete*/
        set KL0ZM010.CL0ZMINF cursor, modified, bold;
        KL0ZM010.CL0ZMINF = "N";
        CLXREC.CLXERRF = "Y";
      else
        KL0ZM001.CL0ZMINF = KL0ZM010.CL0ZMINF;
        CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
        CL0ZW01.CL0ZWNSW = "Y";
        CL0ZW01.CL0ZWUAR = "Y"; /* update clarec*/
      end
    else
      if (KL0ZM010.CL0ZMINF != "N")
        converseLib.validationFailed(367);
        set KL0ZM010.CL0ZMINF cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        CL0ZW01.CL0ZWU2R = "N";
      else
        if (CL0ZW01.CL0ZWSAM == "Y" /* cannot reopen inspection if*/
         && KL0ZM010.CL0ZMINF is modified)
          converseLib.validationFailed(679); /* claim is sales sample*/
          set KL0ZM010.CL0ZMINF cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          CL0ZW01.CL0ZWU2R = "N";
        else
          KL0ZM001.CL0ZMINF = KL0ZM010.CL0ZMINF;
          CL0ZW01.CL0ZWU2R = "Y"; /* update cl2rec*/
          CL0ZW01.CL0ZWNSW = "Y";
        end
      end
    end
  end


   /* *******************************************************/
            /* edit inspection comments*/

  if (KL0ZM010.CL0ZMINC[1] is modified
   || KL0ZM010.CL0ZMINC[2] is modified
   || KL0ZM010.CL0ZMINC[3] is modified)
    if (KL0ZM010.CL0ZMINC[1] == " "
     && KL0ZM010.CL0ZMINC[2] == " "
     && KL0ZM010.CL0ZMINC[3] == " ")
      if (CL0ZW01.CL-CLCOM-FL == "Y")
        CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
        CL0ZW01.CL-CLCOM-FL = "N";
      end
    end
    if (KL0ZM010.CL0ZMINC[3] is modified)
      if (KL0ZM010.CL0ZMINC[3] == " "
       && CL0ZW01.CLGCMSEQ[3] > 0)
        CL0ZW01.CL0ZWUCM[3] = "D"; /* delete comment*/
      else
        if (CL0ZW01.CLGCMSEQ[3] > 0)
          CL0ZW01.CL0ZWUCM[3] = "C"; /* change comment*/
        else
          if (KL0ZM010.CL0ZMINC[3] != " ")
            CL0ZW01.CL0ZWUCM[3] = "A"; /* add comment*/
            CL0ZW01.CL0ZWNSW = "Y";
            if (CL0ZW01.CL-CLCOM-FL != "Y")
              CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
              CL0ZW01.CL-CLCOM-FL = "Y"; /* comment ind*/
            end
          end
        end
      end
    end
    if (KL0ZM010.CL0ZMINC[2] is modified)
      if (KL0ZM010.CL0ZMINC[2] == " "
       && CL0ZW01.CLGCMSEQ[2] > 0)
        CL0ZW01.CL0ZWUCM[2] = "D"; /* delete comment*/
      else
        if (CL0ZW01.CLGCMSEQ[2] > 0)
          CL0ZW01.CL0ZWUCM[2] = "C"; /* change comment*/
        else
          if (KL0ZM010.CL0ZMINC[2] != " ")
            CL0ZW01.CL0ZWUCM[2] = "A"; /* add comment*/
            CL0ZW01.CL0ZWNSW = "Y";
            if (CL0ZW01.CL-CLCOM-FL != "Y")
              CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
              CL0ZW01.CL-CLCOM-FL = "Y"; /* comment ind*/
            end
          end
        end
      end
    end
    if (KL0ZM010.CL0ZMINC[1] is modified)
      if (KL0ZM010.CL0ZMINC[1] == " "
       && CL0ZW01.CLGCMSEQ[1] > 0)
        CL0ZW01.CL0ZWUCM[1] = "D"; /* delete comment*/
      else
        if (CL0ZW01.CLGCMSEQ[1] > 0)
          CL0ZW01.CL0ZWUCM[1] = "C"; /* change comment*/
        else
          if (KL0ZM010.CL0ZMINC[1] != " ")
            CL0ZW01.CL0ZWUCM[1] = "A"; /* add comment*/
            CL0ZW01.CL0ZWNSW = "Y";
            if (CL0ZW01.CL-CLCOM-FL != "Y")
              CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
              CL0ZW01.CL-CLCOM-FL = "Y"; /* comment ind*/
            end
          end
        end
      end
    end
  end

   /* *******************************************************/
            /* edit address*/

  if (KL0ZM010.CLFADNM is modified
   || KL0ZM010.XXXADDR1 is modified
   || KL0ZM010.XXXADDR2 is modified
   || KL0ZM010.XXXADDR3 is modified
   || KL0ZM010.XXXCITY is modified
   || KL0ZM010.XSTCD is modified
   || KL0ZM010.XXXZIP is modified
   || KL0ZM010.XCTCD is modified)
    if (KL0ZM010.CLFADNM == " "
     && KL0ZM010.XXXADDR1 == " "
     && KL0ZM010.XXXADDR2 == " "
     && KL0ZM010.XXXADDR3 == " "
     && KL0ZM010.XXXCITY == " "
     && KL0ZM010.XSTCD == " "
     && KL0ZM010.XXXZIP == " "
     && KL0ZM010.XCTCD == " ")
      if (CLAREC.CLARTNFF == "E")
        CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/
        CL0ZW01.CL0ZWUFR = "D"; /* delete clfrec*/
      end
      KL0ZS86(); /* get customer address*/
    else
      if (CLAREC.CLARTNFF != "E")
        CL0ZW01.CL0ZWUFR = "A"; /* add clfrec*/
        CL0ZW01.CL0ZWNSW = "Y";
        CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/
      else
        if (CLAREC.CLARTNFF == "E")
          CL0ZW01.CL0ZWUFR = "C"; /* update clfrec*/
        end
      end
      if (KL0ZM010.XXXADDR3 == " ")
        KL0ZM010.XXXADDR3 = KL0ZM010.XXXADDR2;
        KL0ZM010.XXXADDR2 = KL0ZM010.XXXADDR1;
        KL0ZM010.XXXADDR1 = " ";
      end
      if (KL0ZM010.XXXADDR2 == " ")
        KL0ZM010.XXXADDR2 = KL0ZM010.XXXADDR1;
        KL0ZM010.XXXADDR1 = " ";
      end
      KL0ZS90(); /* edit address*/
    end
  end


   /* *******************************************************/
            /* edit remerchandising quantites*/

  if (KL0ZM010.CLMRBGQ is modified
   || KL0ZM010.CLMRBXQ is modified
   || KL0ZM010.CLMRTGQ is modified
   || KL0ZM010.CLMUNLQ is modified
   || KL0ZM010.CL-UPC-LABL-QTY is modified)
    CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
  end


   /* ******************************************************/
            /* check inspection status*/

  if (CL0ZW01.CL0ZWU2R == "Y") /* if cl2rec update flag set*/
    if (KL0ZM010.CL0ZMINF == "N")
       /* AND CL0ZM010.CL0ZMRST EQ 'N';*/
      KL0ZM010.YCICD = "IIP";
      KL0ZM001.YCICD = "IIP";
      KL0ZM001.CL0ZMMSG = " ";
      KL0ZM010.CL0ZMMSG = " ";
    else
       /* IF CL0ZM010.cl0zminf EQ 'Y';*/
         /* AND CL0ZM010.CL0ZMRST EQ 'N';*/
         /* MOVE 'RMO' TO CL0ZM010.YCICD;*/
         /* MOVE 'RMO' TO CL0ZM001.YCICD;*/
         /* MOVE 'INSPECTION COMPLETE' TO CL0ZM001.CL0ZMMSG;*/
         /* MOVE 'INSPECTION COMPLETE' TO CL0ZM010.CL0ZMMSG;*/
       /* ELSE ;*/
         /* IF CL0ZM010.cl0zminf EQ 'N';*/
           /* AND CL0ZM010.CL0ZMRST EQ 'Y';*/
           /* MOVE 'RSO' TO CL0ZM010.YCICD;*/
           /* MOVE 'RSO' TO CL0ZM001.YCICD;*/
           /* MOVE ' ' TO CL0ZM001.CL0ZMMSG;*/
           /* MOVE ' ' TO CL0ZM010.CL0ZMMSG;*/
         /* ELSE ;*/
      if (KL0ZM010.CL0ZMINF == "Y")
         /* AND CL0ZM010.CL0ZMRST EQ 'Y';*/
        KL0ZM010.YCICD = "RMS";
        KL0ZM001.YCICD = "RMS";
        KL0ZM001.CL0ZMMSG = "INSPECTION COMPLETE";
        KL0ZM010.CL0ZMMSG = "INSPECTION COMPLETE";
        KL0ZS-WRIT-DM(); /* write out tag record to dclaim.vdmact01*/
      end
       /* END ;*/
       /* END ;*/
    end
    if (KL0ZM010.YCICD in YCITBL.YCICD)
      KL0ZM001.YCISDESC = YCITBL.YCISDESC[sysVar.arrayIndex];
    end
  end


end // end KL0Z320

// get company rec/acct cls
Function KL0ZS-EDIT-STY-GPC()
   /* ************************************************************/
   /* KL0ZS-EDIT-STY-GPC                                       **/
   /* ----------------------------------------------------------**/
   /* M A I N T E N A N C E    H I S T O R Y    L O G        **/
   /* ----------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                            **/
   /* ----------------------------------------------------------**/
   /* 11-04-98  GDECKE  EDIT STYLE, COLOR, GPC, AND UOM BEFORE **/
   /* ADDS AND UPDATES ON VCOLOR02.          **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "KL0ZS-EDIT-STY-GPC";

    /* CHECK FOR A VALID UNIT OF MEASURE CODE.*/

  if (CLNREC.XUMCD in XUMTBL.XUMCD)
      /* NEXT SENTENCE*/
  else

    TA1REC.TA1LOCAT[2] = "KL0ZS-E"; /* location*/
    TA1REC.TA1LOCAT[4] = "DIT-STY"; /* location*/
    TA1REC.TA1DBASE = "DCORP "; /* database*/
    TA1REC.TA1TBLVU = "VXUM0001"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

    XPCL010(); /* error diagnosis routine*/

    return;
  end

    /* VERIFY THAT THE GPC, STYLE, COLOR, AND DIMENSION ARE ON A*/
    /* VCOLOR01 LINE*/

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS-VERIFY-STYLE();
    /* REPEAT WHILE DEADLOCK FLAG IS ON.*/
  end

end // end KL0ZS-EDIT-STY-GPC

// select unique SY2REC-VCOLOR01
Function KL0ZS-VERIFY-STYLE()
   /* *****************************************************************/
   /* * GET THE VCOLOR01 ROW TO VERIFY THE GPC, STYLE AND COLOR BEFORE*/
   /* * THE INSERT OR UPDATE IS DONE TO THE RTS ITEM.                **/
   /* *****************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G           **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 11-05-98  GDECKE  SELECT VCOLOR02 ROW                        **/
   /* *****************************************************************/

  CLXREC.CLXCPROC = "KL0ZS-VERIFY-STYLE"; /* set curr proc name*/

  SY2REC.XGPCD = CLNREC.XGPCD;
  SY2REC.SY1STNBR = CLNREC.SY1STNBR;
  SY2REC.SY2CLRID = CLNREC.SY2CLRID;
  SY2REC.XDMCD = CLNREC.XDMCD;


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set KL0ZM005.SY1STNBR initialAttributes;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)

    TA1REC.TA1LOCAT[2] = "KL0ZS-V"; /* location*/
    TA1REC.TA1LOCAT[4] = "ERIFY-S"; /* location*/
    TA1REC.TA1DBASE = "DPROD "; /* database*/
    TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

    XPCL010(); /* error diagnosis routine*/

    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "KL0ZS-VERIFY-STYLE"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
  TA1REC.TA1DBASE = "DPROD "; /* database*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS-VERIFY-STYLE

// check if dmact01 rec needed
Function KL0ZS-WRIT-DM()
   /* ****************************************************************/
   /* if this a direct market record, need to write out a tag      **/
   /* record to dclaim.vdmact01 whenever inspection is marked      **/
   /* complete.  Can remove references to account class when all   **/
   /* direct market records are marked 'cdr'.                      **/
   /* 12-02-92 lgross          creation                            **/
   /* 01-26-93 bcourt change proc to sgrp.                         **/
   /* 02-08-93 bcourt Create activity tag if account is active     **/
   /* consumer account.                            **/
   /* 02-19-93 bcourt add ezetst usage to kl14 tbl.                **/
   /* 03-10-93 bcourt Change when write csw activity log to check  **/
   /* if claim from csw or s/b sent there.         **/
   /* ****************************************************************/
   /* KL0ZS-GET-ACCT-CLS;              /*temp until all cdr*/
   /* IF CLAREC.YCTCD EQ 'CDR';*/
   /* OR KUCREC.XAUCD IN KL10TBL.XAU-ACCT-CLS-CD;/* temp until all cdr*/
  if (CLAREC.KUCCOID in KL14TBL.CU-CO-ID) /* if consumer account*/
    if (CLAREC.CLAORIGI == "D" /* if from csw*/
     || CLAREC.CLAORIGI == "T") /* or ibm generated*/
      KL0ZS-WRIT-DM-REC(); /* write tag record.*/
    end
  end
end // end KL0ZS-WRIT-DM

// update dmact01
Function KL0ZS-WRIT-DM-REC()
   /* *******************************************************************/
   /* * THIS STATEMENT GROUP WILL WRITE OUT A RECORD TO DCLAIM.VCMACT01**/
   /* * EVERY TIME inspection is marked complete.                      **/
   /* *12-02-92  lgross   creation                                     **/
   /* *******************************************************************/
  set VDMACT01 empty;
  set SQLCA empty;

  VDMACT01.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  VDMACT01.CLLRTNNB = 0; /* return number*/
  VDMACT01.CL2ISNBR = CL2REC.CL2ISNBR;
  VDMACT01.XXXPGMNB = "KL0Z";
  VDMACT01.XXXSTAT = "A";
  VDMACT01.ZZZSDT = CLXREC.XXXCDTE; /* date of setup*/
  VDMACT01.ZZZSTM = CLXREC.XXXCHHMM; /* time of setup*/

  call "IO0870" ("A ", SQLCA, VDMACT01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* update ok*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = "UPDATING VDMACT01";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VDMACT01";
      TA1REC.TA1LOCAT[2] = "KL0ZS-WRIT-DM-REC";
      XPCL010();
    end
  end
end // end KL0ZS-WRIT-DM-REC

// get today's date
Function KL0ZS02()

  CLXREC.CLXCPROC = "CL0ZS02";

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    CLXREC.CLXVALDT = "N"; /* set valid date flag to no*/
    CLXREC.XXXCDTE = 0;
  else
    CLXREC.CLXVALDT = "Y"; /* set valid date flag to yes*/
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
  end


end // end KL0ZS02

// set activity mode flag
Function KL0ZS03()

   /* ********************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G              **/
   /* ********************************************************************/
   /* *   DATE    PGMR    DESCRIPTION                                   **/
   /* ********************************************************************/
   /* * 10-21-93  GDECKE  FIX BAD REFERENCE TO STATUS CODE 2 ALIAS=YCSCD**/
   /* ********************************************************************/

  CLXREC.CLXCPROC = "CL0ZS03"; /* set current proc name*/

  CL0ZW01.CL0ZWUDF = "Y"; /* update flag*/

  if (CLWREC.CLWACTIV == "I") /* user is in inquiry mode*/
    CL0ZW01.CL0ZWUDF = "N"; /* do not allow data updates*/
    return;
  end

  if (COMMAREA.CAALVL[6] == "Y"
   || COMMAREA.CACLVL[6] == "Y")
    /* next sentence*/
  else
    CL0ZW01.CL0ZWUDF = "N"; /* do not allow data updates*/
    return;
  end

  if (CLAREC.YCSCD == "RAA"
   || CLAREC.YCSCD == "RIP"
   || CLAREC.YCSCD == "ERA"
   || CLAREC.YCSCD == "RPA") /* 062089 return pending authorization*/
    /* next sentence*/
  else
    if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* claim status*/
      if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
        CL0ZW01.CL0ZWUDF = "N"; /* do not allow data updates*/
        return;
      end
    end
  end

end // end KL0ZS03

// build product summary aray
Function KL0ZS04()
   /* *************************************************************/
             /* BUILD PRODUCT SUMMARY ARAY*/

   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* ------------------------------------------------------------**/
   /* DATE    PGMR     DESCRIPTION                             **/
   /* ------------------------------------------------------------**/
   /* 10-04-90  CHELLM   Added XUMCD and XQACD to the Select keys**/
   /* when scanning DCLAIM.VRAITM01 CLKREC and**/
   /* DCLAIM.VDEFIT01 CLPREC.                 **/
   /* 02-21-91  CHELLM   RENAMED CLLREC.CLLIBYID to XXXUSRID     **/
   /* 03-13-92  GDECKE   MARCH DB2 TABLE CHANGES                 **/
   /* 04-13-92  TWATSO   APRIL DB2 TABLE CHANGES                 **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0ZS04";

   /* SET CLPREC EMPTY;*/
   /* SET CLKREC EMPTY;*/
   /* SET CLNREC EMPTY;*/
   /* SET CLJREC EMPTY;*/
   /* SET CLLREC EMPTY;*/
   /* SET CL2REC EMPTY;*/
   /* SET CLGREC EMPTY;*/
   /* SET KUMREC EMPTY;*/
   /* SET CLFREC EMPTY;*/
   /* SET SY1REC EMPTY;*/
   /* SET SY2REC EMPTY;*/
   /* SET CL0ZW03 EMPTY;*/
   /* SET CL0ZW04 EMPTY;*/
   /* SET CL0ZW02 EMPTY;*/
   /* SET CL0ZW06 EMPTY;*/
  KL0ZS96();
                                   /* clear out working storage records*/
  CL0ZW01.CL0ZWUJR = "N";
  CL0ZW01.CL0ZWUAR = "N";
  CL0ZW01.CL0ZWU2R = "N";
  CL0ZW01.CL0ZW2SW = "N";
  CL0ZW01.CL0ZWDEL = "N";
  CL0ZW01.XUMCD = " ";
  CL0ZW01.XOWCD = " ";
  CL0ZW01.XPGCD = " ";
  CL0ZW01.XQACD = " ";
  CL0ZW01.XEGCD = " ";
  CL0ZW01.XBK-BK-SESN-CD = " ";
  CL0ZW01.OP-BK-YR = 0;
  CL0ZW01.OP-BK-MO = 0;

  if (CL0ZW01.CL0ZWISP == "**")
    KL0ZM001.XXXUSRID = " ";
    KL0ZM001.CLLIDT = 0;
    KL0ZM001.YCICD = " ";
    KL0ZM001.YCISDESC = " ";
  else
    KL0ZS05();
  end

   /* *******************************************************/
     /* retrieve data from clkrec*/

  CLKREC.CLACLMNB = KL0ZM001.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**";
  CLKREC.XQACD = "**";
  CLKREC.CLKCRFL = "*"; /* 072089 add*/

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS11(); /* set-up cursor clkrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CLXREC.CLXARAYX = 0;
  CL0ZW01.CL0ZWEND = "N";
  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS12(); /* load return auth*/
  end

  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close return cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


   /* *******************************************************/
     /* retrieve data from clkrec using secondary sales sample*/
     /* claim number if this is a sales sample claim.*/
  if (CL0ZW01.CL0ZWSAM == "Y")
    CLKREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
    CLKREC.IV0IVCID = -1;
    CLKREC.XGPCD = "**";
    CLKREC.SY1STNBR = "******";
    CLKREC.SY2CLRID = "***";
    CLKREC.XDMCD = "**";
    CLKREC.XUMCD = "**";
    CLKREC.XQACD = "**";
    CLKREC.CLKCRFL = "*"; /* 072089 add*/

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS11(); /* set-up cursor clkrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWEND = "N";
    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS12(); /* load return auth*/
    end

    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close return cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


   /* *******************************************************/
      /* retrieve data form clnrec*/

  CLNREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim nbr*/
  KL0ZM001.CLMTRTNQ = 0;
  CL0ZW01.CL0ZWNCT = 0;

  if (CL0ZW01.CL0ZWISP == "**")
    CLNREC.CL2ISNBR = -1;
    CLNREC.CLHSEQNB = -1;
    CL0ZW01.CL0ZWHDF = CL0ZW01.CL0ZWUDF; /* hold update flag*/
    CL0ZW01.CL0ZWUDF = "N";
  else
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
    CLNREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
    CLNREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq nbf*/
  end

  CLNREC.IV0IVCID = -1;
  CLNREC.IV0PARTN = " ";
  CLNREC.XGPCD = "**"; /* gpc code*/
  CLNREC.SY1STNBR = "******"; /* style*/
  CLNREC.SY2CLRID = "***"; /* color*/
  CLNREC.XDMCD = "**"; /* dim code*/
  CLNREC.XQACD = "**"; /* quality code*/
  CLNREC.XUMCD = "**"; /* unit of measure*/
  CL0ZW04.CL0ZW4SQ = "SS";

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* set-up cursor clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CL0ZW01.CL0ZWEND = "N";
  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS14(); /* load rts*/
  end

  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* close rts cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


   /* *******************************************************/
      /* retrieve data form clnrec using secondary sales sample*/
      /* claim number if this is a sales sample claim.*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CLNREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
    KL0ZM001.CLMTRTNQ = 0;
    CL0ZW01.CL0ZWNCT = 0;

    if (CL0ZW01.CL0ZWISP == "**")
      CLNREC.CL2ISNBR = -1;
      CLNREC.CLHSEQNB = -1;
      CL0ZW01.CL0ZWHDF = CL0ZW01.CL0ZWUDF; /* hold update flag*/
      CL0ZW01.CL0ZWUDF = "N";
    else
      CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
      CLNREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
      CLNREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq nbf*/
    end

    CLNREC.IV0IVCID = -1;
    CLNREC.IV0PARTN = " ";
    CLNREC.XGPCD = "**"; /* gpc code*/
    CLNREC.SY1STNBR = "******"; /* style*/
    CLNREC.SY2CLRID = "***"; /* color*/
    CLNREC.XDMCD = "**"; /* dim code*/
    CLNREC.XQACD = "**"; /* quality code*/
    CLNREC.XUMCD = "**"; /* unit of measure*/
    CL0ZW04.CL0ZW4SQ = "SS";

    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS13(); /* set-up cursor clnrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWEND = "N";
    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS14(); /* load rts*/
    end

    call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* close rts cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


   /* *******************************************************/
       /* retrieve data from clprec*/

  CLPREC.CLACLMNB = KL0ZM001.CLACLMNB;

  if (CL0ZW01.CL0ZWISP == "**")
    CLPREC.CL2ISNBR = -1;
    CLPREC.CLHSEQNB = -1;
  else
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
    CLPREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
    CLPREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
  end

  set CL0ZW08 empty;
  CL0ZW08.CL0ZW8SQ = "S1";
  CLPREC.IV0IVCID = -1;
  CLPREC.IV0PARTN = " ";
  CLPREC.XGPCD = "**";
  CLPREC.SY1STNBR = "******";
  CLPREC.SY2CLRID = "***";
  CLPREC.XDMCD = "**";
  CLPREC.XUMCD = "**";
  CLPREC.XQACD = "**";

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS16(); /* set-up cursor clprec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end


  CL0ZW01.CL0ZWEND = "N";
  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS17(); /* load defectives*/
  end

  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close def cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VDEFIT01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


   /* *******************************************************/
       /* retrieve data from clprec using sales sample claim*/
       /* number if this is a sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CLPREC.CLACLMNB = CL0ZW01.CL0ZWCLM;

    if (CL0ZW01.CL0ZWISP == "**")
      CLPREC.CL2ISNBR = -1;
      CLPREC.CLHSEQNB = -1;
    else
      CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
      CLPREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
      CLPREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
    end

    set CL0ZW08 empty;
    CL0ZW08.CL0ZW8SQ = "S1";
    CLPREC.IV0IVCID = -1;
    CLPREC.IV0PARTN = " ";
    CLPREC.XGPCD = "**";
    CLPREC.SY1STNBR = "******";
    CLPREC.SY2CLRID = "***";
    CLPREC.XDMCD = "**";
    CLPREC.XUMCD = "**";
    CLPREC.XQACD = "**";

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS16(); /* set-up cursor clprec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end


    CL0ZW01.CL0ZWEND = "N";
    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS17(); /* load defectives*/
    end

    call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close def cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS04"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFIT01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end


   /* *******************************************************/
          /* load style name and color*/

  CLXREC.CLXLSTAX = CLXREC.CLXARAYX; /* last array index*/
  CLXREC.CLXARAYX = 1; /* initialize to 0*/

  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
   && CLXREC.CLXARAYX <= CL0ZW01.CL0ZWIXM)

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS18(); /* get style name*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS19(); /* get color*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

   /* *******************************************************/
          /* sort routine*/

  CLXREC.CLXARAYX = 0; /* initialize to 0*/
  CLXREC.CLXBLDAY = "N"; /* build array*/
  CLXREC.CLXBLDSC = "Y"; /* build screen*/
  CL0ZW01.CL0ZWSRF = "N"; /* sort flag*/

  while (CL0ZW01.CL0ZWSRF == "N") /* sort flag*/
    KL0ZS20(); /* sort product array*/
    if (CL0ZW01.CL0ZWSCT == 0) /* array sorted?*/
      CL0ZW01.CL0ZWSRF = "Y";
    end
  end

   /* *******************************************************/
          /* set summary line skip flag if sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y") /* for sales sample claims scan the summary*/
    CL0ZW01.CL0ZWSTY = CL0ZW02.SY1STNBR[1]; /* table and set the skip*/
    CL0ZW01.CL0ZWCLR = CL0ZW02.SY2CLRID[1]; /* flag to 'y' for the*/
    CL0ZW01.CL0ZWDIM = CL0ZW02.XDMCD[1];
                                   /* secondary claim lines, but dont*/
    CLXREC.CLXARAYX = 2; /* set the skip flag if the prod is on one clm.*/

    while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
      CL0ZW01.CL0ZWSKP[CLXARAYX] = " ";
      if (CL0ZW01.CL0ZWSTY == CL0ZW02.SY1STNBR[CLXARAYX]
       && CL0ZW01.CL0ZWCLR == CL0ZW02.SY2CLRID[CLXARAYX]
       && CL0ZW01.CL0ZWDIM == CL0ZW02.XDMCD[CLXARAYX])
        if (CL0ZW02.XUMCD[CLXARAYX] == CL0ZW01.CL0ZWSSU)
          CL0ZW01.CL0ZWSKP[CLXARAYX] = "Y";
        else
          CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
          CL0ZW01.CL0ZWSKP[CLXARAYX] = "Y";
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
      end
      CL0ZW01.CL0ZWSTY = CL0ZW02.SY1STNBR[CLXARAYX];
      CL0ZW01.CL0ZWCLR = CL0ZW02.SY2CLRID[CLXARAYX];
      CL0ZW01.CL0ZWDIM = CL0ZW02.XDMCD[CLXARAYX];
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
    if (CLXREC.CLXARAYX > CL0ZW01.CL0ZWIXM)
      converseLib.validationFailed(251);
      CLXREC.CLXERRF = "Y";
      set KL0ZM001.CLACLMNB bold;
      return;
    end
  end


   /* *******************************************************/
          /* create total line*/

  CLXREC.CLXARAYX = 1;
  CL0ZW01.CL0ZWTL1 = 0;
  CL0ZW01.CL0ZWTL2 = 0;
  CL0ZW01.CL0ZWTL3 = 0;
  CL0ZW01.CL0ZWTL4 = 0;
  CL0ZW01.CL0ZWTL5 = 0;

  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
   && CLXREC.CLXARAYX <= CL0ZW01.CL0ZWIXM)
    CL0ZW01.CL0ZWTL1 = CL0ZW01.CL0ZWTL1 + CL0ZW02.CLNRTSQ[CLXARAYX];
    CL0ZW01.CL0ZWTL2 = CL0ZW01.CL0ZWTL2 + CL0ZW02.CLKAUTHQ[CLXARAYX];
    CL0ZW01.CL0ZWTL3 = CL0ZW01.CL0ZWTL3 + CL0ZW02.CL0ZWCRQ[CLXARAYX];
    CL0ZW01.CL0ZWTL4 = CL0ZW01.CL0ZWTL4 + CL0ZW02.CLNNCRQ[CLXARAYX];
    CL0ZW01.CL0ZWTL5 = CL0ZW01.CL0ZWTL5 + CL0ZW02.CLPDEFQ[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

  CLXREC.CLXARAYX = CLXREC.CLXLSTAX;
  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  if (CLXREC.CLXARAYX > CL0ZW01.CL0ZWIXM)
    converseLib.validationFailed(251);
    CLXREC.CLXERRF = "Y";
    set KL0ZM001.CLACLMNB bold;
    return;
  else
    CL0ZW09.SY2CLRAB[CLXARAYX] = "***    TOTAL:";
    CL0ZW02.CLNRTSQ[CLXARAYX] = CL0ZW01.CL0ZWTL1;
    CL0ZW02.CLKAUTHQ[CLXARAYX] = CL0ZW01.CL0ZWTL2;
    CL0ZW02.CL0ZWCRQ[CLXARAYX] = CL0ZW01.CL0ZWTL3;
    CL0ZW02.CLNNCRQ[CLXARAYX] = CL0ZW01.CL0ZWTL4;
    CL0ZW02.CLPDEFQ[CLXARAYX] = CL0ZW01.CL0ZWTL5;
    CLXREC.CLXLSTAX = CLXREC.CLXARAYX;
  end

  if (CL0ZW01.CL0ZWISP == "**")
    return;
  end

   /* *******************************************************/
        /* retrieve data from clgrec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  CLGREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CLGREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
  CLGREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
  CLGREC.CLGCMTYP = "R "; /* comment type*/
  CL0ZW03.CL0ZW3SQ = "MX";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS21(); /* select comments clgrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end


  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  set CLGREC empty;
  set CL0ZW03 empty;
  CLGREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CLGREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
  CLGREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
  CLGREC.CLGCMTYP = "I "; /* comment type*/
  CL0ZW03.CL0ZW3SQ = "MX";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS21(); /* select comments clgrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CL0ZW03.CL0ZW3ID >= 0)
    if (CL0ZW03.CL0ZW3MX > 0)
      KL0ZM001.CL0ZMICM = "Y"; /* inspection comment ind*/
    else
      KL0ZM001.CL0ZMICM = "N";
    end
  else
    KL0ZM001.CL0ZMICM = "N";
  end


   /* *******************************************************/
         /* select sum from clnrec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  set CLNREC empty;
  set CL0ZW04 empty;
  CLNREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CLNREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp number*/
  CLNREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
  CL0ZW04.CL0ZW4SQ = "SM";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* sum rts qty clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CL0ZW04.CL0ZW4I2 >= 0)
    KL0ZM001.CLMTRTNQ = CL0ZW04.CL0ZW4Q2; /* tot rts qty*/
  else
    KL0ZM001.CLMTRTNQ = 0; /* tot rts qty*/
  end

  if (CL0ZW04.CL0ZW4I1 >= 0)
    KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW04.CL0ZW4Q1;
  end

   /* *******************************************************/
       /* select sum from clnrec using sales sample claim*/
       /* number if this is a sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    set CLNREC empty;
    set CL0ZW04 empty;
    CLNREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim number*/
    CLNREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp number*/
    CLNREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
    CL0ZW04.CL0ZW4SQ = "SM";

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS13(); /* sum rts qty clnrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
      return;
    end

    if (CL0ZW04.CL0ZW4I2 >= 0)
      KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW04.CL0ZW4Q2; /* tot rts qty*/
    end

    if (CL0ZW04.CL0ZW4I1 >= 0)
      KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW04.CL0ZW4Q1;
    end
  end

   /* *******************************************************/
         /* select sum from clprec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  set CLPREC empty;
  set CL0ZW08 empty;
  CLPREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CLPREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp number*/
  CLPREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
  CL0ZW08.CL0ZW8SQ = "SM";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS16(); /* sum rts qty clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CL0ZW08.CL0ZW8I1 >= 0)
    KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW08.CL0ZW8Q1;
  end

  if (CL0ZW08.CL0ZW8I2 >= 0)
    KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW08.CL0ZW8Q2;
  end

   /* *******************************************************/
       /* select sum from clprec using sales sample claim*/
       /* number if this is a sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    set CLPREC empty;
    set CL0ZW08 empty;
    CLPREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim number*/
    CLPREC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
    CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp number*/
    CLPREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
    CL0ZW08.CL0ZW8SQ = "SM";

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS16(); /* sum rts qty clnrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
      return;
    end

    if (CL0ZW08.CL0ZW8I1 >= 0)
      KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW08.CL0ZW8Q1;
    end

    if (CL0ZW08.CL0ZW8I2 >= 0)
      KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CL0ZW08.CL0ZW8Q2;
    end
  end


   /* *******************************************************/
              /* check if returning from cl0y*/

  if (CLWREC.CLWYZSWT == "Z")
    CLXREC.CLXITMX = CLWREC.CLWYZIDX;
    CLWREC.CLWYZSWT = " ";
    CLWREC.CLWYZIDX = 0;
    CLWREC.SY1STNBR = " ";
    CLWREC.SY2CLRID = " ";
    CLWREC.XDMCD = " ";
    CLWREC.XUMCD = " ";
    CLWREC.CL2ISNBR = 0;
  end

end // end KL0ZS04

// select cljrec, cllrec, cl2rec
Function KL0ZS05()
   /* *************************************************************/
    /* Maintenance History:*/
    /* 05-31-90 CHELLM Added move of XBCCD and XBCABRV to map.*/
    /* 02-21-91 CHELLM Renamed CLLIBYID  to XXXUSRID.*/
    /* 04-13-92 twatso renamed clacmine to cl-clcom-fl*/
    /* 05-05-93 BCOURT Add menu option 19, like 09.*/
    /* 10-21-93 GDECKE  Remove reference to clwrec select list*/
    /* 10-26-93 GDECKE  Reinstate modified use of clw selcet list*/
    /* 07-17-01 DSINHA  Display SAP Rtn SO nbr on KL0ZM001 map*/
   /* *************************************************************/


  CLXREC.CLXCPROC = "KL0ZS05";


   /* *******************************************************/
       /* move claim header info to cl0zm001*/
   /* TCS Change begin - 07/17/01*/
  CLCREC.CLACLMNB = CLAREC.CLACLMNB; /* Claim number*/
   /* Primary Flag*/
  CLCREC.CLCPMAR = "Y";
  KL0ZS7A(); /* Select SAP Rtn SO Nbr*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
    KL0ZM001.ARCREFNB = CLCREC.ARCREFNB; /* SAP Rtn SO Nbr*/
  end

  KL0ZS7B(); /* Close cursor*/

   /* TCS Change end   - 07/17/01*/

  KL0ZM001.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  KL0ZM001.KUCCOID = CLAREC.KUCCOID; /* company id*/
  KL0ZM001.KUMSTRID = CLAREC.KUMSTRID; /* store id*/
  KL0ZM001.XNXCD = CLAREC.XNXCD; /* dept id*/
  KL0ZM001.XGPCD = CLAREC.XGPCD; /* gpc cd*/
  CL0ZW01.XGPCD = CLAREC.XGPCD; /* gpc cd*/
  KL0ZM001.YCTCD = CLAREC.YCTCD;
  KL0ZM005.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  KL0ZM005.KUCCOID = CLAREC.KUCCOID; /* company id*/
  KL0ZM005.KUMSTRID = CLAREC.KUMSTRID; /* store id*/
  KL0ZM005.XNXCD = CLAREC.XNXCD; /* dept id*/
  KL0ZM010.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  KL0ZM010.KUCCOID = CLAREC.KUCCOID; /* company id*/
  KL0ZM010.KUMSTRID = CLAREC.KUMSTRID; /* store id*/
  KL0ZM010.XNXCD = CLAREC.XNXCD; /* dept id*/
  KL0ZM010.XGPCD = CLAREC.XGPCD; /* gpc cd*/
  KL0ZM010.YCTCD = CLAREC.YCTCD;

   /* if this is a sales sample claim then get the paired*/
   /* sales sample claim number from the comment line and*/
    /* save the value on the map and in the cl0zw01 table.*/

  CL0ZW01.CL0ZWSAM = "N"; /* init. sales sample claim flag*/
  if (CLAREC.CLAORIGI == "B") /* if origin is sales sample batch*/
                                   /* gener.*/
    if (CLWREC.CLWMNOPT == 4
     || CLWREC.CLWMNOPT == 14
     || CLWREC.CLWMNOPT == 16
     || CLWREC.CLWMNOPT == 17)
      KL0ZSSC(); /* get sample claim number from comment*/
                                   /* line*/
      set KL0ZM001.CL0ZMSAM initialAttributes;
      set KL0ZM001.CL0ZMNBR initialAttributes;
      set KL0ZM001.CL0ZMCLM initialAttributes;
      set KL0ZM005.CL0ZMSAM initialAttributes;
      set KL0ZM005.CL0ZMNBR initialAttributes;
      set KL0ZM005.CL0ZMCLM initialAttributes;
      set KL0ZM010.CL0ZMSAM initialAttributes;
      set KL0ZM010.CL0ZMNBR initialAttributes;
      set KL0ZM010.CL0ZMCLM initialAttributes;
      if (CL0ZW01.CL0ZWSAM == "N") /* if sample claim nbr not found*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(659);
        set KL0ZM001.CL0ZMCLM cursor, modified, bold;
      else
        KL0ZM001.CL0ZMCLM = CL0ZW01.CL0ZWCLM;
        KL0ZM005.CL0ZMCLM = CL0ZW01.CL0ZWCLM;
        KL0ZM010.CL0ZMCLM = CL0ZW01.CL0ZWCLM;
      end
    else
      if (CLWREC.CLWMNOPT == 9
       || CLWREC.CLWMNOPT == 19) /* 5-5-93*/
        set KL0ZM001.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
        set KL0ZM001.CL0ZMNBR protect, invisible;
                                   /* if claim origin is not blank*/
        set KL0ZM001.CL0ZMCLM protect, invisible;
        set KL0ZM005.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
        set KL0ZM005.CL0ZMNBR protect, invisible;
                                   /* if claim origin is not blank*/
        set KL0ZM005.CL0ZMCLM protect, invisible;
        set KL0ZM010.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
        set KL0ZM010.CL0ZMNBR protect, invisible;
                                   /* if claim origin is not blank*/
        set KL0ZM010.CL0ZMCLM protect, invisible;
      else
        set KL0ZM001.CL0ZMSAM initialAttributes;
        set KL0ZM001.CL0ZMNBR initialAttributes;
         /* if origin is batch and menu option not 4,14,17 send message*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(670);
        set KL0ZM001.CL0ZMCLM cursor, modified, bold;
      end
    end
  else
    set KL0ZM001.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
    set KL0ZM001.CL0ZMNBR protect, invisible; /* if claim origin is not blank*/
    set KL0ZM001.CL0ZMCLM protect, invisible;
    set KL0ZM005.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
    set KL0ZM005.CL0ZMNBR protect, invisible; /* if claim origin is not blank*/
    set KL0ZM005.CL0ZMCLM protect, invisible;
    set KL0ZM010.CL0ZMSAM protect, invisible;
                                   /* blank out sample claim number*/
    set KL0ZM010.CL0ZMNBR protect, invisible; /* if claim origin is not blank*/
    set KL0ZM010.CL0ZMCLM protect, invisible;
  end

  if (CL0ZW01.CL0ZWSAM == "Y")
    set KL0ZM005.CL0ZMUML initialAttributes;
    set KL0ZM005.CL0ZMXUM[1] initialAttributes;
    set KL0ZM005.CL0ZMXUM[2] initialAttributes;
    set KL0ZM005.CL0ZMXUM[3] initialAttributes;
    set KL0ZM005.CL0ZMXUM[4] initialAttributes;
    set KL0ZM005.CL0ZMXUM[5] initialAttributes;
    set KL0ZM005.CL0ZMXUM[6] initialAttributes;
    set KL0ZM005.CL0ZMXUM[7] initialAttributes;
    set KL0ZM005.CL0ZMXUM[8] initialAttributes;
    set KL0ZM005.CL0ZMXUM[9] initialAttributes;
    set KL0ZM005.CL0ZMXUM[10] initialAttributes;
  end


  if (CLAREC.XBCCD != "  ") /* (05-31-90)*/
    KL0ZM001.XBCCD = CLAREC.XBCCD; /* warehouse*/
    KL0ZM005.XBCCD = CLAREC.XBCCD; /* warehouse*/
    KL0ZM001.XWHABRV = " ";
    KL0ZM005.XWHABRV = " ";
    if (CLAREC.XBCCD in XBCTBL.XBCCD)
      KL0ZM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
    KL0ZM005.XBCABRV = KL0ZM001.XBCABRV;
  else
    KL0ZM001.XBCCD = " ";
    KL0ZM005.XBCCD = " ";
    KL0ZM001.XWHABRV = " ";
    KL0ZM005.XWHABRV = " ";
  end

  if (CLAREC.CLACMIND == "N"
   || CLAREC.CLACMIND == " ")
    KL0ZM001.CL-CLCOM-FL = "N";
  else
    KL0ZM001.CL-CLCOM-FL = "Y";
  end

  if (CL0ZW01.CL0ZWFST == "Y") /* if first time thru*/
    KL0ZM001.KUMSTRNM = CLWREC.KUCCONM; /* company name*/
    KL0ZM001.CLHSEQNB = CLWREC.CLHSEQNB; /* seq nbr*/
    CL0ZW01.CLHSEQNB = CLWREC.CLHSEQNB;
    KL0ZM005.KUMSTRNM = CLWREC.KUCCONM; /* company name*/
    KL0ZM005.CLHSEQNB = CLWREC.CLHSEQNB; /* seq nbr*/
    KL0ZM010.KUMSTRNM = CLWREC.KUCCONM; /* company name*/
    KL0ZM010.CLHSEQNB = CLWREC.CLHSEQNB; /* seq nbr*/
    CL0ZW01.CLHSEQNB = CLWREC.CLHSEQNB; /* seq nbr*/
   /* The following clwrec select table code helps kl0z to set up*/
   /* the inspection number. It involves a non-standard use of the*/
   /* clwclmnb field for initial value of cl0zw01.cl0zwnbr.*/
   /* It would be a good idea to set up special fields in clwrec to*/
   /* handle this function using a more standardized technique.*/
   /* Related code is also in KL02S20, KL02130, KL0Y130, KL0YS50,*/
   /* and KL0Z100.*/
    if ("S" in CLWREC.CLWSELCD)
      CLWREC.CLWSELCD[sysVar.arrayIndex] = "V";
      CL0ZW01.CL0ZWNBR = CLWREC.CLWCLMNB[sysVar.arrayIndex];
      KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
      KL0ZM005.CL2ISNBR = CL0ZW01.CL0ZWNBR;
      KL0ZM010.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    else
      if (CLWREC.CL2ISNBR == 0)
        CL0ZW01.CL0ZWNBR = CLAREC.CLACISNB;
        KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        KL0ZM005.CL2ISNBR = CLAREC.CLACISNB;
        KL0ZM010.CL2ISNBR = CLAREC.CLACISNB;
        KL0ZM001.CLHSEQNB = CLAREC.CLACSQNB;
        KL0ZM005.CLHSEQNB = CLAREC.CLACSQNB;
        KL0ZM010.CLHSEQNB = CLAREC.CLACSQNB;
        CL0ZW01.CLHSEQNB = CLAREC.CLACSQNB;
      else
        CL0ZW01.CL0ZWNBR = CLWREC.CL2ISNBR;
        KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
        KL0ZM005.CL2ISNBR = CLWREC.CL2ISNBR;
        KL0ZM010.CL2ISNBR = CLWREC.CL2ISNBR;
      end
    end
    CL0ZW01.CL0ZWFST = "N";
  else
    KL0ZM001.CLHSEQNB = CLAREC.CLACSQNB;
    KL0ZM005.CLHSEQNB = CLAREC.CLACSQNB;
    KL0ZM010.CLHSEQNB = CLAREC.CLACSQNB;
    CL0ZW01.CLHSEQNB = CLAREC.CLACSQNB;
  end

  if (CLWREC.CLWYZSWT == "Y") /* came from cl0y application*/
    CL0ZW01.CL0ZWNBR = CLWREC.CL2ISNBR;
    KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM005.CL2ISNBR = CLWREC.CL2ISNBR;
    KL0ZM010.CL2ISNBR = CLWREC.CL2ISNBR;
    CL0ZW01.SY1STNBR = CLWREC.SY1STNBR;
    CL0ZW01.SY2CLRID = CLWREC.SY2CLRID;
    CL0ZW01.XDMCD = CLWREC.XDMCD;
    KL0ZM005.SY1STNBR = CL0ZW01.SY1STNBR;
    KL0ZM005.SY2CLRID = CL0ZW01.SY2CLRID;
    KL0ZM005.XDMCD = CL0ZW01.XDMCD;
    CL0ZW01.CL0ZWINS = "Y";
  else
    if (CLWREC.CLWYZSWT == "Z")
      CL0ZW01.CL0ZWNBR = CLWREC.CL2ISNBR;
      KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
      KL0ZM005.CL2ISNBR = CLWREC.CL2ISNBR;
      KL0ZM010.CL2ISNBR = CLWREC.CL2ISNBR;
    end
  end


   /* *******************************************************/
    /* retrieve data from cljrec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  CLJREC.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS06(); /* select unique cljrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0ZM001.CLJTATHQ = CLJREC.CLJTATHQ; /* tot auth qty*/
    KL0ZM001.CLJNCRFL = CLJREC.CLJNCRFL; /* noncred rtn flag*/
    KL0ZM005.CLJNCRFL = CLJREC.CLJNCRFL; /* noncred rtn flag*/
    KL0ZM010.CLJTATHQ = CLJREC.CLJTATHQ; /* tot auth qty*/
    KL0ZM010.CLJNCRFL = CLJREC.CLJNCRFL; /* noncred rtn flag*/
  else
    KL0ZM001.CLJTATHQ = 0;
    KL0ZM001.CLJNCRFL = " ";
    KL0ZM005.CLJNCRFL = " ";
    KL0ZM010.CLJTATHQ = 0;
    KL0ZM010.CLJNCRFL = " ";
  end


   /* *******************************************************/
        /* retrieve data from cllrec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

   /* now sum all cartons for all return records*/
  KL0ZS5A();

  CLLREC.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS07(); /* select unique cllrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  KL0ZM001.XWHCD = " ";
  KL0ZM001.XWHABRV = " ";

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0ZM001.XWHCD = CLLREC.XWHCD; /* warehouse*/
    KL0ZM005.XWHCD = CLLREC.XWHCD; /* warehouse*/
    CL0ZW01.XWHCD = CLLREC.XWHCD;
    CL0ZW01.CL0ZWCLF = "Y";
    KL0ZM001.XWHABRV = " ";
    if (CLLREC.XWHCD in XWHTBL.XWHCD)
      KL0ZM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    KL0ZM005.XWHABRV = KL0ZM001.XWHABRV;
  else
    if (CLAREC.CLACLMNB > 0)
      KL0ZM001.CLLNBRCV = 0;
      converseLib.validationFailed(525);
      CL0ZW01.CL0ZWCLF = "N";
      CLXREC.CLXERRF = "Y";
      CL0ZW01.CL0ZWUPD = "N";
      CL0ZW01.CL0ZWUDF = "N";
    end
  end


   /* *******************************************************/
      /* retrieve data from cl2rec*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  CL2REC.CLACLMNB = CLAREC.CLACLMNB; /* claim number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
  KL0ZM001.CL0ZMMSG = " ";
  KL0ZM010.CL0ZMMSG = " ";

  if (CL2REC.CL2ISNBR == 0)
    CL0ZW01.CL0ZW2SW = "N";
    CL0ZW01.CL0ZWNBR = CL0ZW01.CLACISNB;
    KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM005.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM010.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM001.CLHSEQNB = CLAREC.CLACSQNB;
    KL0ZM005.CLHSEQNB = CLAREC.CLACSQNB;
    KL0ZM010.CLHSEQNB = CLAREC.CLACSQNB;
    CL0ZW01.CLHSEQNB = CLAREC.CLACSQNB;
    KL0ZM001.CLLIDT = VGVar.currentShortGregorianDate;
    KL0ZM001.XXXUSRID = COMMAREA.CAUSERID;
    KL0ZM010.CLLIDT = VGVar.currentShortGregorianDate;
    KL0ZM010.XXXUSRID = COMMAREA.CAUSERID;
     /* MOVE 'N' TO CL0ZM001.CL0ZMRST;*/
     /* MOVE 'N' TO CL0ZM010.CL0ZMRST;*/
    KL0ZM001.CL0ZMINF = "N";
    KL0ZM010.CL0ZMINF = "N";
    KL0ZM001.YCICD = "IIP";
    KL0ZM010.YCICD = "IIP";
    KL0ZM001.YCISDESC = " ";
    if (KL0ZM001.YCICD in YCITBL.YCICD)
      KL0ZM001.YCISDESC = YCITBL.YCISDESC[sysVar.arrayIndex];
    end
    CL0ZW01.CL0ZWUAR = "I";
    CL0ZW01.CL0ZWU2R = "Y";
  else
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS08(); /* select unique cl2rec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0ZW01.CL0ZW2SW = "Y";
      KL0ZM001.XXXUSRID = CL2REC.XXXUSRID; /* inspected by*/
      KL0ZM010.XXXUSRID = CL2REC.XXXUSRID; /* inspected by*/
      CL0ZW01.CL0ZWNBR = CL2REC.CL2ISNBR; /* insp nbr*/
      KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
      KL0ZM005.CL2ISNBR = CL2REC.CL2ISNBR;
      KL0ZM010.CL2ISNBR = CL2REC.CL2ISNBR;
      CL0ZW01.CL0ZWDTE = CL2REC.CL2ISBDT;
      KL0ZM001.CLLIDT = CL0ZW01.CL0ZWDAT;
      KL0ZM010.CLLIDT = CL0ZW01.CL0ZWDAT;
      KL0ZM001.CLHSEQNB = CL2REC.CLHSEQNB; /* seq nbr*/
      KL0ZM005.CLHSEQNB = CL2REC.CLHSEQNB; /* seq nbr*/
      KL0ZM010.CLHSEQNB = CL2REC.CLHSEQNB; /* seq nbr*/
      CL0ZW01.CLHSEQNB = CL2REC.CLHSEQNB;
      KL0ZM001.YCICD = CL2REC.YCICD; /* insp code*/
      KL0ZM010.YCICD = CL2REC.YCICD; /* insp code*/
      KL0ZM001.YCISDESC = " ";
      if (CL2REC.YCICD in YCITBL.YCICD)
        KL0ZM001.YCISDESC = YCITBL.YCISDESC[sysVar.arrayIndex];
      end

      KL0ZM001.CL0ZMINF = "N";
      KL0ZM010.CL0ZMINF = "N";
      if (CL2REC.YCICD == "IIP" /* check insp codes*/
       || CL2REC.YCICD == "RSO")
        KL0ZM001.CL0ZMINF = "N";
        KL0ZM010.CL0ZMINF = "N";
      else
        if (CL2REC.YCICD == "RMO"
         || CL2REC.YCICD == "RMS")
          KL0ZM001.CL0ZMINF = "Y";
          KL0ZM010.CL0ZMINF = "Y";
          KL0ZM001.CL0ZMMSG = "INSPECTION COMPLETE";
          KL0ZM010.CL0ZMMSG = "INSPECTION COMPLETE";
        end
      end

       /* MOVE 'N' TO CL0ZM001.CL0ZMRST;*/
       /* MOVE 'N' TO CL0ZM010.CL0ZMRST;*/
       /* IF CL2REC.YCICD EQ 'IIP';*/
         /* OR CL2REC.YCICD EQ 'RMO';*/
         /* MOVE 'N' TO CL0ZM001.CL0ZMRST;*/
         /* MOVE 'N' TO CL0ZM010.CL0ZMRST;*/
       /* ELSE ;*/
         /* IF CL2REC.YCICD EQ 'RSO';*/
           /* OR CL2REC.YCICD EQ 'RMS';*/
           /* MOVE 'Y' TO CL0ZM001.CL0ZMRST;*/
           /* MOVE 'Y' TO CL0ZM010.CL0ZMRST;*/
         /* END ;*/
       /* END ;*/
      if (CL2REC.YCICD == "CMP")
         /* MOVE 'Y' TO CL0ZM001.CL0ZMRST;*/
         /* MOVE 'Y' TO CL0ZM010.CL0ZMRST;*/
        KL0ZM001.CL0ZMINF = "Y";
        KL0ZM010.CL0ZMINF = "Y";
        KL0ZM001.CL0ZMMSG = "INSPECTION COMPLETE";
        KL0ZM010.CL0ZMMSG = "INSPECTION COMPLETE";
      end
    else
      CL0ZW01.CL0ZW2SW = "N";
      CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
      KL0ZM001.CLLIDT = VGVar.currentShortGregorianDate;
      KL0ZM001.XXXUSRID = COMMAREA.CAUSERID;
      KL0ZM010.CLLIDT = VGVar.currentShortGregorianDate;
      KL0ZM010.XXXUSRID = COMMAREA.CAUSERID;
       /* MOVE 'N' TO CL0ZM001.CL0ZMRST;*/
       /* MOVE 'N' TO CL0ZM010.CL0ZMRST;*/
      KL0ZM001.CL0ZMINF = "N";
      KL0ZM010.CL0ZMINF = "N";
      KL0ZM001.YCICD = "IIP";
      KL0ZM010.YCICD = "IIP";
      KL0ZM001.YCISDESC = " ";
      if (CL2REC.YCICD in YCITBL.YCICD)
        KL0ZM001.YCISDESC = YCITBL.YCISDESC[sysVar.arrayIndex];
      end
      CL0ZW01.CL0ZWU2R = "Y";
    end
  end


   /* *******************************************************/
       /* retrieve customer data*/

  CL0ZW01.CL0ZWDCT = 0; /* claims address*/
  CL0ZW01.CL0ZWDFL = "Y";
  KUMREC.KUCCOID = KL0ZM001.KUCCOID;
  KUMREC.KUMSTRID = KL0ZM001.KUMSTRID;

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS09(); /* select store kumrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0ZM001.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/
    KL0ZM005.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/
    KL0ZM010.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/
    CLWREC.KUCCONM = " ";
  else
    KL0ZM001.KUMSTRNM = " ";
    KL0ZM005.KUMSTRNM = " ";
    KL0ZM010.KUMSTRNM = " ";
    CLWREC.KUCCONM = " ";
  end

end // end KL0ZS05

// select unique from cljrec
Function KL0ZS06()

  CLXREC.CLXCPROC = "CL0ZS06"; /* set current proc name*/

  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS06"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRAHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS06

// select unique cllrec
Function KL0ZS07()

  CLXREC.CLXCPROC = "CL0ZS07"; /* set current proc name*/

  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS07"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1310"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS07

// select unique cl2rec
Function KL0ZS08()

  CLXREC.CLXCPROC = "CL0ZS08"; /* set current proc name*/
  SQLCA.VAGen_SQLCODE = 0;
  CL0ZW01.CL0ZW2SW = "N"; /* cl2rec switch*/

  call "IO2870" ("S ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZW2SW = "Y"; /* cl2rec exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS08"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS08

// select store
Function KL0ZS09()

  CLXREC.CLXCPROC = "CL0ZS09";

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS09"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0340"; /* location*/
  TA1REC.TA1DBASE = "DCUST"; /* database*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
  CLXREC.XXXWDTE = KUMREC.KUCCOID; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS09

// accum rts credit & ncr totals
Function KL0ZS0A()

  CLXREC.CLXCPROC = "CL0ZS0A";

  KL0ZM005.CL0ZMRTS = 0;
  KL0ZM005.CL0ZMNCD = 0;
  CL0ZW01.CL0ZWCYX = 1;
  while (CL0ZW01.CL0ZWCYX <= CL0ZW01.CL0ZWSXM) /* max size table*/
    KL0ZM005.CL0ZMRTS = KL0ZM005.CL0ZMRTS + CL0ZW05.CLNRTSQ[CL0ZWCYX];
    KL0ZM005.CL0ZMNCD = KL0ZM005.CL0ZMNCD + CL0ZW05.CLNNCRQ[CL0ZWCYX];
    CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
  end


end // end KL0ZS0A

// initialize cl0zw06 table
Function KL0ZS0B()

  CLXREC.CLXCPROC = "CL0ZS0B";

  set CL0ZW06 empty;

end // end KL0ZS0B

// select unique from kucrec
Function KL0ZS0F()
   /* ------------------------------------------------------*/
     /* SELECT UNIQUE FROM KUCREC*/
   /* ------------------------------------------------------*/
     /* M A I N T E N A N C E     H I S T O R Y     L O G*/
   /* ------------------------------------------------------*/
    /* 09/18/91   GDECKE   COPIED LOGIC FROM CL0R TO GET CUSTOMER*/
                        /* (DCUST.VCMPNY01)*/
   /* ------------------------------------------------------*/
  CLXREC.CLXCPROC = "CL0ZS0F"; /* set current proc name*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS0F"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
  TA1REC.TA1DBASE = "DCUST "; /* database*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS0F

// select claim address
Function KL0ZS10()

  CLXREC.CLXCPROC = "CL0ZS10";

  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS10"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS10

// set up cursor for clkrec
Function KL0ZS11()

  CLXREC.CLXCPROC = "CL0ZS11";
  CL0ZW01.CL0ZWKCT = 0; /* initialize clkrec count*/

  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
      CLXREC.CLXBLDSC = "N"; /* build screen flag*/
      CLXREC.CLXERRF = "N"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS11"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS11

// move clkrec items to array
Function KL0ZS12()
     /* MOVE CLKREC (RA ITEM) LINES TO ARRAY*/

   /* *********************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G            **/
   /* *------------------------------------------------------------------**/
   /* *    DATE     PGMR     DESCRIPTION                                 **/
   /* *------------------------------------------------------------------**/
   /* * 03-13-92    GDECKE   MARCH DB2 TABLE CHANGES.                    **/
   /* * 04-13-92    TWATSO   APRIL DB2 TABLE CHANGES.  OP-BK-MO          **/
   /* *********************************************************************/


  CLXREC.CLXCPROC = "CL0ZS12";

  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS12"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CLKREC.SY5SZID == 0
   && CLKREC.CLKNBRSZ > 0)
    return;
  end

  CL0ZW01.CL0ZWKCT = CL0ZW01.CL0ZWKCT + 1; /* add 1 to clkrec count*/
  CL0ZW01.SY1STNBR = CLKREC.SY1STNBR;
  CL0ZW01.SY2CLRID = CLKREC.SY2CLRID;
  CL0ZW01.XDMCD = CLKREC.XDMCD;
  if (CLKREC.XUMCD != " ")
    CL0ZW01.XUMCD = CLKREC.XUMCD;
  else
    CL0ZW01.XUMCD = "01";
  end

  CL0ZW01.XQACD = CLKREC.XQACD;
  CL0ZW01.XEGCD = CLKREC.XEGCD;
  CL0ZW01.XBK-BK-SESN-CD = CLKREC.XBK-BK-SESN-CD;
  CL0ZW01.OP-BK-YR = CLKREC.OP-BK-YR;
  CL0ZW01.OP-BK-MO = CLKREC.OP-BK-MO;

  if (CL0ZW01.CL0ZWKEY in CL0ZW02.CL0ZWKEY)
    CL0ZW02.CLKAUTHQ[sysVar.arrayIndex] = CL0ZW02.CLKAUTHQ[sysVar.arrayIndex] + CLKREC.CLKAUTHQ;
    return;
  end

  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* array index*/

  if (CLXREC.CLXARAYX > CL0ZW01.CL0ZWIXM) /* if array full?*/
    converseLib.validationFailed(251); /* maximum data selected*/
    CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
    return;
  end

  CL0ZW02.SY1STNBR[CLXARAYX] = CLKREC.SY1STNBR;
  CL0ZW02.SY2CLRID[CLXARAYX] = CLKREC.SY2CLRID;
  CL0ZW02.XDMCD[CLXARAYX] = CLKREC.XDMCD;
  CL0ZW02.XUMCD[CLXARAYX] = CLKREC.XUMCD;
  CL0ZW02.XQACD[CLXARAYX] = CLKREC.XQACD;
  CL0ZW02.XEGCD[CLXARAYX] = CLKREC.XEGCD;
  CL0ZW02.XBK-BK-SESN-CD[CLXARAYX] = CLKREC.XBK-BK-SESN-CD;
  CL0ZW02.OP-BK-YR[CLXARAYX] = CLKREC.OP-BK-YR;
  CL0ZW02.OP-BK-MO[CLXARAYX] = CLKREC.OP-BK-MO;
  CL0ZW02.CLKAUTHQ[CLXARAYX] = CLKREC.CLKAUTHQ;

  if (CL0ZW01.CL0ZWSAM == "Y" /* if sales sample claim then save primary*/
   && KL0ZM001.CL0ZMCLM == CLKREC.CLACLMNB) /* claim unit of measure*/
    CL0ZW01.CL0ZWSSU = CLKREC.XUMCD; /* in cl0zw01 table*/
  end

end // end KL0ZS12

// set-up cursor clnrec
Function KL0ZS13()

  CLXREC.CLXCPROC = "CL0ZS13";

  call "IO1330" (CL0ZW04, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* rts*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
      CLXREC.CLXBLDSC = "N"; /* build screen flag*/
      CLXREC.CLXERRF = "N"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS13"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS13

// move clnrec items to array
Function KL0ZS14()
   /* *************************************************************/
                       /* MAINTENAMCE HISTORY*/

   /* *****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G         **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 02-21-91  CHELLM  Renamed CLLIBYID  to XXXUSRID.             **/
   /* * 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES.                   **/
   /* * 04-13-92  TWATSO  APRIL DB2 TABLE CHANGES  ADD OP-BK-MO      **/
   /* *****************************************************************/
  CLXREC.CLXCPROC = "CL0ZS14";

  KL0ZS15(); /* select next*/

  if (CL0ZW01.CL0ZWEND == "Y") /* no more records*/
    return;
  end

  set KL0ZM001.XXXUSRID skip;
  set KL0ZM001.CLLIDT skip;

  CL0ZW01.CL0ZWNCT = CL0ZW01.CL0ZWNCT + 1; /* clnrec count*/
  CL0ZW01.SY1STNBR = CLNREC.SY1STNBR; /* style*/
  CL0ZW01.SY2CLRID = CLNREC.SY2CLRID; /* color*/
  CL0ZW01.XDMCD = CLNREC.XDMCD; /* dim*/
  CL0ZW01.XQACD = CLNREC.XQACD; /* quality*/
  CL0ZW01.XEGCD = CLNREC.XEGCD; /* ENGINEER DIFF*/
  CL0ZW01.XBK-BK-SESN-CD = CLNREC.XBK-BK-SESN-CD; /* BOOK SEASON*/
  CL0ZW01.OP-BK-YR = CLNREC.OP-BK-YR; /* BOOK YEAR*/
  CL0ZW01.OP-BK-MO = CLNREC.OP-BK-MO; /* BOOK YEAR*/
  CL0ZW01.XUMCD = CLNREC.XUMCD; /* UNIT OF MEASURE*/
  KL0ZM001.CLMTRTNQ = KL0ZM001.CLMTRTNQ + CLNREC.CLNRTSQ;

  if (CL0ZW01.CL0ZWKEY in CL0ZW02.CL0ZWKEY)
    CL0ZW02.CLNRTSQ[sysVar.arrayIndex] = CL0ZW02.CLNRTSQ[sysVar.arrayIndex] + CLNREC.CLNRTSQ;
    CL0ZW02.CLNNCRQ[sysVar.arrayIndex] = CL0ZW02.CLNNCRQ[sysVar.arrayIndex] + CLNREC.CLNNCRQ;
    CL0ZW02.CL0ZWCRQ[sysVar.arrayIndex] = CL0ZW02.CL0ZWCRQ[sysVar.arrayIndex] + CLNREC.CLNRTSQ;
    CL0ZW02.XQACD[sysVar.arrayIndex] = CLNREC.XQACD;
    CL0ZW02.XEGCD[sysVar.arrayIndex] = CLNREC.XEGCD;
    CL0ZW02.XBK-BK-SESN-CD[sysVar.arrayIndex] = CLNREC.XBK-BK-SESN-CD;
    CL0ZW02.OP-BK-YR[sysVar.arrayIndex] = CLNREC.OP-BK-YR;
    CL0ZW02.OP-BK-MO[sysVar.arrayIndex] = CLNREC.OP-BK-MO;
    CL0ZW02.XOWCD[sysVar.arrayIndex] = CLNREC.XOWCD;
    CL0ZW02.XUMCD[sysVar.arrayIndex] = CLNREC.XUMCD;
    return;
  end

  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* array index*/

  if (CLXREC.CLXARAYX > CL0ZW01.CL0ZWIXM) /* if array full?*/
    converseLib.validationFailed(251); /* maximum data selected*/
    CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
    return;
  end

  CL0ZW01.CL0ZWNSW = "Y";
  CL0ZW02.SY1STNBR[CLXARAYX] = CLNREC.SY1STNBR;
  CL0ZW02.SY2CLRID[CLXARAYX] = CLNREC.SY2CLRID;
  CL0ZW02.XDMCD[CLXARAYX] = CLNREC.XDMCD;
  CL0ZW02.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
  CL0ZW02.CLNNCRQ[CLXARAYX] = CLNREC.CLNNCRQ;
  CL0ZW02.CL0ZWCRQ[CLXARAYX] = CLNREC.CLNRTSQ;
  CL0ZW02.XQACD[CLXARAYX] = CLNREC.XQACD;
  CL0ZW02.XEGCD[CLXARAYX] = CLNREC.XEGCD;
  CL0ZW02.XBK-BK-SESN-CD[CLXARAYX] = CLNREC.XBK-BK-SESN-CD;
  CL0ZW02.OP-BK-YR[CLXARAYX] = CLNREC.OP-BK-YR;
  CL0ZW02.OP-BK-MO[CLXARAYX] = CLNREC.OP-BK-MO;
  CL0ZW02.XOWCD[CLXARAYX] = CLNREC.XOWCD;
  CL0ZW02.XUMCD[CLXARAYX] = CLNREC.XUMCD;

end // end KL0ZS14

// select next clnrec
Function KL0ZS15()

  CLXREC.CLXCPROC = "CL0ZS15";

  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS15"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0ZS15

// set-up cursor clprec
Function KL0ZS16()

  CLXREC.CLXCPROC = "CL0ZS16";
  CL0ZW01.CL0ZWPCT = 0; /* initialize clprec count*/

  call "IO1350" (CL0ZW08, SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* defective items*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXBLDSC = "N"; /* build screen flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS16"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VDEFIT01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS16

// move clprec items to array
Function KL0ZS17()
   /* *************************************************************/
                       /* MAINTENANCE HISTORY*/

   /* *****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G        **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 02-21-91  CHELLM  Renamed CLLIBYID to XXXUSRID.              **/
   /* * 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES                    **/
   /* * 04-13-92  TWATSO  APRIL DB2 TABLE CHANGES  ADD OP-BK-MO      **/

   /* *************************************************************/
  CLXREC.CLXCPROC = "CL0ZS17";

  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS17"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1350"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VDEFIT01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  set KL0ZM001.XXXUSRID skip;
  set KL0ZM001.CLLIDT skip;

  CL0ZW01.CL0ZWPCT = CL0ZW01.CL0ZWPCT + 1; /* clprec count*/
  CL0ZW01.SY1STNBR = CLPREC.SY1STNBR; /* style*/
  CL0ZW01.SY2CLRID = CLPREC.SY2CLRID; /* color*/
  CL0ZW01.XDMCD = CLPREC.XDMCD; /* dimension*/
  CL0ZW01.XQACD = CLPREC.XQACD; /* quality*/
  CL0ZW01.XEGCD = "000"; /* ENGINEER DIFF*/
  CL0ZW01.XBK-BK-SESN-CD = "  "; /* BOOK SEASON*/
  CL0ZW01.OP-BK-YR = 0; /* BOOK YEAR*/
  CL0ZW01.OP-BK-MO = 0; /* BOOK MONTH*/
  CL0ZW01.XUMCD = CLPREC.XUMCD; /* unit of measure*/

  if (CL0ZW01.CL0ZWKEY in CL0ZW02.CL0ZWKEY)
    CL0ZW02.CLPDEFQ[sysVar.arrayIndex] = CL0ZW02.CLPDEFQ[sysVar.arrayIndex] + CLPREC.CLPDEFQ;
    CL0ZW02.CLNNCRQ[sysVar.arrayIndex] = CL0ZW02.CLNNCRQ[sysVar.arrayIndex] + CLPREC.CLNNCRQ;
    return;
  end

  CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* array index*/

  if (CLXREC.CLXARAYX > CL0ZW01.CL0ZWIXM) /* if array full?*/
    converseLib.validationFailed(251); /* maximum data selected*/
    CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
    return;
  end

  CL0ZW02.SY1STNBR[CLXARAYX] = CLPREC.SY1STNBR;
  CL0ZW02.SY2CLRID[CLXARAYX] = CLPREC.SY2CLRID;
  CL0ZW02.XDMCD[CLXARAYX] = CLPREC.XDMCD;
  CL0ZW02.XUMCD[CLXARAYX] = CLPREC.XUMCD;
  CL0ZW02.XQACD[CLXARAYX] = CLPREC.XQACD;
  CL0ZW02.XEGCD[CLXARAYX] = "000";
  CL0ZW02.XBK-BK-SESN-CD[CLXARAYX] = "  ";
  CL0ZW02.OP-BK-YR[CLXARAYX] = 0;
  CL0ZW02.OP-BK-MO[CLXARAYX] = 0;
  CL0ZW02.CLPDEFQ[CLXARAYX] = CLPREC.CLPDEFQ;
  CL0ZW02.CLNNCRQ[CLXARAYX] = CLPREC.CLNNCRQ;

end // end KL0ZS17

// load style name
Function KL0ZS18()

  CLXREC.CLXCPROC = "CL0ZS18"; /* set current proc name*/

  SY1REC.XGPCD = CL0ZW01.XGPCD;
  SY1REC.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];


  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW09.SY1SSTNM[CLXARAYX] = SY1REC.SY1SSTNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWDFL = "N";
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW09.SY1SSTNM[CLXARAYX] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
        if (CL0ZW01.CL0ZWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS18"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0120"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database*/
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

end // end KL0ZS18

// load color
Function KL0ZS19()

  CLXREC.CLXCPROC = "CL0ZS19"; /* set current proc name*/

  SY2REC.XGPCD = CL0ZW01.XGPCD;
  SY2REC.SY1STNBR = CL0ZW02.SY1STNBR[CLXARAYX];
  SY2REC.SY2CLRID = CL0ZW02.SY2CLRID[CLXARAYX];
  SY2REC.XDMCD = CL0ZW02.XDMCD[CLXARAYX];


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW09.SY2CLRAB[CLXARAYX] = SY2REC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWDFL = "N";
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW09.SY2CLRAB[CLXARAYX] = " ";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
        CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
        if (CL0ZW01.CL0ZWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
          CLXREC.CLXERRF = "Y"; /* error flag*/
        end
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS19"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database*/
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

end // end KL0ZS19

// sort product array
Function KL0ZS20()

  CLXREC.CLXCPROC = "CL0ZS20";

  if (CL0ZW01.CL0ZWCYX < 0) /* CALL FOR CNTL TABL EVERY 33RD SORT LINE*/
    KL0ZS25(); /* THIS WILL RESET CICS TIMER BY*/
    CL0ZW01.CL0ZWCYX = 0; /* CALLING XC0040.*/
  else
    if (CLXREC.CLXLSTAX > 300
     && CL0ZW01.CL0ZWCYX > 10) /* TO PREVENT A CICS TIME OUT ABEND.*/
      KL0ZS25(); /* THIS WILL RESET CICS TIMER BY*/
      CL0ZW01.CL0ZWCYX = 0; /* CALLING XC0040.*/
    else
      if (CLXREC.CLXLSTAX > 100
       && CL0ZW01.CL0ZWCYX > 30) /* TO PREVENT A CICS TIME OUT ABEND.*/
        KL0ZS25(); /* THIS WILL RESET CICS TIMER BY*/
        CL0ZW01.CL0ZWCYX = 0; /* CALLING XC0040.*/
      else
        CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
      end
    end
  end

  CL0ZW01.CL0ZWSCT = 0; /* initialize sort count*/
  CL0ZW01.CL0ZWIX1 = 1; /* initialize index1*/
  CL0ZW01.CL0ZWIX2 = 2; /* initialize index2*/

  while (CL0ZW01.CL0ZWIX2 <= CLXREC.CLXLSTAX) /* last array index*/

    if (CL0ZW02.CL0ZWKEY[CL0ZWIX1] > CL0ZW02.CL0ZWKEY[CL0ZWIX2])

       /* SAVE FIRST LINE IN CL0ZW01 RECORD*/

      CL0ZW01.CL0ZW2KY = CL0ZW02.CL0ZWKEY[CL0ZWIX1];
      CL0ZW01.SY1SSTNM = CL0ZW09.SY1SSTNM[CL0ZWIX1];
      CL0ZW01.SY2CLRAB = CL0ZW09.SY2CLRAB[CL0ZWIX1];
      CL0ZW01.CL0ZWGRP = CL0ZW02.CL0ZWGRP[CL0ZWIX1];

       /* MOVE SECOND LINE UP IN TABLE*/

      CL0ZW02.CL0ZWKEY[CL0ZWIX1] = CL0ZW02.CL0ZWKEY[CL0ZWIX2];
      CL0ZW09.SY1SSTNM[CL0ZWIX1] = CL0ZW09.SY1SSTNM[CL0ZWIX2];
      CL0ZW09.SY2CLRAB[CL0ZWIX1] = CL0ZW09.SY2CLRAB[CL0ZWIX2];
      CL0ZW02.CL0ZWGRP[CL0ZWIX1] = CL0ZW02.CL0ZWGRP[CL0ZWIX2];

       /* MOVE FIRST LINE DOWN IN TABLE*/

      CL0ZW02.CL0ZWKEY[CL0ZWIX2] = CL0ZW01.CL0ZW2KY;
      CL0ZW09.SY1SSTNM[CL0ZWIX2] = CL0ZW01.SY1SSTNM;
      CL0ZW09.SY2CLRAB[CL0ZWIX2] = CL0ZW01.SY2CLRAB;
      CL0ZW02.CL0ZWGRP[CL0ZWIX2] = CL0ZW01.CL0ZWGRP;

       /* INCREMENT SORT COUNT*/

      CL0ZW01.CL0ZWSCT = CL0ZW01.CL0ZWSCT + 1;
    end

    CL0ZW01.CL0ZWIX1 = CL0ZW01.CL0ZWIX1 + 1; /* first index*/
    CL0ZW01.CL0ZWIX2 = CL0ZW01.CL0ZWIX2 + 1; /* second index*/
    if (CL0ZW01.CL0ZWIX2 > CL0ZW01.CL0ZWIXM) /* IF EXCEEDING TABLE SIZE*/
      converseLib.validationFailed(251);
      CLXREC.CLXERRF = "Y";
      set KL0ZM001.CLACLMNB bold;
      CL0ZW01.CL0ZWSCT = 0;
      return;
    end
  end

end // end KL0ZS20

// select comments
Function KL0ZS21()

  CLXREC.CLXCPROC = "CL0ZS21";

  call "IO1260" (CL0ZW03, SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS21"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLCOM01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS21

// move data from array to map
Function KL0ZS22()
   /* ************************************************************/
   /* *    This process move the data from the array to the     **/
   /* *    screen (cl0zm001).                                   **/
   /* ************************************************************/
                       /* MAINTENANCE HISTORY*/

   /* 02-21-91 CHELLM Renamed CLLIBYID to XXXUSRID.*/

   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS22";

  set KL0ZM001.CLACLMNB initialAttributes;
  set KL0ZM001.CL2ISNBR initialAttributes;
  set KL0ZM001.CLJNCRFL initialAttributes;
  set KL0ZM001.CL0ZMRST initialAttributes;

  if (KL0ZM001.CL0ZMINF == "Y")
    set KL0ZM001.CL0ZMINF skip;
  else
    set KL0ZM001.CL0ZMINF initialAttributes;
  end

  if (KL0ZM001.XXXUSRID != " ")
    set KL0ZM001.XXXUSRID skip;
    set KL0ZM001.CLLIDT skip;
  else
    set KL0ZM001.XXXUSRID initialAttributes;
    set KL0ZM001.CLLIDT initialAttributes;
  end

  KL0ZS23(); /* check security*/

  if (CLXREC.CLXARY1X > 0)
    if (CLXREC.CLXARY1X >= CLXREC.CLXLSTAX)
      CLXREC.CLXARAYX = CLXREC.CLXARY1X - 9;
    else
      CLXREC.CLXARAYX = CLXREC.CLXARY1X;
    end
  else
    CLXREC.CLXARAYX = 0;
  end

  CLXREC.CLXARY1X = 0;
  CLXREC.CLXLINEX = 1; /* initialize*/

  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN)
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    KL0ZM001.CL0ZMSEL[CLXLINEX] = " ";
    set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
    if (CL0ZW02.SY1STNBR[CLXARAYX] == " ")
      set KL0ZM001.CL0ZMSEL[CLXLINEX] skip, invisible;
    else
      set KL0ZM001.CL0ZMSEL[CLXLINEX] initialAttributes;
    end
    if (CLXREC.CLXLINEX == 1)
      CLXREC.CLXARY1X = CLXREC.CLXARAYX - 1;
    end
    KL0ZM001.CL0ZMSEL[CLXLINEX] = CL0ZW01.CL0ZWVFL[CLXARAYX];
    CL0ZW01.CL0ZWVFL[CLXARAYX] = " ";
    KL0ZM001.SY1STNBR[CLXLINEX] = CL0ZW02.SY1STNBR[CLXARAYX];
    KL0ZM001.SY2CLRID[CLXLINEX] = CL0ZW02.SY2CLRID[CLXARAYX];
    KL0ZM001.XDMCD[CLXLINEX] = CL0ZW02.XDMCD[CLXARAYX];
    KL0ZM001.SY1SSTNM[CLXLINEX] = CL0ZW09.SY1SSTNM[CLXARAYX];
    KL0ZM001.SY2CLRAB[CLXLINEX] = CL0ZW09.SY2CLRAB[CLXARAYX];
    KL0ZM001.XQACD[CLXLINEX] = CL0ZW02.XQACD[CLXARAYX];
    KL0ZM001.XUMCD[CLXLINEX] = CL0ZW02.XUMCD[CLXARAYX];
    KL0ZM001.CLKAUTHQ[CLXLINEX] = CL0ZW02.CLKAUTHQ[CLXARAYX];
    KL0ZM001.CLNRTSQ[CLXLINEX] = CL0ZW02.CLNRTSQ[CLXARAYX];
    KL0ZM001.CLNNCRQ[CLXLINEX] = CL0ZW02.CLNNCRQ[CLXARAYX];
    KL0ZM001.CLPDEFQ[CLXLINEX] = CL0ZW02.CLPDEFQ[CLXARAYX];
    CL0ZW01.CL0ZWCRQ = CL0ZW02.CL0ZWCRQ[CLXARAYX];
    CL0ZW01.CL0ZWCRQ = CL0ZW01.CL0ZWCRQ + CL0ZW02.CLPDEFQ[CLXARAYX];
    KL0ZM001.CL0ZMCRQ[CLXLINEX] = CL0ZW01.CL0ZWCRQ;

    if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim then reset the*/
      if (CLXLINEX == 1)
        set KL0ZM001.CL0ZMSEL[1] cursor;
      end
      if (CL0ZW01.CL0ZWSKP[CLXARAYX] == "Y") /* attribute of the select field*/
        set KL0ZM001.CL0ZMSEL[CLXLINEX] skip, invisible;
        if (CLXLINEX == 1)
          set KL0ZM001.CL0ZMSEL[2] cursor;
        end
      end
    end

    if (CL0ZW02.XUMCD[CLXARAYX] != "  " /* if the unit of measure code*/
     && CL0ZW02.XUMCD[CLXARAYX] != "01" /* is not eaches*/
     && CL0ZW01.CL0ZWSAM != "Y"         /* and not sales sample claim*/
     && CLAREC.CLAORIGI != "B")        
      converseLib.validationFailed(593); /* set up warning message for display*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

end // end KL0ZS22

// check security using ycicd
Function KL0ZS23()
   /* *************************************************************/
    /* Maintenance History:*/
    /* 02-21-91 CHELLM Renamed CLLIBYID  to XXXUSRID.*/



   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS23";

  set KL0ZM001.CLJNCRFL initialAttributes;
  set KL0ZM001.XXXUSRID initialAttributes;
  set KL0ZM001.CLLIDT initialAttributes;
  set KL0ZM001.CL0ZMRST initialAttributes;
  set KL0ZM001.CL0ZMINF initialAttributes;

  KL0ZS03(); /* check security*/

  if (CL0ZW01.CL0ZWCLF != "Y")
    CL0ZW01.CL0ZWUDF = "N";
  end

  CL0ZW01.CL0ZWUPP = "N"; /* partial update flag*/

  if (CL0ZW01.CL0ZWUDF == "Y")
    if (CLLREC.XWHCD == COMMAREA.XWHCD)
      /* next sentence*/
    else
      if (CLLREC.XWHCD == "04"
       || CLLREC.XWHCD == "32"
       || CLLREC.XWHCD == "51")
        if (COMMAREA.XWHCD == "04"
         || COMMAREA.XWHCD == "32"
         || COMMAREA.XWHCD == "51")
          /* next sentence*/
        else
          CL0ZW01.CL0ZWUDF = "N";
          if (CL0ZW01.CL0ZWCMD == "Y")
            converseLib.validationFailed(556);
            CL0ZW01.CL0ZWCMD = "N";
          end
        end
      else
        CL0ZW01.CL0ZWUDF = "N";
        if (CL0ZW01.CL0ZWCMD == "Y")
          converseLib.validationFailed(556);
          CL0ZW01.CL0ZWCMD = "N";
        end
      end
    end
  end

  CL0ZW01.CL0ZWCMD = "N";

  if (CL0ZW01.CL0ZWUDF == "Y") /* security flag set to update*/
    if (KL0ZM001.YCICD == "IIP") /* allow full update*/
      /* next sentence*/
    else
      if (KL0ZM001.YCICD == "RMO")
        CL0ZW01.CL0ZWUPP = "Y"; /* partial update flag*/
        set KL0ZM001.CLJNCRFL skip;
                                   /* allow updt of rel stock flag only*/
        set KL0ZM001.XXXUSRID skip;
        set KL0ZM001.CLLIDT skip;
        set KL0ZM001.CL0ZMINF skip;
      else
        if (KL0ZM001.YCICD == "RSO")
          CL0ZW01.CL0ZWUPP = "Y"; /* partial update flag*/
          set KL0ZM001.CLJNCRFL skip; /* allow updt of insp complete*/
          set KL0ZM001.XXXUSRID skip; /* and return address*/
          set KL0ZM001.CLLIDT skip;
          set KL0ZM001.CL0ZMRST skip;
        else
          if (KL0ZM001.YCICD == "RMS"
           || KL0ZM001.YCICD == "CMP")
            CL0ZW01.CL0ZWUDF = "N";
            set KL0ZM001.CLJNCRFL skip; /* allow no updating*/
            set KL0ZM001.XXXUSRID skip;
            set KL0ZM001.CLLIDT skip;
            set KL0ZM001.CL0ZMRST skip;
            set KL0ZM001.CL0ZMINF skip;
          else
            CL0ZW01.CL0ZWUDF = "N";
            set KL0ZM001.CLJNCRFL skip; /* allow no updating*/
            set KL0ZM001.XXXUSRID skip;
            set KL0ZM001.CLLIDT skip;
            set KL0ZM001.CL0ZMRST skip;
            set KL0ZM001.CL0ZMINF skip;
          end
        end
      end
    end
  else
    set KL0ZM001.CLJNCRFL skip; /* allow no updating*/
    set KL0ZM001.XXXUSRID skip;
    set KL0ZM001.CLLIDT skip;
    set KL0ZM001.CL0ZMRST skip;
    set KL0ZM001.CL0ZMINF skip;
  end

  if (CL2REC.YCICD != "CMP")
    if (CL0ZW01.CL0ZWUDF == "N"
     || CL0ZW01.CL0ZWUPP == "Y")
      if (CL2REC.CL2ISXDT == CLXREC.XXXCDTE)
        set KL0ZM001.CL0ZMINF initialAttributes;
      end
    end
  end

end // end KL0ZS23

// select claim clarec
Function KL0ZS24()

  CLXREC.CLXCPROC = "CL0ZS24"; /* set current proc name*/
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS24"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS24

// CALL XC0040, PREVENT RUNON TSK
Function KL0ZS25()
   /* ************************************************************/
   /* *     CALL XC0040, PREVENT RUN-ON TASK ABEND BY CICS      **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS25"; /* set current process name*/

  call "XC0040";

   /* THE ABOVE CALL WILL MAKE CICS PAUSE AND RESET THE*/
   /* RUN-ON-TASK TIMER*/

   /* THE FOLLOWING SELECT HAS BEEN REPLACED BY THE ABOVE CODE*/


    /* SELECT THE DCLAIM.VCLCTL01 LINE*/

   /* CALL IO1380 'S ',SQLCA,CLUREC (NOMAPS,NONCSP;*/

   /* IF SQLCA.SQLCODE = 0;*/
   /* NEXT SENTENCE*/
   /* ELSE ;*/
    /* IF SQLCA.SQLCODE = -911       ; if deadlock*/
      /* MOVE 4 TO EZEMNO            ; deadlock record message*/
      /* MOVE 'Y' TO CLXREC.CLXERRF  ; yes, there is an error*/
     /* EZERTN;*/
   /* ELSE ;*/
   /* MOVE 'READING NEXT-CLM-NBR REC FOR UPD' TO TA1REC.TA1TBLKE;*/
     /* PERFORM XPCL010             ; abend*/
   /* END ;*/
   /* END ;*/


end // end KL0ZS25

// select unique insp number
Function KL0ZS26()

  CLXREC.CLXCPROC = "CL0ZS26";

  CL2REC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp nbr*/
  CL2REC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq nbr*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS08(); /* select unique*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWHDX = 1; /* hold index*/
    CL0ZW01.CL0ZWIDX = 1; /* index*/
    CL0ZW01.CL2ISNBR[1] = CL2REC.CL2ISNBR;
  else
    if (CLAREC.CLACISNB == 01
     && KL0ZM001.CL2ISNBR == "01")
      CL0ZW01.CL0ZW2SW = "N";
      KL0ZM001.CL2ISNBR = " ";
    else
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
  end

end // end KL0ZS26

// edit insp date
Function KL0ZS27()

  CLXREC.CLXCPROC = "CL0ZS27";

  set KL0ZM001.CLLIDT initialAttributes;

        /* edit inspection date*/


   /* cannot be greater than current date*/

   /* ---------------------- y2k out begin -----------------*/
   /* IF KL0ZM001.CLLIDT GT KL0ZM001.XXXCURDT;*/
   /* ---------------------- y2k out end   -----------------*/
   /* ---------------------- y2k in begin  -----------------*/
  CL0ZW01.CL0ZWDAT = KL0ZM001.CLLIDT;
  if (CL0ZW01.CL0ZWYR > 60) /* Century windowing*/
    CL0ZW01.CL0ZWCEN = 19;
  else
    CL0ZW01.CL0ZWCEN = 20;
  end

  XX0XS01(); /* Get current date for compare;*/

  if (CL0ZW01.CL0ZWDTE > XX0XW01.XX0XWDAT)
   /* ---------------------- y2k in end    -----------------*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    set KL0ZM001.CLLIDT cursor, modified, bold;
    converseLib.validationFailed(17); /* invalid date*/
  end

   /* check for date not more than 25 days previous*/

  set TA2REC empty;
  TA2REC.TA2GRGEN = KL0ZM001.XXXCURDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2DYAOD = -25;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
     /* abend - error in routine*/
  end

   /* ---------------------- y2k out begin --------------------*/
   /* IF KL0ZM001.CLLIDT GE TA2REC.TA2GRGEN;   /* dt within 25 days*/
   /* ---------------------- y2k out end   --------------------*/

   /* ---------------------- y2k in begin  --------------------*/
  if (CL0ZW01.CL0ZWDTE >= TA2REC.TA2GRGGN)
   /* ---------------------- y2k in end    --------------------*/
    KL0ZM010.CLLIDT = KL0ZM001.CLLIDT;
    CL0ZW01.CL0ZWU2R = "Y";
  else
    CLXREC.CLXERRF = "Y"; /* error flag*/
    set KL0ZM001.CLLIDT cursor, modified, bold;
    converseLib.validationFailed(17); /* invalid date*/
  end

end // end KL0ZS27

// move fields to cljrec
Function KL0ZS28()

  CLXREC.CLXCPROC = "CL0ZS28";

  KL0ZS02(); /* get date and time*/

  CLJREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLJREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CLJREC.CLJNCRFL = KL0ZM001.CLJNCRFL; /* noncred rtn fl*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS29(); /* update cljrec*/
  end

end // end KL0ZS28

// update cljrec
Function KL0ZS29()

  CLXREC.CLXCPROC = "CL0ZS29";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18); /* record has been updated*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CLXREC.CLXBLDAY = "Y"; /* re-build array*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS29"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRAHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS29

// SELECT-ALL FOR SALES SAMPLES
Function KL0ZS2A()

  CLXREC.CLXCPROC = "CL0ZS2A"; /* set current proc name*/

  CL0ZW01.CL0ZWCYX = 1; /* LOCATE THE LINE ON MAP CL0ZM001*/
  CL0ZW01.CL0ZWSAL = "N"; /* WHERE SELECT FLAG IS 'A'.*/
  if (CL0ZW01.CL0ZWSTL != " ") /* IF STYLE REQUESTED, START SEARCH*/
    CL0ZW01.CL0ZWSAL = "Y"; /* AT THE TOP OF THE TABLE.*/
    CL0ZW01.CL0ZWIXX = 1;
    CL0ZW01.CL0ZWCYX = 1;
  else
    while (CL0ZW01.CL0ZWCYX <= 9)
                                   /* IF SELECT-ALL START SEARCH WITH THE*/
      if (KL0ZM001.CL0ZMSEL[CL0ZWCYX] == "A") /* STYLE WHERE THE 'A' WAS*/
        CL0ZW01.CL0ZWSAL = "Y"; /* ENTERED ON THE MAP*/
        CL0ZW01.CL0ZWIXX = CL0ZW01.CL0ZWCYX;
        CL0ZW01.CL0ZWCYX = 10;
      end
      CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
    end
  end

  if (CL0ZW01.CL0ZWSAL == "N") /* IF NOT SELECT-ALL RETURN TO*/
    return; /* CL0Z120*/
  end

  CL0ZW01.CL0ZWCYX = 1;
  while (CL0ZW01.CL0ZWCYX <= 1450)
    if (KL0ZM001.SY1STNBR[CL0ZWIXX] <= CL0ZW02.SY1STNBR[CL0ZWCYX])
      CL0ZW01.CL0ZWIXX = CL0ZW01.CL0ZWCYX;
      CL0ZW01.CL0ZWCYX = 1452;
    else
      CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
    end
  end

  if (CL0ZW01.CL0ZWCYX == 1451) /* IF STYLE NOT IN CL0ZW02 TABLE,*/
    return;
                                   /* RETURN TO CL0Z120*/
  end

  CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWIXX; /* IF STARTING POINT WAS FOUND*/
  while (CL0ZW01.CL0ZWCYX <= 1450)
                                   /* SET SELECT FLAGS TO 'Y' WHEN*/
    if (CL0ZW02.SY1STNBR[CL0ZWCYX] == "      ") /* THE 'SKIP' FLAG IS NOT='Y',*/
      CL0ZW01.CL0ZWCYX = 1451; /* UNTIL END OF TABLE FOUND*/
    else
      if (CL0ZW01.CL0ZWSKP[CL0ZWCYX] != "Y")
        if (CL0ZW01.CL0ZWSTL == " ")
          CL0ZW02.CL0ZWSEL[CL0ZWCYX] = "S";
        else
          if (CL0ZW01.CL0ZWSTL <= CL0ZW02.SY1STNBR[CL0ZWCYX])
            CL0ZW02.CL0ZWSEL[CL0ZWCYX] = "S";
            CL0ZW01.CL0ZWSTL = "999999";
          else
            if (CL0ZW01.CL0ZWSTL == "999999")
              CL0ZW02.CL0ZWSEL[CL0ZWCYX] = "S";
            end
          end
        end
      end
      CL0ZW01.CL0ZWCYX = CL0ZW01.CL0ZWCYX + 1;
    end
  end

  if (CL0ZW01.CL0ZWSTL != " ")
    CL0ZW01.CL0ZWSTL = " ";
  end


end // end KL0ZS2A

// SET CL0ZW06 EMPTY
Function KL0ZS2B()

  CLXREC.CLXCPROC = "CL0ZS2B"; /* set current proc name*/

  set CL0ZW06 empty;

end // end KL0ZS2B

// select clmrec
Function KL0ZS30()

  CLXREC.CLXCPROC = "CL0ZS30";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1320" ("S ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS30"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSHD01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS30

// set-up delete for clnrec
Function KL0ZS31()

  CLXREC.CLXCPROC = "CL0ZS31";

  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR;
  CLNREC.CL2ISNBR = CL0ZW01.CL0ZWNBR;
  CLNREC.CLHSEQNB = KL0ZM001.CLHSEQNB;
  CLNREC.XGPCD = KL0ZM001.XGPCD;
  CLNREC.SY1STNBR = KL0ZM001.SY1STNBR[CLXLINEX]; /* style*/
  CLNREC.SY2CLRID = KL0ZM001.SY2CLRID[CLXLINEX]; /* color*/
  CLNREC.XDMCD = KL0ZM001.XDMCD[CLXLINEX]; /* dimension*/
  CLNREC.XQACD = KL0ZM001.XQACD[CLXLINEX]; /* quality*/
  CLNREC.IV0IVCID = -1;
  CL0ZW04.CL0ZW4SQ = "SS";
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* set-up cursor*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    CLXREC.CLXLINEX = 10;
    return;
  end

  CL0ZW01.CL0ZWEND = "N";
  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS15(); /* select next*/
    if (CL0ZW01.CL0ZWEND == "N")
      KL0ZS32(); /* delete clnrec*/
    end
  end

  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS31"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

end // end KL0ZS31

// delete clqrec (vclstk01)
Function KL0ZS32()
       /* KL0ZS32    DELETE CLQREC   (VCLSTK01)*/

   /* **********************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G             **/
   /* *-------------------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                                   **/
   /* *-------------------------------------------------------------------**/
   /* * 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES                       **/
   /* **********************************************************************/


  CLXREC.CLXCPROC = "CL0ZS32";
  CL0ZW01.CLNRTSQ = CLNREC.CLNRTSQ;
  CL0ZW01.CLNNCRQ = CLNREC.CLNNCRQ;
  CL0ZW01.CLNGRPRC = CLNREC.CLNGRPRC;
  CLQREC.CLACLMNB = CLNREC.CLACLMNB; /* claim number*/
  CLQREC.CL2ISNBR = CLNREC.CL2ISNBR; /* inspection nbr*/
  CLQREC.XGPCD = CLNREC.XGPCD; /* gpc*/
  CLQREC.SY1STNBR = CLNREC.SY1STNBR; /* style*/
  CLQREC.SY2CLRID = CLNREC.SY2CLRID; /* color*/
  CLQREC.XDMCD = CLNREC.XDMCD; /* dimension*/
  CLQREC.SY5SZID = CLNREC.SY5SZID; /* size*/
  CLQREC.XUMCD = CLNREC.XUMCD; /* unit of measure*/
  CLQREC.XQACD = CLNREC.XQACD; /* quality*/
  CLQREC.XEGCD = CLNREC.XEGCD; /* quality*/
  CLQREC.SY1UNPCS = 0; /* quality*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS34(); /* set up cursor*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    CL0ZW01.CL0ZWEND = "Y";
    return;
  end

  CL0ZW01.CL0ZWFND = "N";
  while (CL0ZW01.CL0ZWFND == "N")
    call "IO1360" ("SN", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0ZW01.CL0ZWDCT = 0;
      CL0ZW01.CL0ZWDFL = "Y";
      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS35(); /* delete clqrec*/
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
        CL0ZW01.CL0ZWEND = "Y";
        CL0ZW01.CL0ZWFND = "Y";
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0ZW01.CL0ZWFND = "Y";
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS32"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1360" ("CS", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

  call "IO1330" ("D ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* rts*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWDCT = 0;
      CL0ZW01.CL0ZWDFL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
        if (CL0ZW01.CL0ZWDCT > 2)
          converseLib.validationFailed(4); /* database busy*/
          CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
          CLXREC.CLXBLDSC = "N"; /* build screen flag*/
          CLXREC.CLXERRF = "N"; /* error flag*/
          CL0ZW01.CL0ZWEND = "Y";
        end
        return;
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS32"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWNCT = CL0ZW01.CL0ZWNCT - 1;
  if (CL0ZW01.CL0ZWNCT == 0)
    CL0ZW01.CL0ZWU2R = "Y";
  end
  CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
  CLXREC.CLXBLDAY = "Y"; /* re-build array*/
  CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec*/
  CL0ZW01.CL0ZWUAR = "Y"; /* update clarec*/

end // end KL0ZS32

// set up cursor for clqrec
Function KL0ZS34()

  CLXREC.CLXCPROC = "CL0ZS34";

  SQLCA.VAGen_SQLCODE = 0;
  CL0ZW01.CL0ZWQSW = "N";

  call "IO1360" ("SS", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "N";
  else

    if (SQLCA.VAGen_SQLCODE == -911)
      CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
      if (CL0ZW01.CL0ZWDCT > 2)
        converseLib.validationFailed(4); /* database busy*/
        CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
        CLXREC.CLXBLDSC = "N"; /* build screen flag*/
        CLXREC.CLXERRF = "N"; /* error flag*/
      end
      return;
    else

      TA1REC.TA1LOCAT[2] = "CL0ZS34"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0ZS34

// delete clqrec
Function KL0ZS35()
   /* ****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* *-------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                               **/
   /* *-------------------------------------------------------------**/
   /* * 10-21-93  GDECKE  REMOVE OVERLAPPING MOVE STMT.             **/
   /* ****************************************************************/

  CLXREC.CLXCPROC = "CL0ZS35";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1360" ("D ", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS35"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS35

// get next inspection number
Function KL0ZS36()

  CLXREC.CLXCPROC = "CL0ZS36";

  CL0ZW01.CL0ZWNBR = 0;
  CL0ZW01.CL0ZWDFL = "Y";
  CL0ZW01.CL0ZWDCT = 0;

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS24(); /* select clarec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLAREC.CLACISNB == 1)
      CL2REC.CLACLMNB = CLAREC.CLACLMNB;
      CL2REC.CL2ISNBR = 1;
      CL0ZW01.CL0ZWDFL = "Y";
      CL0ZW01.CL0ZWDCT = 0;

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS08(); /* select cl2rec*/
      end

      if (SQLCA.VAGen_SQLCODE == 0)
        CL0ZW01.CLACISNB = CLAREC.CLACISNB + 1;
        CL0ZW01.CL0ZW2SW = "N"; /* need new cl2rec*/
      else
        CL0ZW01.CLACISNB = 1;
      end
    else
      CL0ZW01.CLACISNB = CLAREC.CLACISNB + 1;
    end
    CL0ZW01.CL0ZWNBR = CL0ZW01.CLACISNB; /* insp nbr*/
    KL0ZM001.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM005.CL2ISNBR = CL0ZW01.CL0ZWNBR;
    KL0ZM010.CL2ISNBR = CL0ZW01.CL0ZWNBR;
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS36";
    TA1REC.TA1LOCAT[4] = "IO1160";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010();
  end

end // end KL0ZS36

// move fields to cl2rec
Function KL0ZS37()
   /* *************************************************************/

    /* Maintenance History:*/
    /* 02-21-91 CHELLM Renamed CLLIBYID  to XXXUSRID.*/


   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS37";

  KL0ZS02(); /* get date and time*/

  CL2REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CL2REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CL2REC.YCICD = KL0ZM001.YCICD; /* insp code*/
  CL2REC.XXXUSRID = KL0ZM001.XXXUSRID; /* inspected by*/
  CL0ZW01.CL0ZWDAT = KL0ZM001.CLLIDT;
   /* ---------------------- y2k out begin ---------------------*/
   /* MOVE 019 TO CL0ZW01.CL0ZWCEN;*/
   /* ---------------------- y2k out end   ---------------------*/

  CL0ZW01.CL0ZWDAT = KL0ZM001.CLLIDT;
   /* ---------------------- y2k in begin  ---------------------*/
  if (CL0ZW01.CL0ZWYR > 60) /* Century windowing*/
    CL0ZW01.CL0ZWCEN = 19;
  else
    CL0ZW01.CL0ZWCEN = 20;
  end
   /* ---------------------- y2k in end    ---------------------*/

  CL2REC.CL2ISBDT = CL0ZW01.CL0ZWDTE; /* inspected by date*/

  if (KL0ZM001.CL0ZMINF == "Y" /* inspection complete*/
   || KL0ZM010.CL0ZMINF == "Y" 
   || CL2REC.YCICD == "RMS")  
    CL2REC.CL2ISXDT = TA2REC.TA2GRGGN; /* inspection complete date*/
  else
    CL2REC.CL2ISXDT = 0;
  end

  if (CL2REC.CLJRDIND == " ")
    CL2REC.CLJRDIND = "R";
  end

  if (CL0ZW01.CL0ZWNCT > 0)
    if (CL2REC.CLJRDIND == "D"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "B";
    end
  else
    if (CL2REC.CLJRDIND == "B"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "D";
    end
  end

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS38(); /* update cl2rec*/
  end

end // end KL0ZS37

// update cl2rec
Function KL0ZS38()
   /* *****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G        **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTON                                 **/
   /* *--------------------------------------------------------------**/
   /* * 10-21-93  GDECKE  REMOVE OVERLAPPING MOVE STMT.              **/
   /* *****************************************************************/

  CLXREC.CLXCPROC = "CL0ZS38";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18); /* record has been updated*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CLXREC.CLXBLDAY = "Y"; /* re-build array*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS38"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS38

// reset clqrec uom to 01:sls-sam
Function KL0ZS3A()

  CLXREC.CLXCPROC = "CL0ZS3A";
  CLQREC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* inspection nbr*/
  CLQREC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* inspection nbr*/
  CLQREC.XGPCD = "**"; /* gpc*/
  CLQREC.SY1STNBR = "******"; /* style*/
  CLQREC.SY2CLRID = "***"; /* color*/
  CLQREC.XDMCD = "**"; /* dimension*/
  CLQREC.SY5SZID = -1; /* size*/
  CLQREC.XUMCD = "**"; /* unit of measure*/
  CLQREC.XQACD = "**"; /* quality*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS34(); /* set up cursor*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    CL0ZW01.CL0ZWEND = "Y";
    return;
  end

  CL0ZW01.CL0ZWFND = "N";
  while (CL0ZW01.CL0ZWFND == "N")
    call "IO1360" ("SN", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      CL0ZW01.CL0ZWDCT = 0;
      CL0ZW01.CL0ZWDFL = "Y";
      KL0ZS3B(); /* delete/update sales sample clqrec*/

      if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
        CL0ZW01.CL0ZWEND = "Y";
        CL0ZW01.CL0ZWFND = "Y";
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0ZW01.CL0ZWFND = "Y";
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS3A"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1360" ("CS", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};


end // end KL0ZS3A

// delete/update clqrec:sls sampl
Function KL0ZS3B()

  CLXREC.CLXCPROC = "CL0ZS3C";

  if (CLQREC.XUMCD != "L" /* if stock records are not pairing lefts and*/
   && CLQREC.XUMCD != "R") /* rights then bypass this process*/
    return; /* (this test is on primary clm stock lines)*/
  end

  SQLCA.VAGen_SQLCODE = 0;

  CLQREC.CLACLMNB = KL0ZM001.CL0ZMCLM; /* use secondary claim number*/
  CLQREC.XUMCD = CL0ZW01.CL0ZWSSU; /* use secondary claim uom*/
  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";
  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS3C();
                                   /* select unique sales sample*/
  end
  if (CL0ZW01.CL0ZWDCT > 0)
    CL0ZW01.CL0ZWEND = "Y";
    CL0ZW01.CL0ZWFND = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* if no secondary claim stock locate*/
    return; /* line found then we're done with the product*/
  end

  if (CLQREC.XUMCD != "L" /* if stock records are not pairing lefts and*/
   && CLQREC.XUMCD != "R") /* rights then bypass this process*/
    return; /* (this test is on secondary clm stock lines)*/
  end

   /* delete the line from the secondary claim vclstk01 table*/

  CLQREC.CLACLMNB = KL0ZM001.CL0ZMCLM; /* use secondary claim number*/
  CLQREC.XUMCD = CL0ZW01.CL0ZWSSU; /* use secondary claim uom*/
  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";
  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS35(); /* delete clqrec*/
  end
  if (CL0ZW01.CL0ZWDCT > 0)
    CL0ZW01.CL0ZWEND = "Y";
    CL0ZW01.CL0ZWFND = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* if delete not successfun*/
    converseLib.validationFailed(18);
    CLXREC.CLXERRF = "Y";
    CLXREC.CLXBLDAY = "Y";
    return;
  end

   /* delete the line from the primary claim vclstk01 table*/

  CLQREC.CLACLMNB = KL0ZM001.CLACLMNB; /* use secondary claim number*/
  if (CL0ZW01.CL0ZWSSU == "R")
    CLQREC.XUMCD = "L"; /* use primary claim uom*/
  else
    CLQREC.XUMCD = "R";
  end
  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";
  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS35(); /* delete clqrec*/
  end
  if (CL0ZW01.CL0ZWDCT > 0)
    CL0ZW01.CL0ZWEND = "Y";
    CL0ZW01.CL0ZWFND = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* if delete not successful*/
    converseLib.validationFailed(18);
    CLXREC.CLXERRF = "Y";
    CLXREC.CLXBLDAY = "Y";
    return;
  end

   /* add a new line to primary claim vclstk01 table with uom = 1*/

  CLQREC.CLACLMNB = KL0ZM001.CLACLMNB; /* use secondary claim number*/
  CLQREC.XUMCD = "01"; /* use secondary claim*/
  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";
  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS74(); /* add new clqrec on primary clm with uom = 01*/
  end
  if (CL0ZW01.CL0ZWDCT > 0)
    CL0ZW01.CL0ZWEND = "Y";
    CL0ZW01.CL0ZWFND = "Y";
    return;
  end


end // end KL0ZS3B

// select unique clqrec:sls sampl
Function KL0ZS3C()

  CLXREC.CLXCPROC = "CL0ZS3C";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1360" ("S ", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS3C"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS3C

// move fields to cl2rec
Function KL0ZS40()
   /* *************************************************************/

    /* Maintenance History:*/
    /* 02-21-91 CHELLM Remaned CLLIBYID  to XXXUSRID.*/


   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0ZS40";

  if (CL0ZW01.CL0ZWNSW != "Y") /* if no clnrec's exist*/
    return;
  end

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL2REC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim nbr*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR;

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS08(); /* select cl2rec*/
  end

  if (converseVar.validationMsgNum != 0) /* deadlock*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* record does not exist*/
    /* next sentence*/
  else
    KL0ZS37(); /* update cl2rec*/
    return;
  end


  set CL2REC empty;

  KL0ZS02(); /* get data and time*/

  CL2REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CL2REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CL2REC.CLACLMNB = KL0ZM001.CLACLMNB; /* claim number*/
  CL2REC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
  CL2REC.XWHCD = COMMAREA.XWHCD; /* wharehouse code*/
  CL2REC.YCICD = KL0ZM001.YCICD; /* insp code*/
  CL2REC.XXXUSRID = KL0ZM001.XXXUSRID; /* inspected by*/
  CL0ZW01.CL0ZWDAT = KL0ZM001.CLLIDT;
   /* ---------------------- y2k out begin ---------------------*/
   /* MOVE 019 TO CL0ZW01.CL0ZWCEN;*/
   /* ---------------------- y2k out end   ---------------------*/
   /* ---------------------- y2k in begin  ---------------------*/
  if (CL0ZW01.CL0ZWYR > 60) /* Century windowing*/
    CL0ZW01.CL0ZWCEN = 19;
  else
    CL0ZW01.CL0ZWCEN = 20;
  end
   /* ---------------------- y2k in end    ---------------------*/
  CL2REC.CL2ISBDT = CL0ZW01.CL0ZWDTE; /* inspected by date*/
  CL2REC.CL2TOSLF = "N"; /* GDECKE 02-18-91,CLM TO STOCK LOCATE*/
                                   /* FL*/

  if (KL0ZM001.CL0ZMINF == "Y" /* inspection complete*/
   || KL0ZM010.CL0ZMINF == "Y" 
   || CL2REC.YCICD == "RMS")  
    CL2REC.CL2ISXDT = TA2REC.TA2GRGGN; /* inspection complete date*/
  else
    CL2REC.CL2ISXDT = 0;
  end

  if (CL2REC.CLJRDIND == " ")
    CL2REC.CLJRDIND = "R";
  end

  if (CL0ZW01.CL0ZWNCT > 0)
    if (CL2REC.CLJRDIND == "D"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "B";
    end
  else
    if (CL2REC.CLJRDIND == "B"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "D";
    end
  end

  CL0ZW01.CL0ZWUAR = "I"; /* update clarec flag*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS41(); /* insert cl2rec*/
  end

end // end KL0ZS40

// insert cl2rec
Function KL0ZS41()

  CLXREC.CLXCPROC = "CL0ZS41";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO2870" ("A ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS41"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRINSP01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS41

// update clmrec
Function KL0ZS42()

  CLXREC.CLXCPROC = "CL0ZS42";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1320" ("U ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18); /* record has been updated*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLXREC.CLXBLDAY = "Y"; /* re-build array*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS42"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSHD01"; /* table view*/
  CLXREC.XXXWDTE = CLMREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS42

// move fields to clarec
Function KL0ZS43()

  CLXREC.CLXCPROC = "CL0ZS43";

  KL0ZS02(); /* get date and time*/

  CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  if (CL0ZW01.CL0ZWUAR == "I") /* update current insp nbr only*/
    /* next sentence                ; insp nbr moved to clarec when*/
  else /* cl2rec was inserted*/
    if (CLAREC.CLYATHID != 0) /* if we are authorized*/
      CLAREC.YCSACTCD = "J"; /* claim activity code, send to batch*/
       /* add below 062089*/
    else
      if (CLAREC.YCSCD1 == "RAA"
       || CLAREC.YCSCD1 == "RIP"
       || CLAREC.YCSCD1 == "RPA")
        if (CLAREC.YCSCD1 != "RPA")
          CLAREC.YCSCD2 = CLAREC.YCSCD1;
        end
        CLAREC.YCSCD1 = "RPA"; /* return pending authorization*/
        if (CLAREC.YCSCD1 in YCSTBL.YCSCD
         && YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        else
          CLAREC.YCSACTCD = "A"; /* hard-code activity*/
        end
        CLAREC.CLASCGBY = COMMAREA.CAUSERID; /* 062989*/
        CLAREC.CLASTTDT = TA2REC.TA2GRGGN; /* 062989*/
      end
       /* add above 062089*/
    end
  end

  if (CL0ZW01.CLACISNB > 0
   && CL0ZW01.CL0ZWNSW == "Y")
    CLAREC.CLACISNB = CL0ZW01.CLACISNB;
  end

  CL0ZW01.CLACISNB = 0;
  CL0ZW01.CLACSQNB = 0;

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS44(); /* update clarec*/
  end

  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim  the update*/
    KL0ZS4B();
                                   /* the secondary claim header also*/
  end


end // end KL0ZS43

// update clarec
Function KL0ZS44()

  CLXREC.CLXCPROC = "CL0ZS44";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18); /* record has been previously updated*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CLXREC.CLXBLDAY = "Y"; /* re-build array*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS44"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLHDR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS44

// build size array
Function KL0ZS45()
      /* BUILD SIZE ARRAY - KL0ZS45*/

   /* **************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     LO O G     **/
   /* *-----------------------------------------------------------**/
        /* DATE     PGMR    DESCRIPTION                          **/
   /* *-----------------------------------------------------------**/
      /* 04-12-90   SGORGA  CHANGE CL0ZW01.XSDCD TO PC2INSEG.    **/
      /* 03-13-92   GDECKE  MARCH DB2 CHANGES                    **/
      /* 04-13-92   TWATSO  APRIL DB2 CHANGES                    **/
      /* 04-05-94   BCOURT  Default owner group '00' for whse 25.**/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0ZS45";

   /* SET CLQREC EMPTY;*/
   /* SET CLNREC EMPTY;*/
   /* SET CLKREC EMPTY;*/
   /* SET CL0ZW05 EMPTY;*/
  KL0ZS97(); /* clear out working storage records*/
  CL0ZW01.CL0ZWRSW = "N";
  CLXREC.CLXITMX = 0;
  CL0ZW01.CLKAUTHQ = 0; /* authorized qty*/
  CL0ZW01.CL0ZWPRI = 0; /* claim price*/


   /* *******************************************************/
       /* move claim header info to cl0zm005*/

  if (CLWREC.CLWYZSWT == "Y") /* came from cl0y application*/
    KL0ZS05();
    if (CL2REC.CLJRDIND == "D"
     || CL2REC.CLJRDIND == "B")
      CL0ZW01.CL0ZWPCT = 1;
    end
  end


   /* *******************************************************/
     /* retrieve size from sy3rec*/

  SY3REC.XGPCD = CL0ZW01.XGPCD;
  SY3REC.SY1STNBR = CL0ZW01.SY1STNBR;
  SY3REC.SY2CLRID = CL0ZW01.SY2CLRID;
  SY3REC.XDMCD = CL0ZW01.XDMCD;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS46();
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end


   /* *******************************************************/
     /* retrieve style from sy1rec*/

  SY1REC.XGPCD = CL0ZW01.XGPCD;
  SY1REC.SY1STNBR = CL0ZW01.SY1STNBR;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS47();
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end


   /* *******************************************************/
     /* retrieve WAREHOUSE FROM SY2REC*/


  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS4C();
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

   /* *******************************************************/
     /* retrieve size from sy4rec*/

  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS48();
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

   /* *******************************************************/
     /* find sizes in stock assign tables*/


  if (KL0ZM005.XWHCD == "70" /* warehouses 70, 72 & 51 do not*/
   || KL0ZM005.XWHCD == "72" /* use stock locate tables*/
   || KL0ZM005.XWHCD == "51") /* warehouse 51 add on 3/29/99*/
    if (CL0ZW01.XQACD == " ")
      CL0ZW01.XQACD = "01";
    end
    if (CL0ZW01.XOWCD == "  ") /* default to promo owner*/
      CL0ZW01.XOWCD = "00"; /* group zero*/
      KL0ZM005.XOWCD = "00";
    end
  else
    if (CL0ZW01.CL0ZWUDF != "Y"
     || CL0ZW01.CL0ZWUPP == "Y")
      /* next sentence*/
    else
      if (CL0ZW01.XWHCD in XWHTBL.XWHCD)
        if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* owner groups used in whse*/
          if (CL0ZW01.XWHCD == "03"
           && CL0ZW01.XOWCD == "  ") /* default to promo owner group zero*/
            CL0ZW01.XOWCD = "00";
            KL0ZM005.XOWCD = "00";
          end
          if (CL0ZW01.XWHCD == "25"
           && CL0ZW01.XOWCD == "  ") /* add whse default 4-5-94*/
            CL0ZW01.XOWCD = "00"; /* group zero*/
            KL0ZM005.XOWCD = "00";
          end
          if (CL0ZW01.XWHCD == "51"
           && CL0ZW01.XOWCD == "  ") /* default to promo owner*/
            CL0ZW01.XOWCD = "00"; /* group zero*/
            KL0ZM005.XOWCD = "00";
          end
          if (CL0ZW01.XWHCD == "03"
           && CL0ZW01.XOWCD == "00")
            /* next sentence*/
          else
            if (CL0ZW01.XWHCD == "25"
             && CL0ZW01.XOWCD == "00") /* added 4-5-94*/
              /* next sentence*/
            else
              if (CL0ZW01.XWHCD == "51"
               && CL0ZW01.XOWCD == "00")
                /* next sentence*/
              else
                if (CL0ZW01.XOWCD == "  "
                 || CL0ZW01.XOWCD == "00")
                  converseLib.validationFailed(551);
                  set KL0ZM005.XOWCD cursor, bold;
                  CL0ZW01.CL0ZWOFL = "Y";
                  set CL0ZW05 empty;
                  set CL0ZW06 empty;
                  CL0ZW01.XOWCD = " ";
                  KL0ZM005.XOWCD = " ";
                  KL0ZM005.XOWABRV = " ";
                  return;
                end
              end
            end
          end
        end
      end
    end

    if (CL0ZW01.XWHCD == "03"
     && CL0ZW01.XOWCD == "00")
      CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
    else
      if (CL0ZW01.XWHCD == "25"
       && CL0ZW01.XOWCD == "00") /* added 4-5-94*/
        CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
      else
        if (CL0ZW01.XWHCD == "51"
         && CL0ZW01.XOWCD == "00")
          CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
        else
          if (CL0ZW01.XOWCD == " "
           || CL0ZW01.XOWCD == "00")
            CL0ZW01.CL0ZWWHS = "00";
            CL0ZW01.XOWCD = "00";
          else
            CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
          end
        end
      end
    end

    if (CL0ZW01.XQACD == " ")
      CL0ZW01.XQACD = "01";
    end

    /* ADD DEFAULT VALUE LATER*/
    if (CL0ZW01.XEGCD == " ")
      CL0ZW01.XEGCD = "000";
    end

    /* ADD DEFAULT VALUE LATER*/
    if (CL0ZW01.XBK-BK-SESN-CD == "  ")
      CL0ZW01.XBK-BK-SESN-CD = "  ";
    end

    /* ADD DEFAULT VALUE LATER*/
    if (CL0ZW01.OP-BK-YR == 0)
      CL0ZW01.OP-BK-YR = 0;
    end

    /* ADD DEFAULT VALUE LATER*/
    if (CL0ZW01.OP-BK-MO == 0)
      CL0ZW01.OP-BK-MO = 0;
    end

    if (CL0ZW01.PC2INSEG == " ")
      CL0ZW01.PC2INSEG = "000";
    end

    if (CL0ZW01.XPGCD == " ")
      CL0ZW01.XPGCD = "00";
    end

    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      if (CL0ZW01.CL0ZWNXT == "Y")
        KL0ZS50(); /* set-up cursor sl7rec*/
      else
        KL0ZS51(); /* set-up cursor sl7rec*/
      end
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWIYX = 0;
    CL0ZW01.CL0ZWILX = 0;
    CL0ZW01.CL0ZWFSZ = 0;
    CL0ZW01.CL0ZWLSZ = 0;
    CL0ZW01.CL0ZWEND = "N";

    while (CL0ZW01.CL0ZWEND == "N")
      if (CL0ZW01.CL0ZWNXT != "Y")
        KL0ZS52(); /* load array with sizes from sl7rec*/
      else
        KL0ZS53(); /* load array for next location*/
      end
    end

    if (CL0ZW01.CL0ZWNXT != "Y")
      call "IO1550" ("C8", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
                                   /* close stock locate cursor*/
    else
      call "IO1550" ("C1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
                                   /* close stock locate cursor*/
    end

    if (CL0ZW01.CL0ZW7SW == "Y")
      KL0ZM005.SL8ZNCD2 = CL0ZW01.SL8ZNCD2;
      KL0ZM005.SL8LCCD2 = CL0ZW01.SL8LCCD2;
      KL0ZM005.XARCD2 = CL0ZW01.XARCD2;
    else
      KL0ZM005.SL8ZNCD2 = " ";
      KL0ZM005.SL8LCCD2 = " ";
      KL0ZM005.XARCD2 = " ";
      CL0ZW01.SL8ZNCD2 = " ";
      CL0ZW01.SL8LCCD2 = " ";
      CL0ZW01.XARCD2 = " ";
    end


    /* *******************************************************/
       /* retrieve data from clqrec*/

    CLQREC.CLACLMNB = KL0ZM005.CLACLMNB;
    if (CL0ZW01.CL0ZWISP == "**")
      CLQREC.CL2ISNBR = -1;
      KL0ZM005.CL2ISNBR = 0;
    else
      CLQREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
    end
    CLQREC.XGPCD = CL0ZW01.XGPCD;
    CLQREC.SY1STNBR = CL0ZW01.SY1STNBR;
    CLQREC.SY2CLRID = CL0ZW01.SY2CLRID;
    CLQREC.XDMCD = CL0ZW01.XDMCD;
    CLQREC.XUMCD = CL0ZW01.XUMCD;
    CLQREC.XQACD = CL0ZW01.XQACD;
    CLQREC.XEGCD = CL0ZW01.XEGCD;
    /* the following line will be replaced when*/
       /* units per case is implemented*/
    CLQREC.SY1UNPCS = 0;
    CLQREC.SY5SZID = -1;
    CL0ZW01.CL0ZWQCT = 0;
    CLXREC.CLXITMX = 0;
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS34(); /* set up cursor for clqrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWEND = "N";

    while (CL0ZW01.CL0ZWEND == "N")
      if (CL0ZW01.CL0ZWNXT != "Y")
        KL0ZS54(); /* select next clqrec*/
      else
        KL0ZS56(); /* select next clqrec from next locat*/
      end
    end
    call "IO1360" ("CS", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes}; /* close clqrec cursor*/

    /* *******************************************************/
     /* retrieve data from clqrec for secondary sales sample*/
     /* claim number if this is a sales sample claim*/

    if (CL0ZW01.CL0ZWSAM == "Y")
      CLQREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim number*/
      if (CL0ZW01.CL0ZWISP == "**")
        CLQREC.CL2ISNBR = -1;
        KL0ZM005.CL2ISNBR = 0;
      else
        CLQREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
      end
      CLQREC.XGPCD = CL0ZW01.XGPCD;
      CLQREC.SY1STNBR = CL0ZW01.SY1STNBR;
      CLQREC.SY2CLRID = CL0ZW01.SY2CLRID;
      CLQREC.XDMCD = CL0ZW01.XDMCD;
      if (CL0ZW01.CL0ZWSSU == "  ") /* if no secondary sales sample claim*/
        converseLib.validationFailed(674); /* unit of measure - show error message*/
        CLXREC.CLXERRF = "Y";
        set KL0ZM005.XUMCD cursor, modified, bold;
        return;
      end
      CLQREC.XUMCD = CL0ZW01.CL0ZWSSU;
      CLQREC.XQACD = CL0ZW01.XQACD;
      CLQREC.XEGCD = CL0ZW01.XEGCD;
      CLQREC.SY1UNPCS = 0;
      CLQREC.SY5SZID = -1;
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS34(); /* set up cursor for clqrec*/
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
        return;
      end

      CL0ZW01.CL0ZWEND = "N";

      while (CL0ZW01.CL0ZWEND == "N")
        if (CL0ZW01.CL0ZWNXT != "Y")
          KL0ZS54(); /* select next clqrec*/
        else
          KL0ZS56(); /* select next clqrec from next locat*/
        end
      end


      call "IO1360" ("CS", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes}; /* close clqrec cursor*/
    end
    /* ==================== end clqrec for sales sample ===========*/

    /* scan size table and set the cl0zpmry flag to*/
    /* 'p' on the first occurance of each size line*/
    /* loaded from clqrec (vclstk01).*/

    CL0ZW01.CL0ZWIDX = 1; /* init index used in while*/
    CL0ZW01.CL0ZWEND = "N"; /* init while end flag*/
    CL0ZW01.CL0ZWSSZ = 0; /* init save previous size flag*/

    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS98();
    end
  end /* end warehouse 70 & 72*/

   /* *******************************************************/
      /* retrieve data from clnrec*/

  CL0ZW01.CL0ZWRCT = 0; /* rts clnrec count*/
  CL0ZW01.CL0ZWTTL = 0; /* total rts qty*/
  CLNREC.CLACLMNB = KL0ZM005.CLACLMNB; /* claim nbr*/
  if (CL0ZW01.CL0ZWISP == "**")
    CLNREC.CL2ISNBR = -1;
    KL0ZM005.CL2ISNBR = 0;
  else
    CLNREC.CL2ISNBR = KL0ZM005.CL2ISNBR; /* insp nbr*/
  end
  CLNREC.CLHSEQNB = KL0ZM005.CLHSEQNB; /* seq nbf*/
  CLNREC.XGPCD = CL0ZW01.XGPCD; /* gpc code*/
  CLNREC.SY1STNBR = CL0ZW01.SY1STNBR; /* style*/
  CLNREC.SY2CLRID = CL0ZW01.SY2CLRID; /* color*/
  CLNREC.XDMCD = CL0ZW01.XDMCD; /* dim code*/
  CLNREC.XQACD = CL0ZW01.XQACD; /* quality code*/
  CLNREC.XEGCD = CL0ZW01.XEGCD; /* ENGINEERINF DIFF CODE*/
  CLNREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD; /* BOOK SEASON*/
  CLNREC.OP-BK-YR = CL0ZW01.OP-BK-YR; /* BOOK-YEAR*/
  CLNREC.OP-BK-MO = CL0ZW01.OP-BK-MO; /* BOOK-YEAR*/
  CLNREC.XUMCD = CL0ZW01.XUMCD; /* unit of measure*/
  CLNREC.IV0IVCID = -1;
  CL0ZW04.CL0ZW4SQ = "SS";

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* select set clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CL0ZW01.CL0ZWEND = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS57(); /* load rts*/
  end

  CL0ZW04.CL0ZW4SQ = "CS";
  call "IO1330" (CL0ZW04, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};


   /* *******************************************************/
     /* retrieve data from clnrec for secondary sales sample*/
     /* claim number if this is a sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CLNREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim number*/
    if (CL0ZW01.CL0ZWISP == "**")
      CLNREC.CL2ISNBR = -1;
      KL0ZM005.CL2ISNBR = 0;
    else
      CLNREC.CL2ISNBR = KL0ZM005.CL2ISNBR; /* insp nbr*/
    end
    CLNREC.CLHSEQNB = KL0ZM005.CLHSEQNB; /* seq nbf*/
    CLNREC.XGPCD = CL0ZW01.XGPCD; /* gpc code*/
    CLNREC.SY1STNBR = CL0ZW01.SY1STNBR; /* style*/
    CLNREC.SY2CLRID = CL0ZW01.SY2CLRID; /* color*/
    CLNREC.XDMCD = CL0ZW01.XDMCD; /* dim code*/
    CLNREC.XQACD = CL0ZW01.XQACD; /* quality code*/
    CLNREC.XEGCD = CL0ZW01.XEGCD; /* ENGINEER IDFFI IC*/
    CLNREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD; /* BOOK SEASON*/
    CLNREC.OP-BK-YR = CL0ZW01.OP-BK-YR; /* BOOK YEAR*/
    CLNREC.OP-BK-MO = CL0ZW01.OP-BK-MO; /* BOOK YEAR*/
    CLNREC.XUMCD = CL0ZW01.CL0ZWSSU; /* unit of measure*/
    CLNREC.IV0IVCID = -1;
    CL0ZW04.CL0ZW4SQ = "SS";

    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS13(); /* select set clnrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWEND = "N";

    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS57(); /* load rts*/
    end

    CL0ZW04.CL0ZW4SQ = "CS";
    call "IO1330" (CL0ZW04, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  end
   /* ==================== end clnrec for sales sample ===========*/

  KL0ZM005.XUMCD = CL0ZW01.XUMCD; /* unit of measure*/
  if (CL0ZW01.XUMCD in XUMTBL.XUMCD)
    KL0ZM005.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    KL0ZM005.XUMDESC = " ";
  end

  KL0ZM005.XOWCD = CL0ZW01.XOWCD;

  CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
  CL0ZW01.CL0ZWPOG = CL0ZW01.XOWCD;
  if (CL0ZW01.XOWKEY in XOWTBL.XOWKEY) /* promo owngrp*/
    KL0ZM005.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  else
    KL0ZM005.XOWABRV = " ";
  end

  KL0ZM005.XQACD = CL0ZW01.XQACD; /* unit of measure*/
  if (CL0ZW01.XQACD in XQATBL.XQACD)
    KL0ZM005.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  else
    KL0ZM005.XQAABRV = " ";
  end

  KL0ZM005.XPGCD = CL0ZW01.XPGCD;
  if (CL0ZW01.XPGCD in XPGTBL.XPGCD) /* packaging code*/
    KL0ZM005.XPGABRV = XPGTBL.XPGABRV[sysVar.arrayIndex];
  else
    KL0ZM005.XPGABRV = " ";
  end

  KL0ZM005.SL8ZNCD2 = CL0ZW01.SL8ZNCD2;
  KL0ZM005.SL8LCCD2 = CL0ZW01.SL8LCCD2;
  KL0ZM005.XARCD2 = CL0ZW01.XARCD2;
  CL0ZW01.SL8ZNCD2 = " ";
  CL0ZW01.SL8LCCD2 = " ";
  CL0ZW01.XARCD2 = " ";
  CL0ZW01.CL0ZWNXT = "N";
  CL0ZW01.CL0ZWOFL = "N";

   /* *******************************************************/
     /* retrieve data from clkrec*/

  CLKREC.CLACLMNB = KL0ZM005.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.XGPCD = CL0ZW01.XGPCD;
  CLKREC.SY1STNBR = CL0ZW01.SY1STNBR;
  CLKREC.SY2CLRID = CL0ZW01.SY2CLRID;
  CLKREC.XDMCD = CL0ZW01.XDMCD;
  CLKREC.XUMCD = CL0ZW01.XUMCD;
  CLKREC.XQACD = CL0ZW01.XQACD;
  CLKREC.XEGCD = CL0ZW01.XEGCD;
  CLKREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
  CLKREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
  CLKREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
  CLKREC.CLKCRFL = "*"; /* 072089 add*/

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS11(); /* set-up cursor clkrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CL0ZW01.CL0ZWEND = "N";
  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS58(); /* load return auth*/
  end

  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close return cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "CL0ZS40"; /* location*/
    TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end


   /* *******************************************************/
     /* retrieve data from clkrec for secondary sales sample*/
     /* claim number if this is a sales sample claim*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CLKREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
    CLKREC.IV0IVCID = -1;
    CLKREC.XGPCD = CL0ZW01.XGPCD;
    CLKREC.SY1STNBR = CL0ZW01.SY1STNBR;
    CLKREC.SY2CLRID = CL0ZW01.SY2CLRID;
    CLKREC.XDMCD = CL0ZW01.XDMCD;
    CLKREC.XUMCD = CL0ZW01.CL0ZWSSU; /* second sales sample clm uom*/
    CLKREC.XQACD = CL0ZW01.XQACD;
    CLKREC.XEGCD = CL0ZW01.XEGCD;
    CLKREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
    CLKREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
    CLKREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
    CLKREC.CLKCRFL = "*"; /* 072089 add*/

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS11(); /* set-up cursor clkrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end

    CL0ZW01.CL0ZWEND = "N";
    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS58(); /* load return auth*/
    end

    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close return cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS40"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end

  end
   /* ==================== end clkrec for sales sample ===========*/


  CLXREC.CLXLSTSZ = CLXREC.CLXITMX; /* save last size from clqrec*/
                              /* and clkrec (raitm and rtsit)*/
   /* *************************************************************/
                  /* find prices*/

  KL0ZS59();


   /* *************************************************************/
        /* if no clkrec's or clnrec's found - load all sizes*/

  if (CL0ZW01.CL0ZWFSZ > 0)
    if (KL0ZM005.CL0ZMSZL == " ")
      KL0ZM005.CL0ZMSZL = SY4REC.SY4IDDSC[CL0ZWFSZ];
    end
    if (KL0ZM005.CL0ZMSZH == " ")
      KL0ZM005.CL0ZMSZH = SY4REC.SY4IDDSC[CL0ZWLSZ];
    end
  end

  if (KL0ZM005.CL0ZMSZL == " ")
    CL0ZW01.CL0ZWHLZ = 0;
  else
    if (KL0ZM005.CL0ZMSZL in SY4REC.SY4IDDSC)
      CL0ZW01.CL0ZWHLZ = sysVar.arrayIndex;
    else
      CL0ZW01.CL0ZWHLZ = 0;
    end
  end

  if (KL0ZM005.CL0ZMSZH == " ")
    CL0ZW01.CL0ZWHLH = 9999;
  else
    if (KL0ZM005.CL0ZMSZH in SY4REC.SY4IDDSC)
      CL0ZW01.CL0ZWHLH = sysVar.arrayIndex;
    else
      CL0ZW01.CL0ZWHLH = 9999;
    end
  end

  if (CL0ZW01.CL0ZWHLZ > CL0ZW01.CL0ZWHLH)
    CL0ZW01.CL0ZWHLZ = 0;
    CL0ZW01.CL0ZWHLH = 9999;
  end

  CL0ZW01.CL0ZWADD = "N";
  CL0ZW01.CL0ZWSTK = "N";

  if (CLXREC.CLXLSTSZ == 0) /* no clkrec or clnrec's found*/
    if (CL0ZW01.CL0ZWUDF != "Y"
     || CL0ZW01.CL0ZWUPP == "Y")
      return;
    end
  end


  if (CLXREC.CLXLSTSZ == 0) /* no clkrec or clnrec's found*/
    CL0ZW01.CL0ZWIYX = 1; /* size index*/
    while (CL0ZW01.CL0ZWIYX <= CL0ZW01.CL0ZWSXM)
      if (CL0ZW06.SY5SZID[CL0ZWIYX] != 0)
        CL0ZW01.CL0ZWSIZ = CL0ZW06.SY5SZID[CL0ZWIYX];
        if (SY3REC.XDVCD[CL0ZWSIZ] != " ")
          if (CL0ZW06.SY5SZID[CL0ZWIYX] >= CL0ZW01.CL0ZWHLZ
           && CL0ZW06.SY5SZID[CL0ZWIYX] <= CL0ZW01.CL0ZWHLH)
            CLXREC.CLXLSTSZ = CLXREC.CLXLSTSZ + 1;
            CL0ZW05.SY4IDDSC[CLXLSTSZ] = SY4REC.SY4IDDSC[CL0ZWSIZ];
            CL0ZW05.SY5SZID[CLXLSTSZ] = CL0ZW06.SY5SZID[CL0ZWIYX];
            CL0ZW01.CL0ZWSTK = "Y";
          end
        end
      end
      CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
    end
    CL0ZW01.CL0ZWADD = "Y"; /* add flag*/
  else
    CL0ZW01.CL0ZWSTK = "Y";
  end

  CL0ZW01.CL0ZWOWH = "N";

  if (KL0ZM005.XWHCD == "70" 
   || KL0ZM005.XWHCD == "72" /* skip all stock locate logic*/
   || KL0ZM005.XWHCD == "51") /* for warehouse 70, 72 & 51*/
      /* next sentence*/
  else
    if (CL0ZW01.CL0ZWQCT > 0) /* clqrec's found*/
      /* next sentence*/
    else
      if (CL2REC.YCICD != "CMP"
       && CL2REC.YCICD != "RMS")
        if (CLXREC.CLXLSTSZ == 0 /* no sizes found*/
         || CL0ZW01.CL0ZW7SW != "Y") /* no stock assign rec's*/
          if (CL0ZW01.XWHCD in SY2REC.XWHCD
           || SY2REC.XWHCD[1] == " ")
            converseLib.validationFailed(529);
          else
            KL0ZM005.XARCD2 = SY2REC.XWHCD[1];
            converseLib.validationFailed(549);
            KL0ZM005.SL8ZNCD2 = " ";
            KL0ZM005.SL8LCCD2 = " ";
            CL0ZW01.CL0ZWOWH = "Y";
          end
        end
      end
    end
  end /* end warehouse 70 & 72 skip*/

  if (CLXREC.CLXLSTSZ == 0)
    CL0ZW01.CL0ZWSIZ = 1; /* size index*/
    while (CL0ZW01.CL0ZWSIZ <= 40)
      if (SY4REC.SY4IDDSC[CL0ZWSIZ] != " ")
        if (SY3REC.XDVCD[CL0ZWSIZ] != " ")
          if (CL0ZW01.CL0ZWSIZ >= CL0ZW01.CL0ZWHLZ
           && CL0ZW01.CL0ZWSIZ <= CL0ZW01.CL0ZWHLH)
            CLXREC.CLXLSTSZ = CLXREC.CLXLSTSZ + 1;
            CL0ZW05.SY4IDDSC[CLXLSTSZ] = SY4REC.SY4IDDSC[CL0ZWSIZ];
            CL0ZW05.SY5SZID[CLXLSTSZ] = CL0ZW01.CL0ZWSIZ;
            if (CLXREC.CLXLSTSZ == 1)
              CL0ZW01.CL0ZWFSZ = CL0ZW01.CL0ZWSIZ;
            end
            CL0ZW01.CL0ZWLSZ = CL0ZW01.CL0ZWSIZ;
          end
        end
      end
      CL0ZW01.CL0ZWSIZ = CL0ZW01.CL0ZWSIZ + 1;
    end
  end

  if (CL0ZW01.CL0ZWFSZ > 0)
    KL0ZM005.CL0ZMSZL = SY4REC.SY4IDDSC[CL0ZWFSZ];
  end

  if (CL0ZW01.CL0ZWLSZ > 0)
    KL0ZM005.CL0ZMSZH = SY4REC.SY4IDDSC[CL0ZWLSZ];
  end

   /* *******************************************************/
          /* sort routine*/

  CLXREC.CLXITMX = 0; /* initialize to 0*/
  CLXREC.CLXBLDAY = "N"; /* build array*/
  CLXREC.CLXBLDSC = "Y"; /* build screen*/
  CL0ZW01.CL0ZWSRF = "N"; /* sort flag*/

  while (CL0ZW01.CL0ZWSRF == "N") /* sort flag*/
    KL0ZS62(); /* sort size array*/
    if (CL0ZW01.CL0ZWSCT == 0) /* array sorted?*/
      CL0ZW01.CL0ZWSRF = "Y";
    end
  end

  if (CLXREC.CLXLSTSZ > 0)
    /* next sentence*/
  else
    KL0ZM005.CL0ZMSZL = " ";
    KL0ZM005.CL0ZMSZH = " ";
    if (CL0ZW01.CL0ZWUDF == "Y" /* update flag*/
     && CL0ZW01.CL0ZWUPP != "Y") /* partial update flag*/
      CL0ZW01.CL0ZWADD = "Y";
    else
      CL0ZW01.CL0ZWADD = "N";
    end
    return;
  end

   /* change the 140 value below to a new figure that*/
   /* is 10 less than cl0zw01.cl0zwsxm if cl0zwsxm*/
   /* initialization is changed from 150.*/

  if (CLXREC.CLXLSTSZ > 140)
    CL0ZW01.CL0ZWLST = CL0ZW01.CL0ZWSXM;
  else
    CL0ZW01.CL0ZWLST = CLXREC.CLXLSTSZ + 10;
  end

end // end KL0ZS45

// select unique sy3rec
Function KL0ZS46()

  CLXREC.CLXCPROC = "CL0ZS46"; /* set current proc name*/

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set KL0ZM005.SY1STNBR initialAttributes;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(350);
    set KL0ZM005.SY1STNBR cursor, modified, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS46"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0140"; /* location*/
  TA1REC.TA1DBASE = "DPROD "; /* database*/
  TA1REC.TA1TBLVU = "VSIZE001"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS46

// select unique sy1rec
Function KL0ZS47()

  CLXREC.CLXCPROC = "CL0ZS47"; /* set current proc name*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set KL0ZM005.SY1STNBR initialAttributes;
    if (CL0ZW01.XUMCD == " ")
      CL0ZW01.XUMCD = SY1REC.XUMCD; /* save uom code (MSH)*/
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(550);
    set KL0ZM005.SY1STNBR cursor, modified, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS47"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0120"; /* location*/
  TA1REC.TA1DBASE = "DPROD "; /* database*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS47

// get size description
Function KL0ZS48()

  CLXREC.CLXCPROC = "CL0ZS48";

  SQLCA.VAGen_SQLCODE = 0;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
      if (CL0ZW01.CL0ZWDCT > 2)
        converseLib.validationFailed(4); /* database busy*/
        CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
        CLXREC.CLXBLDSC = "N"; /* build screen flag*/
        CLXREC.CLXERRF = "N"; /* error flag*/
      end
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS48"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO0040"; /* location*/
      TA1REC.TA1DBASE = "DPROD"; /* database*/
      TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010(); /* error diagnosis routine*/
    end
  end

end // end KL0ZS48

// move fields to cl2rec
Function KL0ZS4A()
   /* *************************************************************/

    /* Maintenance History:*/
    /* 02-21-91 CHELLM Remaned CLLIBYID  to XXXUSRID.*/


   /* *************************************************************/

   /* move fields to cl2rec for secondary sales sample claim*/
  CLXREC.CLXCPROC = "CL0ZS4A";

  if (CL0ZW01.CL0ZWNSW != "Y") /* if no clnrec's exist*/
    return;
  end

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim nbr*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR;

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS08(); /* select cl2rec*/
  end

  if (converseVar.validationMsgNum != 0) /* deadlock*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* record does not exist*/
    /* next sentence*/
  else
    KL0ZS37(); /* update cl2rec*/
    return;
  end


  set CL2REC empty;

  KL0ZS02(); /* get date and time*/

  CL2REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CL2REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CL2REC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* claim number*/
  CL2REC.CLHSEQNB = KL0ZM001.CLHSEQNB; /* seq number*/
  CL0ZW01.CL0ZWNBR = KL0ZM001.CL2ISNBR; /* insp nbr*/
  CL2REC.CL2ISNBR = CL0ZW01.CL0ZWNBR; /* insp number*/
  CL2REC.YCICD = KL0ZM001.YCICD; /* insp code*/
  CL2REC.XXXUSRID = KL0ZM001.XXXUSRID; /* inspected by*/
  CL0ZW01.CL0ZWDAT = KL0ZM001.CLLIDT;
   /* ---------------------- y2k out end   ---------------------*/
   /* MOVE 019 TO CL0ZW01.CL0ZWCEN;*/
   /* ---------------------- y2k out end   ---------------------*/
   /* ---------------------- y2k in begin  ---------------------*/
  if (CL0ZW01.CL0ZWYR > 60) /* Century windowing*/
    CL0ZW01.CL0ZWCEN = 19;
  else
    CL0ZW01.CL0ZWCEN = 20;
  end
   /* ---------------------- y2k in end    ---------------------*/
  CL2REC.CL2ISBDT = CL0ZW01.CL0ZWDTE; /* inspected by date*/
  CL2REC.CL2TOSLF = "N"; /* GDECKE 01-18-91 CLMS TO STOCK LOCATE FL.*/

  if (KL0ZM001.CL0ZMINF == "Y" /* inspection complete*/
   || KL0ZM010.CL0ZMINF == "Y" 
   || CL2REC.YCICD == "RMS")  
    CL2REC.CL2ISXDT = TA2REC.TA2GRGGN; /* inspection complete date*/
  else
    CL2REC.CL2ISXDT = 0;
  end

  if (CL2REC.CLJRDIND == " ")
    CL2REC.CLJRDIND = "R";
  end

  if (CL0ZW01.CL0ZWNCT > 0)
    if (CL2REC.CLJRDIND == "D"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "B";
    end
  else
    if (CL2REC.CLJRDIND == "B"
     || CL0ZW01.CL0ZWPCT > 0)
      CL2REC.CLJRDIND = "D";
    end
  end

  CL0ZW01.CL0ZWUAR = "I"; /* update clarec flag*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS41(); /* insert cl2rec*/
  end

end // end KL0ZS4A

// update clarec-2nd sales sample
Function KL0ZS4B()

  CLXREC.CLXCPROC = "CL0ZS43";

   /* save clarec in clwrec, get sales sample secondary claim hdr*/
  CLWREC.CLAGROUP = CLAREC.CLAGROUP;
  CL0ZW01.ZZZCHGDT = CLAREC.ZZZCHGDT;
  CL0ZW01.ZZZCHGTM = CLAREC.ZZZCHGTM;
  CL0ZW01.YCSACTCD = CLAREC.YCSACTCD;
  CL0ZW01.YCSCD2 = CLAREC.YCSCD2;
  CL0ZW01.YCSCD1 = CLAREC.YCSCD1;
  CL0ZW01.CLASCGBY = CLAREC.CLASCGBY;
  CL0ZW01.CLASTTDT = CLAREC.CLASTTDT;
  CL0ZW01.CL0ZWISN = CLAREC.CLACISNB;
  CLAREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* secondary sales sample clm#*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS24(); /* select clarec*/
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    set KL0ZM001.CL0ZMCLM cursor, modified, bold;
    converseLib.validationFailed(321);
    CLXREC.CLXERRF = "Y";
    CL0ZW01.CL0ZWDCT = 0;
  end

   /* move saved sales sample primary fields to secondary claim*/
   /* header fields, and update the  secondary claim header*/
  CLAREC.ZZZCHGDT = CL0ZW01.ZZZCHGDT;
  CLAREC.ZZZCHGTM = CL0ZW01.ZZZCHGTM;
  CLAREC.YCSACTCD = CL0ZW01.YCSACTCD;
  CLAREC.YCSCD2 = CL0ZW01.YCSCD2;
  CLAREC.YCSCD1 = CL0ZW01.YCSCD1;
  CLAREC.CLASCGBY = CL0ZW01.CLASCGBY;
  CLAREC.CLASTTDT = CL0ZW01.CLASTTDT;
  CLAREC.CLACISNB = CL0ZW01.CL0ZWISN; /* inspection sequence*/
  if (CL0ZW01.CL0ZWUAS == "Y") /* if sales sample 2nd claim header*/
                                   /* update flag*/
    CLAREC.CLACMIND = CL0ZW01.CL0ZWCMI; /* then use new clmrec flag*/
  end

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS44(); /* update clarec*/
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    set KL0ZM001.CL0ZMCLM cursor, modified, bold;
    converseLib.validationFailed(321);
    CLXREC.CLXERRF = "Y";
    CL0ZW01.CL0ZWDCT = 0;
  end

   /* restore sales sample primary claim header record*/
  CLAREC.CLAGROUP = CLWREC.CLAGROUP;

end // end KL0ZS4B

// select unique SY2REC-VCOLOR01
Function KL0ZS4C()

  CLXREC.CLXCPROC = "CL0ZS4C"; /* set current proc name*/

  SY2REC.XGPCD = CL0ZW01.XGPCD;
  SY2REC.SY1STNBR = CL0ZW01.SY1STNBR;
  SY2REC.SY2CLRID = CL0ZW01.SY2CLRID;
  SY2REC.XDMCD = CL0ZW01.XDMCD;


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set KL0ZM005.SY1STNBR initialAttributes;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(550);
    set KL0ZM005.SY1STNBR cursor, modified, bold;
    set KL0ZM005.SY2CLRID cursor, modified, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS4C"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
  TA1REC.TA1DBASE = "DPROD "; /* database*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS4C

// set up cursor for sl7rec
Function KL0ZS50()
   /* *************************************************************/
   /* MAINTENANCE HISTORY                                       **/
   /* 04-12-90  SGORGA                                          **/
   /* Changed cl0zw01.xsdcd field name to cl0zw01.pc2inseg.     **/
                                                             /* **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS50";

  set SL7REC empty;
  CL0ZW01.CL0ZWSZE = 0;
  CL0ZW01.CL0ZW7SW = "N";
  SL7REC.SY1STNBR = CL0ZW01.SY1STNBR;
  SL7REC.SY2CLRID = CL0ZW01.SY2CLRID;
  SL7REC.XDMCD = CL0ZW01.XDMCD;
  SL7REC.XGPCD = CL0ZW01.XGPCD;
  SL7REC.XUMCD = CL0ZW01.XUMCD;
  SL7REC.XWHCD = CL0ZW01.XWHCD;
  SL7REC.XOWCD = CL0ZW01.XOWCD;
  SL7REC.XPGCD = CL0ZW01.XPGCD;
  SL7REC.XQACD = CL0ZW01.XQACD;
  SL7REC.XSDCD = CL0ZW01.PC2INSEG;
  SL7REC.XARCD = CL0ZW01.XARCD2;
  SL7REC.SL4ZONE = CL0ZW01.SL8ZNCD2;
  SL7REC.SL5LOCTN = CL0ZW01.SL8LCCD2;
  SL7REC.XSACD = "000";
  SL7REC.XXXSTAT = "A";
  SL7REC.SY5SZID = -1;

  call "IO1550" ("S1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0;
  else

    if (SQLCA.VAGen_SQLCODE == -911)
      CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
      if (CL0ZW01.CL0ZWDCT > 2)
        converseLib.validationFailed(4);
        CL0ZW01.CL0ZWDFL = "N";
        CLXREC.CLXBLDSC = "N";
        CLXREC.CLXERRF = "Y";
      end
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS50";
      TA1REC.TA1LOCAT[4] = "IO1550";
      TA1REC.TA1DBASE = "DSTLOC";
      TA1REC.TA1TBLVU = "VSYASG01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end

  CL0ZW01.CL0ZWIYX = 1;

  while (CL0ZW01.CL0ZWIYX <= CL0ZW01.CL0ZWSXM)
    CL0ZW06.SY5SZID[CL0ZWIYX] = 0;
    CL0ZW01.CL0ZWIYX = CL0ZWIYX + 1;
  end

  CL0ZW01.CL0ZWIYX = 0;

end // end KL0ZS50

// set up cursor for sl7rec
Function KL0ZS51()

  CLXREC.CLXCPROC = "CL0ZS51";

  CL0ZW01.CL0ZWIYX = 0;
  CL0ZW01.CL0ZWILX = 0;
  CL0ZW01.SL8ZNCD2 = " ";
  CL0ZW01.SL8LCCD2 = " ";
  CL0ZW01.XARCD2 = " ";
  CL0ZW01.CL0ZWSZE = 0;
  CL0ZW01.CL0ZW7SW = "N";
  set CL0ZW06 empty;
  set CL0ZW07 empty;

  set SL7REC empty;
  SL7REC.SY1STNBR = CL0ZW01.SY1STNBR;
  SL7REC.SY2CLRID = CL0ZW01.SY2CLRID;
  SL7REC.XDMCD = CL0ZW01.XDMCD;
  SL7REC.XGPCD = CL0ZW01.XGPCD;
  SL7REC.XUMCD = CL0ZW01.XUMCD;
  SL7REC.XWHCD = CL0ZW01.XWHCD;
  SL7REC.XOWCD = CL0ZW01.XOWCD;
  SL7REC.XPGCD = CL0ZW01.XPGCD;
  SL7REC.XQACD = CL0ZW01.XQACD;
  SL7REC.XSDCD = "000";
  SL7REC.XSACD = "000";
  SL7REC.XARCD = "*";
  SL7REC.SL4ZONE = "*";
  SL7REC.SL5LOCTN = "*";
  SL7REC.SY5SZID = -1;

  CL0ZW07.CL0ZW7SQ = "S8";
  CL0ZW07.CL0ZWLOW = 0;
  CL0ZW07.CL0ZWHGH = 999999999;

  call "IO1550" (CL0ZW07, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4);
      CL0ZW01.CL0ZWDFL = "N";
      CLXREC.CLXBLDSC = "N";
      CLXREC.CLXERRF = "Y";
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS51";
  TA1REC.TA1LOCAT[4] = "IO1550";
  TA1REC.TA1DBASE = "DSTLOC";
  TA1REC.TA1TBLVU = "VSYASG01";
  CLXREC.XXXWDTE = CLAREC.CLACLMNB;
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
  XPCL010();

end // end KL0ZS51

// select next sl7rec
Function KL0ZS52()
    /* KL0ZS52  --  SELECT NEXT SL7REC*/

   /* *****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G         **/
   /* *--------------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                              **/
   /* *--------------------------------------------------------------**/
   /* * 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES                  **/
   /* * 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES                  **/
   /* *****************************************************************/


  CLXREC.CLXCPROC = "CL0ZS52";

  call "IO1550" ("N8", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS57"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1550"; /* location*/
      TA1REC.TA1DBASE = "DSTLOC"; /* database*/
      TA1REC.TA1TBLVU = "VSYASG01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CL0ZW01.SL8ZNCD2 == " "
   && CL0ZW01.SL8LCCD2 == " "
   && CL0ZW01.XARCD2 == " ")
    CL0ZW01.CL0ZWRSW = "Y";
    CL0ZW01.SL8ZNCD2 = SL7REC.SL4ZONE;
    CL0ZW01.SL8LCCD2 = SL7REC.SL5LOCTN;
    CL0ZW01.XARCD2 = SL7REC.XARCD;
  end

  if (SL7REC.SL4ZONE == CL0ZW01.SL8ZNCD2
   && SL7REC.SL5LOCTN == CL0ZW01.SL8LCCD2
   && SL7REC.XARCD == CL0ZW01.XARCD2)
    if (SL7REC.SY5SZID == CL0ZW01.CL0ZWSZE)
      if (CL0ZW01.XXXSTAT != "A")
        return;
      end
      if (SL7REC.XXXSTAT != "A")
        CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
        return;
      end
    else
      CL0ZW01.CL0ZWSZE = SL7REC.SY5SZID;
      CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
      if (SL7REC.XXXSTAT != "A")
        return;
      end
    end
    CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
    if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM)
      return;
    end
    if (CL0ZW01.CL0ZWIYX == 1)
      CL0ZW01.CL0ZWFSZ = SL7REC.SY5SZID;
    end
    CL0ZW01.CL0ZW7SW = "Y";
    CL0ZW06.SY5SZID[CL0ZWIYX] = SL7REC.SY5SZID;
    CL0ZW01.CL0ZWLSZ = SL7REC.SY5SZID;
  else
    if (SL7REC.SL4ZONE == CL0ZW06.SL4ZONE
     && SL7REC.SL5LOCTN == CL0ZW06.SL5LOCTN
     && SL7REC.XARCD == CL0ZW06.XARCD
     && CL0ZW01.XQACD == CL0ZW06.CL0ZW6QA
     && CL0ZW01.XOWCD == CL0ZW06.CL0ZW6OW
     && CL0ZW01.XPGCD == CL0ZW06.CL0ZW6PG)
      /* next sentence*/
    else
      CL0ZW01.CL0ZWSZE = 0;
      CL0ZW01.XXXSTAT = " ";
    end
    CL0ZW06.SL4ZONE = SL7REC.SL4ZONE;
    CL0ZW06.SL5LOCTN = SL7REC.SL5LOCTN;
    CL0ZW06.XARCD = SL7REC.XARCD;
    CL0ZW06.CL0ZW6QA = CL0ZW01.XQACD;
    CL0ZW06.CL0ZW6OW = CL0ZW01.XOWCD;
    CL0ZW06.CL0ZW6PG = CL0ZW01.XPGCD;
    if (CL0ZW06.CL0ZWLC1 in CL0ZW06.CL0ZWLC2)
      return;
    else
      if (CL0ZW01.CL0ZWSZE == 0)
        CL0ZW01.CL0ZWSZE = SL7REC.SY5SZID;
        CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
      end
      if (SL7REC.SY5SZID == CL0ZW01.CL0ZWSZE)
        if (CL0ZW01.XXXSTAT != "A")
          return;
        end
      else
        CL0ZW01.CL0ZWSZE = SL7REC.SY5SZID;
        CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
        if (SL7REC.XXXSTAT != "A")
          return;
        end
      end
      CL0ZW01.CL0ZWILX = CL0ZW01.CL0ZWILX + 1;
      if (CL0ZW01.CL0ZWILX > CL0ZW01.CL0ZWSXM)
        return;
      end
      CL0ZW06.SL8ZNCD2[CL0ZWILX] = SL7REC.SL4ZONE;
      CL0ZW06.SL8LCCD2[CL0ZWILX] = SL7REC.SL5LOCTN;
      CL0ZW06.XARCD2[CL0ZWILX] = SL7REC.XARCD;
      CL0ZW06.XQACD[CL0ZWILX] = CL0ZW01.XQACD;
      CL0ZW06.XEGCD[CL0ZWILX] = CL0ZW01.XEGCD;
      CL0ZW06.XBK-BK-SESN-CD[CL0ZWILX] = CL0ZW01.XBK-BK-SESN-CD;
      CL0ZW06.OP-BK-YR[CL0ZWILX] = CL0ZW01.OP-BK-YR;
      CL0ZW06.OP-BK-MO[CL0ZWILX] = CL0ZW01.OP-BK-MO;
      CL0ZW06.XOWCD[CL0ZWILX] = CL0ZW01.XOWCD;
      CL0ZW06.XPGCD[CL0ZWILX] = CL0ZW01.XPGCD;
    end
  end

end // end KL0ZS52

// select next sl7rec
Function KL0ZS53()

  CLXREC.CLXCPROC = "CL0ZS53";

  call "IO1550" ("N1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS58"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1550"; /* location*/
      TA1REC.TA1DBASE = "DSTLOC"; /* database*/
      TA1REC.TA1TBLVU = "VSYASG01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (SL7REC.SL4ZONE == CL0ZW01.SL8ZNCD2
   && SL7REC.SL5LOCTN == CL0ZW01.SL8LCCD2
   && SL7REC.XARCD == CL0ZW01.XARCD2)
    if (SL7REC.SY5SZID == CL0ZW01.CL0ZWSZE)
      if (CL0ZW01.XXXSTAT != "A")
        return;
      end
      if (SL7REC.XXXSTAT != "A")
        CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
        return;
      end
    else
      CL0ZW01.CL0ZWSZE = SL7REC.SY5SZID;
      CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
      if (SL7REC.XXXSTAT != "A")
        return;
      end
    end
    CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
    if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM)
      return;
    end
    if (CL0ZW01.CL0ZWIYX == 1)
      CL0ZW01.CL0ZWFSZ = SL7REC.SY5SZID;
    end
    CL0ZW01.CL0ZW7SW = "Y";
    CL0ZW01.CL0ZWLSZ = SL7REC.SY5SZID;
    CL0ZW06.SY5SZID[CL0ZWIYX] = SL7REC.SY5SZID;
  end

end // end KL0ZS53

// move clqrec item to size array
Function KL0ZS54()
     /* KL0ZS54   --   MOVE CLQREC ITEM TO SIZE ARRAY*/

   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* -----------------------------------------------------------**/
   /* DATE    PGMR      DESCRIPTION                            **/
   /* -----------------------------------------------------------**/
   /* 04-12-90  SGORGA  CHANGED CL0Z205.XSDCD TO PC2INSEG        **/
   /* 06-14-90  CHELLM  Renamed XSDCD to PC2INSEG.               **/
   /* 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES                  **/
   /* 04-13-92  TWATSO  APRIL DB2 TABLE CHANGES                  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS54";

  SQLCA.VAGen_SQLCODE = 0;

  KL0ZS55(); /* select next*/

  if (CL0ZW01.CL0ZWEND == "Y") /* no more records*/
    return;
  end

  CL0ZW01.CL0ZWQSW = "Y";

  if (CL0ZW01.CL0ZWUDF != "Y"
   || CL0ZW01.CL0ZWUPP == "Y")
    if (CL0ZW01.SL8ZNCD2 == " "
     && CL0ZW01.SL8LCCD2 == " "
     && CL0ZW01.XARCD2 == " ")
      CL0ZW01.XOWCD = CLQREC.XOWCD;
      CL0ZW01.XPGCD = CLQREC.XPGCD;
      CL0ZW01.XQACD = CLQREC.XQACD;
      CL0ZW01.XEGCD = CLQREC.XEGCD;
      CL0ZW01.XBK-BK-SESN-CD = "  ";
      CL0ZW01.OP-BK-YR = 0;
      CL0ZW01.OP-BK-MO = 0;
      CL0ZW01.SL8ZNCD2 = CLQREC.SL8ZNCD1;
      CL0ZW01.SL8LCCD2 = CLQREC.SL8LCCD1;
      CL0ZW01.XARCD2 = CLQREC.XARCD1;
      CL0ZW01.CL0ZWRSW = "Y";
    end
  else
    if (CL0ZW01.SL8ZNCD2 == " "
     && CL0ZW01.SL8LCCD2 == " "
     && CL0ZW01.XARCD2 == " "
     && CLQREC.XOWCD == CL0ZW01.XOWCD
     && CLQREC.XPGCD == CL0ZW01.XPGCD
     && CLQREC.XQACD == CL0ZW01.XQACD)
      CL0ZW01.SL8ZNCD2 = CLQREC.SL8ZNCD1;
      CL0ZW01.SL8LCCD2 = CLQREC.SL8LCCD1;
      CL0ZW01.XARCD2 = CLQREC.XARCD1;
      CL0ZW01.CL0ZWRSW = "Y";
    end
  end

  if (CLQREC.SL8ZNCD1 == CL0ZW01.SL8ZNCD2
   && CLQREC.SL8LCCD1 == CL0ZW01.SL8LCCD2
   && CLQREC.XARCD1 == CL0ZW01.XARCD2
   && CLQREC.XQACD == CL0ZW01.XQACD
   && CLQREC.XOWCD == CL0ZW01.XOWCD
   && CLQREC.XPGCD == CL0ZW01.XPGCD)

    CL0ZW01.CL0ZWSIZ = CLQREC.SY5SZID;
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1; /* array index*/

    if (CLXREC.CLXITMX > CL0ZW01.CL0ZWSXM) /* if array full?*/
      converseLib.validationFailed(251); /* maximum data selected*/
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    end

    if (CLQREC.SY5SZID in CL0ZW05.SY5SZID)
      CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] + 1;
      CL0ZW05.CL0ZWSEQ[CLXITMX] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex];
    else
      CL0ZW05.CL0ZWSEQ[CLXITMX] = 0;
    end

    CL0ZW05.CL0ZWLSQ[CLXITMX] = 0;
    CL0ZW05.SY4IDDSC[CLXITMX] = SY4REC.SY4IDDSC[CL0ZWSIZ];
    CL0ZW05.SY5SZID[CLXITMX] = CLQREC.SY5SZID;
    CL0ZW05.SL8ZNCD1[CLXITMX] = CLQREC.SL8ZNCD2;
    CL0ZW05.SL8LCCD1[CLXITMX] = CLQREC.SL8LCCD2;
    CL0ZW05.SL8ZNCD2[CLXITMX] = CLQREC.SL8ZNCD2;
    CL0ZW05.SL8LCCD2[CLXITMX] = CLQREC.SL8LCCD2;
    CL0ZW05.SL2PALET[CLXITMX] = CLQREC.SL2PALET;
    CL0ZW05.XSLCD[CLXITMX] = CLQREC.XSLCD;
    CL0ZW05.PC2INSEG[CLXITMX] = CLQREC.PC2INSEG;
    CL0ZW05.XQACD[CLXITMX] = CLQREC.XQACD;
    CL0ZW05.XEGCD[CLXITMX] = CLQREC.XEGCD;
    CL0ZW05.XBK-BK-SESN-CD[CLXITMX] = "  ";
    CL0ZW05.OP-BK-YR[CLXITMX] = 0;
    CL0ZW05.OP-BK-MO[CLXITMX] = 0;
    CL0ZW05.XUMCD[CLXITMX] = CLQREC.XUMCD;
    CL0ZW05.XOWCD[CLXITMX] = CLQREC.XOWCD;
    CL0ZW05.XPGCD[CLXITMX] = CLQREC.XPGCD;
    CL0ZW05.CLNRTSQ[CLXITMX] = CLQREC.CLNRTSQ;
    CL0ZW05.CL0ZWCSQ[CLXITMX] = CLQREC.CLNRTSQ;
    CL0ZW05.CL0ZWSTQ[CLXITMX] = CLQREC.CLNRTSQ;
                                   /* save stk loc cr qty*/
    CL0ZW05.CL0ZWPMY[CLXITMX] = " ";
    CL0ZW01.CL0ZWNSW = "Y";

    CL0ZW01.CL0ZWQCT = CL0ZW01.CL0ZWQCT + 1;
    if (CLQREC.SY5SZID in CL0ZW06.SY5SZID)
      /* next sentence*/
    else
      CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
      if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM)
        return;
      end

      if (CL0ZW01.CL0ZWIYX == 1)
        CL0ZW01.CL0ZWFSZ = CLQREC.SY5SZID;
      end
      CL0ZW06.SY5SZID[CL0ZWIYX] = CLQREC.SY5SZID;
      CL0ZW01.CL0ZWLSZ = CLQREC.SY5SZID;
    end
  else
    CL0ZW06.SL4ZONE = CLQREC.SL8ZNCD1;
    CL0ZW06.SL5LOCTN = CLQREC.SL8LCCD1;
    CL0ZW06.XARCD = CLQREC.XARCD1;
    CL0ZW06.CL0ZW6QA = CLQREC.XQACD;
    CL0ZW06.CL0ZW6OW = CLQREC.XOWCD;
    CL0ZW06.CL0ZW6PG = CLQREC.XPGCD;
    if (CL0ZW06.CL0ZWLC1 in CL0ZW06.CL0ZWLC2)
      return;
    else
      CL0ZW01.CL0ZWILX = CL0ZW01.CL0ZWILX + 1;
      if (CL0ZW01.CL0ZWILX > CL0ZW01.CL0ZWSXM)
        return;
      end
      CL0ZW06.SL8ZNCD2[CL0ZWILX] = CLQREC.SL8ZNCD1;
      CL0ZW06.SL8LCCD2[CL0ZWILX] = CLQREC.SL8LCCD1;
      CL0ZW06.XARCD2[CL0ZWILX] = CLQREC.XARCD1;
      CL0ZW06.XQACD[CL0ZWILX] = CLQREC.XQACD;
      CL0ZW06.XEGCD[CL0ZWILX] = CLQREC.XEGCD;
      CL0ZW06.XBK-BK-SESN-CD[CL0ZWILX] = "  ";
      CL0ZW06.OP-BK-YR[CL0ZWILX] = 0;
      CL0ZW06.OP-BK-MO[CL0ZWILX] = 0;
      CL0ZW06.XOWCD[CL0ZWILX] = CLQREC.XOWCD;
      CL0ZW06.XPGCD[CL0ZWILX] = CLQREC.XPGCD;
    end
  end

end // end KL0ZS54

// select unique clqrec
Function KL0ZS55()

  CLXREC.CLXCPROC = "CL0ZS55";

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1360" ("SN", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWEND = "Y";
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS55"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS55

// move clqrec item to size array
Function KL0ZS56()
    /* KL0ZS56   --   MOVE CLQREC ITEM TO SIZE ARRAY*/

   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G      **/
   /* ------------------------------------------------------------**/
   /* DATE    PGMR     DESCRIPTION                             **/
   /* ------------------------------------------------------------**/
   /* 04-12-90  SGORGA   CHANGED CL0ZW05.XSDCD TO PC2INSEG.      **/
   /* 06-14-90  CHELLM   Renamed xsdcd to PC2INSEG               **/
   /* 03-13-92  GDECKE   MARCH DB2 TABLE CHANGES.                **/
   /* 04-13-92  TWATSO   APRIL DB2 TABLE CHANGES.                **/
   /* **************************************************************/

  CLXREC.CLXCPROC = "CL0ZS56";

  SQLCA.VAGen_SQLCODE = 0;

  KL0ZS55(); /* select next*/

  if (CL0ZW01.CL0ZWEND == "Y") /* no more records*/
    return;
  end

  CL0ZW01.CL0ZWQSW = "Y";

  if (CL0ZW01.SL8ZNCD2 == " "
   && CL0ZW01.SL8LCCD2 == " "
   && CL0ZW01.XARCD2 == " ")
    CL0ZW01.SL8ZNCD2 = CLQREC.SL8ZNCD1;
    CL0ZW01.SL8LCCD2 = CLQREC.SL8LCCD1;
    CL0ZW01.XARCD2 = CLQREC.XARCD1;
    CL0ZW01.XQACD = CLQREC.XQACD;
    CL0ZW01.XEGCD = CLQREC.XEGCD;
    CL0ZW01.XBK-BK-SESN-CD = "  ";
    CL0ZW01.OP-BK-YR = 0;
    CL0ZW01.OP-BK-MO = 0;
    CL0ZW01.XOWCD = CLQREC.XOWCD;
    CL0ZW01.XPGCD = CLQREC.XPGCD;
  end

  if (CLQREC.SL8ZNCD1 == CL0ZW01.SL8ZNCD2
   && CLQREC.SL8LCCD1 == CL0ZW01.SL8LCCD2
   && CLQREC.XARCD1 == CL0ZW01.XARCD2
   && CLQREC.XQACD == CL0ZW01.XQACD
   && CLQREC.XOWCD == CL0ZW01.XOWCD
   && CLQREC.XPGCD == CL0ZW01.XPGCD)

    CL0ZW01.CL0ZWSIZ = CLQREC.SY5SZID;
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1; /* array index*/

    if (CLXREC.CLXITMX > CL0ZW01.CL0ZWSXM) /* if array full?*/
      converseLib.validationFailed(251); /* maximum data selected*/
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      CLXREC.CLXITMX = CL0ZW01.CL0ZWSXM;
      return;
    end

    if (CLQREC.SY5SZID in CL0ZW05.SY5SZID)
      CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] + 1;
      CL0ZW05.CL0ZWSEQ[CLXITMX] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex];
    else
      CL0ZW05.CL0ZWSEQ[CLXITMX] = 0;
    end

    CL0ZW05.CL0ZWLSQ[CLXITMX] = 0;
    CL0ZW05.SY4IDDSC[CLXITMX] = SY4REC.SY4IDDSC[CL0ZWSIZ];
    CL0ZW05.SY5SZID[CLXITMX] = CLQREC.SY5SZID;
    CL0ZW05.SL8ZNCD1[CLXITMX] = CLQREC.SL8ZNCD2;
    CL0ZW05.SL8LCCD1[CLXITMX] = CLQREC.SL8LCCD2;
    CL0ZW05.SL8ZNCD2[CLXITMX] = CLQREC.SL8ZNCD2;
    CL0ZW05.SL8LCCD2[CLXITMX] = CLQREC.SL8LCCD2;
    CL0ZW05.SL2PALET[CLXITMX] = CLQREC.SL2PALET;
    CL0ZW05.XSLCD[CLXITMX] = CLQREC.XSLCD;
    CL0ZW05.PC2INSEG[CLXITMX] = CLQREC.PC2INSEG;
    CL0ZW05.XPGCD[CLXITMX] = CLQREC.XPGCD;
    CL0ZW05.XOWCD[CLXITMX] = CLQREC.XOWCD;
    CL0ZW05.XQACD[CLXITMX] = CLQREC.XQACD;
    CL0ZW05.XEGCD[CLXITMX] = CLQREC.XEGCD;
    CL0ZW05.XBK-BK-SESN-CD[CLXITMX] = "  ";
    CL0ZW05.OP-BK-YR[CLXITMX] = 0;
    CL0ZW05.OP-BK-MO[CLXITMX] = 0;
    CL0ZW05.XUMCD[CLXITMX] = CLQREC.XUMCD;
    CL0ZW05.CLNRTSQ[CLXITMX] = CLQREC.CLNRTSQ;
    CL0ZW05.CL0ZWCSQ[CLXITMX] = CLQREC.CLNRTSQ;
    CL0ZW05.CL0ZWSTQ[CLXITMX] = CLQREC.CLNRTSQ;
                                   /* save stk loc cr qty*/
    CL0ZW05.CL0ZWPMY[CLXITMX] = " ";
    if (CL0ZW01.CL0ZWSAM == "Y")
      if (CLQREC.CLACLMNB == KL0ZM005.CLACLMNB)
        CL0ZW01.XUMCD = CLQREC.XUMCD;
      else
         /* next sentence;*/
      end
    else
      CL0ZW01.XUMCD = CLQREC.XUMCD;
    end
    CL0ZW01.CL0ZWNSW = "Y";

    CL0ZW01.CL0ZWQCT = CL0ZW01.CL0ZWQCT + 1;
    if (CLQREC.SY5SZID in CL0ZW06.SY5SZID)
      /* next sentence*/
    else
      CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
      if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM) /* max size table*/
        return;
      end

      if (CL0ZW01.CL0ZWIYX == 1)
        CL0ZW01.CL0ZWFSZ = CLQREC.SY5SZID;
      end

      CL0ZW06.SY5SZID[CL0ZWIYX] = CLQREC.SY5SZID;
      CL0ZW01.CL0ZWLSZ = CLQREC.SY5SZID;
    end
  end

end // end KL0ZS56

// move clnrec item to size array
Function KL0ZS57()
      /* KL0ZS57   --   MOVE CLNREC ITEM TO SIZE ARRAY*/

   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G       **/
   /* ------------------------------------------------------------**/
   /* DATE     PGMR     DESCRIPTION                            **/
   /* ------------------------------------------------------------**/
   /* 04-12-90   SGORGA   CHANGED CL0ZW05.XSDCD TO PC2INSEG.     **/
   /* 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES                **/
   /* 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES  ADD OP-BK-MO  **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS57";

   /* move vrtsit01 lines to size array*/

  SQLCA.VAGen_SQLCODE = 0;
  CL0ZW04.CL0ZW4SQ = "SN";

  call "IO1330" (CL0ZW04, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y";
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS57";
      TA1REC.TA1LOCAT[4] = "IO1330";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTSIT01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end

   /* if inspection status is 'cmp' or 'rms' and there were no*/
   /* vclstk01 lines loaded into the size table (cl0zw05) then*/
   /* do the actions in the following paragraph and return to*/
   /* cl0zs45.*/

  if (CL2REC.YCICD == "CMP"  
   || CL2REC.YCICD == "RMS"  
   || KL0ZM005.XWHCD == "70" 
   || KL0ZM005.XWHCD == "72" /* warehouses 72 & 72 do not have*/
   || KL0ZM005.XWHCD == "51") /* locations; warehouse 51 added*/
                                   /* on 3/29/99*/
    if (CL0ZW01.CL0ZWQCT == 0)
      if (CL0ZW01.CL0ZWRSW == "N") /* if no 'locations' found*/
        CL0ZW01.CL0ZWRSW = "Y"; /* set 'locations' switch to 'y'*/
        CL0ZW01.XOWCD = CLNREC.XOWCD; /* save owner code*/
        CL0ZW01.XQACD = CLNREC.XQACD; /* save quality code*/
        CL0ZW01.XEGCD = CLNREC.XEGCD; /* ENGINEER DIFF*/
        CL0ZW01.XBK-BK-SESN-CD = CLNREC.XBK-BK-SESN-CD; /* BOOK SEASON*/
        CL0ZW01.OP-BK-YR = CLNREC.OP-BK-YR; /* BOOK YEAR*/
        CL0ZW01.OP-BK-MO = CLNREC.OP-BK-MO; /* BOOK YEAR*/
        CL0ZW01.SL8ZNCD2 = " "; /* clear zone code*/
        CL0ZW01.SL8LCCD2 = " "; /* clear location code*/
        CL0ZW01.XARCD2 = " "; /* clear area code*/
        CL0ZW01.XPGCD = " "; /* clear packaging type code*/
      end
      if (CLNREC.XQACD == CL0ZW01.XQACD /* if vrtsit01 quality code and*/
       && CLNREC.XOWCD == CL0ZW01.XOWCD /* owner same as saved values*/
       && CL0ZW01.SL8ZNCD2 == " "       /* and zone/location/area,packaging*/
       && CL0ZW01.SL8LCCD2 == " "       /* codes not yet used then save the*/
       && CL0ZW01.XARCD2 == " "         /* size id and increment index for*/
       && CL0ZW01.XPGCD == " ")         /* cl0zw05 table.*/
        CL0ZW01.CL0ZWSIZ = CLNREC.SY5SZID; /* set size and index for*/
        CLXREC.CLXITMX = CLXREC.CLXITMX + 1; /* using next line in cl0zw05.*/

        if (CLXREC.CLXITMX > CL0ZW01.CL0ZWSXM) /* if over max table size*/
          converseLib.validationFailed(251); /* show maximum data selected msg*/
          CL0ZW01.CL0ZWEND = "Y"; /* and retrun to cl0zs45*/
          CLXREC.CLXITMX = CL0ZW01.CL0ZWSXM;
          return;
        end

         /* if vrtsit01 size is in table then increment last*/
         /* sequence number by one and save new value*/
         /* otherwise set sequence number to 0.*/

        if (CLNREC.SY5SZID in CL0ZW05.SY5SZID)
          CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex] + 1;
          CL0ZW05.CL0ZWSEQ[CLXITMX] = CL0ZW05.CL0ZWLSQ[sysVar.arrayIndex];
        else
          CL0ZW05.CL0ZWSEQ[CLXITMX] = 0;
        end

         /* move vrtsit01 data to size table*/

        CL0ZW05.CL0ZWLSQ[CLXITMX] = 0;
        CL0ZW05.SY4IDDSC[CLXITMX] = SY4REC.SY4IDDSC[CL0ZWSIZ];
        CL0ZW05.SY5SZID[CLXITMX] = CLNREC.SY5SZID;
        CL0ZW05.SL8ZNCD1[CLXITMX] = " ";
        CL0ZW05.SL8LCCD1[CLXITMX] = " ";
        CL0ZW05.SL2PALET[CLXITMX] = " ";
        CL0ZW05.XSLCD[CLXITMX] = " ";
        CL0ZW05.PC2INSEG[CLXITMX] = " ";
        CL0ZW05.XQACD[CLXITMX] = CLNREC.XQACD;
        CL0ZW05.XEGCD[CLXITMX] = CLNREC.XEGCD;
        CL0ZW05.XBK-BK-SESN-CD[CLXITMX] = CLNREC.XBK-BK-SESN-CD;
        CL0ZW05.OP-BK-YR[CLXITMX] = CLNREC.OP-BK-YR;
        CL0ZW05.OP-BK-MO[CLXITMX] = CLNREC.OP-BK-MO;
        CL0ZW05.XUMCD[CLXITMX] = CLNREC.XUMCD;
        CL0ZW05.XOWCD[CLXITMX] = CLNREC.XOWCD;
        CL0ZW05.XPGCD[CLXITMX] = " ";
        CL0ZW05.CLNRTSQ[CLXITMX] = CLNREC.CLNRTSQ;
        CL0ZW05.CL0ZWCSQ[CLXITMX] = CLNREC.CLNRTSQ;
        CL0ZW05.CL0ZWSTQ[CLXITMX] = 0; /* set stk loc cr qty to 0*/
        CL0ZW05.CLNNCRQ[CLXITMX] = CLNREC.CLNNCRQ;
        CL0ZW05.YDRCD[CLXITMX] = CLNREC.YDRCD;
        CL0ZW01.CL0ZWTTL = CL0ZW01.CL0ZWTTL + CLNREC.CLNRTSQ;
        CL0ZW01.CL0ZWNSW = "Y";

        CL0ZW01.CL0ZWRCT = CL0ZW01.CL0ZWRCT + 1;

         /* if size id is already in the stock assign table*/
         /* then no more processing - return to cl0zs45*/

        if (CLNREC.SY5SZID in CL0ZW06.SY5SZID)
          /* next sentence*/
        else
           /* otherwise increment index in stock assign table*/
           /* and initialize a new line for the new size.*/
          CL0ZW01.CL0ZWIYX = CL0ZWIYX + 1;
          if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM) /* max size table*/
            return;
          end

           /* save the size id in the first size id field*/
           /* if this is the first size*/

          if (CL0ZW01.CL0ZWIYX == 1)
            CL0ZW01.CL0ZWFSZ = CLNREC.SY5SZID;
          end

           /* save the size id in the last size id field.*/
           /* and save the size id size in the stock assign table*/

          CL0ZW06.SY5SZID[CL0ZWIYX] = CLNREC.SY5SZID;
          CL0ZW01.CL0ZWLSZ = CLNREC.SY5SZID;
        end
      else
         /* this is the else part of test performed above:*/
         /* "if vrtsit01 quality code and"*/
         /* "owner same as saved values"*/
         /* "and zone/location/area/packaging"*/
         /* "codes not yet used".*/

        CL0ZW06.CL0ZW6QA = CLNREC.XQACD;
        CL0ZW06.CL0ZW6OW = CLNREC.XOWCD;
        CL0ZW06.CL0ZW6PG = " ";
        CL0ZW06.SL4ZONE = " ";
        CL0ZW06.SL5LOCTN = " ";
        CL0ZW06.XARCD = " ";

         /* if location is already in the stock assign table*/
         /* then no more processing - return to cl0zs45*/

        if (CL0ZW06.CL0ZWLC1 in CL0ZW06.CL0ZWLC2)
          return;
        else
           /* otherwise increment index in stock assign table*/
           /* and initialize a new line for the location.*/
          CL0ZW01.CL0ZWILX = CL0ZWILX + 1;
          if (CL0ZW01.CL0ZWILX > CL0ZW01.CL0ZWSXM) /* max size table*/
            return;
          end
          CL0ZW06.XQACD[CL0ZWILX] = CLNREC.XQACD;
          CL0ZW06.XEGCD[CL0ZWILX] = CLNREC.XEGCD;
          CL0ZW06.XBK-BK-SESN-CD[CL0ZWILX] = CLNREC.XBK-BK-SESN-CD;
          CL0ZW06.OP-BK-YR[CL0ZWILX] = CLNREC.OP-BK-YR;
          CL0ZW06.OP-BK-MO[CL0ZWILX] = CLNREC.OP-BK-MO;
          CL0ZW06.XOWCD[CL0ZWILX] = CLNREC.XOWCD;
          CL0ZW06.XPGCD[CL0ZWILX] = " ";
          CL0ZW06.SL8ZNCD2[CL0ZWILX] = " ";
          CL0ZW06.SL8LCCD2[CL0ZWILX] = " ";
          CL0ZW06.XARCD2[CL0ZWILX] = " ";
        end
      end
      return;
    end
  end


   /* if inspection status is 'iip' or there was one or more*/
   /* vclstk01 lines loaded into the size table (cl0zw05) then*/
   /* do the actions in the following paragraph. there is an*/
   /* assumption here that 'iip' status will mean that a size*/
   /* table line was added when vclstk01 lines were read.*/

  CL0ZW01.CL0ZWSIZ = CLNREC.SY5SZID;

   /* if size id description is already in size table*/
   /* and quality code and owner are the same as vrtsit01*/
   /* then increment rts and credit totals, and save*/
   /* quality and uom codes. increment count of*/
   /* rts lines.*/
   /* if the size id is not already in the table then no need*/
   /* to table up the data from vrtsit01. actually, the test is*/
   /* probably done only to establish the position of the size*/
   /* entry in the size table.*/
   /* if there are several clstk zone locations for*/
   /* a size-id, this will locate the first one,*/
   /* which will have cl0zpmry = 'p'.*/

  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim find cl0zw05*/
                                   /* match*/
    CL0ZW01.CL0ZW1SZ = SY4REC.SY4IDDSC[CL0ZWSIZ]; /* on both size*/
    CL0ZW01.CL0ZW1UM = CLNREC.XUMCD; /* and unit of measure*/
    if (CL0ZW01.CL0ZW1SU in CL0ZW05.CL0ZW5SU)
       /* next sentence*/
    else
      sysVar.arrayIndex = 0;
    end
  else
    if (SY4REC.SY4IDDSC[CL0ZWSIZ] in CL0ZW05.SY4IDDSC)
       /* next sentence*/
    else
      sysVar.arrayIndex = 0;
    end
  end

  if (sysVar.arrayIndex > 0) /* if the vrtsit01 size line was found*/
                                   /* in cl0zw05*/
    if (CLNREC.XQACD == CL0ZW05.XQACD[sysVar.arrayIndex]
     && CLNREC.XOWCD == CL0ZW05.XOWCD[sysVar.arrayIndex])

      CL0ZW01.CL0ZWTTL = CL0ZW01.CL0ZWTTL + CLNREC.CLNRTSQ;
      CL0ZW05.CLNNCRQ[sysVar.arrayIndex] = CL0ZW05.CLNNCRQ[sysVar.arrayIndex] + CLNREC.CLNNCRQ;
      CL0ZW05.YDRCD[sysVar.arrayIndex] = CLNREC.YDRCD;
      CL0ZW01.XQACD = CLNREC.XQACD;
      CL0ZW01.XEGCD = CLNREC.XEGCD;
      CL0ZW01.XBK-BK-SESN-CD = CLNREC.XBK-BK-SESN-CD;
      CL0ZW01.OP-BK-YR = CLNREC.OP-BK-YR;
      CL0ZW01.OP-BK-MO = CLNREC.OP-BK-MO;
       /* the following line of code bypassed because is was*/
       /* messing up the processing for sales sample returns*/
                /* -- gdecke - 11-13-90 --*/
      if (CL0ZW01.CL0ZWSAM == "Y")
        if (CLNREC.CLACLMNB == KL0ZM005.CLACLMNB)
          CL0ZW01.XUMCD = CLNREC.XUMCD;
        else
           /* next sentence*/
        end
      else
        CL0ZW01.XUMCD = CLNREC.XUMCD;
      end
      CL0ZW01.CL0ZWRCT = CL0ZW01.CL0ZWRCT + 1;
    end
  end


end // end KL0ZS57

// move clkrec item to size array
Function KL0ZS58()

  CLXREC.CLXCPROC = "CL0ZS58";

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS58"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CLKREC.SY5SZID == 0)
    return;
  end

   /* if inspection status is complete and there are no vclstk01*/
   /* or vrtsit01 lines then no need to show vraitm01 line.*/

  if (CL2REC.YCICD == "CMP"
   && CL0ZW01.CL0ZWQCT == 0
   && CL0ZW01.CL0ZWRCT == 0)
    return;
  end


   /* IF VRAITM01 DOES NOT HAVE THE SAME UNIT OF MEASURE OR*/
   /* QUALITY AS THE SELECTED DATA THEN NO NEED TO SHOW VRAITM01.*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    if (CLKREC.XUMCD == CL0ZW01.XUMCD
     && CLKREC.XQACD == CL0ZW01.XQACD)
      /* next sentence*/
    else
      if (CLKREC.XUMCD == CL0ZW01.CL0ZWSSU
       && CLKREC.XQACD == CL0ZW01.XQACD)
        /* next sentence*/
      else
        return;
      end
    end
  else
    if (CLKREC.XUMCD != CL0ZW01.XUMCD
     || CLKREC.XQACD != CL0ZW01.XQACD)
      return;
    end
  end

  CL0ZW01.CLKAUTHQ = CL0ZW01.CLKAUTHQ + CLKREC.CLKAUTHQ;

   /* if some data was loaded from vclstk01 but none for the size*/
   /* on the vraitm01 line then no need to display vraitm01.*/
   /* otherwise continue adding the vraitm01 to size table.*/

  if (CL0ZW06.SY5SZID[1] == 0) /* no sizes loaded from stock loc*/
    /* next sentence*/
  else
    if (CLKREC.SY5SZID in CL0ZW06.SY5SZID) /* if in current stock location*/
      /* next sentence*/
    else
      return;
    end
  end

   /* add vraitm01 authorized quantity to the corresponding*/
   /* authorized quantity field in cl0zw05 size table.*/
   /* and exit the routine immediately afterwards.*/

  CL0ZW01.CL0ZWSIZ = CLKREC.SY5SZID;

   /* if size id description is already in the size table*/
   /* just add the authorized quantity to the table and*/
   /* return to cl0zs45. if there are several clstk zone/loc's*/
   /* for the size-id this will locate the first one which will*/
   /* have cl0zpmry set to 'p'.*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW01.CL0ZW1SZ = SY4REC.SY4IDDSC[CL0ZWSIZ];
    CL0ZW01.CL0ZW1UM = CLKREC.XUMCD;
    if (CL0ZW01.CL0ZW1SU in CL0ZW05.CL0ZW5SU)
      CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] = CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] + CLKREC.CLKAUTHQ;
      return;
    end
  else
    if (SY4REC.SY4IDDSC[CL0ZWSIZ] in CL0ZW05.SY4IDDSC)
      CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] = CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] + CLKREC.CLKAUTHQ;
      return;
    end
  end

   /* if the size/zone/location is not already in the cl0zw05*/
   /* table, then increment the index and add the vraitm01*/
   /* data to the new line.*/

  CLXREC.CLXITMX = CLXREC.CLXITMX + 1; /* array index*/

  if (CLXREC.CLXITMX > CL0ZW01.CL0ZWSXM) /* if array full?*/
    converseLib.validationFailed(251); /* maximum data selected*/
    CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
    CLXREC.CLXITMX = CL0ZW01.CL0ZWSXM;
    return;
  end

   /* add vraitm01 data for a new size to size table*/

  CL0ZW05.SY4IDDSC[CLXITMX] = SY4REC.SY4IDDSC[CL0ZWSIZ];
  CL0ZW05.SY5SZID[CLXITMX] = CLKREC.SY5SZID;
  CL0ZW05.XUMCD[CLXITMX] = CLKREC.XUMCD;
  CL0ZW05.CLKAUTHQ[CLXITMX] = CLKREC.CLKAUTHQ;
  CL0ZW05.CL0ZWSTQ[CLXITMX] = 0; /* set stk loc cr qty to 0*/

end // end KL0ZS58

// find price
Function KL0ZS59()
      /* KL0ZS59*/
   /* ------------------------------------------------------------**/
   /* FIND PRODUCT PRICES                                         **/
   /* ------------------------------------------------------------**/
   /* M A I N T E N A N C E     H I S T O R Y     L O G        **/
   /* ------------------------------------------------------------**/
   /* DATE    PGMR    DESCRIPTION                               **/
   /* ------------------------------------------------------------**/
   /* 06-14-90  CHELLM  Added CLKPRCFF price from flag to clnrec. **/
   /* 10-04-90  CHELLM  Added XUMCD and XQACD to CLKREC key.      **/
   /* 09/18/91  GDECKE  MODIFY LOGIC FOR GETTING COST FILE PRICES **/
   /* 03/13/92  GDECKE  MARCH DB2 TABLE CHANGES                   **/
   /* 04/13/92  TWATSO  APRIL DB2 TABLE CHANGES - ADD OP-BK-MO    **/
   /* 07/17/01  DSINHA  Default the price to zero.*/
   /* ------------------------------------------------------------**/

   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0ZS59";

  CL0ZW01.CL0ZWPRI = 0;
  CL0ZW01.CLKCRFL = " ";
  CL0ZW01.CLKPRCFF = " ";

  if (CLXREC.CLXLSTSZ > 0)
    set CLKREC empty;
    CLKREC.CLACLMNB = CLAREC.CLACLMNB;
    CLKREC.IV0IVCID = CLAREC.IV0IVCID; /* primary invoice*/
    CLKREC.XGPCD = CL0ZW01.XGPCD;
    CLKREC.SY1STNBR = CL0ZW01.SY1STNBR;
    CLKREC.SY2CLRID = CL0ZW01.SY2CLRID;
    CLKREC.XDMCD = CL0ZW01.XDMCD;
    CLKREC.XUMCD = CL0ZW01.XUMCD; /* 10-04-90*/
    CLKREC.XQACD = CL0ZW01.XQACD; /* 10-04-90*/
    CLKREC.XEGCD = CL0ZW01.XEGCD; /* 03-13-92*/
    CLKREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD; /* 03-13-92*/
    CLKREC.OP-BK-YR = CL0ZW01.OP-BK-YR; /* 03-13-92*/
    CLKREC.OP-BK-MO = CL0ZW01.OP-BK-MO; /* 04-13-92*/
     /* 072089 note that 'NC' auth item may have invc NE prmy ivc*/
       /* thus will not find price, so see below for ivc=-1*/
    CLKREC.CLKCRFL = "*"; /* 072089 add*/
    CL0ZW01.CL0ZWPRI = 0;
    CL0ZW01.CLKCRFL = " ";

    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS11(); /* set up cursor clkrec*/
    end

    CL0ZW01.CL0ZWEND = "N";

    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS60(); /* select next clkrec*/
    end

    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

    if (CL0ZW01.CL0ZWPRI > 0
     || CL0ZW01.CLKCRFL == "N")
      return;
    end

     /* did not find price for pmy invc, so try all invcs*/

    set CLKREC empty;
    CLKREC.CLACLMNB = CLAREC.CLACLMNB;
    CLKREC.IV0IVCID = -1; /* secondary invoice*/
    CLKREC.XGPCD = CL0ZW01.XGPCD;
    CLKREC.SY1STNBR = CL0ZW01.SY1STNBR;
    CLKREC.SY2CLRID = CL0ZW01.SY2CLRID;
    CLKREC.XDMCD = CL0ZW01.XDMCD;
    CLKREC.CLKCRFL = "*"; /* 072089 add*/

    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "Y";

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS11(); /* set up cursor clkrec*/
    end

    CL0ZW01.CL0ZWEND = "N";

    while (CL0ZW01.CL0ZWEND == "N")
      KL0ZS60(); /* select next clkrec*/
    end

    call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  end

  if (CL0ZW01.CL0ZWPRI > 0
   || CL0ZW01.CLKCRFL == "N")
    return;
  end

   /* if still don't have price, get PRICE FROM:*/
    /* FROM THE PRICE TABLE WHEN COST/PRICE INDIC = 'P'*/
      /* OR*/
    /* FROM THE COST TABLE WHEN COST/PRICE INDIC = 'C'*/
   /* ( FROM DINVC.VSPECL01 TABLE - IVEREC )*/

   /* ** TCS Change begin - 07/17/01  Default price to zero*/

  CL0ZW01.CL0ZWPRI = 0; /* Default price to zero*/

   /* IF IVEREC.IVEPCIND EQ 'P';       /* USE PRODUCT TABLE PRICES*/
   /* KL0ZS0P;*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';     /* USE COST TABLE PRICES*/
   /* KL0ZS0C;*/
   /* ELSE;*/
   /* ; /* NOTE: IVEPCIND MAY BE BLANK, IF IVEREC NOT FOUND IN CL0Z016*/
   /* KL0ZS0P;*/
   /* END;*/
   /* END;*/
   /* ** TCS Change end - 07/17/01*/
end // end KL0ZS59

// Select set of CLLREC's
Function KL0ZS5A()

  CLXREC.CLXCPROC = "CL0ZS5A"; /* set current proc name*/

  KL0ZM001.CLLNBRCV = 0; /* zero screen field*/
  set CLLREC empty;
  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = -1;
  call "IO1310" ("SS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO1310" ("SN", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* Include only inspected cartons*/
      if (CLLREC.CLLRTDSP == "INSP") /* (CL586e CWH 6-27-89)*/
        KL0ZM001.CLLNBRCV = KL0ZM001.CLLNBRCV + CLLREC.CLLNBRCV;
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1310" ("CS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0ZS5A

// Select set of CLLREC's
Function KL0ZS5B()

  CLXREC.CLXCPROC = "CL0ZS5B"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = -1;
  call "IO1310" ("SS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && CLLREC.XWHCD == "  ")
    call "IO1310" ("SN", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* Include only inspected cartons*/
      if (CLLREC.CLLRTDSP == "INSP") /* (CL586e CWH 6-27-89)*/
         /* next sentence*/
      else
        CLLREC.XWHCD = "  ";
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1310" ("CS", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM"; /* database*/
    TA1REC.TA1TBLVU = "VCLRTN01"; /* table view*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
    XPCL010(); /* error diagnosis routine*/
  end

end // end KL0ZS5B

// add sales sample dtl defaults
Function KL0ZS5C()
   /* add sales sample detail defaults to location and palet*/
   /* number, and default line 2 from line 1 if line 2 has the*/
   /* other unit of measure but quantity not entered.*/

  CLXREC.CLXCPROC = "CL0ZS5C"; /* set current proc name*/

  if (KL0ZM005.CL0ZMXUM[1] != "  ")
    if (KL0ZM005.CLNRTSQ[1] != 0)
      if (KL0ZM005.SL8LCCD1[1] == "      "
       && KL0ZM005.SL2PALET[1] == "     ")
        KL0ZM005.SL8LCCD1[1] = "400000";
        KL0ZM005.SL2PALET[1] = "   69";
      end
      if (KL0ZM005.CL0ZMXUM[2] != "  "
       && KL0ZM005.CL0ZMXUM[1] != KL0ZM005.CL0ZMXUM[2])
        if (KL0ZM005.CLNRTSQ[2] == 0)
          KL0ZM005.CLNRTSQ[2] = KL0ZM005.CLNRTSQ[1];
          CL0ZW01.CL0ZWUPD[2] = "Y";
          CL0ZW01.CL0ZWUQR[2] = "Y";
        end
        if (KL0ZM005.SL8LCCD1[2] == "      "
         && KL0ZM005.SL2PALET[2] == "     ")
          KL0ZM005.SL8LCCD1[2] = KL0ZM005.SL8LCCD1[1];
          KL0ZM005.SL2PALET[2] = KL0ZM005.SL2PALET[1];
          CL0ZW01.CL0ZWUPD[2] = "Y";
        end
      end
    else
      if (KL0ZM005.CL0ZMXUM[2] != "  "
       && KL0ZM005.CL0ZMXUM[1] != KL0ZM005.CL0ZMXUM[2]
       && KL0ZM005.CLNNCRQ[1] != 0 /* no credit code and quantity*/
       && KL0ZM005.YDRCD[2] == "  "
       && KL0ZM005.CLNNCRQ[2] == 0 
       && KL0ZM005.CLNRTSQ[1] == 0 
       && KL0ZM005.CLNRTSQ[2] == 0)
        if (KL0ZM005.YDRCD[1] == "14")
                                   /* find default for second line*/
          KL0ZM005.YDRCD[2] = "16";
          KL0ZM005.CLNNCRQ[2] = KL0ZM005.CLNNCRQ[1];
          CL0ZW01.CL0ZWUPD[2] = "Y";
        end
        if (KL0ZM005.YDRCD[1] == "16")
                                   /* find default for second line*/
          KL0ZM005.YDRCD[2] = "14";
          KL0ZM005.CLNNCRQ[2] = KL0ZM005.CLNNCRQ[1];
          CL0ZW01.CL0ZWUPD[2] = "Y";
        end
      end
    end
  end

end // end KL0ZS5C

// find price from clkrec
Function KL0ZS60()

    /* Maintenance History:*/
    /* 06-14-90 CHELLM Added CLKPRCFF price from flag to update*/
                    /* of CLNREC.*/

   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0ZS60";

  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWEND = "Y"; /* end of data*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS60"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  if (CLKREC.SY5SZID == 0)
    CL0ZW01.CLKCRFL = CLKREC.CLKCRFL;
    if (CLKREC.CLKCRFL == "N")
      CL0ZW01.CL0ZWPRI = 0;
      CL0ZW01.CLKPRCFF = CLKREC.CLKPRCFF; /* added 06-14-90*/
      return;
    end
  end

  if (CLKREC.SY5SZID == 0
   && CL0ZW01.CL0ZWPRI == 0)
    CL0ZW01.CL0ZWPRI = CLKREC.CLKCLPRC;
    CL0ZW01.CLKPRCFF = CLKREC.CLKPRCFF; /* added 06-14-90*/
    if (CLKREC.XUMCD != "01"
     && KL0ZM005.XUMCD == "01")
      if (CLKREC.XUMCD in XUMTBL.XUMCD)
        CL0ZW01.CL0ZWPRI = CL0ZW01.CL0ZWPRI / XUMTBL.XUMCONVF[sysVar.arrayIndex];
      end
    end
    return;
  end

  if (CLKREC.SY5SZID in CL0ZW05.SY5SZID)
    if (CL0ZW05.CLKCLPRC[sysVar.arrayIndex] == 0)
      CL0ZW05.CLKCLPRC[sysVar.arrayIndex] = CLKREC.CLKCLPRC;
      CL0ZW01.CL0ZWHST = sysVar.arrayIndex;
      if (CLKREC.XUMCD != "01"
       && KL0ZM005.XUMCD == "01")
        if (CLKREC.XUMCD in XUMTBL.XUMCD)
          CL0ZW01.CL0ZWHPC = CL0ZW05.CLKCLPRC[CL0ZWHST];
          CL0ZW01.CL0ZWHPC = CL0ZW01.CL0ZWHPC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
          CL0ZW05.CLKCLPRC[CL0ZWHST] = CL0ZW01.CL0ZWHPC;
        end
      end
    end
  end

end // end KL0ZS60

// sort size array
Function KL0ZS62()

  CLXREC.CLXCPROC = "CL0ZS62";

  CL0ZW01.CL0ZWSCT = 0; /* initialize sort count*/
  CL0ZW01.CL0ZWIX1 = 1; /* initialize index1*/
  CL0ZW01.CL0ZWIX2 = 2; /* initialize index2*/

  while (CL0ZW01.CL0ZWIX2 <= CLXREC.CLXLSTSZ) /* last array index*/

    if (CL0ZW05.CL0ZW5SK[CL0ZWIX1] > CL0ZW05.CL0ZW5SK[CL0ZWIX2])
      CL0ZW01.CL0ZW5GP = CL0ZW05.CL0ZW5GP[CL0ZWIX1];
      CL0ZW05.CL0ZW5GP[CL0ZWIX1] = CL0ZW05.CL0ZW5GP[CL0ZWIX2];
      CL0ZW05.CL0ZW5GP[CL0ZWIX2] = CL0ZW01.CL0ZW5GP;
      CL0ZW01.CL0ZWSCT = CL0ZW01.CL0ZWSCT + 1;
    end

    CL0ZW01.CL0ZWIX1 = CL0ZW01.CL0ZWIX1 + 1; /* first index*/
    CL0ZW01.CL0ZWIX2 = CL0ZW01.CL0ZWIX2 + 1; /* second index*/
  end

end // end KL0ZS62

// check if more locations
Function KL0ZS63()
      /* KL0ZS63   --   CHECK IF MORE LOCATIONS*/

   /* *****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G        **/
   /* *--------------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                              **/
   /* *--------------------------------------------------------------**/
   /* * 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES.                 **/
   /* * 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES.                 **/
   /* *****************************************************************/


  CLXREC.CLXCPROC = "CL0ZS63";

  CL0ZW01.SL8ZNCD2 = " ";
  CL0ZW01.SL8LCCD2 = " ";
  CL0ZW01.XARCD2 = " ";
  CL0ZW01.CL0ZWIYX = 1;
  CL0ZW01.CL0ZWEND = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    if (CL0ZW06.SL8ZNCD2[CL0ZWIYX] != " "
     || CL0ZW06.SL8LCCD2[CL0ZWIYX] != " "
     || CL0ZW06.XARCD2[CL0ZWIYX] != " "
     || CL0ZW06.XQACD[CL0ZWIYX] != " "
     || CL0ZW06.XOWCD[CL0ZWIYX] != " "
     || CL0ZW06.XPGCD[CL0ZWIYX] != " ")
      CL0ZW01.CL0ZWNXT = "Y";
      CL0ZW01.CL0ZWEND = "Y";
    else
      CL0ZW01.CL0ZWIYX = CL0ZW01.CL0ZWIYX + 1;
      if (CL0ZW01.CL0ZWIYX > CL0ZW01.CL0ZWSXM)
        CL0ZW01.CL0ZWEND = "Y";
      end
    end
  end

  if (CL0ZW01.CL0ZWNXT == "Y")
    CL0ZW01.SL8ZNCD2 = CL0ZW06.SL8ZNCD2[CL0ZWIYX];
    CL0ZW01.SL8LCCD2 = CL0ZW06.SL8LCCD2[CL0ZWIYX];
    CL0ZW01.XARCD2 = CL0ZW06.XARCD2[CL0ZWIYX];
    CL0ZW01.XQACD = CL0ZW06.XQACD[CL0ZWIYX];
    CL0ZW01.XEGCD = CL0ZW06.XEGCD[CL0ZWIYX];
    CL0ZW01.XBK-BK-SESN-CD = CL0ZW06.XBK-BK-SESN-CD[CL0ZWIYX];
    CL0ZW01.OP-BK-YR = CL0ZW06.OP-BK-YR[CL0ZWIYX];
    CL0ZW01.OP-BK-MO = CL0ZW06.OP-BK-MO[CL0ZWIYX];
    CL0ZW01.XOWCD = CL0ZW06.XOWCD[CL0ZWIYX];
    CL0ZW01.XPGCD = CL0ZW06.XPGCD[CL0ZWIYX];
    CL0ZW06.SL8ZNCD2[CL0ZWIYX] = " ";
    CL0ZW06.SL8LCCD2[CL0ZWIYX] = " ";
    CL0ZW06.XARCD2[CL0ZWIYX] = " ";
    CL0ZW06.XQACD[CL0ZWIYX] = " ";
    CL0ZW06.XEGCD[CL0ZWIYX] = "000";
    CL0ZW06.XBK-BK-SESN-CD[CL0ZWIYX] = " ";
    CL0ZW06.OP-BK-YR[CL0ZWIYX] = 0;
    CL0ZW06.OP-BK-MO[CL0ZWIYX] = 0;
    CL0ZW06.XOWCD[CL0ZWIYX] = " ";
    CL0ZW06.XPGCD[CL0ZWIYX] = " ";
    KL0ZM005.CL0ZMSZL = " ";
    KL0ZM005.CL0ZMSZH = " ";
    CLXREC.CLXBLDAY = "Y";
    CLXREC.CLXBLDSC = "Y";
  end

end // end KL0ZS63

// move data from array to map
Function KL0ZS64()


   /* *************************************************************/
   /* *    This process move the data from the array to the      **/
   /* *    screen (cl0zm005).                                    **/
   /* *************************************************************/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *  04-12-90  SGORGA                                        **/
   /* *  Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg. **/
   /* *  Changed cl0zw05.xsdcd field name to cl0zw05.pc2inseg.   **/
   /* *                                                          **/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS64";

  KL0ZM005.CLKAUTHQ = CL0ZW01.CLKAUTHQ;

  set KL0ZM005.SY1STNBR initialAttributes;
  set KL0ZM005.SY2CLRID initialAttributes;
  set KL0ZM005.XDMCD initialAttributes;
  set KL0ZM005.XPGCD initialAttributes;
  set KL0ZM005.XQACD initialAttributes;
  set KL0ZM005.XUMCD initialAttributes;

  CLXREC.CLXLINEX = 1; /* initialize*/

  while (CLXREC.CLXLINEX <= CL0ZW01.CL0ZWMLN)
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
    KL0ZM005.CL0ZMDEF[CLXLINEX] = " ";
    KL0ZM005.CL0ZMDLT[CLXLINEX] = " ";
    CL0ZW01.CL0ZWUPD[CLXLINEX] = " ";
    set KL0ZM005.CL0ZMDEF[CLXLINEX] initialAttributes;
    set KL0ZM005.CL0ZMDLT[CLXLINEX] initialAttributes;
    set KL0ZM005.CLNRTSQ[CLXLINEX] initialAttributes;
    set KL0ZM005.CL0ZWCSQ[CLXLINEX] initialAttributes;
    set KL0ZM005.CLKAUTHQ[CLXLINEX] initialAttributes;
    set KL0ZM005.YDRCD[CLXLINEX] initialAttributes;
    set KL0ZM005.CLNNCRQ[CLXLINEX] initialAttributes;
    set KL0ZM005.SL8ZNCD1[CLXLINEX] initialAttributes;
    set KL0ZM005.SL8LCCD1[CLXLINEX] initialAttributes;
    set KL0ZM005.SL2PALET[CLXLINEX] initialAttributes;
    set KL0ZM005.PC2INSEG[CLXLINEX] initialAttributes;
    set KL0ZM005.XSLCD[CLXLINEX] initialAttributes;
    KL0ZM005.SY4IDDSC[CLXLINEX] = CL0ZW05.SY4IDDSC[CLXITMX];
    CL0ZW01.SY5SZID[CLXLINEX] = CL0ZW05.SY5SZID[CLXITMX];
    if (CL0ZW01.CL0ZWSAM == "Y")
      KL0ZM005.CL0ZMXUM[CLXLINEX] = CL0ZW05.XUMCD[CLXITMX];
    end
    if (KL0ZM005.SY4IDDSC[CLXLINEX] != " ")
      set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
    else
      set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
    end

    KL0ZM005.CLNRTSQ[CLXLINEX] = CL0ZW05.CLNRTSQ[CLXITMX];
    CL0ZW01.CL0ZWRTS[CLXLINEX] = CL0ZW05.CLNRTSQ[CLXITMX];
    KL0ZM005.SL8ZNCD1[CLXLINEX] = CL0ZW05.SL8ZNCD1[CLXITMX];
    KL0ZM005.SL8LCCD1[CLXLINEX] = CL0ZW05.SL8LCCD1[CLXITMX];
    KL0ZM005.SL2PALET[CLXLINEX] = CL0ZW05.SL2PALET[CLXITMX];
    KL0ZM005.CLKAUTHQ[CLXLINEX] = CL0ZW05.CLKAUTHQ[CLXITMX];
    KL0ZM005.YDRCD[CLXLINEX] = CL0ZW05.YDRCD[CLXITMX];
    KL0ZM005.CLNNCRQ[CLXLINEX] = CL0ZW05.CLNNCRQ[CLXITMX];
    KL0ZM005.PC2INSEG[CLXLINEX] = CL0ZW05.PC2INSEG[CLXITMX];
    KL0ZM005.XSLCD[CLXLINEX] = CL0ZW05.XSLCD[CLXITMX];
    CL0ZW01.CLKCLPRC[CLXLINEX] = CL0ZW05.CLKCLPRC[CLXITMX];
    CL0ZW01.CL0ZWSEQ[CLXLINEX] = CL0ZW05.CL0ZWSEQ[CLXITMX];

     /* if the size table data is from a second or later*/
     /* zone/loc for a size then autoskip the fields to the*/
     /* right of pallet nbr to prevent user entering data.*/
     /* user data should be entered on the first zone/loc*/
     /* for a size.*/

    if (CL0ZW05.CL0ZWPMY[CLXITMX] == " "
     && CL0ZW05.SL8LCCD1[CLXITMX] != "      ")
      set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip;
      set KL0ZM005.CLKAUTHQ[CLXLINEX] skip;
      set KL0ZM005.YDRCD[CLXLINEX] skip;
      set KL0ZM005.CLNNCRQ[CLXLINEX] skip;
      set KL0ZM005.PC2INSEG[CLXLINEX] skip;
      set KL0ZM005.XSLCD[CLXLINEX] skip;
      set KL0ZM005.CL0ZMDEF[CLXLINEX] skip;
    end

     /* if the size table data contains zone/loc data from*/
     /* vclstk01 line then show quantity from cl0zwstq*/
     /* instead of cl0zcsq.*/

    if (CL0ZW05.SL8LCCD1[CLXITMX] != "      ")
      KL0ZM005.CL0ZWCSQ[CLXLINEX] = CL0ZW05.CL0ZWSTQ[CLXITMX];
    else
      KL0ZM005.CL0ZWCSQ[CLXLINEX] = CL0ZW05.CL0ZWCSQ[CLXITMX];
    end

    if (KL0ZM005.CLNRTSQ[CLXLINEX] > 0  /* turn 'add' switch on if any*/
     || KL0ZM005.CL0ZWCSQ[CLXLINEX] > 0 /* non zero quantities or*/
     || KL0ZM005.CLNNCRQ[CLXLINEX] > 0  /* nonblank ydrcd exists.*/
     || KL0ZM005.YDRCD[CLXLINEX] != " ")
      CL0ZW01.CL0ZWASW[CLXLINEX] = " ";
    else
      CL0ZW01.CL0ZWASW[CLXLINEX] = "A";
    end

    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  KL0ZS23(); /* check security*/

  if (CL0ZW01.CL0ZWUDF != "Y" /* updating not allowed*/
   || CL0ZW01.CL0ZWUPP == "Y") /* partial updating only*/
    set KL0ZM005.SY1STNBR skip;
    set KL0ZM005.SY2CLRID skip;
    set KL0ZM005.XDMCD skip;
    set KL0ZM005.XOWCD skip;
    set KL0ZM005.XPGCD skip;
    set KL0ZM005.XQACD skip;
    set KL0ZM005.XUMCD skip;
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      if (KL0ZM005.SY4IDDSC[CLXLINEX] != " ")
        set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
        set KL0ZM005.CL0ZMDEF[CLXLINEX] skip;
        set KL0ZM005.CL0ZMDLT[CLXLINEX] skip;
        set KL0ZM005.CLNRTSQ[CLXLINEX] skip;
        set KL0ZM005.SL8ZNCD1[CLXLINEX] skip;
        set KL0ZM005.SL8LCCD1[CLXLINEX] skip;
        set KL0ZM005.SL2PALET[CLXLINEX] skip;
        set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip;
        set KL0ZM005.CLKAUTHQ[CLXLINEX] skip;
        set KL0ZM005.YDRCD[CLXLINEX] skip;
        set KL0ZM005.CLNNCRQ[CLXLINEX] skip;
        set KL0ZM005.PC2INSEG[CLXLINEX] skip;
        set KL0ZM005.XSLCD[CLXLINEX] skip;
        if (CL0ZW01.CL0ZWSAM == "Y")
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip;
        else
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        end
      else
        set KL0ZM005.SY4IDDSC[CLXLINEX] skip, invisible;
        set KL0ZM005.CL0ZMDEF[CLXLINEX] skip, invisible;
        set KL0ZM005.CL0ZMDLT[CLXLINEX] skip, invisible;
        set KL0ZM005.CLNRTSQ[CLXLINEX] skip, invisible;
        set KL0ZM005.SL8ZNCD1[CLXLINEX] skip, invisible;
        set KL0ZM005.SL8LCCD1[CLXLINEX] skip, invisible;
        set KL0ZM005.SL2PALET[CLXLINEX] skip, invisible;
        set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip, invisible;
        set KL0ZM005.CLKAUTHQ[CLXLINEX] skip, invisible;
        set KL0ZM005.YDRCD[CLXLINEX] skip, invisible;
        set KL0ZM005.CLNNCRQ[CLXLINEX] skip, invisible;
        set KL0ZM005.PC2INSEG[CLXLINEX] skip, invisible;
        set KL0ZM005.XSLCD[CLXLINEX] skip, invisible;
        if (CL0ZW01.CL0ZWSAM == "Y")
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        else
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end

end // end KL0ZS64

// edit product number
Function KL0ZS65()
   /* *************************************************************/
               /* edit product id*/


    /* Maintenance History:*/
    /* 05-31-90 CHELLM Added cl0zs6b which edits for a product*/
                    /* brand - claim brand code mis-match.*/

   /* *************************************************************/


  CLXREC.CLXCPROC = "CL0ZS65";

  set CL0ZW06 empty;
  set SY2REC empty;

  if (KL0ZM005.SY2CLRID == " ")
    KL0ZM005.SY2CLRID = "00 ";
  end

  if (KL0ZM005.XDMCD == " ")
    KL0ZM005.XDMCD = "00";
  end

  SY2REC.XGPCD = CL0ZW01.XGPCD; /* gpc code*/
  SY2REC.SY1STNBR = KL0ZM005.SY1STNBR; /* style number*/
  SY2REC.SY2CLRID = KL0ZM005.SY2CLRID; /* color*/
  SY2REC.XDMCD = KL0ZM005.XDMCD; /* dimension*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS66(); /* select color*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  set SY1REC empty;
  SY1REC.XGPCD = CL0ZW01.XGPCD; /* gpc code*/
  SY1REC.SY1STNBR = KL0ZM005.SY1STNBR; /* style number*/

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS47(); /* select style*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CLXREC.CLXERRF == "Y") /* error detected*/
    return;
  end

                  /* edit product brand code  (05-31-90)*/
  KL0ZS6B();

  if (CLXREC.CLXERRF == "Y") /* error detected*/
    return;
  end

  CL0ZW01.SY1STNBR = KL0ZM005.SY1STNBR;
  CL0ZW01.SY2CLRID = KL0ZM005.SY2CLRID;
  CL0ZW01.XDMCD = KL0ZM005.XDMCD;

  if (KL0ZM005.XOWCD == " ")
    KL0ZM005.XOWCD = "00";
  end

  if (KL0ZM005.XPGCD == " ")
    KL0ZM005.XPGCD = "00";
  end

   /* ************************************************************/
                  /* edit quality code*/

  if (KL0ZM005.XQACD is modified)
    if (KL0ZM005.XQACD in XQATBL.XQACD)
      if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (KL0ZM005.XQACD == "01"
         || KL0ZM005.XQACD == "02")
          set KL0ZM005.XQACD initialAttributes;
          CL0ZW01.XQACD = KL0ZM005.XQACD;
        else
          set KL0ZM005.XQACD cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(468);
        end
      else
        set KL0ZM005.XQACD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(468);
      end
    else
      set KL0ZM005.XQACD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(468);
    end
  end

   /* ************************************************************/
                  /* edit promo owner group*/

  if (KL0ZM005.XOWCD is modified
   || CL0ZW01.CL0ZWOFL == "Y")
    CL0ZW01.CL0ZWPOG = KL0ZM005.XOWCD;
    if (KL0ZM005.XOWCD == "00")
      if (CL0ZW01.XWHCD in XWHTBL.XWHCD)
        if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
          CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
        else
          CL0ZW01.CL0ZWWHS = "00";
        end
      end
    else
      CL0ZW01.CL0ZWWHS = CL0ZW01.XWHCD;
    end
    if (CL0ZW01.XOWKEY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KL0ZM005.XOWCD initialAttributes;
        CL0ZW01.CL0ZWOFL = "N";
        CL0ZW01.XOWCD = KL0ZM005.XOWCD;
      else
        set KL0ZM005.XOWCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(471);
      end
    else
      set KL0ZM005.XOWCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(471);
    end
  end

   /* ************************************************************/
                  /* edit package type*/

  if (KL0ZM005.XPGCD is modified)
    if (KL0ZM005.XPGCD in XPGTBL.XPGCD)
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KL0ZM005.XPGCD initialAttributes;
        CL0ZW01.XPGCD = KL0ZM005.XPGCD;
      else
        set KL0ZM005.XPGCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(472);
      end
    else
      set KL0ZM005.XPGCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(472);
    end
  end

   /* ************************************************************/
                  /* edit unit of measure*/

  if (KL0ZM005.XUMCD is modified)
    if (KL0ZM005.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KL0ZM005.XUMCD initialAttributes;
        CL0ZW01.XUMCD = KL0ZM005.XUMCD;
      else
        set KL0ZM005.XUMCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(409);
      end
    else
      set KL0ZM005.XUMCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(409);
    end
  end

  if (CLXREC.CLXERRF != "Y")
    CLXREC.CLXBLDAY = "Y";
    CLXREC.CLXBLDSC = "Y";
    CL0ZW01.CL0ZWNXT = "N";
    KL0ZM005.SL8ZNCD2 = " ";
    KL0ZM005.SL8LCCD2 = " ";
    KL0ZM005.XARCD2 = " ";
    CL0ZW01.SL8ZNCD2 = " ";
    CL0ZW01.SL8LCCD2 = " ";
    CL0ZW01.XARCD2 = " ";
    if (KL0ZM005.CL0ZMSZL is modified)
      /* next sentence*/
    else
      KL0ZM005.CL0ZMSZL = " ";
    end
    if (KL0ZM005.CL0ZMSZH is modified)
      /* next sentence*/
    else
      KL0ZM005.CL0ZMSZH = " ";
    end
  else
    CLXREC.CLXBLDAY = "N";
    CLXREC.CLXBLDSC = "N";
  end

     /* retrieve sy4rec*/

  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS48(); /* select sy4rec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  if (CL0ZW01.CL0ZWKEY in CL0ZW02.CL0ZWKEY)
    KL0ZM005.CL0ZMATH = CL0ZW02.CLKAUTHQ[sysVar.arrayIndex];
  else
    KL0ZM005.CL0ZMATH = 0;
  end

end // end KL0ZS65

// select unique sy2rec (color)
Function KL0ZS66()

  CLXREC.CLXCPROC = "CL0ZS66"; /* set current proc name*/

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    set KL0ZM005.XDMCD initialAttributes;
    set KL0ZM005.SY2CLRID initialAttributes;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(37);
    set KL0ZM005.XDMCD modified, bold;
    set KL0ZM005.SY2CLRID cursor, modified, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS66"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
  TA1REC.TA1DBASE = "DPROD "; /* database*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS66

// edit size description
Function KL0ZS67()
   /* ***********************************************************/
   /* MAINTENANCE HISTORY                                     **/
   /* 04-12-90  SGORGA                                        **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg. **/
                                  /* **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "CL0ZS67";


  if (KL0ZM005.SY4IDDSC[CLXLINEX] == " ")
    if (KL0ZM005.CLNRTSQ[CLXLINEX] != 0
     || KL0ZM005.SL8LCCD1[CLXLINEX] != " "
     || KL0ZM005.SL2PALET[CLXLINEX] != " "
     || KL0ZM005.YDRCD[CLXLINEX] != " "
     || KL0ZM005.CLNNCRQ[CLXLINEX] != 0
     || KL0ZM005.PC2INSEG[CLXLINEX] != " "
     || KL0ZM005.XSLCD[CLXLINEX] != " ")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(476);
      set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
      return;
    else
      set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
    end
  end

  if (KL0ZM005.SY4IDDSC[CLXLINEX] is modified)
    set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;

    if (KL0ZM005.SY4IDDSC[CLXLINEX] == " "
     && KL0ZM005.CLNRTSQ[CLXLINEX] == 0
     && KL0ZM005.SL8LCCD1[CLXLINEX] == " "
     && KL0ZM005.SL2PALET[CLXLINEX] == " "
     && KL0ZM005.YDRCD[CLXLINEX] == " "
     && KL0ZM005.CLNNCRQ[CLXLINEX] == 0
     && KL0ZM005.PC2INSEG[CLXLINEX] == " "
     && KL0ZM005.XSLCD[CLXLINEX] == " ")
      KL0ZM005.SL8ZNCD1[CLXLINEX] = " ";
      CL0ZW01.CL0ZWUPD[CLXLINEX] = " ";
      CL0ZW01.CL0ZWUQR[CLXLINEX] = " ";
      KL0ZM005.CL0ZMDEF[CLXLINEX] = " ";
      KL0ZM005.CL0ZMDLT[CLXLINEX] = " ";
      CL0ZW01.CL0ZWSEQ[CLXLINEX] = 0;
      KL0ZM005.CL0ZWCSQ[CLXLINEX] = 0;
      set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
      return;
    end

    if (KL0ZM005.SY4IDDSC[CLXLINEX] != " "
     && KL0ZM005.CLNRTSQ[CLXLINEX] == 0
     && KL0ZM005.SL8LCCD1[CLXLINEX] == " "
     && KL0ZM005.SL2PALET[CLXLINEX] == " "
     && KL0ZM005.CL0ZWCSQ[CLXLINEX] == 0
     && KL0ZM005.YDRCD[CLXLINEX] == " "
     && KL0ZM005.CLNNCRQ[CLXLINEX] == 0
     && KL0ZM005.PC2INSEG[CLXLINEX] == " "
     && KL0ZM005.XSLCD[CLXLINEX] == " ")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(548);
      set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
      return;
    end

    CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
    set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
    if (KL0ZM005.SY4IDDSC[CLXLINEX] in SY4REC.SY4IDDSC)
      if (SY3REC.XDVCD[sysVar.arrayIndex] != " "
       || CL0ZW01.CL0ZWOWH == "Y") /* one whse model*/
        CL0ZW01.SY5SZID[CLXLINEX] = sysVar.arrayIndex;

             /* IF CL0ZM005.SY4IDDSC(CLXLINEX) IN CL0ZW05.SY4IDDSC;*/
        /* AND CL0ZM005.SL8ZNCD1(CLXLINEX) = CL0ZW05.SL8ZNCD1(EZETST);*/
        /* AND CL0ZM005.SL8LCCD1(CLXLINEX) = CL0ZW05.SL8LCCD1(EZETST);*/
               /* MOVE 473 TO EZEMNO;*/
               /* MOVE 'Y' TO CLXREC.CLXERRF;*/
         /* SET CL0ZM005.SY4IDDSC(CLXLINEX) CURSOR,MODIFIED,BRIGHT;*/
               /* EZERTN;*/
             /* END ;*/
             /* ;*/
             /* CL0ZS33                   ; select unique clqrec*/
             /* ;*/
             /* IF SQLCA.SQLCODE EQ 0;*/
         /* MOVE 473 TO EZEMNO      ; duplicate size in vclstk01 tbl*/
               /* MOVE 'Y' TO CLXREC.CLXERRF;*/
         /* SET CL0ZM005.SY4IDDSC(CLXLINEX) CURSOR,MODIFIED,BRIGHT;*/
               /* EZERTN;*/
             /* END ;*/


         /* add whse 51 to bypass stock locate 3/29/99*/
        if (KL0ZM005.XWHCD == "70"
         || KL0ZM005.XWHCD == "72"
         || KL0ZM005.XWHCD == "51")
          set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
          CL0ZW01.CL0ZWCNT = CL0ZW01.CL0ZWCNT + 1;
          CL0ZW01.CL0ZWAPD = "A";
          if (CL0ZW01.CL0ZWSEQ[CLXLINEX] == 0)
            KL0ZS71(); /* select clkrec*/
          end
          return;
        end /* END EQUIPMENT 70 & 72*/

        KL0ZS69(); /* check stock locate*/
        if (CL0ZW01.CL0ZWEDT == "Y")
          set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;

          CL0ZW01.CL0ZWCNT = CL0ZW01.CL0ZWCNT + 1;
          if (CL0ZW01.CL0ZWCNT > CL0ZW01.CL0ZWSXM) /* size table limit*/
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(463);
            set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
            return;
          end

          CL0ZW01.CL0ZWAPD = "A";
          if (CL0ZW01.CL0ZWSEQ[CLXLINEX] == 0)
            KL0ZS71(); /* select clkrec*/
          end
          return;
        end

        if (CL0ZW01.CL0ZWEDT == "I")
          converseLib.validationFailed(528);
          CLXREC.CLXERRF = "Y";
          set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
          return;
        else
          if (CL0ZW01.CL0ZWWNG[CLXLINEX] == "Y"
           && CLXREC.CLXERRF != "Y")
            set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
            CL0ZW01.CL0ZWWNG[CLXLINEX] = "N";

            CL0ZW01.CL0ZWCNT = CL0ZW01.CL0ZWCNT + 1;
            if (CL0ZW01.CL0ZWCNT > CL0ZW01.CL0ZWSXM) /* size table limit*/
              CLXREC.CLXERRF = "Y";
              converseLib.validationFailed(463);
              set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
              return;
            end

            CL0ZW01.CL0ZWAPD = "A";
            if (CL0ZW01.CL0ZWSEQ[CLXLINEX] == 0)
              KL0ZS71(); /* select clkrec*/
            end
            return;
          else
            if (CLXREC.CLXERRF != "Y")
              CL0ZW01.CL0ZWWNG[CLXLINEX] = "Y";
              CLXREC.CLXERRF = "Y";
              converseLib.validationFailed(529);
              set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
            else
              set KL0ZM005.SY4IDDSC[CLXLINEX] modified;
              CL0ZW01.CL0ZWWNG[CLXLINEX] = "N";
            end
            return;
          end
        end
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(219); /* size not valid for product*/
        set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
        return;
      end
    else
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(474);
      set KL0ZM005.SY4IDDSC[CLXLINEX] cursor, modified, bold;
      return;
    end
  end

  if (CL0ZW01.CL0ZWASW[CLXLINEX] == "A")
    if (KL0ZM005.CLNRTSQ[CLXLINEX] == 0
     && KL0ZM005.SL8LCCD1[CLXLINEX] == " "
     && KL0ZM005.SL2PALET[CLXLINEX] == " "
     && KL0ZM005.CL0ZWCSQ[CLXLINEX] == 0
     && KL0ZM005.YDRCD[CLXLINEX] == " "
     && KL0ZM005.CLNNCRQ[CLXLINEX] == 0
     && KL0ZM005.PC2INSEG[CLXLINEX] == " "
     && KL0ZM005.XSLCD[CLXLINEX] == " ")
      KL0ZM005.SL8ZNCD1[CLXLINEX] = " ";
      CL0ZW01.CL0ZWUPD[CLXLINEX] = " ";
      CL0ZW01.CL0ZWUQR[CLXLINEX] = " ";
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == " ")
        set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
      else
        set KL0ZM005.SY4IDDSC[CLXLINEX] normal;
        set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
      end
      return;
    end

     /* CL0ZS33                       ; select unique clqrec*/
     /* ;*/
     /* IF SQLCA.SQLCODE EQ 0;*/
       /* MOVE 473 TO EZEMNO ; duplicate size in vclstk01 tbl*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;*/
       /* SET CL0ZM005.SY4IDDSC(CLXLINEX) AUTOSKIP,BRIGHT;*/
       /* SET CL0ZM005.CLNRTSQ(CLXLINEX) CURSOR,MODIFIED;*/
       /* EZERTN;*/
     /* END ;*/

    if (KL0ZM005.SY4IDDSC[CLXLINEX] == " ")
      set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
    else
      set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
    end
    CL0ZW01.CL0ZWUPD[CLXLINEX] = "Y";
  end

end // end KL0ZS67

// set up cursor for sl7rec
Function KL0ZS69()
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                      **/
   /* 04-12-90  SGORGA                                         **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg.  **/
                                                            /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS69";

  set CL0ZW07 empty;
  set SL7REC empty;
  SL7REC.SY1STNBR = KL0ZM005.SY1STNBR;
  SL7REC.SY2CLRID = KL0ZM005.SY2CLRID;
  SL7REC.XDMCD = KL0ZM005.XDMCD;
  SL7REC.XGPCD = CL0ZW01.XGPCD;
  SL7REC.XUMCD = KL0ZM005.XUMCD;
  SL7REC.XWHCD = KL0ZM005.XWHCD;
  SL7REC.XQACD = CL0ZW01.XQACD;
  SL7REC.XOWCD = KL0ZM005.XOWCD;
  SL7REC.XSDCD = KL0ZM005.PC2INSEG[CLXLINEX];
  SL7REC.XSACD = "000";
  SL7REC.XPGCD = KL0ZM005.XPGCD;
  SL7REC.XXXSTAT = "*";
  SL7REC.XARCD = "*";
  SL7REC.SL4ZONE = "*";
  SL7REC.SL5LOCTN = "*";
  SL7REC.SY5SZID = CL0ZW01.SY5SZID[CLXLINEX];
  SL7REC.SL7EFFDT = -1;

  CL0ZW07.CL0ZW7SQ = "S8";
  CL0ZW07.CL0ZWLOW = 0;
  CL0ZW07.CL0ZWHGH = 999999999;

  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS70();
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end


end // end KL0ZS69

// set up refreshed detail map
Function KL0ZS6A()


   /* ************************************************************/
   /* *    This process will set up a 'refreshed' detail map -  **/
   /* *    screen (cl0zm005).                                   **/
   /* ************************************************************/

   /* ************************************************************/
   /* * MAINTENANCE HISTORY                                     **/
   /* * 04-11-90  SGORGA                                        **/
   /* * Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg. **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS6A";

  KL0ZM005.CLKAUTHQ = CL0ZW01.CLKAUTHQ;

  set KL0ZM005.SY1STNBR initialAttributes;
  set KL0ZM005.SY2CLRID initialAttributes;
  set KL0ZM005.XDMCD initialAttributes;
  set KL0ZM005.XPGCD initialAttributes;
  set KL0ZM005.XQACD initialAttributes;
  set KL0ZM005.XUMCD initialAttributes;

  CLXREC.CLXLINEX = 1; /* initialize*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    set KL0ZM005.CL0ZMUML initialAttributes;
  else
    set KL0ZM005.CL0ZMUML skip, invisible;
  end

  while (CLXREC.CLXLINEX <= CL0ZW01.CL0ZWMLN)
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
    KL0ZM005.CL0ZMDEF[CLXLINEX] = " ";
    KL0ZM005.CL0ZMDLT[CLXLINEX] = " ";
    CL0ZW01.CL0ZWUPD[CLXLINEX] = " ";
    set KL0ZM005.CL0ZMDEF[CLXLINEX] initialAttributes;
    set KL0ZM005.CL0ZMDLT[CLXLINEX] initialAttributes;
    set KL0ZM005.CLNRTSQ[CLXLINEX] initialAttributes;
    set KL0ZM005.CL0ZWCSQ[CLXLINEX] initialAttributes;
    set KL0ZM005.CLKAUTHQ[CLXLINEX] initialAttributes;
    set KL0ZM005.YDRCD[CLXLINEX] initialAttributes;
    set KL0ZM005.CLNNCRQ[CLXLINEX] initialAttributes;
    set KL0ZM005.SL8ZNCD1[CLXLINEX] initialAttributes;
    set KL0ZM005.SL8LCCD1[CLXLINEX] initialAttributes;
    set KL0ZM005.SL2PALET[CLXLINEX] initialAttributes;
    set KL0ZM005.PC2INSEG[CLXLINEX] initialAttributes;
    set KL0ZM005.XSLCD[CLXLINEX] initialAttributes;
    if (CL0ZW01.CL0ZWSAM == "Y")
      set KL0ZM005.CL0ZMXUM[CLXLINEX] initialAttributes;
    else
      set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
    end

    KL0ZM005.SY4IDDSC[CLXLINEX] = " ";
    set KL0ZM005.SY4IDDSC[CLXLINEX] initialAttributes;
    KL0ZM005.CLNRTSQ[CLXLINEX] = 0;
    KL0ZM005.SL8ZNCD1[CLXLINEX] = " ";
    KL0ZM005.SL8LCCD1[CLXLINEX] = " ";
    KL0ZM005.SL2PALET[CLXLINEX] = " ";
    KL0ZM005.CLKAUTHQ[CLXLINEX] = 0;
    KL0ZM005.YDRCD[CLXLINEX] = " ";
    KL0ZM005.CLNNCRQ[CLXLINEX] = 0;
    KL0ZM005.PC2INSEG[CLXLINEX] = " ";
    KL0ZM005.XSLCD[CLXLINEX] = " ";
    KL0ZM005.CL0ZWCSQ[CLXLINEX] = 0;
    CL0ZW01.CL0ZWASW[CLXLINEX] = "A";
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  KL0ZS23(); /* check security*/

  if (CL0ZW01.CL0ZWUDF != "Y" /* updating not allowed*/
   || CL0ZW01.CL0ZWUPP == "Y") /* partial updating only*/
    set KL0ZM005.SY1STNBR skip;
    set KL0ZM005.SY2CLRID skip;
    set KL0ZM005.XDMCD skip;
    set KL0ZM005.XOWCD skip;
    set KL0ZM005.XPGCD skip;
    set KL0ZM005.XQACD skip;
    set KL0ZM005.XUMCD skip;
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 10)
      if (KL0ZM005.SY4IDDSC[CLXLINEX] != " ")
        set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
        if (CL0ZW01.CL0ZWSAM == "Y")
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip;
        else
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        end
        set KL0ZM005.CL0ZMDEF[CLXLINEX] skip;
        set KL0ZM005.CL0ZMDLT[CLXLINEX] skip;
        set KL0ZM005.CLNRTSQ[CLXLINEX] skip;
        set KL0ZM005.SL8ZNCD1[CLXLINEX] skip;
        set KL0ZM005.SL8LCCD1[CLXLINEX] skip;
        set KL0ZM005.SL2PALET[CLXLINEX] skip;
        set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip;
        set KL0ZM005.CLKAUTHQ[CLXLINEX] skip;
        set KL0ZM005.YDRCD[CLXLINEX] skip;
        set KL0ZM005.CLNNCRQ[CLXLINEX] skip;
        set KL0ZM005.PC2INSEG[CLXLINEX] skip;
        set KL0ZM005.XSLCD[CLXLINEX] skip;
      else
        set KL0ZM005.SY4IDDSC[CLXLINEX] skip, invisible;
        if (CL0ZW01.CL0ZWSAM == "Y")
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        else
          set KL0ZM005.CL0ZMXUM[CLXLINEX] skip, invisible;
        end
        set KL0ZM005.CL0ZMDEF[CLXLINEX] skip, invisible;
        set KL0ZM005.CL0ZMDLT[CLXLINEX] skip, invisible;
        set KL0ZM005.CLNRTSQ[CLXLINEX] skip, invisible;
        set KL0ZM005.SL8ZNCD1[CLXLINEX] skip, invisible;
        set KL0ZM005.SL8LCCD1[CLXLINEX] skip, invisible;
        set KL0ZM005.SL2PALET[CLXLINEX] skip, invisible;
        set KL0ZM005.CL0ZWCSQ[CLXLINEX] skip, invisible;
        set KL0ZM005.CLKAUTHQ[CLXLINEX] skip, invisible;
        set KL0ZM005.YDRCD[CLXLINEX] skip, invisible;
        set KL0ZM005.CLNNCRQ[CLXLINEX] skip, invisible;
        set KL0ZM005.PC2INSEG[CLXLINEX] skip, invisible;
        set KL0ZM005.XSLCD[CLXLINEX] skip, invisible;
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end

  set KL0ZM005.SY4IDDSC[1] cursor;

end // end KL0ZS6A

// edit product brand code
Function KL0ZS6B()
   /* *************************************************************/

    /* Edit the product brand code for customer-product legal*/
    /* entity mis-match.*/

    /* Maintenance History:*/
    /* 05-31-90 CHELLM created*/
   /* 06-06-90 chellm replace product brand - claim division edit*/
            /* with product division - claim order type division*/
            /* edit*/
   /* 06-03-93 BCOURT on 6/2/83 all side1 products (brand '05')*/
   /* converted to NIKE brand '01'.*/
   /* Since claims are not converted, allow mismatch*/
   /* of NIKE product with side1 claim.*/
   /* *************************************************************/

  TA1REC.TA1LOCAT[2] = "CL0ZS6B";


   /* If either the claim or the invoice was set up prior*/
   /* to 06-01-90 it doesnt have a brand code, so make sure*/
   /* the legal entity of customer match the legal entity of*/
   /* the product.*/
  if (CLAREC.XBCCD == " ")

    if (CLWREC.XLECD == "01") /* If Nike Customer*/
      if (SY1REC.XBCCD == "01") /* and Nike Product*/
                                 /* ;   Product xle is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        set KL0ZM005.SY1STNBR cursor, modified, bold;
        return;
      end
    end

    if (CLWREC.XLECD == "05") /* If Side 1 Customer*/
      if (SY1REC.XBCCD == "05" /* and Side 1 Product*/
       || SY1REC.XBCCD == "06" /* or Relay  product*/
       || SY1REC.XBCCD == "07") /* or i.e    product*/
                                 /* ;  then Product xle is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        set KL0ZM005.SY1STNBR cursor, modified, bold;
        return;
      end
    end

     /* check the division code value against allowable*/
     /* division codes for the claims order type.*/

    if (CLAREC.XOTCD in XOTTBL.XOTCD)

      if (SY2REC.XDVCD == XOTTBL.XDVCD1[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD2[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD3[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD4[sysVar.arrayIndex]
       || SY2REC.XDVCD == XOTTBL.XDVCD5[sysVar.arrayIndex])
         /* next sentence*/
      else
        converseLib.validationFailed(637); /* the product brand must match the*/
        CLXREC.CLXERRF = "Y"; /* claims division or new division*/
        set KL0ZM005.SY1STNBR cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(096); /* order type not on system table*/
      CLXREC.CLXERRF = "Y";
    end

  else

    if (SY1REC.XBCCD != CLAREC.XBCCD) /* if brand codes don't match*/
      if (SY1REC.XBCCD == "01"
       && CLAREC.XBCCD == "05") /* mismatch ok as of 6/2/93*/
        /* next sentence*/
      else
        converseLib.validationFailed(611); /* Product brand must match claim brand*/
        CLXREC.CLXERRF = "Y";
        set KL0ZM005.SY1STNBR cursor, modified, bold;
        return;
      end
    end

  end

end // end KL0ZS6B

// set up cursor for sl7rec
Function KL0ZS70()

  CLXREC.CLXCPROC = "CL0ZS70";

  CL0ZW01.CL0ZWZNE = " ";
  CL0ZW01.CL0ZWLCN = " ";
  CL0ZW01.CL0ZWXAR = " ";

  call "IO1550" (CL0ZW07, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    CL0ZW01.CL0ZWDCT = 0;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
      if (CL0ZW01.CL0ZWDCT > 2)
        converseLib.validationFailed(4);
        CL0ZW01.CL0ZWDFL = "N";
        CLXREC.CLXBLDSC = "N";
        CLXREC.CLXERRF = "Y";
      end
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS70";
      TA1REC.TA1LOCAT[4] = "IO1550";
      TA1REC.TA1DBASE = "DSTLOC";
      TA1REC.TA1TBLVU = "VSYASG01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end

  CL0ZW01.CL0ZWEND = "N";
  CL0ZW01.CL0ZWEDT = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    SQLCA.VAGen_SQLCODE = 0;

    call "IO1550" ("N8", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      if (KL0ZM005.SL8ZNCD2 == SL7REC.SL4ZONE
       && KL0ZM005.SL8LCCD2 == SL7REC.SL5LOCTN
       && KL0ZM005.XARCD2 == SL7REC.XARCD)
        if (CL0ZW01.XXXSTAT == " ")
          CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
        end
        if (CL0ZW01.XXXSTAT != "A")
          /* next sentence*/
        else
          CL0ZW01.CL0ZWEDT = "Y";
          CL0ZW01.CL0ZWEND = "Y";
        end
      else
        if (SL7REC.SL4ZONE != CL0ZW01.CL0ZWZNE
         || SL7REC.SL5LOCTN != CL0ZW01.CL0ZWLCN
         || SL7REC.XARCD != CL0ZW01.CL0ZWXAR)
          CL0ZW01.CL0ZWZNE = SL7REC.SL4ZONE;
          CL0ZW01.CL0ZWLCN = SL7REC.SL5LOCTN;
          CL0ZW01.CL0ZWXAR = SL7REC.XARCD;
          CL0ZW01.XXXSTAT = " ";
          if (CL0ZW01.XXXSTAT == " ")
            CL0ZW01.XXXSTAT = SL7REC.XXXSTAT;
          end
          if (CL0ZW01.XXXSTAT != "A")
            /* next sentence*/
          else
            CL0ZW01.CL0ZWEDT = "I";
            CL0ZW01.CL0ZWEND = "Y";
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0ZW01.CL0ZWEND = "Y";
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS67";
        TA1REC.TA1LOCAT[4] = "IO1550";
        TA1REC.TA1DBASE = "DSTLOC";
        TA1REC.TA1TBLVU = "VSYASG01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        XPCL010();
      end
    end
  end

  call "IO1550" ("C8", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

end // end KL0ZS70

// select clkrec
Function KL0ZS71()
     /* KL0ZS71    --    SELECT CLKREC  (VRAITM01)*/

   /* ********************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G           **/
   /* *-----------------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                                 **/
   /* *-----------------------------------------------------------------**/
   /* * 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES                     **/
   /* * 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES                     **/
   /* ********************************************************************/

  CLXREC.CLXCPROC = "KL0ZS71";

  set CLKREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  CLKREC.CLACLMNB = KL0ZM005.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.XGPCD = CL0ZW01.XGPCD;
  CLKREC.SY1STNBR = KL0ZM005.SY1STNBR;
  CLKREC.SY2CLRID = KL0ZM005.SY2CLRID;
  CLKREC.XDMCD = KL0ZM005.XDMCD;
  CLKREC.XUMCD = KL0ZM005.XUMCD; /* 10-04-90*/
  CLKREC.XQACD = KL0ZM005.XQACD; /* 10-04-90*/
  CLKREC.XEGCD = CL0ZW01.XEGCD;
  CLKREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
  CLKREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
  CLKREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
  CLKREC.CLKCRFL = "*"; /* 072089 add*/

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS72(); /* set up cursor for clkrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock encountered*/
    return;
  end

end // end KL0ZS71

// select unique clkrec
Function KL0ZS72()

  CLXREC.CLXCPROC = "CL0ZS72";

  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "N";
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
      if (CL0ZW01.CL0ZWDCT > 2)
        converseLib.validationFailed(4); /* database busy*/
        CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
        CLXREC.CLXBLDSC = "N"; /* build screen flag*/
        CLXREC.CLXERRF = "N"; /* error flag*/
      end
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0ZS72"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
      XPCL010(); /* error diagnosis routine*/
    end
  end

  CL0ZW01.CL0ZWEND = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLKREC.SY5SZID == CL0ZW01.SY5SZID[CLXLINEX])
        if (CLKREC.XQACD == CL0ZW01.XQACD
         && CLKREC.XUMCD == CL0ZW01.XUMCD)
          KL0ZM005.CLKAUTHQ[CLXLINEX] = CLKREC.CLKAUTHQ;
          KL0ZM005.CL0ZMATH = KL0ZM005.CL0ZMATH + CLKREC.CLKAUTHQ;
        else
          KL0ZM005.CLKAUTHQ[CLXLINEX] = 0;
        end
        CL0ZW01.CL0ZWEND = "Y";
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KL0ZM005.CLKAUTHQ[CLXLINEX] = 0;
        CL0ZW01.CL0ZWEND = "Y";
      else
        TA1REC.TA1LOCAT[2] = "CL0ZS72"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* return auth*/

end // end KL0ZS72

// move fields to clqrec
Function KL0ZS73()
     /* KL0ZS73    --   MOVE FIELDS TO CLQREC*/

   /* ************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G    **/
   /* ----------------------------------------------------------**/
   /* DATE     PGMR  DESCRIPTION                             **/
   /* ----------------------------------------------------------**/
   /* 04-12-90                                                 **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg.  **/
   /* Changed cl0zw05.xsdcd field name to cl0zw05.pc2inseg.    **/
   /* 06-14-90  CHELLM  Renamed XSDCD to PC2INSEG.             **/
   /* 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES.               **/
                                                            /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS73";

   /* if size id, zone, and location are already*/
   /* in the vclstk01 table then first delete the*/
   /* old line. in either case the new line will*/
   /* be added.*/

  CL0ZW01.CL0ZWFLC = "N"; /* init found line in w05 flag*/
  sysVar.arrayIndex = 1;

  while (CL0ZW05.SY5SZID[sysVar.arrayIndex] != 0
   && CL0ZW01.CL0ZWFLC == "N"
   && sysVar.arrayIndex <= CL0ZW01.CL0ZWSXM)
    if (CL0ZW01.CL0ZWSAM == "Y")
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex]
       && KL0ZM005.CL0ZMXUM[CLXLINEX] == CL0ZW05.XUMCD[sysVar.arrayIndex]
       && KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
       && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
       && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
        CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
      end
    else
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex]
       && KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
       && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
       && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
        CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
      end
    end
  end

  if (CL0ZW01.CL0ZWFLC == "Y")
    CLQREC.SY5SZID = CL0ZW05.SY5SZID[sysVar.arrayIndex];
    if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim and secondary*/
      if (CL0ZW01.CL0ZWSSU == KL0ZM005.CL0ZMXUM[CLXLINEX]) /* claims uom*/
        CLQREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* equals curr line uom*/
      else
        CLQREC.CLACLMNB = KL0ZM005.CLACLMNB;
      end
    else
      CLQREC.CLACLMNB = KL0ZM005.CLACLMNB;
    end
    CLQREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
    CLQREC.XGPCD = CL0ZW01.XGPCD;
    CLQREC.SY1STNBR = KL0ZM005.SY1STNBR;
    CLQREC.SY2CLRID = KL0ZM005.SY2CLRID;
    CLQREC.XDMCD = KL0ZM005.XDMCD;
    if (CL0ZW01.CL0ZWSAM == "Y")
      CLQREC.XUMCD = KL0ZM005.CL0ZMXUM[CLXLINEX];
    else
      CLQREC.XUMCD = KL0ZM005.XUMCD;
    end
    CLQREC.XQACD = KL0ZM005.XQACD;
    CLQREC.XEGCD = CL0ZW05.XEGCD[sysVar.arrayIndex];
    CLQREC.SY1UNPCS = 0;
    CLQREC.XSLCD = CL0ZW05.XSLCD[sysVar.arrayIndex];
    CLQREC.PC2INSEG = CL0ZW05.PC2INSEG[sysVar.arrayIndex];

     /* the reason zone1 and location1 are moved to*/
     /* zone2 and location2 is that the names*/
     /* need to be reversed in the header info and*/
     /* the detail info of this application.*/

    CLQREC.SL8ZNCD2 = CL0ZW05.SL8ZNCD1[sysVar.arrayIndex];
    CLQREC.SL8LCCD2 = CL0ZW05.SL8LCCD1[sysVar.arrayIndex];
    CLQREC.SL2PALET = CL0ZW05.SL2PALET[sysVar.arrayIndex];
    if (CLQREC.SL8ZNCD2 == " " /* FIND A VALID VALUE FOR AREA CODE*/
     && CLQREC.SL8LCCD2 == " " 
     && CLQREC.SL2PALET == " ")
      CLQREC.XARCD2 = " ";
    else
      CLQREC.XARCD2 = "09";
    end

    CL0ZW01.CL0ZWDCT = 0;
    CL0ZW01.CL0ZWDFL = "Y";

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS35(); /* delete clqrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0)
      return;
    end
  end

  set CLQREC empty;
  if (KL0ZM005.SY4IDDSC[CLXLINEX] in SY4REC.SY4IDDSC)
    CLQREC.SY5SZID = sysVar.arrayIndex;
  end
  if (CLQREC.SY5SZID != 0)
    if (KL0ZM005.CLNRTSQ[CLXLINEX] == 0 
     /* if both credit and no-cr qty*/
     && KL0ZM005.CLNNCRQ[CLXLINEX] == 0 /* are zero, and change flag*/
     && KL0ZM005.CL0ZMDLT[CLXLINEX] == "X") /* is 'x', don't do insert*/
      /* next sentence*/
    else
      if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim and secondary*/
        if (CL0ZW01.CL0ZWSSU == KL0ZM005.CL0ZMXUM[CLXLINEX]) /* claims uom*/
          CLQREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* equals curr line uom*/
        else
          CLQREC.CLACLMNB = KL0ZM005.CLACLMNB;
        end
      else
        CLQREC.CLACLMNB = KL0ZM005.CLACLMNB;
      end
      CLQREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
      CLQREC.XGPCD = CL0ZW01.XGPCD;
      CLQREC.SY1STNBR = KL0ZM005.SY1STNBR;
      CLQREC.SY2CLRID = KL0ZM005.SY2CLRID;
      CLQREC.XDMCD = KL0ZM005.XDMCD;
      CLQREC.XWHCD = CL0ZW01.XWHCD;

       /* the reason zone1 and location1 are moved to*/
       /* zone2 and location2 is that the names*/
       /* need to be reversed in the header info and*/
       /* the detail info of this application.*/

      CLQREC.XARCD1 = KL0ZM005.XARCD2;
      CLQREC.SL8ZNCD1 = KL0ZM005.SL8ZNCD2;
      CLQREC.SL8LCCD1 = KL0ZM005.SL8LCCD2;
      CLQREC.CLNRTSQ = KL0ZM005.CLNRTSQ[CLXLINEX];
      if (KL0ZM005.SL8ZNCD1[CLXLINEX] == " "
       && KL0ZM005.SL8LCCD1[CLXLINEX] == " "
       && KL0ZM005.SL2PALET[CLXLINEX] == " ")
        CLQREC.XARCD2 = " ";
      else
        CLQREC.XARCD2 = "09";
      end
      CLQREC.SL8ZNCD2 = KL0ZM005.SL8ZNCD1[CLXLINEX];
      CLQREC.SL8LCCD2 = KL0ZM005.SL8LCCD1[CLXLINEX];
      CLQREC.SL2PALET = KL0ZM005.SL2PALET[CLXLINEX];
      CLQREC.PC2INSEG = KL0ZM005.PC2INSEG[CLXLINEX];
      CLQREC.XSLCD = KL0ZM005.XSLCD[CLXLINEX];
      CLQREC.XOWCD = KL0ZM005.XOWCD;
      CLQREC.XPGCD = KL0ZM005.XPGCD;
      if (CL0ZW01.CL0ZWSAM == "Y")
        CLQREC.XUMCD = KL0ZM005.CL0ZMXUM[CLXLINEX];
      else
        CLQREC.XUMCD = KL0ZM005.XUMCD;
      end
      CLQREC.XQACD = KL0ZM005.XQACD;
      CLQREC.XEGCD = CL0ZW01.XEGCD;
      CLQREC.SY1UNPCS = 0;
      KL0ZS02();
      CLQREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      CLQREC.ZZZCHGTM = TA2REC.TA2TIMHM;

      CL0ZW01.CL0ZWDCT = 0;
      CL0ZW01.CL0ZWDFL = "Y";

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS74();
      end

      if (CL0ZW01.CL0ZWDCT > 0)
        return;
      end

      CL0ZW01.CL0ZWQSW = "Y";
    end
  end

end // end KL0ZS73

// insert clqrec
Function KL0ZS74()

  CLXREC.CLXCPROC = "CL0ZS74";

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1360" ("A ", SQLCA, CLQREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
      CLXREC.CLXBLDSC = "N"; /* build screen flag*/
      CLXREC.CLXERRF = "N"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS74"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1360"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLSTK01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS74

// move data to clnrec
Function KL0ZS75()
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                      **/
   /* 04-12-90  SGORGA                                         **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg.  **/
   /* Changed cl0zw05.xsdcd field name to cl0zw05.pc2inseg.    **/
   /* 06-14-90 CHELLM added CLKPRCFF to update of CLNREC.      **/
   /* 03-13-92 GDECKE  MARCH DB2 TABLE CHANGES.                **/
   /* 04-13-92 TWATSO  APRIL DB2 TABLE CHANGES.                **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS75";

  CLNREC.XGPCD = CL0ZW01.XGPCD; /* move data from map to clnrec*/
  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim and secondary*/
    if (CL0ZW01.CL0ZWSSU == KL0ZM005.CL0ZMXUM[CLXLINEX]) /* claim's uom is*/
      CLNREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* equal to current line uom*/
    else
      CLNREC.CLACLMNB = KL0ZM005.CLACLMNB;
    end
  else
    CLNREC.CLACLMNB = KL0ZM005.CLACLMNB;
  end
  CLNREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
  CLNREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
  CLNREC.SY1STNBR = KL0ZM005.SY1STNBR;
  CLNREC.SY2CLRID = KL0ZM005.SY2CLRID;
  CLNREC.XDMCD = KL0ZM005.XDMCD;
  CLNREC.XQACD = KL0ZM005.XQACD;
  CLNREC.XEGCD = CL0ZW01.XEGCD;
  CLNREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
  CLNREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
  CLNREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
  if (CL0ZW01.CL0ZWSAM == "Y")
    CLNREC.XUMCD = KL0ZM005.CL0ZMXUM[CLXLINEX];
  else
    CLNREC.XUMCD = KL0ZM005.XUMCD;
  end
  CLNREC.IV0PARTN = "0"; /* (MSH) set to zero*/
  CLNREC.IV0IVCID = 0; /* (MSH) and invoice number*/

   /* if size id from map is already in the cl0zw05*/
   /* table then move size id to clnrec, otherwise*/
   /* move data to clnrec, add clnrec line to vrtsit01*/
   /* table, then exit this routine.*/

  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim find size and*/
                                   /* uom*/
    CL0ZW01.CL0ZW1SZ = KL0ZM005.SY4IDDSC[CLXLINEX];
    CL0ZW01.CL0ZW1UM = KL0ZM005.CL0ZMXUM[CLXLINEX];
    if (CL0ZW01.CL0ZW1SU in CL0ZW05.CL0ZW5SU)
      /* next sentence*/
    else
      sysVar.arrayIndex = 0;
    end
  else /* if regular claim find line with same*/
                                   /* size*/
    if (KL0ZM005.SY4IDDSC[CLXLINEX] in CL0ZW05.SY4IDDSC)
      /* next sentence*/
    else
      sysVar.arrayIndex = 0;
    end
  end
  if (sysVar.arrayIndex != 0) /* if the line was found*/
    CLNREC.SY5SZID = CL0ZW05.SY5SZID[sysVar.arrayIndex];
    if (KL0ZM005.SL8LCCD1[CLXLINEX] != CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
     || KL0ZM005.SL8ZNCD1[CLXLINEX] != CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
     || KL0ZM005.SL2PALET[CLXLINEX] != CL0ZW05.SL2PALET[sysVar.arrayIndex])
       /* cl0zs79 will try to locate the*/
       /* zone/location in cl0zw05 table.*/
      KL0ZS79(); /* if none found, one will be added.*/
    else
      CL0ZW05.YDRCD[sysVar.arrayIndex] = KL0ZM005.YDRCD[CLXLINEX];
      CL0ZW05.XSLCD[sysVar.arrayIndex] = KL0ZM005.XSLCD[CLXLINEX];
      CL0ZW05.PC2INSEG[sysVar.arrayIndex] = KL0ZM005.PC2INSEG[CLXLINEX];
      CL0ZW05.SL2PALET[sysVar.arrayIndex] = KL0ZM005.SL2PALET[CLXLINEX];
      CL0ZW05.CLNRTSQ[sysVar.arrayIndex] = KL0ZM005.CLNRTSQ[CLXLINEX];
      CL0ZW05.CL0ZWCSQ[sysVar.arrayIndex] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
      CL0ZW05.CLNNCRQ[sysVar.arrayIndex] = KL0ZM005.CLNNCRQ[CLXLINEX];
      CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] = KL0ZM005.CLKAUTHQ[CLXLINEX];
      CL0ZW05.XUMCD[sysVar.arrayIndex] = KL0ZM005.CL0ZMXUM[CLXLINEX];
    end
  else
     /* move data to clnrec and add line*/
     /* to vrtsit01 table, then exit.*/
    KL0ZS76();
                                   /* this will also add a line in cl0zw05.*/
    return;
  end

  CL0ZW01.CL0ZWDCT = 0;
  CL0ZW01.CL0ZWDFL = "Y";

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS78(); /* select unique clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock count not zero*/
    return; /* then exit*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if clnrec was found do update logic*/
    /* next sentence     ; otherwise just insert the line (cl0zs76)*/
  else
    KL0ZS76(); /* move data to clnrec and add line*/
    return; /* to vrtist01 table and then exit.*/
  end

   /* the following logic is for updating an*/
   /* existing vrtsit01 line.*/

  if (CL0ZW01.CLKCLPRC[CLXLINEX] > 0)
    CL0ZW01.SY5PRCUN = CL0ZW01.CLKCLPRC[CLXLINEX];
  else
    CL0ZW01.SY5PRCUN = CL0ZW01.CL0ZWPRI;
  end

  CL0ZW01.CL0ZWPRC = CL0ZW01.SY5PRCUN * KL0ZM005.CLNRTSQ[CLXLINEX];

  KL0ZS02(); /* get date and time*/

  CLNREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLNREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  CLNREC.XUMCD = KL0ZM005.XUMCD;

   /* cl0zs89 will find the total credit quantity*/
   /* for a size id over all its zone/locations,*/
   /* and move the amount to clnrec (vrtsit01)*/
   /* if there is a nonblank ydrcd it will be*/
   /* moved to clnrec.*/

  KL0ZS89();

  CLNREC.XOWCD = KL0ZM005.XOWCD;
  CLNREC.XQACD = KL0ZM005.XQACD;
  CLNREC.XEGCD = CL0ZW01.XEGCD;
  CLNREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
  CLNREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
  CLNREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
  if (CL0ZW01.CL0ZWSAM == "Y")
    CLNREC.XUMCD = KL0ZM005.CL0ZMXUM[CLXLINEX];
  else
    CLNREC.XUMCD = KL0ZM005.XUMCD;
  end
  CLNREC.CLKPRCFF = CL0ZW01.CLKPRCFF; /* added 06-14-90*/
  CLNREC.CLNGRPRC = CL0ZW01.SY5PRCUN; /* (MSH)*/
  CLNREC.CLNNTPRC = CL0ZW01.SY5PRCUN; /* (MSH)*/

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y") /* try update until no deadlock*/
    KL0ZS80(); /* update clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CLXREC.CLXERRF == "Y")
    return;
  end

   /* locate the size/zone/location record in cl0zw05*/
   /* table to be updated.*/

     /* (if sales sample claim)*/
  if (CL0ZW01.CL0ZWSAM == "Y")
    if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex]
     && KL0ZM005.CL0ZMXUM[CLXLINEX] == CL0ZW05.XUMCD[sysVar.arrayIndex]
     && KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
     && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
     && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
      /* next sentence*/
    else
      CL0ZW01.CL0ZWFLC = "N"; /* init found line in w05 flag*/
      sysVar.arrayIndex = 1;

      while (CL0ZW05.SY5SZID[sysVar.arrayIndex] != 0
       && CL0ZW01.CL0ZWFLC == "N"
       && sysVar.arrayIndex <= CL0ZW01.CL0ZWSXM)
        if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex]
         && KL0ZM005.CL0ZMXUM[CLXLINEX] == CL0ZW05.XUMCD[sysVar.arrayIndex])
          if (KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
           && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
           && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
            CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
          else
            if (CL0ZW05.SL8LCCD1[sysVar.arrayIndex] == "      ")
              CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
            else
              sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
            end
          end
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
        end
      end

       /* if no entry found in cl0zw05 for size id and*/
       /* location on map then show error message*/

      if (CL0ZW01.CL0ZWFLC == "N") /* if line not found*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
        CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
        CLXREC.CLXBLDAY = "Y"; /* re-build array*/
        CLXREC.CLXERRF = "Y"; /* error flag*/
        converseLib.validationFailed(18); /* record already updated*/
        return;
      end
    end

  else /* (not a sales sample claim)*/

     /* locate the size/zone/location record in cl0zw05*/
     /* table to be updated.*/

    if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex]
     && KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
     && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
     && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
      /* next sentence*/
    else
      CL0ZW01.CL0ZWFLC = "N"; /* init found line in w05 flag*/
      sysVar.arrayIndex = 1;

      while (CL0ZW05.SY5SZID[sysVar.arrayIndex] != 0
       && CL0ZW01.CL0ZWFLC == "N"
       && sysVar.arrayIndex <= CL0ZW01.CL0ZWSXM)
        if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[sysVar.arrayIndex])
          if (KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
           && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
           && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
            CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
          else
            if (CL0ZW05.SL8LCCD1[sysVar.arrayIndex] == "      ")
              CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
            else
              sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
            end
          end
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1; /* bounce index and test next line*/
        end
      end

       /* if no entry found in cl0zw05 for size id and*/
       /* location on map then show error message*/

      if (CL0ZW01.CL0ZWFLC == "N") /* if line not found*/
        CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
        CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
        CLXREC.CLXBLDAY = "Y"; /* re-build array*/
        CLXREC.CLXERRF = "Y"; /* error flag*/
        converseLib.validationFailed(18); /* record already updated*/
        return;
      end
    end
  end

  CL0ZW01.CL0ZWUMR = "Y"; /* update claim header clmrec flag*/
  CL0ZW01.CL0ZWPR1 = CL0ZW05.CLKCLPRC[sysVar.arrayIndex] * CL0ZW05.CLNRTSQ[sysVar.arrayIndex];
  CL0ZW01.CL0ZWRT1 = CL0ZW01.CL0ZWRT1 + CL0ZW05.CLNRTSQ[sysVar.arrayIndex];
  CL0ZW01.CL0ZWRT2 = CL0ZW01.CL0ZWRT2 + KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW01.CL0ZWNT1 = CL0ZW01.CL0ZWNT1 + CL0ZW05.CLNNCRQ[sysVar.arrayIndex];
  CL0ZW01.CL0ZWNT2 = CL0ZW01.CL0ZWNT2 + KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW01.CL0ZWGT1 = CL0ZW01.CL0ZWGT1 + CL0ZW01.CL0ZWPR1;
  CL0ZW01.CL0ZWGT2 = CL0ZW01.CL0ZWGT2 + CL0ZW01.CL0ZWPRC;

  CL0ZW05.YDRCD[sysVar.arrayIndex] = KL0ZM005.YDRCD[CLXLINEX];
  CL0ZW05.XSLCD[sysVar.arrayIndex] = KL0ZM005.XSLCD[CLXLINEX];
  CL0ZW05.PC2INSEG[sysVar.arrayIndex] = KL0ZM005.PC2INSEG[CLXLINEX];
  CL0ZW05.SL8ZNCD1[sysVar.arrayIndex] = KL0ZM005.SL8ZNCD1[CLXLINEX];
  CL0ZW05.SL8LCCD1[sysVar.arrayIndex] = KL0ZM005.SL8LCCD1[CLXLINEX];
  CL0ZW05.SL2PALET[sysVar.arrayIndex] = KL0ZM005.SL2PALET[CLXLINEX];
  CL0ZW05.CLNRTSQ[sysVar.arrayIndex] = KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW05.CLNNCRQ[sysVar.arrayIndex] = KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW05.CL0ZWCSQ[sysVar.arrayIndex] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
  CL0ZW05.XUMCD[sysVar.arrayIndex] = KL0ZM005.CL0ZMXUM[CLXLINEX];

end // end KL0ZS75

// move data to clnrec
Function KL0ZS76()
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                      **/
   /* 04-12-90  SGORGA                                         **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg.  **/
   /* Changed cl0zw05.xsdcd field name to cl0zw05.pc2inseg.    **/
   /* 06-14-90 CHELLM added CLKPRCFF to update of CLNREC.      **/
   /* 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES                **/
   /* 04-13-92  TWATSO  APRIL DB2 TABLE CHANGES  ADD OP-BK-MO  **/
   /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS76";
  set CLNREC empty;

  if (CL0ZW01.CLKCLPRC[CLXLINEX] > 0)
    CL0ZW01.SY5PRCUN = CL0ZW01.CLKCLPRC[CLXLINEX];
  else
    CL0ZW01.SY5PRCUN = CL0ZW01.CL0ZWPRI;
  end

  CL0ZW01.CL0ZWPRC = CL0ZW01.SY5PRCUN * KL0ZM005.CLNRTSQ[CLXLINEX];

  KL0ZS02(); /* get date and time*/

  CLNREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLNREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim and secondar*/
    if (CL0ZW01.CL0ZWSSU == KL0ZM005.CL0ZMXUM[CLXLINEX]) /* claim's*/
      CLNREC.CLACLMNB = CL0ZW01.CL0ZWCLM; /* uom is the sam*/
    else
      CLNREC.CLACLMNB = KL0ZM005.CLACLMNB;
    end
  else
    CLNREC.CLACLMNB = KL0ZM005.CLACLMNB;
  end
  CLNREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
  CLNREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
  CLNREC.SY1STNBR = KL0ZM005.SY1STNBR;
  CLNREC.SY2CLRID = KL0ZM005.SY2CLRID;
  CLNREC.XDMCD = KL0ZM005.XDMCD;
  CLNREC.XGPCD = CL0ZW01.XGPCD;
  CLNREC.SY5SZID = CL0ZW01.SY5SZID[CLXLINEX];
  CLNREC.XQACD = KL0ZM005.XQACD;
  CLNREC.XEGCD = CL0ZW01.XEGCD;
  CLNREC.XBK-BK-SESN-CD = CL0ZW01.XBK-BK-SESN-CD;
  CLNREC.OP-BK-YR = CL0ZW01.OP-BK-YR;
  CLNREC.OP-BK-MO = CL0ZW01.OP-BK-MO;
  CLNREC.XOWCD = KL0ZM005.XOWCD;
  if (CL0ZW01.CL0ZWSAM == "Y")
    CLNREC.XUMCD = KL0ZM005.CL0ZMXUM[CLXLINEX];
  else
    CLNREC.XUMCD = KL0ZM005.XUMCD;
  end
  CLNREC.YDRCD = KL0ZM005.YDRCD[CLXLINEX];
  CLNREC.CLNRTSQ = KL0ZM005.CLNRTSQ[CLXLINEX];
  CLNREC.CLNNCRQ = KL0ZM005.CLNNCRQ[CLXLINEX];
  CLNREC.CLNGRPRC = CL0ZW01.SY5PRCUN;
  CLNREC.CLNNTPRC = CL0ZW01.SY5PRCUN;
  CLNREC.CLKPRCFF = CL0ZW01.CLKPRCFF; /* added 06-14-90*/
  CLNREC.IV0PARTN = "0";
  CLNREC.IV0IVCID = 0;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y") /* try insert until no deadlock*/
    KL0ZS77(); /* insert clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CLXREC.CLXERRF == "Y")
    return;
  end

  CL0ZW01.CL0ZWNSW = "Y";
  CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
  CL0ZW01.CL0ZWRT2 = CL0ZW01.CL0ZWRT2 + KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW01.CL0ZWNT2 = CL0ZW01.CL0ZWNT2 + KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW01.CL0ZWGT2 = CL0ZW01.CL0ZWGT2 + CL0ZW01.CL0ZWPRC;

  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW01.CL0ZW1SZ = KL0ZM005.SY4IDDSC[CLXLINEX];
    CL0ZW01.CL0ZW1UM = KL0ZM005.CL0ZMXUM[CLXLINEX];
    if (CL0ZW01.CL0ZW1SU in CL0ZW05.CL0ZW5SU)
      CL0ZW01.CL0ZWIXX = sysVar.arrayIndex;
    else
      CLXREC.CLXLSTSZ = CLXREC.CLXLSTSZ + 1;
      CL0ZW01.CL0ZWLST = CL0ZW01.CL0ZWLST + 1;
      CL0ZW01.CL0ZWIXX = CLXREC.CLXLSTSZ;
    end
  else
    if (KL0ZM005.SY4IDDSC[CLXLINEX] in CL0ZW05.SY4IDDSC)
      CL0ZW01.CL0ZWIXX = sysVar.arrayIndex;
    else
      CLXREC.CLXLSTSZ = CLXREC.CLXLSTSZ + 1;
      CL0ZW01.CL0ZWLST = CL0ZW01.CL0ZWLST + 1;
      CL0ZW01.CL0ZWIXX = CLXREC.CLXLSTSZ;
    end
  end

  if (CL0ZW01.CL0ZWRCT == 0)
    CL0ZW01.CL0ZWU2R = "Y";
  end
  CL0ZW01.CL0ZWRCT = CL0ZW01.CL0ZWRCT + 1; /* clnrec count*/

  set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
  CL0ZW05.SY5SZID[CL0ZWIXX] = CL0ZW01.SY5SZID[CLXLINEX];
  CL0ZW05.SY4IDDSC[CL0ZWIXX] = KL0ZM005.SY4IDDSC[CLXLINEX];
  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW05.XUMCD[CL0ZWIXX] = KL0ZM005.CL0ZMXUM[CLXLINEX];
  else
    CL0ZW05.XUMCD[CL0ZWIXX] = KL0ZM005.XUMCD;
  end
  CL0ZW05.YDRCD[CL0ZWIXX] = KL0ZM005.YDRCD[CLXLINEX];
  CL0ZW05.XSLCD[CL0ZWIXX] = KL0ZM005.XSLCD[CLXLINEX];
  CL0ZW05.PC2INSEG[CL0ZWIXX] = KL0ZM005.PC2INSEG[CLXLINEX];
  CL0ZW05.SL8ZNCD1[CL0ZWIXX] = KL0ZM005.SL8ZNCD1[CLXLINEX];
  CL0ZW05.SL8LCCD1[CL0ZWIXX] = KL0ZM005.SL8LCCD1[CLXLINEX];
  CL0ZW05.SL2PALET[CL0ZWIXX] = KL0ZM005.SL2PALET[CLXLINEX];
  CL0ZW05.CLNRTSQ[CL0ZWIXX] = KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW05.CL0ZWCSQ[CL0ZWIXX] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
  CL0ZW05.CLNNCRQ[CL0ZWIXX] = KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW05.CLKAUTHQ[CL0ZWIXX] = KL0ZM005.CLKAUTHQ[CLXLINEX];
  CL0ZW05.CL0ZWSEQ[CL0ZWIXX] = 0;
  CL0ZW05.CL0ZWLSQ[CL0ZWIXX] = 0;
  CL0ZW01.CL0ZWSEQ[CLXLINEX] = 0;

end // end KL0ZS76

// insert clnrec
Function KL0ZS77()
   /* *********************************************************************/
   /* *  KL0ZS77 - insert new row to vtrsit01 - clnrec                   **/
   /* *********************************************************************/
   /* *  M A I N T E N A N C E    H I S T O R Y    L O G                 **/
   /* *------------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                    **/
   /* *------------------------------------------------------------------**/
   /* * 11-05-98  GDECKE  PERFORM KL0ZS-EDIT-STY-GPC TO EDIT STYLE,CLR,GPC*/
   /* *********************************************************************/


  CLXREC.CLXCPROC = "CL0ZS77";

    /* edit record for bad style, color, gpc, uom*/
    /* exit update routine if invalid values found*/
  KL0ZS-EDIT-STY-GPC();
  if (CLXREC.CLXERRF == "Y")
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    return;
  end


  SQLCA.VAGen_SQLCODE = 0;

  call "IO1330" ("A ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS77"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS77

// select unique clnrec
Function KL0ZS78()

  CLXREC.CLXCPROC = "CL0ZS78";

  SQLCA.VAGen_SQLCODE = 0;

  call "IO1330" ("S ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* RTS item*/

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock count*/
      CLXREC.CLXBLDSC = "N"; /* build screen flag*/
      CLXREC.CLXERRF = "N"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS78"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS78

// find or add zone/loc w05 line
Function KL0ZS79()
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                      **/
   /* 04-12-90  SGORGA                                         **/
   /* Changed cl0zm005.xsdcd field name to cl0zm005.pc2inseg.  **/
   /* Changed cl0zw05.xsdcd field name to cl0zw05.pc2inseg.    **/
                                                            /* **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS79";

  CL0ZW01.CL0ZWNSW = "Y";
  CL0ZW01.CL0ZWUMR = "Y"; /* update clmrec flag*/
  CL0ZW01.CL0ZWRT2 = CL0ZW01.CL0ZWRT2 + KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW01.CL0ZWNT2 = CL0ZW01.CL0ZWNT2 + KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW01.CL0ZWGT2 = CL0ZW01.CL0ZWGT2 + CL0ZW01.CL0ZWPRC;

   /* locate the size/zone/location record in*/
   /* cl0zw05. if the line does not exist, then*/
   /* add the data to the table.*/

  CL0ZW01.CL0ZWFLC = "N"; /* init found line in w05 flag*/
  sysVar.arrayIndex = 1;

  while (CL0ZW05.SY5SZID[sysVar.arrayIndex] != 0
   && CL0ZW01.CL0ZWFLC == "N"
   && sysVar.arrayIndex <= CL0ZW01.CL0ZWSXM)
    if (CLNREC.SY5SZID == CL0ZW05.SY5SZID[sysVar.arrayIndex])
      if (KL0ZM005.SL8LCCD1[CLXLINEX] == CL0ZW05.SL8LCCD1[sysVar.arrayIndex]
       && KL0ZM005.SL8ZNCD1[CLXLINEX] == CL0ZW05.SL8ZNCD1[sysVar.arrayIndex]
       && KL0ZM005.SL2PALET[CLXLINEX] == CL0ZW05.SL2PALET[sysVar.arrayIndex])
        CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
      else
        if (CL0ZW05.SL8LCCD1[sysVar.arrayIndex] == "      ")
          CL0ZW01.CL0ZWFLC = "Y"; /* found line in cl0zw05*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end

  if (CL0ZW01.CL0ZWFLC == "Y")
    CLNREC.SY5SZID = CL0ZW05.SY5SZID[sysVar.arrayIndex];
    CL0ZW05.YDRCD[sysVar.arrayIndex] = KL0ZM005.YDRCD[CLXLINEX];
    CL0ZW05.XSLCD[sysVar.arrayIndex] = KL0ZM005.XSLCD[CLXLINEX];
    CL0ZW05.PC2INSEG[sysVar.arrayIndex] = KL0ZM005.PC2INSEG[CLXLINEX];
    CL0ZW05.SL2PALET[sysVar.arrayIndex] = KL0ZM005.SL2PALET[CLXLINEX];
    CL0ZW05.CLNRTSQ[sysVar.arrayIndex] = KL0ZM005.CLNRTSQ[CLXLINEX];
    CL0ZW05.CL0ZWCSQ[sysVar.arrayIndex] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
    CL0ZW05.CLNNCRQ[sysVar.arrayIndex] = KL0ZM005.CLNNCRQ[CLXLINEX];
    CL0ZW05.CLKAUTHQ[sysVar.arrayIndex] = KL0ZM005.CLKAUTHQ[CLXLINEX];
    return;
  end

   /* at this point the zone location is not in the table*/
   /* so we will add one.*/

  CLXREC.CLXLSTSZ = CLXREC.CLXLSTSZ + 1;
  CL0ZW01.CL0ZWLST = CL0ZW01.CL0ZWLST + 1;
  CL0ZW01.CL0ZWIXX = CLXREC.CLXLSTSZ;

  if (CL0ZW01.CL0ZWRCT == 0)
    CL0ZW01.CL0ZWU2R = "Y";
  end

  set KL0ZM005.SY4IDDSC[CLXLINEX] skip;
  CL0ZW05.SY5SZID[CL0ZWIXX] = CL0ZW01.SY5SZID[CLXLINEX];
  CL0ZW05.SY4IDDSC[CL0ZWIXX] = KL0ZM005.SY4IDDSC[CLXLINEX];
  if (CL0ZW01.CL0ZWSAM == "Y")
    CL0ZW05.XUMCD[CL0ZWIXX] = KL0ZM005.CL0ZMXUM[CLXLINEX];
  else
    CL0ZW05.XUMCD[CL0ZWIXX] = KL0ZM005.XUMCD;
  end
  CL0ZW05.YDRCD[CL0ZWIXX] = KL0ZM005.YDRCD[CLXLINEX];
  CL0ZW05.XSLCD[CL0ZWIXX] = KL0ZM005.XSLCD[CLXLINEX];
  CL0ZW05.PC2INSEG[CL0ZWIXX] = KL0ZM005.PC2INSEG[CLXLINEX];
  CL0ZW05.SL8ZNCD1[CL0ZWIXX] = KL0ZM005.SL8ZNCD1[CLXLINEX];
  CL0ZW05.SL8LCCD1[CL0ZWIXX] = KL0ZM005.SL8LCCD1[CLXLINEX];
  CL0ZW05.SL2PALET[CL0ZWIXX] = KL0ZM005.SL2PALET[CLXLINEX];
  CL0ZW05.CLNRTSQ[CL0ZWIXX] = KL0ZM005.CLNRTSQ[CLXLINEX];
  CL0ZW05.CL0ZWCSQ[CL0ZWIXX] = KL0ZM005.CL0ZWCSQ[CLXLINEX];
  CL0ZW05.CLNNCRQ[CL0ZWIXX] = KL0ZM005.CLNNCRQ[CLXLINEX];
  CL0ZW05.CLKAUTHQ[CL0ZWIXX] = KL0ZM005.CLKAUTHQ[CLXLINEX];
  CL0ZW05.CL0ZWSEQ[CL0ZWIXX] = 0;
  CL0ZW05.CL0ZWLSQ[CL0ZWIXX] = 0;
  CL0ZW01.CL0ZWSEQ[CLXLINEX] = 0;
  CLNREC.SY5SZID = CL0ZW05.SY5SZID[CL0ZWIXX];

end // end KL0ZS79

// Read DCLAIM.VCLARX01
Function KL0ZS7A()
   /* **************************************************************/
   /* *  SELECT THE DCLAIM.VCLARX01 LINE TO GET SAP RTN SO NBR **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  07-27-01  DSINHA  created                             **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "READ-VCLARX"; /* set current process name*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0ZS7A"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end

   /* ***** FETCH THE FIRST LINE FOR THE CLAIM FROM THE ARX TABLE*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* RECORD FOUND*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
   /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "KL0ZS7B-FETCH"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end


end // end KL0ZS7A

// close cursor DCLAIM.VCLARX01
Function KL0ZS7B()
   /* **************************************************************/
   /* *  SELECT THE DCLAIM.VCLARX01 LINE TO GET SAP RTN SO NBR **/
   /* ***********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y             **/
   /* *--------------------------------------------------------**/
   /* *    DATE    USER    DESCRIPTION                         **/
   /* *--------------------------------------------------------**/
   /* *  07-17-01  DSINHA  created                             **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "CLOSE-VCLARX"; /* set current process name*/

  set SQLCA empty; /* CLEAR SQL RECORD*/
  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* RECORD FOUND*/
    TA1REC.TA1LOCAT[2] = "KL0ZS7B"; /* LOCATION*/
    TA1REC.TA1LOCAT[4] = "IO1170"; /* LOCATION*/
    TA1REC.TA1DBASE = "DCLAIM"; /* DATABASE*/
    TA1REC.TA1TBLVU = "VCLARX01"; /* TABLE VIEW*/
    CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* CLAIM NUMBER*/
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* TABLE KEY*/
    XPCL010(); /* ERROR DIAGNOSIS ROUTINE*/
  end
end // end KL0ZS7B

// update clnrec
Function KL0ZS80()
   /* *********************************************************************/
   /* *  KL0ZS77 - insert new row to vtrsit01 - clnrec                   **/
   /* *********************************************************************/
   /* *  M A I N T E N A N C E    H I S T O R Y    L O G                 **/
   /* *------------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                    **/
   /* *------------------------------------------------------------------**/
   /* * 11-05-98  GDECKE  PERFORM KL0ZS-EDIT-STY-GPC TO EDIT STYLE,CLR,GPC*/
   /* *********************************************************************/

  CLXREC.CLXCPROC = "CL0ZS80";

  SQLCA.VAGen_SQLCODE = 0;

  if (CLNREC.CLNRTSQ == 0
   /* DELETE THE VRTSIT01 LINE IF NO CREDIT*/
   && CLNREC.CLNNCRQ == 0) /* AND NO NON-CREDIT QUANTITY*/
    call "IO1330" ("D ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
  else

    /* edit record for bad style, color, gpc, uom*/
    /* exit update routine if invalid values found*/
    KL0ZS-EDIT-STY-GPC();
    if (CLXREC.CLXERRF == "Y")
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      return;
    else
      call "IO1330" ("U ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CLXREC.CLXBLDAY = "Y"; /* re-build array*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
    converseLib.validationFailed(18); /* record already updated*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS80"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSIT01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS80

// move fields to clmrec
Function KL0ZS81()

  CLXREC.CLXCPROC = "CL0ZS81";

  CLMREC.CLACLMNB = KL0ZM005.CLACLMNB;
  CLMREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
  CLMREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS30(); /* select clmrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWMSW = "Y"; /* if clmrec exists*/
  else
    CL0ZW01.CL0ZWMSW = "N";
    set CLMREC empty;
    CLMREC.CLACLMNB = KL0ZM005.CLACLMNB;
    CLMREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
    CLMREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
    CLMREC.CLMTOGL1 = "N";
    CLMREC.CLMTOGL2 = "N";
  end

  set CL0ZW04 empty;
  CL0ZW04.CL0ZW4SQ = "SM";
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* sum clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CL0ZW04.CL0ZW4I1 >= 0)
    CLMREC.CLMTNCRQ = CL0ZW04.CL0ZW4Q1;
  else
    CLMREC.CLMTNCRQ = 0;
  end
  if (CL0ZW04.CL0ZW4I2 >= 0)
    CLMREC.CLMTRTSQ = CL0ZW04.CL0ZW4Q2;
  else
    CLMREC.CLMTRTSQ = 0;
  end
  if (CL0ZW04.CL0ZW4I3 >= 0)
    CLMREC.CLMRMAMT = CL0ZW04.CL0ZW4Q3;
  else
    CLMREC.CLMRMAMT = 0;
  end

  KL0ZS02(); /* get date and time*/

  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    if (CL0ZW01.CL0ZWMSW == "Y") /* if clmrec exists*/
      KL0ZS42(); /* update clmrec*/
    else
      KL0ZS82(); /* insert clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CLXREC.CLXERRF == "Y") /* record already updated*/
    return;
  end

  CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/

  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY - CL0ZW01.CL0ZWRT1; /* old rts qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY + CL0ZW01.CL0ZWRT2; /* new rts qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY - CL0ZW01.CL0ZWNT1; /* old nocred qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY + CL0ZW01.CL0ZWNT2; /* new nocred qty*/
  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL - CL0ZW01.CL0ZWGT1; /* old grs price*/
  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL + CL0ZW01.CL0ZWGT2; /* new grs price*/

  CL0ZW01.CL0ZWRT1 = 0; /* old rts qty*/
  CL0ZW01.CL0ZWRT2 = 0; /* new rts qty*/
  CL0ZW01.CL0ZWNT1 = 0; /* old nocred qty*/
  CL0ZW01.CL0ZWNT2 = 0; /* new nocred qty*/
  CL0ZW01.CL0ZWGT1 = 0; /* old nocred qty*/
  CL0ZW01.CL0ZWGT2 = 0; /* new nocred qty*/

end // end KL0ZS81

// insert clmrec
Function KL0ZS82()

  CLXREC.CLXCPROC = "CL0ZS82";
  SQLCA.VAGen_SQLCODE = 0;

  call "IO1320" ("A ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1;
    if (CL0ZW01.CL0ZWDCT > 2)
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      converseLib.validationFailed(4); /* database busy*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS82"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VRTSHD01"; /* table view*/
  CLXREC.XXXWDTE = CLMREC.CLACLMNB; /* claim number*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS82

// move fields to clarec
Function KL0ZS83()

  CLXREC.CLXCPROC = "CL0ZS83";

  KL0ZS02(); /* get date and time*/

  CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  if (KL0ZM010.CL0ZMINF == "Y") /* if inspection complete*/
    if (CLAREC.CLYATHID != 0) /* chg 'and' to 'if' 062089*/
      CLAREC.YCSACTCD = "J"; /* send claim to batch*/
       /* below added 062089*/
    else
      if (CLAREC.YCSCD1 == "RAA"
       || CLAREC.YCSCD1 == "RIP"
       || CLAREC.YCSCD1 == "RPA")
        if (CLAREC.YCSCD1 != "RPA")
          CLAREC.YCSCD2 = CLAREC.YCSCD1; /* hold previous*/
        end
        CLAREC.YCSCD1 = "RPA"; /* return pending authorization*/
        if (CLAREC.YCSCD1 in YCSTBL.YCSCD
         && YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
        else
          CLAREC.YCSACTCD = "A"; /* hard-code activity*/
        end
        CLAREC.CLASCGBY = COMMAREA.CAUSERID; /* 062989*/
        CLAREC.CLASTTDT = TA2REC.TA2GRGGN; /* 062989*/
      end
       /* above added 062089*/
    end
  end

  if (CL0ZW01.CLACISNB > 0
   && CL0ZW01.CL0ZWNSW == "Y")
    CLAREC.CLACISNB = CL0ZW01.CLACISNB;
  end

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS44(); /* update clarec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end


  if (CL0ZW01.CL0ZWSAM == "Y") /* if sales sample claim, update the*/
    KL0ZS4B(); /* secondary sales sample claim header*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CL0ZW01.CLACISNB = 0;

end // end KL0ZS83

// build cl0zm010 screen
Function KL0ZS84()
   /* ***************************************************/
   /* 11/30/93  jcarey  added code to move upc quantity*/
   /* from clmrec to map.*/
   /* ***************************************************/

  CLXREC.CLXCPROC = "CL0ZS84";

   /* **************************************************/
              /* select clmrec*/

  CLMREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLMREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLMREC.CLHSEQNB = KL0ZM010.CLHSEQNB;

  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS30(); /* select clmrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    KL0ZM010.CLMRTGQ = CLMREC.CLMRTGQ;
    KL0ZM010.CLMUNLQ = CLMREC.CLMUNLQ;
    KL0ZM010.CLMRBXQ = CLMREC.CLMRBXQ;
    KL0ZM010.CLMRBGQ = CLMREC.CLMRBGQ;
    KL0ZM010.CLMRMAMT = CLMREC.CLMRMAMT;
    KL0ZM010.CL-UPC-LABL-QTY = CLMREC.CL-UPC-LABL-QTY;
  else
    KL0ZM010.CLMRTGQ = 0;
    KL0ZM010.CLMUNLQ = 0;
    KL0ZM010.CLMRBXQ = 0;
    KL0ZM010.CLMRBGQ = 0;
    KL0ZM010.CL-UPC-LABL-QTY = 0;
    KL0ZM010.CLMRMAMT = 0;
  end

   /* **************************************************/
     /* select return auth comments and insp comments*/

  KL0ZM010.CL0ZMRAC[1] = " ";
  KL0ZM010.CL0ZMRAC[2] = " ";
  KL0ZM010.CL0ZMRAC[3] = " ";
  KL0ZM010.CL0ZMRAC[4] = " ";
  KL0ZM010.CL0ZMINC[1] = " ";
  KL0ZM010.CL0ZMINC[2] = " ";
  KL0ZM010.CL0ZMINC[3] = " ";
  CL0ZW01.CLGCMSEQ[1] = 0;
  CL0ZW01.CLGCMSEQ[2] = 0;
  CL0ZW01.CLGCMSEQ[3] = 0;
  CL0ZW01.CL0ZWCHG[1] = 0;
  CL0ZW01.CL0ZWCHG[2] = 0;
  CL0ZW01.CL0ZWCHG[3] = 0;

  CLGREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLGREC.CLGCMTYP = "R "; /* comment type*/
  CL0ZW03.CL0ZW3SQ = "SS";
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS21(); /* select cursor clgrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CLXREC.CLXLINEX = 1;
  CL0ZW01.CL0ZWEND = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS85(); /* select next clgrec*/
  end

  CL0ZW03.CL0ZW3SQ = "CS";
  KL0ZS21();


  CLGREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLGREC.CLGCMTYP = "I "; /* comment type*/
  CL0ZW03.CL0ZW3SQ = "SS";
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS21(); /* select cursor clgrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
    return;
  end

  CLXREC.CLXLINEX = 1;
  CL0ZW01.CL0ZWEND = "N";

  while (CL0ZW01.CL0ZWEND == "N")
    KL0ZS85(); /* select next clgrec*/
  end

  CL0ZW03.CL0ZW3SQ = "CS";
  KL0ZS21();


   /* **************************************************/
               /* select address*/

  KL0ZS86(); /* select address*/


   /* **************************************************/
               /* set security*/

  KL0ZS88(); /* set security*/

   /* **************************************************/
   /* protect tag removal, reboxing and rebaggind quantity if*/
   /* this is a sales sample claim.*/

  if (CL0ZW01.CL0ZWSAM == "Y")
    set KL0ZM010.CLMRTGQ skip;
    set KL0ZM010.CLMRBXQ skip;
    set KL0ZM010.CLMRBGQ skip;
    set KL0ZM010.CLMUNLQ cursor;
    set KL0ZM010.CL-UPC-LABL-QTY skip;
  end

end // end KL0ZS84

// select rtn auth commnts clgrec
Function KL0ZS85()

  CLXREC.CLXCPROC = "CL0ZS85";

  CL0ZW03.CL0ZW3SQ = "SN";

  KL0ZS21(); /* select next clgrec*/

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWEND = "Y";
    return;
  end

  if (CLGREC.CLGCMTYP == "R")
    CLXREC.CLXLINEX = CLGREC.CLGCMSEQ;
    KL0ZM010.CL0ZMRAC[CLXLINEX] = CLGREC.CLGCOMNT;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (CLXREC.CLXLINEX > 4)
      CL0ZW01.CL0ZWEND = "Y";
      return;
    end
  end

  if (CLGREC.CLGCMTYP == "I")
    CLXREC.CLXLINEX = CLGREC.CLGCMSEQ;
    KL0ZM010.CL0ZMINC[CLXLINEX] = CLGREC.CLGCOMNT;
    CL0ZW01.CLGCMSEQ[CLXLINEX] = CLGREC.CLGCMSEQ;
    CL0ZW01.CL0ZWCHG[CLXLINEX] = CLGREC.ZZZCHGCT;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (CLXREC.CLXLINEX > 3)
      CL0ZW01.CL0ZWEND = "Y";
      return;
    end
  end

end // end KL0ZS85

// select address
Function KL0ZS86()
   /* ************************************************************/
   /* *        get and format the return-to address             **/
   /* *  valid values for clartnff are 's' and 'e'              **/
   /* *  's' means default from shipto address                  **/
   /* *  'e' means user entered the data                        **/
   /* *                                                         **/
   /* *** Maintenance Log *****************************************/
   /* 03-11-94  BCourt  Rename CLFREC.XXXADDRn to XXX-ADDRn.    **/
   /* Note do NOT rename map from XXXADDRn since it's 30 char**/
   /* Name with '-' is 38 chars, yet Claims uses just 30 char**/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0ZS86";

  set CLFREC empty;

  CLFREC.CLACLMNB = CLAREC.CLACLMNB;

  if (CLAREC.CLARTNFF == "S") /* return to is ship to*/
    if (CLAREC.CLASHPFF == "I") /* if ship-to not from invoice*/
      IV5REC.IV0PARTN = CLAREC.IV0PARTN;
      IV5REC.IV0IVCID = CLAREC.IV0IVCID;
      call "IO1050" ("S ", SQLCA, IV5REC) {isNoRefresh = yes, isExternal = yes}; /* inv address record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLFREC.CLFADNM = IV5REC.IV5SHPNM;
        CLFREC.XXX-ADDR1 = IV5REC.IV5SHPA1; /* 3-11-94 rename*/
        CLFREC.XXX-ADDR2 = IV5REC.IV5SHPA2; /* to db2 names*/
        CLFREC.XXX-ADDR3 = IV5REC.IV5SHPA3;
        CLFREC.XXXCITY = IV5REC.IV5SHPCT;
        CLFREC.XSTCD = IV5REC.IV5SHPST;
        CLFREC.XXXZIP = IV5REC.IV5SHPZP;
        CLFREC.XCTCD = IV5REC.IV5SHPCY;
      else
        TA1REC.TA1TBLKE = "GETTING INVOICE ADDRESS";
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVADR01";
        XPCL010();
      end
    else
      CLFREC.CLFADTYP = "S"; /* want claim shipto address*/
    end
  else
    CLFREC.CLFADTYP = "R"; /* want return to address*/
  end

  if (CLFREC.CLFADNM == " ") /* if didnt get invoice address*/
    CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/
    CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/

    while (CL0ZW01.CL0ZWDFL == "Y")
      KL0ZS10(); /* select clfrec*/
    end

    if (CL0ZW01.CL0ZWDCT > 0) /* if deadlock exists*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* cannot locate*/
    converseLib.validationFailed(156); /* cannot find return to address*/
    return;
  end

  KL0ZM010.CLFADNM = CLFREC.CLFADNM;
  KL0ZM010.XXXADDR1 = CLFREC.XXX-ADDR1; /* 3-11-94 rename*/
  KL0ZM010.XXXADDR2 = CLFREC.XXX-ADDR2; /* to db2 names*/
  KL0ZM010.XXXADDR3 = CLFREC.XXX-ADDR3;
  KL0ZM010.XXXCITY = CLFREC.XXXCITY;
  KL0ZM010.XSTCD = CLFREC.XSTCD;
  KL0ZM010.XXXZIP = CLFREC.XXXZIP;
  KL0ZM010.XCTCD = CLFREC.XCTCD;

end // end KL0ZS86

// check security using ycicd
Function KL0ZS88()
   /* *********************************************************/
   /*  */
   /* 11/30/93  jcarey  added code to protect upc quantity*/
   /* when inspection not complete.*/
   /* *********************************************************/

  CLXREC.CLXCPROC = "CL0ZS88";

  set KL0ZM010.CLMRBGQ initialAttributes;
  set KL0ZM010.CLMRBXQ initialAttributes;
  set KL0ZM010.CLMRTGQ initialAttributes;
  set KL0ZM010.CLMUNLQ initialAttributes;
  set KL0ZM010.CL-UPC-LABL-QTY initialAttributes;
  set KL0ZM010.CLFADNM initialAttributes;
  set KL0ZM010.XXXADDR1 initialAttributes;
  set KL0ZM010.XXXADDR2 initialAttributes;
  set KL0ZM010.XXXADDR3 initialAttributes;
  set KL0ZM010.XXXCITY initialAttributes;
  set KL0ZM010.XSTCD initialAttributes;
  set KL0ZM010.XXXZIP initialAttributes;
  set KL0ZM010.XCTCD initialAttributes;
  set KL0ZM010.CL0ZMINC[1] initialAttributes;
  set KL0ZM010.CL0ZMINC[2] initialAttributes;
  set KL0ZM010.CL0ZMINC[3] initialAttributes;
  set KL0ZM010.CL0ZMINF initialAttributes;
  set KL0ZM010.CL0ZMRST initialAttributes;

  KL0ZS03(); /* check security*/
  CL0ZW01.CL0ZWUPP = "N";

  if (CL0ZW01.CL0ZWUDF == "Y") /* security flag set to update*/
    if (KL0ZM010.YCICD == "IIP") /* allow full update*/
      /* next sentence*/
    else
      if (KL0ZM010.YCICD == "RMO")
        CL0ZW01.CL0ZWUPP = "Y"; /* partial update flag*/
        set KL0ZM010.CLMRBGQ skip; /* allow updt of rel stock flag only*/
        set KL0ZM010.CLMRBXQ skip;
        set KL0ZM010.CLMRTGQ skip;
        set KL0ZM010.CLMUNLQ skip;
        set KL0ZM010.CL-UPC-LABL-QTY skip;
        set KL0ZM010.CLFADNM skip;
        set KL0ZM010.XXXADDR1 skip;
        set KL0ZM010.XXXADDR2 skip;
        set KL0ZM010.XXXADDR3 skip;
        set KL0ZM010.XXXCITY skip;
        set KL0ZM010.XSTCD skip;
        set KL0ZM010.XXXZIP skip;
        set KL0ZM010.XCTCD skip;
        set KL0ZM010.CL0ZMINC[1] skip;
        set KL0ZM010.CL0ZMINC[2] skip;
        set KL0ZM010.CL0ZMINC[3] skip;
        set KL0ZM010.CL0ZMINF skip;
      else
        if (KL0ZM010.YCICD == "RSO")
          CL0ZW01.CL0ZWUPP = "Y"; /* partial update flag*/
          set KL0ZM010.CL0ZMRST skip;
        else
          if (KL0ZM010.YCICD == "RMS" /* all data protected*/
           || KL0ZM010.YCICD == "CMP")
            set KL0ZM010.CLMRBGQ skip;
            set KL0ZM010.CLMRBXQ skip;
            set KL0ZM010.CLMRTGQ skip;
            set KL0ZM010.CLMUNLQ skip;
            set KL0ZM010.CL-UPC-LABL-QTY skip;
            set KL0ZM010.CLFADNM skip;
            set KL0ZM010.XXXADDR1 skip;
            set KL0ZM010.XXXADDR2 skip;
            set KL0ZM010.XXXADDR3 skip;
            set KL0ZM010.XXXCITY skip;
            set KL0ZM010.XSTCD skip;
            set KL0ZM010.XXXZIP skip;
            set KL0ZM010.XCTCD skip;
            set KL0ZM010.CL0ZMINC[1] skip;
            set KL0ZM010.CL0ZMINC[2] skip;
            set KL0ZM010.CL0ZMINC[3] skip;
            set KL0ZM010.CL0ZMINF skip;
            set KL0ZM010.CL0ZMRST skip;
            CL0ZW01.CL0ZWUDF = "N";
          else
            set KL0ZM010.CLMRBGQ skip;
            set KL0ZM010.CLMRBXQ skip;
            set KL0ZM010.CLMRTGQ skip;
            set KL0ZM010.CLMUNLQ skip;
            set KL0ZM010.CL-UPC-LABL-QTY skip;
            set KL0ZM010.CLFADNM skip;
            set KL0ZM010.XXXADDR1 skip;
            set KL0ZM010.XXXADDR2 skip;
            set KL0ZM010.XXXADDR3 skip;
            set KL0ZM010.XXXCITY skip;
            set KL0ZM010.XSTCD skip;
            set KL0ZM010.XXXZIP skip;
            set KL0ZM010.XCTCD skip;
            set KL0ZM010.CL0ZMINC[1] skip;
            set KL0ZM010.CL0ZMINC[2] skip;
            set KL0ZM010.CL0ZMINC[3] skip;
            set KL0ZM010.CL0ZMINF skip;
            set KL0ZM010.CL0ZMRST skip;
            CL0ZW01.CL0ZWUDF = "N";
          end
        end
      end
    end
  else
    set KL0ZM010.CLMRBGQ skip;
    set KL0ZM010.CLMRBXQ skip;
    set KL0ZM010.CLMRTGQ skip;
    set KL0ZM010.CLMUNLQ skip;
    set KL0ZM010.CL-UPC-LABL-QTY skip;
    set KL0ZM010.CLFADNM skip;
    set KL0ZM010.XXXADDR1 skip;
    set KL0ZM010.XXXADDR2 skip;
    set KL0ZM010.XXXADDR3 skip;
    set KL0ZM010.XXXCITY skip;
    set KL0ZM010.XSTCD skip;
    set KL0ZM010.XXXZIP skip;
    set KL0ZM010.XCTCD skip;
    set KL0ZM010.CL0ZMINC[1] skip;
    set KL0ZM010.CL0ZMINC[2] skip;
    set KL0ZM010.CL0ZMINC[3] skip;
    set KL0ZM010.CL0ZMINF skip;
    set KL0ZM010.CL0ZMRST skip;
    CL0ZW01.CL0ZWUDF = "N";
  end

  if (CL2REC.YCICD != "CMP")
    if (CL0ZW01.CL0ZWUDF == "N"
     || CL0ZW01.CL0ZWUPP == "Y")
      if (CL2REC.CL2ISXDT == CLXREC.XXXCDTE)
        set KL0ZM010.CL0ZMINF initialAttributes;
      end
    end
  end

end // end KL0ZS88

// total up qty from clqrec
Function KL0ZS89()
   /* *******************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                  **/
   /* *----------------------------------------------------------------**/
   /* * 10-21-93  GDECKE  REMOVED OVERLAPPING MOVE STMT.               **/
   /* *******************************************************************/

  CLXREC.CLXCPROC = "CL0ZS89";

  CLNREC.CLNRTSQ = 0;
  CLNREC.CLNNCRQ = 0;
  CL0ZW01.CL0ZWFLC = "N"; /* init found line in w05 flag*/
  CL0ZW01.CL0ZWIDX = 1;

  while (CL0ZW05.SY5SZID[CL0ZWIDX] != 0
   && CL0ZWIDX <= CL0ZW01.CL0ZWSXM)

    if (CL0ZW01.CL0ZWSAM == "Y")
                                   /* if sales sample claim match sz-id&uom*/
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[CL0ZWIDX]
       && KL0ZM005.CL0ZMXUM[CLXLINEX] == CL0ZW05.XUMCD[CL0ZWIDX])
        CLNREC.CLNRTSQ = CLNREC.CLNRTSQ + CL0ZW05.CLNRTSQ[CL0ZWIDX];
        CLNREC.CLNNCRQ = CLNREC.CLNNCRQ + CL0ZW05.CLNNCRQ[CL0ZWIDX];
        if (CL0ZW05.YDRCD[CL0ZWIDX] != "  ")
          CLNREC.YDRCD = CL0ZW05.YDRCD[CL0ZWIDX];
        end
      end

    else
      if (KL0ZM005.SY4IDDSC[CLXLINEX] == CL0ZW05.SY4IDDSC[CL0ZWIDX])
        CLNREC.CLNRTSQ = CLNREC.CLNRTSQ + CL0ZW05.CLNRTSQ[CL0ZWIDX];
        CLNREC.CLNNCRQ = CLNREC.CLNNCRQ + CL0ZW05.CLNNCRQ[CL0ZWIDX];
        if (CL0ZW05.YDRCD[CL0ZWIDX] != "  ")
          CLNREC.YDRCD = CL0ZW05.YDRCD[CL0ZWIDX];
        end
      end
    end

    CL0ZWIDX = CL0ZWIDX + 1; /* bounce index and test next line*/
  end

end // end KL0ZS89

// move fields to clmrec-sls samp
Function KL0ZS8A()

  CLXREC.CLXCPROC = "CL0ZS81";

  CLMREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
  CLMREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
  CLMREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS30(); /* select clmrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWMSW = "Y"; /* if clmrec exists*/
  else
    CL0ZW01.CL0ZWMSW = "N";
    set CLMREC empty;
    CLMREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
    CLMREC.CL2ISNBR = KL0ZM005.CL2ISNBR;
    CLMREC.CLHSEQNB = KL0ZM005.CLHSEQNB;
    CLMREC.CLMTOGL1 = "N";
    CLMREC.CLMTOGL2 = "N";
  end

  set CL0ZW04 empty;
  CL0ZW04.CL0ZW4SQ = "SM";
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS13(); /* sum clnrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CL0ZW04.CL0ZW4I1 >= 0)
    CLMREC.CLMTNCRQ = CL0ZW04.CL0ZW4Q1;
  else
    CLMREC.CLMTNCRQ = 0;
  end
  if (CL0ZW04.CL0ZW4I2 >= 0)
    CLMREC.CLMTRTSQ = CL0ZW04.CL0ZW4Q2;
  else
    CLMREC.CLMTRTSQ = 0;
  end
  if (CL0ZW04.CL0ZW4I3 >= 0)
    CLMREC.CLMRMAMT = CL0ZW04.CL0ZW4Q3;
  else
    CLMREC.CLMRMAMT = 0;
  end

  KL0ZS02(); /* get date and time*/

  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    if (CL0ZW01.CL0ZWMSW == "Y") /* if clmrec exists*/
      KL0ZS42(); /* update clmrec*/
    else
      KL0ZS82(); /* insert clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (CLXREC.CLXERRF == "Y") /* record already updated*/
    return;
  end

  CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/

  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY - CL0ZW01.CL0ZWRT1; /* old rts qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY + CL0ZW01.CL0ZWRT2; /* new rts qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY - CL0ZW01.CL0ZWNT1; /* old nocred qty*/
  CL0ZW01.CLATQTY = CL0ZW01.CLATQTY + CL0ZW01.CL0ZWNT2; /* new nocred qty*/
  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL - CL0ZW01.CL0ZWGT1; /* old grs price*/
  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL + CL0ZW01.CL0ZWGT2; /* new grs price*/

  CL0ZW01.CL0ZWRT1 = 0; /* old rts qty*/
  CL0ZW01.CL0ZWRT2 = 0; /* new rts qty*/
  CL0ZW01.CL0ZWNT1 = 0; /* old nocred qty*/
  CL0ZW01.CL0ZWNT2 = 0; /* new nocred qty*/
  CL0ZW01.CL0ZWGT1 = 0; /* old nocred qty*/
  CL0ZW01.CL0ZWGT2 = 0; /* new nocred qty*/

end // end KL0ZS8A

// edit address fields
Function KL0ZS90()
   /* *************************************************************/
   /* *****  e d i t    a d d r e s s    o n    s c r e e n  ******/
   /* *************************************************************/


   /* ****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *-------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                               **/
   /* *-------------------------------------------------------------**/
   /* * 01-13-92  sgorga  Set xa0aw02 empty.                        **/
   /* * 11-12-93  GDECKE CHANGE XA0AW02.XXXADDRn TO XA0AW02.XXX-ADDRn*/
   /* *                   FOR NOV. 93' DB2 TABLE CHANGES.           **/
   /* ****************************************************************/

  CLXREC.CLXCPROC = "CL0ZS90";

  set XA0AW02 empty;
   /* ****** move address fields to address application rec *******/
  XA0AW02.XXX-ADDR1 = KL0ZM010.XXXADDR1;
  XA0AW02.XXX-ADDR2 = KL0ZM010.XXXADDR2;
  XA0AW02.XXX-ADDR3 = KL0ZM010.XXXADDR3;
  XA0AW02.XXXCITY = KL0ZM010.XXXCITY;
  XA0AW02.XSTCD = KL0ZM010.XSTCD;
  XA0AW02.XXXZIP = KL0ZM010.XXXZIP;
  XA0AW02.XCTCD = KL0ZM010.XCTCD;
   /* *************************************************************/

  XA0AW02.XA0AWFNC = "E"; /* "edit only" function code*/
  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address application*/

   /* ********** move address fields back to map ******************/
  KL0ZM010.XXXADDR1 = XA0AW02.XXX-ADDR1;
  KL0ZM010.XXXADDR2 = XA0AW02.XXX-ADDR2;
  KL0ZM010.XXXADDR3 = XA0AW02.XXX-ADDR3;
  KL0ZM010.XXXCITY = XA0AW02.XXXCITY;
  KL0ZM010.XSTCD = XA0AW02.XSTCD;
  KL0ZM010.XXXZIP = XA0AW02.XXXZIP;
  KL0ZM010.XCTCD = XA0AW02.XCTCD;
   /* *************************************************************/

   /* **********  determine if any address fields in error  *******/
  if (KL0ZM010.CLFADNM == " ") /* must have a name*/
    set KL0ZM010.CLFADNM cursor, modified, bold; /* name field*/
    converseLib.validationFailed(383); /* address is invalid*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end
  if (XA0AW02.XA0AWERR[8] != 0) /* if error in country field*/
    set KL0ZM010.XCTCD cursor, modified, bold; /* zip code field*/
    converseLib.validationFailed(380); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[7] != 0) /* if error in zip code field*/
    set KL0ZM010.XXXZIP cursor, modified, bold; /* zip code field*/
    converseLib.validationFailed(381); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[6] != 0) /* if error in state code field*/
    set KL0ZM010.XSTCD cursor, modified, bold; /* state code field*/
    converseLib.validationFailed(382); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[5] != 0) /* if error in city field*/
    set KL0ZM010.XXXCITY cursor, modified, bold; /* city field*/
    converseLib.validationFailed(487); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if"statement*/
  if (XA0AW02.XA0AWERR[4] != 0) /* if error in address line 3*/
    set KL0ZM010.XXXADDR3 cursor, modified, bold; /* address line 3 field*/
    converseLib.validationFailed(383); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[3] != 0) /* if error in address line 2*/
    set KL0ZM010.XXXADDR2 cursor, modified, bold; /* address line 2 field*/
    converseLib.validationFailed(383); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[2] != 0) /* if error in address line 1*/
    set KL0ZM010.XXXADDR1 cursor, modified, bold; /* address line 1*/
    converseLib.validationFailed(383); /* move error message number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
  if (XA0AW02.XA0AWERR[1] != 0) /* if any general error sr*/
    converseLib.validationFailed(383); /* move error meaage number*/
    CLXREC.CLXERRF = "Y"; /* error flag*/
  end /* end of "if" statement*/
   /* *************************************************************/


end // end KL0ZS90

// move fields to clmrec
Function KL0ZS91()
   /* *****************************************************************/
   /* maintenance log*/
   /* 04-13-92  twatso  rename clacmind to cl-clcom-fl*/
   /* 11-30-93  jcarey  added code to move the upc quantity to clmrec*/
   /* and to calculate the upc relabeling cost. the*/
   /* amount is then added to the overall*/
   /* remerchandising cost.*/
   /* *****************************************************************/

  CLXREC.CLXCPROC = "CL0ZS91";

  CLMREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLMREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLMREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS30(); /* select clmrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWMSW = "Y"; /* if clmrec exists*/
  else
    CL0ZW01.CL0ZWMSW = "N";
    set CLMREC empty;
    CLMREC.CLACLMNB = KL0ZM010.CLACLMNB;
    CLMREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
    CLMREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
    CLMREC.CLMTOGL1 = "N";
    CLMREC.CLMTOGL2 = "N";
  end

  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL + CLMREC.CLMRMHCG;

  CLMREC.CLMRBGQ = KL0ZM010.CLMRBGQ;
  CLMREC.CLMRBXQ = KL0ZM010.CLMRBXQ;
  CLMREC.CLMRTGQ = KL0ZM010.CLMRTGQ;
  CLMREC.CLMUNLQ = KL0ZM010.CLMUNLQ;
  CLMREC.CL-UPC-LABL-QTY = KL0ZM010.CL-UPC-LABL-QTY;

  CL0ZW01.CLMRMHCG = 0;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRBGQ * CL0ZW01.YRMREBAG;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRBXQ * CL0ZW01.YRMREBOX;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRTGQ * CL0ZW01.YRMTAGRM;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMUNLQ * CL0ZW01.YRMUNLCE;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CL-UPC-LABL-QTY * CL0ZW01.YRM-REUPC-CHG;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;

  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL - CL0ZW01.CLMRMHCG;
  CLMREC.CLMRMHCG = CL0ZW01.CLMRMHCG;
  CLMREC.CLACMIND = CL0ZW01.CL-CLCOM-FL;

  KL0ZS02(); /* get date and time*/

  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    if (CL0ZW01.CL0ZWMSW == "Y") /* if clmrec exists*/
      KL0ZS42(); /* update clmrec*/
    else
      KL0ZS82(); /* insert clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/

end // end KL0ZS91

// delete claim address
Function KL0ZS92()

  CLXREC.CLXCPROC = "CL0ZS92";

  CLFREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLFREC.CLFADTYP = "R";

  call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS92"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS92

// update claim address
Function KL0ZS93()
   /* *** Maintenance Log ****************************************/
   /* 03-11-94  BCOURT  Rename CLFREC.XXXADDRn to XXX-ADDRn.  ***/
   /* Note - do NOT rename map from 30 chars to 38 chars.  ***/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZS93";

  CLFREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLFREC.CLFADTYP = "R";
  CLFREC.CLFADNM = KL0ZM010.CLFADNM;
  CLFREC.XXX-ADDR1 = KL0ZM010.XXXADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KL0ZM010.XXXADDR2; /* to db2 names*/
  CLFREC.XXX-ADDR3 = KL0ZM010.XXXADDR3;
  CLFREC.XXXCITY = KL0ZM010.XXXCITY;
  CLFREC.XSTCD = KL0ZM010.XSTCD;
  CLFREC.XXXZIP = KL0ZM010.XXXZIP;
  CLFREC.XCTCD = KL0ZM010.XCTCD;

  KL0ZS02(); /* get todays date and time*/

  CLFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLFREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  call "IO1250" ("U ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18);
    CLXREC.CLXERRF = "Y";
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS93"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS93

// add claim address
Function KL0ZS94()
   /* ** Maintenance Log ********************************************/
   /* 03-11-94 BCourt Rename CLFREC.xxxaddrn to xxx-addrn.        **/
   /* Do NOT rename map names from 30 to 38 chars.             **/
   /* ***************************************************************/

  CLXREC.CLXCPROC = "CL0ZS94";

  set CLFREC empty;
  CLFREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLFREC.CLFADTYP = "R";
  CLFREC.CLFADNM = KL0ZM010.CLFADNM;
  CLFREC.XXX-ADDR1 = KL0ZM010.XXXADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KL0ZM010.XXXADDR2; /* to db2 names*/
  CLFREC.XXX-ADDR3 = KL0ZM010.XXXADDR3;
  CLFREC.XXXCITY = KL0ZM010.XXXCITY;
  CLFREC.XSTCD = KL0ZM010.XSTCD;
  CLFREC.XXXZIP = KL0ZM010.XXXZIP;
  CLFREC.XCTCD = KL0ZM010.XCTCD;

  KL0ZS02(); /* get todays date and time*/

  CLFREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLFREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(18);
    CLXREC.CLXERRF = "Y";
    CL0ZW01.CL0ZWDFL = "N";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    CL0ZW01.CL0ZWDCT = CL0ZW01.CL0ZWDCT + 1; /* deadlock count*/
    if (CL0ZW01.CL0ZWDCT > 2)
      converseLib.validationFailed(4); /* database busy*/
      CL0ZW01.CL0ZWDFL = "N"; /* deadlock flag*/
      CLXREC.CLXERRF = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "CL0ZS94"; /* location*/
  TA1REC.TA1LOCAT[4] = "IO1250"; /* location*/
  TA1REC.TA1DBASE = "DCLAIM"; /* database*/
  TA1REC.TA1TBLVU = "VCLADR01"; /* table view*/
  CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* company id*/
  TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

  XPCL010(); /* error diagnosis routine*/

end // end KL0ZS94

// update inspection comments
Function KL0ZS95()

  CLXREC.CLXCPROC = "CL0ZS95";

  KL0ZS02(); /* get todays date and time*/
  set CLGREC empty;
  CLGREC.CLACLMNB = KL0ZM010.CLACLMNB;
  CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLGREC.XXXUSRID = COMMAREA.CAUSERID;
  CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CLGREC.CLGCMTYP = "I ";


  CLXREC.CLXLINEX = 1;

  while (CLXREC.CLXLINEX < 4)
    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "D")
      CL0ZW03.CL0ZW3SQ = "D ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end
      CL0ZW01.CLGCMSEQ[CLXLINEX] = 0;
      CL0ZW01.CL0ZWCHG[CLXLINEX] = 0;
    end

    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "A")
      CL0ZW03.CL0ZW3SQ = "A ";
      CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;
      CLGREC.CLGCOMNT = KL0ZM010.CL0ZMINC[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end
      CL0ZW01.CLGCMSEQ[CLXLINEX] = CLXREC.CLXLINEX;
      CL0ZW01.CL0ZWCHG[CLXLINEX] = 0;
    end

    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "C")
      CL0ZW03.CL0ZW3SQ = "S ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CLGREC.ZZZCHGCT = CL0ZW01.CL0ZWCHG[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end

      CL0ZW03.CL0ZW3SQ = "U ";
      CLGREC.CLACLMNB = KL0ZM010.CLACLMNB;
      CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
      CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
      CLGREC.XXXUSRID = COMMAREA.CAUSERID;
      CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      CLGREC.CLGCMTYP = "I ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CLGREC.CLGCOMNT = KL0ZM010.CL0ZMINC[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end

      CL0ZW01.CL0ZWCHG[CLXLINEX] = CL0ZW01.CL0ZWCHG[CLXLINEX] + 1;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

   /* GET CL0VSGE*/



    /* set comment indicator to be updated on clarec*/

  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";

  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vclcom01*/
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLAREC.CLACMIND == "N"
     || CLAREC.CLACMIND == " ")
      CLAREC.CLACMIND = "Y"; /* comments now exist*/
      CL0ZW01.CL0ZWUAR = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (CLAREC.CLACMIND == "Y")
        CLAREC.CLACMIND = "N"; /* comments no longer exist*/
        CL0ZW01.CL0ZWUAR = "Y";
      end
    end
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};


end // end KL0ZS95

// build product summary aray
Function KL0ZS96()

  CLXREC.CLXCPROC = "CL0ZS96";

  set CLPREC empty;
  set CLKREC empty;
  set CLNREC empty;
  set CLJREC empty;
  set CLLREC empty;
  set CL2REC empty;
  set CLGREC empty;
  set KUMREC empty;
  set CLFREC empty;
  set SY1REC empty;
  set SY2REC empty;
  set CL0ZW03 empty;
  set CL0ZW04 empty;
  set CL0ZW02 empty;
  set CL0ZW06 empty;
end // end KL0ZS96

// build size array
Function KL0ZS97()

  CLXREC.CLXCPROC = "CL0ZS97";

  set CLQREC empty;
  set CLNREC empty;
  set CLKREC empty;
  set CL0ZW05 empty;
end // end KL0ZS97

// scan size table - set cl0zpmry
Function KL0ZS98()
   /* scan lines in size table and set the cl0zwpmy*/
   /* flag to 'y' if it is the first occurance of*/
   /* that size in the cl0zw05 table.*/

  CLXREC.CLXCPROC = "CL0ZS98";

  if (CL0ZW05.SY5SZID[CL0ZWIDX] != CL0ZW01.CL0ZWSSZ)
    CL0ZW05.CL0ZWPMY[CL0ZWIDX] = "P";
  end

  CL0ZW01.CL0ZWSSZ = CL0ZW05.SY5SZID[CL0ZWIDX];

  CL0ZW01.CL0ZWIDX = CL0ZW01.CL0ZWIDX + 1;

  if (CL0ZW01.CL0ZWIDX > CL0ZW01.CL0ZWSXM
   || CL0ZW05.SY5SZID == 0)
    CL0ZW01.CL0ZWEND = "Y";
  end

end // end KL0ZS98

// move fields to clmrec
Function KL0ZS9A()
   /* ******************************************************/
   /* move fields to clmrec (vrtshd01) for secondary      **/
   /* sales sample claim.                                 **/
   /* **/
   /* created 11-14-90 by gdecke                          **/
   /* 04-13-92 twatso  rename clacmind to cl-clcom-fl     **/
   /* 11-30-93 jcarey  added code to move upc quantity to **/
   /* clmrec and to calculate the upc    **/
   /* relabeling charge. the amount is   **/
   /* then added to the accumulative     **/
   /* remerchandising amount.            **/
   /* ******************************************************/


  CLXREC.CLXCPROC = "CL0ZS9A";

  CLMREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
  CLMREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLMREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    KL0ZS30(); /* select clmrec*/
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWMSW = "Y"; /* if clmrec exists*/
  else
    CL0ZW01.CL0ZWMSW = "N";
    set CLMREC empty;
    CLMREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
    CLMREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
    CLMREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
    CLMREC.CLMTOGL1 = "N";
    CLMREC.CLMTOGL2 = "N";
  end

  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL + CLMREC.CLMRMHCG;

  CLMREC.CLMRBGQ = KL0ZM010.CLMRBGQ;
  CLMREC.CLMRBXQ = KL0ZM010.CLMRBXQ;
  CLMREC.CLMRTGQ = KL0ZM010.CLMRTGQ;
  CLMREC.CLMUNLQ = KL0ZM010.CLMUNLQ;
  CLMREC.CL-UPC-LABL-QTY = KL0ZM010.CL-UPC-LABL-QTY;

  CL0ZW01.CLMRMHCG = 0;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRBGQ * CL0ZW01.YRMREBAG;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRBXQ * CL0ZW01.YRMREBOX;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMRTGQ * CL0ZW01.YRMTAGRM;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CLMUNLQ * CL0ZW01.YRMUNLCE;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;
  CL0ZW01.CL0ZWRCG = CLMREC.CL-UPC-LABL-QTY * CL0ZW01.YRM-REUPC-CHG;
  CL0ZW01.CLMRMHCG = CL0ZW01.CLMRMHCG + CL0ZW01.CL0ZWRCG;

  CL0ZW01.CLAESTVL = CL0ZW01.CLAESTVL - CL0ZW01.CLMRMHCG;
  CLMREC.CLMRMHCG = CL0ZW01.CLMRMHCG;
  CLMREC.CLACMIND = CL0ZW01.CL-CLCOM-FL;

  KL0ZS02(); /* get date and time*/

  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
  CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

  while (CL0ZW01.CL0ZWDFL == "Y")
    if (CL0ZW01.CL0ZWMSW == "Y") /* if clmrec exists*/
      KL0ZS42(); /* update clmrec*/
    else
      KL0ZS82(); /* insert clmrec*/
    end
  end

  if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
    return;
  end

  CL0ZW01.CL0ZWUAR = "Y"; /* update clarec flag*/

end // end KL0ZS9A

// update inspection comments
Function KL0ZS9B()
   /* ***********************************************************/
   /* * update inspection comments of sales sample secondary   **/
   /* * claim.                                                 **/
   /* *                                                        **/
   /* * created 11-14-90 by gdecke                             **/
   /* *                                                        **/
   /* ***********************************************************/

  CLXREC.CLXCPROC = "CL0ZS9B";

  KL0ZS02(); /* get todays date and time*/
  set CLGREC empty;
  CLGREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
  CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
  CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
  CLGREC.XXXUSRID = COMMAREA.CAUSERID;
  CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CLGREC.CLGCMTYP = "I ";


  CLXREC.CLXLINEX = 1;

  while (CLXREC.CLXLINEX < 4)
    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "D")
      CL0ZW03.CL0ZW3SQ = "D ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end
      CL0ZW01.CLGCMSEQ[CLXLINEX] = 0;
      CL0ZW01.CL0ZWCHG[CLXLINEX] = 0;
    end

    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "A")
      CL0ZW03.CL0ZW3SQ = "A ";
      CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;
      CLGREC.CLGCOMNT = KL0ZM010.CL0ZMINC[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end
      CL0ZW01.CLGCMSEQ[CLXLINEX] = CLXREC.CLXLINEX;
      CL0ZW01.CL0ZWCHG[CLXLINEX] = 0;
    end

    if (CL0ZW01.CL0ZWUCM[CLXLINEX] == "C")
      CL0ZW03.CL0ZW3SQ = "S ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CLGREC.ZZZCHGCT = CL0ZW01.CL0ZWCHG[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end

      CL0ZW03.CL0ZW3SQ = "U ";
      CLGREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
      CLGREC.CLHSEQNB = KL0ZM010.CLHSEQNB;
      CLGREC.CL2ISNBR = KL0ZM010.CL2ISNBR;
      CLGREC.XXXUSRID = COMMAREA.CAUSERID;
      CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      CLGREC.CLGCMTYP = "I ";
      CLGREC.CLGCMSEQ = CL0ZW01.CLGCMSEQ[CLXLINEX];
      CLGREC.CLGCOMNT = KL0ZM010.CL0ZMINC[CLXLINEX];
      CL0ZW01.CL0ZWDCT = 0; /* deadlock count*/
      CL0ZW01.CL0ZWDFL = "Y"; /* deadlock flag*/

      while (CL0ZW01.CL0ZWDFL == "Y")
        KL0ZS21();
      end

      if (CL0ZW01.CL0ZWDCT > 0) /* deadlock exists*/
        return;
      end

      CL0ZW01.CL0ZWCHG[CLXLINEX] = CL0ZW01.CL0ZWCHG[CLXLINEX] + 1;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

   /* GET CL0VSGE*/



    /* set comment indicator to be updated on clarec*/

  CLGREC.CLACLMNB = CL0ZW01.CL0ZWCLM;
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";

  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vclcom01*/
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    CL0ZW01.CL0ZWCMI = "Y"; /* comments now exist*/
    CL0ZW01.CL0ZWUAS = "Y"; /* update clarec for sales sample*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0ZW01.CL0ZWCMI = "N"; /* comments no longer exist*/
      CL0ZW01.CL0ZWUAS = "Y";
                                   /* update clarec for sales sample*/
    end
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};


end // end KL0ZS9B

// Ck for DEF Returned Items
Function KL0ZSDI()
   /* ************************************************************/
   /* *  Check the Claims Defectives Header Table to determine  **/
   /* *  if any items on the claim have been returned DEF.      **/
   /* *  If yes, move 'Y' to the claims-authorized-or-returned- **/
   /* *  items-flag.                                            **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-14-90  sgorga  created                              **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZSDI"; /* set current process name*/
  set CLOREC empty; /* init. clms defective hdr table rec*/
  set SQLCA empty; /* init. sqlca*/
  CLOREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1340" ("SE", SQLCA, CLOREC) {isNoRefresh = yes, isExternal = yes};
                                   /* ck for clm# in row of tbl*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row is found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CL0ZW01.CL0ZWARF = "Y"; /* yes to clm-auth-rtnd-items flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VDEFHD01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0ZSDI

// Ck for Return Authorization
Function KL0ZSRA()
   /* ************************************************************/
   /* *  Check the Claims Return Authorization Header Table     **/
   /* *  for a unique claim (which means that the claim was     **/
   /* *  authorized for return).                                **/
   /* *  If yes, move 'Y' to the claims-authorized-or-returned- **/
   /* *  items-flag.                                            **/
   /* *                                                         **/
   /* *  NOTE:  Although claim nbr is the unique key of the     **/
   /* *  Claims RA Hdr (meaning, if found, the sqlcode should   **/
   /* *  = 0), the test (selecting for existence) in the IO mod **/
   /* *  has the potential to return a -811 (duplicate rows)    **/
   /* *  sqlcode.  If a -811 is returned, it will be treated as **/
   /* *  though there are authorized products (so 'Y' will be   **/
   /* *  moved to the CL0ZWARF flag.                            **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-14-90  sgorga  created                              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZSRA"; /* set current process name*/
  set CLJREC empty; /* init. working storage rec*/
  set SQLCA empty; /* init. sqlca*/
  CLJREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* select unique record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if record found*/
    if (CLJREC.CLJRAIND == "Y") /* if the auth. items indicator = yes*/
      CL0ZW01.CL0ZWARF = "Y"; /* yes, items auth/rtnd flag*/
    else
       /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      CL0ZW01.CL0ZWARF = "Y"; /* yes, items auth/rtnd flag*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if record not found*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
        TA1REC.TA1TBLVU = "VRAHDR01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
        XPCL010(); /* standard abend routine for claims*/
      end
    end
  end
end // end KL0ZSRA

// Ck for RTS Returned Items
Function KL0ZSRI()
   /* ************************************************************/
   /* *  Check the Claims RTS Item Header Table to find out if  **/
   /* *  any items on the claim have been returned RTS.         **/
   /* *  If yes, move 'Y' to the claims-authorized-or-returned- **/
   /* *  items-flag.                                            **/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *  02-14-90  sgorga  created                              **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0ZSRI"; /* SET CURRENT PROCESS NAME*/
  set CLMREC empty; /* init. clms rts header table rec*/
  set SQLCA empty; /* init. sqlca*/
  CLMREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  call "IO1320" ("SE", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};
                                   /* ck for clm# in row of tbl*/

  if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows found*/
    CL0ZW01.CL0ZWARF = "Y"; /* yes to clm-auth-rtnd-items flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VRTSHD01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0ZSRI

// Search for Sample Rtn Comments
Function KL0ZSSC()
   /* ***********************************************************/
   /* *  Check the Claims Comments Table for Sample Return     **/
   /* *  claim pair comment(claim type code = 'S ') on a claim.**/
   /* *  If found move comment to cl0zw01 for use showing on   **/
   /* *  map cl0zm001.                                         **/
   /* ***********************************************************/
   /* *  MAINTENANCE HISTORY                                   **/
   /* *  10-16-90  gdecke  created                             **/
   /* ***********************************************************/
  CLXREC.CLXCPROC = "CL0ZSSC"; /* set current process name*/
  set CLGREC empty; /* init. claims comment record*/
  set SQLCA empty; /* init. sqlca*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB; /* claim nbr*/
  CLGREC.CLHSEQNB = 1; /* claim sequence number*/
  CLGREC.CL2ISNBR = 0; /* inspection number*/
  CLGREC.CLGCMSEQ = 1; /* comment sequence number*/
  CLGREC.CLGCMTYP = "S ";
                                   /* look for only claim-hdr type comments*/
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes}; /* CK FOR CLM HDR COMMENTS*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    CL0ZW01.CLGCOMNT = CLGREC.CLGCOMNT; /* move comment to w/s table*/
    CL0ZW01.CL0ZWSAM = "Y"; /* turn on sample claim indicator*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
      CL0ZW01.CLGCOMNT = " "; /* clear comment on w/s table*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* bad sql code, so abend*/
      TA1REC.TA1TBLVU = "VCLCOM01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB; /* move to num field*/
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* and then to key*/
      XPCL010(); /* std abend routine for claims*/
    end
  end
end // end KL0ZSSC

//*** RECORD=CL0ZW01 ****
// *********  Working Storage Record for CL0Z  ****************
// ************************************************************
// *   M A I N T E N A N C E    H I S T O R Y    L O G        *
// *----------------------------------------------------------*
// * CHNG#    DATE    PGMR    DESCRIPTION                     *
// *----------------------------------------------------------*
// * #CL0    09/16/91 GDECKE  ADDED NEW FIELDS FOR COST LOOKUP*
// * #CL0    03/13/92 GDECKE  ADDED NEW FIELDS FOR MAR TBL CHG*
// * #CLO    11/30/93 JCAREY  ADDED YRM-REUPC-CHG TO RECORD.
// 03-11-94  BCourt  Add group item for overall length.
// ************************************************************
// ***********************
Record CL0ZW01 type basicRecord
  5 CL0ZW01G CL0ZW01G ; 
    10 CL0ZWDCT CL0ZWDCT ; 
    10 CL0ZWCNT CL0ZWCNT ; 
    10 CL0ZWFSZ CL0ZWFSZ ; 
    10 CL0ZWRSW CL0ZWRSW ; 
    10 CL0ZWLSZ CL0ZWLSZ ; 
    10 CL0ZWHPC CL0ZWHPC ; 
    10 CL0ZWCRQ CL0ZWCRQ ; 
    10 CL0ZWHST CL0ZWHST ; 
    10 CL0ZWTL1 CL0ZWTL1 ; 
    10 CL0ZWTL2 CL0ZWTL2 ; 
    10 CL0ZWTL3 CL0ZWTL3 ; 
    10 CL0ZWTL4 CL0ZWTL4 ; 
    10 CL0ZWTL5 CL0ZWTL5 ; 
    10 CL0ZWCLF CL0ZWCLF ; 
    10 CL0ZWEOF CL0ZWEOF ; 
    10 CL0ZWCMD CL0ZWCMD ; 
    10 CL0ZWWNG CL0ZWWNG [10] ; 
    10 CL0ZW7SW CL0ZW7SW ; 
    10 CL0ZWOFL CL0ZWOFL ; 
    10 CL0ZWQSW CL0ZWQSW ; 
    10 CL0ZWZNE CL0ZWZNE ; 
    10 CL0ZWLCN CL0ZWLCN ; 
    10 CL0ZWXAR CL0ZWXAR ; 
    10 XXXSTAT XXXSTAT ; 
    10 CL0ZWVFL CL0ZWVFL [1450] ; 
    10 CL0ZWSKP CL0ZWSKP [1450] ; 
    10 CL0ZWAPD CL0ZWAPD [10] ; 
    10 CL0ZWOWH CL0ZWOWH ; 
    10 CL0ZWFND CL0ZWFND ; 
    10 CL0ZWNXT CL0ZWNXT ; 
    10 CL0ZWEDT CL0ZWEDT ; 
    10 CL0ZWSTK CL0ZWSTK ; 
    10 CLACISNB CLACISNB ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CLACSQNB CLACSQNB ; 
    10 CLKCRFL CLKCRFL ; 
    10 CL0ZWISP CL0ZWISP ; 
    10 CLGCMSEQ CLGCMSEQ [3] ; 
    10 CL0ZWUCM CL0ZWUCM [3] ; 
    10 CL0ZWNSW CL0ZWNSW ; 
    10 CL0ZWCHG CL0ZWCHG [3] ; 
    10 CL0ZWHLZ CL0ZWHLZ ; 
    10 YRMRESTK YRMRESTK ; 
    10 YRMREBAG YRMREBAG ; 
    10 YRMREBOX YRMREBOX ; 
    10 YRMTAGRM YRMTAGRM ; 
    10 YRMUNLCE YRMUNLCE ; 
    10 YRMDFRGT YRMDFRGT ; 
    10 YRM-REUPC-CHG YRM-REUPC-CHG ; 
    10 CLMRMHCG CLMRMHCG ; 
    10 CL0ZWRCG CL0ZWRCG ; 
    10 CL0ZWHLH CL0ZWHLH ; 
    10 CL0ZWCT CL0ZWCT ; 
    10 CL0ZWTTL CL0ZWTTL ; 
    10 CL0ZWRFL CL0ZWRFL ; 
    10 XWHCD XWHCD ; 
    10 XOWCD XOWCD ; 
    10 XOWKEY XOWKEY ; 
      15 CL0ZWWHS CL0ZWWHS ; 
      15 CL0ZWPOG CL0ZWPOG ; 
    10 CL0ZWRT1 CL0ZWRT1 ; 
    10 CL0ZWRT2 CL0ZWRT2 ; 
    10 CL0ZWNT1 CL0ZWNT1 ; 
    10 CL0ZWNT2 CL0ZWNT2 ; 
    10 CL0ZWGT1 CL0ZWGT1 ; 
    10 CL0ZWGT2 CL0ZWGT2 ; 
    10 CL0ZWGRS CL0ZWGRS ; 
    10 CLKCLPRC CLKCLPRC [10] ; 
    10 CL0ZWPRI CL0ZWPRI ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 CLATQTY CLATQTY ; 
    10 CLAESTVL CLAESTVL ; 
    10 CL0ZWDFL CL0ZWDFL ; 
    10 CL0ZWWRN CL0ZWWRN ; 
    10 CL0ZWASW CL0ZWASW [10] ; 
    10 CL0ZWUPD CL0ZWUPD [10] ; 
    10 CL0ZWUQR CL0ZWUQR [10] ; 
    10 CL0ZWSEQ CL0ZWSEQ [10] ; 
    10 CL0ZWSRF CL0ZWSRF ; 
    10 CL0ZWUDF CL0ZWUDF ; 
    10 CL0ZWHDF CL0ZWHDF ; 
    10 CL0ZWUPP CL0ZWUPP ; 
    10 CL0ZWLST CL0ZWLST ; 
    10 CL0ZWLNX CL0ZWLNX ; 
    10 CL0ZWCYX CL0ZWCYX ; 
    10 CL0ZWIYX CL0ZWIYX ; 
    10 CL0ZWILX CL0ZWILX ; 
    10 CL0ZWISX CL0ZWISX ; 
    10 CL0ZWIXX CL0ZWIXX ; 
    10 CL0ZWPRC CL0ZWPRC ; 
    10 CL0ZWPR1 CL0ZWPR1 ; 
    10 CL0ZWPIX CL0ZWPIX ; 
    10 CL0ZWSIZ CL0ZWSIZ ; 
    10 SY5PRCUN SY5PRCUN ; 
    10 SY4IDDSC SY4IDDSC ; 
    10 SY5SZID SY5SZID [10] ; 
    10 CL0ZWEND CL0ZWEND ; 
    10 CL0ZWSEL CL0ZWSEL ; 
    10 CL0ZWDEL CL0ZWDEL ; 
    10 CL0ZWADD CL0ZWADD ; 
    10 CL0ZWINS CL0ZWINS ; 
    10 CL0ZWALL CL0ZWALL ; 
    10 CL0ZWSAL CL0ZWSAL ; 
    10 CL0ZWDEF CL0ZWDEF ; 
    10 CL0ZWIDX CL0ZWIDX ; 
    10 CL0ZWINX CL0ZWINX ; 
    10 CL0ZWHDX CL0ZWHDX ; 
    10 CL0ZWFST CL0ZWFST ; 
    10 CL0ZWUFR CL0ZWUFR ; 
    10 CL0ZWUJR CL0ZWUJR ; 
    10 CL0ZWUNR CL0ZWUNR ; 
    10 CL0ZWUMR CL0ZWUMR ; 
    10 CL0ZWU2R CL0ZWU2R ; 
    10 CL0ZWUAR CL0ZWUAR ; 
    10 CL0ZW2SW CL0ZW2SW ; 
    10 CL0ZWMSW CL0ZWMSW ; 
    10 CL0ZWKCT CL0ZWKCT ; 
    10 CL0ZWPCT CL0ZWPCT ; 
    10 CL0ZWNCT CL0ZWNCT ; 
    10 CL0ZWRCT CL0ZWRCT ; 
    10 CL0ZWQCT CL0ZWQCT ; 
    10 CL0ZWNBR CL0ZWNBR ; 
    10 CL0ZWRTS CL0ZWRTS [10] ; 
    10 CLNRTSQ CLNRTSQ ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 XARCD2 XARCD2 ; 
    10 CL0ZWSZE CL0ZWSZE ; 
    10 XPGCD XPGCD ; 
    10 CLKAUTHQ CLKAUTHQ ; 
    10 CLNGRPRC CLNGRPRC ; 
    10 CLJNCRFL CLJNCRFL ; 
    10 CL2ISNBR CL2ISNBR [100] ; 
    10 CLHSEQNB CLHSEQNB ; 
    10 CL0ZWHAX CL0ZWHAX ; 
    10 CL0ZWHSZ CL0ZWHSZ ; 
    10 CL0ZWMLN CL0ZWMLN ; 
    10 CL0ZWSCT CL0ZWSCT ; 
    10 CL0ZWIX1 CL0ZWIX1 ; 
    10 CL0ZWIX2 CL0ZWIX2 ; 
    10 CL0ZWIXM CL0ZWIXM ; 
    10 CL0ZWSXM CL0ZWSXM ; 
    10 CLLIDT CLLIDT ; 
    10 PC2INSEG PC2INSEG ; 
    10 XGPCD XGPCD ; 
    10 * char(1) ; 
    10 CL0ZW2GR CL0ZW2GR ; 
      15 CL0ZW2KY CL0ZW2KY ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 CL0ZWGRP CL0ZWGRP ; 
    10 CL0ZW5GP CL0ZW5GP ; 
    10 * char(3) ; 
    10 CL0ZWKY1 CL0ZWKY1 ; 
      15 CL0ZWSZ1 CL0ZWSZ1 ; 
      15 CL0ZWSQ1 CL0ZWSQ1 ; 
    10 * char(1) ; 
    10 CL0ZWKEY CL0ZWKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XUMCD XUMCD ; 
    10 XEGCD XEGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 SL8ZNCD2 SL8ZNCD2 ; 
    10 SL8LCCD2 SL8LCCD2 ; 
    10 SL8LCCD1 SL8LCCD1 ; 
      20 CL0ZWCL1 CL0ZWCL1 ; 
      20 CL0ZWCLA CL0ZWCLA ; 
    10 * char(1) ; 
    10 CL0ZWDTE CL0ZWDTE ; 
      15 CL0ZWCEN CL0ZWCEN ; 
      15 CL0ZWDAT CL0ZWDAT ; 
        20 CL0ZWYR CL0ZWYR ; 
        20 CL0ZWMO CL0ZWMO ; 
        20 CL0ZWDA CL0ZWDA ; 
    10 CL0ZWSSZ CL0ZWSSZ ; 
    10 CL0ZWFLC CL0ZWFLC ; 
    10 CL0ZWSTF CL0ZWSTF ; 
    10 CL0ZWARF CL0ZWARF ; 
    10 CL0ZWSAM CL0ZWSAM ; 
    10 CL0ZW1SU CL0ZW1SU ; 
      15 CL0ZW1SZ CL0ZW1SZ ; 
      15 CL0ZW1UM CL0ZW1UM ; 
    10 CL0ZWSSU CL0ZWSSU ; 
    10 CL0ZWRNC CL0ZWRNC ; 
    10 CL0ZWLNC CL0ZWLNC ; 
    10 CL0ZWRCR CL0ZWRCR ; 
    10 CL0ZWLCR CL0ZWLCR ; 
    10 CL0ZWATQ CL0ZWATQ ; 
    10 CL0ZWSTY CL0ZWSTY ; 
    10 CL0ZWCLR CL0ZWCLR ; 
    10 CL0ZWDIM CL0ZWDIM ; 
    10 CL0ZWUAS CL0ZWUAS ; 
    10 CL0ZWCMI CL0ZWCMI ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSCD2 YCSCD2 ; 
    10 YCSCD1 YCSCD1 ; 
    10 CLASCGBY CLASCGBY ; 
    10 CLASTTDT CLASTTDT ; 
    10 CL0ZWISN CL0ZWISN ; 
    10 CLGCOMNT CLGCOMNT ; 
      15 CL0ZWCLM CL0ZWCLM ; 
      15 * char(51) ; 
    10 CL0ZWSTL CL0ZWSTL ; 
    10 CL0ZWBOT CL0ZWBOT ; 
    10 XATCD XATCD ; 
    10 CL0ZWCLP CL0ZWCLP ; 
    10 CL0ZWPCP CL0ZWPCP ; 
    10 SP5SZPR SP5SZPR ; 
    10 CL0ZWSTP CL0ZWSTP ; 
    10 CL0ZWPED CL0ZWPED ; 
end // end CL0ZW01

//*** RECORD=CL0ZW02 ****
// ****    product summary array    ****
// ************************************************************
// *     M A I N T E N A N C E     H I S T O R Y    L O G     *
// *----------------------------------------------------------*
// *  CHNG   DATE    PGMR    DESCRIPTION                      *
// *----------------------------------------------------------*
// *  #CL0  01/05/91 GDECKE  CHANGED NUMBER OF OCCURANCES IN  *
// *                         PRODUCT TABLE TO 1450.           *
// *  #CL0  09/18/91 GDECKE  ADD MAINT HISTORY.               *
// *  #CL0  03/13/92 GDECKE  ADD XEGCD,XBK-BK-SESN-CD,OP-BK-YR*
// *----------------------------------------------------------*
// ***********************
Record CL0ZW02 type basicRecord
  5 CL0ZWKEY CL0ZWKEY [1450] ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XUMCD XUMCD ; 
  5 CL0ZWGRP CL0ZWGRP [1450] ; 
    10 CL0ZWSEL CL0ZWSEL ; 
    10 CLKAUTHQ CLKAUTHQ ; 
    10 CLNRTSQ CLNRTSQ ; 
    10 CL0ZWCRQ CL0ZWCRQ ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 CLPDEFQ CLPDEFQ ; 
    10 XOWCD XOWCD ; 
    10 XEGCD XEGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
end // end CL0ZW02

//*** RECORD=CL0ZW03 ****
// ****  select maximum seq nbr from comments  ****
// ***********************
Record CL0ZW03 type basicRecord
  10 CL0ZW3SQ CL0ZW3SQ ; 
  10 CL0ZW3MX CL0ZW3MX ; 
  10 CL0ZW3ID CL0ZW3ID ; 
end // end CL0ZW03

//*** RECORD=CL0ZW04 ****
// ****   select totals for clnrec   ****
// ***********************
Record CL0ZW04 type basicRecord
  10 CL0ZW4SQ CL0ZW4SQ ; 
  10 CL0ZW4TC CL0ZW4TC ; 
  10 CL0ZW4Q1 CL0ZW4Q1 ; 
  10 CL0ZW4Q2 CL0ZW4Q2 ; 
  10 CL0ZW4Q3 CL0ZW4Q3 ; 
  10 CL0ZW4I1 CL0ZW4I1 ; 
  10 CL0ZW4I2 CL0ZW4I2 ; 
  10 CL0ZW4I3 CL0ZW4I3 ; 
end // end CL0ZW04

//*** RECORD=CL0ZW05 ****
// ****    size detail array    ****
// ;
// ;********************************************************
// ;*  M A I N T E N A N C E    H I S T O R Y    L O G     *
// ;*------------------------------------------------------*
// ;*   DATE     PGMR     DESCRIPTION                      *
// ;*------------------------------------------------------*
// ;* 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES          *
// ;*                     ADD XEGCD,XBK-BK-SESN-CD,OP-BK-YR*
// ;********************************************************
// ;
// ***********************
Record CL0ZW05 type basicRecord
  5 CL0ZW5GP CL0ZW5GP [150] ; 
    10 CL0ZW5SK CL0ZW5SK ; 
      15 SY5SZID SY5SZID ; 
      15 CL0ZWSEQ CL0ZWSEQ ; 
      15 SL8ZNCD1 SL8ZNCD1 ; 
      15 SL8LCCD1 SL8LCCD1 ; 
      15 SL2PALET SL2PALET ; 
    10 CL0ZWPMY CL0ZWPMY ; 
    10 CL0ZW5SU CL0ZW5SU ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 XUMCD XUMCD ; 
    10 CLNRTSQ CLNRTSQ ; 
    10 YDRCD YDRCD ; 
    10 CL0ZWCSQ CL0ZWCSQ ; 
    10 CL0ZWSTQ CL0ZWSTQ ; 
    10 CLKAUTHQ CLKAUTHQ ; 
    10 CLNNCRQ CLNNCRQ ; 
    10 PC2INSEG PC2INSEG ; 
    10 CLACLMNB CLACLMNB ; 
    10 XSLCD XSLCD ; 
    10 XQACD XQACD ; 
    10 XEGCD XEGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
    10 XOWCD XOWCD ; 
    10 XPGCD XPGCD ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CL0ZWLSQ CL0ZWLSQ ; 
    10 SL8ZNCD2 SL8ZNCD2 ; 
    10 SL8LCCD2 SL8LCCD2 ; 
end // end CL0ZW05
//*** RECORD=CL0ZW06 ****
// ****    stock assignment array    ****
// ;                                                          *
// ;***********************************************************
// ;*     M A I N T E N A N C E     H I S T O R Y    L O G    *
// ;*---------------------------------------------------------*
// ;*   DATE     PGMR     DESCRIPTION                         *
// ;*---------------------------------------------------------*
// ;* 03-13-92   GDECKE   ADD XEGCD, XBK-BK-SESN-CD, OP-BK-YR *
// ;*                                                         *
// ;***********************************************************
// ***********************
Record CL0ZW06 type basicRecord
  10 SY5SZID SY5SZID [150] ; 
  10 CL0ZWLC2 CL0ZWLC2 [150] ; 
    15 SL8ZNCD2 SL8ZNCD2 ; 
    15 SL8LCCD2 SL8LCCD2 ; 
    15 XARCD2 XARCD2 ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XPGCD XPGCD ; 
  10 CL0ZWLC1 CL0ZWLC1 ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 XARCD XARCD ; 
    15 CL0ZW6QA CL0ZW6QA ; 
    15 CL0ZW6OW CL0ZW6OW ; 
    15 CL0ZW6PG CL0ZW6PG ; 
  10 CL0ZWLC3 CL0ZWLC3 [150] ; 
    15 XEGCD XEGCD ; 
    15 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    15 OP-BK-YR OP-BK-YR ; 
    15 OP-BK-MO OP-BK-MO ; 
end // end CL0ZW06

//*** RECORD=CL0ZW07 ****
// ****   working storage record to access i/o mode 1550   ****
// ***********************
Record CL0ZW07 type basicRecord
  10 CL0ZW7SQ CL0ZW7SQ ; 
  10 CL0ZWLOW CL0ZWLOW ; 
  10 CL0ZWHGH CL0ZWHGH ; 
end // end CL0ZW07

//*** RECORD=CL0ZW08 ****
// ****    select totals for clprec    ****
// ***********************
Record CL0ZW08 type basicRecord
  10 CL0ZW8SQ CL0ZW8SQ ; 
  10 CL0ZW8TC CL0ZW8TC ; 
  10 CL0ZW8Q1 CL0ZW8Q1 ; 
  10 CL0ZW8I1 CL0ZW8I1 ; 
  10 CL0ZW8Q2 CL0ZW8Q2 ; 
  10 CL0ZW8I2 CL0ZW8I2 ; 
  10 CL0ZW8Q3 CL0ZW8Q3 ; 
  10 CL0ZW8I3 CL0ZW8I3 ; 
  10 CL0ZW8Q4 CL0ZW8Q4 ; 
  10 CL0ZW8I4 CL0ZW8I4 ; 
end // end CL0ZW08

//*** RECORD=CL0ZW09 ****
// ****    product summary array    ****
// ***********************
Record CL0ZW09 type basicRecord
  5 SY1SSTNM SY1SSTNM [1450] ; 
  5 SY2CLRAB SY2CLRAB [1450] ; 
end // end CL0ZW09

//*** RECORD=CLQREC ****
// ***************  Claim Stock Locate Table  *****************
// 
// DB2 Table:           DCLAIM.VCLSTK01
// 
// Copylib Member:      DCL00222
// 
// I/O Mod:             IO1360
// 
// Key to DB2 Table:    claclmnb
//                      cl2isnbr
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      sy5szid
// 
// Date Created:        03/01/87
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 03-01-87   PAG       Initial record creation
// 07-20-88  bcourt     add sl-zone-cd2,
//                          sl-loc-cd2,
//                          sl-rlog-plt-nbr
//                      chg cl-seq-nbr to cl-insp-nbr,
//                          xsa-shd-cd to xsl-class-cd,
//                          sl-fr-area to xar-area-cd1,
//                          sl-fr-zone to sl-zone-cd1,
//                          sl-fr-loc to sl-loc-cd1,
//                          sl-to-area to xar-area-cd2
// 06-08-90  JWOOD      REPLACE XSDCD WITH PC2INSEG
// 03-13-92  bcourt     Add SY_UNITS_PER_CASE, XEG_ENGR_DIFF_CD
// 
// **********************
Record CLQREC type basicRecord
  5 CLQGROUP CLQGROUP ; 
    10 CLACLMNB CLACLMNB ; 
    10 CL2ISNBR CL2ISNBR ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY5SZID SY5SZID ; 
    10 XQACD XQACD ; 
    10 XUMCD XUMCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XSLCD XSLCD ; 
    10 XPGCD XPGCD ; 
    10 XWHCD XWHCD ; 
    10 XOWCD XOWCD ; 
    10 CLNRTSQ CLNRTSQ ; 
    10 XARCD1 XARCD1 ; 
    10 SL8ZNCD1 SL8ZNCD1 ; 
    10 SL8LCCD1 SL8LCCD1 ; 
    10 XARCD2 XARCD2 ; 
    10 SL8ZNCD2 SL8ZNCD2 ; 
    10 SL8LCCD2 SL8LCCD2 ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 SL2PALET SL2PALET ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CLQREC

// group item cl0zw01
DataItem CL0ZW01G char(3960)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size/uom group item
DataItem CL0ZW1SU char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id
DataItem CL0ZW1SZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unit of measure code
DataItem CL0ZW1UM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COPY OF CL0ZW02 LINE
DataItem CL0ZW2GR char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STY/COLOR/DIM/XQA/XUM
DataItem CL0ZW2KY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl2rec switch
DataItem CL0ZW2SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io-ind
DataItem CL0ZW3ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io-max
DataItem CL0ZW3MX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem CL0ZW3SQ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator1
DataItem CL0ZW4I1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator2
DataItem CL0ZW4I2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator3
DataItem CL0ZW4I3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total noncr qty
DataItem CL0ZW4Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total rts qty
DataItem CL0ZW4Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total rts price
DataItem CL0ZW4Q3 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem CL0ZW4SQ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total count
DataItem CL0ZW4TC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem CL0ZW5GP char(87)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort key
DataItem CL0ZW5SK char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id/uom to locate line
DataItem CL0ZW5SU char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group
DataItem CL0ZW6OW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// packaging type
DataItem CL0ZW6PG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quality code
DataItem CL0ZW6QA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i/o select
DataItem CL0ZW7SQ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl7rec switch
DataItem CL0ZW7SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator 1
DataItem CL0ZW8I1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 2
DataItem CL0ZW8I2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 3
DataItem CL0ZW8I3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 4
DataItem CL0ZW8I4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total def qty
DataItem CL0ZW8Q1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total non-cr qty
DataItem CL0ZW8Q2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total rtn cust qty
DataItem CL0ZW8Q3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total def price
DataItem CL0ZW8Q4 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem CL0ZW8SQ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total count
DataItem CL0ZW8TC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add flag
DataItem CL0ZWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select all flag
DataItem CL0ZWALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add switch
DataItem CL0ZWAPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-auth-or-rtnd-items-flag
DataItem CL0ZWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add switch
DataItem CL0ZWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total auth qty on cl0zm005
DataItem CL0ZWATQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// POSITION SUMMARY @ TOP/BOTTOM
DataItem CL0ZWBOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem CL0ZWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count
DataItem CL0ZWCHG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first column of location
DataItem CL0ZWCL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all other columns of location
DataItem CL0ZWCLA char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cllrec flag
DataItem CL0ZWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales sample 2nd claim number
DataItem CL0ZWCLM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defaule price by style, color
DataItem CL0ZWCLP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// identifying color
DataItem CL0ZWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim nbr modified flag
DataItem CL0ZWCMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment indic for clarec-sampl
DataItem CL0ZWCMI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count sizes
DataItem CL0ZWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cr quantity
DataItem CL0ZWCRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl-cr-qty
DataItem CL0ZWCSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count blank lines
DataItem CL0ZWCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem CL0ZWCYX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0ZWDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd
DataItem CL0ZWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// deadlock count
DataItem CL0ZWDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defective select flag
DataItem CL0ZWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete flag
DataItem CL0ZWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// deadlock flag
DataItem CL0ZWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem CL0ZWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem CL0ZWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// edit switch
DataItem CL0ZWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of data flag
DataItem CL0ZWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of locations
DataItem CL0ZWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found zn/loc line in w05 tbl
DataItem CL0ZWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// find flag
DataItem CL0ZWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem CL0ZWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size
DataItem CL0ZWFSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CL0ZW02 GROUP ITEM
DataItem CL0ZWGRP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gross price
DataItem CL0ZWGRS decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old gross price
DataItem CL0ZWGT1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new gross price
DataItem CL0ZWGT2 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used with pf7 map m001
DataItem CL0ZWHAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold update flag
DataItem CL0ZWHDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold index
DataItem CL0ZWHDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high date
DataItem CL0ZWHGH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold last size id
DataItem CL0ZWHLH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold first size id
DataItem CL0ZWHLZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold price
DataItem CL0ZWHPC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold ezetst
DataItem CL0ZWHST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used with pf7 map m005
DataItem CL0ZWHSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem CL0ZWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem CL0ZWILX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// insert flag
DataItem CL0ZWINS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem CL0ZWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second sales sample insp nbr
DataItem CL0ZWISN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// insp number
DataItem CL0ZWISP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem CL0ZWISX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first index
DataItem CL0ZWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second index
DataItem CL0ZWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max size of prod array
DataItem CL0ZWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem CL0ZWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem CL0ZWIYX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clkrec count
DataItem CL0ZWKCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product key
DataItem CL0ZWKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size key
DataItem CL0ZWKY1 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0ZWLC1 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0ZWLC2 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STOCK LOCATE GROUP 3
DataItem CL0ZWLC3 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location
DataItem CL0ZWLCN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// left uom total credit qty
DataItem CL0ZWLCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// left uom total ncr quantity
DataItem CL0ZWLNC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line index
DataItem CL0ZWLNX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low date
DataItem CL0ZWLOW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last seq nbr used
DataItem CL0ZWLSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last index in size array
DataItem CL0ZWLST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size
DataItem CL0ZWLSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines for m005
DataItem CL0ZWMLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0ZWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clmrec switch
DataItem CL0ZWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// insp nbr
DataItem CL0ZWNBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clnrec count for product
DataItem CL0ZWNCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clnrec switch
DataItem CL0ZWNSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old nocred qty
DataItem CL0ZWNT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new nocred qty
DataItem CL0ZWNT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next location flag
DataItem CL0ZWNXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group flag
DataItem CL0ZWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one whse flag
DataItem CL0ZWOWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL_CLM_PRC
DataItem CL0ZWPCP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clprec count
DataItem CL0ZWPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT PRICE EFFECTIVE DATE
DataItem CL0ZWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price index
DataItem CL0ZWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first of multiple zn/loc's
DataItem CL0ZWPMY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group code
DataItem CL0ZWPOG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price
DataItem CL0ZWPR1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price
DataItem CL0ZWPRC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0ZWPRI decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// clqrec count
DataItem CL0ZWQCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clqrec switch
DataItem CL0ZWQSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remerch charge
DataItem CL0ZWRCG decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// right uom total credit qty
DataItem CL0ZWRCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clnrec count for size
DataItem CL0ZWRCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rts qty update flag
DataItem CL0ZWRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// right uom total ncr quantity
DataItem CL0ZWRNC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// if locations found
DataItem CL0ZWRSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old rts qty
DataItem CL0ZWRT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new rts qty
DataItem CL0ZWRT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold rts qty
DataItem CL0ZWRTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select-all sales sample flag
DataItem CL0ZWSAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales sample claim flag
DataItem CL0ZWSAM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort count
DataItem CL0ZWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select flag
DataItem CL0ZWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem CL0ZWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id
DataItem CL0ZWSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales sample skip line flag
DataItem CL0ZWSKP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seq nbr
DataItem CL0ZWSQ1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort flag
DataItem CL0ZWSRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// uom of secondary claim nbr
DataItem CL0ZWSSU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save previous size id
DataItem CL0ZWSSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// found unique line in vclstk01
DataItem CL0ZWSTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stock locate flag
DataItem CL0ZWSTK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FASTPATH/CAITEM STYLE REQUEST
DataItem CL0ZWSTL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DEFAULT PRICE BY STYLE
DataItem CL0ZWSTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stock locate credit quantity
DataItem CL0ZWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style number
DataItem CL0ZWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max size of size array
DataItem CL0ZWSXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size desc
DataItem CL0ZWSZ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id
DataItem CL0ZWSZE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total rts qty
DataItem CL0ZWTL1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total auth qty
DataItem CL0ZWTL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total cred qty
DataItem CL0ZWTL3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total non cred qty
DataItem CL0ZWTL4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total def qty
DataItem CL0ZWTL5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total rts qty
DataItem CL0ZWTTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update cl2rec flag
DataItem CL0ZWU2R char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update clarec flag
DataItem CL0ZWUAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update clarec-sales sample
DataItem CL0ZWUAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update comment flag
DataItem CL0ZWUCM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem CL0ZWUDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update clfrec flag
DataItem CL0ZWUFR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update cljrec flag
DataItem CL0ZWUJR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// udpate clmrec flag
DataItem CL0ZWUMR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update clnrec flag
DataItem CL0ZWUNR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag for each size
DataItem CL0ZWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// partial update flag
DataItem CL0ZWUPP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update clqrec flag
DataItem CL0ZWUQR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// view flag
DataItem CL0ZWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem CL0ZWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size warning flag
DataItem CL0ZWWNG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag
DataItem CL0ZWWRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xarcd
DataItem CL0ZWXAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0ZWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zone
DataItem CL0ZWZNE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CLQGROUP char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd1
DataItem SL8LCCD1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd2
DataItem SL8LCCD2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd1
DataItem SL8ZNCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd2
DataItem SL8ZNCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xar-area-cd1
DataItem XARCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xar-area-cd2
DataItem XARCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

