package kl0u;

import corpcom1.*;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XUMTBL;
import corpx1.XWHTBL;
import corpx2.XUMCD;
import corpx2.XWHCD;
import corpx2.XXXUSRID;
import corpy2.YATTBL;
import corpy2.YCSACTCD;
import corpy2.YCSCD;
import corpy2.YCSRPTEX;
import corpy2.YCSTBL;
import corpy2.YRMTBL;
import corpy2.YUATBL;
import corpz3.ZZZCHGCT;
import iv.common.IV3REC;
import ku.common.KUCREC;
import ku.common.KUYREC;
import sy.common.SY1REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY3REC;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL0U ****
// ************************************************************
// * MAINTENANCE LOG:                                         *
// *   DAY     BY      WHY                                    *
// * --------  ------  ---------------------------------------*
// * 02-27-89  jwood   added noncsp option to calls           *
// * 02-27-89  jwood   added xssegtr logic                    *
// * 05-19-89  bcourt  DB2 structure change: CLAREC, KUCREC,  *
// *                   SY2REC, XWHTBL.                        *
// * 05-19-89  bcourt  DB2 structure change: CLAREC, KUCREC,  *
// *                   SY2REC, XWHTBL.                        *
// * 08-01-89  gdecke  DB2 structure change: CLAREC, cl2REC.  *
// * 09-14-89  gdecke  io1330 changed to use xum, xqa.        *
// * 01-19-90  chellm  DB2 structure change regen only        *
// * 04-03-90  sgorga  DB2 structure change regen only        *
// * 01-09-91  GDECKE  #CL920,CL974. COLOR/DIMENSION CHANGES. *
// * 02-18-91  GDECKE  INIT CL2TOSLF IN CL0U856               *
// * 08-08-91  wjohns  Renamed application and commarea       *
// *                     referrences to claims appls.         *
// * 09-18-91  ahowar  changed proc and sgrp from "cl" to "kl"*
// * 01-13-92  sgorga  Set ta1rec, ta2rec empty. kl0u001      *
// * 04-13-92  twatso  db2 change clacmind = cl-clcom-fl      *
// * 08-13-93  jcarey  database structure change. changed     *
// *                   xxxynfl to cl0uminf.                   *
// * 02-26-98  rgilli  Y2K MODIFICATIONS MADE TO:
// *                   Re-generate to include new version of
// *                   xpcl004.
// *                   KL0USB5: Change date compare from yymmdd
// *                            to ccyymmdd.
// *                   KL0US2A: Change date compare from yymmdd
// *                            to ccyymmdd.
// *                   KL0USGC: Add century windowing.
// *                   KL0USGD: Add century windowing.
// *                   KL0USGE: Add century windowing.
// * 12-30-99  SSANK1  Replaced CLXREC.XXXCYMD by CLXREC.XXXCDT
// *                   E in KL0USA3 due to Y2K impact.
// ************************************************************
// *********************
Program KL0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0UW01 CL0UW01; // record
  CL0UW02 CL0UW02; // record
  CL0UW03 CL0UW03; // record
  CL0UW04 CL0UW04; // record
  CL0UW05 CL0UW05; // record
  CL2REC CL2REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLGREC CLGREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLMREC CLMREC; // record
  CLNREC CLNREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV3REC IV3REC; // record
  KUCREC KUCREC; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0UM.KL0UM001,  // forms
      KL0UM.KL0UM005, 
      KL0UM.KL0UM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0U000: KL0U000();


    exit program;



    KL0U001: KL0U001();
    KL0U050: KL0U050();
    KL0U100: KL0U100();
    KL0U101: KL0U101();
    KL0U110: KL0U110();
    KL0U120: KL0U120();
    KL0U130: KL0U130();
    KL0U200: KL0U200();
    KL0U201: KL0U201();
    KL0U210: KL0U210();
    KL0U220: KL0U220();
    KL0U230: KL0U230();
    KL0U240: KL0U240();
    KL0U300: KL0U300();
    KL0U301: KL0U301();
    KL0U310: KL0U310();
    KL0U320: KL0U320();
    KL0U330: KL0U330();
    XPCL002: XPCL002();
  end // end main
end // end KL0U

// APPLICATION MAIN LOGIC
Function KL0U000()

   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xclentry checks to ensure that the claim header has   **/
   /* *         been flagged as "in use" if this application    **/
   /* *         does updates.                                   **/
   /* *                                                         **/
   /* ************************************************************/

  KL0U001(); /* initilize the application*/

  KL0UM001.XXXRVNBR = "0"; /* appl maintainence revision number*/
  KL0UM005.XXXRVNBR = "0"; /* appl maintainence revision number*/
  KL0UM010.XXXRVNBR = "0"; /* appl maintainence revision number*/

  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0U050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit application*/


end // end KL0U000

// INITIALIZE APPLICATION
Function KL0U001()


  CLXREC.CLXCPROC = "CL0U001"; /* set current proc name*/

   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xclentry checks to ensure that the claim header has   **/
   /* *         been flagged as "in use" if this application    **/
   /* *         does updates.                                   **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                           **/
   /* 01-13-92  sgorga  Set ta1rec, ta2rec empty.              **/
   /* ************************************************************/

   /* TEMP001;*/
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/

  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* check cls appl entry*/

  KL0US01(); /* initialize records*/
  KL0US02(); /* get today's date*/
  KL0US03(); /* initialize maps*/
  KL0US04(); /* build prod summ array*/
  KL0US05(); /* determine mode*/


  set TA1REC empty;
  set TA2REC empty;
  CLXREC.CLXSNAME[1] = "KL0UM001"; /* set map name 1*/
  CLXREC.CLXSNAME[2] = "KL0UM005"; /* set map name 2*/
  CLXREC.CLXSNAME[3] = "KL0UM010"; /* set map name 3*/

  CLXREC.CLXARY1X[1] = 1; /* ; set map 1 start line*/
  CLXREC.CLXMAXLN[1] = 11; /* ; set map 1 max lines*/

  CLXREC.CLXARY1X[2] = 1; /* ; set map 2 start line*/
  CLXREC.CLXMAXLN[2] = 15; /* ; set map 2 max lines*/

  CLXREC.CLXARY1X[3] = 1; /* ; set map 3 start line*/
  CLXREC.CLXMAXLN[3] = 3; /* ; set map 2 max lines*/



end // end KL0U001

// MAIN CL0U BRANCH CONTROL
Function KL0U050()


  CLXREC.CLXCPROC = "CL0U050"; /* set current proc name*/

   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME)
    CLXREC.CLXSCRNX = sysVar.arrayIndex;
  end


  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/


  if (CLXREC.CLXSCRNX == 1) /* if screen cl0um001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0U100(); /* process screen cl0um001*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0um005*/
      while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
        KL0U200(); /* process screen cl0um005*/
      end
    else
      if (CLXREC.CLXSCRNX == 3) /* if screen cl0um010*/
        while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
          KL0U300(); /* process screen cl0um010*/
        end
      else
        TA1REC.TA1LOCAT = "UNKNOWN SCREEN NAME";
        XPCL010();
      end
    end
  end


       /* if   the end-of-application flag (clxeoafl) = 'n'*/
            /* return to the top of cl0u050*/
       /* else*/
            /* return to cl0u000.*/



end // end KL0U050

// CONVERSE PROD SUMMARY SCREEN
Function KL0U100()


  CLXREC.CLXCPROC = "CL0U100"; /* set current process name*/

   /* ************************************************************/
   /* *    process screen cl0um001                              **/
   /* *                                                         **/
   /* *    note that this process is being performed in a       **/
   /* *    "while loop" from cl0u050 until the end-of-screen    **/
   /* *    flag (clxeosfl) is set to 'y'.                       **/
   /* *                                                         **/
   /* ************************************************************/

  KL0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/

  if (CLXREC.CLXNEWSC == "Y")
    KL0U101(); /* display new screen*/
    CLXREC.CLXNEWSC = "N"; /* re-set display new screen flag*/
    CLXREC.CLXEDITF = "N"; /* re-set edit screen flag*/
  end


  converse KL0UM001 ;


  CLXREC.CLXEOSF = "N"; /* re-set end-of-screen flag*/
  CLXREC.CLXERRF = "N"; /* re-set error flag*/

  if (KL0UM001 is modified) /* screen changes were made*/
    CLXREC.CLXEDITF = "Y"; /* set edit screen data flag*/
  end

  KL0U110(); /* validate attention key*/

  if (CLXREC.CLXEOSF == "N" /* not at end of screen processing*/
   && CLXREC.CLXERRF == "N") /* valid attention key*/
    if (CLXREC.CLXEDITF == "Y") /* edit screen data flag = 'y'*/
      CLXREC.CLXEDITF = "N"; /* re-set edit screen data flag*/
      KL0U120(); /* validate screen changes*/
    end
    KL0U130(); /* determine next activity*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process CL0U100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cL0U050.*/


end // end KL0U100

// DISPLAY NEW SCREEN - CL0UM001
Function KL0U101()
   /* ************************************************************/
   /* *      this process re-displays the return inspection     **/
   /* *      product summary screen - CL0UM001                  **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U101"; /* set current process name*/

  set KL0UM001.CATOAP cursor, normal;
  set KL0UM001.CAITEM normal;

  if (CLXREC.CLXBLDAY == "Y") /* ; build array flag = 'y'*/
    KL0US04(); /* ; build prod summ array*/
    CLXREC.CLXBLDAY = "N"; /* ; re-set build array flag*/
  end

  KL0US10(); /* ; move array lines to map*/

  CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/


end // end KL0U101

// VALIDATE ATTENTION KEY
Function KL0U110()


  CLXREC.CLXCPROC = "CL0U110"; /* set current proc name*/

  if (KL0UM001.CATOAP != " ") /* ; fastpath option used*/
    if (KL0UM001.CATOAP == "KL0U") /* ; find new prod id in array*/
      return; /* ; after edit/update*/
    else
      COMMAREA.CATOAP = KL0UM001.CATOAP;
      COMMAREA.CAITEM = KL0UM001.CAITEM;
      KL0US11(); /* ; transfer to new application*/
      return; /* ; skip edit/update*/
    end
  end

  if (converseVar.eventKey is pf1) /* ; skip edit/update*/
    KL0US12(); /* ; go to help screen*/
    return;
  end


  if (converseVar.eventKey is pf3) /* ; skip edit/update*/
    KL0US13(); /* ; go to claim menu*/
    return;
  end

  if (converseVar.eventKey is pf4) /* ; skip edit/update*/
    KL0US14(); /* ; go to master menu*/
    return;
  end


  if (converseVar.eventKey is enter /* ; normal application flow*/
   || converseVar.eventKey is pf2   /* ; go to claim memo*/
   || converseVar.eventKey is pf5   /* ; go to claim hdr*/
   || converseVar.eventKey is pf7   /* ; scroll back thru array*/
   || converseVar.eventKey is pf8   /* ; scroll frwd thru array*/
   || converseVar.eventKey is pf10  /* ; go to ship charge*/
   || converseVar.eventKey is pf12  /* ; skip update*/
   || converseVar.eventKey is pf13  /* ; go to CL0UM010*/
   || converseVar.eventKey is pf14  /* ; go to G/L*/
   || converseVar.eventKey is pf15) /* ; go to CL0UM005*/
    return; /* ; after edit/update*/
  else
    KL0US16(); /* ; re-mark modified fields*/
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    converseLib.validationFailed(2); /* ; invalid pf key*/
  end


end // end KL0U110

// VALIDATE SCREEN ENTRIES
Function KL0U120()


  CLXREC.CLXCPROC = "CL0U120"; /* set current process name*/

   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *     and any subsequent updating required by entries     **/
   /* *     into screen CL0UM001                                **/
   /* ************************************************************/

  KL0US17(); /* ; validate select data*/

  if (CL0UW01.CL0UWUDF == "Y") /* ; data updates are allowed*/
    KL0US18(); /* ; validate non cred rtn flag*/
    KL0US19(); /* ; validate inspect data*/
  end

  if (CLXREC.CLXERRF == "Y"   /* ; map errors exist*/
   || CL0UW01.CL0UWUDF == "N" /* ; no data updates are allowed*/
   || converseVar.eventKey is pf12) /* ; skip any updates*/
    return; /* ; exit process*/
  else
    CLXREC.CLXLINEX = 1; /* ; re-set map line index*/
    while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
      KL0US1A(); /* ; delete indicated records*/
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    KL0US1B(); /* ; update claim act rtn rec*/
    KL0US34(); /* ; retrieve claim rts auth rec*/
    KL0US35(); /* ; retrieve claim rts act rec*/
    KL0US36(); /* ; update claim header rec*/
  end


end // end KL0U120

// DETERMINE NEXT ACTION
Function KL0U130()


  CLXREC.CLXCPROC = "CL0U130"; /* set current process name*/

  if (CLXREC.CLXERRF == "Y") /* ; map errors exist*/
    return; /* ; re-display map with errors*/
  end

  if (converseVar.eventKey is enter
   && KL0UM001.CATOAP == "KL0U")
    KL0US1F(); /* ; determine array starting key*/
    return;
  end

  if (converseVar.eventKey is pf2) /* ; go to claim memo*/
    if (CLAREC.CLAMEIND == "Y") /* ; if memo indicator = 'y'*/
      KL0US1G();
    else
      converseLib.validationFailed(11); /* ; memo does not exist*/
    end
    return;
  end

  if (converseVar.eventKey is pf5) /* ; go to claim hdr*/
    KL0US1H();
    return;
  end

  if (converseVar.eventKey is pf7) /* ; page back*/
    KL0US1I();
    return;
  end

  if (converseVar.eventKey is pf8) /* ; page forward*/
    KL0US1J();
    return;
  end

  if (converseVar.eventKey is pf10) /* ; go to ship charge*/
    KL0US1L();
    return;
  end

  if (converseVar.eventKey is pf12) /* ; re-display screen*/
    return;
  end

  if (converseVar.eventKey is pf13) /* ; go to complete screen*/
    KL0US1N();
    return;
  end

  if (converseVar.eventKey is pf14) /* ; go to G/L*/
    KL0US1O();
    return;
  end

  if (converseVar.eventKey is pf15) /* ; go to detail screen*/
    KL0US1Q();
    return;
  end

  if ("S" in CL0UW02.CL0UMSEL) /* ; item selected for view*/
    KL0US1Q(); /* ; go to detail screen*/
  else
    KL0US1N(); /* ; go to complete screen*/
  end


end // end KL0U130

// CONVERSE PROD DETAIL SCREEN
Function KL0U200()
   /* ************************************************************/
   /* *  process screen CL0UM005                                **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" from cl0u050 until the end-of-screen      **/
   /* *  flag (CLXEOSFL) is set to 'Y'.                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U200"; /* set current process name*/

  KL0UM005.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/

  if (CLXREC.CLXNEWSC == "Y")
    KL0U201(); /* ; display new screen*/
    CLXREC.CLXNEWSC = "N"; /* ; re-set  new screen flag*/
    CLXREC.CLXEDITF = "N"; /* ; re-set edit screen flag*/
  end


  converse KL0UM005 ;


  CLXREC.CLXEOSF = "N"; /* re-set end of screen flag*/
  CLXREC.CLXERRF = "N"; /* re-set map error flag*/

  if (KL0UM005 is modified) /* screen changes have been made*/
    CLXREC.CLXEDITF = "Y"; /* set edit screen flag*/
  end

  KL0U210(); /* validate attention key*/

  if (CLXREC.CLXEOSF == "N" /* not at end of screen processing*/
   && CLXREC.CLXERRF == "N") /* no map errors exist*/
    if (CLXREC.CLXEDITF == "Y") /* perform screen edit flag = 'y'*/
      CLXEDITF = "N"; /* re-set screen edit flag*/
      KL0U220(); /* validate screen entries*/
    end
    KL0U230(); /* determine next action*/
  end

  if (CLXREC.CLXEOSF == "Y") /* at end of screen processing*/
    KL0U240(); /* recalc ttl auth/act rtn qtys*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process CL0U200.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cL0U050.*/


end // end KL0U200

// DISPLAY NEW SCREEN - CL0UM005
Function KL0U201()
   /* ************************************************************/
   /* *      this process initializes screen CL0UM005           **/
   /* *                                                         **/
   /* *      this screen is the return inspection product       **/
   /* *      detail screen                                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U201"; /* set current process name*/

  set KL0UM005.CATOAP cursor, normal;
  set KL0UM005.CAITEM normal;

  if (CLXREC.CLXBLDSC == "Y")
    KL0US20(); /* ; build new screen*/
    CLXREC.CLXBLDSC = "N"; /* ; re-set build new screen flag*/
  end

  KL0US21(); /* ; move size array to map*/

  CLXREC.CLXEDITF = "N"; /* ; re-set map edit flag*/


end // end KL0U201

// VALIDATE ATTENTION KEY
Function KL0U210()


  CLXREC.CLXCPROC = "CL0U210"; /* set current proc name*/

  if (KL0UM005.CATOAP != " ") /* ; fastpath used*/
    COMMAREA.CATOAP = KL0UM005.CATOAP;
    COMMAREA.CAITEM = KL0UM005.CAITEM;
    KL0US11();
    return;
  end

  if (converseVar.eventKey is pf1) /* ; skip edit/update*/
    KL0US12(); /* ; go to help screen*/
    return;
  end

  if (converseVar.eventKey is pf3) /* ; go to main menu*/
    CLXREC.CLXUPDTF = "N"; /* ; do not update data*/
    KL0US13();
    return;
  end

  if (converseVar.eventKey is pf4) /* ; skip edit/update*/
    KL0US14(); /* ; go to master menu*/
    return;
  end

  if (converseVar.eventKey is pf7) /* ; scroll back thru sizes*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is pf8)
                                   /* ; page forward after edit/update*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is pf12) /* ; re-display screen after edit*/
    return;
  end

  if (converseVar.eventKey is pf13) /* ; go to CL0UM010*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is pf15) /* ; go to CL0UM001*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is enter) /* ; normal application flow*/
    return; /* ; after edit/update*/
  else
    KL0US22(); /* ; re-mark modified fields*/
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    converseLib.validationFailed(2); /* ; pf key not valid*/
  end


end // end KL0U210

// VALIDATE SCREEN ENTRIES
Function KL0U220()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *     and any subsequent updating, required by entries    **/
   /* *     into screen CL0UM005 - Product Detail Screen        **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0U220"; /* set current process name*/

  if (CL0UW01.CL0UWUDF == "N") /* ; updates are not allowed*/
    return; /* ; exit this process*/
  end

  if (KL0UM005.SY1STNBR is modified /* new style nbr*/
   || KL0UM005.SY2CLRID is modified /* new color id*/
   || KL0UM005.XDMCD is modified)   /* ; new dim*/
    KL0US23(); /* ; retrieve new product data*/
  else
    if (KL0UM005.CL0UMPRC is modified /* new default price*/
     || KL0UM005.CL0UMDSZ is modified) /* new starting size*/
      KL0US25(); /* ; validate starting size/price*/
    else
      CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
      while (CLXREC.CLXLINEX > 0)
        KL0US26();
                                   /* ; validate size price/qty change*/
        CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
      end
    end
  end

  KL0US27(); /* ; validate auth qty*/
  KL0US28(); /* ; validate unit of measure*/
  KL0US29(); /* ; validate inspection id*/
  KL0US2A(); /* ; validate inspection date*/

  if (KL0UM005.XWHCD is modified) /* ; new warehouse code entered*/
    KL0US2B(); /* ; validate warehouse code*/
  else
    if (KL0UM005.XWHCD == " " /* ; no warehouse code*/
     && KL0UM005.XWHSABRV == " ") /* ; no warehouse*/
      set KL0UM005.XWHCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(21);
    end
  end

  KL0US2C(); /* ; validate non cred rtn flag*/

  if (CLXREC.CLXERRF == "Y" /* ; map errors exist*/
   || converseVar.eventKey is pf12) /* ; edit only*/
    KL0US2D(); /* ; re-calc total rtn qty*/
  else
    KL0US30(); /* ; update data bases*/
  end


end // end KL0U220

// DETERMINE NEXT ACTION
Function KL0U230()


  CLXREC.CLXCPROC = "CL0U230"; /* set current process name*/

  if (CLXREC.CLXERRF == "Y") /* ; map errors exist*/
    return;
  end

  if (converseVar.eventKey is pf7) /* ; page back*/
    KL0US31();
    return;
  end

  if (converseVar.eventKey is pf8) /* ; page forward*/
    KL0US32();
    return;
  end

  if (converseVar.eventKey is pf12) /* ; re-display screen*/
    return;
  end

  if (converseVar.eventKey is pf13) /* ; go to complete screen*/
    KL0US1N();
    return;
  end

  if (converseVar.eventKey is pf15) /* ; go to summary screen*/
    KL0US33();
    return;
  end

  if ("S" in CL0UW02.CL0UMSEL) /* ; selected item in array*/
    CLXREC.CLXNEWSC = "Y"; /* ; display new screen*/
    CLXREC.CLXBLDSC = "Y"; /* ; build new prod id*/
  else
    if (KL0UM005.SY1STNBR == " ") /* ; no prod id given*/
      KL0US33(); /* ; go to summary screen*/
    else
      if (CL0UW01.CL0UWUDF == "Y") /* ; updates allowed*/
        CLXREC.CLXNEWSC = "Y"; /* display new screen*/
        CLXREC.CLXBLDSC = "Y"; /* build new prod id*/
      else
        KL0US33(); /* ; go to summary screenn*/
      end
    end
  end


end // end KL0U230

// RECALC TTL AUTH/ACT QTYS
Function KL0U240()


  CLXREC.CLXCPROC = "CL0U240"; /* set current process name*/

  KL0US34(); /* ; update claim rts auth rec*/
  KL0US35(); /* ; update claim rts act rec*/
  KL0US36(); /* ; update claim header rec*/

  if (CLXREC.CLXERRF == "Y") /* ; map errors exist*/
    if (converseVar.validationMsgNum == 334)
      return;
    else
      CLXREC.CLXEOAF = "N"; /* ; re-set end-of-appl flag*/
      CLXREC.CLXEOSF = "N"; /* ; re-set end-of-screen flag*/
      CLXREC.CLXCSCRN = "KL0UM005"; /* re-set current map name*/
    end
  end


end // end KL0U240

// CONVERSE COMPLETION SCREEN
Function KL0U300()
   /* ************************************************************/
   /* *    process screen CL0UM010                              **/
   /* *                                                         **/
   /* *    note that this process is being performed in a       **/
   /* *    "while loop" from cl0u050 until the end-of-screen    **/
   /* *    flag (clxeosfl) is set to 'y'.                       **/
   /* *                                                         **/
   /* ************************************************************/


  CLXREC.CLXCPROC = "CL0U300"; /* set current process name*/

  KL0UM010.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/

  if (CLXREC.CLXNEWSC == "Y")
    KL0U301(); /* ; display new screen*/
    CLXREC.CLXNEWSC = "N"; /* ; re-set new screen flag*/
  end


  converse KL0UM010 ;


  CLXREC.CLXEOSF = "N"; /* re-set end of screen flag*/
  CLXREC.CLXERRF = "N"; /* re-set map error flag*/

  KL0U310(); /* validate attention key*/

  if (CLXREC.CLXEOSF == "N" /* not at end of screen*/
   && CLXREC.CLXERRF == "N") /* no map errors*/
    KL0U320(); /* process screen entries*/
    KL0U330(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process CL0U200.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cL0U050.*/


end // end KL0U300

// DISPLAY NEW SCREEN - CL0UM010
Function KL0U301()
   /* ************************************************************/
   /* *      this process initializes screen CL0UM010           **/
   /* *                                                         **/
   /* *      this screen is the return inspection completion    **/
   /* *      screen                                             **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U301"; /* set current process name*/

  set KL0UM010.CATOAP cursor, normal;
  set KL0UM010.CAITEM normal;

  KL0US40(); /* ; get inspect complete flag*/
  KL0US41(); /* ; get comments*/
  KL0US42(); /* ; get remerchandising qtys*/

  CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/


end // end KL0U301

// VALIDATE ATTENTION KEY
Function KL0U310()


  CLXREC.CLXCPROC = "CL0U310"; /* set current proc name*/

  if (KL0UM010.CATOAP != " ") /* ; fastpath used*/
    COMMAREA.CATOAP = KL0UM010.CATOAP;
    COMMAREA.CAITEM = KL0UM010.CAITEM;
    KL0US11(); /* ; go to requested appl*/
    return; /* ; skip edit/update*/
  end

  if (converseVar.eventKey is pf1)
    KL0US12(); /* ; go to help screen*/
    return; /* ; skip edit/update*/
  end

  if (converseVar.eventKey is pf2) /* ; go to claim memo*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is pf3) /* ; go to claim menu*/
    KL0US13(); /* ; skip edit/update*/
    return;
  end

  if (converseVar.eventKey is pf4)
    KL0US14(); /* ; go to master menu*/
    return; /* ; skip edit/update*/
  end

  if (converseVar.eventKey is pf12) /* ; edit only*/
    return; /* ; do not update data*/
  end

  if (converseVar.eventKey is pf15) /* ; go to summary screen*/
    return; /* ; after edit/update*/
  end

  if (converseVar.eventKey is enter) /* ; normal flow*/
    return; /* ; after edit/update*/
  else
    KL0US43(); /* ; re-mark modified fields*/
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    converseLib.validationFailed(2); /* ; invalid attention key*/
  end


end // end KL0U310

// VALIDATE SCREEN ENTRIES
Function KL0U320()

   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen CL0UM010                   **/
   /* *                                                         **/
   /* * 08-13-93 JCAREY CHANGED XXXYNFL TO CL0UMINF.            **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U320"; /* set current process name*/

  if (CL0UW01.CL0UWUDF == "N") /* ; updates are not allowed*/
    return; /* ; exit this process*/
  end

  if (KL0UM010.CL0UMINF is modified)
                                   /* ; inspect complete flag modified*/
    KL0US44(); /* ; validate insp cmpl flag*/
  end

  KL0US45(); /* ; compare fields to total qty*/
  KL0US46(); /* ; update comment indicator*/

  if (CLXREC.CLXERRF == "Y") /* ; map errors exist*/
    return; /* ; re-display map with errors*/
  else
    KL0US47(); /* ; recalc restock charges*/
    KL0US48(); /* ; recalc remerch charges*/
    if (converseVar.eventKey is pf12) /* ; edit data only*/
      return; /* ; skip update*/
    else
      KL0US49(); /* ; update data bases*/
    end
  end


end // end KL0U320

// DETERMINE NEXT ACTION
Function KL0U330()

   /* ************************************************************/
   /* *     this process determines the application flow        **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0U330"; /* set current process name*/

  if (CLXREC.CLXERRF == "Y") /* ; map errors exist*/
    return; /* ; exit process*/
  end

  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* ; memo indicator = 'y'*/
      KL0US1G(); /* ; go to claim memo*/
    else
      converseLib.validationFailed(11); /* ; memo does not exist*/
      return;
    end
  else
    if (converseVar.eventKey is pf12) /* ; re-display map*/
      return;
    else
      if (converseVar.eventKey is pf15)
        KL0US33(); /* ; go to summary screen*/
      else
        KL0US1H(); /* ; go to clm hdr*/
      end
    end
  end


end // end KL0U330

// select set from clnrec
Function KL0U811()
   /* **************************************/
   /* select set from clnrec*/
   /* **************************************/

  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CLNREC.IV0IVCID = -1;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U811"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U811

// fetch next from clnrec
Function KL0U812()
   /* **************************************/
   /* fetch next from clnrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U812"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U812

// close cursor for clnrec
Function KL0U813()
   /* **************************************/
   /* fetch next from clnrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U813"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRTSIT01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U813

// fetch unique from clnrec
Function KL0U814()
   /* **************************************/
   /* select unique on clnrec*/
   /* **************************************/

  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CLNREC.IV0IVCID = 0;
  CLNREC.IV0PARTN = "0";
  call "IO1330" ("S ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U814"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U814

// fetch unique from clnrec
Function KL0U815()
   /* **************************************/
   /* select unique on clnrec*/
   /* **************************************/

  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CLNREC.IV0IVCID = 0;
  CLNREC.IV0PARTN = "0";
  call "IO1330" ("D ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U815"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U815

// add record to clnrec
Function KL0U816()
   /* **************************************/
   /* add record to clnrec*/
   /* **************************************/

  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CLNREC.IV0IVCID = 0;
  CLNREC.IV0PARTN = "0";
  call "IO1330" ("A ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U816"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U816

// update unique from clnrec
Function KL0U817()
   /* **************************************/
   /* update unique on clnrec*/
   /* **************************************/

  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CLNREC.IV0IVCID = 0;
  CLNREC.IV0PARTN = "0";
  call "IO1330" ("U ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U817"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U817

// sum records from clnrec
Function KL0U818()
   /* **************************************/
   /* sum records on clnrec*/
   /* 9-29-93 BCourt init cl0u w03 record*/
   /* **************************************/

  set CL0UW03 empty;
  set SQLCA empty;
  CLNREC.CL2ISNBR = CLAREC.CLACISNB;
  CL0UW03.CL0UWSQL = "SM";
  call "IO1330" (CL0UW03, SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0UW03.CL0UWIN1 < 0)
      CL0UW03.CLMTNCRQ = 0;
    end
    if (CL0UW03.CL0UWIN2 < 0)
      CL0UW03.CLMTRTSQ = 0;
    end
    if (CL0UW03.CL0UWIN3 < 0)
      CL0UW03.CL0UWAMT = 0;
    end

  else

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U818"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1330"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSIT01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U818

// fetch unique from sy1rec
Function KL0U824()
   /* **************************************/
   /* select unique on sy1rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U824"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0120"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database name*/
        TA1REC.TA1TBLVU = "VSTYLE01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U824

// select set from clkrec
Function KL0U831()
   /* **************************************/
   /* select set from clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U831"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U831

// fetch next from clkrec
Function KL0U832()
   /* **************************************/
   /* fetch next from clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U832"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U832

// close cursor for clkrec
Function KL0U833()
   /* **************************************/
   /* fetch next from clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U833"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U833

// fetch unique from clkrec
Function KL0U834()
   /* **************************************/
   /* select unique on clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U834"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U834

// fetch unique from clkrec
Function KL0U835()
   /* **************************************/
   /* select unique on clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U835"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U835

// add record to clkrec
Function KL0U836()
   /* **************************************/
   /* add record to clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U836"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U836

// update unique from clkrec
Function KL0U837()
   /* **************************************/
   /* update unique on clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" ("U ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U837"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U837

// sum records from clkrec
Function KL0U838()
   /* **************************************/
   /* sum records on clkrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1280" (CL0UW05, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    if (CL0UW05.CL0UWIN1 < 0) /* if no rows, then null values passed*/
      CL0UW05.CL0UWCNT = 0;
    end
    CLKREC.CLKAUTHQ = CL0UW05.CL0UWCNT;

  else

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U838"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1280"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAITM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U838

// select set from clbrec
Function KL0U841()
   /* **************************************/
   /* select set from clbrec*/
   /* 9-29-93 BCourt  init clb record.*/
   /* **************************************/

  set CLBREC empty;
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U841"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U841

// fetch next from clbrec
Function KL0U842()
   /* **************************************/
   /* fetch next from clbrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U842"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U842

// fetch unique from cllrec
Function KL0U854()
   /* **************************************/
   /* select unique on cllrec & cl2rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U854"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1310"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLRTN01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  set SQLCA empty;
  CL2REC.CLACLMNB = CLAREC.CLACLMNB;
  CL2REC.CLHSEQNB = CLAREC.CLACSQNB;
  CL2REC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO2870" ("S ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U854"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRINSP01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U854

// add record to cllrec
Function KL0U856()
   /* **************************************/
   /* add record to cllrec & cl2rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1310" ("A ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U856"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1310"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VCLRTN01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end

  set SQLCA empty;
  CL2REC.CLACLMNB = CLAREC.CLACLMNB;
  CL2REC.CL2ISNBR = CLAREC.CLACISNB;
  CL2REC.CLHSEQNB = CLAREC.CLACSQNB;
  CL2REC.YCICD = "WSE";
  CL2REC.CLJRDIND = "R";
  CL2REC.CL2TOSLF = "N"; /* GDECKE 02-18-91 CLM TO STOCK LOCATE FLAG*/
  CL2REC.CL2ISBDT = CLLREC.ZZZCHGDT;
  CL2REC.ZZZCHGDT = CLLREC.ZZZCHGDT;
  CL2REC.ZZZCHGTM = CLLREC.ZZZCHGTM;
  CL2REC.ZZZCHGCT = 0;

  call "IO2870" ("A ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U856"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VRINSP01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U856

// update unique from cllrec
Function KL0U857()
   /* **************************************/
   /* update unique on cllrec & cl2rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1310" ("U ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U857"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1310"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLRTN01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end

  set SQLCA empty;

  set SQLCA empty;
  CL2REC.CLACLMNB = CLAREC.CLACLMNB;
  CL2REC.CL2ISNBR = CLAREC.CLACISNB;
  CL2REC.CLHSEQNB = CLAREC.CLACSQNB;
  CL2REC.YCICD = "WSE";
  CL2REC.CLJRDIND = "R";
  CL2REC.ZZZCHGDT = CLLREC.ZZZCHGDT;
  CL2REC.ZZZCHGTM = CLLREC.ZZZCHGTM;

  call "IO2870" ("U ", SQLCA, CL2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U857"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2870"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRINSP01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U857

// fetch unique from cljrec
Function KL0U874()
   /* **************************************/
   /* select unique on cljrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U874"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U874

// add record to cljrec
Function KL0U876()
   /* **************************************/
   /* add record to cljrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U876"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U876

// update unique from cljrec
Function KL0U877()
   /* **************************************/
   /* update unique on cljrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U877"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1270"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRAHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U877

// fetch unique from sy3rec
Function KL0U884()
   /* **************************************/
   /* select unique on sy3rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U884"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0140"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database name*/
        TA1REC.TA1TBLVU = "VSIZE001"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U884

// fetch unique from sy4rec
Function KL0U894()
   /* **************************************/
   /* select unique on sy4rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U894"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0040"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database name*/
        TA1REC.TA1TBLVU = "VSCALE01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U894

// fetch unique from sy2rec
Function KL0U904()
   /* **************************************/
   /* select unique on sy2rec*/
   /* **************************************/

  set SQLCA empty;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U904"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0130"; /* location*/
        TA1REC.TA1DBASE = "DPROD "; /* database name*/
        TA1REC.TA1TBLVU = "VCOLOR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U904

// fetch unique from clmrec
Function KL0U914()
   /* **************************************/
   /* select unique on clmrec*/
   /* **************************************/

  CLMREC.CL2ISNBR = CLAREC.CLACISNB;
  set SQLCA empty;
  call "IO1320" ("S ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U904"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSHD01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U914

// add record to clmrec
Function KL0U916()
   /* **************************************/
   /* add record to clmrec*/
   /* **************************************/

  set SQLCA empty;
  CLMREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1320" ("A ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U906"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VRTSHD01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U916

// update unique from clmrec
Function KL0U917()
   /* **************************************/
   /* update unique on clmrec*/
   /* **************************************/

  set SQLCA empty;
  CLMREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1320" ("U ", SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U907"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSHD01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U917

// sum records from clmrec
Function KL0U918()
   /* **************************************/
   /* sum records on clmrec*/
   /* **************************************/

  set SQLCA empty;
  CLMREC.CL2ISNBR = CLAREC.CLACISNB;
  set CL0UW04 empty;
  CL0UW04.CL0UWSQL = "SM";
  call "IO1320" (CL0UW04, SQLCA, CLMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

     /* the iomod passing items are defined larger than the csp*/
     /* items, so the iomod items are now moved to the csp*/
     /* items to cause less confusion with multiple names.*/

    if (CL0UW04.CL0UWIN1 < 0)
      CL0UW04.CL0UWSM1 = 0;
    end
    CLMREC.CLMRMAMT = CL0UW04.CL0UWSM1;

    if (CL0UW04.CL0UWIN2 < 0)
      CL0UW04.CL0UWSM2 = 0;
    end
    CLMREC.CLMRMHCG = CL0UW04.CL0UWSM2;

    if (CL0UW04.CL0UWIN3 < 0)
      CL0UW04.CL0UWSM3 = 0;
    end
    CLMREC.CLMRSKCG = CL0UW04.CL0UWSM3;

    if (CL0UW04.CL0UWIN4 < 0)
      CL0UW04.CLMTRTSQ = 0;
    end
    CLMREC.CLMTRTSQ = CL0UW04.CLMTRTSQ;

  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U918"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1320"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VRTSHD01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U918

// fetch unique from clarec
Function KL0U924()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U914"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U924

// update unique from clarec
Function KL0U927()
   /* **************************************/
   /* update unique on clarec*/
   /* **************************************/

  set SQLCA empty;
  CLAREC.CLAWSENF = "Y"; /* set worksheet entry*/
  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U927"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U927

// select set from clgrec
Function KL0U931()
   /* **************************************/
   /* select set from clgrec*/
   /* **************************************/

  set SQLCA empty;
  CLGREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U931"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U931

// fetch next from clgrec
Function KL0U932()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U932"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U932

// close cursor for clgrec
Function KL0U933()
   /* **************************************/
   /* fetch next from clgrec*/
   /* **************************************/

  set SQLCA empty;
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0U933"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLCOM01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;

        XPCL010(); /* error diagnosis routine*/

        return;
      end
    end
  end
end // end KL0U933

// fetch unique from clgrec
Function KL0U934()
   /* **************************************/
   /* select unique on clgrec*/
   /* **************************************/

  set SQLCA empty;
  CLGREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1260" ("S ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U934"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U934

// fetch unique from clgrec
Function KL0U935()
   /* **************************************/
   /* select unique on clgrec*/
   /* **************************************/

  set SQLCA empty;
  CLGREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1260" ("D ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U935"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U935

// add record to clgrec
Function KL0U936()
   /* **************************************/
   /* add record to clgrec*/
   /* **************************************/

  set SQLCA empty;
  CLGREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1260" ("A ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else

      TA1REC.TA1LOCAT[2] = "CL0U936"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
      TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
      TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0U936

// update unique from clgrec
Function KL0U937()
   /* **************************************/
   /* update unique on clgrec*/
   /* **************************************/

  set SQLCA empty;
  CLGREC.CL2ISNBR = CLAREC.CLACISNB;
  call "IO1260" ("U ", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else

        TA1REC.TA1LOCAT[2] = "CL0U937"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1260"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLCOM01"; /* table view name*/
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/

        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0U937

// initialize records
Function KL0US01()
   /* ************************************************************/
   /* *    This process clears and initializes all working      **/
   /* *    storage records used by this application.            **/
   /* *                                                         **/
   /* ************************************************************/


  set CLJREC empty;
  set CLKREC empty;
  set CLLREC empty;
  set CL2REC empty;
  set CLXREC empty;

  set CL0UW01 empty;
  set CL0UW02 empty;

  set KUCREC empty;
  set KUYREC empty;

  set SY1REC empty;
  set SY2REC empty;

  set TA1REC empty;
  set TA2REC empty;



end // end KL0US01

// get today's date
Function KL0US02()


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    CLXREC.CLXVALDT = "N"; /* set valid date flag to no*/
    CLXREC.XXXCDTE = 0;
  else
    CLXREC.CLXVALDT = "Y"; /* set valid date flag to yes*/
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
  end


end // end KL0US02

// initialize maps
Function KL0US03()


   /* ************************************************************/
   /* *    This process clears and initializes all maps         **/
   /* *    used by this application.                            **/
   /* *                                                         **/
   /* ************************************************************/


  set KL0UM001 initial;
  set KL0UM005 initial;
  set KL0UM010 initial;

  KL0USA0(); /* find invoice nbr*/
  KL0USA1(); /* move CLWREC fields to map*/
  KL0USA2(); /* move CLAREC fields to map*/
  KL0USA3(); /* move CLLREC fields to map*/
  KL0USA6(); /* move CLJREC fields to map*/
  KL0USA7(); /* move CLMREC fields to map*/


end // end KL0US03

// build prod summ array
Function KL0US04()


  CLXREC.CLXCPROC = "CL0US04"; /* set current proc name*/

  CL0UW01.CL0UWLPX = 0; /* ; re-set last prod array index*/

  KL0USA8(); /* ; select all auth rtn recs*/
  KL0USAB(); /* ; select all act rtn recs*/

  CLXREC.CLXARAYX = 1; /* ; re-set prod summ array*/
  while (CLXREC.CLXARAYX <= 210) /* ; array not full*/
    KL0USAE(); /* ; build array key*/
    KL0USAJ(); /* ; accum auth rtn qty*/
    KL0USAK(); /* ; accum act rtn qty*/
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* increment array index*/
  end


end // end KL0US04

// set activity mode flag
Function KL0US05()


  CLXREC.CLXCPROC = "CL0US05"; /* set current proc name*/

  if (CLWREC.CLWACTIV == "I") /* ; user is in inquiry mode*/
    CL0UW01.CL0UWUDF = "N"; /* ; do not allow data updates*/
    CL0UW01.CL0UWAAF = "N"; /* ; do not allow data adds*/
    CL0UW01.CL0UWACF = "N"; /* ; do not allow data changes*/
    CL0UW01.CL0UWADF = "N"; /* ; do not allow data deletes*/
  else
    if (CLWREC.CLHSEQNB != CLAREC.CLACSQNB)
      CL0UW01.CL0UWUDF = "N"; /* ; do not allow data updates*/
      CL0UW01.CL0UWAAF = "N"; /* ; do not allow data adds*/
      CL0UW01.CL0UWACF = "N"; /* ; do not allow data changes*/
      CL0UW01.CL0UWADF = "N"; /* ; do not allow data deletes*/
    else
      KL0USAM(); /* ; set update data flags*/
    end
  end

  if (COMMAREA.CAFROMAP == "KL0J" /* ; user came from g/l*/
   || COMMAREA.CAFROMAP == "KL0W") /* ; user came from shp chg*/
    CLXREC.CLXCSCRN = "KL0UM010";
    CLXREC.CLXNEWSC = "Y";
  else
    if (CLWREC.CLWACTIV == "I") /* ; user in inquiry mode*/
      CLXREC.CLXCSCRN = "KL0UM001";
      CLXREC.CLXNEWSC = "Y";
    else
      if (CLWREC.CLWACTIV == "C" /* ; user in change mode*/
       && CL0UW01.CL0UWLPX > 0)  /* ; prods in summ array*/
        CLXREC.CLXCSCRN = "KL0UM001";
        CLXREC.CLXNEWSC = "Y";
      else
        if (CL0UW01.CL0UWUDF == "N") /* ; data updates are not allowed*/
          CLXREC.CLXCSCRN = "KL0UM001";
          CLXREC.CLXNEWSC = "Y";
          converseLib.validationFailed(29);
        else
          if (CL0UW01.CL0UWAAF == "N") /* adds are not allowed*/
            CLXREC.CLXCSCRN = "KL0UM001";
            CLXREC.CLXNEWSC = "Y";
            converseLib.validationFailed(29);
          else
            CLXREC.CLXCSCRN = "KL0UM005";
            CLXREC.CLXNEWSC = "Y";
            CLXREC.CLXBLDSC = "Y";
          end
        end
      end
    end
  end


end // end KL0US05

// move array lines to map
Function KL0US10()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0US10"; /* set current proc name*/

  set KL0UM001.CATOAP cursor, normal;
  set KL0UM001.CAITEM normal;

  CLXREC.CLXLSTAX = CL0UW01.CL0UWLPX;

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0) /* ; not at end of map lines*/
    KL0USB0(); /* ; move array fields to map*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end

  if (CL0UW01.CL0UWUDF == "N") /* ; updates not allowed*/
    set KL0UM001.CLJNCRFL initialAttributes;
    set KL0UM001.CL0UMIDT initialAttributes;
    set KL0UM001.XXXUSRID initialAttributes; /* 2-15-91*/
  else
    if (KL0UM001.XXXUSRID == " ") /* no inspection id ; 2-15-91*/
      set KL0UM001.XXXUSRID cursor, normal; /* 2-15-91*/
      set KL0UM001.CL0UMIDT normal;
      set KL0UM001.CLJNCRFL normal;
    else
      set KL0UM001.XXXUSRID normal; /* 2-15-91*/
      if (KL0UM001.CL0UMIDT == " ") /* ; no inspection date*/
        set KL0UM001.CL0UMIDT cursor, normal;
        set KL0UM001.CLJNCRFL normal;
      else
        set KL0UM001.CL0UMIDT normal;
        if (KL0UM001.CLJNCRFL == " ") /* no non cred rtn flag*/
          set KL0UM001.CLJNCRFL cursor, normal;
        else
          set KL0UM001.CLJNCRFL normal;
        end
      end
    end
  end


end // end KL0US10

// fast path
Function KL0US11()


  CLXREC.CLXCPROC = "CL0US11"; /* set current process name*/

  CLXREC.CLXEDITF = "N"; /* ; re-set edit screen flag*/

  CLWREC.CLAGROUP = CLAREC.CLAGROUP;
  COMMAREA.CAUSERA = CLWREC.CLWGROUP;

  XPCL002();
end // end KL0US11

// pf1 - help
Function KL0US12()


  CLXREC.CLXCPROC = "CL0US12"; /* set current proc name*/

  CLXREC.CLXEDITF = "N"; /* ; re-set edit screen flag*/
  CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
  CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/

  COMMAREA.CATOAP = "GD0G"; /* ; go to help*/
  COMMAREA.CAITEM = " "; /* ; clear to app item*/
  CLWREC.CLAGROUP = CLAREC.CLAGROUP;
  COMMAREA.CAUSERA = CLWREC.CLWGROUP;

  XPCL002();
end // end KL0US12

// pf3 - clm mn
Function KL0US13()


  CLXREC.CLXCPROC = "CL0US13"; /* set current proc name*/

  CLXREC.CLXEDITF = "N"; /* ; re-set edit screen flag*/
  CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
  CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/

  COMMAREA.CATOAP = "KL0A"; /* ; go to claims menu*/
  COMMAREA.CAITEM = " "; /* ; clear to app item*/
  CLWREC.CLAGROUP = CLAREC.CLAGROUP;
  COMMAREA.CAUSERA = CLWREC.CLWGROUP;

  XPCL002();
end // end KL0US13

// pf4 - master menu
Function KL0US14()


  CLXREC.CLXCPROC = "CL0US14"; /* set current proc name*/

  CLXREC.CLXEDITF = "N"; /* ; re-set edit screen flag*/
  CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
  CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/

  COMMAREA.CATOAP = "MN0M"; /* ; go to master menu*/
  COMMAREA.CAITEM = " "; /* ; clear to app item*/
  CLWREC.CLAGROUP = CLAREC.CLAGROUP;
  COMMAREA.CAUSERA = CLWREC.CLWGROUP;

  XPCL002();
end // end KL0US14

// reset modified fields
Function KL0US16()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0US16"; /* set current proc name*/

   /* ************************************************************/
   /* *  since the map must be re-shown to the user             **/
   /* *  before editing has been done, set fields modified to   **/
   /* *  keep track of all the fields entered by the user.      **/
   /* *  the user will only need to re-do the pf key or enter   **/
   /* *  key, not enter the data again.                         **/
   /* ************************************************************/

  if (KL0UM001.XXXUSRID is modified) /* 2-15-91*/
    set KL0UM001.XXXUSRID modified; /* "*/
  end

  if (KL0UM001.CL0UMIDT is modified)
    set KL0UM001.CL0UMIDT modified;
  end

  if (KL0UM001.CLJNCRFL is modified)
    set KL0UM001.CLJNCRFL modified;
  end

  CLXREC.CLXLINEX = 0;
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (KL0UM001.CL0UMSEL[CLXLINEX] is modified)
      set KL0UM001.CL0UMSEL[CLXLINEX] modified;
    end
  end


end // end KL0US16

// validate select data
Function KL0US17()


  CLXREC.CLXCPROC = "CL0US17"; /* set current proc name*/

  if ("A" in KL0UM001.CL0UMSEL) /* ; all prod id's selected*/
    KL0USB1(); /* ; mark all prods in array*/
    KL0USB2(); /* ; mark all prods on map*/
  else
    CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
    while (CLXREC.CLXLINEX > 0)
      KL0USB3(); /* ; validate select option*/
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    end
  end


end // end KL0US17

// validate non cred rtn flag
Function KL0US18()


  CLXREC.CLXCPROC = "CL0US18"; /* set current proc name*/

  if (KL0UM001.CLJNCRFL == "Y" /* ; non cred rtn flag = 'y'*/
   || KL0UM001.CLJNCRFL == "N") /* ; non cred rtn flag = 'n'*/
    set KL0UM001.CLJNCRFL normal;
    CL0UW01.CLJNCRFL = KL0UM001.CLJNCRFL;
  else
    set KL0UM001.CLJNCRFL cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(367);
  end


end // end KL0US18

// validate inspect data
Function KL0US19()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0US19"; /* set current proc name*/

  if (KL0UM001.CL0UMIDT is modified) /* new inspection date*/
    if (KL0UM001.CL0UMIDT == " ") /* ; inspection date = ' '*/
      CL0UW01.CLLIDT = CLXREC.XXXCDTE;
      CLXREC.XXXFLMM = CLXREC.XXXCMM;
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXCDD;
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLYY = CLXREC.XXXCYY;
      /* MOVE CLXREC.XXXFLDT TO CL0UM001.CL0UMIDT;*/
      set KL0UM001.CL0UMIDT normal;
    else
      KL0USB5(); /* ; validate inspection date*/
    end
  end

  if (KL0UM001.XXXUSRID == " ") /* no inspector id ; 2-15-91*/
    set KL0UM001.XXXUSRID cursor, modified, bold; /* "*/
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(21);
  else
    CL0UW01.XXXUSRID = KL0UM001.XXXUSRID; /* 2-15-91*/
    KL0UM005.XXXUSRID = KL0UM001.XXXUSRID; /* "*/
    KL0UM010.XXXUSRID = KL0UM001.XXXUSRID; /* "*/
  end



end // end KL0US19

// delete selected prod id recs
Function KL0US1A()


  CLXREC.CLXCPROC = "CL0US1A"; /* set current process name*/

  if (KL0UM001.CL0UMSEL[CLXLINEX] == "X") /* item selected for delete*/
    KL0USB7(); /* ; delete auth rtn rec*/
    KL0USBA(); /* ; delete act rtn recs*/
    KL0USBI(); /* ; update prod summ array*/
  end


end // end KL0US1A

// update CLLREC - clm act rtn
Function KL0US1B()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0US1B"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = KL0UM001.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  KL0U854(); /* ; inquire on actual rtn table*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0USBJ(); /* ; update record*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      KL0USBL(); /* ; add record*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM001.CL0UMIDT cursor, modified, bold;
        set KL0UM001.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0US1B

// determine array start point
Function KL0US1F()


  CLXREC.CLXCPROC = "CL0US1F"; /* set current proc name*/

  CL0UW01.SY1STNBR = KL0UM001.CAITEM;
  CL0UW01.SY2CLRID = " ";
  CL0UW01.XDMCD = " ";

  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
  CLXREC.CLXCURLN = 1; /* ; re-set array index*/
  while (CLXREC.CLXCURLN < CLXREC.CLXLSTAX /* not at end of array*/
   && CLXREC.CLXTESTF == "N") /* ; array match not found*/
    if (CL0UW02.CL0UWKEY[CLXCURLN] < CL0UW01.CL0UWBKE)
      CLXREC.CLXCURLN = CLXREC.CLXCURLN + 1;
    else
      CLXREC.CLXARAYX = CLXREC.CLXCURLN + 1;
      if (CL0UW01.CL0UWBKE < CL0UW02.CL0UWKEY[CLXARAYX]
       || CL0UW02.CL0UWKEY[CLXARAYX] == "  ")
        CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXCURLN;
        CLXREC.CLXTESTF = "Y";
        CLXREC.CLXNEWSC = "Y";
      else
        CLXREC.CLXCURLN = CLXREC.CLXCURLN + 1;
      end
    end
  end

  if (CLXREC.CLXTESTF == "Y") /* ; array match was found*/
    KL0UM001.CATOAP = " "; /* ; clear map to application*/
    KL0UM001.CAITEM = " "; /* ; clear map item*/
  else
    if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
      set CL0UW02 empty; /* ; clear prod summ array*/
      CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
      CLXREC.CLXBLDAY = "Y"; /* ; set build array flag*/
      CLXREC.CLXNEWSC = "Y"; /* ; set new screen flag*/
      KL0UM001.CATOAP = " "; /* ; clear map to application*/
      KL0UM001.CAITEM = " "; /* ; clear map item*/
      CLXREC.CLXLSTKE = CL0UW01.CL0UWAKE;
    else
      if ("S" in CL0UW02.CL0UMSEL) /* ; item has been selected*/
        CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
        CLXREC.CLXERRF = "Y"; /* set map error flag*/
        converseLib.validationFailed(337);
      else
        set CL0UW02 empty; /* ; clear prod summ array*/
        CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
        CLXREC.CLXNEWSC = "Y"; /* set new screen flag*/
        CLXREC.CLXBLDAY = "Y"; /* set build array flag*/
        KL0UM001.CATOAP = " "; /* clear map to application*/
        KL0UM001.CAITEM = " "; /* clear map item*/
        CLXREC.CLXLSTKE = CL0UW01.CL0UWAKE;
      end
    end
  end


end // end KL0US1F

// pf2 - clm memo
Function KL0US1G()


  CLXREC.CLXCPROC = "CL0US1G"; /* set current process name*/

  if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
    CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
    COMMAREA.CATOAP = "KL0M";
    COMMAREA.CAITEM = " ";
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
  else
    if ("S" in CL0UW02.CL0UMSEL) /* ; item has been selected*/
      CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(339); /* ; current selections lost*/
    else
      CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
      CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
      COMMAREA.CATOAP = "KL0M";
      COMMAREA.CAITEM = " ";
      CLWREC.CLAGROUP = CLAREC.CLAGROUP;
      COMMAREA.CAUSERA = CLWREC.CLWGROUP;
      XPCL002();
    end
  end


end // end KL0US1G

// pf5 - clm hdr
Function KL0US1H()


  CLXREC.CLXCPROC = "CL0US1H"; /* set current process name*/

  if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
    CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
    COMMAREA.CATOAP = "KL0E";
    COMMAREA.CAITEM = " ";
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
  else
    if ("S" in CL0UW02.CL0UMSEL) /* ; item was selected*/
      CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(339); /* ; current selections lost*/
    else
      CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
      CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
      COMMAREA.CATOAP = "KL0E";
      COMMAREA.CAITEM = " ";
      CLWREC.CLAGROUP = CLAREC.CLAGROUP;
      COMMAREA.CAUSERA = CLWREC.CLWGROUP;
      XPCL002();
    end
  end


end // end KL0US1H

// pf7 - scroll back page
Function KL0US1I()


  CLXREC.CLXCPROC = "CL0US1I"; /* set current proc name*/

  CLXREC.CLXCURLN = CLXREC.CLXARY1X[CLXSCRNX] - CLXREC.CLXMAXLN[CLXSCRNX];

  if (CLXREC.CLXCURLN > 0) /* ; current line > 0*/
    CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXCURLN;
    CLXREC.CLXNEWSC = "Y";
  else
    if (CLXREC.CLXLSTKE == " ") /* ; user in first array*/
      CLXREC.CLXARY1X[CLXSCRNX] = 1;
      CLXREC.CLXNEWSC = "Y";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(7);
    else
      if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
        set CL0UW02 empty; /* ; clear prod summ array*/
        CLXREC.CLXLSTKE = " "; /* clear last array key*/
        CLXREC.CLXBLDAY = "Y"; /* set build array flag*/
        CLXREC.CLXNEWSC = "Y"; /* set new screen flag*/
        CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
      else
        if ("S" in CL0UW02.CL0UMSEL) /* item has been selected*/
          CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
          CLXREC.CLXERRF = "Y"; /* set map error flag*/
          converseLib.validationFailed(340); /* ; current selections lost*/
        else
          set CL0UW02 empty; /* ; clear prod summ array*/
          CLXREC.CLXLSTKE = " "; /* clear last array key*/
          CLXREC.CLXBLDAY = "Y"; /* set build array flag*/
          CLXREC.CLXNEWSC = "Y"; /* set new screen flag*/
          CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
        end
      end
    end
  end


end // end KL0US1I

// pf8 - scroll frwd page
Function KL0US1J()


  CLXREC.CLXCPROC = "CL0US1J"; /* set current proc name*/

  CLXREC.CLXCURLN = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXMAXLN[CLXSCRNX];

  if (CLXREC.CLXCURLN <= CLXREC.CLXLSTAX) /* new row < last array data row*/
    CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXCURLN;
    CLXREC.CLXNEWSC = "Y";
  else
    if (CL0UW01.CL0UWF1F == "Y" /* ; CLKREC is at end-of-file*/
     && CL0UW01.CL0UWF2F == "Y") /* ; CLNREC is at end-of-file*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(3);
    else
      if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
        KL0US1K(); /* ; build new last array key*/
        set CL0UW02 empty; /* ; clear prod summ array*/
        CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
        CLXREC.CLXBLDAY = "Y"; /* set build array flag*/
        CLXREC.CLXNEWSC = "Y"; /* set new screen flag*/
      else
        if ("S" in CL0UW02.CL0UMSEL) /* item has been selected*/
          CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
          CLXREC.CLXERRF = "Y"; /* set map error flag*/
          converseLib.validationFailed(337);
        else
          KL0US1K(); /* ; build new last array key*/
          set CL0UW02 empty; /* ; clear prod summ array*/
          CL0UW01.CL0UWMWF = "N"; /* re-set map warning flag*/
          CLXREC.CLXNEWSC = "Y"; /* set new screen flag*/
          CLXREC.CLXBLDAY = "Y"; /* set build array flag*/
        end
      end
    end
  end


end // end KL0US1J

// build prod id array key
Function KL0US1K()


  CLXREC.CLXCPROC = "CL0US1K"; /* set current proc name*/

  CLXREC.CLXLSTKE = " "; /* ; re-set prod summ last key*/
  CLXREC.CLXARAYX = 200; /* ; re-set prod summ array index*/
  while (CLXREC.CLXARAYX > 0 /* ; not at end-of-array*/
   && CLXREC.CLXLSTKE != " ") /* ; last array key not blank*/
    CLXREC.CLXLSTKE = CL0UW02.CL0UWKEY[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
  end


end // end KL0US1K

// pf10 - shp chg
Function KL0US1L()


  CLXREC.CLXCPROC = "CL0US1L"; /* set current process name*/

  if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
    CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/
    KL0US1M();
  else
    if ("S" in CL0UW02.CL0UMSEL) /* ; item has been selected*/
      CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(339); /* ; current selections lost*/
    else
      KL0US1M();
    end
  end


end // end KL0US1L

// transfer to CL0W
Function KL0US1M()


  CLXREC.CLXCPROC = "CL0US1M"; /* set current proc name*/

  COMMAREA.CATOAP = "KL0W"; /* ; go to shp chg*/
  COMMAREA.CAITEM = " ";

  CLXREC.CATOAP = COMMAREA.CATOAP;
  CLXREC.YCTCD = CLAREC.YCTCD;
  if (CLXREC.YATKEY in YATTBL.YATKEY)
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
  else
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(25);
  end


end // end KL0US1M

// pf13 - insp cmp
Function KL0US1N()


  CLXREC.CLXCPROC = "CL0US1N"; /* set current proc name*/

  if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
    CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXNEWSC = "Y"; /* ; set display new screen flag*/
    CLXREC.CLXCSCRN = "KL0UM010"; /* set next screen name*/
  else
    if ("S" in CL0UW02.CL0UMSEL) /* ; item was selected*/
      CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(339); /* ; current selections lost*/
    else
      CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
      CLXREC.CLXNEWSC = "Y"; /* ; set display new screen flag*/
      CLXREC.CLXCSCRN = "KL0UM010"; /* set next screen name*/
    end
  end


end // end KL0US1N

// pf14 - G/L
Function KL0US1O()


  CLXREC.CLXCPROC = "CL0US1O"; /* set current proc name*/

  if (CL0UW01.CL0UWMWF == "Y") /* ; user has been warned*/
    CL0UW01.CL0UWMWF = "N"; /* ; re-set map warning flag*/
    KL0US1P();
  else
    if ("S" in CL0UW02.CL0UMSEL) /* ; item has been selected*/
      CL0UW01.CL0UWMWF = "Y"; /* set map warning flag*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(339); /* ; current selections be lost*/
    else
      KL0US1P();
    end
  end


end // end KL0US1O

// transfer to CL0J
Function KL0US1P()


  CLXREC.CLXCPROC = "CL0US1P"; /* set current proc name*/

  COMMAREA.CATOAP = "KL0J"; /* ; go to g/l*/
  COMMAREA.CAITEM = " ";

  CLXREC.CATOAP = COMMAREA.CATOAP;
  CLXREC.YCTCD = CLAREC.YCTCD;
  if (CLXREC.YATKEY in YATTBL.YATKEY)
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXEOAF = "Y"; /* ; set end of application flag*/
    CLWREC.CLAGROUP = CLAREC.CLAGROUP;
    COMMAREA.CAUSERA = CLWREC.CLWGROUP;
    XPCL002();
  else
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(25);
  end


end // end KL0US1P

// pf15 - prod detail
Function KL0US1Q()


  CLXREC.CLXCPROC = "CL0US1Q"; /* set current process name*/

  if ("S" in CL0UW02.CL0UMSEL) /* ; item was selected*/
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXNEWSC = "Y"; /* ; set display new screen flag*/
    CLXREC.CLXBLDSC = "Y"; /* ; set build new screen flag*/
    CLXREC.CLXCSCRN = "KL0UM005"; /* set next screen name*/
  else
    if (CL0UW01.CL0UWUDF == "Y") /* ; updates are allowed*/
      CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
      CLXREC.CLXNEWSC = "Y"; /* ; set new screen flag*/
      CLXREC.CLXBLDSC = "Y"; /* ; set build screen flag*/
      CLXREC.CLXCSCRN = "KL0UM005";
    else
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    end
  end


end // end KL0US1Q

// build new screen
Function KL0US20()


  CLXREC.CLXCPROC = "CL0US20"; /* set current process name*/

  CL0UW01.CL0UWPAX = 0; /* ; re-set prod array index*/
  CL0UW01.CL0UWAQT = 0; /* ; clear total auth rtn qty*/
  CL0UW01.CL0UWRQT = 0; /* ; clear total act rtn qty*/

  KL0USC0(); /* initialize size arrays*/


  if ("S" in CL0UW02.CL0UMSEL) /* ; ARRAY ITEM WAS SELECTED*/
    CL0UW02.CL0UMSEL[sysVar.arrayIndex] = "V"; /* reset option in array*/
    CL0UW01.CL0UWPAX = sysVar.arrayIndex; /* set prod array index*/
    CL0UW01.SY1STNBR = CL0UW02.SY1STNBR[CL0UWPAX];
    CL0UW01.SY2CLRID = CL0UW02.SY2CLRID[CL0UWPAX];
    CL0UW01.XDMCD = CL0UW02.XDMCD[CL0UWPAX];
    CL0UW01.SY4SZSCL = CL0UW02.SY4SZSCL[CL0UWPAX];
    KL0USC1(); /* ; move prod array items to map*/
    KL0USC2(); /* ; build valid size array*/
    KL0USC3(); /* ; retrieve auth rtn recs*/
    KL0USC4(); /* ; retrieve act rtn recs*/
    KL0USC5(); /* ; build select size array*/
  else
    KL0USC6(); /* ; clear map for new prod add*/
  end

  CLXREC.CLXARY1X[CLXSCRNX] = 1; /* initialize size array index*/


end // end KL0US20

// move size array to map
Function KL0US21()
   /* *  2-15-91 bcourt rename CLNQCTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0US21"; /* set current process name*/

  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0) /* ; map size array not full*/
    CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;
    if (CLXREC.CLXARAYX > 40)
      KL0UM005.SY4IDDSC[CLXLINEX] = " ";
      KL0UM005.CLNRTSQ[CLXLINEX] = 0;
      KL0UM005.CLNGRPRC[CLXLINEX] = 0;
    else
      if (CL0UW02.SY4IDDSC[CLXARAYX] == " ")
        KL0UM005.SY4IDDSC[CLXLINEX] = " ";
        KL0UM005.CLNRTSQ[CLXLINEX] = 0;
        KL0UM005.CLNGRPRC[CLXLINEX] = 0;
      else
        CLXREC.CLXTESTF = "Y"; /* set test flag*/
        KL0UM005.SY4IDDSC[CLXLINEX] = CL0UW02.SY4IDDSC[CLXARAYX];
        KL0UM005.CLNRTSQ[CLXLINEX] = CL0UW02.CLNRTSQ[CLXARAYX];
        if (CL0UW02.CLNGRPRC[CLXARAYX] != 0)
          KL0UM005.CLNGRPRC[CLXLINEX] = CL0UW02.CLNGRPRC[CLXARAYX];
        else
          if (KL0UM005.CL0UMPRC > 0
           && CL0UW01.CL0UWUDF == "Y") /* updates are allowed*/
            KL0UM005.CLNGRPRC[CLXLINEX] = KL0UM005.CL0UMPRC;
          else
            KL0UM005.CLNGRPRC[CLXLINEX] = 0;
          end
        end
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end

  KL0USC7(); /* ; calc total rtn qty*/

  if (CL0UW01.CL0UWUDF == "N") /* ; no updates allowed*/
    KL0USC8(); /* ; set inquiry attributes*/
  else
    if (CLXREC.CLXTESTF == "Y") /* ; size data exists*/
      KL0USC9(); /* ; set change attributes*/
    else
      KL0USCA(); /* ; set add attributes*/
    end
  end


end // end KL0US21

// mark modified data fields
Function KL0US22()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/
                    /* rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0US22"; /* set current proc name*/

  if (KL0UM005.CLJNCRFL is modified) /* non cred rtn flag is modified*/
    set KL0UM005.CLJNCRFL modified;
  end

  if (KL0UM005.XWHCD is modified) /* ; warehouse was modified*/
    set KL0UM005.XWHCD modified;
  end

  if (KL0UM005.XXXUSRID is modified) /* inspect date modified*/
    set KL0UM005.XXXUSRID modified; /* 2-15-91*/
  end

  if (KL0UM005.CL0UMIDT is modified) /* inspect date modified*/
    set KL0UM005.CL0UMIDT modified;
  end

  if (KL0UM005.SY1STNBR is modified) /* prod id data modified*/
    set KL0UM005.SY1STNBR modified;
  end

  if (KL0UM005.SY2CLRID is modified)
    set KL0UM005.SY2CLRID modified;
  end

  if (KL0UM005.XDMCD is modified)
    set KL0UM005.XDMCD modified;
  end

  if (KL0UM005.XUMCD is modified) /* ; unit of measure modified*/
    set KL0UM005.XUMCD modified;
  end

  if (KL0UM005.CL0UMTAQ is modified) /* auth qty modified*/
    set KL0UM005.CL0UMTAQ modified;
  end

  if (KL0UM005.CL0UMDSZ is modified) /* starting size is modified*/
    set KL0UM005.CL0UMDSZ modified;
  end

  if (KL0UM005.CL0UMPRC is modified) /* starting price is modified*/
    set KL0UM005.CL0UMPRC modified;
  end

  CLXREC.CLXLINEX = 1; /* ; re-set map line index*/
  while (CLXREC.CLXLINEX <= 15) /* ; size data is modified*/
    if (KL0UM005.SY4IDDSC[CLXLINEX] is modified)
      set KL0UM005.SY4IDDSC[CLXLINEX] modified;
    end
    if (KL0UM005.CLNRTSQ[CLXLINEX] is modified)
      set KL0UM005.CLNRTSQ[CLXLINEX] modified;
    end
    if (KL0UM005.CLNGRPRC[CLXLINEX] is modified)
      set KL0UM005.CLNGRPRC[CLXLINEX] modified;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end


end // end KL0US22

// retrieve new prod data
Function KL0US23()


  CLXREC.CLXCPROC = "CL0US23"; /* set current proc name*/

  if (KL0UM005.SY1STNBR == " " /* ; no prod style number*/
   && KL0UM005.SY2CLRID == " ") /* ; no color id*/
    KL0UM005.XDMCD = " "; /* ; no diminsion*/
    set KL0UM005.SY1STNBR normal;
    set KL0UM005.SY2CLRID normal;
    set KL0UM005.XDMCD normal;
    return;
  end

  if (CLAREC.XGPCD == "02") /* ; gpc = footwear*/
    if (KL0UM005.SY2CLRID == " ") /* ; no color id entered*/
      KL0UM005.SY2CLRID = "00"; /* set default color value*/
      KL0UM005.XDMCD = "00"; /* ; set default dim value*/
    else
      if (KL0UM005.XDMCD == "  ")
        KL0UM005.XDMCD = "00"; /* ; fill dim with default value*/
      end
    end
  else
    if (KL0UM005.XDMCD == "  ")
      KL0UM005.XDMCD = "00"; /* ; fill dim with default value*/
    end
  end

  KL0USD0(); /* ; validate color/dim*/
  KL0USD1(); /* ; validate style*/

  if (CLXREC.CLXERRF == "Y") /* ; invalid style/color/dim*/
    KL0US24(); /* ; re-mark modified fields*/
    return; /* ; exit process*/
  else
    KL0USC2(); /* ; build valid size array*/
    if (CLXREC.CLXERRF == "Y") /* ; invalid style/color/dim*/
      KL0US24(); /* ; re-mark modified fields*/
      return; /* ; exit process*/
    else
      set KL0UM005.SY1STNBR initialAttributes; /* protect style field*/
      set KL0UM005.SY2CLRID initialAttributes; /* protect color field*/
      set KL0UM005.XDMCD initialAttributes; /* ; protect dimension field*/
      KL0USD2(); /* ; add prod to summ array*/
      KL0USC3(); /* ; retrieve all auth rtn recs*/
      KL0USC4(); /* ; retrieve all act rtn recs*/
    end
  end

  if (KL0UM005.CL0UMPRC is modified /* new default price*/
   || KL0UM005.CL0UMDSZ is modified) /* new default size*/
    KL0US25();
  else
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    CLXREC.CLXARY1X[CLXSCRNX] = 1; /* set size array starting index*/
    KL0US21(); /* ; move size array to map*/
  end


end // end KL0US23

// re-mark modified fields
Function KL0US24()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/
                    /* rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0US24"; /* set current proc name*/

  if (KL0UM005.CLJNCRFL is modified) /* non cred rtn flag is modified*/
    set KL0UM005.CLJNCRFL modified;
  end

  if (KL0UM005.XWHCD is modified) /* ; warehouse was modified*/
    set KL0UM005.XWHCD modified;
  end

  if (KL0UM005.XXXUSRID is modified) /* inspect date modified*/
    set KL0UM005.XXXUSRID modified; /* 2-15-91*/
  end

  if (KL0UM005.CL0UMIDT is modified) /* inspect date modified*/
    set KL0UM005.CL0UMIDT modified;
  end

  if (KL0UM005.XUMCD is modified) /* ; unit of measure modified*/
    set KL0UM005.XUMCD modified;
  end

  if (KL0UM005.CL0UMTAQ is modified) /* auth qty modified*/
    set KL0UM005.CL0UMTAQ modified;
  end

  if (KL0UM005.CL0UMDSZ is modified) /* starting size is modified*/
    set KL0UM005.CL0UMDSZ modified;
  end

  if (KL0UM005.CL0UMPRC is modified) /* starting price is modified*/
    set KL0UM005.CL0UMPRC modified;
  end

  CLXREC.CLXLINEX = 0; /* ; re-set map line index*/
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (KL0UM005.CLNRTSQ[CLXLINEX] is modified)
      set KL0UM005.CLNRTSQ[CLXLINEX] modified;
    end
    if (KL0UM005.CLNGRPRC[CLXLINEX] is modified)
      set KL0UM005.CLNGRPRC[CLXLINEX] modified;
    end
  end


end // end KL0US24

// validate starting size/price
Function KL0US25()


  CLXREC.CLXCPROC = "CL0US25"; /* set current proc name*/

  if (KL0UM005.CL0UMPRC is modified) /* new starting price*/
    KL0USD5(); /* ; validate starting price*/
  end

  if (KL0UM005.CL0UMDSZ is modified) /* new starting size*/
    KL0USD6(); /* ; validate starting size*/
  end

  if (CLXREC.CLXERRF == "N") /* ; no map errors exist*/
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    KL0US21(); /* ; move size array to map*/
  end


end // end KL0US25

// validate new size price/qty
Function KL0US26()


  CLXREC.CLXCPROC = "CL0US26"; /* set current proc name*/

  if (KL0UM005.SY4IDDSC[CLXLINEX] != " ") /* map size exists*/
    KL0USD7(); /* ; validate price*/
    KL0USD8(); /* ; validate qty*/
  end


end // end KL0US26

// validate auth qty
Function KL0US27()


  CLXREC.CLXCPROC = "CL0US27"; /* set current proc name*/

  if (KL0UM005.CL0UMTAQ is modified) /* new auth qty*/
    CLXREC.CLXEDITF = "Y"; /* ; set data edited flag*/
    if (KL0UM005.CL0UMTAQ >= 0) /* ; valid auth qty*/
      set KL0UM005.CL0UMTAQ normal;
    else
      set KL0UM005.CL0UMTAQ cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    end
  end


end // end KL0US27

// validate unit of measure
Function KL0US28()


  CLXREC.CLXCPROC = "CL0US28"; /* set current proc name*/

  if (KL0UM005.XUMCD == " ")
    KL0UM005.XUMCD = CL0UW01.XUMCD;
    if (KL0UM005.XUMCD in XUMTBL.XUMCD)
      KL0UM005.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
  else
    if (KL0UM005.XUMCD in XUMTBL.XUMCD)
      KL0UM005.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0) /* ; table match*/
      set KL0UM005.XUMCD normal;
      CL0UW01.XUMCD = KL0UM005.XUMCD;
    else
      set KL0UM005.XUMCD cursor, modified, bold;
      KL0UM005.XUMDESC = " "; /* clear unit of meas desc*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(333);
    end
  end


end // end KL0US28

// validate inspection id
Function KL0US29()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0US29"; /* set current proc name*/

  if (KL0UM005.XXXUSRID == " ") /* ; no inspector id*/
    set KL0UM005.XXXUSRID cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(21);
  else
    CL0UW01.XXXUSRID = KL0UM005.XXXUSRID; /* 2-15-91*/
    KL0UM001.XXXUSRID = KL0UM005.XXXUSRID;
    KL0UM010.XXXUSRID = KL0UM005.XXXUSRID;
  end



end // end KL0US29

// validate inspect date
Function KL0US2A()


  CLXREC.CLXCPROC = "CL0US2A"; /* set current proc name*/

  if (KL0UM005.CL0UMIDT == " ")
    CL0UW01.CLLIDT = CLXREC.XXXCDTE;
    CLXREC.XXXFLMM = CLXREC.XXXCMM; /* format long month*/
    CLXREC.XXXSEP5 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXCDD; /* format long day*/
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLYY = CLXREC.XXXCYY; /* format long year*/
    KL0UM001.CL0UMIDT = CLXREC.XXXFLDT;
    KL0UM005.CL0UMIDT = CLXREC.XXXFLDT;
    set KL0UM005.CL0UMIDT initialAttributes;
  else
    if (KL0UM005.CL0UMIDT is modified)
      CLXREC.XXXEDFLD = KL0UM005.CL0UMIDT;
      XPCL004();
      if (CLXREC.CLXVALDT == "Y")
        set KL0UM005.CL0UMIDT normal;
        CL0UW01.CLLIDT = TA2REC.TA2GRGGN;
        CLXREC.XXXWDTE = TA2REC.TA2GRGGN;
        CLXREC.XXXFLYY = CLXREC.XXXWYY;
        CLXREC.XXXFLMM = CLXREC.XXXWMM;
        CLXREC.XXXFLDD = CLXREC.XXXWDD;
        CLXREC.XXXSEP5 = "-";
        CLXREC.XXXSEP6 = "-";
        /* --------------------- y2k out begin --------------------*/
        /* IF CLXREC.XXXWYMD LE CL0UW01.CL0UWYMD;*/
        /* --------------------- y2k out end   --------------------*/

        /* --------------------- y2k in begin  --------------------*/
        if (CLXREC.XXXWCYMD <= CL0UW01.CL0UWYMD)
        /* --------------------- y2k in end    --------------------*/
          KL0UM001.CL0UMIDT = CLXREC.XXXFLDT;
          KL0UM005.CL0UMIDT = CLXREC.XXXFLDT;
        else
          set KL0UM005.CL0UMIDT cursor, modified, bold;
          CLXREC.CLXERRF = "Y"; /* set map error flag*/
          converseLib.validationFailed(293);
        end
      else
        set KL0UM005.CL0UMIDT cursor, modified, bold;
        CLXREC.CLXERRF = "Y"; /* set map error flag*/
        converseLib.validationFailed(17);
      end
    end
  end


end // end KL0US2A

// validate warehouse code
Function KL0US2B()


  CLXREC.CLXCPROC = "CL0US2B"; /* set current proc name*/

  if (KL0UM005.XWHCD in XWHTBL.XWHCD)
    KL0UM005.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex > 0 /* ; valid warehouse code*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    set KL0UM005.XWHCD normal;
    CL0UW01.XWHCD = KL0UM005.XWHCD;
  else
    set KL0UM005.XWHCD cursor, modified, bold;
    KL0UM005.XWHSABRV = " "; /* ; clear warehouse abrv*/
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    converseLib.validationFailed(400);
  end


end // end KL0US2B

// validate non cred rtn flag
Function KL0US2C()


  CLXREC.CLXCPROC = "CL0US2C"; /* set current proc name*/

  if (CL0UW01.CL0UWUDF == "Y") /* ; updates are allowed*/
    if (KL0UM005.CLJNCRFL == "Y" /* ; non cred rtn flag = 'y'*/
     || KL0UM005.CLJNCRFL == "N") /* ; non cred rtn flag = 'n'*/
      set KL0UM005.CLJNCRFL normal;
      KL0UM001.CLJNCRFL = KL0UM005.CLJNCRFL;
      CL0UW01.CLJNCRFL = KL0UM005.CLJNCRFL;
    else
      set KL0UM005.CLJNCRFL cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(367);
    end
  end


end // end KL0US2C

// re-calc total rtn qty
Function KL0US2D()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0US2D"; /* set current proc name*/

  CL0UW01.CL0UWRQT = 0; /* ; re-set total rtn qty*/

  CLXREC.CLXARAYX = 1;
  while (CLXREC.CLXARAYX < CLXREC.CLXARY1X[CLXSCRNX])
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CL0UW02.CLNRTSQ[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + KL0UM005.CLNRTSQ[CLXLINEX];
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXARAYX <= 40)
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CL0UW02.CLNRTSQ[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

  KL0UM005.CL0UMTRQ = CL0UW01.CL0UWRQT;


end // end KL0US2D

// update data bases
Function KL0US30()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0US30"; /* set current process name*/

  CLXREC.CLXLINEX = 0; /* ; re-set map array index*/
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (KL0UM005.SY4IDDSC[CLXLINEX] != " ")
      CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;
      if (KL0UM005.XUMCD != CL0UW02.XUMCD[CL0UWPAX])
        KL0USD9(); /* ; update rts act rtn rec*/
      else
        if (KL0UM005.CLNRTSQ[CLXLINEX] != CL0UW02.CLNRTSQ[CLXARAYX])
          KL0USD9(); /* ; update rts act rtn rec*/
        else
          if (KL0UM005.CLNGRPRC[CLXLINEX] != CL0UW02.CLNGRPRC[CLXARAYX]
           && KL0UM005.CLNRTSQ[CLXLINEX] > +0)
            KL0USD9(); /* ; update rts act rtn recs*/
          end
        end
      end
    end
  end

  KL0USDG(); /* ; update auth rtn recs*/
  KL0USDK(); /* ; update act rtn recs*/
  KL0USE0(); /* ; update prod summ array*/


end // end KL0US30

// pf7 - page back thru sizes
Function KL0US31()


  CLXREC.CLXCPROC = "CL0US31"; /* set current process name*/

  if (CLXREC.CLXARY1X[CLXSCRNX] == +1)
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(335);
    return;
  else
    CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX - CLXREC.CLXMAXLN[CLXSCRNX];
    if (CLXREC.CLXARAYX <= 1)
      CLXREC.CLXARY1X[CLXSCRNX] = 1;
      CLXREC.CLXNEWSC = "Y";
    else
      CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXARAYX;
      CLXREC.CLXNEWSC = "Y";
    end
  end


end // end KL0US31

// pf8 - page frwd thru sizes
Function KL0US32()


  CLXREC.CLXCPROC = "CL0US32"; /* set current proc name*/

  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXMAXLN[CLXSCRNX];

  if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(336);
  else
    CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXARAYX;
    CLXREC.CLXNEWSC = "Y";
  end


end // end KL0US32

// pf15 - prod summ
Function KL0US33()


  CLXREC.CLXCPROC = "CL0US33"; /* set current process name*/

  CL0UW01.CL0UWLPX = 0; /* ; re-set last prod array index*/

  CLXREC.CLXARAYX = 0; /* ; re-set array index*/
  while (CLXREC.CLXARAYX < 200) /* ; not at end of array*/
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    if (CL0UW02.SY1STNBR[CLXARAYX] != " ")
      CL0UW01.CL0UWLPX = CLXREC.CLXARAYX;
    end
  end

  CLXREC.CLXEOSF = "Y"; /* ; set end-of-screen flag*/
  CLXREC.CLXNEWSC = "Y"; /* ; set new screen flag*/

  CLXREC.CLXCSCRN = "KL0UM001"; /* set new screen name*/


end // end KL0US33

// get CLJREC - clm rtn auth rec
Function KL0US34()


  CLXREC.CLXCPROC = "CL0US34"; /* set current proc name*/

  KL0USE1(); /* ; re-calc ttl auth rtn qty*/

  set CLJREC empty;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;

  KL0U874(); /* ; inquire on claim rts auth rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    CL0UW01.CLJRSKFL = CLJREC.CLJRSKFL;
    KL0USE2(); /* ; update CLJREC*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CL0UW01.CLJRSKFL = "N";
      KL0USE4(); /* ; add CLJREC*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        CLXREC.CLXEOSF = "N"; /* re-set end of screen flag*/
        CLXREC.CLXEOAF = "N";
                                   /* re-set end of application flag*/
      end
    end
  end


end // end KL0US34

// get CLMREC - claim rts act rec
Function KL0US35()


  CLXREC.CLXCPROC = "CL0US35"; /* set current proc name*/

  KL0USE5(); /* ; re-calc est val/ttl qty*/
  KL0USE6(); /* ; re-calc ttl act rtn qty*/

  set CLMREC empty;
  CLMREC.CLACLMNB = CLAREC.CLACLMNB;
  CLMREC.CLHSEQNB = CLWREC.CLHSEQNB;

  KL0U914(); /* ; inquire on claim rts act rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    KL0USE7(); /* ; update CLMREC*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      KL0USEA(); /* ; add CLMREC*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        CLXREC.CLXEOSF = "N"; /* re-set end of screen flag*/
        CLXREC.CLXEOAF = "N";
                                   /* re-set end of application flag*/
      end
    end
  end


end // end KL0US35

// update claim header rec
Function KL0US36()


  CLXREC.CLXCPROC = "CL0US36"; /* set current proc name*/

  KL0USEB(); /* ; re-calc est value/ttl qty*/

  CLAREC.CLACLMNB = KL0UM005.CLACLMNB;

  KL0U924(); /* ; inquire on claim hdr rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    KL0USEC(); /* ; select record for update*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
    end
  end


end // end KL0US36

// get inspect complete flag
Function KL0US40()
   /* **********************************************************/
   /* * 08-13-93 JCAREY CHANGED XXXYNFL TO CL0UMINF.          **/
   /* **********************************************************/


  CLXREC.CLXCPROC = "CL0US40"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = KL0UM010.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  KL0U854(); /* select unique on cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CLXREC.XXXWDTE = CL2REC.CL2ISXDT;
    if (CLXREC.XXXWYMD == 0)
      set KL0UM010.CL0UMINF cursor, normal;
      set KL0UM010.CL0UMHD1 skip, invisible;
      set KL0UM010.CL0UMICD skip, invisible;
      KL0UM010.CL0UMINF = "N";
      KL0UM010.CL0UMICD = " ";
    else
      set KL0UM010.CL0UMINF initialAttributes;
      set KL0UM010.CL0UMHD1 initialAttributes;
      set KL0UM010.CL0UMICD initialAttributes;
      CL0UW01.CL0UWUDF = "N";
      KL0UM010.CL0UMINF = "Y";
      CLXREC.XXXWDTE = CL2REC.CL2ISXDT;
      CLXREC.XXXFLMM = CLXREC.XXXWMM; /* format long month*/
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXWDD; /* format long day*/
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLYY = CLXREC.XXXWYY; /* format long year*/
      KL0UM010.CL0UMICD = CLXREC.XXXFLDT;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      set KL0UM010.CL0UMINF cursor, normal;
      set KL0UM010.CL0UMHD1 skip, invisible;
      set KL0UM010.CL0UMICD skip, invisible;
      KL0UM010.CL0UMINF = "N";
      KL0UM010.CL0UMICD = " ";
    end
  end

  CL0UW01.YCSCD = CLAREC.YCSCD1;
  CL0UW01.CLASTTDT = CLAREC.CLASTTDT;

  if (CL0UW01.YCSCD in YCSTBL.YCSCD)
    CL0UW01.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    CL0UW01.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
  else
    CL0UW01.YCSACTCD = " ";
    CL0UW01.YCSRPTEX = " ";
  end


end // end KL0US40

// get comments
Function KL0US41()


  CLXREC.CLXCPROC = "CL0US41"; /* set current proc name*/

  CL0UW01.CL-CLCOM-FL = "N";

  CLXREC.CLXLINEX = +1; /* ; re-set map array index*/
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    KL0UM010.CLGCOMNT[CLXLINEX] = " ";
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  KL0USG0(); /* ; retrieve comments*/

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > +0)
    KL0USG2(); /* ; set comments attributes*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end


end // end KL0US41

// get remechandising quantities
Function KL0US42()
   /* * Maintenance Log:*/
   /* *  2-15-91 bcourt reanme CLMTARQY to CL0UWTQT*/
   /* **********************************************************/

  CLXREC.CLXCPROC = "CL0US42"; /* set current proc name*/

  set CLJREC empty;
  CLJREC.CLACLMNB = KL0UM010.CLACLMNB;

  KL0U924(); /* ; successful inquiry*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CLJTATHQ = CLJREC.CLJTATHQ;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CL0UW01.CLJTATHQ = +0;
    end
  end


  set CLMREC empty;
  CLMREC.CLACLMNB = KL0UM010.CLACLMNB;
  CLMREC.CLHSEQNB = KL0UM010.CLHSEQNB;

  KL0U914(); /* ; successful inquiry*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CL0UWTQT = CLMREC.CLMTRTSQ; /* 2-15-91*/
    KL0UM010.CLMRTGQ = CLMREC.CLMRTGQ;
    KL0UM010.CLMUNLQ = CLMREC.CLMUNLQ;
    KL0UM010.CLMRBXQ = CLMREC.CLMRBXQ;
    KL0UM010.CLMRBGQ = CLMREC.CLMRBGQ;
    KL0UM010.CLMRMHCG = CLMREC.CLMRMHCG;
    KL0UM010.CLMRSKCG = CLMREC.CLMRSKCG;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CL0UW01.CL0UWTQT = +0; /* 2-15-91*/
      KL0UM010.CLMRTGQ = +0;
      KL0UM010.CLMUNLQ = +0;
      KL0UM010.CLMRBXQ = +0;
      KL0UM010.CLMRBGQ = +0;
      KL0UM010.CLMRMHCG = +0;
      KL0UM010.CLMRSKCG = +0;
    end
  end

  if (CL0UW01.CL0UWUDF == "Y") /* data updates are allowed*/
    set KL0UM010.CLMRTGQ cursor, normal;
    set KL0UM010.CLMUNLQ normal;
    set KL0UM010.CLMRBXQ normal;
    set KL0UM010.CLMRBGQ normal;
  else
    set KL0UM010.CLMRTGQ initialAttributes;
    set KL0UM010.CLMUNLQ initialAttributes;
    set KL0UM010.CLMRBXQ initialAttributes;
    set KL0UM010.CLMRBGQ initialAttributes;
  end


end // end KL0US42

// mark modified fields
Function KL0US43()


  CLXREC.CLXCPROC = "CL0US43"; /* set current process name*/

  if (KL0UM010.CLMRTGQ is modified)
    set KL0UM010.CLMRTGQ modified;
  end

  if (KL0UM010.CLMUNLQ is modified)
    set KL0UM010.CLMUNLQ modified;
  end

  if (KL0UM010.CLMRBXQ is modified)
    set KL0UM010.CLMRBXQ modified;
  end

  if (KL0UM010.CLMRBGQ is modified)
    set KL0UM010.CLMRBGQ modified;
  end

  CLXREC.CLXLINEX = 0;
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (KL0UM010.CLGCOMNT[CLXLINEX] is modified)
      CLXREC.CLXEDITF = "Y";
    end
  end


end // end KL0US43

// validate insp comp flag
Function KL0US44()
   /* * Maintenance Log:*/
   /* *  2-15-91 bcourt rename CLMTARQY to CL0UWTQT*/
   /* * 08-13-93 jcarey changed xxxynfl to cl0uminf*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0US44"; /* set current process name*/

  if (KL0UM010.CL0UMINF == "N") /* ; inspection not complete*/
    set KL0UM010.CL0UMHD1 skip, invisible; /* darken 'as of' field*/
    set KL0UM010.CL0UMINF normal; /* ; re-set inspect complete field*/
    KL0UM010.CL0UMICD = " "; /* ; re-set inspect complete date*/
    CL0UW01.YCSCD = CLAREC.YCSCD1;
    CL0UW01.CLASTTDT = CLAREC.CLASTTDT;
  else
    if (KL0UM010.CL0UMINF == "Y") /* ; inspection complete*/
      if (CL0UW01.CL0UWTQT > 0) /* 2/91  ; act rtn qty > 0*/
        set KL0UM010.CL0UMINF normal; /* re-set inspect complete field*/
        set KL0UM010.CL0UMHD1 initialAttributes; /* show 'as of' field*/
        CLXREC.XXXFLMM = CLXREC.XXXCMM;
        CLXREC.XXXSEP5 = "-";
        CLXREC.XXXFLDD = CLXREC.XXXCDD;
        CLXREC.XXXSEP6 = "-";
        CLXREC.XXXFLYY = CLXREC.XXXCYY;
        KL0UM010.CL0UMICD = CLXREC.XXXFLDT;
        CL0UW01.YCSCD = "RPM";
        CL0UW01.CLASTTDT = CLXREC.XXXCDTE;
      else
        set KL0UM010.CL0UMINF cursor, modified, bold;
        set KL0UM010.CL0UMHD1 skip, invisible;
        CL0UW01.YCSCD = CLAREC.YCSCD1;
        CL0UW01.CLASTTDT = CLAREC.CLASTTDT;
        KL0UM010.CL0UMICD = " ";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(373);
      end
    else
      set KL0UM010.CL0UMINF cursor, modified, bold;
      set KL0UM010.CL0UMHD1 skip, invisible;
      CL0UW01.YCSCD = CLAREC.YCSCD1;
      CL0UW01.CLASTTDT = CLAREC.CLASTTDT;
      KL0UM010.CL0UMICD = " ";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(367);
    end
  end

  if (CL0UW01.YCSCD in YCSTBL.YCSCD)
    CL0UW01.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    CL0UW01.YCSRPTEX = YCSTBL.YCSRPTEX[sysVar.arrayIndex];
  else
    CL0UW01.YCSACTCD = " ";
    CL0UW01.YCSRPTEX = " ";
  end


end // end KL0US44

// compare fields to ttl rtn qty
Function KL0US45()
   /* * Maintenance Log:*/
   /* *  2-15-91 bcourt rename CLMTARQY to CL0UWTQT*/
   /* *******************************************************/

  CLXREC.CLXCPROC = "CL0US45"; /* set current proc name*/

  if (KL0UM010.CLMRBGQ <= CL0UW01.CL0UWTQT) /* 2-15-91*/
    set KL0UM010.CLMRBGQ normal;
  else
    set KL0UM010.CLMRBGQ cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(334);
  end

  if (KL0UM010.CLMRBXQ <= CL0UW01.CL0UWTQT) /* 2-15-91*/
    set KL0UM010.CLMRBXQ normal;
  else
    set KL0UM010.CLMRBXQ cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(334);
  end

  if (KL0UM010.CLMUNLQ <= CL0UW01.CL0UWTQT) /* 2-15-91*/
    set KL0UM010.CLMUNLQ normal;
  else
    set KL0UM010.CLMUNLQ cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(334);
  end

  if (KL0UM010.CLMRTGQ <= CL0UW01.CL0UWTQT) /* 2-15-91*/
    set KL0UM010.CLMRTGQ normal;
  else
    set KL0UM010.CLMRTGQ cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(334);
  end


end // end KL0US45

// update comment indicator
Function KL0US46()


  CLXREC.CLXCPROC = "CL0US46"; /* set current proc name*/

  CL0UW01.CL-CLCOM-FL = "N";

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0)
    if (KL0UM010.CLGCOMNT[CLXLINEX] != " ")
      CL0UW01.CL-CLCOM-FL = "Y";
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end


end // end KL0US46

// determine restock charges
Function KL0US47()


  CLXREC.CLXCPROC = "CL0US47"; /* set current proc name*/

  set CLJREC empty;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;

  KL0U874(); /* ; inquire on rtn auth rec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0USG3(); /* ; recalc restock charges*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      CL0UW01.CLMRSKCG = +0;
    end
  end

  KL0UM010.CLMRSKCG = CL0UW01.CLMRSKCG;


end // end KL0US47

// recalc remerch charges
Function KL0US48()


  CLXREC.CLXCPROC = "CL0US48"; /* set current proc name*/

  CL0UW01.CL0UWBGC = 0; /* ; re-set rebagging charge*/
  CL0UW01.CL0UWBXC = 0; /* ; re-set reboxing charge*/
  CL0UW01.CL0UWULC = 0; /* ; re-set unlacing charge*/
  CL0UW01.CL0UWTRC = 0; /* ; re-set tag removal charge*/
  CL0UW01.CLMRMHCG = 0; /* ; re-set remerch charge*/

  if (CLAREC.XGPCD in YRMTBL.XGPCD)
    CL0UW01.CL0UWBGC = YRMTBL.YRMREBAG[sysVar.arrayIndex] * KL0UM010.CLMRBGQ;
    CL0UW01.CL0UWBXC = YRMTBL.YRMREBOX[sysVar.arrayIndex] * KL0UM010.CLMRBXQ;
    CL0UW01.CL0UWULC = YRMTBL.YRMUNLCE[sysVar.arrayIndex] * KL0UM010.CLMUNLQ;
    CL0UW01.CL0UWTRC = YRMTBL.YRMTAGRM[sysVar.arrayIndex] * KL0UM010.CLMRTGQ;
    CL0UW01.CLMRMHCG = CL0UW01.CLMRMHCG + CL0UW01.CL0UWBGC;
    CL0UW01.CLMRMHCG = CL0UW01.CLMRMHCG + CL0UW01.CL0UWBXC;
    CL0UW01.CLMRMHCG = CL0UW01.CLMRMHCG + CL0UW01.CL0UWULC;
    CL0UW01.CLMRMHCG = CL0UW01.CLMRMHCG + CL0UW01.CL0UWTRC;
  end

  KL0UM010.CLMRMHCG = CL0UW01.CLMRMHCG;


end // end KL0US48

// update data bases
Function KL0US49()


  CLXREC.CLXCPROC = "CL0US49"; /* set current proc name*/

  CL0UW01.CL0UWTVL = 0; /* ; reset w.s. total value*/

  KL0USG4(); /* ; update CLGREC - comment recs*/
  KL0USGB(); /* ; update CLLREC - act rtn rec*/
  KL0USGF();
                                   /* ; update CLMREC - rts act rtn hdr*/
  KL0USGL(); /* ; update CLAREC - clm hdr*/


end // end KL0US49

// find invoice nbr
Function KL0USA0()


  CLXREC.CLXCPROC = "CL0USA0"; /* set current process name*/

  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "*";

  KL0U841(); /* ; select all ivc recs for claim*/

  KL0U842(); /* ; fetch first rec of set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful fetch*/
    CLXREC.IV0IVCID = CLBREC.IV0IVCID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CLXREC.IV0IVCID = 0;
    end
  end


end // end KL0USA0

// save CLWREC fields
Function KL0USA1()


  CLXREC.CLXCPROC = "CL0USA1"; /* set current proc name*/

  KL0UM001.KUCCONM = CLWREC.KUCCONM;
  KL0UM001.CLHSEQNB = CLWREC.CLHSEQNB;

  KL0UM005.KUCCONM = CLWREC.KUCCONM;
  KL0UM005.CLHSEQNB = CLWREC.CLHSEQNB;

  KL0UM010.KUCCONM = CLWREC.KUCCONM;
  KL0UM010.CLHSEQNB = CLWREC.CLHSEQNB;


end // end KL0USA1

// save CLAREC fields
Function KL0USA2()


  CLXREC.CLXCPROC = "CL0USA2"; /* set current proc name*/

  KL0UM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0UM001.KUCCOID = CLAREC.KUCCOID;
  KL0UM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0UM001.XNXCD = CLAREC.XNXCD;
  KL0UM001.XGPCD = CLAREC.XGPCD;
  KL0UM001.YCTCD = CLAREC.YCTCD;

  KL0UM005.CLACLMNB = CLAREC.CLACLMNB;
  KL0UM005.KUCCOID = CLAREC.KUCCOID;
  KL0UM005.KUMSTRID = CLAREC.KUMSTRID;
  KL0UM005.XNXCD = CLAREC.XNXCD;

  KL0UM010.CLACLMNB = CLAREC.CLACLMNB;
  KL0UM010.KUCCOID = CLAREC.KUCCOID;
  KL0UM010.KUMSTRID = CLAREC.KUMSTRID;
  KL0UM010.XNXCD = CLAREC.XNXCD;

  CL0UW01.XGPCD = CLAREC.XGPCD;


end // end KL0USA2

// save CLLREC fields
Function KL0USA3()

   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USA3"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = KL0UM001.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  KL0U854(); /* select unique from cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.XWHCD = CLLREC.XWHCD;
    CL0UW01.XXXUSRID = CL2REC.XXXUSRID; /* 2-15-91*/
    KL0UM001.XXXUSRID = CL2REC.XXXUSRID; /* "*/
    KL0UM005.XXXUSRID = CL2REC.XXXUSRID; /* "*/
    KL0UM010.XXXUSRID = CL2REC.XXXUSRID; /* "*/
    CL0UW01.CLLIDT = CL2REC.CL2ISBDT;
    CLXREC.XXXWDTE = CL2REC.CL2ISBDT;
    CLXREC.XXXFLMM = CLXREC.XXXWMM; /* format long month*/
    CLXREC.XXXSEP5 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXWDD; /* format long day*/
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLYY = CLXREC.XXXWYY; /* format long year*/
   /* tcs changes begin 12/30/99*/
   /* MOVE CLXREC.XXXCYMD TO CL0UW01.CL0UWYMD;*/
    CL0UW01.CL0UWYMD = CLXREC.XXXCDTE;
   /* tcs changes end   12/30/99*/
    KL0UM001.CL0UMIDT = CLXREC.XXXFLDT;
    KL0UM005.CL0UMIDT = CLXREC.XXXFLDT;
    KL0UM005.XWHCD = CLLREC.XWHCD;
    if (KL0UM005.XWHCD in XWHTBL.XWHCD)
      KL0UM005.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      CL0UW01.CLLIDT = CLXREC.XXXCDTE;
      CLXREC.XXXFLMM = CLXREC.XXXCMM; /* format long month*/
      CLXREC.XXXSEP5 = "-";
      CLXREC.XXXFLDD = CLXREC.XXXCDD; /* format long day*/
      CLXREC.XXXSEP6 = "-";
      CLXREC.XXXFLYY = CLXREC.XXXCYY; /* format long year*/
   /* tcs changes begin 12/30/99*/
     /* MOVE CLXREC.XXXCYMD TO CL0UW01.CL0UWYMD;*/
      CL0UW01.CL0UWYMD = CLXREC.XXXCDTE;
   /* tcs changes end   12/30/99*/
      /* MOVE CLXREC.XXXFLDT TO CL0UM001.CL0UMIDT;*/
      /* MOVE CLXREC.XXXFLDT TO CL0UM005.CL0UMIDT;*/
    end
  end


end // end KL0USA3

// move CLJREC fields to maps
Function KL0USA6()


  CLXREC.CLXCPROC = "CL0USA6"; /* set current proc name*/

  set CLJREC empty;
  CLJREC.CLACLMNB = KL0UM001.CLACLMNB;

  KL0U874(); /* select unique from cljrec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0UM001.CL0UMTAQ = CLJREC.CLJTATHQ;
    KL0UM001.CLJNCRFL = CLJREC.CLJNCRFL;
    KL0UM005.CLJNCRFL = CLJREC.CLJNCRFL;
    CL0UW01.CLJNCRFL = CLJREC.CLJNCRFL;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KL0UM001.CL0UMTAQ = +0;
      KL0UM001.CLJNCRFL = " ";
      KL0UM005.CLJNCRFL = " ";
      CL0UW01.CLJNCRFL = " ";
    end
  end


end // end KL0USA6

// move CLMREC fields to maps
Function KL0USA7()


  CLXREC.CLXCPROC = "CL0USA7"; /* set current proc name*/

  set CLMREC empty;
  CLMREC.CLACLMNB = CLAREC.CLACLMNB;
  CLMREC.CLHSEQNB = CLWREC.CLHSEQNB;

  KL0U914(); /* select unique from clmrec*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0UM001.CL0UMTRQ = CLMREC.CLMTRTSQ;
    KL0UM001.CL0UMAMT = CLMREC.CLMRMAMT * -1;
    CL0UW01.CL-CLCOM-FL = CLMREC.CLACMIND;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KL0UM001.CL0UMAMT = +0;
      KL0UM001.CL0UMTRQ = +0;
      CL0UW01.CL-CLCOM-FL = "N";
    end
  end


end // end KL0USA7

// select all auth rtn recs
Function KL0USA8()


  CLXREC.CLXCPROC = "CL0USA8"; /* set current proc name*/

  set CLKREC empty;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**";
  CLKREC.XQACD = "**";
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  CLKREC.SY5SZID = -1;
  CLKREC.CLJRDIND = "R";

  KL0U831(); /* ; select all rtn auth recs*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CL0UWF1F = "N";
                                   /* ; re-set file 1 end-of-file flag*/
    KL0USA9(); /* ; process previous array recs*/
  end


end // end KL0USA8

// process prev array recs
Function KL0USA9()


  CLXREC.CLXCPROC = "CL0USA9"; /* set current proc name*/

  CL0UW01.CL0UWTAQ = 0; /* ; re-set total auth rth qty*/

  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
  while (CL0UW01.CL0UWF1F == "N" /* ; not at end-of-file*/
   && CLXREC.CLXTESTF == "N") /* ; rec was in prev array*/
    KL0U832(); /* ; fetch auth rtn detail rec*/
    if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
      KL0USAA(); /* ; compare key to CLXLSTKE*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* ; no more recs*/
        CL0UW01.CL0UWF1F = "Y"; /* set file 1 end-of-file flag*/
      end
    end
  end


end // end KL0USA9

// compare CLKREC/CLXLSTKE
Function KL0USAA()


  CLXREC.CLXCPROC = "CL0USAA"; /* set current proc name*/

  CL0UW01.SY1STNBR = CLKREC.SY1STNBR;
  CL0UW01.SY2CLRID = CLKREC.SY2CLRID;
  CL0UW01.XDMCD = CLKREC.XDMCD;

  if (CL0UW01.CL0UWAKE <= CLXREC.CLXLSTKE) /* record > last array key*/
    CL0UW01.CL0UWTAQ = CL0UW01.CL0UWTAQ + CLKREC.CLKAUTHQ;
  else
    CLXREC.CLXTESTF = "Y"; /* ; set test flag*/
  end


end // end KL0USAA

// select all act rtn recs
Function KL0USAB()


  CLXREC.CLXCPROC = "CL0USAB"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLNREC.XGPCD = CLAREC.XGPCD;
  CLNREC.SY1STNBR = "******";
  CLNREC.SY2CLRID = "***";
  CLNREC.XDMCD = "**";
  CLNREC.XQACD = "**";
  CLNREC.XUMCD = "**";
  CLNREC.SY5SZID = -1;

  KL0U811(); /* ; select all act rtn recs*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CL0UWF2F = "N"; /* ; re-set file 2 EOF flag*/
    KL0USAC(); /* ; process prev array recs*/
  end


end // end KL0USAB

// process prev array recs
Function KL0USAC()


  CLXREC.CLXCPROC = "CL0USAC"; /* set current proc name*/

  CL0UW01.CL0UWTRQ = 0; /* ; re-set total auth rth qty*/

  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
  while (CL0UW01.CL0UWF2F == "N" /* ; not at end-of-file*/
   && CLXREC.CLXTESTF == "N") /* ; rec was in prev array*/
    KL0U812(); /* ; fetch act rtn detail rec*/
    if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
      KL0USAD(); /* ; compare CLNREC to CLXLSTKE*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* ; no more recs*/
        CL0UW01.CL0UWF2F = "Y"; /* set file 2 end-of-file flag*/
      end
    end
  end


end // end KL0USAC

// compare CLNREC/CLXLSTKE
Function KL0USAD()


  CLXREC.CLXCPROC = "CL0USAD"; /* set current proc name*/

  CL0UW01.SY1STNBR = CLNREC.SY1STNBR;
  CL0UW01.SY2CLRID = CLNREC.SY2CLRID;
  CL0UW01.XDMCD = CLNREC.XDMCD;

  if (CL0UW01.CL0UWAKE <= CLXREC.CLXLSTKE) /* record > last array key*/
    CL0UW01.CL0UWTRQ = CL0UW01.CL0UWTRQ + CLNREC.CLNRTSQ;
  else
    CLXREC.CLXTESTF = "Y"; /* ; set test flag*/
  end


end // end KL0USAD

// build array key
Function KL0USAE()


  CLXREC.CLXCPROC = "CL0USAE"; /* set current proc name*/


  if (CL0UW01.CL0UWF2F == "N") /* ; CLNREC not at end-of-file*/
    CL0UW02.XUMCD[CLXARAYX] = CLNREC.XUMCD;
  end


  if (CL0UW01.CL0UWF1F == "N" /* ; CLKREC not at end-of-file*/
   && CL0UW01.CL0UWF2F == "N") /* ; CLNREC not at end-of-file*/
     /* then compare keys*/
    if (CLKREC.SY1STNBR <= CLNREC.SY1STNBR
     && CLKREC.SY2CLRID <= CLNREC.SY2CLRID
     && CLKREC.XDMCD <= CLNREC.XDMCD)
        /* build key using clkrec*/
      CL0UW02.SY1STNBR[CLXARAYX] = CLKREC.SY1STNBR;
      CL0UW02.SY2CLRID[CLXARAYX] = CLKREC.SY2CLRID;
      CL0UW02.XDMCD[CLXARAYX] = CLKREC.XDMCD;
    else
        /* build key using clnrec*/
      CL0UW02.SY1STNBR[CLXARAYX] = CLNREC.SY1STNBR;
      CL0UW02.SY2CLRID[CLXARAYX] = CLNREC.SY2CLRID;
      CL0UW02.XDMCD[CLXARAYX] = CLNREC.XDMCD;
    end
  else
    if (CL0UW01.CL0UWF1F == "N" /* ; CLKREC not at end-of-file*/
     && CL0UW01.CL0UWF2F == "Y") /* ; CLNREC at end-of-file*/
        /* build key using clkrec*/
      CL0UW02.SY1STNBR[CLXARAYX] = CLKREC.SY1STNBR;
      CL0UW02.SY2CLRID[CLXARAYX] = CLKREC.SY2CLRID;
      CL0UW02.XDMCD[CLXARAYX] = CLKREC.XDMCD;
    else
      if (CL0UW01.CL0UWF2F == "N" /* ; CLNREC not at end-of-file*/
       && CL0UW01.CL0UWF1F == "Y") /* CLKREC at end-of-file*/
          /* build key using clnrec*/
        CL0UW02.SY1STNBR[CLXARAYX] = CLNREC.SY1STNBR;
        CL0UW02.SY2CLRID[CLXARAYX] = CLNREC.SY2CLRID;
        CL0UW02.XDMCD[CLXARAYX] = CLNREC.XDMCD;


      else
        CLXREC.CLXARAYX = 210; /* set array index*/
        return;
      end
    end
  end


   /* retrieve style name*/

  set SY1REC empty;
  SY1REC.XGPCD = CLAREC.XGPCD;
  SY1REC.SY1STNBR = CL0UW02.SY1STNBR[CLXARAYX];

  KL0U824(); /* ; inquire on the style table*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW02.SY1SSTNM[CLXARAYX] = SY1REC.SY1SSTNM;
    CL0UW02.SY4SZSCL[CLXARAYX] = SY1REC.SY4SZSCL;
    if (CL0UW02.XUMCD[CLXARAYX] == " ") /* if no uom yet*/
      CL0UW02.XUMCD[CLXARAYX] = SY1REC.XUMCD;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      CL0UW02.SY1SSTNM[CLXARAYX] = " ";
      CL0UW02.SY4SZSCL[CLXARAYX] = " ";
      CL0UW02.XUMCD[CLXARAYX] = " ";
    end
  end



  CL0UW01.CL0UWLPX = CLXREC.CLXARAYX;


end // end KL0USAE

// accum auth rtn qty
Function KL0USAJ()


  CLXREC.CLXCPROC = "CL0USAJ"; /* set current proc name*/

  if (CL0UW01.CL0UWF1F == "Y") /* ; CLKREC is at end-of-file*/
    return; /* ; exit process*/
  end

  CL0UW01.CL0UWAQT = 0; /* ; re-set auth rtn qty*/
  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
  while (CLXREC.CLXTESTF == "N") /* ; test flag = n*/
    CL0UW01.SY1STNBR = CLKREC.SY1STNBR;
    CL0UW01.SY2CLRID = CLKREC.SY2CLRID;
    CL0UW01.XDMCD = CLKREC.XDMCD;
    if (CL0UW01.CL0UWBKE > CL0UW02.CL0UWKEY[CLXARAYX])
      CLXREC.CLXTESTF = "Y";
    else
      CL0UW01.CL0UWAQT = CL0UW01.CL0UWAQT + CLKREC.CLKAUTHQ;
      CL0UW01.CL0UWTAQ = CL0UW01.CL0UWTAQ + CLKREC.CLKAUTHQ;
      CL0UW01.CLKCLPRC = CLKREC.CLKCLPRC;
      KL0U832(); /* ; fetch next auth rtn rec*/
      if (SQLCA.VAGen_SQLCODE != +0) /* ; unsuccessful fetch*/
        if (SQLCA.VAGen_SQLCODE == +100) /* ; at end of file*/
          CL0UW01.CL0UWF1F = "Y"; /* set file 1 end-of-file flag*/
          CLXREC.CLXTESTF = "Y"; /* set test flag*/
        end
      end
    end
  end

  CL0UW02.CL0UWAQT[CLXARAYX] = CL0UW01.CL0UWAQT;


end // end KL0USAJ

// accum act rtn qty
Function KL0USAK()


  CLXREC.CLXCPROC = "CL0USAK"; /* set current proc name*/

  if (CL0UW01.CL0UWF2F == "Y") /* ; CLNREC is at end-of-file*/
    return; /* ; exit process*/
  end

  CL0UW01.CL0UWTVL = 0; /* ; re-set style claim value*/
  CL0UW01.CL0UWRQT = 0; /* ; re-set auth rtn qty*/
  CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
  while (CLXREC.CLXTESTF == "N") /* ; test flag = n*/
    CL0UW01.SY1STNBR = CLNREC.SY1STNBR;
    CL0UW01.SY2CLRID = CLNREC.SY2CLRID;
    CL0UW01.XDMCD = CLNREC.XDMCD;
    if (CL0UW01.CL0UWBKE > CL0UW02.CL0UWKEY[CLXARAYX])
      CLXREC.CLXTESTF = "Y";
    else
      CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CLNREC.CLNRTSQ;
      CL0UW01.CL0UWTRQ = CL0UW01.CL0UWTRQ + CLNREC.CLNRTSQ;
      CL0UW01.CL0UWVAL = CLNREC.CLNRTSQ * CLNREC.CLNGRPRC * -1;
      CL0UW01.CL0UWTVL = CL0UW01.CL0UWTVL + CL0UW01.CL0UWVAL;
      KL0USAL(); /* ; build price field*/
      KL0U812(); /* ; fetch next act rtn rec*/
      if (SQLCA.VAGen_SQLCODE == +100) /* ; at end of file*/
        CL0UW01.CL0UWF2F = "Y"; /* set file 2 end-of-file flag*/
        CLXREC.CLXTESTF = "Y"; /* set test flag*/
      end
    end
  end

  if (CL0UW02.CL0UWPRC[CLXARAYX] == 0 /* array price = 0*/
   && CL0UW02.CL0UWVPF[CLXARAYX] == " ") /* varied price flag = 0*/
    CL0UW02.CL0UWPRC[CLXARAYX] = CL0UW01.CLKCLPRC;
  end

  CL0UW02.CL0UWRQT[CLXARAYX] = CL0UW01.CL0UWRQT;
  CL0UW02.CL0UWVAL[CLXARAYX] = CL0UW01.CL0UWTVL;


end // end KL0USAK

// build price field
Function KL0USAL()


  CLXREC.CLXCPROC = "CL0USAL"; /* set current proc name*/

  if (CL0UW02.CL0UWPRC[CLXARAYX] == 0
   && CL0UW02.CL0UWVPF[CLXARAYX] == " ")
    CL0UW02.CL0UWPRC[CLXARAYX] = CLNREC.CLNGRPRC;
  else
    if (CL0UW02.CL0UWPRC[CLXARAYX] != CLNREC.CLNGRPRC)
      if (CLNREC.CLNGRPRC > 0)
        CL0UW02.CL0UWPRC[CLXARAYX] = 0;
        CL0UW02.CL0UWVPF[CLXARAYX] = "V";
      end
    end
  end

  if (CL0UW02.CL0UWPRC[CLXARAYX] == 0
   && CL0UW02.CL0UWVPF[CLXARAYX] == " ")
    CL0UW02.CL0UWPRC[CLXARAYX] = CL0UW01.CLKCLPRC;
  end


end // end KL0USAL

// set data update flags
Function KL0USAM()


  CLXREC.CLXCPROC = "CL0USAM"; /* set current proc name*/

   /* IF COMMAREA.CAALVL(7) = 'Y'     ; adds are allowed*/
    /* MOVE 'Y' TO CL0UW01.CL0UWAAF  ; set allow data add flag*/
   /* ELSE ;*/
    /* MOVE 'N' TO CL0UW01.CL0UWAAF ; reset allow data add flag*/
   /* END ;*/

   /* IF COMMAREA.CACLVL(7) = 'Y'    ; changes are allowed*/
    /* MOVE 'Y' TO CL0UW01.CL0UWACF ; set allow data changes flag*/
   /* ELSE ;*/
    /* MOVE 'N' TO CL0UW01.CL0UWACF ; reset allow data chang flag*/
   /* END ;*/

   /* iF COMMAREA.CADLVL(7) = 'Y'    ; deletes are allowed*/
    /* MOVE 'Y' TO CL0UW01.CL0UWADF ; set allow data delete flag*/
   /* ELSE ;*/
    /* MOVE 'N' TO CL0UW01.CL0UWADF ; reset allow data chang flag*/
   /* END ;*/

  CL0UW01.CL0UWAAF = "Y"; /* set allow data add flag*/
  CL0UW01.CL0UWACF = "Y"; /* set allow data changes flag*/
  CL0UW01.CL0UWADF = "Y"; /* set allow data delete flag*/

  if (CL0UW01.CL0UWAAF == "Y" /* data adds are allowed*/
   || CL0UW01.CL0UWACF == "Y" /* data changes are allowed*/
   || CL0UW01.CL0UWADF == "Y") /* data deletes are allowed*/
    CL0UW01.CL0UWUDF = "Y"; /* set update data flag*/
  else
    CL0UW01.CL0UWUDF = "N"; /* re-set update data flag*/
  end


end // end KL0USAM

// move array fields to map
Function KL0USB0()


  CLXREC.CLXCPROC = "CL0USB0"; /* set current proc name*/

  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;

  if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX)
    KL0UM001.CL0UMSEL[CLXLINEX] = " ";
    KL0UM001.SY1STNBR[CLXLINEX] = " ";
    KL0UM001.SY2CLRID[CLXLINEX] = " ";
    KL0UM001.XDMCD[CLXLINEX] = " ";
    KL0UM001.SY1SSTNM[CLXLINEX] = " ";
    KL0UM001.CL0UMVPF[CLXLINEX] = " ";
    KL0UM001.CL0UMVAL[CLXLINEX] = +0;
    KL0UM001.CL0UMPRC[CLXLINEX] = +0;
    KL0UM001.CL0UMAQT[CLXLINEX] = +0;
    KL0UM001.CL0UMRQT[CLXLINEX] = +0;
    set KL0UM001.CL0UMSEL[CLXLINEX] skip, invisible;
    set KL0UM001.SY1STNBR[CLXLINEX] skip, invisible;
    set KL0UM001.SY2CLRID[CLXLINEX] skip, invisible;
    set KL0UM001.XDMCD[CLXLINEX] skip, invisible;
    set KL0UM001.SY1SSTNM[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMVAL[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMPRC[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMVPF[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMAQT[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMRQT[CLXLINEX] skip, invisible;
  else
    KL0UM001.CL0UMSEL[CLXLINEX] = CL0UW02.CL0UMSEL[CLXARAYX];
    KL0UM001.SY1STNBR[CLXLINEX] = CL0UW02.SY1STNBR[CLXARAYX];
    KL0UM001.SY2CLRID[CLXLINEX] = CL0UW02.SY2CLRID[CLXARAYX];
    KL0UM001.XDMCD[CLXLINEX] = CL0UW02.XDMCD[CLXARAYX];
    KL0UM001.SY1SSTNM[CLXLINEX] = CL0UW02.SY1SSTNM[CLXARAYX];
    KL0UM001.CL0UMVAL[CLXLINEX] = CL0UW02.CL0UWVAL[CLXARAYX];
    KL0UM001.CL0UMPRC[CLXLINEX] = CL0UW02.CL0UWPRC[CLXARAYX];
    KL0UM001.CL0UMVPF[CLXLINEX] = CL0UW02.CL0UWVPF[CLXARAYX];
    KL0UM001.CL0UMAQT[CLXLINEX] = CL0UW02.CL0UWAQT[CLXARAYX];
    KL0UM001.CL0UMRQT[CLXLINEX] = CL0UW02.CL0UWRQT[CLXARAYX];
    if (KL0UM001.SY1STNBR[CLXLINEX] == " "
     && KL0UM001.SY2CLRID[CLXLINEX] == " "
     && KL0UM001.XDMCD[CLXLINEX] == " ")
      set KL0UM001.CL0UMSEL[CLXLINEX] skip, invisible;
      set KL0UM001.SY1STNBR[CLXLINEX] skip, invisible;
      set KL0UM001.SY2CLRID[CLXLINEX] skip, invisible;
      set KL0UM001.XDMCD[CLXLINEX] skip, invisible;
      set KL0UM001.SY1SSTNM[CLXLINEX] skip, invisible;
      set KL0UM001.CL0UMVAL[CLXLINEX] skip, invisible;
      set KL0UM001.CL0UMPRC[CLXLINEX] skip, invisible;
      set KL0UM001.CL0UMVPF[CLXLINEX] skip, invisible;
      set KL0UM001.CL0UMAQT[CLXLINEX] skip, invisible;
      set KL0UM001.CL0UMRQT[CLXLINEX] skip, invisible;
    else
      set KL0UM001.CL0UMSEL[CLXLINEX] cursor, normal;
      set KL0UM001.SY1STNBR[CLXLINEX] initialAttributes;
      set KL0UM001.SY2CLRID[CLXLINEX] initialAttributes;
      set KL0UM001.XDMCD[CLXLINEX] initialAttributes;
      set KL0UM001.SY1SSTNM[CLXLINEX] initialAttributes;
      set KL0UM001.CL0UMVAL[CLXLINEX] initialAttributes;
      set KL0UM001.CL0UMPRC[CLXLINEX] initialAttributes;
      set KL0UM001.CL0UMVPF[CLXLINEX] initialAttributes;
      set KL0UM001.CL0UMAQT[CLXLINEX] initialAttributes;
      set KL0UM001.CL0UMRQT[CLXLINEX] initialAttributes;
    end
  end


end // end KL0USB0

// mark all prods in array
Function KL0USB1()


  CLXREC.CLXCPROC = "CL0USB1"; /* set current proc name*/

  CLXREC.CLXARAYX = 1; /* ; re-set array index*/
  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX)
    CL0UW02.CL0UMSEL[CLXARAYX] = "S";
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end


end // end KL0USB1

// mark all prods in map
Function KL0USB2()


  CLXREC.CLXCPROC = "CL0USB2"; /* set current proc name*/

  CLXREC.CLXLINEX = 1; /* ; re-set map index*/
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    KL0UM001.CL0UMSEL[CLXLINEX] = "S";
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end


end // end KL0USB2

// validate select option
Function KL0USB3()


  CLXREC.CLXCPROC = "CL0USB3"; /* set current proc name*/

  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;

  if (KL0UM001.CL0UMSEL[CLXLINEX] is modified)
    if (KL0UM001.CL0UMSEL[CLXLINEX] == " "
     || KL0UM001.CL0UMSEL[CLXLINEX] == "S")
      set KL0UM001.CL0UMSEL[CLXLINEX] normal;
      CL0UW02.CL0UMSEL[CLXARAYX] = KL0UM001.CL0UMSEL[CLXLINEX];
    else
      if (KL0UM001.CL0UMSEL[CLXLINEX] == "X")
        KL0USB4(); /* ; validate delete option*/
      else
        set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
        CL0UW02.CL0UMSEL[CLXARAYX] = " ";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(8);
      end
    end
  end


end // end KL0USB3

// validate delete option
Function KL0USB4()


  CLXREC.CLXCPROC = "CL0USB4"; /* set current proc name*/

  if (CLWREC.CLWACTIV == "I") /* ; user is in inquiry option*/
    set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
    CL0UW02.CL0UMSEL[CLXARAYX] = " ";
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(368);
  else
    if (CL0UW01.CL0UWADF == "Y") /* ;data deletes are allowed*/
      set KL0UM001.CL0UMSEL[CLXLINEX] normal;
      CL0UW02.CL0UMSEL[CLXARAYX] = "X";
    else
      set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      CL0UW02.CL0UMSEL[CLXARAYX] = " ";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(16);
    end
  end


end // end KL0USB4

// validate inspection date
Function KL0USB5()


  CLXREC.CLXCPROC = "CL0USB5"; /* set current process name*/

  CLXREC.XXXEDFLD = KL0UM001.CL0UMIDT;

  XPCL004();

  if (CLXREC.CLXVALDT == "Y")
    set KL0UM001.CL0UMIDT normal;
    CL0UW01.CLLIDT = TA2REC.TA2GRGGN;
    /* MOVE TA2REC.TA2GRGGN TO CLXREC.XXXWDTE;*/
    CLXREC.XXXFLYY = CLXREC.XXXWYY;
    CLXREC.XXXFLMM = CLXREC.XXXWMM;
    CLXREC.XXXFLDD = CLXREC.XXXWDD;
    CLXREC.XXXSEP5 = "-";
    CLXREC.XXXSEP6 = "-";
    /* --------------------- y2k out begin --------------------*/
    /* IF CLXREC.XXXWYMD LE CL0UW01.CL0UWYMD;*/
    /* --------------------- y2k out end   --------------------*/

    /* --------------------- y2k in begin  --------------------*/
    if (CLXREC.XXXWCYMD <= CL0UW01.CL0UWYMD)
    /* --------------------- y2k in end    --------------------*/
      KL0UM001.CL0UMIDT = CLXREC.XXXFLDT;
      KL0UM005.CL0UMIDT = CLXREC.XXXFLDT;
    else
      set KL0UM001.CL0UMIDT cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(17);
    end
  else
    set KL0UM001.CL0UMIDT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(17);
  end


end // end KL0USB5

// inquire on rts auth rtn rec
Function KL0USB7()


  CLXREC.CLXCPROC = "CL0USB7"; /* set current proc name*/

  set CLKREC empty;
  CLKREC.CLACLMNB = KL0UM001.CLACLMNB;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.XGPCD = KL0UM001.XGPCD;
  CLKREC.SY1STNBR = KL0UM001.SY1STNBR[CLXLINEX];
  CLKREC.SY2CLRID = KL0UM001.SY2CLRID[CLXLINEX];
  CLKREC.XDMCD = KL0UM001.XDMCD[CLXLINEX];
  CLKREC.XQACD = "01";
  CLKREC.XUMCD = "01";
  CLKREC.CLKCRFL = " "; /* 072089 dflt value = ' '*/
  CLKREC.SY5SZID = 0;
  CLKREC.CLJRDIND = "R";

  KL0U834(); /* ; inquire on auth rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    KL0UM001.CL0UMAQT[CLXLINEX] = CLKREC.CLKAUTHQ;
    KL0USB8(); /* ; update auth rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      KL0UM001.CL0UMAQT[CLXLINEX] = 0;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USB7

// update rts auth rtn rec
Function KL0USB8()


  CLXREC.CLXCPROC = "CL0USB8"; /* set current proc name*/

  KL0U837(); /* ; update auth rtn req*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USB9(); /* ; delete auth rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USB8

// delete rts auth rtn rec
Function KL0USB9()


  CLXREC.CLXCPROC = "CL0USB9"; /* set current proc name*/

  KL0U835(); /* ; delete auth rtn req*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful delete*/
    KL0UM001.CL0UMAQT[CLXLINEX] = 0;
  end


end // end KL0USB9

// delete act rtn recs
Function KL0USBA()


  CLXREC.CLXCPROC = "CL0USBA"; /* set current proc name*/

  KL0USBB(); /* ; initialize size array*/
  KL0USBC(); /* ; move act rtn recs to array*/

  CLXREC.CLXARAYX = 1; /* ; re-set array index*/
  while (CLXREC.CLXARAYX <= CL0UW01.CL0UWSAX)
    KL0USBE(); /* ; delete act rtn recs*/
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

  KL0USBG(); /* ; update map price/qty*/


end // end KL0USBA

// initialize size array
Function KL0USBB()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USBB"; /* set current proc name*/

  CLXREC.CLXARAYX = 1; /* ; re-set array index*/
  while (CLXREC.CLXARAYX <= 40)
    CL0UW01.SY5SZID[CLXARAYX] = 0;
    CL0UW01.CLNRTSQ[CLXARAYX] = 0; /* 2-15-91*/
    CL0UW01.CLNGRPRC[CLXARAYX] = 0;
    CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end


end // end KL0USBB

// select all act rtn recs
Function KL0USBC()


  CLXREC.CLXCPROC = "CL0USBC"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = KL0UM001.CLACLMNB;
  CLNREC.CLHSEQNB = KL0UM001.CLHSEQNB;
  CLNREC.XGPCD = KL0UM001.XGPCD;
  CLNREC.SY1STNBR = KL0UM001.SY1STNBR[CLXLINEX];
  CLNREC.SY2CLRID = KL0UM001.SY2CLRID[CLXLINEX];
  CLNREC.XDMCD = KL0UM001.XDMCD[CLXLINEX];
  CLNREC.XQACD = "**";
  CLNREC.XUMCD = "**";
  CLNREC.SY5SZID = -1;

  KL0U811(); /* select set from clnrec*/
  if (CLXREC.CLXERRF == "Y")
    KL0U813(); /* close cursor for clnrec*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CL0UWSAX = 0; /* ; re-set size array index*/
    CL0UW01.CL0UWRQT = 0; /* ; re-set act rtn qty*/
    CLXREC.CLXEOFF = "N"; /* ; re-set end-of-file flag*/
    while (CLXREC.CLXEOFF == "N") /* ; end-of-file flag = 'N'*/
      KL0USBD(); /* ; fetch each act rtn rec*/
    end
    KL0UM001.CL0UMRQT[CLXLINEX] = CL0UW01.CL0UWRQT;
  end

  KL0U813(); /* close cursor for clnrec*/

end // end KL0USBC

// select next act rtn rec
Function KL0USBD()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USBD"; /* set current proc name*/

  KL0U812(); /* ; fetch next rtn act rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CLNREC.CLNRTSQ;
    CL0UW01.CL0UWSAX = CL0UW01.CL0UWSAX + 1;
    CL0UW01.SY5SZID[CL0UWSAX] = CLNREC.SY5SZID;
    CL0UW01.CLNRTSQ[CL0UWSAX] = CLNREC.CLNRTSQ;
    CL0UW01.CLNGRPRC[CL0UWSAX] = CLNREC.CLNGRPRC;
    CL0UW01.ZZZCHGCT[CL0UWSAX] = CLNREC.ZZZCHGCT;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; end of recs*/
      CLXREC.CLXEOFF = "Y"; /* ; set end-of-file flag*/
    end
  end


end // end KL0USBD

// update size act rtn recs
Function KL0USBE()


  CLXREC.CLXCPROC = "CL0USBE"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = KL0UM001.CLACLMNB;
  CLNREC.CLHSEQNB = KL0UM001.CLHSEQNB;
  CLNREC.XGPCD = KL0UM001.XGPCD;
  CLNREC.SY1STNBR = KL0UM001.SY1STNBR[CLXLINEX];
  CLNREC.SY2CLRID = KL0UM001.SY2CLRID[CLXLINEX];
  CLNREC.XDMCD = KL0UM001.XDMCD[CLXLINEX];
  CLNREC.XUMCD = "**";
  CLNREC.XQACD = "**";
  CLNREC.SY5SZID = CL0UW01.SY5SZID[CLXARAYX];
  CLNREC.ZZZCHGCT = CL0UW01.ZZZCHGCT[CLXARAYX];

  KL0U817(); /* ; update act rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USBF(); /* ; delete act rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM001.CL0UMSEL[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USBE

// delete size act rtn recs
Function KL0USBF()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USBF"; /* set current proc name*/

  KL0U815(); /* ; delete act rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful delete*/
    CL0UW01.CLNRTSQ[CLXARAYX] = 0;
    CL0UW01.CLNGRPRC[CLXARAYX] = 0;
    CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
  end


end // end KL0USBF

// update map price/rtn qty
Function KL0USBG()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USBG"; /* set current proc name*/

  CL0UW01.CL0UWVPF = " ";
  CL0UW01.CL0UWPRC = 0;
  CL0UW01.CL0UWQTY = 0;

  CLXREC.CLXARAYX = 1;
  while (CLXREC.CLXARAYX <= CL0UW01.CL0UWSAX)
    KL0USBH(); /* ; determine map price*/
    CL0UW01.CL0UWQTY = CL0UW01.CL0UWQTY + CL0UW01.CLNRTSQ[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end

  KL0UM001.CL0UMRQT[CLXLINEX] = CL0UW01.CL0UWQTY;
  KL0UM001.CL0UMPRC[CLXLINEX] = CL0UW01.CL0UWPRC;
  KL0UM001.CL0UMVPF[CLXLINEX] = CL0UW01.CL0UWVPF;


end // end KL0USBG

// determine map price
Function KL0USBH()


  CLXREC.CLXCPROC = "CL0USBH"; /* set current proc name*/

  if (CL0UW01.CL0UWPRC == 0 /* ; price = 0*/
   && CL0UW01.CL0UWVPF == " ") /* ; price flag = ' '*/
    CL0UW01.CL0UWPRC = CL0UW01.CLNGRPRC[CLXARAYX];
  else
    if (CL0UW01.CL0UWPRC != CL0UW01.CLNGRPRC[CLXARAYX])
      if (CL0UW01.CLNGRPRC[CLXARAYX] != 0)
        CL0UW01.CL0UWPRC = 0;
        CL0UW01.CL0UWVPF = "V";
      end
    end
  end


end // end KL0USBH

// update prod summ array
Function KL0USBI()


  CLXREC.CLXCPROC = "CL0USBI"; /* set current proc name*/

  if (KL0UM001.CL0UMAQT[CLXLINEX] == 0 /* no auth rtn qty*/
   && KL0UM001.CL0UMRQT[CLXLINEX] == 0) /* no act rtn qty*/
    KL0UM001.CL0UMSEL[CLXLINEX] = " ";
    KL0UM001.SY1STNBR[CLXLINEX] = " ";
    KL0UM001.SY2CLRID[CLXLINEX] = " ";
    KL0UM001.XDMCD[CLXLINEX] = " ";
    KL0UM001.SY1SSTNM[CLXLINEX] = " ";
    KL0UM001.CL0UMVPF[CLXLINEX] = " ";
    KL0UM001.CL0UMVAL[CLXLINEX] = 0;
    KL0UM001.CL0UMPRC[CLXLINEX] = 0;
    set KL0UM001.CL0UMSEL[CLXLINEX] skip, invisible;
    set KL0UM001.SY1STNBR[CLXLINEX] skip, invisible;
    set KL0UM001.SY2CLRID[CLXLINEX] skip, invisible;
    set KL0UM001.XDMCD[CLXLINEX] skip, invisible;
    set KL0UM001.SY1SSTNM[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMVAL[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMPRC[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMVPF[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMAQT[CLXLINEX] skip, invisible;
    set KL0UM001.CL0UMRQT[CLXLINEX] skip, invisible;
  end

  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;

  CL0UW02.CL0UMSEL[CLXARAYX] = KL0UM001.CL0UMSEL[CLXLINEX];
  CL0UW02.SY1STNBR[CLXARAYX] = KL0UM001.SY1STNBR[CLXLINEX];
  CL0UW02.SY2CLRID[CLXARAYX] = KL0UM001.SY2CLRID[CLXLINEX];
  CL0UW02.XDMCD[CLXARAYX] = KL0UM001.XDMCD[CLXLINEX];
  CL0UW02.SY1SSTNM[CLXARAYX] = KL0UM001.SY1SSTNM[CLXLINEX];
  CL0UW02.CL0UWVAL[CLXARAYX] = KL0UM001.CL0UMVAL[CLXLINEX];
  CL0UW02.CL0UWVPF[CLXARAYX] = KL0UM001.CL0UMVPF[CLXLINEX];
  CL0UW02.CL0UWPRC[CLXARAYX] = KL0UM001.CL0UMPRC[CLXLINEX];
  CL0UW02.CL0UWAQT[CLXARAYX] = KL0UM001.CL0UMAQT[CLXLINEX];
  CL0UW02.CL0UWRQT[CLXARAYX] = KL0UM001.CL0UMRQT[CLXLINEX];


end // end KL0USBI

// update actual rtn table
Function KL0USBJ()

   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USBJ"; /* set current proc name*/

  if (CL2REC.CL2ISBDT == CL0UW01.CLLIDT
   && CL2REC.XXXUSRID == CL0UW01.XXXUSRID) /* 2-15-91*/
    return;
  end

  KL0U854(); /* ; inquire on cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USBK(); /* ; replace cllrec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM001.CL0UMIDT cursor, modified, bold;
      set KL0UM001.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; data base is busy*/
        set KL0UM001.CL0UMIDT cursor, modified, bold;
        set KL0UM001.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0USBJ

// replace actual rtn table
Function KL0USBK()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USBK"; /* set current proc name*/

  KL0US02(); /* ; get todays' date*/

  CL2REC.CL2ISBDT = CL0UW01.CLLIDT;
  CL2REC.XXXUSRID = CL0UW01.XXXUSRID; /* 2-15-91*/
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U857(); /* ; replace cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    return; /* ; exit process*/
  end


end // end KL0USBK

// add actual rtn table
Function KL0USBL()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USBL"; /* set current proc name*/

  KL0US02(); /* ; get todays' date*/

  CL2REC.CL2ISBDT = CL0UW01.CLLIDT;
  CL2REC.XXXUSRID = CL0UW01.XXXUSRID; /* 2-15-91*/
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U856(); /* ; add cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    return; /* ; exit process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not unique*/
      set KL0UM001.CL0UMIDT cursor, modified, bold;
      set KL0UM001.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (sysVar.sqlData.sqlcode == -911) /* ; data base is busy*/
        set KL0UM001.CL0UMIDT cursor, modified, bold;
        set KL0UM001.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0USBL

// initialize size arrays
Function KL0USC0()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USC0"; /* set current proc name*/

  CLXREC.CLXARAYX = 1; /* ; re-set array index*/
  while (CLXREC.CLXARAYX <= 40)
    CL0UW01.SY4IDDSC[CLXARAYX] = " ";
    CL0UW01.SY5SZID[CLXARAYX] = 0;
    CL0UW01.CLNRTSQ[CLXARAYX] = 0;
    CL0UW01.CLNGRPRC[CLXARAYX] = 0;
    CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
    CL0UW02.SY4IDDSC[CLXARAYX] = " ";
    CL0UW02.SY5SZID[CLXARAYX] = 0;
    CL0UW02.CLNRTSQ[CLXARAYX] = 0;
    CL0UW02.CLNGRPRC[CLXARAYX] = 0;
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end


end // end KL0USC0

// build screen from prod array
Function KL0USC1()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USC1"; /* set current process name*/

  KL0UM005.SY1STNBR = CL0UW02.SY1STNBR[CL0UWPAX];
  KL0UM005.SY2CLRID = CL0UW02.SY2CLRID[CL0UWPAX];
  KL0UM005.XDMCD = CL0UW02.XDMCD[CL0UWPAX];

  KL0UM005.XUMCD = CL0UW02.XUMCD[CL0UWPAX];
  if (CL0UW02.XUMCD[CL0UWPAX] in XUMTBL.XUMCD)
    KL0UM005.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end

  KL0UM005.CL0UMDSZ = " ";
  KL0UM005.CL0UMSZL = " ";
  KL0UM005.CL0UMSZH = " ";

  KL0UM005.CL0UMPRC = CL0UW02.CL0UWPRC[CL0UWPAX];
  KL0UM005.CL0UMTAQ = CL0UW02.CL0UWAQT[CL0UWPAX];
  KL0UM005.CL0UMTRQ = CL0UW02.CL0UWRQT[CL0UWPAX];

  if (CL0UW01.CL0UWUDF == "N") /* ; no updates allowed*/
    set KL0UM005.CLJNCRFL initialAttributes;
    set KL0UM005.XWHCD initialAttributes;
    set KL0UM005.XXXUSRID initialAttributes; /* 2-15-91*/
    set KL0UM005.CL0UMIDT initialAttributes;
    set KL0UM005.SY1STNBR initialAttributes;
    set KL0UM005.SY2CLRID initialAttributes;
    set KL0UM005.XDMCD initialAttributes;
    set KL0UM005.XUMCD initialAttributes;
    set KL0UM005.CATOAP cursor, normal;
    set KL0UM005.CAITEM normal;
  else
    set KL0UM005.CATOAP cursor, normal;
    set KL0UM005.CAITEM normal;
    set KL0UM005.XUMCD normal;
    set KL0UM005.XDMCD initialAttributes;
    set KL0UM005.SY2CLRID initialAttributes;
    set KL0UM005.SY1STNBR initialAttributes;
    set KL0UM005.XDMCD initialAttributes;
    if (KL0UM005.CLJNCRFL == " ") /* ; no non cred rtn flag*/
      set KL0UM005.CLJNCRFL cursor, normal;
      set KL0UM005.XWHCD normal;
      set KL0UM005.XXXUSRID normal; /* 2-15-91*/
      set KL0UM005.CL0UMIDT normal;
    else
      set KL0UM005.CLJNCRFL normal;
      if (KL0UM005.XWHCD == " " /* ; no warehouse code*/
       && KL0UM005.XWHSABRV == " ") /* no warehouse abrev*/
        set KL0UM005.XWHCD cursor, normal;
        set KL0UM005.XXXUSRID normal; /* 2-15-91*/
        set KL0UM005.CL0UMIDT normal;
      else
        set KL0UM005.XWHCD normal;
        if (KL0UM005.XXXUSRID == " ") /* no insp by ; 2-15-91*/
          set KL0UM005.XXXUSRID cursor, normal; /* "*/
          set KL0UM005.CL0UMIDT normal;
        else
          set KL0UM005.XXXUSRID normal; /* 2-15-91*/
          if (KL0UM005.CL0UMIDT == " ") /* ; no insp date*/
            set KL0UM005.CL0UMIDT cursor, normal;
          else
            set KL0UM005.CL0UMIDT normal;
          end
        end
      end
    end
  end


end // end KL0USC1

// build valid size arrays
Function KL0USC2()


  CLXREC.CLXCPROC = "CL0USC2"; /* set current process name*/

  set SY3REC empty; /* ; clear prod size rec*/
  SY3REC.XGPCD = CL0UW01.XGPCD;
  SY3REC.SY1STNBR = CL0UW01.SY1STNBR;
  SY3REC.SY2CLRID = CL0UW01.SY2CLRID;
  SY3REC.XDMCD = CL0UW01.XDMCD;

  KL0U884(); /* ; inquire on prod size rec*/

  set SY4REC empty;
  SY4REC.SY4SZSCL = CL0UW01.SY4SZSCL;

  KL0U894(); /* ; inquire on size scale rec*/

  CLXREC.CLXCURLN = 1;
  CLXREC.CLXLSTAX = 1;
  CLXREC.CLXARAYX = 0;
  while (CLXREC.CLXARAYX < 40)
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    if (SY3REC.SY3FRGUT[CLXARAYX] == "F"
     || SY3REC.SY3FRGUT[CLXARAYX] == "G"
     || SY3REC.SY3FRGUT[CLXARAYX] == "X")
      CL0UW01.SY4IDDSC[CLXCURLN] = SY4REC.SY4IDDSC[CLXARAYX];
      CL0UW01.SY5SZID[CLXCURLN] = CLXREC.CLXARAYX;
      CL0UW02.SY4IDDSC[CLXCURLN] = SY4REC.SY4IDDSC[CLXARAYX];
      CL0UW02.SY5SZID[CLXCURLN] = CLXREC.CLXARAYX;
      CLXREC.CLXLSTAX = CLXREC.CLXCURLN;
      CLXREC.CLXCURLN = CLXREC.CLXCURLN + 1;
    end
  end

  if (CL0UW01.SY4IDDSC[1] == " "
   && CL0UW01.SY4IDDSC[CLXLSTAX] == " ")
    KL0UM005.CL0UMSZL = " ";
    KL0UM005.CL0UMSZH = " ";
    set KL0UM005.SY1STNBR cursor, modified, bold;
    set KL0UM005.SY2CLRID modified, bold;
    converseLib.validationFailed(338);
    CLXREC.CLXERRF = "Y";
  else
    KL0UM005.CL0UMSZL = CL0UW01.SY4IDDSC[1];
    KL0UM005.CL0UMSZH = CL0UW01.SY4IDDSC[CLXLSTAX];
  end


end // end KL0USC2

// retrieve rtn auth recs
Function KL0USC3()


  CLXREC.CLXCPROC = "CL0USC3"; /* set current proc name*/
  CL0UW01.CL0UWAQT = 0; /* ; re-set auth rtn qty*/

  set CLKREC empty;
  CLKREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = KL0UM005.SY1STNBR;
  CLKREC.SY2CLRID = KL0UM005.SY2CLRID;
  CLKREC.XDMCD = KL0UM005.XDMCD;
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  CLKREC.SY5SZID = -1;
  CLKREC.CLJRDIND = "R";

  KL0U831(); /* select set from clkrec*/
  if (CLXREC.CLXERRF == "Y")
    KL0U833(); /* close cursor for clkrec*/
  end

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    CL0UW01.CL0UWAQT = 0; /* ; re-set auth rtn qty*/
    CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
    while (CLXREC.CLXTESTF == "N") /* ; test flag = 'n'*/
      KL0USCB(); /* ; fetch next rtn auth rec*/
    end
    CL0UW02.CL0UWAQT[CL0UWPAX] = CL0UW01.CL0UWAQT;
    if (KL0UM005.CL0UMTAQ == 0)
      KL0UM005.CL0UMTAQ = CL0UW01.CL0UWAQT;
    end
    if (KL0UM005.CL0UMPRC == 0)
      KL0UM005.CL0UMPRC = CL0UW01.CLKCLPRC;
    end
  end

  KL0U833(); /* close cursor for clkrec*/

end // end KL0USC3

// retrieve rtn act recs
Function KL0USC4()


  CLXREC.CLXCPROC = "CL0USC4"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLNREC.CLHSEQNB = KL0UM005.CLHSEQNB;
  CLNREC.XGPCD = CL0UW01.XGPCD;
  CLNREC.SY1STNBR = CL0UW01.SY1STNBR;
  CLNREC.SY2CLRID = CL0UW01.SY2CLRID;
  CLNREC.XDMCD = CL0UW01.XDMCD;
  CLNREC.XQACD = "**";
  CLNREC.XUMCD = "**";
  CLNREC.SY5SZID = -1;

  KL0U811(); /* select set from clnrec*/
  if (CLXREC.CLXERRF == "Y")
    KL0U813(); /* close cursor for clnrec*/
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.CL0UWRQT = 0; /* ; re-set act rtn qty*/
    CLXREC.CLXTESTF = "N"; /* ; re-set test flag*/
    while (CLXREC.CLXTESTF == "N") /* ; test flag = 'N'*/
      KL0USCC(); /* ; fetch each act rtn rec*/
    end
    CL0UW02.CL0UWRQT[CL0UWPAX] = CL0UW01.CL0UWRQT;
    CL0UW01.CL0UWRQT = 0;
  end

  KL0U813(); /* close cursor for clnrec*/

end // end KL0USC4

// move qty/price to size array
Function KL0USC5()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USD6"; /* set current proc name*/

  CLXREC.CLXARAYX = 1; /* ; re-set array index*/
  while (CLXREC.CLXARAYX <= 40) /* ; not at end of array*/
    CL0UW02.CLNRTSQ[CLXARAYX] = CL0UW01.CLNRTSQ[CLXARAYX];
    CL0UW02.CLNGRPRC[CLXARAYX] = CL0UW01.CLNGRPRC[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end


end // end KL0USC5

// clear map for prod id add
Function KL0USC6()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USC6"; /* set current process name*/

  KL0UM005.SY1STNBR = " ";
  KL0UM005.SY2CLRID = " ";
  KL0UM005.XDMCD = " ";
  KL0UM005.XUMCD = " ";
  KL0UM005.XUMDESC = " ";
  KL0UM005.CL0UMDSZ = " ";
  KL0UM005.CL0UMSZL = " ";
  KL0UM005.CL0UMSZH = " ";
  KL0UM005.CL0UMPRC = 0;
  KL0UM005.CL0UMTAQ = 0;
  KL0UM005.CL0UMTRQ = 0;

  set KL0UM005.CATOAP cursor, normal;
  set KL0UM005.CAITEM normal;

  set KL0UM005.CL0UMHDA protect, invisible;
  set KL0UM005.CL0UMHDB protect, invisible;
  set KL0UM005.CL0UMHDC protect, invisible;
  set KL0UM005.CL0UMHD4 protect, invisible;
  set KL0UM005.CL0UMHD5 protect, invisible;
  set KL0UM005.CL0UMHD6 protect, invisible;
  set KL0UM005.CL0UMHD7 protect, invisible;
  set KL0UM005.CL0UMHD8 protect, invisible;
  set KL0UM005.CL0UMHD9 protect, invisible;
  set KL0UM005.CL0UMHDA protect, invisible;
  set KL0UM005.CL0UMHDB protect, invisible;
  set KL0UM005.CL0UMHDC protect, invisible;

  KL0UM005.CL0UMTRQ = 0;
  set KL0UM005.CL0UMHD3 protect, invisible;
  set KL0UM005.CL0UMTRQ protect, invisible;

  set KL0UM005.CL0UMTAQ normal; /* ; set auth qty for entry*/

  set KL0UM005.CL0UMHD2 initialAttributes; /* ; show start price hdg*/
  set KL0UM005.CL0UMPRC normal; /* ; set start price for entry*/

  set KL0UM005.CL0UMHD1 initialAttributes; /* ; show start size hdg*/
  set KL0UM005.CL0UMDSZ normal; /* ; set start size for entry*/

  set KL0UM005.XUMCD normal;
  set KL0UM005.XDMCD normal;
  set KL0UM005.SY2CLRID normal;
  set KL0UM005.SY1STNBR cursor, normal;

  if (KL0UM005.CL0UMIDT == " ") /* ; no insp date*/
    set KL0UM005.CL0UMIDT cursor, normal;
  else
    set KL0UM005.CL0UMIDT normal;
  end

  if (KL0UM005.XXXUSRID == " ") /* no insp by ; 2-15-91*/
    set KL0UM005.XXXUSRID cursor, normal; /* "*/
  else
    set KL0UM005.XXXUSRID normal; /* 2-15-91*/
  end

  if (KL0UM005.XWHCD == " "
   && KL0UM005.XWHSABRV == " ") /* ; no warehouse*/
    set KL0UM005.XWHCD cursor, normal;
  else
    set KL0UM005.XWHCD normal;
  end

  if (KL0UM005.CLJNCRFL == " ") /* ; no non cred rtn flag*/
    set KL0UM005.CLJNCRFL cursor, normal;
  else
    set KL0UM005.CLJNCRFL normal;
  end


end // end KL0USC6

// calc ttl act rtn qty
Function KL0USC7()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USC7"; /* set current process name*/

  CL0UW01.CL0UWRQT = 0;

  CLXREC.CLXARAYX = 1;
  while (CLXREC.CLXARAYX <= 40)
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CL0UW02.CLNRTSQ[CLXARAYX];
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end


end // end KL0USC7

// set size inquiry attributes
Function KL0USC8()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USC8"; /* set current process name*/

  set KL0UM005.CL0UMTAQ initialAttributes;

  set KL0UM005.CL0UMHD1 protect, invisible; /* protect/darken start size hdg*/
  set KL0UM005.CL0UMDSZ protect, invisible; /* protect/darken start size*/

  set KL0UM005.CL0UMHD2 protect, invisible;
                                   /* protect/darken start price hdg*/
  set KL0UM005.CL0UMPRC protect, invisible; /* protect/darken start price*/

  KL0UM005.CL0UMTRQ = CL0UW01.CL0UWRQT;
  set KL0UM005.CL0UMHD3 initialAttributes;
  set KL0UM005.CL0UMTRQ initialAttributes;

  set KL0UM005.CL0UMHD4 initialAttributes;
  set KL0UM005.CL0UMHD5 initialAttributes;
  set KL0UM005.CL0UMHD6 initialAttributes;
  set KL0UM005.CL0UMHD7 initialAttributes;
  set KL0UM005.CL0UMHD8 initialAttributes;
  set KL0UM005.CL0UMHD9 initialAttributes;
  set KL0UM005.CL0UMHDA initialAttributes;
  set KL0UM005.CL0UMHDB initialAttributes;
  set KL0UM005.CL0UMHDC initialAttributes;

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0) /* ; until end of map size lines*/
    if (KL0UM005.SY4IDDSC[CLXLINEX] == " ") /* no size*/
      set KL0UM005.SY4IDDSC[CLXLINEX] protect, invisible;
      set KL0UM005.CLNRTSQ[CLXLINEX] protect, invisible;
      set KL0UM005.CLNGRPRC[CLXLINEX] protect, invisible;
    else
      set KL0UM005.SY4IDDSC[CLXLINEX] initialAttributes;
      set KL0UM005.CLNRTSQ[CLXLINEX] initialAttributes;
      set KL0UM005.CLNGRPRC[CLXLINEX] initialAttributes;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end


end // end KL0USC8

// set size change attributes
Function KL0USC9()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USC9"; /* set current process name*/

  set KL0UM005.CL0UMHD4 initialAttributes;
  set KL0UM005.CL0UMHD5 initialAttributes;
  set KL0UM005.CL0UMHD6 initialAttributes;
  set KL0UM005.CL0UMHD7 initialAttributes;
  set KL0UM005.CL0UMHD8 initialAttributes;
  set KL0UM005.CL0UMHD9 initialAttributes;
  set KL0UM005.CL0UMHDA initialAttributes;
  set KL0UM005.CL0UMHDB initialAttributes;
  set KL0UM005.CL0UMHDC initialAttributes;

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0) /* ; until end of map size lines*/
    if (KL0UM005.SY4IDDSC[CLXLINEX] == " ") /* no size*/
      set KL0UM005.SY4IDDSC[CLXLINEX] protect, invisible;
      set KL0UM005.CLNRTSQ[CLXLINEX] protect, invisible;
      set KL0UM005.CLNGRPRC[CLXLINEX] protect, invisible;
    else
      set KL0UM005.SY4IDDSC[CLXLINEX] initialAttributes;
      set KL0UM005.CLNRTSQ[CLXLINEX] cursor, normal;
      set KL0UM005.CLNGRPRC[CLXLINEX] normal;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end

  KL0UM005.CL0UMTRQ = CL0UW01.CL0UWRQT;
  set KL0UM005.CL0UMHD3 initialAttributes;
  set KL0UM005.CL0UMTRQ initialAttributes;

  set KL0UM005.CL0UMHD2 protect, invisible;
                                   /* protect/darken start price hdg*/
  set KL0UM005.CL0UMPRC protect, invisible; /* protect/darken start price*/

  set KL0UM005.CL0UMHD1 protect, invisible; /* protect/darken start size hdg*/
  set KL0UM005.CL0UMDSZ protect, invisible; /* protect/darken start size*/

  set KL0UM005.CL0UMTAQ normal;


end // end KL0USC9

// set size add attributes
Function KL0USCA()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USCA"; /* set current process name*/

  CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
  while (CLXREC.CLXLINEX > 0) /* ; until end of map size lines*/
    set KL0UM005.SY4IDDSC[CLXLINEX] protect, invisible;
    set KL0UM005.CLNRTSQ[CLXLINEX] protect, invisible;
    set KL0UM005.CLNGRPRC[CLXLINEX] protect, invisible;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end


end // end KL0USCA

// select next rtn auth recs
Function KL0USCB()


  CLXREC.CLXCPROC = "CL0USCB"; /* set current proc name*/

  KL0U832(); /* ; fetch next rtn auth rec*/
  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
    CL0UW01.CL0UWAQT = CL0UW01.CL0UWAQT + CLKREC.CLKAUTHQ;
    CL0UW01.CLKCLPRC = CLKREC.CLKCLPRC;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; end of recs*/
      CL0UW01.CLKCLPRC = 0;
      CLXREC.CLXTESTF = "Y";
    end
  end


end // end KL0USCB

// select next rtn act recs
Function KL0USCC()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USCC"; /* set current proc name*/

  KL0U812(); /* ; fetch next rtn act rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CLNREC.CLNRTSQ;
    if (CLNREC.SY5SZID in CL0UW01.SY5SZID)
      CL0UW01.CLNRTSQ[sysVar.arrayIndex] = CLNREC.CLNRTSQ;
      CL0UW01.CLNGRPRC[sysVar.arrayIndex] = CLNREC.CLNGRPRC;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; end of recs*/
      CLXREC.CLXTESTF = "Y"; /* set test flag*/
    end
  end


end // end KL0USCC

// validate color
Function KL0USD0()


  CLXREC.CLXCPROC = "CL0USD0"; /* set current process name*/

  set SY2REC empty;
  SY2REC.XGPCD = CLAREC.XGPCD;
  SY2REC.SY1STNBR = KL0UM005.SY1STNBR;
  SY2REC.SY2CLRID = KL0UM005.SY2CLRID;
  SY2REC.XDMCD = KL0UM005.XDMCD;

  KL0U904(); /* ; inquire on style/color row*/

  if (SQLCA.VAGen_SQLCODE == +0)
    CL0UW01.SY2CLRID = SY2REC.SY2CLRID;
    CL0UW01.XDMCD = SY2REC.XDMCD;
    set KL0UM005.SY2CLRID normal;
     /* SET CL0UM005.XDMCD NORMAL;*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM005.SY2CLRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(200);
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set KL0UM005.SY2CLRID cursor, modified, bold;
        set KL0UM005.XDMCD modified, bold;
      end
    end
  end


end // end KL0USD0

// validate style
Function KL0USD1()


  CLXREC.CLXCPROC = "CL0USD1"; /* set current process name*/

  set SY1REC empty;
  SY1REC.XGPCD = CLAREC.XGPCD;
  SY1REC.SY1STNBR = KL0UM005.SY1STNBR;

  KL0U824(); /* ; inquire on style table*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    set KL0UM005.SY1STNBR normal;
    CL0UW01.SY1STNBR = SY1REC.SY1STNBR;
    CL0UW01.SY1SSTNM = SY1REC.SY1SSTNM;
    CL0UW01.SY4SZSCL = SY1REC.SY4SZSCL;
    CL0UW01.XUMCD = SY1REC.XUMCD;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM005.SY1STNBR cursor, modified, bold;
      CL0UW01.SY1SSTNM = " ";
      CL0UW01.SY4SZSCL = " ";
      CL0UW01.XUMCD = " ";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(200);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM005.SY1STNBR cursor, modified, bold;
        CL0UW01.SY1SSTNM = " ";
        CL0UW01.SY4SZSCL = " ";
        CL0UW01.XUMCD = " ";
      end
    end
  end


end // end KL0USD1

// add prod to summ array
Function KL0USD2()


  CLXREC.CLXCPROC = "CL0USD2"; /* set current proc name*/

  CL0UW01.SY1STNBR = KL0UM005.SY1STNBR;
  CL0UW01.SY2CLRID = KL0UM005.SY2CLRID;
  CL0UW01.XDMCD = KL0UM005.XDMCD;

  if (CL0UW01.CL0UWBKE in CL0UW02.CL0UWKEY)
    CL0UW01.CL0UWPAX = sysVar.arrayIndex;
  else
    if (" " in CL0UW02.CL0UWKEY)
      CL0UW01.CL0UWPAX = sysVar.arrayIndex;
    else
      set CL0UW02 empty; /* ; clear prod id array*/
      CLXREC.CLXARY1X[1] = 1; /* re-set array map start*/
      CL0UW01.CL0UWPAX = 1; /* ; re-set prod id array index*/
    end
  end

  CL0UW02.CL0UMSEL[CL0UWPAX] = " ";

  CL0UW02.SY1STNBR[CL0UWPAX] = CL0UW01.SY1STNBR;
  CL0UW02.SY2CLRID[CL0UWPAX] = CL0UW01.SY2CLRID;
  CL0UW02.XDMCD[CL0UWPAX] = CL0UW01.XDMCD;
  CL0UW02.SY1SSTNM[CL0UWPAX] = CL0UW01.SY1SSTNM;
  CL0UW02.XUMCD[CL0UWPAX] = CL0UW01.XUMCD;
  CL0UW02.SY4SZSCL[CL0UWPAX] = CL0UW01.SY4SZSCL;

  CL0UW02.CL0UWVPF[CL0UWPAX] = " ";

  CL0UW02.CL0UWVAL[CL0UWPAX] = 0;
  CL0UW02.CL0UWPRC[CL0UWPAX] = 0;
  CL0UW02.CL0UWAQT[CL0UWPAX] = 0;
  CL0UW02.CL0UWRQT[CL0UWPAX] = 0;


end // end KL0USD2

// validate new start price
Function KL0USD5()


  CLXREC.CLXCPROC = "CL0USD5"; /* set current proc name*/

  if (KL0UM005.CL0UMPRC < 0) /* ; default price entered*/
    set KL0UM005.CL0UMPRC cursor, modified, bold;
    converseLib.validationFailed(332);
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
  else
    set KL0UM005.CL0UMPRC normal; /* ; re-set price attributes*/
  end


end // end KL0USD5

// validate new start size
Function KL0USD6()


  CLXREC.CLXCPROC = "CL0USD6"; /* set current proc name*/

  if (KL0UM005.CL0UMDSZ == " ")
    set KL0UM005.CL0UMDSZ normal;
    CLXREC.CLXARY1X[CLXSCRNX] = 1;
  else
    if (KL0UM005.CL0UMDSZ in CL0UW02.SY4IDDSC)
      set KL0UM005.CL0UMDSZ normal;
      CLXREC.CLXARY1X[CLXSCRNX] = sysVar.arrayIndex;
    else
      set KL0UM005.CL0UMDSZ cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(221);
    end
  end


end // end KL0USD6

// validate size price
Function KL0USD7()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USD7"; /* set current proc name*/

  if (KL0UM005.CLNGRPRC[CLXLINEX] < +0)
    set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(332);
  else
    if (KL0UM005.CLNRTSQ[CLXLINEX] > +0)
      if (KL0UM005.CLNGRPRC[CLXLINEX] >= +0)
        set KL0UM005.CLNGRPRC[CLXLINEX] normal;
      else
        set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(332);
      end
    else
      set KL0UM005.CLNGRPRC[CLXLINEX] normal;
    end
  end


end // end KL0USD7

// validate size qty
Function KL0USD8()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USD8"; /* set current proc name*/

  if (KL0UM005.CLNRTSQ[CLXLINEX] < +0)
    set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(331);
  else
    CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX] + CLXREC.CLXLINEX - 1;
    KL0UM005.CL0UMTRQ = KL0UM005.CL0UMTRQ - CL0UW02.CLNRTSQ[CLXARAYX];
    KL0UM005.CL0UMTRQ = KL0UM005.CL0UMTRQ + KL0UM005.CLNRTSQ[CLXLINEX];
    if (CLXREC.CLXERRF == "N") /* ; no map errors exist*/
      set KL0UM005.CLNRTSQ[CLXLINEX] cursor, normal;
    else
      set KL0UM005.CLNRTSQ[CLXLINEX] normal;
    end
  end


end // end KL0USD8

// update act rtn recs - CLNRECs
Function KL0USD9()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USD9"; /* set current proc name*/

  if (CL0UW02.CLNRTSQ[CLXARAYX] == 0 /* no array qty*/
   && CL0UW02.CLNGRPRC[CLXARAYX] == 0) /* no array price*/
    KL0USDA(); /* ; add new act rtn recs*/
  else
    KL0USDC(); /* ; change act rtn recs*/
  end


end // end KL0USD9

// add new act rtn rec
Function KL0USDA()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDA"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLNREC.CLHSEQNB = KL0UM005.CLHSEQNB;
  CLNREC.XGPCD = CLAREC.XGPCD;
  CLNREC.SY1STNBR = KL0UM005.SY1STNBR;
  CLNREC.SY2CLRID = KL0UM005.SY2CLRID;
  CLNREC.XDMCD = KL0UM005.XDMCD;
  CLNREC.XUMCD = KL0UM005.XUMCD;
  CLNREC.XQACD = "**";
  CLNREC.SY5SZID = CL0UW02.SY5SZID[CLXARAYX];

  KL0U814(); /* ; inquire on CLNREC*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
    set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
    CL0UW01.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
    CL0UW01.CLNGRPRC[CLXARAYX] = CLNREC.CLNGRPRC;
    CL0UW01.ZZZCHGCT[CLXARAYX] = CLNREC.ZZZCHGCT;
    CL0UW02.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
    CL0UW02.CLNGRPRC[CLXARAYX] = CLNREC.CLNGRPRC;
    CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
    converseLib.validationFailed(18); /* ; data has been changed*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      KL0USDB(); /* ; continue add*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
        set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USDA

// perform add routine
Function KL0USDB()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDB"; /* set current proc name*/

  CLXREC.CLXORDIV = CLXREC.IV0IVCID;

  KL0US02(); /* ; get today's date*/

  CLNREC.CLNGRPRC = KL0UM005.CLNGRPRC[CLXLINEX];
  CLNREC.CLNNTPRC = KL0UM005.CLNGRPRC[CLXLINEX];
  CLNREC.CLNRTSQ = KL0UM005.CLNRTSQ[CLXLINEX];
  CLNREC.IV0IVCID = CLXREC.IV0IVCID;
  CLNREC.IV0PARTN = CLXREC.CLXPARTN;
  CLNREC.XQACD = "01";
  CLNREC.XUMCD = KL0UM005.XUMCD;
  CLNREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLNREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U816(); /* ; perform add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    CL0UW02.CLNRTSQ[CLXARAYX] = KL0UM005.CLNRTSQ[CLXLINEX];
    CL0UW02.CLNGRPRC[CLXARAYX] = KL0UM005.CLNGRPRC[CLXLINEX];
    CL0UW01.CLNRTSQ[CLXARAYX] = KL0UM005.CLNRTSQ[CLXLINEX];
    CL0UW01.CLNGRPRC[CLXARAYX] = KL0UM005.CLNGRPRC[CLXLINEX];
    CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
  end


end // end KL0USDB

// change act rtn rec
Function KL0USDC()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDC"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLNREC.CLHSEQNB = KL0UM005.CLHSEQNB;
  CLNREC.XGPCD = CLAREC.XGPCD;
  CLNREC.SY1STNBR = CL0UW01.SY1STNBR;
  CLNREC.SY2CLRID = CL0UW01.SY2CLRID;
  CLNREC.XDMCD = CL0UW01.XDMCD;
  CLNREC.XUMCD = CL0UW01.XUMCD;
  CLNREC.XQACD = "**";
  CLNREC.SY5SZID = CL0UW01.SY5SZID[CLXARAYX];

  KL0U814(); /* ; inquire on CLNREC*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    CL0UW01.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
    CL0UW01.CLNGRPRC[CLXARAYX] = CLNREC.CLNGRPRC;
    CL0UW01.ZZZCHGCT[CLXARAYX] = CLNREC.ZZZCHGCT;
    KL0USDD(); /* ; determine update action*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CL0UW01.CLNRTSQ[CLXARAYX] = 0;
      CL0UW01.CLNGRPRC[CLXARAYX] = 0;
      CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
      CL0UW02.CLNRTSQ[CLXARAYX] = 0;
      CL0UW02.CLNGRPRC[CLXARAYX] = 0;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
        set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USDC

// select record for update
Function KL0USDD()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDD"; /* set current proc name*/

  KL0U817(); /* ; perform update*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/

    CL0UW01.CL0UWQTY = KL0UM005.CLNRTSQ[CLXLINEX];
    CL0UW01.CL0UWPRC = KL0UM005.CLNGRPRC[CLXLINEX];

    CL0UW01.CL0UWQTY = CL0UW01.CL0UWQTY + CL0UW01.CLNRTSQ[CLXARAYX];
    CL0UW01.CL0UWQTY = CL0UW01.CL0UWQTY - CL0UW02.CLNRTSQ[CLXARAYX];

    if (CL0UW01.CL0UWQTY < 0) /* ; new qty < 0*/
      set KL0UM005.CLNGRPRC[CLXARAYX] cursor, modified, bold;
      set KL0UM005.CLNRTSQ[CLXARAYX] cursor, modified, bold;
      CL0UW02.CLNRTSQ[CLXARAYX] = CL0UW01.CLNRTSQ[CLXARAYX];
      CL0UW02.CLNGRPRC[CLXARAYX] = CL0UW01.CLNGRPRC[CLXARAYX];
      KL0UM005.CLNRTSQ[CLXARAYX] = CL0UW01.CLNRTSQ[CLXARAYX];
      KL0UM005.CLNGRPRC[CLXARAYX] = CL0UW01.CLNGRPRC[CLXARAYX];
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18); /* ; record has been changed*/
    else
      if (CL0UW01.CL0UWQTY == 0) /* ; new qty = 0*/
        KL0USDE(); /* ; delete act rtn rec*/
      else
        KL0USDF(); /* ; replace act rtn rec*/
      end
    end

  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
      set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18); /* ; record has been changed*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM005.CLNGRPRC[CLXLINEX] cursor, modified, bold;
        set KL0UM005.CLNRTSQ[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USDD

// delete act rtn rec
Function KL0USDE()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDE"; /* set current proc name*/

  KL0U815(); /* ; delete clnrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful delete*/
    CL0UW01.CLNRTSQ[CLXARAYX] = 0;
    CL0UW01.CLNGRPRC[CLXARAYX] = 0;
    CL0UW01.ZZZCHGCT[CLXARAYX] = 0;
    CL0UW02.CLNRTSQ[CLXARAYX] = 0;
    CL0UW02.CLNGRPRC[CLXARAYX] = 0;
  end


end // end KL0USDE

// replace act rtn rec
Function KL0USDF()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USDF"; /* set current proc name*/

  CLXREC.CLXORDIV = CLXREC.IV0IVCID;

  KL0US02(); /* ; get today's date*/

  CLNREC.CLNRTSQ = CL0UW01.CL0UWQTY;
  CLNREC.CLNGRPRC = CL0UW01.CL0UWPRC;
  CLNREC.CLNNTPRC = CL0UW01.CL0UWPRC;
  CLNREC.IV0IVCID = CLXREC.IV0IVCID;
  CLNREC.IV0PARTN = CLXREC.CLXPARTN;
  CLNREC.XQACD = "01";
  CLNREC.XUMCD = KL0UM005.XUMCD;
  CLNREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLNREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U817(); /* ; perform replace*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    CL0UW01.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
    CL0UW01.CLNGRPRC[CLXARAYX] = CLNREC.CLNGRPRC;
    CL0UW01.ZZZCHGCT[CLXARAYX] = CL0UW01.ZZZCHGCT + 1;
    CL0UW02.CLNRTSQ[CLXARAYX] = CLNREC.CLNRTSQ;
    CL0UW02.CLNGRPRC[CLXARAYX] = CLNREC.CLNGRPRC;
  end


end // end KL0USDF

// inquire on auth rtn rec
Function KL0USDG()


  CLXREC.CLXCPROC = "CL0USDG"; /* set current proc name*/

  if (KL0UM005.SY1STNBR == " " /* no map style number*/
   && KL0UM005.SY2CLRID == " " /* no map color id*/
   && KL0UM005.XDMCD == " ")   /* no map dimension*/
    return; /* exit process*/
  end

  set CLKREC empty;
  CLKREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = KL0UM005.SY1STNBR;
  CLKREC.SY2CLRID = KL0UM005.SY2CLRID;
  CLKREC.XDMCD = KL0UM005.XDMCD;
  CLKREC.SY5SZID = 0;
  CLKREC.CLKCRFL = " "; /* 072089 dflt ' '*/
  CLKREC.CLJRDIND = "R";

  KL0U834(); /* inquire on auth rtn req*/

  if (SQLCA.VAGen_SQLCODE == +0) /* successful inquiry*/
    KL0USDH(); /* update auth rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* record not found*/
      KL0USDJ(); /* add auth rtn rec*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database is busy*/
        set KL0UM005.CL0UMTAQ cursor, modified, bold;
      end
    end
  end


end // end KL0USDG

// update auth rtn rec
Function KL0USDH()


  CLXREC.CLXCPROC = "CL0USDH"; /* set current proc name*/

  if (CLKREC.CLKAUTHQ == KL0UM005.CL0UMTAQ
   && CLKREC.CLKCLPRC == KL0UM005.CL0UMPRC)
    CL0UW02.CL0UWAQT[CL0UWPAX] = CLKREC.CLKAUTHQ;
    CL0UW02.CL0UWPRC[CL0UWPAX] = CLKREC.CLKCLPRC;
    return;
  end

  KL0U834(); /* ; inquire on auth rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USDI(); /* ; replace auth rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM005.CL0UMTAQ cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set KL0UM005.CL0UMTAQ cursor, modified, bold;
      end
    end
  end


end // end KL0USDH

// replace auth rtn rec
Function KL0USDI()


  CLXREC.CLXCPROC = "CL0USDI"; /* set current proc name*/

  CLXREC.CLXORDIV = CLXREC.IV0IVCID;

  KL0US02(); /* get today's date/time*/

  CLKREC.CLKAUTHQ = KL0UM005.CL0UMTAQ;
  CLKREC.CLKCLPRC = KL0UM005.CL0UMPRC;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.IV0PARTN = CLXREC.CLXPARTN;
  CLKREC.XQACD = "01";
  CLKREC.XUMCD = KL0UM005.XUMCD;
  CLKREC.CLKCRFL = " "; /* 072089 force default*/
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U837(); /* replace clkrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* successful replace*/
    CL0UW02.CL0UWAQT[CL0UWPAX] = CLKREC.CLKAUTHQ;
    CL0UW02.CL0UWPRC[CL0UWPAX] = CLKREC.CLKCLPRC;
  end


end // end KL0USDI

// add auth rtn rec
Function KL0USDJ()


  CLXREC.CLXCPROC = "CL0USDJ"; /* set current proc name*/

  CLXREC.CLXORDIV = CLXREC.IV0IVCID;

  KL0US02(); /* get today's date/time*/

  CLKREC.CLKAUTHQ = KL0UM005.CL0UMTAQ;
  CLKREC.CLKCLPRC = KL0UM005.CL0UMPRC;
  CLKREC.IV0IVCID = CLXREC.IV0IVCID;
  CLKREC.IV0PARTN = CLXREC.CLXPARTN;
  CLKREC.XQACD = "01";
  CLKREC.XUMCD = KL0UM005.XUMCD;
  CLKREC.CLKCRFL = " "; /* 072089 force default*/
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U836(); /* add clkrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* successful add*/
    CL0UW02.CL0UWAQT[CL0UWPAX] = CLKREC.CLKAUTHQ;
    CL0UW02.CL0UWPRC[CL0UWPAX] = CLKREC.CLKCLPRC;
  end


end // end KL0USDJ

// update CLLREC - act rtn rec
Function KL0USDK()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USDK"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = KL0UM005.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  KL0U854(); /* ; inquire on actual rtn table*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0USDL(); /* ; update record*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      KL0USDN(); /* ; add record*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM005.CL0UMIDT cursor, modified, bold;
        set KL0UM005.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0USDK

// update actual rtn table
Function KL0USDL()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USDL"; /* set current proc name*/

  if (CL2REC.CL2ISBDT == CL0UW01.CLLIDT   
   && CL2REC.XXXUSRID == CL0UW01.XXXUSRID /* 2-15-91*/
   && CLLREC.XWHCD == KL0UM005.XWHCD)    
    return;
  end

  KL0U854(); /* ; inquire on cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USDM(); /* ; replace cllrec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      set KL0UM005.CL0UMIDT cursor, modified, bold;
      set KL0UM005.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; data base is busy*/
        set KL0UM005.CL0UMIDT cursor, modified, bold;
        set KL0UM005.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0USDL

// replace actual rtn table
Function KL0USDM()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USDM"; /* set current proc name*/

  KL0US02(); /* ; get todays' date*/

  CL2REC.CL2ISBDT = CL0UW01.CLLIDT;
  CL2REC.XXXUSRID = CL0UW01.XXXUSRID; /* 2-15-91*/
  CLLREC.XWHCD = KL0UM005.XWHCD;
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U857(); /* ; replace cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    return; /* ; exit process*/
  end


end // end KL0USDM

// add actual rtn table
Function KL0USDN()
   /* *  2-15-91 bcourt rename CLLIBYID to XXXUSRID.*/

  CLXREC.CLXCPROC = "CL0USDN"; /* set current proc name*/

  KL0US02(); /* ; get todays' date*/

  CL2REC.CL2ISBDT = CL0UW01.CLLIDT;
  CL2REC.XXXUSRID = CL0UW01.XXXUSRID; /* 2-15-91*/
  CLLREC.XWHCD = KL0UM005.XWHCD;
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U856(); /* ; add cllrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    return; /* ; exit process*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not unique*/
      set KL0UM005.CL0UMIDT cursor, modified, bold;
      set KL0UM005.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; data base is busy*/
        set KL0UM005.CL0UMIDT cursor, modified, bold;
        set KL0UM005.XXXUSRID cursor, modified, bold; /* 2-15-91*/
      end
    end
  end


end // end KL0USDN

// update prod summ array
Function KL0USE0()
   /* *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.*/

  CLXREC.CLXCPROC = "CL0USE0"; /* set current proc name*/

  if (KL0UM005.SY1STNBR == " " /* ; no map style nbr*/
   && KL0UM005.SY2CLRID == " " /* ; no map color id*/
   && KL0UM005.XDMCD == " ")   /* ; no dim*/
    return;
  end

  CL0UW02.CL0UWAQT[CL0UWPAX] = KL0UM005.CL0UMTAQ;
  CL0UW02.XUMCD[CL0UWPAX] = KL0UM005.XUMCD;
  CL0UW02.CL0UWPRC[CL0UWPAX] = +0;
  CL0UW02.CL0UWVPF[CL0UWPAX] = " ";

  CL0UW01.CL0UWRQT = 0; /* ; re-set act rtn qty*/
  CL0UW01.CL0UWTVL = 0; /* ; re-set style claim value*/
  CLXREC.CLXARAYX = 0; /* ; re-set array index*/
  while (CLXREC.CLXARAYX < 40)
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    CL0UW01.CL0UWRQT = CL0UW01.CL0UWRQT + CL0UW01.CLNRTSQ[CLXARAYX];
    CL0UW01.CL0UWQTY = CL0UW01.CLNRTSQ[CLXARAYX];
    CL0UW01.CL0UWPRC = CL0UW01.CLNGRPRC[CLXARAYX];
    CL0UW01.CL0UWVAL = CL0UW01.CL0UWQTY * CL0UW01.CL0UWPRC * -1;
    CL0UW01.CL0UWTVL = CL0UW01.CL0UWTVL + CL0UW01.CL0UWVAL;
    if (CL0UW01.CLNGRPRC[CLXARAYX] > +0)
      if (CL0UW02.CL0UWPRC[CL0UWPAX] != CL0UW01.CLNGRPRC[CLXARAYX])
        if (CL0UW02.CL0UWVPF[CL0UWPAX] == " ")
          if (CL0UW02.CL0UWPRC[CL0UWPAX] == +0)
            CL0UW02.CL0UWPRC[CL0UWPAX] = CL0UW01.CLNGRPRC[CLXARAYX];
          else
            CL0UW02.CL0UWPRC[CL0UWPAX] = 0;
            CL0UW02.CL0UWVPF[CL0UWPAX] = "V";
          end
        end
      end
    end
  end

  if (CL0UW02.CL0UWPRC[CL0UWPAX] == 0 /* prod summ array price = 0*/
   && CL0UW02.CL0UWVPF[CL0UWPAX] == " ") /* varied price flag = ' '*/
    CL0UW02.CL0UWPRC[CL0UWPAX] = KL0UM005.CL0UMPRC;
  end

  CL0UW02.CL0UWRQT[CL0UWPAX] = CL0UW01.CL0UWRQT;
  CL0UW02.CL0UWVAL[CL0UWPAX] = CL0UW01.CL0UWTVL;


end // end KL0USE0

// re-calc ttl auth rtn qty
Function KL0USE1()


  CLXREC.CLXCPROC = "CL0USE1"; /* set current proc name*/

  set CLKREC empty;
  set CL0UW05 empty;
  CL0UW05.CL0UWSQL = "SM";

  CLKREC.CLACLMNB = CLAREC.CLACLMNB;

  KL0U838(); /* ; re-calc total auth rtn qty*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful re-calc*/
    CL0UW01.CLJTATHQ = CLKREC.CLKAUTHQ;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CL0UW01.CLJTATHQ = +0;
    end
  end


end // end KL0USE1

// update CLJREC - clm rth auth
Function KL0USE2()


  CLXREC.CLXCPROC = "CL0USE2"; /* set current proc name*/

  if (CLJREC.CLJTATHQ == CL0UW01.CLJTATHQ
   && CLJREC.CLJNCRFL == CL0UW01.CLJNCRFL
   && CLJREC.XWHCD == CL0UW01.XWHCD)
    return;
  end

  KL0U874(); /* ; inquire on cljrec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USE3(); /* ; replace CLJREC*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18);
    end
  end


end // end KL0USE2

// select record for update
Function KL0USE3()


  CLXREC.CLXCPROC = "CL0USE3"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLJREC.CLJTATHQ = CL0UW01.CLJTATHQ;
  CLJREC.CLJNCRFL = CL0UW01.CLJNCRFL;
  CLJREC.XWHCD = CL0UW01.XWHCD;
  CLJREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLJREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U877(); /* ; replace record*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    KL0UM001.CL0UMTAQ = CL0UW01.CLJTATHQ;
    KL0UM001.CLJNCRFL = CL0UW01.CLJNCRFL;
    KL0UM005.CLJNCRFL = CL0UW01.CLJNCRFL;
  end


end // end KL0USE3

// add new claim rtn auth hdr rec
Function KL0USE4()


  CLXREC.CLXCPROC = "CL0USE4"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLJREC.CLJTATHQ = CL0UW01.CLJTATHQ;
  CLJREC.CLJNCRFL = CL0UW01.CLJNCRFL;
  CLJREC.XWHCD = CL0UW01.XWHCD;
  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U876(); /* ; perform add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    KL0UM001.CL0UMTAQ = CL0UW01.CLJTATHQ;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record is not unique*/
      CLXREC.CLXERRF = "Y"; /* set map error flag*/
      converseLib.validationFailed(18);
    end
  end


end // end KL0USE4

// re-calc est val/ttl qty
Function KL0USE5()


  CLXREC.CLXCPROC = "CL0USE5"; /* set current proc name*/

  set CLMREC empty;
  CLMREC.CLACLMNB = CLAREC.CLACLMNB;
  CLMREC.CLHSEQNB = CLAREC.CLACSQNB;

  KL0U918(); /* ; re-calc est val/ttl qty*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful re-calc*/

     /* need to sum -(return merch amt), remerch charge*/
     /* and restock charge to find the old estimated claim value*/

    CLAREC.CLATQTY = CLMREC.CLMTRTSQ;
    CLAREC.CLAESTVL = CLMREC.CLMRMAMT * -1;
    CLAREC.CLAESTVL = CLAREC.CLAESTVL + CLMREC.CLMRMHCG + CLMREC.CLMRSKCG;
    CL0UW01.CL0UWOEV = CLAREC.CLAESTVL;
    CL0UW01.CL0UWOTQ = CLAREC.CLATQTY;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CL0UW01.CL0UWOEV = +0;
      CL0UW01.CL0UWOTQ = +0;
    end
  end

end // end KL0USE5

// re-calc ttl act rtn qty
Function KL0USE6()
   /* * Maintenance Log:*/
    /* 2-15-91 bcourt drop CL0UW01.CLMTRCQY (field dropped 7/88)*/
                   /* rename CLMTARQY to CL0UWTQT.*/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0USE6"; /* set current proc name*/

  set CLNREC empty;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = CLWREC.CLHSEQNB;

  KL0U818(); /* ; re-calc total act rtn qtys*/

  CLMREC.CLMTNCRQ = CL0UW03.CLMTNCRQ;
  CLMREC.CLMTRTSQ = CL0UW03.CLMTRTSQ;
  CLMREC.CLMRMAMT = CL0UW03.CL0UWAMT;

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful re-calc*/
    CL0UW01.CLMTNCRQ = CLMREC.CLMTNCRQ;
    CL0UW01.CLMTRTSQ = CLMREC.CLMTRTSQ;
    CL0UW01.CL0UWTQT = CLMREC.CLMTRTSQ + CLMREC.CLMTNCRQ; /* 2-15-91*/
    CL0UW01.CLMRMAMT = CLMREC.CLMRMAMT;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CL0UW01.CL0UWTQT = +0; /* 2-15-91*/
      CL0UW01.CLMTNCRQ = +0;
      CL0UW01.CLMTRTSQ = +0;
      CL0UW01.CLMRMAMT = +0;
    end
  end


end // end KL0USE6

// update claim rts act rec
Function KL0USE7()


  CLXREC.CLXCPROC = "CL0USE7"; /* set current proc name*/

  if (CLMREC.CLMTNCRQ == CL0UW01.CLMTNCRQ
   && CLMREC.CLMTRTSQ == CL0UW01.CLMTRTSQ
   && CLMREC.CLMRMAMT == CL0UW01.CLMRMAMT)
    return;
  end

  KL0U914(); /* ; inquire on record for update*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USE9(); /* ; replace CLMREC*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18);
    end
  end


end // end KL0USE7

// replace claim rts act rec
Function KL0USE9()
   /* * Maintenance Log:*/
   /* *  2-15-91 bcourt rename CLMTARQY to CL0UWTQT.*/
   /* *  4-13-92 twatso rename CLacmind to cl-clcom-fl (not on clmrec yet)*/
   /* **********************************************************/

  CLXREC.CLXCPROC = "CL0USE9"; /* set current proc name*/

  if (CLMREC.CLMRBGQ > CL0UW01.CL0UWTQT /* 2-15-91*/
   || CLMREC.CLMRBXQ > CL0UW01.CL0UWTQT /* "*/
   || CLMREC.CLMUNLQ > CL0UW01.CL0UWTQT /* "*/
   || CLMREC.CLMRTGQ > CL0UW01.CL0UWTQT) /* "*/
    CLXREC.CLXERRF = "Y"; /* ; set error flag*/
    CLXREC.CLXEOSF = "Y"; /* ; set end of screen flag*/
    CLXREC.CLXNEWSC = "Y"; /* ; set display new screen flag*/
    CLXREC.CLXCSCRN = "KL0UM010"; /* set next screen name*/
    converseLib.validationFailed(334);
  end

  if (CL0UW01.CLJRSKFL != "Y") /* ; re-stock charge flag = n*/
    CL0UW01.CLMRSKCG = +0; /* ; re-stock charge = 0*/
  else
    if (CLAREC.XGPCD in YRMTBL.XGPCD)
      CL0UW01.CLMRSKCG = YRMTBL.YRMRESTK[sysVar.arrayIndex] * CL0UW01.CL0UWTQT;
                                   /* 2-15-91*/
    else
      CL0UW01.CLMRSKCG = +0;
    end
  end

  KL0US02(); /* ; get today's date/time*/

  CLMREC.CLMRSKCG = CL0UW01.CLMRSKCG;
  CLMREC.CLMTNCRQ = CL0UW01.CLMTNCRQ;
  CLMREC.CLMTRTSQ = CL0UW01.CLMTRTSQ;
  CLMREC.CLMRMAMT = CL0UW01.CLMRMAMT;
  CLMREC.CLACMIND = CL0UW01.CL-CLCOM-FL;
  CLMREC.CLMTOGL1 = "N";
  CLMREC.CLMTOGL2 = "N";
  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U917(); /* ; replace record*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    KL0UM001.CL0UMTRQ = CL0UW01.CL0UWTQT; /* 2-15-91*/
    KL0UM001.CL0UMAMT = CL0UW01.CLMRMAMT * -1;
  end


end // end KL0USE9

// add new claim act rec
Function KL0USEA()
   /* * Maintenance Log:*/
   /* *  2-15-91 bcourt rename CLMTARQY to CL0UWTQT,*/
   /* *                 since not on CLMREC*/
   /* * 04-13-92 twatso rename clacmind to cl-clcom-fl*/
   /* *                 but not on clmrec yet*/
   /* *************************************************************/

  CLXREC.CLXCPROC = "CL0USEA"; /* set current proc name*/

  if (CL0UW01.CLJRSKFL != "Y") /* ; re-stock charge flag = n*/
    CL0UW01.CLMRSKCG = +0; /* ; re-stock charge = 0*/
  else
    if (CLAREC.XGPCD in YRMTBL.XGPCD)
      CL0UW01.CLMRSKCG = YRMTBL.YRMRESTK[sysVar.arrayIndex] * CL0UW01.CL0UWTQT;
                                   /* 2-15-91*/
    else
      CL0UW01.CLMRSKCG = +0;
    end
  end

  KL0US02(); /* ; get today's date/time*/

  CLMREC.CLMRSKCG = CL0UW01.CLMRSKCG;
  CLMREC.CLMTNCRQ = CL0UW01.CLMTNCRQ;
  CLMREC.CLMTRTSQ = CL0UW01.CLMTRTSQ;
  CLMREC.CLMRMAMT = CL0UW01.CLMRMAMT;
  CLMREC.CLACMIND = CL0UW01.CL-CLCOM-FL;
  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CLMREC.CLMTOGL1 = "N";
  CLMREC.CLMTOGL2 = "N";

  KL0U916(); /* ; perform add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    KL0UM001.CL0UMTRQ = CL0UW01.CL0UWTQT; /* 2-15-91*/
    KL0UM001.CL0UMAMT = CL0UW01.CLMRMAMT * -1;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record is not unique*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18);
    end
  end


end // end KL0USEA

// re-calc est val/ttl qty
Function KL0USEB()


  CLXREC.CLXCPROC = "CL0USEB"; /* set current proc name*/

  set CLMREC empty;
  CLMREC.CLACLMNB = CLAREC.CLACLMNB;
  CLMREC.CLHSEQNB = CLAREC.CLACSQNB;

  KL0U918(); /* ; re-calc est val/ttl qty*/

  if (SQLCA.VAGen_SQLCODE == 0) /* successful re-calc*/

     /* need to sum -(return merch amt), remerch charge*/
     /* and restock charge to find the new estimated claim value*/

    CLAREC.CLAESTVL = CLMREC.CLMRMAMT * -1;
    CLAREC.CLAESTVL = CLAREC.CLAESTVL + CLMREC.CLMRMHCG + CLMREC.CLMRSKCG;
    CLAREC.CLATQTY = CLMREC.CLMTRTSQ;
    CL0UW01.CL0UWNEV = CLAREC.CLAESTVL;
    CL0UW01.CL0UWNTQ = CLAREC.CLATQTY;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records found*/
      CL0UW01.CL0UWNEV = +0;
      CL0UW01.CL0UWNTQ = +0;
    else
    end
  end


end // end KL0USEB

// select claim hdr for update
Function KL0USEC()


  CLXREC.CLXCPROC = "CL0USEC"; /* set current proc name*/

  CL0UW01.CLAESTVL = CLAREC.CLAESTVL;
  CL0UW01.CLATQTY = CLAREC.CLATQTY;

  CL0UW01.CLAESTVL = CL0UW01.CLAESTVL + CL0UW01.CL0UWSEV;
  CL0UW01.CLAESTVL = CL0UW01.CLAESTVL - CL0UW01.CL0UWOEV;
  CL0UW01.CLAESTVL = CL0UW01.CLAESTVL + CL0UW01.CL0UWNEV;

  CL0UW01.CLATQTY = CL0UW01.CLATQTY + CL0UW01.CL0UWSTQ;
  CL0UW01.CLATQTY = CL0UW01.CLATQTY - CL0UW01.CL0UWOTQ;
  CL0UW01.CLATQTY = CL0UW01.CLATQTY + CL0UW01.CL0UWNTQ;

  if (CLAREC.CLAESTVL == CL0UW01.CLAESTVL /* same est value*/
   && CLAREC.CLATQTY == CL0UW01.CLATQTY)  /* same total qty*/
    return;
  end

  KL0U924();
                                   /* ; inquire on claim hdr for update*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USED(); /* ; replace record*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
        CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
        CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
        CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
      end
    end
  end


end // end KL0USEC

// replace claim header
Function KL0USED()


  CLXREC.CLXCPROC = "CL0USED"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLAREC.CLAESTVL = CL0UW01.CLAESTVL;
  CLAREC.CLATQTY = CL0UW01.CLATQTY;
  CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U927(); /* ; replace clarec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    CL0UW01.CL0UWSEV = 0;
    CL0UW01.CL0UWSTQ = 0;
  end


end // end KL0USED

// retrieve comments data
Function KL0USG0()


  CLXREC.CLXCPROC = "CL0USG0"; /* set current proc name*/

  CLXREC.CLXLINEX = 1; /* ; re-set map index*/
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    KL0UM010.CLGCOMNT[CLXLINEX] = " ";
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end

  set CLGREC empty; /* ; clear comment record*/
  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLGREC.CLGCMTYP = "I";

  KL0U931(); /* ; select all comment recs*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful select*/
    KL0USG1(); /* ; move records to map*/
  else
    KL0U933(); /* close cursor for clgrec*/
  end

  KL0U933(); /* close cursor for clgrec*/

end // end KL0USG0

// move comments to map
Function KL0USG1()


  CLXREC.CLXCPROC = "CL0USG1"; /* set current proc name*/

  CLXREC.CLXLINEX = 0; /* ; re-set map index*/
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    KL0U932(); /* ; fetch next comment rec*/
    if (SQLCA.VAGen_SQLCODE == +0) /* ; successful fetch*/
      KL0UM010.CLGCOMNT[CLXLINEX] = CLGREC.CLGCOMNT;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* ; no more records*/
        CLXREC.CLXLINEX = CLXREC.CLXMAXLN[CLXSCRNX];
      end
    end
  end


end // end KL0USG1

// set comments map attributes
Function KL0USG2()


  CLXREC.CLXCPROC = "CL0USG2"; /* set current proc name*/

  if (CL0UW01.CL0UWUDF == "Y") /* ; data updates are allowed*/
    set KL0UM010.CLGCOMNT[CLXLINEX] cursor, normal;
  else
    set KL0UM010.CLGCOMNT[CLXLINEX] initialAttributes;
  end


end // end KL0USG2

// recalc restock charges
Function KL0USG3()


  CLXREC.CLXCPROC = "CL0USG3"; /* set current proc name*/

  if (CLJREC.CLJRSKFL != "Y") /* ; re-stock charge flag = n*/
    CL0UW01.CLMRSKCG = +0; /* ; re-stock charge = 0*/
  else
    if (CLAREC.XGPCD in YRMTBL.XGPCD)
      CL0UW01.CLMRSKCG = YRMTBL.YRMRESTK[sysVar.arrayIndex] * CL0UW01.CL0UWTRQ;
    else
      CL0UW01.CLMRSKCG = +0;
    end
  end


end // end KL0USG3

// update CLGREC - comment recs
Function KL0USG4()


  CLXREC.CLXCPROC = "CL0USG4"; /* set current proc name*/

  CLXREC.CLXLINEX = 0; /* ; re-set map index*/
  while (CLXREC.CLXLINEX < CLXREC.CLXMAXLN[CLXSCRNX])
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    if (KL0UM010.CLGCOMNT[CLXLINEX] == " ")
      KL0USG5(); /* ; delete existing comment rec*/
    else
      set CLGREC empty; /* ; clear comment record*/
      CLGREC.CLACLMNB = KL0UM010.CLACLMNB;
      CLGREC.CLHSEQNB = KL0UM010.CLHSEQNB;
      CLGREC.CLGCMTYP = "I";
      CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;

      KL0U934(); /* ; inquire on comment rec*/
      if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
        KL0USG8();
                                   /* ; update existing comment record*/
      else
        if (SQLCA.VAGen_SQLCODE == +100) /* ; no records*/
          KL0USGA(); /* ; add new comment record*/
        else
          if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
            set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
          end
        end
      end
    end
  end


   /* set value for comments indicator on claim header*/

  CLGREC.CLACLMNB = CLAREC.CLACLMNB;
  CLGREC.CLHSEQNB = -1;
  CLGREC.CL2ISNBR = -1;
  CLGREC.CLGCMTYP = "**";

  call "IO1260" ("SS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};
  call "IO1260" ("SN", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* comments found*/
    CL0UW01.CL0UWCMT = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no comments found*/
      CL0UW01.CL0UWCMT = "N";
    end
  end
  call "IO1260" ("CS", SQLCA, CLGREC) {isNoRefresh = yes, isExternal = yes};


end // end KL0USG4

// delete existing clgrec
Function KL0USG5()


  CLXREC.CLXCPROC = "CL0USG5"; /* set current proc name*/

  set CLGREC empty; /* ; clear comment record*/
  CLGREC.CLACLMNB = KL0UM010.CLACLMNB;
  CLGREC.CLHSEQNB = KL0UM010.CLHSEQNB;
  CLGREC.CLGCMTYP = "I";
  CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;

  KL0U934(); /* ; inquire on comment rec*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ; successful inquiry*/
    KL0USG6(); /* ; select record for update*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records*/
      return; /* ; add comment rec*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USG5

// select comment rec for update
Function KL0USG6()


  CLXREC.CLXCPROC = "CL0USG6"; /* set current proc name*/

  KL0U934(); /* ; inquire on  comment rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USG7(); /* ; delete record*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; no records*/
      set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USG6

// delete comment record
Function KL0USG7()


  CLXREC.CLXCPROC = "CL0USG7"; /* set current proc name*/

  KL0U935(); /* ; delete comment rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful delete*/
    return;
  end


end // end KL0USG7

// update existing comment record
Function KL0USG8()


  CLXREC.CLXCPROC = "CL0USG8"; /* set current proc name*/

  if (KL0UM010.CLGCOMNT[CLXLINEX] == CLGREC.CLGCOMNT)
    return;
  else
    KL0U934(); /* ; inquire on comment rec*/
    if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
      KL0USG9(); /* ; replace record*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
        set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(18);
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
          set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
        end
      end
    end
  end


end // end KL0USG8

// replace claim comment record
Function KL0USG9()


  CLXREC.CLXCPROC = "CL0USG9"; /* set current proc name*/

  KL0US02(); /* ; get today's date time*/

  CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;
  CLGREC.CLGCOMNT = KL0UM010.CLGCOMNT[CLXLINEX];
  CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U937(); /* ; replace comment rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    return;
  end


end // end KL0USG9

// add new comment record
Function KL0USGA()


  CLXREC.CLXCPROC = "CL0USGA"; /* set current proc name*/

  KL0US02(); /* ; get today's date time*/

  CLGREC.CLGCMSEQ = CLXREC.CLXLINEX;
  CLGREC.CLGCOMNT = KL0UM010.CLGCOMNT[CLXLINEX];
  CLGREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLGREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U936(); /* ; add new comment rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not unique*/
      set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        set KL0UM010.CLGCOMNT[CLXLINEX] cursor, modified, bold;
      end
    end
  end


end // end KL0USGA

// update CLLREC - act rtn rec
Function KL0USGB()


  CLXREC.CLXCPROC = "CL0USGB"; /* set current proc name*/

  set CLLREC empty;
  CLLREC.CLACLMNB = KL0UM010.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;

  KL0U854(); /* ; inquire on claim act rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    KL0USGC(); /* ; update claim act rtn rec*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      KL0USGE(); /* ; add claim act rtn rec*/
    end
  end


end // end KL0USGB

// select record for update
Function KL0USGC()
   /* ********************************************************/
   /* * maintenance log                                     **/
   /* * 9-29-93  BCourt  if date is blank, force to zero.   **/
   /* ********************************************************/

  CLXREC.CLXCPROC = "CL0USGC"; /* set current proc name*/

  if (KL0UM010.CL0UMICD == " ") /* 9/93 allow for blank date*/
    CLXREC.XXXWDTE = 0;
  else
    CLXREC.XXXFLDT = KL0UM010.CL0UMICD;
    CLXREC.XXXWMM = CLXREC.XXXFLMM;
    CLXREC.XXXWDD = CLXREC.XXXFLDD;
    CLXREC.XXXWYY = CLXREC.XXXFLYY;
    if (CLXREC.XXXWYMD == 0)
      CLXREC.XXXWCC = 0;
    else
      /* ------------------- y2k in begin ---------------*/
      if (CLXREC.XXXWYY < 60) /* Century windowing*/
        CLXREC.XXXWCC = 20;
      else
        CLXREC.XXXWCC = 19;
      end
      /* ------------------- y2k in end   ---------------*/
    end
  end

  if (CL2REC.CL2ISXDT == CLXREC.XXXWDTE) /* same inspect complete date*/
    return;
  else
    KL0U854(); /* ; inquire on record for update*/
    if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
      KL0USGD(); /* ; replace act rtn rec*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* ; record has been changed*/
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(18);
      end
    end
  end


end // end KL0USGC

// replace act rtn rec
Function KL0USGD()


  CLXREC.CLXCPROC = "CL0USGD"; /* set current proc name*/

  if (KL0UM010.CL0UMICD == " ") /* ; no insp complete date*/
    CLXREC.XXXWDTE = 0;
  else
    CLXREC.XXXFLDT = KL0UM010.CL0UMICD;
    CLXREC.XXXWMM = CLXREC.XXXFLMM;
    CLXREC.XXXWDD = CLXREC.XXXFLDD;
    CLXREC.XXXWYY = CLXREC.XXXFLYY;
    if (CLXREC.XXXWYMD == 0)
      CLXREC.XXXWCC = 0;
    else
      /* ------------------- y2k in begin ---------------*/
      if (CLXREC.XXXWYY < 60) /* Century windowing*/
        CLXREC.XXXWCC = 20;
      else
        CLXREC.XXXWCC = 19;
      end
      /* ------------------- y2k in end   ---------------*/
    end
  end

  KL0US02(); /* ; get today's date/time*/

  CL2REC.CL2ISXDT = CLXREC.XXXWDTE;
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U857(); /* ; replace record*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    return;
  end


end // end KL0USGD

// add act rtn rec
Function KL0USGE()


  CLXREC.CLXCPROC = "CL0USGE"; /* set current proc name*/

  if (KL0UM010.CL0UMICD == " ") /* ; no insp complete date*/
    CLXREC.XXXWDTE = 0;
  else
    CLXREC.XXXFLDT = KL0UM010.CL0UMICD;
    CLXREC.XXXWMM = CLXREC.XXXFLMM;
    CLXREC.XXXWDD = CLXREC.XXXFLDD;
    CLXREC.XXXWYY = CLXREC.XXXFLYY;
    if (CLXREC.XXXWYMD == 0)
      CLXREC.XXXWCC = 0;
    else
      /* ------------------- y2k in begin ---------------*/
      if (CLXREC.XXXWYY < 60) /* Century windowing*/
        CLXREC.XXXWCC = 20;
      else
        CLXREC.XXXWCC = 19;
      end
      /* ------------------- y2k in end   ---------------*/
    end
  end

  KL0US02(); /* ; get today's date/time*/

  CL2REC.CL2ISXDT = CLXREC.XXXWDTE;
  CLLREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLLREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U856(); /* ; add act rtn rec*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record is not unique*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18);
    end
  end


end // end KL0USGE

// update CLMREC - rts act hdr
Function KL0USGF()


  CLXREC.CLXCPROC = "CL0USGF"; /* set current proc name*/

  KL0USE5(); /* ; re-calc est val/ttl qty*/

  set CLMREC empty;
  CLMREC.CLACLMNB = KL0UM010.CLACLMNB;
  CLMREC.CLHSEQNB = KL0UM010.CLHSEQNB;

  KL0U914(); /* ; successful inquiry*/

  if (SQLCA.VAGen_SQLCODE == +0)
    KL0USGG(); /* ; select record for update*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      KL0USGK(); /* ; add rts act hdr*/
    end
  end


end // end KL0USGF

// select record for update
Function KL0USGG()


  CLXREC.CLXCPROC = "CL0USGG"; /* set current proc name*/

  if (KL0UM010.CLMRBGQ == CLMREC.CLMRBGQ
   && KL0UM010.CLMRBXQ == CLMREC.CLMRBXQ
   && KL0UM010.CLMRTGQ == CLMREC.CLMRTGQ
   && KL0UM010.CLMUNLQ == CLMREC.CLMUNLQ
   && CL0UW01.CLMRMHCG == CLMREC.CLMRMHCG
   && CL0UW01.CLMRSKCG == CLMREC.CLMRSKCG
   && CL0UW01.CL-CLCOM-FL == CLMREC.CLACMIND)
    return;
  end

  KL0U914(); /* ; perform update*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USGH();
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CLXREC.CLXERRF = "Y"; /* ; set map error flag*/
      converseLib.validationFailed(18); /* ; changes have been made*/
    end
  end


end // end KL0USGG

// replace rts act hdr rec
Function KL0USGH()


  CLXREC.CLXCPROC = "CL0USGH"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLMREC.CLMRBGQ = KL0UM010.CLMRBGQ;
  CLMREC.CLMRBXQ = KL0UM010.CLMRBXQ;
  CLMREC.CLMRTGQ = KL0UM010.CLMRTGQ;
  CLMREC.CLMUNLQ = KL0UM010.CLMUNLQ;
  CLMREC.CLMRSKCG = CL0UW01.CLMRSKCG;
  CLMREC.CLMRMHCG = CL0UW01.CLMRMHCG;
  CLMREC.CLACMIND = CL0UW01.CL-CLCOM-FL;
  CLMREC.CLMTOGL1 = "N";
  CLMREC.CLMTOGL2 = "N";
  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U917(); /* ; perform replace*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    return;
  end


end // end KL0USGH

// add rts act hdr rec
Function KL0USGK()


  CLXREC.CLXCPROC = "CL0USGK"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLMREC.CLMRBGQ = KL0UM010.CLMRBGQ;
  CLMREC.CLMRBXQ = KL0UM010.CLMRBXQ;
  CLMREC.CLMRTGQ = KL0UM010.CLMRTGQ;
  CLMREC.CLMUNLQ = KL0UM010.CLMUNLQ;

  CLMREC.CLMRSKCG = CL0UW01.CLMRSKCG;
  CLMREC.CLMRMHCG = CL0UW01.CLMRMHCG;
  CLMREC.CLACMIND = CL0UW01.CL-CLCOM-FL;

  CLMREC.CLMTOGL1 = "N";
  CLMREC.CLMTOGL2 = "N";

  CLMREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLMREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U916(); /* ; perform add*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful add*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not unique*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    end
  end


end // end KL0USGK

// update CLAREC - clm hdr rec
Function KL0USGL()


  CLXREC.CLXCPROC = "CL0USGL"; /* set current proc name*/

  KL0USEB(); /* ; re-calc est val/ttl qty*/

  set CLAREC empty;
  CLAREC.CLACLMNB = KL0UM010.CLACLMNB;

  KL0U924(); /* ; inquire on claim header*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful inquiry*/
    KL0USGM(); /* ; select record for update*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
    end
  end


end // end KL0USGL

// select record for update
Function KL0USGM()


  CLXREC.CLXCPROC = "CL0USGM"; /* set current proc name*/

  CL0UW01.CLAESTVL = CLAREC.CLAESTVL;
  CL0UW01.CLATQTY = CLAREC.CLATQTY;

  CL0UW01.CLAESTVL = CL0UW01.CLAESTVL - CL0UW01.CL0UWOEV + CL0UW01.CL0UWNEV;
  CL0UW01.CLATQTY = CL0UW01.CLATQTY - CL0UW01.CL0UWOTQ + CL0UW01.CL0UWNTQ;

  if (CLAREC.YCSCD1 == CL0UW01.YCSCD /* same claim status*/
   && CLAREC.YCSACTCD == CL0UW01.YCSACTCD
   && CLAREC.YCSRPTEX == CL0UW01.YCSRPTEX
   && CLAREC.CLASTTDT == CL0UW01.CLASTTDT
   && CLAREC.CLAESTVL == CL0UW01.CLAESTVL
   && CLAREC.CLATQTY == CL0UW01.CLATQTY
   /* cl0uw01.clacmind is used for comments on rts header*/
   && CLAREC.CLACMIND == CL0UW01.CL0UWCMT)
    return;
  end

  KL0U924(); /* ; inquire on claim header*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful update*/
    KL0USGN(); /* ; replace claim header*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* ; record not found*/
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
      CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
      CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(18);
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* ; database is busy*/
        CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV + CL0UW01.CL0UWNEV;
        CL0UW01.CL0UWSEV = CL0UW01.CL0UWSEV - CL0UW01.CL0UWOEV;
        CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ + CL0UW01.CL0UWNTQ;
        CL0UW01.CL0UWSTQ = CL0UW01.CL0UWSTQ - CL0UW01.CL0UWOTQ;
      end
    end
  end


end // end KL0USGM

// replace claim header
Function KL0USGN()


  CLXREC.CLXCPROC = "CL0USGN"; /* set current proc name*/

  KL0US02(); /* ; get today's date/time*/

  CLAREC.YCSCD1 = CL0UW01.YCSCD;
  CLAREC.YCSACTCD = CL0UW01.YCSACTCD;
  CLAREC.YCSRPTEX = CL0UW01.YCSRPTEX;
  CLAREC.CLASCGBY = COMMAREA.CAUSERID;
  CLAREC.CLASTTDT = CL0UW01.CLASTTDT;
  CLAREC.CLAESTVL = CL0UW01.CLAESTVL;
  CLAREC.CLATQTY = CL0UW01.CLATQTY;
    /* cl0uw01.clacmind is used to update comments on rts header*/
  CLAREC.CLACMIND = CL0UW01.CL0UWCMT;
  CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  KL0U927(); /* ; replace claim header*/

  if (SQLCA.VAGen_SQLCODE == +0) /* ; successful replace*/
    CL0UW01.CL0UWSEV = 0;
    CL0UW01.CL0UWSTQ = 0;
  end


end // end KL0USGN

//*** RECORD=CL0UW01 ****
// * Maintenance log:
// *  2-15-91 bcourt drop cl-tot-rtn-qty, cl-tot-rts-cr-qty
// *                      CLMTARQY        CLMTRCQY
// *                 since dropped from CLMREC in 7/88.
// *                 Use CL0UWTQT in place of CLMTARQY.
// *                 Rename CLLIBYID to XXXUSRID.
// *                 Rename CLNACTLQ to CLNRTSQ.
// ***********************
Record CL0UW01 type basicRecord
  5 CL0UW1GP CL0UW1GP ; 
    10 CL0UWUDF CL0UWUDF ; 
    10 CL0UWAAF CL0UWAAF ; 
    10 CL0UWACF CL0UWACF ; 
    10 CL0UWADF CL0UWADF ; 
    10 CL0UWF1F CL0UWF1F ; 
    10 CL0UWF2F CL0UWF2F ; 
    10 CL0UWMWF CL0UWMWF ; 
    10 CLJRSKFL CLJRSKFL ; 
    10 CLJNCRFL CLJNCRFL ; 
    10 CLLIDT CLLIDT ; 
    10 XXXUSRID XXXUSRID ; 
    10 XGPCD XGPCD ; 
    10 XWHCD XWHCD ; 
    10 CL0UWAKE CL0UWAKE ; 
      15 CL0UWBKE CL0UWBKE ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 * char(19) ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 XUMCD XUMCD ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 CL0UWAQT CL0UWAQT ; 
    10 CL0UWRQT CL0UWRQT ; 
    10 CL0UWSAY CL0UWSAY [40] ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SY5SZID SY5SZID ; 
      15 CLNRTSQ CLNRTSQ ; 
      15 CLNGRPRC CLNGRPRC ; 
      15 ZZZCHGCT ZZZCHGCT ; 
    10 CL0UWLPX CL0UWLPX ; 
    10 CL0UWPAX CL0UWPAX ; 
    10 CL0UWLSX CL0UWLSX ; 
    10 CL0UWSAX CL0UWSAX ; 
    10 CL0UWTVL CL0UWTVL ; 
    10 CL0UWTQT CL0UWTQT ; 
    10 CL0UWVAL CL0UWVAL ; 
    10 CL0UWPRC CL0UWPRC ; 
    10 CL0UWQTY CL0UWQTY ; 
    10 CL0UWVPF CL0UWVPF ; 
    10 CL0UWTAQ CL0UWTAQ ; 
    10 CL0UWTRQ CL0UWTRQ ; 
    10 CLMRSKCG CLMRSKCG ; 
    10 CLMRMHCG CLMRMHCG ; 
    10 CL-CLCOM-FL CL-CLCOM-FL ; 
    10 CL0UWCMT CL0UWCMT ; 
    10 YCSCD YCSCD ; 
    10 YCSACTCD YCSACTCD ; 
    10 YCSRPTEX YCSRPTEX ; 
    10 CLASTTDT CLASTTDT ; 
    10 CL0UWBGC CL0UWBGC ; 
    10 CL0UWBXC CL0UWBXC ; 
    10 CL0UWTRC CL0UWTRC ; 
    10 CL0UWULC CL0UWULC ; 
    10 CLMTNCRQ CLMTNCRQ ; 
    10 CLMTRTSQ CLMTRTSQ ; 
    10 CLMRMAMT CLMRMAMT ; 
    10 CLJTATHQ CLJTATHQ ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLATQTY CLATQTY ; 
    10 CL0UWOEV CL0UWOEV ; 
    10 CL0UWNEV CL0UWNEV ; 
    10 CL0UWSEV CL0UWSEV ; 
    10 CL0UWOTQ CL0UWOTQ ; 
    10 CL0UWNTQ CL0UWNTQ ; 
    10 CL0UWSTQ CL0UWSTQ ; 
    10 CL0UWYMD CL0UWYMD ; 
end // end CL0UW01

//*** RECORD=CL0UW02 ****
// * Maintenance Log:  ***************************************
// *  2-15-91 bcourt rename CLNACTLQ to CLNRTSQ.
// ***********************************************************
// ***********************
Record CL0UW02 type basicRecord
  5 CL0UW2GP CL0UW2GP ; 
    10 CL0UWPAY CL0UWPAY [600] ; 
      15 CL0UMSEL CL0UMSEL ; 
      15 CL0UWKEY CL0UWKEY ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 CL0UWVAL CL0UWVAL ; 
      15 CL0UWPRC CL0UWPRC ; 
      15 CL0UWVPF CL0UWVPF ; 
      15 CL0UWAQT CL0UWAQT ; 
      15 CL0UWRQT CL0UWRQT ; 
      15 XUMCD XUMCD ; 
      15 SY4SZSCL SY4SZSCL ; 
    10 CL0UWSAY CL0UWSAY [40] ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SY5SZID SY5SZID ; 
      15 CLNRTSQ CLNRTSQ ; 
      15 CLNGRPRC CLNGRPRC ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end CL0UW02

Record CL0UW03 type basicRecord
  5 CL0UW3GR CL0UW3GR ; 
    10 CL0UWSQL CL0UWSQL ; 
    10 CL0UWCNT CL0UWCNT ; 
    10 CLMTNCRQ CLMTNCRQ ; 
    10 CLMTRTSQ CLMTRTSQ ; 
    10 CL0UWAMT CL0UWAMT ; 
    10 CL0UWIN1 CL0UWIN1 ; 
    10 CL0UWIN2 CL0UWIN2 ; 
    10 CL0UWIN3 CL0UWIN3 ; 
end // end CL0UW03

Record CL0UW04 type basicRecord
  5 CL0UW4GR CL0UW4GR ; 
    10 CL0UWSQL CL0UWSQL ; 
    10 CL0UWSM1 CL0UWSM1 ; 
    10 CL0UWSM2 CL0UWSM2 ; 
    10 CL0UWSM3 CL0UWSM3 ; 
    10 CLMTRTSQ CLMTRTSQ ; 
    10 CL0UWIN1 CL0UWIN1 ; 
    10 CL0UWIN2 CL0UWIN2 ; 
    10 CL0UWIN3 CL0UWIN3 ; 
    10 CL0UWIN4 CL0UWIN4 ; 
end // end CL0UW04

//*** RECORD=CL0UW05 ****
// used to pass data between io1280
//  DATE    BY   WHY
// 081489 bcourt add CLAESTVL, used in CL0O to total sizes for
//               a product.
// ***********************
Record CL0UW05 type basicRecord
  10 CL0UWSQL CL0UWSQL ; 
  10 CL0UWCNT CL0UWCNT ; 
  10 CL0UWIN1 CL0UWIN1 ; 
  10 CLAESTVL CLAESTVL ; 
  10 CL0UWIN2 CL0UWIN2 ; 
end // end CL0UW05

// option
DataItem CL0UMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0UW1GP char(953)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0UW2GP char(29520)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0UW3GR char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0UW4GR char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allow adds flag
DataItem CL0UWAAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allow changes flag
DataItem CL0UWACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// allow deletes flag
DataItem CL0UWADF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array key - a
DataItem CL0UWAKE char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-rts-mrch-amt
DataItem CL0UWAMT decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// authorized qty
DataItem CL0UWAQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rebagging charge
DataItem CL0UWBGC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array key - b
DataItem CL0UWBKE char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reboxxing charge
DataItem CL0UWBXC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment ind for update clarec
DataItem CL0UWCMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem CL0UWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// file 1 flag
DataItem CL0UWF1F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// file 2 flag
DataItem CL0UWF2F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator 1
DataItem CL0UWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 2
DataItem CL0UWIN2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 3
DataItem CL0UWIN3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator 4
DataItem CL0UWIN4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array key
DataItem CL0UWKEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last prod array index
DataItem CL0UWLPX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size array index
DataItem CL0UWLSX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map warning flag
DataItem CL0UWMWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new cl-est-clm-val
DataItem CL0UWNEV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new cl-tot-clm-qty
DataItem CL0UWNTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old cl-est-clm-val
DataItem CL0UWOEV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old cl-tot-clm-qty
DataItem CL0UWOTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod array index
DataItem CL0UWPAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product array
DataItem CL0UWPAY char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price
DataItem CL0UWPRC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty
DataItem CL0UWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// returned qty
DataItem CL0UWRQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size array index
DataItem CL0UWSAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size array
DataItem CL0UWSAY char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save cl-est-clm-val
DataItem CL0UWSEV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summed value 1
DataItem CL0UWSM1 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summed value 2
DataItem CL0UWSM2 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summed value 3
DataItem CL0UWSM3 decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql option
DataItem CL0UWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save cl-tot-clm-qty
DataItem CL0UWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total auth rtn qty
DataItem CL0UWTAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty
DataItem CL0UWTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tag removoal charge
DataItem CL0UWTRC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total act rtn qty
DataItem CL0UWTRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total value
DataItem CL0UWTVL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// updates allowed flag
DataItem CL0UWUDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unlacing charge
DataItem CL0UWULC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// value
DataItem CL0UWVAL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variable price flag
DataItem CL0UWVPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date yymmdd
DataItem CL0UWYMD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

