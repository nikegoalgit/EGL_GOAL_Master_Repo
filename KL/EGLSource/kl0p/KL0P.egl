package kl0p;

import corpcom1.CLAREC;
import corpcom1.CLJREC;
import corpcom1.CLJRSKFL;
import corpcom1.CLWREC;
import corpcom1.CLXREC;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XAUTBL;
import corpx1.XGPTBL;
import corpy2.YATTBL;
import corpy2.YCRTBL;
import corpy2.YCSTBL;
import corpy2.YCTTBL;
import corpy2.YCXTBL;
import corpy2.YRMTBL;
import ku.common.KUCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL0P ****
// ************************************************************
// *     m a i n t e n a n c e    h i s t o r y    l o g      *
// ************************************************************
// *
// * date    pgmr   description                               *
// *--------------------------------------------------------- *
// *2/20/89  jwood  added noncsp option to calls              *
// *2/20/89  jwood  added xssegtr logic                       *
// *5/16/89  gdekce DB2 structure changes: clarec, kucrec.    *
// *9-22-89  bcourt remove 5-16 ref to unused tables: X CT,   *
// *                X WH; & recs: SY C, SY 2, CL I.           *
// *10-20-89 chellm addes ycxtbl and xsclsex to 130 to default*
// *                the RA expiration date. See CL502.        *
// *01-22-90 gdecke holiday walking edits in cl0p120. #cl792  *
// *6/10/91  twatso DB2 structure changes: kucrec: regen only *
// *08-08-91 wjohns Renamed application and commarea          *
// *                  referrences to renamed claims appls.    *
// *10-11-91 bcourt changed cl0p000 to kl0p000.
// *10-25-91 sgorga Regarding yrmrestk - see comments, KL0P101.
// *01-13-92 sgorga Set ta1rec, ta2rec empty.  kl0p001
// *05-05-93 BCOURT Add menu option 19,like 09.
// *11-30-93 jcarey Changed map for relabeling upc and added  *
// *                code to process the relabeling upc flag.  *
// *                para: kl0p120,130,101,105,116 and 112.
// *11-11-97 rchauv add subscript EZETEST to 'expand codes '  *
// *                section of KL0P104, since reason code conv*
// *                ,subcript must be specified and cannot    *
// *                be allowed to default to one, problem     *
// *                caused KL0P101 to abend becasue subscript *
// *                CLXYCRX is loaded from EZETEST  subscript *
// *                which was never set right in KL0P104.     *
// ************************************************************
// *********************
Program KL0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0PW01 CL0PW01; // record
  CLAREC CLAREC; // record
  CLJREC CLJREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use KL0PM.KL0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0P000: KL0P000();
    exit program;
    KL0P001: KL0P001();
    KL0P050: KL0P050();
    KL0P100: KL0P100();
    KL0P110: KL0P110();
    KL0P120: KL0P120();
    KL0P130: KL0P130();
  end // end main
end // end KL0P

// main flow
Function KL0P000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P000";
  COMMAREA.CACURRAP = "KL0P";
  ;
  KL0P001(); /* initilize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0P050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0P000

// init claims menu processing
Function KL0P001()
   /* ********************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec, ta2rec empty.*/
   /* ********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set TA1REC empty;
  set TA2REC empty;
   /* TEMP001;*/
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry check*/
  ;
  ;
  set CLXREC empty; /* clear common working storage*/
  ;
  ;
  ;
  CLXREC.CLXSNAME[1] = "KL0PM001"; /* init screens used in this appl*/
  CLXREC.CLXCSCRN = "KL0PM001";
  ;
end // end KL0P001

// decide which map to show
Function KL0P050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0); /* clear error nbr*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0pm001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0P100(); /* inquiry selects*/
    end
  else
    TA1REC.TA1MAP = CLXREC.CLXCSCRN;
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
    XPCL010(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050...*/
       /* else*/
         /* the perform will auto return to cl0%000.*/
  ;
end // end KL0P050

// map inquiry selections
Function KL0P100()
   /* ************************************************************/
   /* *    process screen cl0%m001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P100";
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0P101();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
   /* ***********************************************************/
  converse KL0PM001 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0P116(); /* set fields modified*/
  ;
  ;
  KL0P110(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  KL0P112(); /* set edit flag*/
  ;
  if (CLXREC.CLXEDITF == "Y")
    KL0P120(); /* edit entries*/
  end
  ;
  KL0P113(); /* set update flag*/
  ;
  if (CLXREC.CLXUPDTF == "Y")
    KL0P130(); /* process entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0P111(); /* handle enter key*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0P100

// build screen
Function KL0P101()
   /* *************************************************************/
   /* build screen                                              **/
   /* **/
   /* MAINTENANCE                                               **/
   /* **/
   /* 10-25-91  sgorga  Deleted line of code that prevented     **/
   /* cljrec.yrmrestk (restock %) from being moved to the **/
   /* map (kl0pm001.yrmrestk) if cljrec.yrmrestk = 0.     **/
   /* If an RA hdr record exists, the map needs to show   **/
   /* the % from the database (cljrec), even if it's 0.   **/
   /* 5-05-93  BCOURT  Add menu option 19, like 09.            **/
   /* 11-30-93  jcarey  Added code to move relabeling upc       **/
   /* charge to the map and set the default   **/
   /* for the upc relabeling flag to yes.     **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P101";
  ;
  set KL0PM001 initial;
  KL0PM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
  KL0P104(); /* move header information to screen*/
  ;
  if (CLAREC.XGPCD in YRMTBL.XGPCD)
     /* restocking pct may be overridden by cljrec value*/
    YRMTBL.YRMRESTK[sysVar.arrayIndex] = YRMTBL.YRMRESTK[sysVar.arrayIndex]; /* %% test %%%*/
    KL0PM001.YRMRESTK = YRMTBL.YRMRESTK[sysVar.arrayIndex];
    KL0PM001.YRMTAGRM = YRMTBL.YRMTAGRM[sysVar.arrayIndex];
    KL0PM001.YRMUNLCE = YRMTBL.YRMUNLCE[sysVar.arrayIndex];
    KL0PM001.YRMREBOX = YRMTBL.YRMREBOX[sysVar.arrayIndex];
    KL0PM001.YRMREBAG = YRMTBL.YRMREBAG[sysVar.arrayIndex];
    KL0PM001.YRM-REUPC-CHG = YRMTBL.YRM-REUPC-CHG[sysVar.arrayIndex];
  end
  ;
  ;
  set SQLCA empty;
  set CLJREC empty;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* r/a hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(4); /* database busy*/
      return;
    else
      TA1REC.TA1LOCAT[2] = "IO1270";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      XPCL010();
    end
  end
  ;
  ;
  CL0PW01.CL0PWJFL = "N"; /* init cljrec exists flag*/
  if (SQLCA.VAGen_SQLCODE == 100) /* no r/a hdr exists*/
    KL0P102(); /* find defaults for restocking flag*/
    KL0PM001.CLJRTGFL = "Y";
    KL0PM001.CLJUNLFL = "Y";
    KL0PM001.CLJRBXFL = "Y";
    KL0PM001.CLJRBGFL = "Y";
    KL0PM001.CL-UPC-LABL-FL = "Y";
  else /* r/a hdr exists*/
    CL0PW01.CL0PWJFL = "Y"; /* cljrec does exist*/
    KL0PM001.CLJTATHQ = CLAREC.CLATQTY;
    ;
    if (CLJREC.CLJRSKFL == " ")
      KL0P102(); /* find defaults for restocking flag*/
    else
      KL0PM001.CLJRSKFL = CLJREC.CLJRSKFL;
       /* may need to set field protected if stored as 'n' and*/
       /* was set to 'n' originally by default logic in cl0p102*/
      if (CLJREC.CLJRSKFL == "N")
        if (KUCREC.XAUCD in XAUTBL.XAUCD
         && XAUTBL.XXXSTAT == "A"
         && XAUTBL.XATCD[sysVar.arrayIndex] != "02")
          if (YCRTBL.YCRSPARN[CLXYCRX] == "Y") /* special arrangement*/
             /* next sentence - allow entry*/
          else
            set KL0PM001.CLJRSKFL skip;
          end
        end
      end
    end
    ;
    KL0PM001.YRMRESTK = CLJREC.YRMRESTK; /* use cljrec field for map*/
    ;
    if (CLJREC.CLJRTGFL == " ") /* if no value in database*/
      KL0PM001.CLJRTGFL = "Y"; /* move in default value*/
    else
      KL0PM001.CLJRTGFL = CLJREC.CLJRTGFL;
    end
    ;
    if (CLJREC.CLJUNLFL == " ")
      KL0PM001.CLJUNLFL = "Y";
    else
      KL0PM001.CLJUNLFL = CLJREC.CLJUNLFL;
    end
    ;
    if (CLJREC.CLJRBXFL == " ")
      KL0PM001.CLJRBXFL = "Y";
    else
      KL0PM001.CLJRBXFL = CLJREC.CLJRBXFL;
    end
    ;
    if (CLJREC.CLJRBGFL == " ")
      KL0PM001.CLJRBGFL = "Y";
    else
      KL0PM001.CLJRBGFL = CLJREC.CLJRBGFL;
    end
    ;
    if (CLJREC.CL-UPC-LABL-FL == " ")
      KL0PM001.CL-UPC-LABL-FL = "Y";
    else
      KL0PM001.CL-UPC-LABL-FL = CLJREC.CL-UPC-LABL-FL;
    end
  end
  ;
  ;
  ;
  if (CLAREC.CLASETDT < 19900309) /* default holiday walking claims to*/
    if (CLAREC.SP1ID == "AST1" /* restock percent of zero*/
     || CLAREC.SP1ID == "AST2" 
     || CLAREC.SP1ID == "AST3")
         /* OR CLAREC.SP1ID EQ 'TEST';*/
         /* OR CLAREC.SP1ID EQ 'WTPA';*/
         /* OR CLAREC.SP1ID EQ 'WA89';*/
      KL0PM001.YRMRESTK = 0;
      KL0PM001.CLJRSKFL = "N";
      set KL0PM001.YRMRESTK modified;
      set KL0PM001.CLJRSKFL modified;
    end
  end
  ;
  if (CLWREC.CLWACTIV == "I")
    KL0P105(); /* inquiry mode - protect all screen fields*/
  else
    if (CLWREC.CLWMNOPT == 7  
     || CLWREC.CLWMNOPT == 8  
     || CLWREC.CLWMNOPT == 9  
     || CLWREC.CLWMNOPT == 17 /* 5-5-93*/
     || CLWREC.CLWMNOPT == 19) /* 5-5-93*/
      KL0P105(); /* inquiry mode - protect all screen fields*/
    else
      if (CLAREC.YCSCD1 in YCSTBL.YCSCD
       && YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
        KL0P105(); /* inquiry mode - protect screen fields*/
      else
        if (CLAREC.CLAWSENF == "Y") /* worksheet entered claim*/
          KL0P105(); /* inquiry mode - protect screen fields*/
          converseLib.validationFailed(536); /* w/s entered claim - no update*/
        else
          if (COMMAREA.CAALVL[1] == "Y"
           || COMMAREA.CAALVL[3] == "Y")
          end
        end
      end
    end
  end
  ;
end // end KL0P101

// find defaults for restock flag
Function KL0P102()
   /* *******************************************/
   /* find defaults for restocking  flag*/
   /* *******************************************/
  ;
  CLXREC.CLXCPROC = "CL0P102";
  ;
  ;
     /* ****************************************************/
     /* use company account type code to find restocking flag*/
     /* ****************************************************/
  ;
  KL0PM001.CLJRSKFL = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT == "A")
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "02") /* inside account(foreign,stk xfer)*/
      KL0PM001.CLJRSKFL = "N";
      if (YCRTBL.YCRSPARN[CLXYCRX] == "Y") /* special arrangement*/
         /* next sentence - allow to override*/
      else
        set KL0PM001.CLJRSKFL skip;
      end
      return; /* found 'n' value*/
    end
  end
  ;
  ;
    /* ********************************************/
    /* if haven't found 'n' for restocking flag,*/
    /* continue the search*/
    /* ********************************************/
  ;
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0PM001.CLJRSKFL = YCRTBL.CLJRSKFL[sysVar.arrayIndex];
  end
  ;
  ;
end // end KL0P102

// move header info to screen
Function KL0P104()
   /* **************************************/
   /* move header information to screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0P104";
  ;
  ;
  KL0PM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0PM001.KUCCOID = CLAREC.KUCCOID;
  KL0PM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0PM001.XNXCD = CLAREC.XNXCD;
  KL0PM001.KUCCONM = CLWREC.KUCCONM; /* 12/88*/
  KL0PM001.XGPCD = CLAREC.XGPCD;
  KL0PM001.YCTCD = CLAREC.YCTCD;
  KL0PM001.YCRCD = CLAREC.YCRCD;
  KL0PM001.CLACTCNM = CLAREC.CLACTCNM;
  KL0PM001.CLAESTVL = CLAREC.CLAESTVL;
  KL0PM001.CLATQTY = CLAREC.CLATQTY;
  ;
  ;
       /* expand codes*/
  ;
   /* 11/11/97  rchauv  add (EZETST) subscript to*/
                        /* XGPTBL.XXXSTAT*/
                        /* YCTTBL.XXXSTAT*/
                                  /* references below ; due to reason code*/
                                   /* conversion*/
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* if in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0PM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* if in table*/
   && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0PM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD /* if in table*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    CLXREC.CLXYCRX = sysVar.arrayIndex;
    KL0PM001.YCRSDESC = YCRTBL.YCRSDESC[CLXYCRX];
  end
  ;
  ;
  ;
     /* **************************************************/
     /* read customer company vcmpny01,*/
     /* to get xau_acct_cls-cd, read account type table*/
     /* to get account type code. if not '02' value we  have*/
     /* internal account and don't charge for restocking*/
     /* **************************************************/
  ;
  ;
  ;
  set SQLCA empty;
  set KUCREC empty;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* MOVE KUCREC.KUCCONM TO CL0PM001.KUCCONM; get from clwrec*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.XAUCD = " "; /* no company = no acct class*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
     /* ****************************************************/
     /* find company account type code,*/
     /* ****************************************************/
  ;
  CL0PW01.CLJRSKFL = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT == "A")
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "02")
      CL0PW01.CLJRSKFL = "N";
    end
  end
  ;
  ;
end // end KL0P104

// protect all screen fields
Function KL0P105()
   /* **********************************************************/
   /* protect all screen fields*/
  ;
   /* Maintenance*/
   /* 11-30-93 jcarey  Added code to protect upc relabeling*/
   /* flag.*/
   /* *********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P105";
  ;
  ;
  set KL0PM001.CLJRSKFL skip;
  set KL0PM001.YRMRESTK skip;
  set KL0PM001.CLJRTGFL skip;
  set KL0PM001.CLJUNLFL skip;
  set KL0PM001.CLJRBXFL skip;
  set KL0PM001.CLJRBGFL skip;
  set KL0PM001.CL-UPC-LABL-FL skip;
  ;
  ;
  ;
end // end KL0P105

// edit pfkeys
Function KL0P110()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0P110";
  ;
  if (KL0PM001.CATOAP != " " /* if any fastpath data entered*/
   || KL0PM001.CAITEM != " ")
    COMMAREA.CATOAP = KL0PM001.CATOAP;
    COMMAREA.CAITEM = KL0PM001.CAITEM;
     /* edit or act on fastpath*/
    XPCL002();
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
          CLXREC.CLXERRF = "Y";
          return;
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
              if (CLAREC.YCTCD in YCTTBL.YCTCD)
                if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
                  COMMAREA.CATOAP = "KL0K"; /* xfer to*/
                  XPCL002();
                else
                  COMMAREA.CATOAP = "KL0J"; /* xfer to*/
                  XPCL002();
                end
              else
                converseLib.validationFailed(232);
                CLXREC.CLXERRF = "Y";
              end
            else
              if (converseVar.eventKey is pf18) /* pf18 - pass to 'Kl0g'*/
                CLWREC.CLWMCMNT = "N";
                COMMAREA.CATOAP = "KL0G"; /* xfer to*/
                XPCL002();
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                CLXREC.CLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end KL0P110

// handle enter key
Function KL0P111()
   /* **************************************/
   /* handle enter key*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0P111";
  ;
  if (converseVar.eventKey is enter)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0Q"; /* return author. print*/
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
  end
  ;
  if (converseVar.eventKey is pf6)
    if (KL0PM001.YCTCD in YCTTBL.YCTCD)
      if (KL0PM001.YCTCD == "NIL") /* if international*/
        COMMAREA.CATOAP = "KL0X"; /* go to intl def insp*/
      else
        if (YCTTBL.YCTDEF[sysVar.arrayIndex] == "Y" /* if defective*/
         || YCTTBL.YCTCDRF[sysVar.arrayIndex] == "Y") /* or consumer defective*/
          COMMAREA.CATOAP = "KL0Y"; /* go to regular def insp*/
        else
          COMMAREA.CATOAP = "KL0Z"; /* go to return insp*/
        end
      end
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
    if (CLAREC.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
        COMMAREA.CATOAP = "KL0K"; /* xfer to*/
        XPCL002();
      else
        COMMAREA.CATOAP = "KL0J"; /* xfer to*/
        XPCL002();
      end
    else
      converseLib.validationFailed(232);
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0O";
    XPCL002();
  end
  ;
  if (converseVar.eventKey is pf18) /* pf18 - pass to 'kl0g'*/
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G"; /* xfer to*/
    XPCL002();
  end
end // end KL0P111

// test if fields modified
Function KL0P112()
   /* ****************************************************************/
   /* test if fields are modified to set edit flag*/
  ;
   /* Maintenance*/
   /* 11-30-93 jcarey  Added code to set edit flag to yes if the*/
   /* upc relabeling flag is modified.*/
   /* ****************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P112";
  ;
  ;
  CLXREC.CLXEDITF = "N";
  ;
  if (CLXREC.CLXERRF == "Y") /* if there were errors*/
    return;
  end
  ;
  if (KL0PM001.CLJRBGFL is modified
   || KL0PM001.CLJRBXFL is modified
   || KL0PM001.CLJUNLFL is modified
   || KL0PM001.CLJRTGFL is modified
   || KL0PM001.YRMRESTK is modified
   || KL0PM001.CLJRSKFL is modified
   || KL0PM001.CL-UPC-LABL-FL is modified)
    CLXREC.CLXEDITF = "Y";
  end
  ;
end // end KL0P112

// set update flag
Function KL0P113()
   /* **************************************/
   /* set do updates flag*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0P113";
  ;
  ;
  CLXREC.CLXUPDTF = "N";
  ;
  ;
  if (CLWREC.CLWACTIV == "I") /* if inquiring*/
    return;
  end
  ;
  if (CLXREC.CLXEDITF == "Y" /* if we did edits*/
   && CLXREC.CLXERRF == "N") /* and there were no errors*/
    CLXREC.CLXUPDTF = "Y"; /* do updates*/
  end
end // end KL0P113

// set fields modified
Function KL0P116()
   /* **************************************************************/
   /* set fields modified for next converse*/
  ;
   /* Maintenance*/
   /* 11-30-93 jcarey  Added code to set a modified upc relabeling*/
   /* flag to modified for next converse.*/
   /* **************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P116";
  ;
  if (KL0PM001.CLJRSKFL is modified)
    set KL0PM001.CLJRSKFL modified;
  end
  ;
  if (KL0PM001.YRMRESTK is modified)
    set KL0PM001.YRMRESTK modified;
  end
  ;
  if (KL0PM001.CLJRSKFL is modified)
    set KL0PM001.CLJRSKFL modified;
  end
  ;
  if (KL0PM001.CLJRTGFL is modified)
    set KL0PM001.CLJRTGFL modified;
  end
  ;
  if (KL0PM001.CLJUNLFL is modified)
    set KL0PM001.CLJUNLFL modified;
  end
  ;
  if (KL0PM001.CLJRBXFL is modified)
    set KL0PM001.CLJRBXFL modified;
  end
  ;
  if (KL0PM001.CLJRBGFL is modified)
    set KL0PM001.CLJRBGFL modified;
  end
  ;
  if (KL0PM001.CL-UPC-LABL-FL is modified)
    set KL0PM001.CL-UPC-LABL-FL modified;
  end
end // end KL0P116

// edit entries
Function KL0P120()
   /* *******************************************************/
   /* edit entries*/
   /*  */
   /* 11-30-93 jcarey added code to verify that relabeling*/
   /* upc is y or n.*/
   /* *******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P120";
  ;
  ;
  ;
  if (KL0PM001.CLJRBGFL == "Y"
   || KL0PM001.CLJRBGFL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CLJRBGFL cursor, modified, bold;
  end
  ;
  if (KL0PM001.CLJRBXFL == "Y"
   || KL0PM001.CLJRBXFL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CLJRBXFL cursor, modified, bold;
  end
  ;
  if (KL0PM001.CLJUNLFL == "Y"
   || KL0PM001.CLJUNLFL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CLJUNLFL cursor, modified, bold;
  end
  ;
  if (KL0PM001.CLJRTGFL == "Y"
   || KL0PM001.CLJRTGFL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CLJRTGFL cursor, modified, bold;
  end
  ;
  if (KL0PM001.CL-UPC-LABL-FL == "Y"
   || KL0PM001.CL-UPC-LABL-FL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CL-UPC-LABL-FL cursor, modified, bold;
  end
  ;
  if (KL0PM001.YRMRESTK < 1) /* entered percentage*/
    KL0PM001.YRMRESTK = KL0PM001.YRMRESTK * 100;
  end
  ;
  if (KL0PM001.YRMRESTK <= 100
   && KL0PM001.YRMRESTK >= 0)
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(302); /* restocking percent must be between 0 an 100*/
    set KL0PM001.YRMRESTK cursor, modified, bold;
  end
  ;
  if (KL0PM001.CLJRSKFL == "Y"
   || KL0PM001.CLJRSKFL == "N")
     /* next sentence*/
  else
    CLXREC.CLXERRF = "Y";
    KL0PM001.XXXERRID = "KL0P120";
    converseLib.validationFailed(367); /* enter 'y' or 'n'*/
    set KL0PM001.CLJRSKFL cursor, modified, bold;
  end
  ;
  if (CLAREC.CLASETDT < 19900309)
    if (CLAREC.SP1ID == "AST1"
     || CLAREC.SP1ID == "AST2"
     || CLAREC.SP1ID == "AST3")
         /* OR CLAREC.SP1ID EQ 'TEST';*/
         /* OR CLAREC.SP1ID EQ 'WTPA';*/
         /* OR CLAREC.SP1ID EQ 'WA89';*/
      if (KL0PM001.CLJRSKFL == "Y"
       || KL0PM001.YRMRESTK != 0)
        CLXREC.CLXERRF = "Y";
        KL0PM001.XXXERRID = "KL0P120";
        converseLib.validationFailed(607); /* holiday walking not have restk chg*/
        set KL0PM001.CLJRSKFL cursor, modified, bold;
      end
    end
    if (CLAREC.YCTCD != "RTS"
     && CLAREC.YCTCD != "DEF")
      CLXREC.CLXERRF = "Y";
      KL0PM001.XXXERRID = "KL0P120";
      converseLib.validationFailed(606); /* holiday walking must be rts or def*/
      set KL0PM001.CLJRSKFL cursor, modified, bold;
    end
  end
  ;
end // end KL0P120

// process screen
Function KL0P130()
   /* **********************************************************/
                      /* Process Screen*/
   /* **********************************************************/
  ;
   /* Maintenance History:*/
  ;
   /* CL502 CHELLM 10-20-89 added XSCLSEX to default the RA*/
   /* expiration date to today+45.*/
   /* JCAREY 11-30-93 added code to move map relabeling*/
   /* upc flag to cljrec.*/
   /* **********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0P130";
  ;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN CL0P001";
    XPCL010(); /* abend*/
  end
  ;
  ;
  if (CL0PW01.CL0PWJFL == "Y") /* ra hdr exists*/
    set CLJREC empty;
    CLJREC.CLACLMNB = KL0PM001.CLACLMNB;
    call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* r/a hdr*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(4); /* database busy*/
      else
        TA1REC.TA1LOCAT[2] = "IO1270";
        TA1REC.TA1LOCAT[2] = "SEL RECD ";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010();
      end
    end
    ;
    ;
    CLJREC.CLJRSKFL = KL0PM001.CLJRSKFL;
    /* CLJREC.YRMRESTK = CL0PM001.YRMRESTK / 100; convert to pct*/
    CLJREC.YRMRESTK = KL0PM001.YRMRESTK;
    if (CLAREC.CLASETDT < 19900309)
      if (CLAREC.SP1ID == "AST1"
       || CLAREC.SP1ID == "AST2"
       || CLAREC.SP1ID == "AST3")
             /* OR CLAREC.SP1ID EQ 'TEST';*/
             /* OR CLAREC.SP1ID EQ 'WTPA';*/
             /* OR CLAREC.SP1ID EQ 'WA89';*/
        CLJREC.YRMRESTK = 0;
        CLJREC.CLJRSKFL = "N";
      end
    end
    CLJREC.CLJRBGFL = KL0PM001.CLJRBGFL;
    CLJREC.CLJRBXFL = KL0PM001.CLJRBXFL;
    CLJREC.CLJRTGFL = KL0PM001.CLJRTGFL;
    CLJREC.CLJUNLFL = KL0PM001.CLJUNLFL;
    CLJREC.CL-UPC-LABL-FL = KL0PM001.CL-UPC-LABL-FL;
    CLJREC.ZZZCHGDT = CLXREC.XXXCDTE;
    CLJREC.ZZZCHGTM = CLXREC.XXXCHHMM;
    ;
     /* update r/a hdr record*/
    ;
    call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* r/a hdr*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(4); /* database is busy*/
        return;
      else
        TA1REC.TA1LOCAT[2] = "IO1270";
        TA1REC.TA1LOCAT[2] = "UPD RECD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010();
      end
    end
    ;
  else /* no r/a hdr exists*/
    CLJREC.CLACLMNB = KL0PM001.CLACLMNB;
    CLJREC.XXXUSRID = COMMAREA.CAUSERID;
    CLJREC.XSOCD = CLAREC.XSOCD;
    CLJREC.CLJPRTLB = "N";
    CLJREC.CLJLBRQT = 0;
    CLJREC.CLJNBLB = 0;
    CLJREC.CLJLBTOT = 0;
    CLJREC.CLJPRTRA = "N";
    CLJREC.CLJRARQT = 0;
    CLJREC.CLJRAIDT = 0;
                                    /* (10-20-89)*/
    XSCLSEX(); /* default the RA expiration date*/
    CLJREC.CLJORAXD = 0;
    CLJREC.CLJFRDBF = "N";
    CLJREC.CLJFRCRF = "N";
    CLJREC.CLJNCRFL = " ";
    CLJREC.XWHCD = CLAREC.XWHCD;
    CLJREC.CLJTATHQ = 0;
    CLJREC.CLJRDIND = "R";
    CLJREC.XDACD = " ";
    CLJREC.CLJRAIND = "N";
    ;
    CLJREC.CLJRSKFL = KL0PM001.CLJRSKFL;
    /* CLJREC.YRMRESTK = CL0PM001.YRMRESTK / 100; convert to pct*/
    CLJREC.YRMRESTK = KL0PM001.YRMRESTK;
    if (CLAREC.CLASETDT < 19900309)
      if (CLAREC.SP1ID == "AST1"
       || CLAREC.SP1ID == "AST2"
       || CLAREC.SP1ID == "AST3")
             /* OR CLAREC.SP1ID EQ 'TEST';*/
             /* OR CLAREC.SP1ID EQ 'WTPA';*/
             /* OR CLAREC.SP1ID EQ 'WA89';*/
        CLJREC.YRMRESTK = 0;
        CLJREC.CLJRSKFL = "N";
      end
    end
    CLJREC.CLJRBGFL = KL0PM001.CLJRBGFL;
    CLJREC.CLJRBXFL = KL0PM001.CLJRBXFL;
    CLJREC.CLJRTGFL = KL0PM001.CLJRTGFL;
    CLJREC.CLJUNLFL = KL0PM001.CLJUNLFL;
    CLJREC.CL-UPC-LABL-FL = KL0PM001.CL-UPC-LABL-FL;
    CLJREC.ZZZCHGDT = CLXREC.XXXCDTE;
    CLJREC.ZZZCHGTM = CLXREC.XXXCHHMM;
    ;
    call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* add r/a hdr*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(4); /* database is busy*/
        return;
      else
        TA1REC.TA1LOCAT[2] = "IO1270";
        TA1REC.TA1LOCAT[2] = "ADD RECD";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAHDR01";
        XPCL010();
      end
    end
  end
end // end KL0P130

Record CL0PW01 type basicRecord
  10 CL0PWJFL CL0PWJFL ; 
  10 CLJRSKFL CLJRSKFL ; 
end // end CL0PW01

// y/n cljrec exists flag
DataItem CL0PWJFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

