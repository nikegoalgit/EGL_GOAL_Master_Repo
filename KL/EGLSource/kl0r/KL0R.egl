package kl0r;

import corpcom1.*;
import corpcom2.XX0XW01;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XBK-BK-SESN-CD;
import corpx1.XCOCD;
import corpx1.XDATBL;
import corpx1.XDMCD;
import corpx1.XEGCD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XOTTBL;
import corpx1.XQATBL;
import corpx1.XUMTBL;
import corpx2.XPYCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpy2.YATTBL;
import corpy2.YCECD;
import corpy2.YCRTBL;
import corpy2.YCSTBL;
import corpy2.YCTTBL;
import corpy2.YCXTBL;
import corpy2.YDSTBL;
import corpy2.YITTBL;
import corpz3.ZZZCHGCT;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV3LNSQ;
import iv.common.IV3REC;
import iv.common.IVANBLFL;
import iv.common.IVAREC;
import iv.common.IVEREC;
import ku.common.KUCREC;
import ku.common.KUIPRDID;
import ku.common.KUJREC;
import ku.common.KUNREC;
import ku.common.KUTREC;
import op.common.OP-BK-MO;
import op.common.OP-BK-YR;
import op.common.OP2LNINB;
import sp.common.SP5REC;
import sp.common.SP5SZPR;
import sy.common.SY1STNBR;
import sy.common.SY2CEDT1;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY5REC;
import sy.common.SY6REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCUCPX01;
import ww.common.WCU1710;
//*** PROGRAM=KL0R ****
// KL0R - Claims Defective Return Authorization
// 
//    Purpose:
// 
//       Display all defective products authorized for return
//    to Nike.  If none are currently authorized, allow the
//    user to enter the total quantity authorized, or to enter
//    Product(s) to be authorized for return to Nike.
// 
//       After actual returns have been recorded by Special
//    Services, then display the authorized data and the actual
//    return data.
// 
//       Program CL0R is very similar to application CL0O and
//    CL0L; Quantities and Prices are calculated the same way.
// 
// ************************************************************
// 
// *    m a i n t e n a n c e    h i s t o r y    l o g       *
// ************************************************************
// * date    prmr    description                              *
// *----------------------------------------------------------*
// *2/20/89  jwood   added noncsp option to calls             *
// *2/20/89  jwood   added xssegtr logic                      *
// *4-09-89  bcourt  drop code in CL0R010 to force inquiry mode
// *                 when claim has a memo. (see specs chng 'b'
// *5-16-89  gdecke  DB2 structure changes: clarec, kucrec,   *
// *                 sycrec.                                  *
// *8-01-89  gdecke  DB2 structure changes: clarec, clprec,   *
// *                 cl2rec, ivarec.                          *
// *9-14-89  gdecke  io1330 changed to use xum, xqa.          *
// *9-22-89  bcourt  remove 5-16 ref to unused tables: X CT,  *
// *                 X WH; & recs: CL I, SY 2.                *
// 01-19-90  bcourt  DB2 structure changes: ivarec, kucrec:   *
//                   regen only.                              *
// 01-22-90  gdecke  #cl792 holiday walking restock defaults. *
// 04-06-90  chellm  DB2 structure changes (Brand, IVOVR, etc.)
// 04-10-90  chellm  add XUM and XQA to the product key when
//                   selecting Invoice Price Overrides CL6REC.
// 05-31-90  chellm  Added edit for Product Brand - Claim
//                   Brand mis-match.
// 06-06-90  chellm  modified product brand - claim brand edit
//                   to use product xdv - claim xottbl xdv.
//                   Added XOTTBL to this application.
// 08-03-90  gdekce  change maximum number of products in
//                   cl0rw02 table to 500.
// 10-04-90  CHELLM  Added quality and unit of measure codes
//                   as enterable fields.
// 12-27-90  gdecke  #cl972 - handle closeout pricing override
//                   for defectives with no invoice.
//  2-16-91  bcourt  Remove CL2 rec, not used. (VRINSP01).
// 02-19-91  chellm  Allowed for entry of products on DEF ISP
//                   claims when the invoice used is not a
//                   current IBM invoice type (YIT).  This will
//                   allow a go around to the CL0E edit that
//                   requires an invoice on all ISP claims.
// 03-26-91  gdecke  #cl972 - ADJUST closeout pricing override.
// 04-22-91  gdecke  #cl972 - ADJUST closeout pricing override.
// 06-10-91  twatso  DB2 structure changes: kunrec, kujrec,
//                   new iomod io0290
// 08-08-91  wjohns  Renamed application and commarea
//                     referrences to claims appls.
// 10-31-91  twatso  added code for osd to several processes
//                   installation in dec.
// 10-31-91  twatso  changed osd code in s17, s18 - edit would
//                   not get thru the way it was
// 12-23-91  twatso  added code to check the yittbl row for
//                   active in 146 and 149. a couple rows were
//                   set inactive.
// 03-13-92  GDECKE  MARCH DB2 TABLE CHANGES. ADD XEGCD,
//                   XBK-BK-SESN-CD, OP-BK-YR.
// 04-13-92  twatso  april DB2 TABLE CHANGES. add op-bk-mo
// 08-20-92  bcourt  drop sy4rec as unused. (dprod.vscale01)
//  5-05-93  BCOURT  Add menu option 19, like 09.
// 10-05-93  gdecke  prevent claim header update when clm is
//                   in 'CMP' status.
// 10-29-93  gdecke  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1
// 11-12-93  GDECKE  REMOVE OVERLAPPING MOVE IN KL0R146.
// 12-01-93  jcarey  Added initialization of remerchandising
//                   option cl-upc-labl-fl. para kl0rs91.
// 03-11-94  BCourt  Rename SY6CSTFL to XQACD.
//             Add defaults for country & currency in KL0RS0B.
// 08-13-97  NJana   Replaced VCUSKU01 by VCUCPX01 for
//                   customer prod id
// 09-10-97  NJana   Insert some comments in process KL0R110
// 10-25-00  GDECKE  REMOVE TEST FOR PREPACK COMPONENTS
// 07-23-01  DSINHA  Bypass price look up on product file
//                   and default all returns to zero price.
// 11-28-01  SVIJAY  RECOMPILED DUE TO CHANGES IN CLPREC.
// ************************************************************
// *********************
Program KL0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0RW01 CL0RW01; // record
  CL0RW02 CL0RW02; // record
  CL0RW03 CL0RW03; // record
  CL0RW06 CL0RW06; // record
  CL6REC CL6REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLNREC CLNREC; // record
  CLPREC CLPREC; // record
  CLRREC CLRREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV3REC IV3REC; // record
  IVAREC IVAREC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUNREC KUNREC; // record
  KUTREC KUTREC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCUCPX01 VCUCPX01; // record
  WCU1710 WCU1710; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YDSTBL {deleteAfterUse = yes}; // table
  use YITTBL {deleteAfterUse = yes}; // table
  use KL0RM.KL0RM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0R000: KL0R000();
     /* *************************************************************/
      /* Only flow for CL0R -- Should never be accessed           **/
     /* *************************************************************/
    ;
    exit program; /* Terminate the application*/
    ;
    ;
    KL0R010: KL0R010();
    KL0R050: KL0R050();
    KL0R100: KL0R100();
    KL0R110: KL0R110();
    KL0R130: KL0R130();
    KL0R140: KL0R140();
    KL0R150: KL0R150();
    KL0R160: KL0R160();
  end // end main
end // end KL0R

// main flow
Function KL0R000()
   /* ************************************************************/
   /* *   This is the "main logic" for the application CL0R.    **/
   /* *      ( Claims Defective Return Authorization )          **/
   /* *                                                         **/
   /* *   Perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application.     **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  COMMAREA.CACURRAP = "KL0R";
  CLXREC.CLXCPROC = "CL0R000";
  ;
  KL0R010(); /* Initilize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* Set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* While not end-of-aplication*/
    KL0R050(); /* process the application screen*/
  end
  ;
  COMMAREA.CATOAP = "KL0A"; /* Return to the claims header screen*/
  XPCL002();
  ;
  ;
end // end KL0R000

// Init claims menu processing
Function KL0R010()
   /* *************************************************************/
   /* *                                                          **/
   /* *   INITIALIZE THE CL0R CLAIMS PROCESSING APPLICATION      **/
   /* *                                                          **/
   /* * 8-20-92 bcourt remove sy4rec - not used.                 **/
   /* * 5-05-93 BCOURT Add menu option 19, like 09.              **/
   /* * 5-30-93 BCOURT Get date to fill in clx rec. curr date    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
   /* ****************************************/
     /* Initialize records used by CL0R*/
   /* ****************************************/
  ;
  set CL0RW01 empty; /* Clear working storages*/
  set CL0RW02 empty;
  set CL0RW03 empty;
  set CLAREC empty; /* Clear records*/
  set CLBREC empty;
  set CLJREC empty;
  set CLKREC empty;
  set CLPREC empty;
  set CLLREC empty;
  set CLNREC empty;
  set CLXREC empty;
  set IV3REC empty;
  set IVEREC empty;
  set KUCREC empty;
   /* TCS change begins -08-13-97*/
   /* SET KUIREC EMPTY; dropped -08-13-97*/
  set VCUCPX01 empty;
   /* TCS change ends   -08-13-97*/
  set KUTREC empty;
  set SP5REC empty;
   /* SET SY4REC EMPTY;  drop 8-20-92*/
  set SY5REC empty;
  set SY6REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  ;
   /* ****************************************/
     /* Initialize entry values*/
   /* ****************************************/
  ;
  CLXREC.CLXCPROC = "CL0R001";
  ;
  converseVar.commitOnConverse = 1; /* Force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* Return control to appl if hard db2*/
                                   /* error*/
  ;
   /* TEMP001;*/
  ;
  XSENTRY(); /* Appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* Claims entry check*/
  ;
  ;
   /* ****************************************/
     /* Initialize price effective date*/
   /* ****************************************/
  ;
  XX0XS01(); /* Common date routine*/
  CL0RW01.CL0RWPED = XX0XW01.XX0XWDAT; /* Move in current date*/
  ;
   /* ****************************************/
        /* Set inquiry only flag*/
   /* ****************************************/
  ;
  CL0RW01.CL0RWINQ = "N";
  ;
  if (CLWREC.CLWACTIV == "I") /* If claim is accessed in inquiry mode*/
    CL0RW01.CL0RWINQ = "Y";
  end
  ;
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD /* If claim stat code not allow user*/
   /* entry*/
   && YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
    CL0RW01.CL0RWINQ = "Y";
  end
  ;
   /* iF CLAREC.CLAMEIND = 'Y'        ; If claim # has a memo*/
    /* MOVE 'Y' TO CL0RW01.CL0RWINQ  ; drop 4-6-89*/
   /* END ;*/
  ;
  if (COMMAREA.CAALVL[1] == "Y" /* If commarea flags indicate inq only*/
   || COMMAREA.CAALVL[3] == "Y" 
   || COMMAREA.CACLVL[1] == "Y" 
   || COMMAREA.CACLVL[3] == "Y")
     /* next sentence*/
  else
    CL0RW01.CL0RWINQ = "Y";
  end
  ;
  if (CLAREC.CLAWSENF == "Y" /* worksheet entered claim*/
   || CLWREC.CLWMNOPT == 7   
   || CLWREC.CLWMNOPT == 8   
   || CLWREC.CLWMNOPT == 9   
   || CLWREC.CLWMNOPT == 17  /* 5-5-93*/
   || CLWREC.CLWMNOPT == 19) /* 5-5-93*/
    CL0RW01.CL0RWINQ = "Y";
  end
  ;
  CLXREC.CLXSNAME[1] = "KL0RM001"; /* Init screens used in this appl*/
  CLXREC.CLXCSCRN = "KL0RM001"; /* Start with summary*/
  ;
  TA2REC.TA2DTOPT = "GETDATE"; /* add 5-30-93,use in XS-CLSEX*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* to set CLJ-REC.CLJ-RAIDT*/
  if (TA2REC.TA2RTNCD == 0)
    CLXREC.XXXCDTE = TA2REC.TA2GRGGN;
    CLXREC.XXXCTIME = TA2REC.TA2TIME;
  else
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE IN KL0R010";
    XPCL010(); /* abend*/
  end
  ;
   /* ****************************************/
      /* Initialize the array maximums*/
   /* ****************************************/
  ;
  CL0RW01.CL0RWMAX[1] = 500; /* Arrays are only 500 long*/
  CL0RW01.CL0RWMAX[2] = 12; /* Max screen lines with total line*/
  CL0RW01.CL0RWMAX[3] = 11; /* Max screen detail lines*/
  ;
   /* ****************************************/
         /* Set map id's, date.*/
   /* ****************************************/
  ;
  KL0RM001.CLACLMNB = CLAREC.CLACLMNB; /* Move fields to map*/
  KL0RM001.KUCCOID = CLAREC.KUCCOID;
  KL0RM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0RM001.XNXCD = CLAREC.XNXCD;
  ;
  KL0RM001.XGPCD = CLAREC.XGPCD;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* If code exists in*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
    KL0RM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  KL0RM001.YCTCD = CLAREC.YCTCD;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* If code exists in*/
   && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
    KL0RM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  KL0RM001.CLACTCNM = CLAREC.CLACTCNM;
  KL0RM001.CLFADNM = CLWREC.KUCCONM;
  ;
  KL0RM001.XXXERRID = "KL0R100"; /* Map process name*/
  ;
  KL0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* System date*/
  ;
  ;
  if (CLAREC.CLACLMNB > 0) /* If a claim number exists to process*/
    ;
    KL0R011(); /* Get invoices associated with claim*/
    ;
    KL0R012(); /* Determine if at least one return insp*/
                                   /* has been comp*/
    ;
    KL0R013();
                                   /* Select the defective allow. indicator*/
    ;
    KL0R014(); /* Select the total authorized quantity*/
    ;
    KL0R015(); /* Read cust. company for cu-cusku-ind*/
    ;
    KL0R016(); /* Find the company account type code*/
    ;
  end
  ;
  ;
end // end KL0R010

// Get invoices assoc with claim
Function KL0R011()
   /* *************************************************************/
   /* *                                                          **/
   /* *        GET INVOICES ASSOCIATED WITH CLAIM                **/
   /* *                                                          **/
   /* *   1) Select the set of invoices from DCLAIM.VCLIVX01     **/
   /* *   2) While invoices exist, fetch the needed keys into    **/
   /* *      working storage.                                    **/
   /* *   3) Close the selected set from DCLAIM.VCLIVX01         **/
   /* *                                                          **/
   /* *         MAINTENANCE HISTORY                              **/
   /* *                                                          **/
   /* *  08-13-98  NJANA  Get the primary-invoice-date from      **/
   /* *                  DCLAIM.VCLIVX01 into a working storage  **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R011"; /* Set current process name*/
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "*"; /* Want all invoices from clbrec.*/
  ;
  CL0RW01.CLIADVSQ = 0;
  ;
   /* *****************************************************/
      /* Select the set of invoices.*/
   /* *****************************************************/
  ;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* Get all records*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM ";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
   /* *****************************************************/
      /* Fetch the first invoice*/
   /* *****************************************************/
  ;
  CL0RW01.CL0RWIVF = "N"; /* Initialize invoice indicator*/
  ;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch first from clbrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CL0RWIVF = "Y"; /* There are invoice records*/
   /* TCS change begins  08-13-97*/
    ;
    CL0RW01.CL0RWIDT = CLBREC.IV0IVCDT; /* get invoice date*/
   /* TCS change ends  08-13-97*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM ";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
   /* *****************************************************/
      /* If there was an invoice on the claim.*/
   /* *****************************************************/
  ;
  if (CL0RW01.CL0RWIVF == "Y") /* If invoices exist to get*/
    ;
    /* *****************************************************/
        /* While invoices exist, then continue to*/
          /* fetch them into working storage.*/
    /* *****************************************************/
    ;
    CL0RW01.CL0RWICT = 1; /* Invoice count*/
    CL0RW01.CL0RWINX = 1; /* Invoice index*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0 /* Fetch up to 500 records from clbrec*/
     && CL0RW01.CL0RWINX < CL0RW01.CL0RWMAX[1])
      CL0RW03.IV0PARTN[CL0RWINX] = CLBREC.IV0PARTN;
      CL0RW03.IV0IVCID[CL0RWINX] = CLBREC.IV0IVCID;
      call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* record from clbrec*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If invoice exists*/
        CL0RW01.CL0RWINX = CL0RW01.CL0RWINX + 1;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          CL0RW01.CL0RWICT = CL0RW01.CL0RWINX;
        else
          TA1REC.TA1DBASE = "DCLAIM ";
          TA1REC.TA1TBLVU = "VCLIVX01";
          XPCL010(); /* Perform abend routine for claims*/
        end
      end
    end
    ;
    CL0RW01.CL0RWINX = 1; /* Set invoice index to 1*/
    ;
  else
    CL0RW01.CL0RWICT = 0; /* Invoice count*/
    CL0RW01.CL0RWINX = 0; /* Invoice index*/
  end
  ;
   /* *****************************************************/
      /* Close the selected set of invoices.*/
   /* *****************************************************/
  ;
  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* Get all records*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM ";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* *****************************************************/
      /* Move the first invoice number to the map*/
   /* *****************************************************/
  ;
  if (CL0RW01.CL0RWIVF == "Y") /* If invoices exist*/
    KL0RM001.IV0IVCID = CL0RW03.IV0IVCID[1];
  end
  ;
  ;
end // end KL0R011

// Select return inspection flag
Function KL0R012()
   /* *************************************************************/
   /* *                                                          **/
   /* *  SELECT THE RETURN INSPECTION FLAG FROM DCLAIM.VRINSP01  **/
   /* *                                                          **/
   /* *  1) Select for existence using CLL rec (CL2 REC).        **/
   /* *     - If one or more row exists, set have-returns-flag   **/
   /* *       to yes.                                            **/
   /* *  2-16-91 bcourt Words said 'inspection' and CL2 rec,     **/
   /* *                 but CLL rec and 'returns' were coded.    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R012"; /* Set current process name*/
  ;
  ;
  CL0RW01.CL0RWHVR = "N";
  ;
  if (CLAREC.CLACRTNB > 1) /* current return/insp nbr 2-16-91*/
    CL0RW01.CL0RWHVR = "Y";
    return;
  end
  ;
  set CLLREC empty;
                                   /* Claim actual return header - vclrtn*/
  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;
  ;
  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CL0RWHVR = "Y"; /* Have return for this claim*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTN01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
  ;
end // end KL0R012

// Select def. allow. VTERMS01
Function KL0R013()
   /* *************************************************************/
                                                             /* **/
      /* SELECT THE DEFECTIVE ALLOWANCE FROM DCUST.VTERMS01     **/
                                                             /* **/
     /* 1) Select the terms record and keep the appropiate      **/
        /* value for the defective allowance field.             **/
                                                             /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R013"; /* Set current process name*/
  ;
  ;
  KUTREC.KUCCOID = CLAREC.KUCCOID;
  KUTREC.KUMSTRID = CLAREC.KUMSTRID;
  KUTREC.XNXCD = CLAREC.XNXCD;
  KUTREC.XGPCD = CLAREC.XGPCD;
  KUTREC.XOTCD = CLAREC.XOTCD;
  ;
  call "IO0350" ("S ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* Read terms record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLAREC.CLASETDT >= KUTREC.KUTENDT[1] /* Obtain appropriate xndcd*/
     && CLAREC.CLASETDT <= KUTREC.KUTXNDT[1])
      if (KUTREC.XDACD[1] in XDATBL.XDACD /* If code in table*/
       && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KL0RM001.XDAABRV = XDATBL.XDAABRV[sysVar.arrayIndex];
      end
    else
      if (CLAREC.CLASETDT >= KUTREC.KUTENDT[2] /* Obtain appropriate xndcd*/
       && CLAREC.CLASETDT <= KUTREC.KUTXNDT[2])
        if (KUTREC.XDACD[2] in XDATBL.XDACD /* If code in table*/
         && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
          KL0RM001.XDAABRV = XDATBL.XDAABRV[sysVar.arrayIndex];
        end
      else
        if (CLAREC.CLASETDT >= KUTREC.KUTENDT[3]
         /* Obtain appropriate xndcd*/
         && CLAREC.CLASETDT <= KUTREC.KUTXNDT[3])
          if (KUTREC.XDACD[3] in XDATBL.XDACD /* If code in table*/
           && XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
            KL0RM001.XDAABRV = XDATBL.XDAABRV[sysVar.arrayIndex];
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
  ;
end // end KL0R013

// Select ttl auth. qty VRAHDR01
Function KL0R014()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE TOTAL AUTHORIZED QUANTITY              **/
   /* *               FROM DCLAIMS.VRAHDR01                      **/
   /* *                                                          **/
   /* *  1) Select the Return authorization record and get the   **/
   /* *     total authorized quantity.                           **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R014"; /* Set current process name*/
  ;
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  ;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Read RA record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0RM001.CLJTATHQ = CLJREC.CLJTATHQ; /* move ttl to map*/
    if (CLJREC.CLJRDIND == "B") /* If the RA header had diff types*/
      KL0RM001.XXXERRID = "KL0R014"; /* Process name*/
      converseLib.validationFailed(387); /* Claim has two types*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
  ;
end // end KL0R014

// Read cust co. from VCMPNY01
Function KL0R015()
   /* *************************************************************/
   /* *                                                          **/
   /* *       READ CUSTOMER COMPANY FROM VCMPNY01                **/
   /* *                                                          **/
   /* *  1) read customer company vcmpny01,                      **/
   /* *     to get cu-cusku-ind.  this tells us there            **/
   /* *     may be customer product id's for the nike prod id    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence               ; have company*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.KUCSKIND = " "; /* no company = no sku*/
      KUCREC.XAUCD = " "; /* no company = no acct class*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0R015

// Find cpmny acct type code
Function KL0R016()
   /* *************************************************************/
   /* *                                                          **/
   /* *          FIND COMPANY ACCOUNT TYPE CODE                  **/
   /* *                                                          **/
   /* *  1) find company account type code, for product pricing. **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CL0RW01.XATCD = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    CL0RW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end
  ;
     /* ********************************************************/
     /* read invoice speciality table to get:*/
       /* price/cost indicator - use product price or cost?*/
       /* price/cost type - either xpycd or xcocd*/
       /* price/cost pct - signed percent field to add to 100%*/
                        /* to make a multiplier for the std*/
                        /* price/cost value.*/
     /* table record may have blanks in order type or acct class,*/
     /* so the order of reading is:*/
     /* 1. read for acct type, acct class & order type*/
        /* if not found,*/
     /* 2. read for acct type, acct class & blank o/t*/
        /* if not found,*/
     /* 3. read for acct type, blank acct class & blank o/t*/
        /* if not found,*/
          /* zero price/cost indicator, so clngrprc is 0.*/
     /* ********************************************************/
  ;
     /* data from the company*/
  ;
  IVEREC.XATCD = CL0RW01.XATCD; /* account type*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* account class*/
  IVEREC.XOTCD = CLAREC.XOTCD; /* order type*/
  ;
  call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence, matched all 3 codes*/
  else
    IVEREC.XOTCD = " ";
    call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence, matched 2 codes*/
    else
      IVEREC.XAUCD = " ";
      call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence, matched 1 code*/
      else
        IVEREC.IVEPCIND = " "; /* no match at all*/
        IVEREC.IVEPCTYP = " ";
        IVEREC.IVEPCPCT = 0;
      end
    end
  end
  ;
  ;
end // end KL0R016

// decide which map to show
Function KL0R050()
   /* ************************************************************/
   /* *                                                         **/
   /* *            DECIDE WHICH MAP TO SHOW                     **/
   /* *                                                         **/
   /* *      Control Process The Application Screen             **/
   /* *                                                         **/
   /* *  Note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R050"; /* Set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* If current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* Prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* Set build screen flag to 'yes'*/
  CLXREC.CLXBLDAY = "Y"; /* Set build array flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* Set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* Clear error flag*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* If screen cl0om001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0R100(); /* product summary*/
    end
  else
    TA1REC.TA1MAP = CLXREC.CLXCSCRN;
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
    XPCL010(); /* Abend*/
  end
  ;
  ;
   /* At this point;*/
       /* If the end-of-application flag (CLXEOAF ) = 'n'*/
         /* the perform will return to the top of CL0R050...*/
       /* Else*/
         /* the perform will auto return to CL0R000.*/
  ;
end // end KL0R050

// map 1 defective returns auth.
Function KL0R100()
   /* ************************************************************/
   /* *                                                         **/
   /* *     MAP 1 CLAIMS DEFECTIVE RETURN AUTHORIZATION         **/
   /* *                                                         **/
   /* *  Process Screen CL0RM001 Defective Return Authorization **/
   /* *                                                         **/
   /* *  Note that this process is being performed in a         **/
   /* *     "while loop" from CL0R050 until the end-of-screen   **/
   /* *     flag (CLXEOSFL) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
   /* **    M A I N T E N A N C E    H I S T O R Y    L O G    ***/
   /* **-------------------------------------------------------***/
   /* **   DATE    PGMR    DESCRIPTION                         ***/
   /* **-------------------------------------------------------***/
   /* ** 10-06-93  GDECKE  PREVENT CLARED UPDATE IN INQUIRY MODE**/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R100";
  ;
  ;
   /* ************************************/
   /* Build the screen data for the map*/
   /* ************************************/
  ;
  if (CLXREC.CLXBLDSC == "Y") /* If build screen requested*/
    KL0R110(); /* Build the map*/
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
   /* *************************************************************/
   /* *     Check to see if product fields need to be protected  **/
   /* *     Check to see if total line needs to be displayed;    **/
   /* *     -- If it does then format the totals.                **/
   /* *************************************************************/
  ;
  KL0R101(); /* protect lines, display totals*/
  ;
  ;
  if (converseVar.validationMsgNum > 0) /* If a message is to be displayed*/
    /* next sentence               /* removed set alarm ahowar 12/03/91*/
  else
    if (KL0RM001.SY1STNBR[1] > " ") /* have product data*/
      set KL0RM001.CL0RMSEL[1] cursor;
    else
      set KL0RM001.CLJTATHQ cursor;
    end
  end
  ;
   /* ***********************************************************/
  converse KL0RM001 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
   /* ************************************/
       /* Reset highlighted fields*/
   /* ************************************/
  ;
  KL0R120(); /* Set fields defined*/
  ;
   /* ************************************/
    /* Check the attention identifiers*/
   /* ************************************/
  ;
  KL0R130(); /* Edit pfkeys*/
   /* may transfer out of application*/
  ;
   /* ************************************/
       /* Verify the entered data*/
   /* ************************************/
  ;
  if (CLXREC.CLXERRF == "N"
   && CL0RW01.CL0RWINQ == "N")
    KL0R140(); /* Edit entries*/
  end
  ;
   /* ************************************/
     /* Process valid input requests*/
   /* ************************************/
  ;
  if (CLXREC.CLXERRF == "N"
   && CL0RW01.CL0RWINQ == "N")
    KL0R150(); /* Process entries*/
  end
  ;
   /* ************************************/
    /* Handle PFkey flows*/
   /* ************************************/
  ;
  KL0R160(); /* Handle enter/PF keys*/
  ;
   /* At this point;*/
     /* If the end-of-screen flag (CLXEOSFL) is 'n'*/
        /* we go back to top of process CL0R100.*/
     /* If the end-of-screen flag (CLXEOSFL) is 'y'*/
        /* we return to CL0R050.*/
  ;
  ;
end // end KL0R100

// protect screen lines
Function KL0R101()
   /* *************************************************************/
   /* *                                                          **/
   /* *          protect the screen lines                        **/
   /* *                                                          **/
   /* *   1) Set desired screen detail lines protected           **/
   /* *   2) show totals at end of data                          **/
   /* *                                                          **/
   /* *************************************************************/
   /* **    M A I N T E N A N C E     H I S T O R Y    L O G    ***/
   /* **--------------------------------------------------------***/
   /* **                                                        ***/
   /* **--------------------------------------------------------***/
   /* * 10-04-90 CHELLM Added quality code as a protected field. **/
   /* * 10-05-93 GDECKE Prevent updating of tables if inquiry.   **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (CL0RW01.CL0RWINQ == "Y")
    if (COMMAREA.CAALVL[1] == "Y" /* SALES GROUP*/
     || COMMAREA.CAALVL[3] == "Y" /* CREDIT GROUP*/
     || COMMAREA.CACLVL[1] == "Y" 
     || COMMAREA.CACLVL[3] == "Y")
      if (CLAREC.CLAWSENF == "Y")
        converseLib.validationFailed(536); /* change to inquiry - worksheet entred*/
      else
        converseLib.validationFailed(26); /* change to inquiry due to clm status*/
      end
    else
      converseLib.validationFailed(29); /* change to inquiry due to security*/
    end
    set KL0RM001.CATOAP cursor;
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  CLXREC.CLXLINEX = 1; /* Set map line index to 1*/
  if (CLXREC.CLXARY1X <= 1)
    CLXREC.CLXARY1X = 1;
  end
  CLXREC.CLXARAYX = CLXREC.CLXARY1X;
  ;
  ;
  ;
   /* ************************************/
   /* Check to see if inquiry only*/
     /* flag is set.*/
   /* ************************************/
  ;
  if (CL0RW01.CL0RWINQ == "Y") /* If user can only inquire*/
    set KL0RM001.CLJTATHQ protect; /* then protect all map fields*/
    CLXREC.CLXLINEX = 1; /* Set line index*/
    while (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[2]) /* Until end of detail*/
      ;
      if (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[3]) /* Columns with only 11*/
        if (CL0RW02.YCECD[CLXARAYX] != " ")
          set KL0RM001.SY1STNBR[CLXLINEX] protect, bold;
          set KL0RM001.SY2CLRID[CLXLINEX] protect, bold;
          converseLib.validationFailed(554); /* exception code exists for product*/
        else
          set KL0RM001.SY1STNBR[CLXLINEX] protect;
          set KL0RM001.SY2CLRID[CLXLINEX] protect;
        end
        set KL0RM001.CL0RMSEL[CLXLINEX] protect;
        set KL0RM001.XDMCD[CLXLINEX] protect;
        set KL0RM001.KUIPRDID[CLXLINEX] protect;
        set KL0RM001.XUMCD[CLXLINEX] protect;
        set KL0RM001.XQACD[CLXLINEX] protect;
        set KL0RM001.CLKPRCFF[CLXLINEX] protect;
        set KL0RM001.CLKCLPRC[CLXLINEX] protect;
      else
        set KL0RM001.SY1STNBR[CLXLINEX] protect;
        set KL0RM001.CLMTRTSQ[CLXLINEX] protect;
        set KL0RM001.CLKAUTHQ[CLXLINEX] protect;
        set KL0RM001.CLAESTVL[CLXLINEX] protect;
      end
      ;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Incr map index*/
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Incr array index*/
    end
  else
    ;
    ;
    while (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[3])
                                   /* Until end of detail lines*/
      ;
       /* highlight products with exception codes*/
      ;
      if (CL0RW02.YCECD[CLXARAYX] != " ")
        set KL0RM001.SY1STNBR[CLXLINEX] protect, bold;
        set KL0RM001.SY2CLRID[CLXLINEX] protect, bold;
        converseLib.validationFailed(554); /* exception code exists for product*/
      end
      ;
      /* ***************************************/
       /* if detail line is from invoice*/
          /* it needs to be protected*/
      /* ***************************************/
      ;
      if (CL0RW02.CL0RWSFL[CLXARAYX] == "I") /* record source is invoice*/
        if (CL0RW02.YCECD[CLXARAYX] != " ")
          set KL0RM001.SY1STNBR[CLXLINEX] protect, bold;
          set KL0RM001.SY2CLRID[CLXLINEX] protect, bold;
        else
          set KL0RM001.SY1STNBR[CLXLINEX] protect;
          set KL0RM001.SY2CLRID[CLXLINEX] protect;
        end
        set KL0RM001.XDMCD[CLXLINEX] protect;
        set KL0RM001.KUIPRDID[CLXLINEX] protect;
      end
      ;
      ;
      if (KL0RM001.CL0RMSEL[CLXLINEX] == "A")
        if (converseVar.validationMsgNum == 448 /* overlapping prds exist on screen*/
         && KL0RM001.CL0RMERR[CLXLINEX] == "Y") /* this line had error*/
           /* next sentence*/
        else
          set KL0RM001.XUMCD[CLXLINEX] protect; /* 10-04-90*/
          set KL0RM001.XQACD[CLXLINEX] protect; /* 10-04-90*/
          if (KL0RM001.IV0IVCID == 0) /* user can change products*/
             /* next sentence*/
          else
            if (CL0RW02.YCECD[CLXARAYX] != " ")
              set KL0RM001.SY1STNBR[CLXLINEX] protect, bold;
              set KL0RM001.SY2CLRID[CLXLINEX] protect, bold;
            else
              set KL0RM001.SY1STNBR[CLXLINEX] protect;
              set KL0RM001.SY2CLRID[CLXLINEX] protect;
            end
            set KL0RM001.XDMCD[CLXLINEX] protect;
            set KL0RM001.XUMCD[CLXLINEX] protect; /* 10-04-90*/
            set KL0RM001.XQACD[CLXLINEX] protect; /* 10-04-90*/
            set KL0RM001.KUIPRDID[CLXLINEX] protect;
          end
        end
      end
      ;
      ;
      /* ************************************/
       /* Check to see if product fields*/
         /* need to be protected*/
      /* ************************************/
      ;
      if (KUCREC.KUCSKIND == " ") /* If no customer prod ids*/
        set KL0RM001.KUIPRDID[CLXLINEX] protect;
      end
      ;
      ;
      /* ************************************/
       /* Check to see if price fields*/
         /* need to be protected*/
      /* ************************************/
      ;
      /* IF CL0RM001.CLMTRTSQ GT 0   ; have returned quantity*/
        /* AND CL0RM001.CLKAUTHQ GT 0       ; have author quantity*/
        /* ; non memoed inspection*/
        /* AND CL0RW02.CLHSEQNB(CLXARAYX) LT CLAREC.CLACSQNB;*/
        /* SET CL0RM001.CLKPRCFF(CLXLINEX) PROTECT;*/
        /* SET CL0RM001.CLKCLPRC(CLXLINEX) PROTECT;*/
      /* END ;*/
      ;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Incr line index*/
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Incr array index*/
      ;
    end
  end
  ;
  ;
  ;
  if (KL0RM001.IV0IVCID == 0)
    set KL0RM001.IV0IVCID protect;
  end
  ;
  ;
   /* *************************************************************/
   /* *     Check to see if total line needs to be displayed;    **/
   /* *     -- If it does then format the totals.                **/
   /* *************************************************************/
  ;
  CL0RW01.CL0RWIXM = CLXREC.CLXARY1X + CL0RW01.CL0RWMAX[3]; /* next page*/
  if (CL0RW01.CL0RWIXM >= CL0RW01.CL0RWMAX[1] /* If at array max*/
   || CL0RW02.SY1STNBR[CL0RWIXM] == " ")      /* or no more pages of data*/
    KL0RM001.SY1STNBR[12] = "TOTAL "; /* Move 'TOTAL' indicator*/
    KL0RM001.CLKAUTHQ[12] = CL0RW01.CL0RWTAQ; /* Tot Auth qty*/
    KL0RM001.CLMTRTSQ[12] = CL0RW01.CL0RWTRQ; /* Tot Return qty*/
    KL0RM001.CLAESTVL[12] = CL0RW01.CL0RWTCV; /* Tot claim qty*/
    set KL0RM001.SY1STNBR[12] protect; /* Protect all total fields*/
    set KL0RM001.CLKAUTHQ[12] protect;
    set KL0RM001.CLMTRTSQ[12] protect;
    set KL0RM001.CLAESTVL[12] protect;
  else
    KL0RM001.SY1STNBR[12] = " "; /* Clear totals*/
    KL0RM001.CLKAUTHQ[12] = 0;
    KL0RM001.CLMTRTSQ[12] = 0;
    KL0RM001.CLAESTVL[12] = 0;
    set KL0RM001.SY1STNBR[12] skip, invisible; /* Darken total lines*/
    set KL0RM001.CLKAUTHQ[12] skip, invisible;
    set KL0RM001.CLMTRTSQ[12] skip, invisible;
    set KL0RM001.CLAESTVL[12] skip, invisible;
  end
  ;
  ;
end // end KL0R101

// build screen
Function KL0R110()
   /* *************************************************************/
   /* *                                                          **/
   /* *              BUILD THE SCREEN DATA                       **/
   /* *                                                          **/
   /* *  1) If new product data was requested;                   **/
   /* *     -- Select the products associated with the invoice   **/
   /* *        that appears on the screen.                       **/
   /* *  2) If the screen position index has been set;           **/
   /* *     -- Load the screen with new product rows.            **/
   /* *                                                          **/
   /* *************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *----------------------------------------------------------**/
   /* *   DATE   PGMR   DESCRIPTION                              **/
   /* *----------------------------------------------------------**/
   /* * 10-29-93 GDECKD  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1    **/
   /* * 09-10-97 NJANA   INSERT COMMENTS                         **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R110";
  ;
  ;
  KL0R111(); /* Clear the screen detail lines*/
  if (KL0RM001.IV0IVCID == 0) /* If the invoice number is missing*/
    if (KL0RM001.CLJTATHQ == 0
     && KL0RM001.SY1STNBR[1] == " "
     && KL0RM001.KUIPRDID[1] == " ")
      CLXREC.CLXCPROC = "CL0R110";
      converseLib.validationFailed(389); /* Enter total quan. or products*/
      CLXREC.CLXBLDAY = "N"; /* Set build array empty*/
      set KL0RM001.CLJTATHQ cursor;
    end
  end
  ;
  ;
  if (CLXREC.CLXBLDAY == "Y") /* If new product data is requested*/
    CLXREC.CLXBLDAY = "N"; /* init build array flag*/
    set CL0RW02 empty; /* Clear the WS array*/
    CL0RW01.CL0RWAPF = "N";
                                   /* Set authorized products exist flag no*/
    CLXREC.CLXARAYX = 1; /* Set array index*/
    ;
    CL0RW02.IV0IVCID = KL0RM001.IV0IVCID; /* save map invoice*/
    CL0RW02.CLJTATHQ = KL0RM001.CLJTATHQ; /* save map ttl qty*/
    ;
    if (CL0RW01.CL0RWIVF == "Y" /* invoice exist to process*/
     && CLAREC.YCSCD1 != "CMP"  /* claim is not completed*/
     && CLAREC.YCSCD1 != "CAN") /* claim is not canceled*/
      /* *********************************************************/
       /* Fetch the invoice net billing flag and customer prd id*/
      /* *********************************************************/
      /* TCS change begins - 09/10/97*/
      /* This process will not serve the intended purpose if it is*/
      /* called here.It has to be executed after the execution of the*/
      /* processes  KL0R113 and KL0R116*/
      /* TCS change ends   - 09/10/97*/
      ;
      KL0R118(); /* Select the invoice net bill flag,*/
                              /* customer prd id and price ovrd flag*/
    end
    ;
    /* **********************************************/
     /* Fetch the RA products from the database*/
       /* and store them in working storage.*/
    /* **********************************************/
    KL0R112(); /* Select the set of RA products*/
    CL0RW01.CL0RWSW1 = "N"; /* Set end of data sw1 to no*/
    while (CL0RW01.CL0RWSW1 == "N" /* Until no more fetch data e*/
     && CLXREC.CLXARAYX <= CL0RW01.CL0RWMAX[1]) /* and LE 500 rows*/
      KL0R113(); /* Fetch the RA data into WS*/
    end
    KL0R114(); /* Close selected RA product set*/
    ;
    ;
    if (CL0RW01.CL0RWIVF == "Y" /* invoice exist to process*/
     && CLAREC.YCSCD1 != "CMP"  /* claim is not completed*/
     && CLAREC.YCSCD1 != "CAN") /* claim is not canceled*/
      /* **********************************************/
       /* Fetch the invoice products from the database*/
         /* and store them in working storage.*/
      /* **********************************************/
      KL0R115(); /* Select the set of invoice products*/
      CL0RW01.CL0RWSW2 = "N"; /* Set end of data sw2 to no*/
      while (CL0RW01.CL0RWSW2 == "N" /* Until no more fetch data*/
       && CLXREC.CLXARAYX <= CL0RW01.CL0RWMAX[1]) /* and LE 500 rows*/
        KL0R116(); /* Fetch the invoice data into WS*/
      end
      KL0R117(); /* Close selected invoice product set*/
      ;
    end
    ;
    if (CLXREC.CLXARAYX == 1) /* If the array index is still 1*/
      /* MOVE 'CL0R110' TO CLXREC.CLXCPROC;*/
      /* MOVE 197 TO EZEMNO      ; There are no products to display*/
    else
      CLXREC.CLXLSTAX = CLXREC.CLXARAYX - 1; /* Save last array index*/
      if (CLXREC.CLXERRF != "Y") /* If not an update error*/
        CLXREC.CLXARAYX = 1; /* Set array index back to 1*/
        CLXREC.CLXARY1X = 1; /* Set array index back to 1*/
      end
    end
    ;
    ;
    /* **********************************************/
     /* Calculate the claim values and sum all the*/
       /* totals for display on the total line.*/
    /* **********************************************/
    KL0R119();
    ;
  end
  ;
  if (CLAREC.CLAWSENF == "Y") /* claim was worksheet entered*/
    converseLib.validationFailed(536); /* claim is w/s entered - no update*/
  end
  ;
   /* *************************************************************/
   /* *     If the screen position index has been set;           **/
   /* *     -- Load the screen with new product rows.            **/
   /* *************************************************************/
  CLXREC.CLXARAYX = CLXREC.CLXARY1X;
  if (CLXREC.CLXARY1X > 0) /* If the array index is set*/
    if (CL0RW02.SY1STNBR[CLXARAYX] != " " /* and some data exists in WS*/
     || CL0RW02.CLKAUTHQ[CLXARAYX] != 0)  /* auth qty only*/
      ;
      CLXREC.CLXTESTF = "N";
      CLXREC.CLXLINEX = 1; /* Set map index to 1*/
      while (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[3] /* Until end of detail*/
       && CLXREC.CLXTESTF == "N")
        if (CL0RW02.SY1STNBR[CLXARAYX] != " " /* and data exists in WS*/
         || CL0RW02.CLKAUTHQ[CLXARAYX] != 0)  /* auth qty only*/
          ;
          KL0RM001.CL0RMSEL[CLXLINEX] = CL0RW02.CL0RMSEL[CLXARAYX];
          KL0RM001.SY1STNBR[CLXLINEX] = CL0RW02.SY1STNBR[CLXARAYX];
          KL0RM001.SY2CLRID[CLXLINEX] = CL0RW02.SY2CLRID[CLXARAYX];
          KL0RM001.XDMCD[CLXLINEX] = CL0RW02.XDMCD[CLXARAYX];
          KL0RM001.KUIPRDID[CLXLINEX] = CL0RW02.KUIPRDID[CLXARAYX];
          KL0RM001.CLMTRTSQ[CLXLINEX] = CL0RW02.CLMTRTSQ[CLXARAYX];
          KL0RM001.CLKAUTHQ[CLXLINEX] = CL0RW02.CLKAUTHQ[CLXARAYX];
          KL0RM001.CL0RMERR[CLXLINEX] = CL0RW02.CL0RWUOM[CLXARAYX];
          KL0RM001.XUMCD[CLXLINEX] = CL0RW02.XUMCD[CLXARAYX];
          KL0RM001.XQACD[CLXLINEX] = CL0RW02.XQACD[CLXARAYX];
          KL0RM001.CLKPRCFF[CLXLINEX] = CL0RW02.CLKPRCFF[CLXARAYX];
          KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
          KL0RM001.CLAESTVL[CLXLINEX] = CL0RW02.CLAESTVL[CLXARAYX];
          ;
          if (KL0RM001.XUMCD[CLXLINEX] != "  "
           && KL0RM001.XUMCD[CLXLINEX] != "01")
            converseLib.validationFailed(593);
          end
          ;
          CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Incr map index*/
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Incr array index*/
        else /* no product or auth qty*/
          CLXREC.CLXTESTF = "Y";
        end
        ;
      end
    end
  end
  ;
  ;
   /* ************************************************************/
   /* if authorizing all products, need to put authorized qty on*/
   /* products on following & previous screens.  program allowed*/
   /* use of pf7/8 with errors in this one case, now need to*/
   /* show the 0 qty errors on the new screen.*/
   /* ************************************************************/
  ;
  if (CL0RW01.CL0RWAAF == "Y")
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum == 524) /* quantity required*/
        KL0R143(); /* edit authorized qty to get correct*/
                                   /* errors*/
      end
    end
  end
  ;
  ;
end // end KL0R110

// clear the screen detail lines
Function KL0R111()
   /* *************************************************************/
   /* *                                                          **/
   /* *          CLEAR THE SCREEN DETAIL LINES                   **/
   /* *                                                          **/
   /* *   1) Set all the screen detail lines empty.              **/
   /* *                                                          **/
   /* * 11-28-90 chellm  added clear xumcd on screen             **/
   /* *************************************************************/
  ;
  CLXREC.CLXLINEX = 1; /* Set map line index to 1*/
  ;
  while (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[2])
                                   /* Until end of detail lines*/
    if (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[3]) /* If not on total lines*/
      KL0RM001.CL0RMSEL[CLXLINEX] = " "; /* Clear all detail*/
      KL0RM001.SY2CLRID[CLXLINEX] = " ";
      KL0RM001.XDMCD[CLXLINEX] = " ";
      KL0RM001.KUIPRDID[CLXLINEX] = " ";
      KL0RM001.XUMCD[CLXLINEX] = " ";
      KL0RM001.XQACD[CLXLINEX] = " "; /* 11-28-90*/
      KL0RM001.CLKPRCFF[CLXLINEX] = " ";
      KL0RM001.CLKCLPRC[CLXLINEX] = 0;
    end
    KL0RM001.SY1STNBR[CLXLINEX] = " ";
    KL0RM001.CLKAUTHQ[CLXLINEX] = 0;
    KL0RM001.CLMTRTSQ[CLXLINEX] = 0;
    KL0RM001.CLAESTVL[CLXLINEX] = 0;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Incr line index*/
    ;
  end
  ;
  ;
end // end KL0R111

// select set DCLAIM.VRAITM01
Function KL0R112()
   /* *************************************************************/
   /* *                                                          **/
   /* *      SELECT SET AND OPEN CURSOR ON DCLAIM.VRAITM01       **/
   /* *                                                          **/
   /* *   1) Select the set of return authorized products        **/
   /* *      and open a cursor for the fetch.                    **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the wild card   **/
   /* *          values when scanning RAITMs.                    **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R112"; /* Set current process name*/
  ;
  ;
  set CLKREC empty; /* Return authorized products*/
  ;
  if (CL0RW01.CL0RWIVF == "Y") /* invoice found*/
    CLKREC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
  else
    CLKREC.IV0IVCID = -1;
  end
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**"; /* 10-04-90*/
  CLKREC.XQACD = "**"; /* 10-04-90*/
  CLKREC.CLKCRFL = "*"; /* 072089*/
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = IV3REC.IV3KEY; /* move in key*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 072089*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  ;
end // end KL0R112

// fetch row from DCLAIM.VRAITM01
Function KL0R113()
   /* *************************************************************/
   /* *                                                          **/
   /* *    FETCH ROWS AND FORMAT DATA FROM DCLAIM.VRAITM01       **/
   /* *                                                          **/
   /* *   1) Fetch each row until end of data is found and       **/
   /* *      format the row in working storage.                  **/
   /* *                                                          **/
   /* *************************************************************/
   /* **************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G      **/
   /* ------------------------------------------------------------**/
   /* DATE     PGMR     DESCRIPTION                            **/
   /* ------------------------------------------------------------**/
   /* 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES.               **/
   /* 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES.               **/
   /* ------------------------------------------------------------**/
  ;
  CLXREC.CLXCPROC = "CL0R113"; /* Set current process name*/
  ;
  ;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch data*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0RW02.CL0RWSFL = "R"; /* record source from ra hdr*/
    CL0RW02.ZZZCHGCT[CLXARAYX] = CLKREC.ZZZCHGCT; /* save data*/
    CL0RW02.XGPCD[CLXARAYX] = CLKREC.XGPCD;
    CL0RW02.SY1STNBR[CLXARAYX] = CLKREC.SY1STNBR;
    CL0RW02.SY2CLRID[CLXARAYX] = CLKREC.SY2CLRID;
    CL0RW02.XDMCD[CLXARAYX] = CLKREC.XDMCD;
    CL0RW02.OP2LNINB[CLXARAYX] = CLKREC.OP2LNINB;
    CL0RW02.XQACD[CLXARAYX] = CLKREC.XQACD;
    CL0RW02.XEGCD[CLXARAYX] = CLKREC.XEGCD;
    CL0RW02.XBK-BK-SESN-CD[CLXARAYX] = CLKREC.XBK-BK-SESN-CD;
    CL0RW02.OP-BK-YR[CLXARAYX] = CLKREC.OP-BK-YR;
    CL0RW02.OP-BK-MO[CLXARAYX] = CLKREC.OP-BK-MO;
    CL0RW02.XUMCD[CLXARAYX] = CLKREC.XUMCD;
    CL0RW02.YCECD[CLXARAYX] = CLKREC.YCECD;
    ;
    /* *******************************************************/
    /* ***    This quantity will have to be calculated   *****/
    /* ***    from the sum of two quantities             *****/
    /* ***    which will be selected from the tables     *****/
    /* ***    DCLAIM.VRTSIT01 and DCLAIM.VDEFIT01.       *****/
    /* ***    Also look for uom on returns that varies   *****/
    /* ***    from uom for authorization.                *****/
    /* *******************************************************/
    CL0RW02.CL0RWUOM[CLXARAYX] = " "; /* variable uom flag*/
    KL0RS01(); /* Get the quantities from CLNREC & CLPREC*/
    CL0RW02.CLMTRTSQ[CLXARAYX] = CL0RW01.CLNRTSQ + CL0RW01.CLPDEFQ;
    if (CL0RW02.CLMTRTSQ[CLXARAYX] > 0) /* need negative qty*/
      CL0RW02.CLMTRTSQ[CLXARAYX] = CL0RW02.CLMTRTSQ[CLXARAYX] * -1;
    end
    ;
    CL0RW02.CLKCLPRC[CLXARAYX] = CLKREC.CLKCLPRC;
    CL0RW02.CLKPRCFF[CLXARAYX] = CLKREC.CLKPRCFF;
    ;
    /* *     fetch invoice shipped quantity*/
    ;
    if (CLKREC.IV0IVCID != 0)
      IV3REC.IV0IVCID = CLKREC.IV0IVCID;
      CLXREC.CLXORDIV = CLKREC.IV0IVCID;
      IV3REC.IV0PARTN = CLXREC.CLXPARTN;
      IV3REC.OP2LNINB = CLKREC.OP2LNINB;
      ;
      call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        CL0RW02.IV3LNSQ[CLXARAYX] = IV3REC.IV3LNSQ;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          CL0RW02.IV3LNSQ[CLXARAYX] = 0;
        else
          TA1REC.TA1DBASE = "DINVC";
          TA1REC.TA1TBLVU = "VIVITM01";
          XPCL010();
        end
      end
    end
    ;
    ;
    CL0RW01.CL0RWAPF = "Y"; /* Indicate authorized products exist*/
    ;
    if (CLKREC.CLKAUTHQ > 0)
      CL0RW02.CLKAUTHQ[CLXARAYX] = CLKREC.CLKAUTHQ * -1;
    else
      CL0RW02.CLKAUTHQ[CLXARAYX] = CLKREC.CLKAUTHQ;
    end
    ;
    CL0RW02.CL0RMSEL[CLXARAYX] = "A";
    ;
     /* if returned qty less than authorized qty (values are neg)*/
    if (CL0RW02.CLMTRTSQ[CLXARAYX] < CL0RW02.CLKAUTHQ[CLXARAYX]
     && CLKREC.YCECD != " ") /* been thru batch and generated exception*/
      KL0RM001.XXXERRID = "KL0R113"; /* Process name*/
      converseLib.validationFailed(388); /* Give a warning on quantity*/
    end
    ;
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Incr array index*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0RW01.CL0RWSW1 = "Y"; /* Indicate end of data*/
    else
      TA1REC.TA1DBASE = "DCLAIM"; /* Abend error has occurred*/
      TA1REC.TA1TBLVU = "VRAITM01";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0R113

// close set DCLAIM.VRAITM01
Function KL0R114()
   /* *************************************************************/
   /* *                                                          **/
   /* *        CLOSE SELECTED SET FROM DCLAIM.VRAITM01           **/
   /* *                                                          **/
   /* *   1) Close the selected cursor for the set of rows.      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R114"; /* Set current process name*/
  ;
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM"; /* Abend error has occurred*/
    TA1REC.TA1TBLVU = "VRAITM01";
    XPCL010();
  end
  ;
  ;
end // end KL0R114

// select set DINVC.VIVITM01
Function KL0R115()
   /* *************************************************************/
   /* *                                                          **/
   /* *      SELECT SET AND OPEN CURSOR ON DINVC.VIVITM01        **/
   /* *                                                          **/
   /* *   1) Select the set of invoice procucts                  **/
   /* *      and open a cursor for the fetch.                    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R115"; /* Set current process name*/
  ;
  ;
  set IV3REC empty; /* invoice products*/
  CLXREC.CLXORDIV = KL0RM001.IV0IVCID; /* partition invoice #*/
  IV3REC.IV0IVCID = KL0RM001.IV0IVCID;
  IV3REC.IV0PARTN = CLXREC.CLXPARTN;
  IV3REC.OP2LNINB = -1;
  IV3REC.SY1STNBR = "******";
  IV3REC.SY2CLRID = "***";
  IV3REC.XDMCD = "**";
  IV3REC.XLCCD = "**";
  IV3REC.XQACD = "**";
  ;
  call "IO1100" ("S2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = IV3REC.IV3KEY; /* move table keys*/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    XPCL010();
  end
  ;
  ;
end // end KL0R115

// fetch row from DINVC.VIVITM01
Function KL0R116()
   /* *************************************************************/
   /* *                                                          **/
   /* *    FETCH ROWS AND FORMAT DATA FROM DINVC.VIVITM01       **/
   /* *                                                          **/
   /* *   1) Fetch each row until end of data is found and       **/
   /* *      format the row in working storage.                  **/
   /* *                                                          **/
   /* *************************************************************/
   /* *      M A I N T E N A N C E      H I S T O R Y    L O G   **/
   /* *----------------------------------------------------------**/
   /* *   DATE   PGMR   DESCRIPTION                              **/
   /* *----------------------------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 03-13-92 GDECKE MARCH DB2 TABLE CHANGES                  **/
   /* * 04-13-92 TWATSO APRIL DB2 TABLE CHANGES                  **/
   /* *************************************************************/
  ;
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R116"; /* Set current process name*/
  ;
  ;
  call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch data*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (IV3REC.OP2LNINB in CL0RW02.OP2LNINB)
       /* next sentence ; record exists as ra*/
    else
      CL0RW02.CL0RWSFL[CLXARAYX] = "I"; /* record source from invoice*/
      CL0RW02.XGPCD[CLXARAYX] = CLAREC.XGPCD;
      CL0RW02.SY1STNBR[CLXARAYX] = IV3REC.SY1STNBR;
      CL0RW02.SY2CLRID[CLXARAYX] = IV3REC.SY2CLRID;
      CL0RW02.XDMCD[CLXARAYX] = IV3REC.XDMCD;
      CL0RW02.OP2LNINB[CLXARAYX] = IV3REC.OP2LNINB;
      CL0RW02.IV3LNSQ[CLXARAYX] = IV3REC.IV3LNSQ;
      CL0RW02.KUIPRDID[CLXARAYX] = IV3REC.KUIPRDID;
      CL0RW02.XQACD[CLXARAYX] = IV3REC.XQACD;
      CL0RW02.XEGCD[CLXARAYX] = IV3REC.XEGCD;
      CL0RW02.XBK-BK-SESN-CD[CLXARAYX] = IV3REC.XBK-BK-SESN-CD;
      CL0RW02.OP-BK-YR[CLXARAYX] = IV3REC.OP-BK-YR;
      CL0RW02.OP-BK-MO[CLXARAYX] = IV3REC.OP-BK-MO;
      CL0RW02.XUMCD[CLXARAYX] = IV3REC.XUMCD;
      CL0RW02.XPYCD[CLXARAYX] = IV3REC.XPYCD;
      CL0RW02.XCOCD[CLXARAYX] = IV3REC.XCOCD;
      CL0RW02.CLKPRCFF[CLXARAYX] = "I";
      CL0RW02.CL0RWUOM[CLXARAYX] = " "; /* uom varies flag*/
      ;
      /* *************************************************************/
      /* ***    This quantity will have to be calculated   *****/
      /* ***    from the sum of two quantities             *****/
      /* ***    which will be selected from the tables     *****/
      /* ***    DCLAIM.VRTSIT01 and DCLAIM.VDEFIT01.       *****/
      /* *******************************************************/
      KL0RS12(); /* Get the quantities from CLNREC & CLPREC*/
      CL0RW02.CLMTRTSQ[CLXARAYX] = CL0RW01.CLNRTSQ + CL0RW01.CLPDEFQ;
      if (CL0RW02.CLMTRTSQ[CLXARAYX] > 0) /* need negative qty*/
        CL0RW02.YCECD[CLXARAYX] = "CLR"; /* show as exception on map*/
        CL0RW02.CLMTRTSQ[CLXARAYX] = CL0RW02.CLMTRTSQ[CLXARAYX] * -1;
      end
      ;
       /* look for price overrides*/
      ;
      if (CL0RW01.CL0RWHPO == "Y") /* have price override*/
        CL6REC.IV0IVCID = IV3REC.IV0IVCID;
        CLXREC.CLXORDIV = IV3REC.IV0IVCID;
        CL6REC.IV0PARTN = CLXREC.CLXPARTN;
        CL6REC.XGPCD = CLAREC.XGPCD;
        CL6REC.SY1STNBR = IV3REC.SY1STNBR;
        CL6REC.SY2CLRID = IV3REC.SY2CLRID;
        CL6REC.XDMCD = IV3REC.XDMCD;
        CL6REC.XQACD = IV3REC.XQACD;
        CL6REC.XUMCD = IV3REC.XUMCD;
        CL6REC.SY5SZID = 0;
        ;
        KL0RS95(); /* select set price override*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
         && CL6REC.CLHMEMNB > 0)    
          IV3REC.IV3GLNUP = CL6REC.CL6OVPRC;
          IV3REC.IV3NLNUP = CL6REC.CL6OVPRC;
          CL0RW02.CLKPRCFF[CLXARAYX] = "O";
          ;
        end
        ;
        call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
        ;
      end
      ;
      ;
      if (CL0RW01.IVANBLFL == "Y")
        CL0RW02.CLKCLPRC[CLXARAYX] = IV3REC.IV3NLNUP;
      else
        CL0RW02.CLKCLPRC[CLXARAYX] = IV3REC.IV3GLNUP;
      end
      ;
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Incr array index*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0RW01.CL0RWSW2 = "Y"; /* Indicate end of data*/
    else
      TA1REC.TA1DBASE = "DINVC"; /* Abend error has occurred*/
      TA1REC.TA1TBLVU = "VIVITM01";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0R116

// close set DINVC.VIVITM01
Function KL0R117()
   /* *************************************************************/
   /* *                                                          **/
   /* *        CLOSE SELECTED SET FROM DINVC.VIVITM01           **/
   /* *                                                          **/
   /* *   1) Close the selected cursor for the set of rows.      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R117"; /* Set current process name*/
  ;
  ;
  call "IO1100" ("C2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DINVC"; /* Abend error has occurred*/
    TA1REC.TA1TBLVU = "VIVITM01";
    XPCL010();
  end
  ;
  ;
end // end KL0R117

// select from VIVHDR01, VCUCPX01
Function KL0R118()
   /* *************************************************************/
   /* *            SELECT FROM DINVC.VIVHDR01                    **/
   /* *                                                          **/
   /* *   1) Select the row from the invoic header row to get    **/
   /* *      the net billing flag.                               **/
   /* *   2) select the row from customer sku row to get customer**/
   /* *      product id.                                         **/
   /* *                                                          **/
   /* * Maintenance History:                                     **/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 06-11-91 twatso db2 structure changes.  ku2rec being     **/
   /* *                 deinstalled.  replaced with kuirec, calls**/
   /* *                 iomod io5790.                            **/
   /* * 08-13-97 NJANA  Replaced VCUSKU01 by VCUCPX01            **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R118"; /* Set current process name*/
  ;
  set IVAREC empty; /* Invoice header*/
  IVAREC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
  IVAREC.IV0PARTN = CL0RW03.IV0PARTN[CL0RWINX];
  ;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.IVANBLFL = IVAREC.IVANBLFL; /* Save net bill flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0RW01.IVANBLFL = "N"; /* Save net bill flag*/
    else
      CLXREC.CLXORDIV = IVAREC.IV0IVCID; /* move in key*/
      TA1REC.TA1TBLKE = CLXREC.CLXORDIV;
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVHDR01";
      XPCL010();
    end
  end
  ;
       /* *****************************************/
       /* determine if invoice has price overrides*/
       /* *****************************************/
  ;
  set CL6REC empty;
  CL6REC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
  CL6REC.IV0PARTN = CL0RW03.IV0PARTN[CL0RWINX];
  ;
  CL6REC.XGPCD = "**";
  CL6REC.SY1STNBR = "******";
  CL6REC.SY2CLRID = "***";
  CL6REC.XDMCD = "**";
  CL6REC.XQACD = "**";
  CL6REC.XUMCD = "**";
  CL6REC.SY5SZID = -1;
  ;
  call "IO2950" ("SS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO2950" ("SN", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0RW01.CL0RWHPO = "Y"; /* have price override flag*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0RW01.CL0RWHPO = "N"; /* price override flag*/
      else
        TA1REC.TA1LOCAT[2] = "CL0R118";
        TA1REC.TA1LOCAT[4] = "IO2950";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VIVOVR01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        XPCL010(); /* abend*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "CL0R118";
    TA1REC.TA1LOCAT[4] = "IO2950";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VIVOVR01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abend*/
  end
  ;
  call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* *************************************************************/
   /* *    fetch kuiprdid for each product*/
   /* *06-11-91 changes in this area*/
   /* *************************************************************/
  ;
  if (KUCREC.KUCSKIND != " ") /* non-blank means a sku exists*/
     /* **************************************************/
     /* company record read in cl0r015 initialize process*/
     /* says a sku record exists*/
     /* set up select unique-b io5790 06-11-91*/
     /* use zeroes in dept until dept is populated and in use*/
     /* **************************************************/
     /* TCS change begin - 08-13-97*/
    ;
    set WCU1710 empty; /* Initialize the record*/
    WCU1710-INQUIRY-OPTION = "2"; /* Nike product id lookup*/
    WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID; /* company ID*/
    WCU1710-XNX-DEPT-ID-XREF = 0; /* department id*/
    ;
    if (CLAREC.IV0IVCID > 0) /* if invoice id exits*/
      WCU1710-CU-PROD-XREF-EDT = CL0RW01.CL0RWIDT; /* get invoice date*/
    else /* if invoice id does not exist*/
      WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT;
                                   /* get claim set date*/
    end
    ;
    WCU1710-IN-XGP-GPC-CD = CLAREC.XGPCD; /* gpc code*/
    WCU1710-IN-SY-STY-NBR = CL0RW02.SY1STNBR[CLXARAYX]; /* style nbr*/
    WCU1710-IN-SY-COLR-CD-ID = CL0RW02.SY2CLRID[CLXARAYX]; /* color*/
    WCU1710-IN-XDM-DIM-CD = CL0RW02.XDMCD[CLXARAYX]; /* dimension*/
    WCU1710-IN-SY-SZ-ID = 0; /* zero size id*/
    ;
    /* If quality code is blank,default it to '01'*/
    if (CL0RW02.XQACD[CLXARAYX] != " ") /* qualty code is not blank*/
      WCU1710-IN-XQA-QUAL-CD = CL0RW02.XQACD[CLXARAYX];
    else /* quality code blank*/
      WCU1710-IN-XQA-QUAL-CD = "01";
    end
    ;
    call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* get customer prod id*/
    if (WCU1710-RETURN-CODE == 0)
      CL0RW02.KUIPRDID[CLXARAYX] = WCU1710.CU-CUST-PROD-ID[1];
    else
      CL0RW02.KUIPRDID[CLXARAYX] = " ";
    end
  else
    CL0RW02.KUIPRDID[CLXARAYX] = " ";
  end
   /* TCS change ends-Dated 08-13-97*/
  ;
end // end KL0R118

// calc claim values and totals
Function KL0R119()
   /* *************************************************************/
   /* *                                                          **/
   /* *       CALCULATE CLAIM VALUES AND SCREEN TOTALS           **/
   /* *           FOR NEWLY SELECTED PRODUCT ITEMS               **/
   /* *                                                          **/
   /* *   1) Loop through saved WS product values and sum totals **/
   /* *      for Authorized Return Quantity, Actual Return       **/
   /* *      Quantity, and Claim Values.  The claim value for    **/
   /* *      each product is also calculated.                    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R119";
  ;
  ;
  CL0RW01.CL0RWTAQ = 0; /* Total authorized quantity*/
  CL0RW01.CL0RWTRQ = 0; /* Total actual returned quantity*/
  CL0RW01.CL0RWTCV = 0; /* Total claim value*/
  ;
  CL0RW01.CL0RWIXM = 1; /* Set working array index*/
  ;
  while (CL0RW01.CL0RWIXM <= CL0RW01.CL0RWMAX[1] /* While LE 500*/
   && CL0RW02.SY1STNBR[CL0RWIXM] != " ") /* and data exists to process*/
    ;
    CL0RW01.CL0RWWK1 = CL0RW02.CLKAUTHQ[CL0RWIXM]; /* QTY*/
    CL0RW01.CL0RWWK2 = CL0RW02.CLKCLPRC[CL0RWIXM]; /* Price*/
    CL0RW02.CLAESTVL[CL0RWIXM] = CL0RW01.CL0RWWK1 * CL0RW01.CL0RWWK2;
    ;
    CL0RW01.CL0RWTAQ = CL0RW01.CL0RWTAQ + CL0RW02.CLKAUTHQ[CL0RWIXM];
    CL0RW01.CL0RWTRQ = CL0RW01.CL0RWTRQ + CL0RW02.CLMTRTSQ[CL0RWIXM];
    CL0RW01.CL0RWTCV = CL0RW01.CL0RWTCV + CL0RW02.CLAESTVL[CL0RWIXM];
    ;
    CL0RW01.CL0RWIXM = CL0RW01.CL0RWIXM + 1; /* Incr counter*/
  end
  ;
end // end KL0R119

// set fields defined
Function KL0R120()
   /* *************************************************************/
   /* *                                                          **/
   /* *               SET FIELDS DEFINED                         **/
   /* *                                                          **/
   /* *    1) Reset any highlighted fields.                      **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XQA and XUM codes to fields defined**/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R120";
  ;
  set KL0RM001.IV0IVCID initialAttributes;
  set KL0RM001.CLJTATHQ initialAttributes;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 12)
    ;
    if (CLXREC.CLXLINEX <= 11) /* For lines with only 11*/
      set KL0RM001.CL0RMSEL[CLXLINEX] initialAttributes;
      set KL0RM001.SY2CLRID[CLXLINEX] initialAttributes;
      set KL0RM001.XDMCD[CLXLINEX] initialAttributes;
      set KL0RM001.XUMCD[CLXLINEX] initialAttributes; /* 10-04-90*/
      set KL0RM001.XQACD[CLXLINEX] initialAttributes; /* 10-04-90*/
      set KL0RM001.KUIPRDID[CLXLINEX] initialAttributes;
      KL0RM001.CL0RMERR[CLXLINEX] = " "; /* reset error flag*/
      set KL0RM001.XUMCD[CLXLINEX] initialAttributes;
      set KL0RM001.CLKPRCFF[CLXLINEX] initialAttributes;
      set KL0RM001.CLKCLPRC[CLXLINEX] initialAttributes;
    end
    set KL0RM001.SY1STNBR[CLXLINEX] initialAttributes;
    set KL0RM001.CLKAUTHQ[CLXLINEX] initialAttributes;
    set KL0RM001.CLMTRTSQ[CLXLINEX] initialAttributes;
    set KL0RM001.CLAESTVL[CLXLINEX] initialAttributes;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  set KL0RM001.CATOAP initialAttributes;
  set KL0RM001.CAITEM initialAttributes;
  ;
  ;
end // end KL0R120

// edit pfkeys
Function KL0R130()
   /* *************************************************************/
   /* *                                                          **/
   /* *                   EDIT PFKEYS                            **/
   /* *                                                          **/
   /* *      1) Check the attention identifiers to see           **/
   /* *         if they are valid for this application.          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R130";
  ;
  if (KL0RM001.CATOAP == " " /* If fastpath positioning*/
   || KL0RM001.CATOAP == "KL0R")
     /* next sentence*/
     /* fast path postioning handled in CL0R160*/
  else
    /* ************************************************/
          /* Just normal fastpath process*/
    /* ************************************************/
    COMMAREA.CATOAP = KL0RM001.CATOAP;
    COMMAREA.CAITEM = KL0RM001.CAITEM;
    XPCL002(); /* Perform common exit routine*/
    return;
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
     /* continue on*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      KL0RM001.XXXERRID = "KL0R130";
      converseLib.validationFailed(62); /* PA1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      KL0RS02(); /* Set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            COMMAREA.CATOAP = " ";
            KL0RM001.XXXERRID = "KL0R130";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0R130

// edit entries
Function KL0R140()
   /* *************************************************************/
   /* *                                                          **/
   /* *                   EDIT ENTRIES                           **/
   /* *                                                          **/
   /* *    1) if data changed on screen.*/
   /* *       - If no errors, check for a selection code of AA   **/
   /* *       - If still no errors, check detail lines from the  **/
   /* *           bottom up.                                     **/
   /* *    2) Edit the header invoice number entered.            **/
   /* *    3) Edit the header total authorized quantity.       **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added quality code to the product attri- **/
   /* *     bute checks to see if anything changed on the screen.**/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R140";
  ;
  ;
  CL0RW01.CL0RWNIR = "N"; /* new invoice requested*/
  CL0RW01.CL0RWSWR = "Y"; /* init have shown warnings to users*/
  CL0RW01.CL0RWPSW = "N"; /* set problem switch*/
  ;
  ;
  ;
  if (CLXREC.CLXERRF == "N") /* If no error have occurred*/
    ;
    /* *************************************************/
      /* Check for selection code AA*/
    /* *************************************************/
    if ("AA" in KL0RM001.CL0RMSEL /* If there is an AA selection code*/
     || CL0RW01.CL0RWAAF == "Y")  /* processed 'aa' earlier*/
      CL0RW01.CL0RWSWR = "N"; /* Set have reshown map flag 'n'*/
      KL0R143(); /* Validate select code AA*/
    end
    ;
    if (CLXREC.CLXERRF == "Y") /* If error occurred*/
       /* next sentence --  don't want to do edits*/
    else
      /* *************************************************/
        /* Validate detail line information*/
      /* *************************************************/
      ;
       /* ** Set array index to last line of the map ***/
      if (CLXREC.CLXARY1X <= 0) /* If first array index not set*/
        CLXREC.CLXARY1X = 1;
      end
      CLXREC.CLXARAYX = CLXREC.CLXARY1X + 10;
      ;
      CLXREC.CLXLINEX = 11;
      while (CLXREC.CLXLINEX > 0)
        KL0RS11(); /* if cleared nike and cust id, clear line*/
             /* IF CL0RM001.XUMCD NE '  ' ;        if unit of measure n*/
               /* AND CL0RM001.XUMCD NE '01';display warning message.*/
               /* MOVE 593 TO EZEMNO;*/
             /* END ;*/
        if (KL0RM001.CL0RMSEL[CLXLINEX] == CL0RW02.CL0RMSEL[CLXARAYX]
         && KL0RM001.SY1STNBR[CLXLINEX] == CL0RW02.SY1STNBR[CLXARAYX]
         && KL0RM001.SY2CLRID[CLXLINEX] == CL0RW02.SY2CLRID[CLXARAYX]
         && KL0RM001.XDMCD[CLXLINEX] == CL0RW02.XDMCD[CLXARAYX] 
         && KL0RM001.KUIPRDID[CLXLINEX] == CL0RW02.KUIPRDID[CLXARAYX]
         && KL0RM001.CLKAUTHQ[CLXLINEX] == CL0RW02.CLKAUTHQ[CLXARAYX]
         && KL0RM001.XUMCD[CLXLINEX] == CL0RW02.XUMCD[CLXARAYX] 
         && KL0RM001.XQACD[CLXLINEX] == CL0RW02.XQACD[CLXARAYX] /* 10-04-90*/
         && KL0RM001.CLKPRCFF[CLXLINEX] == CL0RW02.CLKPRCFF[CLXARAYX]
         && KL0RM001.CLKCLPRC[CLXLINEX] == CL0RW02.CLKCLPRC[CLXARAYX])
           /* next sentence - nothing changed*/
        else
          CL0RW01.CL0RWSWR = "N"; /* Set have reshown map flag 'n'*/
          if (CL0RW01.CL0RWINQ == "N" /* If not inquiry only*/
           && KL0RM001.CL0RMSEL[CLXLINEX] != "X") /* line not removed*/
            /* ********************************************/
              /* Verify the claim price entry, the price*/
                /* from flag, the unit of measure value,*/
                /* the quality and the quantity entry.*/
            /* ********************************************/
            KL0R144();
            /* ********************************************/
              /* Verify customer product id.*/
            /* ********************************************/
            if (CLAREC.YITCD != "I" /* If product is enterable*/
             && KUCREC.KUCSKIND != " ") /* and cust prod id exists*/
              KL0R145(); /* Validate the customer prod id*/
            end
            /* ********************************************/
              /* Verify Nike product id.*/
            /* ********************************************/
            if (CLXREC.CLXERRF == "N") /* if no errors*/
              if (CLAREC.YITCD != "I") /* If product is enterable*/
                KL0R146(); /* Validate the Nike prod id*/
              end
            end
            /* ********************************************/
              /* Verify brand - product mismatch*/
            /* ********************************************/
            if (CLXREC.CLXERRF == "N") /* if no errors*/
              KL0RS40(); /* Validate XBCcd*/
            end
            /* ********************************************/
              /* If no problems occurred during the edits,*/
                /* then perform calculation and retrieve*/
                /* edits which require certain valid*/
                /* entries to exist on the line.*/
            /* ********************************************/
            if (CLXREC.CLXERRF == "N") /* If no problems occurred*/
              KL0R147(); /* Get the appropriate claim price*/
              KL0R148(); /* Calculation edits for totals and UOM*/
            end
          else /* inquiry or deleting*/
            ;
            if (KL0RM001.CL0RMSEL[CLXLINEX] == "X")
              KL0R148();
            end
            ;
          end
          if (CLXREC.CLXERRF == "N")
            KL0R149(); /* Edit selections*/
          end
          ;
          if (CLXREC.CLXERRF == "Y")
             /* next sentence*/
          else
            CL0RW02.CL0RWCHF[CLXARAYX] = "Y"; /* data was changed*/
          end
          ;
           /* reset clxerrf so edits on following lines will be done*/
          ;
          if (CLXREC.CLXERRF == "Y")
            CLXREC.CLXERRF = "N";
            CL0RW01.CL0RWPSW = "Y"; /* set problem switch*/
          end
          ;
        end
        CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1;
        CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
      end
      if (CLXREC.CLXERRF == "N") /* If no error have occurred*/
        KL0RS06(); /* Check for overlapping products on the screen*/
      end
    end
  end
  ;
  ;
  if (CL0RW01.CL0RWPSW == "Y") /* if had error on screen*/
    CLXREC.CLXERRF = "Y"; /* set error flag*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 524) /* quantity required on different page*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
   /* *************************************************/
    /* Edit the total authorized quantity*/
   /* *************************************************/
  KL0R142(); /* Edit the ttl auth qty*/
  ;
   /* *************************************************/
    /* Edit the invoice number*/
   /* *************************************************/
  ;
  if (CLXREC.CLXERRF == "Y")
    if (KL0RM001.IV0IVCID != CL0RW02.IV0IVCID)
      KL0RM001.IV0IVCID = CL0RW02.IV0IVCID; /* restore invoice id*/
    end
  else
    if (KL0RM001.IV0IVCID != CL0RW02.IV0IVCID) /* If invoice changed*/
      KL0R141(); /* Edit the header invoice*/
    end
  end
  ;
end // end KL0R140

// edit header invoice number
Function KL0R141()
   /* ************************************************************/
   /* *                                                         **/
   /* *          EDIT THE HEADER INVOICE NUMBER                 **/
   /* *                                                         **/
   /* *    1) Since the invoice was changed, clear all          **/
   /* *       products associated with the previous invoice     **/
   /* *       number.                                           **/
   /* *    2) Check to see if the invoice is valid for          **/
   /* *       the claim number on the screen.                   **/
   /* *       - If the invoice is valid, set data reload        **/
   /* *         flags.                                          **/
   /* *       - If the invoice is not valid, set an error.      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R141";
  ;
  ;
  ;
  if (KL0RM001.IV0IVCID > 0) /* If the invoice number exists*/
    if (KL0RM001.IV0IVCID in CL0RW03.IV0IVCID) /* if invoice valid*/
      set CL0RW02 empty; /* Clear the product WS array*/
      CL0RW01.CL0RWNIR = "Y";
                                   /* Indicate new invoice requested*/
      CLXREC.CLXBLDSC = "Y"; /* Build new screen*/
      CLXREC.CLXBLDAY = "Y"; /* Build new array data*/
      CL0RW01.CL0RWINX = sysVar.arrayIndex; /* Set new index*/
    else
      CLXREC.CLXERRF = "Y"; /* Set error flag*/
      KL0RM001.XXXERRID = "KL0R141";
      converseLib.validationFailed(91); /* Invoice invalid error*/
      set KL0RM001.IV0IVCID cursor, modified, bold; /* highlight*/
    end
  else
    KL0RM001.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX]; /* restore ivc #*/
  end
  ;
  ;
end // end KL0R141

// edit header total auth qty
Function KL0R142()
   /* ************************************************************/
   /* *                                                         **/
   /* *       EDIT HEADER TOTAL AUTHORIZED QUANTITY             **/
   /* *                                                         **/
   /* *   1) Edit only if the quantity is gt 0                  **/
   /* *   2) If the total was changed by user and the invoice   **/
   /* *      has authorized returns associated with it, then    **/
   /* *      indicate error                                     **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R142"; /* Set current process name*/
  ;
  ;
  if ("A" in KL0RM001.CL0RMSEL /* if some products are authorized*/
   || "A" in CL0RW02.CL0RMSEL)
    if (KL0RM001.CLJTATHQ != CL0RW02.CLJTATHQ) /* If quantity entered*/
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0RM001.XXXERRID = "KL0R142"; /* Process name*/
      converseLib.validationFailed(428); /* Cannot enter total quantity*/
      KL0RM001.CLJTATHQ = CLJREC.CLJTATHQ; /* Reset total*/
      set KL0RM001.CLJTATHQ cursor, modified, bold; /* Highlight*/
      set KL0RM001.CLJTATHQ protect; /* Protect the total*/
      ;
    end
  else /* no authorized qtys exist yet*/
    ;
    if ("Y" in CL0RW02.CL0RWCHF /* if just deleted last auth prod*/
     && CL0RW02.CL0RMSEL[sysVar.arrayIndex] == "X")
      KL0RM001.CLJTATHQ = 0;
      CL0RW02.CLJTATHQ = 0;
    else
      if (KL0RM001.CLJTATHQ < 0) /* If quantity negative*/
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0RM001.XXXERRID = "KL0R142"; /* Process name*/
        converseLib.validationFailed(195); /* Amount must be positive value*/
        set KL0RM001.CLJTATHQ cursor, modified, bold; /* Highlight*/
      else
        CL0RW02.CLJTATHQ = KL0RM001.CLJTATHQ;
      end
    end
  end
  ;
  ;
end // end KL0R142

// validate selection code AA
Function KL0R143()
   /* ************************************************************/
   /* *                                                         **/
   /* *         VALIDATE SELECTION CODE OF "AA"                 **/
   /* *                                                         **/
   /* *   1) If any products associated with the invoice have   **/
   /* *      been removed from authorization with an 'X', the   **/
   /* *      selection of 'AA' is invalid.                      **/
   /* *   2) If products are already authorized for the present **/
   /* *      invoice, then 'AA' is an invalid selection.        **/
   /* *   3) If the code 'AA' is on any other line other than   **/
   /* *      line 1 of page 1, the selection is invalid.        **/
   /* *   4) If any products on the other pages are missing     **/
   /* *      quantity values, then 'AA' selection is invalid.   **/
   /* *   5) Check to see if all the products have had a        **/
   /* *      quantity entered on them to make the use of 'AA'   **/
   /* *      valid.                                             **/
   /* *   6) If the selection 'AA' is valid, then authorize all **/
   /* *      products and flag them for addition to the return  **/
   /* *      authorization item database.                       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R143"; /* Set current process name*/
  ;
  ;
  ;
   /* *************************************/
      /* Process 'AA' edits.*/
   /* *************************************/
  CLXREC.CLXLINEX = 11; /* Set line index*/
  while (CLXREC.CLXLINEX > 0) /* Until end of detail*/
    if (KL0RM001.CL0RMSEL[CLXLINEX] == "AA") /* If aa entered*/
      /* ***************************************************/
        /* Have any products been removed*/
      /* ***************************************************/
      if ("X" in KL0RM001.CL0RMSEL from CLXLINEX) /* If have deleted products*/
        CLXREC.CLXARAYX = CLXREC.CLXARY1X + sysVar.arrayIndex - 1;
        if ("X" in CL0RW02.CL0RMSEL from CLXARAYX)
           /* next sentence - record already deleted from database*/
        else
          CLXREC.CLXERRF = "Y"; /* Indicate error*/
          KL0RM001.XXXERRID = "KL0R143"; /* Process name*/
          converseLib.validationFailed(390); /* Cannot authorize and cancel*/
          set KL0RM001.CL0RMSEL[sysVar.arrayIndex] cursor, modified, bold;
          return;
        end
      end
      /* ***************************************************/
        /* Do any authorized returns already exist*/
      /* ***************************************************/
      if (CLXREC.CLXLINEX == 1 /* If first line*/
       && CLXREC.CLXARY1X == 1) /* and first product in array*/
        CL0RW01.CL0RWAAF = "Y"; /* Set all authorize flag*/
        if (KL0RM001.SY1STNBR[1] == " ")
          CLXREC.CLXERRF = "Y"; /* Indicate error*/
          KL0RM001.XXXERRID = "KL0R143"; /* Process name*/
          converseLib.validationFailed(8); /* selection not valid*/
          set KL0RM001.CL0RMSEL[1] cursor, modified, bold;
          return;
        end
      else
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0RM001.XXXERRID = "KL0R143"; /* Process name*/
        converseLib.validationFailed(427); /* Must be line 1 of page 1*/
        set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1; /* Decrement counter*/
  end
  ;
  ;
   /* *************************************/
    /* Check to see if some products*/
      /* are missing authorized quantity*/
      /* values on current page.*/
   /* *************************************/
  CL0RW01.CL0RWPSW = "N"; /* Set problem switch*/
   /* CLXREC.CLXARAYX = CLXREC.CLXARY1X + 10;*/
   /* MOVE 11 TO CLXREC.CLXLINEX      ; Set index*/
   /* WHILE CLXREC.CLXLINEX GT 0      ; Until end of data*/
    /* IF CL0RM001.SY1STNBR(CLXLINEX) EQ ' '; If empty line*/
      /* AND CL0RM001.KUIPRDID(CLXLINEX) EQ ' ';*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* IF CL0RM001.CLKAUTHQ(CLXLINEX) EQ 0; and no quantity*/
        /* MOVE 231 TO EZEMNO        ; quantity required*/
        /* MOVE 'Y' TO CLXREC.CLXERRF       ; Indicate error*/
        /* MOVE 'KL0R143' TO CL0RM001.XXXERRID; Process name*/
        /* SET CL0RM001.CLKAUTHQ(CLXLINEX) CURSOR,MODIFIED,BRIGHT*/
      /* ELSE ;*/
        /* ;MOVE CL0RM001.CLKAUTHQ(CLXLINEX) TO CL0RW02.CLKAUTHQ(*/
      /* END ;*/
    /* END ;*/
    /* CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1; decr index*/
    /* CLXREC.CLXARAYX = CLXREC.CLXARAYX - 1; decr index*/
   /* END ;*/
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
   /* *************************************/
      /* Authorize all products.*/
   /* *************************************/
  ;
    /* on current screen, move 'a' to map option and blank to*/
    /* working storage array to force thru editting in cl0r14%*/
  ;
  CLXREC.CLXLINEX = 1; /* screen index*/
  CLXREC.CLXARAYX = CLXREC.CLXARY1X; /* first line on page*/
  CL0RW01.CL0RWIXM = CLXREC.CLXARY1X + 10; /* last line on page*/
  while (CLXREC.CLXARAYX <= CL0RW01.CL0RWIXM) /* current line le last line*/
    if (KL0RM001.SY1STNBR[CLXLINEX] != " "
     || KL0RM001.KUIPRDID[CLXLINEX] != " ")
      CL0RW02.CL0RMSEL[CLXARAYX] = "  ";
                                   /* force thru editting cl0r14*/
      KL0RM001.CL0RMSEL[CLXLINEX] = "A "; /* Indicate authorized*/
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    else
      CLXREC.CLXARAYX = 9000; /* force end of loop*/
    end
  end
  ;
  ;
   /* if on first page, move 'a' to working storage for*/
   /* all following pages so when those pages are displayed,*/
   /* they will have 'a' in map option*/
  ;
  ;
  if (CLXREC.CLXARY1X == 1) /* on first page*/
    if (CLXREC.CLXERRF == "N")
      CL0RW01.CL0RWSWR = "N"; /* set have reshown map flag 'n'*/
      CL0RW01.CL0RWIXM = 1; /* Set index*/
      while (CL0RW01.CL0RWIXM <= CL0RW01.CL0RWMAX[1]) /* Until end of data*/
        if (CL0RW02.SY1STNBR[CL0RWIXM] != " "
         || CL0RW02.KUIPRDID[CL0RWIXM] != " ")
          CL0RW02.CL0RWCHF[CL0RWIXM] = "Y"; /* Indicate update*/
          ;
          if (CL0RW01.CL0RWIXM >= 12)
            CL0RW02.CL0RMSEL[CL0RWIXM] = "A "; /* Indicate authorized*/
            ;
             /* default quantities*/
            ;
            if (CL0RW02.CLKAUTHQ[CLXARAYX] == 0)
              CL0RW02.CLKAUTHQ[CLXARAYX] = CL0RW02.IV3LNSQ[CLXARAYX];
            end
            if (CL0RW02.CLKAUTHQ[CLXARAYX] > 0) /* need neg qty*/
              CL0RW02.CLKAUTHQ[CLXARAYX] = CL0RW02.CLKAUTHQ[CLXARAYX] * -1;
            end
            ;
          end
          CL0RW01.CL0RWIXM = CL0RW01.CL0RWIXM + 1; /* Increment counter*/
        else
          CL0RW01.CL0RWIXM = 9000; /* End loop*/
        end
      end
    end
  end
  ;
  ;
   /* *************************************/
    /* Check to see if some products*/
      /* are missing authorized quantity*/
      /* values on other pages.*/
   /* if error found, give warning message but dont set*/
   /* error flag, so current screen will be editted in*/
   /* following cl0o14% processes*/
   /* *************************************/
  CL0RW01.CL0RWIXM = 1; /* Set index*/
  CLXREC.CLXARAYX = CLXREC.CLXARY1X + 11;
  while (CL0RW01.CL0RWIXM <= CL0RW01.CL0RWMAX[1]) /* Until end of*/
    if (CL0RW02.SY1STNBR[CL0RWIXM] == " " /* If no data left*/
     && CL0RW02.KUIPRDID[CL0RWIXM] == " ")
      CL0RW01.CL0RWIXM = 9000; /* End loop*/
    else
       /* check data on previous screens*/
      if (CL0RW01.CL0RWIXM < CLXREC.CLXARY1X /* If index not on*/
       && CL0RW02.CLKAUTHQ[CL0RWIXM] == 0)   /* and no quantity*/
        converseLib.validationFailed(524); /* quantity required on diff*/
        KL0RM001.XXXERRID = "KL0R143"; /* Process name*/
        CL0RW01.CL0RWIXM = 9000; /* End loop*/
      else
         /* check data on following screens*/
        if (CL0RW01.CL0RWIXM > CLXREC.CLXARAYX
         && CL0RW02.CLKAUTHQ[CL0RWIXM] == 0) /* and no quantity*/
          converseLib.validationFailed(524); /* quantity required on diff*/
          KL0RM001.XXXERRID = "KL0R143"; /* Process name*/
          CL0RW01.CL0RWIXM = 9000; /* End loop*/
        end
      end
    end
    CL0RW01.CL0RWIXM = CL0RW01.CL0RWIXM + 1; /* Incr index*/
  end
  ;
  ;
  ;
end // end KL0R143

// claim price, PFF, UOM, and Qty
Function KL0R144()
   /* ************************************************************/
   /* *                                                         **/
   /* *      VERIFY THE CLAIM PRICE, PRICE FROM FLAG,           **/
   /* *          UNIT OF MEASURE, AND QUANTITY                  **/
   /* *                                                         **/
   /* *   1) Edits:                                             **/
   /* *                                                         **/
   /* *      - Claim Price - verify that the claim price is     **/
   /* *          entered for a valid price from flag.           **/
   /* *      - Price From Flag - verify that the price from     **/
   /* *          flag is either 'E', 'I', or 'P'.               **/
   /* *      - Unit of Measure - verify that the unit of        **/
   /* *          measure code is valid.                         **/
   /* *      - Quantity - verify that the quantity is entered   **/
   /* *          for a selection code of 'A' and gt 0           **/
   /* *                                                         **/
   /* * 10-04-90 CHELLM Added edit for quality code and         **/
   /* *          reinstalled the edit for unit of measure code  **/
   /* *          because they are not enterable fields.         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R144"; /* Set current process name*/
  ;
   /* ***************************/
       /* Claim Price*/
   /* ***************************/
  if (KL0RM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
   && KL0RM001.CLKCLPRC[CLXLINEX] == 0)  /* and a price not entered*/
    CLXREC.CLXERRF = "Y";
    CL0RW01.CL0RWPSW = "Y"; /* Set the problem switch*/
    KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
    converseLib.validationFailed(217); /* Price must be entered*/
    set KL0RM001.CLKCLPRC[CLXLINEX] cursor, modified, bold;
  else
    if (KL0RM001.CLKPRCFF[CLXLINEX] != "E" /* If PFF not 'E'ntered*/
     && KL0RM001.CLKCLPRC[CLXLINEX] != CL0RW02.CLKCLPRC[CLXARAYX])
      CLXREC.CLXERRF = "Y";
      CL0RW01.CL0RWPSW = "Y"; /* Set the problem switch*/
      KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
      converseLib.validationFailed(222); /* Cannot change price*/
      set KL0RM001.CLKCLPRC[CLXLINEX] cursor, bold;
      KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
    else
      if (KL0RM001.CLMTRTSQ[CLXLINEX] > 0 /* have returned qty*/
       && CL0RW02.CLHSEQNB[CLXARAYX] < CLAREC.CLACSQNB) /* memoed insp*/
        if (KL0RM001.CLKPRCFF[CLXLINEX] != CL0RW02.CLKPRCFF[CLXARAYX]
         && KL0RM001.CLKPRCFF[CLXLINEX] == "E") /* If PFF is 'E'ntered*/
          CLXREC.CLXERRF = "Y";
          CL0RW01.CL0RWPSW = "Y"; /* Set the problem switch*/
          KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
          converseLib.validationFailed(342); /* Cannot have entered price*/
          set KL0RM001.CLKPRCFF[CLXLINEX] cursor, bold;
          KL0RM001.CLKPRCFF[CLXLINEX] = CL0RW02.CLKPRCFF[CLXARAYX];
        end
        if (KL0RM001.CLKCLPRC[CLXLINEX] != CL0RW02.CLKCLPRC[CLXARAYX])
          CLXREC.CLXERRF = "Y";
          CL0RW01.CL0RWPSW = "Y"; /* Set the problem switch*/
          KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
          converseLib.validationFailed(342); /* Cannot have entered price w rtn qty*/
          set KL0RM001.CLKCLPRC[CLXLINEX] cursor, bold;
          KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
        end
      else
        if (KL0RM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
         && KL0RM001.CLKCLPRC[CLXLINEX] != 0   /* and claim price entered*/
         && KL0RM001.SY1STNBR[CLXLINEX] != " ") /* and prod id is entered*/
          CL0RW02.CLKCLPRC[CLXARAYX] = KL0RM001.CLKCLPRC[CLXLINEX];
        end
      end
    end
  end
  ;
   /* ***************************/
     /* Price From Flag*/
   /* ***************************/
  if (KL0RM001.CLKPRCFF[CLXLINEX] == "E" /* Entered price*/
   || KL0RM001.CLKPRCFF[CLXLINEX] == "I" /* Invoice price*/
   || KL0RM001.CLKPRCFF[CLXLINEX] == "P" /* Product price*/
   || KL0RM001.CLKPRCFF[CLXLINEX] == "A")
                                   /* ACTIVE price: CLOSEOUT OVERRIDE*/
     /* next sentence*/
  else
    if (KL0RM001.CLKPRCFF[CLXLINEX] == " "
     && KL0RM001.CLKCLPRC[CLXLINEX] == 0)
      KL0RM001.CLKPRCFF[CLXLINEX] = "P"; /* default to prod price*/
    else
      if (KL0RM001.CLKPRCFF[CLXLINEX] == "O") /* invoice override price*/
        if (CL0RW02.CLKPRCFF[CLXARAYX] == "O")
           /* next sentence*/
        else
           /* user changed to 'o'*/
          KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
          converseLib.validationFailed(201); /* Price from in invalid*/
          CLXREC.CLXERRF = "Y";
          CL0RW01.CL0RWPSW = "Y"; /* Set problem switch*/
          set KL0RM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
        end
      else
        KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
        converseLib.validationFailed(201); /* Price from in invalid*/
        CLXREC.CLXERRF = "Y";
        CL0RW01.CL0RWPSW = "Y"; /* Set problem switch*/
        set KL0RM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
      end
    end
  end
  ;
   /* **************************     reinstalled 10-04-90*/
     /* Unit of Measure*/
   /* ***************************/
  if (KL0RM001.XUMCD[CLXLINEX] == " ")
    KL0RM001.XUMCD[CLXLINEX] = "01";
  end
  ;
  if (KL0RM001.XUMCD[CLXLINEX] in XUMTBL.XUMCD /* If valid UOM*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status activ*/
    if (KL0RM001.XUMCD[CLXLINEX] != CL0RW02.XUMCD[CLXARAYX]) /* if xum changed*/
      CL0RW02.CL0RWUMF[CLXARAYX] = "Y"; /* set xum changed flag on*/
    else
      CL0RW02.CL0RWUMF[CLXARAYX] = "N"; /* set xum changed flag off*/
    end
     /* next sentence*/
  else
    KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
    converseLib.validationFailed(409); /* unit of measure is not val*/
    CLXREC.CLXERRF = "Y";
    CL0RW01.CL0RWPSW = "Y"; /* Set problem switch*/
    set KL0RM001.XUMCD[CLXLINEX] cursor, modified, bold;
  end
   /* **************************   installed 10-04-90*/
     /* Quality Code*/
   /* ***************************/
  if (KL0RM001.XQACD[CLXLINEX] == "  ")
                                   /* default quality if not entered*/
    KL0RM001.XQACD[CLXLINEX] = "01";
  end
  ;
  if (KL0RM001.XQACD[CLXLINEX] in XQATBL.XQACD /* If valid quality*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status activ*/
     /* next sentence*/
  else
    KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
    converseLib.validationFailed(468); /* quality code is not valid*/
    CLXREC.CLXERRF = "Y";
    CL0RW01.CL0RWPSW = "Y"; /* Set problem switch*/
    set KL0RM001.XQACD[CLXLINEX] cursor, modified, bold;
  end
  ;
   /* ***************************/
        /* Quantity*/
   /* ***************************/
   /* ************************************************************/
   /* * default quantities and give correct sign*/
   /* ************************************************************/
   /* if authorized qty eq 0*/
     /* default authorized qty from shipped qty*/
   /* end*/
  ;
  if (CL0RW02.IV3LNSQ[CLXARAYX] == 0 /* no default qty*/
   && KL0RM001.CLKAUTHQ[CLXLINEX] == 0)
    converseLib.validationFailed(231); /* quantity required*/
    KL0RM001.XXXERRID = "KL0R125"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0RM001.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "A")
    if (KL0RM001.CLKAUTHQ[CLXLINEX] == 0)
      KL0RM001.CLKAUTHQ[CLXLINEX] = CL0RW02.IV3LNSQ[CLXARAYX];
    end
  end
  ;
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "A")
     /* need negative quantities*/
    if (KL0RM001.CLKAUTHQ[CLXLINEX] > 0)
      KL0RM001.CLKAUTHQ[CLXLINEX] = KL0RM001.CLKAUTHQ[CLXLINEX] * -1;
      CL0RW01.CL0RWWK1 = KL0RM001.CLKAUTHQ[CLXLINEX];
    else
      CL0RW01.CL0RWWK1 = KL0RM001.CLKAUTHQ[CLXLINEX];
      /* CL0RW01.CL0RWWK1 = CL0RM001.CLKAUTHQ(CLXLINEX) * -1;*/
    end
  end
  ;
  ;
  if (CL0RW01.CL0RWWK1 < KL0RM001.CLMTRTSQ[CLXLINEX]
   && CL0RW02.YCECD[CLXARAYX] != " ")
    KL0RM001.XXXERRID = "KL0R144"; /* Process name*/
    converseLib.validationFailed(388); /* Cannot be greater than*/
    CLXREC.CLXERRF = "Y";
    set KL0RM001.CLKAUTHQ[CLXLINEX] cursor, modified, bold;
  else
    /* IF CL0RM001.SY1STNBR(CLXLINEX) NE ' '; If prod id is entered*/
    CL0RW01.CL0RWTAQ = CL0RW01.CL0RWTAQ - CL0RW02.CLKAUTHQ[CLXARAYX];
    CL0RW02.CLKAUTHQ[CLXARAYX] = KL0RM001.CLKAUTHQ[CLXLINEX];
    CL0RW01.CL0RWTAQ = CL0RW01.CL0RWTAQ + CL0RW02.CLKAUTHQ[CLXARAYX];
    /* END ;*/
  end
    /* END ;*/
   /* END ;*/
  ;
  ;
end // end KL0R144

// validate customer product id
Function KL0R145()
   /* *************************************************************/
   /* *                                                          **/
   /* *            SELECT FROM DCUST.VCUSKU01                    **/
   /* *                                                          **/
   /* *   1) Select the row from the customer cross reference    **/
   /* *      table.                                              **/
   /* * Maintenance history                                      **/
   /* *06-10-91 twatso  db2 structure changes.  kuirec           **/
   /* *                 new iomod io05790                        **/
   /* *                                                          **/
   /* *08-13-97 njana   db2 table version change for Cust Prod ID**/
   /* *                 Replacing the table DCUST.VCUSKU01 by    **/
   /* *                 DCUST.VCUCPX01                           **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R145"; /* Set current process name*/
  ;
  if (KL0RM001.KUIPRDID[CLXLINEX] == " ") /* If customer prod id eq ' '*/
    CL0RW02.KUIPRDID[CLXARAYX] = " ";
  else
    ;
    set WCU1710 empty; /* Initialize the record*/
    /* TCS change begins on 08-13-97*/
    WCU1710-INQUIRY-OPTION = "2";
    WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID;
    WCU1710-XNX-DEPT-ID-XREF = 0;
    if (CLAREC.IV0IVCID > 0) /* if invoice id exits*/
      WCU1710-CU-PROD-XREF-EDT = CL0RW01.CL0RWIDT; /* get the*/
                                  /* primary invoice date*/
    else
      WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT; /* get claimset dt*/
    end
    ;
    WCU1710-IN-CU-CUST-PROD-ID = KL0RM001.KUIPRDID[CLXLINEX];
    WCU1710-IN-CU-PROD-SZ-ID = "   ";
    ;
    call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* validate the customer id*/
    if (WCU1710-RETURN-CODE == 0)
      CL0RW02.KUIPRDID[CLXARAYX] = KL0RM001.KUIPRDID[CLXLINEX];
      KL0RM001.SY1STNBR[CLXLINEX] = WCU1710.SY-STY-NBR[1];
      KL0RM001.SY2CLRID[CLXLINEX] = WCU1710.SY-COLR-CD-ID[1];
      KL0RM001.XDMCD[CLXLINEX] = WCU1710.XDM-DIM-CD[1];
    else
      if (WCU1710-RETURN-CODE == 1)
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0RM001.XXXERRID = "KL0R145"; /* Process name*/
        converseLib.validationFailed(433); /* Customer prod not valid*/
        CL0RW01.CL0RWPSW = "Y"; /* Indicate problem*/
        set KL0RM001.KUIPRDID[CLXLINEX] cursor, modified, bold;
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCUCPX01";
        XPCL010();
      end
    end
    ;
  end
   /* TCS change ends here-08-13-97*/
  ;
  ;
end // end KL0R145

// validate Nike product id
Function KL0R146()
   /* *************************************************************/
   /* **/
   /* SELECT FROM DPROD.VCOLOR02                    **/
   /* **/
   /* 1) Select the row from the product file to see if it   **/
   /* exists.                                             **/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y     L O G    **/
   /* *----------------------------------------------------------**/
   /* *   DATE   PGMR    DESCRIPTION                             **/
   /* *----------------------------------------------------------**/
   /* 10-04-90 CHELLM  Only default the XQA and XUM  if none   **/
   /* WAS entered by the user.                **/
   /* 03-13-92 GDECKE  MARCH DB2 TABLE CHANGES.                **/
   /* 04-13-92 TWATSO  APRIL DB2 TABLE CHANGES.                **/
   /* 11-12-93 GDECKE  REMOVE OVERLAPPING MOVE                 **/
   /* 10-25-00 GDECKE  REMOVE TEST FOR PACKAGE COMPONENT       **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R146"; /* Set current process name*/
  ;
  ;
  if (KL0RM001.SY1STNBR[CLXLINEX] == " " /* If Nike prod id eq ' '*/
   && KL0RM001.SY2CLRID[CLXLINEX] == " " /* user enters qty only*/
   && KL0RM001.XDMCD[CLXLINEX] == " ")  
    CL0RW02.SY1STNBR[CLXARAYX] = " ";
    CL0RW02.SY2CLRID[CLXARAYX] = " ";
    CL0RW02.XDMCD[CLXARAYX] = " ";
    CL0RW02.XQACD[CLXARAYX] = " "; /* 10-04-90*/
    CL0RW02.XEGCD[CLXARAYX] = "000"; /* 03-13-92*/
    CL0RW02.XBK-BK-SESN-CD[CLXARAYX] = " "; /* 03-13-92*/
    CL0RW02.OP-BK-YR[CLXARAYX] = 0; /* 03-13-92*/
    CL0RW02.OP-BK-MO[CLXARAYX] = 0; /* 04-13-92*/
    CL0RW02.XUMCD[CLXARAYX] = " "; /* 10-04-90*/
    CLXREC.CLXERRF = "Y"; /* Indicate error*/
    KL0RM001.XXXERRID = "KL0R146"; /* Process name*/
    CL0RW01.CL0RWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(200); /* Nike prod id not valid*/
    set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
    set KL0RM001.SY2CLRID[CLXLINEX] modified, bold;
    set KL0RM001.XDMCD[CLXLINEX] modified, bold;
    CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1; /* ability to 'x' prd 11/88*/
    return;
  end
  ;
  ;
   /* *********************************************/
    /* user can enter products on screen only when*/
     /* - have no invoice on claim*/
     /* - prod is part of a prepack*/
   /* *********************************************/
  ;
  ;
  CLXREC.CLXTESTF = "N"; /* init prepack flag*/
  if (CL0RW02.SY1STNBR[CLXARAYX] == " "
   && CL0RW02.SY2CLRID[CLXARAYX] == " "
   && CL0RW02.XDMCD[CLXARAYX] == " ") /* have new entry*/
    if (KL0RM001.IV0IVCID == 0)
       /* okay to add prds if no invoice attached*/
      CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
    else
      ;
      if (CLAREC.YITCD in YITTBL.YITCD)
        if (YITTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if active status*/
          if (YITTBL.YITRECDF[sysVar.arrayIndex] == "O" /* if old ibm invoice type*/
           || YITTBL.YITRECDF[sysVar.arrayIndex] == "D") /* or old dec invoice type*/
            CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;
            /* ok to add products if not current ibm invoice*/
          else
            /* need to validate product id before validating if this*/
            /* product is part of a prepack*/
            ;
            CLXREC.CLXTESTF = "Y";
          end
        else
          converseLib.validationFailed(128); /* invalid invoice/order indicator*/
          CLXREC.CLXTESTF = "Y";
        end
      else
                /* need to validate product id before validating if this*/
                /* product is part of a prepack*/
        ;
        CLXREC.CLXTESTF = "Y";
      end
    end
  end
  ;
  ;
    /* *****************************/
       /* validate product id*/
    /* *****************************/
  ;
  ;
  set SYCREC empty; /* Product table*/
  SYCREC.XGPCD = CLAREC.XGPCD; /* Gpc code*/
  SYCREC.SY1STNBR = KL0RM001.SY1STNBR[CLXLINEX]; /* Style*/
  if (KL0RM001.SY2CLRID[CLXLINEX] == " ")
    KL0RM001.SY2CLRID[CLXLINEX] = "00";
  end
  if (KL0RM001.XDMCD[CLXLINEX] == " ")
    KL0RM001.XDMCD[CLXLINEX] = "00";
  end
  SYCREC.SY2CLRID = KL0RM001.SY2CLRID[CLXLINEX]; /* Color*/
  SYCREC.XDMCD = KL0RM001.XDMCD[CLXLINEX]; /* Dimension*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
     /* *********************************************/
               /* handle prepacks*/
    ;
    if (CLXREC.CLXTESTF == "N") /* not looking for component of prepack*/
       /* next sentence*/
    else
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0RM001.XXXERRID = "KL0R146"; /* Process name*/
      converseLib.validationFailed(636); /* selection is not valid*/
      set KL0RM001.CL0RMSEL[CLXLINEX] cursor, bold;
      return;
    end
    /* THIS TEST REMOVED 10-25-00 BY GDECKE*/
    /* THIS PREPACK CONDITION NOT EXPECTED TO HAPPEN PLUS PRICE WILL*/
    /* NOT BE AVAILABLE FOR PREPACK COMPONENTS ON DPROD.VPGSTY01*/
       /* look up as partial package*/
     /* SET SYJREC EMPTY;*/
     /* MOVE SYCREC.XGPCD TO SYJREC.XGPCD;*/
     /* MOVE SYCREC.SY1STNBR TO SYJREC.SY1STNBR;*/
     /* MOVE SYCREC.SY2CLRID TO SYJREC.SY2CLRID;*/
     /* MOVE SYCREC.XDMCD TO SYJREC.XDMCD;*/
    ;
     /* CALL IO2130 'S2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
     /* CALL IO2130 'N2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
     /* MOVE 'N' TO CLXREC.CLXTESTF; /* re-init prepack flag*/
    ;
     /* WHILE SQLCA.SQLCODE EQ 0     /* look at all prepack group ids*/
       /* AND CLXREC.CLXTESTF EQ 'N';*/
    ;
       /* IF SYJREC.SYJPGNBR IN CL0RW02.SY1STNBR;/* found group id*/
         /* MOVE 'Y' TO CLXREC.CLXTESTF;*/
       /* ELSE;*/
         /* CALL IO2130 'N2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
       /* END;*/
     /* END;*/
    ;
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE;/* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
    ;
     /* CALL IO2130 'C2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE;/* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
     /* IF CLXREC.CLXTESTF EQ 'Y';   /* found component of prepack*/
       /* CLXREC.CLXLSTAX = CLXREC.CLXLSTAX + 1;/* last array entry*/
       /* MOVE 'Y' TO CL0RW02.CL0RWPPF(CLXARAYX);/* set prepack flag*/
         /* default price to be used in price calculation cl0r147*/
       /* MOVE SYJREC.SYJSTYPR TO CL0RW02.CLKCLPRC(CLXARAYX);*/
     /* ELSE;                        /* not part of prepack*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;/* Indicate error*/
       /* MOVE 'KL0R146' TO KL0RM001.XXXERRID;/* Process name*/
       /* MOVE 636 TO EZEMNO;        /* selection is not valid*/
       /* SET KL0RM001.CL0RMSEL(CLXLINEX) CURSOR,BRIGHT;*/
       /* EZERTN;*/
     /* END;*/
    /* END;*/
    ;
    ;
     /* ******************************************** 10-04-90*/
     /* if the unit of measure has been changed and it's original*/
     /* prepack xum from the product table has been chngd to eachs*/
     /* keep the xum-changed flag set to 'y' so the price will be*/
     /* converted to eachs too. Else, set the flag back to 'n' so*/
     /* the price will default from the product table.*/
    ;
    if (KL0RM001.XUMCD[CLXLINEX] == "  ") /* default uom of not entered*/
      KL0RM001.XUMCD[CLXLINEX] = SYCREC.XUMCD;
    end
    ;
    if (KL0RM001.XUMCD[CLXLINEX] != SYCREC.XUMCD /* if xum diff from DPROD*/
     && CL0RW02.CL0RWUMF[CLXARAYX] == "Y")      
      if (SYCREC.XUMCD != "01" /* from a prepack xum*/
       && KL0RM001.XUMCD[CLXLINEX] == "01") /* to eachs*/
        /* next sentence*/
      else
        if (KL0RM001.XUMCD[CLXLINEX] == "R "
         || KL0RM001.XUMCD[CLXLINEX] == "L ")
          /* next sentence*/
        else
          CL0RW02.CL0RWUMF[CLXARAYX] = "N"; /* set flag off*/
        end
      end
    end
    ;
    ;
    KL0RS03(); /* Select the RA item to see if already*/
                                   /* authorized*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0RW01.CL0RWEFL = "N"; /* Set product exist flag to no*/
      /* **********************************************************/
        /* If the RA item exists in the DCLAIM.VRAITM01 database*/
         /* then check to see if that particular product exists*/
          /* in the current working storage.  If it does exist in*/
          /* WS, then give user a message indicating fast path*/
          /* positioning. Else just indicate product cannot be*/
          /* entered because it is already authorized.*/
      /* **********************************************************/
      KL0RS04(); /* Check to see if product exists in WS*/
      if (CL0RW01.CL0RWEFL == "Y" /* If the product is in WS*/
       && CL0RW02.SY1STNBR[CLXARAYX] == " ") /* and user is adding*/
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0RM001.XXXERRID = "KL0R146"; /* Process name*/
        converseLib.validationFailed(212);
                                   /* prod exist as RA - Fast path position*/
        CL0RW01.CL0RWPSW = "Y"; /* Indicate problem*/
        if (KL0RM001.KUIPRDID[CLXLINEX] != " ") /* If customer id exists*/
          set KL0RM001.KUIPRDID[CLXLINEX] modified, bold;
        end
        set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        set KL0RM001.SY2CLRID[CLXLINEX] modified, bold;
        set KL0RM001.XDMCD[CLXLINEX] modified, bold;
      end
    else
      CL0RW02.SY1STNBR[CLXARAYX] = KL0RM001.SY1STNBR[CLXLINEX];
      CL0RW02.SY2CLRID[CLXARAYX] = KL0RM001.SY2CLRID[CLXLINEX];
      CL0RW02.XDMCD[CLXARAYX] = KL0RM001.XDMCD[CLXLINEX];
      if (KL0RM001.XQACD[CLXLINEX] == " ")
        CL0RW02.XQACD[CLXARAYX] = "01";
        KL0RM001.XQACD[CLXLINEX] = "01";
      else
        CL0RW02.XQACD[CLXARAYX] = KL0RM001.XQACD[CLXLINEX];
      end
      if (KL0RM001.XUMCD[CLXLINEX] == " ") /* 10-04-90*/
        KL0RM001.XUMCD[CLXLINEX] = SYCREC.XUMCD;
        CL0RW02.XUMCD[CLXARAYX] = SYCREC.XUMCD;
      else
        CL0RW02.XUMCD[CLXARAYX] = KL0RM001.XUMCD[CLXLINEX];
      end
      if (KL0RM001.CL0RMSEL[CLXLINEX] == " ") /* If no selection*/
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0RM001.XXXERRID = "KL0R146"; /* Process name*/
        converseLib.validationFailed(429); /* Customer prod not valid*/
        CL0RW01.CL0RWPSW = "Y"; /* Indicate problem*/
        set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0RM001.XXXERRID = "KL0R146"; /* Process name*/
      CL0RW01.CL0RWPSW = "Y"; /* Indicate problem*/
      if (KL0RM001.KUIPRDID[CLXLINEX] != " ") /* If customer id exists*/
        converseLib.validationFailed(433); /* Customer prod not valid*/
        set KL0RM001.KUIPRDID[CLXLINEX] bold;
      else
        converseLib.validationFailed(200); /* Nike prod id not valid*/
      end
      set KL0RM001.SY1STNBR[CLXLINEX] cursor, bold;
      set KL0RM001.SY2CLRID[CLXLINEX] bold;
      set KL0RM001.XDMCD[CLXLINEX] bold;
    else
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* move in key*/
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0R146

// select appropriate claim price
Function KL0R147()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE APPROPRIATE CLAIM PRICE                **/
   /* *                                                          **/
   /* *     1) If the price from flag was changed                **/
   /* *        - If price from flag is equal to 'E', then        **/
   /* *          save the price from flag and continue on.       **/
   /* *        - If price from flag is equal to 'I', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          invoice product item.                           **/
   /* *        - If price from flag is equal to 'P', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          product.                                        **/
   /* *                                                          **/
   /* *************************************************************/
   /* *      M A I N T E N A N C E    H I S T O R Y    L O G     **/
   /* *----------------------------------------------------------**/
   /* *   DATE   PGMR   DESCRIPTION                              **/
   /* *----------------------------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES.               **/
   /* * 04-13-92 TWATSO   APRIL DB2 TABLE CHANGES.               **/
   /* * 07-25-01 DSINHA  Default the product price to zero       **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R147"; /* Set current process name*/
  ;
  ;
  if (KL0RM001.CLKPRCFF[CLXLINEX] == "I"
   && CL0RW01.CL0RWHPO == "Y") /* have price override*/
    CL0RW02.CLKPRCFF[CLXARAYX] = "O"; /* force thru edit*/
  end
  ;
  ;
   /* If price from flag changed*/
  if (KL0RM001.CLKPRCFF[CLXLINEX] != CL0RW02.CLKPRCFF[CLXARAYX]
   || KL0RM001.CLKCLPRC[CLXLINEX] == 0
   || CL0RW02.CL0RWUMF[CLXARAYX] == "Y") /* uom has changed*/
    ;
    if (KL0RM001.CLKPRCFF[CLXLINEX] == "E")
      CL0RW02.CLKPRCFF[CLXARAYX] = KL0RM001.CLKPRCFF[CLXLINEX];
    else
         /* ***************************/
         /* price must be from invoice*/
         /* ***************************/
      if (KL0RM001.CLKPRCFF[CLXLINEX] == "I")
        if (KL0RM001.IV0IVCID > 0) /* and invoice number exists*/
          IV3REC.IV0PARTN = CL0RW03.IV0PARTN[CL0RWINX];
          IV3REC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
          IV3REC.OP2LNINB = CL0RW02.OP2LNINB[CLXARAYX];
          ;
          call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* read*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
             /* look for price overrides*/
            ;
            if (CL0RW01.CL0RWHPO == "Y") /* have price override*/
              CL6REC.IV0PARTN = CL0RW03.IV0PARTN[CL0RWINX];
              CL6REC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
              CL6REC.XGPCD = CLAREC.XGPCD;
              CL6REC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
              CL6REC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
              CL6REC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
              CL6REC.XQACD = CL0RW02.XQACD[CLXARAYX];
              CL6REC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
              CL6REC.SY5SZID = 0;
              ;
              KL0RS95(); /* select set price override*/
              ;
              if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
               && CL6REC.CLHMEMNB > 0)    
                IV3REC.IV3NLNUP = CL6REC.CL6OVPRC;
                IV3REC.IV3GLNUP = CL6REC.CL6OVPRC;
                KL0RM001.CLKPRCFF[CLXLINEX] = "O";
                ;
              end
              ;
              call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
              ;
            end
            ;
            if (CL0RW01.IVANBLFL == "Y") /* net bill flag*/
              KL0RM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3NLNUP;
              CL0RW02.CLKCLPRC[CLXARAYX] = IV3REC.IV3NLNUP;
            else
              KL0RM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3GLNUP;
              CL0RW02.CLKCLPRC[CLXARAYX] = IV3REC.IV3GLNUP;
            end
            ;
             /* if the uom was a half pair on the ivc and now has*/
             /* changed back to a whole pair, get the price from the*/
             /* product file.*/
            ;
            if (IV3REC.XUMCD == "R "
             || IV3REC.XUMCD == "L ")
              if (CL0RW02.XUMCD[CLXARAYX] == "01")
                ;
                KL0RS05(); /* get price from product file*/
                ;
              else
                 /* check the xum code, if its changed, but not back to*/
                 /* it's original value, recalculate the claim price.*/
                if (IV3REC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
                  KL0RS14(); /* recalculate the claim price.*/
                end
              end
              ;
            else
               /* check the xum code, if its changed, but not back to*/
               /* it's original value, recalculate the claim price.*/
              if (IV3REC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
                KL0RS14(); /* recalculate the claim price.*/
              end
              ;
            end
            ;
            CL0RW02.XQACD[CLXARAYX] = IV3REC.XQACD; /* quality code*/
            CL0RW02.XEGCD[CLXARAYX] = IV3REC.XEGCD; /* ENGINEER DIFF*/
            CL0RW02.XBK-BK-SESN-CD[CLXARAYX] = IV3REC.XBK-BK-SESN-CD; /* BOOK SEASON*/
            CL0RW02.OP-BK-YR[CLXARAYX] = IV3REC.OP-BK-YR; /* BOOK YEAR*/
            CL0RW02.OP-BK-MO[CLXARAYX] = IV3REC.OP-BK-MO; /* BOOK YEAR*/
            ;
            CL0RW02.CLKPRCFF[CLXARAYX] = KL0RM001.CLKPRCFF[CLXLINEX];
          else
            KL0RM001.XXXERRID = "KL0R147"; /* Process name*/
            converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
            set KL0RM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
            CLXREC.CLXERRF = "Y";
            CL0RW02.CLKCLPRC[CLXARAYX] = 0;
          end
        else
          KL0RM001.XXXERRID = "KL0R147"; /* Process name*/
          converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
          set KL0RM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          CL0RW02.CLKCLPRC[CLXARAYX] = 0;
        end
        ;
      else
           /* ********************************/
           /* price is taken from the product*/
           /* ********************************/
        if (KL0RM001.CLKPRCFF[CLXLINEX] == "P")
          ;
          if (CL0RW02.CL0RWPPF == "Y") /* if have prepack component*/
             /* next sentence - price was defaulted from prepack table*/
          else
            KL0RS05(); /* get product price*/
             /* check the xum code, if its changed, but not back to*/
             /* it's original value, recalculate the claim price.*/
            if (SYCREC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
              KL0RS14(); /* recalculate the claim price.*/
            end
          end
          ;
   /* ** TCS Change begin - 07/25/01*/
   /* IF CL0RW02.CLKCLPRC(CLXARAYX) EQ 0;*/
   /* MOVE 'KL0R147' TO KL0RM001.XXXERRID;/* Process name*/
   /* MOVE 226 TO EZEMNO;    /* warn-prod price not found*/
   /* SET KL0RM001.CLKCLPRC(CLXLINEX) CURSOR,BRIGHT;*/
   /* ELSE;*/
   /* MOVE KL0RM001.CLKPRCFF(CLXLINEX) CL0RW02.CLKPRCFF(CLXARAYX);*/
   /* END;*/
   /* ** TCS Change end - 07/25/01*/
        end
      end
    end
  end
  ;
  ;
end // end KL0R147

// calculation edit for ttl & UOM
Function KL0R148()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CALCUALTION EDITS FOR UNIT OF MEASURE            **/
   /* *             PRICE AND CLAIM VALUE TOTAL                  **/
   /* *                                                          **/
   /* *    1) If the unit of measure was changed, then calculate **/
   /* *       the new price for that unit.                       **/
   /* *    2) Calculate the claim value for the product.         **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R148"; /* Set current process name*/
  ;
  ;
   /* *************************************/
    /* Get unit of measure converted*/
      /* price.*/
   /* *************************************/
   /* IF CL0RM001.XUMCD(CLXLINEX) EQ CL0RW02.XUMCD(CLXARAYX);*/
    /* ; continue on*/
   /* ELSE ;*/
    /* ;IF CL0RM001.XUMCD(CLXARAYX) IN XUMTBL.XUMCD; Find conv fa*/
    /* ;  MOVE XUMTBL.XUMCONVF(EZETST) TO CL0RW01.CL0RWWK2; work*/
    /* ;END ;*/
    /* ;IF CL0RW02.XUMCD(CLXARAYX) EQ ' '    ; entering product*/
    /* ;  MOVE CL0RW01.CL0RWWK2 TO CL0RW01.CL0RWWK1; use same val*/
    /* ;ELSE ;*/
    /* IF CL0RW02.XUMCD(CLXARAYX) IN XUMTBL.XUMCD; Find conv fact*/
      /* MOVE XUMTBL.XUMCONVF(EZETST) TO CL0RW01.CL0RWWK1; work v*/
    /* END ;*/
    /* ;END ;*/
    /* MOVE CL0RM001.XUMCD(CLXLINEX) TO CL0RW02.XUMCD(CLXARAYX);*/
    /* IF CL0RM001.CLKPRCFF(CLXLINEX) EQ 'I'; Price from is 'I'*/
      /* OR CL0RM001.CLKPRCFF(CLXLINEX) EQ 'P';   or 'P'*/
      /* CL0RW01.CL0RWWK3 = CL0RM001.CLKCLPRC(CLXLINEX) / CL0RW01*/
      /* ;CL0RW01.CL0RWWK3 = CL0RW01.CL0RWWK3 * CL0RW01.CL0RWWK2;*/
      /* MOVE CL0RW01.CL0RWWK3 TO CL0RW02.CLKCLPRC(CLXARAYX);*/
      /* MOVE CL0RW01.CL0RWWK3 TO CL0RM001.CLKCLPRC(CLXLINEX);*/
    /* END ;*/
   /* END ;*/
  ;
  ;
   /* *************************************/
    /* Calculate the claim value.*/
   /* *************************************/
  ;
  CL0RW01.CL0RWWK1 = CL0RW02.CLKAUTHQ[CLXARAYX]; /* set wk values*/
  CL0RW01.CL0RWWK3 = CL0RW02.CLKCLPRC[CLXARAYX];
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "A")
    CL0RW01.CL0RWTCV = CL0RW01.CL0RWTCV - CL0RW02.CLAESTVL[CLXARAYX];
    CL0RW02.CLAESTVL[CLXARAYX] = CL0RW01.CL0RWWK1 * CL0RW01.CL0RWWK3;
    CL0RW01.CL0RWTCV = CL0RW01.CL0RWTCV + CL0RW02.CLAESTVL[CLXARAYX];
    KL0RM001.CLAESTVL[CLXLINEX] = CL0RW02.CLAESTVL[CLXARAYX];
  else /* If deleting line*/
    ;
    CL0RW01.CL0RWTAQ = CL0RW01.CL0RWTAQ - CL0RW02.CLKAUTHQ[CLXARAYX];
    CL0RW01.CL0RWTRQ = CL0RW01.CL0RWTRQ - CL0RW02.CLMTRTSQ[CLXARAYX];
    CL0RW01.CL0RWTCV = CL0RW01.CL0RWTCV - CL0RW02.CLAESTVL[CLXARAYX];
  end
  ;
end // end KL0R148

// validate selection codes
Function KL0R149()
   /* *************************************************************/
   /* *                                                          **/
   /* *           VALIDATE THE SELECTION CODES                   **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R149"; /* Set current process name*/
  ;
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "  " /* If selection is blank*/
   || KL0RM001.CL0RMSEL[CLXLINEX] == "A"  /* or 'a'*/
   || KL0RM001.CL0RMSEL[CLXLINEX] == "X"  /* or 'x'*/
   || KL0RM001.CL0RMSEL[CLXLINEX] == "AA") /* or 'aa'*/
     /* continue on*/
  else
    CLXREC.CLXERRF = "Y"; /* Set error switch*/
    KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
    converseLib.validationFailed(8); /* Selection invalid*/
    set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
    return;
  end
  ;
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "X")
    if (CL0RW02.CL0RWSFL[CLXARAYX] == "I") /* record from invoice*/
      converseLib.validationFailed(459); /* cannot delete invoice products*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
      set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
      return;
    end
  end
  ;
  ;
  if (KL0RM001.CL0RMSEL[CLXLINEX] == "A"
   && CL0RW02.CL0RWSFL[CLXARAYX] == " " /* new record*/
   && CL0RW02.CL0RWUMF[CLXARAYX] != "Y") /* and not changing uom code*/
    if (KL0RM001.IV0IVCID != 0)
      if (CLAREC.YITCD in YITTBL.YITCD)
        if (YITTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status (some inact)*/
          if (YITTBL.YITRECDF[sysVar.arrayIndex] == "O"
           || YITTBL.YITRECDF[sysVar.arrayIndex] == "D") /* dec are inactive*/
           /* next sentence  ok if old ibm or dec invoice*/
          else
            converseLib.validationFailed(8); /* selection not valid*/
            CLXREC.CLXERRF = "Y"; /* Set error switch*/
            KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
            set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
            return;
          end
        else
          converseLib.validationFailed(128); /* invalid invoice/ord ind.*/
          CLXREC.CLXERRF = "Y"; /* Set error switch*/
          KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
          return;
        end
      else
        converseLib.validationFailed(8); /* selection not valid*/
        CLXREC.CLXERRF = "Y"; /* Set error switch*/
        KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
        set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(8); /* selection not valid*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0RM001.XXXERRID = "KL0R149"; /* Process name*/
      set KL0RM001.CL0RMSEL[CLXLINEX] cursor, modified, bold;
      return;
    end
  end
  ;
  ;
   /* move selection from map to working storage*/
  CL0RW02.CL0RMSEL[CLXARAYX] = KL0RM001.CL0RMSEL[CLXLINEX];
  ;
end // end KL0R149

// process screen
Function KL0R150()
   /* *************************************************************/
   /* *                                                          **/
   /* *          PROCESS THE SCREEN UPDATE VALUES                **/
   /* *                                                          **/
   /* *  1) If all the products were authorized with a valid     **/
   /* *     selection of 'AA', then process the entire WS of     **/
   /* *     authorized products.                                 **/
   /* *  2) If all the products were not authorized then process **/
   /* *     only the updated products associated with the        **/
   /* *     present screen of data.                              **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the wild card   **/
   /* *          values when scanning RAITMs.                    **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R150";
  ;
  ;
  ;
  if (CL0RW01.CL0RWAAF == "Y") /* If all the products authorized*/
    CL0RW01.CL0RWAAF = "N"; /* Reset the flag*/
  end
  ;
   /* ********************************************/
      /* If all products not authorized*/
   /* ********************************************/
  CLXREC.CLXARAYX = 1; /* Init array index*/
  while (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX) /* While le max prods*/
    if (CL0RW02.CL0RMSEL[CLXARAYX] == "A") /* If product authorized*/
      if (CL0RW02.CL0RWCHF[CLXARAYX] == "Y") /* If product indicates change*/
        KL0R151(); /* Select the RA product row*/
        if (SQLCA.VAGen_SQLCODE == 0 /* If product was found*/
         && CLKREC.ZZZCHGCT == CL0RW02.ZZZCHGCT[CLXARAYX])
          ;
          /* ********************************************/
              /* If product price was changed*/
          /* ********************************************/
          if (CLKREC.CLKCLPRC != CL0RW02.CLKCLPRC[CLXARAYX])
            KL0R152(); /* Update the def and rts item price*/
          end
          ;
          KL0R153(); /* Update the RA item row*/
          ;
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* If product was found*/
           && CLKREC.ZZZCHGCT != CL0RW02.ZZZCHGCT[CLXARAYX]) /* and chgd*/
            CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
            CLXREC.CLXBLDAY = "Y"; /* Rebuild array*/
            CLXREC.CLXERRF = "Y";
            converseLib.validationFailed(18); /* Database updated by another user*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* Reset updates*/
            return;
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* If product was not found*/
              KL0R154(); /* Add the new RA item row*/
            end
          end
        end
      end
    else
      if (CL0RW02.CL0RMSEL[CLXARAYX] == "X") /* If product removed*/
        KL0R158(); /* Delete the RA item row*/
        CLXREC.CLXBLDSC = "Y"; /* show 0 in qty fields*/
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Increment line index*/
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1; /* Increment array index*/
  end
  ;
  if (CLXREC.CLXERRF == "N")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  end
  ;
  KL0R155(); /* Select the RA header row*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If product was found*/
    /* IF CL0RW02.CLJTATHQ EQ 0      ; and quantity is zero*/
      /* AND CL0RW01.CLJRAIND EQ 'N' ; no items exist*/
      /* PERFORM CL0R159             ; delete the RA header row*/
    /* ELSE ;*/
    if (CL0RW02.CLJTATHQ != CLJREC.CLJTATHQ) /* and quantity changed*/
      KL0R156(); /* Update the RA header row*/
    end
    /* END ;*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* If product was not found*/
     && CL0RW02.CLJTATHQ > 0)      /* and auth qty exists to add*/
      KL0R157(); /* Add the new RA Header row*/
    end
  end
  ;
  ;
   /* **************************************/
   /* update claim header*/
   /* **************************************/
  ;
    /* set estimated claim value equal to total value of all*/
    /* authorized products (include all invoices)*/
  ;
     /* **********************/
     /* fetch dclaim.vraitm01*/
     /* **********************/
  ;
  CL0RW01.CLAESTVL = 0; /* total claim value*/
  CL0RW01.CL0RWCVL = 0; /* total claim value work area*/
  ;
  CLKREC.CLACLMNB = KL0RM001.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.IV0PARTN = "*";
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**"; /* 10-04-90*/
  CLKREC.XQACD = "**"; /* 10-04-90*/
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* **RA ITEM RECORD***/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    TA1REC.TA1LOCAT[3] = "CL0R150";
    CLXREC.CLXWFLDN = CLKREC.CLACLMNB; /* 072089*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (CLKREC.SY5SZID == 0) /* looking at summary record*/
      CL0RW01.CL0RWCVL = CLKREC.CLKAUTHQ * CLKREC.CLKCLPRC;
      CL0RW01.CLAESTVL = CL0RW01.CLAESTVL + CL0RW01.CL0RWCVL;
    end
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "NEXT";
    TA1REC.TA1LOCAT[3] = "CL0R150";
    CLXREC.CLXWFLDN = CLKREC.CLACLMNB; /* 072089*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  CL0RW01.CLAESTVL = CL0RW01.CLAESTVL * -1; /* R/As have negative value*/
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    CLXREC.CLXWFLDN = CLKREC.CLACLMNB; /* 072089*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  ;
     /* **********************/
     /* fetch dclaim.vcladj01*/
     /* **********************/
  ;
  CL0RW01.CLADBOCL = "N"; /* init debits-on-claim-flag*/
  CLRREC.CLACLMNB = KL0RM001.CLACLMNB;
  CLRREC.CLHSEQNB = CLAREC.CLACSQNB;
  CLRREC.SY1STNBR = "******";
  CLRREC.SY2CLRID = "***";
  CLRREC.XDMCD = "**";
  CLRREC.XGPCD = "**";
  CLRREC.CLICRDFL = "*";
  ;
  ;
  call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* **CLADJ RECORD***/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    CLXREC.CLXCPROC = "CL0R150";
    TA1REC.TA1LOCAT[2] = "SELECT";
    XPCL010();
  end
  ;
  call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (CLRREC.CLICRDFL == "C") /* have credit*/
      CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * -1;
    end
    ;
    if (IVAREC.IVANBLFL == "Y")
      CL0RW01.CL0RWCVL = CLRREC.CLRCLMQ * CLRREC.CLNNTPRC;
    else
      CL0RW01.CL0RWCVL = CLRREC.CLRCLMQ * CLRREC.CLNGRPRC;
    end
    CL0RW01.CLAESTVL = CL0RW01.CLAESTVL + CL0RW01.CL0RWCVL;
     /* check debit-on-claim-flag for updating*/
    if (CLRREC.CLICRDFL == "D")
      CL0RW01.CLADBOCL = "Y";
    end
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
    ;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[1] = "CL0R150";
    TA1REC.TA1LOCAT[2] = "NEXT";
    XPCL010();
  end
  call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[1] = "CL0R150";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    XPCL010();
  end
  ;
  ;
   /* if changed number of debit adjustments on cladj*/
   /* update: clarec.cl-dbt-on-clm-fl*/
  ;
  ;
  if (CL0RW02.CLJTATHQ > 0)
    CL0RW01.CL0RWWK1 = CL0RW02.CLJTATHQ * -1;
  else
    CL0RW01.CL0RWWK1 = CL0RW02.CLJTATHQ;
  end
  ;
  if (CL0RW01.CLAESTVL != CLAREC.CLAESTVL
   || CL0RW01.CLADBOCL != CLAREC.CLADBOCL
   || CL0RW01.CL0RWWK1 != CLAREC.CLATQTY)
    CL0RW01.CL0RWUPA = "Y";
    CLAREC.CLAESTVL = CL0RW01.CLAESTVL;
    CLAREC.CLADBOCL = CL0RW01.CLADBOCL;
    CLAREC.CLATQTY = CL0RW01.CL0RWWK1; /* show correct total*/
  end
  ;
  ;
  if (CL0RW01.CL0RWUPA == "Y") /* need to update clarec*/
    ;
    ;
    CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "UPDATE";
      XPCL010();
    end
  end
  ;
  ;
  ;
end // end KL0R150

// select row from VRAITM01
Function KL0R151()
   /* *************************************************************/
   /* *                                                          **/
   /* *         SELECT THE ROW FROM DCLAIM.VRAITM01              **/
   /* *                                                          **/
   /* *   1) Move in the screen keys and select the unique       **/
   /* *      RA product item row from the table.                 **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD  to the select     **/
   /* *          unique of DCLAIM.VRAITM01.                      **/
   /* * 04-13-92 TWATSO  APRIL DB2 TABLE CHANGES - OP-BK-MO      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R151";
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.IV0IVCID = KL0RM001.IV0IVCID; /* 072089 add key field*/
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLKREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLKREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLKREC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
  CLKREC.XQACD = CL0RW02.XQACD[CLXARAYX];
  CLKREC.XEGCD = CL0RW02.XEGCD[CLXARAYX];
  CLKREC.XBK-BK-SESN-CD = CL0RW02.XBK-BK-SESN-CD[CLXARAYX];
  CLKREC.OP-BK-YR = CL0RW02.OP-BK-YR[CLXARAYX];
  CLKREC.OP-BK-MO = CL0RW02.OP-BK-MO[CLXARAYX];
  CLKREC.SY5SZID = 0;
  CLKREC.CLKCRFL = "Y"; /* 072089 'Y' for defectives*/
  ;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 072089*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  ;
end // end KL0R151

// Select set of defective items
Function KL0R152()
   /* *************************************************************/
   /* *                                                          **/
   /* *         UPDATE THE ROW IN VCLAIM.VDEFIT01/vrtsit01       **/
   /* *                                                          **/
   /* *   1) Select the set of rows in  VCLAIM.VDEFIT01          **/
   /* *      which are associated with the product.              **/
   /* *   2) Fetch each row and update the row in the database.  **/
   /* *   3) Select the set of rows in  VCLAIM.VrtsIT01          **/
   /* *      which are associated with the product.              **/
   /* *   4) Fetch each row and update the row in the database.  **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
   /* *     M A I N T E N A N C E      H I S T O R Y    L O G    **/
   /* *----------------------------------------------------------**/
   /* *   DATE   PGMR    DESCRIPTION                             **/
   /* *----------------------------------------------------------**/
   /* * 10-04-90 CHELLM  Added XUMCD and XQACD to the Select key **/
   /* *                  When scanning DCLAIM.VRAITM01 rows.     **/
   /* * 03-13-92 GDECKE  MARCH DB2 TABLE CHANGES                 **/
   /* * 04-13-92 TWATSO  APRIL DB2 TABLE CHANGES                 **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R152";
  ;
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = CLAREC.CLACSQNB;
  CLPREC.CL2ISNBR = -1;
  CLPREC.XGPCD = CLAREC.XGPCD;
  CLPREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLPREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLPREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLPREC.XUMCD = CL0RW02.XUMCD[CLXARAYX]; /* 10-04-90*/
  CLPREC.XQACD = CL0RW02.XQACD[CLXARAYX]; /* 10-04-90*/
  ;
   /* **************************************************/
      /* Select the set of Defective item rows*/
   /* **************************************************/
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    TA1REC.TA1LOCAT[2] = "SELECT SET";
    XPCL010();
  end
  ;
  ;
   /* **************************************************/
      /* Fetch each row and update the price*/
   /* **************************************************/
  CL0RW01.CL0RWSW1 = "N"; /* Set end of data switch*/
  while (CL0RW01.CL0RWSW1 == "N") /* Until end of data*/
    call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0RS10(); /* Update the VDEFIT01 row*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0RW01.CL0RWSW1 = "Y"; /* Indicate end of data*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VDEFIT01";
        TA1REC.TA1LOCAT[2] = "FETCH ROW";
        XPCL010();
      end
    end
  end
  ;
  ;
   /* **************************************************/
      /* Close the selected set of item rows*/
   /* **************************************************/
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    TA1REC.TA1LOCAT[2] = "CLOSE SET";
    XPCL010();
  end
  ;
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = CLAREC.CLACSQNB;
  CLNREC.CL2ISNBR = -1;
  CLNREC.XGPCD = CLAREC.XGPCD;
  CLNREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLNREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLNREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLNREC.XQACD = CL0RW02.XQACD[CLXARAYX];
  CLNREC.XEGCD = CL0RW02.XEGCD[CLXARAYX];
  CLNREC.XBK-BK-SESN-CD = CL0RW02.XBK-BK-SESN-CD[CLXARAYX];
  CLNREC.OP-BK-YR = CL0RW02.OP-BK-YR[CLXARAYX];
  CLNREC.OP-BK-MO = CL0RW02.OP-BK-MO[CLXARAYX];
  CLNREC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
  ;
   /* **************************************************/
      /* Select the set of Return to Stock item rows*/
   /* **************************************************/
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    TA1REC.TA1LOCAT[2] = "SELECT SET";
    XPCL010();
  end
  ;
  ;
   /* **************************************************/
      /* Fetch each row and update the price*/
   /* **************************************************/
  CL0RW01.CL0RWSW1 = "N"; /* Set end of data switch*/
  while (CL0RW01.CL0RWSW1 == "N") /* Until end of data*/
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0RS09(); /* Update the VRTSIT01 row*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0RW01.CL0RWSW1 = "Y"; /* Indicate end of data*/
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRTSIT01";
        TA1REC.TA1LOCAT[2] = "FETCH ROW";
        XPCL010();
      end
    end
  end
  ;
  ;
   /* **************************************************/
      /* Close the selected set of item rows*/
   /* **************************************************/
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    TA1REC.TA1LOCAT[2] = "CLOSE SET";
    XPCL010();
  end
  ;
  ;
end // end KL0R152

// update row in VRAITM01
Function KL0R153()
   /* *************************************************************/
   /* *                                                          **/
   /* *           UPDATE THE ROW IN DCLAIM.VRAITM01              **/
   /* *                                                          **/
   /* *     1)  Update the price in the VDEFIT01 record.         **/
   /* *     2)  Update the row.                                  **/
   /* *                                                          **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE    PGMR     DESCRIPTION                           **/
   /* *----------------------------------------------------------**/
   /* * 10-04-90  CHELLM   Added XQACD to Update key of VRAITM01 **/
   /* * 03-13-92  GDECKE   MARCH DB2 TABLE CHANGES               **/
   /* * 04-13-92  TWATSO   APRIL DB2 TABLE CHANGES               **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R153"; /* Set current process name*/
  ;
     /* Update the row values*/
  CLKREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLKREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLKREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLKREC.CLKRQTQ = 0;
  CLKREC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
  CLKREC.XQACD = CL0RW02.XQACD[CLXARAYX];
  CLKREC.XEGCD = CL0RW02.XEGCD[CLXARAYX];
  CLKREC.XBK-BK-SESN-CD = CL0RW02.XBK-BK-SESN-CD[CLXARAYX];
  CLKREC.OP-BK-YR = CL0RW02.OP-BK-YR[CLXARAYX];
  CLKREC.OP-BK-MO = CL0RW02.OP-BK-MO[CLXARAYX];
  CLKREC.CLKPRCFF = CL0RW02.CLKPRCFF[CLXARAYX];
  CLKREC.CLKCLPRC = CL0RW02.CLKCLPRC[CLXARAYX];
  ;
  ;
  if (CL0RW02.CLKAUTHQ[CLXARAYX] > 0)
    CLKREC.CLKAUTHQ = CL0RW02.CLKAUTHQ[CLXARAYX];
  else
    CLKREC.CLKAUTHQ = CL0RW02.CLKAUTHQ[CLXARAYX] * -1;
  end
  ;
   /* Update the change data and time*/
  XX0XS01();
  CLKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
   /* **************************************************/
      /* Update the selected row*/
   /* **************************************************/
  call "IO1280" ("U ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0RW02.ZZZCHGCT[CLXARAYX] = CL0RW02.ZZZCHGCT[CLXARAYX] + 1;
    CL0RW02.CL0RWCHF[CLXARAYX] = "N"; /* Set change flag to no*/
    CL0RW02.CL0RWSFL[CLXARAYX] = "R";
                                   /* record source now from ra item*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "UPDATE";
    XPCL010();
  end
  ;
end // end KL0R153

// add row to VRAITM01
Function KL0R154()
   /* *************************************************************/
   /* *                                                          **/
   /* *           ADD THE ROW TO DCLAIM.VRAITM01                 **/
   /* *                                                          **/
   /* *     1)  Set up the row values.                           **/
   /* *     2)  Add the row.                                     **/
   /* *                                                          **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *----------------------------------------------------------**/
   /* *   DATE     PGMR     DESCRIPTION                          **/
   /* *----------------------------------------------------------**/
   /* * 03-13-92   GDECKE   MARCH DB2 TABLE CHANGES.             **/
   /* * 04-13-92   TWATSO   APRIL DB2 TABLE CHANGES.             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R154"; /* Set current process name*/
  ;
     /* Set up the row values*/
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLKREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLKREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLKREC.SY5SZID = 0;
  CLKREC.CLJRDIND = "D";
  CLKREC.OP2LNINB = CL0RW02.OP2LNINB[CLXARAYX];
  CLKREC.XQACD = CL0RW02.XQACD[CLXARAYX];
  CLKREC.XEGCD = CL0RW02.XEGCD[CLXARAYX];
  CLKREC.XBK-BK-SESN-CD = CL0RW02.XBK-BK-SESN-CD[CLXARAYX];
  CLKREC.OP-BK-YR = CL0RW02.OP-BK-YR[CLXARAYX];
  CLKREC.OP-BK-MO = CL0RW02.OP-BK-MO[CLXARAYX];
  CLKREC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
  CLKREC.CLKCLPRC = CL0RW02.CLKCLPRC[CLXARAYX];
  CLKREC.CLKPRCFF = CL0RW02.CLKPRCFF[CLXARAYX];
  CLKREC.CLKRQTQ = 0;
  CLKREC.CLKCRFL = "Y";
  CLKREC.CLKWHSXF = "N";
  CLKREC.OP2PRCVF = "N";
  CLKREC.YCECD = " ";
  if (CL0RW01.CL0RWIVF == "Y")
    CLKREC.IV0PARTN = CL0RW03.IV0PARTN[CL0RWINX];
    CLKREC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
    if (CLKREC.IV0PARTN == " ")
      CLKREC.IV0PARTN = "0";
    end
  else
    CLKREC.IV0PARTN = "0";
    CLKREC.IV0IVCID = 0;
  end
  ;
  if (CL0RW02.CLKAUTHQ[CLXARAYX] > 0) /* need positive values*/
    CLKREC.CLKAUTHQ = CL0RW02.CLKAUTHQ[CLXARAYX];
  else
    CLKREC.CLKAUTHQ = CL0RW02.CLKAUTHQ[CLXARAYX] * -1;
  end
  ;
    /* Get the dates and time*/
  XX0XS01();
  CLKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* **************************************************/
      /* Update the selected row*/
   /* **************************************************/
  call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CL0RWAPF = "Y"; /* Indicate that authorized prod exists*/
    CL0RW02.CL0RWCHF[CLXARAYX] = "N"; /* Set change flag to no*/
    CL0RW02.CL0RWSFL[CLXARAYX] = "R"; /* record source is ra item*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "UPDATE";
    XPCL010();
  end
  ;
end // end KL0R154

// select row in VRAHDR01
Function KL0R155()
   /* *************************************************************/
   /* *                                                          **/
   /* *           SELECT THE DCLAIMS.VRAHDR01 ROW                **/
   /* *                                                          **/
   /* *  1) sum the ra items to get total qty and see if items*/
   /* *     exist*/
   /* *  2) Select the Unique RA header row.                     **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R155"; /* Set current process name*/
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  set CL0RW06 empty;
  CL0RW06.CL0RWFNC = "SM"; /* sum*/
  ;
  call "IO1280" (CL0RW06, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  CL0RW01.CLJRAIND = "N"; /* init ra-items-exist-flag*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    if (CL0RW06.CL0RWIN1 < 0) /* could be null values*/
      CL0RW06.CL0RWSM1 = 0;
    end
    if (CL0RW06.CL0RWSM1 > 0) /* found authorized products*/
      KL0RM001.CLJTATHQ = CL0RW06.CL0RWSM1;
      CL0RW02.CLJTATHQ = CL0RW06.CL0RWSM1;
      CL0RW01.CL0RWTAQ = CL0RW06.CL0RWSM1;
      CL0RW01.CLJRAIND = "Y"; /* ra items exist*/
    end
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  ;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Read RA record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
end // end KL0R155

// update row in VRAHDR01
Function KL0R156()
   /* *************************************************************/
   /* *                                                          **/
   /* *           UPDATE THE ROW IN DCLAIM.VRAHDR01              **/
   /* *                                                          **/
   /* *     1)  Change row total values in the record.           **/
   /* *     2)  Update the row.                                  **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R156"; /* Set current process name*/
  ;
     /* Update the row values*/
  CLJREC.CLJTATHQ = CL0RW02.CLJTATHQ;
  if (CLJREC.CLJTATHQ < 0) /* need positive value*/
    CLJREC.CLJTATHQ = CLJREC.CLJTATHQ * -1;
  end
  ;
   /* set the item exists indicator flag*/
  CLJREC.CLJRAIND = CL0RW01.CLJRAIND;
  ;
    /* Update the change date and time*/
  XX0XS01();
  CLJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* **************************************************/
      /* Update the selected row*/
   /* **************************************************/
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "UPDATE";
    XPCL010();
  end
  ;
  ;
end // end KL0R156

// add row to VRAHDR01
Function KL0R157()
   /* *************************************************************/
   /* *                                                          **/
   /* *           ADD THE ROW TO DCLAIM.VRHDRM01                 **/
   /* *                                                          **/
   /* *     1)  Set up the row values.                           **/
   /* *     2)  Add the row.                                     **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R157"; /* Set current process name*/
  ;
     /* Set up the row values*/
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  CLJREC.XXXUSRID = " ";
  CLJREC.XSOCD = " ";
  CLJREC.CLJPRTLB = "Y";
  CLJREC.CLJLBRQT = 0;
  CLJREC.CLJNBLB = 0;
  CLJREC.CLJLBTOT = 0;
  CLJREC.CLJPRTRA = "Y";
  CLJREC.CLJRARQT = 0;
  CLJREC.CLJRAIDT = 0;
  CLJREC.CLJORAXD = 0;
  CLJREC.CLJFRDBF = "N";
  CLJREC.CLJFRCRF = "N";
  XSCLSEX(); /* create expiration date*/
  ;
                                                /* (*cwh 9/5/89*)*/
                            /* Default the non-credit return flag*/
                            /* for CDR account classes*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (KUCREC.XAUCD == "12"
     || KUCREC.XAUCD == "13"
     || KUCREC.XAUCD == "14"
     || KUCREC.XAUCD == "19"
     || KUCREC.XAUCD == "43"
     || KUCREC.XAUCD == "62")
      CLJREC.CLJNCRFL = "Y";
    else
      CLJREC.CLJNCRFL = " ";
    end
  end
  ;
  ;
  CLJREC.XWHCD = CLAREC.XWHCD;
  CLJREC.CLJTATHQ = CL0RW02.CLJTATHQ;
  KL0RM001.CLJTATHQ = CL0RW02.CLJTATHQ;
  CLJREC.CLJRDIND = "D";
  KL0RS91(); /* set defaults for restocking/remerch flags*/
  CLJREC.XDACD = KUTREC.XDACD;
  CLJREC.CLJRAIND = "Y";
  ;
    /* set the item exists indicator flag*/
  CLJREC.CLJRAIND = CL0RW01.CLJRAIND;
  ;
    /* Get the dates and time*/
  XX0XS01();
  CLJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  CLJREC.ZZZCHGCT = 0;
  ;
   /* **************************************************/
      /* Add the row*/
   /* **************************************************/
  call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
  ;
end // end KL0R157

// delete row in VRAITM01
Function KL0R158()
   /* *************************************************************/
   /* *                                                          **/
   /* *           DELETE THE ROW IN DCLAIM.VRAITM01              **/
   /* *                                                          **/
   /* *     1)  Delete the row.                                  **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the Delete key  **/
   /* *          for DCLAIM.VRAITM01.                            **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R158"; /* Set current process name*/
  ;
  CLKREC.CLACLMNB = KL0RM001.CLACLMNB;
  CLKREC.IV0IVCID = KL0RM001.IV0IVCID; /* 072089 add*/
  CLKREC.XGPCD = KL0RM001.XGPCD;
  CLKREC.SY1STNBR = CL0RW02.SY1STNBR[CLXARAYX];
  CLKREC.SY2CLRID = CL0RW02.SY2CLRID[CLXARAYX];
  CLKREC.XDMCD = CL0RW02.XDMCD[CLXARAYX];
  CLKREC.XUMCD = CL0RW02.XUMCD[CLXARAYX];
  CLKREC.XQACD = CL0RW02.XQACD[CLXARAYX];
  CLKREC.SY5SZID = 0;
  CLKREC.CLKCRFL = "Y"; /* 072089 add*/
  ;
   /* **************************************************/
      /* Delete the selected row*/
   /* **************************************************/
  call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    CL0RW02.CL0RWCHF[CLXARAYX] = "N"; /* Set change flag to no*/
    CL0RW01.CL0RWRMI = "Y"; /* Set removed product indicator*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
  ;
  CL0RW02.ZZZCHGCT[CLXARAYX] = 0;
  CL0RW02.CLKAUTHQ[CLXARAYX] = 0;
  CL0RW02.CLAESTVL[CLXARAYX] = 0;
  CL0RW02.CL0RWCHF[CLXARAYX] = " ";
  CL0RW02.CL0RWPDF[CLXARAYX] = " ";
  CL0RW02.CL0RMSEL[CLXARAYX] = " ";
  ;
  ;
end // end KL0R158

// flow on 'ENTER' or PF keys
Function KL0R160()
   /* *************************************************************/
   /* *                                                          **/
   /* *              FLOW ON ENTER OR PF KEYS                    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0R160";
  ;
  if (CL0RW01.CL0RWAAF == "Y") /* authorize all flag*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum == 524) /* quantity required*/
         /* next sentence - allow user to pf7/8 to fill in qtys*/
      else
        return; /* cannot pf7/8 with error on screen*/
      end
    else
       /* next sentence*/
    end
  else
    ;
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    ;
  end
  ;
  ;
   /* **************************************/
   /* If ENTER is pressed*/
   /* **************************************/
  if (converseVar.eventKey is enter)
    /* **************************************/
     /* If Fast path positioning requested*/
    /* **************************************/
    if (KL0RM001.CAITEM != " ") /* If fast path item entered*/
      if (KL0RM001.CATOAP == " " /* If fastpath positioning*/
       || KL0RM001.CATOAP == "KL0R")
        if (KL0RM001.CAITEM == "A") /* If top of list requested*/
          CLXREC.CLXARY1X = 1;
          CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
          KL0RM001.CAITEM = " ";
        else
          if (KL0RM001.CAITEM == "9") /* If bottom of list requested*/
            CLXREC.CLXARY1X = CLXREC.CLXLSTAX;
            CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
            KL0RM001.CAITEM = " ";
          else
            /* ************************************************/
                /* Locate the desired map positioning*/
            /* ************************************************/
            if (KL0RM001.CAITEM != " ") /* If item field is entered*/
              sysVar.arrayIndex = 1; /* Use ezetst as working index*/
              while (sysVar.arrayIndex <= CL0RW01.CL0RWMAX[1]) /* Until end array*/
                if (KL0RM001.CAITEM == CL0RW02.SY1STNBR[sysVar.arrayIndex])
                  CLXREC.CLXARY1X = sysVar.arrayIndex; /* Save position index*/
                  sysVar.arrayIndex = 9000; /* Force loop end*/
                  KL0RM001.CAITEM = " ";
                  CLXREC.CLXBLDSC = "Y";
                else
                  if (CL0RW02.SY1STNBR[sysVar.arrayIndex] == " ")
                    CLXREC.CLXARY1X = sysVar.arrayIndex - 1; /* Save position index*/
                    sysVar.arrayIndex = 9000; /* Force loop end*/
                    KL0RM001.CAITEM = " ";
                    CLXREC.CLXBLDSC = "Y";
                  else
                    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment index*/
                  end
                end
              end
            end
          end
        end
      end
    else
      if (KL0RM001.CATOAP != "KL0R") /* If to application not kL0R*/
        /* **************************************/
         /* If map has not been reshown*/
        /* **************************************/
        if (CL0RW01.CL0RWSWR == "N") /* If map not reshown*/
          /* MOVE 'Y' TO CL0RW01.CL0RWSWR   ; Indicate map reshow*/
           /* continue around to reshow map with new totals*/
        else
          /* **************************************/
           /* If more invoices exist to display*/
          /* **************************************/
          if (CL0RW01.CL0RWNIR == "N") /* If new inv. # not entered*/
            CL0RW01.CL0RWINX = CL0RW01.CL0RWINX + 1;
          end
          if (CL0RW01.CL0RWICT > 0 /* If invoices exist*/
           && CL0RW01.CL0RWINX <= CL0RW01.CL0RWICT) /* and more invoices*/
            /* AND CL0RW01.CL0RWIVF EQ 'N'    ; and Invoice not blank*/
            CL0RW01.CL0RWSWR = "N"; /* y/n have shown warning*/
            CL0RW01.CL0RWRMI = "N"; /* y/n have removed prod*/
            CL0RW01.CL0RWTAQ = 0;
            CL0RW01.CL0RWTRQ = 0;
            CL0RW01.CL0RWTCV = 0;
            CLWREC.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
            KL0RM001.IV0IVCID = CL0RW03.IV0IVCID[CL0RWINX];
            CLXREC.CLXBLDSC = "Y"; /* Rebuild array and screen*/
            CLXREC.CLXBLDAY = "Y";
            return;
          else
            /* **************************************/
             /* Transfer to kl0Q*/
            /* **************************************/
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXEOAF = "Y";
            COMMAREA.CATOAP = "KL0Q";
            XPCL002();
            return;
          end
        end
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* If PF2 is pressed*/
   /* **************************************/
  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* If there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
      return;
    else
      KL0RM001.XXXERRID = "KL0R160"; /* Process name*/
      converseLib.validationFailed(31); /* No memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
   /* **************************************/
   /* If PF5 is pressed*/
     /* - Transfer to Claim Header*/
   /* **************************************/
  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end
  ;
   /* **************************************/
   /* If PF6 is pressed*/
     /* - Transfer to Stock Inspection*/
       /* if allowed.*/
   /* **************************************/
  if (converseVar.eventKey is pf6)
    if (CL0RW01.CL0RWHVR == "N")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(431); /* can't xfer - inspect not done for*/
                                   /* clai*/
      return;
    end
    if (CLAREC.CLAWSENF == "N")
      COMMAREA.CATOAP = "KL02"; /* go to return insp*/
    else
      COMMAREA.CATOAP = "KL0E"; /* go to return insp*/
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    XPCL002();
    return;
  end
  ;
   /* **************************************/
   /* If PF7 is pressed*/
     /* - Verify page back request*/
   /* **************************************/
  if (converseVar.eventKey is pf7)
    KL0RS07();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
   /* **************************************/
   /* If PF8 is pressed*/
     /* - Verify page forward request*/
   /* **************************************/
  if (converseVar.eventKey is pf8)
    KL0RS08();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
   /* **************************************/
   /* If PF17 is pressed*/
     /* - Transfer to Addressed*/
   /* **************************************/
  if (converseVar.eventKey is pf17)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0F";
    XPCL002();
    return;
  end
  ;
   /* **************************************/
   /* If PF18 is pressed*/
     /* - Transfer to Claim Comments*/
   /* **************************************/
  if (converseVar.eventKey is pf18)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    CLWREC.CLWMCMNT = "N"; /* Indicate map 1*/
    COMMAREA.CATOAP = "KL0G";
    XPCL002();
    return;
  end
  ;
   /* **************************************/
   /* If PF20 is pressed*/
     /* - Transfer to Memo Comments*/
   /* **************************************/
  if (converseVar.eventKey is pf20)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    CLWREC.CLWMCMNT = "Y"; /* Indicate map 5*/
    COMMAREA.CATOAP = "KL0G";
    XPCL002();
    return;
  end
  ;
  ;
end // end KL0R160

// Select qty CLNREC and CLPREC
Function KL0RS01()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the Selection Key*/
   /* *          when scanning DCLAIM.VDEFIT01 rows.             **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS01"; /* Set current process name*/
  ;
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
  CLNREC.IV0IVCID = KL0RM001.IV0IVCID;
  CLNREC.XGPCD = CLKREC.XGPCD;
  CLNREC.SY1STNBR = CLKREC.SY1STNBR;
  CLNREC.SY2CLRID = CLKREC.SY2CLRID;
  CLNREC.XDMCD = CLKREC.XDMCD;
  CLNREC.XQACD = CLKREC.XQACD;
  CLNREC.XUMCD = CLKREC.XUMCD;
  ;
  CL0RW01.CLNRTSQ = 0;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CLNRTSQ = CL0RW01.CLNRTSQ + CLNREC.CLNRTSQ;
    CL0RW01.CLNRTSQ = CL0RW01.CLNRTSQ + CLNREC.CLNNCRQ;
    ;
    if (CLNREC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
      CL0RW02.CL0RWUOM[CLXARAYX] = "P"; /* variable unit of measure*/
    end
    ;
     /* find largest sequence number assoc with product*/
    if (CLNREC.CLHSEQNB > CL0RW02.CLHSEQNB[CLXARAYX])
      CL0RW02.CLHSEQNB[CLXARAYX] = CLNREC.CLHSEQNB;
    end
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* sum CLPREC.CLPDEFQ*/
   /* **************************************/
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = -1;
  CLPREC.CL2ISNBR = -1;
  CLPREC.IV0IVCID = KL0RM001.IV0IVCID;
  CLPREC.XGPCD = CLKREC.XGPCD;
  CLPREC.SY1STNBR = CLKREC.SY1STNBR;
  CLPREC.SY2CLRID = CLKREC.SY2CLRID;
  CLPREC.XDMCD = CLKREC.XDMCD;
  CLPREC.XUMCD = CLKREC.XUMCD; /* 10-04-90*/
  CLPREC.XQACD = CLKREC.XQACD; /* 10-04-90*/
  ;
  CL0RW01.CLPDEFQ = 0;
  ;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CLPDEFQ = CL0RW01.CLPDEFQ + CLPREC.CLPDEFQ;
    CL0RW01.CLPDEFQ = CL0RW01.CLPDEFQ + CLNREC.CLNNCRQ;
    ;
    if (CLPREC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
      CL0RW02.XUMCD[CLXARAYX] = "P"; /* variable unit of measure*/
    end
    ;
     /* find largest sequence number assoc with product*/
    if (CLPREC.CLHSEQNB > CL0RW02.CLHSEQNB[CLXARAYX])
      CL0RW02.CLHSEQNB[CLXARAYX] = CLPREC.CLHSEQNB;
    end
    call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
end // end KL0RS01

// set alterable fields modified
Function KL0RS02()
   /* *************************************************************/
   /* *                                                          **/
   /* *               SET ALTERABLE FIELDS MODIFIED              **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS02";
  ;
  set KL0RM001.IV0IVCID modified;
  set KL0RM001.CLJTATHQ modified;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 12)
    ;
    if (CLXREC.CLXLINEX <= 11) /* For lines with only 11*/
      set KL0RM001.CL0RMSEL[CLXLINEX] modified;
      set KL0RM001.SY2CLRID[CLXLINEX] modified;
      set KL0RM001.XDMCD[CLXLINEX] modified;
      set KL0RM001.KUIPRDID[CLXLINEX] modified;
      set KL0RM001.XUMCD[CLXLINEX] modified;
      set KL0RM001.CLKPRCFF[CLXLINEX] modified;
      set KL0RM001.CLKCLPRC[CLXLINEX] modified;
    end
    set KL0RM001.SY1STNBR[CLXLINEX] modified;
    set KL0RM001.CLKAUTHQ[CLXLINEX] modified;
    set KL0RM001.CLMTRTSQ[CLXLINEX] modified;
    set KL0RM001.CLAESTVL[CLXLINEX] modified;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  set KL0RM001.CATOAP modified;
  set KL0RM001.CAITEM modified;
  ;
  ;
end // end KL0RS02

// Select unique RA item
Function KL0RS03()
   /* *************************************************************/
   /* *                                                          **/
   /* *         SELECT THE ROW FROM DCLAIM.VRAITM01              **/
   /* *                                                          **/
   /* *   1) Move in the screen keys and select the unique       **/
   /* *      RA product item row from the table.                 **/
   /* *                                                          **/
   /* * 072089 add invoice to non-credit authorized products,    **/
   /* *   Since CL0R is DEF,  CL_RAUTH_CR_FL is always 'y'       **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the Select      **/
   /* *          Unique key for DCLAIM.VRAITM01.                 **/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS03";
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
   /* 072089 fix receiving field name*/
   /* MOVE CL0RM001.IV0IVCID TO CLKREC.CLACLMNB;*/
  CLKREC.IV0IVCID = KL0RM001.IV0IVCID; /* 072089*/
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY1STNBR = KL0RM001.SY1STNBR[CLXLINEX]; /* (CL744 cwh*/
  CLKREC.SY2CLRID = KL0RM001.SY2CLRID[CLXLINEX]; /* 9/28/89)*/
  CLKREC.XDMCD = KL0RM001.XDMCD[CLXLINEX];
  CLKREC.XUMCD = KL0RM001.XUMCD[CLXLINEX]; /* 10-04-90*/
  CLKREC.XQACD = KL0RM001.XQACD[CLXLINEX]; /* 10-04-90*/
  CLKREC.SY5SZID = 0; /* get product summary*/
  CLKREC.CLKCRFL = "Y"; /* 072089 'Y' for defective*/
  ;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "SELECT ";
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDN;
    XPCL010();
  end
  ;
  ;
end // end KL0RS03

// Check to see if product in WS
Function KL0RS04()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CHECK TO SEE IF PRODUCT EXISTS IN WS             **/
   /* *                                                          **/
   /* *   1) Loop through WS until end of data or product is     **/
   /* *      found.                                              **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS04";
  ;
  ;
  CL0RW01.CL0RWIXM = 1; /* Set index*/
  while (CL0RW01.CL0RWIXM <= CL0RW01.CL0RWMAX[1] /* Until end of WS*/
   && CL0RW02.SY1STNBR[CL0RWIXM] != " ") /* or end of data*/
    if (CL0RW02.SY1STNBR[CL0RWIXM] == KL0RM001.SY1STNBR[CLXLINEX]
     && CL0RW02.SY2CLRID[CL0RWIXM] == KL0RM001.SY2CLRID[CLXLINEX]
     && CL0RW02.XDMCD[CL0RWIXM] == KL0RM001.XDMCD[CLXLINEX])
      if (CL0RW01.CL0RWIXM == CLXREC.CLXLINEX)
         /* next sentence ; changing line on screen*/
      else
        CL0RW01.CL0RWEFL = "Y"; /* Set exists flag*/
      end
    end
    CL0RW01.CL0RWIXM = CL0RW01.CL0RWIXM + 1;
  end
  ;
  ;
end // end KL0RS04

// get the product price
Function KL0RS05()
   /* **************************************************************/
   /* Maintenance History                           **/
   /* Date    Userid   Description                            **/
   /* 07-23-01  DSINHA   Bypass price look up on product file   **/
   /* and default all returns to zero price. **/
   /* **************************************************************/
         /* * * ********************************* * **/
       /* *                                           **/
     /* *           keep similar to cl0lsps             **/
       /* *                                           **/
         /* * * ********************************* * **/
  ;
  ;
   /* GET OP0I020*/
     /* *****************************************************/
     /* get product price using same method as orders, op0i.*/
     /* also consider the invoice special pricing table,iverec.*/
     /* if price is done by size, then use the first valid size*/
     /* as the product price.  a price varies flag will be*/
     /* set when size prices differ within a product*/
     /* *****************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS05"; /* Set current process name*/
  ;
  ;
  if (KL0RM001.SY1STNBR[CLXLINEX] != " " /* If have style/color record*/
   && KL0RM001.SY2CLRID[CLXLINEX] != " " 
   && KL0RM001.XDMCD[CLXLINEX] != " ")  
     /* next sentence*/
  else
    CL0RW02.CLKCLPRC[CLXARAYX] = 0; /* else leave now*/
    return;
  end
  ;
  ;
   /* GET OP0IS24*/
      /* *******************************************************/
      /* * if sales pgm has product pricing (clarec.sp1id ne ' ')*/
      /* *   then also get product price -*/
      /* *   use lower price value*/
      /* * else*/
      /* *   (sales pgm may not have product pricing)*/
      /* *   use invoice speciality table, iverec,*/
      /* *     price/cost indicator to access either:*/
      /* *     product price table sy5rec*/
      /* *     or*/
      /* *     product cost table sy6rec*/
      /* **/
      /* *    if product price-size code = z:*/
      /* *      default size from ydstbl, use prod scale code,*/
      /* *      then:*/
      /* *        read price/cost default for style,color,size*/
      /* *        use price/cost directly from valid sz on prodct*/
      /* *    else*/
      /* *      if color default price/cost ne 0*/
      /* *        use it*/
      /* *      else*/
      /* *        use style default price/cost.*/
      /* *******************************************************/
  ;
      /* get sales pgm prices - or -*/
      /* get style and style/color price/cost defaults to use*/
      /* when there is no price by size for the product*/
  ;
  if (CLAREC.SP1ID != " ") /* if have sales program*/
    /* GET OM0QS99*/
     /* *****************************************/
     /* get sales program product pricing record*/
     /* *****************************************/
    SP5REC.SP1ID = CLAREC.SP1ID; /* set-up key for prod price*/
    SP5REC.XGPCD = CLAREC.XGPCD;
    SP5REC.SY1STNBR = KL0RM001.SY1STNBR[CLXLINEX];
    SP5REC.SY2CLRID = KL0RM001.SY2CLRID[CLXLINEX];
    SP5REC.XDMCD = KL0RM001.XDMCD[CLXLINEX];
    ;
    call "IO0110" ("S ", SQLCA, SP5REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for inquiry*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
       /* use default size code to get correct price*/
       /* don't have product price, all prices are by size*/
      if (SYCREC.SY4SZSCL in YDSTBL.SY4SZSCL)
        CL0RW01.SP5SZPR = SP5REC.SP5SZPR[sysVar.arrayIndex];
      end
    end
  end
  ;
  ;
     /* ******************/
     /* get product price*/
     /* ******************/
  ;
  CL0RW01.CL0RWCLC = "N"; /* found non-closeout price flag*/
  CL0RW01.CL0RWCLS = "N"; /* found non-closeout price flag*/
   /* TCS Change begin - 07/23/01 Default prices to zero*/
  ;
  CL0RW01.CL0RWSTP = 0;
  CL0RW01.CL0RWCLP = 0;
   /*  */
   /* IF IVEREC.IVEPCIND EQ 'P';        /* invc specl codes*/
   /* KL0RS0A;                        /* product price defaults*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';*/
   /* KL0RS0B;                      /* product cost defaults*/
   /* END;*/
   /* ; /* note ivepcind may be blank, if not found in cl0l001*/
   /* END;*/
  ;
   /* get op0is24*/
   /* use product price, if any*/
  ;
   /* SET TOTAL ADJUST TO PRICE/COST, USING INVC SPECIAL TABLE*/
   /* CL0RW01.CL0RWPCP = IVEREC.IVEPCPCT + 100;*/
  ;
   /* style/color defaults were set above, cl0ls70 or cl0ls72*/
   /* IF CL0RW01.CL0RWCLP NE 0;*/
     /* use color default price/cost*/
   /* CL0RW02.CLKCLPRC(CLXARAYX) = CL0RWCLP * CL0RWPCP / 100;*/
   /* IF CL0RW01.CL0RWCLC = 'Y';*/
   /* MOVE 'A' TO CL0RW02.CLKPRCFF(CLXARAYX);*/
   /* MOVE 'A' TO KL0RM001.CLKPRCFF(CLXLINEX);*/
   /* END;*/
   /* ELSE;*/
     /* use style default price/cost*/
   /* CL0RW02.CLKCLPRC(CLXARAYX) = CL0RWSTP * CL0RWPCP / 100;*/
   /* IF CL0RW01.CL0RWCLS = 'Y';*/
   /* MOVE 'A' TO CL0RW02.CLKPRCFF(CLXARAYX);*/
   /* MOVE 'A' TO KL0RM001.CLKPRCFF(CLXLINEX);*/
   /* END;*/
   /* END;*/
  ;
  ;
     /* ***************************************************/
     /* if sales prgm had a price, and product had a price*/
     /* use lower value for the claim price*/
     /* ***************************************************/
  ;
   /* IF CL0RW01.SP5SZPR NE 0*/
   /* AND CL0RW02.CLKCLPRC(CLXARAYX) NE 0;*/
   /* IF CL0RW01.SP5SZPR LT CL0RW02.CLKCLPRC(CLXARAYX);*/
   /* MOVE CL0RW01.SP5SZPR TO CL0RW02.CLKCLPRC(CLXARAYX);*/
   /* END;*/
   /* END;*/
  ;
  ;
     /* *****************/
     /* put price on map*/
     /* *****************/
  ;
  CL0RW02.CLKCLPRC[CLXARAYX] = 0;
  ;
   /* TCS Change End - 07/23/01*/
  ;
  KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
  ;
  ;
end // end KL0RS05

// check for screen overlaps
Function KL0RS06()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CHECK FOR PRODUCT OVERLAPS ON THE SCREEN         **/
   /* *                                                          **/
   /* *   1) Check all screen products to see if there are any   **/
   /* *      duplicates                                          **/
   /* *                                                          **/
   /* * 10-04-90 chellm added xum and xqa code to product overlap**/
   /* *                 edit.                                    **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS06";
  ;
  ;
   /* if invoice exists on screen, not allowed to add products*/
  ;
  if (KL0RM001.IV0IVCID != 0)
    return;
  end
  ;
  ;
  CLXREC.CLXLINEX = CL0RW01.CL0RWMAX[3]; /* Set index*/
  while (CLXREC.CLXLINEX > 0) /* Until end of Screen data*/
    if (KL0RM001.SY1STNBR[CLXLINEX] == " " /* If product does not exist*/
     && KL0RM001.SY2CLRID[CLXLINEX] == " " 
     && KL0RM001.XDMCD[CLXLINEX] == " ")  
       /* continue on*/
    else
      CL0RW01.CL0RWIXM = CLXREC.CLXLINEX - 1; /* Start at next product*/
      while (CL0RW01.CL0RWIXM > 0) /* Until end of Screen data*/
        if (KL0RM001.SY1STNBR[CLXLINEX] == KL0RM001.SY1STNBR[CL0RWIXM]
         && KL0RM001.SY2CLRID[CLXLINEX] == KL0RM001.SY2CLRID[CL0RWIXM]
         && KL0RM001.XDMCD[CLXLINEX] == KL0RM001.XDMCD[CL0RWIXM]
         && KL0RM001.XUMCD[CLXLINEX] == KL0RM001.XUMCD[CL0RWIXM]
         && KL0RM001.XQACD[CLXLINEX] == KL0RM001.XQACD[CL0RWIXM])
          CLXREC.CLXERRF = "Y"; /* Set error flag*/
          KL0RM001.CL0RMERR[CLXLINEX] = "Y"; /* Set error flag on map*/
          KL0RM001.XXXERRID = "KL0RS06"; /* Set process*/
          converseLib.validationFailed(448); /* Overlapping products exist on the screen*/
          set KL0RM001.SY1STNBR[CLXLINEX] cursor, bold;
          set KL0RM001.SY2CLRID[CLXLINEX] bold;
          set KL0RM001.XDMCD[CLXLINEX] bold;
        else
           /* continue on*/
        end
        CL0RW01.CL0RWIXM = CL0RW01.CL0RWIXM - 1;
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
  end
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    return; /* already found existing product*/
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= CL0RW01.CL0RWMAX[3]) /* Until end of screen data*/
    if (KL0RM001.SY1STNBR[CLXLINEX] == " " /* If product does not exist*/
     && KL0RM001.SY2CLRID[CLXLINEX] == " " 
     && KL0RM001.XDMCD[CLXLINEX] == " ")  
       /* continue on*/
    else
      if (KL0RM001.CL0RMSEL[CLXLINEX] == "X")
         /* next sentence - dealing with deleted product*/
      else
        CLXREC.CLXARAYX = 1;
        while (KL0RM001.SY1STNBR[CLXLINEX] in CL0RW02.SY1STNBR from CLXARAYX)
          CLXREC.CLXARAYX = sysVar.arrayIndex;
           /* find position of entry within array on the screen*/
          CL0RW01.CL0RWIXM = CLXREC.CLXARAYX - CLXREC.CLXARY1X + 1;
          if (CL0RW01.CL0RWIXM == CLXREC.CLXLINEX)
             /* next sentence - dealing with line being edited*/
          else
            if (KL0RM001.SY2CLRID[CLXLINEX] == CL0RW02.SY2CLRID[CLXARAYX]
             && KL0RM001.XDMCD[CLXLINEX] == CL0RW02.XDMCD[CLXARAYX]
             && KL0RM001.XUMCD[CLXLINEX] == CL0RW02.XUMCD[CLXARAYX]
             && KL0RM001.XQACD[CLXLINEX] == CL0RW02.XQACD[CLXARAYX])
              CLXREC.CLXERRF = "Y"; /* Set error flag*/
              KL0RM001.CL0RMERR[CLXLINEX] = "Y"; /* Set error flag on map*/
              KL0RM001.XXXERRID = "KL0RS06"; /* Set process*/
              converseLib.validationFailed(448); /* Overlapping products exist on the screen*/
              set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
              set KL0RM001.SY2CLRID[CLXLINEX] modified, bold;
              set KL0RM001.XDMCD[CLXLINEX] modified, bold;
            else
              CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
            end
          end
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
         /* end of while loop - look at next product on screen*/
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
end // end KL0RS06

// pf 7 action
Function KL0RS07()
   /* ************************************************************/
   /* *                                                         **/
   /* *                    PF7 ACTION                           **/
   /* *                                                         **/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS07"; /* Set current process name*/
  ;
  ;
  if (CLXREC.CLXARY1X == 1) /* If on first index and first page*/
    CLXREC.CLXERRF = "Y"; /* Set error*/
    KL0RM001.XXXERRID = "CL0RS08"; /* Process name*/
    converseLib.validationFailed(7); /* Top of data*/
  else
    CLXREC.CLXARY1X = CLXREC.CLXARY1X - 11; /* Decrement index 1 page*/
    if (CLXREC.CLXARY1X <= 0) /* If less than 1 page left back*/
      CLXREC.CLXARY1X = 1; /* Set to first index*/
    end
    CLXREC.CLXBLDSC = "Y"; /* rebuild screen with new products*/
  end
  ;
  ;
end // end KL0RS07

// pf 8 action
Function KL0RS08()
   /* ************************************************************/
   /* *                                                         **/
   /* *                   PF8 ACTION                            **/
   /* *                                                         **/
   /* *   this process handles the entry of pf key 8            **/
   /* *           (paging forward)                              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS08"; /* Set current process name*/
  ;
  ;
      /* move first line to the array index*/
  ;
  CL0RW01.CL0RWIXM = CLXREC.CLXARY1X + 11; /* Check index page forward*/
  if (CL0RW02.SY1STNBR[CL0RWIXM] == " ") /* If no data on next page*/
    CLXREC.CLXARAYX = CLXREC.CLXARY1X + 10; /* look at last entry on page*/
    if (CL0RW02.SY1STNBR[CLXARAYX] == " ")
      CLXREC.CLXERRF = "Y"; /* Set error*/
      KL0RM001.XXXERRID = "KL0RS08"; /* Process name*/
      if (CL0RW01.CL0RWINX < CL0RW01.CL0RWICT) /* more invoices to show*/
        converseLib.validationFailed(199); /* more prds to show for next ivc*/
      else
        converseLib.validationFailed(204); /* last page on last invoice*/
      end
    else
      CLXREC.CLXARY1X = CL0RW01.CL0RWIXM; /* Set index page forward*/
    end
  else
    CLXREC.CLXARY1X = CL0RW01.CL0RWIXM; /* Set index page forward*/
  end
  ;
  ;
end // end KL0RS08

// Update the row in VDEFIT01
Function KL0RS09()
   /* *************************************************************/
   /* *                                                          **/
   /* *           UPDATE THE ROW IN DCLAIM.VrtsIT01              **/
   /* *                                                          **/
   /* *     1)  need to delete the current row because price     **/
   /* *         is part of the key.                              **/
   /* *     2)  then move price to the record and add the row    **/
   /* *                                                          **/
   /* * Maintenance History:                                     **/
   /* * 06-14-90 CHELLM Added update of clkprcff to clnrec.      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0RS09"; /* Set current process name*/
  ;
  ;
     /* Update the price*/
  CLNREC.CLNGRPRC = CL0RW02.CLKCLPRC[CLXARAYX];
  CLNREC.CLNNTPRC = CL0RW02.CLKCLPRC[CLXARAYX];
  CLNREC.CLKPRCFF = CL0RW02.CLKPRCFF[CLXARAYX];
  ;
    /* Update the change date and time*/
  ;
  XX0XS01();
  CLNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* **************************************************/
      /* Update the selected row*/
   /* **************************************************/
  call "IO1330" ("U ", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    TA1REC.TA1LOCAT[2] = "UPDATE    ";
    XPCL010();
  end
  ;
  ;
end // end KL0RS09

// Update the row in VDEFIT01
Function KL0RS10()
   /* *************************************************************/
   /* *                                                          **/
   /* *           UPDATE THE ROW IN DCLAIM.VDEFIT01              **/
   /* *                                                          **/
   /* *     1)  need to delete the current row because price     **/
   /* *         is part of the key.                              **/
   /* *     2)  then move price to the record and add the row    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS10"; /* Set current process name*/
  ;
  ;
   /* **************************************************/
      /* delete the selected row*/
   /* **************************************************/
  call "IO1350" ("D ", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* Update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    TA1REC.TA1LOCAT[2] = "DELETE    ";
    XPCL010();
  end
  ;
  ;
     /* Update the price*/
  CLPREC.CLKCLPRC = CL0RW02.CLKCLPRC[CLXARAYX];
  CLPREC.CLKPRCFF = CL0RW02.CLKPRCFF[CLXARAYX];
  ;
    /* Update the change date and time*/
  ;
  XX0XS01();
  CLPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  CLPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* **************************************************/
      /* Update the selected row*/
   /* **************************************************/
  call "IO1350" ("A ", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* Update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    TA1REC.TA1LOCAT[2] = "UPDATE    ";
    XPCL010();
  end
  ;
  ;
end // end KL0RS10

// clear screen line
Function KL0RS11()
   /* *************************************************************/
   /* *                                                          **/
   /* *       if user entered duplicate nike prod id on screen   **/
   /* *   they got rid of it by eofing the nike prod id and the  **/
   /* *   customer prod id on the screen.  now the array needs   **/
   /* *   to be cleared as if the user never entered the*/
   /* *   duplicate nike prod id.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS11"; /* Set current process name*/
  ;
  ;
  if (KL0RM001.SY1STNBR[CLXLINEX] == " "
   && KL0RM001.SY2CLRID[CLXLINEX] == " "
   && KL0RM001.XDMCD[CLXLINEX] == " "
   && KL0RM001.KUIPRDID[CLXLINEX] == " "
   && KL0RM001.CLKAUTHQ[CLXLINEX] == 0
   && KL0RM001.CL0RMSEL[CLXLINEX] == " ")
    CL0RW02.CL0RMSEL[CLXARAYX] = " ";
    CL0RW02.SY1STNBR[CLXARAYX] = " ";
    CL0RW02.SY2CLRID[CLXARAYX] = " ";
    CL0RW02.XDMCD[CLXARAYX] = " ";
    CL0RW02.KUIPRDID[CLXARAYX] = " ";
    CL0RW02.CLKAUTHQ[CLXARAYX] = 0;
    CL0RW02.CLMTRTSQ[CLXARAYX] = 0;
    CL0RW02.XUMCD[CLXARAYX] = " ";
    CL0RW02.CLKPRCFF[CLXARAYX] = " ";
    CL0RW02.CLKCLPRC[CLXARAYX] = 0;
    CL0RW02.CLAESTVL[CLXARAYX] = 0;
     /* clear map fields*/
    KL0RM001.CL0RMSEL[CLXLINEX] = " ";
    KL0RM001.CLKAUTHQ[CLXLINEX] = 0;
    KL0RM001.CLMTRTSQ[CLXLINEX] = 0;
    KL0RM001.XUMCD[CLXLINEX] = " ";
    KL0RM001.CLKPRCFF[CLXLINEX] = " ";
    KL0RM001.CLKCLPRC[CLXLINEX] = 0;
    KL0RM001.CLAESTVL[CLXLINEX] = 0;
  end
  ;
  ;
end // end KL0RS11

// Select qty CLNREC and CLPREC
Function KL0RS12()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the selection key*/
   /* *          when scanning DCLAIM.VDEFIT01 rows.             **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS12"; /* Set current process name*/
  ;
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
  CLNREC.IV0IVCID = KL0RM001.IV0IVCID;
  CLNREC.XGPCD = CLAREC.XGPCD;
  CLNREC.SY1STNBR = CLKREC.SY1STNBR;
  CLNREC.SY2CLRID = IV3REC.SY2CLRID;
  CLNREC.XDMCD = IV3REC.XDMCD;
  CLNREC.XQACD = IV3REC.XQACD;
  CLNREC.XUMCD = IV3REC.XUMCD;
  ;
  CL0RW01.CLNRTSQ = 0;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CLNRTSQ = CL0RW01.CLNRTSQ + CLNREC.CLNRTSQ;
    CL0RW01.CLNRTSQ = CL0RW01.CLNRTSQ + CLNREC.CLNNCRQ;
    ;
    if (CLNREC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
      CL0RW02.CL0RWUOM[CLXARAYX] = "P"; /* variable unit of measure*/
    end
    ;
     /* find largest sequence number assoc with product*/
    if (CLNREC.CLHSEQNB > CL0RW02.CLHSEQNB[CLXARAYX])
      CL0RW02.CLHSEQNB[CLXARAYX] = CLNREC.CLHSEQNB;
    end
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes}; /* Actual item*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* sum CLPREC.CLPDEFQ*/
   /* **************************************/
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = -1;
  CLPREC.CL2ISNBR = -1;
  CLPREC.IV0IVCID = KL0RM001.IV0IVCID;
  CLPREC.XGPCD = CLAREC.XGPCD;
  CLPREC.SY1STNBR = IV3REC.SY1STNBR;
  CLPREC.SY2CLRID = IV3REC.SY2CLRID;
  CLPREC.XDMCD = IV3REC.XDMCD;
  CLPREC.XQACD = IV3REC.XQACD; /* 10-04-90*/
  CLPREC.XUMCD = IV3REC.XUMCD; /* 10-04-90*/
  ;
  CL0RW01.CLPDEFQ = 0;
  ;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0RW01.CLPDEFQ = CL0RW01.CLPDEFQ + CLPREC.CLPDEFQ;
    CL0RW01.CLPDEFQ = CL0RW01.CLPDEFQ + CLNREC.CLNNCRQ;
    ;
    if (CLPREC.XUMCD != CL0RW02.XUMCD[CLXARAYX])
      CL0RW02.XUMCD[CLXARAYX] = "P"; /* variable unit of measure*/
    end
    ;
     /* find largest sequence number assoc with product*/
    if (CLPREC.CLHSEQNB > CL0RW02.CLHSEQNB[CLXARAYX])
      CL0RW02.CLHSEQNB[CLXARAYX] = CLPREC.CLHSEQNB;
    end
    call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
end // end KL0RS12

// get the product price
Function KL0RS14()
     /* *****************************************************/
     /* if the unit of measure has changed, recalculate the*/
     /* claim price.*/
     /* *****************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS05"; /* Set current process name*/
  CL0RW01.CL0RWPRC = 0; /* init xum conversion price*/
  ;
   /* 10-04-90 convert prices to match new unit of measure*/
  if (CL0RW02.CL0RWUMF[CLXARAYX] == "Y") /* new unit of measure entered*/
    if (KL0RM001.CLKPRCFF[CLXLINEX] != "E") /* but dont chng entered prices.*/
      if (CL0RW02.XUMCD[CLXARAYX] == "R "
       || CL0RW02.XUMCD[CLXARAYX] == "L ")
         /* convert to half pair price*/
        if (CL0RW02.XUMCD[CLXARAYX] in XUMTBL.XUMCD)
          CL0RW01.CL0RWPRC = CL0RW02.CLKCLPRC[CLXARAYX];
          CL0RW01.CL0RWPRC = CL0RW01.CL0RWPRC * XUMTBL.XUMCONVF[sysVar.arrayIndex];
          CL0RW02.CLKCLPRC[CLXARAYX] = CL0RW01.CL0RWPRC;
        end
        ;
           /* *****************/
           /* put price on map*/
           /* *****************/
        ;
        KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
        ;
        ;
      else
          /* convert to eachs price*/
        if (SYCREC.XUMCD in XUMTBL.XUMCD)
          CL0RW01.CL0RWPRC = CL0RW02.CLKCLPRC[CLXARAYX];
          CL0RW01.CL0RWPRC = CL0RW01.CL0RWPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
          CL0RW02.CLKCLPRC[CLXARAYX] = CL0RW01.CL0RWPRC;
        end
        ;
           /* *****************/
           /* put price on map*/
           /* *****************/
        ;
        KL0RM001.CLKCLPRC[CLXLINEX] = CL0RW02.CLKCLPRC[CLXARAYX];
        ;
        ;
      end
    end
  end
  ;
end // end KL0RS14

// edit product brand code
Function KL0RS40()
   /* *************************************************************/
  ;
    /* Edit the product brand code for customer-product legal*/
    /* entity mis-match.*/
  ;
    /* Maintenance History:*/
    /* 05-31-90 CHELLM created*/
    /* 06-06-90 chellm use xottbl.xdvcd for claim division and*/
                    /* match against product xcvcd in stead of*/
                    /* product brand - claim old division match.*/
    /* 06-18-90 CHELLM If product exists on the invoice, allow*/
                    /* XLE and XBC mis-matches.*/
   /* *************************************************************/
  ;
  TA1REC.TA1LOCAT[2] = "CL0RS40";
  ;
  ;
   /* If the product is from an invoice,*/
                               /* allow XLE and XBC mis-matches.*/
  if (CL0RW02.CL0RWSFL[CLXARAYX] == 0)
    /* NEXT SENTENCE*/
  else
    return;
  end
  ;
   /* If either the claim or the invoice was set up prior*/
   /* to 06-01-90 it doesnt have a brand code, so make sure*/
   /* the legal entity of customer match the legal entity of*/
   /* the product.*/
  if (CLAREC.XBCCD == " ")
    ;
    if (CLWREC.XLECD == "01") /* If Nike Customer*/
      if (SYCREC.XBCCD == "01") /* and not Nike Product*/
                                 /* ;   Product is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        CL0RW01.CL0RWPSW = "Y";
        KL0RM001.XXXERRID = "KL0RS40";
        set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    ;
    if (CLWREC.XLECD == "05") /* If Side 1 Customer*/
      if (SYCREC.XBCCD == "05" /* and Side 1 Product*/
       || SYCREC.XBCCD == "06" /* or Relay  product*/
       || SYCREC.XBCCD == "07") /* or i.e    product*/
                                 /* ;  then Product is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        CL0RW01.CL0RWPSW = "Y";
        KL0RM001.XXXERRID = "KL0RS40";
        set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    ;
     /* check the division code value against allowable*/
     /* division codes for the claims order type.*/
    ;
    if (CLAREC.XOTCD in XOTTBL.XOTCD)
      ;
      if (SYCREC.XDVCD1 == XOTTBL.XDVCD1[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD2[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD3[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD4[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD5[sysVar.arrayIndex])
         /* next sentence*/
      else
        converseLib.validationFailed(637); /* the product brand must match the*/
        CLXREC.CLXERRF = "Y"; /* claims division or new division*/
        CL0RW01.CL0RWPSW = "Y";
        KL0RM001.XXXERRID = "KL0RS40";
        set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
      end
    else
      converseLib.validationFailed(096); /* order type not on system table*/
      CLXREC.CLXERRF = "Y";
    end
    ;
  else
    ;
    if (SYCREC.XBCCD != CLAREC.XBCCD) /* if brand codes don't match*/
      converseLib.validationFailed(611); /* Product brand must match claim brand*/
      CLXREC.CLXERRF = "Y";
      CL0RW01.CL0RWPSW = "Y";
      KL0RM001.XXXERRID = "KL0RS40";
      set KL0RM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
    end
  end
  ;
  ;
end // end KL0RS40

// default remerch flags
Function KL0RS91()
   /* *************************************************************/
   /* *                                                          **/
   /* *       default remerchandising flags on ra header         **/
   /* *                                                          **/
   /* * Maintenance log                                          **/
   /* * 10-31-91 twatso  added osd code for dec 91 installation  **/
   /* *                  osd to be treated like def or cdr       **/
   /* * 12-01-93 jcarey  added initialization of remerchandising **/
   /* *                  option cl-upc-labl-fl.                  **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS91"; /* set current process name*/
  ;
  ;
  CLJREC.YRMRESTK = 0;
  ;
  if (CLAREC.YCTCD == "DEF"
   || CLAREC.YCTCD == "CDR"
   || CLAREC.YCTCD == "OSD")
    CLJREC.CLJRSKFL = "N";
    CLJREC.CLJRBGFL = "N";
    CLJREC.CLJRBXFL = "N";
    CLJREC.CLJRTGFL = "N";
    CLJREC.CLJUNLFL = "N";
    CLJREC.CL-UPC-LABL-FL = "N";
  else
    CLJREC.CLJRSKFL = "Y";
    CLJREC.CLJRBGFL = "Y";
    CLJREC.CLJRBXFL = "Y";
    CLJREC.CLJRTGFL = "Y";
    CLJREC.CLJUNLFL = "Y";
    CLJREC.CL-UPC-LABL-FL = "Y";
  end
  ;
  ;
  ;
     /* **************************************************/
     /* read customer company vcmpny01,*/
     /* to get xau_acct_cls-cd, read account type table*/
     /* to get account type code. if not '02' value we  have*/
     /* internal account and don't charge for restocking*/
     /* **************************************************/
  ;
  CLJREC.CLJRSKFL = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT == "A")
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "02")
      CLJREC.CLJRSKFL = "N";
    end
  end
  ;
  ;
    /* ********************************************/
    /* if haven't found 'n' for restocking flag*/
    /* ********************************************/
  ;
  ;
  if (CLJREC.CLJRSKFL == "N")
     /* next sentence*/
  else
    if (CLAREC.YCRCD in YCRTBL.YCRCD
     && YCRTBL.XXXSTAT == "A")
      CLJREC.CLJRSKFL = YCRTBL.CLJRSKFL[sysVar.arrayIndex];
    end
  end
  ;
  ;
    /* ***********************************************************/
    /* * if holiday walking claim and setup before march 9 1990 **/
    /* * default restocking flag to 'n' and restock percent to 0**/
    /* ***********************************************************/
  ;
  if (CLAREC.CLASETDT < 19900309)
    if (CLAREC.SP1ID == "AST1"
     || CLAREC.SP1ID == "AST2"
     || CLAREC.SP1ID == "AST3")
         /* OR CLAREC.SP1ID EQ 'TEST';*/
         /* OR CLAREC.SP1ID EQ 'WTPA';*/
         /* OR CLAREC.SP1ID EQ 'WA89';*/
      CLJREC.YRMRESTK = 0;
      CLJREC.CLJRSKFL = "N";
    end
  end
  ;
  ;
end // end KL0RS91

// fetch override for ivc prd
Function KL0RS95()
   /* *************************************************************/
   /* *    fetch invoice ovrride for each product with price*/
   /* *    from invoice*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0RS95"; /* set current process name*/
  ;
  ;
  ;
  call "IO2950" ("SS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0RS95";
      TA1REC.TA1LOCAT[4] = "IO2950";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VIVOVR01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end
  ;
  ;
  call "IO2950" ("SN", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0RS95";
      TA1REC.TA1LOCAT[4] = "IO2950";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VIVOVR01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end
  ;
  ;
end // end KL0RS95

//*** RECORD=CL0RW01 ****
// hold working storage values for the application
// ***********************
Record CL0RW01 type basicRecord
  10 CL0RWICT CL0RWICT ; 
  10 CL0RWINX CL0RWINX ; 
  10 CL0RWIXM CL0RWIXM ; 
  10 CL0RWWK1 CL0RWWK1 ; 
  10 CL0RWWK2 CL0RWWK2 ; 
  10 CL0RWWK3 CL0RWWK3 ; 
  10 CL0RWHVR CL0RWHVR ; 
  10 CL0RWHPO CL0RWHPO ; 
  10 CL0RWEFL CL0RWEFL ; 
  10 CL0RWSW1 CL0RWSW1 ; 
  10 CL0RWSW2 CL0RWSW2 ; 
  10 CL0RWRMI CL0RWRMI ; 
  10 CL0RWIVF CL0RWIVF ; 
  10 CL0RWNIR CL0RWNIR ; 
  10 CL0RWINQ CL0RWINQ ; 
  10 CL0RWSWR CL0RWSWR ; 
  10 CL0RWPSW CL0RWPSW ; 
  10 CL0RWAAF CL0RWAAF ; 
  10 CL0RWAPF CL0RWAPF ; 
  10 CL0RWPCP CL0RWPCP ; 
  10 CL0RWPED CL0RWPED ; 
  10 CL0RWCLP CL0RWCLP ; 
  10 CL0RWSTP CL0RWSTP ; 
  10 CL0RWPRC CL0RWPRC ; 
  10 CL0RWUPA CL0RWUPA ; 
  10 CLNRTSQ CLNRTSQ ; 
  10 CLPDEFQ CLPDEFQ ; 
  10 IV0IVCID IV0IVCID ; 
  10 IVANBLFL IVANBLFL ; 
  10 SP5SZPR SP5SZPR ; 
  10 XATCD XATCD ; 
  10 CLIADVSQ CLIADVSQ ; 
  10 CLJRAIND CLJRAIND ; 
  10 CLAESTVL CLAESTVL ; 
  10 CLADBOCL CLADBOCL ; 
  10 CL0RWTRQ CL0RWTRQ ; 
  10 CL0RWTAQ CL0RWTAQ ; 
  10 CL0RWTCV CL0RWTCV ; 
  10 CL0RWCVL CL0RWCVL ; 
  10 CL0RWMAX CL0RWMAX [3] ; 
  10 CL0RWDFL CL0RWDFL ; 
  10 CL0RWDCT CL0RWDCT ; 
  10 CL0RWCLC CL0RWCLC ; 
  10 CL0RWCLS CL0RWCLS ; 
  10 SY2CEDT1 SY2CEDT1 ; 
  10 CL0RWIDT CL0RWIDT ; 
end // end CL0RW01

//*** RECORD=CL0RW02 ****
// ****************  Claim prd Code Table  *******************
// 
// this record is used to hold all prd's that will appear
// on the screen.
// 
// 
// DB2 Table:           DCLAIM.Vcladj01
//                      dclaim.vraitm01
//                      dinvc.vivitm01
// 
// Copylib Member:      DCL00223
//                      dcl00214
//                      dcl00189
// 
// I/O Mod:             IO1370
//                      io1280
//                      io1100
// 
// Key to DB2 Table:    varies
// 
// Date Created:        07/01/88
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 07-01-88   lholco    Initial record creation
// 10-04-90   chellm    Added unit of measure changed flag.
// 
// ***********************
Record CL0RW02 type basicRecord
  10 IV0IVCID IV0IVCID ; 
  10 CLJTATHQ CLJTATHQ ; 
  10 CL0RW2GP CL0RW2GP [500] ; 
    15 CL0RMSEL CL0RMSEL ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 CL0RWCHF CL0RWCHF ; 
    15 CL0RWSFL CL0RWSFL ; 
    15 CLHSEQNB CLHSEQNB ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 OP2LNINB OP2LNINB ; 
    15 KUIPRDID KUIPRDID ; 
  10 CL0RW2GB CL0RW2GB [500] ; 
    15 XQACD XQACD ; 
    15 XUMCD XUMCD ; 
    15 XPYCD XPYCD ; 
    15 XCOCD XCOCD ; 
    15 YCECD YCECD ; 
    15 IV3LNSQ IV3LNSQ ; 
    15 CLKAUTHQ CLKAUTHQ ; 
    15 CLMTRTSQ CLMTRTSQ ; 
    15 CLKPRCFF CLKPRCFF ; 
    15 CLKCLPRC CLKCLPRC ; 
    15 CLAESTVL CLAESTVL ; 
    15 CL0RWPDF CL0RWPDF ; 
    15 CL0RWUOM CL0RWUOM ; 
    15 CL0RWPPF CL0RWPPF ; 
    15 CL0RWUMF CL0RWUMF ; 
    15 XEGCD XEGCD ; 
    15 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    15 OP-BK-YR OP-BK-YR ; 
    15 OP-BK-MO OP-BK-MO ; 
end // end CL0RW02

//*** RECORD=CL0RW03 ****
// Invoice number save array for CL0R:
// 
//             This working storage is designed to hold
//             all the invoice numbers for the associated
//             claim number.
// ***********************
Record CL0RW03 type basicRecord
  5 CL0RW3GP CL0RW3GP [200] ; 
    10 IV0PARTN IV0PARTN ; 
    10 IV0IVCID IV0IVCID ; 
end // end CL0RW03

//*** RECORD=CL0RW06 ****
// Pass Record for IO1280 - CLkREC :
// 
//             This working storage is designed hold the
//             passed values for the call to IO1280
//  DATE     BY    WHY
// 08-14-89 bcourt add CLAESTVL, used in CL0O to total sizes
//                 for a product.
// ***********************
Record CL0RW06 type basicRecord
  10 CL0RWFNC CL0RWFNC ; 
  10 CL0RWSM1 CL0RWSM1 ; 
  10 CL0RWIN1 CL0RWIN1 ; 
  10 CLAESTVL CLAESTVL ; 
  10 CL0RWIN2 CL0RWIN2 ; 
end // end CL0RW06

// selection field
DataItem CL0RMSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group-b level for CL0RW02 rec
DataItem CL0RW2GB char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for CL0RW02 record
DataItem CL0RW2GP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for CL0RW03 record
DataItem CL0RW3GP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n authorize all products
DataItem CL0RWAAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n authorize products exist
DataItem CL0RWAPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change flag (yes,added,blank)
DataItem CL0RWCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found non-closeout price-c
DataItem CL0RWCLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default price by style,color
DataItem CL0RWCLP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// found non-closeout price-s
DataItem CL0RWCLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CL0R150 work field claestvl
DataItem CL0RWCVL decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// deadlock count
DataItem CL0RWDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// deadlock flag
DataItem CL0RWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n product exists flag
DataItem CL0RWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function code
DataItem CL0RWFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have price ovrd  invoice
DataItem CL0RWHPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have returns for invoice
DataItem CL0RWHVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice count
DataItem CL0RWICT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0RWIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// indicator for db item
DataItem CL0RWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// result indicator for value
DataItem CL0RWIN2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n inquiry only flag
DataItem CL0RWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice index
DataItem CL0RWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n no invoice flag
DataItem CL0RWIVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// generic index
DataItem CL0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum number of lines
DataItem CL0RWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n new invc nbr requested
DataItem CL0RWNIR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product cost/price pct
DataItem CL0RWPCP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product protect flag
DataItem CL0RWPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod price effective date
DataItem CL0RWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n prepack flag
DataItem CL0RWPPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xum conversion price
DataItem CL0RWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n problem switch
DataItem CL0RWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have removed a product
DataItem CL0RWRMI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record source flag
DataItem CL0RWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum
DataItem CL0RWSM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by style
DataItem CL0RWSTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n end of set switch 1
DataItem CL0RWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n end of set switch 2
DataItem CL0RWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have shown warning
DataItem CL0RWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total for clkauthq (auth)
DataItem CL0RWTAQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for claestvl (clm value)
DataItem CL0RWTCV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for clkrqtq (cust req)
DataItem CL0RWTRQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n xum changed flag
DataItem CL0RWUMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p/' ' show variable uom
DataItem CL0RWUOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n update clarec (claim head)
DataItem CL0RWUPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working field 1
DataItem CL0RWWK1 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field 2
DataItem CL0RWWK2 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field 3
DataItem CL0RWWK3 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

