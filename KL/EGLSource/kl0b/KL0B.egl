package kl0b;

import as1.common.ARCCCREF;
import as1.common.ARCCHKNB;
import as1.common.ARCREFNB;
import corpcom1.*;
import corpcom2.XZZKEYGP;
import corpcom2.XZZQRYID;
import corpcom2.XZZQRYLN;
import corpcom2.XZZQRYRN;
import corpcom2.XZZREC;
import corpcom3.XPCL002;
import corpcom3.XPCL006;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSIVSN4;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CLWSETHI;
import corpcom5.CLWSETLO;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.UT1REC;
import corpcom6.UT2REC;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpcom7.ZZZSTM;
import corpx1.XDVABRV;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XOBTBL;
import corpx1.XROTBL;
import corpx1.XSOTBL;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XOBABRV;
import corpx2.XOBCD;
import corpx2.XROCD;
import corpx2.XSOABRV;
import corpx2.XSOCD;
import corpx2.XWHCD;
import corpy2.YATTBL;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSCD;
import corpy2.YCSTBL;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YMOTBL;
import corpy2.YPSCD;
import corpy2.YPSDESC;
import corpy2.YPSTBL;
import corpy2.YUATBL;
import corpz3.ZZZSDT;
import iv.common.IV0IVCID;
import iv.common.IVYREC;
import iv.common.IVZREC;
import ku.common.KUCCOID;
import ku.common.KUCGRPID;
import ku.common.KUCREC;
import ku.common.KUDREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUNREC;
import mn.common.MN1REC;
import mn.common.MN2REC;
import op.common.OP1CUOID;
import op.common.OP1CUPO;
import op.common.OP1NORID;
import sm.common.SM1AGYID;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM4REPID;
import sm.common.SM5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL0B ****
// ************************************************************
// maint.
// date      by     why
// --------  ------ -------------------------------------------
// 03-08-88  bcourt add dcorp.vparm101 for 'batch only' overnit
//                  inquiries by group company i.d, warehouse,
//                  or sales office.  keep batch to run during
//                  the day, but drop batch job class 'q'.
// 
// 01-31-89  JWOOD  ADDED NONCSP OPTION TO CALLS
// 01-31-89  JWOOD  ADDED XSSEGTR LOGIC
// 04-24-89  bcourt Rev # 1
//                  Change XOT to base order type for sport/
//                  casual change. Drop XOT table.
// 05-19-89  bcourt DB2 structure change: CLAREC,KUCREC,KUMREC,
//                  XGPTBL, XWHTBL.
// 08-04-89  gdecke remove 'notify' from jcl in cl0bt02.
// 09-05-89  JWOOD  CHANGED CL0BZ98 - MN2REC KEY CHANGE DUE TO
//                  SECURITY FILE BEING CHANGED....
// 01-19-90  bcourt DB2 structure change: CLHrec,KUCREC,KUMREC.
// 07-27-90  bcourt add cl0bw04 to support new access to IO1000
//                  for DCORP.VPARM101.
// 04-24-91  GDECKE #CL966 - DEPARTMENT CONVERSION CHANGES.
// 06-19-91  twatso DB2 structure change: regen only (kuc kun)
// 08-08-91  wjohns Change application name and commarea
//                    references to renamed claims applications
// 09-11-91 twatso  changed cl0b to kl0b in cl0b210 map name
// 09-12-91 twatso  changed cl0b to kl0b in numerous groups
// 11-18-91 twatso  removed userid and password from kl0bt02
// 01-13-92 sgorga  initialized ta1rec, ta2rec.
//                  kl0b400,099,sbg,sz6, and 120.
// 05-19-92 sgorga  Fixed a the index check in kl0b400.
// 09-14-92 jhecke  rep name is no longer found on
//                  dslsmn.vragcy01 and is now retieved from
//                  dslsmn.vreps001. kl0bsec.
// 01-21-93 jhecke  set cl0bw98 empty in kl0b001. was causing
//                  abend on screen kl0bm004.
// 11-12-93 GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn IN
//                  KL0BSBC. NOV. 1993 DB2 TABLE CHANGES.
// 01-01-98 PPERK1  Regenerate appl to pull in new version of
//                  XPLC002 to allow fastpath to KL07.
// 02-24-98 NFIELD  Y2K Compliance - changes to KL0BSBO
// 05-20-99 GDECKE  ALLOW TRANSFER TO KL08
// 09-09-99 SSANK1  Changed Map presentation of KL0BM001 to
//                  accomodate 4 digit nike ord id
// 07-17-01 DSINHA  Added SAP RTN SO NBR as display field on
//                  map KL0BM001 replacing A/R Ref field.
// ************************************************************
// *********************
Program KL0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0BW00 CL0BW00; // record
  CL0BW01 CL0BW01; // record
  CL0BW02 CL0BW02; // record
  CL0BW03 CL0BW03; // record
  CL0BW04 CL0BW04; // record
  CL0BW0A CL0BW0A; // record
  CL0BW0B CL0BW0B; // record
  CL0BW0C CL0BW0C; // record
  CL0BW94 CL0BW94; // record
  CL0BW95 CL0BW95; // record
  CL0BW96 CL0BW96; // record
  CL0BW97 CL0BW97; // record
  CL0BW98 CL0BW98; // record
  CL0BW99 CL0BW99; // record
  CL0BW9J CL0BW9J { redefines = CL0BW99 } ; // record
  CL0BW9K CL0BW9K { redefines = CL0BW99 } ; // record
  CL0BW9L CL0BW9L { redefines = CL0BW99 } ; // record
  CL0BW9M CL0BW9M { redefines = CL0BW99 } ; // record
  CL0BW9N CL0BW9N { redefines = CL0BW99 } ; // record
  CL0BW9O CL0BW9O { redefines = CL0BW99 } ; // record
  CL0BW9P CL0BW9P { redefines = CL0BW99 } ; // record
  CL0BW9Q CL0BW9Q { redefines = CL0BW99 } ; // record
  CL0BW9R CL0BW9R { redefines = CL0BW99 } ; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLDREC CLDREC; // record
  CLEREC CLEREC; // record
  CLHREC CLHREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IVYREC IVYREC; // record
  IVZREC IVZREC; // record
  KUCREC KUCREC; // record
  KUDREC KUDREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KL0BT02 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YMOTBL {deleteAfterUse = yes}; // table
  use YPSTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0BM.KL0BM001,  // forms
      KL0BM.KL0BM002, 
      KL0BM.KL0BM003, 
      KL0BM.KL0BM004
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0B000: KL0B000();
    exit program;
    KL0B001: KL0B001();
    KL0B050: KL0B050();
    KL0B100: KL0B100();
    KL0B102: KL0B102();
    KL0B110: KL0B110();
    KL0B120: KL0B120();
    KL0B130: KL0B130();
    KL0B140: KL0B140();
    KL0B200: KL0B200();
    KL0B201: KL0B201();
    KL0B210: KL0B210();
    KL0B220: KL0B220();
    KL0B230: KL0B230();
    KL0B211: KL0B211();
    KL0B300: KL0B300();
    KL0B301: KL0B301();
    KL0B310: KL0B310();
    KL0B320: KL0B320();
    KL0B330: KL0B330();
    KL0B311: KL0B311();
    KL0B400: KL0B400();
  end // end main
end // end KL0B

// main flow
Function KL0B000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B000";
  ;
  KL0B001(); /* initilize the application*/
  ;
  KL0BM001.XXXRVNBR = "01"; /* appl maintainence revision number*/
  KL0BM002.XXXRVNBR = "01"; /* appl maintainence revision number*/
  KL0BM003.XXXRVNBR = "01"; /* appl maintainence revision number*/
  KL0BM004.XXXRVNBR = "00"; /* appl maintainence revision number*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0B050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A"; /* return here = bad transfer*/
  XPCL002(); /* try again*/
  ;
  ;
  ;
end // end KL0B000

// init claims inq. selection
Function KL0B001()
   /*  */
   /* 01-13-92  sgorga  Set ta1rec, ta2rec, ut2rec empty.*/
   /* 01-21-93  jhecke  Set cl0bw98 empty.*/
   /*  */
  ;
  CLXREC.CLXCPROC = "CL0B001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set CLXREC empty; /* clear common working storage*/
  set CL0BW01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set UT2REC empty;
  set CL0BW98 empty;
  ;
   /* MOVE 'N' TO CL0BW01.CL0BWPHB ; only phase A code*/
  CL0BW01.CL0BWPHB = "Y"; /* expand for phase B code*/
  CL0BW01.CL0BWARN = "N"; /* CONVERTED COMPANY WARNING FLAG*/
  ;
   /* TEMP001                         ; test data creation*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  XPCL011(); /* claims entry check*/
  ;
  ;
  ;
     /* *********************************/
     /* set up w-s array of screen names*/
     /* *********************************/
  ;
  if (CLWREC.CLWCL0BX == " ")
    CLXREC.CLXCSCRN = "KL0BM001"; /* first screen of application*/
  else
    CL0BW01.CL0BWMP0 = "KL0BM00"; /* create map name*/
    CL0BW01.CL0BWMPX = CLWREC.CLWCL0BX; /* using commarea info*/
    CLXREC.CLXCSCRN = CL0BW01.CL0BWMAP;
  end
  ;
  CLXREC.CLXSNAME[1] = "KL0BM001"; /* init screens used in this appl*/
  CLXREC.CLXSNAME[2] = "KL0BM002";
  CLXREC.CLXSNAME[3] = "KL0BM003";
  CLXREC.CLXSNAME[4] = "KL0BM004";
  ;
  ;
     /* *******************/
     /* set map id's, date*/
     /* *******************/
  ;
  KL0BM001.XXXPRCNM = "KL0B100"; /* map process name*/
  KL0BM002.XXXERRID = "KL0B200";
  KL0BM003.XXXERRID = "KL0B300";
  KL0BM004.XXXPRCNM = "KL0B400";
  ;
  KL0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  KL0BM002.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0BM003.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0BM004.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
end // end KL0B001

// decide which map to show
Function KL0B050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* * 03-12-90 bcourt add data to abend display               **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0); /* clear error nbr*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen kl0bm001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0B100(); /* inquiry selects*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen kl0bm002*/
      while (CLXREC.CLXEOSF == "N") /* show until user is done*/
        KL0B200(); /* customer sub-selects*/
      end
    else
      if (CLXREC.CLXSCRNX == 3) /* if screen kl0bm003*/
        while (CLXREC.CLXEOSF == "N") /* show until user is done*/
          KL0B300(); /* slsmn/whse sub-selects*/
        end
      else
        if (CLXREC.CLXSCRNX == 4) /* if screen kl0bm004*/
          while (CLXREC.CLXEOSF == "N") /* show until user is done*/
            KL0B400(); /* batch submit*/
          end
        else
          TA1REC.TA1MAP = CLXREC.CLXCSCRN;
          TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME, SEE MAP NAME";
          TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
          XPCL010(); /* abend*/
        end
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0b050...*/
       /* else*/
         /* the perform will auto return to cl0b000.*/
  ;
end // end KL0B050

// submit jcl to internal reader
Function KL0B099()
  ;
  ;
   /* ************************************************************/
   /* format the variable areas of the jcl statement.*/
   /* write jcl to the internal reader queue.*/
   /* if error occurred, report to the error diagnosis facility*/
   /* indicate the job was submitted when end of file is written*/
   /* ************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* ************************************************************/
  ;
  if (CLWREC.CLWMAPFM == "KL0BM002")
    if (CL0BW98.CL0BTTYP == "J") /* job statement*/
      CL0BW9J.CL0BWUID = CL0BW98.CL0BWUID; /* user identificatio*/
    end
    ;
    /* IF CL0BW98.CL0BTTYP EQ 'N'      ;  notify statement*/
    /* MOVE CL0BW98.CL0BWUID TO CL0BW9N.CL0BWUID; user identifica*/
    /* END ;*/
    ;
    if (CL0BW98.CL0BTTYP == "O") /* output statement*/
      CL0BW9O.CL0BWFC1 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BWFC2 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BMCPY = CL0BW00.CL0BMCPY; /* number of copies*/
      if (CL0BW98.CL0BMRMT == " ") /* we want lazer printer*/
        CL0BW9O.CL0BW9OG = " "; /* so clear dest parm*/
      else
        CL0BW9O.CL0BW9OG = ",DEST=";
        CL0BW9O.CL0BMRMT = CL0BW98.CL0BMRMT; /* print destination*/
      end
    end
    ;
    if (CL0BW98.CL0BTTYP == "K") /* output statement*/
      CL0BW9K.CL0BWEXE = CL0BW0B.CL0BWEXE;
    end
    ;
    if (CL0BW98.CL0BTTYP == "L") /* output statement*/
      CL0BW9L.CL0BWFCD = CL0BW0B.CL0BWFCD;
      CL0BW9L.CL0BWOCL = CL0BW0B.CL0BWOCL;
    end
    ;
    if (CL0BW98.CL0BTTYP == "M") /* output statement*/
      CL0BW9M.CL0BWPRC = CL0BW0B.CL0BWPRC;
    end
    ;
    if (CL0BW98.CL0BTTYP == "P") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW00.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "Q") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW0A.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "S") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW0C.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "R") /* job class statement*/
      CL0BW9R.CL0BWJBC = CL0BW0B.CL0BWJBC; /* report parameters*/
    end
    ;
  end
  ;
  ;
  ;
  if (CLWREC.CLWMAPFM == "KL0BM003")
    if (CL0BW98.CL0BTTYP == "J") /* job statement*/
      CL0BW9J.CL0BWUID = CL0BW98.CL0BWUID; /* user identificatio*/
    end
    ;
    /* IF CL0BW98.CL0BTTYP EQ 'N'      ;  notify statement*/
    /* MOVE CL0BW98.CL0BWUID TO CL0BW9N.CL0BWUID; user identifica*/
    /* END ;*/
    ;
    if (CL0BW98.CL0BTTYP == "O") /* output statement*/
      CL0BW9O.CL0BWFC1 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BWFC2 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BMCPY = CL0BW00.CL0BMCPY; /* number of copies*/
      if (CL0BW98.CL0BMRMT == " ") /* we want lazer printer*/
        CL0BW9O.CL0BW9OG = " "; /* so clear dest parm*/
      else
        CL0BW9O.CL0BW9OG = ",DEST=";
        CL0BW9O.CL0BMRMT = CL0BW98.CL0BMRMT; /* print destination*/
      end
    end
    ;
    if (CL0BW98.CL0BTTYP == "K") /* output statement*/
      CL0BW9K.CL0BWEXE = CL0BW0B.CL0BWEXE;
    end
    ;
    if (CL0BW98.CL0BTTYP == "L") /* output statement*/
      CL0BW9L.CL0BWOCL = CL0BW0B.CL0BWOCL;
      CL0BW9L.CL0BWFCD = CL0BW0B.CL0BWFCD;
    end
    ;
    if (CL0BW98.CL0BTTYP == "M") /* output statement*/
      CL0BW9M.CL0BWPRC = CL0BW0B.CL0BWPRC;
    end
    ;
    if (CL0BW98.CL0BTTYP == "P") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW00.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "Q") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW0A.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "S") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW0C.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "R") /* job class statement*/
      CL0BW9R.CL0BWJBC = CL0BW0B.CL0BWJBC; /* report parameters*/
    end
  end
  ;
  ;
  if (CLWREC.CLWMAPFM == "KL0BM001"
   || CLWREC.CLWMAPFM == "KL0DM001")
    if (CL0BW98.CL0BTTYP == "J") /* job statement*/
      CL0BW9J.CL0BWUID = CL0BW98.CL0BWUID; /* user identificatio*/
    end
    ;
    /* IF CL0BW98.CL0BTTYP EQ 'N'      ;  notify statement*/
    /* MOVE CL0BW98.CL0BWUID TO CL0BW9N.CL0BWUID; user identifica*/
    /* END ;*/
    ;
    if (CL0BW98.CL0BTTYP == "O") /* output statement*/
      CL0BW9O.CL0BWFC1 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BWFC2 = CL0BW0B.CL0BWFCD;
      CL0BW9O.CL0BMCPY = CL0BW00.CL0BMCPY; /* number of copies*/
      if (CL0BW98.CL0BMRMT == " ") /* we want lazer printer*/
        CL0BW9O.CL0BW9OG = " "; /* so clear dest parm*/
      else
        CL0BW9O.CL0BW9OG = ",DEST=";
        CL0BW9O.CL0BMRMT = CL0BW98.CL0BMRMT; /* print destination*/
      end
    end
    ;
    if (CL0BW98.CL0BTTYP == "K") /* output statement*/
      CL0BW9K.CL0BWEXE = CL0BW0B.CL0BWEXE;
    end
    ;
    if (CL0BW98.CL0BTTYP == "L") /* output statement*/
      CL0BW9L.CL0BWFCD = CL0BW0B.CL0BWFCD;
      CL0BW9L.CL0BWOCL = CL0BW0B.CL0BWOCL;
    end
    ;
    if (CL0BW98.CL0BTTYP == "M") /* output statement*/
      CL0BW9M.CL0BWPRC = CL0BW0B.CL0BWPRC;
    end
    ;
    if (CL0BW98.CL0BTTYP == "P") /* parameter statement*/
      CL0BW99.CL0BWJCL = CL0BW00.CL0BWJCL; /* report parameters*/
    end
    ;
    if (CL0BW98.CL0BTTYP == "R") /* job class statement*/
      CL0BW9R.CL0BWJBC = CL0BW0B.CL0BWJBC; /* report parameters*/
    end
    ;
  end
  ;
  ;
  try
    add CL0BW99 ;
  end
  ;
  if (sysVar.errorCode != "00000000")
    set TA1REC empty;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "CL0B099";
    TA1REC.TA1LOC = "WRITE JCL TO INTERNAL READER";
    TA1REC.TA1MAP = sysVar.errorCode;
    SQLCA.SQLCAREC = CL0BW99.CL0BWJCL;
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    ;
    converseLib.validationFailed(10);
    ;
    exit stack;
    ;
  end
  ;
  if (CL0BW99.CL0BWJCL == "/*EOF") /* end of file*/
    CL0BW98.CL0BWSWS = "Y"; /* indicate job submitted*/
  else
    CL0BW98.CL0BWIXT = CL0BW98.CL0BWIXT + 1; /* increment index*/
  end
end // end KL0B099

// map inquiry selections
Function KL0B100()
  ;
  CLXREC.CLXCPROC = "CL0B100"; /* current process*/
  ;
  if (CLXREC.CLXBLDSC == "Y" /* if build map*/
   && CLXREC.CLXERRF != "Y") /* and no errors to re-show*/
    KL0B102(); /* build map*/
    CLXREC.CLXBLDSC = "N"; /* skip next time thru*/
  end
  ;
  ;
  converse KL0BM001 ;
     /* *******************/
     /* clear message flds*/
     /* *******************/
  ;
  KL0BM001.VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N"; /* re-set error flag*/
  converseLib.validationFailed(0);
  ;
  ;
     /* **************/
     /* check pf keys*/
     /* **************/
  ;
  KL0BS01(); /* check standard pf keys*/
  ;
  if (CLXREC.CLXERRF == "Y") /* if have found errors*/
    return; /* errors/msg's - display menu*/
  end
  ;
  ;
     /* *******************/
     /* check for fastpath*/
     /* *******************/
  ;
  if (KL0BM001.CATOAP != " " /* if have any data, go edit*/
   || KL0BM001.CAITEM != " ")
    COMMAREA.CATOAP = KL0BM001.CATOAP;
    COMMAREA.CAITEM = KL0BM001.CAITEM;
    KL0BSFP(); /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y") /* if error, re-show map 1*/
      return;
    end
  end
  ;
  ;
     /* ********************/
     /* edit selection data*/
     /* ********************/
  ;
  CL0BW01.CL0BWCNT = 0; /* cnt # fields entered*/
  ;
  KL0B110(); /* check direct inquiry data*/
  ;
  KL0B120(); /* check parameter inquiry data*/
  ;
  if (CL0BW01.CL0BWCNT == 1) /* may enter only 1 select field*/
     /* next sentence*/
  else
    if (CL0BW01.CL0BWCNT == 0)
      set KL0BM001.CLACLMNB cursor;
      converseLib.validationFailed(242); /* enter selection data*/
      CLXREC.CLXERRF = "Y";
    else
      KL0BSB1(); /* set all fields cursor,bright*/
      converseLib.validationFailed(237); /* enter only 1 select field*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ************************************/
     /* return to cl0b100 to show same map,*/
     /* or return to cl0b050 for next map,*/
     /* or act on enter/pf key*/
     /* ************************************/
  ;
  if (CLXREC.CLXERRF == "Y" /* if have errors, re-show map*/
   || converseVar.validationMsgNum != 0
   || CLXREC.CLXEOSF == "Y") /* or end of map*/
     /* next sentence*/
  else
    KL0B130(); /* move data to clwrec, build array*/
    if (CLXREC.CLXERRF != "Y") /* if have errors, re-show map*/
      KL0B140(); /* act on enter/pf key*/
    end
  end
  ;
  ;
   /* since cl0b100 is performed in while loop,*/
   /* if clxeosf eq 'y', then at end of screen, so go to cl0b050*/
              /* else    return to top of cl0b100 to re-show map.*/
  ;
  ;
end // end KL0B100

// clear map
Function KL0B102()
  ;
  CLXREC.CLXCPROC = "CL0B102";
  ;
  ;
  if (CLWREC.CLWEZMNO == 0) /* if no prev errors,*/
    set KL0BM001 initial; /* clear map*/
    converseLib.validationFailed(237); /* enter select data on 1 line*/
  else
    if (CLWREC.CLWEZMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(CLWREC.CLWEZMNO);
    end /* previous appl error message*/
    KL0BM001.CLACLMNB = CLAREC.CLACLMNB; /* restore map values*/
    KL0BM001.CLHSEQNB = CLWREC.CLHSEQNB;
    KL0BM001.CLHMEMNB = CLWREC.CLHMEMNB;
  end
  ;
  ;
     /* init clwrec, passed to all claims appl*/
  ;
  CLWREC.IV0IVCID = 0; /* invoice*/
  CLWREC.OP1CUOID = 0; /* nike customer order*/
  CLWREC.OP1NORID = 0; /* nike order*/
  CLWREC.ARCREFNB = " "; /* a/r reference*/
  CLWREC.KUCCOID = 0; /* company*/
  CLWREC.KUMSTRID = 0; /* store*/
  CLWREC.XNXCD = 0; /* dept*/
  CLWREC.XSOCD = " "; /* sales office*/
  CLWREC.XWHCD = " "; /* warehouse*/
  CLWREC.CLWLSTNM = " "; /* consumer last name*/
  CLWREC.KUCGRPID = 0; /* group company*/
  CLWREC.XGPCD = " "; /* g.p.c.*/
  CLWREC.XOBCD = " "; /* 4/89 base order type*/
  CLWREC.XDVCD = " "; /* 4/89 division*/
  CLWREC.YCTCD = " "; /* claim type*/
  CLWREC.YCRCD = " "; /* claim reason*/
  CLWREC.CLWSETLO = 0; /* setup date low*/
  CLWREC.CLWSETHI = 0; /* setup date high*/
  CLWREC.OP1CUPO = " "; /* customer p.o.*/
  CLWREC.ARCCCREF = " "; /* customer claim reference*/
  CLWREC.ARCCHKNB = " "; /* customer ar check nbr 9-6-88*/
  CLWREC.YCSCD = " "; /* claim status*/
  CLWREC.CLWSTTLO = 0; /* status date low*/
  CLWREC.CLWSTTHI = 0; /* status date high*/
  CLWREC.CLWESTLO = 0; /* value low*/
  CLWREC.CLWESTHI = 0; /* value high*/
  CLWREC.SM1AGYID = " "; /* sales agency*/
  CLWREC.SM4REPID = 0; /* sales rep*/
  CLWREC.YPSCD = " "; /* pos/pos status code*/
  ;
  CLWREC.CLWCLIDX = 0; /* array start index*/
  CLWREC.CLWMXIDX = 0; /* array max index loaded*/
  CLWREC.CLWCLMNB[1] = 0; /* first array entry*/
  CLWREC.CLWSELCD[1] = " "; /* first array entry*/
  ;
  CLWREC.CLWEZMNO = 0; /* message number*/
  ;
  ;
end // end KL0B102

// edit direct inquiry data
Function KL0B110()
    /* validate direct inquiry map entries*/
    /* when found, move data to clarec, to move later to clwrec.*/
    /* parameter data is moved to clwrec in cl0b130.*/
  ;
  CLXREC.CLXCPROC = "CL0B110";
  ;
     /* *********************/
     /* edit pro/shipper nbr*/
     /* *********************/
  ;
  set KL0BM001.TF2PRONO initialAttributes;
  ;
  if (KL0BM001.TF2PRONO != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* count nbr flds entered*/
    CLEREC.TF2PRONO = KL0BM001.TF2PRONO;
    KL0B800(); /* edit against traffic table*/
  end
  ;
  ;
     /* *****************/
     /* edit memo number*/
     /* *****************/
  ;
  set KL0BM001.CLHMEMNB initialAttributes;
  ;
  if (KL0BM001.CLHMEMNB != 0)
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* count nbr flds entered*/
    CLHREC.CLHMEMNB = KL0BM001.CLHMEMNB;
    KL0B810(); /* edit against memo table*/
  end
  ;
  ;
     /* *************************/
     /* edit claim nbr & seq nbr*/
     /* *************************/
  ;
  set KL0BM001.CLACLMNB initialAttributes;
  set KL0BM001.CLHSEQNB initialAttributes;
  ;
  if (KL0BM001.CLACLMNB != 0)
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* count nbr flds entered*/
    CLAREC.CLACLMNB = KL0BM001.CLACLMNB;
     /* seq nbr verified in cl0b820, not here*/
    KL0B820(); /* edit claim header/seq nbr*/
  else
    if (KL0BM001.CLHSEQNB != 0) /* seq nbr without claim nbr*/
      CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* count nbr flds entered*/
      set KL0BM001.CLHSEQNB cursor, bold;
      set KL0BM001.CLACLMNB cursor, bold;
      converseLib.validationFailed(268); /* clm # required*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ******************************************/
     /* combination edit:*/
     /* if claim # or pro # is a completed claim,*/
     /* then find the matching memo nbr.*/
     /* ******************************************/
  ;
  if (CLXREC.CLXERRF != "Y") /* if have no errors,*/
    if (KL0BM001.CLACLMNB != 0 /* if claim or pro # are*/
     || KL0BM001.TF2PRONO != " ")
      if (CLAREC.YCSCD1 == "CMP") /* completed claims, then find memo #*/
        CLHREC.CLACLMNB = CLAREC.CLACLMNB;
        if (KL0BM001.CLHSEQNB == 0)
          /* use seq = 1 to force memo loop from oldest*/
          if (CLAREC.CLACSQNB == 1)
            CLHREC.CLHSEQNB = CLAREC.CLACSQNB;
          else
            CLHREC.CLHSEQNB = CLAREC.CLACSQNB - 1; /* start at last memo*/
          end
        else
          CLHREC.CLHSEQNB = KL0BM001.CLHSEQNB; /* user seq #*/
        end
        KL0B830(); /* get memo number*/
        if (SQLCA.VAGen_SQLCODE == 0)
          KL0BM001.CLHMEMNB = CLHREC.CLHMEMNB; /* hold memo #*/
        else
          if (SQLCA.VAGen_SQLCODE != 100)
            XPCL010(); /* data base abend*/
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0B110

// edit parameter inquiry data
Function KL0B120()
   /* *************************************************************/
   /* *     Check screen for other selection data. If found,     **/
   /* *     transfer to the appropriate screen or application.   **/
   /* *  edit from bottom up, to preserve cursor position at top **/
   /* *************************************************************/
  /* MAINTENANCE HISTORY                              **/
  /* 01-13-92 sgorga  Set ta1rec empty. It is used in xsivsn2,   **/
  /* which is called by xsivsn1.                **/
  /* 04-17-92 bcourt  Rename SM5STAT to XXXSTAT.                 **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B120";
  ;
  if (CL0BW01.CL0BWPHB == "Y")
     /* next sentence*/
  else
    KL0BM001.IV0IVCID = 0; /* invoice*/
    KL0BM001.OP1CUOID = 0; /* nike customer order*/
    KL0BM001.OP1NORID = 0; /* nike order*/
    KL0BM001.ARCREFNB = " "; /* a/r reference*/
    KL0BM001.KUCCOID = 0; /* company*/
    KL0BM001.KUMSTRID = 0; /* store*/
    KL0BM001.XNXCD = 0; /* dept*/
    KL0BM001.KUCGRPID = 0; /* group company*/
    KL0BM001.SM1AGYID = " "; /* sales agency*/
    KL0BM001.SM4REPID = 0; /* sales rep*/
    KL0BM001.XSOCD = " "; /* sales office*/
    KL0BM001.XWHCD = " "; /* warehouse*/
    KL0BM001.CLWLSTNM = " "; /* consumer last name*/
    KL0BM001.CL0BMBCH = " "; /* submit batch*/
    return; /* don't want to process phase B stuff*/
  end
  ;
     /* ************************/
     /* edit consumer last name*/
     /* ************************/
  ;
  set KL0BM001.CLWLSTNM initialAttributes;
  set KL0BM001.CL0BMBCH initialAttributes;
  ;
  if (KL0BM001.CLWLSTNM != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    if (KL0BM001.CL0BMBCH == " " /* submit batch flag*/
     || KL0BM001.CL0BMBCH == "N" 
     || KL0BM001.CL0BMBCH == "Y")
       /* o.k.*/
    else
      set KL0BM001.CL0BMBCH cursor, bold;
      converseLib.validationFailed(277); /* batch flag not valid*/
      CLXREC.CLXERRF = "Y";
    end
  else
    if (KL0BM001.CL0BMBCH != " ")
      CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
      set KL0BM001.CL0BMBCH cursor, bold;
      converseLib.validationFailed(278); /* skip batch or enter consumer*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ********************/
     /* edit warehouse code*/
     /* ********************/
  ;
  set KL0BM001.XWHCD initialAttributes;
  ;
  if (KL0BM001.XWHCD != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    if (KL0BM001.XWHCD in XWHTBL.XWHCD /* if in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      converseLib.validationFailed(258); /* warehouse not valid*/
      set KL0BM001.XWHCD cursor, bold;
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ***********************/
     /* edit sales office code*/
     /* ***********************/
  ;
  set KL0BM001.XSOCD initialAttributes;
  ;
  if (KL0BM001.XSOCD != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    if (KL0BM001.XSOCD in XSOTBL.XSOCD /* if in table*/
     && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      converseLib.validationFailed(257); /* sales office not valid*/
      set KL0BM001.XSOCD cursor, bold;
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ********************************/
     /* edit sales agency or agency/rep*/
     /* ********************************/
  ;
  set KL0BM001.SM1AGYID initialAttributes;
  set KL0BM001.SM4REPID initialAttributes;
  ;
  if (KL0BM001.SM1AGYID != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    SM1REC.SM1AGYID = KL0BM001.SM1AGYID;
    KL0B917(); /* edit agency code*/
    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(247); /* sales agency is not valid*/
      set KL0BM001.SM1AGYID cursor, bold;
      CLXREC.CLXERRF = "Y";
    else
      if (KL0BM001.SM4REPID != 0)
        SM5REC.SM1AGYID = KL0BM001.SM1AGYID;
        SM5REC.SM4REPID = KL0BM001.SM4REPID;
        SM4REC.SM4REPID = KL0BM001.SM4REPID;
        SM5REC.XXXSTAT = "*"; /* use any status*/
        SM5REC.SM5EDT = -1;
        ;
        set TA1REC empty; /* to be used in xsivsn2, called by -sn1*/
        XSIVSN4(); /* edit agency/rep codes*/
        ;
        if (SQLCA.VAGen_SQLCODE != 0)
          set KL0BM001.SM1AGYID cursor, bold;
          set KL0BM001.SM4REPID bold;
          converseLib.validationFailed(247); /* sales rep is not valid*/
          CLXREC.CLXERRF = "Y";
        end
      end
    end
  else
    if (KL0BM001.SM4REPID != 0)
      CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
      set KL0BM001.SM4REPID cursor, bold; /* invalid sales rep id*/
      converseLib.validationFailed(246); /* rep must have agency*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ************************/
     /* edit group company i.d.*/
     /* ************************/
  ;
  set KL0BM001.KUCGRPID initialAttributes;
  ;
  if (KL0BM001.KUCGRPID != 0)
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    ;
    set KUCREC empty;
    KUCREC.KUCCOID = KL0BM001.KUCGRPID;
    ;
    KL0B911(); /* fetch unique from kucrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100)
      set KL0BM001.KUCGRPID cursor, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(255); /* group company is not valid*/
    end
  end
  ;
  ;
     /* *********************/
     /* edit customer number*/
     /* *********************/
  ;
  set KL0BM001.KUCCOID initialAttributes;
  set KL0BM001.KUMSTRID initialAttributes;
  set KL0BM001.XNXCD initialAttributes;
  ;
  if (KL0BM001.KUCCOID != 0) /* if company nbr was entered*/
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
    ;
    if (KL0BM001.KUMSTRID != 0) /* validate company and store combo*/
      ;
      set KUMREC empty;
      KUMREC.KUCCOID = KL0BM001.KUCCOID;
      KUMREC.KUMSTRID = KL0BM001.KUMSTRID;
      ;
      KL0B910(); /* fetch unique from kumrec*/
      if (CLXREC.CLXERRF == "Y")
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL0BM001.KUCCOID cursor, bold;
          set KL0BM001.KUMSTRID bold;
          set KL0BM001.XNXCD bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(6); /* customer number is not valid*/
        end
      end
      ;
    else /* validate with company number only*/
      ;
      set KUCREC empty;
      KUCREC.KUCCOID = KL0BM001.KUCCOID;
      ;
      KL0B911(); /* fetch unique from kucrec*/
      if (CLXREC.CLXERRF == "Y")
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL0BM001.KUCCOID cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(6); /* customer number is not valid*/
        end
      end
    end
  else /* if company nbr wasn't entered*/
    if (KL0BM001.XNXCD != 0)
      CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
      set KL0BM001.XNXCD cursor, bold;
      set KL0BM001.KUMSTRID cursor, bold;
      set KL0BM001.KUCCOID cursor, bold;
      converseLib.validationFailed(270); /* store/dept require company*/
      CLXREC.CLXERRF = "Y";
    else
      if (KL0BM001.KUMSTRID != 0)
        CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
        set KL0BM001.KUMSTRID cursor, bold;
        set KL0BM001.KUCCOID cursor, bold;
        converseLib.validationFailed(270); /* store/dept require company*/
        CLXREC.CLXERRF = "Y";
      end
    end
  end
  ;
  ;
     /* ***************/
     /* edit order nbr*/
     /* ***************/
  ;
  set KL0BM001.OP1CUOID initialAttributes;
  set KL0BM001.OP1NORID initialAttributes;
  ;
  if (KL0BM001.OP1CUOID != 0)
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
  else
    if (KL0BM001.OP1NORID != 0)
      CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
      set KL0BM001.OP1CUOID cursor, bold;
      set KL0BM001.OP1NORID bold;
      converseLib.validationFailed(269); /* nike order requires cust ord id*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
     /* ***********************************/
     /* edit invoice nbr and a/r reference*/
     /* ***********************************/
  ;
  set KL0BM001.IV0IVCID initialAttributes;
  set KL0BM001.ARCREFNB initialAttributes;
  ;
  if (KL0BM001.IV0IVCID != 0
   || KL0BM001.ARCREFNB != " ")
    CL0BW01.CL0BWCNT = CL0BW01.CL0BWCNT + 1; /* cnt nbr flds entered*/
  end
  ;
end // end KL0B120

// move data to clwrec,bld array
Function KL0B130()
     /* ************************************************/
     /* only one field will be present on the map.*/
     /* move data from map to clwrec,*/
     /* build clwrec claim nbr array as needed.*/
     /* if no records found, return to show error map.*/
     /* check if array > 200, pass message to next map.*/
     /* ************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B130";
  ;
  sysVar.arrayIndex = 1; /* init array index*/
  ;
  ;
     /* **********************************************/
     /* pass memo nbr first, since may have memo and*/
     /* claim or pro nbr.*/
     /* **********************************************/
  ;
     /* ***********************************************/
     /* pass memo nbr -*/
     /* if claim or pro/shipper was entered,*/
     /* and was a completed claim, then use memo nbr,*/
     /* see cl0b110 combination edit*/
     /* ***********************************************/
  ;
  if (KL0BM001.CLHMEMNB != 0)
    CLWREC.CLHMEMNB = KL0BM001.CLHMEMNB; /* passing record*/
    if (KL0BM001.CLHSEQNB != 0)
      CLWREC.CLHSEQNB = KL0BM001.CLHSEQNB; /* user seq #*/
    else
      /* keep same as in cl0b110 combination edit-*/
      if (CLAREC.CLACSQNB == 1)
        CLWREC.CLHSEQNB = CLAREC.CLACSQNB;
      else
        CLWREC.CLHSEQNB = CLAREC.CLACSQNB - 1; /* start with highest #*/
      end
    end
    return;
  end
  ;
  ;
     /* ******************************************/
     /* pass claim nbr,*/
     /* when claim entered or pro/shipper entered,*/
     /* claim is in clarec for either entry*/
     /* ******************************************/
  ;
  if (KL0BM001.CLACLMNB != 0 /* if have claim*/
   || KL0BM001.TF2PRONO != " ") /* or pro/shipper nbr*/
    if (KL0BM001.CLHSEQNB != 0) /* check entered seq nbr-*/
      CLWREC.CLHSEQNB = KL0BM001.CLHSEQNB; /* user sequence*/
    else
      if (CLAREC.CLACSQNB == 1)
        CLWREC.CLHSEQNB = CLAREC.CLACSQNB;
      else
        CLWREC.CLHSEQNB = CLAREC.CLACSQNB - 1; /* start with highest #*/
      end
    end
    return;
  end
  ;
  if (CL0BW01.CL0BWPHB == "Y")
     /* next sentence*/
  else
    return;
  end
  ;
  ;
     /* *****************************/
     /* build array from invoice nbr*/
     /* *****************************/
  ;
  if (KL0BM001.IV0IVCID != 0)
    CLWREC.IV0IVCID = KL0BM001.IV0IVCID; /* passing record*/
    CLXREC.CLXORDIV = KL0BM001.IV0IVCID;
    CLBREC.IV0PARTN = CLXREC.CLXPARTN; /* data base key*/
    CLBREC.IV0IVCID = KL0BM001.IV0IVCID;
    KL0B840(); /* get all claims for invoice*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0
     && sysVar.arrayIndex < 201) /* array max = 200*/
      KL0B841(); /* fetch next record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLWREC.CLWCLMNB[sysVar.arrayIndex] = CLBREC.CLACLMNB;
        CLWREC.CLWSELCD[sysVar.arrayIndex] = " ";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      else
        if (sysVar.arrayIndex == 1)
          KL0B842(); /* close set of claims*/
          set KL0BM001.IV0IVCID cursor, bold;
          converseLib.validationFailed(280); /* cant find any claims for invoice*/
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    ;
    KL0B842(); /* close set of claims*/
    KL0BSIX(); /* edit index max 200, store first/last*/
    return;
  end
  ;
  ;
     /* ***************************/
     /* build array from order nbr*/
     /* ***************************/
  ;
  if (KL0BM001.OP1CUOID != 0)
    CLWREC.OP1CUOID = KL0BM001.OP1CUOID; /* passing record*/
    CLWREC.OP1NORID = KL0BM001.OP1NORID;
    CLBREC.OP1CUOID = KL0BM001.OP1CUOID; /* data base key*/
    CLXREC.CLXORDIV = KL0BM001.OP1CUOID;
    CLBREC.OP1PARTN = CLXREC.CLXPARTN;
    if (KL0BM001.OP1NORID != 0)
      CLBREC.OP1NORID = KL0BM001.OP1NORID;
    else
      CLBREC.OP1NORID = -1; /* get all sub-orders*/
    end
    KL0B850(); /* get all claims for order*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0
     && sysVar.arrayIndex < 201) /* array max = 200*/
      KL0B851(); /* fetch next record*/
      if (SQLCA.VAGen_SQLCODE == 0
       && CLBREC.CLBPMIVC == "Y") /* (cl730 cwh 9/25/89)*/
        CLWREC.CLWCLMNB[sysVar.arrayIndex] = CLBREC.CLACLMNB; /* select only pmy*/
        CLWREC.CLWSELCD[sysVar.arrayIndex] = " "; /* invoice rows*/
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      else
        if (sysVar.arrayIndex == 1)
          KL0B852(); /* close set of claims*/
          set KL0BM001.OP1CUOID cursor, bold;
          if (KL0BM001.OP1NORID != 0)
            set KL0BM001.OP1NORID bold;
          end
          converseLib.validationFailed(266); /* no claims for order nbr*/
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    ;
    KL0B852(); /* close set of claims*/
    KL0BSIX(); /* edit & store max array entries*/
    return;
  end
  ;
  ;
     /* ***********************************/
     /* build array from a/r reference nbr*/
     /* ***********************************/
  ;
  if (KL0BM001.ARCREFNB != " ")
    CLWREC.ARCREFNB = KL0BM001.ARCREFNB; /* passing record*/
    CLCREC.ARCREFNB = KL0BM001.ARCREFNB; /* data base key*/
    KL0B860(); /* get all claims for a/r ref*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0
     && sysVar.arrayIndex < 201) /* array max = 200*/
      KL0B861(); /* fetch next record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLWREC.CLWCLMNB[sysVar.arrayIndex] = CLCREC.CLACLMNB;
        CLWREC.CLWSELCD[sysVar.arrayIndex] = " ";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      else
        if (sysVar.arrayIndex == 1)
          KL0B862(); /* close set of claims*/
          set KL0BM001.ARCREFNB cursor, bold;
          converseLib.validationFailed(273); /* no claims for a/r ref nbr*/
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
    end
    ;
    KL0B862(); /* close set of claims*/
    KL0BSIX(); /* edit & store max array entries*/
    return;
  end
  ;
  ;
     /* *********************/
     /* pass customer number*/
     /* *********************/
  ;
  if (KL0BM001.KUCCOID != 0
   || KL0BM001.KUMSTRID != 0
   || KL0BM001.XNXCD != 0)
    CLWREC.KUCCOID = KL0BM001.KUCCOID; /* passing record*/
    CLWREC.KUMSTRID = KL0BM001.KUMSTRID;
    CLWREC.XNXCD = KL0BM001.XNXCD;
    return;
  end
  ;
  ;
     /* **********************/
     /* pass group company id*/
     /* **********************/
  ;
  if (KL0BM001.KUCGRPID != 0)
    CLWREC.KUCGRPID = KL0BM001.KUCGRPID; /* passing record*/
    return;
  end
  ;
  ;
     /* **********************/
     /* pass sales agency/rep*/
     /* **********************/
  ;
  if (KL0BM001.SM1AGYID != " ")
    CLWREC.SM1AGYID = KL0BM001.SM1AGYID; /* passing record*/
    CLWREC.SM4REPID = KL0BM001.SM4REPID;
    return;
  end
  ;
  ;
     /* ******************/
     /* pass sales office*/
     /* ******************/
  ;
  if (KL0BM001.XSOCD != " ")
    CLWREC.XSOCD = KL0BM001.XSOCD; /* passing record*/
    return;
  end
  ;
  ;
     /* ***************/
     /* pass warehouse*/
     /* ***************/
  ;
  if (KL0BM001.XWHCD != " ")
    CLWREC.XWHCD = KL0BM001.XWHCD;
    return;
  end
  ;
  ;
     /* ***********************************/
     /* build array for consumer last name*/
     /* ***********************************/
  ;
  if (KL0BM001.CLWLSTNM != " "
   || KL0BM001.CL0BMBCH == "Y")
    CLWREC.CLWLSTNM = KL0BM001.CLWLSTNM; /* passing record*/
    CL0BW01.CLWLSTNM = KL0BM001.CLWLSTNM; /* hold last name*/
    CLDREC.CLD3NM = CL0BW01.CL0BWFN3; /* key is first 3 letters*/
    CL0BW03.CL0BWFN7 = CL0BW01.CL0BWFN7; /* init param recd*/
     /* init next 7 letters of 'to' name = 'from' name*/
    CL0BW03.CL0BWTN7 = CL0BW03.CL0BWFN7;
     /* fill 'to' name with nines on the right -*/
     /* 'from' name 'all it ' becomes 'to' name 'all it9'*/
    sysVar.arrayIndex = 7;
    while (sysVar.arrayIndex > 0)
      if (CL0BW03.CL0BWTLT[sysVar.arrayIndex] == " ")
        CL0BW03.CL0BWTLT[sysVar.arrayIndex] = "9";
        sysVar.arrayIndex = sysVar.arrayIndex - 1;
      else
        sysVar.arrayIndex = 0;
      end
    end
    sysVar.arrayIndex = 1;
    KL0B870(); /* select set of claims*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0
     && sysVar.arrayIndex < 201) /* array max = 200*/
      KL0B871(); /* fetch next record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLWREC.CLWCLMNB[sysVar.arrayIndex] = CLDREC.CLACLMNB;
        CLWREC.CLWSELCD[sysVar.arrayIndex] = " ";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      else
        if (sysVar.arrayIndex == 1)
          KL0B872(); /* close set of claims*/
          set KL0BM001.CLWLSTNM cursor, bold;
          converseLib.validationFailed(274); /* no claims for consumer last name*/
          CLXREC.CLXERRF = "Y";
          return;
        end
      end
      if (KL0BM001.CL0BMBCH == "Y") /* we're submitting to batch*/
        KL0B872(); /* so close set*/
        return; /* and get out*/
      end
    end
    ;
    KL0B872(); /* close set of claims*/
    KL0BSIX(); /* edit & store max array entries*/
    return;
  end
  ;
  ;
end // end KL0B130

// act on enter/pf key
Function KL0B140()
     /* ******************************/
     /* transfer to selected option,*/
     /* get here only on 'enter' key*/
     /* ******************************/
  ;
  CLXREC.CLXCPROC = "CLB0140";
  ;
  CLXREC.CLXEOSF = "Y"; /* force end of screen*/
  CLWREC.CLWMAPFM = "KL0BM001";
  ;
  ;
  if (KL0BM001.CLHMEMNB != 0) /* have memo nbr*/
    COMMAREA.CATOAP = "KL0M"; /* go to claim memo*/
    XPCL002(); /* try it*/
    KL0BM001.XXXMSG = COMMAREA.CAMSG; /* failed, move msg*/
    CLXREC.CLXEOSF = "N";
    return;
  end
  ;
  if (KL0BM001.CLACLMNB != 0 /* have claim nbr*/
   || KL0BM001.TF2PRONO != " ") /* or pro/shipper nbr*/
    COMMAREA.CATOAP = "KL0E"; /* go to claim header*/
    XPCL002(); /* try it*/
    KL0BM001.XXXMSG = COMMAREA.CAMSG; /* failed, move msg*/
    CLXREC.CLXEOSF = "N";
    return;
  end
  ;
  if (CL0BW01.CL0BWPHB == "Y")
     /* next sentence*/
  else
    return;
  end
  ;
  ;
  if (KL0BM001.IV0IVCID != 0 /* have invoice*/
   || KL0BM001.OP1CUOID != 0 /* or order nbr*/
   || KL0BM001.ARCREFNB != " ") /* or a/r reference*/
    COMMAREA.CATOAP = "KL0C"; /* go to selection list*/
    XPCL002(); /* try it*/
    KL0BM001.XXXMSG = COMMAREA.CAMSG; /* failed, move msg*/
    CLXREC.CLXEOSF = "N";
    return;
  end
  ;
  if (KL0BM001.CLWLSTNM != " ") /* have consumer last name*/
    if (KL0BM001.CL0BMBCH == "Y") /* do in batch mode*/
      CLXREC.CLXCSCRN = "KL0BM004"; /* have kl0b show map 4*/
      CLWREC.CLWCL0BX = "4";
      CLXREC.CLXEOAF = "N"; /* turn off end of appl flag*/
    else
      COMMAREA.CATOAP = "KL0D"; /* go to selection list*/
      XPCL002(); /* try it*/
      KL0BM001.XXXMSG = COMMAREA.CAMSG; /* failed, move msg*/
      CLXREC.CLXEOSF = "N";
    end
    return;
  end
  ;
  if (KL0BM001.KUCCOID != 0 /* have customer nbr*/
   || KL0BM001.KUMSTRID != 0
   || KL0BM001.XNXCD != 0   
   || KL0BM001.KUCGRPID != 0) /* or group company*/
    CLXREC.CLXCSCRN = "KL0BM002"; /* have Kl0b show map 2*/
    CLWREC.CLWCL0BX = "2";
    CLXREC.CLXEOAF = "N"; /* turn off end of appl flag*/
    return;
  end
  ;
     /* other input data:*/
        /* sales agency/rep i.d.*/
     /* or warehouse*/
     /* or sales office*/
  ;
  CLXREC.CLXCSCRN = "KL0BM003"; /* have Kl0b show map 3*/
  CLWREC.CLWCL0BX = "3";
  CLXREC.CLXEOAF = "N"; /* turn off end of appl flag*/
  ;
  ;
end // end KL0B140

// map customer sub-selection
Function KL0B200()
   /* ************************************************************/
   /* *    process screen cl0bm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B200";
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0B201();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
   /* ***********************************************************/
  converse KL0BM002 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0B210(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0B220(); /* edit entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0B230(); /* process entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0B211(); /* handle enter key*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
  ;
  ;
  ;
end // end KL0B200

// build screen
Function KL0B201()
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B201";
  ;
  set KL0BM002 initial;
  KL0BM002.XXXCURDT = VGVar.currentShortGregorianDate;
  if (KL0BM002.CL0BMCUS == "S") /* if user selected converted company*/
    CLWREC.KUCCOID = KL0BM002.CL0BMCUC;
    CLWREC.KUMSTRID = KL0BM002.CL0BMSTO;
    CLWREC.XNXCD = KL0BM002.CL0BMDEP;
    set KL0BM002.KUCCOID modified;
    set KL0BM002.KUMSTRID modified;
    set KL0BM002.XNXCD modified;
    set KL0BM002.CL0BMCUH initialAttributes;
    set KL0BM002.CL0BMCUS initialAttributes;
    KL0BM002.CL0BMCUS = " ";
    set KL0BM002.CL0BMCUC initialAttributes;
    KL0BM002.CL0BMCUC = 0;
    set KL0BM002.CL0BMSTO initialAttributes;
    KL0BM002.CL0BMSTO = 0;
    set KL0BM002.CL0BMDEP initialAttributes;
    KL0BM002.CL0BMDEP = 0;
  end
  KL0BM002.KUCCOID = CLWREC.KUCCOID;
  KL0BM002.KUMSTRID = CLWREC.KUMSTRID;
  KL0BM002.XNXCD = CLWREC.XNXCD;
  KL0BM002.KUCGRPID = CLWREC.KUCGRPID;
  ;
  converseLib.validationFailed(276); /* please enter additional qual. for the customer*/
  ;
  KL0BSBC(); /* edit customer nbr/customer group id*/
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  KL0BS4C(); /* EDIT FOR CONVERTED CO/STOR/DEPT*/
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (KL0BM002.KUCGRPID != 0) /* 3-16-88,default batch = 'y' for*/
                                   /* grpcoid*/
    KL0BM002.CL0BMBCH = "Y"; /* 3-16-88*/
    set KL0BM002.CL0BMBCH protect; /* 3-16-88*/
  end
  ;
end // end KL0B201

// edit pfkeys
Function KL0B210()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B210";
  ;
  if (KL0BM002.CATOAP != " " /* if any fastpath data entered*/
   || KL0BM002.CAITEM != " ")
    COMMAREA.CATOAP = KL0BM002.CATOAP;
    COMMAREA.CAITEM = KL0BM002.CAITEM;
    KL0BSFP(); /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      KL0BSBA(); /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
            COMMAREA.CATOAP = " ";
          else
            if (converseVar.eventKey is pf5)
              CLXREC.CLXCSCRN = "KL0BM001"; /* have cl0b show map 1*/
              CLWREC.CLWCL0BX = "1";
              CLXREC.CLXEOSF = "Y"; /* end of map 2*/
              CLXREC.CLXERRF = "Y";
            else
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              CLXREC.CLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end KL0B210

// edit pfkeys
Function KL0B211()
   /* **************************************/
   /* edit pf keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B211";
  ;
  if (converseVar.eventKey is enter)
    if (CL0BW01.CL0BWBCH == "Y")
      CLXREC.CLXCSCRN = "KL0BM004"; /* have cl0b show map 4*/
      CLWREC.CLWMAPFM = "KL0BM002";
      CLWREC.CLWCL0BX = "4";
      CLXREC.CLXEOSF = "Y"; /* end of map 3*/
    else
      CLWREC.CLWMAPFM = "KL0BM002";
      COMMAREA.CATOAP = "KL0C";
      CLWREC.CLWSVSEL = "01"; /* go to first screen of cl0c*/
      XPCL002();
      converseLib.validationFailed(25); /* CANNOT TRANSFER TO APPLICATION*/
      CLXREC.CLXERRF = "Y";
    end
  end
end // end KL0B211

// edit entries
Function KL0B220()
   /* *******************************************************/
   /* edit entries*/
   /* *******************************************************/
   /* 04-17-92 bcourt  Rename SM5STAT to XXXSTAT.*/
   /* *******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B220";
  ;
  ;
  set KL0BM002.KUCCOID normal;
  set KL0BM002.KUMSTRID normal;
  set KL0BM002.XNXCD normal;
  set KL0BM002.CL0BMGFL normal;
  set KL0BM002.KUCGRPID normal;
  set KL0BM002.XGPCD cursor, normal;
  set KL0BM002.XOBCD normal; /* 4/89 change xot to xob cd*/
  set KL0BM002.XSOCD normal; /* 4/89 add sales office*/
  set KL0BM002.XDVCD normal; /* 4/89 add division*/
  set KL0BM002.YCTCD normal;
  set KL0BM002.YCRCD normal;
  set KL0BM002.CLWSETLO normal;
  set KL0BM002.CLWSETHI normal;
  set KL0BM002.OP1CUPO normal;
  set KL0BM002.ARCCCREF normal;
  set KL0BM002.ARCCHKNB normal;
  set KL0BM002.YCSCD normal;
  set KL0BM002.CLWSTTLO normal;
  set KL0BM002.CLWSTTHI normal;
  set KL0BM002.CLWESTLO normal;
  set KL0BM002.CLWESTHI normal;
  set KL0BM002.SM1AGYID normal;
  set KL0BM002.SM4REPID normal;
  set KL0BM002.YPSCD normal;
  ;
   /* *********************************************/
      /* check for user selection of converted-to customer id*/
   /* ************************************************************/
  ;
  if (KL0BM002.CL0BMCUS == "S") /* if user selected converted company*/
    KL0BM002.KUCCOID = KL0BM002.CL0BMCUC;
    KL0BM002.KUMSTRID = KL0BM002.CL0BMSTO;
    KL0BM002.XNXCD = KL0BM002.CL0BMDEP;
    set KL0BM002.KUCCOID modified;
    set KL0BM002.KUMSTRID modified;
    set KL0BM002.XNXCD modified;
    KL0BM002.CL0BMCUS = " ";
    KL0BM002.CL0BMCUC = 0;
    KL0BM002.CL0BMSTO = 0;
    KL0BM002.CL0BMDEP = 0;
    set KL0BM002.CL0BMCUH initialAttributes;
    set KL0BM002.CL0BMCUS initialAttributes;
    set KL0BM002.CL0BMCUC initialAttributes;
    set KL0BM002.CL0BMSTO initialAttributes;
    set KL0BM002.CL0BMDEP initialAttributes;
  end
  ;
      /* %%%%%%%%%%%%%%%%%%%%%%*/
       /* validate heading data*/
      /* %%%%%%%%%%%%%%%%%%%%%%*/
  ;
   /* if company number wasn't entered but store or dept was*/
  ;
  if (KL0BM002.KUCCOID == 0)
    if (KL0BM002.KUMSTRID != 0
     || KL0BM002.XNXCD != 0)
      converseLib.validationFailed(69); /* enter customer number*/
      set KL0BM002.KUCCOID cursor, bold;
      set KL0BM002.KUMSTRID bold;
      set KL0BM002.XNXCD bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  if (KL0BM002.KUCCOID == 0
   && KL0BM002.KUMSTRID == 0
   && KL0BM002.XNXCD == 0
   && KL0BM002.KUCGRPID == 0)
    converseLib.validationFailed(69); /* enter customer number*/
    set KL0BM002.KUCCOID cursor, bold;
    set KL0BM002.KUMSTRID bold;
    set KL0BM002.XNXCD bold;
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (KL0BM002.KUCCOID == 0)
    if (KL0BM002.CL0BMGFL != " ")
      converseLib.validationFailed(69); /* enter customer number*/
      set KL0BM002.KUCCOID cursor, bold;
      set KL0BM002.CL0BMGFL bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
   /* validate that customer or group company id does exist*/
  ;
  if (KL0BM002.KUCCOID != CLWREC.KUCCOID
   || KL0BM002.KUMSTRID != CLWREC.KUMSTRID
   || KL0BM002.XNXCD != CLWREC.XNXCD
   || KL0BM002.CL0BMGFL != " "
   || KL0BM002.KUCGRPID != CL0BW01.KUCGRPID)
    KL0BSBC(); /* validate heading data and move address fields to screen*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      KL0BS4C(); /* EDIT FOR CONVERTED CO/STOR/DEPT*/
    end
  end
  ;
   /* show errors in heading*/
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
     /* decide if need to process by batch*/
  ;
  CL0BW01.CL0BWBCH = "N"; /* init flag*/
  if (KL0BM002.CL0BMGFL == "Y" /* if group flag set to yes*/
   || KL0BM002.KUCGRPID != 0   /* or group id entered*/
   || KL0BM002.CL0BMBCH == "Y") /* or submit batch flag set to yes*/
    CL0BW01.CL0BWBCH = "Y"; /* need to do batch processing*/
  end
  ;
   /* validate required fields*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
     /* next sentence - don't need to enter any fields*/
  else
    if (KL0BM002.ARCCCREF != " ")
       /* next sentence - don't need to enter any req fields*/
    else
      if (KL0BM002.CLWSETLO == 0 /* if no date was entered -  error*/
       && KL0BM002.CLWSTTLO == 0 
       && KL0BM002.YCSCD == " ")
        set KL0BM002.CLWSETLO cursor, bold;
        set KL0BM002.CLWSTTLO bold;
        set KL0BM002.YCSCD bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(256); /* must enter gpc,claim type,and one*/
                                   /* date*/
      else
        if (KL0BM002.CLWSTTLO > 0
         && KL0BM002.YCSCD == " ")
          set KL0BM002.YCSCD cursor, bold;
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(281); /* must enter status code with status date*/
        end
      end
      if (KL0BM002.YCTCD == " ")
        set KL0BM002.YCTCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(256); /* must enter gpc,claim type,and one*/
                                   /* date*/
      end
      if (KL0BM002.XGPCD == " ")
        set KL0BM002.XGPCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(256); /* must enter gpc,claim type,and one*/
                                   /* date*/
      end
      if (CLXREC.CLXERRF == "Y")
        return;
      end
    end
  end
  ;
   /* validate submit batch flag*/
  ;
  if (KL0BM002.CL0BMBCH == "Y"
   || KL0BM002.CL0BMBCH == "N"
   || KL0BM002.CL0BMBCH == " ")
     /* next sentence*/
  else
    set KL0BM002.CL0BMBCH cursor, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(367); /* valid values are y/n*/
  end
  ;
   /* validate pod/pos status 6-27-88*/
  ;
  if (KL0BM002.YPSCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.YPSCD in YPSTBL.YPSCD)
      KL0BM002.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
    else
      set KL0BM002.YPSCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(195); /* invalid pod/pos status*/
    end
  end
  ;
   /* validate agency/rep*/
  ;
  if (KL0BM002.SM4REPID != 0
   && KL0BM002.SM1AGYID == " ")
    set KL0BM002.SM1AGYID cursor, bold;
    set KL0BM002.SM4REPID bold;
    converseLib.validationFailed(247); /* agency/combo not valid*/
    CLXREC.CLXERRF = "Y";
  else
    if (KL0BM002.SM1AGYID != " ")
      set SM1REC empty;
      SM1REC.SM1AGYID = KL0BM002.SM1AGYID;
      ;
      KL0B917(); /* fetch unique from sm1rec*/
      if (CLXREC.CLXERRF == "Y")
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL0BM002.SM1AGYID cursor, bold;
          KL0BM002.XXXERRID = "CL0BSBC";
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(247); /* agency/rep not found*/
          return;
        end
      end
      ;
      if (KL0BM002.SM4REPID != 0)
        set SM5REC empty;
        SM5REC.SM1AGYID = KL0BM002.SM1AGYID;
        SM5REC.SM4REPID = KL0BM002.SM4REPID;
        SM4REC.SM4REPID = KL0BM002.SM4REPID;
        SM5REC.XXXSTAT = "*";
        SM5REC.SM5EDT = -1;
        ;
        XSIVSN4(); /* get and format salesman name*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100)
          set KL0BM002.SM1AGYID cursor, bold;
          set KL0BM002.SM4REPID bold;
          KL0BM002.XXXERRID = "CL0BSBC";
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(247); /* agency/rep not found*/
          return;
        end
      end
    end
  end
  ;
  ;
   /* validate claim value - can't have negative values*/
  ;
  if (KL0BM002.CLWESTLO == 0
   && KL0BM002.CLWESTHI == 0)
     /* next sentence*/
  else
    if (KL0BM002.CLWESTLO == 0
     && KL0BM002.CLWESTHI != 0)
      KL0BM002.CLWESTLO = 0;
    end
    if (KL0BM002.CLWESTHI <= KL0BM002.CLWESTLO)
      converseLib.validationFailed(275); /* range for claim value is not valid*/
      CLXREC.CLXERRF = "Y";
      set KL0BM002.CLWESTLO cursor, bold;
      set KL0BM002.CLWESTHI bold;
    end
    if (KL0BM002.CLWESTHI < 0)
      converseLib.validationFailed(282); /* negative values not allowed*/
      CLXREC.CLXERRF = "Y";
      set KL0BM002.CLWESTHI cursor, bold;
    end
    if (KL0BM002.CLWESTLO < 0)
      converseLib.validationFailed(282); /* negative values not allowed*/
      CLXREC.CLXERRF = "Y";
      set KL0BM002.CLWESTLO cursor, bold;
    end
  end
  ;
   /* validate status code*/
  ;
  if (KL0BM002.YCSCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.YCSCD in YCSTBL.YCSCD
     && YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (KL0BM002.CLWSTTLO == 0)
        set KL0BM002.CLWSTTLO cursor, bold;
        converseLib.validationFailed(281); /* must enter status code with status date*/
        CLXREC.CLXERRF = "Y";
        KL0BM002.XXXERRID = "CL0B220";
      end
    else
      set KL0BM002.YCSCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(249); /* invalid status code*/
    end
  end
  ;
   /* validate reason code*/
  ;
  if (KL0BM002.YCRCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.YCRCD in YCRTBL.YCRCD
     && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM002.YCRCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(88); /* invalid reason code*/
    end
  end
  ;
   /* validate order type*/
   /* mod 4/89 change xot to xob*/
  ;
  if (KL0BM002.XOBCD == " ")
    KL0BM002.XOBABRV = " ";
  else
    if (KL0BM002.XOBCD in XOBTBL.XOBCD)
      KL0BM002.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    else
      set KL0BM002.XOBCD cursor, bold;
      KL0BM002.XOBABRV = " ";
      KL0BM002.XXXERRID = "CL0BSAA";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(96); /* order type code is not valid*/
      return;
    end
  end
  ;
   /* validate claim type*/
  ;
  if (KL0BM002.YCTCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.YCTCD in YCTTBL.YCTCD
     && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM002.YCTCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(87); /* invalid claim type*/
    end
  end
  ;
   /* 4/89 add validate sales office*/
  ;
  if (KL0BM002.XSOCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.XSOCD in XSOTBL.XSOCD
     && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM002.XSOCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(257); /* invalid sales office*/
    end
  end
  ;
   /* 4/89 add validate division*/
  ;
  if (KL0BM002.XDVCD == " ")
    KL0BM002.XDVABRV = " ";
  else
    if (KL0BM002.XDVCD in XDVTBL.XDVCD
     && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0BM002.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    else
      set KL0BM002.XDVCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(580); /* invalid division code*/
    end
  end
  ;
   /* validate gpc code*/
  ;
  if (KL0BM002.XGPCD == " ")
     /* next sentence*/
  else
    if (KL0BM002.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM002.XGPCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B220";
      converseLib.validationFailed(86); /* invalid gpc code*/
    end
  end
  ;
   /* edit dates*/
  ;
  CLWREC.CLWSETLO = KL0BM002.CLWSETLO;
  CLWREC.CLWSETHI = KL0BM002.CLWSETHI;
  CLWREC.CLWSTTLO = KL0BM002.CLWSTTLO;
  CLWREC.CLWSTTHI = KL0BM002.CLWSTTHI;
  ;
  KL0BSBE(); /* edit dates*/
  ;
   /* if field was in error, set it bright*/
  ;
  if (CL0BW01.CL0BWDT1 == "Y")
    set KL0BM002.CLWSTTHI cursor, bold;
  end
  if (CL0BW01.CL0BWDT2 == "Y")
    set KL0BM002.CLWSTTLO cursor, bold;
  end
  if (CL0BW01.CL0BWDT3 == "Y")
    set KL0BM002.CLWSETHI cursor, bold;
  end
  if (CL0BW01.CL0BWDT4 == "Y")
    set KL0BM002.CLWSETLO cursor, bold;
  end
  ;
   /* if there was an error, don't move screen data to passing rec*/
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    KL0BM002.CL0BMGFL = " "; /* clear out group flag*/
    CLWREC.KUCCOID = KL0BM002.KUCCOID;
    CLWREC.KUMSTRID = KL0BM002.KUMSTRID;
    CLWREC.XNXCD = KL0BM002.XNXCD;
    CLWREC.KUCGRPID = KL0BM002.KUCGRPID;
    CLWREC.XGPCD = KL0BM002.XGPCD;
    CLWREC.XDVCD = KL0BM002.XDVCD; /* 4/89 add division*/
    CLWREC.XSOCD = KL0BM002.XSOCD; /* 4/89 add sales office*/
    CLWREC.YCTCD = KL0BM002.YCTCD;
    CLWREC.XOBCD = KL0BM002.XOBCD; /* 4/89 change xot to xob*/
    CLWREC.YCRCD = KL0BM002.YCRCD;
    CLWREC.OP1CUPO = KL0BM002.OP1CUPO;
    CLWREC.ARCCCREF = KL0BM002.ARCCCREF;
    CLWREC.ARCCHKNB = KL0BM002.ARCCHKNB;
    CLWREC.YCSCD = KL0BM002.YCSCD;
    CLWREC.CLWESTLO = KL0BM002.CLWESTLO;
    CLWREC.CLWESTHI = KL0BM002.CLWESTHI;
    CLWREC.SM1AGYID = KL0BM002.SM1AGYID;
    CLWREC.SM4REPID = KL0BM002.SM4REPID;
    CLWREC.YPSCD = KL0BM002.YPSCD;
     /* dates are moved in cl0bsbe*/
  end
end // end KL0B220

// process screen
Function KL0B230()
   /* **************************************/
   /* process screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B230";
  ;
   /* if group company id was entered, go directly to batch*/
   /* else*/
   /* if ar cross ref was entered select from ar x reference tbl*/
   /* else*/
   /* if check number was entered select from ar x reference tbl*/
   /* else*/
   /* if POD/POS status code entered, select from Traffic 6-27-88*/
   /* else*/
   /* select from claims header*/
  ;
  if (KL0BM002.KUCGRPID != 0)
    if (KL0BM002.YPSCD == " ")
       /* next sentence*/
    else
      converseLib.validationFailed(432); /* pod/pos not allowed with group*/
                                   /* company*/
      set KL0BM002.YPSCD cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  else
    if (KL0BM002.ARCCCREF != " ")
      KL0BSDC(); /* select set from clcrec, then select unique clarec*/
    else
      ;
      if (KL0BM002.ARCCHKNB != " ")
        KL0BSDA(); /* select set from clarec, then select set from clcrec*/
        ;
      else
        KL0BSCD(); /* select set from clarec*/
      end
    end
  end
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
   /* if doing batch processing go to batch screen*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
    ;
     /* needed to find if any records exist before going to batch*/
     /* screen, so go thru cl0bsca/da to find 1 record then get out*/
    ;
    CLXREC.CLXCSCRN = "KL0BM004";
    CLXREC.CLXEOSF = "Y";
  end
end // end KL0B230

// map slsmn/whse sub-selection
Function KL0B300()
   /* ************************************************************/
   /* *    process screen cl0bm003                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0%050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0B300";
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0B301();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0BSEB(); /* protect fields*/
  end
  ;
   /* ***********************************************************/
  converse KL0BM003 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0B310(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0B320(); /* edit entries*/
  end
  ;
  ;
  if (converseVar.eventKey is pf12)
     /* next sentence*/
  else
    if (CLXREC.CLXERRF == "N")
      KL0B330(); /* process entries*/
    end
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0B311(); /* edit pfkeys*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0B300

// build screen
Function KL0B301()
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B301";
  ;
  set KL0BM003 initial;
  KL0BM003.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0BM003.SM1AGYID = CLWREC.SM1AGYID;
  KL0BM003.SM4REPID = CLWREC.SM4REPID;
  KL0BM003.XSOCD = CLWREC.XSOCD;
  KL0BM003.XWHCD = CLWREC.XWHCD;
  converseLib.validationFailed(276); /* enter additional quals for customer*/
  ;
  KL0BSEC(); /* edit heading*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (KL0BM003.XWHCD != " ")
    KL0BM003.CL0BMSHP = "Y";
  end
end // end KL0B301

// edit pfkeys
Function KL0B310()
   /* *********************************************/
   /* edit pfkeys*/
   /* *********************************************/
  ;
  CLXREC.CLXCPROC = "CL0B310";
  ;
  if (KL0BM003.CATOAP != " " /* if any fastpath data entered*/
   || KL0BM003.CAITEM != " ")
    COMMAREA.CATOAP = KL0BM003.CATOAP;
    COMMAREA.CAITEM = KL0BM003.CAITEM;
    KL0BSFP(); /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      KL0BSEA(); /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf5)
        CLXREC.CLXCSCRN = "KL0BM001"; /* have cl0b show map 1*/
        CLWREC.CLWCL0BX = "1";
        CLXREC.CLXEOSF = "Y"; /* end of map 3*/
        CLXREC.CLXERRF = "Y";
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf1)
              XSPF1();
            else
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              CLXREC.CLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end KL0B310

// edit pfkeys
Function KL0B311()
   /* **************************************/
   /* edit pf keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B311";
  ;
  if (converseVar.eventKey is pf12)
     /* next sentence*/
  end
  ;
  if (converseVar.eventKey is enter)
    if (CL0BW01.CL0BWBCH == "Y")
      CLWREC.CLWMAPFM = "KL0BM003";
      CLXREC.CLXCSCRN = "KL0BM004"; /* have cl0b show map 4*/
      CLWREC.CLWCL0BX = "4";
      CLXREC.CLXEOSF = "Y"; /* end of map 3*/
    else
      CLWREC.CLWMAPFM = "KL0BM003";
      COMMAREA.CATOAP = "KL0C";
      CLWREC.CLWSVSEL = "02"; /* go to first screen of cl0c*/
      XPCL002();
      converseLib.validationFailed(25); /* CANNOT TRANSFER TO APPLICATION*/
      CLXREC.CLXERRF = "Y";
    end
  end
end // end KL0B311

// edit entries
Function KL0B320()
   /* **************************************/
   /* edit entries*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B320";
  ;
  ;
  if (KL0BM003.SM1AGYID != " ")
    set KL0BM003.SM1AGYID normal;
    set KL0BM003.SM4REPID normal;
  end
  ;
  if (KL0BM003.XSOCD != " ")
    set KL0BM003.XSOCD normal;
  end
  ;
  if (KL0BM003.XWHCD != " ")
    set KL0BM003.XWHCD normal;
    set KL0BM003.CL0BMSHP normal;
    set KL0BM003.CL0BMRTN normal;
  end
  ;
  KL0BM003.XXXERRID = "KL0B";
  set KL0BM003.XGPCD cursor, normal;
  set KL0BM003.XDVCD normal; /* 4/89 add division*/
  set KL0BM003.YCTCD normal;
  set KL0BM003.XOBCD normal; /* 4/89 add base order type*/
  set KL0BM003.YCRCD normal;
  set KL0BM003.CLWSETLO normal;
  set KL0BM003.CLWSETHI normal;
  set KL0BM003.YCSCD normal;
  set KL0BM003.CLWSTTLO normal;
  set KL0BM003.CLWSTTHI normal;
  set KL0BM003.CLWESTLO normal;
  set KL0BM003.CLWESTHI normal;
  set KL0BM003.YPSCD normal;
  ;
      /* %%%%%%%%%%%%%%%%%%%%%%*/
       /* validate heading data*/
      /* %%%%%%%%%%%%%%%%%%%%%%*/
  ;
   /* if warehouse was entered,*/
   /* either ship from or return to must be entered*/
  ;
  if (KL0BM003.XWHCD != " ")
    if (KL0BM003.CL0BMSHP != "Y"
     && KL0BM003.CL0BMRTN != "Y")
      converseLib.validationFailed(262); /* must enter one warehouse site*/
      set KL0BM003.CL0BMSHP cursor, bold;
      set KL0BM003.CL0BMRTN bold;
      CLXREC.CLXERRF = "Y";
      KL0BM003.XXXERRID = "CL0B320";
      return;
    end
  end
  ;
   /* validate that field has data*/
  ;
  if (CLWREC.SM1AGYID != " "
   && KL0BM003.SM1AGYID == " ")
    converseLib.validationFailed(247); /* invalid sales agency*/
    set KL0BM003.SM1AGYID cursor, bold;
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (CLWREC.XSOCD != " "
     && KL0BM003.XSOCD == " ")
      converseLib.validationFailed(257); /* invalid sales office code*/
      set KL0BM003.XSOCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      return;
    else
      if (CLWREC.XWHCD != " "
       && KL0BM003.XWHCD == " ")
        converseLib.validationFailed(400); /* invalid warehouse code*/
        set KL0BM003.XWHCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end
  ;
   /* validate heading data*/
  ;
   /* IF kL0BM003.SM1AGYID NE CLWREC.SM1AGYID;*/
    /* OR kL0BM003.SM4REPID NE CLWREC.SM4REPID;*/
    /* OR kL0BM003.XSOCD NE CLWREC.XSOCD;*/
    /* OR kL0BM003.XWHCD NE CLWREC.XWHCD;*/
  if (KL0BM003.SM1AGYID != " "
   || KL0BM003.SM4REPID != 0
   || KL0BM003.XSOCD != " "
   || KL0BM003.XWHCD != " ")
    KL0BSEC(); /* validate heading data*/
  end
  ;
   /* show errors in heading first*/
  ;
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
     /* decide if need to process by batch*/
  ;
  CL0BW01.CL0BWBCH = "N"; /* init flag*/
  if (KL0BM003.CL0BMBCH == "Y") /* or submit batch flag set to yes*/
    CL0BW01.CL0BWBCH = "Y"; /* need to do batch processing*/
  end
  ;
   /* validate required fields*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
     /* next sentence - don't need to enter any fields*/
  else
    if (KL0BM003.CLWSETLO == 0 /* if no date was entered -  error*/
     && KL0BM003.CLWSTTLO == 0)
      set KL0BM003.CLWSETLO cursor, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(256); /* gpc,claim type,and one date reqd*/
    else
      if (KL0BM003.CLWSTTLO > 0
       && KL0BM003.YCSCD == " ")
        set KL0BM003.YCSCD cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(281); /* must enter status code with status date*/
      end
    end
    ;
    if (KL0BM003.SM1AGYID != " ")
      if (KL0BM003.CLWSETLO == 0)
        set KL0BM003.CLWSETLO cursor, bold;
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(286); /* agency w/o rep requires setup date*/
      end
    end
    ;
    if (KL0BM003.YCTCD == " ")
      set KL0BM003.YCTCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(256); /* gpc,claim type,and one date reqd*/
    end
    ;
    if (KL0BM003.XGPCD == " ")
      set KL0BM003.XGPCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(256); /* gpc,claim type,and one date reqd*/
    end
    ;
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  ;
   /* validate submit batch flag*/
  ;
  if (KL0BM003.CL0BMBCH == "Y"
   || KL0BM003.CL0BMBCH == "N"
   || KL0BM003.CL0BMBCH == " ")
     /* next sentence*/
  else
    set KL0BM003.CL0BMBCH cursor, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(367); /* valid values are y/n*/
    KL0BM003.XXXERRID = "CL0B320";
  end
  ;
  ;
   /* validate pod/pos status*/
  ;
  if (KL0BM003.YPSCD == " ")
     /* next sentence*/
  else
    if (KL0BM003.YPSCD in YPSTBL.YPSCD)
      KL0BM003.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
    else
      set KL0BM003.YPSCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(295); /* invalid pod/pos status*/
      KL0BM003.XXXERRID = "CL0B320";
    end
  end
  ;
   /* validate claim value - can't have negative values*/
  ;
  if (KL0BM003.CLWESTLO == 0
   && KL0BM003.CLWESTHI == 0)
     /* next sentence*/
  else
    if (KL0BM003.CLWESTLO == 0
     && KL0BM003.CLWESTHI > 0)
      KL0BM003.CLWESTLO = 0;
    end
    if (KL0BM003.CLWESTHI <= KL0BM003.CLWESTLO)
      converseLib.validationFailed(275); /* claim value range is not valid*/
      CLXREC.CLXERRF = "Y";
      set KL0BM003.CLWESTLO cursor, bold;
      set KL0BM003.CLWESTHI bold;
      KL0BM003.XXXERRID = "CL0B320";
    end
    if (KL0BM003.CLWESTHI < 0)
      converseLib.validationFailed(282); /* negative values not allowed*/
      CLXREC.CLXERRF = "Y";
      set KL0BM003.CLWESTHI cursor, bold;
      KL0BM003.XXXERRID = "CL0B320";
    end
    if (KL0BM003.CLWESTLO < 0)
      converseLib.validationFailed(282); /* negative values not allowed*/
      CLXREC.CLXERRF = "Y";
      set KL0BM003.CLWESTLO cursor, bold;
      KL0BM003.XXXERRID = "CL0B320";
    end
  end
  ;
   /* validate status code*/
  ;
  if (KL0BM003.YCSCD == " ")
     /* next sentence*/
  else
    if (KL0BM003.YCSCD in YCSTBL.YCSCD
     && YCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (KL0BM003.CLWSTTLO == 0)
        converseLib.validationFailed(281); /* must enter status code with status date*/
        CLXREC.CLXERRF = "Y";
        KL0BM003.XXXERRID = "CL0B320";
      end
    else
      set KL0BM003.YCSCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM003.XXXERRID = "CL0B320";
      converseLib.validationFailed(249); /* invalid status code*/
    end
  end
  ;
   /* validate reason code*/
  ;
  if (KL0BM003.YCRCD == " ")
     /* next sentence*/
  else
    if (KL0BM003.YCRCD in YCRTBL.YCRCD
     && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM003.YCRCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B320";
      converseLib.validationFailed(88); /* invalid reason code*/
      KL0BM003.XXXERRID = "CL0B320";
    end
  end
  ;
  ;
   /* validate order type*/
   /* 4/89 change xot to xob.*/
  if (KL0BM003.XOBCD == " ")
    KL0BM003.XOBABRV = " ";
  else
    if (KL0BM003.XOBCD in XOBTBL.XOBCD)
      KL0BM003.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    else
      set KL0BM003.XOBCD cursor, bold;
      KL0BM003.XOBABRV = " ";
      KL0BM003.XXXERRID = "CL0B320";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(96); /* order type code is not valid*/
      return;
    end
  end
  ;
  ;
   /* validate claim type*/
  ;
  if (KL0BM003.YCTCD == " ")
     /* next sentence*/
  else
    if (KL0BM003.YCTCD in YCTTBL.YCTCD
     && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (KL0BM003.XWHCD != " ")
        ;
         /* validate claim type and warehouse code*/
        ;
        if (KL0BM003.YCTCD == "ADJ"
         && KL0BM003.CL0BMRTN == "Y")
          converseLib.validationFailed(263); /* return to flag not allowed with claim type*/
          CLXREC.CLXERRF = "Y";
          set KL0BM003.CL0BMRTN cursor, bold;
          set KL0BM003.YCTCD bold;
          KL0BM003.XXXERRID = "CL0B320";
        else
          if (KL0BM003.YCTCD == "SCO"
           && KL0BM003.CL0BMRTN == "Y")
             /* return to flag not allowed with claim type*/
            converseLib.validationFailed(263);
            CLXREC.CLXERRF = "Y";
            set KL0BM003.CL0BMRTN cursor, bold;
            set KL0BM003.YCTCD bold;
            KL0BM003.XXXERRID = "CL0B320";
          else
            if (KL0BM003.YCTCD == "CDR"
             && KL0BM003.CL0BMRTN == "Y")
               /* ship from flag not allowed with claim type*/
              converseLib.validationFailed(264);
              CLXREC.CLXERRF = "Y";
              set KL0BM003.CL0BMRTN cursor, bold;
              set KL0BM003.YCTCD bold;
              KL0BM003.XXXERRID = "CL0B320";
            else
              if (KL0BM003.YCTCD == "DFO"
               && KL0BM003.CL0BMRTN == "Y")
                 /* ship from flag not allowed with claim type*/
                converseLib.validationFailed(264);
                CLXREC.CLXERRF = "Y";
                set KL0BM003.CL0BMRTN cursor, bold;
                set KL0BM003.YCTCD bold;
                KL0BM003.XXXERRID = "CL0B320";
              end
            end
          end
        end
      end
    else
      set KL0BM003.YCTCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B320";
      converseLib.validationFailed(87); /* invalid claim type*/
      KL0BM003.XXXERRID = "CL0B320";
    end
  end
  ;
  ;
   /* 4/89 add; validate division*/
  ;
  if (KL0BM003.XDVCD == " ")
    KL0BM003.XDVABRV = " ";
  else
    if (KL0BM003.XDVCD in XDVTBL.XDVCD)
      KL0BM003.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    else
      set KL0BM003.XDVCD cursor, bold;
      KL0BM003.XDVABRV = " ";
      KL0BM003.XXXERRID = "CL0B320";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(580); /* division not valid*/
      return;
    end
  end
  ;
  ;
   /* validate gpc code*/
  ;
  if (KL0BM003.XGPCD == " ")
     /* next sentence*/
  else
    if (KL0BM003.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      set KL0BM003.XGPCD cursor, bold;
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0B320";
      converseLib.validationFailed(86); /* invalid gpc code*/
      KL0BM003.XXXERRID = "CL0B320";
    end
  end
  ;
   /* edit dates*/
  ;
  CLWREC.CLWSETLO = KL0BM003.CLWSETLO;
  CLWREC.CLWSETHI = KL0BM003.CLWSETHI;
  CLWREC.CLWSTTLO = KL0BM003.CLWSTTLO;
  CLWREC.CLWSTTHI = KL0BM003.CLWSTTHI;
  ;
  KL0BSBE();
  ;
  if (CL0BW01.CL0BWDT1 == "Y")
    set KL0BM003.CLWSTTHI cursor, bold;
  end
  if (CL0BW01.CL0BWDT2 == "Y")
    set KL0BM003.CLWSTTLO cursor, bold;
  end
  if (CL0BW01.CL0BWDT3 == "Y")
    set KL0BM003.CLWSETHI cursor, bold;
  end
  if (CL0BW01.CL0BWDT4 == "Y")
    set KL0BM003.CLWSETLO cursor, bold;
  end
  ;
   /* if there was an error, don't move screen data to passing rec*/
  ;
  if (CLXREC.CLXERRF == "Y"
   || converseVar.eventKey is pf12)
    return;
  else
    CLWREC.SM1AGYID = KL0BM003.SM1AGYID;
    CLWREC.SM4REPID = KL0BM003.SM4REPID;
    CLWREC.XSOCD = KL0BM003.XSOCD;
    CLWREC.XWHCD = KL0BM003.XWHCD;
    CLWREC.XGPCD = KL0BM003.XGPCD;
    CLWREC.XDVCD = KL0BM003.XDVCD; /* 4/89 add division*/
    CLWREC.YCTCD = KL0BM003.YCTCD;
    CLWREC.XOBCD = KL0BM003.XOBCD; /* 4/89 change xot to xob*/
    CLWREC.YCRCD = KL0BM003.YCRCD;
    CLWREC.YPSCD = KL0BM003.YPSCD;
    CLWREC.YCSCD = KL0BM003.YCSCD;
    CLWREC.CLWESTLO = KL0BM003.CLWESTLO;
    CLWREC.CLWESTHI = KL0BM003.CLWESTHI;
     /* dates are moved in cl0bsbe*/
  end
end // end KL0B320

// process screen
Function KL0B330()
   /* **************************************/
   /* process screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B330";
  ;
   /* if processing warehouse data or sales office data*/
     /* dont check for existing records because of db indexes*/
   /* else*/
   /* if pod/pos status code entered, select from traff 7-06-88*/
   /* else*/
     /* create array from claim header or check for existing*/
     /* records if processing by batch*/
  ;
  ;
  if (KL0BM003.XWHCD != " "
   || KL0BM003.XSOCD != " ")
    if (KL0BM003.YPSCD != " ")
      if (CLWREC.CLWMXIDX != 0)
        CLXREC.CLXARAYX = 1;
        while (CLXREC.CLXARAYX <= CLWREC.CLWMXIDX)
          KL0BSDF();
        end
      end
    end
  else
    KL0BSCA();
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    ;
  end
  ;
   /* if processing warehouse, see where select should be done*/
    /* from*/
  ;
  CLAREC.CLASHPFF = "N"; /* init ship from flag*/
  CLAREC.CLARTNFF = "N"; /* init return to flag*/
  ;
  if (KL0BM003.XWHCD != " ")
    KL0B331();
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
   /* if doing batch processing go to batch screen*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
    CLXREC.CLXCSCRN = "KL0BM004";
    CLXREC.CLXEOSF = "Y";
    return;
  end
end // end KL0B330

// set whse ship/return flags
Function KL0B331()
   /* **************************************/
   /* set whse ship/return flags*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0B331";
  ;
  if (KL0BM003.CL0BMSHP == "Y")
    CLAREC.CLASHPFF = "Y"; /* ship from flag*/
  end
  ;
  if (KL0BM003.CL0BMRTN == "Y")
    CLAREC.CLARTNFF = "Y"; /* return to flag*/
  end
  ;
end // end KL0B331

// map batch submit
Function KL0B400()
   /* *************************************************************/
   /* MAINTENANCE HISTORY:*/
   /* 10-12-90 bcourt change XROCD from 2 to 4 char.*/
                /* Note-hard coded '28' must match map occurences*/
   /* 08-07-91 wjohns change application names for transfers*/
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* 05-19-92  sgorga  corrected the 'cl0bwixm GT __' to allow*/
   /* the table to be full before abending.  The nbr*/
   /* following 'GT...' is the # of tbl occurences + 1*/
   /* *************************************************************/
  ;
  set CL0BW94 empty; /* 3-8-88 'batch only' parms*/
  set CL0BW95 empty;
  set CL0BW96 empty;
  set CL0BW97 empty;
  ;
  if (CLXREC.CLXERRF == "N")
    set KL0BM004 initial;
    KL0BM004.CL0BMCPY = 1; /* 3-16-88, dflt # copy=1*/
    KL0BM004.CL0BWUID = COMMAREA.CAUSERID; /* 3-16-88,dflt to logon*/
    if (CLWREC.KUCGRPID != 0 /* 3-16-88 if overnight batch*/
     || CLWREC.XWHCD != " ") /* "*/
      KL0BM004.CL0BMOVN = "OVERNIGHT"; /* 3-16-88, show literal*/
      set KL0BM004.CL0BMOVN skip; /* 3-16-88*/
    else
      if (CLWREC.XSOCD != " " /* 4/89 is overnight batch if*/
       && CLWREC.KUCCOID == 0) /* entered sls ofc and not customer*/
        KL0BM004.CL0BMOVN = "OVERNIGHT";
        set KL0BM004.CL0BMOVN skip;
      else
        set KL0BM004.CL0BMOVN skip, invisible; /* 3-16-88,else don't*/
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0)
    CL0BW98.CL0BWIXM = 1;
    CL0BW98.CL0BWIXT = 1;
    ;
     /* note hard coded '28' must match maps' occurences. <====*/
    while (CL0BW98.CL0BWIXM <= 28
     && XROTBL.XROCD[CL0BWIXT] != "9999") /* 10-12-90 expand 2 to 4 char*/
      if (XROTBL.XXXSTAT[CL0BWIXT] == "A")
        if (XROTBL.XROCPFL[CL0BWIXT] == "Y") /* printer access allowed*/
          KL0BM004.XROPDEST[CL0BWIXM] = XROTBL.XROPDEST[CL0BWIXT];
          KL0BM004.XROABRV[CL0BWIXM] = XROTBL.XROABRV[CL0BWIXT];
          ;
          CL0BW98.CL0BWIXM = CL0BW98.CL0BWIXM + 1;
        else
          /* next sentence*/
        end
      end
      ;
      CL0BW98.CL0BWIXT = CL0BW98.CL0BWIXT + 1;
      ;
       /* note hard coded '29' must match map's occurences + 1 <====*/
       /* At this time, the table has 28 occurences + 1 = 29   <====*/
      if (CL0BW98.CL0BWIXM > 29)
        set TA1REC empty;
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1PGMNM = "CL0B400"; /* process name*/
        TA1REC.TA1LOC = "XROTBL DISPLAY ENTRIES EXCEEDS";
        TA1REC.TA1MAP = "KL0BM004"; /* map name*/
        SQLCA.SQLCAREC = " "; /* application error info.*/
        ;
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
        ;
        converseLib.clearScreen();
         /* clear screen before redisplay*/
        ;
      end
    end
    ;
    if (CL0BW98.CL0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(CL0BW98.CL0BWMNO);
    end /* job submitted message number*/
    CL0BW98.CL0BWMNO = 0; /* reset message number*/
  else
    set KL0BM004 alarm; /* sound alarm*/
  end
   /* ************************************************************/
  converse KL0BM004 ;
   /* ************************************************************/
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KL0BM004.CATOAP != " " /* if any fastpath data entered*/
   || KL0BM004.CAITEM != " ")
    COMMAREA.CATOAP = KL0BM004.CATOAP;
    COMMAREA.CAITEM = KL0BM004.CAITEM;
    KL0BSFP(); /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  VAGen_EZEMSG = " ";
  ;
  if (converseVar.eventKey is enter)
    ;
     /* if values are changed on screen, process request*/
    ;
    if (KL0BM004.CL0BMRMT != CL0BW98.CL0BMRMT
     || KL0BM004.CL0BWUID != CL0BW98.CL0BWUID
     || KL0BM004.CL0BMCPY != CL0BW00.CL0BMCPY)
      ;
      KL0BSZ1(); /* edit printer site*/
      ;
      KL0BSZ2(); /* edit user id*/
      ;
      if (CLXREC.CLXERRF != "Y")
        if (CLWREC.KUCGRPID != 0 /* 3-8-88 'batch only' rpt=grp cmpny id*/
         || CLWREC.XWHCD != " ") /* "    or whse entry*/
          KL0BSBO(); /* "    write 'batch only' parms*/
        else
          if (CLWREC.XSOCD != " " /* 4/89   'batch only' rept if sls ofc*/
           && CLWREC.KUCCOID == 0) /* "    with no customer*/
            KL0BSBO(); /* "    write 'batch only' parms*/
          else /* "*/
            KL0BSZ3(); /* load jcl values for daytime batch*/
          end
        end
      end
    else
      ;
       /* have finished with screen, now go back to where we*/
       /* came from*/
      ;
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXCSCRN = CLWREC.CLWMAPFM;
      CL0BW98.CL0BMRMT = " ";
      CL0BW98.CL0BWUID = " ";
      CL0BW00.CL0BMCPY = 0;
    end
    ;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
    else
      if (converseVar.eventKey is pf3)
        COMMAREA.CATOAP = "KL0A";
        XPCL002();
        converseLib.validationFailed(25); /* cANNOT TRANSFER TO APPLICATION*/
        CLXREC.CLXERRF = "Y";
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf5)
            CLXREC.CLXCSCRN = "KL0BM001"; /* have Kl0b show map 1*/
            CLWREC.CLWCL0BX = "1";
            CLXREC.CLXEOSF = "Y"; /* end of map 4*/
          else
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
end // end KL0B400

// db2-traffic, edit pro nbr
Function KL0B800()
  ;
  set SQLCA empty;
  ;
  call "IO1240" ("SS", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* check traffic table*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(238); /* PRO/SHIPPER NUMBER INVALID*/
      set KL0BM001.TF2PRONO cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      CL0BW01.CL0BWNUM = CLEREC.TF2PRONO;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B800";
      TA1REC.TA1LOCAT[4] = "IO1240";
      XPCL010(); /* abend*/
    end
  end
  ;
  KL0B811(); /* select next from traffic tbl*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CLAREC.CLACLMNB = CLEREC.CLACLMNB;
    KL0B820(); /* get claim header & seq #*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(238); /* PRO/SHIPPER NUMBER INVALID*/
      set KL0BM001.TF2PRONO cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLTRF01";
      CL0BW01.CL0BWNUM = CLEREC.TF2PRONO;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B800";
      TA1REC.TA1LOCAT[4] = "IO1240";
      XPCL010(); /* abend*/
    end
  end
  ;
  KL0B812(); /* close set*/
  ;
end // end KL0B800

// db2-memo, edit memo nbr
Function KL0B810()
     /* *****************/
     /* edit memo number*/
     /* *****************/
  ;
  set SQLCA empty;
  ;
  call "IO1290" ("SB", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* check memo*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if found memo, use claim #*/
    CLAREC.CLACLMNB = CLHREC.CLACLMNB;
    KL0B820(); /* get claim header & seq #*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(239); /* INVALID MEMO NUMBER*/
      set KL0BM001.CLHMEMNB cursor, bold;
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLMEM01";
      CL0BW01.CL0BWNUM = CLHREC.CLHMEMNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B810";
      TA1REC.TA1LOCAT[4] = "IO1290";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B810

// db2-claims,select next clerec
Function KL0B811()
  ;
    /* process cl0b811 - select next clerec*/
  ;
  set SQLCA empty;
  call "IO1240" ("SN", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if tf2pronbr found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTN01";
      CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B811";
      TA1REC.TA1LOCAT[4] = "IO1240";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B811

// db2-claims,close set clerec
Function KL0B812()
  ;
    /* process cl0b812 - close set clerec*/
  ;
  set SQLCA empty;
  call "IO1240" ("CS", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if tf2pronbr found*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTN01";
      CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B812";
      TA1REC.TA1LOCAT[4] = "IO1240";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B812

// db2-claims,edit claim nbr
Function KL0B820()
  ;
    /* process cl0b820 - validate claim number*/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* check claim header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if claim number found*/
    CL0BW01.CLWMNOPT = CLWREC.CLWMNOPT; /* verify option/clm typ pair*/
    CL0BW01.YCTCD = CLAREC.YCTCD;
    if (CL0BW01.CL0BWKEY in YMOTBL.YMOKEY)
                                   /* restrict clm types to menu opt*/
      /* ok to use claim, now edit seq nbr:*/
      if (KL0BM001.CLHSEQNB >= CLAREC.CLACSQNB) /* seq # > curr seq*/
        set KL0BM001.CLHSEQNB cursor, modified, bold;
        converseLib.validationFailed(14); /* SEQUENCE NUMBER INVALID*/
        CLXREC.CLXERRF = "Y";
      end
    else
      converseLib.validationFailed(233); /* claim type bad for menu option*/
      set KL0BM001.CLACLMNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* CLAIM NUMBER NOT FOUND*/
      set KL0BM001.CLACLMNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B820";
      TA1REC.TA1LOCAT[4] = "IO1160";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B820

// db2-memo, edit memo nbr
Function KL0B830()
    /* process cl0b830 - get memo number from claim #*/
  ;
  set SQLCA empty;
  ;
  call "IO1290" ("SA", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* check memo record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if memo record found*/
    KL0BM001.CLHMEMNB = CLHREC.CLHMEMNB; /* store on map*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(259); /* memo not found for claim #*/
      set KL0BM001.CLACLMNB cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLMEM01";
      CL0BW01.CL0BWNUM = CLHREC.CLHMEMNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B830";
      TA1REC.TA1LOCAT[4] = "IO1290";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B830

// db2-select set clm/ivc xref
Function KL0B840()
     /* ********************************/
     /* select set invoice claim xref*/
     /* ********************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("S1", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* all claims for ivc nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.IV0IVCID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B840";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B840

// db2-fetch next clm/ivc xref
Function KL0B841()
     /* ********************************/
     /* select next invoice claim xref*/
     /* ********************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("N1", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* next claim for ivc nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.IV0IVCID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B841";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B841

// db2-close clm/ivc xref
Function KL0B842()
     /* *****************************/
     /* close set invoice claim xref*/
     /* *****************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("C1", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* all claims for ivc nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.IV0IVCID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B842";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B842

// db2-select set clm/ord xref
Function KL0B850()
     /* ****************************/
     /* select set order claim xref*/
     /* ****************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("S2", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* all claims for order nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.OP1CUOID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B850";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
  ;
end // end KL0B850

// db2-fetch next clm/ord xref
Function KL0B851()
     /* *****************************/
     /* select next order claim xref*/
     /* *****************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("N2", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* next claim for order nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.OP1CUOID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B851";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B851

// db2-close clm/ord xref set
Function KL0B852()
     /* ***************************/
     /* close set order claim xref*/
     /* ***************************/
  ;
  set SQLCA empty;
  ;
  call "IO1180" ("C2", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* all claims for order nbr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0BW01.CL0BWNUM = CLBREC.IV0IVCID;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B852";
    TA1REC.TA1LOCAT[4] = "IO1180";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B852

// db2-select set a/r ref
Function KL0B860()
     /* ***********************/
     /* select set a/r ref nbr*/
     /* ***********************/
  ;
  set SQLCA empty;
  ;
  call "IO1170" ("S3", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* all claims for a/r ref*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLARX01";
    CL0BW01.CL0BWNUM = CLCREC.ARCREFNB;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B860";
    TA1REC.TA1LOCAT[4] = "IO1170";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B860

// db2-fetch next a/r ref
Function KL0B861()
     /* ***************************/
     /* select next a/r ref claim*/
     /* ***************************/
  ;
  set SQLCA empty;
  ;
  call "IO1170" ("N3", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* next claim for a/r ref*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      CL0BW01.CL0BWNUM = CLCREC.ARCREFNB;
      TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
      TA1REC.TA1LOCAT[3] = "CL0B861";
      TA1REC.TA1LOCAT[4] = "IO1170";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
end // end KL0B861

// db2-close a/r ref set of clms
Function KL0B862()
     /* *************************/
     /* close set a/r ref claims*/
     /* *************************/
  ;
  set SQLCA empty;
  ;
  call "IO1170" ("C3", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* ALL CLAIMS FOR A/R REF*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLARX01";
    CL0BW01.CL0BWNUM = CLCREC.ARCREFNB;
    TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
    TA1REC.TA1LOCAT[3] = "CL0B862";
    TA1REC.TA1LOCAT[4] = "IO1170";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B862

// db2-select set cnsmr.last name
Function KL0B870()
     /* *******************************/
     /* select set consumer last name*/
     /* *******************************/
  ;
  set SQLCA empty;
  ;
  CL0BW03.CL0BWTYP = "SS";
  call "IO1190" (CL0BW03, SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes}; /* claims cnsmr lst nm*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCNSMR01";
    TA1REC.TA1TBLKE = KL0BM001.CLWLSTNM;
    TA1REC.TA1LOCAT[3] = "CL0B870";
    TA1REC.TA1LOCAT[4] = "IO1190";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B870

// db2-fetch next cnsmr.last name
Function KL0B871()
     /* **************************************/
     /* select next consumer last name claim*/
     /* **************************************/
  ;
  set SQLCA empty;
  ;
  CL0BW03.CL0BWTYP = "SN";
  call "IO1190" (CL0BW03, SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes};
                                   /* next claim for last name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCNSMR01";
    TA1REC.TA1TBLKE = KL0BM001.CLWLSTNM;
    TA1REC.TA1LOCAT[3] = "CL0B871";
    TA1REC.TA1LOCAT[4] = "IO1190";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B871

// db2-close cnsmr.last name set
Function KL0B872()
     /* ************************************/
     /* close set consumer last name claims*/
     /* ************************************/
  ;
  set SQLCA empty;
  ;
  CL0BW03.CL0BWTYP = "CS";
  call "IO1190" (CL0BW03, SQLCA, CLDREC) {isNoRefresh = yes, isExternal = yes};
                                   /* ALL CLAIMS FOR last name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCNSMR01";
    TA1REC.TA1TBLKE = KL0BM001.CLWLSTNM;
    TA1REC.TA1LOCAT[3] = "CL0B872";
    TA1REC.TA1LOCAT[4] = "IO1190";
    XPCL010(); /* abend*/
  end
  ;
  ;
end // end KL0B872

// fetch unique from kumrec
Function KL0B910()
   /* **************************************/
   /* select unique on kumrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0B910"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0340"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%"; /* map name*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VSTORE01"; /* table view name*/
        CL0BW01.CL0BWNUM = KUMREC.KUCCOID;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B910

// fetch unique from kucrec
Function KL0B911()
   /* **************************************/
   /* select unique on kumrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0B911"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%"; /* map name*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view name*/
        CL0BW01.CL0BWNUM = KUCREC.KUCCOID;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B911

// select set from clarec
Function KL0B913()
   /* **************************************/
   /* select set from clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" (CL0BW02, SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B913"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLHDR01";
        CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        TA1REC.TA1LOCAT[4] = "IO1160";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B913

// fetch next from clarec
Function KL0B914()
   /* **************************************/
   /* fetch next from clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" (CL0BW02, SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B914"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLHDR01";
        CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        TA1REC.TA1LOCAT[4] = "IO1160";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B914

// close cursor for clarec
Function KL0B915()
   /* **************************************/
   /* fetch next from clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" (CL0BW02, SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B915"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLHDR01";
        CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B915

// fetch unique from kulrec
Function KL0B916()
   /* **************************************/
   /* select unique on kulrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0B916"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0170"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%"; /* map name*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VADDR001"; /* table view name*/
        CL0BW01.CL0BWNUM = KULREC.KUCCOID;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B916

// fetch unique from sm1rec
Function KL0B917()
   /* **************************************/
   /* select unique on sm1rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0B917"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0050"; /* location*/
        TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
        TA1REC.TA1TBLVU = "VSAGCY01"; /* table view name*/
        CL0BW01.CL0BWNUM = SM1REC.SM1AGYID;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0B917

// select set from clcrec
Function KL0B918()
   /* **************************************/
   /* select set from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B918"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B918

// fetch next from clcrec
Function KL0B919()
   /* **************************************/
   /* fetch next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B919"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B919

// close cursor for clcrec
Function KL0B920()
   /* **************************************/
   /* fetch next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B920"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B920

// select set from clcrec
Function KL0B921()
   /* **************************************/
   /* select set from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S2", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B921"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B921

// fetch next from clcrec
Function KL0B922()
   /* **************************************/
   /* fetch next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("N2", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B922"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B922

// close cursor for clcrec
Function KL0B923()
   /* **************************************/
   /* fetch next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("C2", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B923"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0BW01.CL0BWNUM = CLCREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM;
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B923

// fetch unique from clarec
Function KL0B924()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0B924"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1MAP = "KL0BM00%"; /* map name*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0BW01.CL0BWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0BW01.CL0BWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0B924

// select unique clerec
Function KL0B928()
  ;
   /* **************************************/
         /* created 7-08-88*/
   /* select unique on clerec*/
   /* get rec for POD/POS Status code*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1240" ("S ", SQLCA, CLEREC) {isNoRefresh = yes, isExternal = yes}; /* ???????????????*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0B928"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1240";
        TA1REC.TA1MAP = "KL0BM00%";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLTRF01";
        TA1REC.TA1TBLKE = CLEREC.YPSCD;
        XPCL010(); /* error diagnosis routine*/
        return;
      end
    end
  end
end // end KL0B928

// check standard entry keys
Function KL0BS01()
    /* statement group cl0bs01 - check valid entry key,*/
       /* do menu transfers if requested*/
  ;
  ;
  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pf3) /* pf3 - return to prior menu*/
      COMMAREA.CATOAP = "KL0A"; /* xfer to claim menu*/
      CLXREC.CLXEOSF = "Y"; /* end of map*/
      CLXREC.CLXEOAF = "Y"; /* end of application*/
    else
      if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
        XSPF4();
        KL0BM001.XXXMSG = COMMAREA.CAMSG; /* security error*/
        COMMAREA.CATOAP = " ";
        CLXREC.CLXERRF = "Y";
      else
        if (converseVar.eventKey is pf1) /* pf1 - help (not yet active)*/
          XSPF1();
          KL0BM001.XXXMSG = COMMAREA.CAMSG; /* security error*/
          COMMAREA.CATOAP = " ";
          CLXREC.CLXERRF = "Y";
        else
          if (converseVar.eventKey is pa1 /* pa1 - return same map*/
           || converseVar.eventKey is pa2 /* pa2 - ditto*/
           || converseVar.eventKey is pa3) /* pa3 - ditto*/
            converseLib.clearScreen();
             /* reset map, no clearing*/
            converseLib.validationFailed(62); /* lost keyed data on map*/
            CLXREC.CLXERRF = "Y";
          else
            converseLib.validationFailed(2); /* invalid pf key*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0BS01

// edit the customer department
Function KL0BS43()
   /* ************************************************************/
   /* *      edit the customer department number                **/
   /* * 03-21-91 gdecke  created                                **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BS43"; /* set current process name*/
  ;
  ;
  KUNREC.KUCCOID = KL0BM002.KUCCOID;
  KUNREC.KUMSTRID = KL0BM002.KUMSTRID;
  KUNREC.XNXCD = KL0BM002.XNXCD;
  if (KL0BM002.XGPCD == "00"
   || KL0BM002.XGPCD == "  ")
    KUNREC.XGPCD = "02";
  else
    KUNREC.XGPCD = KL0BM002.XGPCD;
  end
  ;
  ;
  set SQLCA empty;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* get customer record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if customer was not found*/
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0BS43";
      XPCL010();
    end
  end
  ;
   /* 072489 add ** due to iomod change,*/
   /* old 'ss' got co/store/dept, new gets co/store/dept/gpc*/
  KUNREC.XGPCD = "**"; /* get all gpc*/
  ;
  set SQLCA empty;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* set of customer records*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING CUSTOMER SET";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1LOCAT[2] = "CL0BS43";
    XPCL010();
  end
  ;
  ;
  set SQLCA empty;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* the first record of set*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(83); /* customer number not found*/
      set KUNREC empty;
      set KL0BM002.KUCCOID cursor, modified, bold;
      set KL0BM002.KUMSTRID modified, bold;
      set KL0BM002.XNXCD modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1LOCAT[2] = "CL0BS43";
      XPCL010();
    end
  end
  ;
  ;
  set SQLCA empty;
  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* the first record of set*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    return;
  else
    TA1REC.TA1TBLKE = "FATAL ERROR GETTING CUSTOMER";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1LOCAT[2] = "CL0BS43";
    XPCL010();
  end
  ;
  ;
end // end KL0BS43

// TRY TO FIND CONVERTED CUSTOMER
Function KL0BS4C()
   /* ************************************************************/
   /* *      select KUDREC for customer number (DCUST.VCONV001) **/
   /* *                                                         **/
   /* * Maintenance                                             **/
   /* *                                                         **/
   /* *   1. 3/15/91 GDECKE  CREATED                            **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BS4C"; /* set current process name*/
  ;
  ;
  if (CL0BW01.CL0BWARN == "Y" /* if user already got this message*/
   && KL0BM002.KUCCOID == CL0BW01.KUCCOID
   && KL0BM002.KUMSTRID == CL0BW01.KUMSTRID
   && KL0BM002.XNXCD == CL0BW01.XNXCD)
    return; /* dont do the test again*/
  end
  ;
  CL0BW01.KUCCOID = KL0BM002.KUCCOID;
  CL0BW01.KUMSTRID = KL0BM002.KUMSTRID;
  CL0BW01.XNXCD = KL0BM002.XNXCD;
  CL0BW01.CL0BWARN = "Y";
  ;
  set KUDREC empty;
  ;
  KUDREC.KUCCOID = KL0BM002.KUCCOID;
  KUDREC.KUMSTRID = KL0BM002.KUMSTRID;
  ;
  set SQLCA empty;
  call "IO5570" ("S ", SQLCA, KUDREC) {isNoRefresh = yes, isExternal = yes}; /* get company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    KL0BM002.CL0BMCUC = KUDREC.KUDCOCID; /* show converted cust in*/
    KL0BM002.CL0BMSTO = KUDREC.KUDSTCID; /* special converted company*/
    KL0BM002.CL0BMDEP = KUDREC.XNXCD; /* fields on the map*/
    set KL0BM002.CL0BMCUH protect, bold; /* tributes for user to see*/
    set KL0BM002.CL0BMCUS modified, bold; /* enable select field*/
    set KL0BM002.CL0BMCUC protect, modified;
    set KL0BM002.CL0BMSTO protect, modified;
    set KL0BM002.CL0BMDEP protect, modified;
    converseLib.validationFailed(687);
    CLXREC.CLXERRF = "Y";
    set KL0BM002.KUCCOID cursor, modified, bold;
    set KL0BM002.KUMSTRID modified, bold;
    set KL0BM002.XNXCD modified, bold;
  else
    set KL0BM002.CL0BMCUH initialAttributes; /* reset converted company fields*/
    set KL0BM002.CL0BMCUS initialAttributes;
    set KL0BM002.CL0BMCUC initialAttributes;
    set KL0BM002.CL0BMSTO initialAttributes;
    set KL0BM002.CL0BMDEP initialAttributes;
    if (SQLCA.VAGen_SQLCODE == 100) /* if company CONVERSION TABLE LINE*/
      return; /* ; NOT FOUND THEN NO ACTION*/
    else
      TA1REC.TA1TBLKE = "FATAL ERROR-CUST CONVERSION";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "DCONV001";
      TA1REC.TA1LOCAT[2] = "CL0BS4C";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0BS4C

// set all data cursor,bright
Function KL0BSB1()
  ;
  ;
  ;
  if (KL0BM001.CLWLSTNM != " ") /* consumer last name*/
    set KL0BM001.CLWLSTNM cursor, bold;
  end
  ;
  if (KL0BM001.XWHCD != " ") /* warehouse*/
    set KL0BM001.XWHCD cursor, bold;
  end
  ;
  if (KL0BM001.XSOCD != " ") /* sales office*/
    set KL0BM001.XSOCD cursor, bold;
  end
  ;
  if (KL0BM001.SM4REPID != 0) /* sales rep*/
    set KL0BM001.SM4REPID cursor, bold;
  end
  ;
  if (KL0BM001.SM1AGYID != " ") /* sales agency*/
    set KL0BM001.SM1AGYID cursor, bold;
  end
  ;
  if (KL0BM001.KUCGRPID != 0) /* company group i.d.*/
    set KL0BM001.KUCGRPID cursor, bold;
  end
  ;
  if (KL0BM001.XNXCD != 0) /* customer dept*/
    set KL0BM001.XNXCD cursor, bold;
  end
  ;
  if (KL0BM001.KUMSTRID != 0) /* customer store*/
    set KL0BM001.KUMSTRID cursor, bold;
  end
  ;
  if (KL0BM001.KUCCOID != 0) /* customer company*/
    set KL0BM001.KUCCOID cursor, bold;
  end
  ;
  if (KL0BM001.ARCREFNB != " ") /* a/r reference*/
    set KL0BM001.ARCREFNB cursor, bold;
  end
  ;
  if (KL0BM001.OP1NORID != 0) /* nike order i.d.*/
    set KL0BM001.OP1NORID cursor, bold;
  end
  ;
  if (KL0BM001.OP1CUOID != 0) /* customer order i.d.*/
    set KL0BM001.OP1CUOID cursor, bold;
  end
  ;
  if (KL0BM001.IV0IVCID != 0) /* invoice nbr*/
    set KL0BM001.IV0IVCID cursor, bold;
  end
  ;
  if (KL0BM001.TF2PRONO != " ") /* pro/shipper nbr*/
    set KL0BM001.TF2PRONO cursor, bold;
  end
  ;
  if (KL0BM001.CLHMEMNB != 0) /* memo nbr*/
    set KL0BM001.CLHMEMNB cursor, bold;
  end
  ;
  if (KL0BM001.CLHSEQNB != 0) /* claim seq nbr*/
    set KL0BM001.CLACLMNB cursor, bold;
  end
  ;
  if (KL0BM001.CLACLMNB != 0) /* claim nbr*/
    set KL0BM001.CLACLMNB cursor, bold;
  end
  ;
  ;
end // end KL0BSB1

// set alterable fields modified
Function KL0BSBA()
   /* *****************************************/
    /* set alterable fields modified*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBA";
  TA1REC.TA1LOCAT[1] = "CL0BSBA";
  ;
  ;
  set KL0BM002.KUCCOID modified;
  set KL0BM002.KUMSTRID modified;
  set KL0BM002.XNXCD modified;
  set KL0BM002.CL0BMGFL modified;
  set KL0BM002.KUCGRPID modified;
  set KL0BM002.XGPCD modified;
  set KL0BM002.YCTCD modified;
  set KL0BM002.YCRCD modified;
  set KL0BM002.CLWSETLO modified;
  set KL0BM002.CLWSETHI modified;
  set KL0BM002.OP1CUPO modified;
  set KL0BM002.ARCCCREF modified;
  set KL0BM002.YCSCD modified;
  set KL0BM002.CLWSTTLO modified;
  set KL0BM002.CLWSTTHI modified;
  set KL0BM002.CLWESTLO modified;
  set KL0BM002.CLWESTLO modified;
  set KL0BM002.SM1AGYID modified;
  set KL0BM002.SM4REPID modified;
end // end KL0BSBA

// edit cust nbr/group company
Function KL0BSBC()
   /* *****************************************/
    /* edit customer number or group company id*/
    /* by looking up address and name on db.*/
   /* *****************************************/
   /* ****************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *-------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                               **/
   /* *-------------------------------------------------------------**/
   /* * 11-12-93  GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.      **/
   /* ****************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBC";
  TA1REC.TA1LOCAT[1] = "CL0BSBC";
  ;
   /* edit combos of heading data*/
  ;
  if (KL0BM002.KUCCOID != 0
   || KL0BM002.KUMSTRID != 0
   || KL0BM002.XNXCD != 0)
    if (KL0BM002.KUCGRPID != 0)
      set KL0BM002.KUCCOID cursor, bold;
      set KL0BM002.KUMSTRID bold;
      set KL0BM002.XNXCD bold;
      set KL0BM002.KUCGRPID bold;
      converseLib.validationFailed(260); /* enter either customer number or group id nbr*/
      CLXREC.CLXERRF = "Y";
      KL0BM002.XXXERRID = "CL0BSBC";
      return;
    end
  end
  ;
  ;
  if (KL0BM002.CL0BMGFL == "Y"
   && KL0BM002.KUCGRPID != 0)
    set KL0BM002.KUCGRPID cursor, bold;
    set KL0BM002.CL0BMGFL bold;
    converseLib.validationFailed(261); /* group flag not allowed with group id nbr*/
    CLXREC.CLXERRF = "Y";
    KL0BM002.XXXERRID = "CL0BSBC";
    return;
  end
  ;
     /* ########################################*/
      /* look up with customer and store as key*/
     /* ########################################*/
  ;
  if (KL0BM002.KUMSTRID != 0)
    ;
      /* look up keys for name and address*/
    ;
    set KUMREC empty;
    KUMREC.KUCCOID = KL0BM002.KUCCOID;
    KUMREC.KUMSTRID = KL0BM002.KUMSTRID;
    ;
    KL0B910(); /* fetch unique from kumrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL0BM002.KUCCOID cursor, bold;
        set KL0BM002.KUMSTRID bold;
        set KL0BM002.XNXCD bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(6); /* customer number is not valid*/
        return;
      end
    end
    ;
       /* ########################################*/
        /* check for valid department code*/
       /* ########################################*/
    ;
    if (KL0BM002.XNXCD == "  "
     || KL0BM002.XNXCD == 0)
      KL0BM002.XNXCD = 0;
    else
      KL0BS43(); /* edit for valid dept code using kunrec(vcust001)*/
      if (CLXREC.CLXERRF == "Y")
        return;
      end
    end
    ;
    ;
     /* look up name and address*/
    ;
    set KULREC empty;
    KL0BM002.KUCCONM = KUMREC.KUMSTRNM;
    KULREC.KULAAID = KUMREC.KUMSTAID;
    KULREC.KUCCOID = KUMREC.KUCCOID;
    KL0B916(); /* fetch unique from kulrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    KL0BM002.XXXADDR1 = KULREC.XXX-ADDR1;
    KL0BM002.XXXADDR2 = KULREC.XXX-ADDR2;
    KL0BM002.XXXADDR3 = KULREC.XXX-ADDR3;
    KL0BM002.XXXCITY = KULREC.XXXCITY;
    KL0BM002.XSTCD = KULREC.XSTCD;
    KL0BM002.XXXZIP = KULREC.XXXZIP;
    return;
  end
  ;
     /* ###################################################*/
      /* look up with group flag and customer number as key*/
     /* ###################################################*/
  ;
  if (KL0BM002.CL0BMGFL == "Y")
    ;
      /* look up keys for name and address*/
    ;
    set KUCREC empty;
    KUCREC.KUCCOID = KL0BM002.KUCCOID;
    ;
    KL0B911(); /* fetch unique form kucrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL0BM002.KUCCOID cursor, bold;
        set KL0BM002.KUMSTRID bold;
        set KL0BM002.XNXCD bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(6); /* customer number not found*/
        return;
      end
    end
    ;
    if (KUCREC.KUCGRPID == 0)
      converseLib.validationFailed(267); /* customer has no valid group id*/
      set KL0BM002.CL0BMGFL cursor, bold;
      KL0BM002.XXXERRID = "CL0BSBC";
      CLXREC.CLXERRF = "Y";
      return;
    end
    ;
    KUCREC.KUCCOID = KUCREC.KUCGRPID;
    KL0B911(); /* fetch unique form kucrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL0BM002.KUCCOID cursor, bold;
        set KL0BM002.KUMSTRID bold;
        set KL0BM002.XNXCD bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(288); /* grp cmpny id for cust not valid*/
        return;
      end
    end
    ;
     /* look up name and address*/
    ;
    set KULREC empty;
    KL0BM002.KUCCONM = KUCREC.KUCCONM;
    KULREC.KULAAID = KUCREC.KUCCOAID;
    KULREC.KUCCOID = KUCREC.KUCCOID;
    KL0B916(); /* fetch unique from kulrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    KL0BM002.KUCCOID = 0;
    KL0BM002.KUMSTRID = 0;
    KL0BM002.XNXCD = 0;
    KL0BM002.CL0BMGFL = " ";
    KL0BM002.KUCGRPID = KUCREC.KUCCOID;
    KL0BM002.XXXADDR1 = KULREC.XXX-ADDR1;
    KL0BM002.XXXADDR2 = KULREC.XXX-ADDR2;
    KL0BM002.XXXADDR3 = KULREC.XXX-ADDR3;
    KL0BM002.XXXCITY = KULREC.XXXCITY;
    KL0BM002.XSTCD = KULREC.XSTCD;
    KL0BM002.XXXZIP = KULREC.XXXZIP;
    return;
  end
  ;
     /* #############################################*/
      /* look up with customer or group company as key*/
     /* #############################################*/
  ;
  ;
    /* look up keys for name and address*/
  ;
  set KUCREC empty;
  if (KL0BM002.KUCCOID != 0)
    KUCREC.KUCCOID = KL0BM002.KUCCOID;
  end
  if (KL0BM002.KUCGRPID != 0)
    KUCREC.KUCCOID = KL0BM002.KUCGRPID;
  end
  ;
  KL0B911(); /* fetch unique from kucrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (KL0BM002.KUCCOID != 0)
        set KL0BM002.KUCCOID cursor, bold;
        set KL0BM002.KUMSTRID bold;
        set KL0BM002.XNXCD bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(6); /* customer number is not valid*/
        return;
      else
        if (KL0BM002.KUCGRPID != 0)
          set KL0BM002.KUCGRPID cursor, bold;
          KL0BM002.XXXERRID = "CL0BSBC";
          CLXREC.CLXERRF = "Y";
          converseLib.validationFailed(255); /* group company is not valid*/
          return;
        end
      end
    end
  end
  ;
   /* look up name and address*/
  ;
  set KULREC empty;
  KL0BM002.KUCCONM = KUCREC.KUCCONM;
  KULREC.KULAAID = KUCREC.KUCCOAID;
  KULREC.KUCCOID = KUCREC.KUCCOID;
  KL0B916(); /* fetch unique from kulrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  KL0BM002.XXXADDR1 = KULREC.XXX-ADDR1;
  KL0BM002.XXXADDR2 = KULREC.XXX-ADDR2;
  KL0BM002.XXXADDR3 = KULREC.XXX-ADDR3;
  KL0BM002.XXXCITY = KULREC.XXXCITY;
  KL0BM002.XSTCD = KULREC.XSTCD;
  KL0BM002.XXXZIP = KULREC.XXXZIP;
  ;
  ;
end // end KL0BSBC

// get today's date
Function KL0BSBD()
   /* *****************************************/
    /* get todays date*/
  ;
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBD";
  TA1REC.TA1LOCAT[1] = "CL0BSBD";
  ;
  set TA2REC empty;
  CLXREC.CLXVALDT = "Y"; /* init valid date*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (TA2REC.TA2RTNCD != 0)
    CLXREC.CLXVALDT = "N"; /* set valid date flag to no*/
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  end
end // end KL0BSBD

// edit dates
Function KL0BSBE()
   /* *****************************************/
    /* edit dates*/
  ;
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBE";
  TA1REC.TA1LOCAT[1] = "CL0BSBE";
  CLXREC.CLXVALDT = "Y"; /* init valid date flag*/
  CL0BW01.CL0BWDT1 = "N";
  CL0BW01.CL0BWDT2 = "N";
  CL0BW01.CL0BWDT3 = "N";
  CL0BW01.CL0BWDT4 = "N";
  ;
     /* #########################*/
     /* validate individual dates*/
     /* #########################*/
  ;
  ;
   /* validate high status date*/
  ;
  if (CLWREC.CLWSTTHI == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSTTHI;
    KL0BSBF(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid date*/
      CL0BW01.CL0BWDT1 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
   /* validate low status date*/
  ;
  if (CLWREC.CLWSTTLO == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSTTLO;
    KL0BSBF(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid date*/
      CL0BW01.CL0BWDT2 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
   /* validate high set up date*/
  ;
  if (CLWREC.CLWSETHI == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSETHI;
    KL0BSBF(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid date*/
      CL0BW01.CL0BWDT3 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
   /* validate low set up date*/
  ;
  if (CLWREC.CLWSETLO == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSETLO;
    KL0BSBF(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid date*/
      CL0BW01.CL0BWDT4 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
   /* if hi date was entered lo date should have been*/
  ;
  if (CLWREC.CLWSTTHI != 0
   && CLWREC.CLWSTTLO == 0)
    converseLib.validationFailed(252); /* invalid date range*/
    CL0BW01.CL0BWDT2 = "Y";
    CLXREC.CLXERRF = "Y";
    CLXREC.CLXVALDT = "N"; /* not a valid date*/
  end
  ;
  ;
  if (CLWREC.CLWSTTHI != 0
   && CLWREC.CLWSTTLO == 0)
    converseLib.validationFailed(252); /* invalid date range*/
    CL0BW01.CL0BWDT2 = "Y";
    CLXREC.CLXERRF = "Y";
    CLXREC.CLXVALDT = "N"; /* not a valid date*/
  end
  ;
   /* if any non valid dates, don't check ranges*/
  ;
  if (CLXREC.CLXVALDT == "N")
    return;
  end
  ;
  ;
     /* one date, or a range of dates may have been selected.*/
     /* change format of date for db2 access from mmddyy to*/
     /* 0ccyymmdd.*/
  ;
  if (CLWREC.CLWSETLO == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSETLO;
    KL0BSBF(); /* change format of date*/
    if (TA2REC.TA2RTNCD == 0)
      CLWREC.CLWSETLO = TA2REC.TA2GRGGN;
    end
  end
  ;
  if (CLWREC.CLWSETHI == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSETHI;
    KL0BSBF(); /* change format of date*/
    if (TA2REC.TA2RTNCD == 0)
      CLWREC.CLWSETHI = TA2REC.TA2GRGGN;
    end
  end
  ;
  ;
  if (CLWREC.CLWSTTLO == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSTTLO;
    KL0BSBF(); /* change format of date*/
    if (TA2REC.TA2RTNCD == 0)
      CLWREC.CLWSTTLO = TA2REC.TA2GRGGN;
    end
  end
  ;
  if (CLWREC.CLWSTTHI == 0)
     /* next sentence*/
  else
    CLXREC.XXXWDTE = CLWREC.CLWSTTHI;
    KL0BSBF(); /* change format of date*/
    if (TA2REC.TA2RTNCD == 0)
      CLWREC.CLWSTTHI = TA2REC.TA2GRGGN;
    end
  end
  ;
    /* ##################################################*/
    /* validate that dates are less than the current date*/
    /* ##################################################*/
  ;
  KL0BSBD(); /* get todays date*/
  ;
  ;
  if (CLWREC.CLWSTTHI == 0)
     /* next sentence*/
  else
    if (CLWREC.CLWSTTHI > TA2REC.TA2GRGGN)
      converseLib.validationFailed(254); /* date is greater than current date*/
      CL0BW01.CL0BWDT1 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
  ;
  if (CLWREC.CLWSTTLO == 0)
     /* next sentence*/
  else
    if (CLWREC.CLWSTTLO > TA2REC.TA2GRGGN)
      converseLib.validationFailed(254); /* date is greater than current date*/
      CL0BW01.CL0BWDT2 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
  ;
  if (CLWREC.CLWSETHI == 0)
     /* next sentence*/
  else
    if (CLWREC.CLWSETHI > TA2REC.TA2GRGGN)
      converseLib.validationFailed(254); /* date is greater than current date*/
      CL0BW01.CL0BWDT3 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
  ;
  if (CLWREC.CLWSETLO == 0)
     /* next sentence*/
  else
    if (CLWREC.CLWSETLO > TA2REC.TA2GRGGN)
      converseLib.validationFailed(254); /* date is greater than current date*/
      CL0BW01.CL0BWDT4 = "Y";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXVALDT = "N"; /* not a valid date*/
    end
  end
  ;
   /* if any non valid dates, don't check ranges*/
  ;
  if (CLXREC.CLXVALDT == "N")
    return;
  end
  ;
     /* ###################*/
     /* validate date range*/
     /* ###################*/
  ;
  if (CLWREC.CLWSTTLO != 0
   && CLWREC.CLWSTTHI != 0)
    if (CLWREC.CLWSTTHI < CLWREC.CLWSTTLO)
      converseLib.validationFailed(252); /* invalid date range*/
      CLXREC.CLXERRF = "Y";
      CL0BW01.CL0BWDT1 = "Y";
      CL0BW01.CL0BWDT2 = "Y";
    else
      if (CL0BW01.CL0BWBCH == "Y") /* if doing batch processing*/
         /* next sentence - can have any date range*/
      else
        set TA2REC empty;
        TA2REC.TA2DBDFN = CLWREC.CLWSTTLO;
        TA2REC.TA2DBDTN = CLWREC.CLWSTTHI;
        ;
        KL0BSBG(); /* validate date range lt 90 days*/
        ;
        if (TA2REC.TA2RTNCD == 0
         && TA2REC.TA2DBDDN > 90)
          converseLib.validationFailed(253); /* diff between dates > 90 days*/
          CLXREC.CLXERRF = "Y";
          CL0BW01.CL0BWDT1 = "Y";
          CL0BW01.CL0BWDT2 = "Y";
        end
      end
    end
  end
  ;
  ;
  ;
  if (CLWREC.CLWSETLO != 0
   && CLWREC.CLWSETHI != 0)
    if (CLWREC.CLWSETHI < CLWREC.CLWSETLO)
      converseLib.validationFailed(252); /* invalid date range*/
      CLXREC.CLXERRF = "Y";
      CL0BW01.CL0BWDT3 = "Y";
      CL0BW01.CL0BWDT4 = "Y";
    else
      if (CL0BW01.CL0BWBCH == "Y") /* if doing batch processing*/
         /* next sentence - can have any date range*/
      else
        set TA2REC empty;
        TA2REC.TA2DBDFN = CLWREC.CLWSETLO;
        TA2REC.TA2DBDTN = CLWREC.CLWSETHI;
        ;
        KL0BSBG(); /* validate date range < 90 days*/
        ;
        if (TA2REC.TA2RTNCD == 0
         && TA2REC.TA2DBDDN > 90)
          converseLib.validationFailed(253); /* diff between dates > 90 days*/
          CLXREC.CLXERRF = "Y";
          CL0BW01.CL0BWDT3 = "Y";
          CL0BW01.CL0BWDT4 = "Y";
        end
      end
    end
  end
end // end KL0BSBE

// validate date with ta0040
Function KL0BSBF()
   /* *****************************************/
    /* validate dates with ta0040*/
  ;
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBF";
  TA1REC.TA1LOCAT[1] = "CL0BSBF";
  ;
  set TA2REC empty;
  TA2REC.TA2GRGAN = CLXREC.XXXWDTE;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = 0;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* validate date*/
end // end KL0BSBF

// validate date range w/ ta0040
Function KL0BSBG()
   /* ************************************************************/
   /* validate date range with ta0040*/
   /* ************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta2rec empty.*/
   /* 01-23-92  bcourt  remove above change - the record*/
   /* is set empty in the calling sgrp KL0BSBE.*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSBG";
  TA1REC.TA1LOCAT[1] = "CL0BSBG";
  ;
  ;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DYAOD = 0;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* validate date*/
  ;
end // end KL0BSBG

// set parms for 'batch only'inqy
Function KL0BSBO()
    /* **********************************************************/
    /* ** sgrp created 3-8-88                                 ***/
    /* ** 07-27-90  bcourt change io1000 to pass work recd*/
                        /* for 'SM' access*/
    /* *  10-12-90  bcourt change xrocd from 2 to 4 chars.*/
    /* **********************************************************/
  ;
   /* GET AV0G030*/
   /* -------------- prepare data for  DCORP.VPARM101----------*/
     /* used in batch cl1371 for overnight 'batch only' rpts*/
   /* ------------------------------------------------------------*/
  ;
  CLXREC.CLXCPROC = "CL0BSBO";
  TA1REC.TA1LOCAT[1] = "CL0BSBO";
  ;
  set CL0BW94 empty; /* CLEAR WORKING STORAGE AREA FOR OUTPUT*/
                                   /* RECORDS*/
  ;
  ;
     /* move claim data to cl0bw94 fields*/
  ;
  CL0BW94.KUCCOID = CLWREC.KUCCOID;
  CL0BW94.KUMSTRID = CLWREC.KUMSTRID;
  CL0BW94.XNXCD = CLWREC.XNXCD;
  CL0BW94.KUCGRPID = CLWREC.KUCGRPID;
  CL0BW94.SM1AGYID = CLWREC.SM1AGYID;
  CL0BW94.SM4REPID = CLWREC.SM4REPID;
  CL0BW94.XGPCD = CLWREC.XGPCD;
  CL0BW94.YCSCD = CLWREC.YCSCD;
  CL0BW94.YCTCD = CLWREC.YCTCD;
  CL0BW94.YCRCD = CLWREC.YCRCD;
  CL0BW94.XSOCD = CLWREC.XSOCD;
  CL0BW94.XWHCD = CLWREC.XWHCD;
  CL0BW94.XOBCD = CLWREC.XOBCD; /* 4/89 chg xot to xob*/
  CL0BW94.XDVCD = CLWREC.XDVCD; /* 4/89 add division*/
  CL0BW94.YPSCD = CLWREC.YPSCD;
  ;
  if (CLWREC.XWHCD != " ") /* only for whse reqst*/
    CL0BW94.CLASHPFF = CLAREC.CLASHPFF;
    CL0BW94.CLARTNFF = CLAREC.CLARTNFF;
  else
    CL0BW94.CLASHPFF = " "; /* don't have clarec*/
    CL0BW94.CLARTNFF = " ";
  end
  ;
  CL0BW94.CLWSETLO = CLWREC.CLWSETLO; /* set-up date range*/
  CL0BW94.CLWSETHI = CLWREC.CLWSETHI;
  CL0BW94.CL0BWVL1 = CLWREC.CLWESTLO; /* clm value range*/
  CL0BW94.CL0BWVL2 = CLWREC.CLWESTHI;
  CL0BW94.CLWSTTLO = CLWREC.CLWSTTLO; /* clm status date range*/
  CL0BW94.CLWSTTHI = CLWREC.CLWSTTHI;
  CL0BW94.ARCCHKNB = CLWREC.ARCCHKNB; /* need to split cust chk #*/
  CL0BW94.CL0BWCK1 = CL0BW94.CL0BWCKA;
  CL0BW94.CL0BWCK2 = CL0BW94.CL0BWCKB;
  CL0BW94.ARCCCREF = CLWREC.ARCCCREF; /* need to split cust clm ref*/
  CL0BW94.CL0BWCC1 = CL0BW94.CL0BWCCA;
  CL0BW94.CL0BWCC2 = CL0BW94.CL0BWCCB;
  CL0BW94.CL0BWCC3 = CL0BW94.CL0BWCCC;
  CL0BW94.CL0BWCC4 = CL0BW94.CL0BWCCD;
  CL0BW94.OP1CUPO = CLWREC.OP1CUPO; /* need to split p.o. #*/
  CL0BW94.CL0BWPO1 = CL0BW94.CL0BWPOA;
  CL0BW94.CL0BWPO2 = CL0BW94.CL0BWPOB;
  CL0BW94.CL0BWPO3 = CL0BW94.CL0BWPOC;
  CL0BW94.CL0BWPO4 = CL0BW94.CL0BWPOD;
  CL0BW94.CL0BWPO5 = CL0BW94.CL0BWPOE;
  ;
  CL0BW94.CL0BWUID = CL0BW98.CL0BWUID; /* user i.d.*/
  ;
  ;
     /* build record key fields*/
  ;
  if (CLWREC.KUCGRPID != 0) /* rpt 1380 for grp cmpny id*/
    CL0BW94.XZZQRYID = "CL1380";
  else
    CL0BW94.XZZQRYID = "CL1390"; /* rpt 1390 for whse or sls ofc*/
  end
  ;
   /* query request nbr created below*/
  ;
   /* 10-12-90*/
  if (CL0BW98.CL0BMRMT == " ") /* only for testing, see cl0bsz1*/
    CL0BW98.XROCD = "0099"; /* cl1381/91 rpt dissemintr to laser*/
  end
  CL0BW94.XROCD = CL0BW98.XROCD; /* remote printer code*/
  ;
   /* query line nbr created below*/
  ;
   /* --------Y2K OUT-------------*/
   /* MOVE EZEDTE TO CL0BW94.CL0BWSDT; /* creation date*/
   /* CL0BW94.CL0BWSDT = CL0BW94.CL0BWSDT + 19000000;/* add century*/
   /* --------Y2K OUT-------------*/
   /* --------Y2K IN--------------*/
  CL0BW94.CL0BWSDT = VGVar.currentGregorianDate; /* creation date*/
   /* --------Y2K IN--------------*/
  CL0BW94.ZZZSDT = CL0BW94.CL0BWSDT; /* convert to binary*/
  ;
  CL0BW94.CL0BWETM = VGVar.currentFormattedTime; /* creation time*/
  CL0BW94.CL0BWHH = CL0BW94.CL0BWEHH;
  CL0BW94.CL0BWMM = CL0BW94.CL0BWEMM;
  CL0BW94.ZZZSTM = CL0BW94.CL0BWTM; /* convert to binary*/
  ;
  ;
     /* get last request nbr written to dcorp.vparm001,Xzzrec*/
  ;
  set XZZREC empty;
  ;
  XZZREC.XZZQRYID = CL0BW94.XZZQRYID;
  CL0BW04.CL0BW4SQ = "SM"; /* select max = sql function*/
  CL0BW04.CL0BW4ID = 0; /* init io-indicator*/
  ;
  call "IO1000" (CL0BW04, SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get max request # in use*/
  ;
   /* IF SQLCA.SQLCODE = -305        ; old code*/
  if (CL0BW04.CL0BW4ID < 0) /* 7-27-90 new code*/
    CL0BW94.XZZQRYRN = 1; /* if empty table,start at # 1*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1LOCAT[3] = "CL0BSBO";
      TA1REC.TA1LOCAT[4] = "IO1000";
      TA1REC.TA1TBLKE = XZZREC.XZZQRYID;
      XPCL010(); /* abend*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0BW94.XZZQRYRN = 1; /* if not found,start at 1*/
      else
        CL0BW94.XZZQRYRN = XZZREC.XZZQRYRN + 1; /* incre last # by 1*/
      end
    end
  end
  ;
  ;
     /* establish nbr of copies of request,*/
     /* then write set of parms for each copy requested*/
  ;
  if (KL0BM004.CL0BMCPY != 0)
    /* next sentence*/
  else
    KL0BM004.CL0BMCPY = 1;
  end
  ;
  CL0BW00.CL0BMCPY = KL0BM004.CL0BMCPY;
  ;
  while (CL0BW00.CL0BMCPY != 0)
    KL0BSBP(); /* write 4 parms to dcorp.vparm101*/
    CL0BW94.XZZQRYRN = CL0BW94.XZZQRYRN + 1; /* incre request nbr*/
    CL0BW00.CL0BMCPY = CL0BW00.CL0BMCPY - 1; /* decre nbr copies*/
  end
  ;
  ;
     /* report back to user*/
  ;
  converseLib.validationFailed(272); /* job was submitted*/
  CLXREC.CLXERRF = "Y"; /* force message*/
  CL0BW98.CL0BMSEL[2] = "*"; /* show function complete*/
  CL0BW00.CL0BMCPY = KL0BM004.CL0BMCPY; /* cl0b400 tests map = w00.cpy*/
  ;
  ;
end // end KL0BSBO

// write 4 parms to xzzrec
Function KL0BSBP()
    /* ******************************/
    /* **   sgrp created 3-8-88   ***/
    /* ******************************/
  ;
   /* ---------------- WRITE 4 RECORDS TO DCORP.VPARM101----------*/
               /* RECORDS USED FOR NIGHTLY BATCH job cl1371*/
   /* ------------------------------------------------------------*/
  ;
  CLXREC.CLXCPROC = "CL0BSBP";
  TA1REC.TA1LOCAT[1] = "CL0BSBP";
  ;
  ;
     /* first parameter*/
  ;
  CL0BW94.XZZQRYLN = 1;
  XZZREC.XZZRGRP = CL0BW94.CL0BWRT1;
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == -803)
      /* DO NOTHING*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1LOCAT[3] = "CL0BSBO";
      TA1REC.TA1LOCAT[4] = "IO1000-1";
      XPCL010();
    end
  end
  ;
  ;
     /* second parameter*/
  ;
  XZZREC.XZZRGRP = CL0BW94.CL0BWRT2;
  CL0BW94.XZZQRYLN = 2;
  XZZREC.XZZKEYGP = CL0BW94.XZZKEYGP;
  XZZREC.ZZZSDT = CL0BW94.ZZZSDT;
  XZZREC.ZZZSTM = CL0BW94.ZZZSTM;
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == -803)
      /* DO NOTHING*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1LOCAT[3] = "CL0BSBO";
      TA1REC.TA1LOCAT[4] = "IO1000-2";
      XPCL010();
    end
  end
  ;
  ;
     /* third parameter*/
  ;
  XZZREC.XZZRGRP = CL0BW94.CL0BWRT3;
  CL0BW94.XZZQRYLN = 3;
  XZZREC.XZZKEYGP = CL0BW94.XZZKEYGP;
  XZZREC.ZZZSDT = CL0BW94.ZZZSDT;
  XZZREC.ZZZSTM = CL0BW94.ZZZSTM;
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == -803)
      /* DO NOTHING*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1LOCAT[3] = "CL0BSBO";
      TA1REC.TA1LOCAT[4] = "IO1000-3";
      XPCL010();
    end
  end
  ;
  ;
     /* fourth parameter*/
  ;
  XZZREC.XZZRGRP = CL0BW94.CL0BWRT4;
  CL0BW94.XZZQRYLN = 4;
  XZZREC.XZZKEYGP = CL0BW94.XZZKEYGP;
  XZZREC.ZZZSDT = CL0BW94.ZZZSDT;
  XZZREC.ZZZSTM = CL0BW94.ZZZSTM;
  ;
  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == -803)
      /* DO NOTHING*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1LOCAT[3] = "CL0BSBO";
      TA1REC.TA1LOCAT[4] = "IO1000-4";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0BSBP

// select set from clarec
Function KL0BSCA()
   /* ******************************************************/
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find claims for a given customer  ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSCA";
  TA1REC.TA1LOCAT[1] = "CL0BSCA";
  ;
     /* blank records*/
  ;
  set SQLCA empty;
  set CLAREC empty;
  set CL0BW02 empty;
  ;
     /* set select set option, and sort option*/
  ;
  CL0BW02.CL0BWSSS = "SS";
  KL0BSCB(); /* set up order by clause*/
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values if no specific value is to be*/
     /* checked for*/
  ;
  KL0BSCC(); /* set up where clause*/
  ;
  ;
  KL0B913(); /* select set from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  ;
  CL0BW02.CL0BWSSS = "SN";
  KL0B914(); /* fetch next from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL0BW01.CL0BWBCH == "Y")
        if (KL0BM003.YPSCD == " ")
          return;
        else
          while (SQLCA.VAGen_SQLCODE == 0)
            ;
            set CLEREC empty;
            ;
            CLEREC.CLACLMNB = CLAREC.CLACLMNB;
            KL0B928(); /* select unique on clerec*/
            if (CLXREC.CLXERRF == "Y")
              return;
            end
            ;
            if (CLEREC.YPSCD == KL0BM003.YPSCD)
              return;
            else
              /* next sentence*/
            end
            ;
            KL0B914(); /* fetch next from clarec*/
            if (CLXREC.CLXERRF == "Y")
              return;
            end
          end
          if (SQLCA.VAGen_SQLCODE == 100)
            converseLib.validationFailed(9); /* no records exist*/
            CLXREC.CLXERRF = "Y";
            return;
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(9); /* no records exist*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end
  ;
   /* if processing batch request, only needed to find 1 record,*/
   /* to decide the batch report wouldn't turn out empty*/
  ;
  ;
    /* select at most 200 claim numbers to be passed*/
    /* onto list screen (cl0c)*/
  ;
  ;
  CLXREC.CLXARAYX = 1;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXARAYX <= 200)
    ;
    set CLEREC empty;
    ;
    CLEREC.CLACLMNB = CLAREC.CLACLMNB;
    KL0B928(); /* select unique on clerec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    ;
    if (KL0BM003.YPSCD != " ")
      if (CLEREC.YPSCD == KL0BM003.YPSCD)
        CLWREC.CLWCLMNB[CLXARAYX] = CLEREC.CLACLMNB;
        CLWREC.CLWSELCD[CLXARAYX] = " ";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      else
        /* next sentence*/
      end
    else
      CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
      CLWREC.CLWSELCD[CLXARAYX] = " ";
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
    ;
    KL0B914(); /* fetch next from clarec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  CL0BW02.CL0BWSSS = "CS";
  KL0B915(); /* close cursor for clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  CLWREC.CLWMXIDX = CLXREC.CLXARAYX - 1;
  if (CLWREC.CLWMXIDX <= 0)
    converseLib.validationFailed(9); /* no records exist*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  if (CLXREC.CLXARAYX >= 200)
    CLWREC.CLWEZMNO = 265; /* more than 200 records exist*/
  end
end // end KL0BSCA

// set up order by clause
Function KL0BSCB()
   /* ******************************************************/
     /* ***   this statement group will set up order by     ****/
     /* *** clause                                          ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSCB";
  TA1REC.TA1LOCAT[1] = "CL0BSCB";
  ;
     /* set select set option, and sort option*/
  ;
  CL0BW01.CL0BWCT1 = 1;
  ;
   /* always sort on gpc,claim type and set up date*/
  ;
  CL0BW02.CL0BWSIN[CL0BWCT1] = 5; /* g. p. c.*/
  CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
  CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  ;
  CL0BW02.CL0BWSIN[CL0BWCT1] = 9; /* claim type*/
  CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
  CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  ;
  if (CLWREC.CLWSETLO != 0)
    CL0BW02.CL0BWSIN[CL0BWCT1] = 17; /* set up date*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.CLWSTTLO != 0)
    CL0BW02.CL0BWSIN[CL0BWCT1] = 15; /* clm status chng dt*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.YCSCD != " ")
    CL0BW02.CL0BWSIN[CL0BWCT1] = 11; /* claim status*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.YCRCD != " ")
    CL0BW02.CL0BWSIN[CL0BWCT1] = 18; /* claim reason*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.OP1CUPO != " ")
    CL0BW02.CL0BWSIN[CL0BWCT1] = 6; /* cust p.o.*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.CLWESTLO != 0)
    CL0BW02.CL0BWSIN[CL0BWCT1] = 26; /* est clm value low*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
    CL0BW01.CL0BWCT1 = CL0BW01.CL0BWCT1 + 1;
  end
  ;
  if (CLWREC.SM1AGYID != " ")
    CL0BW02.CL0BWSIN[CL0BWCT1] = 7; /* sales agency*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
  end
  ;
  ;
   /* 4/89 change XOTcd to XOBcd*/
  if (CLWREC.XOBCD != " ")
    CL0BW02.CL0BWSIN[CL0BWCT1] = 42; /* base order type*/
    CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
  end
  ;
   /* always have claim number as last field to be sorted on*/
  ;
  CL0BW02.CL0BWSIN[CL0BWCT1] = 1;
  CL0BW02.CL0BWSAD[CL0BWCT1] = "A";
end // end KL0BSCB

// set up where clause
Function KL0BSCC()
   /* ******************************************************/
   /* ***   this statement group will set up keys for a   ****/
   /* ** select set to find claim numbers for a given customer ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSCC";
  TA1REC.TA1LOCAT[1] = "CL0BSCC";
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values if no specific value is to be*/
     /* checked for*/
  ;
  if (CLWREC.KUCGRPID != 0) /* move in customer group id*/
    CLAREC.KUCCOID = CLWREC.KUCGRPID;
    CLAREC.KUMSTRID = -1;
    CLAREC.XNXCD = -1;
  else /* move in customer number*/
    ;
    if (CLWREC.KUCCOID == 0)
      CLAREC.KUCCOID = -1;
    else
      CLAREC.KUCCOID = CLWREC.KUCCOID;
    end
    ;
    if (CLWREC.KUMSTRID == 0)
      CLAREC.KUMSTRID = -1;
    else
      CLAREC.KUMSTRID = CLWREC.KUMSTRID;
    end
    ;
    if (CLWREC.XNXCD == 0)
      CLAREC.XNXCD = -1;
    else
      CLAREC.XNXCD = CLWREC.XNXCD;
    end
  end
  ;
  ;
  ;
  if (CLWREC.XWHCD == " ")
    CLAREC.XWHCD = "**";
  else
    CLAREC.XWHCD = CLWREC.XWHCD;
  end
  ;
  if (CLWREC.XSOCD == " ")
    CLAREC.XSOCD = "**";
  else
    CLAREC.XSOCD = CLWREC.XSOCD;
  end
  ;
  if (CLWREC.XGPCD == "  ")
    CLAREC.XGPCD = "**";
  else
    CLAREC.XGPCD = CLWREC.XGPCD;
  end
  ;
  if (CLWREC.YCTCD == " ")
    CLAREC.YCTCD = "***";
  else
    CLAREC.YCTCD = CLWREC.YCTCD;
  end
  ;
  if (CLWREC.YCRCD == " ")
    CLAREC.YCRCD = "***";
  else
    CLAREC.YCRCD = CLWREC.YCRCD;
  end
  ;
  if (CLWREC.OP1CUPO == " ")
    CLAREC.OP1CUPO = "*";
  else
    CLAREC.OP1CUPO = CLWREC.OP1CUPO;
  end
  ;
  if (CLWREC.YCSCD == " ")
    CLAREC.YCSCD1 = "***";
  else
    CLAREC.YCSCD1 = CLWREC.YCSCD;
  end
  ;
  if (CLWREC.SM1AGYID == " ")
    CLAREC.SM1AGYID = "****";
  else
    CLAREC.SM1AGYID = CLWREC.SM1AGYID;
  end
  ;
  if (CLWREC.SM4REPID == 0)
    CLAREC.SM4REPID = -1;
  else
    CLAREC.SM4REPID = CLWREC.SM4REPID;
  end
  ;
    /* below added 6-27-88*/
    /* change xotcd to xobcd 4/89*/
  if (CLWREC.XOBCD == " ") /* base order type*/
    CLAREC.XOBCD = "**";
  else
    CLAREC.XOBCD = CLWREC.XOBCD;
  end
    /* above added 6-27-88*/
  ;
   /* 4/89 add division*/
  if (CLWREC.XDVCD == " ")
    CLAREC.XDVCD = "**";
  else
    CLAREC.XDVCD = CLWREC.XDVCD;
  end
  ;
     /* one date, or a range of dates may have been selected.*/
     /* if one, pass same date in both.  If not selected, pass*/
     /* both as -1.*/
  ;
  if (CLWREC.CLWSETLO == 0)
    CLAREC.CLASETDT = -1;
  else
    CLAREC.CLASETDT = CLWREC.CLWSETLO;
    ;
     /* move in high value*/
    ;
    if (CLWREC.CLWSETHI == 0)
      CL0BW02.CLWSETHI = CLWREC.CLWSETLO;
    else
      CL0BW02.CLWSETHI = CLWREC.CLWSETHI;
    end
  end
  ;
  ;
  if (CLWREC.CLWSTTLO == 0)
    CLAREC.CLASTTDT = -1;
  else
    CLAREC.CLASTTDT = CLWREC.CLWSTTLO;
    ;
      /* move in high value*/
    ;
    if (CLWREC.CLWSTTHI == 0)
      CL0BW02.CLWSTTHI = CLWREC.CLWSTTLO;
    else
      CL0BW02.CLWSTTHI = CLWREC.CLWSTTHI;
    end
  end
  ;
     /* one amount, or a range of amounts may have been selected*/
     /* pass same date in both if one amount.  If amount not*/
     /* selected,pass -.01 in clarec field. the user wants to see*/
     /* all credit and debits (neg and pos values).*/
  ;
  if (CLWREC.CLWESTLO == 0
   && CLWREC.CLWESTHI == 0)
    CLAREC.CLAESTVL = -.01;
  else
    CLAREC.CLAESTVL = CLWREC.CLWESTLO;
    CL0BW02.CL0BWEH1 = CLWREC.CLWESTHI;
    CL0BW02.CL0BWEL2 = CLWREC.CLWESTHI * -1;
    CL0BW02.CL0BWEH2 = CLWREC.CLWESTLO * -1;
  end
end // end KL0BSCC

// select set from clarec
Function KL0BSCD()
   /* ******************************************************/
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find claims for a given customer  ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSCD";
  TA1REC.TA1LOCAT[1] = "CL0BSCD";
  ;
     /* blank records*/
  ;
  set SQLCA empty;
  set CLAREC empty;
  set CL0BW02 empty;
  ;
     /* set select set option, and sort option*/
  ;
  CL0BW02.CL0BWSSS = "SS";
  KL0BSCB(); /* set up order by clause*/
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values if no specific value is to be*/
     /* checked for*/
  ;
  KL0BSCC(); /* set up where clause*/
  ;
  ;
  KL0B913(); /* select set from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  ;
  CL0BW02.CL0BWSSS = "SN";
  KL0B914(); /* fetch next from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL0BW01.CL0BWBCH == "Y")
        if (KL0BM002.YPSCD == " ") /* pod/pos status code*/
           /* AND kL0BM002.XOBCD EQ ' '; 4/89 base order type not needed*/
          return;
        else
           /* cl0b913 did not use YPSCD in select,*/
           /* so need to scan set and see if YPSCD matches map*/
          while (SQLCA.VAGen_SQLCODE == 0)
            ;
            set CLEREC empty;
            ;
            CLEREC.CLACLMNB = CLAREC.CLACLMNB;
            KL0B928(); /* select unique on clerec*/
            if (CLXREC.CLXERRF == "Y")
              return;
            end
            ;
            if (CLEREC.YPSCD == KL0BM002.YPSCD)
              return;
            end
            ;
            KL0B914(); /* fetch next from clarec*/
            if (CLXREC.CLXERRF == "Y")
              return;
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(9); /* no records exist*/
        CLXREC.CLXERRF = "Y";
        return;
      end
    end
  end
  ;
   /* if processing batch request, only needed to find 1 record,*/
   /* to decide the batch report wouldn't turn out empty*/
  ;
  ;
    /* select at most 200 claim numbers to be passed*/
    /* onto list screen (cl0c)*/
  ;
  ;
  CLXREC.CLXARAYX = 1;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXARAYX <= 200)
    ;
    set CLEREC empty;
    ;
    CLEREC.CLACLMNB = CLAREC.CLACLMNB;
    KL0B928(); /* select unique on clerec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    ;
    if (KL0BM002.YPSCD != " ")
      if (CLEREC.YPSCD == KL0BM002.YPSCD)
        CLWREC.CLWCLMNB[CLXARAYX] = CLEREC.CLACLMNB;
        CLWREC.CLWSELCD[CLXARAYX] = " ";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      else
        /* next sentence*/
      end
    else
      CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
      CLWREC.CLWSELCD[CLXARAYX] = " ";
      CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    end
    ;
    KL0B914(); /* fetch next from clarec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  CL0BW02.CL0BWSSS = "CS";
  KL0B915(); /* close cursor for clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  CLWREC.CLWMXIDX = CLXREC.CLXARAYX - 1;
  if (CLWREC.CLWMXIDX <= 0)
    converseLib.validationFailed(9); /* no records exist*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  if (CLXREC.CLXARAYX >= 200)
    CLWREC.CLWEZMNO = 265; /* more than 200 records exist*/
  end
end // end KL0BSCD

// select set from clcrec
Function KL0BSDA()
   /* ******************************************************/
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find claims for a given customer  ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSDA";
  TA1REC.TA1LOCAT[1] = "CL0BSDA";
  ;
     /* blank records*/
  ;
  set SQLCA empty;
  set CLAREC empty;
  set CL0BW02 empty;
  ;
     /* set select set option, and sort option*/
  ;
  CL0BW02.CL0BWSSS = "SS";
  KL0BSCB(); /* set up order by clause*/
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values if no specific value is to be*/
     /* checked for*/
  ;
  KL0BSCC(); /* set up where clause*/
  ;
  ;
  KL0B913(); /* select set from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  ;
  CL0BW02.CL0BWSSS = "SN";
  KL0B914(); /* fetch next from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(9); /* no records exist*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
   /* if processing batch request, needed to see if 1*/
   /* record exists so batch report will not turn out empty.*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
    return;
  end
  ;
  ;
    /* select at most 200 claim numbers to be passed*/
    /* onto list screen (cl0c)*/
  ;
  ;
  CLXREC.CLXARAYX = 1;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXARAYX <= 200)
    ;
    /* validate that claim has specified check number*/
    ;
    KL0BSDB(); /* look up claims on clcrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    ;
    KL0B914(); /* fetch next from clarec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  CL0BW02.CL0BWSSS = "CS";
  KL0B915(); /* close cursor for clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  CLWREC.CLWMXIDX = CLXREC.CLXARAYX - 1;
  ;
  if (CLWREC.CLWMXIDX == 0)
    converseLib.validationFailed(9); /* no records exist*/
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (CLWREC.CLWMXIDX >= 200)
      ;
       /* pass message to select screen (cl0c)*/
      ;
      CLWREC.CLWEZMNO = 265; /* more than 200 records exist*/
    end
  end
end // end KL0BSDA

// select set from clcrec
Function KL0BSDB()
   /* ******************************************************/
     /* ***   this statement group will look up claim nbrs  ****/
     /* *** on clcrec to find those that match desired      ****/
     /* *** check number                                    ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSFD";
  TA1REC.TA1LOCAT[1] = "CL0BSFD";
  ;
  set CLCREC empty;
  CLCREC.CLACLMNB = CLAREC.CLACLMNB;
  CLCREC.CLCPMAR = "*";
  ;
  KL0B918(); /* select set from clcrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  KL0B919(); /* fetch next from clcrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  ;
   /* if both customer claim number and check number were entered*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (KL0BM002.ARCCHKNB != " "
     && KL0BM002.ARCCCREF != " ")
      if (CLCREC.ARCCHKNB == KL0BM002.ARCCHKNB
       && CLCREC.ARCCCREF == KL0BM002.ARCCCREF)
        CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
        CLWREC.CLWSELCD[CLXARAYX] = " ";
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
      end
    else
      ;
       /* if only customer check number was entered*/
      ;
      if (KL0BM002.ARCCHKNB != " "
       && KL0BM002.ARCCCREF == " ")
        if (CLCREC.ARCCHKNB == KL0BM002.ARCCHKNB)
          CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
          CLWREC.CLWSELCD[CLXARAYX] = " ";
          CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        end
      else
        ;
         /* if only customer claim number was entered*/
        ;
        if (KL0BM002.ARCCHKNB == " "
         && KL0BM002.ARCCCREF != " ")
          if (CLCREC.ARCCCREF == KL0BM002.ARCCCREF)
            CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
            CLWREC.CLWSELCD[CLXARAYX] = " ";
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        end
      end
    end
    ;
    KL0B919(); /* fetch next from clcrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  KL0B920(); /* close cursor for clcrec*/
end // end KL0BSDB

// select set from clcrec
Function KL0BSDC()
   /* ******************************************************/
     /* ***   this statement group will look up claim nbrs  ****/
     /* *** on clcrec to find those that match desired      ****/
     /* *** customer claim number                           ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSDC";
  TA1REC.TA1LOCAT[1] = "CL0BSDC";
  ;
  set CLCREC empty;
  CLCREC.ARCCCREF = KL0BM002.ARCCCREF;
  ;
  KL0B921(); /* select set from clcrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  KL0B922(); /* fetch next from clcrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(9); /* no records exist*/
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
   /* if processing batch request, only needed to find 1 record,*/
   /* to decide the batch report wouldn't turn out empty*/
  ;
  if (CL0BW01.CL0BWBCH == "Y")
    return;
  end
  ;
  ;
    /* select at most 200 claim numbers to be passed*/
    /* onto list screen (cl0c)*/
  ;
  CLXREC.CLXARAYX = 1;
  while (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXARAYX <= 200)
    ;
     /* if both customer claim number and check number were entered*/
    ;
    if (KL0BM002.ARCCHKNB != " "
     && KL0BM002.ARCCCREF != " ")
      if (CLCREC.ARCCHKNB == KL0BM002.ARCCHKNB
       && CLCREC.ARCCCREF == KL0BM002.ARCCCREF)
        ;
        if (KL0BM002.YPSCD != " ")
          KL0BSDE();
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            KL0BSDD(); /* fetch unique for each claim nbr*/
            /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
          end
          ;
        else
          KL0BSDD(); /* fetch unique for each claim nbr*/
          /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
        end
        ;
        if (CLXREC.CLXERRF == "Y")
          return;
        end
        ;
      end
    else
      ;
       /* if only customer claim number was entered*/
      ;
      if (KL0BM002.ARCCHKNB == " "
       && KL0BM002.ARCCCREF != " ")
        ;
        ;
        if (KL0BM002.YPSCD != " ")
          KL0BSDE();
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            KL0BSDD(); /* fetch unique for each claim nbr*/
            /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
          end
          ;
        else
          KL0BSDD(); /* fetch unique for each claim nbr*/
          /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
        end
        ;
        if (CLXREC.CLXERRF == "Y")
          return;
        end
        ;
      end
    end
    ;
    ;
    KL0B922(); /* fetch next from clcrec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  KL0B923(); /* close cursor for clcrec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  CLWREC.CLWMXIDX = CLXREC.CLXARAYX - 1;
  ;
  if (CLWREC.CLWMXIDX <= 0)
    converseLib.validationFailed(9); /* no records exist*/
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (CLWREC.CLWMXIDX >= 200)
      ;
       /* pass message to select screen (cl0c)*/
      ;
      CLWREC.CLWEZMNO = 265; /* more than 200 records exist*/
    end
  end
  ;
end // end KL0BSDC

// find claims for clcrecs
Function KL0BSDD()
   /* ******************************************************/
     /* ***   this statement group will look up claim nbrs  ****/
     /* *** on clarec to find those that match desired      ****/
     /* *** check number and/or customer claim nbr          ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSDD";
  TA1REC.TA1LOCAT[1] = "CL0BSDD";
  ;
  set CLAREC empty;
  ;
   /* below changed 6-27-88*/
   /* IF kL0BM002.YPSCD NE ' ';*/
   /* MOVE CLEREC.CLACLMNB TO CLAREC.CLACLMNB;6-27-88, from POD/PO*/
   /* ELSE ;*/
  CLAREC.CLACLMNB = CLCREC.CLACLMNB; /* from A/R ref*/
   /* END ;*/
   /* above changed 6-27-88*/
  ;
  KL0B924(); /* select unique from clarec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   && CLXREC.CLXARAYX <= 200)
    ;
     /* if claim matches users criteria, store it*/
    ;
    if (CLAREC.KUCCOID == CLWREC.KUCCOID
     || CLAREC.KUCCOID == CLWREC.KUCGRPID)
       /* next sentence*/
    else
      return; /* doesn't match*/
    end
    ;
    if (CLWREC.KUMSTRID != 0)
      if (CLAREC.KUMSTRID != CLWREC.KUMSTRID)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.XNXCD != 0)
      if (CLAREC.XNXCD != CLWREC.XNXCD)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.XGPCD != " ")
      if (CLAREC.XGPCD != CLWREC.XGPCD)
        return; /* doesn't match*/
      end
    end
    ;
     /* 4/89 add division check*/
    if (CLWREC.XDVCD != " ")
      if (CLAREC.XDVCD != CLWREC.XDVCD)
        return; /* doesn't match*/
      end
    end
    ;
     /* 4/89 add sales office check*/
    if (CLWREC.XSOCD != " ")
      if (CLAREC.XSOCD != CLWREC.XSOCD)
        return; /* doesn't match*/
      end
    end
    ;
     /* 4/89 change XOT to XOB, base order type*/
    if (CLWREC.XOBCD != " ") /* 6-27-88*/
      if (CLAREC.XOBCD != CLWREC.XOBCD) /* 6-27-88*/
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.YCTCD != " ")
      if (CLAREC.YCTCD != CLWREC.YCTCD)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.YCRCD != " ")
      if (CLAREC.YCRCD != CLWREC.YCRCD)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.CLWSETLO > 0)
      if (CLWREC.CLWSETHI == 0)
        if (CLAREC.CLASETDT == CLWREC.CLWSETLO)
           /* next sentence*/
        else
          return; /* doesn't match*/
        end
      else
        if (CLAREC.CLASETDT >= CLWREC.CLWSETLO
         && CLAREC.CLASETDT <= CLWREC.CLWSETHI)
           /* next sentence*/
        else
          return; /* doesn't match*/
        end
      end
    end
    ;
    if (CLWREC.OP1CUPO != " ")
      if (CLAREC.OP1CUPO != CLWREC.OP1CUPO)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.YCSCD != " ")
      if (CLAREC.YCSCD1 != CLWREC.YCSCD)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.CLWSTTLO > 0)
      if (CLWREC.CLWSTTHI == 0)
        if (CLAREC.CLASTTDT == CLWREC.CLWSTTLO)
           /* next sentence*/
        else
          return; /* doesn't match*/
        end
      else
        if (CLAREC.CLASTTDT >= CLWREC.CLWSTTLO
         && CLAREC.CLASTTDT <= CLWREC.CLWSTTHI)
           /* next sentence*/
        else
          return; /* doesn't match*/
        end
      end
    end
    ;
    if (CLWREC.CLWESTLO == 0
     && CLWREC.CLWESTHI == 0)
       /* next sentence*/
    else
      if (CLAREC.CLAESTVL >= 0) /* handle positive values*/
        if (CLAREC.CLAESTVL >= CLWREC.CLWESTLO
         && CLAREC.CLAESTVL <= CLWREC.CLWESTHI)
           /* next sentence*/
        else
          return; /* doesn't match*/
        end
      else
        if (CLAREC.CLAESTVL < 0) /* handle negative values*/
          CL0BW01.CLAESTVL = CLAREC.CLAESTVL * -1;
          if (CL0BW01.CLAESTVL >= CLWREC.CLWESTLO
           && CL0BW01.CLAESTVL <= CLWREC.CLWESTHI)
             /* next sentence*/
          else
            return; /* doesn't match*/
          end
        end
      end
    end
    ;
    ;
    if (CLWREC.SM1AGYID != " ")
      if (CLAREC.SM1AGYID != CLWREC.SM1AGYID)
        return; /* doesn't match*/
      end
    end
    ;
    if (CLWREC.SM4REPID > 0)
      if (CLAREC.SM4REPID != CLWREC.SM4REPID)
        return; /* doesn't match*/
      end
    end
    CLWREC.CLWCLMNB[CLXARAYX] = CLAREC.CLACLMNB;
    CLWREC.CLWSELCD[CLXARAYX] = " ";
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
    ;
  end
  ;
end // end KL0BSDD

// select set from clcrec
Function KL0BSDE()
   /* ******************************************************/
     /* ***   this statement group will look up claim nbrs  ****/
     /* *** on clerec to find those that match desired      ****/
     /* *** check number                                    ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSDE";
  TA1REC.TA1LOCAT[1] = "CL0BSDE";
  ;
  set CLEREC empty;
  ;
  CLEREC.CLACLMNB = CLCREC.CLACLMNB;
  KL0B928(); /* select unique on clerec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (KL0BM002.YPSCD != " ")
    if (CLEREC.YPSCD == KL0BM002.YPSCD)
      CLWREC.CLWCLMNB[CLXARAYX] = CLEREC.CLACLMNB;
      CLWREC.CLWSELCD[CLXARAYX] = " ";
      /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
    end
    ;
  end
  ;
end // end KL0BSDE

// select unique from clerec
Function KL0BSDF()
   /* ******************************************************/
     /* ***   this statement group will look up claim nbrs  ****/
     /* *** on clerec to find those that match desired      ****/
     /* *** claim number                                    ****/
   /* ******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSDF";
  TA1REC.TA1LOCAT[1] = "CL0BSDF";
  ;
  set CLEREC empty;
  ;
  CLEREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0B928(); /* select unique on clerec*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (KL0BM003.YPSCD != " ")
    if (CLEREC.YPSCD == KL0BM003.YPSCD)
      CLWREC.CLWCLMNB[CLXARAYX] = CLEREC.CLACLMNB;
      CLWREC.CLWSELCD[CLXARAYX] = " ";
    end
    /* CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;*/
    ;
  end
  ;
end // end KL0BSDF

// set alterable fields modified
Function KL0BSEA()
   /* *****************************************/
    /* set alterable fields modified*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSEA";
  TA1REC.TA1LOCAT[1] = "CL0BSEA";
  ;
  ;
  set KL0BM003.XGPCD modified;
  set KL0BM003.YCTCD modified;
  set KL0BM003.YCRCD modified;
  set KL0BM003.CLWSETLO modified;
  set KL0BM003.CLWSETHI modified;
  set KL0BM003.YCSCD modified;
  set KL0BM003.CLWSTTLO modified;
  set KL0BM003.CLWSTTHI modified;
  set KL0BM002.CLWESTLO modified;
  set KL0BM002.CLWESTHI modified;
end // end KL0BSEA

// protect fields on cl0bm003
Function KL0BSEB()
   /* *****************************************/
    /* protect fields*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSEB";
  TA1REC.TA1LOCAT[1] = "CL0BSEB";
  ;
  ;
  if (CLWREC.SM1AGYID != " ") /* sales agency/rep was entered*/
    set KL0BM003.SM1AGYID normal;
    set KL0BM003.SM4REPID normal;
  else
    ;
    if (CLWREC.XSOCD != " ") /* sales office was entered*/
      set KL0BM003.XSOCD normal;
      KL0BM003.CL0BMBCH = "Y";
      set KL0BM003.CL0BMBCH protect;
    else
      ;
      if (CLWREC.XWHCD != " ") /* warehouse was entered*/
        set KL0BM003.XWHCD normal;
        set KL0BM003.CL0BMSHP normal;
        set KL0BM003.CL0BMRTN normal;
        KL0BM003.CL0BMBCH = "Y";
        set KL0BM003.CL0BMBCH protect;
      end
    end
  end
end // end KL0BSEB

// edit sls ofc, whs, agency/rep
Function KL0BSEC()
   /* ****************************************************************/
    /* edit sls ofc, whse  or agency/rep combo 3-16-88*/
   /* ****************************************************************/
   /* 04-17-92 bcourt Rename SM5STAT to XXXSTAT.*/
   /* ****************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSEC";
  TA1REC.TA1LOCAT[1] = "CL0BSEC";
  ;
  ;
     /* ########################################*/
      /* edit agency/rep combo*/
     /* ########################################*/
  ;
  if (KL0BM003.SM4REPID != 0
   && KL0BM003.SM1AGYID == " ")
    set KL0BM003.SM4REPID cursor, bold;
    KL0BM003.SM1AGYNM = " ";
    KL0BM003.CL0BMREP = " ";
    KL0BM002.XXXERRID = "CL0BSBC";
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(247); /* rep requires agency*/
    return;
  end
  ;
  if (KL0BM003.SM1AGYID != " ")
    KL0BM003.SM1AGYNM = " ";
    KL0BM003.CL0BMREP = " ";
    ;
    set SM1REC empty;
    SM1REC.SM1AGYID = KL0BM003.SM1AGYID;
    ;
    KL0B917(); /* fetch unique from sm1rec*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL0BM003.SM1AGYID cursor, bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(247); /* agency/rep not found*/
        return;
      else
        KL0BM003.SM1AGYNM = SM1REC.SM1AGYNM;
      end
    end
    ;
    if (KL0BM003.SM4REPID == 0)
      KL0BM003.CL0BMREP = " ";
    else
      ;
      SM5REC.SM1AGYID = KL0BM003.SM1AGYID;
      SM5REC.SM4REPID = KL0BM003.SM4REPID;
      SM4REC.SM4REPID = KL0BM003.SM4REPID;
      SM5REC.XXXSTAT = "*";
      SM5REC.SM5EDT = -1;
      ;
      XSIVSN4();
      ;
      if (SQLCA.VAGen_SQLCODE == 100)
        set KL0BM003.SM1AGYID cursor, bold;
        set KL0BM003.SM4REPID bold;
        KL0BM002.XXXERRID = "CL0BSBC";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(247); /* agency/rep not found*/
        return;
      else
        KL0BM003.CL0BMREP = IVZREC.IVZFNAME;
      end
    end
  end
  ;
  ;
     /* ###################################################*/
      /* edit sales office*/
     /* ###################################################*/
  ;
  if (KL0BM003.XSOCD != " ")
    if (KL0BM003.XSOCD in XSOTBL.XSOCD
     && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0BM003.XSOSNM = XSOTBL.XSOSNM[sysVar.arrayIndex];
    else
      set KL0BM003.XSOCD cursor, bold;
      KL0BM003.XSOSNM = " ";
      KL0BM003.XXXERRID = "CL0BSBC";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(257); /* sales office is not valid*/
      return;
    end
  end
  ;
     /* #############################################*/
      /* edit warehouse*/
     /* #############################################*/
  ;
  if (KL0BM003.XWHCD != " ")
    if (KL0BM003.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0BM003.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      set KL0BM003.XWHCD cursor, bold;
      KL0BM003.XWHABRV = " ";
      KL0BM003.XXXERRID = "CL0BSBC";
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(400); /* warehouse code is not valid*/
      return;
    end
  end
end // end KL0BSEC

// check fastpath entry
Function KL0BSFP()
  ;
     /* map data already moved to commarea catoap & caitem*/
  ;
  ;
  if (COMMAREA.CATOAP == " ")
    if (COMMAREA.CAITEM != " ") /* fastpath request*/
      set KL0BM001.CATOAP cursor, bold;
      set KL0BM002.CATOAP cursor, bold;
      set KL0BM003.CATOAP cursor, bold;
      set KL0BM004.CATOAP cursor, bold;
      converseLib.validationFailed(1); /* ITEM FIELD NOT VALID UNLESS OPTION IS ENTERED*/
      CLXREC.CLXERRF = "Y";
    end
  else
    XPCL006(); /* see if items to be passed are correct length and type*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
    XPCL002(); /* check security/xfer*/
    KL0BM001.XXXMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CATOAP = " ";
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
end // end KL0BSFP

// edit index>200, hold frst/last
Function KL0BSIX()
  ;
  ;
  CLWREC.CLWCLIDX = 1; /* start next map list at array nbr 1*/
  ;
  set CLAREC empty; /* init clarec to empty*/
  CLAREC.CLACLMNB = CLWREC.CLWCLMNB[1]; /* force clarec to 1st array clm*/
   /* next clm appl uses entry process xpcl001 or xpcl011,*/
   /* both will read CLAREC since clarec.claclmnb ne 0*/
   /* and clarec.yctcd eq ' '.*/
  ;
  CLWREC.CLWMXIDX = sysVar.arrayIndex - 1; /* hold last array entry*/
  ;
  if (sysVar.arrayIndex > 200)
     /* show message on next map*/
    CLWREC.CLWEZMNO = 265; /* more than 200 entries*/
  end
  ;
  ;
end // end KL0BSIX

// edit remote printer on xrotbl
Function KL0BSZ1()
   /* *****************************************/
    /* edit printer site id*/
    /* by looking up on xrotbl.*/
  ;
   /* when     by     why*/
   /* 10-12-90 bcourt add cl0bsz7 to convert short xrocd*/
                   /* to new 4 char XROCD:*/
                   /* map = XROPDEST, eg RMT07*/
                   /* CL0BW98 splits this to RMT & 07..*/
                   /* Need to convert 07.. to 0007*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ1";
  TA1REC.TA1LOCAT[1] = "CL0BSZ1";
  ;
  ;
  if (KL0BM004.CL0BMRMT != " ")
    if (KL0BM004.CL0BMRMT in XROTBL.XROPDEST
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* 3-16-88*/
      if (XROTBL.XROCPFL[sysVar.arrayIndex] == "Y")
        CL0BW98.CL0BMRMT = KL0BM004.CL0BMRMT;
        KL0BSZ7(); /* 10-12-90 remove space, insert 0*/
        KL0BM004.CL0BMRMT = CL0BW98.CL0BMRMT;
        CL0BW0B.CL0BWOCL = "P";
        set KL0BM004.CL0BMRMT normal;
        CLXREC.CLXERRF = "N";
      else
        set KL0BM004.CL0BMRMT cursor, bold;
        converseLib.validationFailed(290); /* printer site not used by this appl*/
        CLXREC.CLXERRF = "Y";
      end
    else
      set KL0BM004.CL0BMRMT cursor, bold;
      converseLib.validationFailed(271); /* invalid printer site*/
      CLXREC.CLXERRF = "Y";
    end
  else
    /* MOVE ' ' TO CL0BW98.CL0BMRMT; 3-8-88 keep for testing*/
    /* MOVE 'V' TO CL0BW0B.CL0BWOCL;*/
    set KL0BM004.CL0BMRMT cursor, bold;
    converseLib.validationFailed(287); /* remote printer is required*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  ;
end // end KL0BSZ1

// edit user i.d.
Function KL0BSZ2()
   /* *****************************************/
    /* edit user id*/
    /* by using goal security menu user i.d.s*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ2";
  TA1REC.TA1LOCAT[1] = "CL0BSZ2";
  ;
  ;
  if (KL0BM004.CL0BWUID != " ")
    if (KL0BM004.CL0BWUID != COMMAREA.CAUSERID)
      KL0BZ98();
      if (KL0BM004.VAGen_EZEMSG == " ")
        set KL0BM004.CL0BWUID normal;
        CL0BW98.CL0BWUID = KL0BM004.CL0BWUID;
      else
        set KL0BM004.CL0BWUID cursor, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      CL0BW98.CL0BWUID = KL0BM004.CL0BWUID;
      set KL0BM004.CL0BWUID normal; /* 3-16-88*/
    end
  else
    KL0BM004.CL0BWUID = COMMAREA.CAUSERID;
    if (CLXREC.CLXERRF != "Y")
      CL0BW98.CL0BWUID = KL0BM004.CL0BWUID;
    end
  end
  ;
  ;
  ;
end // end KL0BSZ2

// move passed data to storage
Function KL0BSZ3()
   /* ***********************************************************/
    /* set-up jcl for batch submission using user entered data.*/
    /* jcl is run immediately as class 'p', during the day.*/
    /* more jcl infor is created in cl0b099.*/
   /* ***********************************************************/
   /* -->   see TEST below for correct JOB CLASS  <------------*/
   /* ***********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ3";
  TA1REC.TA1LOCAT[1] = "CL0BSZ3";
  ;
  set CL0BW0A empty; /* variables work area*/
  set CL0BW0C empty; /* variables work area*/
  set CL0BW00 empty; /* variables work area*/
  ;
  ;
   /* run batch during day with production class 'P'*/
  ;
  CL0BW0B.CL0BWJBC = "P"; /* ***************************/
   /* ---------> FOR TESTING ONLY ! ! !<---TEST<---<TEST----  **/
   /* MOVE 'A' TO CL0BW0B.CL0BWJBC;    /* ****this is for testing********/
  ;
  ;
  if (CLWREC.CLWMAPFM == "KL0BM002")
    CL0BW0B.CL0BWEXE = "CL118D";
    CL0BW0B.CL0BWFCD = "CL43";
    CL0BW0B.CL0BWPRC = "F1181IN";
    set CL0BW96 empty; /* parameter work area*/
    CL0BW96.KUCCOID = CLWREC.KUCCOID;
    CL0BW96.KUMSTRID = CLWREC.KUMSTRID;
    CL0BW96.XNXCD = CLWREC.XNXCD;
    CL0BW96.KUCGRPID = CLWREC.KUCGRPID;
    CL0BW96.SM1AGYID = CLWREC.SM1AGYID;
    CL0BW96.SM4REPID = CLWREC.SM4REPID;
    CL0BW96.XGPCD = CLWREC.XGPCD;
    CL0BW96.CLWSETLO = CLWREC.CLWSETLO;
    CL0BW96.CLWSETHI = CLWREC.CLWSETHI;
    CL0BW96.CL0BWTLO = CLWREC.CLWESTLO;
    CL0BW96.CL0BWTHI = CLWREC.CLWESTHI;
    CL0BW96.YCSCD = CLWREC.YCSCD;
    CL0BW96.CLWSTTLO = CLWREC.CLWSTTLO;
    CL0BW96.CLWSTTHI = CLWREC.CLWSTTHI;
    CL0BW96.YCTCD = CLWREC.YCTCD;
    CL0BW96.OP1CUOID = CLWREC.OP1CUOID;
    CL0BW96.OP1NORID = CLWREC.OP1NORID;
    CL0BW96.IV0IVCID = CLWREC.IV0IVCID;
    CL0BW96.ARCCHKNB = CLWREC.ARCCHKNB;
    CL0BW96.YCRCD = CLWREC.YCRCD;
    CL0BW96.ARCREFNB = CLWREC.ARCREFNB;
    CL0BW96.ARCCCREF = CLWREC.ARCCCREF;
    CL0BW96.OP1CUPO = CLWREC.OP1CUPO;
    CL0BW96.XOBCD = CLWREC.XOBCD; /* 4/89 chng xot to xob base o/t*/
    if (CL0BW96.XOBCD in XOBTBL.XOBCD)
      CL0BW96.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
    CL0BW96.XDVCD = CLWREC.XDVCD; /* 4/89 add division*/
    CL0BW96.XDVABRV = KL0BM002.XDVABRV;
    CL0BW96.XSOCD = CLWREC.XSOCD; /* 4/89 add sales office*/
    if (CL0BW96.XSOCD in XSOTBL.XSOCD)
      CL0BW96.XSOABRV = XSOTBL.XSOABRV[sysVar.arrayIndex];
    end
    CL0BW96.YPSCD = CLWREC.YPSCD;
    if (CL0BW96.YPSCD in YPSTBL.YPSCD)
      CL0BW96.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
    end
    ;
    CL0BW00.CL0BWJCL = CL0BW96.CL0BWGR1; /* report parameters*/
    CL0BW0A.CL0BWJCL = CL0BW96.CL0BWGR2; /* report parameters*/
    CL0BW0C.CL0BWJCL = CL0BW96.CL0BWGR3; /* report parameters*/
  end
  if (CLWREC.CLWMAPFM == "KL0BM003")
    CL0BW0B.CL0BWEXE = "CL119D";
    CL0BW0B.CL0BWFCD = "CL44";
    CL0BW0B.CL0BWPRC = "F1191IN";
    set CL0BW97 empty; /* parameter work area*/
    CL0BW97.KUCCOID = CLWREC.KUCCOID;
    CL0BW97.KUMSTRID = CLWREC.KUMSTRID;
    CL0BW97.XNXCD = CLWREC.XNXCD;
    CL0BW97.SM1AGYID = CLWREC.SM1AGYID;
    CL0BW97.SM4REPID = CLWREC.SM4REPID;
    CL0BW97.XSOCD = CLWREC.XSOCD;
    CL0BW97.XWHCD = CLWREC.XWHCD;
    CL0BW97.CLASHPFF = CLAREC.CLASHPFF;
    CL0BW97.CLARTNFF = CLAREC.CLARTNFF;
    CL0BW97.XGPCD = CLWREC.XGPCD;
    CL0BW97.CLWSETLO = CLWREC.CLWSETLO;
    CL0BW97.CLWSETHI = CLWREC.CLWSETHI;
    CL0BW97.YCRCD = CLWREC.YCRCD;
    CL0BW97.CL0BWTLO = CLWREC.CLWESTLO;
    CL0BW97.CL0BWTHI = CLWREC.CLWESTHI;
    CL0BW97.YCSCD = CLWREC.YCSCD;
    CL0BW97.CLWSTTLO = CLWREC.CLWSTTLO;
    CL0BW97.CLWSTTHI = CLWREC.CLWSTTHI;
    CL0BW97.YCTCD = CLWREC.YCTCD;
    CL0BW97.OP1CUPO = CLWREC.OP1CUPO;
    CL0BW97.XOBCD = CLWREC.XOBCD; /* 4/89 chng xot to xob base o/t*/
    if (CL0BW97.XOBCD in XOBTBL.XOBCD)
      CL0BW97.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
    CL0BW97.XDVCD = CLWREC.XDVCD; /* 4/89 add division*/
    CL0BW97.XDVABRV = KL0BM003.XDVABRV;
    CL0BW97.YPSCD = CLWREC.YPSCD;
    if (CL0BW97.YPSCD in YPSTBL.YPSCD)
      CL0BW97.YPSDESC = YPSTBL.YPSDESC[sysVar.arrayIndex];
    end
    ;
    ;
    CL0BW00.CL0BWJCL = CL0BW97.CL0BWGP1; /* report parameters*/
    CL0BW0A.CL0BWJCL = CL0BW97.CL0BWGP2; /* report parameters*/
    CL0BW0C.CL0BWJCL = CL0BW97.CL0BWGP3; /* report parameters*/
  end
  ;
  ;
  if (CLWREC.CLWMAPFM == "KL0BM001"
   || CLWREC.CLWMAPFM == "KL0DM001")
    CL0BW0B.CL0BWEXE = "CL129D";
    CL0BW0B.CL0BWFCD = "CL45";
    CL0BW0B.CL0BWPRC = "F1291IN";
    set CL0BW95 empty; /* parameter work area*/
    CL0BW95.CLWLSTNM = CLWREC.CLWLSTNM;
    ;
    CL0BW00.CL0BWJCL = CL0BW95.CLWLSTNM; /* report parameters*/
  end
  ;
  ;
  if (KL0BM004.CL0BMCPY != 0)
    /* next sentence*/
  else
    KL0BM004.CL0BMCPY = 1;
  end
  ;
  CL0BW00.CL0BMCPY = KL0BM004.CL0BMCPY; /* number of copies*/
  ;
  KL0BSZ4(); /* enque the internal reader*/
  ;
  while (CL0BW98.CL0BWSWS == "N") /* until job is submitted*/
    CL0BW99.CL0BWJCL = KL0BT02.CL0BWJCL[CL0BWIXT]; /* jcl stmt*/
    CL0BW98.CL0BTTYP = KL0BT02.CL0BTTYP[CL0BWIXT]; /* stmt type*/
    ;
    KL0B099(); /* write to internal reader*/
  end
  ;
  KL0BSZ6(); /* deque internal reader*/
  ;
  CL0BW98.CL0BWMNO = 272; /* job was submitted*/
  CLXREC.CLXERRF = "Y";
  CL0BW98.CL0BMSEL[2] = "*"; /* indicate function complete*/
  ;
   /* SET kL0BM004 CLEAR              ;   clear map output area*/
  ;
end // end KL0BSZ3

// enque the internal reader
Function KL0BSZ4()
   /* *****************************************/
    /* enque the internal reader queue for job submission*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ4";
  TA1REC.TA1LOCAT[1] = "CL0BSZ4";
  ;
  set UT2REC empty; /* init subroutine parameters*/
  ;
  UT2REC.UT2FUNCT = "E"; /* subroutine function*/
  UT2REC.UT2RSCLN = 8; /* resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* resource identification*/
  ;
  CL0BW00.CL0BMCPY = KL0BM004.CL0BMCPY; /* number of copies*/
  ;
  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* enque reader*/
  ;
  if (sysVar.errorCode != "00000000" /* call was not successful*/
   || UT2REC.UT2RETCD != 0)          /* or non-zero return code*/
    ;
    converseLib.validationFailed(8); /* indicate not available*/
    ;
    exit stack; /* exit to redisplay map*/
    ;
  end
  ;
  CL0BW98.CL0BWIXT = 1; /* init table index*/
  CL0BW98.CL0BWSWS = "N"; /* init submit switch*/
  ;
end // end KL0BSZ4

// deque the internal reader
Function KL0BSZ6()
   /* *********************************************************/
    /* deque the internal reader queue after job submission*/
   /* *********************************************************/
   /*  */
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* *********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ6";
  TA1REC.TA1LOCAT[1] = "CL0BSZ6";
  ;
  set TA1REC empty;
  set UT2REC empty; /* init subroutine parameters*/
  ;
  UT2REC.UT2FUNCT = "D"; /* subroutine function*/
  UT2REC.UT2RSCLN = 8; /* resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* resource identification*/
  ;
  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* enque reader*/
  ;
  if (sysVar.errorCode != "00000000" /* call was not successful*/
   || UT2REC.UT2RETCD != 0)          /* or non-zero return code*/
    TA1REC.TA1FUNC = "RETN"; /* termination function; jcl stmt*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "CL0BSZ6"; /* process name*/
    TA1REC.TA1LOC = "DEQUE THE SYSTEM INTERNAL READER";
    SQLCA.SQLCAREC = UT2REC.UT2GRPLV; /* error information*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
    converseLib.validationFailed(10); /* ;    indicate system error*/
    ;
    exit stack;
  end
  ;
end // end KL0BSZ6

// convert map XROCD to tbl form
Function KL0BSZ7()
   /* *****************************************/
   /* when     by     why*/
   /* 10-12-90 bcourt add cl0bsz7 to convert short xrocd*/
                   /* to new 4 char XROCD:*/
                   /* map = XROPDEST, eg RMT07*/
                   /* CL0BW98 splits this to RMT & 07..*/
                   /* Need to convert 07.. to 0007*/
   /* *****************************************/
  ;
  CLXREC.CLXCPROC = "CL0BSZ7";
  TA1REC.TA1LOCAT[1] = "CL0BSZ7";
  ;
  sysVar.arrayIndex = 1;
  while (" " in CL0BW98.CL0BWDIG /* XROCD = 4 digits*/
   && sysVar.arrayIndex < 5)
    if (CL0BW98.CL0BWDIG[4] == " ")
      CL0BW98.CL0BWDIG[4] = CL0BW98.CL0BWDIG[3];
      CL0BW98.CL0BWDIG[3] = CL0BW98.CL0BWDIG[2];
      CL0BW98.CL0BWDIG[2] = CL0BW98.CL0BWDIG[1];
      CL0BW98.CL0BWDIG[1] = "0";
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* prevent a loop if ' ' not in dig(4)*/
  end
  ;
  ;
end // end KL0BSZ7

// read user rec for validation
Function KL0BZ98()
  ;
  ;
  set MN1REC empty;
  ;
   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/
  ;
  ;
   /* set up file key for application read*/
  ;
  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = KL0BM004.CL0BWUID; /* do not user user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL   field in key*/
  ;
  ;
  ;
  try
    get MN1REC ;
  end
  ;
  ;
  ;
   /* the following statements check for a file error*/
  ;
  if (MN1REC is noRecordFound) /* not found condition*/
    KL0BM004.VAGen_EZEMSG = "USER DOES NOT EXIST - REENTER";
  else
    if (MN1REC is ioError) /* not found condition*/
      KL0BM004.VAGen_EZEMSG = "ERROR FOUND ON MENU FILE I/O";
    else
      /* MOVE MN2REC.XNDCD TO COMMAREA.XNDCD;*/
      /* MOVE MN2REC.XDVCD TO COMMAREA.XDVCD;*/
      /* MOVE MN2REC.XWHCD TO COMMAREA.XWHCD;*/
      /* MOVE MN2REC.XSOCD TO COMMAREA.XSOCD;*/
      /* MOVE ' ' TO COMMAREA.XGPCD;*/
      /* next sentence*/
    end
  end
  ;
  ;
  ;
end // end KL0BZ98

Record CL0BW00 type basicRecord
  10 CL0BMCPY CL0BMCPY ; 
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW00

//*** RECORD=CL0BW01 ****
// this is the primary working-storage record for cl0b.
// used for temporary storage of data used in cl0b.
// ***********************
Record CL0BW01 type basicRecord
  5 CL0BWGRP CL0BWGRP ; 
    10 CL0BWKEY CL0BWKEY ; 
      15 CLWMNOPT CLWMNOPT ; 
      15 YCTCD YCTCD ; 
    10 CL0BWMAP CL0BWMAP ; 
      15 CL0BWMP0 CL0BWMP0 ; 
      15 CL0BWMPX CL0BWMPX ; 
    10 CL0BWCNT CL0BWCNT ; 
    10 CL0BWCT1 CL0BWCT1 ; 
    10 KUCGRPID KUCGRPID ; 
    10 CL0BWBCH CL0BWBCH ; 
    10 CL0BMREP CL0BMREP ; 
      15 XXXLSTNM XXXLSTNM ; 
      15 XXXFSTNM XXXFSTNM ; 
    10 CL0BWDT1 CL0BWDT1 ; 
    10 CL0BWDT2 CL0BWDT2 ; 
    10 CL0BWDT3 CL0BWDT3 ; 
    10 CL0BWDT4 CL0BWDT4 ; 
    10 CL0BWNUM CL0BWNUM ; 
    10 CLWLSTNM CLWLSTNM ; 
      15 CL0BWFN3 CL0BWFN3 ; 
      15 CL0BWFN7 CL0BWFN7 ; 
    10 CLAESTVL CLAESTVL ; 
    10 CL0BWPHB CL0BWPHB ; 
    10 CL0BWARN CL0BWARN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
end // end CL0BW01

//*** RECORD=CL0BW02 ****
// Working storage used exclusively by the IV0D application.
// This area wil go away when the program is exited.  Used
// mainly to hold the selection information for the dynamic
// select for IO1150.
// ***********************
Record CL0BW02 type basicRecord
  10 CL0BWSGP CL0BWSGP ; 
    15 CL0BWSSS CL0BWSSS ; 
    15 CL0BWSAY CL0BWSAY [10] ; 
      20 CL0BWSIN CL0BWSIN ; 
      20 CL0BWSAD CL0BWSAD ; 
    15 CLWSETHI CLWSETHI ; 
    15 CLWSTTHI CLWSTTHI ; 
    15 CL0BWEH1 CL0BWEH1 ; 
    15 CL0BWEL2 CL0BWEL2 ; 
    15 CL0BWEH2 CL0BWEH2 ; 
end // end CL0BW02

//*** RECORD=CL0BW03 ****
// passed as parameter record to i/o module, io1190, to read
// all claims for consumer last name.
// 
// user entered 'smith' will get all claims for
// 'smi.......' to 'smi9999999'.  so that 'smith' will show
// 'sminoleon' and also 'smithy'.
// 
// ***********************
Record CL0BW03 type basicRecord
  5 CL0BWTYP CL0BWTYP ; 
  5 CL0BWLNM CL0BWLNM ; 
    10 CL0BWFN7 CL0BWFN7 ; 
    10 CL0BWTN7 CL0BWTN7 ; 
      15 CL0BWTLT CL0BWTLT [7] ; 
end // end CL0BW03

//*** RECORD=CL0BW04 ****
// %get cl0zw03
// *
// * select maximum sequence number from dcorp.vparm101
// *
// * 07-27-90 bcourt create record
// ***********************
Record CL0BW04 type basicRecord
  10 CL0BW4SQ CL0BW4SQ ; 
  10 CL0BW4ID CL0BW4ID ; 
end // end CL0BW04

Record CL0BW0A type basicRecord
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW0A

Record CL0BW0B type basicRecord
  10 CL0BWEXE CL0BWEXE ; 
  10 CL0BWOCL CL0BWOCL ; 
  10 CL0BWFCD CL0BWFCD ; 
  10 CL0BWPRC CL0BWPRC ; 
  10 CL0BWJBC CL0BWJBC ; 
end // end CL0BW0B

Record CL0BW0C type basicRecord
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW0C

//*** RECORD=CL0BW94 ****
// build 4 different parameters in this record.
// parameters written to dcorp.vparm101 for use in cobol batch
// cl1371 to create 'batch only' reports.  this is done for
// inquiries against large data base areas, such as group
// company i.d., or warehouse, or sales office.
// 
// date      name    comment
// --------  ------  ---------------------------------------
// 02-17-88  bcourt  create record
// 06   -88  johrtm  add order type code to parm 2
//                   add POD/POD status code to parm 3
// 04-20-89  bcourt  change XOTCD to XOBCD, add XDVCD on parm 3
// 10-12-90  bcourt  expand XROCD from 2 to 4 char (chgd 4 keys
// 
// ***********************
Record CL0BW94 type basicRecord
  5 CL0BW94G CL0BW94G ; 
    10 OP1CUPO OP1CUPO ; 
      15 CL0BWPOA CL0BWPOA ; 
      15 CL0BWPOB CL0BWPOB ; 
      15 CL0BWPOC CL0BWPOC ; 
      15 CL0BWPOD CL0BWPOD ; 
      15 CL0BWPOE CL0BWPOE ; 
    10 ARCCCREF ARCCCREF ; 
      15 CL0BWCCA CL0BWCCA ; 
      15 CL0BWCCB CL0BWCCB ; 
      15 CL0BWCCC CL0BWCCC ; 
      15 CL0BWCCD CL0BWCCD ; 
    10 ARCCHKNB ARCCHKNB ; 
      15 CL0BWCKA CL0BWCKA ; 
      15 CL0BWCKB CL0BWCKB ; 
    10 CL0BWSDT CL0BWSDT ; 
    10 CL0BWETM CL0BWETM ; 
      15 CL0BWEHH CL0BWEHH ; 
      15 * char(1) ; 
      15 CL0BWEMM CL0BWEMM ; 
      15 * char(1) ; 
      15 CL0BWESS CL0BWESS ; 
    10 CL0BWTM CL0BWTM ; 
      15 CL0BWHH CL0BWHH ; 
      15 CL0BWMM CL0BWMM ; 
    10 CL0BWRT1 CL0BWRT1 ; 
      15 XZZKEYGP XZZKEYGP ; 
        20 XZZQRYID XZZQRYID ; 
        20 XZZQRYRN XZZQRYRN ; 
        20 XZZQRYLN XZZQRYLN ; 
        20 XROCD XROCD ; 
      15 * char(1) ; 
      15 * char(1) ; 
      15 XSOCD XSOCD ; 
      15 XWHCD XWHCD ; 
      15 YCTCD YCTCD ; 
      15 YCRCD YCRCD ; 
      15 SM1AGYID SM1AGYID ; 
      15 * char(4) ; 
      15 CL0BWUID CL0BWUID ; 
      15 * char(8) ; 
      15 SM4REPID SM4REPID ; 
      15 * smallint ; 
      15 CLWSETLO CLWSETLO ; 
      15 CLWSETHI CLWSETHI ; 
      15 * char(24) ; 
      15 CL0BWVL1 CL0BWVL1 ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZZSTM ZZZSTM ; 
    10 CL0BWRT2 CL0BWRT2 ; 
      15 CL0BWKY2 CL0BWKY2 ; 
      15 CLASHPFF CLASHPFF ; 
      15 CLARTNFF CLARTNFF ; 
      15 XGPCD XGPCD ; 
      15 XOBCD XOBCD ; 
      15 YCSCD YCSCD ; 
      15 CL0BWPO1 CL0BWPO1 ; 
      15 CL0BWPO2 CL0BWPO2 ; 
      15 CL0BWPO3 CL0BWPO3 ; 
      15 CL0BWPO4 CL0BWPO4 ; 
      15 CL0BWPO5 CL0BWPO5 ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 KUCGRPID KUCGRPID ; 
      15 KUCCOID KUCCOID ; 
      15 * char(24) ; 
      15 CL0BWVL2 CL0BWVL2 ; 
    10 CL0BWRT3 CL0BWRT3 ; 
      15 CL0BWKY3 CL0BWKY3 ; 
      15 * char(1) ; 
      15 * char(1) ; 
      15 CL0BWCC1 CL0BWCC1 ; 
      15 XDVCD XDVCD ; 
      15 YPSCD YPSCD ; 
      15 * char(3) ; 
      15 CL0BWCC2 CL0BWCC2 ; 
      15 * char(4) ; 
      15 CL0BWCC3 CL0BWCC3 ; 
      15 CL0BWCC4 CL0BWCC4 ; 
      15 * smallint ; 
      15 * smallint ; 
      15 CLWSTTLO CLWSTTLO ; 
      15 CLWSTTHI CLWSTTHI ; 
      15 * char(24) ; 
      15 * decimal(13) ; 
    10 CL0BWRT4 CL0BWRT4 ; 
      15 CL0BWKY4 CL0BWKY4 ; 
      15 * char(1) ; 
      15 * char(1) ; 
      15 CL0BWCK1 CL0BWCK1 ; 
      15 * char(2) ; 
      15 * char(3) ; 
      15 * char(3) ; 
      15 * char(4) ; 
      15 * char(4) ; 
      15 * char(6) ; 
      15 CL0BWCK2 CL0BWCK2 ; 
      15 * smallint ; 
      15 * smallint ; 
      15 * int ; 
      15 * int ; 
      15 * char(24) ; 
      15 * decimal(13) ; 
end // end CL0BW94

//*** RECORD=CL0BW95 ****
// **********  claims consumer last name  *********************
// 
// hold consumer last name in this record.
// 
// maint:
// date      by   comment
// --------  ---  ---------------------------------------------
// 
// ***********************
Record CL0BW95 type basicRecord
  5 CLWLSTNM CLWLSTNM ; 
end // end CL0BW95

//*** RECORD=CL0BW96 ****
// **********  parameters for batch inquiry  ******************
// 
// data comes from cl0bm002.
// hold on-line parameters for submission as 'sysin' cards
// to batch jcl.  two types of cards.  batch jcl is submitted
// since running the inquiry on-line would take too long.
// maint:
// 
// date      by   comment
// --------  ---  ---------------------------------------------
// 06/20/88  jro  add order type code and pod/pos status codes.
// 04-20-89 bcourt change XOTcd to XOBcd, add XDVcd & XSOcd.
// 
// ***********************
Record CL0BW96 type basicRecord
  5 CL0BWGR1 CL0BWGR1 ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 KUCGRPID KUCGRPID ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 XGPCD XGPCD ; 
    10 CLWSETLO CLWSETLO ; 
    10 CLWSETHI CLWSETHI ; 
    10 CL0BWTLO CL0BWTLO ; 
    10 CL0BWTHI CL0BWTHI ; 
    10 YCSCD YCSCD ; 
    10 CLWSTTLO CLWSTTLO ; 
    10 CLWSTTHI CLWSTTHI ; 
    10 YCTCD YCTCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 IV0IVCID IV0IVCID ; 
    10 ARCCHKNB ARCCHKNB ; 
    10 YCRCD YCRCD ; 
  5 CL0BWGR2 CL0BWGR2 ; 
    10 ARCREFNB ARCREFNB ; 
    10 ARCCCREF ARCCCREF ; 
    10 OP1CUPO OP1CUPO ; 
  5 CL0BWGR3 CL0BWGR3 ; 
    10 XOBCD XOBCD ; 
    10 XOBABRV XOBABRV ; 
    10 XDVCD XDVCD ; 
    10 XDVABRV XDVABRV ; 
    10 XSOCD XSOCD ; 
    10 XSOABRV XSOABRV ; 
    10 YPSCD YPSCD ; 
    10 YPSDESC YPSDESC ; 
end // end CL0BW96

//*** RECORD=CL0BW97 ****
// **********  parameters for batch inquiry  ******************
// 
// hold map cl0bm003 parameters for warehouse, sales offfice,
// or sales agency/rep inquiries.  parameters are submitted as
// 'sysin' input to batch jobs since on-line run might be
// excessive time.
// 
// maint:
// date      by   comment
// --------  ---  ---------------------------------------------
// 06/20/88  jro  add order type code and pod/pos status codes.
// 04-20-89 bcourt change XOTcd to XOBcd, add XDVcd.
// 
// ***********************
Record CL0BW97 type basicRecord
  5 CL0BWGP1 CL0BWGP1 ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 XSOCD XSOCD ; 
    10 XWHCD XWHCD ; 
    10 CLASHPFF CLASHPFF ; 
    10 CLARTNFF CLARTNFF ; 
    10 XGPCD XGPCD ; 
    10 CLWSETLO CLWSETLO ; 
    10 CLWSETHI CLWSETHI ; 
    10 YCRCD YCRCD ; 
    10 CL0BWTLO CL0BWTLO ; 
    10 CL0BWTHI CL0BWTHI ; 
    10 YCSCD YCSCD ; 
    10 CLWSTTLO CLWSTTLO ; 
    10 CLWSTTHI CLWSTTHI ; 
    10 YCTCD YCTCD ; 
  5 CL0BWGP2 CL0BWGP2 ; 
    10 XOBCD XOBCD ; 
    10 XOBABRV XOBABRV ; 
    10 XDVCD XDVCD ; 
    10 XDVABRV XDVABRV ; 
    10 YPSCD YPSCD ; 
    10 YPSDESC YPSDESC ; 
  5 CL0BWGP3 CL0BWGP3 ; 
    10 OP1CUPO OP1CUPO ; 
end // end CL0BW97

//*** RECORD=CL0BW98 ****
// date      by     why
// --------  ------ -------------------------------------------
// 03-09-88  bcourt break down remote printer code, to
//                  allow extract of xrocd for 'batch only'
//                  printer i.d.
// 10-12-90  bcourt Change XROCD 2 to 4 char.
//                  Breakdown XROCD to convert 07.. to 0007
// ***********************
Record CL0BW98 type basicRecord
  10 CL0BWUID CL0BWUID ; 
  10 CL0BWIXL CL0BWIXL ; 
  10 CL0BWIXM CL0BWIXM ; 
  10 CL0BWIX2 CL0BWIX2 ; 
  10 CL0BWIXT CL0BWIXT ; 
  10 CL0BMRMT CL0BMRMT ; 
    15 * char(3) ; 
    15 XROCD XROCD ; 
      20 CL0BWDIG CL0BWDIG [4] ; 
  10 CL0BWSWS CL0BWSWS ; 
  10 CL0BMSEL CL0BMSEL [98] ; 
  10 CL0BWMNO CL0BWMNO ; 
  10 CL0BTTYP CL0BTTYP ; 
end // end CL0BW98

//*** RECORD=CL0BW99 ****
// sysytem internal reader queue(inter)record definition
// ***********************
Record CL0BW99 type serialRecord  {
  fileName = "INTR"
  }
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW99

Record CL0BW9J type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(4) ; 
  10 CL0BWUID CL0BWUID ; 
  10 * char(70) ; 
end // end CL0BW9J

Record CL0BW9K type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(15) ; 
  10 CL0BWEXE CL0BWEXE ; 
  10 * char(59) ; 
end // end CL0BW9K

Record CL0BW9L type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(17) ; 
  10 CL0BWOCL CL0BWOCL ; 
  10 * char(2) ; 
  10 CL0BWFCD CL0BWFCD ; 
  10 * char(56) ; 
end // end CL0BW9L

Record CL0BW9M type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(8) ; 
  10 CL0BWPRC CL0BWPRC ; 
  10 * char(65) ; 
end // end CL0BW9M

Record CL0BW9N type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(22) ; 
  10 CL0BWUID CL0BWUID ; 
  10 * char(52) ; 
end // end CL0BW9N

//*** RECORD=CL0BW9O ****
//  when     by     why
//  10-12-90 bcourt due to XROCD change 2 to 4 chars,
//                  change CL0BW90G.
// ***********************
Record CL0BW9O type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(10) ; 
  10 CL0BWFC1 CL0BWFC1 ; 
  10 * char(7) ; 
  10 CL0BWFC2 CL0BWFC2 ; 
  10 * char(8) ; 
  10 CL0BMCPY CL0BMCPY ; 
  10 CL0BW9OG CL0BW9OG ; 
    15 * char(6) ; 
    15 CL0BMRMT CL0BMRMT ; 
  10 * char(33) ; 
end // end CL0BW9O

//*** RECORD=CL0BW9P ****
// sysytem internal reader queue(inter)record definition
// ***********************
Record CL0BW9P type basicRecord // VAGen Info - redefined CL0BW99
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW9P

//*** RECORD=CL0BW9Q ****
// sysytem internal reader queue(inter)record definition
// ***********************
Record CL0BW9Q type basicRecord // VAGen Info - redefined CL0BW99
  10 CL0BWJCL CL0BWJCL ; 
end // end CL0BW9Q

Record CL0BW9R type basicRecord // VAGen Info - redefined CL0BW99
  10 * char(21) ; 
  10 CL0BWJBC CL0BWJBC ; 
  10 * char(58) ; 
end // end CL0BW9R

// number of copies to print
DataItem CL0BMCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rep name
DataItem CL0BMREP char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default printer destination
DataItem CL0BMRMT char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem CL0BMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io-ind
DataItem CL0BW4ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem CL0BW4SQ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage group
DataItem CL0BW94G char(453)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for ptr dest
DataItem CL0BW9OG char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted customer warning
DataItem CL0BWARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n submit batch
DataItem CL0BWBCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust claim nbr part 1 of 4
DataItem CL0BWCC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust claim nbr part 2 of 4
DataItem CL0BWCC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust claim nbr part 3 of 4
DataItem CL0BWCC3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust claim nbr part 4 of 4
DataItem CL0BWCC4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust clm nbr part 1 of 4
DataItem CL0BWCCA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust clm nbr part 2 of 4
DataItem CL0BWCCB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust clm nbr part 3 of 4
DataItem CL0BWCCC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust clm nbr part 4 of 4
DataItem CL0BWCCD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust check nbr part 1 of 2
DataItem CL0BWCK1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust check nbr part 2 of 2
DataItem CL0BWCK2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust check nbr part 1 of 2
DataItem CL0BWCKA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust check nbr part 2 of 2
DataItem CL0BWCKB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr fields used on map 1
DataItem CL0BWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter
DataItem CL0BWCT1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// single digit
DataItem CL0BWDIG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error in hi status date
DataItem CL0BWDT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error in lo status date
DataItem CL0BWDT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error in hi setup date
DataItem CL0BWDT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error in lo setup date
DataItem CL0BWDT4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Value (high)
DataItem CL0BWEH1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// negativeclaim value (high)
DataItem CL0BWEH2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry hour
DataItem CL0BWEHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// negative claim value (low)
DataItem CL0BWEL2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry minute
DataItem CL0BWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry second
DataItem CL0BWESS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry time
DataItem CL0BWETM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute proc id
DataItem CL0BWEXE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code 1
DataItem CL0BWFC1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code 2
DataItem CL0BWFC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code
DataItem CL0BWFCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from'name, first 3 chars
DataItem CL0BWFN3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from'name, next 7 chars
DataItem CL0BWFN7 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 1
DataItem CL0BWGP1 char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 2, CL0BM003
DataItem CL0BWGP2 char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 3
DataItem CL0BWGP3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 1
DataItem CL0BWGR1 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 2
DataItem CL0BWGR2 char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl data card 3, CL0BM002
DataItem CL0BWGR3 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem CL0BWGRP char(103)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour
DataItem CL0BWHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second index for map fields
DataItem CL0BWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// limit for map fields index
DataItem CL0BWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem CL0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem CL0BWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// job class
DataItem CL0BWJBC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key
DataItem CL0BWKEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key id
DataItem CL0BWKY2 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key id
DataItem CL0BWKY3 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key id
DataItem CL0BWKY4 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// consumer last name,from & to
DataItem CL0BWLNM char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to be shown
DataItem CL0BWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minute
DataItem CL0BWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// job submitted message number
DataItem CL0BWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'cl0bm00'
DataItem CL0BWMP0 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map 1,2,3 or 4
DataItem CL0BWMPX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert binary to numeric
DataItem CL0BWNUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output class
DataItem CL0BWOCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n phase b changes
DataItem CL0BWPHB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 1 of 5
DataItem CL0BWPO1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 2 of 5
DataItem CL0BWPO2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 3 of 5
DataItem CL0BWPO3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 4 of 5
DataItem CL0BWPO4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 5 of 5
DataItem CL0BWPO5 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 1 of 5
DataItem CL0BWPOA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 2 of 5
DataItem CL0BWPOB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 3 of 5
DataItem CL0BWPOC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 4 of 5
DataItem CL0BWPOD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. nbr part 5 of 5
DataItem CL0BWPOE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem CL0BWPRC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm rec type 1 group ********
DataItem CL0BWRT1 char(99)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm rec type 2 group ********
DataItem CL0BWRT2 char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm rec type 3 group ********
DataItem CL0BWRT3 char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm rec type 4 group ********
DataItem CL0BWRT4 char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort asc or desc
DataItem CL0BWSAD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array for sort
DataItem CL0BWSAY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yymmdd ezedte + 19000000
DataItem CL0BWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select set option list
DataItem CL0BWSGP char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort item number
DataItem CL0BWSIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql option - select set
DataItem CL0BWSSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// job submitted switch
DataItem CL0BWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Value (high)
DataItem CL0BWTHI decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim Value (low)
DataItem CL0BWTLO decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'to'name, each letter
DataItem CL0BWTLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// time
DataItem CL0BWTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'to'name, next 7 letters
DataItem CL0BWTN7 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 type of action
DataItem CL0BWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike user id
DataItem CL0BWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Value (low)
DataItem CL0BWVL1 decimal(13,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim Value (high)
DataItem CL0BWVL2 decimal(13,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

