package kl01;

import corpcom1.CLAREC;
import corpcom1.CLWREC;
import corpcom1.CLXREC;
import corpcom1.CLYATHID;
import corpcom3.XPCL002;
import corpcom3.XPCL006;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSIVSN6;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.CLYREC;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXLSTNM;
import corpcom7.XXXSTAT;
import corpx1.XCPTBL;
import corpy2.YATTBL;
import corpy2.YCPCD;
import corpy2.YCPTBL;
import corpy2.YCTTBL;
import corpy2.YUATBL;
import iv.common.IVZREC;
import ku.common.KUYREC;
import ku.common.KUYSVRID;
import mn.common.MN1REC;
import mn.common.MN2REC;
import sm.common.SM4REC;
import sm.common.SM5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL01 ****
// appl name: kl01
// 
// overview: the purpose of this application is to update and
//           view information on the dclaim.vclath01 table.
//           two maps are used in cl01: cl01m001 is the line
//           update map through which any data on a single line
//           may be viewed or updated. cl01m005 is the inquiry
//           by last name map. access to this application will
//           be limited to the data admin. department where
//           maintenance will take place.
// 
// ************************************************************
// *   m a i n t e n a n c e     h i s t o r y     l o g      *
// *----------------------------------------------------------*
// *   date   empl id rev#  description                       *
// *----------------------------------------------------------*
// * 05-19-88  gdecke  0    create application                *
// * 08-02-88  bcourt  1    data base changes                 *
// * 02-28-89  jwood   -    added noncsp option to calls      *
// * 02-28-89  jwood   -    added xssegtr logic               *
// * 05-16-89  gdecke     DB2 structure changes: clarec.      *
// * 09-05-89  gdecke     move mn1user to mn1appl in mn2rec   *
// *                      when fetching mn2rec (cl01250).     *
// * 09-22-89  bcourt     remove 5-16 ref to unused tables:X CT
// *                      X WH; & recs: CL I, KU C, SY C, SY 2.
// * 08-08-91  wjohns     Renamed application and commarea    *
// *                        referrences to renamed claims     *
// *                        appls.                            *
// * 01-13-92  sgorga   Set ta1rec empty.  kl01s65,001.       *
// * 03-15-92  BCOURT   Add CU_ISP_POP_AUTH_FL to map and     *
// *                    CLYREC.
// *                    Re-structure to simplify appl listing.
// * 09-14-92  jhecke   rep name is no longer found on
// *                    dslsmn.vragcy01 and now must be
// *                    obtained from dslsmn.vreps001 (sm4rec).
// *                    kl01130.
// * 10-12-92  twatso   DB2 structure changes: clyrec.        *
// ************************************************************
// *********************
Program KL01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL01W01 CL01W01; // record
  CL01W05 CL01W05; // record
  CLAREC CLAREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  CLYREC CLYREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IVZREC IVZREC; // record
  KUYREC KUYREC; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCPTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL01M.KL01M001,  // forms
      KL01M.KL01M005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL01000: KL01000();
    ;
    ;
    exit program;
    ;
    ;
  end // end main
end // end KL01

// application main logic
Function KL01000()
   /* *************************************************************/
   /* *   this is the main logic for application cl01            **/
   /* *                                                          **/
   /* *   xsentry checks to ensure that this application was     **/
   /* *      entered from another csp application.               **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  ;
  KL01001(); /* initialize the application*/
  ;
  KL01M001.XXXRVNBR = "1"; /* appl maint revision number*/
  KL01M005.XXXRVNBR = "1"; /* appl maint revision number*/
   /* also change map 5 revision nbr in cl01s67*/
  ;
  KL01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* get current date for map m001*/
  KL01M005.XXXCURDT = VGVar.currentShortGregorianDate; /* get current date for map m005*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-appl flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-appl*/
    KL01050(); /* process the application screen(s)*/
  end
  ;
  ;
  COMMAREA.CATOAP = "KL01"; /* in case of trouble*/
  XPCL002(); /* exit application*/
  ;
  ;
end // end KL01000

// initialize application
Function KL01001()
   /* *************************************************************/
   /* *     initialize the application working storage           **/
   /* *                                                          **/
   /* *  check if entry thru main menu.                          **/
   /* *  initialize maps, records and working storage.           **/
   /* *  set screen number, screen name and number of lines      **/
   /* *  possible on each.                                       **/
   /* *                                                          **/
   /* *************************************************************/
   /* MAINTENANCE HISTORY                          **/
   /* 01-13-92  sgorga  Set ta1rec empty.                       **/
   /* 03-15-92  BCOURT  Improve comments.                       **/
   /* **/
   /* *************************************************************/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
   /* ****TEMP001;*/
   /* ****  **** temp code for testing *****/
  ;
  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry module*/
  ;
     /* initialize working storage constants, records.*/
  ;
  ;
  set KL01M001 initial; /* clear out map kl0cm001*/
  set KL01M005 initial; /* clear out map kl0cm005*/
  set CLYREC empty; /* clear out dclaim.vclath01*/
  set KUYREC empty; /* clear out dcust.vsvrep01*/
  set CL01W01 empty; /* clear out cl01w01*/
  set CL01W05 empty; /* clear out cl01w05*/
  set CLAREC empty; /* clear out dclaim.vclhdr01*/
  set CLWREC empty; /* clear out clwrec*/
  set CLXREC empty; /* clear out clxrec*/
  set TA1REC empty; /* clear out ta1rec*/
  set TA2REC empty; /* clear out ta2rec*/
  set MN2REC empty; /* clear out mn2rec*/
  set SQLCA empty; /* clear out sqlca*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set application-done-switch to 'no'*/
  ;
  CLXREC.CLXCSCRN = "KL01M005"; /* set screen name*/
  ;
  CLXREC.CLXSNAME[1] = "KL01M001"; /* initialize the names of the*/
  CLXREC.CLXSNAME[2] = "KL01M005"; /* screens used in this appl*/
  ;
  CLXREC.CLXMAXLN[1] = 14; /* max lines on map 1*/
  CLXREC.CLXARY1X[1] = 1; /* start lines on map 1*/
  ;
  CLXREC.CLXMAXLN[2] = 10; /* max lines on map 2*/
  CLXREC.CLXARY1X[2] = 1; /* start lines on map 2*/
  ;
  ;
end // end KL01001

// main cl01 branch control
Function KL01050()
   /* *************************************************************/
   /* *       main cl01 branch control                           **/
   /* *                                                          **/
   /* *  note that this process is being performed in a 'while'  **/
   /* *  loop until the end-of-application flag is set to 'y'.   **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01050"; /* set current process name*/
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current screen name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen array, then set*/
  end /* the screen index*/
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end of screen flag to 'no'*/
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen co0%m001*/
    while (CLXREC.CLXEOSF == "N") /* while not end of screen*/
      KL01100(); /* process screen cl0%m001*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0%m005*/
      while (CLXREC.CLXEOSF == "N") /* while not end of screen*/
        KL01200(); /* process screen cl0%m005*/
      end
    else
      TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
      XPCL010();
    end
  end
  ;
  ;
    /* at this point:*/
       /* if the end of application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050*/
       /* else*/
         /* the perform will auto return to cl0%000.*/
  ;
  ;
end // end KL01050

// authorization ID list
Function KL01100()
   /* *************************************************************/
   /* *   process screen cl01m001                                **/
   /* *                                                          **/
   /* *  note - this process is being performed in a 'while'     **/
   /* *         loop from cl01050 until the end of screen flag   **/
   /* *         (clxeosfl) is set to 'y'.                        **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01100"; /* set current process name*/
  ;
  CLXREC.CLXMAXLN = 14; /* reset maximum line per page*/
  CLWREC.CLWMXIDX = 200; /* initialize maximum select index*/
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL01101(); /* build screen because of new record*/
  end /* ; to display or pf7/pf8 keyed*/
  ;
  CLXREC.CLXBLDSC = "N"; /* skip build screen next time thru*/
     /* skip build when have errors to show, of pf 12 was keyed*/
  converse KL01M001 ;
  CLXREC.CLXMSG = " "; /* set non ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* re-set error flag.*/
  CLXREC.CLXUPDTF = "N"; /* init have-updates-flag*/
  ;
  ;
  CLXREC.CLXLINEX = 1;
  if (CLXREC.CLXARY1X <= 1)
    CLXREC.CLXCURLN = 1;
  else
    if (CLXREC.CLXCURLN == CLWREC.CLWMXIDX)
      CLXREC.CLXCURLN = CLXREC.CLXARY1X;
    else
      CLXREC.CLXCURLN = CLXREC.CLXARY1X - CLXREC.CLXMAXLN[1];
    end
  end
  ;
  if (CLXREC.CLXCURLN < 1)
    CLXREC.CLXCURLN = 1;
  end
  ;
  CLWREC.CLWCLIDX = CLXREC.CLXCURLN; /* examine all the lines selected*/
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[1])
                                   /* on the map and save the 's'*/
    if (CLWREC.CLWCLIDX <= CLWREC.CLWMXIDX) /* values in a clxrec array.*/
      KL01S21(); /* save selections to array*/
      if (CLXREC.CLXERRF == "Y")
        CLXREC.CLXLINEX = 15; /* set index value to force exit*/
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    else
      CLXREC.CLXLINEX = 15; /* set index value to force exit*/
    end
  end
  ;
    /* set the edit and update flags*/
  ;
  if (KL01M001.XXXLSTNM is modified
   || KL01M001.CL01MSEL[1] is modified
   || KL01M001.CL01MSEL[2] is modified
   || KL01M001.CL01MSEL[3] is modified
   || KL01M001.CL01MSEL[4] is modified
   || KL01M001.CL01MSEL[5] is modified
   || KL01M001.CL01MSEL[6] is modified
   || KL01M001.CL01MSEL[7] is modified
   || KL01M001.CL01MSEL[8] is modified
   || KL01M001.CL01MSEL[9] is modified
   || KL01M001.CL01MSEL[10] is modified
   || KL01M001.CL01MSEL[11] is modified
   || KL01M001.CL01MSEL[12] is modified
   || KL01M001.CL01MSEL[13] is modified
   || KL01M001.CL01MSEL[14] is modified)
    CLXREC.CLXEDITF = "Y"; /* set perform-edit flag to 'yes'*/
    CLXREC.CLXUPDTF = "Y"; /* set update table flag to 'yes'*/
  else
    CLXREC.CLXEDITF = "N"; /* if no entries, then no edits*/
  end
  ;
  ;
  KL01110(); /* handle any special entries*/
  ;
  ;
  if (CLXREC.CLXEDITF == "Y") /* if we still want to edit*/
    KL01120(); /* to process screen entries*/
  end
  ;
  if (CLXREC.CLXERRF == "N" /* build and display the map if last*/
   && CLXREC.CLXUPDTF == "Y") /* name entered or individual line*/
    KL01130(); /* selected for processing*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N") /* only flow if no errors*/
    KL01140(); /* handle pf keys to transfer out*/
  end
  ;
  ;
  ;
   /* at this point:*/
     /* if the end of screen flag (clxeosfl) is 'n' the perform*/
       /* returns to top of process cl01100*/
     /* else*/
       /* the perform returns to cl01050*/
  ;
  ;
end // end KL01100

// initialize screen cl01m001
Function KL01101()
   /* *************************************************************/
   /* *                                                          **/
   /* *     this process will initialize screen cl01m001.        **/
   /* *       it will read the necessary tables or will scroll   **/
   /* *       forward or back                                    **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01101"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey not pf7 /* do not rebuild top of map*/
   && converseVar.eventKey not pf8) /* for pf7 or pf8*/
                                /* build top of screen*/
                                /* initialize indexes and pointers*/
                                /* for multiple lines*/
    if (CLWREC.CLWEZMNO != 0)
      if (CLWREC.CLWEZMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(CLWREC.CLWEZMNO);
      end
      CLWREC.CLWEZMNO = 0;
    else
       /* next sentence*/
    end
  end
  ;
    /* if returning from maintenance map cl01m005*/
    /* we want to show the data from cl01w05 so the*/
    /* user will know what has been viewed.*/
  ;
  if (converseVar.eventKey is pf13 /* if pf13 entered and*/
   && CLXREC.CLXARY1X > 0          /* starting point in array not zero*/
   && CL01W05.XXXLSTNM[1] != " "   
   && CL01W05.CLYATHID[1] > 0)    
    CLXREC.CLXLINEX = 1; /* move tabled lines to map*/
    CLWREC.CLWCLIDX = CLXREC.CLXARY1X;
    KL01M001.XXXLSTNM = CL01W05.CL01WLST;
    set KL01M001.XXXLSTNM modified;
    while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
      if (CLXREC.CLXERRF != "Y")
        set KL01M001.CL01MSEL[CLXLINEX] normal;
      end
      KL01M001.CL01MSEL[CLXLINEX] = " ";
      KL01S37(); /* move individual lines from table to map*/
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
    end
  end
  ;
end // end KL01101

// validate screen m001 pf keys
Function KL01110()
   /* *************************************************************/
   /* *   validate screen cl01m001 pf keys                       **/
   /* *                                                          **/
   /* * the only keys acted upon at this time are pf1, 3, and 4  **/
   /* * and fastpath.                                            **/
   /* *                                                          **/
   /* * the other keys are just verified that they are used by   **/
   /* * this application. if the pf key is not recognized, the   **/
   /* * application resets all modified fields to remain modified**/
   /* * then reshows the map with an error message.              **/
   /* *                                                          **/
   /* * these other pf keys are acted upon after the editing and **/
   /* * updating have occured.                                   **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01110"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is enter) /* normal 'enter;*/
    if (KL01M001.CATOAP != " ")
      COMMAREA.CATOAP = KL01M001.CATOAP;
      COMMAREA.CAITEM = KL01M001.CAITEM;
      XPCL006(); /* check item for length and type*/
      if (CLXREC.CLXVITMF == "N") /* item field not valid*/
        set KL01M001.CATOAP cursor, modified, bold;
        set KL01M001.CAITEM modified, bold;
        converseLib.validationFailed(285); /* item field or option field invalid*/
        KL01M001.XXXMSG = CLXREC.CLXMSG;
        CLXREC.CLXERRF = "Y";
        return;
      else
        if (COMMAREA.CAITEM != " ")
          set CLAREC empty;
          CLAREC.CLACLMNB = CLWREC.CLWITM1N;
          call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get claim header*/
        end
      end
      XPCL002(); /* check security/xfer*/
      KL01M001.XXXMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXEDITF = "Y";
    else
      if (KL01M001.CAITEM != " ") /* fastpath request*/
        set KL01M001.CATOAP cursor, modified, bold;
        converseLib.validationFailed(1); /* item field not valid unless option is entered*/
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXEDITF = "Y";
      end
    end
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* 'help'*/
    XSPF1();
  end
  ;
  if (converseVar.eventKey is pf3) /* skip edit, update - exit*/
    KL01S03();
  end
  ;
  if (converseVar.eventKey is pf4) /* skip edit, update - exit*/
    KL01S04();
  end
  ;
  if (converseVar.eventKey is pf7) /* page back*/
    KL01S07();
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* page forward*/
    KL01S08();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf13) /* if pf 13 skip edits and updates,*/
    CLXREC.CLXEDITF = "N"; /* stay with map cl01m001*/
    CLXREC.CLXUPDTF = "N";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* if pf 13 skip updates,*/
    CLXREC.CLXEDITF = "Y"; /* transfer to map cl01m005*/
    CLXREC.CLXUPDTF = "N";
    return;
  end
  ;
    /* all other pf keys are invalid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  KL01S26(); /* set fields modfd so user no re-key*/
  CLXREC.CLXEDITF = "N"; /* do not edit map, just re-show it*/
  CLXREC.CLXUPDTF = "N";
  ;
  ;
end // end KL01110

// process screen m001 entrys
Function KL01120()
   /* *************************************************************/
   /* *  this process handles all edits of screen fields, and any**/
   /* *  subsequent updating required by entries into screen     **/
   /* *  cl01m001.                                               **/
   /* **                                                         **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01120"; /* set current process name*/
  ;
  ;
     /* individual field edits use this form:*/
  ;
  ;
  if (KL01M001.XXXLSTNM is modified) /* edit last name field*/
    KL01S50();
  end
  ;
  CL01W01.CL01WIX2 = 1;
  CL01W01.CL01WMX2 = 14;
  CL01W01.CL01WCT1 = 0;
  ;
  while (CL01W01.CL01WIX2 <= CL01W01.CL01WMX2)
                                   /* edit select indicators on*/
    KL01S66(); /* all map lines*/
  end
  ;
  ;
  if (CL01W01.CL01WCT1 > 0) /* if at least one line selected*/
    CLXREC.CLXBLDSC = "Y"; /* flag to re-build screen*/
  end
  ;
  ;
end // end KL01120

// build map cl01m001
Function KL01130()
   /* *************************************************************/
   /* *  this process will build a table of authorization lines  **/
   /* *  when a new last name is entered. tabled up lines are    **/
   /* *  then displayed 14 at a time. if an individual line is   **/
   /* *  selected, control is passed to cl01200 to display all   **/
   /* *  detail data for the selected authorization table line.  **/
   /* *************************************************************/
   /* *  Maintenance*/
   /* * 10-12-92 twatso change xsvcd to kuysvrid for database changes*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01130"; /* SET CURRENT PROCESS NAME*/
  ;
  ;
  if (KL01M001.XXXLSTNM is modified) /* when last name entered build*/
    CLYREC.XXXLSTNM = KL01M001.XXXLSTNM;
    CLYREC.CLYATHID = 0;
    KL01903(); /* table of selected claim auth*/
     /* open cursor on clytbl (vclath01)*/
    if (CLXREC.CLXERRF == "Y")
      return;
    else
      if (converseVar.eventKey is pf7 /* do not build table again if*/
       || converseVar.eventKey is pf8) /* user wants to view next or prev*/
        /* next sentence                 ; page from existing table.*/
      else
        CLWREC.CLWCLIDX = 1;
        set CL01W05 empty; /* ; clear working storage table before*/
        CL01W05.CL01WLST = KL01M001.XXXLSTNM; /* building new table*/
        ;
        CL01W01.CL01WIX1 = 1;
        while (CL01W01.CL01WIX1 <= 200)
          CLWREC.CLWSELCD[CL01WIX1] = " ";
          CL01W01.CL01WIX1 = CL01W01.CL01WIX1 + 1;
        end
        ;
        while (CLWREC.CLWCLIDX <= 200 /* reloading with new values for*/
         && SQLCA.VAGen_SQLCODE == 0) /* the new last name*/
          KL01904(); /* fetch next clyrec line*/
          if (SQLCA.VAGen_SQLCODE == 0)
            CLWREC.CLWSELCD[CLWCLIDX] = " ";
            CL01W05.CLYATHID[CLWCLIDX] = CLYREC.CLYATHID;
            /* MOVE CLYREC.xsvcd TO CL01W05.xsvcd(CLWCLIDX);*/
            CL01W05.KUYSVRID[CLWCLIDX] = CLYREC.KUYSVRID;
            CL01W05.YCPCD[CLWCLIDX] = CLYREC.YCPCD;
            SM4REC.XXXLSTNM = CLYREC.XXXLSTNM;
            SM4REC.XXXFSTNM = CLYREC.XXXFSTNM;
            SM4REC.XXXMDINT = CLYREC.XXXMDINT;
            XSIVSN6();
            CL01W05.XXXLSTNM[CLWCLIDX] = IVZREC.IVZFNAME;
            CL01W05.XXXSTAT[CLWCLIDX] = CLYREC.XXXSTAT;
            CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
          end
        end
      end
    end
    KL01905(); /* close cursor on vclath01*/
  end
  CLWREC.CLWMXIDX = CLWREC.CLWCLIDX - 1;
  ;
    /* move multiple lines to map from working storage table*/
    /* starting position in table is determined by current value*/
    /* of clxrec.clxaryix.*/
  ;
  CLXREC.CLXLINEX = 1;
  CLWREC.CLWCLIDX = CLXREC.CLXARY1X;
  ;
  while (CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    if (CLXREC.CLXERRF != "Y")
      set KL01M001.CL01MSEL[CLXLINEX] normal;
    end
    KL01M001.CL01MSEL[CLXLINEX] = " ";
    KL01S37(); /* build each screen line*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
  end
  ;
  if (CLWREC.CLWCLIDX >= CLWREC.CLWMXIDX)
    if (converseVar.eventKey is pf7)
      CLWREC.CLWCLIDX = CLWREC.CLWCLIDX - CLXREC.CLXMAXLN[CLXSCRNX];
    end
  end
  ;
   /* **** MOVE CLWREC.CLWCLIDX TO CLXREC.CLXMAXLN(CLXSCRNX);*/
  ;
  if (converseVar.eventKey is enter)
    if (CLWREC.CLWMXIDX <= CLXREC.CLXMAXLN[CLXSCRNX])
      converseLib.validationFailed(3); /* at end of data message*/
    end
  end
  ;
  ;
end // end KL01130

// handle cl0cm001 special entrys
Function KL01140()
   /* *************************************************************/
   /* * handle special entry pf keys when exiting application    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01140"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is pf14)
                                   /* if pf14 entered skip to authorization*/
    /* ***     AND CL01W01.CL01SCNT > 0*/
    KL01S14(); /* maintenance map m005*/
    return;
  end
  ;
  ;
end // end KL01140

// authorization maintenance
Function KL01200()
   /* *************************************************************/
   /* *   process screen cl01m005                                **/
   /* *                                                          **/
   /* *  note:  this process is being performed in a 'while'     **/
   /* *         loop from cl01050 until the end of screen flag   **/
   /* *         (clxeosfl) is set to 'n'.                        **/
   /* *                                                          **/
   /* * 03-15-92 bcourt add CL_ISP_POP_AUTH_FL to map.           **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL01200"; /* set current process name*/
  ;
  if (CLXREC.CLXERRF != "Y")
    set KL01M005.CL01MFUN cursor;
  end
  ;
   /* IF CLXREC.CLXBLDSC = 'Y';*/
  KL01201(); /* build screen because of new record*/
   /* END                        ; to display authorization data*/
  ;
  CLXREC.CLXBLDSC = "N"; /* skip build screen next time thru*/
   /* skip build when there are errors to show, or pf 12 was keyed*/
  ;
  converse KL01M005 ;
  ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* init errors-on-screen flag*/
  CLXREC.CLXUPDTF = "N"; /* init have-updates-flag*/
  ;
  ;
  if (KL01M005.CL01MFUN is modified           
   || KL01M005.CLYATHID is modified           
   || KL01M005.XXXUSRID is modified           
   || KL01M005.KUYSVRID is modified           
   || KL01M005.CLYATHPW is modified           
   || KL01M005.YCPCD is modified              
   || KL01M005.CLYATHFL is modified           
   || KL01M005.CL-ISP-POP-AUTH-FL is modified /* 3-13-92 add field*/
   || KL01M005.XXXSTAT is modified            
   || KL01M005.XXXLSTNM is modified           
   || KL01M005.XXXFSTNM is modified           
   || KL01M005.XXXMDINT is modified           
   || KL01M005.CL01MSCT[1] is modified        
   || KL01M005.CL01MSCT[2] is modified        
   || KL01M005.CL01MSCT[3] is modified        
   || KL01M005.CL01MSCT[4] is modified        
   || KL01M005.CL01MSCT[5] is modified        
   || KL01M005.CL01MSCT[6] is modified        
   || KL01M005.CL01MSCT[7] is modified        
   || KL01M005.CL01MSCT[8] is modified        
   || KL01M005.CL01MSCT[9] is modified        
   || KL01M005.CL01MSCT[10] is modified       
   || KL01M005.CL01MSCT[11] is modified       
   || KL01M005.CL01MSCT[12] is modified       
   || KL01M005.CL01MSCT[13] is modified       
   || KL01M005.CL01MSCT[14] is modified       
   || KL01M005.CL01MSCT[15] is modified       
   || KL01M005.CL01MSCT[16] is modified       
   || KL01M005.CL01MSCT[17] is modified       
   || KL01M005.CL01MSCT[18] is modified       
   || KL01M005.CL01MSCT[19] is modified       
   || KL01M005.CL01MSCT[20] is modified)     
    CLXREC.CLXEDITF = "Y"; /* set perform-edit-flag to 'yes'*/
    CLXREC.CLXUPDTF = "Y"; /* set update table flag to 'yes'*/
  else
    CLXREC.CLXEDITF = "N"; /* IF NO ENTRIES, THEN NO EDITS*/
  end
  ;
  ;
  KL01210(); /* handle any special entries*/
  ;
  ;
  if (CLXREC.CLXEDITF == "Y") /* if we still want to edit*/
    KL01220(); /* go process screen entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N" /* only update clm auth if no errors*/
   && CLXREC.CLXUPDTF == "Y") /* and some data was changed*/
    KL01230(); /* perform update routine*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N") /* only flow if no errors*/
    KL01240(); /* handle pf keys to transfer out*/
  else
    KL01S27(); /* set field attributes so operator*/
  end /* wont have to reenter all data*/
  ;
  ;
    /* at this point-*/
      /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl01200.*/
      /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl01050.*/
  ;
  ;
  ;
end // end KL01200

// initialize screen cl01m005
Function KL01201()
   /* ************************************************************/
   /* *                                                         **/
   /* *  this process will initialize screen cl01m005.          **/
   /* *    it will read the necessary tables and move the data  **/
   /* *    to the map area.                                     **/
   /* **                                                        **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01201"; /* set current process name*/
  ;
  ;
  if (CLWREC.CLWEZMNO != 0) /* build top of screen*/
    if (CLWREC.CLWEZMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(CLWREC.CLWEZMNO);
    end /* initialize indexes and pointers*/
    CLWREC.CLWEZMNO = 0; /* for multiple lines*/
  else
     /* next sentence*/
  end
  ;
    /* if pf14 was entered to show the*/
    /* next selected claim authorization*/
    /* line then get the authorization*/
    /* data from the cl01w05 table and*/
    /* set up function and auth by id*/
    /* on the cl01m005 map. if no more*/
    /* selected lines found display end*/
    /* of data message.*/
  ;
  if (converseVar.eventKey is pf14)
    if (CL01W01.CL01WCT1 > 0)
      KL01S67();
    else
      converseLib.validationFailed(3);
      set KL01M005.CL01MFUN cursor, modified, bold; /* set field attr*/
    end
  end
  ;
  ;
end // end KL01201

// edit screen m005 entrys
Function KL01210()
   /* *************************************************************/
   /* *  validate screen CL01M005 pf keys                        **/
   /* *                                                          **/
   /* * the only keys acted upon at this time are pf1, 3, and 4, **/
   /* * and fastpath.                                            **/
   /* *                                                          **/
   /* * the other keys are just verified that they are used by   **/
   /* * this application. if the pf key is not recognized, the   **/
   /* * application resets all modified fields to remain modified**/
   /* * then reshows the map with an error message.              **/
   /* *                                                          **/
   /* * the other pf keys are acted upon after the editing and   **/
   /* * updating have occured.                                   **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01210"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is enter) /* normal 'enter'*/
    if (KL01M005.CATOAP != " ")
      COMMAREA.CATOAP = KL01M005.CATOAP;
      COMMAREA.CAITEM = KL01M005.CAITEM;
      XPCL006(); /* check item for length and type*/
      if (CLXREC.CLXVITMF == "N") /* item field not valid*/
        set KL01M005.CATOAP cursor, modified, bold;
        set KL01M005.CAITEM modified, bold;
        converseLib.validationFailed(285); /* item field of option field invalid*/
        KL01M005.XXXMSG = CLXREC.CLXMSG;
        return;
      else
        if (COMMAREA.CAITEM != " ")
          set CLYREC empty;
          CLYREC.CLYATHID = CLWREC.CLWITM1N;
          call "IO2650" ("S ", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes}; /* get claim header*/
        end
      end
      XPCL002(); /* check security/xfer*/
      KL01M005.XXXMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      CLXREC.CLXERRF = "Y";
      CLXREC.CLXEDITF = "Y";
    else
      if (KL01M005.CAITEM != " ") /* fastpath request*/
        set KL01M005.CATOAP cursor, modified, bold;
        converseLib.validationFailed(1); /* item field not valid unless option is entered*/
        CLXREC.CLXERRF = "Y";
        CLXREC.CLXEDITF = "Y";
      end
    end
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* 'help'*/
    XSPF1();
  end
  ;
  if (converseVar.eventKey is pf3) /* skip edit, update - exit*/
    KL01S03();
  end
  ;
  if (converseVar.eventKey is pf4) /* skip edit, update - exit*/
    KL01S04();
  end
  ;
  ;
  if (converseVar.eventKey is pf13) /* if pf13 entered skip edit and update*/
    CLXREC.CLXEDITF = "N"; /* and transfer to map cl01m001*/
    CLXREC.CLXUPDTF = "N";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf14)
                                   /* if pf 14 entered skip edit and update*/
    if (CL01W01.CL01WCT1 > 0) /* but if select count > 0 then show*/
      CLXREC.CLXUPDTF = "Y"; /* the selected claim auth line.*/
      CLXREC.CLXEDITF = "N";
    else
      converseLib.validationFailed(3);
      set KL01M005.CL01MFUN cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y"; /* set error flag*/
      CLXREC.CLXEDITF = "N";
      CLXREC.CLXUPDTF = "N";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf15) /* if pf13 entered skip edit and update*/
    CLXREC.CLXEDITF = "N"; /* and transfer to map cl01m001*/
    CLXREC.CLXUPDTF = "N";
    set KL01M005 initial;
    KL01M005.XXXRVNBR = "0";
    KL01M005.XXXCURDT = VGVar.currentShortGregorianDate;
    return;
  end
  ;
  ;
    /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  KL01S27();
                                   /* set fields modfd so user won't re-key*/
  CLXREC.CLXEDITF = "N"; /* do not edit map, just re-show it*/
  CLXREC.CLXUPDTF = "N";
  ;
  ;
end // end KL01210

// process screen m005 entrys
Function KL01220()
   /* *************************************************************/
   /* *  this process handles all edit of screen fields, and any **/
   /* *  subsequent updating required by entries into screen     **/
   /* *  cl01m005.                                               **/
   /* *                                                          **/
   /* * 03-15-92 BCOURT Add CL_ISP_POP_AUTH_FL field to map.     **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01220"; /* set current proc name*/
  ;
   /* ****/
   /* ***    edit function code*/
   /* ****/
  if (KL01M005.CL01MFUN is modified)
    if (KL01M005.CL01MFUN != "ADD"
     && KL01M005.CL01MFUN != "CHG"
     && KL01M005.CL01MFUN != "DEL"
     && KL01M005.CL01MFUN != "INQ")
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(326); /* show function invalid message*/
      set KL01M005.CL01MFUN cursor, modified, bold; /* set field attribute*/
      CLXREC.CLXERRF = "Y"; /* set error flag on*/
    else
      set KL01M005.CL01MFUN initialAttributes; /* reset color*/
    end
  end
  ;
  ;
   /* ****/
   /* ***    edit authorized by id*/
   /* ****/
  if (KL01M005.CLYATHID is modified)
    if (KL01M005.CLYATHID == 0)
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(78); /* show function invalid message*/
      set KL01M005.CLYATHID cursor, modified, bold; /* set field attribute*/
      CLXREC.CLXERRF = "Y"; /* set error flag on*/
    else
      KL01S51();
    end
  else
    if (CLXREC.CLXERRF != "Y")
      KL01S27(); /* set all entered fields modified*/
    end
    converseLib.validationFailed(78); /* show function invalid message*/
    set KL01M005.CLYATHID cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y"; /* set error flag on*/
  end
  ;
  ;
   /* ****/
   /* ***    edit service rep id*/
   /* ****/
  if (KL01M005.KUYSVRID is modified
   && KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    KL01S53();
  end
  ;
  ;
   /* ****/
   /* ***    edit coop analyst id*/
   /* ****/
  if (KL01M005.YCPCD is modified
   && KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    KL01S54();
  end
  ;
   /* ****/
   /* ***    edit user id*/
   /* ****/
  if (KL01M005.XXXUSRID is modified
   && KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    KL01S56();
  end
  ;
   /* ****/
   /* ***    edit traffic authorization flag*/
   /* ****/
  if (KL01M005.CLYATHFL is modified
   && KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    KL01S58();
  end
  ;
   /* ****/
   /* ***    edit ISP/POP authorization flag, 3-15-92 new field*/
   /* ****/
  if (KL01M005.CL-ISP-POP-AUTH-FL is modified
   && KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    KL01S60();
  end
  ;
  ;
   /* ****/
   /* ***    edit authorization last name*/
   /* ***    edit authorization first name*/
   /* ***    edit authorization middle initial*/
   /* ****/
  if (KL01M005.XXXLSTNM is modified
   || KL01M005.XXXFSTNM is modified
   || KL01M005.XXXMDINT is modified)
    if (KL01M005.CL01MFUN != "DEL"
     && KL01M005.CL01MFUN != "INQ")
      KL01S59();
    end
  end
  ;
   /* ****/
   /* ***    edit each occurance (20) of clm type detail*/
   /* ***         select, claim type, auth limit*/
   /* ****/
  if (KL01M005.CL01MFUN != "DEL"
   && KL01M005.CL01MFUN != "INQ")
    CL01W01.CL01WIX2 = 1; /* initialize index*/
    CL01W01.CL01WSEL = 0; /* initialize selected lines count*/
    while (CL01W01.CL01WIX2 <= 20)
      if (KL01M005.CL01MSCT[CL01WIX2] is modified)
        KL01S62();
      else
          /* next sentence*/
      end
      CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
    end
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "CHG"               /* if 'chg' and no changed data entered*/
   && CL01W01.CL01WSEL == 0                    /* show message to prompt data entry*/
   && KL01M005.XXXUSRID not modified           
   && KL01M005.KUYSVRID not modified           
   && KL01M005.CLYATHPW not modified           
   && KL01M005.YCPCD not modified              
   && KL01M005.CLYATHFL not modified           
   && KL01M005.CL-ISP-POP-AUTH-FL not modified /* 3-15-92 add field*/
   && KL01M005.XXXLSTNM not modified           
   && KL01M005.XXXFSTNM not modified           
   && KL01M005.XXXMDINT not modified)         
    if (CLXREC.CLXERRF != "Y")
      KL01S27(); /* set all entered fields modified*/
    end
    converseLib.validationFailed(351); /* show error message*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "ADD" /* if no claim types added when functio*/
   && CL01W01.CL01WSEL == 0)     /* was 'add' --*/
    if (CLXREC.CLXERRF != "Y")
      KL01S27(); /* set all entered fields modified*/
    end
    converseLib.validationFailed(418); /* show error message*/
    KL01M005.CL01MSCT[1] = "?";
    KL01M005.CL01MTYP[1] = "?";
    KL01M005.CL01MLMT[1] = 0;
    set KL01M005.CL01MSCT[1] cursor, modified, bold; /* set field attr*/
    set KL01M005.CL01MTYP[1] cursor, modified, bold; /* set field attr*/
    set KL01M005.CL01MLMT[1] cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  if (KL01M005.CL01MFUN == "ADD") /* if 'add' and required fields*/
    if (KL01M005.XXXFSTNM not modified) /* not entered then show error*/
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(418); /* 'these fields are required'*/
      KL01M005.XXXFSTNM = "?";
      set KL01M005.XXXFSTNM cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    end
    ;
    ;
    if (KL01M005.XXXLSTNM not modified)
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(418); /* 'these fields are required'*/
      KL01M005.XXXLSTNM = "?";
      set KL01M005.XXXLSTNM cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    end
    ;
    ;
    if (KL01M005.CLYATHPW not modified)
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(418); /* 'these fields are required'*/
      KL01M005.CLYATHPW = "?";
      set KL01M005.CLYATHPW cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    end
    ;
    ;
    if (KL01M005.XXXUSRID not modified)
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(418); /* 'these fields are required'*/
      KL01M005.XXXUSRID = "?";
      set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    end
    ;
    ;
    if (KL01M005.CLYATHID not modified) /* entered show error message*/
      if (CLXREC.CLXERRF != "Y")
        KL01S27(); /* set all entered fields modified*/
      end
      converseLib.validationFailed(418); /* 'these fields are required'*/
      KL01M005.CLYATHID = 0;
      set KL01M005.CLYATHID cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
end // end KL01220

// update claim auth table line
Function KL01230()
   /* *************************************************************/
   /* *   this process updates the claim authorization table     **/
   /* *   to reflect what was entered on the authorization screen**/
   /* *************************************************************/
   /* * 03-15-92 BCOURT  Add CL_ISP_POP_AUTH_FL new field.       **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01230"; /* set current process name*/
  ;
  ;
  if (KL01M005.CLYATHID is modified
   || KL01M005.CL01MFUN is modified)
    CLYREC.CLYATHID = KL01M005.CLYATHID;
  end
  ;
  KL01901(); /* get claims authorization table line*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  if (KL01M005.CLYATHID is modified
   /* on an add the clyrec would not have*/
   || KL01M005.CL01MFUN is modified) /* been found and clyrec would have*/
    CLYREC.CLYATHID = KL01M005.CLYATHID;
                                   /* been cleared- so reload id*/
  end
  ;
  ;
  if (KL01M005.KUYSVRID is modified)
    CLYREC.KUYSVRID = KL01M005.KUYSVRID;
  end
  if (KL01M005.YCPCD is modified)
    CLYREC.YCPCD = KL01M005.YCPCD;
  end
  ;
  if (KL01M005.XXXUSRID is modified)
    CLYREC.XXXUSRID = KL01M005.XXXUSRID;
  end
  ;
  if (KL01M005.CL-ISP-POP-AUTH-FL is modified) /* 3-15-92 add field*/
    CLYREC.CL-ISP-POP-AUTH-FL = KL01M005.CL-ISP-POP-AUTH-FL;
  end
  ;
  if (KL01M005.CLYATHFL is modified)
    CLYREC.CLYATHFL = KL01M005.CLYATHFL;
  end
  ;
  if (KL01M005.CLYATHPW is modified)
    CLYREC.CLYATHPW = KL01M005.CLYATHPW;
  end
  ;
  if (KL01M005.XXXLSTNM is modified)
    CLYREC.XXXLSTNM = KL01M005.XXXLSTNM;
  end
  ;
  if (KL01M005.XXXFSTNM is modified)
    CLYREC.XXXFSTNM = KL01M005.XXXFSTNM;
  end
  ;
  if (KL01M005.XXXFSTNM is modified)
    CLYREC.XXXFSTNM = KL01M005.XXXFSTNM;
  end
  ;
  if (KL01M005.XXXMDINT is modified)
    CLYREC.XXXMDINT = KL01M005.XXXMDINT;
  end
  ;
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1PGMNM = "TA0040";
    TA1REC.TA1TBLKE = "GETTING CURRENT DATE";
    XPCL010();
  else
    if (KL01M005.CL01MFUN == "ADD")
      CLYREC.ZZZCHGCT = 0;
      CLYREC.ZZZSDT = TA2REC.TA2GRGGN;
      CLYREC.ZZZCHGDT = TA2REC.TA2GRGGN;
      CLYREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    else
      if (KL01M005.CL01MFUN == "CHG"
       || KL01M005.CL01MFUN == "DEL")
        CLYREC.ZZZCHGDT = TA2REC.TA2GRGGN;
        CLYREC.ZZZCHGTM = TA2REC.TA2TIMHM;
      else
         /* next sentence*/
      end
    end
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "ADD" /* if add set status to active*/
   || KL01M005.CL01MFUN == "CHG") /* active*/
    CLYREC.XXXSTAT = "A";
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "CHG"    /* if change and password was altered*/
   && KL01M005.CLYATHPW is modified /* reset status to active*/
   && KL01M005.CLYATHPW != " ")    
    CLYREC.XXXSTAT = "A";
  end
  ;
   /* move 20 lines of claim type and auth limits to table*/
  ;
  if (KL01M005.CL01MFUN == "CHG") /* change claim types and authorize*/
    CL01W01.CL01WIX2 = 1; /* limits changed on cl01m005*/
    while (CL01W01.CL01WIX2 <= 20)
      if (KL01M005.CL01MSCT[CL01WIX2] is modified)
        if (KL01M005.CL01MSCT[CL01WIX2] == "A")
          if (CLYREC.YCTCD[CL01WIX2] == " ")
            CLYREC.YCTCD[CL01WIX2] = KL01M005.CL01MTYP[CL01WIX2];
            CLYREC.CLYATHLM[CL01WIX2] = KL01M005.CL01MLMT[CL01WIX2];
          else
            converseLib.validationFailed(324); /* select code not valid*/
            set KL01M005.CL01MSCT[CL01WIX2] cursor, modified, bold;
            CLXREC.CLXERRF = "Y"; /* set attribute and error flag*/
          end
        end
        if (KL01M005.CL01MSCT[CL01WIX2] == "D")
          if (CLYREC.YCTCD[CL01WIX2] == KL01M005.CL01MTYP[CL01WIX2])
            CLYREC.YCTCD[CL01WIX2] = " ";
            CLYREC.CLYATHLM[CL01WIX2] = 0;
          else
            converseLib.validationFailed(324); /* select code not valid*/
            set KL01M005.CL01MSCT[CL01WIX2] cursor, modified, bold;
            CLXREC.CLXERRF = "Y"; /* set attribute and error flag*/
          end
        end
        if (KL01M005.CL01MSCT[CL01WIX2] == "C")
          if (CLYREC.YCTCD[CL01WIX2] == KL01M005.CL01MTYP[CL01WIX2])
            CLYREC.YCTCD[CL01WIX2] = KL01M005.CL01MTYP[CL01WIX2];
            CLYREC.CLYATHLM[CL01WIX2] = KL01M005.CL01MLMT[CL01WIX2];
          else
            converseLib.validationFailed(324); /* select code not valid*/
            set KL01M005.CL01MSCT[CL01WIX2] cursor, modified, bold;
            CLXREC.CLXERRF = "Y"; /* set attribute and error flag*/
          end
        end
      else
         /* next sentence*/
      end
      CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
    end
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "ADD") /* if add function then store all*/
                                   /* entered*/
    CL01W01.CL01WIX2 = 1; /* claim type data*/
    while (CL01W01.CL01WIX2 <= 20)
      if (KL01M005.CL01MSCT[CL01WIX2] is modified
       && KL01M005.CL01MSCT[CL01WIX2] == "A")
        CLYREC.YCTCD[CL01WIX2] = KL01M005.CL01MTYP[CL01WIX2];
        CLYREC.CLYATHLM[CL01WIX2] = KL01M005.CL01MLMT[CL01WIX2];
      else
        CLYREC.YCTCD[CL01WIX2] = " ";
        CLYREC.CLYATHLM[CL01WIX2] = 0;
      end
      CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
    end
  end
  ;
  if (KL01M005.CL01MFUN == "CHG" /* compress out blank claim type entrys*/
   || KL01M005.CL01MFUN == "ADD")
    CL01W01.CL01WIX1 = 1;
    CL01W01.CL01WIX2 = 1;
    while (CL01W01.CL01WIX2 <= 20)
      if (CLYREC.YCTCD[CL01WIX2] == " ")
        CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
      else
        CLYREC.YCTCD[CL01WIX1] = CLYREC.YCTCD[CL01WIX2];
        CLYREC.CLYATHLM[CL01WIX1] = CLYREC.CLYATHLM[CL01WIX2];
        CL01W01.CL01WIX1 = CL01W01.CL01WIX1 + 1;
        CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
      end
    end
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "CHG" /* blank out any remaining claim type*/
   || KL01M005.CL01MFUN == "ADD")
    while (CL01W01.CL01WIX1 <= 20)
      CLYREC.YCTCD[CL01WIX1] = " ";
      CLYREC.CLYATHLM[CL01WIX1] = 0;
      CL01W01.CL01WIX1 = CL01W01.CL01WIX1 + 1;
    end
  end
  ;
  ;
  ;
  if (KL01M005.CL01MFUN == "ADD") /* if add function, insert the line to the*/
    KL01906(); /* authorization table*/
  end
  ;
  if (KL01M005.CL01MFUN == "DEL")
                                   /* if delete then mark the authorization*/
    CLYREC.XXXSTAT = "I"; /* (deactivate the claim auth line)*/
    KL01907(); /* inactive and update the table line*/
  end
  ;
  if (KL01M005.CL01MFUN == "CHG" /* if change then update the data that*/
   && CLXREC.CLXERRF != "Y")    
    KL01907(); /* was modified*/
  end
  ;
   /* if inquire then just display the line*/
   /* fetched above*/
  ;
  if (CLXREC.CLXERRF != "Y")
    converseLib.validationFailed(349); /* display action complete msg*/
    if (KL01M005.CL01MFUN == "INQ")
      KL01M005.CLYATHID = CLYREC.CLYATHID;
      set KL01M005.CLYATHID modified;
      KL01M005.KUYSVRID = CLYREC.KUYSVRID;
      set KL01M005.KUYSVRID initialAttributes;
      KL01M005.YCPCD = CLYREC.YCPCD;
      set KL01M005.YCPCD initialAttributes;
      KL01M005.XXXUSRID = CLYREC.XXXUSRID;
      set KL01M005.XXXUSRID initialAttributes;
      KL01M005.CLYATHFL = CLYREC.CLYATHFL;
      set KL01M005.CLYATHFL initialAttributes;
      KL01M005.CL-ISP-POP-AUTH-FL = CLYREC.CL-ISP-POP-AUTH-FL;
      set KL01M005.CL-ISP-POP-AUTH-FL initialAttributes; /* 3-15-92 new field*/
      KL01M005.CLYATHPW = CLYREC.CLYATHPW;
      set KL01M005.CLYATHPW initialAttributes;
      KL01M005.XXXLSTNM = CLYREC.XXXLSTNM;
      set KL01M005.XXXLSTNM initialAttributes;
      KL01M005.XXXFSTNM = CLYREC.XXXFSTNM;
      set KL01M005.XXXFSTNM initialAttributes;
      KL01M005.XXXMDINT = CLYREC.XXXMDINT;
      set KL01M005.XXXMDINT initialAttributes;
      KL01M005.XXXSTAT = CLYREC.XXXSTAT;
      set KL01M005.XXXSTAT initialAttributes;
      CL01W01.CL01WIX2 = 1;
      while (CL01W01.CL01WIX2 <= 20)
        KL01M005.CL01MSCT[CL01WIX2] = " ";
        set KL01M005.CL01MSCT[CL01WIX2] initialAttributes;
        KL01M005.CL01MTYP[CL01WIX2] = CLYREC.YCTCD[CL01WIX2];
        set KL01M005.CL01MTYP[CL01WIX2] initialAttributes;
        KL01M005.CL01MLMT[CL01WIX2] = CLYREC.CLYATHLM[CL01WIX2];
        set KL01M005.CL01MLMT[CL01WIX2] initialAttributes;
        CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
      end
    else
      set KL01M005 initial; /* clear the map if not 'inq' or*/
      KL01M005.XXXRVNBR = 0; /* 'add' with 'xxx' in clm type #1.*/
      KL01M005.XXXCURDT = VGVar.currentShortGregorianDate;
    end
  end
  ;
  ;
end // end KL01230

// handle cl01m005 special entrys
Function KL01240()
   /* *************************************************************/
   /* *  handle cl01m005 sepcial entrys - exiting application    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01240"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is pf13) /* handle pf key 13 - transfer to*/
    KL01S13();
                                   /* ; authorization last name inquiry*/
    return;
  end
  ;
end // end KL01240

// find mn1rec line for userid
Function KL01250()
   /* *************************************************************/
   /* *   find mn1rec line for user id - to show userid is valid **/
   /* *************************************************************/
   /* SET MN2REC EMPTY;*/
  MN2REC.MN1KEY = " ";
  MN2REC.MN1TYPE1 = "2";
  MN2REC.MN1USER = KL01M005.XXXUSRID;
  MN2REC.MN1TYPE2 = "2";
  MN2REC.MN1APPL = MN2REC.MN1USER;
  ;
  ;
  try
    get MN1REC ;
  end
  ;
  ;
  if (MN1REC is noRecordFound)
    converseLib.validationFailed(354); /* show error message*/
    set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  else
    if (MN1REC is ioError)
      converseLib.validationFailed(354); /* show error message*/
      set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    else
       /* NEXT SENTENCE*/
    end
  end
  ;
  ;
end // end KL01250

// select unique auth table
Function KL01901()
   /* *************************************************************/
   /* *  select unique on clyrec (claim authorization table      **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("SA", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy, try later*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set CLYREC empty;
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01901"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLATH01"; /* table view name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
  ;
end // end KL01901

// select set-cylrec-using lst nm
Function KL01903()
   /* *************************************************************/
   /* *    SELECT SET ON CLYREC (VCLATH01) USING LAST NAME       **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("SS", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01903"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLATH01"; /* table view name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL01903

// fetch next clyrec line
Function KL01904()
   /* *************************************************************/
   /* *   fetch next clyrec (vclath01)                           **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("SN", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set CLYREC empty;
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01904"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLATH01"; /* table view name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL01904

// close cursor on clyrec
Function KL01905()
   /* *************************************************************/
   /* *   close cursor for clyrec (vclath01)                     **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("CS", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 0)
          /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01905"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLATH01"; /* table view name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL01905

// add line to auth table
Function KL01906()
   /* *************************************************************/
   /* *  insert a line in claim authorization table              **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("A ", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01906"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLATH01"; /* table view name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
  ;
end // end KL01906

// update line on auth table
Function KL01907()
   /* *************************************************************/
   /* *  update clyrec - claim auth table line - vclath01        **/
   /* *************************************************************/
  ;
  set SQLCA empty;
  call "IO2650" ("U ", SQLCA, CLYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy, try later*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL01907"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO2650"; /* location*/
        TA1REC.TA1DBASE = "VCLATH01"; /* database name*/
        CLXREC.XXXWDTE = KL01M005.CLYATHID;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
  ;
  ;
end // end KL01907

// pf3 exit to claims
Function KL01S03()
   /* *************************************************************/
   /* * skip edits / update, go to higher level in claims        **/
   /* *                                                          **/
   /* * ** your application may need to go elsewhere **          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  COMMAREA.CATOAP = "KL0A"; /* go to claims menu*/
  ;
  XPCL002(); /* common claims exit*/
  ;
  ;
end // end KL01S03

// pf4 exit to master menu
Function KL01S04()
   /* *************************************************************/
   /* *  skip edits / update, go to goal master menu             **/
   /* *************************************************************/
  ;
  XSPF4();
  ;
  ;
end // end KL01S04

// page back on cl01m001-pf7
Function KL01S07()
   /* *************************************************************/
   /* *                                                          **/
   /* * this process handles the entry of pf key 7               **/
   /* *      (paging backward)                                   **/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXMAPMX = CLXREC.CLXCURLN;
  if (CLXREC.CLXMAPMX <= 1)
    CLXREC.CLXCURLN = 1;
    converseLib.validationFailed(7);
  else
    CLXREC.CLXMAPMX = CLXREC.CLXMAPMX - CLXMAXLN[CLXSCRNX];
    if (CLXREC.CLXMAPMX <= 1)
      CLXREC.CLXCURLN = 1;
      converseLib.validationFailed(7);
    else
      CLXREC.CLXCURLN = CLXREC.CLXMAPMX;
    end
  end
  ;
  CLXREC.CLXARY1X = CLXREC.CLXCURLN;
  ;
  CLXREC.CLXBLDSC = "Y";
  ;
  ;
end // end KL01S07

// page frwd on cl01m001-pf8
Function KL01S08()
   /* *************************************************************/
   /* * this process handles the entry of pf key 8               **/
   /* *    (paging forward)                                      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (CLXREC.CLXCURLN <= 1)
    CLXREC.CLXCURLN = 1;
  end
  ;
  CLXREC.CLXMAPMX = CLXREC.CLXCURLN;
  CLXREC.CLXMAPMX = CLXREC.CLXMAPMX + CLXMAXLN[CLXSCRNX];
  if (CLXREC.CLXMAPMX > CLWREC.CLWMXIDX)
    converseLib.validationFailed(3); /* at end of data*/
  else
    CLXREC.CLXCURLN = CLXREC.CLXMAPMX;
    CLXREC.CLXMAPMX = CLXREC.CLXMAPMX + CLXMAXLN[CLXSCRNX];
    if (CLXREC.CLXMAPMX > CLWREC.CLWMXIDX)
      converseLib.validationFailed(3); /* at end of data*/
    end
  end
  ;
  CLXREC.CLXARY1X = CLXREC.CLXCURLN;
  ;
    /* force build new screen*/
  ;
  CLXREC.CLXBLDSC = "Y";
  ;
  ;
end // end KL01S08

// handle pf 13 transfer to m001
Function KL01S13()
   /* *************************************************************/
   /* *  handle pf13 transfer to map kl01m001                    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCSCRN = "KL01M001";
  ;
  CLXREC.CLXEOSF = "Y";
  ;
end // end KL01S13

// handle pf 14 transfer to m005
Function KL01S14()
   /* *************************************************************/
   /* * handle pf14 transfer to kl01m005                         **/
   /* *************************************************************/
  ;
  CLXREC.CLXCSCRN = "KL01M005";
  ;
  CLXREC.CLXEOSF = "Y";
  ;
end // end KL01S14

// save entered selects to array
Function KL01S21()
   /* *************************************************************/
   /* *  this statement group checks for any selections made by  **/
   /* *  the user on the product summary screen, and records     **/
   /* *  them in the line item array.                            **/
   /* *************************************************************/
  ;
  if (KL01M001.CL01MSEL[CLXLINEX] is modified)
    if (KL01M001.CL01MSEL[CLXLINEX] == " " /* no entry*/
     || KL01M001.CL01MSEL[CLXLINEX] == "V" /* marked as viewed*/
     || KL01M001.CL01MSEL[CLXLINEX] == "S") /* line selected*/
      CLWREC.CLWSELCD[CLWCLIDX] = KL01M001.CL01MSEL[CLXLINEX];
      CLXREC.CLXEDITF = "Y";
      set KL01M001.CL01MSEL[CLXLINEX] modified;
    else
      if (KL01M001.CL01MSEL[CLXLINEX] == "A" /* all lines selected*/
       && CLXREC.CLXLINEX == 1)              /* entered on line 1*/
        if (CLWREC.CLWCLIDX == 1)
          set KL01M001.CL01MSEL[CLXLINEX] modified;
          KL01S22(); /* set all entries in array to 's'*/
          CLXREC.CLXLINEX = 11; /* get out of loop*/
        else
          set KL01M001.CL01MSEL[CLXLINEX] modified;
          set KL01M001.CL01MSEL[CLXLINEX] cursor, bold;
          converseLib.validationFailed(8); /* invalid selection*/
          CLXREC.CLXERRF = "Y";
          CLXREC.CLXLINEX = 11;
        end
        CLXREC.CLXEDITF = "Y";
      else
        set KL01M001.CL01MSEL[CLXLINEX] modified;
        set KL01M001.CL01MSEL[CLXLINEX] cursor, bold;
        CLXREC.CLXEDITF = "Y";
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(8); /* invalid selection*/
      end
    end
  end
  ;
  CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1; /* set indexes for next line*/
  ;
end // end KL01S21

// set all select fields to s
Function KL01S22()
   /* *************************************************************/
   /* * this statement group has the chore of looping thru the   **/
   /* * line item array and marking each entry with an 's',      **/
   /* * because some user has decided to display all detail      **/
   /* * screens  for the selected last name.                     **/
   /* *                                                          **/
   /* *************************************************************/
  ;
      /* set index*/
  ;
  CLWREC.CLWCLIDX = 1;
  ;
    /* loop thru and mark each entry*/
  ;
  while (CLWREC.CLWCLIDX <= CLWREC.CLWMXIDX)
    CLWREC.CLWSELCD[CLWCLIDX] = "S";
    CLWREC.CLWCLIDX = CLWREC.CLWCLIDX + 1;
  end
  ;
  ;
end // end KL01S22

// modify entered fields
Function KL01S26()
   /* *************************************************************/
   /* *  since the map must be re-shown to the user before       **/
   /* *  editing has been done, set fields modified to keep      **/
   /* *  track of  all the fields entered by the user.           **/
   /* *  the user will only need to re-do the pf key or enter    **/
   /* *  key, not enter the data again.                          **/
   /* *************************************************************/
  ;
  ;
  if (KL01M001.XXXLSTNM is modified)
    set KL01M001.XXXLSTNM modified;
  end
  ;
  CL01W01.CL01WIX2 = 1;
  while (CL01W01.CL01WIX2 <= 14)
    if (KL01M001.CL01MSEL[CL01WIX2] is modified)
      set KL01M001.CL01MSEL[CL01WIX2] modified;
    end
    CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
  end
  ;
  ;
  ;
end // end KL01S26

// set cl01m005 fields modified
Function KL01S27()
   /* *************************************************************/
   /* * since the map must be re-shown to the user before editing**/
   /* * has been done, set fields moidfied to keep track of all  **/
   /* * the fields entered by the user. the user will only need  **/
   /* * to re-do the pf key or enter key, not enter the data     **/
   /* * again.                                                   **/
   /* *************************************************************/
   /* * 03-15-92 BCOURT Add CL_ISP_POP_AUTH_FL to map.           **/
   /* *************************************************************/
  ;
  ;
  if (KL01M005.CL01MFUN is modified)
    set KL01M005.CL01MFUN modified;
  end
  ;
  if (KL01M005.CLYATHID is modified)
    set KL01M005.CLYATHID modified;
  end
  ;
  ;
  if (KL01M005.XXXUSRID is modified)
    set KL01M005.XXXUSRID modified;
  end
  ;
  ;
  if (KL01M005.KUYSVRID is modified)
    set KL01M005.KUYSVRID modified;
  end
  ;
  ;
  if (KL01M005.CLYATHPW is modified)
    set KL01M005.CLYATHPW modified;
  end
  ;
  if (KL01M005.YCPCD is modified)
    set KL01M005.YCPCD modified;
  end
  ;
  ;
  if (KL01M005.CLYATHFL is modified)
    set KL01M005.CLYATHFL modified;
  end
  ;
  ;
  if (KL01M005.CL-ISP-POP-AUTH-FL is modified) /* 3-15-92 add field*/
    set KL01M005.CL-ISP-POP-AUTH-FL modified;
  end
  ;
  ;
  if (KL01M005.XXXSTAT is modified)
    set KL01M005.XXXSTAT modified;
  end
  ;
  ;
  if (KL01M005.XXXLSTNM is modified)
    set KL01M005.XXXLSTNM modified;
  end
  ;
  ;
  if (KL01M005.XXXFSTNM is modified)
    set KL01M005.XXXFSTNM modified;
  end
  ;
  ;
  if (KL01M005.XXXMDINT is modified)
    set KL01M005.XXXMDINT modified;
  end
  ;
  ;
  CL01W01.CL01WIX2 = 1;
  while (CL01W01.CL01WIX2 <= 20)
    ;
    if (KL01M005.CL01MSCT[CL01WIX2] is modified)
      set KL01M005.CL01MSCT[CL01WIX2] modified;
    end
    ;
    if (KL01M005.CL01MTYP[CL01WIX2] is modified)
      set KL01M005.CL01MTYP[CL01WIX2] modified;
    end
    ;
    if (KL01M005.CL01MLMT[CL01WIX2] is modified)
      set KL01M005.CL01MLMT[CL01WIX2] modified;
    end
    CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
    ;
  end
  ;
end // end KL01S27

// build line to show on cl01m001
Function KL01S37()
   /* *************************************************************/
   /* *  build line to show on map                               **/
   /* *************************************************************/
  ;
   /* if not at end of array or at end of map lines*/
       /* move line to map.*/
  ;
  ;
  if (CLWREC.CLWCLIDX < 200)
    if (CLWREC.CLWSELCD[CLWCLIDX] == "V")
      KL01M001.CL01MSEL[CLXLINEX] = CLWREC.CLWSELCD[CLWCLIDX];
    else
      if (CLWREC.CLWSELCD[CLWCLIDX] == "S")
        KL01M001.CL01MSEL[CLXLINEX] = CLWREC.CLWSELCD[CLWCLIDX];
        set KL01M001.CL01MSEL[CLXLINEX] modified;
      else
        if (CLWREC.CLWCLIDX <= CLWREC.CLWMXIDX)
          KL01M001.CL01MSEL[CLXLINEX] = " ";
        else
          set KL01M001.CL01MSEL[CLXLINEX] skip, invisible;
        end
      end
    end
    ;
    KL01M001.CL01MSEL[CLXLINEX] = CLWREC.CLWSELCD[CLWCLIDX];
    KL01M001.CL01MATH[CLXLINEX] = CL01W05.CLYATHID[CLWCLIDX];
    KL01M001.CL01MREP[CLXLINEX] = CL01W05.KUYSVRID[CLWCLIDX];
    KL01M001.CL01MCOP[CLXLINEX] = CL01W05.YCPCD[CLWCLIDX];
    KL01M001.CL01MLNM[CLXLINEX] = CL01W05.XXXLSTNM[CLWCLIDX];
    ;
  else
    KL01M001.CL01MSEL[CLXLINEX] = CLWREC.CLWSELCD[CLWCLIDX];
    KL01M001.CL01MATH[CLXLINEX] = CL01W05.CLYATHID[CLWCLIDX];
    KL01M001.CL01MREP[CLXLINEX] = CL01W05.KUYSVRID[CLWCLIDX];
    KL01M001.CL01MCOP[CLXLINEX] = CL01W05.YCPCD[CLWCLIDX];
    KL01M001.CL01MLNM[CLXLINEX] = CL01W05.XXXLSTNM[CLWCLIDX];
    set KL01M001.CL01MSEL[CLXLINEX] skip, invisible;
    CLWREC.CLWCLIDX = 199;
  end
  ;
  ;
end // end KL01S37

// edit last name field-cl01m001
Function KL01S50()
   /* *************************************************************/
   /* *    edit last name field                                  **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01S50"; /* set current process name*/
  ;
  ;
  if (KL01M001.XXXLSTNM != " ")
    set KL01M001.XXXLSTNM initialAttributes;
  else
    converseLib.validationFailed(21); /* show name invalid msg*/
    set KL01M001.XXXLSTNM cursor, modified, bold; /* set field attribute*/
    CLXREC.CLXERRF = "Y";
  end
end // end KL01S50

// edit claim authorized by id
Function KL01S51()
   /* *************************************************************/
   /* *  edit claim authorized by id                             **/
   /* *                                                          **/
   /* *  authorized by id  must be entered for all functions.    **/
   /* *  if function is 'add', the authorized by id must not     **/
   /* *  already exist in the claim authorization table.         **/
   /* *  if function is 'del', 'chg', or 'del' then the authorize**/
   /* *  by id must exist in the claim authorization table.      **/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (KL01M005.CLYATHID == 0)
    converseLib.validationFailed(21); /* show error message*/
    set KL01M005.CLYATHID cursor, modified, bold; /* set attribute field*/
    CLXREC.CLXERRF = "Y";
  else
    CLYREC.CLYATHID = KL01M005.CLYATHID;
    KL01901(); /* select claim authorization line*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if function is add and auth line*/
     /* found*/
     && KL01M005.CL01MFUN == "ADD") /* SHOW ERROR MESSAGE*/
      converseLib.validationFailed(352); /* show error field*/
      set KL01M005.CLYATHID cursor, modified, bold; /* set attribute field*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != 0 /* if function not 'add' and auth line*/
       && KL01M005.CL01MFUN != "ADD") /* was not found,*/
        converseLib.validationFailed(78); /* show error message*/
        set KL01M005.CLYATHID cursor, modified, bold;
                                   /* set attribute field*/
        CLXREC.CLXERRF = "Y";
      else
        set KL01M005.CL01MFUN initialAttributes; /* RESET COLOR*/
      end
    end
  end
  ;
  ;
end // end KL01S51

// edit service rep id
Function KL01S53()
   /* *************************************************************/
   /* *  edit service rep id from map cl01m005                   **/
   /* *     may be entered only for add or change.               **/
   /* *     may be zero.                                         **/
   /* *     if not zero and function is 'add' then it must not   **/
   /* *        already be in the authorization table.            **/
   /* *     if not zero and function is 'chg' then is must already*/
   /* *        be in the authorization table.                    **/
   /* *     if not zero and function is 'add' or 'chg' then svc  **/
   /* *        rep id must be in the xsv table.                  **/
   /* *************************************************************/
  ;
  if (KL01M005.KUYSVRID == 0)
    set KL01M005.KUYSVRID initialAttributes; /* reset color*/
  else
    if (KL01M005.CL01MFUN != "ADD"
     && KL01M005.CL01MFUN != "CHG")
      converseLib.validationFailed(325); /* show function invalid message*/
      set KL01M005.KUYSVRID cursor, modified, bold; /* set field attribute*/
      CLXREC.CLXERRF = "Y";
    else
      KUYREC.KUYSVRID = KL01M005.KUYSVRID;
      KL01S65(); /* get dcust.vsvrep01 line*/
      if (SQLCA.VAGen_SQLCODE != 0) /* if line not found*/
        converseLib.validationFailed(135); /* show function invalid message*/
        set KL01M005.KUYSVRID cursor, modified, bold; /* set field attr*/
        CLXREC.CLXERRF = "Y";
      else
        ;
         /* what is needed here is a call to the clyrec to find any*/
         /* line that already has the service rep id.*/
        ;
        ;
        /* MOVE CL01M005.kuysvrid TO CLYREC.kuysvrid; check for dupl lne*/
        /* MOVE 'A' TO CLYREC.XXXSTAT       ; line having save svc rep*/
        /* CALL IO2650 'SC',SQLCA,CLYREC (nomaps,noncsp; get clm au ln*/
        /* IF CL01M005.CL01FCTN = 'ADD';*/
          /* AND SQLCA.SQLCODE = 0;*/
          /* MOVE 326 TO EZEMNO      ; show function invalid message*/
          /* SET CL01M005.kuysvrid CURSOR,MODIFIED,BRIGHT; set field attr*/
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
        /* ELSE ;*/
          /* IF CL01M005.CL01FCTN = 'CHG';*/
            /* AND SQLCA.SQLCODE ^= 0;*/
        /* MOVE 135 TO EZEMNO    ; show function invalid message*/
        /* SET CL01M005.kuysvrid CURSOR,MODIFIED,BRIGHT; set field attr*/
            /* MOVE 'Y' TO CLXREC.CLXERRF;*/
          /* ELSE ;*/
        set KL01M005.KUYSVRID initialAttributes; /* reset color*/
               /* END ;*/
             /* END ;*/
      end
    end
  end
  ;
  ;
end // end KL01S53

// edit coop analyst id
Function KL01S54()
   /* *************************************************************/
   /* *  edit coop analyst id from map cl01m005.                 **/
   /* *     may be entered only for add or change.               **/
   /* *     may be zero.                                         **/
   /* *     if not zero and function is 'add' then it must not   **/
   /* *       already be in the authorization table.             **/
   /* *     if not zero and function is 'chg' then it must       **/
   /* *       already be in the authorization table.             **/
   /* *     if not zero and function is 'add' or 'chg' then coop **/
   /* *       analyst id must be in the ycp table.               **/
   /* *************************************************************/
  ;
  if (KL01M005.YCPCD == 0)
    set KL01M005.YCPCD initialAttributes; /* reset color*/
  else
    if (KL01M005.CL01MFUN != "ADD"
     && KL01M005.CL01MFUN != "CHG")
      converseLib.validationFailed(327); /* show error message*/
      set KL01M005.YCPCD cursor, modified, bold; /* set field attribute*/
      CLXREC.CLXERRF = "Y";
    else
      CL01W01.YCPCD = KL01M005.YCPCD;
      ;
      if (CL01W01.YCPCD in YCPTBL.YCPCD)
         /* next sentence*/
      else
        /* ** IF CL01W01.YCPCD *not* IN YCPTBL.YCPCD;*/
        converseLib.validationFailed(353); /* show error message*/
        set KL01M005.YCPCD cursor, modified, bold; /* set field attrib*/
        CLXREC.CLXERRF = "Y";
      end
    end
  end
  ;
   /* what is needed here is a call to the io-mod to find*/
   /* clyrec line that already has the coop analyst code*/
  ;
   /* IF CL01M005.YCPCD ^= 0;*/
    /* AND CLXREC.CLXERRF ^= 'Y';*/
    /* MOVE CL01M005.YCPCD TO CLYREC.YCPCD;*/
    /* MOVE 'A' TO CLYREC.XXXSTAT;*/
    /* CALL IO2650 'SD',SQLCA,CLYREC (nomaps,noncsp;*/
    /* IF CL01M005.CL01FCTN = 'ADD';*/
      /* AND SQLCA.SQLCODE = 0;*/
      /* MOVE 327 TO EZEMNO          ; show error message*/
      /* SET CL01M005.YCPCD CURSOR,MODIFIED,BRIGHT;set field attr*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* ELSE ;*/
      /* IF CL01M005.CL01FCTN = 'CHG';*/
        /* AND SQLCA.SQLCODE ^= 0;*/
        /* MOVE 353 TO EZEMNO        ; show error message*/
    /* SET CL01M005.YCPCD CURSOR,MODIFIED,BRIGHT; set field attr*/
        /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* ELSE ;*/
        /* SET CL01M005.YCPCD DEFINED       ; reset color*/
      /* END ;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
end // end KL01S54

// edit user id
Function KL01S56()
   /* *************************************************************/
   /* *  edit user id and password                               **/
   /* *                                                          **/
   /* *  user id must be present for 'add' function.             **/
   /* *  user id must not already be in the authorization table  **/
   /* *    for 'add' function.                                   **/
   /* *  user id may be entered with the 'chg' function.         **/
   /* *  if user id is entered, then password must also be entered*/
   /* *  user id and password are valid only if proper line      **/
   /* *    exists on mn1rec security record.                     **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (KL01M005.XXXUSRID == " "
   && KL01M005.CL01MFUN == "ADD")
    converseLib.validationFailed(377); /* show error message*/
    set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  else
    if (KL01M005.XXXUSRID is modified
     && KL01M005.XXXUSRID == " "
     && KL01M005.CL01MFUN == "CHG")
      converseLib.validationFailed(377); /* show error message*/
      set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    else
      if (KL01M005.XXXUSRID != " "
       && KL01M005.CLYATHPW == " ")
        converseLib.validationFailed(354); /* show error message*/
        set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
        set KL01M005.CLYATHPW cursor, modified, bold; /* set field attr*/
        CLXREC.CLXERRF = "Y";
      else
        ;
        KL01250(); /* get security table line*/
        if (MN1REC is ioError /* if line not found or file error:*/
         || MN1REC is noRecordFound)
          converseLib.validationFailed(354); /* show error message*/
          set KL01M005.XXXUSRID cursor, modified, bold; /* set field attr*/
          set KL01M005.CLYATHPW cursor, modified, bold; /* set field attr*/
          CLXREC.CLXERRF = "Y";
        else
          set KL01M005.XXXUSRID initialAttributes; /* reset color*/
          set KL01M005.CLYATHPW initialAttributes; /* reset color*/
        end
      end
    end
  end
  ;
end // end KL01S56

// edit traffic auth flag
Function KL01S58()
   /* *************************************************************/
   /* *  edit traffic authorization flag                         **/
   /* *                                                          **/
   /* * traffic flag must be 'y', 'n', or ' '.                   **/
   /* * if fucntion is add and no traffic flag is entered,       **/
   /* *   the value will default to 'n'.                         **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (KL01M005.CLYATHFL != "Y"
   && KL01M005.CLYATHFL != "N"
   && KL01M005.CLYATHFL != " ")
    converseLib.validationFailed(346); /* ; show error message*/
    set KL01M005.CLYATHFL cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  else
    set KL01M005.CLYATHFL initialAttributes; /* reset color*/
    if (KL01M005.CL01MFUN == "ADD"
     && KL01M005.CLYATHFL == " ")
      KL01M005.CLYATHFL = "N";
    end
  end
  ;
  ;
end // end KL01S58

// edit last name
Function KL01S59()
   /* *************************************************************/
   /* *  edit first name, last name, middle initial              **/
   /* *                                                          **/
   /* *  only the last name is required with the 'add' function. **/
   /* *  other functions do not require any name or initial.     **/
   /* *************************************************************/
  ;
  if (KL01M005.XXXLSTNM == " "
   && KL01M005.CL01MFUN == "ADD")
    converseLib.validationFailed(347); /* show error message*/
    set KL01M005.XXXLSTNM cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  else
    if (KL01M005.XXXLSTNM is modified
     && KL01M005.XXXLSTNM == " "
     && KL01M005.CL01MFUN == "CHG")
      converseLib.validationFailed(347); /* show error message*/
      set KL01M005.XXXLSTNM cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    else
      set KL01M005.XXXFSTNM initialAttributes;
    end
  end
  ;
  ;
  ;
  if (KL01M005.XXXFSTNM == " "
   && KL01M005.CL01MFUN == "ADD")
    converseLib.validationFailed(347); /* show error message*/
    set KL01M005.XXXFSTNM cursor, modified, bold; /* set field attr*/
    CLXREC.CLXERRF = "Y";
  else
    if (KL01M005.XXXFSTNM is modified
     && KL01M005.XXXFSTNM == " "
     && KL01M005.CL01MFUN == "CHG")
      converseLib.validationFailed(347); /* show error message*/
      set KL01M005.XXXFSTNM cursor, modified, bold; /* set field attr*/
      CLXREC.CLXERRF = "Y";
    else
      set KL01M005.XXXFSTNM initialAttributes;
    end
  end
  ;
  ;
  if (KL01M005.XXXMDINT is modified)
    set KL01M005.XXXMDINT initialAttributes;
  end
  ;
end // end KL01S59

// edit ISP/POP auth flag
Function KL01S60()
  /* GET KL01S58*/
   /* *************************************************************/
   /* *  edit in-store-promo/point-of-purchase authorization flag**/
   /* *                                                          **/
   /* * flag must be 'y', 'n', or ' '.                           **/
   /* * if function is add and no flag is entered,               **/
   /* *   the value will default to 'n'.                         **/
   /* *                                                          **/
   /* * 03-15-92 BCOURT Add this statement group for new map field*/
   /* *************************************************************/
  ;
  if (KL01M005.CL-ISP-POP-AUTH-FL != "Y"
   && KL01M005.CL-ISP-POP-AUTH-FL != "N"
   && KL01M005.CL-ISP-POP-AUTH-FL != " ")
    converseLib.validationFailed(318); /* ; valid code is 'y', 'n' or ' '*/
    set KL01M005.CL-ISP-POP-AUTH-FL cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    set KL01M005.CL-ISP-POP-AUTH-FL initialAttributes; /* reset color*/
    if (KL01M005.CL01MFUN == "ADD"
     && KL01M005.CL-ISP-POP-AUTH-FL == " ")
      KL01M005.CL-ISP-POP-AUTH-FL = "N";
    end
  end
  ;
  ;
end // end KL01S60

// edit select field
Function KL01S62()
   /* *************************************************************/
   /* * edit the select code, claim type and claim limit         **/
   /* *                                                          **/
   /* * the select may be: 'a','d', ' ' or 'c'.                  **/
   /* * if function is 'add' and the select code is blank and    **/
   /* *   the claim type is non blank, then default select code  **/
   /* *   to 'a'.                                                **/
   /* * if function is 'add' then there must be at least one     **/
   /* *   non blank select code.                                 **/
   /* * if function is 'add' then all entered select codes must  **/
   /* *   be equal to 'a' or ' '.                                **/
   /* * all non blank claim types must be a value found on the yct*/
   /* *  table, or the values 'xxx' or '   '.                    **/
   /* * if the claim type is 'xxx', then create a type occurance **/
   /* *   for each line on the claim type table (except for 999).**/
   /* *   reproduce the authorized amount for each claim type    **/
   /* *   generated from the claim type table. claim type 'xxx'  **/
   /* *   is only valid for the 'add' function.                  **/
   /* * if claim type is not blank then authorize amount must be **/
   /* *   non zero.                                              **/
   /* *************************************************************/
  ;
  if (CL01WIX2 == 1
   && KL01M005.CL01MTYP[CL01WIX2] == "XXX")
    CL01W01.CL01WIX1 = 1;
    while (CL01W01.CL01WIX1 <= 20
     && YCTTBL.YCTCD[CL01WIX1] != "999")
      KL01M005.CL01MTYP[CL01WIX1] = YCTTBL.YCTCD[CL01WIX1];
      KL01M005.CL01MSCT[CL01WIX1] = KL01M005.CL01MSCT[CL01WIX2];
      KL01M005.CL01MLMT[CL01WIX1] = KL01M005.CL01MLMT[CL01WIX2];
      set KL01M005.CL01MTYP[CL01WIX1] modified;
      set KL01M005.CL01MSCT[CL01WIX1] modified;
      set KL01M005.CL01MLMT[CL01WIX1] modified;
      CL01W01.CL01WIX1 = CL01W01.CL01WIX1 + 1;
    end
    converseLib.validationFailed(348); /* show error message*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  if (KL01M005.CL01MSCT[CL01WIX2] != "A"
   && KL01M005.CL01MSCT[CL01WIX2] != "C"
   && KL01M005.CL01MSCT[CL01WIX2] != "D"
   && KL01M005.CL01MSCT[CL01WIX2] != " ")
    converseLib.validationFailed(324); /* show error message*/
    set KL01M005.CL01MSCT[CL01WIX2] cursor, modified, bold; /* set attr*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
  if (KL01M005.CL01MFUN == "ADD") /* for 'add', select field may be*/
    if (KL01M005.CL01MSCT[CL01WIX2] == "A" /* 'a' or blank. other values are*/
     || KL01M005.CL01MSCT[CL01WIX2] == " ") /* not valid.*/
       /* next sentence*/
    else
      converseLib.validationFailed(324); /* show error message*/
      set KL01M005.CL01MSCT[CL01WIX2] cursor, modified, bold; /* set attr*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
  if (KL01M005.CL01MTYP[CL01WIX2] != " ")
    if (KL01M005.CL01MLMT[CL01WIX2] == 0
     || KL01M005.CL01MLMT[CL01WIX2] > 999999999)
      converseLib.validationFailed(355); /* show error message*/
      set KL01M005.CL01MLMT[CL01WIX2] cursor, modified, bold; /* set attr*/
      set KL01M005.CL01MTYP[CL01WIX2] cursor, modified, bold; /* set attr*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  if (KL01M005.CL01MTYP[CL01WIX2] != " ") /* if type is in type table*/
    CL01W01.CL01WSEL = CL01W01.CL01WSEL + 1;
                                   /* add 1 to selected lines count*/
    if (KL01M005.CL01MTYP[CL01WIX2] in YCTTBL.YCTCD)
       /* next sentnece*/
    else
      converseLib.validationFailed(87); /* show error message*/
      set KL01M005.CL01MTYP[CL01WIX2] cursor, modified, bold; /* set attr*/
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
end // end KL01S62

// read dcust.vsvrep01 line
Function KL01S65()
   /* *************************************************************/
   /* *  read dcust.vsvrep01 line                                **/
   /* *************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec empty.*/
   /* *************************************************************/
  ;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* read vsvrep01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25);
                                   /* what is the message for rep not found*/
      return;
    else
      set TA1REC empty;
      TA1REC.TA1TYPE = "DB2"; /* if db2 error set up error message*/
      TA1REC.TA1FUNC = "ABND ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSVREP01";
      TA1REC.TA1MAP = " ";
      CL01W01.CL01WKEY = KUYREC.KUYSVRID; /* move svc rep id to edit fld*/
      TA1REC.TA1TBLKE = CL01W01.CL01WKEY;
                                   /* move svc rep id to key fld*/
      TA1REC.TA1PGMNM = "CL01S65";
      TA1REC.TA1LOC = "READING DB2 VSVREP01";
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
  end
  ;
  ;
end // end KL01S65

// edit select fields - cl01m001
Function KL01S66()
   /* *************************************************************/
   /* **  edit select indicators for all input lines             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL01S66"; /* set current process name*/
  ;
  if (KL01M001.CL01MSEL[CL01WIX2] is modified)
    if (KL01M001.CL01MSEL[CL01WIX2] == "S"
     && KL01M001.CL01MATH[CL01WIX2] > 0)
      set KL01M001.CL01MSEL[CL01WIX2] initialAttributes; /* reset color*/
      CL01W01.CL01WCT1 = CL01W01.CL01WCT1 + 1;
    else
      if (KL01M001.CL01MSEL[CL01WIX2] == "V"
       && KL01M001.CL01MATH[CL01WIX2] > 0)
        set KL01M001.CL01MSEL[CL01WIX2] initialAttributes; /* reset color*/
      else
        if (KL01M001.CL01MSEL[CL01WIX2] == " ")
          set KL01M001.CL01MSEL[CL01WIX2] initialAttributes; /* reset color*/
        else
          converseLib.validationFailed(8); /* show select invalid message*/
          set KL01M001.CL01MSEL[CL01WIX2] cursor, modified, bold;
           /* set field attribute for error*/
          CLXREC.CLXERRF = "Y";
        end
      end
    end
  end
  CL01W01.CL01WIX2 = CL01W01.CL01WIX2 + 1;
  ;
end // end KL01S66

// show ycarec from map 1 select
Function KL01S67()
   /* *************************************************************/
   /* *  --- cl01s67 ---                                         **/
   /* * search for 's' entrys in cl01m05  table. when one is     **/
   /* * found then move 'inq' to action, move auth by id to      **/
   /* * cl01m005 map, turn off cl01m05 's' entry (set to 'v').   **/
   /* * repeat until no move 's' entrys, at which time control   **/
   /* * is returned to process for cl01m001.                     **/
   /* *************************************************************/
  ;
  CL01W01.CL01WIX1 = 1;
  CL01W01.CL01WIX2 = 0;
  while (CL01W01.CL01WIX1 <= 200
   && CL01W05.CLYATHID[CL01WIX1] != 0
   && CL01W01.CL01WIX1 <= CLWREC.CLWMXIDX)
    if (CLWREC.CLWSELCD[CL01WIX1] == "S")
      set KL01M005 initial;
      KL01M001.XXXRVNBR = "1"; /* also change CL01000 revision nbr*/
      KL01M001.XXXCURDT = VGVar.currentShortGregorianDate;
      KL01M005.CLYATHID = CL01W05.CLYATHID[CL01WIX1];
      KL01M005.CL01MFUN = "INQ";
      set KL01M005.CLYATHID modified;
      set KL01M005.CL01MFUN modified;
      KL01S70(); /* get clyrec and move data to map 5*/
      CL01W01.CL01WIX2 = CL01W01.CL01WIX1;
      CL01W01.CL01WIX1 = 201;
    else
      CL01W01.CL01WIX1 = CL01W01.CL01WIX1 + 1;
    end
  end
  ;
    /* if no more 's' select fields then execute cl01s13 to make*/
      /* the application switch to process cl01100*/
  ;
  if (CL01W01.CL01WIX2 > 0
   && CLWREC.CLWSELCD[CL01WIX2] == "S")
    CLWREC.CLWSELCD[CL01WIX2] = "V";
  else
    converseLib.validationFailed(3);
    set KL01M005.CL01MFUN cursor, modified, bold; /* set field attr*/
  end
  ;
  ;
end // end KL01S67

// get clyrec and move to map5
Function KL01S70()
   /* *************************************************************/
   /* *  cl01s70                                                 **/
   /* *  get clyrec and move data to cl01m005. this is done when **/
   /* *  the user enters pf14 to show the next clyrec from those **/
   /* *  selected from the list on cl01m001.                     **/
   /* *************************************************************/
   /* 03-15-92 BCOURT Add CL_ISP_POP_AUTH_FL to map.             **/
   /* 10-12-92 twatso rename xsvcd to kuysvrid for database changes*/
   /* *************************************************************/
  ;
  CLYREC.CLYATHID = KL01M005.CLYATHID;
  ;
  KL01901(); /* get claims authorization line*/
  ;
  if (CLXREC.CLXERRF == "Y") /* if not found, return now and let*/
    return; /* not found message be shown*/
  end
  ;
  converseLib.validationFailed(349); /* show action completed message*/
   /* MOVE CLYREC.XSVCD TO KL01M005.XSVCD;*/
  KL01M005.KUYSVRID = CLYREC.KUYSVRID;
  set KL01M005.KUYSVRID initialAttributes;
   /* SET KL01M005.XSVCD DEFINED;*/
  KL01M005.YCPCD = CLYREC.YCPCD;
  set KL01M005.YCPCD initialAttributes;
  KL01M005.XXXUSRID = CLYREC.XXXUSRID;
  set KL01M005.XXXUSRID initialAttributes;
  KL01M005.CLYATHFL = CLYREC.CLYATHFL;
  set KL01M005.CLYATHFL initialAttributes;
  KL01M005.CL-ISP-POP-AUTH-FL = CLYREC.CL-ISP-POP-AUTH-FL;
  set KL01M005.CL-ISP-POP-AUTH-FL initialAttributes; /* 3-15-92 new field*/
  KL01M005.CLYATHPW = CLYREC.CLYATHPW;
  set KL01M005.CLYATHPW initialAttributes;
  KL01M005.XXXLSTNM = CLYREC.XXXLSTNM;
  set KL01M005.XXXLSTNM initialAttributes;
  KL01M005.XXXFSTNM = CLYREC.XXXFSTNM;
  set KL01M005.XXXFSTNM initialAttributes;
  KL01M005.XXXMDINT = CLYREC.XXXMDINT;
  set KL01M005.XXXMDINT initialAttributes;
  KL01M005.XXXSTAT = CLYREC.XXXSTAT;
  set KL01M005.XXXSTAT initialAttributes;
  CL01W01.CL01WIX3 = 1;
  while (CL01W01.CL01WIX3 <= 20)
    KL01M005.CL01MSCT[CL01WIX3] = " ";
    set KL01M005.CL01MSCT[CL01WIX3] initialAttributes;
    KL01M005.CL01MTYP[CL01WIX3] = CLYREC.YCTCD[CL01WIX3];
    set KL01M005.CL01MTYP[CL01WIX3] initialAttributes;
    KL01M005.CL01MLMT[CL01WIX3] = CLYREC.CLYATHLM[CL01WIX3];
    set KL01M005.CL01MLMT[CL01WIX3] initialAttributes;
    CL01W01.CL01WIX3 = CL01W01.CL01WIX3 + 1;
  end
  ;
  ;
end // end KL01S70

//*** RECORD=CL01W01 ****
// ************************************************************
// *   CL01w01 is the working storage record used by the cl01 *
// *   application to pass switches and other data between    *
// *   statement groups and processes in cl01.               **
// ************************************************************
// ***********************
Record CL01W01 type basicRecord
  10 CL01WSLT CL01WSLT ; 
  10 CL01WMX2 CL01WMX2 ; 
  10 CL01WIX1 CL01WIX1 ; 
  10 CL01WIX2 CL01WIX2 ; 
  10 CL01WIX3 CL01WIX3 ; 
  10 CL01WCT1 CL01WCT1 ; 
  10 CL01WSEL CL01WSEL ; 
  10 CL01WUSR CL01WUSR ; 
  10 CL01WMDY CL01WMDY ; 
    15 CL01WMM CL01WMM ; 
    15 CL01WDD CL01WDD ; 
    15 CL01WYY CL01WYY ; 
  10 CL01WSQL CL01WSQL ; 
  10 CL01WKEY CL01WKEY ; 
  10 CL01WDY2 CL01WDY2 ; 
  10 YCPCD YCPCD ; 
end // end CL01W01

//*** RECORD=CL01W05 ****
// ;**********************************************************
// ;* cl01w05 is the working storage area used by the cl01   *
// ;* application to store up to 200 lines of claim author-  *
// ;* ization data. the data is used to display key inforamt-*
// ;* ion on map cl01m001.                                   *
// ;**********************************************************
// ***********************
Record CL01W05 type basicRecord
  10 CLYATHID CLYATHID [200] ; 
  10 KUYSVRID KUYSVRID [200] ; 
  10 YCPCD YCPCD [200] ; 
  10 XXXLSTNM XXXLSTNM [200] ; 
  10 XXXSTAT XXXSTAT [200] ; 
  10 CL01WLST CL01WLST ; 
end // end CL01W05

// SELECTED LINES COUNT
DataItem CL01WCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date-day
DataItem CL01WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work key
DataItem CL01WDY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index #1
DataItem CL01WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index #2
DataItem CL01WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index #3
DataItem CL01WIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work key
DataItem CL01WKEY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LAST NAME KEY
DataItem CL01WLST char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DATE-month,day,year
DataItem CL01WMDY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date-month
DataItem CL01WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum index value
DataItem CL01WMX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select field count
DataItem CL01WSEL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select field
DataItem CL01WSLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for sqlca/reset
DataItem CL01WSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COMMAREA USER ID
DataItem CL01WUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date-year
DataItem CL01WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

