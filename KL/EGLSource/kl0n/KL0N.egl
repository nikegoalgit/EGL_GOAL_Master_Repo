package kl0n;

import as1.common.ARCCCREF;
import as1.common.ARCCHKNB;
import as1.common.ARCREFNB;
import corpcom1.*;
import corpcom2.XQWREC;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSFL;
import corpcom4.XSENTRY;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XOTTBL;
import corpx1.XSOTBL;
import corpx1.XSTTBL;
import corpx1.XVOTBL;
import corpx1.XWHTBL;
import corpy2.YATTBL;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSCD;
import corpy2.YCTCD;
import corpy2.YCTTBL;
import corpy2.YITCD;
import corpy2.YITTBL;
import corpy2.YUATBL;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import iv.common.IV0GROUP;
import iv.common.IV0IVCDT;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV0REC;
import iv.common.IV5REC;
import iv.common.IV6REC;
import iv.common.IVAGROUP;
import iv.common.IVAREC;
import ku.common.KUCBLAID;
import ku.common.KUCGRPID;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSHAID;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pf.common.PFJREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import vv.common.VLVLPY01;
import vv.common.VXVO0001;
//*** PROGRAM=KL0N ****
// ************************************************************
//    Additional Customer Claim Nbrs and/or Invoices
// 
// overview:  This application allows credit department to
//            enter customer claim numbers and additional
//            invoices.  These are used to create one claim
//            from multiple sources.
// 
//            The invoices are grouped by group company ID
//            customer PO, and ???????????
// 
//            A record can be changed by either putting a
//            selection code (p, x) in the first field or
//            typing in the desired change over the current
//            record.
//            Sel code 'p' will change the invoice to be the
//            'p'rimary invoice for the claim:  the one that
//            appears on KL0E, the Claim Header screen.
//            Sel code 'x' will delete the line.
// 
// 
// maintence history:
// date      by     rev description of change
// --------  ------ --- --------------------------------------
// 05/30/87  lholco 0  create application
// 01-13-88  bcourt 1  Change p.o. # on map from 20 to 25 char.
//                     Drop cldrec and clfrec since not used.
//                     On RTS claim type, allow add of invoice
//                       with p.o. # diff than primary invoice.
// 01-20-88  bcourt 1  On RTS claim type, edit new ivc has same
//                       DEC order type translation group as
//                       primary invoice, use new CL0NT01 tbl.
// 04-19-88  bcourt 2  Change CL0NT01 to YDOTBL, maintained by
//                       Data Administration.
// 
// 08-02-88  ctrouw 3  database changes
// 02-03-89  jwood  -  added noncsp option to calls
// 02-03-89  jwood  -  added xssegtr logic
// 02-21-89  gdecke -  removed sales office edit in cl0on120
// 05-16-89  gdecke -  DB2 structure changes: clarec, clirec,
//                     kucrec, xwhtbl.
// 09-22-89  bcourt -  remove 5-16 ref to unused tbl: X CT;
//                     & recs: SY C, SY 2.
// 01-19-90  chellm -  DB2 structure changes regen only
// 05-31-90  chellm -  Added Invoice Brand - Claim Brand code
//                     mis-match edit to CL0N120.
// 08-10-90  chellm -  Added edit for Comp-co.  If the claim
//                     has a Comp-co-id, then all additional
//                     invoiced must have = Comp-co-id or
//                     Comp-co-id = 0.
// 10-04-90  chellm -  Added XUMCD and XQACD as wild card valus
//                     when selecting RAITM rows.
// 10-08-90  chellm -  REmoved XCUTBL from tables list. It's no
//                     longer used in the application.
// 01-04-91  sgorga    Renamed KUABLID to KUCBLAID in cl0nw01.
//                     Removed references to KUAREC because it
//                     will be deleted with Feb DB2 changes.
//                     Made changes to cl0n009,150,157,160,s91.
//                     See comments in processes.
// 01-15-91 chellm     Added CL0NS21 which check the invoice
//                     entered for NBQ GL codes.  A warning msg
//                     is then shown the user which states the
//                     invoice has been paid in part or whole
//                     with ISP Nike Bank $$.
// 04-04-91 CHELLM  -  Drop DEF claim types from the edit that
//                     requires matching PO #'s on addnl ivc's
//                     added to the claim.
// 04-12-91 CHELLM  -  Changed length of cl0nw5gp due to ivarec
//                     and regen for db2 changes.
// 07-11-91 TWATSO  -  Changed the edit on 'sel' field on map.
//                     Only allow ' ', p, or x as valid SELs,
//                     all others are invalid. Changed map also
// 08-08-91 wjohns  -  Renamed application and commarea
//                       referrences to renamed claims appls.
// 09-17-91 ahowar  -  Renamed proc ans sgrp from "cl" to "kl".
// 12-03-91 gdecke  -  add klasttdt,ycrcd,yctcd to cl0tw08 rec.
// 12-23-91 twatso     added code to 120,123,124,129to check
//                     the yittbl row for active status.
// 01-13-92 sgorga     Set ta1,ta2,ta5rec, and cl0nw06,08,09
//                     empty.  Kl0ns32, s33, s34, s95, 001.
// 03-13-92 sgorga     DB2 chg. Regenned for ivarec length chg.
// 09-08-93 BCourt     add comment to prologue in CL0NW02 &
//                     CL0NW03 that if exceed 200 invoices in
// >> note ===>  >> >> the array, then you must change CL1950,
//                     Claims Purge Qualify.
// 09-20-93 BCourt     Bad overview above, copied from KL0H!
//                     Re-write it to describe multiple invcs.
// 11-12-93 GDECKE     CHANGE KULREC.XXXADDRn TO XXX-ADDRn.
//                     CL0NW01 LENGTH - NOV. 1993 TABLE CHANGES
// 03-11-94 BCOURT     Change CLFREC.XXXADDRn TO XXX-ADDRn.
// 09-26-94 twatso     Add code to go back through the n970 if
//                     the invoice found first time is a 'p'
//                     level pay invoice - golf level pay chg.
//                     Will go to find the master invoice and
//                     then back through 970 to fill in the
//                     working storage records with the correct
//                     invoice number (master if necessary).
//                     kl0n121, kl0n124, kl0n156 changed.
//                     Added vlvlpy01 record also.
// 12-09-96 kshaw      dec table changes
// 02-24-98 GDECKE     ALLOW CUST CLM NBR UPDATE AFTER STAT=CMP
// 02-25-98 GDECKE     REMOVE PF KEY FOR KL0H - AR REF SCREEN
// 03-11-98 NJana      Change the code to replace CSP XVOTBL
//                     by an IOMOD
// 03-16-98 rgilli     Y2K MODIFICATIONS MADE TO:
//                     Re-generate to include new version of
//                     xpcl004.
//                     CL0NW01: Add two new fields
//                              cl0nw-enter-dt & cl0nw-cur-dt
//                     KL0N123: Add year validation from
//                              xpcl004. Change year compare
//                              from yy ccyy.
//                     XPCL004: Changed to validate mmddyy
//                             incoming format only.  All
//                             applications which call this
//                             routine only send mmddyy format.
// 09-09-99 ssank1     Changed Map presentation KL0NM001 to
//                     accomodate 4 digit nike ord id.
// ************************************************************
// *********************
Program KL0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0NW01 CL0NW01; // record
  CL0NW02 CL0NW02; // record
  CL0NW03 CL0NW03; // record
  CL0NW04 CL0NW04; // record
  CL0NW05 CL0NW05; // record
  CL0NW06 CL0NW06; // record
  CL0NW07 CL0NW07; // record
  CL0NW08 CL0NW08; // record
  CL0NW09 CL0NW09; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLCREC CLCREC; // record
  CLFREC CLFREC; // record
  CLIREC CLIREC; // record
  CLKREC CLKREC; // record
  CLRREC CLRREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IV5REC IV5REC; // record
  IV6REC IV6REC; // record
  IVAREC IVAREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  PFJREC PFJREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  VLVLPY01 VLVLPY01; // record
  VXVO0001 VXVO0001; // record
  XQWREC XQWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOTTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XVOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YITTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0NM.KL0NM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0N000: KL0N000();
    exit program;
    KL0N001: KL0N001();
    KL0N050: KL0N050();
    KL0N100: KL0N100();
    KL0N101: KL0N101();
    KL0N110: KL0N110();
    KL0N112: KL0N112();
    KL0N120: KL0N120();
    KL0N180: KL0N180();
    KL0N150: KL0N150();
    KL0N115: KL0N115();
  end // end main
end // end KL0N

// select unique from vlvlpy01
Function KL0N-GET-MSTR-IVC()
   /* **************************************/
   /* select unique on vlvlpy01*/
   /* **************************************/
   /* 09-26-94 twatso   added for golf level pay change.*/
   /* If we have found the invoice and it is a*/
   /* level pay invoice, find the master ivc*/
   /* which will be used to find another iv0rec rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "VLVLPY01" ("S ", SQLCA, VLVLPY01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(765); /* let them know it is master invoice*/
    KL0NM001.IV0IVCID[CLXLINEX] = VLVLPY01.IV-MSTR-IVC-ID;
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
          /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "KL0N-GET-MSTR-IVC"; /* location*/
        TA1REC.TA1LOCAT[4] = "VLVLPY01"; /* iomod name*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VLVLPY01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N-GET-MSTR-IVC

// application main logic
Function KL0N000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  COMMAREA.CACURRAP = "KL0N";
  ;
  ;
  KL0N001(); /* initilize the application*/
  ;
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0N050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002(); /* exit this application*/
end // end KL0N000

// initialize application
Function KL0N001()
   /* ************************************************************/
   /* initialize the application working storage         **/
   /* **/
   /* 10-04-90 CHELLM Added xumcd and xqacd to wild card values**/
   /* when scanning CLKREC.                    **/
   /* 01-13-92  sgorga  Set ta1rec, ta2rec, ta5rec, cl0nw06,   **/
   /* cl0nw08, and cl0nw09 empty.            **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0N001"; /* set current process name*/
  ;
   /* MOVE 1 TO EZECNVCM; force db2 to commit on each screen conve*/
   /* MOVE 1 TO EZEFEC; return control to program if hard db2 erro*/
  ;
   /* TEMP001                        ; set up commarea for testing*/
  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segemented transaction id*/
  XPCL011(); /* claims entry module*/
  ;
  ;
  KL0N009(); /* clear all working storage records*/
  ;
  ;
  ;
  ;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set CL0NW09 empty;
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  CLXREC.XXXCYMD = VGVar.currentShortGregorianDate; /* move in yymmdd*/
  if (CLXREC.XXXCYY < 50) /* if year < 50*/
    CLXREC.XXXCCC = 020; /* assume next century*/
  else
    CLXREC.XXXCCC = 019;
  end
  ;
  ;
  ;
  ;
  ;
  CL0NW01.ZZZCHGDT = VGVar.currentShortGregorianDate;
  ;
       /* dashes used for date on screen*/
  ;
  CL0NW01.CL0NWFI1 = "-";
  CL0NW01.CL0NWFI2 = "-";
  CL0NW01.CL0NWMAR = 198; /* maximum size for db array*/
  ;
  ;
  CLXREC.CLXCSCRN = "KL0NM001"; /* set first screen name*/
  ;
         /* the following three lines refer to data held*/
         /* for one screen*/
  ;
  CLXREC.CLXSNAME[1] = "KL0NM001"; /* initialize the screen names*/
  CLXREC.CLXMAXLN[1] = 11; /* set maximum lines on a screen*/
  CLXREC.CLXARY1X[1] = 1; /* for loading the db information*/
  ;
  ;
  CLXREC.CLXARAYX = 1; /* generic array index*/
  CLXREC.CLXLINEX = 1; /* generic screen-lineindex*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set need-to-build-screen to yes*/
  CLXREC.CLXBLDAY = "Y"; /* set need-to-build-array to yes*/
  CLXREC.CLXERRF = "N"; /* init error flag to 'no'*/
  ;
  ;
  KL0N002(); /* get company record*/
  ;
  ;
  CL0NW01.CL0NWGCT = 1; /* how times array has been filled*/
  KL0NS38(); /* determine values for indexes*/
  ;
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0N960(); /* count ivc's on claim*/
  ;
  if (CL0NW06.CL0NWCNT > 0) /* if already invoices on claim*/
    CL0NW01.CL0NWGPF = "N"; /* no, dont protect*/
  else
    ;
    CLRREC.CLACLMNB = CLAREC.CLACLMNB;
    /* MOVE CLAREC.CLACSQNB TO CLRREC.CLHSEQNB;*/
    KL0N964(); /* count adjustments with > 0 qtys on claim*/
    ;
    if (CL0NW06.CL0NWCNT > 0) /* if adjustments w/qtys on claim*/
      CL0NW01.CL0NWGPF = "Y"; /* yes, protect*/
    else
      ;
      CLIREC.CLACLMNB = CLAREC.CLACLMNB;
      CLIREC.CLHSEQNB = CLAREC.CLACSQNB;
      CLIREC.CLICRDFL = "*";
      CLIREC.IV0IVCID = -1;
      KL0N962(); /* count g/l's on claim*/
      if (CL0NW07.CL0NWCNT > 0) /* if there are g/l's*/
        CL0NW01.CL0NWGPF = "Y"; /* yes, protect*/
      else
        ;
        CLKREC.CLACLMNB = CLAREC.CLACLMNB;
        CLKREC.IV0IVCID = -1;
        CLKREC.XGPCD = "**";
        CLKREC.SY1STNBR = "******";
        CLKREC.SY2CLRID = "***";
        CLKREC.XDMCD = "**";
        CLKREC.XUMCD = "**"; /* 10-03-90*/
        CLKREC.XQACD = "**"; /* 10-03-90*/
        CLKREC.CLKCRFL = "*"; /* 072089 add*/
        ;
        KL0N965(); /* select scan for ra's items*/
        ;
        KL0N966(); /* select next for ra's items*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if there are ra's*/
          CL0NW01.CL0NWGPF = "Y"; /* yes, protect*/
        end
        KL0N967(); /* close scan for ra's items*/
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0N001

// get company record
Function KL0N002()
  ;
  CLXREC.CLXCPROC = "CL0N002"; /* 4-5-88*/
  ;
  ;
  set KUCREC empty;
  ;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  KL0N900(); /* get company record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
    CL0NW01.KUCGRPID = KUCREC.KUCGRPID;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no customer is on file*/
      /* next sentence*/
    else
      CLXREC.CLXWFLDN = CLAREC.KUCCOID; /* 4-5-88*/
      TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCUST"; /* 4-5-88*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* 4-5-88*/
      XPCL010();
    end
  end
  ;
  ;
  ;
end // end KL0N002

// get all invoice for claim
Function KL0N003()
   /* ************************************************************/
   /* *        get the next group of 200 records and load       **/
   /* *            into working storage array                   **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0N003"; /* set current process name*/
  ;
  ;
  ;
  set CL0NW03 empty;
  set CL0NW02 empty;
  set CLBREC empty;
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "*";
  ;
  KL0N985(); /* get set of invoices for this claim*/
                                   /* ordered by cl-pmry-ivc-fl*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1LOCAT[2] = "1ST INVC"; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010(); /* abort*/
  end
  ;
  ;
  ;
  ;
end // end KL0N003

// get a/r xref assoc with claim
Function KL0N004()
   /* *************************************************************/
   /* **/
   /* **/
   /* *     get all of the ar xref records for this invoice*/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N004"; /* set current process name*/
  ;
  ;
  CL0NW01.CL0NWNAP = "Y"; /* need a/r primary*/
  ;
  CLCREC.CLACLMNB = CLAREC.CLACLMNB;
  CLCREC.IV0IVCID = CLBREC.IV0IVCID;
  CLXREC.CLXORDIV = CLBREC.IV0IVCID;
  CLCREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N980(); /* get set of cust clm nbrs for the first clbrec*/
    /* (this should be the primary invoice record)*/
   /* if primary ar-ref-nbr is blank, then blanks will show in*/
   /* the header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N004

// build/write clirec to ws
Function KL0N005()
   /* ************************************************************/
   /* *      move all of the clarx records for the primary      **/
   /* *      invoice to the working storage array               **/
   /* *                                                         **/
   /* *  Maintenance History:                                   **/
   /* *                                                         **/
   /* * 112789 cwh   corrected bug which multiple lines of the  **/
   /* *              primary invoice when multible ARCRECs exist**/
   /* *              with the same ARCCCREF value.See CL739     **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N005"; /* set up current process name*/
  ;
  ;
  CL0NW01.CL0NWDON = "N"; /* no, we're not done*/
  CL0NW01.ARCCCREF = CLCREC.ARCCCREF; /* prime 1st value(11-27-89)*/
  ;
  ;
  if (CLBREC.IV0IVCID == 999999999
   && CLCREC.IV0IVCID == 999999999)
    CL0NW01.CL0NWDON = "Y";
  end
  ;
  ;
  while (CL0NW01.CL0NWDON == "N" /* while not done*/
   && CL0NW01.CL0NW02X <= 198)
     /* this first section moves clivx primary to ws array*/
    CL0NW02.CL0NMSEL[CLXARAYX] = " ";
    CL0NW02.ARCCCREF[CLXARAYX] = " ";
    CL0NW02.CL0NWCLB[CLXARAYX] = "Y";
    CL0NW02.CLBPMIVC[CLXARAYX] = CLBREC.CLBPMIVC;
    CL0NW02.IV0IVCID[CLXARAYX] = CLBREC.IV0IVCID;
    CL0NW02.OP1CUOID[CLXARAYX] = CLBREC.OP1CUOID;
    CL0NW02.OP1NORID[CLXARAYX] = CLBREC.OP1NORID;
    CL0NW02.YITCD[CLXARAYX] = CLBREC.YITCD;
    CL0NW02.CL0NWBCT[CLXARAYX] = CLBREC.ZZZCHGCT;
    CL0NW02.CLBSRIND[CLXARAYX] = CLBREC.CLBSRIND;
    CL0NW02.CLBGLIND[CLXARAYX] = CLBREC.CLBGLIND;
    CL0NW02.IV0IVCDT[CLXARAYX] = CLBREC.IV0IVCDT;
    ;
    CL0NW02.CL0NWCLB[CLXARAYX] = "Y";
    CL0NW02.CL0NWNOC[CLXARAYX] = CL0NW02.CL0NWNOC[CLXARAYX] + 1;
    CL0NW02.ARCCCREF[CLXARAYX] = CLCREC.ARCCCREF;
    CL0NW02.CL0NWCCT[CLXARAYX] = CLCREC.ZZZCHGCT;
    CL0NW02.ARCCHKNB[CLXARAYX] = CLCREC.ARCCHKNB;
    CL0NW02.ARCREFNB[CLXARAYX] = CLCREC.ARCREFNB;
    if (CLCREC.CLCPMAR == "Y") /* if a primary record exists*/
      CL0NW01.CL0NWNAP = "N"; /* dont need to assign one*/
    end
    if (CLCREC.ARCREFNB != " ")
      CL0NW02.CL0NWHAR[CLXARAYX] = "Y";
    end
    ;
    KL0NS74(); /* are there any prds author for return 2/89*/
    ;
    KL0N008(); /* fetch next clarx rec for pmry ivc*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CLCREC.IV0IVCID == CLBREC.IV0IVCID)
        CL0NW03.CL0NWNOI[CL0NW03X] = CL0NW03.CL0NWNOI[CL0NW03X] + 1;
      end
      if (CLCREC.ARCCCREF == CL0NW01.ARCCCREF)
         /* next sentence*/
      else
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        CL0NW02.CL0NWNOC[CLXARAYX] = 0;
        CL0NW01.ARCCCREF = CLCREC.ARCCCREF;
      end
    end
    ;
    if (CLCREC.IV0IVCID == 999999999)
      CL0NW01.CL0NWDON = "Y";
    end
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end KL0N005

// read next clb record
Function KL0N007()
   /* *************************************************************/
   /* *     fetch the next clb record*/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N007"; /* set current process name*/
  ;
  ;
  ;
  KL0N986(); /* fetch first from clbrec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* move in key to clbrec*/
    if (CLBREC.IV0IVCID == CL0NW03.IV0IVCID[CL0NW03X])
      CL0NW03.CL0NWNOI[CL0NW03X] = CL0NW03.CL0NWNOI[CL0NW03X] + 1;
    else
      CL0NW03.CL0NW03X = CL0NW03.CL0NW03X + 1;
      CL0NW03.IV0IVCID[CL0NW03X] = CLBREC.IV0IVCID;
      CL0NW03.CLBPMIVC[CL0NW03X] = CLBREC.CLBPMIVC;
      CL0NW03.CL0NWNOI[CL0NW03X] = 1;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0NW03.CL0NW03M = CL0NW03.CL0NW03X; /* max used*/
      set CLBREC empty;
      CLBREC.IV0IVCID = 999999999;
    else
      /* next sentence...fatal errors are handled in cl0n986*/
    end
  end
  ;
  ;
  ;
end // end KL0N007

// fetch next clc record
Function KL0N008()
   /* *************************************************************/
   /* *     fetch the next clc record*/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N008"; /* set current process name*/
  ;
  ;
  ;
  KL0N981(); /* fetch first from clcrec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if good return*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLCREC empty;
      CLCREC.IV0IVCID = 999999999;
      return;
    else
      CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
      TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
      TA1REC.TA1LOCAT[2] = "1ST XREF"; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N008

// clear working storage records
Function KL0N009()
   /* ************************************************************/
   /* *      clear out working storage records                  **/
   /* *                                                         **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* *  01-04-91  sgorga  Deleted 'set kuarec empty'.          **/
   /* ************************************************************/
  CLXREC.CLXCPROC = "CL0N009"; /* set current process name*/
  ;
  ;
  ;
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set CL0NW01 empty; /* clear out storage for cl0n*/
  set CL0NW02 empty;
                                   /* clear out storage for layout of array*/
  set CL0NW03 empty;
                                   /* clear out storage for layout of array*/
  set CLBREC empty;
  set CLCREC empty;
   /* SET CLDREC EMPTY; drop 1-13-88*/
   /* SET CLFREC EMPTY; drop 1-13-88*/
  set KUJREC empty;
  set KULREC empty;
  set KUMREC empty;
  set IVAREC empty;
  set IV0REC empty;
  set IV5REC empty;
  ;
  ;
  ;
  ;
  ;
end // end KL0N009

// fetch next clc record
Function KL0N011()
   /* *************************************************************/
   /* *     fetch the next clc record*/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N011"; /* set current process name*/
  ;
  ;
  ;
  KL0N988(); /* fetch next from clcrec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if good return*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLCREC empty;
      CLCREC.IV0IVCID = 999999999;
      return;
    else
      CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
      TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
      TA1REC.TA1LOCAT[2] = "FETCH NEXT XREF"; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N011

// get a/r xref assoc with claim
Function KL0N012()
   /* *************************************************************/
   /* **/
   /* **/
   /* *     get all of the ar xref records for this invoice*/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N012"; /* set current process name*/
  ;
  ;
  CL0NW01.CL0NWNAP = "Y"; /* need a/r primary*/
  ;
  CLCREC.CLACLMNB = CLAREC.CLACLMNB;
  CLCREC.IV0IVCID = CLBREC.IV0IVCID;
  CLXREC.CLXORDIV = CLBREC.IV0IVCID;
  CLCREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N987(); /* get set of cust clm nbrs for this invoice*/
  ;
   /* if primary ar-ref-nbr is blank, then blanks will show in*/
   /* the header*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
    end
  end
  ;
  ;
  ;
end // end KL0N012

// main cl0u branch control
Function KL0N050()
   /* ************************************************************/
   /* *    process the application screen(s)                    **/
   /* *                                                         **/
   /* *  note that this process being performed in a            **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N050"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* ezetst always eq 1*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* because there is only one screen*/
  end
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  ;
  while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
    KL0N100(); /* process screen cl0hm001*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoafl) = 'n'*/
           /* we go back to the top of cl0%050...*/
       /* if the end-of-application flag (clxeoafl) = 'y'*/
           /* we return to cl0%000.*/
  ;
  ;
  ;
end // end KL0N050

// converse screen m001
Function KL0N100()
   /* ************************************************************/
   /* *    process screen cl0nm001                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0h050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N100"; /* set current process name*/
  ;
       /* build array if first time thru or processed 200 entries*/
  if (CLXREC.CLXBLDAY == "Y")
    KL0NS30();
    CLXREC.CLXBLDAY = "N";
  end
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y") /* screen has no data in its body*/
    KL0N101(); /* fill it with data*/
    CLXREC.CLXBLDSC = "N";
  end
  ;
   /* CL0NS50               ; check security for map fields*/
                            /* may change map fields to protected*/
  ;
  KL0NM001.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0NM001.XXXRVNBR = "02"; /* 4-19-88*/
  ;
  ;
   /* MOVE 1 TO EZESEGM;*/
  ;
   /* ***********************************************************/
  converse KL0NM001 ;
   /* ***********************************************************/
  ;
  ;
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* reset error flag*/
  CLXREC.CLXEDITF = "N"; /* reset edit flag*/
  CL0NW01.CL0NWPFL = "N"; /* init multiple 'p's in sel. field*/
  CL0NW01.CL0NWDEL = 0; /* init lines to be deleted*/
  ;
  ;
  KL0N110(); /* handle any special entries*/
       /* may exit appl from this process*/
  ;
  if (CLXREC.CLXERRF == "Y") /* if have errors, re-show map 1-18-88*/
    return;
  end
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11)
    KL0N112(); /* set the do-edits-flag*/
    CL0NW04.CLXERRF[CLXLINEX] = "N";
    KL0NS60(); /* set modified fields modified*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
  CLXREC.CLXLINEX = 11;
  if (CLXREC.CLXEDITF == "Y") /* if we stil want to edit*/
    while (CLXREC.CLXLINEX > 0) /* edit from line 11 to line 1*/
      if (CL0NW04.CL0NWLNM[CLXLINEX] == "Y") /* if line was modified*/
        KL0N120(); /* go edit screen entries*/
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    end
  end
  ;
  ;
  if ("Y" in CL0NW04.CLXERRF) /* if error in any line,*/
    CLXREC.CLXERRF = "Y"; /* set map error flag*/
  end
  ;
  if (CLXREC.CLXERRF == "Y") /* 1-18-88 test any error*/
    return; /* 1-18-88 re-show map*/
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11) /* decipher selection field*/
    if (CL0NW04.CL0NWLNM[CLXLINEX] == "Y") /* if line was modified*/
      KL0N180(); /* decide add/chg/del select code*/
                                   /* 1-18-88*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf12 /* if only editing*/
   || CLXREC.CLXERRF == "Y")       /* or there are errors*/
     /* next sentence*/
  else
    KL0N150(); /* process updates*/
  end
  ;
    /* process pf keys*/
  ;
  if (CLXREC.CLXERRF == "N" /* if there were no map errors*/
   && CLXREC.CLXEDITF == "N")
    KL0N115(); /* process pfkeys*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
  ;
  ;
  ;
end // end KL0N100

// build screen cl0hm001
Function KL0N101()
   /* ************************************************************/
   /* *      this process builds screen cl0nm001                **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N101"; /* set current process name*/
  ;
  ;
  set KL0NM001 initial;
  set CL0NW04 empty;
  ;
  ;
  KL0NM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0NM001.OP1CUPO = CLAREC.OP1CUPO;
  KL0NM001.CLACTCNM = CLAREC.CLACTCNM;
  KL0NM001.KUCCOID = CLAREC.KUCCOID;
  KL0NM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0NM001.XNXCD = CLAREC.XNXCD;
  KL0NM001.KUCCONM = CLWREC.KUCCONM;
  ;
  ;
  CLXREC.CLXLINEX = 1;
  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX];
  CL0NW03.CL0NW03X = 1;
  ;
  while (CLXREC.CLXLINEX <= 11)
    KL0NS25(); /* build each screen line*/
    KL0NS26(); /* protect each screen line*/
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
  ;
  ;
  if (CL0NW01.CL0NWGPF == "Y") /* if protected due to g/l's or prods*/
    converseLib.validationFailed(170); /* ivc's cant be entered due to g/ls or prods*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  ;
  ;
  CLXREC.CLXBLDSC = "N"; /* screen body has data in it*/
  ;
  ;
end // end KL0N101

// handle screen m001 spec entrys
Function KL0N110()
   /* ************************************************************/
   /* *  check for key usage or data entered in the             **/
   /* *  option/item fields                                     **/
   /* *                                                         **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N110"; /* set current process name*/
  ;
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    return;
  end
     /* REMOVED PF19 02-27-98 PER SANDY KELLY*/
   /* OR EZEAID IS PF19*/
  ;
  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KL0A";
    XPCL002();
    return;
  end
  ;
   /* ***************************  fast path out******/
  if (converseVar.eventKey is enter)
    if (KL0NM001.CATOAP == " "
     && KL0NM001.CAITEM == " ")
      return;
    else
      if (KL0NM001.CATOAP != " ")
        COMMAREA.CATOAP = KL0NM001.CATOAP;
        COMMAREA.CAITEM = KL0NM001.CAITEM;
        CLXREC.CLXEDITF = "N"; /* don't edit data*/
        XPCL002();
        return;
         /* ******************************************************/
      else
        if (KL0NM001.CATOAP == " "
         && KL0NM001.CAITEM != " ")
          converseLib.validationFailed(01); /* enter option field*/
          CLXREC.CLXEDITF = "N"; /* don't edit data*/
          CLXREC.CLXERRF = "Y"; /* there are errors w/in screen*/
          return;
        end
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    converseLib.validationFailed(62); /* pa keys cause loss of data*/
    CLXREC.CLXEDITF = "N"; /* don't edit data*/
    CLXREC.CLXERRF = "Y"; /* error in screen*/
    return;
  end
  ;
   /* if no other condition was met*/
  converseLib.validationFailed(02); /* invalid pfkey*/
  CLXREC.CLXEDITF = "N"; /* don't edit data*/
  CLXREC.CLXERRF = "Y"; /* error in screen*/
  ;
end // end KL0N110

// test if fields modified
Function KL0N112()
   /* ************************************************************/
   /* *    test if fields are modified to set edit flag         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N112"; /* set current process name*/
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0
   && KL0NM001.OP1CUOID[CLXLINEX] == 0
   && KL0NM001.OP1NORID[CLXLINEX] == 0)
    KL0NM001.YITCD[CLXLINEX] = CL0NW04.YITCD[CLXLINEX];
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] != CL0NW04.CL0NMSEL[CLXLINEX]
   || KL0NM001.ARCCCREF[CLXLINEX] != CL0NW04.ARCCCREF[CLXLINEX]
   || KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX]
   || KL0NM001.CL0NMIVD[CLXLINEX] != CL0NW04.CL0NMIVD[CLXLINEX]
   || KL0NM001.OP1CUOID[CLXLINEX] != CL0NW04.OP1CUOID[CLXLINEX]
   || KL0NM001.OP1NORID[CLXLINEX] != CL0NW04.OP1NORID[CLXLINEX]
   || KL0NM001.YITCD[CLXLINEX] != CL0NW04.YITCD[CLXLINEX])
    CLXREC.CLXEDITF = "Y";
    CL0NW04.CL0NWLNM[CLXLINEX] = "Y"; /* line was modified*/
  else
    CL0NW04.CL0NWLNM[CLXLINEX] = "N"; /* line was not modified*/
  end
end // end KL0N112

// act on Enter & PF keys
Function KL0N115()
   /* ************************************************************/
   /* *   check pf keys and 'enter' for next action.  since     **/
   /* *   pf3, pf4 and fast path were already acted upon,after  **/
   /* *   the converse, we only have to take care of the rest.  **/
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-27-98  GDECKE  REMOVE PF19                           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N115"; /* set current process name*/
  ;
  if (converseVar.eventKey is enter)
     /* depending on flags can go many places*/
     /* if clm reason is traffic & g/l, or traffic & product,*/
     /* flow to g/l, product, and traffic comes last*/
    CLXREC.CLXEOSF = "Y"; /* end of screen 1-18-88, drop cl0n116*/
    CLXREC.CLXEOAF = "Y"; /* end of application*/
    XSCLSFL(); /* set value in commarea*/
    XPCL002();
  else
    if (converseVar.eventKey is pf5)
      COMMAREA.CAUSERA = CLWREC.CLWGROUP;
      COMMAREA.CATOAP = "KL0E";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
    else
      if (converseVar.eventKey is pf7)
        KL0NS07(); /* handle pfkey 7*/
      else
        if (converseVar.eventKey is pf8)
          KL0NS08(); /* handle pfkey 8*/
          /* REMOVED PF19 02-27-98 PER SANDY KELLY*/
          /* ELSE;*/
          /* IF EZEAID IS PF19;*/
           /* MOVE 'N' TO CLWREC.CLWADDR;    /* address*/
           /* MOVE 'KL0H' TO COMMAREA.CATOAP;*/
           /* MOVE 'Y' TO CLXREC.CLXEOSF;*/
           /* MOVE 'Y' TO CLXREC.CLXEOAF;*/
           /* PERFORM XPCL002;*/
        else
          if (converseVar.eventKey is pf17)
            COMMAREA.CATOAP = "KL0F";
            CLXREC.CLXEOSF = "Y";
            CLXREC.CLXEOAF = "Y";
            XPCL002();
          else
            if (converseVar.eventKey is pf18)
              CLWREC.CLWMCMNT = "N"; /* claim comment*/
              COMMAREA.CATOAP = "KL0G";
              CLXREC.CLXEOSF = "Y";
              CLXREC.CLXEOAF = "Y";
              XPCL002();
            else
              if (converseVar.eventKey is pf20)
                CLWREC.CLWMCMNT = "Y"; /* claim comment*/
                COMMAREA.CATOAP = "KL0G";
                CLXREC.CLXEOSF = "Y";
                CLXREC.CLXEOAF = "Y";
                XPCL002();
              end
            end
          end
        end
      end
    end
  end
end // end KL0N115

// edit screen entries
Function KL0N120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* * if there is only a/r reference data, the edits for*/
   /* * invoice/order are not required, so those edits are skipped*/
  ;
   /* Maintenance History:*/
   /* 05-31-90 CHELLM Added edit for product brand - claim brand*/
   /* code mis-match.*/
   /* 08-10-90 CHELLM Added perform of CL0N122 which edit the*/
   /* comp-co of addnl ivc's.*/
   /* 12-23-91 twatso Added code to check for active row on yittbl.*/
   /* 02-24-92 BCOURT Allow blank GPC valid (direct ship invoice).*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0N120"; /* set current process name*/
  ;
  ;
  CL0NW04.CLXERRF[CLXLINEX] = "N";
  CLXREC.CLXINVFD = "N"; /* invoice found*/
  CLXREC.CLXORDFD = "N"; /* order found*/
  CLXREC.CLXWRTIV = "N"; /* need to write invoice record*/
  CLXREC.CLXWRTOR = "N"; /* need to write order record*/
  CLXREC.IV0IVCID = 0;
  CLXREC.OP1CUOID = 0;
  CLXREC.OP1NORID = 0;
  ;
  ;
  CLXREC.CLXARAYX = CL0NW04.CL0NWAYX[CLXLINEX];
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X"
   && CL0NW04.CL0NWNEF[CLXLINEX] == "Y")
    return;
  end
  ;
  ;
   /* IF CL0NM001.YITCD(CLXLINEX) NE CL0NW01.YITCD;*/
    /* OR CL0NW01.YITCD EQ ' ';*/
  KL0N125(); /* edit invoice type code*/
   /* END ;*/
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "Y") /* if yitcd is not valid*/
    return; /* can't continue with edits*/
  end
  ;
  ;
  if (CL0NW01.YITCD == " ")
     /* next sentence*/
  else
    if (CL0NW01.YITCD in YITTBL.YITCD)
      if (YITTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* must be active 12-23-91*/
        CLXREC.CLXYITX = sysVar.arrayIndex;
      else
        CL0NW04.CLXERRF[CLXLINEX] = "Y"; /**/
        converseLib.validationFailed(128); /* invoice/order indicator is invalid*/
        return; /* can't continue with edits*/
      end
    else
      TA1REC.TA1TBLKE = "LOOKING UP YITCD IN TABLE";
      XPCL010();
    end
  end
  ;
  ;
   /* 1-18-88 if change invoice or order:*/
  if (KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX]
   || KL0NM001.OP1CUOID[CLXLINEX] != CL0NW04.OP1CUOID[CLXLINEX]
   || KL0NM001.OP1NORID[CLXLINEX] != CL0NW04.OP1NORID[CLXLINEX])
    KL0N124(); /* edit invoice/order combination*/
    if (CL0NW04.CLXERRF[CLXLINEX] == "N")
      KL0N128(); /* edt co.group cd, g.p.c. & p.o.#*/
    end
  end
  ;
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "N") /* if no errors*/
    KL0NS95(); /* get prev claims on invoice data*/
  end
  ;
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "N") /* if no errors*/
    if (KL0NM001.CL0NMIVD[CLXLINEX] != CL0NW04.CL0NMIVD[CLXLINEX]
     || KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX]
     || KL0NM001.OP1CUOID[CLXLINEX] != CL0NW04.OP1CUOID[CLXLINEX]
     || KL0NM001.OP1NORID[CLXLINEX] != CL0NW04.OP1NORID[CLXLINEX])
      KL0N123(); /* edit invoice date*/
    end
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] != CL0NW04.CL0NMSEL[CLXLINEX])
    KL0N121(); /* edit selection code*/
  end
  ;
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "N") /* if no errors*/
    KL0N122(); /* edit comp-co-id*/
  end
  ;
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "Y") /* if have error already*/
    return;
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X")
    KL0N126(); /* edit deletes*/
    if (CL0NW04.CLXERRF[CLXLINEX] == "Y")
      CL0NW04.CL0NMSEL[CLXLINEX] = " ";
    end
    return;
  else
    if (KL0NM001.IV0IVCID[CLXLINEX] == 0
     && CL0NW04.IV0IVCID[CLXLINEX] != 0)
      KL0N126(); /* edit deletes*/
      return;
    else
      if (KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX]
       && CL0NW04.IV0IVCID[CLXLINEX] != 0)
        KL0N126(); /* edit deletes*/
        return;
      else
         /* next sentence*/
      end
    end
  end
  ;
  ;
   /* individual edits o.k., now cross-check IBM invoice:*/
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] != 0) /* if an invoice was entered*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and yittbl row is active.*/
      if (YITTBL.YITIOIBM[CLXYITX] == "Y" /* and invoice is on ibm*/
       && CLXREC.CLXINVFD == "Y")         /* and invoice was found*/
        ;
        /* removed check for sales office equal primary sales office*/
        /* gdecke - 022189*/
        ;
        if (CLAREC.XBCCD != IVAREC.XBCCD) /* if ivc brand ^= claim brand*/
          converseLib.validationFailed(612);
                                   /* invoice brand must match claim brand*/
          CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* added 3-19-89 gdecke*/
          set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
          return;
        end
        ;
        if (CLAREC.XDVCD != IVAREC.XDVCD) /* if ivc div code not equal*/
          converseLib.validationFailed(579); /* primary division code on clhdr*/
          CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* added 3-19-89 gdecke*/
          set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
          return;
        end
        ;
        if (CLAREC.CLASETDT < 19900309
         && CLAREC.YCTCD == "RTS")
          if (IVAREC.SP1ID == "AST1" /* if invoice has holiday walking spgm*/
           || IVAREC.SP1ID == "AST2" /* then claim must have walking spgm*/
           || IVAREC.SP1ID == "AST3")
            if (CLAREC.SP1ID == "AST1"
             || CLAREC.SP1ID == "AST2"
             || CLAREC.SP1ID == "AST3")
             /* next sentence*/
            else
              converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
              set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
              return;
            end
          end
          ;
          if (IVAREC.SP1ID == "TEST" /* if invoice has holiday walking spgm*/
           || IVAREC.SP1ID == "WTPA" /* then claim must have walking spgm*/
           || IVAREC.SP1ID == "WA89")
            if (CLAREC.SP1ID == "TEST"
             || CLAREC.SP1ID == "WTPA"
             || CLAREC.SP1ID == "WA89")
             /* next sentence*/
            else
              converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
              set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
              return;
            end
          end
          ;
          ;
          if (CLAREC.SP1ID == "AST1" /* if claim has holiday walking spgm*/
           || CLAREC.SP1ID == "AST2" 
           /* then invoice must have walking spgm*/
           || CLAREC.SP1ID == "AST3")
            if (IVAREC.SP1ID == "AST1"
             || IVAREC.SP1ID == "AST2"
             || IVAREC.SP1ID == "AST3")
             /* next sentence*/
            else
              converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
              set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
              return;
            end
          end
          ;
          if (CLAREC.SP1ID == "TEST" /* if claim has holiday walking spgm*/
           || CLAREC.SP1ID == "WTPA" 
           /* then invoice must have walking spgm*/
           || CLAREC.SP1ID == "WA89")
            if (IVAREC.SP1ID == "TEST"
             || IVAREC.SP1ID == "WTPA"
             || IVAREC.SP1ID == "WA89")
             /* next sentence*/
            else
              converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
              set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
              return;
            end
          end
        end
        ;
        /* perform edit on the new invoice to verify that the data*/
       /* in xobcd, xdvcd, xgpcd, xsocd and xotcd is on the xvo table.*/
        KL0NS93();
        ;
        ;
        if (IVAREC.XWHCD in XWHTBL.XWHCD)
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD1[sysVar.arrayIndex] == " " /* 2-24-92 valid all gpc's*/
           || XWHTBL.XGPCD2[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD3[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD4[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD5[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD6[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD7[sysVar.arrayIndex] == CLAREC.XGPCD
           || XWHTBL.XGPCD8[sysVar.arrayIndex] == CLAREC.XGPCD)
           /* next sentence*/
          else
            converseLib.validationFailed(53); /* gpc not valid for whse on invoice*/
            set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
            CL0NW04.CLXERRF[CLXLINEX] = "Y";
            return;
          end
        end
        ;
        ;
        if (IVAREC.XOTCD in XOTTBL.XOTCD)
          if (XOTTBL.XGPCD[sysVar.arrayIndex] == CLAREC.XGPCD)
           /* next sentence*/
          else
            converseLib.validationFailed(165); /* ord typ not valid invoice gpc*/
            set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
            CL0NW04.CLXERRF[CLXLINEX] = "Y";
            return;
          end
        end
      end
    else
      converseLib.validationFailed(128); /* invoice/order indicator is invalid*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* error*/
    end
  end
  ;
   /* deleted test involving ydotbl - 3-19-89 - gdecke*/
  ;
  ;
  if (KL0NM001.ARCCCREF[CLXLINEX] != CL0NW04.ARCCCREF[CLXLINEX]
   || KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX])
    KL0N127(); /* check if combo already exists*/
  end
  ;
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "N" /* if no error so far*/
   && KL0NM001.YITCD[CLXLINEX] == "I") /* and invoice is on ibm*/
    if (KL0NM001.IV0IVCID[CLXLINEX] == 0)
      if (CLXREC.CLXORDFD == "Y")
        KL0NM001.IV0IVCID[CLXLINEX] = CLXREC.IV0IVCID;
      end
    end
    if (KL0NM001.OP1CUOID[CLXLINEX] == 0)
      if (CLXREC.CLXINVFD == "Y")
        KL0NM001.OP1CUOID[CLXLINEX] = CLXREC.OP1CUOID;
        KL0NM001.OP1NORID[CLXLINEX] = CLXREC.OP1NORID;
      end
    end
  end
  ;
  ;
end // end KL0N120

// edit the selection code
Function KL0N121()
   /* ***********************************************/
   /*  */
   /* edit the line selection code*/
   /*  */
   /* maintenance log*/
   /* 07-15-91  twatso  removed all selection options*/
   /* except p,x, and space - all others*/
   /* are invalid*/
   /* also only set up ws area if sel field*/
   /* is not in error.*/
   /* 09-26-94  twatso  if a level pay invoice is entered and found*/
   /* in kl0n70, GET THE MASTER INVOICE, THEN*/
   /* CYCLE THROUGH N970 AGAIN TO GET THE IV0GROUP*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "CL0N121"; /* set current process name*/
  ;
  ;
   /* IF CL0NM001.CL0NMSEL(CLXLINEX) EQ 'A';removed because not*/
   /* oR CL0NM001.CL0NMSEL(CLXLINEX) EQ 'R';doing anything 7-15-91*/
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "P"
   || KL0NM001.CL0NMSEL[CLXLINEX] == "X"
   || KL0NM001.CL0NMSEL[CLXLINEX] == " ")
    /* next sentence*/
  else
    /* MOVE CL0NM001.CL0NMSEL(CLXLINEX) TO CL0NW01.NWUPD(CLXLineX);*/
     /* save selection for redisplay of map*/
    set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    converseLib.validationFailed(8); /* selection is not valid*/
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "P")
    if (CLAREC.YCTCD == "NBC")
      CL0NW04.CL0NWUPD[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
       /* save selection for redisplay of map*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(60); /* primary not valid for nbc claims*/
      return;
    end
    if (KL0NM001.IV0IVCID[CLXLINEX] == 0) /* if no invoice number*/
      CL0NW04.CL0NWUPD[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
       /* save selection for redisplay of map*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(38); /* primary must have invoice number*/
      return;
    end
  end
  ;
  ;
   /* only one 'P'rimary record allowed on the screen.*/
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "P")
    if (CL0NW01.CL0NWPFL == "Y") /* already a 'p' on the screen*/
      CL0NW04.CL0NWUPD[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
       /* save selection for redisplay of map*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(162); /* select only one primary ar-ref-nbr*/
      return;
    else
      CL0NW01.CL0NWPFL = "Y";
    end
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "P")
    if (KL0NM001.CLBPMIVC[CLXLINEX] == "Y") /* already the primary*/
      CL0NW04.CL0NWUPD[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
       /* save selection for redisplay of map*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(43); /* select only one primary ar-ref-nbr*/
      return;
    else
      CL0NW01.CL0NWPFL = "Y";
    end
  end
  ;
  if (CL0NW04.CL0NWNEF[CLXLINEX] == "Y") /* this is a new entry*/
    /* next sentence*/
  else
    if (KL0NM001.CL0NMSEL[CLXLINEX] == "X")
      if (CL0NW02.CL0NWHAR[CLXARAYX] == "Y")
        converseLib.validationFailed(158); /* cant delete...assoc with a/r ref nbr*/
        set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        return;
      end
    end
  end
  ;
   /* added 'if not in error, then move to ws04 to hold 07-09-91*/
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "N") /* no error so set ws area*/
    CL0NW04.CL0NMSEL[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
  end
  ;
   /* below added 1-18-88*/
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] != "P") /* exit if not primary ivc*/
    return;
  end
  ;
  if (CL0NW01.YITCD != "I") /* exit if not ibm invoice type*/
    return;
  end
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == CL0NW01.CL0NWPIN) /* exit on same ivc*/
    return;
  end
  ;
   /* dont store cl0nwpin (primary ivc nbr),*/
   /* since only stored in cl0n154.*/
   /* dont set cl0nwcpi (changed primary ivc) to 'y',*/
   /* since set to 'n' in cl0n150, reset to 'y' in cl0n154.*/
  ;
  ;
   /* get iv0rec, invoice header reference record*/
  ;
  IV0REC.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CLXREC.CLXORDIV = IV0REC.IV0IVCID;
  IV0REC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N970(); /* get the invoice number - sel unique*/
  ;
   /* this added 9-26-94 twatso*/
  if (SQLCA.VAGen_SQLCODE == 0
   && IV0REC.IV-LVL-PAY-IND == "P") /* if level pay ind (golf level pay)*/
    set VLVLPY01 empty;
    VLVLPY01.IV0IVCID = IV0REC.IV0IVCID;
    ;
    KL0N-GET-MSTR-IVC(); /* get the master invoice*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* if master invoice found then set up*/
                                   /* to get*/
      KL0NM001.IV0IVCID[CLXLINEX] = VLVLPY01.IV-MSTR-IVC-ID;
      IV0REC.IV0IVCID = VLVLPY01.IV-MSTR-IVC-ID; /* the group to set*/
      CLXREC.CLXORDIV = VLVLPY01.IV-MSTR-IVC-ID; /* the working stor*/
      IV0REC.IV0PARTN = CLXREC.CLXPARTN;
      KL0N970(); /* perform get invoice again- sel uniq*/
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.IV0GROUP = IV0REC.IV0GROUP;
  end
  ;
  ;
   /* get ivarec, invoice header record*/
  ;
  IVAREC.IV0IVCID = IV0REC.IV0IVCID;
  CLXREC.CLXORDIV = IV0REC.IV0IVCID;
  IVAREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N940();
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.IVAGROUP = IVAREC.IVAGROUP;
  end
  ;
   /* above added 1-18-88*/
  ;
  ;
end // end KL0N121

// edit comp-co of addnl ivc's
Function KL0N122()
   /* ***********************************************/
   /* * edit the Comp-co-id of additional invoices*/
   /* **/
   /* * 08-10-90 chellm created process definition.*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "CL0N122"; /* set current process name*/
  ;
  ;
  if (CLAREC.OP1CMPNB > 0) /* if comp-co exists on claim header*/
    if (IVAREC.OP1CMPNB == CLAREC.OP1CMPNB
     || IVAREC.OP1CMPNB == 0)
      /* next sentence*/
    else
       /* comp-co-id of entered invoice not match claim's*/
      set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(642); /* selection is not valid*/
    end
  end
  ;
  ;
end // end KL0N122

// edit the invoice date
Function KL0N123()
   /* ***********************************************/
   /* user entered date is overridden with date*/
   /* that is on invoice*/
   /* 12-23-91 twatso added code to check for active yittbl row.*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "KL0N123"; /* set current process name*/
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0 /* no invoice entered*/
   && KL0NM001.CL0NMIVD[CLXLINEX] != " ") /* but date is there*/
    converseLib.validationFailed(51); /* date invalid with no invoice nbr*/
    set KL0NM001.CL0NMIVD[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    return;
  end
  ;
  if (KL0NM001.CL0NMIVD[CLXLINEX] == " ")
    if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if invoice is on ibm*/
      if (YITTBL.XXXSTAT[CLXYITX] == "A") /* if indicator is active*/
        if (CLXREC.CLXINVFD == "Y" /* if invoice was found*/
         || CLXREC.CLXORDFD == "Y") /* or order was found*/
          CL0NW04.IV0IVCDT[CLXLINEX] = IV0REC.IV0IVCDT;
          KL0NS31();
          KL0NM001.CL0NMIVD[CLXLINEX] = TA2REC.TA2GRGB;
          return;
        end
      else
        converseLib.validationFailed(128); /* invoice/order indicator invalid*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        return;
      end
    else
      converseLib.validationFailed(44); /* invoice date reqd when ivc entered*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      set KL0NM001.CL0NMIVD[CLXLINEX] cursor, modified, bold;
      return;
    end
  end
  ;
  CLXREC.XXXEDFLD = KL0NM001.CL0NMIVD[CLXLINEX];
  ;
  XPCL004(); /* validate date*/
  ;
  if (CLXREC.CLXVALDT == "Y") /* if valid date*/
    /* -------------------------- y2k in begin --------------------*/
    CL0NW01.CL0NW-DT-ENTER = TA2REC.TA2GRGGN; /* ccyymmdd*/
    CL0NW01.CL0NW-CUR-DT = VGVar.currentGregorianDate; /* ccyymmdd*/
    if (CL0NW01.CL0NW-DT-ENTER-CCYY <= CL0NW01.CL0NW-CUR-DT-CCYY)
    /* -------------------------- y2k in end   --------------------*/
      KL0NM001.CL0NMIVD[CLXLINEX] = CLXREC.XXXFLDT; /* move mm-dd-yy*/
      CL0NW04.IV0IVCDT[CLXLINEX] = TA2REC.TA2GRGGN;
    else
      set KL0NM001.CL0NMIVD[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      converseLib.validationFailed(17); /* date is not valid*/
      return;
    end
  else
    set KL0NM001.CL0NMIVD[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    converseLib.validationFailed(17); /* date is not valid*/
    return;
  end
  ;
  if (YITTBL.YITIOIBM[CLXYITX] == "Y")
    if (YITTBL.XXXSTAT[CLXYITX] == "A")
      if (CL0NW04.IV0IVCDT[CLXLINEX] == IV0REC.IV0IVCDT)
       /* next sentence*/
      else
        converseLib.validationFailed(39); /* invoice date reqd when ivc entered*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        set KL0NM001.CL0NMIVD[CLXLINEX] cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(128); /* invoice/order indicator invalid*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      return;
    end
  end
  ;
end // end KL0N123

// edit invoice/order combination
Function KL0N124()
   /* *************************************************************/
   /* edit the nike order number                         **/
   /* **/
   /* 01-4-91 chellm  Added CL0NS21 which determines if the IVC **/
   /* has been paid with Nike Bank dollars.     **/
   /* If true, a warning message will be shown  **/
   /* to the user.                              **/
   /* 12-23-91 twatso Added code to check for active row on     **/
   /* yittbl                                    **/
   /* 09-28-94 twatso Added code for golf level pay project.    **/
   /* If invoice entered is a level pay invoice **/
   /* 'p', then use it to get master invoice,   **/
   /* display master, and a message - highlight.**/
   /* Use master to find invoice data again.    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0N124"; /* set current process name*/
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0 /* if no invoice*/
   && KL0NM001.OP1CUOID[CLXLINEX] == 0) /* and no order*/
    if (YCTTBL.YCTRQIVC[CLXYCTX] == "Y" /* and one or the other*/
     || YCTTBL.YCTRQORD[CLXYCTX] == "Y") /* is required*/
      if (CL0NW03.CL0NW03M == 0 /* if only one invoice*/
       && YCRTBL.YCRSPARN[CLXYCRX] == "N") /* and not a mngmt spec arngmnt*/
        converseLib.validationFailed(124); /* ivc and/or ord is required*/
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        set KL0NM001.OP1CUOID[CLXLINEX] modified, bold;
        set KL0NM001.OP1NORID[CLXLINEX] modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
      end
    end
    return;
  end
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0 /* if no invoice*/
   && KL0NM001.OP1CUOID[CLXLINEX] != 0) /* but there is an order*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* and ivc is on ibm*/
      if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* and ivc is on ibm*/
        /* next sentence*/
      else
        converseLib.validationFailed(42); /* ivc reqd when ord entered*/
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        return;
      end
    else
      converseLib.validationFailed(128); /* invalid invoice/order indicator*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      return;
    end
  end
  ;
  ;
  if (KL0NM001.OP1CUOID[CLXLINEX] != 0)
    if (KL0NM001.OP1NORID[CLXLINEX] == 0)
      converseLib.validationFailed(93); /* nike sub-order must be > 0*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      set KL0NM001.OP1NORID[CLXLINEX] cursor, modified, bold;
      return;
    end
  end
  ;
  ;
  CLXREC.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CLXREC.OP1CUOID = KL0NM001.OP1CUOID[CLXLINEX];
  CLXREC.OP1NORID = KL0NM001.OP1NORID[CLXLINEX];
  ;
  if (CL0NW01.YITCD in YITTBL.YITCD)
    if (YITTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* only if active row on yittbl*/
      CLXREC.CLXYITX = sysVar.arrayIndex;
    else
      converseLib.validationFailed(128); /* invalid invoice/order indicator*/
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      return;
    end
  end
  ;
  CLXREC.YITCD = CL0NW01.YITCD;
  ;
   /* decide if the invoice exists on the iv0rec*/
  if (CLXREC.IV0IVCID > 0) /* if we have an invoice number*/
    IV0REC.IV0IVCID = CLXREC.IV0IVCID; /* load key*/
    CLXREC.CLXORDIV = CLXREC.IV0IVCID;
    IV0REC.IV0PARTN = CLXREC.CLXPARTN;
    ;
    KL0N970();
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && IV0REC.IV-LVL-PAY-IND == "P")
      set VLVLPY01 empty;
      VLVLPY01.IV0IVCID = IV0REC.IV0IVCID;
      KL0N-GET-MSTR-IVC(); /* go get the master invoice and display*/
                             /* message and new invoice number highlighted*/
      if (SQLCA.VAGen_SQLCODE == 0)
        IV0REC.IV0IVCID = VLVLPY01.IV-MSTR-IVC-ID; /* load key*/
        CLXREC.CLXORDIV = VLVLPY01.IV-MSTR-IVC-ID;
        IV0REC.IV0PARTN = CLXREC.CLXPARTN;
        KL0N970(); /* select iv0rec for master invoice*/
                                   /* number*/
      end
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* if all is still well...*/
      CLXREC.CLXINVFD = "Y";
      CLXREC.IV0GROUP = IV0REC.IV0GROUP;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set IV0REC empty;
        CLXREC.IV0GROUP = IV0REC.IV0GROUP;
        CLXREC.CLXINVFD = "N";
      else
        TA1REC.TA1DBASE = "DINVC";
        TA1REC.TA1TBLVU = "VIVHDX01";
        XPCL010();
      end
    end
  end
  ;
  ;
        /* decide if the order exists on the iv0rec*/
  if (CLXREC.OP1CUOID > 0
   && CLXREC.OP1NORID > 0)
    CLXREC.CLXORDIV = CLXREC.OP1CUOID;
    IV0REC.OP1PARTN = CLXREC.CLXPARTN;
    IV0REC.OP1CUOID = CLXREC.OP1CUOID;
    IV0REC.OP1NORID = CLXREC.OP1NORID;
    ;
    KL0N945(); /* select set*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0N946(); /* get first order*/
      if (SQLCA.VAGen_SQLCODE == 0)
        CLXREC.CLXORDFD = "Y"; /* order found flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set IV0REC empty;
          CLXREC.CLXORDFD = "N";
        else
          if (SQLCA.VAGen_SQLCODE < 0)
            TA1REC.TA1DBASE = "DINVC";
            TA1REC.TA1TBLVU = "VIVHDX01";
            XPCL010();
          end
        end
      end
    end /* ;;;;*/
    ;
    KL0N947(); /* close the scan cursor*/
  end
  ;
  ;
  ;
  KL0N129(); /* validate source code*/
  ;
  if (CL0NW04.CLXERRF[CLXLINEX] == "Y")
    return;
  end
  ;
  ;
  if (CLXREC.CLXINVFD == "Y"
   || CLXREC.CLXORDFD == "Y")
    if (CLXREC.CLXINVFD == "Y")
      IV0REC.IV0GROUP = CLXREC.IV0GROUP;
    end
    IVAREC.IV0PARTN = IV0REC.IV0PARTN;
    IVAREC.IV0IVCID = IV0REC.IV0IVCID;
    KL0N940();
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0NM001.IV0IVCID[CLXLINEX] = IVAREC.IV0IVCID;
      if (KL0NM001.CL0NMSEL[CLXLINEX] == "P")
        CL0NW05.IV0GROUP = IV0REC.IV0GROUP;
        CL0NW05.IVAGROUP = IVAREC.IVAGROUP;
      end
    else
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVHDR01";
      XPCL010();
    end
  end
  ;
  ;
  if (CLXREC.CLXINVFD == "Y" /* 1-4-91*/
   && CL0NW04.CL0NWNBF[CLXLINEX] != "Y") /* and msg not already shown*/
    KL0NS21(); /* determine if NBQ GL's exist on the*/
                                   /* invoice.*/
  end
  ;
end // end KL0N124

// edit invoice type code
Function KL0N125()
   /* ***********************************************/
   /* yitcd must be ' ' or same as primary/header*/
   /* yitcd*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "CL0N125"; /* set current process name*/
  ;
  ;
  ;
  if (CL0NW01.CL0NWNNP == "Y") /* if need new primary*/
    if (CL0NW01.YITCD == " ")
      CL0NW01.CL0NWX1 = 1;
      CL0NW01.CL0NWDON = "N";
      while (CL0NW01.CL0NWX1 <= 11
       && CL0NW01.CL0NWDON == "N") /* and not done*/
        if (KL0NM001.IV0IVCID[CL0NWX1] != 0
         || KL0NM001.OP1CUOID[CL0NWX1] != 0)
          if (KL0NM001.YITCD[CL0NWX1] != " ")
            CL0NW01.YITCD = KL0NM001.YITCD[CL0NWX1];
            CL0NW01.CL0NWDON = "Y";
          else
            converseLib.validationFailed(48); /* must establish invoice type*/
            set KL0NM001.YITCD[CL0NWX1] cursor, modified, bold;
            CL0NW04.CLXERRF[CLXLINEX] = "Y";
            return;
          end
        end
        CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
      end
    end
  end
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0
   && KL0NM001.OP1CUOID[CLXLINEX] == 0
   && KL0NM001.OP1NORID[CLXLINEX] == 0)
    KL0NM001.YITCD[CLXLINEX] = " ";
    return;
  end
  ;
  ;
  if (KL0NM001.YITCD[CLXLINEX] == " ") /* default yitcd*/
    KL0NM001.YITCD[CLXLINEX] = CL0NW01.YITCD;
  end
  ;
  ;
  if (KL0NM001.YITCD[CLXLINEX] == "I"
   || KL0NM001.YITCD[CLXLINEX] == "O"
   || KL0NM001.YITCD[CLXLINEX] == "D")
    if (CL0NW01.CL0NWNNP == "Y")
      CL0NW01.YITCD = KL0NM001.YITCD[CLXLINEX];
    else
      if (KL0NM001.YITCD[CLXLINEX] == CL0NW01.YITCD)
        /* next sentence*/
      else
        converseLib.validationFailed(49); /* invalid invoice type code*/
        set KL0NM001.YITCD[CLXLINEX] cursor, modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        return;
      end
    end
  else
    converseLib.validationFailed(157); /* invalid invoice type code*/
    set KL0NM001.YITCD[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    return;
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KL0N125

// edit delete of ivc #
Function KL0N126()
   /* ***********************************************/
   /* if deleting invoice, check to make sure not all*/
   /* invoices are being deleted*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "CL0N126"; /* set current process name*/
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X")
    if (CL0NW02.CL0NWHAR[CLXARAYX] == "Y")
      converseLib.validationFailed(158); /* cant delete...assoc with a/r ref nbr*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      return;
    end
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X"
   && CL0NW02.CL0NWNOC[CLXARAYX] > 1)
    converseLib.validationFailed(164); /* consolidation of clc lines*/
    set KL0NM001.CL0NMSEL[CLXLINEX] cursor, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    return;
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X")
    /* next sentence*/
  else
    if (KL0NM001.IV0IVCID[CLXLINEX] == 0 /* if not there now*/
     && CL0NW04.IV0IVCID[CLXLINEX] != 0) /* but was there before*/
      /* next sentence*/
    else
      if (KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX]
       && CL0NW04.IV0IVCID[CLXLINEX] != 0)
        /* next sentence*/
      else
        return;
      end
    end
  end
  ;
  ;
  if (CL0NW02.CL0NWCLB[CLXARAYX] == "Y") /* if assoc with clb record*/
     /* next sentence*/
  else
    return;
  end
  ;
  if (CL0NW04.IV0IVCID[CLXLINEX] in CL0NW03.IV0IVCID)
    CL0NW03.CL0NW03X = sysVar.arrayIndex;
    CL0NW03.CL0NWDFL[CL0NW03X] = " ";
  else
    TA1REC.TA1LOCAT[2] = "IVC NOTF"; /* 4-5-88*/
    CLXREC.CLXWFLDN = CL0NW04.IV0IVCID[CLXLINEX]; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    XPCL010();
  end
  ;
  CL0NW01.CL0NWNBR = CL0NW03.CL0NWNOD[CL0NW03X] + 1;
  if (CL0NW01.CL0NWNBR == CL0NW03.CL0NWNOI[CL0NW03X])
    if (KL0NM001.CL0NMSEL[CLXLINEX] == "X"
     || KL0NM001.IV0IVCID[CLXLINEX] == 0)
      if (CL0NW04.CLBGLIND[CLXLINEX] == "Y" /* g/l exist for ivc*/
       || CL0NW04.CLBSRIND[CLXLINEX] == "Y" /* prd exist for ivc*/
       || CL0NW04.CL0NWRAI[CLXLINEX] == "Y") /* r/a exist for ivc 2/89*/
        converseLib.validationFailed(40); /* cant delete...has prd &/or gl*/
        set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        CL0NW03.CL0NWDFL[CL0NW03X] = " ";
        return;
      else
        CL0NW03.CL0NWNOD[CL0NW03X] = CL0NW03.CL0NWNOD[CL0NW03X] + 1;
        CL0NW03.CL0NWDFL[CL0NW03X] = "Y"; /* set delete flag*/
      end
    else
      CL0NW03.CL0NWNOD[CL0NW03X] = CL0NW03.CL0NWNOD[CL0NW03X] + 1;
      CL0NW03.CL0NWDFL[CL0NW03X] = "Y"; /* set delete flag*/
    end
  end
  ;
  ;
  if (" " in CL0NW03.CL0NWDFL /* if at least one ivc not deleted*/
   && sysVar.arrayIndex <= CL0NW03.CL0NW03M)
    /* next sentence*/
  else
    if (YCTTBL.YCTRQIVC[CLXYCTX] == "Y"
     && YCRTBL.YCRSPARN[CLXYCRX] == "N") /* and not spec arrang.*/
      converseLib.validationFailed(159); /* cant delete last invoice*/
      set KL0NM001.CL0NMSEL[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      CL0NW03.CL0NWNOD[CL0NW03X] = CL0NW03.CL0NWNOD[CL0NW03X] - 1;
      CL0NW03.CL0NWDFL[CL0NW03X] = " ";
      return;
    end
  end
  ;
  ;
end // end KL0N126

// check if combo already exists
Function KL0N127()
   /* ***********************************************/
   /* *  ensure that the customer reference nbr/invoice*/
   /* *  combination does not already exist*/
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "CL0N127"; /* set current process name*/
  ;
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0
   && KL0NM001.ARCCCREF[CLXLINEX] == " ")
    return;
  end
  ;
  ;
  CL0NW01.CL0NWX1 = 1;
  CL0NW01.CL0NWDON = "N";
  ;
  while (CL0NW01.CL0NWDON == "N"
   && CL0NW01.CL0NWX1 <= CL0NW02.CL0NW02M)
    if (KL0NM001.ARCCCREF[CLXLINEX] in CL0NW02.ARCCCREF from CL0NWX1)
      if (KL0NM001.IV0IVCID[CLXLINEX] == CL0NW02.IV0IVCID[sysVar.arrayIndex])
        converseLib.validationFailed(41); /* this combination already exists*/
        set KL0NM001.IV0IVCID[CLXLINEX] modified, bold;
        set KL0NM001.ARCCCREF[CLXLINEX] cursor, modified, bold;
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        return;
      end
      CL0NW01.CL0NWX1 = sysVar.arrayIndex;
      CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
    else
      CL0NW01.CL0NWDON = "Y";
    end
  end
  ;
  ;
  CL0NW01.CL0NWX1 = 1;
  CL0NW01.CL0NWDON = "N";
  ;
  while (CL0NW01.CL0NWDON == "N"
   && CL0NW01.CL0NWX1 <= 11)
    if (KL0NM001.ARCCCREF[CLXLINEX] in KL0NM001.ARCCCREF from CL0NWX1)
      if (sysVar.arrayIndex == CLXREC.CLXLINEX)
         /* next sentence*/
      else
        if (KL0NM001.IV0IVCID[CLXLINEX] == CL0NW02.IV0IVCID[sysVar.arrayIndex])
          converseLib.validationFailed(41); /* this combination already exists*/
          set KL0NM001.IV0IVCID[CLXLINEX] modified, bold;
          set KL0NM001.ARCCCREF[CLXLINEX] cursor, modified, bold;
          CL0NW04.CLXERRF[CLXLINEX] = "Y";
          return;
        end
      end
      CL0NW01.CL0NWX1 = sysVar.arrayIndex;
      CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
    else
      CL0NW01.CL0NWDON = "Y";
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end KL0N127

// edit co.group cd, gpc & p.o.#
Function KL0N128()
   /* ************************************************************/
   /* *  verify claim's company group ID matches invoice's grp ID*/
   /* **/
   /* * 4-4-91 chellm   Ok now to mix PO #'s on DEF claims.*/
   /* **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N128"; /* 4-5-88*/
  ;
  if (KL0NM001.YITCD[CLXLINEX] == "I") /* if ibm invoice*/
    /* next sentence*/
  else
    if (KL0NM001.YITCD[CLXLINEX] == "Y" /* if 'additional' ibm invoice*/
     && CLXREC.CLXINVFD == "Y")         /* if invoice was found*/
      /* next sentence*/
    else
      return;
    end
  end
  ;
  ;
  if (CLXREC.CLXINVFD == "Y") /* if invoice was found*/
    if (IV0REC.KUCCOID == CLAREC.KUCCOID)
       /* next sentence*/
    else
      ;
      set KUCREC empty; /* (11-28-89)*/
      ;
      KUCREC.KUCCOID = IV0REC.KUCCOID;
      KL0N900(); /* get company record for ivc cmpny*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if customer is on file*/
        if (CL0NW01.KUCGRPID != 0 /* 11-13-89 add chk to show 0 as err*/
         && KUCREC.KUCGRPID == CL0NW01.KUCGRPID)
           /* next sentence*/
        else
          converseLib.validationFailed(45); /* company/group dont match*/
          set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
          CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* yes there is an error*/
          return;
        end
      else
        CLXREC.CLXWFLDN = IV0REC.KUCCOID; /* 4-5-88*/
        TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
        TA1REC.TA1DBASE = "DCUST"; /* 4-5-88*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* 4-5-88*/
        XPCL010();
      end
    end
  end
  ;
  ;
  if (IV0REC.XGPCD == CLAREC.XGPCD)
    /* next sentence*/
  else
    converseLib.validationFailed(46); /* invoice/claim gpc's dont match*/
    set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* yes there is an error*/
    return;
  end
  ;
  ;
  if (CLAREC.CLASETDT < 19900309
   && CLAREC.YCTCD == "RTS")
    if (IVAREC.SP1ID == "AST1" /* if invoice has holiday walking spgm*/
     || IVAREC.SP1ID == "AST2" /* then claim must have walking spgm*/
     || IVAREC.SP1ID == "AST3")
      if (CLAREC.SP1ID == "AST1"
       || CLAREC.SP1ID == "AST2"
       || CLAREC.SP1ID == "AST3")
         /* next sentence*/
      else
        converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    ;
    ;
    if (CLAREC.SP1ID == "AST1" /* if claim has holiday walking spgm*/
     || CLAREC.SP1ID == "AST2" /* then invoice must have walking spgm*/
     || CLAREC.SP1ID == "AST3")
      if (IVAREC.SP1ID == "AST1"
       || IVAREC.SP1ID == "AST2"
       || IVAREC.SP1ID == "AST3")
         /* next sentence*/
      else
        converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    ;
    ;
    if (IVAREC.SP1ID == "TEST" /* if invoice has holiday walking spgm*/
     || IVAREC.SP1ID == "WTPA" /* then claim must have walking spgm*/
     || IVAREC.SP1ID == "WA89")
      if (CLAREC.SP1ID == "TEST"
       || CLAREC.SP1ID == "WTPA"
       || CLAREC.SP1ID == "WA89")
         /* next sentence*/
      else
        converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
    ;
    ;
    if (CLAREC.SP1ID == "TEST" /* if claim has holiday walking spgm*/
     || CLAREC.SP1ID == "WTPA" /* then invoice must have walking spgm*/
     || CLAREC.SP1ID == "WA89")
      if (IVAREC.SP1ID == "TEST"
       || IVAREC.SP1ID == "WTPA"
       || IVAREC.SP1ID == "WA89")
         /* next sentence*/
      else
        converseLib.validationFailed(608); /* ivcs must have like sales pgm*/
        CL0NW04.CLXERRF[CLXLINEX] = "Y";
        set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
        return;
      end
    end
  end
  ;
  ;
   /* 1-11-88 drop p.o. edit on RTS clm type, task#67*/
   /* 4-04-91 drop p.o. edit on DEF clm type, no #*/
  ;
  if (CLAREC.YCTCD == "RTS" /* 4-5-88 chg 'ne' to 'eq'*/
   || CLAREC.YCTCD == "ADJ" /* 4-5-88 add 'adj'*/
   || CLAREC.YCTCD == "DEF") /* 4-4-91 add 'def'*/
    /* next sentence                ;4-5-88*/
  else /* 4-5-88*/
    if (IVAREC.OP1CUPO == CLAREC.OP1CUPO)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(47); /* invoice/claim po's dont match*/
      set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* yes is error*/
      return;
    end
  end
   /* 1-11-88 change above to exclude 'RTS'*/
  ;
  ;
  KL0NM001.YITCD[CLXLINEX] = CL0NW01.YITCD;
  ;
  ;
  ;
end // end KL0N128

// cross-validate yitcd
Function KL0N129()
   /* ***********************************************/
   /* yitcd must be ' ' or same as primary/header*/
   /* yitcd*/
   /* 12-23-91 twatso added code to check yittbl row to be active*/
   /*  */
   /* ***********************************************/
  ;
  CLXREC.CLXCPROC = "KL0N129"; /* set current process name*/
  ;
  ;
    /* check dec and old ibm invoices and orders*/
  if (YITTBL.YITIOIBM[CLXYITX] == "N") /* if invoice not on ibm*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* only active 12-23-91*/
      if (CLXREC.CLXORDFD == "N"
       && CLXREC.CLXINVFD == "N")
       /* next sentence*/
      else
        if (CLXREC.CLXORDFD == "Y"
         && CLXREC.CLXINVFD == "Y")
          converseLib.validationFailed(129); /* indicator invalid - invoice and order*/
                                   /* on file*/
          set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
          set KL0NM001.OP1CUOID[CLXLINEX] modified, bold;
          set KL0NM001.YITCD[CLXLINEX] modified, bold;
          CL0NW04.CLXERRF[CLXLINEX] = "Y";
        else
          if (CLXREC.CLXORDFD == "Y")
            converseLib.validationFailed(130); /* indicator invalid - order on file*/
            set KL0NM001.OP1CUOID[CLXLINEX] cursor, modified, bold;
            set KL0NM001.YITCD[CLXLINEX] modified, bold;
            CL0NW04.CLXERRF[CLXLINEX] = "Y";
          else
            if (CLXREC.CLXINVFD == "Y")
              converseLib.validationFailed(131); /* indicator invalid - invoice on file*/
              set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
              set KL0NM001.YITCD[CLXLINEX] modified, bold;
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
            end
          end
        end
      end
      return;
    else
      converseLib.validationFailed(128);
      set KL0NM001.YITCD[CLXLINEX] modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
      return;
    end
  end
  ;
  ;
    /* check current ibm invoices and orders*/
  ;
  if (YITTBL.YITIOIBM[CLXYITX] == "Y") /* if ivc supposed to be on ibm*/
    if (YITTBL.XXXSTAT[CLXYITX] == "A") /* only active 12-23-91*/
      if (CLXREC.CLXORDFD == "Y" /* and both order and*/
       && CLXREC.CLXINVFD == "Y") /* invoice are on file*/
        /* next sentence...nothing else to do*/
      else
        if (CLXREC.CLXORDFD == "N" /* if neither order nor*/
         && CLXREC.CLXINVFD == "N") /* invoice is on file*/
          set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
          set KL0NM001.OP1CUOID[CLXLINEX] modified, bold;
          set KL0NM001.YITCD[CLXLINEX] modified, bold;
          CL0NW04.CLXERRF[CLXLINEX] = "Y";
          converseLib.validationFailed(132); /* indicator invalid - no ivc or ord on*/
                                   /* file*/
        else
          if (CLXREC.CLXORDFD == "Y"
           && CLXREC.CLXINVFD == "N")
            if (CLXREC.IV0IVCID == 0)
              CLXREC.IV0IVCID = IV0REC.IV0IVCID; /* defaults*/
            else
              set KL0NM001.OP1CUOID[CLXLINEX] cursor, modified, bold;
              set KL0NM001.YITCD[CLXLINEX] modified, bold;
              converseLib.validationFailed(130); /* order on file, invoice isn't*/
              CL0NW04.CLXERRF[CLXLINEX] = "Y";
            end
          else
            if (CLXREC.CLXORDFD == "N"
             && CLXREC.CLXINVFD == "Y")
              if (CLXREC.OP1CUOID == 0)
                CLXREC.OP1CUOID = IV0REC.OP1CUOID;
                CLXREC.OP1NORID = IV0REC.OP1NORID;
              else
                set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
                set KL0NM001.YITCD[CLXLINEX] modified, bold;
                converseLib.validationFailed(131); /* invoice on file, order isn't*/
                CL0NW04.CLXERRF[CLXLINEX] = "Y";
              end
            end
          end
        end
      end
    else
      converseLib.validationFailed(128); /* invalid invoice/order indicator*/
      set KL0NM001.YITCD[CLXLINEX] modified, bold;
      CL0NW04.CLXERRF[CLXLINEX] = "Y";
    end
  end
  ;
  ;
end // end KL0N129

// update database
Function KL0N150()
   /* ************************************************************/
   /* *  process updates to the database*/
   /* *  if all updates go okay, then commit the changes*/
   /* ************************************************************/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-91  sgorga  Renamed cl0nw01.kuablid to kucblaid   **/
   /* *  2-15-91  bcourt  rename CLAREC.kuablid   to kucblaid.  **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N150"; /* set current process name*/
  ;
  CL0NW01.CL0NWUOK = "Y"; /* init database commit flag*/
  CL0NW01.CL0NWCPI = "N"; /* init change primary info flag*/
  ;
   /* if no screen errors , check for security violations.*/
   /* if valid security, do add/change/delete functions*/
  ;
  ;
       /* get date to be put on database record*/
  ;
  set TA2REC empty;
  TA2DTOPT = "GETDATE"; /* funcion request*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD == 0)
    CL0NW01.ZZZCHGTM = TA2REC.TA2TIMHM;
    CL0NW01.ZZZCHGDT = TA2REC.TA2GRGGN;
  else
    XPCL010();
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
  ;
  while (CLXREC.CLXLINEX <= 11)
    if (CL0NW04.CL0NWLNM[CLXLINEX] == "Y") /* if line was modified*/
      CLXREC.CLXARAYX = CL0NW04.CL0NWAYX[CLXLINEX];
      if (CL0NW04.CL0NWARS[CLXLINEX] == "A" /* add or change record*/
       || CL0NW04.CL0NWARS[CLXLINEX] == "R" 
       || CL0NW04.CL0NWARS[CLXLINEX] == "P" 
       || CL0NW04.CL0NWARS[CLXLINEX] == "X")
        KL0N151(); /* read clcrec for update*/
        KL0N153(); /* update the clc table*/
        CLXREC.CLXBLDAY = "Y";
        CLXREC.CLXBLDSC = "Y";
      end
      if (CL0NW04.CL0NWIVS[CLXLINEX] == "A" /* add or change record*/
       || CL0NW04.CL0NWIVS[CLXLINEX] == "R" 
       || CL0NW04.CL0NWIVS[CLXLINEX] == "P" 
       || CL0NW04.CL0NWIVS[CLXLINEX] == "X")
        KL0N152(); /* read clbrec for update*/
        KL0N154(); /* update the clb table*/
        CLXREC.CLXBLDAY = "Y";
        CLXREC.CLXBLDSC = "Y";
      end
      if (CLXREC.CLXERRF == "N")
        CL0NW04.YITCD[CLXLINEX] = KL0NM001.YITCD[CLXLINEX];
        CL0NW04.IV0IVCID[CLXLINEX] = KL0NM001.IV0IVCID[CLXLINEX];
        CL0NW04.OP1CUOID[CLXLINEX] = KL0NM001.OP1CUOID[CLXLINEX];
        CL0NW04.OP1NORID[CLXLINEX] = KL0NM001.OP1NORID[CLXLINEX];
        CL0NW04.ARCCCREF[CLXLINEX] = KL0NM001.ARCCCREF[CLXLINEX];
        CL0NW04.CL0NMIVD[CLXLINEX] = KL0NM001.CL0NMIVD[CLXLINEX];
        CL0NW04.CL0NMSEL[CLXLINEX] = KL0NM001.CL0NMSEL[CLXLINEX];
      end
      KL0NM001.CL0NMSEL[CLXLINEX] = " ";
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* increment counter*/
  end
  ;
  ;
  if (CL0NW01.CL0NWUOK == "Y") /* if database updates went ok*/
    CL0NW01.CL0NWDON = "N";
    CL0NW03.CL0NW03X = 1;
    while (CL0NW01.CL0NWDON == "N")
      if ("Y" in CL0NW03.CL0NWDFL from CL0NW03X) /* if delete ivc flag1-18-88*/
        CL0NW03.CL0NW03X = sysVar.arrayIndex;
        KL0N155(); /* delete clbrecs if required*/
        if (CL0NW03.CLBPMIVC[CL0NW03X] == "Y")
          KL0N156(); /* set new primary invoice*/
        end
        CL0NW03.CL0NW03X = CL0NW03.CL0NW03X + 1;
      else
        CL0NW01.CL0NWDON = "Y";
      end
    end
  end
  ;
  ;
  CLCREC.CLACLMNB = CLAREC.CLACLMNB;
  CLCREC.IV0IVCID = 0;
  CLCREC.ARCCCREF = " ";
  CLCREC.ARCREFNB = " ";
  CLCREC.ARCCHKNB = " ";
  ;
  ;
  KL0N955(); /* delete all a/r records that now have no valid*/
                /* ; information*/
  ;
  ;
  set CLBREC empty;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  KL0N960(); /* count invc recs on this claim*/
  CL0NW01.CL0NWNOI = CL0NW06.CL0NWCNT;
                                   /* count is returned in zzchgct*/
  ;
  CL0NW01.CLASHPFF = CLAREC.CLASHPFF;
  CL0NW01.CLABLGFF = CLAREC.CLABLGFF;
  CL0NW01.KUCBLAID = CLAREC.KUCBLAID; /* 2-15-91*/
  CL0NW01.KUMSHAID = CLAREC.KUMSHAID;
  ;
  if (CL0NW01.CL0NWNOI == 0) /* if no invoices left on claim*/
    if (CLAREC.CLABLGFF == "I" /* if bill-group or ship-to addresses*/
     || CLAREC.CLASHPFF == "I") /* came from the invoice*/
      KL0N157(); /* need to reset from-flags to customer*/
      CL0NW01.CL0NWCAF = "Y"; /* set changed-address-flags*/
    end
  end
  ;
  if (CL0NW01.CL0NWUOK == "Y") /* if database updates went ok*/
    KL0N160(); /* update clarec (vclhdr01)*/
  end
  ;
    /* commit updates if ok*/
  ;
  if (CL0NW01.CL0NWUOK == "Y") /* if database updates went ok*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit changes*/
  else
    call "ROLLBACK"; /* roll back any changes made*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
  ;
  ;
  ;
end // end KL0N150

// get curr a/r rec, store/delete
Function KL0N151()
   /* *************************************************************/
      /* read the appropriate clc record*/
  ;
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0N151"; /* set current process name*/
  ;
  ;
   /* move data from screen to record to be written to database*/
  ;
  ;
    /* load key fields*/
  if (CL0NW04.CL0NWAYX[CLXLINEX] == 0)
    set CLCREC empty; /* 4-5-88*/
    CL0NW05.CLCGROUP = CLCREC.CLCGROUP; /* 4-5-88*/
    return;
  end
  ;
  CLXREC.CLXARAYX = CL0NW04.CL0NWAYX[CLXLINEX];
  ;
  CLCREC.CLACLMNB = KL0NM001.CLACLMNB;
  CLCREC.IV0IVCID = CL0NW02.IV0IVCID[CLXARAYX];
  CLCREC.ARCCCREF = CL0NW02.ARCCCREF[CLXARAYX];
  CLCREC.ARCCHKNB = CL0NW02.ARCCHKNB[CLXARAYX];
  CLCREC.ARCREFNB = CL0NW02.ARCREFNB[CLXARAYX];
  ;
  KL0N932(); /* fetch record in inquiry 1-18-88*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.CLCGROUP = CLCREC.CLCGROUP; /* store original values*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLCREC empty; /* 4-5-88*/
      CL0NW05.CLCGROUP = CLCREC.CLCGROUP; /* 4-5-88*/
      return;
    else
      TA1REC.TA1TBLKE = CLCREC.CLCGROUP; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      XPCL010();
    end
  end
  ;
  ;
  KL0N933(); /* fetch for update/delete*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = CLCREC.CLCGROUP; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLARX01";
    XPCL010();
  end
  ;
  ;
  ;
  KL0N955(); /* delete record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = CLCREC.CLCGROUP; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLARX01";
    XPCL010();
  end
  ;
  ;
end // end KL0N151

// read clb record for update
Function KL0N152()
   /* *************************************************************/
   /* *  read appropriate clb record & lock for update*/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0N152"; /* set current process name*/
  ;
  if (CL0NW04.CL0NWAYX[CLXLINEX] == 0)
    set CLBREC empty; /* 4-5-88*/
    CL0NW05.CLBGROUP = CLBREC.CLBGROUP; /* 4-5-88*/
    return;
  end
  ;
  CLXREC.CLXARAYX = CL0NW04.CL0NWAYX[CLXLINEX];
  ;
  CLBREC.CLACLMNB = KL0NM001.CLACLMNB; /* load key fields*/
  CLBREC.IV0IVCID = CL0NW02.IV0IVCID[CLXARAYX];
  CLXREC.CLXORDIV = CL0NW02.IV0IVCID[CLXARAYX];
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N915(); /* fetch for inquiry*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.CLBGROUP = CLBREC.CLBGROUP;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLBREC empty; /* 4-5-88*/
      CL0NW05.CLBGROUP = CLBREC.CLBGROUP; /* 4-5-88*/
      return;
    else
      TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010();
    end
  end
  ;
  ;
  KL0N917(); /* fetch for update/delete*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  KL0N930(); /* delete record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
end // end KL0N152

// update the clc table, a/r
Function KL0N153()
   /* *************************************************************/
   /* * handle add/change/delete of clcrec (vclarx01)*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N153"; /* set current process name*/
  ;
  ;
   /* if record was found it was deleted and falls thru to here*/
   /* if record wasn't found, fall thru to here*/
  ;
  ;
  if (CL0NW04.CL0NWARS[CLXLINEX] == "X") /* if deleting*/
    if (CLCREC.CLCPMAR == "Y") /* and this was primary a/r record*/
      KL0N158(); /* assign new primary a/r record*/
    end
    return;
  end
  ;
  ;
  ;
     /* load fields that have changed*/
  if (CL0NW04.CL0NWARS[CLXLINEX] == "A")
    set CLCREC empty;
  else
    CLCREC.CLCGROUP = CL0NW05.CLCGROUP; /* original record 1-18-88*/
  end
  CLCREC.CLACLMNB = KL0NM001.CLACLMNB;
  if (CL0NW01.CL0NWNAP == "Y") /* if need primary a/r record*/
    CLCREC.CLCPMAR = "Y";
    CL0NW01.CL0NWNAP = "N";
  else
    CLCREC.CLCPMAR = "N";
  end
  CLCREC.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CLXREC.CLXORDIV = KL0NM001.IV0IVCID[CLXLINEX];
  CLCREC.IV0PARTN = CLXREC.CLXPARTN;
  CLCREC.ARCCCREF = KL0NM001.ARCCCREF[CLXLINEX];
  CLCREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
  CLCREC.ZZZCHGTM = CL0NW01.ZZZCHGTM;
  ;
  ;
  KL0N990(); /* add a/r record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TBLKE = CLCREC.CLCGROUP; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLARX01";
    XPCL010();
  end
  ;
  ;
  ;
end // end KL0N153

// update the clb table
Function KL0N154()
   /* *************************************************************/
   /* * handle add/change/delete of clbrec (vclivx01)*/
   /* * maintainance log:*/
   /* * 09-27-93 bcourt  Drop redundant code.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N154"; /* set current process name*/
  ;
  ;
   /* if record was found it was deleted and falls thru to here*/
   /* if record wasn't found, fall thru to here*/
  ;
  ;
  if (CL0NW04.CL0NWIVS[CLXLINEX] == "X") /* if deleting*/
    if (CLBREC.CLBPMIVC == "Y") /* and this is the primary invoice*/
      if ("P" in CL0NW04.CL0NWIVS) /* if a new primary selected*/
        /* next sentence*/
      else
        CL0NW01.CL0NWNNP = "Y"; /* need new primary record*/
      end
    end
    return;
  end
  ;
  ;
  if (CL0NW04.CL0NWIVS[CLXLINEX] == "P"
   && KL0NM001.IV0IVCID[CLXLINEX] != CL0NW01.CL0NWPIN
   && CL0NW01.YITCD == "I")
     /* commented out next line 6/15/88 - lhughe*/
     /* AND YCTTBL.YCTRQIVC(CLXYCTX) = 'Y'; and invoice is required*/
    ;
    CL0NW01.CL0NWCPI = "Y"; /* change the primary info on clarec*/
  end
  ;
  ;
  if (CL0NW04.CL0NWIVS[CLXLINEX] == "R")
    CLBREC.CLBGROUP = CL0NW05.CLBGROUP;
  else
    set CLBREC empty;
    CLBREC.CLBIVIND = "N";
    CLBREC.CLBGLIND = "N";
    CLBREC.CLBSRIND = "N";
  end
  ;
  ;
     /* load fields from the screen*/
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CLXREC.CLXORDIV = KL0NM001.IV0IVCID[CLXLINEX];
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  if (CL0NW01.CL0NWNNP == "Y" /* if need new primary record*/
   || CL0NW04.CL0NWIVS[CLXLINEX] == "P")
    CLBREC.CLBPMIVC = "Y";
    CL0NWNNP = "N";
  else
    CLBREC.CLBPMIVC = "N";
  end
  CLBREC.IV0IVCDT = CL0NW04.IV0IVCDT[CLXLINEX];
  CLBREC.OP1CUOID = KL0NM001.OP1CUOID[CLXLINEX];
  CLXREC.CLXORDIV = KL0NM001.OP1CUOID[CLXLINEX];
  CLBREC.OP1PARTN = CLXREC.CLXPARTN;
  CLBREC.OP1NORID = KL0NM001.OP1NORID[CLXLINEX];
  CLBREC.YITCD = CL0NW01.YITCD;
   /* MOVE CLBREC.CLBGLIND TO CLBREC.CLBGLIND; 9/93 drop redundant code*/
   /* MOVE CLBREC.CLBSRIND TO CLBREC.CLBSRIND;*/
   /* MOVE CLBREC.CLBIVIND TO CLBREC.CLBIVIND;*/
  CLBREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
  CLBREC.ZZZCHGTM = CL0NW01.ZZZCHGTM;
  ;
  ;
  KL0N910(); /* add record to database*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  if (CLBREC.IV0IVCID != 0)
    if (CLBREC.IV0IVCID in CL0NW03.IV0IVCID)
       /* next sentence...already existed*/
    else
      if (0 in CL0NW03.IV0IVCID)
        CL0NW03.IV0IVCID[CLXLINEX] = CLBREC.IV0IVCID;
      end
    end
  end
  ;
end // end KL0N154

// delete clbrecs if required
Function KL0N155()
   /* *************************************************************/
   /* *  read appropriate clb record & lock for update*/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0N155"; /* set current process name*/
  ;
  ;
  CLBREC.CLACLMNB = KL0NM001.CLACLMNB; /* load key fields*/
  CLBREC.IV0IVCID = CL0NW03.IV0IVCID[CL0NW03X];
  CLXREC.CLXORDIV = CL0NW03.IV0IVCID[CL0NW03X];
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N915();
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010();
    end
  end
  ;
  ;
  KL0N917(); /* update clbrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  KL0N930(); /* delete record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  CLCREC.CLACLMNB = KL0NM001.CLACLMNB; /* load key fields*/
  XQWREC.XQWINTL1 = CL0NW03.IV0IVCID[CL0NW03X];
  CLXREC.CLXORDIV = CL0NW03.IV0IVCID[CL0NW03X];
  XQWREC.XQW01CL1 = CLXREC.CLXPARTN;
  CLCREC.IV0IVCID = 0;
  CLCREC.IV0PARTN = " ";
  CLCREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
  CLCREC.ZZZCHGTM = CL0NW01.ZZZCHGTM;
  ;
  ;
  KL0N930(); /* delete record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  ;
  ;
end // end KL0N155

// deleted old pri ivc,so set new
Function KL0N156()
   /* *************************************************************/
   /* cl0n150 deleted primary invoice number 1-18-88*/
   /* so set new primary invoice record*/
   /*  */
   /* maintenance*/
   /* 09-26-94 twatso  added code for golf level pay project.*/
   /* IF INVOICE FOUND, CHECK FOR LEVEL PAY IND*/
   /* eq 'p'.  If found, then get the master invoice*/
   /* and use it to get the invoice iv0group for*/
   /* working storage fields.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N156"; /* set current process name*/
  ;
  CL0NW01.CL0NWX1 = 1;
  CL0NW01.CL0NWPIN = 0;
  ;
  while (CL0NW01.CL0NWX1 <= CL0NW03.CL0NW03M)
    if (CL0NW03.IV0IVCID[CL0NWX1] != 0
     && CL0NW03.CL0NWDFL[CL0NWX1] != "Y")
      CL0NW01.CL0NWPIN = CL0NW03.IV0IVCID[CL0NWX1];
      CL0NW01.CL0NWX1 = 999;
    else
      CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
    end
  end
  ;
  if (CL0NW01.CL0NWPIN == 0)
    return;
  end
  ;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.IV0IVCID = CL0NW01.CL0NWPIN;
  CLXREC.CLXORDIV = CL0NW01.CL0NWPIN;
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N915(); /* select unique clbrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.CLBGROUP = CLBREC.CLBGROUP;
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  KL0N917(); /* update clbrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  KL0N930(); /* delete from clbrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  CLBREC.CLBGROUP = CL0NW05.CLBGROUP;
  CLBREC.CLBPMIVC = "Y";
  CLBREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
  CLBREC.ZZZCHGTM = CL0NW01.ZZZCHGTM;
  ;
  ;
  ;
  KL0N910(); /* add clbrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  if (CLBREC.YITCD == "I")
    /* next sentence*/
  else
    CL0NW01.CL0NWCPI = "N";
    return;
  end
  ;
  ;
  CL0NW01.CL0NWCPI = "Y";
  ;
  IV0REC.IV0IVCID = CL0NW01.CL0NWPIN;
  CLXREC.CLXORDIV = CL0NW01.CL0NWPIN;
  IV0REC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  KL0N970(); /* select unique iv0rec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* IF INVOICE FOUND AND IT IS LEVEL PAY*/
    if (IV0REC.IV-LVL-PAY-IND == "P") /* type invoice, go get master inv*/
      set VLVLPY01 empty;
      VLVLPY01.IV0IVCID = IV0REC.IV0IVCID;
      ;
      KL0N-GET-MSTR-IVC(); /* if found, display message and*/
                                   /* highlight new invoice number(master)*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if master invoice found use it to get*/
        IV0REC.IV0IVCID = VLVLPY01.IV-MSTR-IVC-ID;
                                   /* inv data from the iv0rec*/
        CLXREC.CLXORDIV = VLVLPY01.IV-MSTR-IVC-ID;
        IV0REC.IV0PARTN = CLXREC.CLXPARTN;
        ;
        KL0N970(); /* select unique iv0rec*/
      end
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* finally have a valid iv0group*/
      CL0NW05.IV0GROUP = IV0REC.IV0GROUP;
    end
  else
    CLXREC.CLXWFLDN = CL0NW01.CL0NWPIN; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDX01";
    XPCL010();
  end
  ;
  ;
  ;
  IVAREC.IV0IVCID = CL0NW01.CL0NWPIN;
  CLXREC.CLXORDIV = CL0NW01.CL0NWPIN;
  IVAREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  ;
  KL0N940(); /* select unique ivarec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0NW05.IVAGROUP = IVAREC.IVAGROUP;
  else
    CLXREC.CLXWFLDN = CL0NW01.CL0NWPIN; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDR01";
    XPCL010();
  end
  ;
  ;
end // end KL0N156

// reset from-flags to customer
Function KL0N157()
   /* ************************************************************/
   /* *      update claim address table                         **/
   /* *                                                         **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-91  sgorga                                        **/
   /* *           Renamed kucrec.kuablid to kucrec.kucblaid and **/
   /* *           cl0nw01.kuablid to cl0nw01.kucblaid.          **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N157"; /* set current process name*/
  ;
  ;
  ;
  if (CLAREC.CLABLGFF == "I")
    CL0NW01.CL0NWFNC = "ADD";
    KL0NS91(); /* add new claim bill to addr rec*/
  end
  CL0NW01.CLABLGFF = "C";
  CL0NW01.KUCBLAID = KUCREC.KUCBLAID;
  ;
  ;
  if (CLAREC.CLASHPFF == "I")
    CL0NW01.CL0NWFNC = "ADD";
    KL0NS92(); /* add new claim ship to addr rec*/
  end
  CL0NW01.CLASHPFF = "C";
  CL0NW01.KUMSHAID = KUMREC.KUMSHAID;
  ;
  ;
  ;
  ;
  ;
end // end KL0N157

// assign new primary a/r record
Function KL0N158()
   /* *******************************************/
   /* * change record that has primary key on it*/
   /* *******************************************/
  ;
  CLXREC.CLXCPROC = "CL0N158"; /* set current process name*/
  ;
  ;
  ;
   /* the primary ar-ref-nbr was deleted and a new one is needed*/
   /* if there are records following the current one, the next*/
   /* one will become the primary ar-ref-nbr.*/
  ;
  CLCREC.CLACLMNB = KL0NM001.CLACLMNB; /* load key*/
  CLCREC.CLCPMAR = "*";
  ;
  KL0N975();
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0N976(); /* fetch current record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CLCREC.CLCPMAR = "Y";
      CLCREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
      CLCREC.ZZZCHGTM = CLXREC.XXXCTIME;
    else
      if (sysVar.sqlData.sqlcode < 0)
        TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLARX01";
        XPCL010();
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLARX01";
      XPCL010();
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    ;
    KL0N992(); /* update record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0NW01.CL0NWAR1 = "N";
      CLXREC.CLXBLDAY = "Y"; /* need to refresh array*/
      CLXREC.CLXBLDSC = "Y"; /* need to refresh screen*/
    else
      if (SQLCA.VAGen_SQLCODE < 0)
        TA1REC.TA1TBLKE = KL0NM001.CLACLMNB; /* 4-5-88*/
        TA1REC.TA1DBASE = "DCLAIM ";
        TA1REC.TA1TBLVU = "VCLARX01";
        XPCL010();
      end
    end
  end
  ;
  KL0N977(); /* close clcrec s1 cursor*/
  ;
end // end KL0N158

// update clarec with yitcd
Function KL0N160()
   /* *************************************************************/
   /* update clarec with current yitcd*/
   /* *************************************************************/
   /* *  MAINTENANCE HISTORY                                     **/
   /* *                                                          **/
   /* *01-04-91 sgorga Renamed cl0nw01.kuablid to cl0nw01.kucblaid*/
   /* *  2-15-91 bcourt Renamed CLAREC.kuablid to kucblaid*/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0N160"; /* set current process name*/
  ;
  KL0N950();
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    XPCL010();
  end
  ;
  ;
  if (CL0NW01.CL0NWNOI == 0) /* if no invoices left*/
    CLAREC.IV0IVCID = 0;
    CLAREC.IV0PARTN = "0";
  else
    if (CL0NW01.CL0NWCPI == "Y") /* if primary invoice changed*/
      IV0REC.IV0GROUP = CL0NW05.IV0GROUP;
      IVAREC.IVAGROUP = CL0NW05.IVAGROUP;
      CLAREC.IV0IVCID = IVAREC.IV0IVCID; /* 3-10-88*/
      CLAREC.IV0PARTN = IVAREC.IV0PARTN; /* 3-10-88*/
      CLAREC.OP1CUPO = IVAREC.OP1CUPO;
      CLAREC.XWHCD = IVAREC.XWHCD;
      CLAREC.XPTCD = IVAREC.XPTCD;
      CLAREC.SP1ID = IVAREC.SP1ID;
      CLAREC.XOTCD = IVAREC.XOTCD;
      CLAREC.XOBCD = IV0REC.XOBCD;
      CLAREC.XOCCD = IVAREC.XOCCD;
      CLAREC.XSOCD = IV0REC.XSOCD;
      CLAREC.KUYSVRID = IVAREC.OP1TBREP;
    end
  end
  ;
  ;
  ;
  CL0NW01.CL0NWYIT = CLAREC.YITCD; /* save for later comparison*/
  ;
  ;
    /* find new value of yitcd*/
  ;
   /* incase the user deleted all and started over w/ new yitcd,*/
   /* use the yitcd from the primary record*/
  CLAREC.YITCD = KL0NM001.YITCD[1];
  ;
  ;
  if (CL0NW01.CL0NWNOI > 1) /* multiple records*/
    if (CLAREC.YITCD == "D")
      CLAREC.YITCD = "A";
    else
      if (CLAREC.YITCD == "O")
        CLAREC.YITCD = "M";
      else
        if (CLAREC.YITCD == "I")
          CLAREC.YITCD = "Y";
        end
      end
    end
  else /* single record*/
    if (CLAREC.YITCD == "A")
      CLAREC.YITCD = "D";
    else
      if (CLAREC.YITCD == "M")
        CLAREC.YITCD = "O";
      else
        if (CLAREC.YITCD == "Y")
          CLAREC.YITCD = "I";
        end
      end
    end
  end
  ;
  CLAREC.KUCBLAID = CL0NW01.KUCBLAID; /* 2-15-91*/
  CLAREC.CLABLGFF = CL0NW01.CLABLGFF;
  CLAREC.CLASHPFF = CL0NW01.CLASHPFF;
  CLAREC.KUMSHAID = CL0NW01.KUMSHAID;
  ;
  ;
  if (CLAREC.YITCD == CL0NW01.CL0NWYIT
   && CL0NW01.CL0NWCPI != "Y" /* 1-18-88 add check for pri ivc*/
   && CL0NW01.CL0NWCAF != "Y") /* 8-88-88 chg address flags*/
    return; /* no change to invoice type and abundance*/
  end
  ;
  CL0NW01.CL0NWCPI = "N"; /* 1-18-88 move here*/
  CL0NW01.CL0NWCAF = "N"; /* 8-18-88 move here*/
  ;
  ;
  CLAREC.ZZZCHGDT = CL0NW01.ZZZCHGDT;
  CLAREC.ZZZCHGTM = CL0NW01.ZZZCHGTM;
  ;
  KL0N935(); /* update clarec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    CLXREC.CLXWFLDN = CLAREC.CLACLMNB; /* 4-5-88*/
    TA1REC.TA1TBLKE = CLXREC.CLXWFLDC; /* 4-5-88*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    XPCL010();
  end
  ;
  ;
end // end KL0N160

// set add/chg/del selction cd
Function KL0N180()
   /* ************************************************************/
   /* *     decide whether a record will be added/changed/      **/
   /* *     deleted*/
   /* *  two records need to be updated clcrec (when arcccref*/
   /* *  changes) and clbrec (when iv0ivcid, op1cuoid or*/
   /* *  op1norid changes).*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N180"; /* set current process name*/
  ;
  CL0NW04.CL0NWIVS[CLXLINEX] = " "; /* invoice select 1-18-88*/
  CL0NW04.CL0NWARS[CLXLINEX] = " "; /* a/r select*/
  ;
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] in CL0NW03.IV0IVCID
   && CL0NW03.IV0IVCID[sysVar.arrayIndex] != 0)
    CL0NW03.CL0NW03X = sysVar.arrayIndex;
  else
    CL0NW03.CL0NW03X = 0;
  end
  ;
   /* if we are on any but the first screen, find the current*/
   /* position on screen of last array entry*/
  ;
   /* if we are dealing with new entries onto the screen*/
  ;
  ;
  if (CL0NW04.CL0NWNEF[CLXLINEX] == "Y") /* if a new entry*/
    KL0N181(); /* set up new-record flags*/
  else
    KL0N182(); /* set up existing-record flags*/
  end
  ;
  ;
   /* fiqure value to be placed in selection field if pf12 is hit*/
  ;
  if (CL0NW04.CL0NWIVS[CLXLINEX] == "P")
    KL0NM001.CL0NMSEL[CLXLINEX] = "P";
  else
    if (CL0NW04.CL0NWARS[CLXLINEX] == "A"
     && CL0NW04.CL0NWIVS[CLXLINEX] == "A")
      KL0NM001.CL0NMSEL[CLXLINEX] = "A";
    else
      if (CL0NW04.CL0NWARS[CLXLINEX] == " "
       && CL0NW04.CL0NWIVS[CLXLINEX] == "A")
        KL0NM001.CL0NMSEL[CLXLINEX] = "A";
      else
        if (CL0NW04.CL0NWARS[CLXLINEX] == "A"
         && CL0NW04.CL0NWIVS[CLXLINEX] == " ")
          KL0NM001.CL0NMSEL[CLXLINEX] = "A";
        else
          if (CL0NW04.CL0NWARS[CLXLINEX] == "X"
           && CL0NW04.CL0NWIVS[CLXLINEX] == "X")
            KL0NM001.CL0NMSEL[CLXLINEX] = "X";
          else
            if (CL0NW04.CL0NWARS[CLXLINEX] == " "
             && CL0NW04.CL0NWIVS[CLXLINEX] == "X")
              KL0NM001.CL0NMSEL[CLXLINEX] = "X";
            else
              if (CL0NW04.CL0NWARS[CLXLINEX] == "X"
               && CL0NW04.CL0NWIVS[CLXLINEX] == " ")
                KL0NM001.CL0NMSEL[CLXLINEX] = "X";
              else
                KL0NM001.CL0NMSEL[CLXLINEX] = "R";
              end
            end
          end
        end
      end
    end
  end
end // end KL0N180

// set new-entry add/chg/del flg
Function KL0N181()
   /* ************************************************************/
   /* *     decide whether a new entry be added/changed/      **/
   /* *     deleted*/
   /* *  two records need to be updated clcrec (when arcccref*/
   /* *  changes) and clbrec (when iv0ivcid, op1cuoid or*/
   /* *  op1norid changes).*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N181"; /* set current process name*/
  ;
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X") /* a/r select 1-18-88*/
    CL0NW04.CL0NWARS[CLXLINEX] = "X";
  else
    if (KL0NM001.ARCCCREF[CLXLINEX] != " ") /* add to clcrec*/
      CL0NW04.CL0NWARS[CLXLINEX] = "A";
    end
  end
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X") /* ivc select*/
    CL0NW04.CL0NWIVS[CLXLINEX] = "X";
  else
    if (KL0NM001.CL0NMSEL[CLXLINEX] == "P") /* new pri ivc on map*/
      CL0NW01.CL0NWX1 = 1;
      while (CL0NW01.CL0NWX1 <= 11)
        if (KL0NM001.IV0IVCID[CLXLINEX] == KL0NM001.IV0IVCID[CL0NWX1])
          KL0NM001.CLBPMIVC[CL0NWX1] = "Y"; /* new pri ivc flag*/
          CL0NW04.CL0NWLNM[CL0NWX1] = "Y"; /* line modified*/
          CL0NW04.CL0NWIVS[CL0NWX1] = "P";
        else
          if (KL0NM001.CLBPMIVC[CL0NWX1] == "Y") /* old pri ivc*/
            CL0NW04.CL0NWLNM[CL0NWX1] = "Y"; /* reset to regular ivc*/
            KL0NM001.CLBPMIVC[CL0NWX1] = "N";
            CL0NW04.CL0NWIVS[CL0NWX1] = "R";
          end
        end
        CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
      end
      CL0NW04.CL0NWIVS[CLXLINEX] = "P"; /* mark map image*/
    else
      if (KL0NM001.IV0IVCID[CLXLINEX] != 0) /* add to clbrec*/
        if (CL0NW03.CL0NW03X != 0) /* if invoice already on clivx01*/
          /* next sentence...already exists*/
        else
          if (0 in CL0NW03.IV0IVCID) /* find next avail array slot*/
            CL0NW03.IV0IVCID[sysVar.arrayIndex] = KL0NM001.IV0IVCID[CLXLINEX];
            CL0NW04.CL0NWIVS[CLXLINEX] = "A"; /* add to array & clbtbl*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N181

// set existing add/chg/del flags
Function KL0N182()
   /* ************************************************************/
   /* *     decide whether an existing record will be added/    **/
   /* *     /changed/deleted*/
   /* *  two records need to be updated clcrec (when arcccref*/
   /* *  changes) and clbrec (when iv0ivcid, op1cuoid or*/
   /* *  op1norid changes).*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N182"; /* set current process name*/
  ;
    /* if we are dealing with current entries on the screen*/
  ;
    /* first look at clcrec = a/r 1-18-88*/
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X"
   && KL0NM001.ARCCCREF[CLXLINEX] != " ")
    CL0NW04.CL0NWARS[CLXLINEX] = "X";
  else
    if (CL0NW04.ARCCCREF[CLXLINEX] == " "
     && KL0NM001.ARCCCREF[CLXLINEX] != " ")
      CL0NW04.CL0NWARS[CLXLINEX] = "A";
    else
      if (CL0NW04.ARCCCREF[CLXLINEX] != " "
       && KL0NM001.ARCCCREF[CLXLINEX] == " ")
        CL0NW04.CL0NWARS[CLXLINEX] = "X";
      else
        if (CL0NW04.ARCCCREF[CLXLINEX] != KL0NM001.ARCCCREF[CLXLINEX]
         || CL0NW04.IV0IVCID[CLXLINEX] != KL0NM001.IV0IVCID[CLXLINEX]
         || CL0NW04.OP1CUOID[CLXLINEX] != KL0NM001.OP1CUOID[CLXLINEX]
         || CL0NW04.OP1NORID[CLXLINEX] != KL0NM001.OP1NORID[CLXLINEX])
          CL0NW04.CL0NWARS[CLXLINEX] = "R";
        end
      end
    end
  end
  ;
  ;
    /* then look at clbrec = invoice*/
  ;
   /* if changing primary invoice, set up new primary and*/
   /* need to delete old. if the new primary is on the first*/
   /* screen (clxarayx le 11), then change cl0nw04*/
   /* and go on. if the new primary is on a following screen,*/
   /* then set flag to update old primary in cl0n150/157*/
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "P") /* if new pri ivc on map*/
    CL0NW01.CL0NWX1 = 1;
    CL0NW01.CL0NWDON = "N";
    while (CL0NW01.CL0NWX1 <= CLXREC.CLXLSTAX /* nbr of entries in array*/
     && CL0NW01.CL0NWDON == "N")
      if (KL0NM001.IV0IVCID[CLXLINEX] == CL0NW03.IV0IVCID[CL0NWX1])
        CL0NW01.CL0NWDON = "Y"; /* have found new primary*/
        KL0NM001.CLBPMIVC[CLXLINEX] = "Y"; /* set primary flag*/
        CL0NW04.CL0NWLNM[CLXLINEX] = "Y"; /* line modified*/
        CL0NW04.CL0NWIVS[CLXLINEX] = "P";
      else
        if (CL0NW03.CLBPMIVC[CL0NWX1] == "Y") /* if old pri ivc*/
          if (CLXREC.CLXARAYX <= 11) /* working on first screen*/
            CL0NW04.CL0NWLNM[CL0NWX1] = "Y"; /* reset to regular ivc*/
            KL0NM001.CLBPMIVC[CL0NWX1] = "N";
            CL0NW04.CL0NWIVS[CL0NWX1] = "R";
          else
            CL0NW03.CLBPMIVC[CL0NWX1] = "U"; /* updt old prmy flag*/
          end
        end
      end
      CL0NW01.CL0NWX1 = CL0NW01.CL0NWX1 + 1;
    end
    CL0NW04.CL0NWIVS[CLXLINEX] = "P";
    return;
  end
  ;
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] == "X"
   && CL0NW04.IV0IVCID[CLXLINEX] != 0)
    CL0NW03.CL0NWNOI[CL0NW03X] = CL0NW03.CL0NWNOI[CL0NW03X] - 1;
    if (CL0NW03.CL0NWNOI[CL0NW03X] < 1)
      CL0NW04.CL0NWIVS[CLXLINEX] = "X";
    end
  else
    if (CL0NW03.CL0NW03X != 0
     && CL0NW03.CL0NWDFL[CL0NW03X] == "Y")
      CL0NW04.CL0NWIVS[CLXLINEX] = "X";
    else
      if (CL0NW04.IV0IVCID[CLXLINEX] == 0 /* no invoice before*/
       && KL0NM001.IV0IVCID[CLXLINEX] != 0) /* but there is one now*/
        if (CL0NW03.CL0NW03X != 0) /* if invoice already on clivx01*/
          /* next sentence...already exists*/
        else
          CL0NW04.CL0NWIVS[CLXLINEX] = "A";
        end
      else
        if (KL0NM001.IV0IVCID[CLXLINEX] != CL0NW04.IV0IVCID[CLXLINEX])
          if (CL0NW03.CL0NW03X > 0)
             /* next sentence....already exists*/
          else
            CL0NW04.CL0NWIVS[CLXLINEX] = "A";
          end
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0N182

// select unique from kucrec
Function KL0N900()
   /* **************************************/
   /* select unique on kucrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N900"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
        TA1REC.TA1DBASE = "DCUST"; /* database name*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N900

// add clbrec
Function KL0N910()
   /* ************************/
   /* add to clbrec*/
   /* ************************/
  ;
  set SQLCA empty;
  call "IO1180" ("A ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N910"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLIVX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N910

// select unique from clbrec
Function KL0N915()
   /* **************************************/
   /* select unique on clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("S ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N915"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLIVX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N915

// update clbrec
Function KL0N917()
   /* ***********************/
   /* update on clbrec*/
   /* ***********************/
  ;
  set SQLCA empty;
  call "IO1180" ("U ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N917"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLIVX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N917

// delete from clbrec
Function KL0N930()
   /* **************************************/
   /* delete on clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("D ", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N930"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1180"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLIVX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N930

// select unique from clcrec
Function KL0N932()
   /* **************************************/
   /* select unique on clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N932"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLARX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N932

// update clcrec
Function KL0N933()
   /* **************************************/
   /* update on clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("U ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N933"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLARX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N933

// update unique from clarec
Function KL0N935()
   /* **************************************/
   /* update unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N935"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N935

// select unique from ivarec
Function KL0N940()
   /* **************************************/
   /* select unique on ivarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N940"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1040"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDR01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N940

// select set from iv0rec
Function KL0N945()
   /* ***************************/
   /* select set on iv0rec*/
   /* ***************************/
  ;
  set SQLCA empty;
  call "IO1110" ("SS", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N945"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1110"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDX01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N945

// select next from iv0rec
Function KL0N946()
   /* ***************************/
   /* select next on iv0rec*/
   /* ***************************/
  ;
  set SQLCA empty;
  call "IO1110" ("SN", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N946"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1110"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDX01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N946

// select set from iv0rec
Function KL0N947()
   /* ***************************/
   /* close scan*/
   /* ***************************/
  ;
  set SQLCA empty;
  call "IO1110" ("CS", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      ;
      TA1REC.TA1LOCAT[2] = "CL0N947"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO1110"; /* location*/
      TA1REC.TA1DBASE = "DINVC"; /* database name*/
      TA1REC.TA1TBLVU = "VIVHDX01"; /* table view name*/
      TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
      ;
      XPCL010(); /* error diagnosis routine*/
    end
  end
end // end KL0N947

// select unique from clarec
Function KL0N950()
   /* **************************************/
   /* select unique on clarec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N950"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1160"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLHDR01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N950

// delete from clcrec
Function KL0N955()
   /* **************************************/
   /* delete on clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("D ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N955"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLARX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N955

// select count from clbrec
Function KL0N960()
   /* **************************************/
   /* select count from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  set CL0NW06 empty;
  CL0NW06.CL0NWSQL = "T1";
  call "IO1180" (CL0NW06, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0NW06.CL0NWIND >= 0)
       /* next sentence*/
    else
      CL0NW06.CL0NWCNT = 0;
    end
  else
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N960"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N960

// select count from clirec
Function KL0N962()
   /* **************************************/
   /* select count from clirec*/
   /* **************************************/
  ;
  set SQLCA empty;
  set CL0NW07 empty;
  CL0NW07.CL0NWSQL = "SC";
  call "IO1300" (CL0NW07, SQLCA, CLIREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0NW07.CL0NWIND >= 0)
       /* next sentence*/
    else
      CL0NW07.CL0NWCNT = 0;
    end
  else
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N962"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLGLX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1300";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N962

// select count from clrrec
Function KL0N964()
   /* **************************************/
   /* select count from clrrec*/
   /* **************************************/
  ;
  set CL0NW06 empty;
  CL0NW06.CL0NWSQL = "SC";
  call "IO1370" (CL0NW06, SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CL0NW06.CL0NWIND >= 0)
       /* next sentence*/
    else
      CL0NW06.CL0NWCNT = 0;
    end
  else
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N964"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLADJ01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1370";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N964

// select scan on clkrec
Function KL0N965()
   /* **************************************/
   /* select scan on ckbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N965"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1280";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N965

// select next on clkrec
Function KL0N966()
   /* **************************************/
   /* select next on clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N966"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1280";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N966

// close set on clkrec
Function KL0N967()
   /* **************************************/
   /* close set on clkrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M967"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VRAITM01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1280";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N967

// select unique from iv0rec
Function KL0N970()
   /* **************************************/
   /* select unique on iv0rec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N970"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1110"; /* location*/
        TA1REC.TA1DBASE = "DINVC"; /* database name*/
        TA1REC.TA1TBLVU = "VIVHDX01"; /* table view name*/
        TA1REC.TA1TBLKE = KL0NM001.IV0IVCID[CLXLINEX]; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N970

// select set from clcrec
Function KL0N975()
   /* **************************************/
   /* select set from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N975"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N975

// select next from clcrec
Function KL0N976()
   /* **************************************/
   /* select next from clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("N1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N976"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N976

// cl0se clcrec s1 cursor
Function KL0N977()
   /* **************************************/
   /* close clcrec s1 cursor*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("C1", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0N977"; /* location*/
      TA1REC.TA1MAP = "CL0NM001";
      TA1REC.TA1DBASE = "DCLAIM  ";
      TA1REC.TA1TBLVU = "VCLARX01";
      CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
      TA1REC.TA1LOCAT[4] = "IO1170";
      ;
      XPCL010(); /* error diagnosis routine*/
      ;
      return;
    end
  end
end // end KL0N977

// select set from clcrec
Function KL0N980()
   /* ************************************************************/
   /* *                                                         **/
   /* * select set clcrec                                       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N980"; /* set current process name*/
  ;
  ;
  ;
  ;
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("S5", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of ar records for this claim*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N980"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N980

// select next from clcrec
Function KL0N981()
   /* ************************************************************/
   /* *                                                         **/
   /* * select next clcrec                                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N981"; /* set current process name*/
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("N5", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* get first rec of set*/
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N981"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
end // end KL0N981

// close clb cursor for s3 select
Function KL0N984()
   /* **************************************/
   /* close s3 cursor*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    TA1REC.TA1LOCAT[2] = "CL0N984"; /* location*/
    TA1REC.TA1MAP = "CL0NM001";
    TA1REC.TA1DBASE = "DCLAIM  ";
    TA1REC.TA1TBLVU = "VCLIVX01";
    CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
    TA1REC.TA1LOCAT[4] = "IO1180";
    ;
    XPCL010(); /* error diagnosis routine*/
    ;
    return;
  end
end // end KL0N984

// select set from clbrec
Function KL0N985()
   /* **************************************/
   /* select set from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N985"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N985

// select next from clbrec
Function KL0N986()
   /* **************************************/
   /* select next from clbrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N986"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLIVX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1180";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N986

// select set from clcrec
Function KL0N987()
   /* ************************************************************/
   /* *                                                         **/
   /* * select set clcrec                                       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N987"; /* set current process name*/
  ;
  ;
  ;
  ;
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("S4", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of ar records for this claim*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N980"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
  ;
  ;
end // end KL0N987

// select next from clcrec
Function KL0N988()
   /* ************************************************************/
   /* *                                                         **/
   /* * select next clcrec                                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N981"; /* set current process name*/
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("N4", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* get first rec of set*/
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N981"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
end // end KL0N988

// close set clcrec
Function KL0N989()
   /* ************************************************************/
   /* *                                                         **/
   /* * close set clcrec                                        **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0N989"; /* set current process name*/
  ;
  ;
  ;
  ;
  set SQLCA empty;
  call "IO1170" ("C4", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N989"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
  ;
  ;
end // end KL0N989

// add clcrec
Function KL0N990()
   /* ************************/
   /* add to clcrec*/
   /* ************************/
  ;
  set SQLCA empty;
  call "IO1170" ("A ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N990"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLARX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N990

// update clcrec
Function KL0N992()
   /* ***********************/
   /* update on clcrec*/
   /* ***********************/
  ;
  set SQLCA empty;
  call "IO1170" ("U ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        ;
        TA1REC.TA1LOCAT[2] = "CL0N992"; /* location*/
        TA1REC.TA1LOCAT[4] = "IO1170"; /* location*/
        TA1REC.TA1DBASE = "DCLAIM"; /* database name*/
        TA1REC.TA1TBLVU = "VCLARX01"; /* table view name*/
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
        ;
        XPCL010(); /* error diagnosis routine*/
      end
    end
  end
end // end KL0N992

// select unique count
Function KL0N995()
   /* **************************************/
   /* select unique count clcrec*/
   /* **************************************/
  ;
  set SQLCA empty;
  call "IO1170" ("S ", SQLCA, CLCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0N995"; /* location*/
        TA1REC.TA1MAP = "CL0NM001";
        TA1REC.TA1DBASE = "DCLAIM  ";
        TA1REC.TA1TBLVU = "VCLARX01";
        CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM;
        TA1REC.TA1LOCAT[4] = "IO1170";
        ;
        XPCL010(); /* error diagnosis routine*/
        ;
        return;
      end
    end
  end
end // end KL0N995

// page backward
Function KL0NS07()
   /* ************************************************************/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX]; /* set array index*/
  ;
  ;
  if (CLXREC.CLXMAXLN[CLXSCRNX] >= CLXREC.CLXARAYX)
    CLXREC.CLXARAYX = 1;
    converseLib.validationFailed(7);
  else
    CLXREC.CLXARAYX = CLXREC.CLXARAYX - CLXREC.CLXMAXLN[CLXSCRNX];
    if (CLXREC.CLXARAYX <= 0)
      converseLib.validationFailed(7); /* top of data*/
      CLXREC.CLXARAYX = 1;
    end
  end
  ;
  ;
  CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXARAYX;
  ;
  ;
  CLXREC.CLXBLDSC = "Y"; /* need to rebuild screen to show new data*/
  ;
end // end KL0NS07

// page forward
Function KL0NS08()
   /* ************************************************************/
   /* *   this process handles the entry of pf key 8            **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  CLXREC.CLXARAYX = CLXREC.CLXARY1X[CLXSCRNX];
  ;
  ;
  CLXREC.CLXARAYX = CLXREC.CLXARAYX + CLXREC.CLXMAXLN[CLXSCRNX];
  ;
  ;
   /* IF CLXREC.CLXARAYX GT CL0NW02.CL0NW02M;*/
  if (CL0NW04.CL0NWNEF[11] == "Y" /* if a new entry*/
   && CL0NW04.CL0NWLNM[11] == "N") /* and line wasn't changed*/
    converseLib.validationFailed(3); /* at end of data*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  ;
  CLXREC.CLXBLDSC = "Y"; /* need to rebuild screen to show new data*/
  CLXREC.CLXARY1X[CLXSCRNX] = CLXREC.CLXARAYX;
  ;
  ;
end // end KL0NS08

// Check for NBQ GL codes on IVC
Function KL0NS21()
   /* ************************************************************/
   /* *  Determine if invoice was paid for, whole or in part,   **/
   /* *  by NIKE BANK DOLLARS. (i.e. check for NBQ GL codes.)   **/
   /* *                                                         **/
   /* * 12-31-90 CHELLM  Group created.                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS21"; /* set current process name*/
  ;
  ;
  set IV6REC empty;
  ;
  IV6REC.IV0PARTN = IV0REC.IV0PARTN;
  IV6REC.IV0IVCID = IV0REC.IV0IVCID;
  IV6REC.OP2LNINB = -1; /* get all gl records*/
  ;
  CL0NW01.CL0NWCNT = 0; /* initialize record counter*/
  CL0NW01.CL0NWDON = "N"; /* init done-flag*/
  ;
  set SQLCA empty;
  call "IO1080" ("SS", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes};
              /* ; select the set of all invoice GL records*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "SELCT IV6 SET (CL0NS21)";
    XPCL010();
  end
  ;
  ;
  set SQLCA empty;
  call "IO1080" ("SN", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* first record of the set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if we found a first record*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no first record found*/
      CL0NW01.CL0NWDON = "N";
    else
      TA1REC.TA1TBLKE = "FETCH 1ST IV6 REC CL0NS21";
      XPCL010();
    end
  end
  ;
  ;
  while (CL0NW01.CL0NWDON == "N") /* while not done*/
    ;
     /* check the Profitability GL table to see if NBQ GL's exist.*/
    ;
    set SQLCA empty;
    set PFJREC empty;
    ;
    PFJREC.GLACD = IV6REC.GLACD;
    ;
    call "IO4360" ("S ", SQLCA, PFJREC) {isNoRefresh = yes, isExternal = yes}; /* select PFJREC*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if good return check for NBQ GL*/
      if (PFJREC.PFJXREF == "NBQ")
        CL0NW01.CL0NWCNT = CL0NW01.CL0NWCNT + 1;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
      else
        TA1REC.TA1TBLKE = "FETCHING PFJREC  (CL0NS21)";
        XPCL010();
      end
    end
    ;
    set SQLCA empty;
    call "IO1080" ("SN", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* get the next IV6 rec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good return,*/
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0NW01.CL0NWDON = "Y"; /* we're done*/
      else
        TA1REC.TA1TBLKE = "FETCH NEXT IV6 REC/CL0NS21";
        XPCL010();
      end
    end
  end
  ;
  set SQLCA empty;
  call "IO1080" ("CS", SQLCA, IV6REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the select-set return code is ok*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "CLOSE IV6 SET (CL0NS21)";
    XPCL010();
  end
  ;
  ;
  if (CL0NW01.CL0NWCNT > 1) /* If NBQ GL's exist on the invoice*/
    converseLib.validationFailed(682); /* give warning message*/
    set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y";
    CL0NW04.CL0NWNBF[CLXLINEX] = "Y";
  end /* invoice paid with Nike Bank $$*/
  ;
end // end KL0NS21

// fill screen with data
Function KL0NS25()
   /* ************************************************************/
   /* *                                                         **/
   /* *   take data from the database array and place           **/
   /* *   onto the screen on line at a time.                    **/
   /* *   cl0nwupd is used if a user previously entered an      **/
   /* *   update selection that was invalid or unauthorized.*/
   /* *   it holds the update selection for displaying when     **/
   /* *   the map is reconversed.*/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS25"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXARAYX <= CLXREC.CLXLSTAX
   /* if index LE last bucket in array*/
   && CLXREC.CLXLINEX <= CLXREC.CLXMAXLN[CLXSCRNX])
    CL0NW04.CL0NWNEF[CLXLINEX] = "N"; /* not a new entry*/
    CL0NW04.CL0NWAYX[CLXLINEX] = CLXREC.CLXARAYX;
    KL0NM001.CL0NMSEL[CLXLINEX] = CL0NW02.CL0NMSEL[CLXARAYX];
    KL0NM001.ARCCCREF[CLXLINEX] = CL0NW02.ARCCCREF[CLXARAYX];
    CL0NW04.CL0NMSEL[CLXLINEX] = CL0NW02.CL0NMSEL[CLXARAYX];
    CL0NW04.ARCCCREF[CLXLINEX] = CL0NW02.ARCCCREF[CLXARAYX];
    CL0NW04.ARCREFNB[CLXLINEX] = CL0NW02.ARCREFNB[CLXARAYX];
    CL0NW04.CL0NWCLB[CLXLINEX] = CL0NW02.CL0NWCLB[CLXARAYX];
    CL0NW04.CL0NWNOC[CLXLINEX] = CL0NW02.CL0NWNOC[CLXARAYX];
    if (CL0NW02.CL0NWCLB[CLXARAYX] == "Y")
      IV0REC.IV0IVCDT = CL0NW02.IV0IVCDT[CLXARAYX];
      KL0NS31(); /* convert date*/
      KL0NM001.CL0NMIVD[CLXLINEX] = TA2REC.TA2GRGB;
      KL0NM001.CLBPMIVC[CLXLINEX] = CL0NW02.CLBPMIVC[CLXARAYX];
      KL0NM001.IV0IVCID[CLXLINEX] = CL0NW02.IV0IVCID[CLXARAYX];
      if (CL0NW02.IV0IVCID[CLXARAYX] != 0)
        KL0NS95(); /* get prev-claims-on-invoice data*/
      end
      KL0NM001.OP1CUOID[CLXLINEX] = CL0NW02.OP1CUOID[CLXARAYX];
      KL0NM001.OP1NORID[CLXLINEX] = CL0NW02.OP1NORID[CLXARAYX];
      KL0NM001.YITCD[CLXLINEX] = CL0NW02.YITCD[CLXARAYX];
      CL0NW04.CLBPMIVC[CLXLINEX] = CL0NW02.CLBPMIVC[CLXARAYX];
      CL0NW04.IV0IVCID[CLXLINEX] = CL0NW02.IV0IVCID[CLXARAYX];
      CL0NW04.IV0IVCDT[CLXLINEX] = CL0NW02.IV0IVCDT[CLXARAYX];
      CL0NW04.CL0NMIVD[CLXLINEX] = TA2REC.TA2GRGB;
      CL0NW04.OP1CUOID[CLXLINEX] = CL0NW02.OP1CUOID[CLXARAYX];
      CL0NW04.OP1NORID[CLXLINEX] = CL0NW02.OP1NORID[CLXARAYX];
      CL0NW04.YITCD[CLXLINEX] = CL0NW02.YITCD[CLXARAYX];
      CL0NW04.CLBGLIND[CLXLINEX] = CL0NW02.CLBGLIND[CLXARAYX];
      CL0NW04.CLBSRIND[CLXLINEX] = CL0NW02.CLBSRIND[CLXARAYX];
      CL0NW04.CL0NWRAI[CLXLINEX] = CL0NW02.CL0NWRAI[CLXARAYX];
       /* IF CL0NW02.IV0IVCID(CLXARAYX) = CL0NW03.IV0IVCID(CL0NW03X);*/
       /* CL0NW03.CL0NWNOI(CL0NW03X) = CL0NW03.CL0NWNOI(CL0NW03X) + 1*/
         /* ELSE ;*/
           /* IF CL0NW02.IV0IVCID(CLXARAYX) IN CL0NW03.IV0IVCID;*/
             /* MOVE EZETST TO CL0NW03.CL0NW03X;*/
             /* MOVE 1 TO CL0NW03.CL0NWNOI(CL0NW03X);*/
           /* END ;*/
         /* END ;*/
    end
  else
    CL0NW04.CL0NWNEF[CLXLINEX] = "Y"; /* yes, it is a new entry*/
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0NS25

// protect each screen line
Function KL0NS26()
   /* ************************************************************/
   /* *   KL0NS26                                               **/
   /* *   protect each screen line                              **/
   /* **                                                        **/
   /* ************************************************************/
   /* *  M A I N T E N A N C E    H I S T O R Y     L O G       **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-24-98  GDECKE  ALLOW CUST CLM NBR UPDT AFTER STAT=CMP**/
   /* ************************************************************/
  ;
  if ((CLAREC.YCTCD == "ADJ"
   || CLAREC.YCTCD == "RTS"
   || CLAREC.YCTCD == "DEF")
   && CLAREC.YCSCD == "CMP"
   && CLWREC.CLWACTIV == "I")
    set KL0NM001.CLBPMIVC[CLXLINEX] skip;
    set KL0NM001.IV0IVCID[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.CL0NMIVD[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.OP1NORID[CLXLINEX] skip;
    set KL0NM001.YITCD[CLXLINEX] skip;
  else
    if (CLWREC.CLWACTIV == "I" /* if inquiry only*/
     || CL0NW01.CL0NWGPF == "Y") /* or protect due to g/l's or prods*/
      set KL0NM001.CATOAP cursor;
      set KL0NM001.CL0NMSEL[CLXLINEX] skip;
      set KL0NM001.ARCCCREF[CLXLINEX] skip;
      set KL0NM001.CLBPMIVC[CLXLINEX] skip;
      set KL0NM001.IV0IVCID[CLXLINEX] skip;
      set KL0NM001.OP1CUOID[CLXLINEX] skip;
      set KL0NM001.CL0NMIVD[CLXLINEX] skip;
      set KL0NM001.OP1CUOID[CLXLINEX] skip;
      set KL0NM001.OP1NORID[CLXLINEX] skip;
      set KL0NM001.YITCD[CLXLINEX] skip;
    end
  end
  ;
  ;
  if (CLAREC.YCTCD == "NBC") /* ivc info not allowed for nbc claims*/
    set KL0NM001.CL0NML1 skip, invisible;
    set KL0NM001.CL0NML2 skip, invisible;
    set KL0NM001.CLBPMIVC[CLXLINEX] skip, invisible;
    set KL0NM001.IV0IVCID[CLXLINEX] skip, invisible;
    set KL0NM001.OP1CUOID[CLXLINEX] skip, invisible;
    set KL0NM001.CL0NMIVD[CLXLINEX] skip, invisible;
    set KL0NM001.OP1CUOID[CLXLINEX] skip, invisible;
    set KL0NM001.OP1NORID[CLXLINEX] skip, invisible;
    set KL0NM001.YITCD[CLXLINEX] skip, invisible;
  end
  ;
  if (CLAREC.YCTCD == "ADJ"
   && CLAREC.YCSCD == "CMP"
   && CLWREC.CLWACTIV == "I")
     /* NEXT SENTENCE*/
  else
    if (CLWREC.CLWACTIV == "I") /* if inquiry only*/
      return;
    end
  end
  ;
  if (CL0NW01.YITCD == "I")
    set KL0NM001.CL0NMIVD[CLXLINEX] skip;
  end
  ;
  ;
  if (CL0NW01.YITCD != " ")
    set KL0NM001.YITCD[CLXLINEX] skip;
  end
  ;
  ;
  if (CLXREC.CLXARAYX > CLXREC.CLXLSTAX
   /* if index gt last bucket in array*/
   || CLXREC.CLXLINEX > CLXREC.CLXMAXLN[CLXSCRNX])
    return;
  end
  ;
  ;
  if (CL0NW02.CL0NWHAR[CLXARAYX] == "Y"
   || CL0NW02.CL0NWNOC[CLXARAYX] > 1)
     /* OR CL0NM001.CLBPMIVC(CLXLINEX) = 'Y';*/
    set KL0NM001.ARCCCREF[CLXLINEX] skip;
    set KL0NM001.CLBPMIVC[CLXLINEX] skip;
    set KL0NM001.IV0IVCID[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.CL0NMIVD[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.OP1NORID[CLXLINEX] skip;
    set KL0NM001.YITCD[CLXLINEX] skip;
    return;
  end
  ;
  ;
  if (CL0NW02.CL0NWCLB[CLXARAYX] == "N" /* not assoc with clb record*/
   && CL0NW02.IV0IVCID[CLXARAYX] != 0)  /* but has invoice number*/
    set KL0NM001.CL0NMSEL[CLXLINEX] skip;
    set KL0NM001.ARCCCREF[CLXLINEX] skip;
    set KL0NM001.CLBPMIVC[CLXLINEX] skip;
    set KL0NM001.IV0IVCID[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.CL0NMIVD[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.OP1NORID[CLXLINEX] skip;
    set KL0NM001.YITCD[CLXLINEX] skip;
    return;
  end
  ;
  ;
  if (CL0NW02.IV0IVCID[CLXARAYX] != 0)
     /* AND CL0NW02.YITCD = 'I';*/
    set KL0NM001.IV0IVCID[CLXLINEX] skip;
    set KL0NM001.CL0NMIVD[CLXLINEX] skip;
    set KL0NM001.OP1CUOID[CLXLINEX] skip;
    set KL0NM001.OP1NORID[CLXLINEX] skip;
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0NS26

// read dclaim.vclarx01 into aray
Function KL0NS30()
   /* ************************************************************/
   /* *        get the next group of 200 records and load       **/
   /* *            into working storage array                   **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS30"; /* set current process name*/
  ;
  KL0NS32(); /* clear out temporary storage*/
  ;
  KL0N003(); /* select set of invoice records*/
                                      /* for this claim*/
  KL0N986(); /* get first clivx record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* move in key to clbrec*/
    CL0NW01.CL0NWNNP = "N"; /* don't need to create primary ivc*/
    CL0NW01.CL0NWPIN = CLBREC.IV0IVCID;
    CL0NW01.YITCD = CLBREC.YITCD; /* all entered invoices*/
    CL0NW03.CL0NW03X = 1;
    CL0NW03.IV0IVCID[CL0NW03X] = CLBREC.IV0IVCID;
    CL0NW03.CLBPMIVC[CL0NW03X] = CLBREC.CLBPMIVC;
    CL0NW03.CL0NWNOI[CL0NW03X] = 1;
            /* must have either ' ' or same clbivind/yitcd*/
    CLXREC.CLXARAYX = 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set CLBREC empty;
      CLBREC.IV0IVCID = 999999999;
      CLXREC.CLXARAYX = 0;
      CL0NW01.CL0NWNNP = "Y"; /* need to create primary ivc*/
    else
      /* next sentence...fatal errors are handled in cl0n986*/
    end
  end
  ;
  CL0NW01.CL0NWNAP = "Y"; /* init need-a/r-primary-switch*/
  ;
  ;
  KL0N004(); /* select set of clarx records*/
   /* for the primary invoice record*/
  KL0N008(); /* get first record*/
  ;
  KL0N005(); /* write all clarx for the primary*/
   /* invoice to the ws array*/
  ;
  ;
  ;
  ;
  KL0N012(); /* select all remaining clarx records for this claim*/
                  /* not associated with the primary invoice*/
  ;
  KL0N011(); /* fetch first clarx record*/
  ;
  KL0N007(); /* fetch next clivx record*/
  ;
  ;
  CL0NW01.IV0IVCID = CLBREC.IV0IVCID;
  CL0NW01.ARCCCREF = CLCREC.ARCCCREF;
  CL0NW01.CL0NW09C = 0; /* initialize the w09 record counter*/
  CL0NW01.CL0NWDON = "N"; /* init done-switch*/
  ;
  if (CLBREC.IV0IVCID == 999999999
   && CLCREC.IV0IVCID == 999999999)
     /* next sentence*/
  else
    CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
  end
  ;
  while (CLXREC.CLXARAYX <= 198
   && CL0NW01.CL0NWDON != "Y")
    if (CLBREC.IV0IVCID == 999999999
     && CLCREC.IV0IVCID == 999999999)
      CL0NW01.CL0NWDON = "Y"; /* then we're done*/
    else
      if (CLBREC.IV0IVCID == CLCREC.IV0IVCID)
        KL0NS72(); /* build cl0nw02 with clivx and clarx*/
        KL0N011(); /* fetch next clarx record*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (CLCREC.IV0IVCID == CLBREC.IV0IVCID) /* may be multiple*/
             /* next sentence.....clcrecs for each clbrec*/
          else
            KL0N007(); /* get next clivx record*/
          end
          if (CLCREC.ARCCCREF == CL0NW01.ARCCCREF
           && CLBREC.IV0IVCID == CL0NW01.IV0IVCID)
             /* next sentence*/
          else
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
            CL0NW02.CL0NWNOC[CLXARAYX] = 0;
            CL0NW01.ARCCCREF = CLCREC.ARCCCREF;
            CL0NW01.IV0IVCID = CLBREC.IV0IVCID;
          end
        else
          KL0N007(); /* get next clivx record*/
          if (CLBREC.IV0IVCID != 999999999
           || CLBREC.IV0IVCID != 999999999)
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        end
      else
        if (CLBREC.IV0IVCID < CLCREC.IV0IVCID)
          KL0NS71(); /* build cl0nw02 with only clivx rec*/
          KL0N007(); /* get next clivx record*/
          if (CLBREC.IV0IVCID != 999999999)
            CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
          end
        else
          CL0NW01.CL0NW09C = CL0NW01.CL0NW09C + 1; /* incrmt counter*/
          CL0NW09.CLCGROUP = CLCREC.CLCGROUP;
          KL0NS33(); /* add record to temp storage*/
          KL0N011(); /* fetch next clarx record*/
        end
      end
    end
  end
  ;
  ;
  ;
  ;
  if (CL0NW01.CL0NW09C > 0) /* if there are records to be merged*/
    CL0NW01.CL0NW09X = 0; /* init w09 index*/
    CL0NW01.ARCCCREF = " ";
    while (CL0NW01.CL0NW09X < CL0NW01.CL0NW09C
     && CLXREC.CLXARAYX <= 198)
      CL0NW01.CL0NW09X = CL0NW01.CL0NW09X + 1;
      KL0NS34(); /* get clcrec from temp storage*/
      CLCREC.CLCGROUP = CL0NW09.CLCGROUP;
      if (CLCREC.ARCCCREF == CL0NW01.ARCCCREF)
         /* next sentence*/
      else
        CLXREC.CLXARAYX = CLXREC.CLXARAYX + 1;
        CL0NW02.CL0NWNOC[CLXARAYX] = 0;
        CL0NW01.ARCCCREF = CLCREC.ARCCCREF;
      end
      KL0NS73(); /* build cl0nw02 from clarx rec*/
      if (CLCREC.CLCPMAR == "Y") /* if there is already a primary rec*/
        CL0NW01.CL0NWNAP = "N"; /* don't need to assign one*/
      end
    end
  end
  ;
  ;
  if (CL0NW01.CL0NWNAP == "N") /* if we already have encountered a primary*/
    /* next sentence....we don't need to check*/
  else
    CLCREC.CLACLMNB = CLAREC.CLACLMNB;
    CLCREC.CLCPMAR = "Y";
    KL0N995(); /* find if a primary exists that we haven't seen*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if primary exists*/
      CL0NW01.CL0NWNAP = "N";
    end
  end
  ;
  ;
  CLXREC.CLXLSTAX = CLXREC.CLXARAYX;
  CL0NW02.CL0NW02M = CLXREC.CLXARAYX; /* max used*/
  ;
  KL0N984(); /* close set clbrec*/
  KL0N989(); /* close set clcrec*/
  ;
end // end KL0NS30

// format date cymd to m-d-y
Function KL0NS31()
  ;
  CLXREC.CLXCPROC = "CL0NS31"; /* set current process name*/
  ;
  ;
     /* reformat the date from 0ccyymmdd to mm-dd-yy*/
  ;
  set TA2REC empty;
  CL0NW01.CL0NWDT1 = IV0REC.IV0IVCDT; /* strip off leading zero*/
  TA2REC.TA2GRGGN = CL0NW01.CL0NWDT3; /* format is ccyymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
     /* next sentence*/
  else
    CL0NW01.CL0NMIVD = " ";
  end
  ;
  ;
end // end KL0NS31

// purge application temp storage
Function KL0NS32()
   /* GET CL0NT32*/
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
   /* ****************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta5rec, ta1rec empty.*/
   /* ****************************************************************/
  ;
  set TA1REC empty;
  set TA5REC empty;
  TA5REC.TA5APPID = "KL0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  call "TA0050" (CL0NW09, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "CL0NS32"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "CL0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  ;
  ;
end // end KL0NS32

// add clc rec to temp storage
Function KL0NS33()
   /* GET CL0NT33*/
   /* ------------------------------------------------------------*/
   /* Add the record to temporary storage.*/
   /* *************************************************************/
   /* MAINTNENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec, ta5rec empty.*/
   /* *************************************************************/
  ;
  set TA1REC empty;
  set TA5REC empty;
  CL0NW09.CL0NW09L = 70; /* Temporary storage length*/
  TA5REC.TA5APPID = "KL0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  call "TA0050" (CL0NW09, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "CL0NS33"; /* Process name*/
    TA1REC.TA1LOC = "ADD REC TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "CL0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  set CL0NW09 empty; /* Clear temporary storage record*/
  ;
  ;
end // end KL0NS33

// read clc read from temp strage
Function KL0NS34()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
   /* **************************************************************/
   /* MAINTENANCE HISTORY*/
   /* 01-13-92  sgorga  Set ta1rec, ta5rec empty.*/
   /* **************************************************************/
  ;
  set TA1REC empty;
  set TA5REC empty;
  CL0NW09.CL0NW09L = 70; /* Temporary storage length*/
  TA5REC.TA5APPID = "KL0N"; /* Application identification*/
  TA5REC.TA5TSQIX = CL0NW01.CL0NW09X; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  call "TA0050" (CL0NW09, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "CL0NS34"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "CL0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    ;
  end
  ;
  ;
end // end KL0NS34

// get index for ycttbl & ycrtbl
Function KL0NS38()
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD)
    CLXREC.CLXYCTX = sysVar.arrayIndex;
  else
    CLXREC.CLXYCTX = 1;
  end
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD)
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  else
    CLXREC.CLXYCRX = 1;
  end
  ;
  ;
  ;
  ;
end // end KL0NS38

// set modified fields modified
Function KL0NS60()
      /* *********************************************************/
      /* * this statement group sets modified fields modified   **/
      /* *********************************************************/
  ;
  if (KL0NM001.CL0NMSEL[CLXLINEX] is modified)
    set KL0NM001.CL0NMSEL[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.ARCCCREF[CLXLINEX] is modified)
    set KL0NM001.ARCCCREF[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.CLBPMIVC[CLXLINEX] is modified)
    set KL0NM001.CLBPMIVC[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] is modified)
    set KL0NM001.IV0IVCID[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.CL0NMIVD[CLXLINEX] is modified)
    set KL0NM001.CL0NMIVD[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.OP1CUOID[CLXLINEX] is modified)
    set KL0NM001.OP1CUOID[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.OP1NORID[CLXLINEX] is modified)
    set KL0NM001.OP1NORID[CLXLINEX] modified;
  end
  ;
  if (KL0NM001.YITCD[CLXLINEX] is modified)
    set KL0NM001.YITCD[CLXLINEX] modified;
  end
  ;
end // end KL0NS60

// write clb rec to w02, read clb
Function KL0NS71()
   /* ************************************************************/
   /* *      build a cl0nw02 from clb record                    **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS71"; /* set up current process name*/
  ;
  ;
  CL0NW02.CL0NMSEL[CLXARAYX] = " ";
  CL0NW02.ARCCCREF[CLXARAYX] = " ";
  CL0NW02.CL0NWCLB[CLXARAYX] = "Y";
  CL0NW02.CLBPMIVC[CLXARAYX] = CLBREC.CLBPMIVC;
  CL0NW02.IV0IVCID[CLXARAYX] = CLBREC.IV0IVCID;
  CL0NW02.OP1CUOID[CLXARAYX] = CLBREC.OP1CUOID;
  CL0NW02.OP1NORID[CLXARAYX] = CLBREC.OP1NORID;
  CL0NW02.YITCD[CLXARAYX] = CLBREC.YITCD;
  CL0NW02.CL0NWBCT[CLXARAYX] = CLBREC.ZZZCHGCT;
  CL0NW02.CLBSRIND[CLXARAYX] = CLBREC.CLBSRIND;
  CL0NW02.CLBGLIND[CLXARAYX] = CLBREC.CLBGLIND;
  CL0NW02.CL0NWNOC[CLXARAYX] = 0;
  CL0NW02.IV0IVCDT[CLXARAYX] = CLBREC.IV0IVCDT;
  CL0NW02.CL0NWCLB[CLXARAYX] = "Y";
  ;
  ;
  KL0NS74(); /* are there any prd auth for return*/
                                   /* 2/89*/
  ;
  ;
end // end KL0NS71

// build cl0nw02 from clb & clc
Function KL0NS72()
   /* *************************************************************/
   /* *  write clarx record to cl0nw02 table*/
   /* **/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS72"; /* set current process name*/
  ;
  CL0NW02.CL0NWCLB[CLXARAYX] = "Y";
  CL0NW02.CL0NWNOC[CLXARAYX] = CL0NW02.CL0NWNOC[CLXARAYX] + 1;
  CL0NW02.ARCCCREF[CLXARAYX] = CLCREC.ARCCCREF;
  CL0NW02.CLBPMIVC[CLXARAYX] = CLBREC.CLBPMIVC;
  CL0NW02.IV0IVCID[CLXARAYX] = CLCREC.IV0IVCID;
  CL0NW02.IV0IVCDT[CLXARAYX] = CLBREC.IV0IVCDT;
  CL0NW02.OP1CUOID[CLXARAYX] = CLBREC.OP1CUOID;
  CL0NW02.OP1NORID[CLXARAYX] = CLBREC.OP1NORID;
  CL0NW02.YITCD[CLXARAYX] = CLBREC.YITCD;
  CL0NW02.CL0NWCCT[CLXARAYX] = CLCREC.ZZZCHGCT;
  CL0NW02.ARCCHKNB[CLXARAYX] = CLCREC.ARCCHKNB;
  CL0NW02.ARCREFNB[CLXARAYX] = CLCREC.ARCREFNB;
  CL0NW02.CLBSRIND[CLXARAYX] = CLBREC.CLBSRIND;
  CL0NW02.CLBSRIND[CLXARAYX] = CLBREC.CLBGLIND;
  if (CLCREC.ARCREFNB != " ")
    CL0NW02.CL0NWHAR[CLXARAYX] = "Y";
  end
  if (CLCREC.CLCPMAR == "Y") /* if a primary record exists*/
    CL0NW01.CL0NWNAP = "N"; /* dont need to assign one*/
  end
  ;
  KL0NS74(); /* are there any prds author for return 2/89*/
  ;
  ;
end // end KL0NS72

// build cl0nw02 from clcrec
Function KL0NS73()
   /* ************************************************************/
   /* *   build cl0nw02 from only the clarx record              **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS73"; /* set current process name*/
  ;
  ;
  ;
  ;
  CL0NW02.CL0NWCLB[CLXARAYX] = "N";
  CL0NW02.CL0NWNOC[CLXARAYX] = CL0NW02.CL0NWNOC[CLXARAYX] + 1;
  CL0NW02.CL0NMSEL[CLXARAYX] = " ";
  CL0NW02.ARCCCREF[CLXARAYX] = CLCREC.ARCCCREF;
  CL0NW02.CLBPMIVC[CLXARAYX] = " ";
  CL0NW02.IV0IVCID[CLXARAYX] = CLCREC.IV0IVCID;
  CL0NW02.OP1CUOID[CLXARAYX] = 0;
  CL0NW02.OP1NORID[CLXARAYX] = 0;
  CL0NW02.YITCD[CLXARAYX] = " ";
  CL0NW02.CL0NWCCT[CLXARAYX] = CLCREC.ZZZCHGCT;
  CL0NW02.ARCCHKNB[CLXARAYX] = CLCREC.ARCCHKNB;
  CL0NW02.ARCREFNB[CLXARAYX] = CLCREC.ARCREFNB;
  if (CLCREC.ARCREFNB != " ")
    CL0NW02.CL0NWHAR[CLXARAYX] = "Y";
  end
  if (CLCREC.CLCPMAR == "Y") /* if a primary record exists*/
    CL0NW01.CL0NWNAP = "N"; /* dont need to assign one*/
  end
  ;
  ;
  ;
end // end KL0NS73

// look for auth prds against ivc
Function KL0NS74()
   /* ************************************************************/
   /* *      look for any authorized products against           **/
   /* *    an invoice associated with this claim                **/
   /* *                                                         **/
   /* * 10-04-90 CHELLM Added xumcd and xqacd to wild card values*/
   /* *                 when scanning RAITMs                    **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS74"; /* set up current process name*/
  ;
  ;
  CLKREC.CLACLMNB = CLBREC.CLACLMNB;
  CLKREC.IV0IVCID = CLBREC.IV0IVCID;
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**"; /* 10-04-90*/
  CLKREC.XQACD = "**"; /* 12-12-90*/
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
   /* 082389 add subscript*/
  CL0NW02.CL0NWRAI[CLXARAYX] = "N"; /* init return auth indicator*/
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vraitm01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    XPCL010();
  end
  ;
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vraitm01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* 082389 add subscript*/
    CL0NW02.CL0NWRAI[CLXARAYX] = "Y"; /* return author indicator*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "NEXT";
      XPCL010();
    end
  end
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* dclaim.vraitm01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "CL0SE";
    XPCL010();
  end
  ;
  ;
end // end KL0NS74

// build/write claim bill-to addr
Function KL0NS91()
   /* ************************************************************/
   /* *   build and write the claims bill-to address record     **/
   /* *  MAINTENANCE HISTORY                                    **/
   /* *                                                         **/
   /* * 01-04-91  SGORGA  Removed call to kuarec.  Replaced the **/
   /* *             kuarec field kuarec.kuaadrid with           **/
   /* *             kuacrec.kucblaid to call kulrec.            **/
   /* * 11-12-93  GDECKE  CHANGE KULREC.XXXADDRn to XXX-ADDRn.  **/
   /* * 03-11-94  BCOURT  CHANGE CLFREC.XXXADDRn to XXX-ADDRn.  **/
   /* NOTE do not rename map xxxaddrn since it's 30 chars.**/
   /* FYI xxx-addrn (with the '-') is defined at 38 chars.**/
   /* Order, Invoice, Claims all use just the 30 chars.   **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS91"; /* default the coop analyst code*/
  ;
  ;
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/
  ;
  ;
  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "READING CLF RECORD";
    XPCL010();
  end
  ;
  ;
  ;
  if (CL0NW01.CL0NWFNC == "ADD") /* if requesting to add*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and record not found*/
       /* next sentence*/
    else
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "DELETING RECORD FOR ADD";
        XPCL010();
      end
    end
  end
  ;
  ;
    /* 01-04-91 sgorga  removed a call to kuarec.*/
   /* Replaced kuarec.kuaadrid with kucrec.kucblaid.*/
  ;
  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID;
  ;
  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get bill group address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING BILL-GRP ADDR RECORD";
    XPCL010();
  end
  ;
  ;
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "B"; /* bill-to address*/
  CLFREC.CLFADNM = KUCREC.KUCCONM;
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* to db2 name*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;
  ;
  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  ;
  ;
  ;
  if (CL0NW01.CL0NWFNC == "ADD") /* if adding new record*/
    set SQLCA empty;
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
end // end KL0NS91

// build/write shipto addr record
Function KL0NS92()
   /* ************************************************************/
   /* *   build and write the claims ship-to address record     **/
   /* *                                                         **/
   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 11-12-93  GDECKE  CHANGE KULREC.XXXADDRn TO XXX-ADDRn.  **/
   /* * 03-11-94  BCOURT  CHANGE CLFREC.XXXADDRn TO XXX-ADDRn.  **/
   /* *    see message in KL0NS91.   <==                        **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0NS92"; /* default the coop analyst code*/
  ;
  ;
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* ship-to address*/
  ;
  ;
  set SQLCA empty;
  call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* read record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = "READING CLF RECORD";
    XPCL010();
  end
  ;
  ;
  ;
  if (CL0NW01.CL0NWFNC == "ADD") /* if requesting to add*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and record not found*/
       /* next sentence*/
    else
      set SQLCA empty;
      call "IO1250" ("D ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* delete this record*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = "DELETING RECORD FOR ADD";
        XPCL010();
      end
    end
  end
  ;
  ;
  ;
  ;
  set KUMREC empty;
  ;
  KUMREC.KUCCOID = CLAREC.KUCCOID;
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;
  ;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4); /* database is busy*/
      CLXREC.CLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "CL0NS92"; /* location*/
      TA1REC.TA1LOCAT[4] = "IO0240"; /* location*/
      TA1REC.TA1DBASE = "DCUST"; /* database name*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* table view name*/
      CL0NW01.CL0NWNUM = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CL0NW01.CL0NWNUM; /* table key*/
      ;
      XPCL010(); /* error diagnosis routine*/
    end
  end
  ;
  ;
  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUMREC.KUMSHAID;
  ;
  set SQLCA empty;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get ship-to address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if the record was found*/
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = "GETTING SHIP-TO ADDR";
    XPCL010();
  end
  ;
  ;
  ;
  ;
  CLFREC.CLACLMNB = CLAREC.CLACLMNB;
  CLFREC.CLFADTYP = "S"; /* bill-to address*/
  CLFREC.CLFADNM = KUMREC.KUMSTRNM;
  CLFREC.XXX-ADDR1 = KULREC.XXX-ADDR1; /* 3-11-94 rename*/
  CLFREC.XXX-ADDR2 = KULREC.XXX-ADDR2; /* to db2 name*/
  CLFREC.XXX-ADDR3 = KULREC.XXX-ADDR3;
  CLFREC.XXXCITY = KULREC.XXXCITY;
  CLFREC.XSTCD = KULREC.XSTCD;
  CLFREC.XXXZIP = KULREC.XXXZIP;
  CLFREC.XCTCD = KULREC.XCTCD;
  ;
  CLFREC.ZZZCHGDT = CLXREC.XXXCDTE;
  CLFREC.ZZZCHGTM = CLXREC.XXXCHHMM;
  ;
  ;
  if (CL0NW01.CL0NWFNC == "ADD") /* if adding new record*/
    set SQLCA empty;
    call "IO1250" ("A ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* add record to table*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if add/update went ok*/
      return;
    else
      TA1REC.TA1TBLKE = "ADDING CLF RECORD TO TABLE";
      XPCL010();
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end KL0NS92

// xdv,xob,xso,xgp,xot on XVOTBL?
Function KL0NS93()
   /* *************************************************************/
   /* * edit for xdv,xob,xso,xgp on xvotbl                       **/
   /* *************************************************************/
   /* CL0NS93*/
  ;
  CL0NW04.CL0NWFVO = "N"; /* initialize found line on xvo flag*/
   /* TCS change begins -dated 03-11-98*/
  ;
  set VXVO0001 empty;
  VXVO0001.XOBCD = IV0REC.XOBCD; /* base order type code*/
  VXVO0001.XDVCD = IVAREC.XDVCD; /* division code*/
  VXVO0001.XBCCD = "01"; /* brand code*/
  VXVO0001.XGPCD = IV0REC.XGPCD; /* gpc code*/
  VXVO0001.XSOCD = IV0REC.XSOCD; /* sales office code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/
  ;
  call "VXVO0001" ("S3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor to scan*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
    call "VXVO0001" ("N3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* get first*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0NW04.CL0NWFVO = "Y"; /* found valid order type*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence,valid order type not found*/
      else
        TA1REC.TA1LOCAT[2] = "KL0NS93";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        XPCL010();
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "KL0NS93";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end
  ;
  call "VXVO0001" ("C3", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close ursor to scan*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
  else
    TA1REC.TA1LOCAT[2] = "KL0NS93";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    XPCL010();
  end
   /* TCS cahnge ends -dated 03/11/98*/
  if (CL0NW04.CL0NWFVO == "N") /* if nothing was found to load*/
    converseLib.validationFailed(582);
                                   /* invalid division code - not in table*/
    set KL0NM001.IV0IVCID[CLXLINEX] cursor, modified, bold;
    CL0NW04.CLXERRF[CLXLINEX] = "Y"; /* screen validation failed*/
    return;
  end
  ;
  ;
end // end KL0NS93

// set prev claim on ivc ind
Function KL0NS95()
   /* *************************************************************/
   /*  */
   /* Set the previous-claim-on-invoice indicator.*/
   /*  */
   /* Maintenance History:*/
   /*  */
   /* CL739 11-09-89 CHELLM added the index CLXLINEX to the*/
   /* CL0NWPCI field so the M-memo,R-returns,C-claims*/
   /* indicators will appear next to the actual invc*/
   /* they are associated with.*/
   /* 01-13-92  sgorga  Set cl0nw08 empty.*/
   /* *************************************************************/
  ;
  if (KL0NM001.IV0IVCID[CLXLINEX] == 0)
    return;
  end
  ;
  ;
  CLBREC.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CLBREC.CLACLMNB = KL0NM001.CLACLMNB;
  CLXREC.CLXORDIV = KL0NM001.IV0IVCID[CLXLINEX];
  CLBREC.IV0PARTN = CLXREC.CLXPARTN;
   /* MOVE CLXREC.YITCD TO CLBREC.YITCD;*/
  CLBREC.YITCD = CL0NW01.YITCD;
  ;
  set CL0NW08 empty;
  CL0NW08.CL0NWSQL = "SM"; /* select memos*/
  CL0NW08.CLACLMNB = KL0NM001.CLACLMNB;
  CL0NW08.IV0IVCID = KL0NM001.IV0IVCID[CLXLINEX];
  CL0NW08.IV0PARTN = CLXREC.CLXPARTN;
  CL0NW08.YITCD = CL0NW01.YITCD;
  ;
  set SQLCA empty;
  set CL0NW06 empty;
  CL0NW06.CL0NWSQL = "T2"; /* count nbr of other claims against invoice*/
  call "IO1180" (CL0NW06, SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes};
  if (CL0NW06.CL0NWIND >= 0)
    CLBREC.ZZZCHGCT = CL0NW06.CL0NWCNT;
  else
    CLBREC.ZZZCHGCT = 0;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   && CLBREC.ZZZCHGCT > 0)
                                   /* if there are other claims against ivc*/
    KL0NM001.CL0NWNOC[CLXLINEX] = CLBREC.ZZZCHGCT; /* nbr of claims*/
    set SQLCA empty;
    call "CL2320" (CL0NW08, SQLCA) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
       /* completed claims exist against invoice*/
      KL0NM001.CL0NWPCI[CLXLINEX] = "M"; /* memos against invoice*/
    else
       /* see if authorized returns exist against invoice*/
      set CL0NW08 empty; /* this is the only empty set by sgorga*/
      CL0NW08.CL0NWSQL = "SR"; /* select returned claim*/
      set SQLCA empty;
      call "CL2320" (CL0NW08, SQLCA) {isNoRefresh = yes, isExternal = yes};
      ;
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
        KL0NM001.CL0NWPCI[CLXLINEX] = "R"; /* returns against invoice*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KL0NM001.CL0NWPCI[CLXLINEX] = "C"; /* claims against invoice*/
        end
      end
    end
  else
    KL0NM001.CL0NWNOC[CLXLINEX] = 0;
    KL0NM001.CL0NWPCI[CLXLINEX] = " ";
  end
  ;
  ;
end // end KL0NS95

//*** RECORD=CL0NW01 ****
// 01-20-88 ehc add cl0nwotk and 4 other fields to help in
//              searching cl0nt01, dec order type translation
//              table.
// 01-04-91 sgorga  Renamed kuablid to kucblaid.
// 01-04-91 chellm  Added CL0NWCNT as a generic count field.
// ***********************
Record CL0NW01 type basicRecord
  5 CL0NW1GP CL0NW1GP ; 
    10 KUCBLAID KUCBLAID ; 
    10 CLASHPFF CLASHPFF ; 
    10 CLABLGFF CLABLGFF ; 
    10 KUMSHAID KUMSHAID ; 
    10 CL0NWFNC CL0NWFNC ; 
    10 CL0NWCAF CL0NWCAF ; 
    10 CL0NWNBR CL0NWNBR ; 
    10 CL0NWNAP CL0NWNAP ; 
    10 CL0NWYIT CL0NWYIT ; 
    10 CL0NWX1 CL0NWX1 ; 
    10 CL0NWGPF CL0NWGPF ; 
    10 CL0NWCPI CL0NWCPI ; 
    10 CL0NWPIN CL0NWPIN ; 
    10 CL0NWNNP CL0NWNNP ; 
    10 CL0NWDON CL0NWDON ; 
    10 CL0NWCNT CL0NWCNT ; 
    10 CL0NW09C CL0NW09C ; 
    10 CL0NW09X CL0NW09X ; 
    10 ARCCCREF ARCCCREF ; 
    10 IV0IVCID IV0IVCID ; 
    10 CL0NWCTN CL0NWCTN ; 
    10 KUCGRPID KUCGRPID ; 
    10 CL0NWAR1 CL0NWAR1 ; 
    10 CL0NWIV1 CL0NWIV1 ; 
    10 CL0NWCLM CL0NWCLM ; 
    10 CL0NWDEL CL0NWDEL ; 
    10 CL0NWNOI CL0NWNOI ; 
    10 CL0NWUOK CL0NWUOK ; 
    10 CL0NWPFL CL0NWPFL ; 
    10 CL0NWGCT CL0NWGCT ; 
    10 CL0NWCTR CL0NWCTR ; 
    10 CL0NWMAR CL0NWMAR ; 
    10 YITCD YITCD ; 
    10 CLBPMIVC CLBPMIVC ; 
    10 CL0NMIVD CL0NMIVD ; 
    10 CL0NWDT1 CL0NWDT1 ; 
      15 CL0NWC01 CL0NWC01 ; 
      15 CL0NWDT3 CL0NWDT3 ; 
        20 CL0NWCC1 CL0NWCC1 ; 
        20 CL0NWYY1 CL0NWYY1 ; 
        20 CL0NWMM1 CL0NWMM1 ; 
        20 CL0NWDD1 CL0NWDD1 ; 
    10 CL0NWDT2 CL0NWDT2 ; 
      15 CL0NWMM2 CL0NWMM2 ; 
      15 CL0NWFI1 CL0NWFI1 ; 
      15 CL0NWDD2 CL0NWDD2 ; 
      15 CL0NWFI2 CL0NWFI2 ; 
      15 CL0NWYY2 CL0NWYY2 ; 
    10 CL0NW02X CL0NW02X ; 
    10 CL0NWNUM CL0NWNUM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 CL0NW-DT-ENTER CL0NW-DT-ENTER ; 
      15 CL0NW-DT-ENTER-CCYY CL0NW-DT-ENTER-CCYY ; 
      15 CL0NW-DT-ENTER-MMDD CL0NW-DT-ENTER-MMDD ; 
    10 CL0NW-CUR-DT CL0NW-CUR-DT ; 
      15 CL0NW-CUR-DT-CCYY CL0NW-CUR-DT-CCYY ; 
      15 CL0NW-CUR-DT-MMDD CL0NW-CUR-DT-MMDD ; 
end // end CL0NW01

Record CL0NW02 type basicRecord
  5 CL0NW2GP CL0NW2GP ; 
    10 CL0NW02M CL0NW02M ; 
    10 CL0NWIAY CL0NWIAY [198] ; 
      15 CL0NMSEL CL0NMSEL ; 
      15 ARCCCREF ARCCCREF ; 
      15 ARCREFNB ARCREFNB ; 
      15 CLBPMIVC CLBPMIVC ; 
      15 IV0IVCID IV0IVCID ; 
      15 IV0IVCDT IV0IVCDT ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 YITCD YITCD ; 
      15 ARCCHKNB ARCCHKNB ; 
      15 CL0NWBCT CL0NWBCT ; 
      15 CL0NWCCT CL0NWCCT ; 
      15 CL0NWNOC CL0NWNOC ; 
      15 CL0NWHAR CL0NWHAR ; 
      15 CLBGLIND CLBGLIND ; 
      15 CLBSRIND CLBSRIND ; 
      15 CL0NWRAI CL0NWRAI ; 
      15 CL0NWCLB CL0NWCLB ; 
end // end CL0NW02

//*** RECORD=CL0NW03 ****
// This record holds all unique invoices displayed on the
// screen. For any invoice displayed on the screen there can be
// multiple ar-cross-reference numbers.  When the user
// decides to delete the rows with the ar-cross-ref numbers,
// the program has to track when the last ar-cross-ref
// number is deleted so it can then delete the invoice
// number.  The building of cl0nw03 occurs in the
// cl0nw03 area.
// ***********************
Record CL0NW03 type basicRecord
  5 CL0NW3GP CL0NW3GP ; 
    10 CL0NW03X CL0NW03X ; 
    10 CL0NW03M CL0NW03M ; 
    10 IV0IVCID IV0IVCID [198] ; 
    10 CL0NWNOI CL0NWNOI [198] ; 
    10 CL0NWNOD CL0NWNOD [198] ; 
    10 CL0NWDFL CL0NWDFL [198] ; 
    10 CLBPMIVC CLBPMIVC [198] ; 
end // end CL0NW03

Record CL0NW04 type basicRecord
  5 CL0NW4GP CL0NW4GP ; 
    10 CL0NWAYX CL0NWAYX [11] ; 
    10 CL0NMSEL CL0NMSEL [11] ; 
    10 ARCREFNB ARCREFNB [11] ; 
    10 ARCCCREF ARCCCREF [11] ; 
    10 CLBPMIVC CLBPMIVC [11] ; 
    10 IV0IVCID IV0IVCID [11] ; 
    10 IV0IVCDT IV0IVCDT [11] ; 
    10 CL0NMIVD CL0NMIVD [11] ; 
    10 OP1CUOID OP1CUOID [11] ; 
    10 OP1NORID OP1NORID [11] ; 
    10 YITCD YITCD [11] ; 
    10 CLBGLIND CLBGLIND [11] ; 
    10 CLBSRIND CLBSRIND [11] ; 
    10 CL0NWRAI CL0NWRAI [11] ; 
    10 CL0NWNOC CL0NWNOC [11] ; 
    10 CL0NWCLB CL0NWCLB [11] ; 
    10 CL0NWNEF CL0NWNEF [11] ; 
    10 CL0NWARS CL0NWARS [11] ; 
    10 CL0NWIVS CL0NWIVS [11] ; 
    10 CL0NWUPD CL0NWUPD [11] ; 
    10 CL0NWLNM CL0NWLNM [11] ; 
    10 CLXERRF CLXERRF [11] ; 
    10 CL0NWNBF CL0NWNBF [11] ; 
    10 CL0NWFVO CL0NWFVO ; 
end // end CL0NW04

//*** RECORD=CL0NW05 ****
// ***********************************************************
// *     M A I N T E N A N C E     H I S T O R Y    L O G    *
// *---------------------------------------------------------*
// *    date    by       description                         *
// *   ------  --------  ----------------------------------  *
// *  03-29-89  gdecke   changed length due to changed clarec*
// *  04-06-90  bcourt   changed length due to changed IVAREC*
// *   2-15-91  bcourt   changed length due to changed IVAREC*
// *                     drop KUABLID, add XPACD.
// *   4-12-91  chellm   changed length due to changed ivarec*
// *  10-11-91  bcourt   changed length due to changed ivarec*
// *  03-13-92  sgorga   changed length due to changed ivarec*
// *  11-12-92  GDECKE   DB2 TABLE CHANGES - CL0NW05 LENGTH  *
// *                                                         *
// ***********************************************************
// ***********************
Record CL0NW05 type basicRecord
  5 CL0NW5GP CL0NW5GP ; 
    10 CLCGROUP CLCGROUP ; 
    10 CLBGROUP CLBGROUP ; 
    10 IV0GROUP IV0GROUP ; 
    10 IVAGROUP IVAGROUP ; 
end // end CL0NW05

//*** RECORD=CL0NW06 ****
// pass maximum sequence number by claim from dclaim.vclglx01.
// pass io-count from dclaim.vclglx01
// pass io-summ from dclaim.vclglx01
// pass io-ind from dclaim.vclglx01
// ***********************
Record CL0NW06 type basicRecord
  5 CL0NW6GR CL0NW6GR ; 
    10 CL0NWSQL CL0NWSQL ; 
    10 CL0NWCNT CL0NWCNT ; 
    10 CL0NWIND CL0NWIND ; 
end // end CL0NW06

//*** RECORD=CL0NW07 ****
// pass maximum sequence number by claim from dclaim.vclglx01.
// pass io-count from dclaim.vclglx01
// pass io-summ from dclaim.vclglx01
// pass io-ind from dclaim.vclglx01
// ***********************
Record CL0NW07 type basicRecord
  5 CL0NW7GP CL0NW7GP ; 
    10 CL0NWSQL CL0NWSQL ; 
    10 CL0NWMAX CL0NWMAX ; 
    10 CL0NWCNT CL0NWCNT ; 
    10 CL0NWSUM CL0NWSUM ; 
    10 CL0NWIND CL0NWIND ; 
end // end CL0NW07

//*** RECORD=CL0NW08 ****
// find if completed claims exist for a given invoice and
// any authorized returns exist (ycs equal
// cmp,roa,rpa,rpi,rpm,xra)
// ;
// find if any open rfl or rts claims exist for a given invoice
// ;
// ;*===================================================*
// ;*       M A I N T E N A N C E     H I S T O R Y     *
// ;*---------------------------------------------------*
// ;*  CHNG#   DATE    PGMR     DESCRIPTION             *
// ;*---------------------------------------------------*
// ;* CL0    11/22/91  GDECKE  ADD CLASTTDT,YCRCD,YCTCD.*
// ;*===================================================*
// ***********************
Record CL0NW08 type basicRecord
  5 CL0NW8GP CL0NW8GP ; 
    10 CL0NWSQL CL0NWSQL ; 
    10 YCSCD YCSCD [9] ; 
    10 CLACLMNB CLACLMNB ; 
    10 IV0IVCID IV0IVCID ; 
    10 IV0PARTN IV0PARTN ; 
    10 YITCD YITCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 CL0NWCN1 CL0NWCN1 ; 
    10 CL0NWRTN CL0NWRTN ; 
    10 CLASTTDT CLASTTDT ; 
    10 YCRCD YCRCD ; 
    10 YCTCD YCTCD ; 
end // end CL0NW08

//*** RECORD=CL0NW09 ****
// ************************************************************
// *  this record is used to store clarx records that are
// *  not associated with any clivx invoice number.  these
// *  records are then merged into the cl0nw02 array at the
// *  end
// *
// ************************************************************
// ***********************
Record CL0NW09 type basicRecord
  5 CL0NW09G CL0NW09G ; 
    10 CL0NW09L CL0NW09L ; 
    10 CLCGROUP CLCGROUP ; 
end // end CL0NW09

// screen-formatted invoice date
DataItem CL0NMIVD char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem CL0NMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem CL0NW-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0NW-CUR-DT-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0NW-CUR-DT-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0NW-DT-ENTER num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0NW-DT-ENTER-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0NW-DT-ENTER-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max filled bucket number
DataItem CL0NW02M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for array 02
DataItem CL0NW02X num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max filled bucket number
DataItem CL0NW03M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0nw03 array index
DataItem CL0NW03X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter of nbr of clc recs
DataItem CL0NW09C smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0nw09 group level
DataItem CL0NW09G char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// length of temp storage record
DataItem CL0NW09L num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0nw09 record index
DataItem CL0NW09X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cl0nw01 group level
DataItem CL0NW1GP char(179)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws record 2 group level
DataItem CL0NW2GP char(13664)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0nw03 record group level
DataItem CL0NW3GP char(1984)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for cl0nw04 record
DataItem CL0NW4GP char(782)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0nw05 record group level
DataItem CL0NW5GP char(461)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0NW6GR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem CL0NW7GP char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl0nw08 record group level
DataItem CL0NW8GP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n,is there prim ar ref nbr
DataItem CL0NWAR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option for clcrec
DataItem CL0NWARS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pointer to cl0nw02 aray bucket
DataItem CL0NWAYX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count for clbrec
DataItem CL0NWBCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 0ccyymmdd leading zero
DataItem CL0NWC01 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed address-flags flag
DataItem CL0NWCAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd century field
DataItem CL0NWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count for clcrec
DataItem CL0NWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// assoc-with-clb-rec flag
DataItem CL0NWCLB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n,claim data only on rec
DataItem CL0NWCLM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of nbr of claims
DataItem CL0NWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count
DataItem CL0NWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed-primary-invoice flag
DataItem CL0NWCPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cl-cust-ctct-nm
DataItem CL0NWCTN char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen line counter
DataItem CL0NWCTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd day field
DataItem CL0NWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy day field
DataItem CL0NWDD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// how many lines were deleted
DataItem CL0NWDEL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete-this-invoice flag
DataItem CL0NWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// done-with-whatever flag
DataItem CL0NWDON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 0ccyymmdd date format
DataItem CL0NWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy date format
DataItem CL0NWDT2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd  date format
DataItem CL0NWDT3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// slash '-'
DataItem CL0NWFI1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// slash '-'
DataItem CL0NWFI2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// requested function
DataItem CL0NWFNC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line found on xvotbl flag
DataItem CL0NWFVO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group counter for array
DataItem CL0NWGCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gl/prod protect flag
DataItem CL0NWGPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have a/r for this cust clm nbr
DataItem CL0NWHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws invoice array
DataItem CL0NWIAY char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// results indicator
DataItem CL0NWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n,is there prim ivc nbr
DataItem CL0NWIV1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option for clbrec
DataItem CL0NWIVS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line was modified
DataItem CL0NWLNM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maximum size for db array
DataItem CL0NWMAR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count clbrec
DataItem CL0NWMAX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd month field
DataItem CL0NWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy month field
DataItem CL0NWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need a/r primary flag
DataItem CL0NWNAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike Bank $ warning flag
DataItem CL0NWNBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number field
DataItem CL0NWNBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new-entry flag
DataItem CL0NWNEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need new primary clb rec flag
DataItem CL0NWNNP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of clc recs in this line
DataItem CL0NWNOC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of deletes of this ivc
DataItem CL0NWNOD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of invoices in array
DataItem CL0NWNOI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// convert binary to numeric
DataItem CL0NWNUM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// primary flag edit
DataItem CL0NWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// primary invoice number
DataItem CL0NWPIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prds return for auth ind
DataItem CL0NWRAI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return flag
DataItem CL0NWRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql selection
DataItem CL0NWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count clirec
DataItem CL0NWSUM decimal(15,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates went okay switch
DataItem CL0NWUOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update selection marker
DataItem CL0NWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws index 1
DataItem CL0NWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws yitcd
DataItem CL0NWYIT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd year field
DataItem CL0NWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy year field
DataItem CL0NWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

