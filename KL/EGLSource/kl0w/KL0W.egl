package kl0w;

import corpcom1.*;
import corpcom3.XPCL002;
import corpcom3.XPCL004;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXRVNBR;
import corpx1.XDSTBL;
import corpx1.XWHTBL;
import corpy2.YATTBL;
import corpy2.YCSTBL;
import corpy2.YUATBL;
import fy.common.FY1REC;
import ku.common.KUMREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import tf.common.TF1REC;
//*** PROGRAM=KL0W ****
// ************************************************************
// KL0W - Claims Shipping Charges Entry
// 
// maintenance history:
// date      by      rev description of change
// --------  ---     --  --------------------------------------
// 04-10-87  lhughe   0  create model for claims appl using
//                       two screens.
// 06-06-88  MHALST      Changed code to use IOMods
// 08-03-88  bcourt   1  data base changes, cllseqnb->clhseqnb.
//                       chg XPCL003 to XPCL010.
// 02-28-89  jwood       added noncsp option to calls
// 02-28-89  jwood       added xssegtr logic
// 05-19-89  bcourt      DB2 structure changes: CLAREC, XWHTBL
// 01-09-90  chellm      added statement group cl0w201 which
//                       scans open exceptions. if only open is
//                       a tf5, and status RIP and claim is not
//                       authorized then set status to opa.
// 01-19-90 gdecke       DB2 structure changes for january
// 01-22-90 chellm       Replaced DWPROD.VFCTY001 with DFCTY.
//                       VFCTY001. Replaced IO0870 with IO2810.
//                       Renamed PD1... as FY1...
// 04-03-90 sgorga       DB2 structure changes. Regen only.
//  ***  Special Note    The factory code field on this map is
//                       is currently inactive.
// 08-08-91 wjohns       Renamed application and commarea
//                         referrences to renamed claims appls.
// 09-19-91 ahowar       changed proc and sgrp from "cl"to"kl".
// 01-13-92 sgorga       Set ta2rec empty - kl0w200.
//  5-05-93 BCOURT       Add menu option 19, like 09.
// 10-29-93 GDECKE       CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1
// 02-25-98 rgilli       Y2K MODIFICATIONS MADE TO:
//                       Re-generate to include new version of
//                       xpcl004.
//                       KL0WS5D: Changed to use ccyymmdd for
//                                date compare
//                       KL0WS5N: Format database date field
//                                for display on map.
// 09-09-99 ssank1       Changed Map presentation of KL0WM001
//                       to accomodate 4 digit nike ord id.
// ************************************************************
// *********************
Program KL0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0WW01 CL0WW01; // record
  CL1REC CL1REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLHREC CLHREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF1REC TF1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDSTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0WM.KL0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0W000: KL0W000();
    KL0W001: KL0W001();
    KL0W050: KL0W050();
    KL0W100: KL0W100();
    KL0W101: KL0W101();
    KL0W111: KL0W111();
    KL0W110: KL0W110();
    KL0W120: KL0W120();
    KL0W200: KL0W200();
    KL0W130: KL0W130();
  end // end main
end // end KL0W

// application main logic
Function KL0W000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xclentry checks to ensure that the claim header has   **/
   /* *         been flagged as "in use" if this application    **/
   /* *         does updates.                                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/


  KL0W001(); /* initilize the application*/

  CL0WW01.XXXRVNBR = "1"; /* appl maintainence revision number*/

  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0W050(); /* process the application screen(s)*/
  end

  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0W000

// initialize application
Function KL0W001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* *  describe what happens in this process                  **/
   /* *                                                         **/
   /* * 05-05-93 BCOURT Add menu option 19,like 09.             **/
   /* *                                                         **/
   /* ************************************************************/
   /* TEMP001                         ;routine to jam commarea*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/


  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  set CLAREC empty; /* clear out header*/
  XPCL011(); /* claims entry module*/


  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  CLXREC.XXXCYMD = VGVar.currentShortGregorianDate; /* move in yymmdd*/
  if (CLXREC.XXXCYY < 50) /* if year < 50*/
    CLXREC.XXXCCC = 020; /* assume next century*/
  else
    CLXREC.XXXCCC = 019;
  end


     /* put staements here to initalize your working-storage(s),*/
     /* e.g. constants, messages, '-' for dates.*/

  set KL0WM001 initial;
  set CL0WW01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set CLHREC empty;

    /* now check to see if this is an inquiry*/
    /* only user*/

  if (CLWREC.CLWMNOPT == 7  
   || CLWREC.CLWMNOPT == 9  
   || CLWREC.CLWMNOPT == 17 /* 5-5-93*/
   || CLWREC.CLWMNOPT == 19) /* 5-5-93*/
    CL0WWIQU = "Y"; /* so set us in inquiry mode*/
  else
    if (CLWREC.CLWMNOPT == 8)
      if (CLAREC.YCTCD == "DEF"
       || CLAREC.YCTCD == "RTS"
       || CLAREC.YCTCD == "CDR")
        CL0WWIQU = "N"; /* means it's ok to add/change*/
      end
    else
      if (CLWREC.CLWACTIV == "I") /* came from inquiry program*/
        if (COMMAREA.CAALVL[6] == "Y" /* a yes here*/
         || COMMAREA.CACLVL[6] == "Y") /* or a yes here*/
          CL0WWIQU = "N"; /* means it's ok to add/change*/
        else
          CL0WWIQU = "Y"; /* otherwise set inquiry only*/
        end
      end
    end
  end

  CLXREC.CLXEOAF = "N"; /* set application-done-switch to 'no'*/
  if (CLAREC.CLACLMNB != 0) /* we have a passed claim header*/
    CLXREC.CLXBLDSC = "Y"; /* set to build screen from commarea*/
  else /* no header*/
    CLXREC.CLXBLDSC = "N"; /* so don't try to build*/
  end


  CLXREC.CLXCSCRN = "KL0WM001"; /* set first screen name*/

  CLXREC.CLXSNAME[1] = "KL0WM001"; /* initialize the names of the*/

  CLXREC.CLXMAXLN[1] = 10; /* max lines on map 1*/
  CLXREC.CLXARY1X[1] = 1; /* start line on map 1*/

  CLXREC.CLXARAYX = 1; /* index to array*/
  CLXREC.CLXLINEX = 1; /* index to map line*/



end // end KL0W001

// Main CL0W branch control
Function KL0W050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W050"; /* set current process name*/


  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/


  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* reset error flag*/
  CL0WW01.CL0WWINQ = CL0WWIQU; /* inquiry mode flag*/
  CL0WW01.CL0WWCNG = "I"; /* reset change/insert flag*/
  CL0WW01.CL0WWUPD = "N"; /* reset ok to update flag*/
  CL0WW01.CL0WWSTT = "N"; /* reset second time thru flag*/
   /* MOVE 'N' TO CL0WM001.CL0WMDFG reset delete flag*/
                                      /* (CL464v CWH 6-12-89)*/

  if (CLXREC.CLXSCRNX == 1) /* if screen CL0WM001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0W100(); /* process screen CL0WM001*/
    end
  else
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    XPCL010();
  end


   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of CL0W050...*/
       /* else*/
         /* the perform will auto return to CL0W000.*/



end // end KL0W050

// Claim Shipping Charges
Function KL0W100()
   /* ************************************************************/
   /* *    process screen CL0WM001                              **/
   /* *                                                         **/
   /* *  note - this process is being performed in a            **/
   /* *     "while loop" from CL0W050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W100"; /* set current process name*/

  if (CLXREC.CLXBLDSC == "Y")
    KL0W101(); /* build screen because new record*/
  end /* to display or pf7/pf8 keyed*/

  if (CLXREC.CLXERRF == "Y" /* if screen has errors*/
   || converseVar.eventKey is pf12) /* or user wants to see same screen*/
    CLXREC.CLXBLDSC = "N"; /* skip build screen next time thru*/
  else
    CLXREC.CLXBLDSC = "Y"; /* (CL464v cwh 6-6-89)*/
  end
    /* skip build when have errors to show, or pf12 was keyed*/

  if (CLXREC.CLXERRF == "N") /* no errors, so set cursor*/
    if (KL0WM001.CLACLMNB == 0)
      set KL0WM001.CLACLMNB cursor;
    end
  else /* we have errors, so set alarm*/
    set KL0WM001 alarm;
  end

  KL0WM001.XXXPRCNM = "KL0W100"; /* move process name*/
  KL0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/
  KL0WM001.XXXRVNBR = CL0WW01.XXXRVNBR; /* and rev. number*/
   /* MOVE 1 TO EZESEGM          ;and set mode to segmented*/

  converse KL0WM001 ;


  CLXREC.CLXMSG = " "; /* set non-ezemno error message to space*/
  CLXREC.CLXERRF = "N"; /* re-set error flag*/

  KL0W111(); /* clear fields*/

  if (KL0WM001.CLACLMNB is modified /* if there were entries*/
   || KL0WM001.CLHSEQNB is modified 
   || KL0WM001.XXXSHPDT is modified 
   || KL0WM001.XDSCD is modified    
   || KL0WM001.XWHCD is modified    
   || KL0WM001.FY1FCTYC is modified 
   || KL0WM001.TF1CARCD is modified 
   || KL0WM001.TF2PRONO is modified 
   || KL0WM001.PK1BLLAD is modified 
   || KL0WM001.CLENBRCT is modified 
   || KL0WM001.CLHWGT is modified   
   || KL0WM001.CLHSHPCG is modified 
   || KL0WM001.CL0WMDFG is modified)
    CLXREC.CLXEDITF = "Y"; /* then set do-edits-flag to 'yes'*/
  else
    CLXREC.CLXEDITF = "N"; /* if no entries, then no edits*/
  end

  KL0W110(); /* handle any special entries*/
    /* may exit appl from this process*/


  if (CLXREC.CLXEDITF == "Y") /* if we still want to edit*/
    KL0W120(); /* go edit screen entries*/
  end


      /* determine next action*/

  if (CLXREC.CLXERRF == "Y" /* if screen has errors*/
   || converseVar.eventKey is pf12) /* or user wants to see same screen*/
    CLXREC.CLXBLDSC = "N"; /* do not rebuild screen, just reshow*/
  else
    if (CL0WWUPD == "Y" /* ok to update*/
     && CL0WWINQ != "Y") /* and not inquiry mode*/
      KL0W200(); /* go update data base*/
      set KL0WM001 initial; /* clear off screen*/
      KL0WM001.CL0WMLCN = CLAREC.CLACLMNB; /* last claim to screen*/
      CLXREC.CLXBLDSC = "N";
                                   /* skip build screen(CL464v cwh 6-20-89)*/
    else
      if (converseVar.eventKey is enter
       && CLXREC.CLXEDITF == "N") /* nothing was entered on the screen*/
        /* AND CL0WWSTT EQ 'Y'         second time thru on change*/
        /* AND CL0WWUPD EQ 'N'         we didn't just update*/
        set KL0WM001 initial;
        KL0WM001.CL0WMLCN = CLAREC.CLACLMNB;
        CLXREC.CLXBLDSC = "N"; /* do not rebuild screen*/
      end
    end
    CLXREC.CLXEOSF = "Y"; /* set end of screen y to reset*/
    KL0W130(); /* act upon enter/pf key*/
  end



   /* at this point;*/
     /* if the end-of-screen flag (clxeosf) is 'n'*/
       /* the perform returns to top of process cl0%100.*/
     /* else*/
       /* the perform returns to cl0%050.*/



end // end KL0W100

// Initialize screen CL0WM001
Function KL0W101()
   /* ************************************************************/
   /* *        This process initializes screen CL0WM001         **/
   /* *  We will only perform this process if we were passed    **/
   /* *  a claim header in the commarea.                        **/
   /* *                                                         **/
   /* ************************************************************/
   /* *     M A I N T E N A N C E     H I S T O R Y    L O G    **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1  **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W101"; /* set current process name*/

  set KUMREC empty; /* (CL464v CWH 06-12-89)*/

  KUMREC.KUCCOID = CLAREC.KUCCOID;
  KUMREC.KUMSTRID = CLAREC.KUMSTRID;
  set SQLCA empty;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* get store rec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CLWREC.KUCCONM = KUMREC.KUMSTRNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(82); /* store not found*/
      set KL0WM001.KUMSTRID cursor, modified, bold;
      CLXREC.CLXERRF = "Y"; /* yes there is an error*/
      return;
    else
      TA1REC.TA1TBLKE = "FATAL ERROR GETTING STORE";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1LOCAT[2] = "CL0W101";
      XPCL010();
    end
  end

  KL0WM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0WM001.KUCCOID = CLAREC.KUCCOID;
  KL0WM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0WM001.XNXCD = CLAREC.XNXCD;
  KL0WM001.KUCCONM = CLWREC.KUCCONM;

  if (CLAREC.YCSCD1 in YCSTBL.YCSCD) /* if claim status in table*/
    if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N") /* and allow input flag is no*/
      if (CLWREC.CLWMNOPT != 8 /* if not from menu option 08*/
       || CLAREC.YCSCD1 == "CMP") /* or the claim is complete*/
        CL0WWINQ = "Y"; /* then force program to inquiry*/
      else
        if (CLAREC.YCSCD1 == "RAA"
         || CLAREC.YCSCD1 == "RIP")
          CL0WWINQ = "N"; /* allow input*/
        end
      end
    else
      if (CLWREC.CLWMNOPT != 8) /* (CL464v CWH 6-14-89)*/
        CL0WWINQ = "Y"; /* then force program to inquiry*/
      end
    end
  end

  if (CLWREC.CLWMNOPT == 01 /* if creating a new claim*/
   && CLAREC.YCTCD == "SCO")
                                   /* and claim type is shipping chgs only*/
    CL0WWINQ = "N"; /* allow input*/
  end

  KL0WS6B(); /* and order number*/
  KL0WS5N(); /* try for memo record*/
  if (CLXREC.CLXERRF == "Y") /* we had problems getting memo*/
    return; /* so get out*/
  end


  if (CL0WW01.CL0WWINQ == "Y") /* if in inquiry mode*/
    set KL0WM001.CLACLMNB cursor;
    set KL0WM001.XXXSHPDT skip;
    set KL0WM001.XDSCD skip;
    set KL0WM001.XWHCD skip;
    set KL0WM001.FY1FCTYC skip;
    set KL0WM001.TF1CARCD skip;
    set KL0WM001.TF2PRONO skip;
    set KL0WM001.PK1BLLAD skip;
    set KL0WM001.CLENBRCT skip;
    set KL0WM001.CLHWGT skip;
    set KL0WM001.CLHSHPCG skip;
    set KL0WM001.CL0WMDFG skip, invisible;
    if (CLHREC.CLHSHPDT == 0) /* no ship date means*/
      converseLib.validationFailed(357);
                                   /* no shipping charges have been entered*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;   (CL464v CWH 6-6-89)*/
      return;
    end
  end

  if (CL0WWCNG == "C" /* in change mode*/
   || CL0WWINQ == "Y") /* or inquiry mode*/
    KL0WS5H(); /* get carrier desc.*/
    KL0WS5G(); /* and factory name*/
    KL0WS5F(); /* and warehouse name*/
    KL0WS5E(); /* and method desc.*/
    KL0WS5D(); /* and pretty up date*/
    if (CL0WWINQ == "Y") /* in inquiry mode*/
      if (CLWREC.CLWMNOPT != 8)
        converseLib.validationFailed(594);
      else
        VAGen_EZEMSG = "INQUIRY MODE - NO UPDATE ALLOWED";
        converseLib.validationFailed(0);
      end
      KL0WM001.CL0WMDFG = " "; /* (CL464v CWH 6-12-89)*/
      CLXREC.CLXERRF = "N";
      set KL0WM001.CATOAP cursor;
    else
      VAGen_EZEMSG = "NOW IN CHANGE MODE - ENTER UPDATES";
      set KL0WM001.XXXSHPDT cursor;
      set KL0WM001.CLACLMNB skip;
      set KL0WM001.CLHSEQNB skip;
      set KL0WM001.CL0WMDMG normal;
      set KL0WM001.CL0WMDMG skip;
      set KL0WM001.CL0WMDFG normal;
      KL0WM001.CL0WMDMG = "DELETE SHIPPING CHARGES(Y/N)?";
      KL0WM001.CL0WMDFG = "N";
      CLXREC.CLXERRF = "Y";
      CL0WWSTT = "Y";
    end
  end
end // end KL0W101

// Validate PF keys
Function KL0W110()
   /* ************************************************************/
   /* *  validate pf keys                                       **/
   /* *                                                         **/
   /* *  the only keys acted upon at this time are pf 1, 3 & 4  **/
   /* *  and fastpath                                           **/
   /* *                                                         **/
   /* *  the other keys are just verified that they are used    **/
   /* *  by this application.  if the pf key is not recognized, **/
   /* *  the application resets all modified fields to remain   **/
   /* *  modified, then reshows the map with an error message.  **/
   /* *                                                         **/
   /* *  these other pf keys are acted upon after the editing   **/
   /* *  and updating have occured.                             **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W110"; /* set current process name*/

     /* if you want to use pa2 to ezeclos, for testing only,*/
     /* then use stmnt group 'tests01' or some non-std name*/



  if (converseVar.eventKey is enter) /* normal 'enter'*/
    if (KL0WM001.CATOAP != " ") /* if fastpath option entered,*/
      COMMAREA.CATOAP = KL0WM001.CATOAP;
      COMMAREA.CAITEM = KL0WM001.CAITEM;
      XPCL002(); /* exit application*/
    end
    return;
  end

  if (converseVar.eventKey is pf1) /* 'help'*/
    KL0WS01();
  end

  if (converseVar.eventKey is pf3)
    KL0WS03(); /* skip edit, update - exit*/
  end

  if (converseVar.eventKey is pf4)
    KL0WS04(); /* skip edit, update - exit*/
  end

  if (converseVar.eventKey is pf5)
    return; /* do update, then goto claim header*/
  end

  if (converseVar.eventKey is pf12) /* validate only*/
    return;
  end

  if (converseVar.eventKey is pf15) /* transfer to summary screen*/
    if (COMMAREA.CAFROMAP == "KL0U"
     || COMMAREA.CAFROMAP == "KL0V")
      KL0WS15();
    end
  end


   /* other pf keys follow the same format*/

   /* if ezeaid is pf key ??*/
     /* ezertn*/
   /* end*/



      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  KL0WS26(); /* set fields modfd so user no re-key*/
  CLXREC.CLXEDITF = "N"; /* do not edit map, just re-show it*/
  CLXREC.CLXERRF = "Y"; /* and set error flag*/


end // end KL0W110

// reset modified fields
Function KL0W111()
   /* ************************************************************/
   /* *   Set fields back to normal before edit checks.         **/
   /* *                                                         **/

    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/


   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W111"; /* set current process name*/

  set KL0WM001.CLACLMNB normal;
  set KL0WM001.CLHSEQNB normal;
  set KL0WM001.XXXSHPDT normal;
  set KL0WM001.XDSCD normal;
  set KL0WM001.XWHCD normal;
   /* SET CL0WM001.PD1FCTYC NORMAL; drop ';' when field activated*/
  set KL0WM001.TF1CARCD normal;
  set KL0WM001.TF2PRONO normal;
  set KL0WM001.PK1BLLAD normal;
  set KL0WM001.CLENBRCT normal;
  set KL0WM001.CLHWGT normal;
  set KL0WM001.CLHSHPCG normal;
  set KL0WM001.CL0WMDFG normal;

end // end KL0W111

// Process screen M001 entries
Function KL0W120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen CL0WM001                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W120"; /* set current process name*/


     /* individual field edits use this form:*/

   /* if map.field is modified*/
     /* cl0%s..                            ; edit field*/
   /* end*/

    /* CL0WS.. statement group uses this form:*/

    /* if field is in error*/
      /* move ## to ezemno             ; describe message here*/
      /* set map.field cursor,modified,bright*/
      /* move 'y' to clxrec.clxerrf*/
    /* else*/
      /* set map.field defined         ; reset color*/
    /* end*/

    /* note - turn on the update flag when the screen*/
    /* is error-free.*/

  if (KL0WM001.CLACLMNB != 0)
    if (KL0WM001.CLACLMNB is modified
     || KL0WM001.CLHSEQNB is modified) /* (CL464v CWH 6-12-89)*/
      move CL0WWIQU to CL0WWINQ withV60Compat; /* reset inquiry flag*/
      CLXREC.CLACLMNB = CLAREC.CLACLMNB; /* last claim*/
      CLAREC.CLACLMNB = KL0WM001.CLACLMNB; /* current claim*/
      CLAREC.CLACSQNB = KL0WM001.CLHSEQNB; /* current seq nbr*/
      set KL0WM001 initial; /* clear screen*/
      KL0WM001.CLACLMNB = CLAREC.CLACLMNB; /* current claim*/
      KL0WM001.CLHSEQNB = CLAREC.CLACSQNB; /* current seq nbr*/
      KL0WM001.CL0WMLCN = CLXREC.CLACLMNB; /* last claim*/
      KL0WS5A(); /* validate claim number*/
      if (CLXREC.CLXERRF == "Y") /* can't continue if errors*/
        return; /* to exit out*/
      end
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
      return;
    end
  else
    VAGen_EZEMSG = "CLAIM NUMBER REQUIRED";
    CLXREC.CLXERRF = "Y";
    return;
  end

   /* Now if this is not a new claim, then try and*/
   /* get the memo record*/
  if (CL0WWSTT == "N") /* not second time thru for change*/
    KL0WS5N(); /* so try and get memo record*/
    if (CLXREC.CLXERRF == "Y") /* we have errors*/
      return; /* so exit*/
    end
  end

   /* Now validate remaining fields on screen*/
   /* Note: Carrier code must be done first because other*/
        /* field edits will be affected by the type of*/
        /* carrier code entered by the user.*/

  if (KL0WM001.CL0WMDFG != "Y" /* user wants to delete*/
   && CL0WWINQ != "Y")         /* and not inquiry  (CL464v cwh 6-12-89)*/
    KL0WS5H(); /* Ship Via(Carrier Code)*/
    KL0WS5M(); /* Charges*/
    KL0WS5L(); /* Weight*/
    KL0WS5K(); /* Number of Containers*/
    KL0WS5J(); /* B/L Number*/
    KL0WS5I(); /* Pro. Number*/
    KL0WS5G(); /* Factory*/
    KL0WS5F(); /* Warehouse*/
    KL0WS5E(); /* Method*/
    KL0WS5D(); /* Date Shipped*/
  end

  if (CL0WWINQ == "Y") /* we are in inquiry mode (CL464v CWH 6-6-89)*/
    if (CLXREC.CLXERRF == "N") /* no error*/
      /* MOVE 'INQUIRY MODE - NO UPDATES ALLOWED' TO EZEMSG*/
      converseLib.validationFailed(594); /* (CL464v CWH 6-13-89)*/
      CLXREC.CLXERRF = "N";
      return;
    else
      CLXREC.CLXERRF = "N";
      return;
    end
  end

  if (CL0WWCNG == "C") /* in change mode*/
    set KL0WM001.CLACLMNB skip;
                                   /* so set all 'key' fields protect*/
    set KL0WM001.CLHSEQNB skip;
    set KL0WM001.CL0WMDMG normal;
    set KL0WM001.CL0WMDMG skip;
    set KL0WM001.CL0WMDFG normal;
    KL0WM001.CL0WMDMG = "DELETE SHIPPING CHARGES(Y/N)?";
    if (CL0WWSTT == "N") /* first time thru logic*/
      VAGen_EZEMSG = "NOW IN CHANGE MODE - ENTER UPDATES";
      set KL0WM001.XXXSHPDT cursor;
      CLXREC.CLXERRF = "Y";
      CL0WWSTT = "Y"; /* yes, next time is second time thru*/
    end
  end
  if (CLXREC.CLXERRF == "N") /* no error*/
    CL0WW01.CL0WWUPD = "Y"; /* ok to update*/
  end
end // end KL0W120

// Act upon valid PF keys, map 1
Function KL0W130()
   /* ************************************************************/
   /* *  act upon pf keys                                       **/
   /* *                                                         **/
   /* *  pf 1, 3, 4, 7, 8, 10, 11 & 12 were acted upon in       **/
   /* *  cl0%110.                                               **/
   /* *                                                         **/
   /* *  the other pf keys are acted upon here, after editing   **/
   /* *  and updating have occured.                             **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W130"; /* set current process name*/

  if (converseVar.eventKey is enter)
    if (CLXREC.CLXEDITF == "N" /* nothing entered on screen*/
     && CL0WWSTT == "N"        /* not 2nd time thru on change*/
     && CL0WWUPD == "N")       /* we didn't just update*/
      if (CLAREC.YCTCD == "SCO") /* if shipping charges only claim type*/
        COMMAREA.CATOAP = "KL0E"; /* go back to claim header*/
        XPCL002();
      else
        if (CLWREC.CLWMNOPT != 8) /* (CL464v CWH 6-14-89)*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* BACK WHERE WE CAME*/
          XPCL002();
        end
      end
    end
    if (CL0WWUPD == "Y")
      if (COMMAREA.CAFROMAP == "KL0E"
       || COMMAREA.CAFROMAP == "KL0U"
       || COMMAREA.CAFROMAP == "KL0V")
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        XPCL002();
      end
    end
    return; /* enter is ok*/
  end

  if (converseVar.eventKey is pf5) /* transfer to claim header (kL0E)*/
    KL0WS05();
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  KL0WS26(); /* set fields modfd so user no re-key*/
  CLXREC.CLXEDITF = "N"; /* do not edit map, just re-show it*/



end // end KL0W130

// Add/Update Claims Records
Function KL0W200()
   /* ************************************************************/
   /* This process will insert and/or change all claim    **/
   /* records required.                                   **/
   /* **/
   /* ************************************************************/
   /* Maintenance History:                                    **/
   /* 01-09-90   CHELLM added perform of CL0W201 to check for   **/
   /* open TF5 exceptions.                           **/
   /* 01-13-92  sgorga  Set ta2rec empty.                       **/
   /* **/
   /* *************************************************************/

  set TA2REC empty;
   /* First we get the current date & time to put in the records*/
  TA2REC.TA2DTOPT = "GETDATE"; /* get current date/time*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  KL0W201(); /* check for open TF5 exceptions*/

  KL0WS7D(); /* now add/change memo record*/
  KL0WS7B(); /* and update claim header*/
end // end KL0W200

// Check for open exceptions
Function KL0W201()
   /* ************************************************************/
   /* *  This process forces the authorization of claims with   **/
   /* *  open TF5 exceptions when no other open exceptions      **/
   /* *  exist.                                                 **/
   /* *                                                         **/
   /* * This process performs the following functions:          **/
   /* *  1.  Scans the exceptions table for open exceptions.    **/
   /* *  2.  if the open exception is not a TF5 adds 1 to a ctr.**/
   /* *  3.  if the open exctptions counter = 0, and the claim  **/
   /* *      status is RIP and the claim is not authorized then **/
   /* *      change the claim status to OPA so the claim gets   **/
   /* *      reported on exceptions reports for ultimate        **/
   /* *      authorizations.*/
   /* *                                                         **/
   /* * Maintenance History:                                    **/
   /* * 01-09-90 CHELLM Installed.                              **/
   /* *                                                         **/
   /* ************************************************************/

  CLXREC.CLXCPROC = "CL0W201"; /* set current process name*/




  CL1REC.CLACLMNB = CLAREC.CLACLMNB;
  call "IO2840" ("S1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* get set of records*/
  if (SQLCA.VAGen_SQLCODE != 0) /* we got problems*/
    TA1REC.TA1LOCAT[1] = CLXREC.CLXCPROC;
    TA1REC.TA1LOCAT[2] = "OPEN";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLXCP01";
    XPCL010();
  end

  CL0WW01.CL0WWOEC = 0; /* number of open exceptions to 0*/

  while (SQLCA.VAGen_SQLCODE == 0) /* start scanning*/
    call "IO2840" ("N1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* get next record*/
    if (SQLCA.VAGen_SQLCODE == 100) /* at end*/
      call "IO2840" ("C1", SQLCA, CL1REC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
      SQLCA.VAGen_SQLCODE = 100; /* to break out of while loop*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* we got problems*/
        TA1REC.TA1LOCAT[1] = CLXREC.CLXCPROC;
        TA1REC.TA1LOCAT[2] = "FETCH";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLXCP01";
        XPCL010();
      else
        if (CL1REC.YCECD != "TF5"
         && CL1REC.CL1XOFL == " "
         && CL1REC.XXXUSRID == " ")
          CL0WW01.CL0WWOEC = CL0WW01.CL0WWOEC + 1;
        end
      end
    end
  end

  if (CL0WW01.CL0WWOEC == 0  /* if only open TF5's exist*/
   && CLAREC.YCSCD1 == "RIP" /* and status is RIP*/
   && CLAREC.CLYATHID == 0)  /* and not authorized*/
    CLAREC.YCSCD2 = CLAREC.YCSCD1;
    CLAREC.YCSCD1 = "OPA";
    if (CLAREC.YCSCD1 in YCSTBL.YCSCD)
      CLAREC.YCSACTCD = YCSTBL.YCSACTCD[sysVar.arrayIndex];
    end
  end
end // end KL0W201

// pf1 help
Function KL0WS01()



      /* skip edits/updates, exit to goal documentation*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "GD0G";
  transfer to program "GD0G" passing COMMAREA;

  TA1REC.TA1TBLKE = "CANT TRANSFER TO GD0G REQUESTED APPL";
  XPCL010(); /* serious error if cant*/
                                   /* transfer...abend*/



end // end KL0WS01

// pf3 exit to claims
Function KL0WS03()



      /* skip edits/update, go to higher level in claims*/


  COMMAREA.CATOAP = "KL0A"; /* go to claims menu*/

  XPCL002(); /* common claims exit*/



end // end KL0WS03

// pf4 exit to master menu
Function KL0WS04()



      /* skip edits/update, go to goal master menu*/

  XSPF4(); /* go and do it*/

end // end KL0WS04

// pf5 exit to CL0E (Claim hdr)
Function KL0WS05()

      /* skip edits/update, go to higher level in claims*/


  COMMAREA.CATOAP = "KL0E"; /* go to claim header*/

  XPCL002(); /* common claims exit*/



end // end KL0WS05

// PF15 exit to summary programs
Function KL0WS15()


      /* skip edits/update, go to summary program*/


  COMMAREA.CATOAP = COMMAREA.CAFROMAP;

  XPCL002(); /* common claims exit*/



end // end KL0WS15

// modify entered fields
Function KL0WS26()
   /* ************************************************************/
   /* *  since the map must be re-shown to the user             **/
   /* *  before editing has been done, set fields modified to   **/
   /* *  keep track of all the fields entered by the user.      **/
   /* *  the user will only need to re-do the pf key or enter   **/
   /* *  key, not enter the data again.                         **/
   /* ************************************************************/


    /* for every entry field on the map,*/
    /* do this:*/

    /* if map.field modified*/
      /* set map.field modified*/
    /* end*/


  if (KL0WM001.CLACLMNB is modified)
    set KL0WM001.CLACLMNB modified;
  end
  if (KL0WM001.CLHSEQNB is modified)
    set KL0WM001.CLHSEQNB modified;
  end
  if (KL0WM001.XXXSHPDT is modified)
    set KL0WM001.XXXSHPDT modified;
  end
  if (KL0WM001.XDSCD is modified)
    set KL0WM001.XDSCD modified;
  end
  if (KL0WM001.XWHCD is modified)
    set KL0WM001.XWHCD modified;
  end
  if (KL0WM001.FY1FCTYC is modified)
    set KL0WM001.FY1FCTYC modified;
  end
  if (KL0WM001.TF1CARCD is modified)
    set KL0WM001.TF1CARCD modified;
  end
  if (KL0WM001.TF2PRONO is modified)
    set KL0WM001.TF2PRONO modified;
  end
  if (KL0WM001.PK1BLLAD is modified)
    set KL0WM001.PK1BLLAD modified;
  end
  if (KL0WM001.CLENBRCT is modified)
    set KL0WM001.CLENBRCT modified;
  end
  if (KL0WM001.CLHWGT is modified)
    set KL0WM001.CLHWGT modified;
  end
  if (KL0WM001.CLHSHPCG is modified)
    set KL0WM001.CLHSHPCG modified;
  end
  if (KL0WM001.CATOAP is modified)
    set KL0WM001.CATOAP modified;
  end
  if (KL0WM001.CAITEM is modified)
    set KL0WM001.CAITEM modified;
  end

end // end KL0WS26

// Validate Claim Number
Function KL0WS5A()
   /* *************************************************************/
   /* *     This statement group will validate the claim number  **/
   /* *     using the claim header file.                         **/
   /* *************************************************************/

  CLAREC.CLACLMNB = KL0WM001.CLACLMNB;
  call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* see if we can find it*/
  if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
    converseLib.validationFailed(5); /* claim not found*/
    set KL0WM001.CLACLMNB cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
      TA1REC.TA1LOCAT[2] = "CL0WS5A"; /* move in module name*/
      TA1REC.TA1DBASE = "DCLAIM"; /* and db2 view name*/
      TA1REC.TA1TBLVU = "VCLHDR01";
      XPCL010(); /* abort*/
    end
  end

  if (CLAREC.YCSCD in YCSTBL.YCSCD)
    if (YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N") /* input not allowed*/
      if (CLWREC.CLWMNOPT != 8)
        CL0WWINQ = "Y"; /* so force inquiry mode*/
      else
        if (CLAREC.YCSCD == "RAA"
         || CLAREC.YCSCD == "RIP")
          CL0WWINQ = "N"; /* input allowed*/
        end
      end
    end
  end

end // end KL0WS5A

// Validate Date Shipped
Function KL0WS5D()
   /* *************************************************************/
   /* *     Validate the date shipped using the standard Claims  **/
   /* *     routine XPCL004.                                     **/
   /* *************************************************************/

  if (KL0WM001.XXXSHPDT == " ")
    converseLib.validationFailed(396); /* ship date required*/
    set KL0WM001.XXXSHPDT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    CLXREC.XXXEDFLD = KL0WM001.XXXSHPDT;
    XPCL004(); /* validate*/
    if (CLXREC.CLXVALDT == "N") /* bad date*/
      converseLib.validationFailed(395); /* ship date invalid*/
      set KL0WM001.XXXSHPDT cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    else
      /* -------------------- y2k out begin ----------------*/
      /* IF TA2REC.TA2GRGEN GT CLXREC.XXXCYMD;    /* (CL464v CWH 6-20-89)*/
      /* -------------------- y2k out end   ----------------*/
      /* -------------------- y2k in begin  ----------------*/
      if (TA2REC.TA2GRGGN > CLXREC.XXXCDTE /* (CL464v CWH 6-20-89)*/
      )                                    /* -------------------- y2k out end   ----------------*/
        converseLib.validationFailed(395); /* ship date invalid*/
        set KL0WM001.XXXSHPDT cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else
        KL0WM001.XXXSHPDT = CLXREC.XXXFLDT; /* date ok, move it*/
        CL0WW01.CLHSHPDT = TA2REC.TA2GRGGN; /* and save for later*/
      end
    end
  end
end // end KL0WS5D

// Validate Method Code
Function KL0WS5E()
   /* *************************************************************/
   /* *     Validate method code using the XDSTBL table. If ok,  **/
   /* *     move description to screen.                          **/
   /* *************************************************************/

  KL0WM001.XDSABRV = " "; /* blank desc.*/
  if (KL0WM001.XDSCD in XDSTBL.XDSCD /* is it in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it's active (cwh 8-8-89)*/
    KL0WM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex]; /* yes*/
  else /* not in table - error*/
    converseLib.validationFailed(398); /* ship method invalid*/
    set KL0WM001.XDSCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end
end // end KL0WS5E

// Validate Warehouse Code
Function KL0WS5F()
   /* *************************************************************/
   /* *     Validate Warehouse code using the XWHTBL table. If   **/
   /* *     found, move the warehouse description to screen.     **/
   /* *************************************************************/

   /* IF CL0WM001.XWHCD EQ 0                 (CL464v cwh 6-20-89)*/
    /* MOVE CLAREC.XWHCD TO CL0WM001.XWHCD;*/
   /* END ;*/
  if (KL0WM001.XWHCD in XWHTBL.XWHCD) /* is warehouse in table*/
    KL0WM001.XWHABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* yes move desc.*/
  else /* not in table, error*/
    KL0WM001.XWHABRV = " ";
    converseLib.validationFailed(400); /* warehouse invalid*/
    set KL0WM001.XWHCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end
end // end KL0WS5F

// Validate Factory Code
Function KL0WS5G()
   /* *************************************************************/
   /* *     Validate factory code to the DB2 table VFCTY001. If  **/
   /* *     ok, move factory description to screen.              **/
   /* *************************************************************/

    /* Maintenance History:*/
    /* 02-22-90 CHELLM Renamed PD1.. items as FY1.. items.*/
             /* Replaced DWPROD.VFCTY001 with DFCTY.VFCTY001.*/
             /* Replaced IO0870 with IO2810.*/


  if (KL0WM001.FY1FCTYC != " ")
    KL0WM001.FY1FCTNM = " "; /* space out desc.*/
    FY1REC.XGPCD = CLAREC.XGPCD; /* (02-22-90)*/
    FY1REC.FY1FCTYC = KL0WM001.FY1FCTYC;
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* try and find it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found it, move in name*/
      KL0WM001.FY1FCTNM = FY1REC.FY1FCTNM;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not on file*/
        converseLib.validationFailed(401); /* factory code invalid*/
        set KL0WM001.FY1FCTYC cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else /* we have a bad db2 error*/
        TA1REC.TA1LOCAT[2] = "CL0WS5G";
        TA1REC.TA1DBASE = "DFCTY";
        TA1REC.TA1TBLVU = "VFCTY001";
        XPCL010(); /* abort application*/
      end
    end
  end
end // end KL0WS5G

// Validate Ship VIA
Function KL0WS5H()
   /* *************************************************************/
   /* *     Validate ship via (carrier code) using the VCARR001  **/
   /* *     DB2 table.  If valid, move description to screen.    **/
   /* *************************************************************/

  if (KL0WM001.TF1CARCD == " ") /* user has not entered anything*/
    converseLib.validationFailed(402); /* carrier code required*/
    set KL0WM001.TF1CARCD cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  else
    TF1REC.TF1CARCD = KL0WM001.TF1CARCD;
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* try and find it*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found it*/
      if (TF1REC.XXXSTAT == "A")
        KL0WM001.TF1CARNM = TF1REC.TF1CARNM; /* move desc.*/
      else
        KL0WM001.TF1CARNM = " ";
        converseLib.validationFailed(403); /* carrier code invalid*/
        set KL0WM001.TF1CARCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* record NOT found*/
        KL0WM001.TF1CARNM = " ";
        converseLib.validationFailed(403); /* carrier code invalid*/
        set KL0WM001.TF1CARCD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      else /* we have a fatal db2 error*/
        TA1REC.TA1LOCAT[2] = "CL0WS5H";
        TA1REC.TA1DBASE = "DPICK";
        TA1REC.TA1TBLVU = "VCARR001";
        XPCL010(); /* so abort program*/
      end
    end
  end
end // end KL0WS5H

// Validate Pro Number
Function KL0WS5I()
   /* *************************************************************/
   /* *     'Validate' Pro number (No Validation currently)      **/
   /* *************************************************************/
end // end KL0WS5I

// Validate B/L Number
Function KL0WS5J()
   /* *************************************************************/
   /* *     Validate B/L number. There is no file for validation **/
   /* *     so we just check for a non-zero number.              **/
   /* *************************************************************/

  if (KL0WM001.PK1BLLAD == 0) /* nothing entered*/
    if (TF1REC.TF1CRQFL == "N") /* if ship change not req. b/l is*/
      if (TF1REC.XXXSTAT == "A")
        converseLib.validationFailed(405); /* bill of lading required*/
        set KL0WM001.PK1BLLAD cursor, modified, bold;
        CLXREC.CLXERRF = "Y";
      end
    end
  end
end // end KL0WS5J

// Validate number of containers
Function KL0WS5K()
   /* *************************************************************/
   /* *     Validate the number of containers. Field is required **/
   /* *     and should be non-zero.                              **/
   /* *************************************************************/

  if (KL0WM001.CLENBRCT == 0) /* nothing entered*/
    converseLib.validationFailed(406); /* number of containers required*/
    set KL0WM001.CLENBRCT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end
end // end KL0WS5K

// Validate Weight
Function KL0WS5L()
   /* *************************************************************/
   /* *     Validate weight entered.  Field is required and      **/
   /* *     should be non-zero.                                  **/
   /* *************************************************************/

  if (KL0WM001.CLHWGT == 0) /* nothing entered*/
    converseLib.validationFailed(407); /* ship weight required*/
    set KL0WM001.CLHWGT cursor, modified, bold;
    CLXREC.CLXERRF = "Y";
  end
end // end KL0WS5L

// Validate Shipping Charges
Function KL0WS5M()
   /* *************************************************************/
   /* *     Validate shipping charges. Shipping charges are      **/
   /* *     required if the TF1CRQFL flag is Y.                  **/
   /* *************************************************************/

  if (KL0WM001.CLHSHPCG == 0) /* nothing entered*/
    if (TF1REC.TF1CRQFL == "Y") /* ship charge req. for this carrier*/
      converseLib.validationFailed(404); /* ship charges required*/
      set KL0WM001.CLHSHPCG cursor, modified, bold;
      CLXREC.CLXERRF = "Y";
    end
  end
end // end KL0WS5M

// Get Claim Memo Record
Function KL0WS5N()
   /* ************************************************************/
   /* *     This routine will try and locate the claim memo     **/
   /* *     record. It will also validate the sequence number   **/
   /* *     and determine if the program should be in change    **/
   /* *     or inquiry mode.                                    **/

   /* ************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 02-22-90  CHELLM  Renamed PD1.. items as FY1.. items.   **/
   /* * 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1  **/
   /* ************************************************************/


   /* ************************************************************/

  set CLHREC empty;
  if (CL0WWIQU == "I" /* if user in inquiry*/
   || CL0WWINQ == "Y") /* or in inquiry only mode*/
    if (KL0WM001.CLHSEQNB != 0) /* user has entered something*/
      if (KL0WM001.CLHSEQNB > CLAREC.CLACSQNB) /* cant be greater*/
        VAGen_EZEMSG = "INVALID CLAIM SEQUENCE NUMBER";
        CLXREC.CLXERRF = "Y"; /* set error flag*/
        set KL0WM001.CLHSEQNB cursor, modified, bold;
        return;
      else
        if (KL0WM001.CLHSEQNB == CLAREC.CLACSQNB
         && CLAREC.YCSCD1 == "CMP")
          VAGen_EZEMSG = "INVALID CLAIM SEQUENCE NUMBER";
          CLXREC.CLXERRF = "Y"; /* set error flag*/
          set KL0WM001.CLHSEQNB cursor, modified, bold;
          return;
        else
          CLHREC.CLHSEQNB = KL0WM001.CLHSEQNB;
        end
      end
    else
      if (CLAREC.CLACSQNB == 1)
        CLHREC.CLHSEQNB = CLAREC.CLACSQNB; /* use current seq. nbr*/
      else
        CLHREC.CLHSEQNB = CLAREC.CLACSQNB - 1;
      end
    end
  end

  if (CL0WWINQ != "Y") /* if in update mode*/
    if (KL0WM001.CLHSEQNB != 0) /* user has entered something*/
      if (KL0WM001.CLHSEQNB > CLAREC.CLACSQNB) /* cant be greater*/
        VAGen_EZEMSG = "INVALID CLAIM SEQUENCE NUMBER";
        CLXREC.CLXERRF = "Y"; /* set error flag*/
        set KL0WM001.CLHSEQNB cursor, modified, bold;
        return;
      else
        CLHREC.CLHSEQNB = KL0WM001.CLHSEQNB;
      end
    else
      CLHREC.CLHSEQNB = CLAREC.CLACSQNB; /* use current seq. nbr*/
    end
  end
  KL0WM001.CLHSEQNB = CLHREC.CLHSEQNB; /* move claim seq. number*/
  CLHREC.CLACLMNB = KL0WM001.CLACLMNB; /* move claim number*/
  call "IO1290" ("SA", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* try and find memo record*/
  if (SQLCA.VAGen_SQLCODE == 100) /* memo not found*/
    if (CL0WWIQU == "I" /* user in inquiry*/
     || CL0WWINQ == "Y") /* or inquiry only claim*/
       /* MOVE 'INQUIRY MODE' TO EZEMSG;*/
       /* SET CL0WM001.CLACLMNB CURSOR;*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      if (CLHREC.CLHSHPDT == 0) /* (CL464v CWH 06-12-89)*/
        KL0WM001.XXXSHPDT = " ";
      end
      KL0WM001.XDSCD = CLHREC.XDSCD;
      KL0WM001.XWHCD = CLHREC.XWHCD;
      KL0WM001.FY1FCTYC = CLHREC.FY1FCTYC;
      KL0WM001.TF1CARCD = CLHREC.TF1CARCD;
      KL0WM001.TF2PRONO = CLHREC.TF2PRONO;
      KL0WM001.PK1BLLAD = CLHREC.PK1BLLAD;
      KL0WM001.CLENBRCT = CLHREC.CLENBCRT;
      KL0WM001.CLHWGT = CLHREC.CLHWGT;
      KL0WM001.CLHSHPCG = CLHREC.CLHSHPCG;
      KL0WM001.TF1CARNM = " ";
      KL0WM001.FY1FCTNM = " ";
      KL0WM001.XWHABRV = " ";
      KL0WM001.XDSABRV = " ";
      return;
    end
    CL0WWCNG = "I"; /* set for insert mode*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* we have serious trouble*/
      TA1REC.TA1LOCAT[2] = "CL0WS5N";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLMEM01";
      XPCL010(); /* so abort*/
    end
  end
  if (CLHREC.CLHSHPDT != 0) /* (CL464v CWH 6-12-89)*/
    CLXREC.XXXWCYMD = CLHREC.CLHSHPDT;
    /* ------------------- y2k in being  ---------------*/
    CLXREC.XXXFLYY = CLXREC.XXXWYY;
    CLXREC.XXXSEP5 = "-";
    CLXREC.XXXFLMM = CLXREC.XXXWMM;
    CLXREC.XXXSEP6 = "-";
    CLXREC.XXXFLDD = CLXREC.XXXWDD;
    KL0WM001.XXXSHPDT = CLXREC.XXXFLDT;
    /* ------------------- y2k in end    ---------------*/
    /* ------------------- y2k out begin ---------------*/
    /* MOVE CLXREC.XXXWYMD TO KL0WM001.XXXSHPDT;*/
    /* ------------------- y2k out end   ---------------*/
    KL0WM001.XDSCD = CLHREC.XDSCD;
    KL0WM001.XWHCD = CLHREC.XWHCD;
    KL0WM001.FY1FCTYC = CLHREC.FY1FCTYC;
    KL0WM001.TF1CARCD = CLHREC.TF1CARCD;
    KL0WM001.TF2PRONO = CLHREC.TF2PRONO;
    KL0WM001.PK1BLLAD = CLHREC.PK1BLLAD;
    KL0WM001.CLENBRCT = CLHREC.CLENBCRT;
    KL0WM001.CLHWGT = CLHREC.CLHWGT;
    KL0WM001.CLHSHPCG = CLHREC.CLHSHPCG;
  else
    KL0WM001.XXXSHPDT = " ";
  end
  if (CLHREC.CLHMEMNB != 0 /* cant change this one*/
   || CL0WWIQU == "Y")     /* inquiry user*/
    CL0WWINQ = "Y"; /* so set inquiry mode on*/
  else
    CL0WWCNG = "C"; /* else set change mode on*/
  end
end // end KL0WS5N

// Scan XREF table for order
Function KL0WS6B()
   /* *************************************************************/
   /* *     Scan CLB table to see if we can file an order        **/
   /* *     number for the associated claim number entered by    **/
   /* *     the user.  If we find one, we will move the order    **/
   /* *     number to the screen for them to see.                **/
   /* *                                                          **/
   /* *************************************************************/

  KL0WM001.OP1CUOID = 0;
  KL0WM001.OP1NORID = 0;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "Y";
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* try and open set*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "CL0WS6B";
    TA1REC.TA1LOCAT[3] = "OPEN";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end

  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* try for 1st record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0WM001.OP1CUOID = CLBREC.OP1CUOID;
    KL0WM001.OP1NORID = CLBREC.OP1NORID;
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1LOCAT[2] = "CL0WS6B";
      TA1REC.TA1LOCAT[3] = "FETCH";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010();
    end
  end

  call "IO1180" ("C3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/

end // end KL0WS6B

// Update Claim Header
Function KL0WS7B()
   /* *************************************************************/
   /* *     This statement group will update the claim header    **/
   /* *     with the value of the entered/updated shipping       **/
   /* *     charges.                                             **/
   /* *************************************************************/

  CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  CLAREC.CLAESTVL = CLAREC.CLAESTVL + CLHREC.CLHSHPCG;

  call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* now replace the record*/
  if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
    TA1REC.TA1LOCAT[2] = "CL0WS7B";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLHDR01";
    XPCL010();
  end
end // end KL0WS7B

// Add/Update Memo Record
Function KL0WS7D()
   /* *************************************************************/
   /* *     This statement group will either change or insert    **/
   /* *     or delete the claim memo record.                     **/
   /* *                                                          **/
   /* *************************************************************/

  if (CL0WWCNG == "I") /* we are in insert mode*/
    set CLHREC empty; /* so clear out record*/
  else
    /* now subtract the old shipping charge value*/
    /* from the claim header (will add back in later)*/
    CLAREC.CLAESTVL = CLAREC.CLAESTVL - CLHREC.CLHSHPCG;
  end

  if (KL0WM001.CL0WMDFG == "Y") /* user wants to delete*/
    call "IO1290" ("D ", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* so try it*/
    if (sysVar.sqlData.sqlcode != 0) /* bad error*/
      TA1REC.TA1LOCAT[2] = "CL0WS7D";
      TA1REC.TA1LOCAT[3] = "DELETE";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLMEM01";
      XPCL010();
    end
    CLHREC.CLHSHPCG = 0; /* so we don't add back to header*/
    return;
  end

  CLHREC.CLACLMNB = CLAREC.CLACLMNB;
  CLHREC.CLHSEQNB = CLAREC.CLACSQNB;
  CLHREC.TF1CARCD = KL0WM001.TF1CARCD;
  CLHREC.PK1BLLAD = KL0WM001.PK1BLLAD;
  CLHREC.TF2PRONO = KL0WM001.TF2PRONO;
  CLHREC.XDSCD = KL0WM001.XDSCD;
  CLHREC.FY1FCTYC = KL0WM001.FY1FCTYC;
  CLHREC.XWHCD = KL0WM001.XWHCD;
  CLHREC.CLHSHPCG = KL0WM001.CLHSHPCG;
  CLHREC.CLHWGT = KL0WM001.CLHWGT;
  CLHREC.CLHSHPDT = CL0WW01.CLHSHPDT;
  CLHREC.CLENBCRT = KL0WM001.CLENBRCT;
  CLHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  if (CL0WWCNG == "C") /* in change mode*/
    call "IO1290" ("U ", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* so try it*/
  else
    call "IO1290" ("A ", SQLCA, CLHREC) {isNoRefresh = yes, isExternal = yes}; /* so try it*/
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* bad error*/
    TA1REC.TA1LOCAT[2] = "CL0WS7D";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLMEM01";
    XPCL010();
  end
end // end KL0WS7D

//*** RECORD=CL0WW01 ****
// Working Storage Record for program CL0W
// 
// This record is used for working storage fields used only
// by program CL0W.
// 
// ***********************
Record CL0WW01 type basicRecord
  10 CL0WWINQ CL0WWINQ ; 
  10 CL0WWIQU CL0WWIQU ; 
  10 CL0WWCNG CL0WWCNG ; 
  10 CL0WWUPD CL0WWUPD ; 
  10 CL0WWSTT CL0WWSTT ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 CLHSHPDT CLHSHPDT ; 
  10 CL0WWOEC CL0WWOEC ; 
end // end CL0WW01

// Change/Insert Memo Rec(C/I)
DataItem CL0WWCNG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry Mode(Y/N)
DataItem CL0WWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry User(Y/N)
DataItem CL0WWIQU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// open exceptions counter
DataItem CL0WWOEC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second time thru on chg(Y/N)
DataItem CL0WWSTT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ok to Update(Y/N)
DataItem CL0WWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

