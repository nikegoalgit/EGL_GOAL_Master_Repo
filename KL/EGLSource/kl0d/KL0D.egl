package kl0d;

import corpcom1.*;
import corpcom3.XPCL002;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpy2.YATTBL;
import corpy2.YUATBL;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=KL0D ****
// ************************************************************
// Customer last name retrieval and use for CL0E
// 
// overview: CL0B sends last name. CL0D uses the name to get
//          set of records with that last name. The claim num-
//          ber is used to retrieve address information and for
//          the claim status information. The map shows all the
//          records for that last name. The user may choose one
//          claim number to be used in the CL0E application.
// 
// maintenance history:
// date      by      rev description of change
// --------  ---     --  --------------------------------------
// 04-10-87  lhughe   0  create model for claims appl using
//                       two screens.
// 10-08-87  jjudki   1  Retrieve last names. Use claims nbrs
//                       to retrieve address and claim status
//                       information.
// 12-14-88  mhalst      Correct name & address look-up to use
//                       return to instead of shipto.
// 01-31-89  JWOOD       ADDED NONCSP OPTION TO CALLS
// 01-31-89  JWOOD       ADDED XSSEGTR LOGIC
// 05-19-89  bcourt      DB2 structure change CLAREC
// 08-08-91  wjohns      renamed application and commarea
//                        referrences to renamed claims appls.
// 09-16-91  twatso      renamed procs, sgrps from cl to kl
// 01-13-92  sgorga      set ta1rec empty - kl0d001.
// ************************************************************
// *********************
Program KL0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0DW02 CL0DW02; // record
  CLAREC CLAREC; // record
  CLFREC CLFREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YUATBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use KL0DM.KL0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0D000: KL0D000();
    ;
    ;
    exit program;
    ;
    ;
    ;
    KL0D001: KL0D001();
    KL0D050: KL0D050();
    KL0D100: KL0D100();
    KL0D110: KL0D110();
    KL0D120: KL0D120();
  end // end main
end // end KL0D

// application main logic
Function KL0D000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *   xclentry checks to ensure that the claim header has   **/
   /* *         been flagged as "in use" if this application    **/
   /* *         does updates.                                   **/
   /* ************************************************************/
  ;
  KL0D001(); /* initilize the application*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0D100(); /* converse screen m001*/
  end
  ;
   /* in case of trouble, transfer to cl0a*/
  CLWREC.CLWEZMNO = converseVar.validationMsgNum;
  COMMAREA.CAUSERA = CLWREC.CLWGROUP;
  COMMAREA.CATOAP = "KL0A";
  XSEXIT();
  ;
end // end KL0D000

// initialize application
Function KL0D001()
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* *  describe what happens in this process                  **/
   /* ************************************************************/
   /* MAINTENANCE HISTORY                                  **/
   /* 01/13/92  sgorga  Set ta1rec to empty.                    **/
   /* **/
   /* ************************************************************/
  ;
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
   /* TEMPD    ;******** TEMP CODE FOR TESTING *************/
  ;
  XSENTRY(); /* check entered thru main menu*/
  ;
  XSSEGTR(); /* SET SEGMENTED TRANSACTION ID*/
  ;
  XPCL011(); /* claims entry module*/
  ;
  ;
  set TA1REC empty;
  set CLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  ;
  ;
     /* Initialize your working-storage(s),*/
     /* e.g. constants, messages, '-' for dates.*/
  ;
  CLWREC.CLWMAPFM = "KL0DM001";
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to yes*/
  CLXREC.CLXEOAF = "N"; /* set application-done-switch to 'no'*/
  KL0DM001.XXXRVNBR = "0";
  KL0DM001.XXXCURDT = VGVar.currentShortGregorianDate;
  CL0DW02.CL0DWIDX = CLWREC.CLWCLIDX; /* save starting index*/
  if (CLWREC.CLWEZMNO != 0) /* we have a message*/
    if (CLWREC.CLWEZMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(CLWREC.CLWEZMNO);
    end /* move in message*/
    CLWREC.CLWEZMNO = 0; /* and zero it*/
  end
  ;
  if (CLWREC.CLWCLIDX == 0)
    VAGen_EZEMSG = "ZERO CLIDX - SETTING TO 1";
    CLWREC.CLWCLIDX = 1;
  else
    if (CLWREC.CLWCLIDX < 0)
      VAGen_EZEMSG = "NEGATIVE CLIDX - SETTING TO 1";
      CLWREC.CLWCLIDX = 1;
    end
  end
end // end KL0D001

// main cl0% branch control
Function KL0D050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0D050"; /* set current process name*/
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  ;
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0%m001*/
    while (CLXREC.CLXEOSF == "N") /* while not end-of-screen*/
      KL0D100(); /* process screen cl0%m001*/
    end
  else
    TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
    XPCL010();
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0%050...*/
       /* else*/
         /* the perform will auto return to cl0%000.*/
  ;
  ;
  ;
end // end KL0D050

// converse screen m001
Function KL0D100()
   /* ************************************************************/
   /* *    process screen cl0dm001                              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0D100"; /* set current process name*/
  ;
  if (CLXREC.CLXBLDSC == "Y"
   && CLXREC.CLXERRF != "Y")
    KL0D101(); /* build screen because new record*/
  end
  ;
  ;
  converse KL0DM001 ;
  ;
  KL0DM001.XXXMSG = " "; /* clear error msg on map*/
  CLXREC.CLXMSG = " "; /* set non-ezemno error message to*/
                                   /* spaces*/
  CLXREC.CLXERRF = "N"; /* re-set error flag*/
  ;
  KL0D110(); /* handle any special entries*/
    /* may exit appl from this process*/
  ;
  if (CLXREC.CLXEOSF == "Y"
   || CLXREC.CLXEOAF == "Y"
   || CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (KL0DM001.CL0DMSEL[1] == "A") /* user wants them all*/
    KL0DM001.CL0DMSEL[1] = "S";
    CLXREC.CLXITMX = CLWREC.CLWCLIDX;
    while (CLXREC.CLXITMX <= CLWREC.CLWMXIDX)
      CLWREC.CLWSELCD[CLXITMX] = "S";
      CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
    end
  end
  ;
  CL0DW02.CL0DW2SC = " "; /* check selection field*/
  CL0DW02.CL0DW2SF = "N"; /* no claim selection made*/
  CLXREC.CLXITMX = 1;
  CL0DW02.CL0DWIDX = CLWREC.CLWCLIDX;
  while (CLXREC.CLXITMX < 16) /* edit selection field on map*/
    CL0DW02.CL0DW2SC = KL0DM001.CL0DMSEL[CLXITMX];
    if (CL0DW02.CL0DW2SC == "S")
      CLWREC.CLWSELCD[CL0DWIDX] = "S";
      if (CL0DW02.CL0DW2SF != "Y")
        CL0DW02.CL0DW2SF = "Y";
        CLWREC.CLWCLIDX = CL0DW02.CL0DWIDX;
      end
    else
      if (CL0DW02.CL0DW2SC != "S"
       && CL0DW02.CL0DW2SC != " "
       && CL0DW02.CL0DW2SC != "V")
        CLXREC.CLXERRF = "Y";
        KL0DM001.XXXMSG = "PLEASE ENTER \"S\" ONLY";
        ;
      end
    end
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
    CL0DW02.CL0DWIDX = CL0DW02.CL0DWIDX + 1;
  end
  ;
      /* determine next action*/
  ;
  if (CLXREC.CLXERRF == "Y") /* if screen has errors*/
     /* MOVE 242 TO EZEMNO;*/
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (CL0DW02.CL0DW2SF == "Y")
      COMMAREA.CATOAP = "KL0E";
      set CLAREC empty;
      CLAREC.CLACLMNB = CLWREC.CLWCLMNB[CLWCLIDX];
      call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* get claim header*/
    else /* no selection, transfer to cl0b*/
      COMMAREA.CATOAP = "KL0B"; /* claim inquiry screen*/
    end
    XPCL002();
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll forward*/
    if (CLWREC.CLWCLIDX == 1) /* at beginning of table*/
      converseLib.validationFailed(7); /* at top of data*/
      CLXREC.CLXERRF = "Y";
      return;
    end
    CLWREC.CLWCLIDX = CLWREC.CLWCLIDX - 15;
    if (CLWREC.CLWCLIDX < 1)
      CLWREC.CLWCLIDX = 1;
    end
    CLXREC.CLXBLDSC = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    CL0DW02.CL0DWIDX = CLWREC.CLWCLIDX + 15;
    if (CL0DW02.CL0DWIDX > CLWREC.CLWMXIDX)
      converseLib.validationFailed(3); /* at end of table*/
      CLXREC.CLXERRF = "Y";
      return;
    end
    CLWREC.CLWCLIDX = CL0DW02.CL0DWIDX;
    CLXREC.CLXBLDSC = "Y";
    return;
  end
  ;
  if (KL0DM001.CATOAP != " ") /* if fastpath option entered*/
    if (CLXREC.CLXERRF == "Y") /* if had errors*/
      return;
    else
      COMMAREA.CATOAPP = "    ";
      CLXREC.CLXEDITF = "N"; /* no more editing*/
      CLXREC.CLXEOSF = "Y"; /* end of screen*/
      CLXREC.CLXEOAF = "Y"; /* end of application*/
    end
    return;
  end
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  CLXREC.CLXEDITF = "N"; /* do not edit map, just re-paint it*/
  ;
end // end KL0D100

// initialize screen cl0%m005
Function KL0D101()
   /* ************************************************************/
   /* *        this process initializes screen cl0%m005         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0D101"; /* set current process name*/
  ;
  ;
  CLXREC.CLXITMX = 1;
  while (CLXREC.CLXITMX < 16) /* clear all fields on map*/
    set KL0DM001.CL0DMSEL[CLXITMX] initialAttributes;
    KL0DM001.CLACLMNB[CLXITMX] = 0;
    KL0DM001.CLFADNM[CLXITMX] = " ";
    KL0DM001.XSTCD[CLXITMX] = " ";
    KL0DM001.XXXCITY[CLXITMX] = " ";
    KL0DM001.YCSCD[CLXITMX] = " ";
    KL0DM001.CLASTTDT[CLXITMX] = 0;
    CLXREC.CLXITMX = CLXREC.CLXITMX + 1;
  end
  ;
  CL0DW02.CL0DWINX = 1;
  CL0DW02.CL0DWIDX = CLWREC.CLWCLIDX;
  while (CL0DW02.CL0DWINX < 16)
    KL0DS39(); /* move fields to map*/
    CL0DW02.CL0DWINX = CL0DW02.CL0DWINX + 1;
    CL0DW02.CL0DWIDX = CL0DW02.CL0DWIDX + 1;
  end
  ;
  CLXREC.CLXBLDSC = "N";
  ;
end // end KL0D101

// validate screen m001 pf keys
Function KL0D110()
   /* ************************************************************/
   /* *  validate pf keys                                       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0D110"; /* set current process name*/
  ;
  ;
  if (converseVar.eventKey is enter) /* normal 'enter'*/
    if (KL0DM001.CATOAP != " ") /* if fastpath option entered,*/
      COMMAREA.CATOAP = KL0DM001.CATOAP;
      COMMAREA.CAITEM = KL0DM001.CAITEM;
      XPCL002(); /* try to get there*/
      KL0DM001.XXXMSG = COMMAREA.CAMSG;
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1) /* 'help'*/
    XSPF1();
    KL0DM001.XXXMSG = COMMAREA.CAMSG; /* results of bad pass*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "KL0A"; /* go to claims menu*/
    XPCL002(); /* try to get there*/
    KL0DM001.XXXMSG = COMMAREA.CAMSG;
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    KL0DM001.XXXMSG = COMMAREA.CAMSG; /* results of bad pass*/
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "KL0B"; /* go to claims menu*/
    XPCL002(); /* try to get there*/
    KL0DM001.XXXMSG = COMMAREA.CAMSG;
    CLXREC.CLXERRF = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* page back*/
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* page forward*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    converseLib.validationFailed(211);
    CLXREC.CLXERRF = "Y";
  else
    converseLib.validationFailed(2); /* invalid pf key*/
    CLXREC.CLXERRF = "Y";
  end
  ;
end // end KL0D110

// process screen m001 entries
Function KL0D120()
   /* ************************************************************/
   /* *     this process handles all edits of screen fields,    **/
   /* *          and any subsequent updating, required by       **/
   /* *          entries into screen cl0%m001                   **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0D120"; /* set current process name*/
  ;
  ;
     /* individual field edits use this form:*/
  ;
   /* if map.field is modified*/
     /* cl0%s..                            ; edit field 1*/
   /* end*/
  ;
   /* if map.field is modified*/
     /* cl0%s..                            ; edit field 2*/
   /* end*/
  ;
  ;
  ;
    /* cl0%s.. statement group uses this form:*/
  ;
    /* if field is in error*/
      /* move ## to ezemno             ; describe message here*/
      /* set map.field cursor,modified,bright*/
      /* move 'y' to clxrec.clxerrf*/
    /* else*/
      /* set map.field defined         ; reset color*/
    /* end*/
  ;
  ;
  ;
    /* do individual field edits first, then*/
      /* if clxrec.clxerrf = 'n'       ;if no errors on map input*/
        /* do field combination edits, if applicable*/
        /* if user entered data to select new record for display*/
          /* move 'y' to clxrec.clxbldsc ;flag to re-build screen*/
  ;
  ;
    /* note - turn on the update flag when the screen*/
    /* is error-free.*/
  ;
    /* note - when processing multiple lines, each line*/
    /* needs an update flag.  if the map has a 'select' column,*/
    /* use this by changing the 's' to a 'u' for update.*/
    /* the update routine will change the 'u' to a 'v' for*/
    /* viewed, so the user knows he has already seen the line.*/
  ;
  ;
  ;
end // end KL0D120

// move fields to map
Function KL0DS39()
  ;
  if (CL0DW02.CL0DWIDX > CLWREC.CLWMXIDX) /* at end of table*/
    KL0DM001.CL0DMSEL[CL0DWINX] = " ";
    set KL0DM001.CL0DMSEL[CL0DWINX] skip;
  else
    KL0DM001.CL0DMSEL[CL0DWINX] = CLWREC.CLWSELCD[CL0DWIDX];
    KL0DM001.CLACLMNB[CL0DWINX] = CLWREC.CLWCLMNB[CL0DWIDX];
    ;
    CLAREC.CLACLMNB = CLWREC.CLWCLMNB[CL0DWIDX];
    call "IO1160" ("S ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* claim header*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0DM001.YCSCD[CL0DWINX] = CLAREC.YCSCD1;
      CLXREC.XXXCDTE = CLAREC.CLASTTDT;
      KL0DM001.CLASTTDT[CL0DWINX] = CLXREC.XXXCYMD;
    end
    CLFREC.CLACLMNB = CLWREC.CLWCLMNB[CL0DWIDX];
    if (CLAREC.CLARTNFF == "E") /* have return to*/
      CLFREC.CLFADTYP = "R";
    else
      CLFREC.CLFADTYP = "S";
    end
    call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get it*/
    if (SQLCA.VAGen_SQLCODE == 100) /* can't find shipto*/
      CLFREC.CLFADTYP = "B"; /* so try for billto*/
      call "IO1250" ("S ", SQLCA, CLFREC) {isNoRefresh = yes, isExternal = yes}; /* get it*/
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      KL0DM001.CLFADNM[CL0DWINX] = CLFREC.CLFADNM;
      KL0DM001.XSTCD[CL0DWINX] = CLFREC.XSTCD;
      KL0DM001.XXXCITY[CL0DWINX] = CLFREC.XXXCITY;
    end
    ;
  end
  ;
end // end KL0DS39

Record CL0DW02 type basicRecord
  5 CL0DW2RL CL0DW2RL ; 
    10 CL0DW2AP CL0DW2AP ; 
    10 CL0DW2CT CL0DW2CT ; 
    10 CL0DW2FC CL0DW2FC ; 
    10 CL0DW2RC CL0DW2RC ; 
  5 CL0DWKEY CL0DWKEY ; 
    10 CL0DWCLN CL0DWCLN ; 
    10 CL0DWLSN CL0DWLSN ; 
  5 CL0DWINX CL0DWINX ; 
  5 CL0DWIDX CL0DWIDX ; 
  5 CL0DWEND CL0DWEND ; 
  5 CL0DWCNT CL0DWCNT ; 
  5 CL0DWHC CL0DWHC ; 
  5 CL0DWFND CL0DWFND ; 
  5 CL0DW2SC CL0DW2SC ; 
  5 CL0DW2SF CL0DW2SF ; 
end // end CL0DW02

// application
DataItem CL0DW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem CL0DW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem CL0DW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem CL0DW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CL0DW2RL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection hold field
DataItem CL0DW2SC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection found flag
DataItem CL0DW2SF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim nbr
DataItem CL0DWCLN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage rec count
DataItem CL0DWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor flag
DataItem CL0DWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found cldrec
DataItem CL0DWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold count
DataItem CL0DWHC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index into clw table
DataItem CL0DWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem CL0DWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table keyfor VCNSMR01
DataItem CL0DWKEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last name
DataItem CL0DWLSN char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

