package kl0o;

import corpcom1.CL6REC;
import corpcom1.CLADBOCL;
import corpcom1.CLADJIND;
import corpcom1.CLAESTVL;
import corpcom1.CLAREC;
import corpcom1.CLBREC;
import corpcom1.CLIADVSQ;
import corpcom1.CLICRDFL;
import corpcom1.CLJRAIND;
import corpcom1.CLJREC;
import corpcom1.CLKAUTHQ;
import corpcom1.CLKCLPRC;
import corpcom1.CLKCRFL;
import corpcom1.CLKNBRSZ;
import corpcom1.CLKPRCFF;
import corpcom1.CLKREC;
import corpcom1.CLKRQTQ;
import corpcom1.CLKWHSXF;
import corpcom1.CLLREC;
import corpcom1.CLMTRTSQ;
import corpcom1.CLNGRPRC;
import corpcom1.CLNNTPRC;
import corpcom1.CLNREC;
import corpcom1.CLNRTSQ;
import corpcom1.CLPDEFQ;
import corpcom1.CLPREC;
import corpcom1.CLRREC;
import corpcom1.CLWREC;
import corpcom1.CLXREC;
import corpcom3.XPCL002;
import corpcom3.XPCL006;
import corpcom3.XPCL010;
import corpcom3.XPCL011;
import corpcom4.XSCLSEX;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.VAGen_SQLCODE;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XBK-BK-SESN-CD;
import corpx1.XDMCD;
import corpx1.XEGCD;
import corpx1.XGPTBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XOTTBL;
import corpx1.XQATBL;
import corpx1.XUMTBL;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpy2.YATTBL;
import corpy2.YCECD;
import corpy2.YCRTBL;
import corpy2.YCSTBL;
import corpy2.YCTTBL;
import corpy2.YCXTBL;
import corpy2.YDSTBL;
import corpy2.YITCD;
import corpy2.YRMTBL;
import corpy2.YUATBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV0REC;
import iv.common.IV3GLNUP;
import iv.common.IV3LNSQ;
import iv.common.IV3NLNUP;
import iv.common.IV3REC;
import iv.common.IV4GUP;
import iv.common.IV4NUP;
import iv.common.IV4REC;
import iv.common.IV4SHPQ;
import iv.common.IVANBLFL;
import iv.common.IVAREC;
import iv.common.IVEREC;
import ku.common.KUCREC;
import ku.common.KUIPRDID;
import op.common.OP-BK-MO;
import op.common.OP-BK-YR;
import op.common.OP2LNINB;
import op.common.OP2PRCVF;
import sp.common.SP1REC;
import sp.common.SP5REC;
import sp.common.SP5SZPR;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY5REC;
import sy.common.SY5SZID;
import sy.common.SY6REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VCUCPX01;
import ww.common.WCU1710;
//*** PROGRAM=KL0O ****
// **********************************************************
// **********************************************************
// **          process return authorization                **
// **                                                      **
// **  date      pgmr    description                       **
// ** --------   ------  --------------------------------- **
// ** 03-17-89   gdecke  add uom warning message, fix misc **
// **                    variances (#230,361,235,339,510,  **
// **                    583). added prologue section.     **
// ** 03-24-89   gdecke  get order type from ivarec instead**
// **                    of iv0rec.                        **
// ** 04-26-89   gdecke  switch from xot to xob for sport/ **
// **                    casual project.                   **
// ** 05-16-89   gdecke  DB2 structure changes:clarec,     **
// **                    kucrec,sycrec.                    **
// ** 07-20-89   bcourt  keep IV0IVCID on 'NC', non-credit,**
// **                    authorized products/sizes.        **
// **                    (into production 8-11-89).        **
// ** 08-01-89   gdecke  DB2 structure changes:clarec,clprec*
// **                    cl2rec,ivarec,sp1rec.             **
// ** 09-14-89   gdecke  io1330 changed to use xum, xqa.   **
// ** 09-22-89   bcourt  remove 5-16 ref to unused tables: **
// **                    X CT, X WH; & recs: CL I, SY 2.   **
// ** 10-20-89   chellm  added XSCLSEX to 133&233  to deflt**
// **                    the RA expiration date.           **
// **                    Added YCXTBL.  See CL502.         **
// ** 01-19-90   chellm  DB2 structure changes regen.      **
// ** 01-22-90   gdecke  #cl792-holiday walk remerch dflts.**
// ** 01-23-90   gchellm #cl722 fix blank rauth-fl when    **
// **                    authorizing via 'AA'.             **
// ** 04-06-90   chellm  DB2 structure changes for april.  **
// **                    (Brand, IVOVR, etc.)
// ** 04-10-90   chellm  added XUM and XQA to the product  **
// **                    key when selecting CL6REC Invoice **
// **                    Price Overrides.                  **
// ** 05-31-90   chellm  added product brand - claim brand **
// **                    mis-match edit.  (cl0oebc)        **
// ** 08-03-90   gdecke  change maximum number of products **
// **                    in cl0ow05 to 500.                **
// ** 08-28-90   chellm  fix bug in product edit and misc  **
// **                    bugs in the screen display after  **
// **                    ERRORED rows are deleted (X'ed)   **
// ** 01-02-91   GDECKE  #CL920,CL974. COLOR/DIMENSION CHGS**
// **  2-16-91   bcourt  remove cl2 rec (VRINSP01) =not used.
// **  3-08-91   bcourt  remove kui rec (VCUSKU01) =not used.
// *  06-14-91   sgorga  DB2 changes.  Replaced KU2REC with
// *                     KUIREC.  Chgd CL0O303, 206, S94.
// *  06-17-91   GDECKE  COPY SOME CL0OW05 FIELDS TO CL0OW04
// *                     TO EXPAND CL0OW05 TO 1000 LINES.
// *  06-20-91   CHELLM  INCREASED WS ITEM CL0OWCN2 TO NUM 4.
// *                     OMITTED SEARCH OF INVOICE FOR LINE
// *                     ITEM NUMBER IF THE PRODUCT WAS
// *                     ENTERED AND HAS PRC FRM FL=P.(CL0OS38)
// *  08-08-91   wjohns  Renamed application and commarea
// *                       referrences to renamed claims appls.
// *  11-07-91   sgorga  Added code to stop users from entering
// *                     'I' in the 'Price From' field unless
// *                     the select code = 'AA','A','C,'S','SA'
// *                     (in screen m001 & m010). Kl0O125, 325.
// *                     Also made change to KL0O127 (see -127
// *                     comments). Added new err msg #696.
// * 01-13-92  sgorga    set ta1rec, ta2rec empty.  kl0o001
// * 03-10-92  GDECKE    MARCH DB2 TABLE CHANGES
// * 04-13-92  twatso    april DB2 TABLE CHANGES
// * 10-28-92  BCOURT  Expand CL0O WINB field on map 1 to hold
//                     full invoice number.  Change map 5 from
//                     entry symbol ':' to display symbol '>'
//                     to match the editing.
//                     Left justify current invc seq # for ease
//                     of data entry, and also max invc seq #
//                     for easier viewing:
//                          Ivc: ______ of> ___
//                              /\         /\
// * 06-03-93  jcarey  Changed kl0osbc to allow side1 brands
// *                   on nike claims. side1 was converted to
// *                   nike as of June, 1993.
// * 10-29-93  GDECKE  Change CLAREC.YCSCD TO CLAREC.YCSCD1
// * 12-01-93  jcarey  Added defaults for remerchandising
// *                   option cl-upc-labl-fl. para kl0os91.
// * 12-15-93  jcarey  Changed code to initialize the return
// *                   authorization issue date. para kl0o133,
// *                   and kl0o233.
// * 03-11-94  BCourt  Rename SY6CSTFL to XQACD.  DB2 tbl chng.
// *             Add country & currency defaults in KL0OS35.
// * 12-13-95  kshaw   If D03 do not update claim header in
// *                   kl0o134 and kl0o234.
// * 12-13-95  kshaw   If P03 do not update claim header in
// *                   kl0o134 and kl0o234.
// * 06-06-97  kshaw   added ezetst index to xxxstat in
// *                   kl0o303 and kl0o203
// * 11-07-97  RCHAUV  CHANGES FORM CLAIM REASON CODE CONVERSIO
// * 03-24-00  GNATHE  ADDED PARA KL0O139 FOR CREDIT FUNCTION.
// * 10-25-00  GDECKE  REMOVE TEST FOR PREPACK COMPONENT
// * 07-19-01  DSINHA  Bypass price look up on product file
// *                   and default all returns to zero price.
// * 11-28-01  SVIJAY  RECOMPILED DUE TO CHANGES IN CLPREC.
// ************************************************************
// *********************
Program KL0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CL0OW01 CL0OW01; // record
  CL0OW03 CL0OW03; // record
  CL0OW04 CL0OW04; // record
  CL0OW05 CL0OW05; // record
  CL0OW06 CL0OW06; // record
  CL0OW07 CL0OW07; // record
  CL0OW08 CL0OW08; // record
  CL6REC CL6REC; // record
  CLAREC CLAREC; // record
  CLBREC CLBREC; // record
  CLJREC CLJREC; // record
  CLKREC CLKREC; // record
  CLLREC CLLREC; // record
  CLNREC CLNREC; // record
  CLPREC CLPREC; // record
  CLRREC CLRREC; // record
  CLWREC CLWREC; // record
  CLXREC CLXREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IV3REC IV3REC; // record
  IV4REC IV4REC; // record
  IVAREC IVAREC; // record
  IVEREC IVEREC; // record
  KUCREC KUCREC; // record
  SP1REC SP1REC; // record
  SP5REC SP5REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VCUCPX01 VCUCPX01; // record
  WCU1710 WCU1710; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use YATTBL {deleteAfterUse = yes}; // table
  use YCRTBL {deleteAfterUse = yes}; // table
  use YCSTBL {deleteAfterUse = yes}; // table
  use YCXTBL {deleteAfterUse = yes}; // table
  use YCTTBL {deleteAfterUse = yes}; // table
  use YDSTBL {deleteAfterUse = yes}; // table
  use YRMTBL {deleteAfterUse = yes}; // table
  use YUATBL {deleteAfterUse = yes}; // table
  use KL0OM.KL0OM001,  // forms
      KL0OM.KL0OM005, 
      KL0OM.KL0OM010
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KL0O000: KL0O000();
    exit program;
    KL0O001: KL0O001();
    KL0O050: KL0O050();
    KL0O100: KL0O100();
    KL0O160: KL0O160();
    KL0O110: KL0O110();
    KL0O120: KL0O120();
    KL0O130: KL0O130();
    KL0O140: KL0O140();
    KL0O200: KL0O200();
    KL0O201: KL0O201();
    KL0O210: KL0O210();
    KL0O220: KL0O220();
    KL0O230: KL0O230();
    KL0O240: KL0O240();
    KL0O300: KL0O300();
    KL0O301: KL0O301();
    KL0O310: KL0O310();
    KL0O320: KL0O320();
    KL0O330: KL0O330();
    KL0O340: KL0O340();
  end // end main
end // end KL0O

// main flow
Function KL0O000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  COMMAREA.CACURRAP = "KL0O";
  CLXREC.CLXCPROC = "CL0O000";
  ;
  KL0O001(); /* initilize the application*/
  ;
  CLXREC.CLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (CLXREC.CLXEOAF == "N") /* while not end-of-aplication*/
    KL0O050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CATOAP = "KL0A";
  XPCL002();
end // end KL0O000

// init claims menu processing
Function KL0O001()
   /* ****************************************************/
    /* when finished with this process, the following will*/
    /* have been read for later use:*/
      /* cllrec,kucrec,iverec,cljrec*/
   /* *************************************************************/
   /* M A I N T E N A N C E    H I S T O R Y             **/
   /* 2-16-91  bcourt  remove cl2rec.                           **/
   /* 06-17-91  GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES       **/
   /* 01-13-92  sgorga  Set ta1rec, ta2rec empty.                **/
   /* 03-13-92  GDECKE   MARCH DB2 TABLE CHANGES.                **/
   /* 10-29-93  GDECKE   CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
    /* TEMP001;*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  XPCL011(); /* claims entry check*/
  ;
  set CLJREC empty;
  set CLXREC empty; /* clear common working storage*/
  set KUCREC empty;
  set IVEREC empty;
  set CL0OW01 empty;
  set CL0OW03 empty;
  set CL0OW04 empty;
  set CL0OW05 empty;
  set CL0OW06 empty;
  set CL0OW07 empty;
  set CL0OW08 empty; /* GDECKE  03-13-92*/
  set TA1REC empty;
  set TA2REC empty;
  ;
   /* set inquiry only flag*/
  ;
  CL0OW01.CL0OWINQ = "N";
  if (CLWREC.CLWACTIV == "I")
    CL0OW01.CL0OWINQ = "Y";
  end
  if (CLAREC.YCSCD1 in YCSTBL.YCSCD
   && YCSTBL.YCSAINPF[sysVar.arrayIndex] == "N")
    CL0OW01.CL0OWINQ = "Y";
  end
  if (COMMAREA.CAALVL[1] == "Y"
   || COMMAREA.CAALVL[3] == "Y"
   || COMMAREA.CACLVL[1] == "Y"
   || COMMAREA.CACLVL[3] == "Y")
     /* next sentence*/
  else
    CL0OW01.CL0OWINQ = "Y";
  end
  if (CLAREC.CLAWSENF == "Y" /* if claim is worksheet-entered*/
   || CLWREC.CLWMNOPT == 7   
   || CLWREC.CLWMNOPT == 8   
   || CLWREC.CLWMNOPT == 9) 
    CL0OW01.CL0OWINQ = "Y";
  end
  ;
  ;
  ;
  ;
  CLXREC.CLXSNAME[1] = "KL0OM001"; /* init screens used in this appl*/
  CLXREC.CLXSNAME[2] = "KL0OM005"; /* summary descriptions*/
  CLXREC.CLXSNAME[3] = "KL0OM010"; /* size detail*/
  CLXREC.CLXCSCRN = "KL0OM001"; /* start with summary*/
  CL0OW01.CL0OWAAF = "N"; /* init authorize all flag*/
  ;
  ;
     /* *******************/
     /* set map id's, date*/
     /* *******************/
  ;
  KL0OM001.XXXERRID = "KL0O100"; /* map process name*/
  KL0OM005.XXXERRID = "KL0O200";
  KL0OM010.XXXERRID = "KL0O300";
  ;
  CL0OW01.CL0OWMAX = 1000; /* max lines in cl0ow05 table*/
  CL0OW01.CL0OWCIX = 1; /* m005 default cursor position*/
  ;
  KL0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  KL0OM005.XXXCURDT = VGVar.currentShortGregorianDate;
  KL0OM010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL0O002(); /* get all invoices associated with*/
                                   /* claim*/
  ;
  KL0O003(); /* select the ra item indicator*/
  ;
  KL0O004(); /* determine if at least one return insp has been comp*/
  ;
  KL0O005(); /* get customer sku indicator*/
  ;
end // end KL0O001

// get invoices assoc with claim
Function KL0O002()
   /* *************************************************************/
   /* *     get all invoices associated with this claim*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O002"; /* set current process name*/
  ;
  set CLBREC empty;
  CLBREC.CLACLMNB = CLAREC.CLACLMNB;
  CLBREC.CLBPMIVC = "*"; /* want all invoices from clbrec.*/
  ;
  ;
  CL0OW01.CLIADVSQ = 0;
  set SQLCA empty;
  ;
  call "IO1180" ("S3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    XPCL010();
  end
  ;
  ;
  call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* fetch first from clbrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0OW01.CL0OWICT = 0; /* there are no invoice records*/
      CLWREC.IV0IVCID = 0; /* holds current invoice for cl0o101*/
      return;
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLIVX01";
      XPCL010();
    end
  end
  ;
  ;
  CL0OW01.CL0OWICT = 1; /* invoice count*/
  CL0OW01.CL0OWINX = 1; /* invoice index*/
  ;
      /* note that the array index is incremented in*/
           /* process cl0o005*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0 /* fetch up to 200 records from iv6rec*/
   && CL0OW01.CL0OWINX <= 200)
    CL0OW06.IV0PARTN[CL0OWINX] = CLBREC.IV0PARTN;
    CL0OW06.IV0IVCID[CL0OWINX] = CLBREC.IV0IVCID;
    CL0OW06.YITCD[CL0OWINX] = CLBREC.YITCD;
    call "IO1180" ("N3", SQLCA, CLBREC) {isNoRefresh = yes, isExternal = yes}; /* fetch record from clbrec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* move in key to iv6rec*/
      CL0OW01.CL0OWINX = CL0OW01.CL0OWINX + 1;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0OW01.CL0OWICT = CL0OW01.CL0OWINX;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VCLIVX01";
        XPCL010();
      end
    end
  end
  ;
  ;
   /* clwrec holds current invoice number*/
  ;
  if (CL0OW01.CL0OWINX >= 1)
    CLWREC.IV0IVCID = CL0OW06.IV0IVCID[1];
  end
  ;
  ;
  if (CL0OW01.CL0OWINX > 200) /* found more than 200 invoices*/
    CL0OW01.CL0OWINX = CL0OW01.CL0OWINX - 1; /* index equals 201*/
    CL0OW01.CL0OWICT = CL0OW01.CL0OWINX;
  end
end // end KL0O002

// select unique ra hdr
Function KL0O003()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE TOTAL AUTHORIZED QUANTITY              **/
   /* *               FROM DCLAIMS.VRAHDR01                      **/
   /* *                                                          **/
   /* *  1) Select the Return authorization record and get the   **/
   /* *     ra item indicator                                    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O003"; /* set current process name*/
  ;
  ;
  CLJREC.CLACLMNB = CLAREC.CLACLMNB;
  ;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* Read RA record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (CLJREC.CLJRDIND == "B") /* If the RA header had diff types*/
      KL0OM001.XXXERRID = "KL0O003"; /* Process name*/
      converseLib.validationFailed(387); /* Claim has two types*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
  ;
end // end KL0O003

// select unique clrtn
Function KL0O004()
   /* *************************************************************/
   /* *                                                          **/
   /* *  SELECT THE RETURN FLAG FROM DCLAIM.Vclrtn01             **/
   /* *                                                          **/
   /* *  1) Select for existence using CLLREC.                   **/
   /* *     - If one or more row exists, set have-returns-flag   **/
   /* *       to yes.                                            **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O004"; /* Set current process name*/
  ;
  ;
  CL0OW01.CL0OWHVR = "N";
  ;
  if (CLAREC.CLACRTNB > 1) /* current return number*/
    CL0OW01.CL0OWHVR = "Y";
    return;
  end
  ;
  ;
  set CLLREC empty;
  CLLREC.CLACLMNB = CLAREC.CLACLMNB;
  CLLREC.CLLRTNNB = CLAREC.CLACRTNB;
  ;
  call "IO1310" ("S ", SQLCA, CLLREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0OW01.CL0OWHVR = "Y"; /* Have return for this claim*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRTN01";
      XPCL010(); /* Perform abend routine for claims*/
    end
  end
  ;
end // end KL0O004

// get customer sku indicator
Function KL0O005()
     /* **************************************************/
     /* read customer company vcmpny01,*/
     /* to get cu-cusku-ind.  this tells us there*/
     /* may be customer product id's for the nike prod id*/
     /* **************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O005"; /* set current process name*/
  ;
  KUCREC.KUCCOID = CLAREC.KUCCOID;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read company record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence               ; have company*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KUCREC.KUCSKIND = " "; /* no company = no sku*/
      KUCREC.XAUCD = " "; /* no company = no acct class*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      XPCL010(); /* abend*/
    end
  end
  ;
  ;
     /* ****************************************************/
     /* find company account type code, for product pricing*/
     /* ****************************************************/
  ;
  CL0OW01.XATCD = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    CL0OW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end
  ;
     /* ********************************************************/
     /* read invoice speciality table to get:*/
       /* price/cost indicator - use product price or cost?*/
       /* price/cost type - either xpycd or xcocd*/
       /* price/cost pct - signed percent field to add to 100%*/
                        /* to make a multiplier for the std*/
                        /* price/cost value.*/
     /* table record may have blanks in order type or acct class,*/
     /* so the order of reading is:*/
     /* 1. read for acct type, acct class & order type*/
        /* if not found,*/
     /* 2. read for acct type, acct class & blank o/t*/
        /* if not found,*/
     /* 3. read for acct type, blank acct class & blank o/t*/
        /* if not found,*/
          /* zero price/cost indicator, so clngrprc is 0.*/
     /* ********************************************************/
  ;
     /* data from the company*/
  ;
  IVEREC.XATCD = CL0OW01.XATCD; /* account type*/
  IVEREC.XAUCD = KUCREC.XAUCD; /* account class*/
  IVEREC.XOTCD = CLAREC.XOTCD; /* order type*/
  ;
  call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence, matched all 3 codes*/
  else
    IVEREC.XOTCD = " ";
    call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence, matched 2 codes*/
    else
      IVEREC.XAUCD = " ";
      call "IO1450" ("S ", SQLCA, IVEREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence, matched 1 code*/
      else
        IVEREC.IVEPCIND = " "; /* no match at all*/
        IVEREC.IVEPCTYP = " ";
        IVEREC.IVEPCPCT = 0;
      end
    end
  end
  ;
  ;
end // end KL0O005

// decide which map to show
Function KL0O050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  CLXREC.CLXSCRNX = 0;
  ;
  ;
  if (CLXREC.CLXCSCRN in CLXREC.CLXSNAME) /* if current-screen-name is*/
    CLXREC.CLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  TA1REC.TA1MAP = CLXREC.CLXCSCRN; /* prepare for abend*/
  ;
  CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  CLXREC.CLXERRF = "N"; /* clear error flag*/
  if (CLXBLDAY == "N") /* set with pf10/11*/
     /* next sentence*/
  else
    CLXREC.CLXBLDAY = "Y"; /* set build screen flag to 'yes'*/
  end
  ;
  ;
  if (CLXREC.CLXSCRNX == 1) /* if screen cl0om001*/
    while (CLXREC.CLXEOSF == "N") /* show until user is done*/
      KL0O100(); /* product summary*/
    end
  else
    if (CLXREC.CLXSCRNX == 2) /* if screen cl0om005*/
      while (CLXREC.CLXEOSF == "N") /* show until user is done*/
        KL0O200(); /* summary descriptions*/
      end
    else
      TA1REC.TA1MAP = CLXREC.CLXCSCRN;
      TA1REC.TA1TBLKE = "CLAIMS UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = CLXREC.CLXCSCRN;
      XPCL010(); /* abend*/
       /* END ;*/
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (clxeoaf ) = 'n'*/
         /* the perform will return to the top of cl0o050...*/
       /* else*/
         /* the perform will auto return to cl0o000.*/
  ;
end // end KL0O050

// map 1 product summary
Function KL0O100()
   /* ************************************************************/
   /* *    process screen cl0om001 Product Summary              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0o050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* * 10-04-90 CHELLM Added initialition of cursor position   **/
   /* *                 if new screen built.                    **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O100";
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y") /* build screen*/
    KL0O101();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
  KL0O108(); /* show totals and protect lines*/
  ;
  ;
   /* ***********************************************************/
  converse KL0OM001 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0O112(); /* set fields defined*/
  ;
  ;
  KL0O110(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O120(); /* edit entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O130(); /* process entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O150(); /* go to other screen*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O124(); /* edit for credit products w/o auth for rtn prds*/
  end
  ;
  ;
   /* IF CLXREC.CLXERRF = 'N';*/
  KL0O140(); /* handle enter/PF keys*/
   /* END ;*/
  ;
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
  ;
  ;
end // end KL0O100

// build screen
Function KL0O101()
   /* **************************************/
   /* build screen*/
  ;
   /* 10-04-90 chellm Added cursor positioning to the last*/
                   /* lined updated on the screen.*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O101";
  ;
  KL0O102(); /* set records empty*/
  ;
  KL0OM001.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL0OM001.CLACLMNB = CLAREC.CLACLMNB;
  KL0OM001.XGPCD = CLAREC.XGPCD;
  KL0OM001.YCTCD = CLAREC.YCTCD;
  KL0OM001.KUCCOID = CLAREC.KUCCOID;
  KL0OM001.KUMSTRID = CLAREC.KUMSTRID;
  KL0OM001.XNXCD = CLAREC.XNXCD;
  KL0OM001.KUCCONM = CLWREC.KUCCONM; /* 12/88*/
  KL0OM001.OP1CUPO = CLAREC.OP1CUPO;
  KL0OM001.SP1ABRV = CLAREC.SP1ID;
  KL0OM001.XOBCD = CLAREC.XOBCD;
  KL0OM001.XOCCD = CLAREC.XOCCD;
  KL0OM001.YCRCD = CLAREC.YCRCD;
  ;
  ;
           /* *************************/
           /* get current invoice data*/
           /* *************************/
  ;
  if (CLWREC.IV0IVCID == 0)
    CL0OW01.CL0OWINX = 1; /* start loop thru 200 invoices*/
  else
    if (CLWREC.IV0IVCID in CL0OW06.IV0IVCID) /* locate user entered invoice*/
      CL0OW01.CL0OWINX = sysVar.arrayIndex;
    else
       /* if user entered bad invoice, show error*/
      CLXREC.CLXWFLDN = CLWREC.IV0IVCID;
      TA1REC.TA1DBTBL = CLXREC.CLXWFLDC;
      TA1REC.TA1TBLKE = "UNKNOWN INVOICE NBR IN CLWREC";
      XPCL010();
    end
  end
  ;
  ;
  KL0OM001.CL0OWICT = CL0OW01.CL0OWICT; /* total invoice count*/
  CL0OW01.CL0OWHPO = "N"; /* init have price override*/
  CL0OW01.IVANBLFL = "N"; /* init invoice net bill flag*/
  if (CL0OW01.CL0OWICT == 0)
    KL0OM001.CL0OWINB = 0;
  else /* ; if invoice count gt 0*/
    KL0OM001.CL0OWINB = CL0OW01.CL0OWINX;
    KL0OM001.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLWREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    KL0O106(); /* fetch invoice header info iva/ivorec*/
    if (CLXREC.CLXERRF == "N")
      KL0OM001.OP1CUPO = IVAREC.OP1CUPO;
      KL0OM001.IV0IVCDT = IV0REC.IV0IVCDT;
    end
  end
  ;
  KL0O103(); /* expand abrv.*/
  ;
           /* *********************/
              /* build array*/
           /* *********************/
  ;
  if (CLXREC.CLXBLDAY == "Y")
    CLXREC.CLXBLDAY = "N";
    KL0O160(); /* build array*/
  end
  ;
           /* *********************/
           /* move data to screen*/
           /* *********************/
  CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1];
   /* product offset eq (1,13,25,37..) depending on pf7/8*/
  ;
  if (CL0OW01.CL0OWMSG != " ") /* 11-12-90     move xum/xqa override*/
                                   /* msg*/
    KL0OM001.CL0OWMSG = CL0OW01.CL0OWMSG;
  end
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11)
    KL0O104(); /* build screen line*/
    CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
  KL0O107(); /* show error messages*/
  ;
   /* below added 10-04-90*/
  if (CLXREC.CLXERRF != "Y") /* if no errors exists, position the*/
    set KL0OM001.CL0OMSEL[CL0OWCIX] cursor; /* currsor to the last*/
  end /* last line updated*/
  ;
end // end KL0O101

// set records empty
Function KL0O102()
   /* **************************************/
   /* set records empty*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O102";
  ;
  ;
  set KL0OM001 initial;
  set CLRREC empty;
  set CLKREC empty;
  set IVAREC empty;
  set IV3REC empty;
  ;
   /* totals displayed at end of data*/
  ;
  if (CLXREC.CLXBLDAY == "Y")
    CL0OW01.CL0OWTSQ = 0; /* total shipped qty*/
    CL0OW01.CL0OWTCQ = 0; /* total customer qty*/
    CL0OW01.CL0OWTAQ = 0; /* total authorized qty*/
    CL0OW01.CL0OWTRQ = 0; /* total returned qty*/
    CL0OW01.CL0OWTCV = 0; /* total claim value*/
  end
  ;
end // end KL0O102

// expand codes for header
Function KL0O103()
   /* **************************************/
   /* expand codes for header*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O103";
  ;
  ;
  ;
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD /* if in table*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM001.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  end
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* if in table*/
   && YCTTBL.XXXSTAT == "A")      
    KL0OM001.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* if in table*/
   && XGPTBL.XXXSTAT == "A")      
    KL0OM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  if (IVAREC.XOCCD in XOCTBL.XOCCD /* if in table*/
   && XOCTBL.XXXSTAT == "A")      
    KL0OM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
  end
  ;
  if (CL0OW01.CL0OWICT == 0)
    if (CLAREC.XOBCD in XOBTBL.XOBCD /* if in table*/
     && XOBTBL.XXXSTAT == "A")      
      KL0OM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
  else
    if (IV0REC.XOBCD in XOBTBL.XOBCD /* if in table*/
     && XOBTBL.XXXSTAT == "A")      
      KL0OM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
  end
  ;
  set SP1REC empty;
  SP1REC.SP1ID = IVAREC.SP1ID;
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    KL0OM001.SP1ABRV = SP1REC.SP1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DSPGM";
      TA1REC.TA1TBLVU = "VSPGM001";
      XPCL010();
    end
  end
end // end KL0O103

// build screen
Function KL0O104()
   /* **************************************/
   /* build screen*/
   /* **************************************/
   /* *************************************************************/
   /* *      M A I N T E N A N C E     H I S T O R Y             **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-19-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O104";
  ;
    /* if no products to show*/
    /* or have shown all products and are now moving*/
    /* blank lines to the screen*/
  ;
  if (CL0OW01.CL0OWNOP == 0              
   || CLXREC.CLXLINEX > CL0OW01.CL0OWNOP /* lt 11 products to be shown*/
   || CL0OW01.CL0OW05X > CL0OW01.CL0OWNOP)
     /* move defaults to working storage*/
    ;
    ;
    ;
    return;
  end
  ;
  ;
  if (CL0OW05.SY1STNBR[CL0OW05X] != " ")
    KL0OM001.CL0OMSEL[CLXLINEX] = CL0OW05.CL0OMSEL[CL0OW05X];
  end
  KL0OM001.CL0OMTRN[CLXLINEX] = CL0OW05.CL0OMTRN[CL0OW05X];
  KL0OM001.SY1STNBR[CLXLINEX] = CL0OW05.SY1STNBR[CL0OW05X];
  KL0OM001.SY2CLRID[CLXLINEX] = CL0OW05.SY2CLRID[CL0OW05X];
  KL0OM001.XDMCD[CLXLINEX] = CL0OW05.XDMCD[CL0OW05X];
  KL0OM001.IV3LNSQ[CLXLINEX] = CL0OW05.IV3LNSQ[CL0OW05X];
   /* MOVE CL0OW04.CLKRQTQ(CL0OW05X) TO CL0OM001.CLKRQTQ(CLXLINEX)*/
  if (CL0OW04.CLKRQTQ[CL0OW05X] <= -10000) /* if value under -10,000*/
    KL0OM001.CLKRQTQ[CLXLINEX] = CL0OW04.CLKRQTQ[CL0OW05X] * -1;
  else
    KL0OM001.CLKRQTQ[CLXLINEX] = CL0OW04.CLKRQTQ[CL0OW05X];
  end
   /* MOVE CL0OW04.CLKAUTHQ(CL0OW05X) TO CL0OM001.CLKAUTHQ(CLXLINE*/
  if (CL0OW04.CLKAUTHQ[CL0OW05X] <= -1000000) /* if value under -1 million*/
    KL0OM001.CLKAUTHQ[CLXLINEX] = CL0OW04.CLKAUTHQ[CL0OW05X] * -1;
  else
    KL0OM001.CLKAUTHQ[CLXLINEX] = CL0OW04.CLKAUTHQ[CL0OW05X];
  end
   /* MOVE CL0OW04.CLMTRTSQ(CL0OW05X) TO CL0OM001.CLMTRTSQ(CLXLINE*/
  if (CL0OW04.CLMTRTSQ[CL0OW05X] <= -1000000) /* if value under -1 million*/
    KL0OM001.CLMTRTSQ[CLXLINEX] = CL0OW04.CLMTRTSQ[CL0OW05X] * -1;
  else
    KL0OM001.CLMTRTSQ[CLXLINEX] = CL0OW04.CLMTRTSQ[CL0OW05X];
  end
  KL0OM001.CLKPRCFF[CLXLINEX] = CL0OW04.CLKPRCFF[CL0OW05X];
  KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLKCLPRC[CL0OW05X];
  ;
  if (CL0OW05.CLAESTVL[CL0OW05X] <= -1000000) /* if value under -1 million*/
    KL0OM001.CLAESTVL[CLXLINEX] = CL0OW05.CLAESTVL[CL0OW05X] * -1;
  else
    KL0OM001.CLAESTVL[CLXLINEX] = CL0OW05.CLAESTVL[CL0OW05X];
  end
  ;
  ;
  if (IVAREC.IVANBLFL == "Y")
    KL0OM001.IV3NLNUP[CLXLINEX] = CL0OW05.IV3NLNUP[CL0OW05X];
  else
    KL0OM001.IV3NLNUP[CLXLINEX] = CL0OW04.IV3GLNUP[CL0OW05X];
  end
  ;
  if (CL0OW04.OP2PRCVF[CL0OW05X] == "Y")
    KL0OM001.CL0OMVPR[CLXLINEX] = "V";
    if (CL0OW05.CL0OWSFL == "I") /* 1/89*/
       /* next sentence - show average price from invoice*/
    else
      KL0OM001.CLKCLPRC[CLXLINEX] = 0; /* no correct average price calc*/
      CL0OW04.CLKCLPRC[CLXLINEX] = 0;
                                   /* no correct average price calc*/
    end
  else
    KL0OM001.CL0OMVPR[CLXLINEX] = " ";
  end
  ;
  ;
  if (CL0OW05.CL0OWUOM[CL0OW05X] == "P") /* variable unit of measure*/
    KL0OM001.CL0OMERR[CLXLINEX] = CL0OW05.CL0OWUOM[CL0OW05X];
  else
    KL0OM001.CL0OMERR[CLXLINEX] = " ";
  end
  ;
  ;
   /* If the product already exists error has ocurred, the*/
   /* user may be returning from a PF10 from Map 005. Reshow*/
   /* the error message and set the error flag.    10-04-90*/
  if (CL0OW05.CL0OWERR[CL0OW05X] == "Y")
    converseLib.validationFailed(212);
    CLXREC.CLXERRF = "Y";
    set KL0OM001.SY1STNBR[CLXLINEX] modified, bold;
    set KL0OM001.SY2CLRID[CLXLINEX] modified, bold;
    set KL0OM001.CL0OMSEL[CLXLINEX] cursor;
  end
  ;
end // end KL0O104

// select unique ivc hdr
Function KL0O106()
   /* *************************************************************/
   /* *     select unique from invoice header*/
   /* **/
   /* **/
  ;
    /* Maintenance History:*/
    /* 04-10-90 CHELLM Added XQACD and XUMCD to the product key*/
                    /* when selecting invoice price overrides.*/
  ;
  ;
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O106"; /* set current process name*/
  ;
  ;
  set IVAREC empty; /* invoice header*/
  IVAREC.IV0IVCID = CLWREC.IV0IVCID;
  CLXREC.CLXORDIV = CLWREC.IV0IVCID;
  IVAREC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes}; /* select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    if (IVAREC.IVANBLFL == " "
     || IVAREC.IVANBLFL == "N")
      CL0OW01.IVANBLFL = "N";
    else
      CL0OW01.IVANBLFL = "Y";
    end
  else
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDR01";
    XPCL010();
  end
  ;
  ;
  set IV0REC empty; /* invoice header index*/
  IV0REC.IV0IVCID = CLWREC.IV0IVCID;
  IV0REC.IV0PARTN = CLXREC.CLXPARTN;
  ;
  call "IO1110" ("S ", SQLCA, IV0REC) {isNoRefresh = yes, isExternal = yes}; /* select unique record*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVHDX01";
    XPCL010();
  end
  ;
  ;
       /* *****************************************/
       /* determine if invoice has price overrides*/
       /* *****************************************/
  ;
  set CL6REC empty;
  CL6REC.IV0PARTN = CLXREC.CLXPARTN; /* for this invoice,*/
  CL6REC.IV0IVCID = CLWREC.IV0IVCID;
  ;
  CL6REC.XGPCD = "**";
  CL6REC.SY1STNBR = "******";
  CL6REC.SY2CLRID = "***";
  CL6REC.XDMCD = "**";
  CL6REC.XQACD = "**";
  CL6REC.XUMCD = "**";
  CL6REC.SY5SZID = -1;
  ;
  call "IO2950" ("SS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO2950" ("SN", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0OW01.CL0OWHPO = "Y"; /* have price override flag*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0OW01.CL0OWHPO = "N"; /* price override flag*/
      else
        TA1REC.TA1LOCAT[2] = "CL0O006";
        TA1REC.TA1LOCAT[4] = "IO2950";
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VIVOVR01";
        CLXREC.XXXWDTE = CLAREC.CLACLMNB;
        TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
        XPCL010(); /* abend*/
      end
    end
  else
    TA1REC.TA1LOCAT[2] = "CL0O006";
    TA1REC.TA1LOCAT[4] = "IO2950";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VIVOVR01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abend*/
  end
  ;
  call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
end // end KL0O106

// show error messages
Function KL0O107()
   /* **************************************/
   /* show error messages*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O107";
  ;
  ;
   /* show inquiry only message*/
  ;
  if (CL0OW01.CL0OWINQ == "Y")
    if (CLWREC.CLWACTIV == "I") /* user should realize they are in inquiry*/
       /* next sentence*/
    else
      if (CLAREC.CLAWSENF == "Y")
        converseLib.validationFailed(536); /* worksheet entered claim - no update*/
      else
        converseLib.validationFailed(29); /* changed to inquiry mode due to security*/
      end
    end
  end
  ;
  ;
   /* show 'no invoices' or 'no prods' message*/
  ;
  if (CL0OW01.CL0OWHVR == "N" /* have no returns for invoice*/
   && CL0OW01.CL0OWPIN == "N") /* no products from invoice*/
    converseLib.validationFailed(197); /* no products assoc with this invoice*/
  else
    if (CLJREC.CLJRAIND == "N" /* no returns for claim*/
     && CL0OW01.CL0OWICT == 0) /* no invoices assoc w/ claim*/
      converseLib.validationFailed(196); /* no invoices assoc w/ this claim*/
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 8) /* return qty gt authorized qty*/
     /* next sentence*/
  else
    if (CLJREC.CLJRDIND == "B")
      converseLib.validationFailed(514); /* rts and def return on claim*/
    end
  end
  ;
  if (CLAREC.YCRCD in YCRTBL.YCRCD              
   && YCRTBL.YCRSPARN[sysVar.arrayIndex] == "Y" /* special arrangement*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
   && CLAREC.IV0IVCID != 0)                    
    if (KL0OM001.SY1STNBR[1] == " " /* no products entered yet*/
     && KL0OM001.CLKAUTHQ[1] == 0   /* no quantities entered yet*/
     && CLXREC.CLXARY1X[1] == 1)    /* on first page*/
      set KL0OM001.CLKAUTHQ[1] cursor, bold;
      set KL0OM001.CLAESTVL[1] bold;
      converseLib.validationFailed(509); /* enter products or quantity and value*/
    end
  end
  ;
  ;
end // end KL0O107

// show totals
Function KL0O108()
   /* **************************************/
   /* protect screen lines*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O108";
  ;
  ;
  if (CLXREC.CLXERRF == "N"
   && CL0OW01.CL0OWCIX == 1) /* and cursor not already positioned*/
    set KL0OM001.CL0OMSEL[1] cursor; /* (10-04-90)*/
  end
  ;
  if (CL0OW01.CL0OWICT == 0) /* no invoices with claim*/
    set KL0OM001.IV0IVCID protect;
    set KL0OM001.CL0OWINB protect;
  end
  ;
  ;
  CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1];
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX < 12)
    ;
    ;
    if (CL0OW05.YCECD[CL0OW05X] != " ")
      set KL0OM001.SY1STNBR[CLXLINEX] protect, bold;
      set KL0OM001.SY2CLRID[CLXLINEX] protect, bold;
      set KL0OM001.XDMCD[CLXLINEX] protect, bold;
      if (converseVar.validationMsgNum == 0) /* if no other mgs exist*/
        converseLib.validationFailed(554); /* exception code exist for product*/
      end
    end
    ;
     /* if in inquiry only mode*/
    ;
    if (CL0OW01.CL0OWINQ == "Y")
      set KL0OM001.CLKRQTQ[CLXLINEX] protect;
      set KL0OM001.CLKAUTHQ[CLXLINEX] protect;
      set KL0OM001.CLMTRTSQ[CLXLINEX] protect;
      set KL0OM001.CLKPRCFF[CLXLINEX] protect;
      set KL0OM001.CLKCLPRC[CLXLINEX] protect;
    else
      ;
      ;
      if (KL0OM001.SY1STNBR[CLXLINEX] == " ")
        set KL0OM001.SY1STNBR[CLXLINEX] normal; /* unprotected and unmodified*/
        set KL0OM001.SY2CLRID[CLXLINEX] normal; /* unprotected and unmodified*/
        set KL0OM001.XDMCD[CLXLINEX] normal; /* unprotected and unmodif*/
      end
    end
    ;
    ;
    if (CL0OW05.CL0OWLVL[CL0OW05X] == "S") /* prd worked at size level*/
      if (CL0OW05.YCECD[CL0OW05X] != " ") /* exception codes*/
        set KL0OM001.SY1STNBR[CLXLINEX] protect, bold;
        set KL0OM001.SY2CLRID[CLXLINEX] protect, bold;
        set KL0OM001.XDMCD[CLXLINEX] protect, bold;
      else
        set KL0OM001.SY1STNBR[CLXLINEX] protect;
        set KL0OM001.SY2CLRID[CLXLINEX] protect;
        set KL0OM001.XDMCD[CLXLINEX] protect;
      end
      set KL0OM001.CLKRQTQ[CLXLINEX] protect;
      set KL0OM001.CLKAUTHQ[CLXLINEX] protect;
      set KL0OM001.CLKPRCFF[CLXLINEX] protect;
      set KL0OM001.CLKCLPRC[CLXLINEX] protect;
    end
    ;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
  end
  ;
  ;
   /* *************************************************************/
   /* *     Check to see if total line needs to be displayed;    **/
   /* *     -- If it does then format the totals.                **/
   /* *************************************************************/
  ;
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y" /* special arrangement*/
   && CL0OW01.CL0OWICT == 0           /* invoice count*/
   && KL0OM001.SY1STNBR[1] == " ")    /* no products entered*/
    KL0OM001.SY1STNBR[12] = "TOTAL "; /* Move 'TOTAL' indicator*/
    KL0OM001.CL0OMTRQ = CL0OW01.CL0OWTCQ; /* tot requested*/
    /* MOVE CL0OW01.CL0OWTAQ TO CL0OM001.CLKAUTHQ(12); tot auth qty*/
    if (CL0OW01.CL0OWTAQ <= -1000000) /* if req qty under 1,000,000*/
      KL0OM001.CLKAUTHQ[12] = CL0OW01.CL0OWTAQ * -1;
    else
      KL0OM001.CLKAUTHQ[12] = CL0OW01.CL0OWTAQ;
    end
    /* MOVE CL0OW01.CL0OWTRQ TO CL0OM001.CLMTRTSQ(12); tot return q*/
    if (CL0OW01.CL0OWTRQ <= -1000000) /* if req qty under 1,000,000*/
      KL0OM001.CLMTRTSQ[12] = CL0OW01.CL0OWTRQ * -1;
    else
      KL0OM001.CLMTRTSQ[12] = CL0OW01.CL0OWTRQ;
    end
     /* MOVE CL0OW01.CL0OWTCV TO CL0OM001.CLAESTVL(12); tot claim*/
     /* changed name of total value field*/
    KL0OM001.CL0OMTVL = CL0OW01.CL0OWTCV; /* tot claim qty*/
    set KL0OM001.SY1STNBR[12] protect; /* Protect all total fields*/
    set KL0OM001.CL0OMTRQ protect;
    set KL0OM001.CLKAUTHQ[12] protect;
    set KL0OM001.CLMTRTSQ[12] protect;
     /* SET CL0OM001.CLAESTVL(12) PROTECT;*/
     /* changed name of total value field*/
    set KL0OM001.CL0OMTVL protect;
     /* keep entered totals for authorized qty and value*/
  else
    CL0OW01.CL0OWIXM = CLXREC.CLXARY1X + 11; /* next page*/
    if (CL0OW01.CL0OWIXM >= CL0OW01.CL0OWNOP /* If at array max*/
     || CL0OW05.SY1STNBR[CL0OWIXM] == " ")   /* or no more pages of data*/
      KL0OM001.SY1STNBR[12] = "TOTAL "; /* Move 'TOTAL' indicator*/
      KL0OM001.CL0OMTLQ = CL0OW01.CL0OWTSQ; /* tot shipped qty*/
      KL0OM001.CL0OMTRQ = CL0OW01.CL0OWTCQ; /* tot requested*/
      /* MOVE CL0OW01.CL0OWTAQ TO CL0OM001.CLKAUTHQ(12); tot auth qty*/
      if (CL0OW01.CL0OWTAQ <= -1000000) /* if req qty under 1,000,000*/
        KL0OM001.CLKAUTHQ[12] = CL0OW01.CL0OWTAQ * -1;
      else
        KL0OM001.CLKAUTHQ[12] = CL0OW01.CL0OWTAQ;
      end
      /* MOVE CL0OW01.CL0OWTRQ TO CL0OM001.CLMTRTSQ(12); tot return q*/
      if (CL0OW01.CL0OWTRQ <= -1000000) /* if req qty under 1,000,000*/
        KL0OM001.CLMTRTSQ[12] = CL0OW01.CL0OWTRQ * -1;
      else
        KL0OM001.CLMTRTSQ[12] = CL0OW01.CL0OWTRQ;
      end
         /* MOVE CL0OW01.CL0OWTCV TO CL0OM001.CLAESTVL(12); tot claim*/
       /* changed name of total value field*/
      KL0OM001.CL0OMTVL = CL0OW01.CL0OWTCV; /* tot claim qty*/
      set KL0OM001.SY1STNBR[12] protect; /* Protect all total fields*/
      set KL0OM001.CL0OMTLQ protect;
      set KL0OM001.CL0OMTRQ protect;
      set KL0OM001.CLKAUTHQ[12] protect;
      set KL0OM001.CLMTRTSQ[12] protect;
         /* SET CL0OM001.CLAESTVL(12) PROTECT;*/
       /* changed name of total value field*/
      set KL0OM001.CL0OMTVL protect;
    else
      KL0OM001.SY1STNBR[12] = " "; /* Clear totals*/
      KL0OM001.CL0OMTLQ = 0;
      KL0OM001.CL0OMTRQ = 0;
      KL0OM001.CLKAUTHQ[12] = 0;
      KL0OM001.CLMTRTSQ[12] = 0;
         /* MOVE 0 TO CL0OM001.CLAESTVL(12);*/
       /* changed name of total value field*/
      KL0OM001.CL0OMTVL = 0;
      set KL0OM001.SY1STNBR[12] skip, invisible; /* Darken total lines*/
      set KL0OM001.CL0OMTLQ skip, invisible;
      set KL0OM001.CL0OMTRQ skip, invisible;
      set KL0OM001.CLKAUTHQ[12] skip, invisible;
      set KL0OM001.CLMTRTSQ[12] skip, invisible;
         /* SET CL0OM001.CLAESTVL(12) AUTOSKIP,DARK;*/
       /* changed name of total value field*/
      set KL0OM001.CL0OMTVL skip, invisible;
    end
  end
  ;
  ;
end // end KL0O108

// edit pfkeys
Function KL0O110()
   /* **************************************/
   /* edit pf keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O110";
  ;
  ;
  if (KL0OM001.CATOAP == " "
   || KL0OM001.CATOAP == "KL0O")
    if (KL0OM001.CAITEM != " ") /* something in field*/
       /* use caitem as style key to locate specific prd in prd array*/
       /* in cl0o140*/
    end
  else /* catoap contains garbage or application name*/
    if (KL0OM001.CATOAP != " " /* if any fastpath data entered*/
     || KL0OM001.CAITEM != " ")
      COMMAREA.CATOAP = KL0OM001.CATOAP;
      COMMAREA.CAITEM = KL0OM001.CAITEM;
      XPCL006(); /* see if items to be passed are correct length and type*/
      if (CLXREC.CLXERRF == "Y")
        return;
      end
      XPCL002(); /* check security/xfer*/
      COMMAREA.CATOAP = " ";
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf18)
    return;
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            CLXREC.CLXERRF = "Y";
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O110

// set fields defined
Function KL0O112()
   /* **************************************/
   /* set fields defined*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O112";
  ;
  set KL0OM001.IV0IVCID initialAttributes;
  set KL0OM001.CL0OWINB initialAttributes;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11)
    ;
    set KL0OM001.CL0OMSEL[CLXLINEX] initialAttributes;
    set KL0OM001.SY1STNBR[CLXLINEX] initialAttributes;
    set KL0OM001.SY2CLRID[CLXLINEX] initialAttributes;
    set KL0OM001.XDMCD[CLXLINEX] initialAttributes;
    set KL0OM001.IV3LNSQ[CLXLINEX] initialAttributes;
    set KL0OM001.IV3NLNUP[CLXLINEX] initialAttributes;
    set KL0OM001.CLKRQTQ[CLXLINEX] initialAttributes;
    set KL0OM001.CLKAUTHQ[CLXLINEX] initialAttributes;
    set KL0OM001.CLMTRTSQ[CLXLINEX] initialAttributes;
    set KL0OM001.CLKPRCFF[CLXLINEX] initialAttributes;
    set KL0OM001.CLKCLPRC[CLXLINEX] initialAttributes;
    set KL0OM001.CL0OMVPR[CLXLINEX] initialAttributes;
    set KL0OM001.CLAESTVL[CLXLINEX] initialAttributes;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
end // end KL0O112

// edit entries
Function KL0O120()
   /* *************************************************************/
   /* *                                                          **/
   /* *                   EDIT ENTRIES                           **/
   /* *                                                          **/
   /* *    1) if data changed on screen.                         **/
   /* *       - If no errors, check for a selection code of AA   **/
   /* *           or SA                                          **/
   /* *       - If still no errors, check detail lines from the  **/
   /* *           bottom up.                                     **/
   /* *    2) Edit the header invoice number entered.            **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
   /* *      M A I N T E N A N C E    H I S T O R Y              **/
   /* *************************************************************/
   /* * 05-31-90 CHELLM Added Cl0OSBC edit brand code to prevent **/
   /* *                 product brand - claim brand mis-match.   **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM Added a PERFORM of CL0O126 to edit the   **/
   /* *          product even if its from the invoice since there**/
   /* *          may be non-invoice products already authorized  **/
   /* *          with the same sty/colr/xdm/xum/xqa.  we need to **/
   /* *          see if dups exist and check xum and xqa.        **/
   /* * 06-17-91  GDECKE   EXPAND W04/W05 TABLE TO 1000 LINES    **/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0O120";
  ;
  ;
  CL0OW01.CL0OWNIR = "N"; /* new invoice requested*/
  set KL0OM001.CL0OMSEL[1] cursor;
  ;
  ;
  KL0O123(); /* validate select codes*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry*/
    /* next sentence - don't want to edit, do want to check inv chg*/
  else
    ;
    CL0OW01.CL0OWPSW = "N"; /* init problem switch*/
    CLXREC.CLXLINEX = 11;
    CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1] + 10;
    while (CLXREC.CLXLINEX > 0)
      ;
      if (KL0OM001.CL0OMSEL[CLXLINEX] != CL0OW05.CL0OMSEL[CL0OW05X]
       || KL0OM001.SY1STNBR[CLXLINEX] != CL0OW05.SY1STNBR[CL0OW05X]
       || KL0OM001.SY2CLRID[CLXLINEX] != CL0OW05.SY2CLRID[CL0OW05X])
        CL0OW05.CL0OWEUM = "Y"; /* edit unit of measure*/
      else
        CL0OW05.CL0OWEUM = "N"; /* dont edit unit of measure*/
      end
      if (KL0OM001.CLKRQTQ[CLXLINEX] > 0)
        CL0OW05.CL0OWXRQ = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
      else
        CL0OW05.CL0OWXRQ = KL0OM001.CLKRQTQ[CLXLINEX];
      end
      if (KL0OM001.CL0OMSEL[CLXLINEX] == CL0OW05.CL0OMSEL[CL0OW05X]
       && KL0OM001.SY1STNBR[CLXLINEX] == CL0OW05.SY1STNBR[CL0OW05X]
       && KL0OM001.SY2CLRID[CLXLINEX] == CL0OW05.SY2CLRID[CL0OW05X]
       && KL0OM001.XDMCD[CLXLINEX] == CL0OW05.XDMCD[CL0OW05X]
       && CL0OW05.CL0OWXRQ == CL0OW04.CLKRQTQ[CL0OW05X]
       && KL0OM001.CLKAUTHQ[CLXLINEX] == CL0OW04.CLKAUTHQ[CL0OW05X]
       && KL0OM001.CLMTRTSQ[CLXLINEX] == CL0OW04.CLMTRTSQ[CL0OW05X]
       && KL0OM001.CLKPRCFF[CLXLINEX] == CL0OW04.CLKPRCFF[CL0OW05X]
       && KL0OM001.CLKCLPRC[CLXLINEX] == CL0OW04.CLKCLPRC[CL0OW05X]
       && CL0OW05.CL0OWUWF[CL0OW05X] != "Y") /* uom warning flag not on*/
         /* next sentence - nothing changed*/
      else
        ;
        CL0OW05.CL0OWUWF[CL0OW05X] = " "; /* clear uom error flag*/
        ;
         /* save the last screen line changed for positioning the*/
         /* the cursor if the user PF11's to the Summary-II screen*/
        CL0OW01.CL0OWCIX = CLXREC.CLXLINEX;
        ;
        KL0O129(); /* Edit selections*/
        if (CLXREC.CLXERRF == "Y")
          return;
        end
        ;
        if (CL0OW01.CL0OWINQ == "N" /* If not inquiry only*/
         && KL0OM001.CL0OMSEL[CLXLINEX] != "X") /* line not removed*/
          /* ********************************************/
            /* Verify the claim price entry, the price*/
              /* from flag, and the quantity entry.*/
          /* ********************************************/
          KL0O125();
          /* ********************************************/
            /* Verify Nike product id.*/
          /* ********************************************/
          if (CLXREC.CLXERRF == "N") /* if no errors*/
            if (CLAREC.YITCD == "I" /* If product is enterable*/
             || CLAREC.YITCD == "Y") /* assoc. with ibm ivc*/
              if (KL0OM001.SY1STNBR[CLXLINEX] == CL0OW05.SY1STNBR[CL0OW05X]
               && KL0OM001.SY2CLRID[CLXLINEX] == CL0OW05.SY2CLRID[CL0OW05X]
               && KL0OM001.CL0OMSEL[CLXLINEX] == CL0OW05.CL0OMSEL[CL0OW05X]
               /* 10-04-90*/
               && CL0OW05.CL0OWUWF[CL0OW05X] != "Y") /* 10-04-90*/
                if (CL0OW05.SY1STNBR[CL0OW05X] == " " /* 2/89*/
                 && CL0OW04.CLKAUTHQ[CL0OW05X] > 0)   /* 08-28-90*/
                   /* if have ivc associated need style filled in*/
                  converseLib.validationFailed(200); /* nike product id not valid*/
                  set KL0OM001.SY1STNBR[CLXLINEX] cursor, bold;
                  CLXREC.CLXERRF = "Y";
                else
                  KL0O126(); /* validate Nike prod ID 10-04-90*/
                   /* next sentence - got nike prod id from invoice*/
                end
              else
                KL0O126(); /* validate the nike prod id*/
              end
            else
              KL0O126(); /* Validate the Nike prod id*/
            end
          end
          ;
          if (CLXREC.CLXERRF == "N") /* If no problems occurred*/
            KL0OSBC(); /* edit brand code   (5-31-90)*/
          end
          ;
          /* ********************************************/
            /* If no problems occurred during the edits,*/
              /* then perform calculation and retrieve*/
              /* edits which require certain valid*/
              /* entries to exist on the line.*/
          /* ********************************************/
          if (CLXREC.CLXERRF == "N" /* If no problems occurred*/
           && CL0OW05.CL0OWEUM == "Y") /* if edit flag is yes*/
            KL0O135(); /* do uom edit*/
          end
          if (CLXREC.CLXERRF == "N") /* if no problems occurred*/
            KL0O127(); /* Get the appropriate claim price*/
            KL0O128(); /* Calculation edits for totals*/
          end
        else /* inquiry or deleting*/
          ;
          ;
          if (KL0OM001.CL0OMSEL[CLXLINEX] == "X")
            KL0O128();
          end
          ;
        end
        ;
        ;
        ;
         /* **********************/
           /* set update flags*/
         /* **********************/
        ;
        if (CLXREC.CLXERRF == "N")
          KL0O121();
        end
        ;
      end
      ;
       /* reset clxerrf so edits on following lines will be done*/
      ;
      if (CLXREC.CLXERRF == "Y")
        CLXREC.CLXERRF = "N";
        CL0OW01.CL0OWPSW = "Y"; /* set problem switch*/
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
      CL0OW01.CL0OW05X = CL0OW01.CL0OW05X - 1;
    end
  end
  ;
  ;
  if (CL0OW01.CL0OWPSW == "Y")
    CLXREC.CLXERRF = "Y"; /* set error flag*/
  end
  ;
  ;
  ;
   /* *************************************************/
    /* Edit the invoice number*/
   /* *************************************************/
  ;
   /* edit for invoice nbr change after screen data has no errors*/
  if (CLXREC.CLXERRF == "Y")
    if (KL0OM001.IV0IVCID != CL0OW05.IV0IVCID)
      KL0OM001.IV0IVCID = CL0OW05.IV0IVCID; /* restore invoice id*/
    end
    if (KL0OM001.CL0OWINB != CL0OW05.CL0OWINB)
      KL0OM001.CL0OWINB = CL0OW05.CL0OWINB; /* restore ivc seq nbr*/
    end
  else
    if (KL0OM001.IV0IVCID != CL0OW05.IV0IVCID /* If invoice changed*/
     || KL0OM001.CL0OWINB != CL0OW05.CL0OWINB) /* If invoice changed*/
      KL0O122(); /* Edit the header invoice*/
    end
  end
  ;
  ;
end // end KL0O120

// set update flags
Function KL0O121()
   /* ***************************************************/
   /* **/
   /* *  decide which records need to be updated*/
   /* **/
   /* ***************************************************/
  ;
  ;
  if (CL0OW05.CL0OWSFL[CL0OW05X] == "A") /* from adjustments*/
    if (CL0OW05.CL0OMSEL[CL0OW05X] == "A" /* authorize*/
     || CL0OW05.CL0OMSEL[CL0OW05X] == "NC")
      CL0OW05.CL0OWUPR[CL0OW05X] = "X"; /* delete clrrec*/
      CL0OW05.CL0OWUPK[CL0OW05X] = "A"; /* add clkrec*/
    else
      if (CL0OW05.CL0OMSEL[CL0OW05X] == "X") /* delete*/
        CL0OW05.CL0OWUPR[CL0OW05X] = "X"; /* delete clrrec*/
      else
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "C"
         || CL0OW05.CL0OMSEL[CL0OW05X] == "D")
          CL0OW05.CL0OWUPR[CL0OW05X] = "C";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPR[CL0OW05X] = " ";
          end
        end
      end
    end
  else
    ;
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* from invoice*/
      if (CL0OW05.CL0OMSEL[CL0OW05X] == "A"
       || CL0OW05.CL0OMSEL[CL0OW05X] == "NC")
        CL0OW05.CL0OWUPK[CL0OW05X] = "A";
      else
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "C"
         || CL0OW05.CL0OMSEL[CL0OW05X] == "D")
          CL0OW05.CL0OWUPR[CL0OW05X] = "A";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
            CL0OW05.CL0OWUPR[CL0OW05X] = " ";
          else
            if (CL0OW05.CL0OMSEL[CL0OW05X] == "X")
              CL0OW05.CL0OWUPR[CL0OW05X] = " ";
              CL0OW05.CL0OWUPK[CL0OW05X] = " ";
            end
          end
        end
      end
    else
      ;
      if (CL0OW05.CL0OWSFL[CL0OW05X] == "R")
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "X")
          CL0OW05.CL0OWUPK[CL0OW05X] = "X";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
          else
            if (CL0OW05.CL0OMSEL[CL0OW05X] == "D" /* debit*/
             || CL0OW05.CL0OMSEL[CL0OW05X] == "C") /* credit*/
              CL0OW05.CL0OWUPR[CL0OW05X] = "A"; /* add adjustment*/
              CL0OW05.CL0OWUPK[CL0OW05X] = "X"; /* delete ra*/
            else
              CL0OW05.CL0OWUPK[CL0OW05X] = "C";
            end
          end
        end
      else
        ;
        if (CL0OW05.CL0OWSFL[CL0OW05X] == " ") /* adding new record*/
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
          else
            if (CL0OW05.CL0OMSEL[CL0OW05X] == "D" /* debit*/
             || CL0OW05.CL0OMSEL[CL0OW05X] == "C") /* credit*/
              CL0OW05.CL0OWUPR[CL0OW05X] = "A"; /* add adjustment*/
            else
              if (CL0OW05.CL0OMSEL[CL0OW05X] == "A" /* authorize*/
               || CL0OW05.CL0OMSEL[CL0OW05X] == "NC") /* non-credit*/
                CL0OW05.CL0OWUPK[CL0OW05X] = "A"; /* add adjustment*/
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O121

// edit invoice number
Function KL0O122()
   /* ************************************************************/
   /* *     check the validity of the invoice number entered    **/
   /* *           on the screen                                 **/
   /* *                                                         **/
   /* ************************************************************/
   /* *************************************************************/
   /* *         M A I N T E N A N C E     H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* * 03-13-92   GDECKE     MARCH DB2 TABLE CHANGES.           **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O122"; /* set current process name*/
  ;
  ;
  ;
  if (KL0OM001.CL0OWINB == 0)
    KL0OM001.CL0OWINB = 1;
  end
  ;
   /* if user selected invoice sequence number le total*/
   /* number of invoices for claim*/
     /* move actual invoice number indexed by invoice sequence*/
     /* into cl0owind.*/
   /* otherwise*/
     /* treat the value in cl0owinb as an actual invoice nbr.*/
   /* this way the user could type the desired invoice*/
   /* nbr in cl0owinb*/
  ;
  if (KL0OM001.IV0IVCID != CL0OW05.IV0IVCID)
    KL0OM001.CL0OWINB = KL0OM001.IV0IVCID;
  else
    if (KL0OM001.CL0OWINB <= CL0OW01.CL0OWICT)
      CL0OW01.CL0OWINX = KL0OM001.CL0OWINB;
      KL0OM001.CL0OWINB = CL0OW06.IV0IVCID[CL0OWINX];
    end
  end
  ;
  ;
  if (KL0OM001.CL0OWINB in CL0OW06.IV0IVCID)
    CLWREC.IV0IVCID = CL0OW06.IV0IVCID[sysVar.arrayIndex];
    CL0OW01.CL0OWNIR = "Y"; /* new invoice requested*/
    CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
    CLXREC.CLXBLDAY = "Y"; /* rebuild array*/
    CL0OW01.CL0OWINB = sysVar.arrayIndex; /* index to invoice number*/
    CL0OW01.CL0OWINX = sysVar.arrayIndex; /* index to invoice number*/
    set CL0OW04 empty;
    set CL0OW05 empty;
    set CL0OW08 empty; /* GDECKE 03-13-92*/
  else
    converseLib.validationFailed(188); /* invoice nbr is not valid for claim*/
    set KL0OM001.CL0OWINB cursor, bold;
    CLXERRF = "Y"; /* move y to error flag*/
    KL0OM001.XXXERRID = "KL0O122";
    return;
  end
  ;
end // end KL0O122

// edit selection code
Function KL0O123()
   /* ************************************************************/
   /* *     edit selection code*/
   /* *                                                         **/
   /* ************************************************************/
   /* *************************************************************/
   /* *         M A I N T E N A N C E     H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O123"; /* set current process name*/
  ;
  ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
   /* validate selection code*/
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
  ;
  CLXREC.CLXTESTF = "N";
  CL0OW01.CL0OWNBR = 1;
  if ("SA" in KL0OM001.CL0OMSEL from CL0OWNBR)
    if (sysVar.arrayIndex == 1
     && CLXREC.CLXARY1X[1] == 1) /* on first page*/
      CLXREC.CLXTESTF = "Y"; /* need to move 's' to product lines*/
    else
      converseLib.validationFailed(427); /* must be line 1 of screen 1*/
      CLXREC.CLXERRF = "Y";
      return;
    end
    CL0OW01.CL0OWNBR = sysVar.arrayIndex;
    CL0OW01.CL0OWNBR = sysVar.arrayIndex + 1;
    if ("SA" in KL0OM001.CL0OMSEL from CL0OWNBR) /* found more than 1 'sa'*/
      converseLib.validationFailed(427); /* must be line 1 of screen 1*/
      KL0OM001.XXXERRID = "KL0O123";
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
   /* move select code to appropriate lines*/
  ;
  if (CLXREC.CLXTESTF == "Y") /* found 'sa' in first product's select code*/
    ;
     /* if all products worked at summary level, show error*/
    ;
    if ("S" in CL0OW05.CL0OWLVL
     || " " in CL0OW05.CL0OWLVL)
       /* next sentence - at least one prduct is worked at size level*/
    else
      converseLib.validationFailed(202); /* clm is worked at prd level*/
      KL0OM001.XXXERRID = "KL0O123";
      CLXREC.CLXERRF = "Y";
      set KL0OM001.CL0OMSEL[1] cursor, bold;
      return;
    end
    ;
    ;
    CL0OW01.CL0OW05X = 1;
    CLXREC.CLXLINEX = 1;
    KL0OM001.CL0OMSEL[1] = " "; /* clear out 'sa'*/
    while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP)
                                   /* index le number of products*/
      if (CL0OW05.SY1STNBR[CL0OW05X] != " ")
        if (CL0OW05.CL0OWLVL[CL0OW05X] == "S" /* worked at size level*/
         || CL0OW05.CL0OWLVL[CL0OW05X] == " ") /* not worked yet*/
          if (CL0OW01.CL0OW05X <= 11) /* move 's' to map*/
            KL0OM001.CL0OMSEL[CLXLINEX] = "S";
            CL0OW05.CL0OMSEL[CL0OW05X] = " ";
          else /* move 's' to working storage*/
            CL0OW05.CL0OMSEL[CL0OW05X] = "S";
          end
        end
      end
      CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
  end
  ;
  ;
  ;
  CL0OW01.CL0OWSWR = "Y"; /* init need-to-reshow-screen*/
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry mode*/
    CLXREC.CLXLINEX = 11;
    while (CLXREC.CLXLINEX > 0)
      CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1] + CLXREC.CLXLINEX - 1;
      ;
       /* if value changed from array value*/
      ;
      if (KL0OM001.CL0OMSEL[CLXLINEX] != CL0OW05.CL0OMSEL[CL0OW05X])
        if (KL0OM001.CL0OMSEL[CLXLINEX] == " "
         || KL0OM001.CL0OMSEL[CLXLINEX] == "S")
          if (KL0OM001.CL0OMSEL[CLXLINEX] == "S"
           && CL0OW05.CL0OWLVL[CL0OW05X] == "P") /* worked at prd lvl*/
            converseLib.validationFailed(202); /* option not valid in inquiry mode*/
            set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
            KL0OM001.XXXERRID = "KL0O123";
            CLXREC.CLXERRF = "Y";
          end
          CL0OW01.CL0OWSWR = "N"; /* need to reshow screen*/
          CL0OW05.CL0OMSEL[CL0OW05X] = KL0OM001.CL0OMSEL[CLXLINEX];
        else
          converseLib.validationFailed(343); /* option not valid in inquiry mode*/
          set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
          KL0OM001.XXXERRID = "KL0O123";
          CLXREC.CLXERRF = "Y";
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    end
    return;
  end
  ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
   /* validate authorize code*/
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
  ;
   /* edit for authorizing by quantity without style on one 2/89*/
   /* line and authorizing by style on another line.*/
   /* batch doesn't handle this well.*/
  ;
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y")
    CLXREC.CLXLINEX = 1;
    CLXREC.CLXTESTF = "N";
    while (CLXREC.CLXLINEX < 12
     && CLXREC.CLXTESTF == "N")
      if (KL0OM001.SY1STNBR[CLXLINEX] == " ")
        if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"
         || KL0OM001.CL0OMTRN[CLXLINEX] == "A")
          if (KL0OM001.CL0OMSEL[CLXLINEX] == "X")
             /* next sentence*/
          else
            CLXREC.CLXTESTF = "Y"; /* have author by qty w/o style*/
             /* save for showing error*/
            CL0OW01.CL0OWNBR = CLXREC.CLXLINEX;
          end
        else
          if (KL0OM001.CL0OMSEL[CLXLINEX] == "X")
            KL0OM001.CL0OMSEL[CLXLINEX] = " "; /* clear out code*/
            KL0OM001.CLKRQTQ[CLXLINEX] = " "; /* clear out code*/
            KL0OM001.CLKAUTHQ[CLXLINEX] = " "; /* clear out code*/
          end
        end
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
    end
    ;
    if (CLXREC.CLXTESTF == "Y") /* have author by qty w/o style*/
      CLXREC.CLXLINEX = 1;
      CLXREC.CLXTESTF = "N";
      while (CLXREC.CLXLINEX < 12
       && CLXREC.CLXTESTF == "N")
        if (KL0OM001.SY1STNBR[CLXLINEX] != " ")
          if (KL0OM001.CL0OMSEL[CLXLINEX] == "X"
           || KL0OM001.CL0OMTRN[CLXLINEX] == " ") /* have already deleted*/
             /* next sentence*/
          else
            CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1; /* increment line ctr*/
            CLXREC.CLXERRF = "Y"; /* have author by qty w/o style*/
            converseLib.validationFailed(575); /* delete quantity only record*/
            set KL0OM001.CL0OMSEL[CL0OWNBR] cursor, bold;
            KL0OM001.XXXERRID = "KL0O123";
            return;
          end
        end
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      end
    end
  end
  ;
   /* authorize all*/
  ;
  CLXREC.CLXTESTF = "N";
  CL0OW01.CL0OWNBR = 1;
  if ("AA" in KL0OM001.CL0OMSEL from CL0OWNBR)
    if (sysVar.arrayIndex == 1
     && CLXREC.CLXARY1X[1] == 1) /* on first page*/
      if (KL0OM001.SY1STNBR[1] == " ") /* need product to 'aa' - for 'm01'*/
        converseLib.validationFailed(8); /* selection is not valid*/
        KL0OM001.XXXERRID = "KL0O123";
        CLXREC.CLXERRF = "Y";
        set KL0OM001.CL0OMSEL[1] cursor, bold;
        return;
      else
        CL0OW01.CL0OWAAF = "Y"; /* save 'aa' code for author.new*/
                                   /* products*/
        CLXREC.CLXTESTF = "Y"; /* need to move 'a' to product lines*/
      end
    else
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM001.XXXERRID = "KL0O123";
      CLXREC.CLXERRF = "Y";
      return;
    end
    CL0OW01.CL0OWNBR = sysVar.arrayIndex + 1;
    if ("AA" in KL0OM001.CL0OMSEL from CL0OWNBR)
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM001.XXXERRID = "KL0O123";
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all products*/
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 11)
      if ("X" in KL0OM001.CL0OMSEL from CLXLINEX)
        CLXREC.CLXLINEX = sysVar.arrayIndex;
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1] + sysVar.arrayIndex - 1;
        if ("X" in CL0OW05.CL0OMSEL from CL0OW05X)
           /* next sentence - record already deleted from database*/
        else
          converseLib.validationFailed(390); /* can't authorize and cancel at the*/
                                   /* same time*/
          KL0OM001.XXXERRID = "KL0O123";
          set KL0OM001.CL0OMSEL[1] cursor, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else
        CLXREC.CLXLINEX = 12; /* force end of loop*/
      end
    end
    ;
    ;
  else
    return; /* don't need to check quantities*/
  end
  ;
  ;
   /* *******************************************************/
      /* Authorize all products and if needed, default qty*/
   /* *******************************************************/
  CL0OW01.CL0OWAAF = "Y"; /* Set all authorize flag*/
  ;
    /* Move 'A ' to all map option fields*/
  ;
  CLXREC.CLXLINEX = 1; /* Set index*/
  while (CLXREC.CLXLINEX <= 11) /* Until end of lines*/
    if (KL0OM001.SY1STNBR[CLXLINEX] != " ")
      if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC" /* leave sel typed by user*/
       || KL0OM001.CL0OMSEL[CLXLINEX] == "C"  
       || KL0OM001.CL0OMSEL[CLXLINEX] == "D"  
       || KL0OM001.CL0OMTRN[CLXLINEX] == "NC" /* leave trn cd shown on screen*/
       || KL0OM001.CL0OMTRN[CLXLINEX] == "C"  
       || KL0OM001.CL0OMTRN[CLXLINEX] == "D")
         /* next sentence*/
      else
        KL0OM001.CL0OMSEL[CLXLINEX] = "A "; /* Indicate authorized*/
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Increment counter*/
  end
  ;
  ;
    /* lines on current (first) screen will have values moved in*/
    /* regular editting process, to check for entered quantities*/
  ;
  if (CLXREC.CLXERRF == "N")
    CL0OW01.CL0OWSWR = "N"; /* set have reshown map flag 'n'*/
    CL0OW01.CL0OW05X = 12; /* Set index*/
    while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP) /* Until end of data*/
      if (CL0OW05.SY1STNBR[CL0OW05X] != " "
       && CL0OW05.CLKNBRSZ[CL0OW05X] == 0
       && CL0OW05.CL0OMSEL[CL0OW05X] == " "
       && CL0OW05.CL0OMTRN[CL0OW05X] == " ")
        CL0OW05.CL0OMSEL[CL0OW05X] = "A "; /* Indicate authorized*/
        CL0OW05.CL0OWUPK[CL0OW05X] = "Y"; /* Inidicate update*/
      else
        if (CL0OW05.SY1STNBR[CL0OW05X] != " "
         && CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* product came from invoice*/
          if (CL0OW05.CL0OMSEL[CL0OW05X] == " "
           || CL0OW05.CL0OMSEL[CL0OW05X] == "V")
            CL0OW05.CL0OMSEL[CL0OW05X] = "A";
            CL0OW05.CLKNBRSZ[CL0OW05X] = 0;
            CL0OW05.CL0OWUPK[CL0OW05X] = "Y"; /* Inidicate update*/
          else
            /* MOVE 9000 TO CL0OW01.CL0OW05X; End loop*/
            return;
          end
        end
      end
      ;
       /* default quantities*/
      ;
      if (CL0OW04.CLKRQTQ[CL0OW05X] == 0)
        CL0OW04.CLKRQTQ[CL0OW05X] = CL0OW05.IV3LNSQ[CL0OW05X];
      end
      if (CL0OW04.CLKRQTQ[CL0OW05X] > 0) /* need neg qty for auth*/
        CL0OW04.CLKRQTQ[CL0OW05X] = CL0OW04.CLKRQTQ[CL0OW05X] * -1;
      end
      CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OW05X];
      ;
      if (CL0OW04.CLKAUTHQ[CL0OW05X] == 0)
        CL0OW04.CLKAUTHQ[CL0OW05X] = CL0OW04.CLKRQTQ[CL0OW05X];
      end
      if (CL0OW04.CLKAUTHQ[CL0OW05X] > 0) /* need neg qty*/
        CL0OW04.CLKAUTHQ[CL0OW05X] = CL0OW04.CLKAUTHQ[CL0OW05X] * -1;
      end
      CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OW05X];
      ;
        /* calculate claim value*/
      ;
      CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OW05X]; /* set wk values*/
      CL0OW01.CL0OWWK3 = CL0OW04.CLKCLPRC[CL0OW05X];
      ;
      CL0OW05.CLAESTVL[CL0OW05X] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK3;
      ;
        /* set credit authorization flag*/
      ;
      CL0OW05.CLKCRFL[CL0OW05X] = "Y"; /* 01-19-90*/
      ;
      CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1; /* incr index*/
    end
  end
  ;
  ;
end // end KL0O123

// group edits
Function KL0O124()
   /* ************************************************************/
   /* *     group edits*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O124"; /* set current process name*/
  ;
  ;
   /* if this is a misshipment claim (c , d), edit that at least*/
   /* one product or size is authorized with 'a' or 'nc'*/
  ;
  CL0OW01.CL0OWNBR = 1; /* start at first prd*/
  CLXREC.CLXTESTF = "N";
  ;
  if ("C" in CL0OW05.CL0OMSEL
   || "D" in CL0OW05.CL0OMSEL
   || "C" in CL0OW05.CL0OMTRN
   || "D" in CL0OW05.CL0OMTRN)
    CL0OW01.CL0OWNBR = sysVar.arrayIndex;
    if (CL0OW05.CL0OMSEL[CL0OWNBR] == "X")
       /* next sentence - have deleted adjustment product*/
    else
      if ("S" in CL0OW05.CL0OMSEL)
         /* next sentence - may put 'nc' on size level*/
      else
        if ("Y" in CL0OW05.CLKCRFL /* authorized*/
         || "N" in CL0OW05.CLKCRFL /* 'nc'*/
         || "M" in CL0OW05.CLKCRFL) /* mixed,both auth and 'nc'*/
          ;
           /* now make sure auth prd for return wasn't deleted*/
          CL0OW01.CL0OWNBR = sysVar.arrayIndex;
          while (CL0OW01.CL0OWNBR <= CL0OW01.CL0OWNOP /* number of products*/
           && CLXREC.CLXTESTF == "N")
            if (CL0OW05.CL0OMSEL[CL0OWNBR] == "X") /* prd is deleted*/
              CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1;
                                   /* search for another*/
            else
              CLXREC.CLXTESTF = "Y"; /* found usable auth for rtn prd*/
              return;
            end
            ;
            if ("Y" in CL0OW05.CLKCRFL from CL0OWNBR /* authorized*/
             || "N" in CL0OW05.CLKCRFL from CL0OWNBR /* 'nc'*/
             || "M" in CL0OW05.CLKCRFL from CL0OWNBR) /* mixed,both auth and 'nc'*/
              CL0OW01.CL0OWNBR = sysVar.arrayIndex;
            end
            if (sysVar.arrayIndex == 0)
              CLXREC.CLXTESTF = "Y"; /* force out of loop*/
            end
          end
          ;
          if (CL0OW01.CL0OWNBR > CL0OW01.CL0OWNOP
           || CLXREC.CLXTESTF == "Y") /* didn't find usable auth for rtn prds*/
            converseLib.validationFailed(484); /* misshipment claim w/ c/d req 1 auth prod*/
            KL0OM001.XXXERRID = "KL0O124";
            /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
            CL0OW05.CL0OMSEL[CL0OWNOP] = " "; /* clear delete from array*/
            CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; /* one was added above*/
            KL0OM001.CL0OMSEL[CL0OWNBR] = " "; /* clear delete from screen*/
            return;
          end
          ;
        else
          if ("NC" in KL0OM001.CL0OMSEL) /* 'nc' found on screen*/
            return;
          else
            converseLib.validationFailed(484); /* misshipment claim w/ c/d req 1 auth*/
            KL0OM001.XXXERRID = "KL0O124";
            CLXREC.CLXERRF = "Y";
            return;
          end
        end
      end
    end
  end
  ;
  ;
   /* IF CLXREC.CLXCSCRN EQ 'CL0OM010'       ; look at size array*/
    /* IF 'C' IN CL0OW03.CL0OMSEL;*/
      /* OR 'D' IN CL0OW03.CL0OMSEL;*/
      /* OR 'C' IN CL0OW03.CL0OMTRN;*/
      /* OR 'D' IN CL0OW03.CL0OMTRN;*/
      /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
      /* IF CL0OW03.CL0OMSEL(CL0OWNBR) EQ 'X';*/
        /* ; next sentence - have deleted adjustment product*/
      /* ELSE ;*/
        /* IF 'A' IN CL0OW03.CL0OMSEL       ; check size level*/
          /* OR 'NC' IN CL0OW03.CL0OMSEL;*/
          /* OR 'A' IN CL0OW03.CL0OMTRN;*/
          /* OR 'NC' IN CL0OW03.CL0OMTRN;*/
          /* ; now make sure auth size wasn't deleted*/
          /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
   /* WHILE CL0OW01.CL0OWNBR LE CL0OW01.CL0OWNOS; number of sizes*/
            /* AND CLXREC.CLXTESTF EQ 'N';*/
   /* IF CL0OW03.CL0OMSEL(CL0OWNBR) EQ 'X'; prd is deleted*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1; search for another*/
           /* ELSE ;*/
   /* MOVE 'Y' TO CLXREC.CLXTESTF; found usable authorized prd*/
              /* EZERTN;*/
            /* END ;*/
            /* ;*/
   /* IF 'A' IN CL0OW03.CL0OMSEL(CL0OWNBR); found authorized prd*/
             /* OR 'NC' IN CL0OW03.CL0OMSEL(CL0OWNBR);*/
             /* OR 'A' IN CL0OW03.CL0OMTRN(CL0OWNBR);*/
             /* OR 'NC' IN CL0OW03.CL0OMTRN(CL0OWNBR);*/
             /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
           /* END ;*/
           /* IF EZETST EQ 0        ; found no other auth prds*/
             /* MOVE 'Y' TO CLXREC.CLXTESTF; force out of loop*/
           /* END ;*/
         /* END ;*/
         /* ;*/
         /* IF CL0OW01.CL0OWNBR GT CL0OW01.CL0OWNOS;*/
   /* OR CLXREC.CLXTESTF EQ 'Y'; didn't find usable authorized prd*/
   /* mOVE 484 TO EZEMNO; misshipment claim w/ c/d req 1 auth prod*/
           /* MOVE 'KL0O124' TO CL0OM010.XXXERRID;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
   /* MOVE ' ' CL0OW03.CL0OMSEL(CL0OWNOS)    ; clear delete from a*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; one was added above*/
           /* IF CL0OW01.CL0OWNBR GT 11    ; not on first screen*/
    /* CL0OW01.CL0OWNUM = CL0OW01.CL0OWNBR / 11; hold remainder*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWREM * 11 * .01 (R; round*/
   /* MOVE ' ' CL0OM010.CL0OMSEL(CL0OWNBR) ;clear delete from sc*/
           /* ELSE ;*/
   /* MOVE ' ' CL0OM010.CL0OMSEL(CL0OWNBR) ; clear delete from sc*/
          /* END ;*/
          /* EZERTN;*/
        /* END ;*/
   /* ELSE                      ; check summary (product) level*/
        /* IF 'Y' IN CL0OW05.CLKCRFL      ; authorized*/
          /* OR 'N' IN CL0OW05.CLKCRFL    ; 'nc'*/
          /* OR 'm' IN CL0OW05.CLKCRFL    ; both auth and 'nc'*/
          /* ;*/
   /* ; now make sure auth prd isn't same as we are looking at*/
          /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
   /* WHILE CL0OW01.CL0OWNBR LE CL0OW01.CL0OWNOP; nbr of products*/
            /* AND CLXREC.CLXTESTF EQ 'N';*/
            /* IF CL0OW01.CL0OWNBR EQ CL0OW01.CL0OW05X;*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1; search for another*/
    /* ELSE ;*/
      /* MOVE 'Y' TO CLXREC.CLXTESTF; found usable authorized prd*/
      /* EZERTN;*/
    /* END ;*/
    /* ;*/
    /* IF 'Y' IN CL0OW05.CLKCRFL(CL0OWNBR); authorized*/
      /* OR 'N' IN CL0OW05.CLKCRFL(CL0OWNBR); 'nc'*/
      /* OR 'm' IN CL0OW05.CLKCRFL(CL0OWNBR); both auth and 'nc'*/
      /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
    /* END ;*/
      /* IF EZETST EQ 0      ; found no other prd auth for rtn*/
        /* MOVE 'Y' TO CLXREC.CLXTESTF; get out of loop*/
        /* MOVE 'Y' TO CLXREC.CLXERRF; stay on screen*/
      /* END ;*/
    /* END ;*/
    /* ;*/
    /* IF CL0OW01.CL0OWNBR GT CL0OW01.CL0OWNOP;*/
   /* OR CLXREC.CLXTESTF EQ 'Y'; didn't find usable authorized prd*/
   /* MOVE 484 EZEMNO ;misshipment claim w/ c/d req 1 auth prod*/
              /* MOVE 'KL0O124' TO CL0OM001.XXXERRID;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
   /* MOVE ' ' CL0OW05.CL0OMSEL(CL0OWNOP)    ; clear delete from a*/
   /* cL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; one was added above*/
   /* MOVE ' ' CL0OM001.CL0OMSEL(CL0OWNBR)   ; clear delete from s*/
        /* EZERTN;*/
      /* END ;*/
    /* ELSE ;*/
   /* MOVE 484 TO EZEMNO; misshipment claim w/ c/d req 1 auth prod*/
      /* MOVE 'KL0O124' TO CL0OM001.XXXERRID;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* EZERTN;*/
    /* END ;*/
        /* END ;*/
      /* END ;*/
   /* END ;*/
   /* END ;*/
  ;
  ;
end // end KL0O124

// edit pff and quantities
Function KL0O125()
   /* ************************************************************/
   /* *                                                         **/
   /* *      VERIFY THE CLAIM PRICE, PRICE FROM FLAG,           **/
   /* *           AND QUANTITY                                  **/
   /* *                                                         **/
   /* *   1) Edits:                                             **/
   /* *                                                         **/
   /* *      - Claim Price - verify that the claim price is     **/
   /* *          entered for a valid price from flag.           **/
   /* *      - Price From Flag - verify that the price from     **/
   /* *          flag is either 'E', 'I', or 'P'.               **/
   /* *      - Quantity - verify that the quantity is entered   **/
   /* *          for a selection code of 'A' and gt 0           **/
   /* *                                                         **/
   /* *************************************************************/
   /* M A I N T E N A N C E     H I S T O R Y           **/
   /* -----------------------------------------------------------**/
   /* DATE    LOGON ID  REASON                                **/
   /* --------  --------  --------------------------------------**/
   /* 06-17-91   GDECKE   EXPAND W04/W05 TABLE TO 1000 LINES    **/
   /* 11-07-91   sgorga   Added code to prevent users from      **/
   /* manually entering 'I' in 'Price From' field unless  **/
   /* the select code is an 'A', 'AA', 'C', 'S', or 'SA'. **/
   /* Code was added mainly to prevent users from entering**/
   /* 'I' for 'NC' lines - that situation was causing the  **/
   /* customer to get CREDIT for the NC products.         **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O125"; /* Set current process name*/
  ;
  ;
   /* ***************************/
       /* Claim Price*/
   /* ***************************/
  ;
   /* IF CL0OW04.CLKCLPRC(CL0OW05X) EQ 0     ; had no previous pri*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM001.CLKCLPRC(CLXLINEX) NE CL0OW04.CLKCLPRC(CL0OW05*/
      /* AND CL0OW05.CL0OWFPR(CL0OW05X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; can't change price for nc,*/
      /* MOVE 'KL0O125' TO CL0OM001.XXXERRID; Process name*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* SET CL0OM001.CLKCLPRC(CLXLINEX) CURSOR,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
  ;
   /* IF CL0OM001.CL0OMSEL(CLXLINEX) EQ 'NC' ; dont check non-std*/
    /* OR CL0OM001.CL0OMSEL(CLXLINEX) EQ '  '; if no charge or no*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OW05.CL0OMSEL(CL0OW05X) EQ 'NC'; dont check non-std*/
      /* AND CL0OM001.CL0OMSEL(CLXLINEX) EQ 'S'; for no charge pr*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* IF CL0OW05.XUMCD(CL0OW05X) NE '01' ; uom code is not eac*/
        /* MOVE 'Y' TO CLXREC.CLXERRF       ; show warning messag*/
        /* MOVE 'KL0O125' TO CL0OM001.XXXERRID; Process name*/
        /* MOVE 576 TO EZEMNO        ; uom code not eaches  -need*/
        /* SET CL0OM001.CL0OMSEL(CLXLINEX) CURSOR,BRIGHT;*/
      /* END ;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC") /* no price needed*/
     /* next sentence*/
  else
    if (CL0OW05.CL0OMSEL[CL0OW05X] == "NC"
     && KL0OM001.CL0OMSEL[CLXLINEX] == "S")
       /* next sentence*/
    else
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
       && KL0OM001.CLKCLPRC[CLXLINEX] == 0)  /* and a price not entered*/
        if (CL0OW04.OP2PRCVF[CL0OW05X] == "Y") /* no price shown on screen*/
           /* next sentence*/
        else
          CLXREC.CLXERRF = "Y";
          CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
          KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
          converseLib.validationFailed(217); /* Price must be entered*/
          set KL0OM001.CLKCLPRC[CLXLINEX] cursor, modified, bold;
        end
      else
        /* IF CL0OM001.CLKPRCFF(CLXLINEX) EQ 'E'; If PFF is 'E'ntered*/
          /* AND CL0OM001.CLKPRCFF(CLXLINEX) NE CL0OW04.CLKPRCFF(CL0OW0*/
          /* AND CL0OM001.CLKCLPRC(CLXLINEX) EQ CL0OW04.CLKCLPRC(CLXLIN*/
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
         /* MOVE 'Y' TO CL0OW01.CL0OWPSW   ; Set the problem switch*/
         /* MOVE 'KL0O125' TO CL0OM001.XXXERRID; Process name*/
         /* MOVE 217 TO EZEMNO      ; Price must be entered*/
         /* SET CL0OM001.CLKCLPRC(CLXLINEX) CURSOR,MODIFIED,BRIGHT;*/
        /* ELSE ;*/
        if (KL0OM001.CLKPRCFF[CLXLINEX] != "E" /* If PFF not 'E'ntered*/
         && KL0OM001.CLKCLPRC[CLXLINEX] != CL0OW04.CLKCLPRC[CL0OW05X])
          CLXREC.CLXERRF = "Y";
          CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
          KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
          converseLib.validationFailed(222); /* Cannot change price*/
          set KL0OM001.CLKCLPRC[CLXLINEX] cursor, bold;
          KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLKCLPRC[CL0OW05X];
        else
          if (KL0OM001.CLMTRTSQ[CLXLINEX] > 0) /* have returned qty*/
            if (KL0OM001.CLKPRCFF[CLXLINEX] != CL0OW04.CLKPRCFF[CL0OW05X]
             && KL0OM001.CLKPRCFF[CLXLINEX] == "E")
                                   /* If PFF is 'E'ntered*/
              CLXREC.CLXERRF = "Y";
              KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
              converseLib.validationFailed(342); /* Cannot have entered price*/
              set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
              KL0OM001.CLKPRCFF[CLXLINEX] = CL0OW04.CLKPRCFF[CL0OW05X];
            end
            if (KL0OM001.CLKCLPRC[CLXLINEX] != CL0OW04.CLKCLPRC[CL0OW05X])
              CLXREC.CLXERRF = "Y";
              CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
              KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
              converseLib.validationFailed(342); /* Cannot have entered price w rtn qty*/
              set KL0OM001.CLKCLPRC[CLXLINEX] cursor, bold;
              KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLKCLPRC[CL0OW05X];
            end
          else
            if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
             && KL0OM001.CLKCLPRC[CLXLINEX] != 0   /* and claim price entered*/
             && KL0OM001.SY1STNBR[CLXLINEX] != " ") /* and prod id is entered*/
              CL0OW04.CLKCLPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
              CL0OW04.CLNNTPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
              CL0OW04.CLNGRPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
            end
          end
        end
      end
    end
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
    KL0OM001.CLKCLPRC[CLXLINEX] = 0;
    CL0OW04.CLKCLPRC[CL0OW05X] = 0;
  end
  ;
   /* ***************************/
     /* Edit Price-From Flag*/
   /* ***************************/
  ;
   /* IF CL0OW04.CLKPRCFF(CL0OW05X) EQ ' '   ; had no previous pri*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM001.CLKPRCFF(CLXLINEX) NE CL0OW04.CLKPRCFF(CL0OW05*/
      /* AND CL0OW05.CL0OWFPR(CL0OW05X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; cannot change price with c*/
      /* MOVE 'KL0O125' TO CL0OM001.XXXERRID;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* SET CL0OM001.CLKPRCFF(CLXLINEX) CURSOR,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "S")
     /* next sentence*/
  else
    if (KL0OM001.CLKPRCFF[CLXLINEX] == " "
     && KL0OM001.CLKCLPRC[CLXLINEX] == 0)
      if (KL0OM001.SY1STNBR[CLXLINEX] != " ")
        KL0OM001.CLKPRCFF[CLXLINEX] = "P";
        if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
           /* now it doesn't look like price changed for cl0o127*/
          CL0OW04.CLKPRCFF[CL0OW05X] = "P";
        end
      else
         /* next sentence      no product entered  08-28-90*/
      end
    else
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* Entered price*/
       || KL0OM001.CLKPRCFF[CLXLINEX] == "I" /* Invoice price*/
       || KL0OM001.CLKPRCFF[CLXLINEX] == "P") /* Product price*/
         /* next sentence*/
      else
        if (KL0OM001.CLKPRCFF[CLXLINEX] == "O") /* override invoice price*/
          if (CL0OW04.CLKPRCFF[CL0OW05X] == "O")
             /* next sentence*/
          else
             /* user changed flag*/
            KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
            converseLib.validationFailed(201); /* Price from is invalid*/
            CLXREC.CLXERRF = "Y";
            set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
          end
        else
          KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
          converseLib.validationFailed(201); /* Price from is invalid*/
          CLXREC.CLXERRF = "Y";
          set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
        end
      end
    end
  end
   /* 11-07-91  sgorga  This code is to prevent users from manually*/
   /* entering 'I' in the 'price from' field when they have entered*/
   /* a sel code (such as NC) that is not valid with an 'I'.*/
  if (KL0OM001.CLKPRCFF[CLXLINEX] == "I") /* If price-from flag = 'I' and*/
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"  /* selected trans code = 'A'*/
     || KL0OM001.CL0OMSEL[CLXLINEX] == "AA" /* or 'AA'*/
     || KL0OM001.CL0OMSEL[CLXLINEX] == "C"  /* or 'C'*/
     || KL0OM001.CL0OMSEL[CLXLINEX] == "S"  /* or 'S'*/
     || KL0OM001.CL0OMSEL[CLXLINEX] == "SA") /* or 'SA'*/
      /* next sentence                       it's okay*/
    else /**/
      KL0OM001.XXXERRID = "KL0O125"; /* process name*/
      converseLib.validationFailed(696); /* 'Price from = I' not valid for sel code*/
      CLXREC.CLXERRF = "Y";
      set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
    end
  end
  ;
  ;
             /* ***************************/
                     /* Quantity*/
             /* ***************************/
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "S")
    return; /* no quantities required*/
  end
  ;
   /* ************************************************************/
   /* * default quantities and give correct sign for credit/auth*/
   /* ************************************************************/
   /* if shipped qty eq 0*/
      /* and requested qty eq 0 and authorized qty eq 0*/
      /* give error*/
   /* end*/
   /* if cust qty eq 0*/
      /* default cust qty from shipped qty*/
   /* end*/
   /* if authorized qty eq 0*/
     /* default authorized qty from customer qty*/
   /* end*/
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] == 0 /* no default qty*/
   && KL0OM001.CLKRQTQ[CLXLINEX] == 0 
   && KL0OM001.CLKAUTHQ[CLXLINEX] == 0
   && KL0OM001.SY1STNBR[CLXLINEX] != " ") /* and product exists 08-28-90*/
    converseLib.validationFailed(231); /* quantity required*/
    KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
    if (KL0OM001.CLKRQTQ[CLXLINEX] == 0)
      KL0OM001.CLKRQTQ[CLXLINEX] = KL0OM001.IV3LNSQ[CLXLINEX];
    end
    if (KL0OM001.CLKAUTHQ[CLXLINEX] == 0)
      KL0OM001.CLKAUTHQ[CLXLINEX] = KL0OM001.CLKRQTQ[CLXLINEX];
    end
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
     /* need negative quantities*/
    if (KL0OM001.CLKRQTQ[CLXLINEX] > 0)
      KL0OM001.CLKRQTQ[CLXLINEX] = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
    end
    if (KL0OM001.CLKAUTHQ[CLXLINEX] > 0)
      KL0OM001.CLKAUTHQ[CLXLINEX] = KL0OM001.CLKAUTHQ[CLXLINEX] * -1;
    end
  end
  ;
  ;
   /* ************************************************************/
   /* *     edit customer requested quantity*/
   /* ************************************************************/
  ;
   /* if cust qty greater than non-zero shipped qty*/
  ;
  if (KL0OM001.CLKRQTQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM001.CLKRQTQ[CLXLINEX];
  end
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM001.IV3LNSQ[CLXLINEX])
    converseLib.validationFailed(461); /* cust qty cannot exceed invoice shpd qty*/
    KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    if (CL0OW01.CL0OWWK1 > 9999) /* if quantity over 9999 then show*/
      KL0OM001.CLKRQTQ[CLXLINEX] = CL0OW01.CL0OWWK1; /* without the sign*/
    end
    set KL0OM001.CLKRQTQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ - CL0OW04.CLKRQTQ[CL0OW05X];
  CL0OW04.CLKRQTQ[CL0OW05X] = KL0OM001.CLKRQTQ[CLXLINEX];
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OW05X];
  if (CL0OW01.CL0OWWK1 > 9999) /* if quantity over 9999 then show*/
    KL0OM001.CLKRQTQ[CLXLINEX] = CL0OW01.CL0OWWK1;
                                   /* without the sign*/
  end
  ;
  ;
   /* ************************************************************/
   /* *     edit authorized claim quantity*/
   /* ************************************************************/
  ;
   /* if authorized qty greater than non-zero shipped qty*/
  ;
  if (KL0OM001.CLKAUTHQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM001.CLKAUTHQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM001.CLKAUTHQ[CLXLINEX];
  end
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM001.IV3LNSQ[CLXLINEX])
    converseLib.validationFailed(462); /* use nc to author above shipd qty*/
    KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
   /* returned qty gt authorized qty, not an error only warning*/
  ;
  if (KL0OM001.CLMTRTSQ[CLXLINEX] > CL0OW01.CL0OWWK1
   && CL0OW05.YCECD[CL0OW05X] != " ")
    KL0OM001.XXXERRID = "KL0O125"; /* Process name*/
    converseLib.validationFailed(388); /* Cannot be greater than*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
  end
  ;
  ;
  if (KL0OM001.SY1STNBR[CLXLINEX] != " " /* If prod id is entered*/
   || YCRTBL.YCRSPARN[CLXYCRX] == "Y")  
                                   /* no prod reqd for special arrng*/
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ - CL0OW04.CLKAUTHQ[CL0OW05X];
    CL0OW04.CLKAUTHQ[CL0OW05X] = KL0OM001.CLKAUTHQ[CLXLINEX];
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OW05X];
  end
  ;
  ;
end // end KL0O125

// edit nike prod id
Function KL0O126()
   /* *************************************************************/
   /* *                                                          **/
   /* *            SELECT FROM DPROD.VCOLOR02                    **/
   /* *                                                          **/
   /* *   1) Select the row from the product file to see if it   **/
   /* *      exists.                                             **/
   /* *                                                          **/
   /* *************************************************************/
   /* *         M A I N T E N A N C E     H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON ID   REASON                               **/
   /* *----------------------------------------------------------**/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to product matching**/
   /* *                   LOGIC and Dup product edists.          **/
   /* * 06-17-91 GDECKE   EXPAND W04/W05 TABLE TO 1000 LINES.    **/
   /* * 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES                **/
   /* * 04-13-92 twatso   april DB2 TABLE CHANGES                **/
   /* * 10-25-00 GDECKE   REMOVE TEST FOR PREPACK COMPONENTS     **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O126"; /* Set current process name*/
  ;
  ;
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y"    /* special arrangement*/
   && KL0OM001.SY1STNBR[CLXLINEX] == " " /* If Nike prod id eq ' '*/
   && KL0OM001.SY2CLRID[CLXLINEX] == " " 
   && KL0OM001.XDMCD[CLXLINEX] == " ")  
    CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    return;
  end
  ;
  ;
  if (KL0OM001.SY1STNBR[CLXLINEX] == " " /* If Nike prod id eq ' '*/
   && KL0OM001.SY2CLRID[CLXLINEX] == " " 
   && KL0OM001.XDMCD[CLXLINEX] == " ")  
    CL0OW05.CL0OMSEL[CL0OW05X] = " ";
    CL0OW05.SY1STNBR[CL0OW05X] = " ";
    CL0OW05.SY2CLRID[CL0OW05X] = " ";
    CL0OW05.XDMCD[CL0OW05X] = " ";
    CL0OW05.XUMCD[CL0OW05X] = " ";
    CL0OW04.XQACD[CL0OW05X] = " ";
    CL0OW08.XEGCD[CL0OW05X] = "000";
    CL0OW08.XBK-BK-SESN-CD[CL0OW05X] = " ";
    CL0OW08.OP-BK-YR[CL0OW05X] = 0;
    CL0OW08.OP-BK-MO[CL0OW05X] = 0;
    CL0OW04.CLKRQTQ[CL0OW05X] = 0;
    CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
    CL0OW04.CLKPRCFF[CL0OW05X] = " ";
    KL0OM001.CLKPRCFF[CL0OW05X] = " ";
    CL0OW04.CLMTRTSQ[CL0OW05X] = 0;
    CL0OW05.CL0OWERR[CL0OW05X] = "N";
    CLXREC.CLXERRF = "Y"; /* Indicate error*/
    KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
    converseLib.validationFailed(200); /* Nike prod id not valid*/
    set KL0OM001.SY1STNBR[CLXLINEX] cursor, bold;
    set KL0OM001.SY2CLRID[CLXLINEX] bold;
    set KL0OM001.XDMCD[CLXLINEX] bold;
    return;
  end
  ;
  ;
   /* *********************************************/
    /* user can enter products on screen only when*/
     /* - non-crediting the prod*/
     /* - have misshipment*/
     /* - have no invoice on claim*/
     /* - prod is part of a prepack*/
     /* - authorizing*/
   /* any time they have the itch to do so*/
   /* *********************************************/
  ;
  CLXREC.CLXTESTF = "N"; /* init prepack flag*/
  if (CL0OW05.SY1STNBR[CL0OW05X] == " "
   && CL0OW05.SY2CLRID[CL0OW05X] == " "
   && CL0OW05.XDMCD[CL0OW05X] == " ") /* have new entry*/
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "C"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "D"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "A"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "S") /* to add sizes*/
       /* okay to add non credit products or misshipments*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    else
      if (KL0OM001.IV0IVCID == 0)
         /* okay to add prds if no invoice attached*/
        CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
      else
        ;
         /* need to validate product id before validating if this*/
         /* product is part of a prepack*/
        ;
        CLXREC.CLXTESTF = "Y";
      end
    end
  end
  ;
  ;
    /* *****************************/
       /* validate product id*/
    /* *****************************/
  ;
  ;
  set SYCREC empty; /* Product table*/
  SYCREC.XGPCD = CLAREC.XGPCD; /* Gpc code*/
  SYCREC.SY1STNBR = KL0OM001.SY1STNBR[CLXLINEX]; /* Style*/
  if (KL0OM001.SY2CLRID[CLXLINEX] == " ")
    KL0OM001.SY2CLRID[CLXLINEX] = "00";
  end
  if (KL0OM001.XDMCD[CLXLINEX] == " ")
    KL0OM001.XDMCD[CLXLINEX] = "00";
  end
  SYCREC.SY2CLRID = KL0OM001.SY2CLRID[CLXLINEX]; /* Color*/
  SYCREC.XDMCD = KL0OM001.XDMCD[CLXLINEX]; /* Dimension*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
     /* *********************************************/
             /* handle prepacks*/
    ;
    if (CLXREC.CLXTESTF == "N") /* not looking for component of prepack*/
       /* next sentence*/
    else
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
      converseLib.validationFailed(8); /* selection is not valid*/
      set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    /* THIS TEST REMOVED 10-25-00 BY GDECKE*/
    /* THIS PREPACK CONDITION NOT EXPECTED TO HAPPEN PLUS PRICE WILL*/
    /* NOT BE AVAILABLE FOR PREPACK COMPONENTS ON DPROD.VPGSTY01*/
       /* look up as partial package*/
    ;
     /* SET SYJREC EMPTY;*/
     /* MOVE SYCREC.XGPCD TO SYJREC.XGPCD;*/
     /* MOVE SYCREC.SY1STNBR TO SYJREC.SY1STNBR;*/
     /* MOVE SYCREC.SY2CLRID TO SYJREC.SY2CLRID;*/
     /* MOVE SYCREC.XDMCD TO SYJREC.XDMCD;*/
    ;
     /* CALL IO2130 'S2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
    ;
     /* CALL IO2130 'N2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
     /* MOVE 'N' TO CLXREC.CLXTESTF; /* re-init prepack flag*/
    ;
     /* WHILE SQLCA.SQLCODE EQ 0     /* look at all prepack group ids*/
       /* AND CLXREC.CLXTESTF EQ 'N';*/
    ;
       /* IF SYJREC.SYJPGNBR IN CL0OW05.SY1STNBR;/* found group id*/
         /* MOVE 'Y' TO CLXREC.CLXTESTF;*/
       /* ELSE;*/
         /* CALL IO2130 'N2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
       /* END;*/
     /* END;*/
    ;
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE;/* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
    ;
     /* CALL IO2130 'C2',SQLCA,SYJREC (NOMAPS,NONCSP;/* dprod.vpgsty01*/
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE;/* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
     /* IF CLXREC.CLXTESTF EQ 'Y';   /* found component of prepack*/
       /* CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;*/
       /* MOVE 'Y' TO CL0OW05.CL0OWPPF(CL0OW05X);/* set prepack flag*/
       /* MOVE 'P' TO CL0OW05.CL0OWLVL(CL0OW05X);/* worked at prod level*/
       /* ; /* default price to be used in price calculation cl0o127*/
       /* MOVE SYJREC.SYJSTYPR TO CL0OW04.CLNNTPRC(CL0OW05X);*/
       /* MOVE SYJREC.SYJSTYPR TO CL0OW04.CLNGRPRC(CL0OW05X);*/
     /* ELSE;                        /* not part of prepack*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;/* Indicate error*/
       /* MOVE 'KL0O126' TO KL0OM001.XXXERRID;/* Process name*/
       /* MOVE 8 TO EZEMNO;          /* selection is not valid*/
       /* SET KL0OM001.CL0OMSEL(CLXLINEX) CURSOR,BRIGHT;*/
       /* EZERTN;*/
     /* END;*/
    /* END;*/
    ;
     /* *********************************************/
    ;
    ;
    if (CL0OW05.XUMCD[CL0OW05X] == " ") /* 10-04-90*/
      CL0OW05.XUMCD[CL0OW05X] = SYCREC.XUMCD;
    end
    ;
    if (SYCREC.XUMCD != CL0OW05.XUMCD[CL0OW05X] /* if diff UOM's exist*/
     && KL0OM001.CLKPRCFF[CLXLINEX] != "I")     /* and uom not from ivc*/
      /* ***MOVE 'Y' TO CL0OW05.CL0OWUMF(CL0OW05X);set for prc conv*/
      KL0OM001.CL0OWMSG = "    XUM OVERRIDE"; /* override message*/
      CL0OW01.CL0OWMSG = "    XUM OVERRIDE"; /* override message*/
    end
    ;
     /* 072089 add 5 lines:*/
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC") /* use to check dup prod*/
      CLKREC.CLKCRFL = "N";
    else
      CLKREC.CLKCRFL = "Y";
    end
     /* 072089 put 4 lines here instead of in CL0OS36:*/
    CLKREC.IV0IVCID = KL0OM001.IV0IVCID;
    CLKREC.SY1STNBR = KL0OM001.SY1STNBR[CLXLINEX];
    CLKREC.SY2CLRID = KL0OM001.SY2CLRID[CLXLINEX];
    CLKREC.XDMCD = KL0OM001.XDMCD[CLXLINEX];
    if (CL0OW05.XUMCD[CL0OW05X] == " ") /* 10-04-90*/
      CLKREC.XUMCD = SYCREC.XUMCD;
    else
      CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
    end
    ;
    if (CL0OW04.XQACD[CL0OW05X] == " ") /* 10-04-90*/
      CLKREC.XQACD = "01";
    else
      CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
    end
    ;
    if (CL0OW08.XEGCD[CL0OW05X] == "   ")
      CLKREC.XEGCD = "000";
    else
      CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
    end
    ;
    if (CL0OW08.XBK-BK-SESN-CD[CL0OW05X] == " ")
      CLKREC.XBK-BK-SESN-CD = "  ";
    else
      CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
    end
    ;
    CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
    CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
    ;
    KL0OS36(); /* Select RA item; is already auth?*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && KL0OM001.CL0OMSEL[CLXLINEX] != "S") /* 10-04-90*/
      CL0OW01.CL0OWEFL = "N"; /* Set product exist flag to no*/
         /* MOVE 'N' TO CL0OW05.CL0OWERR(CL0OW05X); set err flag OFF*/
      /* **********************************************************/
        /* If the RA item exists in the DCLAIM.VRAITM01 database*/
        /* then check to see if that particular product exists in*/
        /* the current working storage.  If it does exist in WS,*/
        /* then give user a message indicating fast path positioning.*/
        /* Else indicate product can't be entered since already auth.*/
      /* **********************************************************/
      KL0OS30(); /* Check to see if product exists in WS*/
      if (CL0OW01.CL0OWEFL == "Y") /* If the product is in WS*/
        if (CL0OW05.SY1STNBR[CL0OW05X] == " " /* and user is adding*/
         || CL0OW05.CL0OWERR[CL0OW05X] == "Y")
                                   /* err flag has been displayed*/
          converseLib.validationFailed(212);
                                   /* prod exist as RA - Fast path position*/
               /* MOVE 'Y' TO CLXREC.CLXERRF   Indicate error 10-04-90*/
          CL0OW01.CL0OWPSW = "Y"; /* Indicate problem*/
          KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
           /* 10-04-90 save prod in ws so user can pf11 to chg xqa or uom*/
                    /* if so desired*/
          CL0OW05.SY1STNBR[CL0OW05X] = KL0OM001.SY1STNBR[CLXLINEX];
          CL0OW05.SY2CLRID[CL0OW05X] = KL0OM001.SY2CLRID[CLXLINEX];
          CL0OW05.XDMCD[CL0OW05X] = KL0OM001.XDMCD[CLXLINEX];
          ;
          if (CL0OW04.XQACD[CL0OW05X] == " ") /* 10-04-90*/
            CL0OW04.XQACD[CL0OW05X] = "01";
          end
          ;
          if (CL0OW08.XEGCD[CL0OW05X] == "   ") /* 10-04-90*/
            CL0OW08.XEGCD[CL0OW05X] = "000";
          end
          ;
          if (CL0OW08.XBK-BK-SESN-CD[CL0OW05X] == " ") /* 10-04-90*/
            CL0OW08.XBK-BK-SESN-CD[CL0OW05X] = "  ";
          end
          ;
           /* 10-04-90 set error flag so the err will be re displayed*/
                    /* if the user PF11's to map 005*/
          CL0OW05.CL0OWERR[CL0OW05X] = "Y";
          set KL0OM001.SY1STNBR[CLXLINEX] cursor, bold;
          set KL0OM001.SY2CLRID[CLXLINEX] bold;
          set KL0OM001.XDMCD[CLXLINEX] bold;
          return; /* 072089 add*/
        end
      end
       /* 072089 condense if-end-set; CLKCRFL now checked in IO1280*/
      if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
        converseLib.validationFailed(344); /* non-credit product already exists*/
      else
        converseLib.validationFailed(345); /* credit product already exists*/
      end
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      CL0OW01.CL0OWPSW = "Y"; /* Indicate problem*/
      KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
      set KL0OM001.SY1STNBR[CLXLINEX] cursor, bold;
      set KL0OM001.SY2CLRID[CLXLINEX] bold;
      set KL0OM001.XDMCD[CLXLINEX] bold;
    else
      CL0OW05.SY1STNBR[CL0OW05X] = KL0OM001.SY1STNBR[CLXLINEX];
      CL0OW05.SY2CLRID[CL0OW05X] = KL0OM001.SY2CLRID[CLXLINEX];
      CL0OW05.XDMCD[CL0OW05X] = KL0OM001.XDMCD[CLXLINEX];
      if (CL0OW04.XQACD[CL0OW05X] == " ")
        CL0OW04.XQACD[CL0OW05X] = "01";
      end
      ;
      if (CL0OW08.XEGCD[CL0OW05X] == "   ")
        CL0OW08.XEGCD[CL0OW05X] = "000";
      end
      ;
      if (CL0OW08.XBK-BK-SESN-CD[CL0OW05X] == " ")
        CL0OW08.XBK-BK-SESN-CD[CL0OW05X] = "  ";
      end
      ;
      if (CL0OW05.XUMCD[CL0OW05X] == " ")
        CL0OW05.XUMCD[CL0OW05X] = SYCREC.XUMCD; /* 10-04-90*/
      end
      CL0OW05.CL0OWERR[CL0OW05X] = "N"; /* set err msg flag to no*/
      if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC") /* non-credit*/
        CL0OW05.CLKCRFL[CL0OW05X] = "N";
      else
        if (KL0OM001.CL0OMSEL[CLXLINEX] == " " /* If no selection*/
         && converseVar.eventKey not pf11)     /* user may want to change xqa or xum b4*/
                                   /* auth*/
          converseLib.validationFailed(429);
                                   /* authorize or cancel prod just entered*/
          CLXREC.CLXERRF = "Y"; /* Indicate error*/
          KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
          set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
        else
          if (KL0OM001.CL0OMSEL[CLXLINEX] != "S") /* If no selection*/
            CL0OW05.CLKCRFL[CL0OW05X] = "Y"; /* 072089 add*/
          end
        end
      end
    end
    ;
  else /* product was not found on style*/
                                   /* database*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(200); /* Nike prod id not valid*/
      CL0OW05.CL0OMSEL[CL0OW05X] = " ";
      CL0OW05.CL0OWUPK[CL0OW05X] = " ";
      KL0OM001.CL0OMSEL[CLXLINEX] = " "; /* 08-28-90*/
      CL0OW05.SY1STNBR[CL0OW05X] = " ";
      CL0OW05.SY2CLRID[CL0OW05X] = " ";
      CL0OW05.XDMCD[CL0OW05X] = " ";
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW04.CLKPRCFF[CL0OW05X] = " ";
      KL0OM001.CLKPRCFF[CLXLINEX] = " ";
      CL0OW04.CLMTRTSQ[CL0OW05X] = 0;
      CL0OW05.CL0OWERR[CL0OW05X] = "N"; /* set err msg flag to no*/
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0OM001.XXXERRID = "KL0O126"; /* Process name*/
      set KL0OM001.SY1STNBR[CLXLINEX] cursor, bold;
      set KL0OM001.SY2CLRID[CLXLINEX] bold;
      set KL0OM001.XDMCD[CLXLINEX] bold;
    else
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* move in key*/
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0O126

// select appropriate claim price
Function KL0O127()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE APPROPRIATE CLAIM PRICE                **/
   /* *                                                          **/
   /* *     1) If the price from flag was changed                **/
   /* *        - If price from flag is equal to 'E', then        **/
   /* *          save the price from flag and continue on.       **/
   /* *        - If price from flag is equal to 'I', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          invoice product item.                           **/
   /* *        - If price from flag is equal to 'P', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          product.                                        **/
   /* *                                                          **/
  ;
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON ID    REASON                              **/
   /* *----------------------------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 06-17-91 GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES.  **/
   /* *                                                          **/
   /* * 11-07-91 sgorga  Moved the edit checking for 'NC' in     **/
   /* *       the 'select' field (klo0m001.cl0omsel) to the      **/
   /* *       begining of the process, since it did an EZERTN if **/
   /* *       it was an NC (NC's don't need prices). Also, if NC,**/
   /* *       moving 0 to map & w04 price.  Beth found this.     **/
   /* * 03-13-92 GDECKE     MARCH DB2 TABLE CHANGES              **/
   /* * 04-13-92 twatso     april DB2 TABLE CHANGES              **/
   /* * 07-25-01 dsinha     default price to zero.               **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O127"; /* Set current process name*/
  ;
  if (KL0OM001.SY1STNBR[CLXLINEX] == " " /* have no prod to work with*/
   && YCRTBL.YCRSPARN[CLXYCRX] == "Y")  
    CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
    return;
  end
  ;
   /* 11-07-91  sgorga*/
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC") /* if it's a no-credit line*/
                        /* CL0OS38 06-20-91 DONT NEED LINE ITEM*/
                        /* IF NOT PRICING*/
    KL0OM001.CLKCLPRC[CLXLINEX] = 0;
    CL0OW04.CLKCLPRC[CL0OW05X] = 0;
    return; /* don't look up price for non credits*/
  end
  ;
   /* force invoice price from flag to be editted to*/
   /* look for change in override price*/
  ;
  if (KL0OM001.CLKPRCFF[CLXLINEX] == "I"
   && CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL0OW04.CLKPRCFF[CL0OW05X] = "O"; /* force thru edit*/
  end
  ;
   /* If price from flag changed*/
    /* OR UNIT OF MEASURE CODE HAS CHANGED   11-12-90*/
  ;
  if (KL0OM001.CLKPRCFF[CLXLINEX] != CL0OW04.CLKPRCFF[CL0OW05X]
   || CL0OW05.CL0OWUMF[CLXLINEX] == "Y" /* 11-12-90*/
   || KL0OM001.CLKCLPRC[CLXLINEX] == 0)
    ;
    if (KL0OM001.CLKPRCFF[CLXLINEX] == "E")
      CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
    else
         /* ***************************/
         /* price must be from invoice*/
         /* ***************************/
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "I")
        if (KL0OM001.IV0IVCID > 0 /* and invoice number exists*/
         && CL0OW06.YITCD[CL0OWINX] == "I") /* an I.B.M. invoice*/
          KL0OS38(); /* default line item nbr if needed*/
          IV3REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
          IV3REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
          IV3REC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
          ;
          call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* read*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
             /* look for price overrides*/
            ;
            if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
              CL6REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
              CL6REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
              CL6REC.XGPCD = CLAREC.XGPCD;
              CL6REC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
              CL6REC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
              CL6REC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
              CL6REC.XQACD = CL0OW04.XQACD[CL0OW05X];
              CL6REC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
              CL6REC.SY5SZID = 0;
              ;
              KL0OS95(); /* select set price override*/
              ;
              if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
               && CL6REC.CLHMEMNB > 0)    
                IV3REC.IV3NLNUP = CL6REC.CL6OVPRC;
                IV3REC.IV3GLNUP = CL6REC.CL6OVPRC;
                KL0OM001.CLKPRCFF[CLXLINEX] = "O";
                ;
              end
              ;
              call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
              ;
            end
            ;
            CL0OW04.CLNNTPRC[CL0OW05X] = IV3REC.IV3NLNUP;
            CL0OW04.CLNGRPRC[CL0OW05X] = IV3REC.IV3GLNUP;
            ;
            if (CL0OW01.IVANBLFL == "Y") /* net bill flag*/
              KL0OM001.IV3NLNUP[CLXLINEX] = IV3REC.IV3NLNUP;
              KL0OM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3NLNUP;
              CL0OW04.CLKCLPRC[CL0OW05X] = IV3REC.IV3NLNUP;
            else
              KL0OM001.IV3NLNUP[CLXLINEX] = IV3REC.IV3GLNUP;
              KL0OM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3GLNUP;
              CL0OW04.CLKCLPRC[CL0OW05X] = IV3REC.IV3GLNUP;
            end
            ;
            CL0OW04.XQACD[CL0OW05X] = IV3REC.XQACD; /* quality code*/
            CL0OW08.XEGCD[CL0OW05X] = IV3REC.XEGCD; /* ENGINEER DIFF*/
            CL0OW08.XBK-BK-SESN-CD[CL0OW05X] = IV3REC.XBK-BK-SESN-CD; /* SEASON CD*/
            CL0OW08.OP-BK-YR[CL0OW05X] = IV3REC.OP-BK-YR; /* BOOK YEAR*/
            CL0OW08.OP-BK-MO[CL0OW05X] = IV3REC.OP-BK-MO; /* BOOK month*/
            ;
            if (IV3REC.XUMCD == "R " /* if the uom was a half*/
             || IV3REC.XUMCD == "L ") /* pair on th ivc and now*/
              if (CL0OW05.XUMCD[CL0OW05X] == "01") /* has changed back to a*/
                                  /* full pair*/
                KL0OS33(); /* get price from dprod*/
                ;
              else
                 /* check the XUM, if its changed but not changed back*/
                 /* to the original invoice XUM, recalculate the price*/
                if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                  KL0OS39();
                end
              end
              ;
            else
               /* check the XUM, if its changed but not changed back*/
               /* to the original invoice XUM, recalculate the price*/
              if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                KL0OS39();
              end
              ;
            end
            ;
            KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNNTPRC[CL0OW05X];
            CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNNTPRC[CL0OW05X];
            ;
            CL0OW04.OP2PRCVF[CL0OW05X] = IV3REC.OP2PRCVF;
            if (CL0OW04.OP2PRCVF[CL0OW05X] == "Y")
                                   /* flag price if varies by size*/
              KL0OM001.CL0OMVPR[CLXLINEX] = "V";
            else
              KL0OM001.CL0OMVPR[CLXLINEX] = " ";
            end
            CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
          else
            KL0OM001.XXXERRID = "KL0O127"; /* Process name*/
            converseLib.validationFailed(208); /* product not on invoice*/
            set KL0OM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
            CLXREC.CLXERRF = "Y";
            CL0OW04.CLNGRPRC[CL0OW05X] = 0;
          end
        else
          KL0OM001.XXXERRID = "KL0O127"; /* Process name*/
          converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
          set KL0OM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          CL0OW04.CLNGRPRC[CL0OW05X] = 0;
        end
        ;
      else
           /* ********************************/
           /* price is taken from the product*/
           /* ********************************/
        if (KL0OM001.CLKPRCFF[CLXLINEX] == "P")
          if (CL0OW05.CL0OWPPF == "Y") /* dealing with prepack*/
            return; /* price was defaulted from prepack*/
                                   /* group id*/
          else
            KL0OS33(); /* get product price*/
            ;
             /* check the XUM, if its changed but not changed back*/
             /* to the original invoice XUM, recalculate the price*/
            if (SYCREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
              KL0OS39();
            end
            ;
          end
          ;
   /* ***TCS Change begin - 07/25/01*/
   /* IF CL0OW04.CLNGRPRC(CL0OW05X) EQ 0*/
   /* AND CL0OW04.CLNNTPRC(CL0OW05X) EQ 0;*/
   /* MOVE 'KL0O127' TO KL0OM001.XXXERRID;/* Process name*/
   /* MOVE 226 TO EZEMNO;    /* warn-prod price not found*/
   /* MOVE 'Y' TO CLXREC.CLXERRF;*/
   /* SET KL0OM001.CLKCLPRC(CLXLINEX) CURSOR,BRIGHT;*/
   /* ELSE;*/
   /* ***TCS Change end - 07/25/01*/
          if (IVAREC.IVANBLFL == "Y")
            KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNNTPRC[CL0OW05X];
            CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNNTPRC[CL0OW05X];
          else
            KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNGRPRC[CL0OW05X];
            CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNGRPRC[CL0OW05X];
          end
          ;
   /* END;*/
        end
      end
    end
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
  end
  ;
  ;
end // end KL0O127

// calculation edit for ttl & UOM
Function KL0O128()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CALCUALTION EDITS FOR claim value total          **/
   /* *                                                          **/
   /* *    1) Calculate the claim value for the product.         **/
   /* *                                                          **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O128"; /* Set current process name*/
  ;
  ;
   /* *************************************/
    /* Calculate the claim value.*/
   /* *************************************/
  ;
  CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OW05X]; /* set wk values*/
  CL0OW01.CL0OWWK2 = CL0OW04.CLMTRTSQ[CL0OW05X];
  CL0OW01.CL0OWWK3 = CL0OW04.CLKCLPRC[CL0OW05X];
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV - CL0OW05.CLAESTVL[CL0OW05X];
    CL0OW05.CLAESTVL[CL0OW05X] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK3;
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OW05X];
    KL0OM001.CLAESTVL[CLXLINEX] = CL0OW05.CLAESTVL[CL0OW05X];
  else /* If deleting line*/
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "X")
      ;
      CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ - CL0OW04.CLKRQTQ[CL0OW05X];
      CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ - CL0OW04.CLKAUTHQ[CL0OW05X];
      CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV - CL0OW05.CLAESTVL[CL0OW05X];
    end
  end
  ;
end // end KL0O128

// validate selection codes
Function KL0O129()
   /* *************************************************************/
   /* *                                                          **/
   /* *           VALIDATE THE SELECTION CODES                   **/
   /* *                                                          **/
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *************************************************************/
   /* *   DATE   LOGON   REASON                                  **/
   /* *----------------------------------------------------------**/
   /* * 05-31-90 chellm  added edit of selection codes for items **/
   /* *                  not on the invoice. Products not on IVC **/
   /* *                  must only be S,NC,D or X.               **/
   /* * 06-06-90 chellm  wait, still need to use A selection code**/
   /* *                  so allow A selection code.              **/
   /* * 06-17-91 GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.     **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O129"; /* Set current process name*/
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == " "
   && KL0OM001.SY1STNBR[CLXLINEX] != " ") /* 08-28-90*/
    KL0OM001.CL0OMSEL[CLXLINEX] = KL0OM001.CL0OMTRN[CLXLINEX];
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "S"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "SA"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "AA"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "X"
   || KL0OM001.CL0OMSEL[CLXLINEX] == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(8); /* selection is not valid*/
    KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
    /* edit selection of entered products    05-31-90*/
  if (CL0OW05.CL0OWSFL[CL0OW05X] != "I") /* record not from invoice*/
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "AA"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "SA"
     || KL0OM001.CL0OMSEL[CLXLINEX] == "C")
      converseLib.validationFailed(636); /* selection invalid for entered items*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
      set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "X")
    if (KL0OM001.CLKAUTHQ[CLXLINEX] != 0)
       /* user tried to do transaction on invoice prd then changed*/
       /* their mind. act like they are deleting transaction.*/
    else
      if (CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* record from invoice*/
        converseLib.validationFailed(459); /* cannot delete invoice products*/
        CLXREC.CLXERRF = "Y"; /* Set error switch*/
        KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
        set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
        return;
      end
    end
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "S"
   && CL0OW05.CL0OWLVL[CL0OW05X] == "P")
    converseLib.validationFailed(202); /* prd is worked at prd level*/
    KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"  /* authorize*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC" /* no charge 082189*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"  /* credit    082189*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D") /* debit     082189*/
    if (CL0OW05.CL0OWLVL[CL0OW05X] == "S") /* worked at size level*/
      KL0OM001.CL0OMSEL[CLXLINEX] = "S"; /* flow to size level*/
    end
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A" /* authorize*/
   && KL0OM001.CL0OMTRN[CLXLINEX] == "NC")
    converseLib.validationFailed(8); /* selection is not valid*/
    KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "S")
    if (KL0OM001.SY1STNBR[CLXLINEX] == " ") /* no product on screen*/
      converseLib.validationFailed(8); /* selection is not valid*/
      KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
      CLXREC.CLXERRF = "Y";
      set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    else
      if (CL0OW05.SY1STNBR[CL0OW05X] == " ")
         /* next sentence - entered new product*/
      else
        if (KL0OM001.CLKRQTQ[CLXLINEX] > 0)
          CL0OW05.CL0OWXRQ = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
        else
          CL0OW05.CL0OWXRQ = KL0OM001.CLKRQTQ[CLXLINEX];
        end
        if (KL0OM001.SY1STNBR[CLXLINEX] != CL0OW05.SY1STNBR[CL0OW05X]
         || KL0OM001.SY2CLRID[CLXLINEX] != CL0OW05.SY2CLRID[CL0OW05X]
         || KL0OM001.XDMCD[CLXLINEX] != CL0OW05.XDMCD[CL0OW05X]
         || CL0OW05.CL0OWXRQ != CL0OW04.CLKRQTQ[CL0OW05X]
         || KL0OM001.CLKAUTHQ[CLXLINEX] != CL0OW04.CLKAUTHQ[CL0OW05X]
         || KL0OM001.CLMTRTSQ[CLXLINEX] != CL0OW04.CLMTRTSQ[CL0OW05X]
         || KL0OM001.CLKPRCFF[CLXLINEX] != CL0OW04.CLKPRCFF[CL0OW05X]
         || KL0OM001.CLKCLPRC[CLXLINEX] != CL0OW04.CLKCLPRC[CL0OW05X])
          converseLib.validationFailed(507);
                                   /* not allowed to change fields when 's'*/
          KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
          CLXREC.CLXERRF = "Y";
          set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
        end
      end
    end
  end
  ;
  ;
   /* claim price may or may not be allowed to change*/
  CL0OW05.CL0OWFPR[CL0OW05X] = "N"; /* init freeze claim price flag*/
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC")
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "I" /* record from invoice*/
     || CL0OW05.CL0OWSFL[CL0OW05X] == "R") /* record from R/A item*/
      if (KL0OM001.CL0OMTRN[CLXLINEX] == "NC") /* 072089 skip err if both NC*/
        /* next sentence*/
      else
        converseLib.validationFailed(8); /* selection is not valid*/
        CLXREC.CLXERRF = "Y"; /* Set error switch*/
        KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
        set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
        return;
      end
    end
    ;
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(506); /* select code not valid for claim type*/
      KL0OM001.XXXERRID = "CL0O129"; /* Process name*/
      CLXREC.CLXERRF = "Y";
      set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW05.CL0OWFPR[CL0OW05X] = "Y"; /* freeze claim price*/
    ;
  end
  ;
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D")
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(506); /* select code not valid for claim type*/
      KL0OM001.XXXERRID = "CL0O129";
      CLXREC.CLXERRF = "Y";
      set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW05.CL0OWFPR[CL0OW05X] = "Y"; /* freeze claim price*/
    CL0OW05.CLICRDFL[CL0OW05X] = KL0OM001.CL0OMSEL[CLXLINEX];
    ;
  end
  ;
   /* 072089 add if-end*/
  CL0OW05.CLKCRFL[CL0OW05X] = " ";
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC") /* new action*/
    CL0OW05.CLKCRFL[CL0OW05X] = "N";
  else
    if (KL0OM001.CL0OMSEL[CLXLINEX] == "A")
      CL0OW05.CLKCRFL[CL0OW05X] = "Y";
    else
      if (KL0OM001.CL0OMTRN[CLXLINEX] == "NC") /* old action, used in*/
        CL0OW05.CLKCRFL[CL0OW05X] = "N"; /* CL0O131 to delete CLKREC*/
      else
        if (KL0OM001.CL0OMTRN[CLXLINEX] == "A")
          CL0OW05.CLKCRFL[CL0OW05X] = "Y";
        end
      end
    end
  end
  ;
   /* move selection from map to working storage*/
  if (CLXREC.CLXERRF == "N"
   && KL0OM001.SY1STNBR[CLXLINEX] != " ") /* 08-27-90*/
    CL0OW05.CL0OMSEL[CL0OW05X] = KL0OM001.CL0OMSEL[CLXLINEX];
  end
  ;
  ;
end // end KL0O129

// process screen
Function KL0O130()
   /* **************************************/
   /* process screen*/
  ;
    /* 1. updates are done against the entire product array*/
    /* 2. the screen is rebuilt and reshown to the user any time*/
       /* changes are done to ra item or adjustments*/
  ;
   /* 10-04-90 CHELLM added a check of the CL0OWERR flag before*/
                   /* doing updates so rows with 'product already*/
           /* exists' errors will not be updated when user PF11's*/
  ;
   /* 03-24-00 GNATHE CHANGED THE PARA KL0O132 TO KL0O139*/
                   /* FOR MAKING THE CREDIT FUNCTION TO WORK*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O130";
  ;
   /* only want to update under following pfkeys or enter*/
  ;
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry only*/
    return;
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf2
     || converseVar.eventKey is pf5
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf11
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf18)
       /* next sentence*/
    else
      return;
    end
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
   /* get current date and time*/
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  CL0OW01.CL0OWSWR = "Y"; /* init show-warning-to-user flag*/
  CL0OW01.CL0OWUPA = "N"; /* init need to update-clarec-fl*/
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all products*/
    CL0OW01.CL0OWAAF = "N"; /* re-init flag*/
  end
  ;
  ;
  CL0OW01.CL0OW05X = 1;
  while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP) /* look at all entries*/
    ;
    CL0OW05.OP2LNINB[CL0OW05X] = CL0OW05.OP2LNINB[CL0OW05X]; /* %% test*/
    ;
    if (CL0OW05.CL0OWUPK[CL0OW05X] != " " /* update clkrec*/
     && CL0OW05.CL0OWERR[CL0OW05X] != "Y") /* no dup prod exists*/
      KL0O131(); /* add, change or delete R/A prd info*/
    end
    ;
    if (CL0OW05.CL0OWUPR[CL0OW05X] != " " /* update clrrec*/
     && CL0OW05.CL0OWERR[CL0OW05X] != "Y") /* no dup prod exists*/
      KL0O139();
                                   /* add, change or delete adjustment info*/
    end
    ;
    if (CL0OW05.CL0OWUPK[CL0OW05X] != " " /* update clkrec*/
     || CL0OW05.CL0OWUPR[CL0OW05X] != " ") /* update clrrec*/
      if (CL0OW05.CL0OWERR[CL0OW05X] != "Y") /* no dup prod err exists*/
        CL0OW01.CL0OWUPA = "Y";
        CL0OW01.CL0OWSWR = "N"; /* reshow screen to user*/
        CLXREC.CLXBLDSC = "Y";
        KL0O133(); /* add or change ra header info*/
      else
         /* next sentence*/
      end
    end
    ;
    CL0OW05.CL0OWUPK[CL0OW05X] = " ";
    CL0OW05.CL0OWUPR[CL0OW05X] = " ";
    ;
    CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
    ;
  end
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  ;
  if (CL0OW01.CL0OWUPA == "Y")
    KL0O134(); /* see if claim header needs to be updated*/
  end
  ;
  ;
end // end KL0O130

// add,change,delete R/A itms
Function KL0O131()
   /* **************************************/
   /* add, change, delete R/A items*/
  ;
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* * 04-13-92   twatso     april data base changes            **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O131";
  ;
  ;
   /* need to delete all records associated with specified*/
   /* style/color. wildcarding the invoice id would be*/
   /* inefficient so 2 deletes are done if sizes exist*/
  ;
  CLKREC.CLACLMNB = KL0OM001.CLACLMNB;
   /* 072089 drop 'non-credit not associated with invoice'*/
   /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ 'N';*/
    /* MOVE 0 TO CLKREC.IV0IVCID;*/
   /* ELSE ;*/
  CLKREC.IV0IVCID = KL0OM001.IV0IVCID;
   /* END ;*/
  CLKREC.XGPCD = KL0OM001.XGPCD;
  CLKREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLKREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLKREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X]; /* 10-04-90*/
  CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X]; /* 10-04-90*/
  CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X]; /* ENGINEER DIFF*/
  CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLKREC.SY5SZID = -1; /* delete all sizes*/
   /* 072089 add if-end*/
  if (CL0OW05.CLKNBRSZ[CL0OW05X] == 0)
    CLKREC.CLKCRFL = CL0OW05.CLKCRFL[CL0OW05X]; /* prod level*/
  else
    CLKREC.CLKCRFL = "*"; /* size level,delete all auth types*/
  end
  ;
  ;
  call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
  ;
   /* 072089 next is not needed since did not force 'NC' ivc = 0*/
  ;
   /* IF CL0OW05.CL0OWLVL(CL0OW05X) EQ 'S' ; worked at size leve*/
    /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ 'N'*/
      /* MOVE CL0OM001.IV0IVCID TO CLKREC.IV0IVCID;*/
    /* ELSE ;*/
      /* MOVE 0 TO CLKREC.IV0IVCID;*/
    /* END ;*/
    /* ;*/
    /* ;*/
    /* CALL IO1280 'D ',SQLCA,CLKREC (NOMAPS,NONCSP; delete*/
    /* IF SQLCA.SQLCODE EQ 0;*/
      /* OR SQLCA.SQLCODE EQ 100;*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VRAITM01' TO TA1REC.TA1TBLVU;*/
      /* MOVE 'DELETE' TO TA1REC.TA1LOCAT(2);*/
      /* PERFORM XPCL010;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (CL0OW05.CL0OWUPK[CL0OW05X] == "X") /* delete ra item*/
    if (CL0OW05.CL0OWUPR[CL0OW05X] == " ")
                                   /* not change to diff record type*/
       /* set to original values*/
      if (CL0OW05.CL0OMTRN[CL0OW05X] == "NC")
        CL0OW05.CL0OWSFL[CL0OW05X] = " ";
                                   /* now comes from user entry*/
      else
        CL0OW05.CL0OWSFL[CL0OW05X] = "I";
                                   /* now comes from ivc record*/
      end
       /* zero out non-needed fields*/
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW05.CLAESTVL[CL0OW05X] = 0;
      CL0OW05.CL0OWFPR[CL0OW05X] = " "; /* freeze price*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " "; /* not worked at any level*/
      CL0OW05.CL0OMSEL[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CL0OMTRN[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CLKCRFL[CL0OW05X] = " "; /* don't hold credit flag*/
    end
    return; /* have deleted product*/
  end
  ;
  ;
   /* IF YCRTBL.YCRSPARN(CLXYCRX) EQ 'Y';*/
    /* ; may need to move totals into record*/
   /* ELSE ;*/
  CL0OW05.CL0OWSFL[CL0OW05X] = "R"; /* record now comes from ra itm*/
  CL0OW05.CL0OWLVL[CL0OW05X] = "P"; /* worked at prd level*/
  if (CL0OW05.CL0OMSEL[CL0OW05X] != " ") /* 10-04-90*/
    CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW05.CL0OMSEL[CL0OW05X];
  end
  CL0OW05.CL0OMSEL[CL0OW05X] = " ";
  CLKREC.CLACLMNB = KL0OM001.CLACLMNB;
  CLKREC.XGPCD = KL0OM001.XGPCD;
  CLKREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLKREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLKREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLKREC.SY5SZID = 0; /* zero since this is product level not*/
                                   /* size*/
  CLKREC.CLKNBRSZ = 0; /* zero since this is product level not*/
                                   /* size*/
  CLKREC.CLKWHSXF = CL0OW05.CLKWHSXF[CL0OW05X];
  CLKREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
  CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLKREC.CLKCLPRC = CL0OW04.CLKCLPRC[CL0OW05X];
  CLKREC.OP2PRCVF = CL0OW04.OP2PRCVF[CL0OW05X];
  CLKREC.CLKPRCFF = CL0OW04.CLKPRCFF[CL0OW05X];
  CLKREC.YCECD = CL0OW05.YCECD[CL0OW05X];
  ;
  CLKREC.CLKRQTQ = CL0OW04.CLKRQTQ[CL0OW05X];
  if (CLKREC.CLKRQTQ < 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * -1;
  end
  ;
  CLKREC.CLKAUTHQ = CL0OW04.CLKAUTHQ[CL0OW05X];
  if (CLKREC.CLKAUTHQ < 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * -1;
  end
  ;
  CLKREC.CLJRDIND = "R"; /* return to stock authorization*/
  ;
   /* 072089 use ivc if 'nc' or not (move code from next 'if')*/
  CLKREC.IV0IVCID = KL0OM001.IV0IVCID;
  CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  if (CLKREC.IV0PARTN == " ")
    CLKREC.IV0PARTN = "0";
  end
  ;
   /* 072089 drop if-end, replace with simple move below*/
   /* IF CL0OW05.CL0OMTRN(CL0OW05X) EQ 'NC'  ; no credit return*/
    /* ; 072089 use ivc, see above*/
    /* ; MOVE 0 TO CLKREC.IV0IVCID;*/
    /* ; MOVE '0' TO CLKREC.IV0PARTN;*/
    /* MOVE 'N' TO CLKREC.CLKCRFL;*/
    /* MOVE 'N' TO CL0OW05.CLKCRFL(CL0OW05X);*/
   /* ELSE ;*/
    /* MOVE 'Y' TO CLKREC.CLKCRFL;*/
    /* MOVE 'Y' TO CL0OW05.CLKCRFL(CL0OW05X);*/
   /* END ;*/
  ;
  CLKREC.CLKCRFL = CL0OW05.CLKCRFL[CL0OW05X]; /* 072089 add*/
   /* value may be Y/N/or V for variable ('Y' & 'N' on sizes)*/
  ;
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
end // end KL0O131

// edit nike prod id
Function KL0O132()
   /* *************************************************************/
   /* *                                                          **/
   /* *  Check for a Unit of Measure or Quality Code override    **/
   /* *  by matching what has been entered and updated against   **/
   /* *  the record source, DPROD.VSTYLE01 OR DINVC.VIVITM01.    **/
   /* *      exists.                                             **/
   /* *                                                          **/
   /* * 10-12-90 CHELLM created procedure.                       **/
   /* * 11-12-97 gdecke  rename from KL0OS32 to KL0O132          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "KL0OS32"; /* Set current process name*/
  ;
  ;
    /* *****************************/
     /* select from dprod.vstyle01*/
    /* *****************************/
  ;
  ;
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
     /* next sentence*/
  else
    ;
    TA1REC.TA1TBLKE = SYCREC.SY1STNBR; /* move in key*/
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    XPCL010();
    ;
  end
  ;
end // end KL0O132

// add,change ra header
Function KL0O133()
   /* *************************************************************/
   /* *                                                          **/
   /* *           SELECT THE DCLAIMS.VRAHDR01 ROW                **/
   /* *                                                          **/
   /* *  1) sum the ra items to get total qty and see if items*/
   /* *     exist*/
   /* *  2) Select the Unique RA header row.                     **/
   /* *  3) Either update or add the RA header row               **/
   /* *                                                          **/
   /* *   Maintenance History:                                   **/
   /* *                                                          **/
   /* *  CL502 CHELLM 10-20-89 added xsclsex to default the      **/
   /* *        the RA expiration date.(today+45)                 **/
   /* *  CL755 CHELLM 10-04-90 Added XUMCD and XQACD to the      **/
   /* *        DCLAIM.VRAITM01 select key as wild card values.   **/
   /* *        JCAREY 12-15-93 Changed code to initialize the    **/
   /* *                        issue date.                       **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O133"; /* Set current process name*/
  ;
  ;
  ;
    /* set R/A header value equal to total value of all*/
    /* authorized products (include all invoices)*/
  ;
     /* **********************/
     /* fetch dclaim.vraitm01*/
     /* **********************/
  ;
  CL0OW01.CLAESTVL = 0;
  CL0OW01.CLKAUTHQ = 0;
  CL0OW01.CLJRAIND = "N"; /* init ra-items-exist-flag*/
  ;
  CLKREC.CLACLMNB = KL0OM001.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.IV0PARTN = "*";
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**"; /* 10-04-90*/
  CLKREC.XQACD = "**"; /* 10-04-90*/
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* **RA ITEM RECORD***/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (CLKREC.SY5SZID == 0) /* looking at summary record*/
      ;
       /* 081489 drop size loop, add sum function*/
      if (CLKREC.CLKNBRSZ != 0) /* sum sizes for prod*/
        set CL0OW07 empty;
        CL0OW07.CL0OWSQL = "M2";
        call "IO1280" (CL0OW07, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          if (CL0OW07.CL0OWIN1 < 0 /* sum function error*/
           || CL0OW07.CL0OWIN2 < 0)
            CL0OW07.CLAESTVL = 0;
            CL0OW07.CL0OWCN1 = 0;
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            CL0OW07.CLAESTVL = 0;
            CL0OW07.CL0OWCN1 = 0;
          else
            TA1REC.TA1DBASE = "DCLAIM";
            TA1REC.TA1TBLVU = "VRAITM01";
            TA1REC.TA1LOCAT[2] = "SUM2";
            CLXREC.CLXORDIV = KL0OM001.CLACLMNB;
            TA1REC.TA1TBLKE = CLXREC.CLXORDIV;
            XPCL010();
          end
        end
        CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW07.CLAESTVL;
        CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CL0OW07.CL0OWCN1;
      else /* don't have variable size pricing*/
        CL0OW01.CL0OWNUM = CLKREC.CLKAUTHQ * CLKREC.CLKCLPRC;
        CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW01.CL0OWNUM;
        CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CLKREC.CLKAUTHQ;
      end
    end
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "NEXT";
    XPCL010();
  end
  ;
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW01.CLKAUTHQ > 0)
    CL0OW01.CLJRAIND = "Y"; /* ra items exist*/
  end
  ;
   /* ******************************************/
    /* need to delete R/A HDR if no items exist*/
  ;
   /* ******************************************/
  ;
   /* IF CL0OW01.CLAESTVL EQ 0;*/
    /* AND CL0OW01.CLKAUTHQ EQ 0     ; sum of R/A items*/
    /* MOVE CLAREC.CLACLMNB TO CLJREC.CLACLMNB;*/
    /* CALL IO1270 'D ',SQLCA,CLJREC (nomaps,noncsp;  RA header*/
    /* IF SQLCA.SQLCODE EQ 0;*/
      /* OR SQLCA.SQLCODE EQ 100;*/
      /* EZERTN;*/
    /* ELSE ;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VRAHDR01' TO TA1REC.TA1TBLVU;*/
      /* MOVE 'UNIQUE' TO TA1REC.TA1LOCAT(2);*/
      /* PERFORM XPCL010;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  CLJREC.CLACLMNB = KL0OM001.CLACLMNB;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* RA header*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "UNIQUE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW01.CLKAUTHQ == CLJREC.CLJTATHQ
   && CL0OW01.CLJRAIND == CLJREC.CLJRAIND)
    return; /* values didn't change, no need to update*/
  else
    if (CL0OW01.CLKAUTHQ < 0) /* store as positive quantity*/
      CLJREC.CLJTATHQ = CL0OW01.CLKAUTHQ * -1;
    else
      CLJREC.CLJTATHQ = CL0OW01.CLKAUTHQ; /* total authorized qty*/
    end
    CLJREC.CLJRAIND = CL0OW01.CLJRAIND; /* init ra items exist flag*/
  end
  ;
   /* get change date and time               01-22-90*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  CLJREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLJREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod if adding*/
   /* zzzchgct is in cljrec already if updating*/
  ;
  CLJREC.CLJRAIDT = TA2REC.TA2GRGGN; /* init the rauth issue date*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    CLJREC.CLACLMNB = KL0OM001.CLACLMNB;
    CLJREC.XXXUSRID = " ";
    CLJREC.CLJPRTLB = "Y";
    CLJREC.CLJNBLB = 0;
    CLJREC.CLJPRTRA = "Y";
    CLJREC.CLJRARQT = 0;
    CLJREC.CLJLBRQT = 0;
    CLJREC.CLJLBTOT = 0;
    /* (10-20-89 CWH)*/
    XSCLSEX(); /* default the ra expiration date*/
    CLJREC.CLJORAXD = 0;
    CLJREC.CLJFRDBF = "N";
    CLJREC.CLJFRCRF = "N";
    KL0OS31(); /* default the non-credit-rtn-fl*/
    CLJREC.XWHCD = CLAREC.XWHCD;
    CLJREC.XSOCD = " ";
    CLJREC.CLJRDIND = "R";
    KL0OS91(); /* default remerchanding/restocking*/
                                   /* flags*/
    CLJREC.XDACD = " ";
    CLJREC.CLJRAIND = "Y";
    ;
    call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      TA1REC.TA1LOCAT[2] = "ADD";
      XPCL010();
    end
    ;
  end
  ;
  ;
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "UPDATE";
    XPCL010();
  end
  ;
   /* GET CL0O134*/
end // end KL0O133

// update claim header
Function KL0O134()
   /* **************************************/
   /* update claim header*/
   /* **************************************/
  ;
   /* *********************************************************************/
   /* MAINTENENCE LOG                                                   **/
   /* 10/30/97 RCHAUV reason code conversion - no more P03, D03 now C03 **/
   /* *********************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O134";
  ;
  CL0OWUPA = "N"; /* init update clarec switch*/
  ;
  ;
   /* values calculated in update R/A header - cl0o133*/
  ;
  CL0OW01.CLAESTVL = CL0OW01.CLAESTVL * -1; /* R/As have negative value*/
  CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ * -1; /* R/As have negative qty*/
  ;
     /* **********************/
     /* fetch dclaim.vcladj01*/
     /* **********************/
  ;
  CL0OW01.CLADBOCL = "N"; /* init debits-on-claim-flag*/
  CL0OW01.CLADJIND = "N"; /* init adjustment indicator*/
  CLRREC.CLACLMNB = KL0OM001.CLACLMNB;
  CLRREC.CLHSEQNB = 1;
  CLRREC.SY1STNBR = "******";
  CLRREC.SY2CLRID = "***";
  CLRREC.XDMCD = "**";
  CLRREC.XGPCD = "**";
  CLRREC.CLICRDFL = "*";
  ;
  ;
  call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* **CLADJ RECORD***/
  if (SQLCA.VAGen_SQLCODE < 0) /* added 2/89*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    XPCL010();
  end
  call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    CL0OW01.CLADJIND = "Y"; /* adjustments do exist for claim*/
     /* customer has most likely taken credit for adjustments*/
     /* already, so have internal memo*/
     /* if D03 or P03 keep header default*/
     /* 10/30/97 reason code conv D03 and P03 replaced by C03 - rchauv*/
    if (CLAREC.YCRCD == "C03")
      /* continue*/
    else
      CLAREC.XIECD = "I";
    end
    ;
    if (CLRREC.CLICRDFL == "C") /* have credit*/
      CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * -1;
    end
    ;
    if (IVAREC.IVANBLFL == "Y")
      CL0OW01.CL0OWNUM = CLRREC.CLRCLMQ * CLRREC.CLNNTPRC;
    else
      CL0OW01.CL0OWNUM = CLRREC.CLRCLMQ * CLRREC.CLNGRPRC;
    end
    CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW01.CL0OWNUM;
    CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CLRREC.CLRCLMQ;
     /* check debit-on-claim-flag for updating*/
    if (CLRREC.CLICRDFL == "D")
      CL0OW01.CLADBOCL = "Y";
    end
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
    ;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "NEXT";
    XPCL010();
  end
  call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    XPCL010();
  end
  ;
  ;
   /* if changed various things on header, need to update*/
  ;
   /* IF CL0OW01.CLAESTVL LT 0        ; neg values req neg quantit*/
    /* CL0OW07.CL0OWCN1 = CL0OW07.CL0OWCN1 * -1;*/
   /* END ;*/
  ;
  if (CL0OW01.CLAESTVL != CLAREC.CLAESTVL
   || CL0OW01.CLADBOCL != CLAREC.CLADBOCL
   || CL0OW01.CLKAUTHQ != CLAREC.CLATQTY
   /* calc in update R/A hdr cl0o133*/
   || CL0OW01.CLADJIND != CLAREC.CLADJIND)
    CL0OW01.CL0OWUPA = "Y";
    CLAREC.CLAESTVL = CL0OW01.CLAESTVL;
    CLAREC.CLADBOCL = CL0OW01.CLADBOCL;
    CLAREC.CLATQTY = CL0OW01.CLKAUTHQ; /* show correct total*/
    CLAREC.CLADJIND = CL0OW01.CLADJIND;
  end
  ;
  ;
  if (CL0OW01.CL0OWUPA == "Y") /* need to update clarec*/
    ;
    ;
    CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "UPDATE";
      XPCL010();
    end
  end
  ;
  ;
  ;
end // end KL0O134

// edit unit of measure ^= eaches
Function KL0O135()
   /* ************************************************************/
   /* *                                                         **/
   /* *      edit for unit of measure not = eaches              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O135"; /* Set current process name*/
   /* END ;*/
  ;
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "NC" /* dont check non-std uom*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "  " /* if no charge or not selected*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "X " /* or delete - no uom test*/
   || KL0OM001.SY1STNBR[CLXLINEX] == "      ") /* or no style number*/
     /* next sentence*/
  else
    if (CL0OW05.CL0OMSEL[CL0OW05X] == "NC" /* dont check non-std uom*/
     && KL0OM001.CL0OMSEL[CLXLINEX] == "S") /* for no charge product*/
       /* next sentence*/
    else
      if (CL0OW05.XUMCD[CL0OW05X] != "01") /* uom code is not eaches*/
        if (CL0OW05.XUMCD[CL0OW05X] == "R " /* uom code is half-pair*/
         || CL0OW05.XUMCD[CL0OW05X] == "L ")
          converseLib.validationFailed(662); /* uom code is half-pair*/
        else
          converseLib.validationFailed(576); /* uom code not eaches*/
        end
        CLXREC.CLXERRF = "Y"; /* show warning message*/
        KL0OM001.XXXERRID = "KL0O135"; /* Process name*/
        set KL0OM001.CL0OMSEL[CLXLINEX] cursor, bold;
        CL0OW05.CL0OWUWF[CL0OW05X] = "Y"; /* turn on uom error flag*/
      end
    end
  end
  ;
  ;
end // end KL0O135

// add,change,delete adjustments
Function KL0O139()
   /* **************************************/
   /* add, change, delete adjustments*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 03-24-00   GNATHE    CREATED FOR MAKING THE CREDIT     . **/
   /* *                      FUNCTIONALITY TO WORK             . **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O139";
  ;
  ;
  CLRREC.CLACLMNB = KL0OM001.CLACLMNB;
  CLRREC.CLHSEQNB = 1;
  CLRREC.CLICRDFL = CL0OW05.CLICRDFL[CL0OW05X];
  CLRREC.XGPCD = KL0OM001.XGPCD;
  CLRREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLRREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLRREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLRREC.IV0IVCID = KL0OM001.IV0IVCID;
  CLXREC.CLXORDIV = KL0OM001.IV0IVCID;
  CLRREC.IV0PARTN = CLXREC.CLXPARTN;
  CLRREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  CLRREC.SY5SZID = -1; /* delete all sizes and prod entries*/
  ;
  ;
  call "IO1370" ("D ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW05.CL0OWUPR[CL0OW05X] == "X")
    if (CL0OW05.CL0OWUPK[CL0OW05X] == " ")
                                   /* not change to another record type*/
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW05.CLAESTVL[CL0OW05X] = 0;
      CL0OW05.CL0OWSFL[CL0OW05X] = "I"; /* now from invoice record*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " "; /* not worked at any level*/
      CL0OW05.CL0OWFPR[CL0OW05X] = " "; /* price is not frozen*/
      CL0OW05.CL0OMSEL[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CL0OMTRN[CL0OW05X] = " "; /* don't show 'x'*/
    end
    return; /* have deleted record*/
  end
  ;
  ;
  CL0OW05.CL0OWLVL[CL0OW05X] = "P"; /* product worked at prd level*/
  CL0OW05.CL0OWSFL[CL0OW05X] = "A"; /* now comes from adj record*/
  CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW05.CLICRDFL[CL0OW05X];
  CL0OW05.CL0OMSEL[CL0OW05X] = " ";
  CLRREC.SY5SZID = 0; /* zero since this is product level not*/
                                   /* size*/
  CLRREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLRREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLRREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLRREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLRREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLRREC.CLNGRPRC = CL0OW04.CLNGRPRC[CL0OW05X];
  CLRREC.CLNNTPRC = CL0OW04.CLNNTPRC[CL0OW05X];
  CLRREC.CLKPRCFF = CL0OW04.CLKPRCFF[CL0OW05X];
  CLRREC.XCOCD = " ";
  if (CL0OW05.CL0OMTRN[CL0OW05X] == "C")
    CLRREC.CLRRQTQ = CL0OW04.CLKRQTQ[CL0OW05X] * -1; /* get positive value*/
    CLRREC.CLRCLMQ = CL0OW04.CLKAUTHQ[CL0OW05X] * -1; /* get positive value*/
  else
    CLRREC.CLRRQTQ = CL0OW04.CLKRQTQ[CL0OW05X];
    CLRREC.CLRCLMQ = CL0OW04.CLKAUTHQ[CL0OW05X];
  end
  ;
  ;
  CLRREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLRREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1370" ("A ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
end // end KL0O139

// flow on 'ENTER' or PF keys
Function KL0O140()
   /* **************************************/
   /* handle enter or PF  key*/
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* * 08-08-91   wjohns     rename applictions for transfers.  **/
   /* * 03-13-92   GDECKE     MARCH DB2 TABLE CHANGES.           **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O140";
  ;
  if (CLXREC.CLXERRF == "Y")
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum == 231) /* quantity required*/
         /* next sentence - allow user to pf7/8 to fill in qtys*/
      else
        return;
      end
    else
      if (converseVar.eventKey is pf11 /* 10-0490 chellm*/
       && converseVar.validationMsgNum == 212) /* product already exists*/
         /* next sentence - allow user to pf11 to enter UOM or XQA*/
      else
        return;
      end
    end
  end
  ;
   /* **************************************/
   /* If ENTER is pressed*/
   /* **************************************/
  if (converseVar.eventKey is enter)
    /* **************************************/
     /* If Fast path positioning requested*/
    /* **************************************/
    if (KL0OM001.CAITEM != " ") /* If fast path item entered*/
      if (KL0OM001.CATOAP == " " /* If fastpath positioning*/
       || KL0OM001.CATOAP == "KL0O")
        if (KL0OM001.CAITEM == "A") /* If top of list requested*/
          CLXREC.CLXARY1X = 1;
          CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
          KL0OM001.CAITEM = " ";
          return;
        else
          if (KL0OM001.CAITEM == "9") /* If bottom of list requested*/
            CLXREC.CLXARY1X[1] = CL0OW01.CL0OWNOP;
            CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
            KL0OM001.CAITEM = " ";
            return;
          else
            /* ************************************************/
                /* Locate the desired map positioning*/
            /* ************************************************/
            if (KL0OM001.CAITEM != " ") /* If item field is entered*/
              sysVar.arrayIndex = 1; /* Use ezetst as working index*/
              while (sysVar.arrayIndex <= CL0OW01.CL0OWNOP) /* Until end array*/
                if (KL0OM001.CAITEM == CL0OW05.SY1STNBR[sysVar.arrayIndex])
                  CLXREC.CLXARY1X[1] = sysVar.arrayIndex; /* Save position index*/
                  sysVar.arrayIndex = 9000; /* Force loop end*/
                  KL0OM001.CAITEM = " ";
                  CLXREC.CLXBLDSC = "Y";
                else
                  if (CL0OW05.SY1STNBR[sysVar.arrayIndex] == " ")
                    CLXREC.CLXARY1X[1] = sysVar.arrayIndex - 1; /* Save position index*/
                    sysVar.arrayIndex = 9000; /* Force loop end*/
                    KL0OM001.CAITEM = " ";
                    CLXREC.CLXBLDSC = "Y";
                  else
                    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment index*/
                  end
                end
              end
              return;
            end
          end
        end
      end
    else
      if (KL0OM001.CATOAP != "KL0O") /* If to application not kL0o*/
        /* **************************************/
         /* If map has not been reshown*/
        /* **************************************/
        if (CL0OW01.CL0OWSWR == "N") /* If have not shown warnings*/
           /* continue around to reshow map with new totals*/
          return;
        else
          /* **************************************/
           /* If more invoices exist to display*/
          /* **************************************/
          if (CL0OW01.CL0OWNIR == "N") /* If new inv. # not entered*/
            CL0OW01.CL0OWINX = CL0OW01.CL0OWINX + 1;
          end
          if (CL0OW01.CL0OWICT > 0 /* If invoices exist*/
           && CL0OW01.CL0OWINX <= CL0OW01.CL0OWICT) /* and more invoices*/
            CL0OW01.CL0OWSWR = "N"; /* y/n have shown warning*/
            CL0OW01.CL0OWTAQ = 0;
            CL0OW01.CL0OWTRQ = 0;
            CL0OW01.CL0OWTCV = 0;
            CL0OW01.CL0OWMSG = " "; /* 11-28-90*/
            set CL0OW04 empty;
            set CL0OW05 empty;
            set CL0OW08 empty; /* GDECKE   03-13-92*/
            CLWREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
            KL0OM001.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
            CLXREC.CLXBLDSC = "Y"; /* Rebuild array and screen*/
            CLXREC.CLXBLDAY = "Y";
            return;
          else
             /* next sentence - need to flow onto different place*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is enter)
    if (CLXREC.CLXCSCRN == "KL0OM010") /* looked at sizes from cl0o150*/
      CLXREC.CLXCSCRN = "KL0OM001";
      CLXREC.CLXEOSF = "N";
    else
      ;
       /* all else fails, flow to next application*/
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      COMMAREA.CATOAP = "KL0P";
      XPCL002();
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf6)
    if (CL0OW01.CL0OWHVR == "N")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(533); /* can't xfer - inspect not done for*/
                                   /* clai*/
      return;
    end
    if (CLAREC.CLAWSENF == "N") /* worksheet entered claim*/
      COMMAREA.CATOAP = "KL02";
    else
      COMMAREA.CATOAP = "KL0E";
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf7)
    KL0OS07();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  if (converseVar.eventKey is pf8)
    KL0OS08();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  if (converseVar.eventKey is pf11)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDAY = "N";
    CLXREC.CLXCSCRN = "KL0OM005";
  end
  ;
  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0P";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
    if (CLAREC.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
        COMMAREA.CATOAP = "KL0K"; /* xfer to*/
        XPCL002();
      else
        COMMAREA.CATOAP = "KL0J"; /* xfer to*/
        XPCL002();
      end
    end
  end
  ;
  if (converseVar.eventKey is pf18) /* pf18 - pass to 'kl0g'*/
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G"; /* xfer to*/
    XPCL002();
  end
  ;
  ;
end // end KL0O140

// flow to following screens
Function KL0O150()
   /* **************************************/
   /* flow to following screens*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O150";
  ;
  ;
   /* look at detail only for products with nbr of sizes > 0*/
  ;
  while ("S " in CL0OW05.CL0OMSEL)
    CLXREC.CLXCSCRN = "KL0OM010";
    CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
    CLXREC.CLXBLDAY = "Y"; /* set build array flag to 'yes'*/
    CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
    CLXREC.CLXERRF = "N"; /* clear error flag*/
    converseLib.validationFailed(0); /* clear error nbr*/
    CLXREC.CLXARY1X[2] = 1; /* start array at first size*/
    /* MOVE EZETST TO CLXREC.CLXARY1X(1);start array at Lst viewed*/
    CL0OW01.CL0OW05X = sysVar.arrayIndex; /* used for accessing prd info on siz*/
    CL0OW05.OP2LNINB[CL0OW05X] = CL0OW05.OP2LNINB[CL0OW05X];
                                   /* %% test*/
    CL0OW05.CL0OMSEL[sysVar.arrayIndex] = "V"; /* set to viewed*/
    while (CLXREC.CLXEOSF == "N")
      KL0O300();
    end
    CLXREC.CLXBLDSC = "Y"; /* rebuild summary screen with changed*/
                                   /* data*/
    CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
    CL0OW01.CL0OWSWR = "N"; /* have not shown warning to user*/
  end
  ;
  CLXREC.CLXCSCRN = "KL0OM001";
  ;
end // end KL0O150

// build array
Function KL0O160()
   /* ********************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y     L O G             **/
   /* *-----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                   **/
   /* *-----------------------------------------------------------------**/
   /* * 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1          **/
   /* ********************************************************************/
   /* **************************************/
   /* build array*/
  ;
    /* when finished with this process, the following*/
    /* records will have been read for later use:*/
      /* ivarec,iv0rec,sp1rec(cl0o103)*/
    /* the following indexes will have been set:*/
      /* clxycrx,clxyctx*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O160";
  ;
  ;
  CL0OW01.CL0OWNOP = 1; /* number of products*/
  CL0OW01.CL0OW05X = 1; /* index for product array*/
  CLXREC.CLXARY1X[1] = 1; /* current line to be shown on screen*/
  CL0OW05.IV0IVCID = KL0OM001.IV0IVCID; /* hold invoice number*/
  CL0OW05.CL0OWINB = KL0OM001.CL0OWINB; /* hold invoice number*/
  ;
  ;
  if (CLAREC.CLADJIND == "Y")
    KL0O161(); /* select adjustments products*/
  end
  KL0O163(); /* select ra products*/
  if (CL0OW01.CL0OWICT > 0   /* if there are invoices*/
   && CLAREC.YCSCD1 != "CMP" /* and clm status not complete*/
   && CLAREC.YCSCD1 != "CAN") /* and clm status not cancelled*/
    KL0O165(); /* select invoice prd's*/
  end
  ;
  CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP - 1; /* actual number of products*/
  ;
  if (CL0OW01.CL0OWNOP > 0)
    KL0O168(); /* calculate claim value and totals*/
  end
  ;
end // end KL0O160

// get prds from cladj
Function KL0O161()
   /* *************************************************************/
   /* *     get all products from cladj database (misshipments)*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O161"; /* set current process name*/
  ;
  ;
  CLXREC.CLXTESTF = "Y"; /* used for incrementing nop index*/
  ;
  CLRREC.CLACLMNB = CLAREC.CLACLMNB;
  CLRREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLRREC.XGPCD = KL0OM001.XGPCD;
  CLRREC.SY1STNBR = "******";
  CLRREC.SY2CLRID = "***";
  CLRREC.XDMCD = "**";
  CLRREC.CLICRDFL = "*";
  ;
  if (CL0OW01.CL0OWICT > 0) /* if have invoices on claim*/
    CLRREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLRREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
    call "IO1370" ("S2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* records for invoice*/
    call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        KL0O162(); /* move data*/
        call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  else
    ;
    call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get all records for claim*/
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        KL0O162(); /* move data*/
        call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  end
  ;
  ;
   /* clxtestf is set to 'y' at beginning of process. if*/
   /* adjustments were found that fit the criteria, clxtestf*/
   /* is set to 'n' in cl0o162, and need to increment cl0ownop*/
   /* for following process*/
  ;
  if (CLXREC.CLXTESTF == "N")
    CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "CL0O004";
    if (CL0OW01.CL0OWICT > 0)
      TA1REC.TA1LOCAT[3] = "SEL 2";
    else
      TA1REC.TA1LOCAT[3] = "SEL 1";
    end
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
end // end KL0O161

// move items from cladj to ws ar
Function KL0O162()
   /* *************************************************************/
   /* *     move items from cladj (clrrec) to cl0ow05 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *    DATE  LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 10-12-90 CHELLM Added code to check for a XUM or XQA code**/
   /* *                 override. This occurs when either the XUM**/
   /* *                 or XQA, originally taken from the Product**/
   /* *                 table or Invoice, has been overriden     **/
   /* *                 with an entered value.                   **/
   /* * 12-14-90 CHELLM Added XGPCD to key before calline CL0OS32**/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* * 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES                **/
   /* * 04-13-92 twatso   april DB2 TABLE CHANGES                **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O162"; /* set current process name*/
  ;
   /* need to summarize cladj records, they may all be at*/
    /* the size level*/
  ;
   /* (first time thru, cl0ow05 fields are empty)*/
  ;
  if (CLRREC.SY1STNBR == CL0OW05.SY1STNBR[CL0OWNOP]
   && CLRREC.SY2CLRID == CL0OW05.SY2CLRID[CL0OWNOP]
   && CLRREC.XDMCD == CL0OW05.XDMCD[CL0OWNOP])
     /* accumulate totals for same product*/
    ;
    CL0OW01.CL0OWNBR = 1;
    if (CLRREC.CLICRDFL == "C")
      CL0OW01.CL0OWNBR = -1;
    end
    CLRREC.CLRRQTQ = CLRREC.CLRRQTQ * CL0OW01.CL0OWNBR;
    CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * CL0OW01.CL0OWNBR;
    CL0OW04.CLKRQTQ[CL0OWNOP] = CLRREC.CLRRQTQ + CL0OW04.CLKRQTQ[CL0OWNOP];
    CL0OW04.CLKAUTHQ[CL0OWNOP] = CLRREC.CLRCLMQ +     CL0OW04.CLKAUTHQ[CL0OWNOP];
    ;
    if (IVAREC.IVANBLFL == "Y") /* net bill flag*/
      if (CLRREC.CLNNTPRC == CL0OW04.CLNNTPRC[CL0OWNOP]) /* same price*/
         /* next sentence*/
      else
         /* price varies between sizes*/
        CL0OW04.OP2PRCVF[CL0OWNOP] = "Y";
      end
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    else
      if (CLRREC.CLNGRPRC == CL0OW04.CLNGRPRC[CL0OWNOP]) /* same price*/
         /* next sentence*/
      else
         /* price varies between sizes*/
        CL0OW04.OP2PRCVF[CL0OWNOP] = "Y";
      end
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    end
    ;
    ;
    CL0OW01.CL0OWWK1 = CLRREC.CLRCLMQ; /* QTY*/
    CL0OW01.CL0OWWK2 = CL0OW04.CLKCLPRC[CL0OWNOP]; /* price*/
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* current est val*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OWWK1 * CL0OWWK2 + CL0OWWK3;
    ;
    CL0OW05.CLKNBRSZ[CL0OWNOP] = CL0OW05.CLKNBRSZ[CL0OWNOP] + 1;
    ;
    ;
  else
    ;
     /* have new product*/
     /* increment counter and store data for product*/
    ;
    if (CLXREC.CLXTESTF == "Y") /* first time thru*/
      /* next sentence-counter at 1 already and doesn't need to go up*/
      CLXREC.CLXTESTF = "N";
    else
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
    ;
    ;
    CL0OW01.CL0OWNBR = 1;
    if (CLRREC.CLICRDFL == "C")
      CL0OW01.CL0OWNBR = -1;
    end
    CLRREC.CLRRQTQ = CLRREC.CLRRQTQ * CL0OW01.CL0OWNBR;
    CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * CL0OW01.CL0OWNBR;
    ;
    CL0OW05.CL0OWSFL[CL0OWNOP] = "A"; /* source from adjustments*/
    CL0OW05.SY1STNBR[CL0OWNOP] = CLRREC.SY1STNBR;
    CL0OW05.SY2CLRID[CL0OWNOP] = CLRREC.SY2CLRID;
    CL0OW05.XDMCD[CL0OWNOP] = CLRREC.XDMCD;
    CL0OW05.SY5SZID[CL0OWNOP] = CLRREC.SY5SZID;
    CL0OW05.OP2LNINB[CL0OWNOP] = CLRREC.OP2LNINB;
    CL0OW04.CLKRQTQ[CL0OWNOP] = CLRREC.CLRRQTQ;
    CL0OW04.CLKAUTHQ[CL0OWNOP] = CLRREC.CLRCLMQ;
    CL0OW04.CLKPRCFF[CL0OWNOP] = CLRREC.CLKPRCFF;
    CL0OW04.CLNGRPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    CL0OW04.CLNNTPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    CL0OW04.XQACD[CL0OWNOP] = CLRREC.XQACD;
    CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = CLRREC.XBK-BK-SESN-CD;
    CL0OW08.OP-BK-YR[CL0OWNOP] = CLRREC.OP-BK-YR;
    CL0OW08.OP-BK-MO[CL0OWNOP] = CLRREC.OP-BK-MO;
    CL0OW05.XUMCD[CL0OWNOP] = CLRREC.XUMCD;
    CL0OW05.CLICRDFL[CL0OWNOP] = CLRREC.CLICRDFL;
    CL0OW05.CL0OMTRN[CL0OWNOP] = CLRREC.CLICRDFL;
    ;
    CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
    CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
    CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
    CL0OW04.CLMTRTSQ[CL0OWNOP] = 0;
    CL0OW04.CLKCLPRC[CL0OWNOP] = 0;
    CL0OW04.OP2PRCVF[CL0OWNOP] = " ";
    CL0OW05.CLKWHSXF[CL0OWNOP] = " ";
    CL0OW04.KUIPRDID[CL0OWNOP] = " ";
    CL0OW05.CLKCRFL[CL0OWNOP] = " ";
    CL0OW05.CL0OMSEL[CL0OWNOP] = " ";
    CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
    CL0OW05.CL0OWUOM[CL0OWNOP] = "N";
                                   /* unit of measure variable flag*/
    ;
    if (CLRREC.SY5SZID == 0) /* this is a summary record*/
      CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
      CL0OW05.CL0OWLVL[CL0OWNOP] = "P"; /* worked at prd level*/
    else /* count sizes for product*/
      CL0OW05.CLKNBRSZ[CL0OWNOP] = 1;
      CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
    end
    ;
    ;
    if (IVAREC.IVANBLFL == "Y")
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    else
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    end
    ;
    CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OWNOP]; /* QTY*/
    CL0OW01.CL0OWWK2 = CL0OW04.CLKCLPRC[CL0OWNOP]; /* price*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK2;
    ;
    ;
    if (CLRREC.CLICRDFL == "C"
     || CLRREC.CLICRDFL == "D")
      CL0OW05.CL0OWFPR[CL0OWNOP] = "Y"; /* freeze price*/
    end
    ;
    ;
    if (CLRREC.IV0IVCID != 0)
       /* fetch line unit price (iv3lnsq,iv3nlnup)*/
      IV3REC.IV0IVCID = CLRREC.IV0IVCID;
      CLXREC.CLXORDIV = CLRREC.IV0IVCID;
      IV3REC.IV0PARTN = CLXREC.CLXPARTN;
      IV3REC.OP2LNINB = CLRREC.OP2LNINB;
      ;
      KL0O167(); /* perform io mod call for iv3rec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        if (CLRREC.XUMCD != IV3REC.XUMCD /* 11-12-90*/
         && CLRREC.XQACD != IV3REC.XQACD)
          KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE";
          CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE";
        else
          if (CLRREC.XUMCD != IV3REC.XUMCD) /* 11-12-90*/
            if (CL0OW01.CL0OWMSG == "    XQA OVERRIDE")
              KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE";
              CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE";
            else
              KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
              CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
            end
          else
            if (CLRREC.XQACD != IV3REC.XQACD) /* 11-12-90*/
              if (CL0OW01.CL0OWMSG == "    XUM OVERRIDE")
                KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE";
                CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE";
              else
                KL0OM001.CL0OWMSG = "    XQA OVERRIDE";
                CL0OW01.CL0OWMSG = "    XQA OVERRIDE";
              end
            end
          end
        end
        ;
      else
        ;
        set SQLCA empty;
        set SYCREC empty;
        SYCREC.XGPCD = CLRREC.XGPCD;
        SYCREC.SY1STNBR = CLRREC.SY1STNBR;
        SYCREC.SY2CLRID = CLRREC.SY2CLRID;
        SYCREC.XDMCD = CLRREC.XDMCD;
        ;
        KL0O132(); /* select unique from DPROD.VSTYLE01*/
        ;
        if (CLRREC.XUMCD != SYCREC.XUMCD) /* 11-12-90*/
          KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
          CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
        end
        ;
      end
      ;
    else
      ;
      set SQLCA empty;
      set SYCREC empty;
      SYCREC.XGPCD = CLRREC.XGPCD;
      SYCREC.SY1STNBR = CLRREC.SY1STNBR;
      SYCREC.SY2CLRID = CLRREC.SY2CLRID;
      SYCREC.XDMCD = CLRREC.XDMCD;
      ;
      KL0O132(); /* select unique from DPROD.VSTYLE01*/
      ;
      if (CLRREC.XUMCD != SYCREC.XUMCD) /* 11-12-90*/
        KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
        CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
      end
      ;
    end
    ;
    ;
    KL0OS94(); /* get customer product id*/
    ;
  end
  ;
end // end KL0O162

// get prds from raitm
Function KL0O163()
   /* *************************************************************/
   /* *     get all products from raitm database (authorized)*/
   /* **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the wild card*/
   /* *          values when Selecting all RAITMs.*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O163"; /* set current process name*/
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = KL0OM001.XGPCD;
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**"; /* 10-04-90*/
  CLKREC.XQACD = "**"; /* 09-13-90*/
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  if (CL0OW01.CL0OWICT > 0) /* have invoices*/
    CLKREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  else
    CLKREC.IV0IVCID = -1;
    CLKREC.IV0PARTN = "*";
  end
  ;
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all prod/sizes*/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
    if (CLKREC.SY5SZID == 0) /* only look at summary records*/
      CL0OW05.CL0OWSFL[CL0OWNOP] = "R"; /* record from raitm*/
      /* MOVE CLKREC.CLKGROUP TO CL0OW05.CL0OW5GP(CL0OWNOP);*/
      KL0O164(); /* move data to array*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
    /* 081489 cl0o164 no longer loops sizes, so read here*/
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get next recs*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* database busy*/
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRAITM";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010(); /* abort*/
    end
  end
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clkrec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLRAITM";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  ;
   /* *******************************************************/
   /* when have invoice(s) attached to claim, user could*/
   /* have entered 'nc' qty(ies) which aren't assoc with*/
   /* any invoice. these need to be shown on the primary*/
   /* invoice.*/
   /* ********************/
   /* 072089 ivc will be attached to 'nc' product/size*/
          /* so following is obsolete.*/
   /* *******************************************************/
  ;
  ;
   /* IF CL0OW01.CL0OWICT > 0         ; have invoices*/
    /* AND CL0OW01.CL0OWINX EQ 1     ; looking at primary invoice*/
    /* MOVE 0 TO CLKREC.IV0IVCID;*/
    /* MOVE '0' TO CLKREC.IV0PARTN;*/
   /* ELSE ;*/
    /* EZERTN             ; have all ra items that are needed*/
   /* END ;*/
  ;
   /* MOVE CLAREC.CLACLMNB TO CLKREC.CLACLMNB;*/
   /* MOVE CL0OM001.XGPCD TO CLKREC.XGPCD;*/
   /* MOVE '******' TO CLKREC.SY1STNBR;*/
   /* MOVE '***' TO CLKREC.SY2CLRID;*/
   /* MOVE '**' TO CLKREC.XDMCD;*/
  ;
  ;
   /* CALL IO1280 'S1',SQLCA,CLKREC (NOMAPS,NONCSP;*/
   /* CALL IO1280 'N1',SQLCA,CLKREC (NOMAPS,NONCSP;*/
   /* WHILE SQLCA.SQLCODE EQ 0;*/
    /* AND CL0OW01.CL0OWNOP LT cl0ow01.cl0owmax;*/
    /* IF CLKREC.SY5SZID EQ 0        ; only look at summ recs*/
      /* MOVE 'R' TO CL0OW05.CL0OWSFL(CL0OWNOP); raitm rec*/
      /* ;MOVE CLKREC.CLKGROUP TO CL0OW05.CL0OW5GP(CL0OWNOP);*/
      /* PERFORM CL0O164             ; move data to array*/
      /* CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;*/
    /* END ;*/
    /* ; sizes are read w/in cl0o164 to accum clm value*/
    /* ;CALL IO1280 'N1',SQLCA,CLKREC (nomaps,noncsp; get next*/
   /* END ;*/
  ;
   /* IF SQLCA.SQLCODE EQ -911;*/
    /* MOVE 4 TO EZEMNO              ; database busy*/
    /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* EZERTN;*/
   /* ELSE ;*/
    /* IF SQLCA.SQLCODE LT 0;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
      /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
      /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
      /* PERFORM XPCL010             ; abort*/
    /* END ;*/
   /* END ;*/
  ;
   /* CALL IO1280 'C1',SQLCA,CLKREC (NOMAPS,NONCSP; close cursor*/
   /* IF SQLCA.SQLCODE NE 0;*/
    /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
    /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
    /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
    /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
    /* PERFORM XPCL010               ; abort*/
   /* END ;*/
  ;
end // end KL0O163

// move RAitems to WS, 4 prod sum
Function KL0O164()
   /* *************************************************************/
   /* *     move items from raitm (clkrec) to cl0ow05 working*/
   /* *    storage.  Note that SY5SZID = 0 to get here.*/
   /* *    Therefore, this processes only product summary RA items*/
   /* *    either authorized at prod level (CLKNBRSZ eq 0)*/
   /* *        or summary of sizes (CLKNBRSZ ne 0).*/
   /* *************************************************************/
   /* *         M A I N T E N A N C E     H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 11-12-90 CHELLM Added code to check for a XUM or XQA code**/
   /* *                 override. This occurs when either the XUM**/
   /* *                 or XQA, originally taken from the Product**/
   /* *                 table or Invoice, has been overriden     **/
   /* *                 with an entered value.                   **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* * 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES                **/
   /* * 04-13-92 twatso   april DB2 TABLE CHANGES                **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O164"; /* set current process name*/
  ;
  ;
  CL0OW01.CL0OWNBR = -1; /* treat products as credits*/
  ;
  if (CLKREC.CLKRQTQ > 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * CL0OW01.CL0OWNBR;
  end
  if (CLKREC.CLKAUTHQ > 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * CL0OW01.CL0OWNBR;
  end
  ;
  CL0OW05.SY1STNBR[CL0OWNOP] = CLKREC.SY1STNBR;
  CL0OW05.SY2CLRID[CL0OWNOP] = CLKREC.SY2CLRID;
  CL0OW05.XDMCD[CL0OWNOP] = CLKREC.XDMCD;
  CL0OW05.SY5SZID[CL0OWNOP] = CLKREC.SY5SZID;
  CL0OW05.OP2LNINB[CL0OWNOP] = CLKREC.OP2LNINB;
  CL0OW04.CLKRQTQ[CL0OWNOP] = CLKREC.CLKRQTQ;
  CL0OW04.CLKAUTHQ[CL0OWNOP] = CLKREC.CLKAUTHQ;
  CL0OW04.CLKPRCFF[CL0OWNOP] = CLKREC.CLKPRCFF;
  CL0OW04.CLKCLPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.CLNNTPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.CLNGRPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.OP2PRCVF[CL0OWNOP] = CLKREC.OP2PRCVF;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = CLKREC.CLKNBRSZ;
  CL0OW04.XQACD[CL0OWNOP] = CLKREC.XQACD;
  CL0OW08.XEGCD[CL0OWNOP] = CLKREC.XEGCD;
  CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = CLKREC.XBK-BK-SESN-CD;
  CL0OW08.OP-BK-YR[CL0OWNOP] = CLKREC.OP-BK-YR;
  CL0OW08.OP-BK-MO[CL0OWNOP] = CLKREC.OP-BK-MO;
  CL0OW05.XUMCD[CL0OWNOP] = CLKREC.XUMCD;
  CL0OW05.CLKWHSXF[CL0OWNOP] = CLKREC.CLKWHSXF;
  CL0OW05.CLKCRFL[CL0OWNOP] = CLKREC.CLKCRFL;
  CL0OW05.YCECD[CL0OWNOP] = CLKREC.YCECD;
  ;
  CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
  CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
  CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
  CL0OW04.KUIPRDID[CL0OWNOP] = " ";
  CL0OW05.CLICRDFL[CL0OWNOP] = " ";
  CL0OW05.CL0OMTRN[CL0OWNOP] = " ";
  CL0OW05.CL0OWUOM[CL0OWNOP] = "N"; /* unit of measure variable flag*/
  CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
  ;
  ;
  ;
  if (CLKREC.CLKNBRSZ == 0)
    CL0OW05.CL0OWLVL[CL0OWNOP] = "P"; /* worked at prd level*/
  else
    CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
  end
  ;
  ;
  if (CLKREC.CLKCRFL == "N")
    CL0OW05.CL0OWFPR[CL0OWNOP] = "Y"; /* freeze price*/
    CL0OW05.CL0OMTRN[CL0OWNOP] = "NC";
  else
    if (CLKREC.CLKCRFL == "Y")
      CL0OW05.CL0OMTRN[CL0OWNOP] = "A";
    else
      if (CLKREC.CLKCRFL == "M") /* 2/89,072089 change V to 'M'*/
        CL0OW05.CL0OMTRN[CL0OWNOP] = "M";
      end
    end
  end
  ;
   /* set variable uom switch also*/
  KL0OS93(); /* select return qty from vdefit01 and*/
                                   /* vrtsit01*/
  CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] > 0) /* need negative qty*/
    CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW04.CLMTRTSQ[CL0OWNOP] * -1;
  end
  ;
  ;
  if (CLKREC.IV0IVCID != 0
   && CLKREC.CLKCRFL != "N") /* 072089 skip ivc for 'NC'*/
     /* fetch qty & line unit price (iv3lnsq,iv3nlnup)*/
    IV3REC.IV0IVCID = CLKREC.IV0IVCID;
    CLXREC.CLXORDIV = CLKREC.IV0IVCID;
    IV3REC.IV0PARTN = CLXREC.CLXPARTN;
    IV3REC.OP2LNINB = CLKREC.OP2LNINB;
    ;
    KL0O167(); /* perform io mod call for iv3rec*/
    ;
        /* ** below added 11-12-90*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if the product is on the invlice*/
      if (CLKREC.XUMCD != IV3REC.XUMCD /* compare to the invoice*/
       && CLKREC.XQACD != IV3REC.XQACD) /* quality code & unit of m*/
        KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE";
        CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE";
      else
        ;
        if (CLKREC.XUMCD != IV3REC.XUMCD) /* compare to the invoice*/
          if (CL0OW01.CL0OWMSG == "    XQA OVERRIDE")
            KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE"; /* unit of measure*/
            CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE"; /* unit of measure*/
          else
            KL0OM001.CL0OWMSG = "    XUM OVERRIDE"; /* unit of measure*/
            CL0OW01.CL0OWMSG = "    XUM OVERRIDE"; /* unit of measure*/
          end
          ;
        else
          if (CLKREC.XQACD != IV3REC.XQACD) /* compare to the invoice*/
            if (CL0OW01.CL0OWMSG == "    XUM OVERRIDE")
              KL0OM001.CL0OWMSG = "XUM/XQA OVERRIDE"; /* unit of measure*/
              CL0OW01.CL0OWMSG = "XUM/XQA OVERRIDE";
                                   /* unit of measure*/
            else
              KL0OM001.CL0OWMSG = "    XQA OVERRIDE"; /* quality code*/
              CL0OW01.CL0OWMSG = "    XQA OVERRIDE"; /* quality code*/
            end
          end
        end
      end
      ;
    else /* else compare to the*/
                                  /* product table*/
      set SQLCA empty;
      set SYCREC empty;
      SYCREC.XGPCD = CLAREC.XGPCD;
      SYCREC.SY1STNBR = CLKREC.SY1STNBR;
      SYCREC.SY2CLRID = CLKREC.SY2CLRID;
      SYCREC.XDMCD = CLKREC.XDMCD;
      ;
      KL0O132(); /* select unique from DPROD.VSTYLE01*/
      ;
      if (CLKREC.XUMCD != SYCREC.XUMCD)
        CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
        KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
      end
      ;
    end
    ;
  else
    ;
    set SQLCA empty; /* 11-12-90*/
    set SYCREC empty;
    SYCREC.XGPCD = CLAREC.XGPCD;
    SYCREC.SY1STNBR = CLKREC.SY1STNBR;
    SYCREC.SY2CLRID = CLKREC.SY2CLRID;
    SYCREC.XDMCD = CLKREC.XDMCD;
    ;
    KL0O132(); /* select unique from DPROD.VSTYLE01*/
    ;
    if (CLKREC.XUMCD != SYCREC.XUMCD)
      KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
      CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
    end
        /* ** above added 11-12-90 ***/
    ;
  end
  ;
  ;
  KL0OS94(); /* get customer product id*/
  ;
   /* validate return qty against authorized qty (have neg qty)*/
   /* done here because later we would have to read thru entire*/
   /* array to look at every product*/
  ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] < CLKREC.CLKAUTHQ
   && CLKREC.YCECD != " ")
    converseLib.validationFailed(8); /* warning - rtn qty cannot exceed auth*/
                                   /* qty*/
    CLXREC.CLXERRF = "Y";
  end
  ;
    /* 081489*/
   /* calculate claim value by summarizing size level values.*/
   /* this gives accurate values for variable pricing*/
  ;
  if (CLKREC.CLKNBRSZ != 0) /* assume curr row has sz=0 (prod or*/
                                   /* prod summ)*/
    set CL0OW07 empty;
    CL0OW07.CL0OWSQL = "M2"; /* sum size values for product*/
    call "IO1280" (CL0OW07, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* sum size values*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL0OW07.CL0OWIN2 < 0) /* bad function?*/
        CL0OW07.CLAESTVL = 0;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0OW07.CLAESTVL = 0;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAITM01";
        TA1REC.TA1TBLKE = "SUM2";
        XPCL010();
      end
    end
    if (CL0OW07.CLAESTVL > 0) /* show credits as debits*/
      CL0OW07.CLAESTVL = CL0OW07.CLAESTVL * CL0OW01.CL0OWNBR; /* * -1*/
    end
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* curr clval*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OW07.CLAESTVL + CL0OWWK3; /* total*/
  else
     /* curr prod auth at prod level, so calc value directly*/
     /* clkauthq already * -1 (see top of code)*/
    CL0OW01.CL0OWWK1 = CLKREC.CLKAUTHQ; /* qty*/
    CL0OW01.CL0OWWK2 = CLKREC.CLKCLPRC; /* price*/
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* curr clm val*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OWWK1 * CL0OWWK2 + CL0OWWK3; /* total*/
  end
  ;
  ;
end // end KL0O164

// get prds from ivitm
Function KL0O165()
   /* *************************************************************/
   /* *     get all products from ivitm database (invoice)*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O165"; /* set current process name*/
  ;
  ;
  IV3REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
  IV3REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  IV3REC.OP2LNINB = -1;
  IV3REC.SY1STNBR = "******";
  IV3REC.SY2CLRID = "***";
  IV3REC.XDMCD = "**";
  IV3REC.XLCCD = "**";
  IV3REC.XQACD = "**";
  ;
  call "IO1100" ("S2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  if (SQLCA.VAGen_SQLCODE < 0) /* added 2/89*/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/
  ;
  CL0OW01.CL0OWPIN = "Y"; /* init products-from-invoice flag*/
  if (SQLCA.VAGen_SQLCODE == 100)
    CL0OW01.CL0OWPIN = "N"; /* no products from invoice*/
  end
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
    if (IV3REC.OP2LNINB in CL0OW05.OP2LNINB) /* already in array*/
       /* next sentence*/
    else
      CL0OW05.CL0OWSFL[CL0OWNOP] = "I"; /* record from invoice*/
      /* MOVE IV3REC.IV3GROUP TO CL0OW05.CL0OW5gp;*/
      KL0O166(); /* move data to array*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
    call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  call "IO1100" ("C2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
end // end KL0O165

// move items from ivitm to ws
Function KL0O166()
   /* *************************************************************/
   /* *     move items from ivitm (iv3rec) to cl0ow05 working*/
   /* *    storage*/
   /* **/
  ;
   /* *************************************************************/
   /* *      M A I N T E N A N C E      H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* * 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES                **/
   /* * 04-13-92 twatso   april DB2 TABLE CHANGES                **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O166"; /* set current process name*/
  ;
  ;
  CL0OW05.SY1STNBR[CL0OWNOP] = IV3REC.SY1STNBR;
  CL0OW05.SY2CLRID[CL0OWNOP] = IV3REC.SY2CLRID;
  CL0OW05.XDMCD[CL0OWNOP] = IV3REC.XDMCD;
  CL0OW05.IV3LNSQ[CL0OWNOP] = IV3REC.IV3LNSQ;
  CL0OW05.IV3NLNUP[CL0OWNOP] = IV3REC.IV3NLNUP;
  CL0OW04.IV3GLNUP[CL0OWNOP] = IV3REC.IV3GLNUP;
  CL0OW04.OP2PRCVF[CL0OWNOP] = IV3REC.OP2PRCVF;
  CL0OW04.XQACD[CL0OWNOP] = IV3REC.XQACD;
  CL0OW08.XEGCD[CL0OWNOP] = IV3REC.XEGCD;
  CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = IV3REC.XBK-BK-SESN-CD;
  CL0OW08.OP-BK-YR[CL0OWNOP] = IV3REC.OP-BK-YR;
  CL0OW08.OP-BK-MO[CL0OWNOP] = IV3REC.OP-BK-MO;
  CL0OW04.CLNNTPRC[CL0OWNOP] = IV3REC.IV3NLNUP;
  CL0OW04.CLNGRPRC[CL0OWNOP] = IV3REC.IV3GLNUP;
  CL0OW04.KUIPRDID[CL0OWNOP] = IV3REC.KUIPRDID;
  CL0OW05.OP2LNINB[CL0OWNOP] = IV3REC.OP2LNINB;
  CL0OW05.XUMCD[CL0OWNOP] = IV3REC.XUMCD;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
  CL0OW04.CLKPRCFF[CL0OWNOP] = "I";
  ;
  CL0OW04.CLKRQTQ[CL0OWNOP] = 0;
  CL0OW04.CLKAUTHQ[CL0OWNOP] = 0;
  CL0OW04.CLMTRTSQ[CL0OWNOP] = 0;
  CL0OW04.CLKCLPRC[CL0OWNOP] = 0;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
  CL0OW05.CLKWHSXF[CL0OWNOP] = " ";
  CL0OW05.CLKCRFL[CL0OWNOP] = " ";
  CL0OW05.CLICRDFL[CL0OWNOP] = " ";
  CL0OW05.CL0OMSEL[CL0OWNOP] = " ";
  CL0OW05.CL0OMTRN[CL0OWNOP] = " ";
  CL0OW05.CL0OWLVL[CL0OWNOP] = " "; /* worked at prd or size level*/
  CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
  CL0OW05.CL0OWUOM[CL0OWNOP] = "N"; /* unit of measure variable flag*/
  ;
  ;
  if (IV3REC.OP2PRCVF == "Y")
    CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
  else
    CL0OW05.CL0OWLVL[CL0OWNOP] = " "; /* worked at prd or size level*/
  end
  ;
   /* look for price overrides*/
  ;
  if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL6REC.IV0IVCID = IV3REC.IV0IVCID;
    CLXREC.CLXORDIV = IV3REC.IV0IVCID;
    CL6REC.IV0PARTN = CLXREC.CLXPARTN;
    CL6REC.XGPCD = CLAREC.XGPCD;
    CL6REC.SY1STNBR = IV3REC.SY1STNBR;
    CL6REC.SY2CLRID = IV3REC.SY2CLRID;
    CL6REC.XDMCD = IV3REC.XDMCD;
    CL6REC.XQACD = IV3REC.XQACD;
    CL6REC.XUMCD = IV3REC.XUMCD;
    CL6REC.SY5SZID = 0;
    ;
    KL0OS95(); /* select set price override*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* found no override for product*/
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      CL6REC.SY5SZID = -1; /* look for override for any sizes*/
      ;
      KL0OS95(); /* select set price override*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        CL0OW04.CLNGRPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLNNTPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLKPRCFF[CL0OWNOP] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        CL0OW04.CLNGRPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLNNTPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLKPRCFF[CL0OWNOP] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    end
  end
  ;
  if (IVAREC.IVANBLFL == "Y")
    CL0OW04.CLKCLPRC[CL0OWNOP] = CL0OW04.CLNNTPRC[CL0OWNOP];
  else
    CL0OW04.CLKCLPRC[CL0OWNOP] = CL0OW04.CLNGRPRC[CL0OWNOP];
  end
  ;
  ;
   /* set variable uom switch also*/
  KL0OS96(); /* select return qty from vdefit01 and vrtsit01*/
  CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] > 0) /* need negative qty*/
    CL0OW05.YCECD[CL0OWNOP] = "CLO"; /* show as exception code*/
    CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW04.CLMTRTSQ[CL0OWNOP] * -1;
  end
  ;
  ;
  KL0OS94(); /* get customer product id*/
  ;
  ;
end // end KL0O166

// fetch from invc item records
Function KL0O167()
   /* *************************************************************/
   /* *     fetch line unit price*/
   /* *    from iv3rec*/
   /* **/
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES.**/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O167"; /* set current process name*/
  ;
  ;
  ;
  ;
   /* fetch line unit price*/
  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0OW05.IV3LNSQ[CL0OWNOP] = IV3REC.IV3LNSQ;
    CL0OW05.IV3NLNUP[CL0OWNOP] = IV3REC.IV3NLNUP;
    CL0OW04.IV3GLNUP[CL0OWNOP] = IV3REC.IV3GLNUP;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
      CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
      CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
    else
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVITM01";
      XPCL010();
    end
  end
end // end KL0O167

// calculate totals for map
Function KL0O168()
   /* *************************************************************/
   /* *                                                          **/
   /* *       CALCULATE CLAIM VALUES AND SCREEN TOTALS           **/
   /* *           FOR NEWLY SELECTED PRODUCT ITEMS               **/
   /* *                                                          **/
   /* *   1) Loop through saved WS product values and sum totals **/
   /* *      for Shipped Quantity, Customer Requested Quantity,  **/
   /* *      Authorized Return Quantity, Actual Return           **/
   /* *      Quantity, and Claim Values.  The claim value for    **/
   /* *      each product is also calculated.                    **/
   /* *                                                          **/
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES.**/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL00168";
  ;
  ;
  CL0OW01.CL0OWTSQ = 0; /* Total shipped quantity*/
  CL0OW01.CL0OWTCQ = 0; /* Total customer requested quantity*/
  CL0OW01.CL0OWTAQ = 0; /* Total authorized quantity*/
  CL0OW01.CL0OWTRQ = 0; /* Total actual returned quantity*/
  CL0OW01.CL0OWTCV = 0; /* Total claim value*/
  ;
  CL0OW01.CL0OWIXM = 1; /* Set working array index*/
  ;
   /* IF YCRTBL.YCRSPARN(CLXYCRX) EQ 'Y'     ; special arrangement*/
    /* AND CL0OW01.CL0OWICT EQ 0     ; invoice count*/
    /* AND CL0OM001.SY1STNBR(1) EQ ' '      ; no products entered*/
    /* CL0OW01.CL0OWTSQ = CL0OW01.CL0OWTSQ + CL0OW05.IV3LNSQ(CL0O*/
    /* CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ(CL0O*/
    /* CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ(CL0*/
    /* CL0OW01.CL0OWTRQ = CL0OW01.CL0OWTRQ + CL0OW04.CLMTRTSQ(CL0*/
    /* CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL(CL0*/
    /* EZERTN;*/
   /* END ;*/
  ;
  while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOP /* While LE nbr of prds*/
   && CL0OW05.SY1STNBR[CL0OWIXM] != " ") /* and data exists to process*/
     /* move to individual build array process cl0o162/4/6  1/89*/
    /* MOVE CL0OW04.CLKAUTHQ(CL0OWIXM) TO CL0OW01.CL0OWWK1; QTY*/
    /* MOVE CL0OW05.CLKCLPRC(CL0OWIXM) TO CL0OW01.CL0OWWK2; price*/
    /* CL0OW05.CLAESTVL(CL0OWIXM) = CL0OW01.CL0OWWK1 * CL0OW01.CL02*/
    ;
    CL0OW01.CL0OWTSQ = CL0OW01.CL0OWTSQ + CL0OW05.IV3LNSQ[CL0OWIXM];
    CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OWIXM];
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OWIXM];
    CL0OW01.CL0OWTRQ = CL0OW01.CL0OWTRQ + CL0OW04.CLMTRTSQ[CL0OWIXM];
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OWIXM];
    ;
    CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1; /* Incr counter*/
  end
  ;
  ;
end // end KL0O168

// map 5 summary descriptions
Function KL0O200()
   /* ************************************************************/
   /* *    process screen cl0om005 Product Descriptions         **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0o050 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O200";
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0O201();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
   /* ***********************************************************/
  converse KL0OM005 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0O210(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  KL0O212(); /* set fields defined*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O220(); /* edit entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O230(); /* update database*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O250(); /* go to detail screen*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O240(); /* handle enter/PF key*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%200.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0O200

// build screen
Function KL0O201()
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O201";
  ;
  set KL0OM005 initial;
  KL0OM005.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL0OM005.CLACLMNB = CLAREC.CLACLMNB;
  KL0OM005.XGPCD = CLAREC.XGPCD;
  KL0OM005.YCTCD = CLAREC.YCTCD;
  KL0OM005.KUCCOID = CLAREC.KUCCOID;
  KL0OM005.KUMSTRID = CLAREC.KUMSTRID;
  KL0OM005.XNXCD = CLAREC.XNXCD;
  KL0OM005.KUCCONM = CLWREC.KUCCONM;
  KL0OM005.YCRCD = CLAREC.YCRCD;
  KL0OM005.OP1CUPO = CLAREC.OP1CUPO;
  KL0OM005.SP1ABRV = CLAREC.SP1ID;
  KL0OM005.XOBCD = CLAREC.XOBCD;
  KL0OM005.XOCCD = CLAREC.XOCCD;
  ;
  KL0O203(); /* expand abrv*/
  ;
  ;
           /* *************************/
           /* get current invoice data*/
           /* *************************/
  ;
  if (CLWREC.IV0IVCID == 0)
    CL0OW01.CL0OWINX = 1; /* start loop thru 200 invoices*/
  else
    if (CLWREC.IV0IVCID in CL0OW06.IV0IVCID) /* locate user entered invoice*/
      CL0OW01.CL0OWINX = sysVar.arrayIndex;
    else
       /* if user entered bad invoice, show error*/
      CLXREC.CLXWFLDN = CLWREC.IV0IVCID;
      TA1REC.TA1DBTBL = CLXREC.CLXWFLDC;
      TA1REC.TA1TBLKE = "UNKNOWN INVOICE NBR IN CLWREC";
      XPCL010();
    end
  end
  ;
  ;
  KL0OM005.CL0OWICT = CL0OW01.CL0OWICT; /* total invoice count*/
  if (CL0OW01.CL0OWICT == 0)
    KL0OM005.CL0OWINB = 0;
  else /* ; if invoice count gt 0*/
    KL0OM005.CL0OWINB = CL0OW01.CL0OWINX;
    KL0OM005.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLWREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    KL0O106(); /* fetch invoice header info iva/ivorec*/
    if (CLXREC.CLXERRF == "N")
      KL0OM005.OP1CUPO = IVAREC.OP1CUPO;
      KL0OM005.IV0IVCDT = IV0REC.IV0IVCDT;
    end
  end
  ;
  ;
           /* *********************/
              /* build array*/
           /* *********************/
  ;
  if (CLXREC.CLXBLDAY == "Y")
    CLXREC.CLXBLDAY = "N";
    KL0O260(); /* build array*/
  end
  ;
           /* *********************/
           /* move data to screen*/
           /* *********************/
  CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1];
   /* product offset eq (1,12,23,34..) depending on pf7/8*/
  ;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11)
    KL0O204(); /* build screen line*/
    KL0O208(); /* protect screen line*/
    CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
   /* if a quality code of unit of measure override exists*/
     /* show the message.*/
  if (CL0OW01.CL0OWMSG != " ")
    KL0OM005.CL0OWMSG = CL0OW01.CL0OWMSG;
  end
  ;
  ;
   /* if possible, set the cursor to the screen row last*/
   /* updated on the Summary-I screen.*/
  ;
  if (CLXREC.CLXERRF != "Y") /* if no other errors exist on the*/
                                   /* screen*/
                              /* set the cursor position to the*/
                              /* last line updated on CL0OM001.*/
    set KL0OM005.CL0OMSEL[CL0OWCIX] cursor;
  end
  ;
end // end KL0O201

// expand codes for header
Function KL0O203()
   /* **************************************/
   /* expand codes for header*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O203";
  ;
  ;
  ;
  sysVar.arrayIndex = +1;
  if (CLAREC.YCRCD in YCRTBL.YCRCD /* if in table*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM005.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
    CLXREC.CLXYCRX = sysVar.arrayIndex;
  end
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* if in table*/
   && YCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM005.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* if in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM005.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (IVAREC.XOCCD in XOCTBL.XOCCD /* if in table*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM005.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CL0OW01.CL0OWICT == 0)
    if (CLAREC.XOBCD in XOBTBL.XOBCD /* if in table*/
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0OM005.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
  else
    if (IV0REC.XOBCD in XOBTBL.XOBCD /* if in table*/
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KL0OM005.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    end
  end
  ;
  ;
end // end KL0O203

// build screen
Function KL0O204()
   /* **************************************/
   /* build screen*/
  ;
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 10-04-90 chellm commented out the XUM description. Only  **/
   /* *                 THE XUMCD will be displayed on the screen**/
   /* *                 due to lack of available space.          **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O204";
  ;
    /* if no products to show*/
    /* or have shown all products and are now moving*/
    /* blank lines to the screen*/
  ;
  if (CL0OW01.CL0OWNOP == 0              
   || CLXREC.CLXLINEX > CL0OW01.CL0OWNOP /* lt 12 products to be shown*/
   || CL0OW01.CL0OW05X > CL0OW01.CL0OWNOP)
     /* move defaults to working storage*/
    ;
    ;
    ;
    return;
  end
  ;
  ;
  KL0O206(); /* get descriptions for products*/
  ;
  ;
  KL0OM005.CL0OMSEL[CLXLINEX] = CL0OW05.CL0OMSEL[CL0OW05X];
  KL0OM005.CL0OMTRN[CLXLINEX] = CL0OW05.CL0OMTRN[CL0OW05X];
  KL0OM005.SY1STNBR[CLXLINEX] = CL0OW05.SY1STNBR[CL0OW05X];
  KL0OM005.SY2CLRID[CLXLINEX] = CL0OW05.SY2CLRID[CL0OW05X];
  KL0OM005.XDMCD[CLXLINEX] = CL0OW05.XDMCD[CL0OW05X];
  KL0OM005.KUIPRDID[CLXLINEX] = CL0OW04.KUIPRDID[CL0OW05X];
  KL0OM005.SY1SSTNM[CLXLINEX] = CL0OW04.SY1SSTNM[CL0OW05X];
  KL0OM005.SY2CLRAB[CLXLINEX] = SYCREC.SY2CLRAB;
  KL0OM005.XQACD[CLXLINEX] = CL0OW04.XQACD[CL0OW05X];
  KL0OM005.XUMCD[CLXLINEX] = CL0OW05.XUMCD[CL0OW05X];
   /* below commented out on 10-04-90 replace desc with code*/
   /* IF CL0OW05.XUMDESC(CL0OW05X) EQ ' ';*/
    /* IF CL0OW05.XUMCD(CL0OW05X) IN XUMTBL.XUMCD;*/
      /* AND XUMTBL.XXXSTAT EQ 'A';*/
      /* MOVE XUMTBL.XUMDESC(EZETST) TO CL0OW05.XUMDESC(CL0OW05X)*/
    /* END ;*/
   /* END ;*/
   /* MOVE CL0OW05.XUMDESC(CL0OW05X) TO CL0OM005.XUMDESC(CLXLINEX)*/
  ;
  if (CL0OW05.CLKWHSXF[CL0OW05X] == "Y")
    KL0OM005.CLKWHSXF[CLXLINEX] = "*";
  else
    KL0OM005.CLKWHSXF[CLXLINEX] = " ";
  end
  ;
   /* 10-04-90 if the product exists error flag was previously*/
            /* set in map 001, redisplay the Product already*/
            /* exists error message and highlight the product.*/
  if (CL0OW05.CL0OWERR[CL0OW05X] == "Y")
    converseLib.validationFailed(212);
    CLXREC.CLXERRF = "Y";
    set KL0OM005.SY1STNBR[CLXLINEX] protect, bold;
    set KL0OM005.SY2CLRID[CLXLINEX] protect, bold;
    set KL0OM005.CL0OMSEL[CLXLINEX] cursor;
  end
end // end KL0O204

// expand descript for products
Function KL0O206()
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *    DATE    LOGON   REASON                                **/
   /* *----------------------------------------------------------**/
   /* *  06-11-91  sgorga  DB2 changes.  Replaced KU2REC with    **/
   /* *                    KUIREC.  Replaced call 'S ' to 'SB'.  **/
   /* *  06-17-91  GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.   **/
   /* *  08-18-97  GREDD1  CALL CU1710 INSTEAD OF IO5790 TO GET  **/
   /* *                    CUST-PROD-ID .                        **/
   /* *************************************************************/
   /* expand descriptions for products*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O206";
  ;
  ;
  set SYCREC empty;
  SYCREC.XGPCD = KL0OM005.XGPCD;
  SYCREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  SYCREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  SYCREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(200); /* nike prod id is not valid*/
      CLXREC.CLXERRF = "Y";
      set KL0OM010.SY1STNBR cursor, bold;
      set KL0OM010.SY2CLRID bold;
      set KL0OM010.XDMCD bold;
      return;
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      XPCL010();
    end
  end
  ;
  ;
  if (CL0OW04.SY1SSTNM[CL0OW05X] == " ")
    CL0OW04.SY1SSTNM[CL0OW05X] = SYCREC.SY1SSTNM;
  end
  ;
  ;
   /* *************************************************************/
   /* *    select the row from customer sku row to get customer*/
   /* *      product id.*/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (CL0OW04.KUIPRDID[CL0OW05X] == " ")
    if (KUCREC.KUCSKIND != " ") /* non-blank means a sku exists*/
       /* **************************************************/
       /* company record read in cl0o005 initialize process*/
       /* says a sku record exists*/
       /* **************************************************/
       /* tcs change begin -08/17/97*/
      set WCU1710 empty;
      WCU1710-INQUIRY-OPTION = "2"; /* Nike product id look up*/
      WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID; /* company*/
      WCU1710-XNX-DEPT-ID-XREF = 0; /* customer dept id cross ref*/
      if (CLAREC.IV0IVCID > 0) /* Get product xref date*/
        WCU1710-CU-PROD-XREF-EDT = IV0REC.IV0IVCDT;
      else
        WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT;
      end
      WCU1710-IN-XGP-GPC-CD = CLAREC.XGPCD; /* g.p.c.*/
                  /* Prod style*/
       /* MOVE KL0OM005.SY1STNBR(CLXLINEX) TO WCU1710-IN-SY-STY-NBR*/
      WCU1710-IN-SY-STY-NBR = CL0OW05.SY1STNBR[CL0OW05X];
                  /* Prod color*/
       /* MOVE KL0OM005.SY2CLRID(CLXLINEX) TO WCU1710-IN-SY-COLR-CD-ID*/
      WCU1710-IN-SY-COLR-CD-ID = CL0OW05.SY2CLRID[CL0OW05X];
                  /* Prod dimension*/
       /* MOVE KL0OM005.XDMCD(CLXLINEX) TO WCU1710-IN-XDM-DIM-CD*/
      WCU1710-IN-XDM-DIM-CD = CL0OW05.XDMCD[CL0OW05X];
      WCU1710-IN-SY-SZ-ID = 0; /* zero size id*/
      ;
       /* If quality code is blank default it to '01'*/
      if (CL0OW04.XQACD[CL0OW05X] != " ") /* Quality code*/
        WCU1710-IN-XQA-QUAL-CD = CL0OW04.XQACD[CL0OW05X];
      else
        WCU1710-IN-XQA-QUAL-CD = "01";
      end
      ;
      call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* get customer product id*/
      if (WCU1710-RETURN-CODE == 0)
        CL0OW04.KUIPRDID[CL0OW05X] = WCU1710.CU-CUST-PROD-ID[1];
        /* tcs change end -08/17/97*/
      else
        CL0OW04.KUIPRDID[CL0OW05X] = " ";
      end
    else
      CL0OW04.KUIPRDID[CL0OW05X] = " ";
    end
  end
  ;
  ;
end // end KL0O206

// protect screen lines
Function KL0O208()
   /* **************************************/
   /* protect screen lines*/
  ;
   /* 10-04-90 chellm added xum and xqa codes*/
   /* **************************************/
  ;
  CLXREC.CLXCSCRN = "CL0O208";
  ;
  ;
  if (KL0OM005.SY1STNBR[CLXLINEX] == " ")
    set KL0OM005.CL0OMSEL[CLXLINEX] protect, invisible;
    set KL0OM005.XUMCD[CLXLINEX] protect, invisible;
    set KL0OM005.XQACD[CLXLINEX] protect, invisible;
  end
  ;
  if (KL0OM005.CL0OMTRN[CLXLINEX] != " ") /* 10-04-90*/
    set KL0OM005.XUMCD[CLXLINEX] protect;
    set KL0OM005.XQACD[CLXLINEX] protect;
  end
  ;
end // end KL0O208

// edit pfkeys
Function KL0O210()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  CLXREC.CLXCPROC = "CL0O210";
  ;
  if (KL0OM005.CATOAP != " " /* if any fastpath data entered*/
   || KL0OM005.CAITEM != " ")
    COMMAREA.CATOAP = KL0OM005.CATOAP;
    COMMAREA.CAITEM = KL0OM005.CAITEM;
     /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf15)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf14) /* pf14 - pass to 'Kl0k' or 'Kl0j'*/
              if (CLAREC.YCTCD in YCTTBL.YCTCD)
                if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
                  COMMAREA.CATOAP = "KL0K"; /* xfer to*/
                  XPCL002();
                else
                  COMMAREA.CATOAP = "KL0J"; /* xfer to*/
                  XPCL002();
                end
              else
                converseLib.validationFailed(232);
                CLXREC.CLXERRF = "Y";
              end
            else
              if (converseVar.eventKey is pf18) /* pf18 - pass to 'Kl0g'*/
                CLWREC.CLWMCMNT = "N";
                COMMAREA.CATOAP = "KL0G"; /* xfer to*/
                XPCL002();
                ;
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                CLXREC.CLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O210

// set fields defined
Function KL0O212()
   /* **************************************/
   /* set fields defined*/
  ;
   /* 10-04-90 chellm added XQACD and XUMCD to fields defined*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O212";
  ;
  set KL0OM005.IV0IVCID initialAttributes;
  set KL0OM005.CL0OWINB initialAttributes;
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11)
    ;
    set KL0OM005.CL0OMSEL[CLXLINEX] initialAttributes;
    set KL0OM005.XUMCD[CLXLINEX] initialAttributes;
    set KL0OM005.XQACD[CLXLINEX] initialAttributes;
    ;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
end // end KL0O212

// edit entries
Function KL0O220()
   /* *************************************************************/
   /* *                                                          **/
   /* *                   EDIT ENTRIES                           **/
   /* *                                                          **/
   /* *    1) if data changed on screen.*/
   /* *       - If no errors, check for a selection code of AA   **/
   /* *           or SA*/
   /* *       - If still no errors, check detail lines from the  **/
   /* *           bottom up.                                     **/
   /* *    2) Edit the header invoice number entered.            **/
   /* *                                                          **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* *----------------------------------------------------------**/
   /* * 10-04-90 chellm added XUMCD and XQACD to checks for      **/
   /* *                 for screen entry changes.                **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0O220";
  ;
  ;
  CL0OW01.CL0OWNIR = "N"; /* new invoice requested*/
  CL0OW01.CL0OWSWR = "Y"; /* have shown warnings to users*/
  set KL0OM005.CL0OMSEL[1] cursor;
  ;
  ;
  KL0O223(); /* validate select codes*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry*/
    /* next sentence - don't want to edit, do want to check inv chg*/
  else
    ;
    CL0OW01.CL0OWPSW = "N"; /* init problem switch*/
    CLXREC.CLXLINEX = 11;
    CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1] + 10;
    while (CLXREC.CLXLINEX > 0)
      ;
      KL0OS43(); /* default selection code*/
      if (KL0OM005.CL0OMSEL[CLXLINEX] == CL0OW05.CL0OMSEL[CL0OW05X]
       && KL0OM005.XUMCD[CLXLINEX] == CL0OW05.XUMCD[CL0OW05X]
       && KL0OM005.XQACD[CLXLINEX] == CL0OW04.XQACD[CL0OW05X]
       && CL0OW05.CL0OWERR[CL0OW05X] != "Y") /* uom error flag not on*/
         /* next sentence - nothing changed*/
      else
        CL0OW01.CL0OWCIX = CLXREC.CLXLINEX; /* set cursor to the*/
                                                 /* last line updated*/
        CL0OW01.CL0OWSWR = "N"; /* Set have reshown map flag 'n'*/
        KL0O229(); /* Edit selections*/
        if (CLXREC.CLXERRF == "Y")
          return;
        end
        if (CL0OW01.CL0OWINQ == "N" /* if not inquiry only*/
         && KL0OM005.CL0OMSEL[CLXLINEX] != "X") /* line not removed*/
          /* **************************************************/
            /* verify the claim price entry, the price*/
              /* from flag, and the quantity entry.*/
          /* ***************************************************/
          KL0O225();
          /* ***************************************************/
            /* verify nike product id.*/
          /* ***************************************************/
          if (CLXREC.CLXERRF == "N") /* if no errors*/
            if (CLAREC.YITCD == "I" /* if product is enterable*/
             || CLAREC.YITCD == "Y") /* assoc. with ibm ivc*/
              if (KL0OM005.SY1STNBR[CLXLINEX] == CL0OW05.SY1STNBR[CL0OW05X]
               && KL0OM005.SY2CLRID[CLXLINEX] == CL0OW05.SY2CLRID[CL0OW05X]
               && KL0OM005.XUMCD[CLXLINEX] == CL0OW05.XUMCD[CL0OW05X]
               && KL0OM005.XQACD[CLXLINEX] == CL0OW04.XQACD[CL0OW05X])
                 /* next sentence - get nike prod id from invoice*/
              else
                KL0O226(); /* validate the nike prod id*/
              end
            else
              KL0O226(); /* validate the nike prod id*/
            end
          end
          /* **********************************************************/
            /* if no problems occured during the edits,*/
              /* then perform claculation and retrieve*/
              /* edits which require certain valid*/
              /* entries to exist on the line.*/
          /* **********************************************************/
          if (CLXREC.CLXERRF == "N") /* if no problems occured*/
            KL0O227(); /* get the appropriate claim price*/
            KL0O228(); /* calculation edits for the totals*/
          end
        else
                                   /* INQUIRY OR DELETEING*/
          ;
          ;
          if (KL0OM005.CL0OMSEL[CLXLINEX] == "X")
            KL0O228();
          end
          ;
        end
        ;
        ;
        ;
         /* **********************/
           /* set update flags*/
         /* **********************/
        ;
        if (CLXREC.CLXERRF == "N")
          KL0O221();
        end
        ;
      end
      if (CLXREC.CLXERRF == "Y")
        CLXREC.CLXERRF = "N";
        CL0OW01.CL0OWPSW = "Y"; /* set problem switch*/
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
      CL0OW01.CL0OW05X = CL0OW01.CL0OW05X - 1;
    end
  end
  ;
  ;
  if (CL0OW01.CL0OWPSW == "Y")
    CLXREC.CLXERRF = "Y"; /* set error flag*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O224(); /* group edits*/
  end
  ;
  ;
   /* *************************************************/
    /* Edit the invoice number*/
   /* *************************************************/
  ;
   /* edit for invoice nbr change after screen data has no errors*/
  if (CLXREC.CLXERRF == "Y")
    if (KL0OM005.IV0IVCID != CL0OW05.IV0IVCID)
      KL0OM005.IV0IVCID = CL0OW05.IV0IVCID; /* restore invoice id*/
    end
    if (KL0OM005.CL0OWINB != CL0OW05.CL0OWINB)
      KL0OM005.CL0OWINB = CL0OW05.CL0OWINB; /* restore ivc seq nbr*/
    end
  else
    if (KL0OM005.IV0IVCID != CL0OW05.IV0IVCID /* If invoice changed*/
     || KL0OM005.CL0OWINB != CL0OW05.CL0OWINB) /* If invoice changed*/
      KL0O222(); /* Edit the header invoice*/
    end
  end
  ;
  ;
end // end KL0O220

// set update flags
Function KL0O221()
   /* ***************************************************/
   /* **/
   /* *  decide which records need to be updated*/
   /* **/
   /* ***************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O221";
  ;
  if (CL0OW05.CL0OWSFL[CL0OW05X] == "A") /* from adjustments*/
    if (CL0OW05.CL0OMSEL[CL0OW05X] == "A" /* authorize*/
     || CL0OW05.CL0OMSEL[CL0OW05X] == "NC")
      CL0OW05.CL0OWUPR[CL0OW05X] = "X"; /* delete clrrec*/
      CL0OW05.CL0OWUPK[CL0OW05X] = "A"; /* add clkrec*/
    else
      if (CL0OW05.CL0OMSEL[CL0OW05X] == "X") /* delete*/
        CL0OW05.CL0OWUPR[CL0OW05X] = "X"; /* delete clrrec*/
      else
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "C"
         || CL0OW05.CL0OMSEL[CL0OW05X] == "D")
          CL0OW05.CL0OWUPK[CL0OW05X] = "C";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
          end
        end
      end
    end
  else
    ;
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* from invoice*/
      if (CL0OW05.CL0OMSEL[CL0OW05X] == "A"
       || CL0OW05.CL0OMSEL[CL0OW05X] == "NC")
        CL0OW05.CL0OWUPK[CL0OW05X] = "A";
      else
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "C"
         || CL0OW05.CL0OMSEL[CL0OW05X] == "D")
          CL0OW05.CL0OWUPR[CL0OW05X] = "A";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
            CL0OW05.CL0OWUPR[CL0OW05X] = " ";
          end
        end
      end
    else
      ;
      if (CL0OW05.CL0OWSFL[CL0OW05X] == "R")
        if (CL0OW05.CL0OMSEL[CL0OW05X] == "X")
          CL0OW05.CL0OWUPK[CL0OW05X] = "X";
        else
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
          else
            if (CL0OW05.CL0OMSEL[CL0OW05X] == "D" /* debit*/
             || CL0OW05.CL0OMSEL[CL0OW05X] == "C") /* credit*/
              CL0OW05.CL0OWUPR[CL0OW05X] = "A"; /* add adjustment*/
              CL0OW05.CL0OWUPK[CL0OW05X] = "X"; /* delete ra*/
            else
              CL0OW05.CL0OWUPK[CL0OW05X] = "C";
            end
          end
        end
      else
         /* below added 10-04-90*/
        if (CL0OW05.CL0OWSFL[CL0OW05X] == " ") /* adding new record*/
          if (CL0OW05.CL0OMSEL[CL0OW05X] == "S")
            CL0OW05.CL0OWUPK[CL0OW05X] = " ";
          else
            if (CL0OW05.CL0OMSEL[CL0OW05X] == "D" /* debit*/
             || CL0OW05.CL0OMSEL[CL0OW05X] == "C") /* credit*/
              CL0OW05.CL0OWUPR[CL0OW05X] = "A"; /* add adjustment*/
            else
              if (CL0OW05.CL0OMSEL[CL0OW05X] == "A" /* authorize*/
               || CL0OW05.CL0OMSEL[CL0OW05X] == "NC") /* non-credit*/
                CL0OW05.CL0OWUPK[CL0OW05X] = "A"; /* add adjustment*/
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O221

// edit invoice number
Function KL0O222()
   /* ************************************************************/
   /* *     check the validity of the invoice number entered    **/
   /* *           on the screen                                 **/
   /* *                                                         **/
   /* ************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y          **/
   /* *---------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                             **/
   /* * --------  --------   -----------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES.**/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES.           **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O222"; /* set current process name*/
  ;
  ;
  ;
  if (KL0OM005.CL0OWINB == 0)
    KL0OM005.CL0OWINB = 1;
  end
  ;
   /* if user selected invoice sequence number le total*/
   /* number of invoices for claim*/
     /* move actual invoice number indexed by invoice sequence*/
     /* into cl0owind.*/
   /* otherwise*/
     /* treat the value in cl0owinb as an actual invoice nbr.*/
   /* this way the user could type the desired invoice*/
   /* nbr in cl0owinb*/
  ;
  if (KL0OM005.IV0IVCID != CL0OW05.IV0IVCID)
    KL0OM005.CL0OWINB = KL0OM005.IV0IVCID;
  else
    if (KL0OM005.CL0OWINB <= CL0OW01.CL0OWICT)
      CL0OW01.CL0OWINX = KL0OM005.CL0OWINB;
      KL0OM005.CL0OWINB = CL0OW06.IV0IVCID[CL0OWINX];
    end
  end
  ;
  ;
  ;
  if (KL0OM005.CL0OWINB in CL0OW06.IV0IVCID)
    CLWREC.IV0IVCID = CL0OW06.IV0IVCID[sysVar.arrayIndex];
    CL0OW01.CL0OWNIR = "Y"; /* new invoice requested*/
    CLXREC.CLXBLDSC = "Y"; /* rebuild screen*/
    CLXREC.CLXBLDAY = "Y"; /* rebuild array*/
    CL0OW01.CL0OWINX = sysVar.arrayIndex; /* index to invoice number*/
    set CL0OW04 empty;
    set CL0OW05 empty;
    set CL0OW08 empty; /* GDECKE 03-13-92*/
  else
    converseLib.validationFailed(188); /* invoice nbr is not valid for claim*/
    set KL0OM005.CL0OWINB cursor, bold;
    CLXERRF = "Y"; /* move y to error flag*/
    KL0OM005.XXXERRID = "KL0O222";
    return;
  end
  ;
end // end KL0O222

// edit selection code
Function KL0O223()
   /* ************************************************************/
   /* *     edit selection code                                 **/
   /* *                                                         **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O223"; /* set current process name*/
  ;
  ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
   /* validate selection code*/
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
  ;
  CLXREC.CLXTESTF = "N";
  CL0OW01.CL0OWNBR = 1;
  if ("SA" in KL0OM005.CL0OMSEL from CL0OWNBR)
    if (sysVar.arrayIndex == 1
     && CLXREC.CLXARY1X[1] == 1) /* on first page*/
      CLXREC.CLXTESTF = "Y"; /* need to move 's' to product lines*/
    else
      converseLib.validationFailed(427); /* must be line 1 of screen 1*/
      CLXREC.CLXERRF = "Y";
      KL0OM005.XXXERRID = "KL0O223";
      set KL0OM005.CL0OMSEL[sysVar.arrayIndex] cursor, bold;
      return;
    end
    CL0OW01.CL0OWNBR = sysVar.arrayIndex;
    if ("SA" in KL0OM005.CL0OMSEL from CL0OWNBR) /* found more than 1 'sa'*/
      converseLib.validationFailed(427); /* must be line 1 of screen 1*/
      KL0OM005.XXXERRID = "KL0O223";
      set KL0OM005.CL0OMSEL[sysVar.arrayIndex] cursor, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
   /* move select code to appropriate lines*/
  ;
  if (CLXREC.CLXTESTF == "Y") /* found 'sa' in first product's select code*/
    CL0OW01.CL0OW05X = 1;
    while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP)
                                   /* index le number of products*/
      if (CL0OW05.SY1STNBR[CL0OW05X] != " "
       && CL0OW05.CLKNBRSZ[CL0OW05X] != 0)
        if (CL0OW05.CL0OMSEL[CL0OW05X] == " "
         || CL0OW05.CL0OMSEL[CL0OW05X] == "V")
          CL0OW05.CL0OMSEL[CL0OW05X] = "S";
           /* move 's' to map below*/
        end
      end
    end
    ;
     /* if all products worked at summary level, show error*/
    ;
    if ("S" in CL0OW05.CL0OMSEL)
       /* next sentence - at least one prduct is worked at size level*/
    else
      converseLib.validationFailed(202); /* clm is worked at prd level*/
      KL0OM005.XXXERRID = "KL0O223";
      CLXREC.CLXERRF = "Y";
      set KL0OM005.CL0OMSEL[1] cursor, bold;
      return;
    end
  end
  ;
  ;
  ;
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry mode*/
    CLXREC.CLXLINEX = 11;
    while (CLXREC.CLXLINEX > 0)
      if (KL0OM005.CL0OMSEL[CLXLINEX] == " "
       || KL0OM005.CL0OMSEL[CLXLINEX] == "S")
         /* next sentence*/
      else
        converseLib.validationFailed(343); /* option not valid in inquiry mode*/
        set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
        KL0OM005.XXXERRID = "KL0O223";
        CLXREC.CLXERRF = "Y";
      end
      CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    end
    return;
  end
  ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
   /* validate authorize code*/
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
  ;
  ;
  CLXREC.CLXTESTF = "N";
  CL0OW01.CL0OWNBR = 1;
  if ("AA" in KL0OM005.CL0OMSEL from CL0OWNBR)
    if (sysVar.arrayIndex == 1
     && CLXREC.CLXARY1X[1] == 1) /* on first page*/
      CL0OW01.CL0OWAAF = "Y"; /* save 'aa' code for author.new*/
                                   /* products*/
      CLXREC.CLXTESTF = "Y"; /* need to move 'a' to product lines*/
    else
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM005.XXXERRID = "KL0O223";
      set KL0OM005.CL0OMSEL[sysVar.arrayIndex] cursor, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
    CL0OW01.CL0OWNBR = sysVar.arrayIndex + 1;
    if ("AA" in KL0OM005.CL0OMSEL from CL0OWNBR)
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM005.XXXERRID = "KL0O223";
      set KL0OM005.CL0OMSEL[sysVar.arrayIndex] cursor, bold;
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all products*/
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 11)
      if ("X" in KL0OM005.CL0OMSEL from CLXLINEX)
        CLXREC.CLXLINEX = sysVar.arrayIndex;
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        CL0OW01.CL0OW05X = CLXREC.CLXARY1X[1] + sysVar.arrayIndex - 1;
        if ("X" in CL0OW05.CL0OMSEL from CL0OW05X)
           /* next sentence - record already deleted from database*/
        else
          converseLib.validationFailed(390); /* can't authorize and cancel at the*/
                                   /* same time*/
          KL0OM005.XXXERRID = "KL0O223";
          set KL0OM005.CL0OMSEL[1] cursor, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else
        CLXREC.CLXLINEX = 12; /* force end of loop*/
      end
    end
    ;
  else
    return; /* don't need to check quantities*/
  end
  ;
  ;
   /* ***************************************************/
      /* Authorize all products and default quantities*/
   /* ***************************************************/
  CL0OW01.CL0OWAAF = "Y"; /* Set all authorize flag*/
  ;
    /* Move 'A ' to all map option fields*/
  ;
  CLXREC.CLXLINEX = 1; /* Set index*/
  while (CLXREC.CLXLINEX <= 11) /* Until end of lines*/
    if (KL0OM005.SY1STNBR[CLXLINEX] != " ")
      KL0OM005.CL0OMSEL[CLXLINEX] = "A "; /* Indicate authorized*/
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Increment counter*/
  end
  ;
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    CL0OW01.CL0OWSWR = "N"; /* set have reshown map flag 'n'*/
    CL0OW01.CL0OW05X = 1; /* Set index*/
    while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP) /* Until end of data*/
      if (CL0OW05.SY1STNBR[CL0OW05X] != " "
       && CL0OW05.CLKNBRSZ[CL0OW05X] == 0
       && CL0OW05.CL0OMSEL[CL0OW05X] == " ")
        CL0OW05.CL0OMSEL[CL0OW05X] = "A "; /* Indicate authorized*/
        CL0OW05.CL0OWUPK[CL0OW05X] = "Y"; /* Inidicate update*/
      else
        if (CL0OW05.SY1STNBR[CL0OW05X] != " "
         && CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* product came from invoice*/
          if (CL0OW05.CL0OMSEL[CL0OW05X] == " "
           || CL0OW05.CL0OMSEL[CL0OW05X] == "V")
            CL0OW05.CL0OMSEL[CL0OW05X] = "A";
            CL0OW05.CLKNBRSZ[CL0OW05X] = 0;
            CL0OW05.CL0OWUPK[CL0OW05X] = "Y"; /* Inidicate update*/
          else
            return;
          end
        end
      end
      ;
       /* default quantities*/
      ;
      if (CL0OW04.CLKRQTQ[CL0OW05X] == 0)
        CL0OW04.CLKRQTQ[CL0OW05X] = CL0OW05.IV3LNSQ[CL0OW05X];
      end
      if (CL0OW04.CLKRQTQ[CL0OW05X] > 0) /* need neg qty for auth*/
        CL0OW04.CLKRQTQ[CL0OW05X] = CL0OW04.CLKRQTQ[CL0OW05X] * -1;
      end
      CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OW05X];
      ;
      if (CL0OW04.CLKAUTHQ[CL0OW05X] == 0)
        CL0OW04.CLKAUTHQ[CL0OW05X] = CL0OW04.CLKRQTQ[CL0OW05X];
      end
      if (CL0OW04.CLKAUTHQ[CL0OW05X] > 0) /* need neg qty*/
        CL0OW04.CLKAUTHQ[CL0OW05X] = CL0OW04.CLKAUTHQ[CL0OW05X] * -1;
      end
      CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OW05X];
      ;
        /* calculate claim value*/
      ;
      CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OW05X]; /* set wk values*/
      CL0OW01.CL0OWWK3 = CL0OW04.CLKCLPRC[CL0OW05X];
      ;
      CL0OW05.CLAESTVL[CL0OW05X] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK3;
      CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OW05X];
      ;
      ;
      CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1; /* incr index*/
    end
  end
  ;
  ;
end // end KL0O223

// group edits - map 5
Function KL0O224()
   /* ************************************************************/
   /* *     group edits - map 5*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O224"; /* set current process name*/
  ;
  ;
   /* if this is a misshipment claim (c , d), edit that at least*/
   /* one product or size is authorized with 'a' or 'nc'*/
  ;
  CL0OW01.CL0OWNBR = 1; /* start at first prd*/
  CLXREC.CLXTESTF = "N";
  ;
  if ("C" in CL0OW05.CL0OMSEL
   || "D" in CL0OW05.CL0OMSEL
   || "C" in CL0OW05.CL0OMTRN
   || "D" in CL0OW05.CL0OMTRN)
    CL0OW01.CL0OWNBR = sysVar.arrayIndex;
    if (CL0OW05.CL0OMSEL[CL0OWNBR] == "X")
       /* next sentence - have deleted adjustment product*/
    else
      if ("S" in CL0OW05.CL0OMSEL)
         /* next sentence - may put 'nc' on size level*/
      else
        if ("Y" in CL0OW05.CLKCRFL /* authorized*/
         || "N" in CL0OW05.CLKCRFL /* 'nc'*/
         || "M" in CL0OW05.CLKCRFL) /* mixed,both auth and 'nc'*/
          ;
           /* now make sure auth prd for return wasn't deleted*/
          CL0OW01.CL0OWNBR = sysVar.arrayIndex;
          while (CL0OW01.CL0OWNBR <= CL0OW01.CL0OWNOP /* number of products*/
           && CLXREC.CLXTESTF == "N")
            if (CL0OW05.CL0OMSEL[CL0OWNBR] == "X") /* prd is deleted*/
              CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1;
                                   /* search for another*/
            else
              CLXREC.CLXTESTF = "Y"; /* found usable auth for rtn prd*/
              return;
            end
            ;
            if ("Y" in CL0OW05.CLKCRFL from CL0OWNBR /* authorized*/
             || "N" in CL0OW05.CLKCRFL from CL0OWNBR /* 'nc'*/
             || "M" in CL0OW05.CLKCRFL from CL0OWNBR) /* both auth and 'nc'*/
              CL0OW01.CL0OWNBR = sysVar.arrayIndex;
            end
            if (sysVar.arrayIndex == 0)
              CLXREC.CLXTESTF = "Y"; /* force out of loop*/
            end
          end
          ;
          if (CL0OW01.CL0OWNBR > CL0OW01.CL0OWNOP
           || CLXREC.CLXTESTF == "Y") /* didn't find usable auth for rtn prds*/
            converseLib.validationFailed(484); /* misshipment claim w/ c/d req 1 auth prod*/
            KL0OM005.XXXERRID = "CL0O124";
            /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
            CL0OW05.CL0OMSEL[CL0OWNOP] = " "; /* clear delete from array*/
            CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; /* one was added above*/
            KL0OM005.CL0OMSEL[CL0OWNBR] = " "; /* clear delete from screen*/
            return;
          end
          ;
        else
          if ("NC" in KL0OM005.CL0OMSEL) /* 'nc' found on screen*/
            return;
          else
            converseLib.validationFailed(484); /* misshipment claim w/ c/d req 1 auth*/
            KL0OM005.XXXERRID = "CL0O124";
            CLXREC.CLXERRF = "Y";
            return;
          end
        end
      end
    end
  end
  ;
  ;
   /* IF CLXREC.CLXCSCRN EQ 'CL0OM010'       ; look at size array*/
    /* IF 'C' IN CL0OW03.CL0OMSEL;*/
      /* OR 'D' IN CL0OW03.CL0OMSEL;*/
      /* OR 'C' IN CL0OW03.CL0OMTRN;*/
      /* OR 'D' IN CL0OW03.CL0OMTRN;*/
      /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
      /* IF CL0OW03.CL0OMSEL(CL0OWNBR) EQ 'X';*/
        /* ; next sentence - have deleted adjustment product*/
      /* ELSE ;*/
        /* IF 'A' IN CL0OW03.CL0OMSEL       ; check size level*/
          /* OR 'NC' IN CL0OW03.CL0OMSEL;*/
          /* OR 'A' IN CL0OW03.CL0OMTRN;*/
          /* OR 'NC' IN CL0OW03.CL0OMTRN;*/
          /* ; now make sure auth size wasn't deleted*/
          /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
   /* WHILE CL0OW01.CL0OWNBR LE CL0OW01.CL0OWNOS; number of sizes*/
            /* AND CLXREC.CLXTESTF EQ 'N';*/
   /* IF CL0OW03.CL0OMSEL(CL0OWNBR) EQ 'X'; prd is deleted*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1; search for another*/
           /* ELSE ;*/
   /* MOVE 'Y' TO CLXREC.CLXTESTF; found usable authorized prd*/
              /* EZERTN;*/
            /* END ;*/
            /* ;*/
   /* IF 'A' IN CL0OW03.CL0OMSEL(CL0OWNBR); found authorized prd*/
             /* OR 'NC' IN CL0OW03.CL0OMSEL(CL0OWNBR);*/
             /* OR 'A' IN CL0OW03.CL0OMTRN(CL0OWNBR);*/
             /* OR 'NC' IN CL0OW03.CL0OMTRN(CL0OWNBR);*/
             /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
           /* END ;*/
           /* IF EZETST EQ 0        ; found no other auth prds*/
             /* MOVE 'Y' TO CLXREC.CLXTESTF; force out of loop*/
           /* END ;*/
         /* END ;*/
         /* ;*/
         /* IF CL0OW01.CL0OWNBR GT CL0OW01.CL0OWNOS;*/
   /* OR CLXREC.CLXTESTF EQ 'Y'; didn't find usable authorized prd*/
   /* mOVE 484 TO EZEMNO; misshipment claim w/ c/d req 1 auth prod*/
           /* MOVE 'CL0O124' TO CL0OM010.XXXERRID;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
   /* MOVE ' ' CL0OW03.CL0OMSEL(CL0OWNOS)    ; clear delete from a*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; one was added above*/
           /* IF CL0OW01.CL0OWNBR GT 11    ; not on first screen*/
    /* CL0OW01.CL0OWNUM = CL0OW01.CL0OWNBR / 11; hold remainder*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWREM * 11 * .01 (R; round*/
   /* MOVE ' ' CL0OM010.CL0OMSEL(CL0OWNBR) ;clear delete from sc*/
           /* ELSE ;*/
   /* MOVE ' ' CL0OM010.CL0OMSEL(CL0OWNBR) ; clear delete from sc*/
          /* END ;*/
          /* EZERTN;*/
        /* END ;*/
   /* ELSE                      ; check summary (product) level*/
        /* IF 'Y' IN CL0OW05.CLKCRFL      ; authorized*/
          /* OR 'N' IN CL0OW05.CLKCRFL    ; 'nc'*/
          /* OR 'm' IN CL0OW05.CLKCRFL    ; both auth and 'nc'*/
          /* ;*/
   /* ; now make sure auth prd isn't same as we are looking at*/
          /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
   /* WHILE CL0OW01.CL0OWNBR LE CL0OW01.CL0OWNOP; nbr of products*/
            /* AND CLXREC.CLXTESTF EQ 'N';*/
            /* IF CL0OW01.CL0OWNBR EQ CL0OW01.CL0OW05X;*/
   /* CL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR + 1; search for another*/
    /* ELSE ;*/
      /* MOVE 'Y' TO CLXREC.CLXTESTF; found usable authorized prd*/
      /* EZERTN;*/
    /* END ;*/
    /* ;*/
    /* IF 'Y' IN CL0OW05.CLKCRFL(CL0OWNBR); authorized*/
      /* OR 'N' IN CL0OW05.CLKCRFL(CL0OWNBR); 'nc'*/
      /* OR 'm' IN CL0OW05.CLKCRFL(CL0OWNBR); both auth and 'nc'*/
      /* MOVE EZETST TO CL0OW01.CL0OWNBR;*/
    /* END ;*/
      /* IF EZETST EQ 0      ; found no other prd auth for rtn*/
        /* MOVE 'Y' TO CLXREC.CLXTESTF; get out of loop*/
        /* MOVE 'Y' TO CLXREC.CLXERRF; stay on screen*/
      /* END ;*/
    /* END ;*/
    /* ;*/
    /* IF CL0OW01.CL0OWNBR GT CL0OW01.CL0OWNOP;*/
   /* OR CLXREC.CLXTESTF EQ 'Y'; didn't find usable authorized prd*/
   /* MOVE 484 EZEMNO ;misshipment claim w/ c/d req 1 auth prod*/
              /* MOVE 'CL0O124' TO CL0OM005.XXXERRID;*/
   /* MOVE 'Y' TO CLXREC.CLXERRF ; need to delete record anyway*/
   /* MOVE ' ' CL0OW05.CL0OMSEL(CL0OWNOP)    ; clear delete from a*/
   /* cL0OW01.CL0OWNBR = CL0OW01.CL0OWNBR - 1; one was added above*/
   /* MOVE ' ' CL0OM005.CL0OMSEL(CL0OWNBR)   ; clear delete from s*/
        /* EZERTN;*/
      /* END ;*/
    /* ELSE ;*/
   /* MOVE 484 TO EZEMNO; misshipment claim w/ c/d req 1 auth prod*/
      /* MOVE 'CL0O124' TO CL0OM005.XXXERRID;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* EZERTN;*/
    /* END ;*/
        /* END ;*/
      /* END ;*/
   /* END ;*/
   /* END ;*/
  ;
  ;
end // end KL0O224

// edit pff and quantities
Function KL0O225()
   /* ************************************************************/
   /* *      VERIFY THE CLAIM PRICE, PRICE FROM FLAG,           **/
   /* *           AND QUANTITY                                  **/
   /* *                                                         **/
   /* *   1) Edits:                                             **/
   /* *      - Claim Price - verify that the claim price is     **/
   /* *          entered for a valid price from flag.           **/
   /* *      - Price From Flag - verify that the price from     **/
   /* *          flag is either 'E', 'I', or 'P'.               **/
   /* *      - Quantity - verify that the quantity is entered   **/
   /* *          for a selection code of 'A' and gt 0           **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O225"; /* Set current process name*/
  ;
  ;
   /* ***************************/
       /* Claim Price*/
   /* ***************************/
  ;
   /* IF CL0OW04.CLKCLPRC(CL0OW05X) EQ 0     ; had no previous pri*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM001.CLKCLPRC(CLXLINEX) NE CL0OW04.CLKCLPRC(CL0OW05*/
      /* AND CL0OW05.CL0OWFPR(CL0OW05X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; can't change price for nc,*/
      /* MOVE 'KL0O225' TO CL0OM001.XXXERRID; Process name*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* SET CL0OM001.CLKCLPRC(CLXLINEX) CURSOR,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
  ;
   /* IF CL0OM005.CL0OMSEL(CLXLINEX) EQ 'NC' ; dont check non-std*/
    /* OR CL0OM005.CL0OMSEL(CLXLINEX) EQ '  '; if no charge or no*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OW05.CL0OMSEL(CL0OW05X) EQ 'NC'; dont check non-std*/
      /* AND CL0OM005.CL0OMSEL(CLXLINEX) EQ 'S'; for no charge pr*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* IF CL0OW05.XUMCD(CL0OW05X) NE '01' ; uom code is not eac*/
        /* MOVE 'Y' TO CLXREC.CLXERRF       ; show warning messag*/
        /* MOVE 'KL0O225' TO CL0OM001.XXXERRID; Process name*/
        /* MOVE 576 TO EZEMNO        ; uom code not eaches  -need*/
        /* SET CL0OM001.CL0OMSEL(CLXLINEX) CURSOR,BRIGHT;*/
      /* END ;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC") /* no price needed*/
     /* next sentence*/
  else
    if (CL0OW05.CL0OMSEL[CL0OW05X] == "NC"
     && KL0OM005.CL0OMSEL[CLXLINEX] == "S")
       /* next sentence*/
    else
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
       && KL0OM001.CLKCLPRC[CLXLINEX] == 0)  /* and a price not entered*/
        if (CL0OW04.OP2PRCVF[CL0OW05X] == "Y") /* no price shown on screen*/
           /* next sentence*/
        else
          CLXREC.CLXERRF = "Y";
          CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
          KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
          converseLib.validationFailed(217); /* Price must be entered*/
          set KL0OM001.CLKCLPRC[CLXLINEX] cursor, modified, bold;
        end
      else
        /* IF CL0OM001.CLKPRCFF(CLXLINEX) EQ 'E'; If PFF is 'E'ntered*/
          /* AND CL0OM001.CLKPRCFF(CLXLINEX) NE CL0OW04.CLKPRCFF(CL0OW0*/
          /* AND CL0OM001.CLKCLPRC(CLXLINEX) EQ CL0OW04.CLKCLPRC(CLXLIN*/
          /* MOVE 'Y' TO CLXREC.CLXERRF;*/
         /* MOVE 'Y' TO CL0OW01.CL0OWPSW   ; Set the problem switch*/
         /* MOVE 'KL0O225' TO CL0OM001.XXXERRID; Process name*/
         /* MOVE 217 TO EZEMNO      ; Price must be entered*/
         /* SET CL0OM001.CLKCLPRC(CLXLINEX) CURSOR,MODIFIED,BRIGHT;*/
        /* ELSE ;*/
        if (KL0OM001.CLKPRCFF[CLXLINEX] != "E" /* If PFF not 'E'ntered*/
         && KL0OM001.CLKCLPRC[CLXLINEX] != CL0OW04.CLKCLPRC[CL0OW05X])
          CLXREC.CLXERRF = "Y";
          CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
          KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
          converseLib.validationFailed(222); /* Cannot change price*/
          set KL0OM001.CLKCLPRC[CLXLINEX] cursor, bold;
          KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLKCLPRC[CL0OW05X];
        else
          if (KL0OM001.CLMTRTSQ[CLXLINEX] > 0) /* have returned qty*/
            if (KL0OM001.CLKPRCFF[CLXLINEX] != CL0OW04.CLKPRCFF[CL0OW05X]
             && KL0OM001.CLKPRCFF[CLXLINEX] == "E")
                                   /* If PFF is 'E'ntered*/
              CLXREC.CLXERRF = "Y";
              KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
              converseLib.validationFailed(342); /* Cannot have entered price*/
              set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
              KL0OM001.CLKPRCFF[CLXLINEX] = CL0OW04.CLKPRCFF[CL0OW05X];
            end
            if (KL0OM001.CLKCLPRC[CLXLINEX] != CL0OW04.CLKCLPRC[CL0OW05X])
              CLXREC.CLXERRF = "Y";
              CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
              KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
              converseLib.validationFailed(342); /* Cannot have entered price w rtn qty*/
              set KL0OM001.CLKCLPRC[CLXLINEX] cursor, bold;
              KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLKCLPRC[CL0OW05X];
            end
          else
            if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
             && KL0OM001.CLKCLPRC[CLXLINEX] != 0   /* and claim price entered*/
             && KL0OM001.SY1STNBR[CLXLINEX] != " ") /* and prod id is entered*/
              CL0OW04.CLKCLPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
              CL0OW04.CLNNTPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
              CL0OW04.CLNGRPRC[CL0OW05X] = KL0OM001.CLKCLPRC[CLXLINEX];
            end
                     /* END ;*/
          end
        end
      end
    end
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
    KL0OM001.CLKCLPRC[CLXLINEX] = 0;
    CL0OW04.CLKCLPRC[CL0OW05X] = 0;
  end
  ;
   /* ***************************/
     /* Price From Flag*/
   /* ***************************/
  ;
   /* IF CL0OW04.CLKPRCFF(CL0OW05X) EQ ' '   ; had no previous pri*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM001.CLKPRCFF(CLXLINEX) NE CL0OW04.CLKPRCFF(CL0OW05*/
      /* AND CL0OW05.CL0OWFPR(CL0OW05X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; cannot change price with c*/
      /* MOVE 'KL0O225' TO CL0OM001.XXXERRID;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* SET CL0OM001.CLKPRCFF(CLXLINEX) CURSOR,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "S")
     /* next sentence*/
  else
    if (KL0OM001.CLKPRCFF[CLXLINEX] == " "
     && KL0OM001.CLKCLPRC[CLXLINEX] == 0)
      KL0OM001.CLKPRCFF[CLXLINEX] = "P";
      if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
         /* now it doesn't look like price changed for cl0o127*/
        CL0OW04.CLKPRCFF[CL0OW05X] = "P";
      end
    else
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "E" /* Entered price*/
       || KL0OM001.CLKPRCFF[CLXLINEX] == "I" /* Invoice price*/
       || KL0OM001.CLKPRCFF[CLXLINEX] == "P") /* Product price*/
         /* next sentence*/
      else
        if (KL0OM001.CLKPRCFF[CLXLINEX] == "O") /* override invoice price*/
          if (CL0OW04.CLKPRCFF[CL0OW05X] == "O")
             /* next sentence*/
          else
             /* user changed flag*/
            KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
            converseLib.validationFailed(201); /* Price from is invalid*/
            CLXREC.CLXERRF = "Y";
            set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
          end
        else
          KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
          converseLib.validationFailed(201); /* Price from is invalid*/
          CLXREC.CLXERRF = "Y";
          set KL0OM001.CLKPRCFF[CLXLINEX] cursor, bold;
        end
      end
    end
  end
  ;
  ;
  ;
             /* ***************************/
                     /* Quantity*/
             /* ***************************/
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "S")
    return; /* no quantities required*/
  end
  ;
   /* ************************************************************/
   /* * default quantities and give correct sign for credit/auth*/
   /* ************************************************************/
   /* if shipped qty eq 0*/
      /* and requested qty eq 0 and authorized qty eq 0*/
      /* give error*/
   /* end*/
   /* if cust qty eq 0*/
      /* default cust qty from shipped qty*/
   /* end*/
   /* if authorized qty eq 0*/
     /* default authorized qty from customer qty*/
   /* end*/
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] == 0 /* no default qty*/
   && KL0OM001.CLKRQTQ[CLXLINEX] == 0 
   && KL0OM001.CLKAUTHQ[CLXLINEX] == 0)
    converseLib.validationFailed(231); /* quantity required*/
    KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
    if (KL0OM001.CLKRQTQ[CLXLINEX] == 0)
      KL0OM001.CLKRQTQ[CLXLINEX] = KL0OM001.IV3LNSQ[CLXLINEX];
    end
    if (KL0OM001.CLKAUTHQ[CLXLINEX] == 0)
      KL0OM001.CLKAUTHQ[CLXLINEX] = KL0OM001.CLKRQTQ[CLXLINEX];
    end
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
     /* need negative quantities*/
    if (KL0OM001.CLKRQTQ[CLXLINEX] > 0)
      KL0OM001.CLKRQTQ[CLXLINEX] = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
    end
    if (KL0OM001.CLKAUTHQ[CLXLINEX] > 0)
      KL0OM001.CLKAUTHQ[CLXLINEX] = KL0OM001.CLKAUTHQ[CLXLINEX] * -1;
    end
  end
  ;
  ;
   /* ************************************************************/
   /* *     edit customer requested quantity*/
   /* ************************************************************/
  ;
   /* if cust qty greater than non-zero shipped qty*/
  ;
  if (KL0OM001.CLKRQTQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM001.CLKRQTQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM001.CLKRQTQ[CLXLINEX];
  end
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM001.IV3LNSQ[CLXLINEX])
    converseLib.validationFailed(461); /* cust qty cannot exceed invoice shpd qty*/
    KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKRQTQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ - CL0OW04.CLKRQTQ[CL0OW05X];
  CL0OW04.CLKRQTQ[CL0OW05X] = KL0OM001.CLKRQTQ[CLXLINEX];
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OW05X];
  ;
  ;
   /* ************************************************************/
   /* *     edit authorized claim quantity*/
   /* ************************************************************/
  ;
   /* if authorized qty greater than non-zero shipped qty*/
  ;
  if (KL0OM001.CLKAUTHQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM001.CLKAUTHQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM001.CLKAUTHQ[CLXLINEX];
  end
  ;
  if (KL0OM001.IV3LNSQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM001.IV3LNSQ[CLXLINEX])
    converseLib.validationFailed(462); /* use nc to author above shipd qty*/
    KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
   /* returned qty gt authorized qty, not an error only warning*/
  ;
  if (KL0OM001.CLMTRTSQ[CLXLINEX] > CL0OW01.CL0OWWK1
   && CL0OW05.YCECD[CL0OW05X] != " ")
    KL0OM001.XXXERRID = "KL0O225"; /* Process name*/
    converseLib.validationFailed(388); /* Cannot be greater than*/
    CLXREC.CLXERRF = "Y";
    set KL0OM001.CLKAUTHQ[CLXLINEX] cursor, bold;
  end
  ;
  ;
  if (KL0OM005.SY1STNBR[CLXLINEX] != " " /* If prod id is entered*/
   || YCRTBL.YCRSPARN[CLXYCRX] == "Y")  
                                   /* no prod reqd for special arrng*/
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ - CL0OW04.CLKAUTHQ[CL0OW05X];
    CL0OW04.CLKAUTHQ[CL0OW05X] = KL0OM001.CLKAUTHQ[CLXLINEX];
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OW05X];
  end
  ;
end // end KL0O225

// edit nike prod id
Function KL0O226()
   /* *************************************************************/
   /* *                                                          **/
   /* *            SELECT FROM DPROD.VCOLOR02                    **/
   /* *                                                          **/
   /* *   1) Select the row from the product file to see if it   **/
   /* *      exists.                                             **/
   /* *                                                          **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON   REASON                                  **/
   /* *----------------------------------------------------------**/
   /* * 10-04-90 CHELLM  Added XUMCD and XQACD to product edits  **/
   /* *          Clear CL0OWERR flag that is set when dup        **/
   /* *          product error occurs (#212) on M001 screen when **/
   /* *          the XUM or XQA is changed making the prod unique**/
   /* * 06-17-91 GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.     **/
   /* * 10-25-00 GDECKE  REMOVE TEST FOR PREPACK COMPONENT       **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O226"; /* Set current process name*/
  ;
  ;
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y"    /* special arrangement*/
   && KL0OM005.SY1STNBR[CLXLINEX] == " " /* If Nike prod id eq ' '*/
   && KL0OM005.SY2CLRID[CLXLINEX] == " " 
   && KL0OM005.XDMCD[CLXLINEX] == " ")  
    CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    return;
  end
  ;
  ;
  if (KL0OM005.SY1STNBR[CLXLINEX] == " " /* If Nike prod id eq ' '*/
   && KL0OM005.SY2CLRID[CLXLINEX] == " " 
   && KL0OM005.XDMCD[CLXLINEX] == " ")  
    CL0OW05.SY1STNBR[CL0OW05X] = " ";
    CL0OW05.SY2CLRID[CL0OW05X] = " ";
    CL0OW05.XDMCD[CL0OW05X] = " ";
    CLXREC.CLXERRF = "Y"; /* Indicate error*/
    KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
    converseLib.validationFailed(200); /* Nike prod id not valid*/
    set KL0OM005.SY1STNBR[CLXLINEX] cursor, bold;
    set KL0OM005.SY2CLRID[CLXLINEX] bold;
    set KL0OM005.XDMCD[CLXLINEX] bold;
    return;
  end
  ;
   /* added 10-04-90*/
   /* ************************************************************/
   /* *                edit quality code*/
   /* ************************************************************/
  if (KL0OM005.XQACD[CLXLINEX] in XQATBL.XQACD)
    if (KL0OM005.XQACD[CLXLINEX] != CL0OW04.XQACD[CL0OW05X])
      KL0OM001.CL0OWMSG = "    XQA OVERRIDE"; /* override message*/
      KL0OM005.CL0OWMSG = "    XQA OVERRIDE"; /* override message*/
      CL0OW01.CL0OWMSG = "    XQA OVERRIDE"; /* override message*/
      CL0OW04.XQACD[CL0OW05X] = KL0OM005.XQACD[CLXLINEX];
    else
      CL0OW04.XQACD[CL0OW05X] = KL0OM005.XQACD[CLXLINEX];
    end
  else
    set KL0OM005.XQACD[CLXLINEX] cursor, modified, bold;
    converseLib.validationFailed(468);
    CLXREC.CLXERRF = "Y";
    KL0OM001.XXXERRID = "KL0O226"; /* Process name*/
    return;
  end
  ;
  ;
   /* added 10-04-90*/
   /* ************************************************************/
   /* *              edit unit of measure code*/
   /* ************************************************************/
  ;
    /* if the xum changes and is different from the default value*/
    /* on the product table, set the xum chng flag thats used*/
    /* in cl0os33 to convert the product table price to*/
    /* to a price corrosponding to the new unit of measure*/
  ;
  if (KL0OM005.XUMCD[CLXLINEX] in XUMTBL.XUMCD)
    if (KL0OM005.XUMCD[CLXLINEX] != CL0OW05.XUMCD[CL0OW05X])
      if (KL0OM005.XUMCD[CLXLINEX] == "R "
       && CL0OW05.XUMCD[CL0OW05X] == "L ")
        /* next sentence, the uom is not really changing*/
      else
        if (KL0OM005.XUMCD[CLXLINEX] == "L "
         && CL0OW05.XUMCD[CL0OW05X] == "R ")
          /* next sentence, the uom is not really changing*/
        else
          CL0OW05.CL0OWUMF[CL0OW05X] = "Y"; /* set uom changing flag*/
          KL0OM001.CL0OWMSG = "    XUM OVERRIDE";
          KL0OM005.CL0OWMSG = "    XUM OVERRIDE";
          CL0OW01.CL0OWMSG = "    XUM OVERRIDE";
        end
      end
    else /* the xum has chged so the*/
      CL0OW05.CL0OWUMF[CL0OW05X] = "N"; /* check price in cl0os33*/
    end
    CL0OW05.XUMCD[CL0OW05X] = KL0OM005.XUMCD[CLXLINEX];
  else
    set KL0OM005.XUMCD[CLXLINEX] cursor, modified, bold;
    converseLib.validationFailed(409);
    CLXREC.CLXERRF = "Y";
    KL0OM001.XXXERRID = "KL0O226"; /* Process name*/
    return;
  end
  ;
   /* *********************************************/
    /* user can enter products on screen only when*/
     /* - non-crediting the prod*/
     /* - have misshipment*/
     /* - have no invoice on claim*/
     /* - prod is part of a prepack*/
     /* - authorizing*/
   /* any time they have the itch to do so*/
   /* *********************************************/
  ;
  CLXREC.CLXTESTF = "N"; /* init prepack flag*/
  if (CL0OW05.SY1STNBR[CL0OW05X] == " "
   && CL0OW05.SY2CLRID[CL0OW05X] == " "
   && CL0OW05.XDMCD[CL0OW05X] == " ") /* have new entry*/
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "C"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "D"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "A"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "S") /* to add sizes*/
       /* okay to add non credit products or misshipments*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    else
      if (KL0OM001.IV0IVCID == 0)
         /* okay to add prds if no invoice attached*/
        CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
      else
        ;
         /* need to validate product id before validating if this*/
         /* product is part of a prepack*/
        ;
        CLXREC.CLXTESTF = "Y";
      end
    end
  end
  ;
  ;
    /* *****************************/
       /* validate product id*/
    /* *****************************/
  ;
  ;
  set SYCREC empty; /* Product table*/
  SYCREC.XGPCD = CLAREC.XGPCD; /* Gpc code*/
  SYCREC.SY1STNBR = KL0OM005.SY1STNBR[CLXLINEX]; /* Style*/
  if (KL0OM005.SY2CLRID[CLXLINEX] == " ")
    KL0OM005.SY2CLRID[CLXLINEX] = "00";
  end
  if (KL0OM005.XDMCD[CLXLINEX] == " ")
    KL0OM005.XDMCD[CLXLINEX] = "00";
  end
  SYCREC.SY2CLRID = KL0OM005.SY2CLRID[CLXLINEX]; /* Color*/
  SYCREC.XDMCD = KL0OM005.XDMCD[CLXLINEX]; /* Dimension*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
     /* *********************************************/
             /* handle prepacks*/
    ;
    if (CLXREC.CLXTESTF == "N") /* not looking for component of prepack*/
       /* next sentence*/
    else
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
      converseLib.validationFailed(8); /* selection is not valid*/
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    /* REMOVING TEST FOR PREPACK COMPONENT - THE CONDITION IS NOT*/
    /* EXPECTED TO HAPPEN, AND COMPONENT PRICE WILL NOT BE AVAILABLE*/
    /* ON THE DPROD.VPGSTY01 TABLE*/
       /* look up as partial package*/
    ;
     /* SET SYJREC EMPTY;*/
     /* MOVE SYCREC.XGPCD TO SYJREC.XGPCD;*/
     /* MOVE SYCREC.SY1STNBR TO SYJREC.SY1STNBR;*/
     /* MOVE SYCREC.SY2CLRID TO SYJREC.SY2CLRID;*/
     /* MOVE SYCREC.XDMCD TO SYJREC.XDMCD;*/
    ;
     /* CALL IO2130 'S2',SQLCA,SYJREC (NOMAPS,NONCSP; /* dprod.vpgsty01*/
    ;
     /* CALL IO2130 'N2',SQLCA,SYJREC (NOMAPS,NONCSP; /* dprod.vpgsty01*/
     /* MOVE 'N' TO CLXREC.CLXTESTF;  /* re-init prepack flag*/
    ;
     /* WHILE SQLCA.SQLCODE EQ 0      /* look at all prepack group ids*/
       /* AND CLXREC.CLXTESTF EQ 'N';*/
    ;
       /* IF SYJREC.SYJPGNBR IN CL0OW05.SY1STNBR; /* found group id*/
         /* MOVE 'Y' TO CLXREC.CLXTESTF;*/
       /* ELSE;*/
                                  /* CALL IO2130 'N2',SQLCA,SYJREC*/
                                   /* (NOMAPS,NONCSP; /* dprod.vpgsty01*/
       /* END;*/
     /* END;*/
    ;
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE; /* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
    ;
     /* CALL IO2130 'C2',SQLCA,SYJREC (NOMAPS,NONCSP; /* dprod.vpgsty01*/
     /* IF SQLCA.SQLCODE LT 0;*/
       /* MOVE SYJREC.SYJPGNBR TO TA1REC.TA1TBLKE; /* move in key*/
       /* MOVE 'DPROD' TO TA1REC.TA1DBASE;*/
       /* MOVE 'VCOLOR02' TO TA1REC.TA1TBLVU;*/
       /* PERFORM XPCL010;*/
     /* END;*/
     /* IF CLXREC.CLXTESTF EQ 'Y';    /* found component of prepack*/
       /* CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;*/
       /* MOVE 'Y' TO CL0OW05.CL0OWPPF(CL0OW05X); /* set prepack flag*/
       /* MOVE 'P' TO CL0OW05.CL0OWLVL(CL0OW05X); /* worked at prod level*/
         /* default price to be used in price calculation cl0o127*/
       /* MOVE SYJREC.SYJSTYPR TO CL0OW04.CLNNTPRC(CL0OW05X);*/
       /* MOVE SYJREC.SYJSTYPR TO CL0OW04.CLNGRPRC(CL0OW05X);*/
     /* ELSE;                         /* not part of prepack*/
       /* MOVE 'Y' TO CLXREC.CLXERRF;        /* Indicate error*/
       /* MOVE 'KL0O226' TO KL0OM005.XXXERRID; /* Process name*/
       /* MOVE 8 TO EZEMNO;           /* selection is not valid*/
       /* SET KL0OM005.CL0OMSEL(CLXLINEX) CURSOR,BRIGHT;*/
       /* EZERTN;*/
     /* END;*/
    /* END;*/
    ;
     /* ******************************************** 10-04-90*/
     /* if the unit of measure has been changed and it's original*/
     /* prepack xum from the product table has been chngd to eachs*/
     /* keep the xum-changed flag set to 'y' so the price will be*/
     /* converted to eachs too. Else, set the flag back to 'n' so*/
     /* the price will default from the product table.*/
    ;
    if (KL0OM005.XUMCD[CLXLINEX] != SYCREC.XUMCD /* if xum diff from DPROD*/
     && CL0OW05.CL0OWUMF[CL0OW05X] == "Y")       /* and has changed*/
      if (SYCREC.XUMCD != "01" /* from a prepack xum*/
       && KL0OM005.XUMCD[CLXLINEX] == "01") /* to eachs*/
        /* next sentence                            ;leave xum flag set*/
      else
        if (KL0OM005.XUMCD[CLXLINEX] == "R "
         || KL0OM005.XUMCD[CLXLINEX] == "L ")
           /* next sentence      leave xum change flag set*/
        else /* else*/
          CL0OW05.CL0OWUMF[CL0OW05X] = "N"; /* set flag off*/
        end
      end
    else /* else*/
       /* MOVE 'N' TO CL0OW05.CL0OWUMF(CL0OW05X); set flag off*/
    end
    ;
    /* MOVE SYCREC.XUMCD TO CL0OW05.XUMCD(CL0OW05X);      10-04-90*/
    CL0OW05.XUMCD[CL0OW05X] = KL0OM005.XUMCD[CLXLINEX]; /* 10-04-90*/
    ;
    ;
     /* 072089 add 5 lines:*/
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
      CLKREC.CLKCRFL = "N";
    else
      CLKREC.CLKCRFL = "Y";
    end
     /* 072089 move 4 lines from CL0OS36 to here:*/
    CLKREC.IV0IVCID = KL0OM005.IV0IVCID;
    CLKREC.SY1STNBR = KL0OM005.SY1STNBR[CLXLINEX];
    CLKREC.SY2CLRID = KL0OM005.SY2CLRID[CLXLINEX];
    CLKREC.XDMCD = KL0OM005.XDMCD[CLXLINEX];
    CLKREC.XUMCD = KL0OM005.XUMCD[CLXLINEX]; /* 10-04-90*/
    CLKREC.XQACD = KL0OM005.XQACD[CLXLINEX]; /* 10-04-90*/
    KL0OS36(); /* Select the RA item to see if already*/
                                   /* authorized*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      CL0OW01.CL0OWEFL = "N"; /* Set product exist flag to no*/
      /* **********************************************************/
        /* If the RA item exists in the DCLAIM.VRAITM01 database*/
         /* then check to see if that particular product exists*/
          /* in the current working storage.  If it does exist in*/
          /* WS, then give user a message indicating fast path*/
          /* positioning. Else just indicate product cannot be*/
          /* entered because it is already authorized.*/
      /* **********************************************************/
      KL0OS30(); /* Check to see if product exists in WS*/
      if (CL0OW01.CL0OWEFL == "Y" /* If the product is in WS*/
       && CL0OW05.SY1STNBR[CL0OW05X] == " ") /* and user is adding*/
        converseLib.validationFailed(212);
                                   /* prod exist as RA - Fast path position*/
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        CL0OW01.CL0OWPSW = "Y"; /* Indicate problem*/
        KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
        set KL0OM005.SY1STNBR[CLXLINEX] protect, bold;
        set KL0OM005.SY2CLRID[CLXLINEX] protect, bold;
        set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
        return; /* 072089 add*/
      end
       /* 072089 condense code since nc/'a' match found in CL0OS36:*/
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      CL0OW01.CL0OWPSW = "Y"; /* Indicate problem*/
      KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor; /* 10-04-90*/
      set KL0OM005.SY1STNBR[CLXLINEX] protect, bold;
      set KL0OM005.SY2CLRID[CLXLINEX] protect, bold;
      set KL0OM005.XDMCD[CLXLINEX] protect;
      if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
        converseLib.validationFailed(344); /* non-credit product already exists*/
      else
        converseLib.validationFailed(345); /* credit product already exists*/
      end
    else
      CL0OW05.SY1STNBR[CL0OW05X] = KL0OM005.SY1STNBR[CLXLINEX];
      CL0OW05.SY2CLRID[CL0OW05X] = KL0OM005.SY2CLRID[CLXLINEX];
      CL0OW05.XDMCD[CL0OW05X] = KL0OM005.XDMCD[CLXLINEX];
      CL0OW05.XUMCD[CL0OW05X] = KL0OM005.XUMCD[CLXLINEX]; /* 10-04-90*/
      CL0OW04.XQACD[CL0OW05X] = KL0OM005.XQACD[CLXLINEX];
      CL0OW05.CL0OWERR[CL0OW05X] = " "; /* (10-04-90)*/
      if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC") /* non-credit*/
        CL0OW05.CLKCRFL[CL0OW05X] = "N";
      else
        if (KL0OM005.CL0OMSEL[CLXLINEX] == " " /* If no selection*/
         && KL0OM005.CL0OMTRN[CLXLINEX] == " " 
         && converseVar.eventKey not pf10)     /* may want to authorize on prod screen*/
          converseLib.validationFailed(429);
                                   /* authorize or cancel prod just entered*/
          CLXREC.CLXERRF = "Y"; /* Indicate error*/
          KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
          set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
        else
          CL0OW05.CLKCRFL[CL0OW05X] = "Y"; /* 072089 add*/
        end
      end
    end
    ;
  else /* product was not found on style*/
                                   /* database*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(200); /* Nike prod id not valid*/
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0OM005.XXXERRID = "KL0O226"; /* Process name*/
      set KL0OM005.SY1STNBR[CLXLINEX] cursor, bold;
      set KL0OM005.SY2CLRID[CLXLINEX] bold;
      set KL0OM005.XDMCD[CLXLINEX] bold;
    else
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* move in key*/
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      XPCL010();
    end
  end
  ;
  ;
end // end KL0O226

// select appropriate claim price
Function KL0O227()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE APPROPRIATE CLAIM PRICE                **/
   /* *                                                          **/
   /* *     1) If the price from flag was changed                **/
   /* *        - If price from flag is equal to 'E', then        **/
   /* *          save the price from flag and continue on.       **/
   /* *        - If price from flag is equal to 'I', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          invoice product item.                           **/
   /* *        - If price from flag is equal to 'P', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          product.                                        **/
   /* *                                                          **/
  ;
   /* *************************************************************/
         /* M A I N T E N A N C E      H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *  DATE   LOGON  REASON                                    **/
   /* *----------------------------------------------------------**/
   /* 04-10-90 CHELLM Added XQACD and XUMCD to the product key  **/
                    /* when selecting invoice price overrides.  **/
   /* 10-04-90 chellm If the unit of measure has changed re-edit**/
                    /* the price.                               **/
   /* 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.       **/
   /* 03-13-92 GDECKE   MARCH DB2 TABLE CHANGES                 **/
   /* 04-13-92 twatso   april DB2 TABLE CHANGES                 **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O227"; /* Set current process name*/
  ;
  ;
  if (KL0OM005.SY1STNBR[CLXLINEX] == " " /* have no prod to work with*/
   && YCRTBL.YCRSPARN[CLXYCRX] == "Y")  
    CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
    return;
  end
  ;
  ;
   /* force invoice price from flag to be editted to*/
   /* look for change in override price*/
  ;
  if (KL0OM001.CLKPRCFF[CLXLINEX] == "I"
   && CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL0OW04.CLKPRCFF[CL0OW05X] = "O"; /* force thru edit*/
  end
  ;
   /* If price from flag changed*/
  ;
  if (KL0OM001.CLKPRCFF[CLXLINEX] != CL0OW04.CLKPRCFF[CL0OW05X]
   || KL0OM001.CLKCLPRC[CLXLINEX] == 0
   || CL0OW05.CL0OWUMF[CL0OW05X] == "Y")
                                   /* unit of measure code has changed*/
    ;
    if (KL0OM001.CLKPRCFF[CLXLINEX] == "E")
      CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
      ;
    else
         /* ***************************/
         /* price must be from invoice*/
         /* ***************************/
      if (KL0OM001.CLKPRCFF[CLXLINEX] == "I")
        if (KL0OM001.IV0IVCID > 0 /* and invoice number exists*/
         && CL0OW06.YITCD[CL0OWINX] == "I") /* an I.B.M. invoice*/
          KL0OS38(); /* default line item nbr if needed*/
          IV3REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
          IV3REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
          IV3REC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
          ;
          call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* read*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
             /* look for price overrides*/
            ;
            if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
              CL6REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
              CL6REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
              CL6REC.XGPCD = CLAREC.XGPCD;
              CL6REC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
              CL6REC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
              CL6REC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
              CL6REC.XQACD = CL0OW04.XQACD[CL0OW05X];
              CL6REC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
              CL6REC.SY5SZID = 0;
              ;
              KL0OS95(); /* select set price override*/
              ;
              if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
               && CL6REC.CLHMEMNB > 0)    
                IV3REC.IV3NLNUP = CL6REC.CL6OVPRC;
                IV3REC.IV3GLNUP = CL6REC.CL6OVPRC;
                KL0OM001.CLKPRCFF[CLXLINEX] = "O";
                ;
              end
              ;
              call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
              ;
            end
            ;
            CL0OW04.CLNNTPRC[CL0OW05X] = IV3REC.IV3NLNUP;
            CL0OW04.CLNGRPRC[CL0OW05X] = IV3REC.IV3GLNUP;
            ;
            if (CL0OW01.IVANBLFL == "Y") /* net bill flag*/
              KL0OM001.IV3NLNUP[CLXLINEX] = IV3REC.IV3NLNUP;
              KL0OM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3NLNUP;
              CL0OW04.CLKCLPRC[CL0OW05X] = IV3REC.IV3NLNUP;
            else
              KL0OM001.IV3NLNUP[CLXLINEX] = IV3REC.IV3GLNUP;
              KL0OM001.CLKCLPRC[CLXLINEX] = IV3REC.IV3GLNUP;
              CL0OW04.CLKCLPRC[CL0OW05X] = IV3REC.IV3GLNUP;
            end
            ;
            if (IV3REC.XUMCD == "R " /* if the uom was a half*/
             || IV3REC.XUMCD == "L ") /* pair on the ivc and now*/
              if (CL0OW05.XUMCD[CL0OW05X] == "01") /* has changed back to a*/
                                  /* full pair,*/
                KL0OS33(); /* get price from product file*/
                if (IVAREC.IVANBLFL == "Y")
                  KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNNTPRC[CL0OW05X];
                  CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNNTPRC[CL0OW05X];
                else
                  KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNGRPRC[CL0OW05X];
                  CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNGRPRC[CL0OW05X];
                end
                ;
                                   /* since ivc price is half pair*/
              else
                /* check the XUM code, if changed, but not back*/
                 /* to original invoice xum, recalculate the price*/
                if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                  KL0OS39(); /* 11-12-90*/
                end
              end
            else
               /* check the XUM code, if its changed, but not changed back*/
               /* to the invoice xum, recalculate the price*/
              if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                KL0OS39(); /* 11-12-90*/
              end
            end
            ;
            CL0OW04.XQACD[CL0OW05X] = IV3REC.XQACD; /* quality code*/
            CL0OW08.XEGCD[CL0OW05X] = IV3REC.XEGCD; /* ENGINERR DIFF*/
            CL0OW08.XBK-BK-SESN-CD[CL0OW05X] = IV3REC.XBK-BK-SESN-CD; /* SEASON CODE*/
            CL0OW08.OP-BK-YR[CL0OW05X] = IV3REC.OP-BK-YR; /* BOOK YEAR*/
            CL0OW08.OP-BK-MO[CL0OW05X] = IV3REC.OP-BK-MO; /* BOOK month*/
            ;
            CL0OW04.OP2PRCVF[CL0OW05X] = IV3REC.OP2PRCVF;
            if (CL0OW04.OP2PRCVF[CL0OW05X] == "Y")
                                   /* flag price if varies by size*/
              KL0OM001.CL0OMVPR[CLXLINEX] = "V";
            else
              KL0OM001.CL0OMVPR[CLXLINEX] = " ";
            end
            CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
          else
            KL0OM005.XXXERRID = "KL0O227"; /* Process name*/
            converseLib.validationFailed(208); /* product not on invoice*/
            set KL0OM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
            CLXREC.CLXERRF = "Y";
            CL0OW04.CLNGRPRC[CL0OW05X] = 0;
          end
        else
          KL0OM005.XXXERRID = "KL0O227"; /* Process name*/
          converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
          set KL0OM001.CLKPRCFF[CLXLINEX] cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          CL0OW04.CLNGRPRC[CL0OW05X] = 0;
        end
        ;
      else
           /* ********************************/
           /* price is taken from the product*/
           /* ********************************/
        if (KL0OM001.CLKPRCFF[CLXLINEX] == "P")
          if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
            return; /* don't look up price for non credits*/
          end
          ;
          if (CL0OW05.CL0OWPPF == "Y") /* dealing with prepack*/
            return; /* price was defaulted from prepack*/
                                   /* group id*/
          else
            KL0OS33(); /* get product price*/
            ;
             /* check the XUM code, if its changed, but not changed*/
             /* back to the product value, recalculate the price*/
            if (SYCREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
              KL0OS39(); /* 11-12-90*/
            end
            ;
          end
          ;
          if (CL0OW04.CLNGRPRC[CL0OW05X] == 0
           && CL0OW04.CLNNTPRC[CL0OW05X] == 0)
            KL0OM005.XXXERRID = "KL0O227"; /* Process name*/
            converseLib.validationFailed(226); /* warn-prod price not found*/
            CLXREC.CLXERRF = "Y";
            set KL0OM001.CLKCLPRC[CLXLINEX] cursor, bold;
          else
            if (IVAREC.IVANBLFL == "Y")
              KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNNTPRC[CL0OW05X];
              CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNNTPRC[CL0OW05X];
            else
              KL0OM001.CLKCLPRC[CLXLINEX] = CL0OW04.CLNGRPRC[CL0OW05X];
              CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW04.CLNGRPRC[CL0OW05X];
            end
            ;
          end
        end
      end
    end
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    CL0OW04.CLKPRCFF[CL0OW05X] = KL0OM001.CLKPRCFF[CLXLINEX];
  end
  ;
  ;
end // end KL0O227

// calculation edit for ttl & UOM
Function KL0O228()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CALCUALTION EDITS FOR claim value total          **/
   /* *                                                          **/
   /* *    1) Calculate the claim value for the product.         **/
   /* *                                                          **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O228"; /* Set current process name*/
  ;
  ;
   /* *************************************/
    /* Calculate the claim value.*/
   /* *************************************/
  ;
  CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OW05X]; /* set wk values*/
  CL0OW01.CL0OWWK2 = CL0OW04.CLMTRTSQ[CL0OW05X];
  CL0OW01.CL0OWWK3 = CL0OW04.CLKCLPRC[CL0OW05X];
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV - CL0OW05.CLAESTVL[CL0OW05X];
    CL0OW05.CLAESTVL[CL0OW05X] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK3;
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OW05X];
    KL0OM001.CLAESTVL[CLXLINEX] = CL0OW05.CLAESTVL[CL0OW05X];
  else /* If deleting line*/
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "X")
      ;
      CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ - CL0OW04.CLKRQTQ[CL0OW05X];
      CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ - CL0OW04.CLKAUTHQ[CL0OW05X];
      CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV - CL0OW05.CLAESTVL[CL0OW05X];
    end
  end
  ;
end // end KL0O228

// validate selection codes
Function KL0O229()
   /* *************************************************************/
   /* *                                                          **/
   /* *           VALIDATE THE SELECTION CODES                   **/
   /* *                                                          **/
   /* * Maintenance History:                                     **/
   /* *                                                          **/
   /* * 05-31-90 chellm added edit for products not on the IVC.  **/
   /* *                 Only allow NC, D, or X.                  **/
   /* * 06-06-90 chellm wait, still need to use selection code A **/
   /* *                 so allow selection code of A.            **/
   /* * 10-04-90 chellm On prepack uom warning msg #576, changed **/
   /* *          the highlighted field from the SEL code to XUMCD**/
   /* *                                                          **/
   /* *                                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O229"; /* Set current process name*/
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "S"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "SA"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "AA"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "NC"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "X"
   || KL0OM005.CL0OMSEL[CLXLINEX] == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(8); /* selection is not valid*/
    KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (CL0OW05.CL0OWSFL[CL0OW05X] != "I") /* record not from invoice*/
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "SA"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "AA"
     || KL0OM005.CL0OMSEL[CLXLINEX] == "C")
      converseLib.validationFailed(636); /* selection not allowed for ^IVC items*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "X")
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "I") /* record from invoice*/
      converseLib.validationFailed(459); /* cannot delete invoice products*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "S"
   && CL0OW05.CL0OWLVL[CL0OW05X] == "P")
    converseLib.validationFailed(202); /* prd is worked at prd level*/
    KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "A") /* authorize*/
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "A") /* came from adjustment (claim)*/
      converseLib.validationFailed(203); /* prd is worked at size level*/
      CLXREC.CLXERRF = "Y";
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
      return;
    end
    CL0OW05.CL0OWSFL[CL0OW05X] = "R"; /* prd now from ra record*/
  end
  ;
  ;
   /* 082189 copy if-end from CL0O129*/
  if (KL0OM001.CL0OMSEL[CLXLINEX] == "A"  /* authorize*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "NC" /* no charge*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "C"  /* credit*/
   || KL0OM001.CL0OMSEL[CLXLINEX] == "D") /* debit*/
    if (CL0OW05.CL0OWLVL[CL0OW05X] == "S") /* worked at size level*/
      KL0OM001.CL0OMSEL[CLXLINEX] = "S"; /* flow to size level*/
    end
  end
  ;
  ;
   /* claim price may or may not be allowed to change*/
  CL0OW05.CL0OWFPR[CL0OW05X] = "N"; /* init freeze claim price flag*/
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC")
     /* 072089 add check of I/R*/
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "I" /* record from invoice*/
     || CL0OW05.CL0OWSFL[CL0OW05X] == "R") /* record from R/A item*/
      if (KL0OM005.CL0OMTRN[CLXLINEX] == "NC") /* 072089 skip err if both NC*/
        /* next sentence*/
      else
        converseLib.validationFailed(8); /* select is not valid*/
        CLXREC.CLXERRF = "Y";
        KL0OM005.XXXERRID = "KL0O229";
        set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
        return;
      end
    end
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(930); /* select code not valid for claim type*/
      KL0OM005.XXXERRID = "KL0O229"; /* Process name*/
      CLXREC.CLXERRF = "Y";
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW05.CL0OWFPR[CL0OW05X] = "Y"; /* freeze claim price*/
    ;
  end
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM005.CL0OMSEL[CLXLINEX] == "D")
    if (CL0OW05.CL0OWSFL[CL0OW05X] == "A"
     /* came from cladj (user entered)*/
     && KL0OM005.IV0IVCID != 0) /* invoice at top of screen*/
      converseLib.validationFailed(930); /* 'c','d' not valid for entered prd*/
      KL0OM005.XXXERRID = "KL0O229";
      CLXREC.CLXERRF = "Y";
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(930); /* select code not valid for claim type*/
      KL0OM005.XXXERRID = "KL0O229";
      CLXREC.CLXERRF = "Y";
      set KL0OM005.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW05.CL0OWFPR[CL0OW05X] = "Y"; /* freeze claim price*/
    CL0OW05.CLICRDFL[CL0OW05X] = KL0OM005.CL0OMSEL[CLXLINEX];
    ;
  end
  ;
   /* 072089 add if-end*/
  CL0OW05.CLKCRFL[CL0OW05X] = " ";
  if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC") /* new action*/
    CL0OW05.CLKCRFL[CL0OW05X] = "N";
  else
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "A")
      CL0OW05.CLKCRFL[CL0OW05X] = "Y";
    else
      if (KL0OM005.CL0OMTRN[CLXLINEX] == "NC") /* old action*/
        CL0OW05.CLKCRFL[CL0OW05X] = "N";
      else
        if (KL0OM005.CL0OMTRN[CLXLINEX] == "A")
          CL0OW05.CLKCRFL[CL0OW05X] = "Y";
        end
      end
    end
  end
  ;
   /* move selection from map to working storage*/
  if (CLXREC.CLXERRF == "N")
    CL0OW05.CL0OMSEL[CL0OW05X] = KL0OM005.CL0OMSEL[CLXLINEX];
  end
  ;
  ;
   /* check uom code is not 01 'eaches', show warning message*/
  ;
  if (CL0OW05.CL0OWUWF[CL0OW05X] == "Y")
                                   /* if showed uom warning last time*/
    CL0OW05.CL0OWUWF[CL0OW05X] = " "; /* dont show msg*/
  else
    CL0OW05.CL0OWUWF[CL0OW05X] = " "; /* initialize uom warning flag*/
    if (KL0OM005.CL0OMSEL[CLXLINEX] == "NC" /* dont check non-std uom*/
     || KL0OM005.CL0OMSEL[CLXLINEX] == "  " /* if no charge or not sel'd*/
     || KL0OM005.CL0OMSEL[CLXLINEX] == "X " /* or delete line - no test*/
     || KL0OM005.SY1STNBR[CLXLINEX] == "      ") /* or no style number*/
      /* next sentence*/
    else
      if (CL0OW05.CL0OMSEL[CL0OW05X] == "NC" /* dont check non-std uom*/
       && KL0OM005.CL0OMSEL[CLXLINEX] == "S") /* if no charge product*/
        /* next sentence*/
      else
        if (KL0OM005.XUMCD[CLXLINEX] != "01") /* uom code is not eaches*/
          if (KL0OM005.XUMCD[CLXLINEX] == "R " /* uom code is half pair*/
           || KL0OM005.XUMCD[CLXLINEX] == "L ") /* uom code is half pair*/
            converseLib.validationFailed(662); /* uom code is half pair*/
          else
            converseLib.validationFailed(576); /* uom code not eaches*/
          end
          KL0OM005.XXXERRID = "KL0O229"; /* show warning message*/
          set KL0OM005.XUMCD[CLXLINEX] cursor, bold;
          CL0OW05.CL0OWUWF[CL0OW05X] = "Y"; /* set uom warning*/
        end
      end
    end
  end
  ;
  ;
end // end KL0O229

// process screen
Function KL0O230()
   /* GET CL0O130*/
   /* **************************************/
   /* process screen*/
  ;
    /* 1. updates are done against the entire product array*/
    /* 2. the screen is rebuilt and reshown to the user any time*/
       /* changes are done to ra item or adjustments*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O230";
  ;
   /* only want to update under following pfkeys or enter*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf18)
     /* next sentence*/
  else
    return;
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
   /* get current date and time*/
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  CL0OW01.CL0OWSWR = "Y"; /* init show-warning-to-user flag*/
  CL0OW01.CL0OWUPA = "N"; /* init need to update-clarec-fl*/
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all products*/
    CL0OW01.CL0OWAAF = "N"; /* re-init flag*/
  end
  ;
  ;
  CL0OW01.CL0OW05X = 1;
  while (CL0OW01.CL0OW05X <= CL0OW01.CL0OWNOP) /* look at all entries*/
    ;
    if (CL0OW05.CL0OWUPK[CL0OW05X] != " ") /* update clkrec*/
      KL0O231(); /* add, change or delete product info*/
    end
    ;
    if (CL0OW05.CL0OWUPR[CL0OW05X] != " ") /* update clrrec*/
      KL0O232();
                                   /* add, change or delete adjustment info*/
    end
    ;
    if (CL0OW05.CL0OWUPK[CL0OW05X] != " " /* update clkrec*/
     || CL0OW05.CL0OWUPR[CL0OW05X] != " ") /* update clrrec*/
      CL0OW01.CL0OWUPA = "Y";
      CL0OW01.CL0OWSWR = "N"; /* reshow screen to user*/
      CLXREC.CLXBLDSC = "Y";
      KL0O233(); /* add or change ra header info*/
    end
    ;
    CL0OW05.CL0OWUPK[CL0OW05X] = " ";
    CL0OW05.CL0OWUPR[CL0OW05X] = " ";
    ;
    CL0OW01.CL0OW05X = CL0OW01.CL0OW05X + 1;
    ;
  end
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  ;
  if (CL0OW01.CL0OWUPA == "Y")
    KL0O234(); /* see if claim header needs to be updated*/
  end
  ;
  ;
end // end KL0O230

// add,change,delete R/A itms
Function KL0O231()
   /* **************************************/
   /* add, change, delete R/A items*/
  ;
   /* *************************************************************/
   /* *   DATE   LOGON ID  REASON                                **/
   /* * -------- --------  --------------------------------------**/
   /* * 10-04-90  CHELLM  Added XUMCD and XQACD to the record key**/
   /* *                   when deleting DCLAIM.VRAITM01 rows.    **/
   /* * 06-17-91  GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.    **/
   /* * 03-13-92  GDECKE   MARCH DB2 TABLE CHANGES.              **/
   /* * 04-13-92  twatso   april DB2 TABLE CHANGES.              **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O231";
  ;
  ;
   /* need to delete all records associated with specified*/
   /* style/color. wildcarding the invoice id would be*/
   /* inefficient so 2 deletes are done if sizes exist*/
  ;
  CLKREC.CLACLMNB = KL0OM005.CLACLMNB;
   /* 072089 use ivc on 'nc' or not 'nc'*/
   /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ 'N';*/
    /* MOVE 0 TO CLKREC.IV0IVCID;*/
   /* ELSE ;*/
  CLKREC.IV0IVCID = KL0OM005.IV0IVCID;
   /* END ;*/
  ;
  CLKREC.XGPCD = KL0OM005.XGPCD;
  CLKREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLKREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLKREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
  CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLKREC.SY5SZID = -1; /* delete all sizes*/
  CLKREC.CLKCRFL = CL0OW05.CLKCRFL[CL0OW05X]; /* 072089 add*/
  ;
  ;
  call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
   /* 072089 drop next since delete for all sizes was done above*/
    /* old data for 'NC' had ivc=0 on prod sum, ivc=# on sizes.*/
  ;
   /* IF CL0OW05.CL0OWLVL(CL0OW05X) EQ 'S'   ; worked at size leve*/
    /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ 'N'*/
      /* MOVE CL0OM005.IV0IVCID TO CLKREC.IV0IVCID;*/
    /* ELSE ;*/
      /* MOVE 0 TO CLKREC.IV0IVCID;*/
    /* END ;*/
    /* ;*/
    /* ;*/
    /* CALL IO1280 'D ',SQLCA,CLKREC (NOMAPS; delete*/
    /* IF SQLCA.SQLCODE EQ 0;*/
      /* OR SQLCA.SQLCODE EQ 100;*/
      /* ; next sentence*/
    /* ELSE ;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VRAITM01' TO TA1REC.TA1TBLVU;*/
      /* MOVE 'DELETE' TO TA1REC.TA1LOCAT(2);*/
      /* PERFORM XPCL010;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (CL0OW05.CL0OWUPK[CL0OW05X] == "X") /* delete ra item*/
    if (CL0OW05.CL0OWUPR[CL0OW05X] == " ")
                                   /* not change to diff record type*/
       /* set to original values*/
      if (CL0OW05.CL0OMTRN[CL0OW05X] == "NC")
        CL0OW05.CL0OWSFL[CL0OW05X] = " ";
                                   /* now comes from user entry*/
      else
        CL0OW05.CL0OWSFL[CL0OW05X] = "I";
                                   /* now comes from ivc record*/
      end
       /* zero out non-needed fields*/
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW05.CLAESTVL[CL0OW05X] = 0;
      CL0OW05.CL0OWFPR[CL0OW05X] = " "; /* freeze price*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " "; /* not worked at any level*/
      CL0OW05.CL0OMSEL[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CL0OMTRN[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CLKCRFL[CL0OW05X] = " "; /* don't hold credit flag*/
    end
    return; /* have deleted product*/
  end
  ;
  ;
   /* IF YCRTBL.YCRSPARN(CLXYCRX) EQ 'Y';*/
    /* ; may need to move totals into record*/
   /* ELSE ;*/
  CL0OW05.CL0OWSFL[CL0OW05X] = "R"; /* record now comes from ra itm*/
  CL0OW05.CL0OWLVL[CL0OW05X] = "P"; /* worked at prd level*/
  if (CL0OW05.CL0OMSEL[CL0OW05X] != " ") /* 10-04-90*/
    CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW05.CL0OMSEL[CL0OW05X];
  end
  CL0OW05.CL0OMSEL[CL0OW05X] = " "; /* 10-04-90*/
   /* MOVE ' ' TO CL0OW05.CL0OWUPK(CL0OW05X) ; 10-04-90*/
  CLKREC.CLACLMNB = KL0OM005.CLACLMNB;
  CLKREC.XGPCD = KL0OM005.XGPCD;
  CLKREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLKREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLKREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLKREC.SY5SZID = 0; /* zero since this is product level not*/
                                   /* size*/
  CLKREC.CLKNBRSZ = 0; /* zero since this is product level not*/
                                   /* size*/
  CLKREC.CLKWHSXF = CL0OW05.CLKWHSXF[CL0OW05X];
  CLKREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
  CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLKREC.CLKCLPRC = CL0OW04.CLKCLPRC[CL0OW05X];
  CLKREC.OP2PRCVF = CL0OW04.OP2PRCVF[CL0OW05X];
  CLKREC.CLKPRCFF = CL0OW04.CLKPRCFF[CL0OW05X];
  CLKREC.YCECD = CL0OW05.YCECD[CL0OW05X];
  ;
  CLKREC.CLKRQTQ = CL0OW04.CLKRQTQ[CL0OW05X];
  if (CLKREC.CLKRQTQ < 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * -1;
  end
  ;
  CLKREC.CLKAUTHQ = CL0OW04.CLKAUTHQ[CL0OW05X];
  if (CLKREC.CLKAUTHQ < 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * -1;
  end
  ;
  CLKREC.CLJRDIND = "R"; /* return to stock authorization*/
  ;
   /* 072089 put ivc on 'nc' auth itm (move code from next 'if')*/
  CLKREC.IV0IVCID = KL0OM005.IV0IVCID;
  CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  if (CLKREC.IV0PARTN == " ")
    CLKREC.IV0PARTN = "0";
  end
  ;
  if (CL0OW05.CL0OMTRN[CL0OW05X] == "NC") /* no credit return*/
      /* 072089 use ivc on 'nc'*/
      /* MOVE 0 TO CLKREC.IV0IVCID;*/
      /* MOVE '0' TO CLKREC.IV0PARTN;*/
    CLKREC.CLKCRFL = "N";
    CL0OW05.CLKCRFL[CL0OW05X] = "N";
  else
    CLKREC.CLKCRFL = "Y";
    CL0OW05.CLKCRFL[CL0OW05X] = "Y";
  end
  ;
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
end // end KL0O231

// add,change,delete adjustments
Function KL0O232()
   /* **************************************/
   /* add, change, delete adjustments*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES             **/
   /* * 04-13-92   twatso    april DB2 TABLE CHANGES             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O232";
  ;
  ;
  CLRREC.CLACLMNB = KL0OM005.CLACLMNB;
  CLRREC.CLHSEQNB = 1;
  CLRREC.CLICRDFL = CL0OW05.CLICRDFL[CL0OW05X];
  CLRREC.XGPCD = KL0OM005.XGPCD;
  CLRREC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  CLRREC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  CLRREC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  CLRREC.IV0IVCID = KL0OM005.IV0IVCID;
  CLXREC.CLXORDIV = KL0OM005.IV0IVCID;
  CLRREC.IV0PARTN = CLXREC.CLXPARTN;
  CLRREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  CLRREC.SY5SZID = -1; /* delete all sizes and prod entries*/
  ;
  ;
  call "IO1370" ("D ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW05.CL0OWUPR[CL0OW05X] == "X")
    if (CL0OW05.CL0OWUPK[CL0OW05X] == " ")
                                   /* not change to another record type*/
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW05.CLAESTVL[CL0OW05X] = 0;
      CL0OW05.CL0OWSFL[CL0OW05X] = "I"; /* now from invoice record*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " "; /* not worked at any level*/
      CL0OW05.CL0OWFPR[CL0OW05X] = " "; /* price is not frozen*/
      CL0OW05.CL0OMSEL[CL0OW05X] = " "; /* don't show 'x'*/
      CL0OW05.CL0OMTRN[CL0OW05X] = " "; /* don't show 'x'*/
    end
    return; /* have deleted record*/
  end
  ;
  ;
  CL0OW05.CL0OWLVL[CL0OW05X] = "P"; /* product worked at prd level*/
  CL0OW05.CL0OWSFL[CL0OW05X] = "A"; /* now comes from adj record*/
  CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW05.CLICRDFL[CL0OW05X];
  CL0OW05.CL0OMSEL[CL0OW05X] = " ";
  CLRREC.SY5SZID = 0; /* zero since this is product level not*/
                                   /* size*/
  CLRREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLRREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLRREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLRREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLRREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLRREC.CLNGRPRC = CL0OW04.CLNGRPRC[CL0OW05X];
  CLRREC.CLNNTPRC = CL0OW04.CLNNTPRC[CL0OW05X];
  CLRREC.CLKPRCFF = CL0OW04.CLKPRCFF[CL0OW05X];
  CLRREC.XCOCD = " ";
  if (CL0OW05.CL0OMTRN[CL0OW05X] == "C")
    CLRREC.CLRRQTQ = CL0OW04.CLKRQTQ[CL0OW05X] * -1; /* get positive value*/
    CLRREC.CLRCLMQ = CL0OW04.CLKAUTHQ[CL0OW05X] * -1; /* get positive value*/
  else
    CLRREC.CLRRQTQ = CL0OW04.CLKRQTQ[CL0OW05X];
    CLRREC.CLRCLMQ = CL0OW04.CLKAUTHQ[CL0OW05X];
  end
  ;
  ;
  CLRREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLRREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1370" ("A ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
end // end KL0O232

// add,change ra header
Function KL0O233()
   /* *************************************************************/
   /* *                                                          **/
   /* *           SELECT THE DCLAIMS.VRAHDR01 ROW                **/
   /* *                                                          **/
   /* *  1) sum the ra items to get total qty and see if items*/
   /* *     exist*/
   /* *  2) Select the Unique RA header row.                     **/
   /* *  3) Either update or add the RA header row               **/
   /* *                                                          **/
   /* *  Maintenance History:                                    **/
   /* *                                                          **/
   /* *  CL502 CHELLM 10-20-89 added XSCLSEX to default the RA   **/
   /* *        expiration date to today+45.                      **/
   /* *  CL755 CHELLM 10-04-90 Added XUMCD and XQACD to the      **/
   /* *        Select key for scanning RAITMs.                   **/
   /* *        JCAREY 12-15-93 Changed code to initialize the    **/
   /* *               authorization issue date.                  **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O233"; /* Set current process name*/
  ;
  ;
  ;
    /* set R/A header value equal to total value of all*/
    /* authorized products (include all invoices)*/
  ;
     /* **********************/
     /* fetch dclaim.vraitm01*/
     /* **********************/
  ;
  CL0OW01.CLAESTVL = 0;
  CL0OW01.CLKAUTHQ = 0;
  CL0OW01.CLJRAIND = "N"; /* init ra-items-exist-flag*/
  ;
  CLKREC.CLACLMNB = KL0OM005.CLACLMNB;
  CLKREC.IV0IVCID = -1;
  CLKREC.IV0PARTN = "*";
  CLKREC.XGPCD = "**";
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**";
  CLKREC.XQACD = "**";
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* **RA ITEM RECORD***/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    if (CLKREC.SY5SZID == 0) /* looking at summary record*/
       /* 081489 drop size scan, put in sum function*/
      if (CLKREC.CLKNBRSZ != 0) /* sum sizes*/
        set CL0OW07 empty;
        CL0OW07.CL0OWSQL = "M2";
        call "IO1280" (CL0OW07, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          if (CL0OW07.CL0OWIN1 < 0 /* error?*/
           || CL0OW07.CL0OWIN2 < 0)
            CL0OW07.CLAESTVL = 0;
            CL0OW07.CL0OWCN1 = 0;
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            CL0OW07.CLAESTVL = 0;
            CL0OW07.CL0OWCN1 = 0;
          else
            TA1REC.TA1DBASE = "DCLAIM";
            TA1REC.TA1TBLVU = "VRAITM01";
            TA1REC.TA1LOCAT[2] = "SUM 2";
            CLXREC.CLXORDIV = KL0OM005.CLACLMNB;
            TA1REC.TA1TBLKE = CLXREC.CLXORDIV;
            XPCL010();
          end
        end
        CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW07.CLAESTVL;
        CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CL0OW07.CL0OWCN1;
      else /* don't have variable size pricing*/
        CL0OW01.CL0OWNUM = CLKREC.CLKAUTHQ * CLKREC.CLKCLPRC;
        CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW01.CL0OWNUM;
        CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CLKREC.CLKAUTHQ;
      end
    end
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "NEXT";
    XPCL010();
  end
  ;
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW01.CLKAUTHQ > 0)
    CL0OW01.CLJRAIND = "Y"; /* ra items exist*/
  end
  ;
   /* ******************************************/
    /* need to delete R/A HDR if no items exist*/
  ;
   /* ******************************************/
  ;
   /* IF CL0OW01.CLAESTVL EQ 0;*/
    /* AND CL0OW01.CLKAUTHQ EQ 0     ; sum of R/A items*/
    /* MOVE CLAREC.CLACLMNB TO CLJREC.CLACLMNB;*/
    /* CALL IO1270 'D ',SQLCA,CLJREC (nomaps,noncsp;  RA header*/
    /* IF SQLCA.SQLCODE EQ 0;*/
      /* OR SQLCA.SQLCODE EQ 100;*/
      /* EZERTN;*/
    /* ELSE ;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VRAHDR01' TO TA1REC.TA1TBLVU;*/
      /* MOVE 'UNIQUE' TO TA1REC.TA1LOCAT(2);*/
      /* PERFORM XPCL010;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  CLJREC.CLACLMNB = KL0OM005.CLACLMNB;
  call "IO1270" ("S ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* RA header*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "UNIQUE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW01.CLKAUTHQ == CLJREC.CLJTATHQ
   && CL0OW01.CLJRAIND == CLJREC.CLJRAIND)
    return; /* values didn't change, no need to update*/
  else
    if (CL0OW01.CLKAUTHQ < 0) /* store as positive quantity*/
      CLJREC.CLJTATHQ = CL0OW01.CLKAUTHQ * -1;
    else
      CLJREC.CLJTATHQ = CL0OW01.CLKAUTHQ; /* total authorized qty*/
    end
    CLJREC.CLJRAIND = CL0OW01.CLJRAIND; /* init ra items exist flag*/
  end
  ;
   /* get change date and time         01-22-90*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  CLJREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLJREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod if adding*/
   /* zzzchgct is in cljrec already if updating*/
  ;
  CLJREC.CLJRAIDT = TA2REC.TA2GRGGN; /* initialize issue date*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    CLJREC.CLACLMNB = KL0OM005.CLACLMNB;
    CLJREC.XXXUSRID = " ";
    CLJREC.CLJPRTLB = "Y";
    CLJREC.CLJNBLB = 0;
    CLJREC.CLJPRTRA = "Y";
    CLJREC.CLJRARQT = 0;
    CLJREC.CLJLBRQT = 0;
    CLJREC.CLJLBTOT = 0;
                                 /* ; (10-20-89)*/
    XSCLSEX(); /* default the RA expiration date*/
    CLJREC.CLJORAXD = 0;
    CLJREC.CLJFRDBF = "N";
    CLJREC.CLJFRCRF = "N";
    KL0OS31(); /* default the non-credit return flag*/
    CLJREC.XWHCD = CLAREC.XWHCD;
    CLJREC.XSOCD = " ";
    CLJREC.CLJRDIND = "R";
    KL0OS91(); /* default remerchanding/restocking*/
                                   /* flags*/
    CLJREC.XDACD = " ";
    CLJREC.CLJRAIND = "Y";
    ;
    call "IO1270" ("A ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAHDR01";
      TA1REC.TA1LOCAT[2] = "ADD";
      XPCL010();
    end
    ;
  end
  ;
  ;
  call "IO1270" ("U ", SQLCA, CLJREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAHDR01";
    TA1REC.TA1LOCAT[2] = "UPDATE";
    XPCL010();
  end
  ;
   /* GET CL0O134*/
end // end KL0O233

// update claim header
Function KL0O234()
   /* **************************************/
   /* update claim header*/
   /* **************************************/
  ;
   /* ********************************************************************/
   /* MAINTENENCE LOG                                                  **/
   /* 10/30/97 RCHAUV reason code conversion - D03 now C03, P03 removed**/
   /* **/
   /* ********************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O234";
  ;
  CL0OWUPA = "N"; /* init update clarec switch*/
  ;
  ;
   /* values calculated in update R/A header - cl0o133*/
  ;
  CL0OW01.CLAESTVL = CL0OW01.CLAESTVL * -1; /* R/As have negative value*/
  CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ * -1; /* R/As have negative qty*/
  ;
     /* **********************/
     /* fetch dclaim.vcladj01*/
     /* **********************/
  ;
  CL0OW01.CLADBOCL = "N"; /* init debits-on-claim-flag*/
  CL0OW01.CLADJIND = "N"; /* init adjustment indicator*/
  CLRREC.CLACLMNB = KL0OM005.CLACLMNB;
  CLRREC.CLHSEQNB = 1;
  CLRREC.SY1STNBR = "******";
  CLRREC.SY2CLRID = "***";
  CLRREC.XDMCD = "**";
  CLRREC.XGPCD = "**";
  CLRREC.CLICRDFL = "*";
  ;
  ;
  call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* **CLADJ RECORD***/
  if (SQLCA.VAGen_SQLCODE < 0) /* added 2/89*/
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    XPCL010();
  end
  call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    CL0OW01.CLADJIND = "Y"; /* adjustments do exist for claim*/
     /* customer has most likely taken credit for adjustments*/
     /* already, so have internal memo*/
     /* if D03 or P03 keep header default*/
     /* 10/30/97 rchauv reason code conv - D02 now C03 and P03 removed*/
    if (CLAREC.YCRCD == "C03")
      /* continue*/
    else
      CLAREC.XIECD = "I";
    end
    ;
    if (CLRREC.CLICRDFL == "C") /* have credit*/
      CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * -1;
    end
    ;
    if (IVAREC.IVANBLFL == "Y")
      CL0OW01.CL0OWNUM = CLRREC.CLRCLMQ * CLRREC.CLNNTPRC;
    else
      CL0OW01.CL0OWNUM = CLRREC.CLRCLMQ * CLRREC.CLNGRPRC;
    end
    CL0OW01.CLAESTVL = CL0OW01.CLAESTVL + CL0OW01.CL0OWNUM;
    CL0OW01.CLKAUTHQ = CL0OW01.CLKAUTHQ + CLRREC.CLRCLMQ;
     /* check debit-on-claim-flag for updating*/
    if (CLRREC.CLICRDFL == "D")
      CL0OW01.CLADBOCL = "Y";
    end
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
    ;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "NEXT";
    XPCL010();
  end
  call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "CLOSE";
    XPCL010();
  end
  ;
  ;
   /* if changed various things on header, need to update*/
  ;
   /* IF CL0OW01.CLAESTVL LT 0        ; neg values req neg quantit*/
    /* CL0OW07.CL0OWCN1 = CL0OW07.CL0OWCN1 * -1;*/
   /* END ;*/
  ;
  if (CL0OW01.CLAESTVL != CLAREC.CLAESTVL
   || CL0OW01.CLADBOCL != CLAREC.CLADBOCL
   || CL0OW01.CLKAUTHQ != CLAREC.CLATQTY
   /* calc in update R/A hdr cl0o133*/
   || CL0OW01.CLADJIND != CLAREC.CLADJIND)
    CL0OW01.CL0OWUPA = "Y";
    CLAREC.CLAESTVL = CL0OW01.CLAESTVL;
    CLAREC.CLADBOCL = CL0OW01.CLADBOCL;
    CLAREC.CLATQTY = CL0OW01.CLKAUTHQ; /* show correct total*/
    CLAREC.CLADJIND = CL0OW01.CLADJIND;
  end
  ;
  ;
  if (CL0OW01.CL0OWUPA == "Y") /* need to update clarec*/
    ;
    ;
    CLAREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    CLAREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    ;
    call "IO1160" ("U ", SQLCA, CLAREC) {isNoRefresh = yes, isExternal = yes}; /* update*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLHDR01";
      TA1REC.TA1LOCAT[2] = "UPDATE";
      XPCL010();
    end
  end
  ;
  ;
  ;
end // end KL0O234

// flow on 'ENTER' or PF keys
Function KL0O240()
   /* **************************************/
   /* handle enter/PF key*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* * 08-08-91   wjohns    rename applications for transfers.  **/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES.            **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O240";
  ;
  if (CLXREC.CLXERRF == "Y")
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum == 231) /* quantity required*/
         /* next sentence - allow user to pf7/8 to fill in qtys*/
      else
        return;
      end
    else
      return;
    end
  end
  ;
  ;
  ;
   /* **************************************/
   /* If ENTER is pressed*/
   /* **************************************/
  if (converseVar.eventKey is enter)
    /* **************************************/
     /* If Fast path positioning requested*/
    /* **************************************/
    if (KL0OM005.CAITEM != " ") /* If fast path item entered*/
      if (KL0OM005.CATOAP == " " /* If fastpath positioning*/
       || KL0OM005.CATOAP == "KL0O")
        if (KL0OM005.CAITEM == "A") /* If top of list requested*/
          CLXREC.CLXARY1X = 1;
          CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
          KL0OM005.CAITEM = " ";
          return;
        else
          if (KL0OM005.CAITEM == "0") /* If bottom of list requested*/
            CLXREC.CLXARY1X[1] = CL0OW01.CL0OWNOP;
            CLXREC.CLXBLDSC = "Y"; /* Rebuild screen*/
            KL0OM005.CAITEM = " ";
            return;
          else
            /* ************************************************/
                /* Locate the desired map positioning*/
            /* ************************************************/
            if (KL0OM005.CAITEM != " ") /* If item field is entered*/
              sysVar.arrayIndex = 1; /* Use ezetst as working index*/
              while (sysVar.arrayIndex <= CL0OW01.CL0OWNOP) /* Until end array*/
                if (KL0OM005.CAITEM == CL0OW05.SY1STNBR[sysVar.arrayIndex])
                  CLXREC.CLXARY1X[1] = sysVar.arrayIndex; /* Save position index*/
                  sysVar.arrayIndex = 9000; /* Force loop end*/
                  KL0OM001.CAITEM = " ";
                  CLXREC.CLXBLDSC = "Y";
                else
                  if (CL0OW05.SY1STNBR[sysVar.arrayIndex] == " ")
                    CLXREC.CLXARY1X[1] = sysVar.arrayIndex - 1; /* Save position index*/
                    sysVar.arrayIndex = 9000; /* Force loop end*/
                    KL0OM001.CAITEM = " ";
                    CLXREC.CLXBLDSC = "Y";
                  else
                    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment index*/
                  end
                end
              end
              return;
            end
          end
        end
      end
    else
      if (KL0OM001.CATOAP != "KL0O") /* If to application not kL0o*/
        /* **************************************/
         /* If map has not been reshown*/
        /* **************************************/
        if (CL0OW01.CL0OWSWR == "N") /* If have not shown warnings*/
           /* continue around to reshow map*/
          return;
        else
          /* **************************************/
           /* If more invoices exist to display*/
          /* **************************************/
          if (CL0OW01.CL0OWNIR == "N") /* If new inv. # not entered*/
            CL0OW01.CL0OWINX = CL0OW01.CL0OWINX + 1;
          end
          if (CL0OW01.CL0OWICT > 0 /* If invoices exist*/
           && CL0OW01.CL0OWINX <= CL0OW01.CL0OWICT) /* and more invoices*/
            CL0OW01.CL0OWSWR = "N"; /* y/n have shown warning*/
            CL0OW01.CL0OWTAQ = 0;
            CL0OW01.CL0OWTRQ = 0;
            CL0OW01.CL0OWTCV = 0;
            set CL0OW04 empty; /* chellm 11-26-90*/
            set CL0OW05 empty; /* chellm 11-26-90*/
            set CL0OW08 empty; /* GDECKE 03-13-92*/
            CLWREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
            KL0OM001.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
            CLXREC.CLXBLDSC = "Y"; /* Rebuild array and screen*/
            CLXREC.CLXBLDAY = "Y";
            return;
          else
             /* next sentence - need to flow onto different place*/
          end
        end
      end
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is enter)
    if (converseVar.validationMsgNum == 576 /* if checked unit of measure*/
     || converseVar.validationMsgNum == 662) /* if checked unit of measure*/
      CLXREC.CLXCSCRN = "KL0OM005";
      CLXREC.CLXEOSF = "N";
    else
      if (CLXREC.CLXCSCRN == "KL0OM010") /* looked at sizes from cl0o150*/
        CLXREC.CLXCSCRN = "KL0OM005";
        CLXREC.CLXEOSF = "N";
      else
        ;
         /* all else fails, flow to next application*/
        CLXREC.CLXEOSF = "Y";
        CLXREC.CLXEOAF = "Y";
        COMMAREA.CATOAP = "KL0P";
        XPCL002();
        return;
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOSF = "Y";
      CLXREC.CLXEOAF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf6)
    if (CL0OW01.CL0OWHVR == "N")
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(533); /* can't xfer - inspect not done for claim*/
      return;
    end
    ;
    if (CLAREC.CLAWSENF == "N") /* worksheet entered flag*/
      COMMAREA.CATOAP = "KL02";
    else
      COMMAREA.CATOAP = "KL0E";
    end
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    XPCL002();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is pf10)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDAY = "N";
    CLXREC.CLXCSCRN = "KL0OM001"; /* summary*/
  end
  ;
  ;
  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0P";
    XPCL002();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXCSCRN = "KL0OM001"; /* summary*/
  end
  ;
  ;
  if (converseVar.eventKey is pf7)
    KL0OS07();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is pf8)
    KL0OS08();
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  ;
  if (converseVar.eventKey is pf11)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXBLDAY = "N";
    CLXREC.CLXCSCRN = "KL0OM005";
  end
  ;
  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0P";
    XPCL002();
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
    if (CLAREC.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
        COMMAREA.CATOAP = "KL0K"; /* xfer to*/
        XPCL002();
      else
        COMMAREA.CATOAP = "KL0J"; /* xfer to*/
        XPCL002();
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf18) /* pf18 - pass to 'kl0g'*/
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G"; /* xfer to*/
    XPCL002();
  end
  ;
  ;
end // end KL0O240

// flow to following screens
Function KL0O250()
   /* **************************************/
   /* flow to following screens*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O250";
  ;
  ;
  while ("S " in CL0OW05.CL0OMSEL)
    CLXREC.CLXCSCRN = "KL0OM010";
     /* find position on current screen*/
    CL0OW01.CL0OWIXM = sysVar.arrayIndex - CLXREC.CLXARY1X[1] + 1;
    CL0OW01.SY2CLRAB = KL0OM005.SY2CLRAB[CL0OWIXM];
    CLXREC.CLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
    CLXREC.CLXBLDAY = "Y"; /* set build array  flag to 'yes'*/
    CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
    CLXREC.CLXERRF = "N"; /* clear error flag*/
    converseLib.validationFailed(0); /* clear error nbr*/
    CLXREC.CLXARY1X[2] = 1; /* start array at first size*/
    /* MOVE EZETST TO CLXREC.CLXARY1X(1);start array at Lst viewed*/
    CL0OW01.CL0OW05X = sysVar.arrayIndex; /* used for accessing prd info on siz*/
    CL0OW05.CL0OMSEL[sysVar.arrayIndex] = "V";
    while (CLXREC.CLXEOSF == "N")
      KL0O300();
    end
    CLXREC.CLXBLDSC = "Y"; /* rebuild summary screen with changed*/
                                   /* data*/
    CLXREC.CLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
    CL0OW01.CL0OWSWR = "N"; /* have not shown warning to user*/
  end
  ;
  ;
end // end KL0O250

// build array
Function KL0O260()
   /* ********************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G             **/
   /* *-----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                   **/
   /* *-----------------------------------------------------------------**/
   /* * 10-29-93  GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1          **/
   /* ********************************************************************/
   /* **************************************/
   /* build array*/
  ;
    /* when finished with this process, the following*/
    /* records will have been read for later use:*/
      /* ivarec,iv0rec,sp1rec(cl0o103)*/
    /* the following indexes will have been set:*/
      /* clxycrx,clxyctx*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O260";
  ;
  ;
  CL0OW01.CL0OWNOP = 1; /* number of products*/
  CL0OW01.CL0OW05X = 1; /* index for product array*/
  CLXREC.CLXARY1X[1] = 1; /* current line to be shown on screen*/
  CL0OW05.IV0IVCID = KL0OM005.IV0IVCID; /* hold invoice number*/
  CL0OW05.CL0OWINB = KL0OM005.CL0OWINB; /* hold invoice number*/
  ;
  ;
  if (CLAREC.CLADJIND == "Y")
    KL0O261(); /* select adjustments products*/
  end
  KL0O263(); /* select ra products*/
  if (CL0OW01.CL0OWICT > 0   /* if there are invoices*/
   && CLAREC.YCSCD1 != "CMP" /* and clm status not complete*/
   && CLAREC.YCSCD1 != "CAN") /* and clm status not cancelled*/
    KL0O265(); /* select invoice prd's*/
  end
  ;
  CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP - 1; /* actual number of products*/
  ;
  if (CL0OW01.CL0OWNOP > 0)
    KL0O268(); /* calculate claim value and totals*/
  end
  ;
end // end KL0O260

// get prds from cladj
Function KL0O261()
   /* *************************************************************/
   /* *     get all products from cladj database (misshipments)*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O261"; /* set current process name*/
  ;
  ;
  CLXREC.CLXTESTF = "Y"; /* used for incrementing nop index*/
  ;
  CLRREC.CLACLMNB = CLAREC.CLACLMNB;
  CLRREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLRREC.XGPCD = KL0OM005.XGPCD;
  CLRREC.SY1STNBR = "******";
  CLRREC.SY2CLRID = "***";
  CLRREC.XDMCD = "**";
  CLRREC.CLICRDFL = "*";
  ;
  if (CL0OW01.CL0OWICT > 0) /* if have invoices on claim*/
    CLRREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLRREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
    call "IO1370" ("S2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
                                   /* all records for invoice*/
    call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        KL0O262(); /* move data*/
        call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  else
    ;
    call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get all records for claim*/
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        KL0O262(); /* move data*/
        call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  end
  ;
  ;
   /* clxtestf is set to 'y' at beginning of process. if*/
   /* adjustments were found that fit the criteria, clxtestf*/
   /* is set to 'n' in cl0o262, and need to increment cl0ownop*/
   /* for following process*/
  ;
  if (CLXREC.CLXTESTF == "N")
    CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "CL0O004";
    if (CL0OW01.CL0OWICT > 0)
      TA1REC.TA1LOCAT[3] = "SEL 2";
    else
      TA1REC.TA1LOCAT[3] = "SEL 1";
    end
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
end // end KL0O261

// move items from cladj to ws ar
Function KL0O262()
   /* *************************************************************/
   /* *     move items from cladj (clrrec) to cl0ow05 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES             **/
   /* * 04-13-92   twatso    april DB2 TABLE CHANGES             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O262"; /* set current process name*/
  ;
   /* need to summarize cladj records, they may all be at*/
    /* the size level*/
  ;
   /* (first time thru, cl0ow05 fields are empty)*/
  ;
  if (CLRREC.SY1STNBR == CL0OW05.SY1STNBR[CL0OWNOP]
   && CLRREC.SY2CLRID == CL0OW05.SY2CLRID[CL0OWNOP]
   && CLRREC.XDMCD == CL0OW05.XDMCD[CL0OWNOP])
     /* accumulate totals for same product*/
    ;
    CL0OW01.CL0OWNBR = 1;
    if (CLRREC.CLICRDFL == "C")
      CL0OW01.CL0OWNBR = -1;
    end
    CLRREC.CLRRQTQ = CLRREC.CLRRQTQ * CL0OW01.CL0OWNBR;
    CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * CL0OW01.CL0OWNBR;
    CL0OW04.CLKRQTQ[CL0OWNOP] = CLRREC.CLRRQTQ + CL0OW04.CLKRQTQ[CL0OWNOP];
    CL0OW04.CLKAUTHQ[CL0OWNOP] = CLRREC.CLRCLMQ +     CL0OW04.CLKAUTHQ[CL0OWNOP];
    ;
    if (IVAREC.IVANBLFL == "Y") /* net bill flag*/
      if (CLRREC.CLNNTPRC == CL0OW04.CLNNTPRC[CL0OWNOP]) /* same price*/
         /* next sentence*/
      else
         /* price varies between sizes*/
        CL0OW04.OP2PRCVF[CL0OWNOP] = "Y";
      end
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    else
      if (CLRREC.CLNGRPRC == CL0OW04.CLNGRPRC[CL0OWNOP]) /* same price*/
         /* next sentence*/
      else
         /* price varies between sizes*/
        CL0OW04.OP2PRCVF[CL0OWNOP] = "Y";
      end
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    end
    ;
    ;
    CL0OW01.CL0OWWK1 = CLRREC.CLRCLMQ; /* QTY*/
    CL0OW01.CL0OWWK2 = CL0OW04.CLKCLPRC[CL0OWNOP]; /* price*/
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* current est val*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OWWK1 * CL0OWWK2 + CL0OWWK3;
    ;
    CL0OW05.CLKNBRSZ[CL0OWNOP] = CL0OW05.CLKNBRSZ[CL0OWNOP] + 1;
    ;
    ;
  else
    ;
     /* have new product*/
     /* increment counter and store data for product*/
    ;
    if (CLXREC.CLXTESTF == "Y") /* first time thru*/
      /* next sentence-counter at 1 already and doesn't need to go up*/
      CLXREC.CLXTESTF = "N";
    else
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
    ;
    ;
    CL0OW01.CL0OWNBR = 1;
    if (CLRREC.CLICRDFL == "C")
      CL0OW01.CL0OWNBR = -1;
    end
    CLRREC.CLRRQTQ = CLRREC.CLRRQTQ * CL0OW01.CL0OWNBR;
    CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * CL0OW01.CL0OWNBR;
    ;
    CL0OW05.CL0OWSFL[CL0OWNOP] = "A"; /* source from adjustments*/
    CL0OW05.SY1STNBR[CL0OWNOP] = CLRREC.SY1STNBR;
    CL0OW05.SY2CLRID[CL0OWNOP] = CLRREC.SY2CLRID;
    CL0OW05.XDMCD[CL0OWNOP] = CLRREC.XDMCD;
    CL0OW05.SY5SZID[CL0OWNOP] = CLRREC.SY5SZID;
    CL0OW05.OP2LNINB[CL0OWNOP] = CLRREC.OP2LNINB;
    CL0OW04.CLKRQTQ[CL0OWNOP] = CLRREC.CLRRQTQ;
    CL0OW04.CLKAUTHQ[CL0OWNOP] = CLRREC.CLRCLMQ;
    CL0OW04.CLKPRCFF[CL0OWNOP] = CLRREC.CLKPRCFF;
    CL0OW04.CLNGRPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    CL0OW04.CLNNTPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    CL0OW04.XQACD[CL0OWNOP] = CLRREC.XQACD;
    CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = CLRREC.XBK-BK-SESN-CD;
    CL0OW08.OP-BK-YR[CL0OWNOP] = CLRREC.OP-BK-YR;
    CL0OW08.OP-BK-MO[CL0OWNOP] = CLRREC.OP-BK-MO;
    CL0OW05.XUMCD[CL0OWNOP] = CLRREC.XUMCD;
    CL0OW05.CLICRDFL[CL0OWNOP] = CLRREC.CLICRDFL;
    CL0OW05.CL0OMTRN[CL0OWNOP] = CLRREC.CLICRDFL;
    ;
    CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
    CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
    CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
    CL0OW04.CLMTRTSQ[CL0OWNOP] = 0;
    CL0OW04.CLKCLPRC[CL0OWNOP] = 0;
    CL0OW04.OP2PRCVF[CL0OWNOP] = " ";
    CL0OW05.CLKWHSXF[CL0OWNOP] = " ";
    CL0OW04.KUIPRDID[CL0OWNOP] = " ";
    CL0OW05.CLKCRFL[CL0OWNOP] = " ";
    CL0OW05.CL0OMSEL[CL0OWNOP] = " ";
    CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
    CL0OW05.CL0OWUOM[CL0OWNOP] = "N";
                                   /* unit of measure variable flag*/
    ;
    if (CLRREC.SY5SZID == 0) /* this is a summary record*/
      CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
      CL0OW05.CL0OWLVL[CL0OWNOP] = "P"; /* worked at prd level*/
    else /* count sizes for product*/
      CL0OW05.CLKNBRSZ[CL0OWNOP] = 1;
      CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
    end
    ;
    ;
    if (IVAREC.IVANBLFL == "Y")
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNNTPRC;
    else
      CL0OW04.CLKCLPRC[CL0OWNOP] = CLRREC.CLNGRPRC;
    end
    ;
    CL0OW01.CL0OWWK1 = CL0OW04.CLKAUTHQ[CL0OWNOP]; /* QTY*/
    CL0OW01.CL0OWWK2 = CL0OW04.CLKCLPRC[CL0OWNOP]; /* price*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK2;
    ;
    ;
    if (CLRREC.CLICRDFL == "C"
     || CLRREC.CLICRDFL == "D")
      CL0OW05.CL0OWFPR[CL0OWNOP] = "Y"; /* freeze price*/
    end
    ;
    ;
    if (CLRREC.IV0IVCID != 0)
       /* fetch line unit price (iv3lnsq,iv3nlnup)*/
      IV3REC.IV0IVCID = CLRREC.IV0IVCID;
      CLXREC.CLXORDIV = CLRREC.IV0IVCID;
      IV3REC.IV0PARTN = CLXREC.CLXPARTN;
      IV3REC.OP2LNINB = CLRREC.OP2LNINB;
      ;
      KL0O267(); /* perform io mod call for iv3rec*/
    end
    ;
    ;
    KL0OS94(); /* get customer product id*/
    ;
  end
  ;
end // end KL0O262

// get prds from raitm
Function KL0O263()
   /* *************************************************************/
   /* *     get all products from raitm database (authorized)*/
   /* **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the wild card*/
   /* *          values for scanning DCLAIM.VRAITM01 products.*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O263"; /* set current process name*/
  ;
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = KL0OM005.XGPCD;
  CLKREC.SY1STNBR = "******";
  CLKREC.SY2CLRID = "***";
  CLKREC.XDMCD = "**";
  CLKREC.XUMCD = "**";
  CLKREC.XQACD = "**";
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  if (CL0OW01.CL0OWICT > 0) /* have invoices*/
    CLKREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  else
    CLKREC.IV0IVCID = -1;
    CLKREC.IV0PARTN = "*";
  end
  ;
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
    if (CLKREC.SY5SZID == 0) /* only look at summary records*/
      CL0OW05.CL0OWSFL[CL0OWNOP] = "R"; /* record from raitm*/
      /* MOVE CLKREC.CLKGROUP TO CL0OW05.CL0OW5GP(CL0OWNOP);*/
      KL0O264(); /* move data to array*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
     /* 081489 cl0o264 no longer loops sizes, so read here*/
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get next rec*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* database busy*/
    CLXREC.CLXERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VCLRAITM";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010(); /* abort*/
    end
  end
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clkrec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLRAITM";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  ;
   /* *******************************************************/
   /* when have invoice(s) attached to claim, user could*/
   /* have entered 'nc' qty(ies) which aren't assoc with*/
   /* any invoice. these need to be shown on the primary*/
   /* invoice.*/
   /* *******************************************************/
   /* 072089 drop this code, since invoice will be on     **/
          /* 'NC' item.                    -------        **/
   /* *******************************************************/
  ;
  ;
   /* IF CL0OW01.CL0OWICT > 0         ; have invoices*/
    /* AND CL0OW01.CL0OWINX EQ 1     ; looking at primary invoice*/
    /* MOVE 0 TO CLKREC.IV0IVCID;*/
    /* MOVE '0' TO CLKREC.IV0PARTN;*/
   /* ELSE ;*/
    /* EZERTN     ; have all ra items that are needed*/
   /* END ;*/
  ;
   /* MOVE CLAREC.CLACLMNB TO CLKREC.CLACLMNB;*/
   /* MOVE CL0OM005.XGPCD TO CLKREC.XGPCD;*/
   /* MOVE '******' TO CLKREC.SY1STNBR;*/
   /* MOVE '***' TO CLKREC.SY2CLRID;*/
   /* MOVE '**' TO CLKREC.XDMCD;*/
  ;
  ;
   /* CALL IO1280 'S1',SQLCA,CLKREC (NOMAPS,NONCSP; get all recds*/
   /* CALL IO1280 'N1',SQLCA,CLKREC (NOMAPS,NONCSP; get all recds*/
   /* WHILE SQLCA.SQLCODE EQ 0;*/
    /* AND CL0OW01.CL0OWNOP LT cl0ow01.cl0owmax;*/
    /* IF CLKREC.SY5SZID EQ 0     ; only look at summary records*/
      /* MOVE 'R' TO CL0OW05.CL0OWSFL(CL0OWNOP); recd from raitm*/
      /* ;MOVE CLKREC.CLKGROUP TO CL0OW05.CL0OW5GP(CL0OWNOP);*/
      /* PERFORM CL0O264             ; move data to array*/
      /* CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;*/
    /* END ;*/
    /* ; sizes are read w/in cl0o164 to accum clm value*/
    /* ;CALL IO1280 'N1',SQLCA,CLKREC (nomaps,noncsp; get nxt rec*/
   /* END ;*/
  ;
   /* IF SQLCA.SQLCODE EQ -911;*/
    /* MOVE 4 TO EZEMNO              ; database busy*/
    /* MOVE 'Y' TO CLXREC.CLXERRF;*/
    /* EZERTN;*/
   /* ELSE ;*/
    /* IF SQLCA.SQLCODE LT 0;*/
      /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
      /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
      /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
      /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
      /* PERFORM XPCL010             ; abort*/
    /* END ;*/
   /* END ;*/
  ;
   /* CALL IO1280 'C1',SQLCA,CLKREC (NOMAPS,NONCSP; close cursor*/
   /* IF SQLCA.SQLCODE NE 0;*/
    /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
    /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
    /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
    /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
    /* PERFORM XPCL010               ; abort*/
   /* END ;*/
  ;
end // end KL0O263

// move items from raitm to ws
Function KL0O264()
   /* *************************************************************/
   /* *     move items from raitm (clkrec) to cl0ow05 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E       H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES             **/
   /* * 04-13-92   twatso    april DB2 TABLE CHANGES             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O264"; /* set current process name*/
  ;
  ;
  CL0OW01.CL0OWNBR = -1; /* treat products as credits*/
  ;
  if (CLKREC.CLKRQTQ > 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * CL0OW01.CL0OWNBR;
  end
  if (CLKREC.CLKAUTHQ > 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * CL0OW01.CL0OWNBR;
  end
  ;
  CL0OW05.SY1STNBR[CL0OWNOP] = CLKREC.SY1STNBR;
  CL0OW05.SY2CLRID[CL0OWNOP] = CLKREC.SY2CLRID;
  CL0OW05.XDMCD[CL0OWNOP] = CLKREC.XDMCD;
  CL0OW05.SY5SZID[CL0OWNOP] = CLKREC.SY5SZID;
  CL0OW05.OP2LNINB[CL0OWNOP] = CLKREC.OP2LNINB;
  CL0OW04.CLKRQTQ[CL0OWNOP] = CLKREC.CLKRQTQ;
  CL0OW04.CLKAUTHQ[CL0OWNOP] = CLKREC.CLKAUTHQ;
  CL0OW04.CLKPRCFF[CL0OWNOP] = CLKREC.CLKPRCFF;
  CL0OW04.CLKCLPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.CLNNTPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.CLNGRPRC[CL0OWNOP] = CLKREC.CLKCLPRC;
  CL0OW04.OP2PRCVF[CL0OWNOP] = CLKREC.OP2PRCVF;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = CLKREC.CLKNBRSZ;
  CL0OW04.XQACD[CL0OWNOP] = CLKREC.XQACD;
  CL0OW08.XEGCD[CL0OWNOP] = CLKREC.XEGCD;
  CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = CLKREC.XBK-BK-SESN-CD;
  CL0OW08.OP-BK-YR[CL0OWNOP] = CLKREC.OP-BK-YR;
  CL0OW08.OP-BK-MO[CL0OWNOP] = CLKREC.OP-BK-MO;
  CL0OW05.XUMCD[CL0OWNOP] = CLKREC.XUMCD;
  CL0OW05.CLKWHSXF[CL0OWNOP] = CLKREC.CLKWHSXF;
  CL0OW05.CLKCRFL[CL0OWNOP] = CLKREC.CLKCRFL;
  CL0OW05.YCECD[CL0OWNOP] = CLKREC.YCECD;
  ;
  CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
  CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
  CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
  CL0OW04.KUIPRDID[CL0OWNOP] = " ";
  CL0OW05.CLICRDFL[CL0OWNOP] = " ";
  CL0OW05.CL0OMTRN[CL0OWNOP] = " ";
  CL0OW05.CL0OWUOM[CL0OWNOP] = "N"; /* unit of measure variable flag*/
  CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
  ;
  ;
  ;
  if (CLKREC.CLKNBRSZ == 0)
    CL0OW05.CL0OWLVL[CL0OWNOP] = "P"; /* worked at prd level*/
  else
    CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
  end
  ;
  ;
  if (CLKREC.CLKCRFL == "N")
    CL0OW05.CL0OWFPR[CL0OWNOP] = "Y"; /* freeze price*/
    CL0OW05.CL0OMTRN[CL0OWNOP] = "NC";
  else
    if (CLKREC.CLKCRFL == "Y")
      CL0OW05.CL0OMTRN[CL0OWNOP] = "A";
    else
      if (CLKREC.CLKCRFL == "M") /* 2/89, 072089 change 'V' to 'M'*/
        CL0OW05.CL0OMTRN[CL0OWNOP] = "M";
      end
    end
  end
  ;
   /* set variable uom switch also*/
  KL0OS93(); /* select return qty from vdefit01 and*/
                                   /* vrtsit01*/
  CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] > 0) /* need negative qty*/
    CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW04.CLMTRTSQ[CL0OWNOP] * -1;
  end
  ;
  ;
  if (CLKREC.IV0IVCID != 0)
     /* fetch line unit price (iv3lnsq,iv3nlnup)*/
    IV3REC.IV0IVCID = CLKREC.IV0IVCID;
    CLXREC.CLXORDIV = CLKREC.IV0IVCID;
    IV3REC.IV0PARTN = CLXREC.CLXPARTN;
    IV3REC.OP2LNINB = CLKREC.OP2LNINB;
    ;
    KL0O267(); /* perform io mod call for iv3rec*/
  end
  ;
  ;
  KL0OS94(); /* get customer product id*/
  ;
   /* validate return qty against authorized qty (have neg qty)*/
   /* done here because later we would have to read thru entire*/
   /* array to look at every product*/
  ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] < CLKREC.CLKAUTHQ
   && CLKREC.YCECD != " ")
    converseLib.validationFailed(8); /* warning - rtn qty cannot exceed auth*/
                                   /* qty*/
    CLXREC.CLXERRF = "Y";
  end
  ;
    /* 8-14-89 change loop of sizes to use sum function*/
   /* calculate claim value by summarizing size level values.*/
   /* this gives accurate values for variable pricing*/
  ;
  if (CLKREC.CLKNBRSZ != 0) /* assume curr row has sz=0 (prod or*/
                                   /* prod summ)*/
    set CL0OW07 empty;
    CL0OW07.CL0OWSQL = "M2"; /* sum size values for product*/
    call "IO1280" (CL0OW07, SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* sum size values*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (CL0OW07.CL0OWIN2 < 0) /* 082189 bad sum function?*/
        CL0OW07.CLAESTVL = 0;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        CL0OW07.CLAESTVL = 0;
      else
        TA1REC.TA1DBASE = "DCLAIM";
        TA1REC.TA1TBLVU = "VRAITM01";
        TA1REC.TA1TBLKE = "SUM 2";
        XPCL010();
      end
    end
    if (CL0OW07.CLAESTVL > 0)
      CL0OW07.CLAESTVL = CL0OW07.CLAESTVL * CL0OW01.CL0OWNBR; /* *-1*/
    end
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* curr clval*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OW07.CLAESTVL + CL0OWWK3; /* total*/
  else
     /* curr prod auth at prod level, so calc value directly*/
     /* clkauthq already * -1 to show as credit*/
    CL0OW01.CL0OWWK1 = CLKREC.CLKAUTHQ; /* qty*/
    CL0OW01.CL0OWWK2 = CLKREC.CLKCLPRC; /* price*/
    CL0OW01.CL0OWWK3 = CL0OW05.CLAESTVL[CL0OWNOP]; /* curr clm val*/
    CL0OW05.CLAESTVL[CL0OWNOP] = CL0OWWK1 * CL0OWWK2 + CL0OWWK3; /* total*/
  end
  ;
  ;
  ;
end // end KL0O264

// get prds from ivitm
Function KL0O265()
   /* *************************************************************/
   /* *     get all products from ivitm database (invoice)*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O265"; /* set current process name*/
  ;
  ;
  IV3REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
  IV3REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  IV3REC.OP2LNINB = -1;
  IV3REC.SY1STNBR = "******";
  IV3REC.SY2CLRID = "***";
  IV3REC.XDMCD = "**";
  IV3REC.XLCCD = "**";
  IV3REC.XQACD = "**";
  ;
  call "IO1100" ("S2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  if (SQLCA.VAGen_SQLCODE < 0) /* added 2/89*/
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1LOCAT[2] = "SELECT";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/
  ;
  CL0OW01.CL0OWPIN = "Y"; /* init products-from-invoice flag*/
  if (SQLCA.VAGen_SQLCODE == 100)
    CL0OW01.CL0OWPIN = "N"; /* no products from invoice*/
  end
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
    if (IV3REC.OP2LNINB in CL0OW05.OP2LNINB) /* already in array*/
       /* next sentence*/
    else
      CL0OW05.CL0OWSFL[CL0OWNOP] = "I"; /* record from invoice*/
      /* MOVE IV3REC.IV3GROUP TO CL0OW05.CL0OW5gp;*/
      KL0O266(); /* move data to array*/
      CL0OW01.CL0OWNOP = CL0OW01.CL0OWNOP + 1;
    end
    call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  call "IO1100" ("C2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
end // end KL0O265

// move items from ivitm to ws
Function KL0O266()
   /* *************************************************************/
   /* *     move items from ivitm (iv3rec) to cl0ow05 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 06-17-91 GDEKCE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* * 03-13-92 GDEKCE  MARCH DB2 TABLE CHANGES.                **/
   /* * 04-13-92 twatso  april DB2 TABLE CHANGES.                **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O266"; /* set current process name*/
  ;
  ;
  CL0OW05.SY1STNBR[CL0OWNOP] = IV3REC.SY1STNBR;
  CL0OW05.SY2CLRID[CL0OWNOP] = IV3REC.SY2CLRID;
  CL0OW05.XDMCD[CL0OWNOP] = IV3REC.XDMCD;
  CL0OW05.IV3LNSQ[CL0OWNOP] = IV3REC.IV3LNSQ;
  CL0OW05.IV3NLNUP[CL0OWNOP] = IV3REC.IV3NLNUP;
  CL0OW04.IV3GLNUP[CL0OWNOP] = IV3REC.IV3GLNUP;
  CL0OW04.OP2PRCVF[CL0OWNOP] = IV3REC.OP2PRCVF;
  CL0OW04.XQACD[CL0OWNOP] = IV3REC.XQACD;
  CL0OW08.XEGCD[CL0OWNOP] = IV3REC.XEGCD;
  CL0OW08.XBK-BK-SESN-CD[CL0OWNOP] = IV3REC.XBK-BK-SESN-CD;
  CL0OW08.OP-BK-YR[CL0OWNOP] = IV3REC.OP-BK-YR;
  CL0OW08.OP-BK-MO[CL0OWNOP] = IV3REC.OP-BK-MO;
  CL0OW04.CLNNTPRC[CL0OWNOP] = IV3REC.IV3NLNUP;
  CL0OW04.CLNGRPRC[CL0OWNOP] = IV3REC.IV3GLNUP;
  CL0OW04.KUIPRDID[CL0OWNOP] = IV3REC.KUIPRDID;
  CL0OW05.OP2LNINB[CL0OWNOP] = IV3REC.OP2LNINB;
  CL0OW05.XUMCD[CL0OWNOP] = IV3REC.XUMCD;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
  CL0OW04.CLKPRCFF[CL0OWNOP] = "I";
  ;
  CL0OW04.CLKRQTQ[CL0OWNOP] = 0;
  CL0OW04.CLKAUTHQ[CL0OWNOP] = 0;
  CL0OW04.CLMTRTSQ[CL0OWNOP] = 0;
  CL0OW04.CLKCLPRC[CL0OWNOP] = 0;
  CL0OW05.CLKNBRSZ[CL0OWNOP] = 0;
  CL0OW05.CLKWHSXF[CL0OWNOP] = " ";
  CL0OW05.CLKCRFL[CL0OWNOP] = " ";
  CL0OW05.CLICRDFL[CL0OWNOP] = " ";
  CL0OW05.CL0OMSEL[CL0OWNOP] = " ";
  CL0OW05.CL0OMTRN[CL0OWNOP] = " ";
  CL0OW05.CL0OWLVL[CL0OWNOP] = " "; /* worked at prd or size level*/
  CL0OW05.CL0OWPPF[CL0OWNOP] = "N"; /* prepack flag*/
  CL0OW05.CL0OWUOM[CL0OWNOP] = "N"; /* unit of measure variable flag*/
  ;
  ;
  if (IV3REC.OP2PRCVF == "Y")
    CL0OW05.CL0OWLVL[CL0OWNOP] = "S"; /* worked at size level*/
  else
    CL0OW05.CL0OWLVL[CL0OWNOP] = " "; /* worked at prd or size level*/
  end
  ;
   /* look for price overrides*/
  ;
  if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL6REC.IV0IVCID = IV3REC.IV0IVCID;
    CLXREC.CLXORDIV = IV3REC.IV0IVCID;
    CL6REC.IV0PARTN = CLXREC.CLXPARTN;
    CL6REC.XGPCD = CLAREC.XGPCD;
    CL6REC.SY1STNBR = IV3REC.SY1STNBR;
    CL6REC.SY2CLRID = IV3REC.SY2CLRID;
    CL6REC.XDMCD = IV3REC.XDMCD;
    CL6REC.XQACD = IV3REC.XQACD;
    CL6REC.XUMCD = IV3REC.XUMCD;
    CL6REC.SY5SZID = 0;
    ;
    KL0OS95(); /* select set price override*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* found no override for product*/
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      CL6REC.SY5SZID = -1; /* look for override for any sizes*/
      ;
      KL0OS95(); /* select set price override*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        CL0OW04.CLNGRPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLNNTPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLKPRCFF[CL0OWNOP] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        CL0OW04.CLNGRPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLNNTPRC[CL0OWNOP] = CL6REC.CL6OVPRC;
        CL0OW04.CLKPRCFF[CL0OWNOP] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    end
  end
  ;
  if (IVAREC.IVANBLFL == "Y")
    CL0OW04.CLKCLPRC[CL0OWNOP] = CL0OW04.CLNNTPRC[CL0OWNOP];
  else
    CL0OW04.CLKCLPRC[CL0OWNOP] = CL0OW04.CLNGRPRC[CL0OWNOP];
  end
  ;
  ;
   /* set variable uom switch also*/
  KL0OS96(); /* select return qty from vdefit01 and*/
                                   /* vrtsit01*/
  CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW04.CLMTRTSQ[CL0OWNOP] > 0) /* need negative qty*/
    CL0OW05.YCECD[CL0OWNOP] = "CLO"; /* show as exception code*/
    CL0OW04.CLMTRTSQ[CL0OWNOP] = CL0OW04.CLMTRTSQ[CL0OWNOP] * -1;
  end
  ;
  ;
  KL0OS94(); /* get customer product id*/
  ;
  ;
end // end KL0O266

// fetch from invc item records
Function KL0O267()
   /* *************************************************************/
   /* *     fetch line unit price*/
   /* *    from iv3rec*/
   /* **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E     H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-15-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O267"; /* set current process name*/
  ;
  ;
  ;
  ;
   /* fetch line unit price*/
  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0OW05.IV3LNSQ[CL0OWNOP] = IV3REC.IV3LNSQ;
    CL0OW05.IV3NLNUP[CL0OWNOP] = IV3REC.IV3NLNUP;
    CL0OW04.IV3GLNUP[CL0OWNOP] = IV3REC.IV3GLNUP;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0OW05.IV3LNSQ[CL0OWNOP] = 0;
      CL0OW05.IV3NLNUP[CL0OWNOP] = 0;
      CL0OW04.IV3GLNUP[CL0OWNOP] = 0;
    else
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVITM01";
      XPCL010();
    end
  end
end // end KL0O267

// calculate totals for map
Function KL0O268()
   /* *************************************************************/
   /* *       CALCULATE CLAIM VALUES AND SCREEN TOTALS           **/
   /* *           FOR NEWLY SELECTED PRODUCT ITEMS               **/
   /* *                                                          **/
   /* *   1) Loop through saved WS product values and sum totals **/
   /* *      for Shipped Quantity, Customer Requested Quantity,  **/
   /* *      Authorized Return Quantity, Actual Return           **/
   /* *      Quantity, and Claim Values.  The claim value for    **/
   /* *      each product is also calculated.                    **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL00268";
  ;
  ;
  CL0OW01.CL0OWTSQ = 0; /* Total shipped quantity*/
  CL0OW01.CL0OWTCQ = 0; /* Total customer requested quantity*/
  CL0OW01.CL0OWTAQ = 0; /* Total authorized quantity*/
  CL0OW01.CL0OWTRQ = 0; /* Total actual returned quantity*/
  CL0OW01.CL0OWTCV = 0; /* Total claim value*/
  ;
  CL0OW01.CL0OWIXM = 1; /* Set working array index*/
  ;
   /* IF YCRTBL.YCRSPARN(CLXYCRX) EQ 'Y'     ; special arrangement*/
    /* AND CL0OW01.CL0OWICT EQ 0     ; invoice count*/
    /* AND CL0OM005.SY1STNBR(1) EQ ' '      ; no products entered*/
    /* CL0OW01.CL0OWTSQ = CL0OW01.CL0OWTSQ + CL0OW05.IV3LNSQ(CL0O*/
    /* CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ(CL0O*/
    /* CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ(CL0*/
    /* CL0OW01.CL0OWTRQ = CL0OW01.CL0OWTRQ + CL0OW04.CLMTRTSQ(CL0*/
    /* CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL(CL0*/
    /* EZERTN;*/
   /* END ;*/
  ;
  while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOP /* While LE nbr of prds*/
   && CL0OW05.SY1STNBR[CL0OWIXM] != " ") /* and data exists to process*/
     /* move to individual build array process cl0o162/4/6  1/89*/
    /* MOVE CL0OW04.CLKAUTHQ(CL0OWIXM) TO CL0OW01.CL0OWWK1; QTY*/
    /* MOVE CL0OW05.CLKCLPRC(CL0OWIXM) TO CL0OW01.CL0OWWK2; price*/
    /* CL0OW05.CLAESTVL(CL0OWIXM) = CL0OW01.CL0OWWK1 * CL0OW01.CL02*/
    ;
    CL0OW01.CL0OWTSQ = CL0OW01.CL0OWTSQ + CL0OW05.IV3LNSQ[CL0OWIXM];
    CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OWIXM];
    CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OWIXM];
    CL0OW01.CL0OWTRQ = CL0OW01.CL0OWTRQ + CL0OW04.CLMTRTSQ[CL0OWIXM];
    CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OWIXM];
    ;
    CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1; /* Incr counter*/
  end
  ;
  ;
end // end KL0O268

// map 10 size detail
Function KL0O300()
   /* ************************************************************/
   /* *    process screen cl0om010                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from cl0o150 until the end-of-screen   **/
   /* *     flag (clxeosfl) is set to 'y' or no more 's' in     **/
   /* *     product array                                       **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O300";
  ;
  ;
  if (CLXREC.CLXBLDSC == "Y")
    KL0O301();
    CLXREC.CLXBLDSC = "N";
  end
  ;
  ;
  KL0O306(); /* show totals on screen*/
  ;
  ;
   /* ***********************************************************/
  converse KL0OM010 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  CLXREC.CLXERRF = "N";
  ;
  KL0O310(); /* edit pfkeys*/
   /* may transfer out of application*/
  ;
  ;
  KL0O312(); /* set fields defined*/
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O320(); /* edit entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O330(); /* process entries*/
  end
  ;
  ;
  if (CLXREC.CLXERRF == "N")
    KL0O340(); /* handle enter/PF key*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (clxeosfl) is 'n'*/
        /* we go back to top of process cl0%100.*/
     /* if the end-of-screen flag (clxeosfl) is 'y'*/
        /* we return to cl0%050.*/
end // end KL0O300

// build screen
Function KL0O301()
   /* **************************************/
   /* build screen*/
  ;
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 11-12-90 CHELLM ADDED PERFORM OF CL0O269 TO SELECT       **/
   /* *                 VIVITM01 THAT CONTAINS XUM AND XQA CODES **/
   /* *                 FOR PRICE CALCULATIONS.                  **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* * 10-29-93 GDECKE  CHANGE CLAREC.YCSCD TO CLAREC.YCSCD1    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O301";
  ;
  ;
  set SY4REC empty;
  set KL0OM010 initial;
  KL0OM010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  KL0OM010.CLACLMNB = CLAREC.CLACLMNB;
  KL0OM010.XGPCD = CLAREC.XGPCD;
  KL0OM010.YCTCD = CLAREC.YCTCD;
  KL0OM010.YCRCD = CLAREC.YCRCD;
  KL0OM010.KUCCOID = CLAREC.KUCCOID;
  KL0OM010.KUMSTRID = CLAREC.KUMSTRID;
  KL0OM010.XNXCD = CLAREC.XNXCD;
  KL0OM010.KUCCONM = CLWREC.KUCCONM;
  KL0OM010.IV0IVCID = CLWREC.IV0IVCID;
  KL0OM010.CL0OWINB = CL0OW01.CL0OWINX;
  KL0OM010.CL0OWICT = CL0OW01.CL0OWICT;
  KL0OM010.OP1CUPO = CLAREC.OP1CUPO;
  KL0OM010.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
  KL0OM010.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
  KL0OM010.XDMCD = CL0OW05.XDMCD[CL0OW05X];
  KL0OM010.XQACD = CL0OW04.XQACD[CL0OW05X];
  KL0OM010.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  ;
  KL0O303(); /* expand abrv*/
  ;
  if (CLXREC.CLXBLDAY == "Y")
    CLXREC.CLXBLDAY = "N";
    CL0OW01.CL0OWNOS = 0; /* number of sizes*/
    set CL0OW03 empty;
    if (CLAREC.CLADJIND == "Y")
      KL0O361(); /* select all records from cladj*/
    end
    KL0O363(); /* select all records from raitm*/
    if (CL0OW01.CL0OWICT > 0
     && CLAREC.YCSCD1 != "CMP"
     && CLAREC.YCSCD1 != "CAN")
      KL0O365(); /* select all records from ivitm*/
      KL0O369(); /* select vivitm01    11-12-90*/
    end
  end
  ;
  KL0O368(); /* calculate totals*/
  ;
  CLXREC.CLXLINEX = 1;
   /* clxary1x(2) set to 1 before entering cl0o300 and*/
   /* incremented by pf7/8*/
  CL0OW01.CL0OW03X = CLXREC.CLXARY1X[2];
  ;
  if (CL0OW01.CL0OWNOS == 0)
     /* next sentence*/
  else
    while (CLXREC.CLXLINEX <= CL0OW01.CL0OWNOS /* number of sizes*/
     && CLXREC.CLXLINEX <= 11)
      KL0O307(); /* move data to map lines*/
      KL0O308(); /* protect screen line*/
      CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
      CL0OW01.CL0OW03X = CL0OW01.CL0OW03X + 1;
    end
  end
  ;
  KL0O309(); /* show error messages*/
  ;
  ;
end // end KL0O301

// expand codes for header
Function KL0O303()
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *    DATE    LOGON   REASON                                **/
   /* *----------------------------------------------------------**/
   /* *  06-14-91  sgorga  DB2 changes.  Replaced KU2REC with    **/
   /* *                    KUIREC. Replaced call 'S ' with 'SB'. **/
   /* *  06-17-91  GDEKCE  EXPAND W04/W05 TABLE TO 1000 LINES.   **/
   /* *  08-18-97  GREDD1  CALL CU1710 INSTEAD OF IO5790 TO GET  **/
   /* *                    CUST-PROD-ID .                        **/
   /* *************************************************************/
  ;
   /* **************************************/
   /* expand codes for header*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "KL0O303";
  ;
  ;
  ;
  ;
  sysVar.arrayIndex = +1; /* intialize*/
  if (CLAREC.YCRCD in YCRTBL.YCRCD /* if in table*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM010.YCRSDESC = YCRTBL.YCRSDESC[sysVar.arrayIndex];
  end
  ;
  ;
  if (CLAREC.YCTCD in YCTTBL.YCTCD /* if in table*/
   && YCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM010.YCTABRV = YCTTBL.YCTABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CLAREC.XGPCD in XGPTBL.XGPCD /* if in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM010.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CL0OW04.XQACD[CL0OW05X] in XQATBL.XQACD /* if in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM010.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
  end
  ;
  ;
  if (CL0OW05.XUMCD[CL0OW05X] in XUMTBL.XUMCD /* if in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    KL0OM010.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  ;
   /* used in validating price for size*/
  if (CLAREC.XOTCD in XOTTBL.XOTCD /* if in table*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    CL0OW01.CL0OWXOT = sysVar.arrayIndex;
  end
  ;
  set SYCREC empty;
  SYCREC.XGPCD = KL0OM010.XGPCD;
  SYCREC.SY1STNBR = KL0OM010.SY1STNBR;
  SYCREC.SY2CLRID = KL0OM010.SY2CLRID;
  SYCREC.XDMCD = KL0OM010.XDMCD;
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(200); /* nike prod id is not valid*/
      CLXREC.CLXERRF = "Y";
      set KL0OM010.SY1STNBR cursor, bold;
      set KL0OM010.SY2CLRID bold;
      set KL0OM010.XDMCD bold;
      return;
    else
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR02";
      XPCL010();
    end
  end
  ;
  ;
  if (CL0OW04.SY1SSTNM[CL0OW05X] == " ")
    KL0OM010.SY1SSTNM = SYCREC.SY1SSTNM;
    CL0OW04.SY1SSTNM[CL0OW05X] = SYCREC.SY1SSTNM;
  else
    KL0OM010.SY1SSTNM = CL0OW04.SY1SSTNM[CL0OW05X];
  end
  ;
  ;
  if (CL0OW01.SY2CLRAB == " ")
    KL0OM010.SY2CLRAB = SYCREC.SY2CLRAB;
    CL0OW01.SY2CLRAB = SYCREC.SY2CLRAB;
  else
    KL0OM010.SY2CLRAB = CL0OW01.SY2CLRAB;
  end
  ;
  ;
  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSCALE01";
    XPCL010();
  end
  ;
  ;
   /* *************************************************************/
   /* *    select the row from customer sku row to get customer*/
   /* *      product id.*/
   /* *                                                          **/
   /* *************************************************************/
  ;
  if (CL0OW04.KUIPRDID[CL0OW05X] == " ")
    if (KUCREC.KUCSKIND != " ") /* non-blank means a sku exists*/
       /* **************************************************/
       /* company record read in cl0o005 initialize process*/
       /* says a sku record exists*/
       /* **************************************************/
      /* * tcs change begin - 08/18/97*/
      set WCU1710 empty;
      WCU1710-INQUIRY-OPTION = "2"; /* Nike product id look up*/
      WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID; /* company id*/
      WCU1710-XNX-DEPT-ID-XREF = 0; /* cust department id xref*/
      WCU1710-IN-XGP-GPC-CD = CLAREC.XGPCD; /* g.p.c.*/
      if (CLAREC.IV0IVCID > 0) /* Get product xref date*/
        WCU1710-CU-PROD-XREF-EDT = IV0REC.IV0IVCDT;
      else
        WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT;
      end
      WCU1710-IN-SY-STY-NBR = KL0OM010.SY1STNBR; /* product style*/
      WCU1710-IN-SY-COLR-CD-ID = KL0OM010.SY2CLRID; /* product color*/
      WCU1710-IN-XDM-DIM-CD = KL0OM010.XDMCD; /* product dimension*/
      WCU1710-IN-SY-SZ-ID = 0; /* zero size id*/
      ;
       /* If quality code is balnk default it to '01'*/
      if (CL0OW04.XQACD[CL0OW05X] != " ") /* Quality code*/
        WCU1710-IN-XQA-QUAL-CD = CL0OW04.XQACD[CL0OW05X];
      else
        WCU1710-IN-XQA-QUAL-CD = "01";
      end
      ;
      call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* get customer product id*/
      if (WCU1710-RETURN-CODE == 0)
        KL0OM010.KUIPRDID = WCU1710.CU-CUST-PROD-ID[1];
        CL0OW04.KUIPRDID[CL0OW05X] = WCU1710.CU-CUST-PROD-ID[1];
        /* tcs change end -08/18/97*/
      else
        KL0OM010.KUIPRDID = " ";
        CL0OW04.KUIPRDID[CL0OW05X] = " ";
      end
    else
      KL0OM010.KUIPRDID = " ";
      CL0OW04.KUIPRDID[CL0OW05X] = " ";
    end
  else
    KL0OM010.KUIPRDID = CL0OW04.KUIPRDID[CL0OW05X];
  end
  ;
  ;
end // end KL0O303

// show totals
Function KL0O306()
   /* *************************************************************/
   /* *     Check to see if total line needs to be displayed;    **/
   /* *     -- If it does then format the totals.                **/
   /* *************************************************************/
  ;
  if (YCRTBL.YCRSPARN[CLXYCRX] == "Y" /* special arrangement*/
   && CL0OW01.CL0OWICT == 0           /* invoice count*/
   && KL0OM010.SY4IDDSC[1] == 0)      /* no products entered*/
     /* keep entered totals for authorized qty and value*/
  else
    CL0OW01.CL0OWIXM = CLXREC.CLXARY1X[2] + 11; /* next page*/
    if (CL0OW01.CL0OWIXM >= CL0OW01.CL0OWNOS /* If at array max*/
     || CL0OW03.SY4IDDSC[CL0OWIXM] == " ")   /* or no more pages of data*/
      KL0OM010.SY4IDDSC[12] = "TOTAL"; /* Move 'TOTAL' indicator*/
      KL0OM010.IV4SHPQ[12] = CL0OW01.CL0OWSSQ; /* tot shipped qty*/
      KL0OM010.CLKRQTQ[12] = CL0OW01.CL0OWSCQ; /* tot requested qty*/
      KL0OM010.CLKAUTHQ[12] = CL0OW01.CL0OWSAQ; /* tot auth qty*/
      KL0OM010.CLMTRTSQ[12] = CL0OW01.CL0OWSRQ; /* tot return qty*/
      KL0OM010.CLAESTVL[12] = CL0OW01.CL0OWSCV; /* tot claim qty*/
      set KL0OM010.SY4IDDSC[12] protect; /* Protect all total fields*/
      set KL0OM010.IV4SHPQ[12] protect;
      set KL0OM010.CLKRQTQ[12] protect;
      set KL0OM010.CLKAUTHQ[12] protect;
      set KL0OM010.CLMTRTSQ[12] protect;
      set KL0OM010.CLAESTVL[12] protect;
    else
      KL0OM010.SY4IDDSC[12] = " "; /* Clear totals*/
      KL0OM010.IV4SHPQ[12] = 0;
      KL0OM010.CLKRQTQ[12] = 0;
      KL0OM010.CLKAUTHQ[12] = 0;
      KL0OM010.CLMTRTSQ[12] = 0;
      KL0OM010.CLAESTVL[12] = 0;
      set KL0OM010.SY4IDDSC[12] skip, invisible; /* Darken total lines*/
      set KL0OM010.IV4SHPQ[12] skip, invisible;
      set KL0OM010.CLKRQTQ[12] skip, invisible;
      set KL0OM010.CLKAUTHQ[12] skip, invisible;
      set KL0OM010.CLMTRTSQ[12] skip, invisible;
      set KL0OM010.CLAESTVL[12] skip, invisible;
    end
  end
  ;
  ;
end // end KL0O306

// move data to map lines
Function KL0O307()
   /* **************************************************/
    /* build screen line*/
   /* **************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O307";
  ;
  ;
    /* if no sizes to show*/
    /* or have shown all sizes and are now moving*/
    /* blank lines to the screen*/
  ;
  if (CL0OW01.CL0OWNOS == 0
   || CLXREC.CLXLINEX > CL0OW01.CL0OWNOS
   || CL0OW01.CL0OW03X > CL0OW01.CL0OWNOS)
     /* move defaults to working storage*/
    ;
    ;
    ;
    ;
    return;
  end
  ;
   /* move values from size array to map image for editing*/
  ;
  ;
  ;
  KL0OM010.CL0OMSEL[CLXLINEX] = CL0OW03.CL0OMSEL[CL0OW03X];
  KL0OM010.CL0OMTRN[CLXLINEX] = CL0OW03.CL0OMTRN[CL0OW03X];
  KL0OM010.SY4IDDSC[CLXLINEX] = CL0OW03.SY4IDDSC[CL0OW03X];
  KL0OM010.IV4SHPQ[CLXLINEX] = CL0OW03.IV4SHPQ[CL0OW03X];
  KL0OM010.CLKRQTQ[CLXLINEX] = CL0OW03.CLKRQTQ[CL0OW03X];
  KL0OM010.CLKAUTHQ[CLXLINEX] = CL0OW03.CLKAUTHQ[CL0OW03X];
  KL0OM010.CLMTRTSQ[CLXLINEX] = CL0OW03.CLMTRTSQ[CL0OW03X];
  KL0OM010.CLKPRCFF[CLXLINEX] = CL0OW03.CLKPRCFF[CL0OW03X];
  KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLKCLPRC[CL0OW03X];
  KL0OM010.CLAESTVL[CLXLINEX] = CL0OW03.CLAESTVL[CL0OW03X];
  ;
  ;
  if (IVAREC.IVANBLFL == "Y")
    KL0OM010.IV4NUP[CLXLINEX] = CL0OW03.IV4NUP[CL0OW03X];
  else
    KL0OM010.IV4NUP[CLXLINEX] = CL0OW03.IV4GUP[CL0OW03X];
  end
  ;
  ;
  if (CL0OW03.CL0OWUOM[CL0OW03X] == "P") /* variable uniti of measure*/
    KL0OM010.CL0OMERR[CLXLINEX] = CL0OW03.CL0OWUOM[CL0OW03X];
  else
    KL0OM010.CL0OMERR[CLXLINEX] = " ";
  end
  ;
  ;
end // end KL0O307

// protect screen lines
Function KL0O308()
   /* **************************************/
   /* protect screen lines*/
   /* 11-12-90 CHELLM Protected XUM and XQA if authorized sizes*/
                   /* already exist.*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O308";
  ;
  ;
  set KL0OM010.CL0OMSEL[1] cursor;
  ;
  if (KL0OM010.CL0OMTRN[CLXLINEX] != " ")
    set KL0OM010.XUMCD protect;
    set KL0OM010.XQACD protect;
  end
  ;
   /* if in inquiry only mode*/
  ;
  if (CL0OW01.CL0OWINQ == "Y")
    set KL0OM010.CL0OMSEL[CLXLINEX] protect;
    set KL0OM010.SY4IDDSC[CLXLINEX] protect;
    set KL0OM010.CLKRQTQ[CLXLINEX] protect;
    set KL0OM010.CLKAUTHQ[CLXLINEX] protect;
    set KL0OM010.CLMTRTSQ[CLXLINEX] protect;
    set KL0OM010.CLKPRCFF[CLXLINEX] protect;
    set KL0OM010.CLKCLPRC[CLXLINEX] protect;
  else
    if (KL0OM010.SY4IDDSC[CLXLINEX] == " ")
      set KL0OM010.SY4IDDSC[CLXLINEX] normal; /* unprotected and unmodified*/
      return;
    else
      if (KL0OM010.SY4IDDSC[CLXLINEX] != " ")
        set KL0OM010.SY4IDDSC[CLXLINEX] protect;
        return;
      end
    end
  end
  ;
  ;
end // end KL0O308

// show error messages
Function KL0O309()
   /* **************************************/
   /* show error messages*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O309";
  ;
   /* IF 'R' IN CL0OW03.CL0OWSFL      ; sizes from RA*/
    /* ; next sentence*/
   /* ELSE                            ; no RA sizes exist*/
    /* IF 'I' IN CL0OW03.CL0OWSFL    ; sizes from invoice*/
      /* ; next sentence*/
    /* ELSE ;*/
  if (CL0OW01.CL0OWNOS == 0)
    if (KL0OM010.IV0IVCID > 0) /* invoice attached to claim*/
      converseLib.validationFailed(215);
                                   /* no sizes for prd, enter size or ENTER*/
      CLXREC.CLXERRF = "Y";
      KL0OM010.XXXERRID = "KL0O309";
    else /* no invoice attached to claim*/
      converseLib.validationFailed(196); /* no invoices associated with this*/
                                   /* claim*/
      CLXREC.CLXERRF = "Y";
      KL0OM010.XXXERRID = "KL0O309";
    end
  end
  ;
  ;
end // end KL0O309

// edit pfkeys
Function KL0O310()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O310";
  ;
  if (KL0OM010.CATOAP != " " /* if any fastpath data entered*/
   || KL0OM010.CAITEM != " ")
    COMMAREA.CATOAP = KL0OM010.CATOAP;
    COMMAREA.CAITEM = KL0OM010.CAITEM;
     /* edit or act on fastpath*/
    if (CLXREC.CLXERRF == "Y")
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(62); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      CLXREC.CLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSPF1();
      else
        if (converseVar.eventKey is pf3)
          COMMAREA.CATOAP = "KL0A";
          XPCL002();
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf5)
              COMMAREA.CATOAP = "KL0E";
              XPCL002();
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              CLXREC.CLXERRF = "Y";
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O310

// set fields defined
Function KL0O312()
   /* *************************************************************/
   /* *  set fields defined*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXLINEX = 1;
  while (CLXREC.CLXLINEX <= 11
   && KL0OM010.SY4IDDSC[CLXLINEX] != " ")
    set KL0OM010.CL0OMSEL[CLXLINEX] initialAttributes;
    set KL0OM010.SY4IDDSC[CLXLINEX] initialAttributes;
    set KL0OM010.IV4SHPQ[CLXLINEX] initialAttributes;
    set KL0OM010.CLKRQTQ[CLXLINEX] initialAttributes;
    set KL0OM010.CLKAUTHQ[CLXLINEX] initialAttributes;
    set KL0OM010.CLMTRTSQ[CLXLINEX] initialAttributes;
    set KL0OM010.CLKPRCFF[CLXLINEX] initialAttributes;
    set KL0OM010.CLKCLPRC[CLXLINEX] initialAttributes;
    set KL0OM010.CLAESTVL[CLXLINEX] initialAttributes;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
end // end KL0O312

// edit entries
Function KL0O320()
   /* *************************************************************/
   /* *                   EDIT ENTRIES                           **/
   /* *                                                          **/
   /* *    1) if data changed on screen.*/
   /* *       - If no errors, check for a selection code of AA   **/
   /* *       - If still no errors, check detail lines from the  **/
   /* *           bottom up.                                     **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 10-04-90 CHELLM Added XUM and XQA to fields checked for  **/
   /* *          screen changes.                                 **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* *************************************************************/
  ;
  ;
  CLXREC.CLXCPROC = "CL0O320";
  ;
  ;
  CL0OW01.CL0OWSWR = "Y"; /* have shown warnings to users*/
  set KL0OM010.CL0OMSEL[1] cursor;
  ;
  ;
  KL0O323(); /* validate select codes*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  ;
  if (CL0OW01.CL0OWINQ == "Y") /* inquiry*/
    return;
  end
  ;
  CLXREC.CLXLINEX = 11;
  CL0OW01.CL0OW03X = CLXREC.CLXARY1X[2] + 10;
  while (CLXREC.CLXLINEX > 0)
    ;
    if (KL0OM010.CL0OMSEL[CLXLINEX] == CL0OW03.CL0OMSEL[CL0OW03X]
     && KL0OM010.SY4IDDSC[CLXLINEX] == CL0OW03.SY4IDDSC[CL0OW03X]
     && KL0OM010.CLKRQTQ[CLXLINEX] == CL0OW03.CLKRQTQ[CL0OW03X]
     && KL0OM010.CLKAUTHQ[CLXLINEX] == CL0OW03.CLKAUTHQ[CL0OW03X]
     && KL0OM010.CLMTRTSQ[CLXLINEX] == CL0OW03.CLMTRTSQ[CL0OW03X]
     && KL0OM010.CLKPRCFF[CLXLINEX] == CL0OW03.CLKPRCFF[CL0OW03X]
     && KL0OM010.CLKCLPRC[CLXLINEX] == CL0OW03.CLKCLPRC[CL0OW03X]
     && KL0OM010.XUMCD == CL0OW05.XUMCD[CL0OW05X]
     && KL0OM010.XQACD == CL0OW04.XQACD[CL0OW05X])
       /* next sentence - nothing changed*/
    else
      CL0OW01.CL0OWSWR = "N"; /* Set have reshown map flag 'n'*/
      ;
      KL0O329(); /* Edit selections*/
      if (CLXREC.CLXERRF == "Y")
        return;
      end
      ;
      if (CL0OW01.CL0OWINQ == "N" /* If not inquiry only*/
       && KL0OM010.CL0OMSEL[CLXLINEX] != "X") /* line not removed*/
        /* ********************************************/
          /* Verify the claim price entry, the price*/
            /* from flag, and the quantity entry.*/
        /* ********************************************/
        KL0O325();
        /* ********************************************/
          /* Verify size id*/
        /* ********************************************/
        if (CLXREC.CLXERRF == "N") /* if no errors*/
           /* and have new non-blank size id*/
          if (KL0OM010.SY4IDDSC[CLXLINEX] != CL0OW03.SY4IDDSC[CL0OW03X]
           && KL0OM010.SY4IDDSC[CLXLINEX] != " ")
            KL0O326(); /* Validate the size id*/
          end
        end
        /* ********************************************/
          /* If no problems occurred during the edits,*/
            /* then perform calculation and retrieve*/
            /* edits which require certain valid*/
            /* entries to exist on the line.*/
        /* ********************************************/
        if (CLXREC.CLXERRF == "N") /* If no problems occurred*/
          KL0O327(); /* Get the appropriate claim price*/
          KL0O328(); /* Calculation edits for totals*/
        end
      else /* inquiry or deleting*/
        ;
        if (KL0OM010.CL0OMSEL[CLXLINEX] == "X")
          KL0O328();
        end
        ;
      end
      ;
      if (CLXREC.CLXERRF == "N") /* If no error have occurred*/
        KL0OS41(); /* Check for overlapping sizes on the screen*/
      end
      ;
      ;
       /* **********************/
         /* set update flags*/
       /* **********************/
      ;
      if (CLXREC.CLXERRF == "N")
        KL0O321();
      end
      ;
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX - 1;
    CL0OW01.CL0OW03X = CL0OW01.CL0OW03X - 1;
  end
  ;
  ;
   /* IF CLXREC.CLXERRF EQ 'N';*/
    /* PERFORM CL0O124               ; group edits*/
   /* END ;*/
  ;
  ;
end // end KL0O320

// chose update action
Function KL0O321()
   /* ***************************************************/
   /* **/
   /* *  decide which records need to be updated*/
   /* **/
   /* ***************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O321"; /* set current process name*/
  ;
  if (CL0OW03.CL0OWSFL[CL0OW03X] == "A") /* from adjustments*/
    if (CL0OW03.CL0OMSEL[CL0OW03X] == "A" /* authorize*/
     || CL0OW03.CL0OMSEL[CL0OW03X] == "NC")
      CL0OW03.CL0OWUPR[CL0OW03X] = "X"; /* delete clrrec*/
      CL0OW03.CL0OWUPK[CL0OW03X] = "A"; /* add clkrec*/
    else
      if (CL0OW03.CL0OMSEL[CL0OW03X] == "X") /* delete*/
        CL0OW03.CL0OWUPR[CL0OW03X] = "X"; /* delete clrrec*/
      else
        if (CL0OW03.CL0OMSEL[CL0OW03X] == "C"
         || CL0OW03.CL0OMSEL[CL0OW03X] == "D")
          CL0OW03.CL0OWUPR[CL0OW03X] = "C";
        end
      end
    end
  else
    ;
    if (CL0OW03.CL0OWSFL[CL0OW03X] == "I") /* from invoice*/
      if (CL0OW03.CL0OMSEL[CL0OW03X] == "A"
       || CL0OW03.CL0OMSEL[CL0OW03X] == "NC")
        CL0OW03.CL0OWUPK[CL0OW03X] = "A";
      else
        if (CL0OW03.CL0OMSEL[CL0OW03X] == "C"
         || CL0OW03.CL0OMSEL[CL0OW03X] == "D")
          CL0OW03.CL0OWUPR[CL0OW03X] = "A";
        end
      end
    else
      ;
      if (CL0OW03.CL0OWSFL[CL0OW03X] == "R")
        if (CL0OW03.CL0OMSEL[CL0OW03X] == "X")
          CL0OW03.CL0OWUPK[CL0OW03X] = "X";
        else
          if (CL0OW03.CL0OMSEL[CL0OW03X] == "C"
           || CL0OW03.CL0OMSEL[CL0OW03X] == "D")
            CL0OW03.CL0OWUPR[CL0OW03X] = "A";
            CL0OW03.CL0OWUPK[CL0OW03X] = "X";
          else
            if (CL0OW03.CL0OMSEL[CL0OW03X] == "A"
             || CL0OW03.CL0OMSEL[CL0OW03X] == "NC")
              CL0OW03.CL0OWUPK[CL0OW03X] = "C";
            end
          end
        end
      else
        ;
        if (CL0OW03.CL0OWSFL[CL0OW03X] == " ")
          if (CL0OW03.CL0OMSEL[CL0OW03X] == "C"
           || CL0OW03.CL0OMSEL[CL0OW03X] == "D")
            CL0OW03.CL0OWUPR[CL0OW03X] = "A";
          else
            if (CL0OW03.CL0OMSEL[CL0OW03X] == "A"
             || CL0OW03.CL0OMSEL[CL0OW03X] == "NC")
              CL0OW03.CL0OWUPK[CL0OW03X] = "A";
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O321

// edit selection code
Function KL0O323()
   /* ************************************************************/
   /* *     edit selection code*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O323"; /* set current process name*/
  ;
  ;
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
   /* validate authorize code*/
   /* %%%%%%%%%%%%%%%%%%%%%%%%*/
  ;
  ;
  CLXREC.CLXTESTF = "N";
  CL0OW01.CL0OWNBR = 1;
  if ("AA" in KL0OM010.CL0OMSEL from CL0OWNBR)
    if (sysVar.arrayIndex == 1
     && CLXREC.CLXARY1X[2] == 1) /* on first page*/
      CL0OW01.CL0OWAAF = "Y"; /* save 'aa' code for author.new*/
                                   /* products*/
      CLXREC.CLXTESTF = "Y"; /* need to move 'a' to product lines*/
    else
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM010.XXXERRID = "KL0O323";
      CLXREC.CLXERRF = "Y";
      return;
    end
    CL0OW01.CL0OWNBR = sysVar.arrayIndex + 1;
    if ("AA" in KL0OM010.CL0OMSEL from CL0OWNBR)
      converseLib.validationFailed(427); /* must be line 1 screen 1*/
      KL0OM010.XXXERRID = "KL0O323";
      CLXREC.CLXERRF = "Y";
      return;
    end
  end
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all flag*/
    CLXREC.CLXLINEX = 1;
    while (CLXREC.CLXLINEX <= 11)
      if ("X" in KL0OM010.CL0OMSEL from CLXLINEX)
        CLXREC.CLXLINEX = sysVar.arrayIndex;
        CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
        CL0OW01.CL0OW03X = CLXREC.CLXARY1X[2] + sysVar.arrayIndex - 1;
        if ("X" in CL0OW03.CL0OMSEL from CL0OW03X)
           /* next sentence - record already deleted from database*/
        else
          converseLib.validationFailed(390); /* can't authorize and cancel at the*/
                                   /* same time*/
          KL0OM010.XXXERRID = "KL0O323";
          set KL0OM010.CL0OMSEL[1] cursor, bold;
          CLXREC.CLXERRF = "Y";
          return;
        end
      else
        CLXREC.CLXLINEX = 12; /* force loop end*/
      end
    end
    ;
  else
    return; /* don't need to check quantities*/
  end
  ;
  ;
  ;
   /* *************************************/
      /* Authorize all sizes.*/
   /* *************************************/
  CL0OW01.CL0OWAAF = "Y"; /* Set all authorize flag*/
  ;
    /* Move 'A ' to all map option fields*/
  ;
  CLXREC.CLXLINEX = 1; /* Set index*/
  while (CLXREC.CLXLINEX <= 11) /* Until end of lines*/
    if (KL0OM010.SY4IDDSC[CLXLINEX] != " ")
       /* only authorize sizes that contain the original 'aa'*/
       /* or don't have any other tran codes assoc with them*/
      if (KL0OM010.CL0OMSEL[CLXLINEX] == "AA")
        KL0OM010.CL0OMSEL[CLXLINEX] = "A "; /* Indicate authorized*/
      else
        if (KL0OM010.CL0OMSEL[CLXLINEX] == " "
         && CL0OW03.CL0OMTRN[CLXLINEX] == " ")
          KL0OM010.CL0OMSEL[CLXLINEX] = "A "; /* Indicate authorized*/
        end
      end
    end
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1; /* Increment counter*/
  end
  ;
  ;
    /* lines on current (first) screen will have values moved in*/
    /* regular editting process, to check for entered quantities*/
    /* so only following screen values are checked here*/
  ;
  if (CLXREC.CLXERRF == "N")
    CL0OW01.CL0OWSWR = "N"; /* set have reshown map flag 'n'*/
    CL0OW01.CL0OW03X = 12; /* Set index*/
    while (CL0OW01.CL0OW03X <= CL0OW01.CL0OWNOS) /* Until end of data*/
      if (CL0OW03.SY4IDDSC[CL0OW03X] != " "
       && CL0OW03.CL0OMSEL[CL0OW03X] == " "
       && CL0OW03.CL0OMTRN[CL0OW03X] == " ")
        CL0OW03.CL0OMSEL[CL0OW03X] = "A "; /* Indicate authorized*/
        CL0OW03.CL0OWUPK[CL0OW03X] = "A"; /* Inidicate update*/
        ;
         /* default quantities*/
        ;
        if (CL0OW03.CLKRQTQ[CL0OW03X] == 0)
          CL0OW03.CLKRQTQ[CL0OW03X] = CL0OW03.IV4SHPQ[CL0OW03X];
        end
        if (CL0OW03.CLKRQTQ[CL0OW03X] < 0) /* need pos qty*/
          CL0OW03.CLKRQTQ[CL0OW03X] = CL0OW03.CLKRQTQ[CL0OW03X] * -1;
        end
         /* need neg qty for authorization*/
        CL0OW03.CLKRQTQ[CL0OW03X] = CL0OW03.CLKRQTQ[CL0OW03X] * -1;
        CL0OW01.CL0OWSCQ = CL0OW01.CL0OWSCQ + CL0OW03.CLKRQTQ[CL0OW03X];
        ;
        if (CL0OW03.CLKAUTHQ[CL0OW03X] == 0)
          CL0OW03.CLKAUTHQ[CL0OW03X] = CL0OW03.CLKRQTQ[CL0OW03X];
        end
        if (CL0OW03.CLKAUTHQ[CL0OW03X] < 0) /* need pos qty*/
          CL0OW03.CLKAUTHQ[CL0OW03X] = CL0OW03.CLKAUTHQ[CL0OW03X] * -1;
        end
         /* need neg qty for authorization*/
        CL0OW03.CLKAUTHQ[CL0OW03X] = CL0OW03.CLKAUTHQ[CL0OW03X] * -1;
        CL0OW01.CL0OWSAQ = CL0OW01.CL0OWSAQ + CL0OW03.CLKAUTHQ[CL0OW03X];
        ;
         /* calculate total estimated value*/
        CL0OW01.CL0OWWK2 = CL0OW03.CLKAUTHQ[CL0OW03X];
        CL0OW01.CL0OWWK3 = CL0OW03.CLKCLPRC[CL0OW03X];
        ;
        CL0OW01.CL0OWNUM = CL0OW01.CL0OWWK2 * CL0OW01.CL0OWWK3;
        CL0OW01.CL0OWSCV = CL0OW01.CL0OWSCV + CL0OW01.CL0OWNUM;
        ;
        CL0OW03.CLKCRFL[CL0OW03X] = "Y"; /* 01-19-90*/
        ;
      end
      CL0OW01.CL0OW03X = CL0OW01.CL0OW03X + 1;
    end
  end
  ;
  ;
end // end KL0O323

// edit pff and quantities
Function KL0O325()
   /* ************************************************************/
   /* *                                                         **/
   /* *      VERIFY THE CLAIM PRICE, PRICE FROM FLAG,           **/
   /* *           AND QUANTITY                                  **/
   /* *                                                         **/
   /* *   1) Edits:                                             **/
   /* *                                                         **/
   /* *      - Claim Price - verify that the claim price is     **/
   /* *          entered for a valid price from flag.           **/
   /* *      - Price From Flag - verify that the price from     **/
   /* *          flag is either 'E', 'I', or 'P'.               **/
   /* *      - Quantity - verify that the quantity is entered   **/
   /* *          for a selection code of 'A' and gt 0           **/
   /* **/
   /* MAINTENANCE HISTORY                                      **/
   /* 11-08-91  sgorga  Added code to prevent users from manually*/
   /* entering 'I' in the 'price from' field when they  **/
   /* have entered a select code (such as NC) that is   **/
   /* not valid with an 'I'.                            **/
   /* **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O325"; /* Set current process name*/
  ;
   /* ***************************************************/
       /* default selection code from transaction code*/
   /* ***************************************************/
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == " ") /* default sel from transaction*/
    KL0OM010.CL0OMSEL[CLXLINEX] = KL0OM010.CL0OMTRN[CLXLINEX];
  end
  ;
  ;
   /* ***************************/
       /* Claim Price*/
   /* ***************************/
  ;
   /* IF CL0OW03.CLKCLPRC(CL0OW03X) EQ 0     ; have had errors on*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM010.CLKCLPRC(CLXLINEX) NE CL0OW03.CLKCLPRC(CL0OW03*/
      /* AND CL0OW03.CL0OWFPR(CL0OW03X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; can't change price for nc,*/
      /* MOVE 'KL0O325' TO CL0OM010.XXXERRID; Process name*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* MOVE CL0OW03.CLKCLPRC(CL0OW03X) TO CL0OM010.CLKCLPRC(CLX*/
      /* SET CL0OM010.CLKCLPRC(CLXLINEX) CURSOR,BRIGHT;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
    KL0OM010.CLKCLPRC[CLXLINEX] = 0;
  else
    if (KL0OM010.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
     && KL0OM010.CLKCLPRC[CLXLINEX] == 0)  /* and a price not entered*/
      CLXREC.CLXERRF = "Y";
      CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
      KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
      converseLib.validationFailed(217); /* Price must be entered*/
      set KL0OM010.CLKCLPRC[CLXLINEX] cursor, modified, bold;
    else
      if (KL0OM010.CLKPRCFF[CLXLINEX] != "E" /* If PFF not 'E'ntered*/
       && KL0OM010.CLKCLPRC[CLXLINEX] != CL0OW03.CLKCLPRC[CL0OW03X])
        CLXREC.CLXERRF = "Y";
        CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
        KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
        converseLib.validationFailed(222); /* Cannot change price*/
        set KL0OM010.CLKCLPRC[CLXLINEX] cursor, bold;
        KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLKCLPRC[CL0OW03X];
      else
        if (KL0OM010.CLMTRTSQ[CLXLINEX] > 0) /* have returned qty*/
          if (KL0OM010.CLKPRCFF[CLXLINEX] != CL0OW03.CLKPRCFF[CL0OW03X]
           && KL0OM010.CLKPRCFF[CLXLINEX] == "E") /* If PFF is 'E'ntered*/
            CLXREC.CLXERRF = "Y";
            KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
            converseLib.validationFailed(342); /* Cannot have entered price*/
            set KL0OM010.CLKPRCFF[CLXLINEX] cursor, bold;
            KL0OM010.CLKPRCFF[CLXLINEX] = CL0OW03.CLKPRCFF[CL0OW03X];
          end
          if (KL0OM010.CLKCLPRC[CLXLINEX] != CL0OW03.CLKCLPRC[CL0OW03X])
            CLXREC.CLXERRF = "Y";
            CL0OW01.CL0OWPSW = "Y"; /* Set the problem switch*/
            KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
            converseLib.validationFailed(342); /* Cannot have entered price w rtn qty*/
            set KL0OM010.CLKCLPRC[CLXLINEX] cursor, bold;
            KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLKCLPRC[CL0OW03X];
          end
        else
          if (KL0OM010.CLKPRCFF[CLXLINEX] == "E" /* If PFF is 'E'ntered*/
           && KL0OM010.CLKCLPRC[CLXLINEX] != 0   
           /* and claim price entered*/
           && KL0OM010.SY4IDDSC[CLXLINEX] != " ") /* and prod id is entered*/
            CL0OW03.CLKCLPRC[CL0OW03X] = KL0OM010.CLKCLPRC[CLXLINEX];
          end
        end
      end
    end
  end
  ;
  ;
  ;
   /* ***************************/
     /* Price From Flag*/
   /* ***************************/
  ;
   /* IF CL0OW03.CLKPRCFF(CL0OW03X) EQ ' '   ; have had errors on*/
    /* ; next sentence*/
   /* ELSE ;*/
    /* IF CL0OM010.CLKPRCFF(CLXLINEX) NE CL0OW03.CLKPRCFF(CL0OW03*/
      /* AND CL0OW03.CL0OWFPR(CL0OW03X) EQ 'Y'; freeze price*/
      /* MOVE 460 TO EZEMNO          ; cannot change price with c*/
      /* MOVE 'KL0O325' TO CL0OM010.XXXERRID;*/
      /* MOVE 'Y' TO CLXREC.CLXERRF;*/
      /* MOVE CL0OW03.CLKPRCFF(CL0OW03X) TO CL0OM010.CLKPRCFF(CLX*/
      /* SET CL0OM010.CLKPRCFF(CLXLINEX) CURSOR,BRIGHT;*/
      /* EZERTN;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (KL0OM010.CLKPRCFF[CLXLINEX] == " "
   && KL0OM010.CLKCLPRC[CLXLINEX] == 0
   && KL0OM010.CL0OMSEL[CLXLINEX] != " ") /* 10-04-90*/
    KL0OM010.CLKPRCFF[CLXLINEX] = "P";
    /* IF CL0OM010.CL0OMSEL(CLXLINEX) EQ 'NC';*/
      /* MOVE 'P' TO CL0OW03.CLKPRCFF(CL0OW03X);*/
    /* END ;*/
  else
    if (KL0OM010.CLKPRCFF[CLXLINEX] == "E" /* Entered price*/
     || KL0OM010.CLKPRCFF[CLXLINEX] == "I" /* Invoice price*/
     || KL0OM010.CLKPRCFF[CLXLINEX] == "P") /* Product price*/
       /* next sentence*/
    else
      if (KL0OM010.CLKPRCFF[CLXLINEX] == "O") /* override invoice price*/
        if (CL0OW03.CLKPRCFF[CL0OW03X] == "O")
           /* next sentence*/
        else
           /* user changed selection*/
          KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
          converseLib.validationFailed(201); /* Price from is invalid*/
          CLXREC.CLXERRF = "Y";
          set KL0OM010.CLKPRCFF[CLXLINEX] cursor, bold;
        end
      else
        if (KL0OM010.CL0OMSEL[CLXLINEX] != " ") /* 10-04-90*/
          KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
          converseLib.validationFailed(201); /* Price from is invalid*/
          CLXREC.CLXERRF = "Y";
          set KL0OM010.CLKPRCFF[CLXLINEX] cursor, bold;
        end
      end
    end
  end
   /* 11-08-91 sgorga This code is to prevent users from manually*/
      /* entering 'I' in the 'Prc Frm' field when they have a*/
      /* 'Sel' code that's not valid with the 'I'.*/
  if (KL0OM010.CLKPRCFF[CLXLINEX] == "I") /* If price-from flag = 'I' and*/
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "A"  /* selected trans code = 'A'*/
     || KL0OM010.CL0OMSEL[CLXLINEX] == "AA" /* or 'AA'*/
     || KL0OM010.CL0OMSEL[CLXLINEX] == "C") /* or 'C'*/
   /* next sentence*/
    else
      KL0OM010.XXXERRID = "KL0O325"; /* process name*/
      converseLib.validationFailed(696); /* 'Price from = I' is not valid for select code*/
      CLXREC.CLXERRF = "Y";
      set KL0OM010.CLKPRCFF[CLXLINEX] cursor, bold;
    end
  end
  ;
             /* ***************************/
                     /* Quantity*/
             /* ***************************/
  ;
   /* ************************************************************/
   /* * default quantities and give correct sign for credit/auth*/
   /* ************************************************************/
   /* if cust qty eq 0*/
      /* default cust qty from shipped qty*/
   /* end*/
   /* if authorized qty eq 0*/
     /* default authorized qty from customer qty*/
   /* end*/
  ;
  if (KL0OM010.IV4SHPQ[CLXLINEX] == 0 /* no default qty*/
   && KL0OM010.CLKRQTQ[CLXLINEX] == 0 
   && KL0OM010.CLKAUTHQ[CLXLINEX] == 0
   && KL0OM010.CL0OMSEL[CLXLINEX] != " ") /* 10-04-90*/
    converseLib.validationFailed(231); /* quantity required*/
    KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM010.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
    if (KL0OM010.CLKRQTQ[CLXLINEX] == 0)
      KL0OM010.CLKRQTQ[CLXLINEX] = KL0OM010.IV4SHPQ[CLXLINEX];
    end
    if (KL0OM010.CLKAUTHQ[CLXLINEX] == 0)
      KL0OM010.CLKAUTHQ[CLXLINEX] = KL0OM010.CLKRQTQ[CLXLINEX];
    end
  end
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "D")
     /* need positive quantities*/
    if (KL0OM010.CLKRQTQ[CLXLINEX] < 0)
      KL0OM010.CLKRQTQ[CLXLINEX] = KL0OM010.CLKRQTQ[CLXLINEX] * -1;
    end
    if (KL0OM010.CLKAUTHQ[CLXLINEX] < 0)
      KL0OM010.CLKAUTHQ[CLXLINEX] = KL0OM010.CLKAUTHQ[CLXLINEX] * -1;
    end
  end
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "NC"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "C")
     /* need negative quantities*/
    if (KL0OM010.CLKRQTQ[CLXLINEX] > 0)
      KL0OM010.CLKRQTQ[CLXLINEX] = KL0OM010.CLKRQTQ[CLXLINEX] * -1;
    end
    if (KL0OM010.CLKAUTHQ[CLXLINEX] > 0)
      KL0OM010.CLKAUTHQ[CLXLINEX] = KL0OM010.CLKAUTHQ[CLXLINEX] * -1;
    end
  end
  ;
  ;
   /* ************************************************************/
   /* *     edit customer requested quantity*/
   /* ************************************************************/
  ;
   /* if cust qty greater than non-zero shipped qty*/
  ;
  if (KL0OM010.CLKRQTQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM010.CLKRQTQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM010.CLKRQTQ[CLXLINEX];
  end
  ;
  if (KL0OM010.IV4SHPQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM010.IV4SHPQ[CLXLINEX])
    converseLib.validationFailed(461); /* cust qty cannot exceed invoice shpd qty*/
    KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM010.CLKRQTQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
   /* update totals for this screen*/
  ;
  CL0OW01.CL0OWSCQ = CL0OW01.CL0OWSCQ - CL0OW03.CLKRQTQ[CL0OW03X];
  CL0OW03.CLKRQTQ[CL0OW03X] = KL0OM010.CLKRQTQ[CLXLINEX];
  CL0OW01.CL0OWSCQ = CL0OW01.CL0OWSCQ + CL0OW03.CLKRQTQ[CL0OW03X];
  ;
  ;
  ;
   /* ************************************************************/
   /* *     edit authorized claim quantity*/
   /* ************************************************************/
  ;
   /* if authorized qty greater than non-zero shipped qty*/
  ;
  if (KL0OM010.CLKAUTHQ[CLXLINEX] < 0)
        /* use positive value for comparing quantities*/
    CL0OW01.CL0OWWK1 = KL0OM010.CLKAUTHQ[CLXLINEX] * -1;
  else
    CL0OW01.CL0OWWK1 = KL0OM010.CLKAUTHQ[CLXLINEX];
  end
  ;
  if (KL0OM010.IV4SHPQ[CLXLINEX] > 0
   && CL0OW01.CL0OWWK1 > KL0OM010.IV4SHPQ[CLXLINEX])
    converseLib.validationFailed(462); /* use nc to author above shipd qty*/
    KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM010.CLKAUTHQ[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
   /* returned qty gt authorized qty, not an error only warning*/
  ;
  if (KL0OM010.CLMTRTSQ[CLXLINEX] > CL0OW01.CL0OWWK1
   && CL0OW05.YCECD[CL0OW05X] != " ")
    KL0OM010.XXXERRID = "KL0O325"; /* Process name*/
    converseLib.validationFailed(388); /* Cannot be greater than*/
    CLXREC.CLXERRF = "Y";
    set KL0OM010.CLKAUTHQ[CLXLINEX] cursor, bold;
  end
  ;
  ;
  ;
    /* update totals for this screen*/
  ;
  CL0OW01.CL0OWSAQ = CL0OW01.CL0OWSAQ - CL0OW03.CLKAUTHQ[CL0OW03X];
  CL0OW03.CLKAUTHQ[CL0OW03X] = KL0OM010.CLKAUTHQ[CLXLINEX];
  CL0OW01.CL0OWSAQ = CL0OW01.CL0OWSAQ + CL0OW03.CLKAUTHQ[CL0OW03X];
  ;
  ;
end // end KL0O325

// edit nike prod id
Function KL0O326()
   /* *************************************************************/
   /* *                                                          **/
   /* *            SELECT FROM DPROD.VCOLOR02                    **/
   /* *                                                          **/
   /* *   1) Select the row from the product file to see if it   **/
   /* *      exists.                                             **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O326"; /* Set current process name*/
  ;
  ;
  if (KL0OM010.SY4IDDSC[CLXLINEX] == " ") /* If size id eq ' '*/
    CL0OW03.SY4IDDSC[CL0OW03X] = " ";
    CLXREC.CLXERRF = "Y"; /* Indicate error*/
    KL0OM010.XXXERRID = "KL0O326"; /* Process name*/
    converseLib.validationFailed(200); /* Nike prod id not valid*/
    set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
    return;
  end
  ;
   /* allowed to enter sizes when*/
    /* - non crediting  size*/
    /* - misshipments*/
    /* - no invoice attached to claim*/
  ;
  if (CL0OW03.SY4IDDSC[CL0OW03X] == " ") /* have new entry*/
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC"
     || KL0OM010.CL0OMSEL[CLXLINEX] == "C"
     || KL0OM010.CL0OMSEL[CLXLINEX] == "D"
     || KL0OM010.CL0OMSEL[CLXLINEX] == "A")
       /* next sentence - okay to add non credit products & misships*/
    else
      if (KL0OM010.IV0IVCID == 0)
         /* next sentence - okay to add prds if no invoice attached*/
      else
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0OM010.XXXERRID = "KL0O326"; /* Process name*/
        converseLib.validationFailed(8); /* selection is not valid*/
        set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
        return;
      end
    end
  end
  ;
  ;
  KL0OS62(); /* validate size id*/
  if (CLXREC.CLXERRF == "Y")
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0OW01.CL0OWEFL = "N"; /* Set product exist flag to no*/
    /* **********************************************************/
      /* If the RA item exists in the DCLAIM.VRAITM01 database*/
       /* then check to see if that particular product exists*/
        /* in the current working storage.  If it does exist in*/
        /* WS, then give user a message indicating fast path*/
        /* positioning. Else just indicate product cannot be*/
        /* entered because it is already authorized.*/
    /* **********************************************************/
    /* *************************************************************/
    /* *         CHECK TO SEE IF PRODUCT EXISTS IN WS             **/
    /* *   1) Loop through WS until end of data or product is     **/
    /* *      found.                                              **/
    /* *************************************************************/
    ;
    CL0OW01.CL0OWIXM = 1; /* Set index*/
    while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOS /* Until end of WS*/
     && CL0OW03.SY4IDDSC[CL0OWIXM] != " ") /* or end of data*/
      if (CL0OW03.SY4IDDSC[CL0OWIXM] == KL0OM010.SY4IDDSC[CLXLINEX]
       && CL0OW03.CLKCRFL[CL0OWIXM] == CLKREC.CLKCRFL) /* 072089 add*/
        if (CL0OW01.CL0OWIXM == CLXREC.CLXLINEX)
           /* next sentence ; changing line on screen*/
        else
          CL0OW01.CL0OWEFL = "Y"; /* Set exists flag*/
        end
      end
      CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1;
    end
    if (CL0OW01.CL0OWEFL == "Y" /* If the product is in WS*/
     && CL0OW03.SY4IDDSC[CL0OW03X] == " ") /* and user is adding*/
      converseLib.validationFailed(473);
                                   /* size exist as RA - Fast path position*/
      CLXREC.CLXERRF = "Y"; /* Indicate error*/
      KL0OM010.XXXERRID = "KL0O326"; /* Process name*/
      set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
    end
  else
    CL0OW03.SY4IDDSC[CL0OW03X] = KL0OM010.SY4IDDSC[CLXLINEX];
    CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC") /* If non-credit*/
      CL0OW03.CLKCRFL[CL0OW03X] = "N";
    else
      if (KL0OM010.CL0OMSEL[CLXLINEX] == " ") /* If no selection*/
        converseLib.validationFailed(479);
                                   /* authorize or cancel size just entered*/
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        KL0OM010.XXXERRID = "KL0O326"; /* Process name*/
        set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
      else
        CL0OW03.CLKCRFL[CL0OW03X] = "Y"; /* 072089 add*/
      end
    end
  end
  ;
  ;
end // end KL0O326

// select appropriate claim price
Function KL0O327()
   /* *************************************************************/
   /* *                                                          **/
   /* *        SELECT THE APPROPRIATE CLAIM PRICE                **/
   /* *                                                          **/
   /* *     1) If the price from flag was changed                **/
   /* *        - If price from flag is equal to 'E', then        **/
   /* *          save the price from flag and continue on.       **/
   /* *        - If price from flag is equal to 'I', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          invoice product item.                           **/
   /* *        - If price from flag is equal to 'P', then        **/
   /* *          select the appropriate claim price from the     **/
   /* *          product.                                        **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E     H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON  REASON                                   **/
   /* * -------- ------ -----------------------------------------**/
   /* * 04-10-90 CHELLM Added XQACD and XUMCD to the product key **/
   /* *                 when selecting invoice price overrides.  **/
   /* * 06-17-91 GDECKE EXPAND W04/W05 TABLE TO 1000 LINES.      **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O327"; /* Set current process name*/
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC") /* non-credit return*/
     /* price from is 'p' and price is 0*/
    CL0OW03.CLKPRCFF[CL0OW03X] = KL0OM010.CLKPRCFF[CLXLINEX];
    CL0OW03.CLKCLPRC[CL0OW03X] = KL0OM010.CLKCLPRC[CLXLINEX];
    return;
  end
  ;
  ;
  if (KL0OM010.CLKPRCFF[CLXLINEX] == "I"
   && CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL0OW03.CLKPRCFF[CL0OW03X] = "O"; /* force thru edit*/
  end
  ;
   /* If price from flag changed*/
  if (KL0OM010.CLKPRCFF[CLXLINEX] != CL0OW03.CLKPRCFF[CL0OW03X]
   || KL0OM010.CLKCLPRC[CLXLINEX] == 0
   || CL0OW05.CL0OWUMF[CL0OW05X] == "Y") /* XUM has changed 10-04-90*/
    ;
    if (KL0OM010.CLKPRCFF[CLXLINEX] == "E")
      CL0OW03.CLKPRCFF[CL0OW03X] = KL0OM010.CLKPRCFF[CLXLINEX];
    else
         /* ***************************/
         /* price must be from invoice*/
         /* ***************************/
      if (KL0OM010.CLKPRCFF[CLXLINEX] == "I")
        if (KL0OM010.IV0IVCID > 0 /* and invoice number exists*/
         && CL0OW06.YITCD[CL0OWINX] == "I") /* an I.B.M. invoice*/
          IV4REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
          IV4REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
          IV4REC.OP2LNINB = CL0OW03.OP2LNINB[CL0OW03X];
          IV4REC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
          ;
          call "IO1130" ("S ", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes}; /* read*/
          ;
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
             /* look for price overrides*/
            ;
            if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
              CL6REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
              CL6REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
              CL6REC.XGPCD = CLAREC.XGPCD;
              CL6REC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
              CL6REC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
              CL6REC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
              CL6REC.XQACD = CL0OW04.XQACD[CL0OW05X];
              CL6REC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
              CL6REC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
              ;
              KL0OS95(); /* select set price override*/
              ;
              if (SQLCA.VAGen_SQLCODE == 100) /* found no size override*/
                call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes};
                CL6REC.SY5SZID = 0; /* look for product override*/
                ;
                KL0OS95(); /* select set price override*/
                ;
                if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
                 && CL6REC.CLHMEMNB > 0)    
                  IV4REC.IV4NUP = CL6REC.CL6OVPRC;
                  IV4REC.IV4GUP = CL6REC.CL6OVPRC;
                  KL0OM010.CLKPRCFF[CLXLINEX] = "O";
                  ;
                end
                ;
                call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
                ;
              else
                ;
                if (SQLCA.VAGen_SQLCODE == 0 /* found product override*/
                 && CL6REC.CLHMEMNB > 0)    
                  IV4REC.IV4NUP = CL6REC.CL6OVPRC;
                  IV4REC.IV4GUP = CL6REC.CL6OVPRC;
                  KL0OM010.CLKPRCFF[CLXLINEX] = "O";
                  ;
                end
                ;
                call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes};
                ;
              end
            end
            ;
            CL0OW03.CLNNTPRC[CL0OW03X] = IV4REC.IV4NUP;
            CL0OW03.CLNGRPRC[CL0OW03X] = IV4REC.IV4GUP;
            ;
            if (CL0OW01.IVANBLFL == "Y") /* net bill flag*/
              KL0OM010.IV4NUP[CLXLINEX] = IV4REC.IV4NUP;
              KL0OM010.CLKCLPRC[CLXLINEX] = IV4REC.IV4NUP;
              CL0OW03.CLKCLPRC[CL0OW03X] = IV4REC.IV4NUP;
            else
              KL0OM010.IV4NUP[CLXLINEX] = IV4REC.IV4GUP;
              KL0OM010.CLKCLPRC[CLXLINEX] = IV4REC.IV4GUP;
              CL0OW03.CLKCLPRC[CL0OW03X] = IV4REC.IV4GUP;
            end
            ;
            if (IV3REC.XUMCD == "R "
             || IV3REC.XUMCD == "L ")
              if (CL0OW05.XUMCD[CL0OW05X] == "01")
                KL0OS53(); /* use product size price*/
                if (IVAREC.IVANBLFL == "Y")
                  KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNNTPRC[CL0OW03X];
                  CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNNTPRC[CL0OW03X];
                else
                  KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNGRPRC[CL0OW03X];
                  CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNGRPRC[CL0OW03X];
                end
              else /* check the uom code, if changed, but not back*/
                   /* to original invoice uom, recalculate the price*/
                if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                  KL0OS55(); /* 11-12-90*/
                end
              end
            else /* check the uom code, if changed, but not back*/
                 /* to original invoice uom, recalculate the price*/
              if (IV3REC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
                KL0OS55(); /* 11-12-90*/
              end
            end
            ;
            ;
            CL0OW03.CLKPRCFF[CL0OW03X] = KL0OM010.CLKPRCFF[CLXLINEX];
          else
            KL0OM010.XXXERRID = "KL0O327"; /* Process name*/
            converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
            set KL0OM010.CLKPRCFF[CLXLINEX] cursor, modified, bold;
            CLXREC.CLXERRF = "Y";
            CL0OW03.CLNGRPRC[CL0OW03X] = 0;
          end
        else
          KL0OM010.XXXERRID = "KL0O327"; /* Process name*/
          converseLib.validationFailed(205); /* 'price from' not valid, no invoice*/
          set KL0OM010.CLKPRCFF[CLXLINEX] cursor, modified, bold;
          CLXREC.CLXERRF = "Y";
          CL0OW03.CLNGRPRC[CL0OW03X] = 0;
        end
        ;
      else
           /* ********************************/
           /* price is taken from the product*/
           /* ********************************/
        if (KL0OM010.CLKPRCFF[CLXLINEX] == "P")
          ;
          if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
            return; /* don't want to look up price for noncredit*/
          end
          ;
          if (CL0OW05.CL0OWPPF[CL0OW05X] == "Y") /* dealing with prepack*/
            CL0OW03.CLNNTPRC[CL0OW03X] = CL0OW04.CLKCLPRC[CL0OW05X];
            CL0OW03.CLNGRPRC[CL0OW03X] = CL0OW04.CLKCLPRC[CL0OW05X];
          else
            KL0OS53(); /* get size price*/
            ;
            /* check the uom code: if changed, but not changed*/
            /* back to the product value, recalculate the price*/
            if (SYCREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
              KL0OS55(); /* 11-12-90*/
            end
            ;
          end
          ;
          if (CL0OW03.CLNGRPRC[CL0OW03X] == 0
           && CL0OW03.CLNNTPRC[CL0OW03X] == 0)
            KL0OM010.XXXERRID = "KL0O327"; /* Process name*/
            converseLib.validationFailed(226); /* warn-prod price not found*/
            set KL0OM010.CLKCLPRC[CLXLINEX] cursor, bold;
            CLXREC.CLXERRF = "Y";
          else
            if (IVAREC.IVANBLFL == "Y")
              KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNNTPRC[CL0OW03X];
              CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNNTPRC[CL0OW03X];
            else
              KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNGRPRC[CL0OW03X];
              CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNGRPRC[CL0OW03X];
            end
            CL0OW03.CLKPRCFF[CL0OW03X] = KL0OM010.CLKPRCFF[CLXLINEX];
            ;
          end
        end
      end
    end
  end
  ;
  ;
end // end KL0O327

// calculation edit for ttl & UOM
Function KL0O328()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CALCUALTION EDITS FOR claim value total          **/
   /* *                                                          **/
   /* *    1) Calculate the claim value for the product.         **/
   /* *                                                          **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O328"; /* Set current process name*/
  ;
  ;
   /* *************************************/
    /* Calculate the claim value.*/
   /* *************************************/
  ;
  CL0OW01.CL0OWWK1 = CL0OW03.CLKAUTHQ[CL0OW03X]; /* set wk values*/
  CL0OW01.CL0OWWK2 = CL0OW03.CLMTRTSQ[CL0OW03X];
  CL0OW01.CL0OWWK3 = CL0OW03.CLKCLPRC[CL0OW03X];
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
    CL0OW01.CL0OWSCV = CL0OW01.CL0OWSCV - CL0OW03.CLAESTVL[CL0OW03X];
    CL0OW03.CLAESTVL[CL0OW03X] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK3;
    CL0OW01.CL0OWSCV = CL0OW01.CL0OWSCV + CL0OW03.CLAESTVL[CL0OW03X];
    KL0OM010.CLAESTVL[CLXLINEX] = CL0OW03.CLAESTVL[CL0OW03X];
  else /* If deleting line*/
    ;
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "X")
      CL0OW01.CL0OWSCQ = CL0OW01.CL0OWSCQ - CL0OW03.CLKRQTQ[CL0OW03X];
      CL0OW01.CL0OWSAQ = CL0OW01.CL0OWSAQ - CL0OW03.CLKAUTHQ[CL0OW03X];
      CL0OW01.CL0OWSCV = CL0OW01.CL0OWSCV - CL0OW03.CLAESTVL[CL0OW03X];
    end
  end
  ;
  ;
   /* update total for summary screen (cl0om001)*/
  ;
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ - CL0OW04.CLKRQTQ[CL0OW05X];
  CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ - CL0OW04.CLKAUTHQ[CL0OW05X];
  CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV - CL0OW05.CLAESTVL[CL0OW05X];
  ;
  CL0OW04.CLKRQTQ[CL0OW05X] = CL0OW01.CL0OWSCQ;
  CL0OW04.CLKAUTHQ[CL0OW05X] = CL0OW01.CL0OWSAQ;
  CL0OW05.CLAESTVL[CL0OW05X] = CL0OW01.CL0OWSCV;
  ;
  CL0OW01.CL0OWTCQ = CL0OW01.CL0OWTCQ + CL0OW04.CLKRQTQ[CL0OW05X];
  CL0OW01.CL0OWTAQ = CL0OW01.CL0OWTAQ + CL0OW04.CLKAUTHQ[CL0OW05X];
  CL0OW01.CL0OWTCV = CL0OW01.CL0OWTCV + CL0OW05.CLAESTVL[CL0OW05X];
  ;
end // end KL0O328

// validate selection codes
Function KL0O329()
   /* *************************************************************/
   /* *                                                          **/
   /* *           VALIDATE THE SELECTION CODES                   **/
   /* *                                                          **/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON    REASON                                 **/
   /* * -------- ------   ---------------------------------------**/
   /* * 05-31-90 CHELLM   Added selection edit for items not on  **/
   /* *                   the invoice.  Only allow D,NC,X        **/
   /* * 10-04-90 CHELLM   Added edits for Quality and UOM        **/
   /* * 06-17-91 GDECKE   EXPAND W04/W05 TABLE TO 1000 LINES.    **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O329"; /* Set current process name*/
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == " ")
    KL0OM010.CL0OMSEL[CLXLINEX] = KL0OM010.CL0OMTRN[CLXLINEX];
  end
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "A"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "AA"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "NC"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "D"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "X"
   || KL0OM010.CL0OMSEL[CLXLINEX] == " ")
     /* next sentence*/
  else
    converseLib.validationFailed(8); /* selection is not valid*/
    KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
    CLXREC.CLXERRF = "Y";
    set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "X")
    if (CL0OW03.CL0OWSFL[CL0OW03X] == "I") /* record from invoice*/
      converseLib.validationFailed(459); /* cannot delete invoice products*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
      set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
    /* edit select code for products not on the invoice 05-31-90*/
  if (CL0OW03.CL0OWSFL[CL0OW03X] != "I") /* record not from invoice*/
    /* IF CL0OM010.CL0OMSEL(CLXLINEX) EQ 'A';commented out to match*/
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "AA" /* map 001 and map 005*/
     || KL0OM010.CL0OMSEL[CLXLINEX] == "SA" 
     || KL0OM010.CL0OMSEL[CLXLINEX] == "C")
      converseLib.validationFailed(636); /* not allowed for items not invc'ed*/
      CLXREC.CLXERRF = "Y"; /* Set error switch*/
      KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
      set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "A" /* can't auth*/
   /* 072089 chng SEL to TRN*/
   && KL0OM010.CL0OMTRN[CLXLINEX] == "NC") /* non-credit return*/
    converseLib.validationFailed(8); /* selection not valid*/
    CLXREC.CLXERRF = "Y"; /* Set error switch*/
    KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
    set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
    if (CL0OW03.CL0OWSFL[CL0OW03X] == "I" /* record from invoice*/
     /* 072089 also check 'R'*/
     || CL0OW03.CL0OWSFL[CL0OW03X] == "R") /* record from RA item*/
      if (KL0OM010.CL0OMTRN[CLXLINEX] == "NC") /* 072089 skip err if both NC*/
        /* next sentence*/
      else
        converseLib.validationFailed(8); /* selection not valid*/
        CLXREC.CLXERRF = "Y"; /* Set error switch*/
        KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
        set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
        return;
      end
    end
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(481); /* select code not valid for claim type*/
      KL0OM010.XXXERRID = "KL0O329";
      CLXREC.CLXERRF = "Y";
      set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW03.CLNGRPRC[CL0OW03X] = 0;
    CL0OW03.CLNNTPRC[CL0OW03X] = 0;
    CL0OW03.CLKCLPRC[CL0OW03X] = 0;
    CL0OW03.CLKPRCFF[CL0OW03X] = " ";
    /* MOVE 0 TO CL0OM010.CLKCLPRC(CL0OW03X);*/
    /* MOVE ' ' TO CL0OM010.CLKPRCFF(CL0OW03X);*/
    CL0OW05.CL0OWFPR[CL0OW05X] = "Y"; /* freeze claim price*/
    ;
  end
  ;
  ;
   /* claim price may or may not vary*/
  CL0OW03.CL0OWFPR[CL0OW03X] = "N";
  ;
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "C"
   || KL0OM010.CL0OMSEL[CLXLINEX] == "D")
    ;
    if (CLAREC.YCTCD == "RTS")
       /* next sentence*/
    else
      converseLib.validationFailed(481); /* select code not valid for claim type*/
      KL0OM010.XXXERRID = "KL0O329";
      CLXREC.CLXERRF = "Y";
      set KL0OM010.CL0OMSEL[CLXLINEX] cursor, bold;
      return;
    end
    ;
    CL0OW03.CL0OWFPR[CL0OW03X] = "Y";
    ;
  end
  ;
   /* 072089 add for use in CL0O335*/
     /* note that 'aa' was expanded to 'a ' in cl0o323*/
  CL0OW03.CLKCRFL[CL0OW03X] = " ";
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC") /* new action*/
    CL0OW03.CLKCRFL[CL0OW03X] = "N";
  else
    if (KL0OM010.CL0OMSEL[CLXLINEX] == "A ")
      CL0OW03.CLKCRFL[CL0OW03X] = "Y";
    else
      if (KL0OM010.CL0OMTRN[CLXLINEX] == "NC") /* old action*/
        CL0OW03.CLKCRFL[CL0OW03X] = "N";
      else
        if (KL0OM010.CL0OMTRN[CLXLINEX] == "A ")
          CL0OW03.CLKCRFL[CL0OW03X] = "Y";
        end
      end
    end
  end
  ;
   /* added 10-04-90*/
   /* ************************************************************/
   /* *                edit quality code*/
   /* ************************************************************/
  if (KL0OM010.XQACD != CL0OW04.XQACD[CL0OW05X]
   && CL0OW04.XQACD[CL0OW05X] != " ")
    if (KL0OM010.XQACD in XQATBL.XQACD)
      CL0OW04.XQACD[CL0OW05X] = KL0OM010.XQACD;
      CL0OW01.CL0OWMSG = "    XQA OVERRIDE"; /* 11-12-90*/
    else
      set KL0OM010.XQACD cursor, modified, bold;
      converseLib.validationFailed(468);
      CLXREC.CLXERRF = "Y";
      KL0OM010.XXXERRID = "KL0O329"; /* Process name*/
      return;
    end
  end
  ;
  ;
   /* added 10-04-90*/
   /* ************************************************************/
   /* *              edit unit of measure code*/
   /* ************************************************************/
  ;
  if (KL0OM010.XUMCD != CL0OW05.XUMCD[CL0OW05X]
   && CL0OW05.XUMCD[CL0OW05X] != " ")
    if (KL0OM010.XUMCD in XUMTBL.XUMCD)
      CL0OW05.XUMCD[CL0OW05X] = KL0OM010.XUMCD;
      CL0OW05.CL0OWUMF[CL0OW05X] = "Y";
      CL0OW01.CL0OWMSG = "    XUM OVERRIDE"; /* 11-12-90*/
    else
      CL0OW05.CL0OWUMF[CL0OW05X] = "N";
      set KL0OM005.XUMCD[CLXLINEX] cursor, modified, bold;
      converseLib.validationFailed(409);
      CLXREC.CLXERRF = "Y";
      KL0OM001.XXXERRID = "KL0O329"; /* Process name*/
      return;
    end
  end
  ;
  ;
  ;
   /* move selection from map to working storage*/
  if (CLXREC.CLXERRF == "N")
    CL0OW03.CL0OMSEL[CL0OW03X] = KL0OM010.CL0OMSEL[CLXLINEX];
  end
  ;
  ;
end // end KL0O329

// process screen
Function KL0O330()
   /* **************************************/
   /* process screen*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O330";
  ;
   /* only want to update under following pfkeys or enter*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf2
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf18)
     /* next sentence*/
  else
    return;
  end
  ;
  ;
  CLXREC.CLXLINEX = 1;
  ;
   /* get current date and time*/
  ;
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  CL0OW01.CL0OWUPA = "N"; /* init update-clarec-flag*/
  CL0OW01.CL0OWSWR = "Y"; /* init show-warnings-to-user-flag*/
  ;
  ;
  if (CL0OW01.CL0OWAAF == "Y") /* authorize all products*/
    CL0OW01.CL0OWAAF = "N"; /* reset the flag*/
  end
  ;
  ;
  CL0OW01.CL0OW03X = 1;
  ;
  while (CL0OW01.CL0OW03X <= CL0OW01.CL0OWNOS) /* look at all sizes*/
    ;
    if (CL0OW03.CL0OWUPK[CL0OW03X] != " ") /* update clkrec*/
      KL0O331(); /* add, change or delete R/A itm info*/
      KL0O335(); /* add or change ra summary info*/
    end
    ;
    if (CL0OW03.CL0OWUPR[CL0OW03X] != " ") /* update clrrec*/
      KL0O332();
                                   /* add, change or delete adjustment info*/
    end
    ;
    if (CL0OW03.CL0OWUPK[CL0OW03X] != " " /* update clkrec*/
     || CL0OW03.CL0OWUPR[CL0OW03X] != " ") /* update clrrec*/
      CL0OW01.CL0OWUPA = "Y";
      CL0OW01.CL0OWSWR = "N"; /* reshow screen to user*/
      CLXREC.CLXBLDSC = "Y"; /* rebuild screen with new values*/
      KL0O133(); /* add or change ra header info*/
    end
    ;
    CL0OW03.CL0OWUPK[CL0OW03X] = " ";
    CL0OW03.CL0OWUPR[CL0OW03X] = " ";
    ;
    CL0OW01.CL0OW03X = CL0OW01.CL0OW03X + 1;
    CLXREC.CLXLINEX = CLXREC.CLXLINEX + 1;
  end
  ;
  ;
  if (CL0OW01.CL0OWUPA == "Y")
    KL0O134(); /* see if claim header needs to be updated*/
  end
  ;
  ;
end // end KL0O330

// add,change,delete R/A items
Function KL0O331()
   /* **************************************/
   /* add, change, delete R/A items*/
  ;
   /* *************************************************************/
   /* *        M A I N T E N A N C E      H I S T O R Y          **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON   REASON                                  **/
   /* * -------- ------  ----------------------------------------**/
   /* * 10-04-90 CHELLM  Added XUMCD and XQACD to the Select key **/
   /* *                  when deleting rows from DCLAIM.VRAITM01.**/
   /* * 06-17-91 GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.     **/
   /* * 03-13-92 GDECKE  MARCH DB2 TABLE CHANGES                 **/
   /* * 04-13-92 twatso  april DB2 TABLE CHANGES                 **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O331";
  ;
  ;
  CLKREC.CLACLMNB = KL0OM010.CLACLMNB;
  CLKREC.IV0IVCID = KL0OM010.IV0IVCID;
  CLKREC.XGPCD = KL0OM010.XGPCD;
  CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLKREC.XDMCD = KL0OM010.XDMCD;
  CLKREC.XUMCD = KL0OM010.XUMCD;
  CLKREC.XQACD = KL0OM010.XQACD;
  CLKREC.CLKCRFL = CL0OW03.CLKCRFL[CL0OW03X];
  CLKREC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
  ;
  ;
  call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* delete*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
  ;
  if (CL0OW03.CL0OWUPK[CL0OW03X] == "X") /* delete clkrec*/
    if (CL0OW03.CL0OWUPR[CL0OW03X] == " ") /* not change to diff rec typ*/
      if (CL0OW03.CL0OMTRN[CL0OW03X] == "NC")
        CL0OW03.CL0OWSFL[CL0OW03X] = " "; /* came from user entry*/
      else
        CL0OW03.CL0OWSFL[CL0OW03X] = "I"; /* came from ivc*/
      end
       /* zero out non-needed fields*/
      CL0OW03.CLKRQTQ[CL0OW03X] = 0;
      CL0OW03.CLKAUTHQ[CL0OW03X] = 0;
      CL0OW03.CLAESTVL[CL0OW03X] = 0;
      CL0OW03.CL0OMTRN[CL0OW03X] = " ";
      CL0OW03.CL0OMSEL[CL0OW03X] = " ";
      CL0OW03.CL0OWFPR[CL0OW03X] = " "; /* freeze price*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " ";
                                   /* not worked at prd or sz lvl*/
      CL0OW03.CLKCRFL[CL0OW03X] = " "; /* 072089 add*/
    end
    return; /* have deleted product*/
  end
  ;
  ;
  CL0OW03.CL0OWSFL[CL0OW03X] = "R"; /* record now comes from ra itm*/
  CL0OW05.CL0OWLVL[CL0OW05X] = "S"; /* prd worked at size level*/
  CL0OW03.CL0OMTRN[CL0OW03X] = CL0OW03.CL0OMSEL[CL0OW03X];
  CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW03.CL0OMSEL[CL0OW03X];
  CL0OW03.CL0OMSEL[CL0OW03X] = " ";
  CL0OW05.CL0OWFPR[CL0OW05X] = CL0OW03.CL0OWFPR[CL0OW03X]; /* frz prc*/
  CLKREC.CLACLMNB = KL0OM010.CLACLMNB;
  CLKREC.XGPCD = KL0OM010.XGPCD;
  CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLKREC.XDMCD = KL0OM010.XDMCD;
  CLKREC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
  CLKREC.CLKNBRSZ = 0; /* zero since this is size level not*/
                                   /* product*/
  CLKREC.CLKWHSXF = CL0OW05.CLKWHSXF[CL0OW05X];
   /* 072089 use product summary instead of size:*/
  CLKREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
  CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLKREC.CLKCLPRC = CL0OW03.CLKCLPRC[CL0OW03X];
  CLKREC.OP2PRCVF = CL0OW04.OP2PRCVF[CL0OW05X];
  CLKREC.CLKPRCFF = CL0OW03.CLKPRCFF[CL0OW03X];
  CLKREC.YCECD = CL0OW05.YCECD[CL0OW05X];
  ;
  CLKREC.CLKRQTQ = CL0OW03.CLKRQTQ[CL0OW03X];
  if (CLKREC.CLKRQTQ < 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * -1;
  end
  ;
  CLKREC.CLKAUTHQ = CL0OW03.CLKAUTHQ[CL0OW03X];
  if (CLKREC.CLKAUTHQ < 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * -1;
  end
  ;
  CLKREC.CLJRDIND = "R"; /* return to stock authorization*/
  ;
   /* 072089 no change to code-alredy used ivc on 'nc'*/
          /* strange that this is only place in CL0O.*/
  CLKREC.IV0IVCID = KL0OM010.IV0IVCID;
  CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  if (CLKREC.IV0PARTN == " ")
    CLKREC.IV0PARTN = "0";
  end
  ;
   /* 072089 drop if-end, put in move*/
  CLKREC.CLKCRFL = CL0OW03.CLKCRFL[CL0OW03X];
   /* IF CL0OW03.CL0OMTRN(CL0OW03X) EQ 'NC'  ; no credit return*/
    /* ;  072089 no change to code-alredy used ivc on 'nc'*/
    /* ;MOVE 0 TO CLKREC.IV0IVCID;*/
    /* ;MOVE '0' TO CLKREC.IV0PARTN;*/
    /* MOVE 'N' TO CLKREC.CLKCRFL;*/
    /* MOVE 'N' TO CL0OW03.CLKCRFL(CL0OW03X);*/
   /* ELSE ;*/
    /* MOVE 'Y' TO CLKREC.CLKCRFL;*/
    /* MOVE 'Y' TO CL0OW03.CLKCRFL(CL0OW03X);*/
   /* END ;*/
  ;
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
end // end KL0O331

// add,change,delete adjustments
Function KL0O332()
   /* **************************************/
   /* add, change, delete adjustments*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E      H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID   REASON                              **/
   /* * --------  --------   ------------------------------------**/
   /* * 06-17-91   GDECKE    EXPAND W04/W05 TABLE TO 1000 LINES. **/
   /* * 03-13-92   GDECKE    MARCH DB2 TABLE CHANGES             **/
   /* * 04-13-92   twatso    april DB2 TABLE CHANGES             **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O332";
  ;
  ;
  if (CL0OW03.CLICRDFL[CL0OW03X] == " ") /* contains old value*/
    CLRREC.CLICRDFL = CL0OW03.CL0OMTRN[CL0OW03X];
  else
    CLRREC.CLICRDFL = CL0OW03.CLICRDFL[CL0OW03X];
  end
  ;
  CLRREC.CLACLMNB = KL0OM010.CLACLMNB;
  CLRREC.CLHSEQNB = 1;
  CLRREC.XGPCD = KL0OM010.XGPCD;
  CLRREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLRREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLRREC.XDMCD = KL0OM010.XDMCD;
  CLRREC.IV0IVCID = KL0OM010.IV0IVCID;
  CLXREC.CLXORDIV = KL0OM010.IV0IVCID;
  CLRREC.IV0PARTN = CLXREC.CLXPARTN;
  CLRREC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
  CLRREC.OP2LNINB = CL0OW03.OP2LNINB[CL0OW03X];
  ;
  ;
  call "IO1370" ("D ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "DELETE";
    XPCL010();
  end
  ;
      /* *****************************************/
       /* summarize price data for summary record*/
      /* *****************************************/
  ;
   /* need to decide what varies between sizes*/
  CL0OW01.CL0OWIXM = 1;
  CL0OW04.OP2PRCVF[CL0OW05X] = "N";
  CL0OW05.CL0OMTRN[CL0OW05X] = " ";
  CL0OW04.CLKCLPRC[CL0OW05X] = 0;
   /* only have to look at tran code (not select code also)*/
   /* to decide what to show on summary tran code*/
  CL0OW03.CL0OMTRN[CL0OW03X] = CL0OW03.CL0OMSEL[CL0OW03X];
  ;
  while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOS) /* for all sizes*/
    ;
    if (CL0OW03.CLKAUTHQ[CL0OWIXM] != 0) /* size is authorized*/
      ;
      if (CL0OW03.CL0OMSEL[CL0OWIXM] != "X") /* not deleting size*/
        ;
        if (CL0OW04.OP2PRCVF[CL0OW05X] == "N") /* need to keep looking*/
          if (CL0OW04.CLKCLPRC[CL0OW05X] == 0) /* first time thru*/
            CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW03.CLKCLPRC[CL0OWIXM];
            CL0OW04.CLKPRCFF[CL0OW05X] = CL0OW03.CLKPRCFF[CL0OWIXM];
          else
             /* checking for differing prices*/
            if (CL0OW03.CLKCLPRC[CL0OWIXM] != CL0OW04.CLKCLPRC[CL0OW05X]
             && CL0OW03.CLKCLPRC[CL0OWIXM] != 0) /* price gt 0*/
              CL0OW04.OP2PRCVF[CL0OW05X] = "Y";
              CL0OW04.CLKCLPRC[CL0OW05X] = 0; /* dont show price if var*/
            end
          end
        end
        ;
         /* look for variable transaction code*/
        ;
        if (CL0OW05.CL0OMTRN[CL0OW05X] == " ") /* first time thru*/
          CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW03.CL0OMTRN[CL0OWIXM];
        else
          if (CL0OW03.CL0OMSEL[CL0OWIXM] != " ")
            if (CL0OW03.CL0OMSEL[CL0OWIXM] != CL0OW05.CL0OMTRN[CL0OW05X])
              CL0OW05.CL0OMTRN[CL0OW05X] = "V";
            end
          else /* blank selection field*/
            if (CL0OW03.CL0OMTRN[CL0OWIXM] != CL0OW05.CL0OMTRN[CL0OW05X])
              if (CL0OW03.CL0OMTRN[CL0OWIXM] != " ")
                CL0OW05.CL0OMTRN[CL0OW05X] = "V";
              end
            end
          end
        end
      end
    end
    ;
    CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1;
    ;
  end
  ;
  ;
  if (CL0OW03.CL0OWUPR[CL0OW03X] == "X") /* delete ra item*/
    if (CL0OW03.CL0OWUPK[CL0OW03X] == " ")
                                   /* not change to another record type*/
      CL0OW03.CLKRQTQ[CL0OW03X] = 0;
      CL0OW03.CLKAUTHQ[CL0OW03X] = 0;
      CL0OW03.CLAESTVL[CL0OW03X] = 0;
      CL0OW03.CL0OMSEL[CL0OW03X] = " ";
      CL0OW03.CL0OMTRN[CL0OW03X] = " ";
      CL0OW03.CL0OWFPR[CL0OW03X] = " "; /* price not frozen*/
      CL0OW05.CL0OWLVL[CL0OW05X] = " "; /* no level being worked*/
      CL0OW03.CL0OWSFL[CL0OW03X] = "I"; /* now from invoice record*/
      return; /* have deleted record*/
    else
      return;
    end
  end
  ;
  ;
  CL0OW05.CL0OWLVL[CL0OW05X] = "S"; /* prd worked at size level*/
  CL0OW03.CL0OWSFL[CL0OW03X] = "A"; /* record now from adj record*/
  CL0OW05.CL0OWFPR[CL0OW05X] = CL0OW03.CL0OWFPR[CL0OW03X]; /* frz prc*/
   /* vary trn code on summary screen 1/89*/
   /* MOVE CL0OW03.CL0OMSEL(CL0OW03X) TO CL0OW05.CL0OMTRN(CL0OW05X*/
  CLRREC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
  CLRREC.XQACD = CL0OW04.XQACD[CL0OW05X];
  CLRREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
  CLRREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
  CLRREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
  CLRREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
  CLRREC.CLNGRPRC = CL0OW03.CLKCLPRC[CL0OW03X];
  CLRREC.CLNNTPRC = CL0OW03.CLKCLPRC[CL0OW03X];
  CLRREC.CLKPRCFF = CL0OW03.CLKPRCFF[CL0OW03X];
  CLRREC.XCOCD = " ";
  if (CL0OW03.CL0OMTRN[CL0OW03X] == "C")
    CLRREC.CLRRQTQ = CL0OW03.CLKRQTQ[CL0OW03X] * -1; /* get positive value*/
    CLRREC.CLRCLMQ = CL0OW03.CLKAUTHQ[CL0OW03X] * -1; /* get positive value*/
  else
    CLRREC.CLRRQTQ = CL0OW03.CLKRQTQ[CL0OW03X];
    CLRREC.CLRCLMQ = CL0OW03.CLKAUTHQ[CL0OW03X];
  end
  ;
  ;
    /* need to update product array (cl0ow05) so values for sizes*/
    /* will appear correctly on summary screen (cl0om001)*/
  ;
  CL0OW05.CLICRDFL[CL0OW05X] = CL0OW03.CL0OMSEL[CL0OW03X];
  CLRREC.CLICRDFL = CL0OW03.CL0OMSEL[CL0OW03X];
  CL0OW03.CL0OMSEL[CL0OW03X] = " ";
  CL0OW05.CL0OWSFL[CL0OW05X] = "A"; /* record now from adj record*/
  ;
  ;
  CLRREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLRREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
  ;
  call "IO1370" ("A ", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "ADD";
    XPCL010();
  end
  ;
  ;
end // end KL0O332

// add,change,delete ra summary
Function KL0O335()
   /* *************************************************************/
   /* *                                                          **/
   /* *           SELECT THE DCLAIMS.VRAitm01 summary row        **/
   /* *                                                          **/
   /* *************************************************************/
   /* *         M A I N T E N A N C E      H I S T O R Y         **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON   REASON                                  **/
   /* * -------- ------  ----------------------------------------**/
   /* * 10-04-90 CHELLM  Added XUMCD and XQACD the product key   **/
   /* *                  for processing DCLAIM.VRAITM01 rows.    **/
   /* * 06-17-91 GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.     **/
   /* * 03-13-92 GDECKE  MARCH DB2 TABLE CHANGES.                **/
   /* * 04-13-92 twatso  april DB2 TABLE CHANGES.                **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O335"; /* Set current process name*/
  ;
  ;
  set CLKREC empty;
  CLKREC.CLACLMNB = KL0OM010.CLACLMNB;
  CLKREC.IV0IVCID = KL0OM010.IV0IVCID;
  CLKREC.XGPCD = KL0OM010.XGPCD;
  CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLKREC.XDMCD = KL0OM010.XDMCD;
  CLKREC.XQACD = KL0OM010.XQACD;
  CLKREC.XUMCD = KL0OM010.XUMCD;
  CLKREC.CLKCRFL = "*"; /* 072089 there is only 1 prod summ,*/
   /* but size is not in 'S1', so need to read for size=0.*/
  ;
   /* 072089 change 'S ' to 'S1' since don't know CR flg value.*/
     /* Assume first row is size=0, since CLKCRFL = M or N or Y*/
     /* (sort is by CLKCRFL, not size)*/
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  CLKREC.SY5SZID = 9; /* force first 'N1' read*/
  while (SQLCA.VAGen_SQLCODE == 0
   && CLKREC.SY5SZID != 0)
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "SELECT";
      XPCL010();
    end
  end
  ;
  CL0OW01.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE; /* hold to use in 'A'/'U'*/
  if (SQLCA.VAGen_SQLCODE == 0
   && CLKREC.SY5SZID == 0)
    CL0OW01.CLKCRFL = CLKREC.CLKCRFL; /* hold, use in 'A'/'U'*/
  else
    CL0OW01.CLKCRFL = " ";
  end
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (CL0OW03.CL0OWUPK[CL0OW03X] == "A") /* adding size record*/
    CLKREC.CLKNBRSZ = CLKREC.CLKNBRSZ + 1;
  else
    if (CL0OW03.CL0OWUPK[CL0OW03X] == "X") /* deleting size record*/
      CLKREC.CLKNBRSZ = CLKREC.CLKNBRSZ - 1;
      if (CLKREC.CLKNBRSZ < 0) /* precautionary step*/
        CLKREC.CLKNBRSZ = 0;
      end
    end
  end
  ;
      /* *****************************************/
       /* summarize data for summary record*/
      /* *****************************************/
  ;
  if (CL0OW03.CL0OWUPK[CL0OW03X] != " ") /* changing record*/
     /* need to decide if price varies between sizes*/
    CL0OW01.CL0OWIXM = 1;
    CLKREC.OP2PRCVF = "N";
    CL0OW05.CL0OMTRN[CL0OW05X] = " ";
    CLKREC.CLKRQTQ = 0;
    CLKREC.CLKAUTHQ = 0;
    ;
    while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOS) /* for all sizes*/
      ;
      if (CL0OW03.CLKAUTHQ[CL0OWIXM] != 0) /* size has price*/
        ;
        if (CL0OW03.CL0OMSEL[CL0OWIXM] != "X") /* not deleting prd*/
          ;
           /* look for variable pricing*/
          ;
          if (CLKREC.OP2PRCVF == "N") /* need to keep looking*/
            if (CLKREC.CLKCLPRC == 0) /* first time thru*/
              CLKREC.CLKCLPRC = CL0OW03.CLKCLPRC[CL0OWIXM];
              CLKREC.CLKPRCFF = CL0OW03.CLKPRCFF[CL0OWIXM];
            else
              if (CL0OW03.CLKCLPRC[CL0OWIXM] != CLKREC.CLKCLPRC
               && CL0OW03.CLKCLPRC[CL0OWIXM] != 0)
                CLKREC.OP2PRCVF = "Y";
                CLKREC.CLKCLPRC = 0; /* dont show any price if var*/
                /* MOVE 99 TO CL0OW01.CL0OWIXM;force end of loop*/
              end
            end
          end
          ;
           /* look for variable transaction code*/
          ;
          if (CL0OW05.CL0OMTRN[CL0OW05X] == " ") /* first time thru*/
            CL0OW05.CL0OMTRN[CL0OW05X] = CL0OW03.CL0OMTRN[CL0OWIXM];
          else
            if (CL0OW03.CL0OMSEL[CL0OWIXM] != " ")
              if (CL0OW03.CL0OMSEL[CL0OWIXM] != CL0OW05.CL0OMTRN[CL0OW05X])
                CL0OW05.CL0OMTRN[CL0OW05X] = "M"; /* 072089 V to M*/
              end
            else /* blank selection field*/
              if (CL0OW03.CL0OMTRN[CL0OWIXM] != CL0OW05.CL0OMTRN[CL0OW05X])
                if (CL0OW03.CL0OMTRN[CL0OWIXM] != " ")
                  CL0OW05.CL0OMTRN[CL0OW05X] = "M"; /* 072089 V to M*/
                end
              end
            end
          end
          ;
           /* look for variable return auth credit code*/
          ;
           /* 'nc' and 'a' are only codes used to determine no credit flg*/
           /* 072089 add if-end. Changed CL0O329 to set W03.CLKCRFL(03x).*/
          if (CL0OW05.CLKCRFL[CL0OW05X] == " ") /* first time thru*/
            CL0OW05.CLKCRFL[CL0OW05X] = CL0OW03.CLKCRFL[CL0OWIXM];
          else
            if (CL0OW03.CLKCRFL[CL0OWIXM] != CL0OW05.CLKCRFL[CL0OW05X])
              CL0OW05.CLKCRFL[CL0OW05X] = "M"; /* mixed 'A', 'NC'*/
            end
          end
           /* 072089 drop below, add above:*/
          /* IF CL0OW03.CL0OMSEL(CL0OWIXM) EQ 'A'; credit*/
            /* OR CL0OW03.CL0OMSEL(CL0OWIXM) EQ 'NC'; no credit*/
            /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ ' '; first time thru*/
              /* IF CL0OW03.CL0OMSEL(CL0OWIXM) EQ 'A';*/
                /* MOVE 'Y' TO CL0OW05.CLKCRFL(CL0OW05X);*/
              /* ELSE                ; selection equals 'nc'*/
                /* MOVE 'N' TO CL0OW05.CLKCRFL(CL0OW05X);*/
              /* END ;*/
            /* ELSE ;*/
           /* IF CL0OW03.CL0OMSEL(CL0OWIXM) NE CL0OW05.CLKCRFL(CL0OW05X);*/
                /* MOVE 'm' TO CL0OW05.CLKCRFL(CL0OW05X); 072089 V to M*/
              /* END ;*/
            /* END ;*/
          /* ELSE ;*/
          ;
           /* no value in selection field, need to look at tran code*/
          ;
          /* IF CL0OW03.CL0OMSEL(CL0OWIXM) EQ ' ';*/
            /* IF CL0OW03.CL0OMTRN(CL0OWIXM) EQ 'A';  credit*/
              /* OR CL0OW03.CL0OMTRN(CL0OWIXM) EQ 'NC';  no credit*/
              /* IF CL0OW05.CLKCRFL(CL0OW05X) EQ ' '; first time thru*/
                /* IF CL0OW03.CL0OMTRN(CL0OWIXM) EQ 'A';*/
                  /* MOVE 'Y' TO CL0OW05.CLKCRFL(CL0OW05X);*/
                /* ELSE            ; selection equals 'nc'*/
                  /* MOVE 'N' TO CL0OW05.CLKCRFL(CL0OW05X);*/
                /* END ;*/
              /* ELSE ;*/
          /* IF CL0OW03.CL0OMTRN(CL0OWIXM) NE CL0OW05.CLKCRFL(CL0OW05X);*/
                  /* MOVE 'm' TO CL0OW05.CLKCRFL(CL0OW05X); 072089 V to M*/
                /* END ;*/
              /* END ;*/
            /* END ;*/
          /* END ;*/
          /* END ;*/
          ;
           /* total authorized quantity*/
          ;
          if (CL0OW03.CL0OMTRN[CL0OWIXM] == "A"  /* size is authorized*/
           || CL0OW03.CL0OMSEL[CL0OWIXM] == "A"  /* size is authorized*/
           || CL0OW03.CL0OMTRN[CL0OWIXM] == "NC" /* size is authorized*/
           || CL0OW03.CL0OMSEL[CL0OWIXM] == "NC") /* size is authorized*/
            CLKREC.CLKRQTQ = CLKREC.CLKRQTQ + CL0OW03.CLKRQTQ[CL0OWIXM];
            CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ + CL0OW03.CLKAUTHQ[CL0OWIXM];
          end
          ;
          ;
        end
      end
      CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1;
    end
  end
  ;
  ;
       /* ********************/
        /* deleting summary*/
       /* ********************/
  ;
  if (CLKREC.CLKNBRSZ == 0) /* have no size to show*/
    call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      CL0OW05.CL0OMSEL[CL0OW05X] = "X";
      CL0OW04.CLKRQTQ[CL0OW05X] = 0;
      CL0OW04.CLKAUTHQ[CL0OW05X] = 0;
      CL0OW05.CLAESTVL[CL0OW05X] = 0;
      CL0OW04.OP2PRCVF[CL0OW05X] = " ";
      CL0OW05.CL0OWLVL[CL0OW05X] = " ";
      CL0OW05.CL0OMSEL[CL0OW05X] = " ";
      CL0OW05.CLKCRFL[CL0OW05X] = " ";
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "DELETE";
      XPCL010();
    end
    return;
  end
  ;
   /* 072089 add if-end to delete prod summry if CR fl changed*/
  if (CL0OW01.VAGen_SQLCODE == 0
   && CL0OW01.CLKCRFL != CL0OW05.CLKCRFL[CL0OW05X]) /* chngd CR flg*/
    call "IO1280" ("D ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "DELETE";
      XPCL010();
    end
  end
  ;
  ;
       /* ***************************/
        /* adding/updating  summary*/
       /* ***************************/
  ;
  CL0OW05.CL0OWFPR[CL0OW05X] = CL0OW03.CL0OWFPR[CL0OW03X]; /* frz price*/
  CL0OW04.OP2PRCVF[CL0OW05X] = CLKREC.OP2PRCVF;
  CL0OW05.CLKNBRSZ[CL0OW05X] = CLKREC.CLKNBRSZ;
  CL0OW04.CLKCLPRC[CL0OW05X] = CLKREC.CLKCLPRC;
  CL0OW04.CLKPRCFF[CL0OW05X] = CLKREC.CLKPRCFF;
         /* calculated above*/
   /* MOVE CL0OW04.CLKRQTQ(CL0OW05X) TO CLKREC.CLKRQTQ;*/
   /* MOVE CL0OW04.CLKAUTHQ(CL0OW05X) TO CLKREC.CLKAUTHQ;*/
   /* cl0ow05.claestvl is calculated in cl0o328*/
  if (CLKREC.CLKRQTQ < 0)
    CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * -1;
  end
  ;
  if (CLKREC.CLKAUTHQ < 0)
    CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * -1;
  end
  ;
  CLKREC.CLKCRFL = CL0OW05.CLKCRFL[CL0OW05X];
  ;
  CLKREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  CLKREC.ZZZCHGTM = TA2REC.TA2TIMHM;
   /* zzzchgct is initialized to zero in the iomod*/
  ;
   /* 072089 need to restore 'N1' sqlcode after close of set*/
  SQLCA.VAGen_SQLCODE = CL0OW01.VAGen_SQLCODE; /* 072089*/
   /* if changed CR flg, then orig deleted above and need to add*/
  if (CL0OW01.VAGen_SQLCODE == 0
   && CL0OW01.CLKCRFL != CL0OW05.CLKCRFL[CL0OW05X])
    SQLCA.VAGen_SQLCODE = 100;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* need to add record*/
    CL0OW05.CL0OWSFL[CL0OW05X] = "R"; /* record now comes from ra itm*/
    CL0OW05.CL0OWLVL[CL0OW05X] = "S"; /* prd worked at size level*/
    CL0OW05.CL0OMSEL[CL0OW05X] = " ";
    CLKREC.CLACLMNB = KL0OM010.CLACLMNB;
    CLKREC.XGPCD = KL0OM010.XGPCD;
    CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
    CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
    CLKREC.XDMCD = KL0OM010.XDMCD;
    CLKREC.SY5SZID = 0; /* zero since this is summary record*/
    CLKREC.CLKWHSXF = CL0OW05.CLKWHSXF[CL0OW05X];
    CLKREC.IV0IVCID = KL0OM010.IV0IVCID;
    CLKREC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
    if (CLKREC.IV0PARTN == " ")
      CLKREC.IV0PARTN = "0";
    end
    /* 072089 use W05.op2lninb, not W03:*/
    CLKREC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
    CLKREC.XQACD = CL0OW04.XQACD[CL0OW05X];
    CLKREC.XEGCD = CL0OW08.XEGCD[CL0OW05X];
    CLKREC.XBK-BK-SESN-CD = CL0OW08.XBK-BK-SESN-CD[CL0OW05X];
    CLKREC.OP-BK-YR = CL0OW08.OP-BK-YR[CL0OW05X];
    CLKREC.OP-BK-MO = CL0OW08.OP-BK-MO[CL0OW05X];
    CLKREC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
    CLKREC.YCECD = CL0OW05.YCECD[CL0OW05X];
    ;
    CLKREC.CLJRDIND = "R"; /* return to stock authorization*/
    ;
    ;
    call "IO1280" ("A ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "ADD";
      XPCL010();
    end
  else /* need to update record*/
    call "IO1280" ("U ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* add*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      TA1REC.TA1LOCAT[2] = "ADD";
      XPCL010();
    end
  end
  ;
end // end KL0O335

// flow on 'ENTER' or PF keys
Function KL0O340()
   /* **************************************/
   /* handle enter/PF key*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O340";
  ;
   /* %%%%  may not need because quantity is defaulted%%%%%%*/
  if (CLXREC.CLXERRF == "Y")
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (converseVar.validationMsgNum == 231) /* quantity required*/
         /* next sentence - allow user to pf7/8 to fill in qtys*/
      else
        return;
      end
    else
      return;
    end
  end
  ;
  ;
   /* **************************************/
   /* If ENTER is pressed*/
   /* **************************************/
  if (converseVar.eventKey is enter)
    /* **************************************/
     /* If Fast path positioning requested*/
    /* **************************************/
    if (KL0OM010.CAITEM != " ") /* If fast path item entered*/
      if (KL0OM010.CATOAP == " " /* If fastpath positioning*/
       || KL0OM010.CATOAP == "KL0O")
        /* ************************************************/
            /* Locate the desired map positioning*/
        /* ************************************************/
        sysVar.arrayIndex = 1; /* Use ezetst as working index*/
        while (sysVar.arrayIndex <= CL0OW01.CL0OWNOP) /* Until end array*/
          if (KL0OM010.CAITEM == CL0OW05.SY1STNBR[sysVar.arrayIndex])
            ;
            CLXREC.CLXARY1X[1] = sysVar.arrayIndex; /* Save position index*/
            KL0OM001.CAITEM = " ";
            ;
            CL0OW01.CL0OWIXM = 1; /* index for setting 's' to 'v'*/
            while ("S" in CL0OW05.CL0OMSEL from CL0OWIXM
             && CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOP)
              CL0OW05.CL0OMSEL[CL0OWIXM] = "V";
              CL0OW01.CL0OWIXM = sysVar.arrayIndex + 1;
            end
            ;
             /* the only selected product will be the fastpath positioned*/
            sysVar.arrayIndex = CLXREC.CLXARY1X[1];
            CL0OW05.CL0OMSEL[sysVar.arrayIndex] = "S";
            CLXREC.CLXEOSF = "Y";
            sysVar.arrayIndex = 9000; /* Force loop end*/
            ;
          else
            if (CL0OW05.SY1STNBR[sysVar.arrayIndex] == " ")
              converseLib.validationFailed(208); /* product/size not found*/
              KL0OM010.XXXERRID = "KL0O340";
              sysVar.arrayIndex = 9000; /* Force loop end*/
              KL0OM001.CAITEM = " ";
              CLXREC.CLXERRF = "Y";
            else
              sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Increment index*/
            end
          end
        end
        return;
      end
    else
      /* **************************************/
       /* If map has not been reshown*/
      /* **************************************/
      if (CL0OW01.CL0OWSWR == "N") /* If have not shown warnings*/
         /* continue around to reshow map with new totals*/
        return;
      else
        /* **************************************/
         /* If more products exist to display*/
        /* **************************************/
        CLXREC.CLXEOSF = "Y";
         /* let cl0o150 decide if more products to display*/
      end
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf2)
    if (CLAREC.CLAMEIND == "Y") /* if there is a memo*/
      COMMAREA.CATOAP = "KL0M";
      CLXREC.CLXEOAF = "Y";
      CLXREC.CLXEOSF = "Y";
      XPCL002();
    else
      converseLib.validationFailed(31); /* no memo exists for claim*/
      CLXREC.CLXERRF = "Y";
    end
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf5)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0E";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf6)
    if (CL0OW01.CL0OWHVR == "N") /* have no return*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(533); /* can't transfer - insp not done for*/
                                   /* cla*/
      return;
    end
    ;
    if (CLAREC.CLAWSENF == "N")
      COMMAREA.CATOAP = "KL02";
    else
      COMMAREA.CATOAP = "KL0E";
    end
    CLXREC.CLXEOAF = "Y";
    CLXREC.CLXEOSF = "Y";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf7)
    KL0O347();
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    KL0O348();
    return;
  end
  ;
  if (converseVar.eventKey is pf13)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXEOAF = "Y";
    COMMAREA.CATOAP = "KL0P";
    XPCL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* pf14 - pass to 'kl0k' or 'kl0j'*/
    if (CLAREC.YCTCD in YCTTBL.YCTCD)
      if (YCTTBL.YCTCOOPF[sysVar.arrayIndex] == "Y")
        COMMAREA.CATOAP = "KL0K"; /* xfer to*/
        XPCL002();
      else
        COMMAREA.CATOAP = "KL0J"; /* xfer to*/
        XPCL002();
      end
    else
      converseLib.validationFailed(232);
      CLXREC.CLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is pf15)
    CLXREC.CLXEOSF = "Y";
    CLXREC.CLXCSCRN = "KL0OM001"; /* summary*/
    return;
  end
  ;
  if (converseVar.eventKey is pf18) /* pf18 - pass to 'kl0g'*/
    CLWREC.CLWMCMNT = "N";
    COMMAREA.CATOAP = "KL0G"; /* xfer to*/
    XPCL002();
  end
  ;
  ;
end // end KL0O340

// handle pf7 for cl0om010
Function KL0O347()
   /* ************************************************************/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O347";
  ;
  ;
  ;
  if (CLXREC.CLXARY1X[2] == 1) /* If on first index and first page*/
    CLXREC.CLXERRF = "Y"; /* Set error*/
    KL0OM010.XXXERRID = "KL0O347"; /* Process name*/
    converseLib.validationFailed(7); /* Top of data*/
  else
    CLXREC.CLXARY1X[2] = CLXREC.CLXARY1X[2] - 11; /* Decrement index 1 page*/
    if (CLXREC.CLXARY1X[2] <= 0) /* If less than 1 page left back*/
      CLXREC.CLXARY1X[2] = 1; /* Set to first index*/
    end
    CLXREC.CLXBLDSC = "Y"; /* rebuild screen with new prds*/
  end
  ;
  ;
end // end KL0O347

// handle pf8 for cl0om010
Function KL0O348()
   /* ************************************************************/
   /* *                                                         **/
   /* *                   PF8 ACTION                            **/
   /* *                                                         **/
   /* *   this process handles the entry of pf key 8            **/
   /* *           (paging forward)                              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O348"; /* Set current process name*/
  ;
  ;
      /* move first line to the array index*/
  ;
  CL0OW01.CL0OWIXM = CLXREC.CLXARY1X[2] + 11; /* Check index page forward*/
  if (CL0OW03.SY4IDDSC[CL0OWIXM] == " ") /* If no data on next page*/
    CLXREC.CLXARAYX = CLXREC.CLXARY1X[2] + 10;
                                   /* look at last entry on page*/
    if (CL0OW03.SY4IDDSC[CLXARAYX] == " ") /* if current screen not full*/
      CLXREC.CLXERRF = "Y"; /* Set error*/
      KL0OM010.XXXERRID = "KL0O348"; /* Process name*/
      converseLib.validationFailed(227); /* at end of sizes, ENTER for next prd*/
    else
      CLXREC.CLXARY1X[2] = CL0OW01.CL0OWIXM;
                                   /* Set index page forward*/
      CLXREC.CLXBLDSC = "Y";
    end
  else
    CLXREC.CLXARY1X[2] = CL0OW01.CL0OWIXM; /* Set index page forward*/
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  ;
end // end KL0O348

// select all sizes from cladj
Function KL0O361()
   /* **************************************/
   /* select all sizes from cladj*/
   /* **************************************/
  ;
  CLXREC.CLXCPROC = "CL0O304";
  ;
  ;
   /* all cladj records are at the size level*/
  ;
  CLRREC.CLACLMNB = CLAREC.CLACLMNB;
  CLRREC.CLHSEQNB = CLWREC.CLHSEQNB;
  CLRREC.XGPCD = KL0OM010.XGPCD;
  CLRREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLRREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLRREC.XDMCD = KL0OM010.XDMCD;
  CLRREC.CLICRDFL = "*";
  ;
  if (CL0OW01.CL0OWICT > 0) /* if have invoices on claim*/
    CLRREC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
    CLXREC.CLXORDIV = CL0OW06.IV0IVCID[CL0OWINX];
    CLRREC.IV0PARTN = CLXREC.CLXPARTN;
    call "IO1370" ("S2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get all recs for adjusts*/
    call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;
        KL0O362(); /* move data*/
        call "IO1370" ("N2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C2", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  else
    ;
    call "IO1370" ("S1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes};
                                   /* get all records for claim*/
    call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get first record*/
    if (SQLCA.VAGen_SQLCODE < 0)
       /* next sentence*/
    else
      while (SQLCA.VAGen_SQLCODE == 0
       && CL0OW01.CL0OWNOP < CL0OW01.CL0OWMAX)
        CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;
        KL0O362(); /* move data*/
        call "IO1370" ("N1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
      end
      call "IO1370" ("C1", SQLCA, CLRREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clrrec*/
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLADJ01";
    TA1REC.TA1LOCAT[2] = "CL0O004";
    if (CL0OW01.CL0OWICT > 0)
      TA1REC.TA1LOCAT[3] = "SEL 2";
    else
      TA1REC.TA1LOCAT[3] = "SEL 1";
    end
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  ;
  ;
end // end KL0O361

// move adj sizes to ws
Function KL0O362()
   /* *************************************************************/
   /* *     move sizes from cladj (clrrec) to cl0ow03 working*/
   /* *    storage*/
   /* **/
  ;
    /* Maintenance History:*/
    /* 04-10-90 CHELLM Added XQACD and XUMCD to the product key*/
                    /* when selecting invoice price overrides.*/
  ;
  ;
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O362"; /* set current process name*/
  ;
   /* all cladj records are at the size or product level*/
  ;
   /* store data for size and increment counter*/
  ;
  ;
  if (CLRREC.CLICRDFL == "C")
    CLRREC.CLRRQTQ = CLRREC.CLRRQTQ * -1;
    CLRREC.CLRCLMQ = CLRREC.CLRCLMQ * -1;
  end
  ;
  ;
  CL0OW05.CL0OWSFL[CL0OW05X] = "A"; /* adjustment*/
  CL0OW03.CL0OWSFL[CL0OWNOS] = "A"; /* adjustment*/
  CL0OW03.SY5SZID[CL0OWNOS] = CLRREC.SY5SZID;
  CL0OW01.CL0OWNBR = CLRREC.SY5SZID;
  CL0OW03.SY4IDDSC[CL0OWNOS] = SY4REC.SY4IDDSC[CL0OWNBR];
  CL0OW03.OP2LNINB[CL0OWNOS] = CLRREC.OP2LNINB;
  CL0OW03.CLKRQTQ[CL0OWNOS] = CLRREC.CLRRQTQ;
  CL0OW03.CLKAUTHQ[CL0OWNOS] = CLRREC.CLRCLMQ;
  CL0OW03.CLKPRCFF[CL0OWNOS] = CLRREC.CLKPRCFF;
  CL0OW03.CLNGRPRC[CL0OWNOS] = CLRREC.CLNGRPRC;
  CL0OW03.CLNNTPRC[CL0OWNOS] = CLRREC.CLNNTPRC;
  CL0OW03.CLICRDFL[CL0OWNOS] = CLRREC.CLICRDFL;
  CL0OW03.CL0OMTRN[CL0OWNOS] = CLRREC.CLICRDFL;
  ;
   /* look for price overrides*/
  ;
   /* IF CL0OW01.CL0OWHPO EQ 'Y'      ; have price override*/
    /* IF CLRREC.CLKPRCFF = 'I';*/
      /* MOVE CLRREC.IV0IVCID TO CL6REC.IV0IVCID;*/
      /* MOVE CLRREC.IV0IVCID TO CLXREC.CLXORDIV;*/
      /* MOVE CLXREC.CLXPARTN TO CL6REC.IV0PARTN;*/
      /* MOVE CLRREC.XGPCD TO CL6REC.XGPCD;*/
      /* MOVE CLRREC.SY1STNBR TO CL6REC.SY1STNBR;*/
      /* MOVE CLRREC.SY2CLRID TO CL6REC.SY2CLRID;*/
      /* MOVE CLRREC.XDMCD TO CL6REC.XDMCD;*/
      /* MOVE CLRREC.XqaCD TO CL6REC.XqaCD;*/
      /* MOVE CLRREC.XqaCD TO CL6REC.XuMCD;*/
      /* MOVE CLRREC.SY5SZID TO CL6REC.SY5SZID;*/
      /* ;*/
      /* CL0OS95                     ; select set price override*/
      /* ;*/
      /* IF SQLCA.SQLCODE EQ 0       ; found override*/
        /* AND CL6REC.CLHMEMNB GT 0;*/
        /* MOVE CL6REC.CL6OVPRC TO CLRREC.CLNGRPRC;*/
        /* MOVE CL6REC.CL6OVPRC TO CLRREC.CLNNTPRC;*/
        /* MOVE 'O' TO CL0OW03.CLKPRCFF(CL0OW03X);*/
        /* ;*/
      /* END ;*/
      /* ;*/
      /* CALL IO2950 'CS',SQLCA,CL6REC (nomaps,noncsp;*/
      /* ;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (IVAREC.IVANBLFL == "Y")
    CL0OW03.CLKCLPRC[CL0OWNOS] = CLRREC.CLNNTPRC;
  else
    CL0OW03.CLKCLPRC[CL0OWNOS] = CLRREC.CLNGRPRC;
  end
  ;
  ;
  if (CLRREC.CLICRDFL == "C"
   || CLRREC.CLICRDFL == "D")
    CL0OW03.CL0OWFPR[CL0OWNOS] = "Y"; /* freeze price*/
  end
  ;
  ;
  CL0OW03.IV4SHPQ[CL0OWNOS] = 0;
  CL0OW03.IV4GUP[CL0OWNOS] = 0;
  CL0OW03.IV4NUP[CL0OWNOS] = 0;
  CL0OW03.CLMTRTSQ[CL0OWNOS] = 0;
  CL0OW03.CLKCRFL[CL0OWNOS] = " ";
  CL0OW03.CL0OMSEL[CL0OWNOS] = " ";
  CL0OW03.CL0OWUOM[CL0OWNOS] = "N"; /* unit of measure variable flag*/
  ;
  if (CLRREC.IV0IVCID != 0)
     /* fetch size price (iv4gup)*/
    IV4REC.IV0IVCID = CLRREC.IV0IVCID;
    CLXREC.CLXORDIV = CLRREC.IV0IVCID;
    IV4REC.IV0PARTN = CLXREC.CLXPARTN;
    IV4REC.OP2LNINB = CLRREC.OP2LNINB;
    IV4REC.SY5SZID = CLRREC.SY5SZID;
    ;
    KL0O367(); /* perform io mod call for iv4rec*/
  end
  ;
  ;
end // end KL0O362

// get sizes from raitm
Function KL0O363()
   /* *************************************************************/
   /* *     get all sizes from raitm database (authorized)*/
   /* **/
   /* * 10-04-90 CHELLM Added XUMCD and XQACD to the VRAITM01*/
   /* *          product Select key.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O363"; /* set current process name*/
  ;
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = KL0OM010.XGPCD;
  CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLKREC.XDMCD = KL0OM010.XDMCD;
  CLKREC.XQACD = KL0OM010.XQACD;
  CLKREC.XUMCD = KL0OM010.XUMCD;
  CLKREC.CLKCRFL = "*"; /* 072089 add*/
  ;
  if (CL0OW01.CL0OWICT > 0)
    CLKREC.IV0IVCID = KL0OM010.IV0IVCID;
    CLXREC.CLXORDIV = KL0OM010.IV0IVCID;
    CLKREC.IV0PARTN = CLXREC.CLXPARTN;
  else
    CLKREC.IV0IVCID = -1;
    CLKREC.IV0PARTN = "*";
  end
  ;
  ;
  call "IO1280" ("S1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOS < 199)
    if (CLKREC.SY5SZID != 0) /* only look at size records*/
      CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;
      /* MOVE CLKREC.CLKGROUP TO CL0OW03.CL0OW3GP(CL0OWNOs);*/
      KL0O364(); /* move data*/
    end
    call "IO1280" ("N1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* get next records*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLRAITM";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  call "IO1280" ("C1", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* close cursor for clkrec*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLRAITM";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  ;
   /* *******************************************************/
   /* when have invoice(s) attached to claim, user could*/
   /* have entered 'nc' qty(ies) which aren't assoc with*/
   /* any invoice. these need to be shown to the user*/
   /* *******************************************************/
   /* 072089 drop code since 'NC' item will now have invc **/
                                    /* --------*/
   /* *******************************************************/
  ;
  ;
   /* MOVE CLAREC.CLACLMNB TO CLKREC.CLACLMNB;*/
   /* MOVE CL0OM010.XGPCD TO CLKREC.XGPCD;*/
   /* MOVE CL0OM010.SY1STNBR TO CLKREC.SY1STNBR;*/
   /* MOVE CL0OM010.SY2CLRID TO CLKREC.SY2CLRID;*/
   /* MOVE CL0OM010.XDMCD TO CLKREC.XDMCD;*/
  ;
   /* IF CL0OW01.CL0OWICT > 0;*/
    /* AND CL0OW01.CL0OWINX EQ 1; looking at primary invoice*/
    /* MOVE 0 TO CLKREC.IV0IVCID;*/
   /* ELSE ;*/
    /* EZERTN                   ; have all ra items needed*/
   /* END ;*/
  ;
  ;
   /* CALL IO1280 'S1',SQLCA,CLKREC (NOMAPS,NONCSP; get all recds*/
   /* CALL IO1280 'N1',SQLCA,CLKREC (NOMAPS,NONCSP; get all recds*/
   /* WHILE SQLCA.SQLCODE EQ 0;*/
    /* AND CL0OW01.CL0OWNOS LT 199;*/
    /* IF CLKREC.SY5SZID NE 0        ; only look at size records*/
      /* CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;*/
      /* ;MOVE CLKREC.CLKGROUP TO CL0OW03.CL0OW3GP(CL0OWNOs);*/
      /* CL0O364                     ; move data*/
    /* END ;*/
    /* CALL IO1280 'N1',SQLCA,CLKREC (NOMAPS,NONCSP; get next*/
   /* END ;*/
  ;
   /* IF SQLCA.SQLCODE LT 0;*/
    /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
    /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
    /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
    /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
    /* PERFORM XPCL010               ; abort*/
   /* END ;*/
  ;
   /* CALL IO1280 'C1',SQLCA,CLKREC (NOMAPS,NONCSP; close cursor*/
   /* IF SQLCA.SQLCODE NE 0;*/
    /* MOVE 'DCLAIM' TO TA1REC.TA1DBASE;*/
    /* MOVE 'VCLRAITM' TO TA1REC.TA1TBLVU;*/
    /* MOVE CLAREC.CLACLMNB TO CLXREC.XXXWDTE;*/
    /* MOVE CLXREC.XXXWDTE TO TA1REC.TA1TBLKE;*/
    /* PERFORM XPCL010               ; abort*/
   /* END ;*/
  ;
  ;
end // end KL0O363

// move raitm sizes to ws
Function KL0O364()
   /* *************************************************************/
   /* *     move sizes from raitm (clkrec) to cl0ow03 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O364"; /* set current process name*/
  ;
  ;
  CL0OW01.CL0OWNBR = -1;
  ;
  ;
  CLKREC.CLKRQTQ = CLKREC.CLKRQTQ * CL0OW01.CL0OWNBR;
  CLKREC.CLKAUTHQ = CLKREC.CLKAUTHQ * CL0OW01.CL0OWNBR;
  ;
  ;
  CL0OW03.CL0OWSFL[CL0OWNOS] = "R";
  CL0OW03.SY5SZID[CL0OWNOS] = CLKREC.SY5SZID;
  CL0OW01.CL0OWNBR = CLKREC.SY5SZID;
  CL0OW03.SY4IDDSC[CL0OWNOS] = SY4REC.SY4IDDSC[CL0OWNBR];
  CL0OW03.CLKRQTQ[CL0OWNOS] = CLKREC.CLKRQTQ;
  CL0OW03.CLKAUTHQ[CL0OWNOS] = CLKREC.CLKAUTHQ;
  CL0OW03.CLKPRCFF[CL0OWNOS] = CLKREC.CLKPRCFF;
  CL0OW03.CLKCLPRC[CL0OWNOS] = CLKREC.CLKCLPRC;
  CL0OW03.CLNNTPRC[CL0OWNOS] = CLKREC.CLKCLPRC;
  CL0OW03.CLNGRPRC[CL0OWNOS] = CLKREC.CLKCLPRC;
  CL0OW03.CLKCRFL[CL0OWNOS] = CLKREC.CLKCRFL;
  CL0OW03.OP2LNINB[CL0OWNOS] = CLKREC.OP2LNINB;
  ;
  ;
  CL0OW03.CLICRDFL[CL0OWNOS] = " ";
  CL0OW03.CL0OMSEL[CL0OWNOS] = " ";
  CL0OW03.CL0OWUOM[CL0OWNOS] = "N"; /* uom variable flag*/
  CL0OW03.IV4SHPQ[CL0OWNOS] = 0;
  CL0OW03.IV4GUP[CL0OWNOS] = 0;
  CL0OW03.IV4NUP[CL0OWNOS] = 0;
  ;
  ;
  if (CLKREC.CLKCRFL == "N")
    CL0OW03.CL0OMTRN[CL0OWNOS] = "NC"; /* non-credit qty*/
    CL0OW03.CL0OWFPR[CL0OWNOS] = "Y"; /* freeze price*/
  else
    CL0OW03.CL0OMTRN[CL0OWNOS] = "A";
  end
  ;
  ;
   /* also set uom variable flag*/
  KL0OS92(); /* find returns from defectives and*/
                                   /* rts's*/
  CL0OW03.CLMTRTSQ[CL0OWNOS] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW03.CLMTRTSQ[CL0OWNOS] > 0)
    CL0OW03.CLMTRTSQ[CL0OWNOS] = CL0OW03.CLMTRTSQ[CL0OWNOS] * -1;
  end
  ;
  ;
  if (CLKREC.IV0IVCID != 0
   && CLKREC.CLKCRFL != "N") /* 072089 no ivc for 'NC'*/
     /* fetch size qty & price (iv4shpq,iv4price)*/
    IV4REC.IV0IVCID = CLKREC.IV0IVCID;
    CLXREC.CLXORDIV = CLKREC.IV0IVCID;
    IV4REC.IV0PARTN = CLXREC.CLXPARTN;
    IV4REC.OP2LNINB = CLKREC.OP2LNINB;
    IV4REC.SY5SZID = CLKREC.SY5SZID;
    ;
    KL0O367(); /* perform io mod call for iv4rec*/
  end
  ;
  ;
   /* validate return qty against authorized qty*/
   /* done here because later we would have to read thru entire*/
   /* array to look at every product*/
  ;
  if (CL0OW03.CLMTRTSQ[CL0OWNOS] > CLKREC.CLKAUTHQ
   && CLKREC.YCECD != " ")
    converseLib.validationFailed(8); /* warning - rtn qty cannot exceeed auth qty*/
    CLXREC.CLXERRF = "Y";
  end
  ;
  ;
end // end KL0O364

// get sizes from ivitm
Function KL0O365()
   /* *************************************************************/
   /* *     get all products from ivitm database (invoice)*/
   /* **/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O365"; /* set current process name*/
  ;
  ;
  IV4REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
  IV4REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  IV4REC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  IV4REC.SY5SZID = 0; /* retrieve all sizes larger than 0*/
  ;
  call "IO1130" ("SS", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes}; /* get all records*/
  call "IO1130" ("SN", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0
   && CL0OW01.CL0OWNOS < 200)
    if (IV4REC.SY5SZID in CL0OW03.SY5SZID) /* already in array*/
       /* next sentence*/
    else
      CL0OW01.CL0OWNOS = CL0OW01.CL0OWNOS + 1;
      /* MOVE IV3REC.IV3GROUP TO CL0OW03.CL0OW3gp;*/
      KL0O366(); /* move data*/
    end
    call "IO1130" ("SN", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes}; /* fetch next record*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVSIZ01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  call "IO1130" ("CS", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVSIZ01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
end // end KL0O365

// move ivitm sizes to ws
Function KL0O366()
   /* *************************************************************/
   /* *     move sizes from ivitm (iv3rec) to cl0ow03 working*/
   /* *    storage*/
   /* **/
   /* *************************************************************/
   /* *        M A I N T E N A N C E     H I S T O R Y           **/
   /* *----------------------------------------------------------**/
   /* *   DATE   LOGON   REASON                                  **/
   /* *----------------------------------------------------------**/
   /* * 04-10-90 CHELLM  Added XQACD and XUMCD to the product key**/
   /* *                  when selecting invoice price overrides. **/
   /* * 06-17-91 GDECKE  EXPAND W04/W05 TABLE TO 1000 LINES.     **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O366"; /* set current process name*/
  ;
  ;
  CL0OW03.CL0OWSFL[CL0OWNOS] = "I";
  CL0OW03.IV4SHPQ[CL0OWNOS] = IV4REC.IV4SHPQ;
  CL0OW03.CLKPRCFF[CL0OWNOS] = "I";
  CL0OW03.IV4NUP[CL0OWNOS] = IV4REC.IV4NUP;
  CL0OW03.IV4GUP[CL0OWNOS] = IV4REC.IV4GUP;
  CL0OW03.CLNNTPRC[CL0OWNOS] = IV4REC.IV4NUP;
  CL0OW03.CLNGRPRC[CL0OWNOS] = IV4REC.IV4GUP;
  CL0OW03.OP2LNINB[CL0OWNOS] = IV4REC.OP2LNINB;
  CL0OW03.SY5SZID[CL0OWNOS] = IV4REC.SY5SZID;
  CL0OW01.CL0OWNBR = IV4REC.SY5SZID;
  CL0OW03.SY4IDDSC[CL0OWNOS] = SY4REC.SY4IDDSC[CL0OWNBR];
  ;
   /* look for price overrides*/
  ;
  if (CL0OW01.CL0OWHPO == "Y") /* have price override*/
    CL6REC.IV0IVCID = CL0OW05.IV0IVCID;
    CLXREC.CLXORDIV = CL0OW05.IV0IVCID;
    CL6REC.IV0PARTN = CLXREC.CLXPARTN;
    CL6REC.XGPCD = CLAREC.XGPCD;
    CL6REC.SY1STNBR = CL0OW05.SY1STNBR[CL0OW05X];
    CL6REC.SY2CLRID = CL0OW05.SY2CLRID[CL0OW05X];
    CL6REC.XDMCD = CL0OW05.XDMCD[CL0OW05X];
    CL6REC.XQACD = CL0OW04.XQACD[CL0OW05X];
    CL6REC.XUMCD = CL0OW05.XUMCD[CL0OW05X];
    CL6REC.SY5SZID = IV4REC.SY5SZID;
    ;
    KL0OS95(); /* select set price override*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* found no size override*/
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      CL6REC.SY5SZID = 0; /* look for product level override*/
      ;
      KL0OS95(); /* select set price override*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        IV4REC.IV4GUP = CL6REC.CL6OVPRC;
        IV4REC.IV4NUP = CL6REC.CL6OVPRC;
        CL0OW03.CLKPRCFF[CL0OWNOS] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* found override*/
       && CL6REC.CLHMEMNB > 0)    
        IV4REC.IV4GUP = CL6REC.CL6OVPRC;
        IV4REC.IV4NUP = CL6REC.CL6OVPRC;
        CL0OW03.CLKPRCFF[CL0OWNOS] = "O";
        ;
      end
      ;
      call "IO2950" ("CS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
      ;
    end
  end
  ;
  ;
  if (IVAREC.IVANBLFL == "Y")
    CL0OW03.CLKCLPRC[CL0OWNOS] = IV4REC.IV4NUP;
  else
    CL0OW03.CLKCLPRC[CL0OWNOS] = IV4REC.IV4GUP;
  end
  ;
  CL0OW03.CLKRQTQ[CL0OWNOS] = 0;
  CL0OW03.CLKAUTHQ[CL0OWNOS] = 0;
  CL0OW03.CLMTRTSQ[CL0OWNOS] = 0;
  CL0OW03.CLKCRFL[CL0OWNOS] = " ";
  CL0OW03.CLICRDFL[CL0OWNOS] = " ";
  CL0OW03.CL0OMTRN[CL0OWNOS] = " ";
  CL0OW03.CL0OMSEL[CL0OWNOS] = " ";
  CL0OW03.CL0OWUOM[CL0OWNOS] = "N"; /* unit of measure variable flag*/
  ;
  ;
   /* also set uom variable flag*/
  KL0OS97(); /* find returns from defectives and*/
                                   /* rts's*/
  CL0OW03.CLMTRTSQ[CL0OWNOS] = CL0OW01.CLNRTSQ + CL0OW01.CLPDEFQ;
  if (CL0OW03.CLMTRTSQ[CL0OWNOS] > 0) /* need negative qty*/
    CL0OW03.CLMTRTSQ[CL0OWNOS] = CL0OW03.CLMTRTSQ[CL0OWNOS] * -1;
  end
  ;
  ;
end // end KL0O366

// fetch from invc item records
Function KL0O367()
   /* *************************************************************/
   /* *     fetch line unit price*/
   /* *    from iv4rec*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O367"; /* set current process name*/
  ;
  ;
  ;
  ;
   /* fetch line unit price*/
  call "IO1130" ("S ", SQLCA, IV4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    CL0OW03.IV4SHPQ[CL0OWNOS] = IV4REC.IV4SHPQ;
    CL0OW03.IV4NUP[CL0OWNOS] = IV4REC.IV4NUP;
    CL0OW03.IV4GUP[CL0OWNOS] = IV4REC.IV4GUP;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      CL0OW03.IV4NUP[CL0OWNOS] = 0;
      CL0OW03.IV4GUP[CL0OWNOS] = 0;
      CL0OW03.IV4SHPQ[CL0OWNOS] = 0;
    else
      TA1REC.TA1DBASE = "DINVC";
      TA1REC.TA1TBLVU = "VIVSIZ01";
      XPCL010();
    end
  end
end // end KL0O367

// calculate totals for map
Function KL0O368()
   /* *************************************************************/
   /* *                                                          **/
   /* *       CALCULATE CLAIM VALUES AND SCREEN TOTALS           **/
   /* *           FOR NEWLY SELECTED size ITEMS                  **/
   /* *                                                          **/
   /* *   1) Loop through saved WS product values and sum totals **/
   /* *      for Shipped Quantity, Customer Requested Quantity,  **/
   /* *      Authorized Return Quantity, Actual Return           **/
   /* *      Quantity, and Claim Values.  The claim value for    **/
   /* *      each product is also calculated.                    **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL00368";
  ;
  ;
  CL0OW01.CL0OWSSQ = 0; /* Total shipped quantity*/
  CL0OW01.CL0OWSCQ = 0; /* Total customer requested quantity*/
  CL0OW01.CL0OWSAQ = 0; /* Total authorized quantity*/
  CL0OW01.CL0OWSRQ = 0; /* Total actual returned quantity*/
  CL0OW01.CL0OWSCV = 0; /* Total claim value*/
  ;
  CL0OW01.CL0OWIXM = 1; /* Set working array index*/
  ;
  while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOS /* While LE nbr of sizes*/
   && CL0OW03.SY4IDDSC[CL0OWIXM] != " ") /* and data exists to process*/
    ;
    CL0OW01.CL0OWWK1 = CL0OW03.CLKAUTHQ[CL0OWIXM]; /* QTY*/
    CL0OW01.CL0OWWK2 = CL0OW03.CLKCLPRC[CL0OWIXM]; /* price*/
    CL0OW03.CLAESTVL[CL0OWIXM] = CL0OW01.CL0OWWK1 * CL0OW01.CL0OWWK2;
    ;
    CL0OW01.CL0OWSSQ = CL0OW01.CL0OWSSQ + CL0OW03.IV4SHPQ[CL0OWIXM];
    CL0OW01.CL0OWSCQ = CL0OW01.CL0OWSCQ + CL0OW03.CLKRQTQ[CL0OWIXM];
    CL0OW01.CL0OWSAQ = CL0OW01.CL0OWSAQ + CL0OW03.CLKAUTHQ[CL0OWIXM];
    CL0OW01.CL0OWSRQ = CL0OW01.CL0OWSRQ + CL0OW03.CLMTRTSQ[CL0OWIXM];
    CL0OW01.CL0OWSCV = CL0OW01.CL0OWSCV + CL0OW03.CLAESTVL[CL0OWIXM];
    ;
    CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1; /* Incr counter*/
  end
  ;
end // end KL0O368

// get sizes from ivitm
Function KL0O369()
   /* *************************************************************/
   /* *     get ivitm recored that contains xum and xqa codes*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0O369"; /* set current process name*/
  ;
  ;
  IV3REC.IV0IVCID = CL0OW06.IV0IVCID[CL0OWINX];
  IV3REC.IV0PARTN = CL0OW06.IV0PARTN[CL0OWINX];
  IV3REC.OP2LNINB = CL0OW05.OP2LNINB[CL0OW05X];
  ;
  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* get vivitm01*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1DBASE = "DINVC";
    TA1REC.TA1TBLVU = "VIVITM01";
    CLXREC.XXXWDTE = CLAREC.CLACLMNB;
    TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
    XPCL010(); /* abort*/
  end
  ;
  ;
end // end KL0O369

// pf 7 action
Function KL0OS07()
   /* ************************************************************/
   /* *    this process handles the entry of pf key 7           **/
   /* *             (paging backward)                           **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OWS07";
  ;
  ;
  ;
  if (CLXREC.CLXARY1X[1] == 1) /* If on first index and first page*/
    CLXREC.CLXERRF = "Y"; /* Set error*/
    KL0OM001.XXXERRID = "KL0OS07"; /* Process name*/
    converseLib.validationFailed(7); /* Top of data*/
  else
    CLXREC.CLXARY1X[1] = CLXREC.CLXARY1X[1] - 11; /* Decrement index 1 page*/
    if (CLXREC.CLXARY1X[1] <= 0) /* If less than 1 page left back*/
      CLXREC.CLXARY1X[1] = 1; /* Set to first index*/
    end
    CLXREC.CLXBLDSC = "Y"; /* rebuild screen with new products*/
  end
  ;
  ;
end // end KL0OS07

// pf 8 action
Function KL0OS08()
   /* ************************************************************/
   /* *                                                         **/
   /* *                   PF8 ACTION                            **/
   /* *                                                         **/
   /* *   this process handles the entry of pf key 8            **/
   /* *           (paging forward)                              **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS08"; /* Set current process name*/
  ;
  ;
      /* move first line to the array index*/
  ;
  CL0OW01.CL0OWIXM = CLXREC.CLXARY1X[1] + 11; /* Check index page forward*/
  if (CL0OW05.SY1STNBR[CL0OWIXM] == " ") /* If no data on next page*/
    CLXREC.CLXARAYX = CLXREC.CLXARY1X[1] + 10;
                                   /* look at last entry on page*/
    if (CL0OW05.SY1STNBR[CLXARAYX] == " ") /* if current screen not full*/
      CLXREC.CLXERRF = "Y"; /* Set error*/
      KL0OM001.XXXERRID = "KL0OS08"; /* Process name*/
      if (CL0OW01.CL0OWINX < CL0OW01.CL0OWICT) /* more invoices to show*/
        converseLib.validationFailed(199); /* more prds to show for next ivc*/
      else
        converseLib.validationFailed(204); /* last page on last invoice*/
      end
    else
      CLXREC.CLXARY1X[1] = CL0OW01.CL0OWIXM;
                                   /* Set index page forward*/
      CLXREC.CLXBLDSC = "Y";
    end
  else
    CLXREC.CLXARY1X[1] = CL0OW01.CL0OWIXM; /* Set index page forward*/
    CLXREC.CLXBLDSC = "Y";
  end
  ;
  ;
end // end KL0OS08

// Check to see if product in WS
Function KL0OS30()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CHECK TO SEE IF PRODUCT EXISTS IN WS             **/
   /* *                                                          **/
   /* *   1) Loop through WS until end of data or product is     **/
   /* *      found.                                              **/
   /* *************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y                **/
   /* *----------------------------------------------------------**/
   /* *   DATE     LOGON ID    REASON                            **/
   /* * --------   --------    ----------------------------------**/
   /* * 06-17-91    GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES**/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS30";
  ;
   /* 072089 change cl0om001 to clkrec, since S36 also used*/
     /* for cl0om005.*/
  ;
  CL0OW01.CL0OWIXM = 1; /* Set index*/
  while (CL0OW01.CL0OWIXM <= CL0OW01.CL0OWNOP /* Until end of WS*/
   && CL0OW05.SY1STNBR[CL0OWIXM] != " ") /* or end of data*/
    if (CL0OW05.SY1STNBR[CL0OWIXM] == CLKREC.SY1STNBR
     && CL0OW05.SY2CLRID[CL0OWIXM] == CLKREC.SY2CLRID
     && CL0OW05.XDMCD[CL0OWIXM] == CLKREC.XDMCD
     /* 072089 tighten edit for dup product with same 'nc'/'a':*/
     && CL0OW05.CLKCRFL[CL0OWIXM] == CLKREC.CLKCRFL
     /* 09-10-90 tighten edit for XUM and XQA*/
     && CL0OW05.XUMCD[CL0OWIXM] == CLKREC.XUMCD
     && CL0OW04.XQACD[CL0OWIXM] == CLKREC.XQACD)
      if (CL0OW01.CL0OWIXM == CLXREC.CLXLINEX)
         /* next sentence   changing line on screen;*/
      else
        CL0OW01.CL0OWEFL = "Y"; /* Set exists flag*/
      end
    end
    CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM + 1;
  end
  ;
  ;
end // end KL0OS30

// default non-credit return flag
Function KL0OS31()
   /* *************************************************************/
   /* This statement group defaults the non-credit return flag.*/
   /* For CDR account types, the flag is defaulted to 'y'.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS31"; /* set current process name*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XAUCD[sysVar.arrayIndex] == "12"
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "13"
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "14"
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "19"
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "43"
     || XAUTBL.XAUCD[sysVar.arrayIndex] == "62")
      CLJREC.CLJNCRFL = "Y";
    else
      CLJREC.CLJNCRFL = " ";
    end
  end
  ;
end // end KL0OS31

// get price from product file
Function KL0OS33()
   /* ************************************************************/
   /* *     fetch price from product file*/
   /* ************************************************************/
   /* *       M A I N T E N A N C E    H I S T O R Y            **/
   /* *---------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                            **/
   /* * --------  --------    ----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES**/
   /* * 07-19-01   DSINHA     Bypass price look up on product   **/
   /* *                       file and default all returns to   **/
   /* *                       zero price.                       **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS33"; /* set current process name*/
  ;
     /* *****************************************************/
     /* get product price using same method as orders, op0i.*/
     /* also consider the invoice special pricing table,iverec.*/
     /* if price is done by size, then use the first valid size*/
     /* as the product price.  a price varies flag will be*/
     /* set when size prices differ within a product*/
     /* *****************************************************/
  ;
      /* *******************************************************/
      /* * if sales pgm has product pricing (clarec.sp1id ne ' ')*/
      /* *   then also get product price -*/
      /* *   use lower price value*/
      /* * else*/
      /* *   (sales pgm may not have product pricing)*/
      /* *   use invoice speciality table, iverec,*/
      /* *     price/cost indicator to access either:*/
      /* *     product price table sy5rec*/
      /* *     or*/
      /* *     product cost table sy6rec*/
      /* **/
      /* *    if product price-size code = z:*/
      /* *      default size from ydstbl, use prod scale code,*/
      /* *      then:*/
      /* *        read price/cost default for style,color,size*/
      /* *        use price/cost directly from valid sz on prodct*/
      /* *    else*/
      /* *      if color default price/cost ne 0*/
      /* *        use it*/
      /* *      else*/
      /* *        use style default price/cost.*/
      /* *******************************************************/
  ;
  ;
      /* *********************/
      /* * pricing flags*/
      /* *********************/
  ;
   /* MOVE 'N' TO CL0OW04.OP2PRCVF(CL0OW05X);  /* price vary flag*/
  ;
  CL0OW04.CLNGRPRC[CL0OW05X] = 0;
  CL0OW04.CLNNTPRC[CL0OW05X] = 0;
  CL0OW01.SP5SZPR = 0;
  ;
  ;
   /* TCS Change begin - 07/19/01 - Default price to zero*/
      /* get sales pgm prices - or -*/
      /* get style and style/color price/cost defaults to use*/
      /* when there is no price by size for the product*/
  ;
   /* IF CLAREC.SP1ID NE ' ';           /* if have sales program*/
    /* GET OM0QS99*/
     /* *****************************************/
     /* get sales program product pricing record*/
     /* *****************************************/
   /* MOVE CLAREC.SP1ID TO SP5REC.SP1ID;     /* set-up key for prod price*/
   /* MOVE CLAREC.XGPCD TO SP5REC.XGPCD;*/
   /* MOVE KL0OM001.SY1STNBR(CLXLINEX) TO SP5REC.SY1STNBR;*/
   /* MOVE KL0OM001.SY2CLRID(CLXLINEX) TO SP5REC.SY2CLRID;*/
   /* MOVE KL0OM001.XDMCD(CLXLINEX) TO SP5REC.XDMCD;*/
   /* ;*/
   /* CALL IO0110 'S ',SQLCA,SP5REC (NOMAPS,NONCSP;/* i/o mod for inquiry*/
  ;
   /* IF SQLCA.SQLCODE EQ 0;          /* check for good rc*/
   /* ; /* use default size code to get correct price*/
       /* don't have product price, all prices are by size*/
   /* IF SYCREC.SY4SZSCL IN YDSTBL.SY4SZSCL;*/
   /* MOVE SP5REC.SP5SZPR(EZETST) TO CL0OW01.SP5SZPR;*/
   /* END;*/
   /* END;*/
   /* END;*/
  ;
  ;
     /* ******************/
     /* get product price*/
     /* ******************/
  ;
   /* GET TA2REC EMPTY;*/
   /* MOVE 'GETDATE' TO TA2REC.TA2DTOPT;*/
   /* CALL TA0040 TA2REC (NOMAPS,NONCSP;*/
   /* MOVE TA2REC.TA2GRGGN TO CL0OW01.CL0OWPED; /* price effective date*/
  ;
  ;
   /* IF IVEREC.IVEPCIND EQ 'P';        /* invc specl codes from cl0o001*/
   /* KL0OS34;                     /* product price defaults*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';*/
   /* KL0OS35;                      /* product cost defaults*/
   /* END;*/
   /* ; /* note ivepcind may be blank, if not found in cl0o001*/
   /* END;*/
  ;
   /* get op0is24*/
   /* use product price, if any*/
  ;
   /* set total adjust to price/cost, using invc special table*/
   /* CL0OW01.CL0OWPCP = IVEREC.IVEPCPCT + 100;*/
  ;
   /* style/color defaults were set above, cl0ls70 or cl0ls72*/
   /* IF CL0OW01.CL0OWCLP NE 0;*/
     /* use color default price/cost*/
   /* CL0OW04.CLNGRPRC(CL0OW05X) = CL0OWCLP * CL0OWPCP / 100;*/
   /* ELSE;*/
     /* use style default price/cost*/
   /* CL0OW04.CLNGRPRC(CL0OW05X) = CL0OWSTP * CL0OWPCP / 100;*/
   /* END;*/
   /* MOVE CL0OW04.CLNGRPRC(CL0OW05X) TO CL0OW04.CLNNTPRC(CL0OW05X);*/
  ;
  ;
     /* ***************************************************/
     /* if sales prgm had a price, and product had a price*/
     /* use lower value for the claim price*/
     /* ***************************************************/
  ;
   /* IF CL0OW01.SP5SZPR NE 0*/
   /* AND CL0OW04.CLNGRPRC(CL0OW05X) NE 0;*/
   /* IF CL0OW01.SP5SZPR LT CL0OW04.CLNGRPRC(CL0OW05X);*/
   /* MOVE CL0OW01.SP5SZPR TO CL0OW04.CLNGRPRC(CL0OW05X);*/
   /* MOVE CL0OW01.SP5SZPR TO CL0OW04.CLNNTPRC(CL0OW05X);*/
   /* END;*/
   /* END;*/
  ;
  ;
   /* price is put on map in calling process*/
  ;
end // end KL0OS33

// Select unique RA item
Function KL0OS36()
   /* *************************************************************/
   /* *                                                          **/
   /* *         SELECT THE ROW FROM DCLAIM.VRAITM01              **/
   /* *                                                          **/
   /* *   1) Move in the screen keys and select the unique       **/
   /* *      RA product item row from the table.                 **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS36";
  ;
  ;
  CLKREC.CLACLMNB = CLAREC.CLACLMNB;
  CLKREC.XGPCD = CLAREC.XGPCD;
  CLKREC.SY5SZID = 0;
   /* 072089 move code to CL0O126 and CL0O226 to use right map*/
   /* old=MOVE CL0OM001.IV0IVCID TO CLKREC.CLACLMNB; 072089 drop*/
   /* MOVE CL0OM001.IV0IVCID TO CLKREC.IV0IVCID; 072089 fix code*/
   /* MOVE CL0OM001.SY1STNBR(CLXLINEX) TO CLKREC.SY1STNBR;*/
   /* MOVE CL0OM001.SY2CLRID(CLXLINEX) TO CLKREC.SY2CLRID;*/
   /* MOVE CL0OM001.XDMCD(CLXLINEX) TO CLKREC.XDMCD;*/
  ;
  ;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRAITM01";
    TA1REC.TA1LOCAT[2] = "SEL ROW";
    XPCL010();
  end
  ;
  ;
end // end KL0OS36

// find line item nbr for new prd
Function KL0OS38()
   /* ***********************************************************/
   /* associate correct line item number to user entered product*/
   /* ***********************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS38";
  ;
  ;
  CL0OW01.CL0OWCN2 = 1;
  ;
   /* look for style/color combo already on invoice and*/
   /* copy the line item number*/
  ;
  if (CL0OW05.OP2LNINB[CL0OW05X] == 0)
    while (CL0OW05.SY1STNBR[CL0OW05X] in CL0OW05.SY1STNBR from CL0OWCN2)
      CL0OW01.CL0OWCN2 = sysVar.arrayIndex;
      if (CL0OW05.SY2CLRID[CL0OW05X] == CL0OW05.SY2CLRID[CL0OWCN2])
        CL0OW05.OP2LNINB[CL0OW05X] = CL0OW05.OP2LNINB[CL0OWCN2];
        return;
      else
        CL0OW01.CL0OWCN2 = CL0OW01.CL0OWCN2 + 1;
      end
    end
  else
    return;
  end
  ;
  ;
end // end KL0OS38

// recalculate the claim price
Function KL0OS39()
   /* *************************************************************/
           /* Convert prices to match new unit of measure*/
   /* *************************************************************/
   /* *       M A I N T E N A N C E     H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *   DATE    LOGON ID    REASON                             **/
   /* * --------  --------    -----------------------------------**/
   /* * 06-17-91   GDECKE     EXPAND W04/W05 TABLE TO 1000 LINES **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS39"; /* set the current process name*/
  ;
  if (CL0OW05.CL0OWUMF[CL0OW05X] == "Y") /* new unit of measure entered*/
    if (CL0OW05.XUMCD[CL0OW05X] == "R "
     || CL0OW05.XUMCD[CL0OW05X] == "L ")
       /* convert to half pair price*/
      if (CL0OW05.XUMCD[CL0OW05X] in XUMTBL.XUMCD)
        CL0OW01.CL0OWPRC = CL0OW04.CLNGRPRC[CL0OW05X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC * XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW04.CLNGRPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
        CL0OW01.CL0OWPRC = CL0OW04.CLNNTPRC[CL0OW05X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC * XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW04.CLNNTPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
        CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
      end
    else
        /* convert to eachs price*/
      if (SYCREC.XUMCD in XUMTBL.XUMCD)
        CL0OW01.CL0OWPRC = CL0OW04.CLNGRPRC[CL0OW05X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW04.CLNGRPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
        CL0OW01.CL0OWPRC = CL0OW04.CLNNTPRC[CL0OW05X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW04.CLNNTPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
        CL0OW04.CLKCLPRC[CL0OW05X] = CL0OW01.CL0OWPRC;
      end
    end
  end
  ;
  ;
end // end KL0OS39

// check for screen overlaps
Function KL0OS41()
   /* *************************************************************/
   /* *                                                          **/
   /* *         CHECK FOR SIZE OVERLAPS ON THE SCREEN         **/
   /* *                                                          **/
   /* *   1) Check all screen sizes to see if there are any   **/
   /* *      duplicates                                          **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS41";
  ;
  ;
   /* if invoice exists on screen, not allowed to add products*/
  ;
  if (KL0OM010.IV0IVCID != 0)
    return;
  end
  ;
   /* check for overlaps on screen*/
  ;
  CL0OW01.CL0OWCN2 = 11; /* Set index*/
  while (CL0OW01.CL0OWCN2 > 0) /* Until end of Screen data*/
    if (KL0OM010.SY4IDDSC[CL0OWCN2] == " ") /* If product does not exist*/
       /* continue on*/
    else
      CL0OW01.CL0OWIXM = CL0OW01.CL0OWCN2 - 1; /* Start at next product*/
      while (CL0OW01.CL0OWIXM > 0) /* Until end of Screen data*/
        if (KL0OM010.SY4IDDSC[CL0OWCN2] == KL0OM010.SY4IDDSC[CL0OWIXM])
          CLXREC.CLXERRF = "Y"; /* Set error flag*/
          KL0OM010.XXXERRID = "CL0OS41"; /* Set process*/
          converseLib.validationFailed(448); /* Overlapping products exist on the screen*/
          set KL0OM010.SY4IDDSC[CL0OWCN2] cursor, bold;
        else
           /* continue on*/
        end
        CL0OW01.CL0OWIXM = CL0OW01.CL0OWIXM - 1;
      end
    end
    CL0OW01.CL0OWCN2 = CL0OW01.CL0OWCN2 - 1;
  end
  ;
  ;
  if (CLXREC.CLXERRF == "Y")
    return; /* already found existing product*/
  end
  ;
  ;
   /* check for overlaps in array*/
  ;
  CL0OW01.CL0OWCN2 = 1;
  while (CL0OW01.CL0OWCN2 <= 11) /* Until end of screen data*/
    if (KL0OM010.SY4IDDSC[CL0OWCN2] == " ") /* If product does not*/
       /* continue on*/
    else
      if (KL0OM010.SY4IDDSC[CL0OWCN2] in CL0OW03.SY4IDDSC)
        if (CL0OW01.CL0OWCN2 == sysVar.arrayIndex)
           /* next sentence - dealing with same product*/
        else
          if (KL0OM010.CL0OMSEL[CL0OWCN2] == "X")
             /* next sentence - dealing with deleted product*/
          else
            CLXREC.CLXERRF = "Y"; /* Set error flag*/
            KL0OM001.XXXERRID = "KL0OS41"; /* Set process*/
            converseLib.validationFailed(448); /* Overlapping products exist on the screen*/
            set KL0OM010.SY4IDDSC[CL0OWCN2] cursor, bold;
          end
        end
        /* CL0OW01.CL0OW03X = CL0OW01.CL0OW03X + 1;*/
      end
      /* CL0OW01.CL0OW03X = CL0OW01.CL0OW03X + 1;*/
       /* end of while loop - look at next product on screen*/
    end
    CL0OW01.CL0OWCN2 = CL0OW01.CL0OWCN2 + 1;
  end
end // end KL0OS41

// default selection code - map 5
Function KL0OS43()
   /* *************************************************************/
   /* *                                                          **/
   /* *         default selection code - map 5*/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS43";
  ;
  ;
  if (KL0OM005.CL0OMSEL[CLXLINEX] == " "
   && CL0OW05.CL0OMSEL[CL0OW05X] != " ")
    KL0OM005.CL0OMSEL[CLXLINEX] = CL0OW05.CL0OMSEL[CL0OW05X];
  end
  ;
  ;
end // end KL0OS43

// get price from product file
Function KL0OS53()
   /* GET CL0LSPS*/
  ;
   /* GET OP0I020*/
     /* *****************************************************/
     /* get product price using same method as orders, op0i.*/
     /* also consider the invoice special pricing table,iverec.*/
     /* if price is done by size, then use the correct valid size*/
     /* as the product price.*/
     /* *****************************************************/
  ;
   /* GET OP0IS24*/
      /* *******************************************************/
      /* * if sales pgm has product pricing (clarec.sp1id ne ' ')*/
      /* *   then also get product price -*/
      /* *   use the lower price value*/
      /* * else*/
      /* *   (sales pgm may not have product pricing)*/
      /* *   use invoice speciality table, iverec,*/
      /* *     price/cost indicator to access either:*/
      /* *     product price table sy5rec*/
      /* *     or*/
      /* *     product cost table sy6rec*/
      /* **/
      /* *    if product price-size code = z:*/
      /* *      read price/cost default for style,color,size*/
      /* *      use price/cost directly into valid size on prodct*/
      /* *    else*/
      /* *      if color default price/cost ne 0*/
      /* *        use it*/
      /* *      else*/
      /* *        use style default price/cost.*/
      /* *******************************************************/
  ;
      /* ************/
      /* init values*/
      /* ************/
  ;
  CLXREC.CLXCPROC = "CL0OS53";
  CL0OW03.CLNGRPRC[CL0OW03X] = 0;
  CL0OW03.CLNNTPRC[CL0OW03X] = 0;
  CL0OW03.CLKCLPRC[CL0OW03X] = 0;
  CL0OW01.SP5SZPR = 0;
  ;
  ;
      /* get sales pgm prices - or -*/
      /* get style and style/color price/cost defaults to use*/
      /* when there is no price by size for the product*/
  ;
   /* TCS Change begin - 07/19/01 Default price to zero - SAP*/
   /* IF CLAREC.SP1ID NE ' ';           /* if sales program code*/
    /* GET OM0QS99*/
     /* *****************************************/
     /* get sales program product pricing record*/
     /* *****************************************/
   /* MOVE CLAREC.SP1ID TO SP5REC.SP1ID;     /* set-up key for prod price*/
   /* MOVE CLAREC.XGPCD TO SP5REC.XGPCD;*/
     /* changed next 3 lines 01-03-91 - gdecke*/
      /* - it was using map cl0om001*/
   /* MOVE KL0OM010.SY1STNBR TO SP5REC.SY1STNBR;*/
   /* MOVE KL0OM010.SY2CLRID TO SP5REC.SY2CLRID;*/
   /* MOVE KL0OM010.XDMCD TO SP5REC.XDMCD;*/
  ;
   /* CALL IO0110 'S ',SQLCA,SP5REC (NOMAPS,NONCSP;/* i/o mod for inquiry*/
  ;
   /* IF SQLCA.SQLCODE EQ 0;          /* check for good rc*/
   /* MOVE CL0OW03.SY5SZID(CL0OW03X) TO EZETST; /* size i.d.*/
   /* MOVE SP5REC.SP5SZPR(EZETST) TO CL0OW01.SP5SZPR;*/
   /* END;*/
   /* END;*/
  ;
  ;
     /* ******************/
     /* get product price*/
     /* ******************/
  ;
   /* SET TA2REC EMPTY;*/
   /* MOVE 'GETDATE' TO TA2REC.TA2DTOPT;*/
   /* CALL TA0040 TA2REC (NOMAPS,NONCSP;*/
   /* MOVE TA2REC.TA2GRGGN TO CL0OW01.CL0OWPED; /* price effective date*/
  ;
  ;
   /* get only once for many sizes on product*/
   /* IF CL0OW01.CL0OWCLP EQ 0          /* don't have defaults*/
   /* AND CL0OW01.CL0OWSTP EQ 0;*/
   /* IF IVEREC.IVEPCIND EQ 'P';      /* invc specl codes from cl0l001*/
   /* KL0OS34;                      /* product price defaults*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';*/
   /* KL0OS35;                    /* product cost defaults*/
   /* END;*/
       /* note ivepcind may be blank, if not found in cl0o005*/
   /* END;*/
  ;
     /* SET TOTAL ADJUST TO PRICE/COST, USING INVC SPECIAL TABLE*/
   /* CL0OW01.CL0OWPCP = IVEREC.IVEPCPCT + 100;*/
   /* END;*/
  ;
   /* get op0is24*/
   /* IF SYCREC.SY1PRCZS EQ 'Z';        /* if might have size price*/
   /* IF IVEREC.IVEPCIND EQ 'P';      /* invc specl codes from cl0l001*/
   /* KL0OS37;                      /* size price*/
   /* ELSE;*/
   /* IF IVEREC.IVEPCIND EQ 'C';*/
   /* MOVE 0 TO CL0OW03.CLNGRPRC(CL0OW03X); /* no cost by size*/
   /* MOVE 0 TO CL0OW03.CLNNTPRC(CL0OW03X);*/
   /* END;*/
       /* note ivepcind may be blank, if not found in cl0l001*/
   /* END;*/
   /* ELSE;*/
     /* style/color defaults were set above, cl0ls70 or cl0ls72*/
   /* IF CL0OW01.CL0OWCLP NE 0;*/
       /* use color default price/cost*/
   /* CL0OW03.CLNGRPRC(CL0OW03X) = CL0OWCLP * CL0OWPCP / 100;*/
   /* ELSE;*/
       /* use style default price/cost*/
   /* CL0OW03.CLNGRPRC(CL0OW03X) = CL0OWSTP * CL0OWPCP / 100;*/
   /* END;*/
   /* MOVE CL0OW03.CLNGRPRC(CL0OW03X) TO CL0OW03.CLNNTPRC(CL0OW03X);*/
   /* END;*/
  ;
  ;
     /* *********************************************/
     /* if sales pgm had price and product had price*/
     /* use the lower value for the claim price*/
     /* *********************************************/
  ;
   /* IF CL0OW01.SP5SZPR NE 0*/
   /* AND CL0OW03.CLNGRPRC(CL0OW03X) NE 0;*/
   /* IF CL0OW01.SP5SZPR LT CL0OW03.CLNGRPRC(CL0OW03X);*/
   /* MOVE CL0OW01.SP5SZPR TO CL0OW03.CLNGRPRC(CL0OW03X);*/
   /* MOVE CL0OW01.SP5SZPR TO CL0OW03.CLNNTPRC(CL0OW03X);*/
   /* END;*/
   /* END;*/
  ;
  ;
  ;
  ;
end // end KL0OS53

// recalculate the claim price
Function KL0OS55()
      /* *******************************************************/
      /* * if the unit of measure code has changed, recalculate*/
      /* *  the claim price using the UOM from the product file*/
      /* *******************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS54";
  ;
  if (CL0OW05.CL0OWUMF[CL0OW05X] == "Y") /* new unit of measure entered*/
    if (CL0OW05.XUMCD[CL0OW05X] == "R "
     || CL0OW05.XUMCD[CL0OW05X] == "L ")
       /* convert to half pair price*/
      if (CL0OW05.XUMCD[CL0OW05X] in XUMTBL.XUMCD)
        CL0OW01.CL0OWPRC = CL0OW03.CLNGRPRC[CL0OW03X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC * XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW03.CLNGRPRC[CL0OW03X] = CL0OW01.CL0OWPRC;
        CL0OW01.CL0OWPRC = CL0OW03.CLNNTPRC[CL0OW03X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC * XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW03.CLNNTPRC[CL0OW03X] = CL0OW01.CL0OWPRC;
      end
    else
        /* convert to eachs price*/
      if (SYCREC.XUMCD in XUMTBL.XUMCD)
        CL0OW01.CL0OWPRC = CL0OW03.CLNGRPRC[CL0OW03X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW03.CLNGRPRC[CL0OW03X] = CL0OW01.CL0OWPRC;
        CL0OW01.CL0OWPRC = CL0OW03.CLNNTPRC[CL0OW03X];
        CL0OW01.CL0OWPRC = CL0OW01.CL0OWPRC / XUMTBL.XUMCONVF[sysVar.arrayIndex];
        CL0OW03.CLNNTPRC[CL0OW03X] = CL0OW01.CL0OWPRC;
      end
    end
    if (IVAREC.IVANBLFL == "Y")
      KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNNTPRC[CL0OW03X];
      CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNNTPRC[CL0OW03X];
    else
      KL0OM010.CLKCLPRC[CLXLINEX] = CL0OW03.CLNGRPRC[CL0OW03X];
      CL0OW03.CLKCLPRC[CL0OW03X] = CL0OW03.CLNGRPRC[CL0OW03X];
    end
    ;
  end
  ;
  ;
  ;
end // end KL0OS55

// edit nike product id
Function KL0OS62()
   /* ************************************************************/
   /* *     edit size description*/
   /* *                                                         **/
   /* ************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS62"; /* set current process name*/
  ;
  ;
   /* sy4rec was selected in cl0o303*/
  ;
   /* edit size id entered*/
  ;
   /* GET OP0HSGE*/
         /* ******************************************************/
         /* this sgrp edits the size entered*/
  ;
         /* size edits:  1. edit entered map size for format*/
                      /* 2. check size division codes*/
                      /* 3. see if size division match allowable*/
                          /* division codes from ordr typ table.*/
                      /* 4. check size fringe/gut indicators*/
         /* ******************************************************/
  ;
     /* without an order type on the claim, cant edit sizes*/
  ;
  if (CLAREC.XOTCD == " ")
    converseLib.validationFailed(216); /* cant enter size without o/t on clm*/
    KL0OM010.XXXERRID = "KL0OS62";
    CLXREC.CLXERRF = "Y";
    set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
     /* now start edits on the size -*/
     /* as these edits progress, you can only*/
     /* go to the next edit if the previous one was good.*/
  ;
    /* size edit number 1*/
       /* based on the size input format, verify size*/
  ;
   /* ***************************/
   /* edit alpha size for valid*/
   /* ***************************/
   /* GET OP0HSG6*/
  sysVar.arrayIndex = 1;
  ;
  while (sysVar.arrayIndex <= 40)
    if (KL0OM010.SY4IDDSC[CLXLINEX] == SY4REC.SY4IDDSC[sysVar.arrayIndex])
      CL0OW01.CL0OWSID = sysVar.arrayIndex; /* size id*/
      sysVar.arrayIndex = 99;
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end
  ;
  if (sysVar.arrayIndex != 99) /* if not found*/
    set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(219); /* alpha size not valid*/
    KL0OM010.XXXERRID = "KL0OS62";
    return;
  end
  ;
  ;
   /* ******************************/
   /* size edit number 2*/
        /* check size division code*/
   /* ******************************/
  ;
  if (SYCREC.XDVCD[CL0OWSID] == " ")
    CLXREC.CLXERRF = "Y";
    converseLib.validationFailed(220); /* size not valid for division code*/
    KL0OM010.XXXERRID = "KL0OS62";
    set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
    return;
  end
  ;
  ;
    /* *************************************************/
    /* edit check number 3*/
      /* match style div to allowed divs for order type*/
    /* *************************************************/
  ;
  if (SYCREC.XDVCD[CL0OWSID] == XOTTBL.XDVCD1[CL0OWXOT])
     /* next sentence*/
  else
    if (SYCREC.XDVCD[CL0OWSID] == XOTTBL.XDVCD2[CL0OWXOT])
       /* next sentence*/
    else
      if (SYCREC.XDVCD[CL0OWSID] == XOTTBL.XDVCD3[CL0OWXOT])
         /* next sentence*/
      else
        CLXREC.CLXERRF = "Y";
        converseLib.validationFailed(220); /* size not valid for div code*/
        KL0OM010.XXXERRID = "KL0OS62";
        set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
        return;
      end
    end
  end
  ;
  ;
   /* ***********************************/
   /* edit check number 4*/
     /* check size fringe gut indicators*/
   /* ***********************************/
  ;
  if (XOTTBL.XOTXTRAS[CL0OWXOT] == "Y") /* if order type allows extras*/
     /* next sentence*/
  else
    if (SYCREC.SY3FRGUT[CL0OWSID] == "X") /* if size is extra*/
      CLXREC.CLXERRF = "Y";
      converseLib.validationFailed(221); /* size not valid for fringe/gut*/
      KL0OM010.XXXERRID = "KL0OS62";
      set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
      return;
    end
  end
  ;
  ;
     /* *************/
     /* size is o.k.*/
     /* *************/
  ;
  CL0OW03.SY5SZID[CL0OW03X] = CL0OW01.CL0OWSID; /* hold size i.d.*/
  CL0OW03.SY4IDDSC[CL0OW03X] = SY4REC.SY4IDDSC[CL0OWSID];
                                   /* size desc*/
  ;
  ;
    /* if product nbr entered and is already on raitm then*/
    /* compare the types of ra*/
  ;
  ;
  CLXREC.CLXTESTF = "N"; /* if have error, set to yes*/
  set CLKREC empty;
  CLKREC.CLACLMNB = KL0OM010.CLACLMNB;
  CLKREC.IV0IVCID = KL0OM010.IV0IVCID; /* 072089 add*/
  CLKREC.XGPCD = KL0OM010.XGPCD;
  CLKREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLKREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLKREC.XDMCD = KL0OM010.XDMCD;
  CLKREC.SY5SZID = CL0OW03.SY5SZID[CL0OW03X];
  ;
  if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC") /* 072089 add 'if,end'*/
    CLKREC.CLKCRFL = "N";
  else
    CLKREC.CLKCRFL = "Y";
  end
  ;
  call "IO1280" ("S ", SQLCA, CLKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE < 0)
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VRAITM01";
      XPCL010();
    else
      if (SQLCA.VAGen_SQLCODE == 0)
         /* 072089 re-write since clkcrfl is now in recd key*/
        if (KL0OM010.CL0OMSEL[CLXLINEX] == "NC")
          converseLib.validationFailed(477); /* non-credit size already exists*/
        else
          converseLib.validationFailed(478); /* credit size already exists*/
        end
        CLXREC.CLXERRF = "Y"; /* Indicate error*/
        set KL0OM010.SY4IDDSC[CLXLINEX] cursor, bold;
        KL0OM010.XXXERRID = "KL0OS62"; /* Process name*/
      end
    end
  end
  ;
  ;
end // end KL0OS62

// default remerch flags
Function KL0OS91()
   /* *************************************************************/
   /* *                                                          **/
   /* *       default remerchandising flags on ra header         **/
   /* *                                                          **/
   /* * 12/01/93 jcarey Added default for cl-upc-labl-fl.        **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS91"; /* set current process name*/
  ;
  ;
  CLJREC.YRMRESTK = 0;
  ;
  if (CLAREC.YCTCD == "DEF"
   || CLAREC.YCTCD == "CDR")
    CLJREC.CLJRSKFL = "N";
    CLJREC.CLJRBGFL = "N";
    CLJREC.CLJRBXFL = "N";
    CLJREC.CLJRTGFL = "N";
    CLJREC.CLJUNLFL = "N";
    CLJREC.CL-UPC-LABL-FL = "N";
  else
    CLJREC.CLJRSKFL = "Y";
    CLJREC.CLJRBGFL = "Y";
    CLJREC.CLJRBXFL = "Y";
    CLJREC.CLJRTGFL = "Y";
    CLJREC.CLJUNLFL = "Y";
    CLJREC.CL-UPC-LABL-FL = "Y";
    ;
    if (CLAREC.XGPCD in YRMTBL.XGPCD
     && YRMTBL.XXXSTAT == "A")
      CLJREC.YRMRESTK = YRMTBL.YRMRESTK;
    end
    ;
  end
  ;
  ;
  ;
     /* **************************************************/
     /* read customer company vcmpny01,*/
     /* to get xau_acct_cls-cd, read account type table*/
     /* to get account type code. if not '02' value we  have*/
     /* internal account and don't charge for restocking*/
     /* **************************************************/
  ;
  CLJREC.CLJRSKFL = " ";
  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT == "A")
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "02")
      CLJREC.CLJRSKFL = "N";
    end
  end
  ;
  ;
    /* ********************************************/
    /* if haven't found 'n' for restocking flag*/
    /* ********************************************/
  ;
  ;
  if (CLJREC.CLJRSKFL == "N")
     /* next sentence*/
  else
    if (CLAREC.YCRCD in YCRTBL.YCRCD
     && YCRTBL.XXXSTAT == "A")
      CLJREC.CLJRSKFL = YCRTBL.CLJRSKFL[sysVar.arrayIndex];
    end
  end
  ;
  ;
    /* ***********************************************************/
    /* * if holiday walking claim and setup before march 9 1990 **/
    /* * then default restock flag to 'n' and percent to zero.  **/
    /* ***********************************************************/
  ;
  if (CLAREC.CLASETDT < 19900309)
    if (CLAREC.SP1ID == "AST1"
     || CLAREC.SP1ID == "AST2"
     || CLAREC.SP1ID == "AST3")
         /* OR CLAREC.SP1ID EQ 'TEST';*/
         /* OR CLAREC.SP1ID EQ 'WTPA';*/
         /* OR CLAREC.SP1ID EQ 'WA89';*/
      CLJREC.YRMRESTK = 0;
      CLJREC.CLJRSKFL = "N";
    end
  end
  ;
  ;
end // end KL0OS91

// sum defit and rtsit rtn qty
Function KL0OS92()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS92"; /* set current process name*/
  ;
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
  CLNREC.IV0IVCID = KL0OM001.IV0IVCID;
  CLNREC.XGPCD = CLKREC.XGPCD;
  CLNREC.SY1STNBR = CLKREC.SY1STNBR;
  CLNREC.SY2CLRID = CLKREC.SY2CLRID;
  CLNREC.XDMCD = CLKREC.XDMCD; /* dimension*/
  CLNREC.XQACD = CLKREC.XQACD; /* quality*/
  CLNREC.XUMCD = CLKREC.XUMCD; /* unit of measure*/
  ;
  CL0OW01.CLNRTSQ = 0;
  CL0OW01.CLPDEFQ = 0;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (CLNREC.SY5SZID == CLKREC.SY5SZID)
      if (CLKREC.CLKCRFL == "Y") /* 072089 'nc' uses 0 prc*/
        if (CLNREC.CLNNTPRC != 0)
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ; /* credit qty*/
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ; /* non cred qty*/
        end
      else
        if (CLKREC.CLKCRFL == "N") /* 072089 add*/
          if (CLNREC.CLNNTPRC == 0)
            CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ; /* cr qty*/
            CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ; /* non cr qty*/
          end
        else
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ; /* credit qty*/
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ; /* non cred qty*/
        end
      end
      if (CLNREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
        CL0OW05.CL0OWUOM[CL0OW05X] = "P"; /* show variable uom*/
      end
    end
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* defectives don't have sizes*/
   /* **************************************/
  ;
  ;
end // end KL0OS92

// sum defit and rtsit rtn qty
Function KL0OS93()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* * 10-04-90 CHELLM added XUMCD and XQACD to the select key  **/
   /* *          for scanning DCLAIM.VDEFIT01 rows.              **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS93"; /* set current process name*/
  ;
  CL0OW01.CLNRTSQ = 0;
  CL0OW01.CLPDEFQ = 0;
  ;
   /* if user has the product showing twice (once with 'a',*/
   /* once with 'nc'),  the 'nc' should not show the return*/
   /* qty associated with 'a'.*/
     /* 072089 since invoice is now on 'a' and 'nc' auth items,*/
       /* the only way to match actual returned items is to*/
       /* look for price = 0 for the 'nc' item.*/
       /* This SHOULD prevent the returns from showing for both*/
       /* the 'nc' and 'a' item.*/
  ;
   /* if cl0ow05.cl0owtrn(cl0ow05x) eq 'nc'*/
    /* if cl0ow05.sy1stnbr(cl0ow05x) in cl0ow05.sy1stnbr*/
  ;
   /* end*/
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
   /* 072089 use ivc on 'nc' product:*/
   /* IF CLKREC.CLKCRFL EQ 'N'  ; have non-cred prod - 1/89*/
    /* MOVE 0 TO CLNREC.IV0IVCID     ; no ivc assoc with it*/
   /* ELSE ;*/
  CLNREC.IV0IVCID = KL0OM001.IV0IVCID;
   /* END ;*/
  ;
  CLNREC.XGPCD = CLKREC.XGPCD;
  CLNREC.SY1STNBR = CLKREC.SY1STNBR;
  CLNREC.SY2CLRID = CLKREC.SY2CLRID;
  CLNREC.XDMCD = CLKREC.XDMCD; /* dimension*/
  CLNREC.XQACD = CLKREC.XQACD; /* quality*/
  CLNREC.XUMCD = CLKREC.XUMCD; /* unit of measure*/
  ;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  while (SQLCA.VAGen_SQLCODE == 0)
    if (CLKREC.CLKCRFL == "Y") /* 072089 check CLKCRFL and 0 price.*/
      if (CLNREC.CLNNTPRC != 0)
        CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ;
        CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ;
      end
    else
      if (CLKREC.CLKCRFL == "N") /* 072089 add*/
        if (CLNREC.CLNNTPRC == 0)
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ;
          CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ;
        end
      else /* 072089 allow for 'm' in CLKCRFL*/
        CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ;
        CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ;
      end
    end
    if (CLNREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
      CL0OW05.CL0OWUOM[CL0OW05X] = "P"; /* show variable uom*/
    end
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* sum CLPREC.CLPDEFQ*/
   /* **************************************/
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = -1;
  CLPREC.CL2ISNBR = -1;
   /* 072089 use ivc on 'nc' product:*/
   /* IF CLKREC.CLKCRFL EQ 'N'    ; have non-cred prod - 1/89*/
    /* MOVE 0 TO CLPREC.IV0IVCID ; no invoice assoc with it*/
   /* ELSE ;*/
  CLPREC.IV0IVCID = KL0OM001.IV0IVCID;
   /* END ;*/
  ;
  CLPREC.XGPCD = CLKREC.XGPCD;
  CLPREC.SY1STNBR = CLKREC.SY1STNBR;
  CLPREC.SY2CLRID = CLKREC.SY2CLRID;
  CLPREC.XDMCD = CLKREC.XDMCD;
    /* xum and xqa added 10-04-90*/
  CLPREC.XQACD = CLKREC.XQACD; /* quality*/
  CLPREC.XUMCD = CLKREC.XUMCD; /* unit of measure*/
  ;
  ;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  while (SQLCA.VAGen_SQLCODE == 0)
    if (CLKREC.CLKCRFL == "Y") /* 072089 check CLKCRFL and 0 price.*/
      if (CLPREC.CLKCLPRC != 0)
        CL0OW01.CLPDEFQ = CL0OW01.CLPDEFQ + CLPREC.CLPDEFQ;
      end
    else
      if (CLPREC.CLKCLPRC == 0)
        CL0OW01.CLPDEFQ = CL0OW01.CLPDEFQ + CLPREC.CLPDEFQ;
      end
    end
    call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
end // end KL0OS93

// fetch kuiprdid for product
Function KL0OS94()
   /* *************************************************************/
   /* *      M A I N T E N A N C E      H I S T O R Y            **/
   /* *----------------------------------------------------------**/
   /* *    DATE    LOGON   REASON                                **/
   /* *  --------  ------  --------------------------------------**/
   /* *  06-14-91  sgorga  DB2 changes.  Replace KU2REC with     **/
   /* *                    KUIREC.  Replace call 'S ' to 'SB'.   **/
   /* *  06-17-91  GDEKCE  EXPAND W04/W05 TABLE TO 1000 LINES.   **/
   /* *  08-18-97  GREDD1  CALL CU1710 INSTEAD OF IO5790 TO GET  **/
   /* *                    CUST-PROD-ID .                        **/
   /* *************************************************************/
  ;
   /* *************************************************************/
   /* *    fetch kuiprdid for each product*/
   /* **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS94"; /* set current process name*/
  ;
  ;
      /* **************************************************/
      /* find customer product id, either from the cl0ow05*/
      /* array (taken off the invoice product record,*/
      /* or from the customer sku record.*/
      /* **************************************************/
  ;
  if (CL0OW04.KUIPRDID[CL0OW05X] != " ") /* have invoice cust prod id*/
     /* or got cust prod id previously*/
    KL0OM010.KUIPRDID = CL0OW04.KUIPRDID[CL0OW05X];
  else
    if (KUCREC.KUCSKIND != " ") /* non-blank means a sku exists*/
       /* **************************************************/
       /* company record read in cl0o050 initialize process*/
       /* says a sku record exists*/
       /* **************************************************/
       /* tcs change begin - 08/18/97*/
      set WCU1710 empty;
      WCU1710-INQUIRY-OPTION = "2"; /* Nike product id look up*/
      WCU1710-IN-CU-CO-ID = KUCREC.KUCCOID; /* company*/
      WCU1710-IN-XGP-GPC-CD = CLAREC.XGPCD; /* g.p.c.*/
      WCU1710-XNX-DEPT-ID-XREF = 0; /* cust dept id cross ref*/
      if (CLAREC.IV0IVCID > 0) /* Get product xref date*/
        WCU1710-CU-PROD-XREF-EDT = IV0REC.IV0IVCDT;
      else
        WCU1710-CU-PROD-XREF-EDT = CLAREC.CLASETDT;
      end
                       /* Product style*/
      WCU1710-IN-SY-STY-NBR = CL0OW05.SY1STNBR[CL0OW05X];
                    /* Product color*/
      WCU1710-IN-SY-COLR-CD-ID = CL0OW05.SY2CLRID[CL0OW05X];
                    /* Product dimension*/
      WCU1710-IN-XDM-DIM-CD = CL0OW05.XDMCD[CL0OW05X];
      WCU1710-IN-SY-SZ-ID = 0; /* zero size id*/
      ;
       /* If quality code is balnk default it to '01'*/
      if (CL0OW04.XQACD[CL0OW05X] != " ") /* Quality code*/
        WCU1710-IN-XQA-QUAL-CD = CL0OW04.XQACD[CL0OW05X];
      else
        WCU1710-IN-XQA-QUAL-CD = "01";
      end
      ;
      call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* get customer product id*/
      if (WCU1710-RETURN-CODE == 0)
        CL0OW04.KUIPRDID[CL0OW05X] = WCU1710.CU-CUST-PROD-ID[1];
         /* tcs change end -08/17/97*/
      else
        CL0OW04.KUIPRDID[CL0OW05X] = " ";
      end
    end
  end
  ;
  ;
  ;
end // end KL0OS94

// fetch override for ivc prd
Function KL0OS95()
   /* *************************************************************/
   /* *    fetch invoice ovrride for each product with price*/
   /* *    from invoice*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS95"; /* set current process name*/
  ;
  ;
  ;
  call "IO2950" ("SS", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(4);
      CLXREC.CLXERRF = "Y";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0OS95";
      TA1REC.TA1LOCAT[4] = "IO2950";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VIVOVR01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end
  ;
  ;
  call "IO2950" ("SN", SQLCA, CL6REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "CL0OS95";
      TA1REC.TA1LOCAT[4] = "IO2950";
      TA1REC.TA1DBASE = "DCLAIM";
      TA1REC.TA1TBLVU = "VIVOVR01";
      CLXREC.XXXWDTE = CLAREC.CLACLMNB;
      TA1REC.TA1TBLKE = CLXREC.XXXWDTE;
      XPCL010();
    end
  end
  ;
  ;
end // end KL0OS95

// sum defit and rtsit rtn qty
Function KL0OS96()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS96"; /* set current process name*/
  ;
  CL0OW01.CLNRTSQ = 0;
  CL0OW01.CLPDEFQ = 0;
  ;
   /* if user has the product showing twice (once with 'a',*/
   /* once with 'nc'),  the 'nc' should not show the return*/
   /* qty associated with 'a'.*/
  ;
   /* if cl0ow05.cl0owtrn(cl0ow05x) eq 'nc'*/
    /* if cl0ow05.sy1stnbr(cl0ow05x) in cl0ow05.sy1stnbr*/
  ;
   /* end*/
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
  CLNREC.IV0IVCID = KL0OM001.IV0IVCID;
  CLNREC.XGPCD = KL0OM001.XGPCD;
  CLNREC.SY1STNBR = IV3REC.SY1STNBR;
  CLNREC.SY2CLRID = IV3REC.SY2CLRID;
  CLNREC.XDMCD = IV3REC.XDMCD;
  CLNREC.XQACD = IV3REC.XQACD; /* quality*/
  CLNREC.XUMCD = IV3REC.XUMCD; /* unit of measure*/
  ;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ;
    CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ;
    if (CLNREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
      CL0OW05.CL0OWUOM[CL0OW05X] = "P"; /* show variable uom*/
    end
    call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* sum CLPREC.CLPDEFQ*/
   /* **************************************/
  ;
  CLPREC.CLACLMNB = CLAREC.CLACLMNB;
  CLPREC.CLHSEQNB = -1;
  CLPREC.CL2ISNBR = -1;
  CLPREC.IV0IVCID = KL0OM001.IV0IVCID;
  CLPREC.XGPCD = KL0OM001.XGPCD;
  CLPREC.SY1STNBR = IV3REC.SY1STNBR;
  CLPREC.SY2CLRID = IV3REC.SY2CLRID;
  CLPREC.XDMCD = IV3REC.XDMCD;
  ;
  ;
  call "IO1350" ("S1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  while (SQLCA.VAGen_SQLCODE == 0)
    CL0OW01.CLPDEFQ = CL0OW01.CLPDEFQ + CLPREC.CLPDEFQ;
    call "IO1350" ("N1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1350" ("C1", SQLCA, CLPREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VDEFIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
end // end KL0OS96

// sum defit and rtsit rtn qty
Function KL0OS97()
   /* *************************************************************/
   /* *                                                          **/
   /* *       SELECT THE QUANTITIES FROM CLNREC AND CLPREC       **/
   /* *         TO CALCULATE THE TOTAL RETURN QUANTITY           **/
   /* *                                                          **/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OS97"; /* set current process name*/
  ;
  ;
   /* **************************************/
   /* sum CLNREC.CLNRTSQ*/
   /* **************************************/
  ;
  CLNREC.CLACLMNB = CLAREC.CLACLMNB;
  CLNREC.CLHSEQNB = -1;
  CLNREC.CL2ISNBR = -1;
  CLNREC.IV0IVCID = KL0OM010.IV0IVCID;
  CLNREC.XGPCD = KL0OM010.XGPCD;
  CLNREC.SY1STNBR = KL0OM010.SY1STNBR;
  CLNREC.SY2CLRID = KL0OM010.SY2CLRID;
  CLNREC.XDMCD = KL0OM010.XDMCD;
  CLNREC.XQACD = KL0OM010.XQACD;
  CLNREC.XUMCD = KL0OM010.XUMCD;
  ;
  CL0OW01.CLNRTSQ = 0;
  call "IO1330" ("SS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (CLNREC.SY5SZID == IV4REC.SY5SZID)
      CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNRTSQ; /* credit qty*/
      CL0OW01.CLNRTSQ = CL0OW01.CLNRTSQ + CLNREC.CLNNCRQ; /* non credit qty*/
      if (CLNREC.XUMCD != CL0OW05.XUMCD[CL0OW05X])
        CL0OW05.CL0OWUOM[CL0OW05X] = "P"; /* show variable uom*/
      end
      call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
    else
      call "IO1330" ("SN", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
    end
  end
  ;
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
  ;
  call "IO1330" ("CS", SQLCA, CLNREC) {isNoRefresh = yes, isExternal = yes}; /* Actual item*/
  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VRTSIT01";
    XPCL010(); /* Perform abend routine for claims*/
  end
  ;
   /* **************************************/
   /* defectives don't have sizes*/
   /* **************************************/
  ;
  ;
end // end KL0OS97

// edit brand code
Function KL0OSBC()
   /* *************************************************************/
  ;
    /* Edit the product brand code for customer-product legal*/
    /* entity mis-match.*/
  ;
    /* Maintenance History:*/
    /* 05-31-90 CHELLM created*/
    /* 06-01-93 JCAREY allowed side1 brands (05) to be attached*/
    /* a nike claim. side1 now part of nike.*/
   /* *************************************************************/
  ;
  CLXREC.CLXCPROC = "CL0OSBC";
  ;
  if (CL0OW05.OP2LNINB[CL0OW05X] > 0) /* if product from invoice*/
    return; /* don't have to edit*/
  else
      /* next sentence*/
  end
  ;
   /* If either the claim or the invoice was set up prior*/
   /* to 06-01-90 it doesnt have a brand code, so make sure*/
   /* the legal entity of customer match the legal entity of*/
   /* the product.*/
  if (CLAREC.XBCCD == " ")
    ;
    if (CLWREC.XLECD == "01") /* If Nike Customer*/
      if (SYCREC.XBCCD == "01") /* and not Nike Product*/
                                 /* ; Product XLE is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        CL0OW01.CL0OWPSW = "Y";
        KL0OM001.XXXERRID = "KL0OSBC";
        set KL0OM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        set KL0OM001.SY2CLRID[CLXLINEX] modified, bold;
        CL0OW05.SY1STNBR[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.SY2CLRID[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.XDMCD[CL0OW05X] = " "; /* force re-edit of product*/
        return;
      end
    end
    ;
    if (CLWREC.XLECD == "05") /* If Side 1 Customer*/
      if (SYCREC.XBCCD == "05" /* and Side 1 Product*/
       || SYCREC.XBCCD == "06" /* or Relay  product*/
       || SYCREC.XBCCD == "07") /* or i.e    product*/
                                    /* then Product XLE is OK*/
      else
        converseLib.validationFailed(634); /* Product's XLE must match Cust XLE*/
        CLXREC.CLXERRF = "Y";
        CL0OW01.CL0OWPSW = "Y";
        KL0OM001.XXXERRID = "KL0OSBC";
        set KL0OM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        set KL0OM001.SY2CLRID[CLXLINEX] modified, bold;
        CL0OW05.SY1STNBR[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.SY2CLRID[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.XDMCD[CL0OW05X] = " "; /* force re-edit of product*/
        return;
      end
    end
    ;
     /* check the division code value against allowable*/
     /* division codes for the claims order type.*/
    ;
    if (CLAREC.XOTCD in XOTTBL.XOTCD)
      ;
      if (SYCREC.XDVCD1 == XOTTBL.XDVCD1[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD2[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD3[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD4[sysVar.arrayIndex]
       || SYCREC.XDVCD1 == XOTTBL.XDVCD5[sysVar.arrayIndex])
         /* next sentence*/
      else
        converseLib.validationFailed(637); /* the product brand must match the*/
        CLXREC.CLXERRF = "Y"; /* claims division or new division*/
        CL0OW01.CL0OWPSW = "Y";
        KL0OM001.XXXERRID = "KL0OSBC";
        set KL0OM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        set KL0OM001.SY2CLRID[CLXLINEX] modified, bold;
        CL0OW05.SY1STNBR[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.SY2CLRID[CL0OW05X] = " ";
                                   /* force re-edit of product*/
        CL0OW05.XDMCD[CL0OW05X] = " "; /* force re-edit of product*/
      end
    else
      converseLib.validationFailed(096); /* order type not on system table*/
      CLXREC.CLXERRF = "Y";
    end
    ;
  else
    ;
    if (SYCREC.XBCCD != CLAREC.XBCCD) /* if brand codes don't match*/
      if (SYCREC.XBCCD == "01" /* if nike product and side1*/
       && CLAREC.XBCCD == "05") /* brand skip check 6/1/93*/
      else
        converseLib.validationFailed(611); /* Product brand must match claim brand*/
        CLXREC.CLXERRF = "Y";
        CL0OW01.CL0OWPSW = "Y";
        KL0OM001.XXXERRID = "KL0OSBC";
        set KL0OM001.SY1STNBR[CLXLINEX] cursor, modified, bold;
        set KL0OM001.SY2CLRID[CLXLINEX] modified, bold;
        CL0OW05.SY1STNBR[CL0OW05X] = " "; /* force re-edit of product*/
        CL0OW05.SY2CLRID[CL0OW05X] = " "; /* force re-edit of product*/
        CL0OW05.XDMCD[CL0OW05X] = " "; /* force re-edit of product*/
        return;
      end
    end
    ;
  end
  ;
  ;
  ;
end // end KL0OSBC

//*** RECORD=CL0OW01 ****
// hold working storage values for the application
// 
// Maintenance History:
// Date   By     Why
// 072089 bcourt add SQLCODE and CLKCRFL, use in CL0O335
// 102892 bcourt Re-size WINB from bin 4 to bin 9 to hold
//               full invoice number.
// ***********************
Record CL0OW01 type basicRecord
  10 CL0OWNOP CL0OWNOP ; 
  10 CL0OWICT CL0OWICT ; 
  10 CL0OWINX CL0OWINX ; 
  10 CL0OWINB CL0OWINB ; 
  10 CL0OWIXM CL0OWIXM ; 
  10 CL0OWCIX CL0OWCIX ; 
  10 CL0OW02X CL0OW02X ; 
  10 CL0OW05X CL0OW05X ; 
  10 CL0OWNBR CL0OWNBR ; 
  10 CL0OWNUM CL0OWNUM ; 
    15 CL0OWINT CL0OWINT ; 
    15 CL0OWREM CL0OWREM ; 
  10 CL0OWCN1 CL0OWCN1 ; 
  10 CL0OWCN2 CL0OWCN2 ; 
  10 CL0OWWK1 CL0OWWK1 ; 
  10 CL0OWWK2 CL0OWWK2 ; 
  10 CL0OWWK3 CL0OWWK3 ; 
  10 CL0OWHVR CL0OWHVR ; 
  10 CL0OWHPO CL0OWHPO ; 
  10 CL0OWPIN CL0OWPIN ; 
  10 CL0OWPOI CL0OWPOI ; 
  10 CL0OWNIR CL0OWNIR ; 
  10 CL0OWINQ CL0OWINQ ; 
  10 CL0OWSWR CL0OWSWR ; 
  10 CL0OWPSW CL0OWPSW ; 
  10 CL0OWAAF CL0OWAAF ; 
  10 CL0OWUPA CL0OWUPA ; 
  10 CL0OWEFL CL0OWEFL ; 
  10 CL0OWMSG CL0OWMSG ; 
  10 CL0OWTSQ CL0OWTSQ ; 
  10 CL0OWTCQ CL0OWTCQ ; 
  10 CL0OWTAQ CL0OWTAQ ; 
  10 CL0OWTRQ CL0OWTRQ ; 
  10 CL0OWTCV CL0OWTCV ; 
  10 CL0OWPRC CL0OWPRC ; 
  10 CL0OWPCP CL0OWPCP ; 
  10 CL0OWPED CL0OWPED ; 
  10 CL0OWCLP CL0OWCLP ; 
  10 CL0OWSTP CL0OWSTP ; 
  10 IV0IVCID IV0IVCID ; 
  10 IVANBLFL IVANBLFL ; 
  10 SP5SZPR SP5SZPR ; 
  10 XATCD XATCD ; 
  10 CLIADVSQ CLIADVSQ ; 
  10 CLADBOCL CLADBOCL ; 
  10 CLADJIND CLADJIND ; 
  10 CLAESTVL CLAESTVL ; 
  10 CLKAUTHQ CLKAUTHQ ; 
  10 CLNRTSQ CLNRTSQ ; 
  10 CLPDEFQ CLPDEFQ ; 
  10 CLJRAIND CLJRAIND ; 
  10 CL0OWNOS CL0OWNOS ; 
  10 CL0OW03X CL0OW03X ; 
  10 CL0OWSSQ CL0OWSSQ ; 
  10 CL0OWSCQ CL0OWSCQ ; 
  10 CL0OWSAQ CL0OWSAQ ; 
  10 CL0OWSRQ CL0OWSRQ ; 
  10 CL0OWSCV CL0OWSCV ; 
  10 CL0OWXOT CL0OWXOT ; 
  10 CL0OWSID CL0OWSID ; 
  10 CL0OWSOI CL0OWSOI ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 CLKNBRSZ CLKNBRSZ ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 CLKCRFL CLKCRFL ; 
  10 CL0OWMAX CL0OWMAX ; 
end // end CL0OW01

//*** RECORD=CL0OW03 ****
// ****************  Claim prd Code Table  *******************
// 
// this record is used to hold all sizes that will appear
// on the screen.
// 
// 
// DB2 Table:           DCLAIM.Vcladj01
//                      dclaim.vraitm01
//                      dinvc.vivitm01
// 
// Copylib Member:      DCL00223
//                      dcl00214
//                      dcl00189
// 
// I/O Mod:             IO1370
//                      io1280
//                      io1100
// 
// Key to DB2 Table:    varies
// 
// Date Created:        07/01/88
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 07-01-88   lholco    Initial record creation
// 
// ***********************
Record CL0OW03 type basicRecord
  5 CL0OW3GP CL0OW3GP [40] ; 
    10 CL0OWSFL CL0OWSFL ; 
    10 CL0OMSEL CL0OMSEL ; 
    10 CL0OMTRN CL0OMTRN ; 
    10 CLICRDFL CLICRDFL ; 
    10 OP2LNINB OP2LNINB ; 
    10 SY5SZID SY5SZID ; 
    10 SY4IDDSC SY4IDDSC ; 
    10 IV4SHPQ IV4SHPQ ; 
    10 IV4NUP IV4NUP ; 
    10 IV4GUP IV4GUP ; 
    10 CLKRQTQ CLKRQTQ ; 
    10 CLKAUTHQ CLKAUTHQ ; 
    10 CLMTRTSQ CLMTRTSQ ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 CLNGRPRC CLNGRPRC ; 
    10 CLNNTPRC CLNNTPRC ; 
    10 CLKCLPRC CLKCLPRC ; 
    10 CLAESTVL CLAESTVL ; 
    10 CLKCRFL CLKCRFL ; 
    10 CL0OWUPK CL0OWUPK ; 
    10 CL0OWUPR CL0OWUPR ; 
    10 CL0OWFPR CL0OWFPR ; 
    10 CL0OWUOM CL0OWUOM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0OW03

//*** RECORD=CL0OW04 ****
// ****************  Claim prd Code Table  *******************
// 
// this record is used to hold all producsts that will appear
// on the screen.
// This record appears to hold the previous copy (image) of the
// fields on the map.
// 
// DB2 Table:           DCLAIM.Vcladj01
//                      dclaim.vraitm01
//                      dinvc.vivitm01
// 
// Copylib Member:      DCL00223
//                      dcl00214
//                      dcl00189
// 
// I/O Mod:             IO1370
//                      io1280
//                      io1100
// 
// Key to DB2 Table:    varies
// 
// Date Created:        07/01/88
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 06-17-91   GDECKE    MOVED SOME FIELDS FROM CL0OW05 TO
//                      CL0OW04 IN ORDER TO EXPAND OCCURANCES
//                      FROM 500 TO 1000
// ;
// ;    END OF LIST
// ***********************************************************
// ;
// ***********************
Record CL0OW04 type basicRecord
  5 CL0OW5GC CL0OW5GC [1000] ; 
    10 IV3GLNUP IV3GLNUP ; 
    10 CLKRQTQ CLKRQTQ ; 
    10 CLKAUTHQ CLKAUTHQ ; 
    10 CLMTRTSQ CLMTRTSQ ; 
    10 CLKPRCFF CLKPRCFF ; 
    10 CLNGRPRC CLNGRPRC ; 
    10 CLNNTPRC CLNNTPRC ; 
    10 CLKCLPRC CLKCLPRC ; 
  5 CL0OW5GD CL0OW5GD [1000] ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 KUIPRDID KUIPRDID ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 XQACD XQACD ; 
end // end CL0OW04

//*** RECORD=CL0OW05 ****
// ****************  Claim prod Code Table  ******************
// 
// this record is used to hold all prod's that will appear
// on the screen.
// 
// 
// DB2 Table:           DCLAIM.Vcladj01
//                      dclaim.vraitm01
//                      dinvc.vivitm01
// 
// Copylib Member:      DCL00223
//                      dcl00214
//                      dcl00189
// 
// I/O Mod:             IO1370
//                      io1280
//                      io1100
// 
// Key to DB2 Table:    varies
// 
// Date Created:        07/01/88
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 07-01-88   lholco    Initial record creation
// 06-17-91   GDECKE    MOVE SOME CL0OW05 FIELDS TO CL0OW04
//                      TO INCREASE OCCURS FROM 500 TO 1000.
// 10-29-92   BCOURT    Change CL0O WINB to full integer to
//                      hold full invoice number.
// ***********************
Record CL0OW05 type basicRecord
  5 IV0IVCID IV0IVCID ; 
  5 CL0OWINB CL0OWINB ; 
  5 CL0OWEUM CL0OWEUM ; 
  5 CL0OWXRQ CL0OWXRQ ; 
  5 CL0OW5GP CL0OW5GP [1000] ; 
    10 CL0OWSFL CL0OWSFL ; 
    10 CL0OMSEL CL0OMSEL ; 
    10 CL0OMTRN CL0OMTRN ; 
    10 CLICRDFL CLICRDFL ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY5SZID SY5SZID ; 
    10 CLKNBRSZ CLKNBRSZ ; 
    10 OP2LNINB OP2LNINB ; 
    10 IV3LNSQ IV3LNSQ ; 
    10 IV3NLNUP IV3NLNUP ; 
  5 CL0OW5GB CL0OW5GB [1000] ; 
    10 CLAESTVL CLAESTVL ; 
    10 XUMCD XUMCD ; 
    10 CL0OWERR CL0OWERR ; 
    10 CLKWHSXF CLKWHSXF ; 
    10 YCECD YCECD ; 
    10 CLKCRFL CLKCRFL ; 
    10 CL0OWUPK CL0OWUPK ; 
    10 CL0OWUPR CL0OWUPR ; 
    10 CL0OWFPR CL0OWFPR ; 
    10 CL0OWLVL CL0OWLVL ; 
    10 CL0OWPPF CL0OWPPF ; 
    10 CL0OWUOM CL0OWUOM ; 
    10 CL0OWUMF CL0OWUMF ; 
    10 CL0OWUWF CL0OWUWF ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end CL0OW05

//*** RECORD=CL0OW06 ****
// hold up to 200 invoices associated with claim.
// ***********************
Record CL0OW06 type basicRecord
  5 CL0OW6GP CL0OW6GP ; 
    10 IV0PARTN IV0PARTN [200] ; 
    10 IV0IVCID IV0IVCID [200] ; 
    10 YITCD YITCD [200] ; 
end // end CL0OW06

//*** RECORD=CL0OW07 ****
// IO1280:
// pass calculated sums from iomod.  if no rows exist
// that fit the where clause then null values are passed in
// the sum fields. for this reason the indicator fields need to
// be checked.  if the indicator is negative or zero move zero
// to the sum field.
//   DATE    BY    WHY
// 08-11-89 bcourt add CLAESTVL = sum of sizes for a product.
// ***********************
Record CL0OW07 type basicRecord
  10 CL0OWSQL CL0OWSQL ; 
  10 CL0OWCN1 CL0OWCN1 ; 
  10 CL0OWIN1 CL0OWIN1 ; 
  10 CLAESTVL CLAESTVL ; 
  10 CL0OWIN2 CL0OWIN2 ; 
end // end CL0OW07

//*** RECORD=CL0OW08 ****
// ****************  Claim prd Code Table  *******************
// 
// this record is used to hold all producsts that will appear
// on the screen.
// THIS IS THE THIRD OF THREE PARTS THAT CONTAIN THE PRODUCT
// TABLE. IT WAS SUBDIVIDED BECAUSE OF TABLE SIZE PROBLEMS.
// THE FIRST TWO PARTS ARE CL0OW04,CL0OW05.
// 
// This record appears to hold the previous copy (image) of the
// fields on the map.
// 
// DB2 Table:           DCLAIM.Vcladj01
//                      dclaim.vraitm01
//                      dinvc.vivitm01
// 
// Copylib Member:      DCL00223
//                      dcl00214
//                      dcl00189
// 
// I/O Mod:             IO1370
//                      io1280
//                      io1100
// 
// Key to DB2 Table:    varies
// 
// Date Created:        07/01/88
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 06-17-91   GDECKE    MOVED SOME FIELDS FROM CL0OW05 TO
//                      CL0OW04 IN ORDER TO EXPAND OCCURANCES
//                      FROM 500 TO 1000
// ;
// ;    END OF LIST
// ***********************************************************
// ;
// ***********************
Record CL0OW08 type basicRecord
  5 CL0OW8GD CL0OW8GD [1000] ; 
    10 XEGCD XEGCD ; 
    10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    10 OP-BK-YR OP-BK-YR ; 
    10 OP-BK-MO OP-BK-MO ; 
end // end CL0OW08

// selection field
DataItem CL0OMSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// transaction field a,c,d,nc
DataItem CL0OMTRN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for screen array
DataItem CL0OW02X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for size array
DataItem CL0OW03X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for product array
DataItem CL0OW05X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for cl0ow03 record
DataItem CL0OW3GP char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group-B level for cl0ow05 rec
DataItem CL0OW5GB char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group-C level for cl0ow04 rec
DataItem CL0OW5GC char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group-D level for cl0ow04 rec
DataItem CL0OW5GD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for cl0ow05 record
DataItem CL0OW5GP char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for cl0ow06 record
DataItem CL0OW6GP char(1400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group-D level for CL0OW04 REC
DataItem CL0OW8GD char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n authorize all products
DataItem CL0OWAAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index valu for m005 cursor
DataItem CL0OWCIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by style,color
DataItem CL0OWCLP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for db item
DataItem CL0OWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line counter
DataItem CL0OWCN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n product exists flag
DataItem CL0OWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product exists err flag
DataItem CL0OWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// uom code needs to be edited
DataItem CL0OWEUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n freeze price for c,d,nc
DataItem CL0OWFPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have price override
DataItem CL0OWHPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n have returns for invoice
DataItem CL0OWHVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice count
DataItem CL0OWICT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// indicator for db item
DataItem CL0OWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// result indicator on value
DataItem CL0OWIN2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for curr invoice number
DataItem CL0OWINB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n inquiry only flag
DataItem CL0OWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// integer part of division
DataItem CL0OWINT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice index
DataItem CL0OWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// extra index for array
DataItem CL0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prd worked at size or prd lvl
DataItem CL0OWLVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max number of products
DataItem CL0OWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xum/xqa override message
DataItem CL0OWMSG char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold +/-1 for multiplication
DataItem CL0OWNBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n new invc nbr requested
DataItem CL0OWNIR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of products
DataItem CL0OWNOP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of sizes
DataItem CL0OWNOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold result of division
DataItem CL0OWNUM num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product cost/price pct
DataItem CL0OWPCP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod price effective date
DataItem CL0OWPED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n have products on invoice
DataItem CL0OWPIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n this product on invoice
DataItem CL0OWPOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n prepack flag
DataItem CL0OWPPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-xum-price-conversion
DataItem CL0OWPRC decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n have problem with edit
DataItem CL0OWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remainder part of division
DataItem CL0OWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum for clkauthq (auth)sz
DataItem CL0OWSAQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum for clkrqtq (cust req)sz
DataItem CL0OWSCQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum for claestvl (clm value)sz
DataItem CL0OWSCV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record source flag
DataItem CL0OWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id
DataItem CL0OWSID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n size on invoice
DataItem CL0OWSOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql selection
DataItem CL0OWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum for clngrprc (rtn)sz
DataItem CL0OWSRQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum for iv3lnsq (qty shpd)sz
DataItem CL0OWSSQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default price by style
DataItem CL0OWSTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// y/n have shown warning
DataItem CL0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total for clkauthq (auth)prd
DataItem CL0OWTAQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for clkrqtq(cust req)prd
DataItem CL0OWTCQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for claestvl(clm value)p
DataItem CL0OWTCV decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for clngrprc (rtn)prd
DataItem CL0OWTRQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total for iv3lnsq(qty shpd)prd
DataItem CL0OWTSQ decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit of measure changed fl
DataItem CL0OWUMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p/n show variable uom
DataItem CL0OWUOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// y/n update clarec
DataItem CL0OWUPA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// a,c,x udate clkrec
DataItem CL0OWUPK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// a,c,x update clrrec
DataItem CL0OWUPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicate warning on uom code
DataItem CL0OWUWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working field 1
DataItem CL0OWWK1 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field 2
DataItem CL0OWWK2 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field 3
DataItem CL0OWWK3 decimal(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order type index
DataItem CL0OWXOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field to check req qty
DataItem CL0OWXRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

