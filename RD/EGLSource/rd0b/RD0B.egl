package rd0b;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import rd.common.RD1COPNO;
import rd.common.RD1DOCNO;
import rd.common.RD1FREQC;
import rd.common.RD2DEPT;
import rd.common.RD2NAME;
import rd.common.RD2REC;
import rd.common.RD2RECNO;
import rd.common.RD3LOCNO;
import rd.common.RD3NAME;
import rd.common.RD3REC;
import rd.common.RD4REC;
import rd.common.RD5FLDX;
import rd.common.RD5FLDX1;
import rd.common.RD5FLDX2;
import rd.common.RD5FLDX3;
import rd.common.RD5FLDX4;
import rd.common.RD5FLDX5;
import rd.common.RD5REC;
import rd.common.RDWREC;
Program RD0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  RD0BW1 RD0BW1; // record
  RD1REC RD1REC; // record
  RD2REC RD2REC; // record
  RD3REC RD3REC; // record
  RD4REC RD4REC; // record
  RD5REC RD5REC; // record
  RDWREC RDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use RD0BM.RD0BM001,  // forms
      RD0BM.RD0BM002, 
      RD0BM.RD0BM003, 
      RD0BM.RD0BM004, 
      RD0BM.RD0BM005, 
      RD0BM.RD0BM006, 
      RD0BM.RD0BM007, 
      RD0BM.RD0BM008
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    RD0B001: RD0B001();



       /* *** flow to converse*/


    goto RD0B002;


    RD0B002: RD0B002();


        /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B002;
    end

        /* *** branch to selected option application*/

    if (RD0BM001.RD0BMOPT == 1)
      goto RD0B010;
    end

    if (RD0BM001.RD0BMOPT == 2)
      goto RD0B020;
    end

    if (RD0BM001.RD0BMOPT == 3)
      goto RD0B030;
    end

    if (RD0BM001.RD0BMOPT == 4)
      goto RD0B040;
    end

    if (RD0BM001.RD0BMOPT == 5)
      goto RD0B050;
    end


    RD0B010: RD0B010();


    RD0B011: RD0B011();


         /* *** if errors, branch back to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B010;
    end

    goto RD0B013;


    RD0B013: RD0B013();


         /* *** if there are errors return to  converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B011;
    end

    RD0BW1.RD1SEQNO = 0;

    RD0BM002.RD2NAME = RD2REC.RD2NAME;

    goto RD0B016;


    RD0B016: RD0B016();

        /* **** if there are errors redisplay the screen*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B011;
    end

    RD0B014: RD0B014();


         /* ***  if there are errors, branch to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B011;
    end
    if (RD1REC is noRecordFound)
      goto RD0B015;
    else
      if (RD1REC is ioError)
        goto RD0B011;
      end
    end

    goto RD0B014;


    RD0B015: RD0B015();


         /* *** branch back to converse*/

    goto RD0B011;

    RD0B020: RD0B020();
    RD0B021: RD0B021();


         /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B021;
    end

    goto RD0B022;


    RD0B022: RD0B022();


         /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B021;
    end


         /* **** build screen for next converse*/

    move RD1REC to RD0BM004 byName;

    if (RD1REC.RD1FICHE == "F")
      RD0BM004.RD1FICHE = "Y";
    else
      RD0BM004.RD1FICHE = "N";
    end

         /* **** branch to recip/location inq*/

    goto RD0B060;


    RD0B023: RD0B023();


         /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0B023;
    end

        /* *** validate recipient number is modified or not*/

    goto RD0B024;

         /* *** validate location for recipient*/

    goto RD0B025;

         /* *** branch to update process*/

    goto RD0B026;


    RD0B024: RD0B024();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B023;
    end

    goto RD0B025;


    RD0B025: RD0B025();


         /* *** if there are errors return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B023;
    end




    goto RD0B026;


    RD0B026: RD0B026();


         /* *** if there are errors, branch to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B021;
    end

    goto RD0B027;


    RD0B027: RD0B027();


         /* *** branch to converse*/

    goto RD0B021;


    RD0B030: RD0B030();
    RD0B031: RD0B031();


         /* *** if there are errors, branch to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B031;
    end

    goto RD0B032;


    RD0B032: RD0B032();


         /* ***  if there are errors, branch to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B031;
    end


         /* ***  branch to recip/location inq*/

    goto RD0B060;


    RD0B033: RD0B033();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B033;
    end

         /* *** if delete flag is selected, branch to delete logic*/

    if (RD0BM005.RD0BMYN == "Y")
      goto RD0B034;
    end

         /* *** delete was cancelled, return to converse*/

    set RD0BM003 initial;

    set RD0BM005 initial;

    goto RD0B031;


    RD0B034: RD0B034();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B031;
    end

    goto RD0B035;


    RD0B035: RD0B035();


         /* *** return to converse*/

    goto RD0B031;


    RD0B040: RD0B040();
    RD0B041: RD0B041();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B041;
    end

    goto RD0B042;


    RD0B042: RD0B042();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B041;
    end


         /* *** branch to recip/loc inquiry*/

    goto RD0B060;


    RD0B043: RD0B043();


         /* *** if new loc # entered, branch to inquiry*/

    if (RD0BM006.RD1ACRO is modified
     || RD0BM006.RD1REPNO is modified
     || RD0BM006.RD1SEQNO is modified)
      RD0BM003.RD1ACRO = RD0BM006.RD1ACRO;
      RD0BM003.RD1REPNO = RD0BM006.RD1REPNO;
      RD0BM003.RD1SEQNO = RD0BM006.RD1SEQNO;
      goto RD0B042;
    end

    goto RD0B043;


    RD0B050: RD0B050();
    RD0B051: RD0B051();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B051;
    end

         /* *** establish cursor position for next screen*/

    if (RD0BM007.RD0BMOPT == 1)
      set RD0BM008.RD5SORT1 cursor;
    end

    if (RD0BM007.RD0BMOPT == 6)
      set RD0BM008.RD5SORT1 cursor;
    end

    goto RD0B052;


    RD0B052: RD0B052();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B052;
    end

    goto RD0B053;


    RD0B053: RD0B053();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0B051;
    end

    goto RD0B054;

    RD0B054: RD0B054();


         /* *** return to converse*/

    goto RD0B051;

    RD0B060: RD0B060();


        /* *** go to location inq*/

    goto RD0B070;

    RD0B070: RD0B070();



         /* *** branch back to change converse*/

    if (RD0BM001.RD0BMOPT == 2)
      goto RD0B023;
    end

    if (RD0BM001.RD0BMOPT == 3)
      goto RD0B033;
    end

    if (RD0BM001.RD0BMOPT == 4)
      goto RD0B043;
    end
  end // end main
end // end RD0B

// first time thru logic
Function RD0B001()


     /* ***  entry process for menu security system*/



  XSENTRY();


end // end RD0B001

// distrib maintenance screen
Function RD0B002()


       /* ***initialize screen variables*/

  RD0BM001.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM001.RD0BMPRC = "RD0B002";
  RD0BM001.CATOAP = " ";
  RD0BM001.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM001 ;


  RD0BM001.VAGen_EZEMSG = " ";
  RD0BM001.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS10();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS15();
  end


end // end RD0B002

// check fast path entry
Function RD0B010()
end // end RD0B010

// add distrib screen
Function RD0B011()


       /* ***initialize screen variables*/

  RD0BM002.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM002.RD0BMPRC = "RD0B011";
  RD0BM002.CATOAP = " ";
  RD0BM002.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM002 ;


  RD0BM002.VAGen_EZEMSG = " ";
  RD0BM002.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS20();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS25();
  end


end // end RD0B011

// validate recipient number
Function RD0B013()


       /* *** intialize key for recipient inquiry*/

  RD2REC.RD2RECNO = RD0BM002.RD2RECNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD2REC ;
  end


       /* *** check for errors on recipient file inquiry*/

  RD0BS2X();

       /* *** if there are errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS25();
  end


end // end RD0B013

// obtain next sequence number
Function RD0B014()


       /* *** intialize key for distribution inquiry*/

  RD1REC.RD1ACRO = RD0BM002.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM002.RD1REPNO;

  RD0BW1.RD1SEQNO = RD0BW1.RD1SEQNO + 1;
  RD1REC.RD1SEQNO = RD0BW1.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC ;
  end


       /* *** check for errors on distribution file inquiry*/

  RD0BS2Y();

end // end RD0B014

// add distrib record
Function RD0B015()


       /* *** add the distribution record*/

  move RD0BM002 to RD1REC byName;

  if (RD0BM002.RD1FICHE == "Y")
    RD1REC.RD1FICHE = "F";
  else
    RD1REC.RD1FICHE = " ";
  end

  RD1REC.RD1SEQNO = RD0BW1.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    add RD1REC ;
  end


      /* *** check for errors in distribution add*/

  RD0BS2Z();


end // end RD0B015

// validate new loc number
Function RD0B016()


       /* *** intialize key for location inquiry*/

  RD3REC.RD3LOCNO = RD2REC.RD3LOCNO;

   /* OVE 'N' TO RD0BW1.ERRORFLG;*/


  try
    get RD3REC ;
  end


       /* *** check for errors on location file inquiry*/

  RD0BS2V();

       /* *** IF THERE ARE ERRORS SET MAP FIELDS MODIFIED*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS25();
  end

end // end RD0B016

// check fast path entry
Function RD0B020()
end // end RD0B020

// change distrib screen -1
Function RD0B021()


       /* ***initialize screen variables*/


  RD0BM003.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM003.RD0BMPRC = "RD0B021";
  RD0BM003.RD0BMHDG = "CHANGE  DISTRIBUTION";
  RD0BM003.CATOAP = " ";
  RD0BM003.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM003 ;


  RD0BM003.VAGen_EZEMSG = " ";
  RD0BM003.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS30();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS35();
  end


end // end RD0B021

// display distribution record
Function RD0B022()


       /* *** intialize key for distribution inquiry*/

  RD1REC.RD1ACRO = RD0BM003.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM003.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM003.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC ;
  end

       /* *** check for errors on distribution file inquiry*/

  RD0BS3W();

end // end RD0B022

// change distrib screen-2
Function RD0B023()


       /* ***initialize screen variables*/

  RD0BM004.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM004.RD0BMPRC = "RD0B023";
  RD0BM004.CATOAP = " ";
  RD0BM004.CAITEM = " ";

  RD0BM004.RD2NAME = RD0BW1.RD2NAME;
  RD0BM004.RD3NAME = RD0BW1.RD3NAME;
  RD0BM004.RD2DEPT = RD0BW1.RD2DEPT;
  RD0BM004.RD2RECNO = RD0BW1.RD2RECNO;
  RD0BM004.RD3LOCNO = RD0BW1.RD3LOCNO;

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";

  converse RD0BM004 ;


  RD0BM004.VAGen_EZEMSG = " ";
  RD0BM004.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS40();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS45();
  end



end // end RD0B023

// validate new rec number
Function RD0B024()


       /* *** intialize key for recipient inquiry*/

  RD2REC.RD2RECNO = RD0BM004.RD2RECNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD2REC ;
  end


       /* *** check for errors on recipient file inquiry*/

  RD0BS4X();




       /* *** check for errors in department field of recip rec*/

  RD0BS4Z();


end // end RD0B024

// validate new loc number
Function RD0B025()


       /* *** intialize key for location inquiry*/

  RD3REC.RD3LOCNO = RD2REC.RD3LOCNO;

   /* OVE 'N' TO RD0BW1.ERRORFLG;*/


  try
    get RD3REC ;
  end


       /* *** check for errors on location file inquiry*/

  RD0BS4Y();


end // end RD0B025

// lock distrib record
Function RD0B026()


       /* *** initialize the distib file key*/

  RD1REC.RD1ACRO = RD0BM004.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM004.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM004.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC forUpdate ;
  end


     /* *** check for errors on distrib file update*/

  RD0BS3X();


end // end RD0B026

// replace distrib record
Function RD0B027()


       /* *** move map fields to distribution record*/


  move RD0BM004 to RD1REC byName;

  if (RD0BM004.RD1FICHE == "Y")
    RD1REC.RD1FICHE = "F";
  else
    RD1REC.RD1FICHE = " ";
  end

  RDWREC.RDWERFLG = "N";


  try
    replace RD1REC ;
  end


     /* *** check for errors on distrib file replace*/

  RD0BS3Y();


end // end RD0B027

// check fast path entry
Function RD0B030()
end // end RD0B030

// delete distrib screen-1
Function RD0B031()


       /* ***initialize screen variables*/


  RD0BM003.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM003.RD0BMPRC = "RD0B031";
  RD0BM003.RD0BMHDG = "DELETE  DISTRIBUTION";
  RD0BM003.CATOAP = " ";
  RD0BM003.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM003 ;


  RD0BM003.VAGen_EZEMSG = " ";
  RD0BM003.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS30();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS35();
  end


end // end RD0B031

// display distrib record
Function RD0B032()


       /* *** intialize key for distribution inquiry*/

  RD1REC.RD1ACRO = RD0BM003.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM003.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM003.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC ;
  end

       /* *** check for errors on distribution file inquiry*/

  RD0BS3W();


end // end RD0B032

// delete distrib screen-2
Function RD0B033()


       /* ***initialize screen variables*/


  RD0BM005.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM005.RD0BMPRC = "RD0B033";
  RD0BM005.CATOAP = " ";
  RD0BM005.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";

  move RD1REC to RD0BM005 byName;
  move RD2REC to RD0BM005 byName;
  RD0BM005.RD2DEPT = RD0BW1.RD2DEPT;

  RD0BM005.RD2NAME = RD0BW1.RD2NAME;
  RD0BM005.RD3NAME = RD0BW1.RD3NAME;

  if (RD1REC.RD1FICHE == "F")
    RD0BM005.RD1FICHE = "Y";
  else
    RD0BM005.RD1FICHE = "N";
  end

  RDWREC.RDWUPFLG = "N";
  converse RD0BM005 ;


  RD0BM005.VAGen_EZEMSG = " ";
  RD0BM005.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS50();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS55();
  end


end // end RD0B033

// lock distrib record
Function RD0B034()


       /* *** initialize the distib file key*/

  RD1REC.RD1ACRO = RD0BM005.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM005.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM005.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC forUpdate ;
  end


     /* *** check for errors on distrib file update*/

  RD0BS3X();


end // end RD0B034

// delete distrib record
Function RD0B035()


       /* *** delete the distrib record*/


  RD1REC.RD1ACRO = RD0BM005.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM005.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM005.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    delete RD1REC ;
  end


      /* *** check for errors in distrib file add*/

  RD0BS3Z();


end // end RD0B035

// check fast path entry
Function RD0B040()
end // end RD0B040

// inquire distrib screen-1
Function RD0B041()


       /* ***initialize screen variables*/


  RD0BM003.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM003.RD0BMPRC = "RD0B041";
  RD0BM003.RD0BMHDG = "INQUIRE ON  DISTRIBUTION";
  RD0BM003.CATOAP = " ";
  RD0BM003.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM003 ;


  RD0BM003.VAGen_EZEMSG = " ";
  RD0BM003.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS30();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS35();
  end


end // end RD0B041

// display distrib record
Function RD0B042()


       /* *** intialize key for distribution inquiry*/

  RD1REC.RD1ACRO = RD0BM003.RD1ACRO;
  RD1REC.RD1REPNO = RD0BM003.RD1REPNO;
  RD1REC.RD1SEQNO = RD0BM003.RD1SEQNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD1REC ;
  end

       /* *** check for errors on distribution file inquiry*/

  RD0BS3W();


end // end RD0B042

// inquire distrib screen-2
Function RD0B043()


       /* ***initialize screen variables*/

  RD0BM006.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM006.RD0BMPRC = "RD0B043";
  RD0BM006.CATOAP = " ";
  RD0BM006.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";

  move RD1REC to RD0BM006 byName;

  move RD2REC to RD0BM006 byName;

  RD0BM006.RD2NAME = RD0BW1.RD2NAME;
  RD0BM006.RD3NAME = RD0BW1.RD3NAME;

  if (RD1REC.RD1FICHE == "F")
    RD0BM006.RD1FICHE = "Y";
  else
    RD0BM006.RD1FICHE = "N";
  end

  converse RD0BM006 ;


  RD0BM006.VAGen_EZEMSG = " ";
  RD0BM006.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS60();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS65();
  end


end // end RD0B043

// check fast path entry
Function RD0B050()
end // end RD0B050

// print distrib menu
Function RD0B051()


       /* ***initialize screen variables*/

  RD0BM007.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM007.RD0BMPRC = "RD0B051";
  RD0BM007.CATOAP = " ";
  RD0BM007.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0BM007 ;


  RD0BM007.VAGen_EZEMSG = " ";
  RD0BM007.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS70();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS75();
  end


end // end RD0B051

// print distrib screen
Function RD0B052()


       /* ***initialize screen variables*/

  RD0BM008.RD0BMDTE = VGVar.currentShortGregorianDate;
  RD0BM008.RD0BMPRC = "RD0B052";
  RD0BM008.CATOAP = " ";
  RD0BM008.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";

  RD0BS80();

  converse RD0BM008 ;


  RD0BM008.VAGen_EZEMSG = " ";
  RD0BM008.RD0BMMSG = " ";

       /* *** process keys*/

  RD0BS81();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0BS85();
  end


end // end RD0B052

// lock control record
Function RD0B053()


       /* *** initialize the control file key*/

  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 01;

  RDWREC.RDWERFLG = "N";


  try
    get RD4REC forUpdate ;
  end


     /* *** check for errors on control file update*/

  RD0BS7X();


end // end RD0B053

// replace control record
Function RD0B054()


       /* *** initialize the control file key*/

  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 01;


       /* *** build control file fields*/

  RD0BS83();


  RDWREC.RDWERFLG = "N";


  try
    replace RD4REC ;
  end


     /* *** check for errors on control file replace*/

  RD0BS7Y();


end // end RD0B054

// branch recipient display
Function RD0B060()


       /* *** intialize key for recipient inquiry*/

  RD2REC.RD2RECNO = RD1REC.RD2RECNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD2REC ;
  end


       /* *** move recipient name to working storage*/

  RD0BS62();

end // end RD0B060

// branch location display
Function RD0B070()


       /* *** intialize key for recipient inquiry*/

  RD3REC.RD3LOCNO = RD2REC.RD3LOCNO;

  RDWREC.RDWERFLG = "N";


  try
    get RD3REC ;
  end


       /* *** move recipient name to working storage*/

  RD0BS72();

end // end RD0B070

// process keys
Function RD0BS10()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM001.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0M";
    XSEXIT();
    RD0BM001.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM001.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM001.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM001.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM001.CATOAP != " ")
    RD0BS11();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM001.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM001 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM001.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM001.RD0BMOPT is modified)
    RD0BS1A();
    return;
  else
    RD0BM001.RD0BMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0BM001.RD0BMOPT cursor, bold;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS10

// set update flag
Function RD0BS11()


       /* *** set update flag*/


  if (RD0BM001.RD0BMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS11

// set map fields modified
Function RD0BS15()


       /* ***  set map fields as modified*/

  if (RD0BM001.RD0BMOPT is modified)
    set RD0BM001.RD0BMOPT modified;
    return;
  end


end // end RD0BS15

// validate menu option
Function RD0BS1A()


       /* *** process menu option*/


  if (RD0BM001.RD0BMOPT == 1)
    if (COMMAREA.CAADDFL == "Y")
      return;
    else
      RD0BM001.RD0BMMSG = "YOU DO NOT HAVE ADD CAPABILITIES";
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM001.RD0BMOPT == 2)
    if (COMMAREA.CACHGFL == "Y")
      return;
    else
      RD0BM001.RD0BMMSG = "YOU DO NOT HAVE CHANGE CAPABILITIES";
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM001.RD0BMOPT == 3)
    if (COMMAREA.CADELFL == "Y")
      return;
    else
      RD0BM001.RD0BMMSG = "YOU DO NOT HAVE DELETE CAPABILITIES";
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM001.RD0BMOPT == 4)
    if (COMMAREA.CAINQFL == "Y")
      return;
    else
      RD0BM001.RD0BMMSG = "YOU DO NOT HAVE INQUIRE CAPABILITIES";
      set RD0BM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM001.RD0BMOPT == 5)
    return;
  else
    RD0BM001.RD0BMMSG = "ENTER ONE OF ABOVE OPTIONS";
    set RD0BM001.RD0BMOPT cursor, bold;
    set RD0BM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS1A

// process keys
Function RD0BS20()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM002.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM002.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM002.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM002.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM002.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM002.CATOAP != " ")
    RD0BS21();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM002.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM002 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM002.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

       /* *** edit map fields in reverse order*/
       /* *** so all fields in error are bright*/
  RD0BS2J();

  RD0BS2I();

  RD0BS2H();

  RD0BS2K();

  RD0BS2G();

  RD0BS2E();

  RD0BS2D();

  RD0BS2C();

  RD0BS2B();

  RD0BS2A();


end // end RD0BS20

// set update flag
Function RD0BS21()


       /* *** set update flag*/

  if (RD0BM002.RD1ACRO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1REPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1FILNM is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1DOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1REPT1 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1REPT2 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD3LOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD2DEPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD2RECNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1SPHD1 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1SPHD2 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1FREQ is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1COPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM002.RD1FICHE is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS21

// set map fields modified
Function RD0BS25()


       /* ***  set map fields as modified*/

  if (RD0BM002.RD1ACRO is modified)
    set RD0BM002.RD1ACRO modified;
  end

  if (RD0BM002.RD1REPNO is modified)
    set RD0BM002.RD1REPNO modified;
  end

  if (RD0BM002.RD1FILNM is modified)
    set RD0BM002.RD1FILNM modified;
  end

  if (RD0BM002.RD1DOCNO is modified)
    set RD0BM002.RD1DOCNO modified;
  end

  if (RD0BM002.RD1REPT1 is modified)
    set RD0BM002.RD1REPT1 modified;
  end

  if (RD0BM002.RD1REPT2 is modified)
    set RD0BM002.RD1REPT2 modified;
  end

  if (RD0BM002.RD2RECNO is modified)
    set RD0BM002.RD2RECNO modified;
  end

  if (RD0BM002.RD1SPHD1 is modified)
    set RD0BM002.RD1SPHD1 modified;
  end

  if (RD0BM002.RD1SPHD2 is modified)
    set RD0BM002.RD1SPHD2 modified;
  end

  if (RD0BM002.RD1FREQ is modified)
    set RD0BM002.RD1FREQ modified;
  end

  if (RD0BM002.RD1COPNO is modified)
    set RD0BM002.RD1COPNO modified;
  end

  if (RD0BM002.RD1FICHE is modified)
    set RD0BM002.RD1FICHE modified;
  end

  if (RD0BM002.RD1FLAG is modified)
    set RD0BM002.RD1FLAG modified;
  end


end // end RD0BS25

// validate report acronym
Function RD0BS2A()


       /* *** validate acronym*/

  if (RD0BM002.RD1ACRO is modified)
      /* next sentence*/
  else
    RD0BM002.RD0BMMSG = "ACRONYM REQUIRED";
    set RD0BM002.RD1ACRO cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BW1.RD1ACRO = RD0BM002.RD1ACRO;

  if (RD0BW1.RD1ACRO1 == "#")
      /* next sentence*/
  else
    if (RD0BW1.RD1ACRO1 < "A"
     || RD0BW1.RD1ACRO1 > "Z")
      RD0BM002.RD0BMMSG = "ACRONYM MUST BE TWO ALPHAS";
      set RD0BM002.RD1ACRO cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1ACRO2 == "#")
      /* next sentence*/
  else
    if (RD0BW1.RD1ACRO2 < "A"
     || RD0BW1.RD1ACRO2 > "Z")
      RD0BM002.RD0BMMSG = "ACRONYM MUST BE TWO ALPHAS";
      set RD0BM002.RD1ACRO cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  return;


end // end RD0BS2A

// validate report number
Function RD0BS2B()


       /* *** validate report number*/

  if (RD0BM002.RD1REPNO is modified)
    if (RD0BM002.RD1REPNO != " ")
      return;
    end
  end

  RD0BM002.RD0BMMSG = "REPORT NUMBER REQUIRED";
  set RD0BM002.RD1REPNO cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS2B

// validate file name
Function RD0BS2C()


       /* *** validate file name*/

  if (RD0BM002.RD1FILNM is modified)
    if (RD0BM002.RD1FILNM != " ")
      return;
    end
  end

  RD0BM002.RD0BMMSG = "FILE NAME REQUIRED";
  set RD0BM002.RD1FILNM cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS2C

// validate document number
Function RD0BS2D()


       /* *** validate document number*/

  if (RD0BM002.RD1DOCNO is modified)
    if (RD0BM002.RD1DOCNO != " ")
      return;
    end
  end

  RD0BM002.RD0BMMSG = "DOCUMENT NUMBER REQUIRED";
  set RD0BM002.RD1DOCNO cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS2D

// validate report title 1
Function RD0BS2E()


       /* *** validate report title 1*/

  if (RD0BM002.RD1REPT1 is modified)
    if (RD0BM002.RD1REPT1 != " ")
      return;
    end
  end

  RD0BM002.RD0BMMSG = "REPORT TITLE 1 REQUIRED";
  set RD0BM002.RD1REPT1 cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS2E

// validate recipient number
Function RD0BS2G()


       /* *** validate recipient number*/

  if (RD0BM002.RD2RECNO is modified)
    if (RD0BM002.RD2RECNO != 0)
      return;
    end
  end

  RD0BM002.RD0BMMSG = "RECIPIENT NUMBER REQUIRED";
  set RD0BM002.RD2RECNO cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS2G

// validate frequency code/day
Function RD0BS2H()


       /* *** validate frequency code and day*/

  if (RD0BM002.RD1FREQ is modified)
       /* next sentence*/
  else
    RD0BM002.RD0BMMSG = "FREQUENCY REQUIRED";
    set RD0BM002.RD1FREQ cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BM002.RD1FREQ == " ")
    RD0BM002.RD0BMMSG = "FREQUENCY REQUIRED";
    set RD0BM002.RD1FREQ cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BW1.RD1FREQ = RD0BM002.RD1FREQ;


  if (RD0BW1.RD1FREQC == "D"
   || RD0BW1.RD1FREQC == "W"
   || RD0BW1.RD1FREQC == "M"
   || RD0BW1.RD1FREQC == "R")
     /* next sentence*/
  else
    RD0BM002.RD0BMMSG = "1ST POSITION OF FREQ MUST BE D,W,M OR R";
    set RD0BM002.RD1FREQ cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD1FREQC == "R")
    if (RD0BW1.RD1FREQD == " ")
      return;
    else
      RD0BM002.RD0BMMSG = "FREQ R MUST STAND ALONE";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1FREQC == "M")
    if (RD0BW1.RD1FREQD == "  "
     || RD0BW1.RD1FREQD == "99")
      return;
    else
      RD0BM002.RD0BMMSG = "FREQ M MUST STAND ALONE OR WITH 99";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1FREQD == " ")
    return;
  end

  if (RD0BW1.RD0BWP1 != " ")
    if (RD0BW1.RD0BWP1 > "0"
     && RD0BW1.RD0BWP1 < "6")
         /* next sentence*/
    else
      RD0BM002.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP2 != " ")
    if (RD0BW1.RD0BWP2 > "0"
     && RD0BW1.RD0BWP2 < "6")
         /* next sentence*/
    else
      RD0BM002.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP3 != " ")
    if (RD0BW1.RD0BWP3 > "0"
     && RD0BW1.RD0BWP3 < "6")
         /* next sentence*/
    else
      RD0BM002.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP4 != " ")
    if (RD0BW1.RD0BWP4 > "0"
     && RD0BW1.RD0BWP4 < "6")
         /* next sentence*/
    else
      RD0BM002.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP5 != " ")
    if (RD0BW1.RD0BWP5 > "0"
     && RD0BW1.RD0BWP5 < "6")
         /* next sentence*/
    else
      RD0BM002.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM002.RD1FREQ cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1FREQC == "D"
   && RD0BW1.RD0BWP1 == "5")
    RD0BM002.RD0BMMSG = "D5 NOT ALLOWED, ENTER W";
    set RD0BM002.RD1FREQ cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

end // end RD0BS2H

// validate number of copies
Function RD0BS2I()


       /* *** validate number of copies*/

  if (RD0BM002.RD1COPNO is modified)
    if (RD0BM002.RD1COPNO != 0)
      return;
    end
  end

  RD0BM002.RD0BMMSG = "NUMBER OF COPIES REQUIRED";
  set RD0BM002.RD1COPNO cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;


end // end RD0BS2I

// validate fiche indicator
Function RD0BS2J()


       /* *** validate fiche indicator*/

  if (RD0BM002.RD1FICHE is modified)
    if (RD0BM002.RD1FICHE == "Y"
     || RD0BM002.RD1FICHE == "N")
      return;
    else
      RD0BM002.RD0BMMSG = "FICHE INDICATOR MUST BE Y OR N";
      set RD0BM002.RD1FICHE cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  RD0BM002.RD0BMMSG = "FICHE INDICATOR REQUIRED";
  set RD0BM002.RD1FICHE cursor, bold;
  set RD0BM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;


end // end RD0BS2J

// validate special flag
Function RD0BS2K()


       /* *** validate special flag*/
           /* 'u' means report ID is a userid*/

  if (RD0BM002.RD1FLAG is modified)
    if (RD0BM002.RD1FLAG == "U"
     || RD0BM002.RD1FLAG == " ")
      return;
    else
      RD0BM002.RD0BMMSG = "SPECIAL FLAG MUST BE U OR BLANK";
      set RD0BM002.RD1FLAG cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  return;


end // end RD0BS2K

// check errors on loc inq
Function RD0BS2V()

       /* *** check for errors on location  file inquire*/


  if (RD3REC is ioError)
    set RD0BM002.RD3LOCNO cursor, bold;
    RD0BW1.RD3NAME = " ";
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is noRecordFound)
      RD0BM002.RD0BMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0BM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM002.RD0BMMSG = "LOCATION FILE ";
      return;
    end
  end


end // end RD0BS2V

// check for errors on dist inq
Function RD0BS2X()

       /* *** check for errors on recipient file inquire*/


  if (RD2REC is ioError)
    set RD0BM002.RD2RECNO cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD2REC is noRecordFound)
      RD0BM002.RD0BMMSG = "RECIPIENT RECORD NOT FOUND";
      return;
    else
      RD0BM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM002.RD0BMMSG = "RECIPIENT FILE ";
      return;
    end
  end


end // end RD0BS2X

// check for errors on dist inq
Function RD0BS2Y()

       /* *** check for errors on distribution inq*/


  if (RD1REC is ioError)
    if (RD1REC is noRecordFound)
      return;
    else
      RD0BM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM002.RD0BMMSG = "DISTRIBUTION RECORD";
      set RD0BM002.RD1ACRO cursor, bold;
      set RD0BM002.RD1REPNO cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  if (RD0BW1.RD1SEQNO == 99)
    RD0BM002.VAGen_EZEMSG = "MAXIMUM OF 100 ENTRIES ALREADY SET UP.";
    RD0BM002.RD0BMMSG = "CONTACT HELP DESK. ";
    set RD0BM002.RD1ACRO cursor, bold;
    set RD0BM002.RD1REPNO cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS2Y

// check for errors on dist add
Function RD0BS2Z()

       /* *** check for errors on distribution  add*/


  if (RD1REC is ioError)
    RD0BM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED ADDING THE";
    RD0BM002.RD0BMMSG = "DISTRIBUTION RECORD";
    set RD0BM002.RD1ACRO cursor, bold;
    set RD0BM002.RD1REPNO cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  set RD0BM002 initial;
  RD0BM002.VAGen_EZEMSG = RD1REC.RD1KEY;
  RD0BM002.RD0BMMSG = "DISTRIBUTION ADDED";


end // end RD0BS2Z

// process keys
Function RD0BS30()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM003.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM003.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM003.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM003.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM003.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM003.CATOAP != " ")
    RD0BS31();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM003.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM003 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM003.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

       /* *** edit map fields in reverse order*/
       /* *** so error fields are bright*/

  RD0BS3C();

  RD0BS3B();

  RD0BS3A();


end // end RD0BS30

// set update flag
Function RD0BS31()


       /* *** set update flag*/

  if (RD0BM003.RD1ACRO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM003.RD1REPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM003.RD1SEQNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS31

// set map fields modified
Function RD0BS35()


       /* ***  set map fields as modified*/

  if (RD0BM003.RD1ACRO is modified)
    set RD0BM003.RD1ACRO modified;
  end

  if (RD0BM003.RD1REPNO is modified)
    set RD0BM003.RD1REPNO modified;
  end

  if (RD0BM003.RD1SEQNO is modified)
    set RD0BM003.RD1SEQNO modified;
  end

end // end RD0BS35

// validate acronym
Function RD0BS3A()


       /* *** validate acronym*/

  if (RD0BM003.RD1ACRO is modified)
      /* next sentence*/
  else
    RD0BM003.RD0BMMSG = "ACRONYM REQUIRED";
    set RD0BM003.RD1ACRO cursor, bold;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BW1.RD1ACRO = RD0BM003.RD1ACRO;

  if (RD0BW1.RD1ACRO1 == "#")
     /* next sentence*/
  else
    if (RD0BW1.RD1ACRO1 < "A"
     || RD0BW1.RD1ACRO1 > "Z")
      RD0BM003.RD0BMMSG = "ACRONYM MUST BE ALPHA";
      set RD0BM003.RD1ACRO cursor, bold;
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1ACRO2 == "#")
     /* next sentence*/
  else
    if (RD0BW1.RD1ACRO2 < "A"
     || RD0BW1.RD1ACRO2 > "Z")
      RD0BM003.RD0BMMSG = "ACRONYM MUST BE ALPHA";
      set RD0BM003.RD1ACRO cursor, bold;
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  return;


end // end RD0BS3A

// validate report number
Function RD0BS3B()


       /* *** validate report number*/

  if (RD0BM003.RD1REPNO is modified)
    if (RD0BM003.RD1REPNO != " ")
      return;
    end
  end

  RD0BM003.RD0BMMSG = "REPORT NUMBER REQUIRED";
  set RD0BM003.RD1REPNO cursor, bold;
  set RD0BM003 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS3B

// validate sequence number
Function RD0BS3C()


       /* *** sequence number*/

  if (RD0BM003.RD1SEQNO is modified)
    if (RD0BM003.RD1SEQNO != 0)
      return;
    end
  end

  RD0BM003.RD0BMMSG = "SEQUENCE NUMBER REQUIRED";
  set RD0BM003.RD1SEQNO cursor, bold;
  set RD0BM003 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS3C

// check for errors on dist inq
Function RD0BS3W()

       /* *** check for errors on distribution inq*/


  if (RD1REC is ioError)
    if (RD1REC is noRecordFound)
      RD0BM003.RD0BMMSG = "DISTRIBUTION RECORD NOT FOUND";
      set RD0BM003.RD1ACRO cursor, modified, bold;
      set RD0BM003.RD1REPNO modified, bold;
      set RD0BM003.RD1SEQNO modified, bold;
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      RD0BM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM003.RD0BMMSG = "DISTRIBUTION RECORD";
      set RD0BM003.RD1ACRO cursor, bold;
      set RD0BM003.RD1REPNO cursor, bold;
      set RD0BM003.RD1SEQNO cursor, bold;
      set RD0BM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  return;


end // end RD0BS3W

// check for errors on dist updat
Function RD0BS3X()

       /* *** check for errors on distrib file update*/


  if (RD1REC is ioError)
    RD0BM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0BM003.RD0BMMSG = "DISTRIBUTION FILE";
    set RD0BM003.RD1ACRO cursor, bold;
    set RD0BM003.RD1REPNO cursor, bold;
    set RD0BM003.RD1SEQNO cursor, bold;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS3X

// check for errors on dist repl
Function RD0BS3Y()

       /* *** check for errors on distrib  file replace*/


  if (RD1REC is ioError)
    RD0BM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED REPLACING THE";
    RD0BM003.RD0BMMSG = "DISTRIBUTION FILE";
    set RD0BM003.RD1ACRO cursor, bold;
    set RD0BM003.RD1REPNO cursor, bold;
    set RD0BM003.RD1SEQNO cursor, bold;
    set RD0BM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  set RD0BM003 initial;
  set RD0BM004 initial;

  RD0BM003.VAGen_EZEMSG = RD1REC.RD1KEY;
  RD0BM003.RD0BMMSG = "DISTRIBUTION CHANGED";

  return;


end // end RD0BS3Y

// check for errors on dist delet
Function RD0BS3Z()

       /* *** check for errors on distrib delete*/


  if (RD1REC is ioError)
    RD0BM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED DELETING THE";
    RD0BM003.RD0BMMSG = "DISTRIBUTION RECORD";
    set RD0BM003.RD1ACRO cursor, bold;
    set RD0BM003.RD1REPNO cursor, bold;
    set RD0BM003.RD1SEQNO cursor, bold;
    set RD0BM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  set RD0BM003 initial;
  set RD0BM005 initial;
  RD0BM003.VAGen_EZEMSG = RD1REC.RD1KEY;
  RD0BM003.RD0BMMSG = "DISTRIBUTION DELETED";


end // end RD0BS3Z

// process keys
Function RD0BS40()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM004.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM004.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM004.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM004.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM004.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BS41();

  if (RD0BM004.CATOAP != " ")
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM004.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM004 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM004.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

       /* *** if no updates are made, send error message*/

  if (RDWREC.RDWUPFLG == "N")
    RD0BM004.RD0BMMSG = "ENTER CHANGE";
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

       /* *** edit map fields in reverse order*/
       /* *** so all fields in error are bright*/

  if (RD0BM004.RD1FICHE is modified)
    RD0BS4J();
  end

  if (RD0BM004.RD1COPNO is modified)
    RD0BS4I();
  end

  if (RD0BM004.RD1FREQ is modified)
    RD0BS4H();
  end

  if (RD0BM004.RD1FLAG is modified)
    RD0BS4K();
  end

  if (RD0BM004.RD2RECNO is modified)
    RD0BS4G();
  end

  if (RD0BM004.RD1REPT1 is modified)
    RD0BS4E();
  end

  if (RD0BM004.RD1DOCNO is modified)
    RD0BS4D();
  end

  if (RD0BM004.RD1FILNM is modified)
    RD0BS4C();
  end


end // end RD0BS40

// set update flag
Function RD0BS41()


       /* *** set update flag*/

  if (RD0BM004.RD1FILNM is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1DOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1REPT1 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1REPT2 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD2RECNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1SPHD1 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1SPHD2 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1FREQ is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1COPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD1FICHE is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  if (RD0BM004.RD1FLAG is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM004.RD2RECNO == RD0BW1.RD2RECNO)
    return;
  else
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS41

// set map fields modified
Function RD0BS45()


       /* ***  set map fields as modified*/

  if (RD0BM004.RD1FILNM is modified)
    set RD0BM004.RD1FILNM modified;
  end

  if (RD0BM004.RD1DOCNO is modified)
    set RD0BM004.RD1DOCNO modified;
  end

  if (RD0BM004.RD1REPT1 is modified)
    set RD0BM004.RD1REPT1 modified;
  end

  if (RD0BM004.RD1REPT2 is modified)
    set RD0BM004.RD1REPT2 modified;
  end

  if (RD0BM004.RD3LOCNO is modified)
    set RD0BM004.RD3LOCNO modified;
  end

  if (RD0BM004.RD2DEPT is modified)
    set RD0BM004.RD2DEPT modified;
  end

  if (RD0BM004.RD2RECNO is modified)
    set RD0BM004.RD2RECNO modified;
  end

  if (RD0BM004.RD1SPHD1 is modified)
    set RD0BM004.RD1SPHD1 modified;
  end

  if (RD0BM004.RD1SPHD2 is modified)
    set RD0BM004.RD1SPHD2 modified;
  end

  if (RD0BM004.RD1FREQ is modified)
    set RD0BM004.RD1FREQ modified;
  end

  if (RD0BM004.RD1COPNO is modified)
    set RD0BM004.RD1COPNO modified;
  end

  if (RD0BM004.RD1FICHE is modified)
    set RD0BM004.RD1FICHE modified;
  end

  if (RD0BM004.RD1FLAG is modified)
    set RD0BM004.RD1FLAG modified;
  end


end // end RD0BS45

// validate file name
Function RD0BS4C()


       /* *** validate file name*/

  if (RD0BM004.RD1FILNM != " ")
    return;
  end

  RD0BM004.RD0BMMSG = "FILE NAME REQUIRED";
  set RD0BM004.RD1FILNM cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS4C

// validate document number
Function RD0BS4D()


       /* *** validate document number*/

  if (RD0BM004.RD1DOCNO != " ")
    return;
  end

  RD0BM004.RD0BMMSG = "DOCUMENT NUMBER REQUIRED";
  set RD0BM004.RD1DOCNO cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS4D

// validate report title 1
Function RD0BS4E()


       /* *** validate report title 1*/

  if (RD0BM004.RD1REPT1 != " ")
    return;
  end

  RD0BM004.RD0BMMSG = "REPORT TITLE 1 REQUIRED";
  set RD0BM004.RD1REPT1 cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";

  return;

end // end RD0BS4E

// validate recipient number
Function RD0BS4G()


       /* *** validate recipient number*/

  if (RD0BM004.RD2RECNO != 0)
    return;
  end

  RD0BM004.RD0BMMSG = "RECIPIENT NUMBER REQUIRED";
  set RD0BM004.RD2RECNO cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS4G

// validate freq code/day
Function RD0BS4H()


       /* *** validate frequency code and day*/

  if (RD0BM004.RD1FREQ == " ")
    RD0BM004.RD0BMMSG = "FREQUENCY REQUIRED";
    set RD0BM004.RD1FREQ cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BW1.RD1FREQ = RD0BM004.RD1FREQ;

  if (RD0BW1.RD1FREQC == "D"
   || RD0BW1.RD1FREQC == "W"
   || RD0BW1.RD1FREQC == "M"
   || RD0BW1.RD1FREQC == "R")
     /* next sentence*/
  else
    RD0BM004.RD0BMMSG = "1ST POSITION OF FREQ MUST BE D,W,M OR R";
    set RD0BM004.RD1FREQ cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD1FREQC == "R"
   && RD0BW1.RD1FREQD != " ")
    RD0BM004.RD0BMMSG = "FREQ R MUST STAND ALONE";
    set RD0BM004.RD1FREQ cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD1FREQC == "M")
    if (RD0BW1.RD1FREQD == "  "
     || RD0BW1.RD1FREQD == "99")
      return;
    else
      RD0BM004.RD0BMMSG = "FREQ M MUST STAND ALONE OR WITH 99";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD1FREQD == " ")
    return;
  end

  if (RD0BW1.RD0BWP1 != " ")
    if (RD0BW1.RD0BWP1 > "0"
     && RD0BW1.RD0BWP1 < "6")
         /* next sentence*/
    else
      RD0BM004.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP2 != " ")
    if (RD0BW1.RD0BWP2 > "0"
     && RD0BW1.RD0BWP2 < "6")
         /* next sentence*/
    else
      RD0BM004.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP3 != " ")
    if (RD0BW1.RD0BWP3 > "0"
     && RD0BW1.RD0BWP3 < "6")
         /* next sentence*/
    else
      RD0BM004.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP4 != " ")
    if (RD0BW1.RD0BWP4 > "0"
     && RD0BW1.RD0BWP4 < "6")
         /* next sentence*/
    else
      RD0BM004.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BW1.RD0BWP5 != " ")
    if (RD0BW1.RD0BWP5 > "0"
     && RD0BW1.RD0BWP5 < "6")
         /* next sentence*/
    else
      RD0BM004.RD0BMMSG = "USE DIGITS 1, 2, 3 ,4 AND 5 ONLY";
      set RD0BM004.RD1FREQ cursor, bold;
      set RD0BM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM004.RD1FREQ == "D5")
    RD0BM004.RD0BMMSG = "D5 NOT ALLOWED, ENTER W";
    set RD0BM004.RD1FREQ cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  return;


end // end RD0BS4H

// validate number of copies
Function RD0BS4I()


       /* *** validate number of copies*/

  if (RD0BM004.RD1COPNO != 0)
    return;
  end

  RD0BM004.RD0BMMSG = "NUMBER OF COPIES REQUIRED";
  set RD0BM004.RD1COPNO cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";

  return;



end // end RD0BS4I

// validate fiche indicator
Function RD0BS4J()


       /* *** validate fiche indicator*/

  if (RD0BM004.RD1FICHE == "Y"
   || RD0BM004.RD1FICHE == "N")
    return;
  else
    RD0BM004.RD0BMMSG = "FICHE INDICATOR MUST BE Y OR N";
    set RD0BM004.RD1FICHE cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS4J

// validate special flag
Function RD0BS4K()


       /* *** validate special flag*/
           /* 'u' indicates report id is userid*/

  if (RD0BM004.RD1FLAG == "U"
   || RD0BM004.RD1FLAG == " ")
    return;
  else
    RD0BM004.RD0BMMSG = "SPECIAL FLAG MUST BE U OR BLANK";
    set RD0BM004.RD1FLAG cursor, bold;
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS4K

// set up error message for dept
Function RD0BS4V()

       /* *** set up appropriate error message when dept invalid*/


  set RD0BM004.RD2RECNO cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";
  if (RD2REC.RD3LOCNO == 0)
    RD0BW1.RD3NAME = " ";
    RD0BM004.RD0BMMSG = "INVALID RECIP DEPT/LOC. FIX RECIP RECORD";
    return;
  else
    RD0BM004.RD0BMMSG = "INVALID RECIP DEPT. FIX RECIP RECORD";
    return;
  end


  return;

end // end RD0BS4V

// set up message for invalid loc
Function RD0BS4W()

       /* *** set up the message for invalid location*/


  set RD0BM004.RD2RECNO cursor, bold;
  set RD0BM004 alarm;
  RDWREC.RDWERFLG = "Y";
  RD0BW1.RD3NAME = " ";
  RD0BM004.RD0BMMSG = "INVALID RECIP LOC. FIX RECIP RECORD.";
  return;

end // end RD0BS4W

// check for errors on rec inq
Function RD0BS4X()

       /* *** check for errors on recipient file inquire*/


  if (RD2REC is ioError)
    set RD0BM004.RD2RECNO cursor, bold;
    RD0BW1.RD2NAME = " ";
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD2REC is noRecordFound)
      RD0BM004.RD0BMMSG = "RECIPIENT RECORD NOT FOUND";
      return;
    else
      RD0BM004.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM004.RD0BMMSG = "RECIPIENT FILE ";
      return;
    end
  end

  return;

end // end RD0BS4X

// check errors on loc inq
Function RD0BS4Y()

       /* *** check for errors on location  file inquire*/


  if (RD3REC is ioError)
    set RD0BM004.RD3LOCNO cursor, bold;
    RD0BW1.RD3NAME = " ";
    set RD0BM004 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is noRecordFound)
      RD0BM004.RD0BMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0BM004.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0BM004.RD0BMMSG = "LOCATION FILE ";
      return;
    end
  end


end // end RD0BS4Y

// check for invalid recip fields
Function RD0BS4Z()

       /* *** check for invalid recipient fields*/


  RD0BW1.RD2RECNO = RD2REC.RD2RECNO;
  RD0BW1.RD2NAME = RD2REC.RD2NAME;
  RD0BW1.RD2DEPT = RD2REC.RD2DEPT;
  RD0BW1.RD3LOCNO = RD2REC.RD3LOCNO;

  if (RD2REC.RD2DEPT == " ")
    RD0BS4V();
  else
    if (RD2REC.RD3LOCNO == 0)
      RD0BS4W();
    end
  end


  return;

end // end RD0BS4Z

// process keys
Function RD0BS50()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM005.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM005.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM005.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM005.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM005.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM005.CATOAP != " ")
    RD0BS51();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM005.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM005 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM005.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end



end // end RD0BS50

// set update flag
Function RD0BS51()


       /* *** set update flag*/

  if (RD0BM005.RD0BMYN is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS51

// set map fields modified
Function RD0BS55()


       /* ***  set map fields as modified*/

  if (RD0BM005.RD0BMYN is modified)
    set RD0BM005.RD0BMYN modified;
    return;
  end


end // end RD0BS55

// process keys
Function RD0BS60()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM006.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM006.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM006.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM006.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
    set RD0BM006.RD1ACRO cursor;
  else
    RD0BM006.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM006.CATOAP != " ")
    RD0BS61();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM006.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM006 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM006.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0BM006.RD1SEQNO is modified)
    RD0BS6C();
  end

  if (RD0BM006.RD1REPNO is modified)
    RD0BS6B();
  end

  if (RD0BM006.RD1ACRO is modified)
    RD0BS6A();
  end

end // end RD0BS60

// set update flag
Function RD0BS61()


       /* *** set update flag*/

  if (RD0BM006.RD1ACRO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM006.RD1REPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM006.RD1SEQNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS61

// recip/dept to ws
Function RD0BS62()



       /* *** check for errors*/

  if (RD2REC is ioError)
    RD0BW1.RD2NAME = "VARIABLE";
  else
    RD0BW1.RD2NAME = RD2REC.RD2NAME;
    RD0BW1.RD2DEPT = RD2REC.RD2DEPT;
    RD0BW1.RD2RECNO = RD2REC.RD2RECNO;
  end


end // end RD0BS62

// set map fields modified
Function RD0BS65()


       /* ***  set map fields as modified*/

  if (RD0BM006.RD1ACRO is modified)
    set RD0BM006.RD1ACRO modified;
  end

  if (RD0BM006.RD1REPNO is modified)
    set RD0BM006.RD1REPNO modified;
  end

  if (RD0BM006.RD1SEQNO is modified)
    set RD0BM006.RD1SEQNO modified;
  end


end // end RD0BS65

// validate acronym
Function RD0BS6A()


       /* *** validate acronym*/


  RD0BW1.RD1ACRO = RD0BM006.RD1ACRO;

  if (RD0BW1.RD1ACRO1 == " "
   || RD0BW1.RD1ACRO2 == " ")
    RD0BM006.RD0BMMSG = "ACRONYM MUST BE TWO ALPHAS";
    set RD0BM006.RD1ACRO cursor, bold;
    set RD0BM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD1ACRO1 == "#")
     /* next sentence*/
  else
    if (RD0BW1.RD1ACRO1 < "A")
      RD0BM002.RD0BMMSG = "ACRONYM MUST BE ALPHA";
      set RD0BM002.RD1ACRO cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  if (RD0BW1.RD1ACRO2 == "#")
     /* next sentence*/
  else
    if (RD0BW1.RD1ACRO2 < "A")
      RD0BM002.RD0BMMSG = "ACRONYM MUST BE ALPHA";
      set RD0BM002.RD1ACRO cursor, bold;
      set RD0BM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  return;


end // end RD0BS6A

// validate report number
Function RD0BS6B()


       /* *** validate report number*/

  if (RD0BM006.RD1REPNO != " ")
    return;
  end

  RD0BM006.RD0BMMSG = "REPORT NUMBER REQUIRED";
  set RD0BM006.RD1REPNO cursor, bold;
  set RD0BM006 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS6B

// validate sequence number
Function RD0BS6C()


       /* *** validate sequence number*/

  if (RD0BM006.RD1SEQNO > 0)
    return;
  end

  RD0BM006.RD0BMMSG = "SEQUENCE NUMBER REQUIRED";
  set RD0BM006.RD1SEQNO cursor, bold;
  set RD0BM006 alarm;
  RDWREC.RDWERFLG = "Y";
  return;

end // end RD0BS6C

// process keys
Function RD0BS70()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM007.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM007.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM007.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM007.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM007.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM007.CATOAP != " ")
    RD0BS71();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM007.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM007 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM007.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  RD0BS7A();

  return;


end // end RD0BS70

// set update flag
Function RD0BS71()


       /* *** set update flag*/


  if (RD0BM007.RD0BMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS71

// move loc name to ws
Function RD0BS72()



       /* *** check for errors*/

  if (RD3REC is ioError)
    RD0BW1.RD3NAME = "NOT DEFINED";
  else
    RD0BW1.RD3NAME = RD3REC.RD3NAME;
    RD0BW1.RD3LOCNO = RD3REC.RD3LOCNO;
  end


end // end RD0BS72

// set map fields modified
Function RD0BS75()


       /* ***  set map fields as modified*/

  if (RD0BM007.RD0BMOPT is modified)
    set RD0BM007.RD0BMOPT modified;
    return;
  end


end // end RD0BS75

// validate menu option
Function RD0BS7A()


       /* *** process menu option*/


  if (RD0BM007.RD0BMOPT is modified)
    if (RD0BM007.RD0BMOPT > 0
     && RD0BM007.RD0BMOPT < 7)
      return;
    else
        /* next sentence*/
    end
  end
  RD0BM007.RD0BMMSG = "ENTER ONE OF ABOVE OPTIONS";
  set RD0BM007.RD0BMOPT cursor, bold;
  set RD0BM007 alarm;
  RDWREC.RDWERFLG = "Y";

  return;


end // end RD0BS7A

// check for errors on cntl updat
Function RD0BS7X()

       /* *** check for errors on control file update*/


  if (RD4REC is ioError)
    RD0BM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0BM007.RD0BMMSG = "CONTROL FILE";
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS7X

// check for errors on cont repl
Function RD0BS7Y()

       /* *** check for errors on control file replace*/


  if (RD4REC is ioError)
    RD0BM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0BM007.RD0BMMSG = "CONTROL FILE";
    set RD0BM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  set RD0BM007 initial;
  set RD0BM008 initial;
  RD0BM007.RD0BMMSG = "CONTROL FILE UPDATED";

  return;


end // end RD0BS7Y

// set up screen headings
Function RD0BS80()


     /* *** setup screen headings based on menu option*/

  if (RD0BM007.RD0BMOPT == 1)
    RD0BM008.RD0BMHDG = "PRINT DISTRIBUTION (ALL)";
    RD0BM008.RD0BMLIT = " ";
    return;
  end

  if (RD0BM007.RD0BMOPT == 2)
    RD0BM008.RD0BMHDG = "PRINT DIST BY RECIPIENT";
    RD0BM008.RD0BMLIT = "ENTER RECIPIENT NUMBER:";
    return;
  end

  if (RD0BM007.RD0BMOPT == 3)
    RD0BM008.RD0BMHDG = "PRINT DIST BY LOCATION";
    RD0BM008.RD0BMLIT = "ENTER LOCATION NUMBER:";
    return;
  end

  if (RD0BM007.RD0BMOPT == 4)
    RD0BM008.RD0BMHDG = "PRINT DIST BY DEPARTMENT";
    RD0BM008.RD0BMLIT = "ENTER DEPARTMENT NUMBER:";
    return;
  end

  if (RD0BM007.RD0BMOPT == 5)
    RD0BM008.RD0BMHDG = "PRINT DIST BY DOCUMENT";
    RD0BM008.RD0BMLIT = "ENTER DOCUMENT NUMBER:";
    return;
  end

  if (RD0BM007.RD0BMOPT == 6)
    RD0BM008.RD0BMHDG = "PRINT DISTRIBUTION (ALL W/ FLAGS)";
    RD0BM008.RD0BMLIT = " ";
    return;
  end

end // end RD0BS80

// process keys
Function RD0BS81()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0BM008.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM008.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0BM008.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0B";
    XSEXIT();
    RD0BM008.RD0BMMSG = COMMAREA.CAMSG;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM008.CATOAP != " ")
    RD0BS82();
    if (RDWREC.RDWUPFLG == "Y")
      RD0BM008.RD0BMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0BM008 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0BM008 to COMMAREA withV60Compat;
      XSEXIT();
      RD0BM008.RD0BMMSG = COMMAREA.CAMSG;
      set RD0BM008 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  RD0BS8D();

  RD0BS8C();

  RD0BS8B();

  RD0BS8A();

  if (RD0BM007.RD0BMOPT != 1)
    if (RD0BM007.RD0BMOPT != 6)
      RD0BS8E();
    end
  end

  return;


end // end RD0BS81

// set update flag
Function RD0BS82()


       /* ***  set map fields as modified*/

  if (RD0BM008.RD5FLDX is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM008.RD5SORT1 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM008.RD5PGBRK is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM008.RD5SORT2 is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0BM008.RD1COPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0BS82

// build control file fields
Function RD0BS83()

  RD5REC.RD5SORT1 = RD0BM008.RD5SORT1;

  if (RD0BM008.RD5PGBRK == "Y")
    RD5REC.RD5PGBRK = RD0BM008.RD5PGBRK;
  else
    RD5REC.RD5PGBRK = "N";
  end

  RD5REC.RD5SORT2 = RD0BM008.RD5SORT2;

  if (RD0BM008.RD1COPNO > 00)
    RD5REC.RD1COPNO = RD0BM008.RD1COPNO;
  else
    RD5REC.RD1COPNO = 01;
  end

  RD5REC.RD5FLDID = RD0BM007.RD0BMOPT;

  if (RD0BM007.RD0BMOPT == 1)
    RD5REC.RD5FLDX = " ";
  else
    if (RD0BM007.RD0BMOPT == 2
     || RD0BM007.RD0BMOPT == 3)
      RD5REC.RD5FLD9 = RD0BW1.RD0BWF9;
    else
      RD5REC.RD5FLDX = RD0BW1.RD5FLDX;
    end
  end

end // end RD0BS83

// set map fields modified
Function RD0BS85()


       /* ***  set map fields as modified*/

  if (RD0BM008.RD5FLDX is modified)
    set RD0BM008.RD5FLDX modified;
  end

  if (RD0BM008.RD5SORT1 is modified)
    set RD0BM008.RD5SORT1 modified;
  end

  if (RD0BM008.RD5PGBRK is modified)
    set RD0BM008.RD5PGBRK modified;
  end

  if (RD0BM008.RD5SORT2 is modified)
    set RD0BM008.RD5SORT2 modified;
  end

  if (RD0BM008.RD1COPNO is modified)
    set RD0BM008.RD1COPNO modified;
  end


end // end RD0BS85

// validate major sort
Function RD0BS8A()


       /* *** validate major sort*/

  if (RD0BM008.RD5SORT1 is modified)
       /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0BM008.RD5SORT1 cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM008.RD5SORT1 > 0
   && RD0BM008.RD5SORT1 < 8)
       /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0BM008.RD5SORT1 cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BM008.RD5SORT1 == RD0BM008.RD5SORT2)
    RD0BM008.RD0BMMSG = "MAJOR AND MINOR SORT CANNOT BE THE SAME";
    set RD0BM008.RD5SORT1 cursor, bold;
    set RD0BM008.RD5SORT2 bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  return;
end // end RD0BS8A

// validate page break
Function RD0BS8B()


       /* *** validate page break indicator*/

  if (RD0BM008.RD5PGBRK is modified)
    if (RD0BM008.RD5PGBRK == "Y"
     || RD0BM008.RD5PGBRK == "N")
      return;
    end
  end

  RD0BM008.RD5PGBRK = "N";

  return;

end // end RD0BS8B

// validate minor sort
Function RD0BS8C()


       /* *** validate minor sort*/

  if (RD0BM008.RD5SORT2 is modified)
     /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0BM008.RD5SORT2 cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BM008.RD5SORT2 > 0
   && RD0BM008.RD5SORT2 < 8)
       /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0BM008.RD5SORT2 cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0BM008.RD5SORT2 == RD0BM008.RD5SORT1)
    RD0BM008.RD0BMMSG = "MAJOR AND MINOR SORT CANNOT BE THE SAME";
    set RD0BM008.RD5SORT1 bold;
    set RD0BM008.RD5SORT2 cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  return;


end // end RD0BS8C

// validate number of copies
Function RD0BS8D()


       /* *** validate number of copies*/

  if (RD0BM008.RD1COPNO is modified)
    if (RD0BM008.RD1COPNO > 0
     && RD0BM008.RD1COPNO < 11)
      return;
    else
      RD0BM008.RD0BMMSG = "NUMBER OF COPIES CANNOT EXCEED 10";
      set RD0BM008.RD1COPNO cursor, bold;
      set RD0BM008 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  RD0BM008.RD1COPNO = 1;


end // end RD0BS8D

// validate variable field
Function RD0BS8E()


       /* ***  validate recip, locat, depart or doc numbers*/

  if (RD0BM008.RD5FLDX is modified)
     /* next sentence*/
  else
    RD0BM008.RD0BMMSG = "NUMBER REQUIRED";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0BW1.RD5FLDX = RD0BM008.RD5FLDX;

  if (RD0BW1.RD5FLDX == " ")
    RD0BM008.RD0BMMSG = "NUMBER REQUIRED";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BM007.RD0BMOPT == 4
   || RD0BM007.RD0BMOPT == 5)
    return;
  end

  if (RD0BW1.RD5FLDX5 == " "
   || RD0BW1.RD5FLDX5 < "0"
   || RD0BW1.RD5FLDX5 > "9")
    RD0BM008.RD0BMMSG = "ENTER ALL 5 DIGITS OF NUMBER";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD5FLDX4 == " "
   || RD0BW1.RD5FLDX4 < "0"
   || RD0BW1.RD5FLDX4 > "9")
    RD0BM008.RD0BMMSG = "ENTER ALL 5 DIGITS OF NUMBER";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD5FLDX3 == " "
   || RD0BW1.RD5FLDX3 < "0"
   || RD0BW1.RD5FLDX3 > "9")
    RD0BM008.RD0BMMSG = "ENTER ALL 5 DIGITS OF NUMBER";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (RD0BW1.RD5FLDX2 == " "
   || RD0BW1.RD5FLDX2 < "0"
   || RD0BW1.RD5FLDX2 > "9")
    RD0BM008.RD0BMMSG = "ENTER ALL 5 DIGITS OF NUMBER";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
  end

  if (RD0BW1.RD5FLDX1 == " "
   || RD0BW1.RD5FLDX1 < "0"
   || RD0BW1.RD5FLDX1 > "9")
    RD0BM008.RD0BMMSG = "ENTER ALL 5 DIGITS OF NUMBER";
    set RD0BM008.RD5FLDX cursor, bold;
    set RD0BM008 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0BS8E

Record RD0BW1 type basicRecord
  10 RD1SEQNO RD1SEQNO ; 
  10 RD2NAME RD2NAME ; 
  10 RD3NAME RD3NAME ; 
  10 RD1ACRO RD1ACRO ; 
    15 RD1ACRO1 RD1ACRO1 ; 
    15 RD1ACRO2 RD1ACRO2 ; 
  10 RD1FREQ RD1FREQ ; 
    15 RD1FREQC RD1FREQC ; 
    15 RD1FREQD RD1FREQD ; 
      20 RD0BWP1 RD0BWP1 ; 
      20 RD0BWP2 RD0BWP2 ; 
      20 RD0BWP35 RD0BWP35 ; 
        25 RD0BWP3 RD0BWP3 ; 
        25 RD0BWP4 RD0BWP4 ; 
        25 RD0BWP5 RD0BWP5 ; 
  10 RD5FLDX RD5FLDX ; 
    15 RD0BWF9 RD0BWF9 ; 
      20 RD5FLDX1 RD5FLDX1 ; 
      20 RD5FLDX2 RD5FLDX2 ; 
      20 RD5FLDX3 RD5FLDX3 ; 
      20 RD5FLDX4 RD5FLDX4 ; 
      20 RD5FLDX5 RD5FLDX5 ; 
    15 * char(10) ; 
  10 RD2DEPT RD2DEPT ; 
  10 RD2RECNO RD2RECNO ; 
  10 RD3LOCNO RD3LOCNO ; 
end // end RD0BW1

//*** RECORD=RD1REC ****
// The RDS distribution master file contains the following data
// elements:
//  -report key     2 digit acronym,
//                  8 byte report number,
//                  2 digit sequence number (tie
//                    breaker beginning with 01)
//  -file name      file name of the report
//  -document no    document number
//  -report title1  report title 1
//  -report title2  report title 2 (optional)
//  -filler    was  location number
//  -filler    was  department name
//  -recipient num  recipient number
//  -special hdlg 1 special handling 1 (optional)
//  -special hdlg 2 special handling 2 (optional)
//  -report freq    1 digit frequency
//                           d=daily    w=weekly
//                           m=monthly  r=request
//                        5 digit day of week   or
//                        1-5 = m-f             or
//                        99=last day of month
//  -num of copies  number of copies of report
//  -fiche ind      f=fiche   blank=no fiche
//  -flag           u=report name is a userid
// 
//   The RDS distribution file is added, changed or deleted
//   via the RDS distribution menu. The main purpose of the
//   file is to maintain report information to create labels
//   to paste on report listings for distribution from the
//   DEC and SPERRY machines.
// **********************
Record RD1REC type indexedRecord  {
  fileName = "RD1DIST", keyItem = RD1KEY
  }
  5 * char(350) ; 
    10 RD1KEY RD1KEY ; 
      15 RD1ACRO RD1ACRO ; 
        20 RD1ACRO1 RD1ACRO1 ; 
        20 RD1ACRO2 RD1ACRO2 ; 
      15 RD1REPNO RD1REPNO ; 
      15 RD1SEQNO RD1SEQNO ; 
    10 RD1FILNM RD1FILNM ; 
    10 RD1DOCNO RD1DOCNO ; 
    10 RD1REPT1 RD1REPT1 ; 
    10 RD1REPT2 RD1REPT2 ; 
    10 * num(5) ; 
    10 * char(15) ; 
    10 RD2RECNO RD2RECNO ; 
    10 RD1SPHD1 RD1SPHD1 ; 
    10 RD1SPHD2 RD1SPHD2 ; 
    10 RD1FREQ RD1FREQ ; 
      15 RD1FREQC RD1FREQC ; 
      15 RD1FREQD RD1FREQD ; 
    10 RD1COPNO RD1COPNO ; 
    10 RD1FICHE RD1FICHE ; 
    10 RD1FLAG RD1FLAG ; 
    10 * char(174) ; 
end // end RD1REC

// print field numeric
DataItem RD0BWF9 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// freq day pos 1
DataItem RD0BWP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freq day pos 2
DataItem RD0BWP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freq day pos 3
DataItem RD0BWP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freq day pos 3 - 5
DataItem RD0BWP35 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freq day pos 4
DataItem RD0BWP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freq day pos 5
DataItem RD0BWP5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     report acronym
DataItem RD1ACRO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// acro pos 1
DataItem RD1ACRO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// acro pos 2
DataItem RD1ACRO2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fiche indicator
DataItem RD1FICHE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// file name
DataItem RD1FILNM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special flag
DataItem RD1FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report frequency
DataItem RD1FREQ char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     frequency day
DataItem RD1FREQD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// distribution key
DataItem RD1KEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     report number
DataItem RD1REPNO char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report title 1
DataItem RD1REPT1 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report title 2
DataItem RD1REPT2 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//     sequence number
DataItem RD1SEQNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// special handling 1
DataItem RD1SPHD1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special handling 2
DataItem RD1SPHD2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

