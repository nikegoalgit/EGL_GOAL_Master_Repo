package rd0d;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import rd.common.RD1COPNO;
import rd.common.RD3LOCNO;
import rd.common.RD3REC;
import rd.common.RD4COID;
import rd.common.RD4REC;
import rd.common.RD4TYPE;
import rd.common.RDWREC;
Program RD0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  RD0DW1 RD0DW1; // record
  RD3REC RD3REC; // record
  RD4REC RD4REC; // record
  RD7REC RD7REC { redefines = RD4REC } ; // record
  RDWREC RDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use RD0DM.RD0DM001,  // forms
      RD0DM.RD0DM002, 
      RD0DM.RD0DM003, 
      RD0DM.RD0DM004, 
      RD0DM.RD0DM005, 
      RD0DM.RD0DM006, 
      RD0DM.RD0DM007
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    RD0D001: RD0D001();
    ;
    ;
    ;
       /* *** flow to converse location menu*/
    ;
    ;
    goto RD0D002;
    ;
    ;
    RD0D002: RD0D002();
    ;
    ;
        /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D002;
    end
    ;
        /* *** branch to process indicated by menu option*/
    ;
    if (RD0DM001.RD0DMOPT == 1)
      goto RD0D010;
    end
    ;
    if (RD0DM001.RD0DMOPT == 2)
      goto RD0D020;
    end
    ;
    if (RD0DM001.RD0DMOPT == 3)
      goto RD0D030;
    end
    ;
    if (RD0DM001.RD0DMOPT == 4)
      goto RD0D040;
    end
    ;
    if (RD0DM001.RD0DMOPT == 5)
      goto RD0D050;
    end
    ;
    ;
    RD0D010: RD0D010();
    RD0D011: RD0D011();
    ;
    ;
         /* *** if errors, branch back to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D010;
    end
    ;
    goto RD0D012;
    ;
    ;
    RD0D012: RD0D012();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D011;
    end
    ;
    goto RD0D013;
    ;
    ;
    RD0D013: RD0D013();
    ;
    ;
         /* *** if there are errors return to  converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D011;
    end
    ;
    goto RD0D014;
    ;
    ;
    RD0D014: RD0D014();
    ;
    ;
         /* *** branch back to converse*/
    ;
    goto RD0D011;
    ;
    RD0D020: RD0D020();
    RD0D021: RD0D021();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D021;
    end
    ;
    goto RD0D022;
    ;
    ;
    RD0D022: RD0D022();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D021;
    end
    ;
         /* *** build screen for converse*/
    ;
    move RD3REC to RD0DM004 byName;
    ;
    goto RD0D023;
    ;
    ;
    RD0D023: RD0D023();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D023;
    end
    ;
    goto RD0D024;
    ;
    ;
    RD0D024: RD0D024();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D021;
    end
    ;
    goto RD0D025;
    ;
    ;
    RD0D025: RD0D025();
    ;
    ;
         /* ***  return to converse*/
    ;
    goto RD0D021;
    ;
    ;
    RD0D030: RD0D030();
    RD0D031: RD0D031();
    ;
    ;
         /* *** if there are errors, branch to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D031;
    end
    ;
    goto RD0D032;
    ;
    ;
    RD0D032: RD0D032();
    ;
    ;
         /* ***  if there are errors, branch to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D031;
    end
    ;
    goto RD0D033;
    ;
    ;
    RD0D033: RD0D033();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D033;
    end
    ;
         /* *** if delete flag is selected, branch to delete logic*/
    ;
    if (RD0DM005.RD0DMYN == "Y")
      goto RD0D034;
    end
    ;
         /* *** delete was cancelled, return to converse*/
    ;
    set RD0DM003 initial;
    set RD0DM005 initial;
    ;
    goto RD0D031;
    ;
    ;
    RD0D034: RD0D034();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D031;
    end
    ;
    goto RD0D035;
    ;
    ;
    RD0D035: RD0D035();
    ;
    ;
         /* *** return to converse*/
    ;
    goto RD0D031;
    ;
    ;
    RD0D040: RD0D040();
    RD0D041: RD0D041();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D041;
    end
    ;
    goto RD0D042;
    ;
    ;
    RD0D042: RD0D042();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D041;
    end
    ;
    goto RD0D043;
    ;
    ;
    RD0D043: RD0D043();
    ;
    ;
         /* *** if new loc # entered, branch to inquiry*/
    ;
    if (RD0DM006.RD3LOCNO is modified)
      RD0DM003.RD3LOCNO = RD0DM006.RD3LOCNO;
      goto RD0D042;
    end
    ;
    goto RD0D043;
    ;
    ;
    RD0D050: RD0D050();
    RD0D051: RD0D051();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D051;
    end
    ;
    goto RD0D052;
    ;
    ;
    RD0D052: RD0D052();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0D051;
    end
    ;
    goto RD0D053;
    ;
    ;
    RD0D053: RD0D053();
    ;
    ;
         /* *** return to converse*/
    ;
    goto RD0D051;
    ;
    ;
  end // end main
end // end RD0D

// first time thru logic
Function RD0D001()
  ;
  ;
     /* ***  entry process for menu security system*/
  ;
  ;
  ;
  XSENTRY();
  ;
  ;
end // end RD0D001

// location maintenance screen
Function RD0D002()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0DM001.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM001.RD0DMPRC = "RD0D002";
  RD0DM001.CATOAP = " ";
  RD0DM001.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM001 ;
  ;
  ;
  RD0DM001.VAGen_EZEMSG = " ";
  RD0DM001.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS10();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS15();
  end
  ;
  ;
end // end RD0D002

// check fast path entry
Function RD0D010()
end // end RD0D010

// add location screen
Function RD0D011()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM002.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM002.RD0DMPRC = "RD0D011";
  RD0DM002.CATOAP = " ";
  RD0DM002.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM002 ;
  ;
  ;
  RD0DM002.VAGen_EZEMSG = " ";
  RD0DM002.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS20();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS25();
  end
  ;
  ;
end // end RD0D011

// lock control record
Function RD0D012()
  ;
  ;
       /* *** initialize the control file key*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 03;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD4REC forUpdate ;
  end
  ;
       /* *** check for errors on control file update*/
  ;
  RD0DS2X();
  ;
  ;
end // end RD0D012

// replace control record
Function RD0D013()
  ;
  ;
       /* *** replace next available location number*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 03;
  ;
  RD7REC.RD3LOCNO = RD7REC.RD3LOCNO + 5;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD4REC ;
  end
  ;
  ;
       /* *** check for errors on control file replace*/
  ;
  RD0DS2Y();
  ;
  ;
end // end RD0D013

// add location record
Function RD0D014()
  ;
  ;
       /* *** add the location record*/
  ;
  ;
  RD3REC.RD3LOCNO = RD0DW1.RD3LOCNO;
  RD3REC.RD3NAME = RD0DM002.RD3NAME;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    add RD3REC ;
  end
  ;
  ;
      /* *** check for errors in location file add*/
  ;
  RD0DS2Z();
  ;
  ;
end // end RD0D014

// check fast path entry
Function RD0D020()
end // end RD0D020

// change location screen-1
Function RD0D021()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM003.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM003.RD0DMPRC = "RD0D021";
  RD0DM003.RD0DMHDG = "     CHANGE LOCATION";
  RD0DM003.CATOAP = " ";
  RD0DM003.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM003 ;
  ;
  ;
  RD0DM003.VAGen_EZEMSG = " ";
  RD0DM003.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS35();
  end
  ;
  ;
end // end RD0D021

// display location file
Function RD0D022()
  ;
  ;
       /* *** intialize key for location inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0DM003.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location file inquiry*/
  ;
  RD0DS3W();
  ;
  ;
end // end RD0D022

// change location screen-2
Function RD0D023()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM004.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM004.RD0DMPRC = "RD0D023";
  RD0DM004.CATOAP = " ";
  RD0DM004.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM004 ;
  ;
  ;
  RD0DM004.VAGen_EZEMSG = " ";
  RD0DM004.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS40();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS45();
  end
  ;
  ;
end // end RD0D023

// lock location record
Function RD0D024()
  ;
  ;
       /* *** initialize the location file key*/
  ;
  RD3REC.RD3LOCNO = RD0DM004.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on location file update*/
  ;
  RD0DS3X();
  ;
  ;
end // end RD0D024

// replace location record
Function RD0D025()
  ;
  ;
       /* *** initialize the location file key*/
  ;
  move RD0DM004 to RD3REC byName;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD3REC ;
  end
  ;
  ;
     /* *** check for errors on location file replace*/
  ;
  RD0DS3Y();
  ;
  ;
end // end RD0D025

// check fast path entry
Function RD0D030()
end // end RD0D030

// delete location screen-1
Function RD0D031()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM003.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM003.RD0DMPRC = "RD0D031";
  RD0DM003.RD0DMHDG = "     DELETE LOCATION";
  RD0DM003.CATOAP = " ";
  RD0DM003.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM003 ;
  ;
  ;
  RD0DM003.VAGen_EZEMSG = " ";
  RD0DM003.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS35();
  end
  ;
  ;
end // end RD0D031

// display location file
Function RD0D032()
  ;
  ;
       /* *** intialize key for location inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0DM003.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location file inquiry*/
  ;
  RD0DS3W();
  ;
  ;
end // end RD0D032

// delete location screen-2
Function RD0D033()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0DM005.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM005.RD0DMPRC = "RD0D033";
  RD0DM005.CATOAP = " ";
  RD0DM005.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  move RD3REC to RD0DM005 byName;
  ;
  converse RD0DM005 ;
  ;
  ;
  RD0DM005.VAGen_EZEMSG = " ";
  RD0DM005.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS50();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS55();
  end
  ;
  ;
end // end RD0D033

// lock location record
Function RD0D034()
  ;
  ;
       /* *** initialize key for location update*/
  ;
  RD3REC.RD3LOCNO = RD0DM005.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on location file update*/
  ;
  RD0DS3X();
  ;
  ;
end // end RD0D034

// delete location record
Function RD0D035()
  ;
  ;
       /* *** initialize key for location file delete*/
  ;
  RD3REC.RD3LOCNO = RD0DM005.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    delete RD3REC ;
  end
  ;
  ;
     /* *** check for errors on location file delete*/
  ;
  RD0DS3Z();
  ;
  ;
end // end RD0D035

// check fast path entry
Function RD0D040()
end // end RD0D040

// inquire location screen-1
Function RD0D041()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM003.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM003.RD0DMPRC = "RD0D041";
  RD0DM003.RD0DMHDG = " INQUIRE ON LOCATION";
  RD0DM003.CATOAP = " ";
  RD0DM003.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM003 ;
  ;
  ;
  RD0DM003.VAGen_EZEMSG = " ";
  RD0DM003.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS35();
  end
  ;
  ;
end // end RD0D041

// display location file
Function RD0D042()
  ;
  ;
       /* *** intialize key for location inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0DM003.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location file inquiry*/
  ;
  RD0DS3W();
  ;
  ;
end // end RD0D042

// inquire location screen-2
Function RD0D043()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM006.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM006.RD0DMPRC = "RD0D033";
  RD0DM006.CATOAP = " ";
  RD0DM006.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  move RD3REC to RD0DM006 byName;
  ;
  converse RD0DM006 ;
  ;
  ;
  RD0DM006.VAGen_EZEMSG = " ";
  RD0DM006.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS60();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS65();
  end
  ;
  ;
end // end RD0D043

// check fast path entry
Function RD0D050()
end // end RD0D050

// print location screen
Function RD0D051()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0DM007.RD0DMDTE = VGVar.currentShortGregorianDate;
  RD0DM007.RD0DMPRC = "RD0D051";
  RD0DM007.CATOAP = " ";
  RD0DM007.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0DM007 ;
  ;
  ;
  RD0DM007.VAGen_EZEMSG = " ";
  RD0DM007.RD0DMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0DS70();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0DS75();
  end
  ;
  ;
end // end RD0D051

// lock control record
Function RD0D052()
  ;
  ;
       /* *** initialize the control file key*/
       /* *** for location print parameters*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 03;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD4REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on control file update*/
  ;
  RD0DS7X();
  ;
  ;
end // end RD0D052

// replace control record
Function RD0D053()
  ;
  ;
       /* *** initialize the control file key*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 03;
  ;
  if (RD0DM007.RD1COPNO > 00)
    RD7REC.RD1COPNO = RD0DM007.RD1COPNO;
  else
    RD7REC.RD1COPNO = 00;
  end
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD4REC ;
  end
  ;
  ;
     /* *** check for errors on control file replace*/
  ;
  RD0DS7Y();
  ;
  ;
end // end RD0D053

// process keys
Function RD0DS10()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM001.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0M";
    XSEXIT();
    RD0DM001.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM001.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM001.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0DM001.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM001.CATOAP != " ")
    RD0DS11();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM001.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM001 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM001.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM001.RD0DMOPT is modified)
    RD0DS1A();
    return;
  else
    RD0DM001.RD0DMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0DM001.RD0DMOPT cursor, bold;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS10

// set update flag
Function RD0DS11()
  ;
  ;
       /* *** set update flag*/
  ;
  ;
  if (RD0DM001.RD0DMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS11

// set fields as modified
Function RD0DS15()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM001.RD0DMOPT is modified)
    set RD0DM001.RD0DMOPT modified;
    return;
  end
  ;
  ;
end // end RD0DS15

// edit screen option
Function RD0DS1A()
  ;
  ;
       /* *** process menu option*/
  ;
  ;
  if (RD0DM001.RD0DMOPT == 1)
    if (COMMAREA.CAADDFL == "Y")
      return;
    else
      RD0DM001.RD0DMMSG = "YOU DO NOT HAVE ADD CAPABILITIES";
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM001.RD0DMOPT == 2)
    if (COMMAREA.CACHGFL == "Y")
      return;
    else
      RD0DM001.RD0DMMSG = "YOU DO NOT HAVE CHANGE CAPABILITIES";
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM001.RD0DMOPT == 3)
    if (COMMAREA.CADELFL == "Y")
      return;
    else
      RD0DM001.RD0DMMSG = "YOU DO NOT HAVE DELETE CAPABILITIES";
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM001.RD0DMOPT == 4)
    if (COMMAREA.CAINQFL == "Y")
      return;
    else
      RD0DM001.RD0DMMSG = "YOU DO NOT HAVE INQUIRE CAPABILITIES";
      set RD0DM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM001.RD0DMOPT == 5)
    return;
  else
    RD0DM001.RD0DMMSG = "ENTER ONE OF ABOVE OPTIONS";
    set RD0DM001.RD0DMOPT cursor, bold;
    set RD0DM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS1A

// process keys
Function RD0DS20()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM002.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM002.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM002.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM002.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0DM002.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM002.CATOAP != " ")
    RD0DS21();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM002.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM002 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM002.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM002.RD3NAME is modified)
    if (RD0DM002.RD3NAME == " ")
      RD0DM002.RD0DMMSG = "LOCATION NAME IS REQUIRED";
      set RD0DM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      return;
    end
  end
  ;
  RD0DM002.RD0DMMSG = "LOCATION NAME IS REQUIRED";
  set RD0DM002 alarm;
  RDWREC.RDWERFLG = "Y";
  return;
  ;
end // end RD0DS20

// set update flag
Function RD0DS21()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM002.RD3NAME is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS21

// set map fields modified
Function RD0DS25()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM002.RD3NAME is modified)
    set RD0DM002.RD3NAME modified;
    return;
  end
  ;
  ;
end // end RD0DS25

// check control file update
Function RD0DS2X()
  ;
       /* *** check for errors on control file update*/
  ;
  ;
  if (RD4REC is ioError)
    RD0DM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
    RD0DM002.RD0DMMSG = "CONTROL FILE";
    set RD0DM002.RD3NAME cursor, bold;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  RD0DW1.RD3LOCNO = RD7REC.RD3LOCNO;
  ;
  ;
end // end RD0DS2X

// check control file replace
Function RD0DS2Y()
  ;
       /* *** check for errors on control file replace*/
  ;
  ;
  if (RD4REC is ioError)
    RD0DM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0DM002.RD0DMMSG = "CONTROL FILE";
    set RD0DM002.RD3NAME cursor, bold;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS2Y

// check errors on location add
Function RD0DS2Z()
  ;
       /* *** check for errors on location file add*/
  ;
  ;
  if (RD3REC is ioError)
    set RD0DM002.RD3NAME cursor, bold;
    set RD0DM002 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is unique)
      RD0DM002.VAGen_EZEMSG = "LOCATION NAME ALREADY EXISTS";
      RD0DM002.RD0DMMSG = "REENTER LOCATION NAME";
      return;
    else
      RD0DM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED ADDING THE";
      RD0DM002.RD0DMMSG = "LOCATION RECORD";
      return;
    end
  end
  ;
  set RD0DM002 initial;
  RD0DM002.VAGen_EZEMSG = RD0DW1.RD3LOCNO;
  RD0DM002.RD0DMMSG = "LOCATION ADDED";
  ;
  ;
end // end RD0DS2Z

// process keys
Function RD0DS30()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM003.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM003.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM003.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM003.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0DM003.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM003.CATOAP != " ")
    RD0DS31();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM003.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM003 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM003.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  RD0DS3A();
  ;
  if (RD0DM003.RD3LOCNO is modified)
    if (RD0DM003.RD3LOCNO == 00000)
      RD0DM003.RD0DMMSG = "LOCATION NUMBER IS REQUIRED";
      set RD0DM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      return;
    end
  end
  ;
  RD0DM003.RD0DMMSG = "LOCATION NUMBER IS REQUIRED";
  set RD0DM003 alarm;
  RDWREC.RDWERFLG = "Y";
  return;
  ;
  ;
end // end RD0DS30

// set update flag
Function RD0DS31()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM003.RD3LOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS31

// set map fields modified
Function RD0DS35()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM003.RD3LOCNO is modified)
    set RD0DM003.RD3LOCNO modified;
    return;
  end
  ;
  ;
end // end RD0DS35

// validate location number
Function RD0DS3A()
  ;
  ;
       /* *** validate location number*/
  ;
  ;
  if (RD0DM003.RD3LOCNO is modified)
    if (RD0DM003.RD3LOCNO == 00000)
      RD0DM003.RD0DMMSG = "LOCATION NUMBER REQUIRED";
      set RD0DM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      return;
    end
  end
  ;
  RD0DM003.RD0DMMSG = "LOCATION NUMBER REQUIRED";
  set RD0DM003 alarm;
  RDWREC.RDWERFLG = "Y";
  ;
  return;
  ;
  ;
end // end RD0DS3A

// check for location inq errors
Function RD0DS3W()
  ;
       /* *** check for errors on location file inquire*/
  ;
  ;
  if (RD3REC is ioError)
    set RD0DM003.RD3LOCNO cursor, bold;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is noRecordFound)
      RD0DM003.RD0DMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0DM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0DM003.RD0DMMSG = "LOCATION FILE ";
      return;
    end
  end
  ;
  RD0DM004.RD3NAME = RD3REC.RD3NAME;
  ;
end // end RD0DS3W

// check for errors on loc update
Function RD0DS3X()
  ;
       /* *** check for errors on location file update*/
  ;
  ;
  if (RD3REC is ioError)
    RD0DM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0DM003.RD0DMMSG = "LOCATION FILE";
    set RD0DM003.RD3LOCNO cursor, bold;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS3X

// check for error on loc replace
Function RD0DS3Y()
  ;
       /* *** check for errors on location file replace*/
  ;
  ;
  if (RD3REC is ioError)
    set RD0DM003 initial;
    set RD0DM003.RD3LOCNO cursor, bold;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is unique)
      RD0DM003.VAGen_EZEMSG = "LOCATION NAME ALREADY EXISTS";
      RD0DM003.RD0DMMSG = "REENTER";
      return;
    else
      RD0DM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED REPLACING THE";
      RD0DM003.RD0DMMSG = "LOCATION FILE";
      return;
    end
  end
  ;
  set RD0DM003 initial;
  RD0DM003.VAGen_EZEMSG = RD0DM004.RD3LOCNO;
  RD0DM003.RD0DMMSG = "LOCATION CHANGED";
  ;
  return;
  ;
end // end RD0DS3Y

// check for errors on loc delete
Function RD0DS3Z()
  ;
       /* *** check for errors on location file delete*/
  ;
  ;
  if (RD3REC is ioError)
    RD0DM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED DELETING THE";
    RD0DM003.RD0DMMSG = "LOCATION FILE";
    set RD0DM003.RD3LOCNO cursor, bold;
    set RD0DM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  set RD0DM003 initial;
  RD0DM003.VAGen_EZEMSG = RD0DM005.RD3LOCNO;
  RD0DM003.RD0DMMSG = "LOCATION DELETED";
  ;
  return;
  ;
end // end RD0DS3Z

// process keys
Function RD0DS40()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM004.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM004.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM004.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM004.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0DM004.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM004.CATOAP != " ")
    RD0DS41();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM004.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM004 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM004.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM004.RD3NAME is modified)
    if (RD0DM004.RD3NAME == " ")
      RD0DM004.RD0DMMSG = "ENTER CHANGE";
      set RD0DM004.RD3NAME cursor, bold;
      set RD0DM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      return;
    end
  end
  ;
  RD0DM004.RD0DMMSG = "ENTER CHANGE";
  set RD0DM004 alarm;
  RDWREC.RDWERFLG = "Y";
  return;
  ;
  ;
end // end RD0DS40

// set update flag
Function RD0DS41()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM004.RD3NAME is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS41

// set map fields modified
Function RD0DS45()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM004.RD3NAME is modified)
    set RD0DM004.RD3NAME modified;
    return;
  end
  ;
  ;
end // end RD0DS45

// process keys
Function RD0DS50()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM005.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM005.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM005.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM005.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0DM005.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM005.CATOAP != " ")
    RD0DS51();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM005.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM005 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM005.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  ;
  ;
end // end RD0DS50

// set update flag
Function RD0DS51()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM005.RD0DMYN is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS51

// set map fields modified
Function RD0DS55()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM005.RD0DMYN is modified)
    set RD0DM005.RD0DMYN modified;
    return;
  end
  ;
  ;
end // end RD0DS55

// process keys
Function RD0DS60()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM006.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM006.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM006.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM006.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
    set RD0DM006.RD3LOCNO cursor;
  else
    RD0DM006.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM006.CATOAP != " ")
    RD0DS61();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM006.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM006 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM006.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM006.RD3LOCNO is modified)
    if (RD0DM006.RD3LOCNO == " ")
      RD0DM006.RD0DMMSG = "ENTER LOCATION NUMBER";
      set RD0DM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
end // end RD0DS60

// set update flag
Function RD0DS61()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM006.RD3LOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS61

// set map fields as modified
Function RD0DS65()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM006.RD3LOCNO is modified)
    set RD0DM006.RD3LOCNO modified;
    return;
  end
  ;
  ;
end // end RD0DS65

// process keys
Function RD0DS70()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0DM007.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM007.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0DM007.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0D";
    XSEXIT();
    RD0DM007.RD0DMMSG = COMMAREA.CAMSG;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
         /* next sentence*/
  else
    RD0DM007.RD0DMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0DM007.CATOAP != " ")
    RD0DS71();
    if (RDWREC.RDWUPFLG == "Y")
      RD0DM007.RD0DMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0DM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0DM007 to COMMAREA withV60Compat;
      XSEXIT();
      RD0DM007.RD0DMMSG = COMMAREA.CAMSG;
      set RD0DM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0DM007.RD1COPNO is modified)
    RD0DS7A();
  else
    RD0DM007.RD1COPNO = 1;
  end
  ;
  ;
end // end RD0DS70

// set update flag
Function RD0DS71()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0DM007.RD1COPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS71

// set map fields modified
Function RD0DS75()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0DM007.RD1COPNO is modified)
    set RD0DM007.RD1COPNO modified;
    return;
  end
  ;
  ;
end // end RD0DS75

// validate number of copies
Function RD0DS7A()
  ;
  ;
     /* *** validate number of copies*/
  ;
  if (RD0DM007.RD1COPNO > 10)
    RD0DM007.RD0DMMSG = "NUMBER OF COPIES EXCEED 10";
    set RD0DM007.RD1COPNO cursor, bold;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS7A

// check errors on loc update
Function RD0DS7X()
  ;
       /* *** check for errors on control file update*/
  ;
  ;
  if (RD4REC is ioError)
    RD0DM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0DM007.RD0DMMSG = "CONTROL FILE";
    set RD0DM007.RD1COPNO cursor, bold;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0DS7X

// check errors on cntl replace
Function RD0DS7Y()
  ;
       /* *** check for errors on control file replace*/
  ;
  ;
  if (RD4REC is ioError)
    RD0DM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0DM007.RD0DMMSG = "CONTROL FILE";
    set RD0DM007.RD1COPNO cursor, bold;
    set RD0DM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  RD0DM007.RD0DMMSG = "CONTROL FILE UPDATED";
  ;
end // end RD0DS7Y

//*** RECORD=RD0DW1 ****
// This record is the working storage record for application
//                       RD0D.
// **********************
Record RD0DW1 type basicRecord
  10 RD3LOCNO RD3LOCNO ; 
end // end RD0DW1

Record RD7REC type basicRecord // VAGen Info - redefined RD4REC
  10 RD4COID RD4COID ; 
  10 RD4TYPE RD4TYPE ; 
  10 RD3LOCNO RD3LOCNO ; 
  10 RD1COPNO RD1COPNO ; 
  10 * char(286) ; 
end // end RD7REC

