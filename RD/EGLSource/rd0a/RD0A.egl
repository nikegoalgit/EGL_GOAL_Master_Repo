package rd0a;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import rd.common.RD1FREQC;
import rd.common.RD4REC;
import rd.common.RD5FREQD;
import rd.common.RD5REC;
import rd.common.RDWREC;
Program RD0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  RD0AW1 RD0AW1; // record
  RD4REC RD4REC; // record
  RD5REC RD5REC; // record
  RDWREC RDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use RD0AM.RD0AM001,  // forms
      RD0AM.RD0AM002, 
      RD0AM.RD0AM003, 
      RD0AM.RD0AM004, 
      RD0AM.RD0AM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    RD0A001: RD0A001();



       /* *** flow to converse*/


    goto RD0A002;


    RD0A002: RD0A002();


        /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0A002;
    end

        /* *** branch to selected option process*/

    if (RD0AM001.RD0AMOPT == 1)
      goto RD0A010;
    end

    if (RD0AM001.RD0AMOPT == 2)
      goto RD0A020;
    end

    if (RD0AM001.RD0AMOPT == 3)
      goto RD0A030;
    end


    RD0A010: RD0A010();


    RD0A011: RD0A011();


         /* *** if errors, branch back to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0A011;
    end

    goto RD0A040;


    RD0A020: RD0A020();
    RD0A021: RD0A021();


         /* *** if there are errors, return to converse*/


    if (RDWREC.RDWERFLG == "Y")
      goto RD0A021;
    end

    goto RD0A040;


    RD0A030: RD0A030();
    RD0A040: RD0A040();


         /* *** if there are errors, branch to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0A040;
    end

    if (RD0AM004.RD0AMYN == "Y")
      goto RD0A041;
    end

    goto RD0A042;

    RD0A041: RD0A041();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0A041;
    end

    goto RD0A042;


    RD0A042: RD0A042();


         /* *** if there are errors, return to converse*/

    if (RDWREC.RDWERFLG == "Y")
      goto RD0A002;
    end

    goto RD0A043;


    RD0A043: RD0A043();


         /* *** branch to converse*/

    goto RD0A002;


  end // end main
end // end RD0A

// first time thru logic
Function RD0A001()


     /* ***  entry process for menu security system*/


  XSENTRY();


end // end RD0A001

// print rd labels screen
Function RD0A002()


       /* ***initialize screen variables*/


  RD0AM001.RD0AMDTE = VGVar.currentShortGregorianDate;
  RD0AM001.RD0AMPRC = "RD0A002";
  RD0AM001.CATOAP = " ";
  RD0AM001.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0AM001 ;


  RD0AM001.VAGen_EZEMSG = " ";
  RD0AM001.RD0AMMSG = " ";

       /* *** process keys*/

  RD0AS10();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0AS15();
  end


end // end RD0A002

// check fast path entry
Function RD0A010()
end // end RD0A010

// daily screen
Function RD0A011()


       /* ***initialize screen variables*/

  RD0AM002.RD0AMDTE = VGVar.currentShortGregorianDate;
  RD0AM002.RD0AMPRC = "RD0A011";
  RD0AM002.CATOAP = " ";
  RD0AM002.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0AM002 ;


  RD0AM002.VAGen_EZEMSG = " ";
  RD0AM002.RD0AMMSG = " ";

       /* *** process keys*/

  RD0AS20();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0AS25();
  end


end // end RD0A011

// check fast path entry
Function RD0A020()
end // end RD0A020

// weekend screen
Function RD0A021()


       /* ***initialize screen variables*/

  RD0AM003.RD0AMDTE = VGVar.currentShortGregorianDate;
  RD0AM003.RD0AMPRC = "RD0A021";
  RD0AM003.CATOAP = " ";
  RD0AM003.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0AM003 ;


  RD0AM003.VAGen_EZEMSG = " ";
  RD0AM003.RD0AMMSG = " ";

       /* *** process keys*/

  RD0AS30();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0AS35();
  end


end // end RD0A021

// check fast path entry
Function RD0A030()


     /* *** month frequency*/

  RD0AW1.RD1FREQC = "M";

  RD0AW1.RD5FREQD = " ";


end // end RD0A030

// additional labels?
Function RD0A040()


       /* ***initialize screen variables*/

  RD0AM004.RD0AMDTE = VGVar.currentShortGregorianDate;
  RD0AM004.RD0AMPRC = "RD0A040";
  RD0AM004.CATOAP = " ";
  RD0AM004.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0AM004 ;


  RD0AM004.VAGen_EZEMSG = " ";
  RD0AM004.RD0AMMSG = " ";

       /* *** process keys*/

  RD0AS40();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0AS45();
  end


end // end RD0A040

// document number
Function RD0A041()


       /* ***initialize screen variables*/

  RD0AM005.RD0AMDTE = VGVar.currentShortGregorianDate;
  RD0AM005.RD0AMPRC = "RD0A041";
  RD0AM005.CATOAP = " ";
  RD0AM005.CAITEM = " ";

  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";


  converse RD0AM005 ;


  RD0AM005.VAGen_EZEMSG = " ";
  RD0AM005.RD0AMMSG = " ";

       /* *** process keys*/

  RD0AS50();

       /* *** if errors, set map fields modified*/

  if (RDWREC.RDWERFLG == "Y")
    RD0AS55();
  end


end // end RD0A041

// lock control file
Function RD0A042()


       /* *** initialize the control file key*/

  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 01;

  RDWREC.RDWERFLG = "N";


  try
    get RD4REC forUpdate ;
  end

       /* *** check for errors on control file update*/

  RD0AS1X();


end // end RD0A042

// replace control file
Function RD0A043()


       /* *** update control file label info*/

  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 01;

  RD0AS1W();

  RDWREC.RDWERFLG = "N";


  try
    replace RD4REC ;
  end


       /* *** check for errors on control file replace*/

  RD0AS1Y();


end // end RD0A043

// process keys
Function RD0AS10()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0AM001.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0M";
    XSEXIT();
    RD0AM001.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0AM001.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM001.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0AM001.RD0AMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0AM001.CATOAP != " ")
    RD0AS11();
    if (RDWREC.RDWUPFLG == "Y")
      RD0AM001.RD0AMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0AM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0AM001 to COMMAREA withV60Compat;
      XSEXIT();
      RD0AM001.RD0AMMSG = COMMAREA.CAMSG;
      set RD0AM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0AM001.RD0AMOPT is modified)
    RD0AS1A();
    return;
  else
    RD0AM001.RD0AMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0AM001.RD0AMOPT cursor, bold;
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0AS10

// set update flag
Function RD0AS11()


       /* *** set update flag*/


  if (RD0AM001.RD0AMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0AS11

// set map fields modified
Function RD0AS15()


       /* ***  set map fields as modified*/

  if (RD0AM001.RD0AMOPT is modified)
    set RD0AM001.RD0AMOPT modified;
    return;
  end


end // end RD0AS15

// validate menu option
Function RD0AS1A()


       /* *** process menu option*/


  if (RD0AM001.RD0AMOPT > 0
   && RD0AM001.RD0AMOPT < 4)
    return;
  end

  RD0AM001.RD0AMMSG = "ENTER ONE OF ABOVE OPTIONS";
  set RD0AM001.RD0AMOPT cursor, bold;
  set RD0AM001 alarm;
  RDWREC.RDWERFLG = "Y";

  return;


end // end RD0AS1A

// move cntl updates
Function RD0AS1W()


       /* *** update fields on control file*/

  move RD0AW1 to RD5REC withV60Compat;

  move RD0AM005 to RD5REC withV60Compat;

  return;

end // end RD0AS1W

// check errors on cntl update
Function RD0AS1X()

       /* *** check for errors on control file update*/


  if (RD4REC is ioError)
    RD0AM001.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
    RD0AM001.RD0AMMSG = "CONTROL FILE";
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0AS1X

// check for errors on cntl repl
Function RD0AS1Y()

       /* *** check for errors on control file replace*/


  if (RD4REC is ioError)
    RD0AM001.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0AM001.RD0AMMSG = "CONTROL FILE";
    set RD0AM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  set RD0AM001 initial;
  set RD0AM002 initial;
  set RD0AM003 initial;
  set RD0AM004 initial;
  set RD0AM005 initial;
  RD0AM001.RD0AMMSG = "CONTROL FILE UPDATED";

  return;


end // end RD0AS1Y

// process keys
Function RD0AS20()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0AM002.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM002.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0AM002.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM002.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0AM002.RD0AMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0AM002.CATOAP != " ")
    RD0AS21();
    if (RDWREC.RDWUPFLG == "Y")
      RD0AM002.RD0AMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0AM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0AM002 to COMMAREA withV60Compat;
      XSEXIT();
      RD0AM002.RD0AMMSG = COMMAREA.CAMSG;
      set RD0AM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0AM002.RD0AMOPT is modified)
    RD0AS2A();
    return;
  else
    RD0AM002.RD0AMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0AM002.RD0AMOPT cursor, bold;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0AS20

// set update flag
Function RD0AS21()


       /* *** set update flag*/


  if (RD0AM002.RD0AMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0AS21

// set map fields modified
Function RD0AS25()


       /* ***  set map fields as modified*/

  if (RD0AM002.RD0AMOPT is modified)
    set RD0AM002.RD0AMOPT modified;
    return;
  end


end // end RD0AS25

// validate menu option
Function RD0AS2A()


       /* *** process menu option*/


  if (RD0AM002.RD0AMOPT > 0
   && RD0AM002.RD0AMOPT < 5)
      /* next sentence*/
  else
    RD0AM002.RD0AMMSG = "ENTER ONE OF ABOVE OPTIONS";
    set RD0AM002.RD0AMOPT cursor, bold;
    set RD0AM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0AW1.RD1FREQC = "D";

  RD0AW1.RD5FREQD = RD0AM002.RD0AMOPT;

  return;


end // end RD0AS2A

// process keys
Function RD0AS30()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0AM003.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM003.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0AM003.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM003.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0AM003.RD0AMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0AM003.CATOAP != " ")
    RD0AS31();
    if (RDWREC.RDWUPFLG == "Y")
      RD0AM003.RD0AMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0AM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0AM003 to COMMAREA withV60Compat;
      XSEXIT();
      RD0AM003.RD0AMMSG = COMMAREA.CAMSG;
      set RD0AM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0AM003.RD0AMOPT is modified)
    RD0AS3A();
    return;
  else
    RD0AM003.RD0AMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0AM003.RD0AMOPT cursor, bold;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


end // end RD0AS30

// set update flag
Function RD0AS31()


       /* *** set update flag*/


  if (RD0AM003.RD0AMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0AS31

// set map fields modified
Function RD0AS35()


       /* ***  set map fields as modified*/

  if (RD0AM003.RD0AMOPT is modified)
    set RD0AM003.RD0AMOPT modified;
    return;
  end


end // end RD0AS35

// validate menu option
Function RD0AS3A()


       /* *** process menu option*/


  if (RD0AM003.RD0AMOPT > 0
   && RD0AM003.RD0AMOPT < 6)
      /* next sentence*/
  else
    RD0AM003.RD0AMMSG = "ENTER ONE OF ABOVE OPTIONS";
    set RD0AM003.RD0AMOPT cursor, bold;
    set RD0AM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  RD0AW1.RD1FREQC = "W";

  RD0AW1.RD5FREQD = RD0AM003.RD0AMOPT;

  return;


end // end RD0AS3A

// process keys
Function RD0AS40()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0AM004.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM004.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0AM004.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM004.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0AM004.RD0AMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0AM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0AM004.CATOAP != " ")
    RD0AS41();
    if (RDWREC.RDWUPFLG == "Y")
      RD0AM004.RD0AMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0AM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0AM004 to COMMAREA withV60Compat;
      XSEXIT();
      RD0AM004.RD0AMMSG = COMMAREA.CAMSG;
      set RD0AM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  if (RD0AM004.RD0AMYN is modified)
    RD0AS4A();
    return;
  end

  RDWREC.RDWERFLG = "N";

  return;

end // end RD0AS40

// set update flag
Function RD0AS41()


       /* *** set update flag*/


  if (RD0AM004.RD0AMYN is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0AS41

// set map fields modified
Function RD0AS45()


       /* ***  set map fields as modified*/

  if (RD0AM004.RD0AMYN is modified)
    set RD0AM004.RD0AMYN modified;
    return;
  end


end // end RD0AS45

// validate map response
Function RD0AS4A()


       /* *** process menu option*/


  if (RD0AM004.RD0AMYN == "Y")
    return;
  end

  RD0AM004.RD0AMYN = "N";

  return;


end // end RD0AS4A

// process keys
Function RD0AS50()


       /* *** process the KEY pressed*/


  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0AM005.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM005.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0AM005.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0A";
    XSEXIT();
    RD0AM005.RD0AMMSG = COMMAREA.CAMSG;
    set RD0AM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end

  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0AM005.RD0AMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0AM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end


  if (RD0AM004.CATOAP != " ")
    RD0AS51();
    if (RDWREC.RDWUPFLG == "Y")
      RD0AM005.RD0AMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0AM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0AM005 to COMMAREA withV60Compat;
      XSEXIT();
      RD0AM005.RD0AMMSG = COMMAREA.CAMSG;
      set RD0AM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end

  RD0AS5A();

  return;

end // end RD0AS50

// set update flag
Function RD0AS51()


       /* ***  set map fields as modified*/

  if (RD0AM005.RD1DOCNO[01] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[02] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[03] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[04] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[05] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[06] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[07] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[08] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[09] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[10] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[11] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[12] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[13] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[14] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[15] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[16] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[17] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[18] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[19] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end

  if (RD0AM005.RD1DOCNO[20] is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end


end // end RD0AS51

// set map fields modified
Function RD0AS55()


       /* ***  set map fields as modified*/

  if (RD0AM005.RD1DOCNO[01] is modified)
    set RD0AM005.RD1DOCNO[01] modified;
  end

  if (RD0AM005.RD1DOCNO[02] is modified)
    set RD0AM005.RD1DOCNO[02] modified;
  end

  if (RD0AM005.RD1DOCNO[03] is modified)
    set RD0AM005.RD1DOCNO[03] modified;
  end

  if (RD0AM005.RD1DOCNO[04] is modified)
    set RD0AM005.RD1DOCNO[04] modified;
  end

  if (RD0AM005.RD1DOCNO[05] is modified)
    set RD0AM005.RD1DOCNO[05] modified;
  end

  if (RD0AM005.RD1DOCNO[06] is modified)
    set RD0AM005.RD1DOCNO[06] modified;
  end

  if (RD0AM005.RD1DOCNO[07] is modified)
    set RD0AM005.RD1DOCNO[07] modified;
  end

  if (RD0AM005.RD1DOCNO[08] is modified)
    set RD0AM005.RD1DOCNO[08] modified;
  end

  if (RD0AM005.RD1DOCNO[09] is modified)
    set RD0AM005.RD1DOCNO[09] modified;
  end

  if (RD0AM005.RD1DOCNO[10] is modified)
    set RD0AM005.RD1DOCNO[10] modified;
  end

  if (RD0AM005.RD1DOCNO[11] is modified)
    set RD0AM005.RD1DOCNO[11] modified;
  end

  if (RD0AM005.RD1DOCNO[12] is modified)
    set RD0AM005.RD1DOCNO[12] modified;
  end

  if (RD0AM005.RD1DOCNO[13] is modified)
    set RD0AM005.RD1DOCNO[13] modified;
  end

  if (RD0AM005.RD1DOCNO[14] is modified)
    set RD0AM005.RD1DOCNO[14] modified;
  end

  if (RD0AM005.RD1DOCNO[15] is modified)
    set RD0AM005.RD1DOCNO[15] modified;
  end

  if (RD0AM005.RD1DOCNO[16] is modified)
    set RD0AM005.RD1DOCNO[16] modified;
  end

  if (RD0AM005.RD1DOCNO[17] is modified)
    set RD0AM005.RD1DOCNO[17] modified;
  end

  if (RD0AM005.RD1DOCNO[18] is modified)
    set RD0AM005.RD1DOCNO[18] modified;
  end

  if (RD0AM005.RD1DOCNO[19] is modified)
    set RD0AM005.RD1DOCNO[19] modified;
  end

  if (RD0AM005.RD1DOCNO[20] is modified)
    set RD0AM005.RD1DOCNO[20] modified;
  end

  return;


end // end RD0AS55

// validate document numbers
Function RD0AS5A()


       /* *** validate first document number*/


  if (RD0AM005.RD1DOCNO[01] is modified)
    if (RD0AM005.RD1DOCNO[01] != " ")
      return;
    end
  end

  RD0AM005.RD0AMMSG = "DOCUMENT NUMBER REQUIRED";
  set RD0AM005.RD1DOCNO[01] cursor, bold;
  set RD0AM005 alarm;
  RDWREC.RDWERFLG = "Y";

  return;


end // end RD0AS5A

Record RD0AW1 type basicRecord
  5 RD1FREQC RD1FREQC ; 
  5 RD5FREQD RD5FREQD ; 
end // end RD0AW1

