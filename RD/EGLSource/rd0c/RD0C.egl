package rd0c;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import rd.common.RD1COPNO;
import rd.common.RD2DEPT;
import rd.common.RD2REC;
import rd.common.RD2RECNO;
import rd.common.RD3LOCNO;
import rd.common.RD3NAME;
import rd.common.RD3REC;
import rd.common.RD4COID;
import rd.common.RD4REC;
import rd.common.RD4TYPE;
import rd.common.RDWREC;
Program RD0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  RD0CW1 RD0CW1; // record
  RD2REC RD2REC; // record
  RD3REC RD3REC; // record
  RD4REC RD4REC; // record
  RD6REC RD6REC { redefines = RD4REC } ; // record
  RDWREC RDWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use RD0CM.RD0CM001,  // forms
      RD0CM.RD0CM002, 
      RD0CM.RD0CM003, 
      RD0CM.RD0CM004, 
      RD0CM.RD0CM005, 
      RD0CM.RD0CM006, 
      RD0CM.RD0CM007
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    RD0C001: RD0C001();
    ;
    ;
    ;
       /* *** flow to converse*/
    ;
    ;
    goto RD0C002;
    ;
    ;
    RD0C002: RD0C002();
    ;
    ;
        /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C002;
    end
    ;
        /* *** branch to selected option application*/
    ;
    if (RD0CM001.RD0CMOPT == 1)
      goto RD0C010;
    end
    ;
    if (RD0CM001.RD0CMOPT == 2)
      goto RD0C020;
    end
    ;
    if (RD0CM001.RD0CMOPT == 3)
      goto RD0C030;
    end
    ;
    if (RD0CM001.RD0CMOPT == 4)
      goto RD0C040;
    end
    ;
    if (RD0CM001.RD0CMOPT == 5)
      goto RD0C050;
    end
    ;
    ;
    RD0C010: RD0C010();
    ;
    ;
    RD0C011: RD0C011();
    ;
    ;
         /* *** if errors, branch back to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C010;
    end
    ;
    goto RD0C015;
    ;
    ;
    RD0C015: RD0C015();
    ;
      /* *** if errors converse map again, otherwise go to update*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C010;
    end
    ;
    ;
    goto RD0C012;
    ;
    ;
    RD0C012: RD0C012();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C011;
    end
    ;
    goto RD0C013;
    ;
    ;
    RD0C013: RD0C013();
    ;
    ;
         /* *** if there are errors return to  converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C011;
    end
    ;
    goto RD0C014;
    ;
    ;
    RD0C014: RD0C014();
    ;
    ;
         /* *** branch back to converse*/
    ;
    goto RD0C011;
    ;
    RD0C020: RD0C020();
    RD0C021: RD0C021();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C021;
    end
    ;
    goto RD0C022;
    ;
    ;
    RD0C022: RD0C022();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C021;
    end
    ;
         /* *** build scrren for converse*/
    ;
    move RD2REC to RD0CM004 byName;
    RD0CW1.RD2DEPT = RD2REC.RD2DEPT;
    RD0CW1.RD3LOCNO = RD2REC.RD3LOCNO;
    ;
    ;
    RD0C026: RD0C026();
    ;
         /* SINCE THERE ARE NO ERRORS, SET UP CURSOR NEXT SCREEN*/
    ;
    set RD0CM004.RD2NAME cursor;
    ;
    ;
    RD0C023: RD0C023();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C023;
    end
    ;
    ;
    RD0C027: RD0C027();
    ;
     /* if there are errors branch to converse*/
    ;
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C023;
    end
    ;
    RD0C024: RD0C024();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C021;
    end
    ;
    goto RD0C025;
    ;
    ;
    RD0C025: RD0C025();
    ;
    ;
         /* ***  return to converse*/
    ;
    goto RD0C021;
    ;
    ;
    RD0C030: RD0C030();
    RD0C031: RD0C031();
    ;
    ;
         /* *** if there are errors, branch to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C031;
    end
    ;
    goto RD0C032;
    ;
    ;
    RD0C032: RD0C032();
    ;
    ;
         /* ***  if there are errors, branch to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C031;
    end
    ;
    ;
    RD0C036: RD0C036();
    RD0C033: RD0C033();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C033;
    end
    ;
         /* *** if delete flag is selected, branch to delete logic*/
    ;
    if (RD0CM005.RD0CMYN == "Y")
      goto RD0C034;
    end
    ;
         /* *** delete was cancelled, return to converse*/
    ;
    set RD0CM003 initial;
    set RD0CM005 initial;
    goto RD0C031;
    ;
    ;
    RD0C034: RD0C034();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C031;
    end
    ;
    goto RD0C035;
    ;
    ;
    RD0C035: RD0C035();
    ;
    ;
         /* *** return to converse*/
    ;
    goto RD0C031;
    ;
    ;
    RD0C040: RD0C040();
    RD0C041: RD0C041();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C041;
    end
    ;
    RD0C044: RD0C044();
    ;
       /* if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C041;
    end
    ;
    goto RD0C042;
    ;
    ;
    RD0C042: RD0C042();
    ;
    RD0C043: RD0C043();
    ;
    ;
         /* *** if new rec # entered, branch to inquiry*/
    ;
    if (RD0CM006.RD2RECNO is modified)
      RD0CM003.RD2RECNO = RD0CM006.RD2RECNO;
      goto RD0C044;
    end
    ;
    goto RD0C043;
    ;
    ;
    RD0C050: RD0C050();
    RD0C051: RD0C051();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C051;
    end
    ;
    goto RD0C052;
    ;
    ;
    RD0C052: RD0C052();
    ;
    ;
         /* *** if there are errors, return to converse*/
    ;
    if (RDWREC.RDWERFLG == "Y")
      goto RD0C051;
    end
    ;
    goto RD0C053;
    ;
    ;
    RD0C053: RD0C053();
    ;
    ;
         /* *** return to converse*/
    ;
    goto RD0C051;
    ;
    ;
  end // end main
end // end RD0C

// first time thru logic
Function RD0C001()
  ;
  ;
     /* ***  entry process for menu security system*/
  ;
  ;
  ;
  XSENTRY();
  ;
  ;
end // end RD0C001

// recipient maintenance screen
Function RD0C002()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0CM001.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM001.RD0CMPRC = "RD0C002";
  RD0CM001.CATOAP = " ";
  RD0CM001.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0CM001 ;
  ;
  ;
  RD0CM001.VAGen_EZEMSG = " ";
  RD0CM001.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS10();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS15();
  end
  ;
  ;
end // end RD0C002

// check fast path entry
Function RD0C010()
end // end RD0C010

// add recipient screen
Function RD0C011()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0CM002.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM002.RD0CMPRC = "RD0C011";
  RD0CM002.CATOAP = " ";
  RD0CM002.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  set RD0CM002.RD2NAME modified;
  set RD0CM002.RD2DEPT modified;
  set RD0CM002.RD3LOCNO modified;
  ;
  ;
  converse RD0CM002 ;
  ;
  ;
  RD0CM002.VAGen_EZEMSG = " ";
  RD0CM002.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS20();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS25();
  end
  ;
  ;
end // end RD0C011

// lock control record
Function RD0C012()
  ;
  ;
       /* *** initialize the control file key*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 02;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD4REC forUpdate ;
  end
   /* GET RD0D012*/
  ;
       /* *** check for errors on control file update*/
  ;
  RD0CS2X();
  ;
  ;
end // end RD0C012

// replace control record
Function RD0C013()
  ;
  ;
       /* *** replace next available recipient number*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 02;
  ;
  RD6REC.RD2RECNO = RD6REC.RD2RECNO + 1;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD4REC ;
  end
  ;
  ;
       /* *** check for errors on control file replace*/
  ;
  RD0CS2Y();
  ;
  ;
end // end RD0C013

// add recipient record
Function RD0C014()
  ;
  ;
       /* *** add the recipient record*/
  ;
  ;
  RD2REC.RD2RECNO = RD0CW1.RD2RECNO;
  RD2REC.RD2NAME = RD0CM002.RD2NAME;
  RD2REC.RD2DEPT = RD0CM002.RD2DEPT;
  RD2REC.RD3LOCNO = RD0CM002.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    add RD2REC ;
  end
  ;
  ;
      /* *** check for errors in recipient file add*/
  ;
  RD0CS2Z();
  ;
  ;
end // end RD0C014

// validate location data
Function RD0C015()
  ;
  ;
       /* *** intialize key for location  inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0CM002.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location  file inquiry*/
  ;
  RD0CS1M();
  ;
  ;
end // end RD0C015

// check fast path entry
Function RD0C020()
end // end RD0C020

// change recipient screen-1
Function RD0C021()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0CM003.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM003.RD0CMPRC = "RD0C021";
  RD0CM003.RD0CMHDG = "    CHANGE RECIPIENT";
  RD0CM003.CATOAP = " ";
  RD0CM003.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0CM003 ;
  ;
  ;
  RD0CM003.VAGen_EZEMSG = " ";
  RD0CM003.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS35();
  end
  ;
end // end RD0C021

// display recipient file
Function RD0C022()
  ;
  ;
       /* *** intialize key for recipient inquiry*/
  ;
  RD2REC.RD2RECNO = RD0CM003.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD2REC ;
  end
  ;
  ;
       /* *** check for errors on recipient file inquiry*/
  ;
  RD0CS3W();
  ;
  ;
end // end RD0C022

// change recipient screen-2
Function RD0C023()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0CM004.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM004.RD0CMPRC = "RD0C023";
  RD0CM004.CATOAP = " ";
  RD0CM004.CAITEM = " ";
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
      /* *** set mdts to return dept and location. this to*/
      /* *** insure those fields in initial record are valid.*/
  ;
  ;
  RD0CM004.RD2NAME = RD2REC.RD2NAME;
  RD0CM004.RD2DEPT = RD0CW1.RD2DEPT;
  RD0CM004.RD3LOCNO = RD0CW1.RD3LOCNO;
  set RD0CM004.RD2DEPT modified;
  set RD0CM004.RD3LOCNO modified;
  ;
  ;
  converse RD0CM004 ;
  ;
  ;
  RD0CM004.VAGen_EZEMSG = " ";
  RD0CM004.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS40();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS45();
  end
  ;
  ;
end // end RD0C023

// lock recipient record
Function RD0C024()
  ;
  ;
       /* *** initialize the recipient file key*/
  ;
  RD2REC.RD2RECNO = RD0CM004.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD2REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on recipient file update*/
  ;
  RD0CS3X();
  ;
  ;
end // end RD0C024

// replace recipient record
Function RD0C025()
  ;
  ;
       /* *** initialize the recipient file key*/
  ;
  move RD0CM004 to RD2REC byName;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD2REC ;
  end
  ;
  ;
     /* *** check for errors on recipient file replace*/
  ;
  RD0CS3Y();
  ;
  ;
end // end RD0C025

// display location data
Function RD0C026()
  ;
  ;
       /* *** intialize key for location  inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0CW1.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location  file inquiry*/
  ;
  RD0CS2M();
  ;
  ;
end // end RD0C026

// validate location number
Function RD0C027()
  ;
  ;
       /* *** intialize key for location  inquiry*/
  ;
  RD3REC.RD3LOCNO = RD0CW1.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location  file inquiry*/
  ;
  RD0CS2Q();
  ;
  ;
end // end RD0C027

// check fast path entry
Function RD0C030()
end // end RD0C030

// delete recipient screen-1
Function RD0C031()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0CM003.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM003.RD0CMPRC = "RD0C031";
  RD0CM003.RD0CMHDG = "    DELETE RECIPIENT";
  RD0CM003.CATOAP = " ";
  RD0CM003.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0CM003 ;
  ;
  ;
  RD0CM003.VAGen_EZEMSG = " ";
  RD0CM003.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS35();
  end
  ;
  ;
end // end RD0C031

// display recipient file
Function RD0C032()
  ;
  ;
       /* *** intialize key for recipient inquiry*/
  ;
  RD2REC.RD2RECNO = RD0CM003.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD2REC ;
  end
  ;
  ;
       /* *** check for errors on recipient file inquiry*/
  ;
  RD0CS3W();
  ;
  ;
end // end RD0C032

// delete recipient screen-2
Function RD0C033()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0CM005.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM005.RD0CMPRC = "RD0C033";
  RD0CM005.CATOAP = " ";
  RD0CM005.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  move RD2REC to RD0CM005 byName;
  RD0CM005.RD3NAME = RD0CW1.RD3NAME;
  ;
  converse RD0CM005 ;
  ;
  ;
  RD0CM005.VAGen_EZEMSG = " ";
  RD0CM005.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS50();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS55();
  end
  ;
  ;
end // end RD0C033

// lock recipient record
Function RD0C034()
  ;
  ;
       /* *** initialize key for recipient update*/
  ;
  RD2REC.RD2RECNO = RD0CM005.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD2REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on recipient file update*/
  ;
  RD0CS3X();
  ;
  ;
end // end RD0C034

// delete recipient record
Function RD0C035()
  ;
  ;
       /* *** initialize key for recipient file delete*/
  ;
  RD2REC.RD2RECNO = RD0CM005.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    delete RD2REC ;
  end
  ;
  ;
     /* *** check for errors on recipient file delete*/
  ;
  RD0CS3Z();
  ;
  ;
end // end RD0C035

// read location record
Function RD0C036()
  ;
  ;
       /* *** intialize key for location  inquiry*/
  ;
  RD3REC.RD3LOCNO = RD2REC.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location  file inquiry*/
  ;
  RD0CS3S();
  ;
  ;
end // end RD0C036

// check fast path entry
Function RD0C040()
end // end RD0C040

// inquire recipient screen-1
Function RD0C041()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0CM003.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM003.RD0CMPRC = "RD0C041";
  RD0CM003.RD0CMHDG = "INQUIRE ON RECIPIENT";
  RD0CM003.CATOAP = " ";
  RD0CM003.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0CM003 ;
  ;
  ;
  RD0CM003.VAGen_EZEMSG = " ";
  RD0CM003.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS30();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS35();
  end
  ;
  ;
end // end RD0C041

// read location record
Function RD0C042()
  ;
  ;
       /* *** intialize key for location inquiry*/
  ;
  RD3REC.RD3LOCNO = RD2REC.RD3LOCNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD3REC ;
  end
  ;
  ;
       /* *** check for errors on location file inquiry*/
  ;
  RD0CS3T();
  ;
  ;
end // end RD0C042

// inquire recipient screen-2
Function RD0C043()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  ;
  RD0CM006.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM006.RD0CMPRC = "RD0C033";
  RD0CM006.CATOAP = " ";
  RD0CM006.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  move RD2REC to RD0CM006 byName;
  RD0CM006.RD3NAME = RD0CW1.RD3NAME;
  ;
  RD0CS62();
  ;
  ;
  converse RD0CM006 ;
   /* GET RD0D043*/
  ;
  ;
  RD0CM006.VAGen_EZEMSG = " ";
  RD0CM006.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS60();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS65();
  end
  ;
  ;
end // end RD0C043

// display recipient file
Function RD0C044()
  ;
  ;
       /* *** intialize key for recipient inquiry*/
  ;
  RD2REC.RD2RECNO = RD0CM003.RD2RECNO;
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD2REC ;
  end
  ;
  ;
       /* *** check for errors on recipient file inquiry*/
  ;
  RD0CS3W();
  ;
  ;
end // end RD0C044

// check fast path entry
Function RD0C050()
end // end RD0C050

// print recipient screen
Function RD0C051()
  ;
  ;
       /* ***initialize screen variables*/
  ;
  RD0CM007.RD0CMDTE = VGVar.currentShortGregorianDate;
  RD0CM007.RD0CMPRC = "RD0C051";
  RD0CM007.CATOAP = " ";
  RD0CM007.CAITEM = " ";
  ;
  RDWREC.RDWERFLG = "N";
  RDWREC.RDWUPFLG = "N";
  ;
  ;
  converse RD0CM007 ;
  ;
  ;
  RD0CM007.VAGen_EZEMSG = " ";
  RD0CM007.RD0CMMSG = " ";
  ;
       /* *** process keys*/
  ;
  RD0CS70();
  ;
       /* *** if errors, set map fields modified*/
  ;
  if (RDWREC.RDWERFLG == "Y")
    RD0CS75();
  end
  ;
  ;
end // end RD0C051

// lock control record
Function RD0C052()
  ;
  ;
       /* *** initialize the control file key*/
       /* *** for recipient print parameters*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 02;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    get RD4REC forUpdate ;
  end
  ;
  ;
     /* *** check for errors on control file update*/
  ;
  RD0CS7X();
  ;
  ;
end // end RD0C052

// replace control record
Function RD0C053()
  ;
  ;
       /* *** initialize the control file key*/
  ;
  RD4REC.RD4COID = 00001;
  RD4REC.RD4TYPE = 02;
  ;
  if (RD0CM007.RD1COPNO > 00)
    RD6REC.RD1COPNO = RD0CM007.RD1COPNO;
  else
    RD6REC.RD1COPNO = 01;
  end
  ;
  RDWREC.RDWERFLG = "N";
  ;
  ;
  try
    replace RD4REC ;
  end
  ;
  ;
     /* *** check for errors on control file replace*/
  ;
  RD0CS7Y();
  ;
  ;
end // end RD0C053

// process keys
Function RD0CS10()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM001.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0M";
    XSEXIT();
    RD0CM001.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM001.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM001.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0CM001.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM001.CATOAP != " ")
    RD0CS11();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM001.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM001 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM001.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM001.RD0CMOPT is modified)
    RD0CS1A();
    return;
  else
    RD0CM001.RD0CMMSG = "ENTER ONE OF THE ABOVE OPTIONS";
    set RD0CM001.RD0CMOPT cursor, bold;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS10

// set update flag
Function RD0CS11()
  ;
  ;
       /* *** set update flag*/
  ;
  ;
  if (RD0CM001.RD0CMOPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS11

// set map fields modified
Function RD0CS15()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM001.RD0CMOPT is modified)
    set RD0CM001.RD0CMOPT modified;
    return;
  end
  ;
  ;
end // end RD0CS15

// validate  menu option
Function RD0CS1A()
  ;
  ;
       /* *** process menu option*/
  ;
  ;
  if (RD0CM001.RD0CMOPT == 1)
    if (COMMAREA.CAADDFL == "Y")
      return;
    else
      RD0CM001.RD0CMMSG = "YOU DO NOT HAVE ADD CAPABILITIES";
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM001.RD0CMOPT == 2)
    if (COMMAREA.CACHGFL == "Y")
      return;
    else
      RD0CM001.RD0CMMSG = "YOU DO NOT HAVE CHANGE CAPABILITIES";
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM001.RD0CMOPT == 3)
    if (COMMAREA.CADELFL == "Y")
      return;
    else
      RD0CM001.RD0CMMSG = "YOU DO NOT HAVE DELETE CAPABILITIES";
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM001.RD0CMOPT == 4)
    if (COMMAREA.CAINQFL == "Y")
      return;
    else
      RD0CM001.RD0CMMSG = "YOU DO NOT HAVE INQUIRE CAPABILITIES";
      set RD0CM001 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM001.RD0CMOPT == 5)
    return;
  else
    RD0CM001.RD0CMMSG = "ENTER ONE OF ABOVE OPTIONS";
    set RD0CM001.RD0CMOPT cursor, bold;
    set RD0CM001 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS1A

// check errors on loc inquiry
Function RD0CS1M()
  ;
       /* *** check for errors on location  file inquire*/
  ;
  RD2REC.RD3LOCNO = RD0CM002.RD3LOCNO;
  ;
  if (RD3REC is ioError)
    set RD0CM002 alarm;
    set RD0CM002.RD3LOCNO cursor;
    RDWREC.RDWERFLG = "Y";
    if (RD3REC is noRecordFound)
      RD0CM002.RD0CMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0CM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0CM002.RD0CMMSG = "LOCATION FILE ";
      return;
    end
  end
  ;
  ;
end // end RD0CS1M

// process keys
Function RD0CS20()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM002.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM002.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM002.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM002.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0CM002.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM002.CATOAP != " ")
    RD0CS21();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM002.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM002 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM002.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM002.RD2NAME is modified)
    if (RD0CM002.RD2NAME == " ")
      RD0CM002.RD0CMMSG = "RECIPIENT NAME IS REQUIRED";
      set RD0CM002.RD2NAME cursor, bold;
      set RD0CM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  ;
  if (RD0CM002.RD2DEPT is modified)
    if (RD0CM002.RD2DEPT == " ")
      RD0CM002.RD0CMMSG = "DEPARTMENT IS REQUIRED";
      set RD0CM002.RD2DEPT cursor, bold;
      set RD0CM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  ;
  if (RD0CM002.RD3LOCNO is modified)
    if (RD0CM002.RD3LOCNO == 0)
      RD0CM002.RD0CMMSG = "LOCATION NUMBER IS REQUIRED";
      set RD0CM002.RD3LOCNO cursor, bold;
      set RD0CM002 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  ;
  return;
end // end RD0CS20

// set update flag
Function RD0CS21()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM002.RD2NAME is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS21

// set map fields modified
Function RD0CS25()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM002.RD2NAME is modified)
    set RD0CM002.RD2NAME modified;
    return;
  end
  ;
  ;
end // end RD0CS25

// check errors on loc inquiry
Function RD0CS2M()
  ;
       /* *** check for errors on location  file inquire*/
  ;
  RD0CM004.RD3LOCNO = RD0CW1.RD3LOCNO;
  ;
  if (RD3REC is ioError)
    set RD0CM004 alarm;
    set RD0CM004.RD3LOCNO cursor;
    RDWREC.RDWERFLG = "Y";
    RD0CM004.RD3NAME = " ";
    if (RD3REC is noRecordFound)
      RD0CM004.RD0CMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0CM004.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0CM004.RD0CMMSG = "LOCATION FILE ";
      return;
    end
  end
  ;
  RD0CM004.RD3NAME = RD3REC.RD3NAME;
  ;
end // end RD0CS2M

// check errors on loc inquiry
Function RD0CS2Q()
  ;
       /* *** check for errors on location  file inquire*/
  ;
  if (RD3REC is ioError)
    set RD0CM004.RD3LOCNO cursor;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    RD0CM004.RD3NAME = " ";
    if (RD3REC is noRecordFound)
      RD0CM004.RD0CMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0CM004.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0CM004.RD0CMMSG = "LOCATION FILE ";
      return;
    end
  end
  ;
  RD0CM004.RD3NAME = RD3REC.RD3NAME;
  ;
end // end RD0CS2Q

// checks errors on cntl update
Function RD0CS2X()
  ;
       /* *** check for errors on control file update*/
  ;
  ;
  if (RD4REC is ioError)
    RD0CM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
    RD0CM002.RD0CMMSG = "CONTROL FILE";
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  RD0CW1.RD2RECNO = RD6REC.RD2RECNO;
  ;
  ;
end // end RD0CS2X

// check errors on cntl replace
Function RD0CS2Y()
  ;
       /* *** check for errors on control file replace*/
  ;
  ;
  if (RD4REC is ioError)
    RD0CM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0CM002.RD0CMMSG = "CONTROL FILE";
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS2Y

// check for errors on recp add
Function RD0CS2Z()
  ;
       /* *** check for errors on recipient file add*/
  ;
  ;
  if (RD2REC is ioError)
    set RD0CM002 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD2REC is unique)
      RD0CM002.VAGen_EZEMSG = "RECIPIENT NAME ALREADY EXISTS";
         /* MOVE RD2REC.RD2RECNO TO RD0CM002.RD3LOCNO;*/
      RD0CM002.RD0CMMSG = "REENTER RECIPIENT NAME";
      return;
    else
      RD0CM002.VAGen_EZEMSG = "AN ERROR HAS OCCURED ADDING THE";
      RD0CM002.RD0CMMSG = "RECIPIENT RECORD";
      return;
    end
  end
  ;
  set RD0CM002 initial;
  RD0CM002.VAGen_EZEMSG = RD0CW1.RD2RECNO;
  RD0CM002.RD0CMMSG = "RECIPIENT ADDED";
  ;
  ;
end // end RD0CS2Z

// process keys
Function RD0CS30()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM003.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM003.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM003.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM003.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0CM003.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM003.CATOAP != " ")
    RD0CS31();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM003.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM003 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM003.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  RD0CS3A();
  ;
  return;
  ;
  ;
end // end RD0CS30

// set update flag
Function RD0CS31()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM003.RD2RECNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS31

// set map fields modified
Function RD0CS35()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM003.RD2RECNO is modified)
    set RD0CM003.RD2RECNO modified;
    return;
  end
  ;
  ;
end // end RD0CS35

// validate recipient number
Function RD0CS3A()
  ;
  ;
       /* ***  validate recipient number*/
  ;
  ;
  if (RD0CM003.RD2RECNO is modified)
    if (RD0CM003.RD2RECNO == 00000)
      RD0CM003.RD0CMMSG = "RECIPIENT NUMBER REQUIRED";
      set RD0CM003 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      return;
    end
  end
  ;
  RD0CM003.RD0CMMSG = "RECIPIENT NUMBER REQUIRED";
  set RD0CM003 alarm;
  RDWREC.RDWERFLG = "Y";
  return;
  ;
  ;
end // end RD0CS3A

// check errors on loc inquiry
Function RD0CS3S()
  ;
       /* *** check for errors on location  file inquire*/
  ;
  if (RD3REC is ioError)
    RD0CW1.RD3NAME = " ";
    return;
  end
  ;
  RD0CW1.RD3NAME = RD3REC.RD3NAME;
  ;
end // end RD0CS3S

// check errors on loc inquiry
Function RD0CS3T()
  ;
       /* *** check for errors on location  file inquire*/
  ;
  RD0CM006.RD3LOCNO = RD0CW1.RD3LOCNO;
  ;
  if (RD3REC is ioError)
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    RD0CW1.RD3NAME = " ";
    if (RD3REC is noRecordFound)
      RD0CM006.RD0CMMSG = "LOCATION RECORD NOT FOUND";
      return;
    else
      RD0CM006.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0CM006.RD0CMMSG = "LOCATION FILE ";
      return;
    end
  end
  ;
  RD0CW1.RD3NAME = RD3REC.RD3NAME;
  ;
end // end RD0CS3T

// check errors on recp inquiry
Function RD0CS3W()
  ;
       /* *** check for errors on recipient file inquire*/
  ;
  ;
  if (RD2REC is ioError)
    set RD0CM003.RD2RECNO cursor, bold;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD2REC is noRecordFound)
      RD0CM003.RD0CMMSG = "RECIPIENT RECORD NOT FOUND";
      return;
    else
      RD0CM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING THE";
      RD0CM003.RD0CMMSG = "RECIPIENT FILE ";
      return;
    end
  end
  ;
end // end RD0CS3W

// check errors on recp update
Function RD0CS3X()
  ;
       /* *** check for errors on recipient file update*/
  ;
  ;
  if (RD2REC is ioError)
    RD0CM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0CM003.RD0CMMSG = "RECIPIENT FILE";
    set RD0CM003.RD2RECNO cursor, bold;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS3X

// check errors on recp replace
Function RD0CS3Y()
  ;
       /* *** check for errors on location file replace*/
  ;
  ;
  if (RD2REC is ioError)
    set RD0CM003 initial;
    set RD0CM003.RD2RECNO cursor, bold;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    if (RD2REC is unique)
      RD0CM003.VAGen_EZEMSG = "RECIPIENT NAME ALREADY EXITS";
      RD0CM003.RD0CMMSG = "REENTER";
      return;
    else
      RD0CM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED REPLACING THE";
      RD0CM003.RD0CMMSG = "RECIPIENT FILE";
      return;
    end
  end
  ;
  set RD0CM003 initial;
  RD0CM003.VAGen_EZEMSG = RD0CM004.RD2RECNO;
  RD0CM003.RD0CMMSG = "RECIPIENT CHANGED";
  ;
  return;
end // end RD0CS3Y

// check errors on recp delete
Function RD0CS3Z()
  ;
       /* *** check for errors on recipient file delete*/
  ;
  ;
  if (RD2REC is ioError)
    RD0CM003.VAGen_EZEMSG = "AN ERROR HAS OCCURED DELETING THE";
    RD0CM003.RD0CMMSG = "RECIPIENT FILE";
    set RD0CM003.RD2RECNO cursor, bold;
    set RD0CM003 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  set RD0CM003 initial;
  RD0CM003.RD2RECNO = RD0CM005.RD2RECNO;
  RD0CM003.RD0CMMSG = "RECIPIENT DELETED";
  ;
  return;
  ;
end // end RD0CS3Z

// process keys
Function RD0CS40()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM004.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM004.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM004.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM004.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0CM004.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  RD0CW1.RD2DEPT = RD0CM004.RD2DEPT;
  RD0CW1.RD3LOCNO = RD0CM004.RD3LOCNO;
  ;
  ;
  if (RD0CM004.CATOAP != " ")
    RD0CS41();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM004.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM004 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM004.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM004.RD2NAME is modified)
    if (RD0CM004.RD2NAME == " ")
      RD0CM004.RD3NAME = " ";
      RD0CM004.RD0CMMSG = "ENTER CHANGE";
      set RD0CM004.RD2NAME cursor, bold;
      set RD0CM004 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM004.RD2DEPT == " ")
    RD0CM004.RD0CMMSG = "RECIPIENT DEPT IS INVALID";
    set RD0CM004.RD2DEPT cursor, bold;
    set RD0CM004 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  return;
  ;
  ;
end // end RD0CS40

Function RD0CS41()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM004.RD2NAME is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  if (RD0CM004.RD2DEPT is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  if (RD0CM004.RD3LOCNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS41

// set modified data tags
Function RD0CS45()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM004.RD2NAME is modified)
    set RD0CM004.RD2NAME modified;
    return;
  end
  ;
  if (RD0CM004.RD2DEPT is modified)
    set RD0CM004.RD2DEPT modified;
    return;
  end
  ;
  if (RD0CM004.RD3LOCNO is modified)
    set RD0CM004.RD3LOCNO modified;
    return;
  end
  ;
  ;
end // end RD0CS45

// process keys
Function RD0CS50()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM005.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM005.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM005.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM005.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
       /* next sentence*/
  else
    RD0CM005.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM005 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM005.CATOAP != " ")
    RD0CS51();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM005.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM005 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM005.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM005 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  ;
end // end RD0CS50

Function RD0CS51()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM005.RD0CMYN is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS51

// set map fields modified
Function RD0CS55()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM005.RD0CMYN is modified)
    set RD0CM005.RD0CMYN modified;
    return;
  end
  ;
  ;
end // end RD0CS55

// process keys
Function RD0CS60()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM006.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM006.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM006.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM006.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
    set RD0CM006.RD2RECNO cursor;
  else
    RD0CM006.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM006 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM006.CATOAP != " ")
    RD0CS61();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM006.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM006 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM006.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM006.RD2RECNO is modified)
    if (RD0CM006.RD2RECNO == " ")
      RD0CM006.RD0CMMSG = "ENTER RECIPIENT NUMBER";
      set RD0CM006.RD2RECNO cursor, bold;
      set RD0CM006 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
end // end RD0CS60

// set update flag
Function RD0CS61()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM006.RD2RECNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS61

// check for missing dept
Function RD0CS62()
  ;
     /* *** If dept is blanks, tell someone about it*/
  ;
  if (RD0CM006.RD2DEPT == " ")
    RD0CM006.RD0CMMSG = "RECIPIENT DEPARTMENT INVALID";
  end
  ;
  ;
  return;
  ;
  ;
end // end RD0CS62

// set map fields modified
Function RD0CS65()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM006.RD2RECNO is modified)
    set RD0CM006.RD2RECNO modified;
    return;
  end
  ;
  ;
end // end RD0CS65

// process keys
Function RD0CS70()
  ;
  ;
       /* *** process the KEY pressed*/
  ;
  ;
  if (converseVar.eventKey is pf1) /* *** process PF1 key*/
    XSPF1();
    RD0CM007.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* *** process PF3 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM007.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* *** process PF4 key*/
    XSPF4();
    RD0CM007.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pa2) /* *** process PA2 key*/
    COMMAREA.CATOAP = "RD0C";
    XSEXIT();
    RD0CM007.RD0CMMSG = COMMAREA.CAMSG;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is enter) /* *** process ENTER key*/
         /* next sentence*/
  else
    RD0CM007.RD0CMMSG = "THAT KEY IS NOT SUPPORTED";
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
  if (RD0CM007.CATOAP != " ")
    RD0CS71();
    if (RDWREC.RDWUPFLG == "Y")
      RD0CM007.RD0CMMSG = "CANNOT MIX OPTION WITH MAP DATA";
      set RD0CM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    else
      move RD0CM007 to COMMAREA withV60Compat;
      XSEXIT();
      RD0CM007.RD0CMMSG = COMMAREA.CAMSG;
      set RD0CM007 alarm;
      RDWREC.RDWERFLG = "Y";
      return;
    end
  end
  ;
  if (RD0CM007.RD1COPNO is modified)
    RD0CS7A();
  else
    RD0CM007.RD1COPNO = 1;
  end
  ;
  ;
end // end RD0CS70

// set update flag
Function RD0CS71()
  ;
  ;
       /* *** set update flag*/
  ;
  if (RD0CM007.RD1COPNO is modified)
    RDWREC.RDWUPFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS71

// set map fields modified
Function RD0CS75()
  ;
  ;
       /* ***  set map fields as modified*/
  ;
  if (RD0CM007.RD1COPNO is modified)
    set RD0CM007.RD1COPNO modified;
    return;
  end
  ;
  ;
end // end RD0CS75

// validate number of copies
Function RD0CS7A()
  ;
  ;
     /* *** validate number of copies*/
  ;
  if (RD0CM007.RD1COPNO > 10)
    RD0CM007.RD0CMMSG = "NUMBER OF COPIES EXCEED 10";
    set RD0CM007.RD1COPNO cursor, bold;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS7A

// check errors on cntl update
Function RD0CS7X()
  ;
       /* *** check for errors on control file update*/
  ;
  ;
  if (RD4REC is ioError)
    RD0CM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED READING  THE";
    RD0CM007.RD0CMMSG = "CONTROL FILE";
    set RD0CM007.RD1COPNO cursor, bold;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  ;
end // end RD0CS7X

// check errors on recp replace
Function RD0CS7Y()
  ;
       /* *** check for errors on control file replace*/
  ;
  ;
  if (RD4REC is ioError)
    RD0CM007.VAGen_EZEMSG = "AN ERROR HAS OCCURED CHANGING THE";
    RD0CM007.RD0CMMSG = "CONTROL FILE";
    set RD0CM007.RD1COPNO cursor, bold;
    set RD0CM007 alarm;
    RDWREC.RDWERFLG = "Y";
    return;
  end
  ;
  RD0CM007.RD0CMMSG = "CONTROL FILE UPDATED";
  ;
end // end RD0CS7Y

//*** RECORD=RD0CW1 ****
// This record is the working storage record for application
//                       RD0C.
// **********************
Record RD0CW1 type basicRecord
  10 RD2RECNO RD2RECNO ; 
  10 RD2DEPT RD2DEPT ; 
  10 RD3LOCNO RD3LOCNO ; 
  10 RD3NAME RD3NAME ; 
end // end RD0CW1

Record RD6REC type basicRecord // VAGen Info - redefined RD4REC
  10 RD4COID RD4COID ; 
  10 RD4TYPE RD4TYPE ; 
  10 RD2RECNO RD2RECNO ; 
  10 RD1COPNO RD1COPNO ; 
  10 * char(286) ; 
end // end RD6REC

