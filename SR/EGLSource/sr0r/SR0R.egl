package sr0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=SR0R ****
// This application allows a user to inquire, modify or
// consolidate bills of lading.  There are two screens that
// may be displayed.
// 
// The first screen is used to enter the type of function the
// users wants to perform.  In return, it displays bill of
// lading information.
// 
// The second screen displays the orders in a bill of lading.
// It allows browsing and selection of orders.  This program
// transfers to SR0C after selection of orders for an inquire
// or a modify option.  As for consolidate option, this screen
// is display automatically only for partial consolidation.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/14/94  HKEMPE  New application.
// SR#0     11/02/95  HKEMPE  Changed Order List screen to show
//                            by schedule instead of by order.
// sr#0     12/18/95  jlucas  put century in shp dte sr0r-42100
// SR#0     01/02/96  HKEMPE  Quick fix on ship dt edit > 365
//                            in SR0R-14300. Commented out for
//                            now.
// SR#0     01/18/96  HCOOK   Changed cursor control to the
//                            BOL NO field after the OPTION and
//                            BOL NO field are populated in
//                            SR0R-12100.
//                            Changed SHIP DATE to a not
//                            required field in SR0R-14300.
//                            Changed the BOL NO field to left
//                            justified in the SR0RM001 field
//                            edits.
// SR#0     01/25/96  HCOOK   Changed map TOTAL BOL fields to
//                            show the totals for all orders of
//                            both BOLs before the operator
//                            presses ENTER for the
//                            consolidation process. Adds to
//                            both sets of accumulators are in
//                            SR0R-30000, new accumulators are
//                            in SR0RW00, clearing of accums
//                            are in SR0R-30000 and SR0R-25000,
//                            adds to single set of accums are
//                            in SR0R-25000, and the addition
//                            of the accumulators for map
//                            display are in SR0R-12100.
// SR#0    05/01/96  PJAMES   Quick fix on customer name field
//                            packing list table in SR0R-42200.
//         02/18/97  pcole    move blanks to prono
//         07/11/97  kheina   when splitting bol for whse 51,
//                            use lead so number for selected
//                            orders for format new bol number.
//         01/08/98  kdenne   fixed the look up against the
//                            packing list header to pull in
//                            the correct record for update.
//         01/21/98  kdenne   fixed SR0R-42100 to allow blanks
//                            to be a valid update for PRO#.
//         02/04/98  mdange   fixed SR0R-42200 to not inlcude
//                            the pack list sched number as
//                            part of the update criteria. This
//                            was causing the PL header to not
//                            be updated on split/consolidate.
//         02/06/98  mdange   added edit on warehouse code in
//                            sr0r-14200 to only allow non
//                            movers warehouses to use this
//                            APP.  Movers whse use SR0T.
//         06/04/98  TDAUGH   Y2K Changes -
//                              14300, 42100, SR0RW00 & SR0RW01
// *********************
Program SR0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  PK6REC PK6REC; // record
  PK7REC PK7REC; // record
  PKDREC PKDREC; // record
  PWHREC PWHREC; // record
  PWOREC PWOREC; // record
  SQLCA SQLCA; // record
  SR0RW00 SR0RW00; // record
  SR0RW01 SR0RW01; // record
  SR0RW02 SR0RW02; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR4REC SR4REC; // record
  SREREC SREREC; // record
  SRWREC SRWREC; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  TF3REC TF3REC; // record
  TF4REC TF4REC; // record
  TF5REC TF5REC; // record
  TF6REC TF6REC; // record
  XP0FW01 XP0FW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use SR0RM.SR0RM001,  // forms
      SR0RM.SR0RM002, 
      SR0RM.XMSRM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSR-00000: XPSR-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SR0RM001 initial; /* M001 input/output*/
    set SR0RM002 initial; /* M002 input/output*/
    set SR0RW00 empty; /* Working storage*/
    set SR0RW01 empty; /* M001 display storage*/
    set SR0RW02 empty; /* FROM BOL order data storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    SR0RW00.XXX-MAP-DSP-CD = "1"; /* Display map 1*/

    if ((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
     || COMMAREA.CAFROMAP == "SR0Q") /* or from SR0Q*/
     && SRWREC.SRWRETFL == "Y")      /* and returning to SR0R*/

      if (SRWREC.SRWMISCF[3] == "Y")
        SR0RW00.XXX-MAP-DSP-CD = "1"; /* Get data for temp stor*/
        SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Get data for map*/
        SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Temp store address*/
        SR0RW00.XXX-TEMP-STG-LNTH = 304; /* Temp store length*/
        TA5REC.TA5APPID = "SRFR"; /* Temp store ID*/
        SR0RW00.XXX-INX-LMT-NBR = 10; /* Temp store page limit*/
        SR0RW01.SR0RW-ORDER-CNT[1] = SRWREC.PK1BLLAD[2];
                                /* Order count from SR0C*/
        SR0RW01.XXX-HI-PAGE-NBR[1] = SRWREC.SR2BLLSU[2];
                                /* Hi page number from SR0C*/
      end

      SR0RW01.XWHCD = SRWREC.SRWXWHCD; /* Warehouse code*/
      SR0RW01.SR0RW-OPTION = SRWREC.SRWRETOP; /* Option*/

      SR0RW01.PK1BLLAD[1] = SRWREC.PK1BLLAD[1]; /* FROM BOL*/
      SR0RW01.SR2BLLSU[1] = SRWREC.SR2BLLSU[1]; /**/

      if (COMMAREA.CAFROMAP == "SR0Q" /* If from SR0Q*/
       && SR0RW01.SR0RW-OPTION == "C") /* and printed two bols*/
        SR0RW01.PK1BLLAD[2] = SRWREC.PK1BLLAD[2]; /* TO BOL*/
        SR0RW01.SR2BLLSU[2] = SRWREC.SR2BLLSU[2]; /**/
      end

      SR0RW01.SR0RW-ALL-ORDERS-FL = SRWREC.SRWMISCF[1];
                                     /* All orders flag*/
      SR0RW01.SR0RW-UNIT-OF-MEASURE = SRWREC.SRWMISCF[2];
                                     /* Unit of measure*/

      if (SRWREC.SRWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.SRWMSGNO);
      end /* Message from SR0C or SR0Q*/
      SRWREC.XXXERRID = COMMAREA.CAFROMAP; /* Message location*/

      SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    else

      SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/

    end

    SR0RW00.XXX-TEMP-STG-LNTH = 304; /* Temp storage record length*/
    SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Index to FROM or TO BOL*/

    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0R-00000; /* Converse the main process*/


    SR0R-00000: SR0R-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0R-00000; /* Converse the main process*/


  end // end main
end // end SR0R

// Determine which map to display
Function SR0R-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    SR0R-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end

  if (SR0RW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    SR0RW00.XXX-LN-SEL-IND = "N"; /* An order is selected*/

    SR0R-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = "00000"; /* Message location*/
  SRWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = SR0RW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "SR0A"; /* System Menu*/

  XSSRS-EXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end SR0R-00000

// Main process to display MAP 1
Function SR0R-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1 - BOL data.*/
   /* Processing always returns to the top of this process and*/
   /* fall through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0R-11000(); /* Obtain the data to display*/

  SR0R-12000(); /* Format and display the map*/

  SR0R-13000(); /* Check attention identifier*/

  SR0R-14000(); /* Verify the entered data*/

  SR0R-15000(); /* Process valid input request*/


end // end SR0R-10000

// Obtain the data to display
Function SR0R-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.XXX-RQT-DATA-FL != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found and not from SR0C/SR0Q, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If an error was found*/

    if (((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
     || COMMAREA.CAFROMAP == "SR0Q")  /* or from SR0Q*/
     && SRWREC.SRWRETFL == "Y")       /* and returning to SR0R*/
     || SR0RW00.SR0RW-REDISPLAY-UPD-BOL-FL == "Y")
                                   /* or redisplaying upd BOL*/
      /* next sentence*/
    else
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Check multiple occurrence only when retrieving the first*/
   /* time.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
   || COMMAREA.CAFROMAP == "SR0Q") /* or from SR0Q*/
   && SRWREC.SRWRETFL == "Y")      /* and returning to SR0R*/

    COMMAREA.CAFROMAP = "SR0R"; /* FROM application*/
    SRWREC.SRWRETFL = " "; /* Return to SR0R flag*/

  else

    if (SR0RW00.SR0RW-REDISPLAY-UPD-BOL-FL == "Y")
                                   /* If redisplaying updated BOL*/
      /* next sentence*/
    else

      SR0R-11100(); /* Check multiple occurrence*/

      if (converseVar.validationMsgNum != 0) /* If error*/
        return; /* Return to previous process*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Retrieve FROM and TO (if option is to consolidate) orders.*/
   /* ------------------------------------------------------------*/

  SR0R-30000(); /* Retrieve BOL data*/

  if (SRWREC.SRWMISCF[3] == "Y") /* Control came from SR0C*/
    SR0RW00.XXX-MAP-DSP-CD = "2"; /* Display map 2*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Check recommended carrier when redisplaying updated BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.SR0RW-REDISPLAY-UPD-BOL-FL == "Y")
                                   /* If redisplaying updated BOL*/

    SR0R-11200(); /* Check recommended carrier*/

    SR0RW00.SR0RW-REDISPLAY-UPD-BOL-FL = "N";

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end SR0R-11000

// Check multiple occurrence
Function SR0R-11100()
   /* ------------------------------------------------------------*/
   /* Check FROM BOL multiple occurence.*/
   /* ------------------------------------------------------------*/

  set SR0RW01 empty;

  set SR2REC empty;

  set SREREC empty;

  SR0RW01.XWHCD = SR0RM001.XWHCD; /* Warehouse code*/
  SR0RW01.SR0RW-OPTION = SR0RM001.SR0RM-OPTION; /* Option*/
  SR0RW01.PK1BLLAD[1] = SR0RM001.PK1BLLAD[1];
                                   /* FROM bill of lading*/
  SR0RW01.SR0RW-UNIT-OF-MEASURE = SR0RM001.SR0RM-UNIT-OF-MEASURE;
  SR2REC.XWHCD = SR0RM001.XWHCD;
  SR2REC.PK1BLLAD = SR0RM001.PK1BLLAD[1];

  SR0RS-SR1120-S(); /* Select unique dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == +0) /* If found*/
    SR0RW01.SR2BLLSU[1] = SR2REC.SR2BLLSU; /* FROM BOL sub*/
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/

    if (SR0RM001.SR0RM-OPTION == "I" /* If inquire*/
     || SR0RM001.SR0RM-OPTION == "M") /* or modify option*/

      set SR0RM001 empty;

      SR0RM001.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
      SR0RM001.SR0RM-OPTION = SR0RW01.SR0RW-OPTION; /* Option*/
      SR0RM001.PK1BLLAD[1] = SR0RW01.PK1BLLAD[1]; /* FROM BOL*/
      SR0RM001.SR0RM-UNIT-OF-MEASURE = SR0RW01.SR0RW-UNIT-OF-MEASURE;

      set SR0RW01 empty;

    end

    SRWREC.XXXERRID = "11000"; /* Message location*/
    converseLib.validationFailed(133); /* FROM BOL not in database*/
    set SR0RM001.PK1BLLAD[1] cursor, bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811) /* If multiple occurrence*/

    SREREC.XWHCD = SR0RM001.XWHCD;
    SREREC.PK1BLLAD = SR0RM001.PK1BLLAD[1];
    SREREC.SRE-FR-TO-BOL-IND = "FR";

    XPSR-100(); /* Popup window processing*/

    if (converseVar.eventKey is pa2) /* Popup window cancelled*/
      converseLib.clearScreen();
       /* Reset screen*/
      exit stack;
    end

    if (SR0RM001.SR0RM-OPTION == "C") /* If consolidate option*/
      /* next sentence*/
    else
      converseLib.clearScreen();
       /* Reset screen*/
    end

    SR0RW01.SR2BLLSU[1] = SREREC.SRE-SELECTED-SUB-NBR;

  end

   /* ------------------------------------------------------------*/
   /* Check TO BOL multiple occurence when option is to consolidate.*/
   /* ------------------------------------------------------------*/

  SR0RW00.SR0RW-CREATE-TO-BOL-FL = "N"; /* Create TO BOL flag*/

  if (SR0RM001.SR0RM-OPTION == "C") /* If option is to consolidate*/

    SR0RW01.PK1BLLAD[2] = SR0RM001.PK1BLLAD[2];
                                   /* TO bill of lading*/
    SR0RW01.SR0RW-ALL-ORDERS-FL = SR0RM001.SR0RM-ALL-ORDERS-FL; /* All orders flag*/

    set SR2REC empty;

    SR2REC.XWHCD = SR0RM001.XWHCD;
    SR2REC.PK1BLLAD = SR0RM001.PK1BLLAD[2];

    SR0RS-SR1120-S(); /* Select unique dship.vsrord01*/

    if (SQLCA.VAGen_SQLCODE == +0) /* If found*/

      SR0RW01.SR2BLLSU[2] = SR2REC.SR2BLLSU; /* TO BOL sub*/

      if (SR0RM001.PK1BLLAD[1] == SR0RM001.PK1BLLAD[2])
                                   /* If FROM and TO BOL the same*/
        SRWREC.XXXERRID = "11000"; /* Message location*/
        converseLib.validationFailed(175); /* FROM and TO BOL the same*/
        set SR0RM001.PK1BLLAD[1] cursor, bold;
        set SR0RM001.PK1BLLAD[2] bold;
      end

    end

    if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
      SR0RW00.SR0RW-CREATE-TO-BOL-FL = "Y";
      SR0RW01.SR2BLLSU[2] = 0; /* TO BOL sub*/
    end

    if (SQLCA.VAGen_SQLCODE == -811) /* If multiple occurrence*/

      set SREREC empty;

      SREREC.XWHCD = SR0RM001.XWHCD;
      SREREC.PK1BLLAD = SR0RM001.PK1BLLAD[2];
      SREREC.SRE-FR-TO-BOL-IND = "TO";

      XPSR-100(); /* Popup window processing*/

      converseLib.clearScreen();

      if (converseVar.eventKey is pa2)
        exit stack;
      end

      SR0RW01.SR2BLLSU[2] = SREREC.SRE-SELECTED-SUB-NBR;

    end

  end

  converseLib.clearScreen();


end // end SR0R-11100

// Determine recommended carrier
Function SR0R-11200()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier when necessary.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.SR0RW-MESSAGE != " ") /* If zip code changed message*/
    return;
  end

  if (TF1REC.TF1MCARF == "Y") /* If misc carrier*/
    return; /* Return to previous process*/
  end

  if (SR0RW01.PK1WT[1] == 0 /* If no weight for lead so*/
   && SR0RW01.SR0RW-PK1WT-BOL[1] == 0) /* and no BOL weight*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Retrieve customer traffic routing exceptions.*/
   /* ------------------------------------------------------------*/

  set TF4REC empty;

  TF4REC.XWHCD = SR0RW01.XWHCD;

  if (SR0RW01.SR2SHPCD[1] == "2") /* Ship group address*/
    TF4REC.KUCCOID = SR0RW01.KUVDCCID[1]; /* Dist center company id*/
    TF4REC.KUMSTRID = SR0RW01.KUVDCSID[1]; /* Dist center store id*/
  else
    TF4REC.KUCCOID = SR0RW01.KUCCOID[1]; /* Company id*/
    TF4REC.KUMSTRID = SR0RW01.KUMSTRID[1]; /* Store id*/
  end

  SR0RS-IO1900-S(); /* Select requested row*/

  if (SQLCA.VAGen_SQLCODE == +100)

    set TF4REC empty;

    TF4REC.XWHCD = SR0RW01.XWHCD;

    if (SR0RW01.SR2SHPCD[1] == "2") /* Ship group address*/
      TF4REC.KUCCOID = SR0RW01.KUVDCCID[1]; /* Dist center company id*/
    else
      TF4REC.KUCCOID = SR0RW01.KUCCOID[1]; /* Company id*/
    end

    TF4REC.KUMSTRID = -1; /* Wildcard for store id*/

    SR0RS-IO1900-S(); /* Select requested row*/

  end

   /* ------------------------------------------------------------*/
   /* Determine recommended carrier.*/
   /* ------------------------------------------------------------*/

  SR0RW00.SR0RW-MESSAGE = " ";

  if (SQLCA.VAGen_SQLCODE == 0)
    SR0R-11210(); /* Carrier by traffic routing exceptions*/
  else
    SR0R-11220(); /* Carrier by zip code*/
  end


end // end SR0R-11200

// Get carr fr traffic routng exc
Function SR0R-11210()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier fr traffic routing exceptions.*/
   /* ------------------------------------------------------------*/

   /* Force non-freight and freight carrier.*/

  if (TF4REC.TF4RXCCD == "1")

    if (SR0RW01.SR0RW-PK1WT-BOL[1] <= PKDREC.PKDMXWLM)
                                   /* If BOL wt <= default wt*/

      if (TF4REC.TF1CARCD[1] != SR0RW01.TF1CARCD[1]) /* First carrier*/
        SR0RW00.TF1CARCD = TF4REC.TF1CARCD[1]; /* Recommended carr*/
      end

    else

      if (TF4REC.TF1CARCD[2] != SR0RW01.TF1CARCD[1]) /* Second carrier*/
        SR0RW00.TF1CARCD = TF4REC.TF1CARCD[2]; /* Recommended carrier*/
      end

    end

  end

   /* Force carrier regardless of weight.*/

  if (TF4REC.TF4RXCCD == "2")

    if (TF4REC.TF1CARCD[2] != SR0RW01.TF1CARCD[1]) /* Second carrier*/
      SR0RW00.TF1CARCD = TF4REC.TF1CARCD[2]; /* Recommended carrier*/
    end

  end

   /* Force carrier with customer on picking hold.*/

  if (TF4REC.TF4RXCCD == "3")

    if (TF4REC.TF1CARCD[1] != SR0RW01.TF1CARCD[1]) /* First carrier*/
      SR0RW00.TF1CARCD = TF4REC.TF1CARCD[1]; /* Recommended carrier*/
    end

  end

   /* Weight break carrier w/ optional picking hold.*/

  if (TF4REC.TF4RXCCD == "4")

    set TF5REC empty;

    TF5REC.XWHCD = TF4REC.XWHCD;
    TF5REC.KUCCOID = TF4REC.KUCCOID;
    TF5REC.KUMSTRID = TF4REC.KUMSTRID;
    TF5REC.TF5WTBRK = SR0RW01.SR0RW-PK1WT-BOL;

    SR0RS-IO1910-S1(); /* Cursor on dpick.vrtewt01*/

    while (SQLCA.VAGen_SQLCODE == 0
     && TF5REC.XXXSTAT != "A") /* Retrieve first active row*/

      SR0RS-IO1910-N1(); /* Fetch dpick.vrtewt01*/

    end

    SR0RS-IO1910-C1(); /* Close cursor dpick.vrtewt01*/

    SR0RW00.TF1CARCD = TF5REC.TF1CARCD; /* Recommended carrier*/

  end

   /* Set proper recommended carrier/destination message.*/

  if (SR0RW00.TF1CARCD != " " /* If there is a recommended carrier*/
   && SR0RW00.TF1CARCD != SR0RW01.TF1CARCD[1]) /* and not same w/ current*/

    if (SR0RW01.SR0RW-OPTION == "M" /* If modify option*/
     || SR0RW01.PK4CARSP[1] != "10") /* and not customer-specified routing*/

      SR0RW00.SR0RW-REASON = "RECOMMENDED CARRIER/DEST BECAUSE OF WEIGHT - ";

    end

  end


end // end SR0R-11210

// Get carr fr traffic zip cd
Function SR0R-11220()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier using zip code.*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXXZIP = SR0RW01.XXXZIP[1];

  SR0R-30210(); /* Select row from dpick.vzipcd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    /* next sentence*/
  else
    return;
  end

   /* Determine weight.*/

  if (TF3REC.TF3ZIPWT[1] == 0)
    TF3REC.TF3ZIPWT[1] = PKDREC.PKDMXWLM; /* Default UPS weight*/
  end

  if (TF3REC.TF3ZIPWT[3] == 0)
    TF3REC.TF1CARCD[3] = TF3REC.TF1CARCD[2]; /* Carrier*/
    TF3REC.TF3ZIPWT[3] = TF3REC.TF3ZIPWT[2]; /* Weight*/
  end

   /* Determine destination.*/

  if (TF3REC.TF2DSTCD[1] == " ")
    TF3REC.TF2DSTCD[1] = TF3REC.TF3DSTCD;
  end

  if (TF3REC.TF2DSTCD[2] == " ")
    TF3REC.TF2DSTCD[2] = TF3REC.TF3DSTCD;
  end

  if (TF3REC.TF2DSTCD[3] == " ")
    TF3REC.TF2DSTCD[3] = TF3REC.TF3DSTCD;
  end

   /* Compare weight.*/

  set TF1REC empty;

  if (SR0RW01.SR0RW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[1])
    TF1REC.TF1CARCD = TF3REC.TF1CARCD[1];
    TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[1];
  else

    if (SR0RW01.SR0RW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[2])
      TF1REC.TF1CARCD = TF3REC.TF1CARCD[2];
      TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[2];
    else

      if (SR0RW01.SR0RW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[3])
        TF1REC.TF1CARCD = TF3REC.TF1CARCD[3];
        TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[3];
      end

    end

  end

   /* Set proper recommended carrier/destination message.*/

  if (TF1REC.TF1CARCD != " "
   && TF1REC.TF1CARCD != SR0RW01.TF1CARCD[1])

    SR0RS-IO0860-S(); /* Select dpick.vcarr001*/

    if (SR0RW01.SR0RW-OPTION == "M" /* If modify option*/
     || SR0RW01.PK4CARSP[1] != "10") /* or not customer-specified routing*/

      SR0RW00.SR0RW-REASON = "RECOMMENDED CARRIER/DEST BECAUSE OF WEIGHT - ";
      SR0RW00.TF1CARCD = TF1REC.TF1CARCD; /* Recommended carrier*/

      if (TF3REC.TF3DSTCD != " "
       && TF3REC.TF3DSTCD != SR0RW01.TF2DSTCD[1])
        SR0RW00.SR0RW-SLASH = "/";
        SR0RW00.TF3DSTCD = TF3REC.TF3DSTCD; /* Recommended destination*/
      end

    end

  end


end // end SR0R-11220

// Format and display the map
Function SR0R-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SR0R-12100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Protect all modifiable fields when option is to "I"nquire*/
   /* or to "C"onsolidate.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "I" /* If option is inquire*/
   || SR0RM001.SR0RM-OPTION == "C") /* or consolidate*/

    set SR0RM001.TF1CARCD skip;
    set SR0RM001.SR0RM-CARRIER-NAME skip;
    set SR0RM001.TF2PRONO skip;
    set SR0RM001.PK1NBCTN skip;
    set SR0RM001.SR2QTYSH skip;
    set SR0RM001.PK1WT skip;
    set SR0RM001.SR2SHPCG skip;
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY skip;
    set SR0RM001.OP5ALTNM skip;
    set SR0RM001.XXX-ADDR[1] skip;
    set SR0RM001.XXX-ADDR[2] skip;
    set SR0RM001.XXX-ADDR[3] skip;
    set SR0RM001.XXXCITY skip;
    set SR0RM001.XSTCD skip;
    set SR0RM001.XXXZIP skip;
    set SR0RM001.XCTCD skip;

  end

   /* ------------------------------------------------------------*/
   /* Protect lead SO data when it exists in multiple schedules.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "M") /* If modify option*/

    if (SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL == "Y")
                                   /* If lead so in multiple sched*/
      set SR0RM001.PK1NBCTN skip;
      set SR0RM001.SR2QTYSH skip;
      set SR0RM001.PK1WT skip;
      set SR0RM001.SR2SHPCG skip;
      SR0RM-LEAD-SO-COMMAND = "(PRESS PF14 TO MODIFY LEAD S/O DATA)";
    end

  end

   /* ------------------------------------------------------------*/
   /* Show TO BOL fields when consolidating.  Otherwise hide them.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "C") /* If consolidate option*/
    set SR0RM001.SR0RM-TO-BOL-LIT normal;
    set SR0RM001.SR0RM-TO-BOL-LIT skip;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT normal;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT skip;

    if (converseVar.validationMsgNum == 24  /* Required field*/
     || converseVar.validationMsgNum == 150 /* Must be 'Y' or 'N'*/
     || converseVar.validationMsgNum == 175) /* FROM and TO BOL the same*/
      /* next sentence*/
    else
      set SR0RM001.PK1BLLAD[2] normal;
      set SR0RM001.SR0RM-ALL-ORDERS-FL normal;
    end

  else
    set SR0RM001.SR0RM-TO-BOL-LIT invisible, skip;
    set SR0RM001.PK1BLLAD[2] invisible, skip;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT invisible, skip;
    set SR0RM001.SR0RM-ALL-ORDERS-FL invisible, skip;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (SR0RW00.SR0RW-MESSAGE != " ")
    SR0RM001.SR0RM-MESSAGE = SR0RW00.SR0RW-MESSAGE;
  end

  SR0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0RM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0RM001.XXXERRID = SRWREC.XXXERRID;
                                   /* Message location*/

    set SR0RM001 alarm; /* Indicate sound alarm*/

  end

  converse SR0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = " "; /* Message location*/
  SRWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  SR0RW00.SR0RW-MESSAGE = " ";

  COMMAREA.CATOAP = SR0RM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0RM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SR0RM001.XWHCD normal;
  set SR0RM001.SR0RM-UNIT-OF-MEASURE normal;
  set SR0RM001.SR0RM-OPTION normal;
  set SR0RM001.PK1BLLAD[1] normal;

  if (SR0RM001.SR0RM-OPTION == "C") /* If consolidate option*/
    set SR0RM001.SR0RM-TO-BOL-LIT normal;
    set SR0RM001.SR0RM-TO-BOL-LIT skip;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT normal;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT skip;

    set SR0RM001.PK1BLLAD[2] normal;
    set SR0RM001.SR0RM-ALL-ORDERS-FL normal;
  end

  if (SR0RM001.SR0RM-OPTION == "M") /* If modify option*/
    set SR0RM001.TF1CARCD normal;
    set SR0RM001.SR0RM-CARRIER-NAME normal;
    set SR0RM001.TF2PRONO normal;
    set SR0RM001.PK1NBCTN normal;
    set SR0RM001.SR2QTYSH normal;
    set SR0RM001.PK1WT normal;
    set SR0RM001.SR2SHPCG normal;
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY normal;
    set SR0RM001.OP5ALTNM normal;
    set SR0RM001.XXX-ADDR[1] normal;
    set SR0RM001.XXX-ADDR[2] normal;
    set SR0RM001.XXX-ADDR[3] normal;
    set SR0RM001.XXXCITY normal;
    set SR0RM001.XSTCD normal;
    set SR0RM001.XCTCD normal;
    set SR0RM001.XXXZIP normal;
  end

  set SR0RM001.CATOAP normal; /* TO application*/
  set SR0RM001.CAITEM normal; /* Application data*/


end // end SR0R-12000

// Format data in the map
Function SR0R-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SR0RM001 initial; /* M001 input/output area*/

  SR0RW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Position the cursor to warehouse (if missing) or option.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.XWHCD == " ") /* If no warehouse*/
    SR0RM001.XWHCD = SRWREC.SRWXWHCD;
  end

  if (SR0RM001.XWHCD == " " /* If no warehouse*/
   && SR0RW01.XWHCD == " ")
    set SR0RM001.XWHCD cursor; /* Cursor on warehouse*/
  else
    if (SR0RW01.SR0RW-OPTION == " ") /* If no option*/
      set SR0RM001.SR0RM-OPTION cursor; /* Cursor on option*/
    else
      set SR0RM001.PK1BLLAD cursor; /* Cursor on BOL NO field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == " "
   && SR0RW01.PK1BLLAD[1] == 0) /* If nothing has been entered yet*/

    set SR0RM001.SR0RM-TO-BOL-LIT skip, invisible;
    set SR0RM001.PK1BLLAD[2] skip, invisible;
    set SR0RM001.SR0RM-ALL-ORDERS-LIT skip, invisible;
    set SR0RM001.SR0RM-ALL-ORDERS-FL skip, invisible;

    if (SR0RM001.XWHCD == "42") /* If Canada warehouse*/
      SR0RM001.SR0RM-UNIT-OF-MEASURE = "M"; /* Use metric system*/
      SR0RM001.SR0RM-UOM-WEIGHT[1] = "KG";
      SR0RM001.SR0RM-UOM-WEIGHT[2] = "KG";
    else
      SR0RM001.SR0RM-UNIT-OF-MEASURE = "U"; /* Use English system*/
      SR0RM001.SR0RM-UOM-WEIGHT[1] = "LB";
      SR0RM001.SR0RM-UOM-WEIGHT[2] = "LB";
    end

    return;

  end

  SR0RM001.XWHCD = SR0RW01.XWHCD;
  SR0RM001.XWHABRV = SR0RW01.XWHABRV;

  if (SR0RM001.XWHCD == "42") /* If Canada warehouse*/
    SR0RW01.SR0RW-UNIT-OF-MEASURE = "M"; /* Use metric system*/
  end

  if (SR0RW01.SR0RW-UNIT-OF-MEASURE == " ")
    SR0RW01.SR0RW-UNIT-OF-MEASURE = "U";
  end

  SR0RM001.SR0RM-UNIT-OF-MEASURE = SR0RW01.SR0RW-UNIT-OF-MEASURE;

  if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
    SR0RM001.SR0RM-UOM-WEIGHT[1] = "LB";
    SR0RM001.SR0RM-UOM-WEIGHT[2] = "LB";
  else
    SR0RM001.SR0RM-UOM-WEIGHT[1] = "KG";
    SR0RM001.SR0RM-UOM-WEIGHT[2] = "KG";
  end

  SR0RM001.SR0RM-OPTION = SR0RW01.SR0RW-OPTION;

  SR0RM001.PK1BLLAD[1] = SR0RW01.PK1BLLAD[1];

  if (SR0RW01.SR0RW-OPTION == "C") /* If consolidate option*/

    SR0RM001.PK1BLLAD[2] = SR0RW01.PK1BLLAD[2];
    SR0RM001.SR0RM-ALL-ORDERS-FL = SR0RW01.SR0RW-ALL-ORDERS-FL;

  end

  SR0RM001.OP1CUOID = SR0RW01.OP1CUOID[SR0RW-FR-TO-BOL-IND];
                                   /* Lead SO*/
  SR0RM001.OP1NORID = SR0RW01.OP1NORID[SR0RW-FR-TO-BOL-IND];
  SR0RM001.PK1PKSCH = SR0RW01.PK1PKSCH[SR0RW-FR-TO-BOL-IND];

  SR0RM001.TF1CARCD = SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND];
  SR0RM001.SR0RM-CARRIER-NAME = SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND];

  SR0RM001.TF2DSTCD = SR0RW01.TF2DSTCD[SR0RW-FR-TO-BOL-IND];
  SR0RM001.SR0RM-DEST-DESC = SR0RW01.SR0RW-DEST-DESC[SR0RW-FR-TO-BOL-IND];

  if (SR0RW01.TF2PRONO[SR0RW-FR-TO-BOL-IND] == "000000000000")
    SR0RM001.TF2PRONO = "            ";
  else
    SR0RM001.TF2PRONO = SR0RW01.TF2PRONO[SR0RW-FR-TO-BOL-IND];
  end

  SR0RM001.PK1NBCTN = SR0RW01.PK1NBCTN[SR0RW-FR-TO-BOL-IND];
                                   /* Lead SO totals*/
  SR0RM001.SR2QTYSH = SR0RW01.SR2QTYSH[SR0RW-FR-TO-BOL-IND];
  SR0RM001.SR2SHPCG = SR0RW01.SR2SHPCG[SR0RW-FR-TO-BOL-IND];

  if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
    SR0RM001.PK1WT = SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND];
  else
    SR0RM001.PK1WT = mathLib.round(SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND] / 2.2046, -mathLib.decimals(SR0RM001.PK1WT));
  end

  SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY = SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY[SR0RW-FR-TO-BOL-IND];
  SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM = SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM[SR0RW-FR-TO-BOL-IND];
  SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD = SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD[SR0RW-FR-TO-BOL-IND];
  SR0RM001.SR0RM-SR1SHPDT-MMDDYY = SR0RW00.SR0RW-SR1SHPDT-MMDDYY;

  if (SR0RW01.XBCCD[SR0RW-FR-TO-BOL-IND] == "08")

    set XP0FW01 empty;

    XP0FW01.XBCCD = SR0RW01.XBCCD[SR0RW-FR-TO-BOL-IND];
    XP0FW01.KUCCOID = SR0RW01.KUCCOID[SR0RW-FR-TO-BOL-IND];

    XP0FS01(); /* Drop '80' prefix of customer nbr*/

    SR0RM001.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;

  else
    SR0RM001.KUCCOID = SR0RW01.KUCCOID[SR0RW-FR-TO-BOL-IND];
  end

  SR0RM001.KUMSTRID = SR0RW01.KUMSTRID[SR0RW-FR-TO-BOL-IND];

                                   /* BOL totals*/

  if (SR0RW01.SR0RW-OPTION == "C") /* If consolidate option*/

    SR0RM001.SR2TNBCT = SR0RW00.SR0RW-PK1NBCTN-ACCUM1 +     SR0RW00.SR0RW-PK1NBCTN-ACCUM2; /* Add cartons for BOL1 and BOL2*/

    SR0RM001.SR0RM-SR2QTYSH-BOL = SR0RW00.SR0RW-SR2QTYSH-ACCUM1 +     SR0RW00.SR0RW-SR2QTYSH-ACCUM2; /* Add units for BOL1 and BOL2*/

    SR0RM001.SR0RM-SR2SHPCG-BOL = SR0RW00.SR0RW-SR2SHPCG-ACCUM1 +     SR0RW00.SR0RW-SR2SHPCG-ACCUM2; /* Add charges for BOL1 and BOL2*/

    if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
      SR0RM001.SR0RM-PK1WT-BOL = SR0RW00.SR0RW-PK1WT-ACCUM1 +       SR0RW00.SR0RW-PK1WT-ACCUM2; /* Add charges for BOL1 and BOL2*/
    else
      SR0RW00.SR0RW-PK1WT-ACCUM1 = SR0RW00.SR0RW-PK1WT-ACCUM1 +       SR0RW00.SR0RW-PK1WT-ACCUM2; /* Add weight for BOL1 and BOL2*/

      SR0RM001.SR0RM-PK1WT-BOL = mathLib.round(SR0RW00.SR0RW-PK1WT-ACCUM1 / 2.2046, -mathLib.decimals(SR0RM001.SR0RM-PK1WT-BOL));
    end

  else

    SR0RM001.SR2TNBCT = SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND];
    SR0RM001.SR0RM-SR2QTYSH-BOL = SR0RW01.SR0RW-SR2QTYSH-BOL[SR0RW-FR-TO-BOL-IND];
    SR0RM001.SR0RM-SR2SHPCG-BOL = SR0RW01.SR0RW-SR2SHPCG-BOL[SR0RW-FR-TO-BOL-IND];

    if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
      SR0RM001.SR0RM-PK1WT-BOL = SR0RW01.SR0RW-PK1WT-BOL[SR0RW-FR-TO-BOL-IND];
    else
      SR0RM001.SR0RM-PK1WT-BOL = mathLib.round(SR0RW01.SR0RW-PK1WT-BOL[SR0RW-FR-TO-BOL-IND] / 2.2046, -mathLib.decimals(SR0RM001.SR0RM-PK1WT-BOL));
    end
  end

  SR0RM001.OP5ALTNM = SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XXX-ADDR[1] = SR0RW01.XXX-ADDR1[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XXX-ADDR[2] = SR0RW01.XXX-ADDR2[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XXX-ADDR[3] = SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XXXCITY = SR0RW01.XXXCITY[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XSTCD = SR0RW01.XSTCD[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XXXZIP = SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XCTCD = SR0RW01.XCTCD[SR0RW-FR-TO-BOL-IND];

  SR0RM001.XGPCD[1] = SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPABRV[1] = SR0RW01.SR0RW-XGPABRV1[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPCD[2] = SR0RW01.XGPCD2[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPABRV[2] = SR0RW01.SR0RW-XGPABRV2[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPCD[3] = SR0RW01.XGPCD3[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPABRV[3] = SR0RW01.SR0RW-XGPABRV3[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPCD[4] = SR0RW01.XGPCD4[SR0RW-FR-TO-BOL-IND];
  SR0RM001.XGPABRV[4] = SR0RW01.SR0RW-XGPABRV4[SR0RW-FR-TO-BOL-IND];

   /* ------------------------------------------------------------*/
   /* Compare FROM and TO BOL company id when consolidating and*/
   /* display proper message.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "C"       /* If consolidating*/
   && (converseVar.validationMsgNum == 0 /* and no error*/
   || converseVar.validationMsgNum == 184)) /* or print BOL message*/

    if (SR0RW00.SR0RW-CREATE-TO-BOL-FL == "Y") /* If new TO BOL*/
       /* next sentence*/
    else

      if (SR0RW01.KUVDCCID[1] == 0 /* If no FROM BOL dist center*/
       && SR0RW01.KUVDCCID[2] == 0) /* and no TO BOL dist center*/

        if (SR0RW01.KUCCOID[1] != SR0RW01.KUCCOID[2])
                               /* If FROM BOL and TO BOL not same customer*/
          SRWREC.XXXERRID = "12100"; /* Message location*/
          converseLib.validationFailed(154); /* Customer numbers do not match*/
        end

      else

        if (SR0RW01.KUVDCCID[1] != SR0RW01.KUVDCCID[2])
                               /* If FROM BOL and TO BOL not same dist cent*/
          SRWREC.XXXERRID = "12100"; /* Message location*/
          converseLib.validationFailed(154); /* Customer numbers do not match*/
        end

      end

    end

    if (SR0RM001.SR0RM-ALL-ORDERS-FL == "Y") /* If consolidating all*/
      SR0RM001.SR0RM-MESSAGE = "PRESS ENTER TO CONSOLIDATE ALL ORDERS, PA2 TO CANCEL";
    else
      SR0RM001.SR0RM-MESSAGE = "PRESS ENTER TO SELECT ORDERS FOR CONSOLIDATION, PA2 TO CANCEL";
    end

  end


end // end SR0R-12100

// Check attention identifier
Function SR0R-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SR0RW01 empty; /* M001 display storage*/

    SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSRS-EXIT(); /* Exit to another application*/

      set SR0RM001.CATOAP cursor, bold; /* Highlight*/

    else

      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SR0RM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SR0A"; /* System Menu*/
    end

    XSSRS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    SRWREC.XXXERRID = "13000"; /* Message location*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SR0R-13000

// Verify entered data
Function SR0R-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SRWREC.XXXERRID = "14000"; /* Message location*/
    converseLib.validationFailed(130); /* Enter only with FAST PATH*/
    set SR0RM001.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Verify if key field changed.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XWHCD != SR0RW01.XWHCD
   || SR0RM001.SR0RM-UNIT-OF-MEASURE != SR0RW01.SR0RW-UNIT-OF-MEASURE
   || SR0RM001.SR0RM-OPTION != SR0RW01.SR0RW-OPTION
   || SR0RM001.PK1BLLAD[1] != SR0RW01.PK1BLLAD[1]
   || SR0RM001.PK1BLLAD[2] != SR0RW01.PK1BLLAD[2]
   || SR0RM001.SR0RM-ALL-ORDERS-FL != 
  SR0RW01.SR0RW-ALL-ORDERS-FL)

    if (SR0RW01.SR0RW-OPTION == "M")
      SR0R-14100(); /* Highlight other changed fields*/
    end

    /* ------------------------------------------------------------*/
    /* Determine if all the required key fields were entered.*/
    /* ------------------------------------------------------------*/

    SR0R-14200(); /* Check for required key fields*/

  else

    if (converseVar.eventKey is pf6) /* If split bol*/

      if (SR0RM001.SR0RM-OPTION == "M") /* Modify option*/
        /* next sentece*/
      else
        SRWREC.XXXERRID = "14000"; /* Message location*/
        converseLib.validationFailed(187); /* Split bol is allowed only w/ modify*/
        set SR0RM001.SR0RM-OPTION cursor, bold; /* Highlight*/
      end

    end

    if (SR0RM001.SR0RM-OPTION == "M") /* If modify option*/
      SR0R-14300(); /* Edit modified fields*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SR0R-14000

// Highlight other changed fields
Function SR0R-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XCTCD != SR0RW01.XCTCD) /* Country changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXXZIP != SR0RW01.XXXZIP) /* Zip changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XSTCD != SR0RW01.XSTCD) /* State changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XSTCD cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXXCITY != SR0RW01.XXXCITY) /* * Zip changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXX-ADDR[3] != SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XXX-ADDR[3] cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXX-ADDR[2] != SR0RW01.XXX-ADDR2[SR0RW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XXX-ADDR[2] cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXX-ADDR[1] != SR0RW01.XXX-ADDR1[SR0RW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.XXX-ADDR[1] cursor, bold; /* Highlight*/
  end

  if (SR0RM001.OP5ALTNM != SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND])
                                   /* Customer name changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.OP5ALTNM cursor, bold; /* Highlight*/
  end

  SR0RW00.SR0RW-SR1SHPDT-MMDDYY = SR0RM001.SR0RM-SR1SHPDT-MMDDYY;
  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY[SR0RW-FR-TO-BOL-IND])
                                   /* Shipped date changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
  end

  if (SR0RM001.SR2SHPCG != SR0RW01.SR2SHPCG[SR0RW-FR-TO-BOL-IND])
                                   /* Shipping charges changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.SR2SHPCG cursor, bold; /* Highlight*/
  end

  if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U") /* English system*/

    if (SR0RM001.PK1WT != SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND])
                                   /* Weight changed*/
      SRWREC.XXXERRID = "14100"; /* Message location*/
      converseLib.validationFailed(183); /* Field may not change*/
      set SR0RM001.PK1WT cursor, bold; /* Highlight*/
    end

  else /* Metric system*/

    SR0RW00.PK1WT = SR0RM001.PK1WT * 2.2046;

    if (SR0RW00.PK1WT != SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND])
                                   /* Weight changed*/
      SRWREC.XXXERRID = "14100"; /* Message location*/
      converseLib.validationFailed(183); /* Field may not change*/
      set SR0RM001.PK1WT cursor, bold; /* Highlight*/
    end

  end

  if (SR0RM001.PK1NBCTN != SR0RW01.PK1NBCTN[SR0RW-FR-TO-BOL-IND])
                                   /* Nbr of cartons changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.PK1NBCTN cursor, bold; /* Highlight*/
  end

  if (TF1REC.TF1MCARF == "Y" /* If misc carrier*/
   && SR0RM001.SR0RM-CARRIER-NAME != 
  SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND])
                                   /* and carrier name changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.SR0RM-CARRIER-NAME cursor, bold; /* Highlight*/
  end

  if (SR0RM001.TF1CARCD != SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND])
                                   /* Carrier changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0RM001.TF1CARCD cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* PF14 or PF16 may not be pressed when key is changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(12); /* Invalid PF key*/
  end


end // end SR0R-14100

// Check required key fields
Function SR0R-14200()
   /* ------------------------------------------------------------*/
   /* Verify that the FROM bill of lading was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.PK1BLLAD[1] <= 0) /* If no FROM BOL entered*/
    SRWREC.XXXERRID = "14200"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0RM001.PK1BLLAD[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* Verify that an option was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "I") /* Inquire option*/
     /* next sentence*/
  else

    if (SR0RM001.SR0RM-OPTION == "M" /* Modify option*/
     || SR0RM001.SR0RM-OPTION == "C") /* or consolidate option*/

      if (COMMAREA.CACLVL[1] == "Y")
        /* next sentence*/
      else
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(110); /* Invalid option*/
        set SR0RM001.SR0RM-OPTION cursor, bold;
      end

    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(110); /* Invalid option*/
      set SR0RM001.SR0RM-OPTION cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify unit of measure.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-UNIT-OF-MEASURE == " ")
    SR0RM001.SR0RM-UNIT-OF-MEASURE = "U";
  else

    if (SR0RM001.SR0RM-UNIT-OF-MEASURE == "U" /* If English system*/
     || SR0RM001.SR0RM-UNIT-OF-MEASURE == "M") /* or metric system*/
      /* next sentence*/
    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(188); /* Must be 'U' or 'M'*/
      set SR0RM001.SR0RM-UNIT-OF-MEASURE cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that a warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XWHCD == " ") /* If no warehouse entered*/

    SRWREC.XXXERRID = "14200"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0RM001.XWHCD cursor, bold;

  else

    if (SR0RM001.XWHCD in XWHTBL.XWHCD) /* If whse code in corp table*/

      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If active*/
        if (XWHTBL.XWTCD[sysVar.arrayIndex] == "01"
         && XWHTBL.XWHSTKLF[sysVar.arrayIndex] == "Y") /* Whse restricted*/
          SRWREC.XXXERRID = "14200"; /* Message location*/
          converseLib.validationFailed(216); /* Warehouse restricted*/
          set SR0RM001.XWHCD cursor, bold;
        end
      else
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(2); /* Inactive whse*/
        set SR0RM001.XWHCD cursor, bold;
      end

    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(1); /* Invalid whse*/
      set SR0RM001.XWHCD cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* When consolidating:*/
   /* - Verify that the TO bill of lading was entered*/
   /* - Verify that the consolidated flag was entered*/
   /* - Verify rush and sameday picking runs*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "C") /* IF CONSOLIDATE OPTION*/

    SR0RW01.XWHCD = SR0RM001.XWHCD;
    SR0RW01.PK1BLLAD[1] = SR0RM001.PK1BLLAD[1];
    SR0RW01.SR0RW-OPTION = SR0RM001.SR0RM-OPTION;
    SR0RW01.SR0RW-UNIT-OF-MEASURE = SR0RM001.SR0RM-UNIT-OF-MEASURE;
    SR0RW01.PK1BLLAD[2] = SR0RM001.PK1BLLAD[2];
    SR0RW01.SR0RW-ALL-ORDERS-FL = SR0RM001.SR0RM-ALL-ORDERS-FL;

    set SR0RM001 initial;

    SR0RM001.XWHCD = SR0RW01.XWHCD;
    SR0RM001.PK1BLLAD[1] = SR0RW01.PK1BLLAD[1];
    SR0RM001.SR0RM-OPTION = SR0RW01.SR0RW-OPTION;
    SR0RM001.SR0RM-UNIT-OF-MEASURE = SR0RW01.SR0RW-UNIT-OF-MEASURE;
    SR0RM001.PK1BLLAD[2] = SR0RW01.PK1BLLAD[2];
    SR0RM001.SR0RM-ALL-ORDERS-FL = SR0RW01.SR0RW-ALL-ORDERS-FL;

    set SR0RW01 empty;

    if (SR0RM001.PK1BLLAD[2] <= 0 /* If no TO BOL*/
     && SR0RM001.SR0RM-ALL-ORDERS-FL == " ")
                                   /* and no all orders flag*/
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(24); /* Required field*/
      set SR0RM001.PK1BLLAD[2] cursor, bold;
      set SR0RM001.SR0RM-ALL-ORDERS-FL bold;
    else

      if (SR0RM001.SR0RM-ALL-ORDERS-FL == "Y"
       || SR0RM001.SR0RM-ALL-ORDERS-FL == "N")
          /* next sentence*/
      else
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(150); /* Must be 'Y' or 'N'*/
        set SR0RM001.SR0RM-ALL-ORDERS-FL cursor, bold;
      end

      if (SR0RM001.PK1BLLAD[2] <= 0)
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(24); /* Required field*/
        set SR0RM001.PK1BLLAD[2] cursor, bold;
      end

      set PWHREC empty;

      PWHREC.XWHCD = SR0RM001.XWHCD; /* Warehouse code*/
      PWHREC.XXXPGMNO = "PK121R"; /* Rush program name*/

      SR0RS-IO4240-S(); /* Rush run*/

      if (PWHREC.XXXCMTCT != 0) /* If picking is running*/
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(176); /* Picking is running*/
        set SR0RM001.SR0RM-OPTION cursor, bold;
      end

      set PWHREC empty;

      PWHREC.XWHCD = SR0RM001.XWHCD; /* Warehouse code*/
      PWHREC.XXXPGMNO = "PK121S"; /* Sameday program name*/

      SR0RS-IO4240-S(); /* Sameday run*/

      if (PWHREC.XXXCMTCT != 0) /* If picking is running*/
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(176); /* Picking is running*/
        set SR0RM001.SR0RM-OPTION cursor, bold;
      end

    end

  end


end // end SR0R-14200

// Edit modifiable fields
Function SR0R-14300()
   /* ------------------------------------------------------------*/
   /* Edit all fields that has been changed.*/
   /* ------------------------------------------------------------*/

   /* Edit customer name and address*/

  if (SR0RM001.XSTCD == " " /* if no state*/
   && SR2REC.XDVCD == "01") /* and division is domestic*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(77); /* State required*/
    set SR0RM001.XSTCD cursor, bold; /* Highlight*/
  else

    if (SR0RM001.XCTCD == " " /* If no country*/
     || SR0RM001.XCTCD == "USA") /* or country is USA*/

      if (SR0RM001.XSTCD in XSTTBL.XSTCD /* If in  USA state table*/
       && XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

        if (SR0RM001.XCTCD == " ") /* If no country*/
          SR0RM001.XCTCD = "USA";
        end

        SR0R-14310(); /* Edit zip code*/

      else
        SRWREC.XXXERRID = "14300"; /* Message location*/
        converseLib.validationFailed(79); /* Invalid state*/
        set SR0RM001.XSTCD cursor, bold; /* Highlight*/
      end

    end

  end

  if (SR0RM001.XCTCD == " ") /* If no country*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0RM001.XCTCD cursor, bold; /* Highlight*/
  else

    if (SR0RM001.XCTCD in XCTTBL.XCTCD /* If in country table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
      /* next sentence*/
    else
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(89); /* Invalid country code*/
      set SR0RM001.XCTCD cursor, bold; /* Highlight*/
    end

  end

  if (SR0RM001.XXXCITY == " ") /* If no city*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(76); /* City required*/
    set SR0RM001.XXXCITY cursor, bold; /* Highlight*/
  end

  if (SR0RM001.XXX-ADDR[1] == " " /* If no address*/
   && SR0RM001.XXX-ADDR[2] == " " 
   && SR0RM001.XXX-ADDR[3] == " ")
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(75); /* One address line required*/
    set SR0RM001.XXX-ADDR[1] cursor, bold; /* Highlight*/
    set SR0RM001.XXX-ADDR[2] cursor, bold; /* Highlight*/
    set SR0RM001.XXX-ADDR[3] cursor, bold; /* Highlight*/
  end

  if (SR0RM001.OP5ALTNM == " ") /* If no customer name*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0RM001.OP5ALTNM cursor, bold; /* Highlight*/
  end

   /* Edit carrier code*/

  if (SR0RM001.TF1CARCD != SR0RW01.TF1CARCD[1]) /* Carrier changed*/

    set TF1REC empty;

    TF1REC.TF1CARCD = SR0RM001.TF1CARCD;

    SR0RS-IO0860-S(); /* Select dpick.vcarr001*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      if (TF1REC.TF1MCARF != "Y") /* If not misc carrier*/
        SR0RM001.SR0RM-CARRIER-NAME = TF1REC.TF1CARNM;
      end

    else /* Not found*/
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(5); /* Carrier code not on file*/
      set SR0RM001.TF1CARCD cursor, bold; /* Highlight*/
    end

  end

   /* Edit shipped date*/

  SR0RW00.SR0RW-SR1SHPDT-MMDDYY = SR0RM001.SR0RM-SR1SHPDT-MMDDYY;

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM == 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM
   && SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD == 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD
   && SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY == 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY) /* / No change in ship date*/

    if (SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL != "Y"
     && SR0RM001.SR0RM-UNIT-OF-MEASURE != 
    SR0RW01.SR0RW-UNIT-OF-MEASURE)

      if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
        SR0RW00.PK1WT = SR0RM001.PK1WT;
      else
        SR0RW00.PK1WT = SR0RM001.PK1WT * 2.2046;
      end

      if (SR0RW00.PK1WT != SR0RW01.PK1WT)
        SRWREC.XXXERRID = "14300"; /* Message location*/
        converseLib.validationFailed(183); /* Cannot be changed due to UOM*/
        set SR0RM001.SR0RM-UNIT-OF-MEASURE bold;
        set SR0RM001.PK1WT cursor, bold; /* Highlight*/
      end

    end

    return;

  end

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY == 0) /* If no ship date*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM >= 1
   && SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM <= 12) /* If mon from 1 to 12*/
      /* next sentence*/
  else
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(61); /* Invalid month*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD >= 1
   && SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD <= 31) /* If day from 1 to 31*/
      /* next sentence*/
  else
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(62); /* Invalid day*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

  SR0RW00.SR0RW-YYMMDD = VGVar.currentShortGregorianDate; /* Today's date*/

  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* IF SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY LE SR0RW00.SR0RW-YYMMDD-YY;*/
  /* /* If shipped year less/equal curr year*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
  SR0RW00.SR0RW-SHPDT-CHECKA-YY1 = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY;
  if (SR0RW00.SR0RW-SHPDT-CHECKA-YY1 > 60)
    SR0RW00.SR0RW-SHPDT-CHECKA-CC1 = 19;
  else
    SR0RW00.SR0RW-SHPDT-CHECKA-CC1 = 20;
  end
  /*  */
  SR0RW00.SR0RW-SHPDT-CHECKA-YY2 = SR0RW00.SR0RW-YYMMDD-YY;
  if (SR0RW00.SR0RW-SHPDT-CHECKA-YY2 > 60)
    SR0RW00.SR0RW-SHPDT-CHECKA-CC2 = 19;
  else
    SR0RW00.SR0RW-SHPDT-CHECKA-CC2 = 20;
  end
  if (SR0RW00.SR0RW-SHPDT-CHECKA-CCYY1
   <= SR0RW00.SR0RW-SHPDT-CHECKA-CCYY2)
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
      /* next sentence*/
  else
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(63); /* Invalid year*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

  SR0RW00.SR0RW-SR1SHPDT-YYMMDD-YY = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY;
  SR0RW00.SR0RW-SR1SHPDT-YYMMDD-MM = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM;
  SR0RW00.SR0RW-SR1SHPDT-YYMMDD-DD = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD;

  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* IF SR0RW00.SR0RW-SR1SHPDT-YYMMDD GT SR0RW00.SR0RW-YYMMDD;*/
  /* /* If greater today's date*/
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
  if (SR0RW00.SR0RW-SR1SHPDT-YYMMDD-YY > 60)
    SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD-CC = 19;
  else
    SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD-CC = 20;
  end
  /*  */
  if (SR0RW00.SR0RW-YYMMDD-YY > 60)
    SR0RW00.SR0RW-CCYYMMDD-CC = 19;
  else
    SR0RW00.SR0RW-CCYYMMDD-CC = 20;
  end
  if (SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD > SR0RW00.SR0RW-CCYYMMDD)
                                 /* If greater today's date*/
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
  /*  */
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(10); /* Invalid ship date*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

   /* Shipped must be less than a year old*/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGJUL";
  TA2REC.TA2GRTYP = "E";

  TA2REC.TA2GRGEN = SR0RW00.SR0RW-SR1SHPDT-YYMMDD;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date checking/convert*/

  if (TA2REC.TA2RTNCD != 0) /* If bad date*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(10); /* Invalid ship date*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

  SR0RW00.SR0RW-SR1SHPDT-TA2JULNN = TA2REC.TA2JULNN;
                                 /* Shipped julian date*/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGJUL";
  TA2REC.TA2GRTYP = "E";

  TA2REC.TA2GRGEN = SR0RW00.SR0RW-YYMMDD;

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date checking/convert*/

  SR0RW00.SR0RW-TA2JULNN = TA2REC.TA2JULNN;
                                 /* Today's julian date*/

  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* SR0RW00.SR0RW-SR1SHPDT-AGE = ((SR0RW00.SR0RW-YYMMDD-YY -*/
  /* SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY) * 365) + SR0RW00.SR0RW-TA2JULNN -*/
  /* SR0RW00.SR0RW-SR1SHPDT-TA2JULNN;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
  SR0RW00.SR0RW-SHPDT-CHECKA-YY1 = SR0RW00.SR0RW-YYMMDD-YY;
  if (SR0RW00.SR0RW-SHPDT-CHECKA-YY1 > 60)
    SR0RW00.SR0RW-SHPDT-CHECKA-CC1 = 19;
  else
    SR0RW00.SR0RW-SHPDT-CHECKA-CC1 = 20;
  end
  /*  */
  SR0RW00.SR0RW-SHPDT-CHECKA-YY2 = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY;
  if (SR0RW00.SR0RW-SHPDT-CHECKA-YY2 > 60)
    SR0RW00.SR0RW-SHPDT-CHECKA-CC2 = 19;
  else
    SR0RW00.SR0RW-SHPDT-CHECKA-CC2 = 20;
  end
  /*  */
  SR0RW00.SR0RW-SR1SHPDT-AGE = ((SR0RW-SHPDT-CHECKA-CCYY1 -   SR0RW-SHPDT-CHECKA-CCYY2) * 365) + SR0RW00.SR0RW-TA2JULNN -   SR0RW00.SR0RW-SR1SHPDT-TA2JULNN;
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */

  if (SR0RW00.SR0RW-SR1SHPDT-AGE > 365) /* If older than a year*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(10); /* Invalid ship date*/
    set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    return;
  end

   /* Shipped must be equal/greater pick sched date*/

  if (PKDREC.PKDWHTCD == "40") /* If special warehouse*/
    /* next sentence*/
  else

  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* IF SR0RW00.SR0RW-SR1SHPDT-YYMMDD LT SR0RW01.SR0RW-SR1PKDT-YYMMDD;*/
  /* /* If shipped < picked date*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
  /* ************************  Y2K IN BEGIN  **************************/
  /*  */
    if (SR0RW00.SR0RW-SR1SHPDT-YYMMDD-YY > 60)
      SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD-CC = 19;
    else
      SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD-CC = 20;
    end
  /*  */
    if (SR0RW01.SR0RW-SR1PKDT-YY > 60)
      SR0RW01.SR0RW-SR1PKDT-CC = 19;
    else
      SR0RW01.SR0RW-SR1PKDT-CC = 20;
    end
  /*  */
    if (SR0RW00.SR0RW-SR1SHPDT-CCYYMMDD
     < SR0RW01.SR0RW-SR1PKDT-CCYYMMDD)
  /*  */
  /* ************************  Y2K IN END    **************************/
  /*  */
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(161); /* Shipped date ge Picked date*/
      set SR0RM001.SR0RM-SR1SHPDT-MMDDYY cursor, bold; /* Highlight*/
    end

  end

  if (SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL != "Y"
   && SR0RM001.SR0RM-UNIT-OF-MEASURE != SR0RW01.SR0RW-UNIT-OF-MEASURE)

    if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
      SR0RW00.PK1WT = SR0RM001.PK1WT;
    else
      SR0RW00.PK1WT = SR0RM001.PK1WT * 2.2046;
    end

    if (SR0RW00.PK1WT != SR0RW01.PK1WT)
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(183); /* Cannot be changed due to UOM*/
      set SR0RM001.SR0RM-UNIT-OF-MEASURE bold;
      set SR0RM001.PK1WT cursor, bold; /* Highlight*/
    end

  end

end // end SR0R-14300

// Edit zip code
Function SR0R-14310()
   /* ------------------------------------------------------------*/
   /* Edit zip code.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XXXZIP == " ") /* If no zip code*/
    SRWREC.XXXERRID = "14310"; /* Message location*/
    converseLib.validationFailed(78); /* Zip code required*/
    set SR0RM001.XXXZIP cursor, bold; /* Highlight*/
  else

    SR0RW00.XXXZIP = SR0RM001.XXXZIP; /* Zip code*/

    if (SR0RW00.SR0RW-XXXZIP-3 >= XSTTBL.XSTBNZIP[sysVar.arrayIndex]
     && SR0RW00.SR0RW-XXXZIP-3 <= XSTTBL.XSTENZIP[sysVar.arrayIndex])
       /* next sentence*/
    else

      if (XSTTBL.XSTAZIP1[sysVar.arrayIndex] > " "
       && SR0RW00.SR0RW-XXXZIP-3 == XSTTBL.XSTAZIP1[sysVar.arrayIndex])
         /* next sentence*/
      else

        if (XSTTBL.XSTAZIP2[sysVar.arrayIndex] > " "
         && SR0RW00.SR0RW-XXXZIP-3 == XSTTBL.XSTAZIP2[sysVar.arrayIndex])
           /* next sentence*/
        else
          SRWREC.XXXERRID = "14310"; /* Message location*/
          converseLib.validationFailed(81); /* Invalid zip*/
          set SR0RM001.XXXZIP cursor, bold; /* Highlight*/
        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Check existency in zip destination table.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XXXZIP == " ") /* If no zip code*/
     /* next sentence*/
  else

    SR0RW00.XXXZIP = SR0RM001.XXXZIP; /* Zip code*/

    SR0R-30210(); /* Verify zip cd in dpick.vzipcd01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
       /* next sentence*/
    else /* Not found*/
      SRWREC.XXXERRID = "14310"; /* Message location*/
      converseLib.validationFailed(158); /* Not in zip dest tbl*/
      set SR0RM001.XXXZIP cursor, bold; /* Highlight*/
    end

  end


end // end SR0R-14310

// Process valid request
Function SR0R-15000()
   /* ------------------------------------------------------------*/
   /* Save any work record fields that may have been modified.*/
   /* ------------------------------------------------------------*/

  SRWREC.SRWXWHCD = SR0RM001.XWHCD; /* Warehouse code*/
  SRWREC.PK1BLLAD = SR0RM001.PK1BLLAD[1]; /* Bill of lading*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.XWHCD != SR0RW01.XWHCD               /* Warehouse changed*/
   || SR0RM001.SR0RM-OPTION != SR0RW01.SR0RW-OPTION /* or option changed*/
   || SR0RM001.PK1BLLAD[1] != SR0RW01.PK1BLLAD[1]   /* or FROM BOL changed*/
   || SR0RM001.PK1BLLAD[2] != SR0RW01.PK1BLLAD[2]   /* or TO BOL changed*/
   || SR0RM001.SR0RM-ALL-ORDERS-FL !=               
  SR0RW01.SR0RW-ALL-ORDERS-FL)                     

    SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/

  end

  if (SR0RM001.SR0RM-UNIT-OF-MEASURE != SR0RW01.SR0RW-UNIT-OF-MEASURE
  )
    SR0RW01.SR0RW-UNIT-OF-MEASURE = SR0RM001.SR0RM-UNIT-OF-MEASURE;

    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process PF14 - Orders screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Orders screen requested*/

    if (SR0RM001.SR0RM-OPTION == "I" /* Inquire option*/
     || SR0RM001.SR0RM-OPTION == "M") /* or modify option*/

      if (SR0RW01.SR0RW-ORDER-CNT[1] == 1)
        SR0R-50000(); /* Display SR0C screen*/
        return;
      end

    end

    TA5REC.TA5APPID = "SRFR"; /* Points to FROM BOL temp storage*/
    SR0RW00.SR0RW-FR-TO-BOL-IND = 1;

    SR0RW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process PF5 - Print BOL in SR0Q screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* Print BOL screen requested*/

    SR0R-60000(); /* Print BOL thru SR0Q*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process PF6 - Split BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "M" /* Modify option*/
   && converseVar.eventKey is pf6) /* Split BOL requested*/

    SR0RW00.SR0RW-SPLIT-REQUESTED-FL = "Y"; /* Split requested*/

    TA5REC.TA5APPID = "SRFR"; /* Points to FROM BOL temp storage*/
    SR0RW00.SR0RW-FR-TO-BOL-IND = 1;

    SR0RW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process changes if there are any.*/
   /* ------------------------------------------------------------*/

  if (SR0RM001.SR0RM-OPTION == "I") /* Inquire option*/
     /* next sentence*/
  else

    if (SR0RM001.SR0RM-OPTION == "M") /* Modify option*/

      if (converseVar.eventKey is pf6)
         /* next sentence*/
      else
        SR0R-40000(); /* Process updates*/
      end

    else

      if (SR0RM001.SR0RM-ALL-ORDERS-FL == "Y") /* If consolidate all*/
        SR0R-40000(); /* Process updates*/
      else

        TA5REC.TA5APPID = "SRFR"; /* Points to FROM BOL temp storage*/
        SR0RW00.SR0RW-FR-TO-BOL-IND = 1;

        SR0RW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
        SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
        SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
        SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/

        return;

      end

    end

  end


end // end SR0R-15000

// Main process to display MAP 2
Function SR0R-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2 - Order data.*/
   /* Processing always returns to the top of this process and*/
   /* fall through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0R-21000(); /* Obtain the data to display*/

  SR0R-22000(); /* Format and display the map*/

  SR0R-23000(); /* Check attention identifier*/

  SR0R-24000(); /* Verify the entered data*/

  SR0R-25000(); /* Process valid input request*/


end // end SR0R-20000

// Obtain the data to display
Function SR0R-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Retrieve a page of order from temporary storage.*/
   /* ------------------------------------------------------------*/

  set SR0RW02 empty; /* Initialize orders work area*/

  SR0RW02.XXX-TEMP-STG-LNTH = SR0RW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5TSQIX = SR0RW00.XXX-CURR-PAGE-NBR;
                                   /* Index to temp storage*/

  SR0RS-TA0050-R(); /* Read temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end SR0R-21000

// Format and display the map
Function SR0R-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SR0R-22100(); /* Format the data in the map*/
  end

  if (SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y") /* Split requested*/
    set SR0RM002.SR0RM-ALL-ORDERS-LIT invisible, skip;
    set SR0RM002.SR0RM-ALL-ORDERS-FL invisible, skip;
  else
    set SR0RM002.SR0RM-ALL-ORDERS-LIT normal;
    set SR0RM002.SR0RM-ALL-ORDERS-LIT skip;
    set SR0RM002.SR0RM-ALL-ORDERS-FL normal;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0RM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0RM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0RM001.XXXERRID = SRWREC.XXXERRID;
                                   /* Message location*/

    set SR0RM002 alarm; /* Indicate sound alarm*/

  end

  converse SR0RM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = " "; /* Message location*/
  SRWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SR0RM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0RM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SR0RM002.XXX-LN-SEL-IND normal;
  set SR0RM002.SR0RM-ALL-ORDERS-FL normal;

  set SR0RM002.CATOAP normal; /* TO application*/
  set SR0RM002.CAITEM normal; /* Application data*/


end // end SR0R-22000

// Format data in the map
Function SR0R-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SR0RM002 initial; /* M002 input/output area*/

  SR0RW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Position the cursor to the first select line.*/
   /* ------------------------------------------------------------*/

  set SR0RM002.XXX-LN-SEL-IND[1] cursor; /* Cursor on first sel line*/

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.SRWMISCF[3] == "Y")
    SR0RM002.XWHCD = SRWREC.SRWXWHCD; /* Warehouse code*/

    SR0RM002.XXX-CURR-PAGE-NBR = 1;
    SR0RM002.XXX-HI-PAGE-NBR = SRWREC.SR2BLLSU[2];

    SR0RM002.SR0RM-OPTION = SRWREC.SRWRETOP; /* Option*/

    SR0RM002.PK1BLLAD = SRWREC.PK1BLLAD[1];
    SR0RM002.SR2BLLSU = SRWREC.SR2BLLSU[1];

    if (SRWREC.PK1BLLAD[2] == 1)
      SR0RW01.SR0RW-ALL-ORDERS-FL = "Y";
    end

  else
    SR0RM002.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
    SR0RM002.XWHABRV = SR0RW01.XWHABRV; /* Warehouse desc*/

    SR0RM002.XXX-CURR-PAGE-NBR = SR0RW00.XXX-CURR-PAGE-NBR;
    SR0RM002.XXX-HI-PAGE-NBR = SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND];

    SR0RM002.SR0RM-OPTION = SR0RW01.SR0RW-OPTION; /* Option*/

    SR0RM002.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
    SR0RM002.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];

    SR0RM002.SR0RM-ALL-ORDERS-FL = SR0RW01.SR0RW-ALL-ORDERS-FL;
  end

  SR0RW00.XXX-INX-FLD-NBR = 1;

  while (SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR
   && SR0RW02.OP1CUOID[XXX-INX-FLD-NBR] > 0) /* Fill up the map*/

    SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select indicator*/

    SR0RM002.OP1CUOID[XXX-INX-FLD-NBR] = SR0RW02.OP1CUOID[XXX-INX-FLD-NBR]; /* Cust ord id*/
    SR0RM002.OP1NORID[XXX-INX-FLD-NBR] = SR0RW02.OP1NORID[XXX-INX-FLD-NBR]; /* Nike ord id*/
    SR0RM002.PK1PKSCH[XXX-INX-FLD-NBR] = SR0RW02.PK1PKSCH[XXX-INX-FLD-NBR]; /* Schedule nbr*/

    SR0RM002.PK1NBCTN[XXX-INX-FLD-NBR] = SR0RW02.PK1NBCTN[XXX-INX-FLD-NBR]; /* Nbr of cartons*/
    SR0RM002.SR2QTYSH[XXX-INX-FLD-NBR] = SR0RW02.SR2QTYSH[XXX-INX-FLD-NBR]; /* Shipped qty*/
    SR0RM002.SR2SHPCG[XXX-INX-FLD-NBR] = SR0RW02.SR2SHPCG[XXX-INX-FLD-NBR]; /* Shipping charges*/

    if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U")
      SR0RM002.PK1WT[XXX-INX-FLD-NBR] = SR0RW02.PK1WT[XXX-INX-FLD-NBR]; /* Weight*/
    else
      SR0RM002.PK1WT[XXX-INX-FLD-NBR] = mathLib.round(SR0RW02.PK1WT[XXX-INX-FLD-NBR] / 2.2046, -mathLib.decimals(SR0RM002.PK1WT[XXX-INX-FLD-NBR]));
    end

    SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

  end

  if (SR0RW00.XXX-INX-FLD-NBR > SR0RW00.XXX-INX-LMT-NBR)
    /* next sentence*/
  else

    while (SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR)

      set SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] skip, invisible;

      SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

    end

  end


end // end SR0R-22100

// Check attention identifier
Function SR0R-23000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SR0RW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set SR0RW01 empty; /* M001 display storage*/
      set SR0RW02 empty; /* M002 display storage*/
    end

    SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SR0RM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSRS-EXIT(); /* Exit to another application*/

      set SR0RM002.CATOAP cursor, bold; /* Highlight*/

    else

      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SR0RM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      SR0RW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
      SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0RW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
      SRWREC.SRWMISCF[3] = "N"; /* Clear flag to display M002*/

      SR0RW00.SR0RW-SPLIT-REQUESTED-FL = "N";

      if (SR0RW01.SR0RW-OPTION == "C") /* If consolidating*/
        SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Points to TO BOL*/
      end

      exit stack;
    end

    XSSRS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SRWREC.XXXERRID = "23000"; /* Message location*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SR0R-23000

// Verify entered data
Function SR0R-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(130); /* Enter only with FAST PATH*/
    set SR0RM002.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Edit entered data (if any) for the current map.*/
   /* ------------------------------------------------------------*/

  if (SR0RM002.SR0RM-ALL-ORDERS-FL == " "
   || SR0RM002.SR0RM-ALL-ORDERS-FL == "Y"
   || SR0RM002.SR0RM-ALL-ORDERS-FL == "N")
     /* next sentence*/
  else

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(150); /* Must be 'Y' or 'N'*/
    set SR0RM002.SR0RM-ALL-ORDERS-FL cursor, bold;
                                   /* Highlight*/
  end

  SR0RW00.XXX-INX-FLD-NBR = 1;

  while (SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR
   && SR0RM002.OP1CUOID[XXX-INX-FLD-NBR] > 0)

    if (SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " "
     && SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != "*")

      if (SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S")
        SR0RW00.XXX-LN-SEL-IND = "Y"; /* Order selected*/
      else
        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(95); /* Only 'S' may be entered*/
        set SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/
      end

    end

    SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

  end

  if (converseVar.validationMsgNum > 0) /* If error*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SR0RW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(99); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SR0RW00.XXX-CURR-PAGE-NBR >= 
  SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND])
                                   /* and no more pages*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(98); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If all orders selected and still browsing.*/
   /* ------------------------------------------------------------*/

  if (SR0RM002.SR0RM-ALL-ORDERS-FL == "Y")
                                   /* If all orders selected*/

    if (converseVar.eventKey is pf7 /* and still browsing*/
     || converseVar.eventKey is pf8)

      SRWREC.XXXERRID = "24000"; /* Message location*/
      converseLib.validationFailed(182); /* Press ENTER to process all orders*/
      set SR0RM002.SR0RM-ALL-ORDERS-FL cursor, bold;
                                   /* Highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If ENTER, make sure there are selected orders.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if (SR0RW01.SR0RW-OPTION == "M" /* If modify option*/
     && SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y")
                                   /* and BOL split requested*/

      if (SR0RW00.XXX-LN-SEL-IND != "Y") /* If no selection*/
        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(147); /* Select order or enter y to all orders*/
        set SR0RM002.XXX-LN-SEL-IND[1] cursor, bold;
      end

    else

      if (SR0RM002.SR0RM-ALL-ORDERS-FL != "Y"
       && SR0RW00.XXX-LN-SEL-IND != "Y") /* If no selection*/

        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(147); /* Select order or enter y to all orders*/
        set SR0RM002.SR0RM-ALL-ORDERS-FL cursor, bold;

      end

      if (SR0RM002.SR0RM-ALL-ORDERS-FL == "Y" /* If all orders*/
       && SR0RW00.XXX-LN-SEL-IND == "Y")      /* or some orders*/

        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(181); /* All orders and some orders selected*/
        set SR0RM002.SR0RM-ALL-ORDERS-FL cursor, bold;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SR0R-24000

// Process valid request
Function SR0R-25000()
   /* ------------------------------------------------------------*/
   /* Save changed key fields.*/
   /* ------------------------------------------------------------*/

  SR0RW01.SR0RW-ALL-ORDERS-FL = SR0RM002.SR0RM-ALL-ORDERS-FL;

  if (SR0RW01.SR0RW-ALL-ORDERS-FL != "Y")
    SR0RW00.SR0RW-PK1NBCTN-ACCUM2 = 0; /* Clear cartons accum2*/
    SR0RW00.SR0RW-SR2QTYSH-ACCUM2 = 0; /* Clear units accum2*/
    SR0RW00.SR0RW-PK1WT-ACCUM2 = 0; /* Clear weight accum2*/
    SR0RW00.SR0RW-SR2SHPCG-ACCUM2 = 0; /* Clear charges accum2*/
  end

   /* ------------------------------------------------------------*/
   /* If current page has been changed, update the page in*/
   /* temporage storage.*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  SR0RW00.XXX-INX-FLD-NBR = 1;

  while (SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR
   && SR0RM002.OP1CUOID[XXX-INX-FLD-NBR] > 0)

    if (SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
    SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]) /* Current page changed*/

      SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];

      SR0RW00.XXX-PAGE-UPD-FL = "Y";

    end

    if (SR0RM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S") /* Selected order*/

      SR0RW00.SR0RW-PK1NBCTN-ACCUM2 = SR0RW00.SR0RW-PK1NBCTN-ACCUM2 + SR2REC.PK1NBCTN;
                                       /* Accum total carton qty*/
      SR0RW00.SR0RW-SR2QTYSH-ACCUM2 = SR0RW00.SR0RW-SR2QTYSH-ACCUM2 + SR2REC.SR2QTYSH;
                                       /* Accum total shipped qty*/
      SR0RW00.SR0RW-PK1WT-ACCUM2 = SR0RW00.SR0RW-PK1WT-ACCUM2 + SR2REC.PK1WT;
                                       /* Accum total weight*/
      SR0RW00.SR0RW-SR2SHPCG-ACCUM2 = SR0RW00.SR0RW-SR2SHPCG-ACCUM2 + SR2REC.SR2SHPCG;
                                      /* Accum total shipping charges*/
    end

    SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

  end

  if (SR0RW00.XXX-PAGE-UPD-FL == "Y") /* If current page changed*/

    SR0RS-TA0050-U(); /* Update temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SR0RW00.XXX-CURR-PAGE-NBR = SR0RW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SR0RW00.XXX-CURR-PAGE-NBR = SR0RW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process ENTER.*/
   /* ------------------------------------------------------------*/

  if (SR0RM002.SR0RM-OPTION == "M"
   && SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y") /* Split requested*/

    SR0R-70000(); /* Split BOL*/

    return;

  end

  if (SR0RM002.SR0RM-OPTION == "I" /* If inquire option*/
   || SR0RM002.SR0RM-OPTION == "M") /* or modify option*/

    SR0R-50000(); /* Process SR0C request*/

  else

    SR0R-40000(); /* Process consolidate request*/

  end


end // end SR0R-25000

// Obtain the data to display
Function SR0R-30000()
   /* ------------------------------------------------------------*/
   /* Retrieve FROM BOL orders.*/
   /* ------------------------------------------------------------*/

  set SR0RW02 empty;

  set SR1REC empty;

  set SR2REC empty;

  SR0RW00.SR0RW-PK1NBCTN-ACCUM1 = 0; /* Clear carton accumulator1*/
  SR0RW00.SR0RW-SR2QTYSH-ACCUM1 = 0; /* Clear units accumulator1*/
  SR0RW00.SR0RW-PK1WT-ACCUM1 = 0; /* Clear weight accumulator1*/
  SR0RW00.SR0RW-SR2SHPCG-ACCUM1 = 0; /* Clear charges accumulator1*/

  SR0RW00.SR0RW-PK1NBCTN-ACCUM2 = 0; /* Clear carton accumulator2*/
  SR0RW00.SR0RW-SR2QTYSH-ACCUM2 = 0; /* Clear units accumulator2*/
  SR0RW00.SR0RW-PK1WT-ACCUM2 = 0; /* Clear weight accumulator2*/
  SR0RW00.SR0RW-SR2SHPCG-ACCUM2 = 0; /* Clear charges accumulator2*/

  SR2REC.XWHCD = SR0RW01.XWHCD;
  SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[1];
  SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[1];

  SR0RS-SR1120-S2(); /* Open cursor dship.vsrord01*/

  SR0R-30100(); /* Fetch a good order*/

  if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
    SRWREC.XXXERRID = "30000"; /* Message location*/
    converseLib.validationFailed(140); /* No orders found for FROM BOL*/
    set SR0RM001.PK1BLLAD[1] cursor, bold;
    SR0RS-SR1120-C2(); /* Close cursor dship.vsrord01*/
    return;
  end

  SR0RW00.SR0RW-LEAD-SO = SR0RW01.PK1BLLAD[1];

  SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL = "N";

  SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Index set to FROM BOL*/

  SR0RW01.SR0RW-ORDER-CNT[1] = 0; /* FROM BOL order count*/

  SR0R-30200(); /* Save lead SO data*/

  set TA5REC empty; /* Initialize temp storage work area*/

  TA5REC.TA5APPID = "SRFR"; /* Point to FROM BOL ts*/

  SR0RS-TA0050-P(); /* Purge temporary storage*/

  SR0RW00.XXX-INX-LMT-NBR = 10; /* Limit index*/
  SR0RW00.XXX-INX-FLD-NBR = 1; /* Index to count order*/

  while (SR0RW00.SR0RW-GOOD-ORDER-FL == "Y")

    SR0R-30300(); /* Save BOL data*/

    SR0RW00.SR0RW-PK1NBCTN-ACCUM1 = SR0RW00.SR0RW-PK1NBCTN-ACCUM1 + SR2REC.PK1NBCTN;
                                       /* Accum total carton qty*/
    SR0RW00.SR0RW-SR2QTYSH-ACCUM1 = SR0RW00.SR0RW-SR2QTYSH-ACCUM1 + SR2REC.SR2QTYSH;
                                       /* Accum total shipped qty*/
    SR0RW00.SR0RW-PK1WT-ACCUM1 = SR0RW00.SR0RW-PK1WT-ACCUM1 + SR2REC.PK1WT;
                                       /* Accum total weight*/
    SR0RW00.SR0RW-SR2SHPCG-ACCUM1 = SR0RW00.SR0RW-SR2SHPCG-ACCUM1 + SR2REC.SR2SHPCG;
                                      /* Accum total shipping charges*/

    SR0R-30400(); /* Save FROM BOL orders*/

    SQLCA.VAGen_SQLCODE = 0; /* Initialize sqlcode*/

    SR0R-30100(); /* Fetch a good order*/

    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/

      if (SR0RW02.OP1CUOID[1] > 0)
        SR0RS-TA0050-A(); /* Add the last page*/
      end

    else

      if (SR2REC.OP1CUOID == SR0RW01.OP1CUOID[1]
       && SR2REC.OP1NORID == SR0RW01.OP1NORID[1])
                                   /* If lead SO in multiple schedule*/
        SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL = "Y";
      end

      SR0RW00.SR0RW-OP1CUOID-UNPACK = SR2REC.OP1CUOID;
                                                          /* Save order nbr*/
      SR0RW00.SR0RW-OP1NORID-UNPACK = SR2REC.OP1NORID;

      if (SR0RW00.SR0RW-ORDER-NBR == SR0RW00.SR0RW-LEAD-SO) /* If lead so*/

        if (SR2REC.OP1CUOID != SR0RW01.OP1CUOID[1]
         || SR2REC.OP1NORID != SR0RW01.OP1NORID[1])

          SR0R-30200(); /* Save true lead SO data*/

        end

      end

    end

  end

  SR0RS-SR1120-C2(); /* Close cursor dship.vsrord01*/

   /* ------------------------------------------------------------*/
   /* Retrieve TO BOL orders.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C" /* If consolidating*/
   && SR0RW00.SR0RW-CREATE-TO-BOL-FL != "Y") /* to an existing TO BOL*/

    set SR2REC empty;

    SR2REC.XWHCD = SR0RW01.XWHCD;
    SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[2];
    SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[2];

    SR0RS-SR1120-S2(); /* Open cursor dship.vsrord01*/

    SR0R-30100(); /* Fetch a good order*/

    if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
      SRWREC.XXXERRID = "30000"; /* Message location*/
      converseLib.validationFailed(140); /* No orders found for TO BOL*/
      set SR0RM001.PK1BLLAD[2] cursor, bold;
      SR0RS-SR1120-C2(); /* Close cursor dship.vsrord01*/
      return;
    end

    SR0RW00.SR0RW-LEAD-SO = SR0RW01.PK1BLLAD[2];

    SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL = "N";

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Index set to TO BOL*/

    SR0RW01.SR0RW-ORDER-CNT[2] = 0; /* FROM BOL order count*/

    SR0R-30200(); /* Save lead SO data*/

    set TA5REC empty; /* Initialize temp storage work area*/

    TA5REC.TA5APPID = "SRTO"; /* Point to TO BOL ts*/

    SR0RS-TA0050-P(); /* Purge temporary storage*/

    SR0RW00.XXX-INX-FLD-NBR = 1; /* Index to count order*/

    while (SR0RW00.SR0RW-GOOD-ORDER-FL == "Y")

      SR0R-30300(); /* Save BOL data*/

      SR0RW00.SR0RW-PK1NBCTN-ACCUM2 = SR0RW00.SR0RW-PK1NBCTN-ACCUM2 + SR2REC.PK1NBCTN;
                                       /* Accum total carton qty*/
      SR0RW00.SR0RW-SR2QTYSH-ACCUM2 = SR0RW00.SR0RW-SR2QTYSH-ACCUM2 + SR2REC.SR2QTYSH;
                                       /* Accum total shipped qty*/
      SR0RW00.SR0RW-PK1WT-ACCUM2 = SR0RW00.SR0RW-PK1WT-ACCUM2 + SR2REC.PK1WT;
                                       /* Accum total weight*/
      SR0RW00.SR0RW-SR2SHPCG-ACCUM2 = SR0RW00.SR0RW-SR2SHPCG-ACCUM2 + SR2REC.SR2SHPCG;
                                      /* Accum total shipping charges*/

      SR0R-30400(); /* Save TO order data*/

      SQLCA.VAGen_SQLCODE = 0; /* Initialize sqlcode*/

      SR0R-30100(); /* Fetch a good order*/

      if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/

        if (SR0RW02.OP1CUOID[1] > 0)
          SR0RS-TA0050-A(); /* Add the last page*/
        end

      else

        if (SR2REC.OP1CUOID == SR0RW01.OP1CUOID[2]
         && SR2REC.OP1NORID == SR0RW01.OP1NORID[2])
                                   /* If lead SO in multiple schedule*/
          SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL = "Y";
        end

        SR0RW00.SR0RW-OP1CUOID-UNPACK = SR2REC.OP1CUOID;
                                                          /* Save order nbr*/
        SR0RW00.SR0RW-OP1NORID-UNPACK = SR2REC.OP1NORID;

        if (SR0RW00.SR0RW-ORDER-NBR == SR0RW00.SR0RW-LEAD-SO) /* If lead so*/

          if (SR2REC.OP1CUOID != SR0RW01.OP1CUOID[2]
           || SR2REC.OP1NORID != SR0RW01.OP1NORID[2])

            SR0R-30200(); /* Save true lead SO data*/

          end

        end

      end

    end

    SR0RS-SR1120-C2(); /* Close cursor dship.vsrord01*/

  end

   /* ------------------------------------------------------------*/
   /* Verify if a special warehouse.  Special warehouse allow for*/
   /* update of lead SO totals.*/
   /* ------------------------------------------------------------*/

  set PKDREC empty;

  PKDREC.XWHCD = SR0RW01.XWHCD;

  SR0RS-IO1890-S(); /* Select dpick.vpkctl01*/

  if (PKDREC.PKDWHTCD == "40") /* If special warehouse*/
    SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL = "N";
  end


end // end SR0R-30000

// Fetch a good order
Function SR0R-30100()
   /* ------------------------------------------------------------*/
   /* Fetch a good order.*/
   /* ------------------------------------------------------------*/

  SR0RW00.SR0RW-GOOD-ORDER-FL = "N";

  while (SQLCA.VAGen_SQLCODE == 0 /* Find a good order*/
   && SR0RW00.SR0RW-GOOD-ORDER-FL == "N")

    SR0RS-SR1120-N2(); /* Fetch dship.vsrord01*/

    if (SQLCA.VAGen_SQLCODE == +100) /* End of cursor*/
       /* next sentence*/
    else

      if (SR2REC.SR2DALFL == "Y") /* Bypass deallocated order*/
        /* next sentence*/
      else

        if (SR2REC.XWHCD == SR1REC.XWHCD
         && SR2REC.PK1PKSCH == SR1REC.PK1PKSCH)
          /* next sentence*/
        else

          set SR1REC empty;

          SR1REC.XWHCD = SR2REC.XWHCD;
          SR1REC.PK1PKSCH = SR2REC.PK1PKSCH;

          SR0RS-IO0790-S(); /* Select dship.vsrhdr01*/

        end

        if (SR1REC.SR1BTST == "B" /* Bypass balanced/released order*/
         || SR1REC.SR1BTST == "R")
          /* next sentence*/
        else
          SR0RW00.SR0RW-GOOD-ORDER-FL = "Y";
        end

      end

    end

  end


end // end SR0R-30100

// Save lead SO data
Function SR0R-30200()
   /* ------------------------------------------------------------*/
   /* Save FROM/TO lead SO data to display M001.*/
   /* ------------------------------------------------------------*/

  SR0RW01.PK1PKSCH[SR0RW-FR-TO-BOL-IND] = SR2REC.PK1PKSCH;
  SR0RW01.OP1CUOID[SR0RW-FR-TO-BOL-IND] = SR2REC.OP1CUOID;
  SR0RW01.OP1NORID[SR0RW-FR-TO-BOL-IND] = SR2REC.OP1NORID;

  if (SR2REC.TF1CARCD == " ")
    SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND] = SR1REC.TF1CARCD;
    SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND] = SR1REC.TF1CARNM;
  else
    SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND] = SR2REC.TF1CARCD;
    SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND] = SR2REC.TF1CARNM;
  end

  set TF1REC empty;

  TF1REC.TF1CARCD = SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND];

  SR0RS-IO0860-S(); /* Select dpick.vcarr001*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

    if (TF1REC.TF1MCARF != "Y" /* If not misc carrier*/
     || SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND] == " ")
                                   /* or no carrier*/
      SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND] = TF1REC.TF1CARNM;
    end

  end

  SR0RW01.PK4CARSP[SR0RW-FR-TO-BOL-IND] = SR2REC.PK4CARSP;
                                   /* Carrier-specified code*/
  SR0RW01.TF2DSTCD[SR0RW-FR-TO-BOL-IND] = SR2REC.TF2DSTCD;
                                   /* Destination code*/

  if (SR0RW01.TF2DSTCD[SR0RW-FR-TO-BOL-IND] == " ") /* If no destination*/

    if (SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND] == " ") /* If no zip code*/
      /* next sentence*/
    else

      SR0RW00.XXXZIP = SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND];

      SR0R-30210(); /* Get destination fr dpick.vzipcd01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        SR0RW01.TF2DSTCD[SR0RW-FR-TO-BOL-IND] = TF3REC.TF3DSTCD;
      end

    end

  end

  SR0RW01.TF2PRONO[SR0RW-FR-TO-BOL-IND] = SR2REC.TF2PRONO;
                                   /* PRO number*/

  SR0RW01.PK1NBCTN[SR0RW-FR-TO-BOL-IND] = SR2REC.PK1NBCTN;
                                   /* Number of cartons*/
  SR0RW01.SR2QTYSH[SR0RW-FR-TO-BOL-IND] = SR2REC.SR2QTYSH;
                                   /* Quantity shipped*/
  SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND] = SR2REC.PK1WT;
                                   /* Weight*/
  SR0RW01.SR2SHPCG[SR0RW-FR-TO-BOL-IND] = SR2REC.SR2SHPCG;
                                   /* Shipping charges*/
  SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND] = SR2REC.SR2TNBCT;
                                   /* BOL number of cartons*/

  if (SR2REC.SR1SHPDT == 0) /* Date shipped*/
    SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD[SR0RW-FR-TO-BOL-IND] = SR1REC.SR1SHPDT;
  else
    SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD[SR0RW-FR-TO-BOL-IND] = SR2REC.SR1SHPDT;
  end

  SR0RW01.XBCCD[SR0RW-FR-TO-BOL-IND] = SR2REC.XBCCD;
                                   /* Brand code*/
  SR0RW01.KUCCOID[SR0RW-FR-TO-BOL-IND] = SR2REC.KUCCOID;
                                   /* Customer id*/
  SR0RW01.KUMSTRID[SR0RW-FR-TO-BOL-IND] = SR2REC.KUMSTRID;
                                   /* Store id*/

  SR0RW01.KUVDCCID[SR0RW-FR-TO-BOL-IND] = SR2REC.KUVDCCID;
                                   /* Dist center company id*/
  SR0RW01.KUVDCSID[SR0RW-FR-TO-BOL-IND] = SR2REC.KUVDCSID;
                                   /* Dist center store id*/

  SR0RW01.SR2SHPCD[SR0RW-FR-TO-BOL-IND] = SR2REC.SR2SHPCD;
                                   /* Ship-group address*/

  if (SR2REC.OP11TMSF == "Y" /* If onetime ship*/
   || SR2REC.SR2SHPCD == "2") /* or ship-group address*/

    set SR4REC empty;

    SR4REC.XWHCD = SR2REC.XWHCD; /* Warehouse code*/

    SR4REC.PK1BLLAD = SR2REC.PK1BLLAD; /* Bill of lading*/
    SR4REC.SR2BLLSU = SR2REC.SR2BLLSU; /* BOL sub nbr*/

    SR0RS-IO0820-S(); /* Get address from dship.vsradd01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND] = SR4REC.OP5ALTNM;
                                   /* Customer name*/
      SR0RW01.XXX-ADDR1[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[1];
                                   /* Customer address*/
      SR0RW01.XXX-ADDR2[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[2];
      SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[3];
      SR0RW01.XXX-ADDR4[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[4];
      SR0RW01.XXX-ADDR5[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[5];
      SR0RW01.XXX-ADDR6[SR0RW-FR-TO-BOL-IND] = SR4REC.XXX-ADDR[6];
      SR0RW01.XXXCITY[SR0RW-FR-TO-BOL-IND] = SR4REC.XXXCITY;
      SR0RW01.XSTCD[SR0RW-FR-TO-BOL-IND] = SR4REC.XSTCD;
      SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND] = SR4REC.XXXZIP;
      SR0RW01.XCTCD[SR0RW-FR-TO-BOL-IND] = SR4REC.XCTCD;

    else

      SRWREC.XXXERRID = "30200"; /* Message location*/
      converseLib.validationFailed(90); /* Current address not in ShipRec*/

    end

  else

    set KUMREC empty;
    KUMREC.KUCCOID = SR2REC.KUCCOID; /* Customer nbr*/
    KUMREC.KUMSTRID = SR2REC.KUMSTRID; /* Store id*/

    SR0RS-IO0340-S(); /* Get address from dcust.vstore01*/

    if (SQLCA.VAGen_SQLCODE == +100) /* Not in dcust.vstore01*/

      set PK6REC empty;
      PK6REC.KUCCOID = SR2REC.KUCCOID; /* Customer nbr*/
      PK6REC.KUMSTRID = SR2REC.KUMSTRID; /* Store id*/

      SR0RS-IO1830-S(); /* Get address from dpick.vpkcus01*/

    end

  end


end // end SR0R-30200

// Select row fr dpick.vzipcd01
Function SR0R-30210()
   /* ------------------------------------------------------------*/
   /* Save FROM/TO lead SO data to display M001.*/
   /* ------------------------------------------------------------*/

  set TF3REC empty;

  TF3REC.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
  TF3REC.XXXZIP = SR0RW00.XXXZIP; /* Zip code - 10 char*/

  SR0RS-IO1640-S(); /* Select dpick.vzipcd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If 10 char zip code found*/
     /* next sentence*/
  else /* Not found*/

    set TF3REC empty;

    TF3REC.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
    TF3REC.XXXZIP = SR0RW00.SR0RW-XXXZIP-5; /* Zip code - 5 char*/

    SR0RS-IO1640-S(); /* Select dpick.vzipcd01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If 5 char zip code found*/
       /* next sentence*/
    else /* Not found*/

      set TF3REC empty;

      TF3REC.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
      TF3REC.XXXZIP = SR0RW00.SR0RW-XXXZIP-4; /* Zip code - 4 char*/

      SR0RS-IO1640-S(); /* Select dpick.vzipcd01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If 4 char zip code found*/
         /* next sentence*/
      else /* Not found*/

        set TF3REC empty;

        TF3REC.XWHCD = SR0RW01.XWHCD; /* Warehouse code*/
        TF3REC.XXXZIP = SR0RW00.SR0RW-XXXZIP-3; /* Zip code - 3 char*/

        SR0RS-IO1640-S(); /* Select dpick.vzipcd01*/

      end /* If 4 char zip code found*/

    end /* If 5 char zip code found*/

  end /* If 10 char zip code found*/


end // end SR0R-30210

// Save BOL data
Function SR0R-30300()
   /* ------------------------------------------------------------*/
   /* Save BOL required data.*/
   /* ------------------------------------------------------------*/

  if (SR1REC.SR1PKDT > SR0RW01.SR0RW-SR1PKDT-CCYYMMDD[SR0RW-FR-TO-BOL-IND])
                                   /* Get latest picked sched date*/
    SR0RW01.SR0RW-SR1PKDT-CCYYMMDD[SR0RW-FR-TO-BOL-IND] = SR1REC.SR1PKDT;
  end

  SR0RW01.SR0RW-SR2QTYSH-BOL[SR0RW-FR-TO-BOL-IND] = SR0RW01.SR0RW-SR2QTYSH-BOL[SR0RW-FR-TO-BOL-IND] + SR2REC.SR2QTYSH;
                                   /* Accum BOL shipped qty*/
  SR0RW01.SR0RW-PK1WT-BOL[SR0RW-FR-TO-BOL-IND] = SR0RW01.SR0RW-PK1WT-BOL[SR0RW-FR-TO-BOL-IND] + SR2REC.PK1WT;
                                   /* Accum BOL weight*/
  SR0RW01.SR0RW-SR2SHPCG-BOL[SR0RW-FR-TO-BOL-IND] = SR0RW01.SR0RW-SR2SHPCG-BOL[SR0RW-FR-TO-BOL-IND] + SR2REC.SR2SHPCG;
                                   /* Accum BOL shipping charges*/

  if (SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND] == " ")
    SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND] = SR2REC.XGPCD;
    if (SR2REC.XGPCD in XGPTBL.XGPCD)
      SR0RW01.SR0RW-XGPABRV1[SR0RW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      SR0RW01.SR0RW-XGPABRV1[SR0RW-FR-TO-BOL-IND] = "UNKNOWN";
    end
  end

  if (SR0RW01.XGPCD2[SR0RW-FR-TO-BOL-IND] == " ")
    if (SR2REC.XGPCD != SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND])
      SR0RW01.XGPCD2[SR0RW-FR-TO-BOL-IND] = SR2REC.XGPCD;
      if (SR2REC.XGPCD in XGPTBL.XGPCD)
        SR0RW01.SR0RW-XGPABRV2[SR0RW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      else
        SR0RW01.SR0RW-XGPABRV2[SR0RW-FR-TO-BOL-IND] = "UNKNOWN";
      end
    end
  end

  if (SR0RW01.XGPCD3[SR0RW-FR-TO-BOL-IND] == " ")
    if (SR2REC.XGPCD != SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND]
     && SR2REC.XGPCD != SR0RW01.XGPCD2[SR0RW-FR-TO-BOL-IND])
      SR0RW01.XGPCD3[SR0RW-FR-TO-BOL-IND] = SR2REC.XGPCD;
      if (SR2REC.XGPCD in XGPTBL.XGPCD)
        SR0RW01.SR0RW-XGPABRV3[SR0RW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      else
        SR0RW01.SR0RW-XGPABRV3[SR0RW-FR-TO-BOL-IND] = "UNKNOWN";
      end
    end
  end

  if (SR0RW01.XGPCD4[SR0RW-FR-TO-BOL-IND] == " ")
    if (SR2REC.XGPCD != SR0RW01.XGPCD1[SR0RW-FR-TO-BOL-IND]
     && SR2REC.XGPCD != SR0RW01.XGPCD2[SR0RW-FR-TO-BOL-IND]
     && SR2REC.XGPCD != SR0RW01.XGPCD3[SR0RW-FR-TO-BOL-IND])
      SR0RW01.XGPCD4[SR0RW-FR-TO-BOL-IND] = SR2REC.XGPCD;
      if (SR2REC.XGPCD in XGPTBL.XGPCD)
        SR0RW01.SR0RW-XGPABRV4[SR0RW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      else
        SR0RW01.SR0RW-XGPABRV4[SR0RW-FR-TO-BOL-IND] = "UNKNOWN";
      end
    end
  end


end // end SR0R-30300

// Save BOL order data
Function SR0R-30400()
   /* ------------------------------------------------------------*/
   /* Save FROM BOL order to display M002.*/
   /* ------------------------------------------------------------*/

  SR0RW02.OP1CUOID[XXX-INX-FLD-NBR] = SR2REC.OP1CUOID; /* Cust ord id*/
  SR0RW02.OP1NORID[XXX-INX-FLD-NBR] = SR2REC.OP1NORID; /* Nike ord id*/
  SR0RW02.PK1PKSCH[XXX-INX-FLD-NBR] = SR2REC.PK1PKSCH; /* Schedule nbr*/
  SR0RW02.PK1NBCTN[XXX-INX-FLD-NBR] = SR2REC.PK1NBCTN; /* Nbr of crtns*/
  SR0RW02.SR2QTYSH[XXX-INX-FLD-NBR] = SR2REC.SR2QTYSH; /* Shipped qty*/
  SR0RW02.PK1WT[XXX-INX-FLD-NBR] = SR2REC.PK1WT; /* Weight*/
  SR0RW02.SR2SHPCG[XXX-INX-FLD-NBR] = SR2REC.SR2SHPCG; /* Ship charges*/

  SR0RW02.ZZZCHGCT[XXX-INX-FLD-NBR] = SR2REC.ZZZCHGCT; /* Change count*/

  SR0RW01.SR0RW-ORDER-CNT[SR0RW-FR-TO-BOL-IND] = SR0RW01.SR0RW-ORDER-CNT[SR0RW-FR-TO-BOL-IND] + 1;

  SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

  if (SR0RW00.XXX-INX-FLD-NBR > SR0RW00.XXX-INX-LMT-NBR)

    SR0RS-TA0050-A(); /* Add the order to temp storage*/

    SR0RW00.XXX-INX-FLD-NBR = 1;

  end


end // end SR0R-30400

// Process modify/consolidate rqs
Function SR0R-40000()
   /* ------------------------------------------------------------*/
   /* Process split request.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "M"
   && SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y") /* Split requested*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    SR0R-41000(); /* Process address changes*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-44000(); /* Re-process addr for possible delete*/

    /* Process TO BOL.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/

    SR0R-41000(); /* Process address changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-45000(); /* Retrieve updated BOL for re-display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process modify request.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "M") /* If modify only*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    SR0R-41000(); /* Process address changes*/

    SR0R-42000(); /* Process orders changes*/

    if (SR0RM001.PK1NBCTN != SR0RW01.PK1NBCTN[1]) /* Nbr of cartons changed*/
      SR0R-43000(); /* Process BOL cartons*/
    end

    SR0R-45000(); /* Retrieve updated BOL for redisplay*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process consolidate all FROM BOL orders to a new TO BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C"        /* If consolidating*/
   && SR0RW01.SR0RW-ALL-ORDERS-FL == "Y" /* all FROM BOL*/
   && SR0RW00.SR0RW-CREATE-TO-BOL-FL == "Y") /* to a new TO BOL*/

    /* Process FROM BOL orders.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Point to FROM BOL*/
    TA5REC.TA5APPID = "SRFR"; /* Point to FROM BOL temporary storage*/

    XX0XS01(); /* Get change date and time*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-44000(); /* Re-process addr for possible delete*/

    /* Process TO BOL.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/

    SR0R-41000(); /* Process address changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-45000(); /* Retrieve updated BOL for re-display*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process consolidate selected FROM BOL orders to a new TO BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C" /* If consolidating selected orders*/
   && SR0RW00.SR0RW-CREATE-TO-BOL-FL == "Y") /* to a new TO BOL*/

    /* Process FROM BOL orders.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Point to FROM BOL*/
    TA5REC.TA5APPID = "SRFR"; /* Point to FROM BOL temporary storage*/

    XX0XS01(); /* Get change date and time*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-44000(); /* Re-process addr for possible delete*/

    /* Process TO BOL cartons.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/

    SR0R-41000(); /* Process address changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-45000(); /* Retrieve updated BOL for re-display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process consolidate all FROM BOL orders to an existing TO BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C"
   && SR0RW01.SR0RW-ALL-ORDERS-FL == "Y") /* If consolidating all FROM BOL*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Point to FROM BOL*/
    TA5REC.TA5APPID = "SRFR"; /* Point to FROM BOL temporary storage*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-44000(); /* Re-process addr for possible delete*/

    /* Process TO BOL orders.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/
    TA5REC.TA5APPID = "SRTO"; /* Point to TO BOL temporary storage*/

    SR0R-41000(); /* Process address changes*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-45000(); /* Retrieve updated BOL for re-display*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process consolidate selected FROM BOL orders to an existing*/
   /* TO BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C") /* If consolidating selected orders*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 1; /* Point to FROM BOL*/
    TA5REC.TA5APPID = "SRFR"; /* Point to FROM BOL temporary storage*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-44000(); /* Re-process addr for possible delete*/

    /* Process TO BOL orders.*/

    SR0RW00.SR0RW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/
    TA5REC.TA5APPID = "SRTO"; /* Point to TO BOL temporary storage*/

    SR0R-41000(); /* Process address changes*/

    SR0R-42000(); /* Process orders changes*/

    SR0R-43000(); /* Process BOL cartons*/

    SR0R-45000(); /* Retrieve updated BOL for re-display*/

  end


end // end SR0R-40000

// Process address change
Function SR0R-41000()
   /* ------------------------------------------------------------*/
   /* Process address changes.*/
   /* ------------------------------------------------------------*/

  SR0RW00.SR0RW-ADDR-CHANGED-FL = "N";

  set SR4REC empty;

  SR4REC.XWHCD = SR0RW01.XWHCD;

  SR4REC.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
  SR4REC.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];

  SR0RS-IO0820-S(); /* Select dship.vsradd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

    if (SR0RM001.OP5ALTNM != SR4REC.OP5ALTNM
     || SR0RM001.XXX-ADDR[1] != SR4REC.XXX-ADDR[1]
     || SR0RM001.XXX-ADDR[2] != SR4REC.XXX-ADDR[2]
     || SR0RM001.XXX-ADDR[3] != SR4REC.XXX-ADDR[3]
     || SR0RM001.XXXCITY != SR4REC.XXXCITY
     || SR0RM001.XSTCD != SR4REC.XSTCD
     || SR0RM001.XCTCD != SR4REC.XCTCD
     || SR0RM001.XXXZIP != SR4REC.XXXZIP)

      if (SR0RM001.XXXZIP != SR4REC.XXXZIP) /* If zip code changed*/

        if (SR0RM001.SR0RM-OPTION == "M" /* If modify option*/
         || SR0RW01.PK4CARSP[1] != "10")
                                   /* or not customer-specified routing*/
          SR0RW00.SR0RW-MESSAGE = "CHANGE OF CARR/DEST RECOMMENDED BECAUSE OF ADDRESS CHANGED";
        end

      end

      SR0RW00.SR0RW-ADDR-CHANGED-FL = "Y";

      SR4REC.OP5ALTNM = SR0RM001.OP5ALTNM;
      SR4REC.XXX-ADDR[1] = SR0RM001.XXX-ADDR[1];
      SR4REC.XXX-ADDR[2] = SR0RM001.XXX-ADDR[2];
      SR4REC.XXX-ADDR[3] = SR0RM001.XXX-ADDR[3];
      SR4REC.XXXCITY = SR0RM001.XXXCITY;
      SR4REC.XSTCD = SR0RM001.XSTCD;
      SR4REC.XCTCD = SR0RM001.XCTCD;
      SR4REC.XXXZIP = SR0RM001.XXXZIP;
      SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0RS-IO0820-U(); /* Update dship.vsradd01*/

    end

  else /* Not found*/

    SR0RW00.SR0RW-ADDR-CHANGED-FL = "Y";

    set SR4REC empty;

    SR4REC.XWHCD = SR0RW01.XWHCD;
    SR4REC.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
    SR4REC.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];
    SR4REC.OP5ALTNM = SR0RM001.OP5ALTNM;
    SR4REC.XXX-ADDR[1] = SR0RM001.XXX-ADDR[1];
    SR4REC.XXX-ADDR[2] = SR0RM001.XXX-ADDR[2];
    SR4REC.XXX-ADDR[3] = SR0RM001.XXX-ADDR[3];
    SR4REC.XXXCITY = SR0RM001.XXXCITY;
    SR4REC.XSTCD = SR0RM001.XSTCD;
    SR4REC.XCTCD = SR0RM001.XCTCD;
    SR4REC.XXXZIP = SR0RM001.XXXZIP;
    SR4REC.ZZZSDT = XX0XW01.XX0XWDAT;
    SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    SR0RS-IO0820-A(); /* Add dship.vsradd01*/

  end


end // end SR0R-41000

// Process order changes
Function SR0R-42000()
   /* ------------------------------------------------------------*/
   /* Process order changes.*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Set to first page*/

  while (converseVar.validationMsgNum == 0
   && SR0RW00.XXX-CURR-PAGE-NBR <= 
  SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND])

    set SR0RW02 empty; /* Initialize orders work area*/

    SR0RW02.XXX-TEMP-STG-LNTH = SR0RW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
    TA5REC.TA5TSQIX = SR0RW00.XXX-CURR-PAGE-NBR;
                                   /* Index to temporary storage*/

    SR0RS-TA0050-R(); /* Read temporary storage*/

    SR0RW00.XXX-INX-FLD-NBR = 1;

    while (converseVar.validationMsgNum == 0 /* Process each order within a page*/
     && SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR
     && SR0RW02.OP1CUOID[XXX-INX-FLD-NBR] != 0)

      if (SR0RW01.SR0RW-OPTION == "C"        /* If consolidating*/
       && SR0RW00.SR0RW-FR-TO-BOL-IND == 1   /* FROM BOL*/
       && SR0RW01.SR0RW-ALL-ORDERS-FL != "Y" /* selected orders*/
       && SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != "S")
                                   /* and not selected*/
      else

        SR0RW00.SR0RW-UPDATE-FL = "N";

        SR0R-42100(); /* Process order changes*/

        SR0R-42200(); /* Process store's pack list changes*/

      end

      SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

    end

    SR0RW00.XXX-CURR-PAGE-NBR = SR0RW00.XXX-CURR-PAGE-NBR + 1;

  end


end // end SR0R-42000

// Process dship.vsrord01 changes
Function SR0R-42100()
   /* ------------------------------------------------------------*/
   /* Process order changes.*/
   /* ------------------------------------------------------------*/

   /* Update order when address changed.*/

  if (SR0RW00.SR0RW-ADDR-CHANGED-FL == "Y") /* If address changed*/

    SR0RW00.SR0RW-UPDATE-FL = "Y";

  end

   /* Update order when any of the modifiable fields changed.*/

  if ((SR0RM001.TF1CARCD != SR0RW01.TF1CARCD[SR0RW-FR-TO-BOL-IND])
   || (TF1REC.TF1MCARF == "Y"
   && SR0RM001.SR0RM-CARRIER-NAME != 
  SR0RW01.SR0RW-CARRIER-NAME[SR0RW-FR-TO-BOL-IND])
   || (SR0RM001.TF2DSTCD != SR0RW01.TF2DSTCD[SR0RW-FR-TO-BOL-IND])
   /* If modifiable fields changed*/
  )
    SR0RW00.SR0RW-UPDATE-FL = "Y";

  end

  if (SR0RM001.TF2PRONO != SR0RW01.TF2PRONO[SR0RW-FR-TO-BOL-IND])
    if (SR0RM001.TF2PRONO == " "
     && SR0RW01.TF2PRONO[SR0RW-FR-TO-BOL-IND] == "000000000000")
      /* next sentence*/
    else

      SR0RW00.SR0RW-UPDATE-FL = "Y";

    end
  end

  SR0RW00.SR0RW-SR1SHPDT-MMDDYY = SR0RM001.SR0RM-SR1SHPDT-MMDDYY;

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD[SR0RW-FR-TO-BOL-IND])
                                   /* If shipped date changed*/

    SR0RW00.SR0RW-UPDATE-FL = "Y";

  end

  if (SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL == "Y")
    /* next sentence*/
  else

    if (SR0RW02.PK1PKSCH[XXX-INX-FLD-NBR] == SR0RM001.PK1PKSCH
     && SR0RW02.OP1CUOID[XXX-INX-FLD-NBR] == SR0RM001.OP1CUOID
     && SR0RW02.OP1NORID[XXX-INX-FLD-NBR] == SR0RM001.OP1NORID)
                                   /* If lead so*/

      if (SR0RW01.SR0RW-UNIT-OF-MEASURE == "U") /* English system*/
        SR0RW00.PK1WT = SR0RM001.PK1WT;
      else
        SR0RW00.PK1WT = mathLib.round(SR0RM001.PK1WT * 2.2046, -mathLib.decimals(SR0RW00.PK1WT));
      end

      if (SR0RM001.PK1NBCTN != SR0RW01.PK1NBCTN[SR0RW-FR-TO-BOL-IND]
       || SR0RM001.SR2SHPCG != SR0RW01.SR2SHPCG[SR0RW-FR-TO-BOL-IND]
       || SR0RW00.PK1WT != SR0RW01.PK1WT[SR0RW-FR-TO-BOL-IND])

        SR0RW00.SR0RW-UPDATE-FL = "Y";

      end

    end

  end

   /* Update FROM BOL order when selected for split.*/

  if (SR0RW01.SR0RW-OPTION == "M"
   && SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y"
   && SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S")
                                   /* Order selected for split*/

    SR0RW00.SR0RW-UPDATE-FL = "Y";

  end

   /* Update FROM BOL order when consolidating to TO BOL.*/

  if (SR0RW01.SR0RW-OPTION == "C" /* If consolidating*/
   && SR0RW00.SR0RW-FR-TO-BOL-IND == 1) /* FROM BOL*/

    SR0RW00.SR0RW-UPDATE-FL = "Y";

  end

  if (SR0RW00.SR0RW-UPDATE-FL == "N")

    return;

  end

   /* ------------------------------------------------------------*/
   /* Update changed fields.*/
   /* ------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0RW01.XWHCD;
  SR2REC.PK1PKSCH = SR0RW02.PK1PKSCH[XXX-INX-FLD-NBR];
  SR2REC.OP1CUOID = SR0RW02.OP1CUOID[XXX-INX-FLD-NBR];
  SR2REC.OP1NORID = SR0RW02.OP1NORID[XXX-INX-FLD-NBR];

  SR0RS-IO0800-S(); /* Select dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == +100 /* If not found*/
   || SR2REC.ZZZCHGCT != SR0RW02.ZZZCHGCT[XXX-INX-FLD-NBR])

    SRWREC.XXXERRID = "16200"; /* Message location*/
    converseLib.validationFailed(141); /* Order was updated*/

    SR0RW00.SR0RW-UPDATE-FL = "N"; /* No update*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    return;

  end

  SR0RW00.PK1BLLAD = SR2REC.PK1BLLAD; /* Save original BOL*/

  if (SR0RW01.SR0RW-OPTION == "M"
   && SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y"
   && SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S") /* Split requested*/

    SR2REC.OP11TMSF = "Y"; /* Onetime ship flag*/

    SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[2]; /* Changed to TO BOL*/
    SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[2];

  end

  if (SR0RW01.SR0RW-OPTION == "C"
   && SR0RW00.SR0RW-FR-TO-BOL-IND == 1) /* If consolidating FROM BOL*/

    SR2REC.OP11TMSF = "Y"; /* Onetime ship flag*/

    SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[2]; /* Changed to TO BOL*/
    SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[2];

  end

  if (SR0RW00.SR0RW-ADDR-CHANGED-FL == "Y") /* If address changed*/

    SR2REC.OP11TMSF = "Y"; /* Onetime ship flag*/

  end

  if (SR0RM001.TF1CARCD != SR2REC.TF1CARCD) /* Carrier code changed*/

    SR2REC.TF1CARCD = SR0RM001.TF1CARCD;
    SR2REC.TF1CARNM = " ";
    SR2REC.PK4CARSP = "30";

  end

  if (TF1REC.TF1MCARF == "Y" /* If misc carrier*/
   && SR0RM001.SR0RM-CARRIER-NAME != SR2REC.TF1CARNM)
                                   /* and carrier name cahnged*/

    SR2REC.TF1CARNM = SR0RM001.SR0RM-CARRIER-NAME;
    SR2REC.PK4CARSP = "30";

  end

  if (SR0RM001.TF2DSTCD != SR2REC.TF2DSTCD) /* If dest code changed*/

    SR2REC.TF2DSTCD = SR0RM001.TF2DSTCD;

  end

  if (SR0RM001.TF2PRONO == " "
   && SR2REC.TF2PRONO == "000000000000")
    /* next sentence*/
  else
    if (SR0RM001.TF2PRONO != SR2REC.TF2PRONO) /* If pro nbr changed*/

      if (SR0RM001.TF2PRONO == " ")
        SR2REC.TF2PRONO = "000000000000";
      else
        SR2REC.TF2PRONO = SR0RM001.TF2PRONO;
      end

    end
  end

  SR0RW00.SR0RW-SR1SHPDT-MMDDYY = SR0RM001.SR0RM-SR1SHPDT-MMDDYY;

  if (SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM[SR0RW-FR-TO-BOL-IND]
   || SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD != 
  SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD[SR0RW-FR-TO-BOL-IND])
                                   /* If shipped date changed*/
    SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY[SR0RW-FR-TO-BOL-IND] = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-YY;
    SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-MM[SR0RW-FR-TO-BOL-IND] = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-MM;
    SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-DD[SR0RW-FR-TO-BOL-IND] = SR0RW00.SR0RW-SR1SHPDT-MMDDYY-DD;
  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* IF SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-CC EQ 0;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */
    if (SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-YY > 90)
      SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-CC = 19;
    else
      SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD-CC = 20;
    end
  /*  */
  /* ************************  Y2K OUT BEGIN **************************/
  /*  */
  /* END;*/
  /*  */
  /* ************************  Y2K OUT END   **************************/
  /*  */

    SR2REC.SR1SHPDT = SR0RW01.SR0RW-SR1SHPDT-CCYYMMDD;

  end

  if (SR0RW00.SR0RW-LEAD-SO-IN-MULT-SCHED-FL == "Y")
    /* next sentence*/
  else

    if (SR2REC.XWHCD == SR0RM001.XWHCD
     && SR2REC.PK1PKSCH == SR0RM001.PK1PKSCH
     && SR2REC.OP1CUOID == SR0RM001.OP1CUOID
     && SR2REC.OP1NORID == SR0RM001.OP1NORID) /* If lead so*/

      if (SR0RM001.PK1NBCTN != SR2REC.PK1NBCTN) /* If nbr of cartons changed*/
        SR2REC.PK1NBCTN = SR0RM001.PK1NBCTN;
      end

      if (SR0RW00.PK1WT != SR2REC.PK1WT) /* If weight changed*/
        SR2REC.PK1WT = SR0RW00.PK1WT;
      end

      if (SR0RM001.SR2SHPCG != SR2REC.SR2SHPCG)
                                   /* If shipping charges changed*/
        SR2REC.SR2SHPCG = SR0RM001.SR2SHPCG;
      end

    end

  end

  SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Changed time*/
  SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Changed date*/

  SR0RS-IO0800-U(); /* Update dship.vsrord01*/


end // end SR0R-42100

// Process dpick.vsplhd01 changes
Function SR0R-42200()
   /* ------------------------------------------------------------*/
   /* Process store's packing list header changes.*/
   /* ------------------------------------------------------------*/

  if (SR0RW00.SR0RW-UPDATE-FL != "Y") /* If no update*/
    return;
  end

  set PWOREC empty;

  PWOREC.XWHCD = SR2REC.XWHCD; /* Warehouse code*/
  PWOREC.TSIPLNBR = SR2REC.TSIPLNBR; /* Packing list nbr*/
  SR0RW00.SR0RW-OP1CUOID-UNPACK = SR2REC.OP1CUOID;
  PWOREC.OP1PARTN = SR0RW00.OP1PARTN; /* Partition char*/
  PWOREC.OP1CUOID = SR2REC.OP1CUOID; /* Cust ord id*/

  SR0RW00.SR0RW-PK1PKSCH-UNPACK = SR2REC.PK1PKSCH;
  SR0RW00.SR0RW-PK1PKSCH-COMP-4 = SR0RW00.SR0RW-PK1PKSCH-UNPACK-4;

  SR0RS-IO5770-S1(); /* Cursor dpick.vsplhd01*/

  SR0RS-IO5770-N1(); /* Fetch dpick.vsplhd01*/

  while (VAGen_SQLCODE == 0)

    if (SR2REC.OP1NORID == PWOREC.OP1NORID
     /* AND SR0RW00.SR0RW-PK1PKSCH-COMP-4 = PWOREC.PK-PL-SCHED-NBR*/
     && SR0RW00.PK1BLLAD == PWOREC.PK1BLLAD)

      PWOREC.PK1BLLAD = SR2REC.PK1BLLAD;
      PWOREC.SR2BLLSU = SR2REC.SR2BLLSU;

      PWOREC.TF1CARCD = SR2REC.TF1CARCD;

      PWOREC.KUCCONM = SR0RM001.OP5ALTNM;
      PWOREC.XXX-ADDR1 = SR0RM001.XXX-ADDR[1];
      PWOREC.XXX-ADDR2 = SR0RM001.XXX-ADDR[2];
      PWOREC.XXX-ADDR3 = SR0RM001.XXX-ADDR[3];
      PWOREC.XXXCITY = SR0RM001.XXXCITY;
      PWOREC.XSTCD = SR0RM001.XSTCD;
      PWOREC.XXXZIP = SR0RM001.XXXZIP;
      PWOREC.XCTCD = SR0RM001.XCTCD;

      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

      SR0RS-IO5770-U(); /* Update dpick.vsplhd01*/

    end

    SR0RS-IO5770-N1(); /* Fetch dpick.vsplhd01*/

  end

  SR0RS-IO5770-C1(); /* Close dpick.vsplhd01*/


end // end SR0R-42200

// Calculate/update BOL cartons
Function SR0R-43000()
   /* ------------------------------------------------------------*/
   /* Calculate BOL cartons.*/
   /* ------------------------------------------------------------*/

  SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND] = 0;

  set SR2REC empty;

  SR2REC.XWHCD = SR0RW01.XWHCD;
  SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
  SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];

  SR0RS-IO0800-S3(); /* Select cursor dship.vsrord01*/

  SR0RS-IO0800-N3(); /* Fetch first row*/

  while (SQLCA.VAGen_SQLCODE == 0)

    SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND] = SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND] + SR2REC.PK1NBCTN;

    SR0RS-IO0800-N3(); /* Fetch next row*/

  end

  SR0RS-IO0800-C3(); /* Close dship.vsrord01 cursor*/

   /* ------------------------------------------------------------*/
   /* Update BOL cartons.*/
   /* ------------------------------------------------------------*/


  set SR2REC empty;

  SR2REC.XWHCD = SR0RW01.XWHCD;
  SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
  SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];


  SR0RS-IO0800-S3(); /* Select cursor dship.vsrord01*/

  SR0RS-IO0800-N3(); /* Fetch first row*/

  while (SQLCA.VAGen_SQLCODE == 0)

    SR2REC.SR2TNBCT = SR0RW01.SR2TNBCT[SR0RW-FR-TO-BOL-IND];
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;

    SR0RS-IO0800-U(); /* Update dship.vsrord01*/

    SR0RS-IO0800-N3(); /* Fetch next row*/

  end

  SR0RS-IO0800-C3(); /* Close dship.vsrord01 cursor*/


end // end SR0R-43000

// Process FROM BOL address
Function SR0R-44000()
   /* ------------------------------------------------------------*/
   /* Verify if FROM BOL still exists.*/
   /* ------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0RW01.XWHCD;
  SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[1];

  SR0RS-SR1120-S(); /* Select unique dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
     /* next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* Process address changes.*/
   /* ------------------------------------------------------------*/

  set SR4REC empty;

  SR4REC.XWHCD = SR0RW01.XWHCD;

  SR4REC.PK1BLLAD = SR0RW01.PK1BLLAD[SR0RW-FR-TO-BOL-IND];
  SR4REC.SR2BLLSU = SR0RW01.SR2BLLSU[SR0RW-FR-TO-BOL-IND];

  SR0RS-IO0820-S(); /* Select dship.vsradd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

    SR0RS-IO0820-D(); /* Delete row from dship.vsradd01*/

  end


end // end SR0R-44000

// Retrieve upd BOL for re-disply
Function SR0R-45000()
   /* ------------------------------------------------------------*/
   /* Set updated BOL for re-display.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.SR0RW-OPTION == "C" /* If consolidation requested*/
   || SR0RW00.SR0RW-SPLIT-REQUESTED-FL == "Y") /* or split request*/

    SR0RW00.PK1BLLAD = SR0RW01.PK1BLLAD[2]; /* FROM BOL*/
    SR0RW00.SR2BLLSU = SR0RW01.SR2BLLSU[2];

  else

    SR0RW00.PK1BLLAD = SR0RW01.PK1BLLAD[1]; /* FROM BOL*/
    SR0RW00.SR2BLLSU = SR0RW01.SR2BLLSU[1];

  end

  set SR0RW01 empty;

  SR0RW01.XWHCD = SR0RM001.XWHCD;
  SR0RW01.PK1BLLAD[1] = SR0RW00.PK1BLLAD;
  SR0RW01.SR2BLLSU[1] = SR0RW00.SR2BLLSU;
  SR0RW01.SR0RW-OPTION = "M";
  SR0RW01.SR0RW-UNIT-OF-MEASURE = SR0RM001.SR0RM-UNIT-OF-MEASURE;

   /* ------------------------------------------------------------*/
   /* Set parameters to re-display updated BOL.*/
   /* ------------------------------------------------------------*/

  SR0RW00.SR0RW-REDISPLAY-UPD-BOL-FL = "Y"; /* Redisplay upd BOL flag*/

  SR0RW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
  SR0RW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  SR0RW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/


end // end SR0R-45000

// Process SR0C request
Function SR0R-50000()
   /* ------------------------------------------------------------*/
   /* Process SR0C request.*/
   /* ------------------------------------------------------------*/

  set SRWREC empty;
  set SR0RW02 empty;

  SRWREC.SRWXWHCD = SR0RW01.XWHCD; /* Warehouse code*/
  SRWREC.SRWRETOP = SR0RW01.SR0RW-OPTION; /* Option*/

  SRWREC.PK1BLLAD[1] = SR0RW01.PK1BLLAD[1]; /* FROM BOL*/
  SRWREC.SR2BLLSU[1] = SR0RW01.SR2BLLSU[1];

  SRWREC.SRWMISCF[1] = SR0RW01.SR0RW-ALL-ORDERS-FL;
                                   /* All orders flag*/
  SRWREC.SRWMISCF[2] = SR0RW01.SR0RW-UNIT-OF-MEASURE;
                                   /* Unit of measure*/

  SRWREC.PK1BLLAD[2] = SR0RW01.SR0RW-ORDER-CNT[1]; /* Nbr of orders*/
  SRWREC.SR2BLLSU[2] = SR0RW01.XXX-HI-PAGE-NBR[1]; /* Maximum page nbr*/

  SRWREC.SRWRETFL = "Y"; /* Return to prev appl flag*/

  COMMAREA.CATOAP = "SR0C"; /* TO appl*/
  COMMAREA.CAUSERA = SRWREC.SRWGRP; /* User area*/

  XSEXIT(); /* Transfer to requested appl*/


end // end SR0R-50000

// Process print BOL request
Function SR0R-60000()
   /* ------------------------------------------------------------*/
   /* Process SR0Q request.*/
   /* ------------------------------------------------------------*/

  set SRWREC empty;

  SRWREC.SRWXWHCD = SR0RW01.XWHCD; /* Warehouse code*/
  SRWREC.SRWRETOP = SR0RW01.SR0RW-OPTION; /* Option*/

  SRWREC.PK1BLLAD[1] = SR0RW01.PK1BLLAD[1]; /* FROM BOL*/
  SRWREC.SR2BLLSU[1] = SR0RW01.SR2BLLSU[1];

  SRWREC.PK1BLLAD[2] = SR0RW01.PK1BLLAD[2]; /* TO BOL*/
  SRWREC.SR2BLLSU[2] = SR0RW01.SR2BLLSU[2];

  SRWREC.SRWMISCF[1] = SR0RW01.SR0RW-ALL-ORDERS-FL;
                                   /* All orders flag*/
  SRWREC.SRWMISCF[2] = SR0RW01.SR0RW-UNIT-OF-MEASURE;
                                   /* Unit of measure*/

  SRWREC.SRWRETFL = "Y"; /* Return to prev appl flag*/

  COMMAREA.CATOAP = "SR0Q"; /* TO appl*/
  COMMAREA.CAUSERA = SRWREC.SRWGRP; /* User area*/

  XSEXIT(); /* Transfer to requested appl*/


end // end SR0R-60000

// Process split bol request
Function SR0R-70000()
   /* ------------------------------------------------------------*/
   /* Process split bol request.*/
   /* ------------------------------------------------------------*/

  SR0RW01.PK1BLLAD[2] = SR0RW01.PK1BLLAD[1]; /* TO BOL*/
  SR0RW01.SR2BLLSU[2] = SR0RW01.SR2BLLSU[1] + 1;

   /* ------------------------------------------------------------*/
   /* Find next BOL sub nbr.*/
   /* ------------------------------------------------------------*/

  if (SR0RW01.XWHCD == "51") /* Memphis apparel*/
    SR0RW-BOL-MATCHES-FL = "N"; /* Order matches bol nbr*/

    SR0R-70100(); /* Split BOL for Memphis*/

    if (SR0RW-BOL-MATCHES-FL == "N") /* Order matches bol nbr*/
      SR0RW01.PK1BLLAD[2] = SR0RW-FMT-BOL-NBR; /* To bol*/
      SR0RW01.SR2BLLSU[2] = 0; /* To bol sub*/

      SR0R-70200(); /* Validate new bol nbr*/

    else
      while (SR0RW01.SR2BLLSU[2] in SREREC.SR2BLLSU)

        SR0RW01.SR2BLLSU[2] = SR0RW01.SR2BLLSU[2] + 1;

        if (SR0RW01.SR2BLLSU[2] > 9999)
          SR0RW01.SR2BLLSU[2] = 1;
        end

      end
    end

  else
    while (SR0RW01.SR2BLLSU[2] in SREREC.SR2BLLSU)

      SR0RW01.SR2BLLSU[2] = SR0RW01.SR2BLLSU[2] + 1;

      if (SR0RW01.SR2BLLSU[2] > 9999)
        SR0RW01.SR2BLLSU[2] = 1;
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Process split.*/
   /* ------------------------------------------------------------*/

  SR0R-40000(); /* Process split*/

  SR0RW00.SR0RW-SPLIT-REQUESTED-FL = "N"; /* Split request completed*/


end // end SR0R-70000

// Process split bol req for Mema
Function SR0R-70100()
   /* ------------------------------------------------------------*/
   /* Process split bol request for Memphis Apparel*/
   /* ------------------------------------------------------------*/

  SR0RW00.XXX-CURR-PAGE-NBR = 1; /* Set to first page*/
  /* MOVE 'N' TO SR0RW-BOL-MATCHES-FL;  /* Order matches bol nbr*/
  SR0RW-END-ORDER-TEST-FL = "N"; /* Test - order nbrs match bol?*/

  while (converseVar.validationMsgNum == 0 /* Process each page for bol*/
   && SR0RW-END-ORDER-TEST-FL == "N"    
   && SR0RW00.XXX-CURR-PAGE-NBR <=      
  SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND])

    set SR0RW02 empty; /* Initialize orders work area*/

    SR0RW02.XXX-TEMP-STG-LNTH = SR0RW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
    TA5REC.TA5TSQIX = SR0RW00.XXX-CURR-PAGE-NBR;
                                   /* Index to temporary storage*/

    SR0RS-TA0050-R(); /* Read temporary storage*/

    SR0RW00.XXX-INX-FLD-NBR = 1;

    while (converseVar.validationMsgNum == 0 /* Process each order within a page*/
     && SR0RW00.XXX-INX-FLD-NBR <= SR0RW00.XXX-INX-LMT-NBR
     && SR0RW02.OP1CUOID[XXX-INX-FLD-NBR] != 0
     && SR0RW-END-ORDER-TEST-FL == "N")

      if (SR0RW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S") /* Order selected*/
        SR0RW-END-ORDER-TEST-FL = "Y"; /* Test - ord matches bol?*/
        SR0RW-FMT-BOL-ORDER-NBR = SR0RW02.OP1CUOID[XXX-INX-FLD-NBR]; /* Fmt order nbr*/
        SR0RW-FMT-BOL-NIKE-ORD-ID = SR0RW02.OP1NORID[XXX-INX-FLD-NBR];

        if (SR0RW-FMT-BOL-NBR == SR0RW01.PK1BLLAD[1]) /* If lead so*/
          SR0RW-BOL-MATCHES-FL = "Y"; /* Order matches bol nbr*/
        end
      end

      SR0RW00.XXX-INX-FLD-NBR = SR0RW00.XXX-INX-FLD-NBR + 1;

    end

    SR0RW00.XXX-CURR-PAGE-NBR = SR0RW00.XXX-CURR-PAGE-NBR + 1;

  end


end // end SR0R-70100

// Validate new bol nbr for split
Function SR0R-70200()
   /* ------------------------------------------------------------*/
   /* Retrieve orders with new bol number*/
   /* ------------------------------------------------------------*/

  SR0RW-END-ORDER-TEST-FL = "N"; /* Test - new bol nbr exists?*/

  while (SR0RW-END-ORDER-TEST-FL == "N" /* Test - new bol nbr exists?*/
   && SR0RW01.SR2BLLSU[2] <= 9999)

    set SR2REC empty;

    SR2REC.XWHCD = SR0RW01.XWHCD;
    SR2REC.PK1BLLAD = SR0RW01.PK1BLLAD[2];
    SR2REC.SR2BLLSU = SR0RW01.SR2BLLSU[2];

    SR0RS-SR1120-S2(); /* Open cursor dship.vsrord01*/

    SR0R-30100(); /* Fetch a good order*/

    if (SQLCA.VAGen_SQLCODE == +0) /* If found*/
      SR0RW01.SR2BLLSU[2] = SR0RW01.SR2BLLSU[2] + 1;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
      SR0RW-END-ORDER-TEST-FL = "Y"; /* Test - new bol nbr exists?*/
    end

    SR0RS-SR1120-C2(); /* Close cursor dship.vsrord01*/

  end

  if (SR0RW01.SR2BLLSU[2] > 9999)

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(189); /* Cannot split - bol sub nbr > 99999*/
    set SR0RM002.PK1BLLAD cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/

  end
end // end SR0R-70200

// Get address fr dcust.vaddr001
Function SR0RS-IO0170-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dcust.vaddr001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0170S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VADDR001"; /* Description*/
  TA1REC.TA1DBASE = "DCUST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VADDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = KULREC.KULGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0170-S

// Get cust nm fr dcust.vstore01
Function SR0RS-IO0340-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dcust.vstore01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND] = KUMREC.KUMSTRNM;
                                   /* Customer name*/

      set KULREC empty;

      KULREC.KUCCOID = KUMREC.KUCCOID;
      KULREC.KULAAID = KUMREC.KUMSHAID;

      SR0RS-IO0170-S(); /* Select dcust.vaddr001*/

      if (SQLCA.VAGen_SQLCODE == +0) /* If found*/
        SR0RW01.XXX-ADDR1[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR1;
                                   /* Customer address*/
        SR0RW01.XXX-ADDR2[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR2;
        SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR3;
        SR0RW01.XXX-ADDR4[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR4;
        SR0RW01.XXX-ADDR5[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR5;
        SR0RW01.XXX-ADDR6[SR0RW-FR-TO-BOL-IND] = KULREC.XXX-ADDR6;
        SR0RW01.XXXCITY[SR0RW-FR-TO-BOL-IND] = KULREC.XXXCITY;
        SR0RW01.XSTCD[SR0RW-FR-TO-BOL-IND] = KULREC.XSTCD;
        SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND] = KULREC.XXXZIP;
        SR0RW01.XCTCD[SR0RW-FR-TO-BOL-IND] = KULREC.XCTCD;
      else
        SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND] = "* CUSTOMER ADDRESS NOT FOUND *";
      end

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0340S"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VSTORE01"; /* Description*/
  TA1REC.TA1DBASE = "DCUST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0340-S

// Select dship.vsrhdr01
Function SR0RS-IO0790-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsrhdr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0790S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and not found*/

    converseLib.validationFailed(38); /* ShipRec header does not exists*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not availble*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT UNIQUE VSRHDR01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0790-S

// Close cursor dship.vsrord01
Function SR0RS-IO0800-C3()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("C3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800C3"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO0800-C3

// Fetch dship.vsrord01
Function SR0RS-IO0800-N3()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("N3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800N3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH FROM VSRORD01 CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO0800-N3

// Select dship.vsrord01
Function SR0RS-IO0800-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not availble*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT UNIQUE VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0800-S

// Cursor on dship.vsrord01
Function SR0RS-IO0800-S3()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800S3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO0800-S3

// Update dship.vsrord01
Function SR0RS-IO0800-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SRWREC.XXXERRID = "IO0800U"; /* Message location*/
      converseLib.validationFailed(141); /* Update by another*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0800-U

// Add to dship.vsradd01
Function SR0RS-IO0820-A()
   /* ------------------------------------------------------------*/
   /* Add to dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0820" ("A ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820A"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD TO VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0820-A

// Delete dship.vsradd01
Function SR0RS-IO0820-D()
   /* ------------------------------------------------------------*/
   /* Delete requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0820" ("D ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SRWREC.XXXERRID = "IO0820D"; /* Message location*/
      converseLib.validationFailed(141); /* Update by another*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820D"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "DELETE VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0820-D

// Get address fr dship.vsradd01
Function SR0RS-IO0820-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0820" ("S ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Message location*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0820-S

// Update dship.vsradd01
Function SR0RS-IO0820-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0820" ("U ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SRWREC.XXXERRID = "IO0820U"; /* Message location*/
      converseLib.validationFailed(141); /* Update by another*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0820-U

// Select dpick.vcarr001
Function SR0RS-IO0860-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vcarr001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0860S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READING DB2 VCARR001"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO0860-S

// Select dpick.vzipcd01
Function SR0RS-IO1640-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vzipcd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1640" ("S ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1640S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READING DB2 VZIPCD01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VZIPCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF3REC.TF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO1640-S

// Get cust nm fr dpick.vpkcus01
Function SR0RS-IO1830-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkcus01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND] = PK6REC.KUMSTRNM;
                                   /* Customer name*/

      set PK7REC empty;

      PK7REC.KUCCOID = PK6REC.KUCCOID;
      PK7REC.KULAAID = PK6REC.KUMSHAID;

      SR0RS-IO2000-S(); /* Read dpick.vpkadr01*/

      if (SQLCA.VAGen_SQLCODE == +0)
        SR0RW01.XXX-ADDR1[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR1;
                                   /* Customer address*/
        SR0RW01.XXX-ADDR2[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR2;
        SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR3;
        SR0RW01.XXX-ADDR4[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR4;
        SR0RW01.XXX-ADDR5[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR5;
        SR0RW01.XXX-ADDR6[SR0RW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR6;
        SR0RW01.XXXCITY[SR0RW-FR-TO-BOL-IND] = PK7REC.XXXCITY;
        SR0RW01.XSTCD[SR0RW-FR-TO-BOL-IND] = PK7REC.XSTSTCD;
        SR0RW01.XXXZIP[SR0RW-FR-TO-BOL-IND] = PK7REC.XXXZIP;
        SR0RW01.XCTCD[SR0RW-FR-TO-BOL-IND] = PK7REC.XCTCD;
      else
        SR0RW01.XXX-ADDR3[SR0RW-FR-TO-BOL-IND] = "* CUSTOMER ADDRESS NOT FOUND *";
      end

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      SR0RW01.OP5ALTNM[SR0RW-FR-TO-BOL-IND] = "* CUSTOMER DOES NOT EXIST *";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1830S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READING DB2 VPKCUS01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO1830-S

// Check spec whse dpick.vpkctl01
Function SR0RS-IO1890-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkctl01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1890S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VPKCTL01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO1890-S

// Select dpick.vrtexn01
Function SR0RS-IO1900-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vrtexn01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1900" ("S ", SQLCA, TF4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1900S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READING DB2 VRTEXN01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEXN01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF4REC.TF4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO1900-S

// Close cursor dpick.vsplhd01
Function SR0RS-IO1910-C1()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vrtewt01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1910" ("C1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON VRTEWT01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO1910-C1

// Fetch dpick.vsplhd01
Function SR0RS-IO1910-N1()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1910" ("N1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH FROM VRTEWT01 CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO1910-N1

// Cursor on dpick.vsplhd01
Function SR0RS-IO1910-S1()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vrtewt01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1910" ("S1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN VRTEWT01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO1910-S1

// Get address fr dpick.vpkadr01
Function SR0RS-IO2000-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkadr01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2000" ("S ", SQLCA, PK7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to teh user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO2000S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VPKADR01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKADR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK7REC.PK7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO2000-S

// Check if Picking is running
Function SR0RS-IO4240-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the picking sameday/rush runs.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO4240S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VPKPGM01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0RS-IO4240-S

// Close cursor dpick.vsplhd01
Function SR0RS-IO5770-C1()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C1", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON VSPLHD01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO5770-C1

// Fetch dpick.vsplhd01
Function SR0RS-IO5770-N1()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N1", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH FROM VSPLHD01 CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO5770-N1

// Cursor on dpick.vsplhd01
Function SR0RS-IO5770-S1()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S1", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN VSPLHD01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-IO5770-S1

// Update dpick.vsplhd01
Function SR0RS-IO5770-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("U ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SRWREC.XXXERRID = "IO5770U"; /* Message location*/
      converseLib.validationFailed(141); /* Update by another*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VSPLHD01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end SR0RS-IO5770-U

// Close cursor on bol orders
Function SR0RS-SR1120-C2()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "SR1120" ("C2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "SR1120C2"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SCAN ORDERS IN BOL"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-SR1120-C2

// Fetch each bol order
Function SR0RS-SR1120-N2()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "SR1120" ("N2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "SR1120N2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCAN ORDERS IN BOL"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-SR1120-N2

// Check BOL mult occur in SR1120
Function SR0RS-SR1120-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row.*/
   /* ------------------------------------------------------------*/

  try
    call "SR1120" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "SR1120S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "CHECK FOR MULT BOL"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end SR0RS-SR1120-S

// Cursor thru bol orders
Function SR0RS-SR1120-S2()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  try
    call "SR1120" ("S2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "SR1120S2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN ORDERS IN BOL"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/


end // end SR0RS-SR1120-S2

// Add the order to temp storage
Function SR0RS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next order to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/
  /* MOVE SR0RW00.XXX-TEMP-STG-LNTH TO SR0RW02.XXX-TEMP-STG-LNTH;*/
  SR0RW02.XXX-TEMP-STG-LNTH = 304;

  try
    call "TA0050" (SR0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SR0RW02 empty; /* Display storage*/

    SR0RW02.XXX-TEMP-STG-LNTH = SR0RW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

    SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND] = TA5REC.TA5TSQIX; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0RS-TA0050-A

// Purge any temporary storage
Function SR0RS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  SR0RW01.XXX-HI-PAGE-NBR[SR0RW-FR-TO-BOL-IND] = 0;
                                   /* Highest page number*/
  TA5REC.TA5TSQIX = 0; /* Index to temp storage*/

  set SR0RW02 empty; /* M002 display storage*/

  SR0RW02.XXX-TEMP-STG-LNTH = SR0RW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SR0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0RS-TA0050-P

// Read orders from temp storage
Function SR0RS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read next page of orders from temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/
  /* MOVE SR0RW00.XXX-TEMP-STG-LNTH TO SR0RW02.XXX-TEMP-STG-LNTH;*/
  SR0RW02.XXX-TEMP-STG-LNTH = 304;

  try
    call "TA0050" (SR0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0RS-TA0050-R

// Read orders from temp storage
Function SR0RS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Read next page of orders from temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/
  /* MOVE SR0RW00.XXX-TEMP-STG-LNTH TO SR0RW02.XXX-TEMP-STG-LNTH;*/
  SR0RW02.XXX-TEMP-STG-LNTH = 304;

  try
    call "TA0050" (SR0RW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0RS-TA0050-U

//*** RECORD=SR0RW00 ****
// ***********************************************************
// *  This is the working storage for SR0R misc data.        *
// *                                                         *
// ***********************************************************
// ***********************
Record SR0RW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 SR0RW-UPDATE-FL SR0RW-UPDATE-FL ; 
  10 SR0RW-FR-TO-BOL-IND SR0RW-FR-TO-BOL-IND ; 
  10 SR0RW-GOOD-ORDER-FL SR0RW-GOOD-ORDER-FL ; 
  10 SR0RW-ADDR-CHANGED-FL SR0RW-ADDR-CHANGED-FL ; 
  10 SR0RW-SPLIT-REQUESTED-FL SR0RW-SPLIT-REQUESTED-FL ; 
  10 SR0RW-CREATE-TO-BOL-FL SR0RW-CREATE-TO-BOL-FL ; 
  10 SR0RW-REDISPLAY-UPD-BOL-FL SR0RW-REDISPLAY-UPD-BOL-FL ; 
  10 SR0RW-BOL-MATCHES-FL SR0RW-BOL-MATCHES-FL ; 
  10 SR0RW-END-ORDER-TEST-FL SR0RW-END-ORDER-TEST-FL ; 
  10 SR0RW-LEAD-SO-IN-MULT-SCHED-FL SR0RW-LEAD-SO-IN-MULT-SCHED-FL ; 
  10 SR0RW-FMT-BOL-NBR SR0RW-FMT-BOL-NBR ; 
    15 SR0RW-FMT-BOL-ORDER-NBR SR0RW-FMT-BOL-ORDER-NBR ; 
    15 SR0RW-FMT-BOL-NIKE-ORD-ID SR0RW-FMT-BOL-NIKE-ORD-ID ; 
  10 SR0RW-LEAD-SO SR0RW-LEAD-SO ; 
  10 SR0RW-ORDER-NBR SR0RW-ORDER-NBR ; 
    15 SR0RW-OP1CUOID-UNPACK SR0RW-OP1CUOID-UNPACK ; 
      20 * num(8) ; 
      20 OP1PARTN OP1PARTN ; 
    15 SR0RW-OP1NORID-UNPACK SR0RW-OP1NORID-UNPACK ; 
  10 SR0RW-PK1PKSCH-UNPACK SR0RW-PK1PKSCH-UNPACK ; 
    15 SR0RW-PK1PKSCH-UNPACK-4 SR0RW-PK1PKSCH-UNPACK-4 ; 
    15 * num(5) ; 
  10 SR0RW-PK1PKSCH-COMP-4 SR0RW-PK1PKSCH-COMP-4 ; 
  10 SR0RW-SR1SHPDT-MMDDYY SR0RW-SR1SHPDT-MMDDYY ; 
    15 SR0RW-SR1SHPDT-MMDDYY-MM SR0RW-SR1SHPDT-MMDDYY-MM ; 
    15 SR0RW-SR1SHPDT-MMDDYY-DD SR0RW-SR1SHPDT-MMDDYY-DD ; 
    15 SR0RW-SR1SHPDT-MMDDYY-YY SR0RW-SR1SHPDT-MMDDYY-YY ; 
  10 SR0RW-SR1SHPDT-CCYYMMDD SR0RW-SR1SHPDT-CCYYMMDD ; 
    15 SR0RW-SR1SHPDT-CCYYMMDD-CC SR0RW-SR1SHPDT-CCYYMMDD-CC ; 
    15 SR0RW-SR1SHPDT-YYMMDD SR0RW-SR1SHPDT-YYMMDD ; 
      20 SR0RW-SR1SHPDT-YYMMDD-YY SR0RW-SR1SHPDT-YYMMDD-YY ; 
      20 SR0RW-SR1SHPDT-YYMMDD-MM SR0RW-SR1SHPDT-YYMMDD-MM ; 
      20 SR0RW-SR1SHPDT-YYMMDD-DD SR0RW-SR1SHPDT-YYMMDD-DD ; 
  10 SR0RW-SR1SHPDT-TA2JULNN SR0RW-SR1SHPDT-TA2JULNN ; 
  10 SR0RW-TA2JULNN SR0RW-TA2JULNN ; 
  10 SR0RW-SR1SHPDT-AGE SR0RW-SR1SHPDT-AGE ; 
  10 SR0RW-CCYYMMDD SR0RW-CCYYMMDD ; 
    15 SR0RW-CCYYMMDD-CC SR0RW-CCYYMMDD-CC ; 
    15 SR0RW-YYMMDD SR0RW-YYMMDD ; 
      20 SR0RW-YYMMDD-YY SR0RW-YYMMDD-YY ; 
      20 * num(4) ; 
  10 XWHCD XWHCD ; 
  10 SR0RW-UNIT-OF-MEASURE SR0RW-UNIT-OF-MEASURE ; 
  10 SR0RW-OPTION SR0RW-OPTION ; 
  10 PK1BLLAD PK1BLLAD ; 
  10 SR2BLLSU SR2BLLSU ; 
  10 PK1WT PK1WT ; 
  10 SR0RW-MESSAGE SR0RW-MESSAGE ; 
    15 SR0RW-REASON SR0RW-REASON ; 
    15 TF1CARCD TF1CARCD ; 
    15 SR0RW-SLASH SR0RW-SLASH ; 
    15 TF3DSTCD TF3DSTCD ; 
  10 XXXZIP XXXZIP ; 
    15 SR0RW-XXXZIP-5 SR0RW-XXXZIP-5 ; 
      20 SR0RW-XXXZIP-4 SR0RW-XXXZIP-4 ; 
        25 SR0RW-XXXZIP-3 SR0RW-XXXZIP-3 ; 
        25 * char(1) ; 
      20 * char(1) ; 
    15 * char(5) ; 
  10 SR0RW-TOTAL-ACCUM1 SR0RW-TOTAL-ACCUM1 ; 
    15 SR0RW-PK1NBCTN-ACCUM1 SR0RW-PK1NBCTN-ACCUM1 ; 
    15 SR0RW-SR2QTYSH-ACCUM1 SR0RW-SR2QTYSH-ACCUM1 ; 
    15 SR0RW-PK1WT-ACCUM1 SR0RW-PK1WT-ACCUM1 ; 
    15 SR0RW-SR2SHPCG-ACCUM1 SR0RW-SR2SHPCG-ACCUM1 ; 
  10 * char(1) ; 
  10 SR0RW-TOTAL-ACCUM2 SR0RW-TOTAL-ACCUM2 ; 
    15 SR0RW-PK1NBCTN-ACCUM2 SR0RW-PK1NBCTN-ACCUM2 ; 
    15 SR0RW-SR2QTYSH-ACCUM2 SR0RW-SR2QTYSH-ACCUM2 ; 
    15 SR0RW-PK1WT-ACCUM2 SR0RW-PK1WT-ACCUM2 ; 
    15 SR0RW-SR2SHPCG-ACCUM2 SR0RW-SR2SHPCG-ACCUM2 ; 
  10 SR0RW-SHPDT-CHECKA SR0RW-SHPDT-CHECKA ; 
    15 SR0RW-SHPDT-CHECKA-CCYY1 SR0RW-SHPDT-CHECKA-CCYY1 ; 
      20 SR0RW-SHPDT-CHECKA-CC1 SR0RW-SHPDT-CHECKA-CC1 ; 
      20 SR0RW-SHPDT-CHECKA-YY1 SR0RW-SHPDT-CHECKA-YY1 ; 
    15 SR0RW-SHPDT-CHECKA-CCYY2 SR0RW-SHPDT-CHECKA-CCYY2 ; 
      20 SR0RW-SHPDT-CHECKA-CC2 SR0RW-SHPDT-CHECKA-CC2 ; 
      20 SR0RW-SHPDT-CHECKA-YY2 SR0RW-SHPDT-CHECKA-YY2 ; 
end // end SR0RW00

//*** RECORD=SR0RW01 ****
// ***********************************************************
// *  This is the working storage for SR0R Bill of Lading    *
// *  screen (SR0RM100) for FROM and TO BOLs.                *
// ***********************************************************
// ***********************
Record SR0RW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SR0RW-UNIT-OF-MEASURE SR0RW-UNIT-OF-MEASURE ; 
  10 SR0RW-OPTION SR0RW-OPTION ; 
  10 SR0RW-ALL-ORDERS-FL SR0RW-ALL-ORDERS-FL ; 
  10 SR0RW-BOL-DATA SR0RW-BOL-DATA [2] ; 
    15 SR0RW-ORDER-CNT SR0RW-ORDER-CNT ; 
    15 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
    15 PK1BLLAD PK1BLLAD ; 
    15 SR2BLLSU SR2BLLSU ; 
    15 PK1PKSCH PK1PKSCH ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 SR0RW-SR1PKDT-CCYYMMDD SR0RW-SR1PKDT-CCYYMMDD ; 
      20 SR0RW-SR1PKDT-CC SR0RW-SR1PKDT-CC ; 
      20 SR0RW-SR1PKDT-YYMMDD SR0RW-SR1PKDT-YYMMDD ; 
        25 SR0RW-SR1PKDT-YY SR0RW-SR1PKDT-YY ; 
        25 SR0RW-SR1PKDT-MMDD SR0RW-SR1PKDT-MMDD ; 
    15 TF1CARCD TF1CARCD ; 
    15 SR0RW-CARRIER-NAME SR0RW-CARRIER-NAME ; 
    15 PK4CARSP PK4CARSP ; 
    15 TF2DSTCD TF2DSTCD ; 
    15 SR0RW-DEST-DESC SR0RW-DEST-DESC ; 
    15 TF2PRONO TF2PRONO ; 
    15 SR2SHPCD SR2SHPCD ; 
    15 PK1NBCTN PK1NBCTN ; 
    15 SR2QTYSH SR2QTYSH ; 
    15 PK1WT PK1WT ; 
    15 SR2SHPCG SR2SHPCG ; 
    15 SR0RW-SR1SHPDT-CCYYMMDD SR0RW-SR1SHPDT-CCYYMMDD ; 
      20 SR0RW-SR1SHPDT-CCYYMMDD-CC SR0RW-SR1SHPDT-CCYYMMDD-CC ; 
      20 SR0RW-SR1SHPDT-CCYYMMDD-YY SR0RW-SR1SHPDT-CCYYMMDD-YY ; 
      20 SR0RW-SR1SHPDT-CCYYMMDD-MM SR0RW-SR1SHPDT-CCYYMMDD-MM ; 
      20 SR0RW-SR1SHPDT-CCYYMMDD-DD SR0RW-SR1SHPDT-CCYYMMDD-DD ; 
    15 SR0RW-LEAD-SO-COMMAND SR0RW-LEAD-SO-COMMAND ; 
    15 XBCCD XBCCD ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 KUVDCCID KUVDCCID ; 
    15 KUVDCSID KUVDCSID ; 
    15 SR2TNBCT SR2TNBCT ; 
    15 SR0RW-SR2QTYSH-BOL SR0RW-SR2QTYSH-BOL ; 
    15 SR0RW-PK1WT-BOL SR0RW-PK1WT-BOL ; 
    15 SR0RW-SR2SHPCG-BOL SR0RW-SR2SHPCG-BOL ; 
    15 OP5ALTNM OP5ALTNM ; 
    15 XXX-ADDR1 XXX-ADDR1 ; 
    15 XXX-ADDR2 XXX-ADDR2 ; 
    15 XXX-ADDR3 XXX-ADDR3 ; 
    15 XXX-ADDR4 XXX-ADDR4 ; 
    15 XXX-ADDR5 XXX-ADDR5 ; 
    15 XXX-ADDR6 XXX-ADDR6 ; 
    15 XXXCITY XXXCITY ; 
    15 XSTCD XSTCD ; 
    15 XXXZIP XXXZIP ; 
    15 XCTCD XCTCD ; 
    15 XGPCD1 XGPCD1 ; 
    15 SR0RW-XGPABRV1 SR0RW-XGPABRV1 ; 
    15 XGPCD2 XGPCD2 ; 
    15 SR0RW-XGPABRV2 SR0RW-XGPABRV2 ; 
    15 XGPCD3 XGPCD3 ; 
    15 SR0RW-XGPABRV3 SR0RW-XGPABRV3 ; 
    15 XGPCD4 XGPCD4 ; 
    15 SR0RW-XGPABRV4 SR0RW-XGPABRV4 ; 
end // end SR0RW01

//*** RECORD=SR0RW02 ****
// ***********************************************************
// *  This is the working storage for SR0R Order List screen *
// *  (SR0RM200) for FROM BOL.                               *
// ***********************************************************
// ***********************
Record SR0RW02 type basicRecord
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 SR0RW-ORDER-DATA SR0RW-ORDER-DATA [10] ; 
    15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 PK1PKSCH PK1PKSCH ; 
    15 PK1NBCTN PK1NBCTN ; 
    15 SR2QTYSH SR2QTYSH ; 
    15 PK1WT PK1WT ; 
    15 SR2SHPCG SR2SHPCG ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end SR0RW02

// Address changed flag
DataItem SR0RW-ADDR-CHANGED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-ALL-ORDERS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BOL data
DataItem SR0RW-BOL-DATA char(529)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-BOL-MATCHES-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-nm
DataItem SR0RW-CARRIER-NAME char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-CCYYMMDD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-CREATE-TO-BOL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination description
DataItem SR0RW-DEST-DESC char(22)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-END-ORDER-TEST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-FMT-BOL-NBR num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-FMT-BOL-NIKE-ORD-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-FMT-BOL-ORDER-NBR num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator if FROM or TO
DataItem SR0RW-FR-TO-BOL-IND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-GOOD-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lead so
DataItem SR0RW-LEAD-SO num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Command to update lead so data
DataItem SR0RW-LEAD-SO-COMMAND char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lead so exists in mult sched
DataItem SR0RW-LEAD-SO-IN-MULT-SCHED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-MESSAGE char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem SR0RW-OP1CUOID-UNPACK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem SR0RW-OP1NORID-UNPACK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Option requested
DataItem SR0RW-OPTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Actual nbr of saved orders
DataItem SR0RW-ORDER-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order data
DataItem SR0RW-ORDER-DATA char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order number
DataItem SR0RW-ORDER-NBR num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-weight
DataItem SR0RW-PK1NBCTN-ACCUM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-weight
DataItem SR0RW-PK1NBCTN-ACCUM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-PK1PKSCH-COMP-4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-PK1PKSCH-UNPACK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-PK1PKSCH-UNPACK-4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-PK1WT-ACCUM1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-PK1WT-ACCUM2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL weight
DataItem SR0RW-PK1WT-BOL decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-REASON char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-REDISPLAY-UPD-BOL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-CC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-CC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-CCYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-CCYY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-YY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SHPDT-CHECKA-YY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SLASH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-SPLIT-REQUESTED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-sched-dt
DataItem SR0RW-SR1PKDT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-sched-dt
DataItem SR0RW-SR1PKDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-SR1PKDT-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1PKDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1PKDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-AGE num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-CCYYMMDD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-CCYYMMDD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-CCYYMMDD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-CCYYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-MMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-MMDDYY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-MMDDYY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-MMDDYY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-TA2JULNN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-YYMMDD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-YYMMDD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR1SHPDT-YYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR2QTYSH-ACCUM1 decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR2QTYSH-ACCUM2 decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL qty shipped
DataItem SR0RW-SR2QTYSH-BOL decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR2SHPCG-ACCUM1 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-SR2SHPCG-ACCUM2 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL ship charges
DataItem SR0RW-SR2SHPCG-BOL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-TA2JULNN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-TOTAL-ACCUM1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-TOTAL-ACCUM2 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-UNIT-OF-MEASURE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-UPDATE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0RW-XGPABRV1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0RW-XGPABRV2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0RW-XGPABRV3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0RW-XGPABRV4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-XXXZIP-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-XXXZIP-4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-XXXZIP-5 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0RW-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0RW-YYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

