package sr0t;
import al.common.*;
import az.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
import sr0e.*;
//*** PROGRAM=SR0T ****
// This application allows a user to inquire, modify or
// consolidate bills of lading.  There are two screens that
// may be displayed.
// 
// The first screen is used to enter the type of function the
// users wants to perform.  In return, it displays bill of
// lading information.
// 
// The second screen displays the orders in a bill of lading.
// It allows browsing and selection of orders.  This program
// transfers to SR0C after selection of orders for an inquire
// or a modify option.  As for consolidate option, this screen
// is display automatically only for partial consolidation.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/14/94  HKEMPE  New application.
// SR#0     11/02/95  HKEMPE  Changed Order List screen to show
//                            by schedule instead of by order.
// sr#0     12/18/95  jlucas  put century in shp dte sr0r-42100
// SR#0     11/19/97  HKEMPE  Quick fix on ship dt edit > 365
//                            in SR0R-14300. Commented out for
//                            now.
// SR#0     01/18/96  HCOOK   Changed cursor control to the
//                            BOL NO field after the OPTION and
//                            BOL NO field are populated in
//                            SR0R-12100.
//                            Changed SHIP DATE to a not
//                            required field in SR0R-14300.
//                            Changed the BOL NO field to left
//                            justified in the SR0RM001 field
//                            edits.
// SR#0     11/19/97  HCOOK   Changed map TOTAL BOL fields to
//                            show the totals for all orders of
//                            both BOLs before the operator
//                            presses ENTER for the
//                            consolidation process. Adds to
//                            both sets of accumulators are in
//                            SR0R-30000, new accumulators are
//                            in SR0RW00, clearing of accums
//                            are in SR0R-30000 and SR0R-25000,
//                            adds to single set of accums are
//                            in SR0R-25000, and the addition
//                            of the accumulators for map
//                            display are in SR0R-12100.
// SR#0    05/01/96  PJAMES   Quick fix on customer name field
//                            packing list table in SR0R-42200.
//         02/18/97  pcole    move blanks to prono
//         11/19/97  kheina   when splitting bol for whse 51,
//                            use lead so number for selected
//                            orders for format new bol number.
// UCC128/ 10/31/97  bharri   Split and consolidate BOL's by
// ASN                        moving part orders (i.e., cartons
//                            from one BOL to another.  This
//                            function will use the "AZHDR",
//                            "AZORD", "AZCTN", "AZCIT", and
//                            the "AZCSZ" table.
// SR#0    12/18/97  SREDDY   Making some modifications...
// ASN               TDAUGH   Made it work, sort of
//                   BHARRI
// asn     05/19/98  tdaugh   re-engineered the process of
//                            assigning pack list numbers
// canay2K 08/10/98  dkesle   if whse = 42, add step to JCL to
//                            FTP movers file
// canay2K 08/27/98  dkesle   if whse = 07, add steps to JCL
//                            to FTP movers file and start RSH
//                            & send old movers file to class Z
// canay2K 09/17/98  dkesle   if whse = 04, add steps to JCL
//                            to FTP movers file and start RSH
//                            & send old movers file to class Z
// RETROFT 08/12/98  marbuc   Inhibit DCMS orders so the orders
//                            cannot be consolidated and split.
// canay2k 10/21/98  dkesle   chg ftp target for whse 42
// canay2K 10/23/98  dkesle   if whse = 02, add steps to JCL
//                            to FTP movers file and start RSH
//                            & send old movers file to class Z
// retroft 10/28/98  marbuc   allow ALT NAME to change for DCMS
//                            in SR0T-14000
// retroft 10/30/98  esmit2   for onetime shipments use TSRAD00
//                            ALT NAME for DCMS shipments ONLY
//                            (SR0T-12100)
// bugfix  11/24/98  esmit2   Fix pre-existing bug in 41000
//                            where io5770s5 cursor was not
//                            being closed on a 100 on the
//                            first fetch.  DCMS orders are not
//                            loaded into GOAL packlist tables.
// bugfix  11/25/98  esmit2   Fix pre-existing bug in 30200
//                            to prevent loading blank cust nm
//                            when data not on packlist header.
// retroft 11/30/98  esmit2   Allow change of carrier for DCMS.
// movers  05/18/99  snaidu   Commented the FTP proc step
//                            RMT230 for whse 42(canada) in
//                            procs  SR0T-15100 and 85700.
//                            look for comments -
//                            /* Deactivate MOVERS for Canada
// dlvrusa 03/20/01  rnunna   SR0T is being modified to include
//                            processes in determining the ASN
//                            release.
//                            SR0T-14000, SR0T-14400, SR00ENU
//                            modified.
//                            1) ASN/BOL data check and balance
//                            process.
//                            2) Verify if the OTP header has
//                            its GOAL SO number populated.
// Kintana 12/04/01  aphil2   Modified SR0T-15100 to correctly
// 34930                      assign JCL.
// TT14977 12/20/01  svenka   Modified SR0T-13000 to correct
//                            the applic SR0T from releasing
//                            the asn when carrier is 2000
//                            when the whse is 07.
// TT16454 02/08/01  svenka   Modified SR0T-12100 to correct
//                            the bug in the application where
//                            one error msg overrides another
//                            and the warning message "customer
//                            numbers are same" is now disp
//                            during consolidation of 2 bol's
// 
// Kintana  10/07/03  bmahal  Modified for VICS BOL.
// 60938
// 
// Kintana  04/26/03  rathal  Modified SR0T to include new NIL
// 58266                      processes while releasing the
//  ASN. In                                SR0T-14000 &
//  SR0T-14400 the statements
//                                that verify GOAL SO number
//  existence in OTP
//                                table for NIL SAP delivery
//  has been commented.
// 
// Kintana  11/18/03  bmahal bug in consolidation fixed in
//  VICS BOL format.
// 60938
// KIN77296  01/30/04 rathal changed the server name in
//                           SR0T-15100, SR0T-15200,
//  SR0T-85700 and SR0T-85800
//       from SCARBORO-SVR-08 to SCARBORO-SVR-34 for
//                           Canda(42) whse scan code
//                           server change.
// *********************
Program SR0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZFREC AZFREC; // record
  AZTOTREC AZTOTREC; // record
  AZWREC AZWREC; // record
  COMMAREA COMMAREA ; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  PK6REC PK6REC; // record
  PK7REC PK7REC; // record
  PKDREC PKDREC; // record
  PWHREC PWHREC; // record
  PWOREC PWOREC; // record
  PWPREC PWPREC; // record
  PWQREC PWQREC; // record
  SQLCA SQLCA; // record
  SR0TW00 SR0TW00; // record
  SR0TW01 SR0TW01; // record
  SR0TW02 SR0TW02; // record
  SR0TW04 SR0TW04; // record
  SR0TW10 SR0TW10; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR4REC SR4REC; // record
  SREREC SREREC; // record
  SRWREC SRWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  TF3REC TF3REC; // record
  TF4REC TF4REC; // record
  TF5REC TF5REC; // record
  TF7REC TF7REC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCIT02 VAZCIT02; // record
  VAZCSZ01 VAZCSZ01; // record
  VAZCSZ02 VAZCSZ02; // record
  VAZCTL01 VAZCTL01; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record
  VAZHDR02 VAZHDR02; // record
  VAZORD01 VAZORD01; // record
  VSPBOL01 VSPBOL01; // record
  VSPLSZ02 VSPLSZ02; // record
  VSRORD03 VSRORD03; // record
  WAZ1000 WAZ1000; // record
  XP0FW01 XP0FW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SR0TTP1 {deleteAfterUse = yes}; // table
  use SR0TTP2 {deleteAfterUse = yes}; // table
  use SR0TTT1 {deleteAfterUse = yes}; // table
  use SR0TTT2 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use SR0TM.SR0TM001,  // forms
      SR0TM.SR0TM002, 
      SR0TM.SR0TM800, 
      SR0TM.TA0PM001, 
      SR0TM.XMSRM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSR-00000: XPSR-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SR0TM001 initial; /* Main Map I/O*/
    set SR0TM002 initial; /* Order Level Map I/O*/
    set SR0TM800 initial; /* Carton Level Map I/O*/
    set SR0TW00 empty; /* Working storage*/
    set SR0TW01 empty; /* Main display storage*/
    set SR0TW02 empty; /* FROM/TO BOL Order TSQ area*/
    set SR0TW04 empty; /* BOL/Carton TSQ area*/
    set SR0TW10 empty; /* JCL Table work area*/
    set AZFREC empty; /* AZ I/O Task work area*/
    set AZTOTREC empty; /* Sum AZORD/AZCTN work area*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage work area*/
    set TA6REC empty; /* Internal Reader work area*/
    set VAZCTL01 empty; /* AZctl DB2 I/O area*/
    set VAZHDR01 empty; /* AZHDR DB2 I/O area*/
    set VAZORD01 empty; /* AZORD DB2 I/O area*/
    set VAZCIT01 empty; /* AZCIT DB2 I/O area*/
    set VAZCSZ01 empty; /* AZCSZ DB2 I/O area*/
    set VAZCTN01 empty; /* AZCTN DB2 I/O area*/
    set WAZ1000 empty; /* Subroutine AZ1000 pass area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    SR0TW00.XXX-MAP-DSP-CD = "1"; /* Display map 1*/
    SR0TW00.SR0TW-RELEASE-COND-CD = " ";
    SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL = "N";
    SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL = "N";

    if (COMMAREA.CAFROMAP == "AZ0B") /* If from AZ0B, setup SRWREC*/
      SRWREC.CAUSERA = COMMAREA.CAUSERA;
    end

    if ((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
     || COMMAREA.CAFROMAP == "SR0Q"  /* or from SR0Q*/
     || COMMAREA.CAFROMAP == "AZ0B") /* or from AZ0B*/
     && SRWREC.SRWRETFL == "Y")      /* and returning to SR0T*/

      if (SRWREC.SRWMISCF[3] == "Y")
        SR0TW00.XXX-MAP-DSP-CD = "1"; /* Get data for temp stor*/
        SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Get data for map*/
        SR0TW00.XXX-CURR-PAGE-NBR = 1; /* Temp store page*/
        TA5REC.TA5APPID = "STF2"; /* Temp store ID*/
        SR0TW00.XXX-INX-LMT-NBR = 10; /* Temp store page limit*/
        SR0TW00.SR0TW-M800-INX-LMT-NBR = 13; /* Temp store page limit*/

        SR0TW01.SR0TW-ORDER-CNT[1] = SRWREC.PK1BLLAD[2];
                                /* Order count from SR0C*/
        SR0TW01.XXX-HI-PAGE-NBR[1] = SRWREC.SR2BLLSU[2];
                                /* Hi page number from SR0C*/
      end

      SR0TW01.XWHCD = SRWREC.SRWXWHCD; /* Warehouse code*/
      SR0TW01.SR0TW-OPTION = SRWREC.SRWRETOP; /* Option*/

      SR0TW01.PK1BLLAD[1] = SRWREC.PK1BLLAD[1]; /* FROM BOL*/
      SR0TW01.SR2BLLSU[1] = SRWREC.SR2BLLSU[1]; /**/

      if (COMMAREA.CAFROMAP == "SR0Q" /* If from SR0Q*/
       && SR0TW01.SR0TW-OPTION == "C") /* and printed two bols*/
        SR0TW01.PK1BLLAD[2] = SRWREC.PK1BLLAD[2]; /* TO BOL*/
        SR0TW01.SR2BLLSU[2] = SRWREC.SR2BLLSU[2]; /**/
      end

      SR0TW01.SR0TW-ALL-ORDERS-FL = SRWREC.SRWMISCF[1];
                                     /* All orders flag*/
      SR0TW01.SR0TW-UNIT-OF-MEASURE = SRWREC.SRWMISCF[2];
                                     /* Unit of measure*/
      if (SRWREC.SRWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.SRWMSGNO);
      end /* Message from SR0C or SR0Q*/
      SRWREC.XXXERRID = COMMAREA.CAFROMAP; /* Message location*/

      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    else

      SR0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/

    end

    SR0TW00.SR0TW-FR-TO-BOL-IND = 1; /* Index to FROM or TO BOL*/

    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0T-00000; /* Converse the main process*/

    SR0T-00000: SR0T-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0T-00000; /* Converse the main process*/

  end // end main
end // end SR0T

// Determine which map to display
Function SR0T-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    SR0T-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end

  if (SR0TW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    SR0TW00.XXX-LN-SEL-IND = "N"; /* An order not selected*/

    SR0T-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end

  if (SR0TW00.XXX-MAP-DSP-CD == "3") /* Map 3 was requested*/

    SR0TW00.SR0TW-M800-SEL-FL = "N"; /* A Carton not selected*/

    SR0T-80000(); /* Display map 3*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = "00000"; /* Message location*/
  SRWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = SR0TW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "SR0A"; /* System Menu*/

  SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
  SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
  SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

  XSSRS-EXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

end // end SR0T-00000

// Main process to display MAP 1
Function SR0T-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1 - BOL data.*/
   /* Processing always returns to the top of this process and*/
   /* fall through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0T-11000(); /* Obtain the data to display*/

  SR0T-12000(); /* Format and display the map*/

  SR0T-13000(); /* Check attention identifier*/

  SR0T-14000(); /* Verify the entered data*/

  SR0T-15000(); /* Process valid input request*/

end // end SR0T-10000

// Obtain the data to display
Function SR0T-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-RQT-DATA-FL != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found and not from SR0C/SR0Q, return to the*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If an error was found*/

    if (((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
     || COMMAREA.CAFROMAP == "SR0Q"   /* or from SR0Q*/
     || COMMAREA.CAFROMAP == "AZ0B")  /* or from AZ0B*/
     && SRWREC.SRWRETFL == "Y")       /* and returning to SR0T*/
     || SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL == "Y")
                                   /* or redisplaying upd BOL*/
      /* next sentence*/
    else

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Check multiple occurrence only when retrieving the first*/
   /* time.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0C" /* If from SR0C*/
   || COMMAREA.CAFROMAP == "SR0Q"  /* or from SR0Q*/
   || COMMAREA.CAFROMAP == "AZ0B") /* or from AZ0B*/
   && SRWREC.SRWRETFL == "Y")      /* and returning to SR0t*/

    COMMAREA.CAFROMAP = "SR0T"; /* FROM application*/
    SRWREC.SRWRETFL = " "; /* Return to SR0T flag*/
    SR0T-11150(); /* Validate BOL status*/

  else

    if (SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL == "Y")
      /* If redisplaying updated BOL*/
      /* next sentence*/
    else

      SR0T-11050(); /* Build sub from entered data*/

      SR0T-11100(); /* Check for multiple subs*/

    end

    SR0T-11150(); /* Validate BOL status*/

  /* -----------------------------------------------------------------------*/
  /* The below test for error messages is for errors where we want to*/
  /* go ahead and display data*/
  /* -----------------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0
     && converseVar.validationMsgNum != 219
     && converseVar.validationMsgNum != 220
     && converseVar.validationMsgNum != 248
     && converseVar.validationMsgNum != 249)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Retrieve BOL data*/
   /* ------------------------------------------------------------*/

  SR0T-30000(); /* Retrieve BOL data*/

   /* ------------------------------------------------------------*/
   /* Check recommended carrier when redisplaying updated BOL.*/
   /* New BOL message must override all other messages per Mark N.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL == "Y" && 
  SR0TW00.SR0TW-MSG == " ") /* New BOL message from split*/

    SR0T-11200(); /* Check recommended carrier*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  SR0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL = "N";

end // end SR0T-11000

// Build Sub Number
Function SR0T-11050()

  if (SR0TW00.SR0TW-WORK-CTR1 < 4)

    SR0TW01.XWHCD = SR0TM001.XWHCD;
    SR0TW01.PK1BLLAD[1] = SR0TM001.PK1BLLAD[1];
    SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
    SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;

    SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[1];

    SR0TW00.SR0TW-PK-BOL-SUB-NBR-NUM = SR0TM001.SR2BLLSU[1];

    SR0TW00.SR0TW-WORK-IDX = 1;

    while (SR0TW00.SR0TW-WORK-IDX <= 4)

      if (
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)

        SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT1[SR0TW-WORK-IDX] = 0;
      else

        SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT1[SR0TW-WORK-IDX] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-NBYT[SR0TW-WORK-IDX];

      end

      SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;

    end

    SR0TW01.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;

  end

  if (SR0TM001.SR0TM-OPTION == "C")

    if (SR0TW00.SR0TW-WORK-CTR2 < 4)

      SR0TW01.XWHCD = SR0TM001.XWHCD;
      SR0TW01.PK1BLLAD[2] = SR0TM001.PK1BLLAD[2];
      SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
      SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;

      SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[2];

      SR0TW00.SR0TW-PK-BOL-SUB-NBR-NUM = SR0TM001.SR2BLLSU[2];

      SR0TW00.SR0TW-WORK-IDX = 1;

      while (SR0TW00.SR0TW-WORK-IDX <= 4)

        if (
        SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)

          SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT2[SR0TW-WORK-IDX] = 0;

        else

          SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT2[SR0TW-WORK-IDX] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-NBYT[SR0TW-WORK-IDX];

        end

        SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;

      end

      SR0TW01.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;

    end

  end

end // end SR0T-11050

// Check multiple occurrence
Function SR0T-11100()
   /* ------------------------------------------------------------*/
   /* Check FROM BOL multiple occurrence*/
   /* ------------------------------------------------------------*/

  set SREREC empty;

  if (SR0TW00.SR0TW-WORK-CTR1 >= 4
  )
    set VAZCTN01 empty;

    SR0TW01.XWHCD = SR0TM001.XWHCD;
    VAZCTN01.XWH-WHSE-CD = SR0TM001.XWHCD;

    SR0TW01.PK1BLLAD[1] = SR0TM001.PK1BLLAD[1];
    VAZCTN01.PK-BILL-OF-LADING = SR0TM001.PK1BLLAD[1];

    SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
    SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;

    SR0TS-AZ1120-S(); /* Select Distinct dship.vazctn01*/

    if (SQLCA.VAGen_SQLCODE == +0) /* If one found*/

      SR0TW01.SR2BLLSU[1] = VAZCTN01.PK-BOL-SUB-NBR; /* FROM BOL sub*/
      SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL = "N";

    end

    if (SQLCA.VAGen_SQLCODE == +100) /* If none found*/

      if (SR0TM001.SR0TM-OPTION == "I" /* If Inquire*/
       || SR0TM001.SR0TM-OPTION == "M") /* or Modify option*/

        set SR0TM001 empty;

        SR0TM001.XWHCD = SR0TW01.XWHCD;
        SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;
        SR0TM001.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];
        SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;

      end

      SRWREC.XXXERRID = "11100"; /* Message location*/
      converseLib.validationFailed(210); /* FROM BOL not in database*/
      set SR0TM001.PK1BLLAD[1] cursor, bold;
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -811) /* If multiple occurrence*/

      SREREC.XWHCD = SR0TM001.XWHCD;
      SREREC.PK1BLLAD = SR0TM001.PK1BLLAD[1];
      SREREC.SRE-FR-TO-BOL-IND = "FR";

      XPSR-200(); /* Popup window processing*/

      if (converseVar.eventKey is pa2) /* Popup window cancelled*/
        converseLib.clearScreen();
         /* Reset screen*/
        exit stack;
      end

      if (SR0TM001.SR0TM-OPTION == "C") /* If consolidate option*/
        /* next sentence*/
      else

        converseLib.clearScreen();
         /* Reset screen*/

      end

      SR0TW01.SR2BLLSU[1] = SREREC.SRE-SELECTED-SUB-NBR;
      SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL = "N";

    end

  end

   /* ------------------------------------------------------------*/
   /* Check TO BOL multiple occurence when option is to consolidate.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-CREATE-TO-BOL-FL = "N"; /* Create TO BOL flag*/

  if (SR0TM001.SR0TM-OPTION == "C") /* If option is to consolidate*/

    if (SR0TW00.SR0TW-WORK-CTR2 >= 4
    )
      SR0TW01.PK1BLLAD[2] = SR0TM001.PK1BLLAD[2];
                                  /* TO bill of lading*/
      SR0TW01.SR0TW-ALL-ORDERS-FL = SR0TM001.SR0TM-ALL-ORDERS-FL; /* All orders flag*/

      set VAZCTN01 empty;

      VAZCTN01.XWH-WHSE-CD = SR0TM001.XWHCD;
      VAZCTN01.PK-BILL-OF-LADING = SR0TM001.PK1BLLAD[2];

      SR0TS-AZ1120-S(); /* Select Distinct dship.vazctn01*/

      if (SQLCA.VAGen_SQLCODE == +0) /* If found*/

        SR0TW01.SR2BLLSU[2] = VAZCTN01.PK-BOL-SUB-NBR;
        SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL = "N";

        if (SR0TM001.PK1BLLAD[1] == SR0TM001.PK1BLLAD[2]
         && SR0TW01.SR2BLLSU[1] == SR0TW01.SR2BLLSU[2])
                                  /* If FROM and TO BOL the same*/
          SRWREC.XXXERRID = "11100"; /* Message location*/
          converseLib.validationFailed(175); /* FROM and TO BOL the same*/
          set SR0TM001.PK1BLLAD[1] cursor, bold;
          set SR0TM001.PK1BLLAD[2] bold;
        end

      end

      if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/

        SR0TW00.SR0TW-CREATE-TO-BOL-FL = "Y";
        SR0TW01.SR2BLLSU[2] = 0; /* TO BOL sub*/

      end

      if (SQLCA.VAGen_SQLCODE == -811) /* If multiple occurrence*/

        set SREREC empty;

        SREREC.XWHCD = SR0TM001.XWHCD;
        SREREC.PK1BLLAD = SR0TM001.PK1BLLAD[2];
        SREREC.SRE-FR-TO-BOL-IND = "TO";

        XPSR-200(); /* Popup window processing*/

        converseLib.clearScreen();

        if (converseVar.eventKey is pa2)
          exit stack;
        end

        SR0TW01.SR2BLLSU[2] = SREREC.SRE-SELECTED-SUB-NBR;
        SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL = "N";

        if (SR0TM001.PK1BLLAD[1] == SR0TM001.PK1BLLAD[2]
         && SR0TW01.SR2BLLSU[1] == SR0TW01.SR2BLLSU[2])
                                  /* If FROM and TO BOL the same*/
          SRWREC.XXXERRID = "11100"; /* Message location*/
          converseLib.validationFailed(175); /* FROM and TO BOL the same*/
          set SR0TM001.PK1BLLAD[1] cursor, bold;
          set SR0TM001.PK1BLLAD[2] bold;
        end

      end

    end

  end

  converseLib.clearScreen();

end // end SR0T-11100

// Validate BOL Status
Function SR0T-11150()

  SR0TW00.SR0TW-ST-FL = "N"; /* Sent flag*/
  SR0TW00.SR0TW-XL-FL = "N"; /* Canceled flag*/

   /* ------------------------------------------------------------*/
   /* Check FROM/TO BOL for valid status for Options 'M' & 'C'*/
   /* only*/
   /* ------------------------------------------------------------*/

   /* Check FROM BOL first for valid status*/

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZHDR01-S();

  SR0TW01.AZ-ASN-STAT-CD[1] = VAZHDR01.AZ-ASN-STAT-CD;

  if (SR0TW00.SR0TW-AZHDR-EOF-FL == "Y" && 
  SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL != "Y")

    SRWREC.XXXERRID = "11150"; /* message location*/
    converseLib.validationFailed(211); /* BOL/ASN Shipment does not exist*/
    set SR0TM001.PK1BLLAD[1] cursor, bold;
    return;
  end

  if (SR0TW01.SR0TW-OPTION == "M" || SR0TW01.SR0TW-OPTION == "C")

    if (VAZHDR01.AZ-ASN-STAT-CD == "XL") /* BOL is cancelled*/

      SR0TW00.SR0TW-XL-FL = "Y"; /* Cancelled flag*/
      SRWREC.XXXERRID = "11150"; /* message location*/
      converseLib.validationFailed(218); /* BOL is in cancelled status*/
      SR0TW00.XXX-MAP-FMAT-FL = "N";
      set SR0TM001 empty;
      SR0TM001.XWHCD = SR0TW01.XWHCD;
      SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;
      SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;
      SR0TM001.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 = SR0TW01.SR2BLLSU[1];
      SR0TM001.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;
      SR0TM001.AZ-ASN-STAT-CD[1] = SR0TW01.AZ-ASN-STAT-CD[1];
      set SR0TM001.PK1BLLAD[1] cursor, bold;
      set SR0TM001.SR2BLLSU[1] bold;
      return;
    else
      if (VAZHDR01.AZ-ASN-STAT-CD == "ST" /* BOL is shipped*/
       || VAZHDR01.AZ-ASN-STAT-CD == "RL") /* or BOL is released*/

        SR0TW00.SR0TW-ST-FL = "Y"; /* Sent flag*/
        SRWREC.XXXERRID = "11150"; /* message location*/
        converseLib.validationFailed(219); /* BOL is in sent status*/
        SR0TW01.SR0TW-OPTION = "I";
        SR0TW00.XXX-MAP-FMAT-FL = "Y";
        SR0TW00.XXX-RQT-DATA-FL = "Y";
        return;
      end
    end
  end

   /* Check TO BOL only if Consolidating*/

  if (SR0TW01.SR0TW-OPTION == "C") /* Option 'C'onsolidate*/

    set VAZHDR01 empty;

    VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
    VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
    VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

    SR0TS-VAZHDR01-S();

    SR0TW01.AZ-ASN-STAT-CD[2] = VAZHDR01.AZ-ASN-STAT-CD;

    if (SR0TW00.SR0TW-AZHDR-EOF-FL == "Y")

      SRWREC.XXXERRID = "11150"; /* message location*/
      converseLib.validationFailed(211); /* BOL/ASN Shipment does not exist*/
      set SR0TM001.PK1BLLAD[2] cursor, bold;
      return;
    else

      if (VAZHDR01.AZ-ASN-STAT-CD == "XL") /* BOL is cancelled*/

        SR0TW00.SR0TW-XL-FL = "Y"; /* Cancelled flag*/
        SRWREC.XXXERRID = "11150"; /* message location*/
        converseLib.validationFailed(218); /* BOL is in cancelled status*/
        SR0TW00.XXX-MAP-FMAT-FL = "N";
        set SR0TM001 empty;
        SR0TM001.XWHCD = SR0TW01.XWHCD;
        SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;
        SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;
        SR0TM001.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];
        SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TW01.SR2BLLSU[2];
        SR0TM001.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
        SR0TM001.AZ-ASN-STAT-CD[2] = SR0TW01.AZ-ASN-STAT-CD[2];
        set SR0TM001.PK1BLLAD[2] cursor, bold;
        set SR0TM001.SR2BLLSU[2] bold;
        return;
      else
        if (VAZHDR01.AZ-ASN-STAT-CD == "ST" /* BOL is shipped*/
         || VAZHDR01.AZ-ASN-STAT-CD == "RL") /* or BOL is released*/

          SR0TW00.SR0TW-ST-FL = "Y"; /* Sent flag*/
          SRWREC.XXXERRID = "11150"; /* message location*/
          converseLib.validationFailed(219); /* BOL is in cancelled status*/
          SR0TW00.XXX-MAP-FMAT-FL = "N";
          set SR0TM001 empty;
          SR0TM001.XWHCD = SR0TW01.XWHCD;
          SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;
          SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;
          SR0TM001.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];
          SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TW01.SR2BLLSU[2];
          SR0TM001.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
          SR0TM001.AZ-ASN-STAT-CD[2] = SR0TW01.AZ-ASN-STAT-CD[2];
          set SR0TM001.PK1BLLAD[2] cursor, bold;
          set SR0TM001.SR2BLLSU[2] bold;
          return;
        end
      end
    end
  end

end // end SR0T-11150

// Determine recommended carrier
Function SR0T-11200()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier when necessary.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.SR0TW-MESSAGE != " ") /* If zip code changed message*/

    return;

  end

  if (TF1REC.TF1MCARF == "Y") /* If misc carrier*/

    return; /* Return to previous process*/

  end

  if (SR0TW01.PK1WT[1] == 0 /* If no weight for lead so*/
   && SR0TW01.SR0TW-PK1WT-BOL[1] == 0) /* and no BOL weight*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Retrieve customer traffic routing exceptions.*/
   /* ------------------------------------------------------------*/

  set TF4REC empty;

  TF4REC.XWHCD = SR0TW01.XWHCD;

  if (VAZHDR01.SR-SHGRP-ADDR-CD == 2) /* Ship group address*/

    TF4REC.KUCCOID = SR0TW01.KUVDCCID[1]; /* Dist center company id*/
    TF4REC.KUMSTRID = SR0TW01.KUVDCSID[1]; /* Dist center store id*/

  else

    TF4REC.KUCCOID = SR0TW01.KUCCOID[1]; /* Company id*/
    TF4REC.KUMSTRID = SR0TW01.KUMSTRID[1]; /* Store id*/

  end

  SR0TS-IO1900-S(); /* Select requested row*/

  if (SQLCA.VAGen_SQLCODE == +100)

    set TF4REC empty;

    TF4REC.XWHCD = SR0TW01.XWHCD;

    if (VAZHDR01.SR-SHGRP-ADDR-CD == 2) /* Ship group address*/

      TF4REC.KUCCOID = SR0TW01.KUVDCCID[1]; /* Dist center company id*/

    else

      TF4REC.KUCCOID = SR0TW01.KUCCOID[1]; /* Company id*/

    end

    TF4REC.KUMSTRID = -1; /* Wildcard for store id*/

    SR0TS-IO1900-S(); /* Select requested row*/

  end

   /* ------------------------------------------------------------*/
   /* Determine recommended carrier.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-MESSAGE = " ";

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0T-11210(); /* Carrier by traffic routing exceptions*/

  else

    SR0T-11220(); /* Carrier by zip code*/

  end

end // end SR0T-11200

// Get carr fr traffic routng exc
Function SR0T-11210()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier fr traffic routing exceptions.*/
   /* ------------------------------------------------------------*/

   /* Force non-freight and freight carrier.*/

  if (TF4REC.TF4RXCCD == "1")

    if (SR0TW01.SR0TW-PK1WT-BOL[1] <= PKDREC.PKDMXWLM)
                                   /* If BOL wt <= default wt*/

      if (TF4REC.TF1CARCD[1] != SR0TW01.TF1CARCD[1]) /* First carrier*/

        SR0TW00.TF1CARCD = TF4REC.TF1CARCD[1]; /* Recommended carr*/

      end

    else

      if (TF4REC.TF1CARCD[2] != SR0TW01.TF1CARCD[1]) /* Second carrier*/

        SR0TW00.TF1CARCD = TF4REC.TF1CARCD[2]; /* Recommended carrier*/

      end

    end

  end

   /* Force carrier regardless of weight.*/

  if (TF4REC.TF4RXCCD == "2")

    if (TF4REC.TF1CARCD[2] != SR0TW01.TF1CARCD[1]) /* Second carrier*/

      SR0TW00.TF1CARCD = TF4REC.TF1CARCD[2]; /* Recommended carrier*/

    end

  end

   /* Force carrier with customer on picking hold.*/

  if (TF4REC.TF4RXCCD == "3")

    if (TF4REC.TF1CARCD[1] != SR0TW01.TF1CARCD[1]) /* First carrier*/

      SR0TW00.TF1CARCD = TF4REC.TF1CARCD[1]; /* Recommended carrier*/

    end

  end

   /* Weight break carrier w/ optional picking hold.*/

  if (TF4REC.TF4RXCCD == "4")

    set TF5REC empty;

    TF5REC.XWHCD = TF4REC.XWHCD;
    TF5REC.KUCCOID = TF4REC.KUCCOID;
    TF5REC.KUMSTRID = TF4REC.KUMSTRID;
    TF5REC.TF5WTBRK = SR0TW01.SR0TW-PK1WT-BOL;

    SR0TS-IO1910-S1(); /* Cursor on dpick.vrtewt01*/

    while (SQLCA.VAGen_SQLCODE == 0
     && TF5REC.XXXSTAT != "A") /* Retrieve first active row*/

      SR0TS-IO1910-N1(); /* Fetch dpick.vrtewt01*/

    end

    SR0TS-IO1910-C1(); /* Close cursor dpick.vrtewt01*/

    SR0TW00.TF1CARCD = TF5REC.TF1CARCD; /* Recommended carrier*/

  end

   /* Set proper recommended carrier/destination message.*/

  if (SR0TW00.TF1CARCD != " " /* If there is a recommended carrier*/
   && SR0TW00.TF1CARCD != SR0TW01.TF1CARCD[1]) /* and not same w/ current*/

    if (SR0TW01.SR0TW-OPTION == "M" /* If modify option*/
     || SR0TW01.PK4CARSP[1] != "10") /* and not customer-specified routing*/

      SR0TW00.SR0TW-REASON = "RECOMMENDED CARRIER/DEST BECAUSE OF WEIGHT - ";

    end

  end

end // end SR0T-11210

// Get carr fr traffic zip cd
Function SR0T-11220()
   /* ------------------------------------------------------------*/
   /* Determine recommended carrier using zip code.*/
   /* ------------------------------------------------------------*/

  SR0TW00.XXXZIP = SR0TW01.XXXZIP[1];

  SR0T-30210(); /* Select row from dpick.vzipcd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
                                  /* next sentence*/
  else

    return;

  end

   /* Determine weight.*/

  if (TF3REC.TF3ZIPWT[1] == 0)

    TF3REC.TF3ZIPWT[1] = PKDREC.PKDMXWLM; /* Default UPS weight*/

  end

  if (TF3REC.TF3ZIPWT[3] == 0)

    TF3REC.TF1CARCD[3] = TF3REC.TF1CARCD[2]; /* Carrier*/
    TF3REC.TF3ZIPWT[3] = TF3REC.TF3ZIPWT[2]; /* Weight*/

  end

   /* Determine destination.*/

  if (TF3REC.TF2DSTCD[1] == " ")

    TF3REC.TF2DSTCD[1] = TF3REC.TF3DSTCD;

  end

  if (TF3REC.TF2DSTCD[2] == " ")

    TF3REC.TF2DSTCD[2] = TF3REC.TF3DSTCD;

  end

  if (TF3REC.TF2DSTCD[3] == " ")

    TF3REC.TF2DSTCD[3] = TF3REC.TF3DSTCD;

  end

   /* Compare weight.*/

  set TF1REC empty;

  if (SR0TW01.SR0TW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[1])

    TF1REC.TF1CARCD = TF3REC.TF1CARCD[1];
    TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[1];

  else

    if (SR0TW01.SR0TW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[2])

      TF1REC.TF1CARCD = TF3REC.TF1CARCD[2];
      TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[2];

    else

      if (SR0TW01.SR0TW-PK1WT-BOL[1] <= TF3REC.TF3ZIPWT[3])

        TF1REC.TF1CARCD = TF3REC.TF1CARCD[3];
        TF3REC.TF3DSTCD = TF3REC.TF2DSTCD[3];

      end

    end

  end

   /* Set proper recommended carrier/destination message.*/

  if (TF1REC.TF1CARCD != " "
   && TF1REC.TF1CARCD != SR0TW01.TF1CARCD[1])

    SR0TS-IO0860-S(); /* Select dpick.vcarr001*/

    if (SR0TW01.SR0TW-OPTION == "M" /* If modify option*/
     || SR0TW01.PK4CARSP[1] != "10") /* or not customer-specified routing*/

      SR0TW00.SR0TW-REASON = "RECOMMENDED CARRIER/DEST BECAUSE OF WEIGHT - ";
      SR0TW00.TF1CARCD = TF1REC.TF1CARCD; /* Recommended carrier*/

      if (TF3REC.TF3DSTCD != " "
       && TF3REC.TF3DSTCD != SR0TW01.TF2DSTCD[1])

        SR0TW00.SR0TW-SLASH = "/";
        SR0TW00.TF3DSTCD = TF3REC.TF3DSTCD; /* Recommended destination*/

      end

    end

  end

end // end SR0T-11220

// Format and display the map
Function SR0T-12000()
   /* ------------------------------------------------------------*/
   /* sr0tw00.sr0tw-pf14-fl is used for orders display, option M*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-PF14-FL = "N";

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    SR0T-12100(); /* Format the data in the map*/

  end

   /* ------------------------------------------------------------*/
   /* Protect all modifiable fields when option is to "I"nquire*/
   /* or to "C"onsolidate.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "I" /* If option is inquire*/
   || SR0TM001.SR0TM-OPTION == "C") /* or consolidate*/

    set SR0TM001.SR0TM-SR2SHPCG-BOL skip, noHighLight;
    set SR0TM001.TF1CARCD skip;
    set SR0TM001.SR0TM-CARRIER-NAME skip;
    set SR0TM001.TF2DSTCD skip, noHighLight;
    set SR0TM001.SR0TM-DEST-DESC skip, noHighLight;
    set SR0TM001.KUCCOID skip, noHighLight;
    set SR0TM001.KUMSTRID skip, noHighLight;
    set SR0TM001.TF2PRONO skip;
    set SR0TM001.OP5ALTNM skip;
    set SR0TM001.XXX-ADDR[1] skip;
    set SR0TM001.XXX-ADDR[2] skip;
    set SR0TM001.XXX-ADDR[3] skip;
    set SR0TM001.XXXCITY skip;
    set SR0TM001.XSTCD skip;
    set SR0TM001.XXXZIP skip;
    set SR0TM001.XCTCD skip;

  end

  set SR0TM001.SR0TM-MESSAGE skip;

   /* ------------------------------------------------------------*/
   /* Show TO BOL fields when consolidating.  Otherwise hide them.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "C") /* If consolidate option*/

    set SR0TM001.SR0TM-TO-BOL-LIT initialAttributes;
    set SR0TM001.SR0TM-TO-BOL-STAT-LIT initialAttributes;
    set SR0TM001.SR0TM-ALL-ORDERS-LIT initialAttributes;

    if (converseVar.validationMsgNum == 24  /* Required field*/
     || converseVar.validationMsgNum == 150 /* Must be 'Y' or 'N'*/
     || converseVar.validationMsgNum == 175) /* FROM and TO BOL the same*/
                                  /* next sentence*/
    else

      set SR0TM001.PK1BLLAD[2] initialAttributes;
      set SR0TM001.SR0TM-TO-PERIOD-LIT initialAttributes;
      set SR0TM001.SR2BLLSU[2] initialAttributes;
      set SR0TM001.AZ-ASN-STAT-CD[2] initialAttributes;
      set SR0TM001.SR0TM-ALL-ORDERS-FL initialAttributes;

    end

  else

    set SR0TM001.SR0TM-TO-BOL-LIT invisible, skip;
    set SR0TM001.SR0TM-TO-BOL-STAT-LIT skip, invisible;
    set SR0TM001.SR0TM-TO-PERIOD-LIT skip, invisible;
    set SR0TM001.PK1BLLAD[2] skip, noHighLight;
    set SR0TM001.SR2BLLSU[2] skip, noHighLight;
    set SR0TM001.AZ-ASN-STAT-CD[2] skip, noHighLight;
    set SR0TM001.SR0TM-ALL-ORDERS-LIT invisible, skip;
    set SR0TM001.SR0TM-ALL-ORDERS-FL skip, noHighLight;

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (SR0TW00.SR0TW-MESSAGE != " ")

    SR0TM001.SR0TM-MESSAGE = SR0TW00.SR0TW-MESSAGE;

  end

  SR0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/

    else

      SR0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0TM001.XXXERRID = SRWREC.XXXERRID; /* Message location*/

    set SR0TM001 alarm; /* Indicate sound alarm*/

  end

  converse SR0TM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = " "; /* Message location*/
  SRWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  SR0TW00.SR0TW-MESSAGE = " ";

  COMMAREA.CATOAP = SR0TM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0TM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SR0TM001.XWHCD normal;
  set SR0TM001.SR0TM-UNIT-OF-MEASURE normal;
  set SR0TM001.SR0TM-OPTION normal;
  set SR0TM001.PK1BLLAD[1] normal;
  set SR0TM001.SR2BLLSU[1] initialAttributes;
  set SR0TM001.SR0TM-FROM-PERIOD-LIT initialAttributes;

  if (SR0TM001.SR0TM-OPTION == "C") /* If consolidate option*/

    set SR0TM001.SR0TM-TO-BOL-LIT initialAttributes;
    set SR0TM001.SR0TM-TO-PERIOD-LIT initialAttributes;
    set SR0TM001.SR0TM-ALL-ORDERS-LIT initialAttributes;
    set SR0TM001.SR0TM-TO-BOL-STAT-LIT initialAttributes;
    set SR0TM001.PK1BLLAD[2] initialAttributes;
    set SR0TM001.SR2BLLSU[2] initialAttributes;
    set SR0TM001.AZ-ASN-STAT-CD[2] initialAttributes;
    set SR0TM001.SR0TM-ALL-ORDERS-FL initialAttributes;

  end

  if (SR0TM001.SR0TM-OPTION == "M") /* If modify option*/

    set SR0TM001.TF1CARCD normal;
    set SR0TM001.SR0TM-CARRIER-NAME normal;
    set SR0TM001.TF2PRONO normal;
    set SR0TM001.OP5ALTNM normal;
    set SR0TM001.XXX-ADDR[1] normal;
    set SR0TM001.XXX-ADDR[2] normal;
    set SR0TM001.XXX-ADDR[3] normal;
    set SR0TM001.XXXCITY normal;
    set SR0TM001.XSTCD normal;
    set SR0TM001.XCTCD normal;
    set SR0TM001.XXXZIP normal;

  end

  set SR0TM001.CATOAP normal; /* TO application*/
  set SR0TM001.CAITEM normal; /* Application data*/

end // end SR0T-12000

// Format data for MAP 1 display
Function SR0T-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SR0TM001 initial; /* M001 input/output area*/

  SR0TW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Position the cursor to warehouse (if missing) or option.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.SR0TW-MSG-BILL-OF-LADING == 0)

    set SR0TM001.SR0TM-MESSAGE invisible;

  else

    set SR0TM001.SR0TM-MESSAGE initialAttributes;
    SR0TM001.SR0TM-MESSAGE = SR0TW00.SR0TW-MSG;
    SR0TW00.SR0TW-MSG-BILL-OF-LADING = 0;

  end

  if (SR0TW01.XWHCD == " ") /* If no warehouse*/

    SR0TM001.XWHCD = SRWREC.SRWXWHCD;

  else

    SR0TM001.XWHCD = SR0TW01.XWHCD;

  end

  if (SR0TM001.XWHCD == " " /* If no warehouse*/
   && SR0TW01.XWHCD == " ")

    set SR0TM001.XWHCD cursor, bold; /* Cursor on warehouse*/

  else

    if (SR0TW01.SR0TW-OPTION == " ") /* If no option*/

      SR0TW01.SR0TW-OPTION = "M";
      SR0TM001.SR0TM-OPTION = "M";
      set SR0TM001.PK1BLLAD[1] cursor; /* Cursor on option*/

    else

      if (SR0TM001.PK1BLLAD[1] <= " ")

        set SR0TM001.PK1BLLAD[1] cursor, bold; /* Cursor on BOL NO field*/

      else

        if ((SR0TM001.PK1BLLAD[2] <= " " || SR0TM001.PK1BLLAD[2] == 0)
         && SR0TW01.SR0TW-OPTION == "C")

          set SR0TM001.PK1BLLAD[2] cursor, bold; /* Cursor on BOL NO field*/

        end

      end

    end

  end

  if (SR0TM001.XWHCD == "42") /* If Canada warehouse*/

    SR0TW01.SR0TW-UNIT-OF-MEASURE = "M"; /* Use metric system*/

  end

  if (SR0TW01.SR0TW-UNIT-OF-MEASURE == " ")

    SR0TW01.SR0TW-UNIT-OF-MEASURE = "U";

  end

  SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;

  if (SR0TW01.SR0TW-UNIT-OF-MEASURE == "U")

    SR0TM001.SR0TM-UOM-WEIGHT[1] = "LB";
    SR0TM001.SR0TM-UOM-WEIGHT[2] = "LB";
    SR0TM001.SR0TM-UOM-WEIGHT[3] = "LB";

  else

    SR0TM001.SR0TM-UOM-WEIGHT[1] = "KG";
    SR0TM001.SR0TM-UOM-WEIGHT[2] = "KG";
    SR0TM001.SR0TM-UOM-WEIGHT[3] = "KG";

  end

  SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.SR0TW-OPTION == " " || 
  SR0TW01.PK1BLLAD[1] == 0) /* If nothing has been entered yet*/

    set SR0TM001.SR0TM-TO-BOL-LIT skip, invisible;
    set SR0TM001.SR0TM-TO-PERIOD-LIT skip, invisible;
    set SR0TM001.PK1BLLAD[2] skip, noHighLight;
    set SR0TM001.SR2BLLSU[2] skip, noHighLight;
    set SR0TM001.SR0TM-ALL-ORDERS-LIT skip, invisible;
    set SR0TM001.SR0TM-ALL-ORDERS-FL skip, invisible;
    set SR0TM001.SR0TM-TO-BOL-STAT-LIT skip, invisible;
    set SR0TM001.AZ-ASN-STAT-CD[2] skip, noHighLight;
    set SR0TM001.SR0TM-SR2SHPCG-BOL skip, noHighLight;

    if (SR0TM001.XWHCD == "42") /* If Canada warehouse*/

      SR0TM001.SR0TM-UNIT-OF-MEASURE = "M"; /* Use metric system*/
      SR0TM001.SR0TM-UOM-WEIGHT[1] = "KG";
      SR0TM001.SR0TM-UOM-WEIGHT[2] = "KG";
      SR0TM001.SR0TM-UOM-WEIGHT[3] = "KG";

    else

      SR0TM001.SR0TM-UNIT-OF-MEASURE = "U"; /* Use English system*/
      SR0TM001.SR0TM-UOM-WEIGHT[1] = "LB";
      SR0TM001.SR0TM-UOM-WEIGHT[2] = "LB";
      SR0TM001.SR0TM-UOM-WEIGHT[3] = "LB";

    end

    return;

  end

  set SR0TM001.SR0TM-FROM-PERIOD-LIT initialAttributes;
  SR0TM001.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];

  if (SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL == "Y")

    SR0TM001.SR2BLLSU[1] = " ";

  else

    SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 = SR0TW01.SR2BLLSU[1];
    SR0TM001.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;

  end

  SR0TM001.AZ-ASN-STAT-CD[1] = SR0TW01.AZ-ASN-STAT-CD[1];

  if (SR0TW01.SR0TW-OPTION == "C") /* If consolidate option*/

    set SR0TM001.SR0TM-SR2SHPCG-BOL skip, noHighLight;
    set SR0TM001.SR0TM-TO-PERIOD-LIT initialAttributes;
    SR0TM001.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];

    if (SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL == "Y")

      SR0TM001.SR2BLLSU[2] = " ";

    else

      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TW01.SR2BLLSU[2];
      SR0TM001.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;

    end

    SR0TM001.AZ-ASN-STAT-CD[2] = SR0TW01.AZ-ASN-STAT-CD[2];
    SR0TM001.SR0TM-ALL-ORDERS-FL = SR0TW01.SR0TW-ALL-ORDERS-FL;

  end

  SR0TM001.TF1CARCD = SR0TW01.TF1CARCD[SR0TW-FR-TO-BOL-IND];
  SR0TM001.SR0TM-CARRIER-NAME = SR0TW01.SR0TW-CARRIER-NAME[SR0TW-FR-TO-BOL-IND];

  SR0TM001.TF2DSTCD = SR0TW01.TF2DSTCD[SR0TW-FR-TO-BOL-IND];
  SR0TM001.SR0TM-DEST-DESC = SR0TW01.SR0TW-DEST-DESC[SR0TW-FR-TO-BOL-IND];

  SR0TM001.TF2PRONO = SR0TW01.TF2PRONO[SR0TW-FR-TO-BOL-IND];

  SR0TW00.SR0TW-SR1SHPDT-MMDDYY-YY = SR0TW01.SR0TW-SR1SHPDT-CCYYMMDD-YY[SR0TW-FR-TO-BOL-IND];

  SR0TW00.SR0TW-SR1SHPDT-MMDDYY-MM = SR0TW01.SR0TW-SR1SHPDT-CCYYMMDD-MM[SR0TW-FR-TO-BOL-IND];

  SR0TW00.SR0TW-SR1SHPDT-MMDDYY-DD = SR0TW01.SR0TW-SR1SHPDT-CCYYMMDD-DD[SR0TW-FR-TO-BOL-IND];

  SR0TM001.SR0TM-SR1SHPDT-MMDDYY = SR0TW00.SR0TW-SR1SHPDT-MMDDYY;

  if (SR0TW01.XBCCD[SR0TW-FR-TO-BOL-IND] == "08")

    set XP0FW01 empty;

    XP0FW01.XBCCD = SR0TW01.XBCCD[SR0TW-FR-TO-BOL-IND];

    XP0FW01.KUCCOID = SR0TW01.KUCCOID[SR0TW-FR-TO-BOL-IND];

    XP0FS01(); /* Drop '80' prefix of customer nbr*/

    SR0TM001.KUCCOID = XP0FW01.XP0FW01-EXTERNAL;

  else

    SR0TM001.KUCCOID = SR0TW01.KUCCOID[SR0TW-FR-TO-BOL-IND];

  end

  SR0TM001.KUMSTRID = SR0TW01.KUMSTRID[SR0TW-FR-TO-BOL-IND];

  /* ======================================================================*/
  /* Code to Determine to Open Lead SO Charges, Cartons & Weight*/
  /* ======================================================================*/

  SR0TM001.SR0TM-LEAD-SO-COMMAND = " ";

  if (SR0TM001.SR0TM-OPTION == "M")

    if (SR0TW00.SR0TW-LEADSO-MSF != "Y")

      TF7REC.TF7CARCD = SR0TW01.TF1CARCD;
      SR0TS-VCARR002-S(); /* Select Carrier to Determine*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if Small Carrier or not*/

        if (TF7REC.TF7SMPKG != "M") /* Not 'M' = Small Pkg Carrier*/

          if (VAZHDR01.AZ-ASN-STAT-CD != "RE"
           && VAZHDR01.AZ-ASN-STAT-CD != "HD")

            set SR0TM001.PK1NBCTN skip, noHighLight;
            set SR0TM001.PK1WT skip, noHighLight;
            set SR0TM001.SR0TM-LEADSO-CHARGES skip, noHighLight;
            SR0TM001.SR0TM-LEAD-SO-COMMAND = " ";

          else

            if (VAZHDR01.AZ-ASN-STAT-CD == "RE")

              set SR0TM001.PK1NBCTN initialAttributes;
              set SR0TM001.PK1WT initialAttributes;
              set SR0TM001.SR0TM-LEADSO-CHARGES initialAttributes;

            else

              if (VAZHDR01.AZ-ASN-STAT-CD == "HD")

                SR0TS-AZ9900-NS();

                if (SQLCA.VAGen_SQLCODE == +100)

                  set SR0TM001.PK1NBCTN initialAttributes;
                  set SR0TM001.PK1WT initialAttributes;
                  set SR0TM001.SR0TM-LEADSO-CHARGES initialAttributes;

                else

                  set SR0TM001.PK1NBCTN skip, noHighLight;
                  set SR0TM001.PK1WT skip, noHighLight;
                  set SR0TM001.SR0TM-LEADSO-CHARGES skip, noHighLight;
                  SR0TM001.SR0TM-LEAD-SO-COMMAND = " ";

                end

              end

            end

          end

        else

          set SR0TM001.PK1NBCTN initialAttributes;
          set SR0TM001.PK1WT initialAttributes;
          set SR0TM001.SR0TM-LEADSO-CHARGES initialAttributes;

        end

      else

        set SR0TM001.PK1NBCTN skip, noHighLight;
        set SR0TM001.PK1WT skip, noHighLight;
        set SR0TM001.SR0TM-LEADSO-CHARGES skip, noHighLight;

      end

    else

      set SR0TM001.PK1NBCTN skip, noHighLight;
      set SR0TM001.PK1WT skip, noHighLight;
      set SR0TM001.SR0TM-LEADSO-CHARGES skip, noHighLight;
      SR0TM001.SR0TM-LEAD-SO-COMMAND = " ";

    end

  else

    set SR0TM001.PK1NBCTN skip, noHighLight;
    set SR0TM001.PK1WT skip, noHighLight;
    set SR0TM001.SR0TM-LEADSO-CHARGES skip, noHighLight;

  end

  /* ======================================================================*/
  /* Code to Display TOTAL BOL DATA, Orders & Est Weight*/
  /* ======================================================================*/

  SR0TM001.SR0TM-SR2SHPCG-BOL = SR0TW01.SR0TW-SR2SHPCG-BOL; /* Total Shipping Charges*/

  SR0TW01.SR0TW-SR2QTYSH-BOL[SR0TW-FR-TO-BOL-IND] = SR0TW00.SR0TW-SR2QTYSH-BOL-ACCUM;
  SR0TM001.SR0TM-SR2QTYSH-BOL = SR0TW01.SR0TW-SR2QTYSH-BOL[SR0TW-FR-TO-BOL-IND]; /* Total Units*/

  SR0TW01.SR2TNBCT[SR0TW-FR-TO-BOL-IND] = SR0TW00.SR0TW-SR2TNBCT-ACCUM;
  SR0TM001.SR2TNBCT = SR0TW01.SR2TNBCT[SR0TW-FR-TO-BOL-IND]; /* Total Number of Cartons*/

  if (SR0TW01.SR0TW-UNIT-OF-MEASURE == "U")

    SR0TW01.SR0TW-PK1WT-BOL = SR0TW00.SR0TW-PK1WT-BOL-ACCUM;
    SR0TM001.SR0TM-PK1WT-BOL = SR0TW01.SR0TW-PK1WT-BOL; /* Total Shipping Weight*/

    SR0TM001.SR0TM-EXPTD-PK1WT-BOL = SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM; /* Estimated Weight*/

  else

    SR0TW01.SR0TW-PK1WT-BOL = SR0TW00.SR0TW-PK1WT-BOL-ACCUM;
    SR0TW01.SR0TW-PK1WT-BOL = mathLib.round(SR0TW01.SR0TW-PK1WT-BOL / 2.2046, -mathLib.decimals(SR0TW01.SR0TW-PK1WT-BOL));

    SR0TM001.SR0TM-PK1WT-BOL = SR0TW01.SR0TW-PK1WT-BOL; /* Total Shipping Weight(Kilos)*/

    SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM = mathLib.round(SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM / 2.2046, -mathLib.decimals(SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM));

    SR0TM001.SR0TM-EXPTD-PK1WT-BOL = SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM; /* Estimated Weight(Kilos)*/

  end

  SR0TM001.SR0TM-BOL-ORDERS = SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM; /* Number of Orders*/

  /* ======================================================================*/
  /* Code to Display Lead SO Data*/
  /* ======================================================================*/

  SR0TM001.PK1NBCTN = SR0TW01.PK1NBCTN; /* Cartons*/
  SR0TM001.SR2NBITM = SR0TW01.SR2QTYSH; /* Units*/
  SR0TM001.PK1WT = SR0TW01.PK1WT; /* Weight*/
  SR0TM001.SR0TM-LEADSO-CHARGES = SR0TW01.LEADSO-CHARGES; /* Charges*/

  /* ======================================================================*/
  /* Code to Display Address Stuff*/
  /* ======================================================================*/

   /* Code to handle DCMS onetime shipto's alt name*/
   /* (added for RETROFIT 10/30/98  esmit2)*/
  if (SR0TW01.XWHCD == "51") /* Apparel Whse*/

    if (SR1REC.TF1CARNM == "DCMS") /* DCMS shipment*/

      /* If the alternate name is blank and there is an entry in*/
      /* shiprec address (onetime address), default the cust name.*/

      if (SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] == " ") /* /Alt name*/

        set SR4REC empty;
        SR4REC.XWHCD = SR0TW01.XWHCD;
        SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
        SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[1];

        SR0TS-IO0820-S(); /* Sel vsradd01*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
          SR0TW01.OP5ALTNM[1] = SR4REC.OP5ALTNM;
        end

      end
    end
  end

  SR0TM001.OP5ALTNM = SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XXX-ADDR[1] = SR0TW01.XXX-ADDR1[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XXX-ADDR[2] = SR0TW01.XXX-ADDR2[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XXX-ADDR[3] = SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XXXCITY = SR0TW01.XXXCITY[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XSTCD = SR0TW01.XSTCD[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XXXZIP = SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XCTCD = SR0TW01.XCTCD[SR0TW-FR-TO-BOL-IND];

  /* ======================================================================*/
  /* Code to Display GPC Codes and Abbreviations*/
  /* ======================================================================*/

  SR0TM001.XGPCD[1] = SR0TW01.XGPCD1[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XGPABRV[1] = SR0TW01.SR0TW-XGPABRV1[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XGPCD[2] = SR0TW01.XGPCD2[SR0TW-FR-TO-BOL-IND];
  SR0TM001.XGPABRV[2] = SR0TW01.SR0TW-XGPABRV2[SR0TW-FR-TO-BOL-IND];

   /* ------------------------------------------------------------*/
   /* Compare FROM and TO BOL company id when consolidating and*/
   /* display proper message.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "C"       /* If consolidating*/
   && (converseVar.validationMsgNum == 0 /* and no error*/
   || converseVar.validationMsgNum == 184)) /* or print BOL message*/

    if (SR0TW00.SR0TW-CREATE-TO-BOL-FL == "Y") /* If new TO BOL*/
                                  /* next sentence*/
    else

      if (SR0TW01.KUVDCCID[1] == 0 /* If no FROM BOL dist center*/
       && SR0TW01.KUVDCCID[2] == 0) /* and no TO BOL dist center*/

        if (SR0TW01.KUCCOID[1] != SR0TW01.KUCCOID[2])
                               /* If FROM BOL and TO BOL not same customer*/
          SRWREC.XXXERRID = "12100"; /* Message location*/
          converseLib.validationFailed(154); /* Customer numbers do not match*/

        end

      else

        if (SR0TW01.KUVDCCID[1] != SR0TW01.KUVDCCID[2])
                               /* If FROM BOL and TO BOL not same dist cent*/
          SRWREC.XXXERRID = "12100"; /* Message location*/
          converseLib.validationFailed(154); /* Customer numbers do not match*/

        end

      end

    end

    if (SR0TM001.SR0TM-ALL-ORDERS-FL == "Y") /* If consolidating all*/

   /* svenka changes begin*/
      if (converseVar.validationMsgNum == 000)
        converseLib.validationFailed(238); /* Press enter to process all orders*/
      else
      end
   /* svenka changes end*/

    else

   /* svenka changes begin*/
      if (converseVar.validationMsgNum == 000)
        converseLib.validationFailed(239); /* Press enter to select orders*/
      else
      end
   /* svenka changes end*/

    end

  end

end // end SR0T-12100

// Check attention identifier
Function SR0T-13000()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SR0TW01 empty; /* M001 display storage*/

    SR0TW00.SR0TW-ST-FL = "N";
    SR0TW00.SR0TW-XL-FL = "N";
    SR0TW00.SR0TW-RELEASE-COND-CD = " ";
    SR0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf14)
    if (SR0TW01.SR0TW-OPTION != "I" && SR0TW01.SR0TW-OPTION != "M")

      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(226);
      exit stack;

    else

      SR0TW00.SR0TW-PF14-FL = "Y";

    end
  end

  if (converseVar.eventKey is pf15)
    if (SR0TM001.SR0TM-OPTION != "M")
      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(237); /* Release only valid for 'M'*/
      exit stack;
    else
   /* tt14977changes begin*/
      if (SR0TM001.TF1CARCD == "2000")
        if (SR0TM001.XWHCD == "07")
          converseLib.validationFailed(263);
          SRWREC.XXXERRID = "13000"; /* Message location*/
          exit stack;
        end
      end
    end
   /* tt14977changes end*/
    if (SR0TW00.SR0TW-RELEASE-COND-CD != " ")

      SRWREC.XXXERRID = "13000"; /* Message location*/
      SR0TM-MESSAGE = "CANNOT RELEASE SAME SHIPMENT TWICE";

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (SR0TM001.CATOAP == "SR0R")
        set SRWREC empty;
      end

      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

      XSSRS-EXIT(); /* Exit to another application*/

      set SR0TM001.CATOAP cursor, bold; /* Highlight*/

    else

      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* HELP*/
   || converseVar.eventKey is pf3 /* RETURN TO SR0A*/
   || converseVar.eventKey is pf4) /* RETURN TO MN0M*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
  /* MOVE 'SR0TM001' TO COMMAREA.CAITEM;/* Application find code*/

      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(225); /* PA/PF key may not be used*/
      exit stack; /* Exit to display map*/

    end

    if (converseVar.eventKey is pf3) /* RETURN TO SR0A*/
      SR0TW00.SR0TW-RELEASE-COND-CD = " ";
      COMMAREA.CATOAP = "SR0A"; /* System Menu*/
    end

    SR0TW00.SR0TW-RELEASE-COND-CD = " ";
    SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
    SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
    SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

    XSSRS-EXIT(); /* TRANSFER CONTROL TO OTHER APPLID*/

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf2) /* RETURN to AZ0B*/

    if (COMMAREA.CAFROMAP != "AZ0B" /* came from ASN Select*/
     && COMMAREA.CAFROMAP != "SR0T")
      SRWREC.XXXERRID = "13000"; /* Message location*/
      converseLib.validationFailed(231); /* PF2 only valid for return from AZ0B*/
      exit stack;

    else

      COMMAREA.CATOAP = "AZ0B"; /* ASN Select screen*/
      COMMAREA.CAFROMAP = "SR0T";
      COMMAREA.CAUSERA = COMMAREA.CA-USER-WORKAREA-2K-B;

      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

      XSEXIT(); /* TRANSFER CONTROL TO OTHER APPLID*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* PROCESS SCREEN INPUT*/
   && converseVar.eventKey not pf5   /* PRINT BILL OF LADING*/
   && converseVar.eventKey not pf6   /* SPLIT SHIPMENT*/
   && converseVar.eventKey not pf14  /* VIEW ORDERS*/
   && converseVar.eventKey not pf15) /* RELEASE SHIPMENT, ASN*/

    SRWREC.XXXERRID = "13000"; /* Message location*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SR0T-13000

// Verify entered data
Function SR0T-14000()

  if (SR0TW00.SR0TW-RELEASE-COND-CD != " ")
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "H"
     || SR0TW00.SR0TW-RELEASE-COND-CD == "V")
      if (converseVar.eventKey not enter && converseVar.eventKey not pf3)
        SRWREC.XXXERRID = "14000";
        converseLib.validationFailed(12); /* Invalid PF Key*/
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    /**/
    SRWREC.XXXERRID = "14000"; /* Message location*/
    converseLib.validationFailed(130); /* Enter only with FAST PATH*/
    set SR0TM001.CAITEM cursor, bold; /* Highlight*/
    exit stack;
    /**/
  end

  if (SR0TW00.SR0TW-ST-FL == "Y") /* Do not allow data edits if*/
    converseLib.validationFailed(219); /* BOL is in sent status*/
    SRWREC.XXXERRID = "14000"; /* message location*/
    SR0TW01.SR0TW-OPTION = "I";
    SR0TW00.XXX-MAP-FMAT-FL = "Y";
    SR0TW00.XXX-RQT-DATA-FL = "Y";
    SR0TW00.SR0TW-ST-FL = "N";
    exit stack; /* status is ST or RL*/
  end

  if (SR0TW00.SR0TW-XL-FL == "Y") /* Do not allow data edits if*/
    converseLib.validationFailed(218); /* BOL is in canceled status*/
    SRWREC.XXXERRID = "14000"; /* message location*/
    SR0TW01.SR0TW-OPTION = "I";
    SR0TW00.SR0TW-XL-FL = "N";
    exit stack; /* status is ST or RL*/
  end

   /* ------------------------------------------------------------*/
   /* Apparel warehouse restrictions -*/
   /* Prohibit certain changes and all splits for DCMS*/
   /* shipments.*/
   /* 8/4/98 new additions for Retrofit Project*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.XWHCD == "51"
   || COMMAREA.XWHCD == "51") /* Apparel Facility*/
    /**/
    set SR1REC empty; /* VSRHDR01 dclgen*/
    /**/
    SR1REC.XWHCD = "51"; /* Warehouse code*/
    /**/
    if (SR0TW01.PK1PKSCH == 0) /* No shiprec sched yet*/
      /**/
      if (SR0TM001.PK1BLLAD[2] > 0)
        /**/
        set SR2REC empty;
        SR2REC.PK1BLLAD = SR0TM001.PK1BLLAD[2]; /* BOL #2*/
        SR0T-14500(); /* Get sched for this BOL*/
        SR1REC.PK1PKSCH = SR2REC.PK1PKSCH; /* Pick Schedule*/
        set SR0TM001.PK1BLLAD[2] bold, cursor;
      else
        /**/
        set SR2REC empty;
        SR2REC.PK1BLLAD = SR0TM001.PK1BLLAD[1]; /* BOL #1*/
        SR0T-14500(); /* Get sched for this BOL*/
        SR1REC.PK1PKSCH = SR2REC.PK1PKSCH; /* Pick Schedule*/
        set SR0TM001.PK1BLLAD[1] bold, cursor;
      end
      /**/
    else
      /**/
      SR1REC.PK1PKSCH = SR0TW01.PK1PKSCH; /* Pick Schedule*/
      /**/
    end
    /**/
    SR0TS-IO0790-S(); /* Get shiprec hdr*/
    /**/
     /* note - following not performed if sql was 100 (not found)*/
    if (SR1REC.TF1CARNM == "DCMS") /* DCMS shipment*/
      /**/
      if (converseVar.eventKey is pf6 || SR0TM001.SR0TM-OPTION == "C") /* Split or consol*/
        /**/
        converseLib.validationFailed(254); /* Msg*/
         /* Not valid option for DCMS shipments*/
        SRWREC.XXXERRID = "14000"; /* Msg location*/
        SR0TW00.XXX-MAP-FMAT-FL = "N"; /* Format map*/
        /**/
        exit stack; /* Display map*/
        /**/
      end
      /**/
      /**/
       /* removed from check on 10/28/98 marbuc*/
       /* OR SR0TM001.OP5ALTNM NE SR0TW01.OP5ALTNM         /* Alt name*/
       /* removed from check on 11/30/98 esmit2  per Debra Wray*/
                                  /* OR SR0TM001.TF1CARCD NE*/
                                   /* SR0TW01.TF1CARCD         /* Carrier*/
                                   /* code*/
       /*  */
      if (SR0TM001.SR0TM-OPTION == "M") /* Modify*/
        /**/
        if (SR0TM001.PK1BLLAD[2] != SR0TW01.PK1BLLAD[2] /* BOL*/
         || SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN       /* Cartons*/
         || SR0TM001.PK1WT != SR0TW01.PK1WT             /* Weight*/
         || SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1   /* Address line 1*/
         || SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2   /* Address line 2*/
         || SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3   /* Address line 3*/
         || SR0TM001.XXXCITY != SR0TW01.XXXCITY         /* City*/
         || SR0TM001.XCTCD != SR0TW01.XCTCD)            /* Country code*/
          /**/
          if (SR0TM001.XCTCD != SR0TW01.XCTCD) /* Country code*/
            set SR0TM001.XCTCD cursor, bold;
          end
          /**/
          if (SR0TM001.XXXCITY != SR0TW01.XXXCITY) /* City*/
            set SR0TM001.XXXCITY cursor, bold;
          end
          /**/
          if (SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3) /* Addr line 3*/
            set SR0TM001.XXX-ADDR[3] cursor, bold;
          end
          /**/
          if (SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2) /* Addr line 2*/
            set SR0TM001.XXX-ADDR[2] cursor, bold;
          end
          /**/
          if (SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1) /* Addr line 1*/
            set SR0TM001.XXX-ADDR[1] cursor, bold;
          end
          /**/
           /* IF SR0TM001.OP5ALTNM NE SR0TW01.OP5ALTNM;        /* Alt name*/
           /* SET SR0TM001.OP5ALTNM CURSOR,BRIGHT;*/
           /* END;*/
          /**/
          if (SR0TM001.PK1WT != SR0TW01.PK1WT) /* Weight*/
            set SR0TM001.PK1WT cursor, bold;
          end
          /**/
          if (SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN) /* Cartons*/
            set SR0TM001.PK1NBCTN cursor, bold;
          end
          /**/
                                  /* IF SR0TM001.TF1CARCD NE*/
                                   /* SR0TW01.TF1CARCD;        /* Carrier*/
                                   /* code*/
           /* SET SR0TM001.TF1CARCD CURSOR,BRIGHT;*/
           /* END;*/
          /**/
          if (SR0TM001.PK1BLLAD[2] != SR0TW01.PK1BLLAD[2]) /* BOL*/
            set SR0TM001.PK1BLLAD[2] cursor, bold;
          end
          /**/
          converseLib.validationFailed(255); /* Msg*/
           /* This change not valid for DCMS shipments*/
          SRWREC.XXXERRID = "14000"; /* Msg location*/
          SR0TW00.XXX-MAP-FMAT-FL = "N"; /* Format map*/
          /**/
          exit stack; /* Display map*/
          /**/
        end
        /**/
      end
      /**/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* Verify if key field changed.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[1];

  SR0TW00.SR0TW-WORK-CTR1 = 0;

  SR0TW00.SR0TW-WORK-IDX = 1;

  while (SR0TW00.SR0TW-WORK-IDX <= 4)
    /**/
    if (SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)
      /**/
      SR0TW00.SR0TW-WORK-CTR1 = SR0TW00.SR0TW-WORK-CTR1 + 1;
    end
    /**/
    SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;
    /**/
  end

  if (SR0TM001.SR0TM-OPTION == "C")
    /**/
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[2];
    /**/
    SR0TW00.SR0TW-WORK-CTR2 = 0;
    /**/
    SR0TW00.SR0TW-WORK-IDX = 1;
    /**/
    while (SR0TW00.SR0TW-WORK-IDX <= 4)
      /**/
      if (SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)
        /**/
        SR0TW00.SR0TW-WORK-CTR2 = SR0TW00.SR0TW-WORK-CTR2 + 1;
      end
      /**/
      SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;
      /**/
    end
    /**/
  end

  if (SR0TW00.SR0TW-WORK-CTR1 < 4)
    /**/
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[1];
    /**/
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-NUM = SR0TM001.SR2BLLSU[1];
    /**/
    SR0TW00.SR0TW-WORK-IDX = 1;
    /**/
    while (SR0TW00.SR0TW-WORK-IDX <= 4)
      /**/
      if (
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)
        /**/
        SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT1[SR0TW-WORK-IDX] = 0;
      else
        /**/
        SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT1[SR0TW-WORK-IDX] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-NBYT[SR0TW-WORK-IDX];
        /**/
      end
      /**/
      SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;
      /**/
    end
    /**/
  end

  if (SR0TM001.SR0TM-OPTION == "C")
    /**/
    if (SR0TW00.SR0TW-WORK-CTR2 < 4)
      /**/
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-CHAR = SR0TM001.SR2BLLSU[2];
      /**/
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-NUM = SR0TM001.SR2BLLSU[2];
      /**/
      SR0TW00.SR0TW-WORK-IDX = 1;
      /**/
      while (SR0TW00.SR0TW-WORK-IDX <= 4)
        /**/
        if (
        SR0TW00.SR0TW-PK-BOL-SUB-NBR-CBYT[SR0TW-WORK-IDX] not numeric)
          /**/
          SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT2[SR0TW-WORK-IDX] = 0;
        else
          /**/
          SR0TW00.SR0TW-PK-BOL-SUB-NBR-WBYT2[SR0TW-WORK-IDX] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-NBYT[SR0TW-WORK-IDX];
          /**/
        end
        /**/
        SR0TW00.SR0TW-WORK-IDX = SR0TW00.SR0TW-WORK-IDX + 1;
        /**/
      end
      /**/
    end
    /**/
  end

  if ((SR0TW00.SR0TW-WORK-CTR1 >= 4
   || (SR0TW00.SR0TW-WORK-CTR2 >= 4 && SR0TM001.SR0TM-OPTION == "C"))
   || (SR0TM001.XWHCD != SR0TW01.XWHCD
   || SR0TM001.SR0TM-UNIT-OF-MEASURE
   != SR0TW01.SR0TW-UNIT-OF-MEASURE
   || SR0TM001.SR0TM-OPTION != SR0TW01.SR0TW-OPTION
   || SR0TM001.PK1BLLAD[1] != SR0TW01.PK1BLLAD[1]
   || (SR0TM001.PK1BLLAD[2] != SR0TW01.PK1BLLAD[2] && 
  SR0TM001.SR0TM-OPTION == "C")
   || SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 != SR0TW01.SR2BLLSU[1]
   || (SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 != SR0TW01.SR2BLLSU[2] && 
  SR0TM001.SR0TM-OPTION == "C")))
    /**/
    if (SR0TW01.SR0TW-OPTION == "M")
      SR0T-14100(); /* Highlight other changed fields*/
    end
    /**/
     /* ------------------------------------------------------------*/
     /* Determine if all the required key fields were entered.*/
     /* ------------------------------------------------------------*/
    /**/
    SR0T-14200(); /* Check for required key fields*/
    /**/
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
    /**/
    SR0TW01.XWHCD = SR0TM001.XWHCD;
    SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;
    SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
    SR0TW01.PK1BLLAD[1] = SR0TM001.PK1BLLAD[1];
    SR0TW01.PK1BLLAD[2] = SR0TM001.PK1BLLAD[2];
    if (SR0TW00.SR0TW-WORK-CTR1 < 4) /* if sub nbr not numeric*/
      SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL = "N";
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 = SR0TM001.SR2BLLSU[1];
      SR0TW01.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;
    else
      SR0TW00.SR0TW-BOL-SUB1-NOT-NUM-FL = "Y";
    end
    /**/
    if (SR0TW00.SR0TW-WORK-CTR2 < 4)
      SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL = "N";
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TM001.SR2BLLSU[2];
      SR0TW01.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
    else
      SR0TW00.SR0TW-BOL-SUB2-NOT-NUM-FL = "Y";
    end
    /**/
    SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    exit stack;
    /**/
  else
    /**/
    if (converseVar.eventKey is pf6) /* If split bol*/
      /**/
      if (SR0TM001.SR0TM-OPTION == "M") /* Modify option*/
         /* next sentece*/
      else
        SRWREC.XXXERRID = "14000"; /* Message location*/
        converseLib.validationFailed(187); /* Split bol is allowed only w/ modify*/
        set SR0TM001.SR0TM-OPTION cursor, bold; /* Highlight*/
        exit stack;
      end
      /**/
    end
    /**/
    if (SR0TM001.SR0TM-OPTION == "M" || SR0TM001.SR0TM-OPTION == "C")
      SR0T-14300(); /* Edit modified fields*/
    end
    /**/
  end

  if (converseVar.eventKey is pf15 && SR0TM001.SR0TM-OPTION == "M"
   && SR0TW00.SR0TW-RELEASE-COND-CD == " ")
    /**/
    SR0T-14400(); /* validate release shipment-AZ1000*/
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "H")
      /**/
      SR0TW00.SR0TW-RELEASE-COND-CD = "V";
      SR0TW00.SR0TW-REPEAT-FL = "Y";
      SR0TW00.SR0TW-AZORD-EOF-FL = "N";
      /**/
      set VAZORD01 empty;
      /**/
      VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;
      VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
      VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];
      /**/
      SR0TS-VAZORD01-S1(); /* Select 'S1' on VAZORD01 table*/
      /**/
      SR0TS-VAZORD01-N1(); /* Next 'N1' on VAZORD01 table*/
      /**/
      while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y" && 
      SR0TW00.SR0TW-REPEAT-FL == "Y")
        /**/
        if (VAZORD01.OP-DNT-SHIP-BFR-DT > XX0XW01.XX0XWDAT)
          /**/
          SR0TW00.SR0TW-RELEASE-COND-CD = "H";
          SR0TW00.SR0TW-REPEAT-FL = "N";
          /**/
        end
        /**/
        SR0TS-VAZORD01-N1(); /* Next 'N1' on VAZORD01 table*/
      end
      /**/
      SR0TS-VAZORD01-C1(); /* Close 'C1' on VAZORD01 table*/
    end
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "W")
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(240); /* Work In Process*/
      SR0TW00.SR0TW-RELEASE-COND-CD = " ";
      exit stack;
    end
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "N")
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(232); /* Some cartons not picked*/
      SR0TW00.SR0TW-RELEASE-COND-CD = " ";
      exit stack;
    end
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "S")
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(235); /* Stopped Shipment*/
      SR0TW00.SR0TW-RELEASE-COND-CD = " ";
      exit stack;
    end
    /**/
     /* DLVRUSA START*/
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "O")
      if (SR0TW01.XWHCD == "04" || SR0TW01.XWHCD == "07"
       || SR0TW01.XWHCD == "42" || SR0TW01.XWHCD == "51")
        SRWREC.XXXERRID = "14000"; /* Message location*/
        converseLib.validationFailed(260); /* BOL/ASN DATA iS OUT OF SYNC*/
        SR0TW00.SR0TW-RELEASE-COND-CD = " ";
        exit stack;
      end
    end
    /**/
     /* **** KIN#58226 new NIL process change starts*/
     /* IF SR0TW00.SR0TW-RELEASE-COND-CD EQ 'M';*/
     /* IF SR0TW01.XWHCD EQ '04' OR SR0TW01.XWHCD EQ '07'*/
     /* OR SR0TW01.XWHCD EQ '42' OR SR0TW01.XWHCD EQ '51';*/
     /* MOVE '14000' TO SRWREC.XXXERRID; /* Message location*/
     /* MOVE 261 TO EZEMNO;        /* MISSING GOAL SO NUMBER ON OTP*/
     /* MOVE ' ' TO SR0TW00.SR0TW-RELEASE-COND-CD;*/
     /* EZEFLO;*/
     /* END;*/
     /* END;*/
     /* **** KIN#58226 new NIL process changes end*/
    /**/
     /* DLVRUSA END*/
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "P")
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(233); /* PRO Number missing*/
      SR0TW00.SR0TW-RELEASE-COND-CD = " ";
      set SR0TM001.TF2PRONO cursor, bold; /* Highlight*/
      exit stack;
    end
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "H")
      SR0TW00.SR0TW-RELEASE-COND-CD = "C";
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(234); /* Pack & Hold*/
      exit stack;
    end
    /**/
    if (SR0TW00.SR0TW-RELEASE-COND-CD == "V")
      SR0TW00.SR0TW-RELEASE-COND-CD = "C";
      SRWREC.XXXERRID = "14000"; /* Message location*/
      converseLib.validationFailed(236); /* Verification Required*/
      exit stack;
    end
  end

  /* -----------------------------------------------------------------------*/
  /* 1) Code inserted to ensure that consolidates not done against from BOL*/
  /* which has previously been partially split*/
  /* -----------------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "C")
    if (SR0TW01.PK1BLLAD[1] != SR0TW01.PK1BLLAD[2])
      set SR2REC empty;
      SR2REC.XWHCD = SR0TW01.XWHCD;
      SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
      SR2REC.SR2BLLSU = 99;
      SR0TS-IO0800-SE();
      /**/
      if (SQLCA.VAGen_SQLCODE == +0 || SQLCA.VAGen_SQLCODE == -811)
        /**/
        SRWREC.XXXERRID = "14000";
        converseLib.validationFailed(249); /* Don't allow consolidate of*/
        set SR0TM001.PK1BLLAD[1] cursor, bold; /* split FROM BOL*/
        set SR0TM001.SR2BLLSU[1] bold;
        SR0TW01.PK1BLLAD[2] = 0;
        SR0TW01.SR2BLLSU[2] = 0;
        SR0TW00.XXX-MAP-DSP-CD = 1;
        SR0TW01.SR0TW-OPTION = "M";
        SR0TW00.XXX-MAP-FMAT-FL = "Y";
        SR0TW00.XXX-RQT-DATA-FL = "Y";
        SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL = "Y";
        SR0TW00.SR0TW-SPLIT-REQUESTED-FL = "N";
        exit stack;
      end
    end
  end

  /* -----------------------------------------------------------------------*/

end // end SR0T-14000

// Highlight other changed fields
Function SR0T-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.XCTCD != SR0TW01.XCTCD) /* Country changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XXXZIP != SR0TW01.XXXZIP) /* Zip changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XSTCD != SR0TW01.XSTCD) /* State changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XSTCD cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XXXCITY != SR0TW01.XXXCITY) /* * Zip changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XCTCD cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XXX-ADDR[3] cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2[SR0TW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XXX-ADDR[2] cursor, bold; /* Highlight*/
  end

  if (SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1[SR0TW-FR-TO-BOL-IND])
                                   /* Address changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.XXX-ADDR[1] cursor, bold; /* Highlight*/
  end

  if (SR0TM001.OP5ALTNM != SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND])
                                   /* Customer name changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.OP5ALTNM cursor, bold; /* Highlight*/
  end

  if (TF1REC.TF1MCARF == "Y" /* If misc carrier*/
   && SR0TM001.SR0TM-CARRIER-NAME != 
  SR0TW01.SR0TW-CARRIER-NAME[SR0TW-FR-TO-BOL-IND])
                                   /* and carrier name changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.SR0TM-CARRIER-NAME cursor, bold; /* Highlight*/
  end

  if (SR0TM001.TF1CARCD != SR0TW01.TF1CARCD[SR0TW-FR-TO-BOL-IND])
                                   /* Carrier changed*/
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(183); /* Field may not change*/
    set SR0TM001.TF1CARCD cursor, bold; /* Highlight*/
  end

  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    SRWREC.XXXERRID = "14100"; /* Message location*/
    converseLib.validationFailed(12); /* Invalid PF key*/
  end

end // end SR0T-14100

// Check required key fields
Function SR0T-14200()
   /* ------------------------------------------------------------*/
   /* Verify that the FROM bill of lading was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.PK1BLLAD[1] <= 0) /* If no FROM BOL entered*/
    SRWREC.XXXERRID = "14200"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0TM001.PK1BLLAD[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* Verify that an option was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "I") /* Inquire option*/
     /* next sentence*/
  else

    if (SR0TM001.SR0TM-OPTION == "M" /* Modify option*/
     || SR0TM001.SR0TM-OPTION == "C") /* or consolidate option*/

      if (COMMAREA.CACHGFL == "Y")
        /* next sentence*/
      else
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(110); /* Invalid option*/
        set SR0TM001.SR0TM-OPTION cursor, bold;
      end

    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(110); /* Invalid option*/
      set SR0TM001.SR0TM-OPTION cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify unit of measure.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-UNIT-OF-MEASURE == " ")
    SR0TM001.SR0TM-UNIT-OF-MEASURE = "U";
  else

    if (SR0TM001.SR0TM-UNIT-OF-MEASURE == "U" /* If English system*/
     || SR0TM001.SR0TM-UNIT-OF-MEASURE == "M") /* or metric system*/
      /* next sentence*/
    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(188); /* Must be 'U' or 'M'*/
      set SR0TM001.SR0TM-UNIT-OF-MEASURE cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that a warehouse code was entered.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.XWHCD == " ") /* If no warehouse entered*/

    SRWREC.XXXERRID = "14200"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0TM001.XWHCD cursor, bold;

  else

    if (SR0TM001.XWHCD in XWHTBL.XWHCD) /* If whse code in corp table*/

      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If active*/
        if (XWHTBL.XWTCD[sysVar.arrayIndex] == "01"
         && XWHTBL.XWHSTKLF[sysVar.arrayIndex] == "Y")
          /* next sentence*/
        else
          SRWREC.XXXERRID = "14200"; /* Message location*/
          converseLib.validationFailed(217); /* Warehouse restricted - use SR0R*/
          set SR0TM001.XWHCD cursor, bold;
        end
      else
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(2); /* Inactive whse*/
        set SR0TM001.XWHCD cursor, bold;
      end

    else
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(1); /* Invalid whse*/
      set SR0TM001.XWHCD cursor, bold;
    end

  end

   /* ------------------------------------------------------------*/
   /* When consolidating:*/
   /* - Verify that the TO bill of lading was entered*/
   /* - Verify that the consolidated flag was entered*/
   /* - Verify rush and sameday picking runs*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "C") /* IF CONSOLIDATE OPTION*/

    SR0TW01.XWHCD = SR0TM001.XWHCD;
    SR0TW01.PK1BLLAD[1] = SR0TM001.PK1BLLAD[1];
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 = SR0TM001.SR2BLLSU[1];
    SR0TW01.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;
    SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
    SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;
    SR0TW01.PK1BLLAD[2] = SR0TM001.PK1BLLAD[2];
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TM001.SR2BLLSU[2];
    SR0TW01.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
  /* MOVE SR0TM001.SR0TM-ALL-ORDERS-FL TO SR0TW01.SR0TW-ALL-ORDERS-FL;*/

    set SR0TM001 initial;
    SR0TM001.XWHCD = SR0TW01.XWHCD;
    SR0TM001.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];
    if (SR0TW00.SR0TW-WORK-CTR1 < 4)
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 = SR0TW01.SR2BLLSU[1];
      SR0TM001.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;
    else
      SR0TM001.SR2BLLSU[1] = " ";
    end
    SR0TM001.SR0TM-OPTION = SR0TW01.SR0TW-OPTION;
    SR0TM001.SR0TM-UNIT-OF-MEASURE = SR0TW01.SR0TW-UNIT-OF-MEASURE;
    SR0TM001.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];
    if (SR0TW00.SR0TW-WORK-CTR2 < 4)
      SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TW01.SR2BLLSU[2];
      SR0TM001.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
    else
      SR0TM001.SR2BLLSU[2] = " ";
    end
  /* MOVE SR0TW01.SR0TW-ALL-ORDERS-FL TO SR0TM001.SR0TM-ALL-ORDERS-FL;*/

    set SR0TW01 empty;

    if (SR0TM001.PK1BLLAD[1] <= 0) /* If no TO BOL*/
  /* AND SR0TM001.SR0TM-ALL-ORDERS-FL EQ ' ';*/
                                   /* and no all orders flag*/
      SRWREC.XXXERRID = "14200"; /* Message location*/
      converseLib.validationFailed(24); /* Required field*/
      set SR0TM001.PK1BLLAD[1] cursor, bold;
  /* SET SR0TM001.SR0TM-ALL-ORDERS-FL BRIGHT;*/
    else

  /* IF SR0TM001.SR0TM-ALL-ORDERS-FL EQ 'Y'*/
  /* OR SR0TM001.SR0TM-ALL-ORDERS-FL EQ 'N';*/
  /* ;  /* next sentence*/
  /* ELSE;*/
  /* MOVE '14200' TO SRWREC.XXXERRID;/* Message location*/
  /* MOVE 150 TO EZEMNO;        /* Must be 'Y' or 'N'*/
  /* SET SR0TM001.SR0TM-ALL-ORDERS-FL CURSOR,BRIGHT;*/
  /* END;*/

      if (SR0TM001.PK1BLLAD[2] <= 0)
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(24); /* Required field*/
        set SR0TM001.PK1BLLAD[2] cursor, bold;
      end

      if (SR0TW00.SR0TW-WORK-CTR1 < 4
       && SR0TW00.SR0TW-WORK-CTR2 < 4)
        if (SR0TM001.PK1BLLAD[1] == SR0TM001.PK1BLLAD[2] && 
        SR0TM001.SR2BLLSU[1] == SR0TM001.SR2BLLSU[2])
          SRWREC.XXXERRID = "14200"; /* Message location*/
          converseLib.validationFailed(175); /* Required field*/
          set SR0TM001.PK1BLLAD[1] cursor, bold;
        end
      end

      set PWHREC empty;

      PWHREC.XWHCD = SR0TM001.XWHCD; /* Warehouse code*/
      PWHREC.XXXPGMNO = "PK121R"; /* Rush program name*/

      SR0TS-IO4240-S(); /* Rush run*/

      if (PWHREC.XXXCMTCT != 0) /* If picking is running*/
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(176); /* Picking is running*/
        set SR0TM001.SR0TM-OPTION cursor, bold;
      end

      set PWHREC empty;

      PWHREC.XWHCD = SR0TM001.XWHCD; /* Warehouse code*/
      PWHREC.XXXPGMNO = "PK121S"; /* Sameday program name*/

      SR0TS-IO4240-S(); /* Sameday run*/

      if (PWHREC.XXXCMTCT != 0) /* If picking is running*/
        SRWREC.XXXERRID = "14200"; /* Message location*/
        converseLib.validationFailed(176); /* Picking is running*/
        set SR0TM001.SR0TM-OPTION cursor, bold;
      end

    end

  end

end // end SR0T-14200

// Edit modifiable fields
Function SR0T-14300()

  /* ==================================================================*/
  /* Call AZ9900 subroutine to check Work In Process stat codes*/
  /* ==================================================================*/

  if (converseVar.eventKey is pf6 || SR0TM001.SR0TM-OPTION == "C" || 
  SR0TM001.SR0TM-OPTION == "C" || 
  SR0TM001.TF1CARCD != SR0TW01.TF1CARCD[1] || 
  SR0TM001.SR0TM-CARRIER-NAME != SR0TW01.SR0TW-CARRIER-NAME || 
  SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1 || 
  SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2 || 
  SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3 || 
  SR0TM001.XXXCITY != SR0TW01.XXXCITY || 
  SR0TM001.XSTCD != SR0TW01.XSTCD || 
  SR0TM001.XXXZIP != SR0TW01.XXXZIP || 
  SR0TM001.XCTCD != SR0TW01.XCTCD)

    set AZTOTREC empty;

    AZTOTREC.XWH-WHSE-CD = SR0TW01.XWHCD;
    AZTOTREC.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
    AZTOTREC.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

    SR0TS-AZ9900-IP(); /* Sum up carton w/status 02, 04, 06*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If some found, don't allow release*/

      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(241); /* Work In Process*/
    end
  end

  /* ==================================================================*/
  /* Call AZ9900 subroutine to check Work In Process stat codes*/
  /* if option = consolidate.  Check "TO" BOL*/
  /* ==================================================================*/

  if (SR0TM001.SR0TM-OPTION == "C")

    set AZTOTREC empty;

    AZTOTREC.XWH-WHSE-CD = SR0TW01.XWHCD;
    AZTOTREC.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
    AZTOTREC.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

    SR0TS-AZ9900-IP(); /* Sum up carton w/status 02, 04, 06*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If some found, don't allow release*/

      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(241); /* Work In Process*/
    end
  end

   /* =================================================================*/
   /* Edit Modifiable Fields*/
   /* =================================================================*/

  if (SR0TM001.XSTCD == " " /* If no state*/
   && SR0TW00.XDV-DIV-CD == "01")
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(77); /* State required*/
    set SR0TM001.XSTCD cursor, bold; /* Highlight*/
  else

    if (SR0TM001.XCTCD == " " /* If no country*/
     || SR0TM001.XCTCD == "USA") /* or country is USA*/

      if (SR0TM001.XSTCD in XSTTBL.XSTCD /* If in  USA state table*/
       && XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

        if (SR0TM001.XCTCD == " ") /* If no country*/
          SR0TM001.XCTCD = "USA";
          SR0TW01.XCTCD = SR0TM001.XCTCD;
        end

        SR0T-14310(); /* Edit zip code*/

      else
        SRWREC.XXXERRID = "14300"; /* Message location*/
        converseLib.validationFailed(79); /* Invalid state*/
        set SR0TM001.XSTCD cursor, bold; /* Highlight*/
      end

    end

  end

  if (SR0TM001.XCTCD == " ") /* If no country*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0TM001.XCTCD cursor, bold; /* Highlight*/
  else

    if (SR0TM001.XCTCD in XCTTBL.XCTCD /* If in country table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
                  /* next sentence*/
    else
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(89); /* Invalid country code*/
      set SR0TM001.XCTCD cursor, bold; /* Highlight*/
    end

  end

  if (SR0TM001.XXXCITY == " ") /* If no city*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(76); /* City required*/
    set SR0TM001.XXXCITY cursor, bold; /* Highlight*/
  else
      /* next sentence*/
  end

  if (SR0TM001.XXX-ADDR[1] == " " /* If no address*/
   && SR0TM001.XXX-ADDR[2] == " " 
   && SR0TM001.XXX-ADDR[3] == " ")
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(75); /* One address line required*/
    set SR0TM001.XXX-ADDR[1] cursor, bold; /* Highlight*/
    set SR0TM001.XXX-ADDR[2] cursor, bold; /* Highlight*/
    set SR0TM001.XXX-ADDR[3] cursor, bold; /* Highlight*/
  else
       /* next sentence*/
  end

  if (SR0TM001.OP5ALTNM == " ") /* If no customer name*/
    SRWREC.XXXERRID = "14300"; /* Message location*/
    converseLib.validationFailed(24); /* Required field*/
    set SR0TM001.OP5ALTNM cursor, bold; /* Highlight*/
  else
      /* next sentence*/
  end

   /* Edit carrier code*/

  if (SR0TM001.TF1CARCD != SR0TW01.TF1CARCD[1]) /* Carrier changed*/

    set TF1REC empty;

    TF1REC.TF1CARCD = SR0TM001.TF1CARCD;

    SR0TS-IO0860-S(); /* Select dpick.vcarr001*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      if (TF1REC.TF1MCARF != "Y") /* If not misc carrier*/
        SR0TM001.SR0TM-CARRIER-NAME = TF1REC.TF1CARNM;
        SR0TW01.SR0TW-CARRIER-NAME = TF1REC.TF1CARNM;
      end

    else /* Not found*/
      SRWREC.XXXERRID = "14300"; /* Message location*/
      converseLib.validationFailed(5); /* Carrier code not on file*/
      set SR0TM001.TF1CARCD cursor, bold; /* Highlight*/
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end SR0T-14300

// Edit zip code
Function SR0T-14310()
   /* ------------------------------------------------------------*/
   /* Edit zip code.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.XXXZIP == " ") /* If no zip code*/
    SRWREC.XXXERRID = "14310"; /* Message location*/
    converseLib.validationFailed(78); /* Zip code required*/
    set SR0TM001.XXXZIP cursor, bold; /* Highlight*/
  else

    SR0TW00.XXXZIP = SR0TM001.XXXZIP; /* Zip code*/

    if (SR0TW00.SR0TW-XXXZIP-3 >= XSTTBL.XSTBNZIP[sysVar.arrayIndex]
     && SR0TW00.SR0TW-XXXZIP-3 <= XSTTBL.XSTENZIP[sysVar.arrayIndex])
       /* next sentence*/
    else

      if (XSTTBL.XSTAZIP1[sysVar.arrayIndex] > " "
       && SR0TW00.SR0TW-XXXZIP-3 == XSTTBL.XSTAZIP1[sysVar.arrayIndex])
         /* next sentence*/
      else

        if (XSTTBL.XSTAZIP2[sysVar.arrayIndex] > " "
         && SR0TW00.SR0TW-XXXZIP-3 == XSTTBL.XSTAZIP2[sysVar.arrayIndex])
           /* next sentence*/
        else
          SRWREC.XXXERRID = "14310"; /* Message location*/
          converseLib.validationFailed(81); /* Invalid zip*/
          set SR0TM001.XXXZIP cursor, bold; /* Highlight*/
        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Check existency in zip destination table.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.XXXZIP == " ") /* If no zip code*/
     /* next sentence*/
  else

    SR0TW00.XXXZIP = SR0TM001.XXXZIP; /* Zip code*/

    SR0T-30210(); /* Verify zip cd in dpick.vzipcd01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
       /* next sentence*/
    else /* Not found*/
      SRWREC.XXXERRID = "14310"; /* Message location*/
      converseLib.validationFailed(158); /* Not in zip dest tbl*/
      set SR0TM001.XXXZIP cursor, bold; /* Highlight*/
    end

  end

end // end SR0T-14310

// Validate Release - AZ1000
Function SR0T-14400()
   /* -----------------------------------------------------------------*/
   /* VALIDATE RELEASE BY CALLING SUBROUTINE AZ1000*/
   /* -----------------------------------------------------------------*/

  /* ==================================================================*/
  /* Call edit ASN subroutine - AZ1000*/
  /* ==================================================================*/

  SR0TS-AZ1000();

  if (WAZ1000.WAZ1000-WORK-IP-FL == "Y")
    SR0TW00.SR0TW-RELEASE-COND-CD = "W"; /* Work in process*/
  else
    if (WAZ1000.WAZ1000-SR-PICK-STAT-FL == "N")
      SR0TW00.SR0TW-RELEASE-COND-CD = "N"; /* Carton Not Picked*/
    else
      if (WAZ1000.WAZ1000-SR-STOP-ORD-SHP-FL == "Y")
        SR0TW00.SR0TW-RELEASE-COND-CD = "S"; /* Stop Ship exists*/
      else
        if (WAZ1000.WAZ1000-NO-PRONO-FL == "Y")
          SR0TW00.SR0TW-RELEASE-COND-CD = "P"; /* No Pro Number*/
        else
          if (WAZ1000.WAZ1000-SR-PACK-HLD-FL == "Y")
            SR0TW00.SR0TW-RELEASE-COND-CD = "H"; /* Pack&Hold exists*/
          else
            if (WAZ1000.WAZ1000-OUT-SYNC-ASN-DATA-FL == "Y")
              SR0TW00.SR0TW-RELEASE-COND-CD = "O"; /* out of sync*/
            else
               /* *** KIN#58226 NIL process changes start*/
               /* IF WAZ1000.WAZ1000-OTP-MISSING-GOAL-SO-FL EQ 'Y';*/
               /* MOVE 'M' TO SR0TW00.SR0TW-RELEASE-COND-CD;*/
               /* /* Missing GOAL So Number*/
               /* ELSE;*/
              SR0TW00.SR0TW-RELEASE-COND-CD = "V"; /* Verified*/
               /* END;*/
               /* *** KIN#58226 NIL process changes end*/
            end
          end
        end
      end
    end
  end

end // end SR0T-14400

// Obtain schedule for this BOL
Function SR0T-14500()

   /* ------------------------------------------------------------*/
   /* NOTE - Only performed for Apparel*/
   /* Determine the pick schedule for the map BOL so that the*/
   /* ShipRec header can be evaluated for a carrier name = "DCMS".*/
   /* 8/4/98 new additions for Retrofit Project*/
   /* ------------------------------------------------------------*/

  SR2REC.XWHCD = "51";
  SR2REC.SR2BLLSU = -1;

  SR0TS-IO0800-S3();

  SR0TS-IO0800-N3();

  SR0TS-IO0800-C3();

end // end SR0T-14500

// Process valid request
Function SR0T-15000()

   /* ------------------------------------------------------------*/
   /* Save any work record fields that may have been modified.*/
   /* ------------------------------------------------------------*/

  SRWREC.SRWXWHCD = SR0TM001.XWHCD; /* Warehouse code*/
  SRWREC.PK1BLLAD = SR0TM001.PK1BLLAD[1]; /* Bill of lading*/
  SRWREC.SRWRETOP = SR0TM001.SR0TM-OPTION; /* option*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.XWHCD != SR0TW01.XWHCD               /* Warehouse changed*/
   || SR0TM001.SR0TM-OPTION != SR0TW01.SR0TW-OPTION /* or option changed*/
   || SR0TM001.PK1BLLAD[1] != SR0TW01.PK1BLLAD[1]   /* or FROM BOL changed*/
   || (SR0TM001.PK1BLLAD[2] != SR0TW01.PK1BLLAD[2]  /* or TO BOL changed*/
   && SR0TM001.SR0TM-OPTION == "C")                 
   || SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1 != SR0TW01.SR2BLLSU[1]
   || (SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 != SR0TW01.SR2BLLSU[2]
   && SR0TM001.SR0TM-OPTION == "C"))               
                          /* OR SR0TM001.SR0TM-ALL-ORDERS-FL*/
                          /* NE SR0TW01.SR0TW-ALL-ORDERS-FL;*/

    SR0T-15050(); /* Move map 1 to working storage*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SR0TW00.SR0TW-RELEASE-COND-CD = " ";
    return; /* Return to previous process*/

  end

  if (SR0TM001.SR0TM-UNIT-OF-MEASURE != SR0TW01.SR0TW-UNIT-OF-MEASURE
  )
    SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;

    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process PF14 - Orders screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Orders screen requested*/

    if (SR0TM001.SR0TM-OPTION == "I")

      SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
      SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SR0TW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/
      return;

    else

      if (SR0TM001.SR0TM-OPTION == "M" && SR0TW00.SR0TW-ONE-ORDER-FL == "Y"
      )
        SR0T-50000();

      else

        SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
        SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
        SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
        SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
        SR0TW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/
        return;

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Process PF5 - Print BOL in SR0Q screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* Print BOL screen requested*/

    SR0T-60000(); /* Print BOL thru SR0Q*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Process PF6 - Split BOL.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "M" /* Modify option*/
   && converseVar.eventKey is pf6) /* Split BOL requested*/

    if (SR0TM001.SR2TNBCT == 1)
      SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
      SR0TW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SRWREC.XXXERRID = "15000";
      converseLib.validationFailed(229); /* Error splitting one carton*/
      return;

    end
    SR0TW00.SR0TW-SPLIT-REQUESTED-FL = "Y"; /* Split requested*/

    SR0TW00.SR0TW-WHOLE-ORDERS-FL = "N";

    SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
    SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SR0TW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Process changes if there are any.*/
   /* ------------------------------------------------------------*/

  if (SR0TM001.SR0TM-OPTION == "I" /* Inquire option*/
   || SR0TW00.SR0TW-RELEASE-COND-CD == "C")
     /* next sentence*/
  else

    if (SR0TM001.SR0TM-OPTION == "M")

      if (converseVar.eventKey is pf6)
         /* next sentence*/
      else

        SR0T-40000(); /* Process updates*/

      end

    else

      if (SR0TM001.SR0TM-ALL-ORDERS-FL == "Y")

        SR0T-40000(); /* Process updates*/

      else

        SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
        SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
        SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
        SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
        SR0TW00.XXX-CURR-PAGE-NBR = 1; /* Request for first page in ts*/

        return;

      end

    end

  end

  SR0T-15050(); /* Move map 1 to working storage*/

  if (SR0TW00.SR0TW-RELEASE-COND-CD == "V" && 
  SR0TM001.SR0TM-OPTION == "M")
    SR0TM-MESSAGE = "PRESS ENTER TO CONFIRM THIS ACTION";
    SR0TW00.SR0TW-RELEASE-COND-CD = "C";
    return;
  end

  if (SR0TW00.SR0TW-RELEASE-COND-CD == "C" && 
  SR0TM001.SR0TM-OPTION == "M")

    set TA3REC empty;

    SR0TW00.SR0TW-RELEASE-COND-CD = " ";

    TA3REC.TA3OPTN = "ASSIGN ";

    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA3REC.TA3RTNCD == 0)          /* Good return code*/

      if (TA3REC.TA3RGNID == "03") /* prod environment*/

        SR0T-15100(); /* create prod jcl*/

      else

        SR0T-15200(); /* create test jcl*/

      end

      SR0TS-XPTA0P();

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA6REC.TA6RTNCD == "0")        /* and normal return*/

        VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
        VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
        VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

        SR0TS-VAZHDR01-S();

        VAZHDR01.AZ-ASN-STAT-CD = "RL";
        VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

        SR0TS-VAZHDR01-U();

        SRWREC.XXXERRID = "15000";
        converseLib.validationFailed(214); /* Return message*/
        SR0TW01.SR0TW-OPTION = "I";
        SR0TW00.XXX-RQT-DATA-FL = "Y";
        SR0TW00.XXX-MAP-FMAT-FL = "Y";
        SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL = "Y";

        exit stack; /* Return to previous process*/

      else
        SRWREC.XXXERRID = "15000";
        converseLib.validationFailed(124); /* Error submitting jcl*/
        exit stack;
      end

    else
      SRWREC.XXXERRID = "15000";
      converseLib.validationFailed(124); /* Error calling ta0230*/
      exit stack;
    end

  end

end // end SR0T-15000

// Move Map 1 to working storage
Function SR0T-15050()

  SR0TW01.XWHCD = SR0TM001.XWHCD;
  SR0TW01.SR0TW-OPTION = SR0TM001.SR0TM-OPTION;
  SR0TW01.SR0TW-UNIT-OF-MEASURE = SR0TM001.SR0TM-UNIT-OF-MEASURE;
  SR0TW01.PK1BLLAD[1] = SR0TM001.PK1BLLAD[1];
  SR0TW01.PK1BLLAD[2] = SR0TM001.PK1BLLAD[2];
  SR0TW01.SR2BLLSU[1] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK1;
  SR0TW01.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
  SR0TW01.AZ-ASN-STAT-CD = SR0TM001.AZ-ASN-STAT-CD[1];

  /* -----------------------------------------------------------------*/
  /* Move Lead SO map fields to working storage*/
  /* -----------------------------------------------------------------*/

  SR0TW01.PK1NBCTN = SR0TM001.PK1NBCTN; /* Cartons*/
  SR0TW01.SR2QTYSH = SR0TM001.SR2NBITM; /* Units*/
  SR0TW01.PK1WT = SR0TM001.PK1WT; /* Weight*/
  SR0TW01.LEADSO-CHARGES = SR0TM001.SR0TM-LEADSO-CHARGES; /* Charges*/

  /* -----------------------------------------------------------------*/
  /* Move Total BOL map fields to working storage*/
  /* -----------------------------------------------------------------*/

  SR0TW01.SR2TNBCT[SR0TW-FR-TO-BOL-IND] = SR0TM001.SR2TNBCT;
  SR0TW01.SR0TW-SR2QTYSH-BOL[SR0TW-FR-TO-BOL-IND] = SR0TM001.SR0TM-SR2QTYSH-BOL;
  SR0TW01.SR0TW-PK1WT-BOL[SR0TW-FR-TO-BOL-IND] = SR0TM001.SR0TM-PK1WT-BOL;
  SR0TW01.SR0TW-SR2SHPCG-BOL = SR0TM001.SR0TM-SR2SHPCG-BOL;
  /* -----------------------------------------------------------------*/
  SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM = SR0TM001.SR0TM-BOL-ORDERS;
  SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM = SR0TM001.SR0TM-EXPTD-PK1WT-BOL;
  SR0TW01.TF1CARCD = SR0TM001.TF1CARCD;
  SR0TW01.TF2DSTCD = SR0TM001.TF2DSTCD;
  SR0TW01.TF2PRONO = SR0TM001.TF2PRONO;
  SR0TW01.KUCCOID = SR0TM001.KUCCOID;
  SR0TW01.OP5ALTNM = SR0TM001.OP5ALTNM;
  SR0TW01.XXX-ADDR1 = SR0TM001.XXX-ADDR[1];
  SR0TW01.XXX-ADDR2 = SR0TM001.XXX-ADDR[2];
  SR0TW01.XXX-ADDR3 = SR0TM001.XXX-ADDR[3];
  SR0TW01.XXXCITY = SR0TM001.XXXCITY;
  SR0TW01.XSTCD = SR0TM001.XSTCD;
  SR0TW01.XXXZIP = SR0TM001.XXXZIP;
  SR0TW01.XCTCD = SR0TM001.XCTCD;

end // end SR0T-15050

// Format Prod jcl
Function SR0T-15100()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty;

  set SR0TW10 empty;

  TA6REC.TA6INDEX = 1;
  SR0TW00.SR0TW-JCL-INDEX = 1;

  TA6REC.TA6-MAX-COND-CODE = 0004;

  while (SR0TTP1.TARJCL[SR0TW-JCL-INDEX] != "/*EOF")

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "J")
      SR0TW10.SR0TW-JOB-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.XWH-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "1")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42") /* deactivate movers for Canada*/
      else
        SR0TW10.SR0TW-OUTPUT-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW-OUTPUT-LIT == "OUTPUT")
                                  /* IF SRWREC.SRWXWHCD EQ '42';/**/
                                   /* deactivate movers for Canada*/
          /* MOVE '230' TO SR0TW10.SR0TW-OUTPUT-RMT;*/
          /* END;*/
          if (SRWREC.SRWXWHCD == "51")
            SR0TW10.SR0TW-OUTPUT-RMT = "123";
          end
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "W")
      SR0TW10.SR0TW-WHSE-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "P")
      SR0TW10.SR0TW-AZ1820-PARM-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW-AZ1820-PARM-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-AZ1820-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "F") /* ftp statements*/
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42")
        SR0TW10.SR0TW-FTP-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-FTP-LIT == "TARGET")
          if (SRWREC.SRWXWHCD == "02")
            SR0TW10.SR0TW-FTP-TARGET = "grsun1";
          end
          if (SRWREC.SRWXWHCD == "04")
            SR0TW10.SR0TW-FTP-TARGET = "memfware";
          end
          if (SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-FTP-TARGET = "wilfware";
          end
          if (SRWREC.SRWXWHCD == "42")
            SR0TW10.SR0TW-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end
        if (SR0TW10.SR0TW-FTP-LIT == "FTPPAR")
          SR0TW10.SR0TW-FTPPARMS-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "S") /* RSH statements*/
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
        SR0TW10.SR0TW-RSH-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-RSH-LIT == "TAR")
          if (SRWREC.SRWXWHCD == "02")
            SR0TW10.SR0TW-RSH-TARGET = "grsun1";
          end
          if (SRWREC.SRWXWHCD == "04")
            SR0TW10.SR0TW-RSH-TARGET = "memfware";
          end
          if (SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-RSH-TARGET = "wilfware";
          end
        end
        if (SR0TW10.SR0TW-RSH-LIT == "CMD")
          SR0TW10.SR0TW-RSH-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

     /* DLVRUSA START*/
    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == "G") /* ESP statements*/
      if (SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42"
       || SRWREC.SRWXWHCD == "51")
        SR0TW10.SR0TW-ESP-CARD = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-ESP-LIT == "CMD")
          SR0TW10.SR0TW-ESP-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
     /* Kintana Ticket # 34930 (Fix FTP Issue)  -- START*/
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-ESP-CARD;
     /* Kintana Ticket # 34930 (Fix FTP Issue)  -- END*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "G") /* ESP statements*/
      if (SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42"
       || SRWREC.SRWXWHCD == "51")
        SR0TW10.SR0TW-ESP-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-ESP-LIT == "CMD")
          SR0TW10.SR0TW-ESP-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
     /* Kintana Ticket # 34930 (Fix FTP Issue)  -- START*/
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-ESP-CARD;
     /* Kintana Ticket # 34930 (Fix FTP Issue)  -- END*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

     /* DLVRUSA END*/

    if (SR0TTP1.TARTYPE[SR0TW-JCL-INDEX] == " ")
      TA6REC.TARJCL[TA6INDEX] = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    SR0TW00.SR0TW-JCL-INDEX = SR0TW00.SR0TW-JCL-INDEX + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = SR0TTP1.TARJCL[SR0TW-JCL-INDEX];

end // end SR0T-15100

// Format Test jcl
Function SR0T-15200()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty;

  set SR0TW10 empty;

  SR0TW00.TA3APLID = TA3REC.TA3APLID;

  TA6REC.TA6INDEX = 1;
  SR0TW00.SR0TW-JCL-INDEX = 1;

  TA6REC.TA6-MAX-COND-CODE = 0004;

  while (SR0TTT1.TARJCL[SR0TW-JCL-INDEX] != "/*EOF")

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "J")
      SR0TW10.SR0TW-JOB-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.XWH-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "N")
      TA6REC.TARJCL[TA6INDEX] = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TARTYPE[TA6INDEX] = "N";
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "1")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
      else
        SR0TW10.SR0TW-OUTPUT-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW-OUTPUT-LIT == "OUTPUT")
          SR0TW10.SR0TW-OUTPUT-RMT = "950";
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "W")
      SR0TW10.SR0TW-WHSE-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "R")
      SR0TW10.SR0TW-SYSTSIN-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      if (TA3REC.TA3RGNID == "04"
       || TA3REC.TA3RGNID == "08")
        SR0TW10.SR0TW-DSN-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          SR0TW10.SR0TW-DSN-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            SR0TW10.SR0TW-DSN-VALUE = "F";
          else
            if (TA3REC.TA3RGNID == "06")
              SR0TW10.SR0TW-DSN-VALUE = "F";
            else
              SR0TW10.SR0TW-DSN-VALUE = "T";
            end
          end
        end
      end
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-SYSTSIN-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "P")
      SR0TW10.SR0TW-AZ1820-PARM-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      SR0TW-AZ1820-PARM-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-AZ1820-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "F") /* ftp statements*/
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42")
        SR0TW10.SR0TW-FTP-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-FTP-LIT == "TARGET")
          if (SRWREC.SRWXWHCD == "02"
           || SRWREC.SRWXWHCD == "04"
           || SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-FTP-TARGET = "camware";
          end
          if (SRWREC.SRWXWHCD == "42")
            SR0TW10.SR0TW-FTP-TARGET = "SCARBORO-SVR-16";
          end
        end
        if (SR0TW10.SR0TW-FTP-LIT == "FTPPAR")
          SR0TW10.SR0TW-FTPPARMS-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == "S") /* RSH statements*/
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
        SR0TW10.SR0TW-RSH-CARD = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-RSH-LIT == "TAR")
          SR0TW10.SR0TW-RSH-TARGET = "camware";
        end
        if (SR0TW10.SR0TW-RSH-LIT == "CMD")
          SR0TW10.SR0TW-RSH-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT1.TARTYPE[SR0TW-JCL-INDEX] == " ")
      TA6REC.TARJCL[TA6INDEX] = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    SR0TW00.SR0TW-JCL-INDEX = SR0TW00.SR0TW-JCL-INDEX + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = SR0TTT1.TARJCL[SR0TW-JCL-INDEX];

end // end SR0T-15200

// AZ1511 Job Submit
Function SR0T-15300()

   /* ------------------------------------------------------------*/
   /* Formats & Submits the JCL (AZ1511) for the Movers Upload*/
   /* process*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

    TA6REC.TA6ROW = " "; /* Initialize output JCL area*/

    TA6REC.TA6INDEX = 1; /* Initialize output index*/

    if (TA3REC.TA3RGNID == "03") /* Production Environment*/
      SR0T-85700(); /* Create PROD JCL*/
    else
      SR0T-85800(); /* Create TEST JCL*/
    end

    SR0TS-XPTA0P();

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA6REC.TA6RTNCD == "0"         /* and normal return*/
    )                                 
      SRWREC.XXXERRID = "15300"; /* Message location*/
      converseLib.validationFailed(220); /* Return message*/
      SR0TW00.XXX-MAP-DSP-CD = "1"; /* Display Map 1*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y";
      SR0TW00.XXX-RQT-DATA-FL = "Y";
      return;
    end

  end

end // end SR0T-15300

// Main process to display MAP 2
Function SR0T-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2 - Order data.*/
   /* Processing always returns to the top of this process and*/
   /* fall through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0T-21000(); /* Obtain the data to display*/

  SR0T-22000(); /* Format and display the map*/

  SR0T-23000(); /* Check attention identifier*/

  SR0T-24000(); /* Verify the entered data*/

  SR0T-25000(); /* Process valid input request*/

end // end SR0T-20000

// Obtain the data to display
Function SR0T-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Retrieve a page of order from temporary storage.*/
   /* ------------------------------------------------------------*/

  set SR0TW02 empty;

  TA5REC.TA5TSQIX = SR0TW00.XXX-CURR-PAGE-NBR;

  SR0TS-SR0TW02-TR(); /* Read FROM BOL TSQ record*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  SR0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/

end // end SR0T-21000

// Format and display the map
Function SR0T-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SR0T-22100(); /* Format the data in the map*/
  end

  if (SR0TW01.SR0TW-OPTION != "C")
    set SR0TM002.SR0TM-TO-BOL-LIT invisible, skip;
    set SR0TM002.SR0TM-TO-BOL-SUB-LIT invisible, skip;
    set SR0TM002.PK1BLLAD[2] skip, invisible;
    set SR0TM002.SR2BLLSU[2] skip, invisible;
  end

  if (SR0TW01.SR0TW-OPTION == "I" || SR0TW00.SR0TW-PF14-FL == "Y")
    set SR0TM002.SR0TM-ALL-ORDERS-LIT invisible, skip;
    set SR0TM002.SR0TM-ALL-ORDERS-FL noHighLight, skip;
  else
    set SR0TM002.SR0TM-ALL-ORDERS-LIT initialAttributes;
    set SR0TM002.SR0TM-ALL-ORDERS-FL initialAttributes;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/

    else

      SR0TM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0TM001.XXXERRID = SRWREC.XXXERRID;
                                   /* Message location*/

    set SR0TM002 alarm; /* Indicate sound alarm*/

  end

  converse SR0TM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = " "; /* Message location*/
  SRWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SR0TM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0TM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SR0TM002.CATOAP normal; /* TO application*/
  set SR0TM002.CAITEM normal; /* Application data*/

  set SR0TM002.XXX-LN-SEL-IND normal;
  set SR0TM002.SR0TM-ALL-ORDERS-LIT initialAttributes;
  set SR0TM002.SR0TM-ALL-ORDERS-FL initialAttributes;
  set SR0TM002.SR0TM-TO-BOL-LIT initialAttributes;
  set SR0TM002.SR0TM-TO-BOL-SUB-LIT initialAttributes;
  set SR0TM002.PK1BLLAD[2] initialAttributes;
  set SR0TM002.SR2BLLSU[2] initialAttributes;

end // end SR0T-22000

// Format data in the map
Function SR0T-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SR0TM002 initial; /* M002 input/output area*/

  SR0TW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Position the cursor to the first select line.*/
   /* ------------------------------------------------------------*/

  set SR0TM002.XXX-LN-SEL-IND[1] cursor; /* Cursor on first sel line*/

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.SRWMISCF[3] == "Y")
    SR0TM002.XWHCD = SRWREC.SRWXWHCD; /* Warehouse code*/

    SR0TM002.XXX-CURR-PAGE-NBR = 1;
    SR0TM002.XXX-HI-PAGE-NBR = SRWREC.SR2BLLSU[2];

    SR0TM002.SR0TM-OPTION = SRWREC.SRWRETOP; /* Option*/

    SR0TM002.PK1BLLAD = SRWREC.PK1BLLAD[1];
    SR0TM002.SR2BLLSU = SRWREC.SR2BLLSU[1];

    if (SRWREC.PK1BLLAD[2] == 1)
      SR0TW01.SR0TW-ALL-ORDERS-FL = "Y";
    end

  else
    SR0TM002.XWHCD = SR0TW01.XWHCD; /* Warehouse code*/
    SR0TM002.XWHABRV = SR0TW01.XWHABRV; /* Warehouse desc*/

    SR0TM002.XXX-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR;
  /* MOVE SR0TW01.XXX-HI-PAGE-NBR(SR0TW-FR-TO-BOL-IND)*/
    SR0TM002.XXX-HI-PAGE-NBR = SR0TW01.XXX-HI-PAGE-NBR[1];

    SR0TM002.SR0TM-OPTION = SR0TW01.SR0TW-OPTION; /* Option*/

    SR0TM002.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];
    SR0TM002.SR2BLLSU[1] = SR0TW01.SR2BLLSU[1];
    SR0TM002.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];
    SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2 = SR0TW01.SR2BLLSU[2];
    SR0TM002.SR2BLLSU[2] = SR0TW00.SR0TW-PK-BOL-SUB-NBR-WORK2;
    SR0TM002.SR0TM-ALL-ORDERS-FL = SR0TW01.SR0TW-ALL-ORDERS-FL;
  end

  SR0TW00.XXX-INX-FLD-NBR = 1;

   /* reset array attributes*/

  while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR)

    set SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.OP1CUOID[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.OP1NORID[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.PK1PKSCH[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.PK1NBCTN[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.SR2QTYSH[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.SR2SHPCG[XXX-INX-FLD-NBR] initialAttributes;
    set SR0TM002.PK1WT[XXX-INX-FLD-NBR] initialAttributes;

    SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

  end

  SR0TW00.XXX-INX-FLD-NBR = 1;

  while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR
   && SR0TW02.OP1CUOID[XXX-INX-FLD-NBR] > 0) /* Fill up the map*/

    SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = SR0TW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select indicator*/

    SR0TM002.OP1CUOID[XXX-INX-FLD-NBR] = SR0TW02.OP1CUOID[XXX-INX-FLD-NBR]; /* Cust ord id*/

    SR0TM002.OP1NORID[XXX-INX-FLD-NBR] = SR0TW02.OP1NORID[XXX-INX-FLD-NBR]; /* Nike ord id*/

    SR0TM002.AZ-ORD-STAT-CD[XXX-INX-FLD-NBR] = SR0TW02.AZ-ORD-STAT-CD[XXX-INX-FLD-NBR]; /* ASN order level status*/

    SR0TM002.PK1PKSCH[XXX-INX-FLD-NBR] = SR0TW02.PK1PKSCH[XXX-INX-FLD-NBR]; /* Schedule nbr*/

    if (SR0TW02.SR0TW-MULTI-SCHED-FL[XXX-INX-FLD-NBR] == "Y")
      set SR0TM002.PK1PKSCH[XXX-INX-FLD-NBR] reverse;
    end

    SR0TM002.PK1NBCTN[XXX-INX-FLD-NBR] = SR0TW02.PK1NBCTN[XXX-INX-FLD-NBR]; /* Nbr of cartons*/

    SR0TM002.SR2QTYSH[XXX-INX-FLD-NBR] = SR0TW02.SR2QTYSH[XXX-INX-FLD-NBR]; /* Shipped qty*/

    SR0TM002.SR2SHPCG[XXX-INX-FLD-NBR] = SR0TW02.SR2SHPCG[XXX-INX-FLD-NBR]; /* Shipping charges*/

    if (SR0TW01.SR0TW-UNIT-OF-MEASURE == "U")

      SR0TM002.PK1WT[XXX-INX-FLD-NBR] = SR0TW02.PK1WT[XXX-INX-FLD-NBR]; /* Weight*/

    else

      SR0TM002.PK1WT[XXX-INX-FLD-NBR] = mathLib.round(SR0TW02.PK1WT[XXX-INX-FLD-NBR] / 2.2046, -mathLib.decimals(SR0TM002.PK1WT[XXX-INX-FLD-NBR]));

    end

    SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

  end

  if (SR0TW00.XXX-INX-FLD-NBR > SR0TW00.XXX-INX-LMT-NBR)
    /* next sentence*/
  else

    while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR)

      set SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] skip, noHighLight;

      SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

    end

  end

end // end SR0T-22100

// Check attention identifier
Function SR0T-23000()

  if (SR0TW00.SR0TW-CONFIRM-FL == "Y")
    if (converseVar.eventKey not enter
     && converseVar.eventKey not pf3)
      converseLib.validationFailed(12); /* Invalid PF key*/
      set SR0TM002.CATOAP cursor, bold; /* Highlight*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SR0TW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SRWREC.SRWMISCF[3] = "N"; /* Clear flag to display M002*/

    SR0TW00.SR0TW-SPLIT-REQUESTED-FL = "N";

    if (SR0TW01.SR0TW-OPTION == "C") /* If consolidating*/
      SR0TW00.SR0TW-FR-TO-BOL-IND = 2; /* Points to TO BOL*/
    end

    exit stack;
  end

  if (converseVar.eventKey is pf14) /* Pf14 was pressed*/
    if (SR0TM001.SR0TM-OPTION != "I")

      SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SRWREC.XXXERRID = "23000"; /* Message location*/
      converseLib.validationFailed(12); /* Invalid pf key*/
      set SR0TM002.CATOAP cursor, bold; /* Highlight*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SR0TM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

      XSSRS-EXIT(); /* Exit to another application*/

    else

      SRWREC.XXXERRID = "23000"; /* Message location*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/
      set SR0TM002.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SR0TM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      SR0TW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SRWREC.SRWMISCF[3] = "N"; /* Clear flag to display M002*/

      SR0TW00.SR0TW-SPLIT-REQUESTED-FL = "N";

      if (SR0TW01.SR0TW-OPTION == "C") /* If consolidating*/
        SR0TW00.SR0TW-FR-TO-BOL-IND = 2; /* Points to TO BOL*/
      end

      exit stack;

    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/
    end

    XSSRS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.SR0TW-OPTION == "I")

    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf13)
      SRWREC.XXXERRID = "23000"; /* Message location*/
      converseLib.validationFailed(230); /* PF key not valid during inquire*/
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey not enter /* view selected order*/
     && converseVar.eventKey not pf7   /* scroll backward*/
     && converseVar.eventKey not pf8   /* scroll forward*/
     && converseVar.eventKey not pf14) /* transfer to SR0C*/

      SRWREC.XXXERRID = "23000"; /* Message location*/
      converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

      if (converseVar.eventKey is pakey) /* PA key was pressed*/

        converseLib.clearScreen();
         /* Clear screen before display*/

      end

      exit stack; /* Exit to display map*/

    end

  else

    if (converseVar.eventKey not enter /* ENTER was not pressed*/
     && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
     && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
     && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
     && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
     && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
     && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

      SRWREC.XXXERRID = "23000"; /* Message location*/
      converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

      if (converseVar.eventKey is pakey) /* PA key was pressed*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

      exit stack; /* Exit to display map*/

    end

  end

  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && (SR0TM001.SR0TM-OPTION == "M"
   && SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y"))

    if (SR0TW-NBR-OF-ORDERS-ACCUM == 1) /* Only one order exists,*/
                                   /* cannot perform whole order*/
                                   /* split of only one order*/
                                   /*  */
      SRWREC.XXXERRID = "23000"; /* Message location*/

      converseLib.validationFailed(227); /* see above message in comments*/

      exit stack; /* Exit to display map*/

    end

  end

  if (converseVar.eventKey is pf13) /* Partial orders function*/
    if (SR0TM001.SR0TM-OPTION == "C") /* Consolidate function*/
      SRWREC.XXXERRID = "23000";
      converseLib.validationFailed(248); /* Partial order consolidate not allowed*/
      set SR0TM001.PK1BLLAD[1] cursor, bold;
      set SR0TM001.SR2BLLSU[1] bold;
      SR0TW01.SR0TW-OPTION = "M";
      SR0TW01.PK1BLLAD[2] = 0;
      SR0TW01.SR2BLLSU[2] = 0;
      SR0TW00.XXX-MAP-DSP-CD = 1;
      SR0TW00.XXX-MAP-FMAT-FL = "Y";
      SR0TW00.XXX-RQT-DATA-FL = "Y";
      SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL = "Y";
      SR0TW00.SR0TW-SPLIT-REQUESTED-FL = "N";
      exit stack;
    end
  end

  if (converseVar.eventKey is enter)
    if (SR0TM001.SR0TM-OPTION != "I")
      if (SR0TW00.SR0TW-CONFIRM-FL != "Y" && SR0TW00.SR0TW-PF14-FL != "Y")
        converseLib.validationFailed(12); /* Invalid PF key*/
        set SR0TM002.CATOAP cursor, bold; /* Highlight*/
        exit stack;
      end
    end
  end

end // end SR0T-23000

// Verify entered data
Function SR0T-24000()

  if (SR0TW00.SR0TW-CONFIRM-FL == "Y") /* If confirmation required*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(130); /* Enter only with FAST PATH*/
    set SR0TM002.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Edit entered data (if any) for the current map.*/
   /* ------------------------------------------------------------*/

  if (SR0TM002.SR0TM-ALL-ORDERS-FL == " "
   || SR0TM002.SR0TM-ALL-ORDERS-FL == "Y"
   || SR0TM002.SR0TM-ALL-ORDERS-FL == "N")
     /* next sentence*/
  else

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(150); /* Must be 'Y' or 'N'*/
    set SR0TM002.SR0TM-ALL-ORDERS-FL cursor, bold;
                                   /* Highlight*/
  end

  SR0TW00.XXX-INX-FLD-NBR = 1;

  while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR
   && SR0TM002.OP1CUOID[XXX-INX-FLD-NBR] > 0)

    if (SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " "
     && SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != "*")

      if (SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S")
        SR0TW00.XXX-LN-SEL-IND = "Y"; /* Order selected*/
      else
        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(95); /* Only 'S' may be entered*/
        set SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/
      end

    end

    SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

  end

  if (converseVar.validationMsgNum > 0) /* If error*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf12) /* PF12 is pressed*/
    if (SR0TW00.XXX-LN-SEL-IND != "Y" /* No selections were made*/
     && SR0TM002.SR0TM-ALL-ORDERS-FL != "Y")
      SRWREC.XXXERRID = "24000"; /* Message location*/
      converseLib.validationFailed(223); /* Selection is required with PFkey*/
    end
  end /* If PF12 is pressed*/

  if (converseVar.eventKey is pf13) /* PF13 is pressed*/
    if (SR0TW00.XXX-LN-SEL-IND != "Y") /* No selections were made*/
      SRWREC.XXXERRID = "24000"; /* Message location*/
      converseLib.validationFailed(223); /* Selection is required with PFkey*/
    end
  end /* If PF13 is pressed*/

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SR0TW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(99); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SR0TW00.XXX-CURR-PAGE-NBR >= SR0TW01.XXX-HI-PAGE-NBR[1])
                                   /* and no more pages*/

    SRWREC.XXXERRID = "24000"; /* Message location*/
    converseLib.validationFailed(98); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If all orders selected and still browsing.*/
   /* ------------------------------------------------------------*/

  if (SR0TM002.SR0TM-ALL-ORDERS-FL == "Y")
                                   /* If all orders selected*/

    if (converseVar.eventKey not pf12)

      SRWREC.XXXERRID = "24000"; /* Message location*/
      converseLib.validationFailed(182); /* Press ENTER to process all orders*/
      set SR0TM002.SR0TM-ALL-ORDERS-FL cursor, bold;
                                   /* Highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If ENTER, make sure there are selected orders.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if (SR0TW01.SR0TW-OPTION == "M" /* If modify option*/
     && SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y")
                                   /* and BOL split requested*/

      if (SR0TW00.XXX-LN-SEL-IND != "Y") /* If no selection*/
        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(147); /* Select order or enter y to all orders*/
        set SR0TM002.XXX-LN-SEL-IND[1] cursor, bold;
      end

    else

      if (SR0TM002.SR0TM-ALL-ORDERS-FL != "Y"
       && SR0TW00.XXX-LN-SEL-IND != "Y") /* If no selection*/

        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(143); /* Select order or enter y to all orders*/
        set SR0TM002.XXX-LN-SEL-IND[1] cursor, bold;

      end

      if (SR0TM002.SR0TM-ALL-ORDERS-FL == "Y" /* If all orders*/
       && SR0TW00.XXX-LN-SEL-IND == "Y")      /* or some orders*/

        SRWREC.XXXERRID = "24000"; /* Message location*/
        converseLib.validationFailed(181); /* All orders and some orders selected*/
        set SR0TM002.SR0TM-ALL-ORDERS-FL cursor, bold;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end SR0T-24000

// Process valid request
Function SR0T-25000()

  SR0TW00.XXX-SAVE-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR;

  if (SR0TW00.SR0TW-CONFIRM-FL != "Y")
    if (SR0TM001.SR0TM-OPTION != "I")
      if ((converseVar.eventKey is enter
       && SR0TM002.SR0TM-ALL-ORDERS-FL == "Y")
       || converseVar.eventKey is pf12)
        SR0TW00.SR0TW-WHOLE-ORDERS-FL = "Y";
        SR0TW00.SR0TW-CONFIRM-FL = "Y";
        converseLib.validationFailed(224); /* Press Enter for the confirmation*/
        exit stack;
      end
    end
  end

  SR0TW00.SR0TW-CONFIRM-FL = "N";

   /* ------------------------------------------------------------*/
   /* Save changed key fields.*/
   /* ------------------------------------------------------------*/

  SR0TW01.SR0TW-ALL-ORDERS-FL = SR0TM002.SR0TM-ALL-ORDERS-FL;

  if (SR0TW01.SR0TW-ALL-ORDERS-FL == "Y")

    /* NEXT SENTENCE*/

  else /* If 'all orders' option selected*/

    SR0TW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;

    while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR
     && SR0TM002.OP1CUOID[XXX-INX-FLD-NBR] > 0)

      if (SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
      SR0TW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]) /* Select NE work storage*/

        SR0TW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];

        SR0TW00.XXX-PAGE-UPD-FL = "Y";

      end

      SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

    end /* For each line on current orders*/
                                   /* screen*/

    if (SR0TW00.XXX-PAGE-UPD-FL == "Y") /* If current page changed*/

      SR0TS-SR0TW02-TU(); /* Update FROM BOL TSQ record*/

    end

    /* ------------------------------------------------------------*/
    /* If scroll backward was requested, decrement the page number.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7) /* Scroll back requested*/

      SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* If scroll forward was requested, increment the page number.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/

      SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* Process ENTER.*/
    /* ------------------------------------------------------------*/

    if (SR0TM002.SR0TM-OPTION == "M" /* Orders processing for option*/
     && SR0TW00.SR0TW-PF14-FL == "Y") /* M and multiple orders for BOL*/
      SR0T-50000(); /* xfer to SR0C*/
    end

  end /* If 'all orders' option selected*/

  if (SR0TM002.SR0TM-OPTION == "I" /* If inquire option*/
   || SR0TM002.SR0TM-OPTION == "M") /* or modify option*/

    if (converseVar.eventKey is pf14) /* PF14 key*/

      SR0T-50000(); /* Process SR0C request*/
    end

    if (converseVar.eventKey is enter) /* Enter key to carton level*/

      SR0T-25050(); /* Build carton data TSqueue*/

      SR0TW00.XXX-MAP-DSP-CD = "3"; /* Display map 3*/

      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

      COMMAREA.CATOAP = " "; /* TO application*/
      COMMAREA.CAITEM = " "; /* Application data*/

      exit stack; /* Exit to display map*/

    end

  end

  SR0T-25050(); /* Build carton data TSqueue*/

  SR0TW00.XXX-MAP-DSP-CD = "3"; /* Display map 3*/

  SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
  SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  COMMAREA.CATOAP = " "; /* TO application*/
  COMMAREA.CAITEM = " "; /* Application data*/

  exit stack; /* Exit to display map*/

end // end SR0T-25000

// Build Carton data to display
Function SR0T-25050()
  if (SR0TW01.XXX-HI-PAGE-NBR[1] <= 0)

    return;

  end

  SR0TW00.XXX-CURR-PAGE-NBR = 1;

  SR0TS-SR0TW04-TP();

  set SR0TW02 empty;

  SR0TW00.XXX-INX-LMT-NBR = 10;

  SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = 0;
  SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = 0;
  SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;

  set SR0TW04 empty;

  while (converseVar.validationMsgNum == 0
   && SR0TW00.XXX-CURR-PAGE-NBR <= SR0TW01.XXX-HI-PAGE-NBR[1])

    SR0TS-SR0TW02-TR();

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

    while (converseVar.validationMsgNum == 0
     && SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR
     && SR0TW02.OP1CUOID[XXX-INX-FLD-NBR] > 0)

      if (SR0TW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S"
       || SR0TM002.SR0TM-ALL-ORDERS-FL == "Y")

        set VAZCTN01 empty;

        VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;
        VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
        VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];
        VAZCTN01.OP-CUST-ORD-ID = SR0TW02.OP1CUOID[XXX-INX-FLD-NBR];
        VAZCTN01.OP-NIKE-ORD-ID = SR0TW02.OP1NORID[XXX-INX-FLD-NBR];
        VAZCTN01.PK-PICK-SCHED-NBR = -1;

        SR0TS-VAZCTN01-S6();

        SR0TS-VAZCTN01-N6();

        if (SR0TW00.SR0TW-AZCTN-EOF-FL == "Y")

          SRWREC.XXXMSGNO = "25050";
          converseLib.validationFailed(203);
          set SR0TM002.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
          SR0TW00.SR0TW-FR-TO-BOL-IND = 1;
          SR0TW00.XXX-MAP-DSP-CD = "2";

          SR0TS-VAZCTN01-C6();

          exit stack;

        end

        while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

          while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y"
           && SR0TW00.SR0TW-M800-INX-FLD-NBR
           <= SR0TW00.SR0TW-M800-INX-LMT-NBR)

            if ((VAZCTN01.OP-CUST-ORD-ID
             != SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
             || VAZCTN01.OP-NIKE-ORD-ID
             != SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID))

              SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = VAZCTN01.OP-CUST-ORD-ID;

              SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = VAZCTN01.OP-NIKE-ORD-ID;

              SR0TW00.SR0TW-BEGINNING-OF-ORDER-FL = "Y";

            end

            while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y"
             && SR0TW00.SR0TW-M800-INX-FLD-NBR
             <= SR0TW00.SR0TW-M800-INX-LMT-NBR
             && (VAZCTN01.OP-CUST-ORD-ID
             == SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
             && VAZCTN01.OP-NIKE-ORD-ID
             == SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID))

              if (SR0TW00.SR0TW-BEGINNING-OF-ORDER-FL == "Y")

                SR0TW00.SR0TW-BEGINNING-OF-ORDER-FL = "N";

                SR0TW04.SR0TW-FIRST-CARTON-OF-ORDER-FL[SR0TW-M800-INX-FLD-NBR] = "Y";

              else

                SR0TW04.SR0TW-FIRST-CARTON-OF-ORDER-FL[SR0TW-M800-INX-FLD-NBR] = "N";

              end

              SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] = " ";

              SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.OP-CUST-ORD-ID;

              SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.OP-NIKE-ORD-ID;

              SR0TW04.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-PICK-SCHED-NBR;

              SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-CRTN-SEQ-NBR;

              SR0TW04.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-MOVERS-STAT-CD;

              SR0TW04.PK-CRTN-UNIT-QTY[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-CRTN-UNIT-QTY;

              SR0TW04.PK-ACTL-CRTN-WT[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-ACTL-CRTN-WT;

              SR0TW04.PK-CRTN-CHARGE-AMT[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.PK-CRTN-CHARGE-AMT;

              SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.TS-NIKE-PL-NBR;

              SR0TW04.ZZ-CHNG-CNT[SR0TW-M800-INX-FLD-NBR] = VAZCTN01.ZZ-CHNG-CNT;

              SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

              SR0TS-VAZCTN01-N6();

            end

            if (SR0TW00.SR0TW-M800-INX-FLD-NBR
             > SR0TW00.SR0TW-M800-INX-LMT-NBR)

              SR0TS-SR0TW04-TA();

              SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;

              set SR0TW04 empty;

            end

          end

        end

        SR0TS-VAZCTN01-C6();

      end

      SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

    end

    SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR + 1;

  end

  if (SR0TW00.SR0TW-M800-INX-FLD-NBR > 1)

    SR0TS-SR0TW04-TA();

  end

end // end SR0T-25050

// Retrieve FROM/TO BOL orders
Function SR0T-30000()

  SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM = 0;
  SR0TW00.SR0TW-PK1WT-ACCUM2 = 0;
  SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM = 0;
  SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM = 0;
  SR0TW01.SR0TW-SR2SHPCG-BOL = 0;
  SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM = 0;
  SR0TW00.SR0TW-SR2TNBCT-ACCUM = 0;
  SR0TW00.SR0TW-PK1WT-BOL-ACCUM = 0;
  SR0TW00.SR0TW-SR2QTYSH-BOL-ACCUM = 0;
  SR0TW00.SR0TW-CHARGES-FOUND-FL = "N";

   /* ------------------------------------------------------------*/
   /* Retrieve "TO BOL" orders if option = C*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.SR0TW-OPTION == "C" /* If consolidating*/
   && SR0TW00.SR0TW-CREATE-TO-BOL-FL != "Y") /* to an existing TO BOL*/

    SR0TW00.SR0TW-CONSOL-FL = "Y";

    set SR0TW02 empty;

    set VAZORD01 empty;

    VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;
    VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
    VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

    SR0TS-VAZORD01-S1();

    SR0TS-VAZORD01-N1(); /* Initial Select*/

    if (SR0TW00.SR0TW-AZORD-EOF-FL == "Y")

      SRWREC.XXXERRID = "30000"; /* Message location*/
      converseLib.validationFailed(140); /* No orders found for FROM BOL*/
      set SR0TM001.PK1BLLAD[2] cursor, bold;
      SR0TS-VAZORD01-C1(); /* Close Cursor*/
      return;

    end

    SR0TW00.SR0TW-OP-ONETIME-SHIP-FL = VAZORD01.OP-ONETIME-SHIP-FL;

    SR0TW00.SR0TW-OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    SR0TW00.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    SR0TW00.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    SR0TW00.XDV-DIV-CD = VAZORD01.XDV-DIV-CD;

    set VAZCTN01 empty;

    VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;

    VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;

    VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;

    VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;

    VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

    SR0TS-VAZCTN01-S1();
    SR0TS-VAZCTN01-N1();
    SR0TW00.SR0TW-TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR;

    SR0TS-VAZCTN01-C1();
    SR0TW00.SR0TW-LEAD-SO = SR0TW01.PK1BLLAD[2];

    SR0TW00.SR0TW-LEAD-SO-IN-MULT-SCHED-FL = "N";

    SR0TW00.SR0TW-FR-TO-BOL-IND = 2; /* Index set to FROM BOL*/

    SR0TW01.SR0TW-ORDER-CNT[2] = 0; /* FROM BOL order count*/

    SR0T-30200(); /* Save lead SO data*/

    SR0TS-SR0TW03-TP(); /* Purge temporary storage*/

    SR0TW00.XXX-INX-LMT-NBR = 10; /* Index limit*/

    SR0TW00.XXX-INX-FLD-NBR = 1; /* Index to count order*/

    SR0TW00.SR0TW-FIRST-ORDER-READ-FL = "Y";

    while (SR0TW00.SR0TW-AZORD-EOF-FL == "N")

      SR0T-30300(); /* Save BOL data*/

      SR0T-30400(); /* Save TO BOL orders*/

      SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM = SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM + 1;

      SR0TS-VAZORD01-N1(); /* Fetch next order*/

      SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

      if (SR0TW00.XXX-INX-FLD-NBR > SR0TW00.XXX-INX-LMT-NBR)

        SR0TS-SR0TW03-TA(); /* Add TO BOL Order TSQ record*/

      end

    end

    SR0TS-VAZORD01-C1(); /* Close cursor dship.vsrord01*/

    if (SR0TW00.XXX-INX-FLD-NBR > 1)

      SR0TS-SR0TW03-TA(); /* Add TO BOL Order TSQ record*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Retrieve "FROM BOL" orders.*/
   /* ------------------------------------------------------------*/

  set SR0TW02 empty;

  set VAZORD01 empty;

  SR0TW00.SR0TW-CONSOL-FL = "N";

  SR0TW00.SR0TW-CHARGES-FOUND-FL = "N";

  VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZORD01-S1();

  SR0TS-VAZORD01-N1(); /* Initial Select*/

  if (SR0TW00.SR0TW-AZORD-EOF-FL == "Y")

    SRWREC.XXXERRID = "30000"; /* Message location*/
    converseLib.validationFailed(140); /* No orders found for FROM BOL*/
    set SR0TM001.PK1BLLAD[1] cursor, bold;
    SR0TS-VAZORD01-C1(); /* Close Cursor*/
    return;

  end

  SR0TW00.SR0TW-OP-ONETIME-SHIP-FL = VAZORD01.OP-ONETIME-SHIP-FL;

  SR0TW00.SR0TW-OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  SR0TW00.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  SR0TW00.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
  SR0TW00.XDV-DIV-CD = VAZORD01.XDV-DIV-CD;

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;

  VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;

  VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;

  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;

  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  SR0TS-VAZCTN01-S1();
  SR0TS-VAZCTN01-N1();
  SR0TW00.SR0TW-TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR;

  SR0TS-VAZCTN01-C1();
  SR0TW00.SR0TW-LEAD-SO = SR0TW01.PK1BLLAD[1];

  SR0TW00.SR0TW-LEAD-SO-IN-MULT-SCHED-FL = "N";

  SR0TW00.SR0TW-FR-TO-BOL-IND = 1; /* Index set to FROM BOL*/

  SR0TW01.SR0TW-ORDER-CNT[1] = 0; /* FROM BOL order count*/

  SR0T-30200(); /* Save lead SO data*/

  SR0TS-SR0TW02-TP(); /* Purge temporary storage*/

  SR0TW00.XXX-INX-LMT-NBR = 10; /* Index limit*/

  SR0TW00.XXX-INX-FLD-NBR = 1; /* Index to count order*/

  SR0TW00.SR0TW-FIRST-ORDER-READ-FL = "Y";

  while (SR0TW00.SR0TW-AZORD-EOF-FL == "N")

    SR0T-30300(); /* Save BOL data*/

    SR0T-30400(); /* Save FROM BOL orders*/

    SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM = SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM + 1;

    SR0TS-VAZORD01-N1(); /* Fetch next order*/

    SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

    if (SR0TW00.XXX-INX-FLD-NBR > SR0TW00.XXX-INX-LMT-NBR)

      SR0TS-SR0TW02-TA(); /* Add FROM BOL Order TSQ record*/

    end

  end

  SR0TS-VAZORD01-C1(); /* Close cursor dship.vsrord01*/

  if (SR0TW00.XXX-INX-FLD-NBR > 1)

    SR0TS-SR0TW02-TA(); /* Add FROM BOL Order TSQ record*/

  end

  if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM > 1)

    SR0TW00.SR0TW-ONE-ORDER-FL = "N";

  else

    SR0TW00.SR0TW-ONE-ORDER-FL = "Y";

  end

  SR0TW01.SR0TW-SR2SHPCG-BOL = SR0TW01.SR0TW-SR2SHPCG-BOL +   (SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM + SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM);

end // end SR0T-30000

// Get Lead SO/Total BOL data
Function SR0T-30200()
   /* ------------------------------------------------------------*/
   /* Save FROM/TO lead SO data to display M001.*/
   /* ------------------------------------------------------------*/

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];
  VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];
  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  SR0TS-AZ1120-SM();

  SR0TW01.OP1CUOID[SR0TW-FR-TO-BOL-IND] = VAZORD01.OP-CUST-ORD-ID;
  SR0TW01.OP1NORID[SR0TW-FR-TO-BOL-IND] = VAZORD01.OP-NIKE-ORD-ID;
  SR0TW01.PK1PKSCH[SR0TW-FR-TO-BOL-IND] = VAZCTN01.PK-PICK-SCHED-NBR;

   /* ------------------------------------------------------------*/
   /* Check Lead SO in Multiple Schedules. Don't allow chgs update*/
   /* ------------------------------------------------------------*/

  SR0TS-AZ1120-SD();

  if (SQLCA.VAGen_SQLCODE == -811)

    SR0TW00.SR0TW-LEADSO-MSF = "Y";

  else

    SR0TW00.SR0TW-LEADSO-MSF = "N";

  end

  /* =====================================================================*/
  /* Save Lead SO Data*/
  /* =====================================================================*/

  SR0TW00.SR0TW-LEADSO-XWHCD = SR0TW01.XWHCD;

  SR0TW00.SR0TW-LEADSO-PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];

  SR0TW00.SR0TW-LEADSO-SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;

  SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  SR0TW00.SR0TW-LEADSO-PK1PKSCH = SR0TW01.PK1PKSCH[SR0TW-FR-TO-BOL-IND];

  SR0TW01.PK1NBCTN = VAZORD01.AZ-TOT-ORD-CARTONS; /* Cartons*/

  SR0TW01.SR2QTYSH = VAZORD01.OP-ORD-TOT-UNITS; /* Units*/

  SR0TW01.PK1WT = VAZORD01.AZ-TOT-ORD-CART-WT; /* Weight*/

  /* ===================================================================*/
  /* Code to get lead SO Charges*/
  /* ===================================================================*/

  SR0TW00.SR0TW-SRORD-EOF-FL = "N";
  SR0TW00.SR0TW-CHARGES-FOUND-FL = "N";
  SR0TW01.LEADSO-CHARGES = 0;

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW00.SR0TW-LEADSO-XWHCD;
  SR2REC.PK1BLLAD = SR0TW00.SR0TW-LEADSO-PK1BLLAD;
  SR2REC.SR2BLLSU = SR0TW00.SR0TW-LEADSO-SR2BLLSU;
  SR2REC.OP1CUOID = SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID;
  SR2REC.OP1NORID = SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID;
  SR2REC.PK1PKSCH = -1;

  SR0TS-IO0800-S9();
  SR0TS-IO0800-N9();

  if (SQLCA.VAGen_SQLCODE == 0 && SR2REC.SR2BLLSU != 99)

    while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

      SR0TW01.LEADSO-CHARGES = SR0TW01.LEADSO-CHARGES +       SR2REC.SR2SHPCG;

      SR0TS-IO0800-N9();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SRORD-EOF-FL = "Y";

      end

    end

    SR0TS-IO0800-C9();

    if (SR0TW01.LEADSO-CHARGES > 0)

      SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

    end

  else

    SR0TS-IO0800-C9();

  end

  if (SR0TW00.SR0TW-CHARGES-FOUND-FL == "N")

    SR0TW00.SR0TW-SPBOL-EOF-FL = "N";

    set VSPBOL01 empty;

    VSPBOL01.XWH-WHSE-CD = SR0TW00.SR0TW-LEADSO-XWHCD;
    VSPBOL01.PK-BILL-OF-LADING = SR0TW00.SR0TW-LEADSO-PK1BLLAD;
    VSPBOL01.PK-BOL-SUB-NBR = SR0TW00.SR0TW-LEADSO-SR2BLLSU;
    VSPBOL01.OP-CUST-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID;
    VSPBOL01.OP-NIKE-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID;
    VSPBOL01.PK-PICK-SCHED-NBR = -1;

    SR0TS-VSPBOL01-S2();
    SR0TS-VSPBOL01-N2();

    if (SQLCA.VAGen_SQLCODE == 0)

      while (SR0TW00.SR0TW-SPBOL-EOF-FL != "Y")

        SR0TW01.LEADSO-CHARGES = SR0TW01.LEADSO-CHARGES +         VSPBOL01.SHP-CHG-OVRD-AMT;

        SR0TS-VSPBOL01-N2();

        if (SQLCA.VAGen_SQLCODE == +100)

          SR0TW00.SR0TW-SPBOL-EOF-FL = "Y";

        end

      end

      SR0TS-VSPBOL01-C2();

      if (SR0TW01.LEADSO-CHARGES > 0)

        SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

      end

    else

      SR0TS-VSPBOL01-C2();

    end

  end

  if (SR0TW00.SR0TW-CHARGES-FOUND-FL != "Y")

    set AZTOTREC empty;

    AZTOTREC.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    AZTOTREC.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    AZTOTREC.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    AZTOTREC.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    AZTOTREC.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    AZTOTREC.TS-NIKE-PL-NBR = -1;

    SR0TS-AZ9900-SC();

    if (SR0TW00.SR0TW-CHARGES-FOUND-FL != "Y")

      SR0TW01.LEADSO-CHARGES = SR0TW01.LEADSO-CHARGES + AZTOTREC.SR0TW-TOT-CHARGE;

    end

  else

    SR0TW00.SR0TW-CHARGES-FOUND-FL = "N";

  end
  /* ---------------------------------------------------------------------*/

  set TF1REC empty;

  TF1REC.TF1CARCD = SR0TW01.TF1CARCD[SR0TW-FR-TO-BOL-IND];

  SR0TS-IO0860-S(); /* Select dpick.vcarr001*/
                                  /* This data is used downstream*/
  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-VAZHDR01-S();

  SR0TW01.TF1CARCD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.TF-CARR-CD;

  SR0TW01.SR0TW-CARRIER-NAME[SR0TW-FR-TO-BOL-IND] = VAZHDR01.TF-CARR-NM;

  SR0TW01.PK4CARSP[SR0TW-FR-TO-BOL-IND] = VAZHDR01.PK-CARR-SPF-CD;
                                  /* Carrier-specified code*/
  SR0TW01.TF2DSTCD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.TF-DEST-CD;
                                  /* Destination code*/
  if (SR0TW01.TF2DSTCD[SR0TW-FR-TO-BOL-IND] == " ") /* If no destination*/

    if (SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND] == " ") /* If no zip code*/
      /* next sentence*/
    else

      SR0TW00.XXXZIP = SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND];

      SR0T-30210(); /* Get destination fr dpick.vzipcd01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

        SR0TW01.TF2DSTCD[SR0TW-FR-TO-BOL-IND] = TF3REC.TF3DSTCD;

      end

    end

  end

  SR0TW01.TF2PRONO[SR0TW-FR-TO-BOL-IND] = VAZHDR01.TF-PRO-NBR;

  /* =====================================================================*/
  /* Save Total BOL Data*/
  /* =====================================================================*/

  SR0TW00.SR0TW-SR2TNBCT-ACCUM = SR0TW00.SR0TW-SR2TNBCT-ACCUM +   VAZHDR01.SR-TOT-NBR-CARTONS;

  SR0TW00.SR0TW-PK1WT-BOL-ACCUM = SR0TW00.SR0TW-PK1WT-BOL-ACCUM +   VAZHDR01.AZ-TOT-SHPMT-WT;

  set AZTOTREC empty;

  AZTOTREC.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;

  AZTOTREC.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;

  AZTOTREC.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  SR0TS-AZ9900-SO();

  SR0TW00.SR0TW-SR2QTYSH-BOL-ACCUM = SR0TW00.SR0TW-SR2QTYSH-BOL-ACCUM +   AZTOTREC.SR0TW-TOT-UNIT-QTY;

  /* =====================================================================*/

  SR0TW01.SR0TW-SR1SHPDT-CCYYMMDD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.PK-SHPMT-RLSD-DATE;

  SR0TW01.XBCCD[SR0TW-FR-TO-BOL-IND] = VAZORD01.XBC-BRAND-CD;
                                   /* Brand code*/
  SR0TW01.KUCCOID[SR0TW-FR-TO-BOL-IND] = VAZORD01.CU-CO-ID;
                                   /* Customer id*/
  SR0TW01.KUMSTRID[SR0TW-FR-TO-BOL-IND] = VAZORD01.CU-STOR-ID;
                                   /* Store id*/

  SR0TW01.KUVDCCID[SR0TW-FR-TO-BOL-IND] = VAZHDR01.CU-DISTCTR-CO-ID;
                                   /* Dist center company id*/
  SR0TW01.KUVDCSID[SR0TW-FR-TO-BOL-IND] = VAZHDR01.CU-DISTCTR-STOR-ID;

  SR0TW01.SR2SHPCD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.SR-SHGRP-ADDR-CD;
  if (VAZHDR01.SR-SHGRP-ADDR-CD == "2"
   || SR0TW00.SR0TW-OP-ONETIME-SHIP-FL == "Y")

    set PWOREC empty;
    PWOREC.XWHCD = VAZHDR01.XWH-WHSE-CD;
    PWOREC.PK1BLLAD = VAZHDR01.PK-BILL-OF-LADING;
    PWOREC.SR2BLLSU = VAZHDR01.PK-BOL-SUB-NBR;

    SR0TS-IO5770-S5();
    SR0TS-IO5770-N5();

    if (PWOREC.KUCCONM > " ") /* esmit2 11/25/98 fix*/
      SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = PWOREC.KUCCONM;
    end

    SR0TW01.XXX-ADDR1[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XXX-ADDR1;
    SR0TW01.XXX-ADDR2[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XXX-ADDR2;
    SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XXX-ADDR3;
    SR0TW01.XXX-ADDR4[SR0TW-FR-TO-BOL-IND] = " ";
    SR0TW01.XXX-ADDR5[SR0TW-FR-TO-BOL-IND] = " ";
    SR0TW01.XXX-ADDR6[SR0TW-FR-TO-BOL-IND] = " ";
    SR0TW01.XXXCITY[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XXX-CITY;
    SR0TW01.XSTCD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XST-ST-CD;
    SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XXX-ZIP;
    SR0TW01.XCTCD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.XCT-CTRY-CD;
    SR0TS-IO5770-C5();

  else
    set KUMREC empty;

    KUMREC.KUCCOID = VAZORD01.CU-CO-ID;

    KUMREC.KUMSTRID = VAZORD01.CU-STOR-ID;

    SR0TS-IO0340-S(); /* Select from DCUST.VSTORE01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found in dcust.vstore01*/

      SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = KUMREC.KUMSTRNM;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* Not in dcust.vstore01*/

        set PK6REC empty;

        PK6REC.KUCCOID = VAZORD01.CU-CO-ID; /* Customer nbr*/

        PK6REC.KUMSTRID = VAZORD01.CU-STOR-ID; /* Store id*/

        SR0TS-IO1830-S(); /* Get address from dpick.vpkcus01*/

        SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = PK6REC.KUMSTRNM;

      end

    end

  end

  /* ===================================================================*/
  /* Code to accumulate Total BOL Estimated Weight*/
  /* ===================================================================*/

  SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

  set PWOREC empty;

  PWOREC.XWHCD = SR0TW01.XWHCD;
  PWOREC.PK1BLLAD = VAZORD01.PK-BILL-OF-LADING;
  PWOREC.SR2BLLSU = VAZORD01.PK-BOL-SUB-NBR;

  SR0TS-IO5770-S4();
  SR0TS-IO5770-N4();

  if (SQLCA.VAGen_SQLCODE == +100)

    SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

  end

  while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

    SR0TW00.SR0TW-EXPC-TOT-ORD-WT = 0; /* Init Est Ord Wt*/

    SR0TW00.SR0TW-SPLIT-EOF-FL = "N";

    set PWPREC empty;

    PWPREC.XWHCD = PWOREC.XWHCD;
    PWPREC.TSIPLNBR = PWOREC.TSIPLNBR;
    PWPREC.OP1CUOID = PWOREC.OP1CUOID;
    PWPREC.OP1NORID = PWOREC.OP1NORID;
    PWPREC.OP1PARTN = PWOREC.OP1PARTN; /* Set up key for SPLIT*/

    SR0TS-IO5760-SB();
    SR0TS-IO5760-NB();

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

    end

    SR0TW00.SR0TW-PREV-CRTN-NBR = 0;

    while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

      if (PWPREC.PKDNCSQN == SR0TW00.SR0TW-PREV-CRTN-NBR)

      else

        SR0TW00.SR0TW-EXPC-TOT-ORD-WT = SR0TW00.SR0TW-EXPC-TOT-ORD-WT         + PWPREC.PK-EXPC-CRTN-WT;

        SR0TW00.SR0TW-PREV-CRTN-NBR = PWPREC.PKDNCSQN;

      end

      SR0TS-IO5760-NB(); /* fetch next vsplit01 row*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

      end

    end

    SR0TS-IO5760-CB(); /* close vsplit01 cursor*/

    SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM = SR0TW00.SR0TW-SR-EST-PK-WT-ACCUM +     SR0TW00.SR0TW-EXPC-TOT-ORD-WT; /* Accumulate Order Tot Est Weight*/

    SR0TS-IO5770-N4();

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

    end

  end

  SR0TS-IO5770-C4();

  /* ---------------------------------------------------------------------*/
end // end SR0T-30200

// Select - Dpick.vzipcd01
Function SR0T-30210()
   /* ------------------------------------------------------------*/
   /* Get Zip Code data*/
   /* ------------------------------------------------------------*/

  set TF3REC empty;

  TF3REC.XWHCD = SR0TW01.XWHCD; /* Warehouse code*/
  TF3REC.XXXZIP = SR0TW00.XXXZIP; /* Zip code - 10 char*/

  SR0TS-IO1640-S(); /* Select dpick.vzipcd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If 10 char zip code found*/
                                  /* next sentence*/
  else /* Not found*/

    set TF3REC empty;

    TF3REC.XWHCD = SR0TW01.XWHCD; /* Warehouse code*/

    TF3REC.XXXZIP = SR0TW00.SR0TW-XXXZIP-5; /* Zip code - 5 char*/

    SR0TS-IO1640-S(); /* Select dpick.vzipcd01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If 5 char zip code found*/
                                  /* next sentence*/
    else /* Not found*/

      set TF3REC empty;

      TF3REC.XWHCD = SR0TW01.XWHCD; /* Warehouse code*/

      TF3REC.XXXZIP = SR0TW00.SR0TW-XXXZIP-4; /* Zip code - 4 char*/

      SR0TS-IO1640-S(); /* Select dpick.vzipcd01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If 4 char zip code found*/
                                  /* next sentence*/
      else /* Not found*/

        set TF3REC empty;

        TF3REC.XWHCD = SR0TW01.XWHCD; /* Warehouse code*/

        TF3REC.XXXZIP = SR0TW00.SR0TW-XXXZIP-3; /* Zip code - 3 char*/

        SR0TS-IO1640-S(); /* Select dpick.vzipcd01*/

      end /* If 4 char zip code found*/

    end /* If 5 char zip code found*/

  end /* If 10 char zip code found*/

end // end SR0T-30210

// Save BOL data
Function SR0T-30300()
   /* ------------------------------------------------------------*/
   /* Save BOL required data.*/
   /* ------------------------------------------------------------*/

  if (VAZHDR01.PK-SHPMT-RLSD-DATE
   > SR0TW01.SR0TW-SR1PKDT-CCYYMMDD[SR0TW-FR-TO-BOL-IND])
                                   /* Get latest picked sched date*/
    SR0TW01.SR0TW-SR1PKDT-CCYYMMDD[SR0TW-FR-TO-BOL-IND] = VAZHDR01.PK-SHPMT-RLSD-DATE;

  end

  if (SR0TW01.XGPCD1[SR0TW-FR-TO-BOL-IND] == " ")
    SR0TW01.XGPCD1[SR0TW-FR-TO-BOL-IND] = VAZORD01.XGP-GPC-CD;
    if (VAZORD01.XGP-GPC-CD in XGPTBL.XGPCD)
      SR0TW01.SR0TW-XGPABRV1[SR0TW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      SR0TW01.SR0TW-XGPABRV1[SR0TW-FR-TO-BOL-IND] = "UNKNOWN";
    end
  end

  if (SR0TW01.XGPCD2[SR0TW-FR-TO-BOL-IND] == " ")
    if (VAZORD01.XGP-GPC-CD != SR0TW01.XGPCD1[SR0TW-FR-TO-BOL-IND])
      SR0TW01.XGPCD2[SR0TW-FR-TO-BOL-IND] = VAZORD01.XGP-GPC-CD;
      if (VAZORD01.XGP-GPC-CD in XGPTBL.XGPCD)
        SR0TW01.SR0TW-XGPABRV2[SR0TW-FR-TO-BOL-IND] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      else
        SR0TW01.SR0TW-XGPABRV2[SR0TW-FR-TO-BOL-IND] = "UNKNOWN";
      end
    end
  end

end // end SR0T-30300

// Save BOL order data
Function SR0T-30400()
   /* ------------------------------------------------------------*/
   /* Save FROM/TO BOL order to display M002.*/
   /* ------------------------------------------------------------*/

  SR0TW02.OP1CUOID[XXX-INX-FLD-NBR] = VAZORD01.OP-CUST-ORD-ID;
  SR0TW02.OP1NORID[XXX-INX-FLD-NBR] = VAZORD01.OP-NIKE-ORD-ID;
  SR0TW02.AZ-ORD-STAT-CD[XXX-INX-FLD-NBR] = VAZORD01.AZ-ORD-STAT-CD;

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
  VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
  VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
  VAZCTN01.PK-PICK-SCHED-NBR = -1;

  SR0TS-VAZCTN01-S6(); /* Ordered by Sched#*/
  SR0TS-VAZCTN01-N6();
  SR0TS-VAZCTN01-C6();

  SR0TW02.PK1PKSCH[XXX-INX-FLD-NBR] = VAZCTN01.PK-PICK-SCHED-NBR;

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];
  VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];
  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  SR0TS-AZ1120-SD();

  if (SQLCA.VAGen_SQLCODE == -811)

    SR0TW02.SR0TW-MULTI-SCHED-FL[XXX-INX-FLD-NBR] = "Y";

  else

    SR0TW02.SR0TW-MULTI-SCHED-FL[XXX-INX-FLD-NBR] = "N";

  end

  SR0TW02.PK1NBCTN[XXX-INX-FLD-NBR] = VAZORD01.AZ-TOT-ORD-CARTONS;

  SR0TW02.SR2QTYSH[XXX-INX-FLD-NBR] = VAZORD01.OP-ORD-TOT-UNITS;

  SR0TW02.PK1WT[XXX-INX-FLD-NBR] = VAZORD01.AZ-TOT-ORD-CART-WT;

  /* ===================================================================*/
  /* Code to accumulate Total BOL Shipping Charges*/
  /* ===================================================================*/

  SR0TW00.SR0TW-ORDER-SR2SHPCG = 0;
  SR0TW00.SR0TW-SRORD-EOF-FL = "N";

  set SR2REC empty;

  SR2REC.XWHCD = VAZORD01.XWH-WHSE-CD;
  SR2REC.PK1BLLAD = VAZORD01.PK-BILL-OF-LADING;
  SR2REC.SR2BLLSU = VAZORD01.PK-BOL-SUB-NBR;
  SR2REC.OP1CUOID = VAZORD01.OP-CUST-ORD-ID;
  SR2REC.OP1NORID = VAZORD01.OP-NIKE-ORD-ID;
  SR2REC.PK1PKSCH = -1;

  SR0TS-IO0800-S9();
  SR0TS-IO0800-N9();

  if (SQLCA.VAGen_SQLCODE == 0 && SR2REC.SR2BLLSU != 99)

    while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

      if (SR0TW00.SR0TW-CONSOL-FL == "Y")

        SR0TW00.SR0TW-ORDER-SR2SHPCG = SR0TW00.SR0TW-ORDER-SR2SHPCG +         SR2REC.SR2SHPCG;
        SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM = SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM + SR2REC.SR2SHPCG;

      else

        SR0TW00.SR0TW-ORDER-SR2SHPCG = SR0TW00.SR0TW-ORDER-SR2SHPCG +         SR2REC.SR2SHPCG;
        SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM = SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM + SR2REC.SR2SHPCG;

      end

      SR0TS-IO0800-N9();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SRORD-EOF-FL = "Y";

      end

    end

    SR0TS-IO0800-C9();

    if (SR0TW00.SR0TW-CONSOL-FL == "Y")

      if (SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM > 0)

        SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

      end

    else

      if (SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM > 0)

        SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

      end

    end

  else

    SR0TS-IO0800-C9();

  end

  if (SR0TW00.SR0TW-CHARGES-FOUND-FL == "N")

    SR0TW00.SR0TW-SPBOL-EOF-FL = "N";

    set VSPBOL01 empty;

    VSPBOL01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    VSPBOL01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    VSPBOL01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    VSPBOL01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    VSPBOL01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    VSPBOL01.PK-PICK-SCHED-NBR = -1;

    SR0TS-VSPBOL01-S2();
    SR0TS-VSPBOL01-N2();

    if (SQLCA.VAGen_SQLCODE == 0)

      while (SR0TW00.SR0TW-SPBOL-EOF-FL != "Y")

        if (SR0TW00.SR0TW-CONSOL-FL == "Y")

          SR0TW00.SR0TW-ORDER-SR2SHPCG = SR0TW00.SR0TW-ORDER-SR2SHPCG +           VSPBOL01.SHP-CHG-OVRD-AMT;
          SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM = SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM + VSPBOL01.SHP-CHG-OVRD-AMT;

        else

          SR0TW00.SR0TW-ORDER-SR2SHPCG = SR0TW00.SR0TW-ORDER-SR2SHPCG +           VSPBOL01.SHP-CHG-OVRD-AMT;
          SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM = SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM + VSPBOL01.SHP-CHG-OVRD-AMT;

        end

        SR0TS-VSPBOL01-N2();

        if (SQLCA.VAGen_SQLCODE == +100)

          SR0TW00.SR0TW-SPBOL-EOF-FL = "Y";

        end

      end

      SR0TS-VSPBOL01-C2();

      if (SR0TW00.SR0TW-CONSOL-FL == "Y")

        if (SR0TW00.SR0TW-SR2SHPCG-TO-ACCUM > 0)

          SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

        end

      else

        if (SR0TW00.SR0TW-SR2SHPCG-FR-ACCUM > 0)

          SR0TW00.SR0TW-CHARGES-FOUND-FL = "Y";

        end

      end

    else

      SR0TS-VSPBOL01-C2();

    end

  end

  /* ---------------------------------------------------------------------*/

  set AZTOTREC empty;

  AZTOTREC.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
  AZTOTREC.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
  AZTOTREC.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
  AZTOTREC.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  AZTOTREC.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  AZTOTREC.TS-NIKE-PL-NBR = -1;

  SR0TS-AZ9900-SC();

  /* --------------------------------------------------------------------*/
  /* Code to determine which charges to display for Order level screen*/
  /* --------------------------------------------------------------------*/

  if (SR0TW00.SR0TW-ORDER-SR2SHPCG > 0)

    SR0TW02.SR2SHPCG[XXX-INX-FLD-NBR] = SR0TW00.SR0TW-ORDER-SR2SHPCG;

  else

    SR0TW02.SR2SHPCG[XXX-INX-FLD-NBR] = AZTOTREC.SR0TW-TOT-CHARGE;

  end

  /* --------------------------------------------------------------------*/

  SR0TW02.ZZZCHGCT[XXX-INX-FLD-NBR] = VAZORD01.ZZ-CHNG-CNT;

  SR0TW01.SR0TW-ORDER-CNT[SR0TW-FR-TO-BOL-IND] = SR0TW01.SR0TW-ORDER-CNT[SR0TW-FR-TO-BOL-IND] + 1;

  if (SR0TW00.SR0TW-CHARGES-FOUND-FL != "Y") /* Accum to WS if not found*/

    SR0TW01.SR0TW-SR2SHPCG-BOL = SR0TW01.SR0TW-SR2SHPCG-BOL + AZTOTREC.SR0TW-TOT-CHARGE;

  end

end // end SR0T-30400

// Process modify/consolidate rqs
Function SR0T-40000()
   /* ------------------------------------------------------------*/
   /* Process split request.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-MOVERS-UPDATE-FL = "N";

  if (SR0TW01.SR0TW-OPTION == "M"
   && SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y") /* Split requested*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    SR0TW00.SR0TW-FR-TO-BOL-IND = 1; /* Point to FROM BOL*/

    if (SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1
     || SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2
     || SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3
     || SR0TM001.XXXCITY != SR0TW01.XXXCITY
     || SR0TM001.XSTCD != SR0TW01.XSTCD
     || SR0TM001.XCTCD != SR0TW01.XCTCD
     || SR0TM001.XXXZIP != SR0TW01.XXXZIP
     || SR0TM001.OP5ALTNM != SR0TW01.OP5ALTNM)

      SR0T-41000(); /* Process address changes*/

    end

    SR0T-42000(); /* Process orders changes*/

    SR0T-44000(); /* Re-process addr for possible delete*/

    SR0TW00.SR0TW-FR-TO-BOL-IND = 2; /* Point to TO BOL*/

    if (SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1
     || SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2
     || SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3
     || SR0TM001.XXXCITY != SR0TW01.XXXCITY
     || SR0TM001.XSTCD != SR0TW01.XSTCD
     || SR0TM001.XCTCD != SR0TW01.XCTCD
     || SR0TM001.XXXZIP != SR0TW01.XXXZIP
     || SR0TM001.OP5ALTNM != SR0TW01.OP5ALTNM)

      SR0T-41000(); /* Process address changes*/

    end

    SR0T-45000(); /* Retrieve updated BOL for re-display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process modify request.*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.SR0TW-OPTION == "M") /* If modify only*/

    /* Process FROM BOL orders.*/

    XX0XS01(); /* Get change date and time*/

    if (SR0TM001.XXX-ADDR[1] != SR0TW01.XXX-ADDR1
     || SR0TM001.XXX-ADDR[2] != SR0TW01.XXX-ADDR2
     || SR0TM001.XXX-ADDR[3] != SR0TW01.XXX-ADDR3
     || SR0TM001.XXXCITY != SR0TW01.XXXCITY
     || SR0TM001.XSTCD != SR0TW01.XSTCD
     || SR0TM001.XCTCD != SR0TW01.XCTCD
     || SR0TM001.XXXZIP != SR0TW01.XXXZIP
     || SR0TM001.OP5ALTNM != SR0TW01.OP5ALTNM)

      SR0T-41000(); /* Process address changes*/

    end

    SR0T-42000(); /* Process orders changes*/

    if (SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN
     || SR0TM001.PK1WT != SR0TW01.PK1WT
     || SR0TM001.SR0TM-LEADSO-CHARGES != SR0TW01.LEADSO-CHARGES)

      SR0T-46000(); /* Process charges changes*/

    end

    SR0T-45000(); /* Retrieve updated BOL for redisplay*/

    return;

  end

end // end SR0T-40000

// Process address change
Function SR0T-41000()

   /* ------------------------------------------------------------*/
   /* Verify change in address and set update flag if changed*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-ADDR-CHANGED-FL = "N";

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;

  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];

  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-VAZHDR01-S(); /* Read from DSHIP.VAZHDR01*/

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;

  VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;

  VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  SR0TS-VAZORD01-S1();

  SR0TS-VAZORD01-N1();

  SR0TW00.SR0TW-OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  SR0TW00.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  SR0TW00.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
  SR0TW00.SR0TW-OP-ONETIME-SHIP-FL = VAZORD01.OP-ONETIME-SHIP-FL;

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;

  VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;

  VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;

  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;

  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;

  SR0TS-VAZCTN01-S1();
  SR0TS-VAZCTN01-N1();
  SR0TW00.SR0TW-TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR;

  SR0TS-VAZCTN01-C1();
  SR0TS-VAZORD01-C1(); /* Close cursor dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

    if (SR0TM001.XXX-ADDR[1] != VAZHDR01.XXX-ADDR1
     || SR0TM001.XXX-ADDR[2] != VAZHDR01.XXX-ADDR2
     || SR0TM001.XXX-ADDR[3] != VAZHDR01.XXX-ADDR3
     || SR0TM001.XXXCITY != VAZHDR01.XXX-CITY
     || SR0TM001.XSTCD != VAZHDR01.XST-ST-CD
     || SR0TM001.XCTCD != VAZHDR01.XCT-CTRY-CD
     || SR0TM001.XXXZIP != VAZHDR01.XXX-ZIP)

      if (SR0TM001.XXXZIP != VAZHDR01.XXX-ZIP) /* If zip code changed*/

        if (SR0TM001.SR0TM-OPTION == "M" /* If modify option*/
         && SR0TW01.PK4CARSP[1] != "10")
                                   /* and not customer-specified routing*/
          SR0TW00.SR0TW-MESSAGE = "CHANGE OF CARR/DEST RECOMMENDED BECAUSE OF ADDRESS CHANGED";
        end

      end /* If zip code changed*/

      SR0TW00.SR0TW-ADDR-CHANGED-FL = "Y";

      VAZHDR01.XXX-ADDR1 = SR0TM001.XXX-ADDR[1];
      VAZHDR01.XXX-ADDR2 = SR0TM001.XXX-ADDR[2];
      VAZHDR01.XXX-ADDR3 = SR0TM001.XXX-ADDR[3];
      VAZHDR01.XXX-CITY = SR0TM001.XXXCITY;
      VAZHDR01.XST-ST-CD = SR0TM001.XSTCD;
      VAZHDR01.XCT-CTRY-CD = SR0TM001.XCTCD;
      VAZHDR01.XXX-ZIP = SR0TM001.XXXZIP;
      VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

      SR0TS-VAZHDR01-U(); /* Update DSHIP.VAZHDR01*/

    end

  end /* If VAZHDR01 is found*/

  set SR4REC empty;

  SR4REC.XWHCD = SR0TW01.XWHCD;

  SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];

  SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-IO0820-S(); /* Select dship.vsradd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If dship.vsradd01 is found*/

    if (SR0TM001.OP5ALTNM != SR4REC.OP5ALTNM
     || SR0TM001.XXX-ADDR[1] != SR4REC.XXX-ADDR[1]
     || SR0TM001.XXX-ADDR[2] != SR4REC.XXX-ADDR[2]
     || SR0TM001.XXX-ADDR[3] != SR4REC.XXX-ADDR[3]
     || SR0TM001.XXXCITY != SR4REC.XXXCITY
     || SR0TM001.XSTCD != SR4REC.XSTCD
     || SR0TM001.XCTCD != SR4REC.XCTCD
     || SR0TM001.XXXZIP != SR4REC.XXXZIP)

      if (SR0TM001.XXXZIP != SR4REC.XXXZIP) /* If zip code changed*/

        if (SR0TM001.SR0TM-OPTION == "M" /* If modify option*/
         && SR0TW01.PK4CARSP[1] != "10")
                                   /* and not customer-specified routing*/
          SR0TW00.SR0TW-MESSAGE = "CHANGE OF CARR/DEST RECOMMENDED BECAUSE OF ADDRESS CHANGED";
        end

      end /* If zip code changed*/

      SR0TW00.SR0TW-ADDR-CHANGED-FL = "Y";

      SR4REC.OP5ALTNM = SR0TM001.OP5ALTNM;
      SR4REC.XXX-ADDR[1] = SR0TM001.XXX-ADDR[1];
      SR4REC.XXX-ADDR[2] = SR0TM001.XXX-ADDR[2];
      SR4REC.XXX-ADDR[3] = SR0TM001.XXX-ADDR[3];
      SR4REC.XXX-ADDR[4] = " ";
      SR4REC.XXX-ADDR[5] = " ";
      SR4REC.XXX-ADDR[6] = " ";
      SR4REC.XXXCITY = SR0TM001.XXXCITY;
      SR4REC.XSTCD = SR0TM001.XSTCD;
      SR4REC.XCTCD = SR0TM001.XCTCD;
      SR4REC.XXXZIP = SR0TM001.XXXZIP;
      SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0TS-IO0820-U(); /* Update dship.vsradd01*/

    end /* If screen 1 address not same as*/
                                   /* VSRADD01*/

  else /* If dship.vsradd01 is found*/

    SR0TW00.SR0TW-ADDR-CHANGED-FL = "Y";

    set SR4REC empty;

    SR4REC.XWHCD = SR0TW01.XWHCD;
    SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];
    SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];
    SR4REC.OP5ALTNM = SR0TM001.OP5ALTNM;
    SR4REC.XXX-ADDR[1] = SR0TM001.XXX-ADDR[1];
    SR4REC.XXX-ADDR[2] = SR0TM001.XXX-ADDR[2];
    SR4REC.XXX-ADDR[3] = SR0TM001.XXX-ADDR[3];
    SR4REC.XXX-ADDR[4] = " ";
    SR4REC.XXX-ADDR[5] = " ";
    SR4REC.XXX-ADDR[6] = " ";
    SR4REC.XXXCITY = SR0TM001.XXXCITY;
    SR4REC.XSTCD = SR0TM001.XSTCD;
    SR4REC.XCTCD = SR0TM001.XCTCD;
    SR4REC.XXXZIP = SR0TM001.XXXZIP;
    SR4REC.ZZZSDT = XX0XW01.XX0XWDAT;
    SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    SR0TS-IO0820-A(); /* Add dship.vsradd01*/

  end /* If DSHIP.VARADD01 is found*/

  set PWOREC empty;

   /* -------------------------------------------------------------------*/
   /* Build key and update VSPLHD01 when customer*/
   /* name changed for all orders on BOL*/
   /* -------------------------------------------------------------------*/

  SR0TW00.SR0TW-SPLHD-EOF-FL = "N";
  PWOREC.XWHCD = SR0TW01.XWHCD;
  PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
  PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1];

  SR0TS-IO5770-S5(); /* Select Dpick.VSPLHD01*/

  SR0TS-IO5770-N5(); /* Fetch  Dpick.VSPLHD01*/

  if (SQLCA.VAGen_SQLCODE == +100 /* If not found*/
  )                              
    SR0TS-IO5770-C5(); /* close csr  esmit2 11/14/98*/

    SRWREC.XXXERRID = "41000"; /* Message location*/
    converseLib.validationFailed(141); /* Order was updated*/
    SR0TW00.SR0TW-UPDATE-FL = "N"; /* No update*/
    return;
  end

  if (SR0TM001.XXX-ADDR[1] != PWOREC.XXX-ADDR1
   || SR0TM001.XXX-ADDR[2] != PWOREC.XXX-ADDR2
   || SR0TM001.XXX-ADDR[3] != PWOREC.XXX-ADDR3
   || SR0TM001.XXXCITY != PWOREC.XXXCITY
   || SR0TM001.XSTCD != PWOREC.XSTCD
   || SR0TM001.XCTCD != PWOREC.XCTCD
   || SR0TM001.XXXZIP != PWOREC.XXXZIP
   || SR0TM001.OP5ALTNM != PWOREC.KUCCONM)

    if (SR0TM001.XXXZIP != PWOREC.XXXZIP) /* If zip code changed*/

      if (SR0TM001.SR0TM-OPTION == "M" /* If modify option*/
       && SR0TW01.PK4CARSP[1] != "10") /* NOT CUST SPECIFIED ROUTING*/

        SR0TW00.SR0TW-MESSAGE = "CHANGE OF CARR/DEST RECOMMENDED BECAUSE OF ADDRESS CHANGED";

      end

    end /* If zip code changed*/

    SR0TW00.SR0TW-ADDR-CHANGED-FL = "Y";
    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")
      PWOREC.KUCCONM = SR0TM001.OP5ALTNM;
      PWOREC.XXX-ADDR1 = SR0TM001.XXX-ADDR[1];
      PWOREC.XXX-ADDR2 = SR0TM001.XXX-ADDR[2];
      PWOREC.XXX-ADDR3 = SR0TM001.XXX-ADDR[3];
      PWOREC.XXX-ADDR4 = " ";
      PWOREC.XXX-ADDR5 = " ";
      PWOREC.XXX-ADDR6 = " ";
      PWOREC.XXXCITY = SR0TM001.XXXCITY;
      PWOREC.XSTCD = SR0TM001.XSTCD;
      PWOREC.XCTCD = SR0TM001.XCTCD;
      PWOREC.XXXZIP = SR0TM001.XXXZIP;
      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      SR0TS-IO5770-U();
      SR0TS-IO5770-N5();
      if (SQLCA.VAGen_SQLCODE == +100)
        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";
      end
    end
    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

  end
  SR0TS-IO5770-C5();

  SR0TW00.SR0TW-ADDR-CHANGED-FL = "N";

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;

  VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];

  VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-VAZORD01-S1(); /* Cursor for DSHIP.VAZORD01*/

  SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y") /* Cursor not at end*/

    VAZORD01.OP-ONETIME-SHIP-FL = "Y";

    SR0TS-VAZORD01-U(); /* Update DSHIP.VAZORD01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  end /* Do while cursor on DSHIP.VAZORD01*/

  SR0TS-VAZORD01-C1(); /* Close the cursor on DSHIP.VAZORD01*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-IO0800-S3(); /* Cursor for DSHIP.VSRORD01*/

  SR0TS-IO0800-N3(); /* Fetch from DSHIP.VSRORD01*/

  while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

    SR2REC.OP11TMSF = "Y";

    SR0TS-POP-VSRORD03();
    SR0TS-VSRORD03-U();
  /*  SR0TS-IO0800-U();              /* Update DSHIP.VSRORD01*/

    SR0TS-IO0800-N3(); /* Fetch from DSHIP.VSRORD01*/
  end

  SR0TS-IO0800-C3(); /* Close the cursor on DSHIP.VAZORD01*/

end // end SR0T-41000

// Process order changes
Function SR0T-42000()
   /* ------------------------------------------------------------*/
   /* Process BOL updates to PRO #, carrier code/name*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-MOVERS-UPDATE-FL = "N";
  SR0TW00.SR0TW-UPDATE-FL = "N";

  set TF1REC empty;

  TF1REC.TF1CARCD = SR0TW01.TF1CARCD[SR0TW-FR-TO-BOL-IND];

  SR0TS-IO0860-S(); /* Select dpick.vcarr001*/

  if (TF1REC.TF1MCARF != "Y"
   && SR0TM001.SR0TM-CARRIER-NAME != SR0TW01.SR0TW-CARRIER-NAME)

    SRWREC.XXXERRID = "42000"; /* Message location*/
    converseLib.validationFailed(253); /* Carrier name change invalid*/
    SR0TM001.SR0TM-CARRIER-NAME = SR0TW01.SR0TW-CARRIER-NAME;
    set SR0TM001.SR0TM-CARRIER-NAME bold, cursor;
    SR0TW00.SR0TW-UPDATE-FL = "N"; /* No update*/
    exit stack;

  end

  if (SR0TM001.SR0TM-OPTION == "M")

    if (SR0TM001.TF1CARCD != SR0TW01.TF1CARCD[1]
     || (TF1REC.TF1MCARF == "Y"
     && SR0TM001.SR0TM-CARRIER-NAME
     != SR0TW01.SR0TW-CARRIER-NAME[1])
     || (SR0TM001.TF2PRONO != SR0TW01.TF2PRONO[1]
     && (SR0TM001.TF2PRONO != " "
     || SR0TW01.TF2PRONO != "000000000000")))

      SR0TW00.SR0TW-UPDATE-FL = "Y";

      SR0T-42100(); /* Process BOL changes*/

    end

  end

  if (SR0TW00.SR0TW-MOVERS-UPDATE-FL == "Y")

    set VAZCTN01 empty;

    VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;
    VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
    VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];
    VAZCTN01.OP-CUST-ORD-ID = -1;
    VAZCTN01.OP-NIKE-ORD-ID = -1;
    VAZCTN01.PK-PICK-SCHED-NBR = -1;

    SR0TS-VAZCTN01-S6();

    SR0TS-VAZCTN01-N6();

    while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

      if (VAZCTN01.PK-MOVERS-STAT-CD == "  ")

        VAZCTN01.PK-MOVERS-STAT-CD = "02";

      else

        if (VAZCTN01.PK-MOVERS-STAT-CD == "12")

          VAZCTN01.PK-MOVERS-STAT-CD = "04";

        else

          if (VAZCTN01.PK-MOVERS-STAT-CD == 20)

            VAZCTN01.PK-MOVERS-STAT-CD = "06";

          end

        end

      end

      SR0TS-VAZCTN01-U();

      SR0TS-VAZCTN01-N6();

    end

    SR0TS-VAZCTN01-C6();

    if (SR0TW00.SR0TW-SPLIT-REQUESTED-FL != "Y")
      SR0T-15300();
    end

  end

end // end SR0T-42000

// Process dship.vsrord01 changes
Function SR0T-42100()
   /* -------------------------------------------------------------*/
   /* Process BOL Changes*/
   /* ------------------------------------------------------------*/

  if ((TF1REC.TF1MCARF == "Y"
   && SR0TM001.SR0TM-CARRIER-NAME != SR0TW01.SR0TW-CARRIER-NAME)
   || SR0TM001.TF1CARCD != SR0TW01.TF1CARCD)
    /**/
    SR0TW00.SR0TW-MOVERS-UPDATE-FL = "Y";
  end

  set VAZHDR01 empty;
  set SR2REC empty;
  set PWOREC empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  SR2REC.XWHCD = SR0TW01.XWHCD; /* Dship.vsrord01*/
  PWOREC.XWHCD = SR0TW01.XWHCD; /* Dpick.vsplhd01*/

  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Dship.vsrord01*/
  PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Dpick.vsplhd01*/

  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* Dship.vsrord01*/
  PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* Dpick.vsplhd01*/

  SR0TS-VAZHDR01-S(); /* Select dship.VAZHDR01*/

  if (SQLCA.VAGen_SQLCODE == +100)
    /**/
    SRWREC.XXXERRID = "42100"; /* Message location*/
    converseLib.validationFailed(211); /* Header not found*/
    SR0TW00.SR0TW-UPDATE-FL = "N"; /* No update*/
    exit stack;
    /**/
  end

  SR0TS-IO0800-S3();
  SR0TS-IO0800-N3();

  if (SR0TM001.TF1CARCD != SR2REC.TF1CARCD)
    TF7REC.TF7CARCD = SR0TM001.TF1CARCD;
    SR0TS-VCARR002-S();
    /**/
    if (SQLCA.VAGen_SQLCODE == +100)
      SRWREC.XXXERRID = "42100";
      converseLib.validationFailed(0005);
      exit stack;
    end
  end

  while (SR0TW00.SR0TW-SRORD-EOF-FL == "N")
    /**/
    if (SR0TM001.TF1CARCD != SR2REC.TF1CARCD)
      SR2REC.TF1CARCD = TF7REC.TF7CARCD; /* VSRORD01*/
      SR2REC.TF1CARNM = TF7REC.TF7CARNM;
      SR2REC.PK4CARSP = "30";
    end
    /**/
    if (TF1REC.TF1MCARF == "Y"
     && SR0TM001.SR0TM-CARRIER-NAME != SR0TW01.SR0TW-CARRIER-NAME)
      /**/
      SR2REC.TF1CARNM = SR0TM001.SR0TM-CARRIER-NAME;
      SR2REC.PK4CARSP = "30";
      /**/
    end
    /**/
    if (SR0TM001.TF2PRONO != SR2REC.TF2PRONO)
      /**/
      SR2REC.TF2PRONO = SR0TM001.TF2PRONO;
      /**/
    end
    /**/
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    /**/
     /* SR0TS-IO0800-U();              /* Update DSHIP.VSRORD01*/
    SR0TS-POP-VSRORD03();
    SR0TS-VSRORD03-U();
    /**/
    SR0TS-IO0800-N3(); /* Fetch  DSHIP.VSRORD01*/
    /**/
  end /* End for While loop*/

  SR0TS-IO0800-C3(); /* Close  DSHIP.VSRORD01*/

  if (SR0TM001.TF1CARCD != VAZHDR01.TF-CARR-CD)
    /**/
    VAZHDR01.TF-CARR-CD = TF7REC.TF7CARCD; /* VAZHDR01*/
    VAZHDR01.TF-CARR-NM = TF7REC.TF7CARNM;
    VAZHDR01.TF-SCAC-CD = TF7REC.TF7SCAC;
    VAZHDR01.PK-CARR-SPF-CD = "30";
  end

  if (TF1REC.TF1MCARF == "Y"
   && SR0TM001.SR0TM-CARRIER-NAME != SR0TW01.SR0TW-CARRIER-NAME)
    /**/
    VAZHDR01.TF-CARR-NM = SR0TM001.SR0TM-CARRIER-NAME;
    VAZHDR01.PK-CARR-SPF-CD = "30";
    /**/
    SR0TW01.SR0TW-CARRIER-NAME = SR0TM001.SR0TM-CARRIER-NAME;
  end

  if (SR0TM001.TF2PRONO != VAZHDR01.TF-PRO-NBR)
    /**/
    VAZHDR01.TF-PRO-NBR = SR0TM001.TF2PRONO;
    /**/
  end

  VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

  if (SR0TW01.SR0TW-OPTION == "C"
   && VAZHDR01.PK-BOL-SUB-NBR == 0)
    SR0TS-POP-VAZHDR02();
    SR0TS-VAZHDR02-U();
  else
    SR0TS-VAZHDR01-U();
  end

   /* -------------------------------------------------------------------*/
   /* Build key and update VSPLHD01 when carrier code*/
   /* changed for all orders on BOL*/
   /* -------------------------------------------------------------------*/

  SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

  SR0TS-IO5770-S5(); /* Select Dpick.VSPLHD01*/
  SR0TS-IO5770-N5(); /* Fetch  Dpick.VSPLHD01*/

  if (SQLCA.VAGen_SQLCODE == +100 /* If not found*/
  )                              
    SRWREC.XXXERRID = "42100"; /* Message location*/
    converseLib.validationFailed(245); /* No pack list header data*/
    SR0TW00.SR0TW-UPDATE-FL = "N"; /* No update*/
    SR0TS-IO5770-C5();
    exit stack;
  end

  if (PWOREC.TF1CARCD != SR0TM001.TF1CARCD)
    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")
      PWOREC.TF1CARCD = SR0TM001.TF1CARCD;
      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      SR0TS-IO5770-U();
      SR0TS-IO5770-N5();
      if (SQLCA.VAGen_SQLCODE == +100)
        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";
      end
    end
  end

  SR0TS-IO5770-C5();

end // end SR0T-42100

// Process FROM BOL address
Function SR0T-44000()
   /* ------------------------------------------------------------*/
   /* Verify if FROM BOL still exists.*/
   /* ------------------------------------------------------------*/

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;

  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];

  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZHDR01-S(); /* Select unique dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
     /* next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* Process address changes.*/
   /* ------------------------------------------------------------*/

  set SR4REC empty;

  SR4REC.XWHCD = SR0TW01.XWHCD;

  SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FR-TO-BOL-IND];

  SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FR-TO-BOL-IND];

  SR0TS-IO0820-S(); /* Select dship.vsradd01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

    SR0TS-IO0820-D(); /* Delete row from dship.vsradd01*/

  end

end // end SR0T-44000

// Retrieve upd BOL for re-disply
Function SR0T-45000()
   /* ------------------------------------------------------------*/
   /* Set updated BOL for re-display.*/
   /* ------------------------------------------------------------*/

  if (SR0TW01.SR0TW-OPTION == "C" /* If consolidation requested*/
   || SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y") /* or split request*/

    SR0TW00.PK1BLLAD = SR0TW01.PK1BLLAD[2]; /* FROM BOL*/
    SR0TW00.SR2BLLSU = SR0TW01.SR2BLLSU[2];

  else

    SR0TW00.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* FROM BOL*/
    SR0TW00.SR2BLLSU = SR0TW01.SR2BLLSU[1];

  end

   /* ------------------------------------------------------------*/
   /* Set parameters to re-display updated BOL.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-REDISPLAY-UPD-BOL-FL = "Y"; /* Redisplay upd BOL flag*/

end // end SR0T-45000

// Process LEADSO Change
Function SR0T-46000()

  SR0TW00.SR0TW-LEADSO-CHG-FL = "N";

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW00.SR0TW-LEADSO-XWHCD;

  SR2REC.OP1CUOID = SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID;

  SR2REC.OP1NORID = SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID;

  SR2REC.PK1PKSCH = SR0TW00.SR0TW-LEADSO-PK1PKSCH;

  SR2REC.OP1NTMAL = 0;

  SR0TS-IO0800-S();

  if (SQLCA.VAGen_SQLCODE == 0 && SR2REC.SR2BLLSU != 99)
    /**/
    if (SR0TM001.PK1NBCTN != SR2REC.PK1NBCTN)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      SR2REC.PK1NBCTN = SR2REC.PK1NBCTN +       (SR0TM001.PK1NBCTN - SR0TW01.PK1NBCTN);
      /**/
    end
    /**/
    if (SR0TM001.PK1WT != SR2REC.PK1WT)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      SR2REC.PK1WT = SR0TM001.PK1WT;
      /**/
    end
    /**/
    if (SR0TM001.SR0TM-LEADSO-CHARGES != SR2REC.SR2SHPCG)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      SR2REC.SR2SHPCG = SR0TM001.SR0TM-LEADSO-CHARGES;
      /**/
    end
    /**/
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    /**/
     /* SR0TS-IO0800-U();*/
    SR0TS-POP-VSRORD03();
    SR0TS-VSRORD03-U();
    /**/
    set SR2REC empty;
    /**/
    SR0TW00.SR0TW-SR2TNBCT-ACCUM = 0;
    /**/
    SR2REC.XWHCD = SR0TW01.XWHCD;
    SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD;
    SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU;
    /**/
    SR0TS-IO0800-S3();
    SR0TS-IO0800-N3();
    /**/
    while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y") /* Accumulate BOL ctn totals*/
      /**/
      SR0TW00.SR0TW-SR2TNBCT-ACCUM = SR0TW00.SR0TW-SR2TNBCT-ACCUM +       SR2REC.PK1NBCTN;
      /**/
      SR0TS-IO0800-N3();
      /**/
    end
    /**/
    SR0TS-IO0800-C3();
    /**/
    set SR2REC empty;
    /**/
    SR2REC.XWHCD = SR0TW01.XWHCD;
    SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD;
    SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU;
    /**/
    SR0TS-IO0800-S3();
    SR0TS-IO0800-N3();
    /**/
    while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y") /* Update BOL carton totals*/
      /**/
      SR2REC.SR2TNBCT = SR0TW00.SR0TW-SR2TNBCT-ACCUM;
      /**/
      SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      /**/
       /* SR0TS-IO0800-U();*/
      SR0TS-POP-VSRORD03();
      SR0TS-VSRORD03-U();
      /**/
      SR0TS-IO0800-N3();
      /**/
    end
    /**/
    SR0TS-IO0800-C3();
    /**/
  else
    /**/
    set VSPBOL01 empty;
    /**/
    VSPBOL01.XWH-WHSE-CD = SR0TW00.SR0TW-LEADSO-XWHCD;
    /**/
    VSPBOL01.PK-BILL-OF-LADING = SR0TW00.SR0TW-LEADSO-PK1BLLAD;
    /**/
    VSPBOL01.PK-BOL-SUB-NBR = SR0TW00.SR0TW-LEADSO-SR2BLLSU;
    /**/
    VSPBOL01.OP-CUST-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID;
    /**/
    VSPBOL01.OP-NIKE-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID;
    /**/
    VSPBOL01.PK-PICK-SCHED-NBR = SR0TW00.SR0TW-LEADSO-PK1PKSCH;
    /**/
    SR0TS-VSPBOL01-S();
    /**/
    if (SQLCA.VAGen_SQLCODE == 0)
      /**/
      if ((VSPBOL01.CRTN-OVRD-QTY == 0
       && SR0TM001.PK1NBCTN != VSPBOL01.SR-TOT-NBR-CARTONS)
       || (VSPBOL01.CRTN-OVRD-QTY > 0
       && SR0TM001.PK1NBCTN != VSPBOL01.CRTN-OVRD-QTY))
        /**/
        SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
        /**/
        VSPBOL01.CRTN-OVRD-TOT-QTY = SR0TM001.PK1NBCTN;
        /**/
        VSPBOL01.CRTN-OVRD-QTY = VSPBOL01.CRTN-OVRD-QTY         + (SR0TM001.PK1NBCTN - SR0TW01.PK1NBCTN);
        /**/
      end
      /**/
      if ((VSPBOL01.CRTN-OVRD-WT == 0
       && SR0TM001.PK1WT != VSPBOL01.PK-WEIGHT)
       || (VSPBOL01.CRTN-OVRD-WT > 0
       && SR0TM001.PK1WT != VSPBOL01.CRTN-OVRD-WT)
      )
        SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
        /**/
        VSPBOL01.CRTN-OVRD-WT = SR0TM001.PK1NBCTN;
        /**/
      end
      /**/
      if ((VSPBOL01.SHP-CHG-OVRD-AMT == 0 && 
      SR0TM001.SR0TM-LEADSO-CHARGES != VSPBOL01.SR-SHP-CHG)
       || (VSPBOL01.SHP-CHG-OVRD-AMT > 0 && 
      SR0TM001.SR0TM-LEADSO-CHARGES != VSPBOL01.SHP-CHG-OVRD-AMT))
        /**/
        SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
        /**/
        VSPBOL01.SHP-CHG-OVRD-AMT = SR0TM001.SR0TM-LEADSO-CHARGES;
        /**/
      end
      /**/
      VSPBOL01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VSPBOL01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      /**/
      SR0TS-VSPBOL01-U();
      /**/
    else
      /**/
      if (SQLCA.VAGen_SQLCODE == +100)
        /**/
        if (SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN
        )
          SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
          /**/
          VSPBOL01.CRTN-OVRD-TOT-QTY = SR0TM001.PK1NBCTN;
          /**/
        end
        /**/
        if (SR0TM001.PK1WT != SR0TW01.PK1WT)
          /**/
          SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
          /**/
          VSPBOL01.CRTN-OVRD-WT = SR0TM001.PK1WT;
          /**/
        end
        /**/
        if (SR0TM001.SR0TM-LEADSO-CHARGES != SR0TW01.LEADSO-CHARGES)
          /**/
          SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
          /**/
          VSPBOL01.SHP-CHG-OVRD-AMT = SR0TM001.SR0TM-LEADSO-CHARGES;
          /**/
        end
        /**/
        VSPBOL01.ZZ-SDT = XX0XW01.XX0XWDAT;
        VSPBOL01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        VSPBOL01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
        /**/
        SR0TS-VSPBOL01-A();
        /**/
      end
      /**/
    end
    /**/
  end

  if (SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN
   || SR0TM001.PK1WT != SR0TW01.PK1WT)
    /**/
    SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
    /**/
    VAZORD01.XWH-WHSE-CD = SR0TW00.SR0TW-LEADSO-XWHCD;
    /**/
    VAZORD01.PK-BILL-OF-LADING = SR0TW00.SR0TW-LEADSO-PK1BLLAD;
    /**/
    VAZORD01.PK-BOL-SUB-NBR = SR0TW00.SR0TW-LEADSO-SR2BLLSU;
    /**/
    VAZORD01.OP-CUST-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-CUST-ORD-ID;
    /**/
    VAZORD01.OP-NIKE-ORD-ID = SR0TW00.SR0TW-LEADSO-OP-NIKE-ORD-ID;
    /**/
    SR0TS-VAZORD01-S();
    /**/
    if (SR0TM001.PK1NBCTN != VAZORD01.AZ-TOT-ORD-CARTONS)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      VAZORD01.AZ-TOT-ORD-CARTONS = SR0TM001.PK1NBCTN;
      /**/
    end
    /**/
    if (SR0TM001.PK1WT != VAZORD01.AZ-TOT-ORD-CART-WT)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      VAZORD01.AZ-TOT-ORD-CART-WT = SR0TM001.PK1WT;
      /**/
    end
    /**/
    VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    /**/
    SR0TS-VAZORD01-U();
    /**/
    VAZHDR01.XWH-WHSE-CD = SR0TW00.SR0TW-LEADSO-XWHCD;
    /**/
    VAZHDR01.PK-BILL-OF-LADING = SR0TW00.SR0TW-LEADSO-PK1BLLAD;
    /**/
    VAZHDR01.PK-BOL-SUB-NBR = SR0TW00.SR0TW-LEADSO-SR2BLLSU;
    /**/
    SR0TS-VAZHDR01-S();
    /**/
    if (SR0TM001.PK1NBCTN != SR0TW01.PK1NBCTN)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      VAZHDR01.SR-TOT-NBR-CARTONS = VAZHDR01.SR-TOT-NBR-CARTONS       + (SR0TM001.PK1NBCTN - SR0TW01.PK1NBCTN);
      /**/
    end
    /**/
    if (SR0TM001.PK1WT != SR0TW01.PK1WT)
      /**/
      SR0TW00.SR0TW-LEADSO-CHG-FL = "Y";
      /**/
      VAZHDR01.AZ-TOT-SHPMT-WT = VAZHDR01.AZ-TOT-SHPMT-WT       + (SR0TM001.PK1WT - SR0TW01.PK1WT);
      /**/
    end
    /**/
    VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    /**/
    if (SR0TW01.SR0TW-OPTION == "C"
     && VAZHDR01.PK-BOL-SUB-NBR == 0)
      SR0TS-POP-VAZHDR02();
      SR0TS-VAZHDR02-U();
    else
      SR0TS-VAZHDR01-U();
    end
    /**/
  end

  if (SR0TW00.SR0TW-LEADSO-CHG-FL == "Y")
    SR0TW00.XXX-RQT-DATA-FL = "Y";
    SR0TW00.XXX-MAP-FMAT-FL = "Y";
  end

end // end SR0T-46000

// Process SR0C request
Function SR0T-50000()
   /* ------------------------------------------------------------*/
   /* Process SR0C request.*/
   /* ------------------------------------------------------------*/

  set SRWREC empty;
  set SR0TW02 empty;

  SRWREC.SRWXWHCD = SR0TW01.XWHCD; /* Warehouse code*/
  SRWREC.SRWRETOP = SR0TW01.SR0TW-OPTION; /* Option*/

  SRWREC.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1]; /* FROM BOL*/
  SRWREC.SR2BLLSU[1] = SR0TW01.SR2BLLSU[1];

  SRWREC.SRWMISCF[1] = SR0TW01.SR0TW-ALL-ORDERS-FL;
                                   /* All orders flag*/
  SRWREC.SRWMISCF[2] = SR0TW01.SR0TW-UNIT-OF-MEASURE;
                                   /* Unit of measure*/

  SRWREC.PK1BLLAD[2] = SR0TW01.SR0TW-ORDER-CNT[1]; /* Nbr of orders*/
  SRWREC.SR2BLLSU[2] = SR0TW01.XXX-HI-PAGE-NBR[1]; /* Maximum page nbr*/

  SRWREC.SRWRETFL = "Y"; /* Return to prev appl flag*/

  COMMAREA.CATOAP = "SR0C"; /* TO appl*/
  COMMAREA.CAUSERA = SRWREC.SRWGRP; /* User area*/

  SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

  XSEXIT(); /* Transfer to requested appl*/

end // end SR0T-50000

// Process print BOL request
Function SR0T-60000()
   /* ------------------------------------------------------------*/
   /* Process SR0Q request.*/
   /* ------------------------------------------------------------*/

  set SRWREC empty;

  SRWREC.SRWXWHCD = SR0TW01.XWHCD; /* Warehouse code*/
  SRWREC.SRWRETOP = SR0TW01.SR0TW-OPTION; /* Option*/

  SRWREC.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1]; /* FROM BOL*/
  SRWREC.SR2BLLSU[1] = SR0TW01.SR2BLLSU[1];

  SRWREC.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2]; /* TO BOL*/
  SRWREC.SR2BLLSU[2] = SR0TW01.SR2BLLSU[2];

  SRWREC.SRWMISCF[1] = SR0TW01.SR0TW-ALL-ORDERS-FL;
                                   /* All orders flag*/
  SRWREC.SRWMISCF[2] = SR0TW01.SR0TW-UNIT-OF-MEASURE;
                                   /* Unit of measure*/

  SRWREC.SRWRETFL = "Y"; /* Return to prev appl flag*/

  COMMAREA.CATOAP = "SR0Q"; /* TO appl*/
  COMMAREA.CAUSERA = SRWREC.SRWGRP; /* User area*/

  SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

  XSEXIT(); /* Transfer to requested appl*/

end // end SR0T-60000

// Process split bol request
Function SR0T-70000()

  if (SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED == "Y")
    /**/
    SR0TW01.PK1BLLAD[2] = SR0TW01.PK1BLLAD[1];
    VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
    VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
    /**/
    SR0TS-VAZHDR01-SM(); /* Determine highest BOL-SUB*/
    /**/
    SR0TS-GET-VICS-BOL(); /* /  Generate VICS BOL*/
    /**/
    /*MOVE SR0TW01.SR0TW-VICS-CHECK-DIGIT TO SR0TW00.SR0TW-FMT-CHK-DIGIT;*/
    /**/
    /*MOVE SR0TW00.SR0TW-FMT-BOL-NBR TO SR0TW01.PK1BLLAD[2];*/
    /*MOVE 0 TO SR0TW01.SR2BLLSU[2];*/
    /**/
    SR0TW01.SR2BLLSU[2] = VAZHDR01.PK-BOL-SUB-NBR + 1;
    /**/
  else
    /**/
    SR0TW00.SR0TW-FMT-BOL-NBR = 0;
    SR0TW00.SR0TW-FMT-BOL-XWH-WHSE-CD = SR0TW01.XWHCD;
    set TA2REC empty;
    /**/
    TA2REC.TA2DTOPT = "GETDATE ";
    /**/
    SR0TS-TA0040();
    /**/
     /* MOVE TA2REC.TA2JULN TO SR0TW00.SR0TW-JULIAN-DATE;*/
     /* MOVE SR0TW00.SR0TW-JULIAN-DDD TO SR0TW00.SR0TW-FMT-BOL-JUL-DAY;*/
    /**/
    SR0TS-GET-VICS-BOL(); /* /  Generate VICS BOL*/
    /**/
    SR0TW00.SR0TW-FMT-CHK-DIGIT = SR0TW01.SR0TW-VICS-CHECK-DIGIT;
    /**/
    SR0TW01.PK1BLLAD[2] = SR0TW00.SR0TW-FMT-BOL-NBR;
    SR0TW01.SR2BLLSU[2] = 0;
    /**/
  end

end // end SR0T-70000

// Main process to display MAP 2
Function SR0T-80000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2 - Order data.*/
   /* Processing always returns to the top of this process and*/
   /* fall through subordinate processes until an error is found*/
   /* or a valid request is processed.  Processing sequence is*/
   /* as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.SR0TW-WHOLE-ORDERS-FL != "Y")

    SR0T-81000(); /* Read Carton TSQ Page*/

    SR0T-82000(); /* Format and display the map*/

    SR0T-83000(); /* Check attention identifier*/

    SR0T-84000(); /* Verify the entered data*/

  end /* If Whole orders*/

  SR0T-85000(); /* Process valid input request*/

end // end SR0T-80000

// Read Carton TSQ Page
Function SR0T-81000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SR0TW00.XXX-RQT-DATA-FL != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* or Error was found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Retrieve a page of Carton data from temporary storage*/
   /* ------------------------------------------------------------*/

  set SR0TW04 empty; /* Initialize Cartons TSQ area*/

  SR0TS-SR0TW04-TR(); /* Read temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete*/
   /* ------------------------------------------------------------*/
  SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* format the map flag*/
  SR0TW00.XXX-RQT-DATA-FL = "N"; /* request for data flag*/

end // end SR0T-81000

// Format and display the map
Function SR0T-82000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  if (SR0TW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SR0T-82100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0TM800.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/
      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0TM800.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    SR0TM001.XXXERRID = SRWREC.XXXERRID; /* Message loc*/

    set SR0TM800 alarm; /* Indicate sound alarm*/

  end

  converse SR0TM800 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = " "; /* Message location*/
  SRWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SR0TM800.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0TM800.CAITEM; /* Application data*/

  set SR0TM800.CATOAP normal; /* TO application*/
  set SR0TM800.CAITEM normal; /* Application data*/

end // end SR0T-82000

// Format data in the map
Function SR0T-82100()
  set SR0TM800 initial;

  SR0TW00.XXX-MAP-FMAT-FL = "N";

   /* Move Heading Detail to Map*/

  set SR0TM800.XXX-LN-SEL-IND[1] cursor;
  SR0TM800.XWH-WHSE-CD = SR0TW01.XWHCD; /* Warehouse code*/
  SR0TM800.XWH-WHSE-ABRV = SR0TW01.XWHABRV; /* Warehouse desc*/
  SR0TM800.SR0TM-OPTION = SR0TW01.SR0TW-OPTION; /* Option from map 1*/
  SR0TM800.PK1BLLAD[1] = SR0TW01.PK1BLLAD[1];
  SR0TM800.SR2BLLSU[1] = SR0TW01.SR2BLLSU[1];

  if (SR0TW01.PK1BLLAD[2] > 0)
    set SR0TM800.PK1BLLAD[2] initialAttributes;
    set SR0TM800.SR2BLLSU[2] initialAttributes;
    set SR0TM800.SR0TM-TO-BOL-LIT initialAttributes;
    set SR0TM800.SR0TM-TO-BOL-SUB-LIT initialAttributes;
    SR0TM800.PK1BLLAD[2] = SR0TW01.PK1BLLAD[2];
    SR0TM800.SR2BLLSU[2] = SR0TW01.SR2BLLSU[2];
  else
    set SR0TM800.PK1BLLAD[2] skip, noHighLight;
    set SR0TM800.SR2BLLSU[2] skip, noHighLight;
    set SR0TM800.SR0TM-TO-BOL-LIT skip, invisible;
    set SR0TM800.SR0TM-TO-BOL-SUB-LIT skip, invisible;
  end

  SR0TM800.XXX-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR;
  SR0TM800.XXX-HI-PAGE-NBR = SR0TW00.SR0TW-M800-HI-PAGE-NBR;
  SR0TM800.XXX-MSG-LOC-ID = " ";

  SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
  SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

  while (SR0TW00.SR0TW-M800-INX-FLD-NBR <= SR0TW00.SR0TW-M800-INX-LMT-NBR
  )
    if (SR0TW04.SR0TW-FIRST-CARTON-OF-ORDER-FL[SR0TW-M800-INX-FLD-NBR]
     == "Y" && SR0TW01.SR0TW-OPTION != "I")

      set SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] initialAttributes;
      SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] = SR0TW04.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR];
    else
      set SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] skip, noHighLight;
    end

    if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0 && 
    SR0TW01.SR0TW-OPTION != "I")

      set SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] initialAttributes;
      SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] = SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR];
    else
      set SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] skip, noHighLight;
    end

    if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0 && 
    (SR0TW-M800-INX-FLD-NBR == 1 || 
    SR0TW-FIRST-CARTON-OF-ORDER-FL[SR0TW-M800-INX-FLD-NBR] == "Y"))
      set SR0TM800.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] initialAttributes;
      set SR0TM800.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] initialAttributes;
      SR0TM800.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];
      SR0TM800.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];
    else
      set SR0TM800.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] skip, invisible;
    end

    SR0TM800.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    SR0TM800.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    SR0TM800.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    SR0TM800.PK-CRTN-UNIT-QTY[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-CRTN-UNIT-QTY[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-CRTN-UNIT-QTY[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    SR0TM800.PK-ACTL-CRTN-WT[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-ACTL-CRTN-WT[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-ACTL-CRTN-WT[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    SR0TM800.PK-CRTN-CHARGE-AMT[SR0TW-M800-INX-FLD-NBR] = SR0TW04.PK-CRTN-CHARGE-AMT[SR0TW-M800-INX-FLD-NBR];
    set SR0TM800.PK-CRTN-CHARGE-AMT[SR0TW-M800-INX-FLD-NBR] initialAttributes;

    if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] == 0)

      set SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] skip, noHighLight;
      set SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] skip, noHighLight;
      set SR0TM800.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-CRTN-UNIT-QTY[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-ACTL-CRTN-WT[SR0TW-M800-INX-FLD-NBR] skip, invisible;
      set SR0TM800.PK-CRTN-CHARGE-AMT[SR0TW-M800-INX-FLD-NBR] skip, invisible;

    end

    SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

  end

end // end SR0T-82100

// Check attention identifier
Function SR0T-83000()

  if (SR0TW00.SR0TW-CONFIRM-FL == "Y")
    if (converseVar.eventKey not enter && converseVar.eventKey not pf3)
      converseLib.validationFailed(12); /* Invalid PF key*/
      set SR0TM002.CATOAP cursor, bold; /* Highlight*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SRWREC.SRWMISCF[3] = "N"; /* Clear flag to display M002*/
    SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-SAVE-CURR-PAGE-NBR;

    if (SR0TW01.SR0TW-OPTION == "C") /* Consolidating*/
      SR0TW00.SR0TW-FR-TO-BOL-IND = 1; /* points to TO BOL*/
    end

    SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SR0TM800.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

      XSSRS-EXIT(); /* Exit to another application*/

    else

      SRWREC.XXXERRID = "83000"; /* Message location*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/
      set SR0TM800.CATOAP cursor, bold; /* Highlight*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SR0TM800"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      SR0TW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      SRWREC.SRWMISCF[3] = "N"; /* Clear flag to display M002*/
      SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-SAVE-CURR-PAGE-NBR;

      if (SR0TW01.SR0TW-OPTION == "C") /* Consolidating*/
        SR0TW00.SR0TW-FR-TO-BOL-IND = 1; /* points to TO BOL*/
      end

      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/

      exit stack;

    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      SR0TS-SR0TW02-TP(); /* Purge FROM BOL TSQ area*/
      SR0TS-SR0TW03-TP(); /* Purge TO BOL TSQ area*/
      SR0TS-SR0TW04-TP(); /* Purge Carton TSQ area*/
    end

    XSSRS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* PROCESS REQUEST*/
   && converseVar.eventKey not pf7   /* SCROLL UP*/
   && converseVar.eventKey not pf8)  /* SCROLL DOWN*/

    SRWREC.XXXERRID = "83000"; /* Message location*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SR0T-83000

// Verify entered data
Function SR0T-84000()

  if (SR0TW00.SR0TW-CONFIRM-FL == "Y") /* If confirmation required*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SRWREC.XXXERRID = "84000"; /* Message location*/
    converseLib.validationFailed(130); /* Enter only with FAST PATH*/
    set SR0TM800.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Edit entered data (if any) for the current map.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-M800-SEL-FL = "N";
  SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "N";

  SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
  SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

  while (SR0TW00.SR0TW-M800-INX-FLD-NBR <= SR0TW00.SR0TW-M800-INX-LMT-NBR
   && SR0TM800.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] > 0)

    if (SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] != " ")
      if (SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] != "S"
       && SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] != "*")
        SRWREC.XXXERRID = "84000"; /* Message location*/
        converseLib.validationFailed(131); /* Must be 'S' only*/
        set SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] cursor, bold;
      else
        if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM == 1)
          SRWREC.XXXERRID = "84000"; /* Message location*/
          converseLib.validationFailed(227); /* Whole order split not allowed for BOL*/
          exit stack; /* with only one order*/
        else
          SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "Y";
        end
      end
    end
    if (SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] != " "
     && SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] != "*")

      if (SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S")
        SR0TW00.SR0TW-M800-SEL-FL = "Y";
      else
        SRWREC.XXXERRID = "84000"; /* Message location*/
        converseLib.validationFailed(95); /* Only 'S' may be entered*/
        set SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] cursor, bold;
      end

    end
    SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;
  end

  if (converseVar.validationMsgNum > 0) /* If error*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SR0TW00.SR0TW-M800-CURR-PAGE-NBR == 1) /* and no previous pages*/
    SRWREC.XXXERRID = "84000"; /* Message location*/
    converseLib.validationFailed(99); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SR0TW00.SR0TW-M800-CURR-PAGE-NBR
   >= SR0TW00.SR0TW-M800-HI-PAGE-NBR)
    SRWREC.XXXERRID = "84000"; /* Message location*/
    converseLib.validationFailed(98); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER, make sure there are selected cartons*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if (SR0TW01.SR0TW-OPTION == "M" /* If Modify Option*/
     && SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y") /* BOL Split Requested*/

      if (SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL != "Y"
       && SR0TW00.SR0TW-M800-SEL-FL != "Y") /* If no selection*/
        SRWREC.XXXERRID = "84000"; /* Message location*/
        converseLib.validationFailed(222);
        set SR0TM800.XXX-LN-SEL-IND[1] cursor, bold;
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error*/
    exit stack;
  end

  SR0TW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
  SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

  if (SR0TW01.SR0TW-OPTION != "I")
    while (SR0TW00.SR0TW-M800-INX-FLD-NBR <= SR0TW00.SR0TW-M800-INX-LMT-NBR
     && SR0TM800.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR] > 0)

      if (SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR]
       != SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR])
        SR0TW00.XXX-PAGE-UPD-FL = "Y";
        SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] = SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR];
      end

      if (SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S")
        SR0TW00.XXX-PAGE-UPD-FL = "Y";
        SR0TW04.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] = SR0TM800.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR];
      end

      SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

    end
  end

  if (SR0TW00.XXX-PAGE-UPD-FL == "Y") /* If current page changed*/

    SR0TS-SR0TW04-TU(); /* Update temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement page nbr*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && converseVar.validationMsgNum == 0) /* No errors exist*/

    if (SR0TW00.SR0TW-M800-CURR-PAGE-NBR >= 2)
      SR0TW00.SR0TW-M800-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR - 1;

      SR0TW00.XXX-MAP-DSP-CD = "3"; /* Map 3 display*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment page nbr*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && converseVar.validationMsgNum == 0) /* No errors exist*/

    if (SR0TW00.SR0TW-M800-CURR-PAGE-NBR
     < SR0TW00.SR0TW-M800-HI-PAGE-NBR)

      SR0TW00.SR0TW-M800-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR + 1;

      SR0TW00.XXX-MAP-DSP-CD = "3"; /* Map 3 display*/
      SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      exit stack;

    end

  end

end // end SR0T-84000

// Process valid request
Function SR0T-85000()

  if (SR0TW01.SR0TW-OPTION == "I") /* If option is Inquiry*/

    return;

  end

  SR0T-40000();

  if (SR0TW00.SR0TW-WHOLE-ORDERS-FL == "Y")

    SR0T-85010(); /* Build not selected array*/

  else

    if (SR0TW00.SR0TW-CONFIRM-FL == "N")

      if (converseVar.eventKey is enter)

        SR0TW00.SR0TW-CONFIRM-FL = "Y";
        converseLib.validationFailed(224); /* Press Enter for the confirmation*/
        set SR0TM002.CATOAP cursor, bold; /* Highlight*/
        exit stack;

      end

    end

    SR0TW00.SR0TW-CONFIRM-FL = "N";

    SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = 0;

    SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = 0;

    SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED = "N";

    SR0TW00.SR0TW-M800-CURR-PAGE-NBR = 1; /* Set to first page*/

    SR0TW00.SR0TW-CARTONS-SELECT-COUNT = 0; /* Initializing*/

    SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT = 0; /* Initializing*/

    SR0TW00.SR0TW-CAN-CTN-CTR = 0;

    SR0TW00.SR0TW-GOOD-CTN-CTR = 0;

    while (converseVar.validationMsgNum == 0 /* Each page of cartons level TSqueue*/
     && SR0TW00.SR0TW-M800-CURR-PAGE-NBR <= 
    SR0TW00.SR0TW-M800-HI-PAGE-NBR        
     && SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED == "N")

      SR0TS-SR0TW04-TR(); /* Read temporary storage*/

      SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
      SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

      while (converseVar.validationMsgNum == 0 /* Process each carton within a page*/
       && SR0TW00.SR0TW-M800-INX-FLD-NBR    
       <= SR0TW00.SR0TW-M800-INX-LMT-NBR    
       && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0
       && SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED == "N")

        if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         != SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
         || SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         != SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

          SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

          SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

          SR0TW00.SR0TW-CARTONS-SELECT-COUNT = 0;

          SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT = 0;

          if (SR0TW04.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S"
          )
            SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "Y";

          else

            SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "N";

          end
          SR0TW00.SR0TW-NEW-ORDER-FL = "N";

        end

        while (SR0TW00.SR0TW-M800-INX-FLD-NBR /* All ctns within an order*/
         <= SR0TW00.SR0TW-M800-INX-LMT-NBR 
         && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0
         && SR0TW00.SR0TW-NEW-ORDER-FL != "Y")

          if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
           == SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
           && SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
           == SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

            if (SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S")

              if (SR0TW04.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR] == "06"
               || SR0TW04.PK-MOVERS-STAT-CD[SR0TW-M800-INX-FLD-NBR]
               == "20")

                SR0TW00.SR0TW-CAN-CTN-CTR = SR0TW00.SR0TW-CAN-CTN-CTR + 1;

              else

                SR0TW00.SR0TW-GOOD-CTN-CTR = SR0TW00.SR0TW-GOOD-CTN-CTR + 1;

              end

              SR0TW00.SR0TW-CARTONS-SELECT-COUNT = SR0TW00.SR0TW-CARTONS-SELECT-COUNT + 1;

            else

              SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT = SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT + 1;

            end

            SR0TW00.SR0TW-NBR-OF-CARTONS-ACCUM = SR0TW00.SR0TW-NBR-OF-CARTONS-ACCUM + 1;

          else

            SR0TW00.SR0TW-NEW-ORDER-FL = "Y";

          end /* If order key unchanged*/

          SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

        end /* Do while the order key unchanged*/

        if (SR0TW00.SR0TW-NEW-ORDER-FL == "Y")

          if (SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL == "Y")

            if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0)

              SRWREC.XXXERRID = "85000";
              converseLib.validationFailed(228);
              exit stack;

            end

            if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM == 1)

              SRWREC.XXXERRID = "85000";
              converseLib.validationFailed(227);
              exit stack;

            end

          else

            if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0
             && SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT == 0)

              if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM == 1)

                SRWREC.XXXERRID = "85000";
                converseLib.validationFailed(227);
                exit stack;

              end

            end

            if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0
             && SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT > 0)

              SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED = "Y";

            end

          end

        end

      end /* Do for each line of TS Queue page*/

      SR0TW00.SR0TW-M800-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR + 1;

    end /* Do for each page*/

    if (SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL == "Y")

      if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0)

        SRWREC.XXXERRID = "85000";
        converseLib.validationFailed(228);
        exit stack;

      end

      if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM == 1)

        SRWREC.XXXERRID = "85000";
        converseLib.validationFailed(227);
        exit stack;

      end

    else

      if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0
       && SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT == 0)

        if (SR0TW00.SR0TW-NBR-OF-ORDERS-ACCUM == 1)

          SRWREC.XXXERRID = "85000";
          converseLib.validationFailed(227);
          exit stack;

        end

      end

      if (SR0TW00.SR0TW-CARTONS-SELECT-COUNT > 0
       && SR0TW00.SR0TW-CARTONS-NOT-SELECT-COUNT > 0)

        SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED = "Y";

      end

    end

    if (SR0TW00.SR0TW-CAN-CTN-CTR > 0) /* Some cancelled ctns*/

      if (SR0TW00.SR0TW-GOOD-CTN-CTR == 0) /* All ctns cancelled*/

        converseLib.validationFailed(251);
        exit stack;

      end
    end

    SR0T-85010(); /* Build not selected array*/
    SR0T-85020(); /* add to not selected array*/

  end /* If whole orders flag = 'Y'*/

  /* -----------------------------------------------------------------------*/
  /* The following code checks to see if BOL has previously been partially*/
  /* split.  If so, a new BOL is not assigned, but a +1 sub is assigned.*/
  /* -----------------------------------------------------------------------*/

  if (SR0TW00.SR0TW-WHOLE-ORDERS-FL == "Y")

    set SR2REC empty;

    SR2REC.XWHCD = SR0TW01.XWHCD;

    SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];

    SR2REC.SR2BLLSU = 99;

    SR0TS-IO0800-SE();

    if (SQLCA.VAGen_SQLCODE == +0 || SQLCA.VAGen_SQLCODE == -811)

      SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED = "Y";

    end

  end

  XX0XS01(); /* Get date/timestamp*/

  if (SR0TW01.SR0TW-OPTION == "M"
   && SR0TW00.SR0TW-SPLIT-REQUESTED-FL == "Y") /* Splitting*/

    SR0T-70000(); /* Assign new sub or whole new BOL*/

  end

  SR0TW00.SR0TW-OLD-NEW-PL-NBR-ARRAY = 0;

  SR0TW00.SR0TW-M800-CURR-PAGE-NBR = 1; /* Set to first page*/

  SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = 0;

  SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = 0;

  while (converseVar.validationMsgNum == 0 /* Each page of cartons level TSqueue*/
   && SR0TW00.SR0TW-M800-CURR-PAGE-NBR <= 
  SR0TW00.SR0TW-M800-HI-PAGE-NBR)

    SR0TS-SR0TW04-TR(); /* Read temporary storage*/

    SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

    while (converseVar.validationMsgNum == 0 /* Process each order within a page*/
     && SR0TW00.SR0TW-M800-INX-FLD-NBR    
     <= SR0TW00.SR0TW-M800-INX-LMT-NBR    
     && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0)

      if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
       != SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
       || SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
       != SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

        SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

        SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

        if (SR0TW04.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S"
        )
          SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "Y";

        else

          SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "N";

        end
        SR0TW00.SR0TW-NEW-ORDER-FL = "N";

      end
      while (SR0TW00.SR0TW-M800-INX-FLD-NBR
       <= SR0TW00.SR0TW-M800-INX-LMT-NBR
       && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0
       && SR0TW00.SR0TW-NEW-ORDER-FL != "Y")

        if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         == SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
         && SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         == SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

          if (SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S"
           || SR0TW00.SR0TW-WHOLE-ORDERS-FL == "Y"
           || SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL == "Y")

  /* -----------------------------------------------------------------------*/
  /* Code inserted to ensure that partial order splits not done for innerpk*/
  /* -----------------------------------------------------------------------*/

            if (SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED == "Y")

              SR0T-85050(); /* Check partial order split/innerpack*/

              if (SR0TW00.SR0TW-PK-INNER-CRTN-FL == "Y")

                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* If one ctn innerpk and others not*/
                                  /* should not happen but don't allow*/
                SR0TW00.SR0TW-PK-INNER-CRTN-FL = "N";
                SRWREC.XXXERRID = "85000";
                converseLib.validationFailed(247);
                set SR0TM800.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] bold, cursor;
                set SR0TM800.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] bold;
                set SR0TM800.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR] bold;
                exit stack;

              end

            end
  /* -----------------------------------------------------------------------*/

            SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL = "N";

            SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = 1;

            while (SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX <= 1000
             && SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] > 0
             && SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL != "Y")

              if (SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR]
               == SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX])

                SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL = "Y";

              else

                SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX + 1;

              end

            end

  /* -----------------------------------------------------------------------*/
  /* The following code was inserted to make use of the "Not Selected"*/
  /* Array, used for determining whether a new packing list is required*/
  /* or not.  The Rule:  If all cartons/orders for a packing list are*/
  /* moved to a new BOL or consolidated to an existing BOL, those*/
  /* cartons/orders should keep the original packing list number,*/
  /* otherwise, assign a new packing list number for all cartons on the old*/
  /* packing list number.*/
  /* -----------------------------------------------------------------------*/

            if (SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL == "N")

              SR0TW00.SR0TW-ASSIGN-NEW-PL-NBR-FL = "N";

              SR0TW00.SR0TW-NS-INX = 1;

              while (SR0TW00.SR0TW-NOT-SELECT-ARRAY[SR0TW-NS-INX] != 0 && 
              SR0TW00.SR0TW-ASSIGN-NEW-PL-NBR-FL != "Y")

                if (SR0TW00.SR0TW-NOT-SELECT-ARRAY[SR0TW-NS-INX] == 
                SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR])

                  SR0TW00.SR0TW-ASSIGN-NEW-PL-NBR-FL = "Y";

                end

                SR0TW00.SR0TW-NS-INX = SR0TW00.SR0TW-NS-INX + 1;

              end

              if (SR0TW00.SR0TW-ASSIGN-NEW-PL-NBR-FL == "N")

                SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

                SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

              else

                SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

                set PKDREC empty;

                PKDREC.XWHCD = SR0TW01.XWHCD;

                SR0TS-IO1890-S(); /* Lookup for next PL#*/

                SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = PKDREC.PKDNXPLN;

                if (SR0TW01.XWHCD == "51")

                  if (PKDREC.PKDNXPLN == 19999)

                    PKDREC.PKDNXPLN = 1;

                  else

                    PKDREC.PKDNXPLN = PKDREC.PKDNXPLN + 1;

                  end

                else

                  if (PKDREC.PKDNXPLN == 9999)

                    PKDREC.PKDNXPLN = 1;

                  else

                    PKDREC.PKDNXPLN = PKDREC.PKDNXPLN + 1;

                  end

                end /* If xwhcd eq '51'*/

                PKDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

                PKDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

                SR0TS-IO1890-U(); /* Update the control table*/

              end /* If assign-new-pl-nbr eq 'N'*/

            end /* If PL not found condition*/

            set VAZCTN01 empty;

            set VAZCIT01 empty;

            set VAZCSZ01 empty;

            set PWPREC empty;

            VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;

            VAZCIT01.XWH-WHSE-CD = SR0TW01.XWHCD;

            VAZCSZ01.XWH-WHSE-CD = SR0TW01.XWHCD;

            PWPREC.XWHCD = SR0TW01.XWHCD;

            VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];

            VAZCIT01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];

            VAZCSZ01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];

            VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

            VAZCIT01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

            VAZCSZ01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

            SR0TW00.SR0TW-OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            PWPREC.OP1PARTN = SR0TW00.SR0TW-OP-ORD-PART-CHAR;

            VAZCTN01.OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCIT01.OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCSZ01.OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            PWPREC.OP1CUOID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCTN01.OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCIT01.OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCSZ01.OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            PWPREC.OP1NORID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

            VAZCTN01.TS-NIKE-PL-NBR = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

            PWPREC.TSIPLNBR = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

            VAZCTN01.PK-CRTN-SEQ-NBR = SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR];

            VAZCIT01.PK-CRTN-SEQ-NBR = SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR];

            VAZCSZ01.PK-CRTN-SEQ-NBR = SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR];

            PWPREC.PKDNCSQN = SR0TW04.PK-CRTN-SEQ-NBR[SR0TW-M800-INX-FLD-NBR];

            VAZCTN01.PK-PICK-SCHED-NBR = SR0TW04.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR];

            VAZCIT01.PK-PICK-SCHED-NBR = SR0TW04.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR];

            PWPREC.PK1PKSCH = SR0TW04.PK-PICK-SCHED-NBR[SR0TW-M800-INX-FLD-NBR];

            SR0T-85100(); /* Update DSHIP.VAZCTN01*/

            SR0T-85200(); /* Update DSHIP.VAZCIT01*/

            SR0T-85300(); /* Update DSHIP.VAZCSZ01*/

            SR0T-85500(); /* Update VSPLIT01 and VSPLSZ02 of DPICK*/

          end /* If TSqueue line has been selected*/

          SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

        else

          SR0TW00.SR0TW-NEW-ORDER-FL = "Y";

        end /* If order number unchanged*/

      end /* Process each line on the page*/

    end

    SR0TW00.SR0TW-M800-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR + 1;

  end /* Process each order within a page*/

  SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = 1;

  while (SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX <= 1000
   && SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] > 0
  )
    SR0T-85600(); /* Update DPICK.VSPLHD01*/

    SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX + 1;

  end

  SR0TW00.SR0TW-FROM-TO-BOL-IND = 1;

  while (SR0TW00.SR0TW-FROM-TO-BOL-IND <= 2)

    SR0T-85650(); /* Process 1of1 flag*/

    SR0TW00.SR0TW-FROM-TO-BOL-IND = SR0TW00.SR0TW-FROM-TO-BOL-IND + 1;

  end

  SR0TW00.SR0TW-FROM-TO-BOL-IND = 1;

  while (SR0TW00.SR0TW-FROM-TO-BOL-IND <= 2)

    SR0T-85400(); /* Update VAZHDR01 and VAZORD01 of DSHIP*/

    SR0TW00.SR0TW-FROM-TO-BOL-IND = SR0TW00.SR0TW-FROM-TO-BOL-IND + 1;

  end

  if (SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED == "Y")

    SR0T-99000(); /* Update SRORD*/

    SR0T-86000(); /* Determine Order level status*/

    SR0T-87000(); /* Determine Header level status*/

  else

    SR0T-98000(); /* Update SRORD*/

    SR0T-87000(); /* Determine Header level status*/

  end

  SR0TW00.SR0TW-FROM-TO-BOL-IND = 1;

  SR0T-15300(); /* Format/Submit JCL AZ1511*/

  SR0TW01.SR0TW-ALL-ORDERS-FL = " "; /* Reset the option*/

  SR0TW00.SR0TW-SPLIT-REQUESTED-FL = " ";

  SR0TW00.SR0TW-WHOLE-ORDERS-FL = " ";

  SR0TW00.SR0TW-PARTIAL-ORDERS-SELECTED = "N";

  SR0TW00.XXX-MAP-DSP-CD = "1"; /* Display map 1*/

  SR0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

  SR0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  COMMAREA.CATOAP = " "; /* TO application*/

  COMMAREA.CAITEM = " "; /* Application data*/

  SR0TW00.SR0TW-MSG = " ";

  SR0TW00.SR0TW-MSG-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];

  SR0TW00.SR0TW-MSG-PERIOD = ".";

  SR0TW00.SR0TW-MSG-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

  if (SR0TM001.SR0TM-OPTION != "C")

    SR0TW00.SR0TW-MSG-TEXT = "SPLIT SUCCESSFUL, NEW BOL AND SUB ARE: ";

  else

    SR0TW00.SR0TW-MSG-TEXT = "CONSOLIDATE SUCCESSFUL, NEW BOL AND SUB ARE: ";

    SR0TW01.SR0TW-OPTION = "M";

    SR0TW01.PK1BLLAD[1] = SR0TW01.PK1BLLAD[2]; /* Display consl BOL*/

    SR0TW01.SR2BLLSU[1] = SR0TW01.SR2BLLSU[2];

    SR0TW01.PK1BLLAD[2] = 0; /* Reinitialize TO BOL/Sub for BOL*/

    SR0TW01.SR2BLLSU[2] = 0; /* print program*/

  end

  exit stack; /* Exit to display map*/

end // end SR0T-85000

Function SR0T-85010()
  /* -----------------------------------------------------------------------*/
  /* Builds array for not selected packing list numbers, used*/
  /* to determine if a new pack list number needs to be assigned*/
  /* -----------------------------------------------------------------------*/

  SR0TW00.SR0TW-NOT-SELECT-ARRAY = 0;

  if (SR0TW01.SR0TW-ALL-ORDERS-FL == "Y")
      /* next sentence*/
  else

    SR0TW00.XXX-CURR-PAGE-NBR = 1;
    SR0TW00.SR0TW-NS-INX = 1;

    while (SR0TW00.XXX-CURR-PAGE-NBR <= SR0TW01.XXX-HI-PAGE-NBR)

      SR0TS-SR0TW02-TR(); /* Read order level TS Queue*/

      SR0TW00.XXX-INX-FLD-NBR = 1;
      SR0TW00.XXX-INX-LMT-NBR = 10;

      while (SR0TW00.XXX-INX-FLD-NBR <= SR0TW00.XXX-INX-LMT-NBR && 
      SR0TW02.OP1CUOID[XXX-INX-FLD-NBR] != 0)

        if (SR0TW02.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == " ")

          VAZCTN01.XWH-WHSE-CD = SR0TW01.XWHCD;
          VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD;
          VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU;
          VAZCTN01.OP-CUST-ORD-ID = SR0TW02.OP1CUOID[XXX-INX-FLD-NBR];
          VAZCTN01.OP-NIKE-ORD-ID = SR0TW02.OP1NORID[XXX-INX-FLD-NBR];
          SR0TW00.SR0TW-AZCTN-EOF-FL = "N";
          SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR = 0;

          SR0TS-VAZCTN01-S4();
          SR0TS-VAZCTN01-N4();

          if (SQLCA.VAGen_SQLCODE == +100)
            SR0TW00.SR0TW-AZCTN-EOF-FL = "Y";
          end

          while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

            if (VAZCTN01.TS-NIKE-PL-NBR != 
            SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR)

              SR0TW00.SR0TW-NOT-SELECT-ARRAY[SR0TW-NS-INX] = VAZCTN01.TS-NIKE-PL-NBR;
              SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR;
              SR0TW00.SR0TW-NS-INX = SR0TW00.SR0TW-NS-INX + 1;

            end

            SR0TS-VAZCTN01-N4();

            if (SQLCA.VAGen_SQLCODE == +100)
              SR0TW00.SR0TW-AZCTN-EOF-FL = "Y";
            end

          end

          SR0TS-VAZCTN01-C4();

        end

        SR0TW00.XXX-INX-FLD-NBR = SR0TW00.XXX-INX-FLD-NBR + 1;

      end

      SR0TW00.XXX-CURR-PAGE-NBR = SR0TW00.XXX-CURR-PAGE-NBR + 1;

    end

  end
end // end SR0T-85010

Function SR0T-85020()
  /* -----------------------------------------------------------------------*/
  /* This process adds to the "Not Selected" array when partial orders are*/
  /* being split*/
  /*  */
  /* Because of the flexibility of this program orders can be selected for*/
  /* partial split but never actually split.  Therefore, in order to build*/
  /* the not-selected array properly for partial splits, we need to use*/
  /* both the order level TS Queue and carton level TS Queue.  This way we*/
  /* can tell exactly what was split.  REMEMBER:  The carton level TS Queue*/
  /* is built from selected orders, not necessarily what was actually split.*/
  /* -----------------------------------------------------------------------*/

  SR0TW00.SR0TW-M800-CURR-PAGE-NBR = 1;

  SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = 0;

  SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = 0;

  SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR = 0;

  while (SR0TW00.SR0TW-M800-CURR-PAGE-NBR <= 
  SR0TW00.SR0TW-M800-HI-PAGE-NBR)

    SR0TS-SR0TW04-TR();

    SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;

    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

    while (SR0TW00.SR0TW-M800-INX-FLD-NBR
     <= SR0TW00.SR0TW-M800-INX-LMT-NBR
     && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0)

      if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
       != SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
       || SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
       != SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

        SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

        SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

        if (SR0TW04.SR0TW-ALL-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == "S"
        )
          SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "Y";

        else

          SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL = "N";

        end
        SR0TW00.SR0TW-NEW-ORDER-FL = "N";

      end
      while (SR0TW00.SR0TW-M800-INX-FLD-NBR
       <= SR0TW00.SR0TW-M800-INX-LMT-NBR
       && SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR] != 0
       && SR0TW00.SR0TW-NEW-ORDER-FL != "Y")

        if (SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         == SR0TW00.SR0TW-SAVE-OP-CUST-ORD-ID
         && SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR]
         == SR0TW00.SR0TW-SAVE-OP-NIKE-ORD-ID)

          if (SR0TW04.XXX-LN-SEL-IND[SR0TW-M800-INX-FLD-NBR] == " "
           && SR0TW00.SR0TW-ALL-CTNS-SELECTED-FL != "Y"
           && SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR] != 
          SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR)

            SR0TW00.SR0TW-NOT-SELECT-ARRAY[SR0TW-NS-INX] = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

            SR0TW00.SR0TW-SAVE-TS-NIKE-PL-NBR = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR];

            SR0TW00.SR0TW-NS-INX = SR0TW00.SR0TW-NS-INX + 1;

          end

          SR0TW00.SR0TW-M800-INX-FLD-NBR = SR0TW00.SR0TW-M800-INX-FLD-NBR + 1;

        else

          SR0TW00.SR0TW-NEW-ORDER-FL = "Y";

        end

      end

      SR0TW00.SR0TW-M800-CURR-PAGE-NBR = SR0TW00.SR0TW-M800-CURR-PAGE-NBR + 1;
    end

  end
end // end SR0T-85020

Function SR0T-85050()

  set PWOREC empty;

  SR0TW00.SR0TW-PK-INNER-CRTN-FL = "N";

  PWOREC.XWHCD = SR0TW01.XWHCD;

  SR0TW00.SR0TW-OP-CUST-ORD-ID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

  PWOREC.OP1PARTN = SR0TW00.SR0TW-OP-ORD-PART-CHAR;

  PWOREC.OP1CUOID = SR0TW04.OP-CUST-ORD-ID[SR0TW-M800-INX-FLD-NBR];

  PWOREC.OP1NORID = SR0TW04.OP-NIKE-ORD-ID[SR0TW-M800-INX-FLD-NBR];

  PWOREC.TSIPLNBR = SR0TW04.TS-NIKE-PL-NBR[SR0TW-M800-INX-FLD-NBR]; /* Setup key for select unique*/

  SR0TS-IO5770-S(); /* Select unique from VSPLHD01*/

  if (PWOREC.PK-INNER-CRTN-FL == "Y") /* Verify inner-pack or not*/

    SR0TW00.SR0TW-PK-INNER-CRTN-FL = "Y";

  else

    SR0TW00.SR0TW-PK-INNER-CRTN-FL = "N";

  end

end // end SR0T-85050

// Process valid request
Function SR0T-85100()

  SR0TS-VAZCTN01-S(); /* Read from DSHIP.VAZCTN01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0TS-VAZCTN01-D(); /* Delete from DSHIP.VAZCTN01*/

    VAZCTN01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2]; /* 'TO' BOL*/

    VAZCTN01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2]; /* 'TO' sub*/

    VAZCTN01.TS-NIKE-PL-NBR = SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

    if (VAZCTN01.PK-MOVERS-STAT-CD == "  ")

      VAZCTN01.PK-MOVERS-STAT-CD = "02";

    else
      if (VAZCTN01.PK-MOVERS-STAT-CD == "12")

        VAZCTN01.PK-MOVERS-STAT-CD = "04";

      else
        if (VAZCTN01.PK-MOVERS-STAT-CD == "20")

          VAZCTN01.PK-MOVERS-STAT-CD = "06";

        end

      end

    end

    VAZCTN01.ZZ-SDT = XX0XW01.XX0XWDAT;

    VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

    VAZCTN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

    SR0TS-VAZCTN01-A(); /* Add to DSHIP.VAZCTN01*/

  end

end // end SR0T-85100

// Process valid request
Function SR0T-85200()

  SR0TS-VAZCIT01-S2(); /* Cursor for DSHIP.VAZCIT01*/

  SR0TS-VAZCIT01-N2(); /* Fetch from DSHIP.VAZCIT01*/

  while (SR0TW00.SR0TW-AZCIT-EOF-FL != "Y") /* Cursor not at end*/

    SR0TS-VAZCIT01-D(); /* Delete from DSHIP.VAZCIT01*/

    VAZCIT01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2]; /* 'TO' BOL*/

    VAZCIT01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2]; /* 'TO' sub*/

    VAZCIT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

    VAZCIT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  /*  SR0TS-VAZCIT01-A();            /* Add to DSHIP.VAZCIT01*/
    SR0TS-POP-VAZCIT02(); /* POPULATE VAZCIT02*/
    SR0TS-VAZCIT02-A(); /* Add to DSHIP.VAZCIT02*/

    SR0TS-VAZCIT01-N2(); /* Fetch from DSHIP.VAZCIT01*/

  end /* Do while 'Cursor not at end'*/

  SR0TS-VAZCIT01-C2(); /* Close the cursor on DSHIP.VAZCIT01*/

end // end SR0T-85200

// Process valid request
Function SR0T-85300()

  SR0TS-VAZCSZ01-S2(); /* Cursor for DSHIP.VAZCSZ01*/

  SR0TS-VAZCSZ01-N2(); /* Fetch from DSHIP.VAZCSZ01*/

  while (SR0TW00.SR0TW-AZCSZ-EOF-FL != "Y") /* Cursor not at end*/

    SR0TS-VAZCSZ01-D(); /* Delete from DSHIP.VAZCSZ01*/

    VAZCSZ01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2]; /* 'TO' BOL*/

    VAZCSZ01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2]; /* 'TO' sub*/

    VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

    VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

    SR0TS-POP-VAZCSZ02(); /* POPULATE VAZCSZ02*/

    SR0TS-VAZCSZ02-A(); /* Add to DSHIP.VAZCSZ01*/
  /*  SR0TS-VAZCSZ01-A();            /* Add to DSHIP.VAZCSZ01*/

    SR0TS-VAZCSZ01-N2(); /* Fetch from DSHIP.VAZCSZ01*/

  end /* Do while 'Cursor not at end'*/

  SR0TS-VAZCSZ01-C2(); /* Close the cursor on DSHIP.VAZCSZ01*/

end // end SR0T-85300

// Update VAZHDR01 & VAZORD01
Function SR0T-85400()

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;

  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[SR0TW-FROM-TO-BOL-IND];

  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[SR0TW-FROM-TO-BOL-IND];

  SR0TS-VAZHDR01-S(); /* Read from DSHIP.VAZHDR01 for current*/
                                   /* BOL*/

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;

  VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;

  VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  SR0TS-VAZORD01-S1(); /* Cursor for DSHIP.VAZORD01*/

  SR0TW00.SR0TW-AZORD-EOF-FL = "N";

  SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y")
    /**/
    set AZTOTREC empty;
    /**/
    AZTOTREC.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    /**/
    AZTOTREC.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    /**/
    AZTOTREC.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    /**/
    AZTOTREC.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    /**/
    AZTOTREC.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    /**/
    AZTOTREC.TS-NIKE-PL-NBR = -1;
    /**/
    SR0TS-AZ9900-SC(); /* Sum the cartons from DSHIP.VAZCTN01*/
    /**/
    if (AZTOTREC.SR0TW-TOT-CARTONS == 0)
      /**/
      set AZTOTREC empty;
      /**/
      AZTOTREC.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
      /**/
      AZTOTREC.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
      /**/
      AZTOTREC.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
      /**/
      AZTOTREC.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
      /**/
      AZTOTREC.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
      /**/
      AZTOTREC.TS-NIKE-PL-NBR = -1;
      /**/
      SR0TS-AZ9900-SX(); /* Sum the cancelled ctns if any exist*/
      /**/
      if (AZTOTREC.SR0TW-TOT-CARTONS == 0)
        /**/
        SR0TS-VAZORD01-D(); /* Delete from DSHIP.VAZORD01*/
        /**/
      else
        /**/
        VAZORD01.AZ-TOT-ORD-CARTONS = 0;
        /**/
        VAZORD01.OP-ORD-TOT-UNITS = 0;
        /**/
        VAZORD01.AZ-TOT-ORD-CART-WT = 0;
        /**/
        VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        /**/
        VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
        /**/
        SR0TW00.SR0TW-OK-TO-NOT-FIND = "N";
        /**/
        SR0TS-VAZORD01-U(); /* Update DSHIP.VAZORD01*/
        /**/
      end /* If there are no cancelled ctns*/
      /**/
    else
      /**/
      VAZORD01.AZ-TOT-ORD-CARTONS = AZTOTREC.SR0TW-TOT-CARTONS;
      /**/
      VAZORD01.OP-ORD-TOT-UNITS = AZTOTREC.SR0TW-TOT-UNIT-QTY;
      /**/
      VAZORD01.AZ-TOT-ORD-CART-WT = AZTOTREC.SR0TW-TOT-WEIGHT;
      /**/
      VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      /**/
      VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      /**/
      SR0TW00.SR0TW-OK-TO-NOT-FIND = "N";
      /**/
      SR0TS-VAZORD01-U(); /* Update DSHIP.VAZORD01*/
      /**/
    end /* If there are no cartons*/
    /**/
    if (SR0TW00.SR0TW-FROM-TO-BOL-IND == 1) /* From BOL*/
      /**/
      VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
      /**/
      VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];
      /**/
      VAZORD01.ZZ-SDT = XX0XW01.XX0XWDAT;
      /**/
      VAZORD01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
      /**/
      VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      /**/
      VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      /**/
      VAZORD01.ZZ-CHNG-CNT = 0;
      /**/
      SR0TS-VAZORD01-A(); /* Update DSHIP.VAZORD01*/
      /**/
    end /* If processing 'FROM' BOL*/
    /**/
    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/
    /**/
  end /* Cursor on DSHIP.VAZORD01 not at end*/

  SR0TS-VAZORD01-C1(); /* Close the cursor on DSHIP.VAZORD01*/

  set AZTOTREC empty;

  AZTOTREC.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;

  AZTOTREC.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;

  AZTOTREC.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  AZTOTREC.OP-CUST-ORD-ID = 0;

  AZTOTREC.OP-NIKE-ORD-ID = 0;

  AZTOTREC.TS-NIKE-PL-NBR = 0;

  SR0TS-AZ9900-SO(); /* Sum the quantities from AZORD for*/
                                   /* AZHDR*/

  if (AZTOTREC.SR0TW-TOT-CARTONS == 0) /* If no cartons*/
    /**/
    set AZTOTREC empty;
    /**/
    AZTOTREC.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
    /**/
    AZTOTREC.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
    /**/
    AZTOTREC.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;
    /**/
    AZTOTREC.OP-CUST-ORD-ID = -1;
    /**/
    AZTOTREC.OP-NIKE-ORD-ID = -1;
    /**/
    AZTOTREC.TS-NIKE-PL-NBR = -1;
    /**/
    SR0TS-AZ9900-SX(); /* Sum the cancelled ctns if any exist*/
    /**/
    if (AZTOTREC.SR0TW-TOT-CARTONS == 0) /* If no cartons*/
      /**/
      SR0TS-VAZHDR01-D(); /* Delete DSHIP.VAZHDR01*/
      /**/
    else
      /**/
      VAZHDR01.SR-TOT-NBR-CARTONS = 0;
      /**/
      VAZHDR01.AZ-TOT-SHPMT-WT = 0;
      /**/
      VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      /**/
      VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      /**/
      SR0TW00.SR0TW-OK-TO-NOT-FIND = "N";
      /**/
      if (SR0TW01.SR0TW-OPTION == "C"
       && VAZHDR01.PK-BOL-SUB-NBR == 0)
        SR0TS-POP-VAZHDR02(); /* POPULATE VAZHDR02*/
        SR0TS-VAZHDR02-U(); /* Update DSHIP.VAZHDR02*/
      else
        SR0TS-VAZHDR01-U(); /* Update DSHIP.VAZHDR01*/
      end
      /**/
    end /* If no cartons*/
  else
    /**/
    VAZHDR01.SR-TOT-NBR-CARTONS = AZTOTREC.SR0TW-TOT-CARTONS;
    /**/
    VAZHDR01.AZ-TOT-SHPMT-WT = AZTOTREC.SR0TW-TOT-WEIGHT;
    /**/
    VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    /**/
    VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    /**/
    SR0TW00.SR0TW-OK-TO-NOT-FIND = "N";
    /**/
    if (SR0TW01.SR0TW-OPTION == "C"
     && VAZHDR01.PK-BOL-SUB-NBR == 0)
      SR0TS-POP-VAZHDR02(); /* POPULATE VAZHDR02*/
      SR0TS-VAZHDR02-U(); /* Update DSHIP.VAZHDR02*/
    else
      SR0TS-VAZHDR01-U(); /* Update DSHIP.VAZHDR01*/
    end
    /**/
  end /* If no cartons*/

  if (SR0TW00.SR0TW-FROM-TO-BOL-IND == 1) /* If processing 'FROM' BOL*/
    /**/
    VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
    /**/
    VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];
    /**/
    VAZHDR01.ZZ-SDT = XX0XW01.XX0XWDAT;
    /**/
    VAZHDR01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
    /**/
    VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    /**/
    VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    /**/
    VAZHDR01.ZZ-CHNG-CNT = 0;
    /**/
     /* SR0TS-VAZHDR01-A();            /* Update DSHIP.VAZHDR01*/
    SR0TS-POP-VAZHDR02(); /* POPULATE VAZHDR02*/
    SR0TS-VAZHDR02-A(); /* Update DSHIP.VAZHDR02*/
    /**/
  end /* If processing 'FROM' BOL*/

end // end SR0T-85400

// Update VSPLSZ02 & VSPLIT01
Function SR0T-85500()

  SR0TS-IO5760-S8(); /* Cursor for DPICK.VSPLIT01*/

  SR0TS-IO5760-N8(); /* Fetch from DPICK.VSPLIT01*/

  while (SR0TW00.SR0TW-SPLIT-EOF-FL1 != "Y") /* SPLIT-1 cursor not at end*/

    set VSPLSZ02 empty;

    VSPLSZ02.XWHCD = PWPREC.XWHCD;
    VSPLSZ02.TSIPLNBR = PWPREC.TSIPLNBR;
    VSPLSZ02.OP1PARTN = PWPREC.OP1PARTN;
    VSPLSZ02.OP1CUOID = PWPREC.OP1CUOID;
    VSPLSZ02.OP1NORID = PWPREC.OP1NORID;
    VSPLSZ02.OP2LNINB = PWPREC.OP2LNINB;
    VSPLSZ02.PWPTOSQN = PWPREC.PWPTOSQN;
    VSPLSZ02.PKDNCSQN = PWPREC.PKDNCSQN;

    SR0TS-VSPLSZ02-S1(); /* Cursor for DPICK.VSPLSZ02*/

    SR0TW00.SR0TW-SPLSZ-EOF-FL = "N";

    SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

    while (SR0TW00.SR0TW-SPLSZ-EOF-FL != "Y" /* VSPLSZ02 cursor not at end*/
    )
      SR0TS-VSPLSZ02-D(); /* Delete from DPICK.VSPLSZ02*/

      VSPLSZ02.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

      VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;

      VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0TS-VSPLSZ02-A(); /* Add to DPICK.VSPLSZ02*/

      SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

    end /* Do while 'VSPLSZ02 cursor not at end'*/

    SR0TS-VSPLSZ02-C1(); /* Close cursor for DPICK.VSPLSZ02*/

    SR0TS-IO5760-D(); /* Delete from DPICK.VSPLIT01*/

    PWPREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PWPREC.XXXUSRID = "SR0T";

    SR0TS-IO5760-A(); /* Add to DPICK.VSPLIT01*/

    SR0TS-IO5760-N8(); /* Fetch from DPICK.VSPLIT01*/

  end /* SPLIT-1 cursor not at end*/

  SR0TS-IO5760-C8(); /* Close the cursor SPLIT-1*/

  if (PWPREC.PK-CNSLD-FL == "Y")

    PWPREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

    SR0TS-IO5760-SA(); /* Cursor for DPICK.VSPLIT01*/

    SR0TS-IO5760-NA(); /* Fetch from DPICK.VSPLIT01*/

    while (SR0TW00.SR0TW-SPLIT-EOF-FL2 != "Y")

      set VSPLSZ02 empty;

      VSPLSZ02.XWHCD = PWPREC.XWHCD;
      VSPLSZ02.TSIPLNBR = PWPREC.TSIPLNBR;
      VSPLSZ02.OP1PARTN = PWPREC.OP1PARTN;
      VSPLSZ02.OP1CUOID = PWPREC.OP1CUOID;
      VSPLSZ02.OP1NORID = PWPREC.OP1NORID;
      VSPLSZ02.OP2LNINB = PWPREC.OP2LNINB;
      VSPLSZ02.PWPTOSQN = PWPREC.PWPTOSQN;
      VSPLSZ02.PKDNCSQN = PWPREC.PKDNCSQN;

      SR0TS-VSPLSZ02-S1(); /* Cursor for DPICK.VSPLSZ02*/

      SR0TW00.SR0TW-SPLSZ-EOF-FL = "N";

      SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

      while (SR0TW00.SR0TW-SPLSZ-EOF-FL != "Y"
      )
        SR0TS-VSPLSZ02-D(); /* Delete from DPICK.VSPLSZ02*/

        VSPLSZ02.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

        VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;

        VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-VSPLSZ02-A(); /* Add to DPICK.VSPLSZ02*/

        SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

      end /* Do while 'VSPLSZ02 cursor not at end'*/

      SR0TS-VSPLSZ02-C1(); /* Close cursor for DPICK.VSPLSZ02*/

      SR0TS-IO5760-D(); /* Delete from DPICK.VSPLIT01*/

      PWPREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

      PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

      PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PWPREC.XXXUSRID = "SR0T";

      SR0TS-IO5760-A(); /* Add to DPICK.VSPLIT01*/

      SR0TS-IO5760-NA(); /* Fetch from DPICK.VSPLIT01*/

    end /* SPLIT-2 cursor not at end*/

    SR0TS-IO5760-CA(); /* Close the cursor SPLIT-2*/

  else

    if (PWPREC.PK-ZONE-CNSLD-FL == "Y")

      SR0TW00.SR0TW-SPLIT-EOF-FL2 = "N";

      PWPREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

      SR0TS-IO5760-SC(); /* Cursor for DPICK.VSPLIT01*/

      SR0TS-IO5760-NC(); /* Fetch from DPICK.VSPLIT01*/

      while (SR0TW00.SR0TW-SPLIT-EOF-FL2 != "Y")

        set VSPLSZ02 empty;

        VSPLSZ02.XWHCD = PWPREC.XWHCD;
        VSPLSZ02.TSIPLNBR = PWPREC.TSIPLNBR;
        VSPLSZ02.OP1PARTN = PWPREC.OP1PARTN;
        VSPLSZ02.OP1CUOID = PWPREC.OP1CUOID;
        VSPLSZ02.OP1NORID = PWPREC.OP1NORID;
        VSPLSZ02.OP2LNINB = PWPREC.OP2LNINB;
        VSPLSZ02.PWPTOSQN = PWPREC.PWPTOSQN;
        VSPLSZ02.PKDNCSQN = PWPREC.PKDNCSQN;

        SR0TS-VSPLSZ02-S1(); /* Cursor for DPICK.VSPLSZ02*/

        SR0TW00.SR0TW-SPLSZ-EOF-FL = "N";

        SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

        while (SR0TW00.SR0TW-SPLSZ-EOF-FL != "Y"
        )
          SR0TS-VSPLSZ02-D(); /* Delete from DPICK.VSPLSZ02*/

          VSPLSZ02.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

          VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;

          VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

          SR0TS-VSPLSZ02-A(); /* Add to DPICK.VSPLSZ02*/

          SR0TS-VSPLSZ02-N1(); /* Fetch from DPICK.VSPLSZ02*/

        end /* Do while 'VSPLSZ02 cursor not at end'*/

        SR0TS-VSPLSZ02-C1(); /* Close cursor for DPICK.VSPLSZ02*/

        SR0TS-IO5760-D(); /* Delete from DPICK.VSPLIT01*/

        PWPREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

        PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PWPREC.XXXUSRID = "SR0T";

        SR0TS-IO5760-A(); /* Add to DPICK.VSPLIT01*/

        SR0TS-IO5760-NC(); /* Fetch from DPICK.VSPLIT01*/

      end /* SPLIT-2 cursor not at end*/

      SR0TS-IO5760-CC(); /* Close the cursor SPLIT-2*/

    end
  end
end // end SR0T-85500

// Process Packing List Updates
Function SR0T-85600()

  /* ----------------------------------------------------------------*/
  /* SR0T-85600 process updates/creates packing list header*/
  /* during split or consolidate function*/
  /* ----------------------------------------------------------------*/

  /* -----------------------------------------------------------------------*/
  /* Following code was inserted to allow for a split/consolidate function*/
  /* which did not require a pack list number change*/
  /* -----------------------------------------------------------------------*/

  if (SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] == 
  SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX])

    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";
    set PWOREC empty;

    PWOREC.XWHCD = SR0TW01.XWHCD;
    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1];
    PWOREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

    SR0TS-IO5770-S6();
    SR0TS-IO5770-N6();

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

    end

    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

      PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
      PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[2];

      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0TS-IO5770-U();

      SR0TS-IO5770-N6();

      if (SQLCA.VAGen_SQLCODE == +100)
        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";
      end

    end

    SR0TS-IO5770-C6();

  else
  /* ------------ END OF ADDED CODE- END STATEMENT FOR "IF" IN LINE --------*/

    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

    set PWOREC empty; /* init vsplhd01*/

  /* ----------------------------------------------------------------*/
  /* Set Up key to get data from Dpick.Vsplhd01*/
  /* ----------------------------------------------------------------*/

    PWOREC.XWHCD = SR0TW01.XWHCD;

    PWOREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* old PL Nbr*/

    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Pk-bill-of-lading*/

    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* Pk-bol-sub-nbr*/

    SR0TS-IO5770-S6(); /* dcl cursor splhd*/

    SR0TS-IO5770-N6(); /* fetch splhd*/

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW-SPLHD-EOF-FL = "Y";

    end

    SR0TW00.SR0TW-OLD-SPLIT-ACCUM = 0;

    SR0TW00.SR0TW-NEW-SPLIT-ACCUM = 0;

    while (SR0TW-SPLHD-EOF-FL != "Y") /* splhd cursor not at end*/

      set PWPREC empty;

  /* -------------------------------------------------------------*/
  /* Build key for split from splhd record*/
  /* -------------------------------------------------------------*/

      PWPREC.XWHCD = PWOREC.XWHCD;

      PWPREC.TSIPLNBR = PWOREC.TSIPLNBR; /* Ts-nike-pl-nbr*/

      PWPREC.OP1PARTN = PWOREC.OP1PARTN; /* Op-ord-part-char*/

      PWPREC.OP1CUOID = PWOREC.OP1CUOID; /* Op-cust-ord-id*/

      PWPREC.OP1NORID = PWOREC.OP1NORID; /* Op-nike-ord-id*/

      SR0TW00.SR0TW-SPLIT-EOF-FL = "N";

      SR0TS-IO5760-S9(); /* select split row*/

      SR0TS-IO5760-N9(); /* fetch split row*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW-SPLIT-EOF-FL = "Y";

      end

      SR0TW00.SR0TW-SPLIT-ROWS-READ = 0; /* init accumulators*/

      SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM = 0;

      SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM = 0;

      while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

      /* ----------------------------------------------------------------*/
      /* accumulate totals*/
      /* ----------------------------------------------------------------*/

        SR0TW00.SR0TW-SPLIT-ROWS-READ = SR0TW00.SR0TW-SPLIT-ROWS-READ + 1;
        SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM = SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM + PWPREC.PK-EXPC-CRTN-WT;

        SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM = SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM + PWPREC.PK-ACTL-CRTN-WT;

        SR0TW00.SR0TW-SPLIT-CARTON-NBR-SAVE = PWPREC.TSOCRTNB;

        while (PWPREC.TSOCRTNB == SR0TW00.SR0TW-SPLIT-CARTON-NBR-SAVE
         && SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

          SR0TS-IO5760-N9(); /* fetch next split row*/

          if (SQLCA.VAGen_SQLCODE == +100)

            SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

          end /* end for if*/

        end /* end for while carton nbr unchanged*/

      end /* end for while split not at end of*/
                                   /* data*/

      SR0TS-IO5760-C9(); /* close split table*/

      if (SR0TW00.SR0TW-SPLIT-ROWS-READ == 0)

        SR0TS-IO5770-D(); /* delete PL header*/

      else

   /* accum split cartons*/
        SR0TW00.SR0TW-OLD-SPLIT-ACCUM = SR0TW00.SR0TW-OLD-SPLIT-ACCUM +         SR0TW00.SR0TW-SPLIT-ROWS-READ;

        PWOREC.PWONCTNO = SR0TW00.SR0TW-SPLIT-ROWS-READ; /* populate pk_nbr_crtn_ord*/

        PWOREC.PK-EXPC-TOT-PL-WT = SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM; /* populate splhd*/

        PWOREC.PK-ACTL-TOT-PL-WT = SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM; /* populate splhd*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO5770-U(); /* update splhd*/

      end /* end for if nbr of split rows = 0*/

      set PWPREC empty; /* init Dpick.vsplit01*/

  /* --------------------------------------------------------*/
  /* BUILD KEY FOR SPLIT FROM SPLHD RECORD USING "new" PL NBR*/
  /* --------------------------------------------------------*/

      PWPREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* New PL Nbr*/

      PWPREC.XWHCD = PWOREC.XWHCD;

      PWPREC.OP1PARTN = PWOREC.OP1PARTN; /* Op-ord-part-char*/

      PWPREC.OP1CUOID = PWOREC.OP1CUOID; /* Op-cust-ord-id*/

      PWPREC.OP1NORID = PWOREC.OP1NORID; /* Op-nike-ord-id*/

      SR0TW00.SR0TW-SPLIT-EOF-FL = "N"; /* init eof*/

      SR0TS-IO5760-S9(); /* DCLR SPLIT CRSR*/

      SR0TS-IO5760-N9(); /* Ftch Split row*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

      end

      SR0TW00.SR0TW-SPLIT-ROWS-READ = 0; /* init accumulators*/

      SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM = 0;

      SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM = 0;

      while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

                                  /* accumulate totals*/
        SR0TW00.SR0TW-SPLIT-ROWS-READ = SR0TW00.SR0TW-SPLIT-ROWS-READ + 1;

        SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM = SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM + PWPREC.PK-EXPC-CRTN-WT;

        SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM = SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM + PWPREC.PK-ACTL-CRTN-WT;

        SR0TW00.SR0TW-SPLIT-CARTON-NBR-SAVE = PWPREC.TSOCRTNB;

        while (PWPREC.TSOCRTNB == SR0TW00.SR0TW-SPLIT-CARTON-NBR-SAVE
         && SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

          SR0TS-IO5760-N9(); /* fetch next split row*/

          if (SQLCA.VAGen_SQLCODE == +100)

            SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

          end /* end for if*/

        end /* end for while carton nbr unchanged*/

      end /* end for while split not at end of*/
                                   /* data*/

      SR0TS-IO5760-C9(); /* close split table*/

      if (SR0TW00.SR0TW-SPLIT-ROWS-READ > 0)

   /* accum split cartons*/
        SR0TW00.SR0TW-NEW-SPLIT-ACCUM = SR0TW00.SR0TW-NEW-SPLIT-ACCUM +         SR0TW00.SR0TW-SPLIT-ROWS-READ;

        PWOREC.PWONCTNO = SR0TW00.SR0TW-SPLIT-ROWS-READ; /* populate pk_nbr_crtn_ord*/

        PWOREC.PK-EXPC-TOT-PL-WT = SR0TW00.SR0TW-EXP-CARTON-WEIGHT-ACCUM; /* populate splhd*/

        PWOREC.PK-ACTL-TOT-PL-WT = SR0TW00.SR0TW-ACT-CARTON-WEIGHT-ACCUM; /* populate splhd*/

        PWOREC.TSIPLNBR = PWPREC.TSIPLNBR; /* populate PL Nbr*/

        PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[2]; /* populate BOL*/

        PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[2]; /* populate sub nbr*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PWPREC.ZZZCHGCT = 0; /* populate chg ct*/

        SR0TS-IO5770-A(); /* insert row splhd*/

      end

      SR0TS-IO5770-N6(); /* Ftch next splhd*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end /* end for if*/

    end /* end for while splhd not at end*/

    SR0TS-IO5770-C6(); /* close splhd cursor*/

    set PWOREC empty;

  /* Set Up key to get data from Dpick.Vsplhd01*/

    PWOREC.XWHCD = SR0TW01.XWHCD;

    PWOREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* old PL Nbr*/

    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Pk-bill-of-lading*/

    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* pk-bol-sub-nbr*/

    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

    SR0TS-IO5770-S6(); /* dcl cursor splhd*/

    SR0TS-IO5770-N6(); /* fetch splhd*/

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW-SPLHD-EOF-FL = "Y";

    end

    while (SR0TW-SPLHD-EOF-FL != "Y") /* splhd cursor not at end*/

      PWOREC.PK1NBCTN = SR0TW00.SR0TW-OLD-SPLIT-ACCUM; /* Update pk-nbr-of-cartons*/

      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0TS-IO5770-U();

      SR0TS-IO5770-N6(); /* fetch splhd*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW-SPLHD-EOF-FL = "Y";

      end

    end /* end for while splhd not at end*/

    SR0TS-IO5770-C6(); /* close splhd*/

    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

    set PWOREC empty;

  /* Build key for splhd record using "new" PL Nbr*/

    PWOREC.XWHCD = SR0TW01.XWHCD;

    PWOREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* New PL Nbr*/

    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[2]; /* Pk-bill-of-lading*/

    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[2]; /* Pk-bol-sub-nbr*/

    SR0TS-IO5770-S6(); /* Dclr Hdr crsr*/

    SR0TS-IO5770-N6(); /* Ftch Hdr row*/

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

    end

    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

      PWOREC.PK1NBCTN = SR0TW00.SR0TW-NEW-SPLIT-ACCUM; /* Update pk_nbr_of_cartons*/

      PWOREC.PK-ORIG-CRTN-QTY = SR0TW00.SR0TW-NEW-SPLIT-ACCUM; /* Update pk_orig_crtn_qty*/

      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      SR0TS-IO5770-U(); /* update splhd*/

      SR0TS-IO5770-N6(); /* fetch splhd*/

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW-SPLHD-EOF-FL = "Y";

      end

    end /* end for while splhd not at end*/

    SR0TS-IO5770-C6(); /* close splhd*/

  end

  /* ===================================================================*/
  /* Code to accumulate PK_OUTER_CRTN_QTY/PK_OUTER_ORD_QTY (Old PL#)*/
  /* FROM BOL - Only process if innerpack*/
  /* ===================================================================*/

  if (SR0TW00.SR0TW-PK-INNER-CRTN-FL == "Y")

    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

    SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM = 0;

    set PWOREC empty;

    PWOREC.XWHCD = SR0TW01.XWHCD;

    PWOREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* old PL Nbr*/

    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Pk-bill-of-lading*/

    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* Pk-bol-sub-nbr*/

    SR0TS-IO5770-S6();

    SR0TS-IO5770-N6();

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

    end

    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

      SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM = 0; /* Init Ord qty*/

      set PWPREC empty;

      SR0TW00.SR0TW-SPLIT-EOF-FL = "N";

      PWPREC.XWHCD = PWOREC.XWHCD;

      PWPREC.TSIPLNBR = PWOREC.TSIPLNBR;

      PWPREC.OP1CUOID = PWOREC.OP1CUOID;

      PWPREC.OP1NORID = PWOREC.OP1NORID;

      PWPREC.OP1PARTN = PWOREC.OP1PARTN; /* Set up key for SPLIT*/

      SR0TS-IO5760-SB();

      SR0TS-IO5760-NB();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

      end

      SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR = 0;

      while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

        if (PWPREC.PK-CRTN-CNT-NBR == SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR)
                /* Continue*/
        else

          SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM = (SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM + 1);

          SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR = PWPREC.PK-CRTN-CNT-NBR;

        end

        SR0TS-IO5760-NB(); /* fetch next vsplit01 row*/
                /* Continue*/
        if (SQLCA.VAGen_SQLCODE == +100)
                /* Continue*/
          SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

        end

      end

      SR0TS-IO5760-CB(); /* close vsplit01 cursor*/

      SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM = (SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM +       SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM);
                                   /* Accumulate Total outer crtn*/

      if (SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM > 0)

        PWOREC.PK-OUTER-ORD-QTY = SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM; /* Update PK_OUTER_ORD_QTY*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO5770-U();

      end

      SR0TS-IO5770-N6();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end

    end

    SR0TS-IO5770-C6();

    if (SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM > 0)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

      set PWOREC empty;

      PWOREC.XWHCD = SR0TW01.XWHCD;

      PWOREC.TSIPLNBR = SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* old PL Nbr*/

      PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[1]; /* Pk-bill-of-lading*/

      PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[1]; /* Pk-bol-sub-nbr*/

      SR0TS-IO5770-S6();

      SR0TS-IO5770-N6();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end

      while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

        PWOREC.PK-OUTER-CRTN-QTY = SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM;

        PWOREC.PK-ORIG-CRTN-QTY = SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM; /* Adjust original ctn qty*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO5770-U();

        SR0TS-IO5770-N6();

        if (SQLCA.VAGen_SQLCODE == +100)

          SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

        end

      end

      SR0TS-IO5770-C6();

    end

  end

  /* ===================================================================*/
  /* Code to accumulate PK_OUTER_CRTN_QTY/PK_OUTER_ORD_QTY (New PL#)*/
  /* TO BOL - Only process if innerpack*/
  /* ===================================================================*/

  if (SR0TW00.SR0TW-PK-INNER-CRTN-FL == "Y")
    SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

    SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM = 0;

    set PWOREC empty;

    PWOREC.XWHCD = SR0TW01.XWHCD;

    PWOREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* New PL Nbr*/

    PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[2]; /* Pk-bill-of-lading*/

    PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[2]; /* Pk-bol-sub-nbr*/

    SR0TS-IO5770-S6();

    SR0TS-IO5770-N6();

    if (SQLCA.VAGen_SQLCODE == +100)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

    end

    while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

      SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM = 0; /* Init Ord qty*/

      set PWPREC empty;

      SR0TW00.SR0TW-SPLIT-EOF-FL = "N";

      PWPREC.XWHCD = PWOREC.XWHCD;

      PWPREC.TSIPLNBR = PWOREC.TSIPLNBR;

      PWPREC.OP1CUOID = PWOREC.OP1CUOID;

      PWPREC.OP1NORID = PWOREC.OP1NORID;

      PWPREC.OP1PARTN = PWOREC.OP1PARTN; /* Set up key for SPLIT*/

      SR0TS-IO5760-SB();

      SR0TS-IO5760-NB();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

      end

      SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR = 0;

      while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

        if (PWPREC.PK-CRTN-CNT-NBR == SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR)
                /* Continue*/
        else

          SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM = (SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM + 1);

          SR0TW00.SR0TW-PREV-PK-CRTN-CNT-NBR = PWPREC.PK-CRTN-CNT-NBR;

        end

        SR0TS-IO5760-NB(); /* fetch next vsplit01 row*/
                /* Continue*/
        if (SQLCA.VAGen_SQLCODE == +100)
                /* Continue*/
          SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

        end

      end

      SR0TS-IO5760-CB(); /* close vsplit01 cursor*/

      SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM = (SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM +       SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM);
                                   /* Accumulate Total outer crtn*/

      if (SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM > 0)

        PWOREC.PK-OUTER-ORD-QTY = SR0TW00.SR0TW-PK-OUTER-ORD-QTY-ACCUM; /* Update PK_OUTER_ORD_QTY*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO5770-U();

      end

      SR0TS-IO5770-N6();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end

    end

    SR0TS-IO5770-C6();

    if (SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM > 0)

      SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

      set PWOREC empty;

      PWOREC.XWHCD = SR0TW01.XWHCD;

      PWOREC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX]; /* New PL Nbr*/

      PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[2]; /* Pk-bill-of-lading*/

      PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[2]; /* Pk-bol-sub-nbr*/

      SR0TS-IO5770-S6();

      SR0TS-IO5770-N6();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end

      while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

        PWOREC.PK-OUTER-CRTN-QTY = SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM;

        PWOREC.PK-ORIG-CRTN-QTY = SR0TW00.SR0TW-PK-OUTER-CRTN-QTY-ACCUM; /* Adjust original ctn qty*/

        PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO5770-U();

        SR0TS-IO5770-N6();

        if (SQLCA.VAGen_SQLCODE == +100)

          SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

        end

      end

      SR0TS-IO5770-C6();

    end

  end

end // end SR0T-85600

// Process for 1of1 flag
Function SR0T-85650()

  SR0TW00.SR0TW-SPLHD-EOF-FL = "N";

  set PWOREC empty;

  PWOREC.XWHCD = SR0TW01.XWHCD;

  PWOREC.PK1BLLAD = SR0TW01.PK1BLLAD[SR0TW-FROM-TO-BOL-IND];

  PWOREC.SR2BLLSU = SR0TW01.SR2BLLSU[SR0TW-FROM-TO-BOL-IND];

  PWOREC.TSIPLNBR = -1;

  SR0TW00.SR0TW-SAVE-PL-NBR = 0;

  SR0TS-IO5770-S3();

  SR0TS-IO5770-N3();

  if (SQLCA.VAGen_SQLCODE == +100)

    SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

  end

  while (SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

    SR0TW00.SR0TW-ORDER-ARRAY = 0;

    SR0TW00.SR0TW-ORDER-ARRAY-INX = 1;

    SR0TW00.SR0TW-CTN-CTR = 0;

    if (PWOREC.TSIPLNBR != SR0TW00.SR0TW-SAVE-PL-NBR)

      SR0TW00.SR0TW-SAVE-PL-NBR = PWOREC.TSIPLNBR;

    end

    while (PWOREC.TSIPLNBR == SR0TW00.SR0TW-SAVE-PL-NBR && 
    SR0TW00.SR0TW-SPLHD-EOF-FL != "Y")

      SR0TW00.SR0TW-CUST-ORD-ID[SR0TW-ORDER-ARRAY-INX] = PWOREC.OP1CUOID;

      SR0TW00.SR0TW-NIKE-ORD-ID[SR0TW-ORDER-ARRAY-INX] = PWOREC.OP1NORID;

      SR0TW00.SR0TW-ORDER-ARRAY-INX = SR0TW00.SR0TW-ORDER-ARRAY-INX + 1;

      SR0TW00.SR0TW-CTN-CTR = SR0TW00.SR0TW-CTN-CTR + PWOREC.PWONCTNO;

      SR0TS-IO5770-N3();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLHD-EOF-FL = "Y";

      end

    end

    SR0TW00.SR0TW-ORDER-ARRAY-INX = 1;

    while (SR0TW00.SR0TW-CUST-ORD-ID[SR0TW-ORDER-ARRAY-INX] != 0)

      SR0TW00.SR0TW-SPLIT-EOF-FL = "N";

      set PWPREC empty;

      PWPREC.XWHCD = PWOREC.XWHCD;

      PWPREC.TSIPLNBR = SR0TW00.SR0TW-SAVE-PL-NBR;

      SR0TS-IO5760-S5();

      SR0TS-IO5760-N5();

      if (SQLCA.VAGen_SQLCODE == +100)

        SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

      end

      while (SR0TW00.SR0TW-SPLIT-EOF-FL != "Y")

        if (
        PWPREC.OP1CUOID == 
        SR0TW00.SR0TW-CUST-ORD-ID[SR0TW-ORDER-ARRAY-INX] && 
        PWPREC.OP1NORID == 
        SR0TW00.SR0TW-NIKE-ORD-ID[SR0TW-ORDER-ARRAY-INX])

  /* MOVE XX0XW01.XX0XWDAT TO PWPREC.ZZZCHGDT;*/

  /* MOVE XX0XW01.XX0XWTIM TO PWPREC.ZZZCHGTM;*/

  /* MOVE 'SR0T' TO PWPREC.XXXUSRID;*/

          if (SR0TW00.SR0TW-CTN-CTR == 1)

            PWPREC.PWP1OF1F = "Y";

          else

            PWPREC.PWP1OF1F = "N";

          end

          SR0TS-IO5760-U();

        end /* end for if orders equal*/

        SR0TS-IO5760-N5();

        if (SQLCA.VAGen_SQLCODE == +100)

          SR0TW00.SR0TW-SPLIT-EOF-FL = "Y";

        end

      end /* end while split not eof*/

      SR0TS-IO5760-C5(); /* close split*/

      SR0TW00.SR0TW-ORDER-ARRAY-INX = SR0TW00.SR0TW-ORDER-ARRAY-INX + 1;

    end /* end while array not 0*/

  end /* end while splhd not eof*/

  SR0TS-IO5770-C3(); /* close splhd*/

end // end SR0T-85650

// Format Prod jcl
Function SR0T-85700()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty;

  set SR0TW10 empty;

  TA6REC.TA6INDEX = 1;
  SR0TW00.SR0TW-JCL-INDEX = 1;

  TA6REC.TA6-MAX-COND-CODE = 0004;

  while (SR0TTP2.TARJCL[SR0TW-JCL-INDEX] != "/*EOF")

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "J")
      SR0TW10.SR0TW-JOB-CARD = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.XWH-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "1")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42") /* deactivate movers for Canada*/
      else
        SR0TW10.SR0TW-OUTPUT-CARD = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW-OUTPUT-LIT == "OUTPUT")
   /* IF SRWREC.SRWXWHCD EQ '42'; /* deactivate movers for Canada*/
   /* MOVE '230' TO SR0TW10.SR0TW-OUTPUT-RMT;*/
   /* END;*/
          if (SRWREC.SRWXWHCD == "51")
            SR0TW10.SR0TW-OUTPUT-RMT = "123";
          end
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "W")
      SR0TW10.SR0TW-WHSE-CARD = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.SR0TW-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "P")
      SR0TW10.SR0TW-AZ153D-PARM-CARD = " ";
      SR0TW10.SR0TW-AZ153D-PARM-TRAN-ID = "SR0T";
      SR0TW10.SR0TW-AZ153D-PARM-WHSE-CD = SRWREC.SRWXWHCD;
      SR0TW10.SR0TW-AZ153D-PARM-BOL-1 = SR0TW01.PK1BLLAD[1];
      SR0TW10.SR0TW-AZ153D-PARM-BOL-SUB-1 = SR0TW01.SR2BLLSU[1];
      SR0TW10.SR0TW-AZ153D-PARM-MOVERS-STAT-CD = " ";
      SR0TW10.SR0TW-AZ153D-PARM-BOL-2 = SR0TW01.PK1BLLAD[2];
      SR0TW10.SR0TW-AZ153D-PARM-BOL-SUB-2 = SR0TW01.SR2BLLSU[2];
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "F")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42")
        SR0TW10.SR0TW-FTP-CARD = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-FTP-LIT == "TARGET")
          if (SRWREC.SRWXWHCD == "02")
            SR0TW10.SR0TW-FTP-TARGET = "grsun1";
          end
          if (SRWREC.SRWXWHCD == "04")
            SR0TW10.SR0TW-FTP-TARGET = "memfware";
          end
          if (SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-FTP-TARGET = "wilfware";
          end
          if (SRWREC.SRWXWHCD == "42")
            SR0TW10.SR0TW-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end
        if (SR0TW10.SR0TW-FTP-LIT == "FTPPAR")
          SR0TW10.SR0TW-FTPPARMS-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == "S")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
        SR0TW10.SR0TW-RSH-CARD = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-RSH-LIT == "TAR")
          if (SRWREC.SRWXWHCD == "02")
            SR0TW10.SR0TW-RSH-TARGET = "grsun1";
          end
          if (SRWREC.SRWXWHCD == "04")
            SR0TW10.SR0TW-RSH-TARGET = "memfware";
          end
          if (SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-RSH-TARGET = "wilfware";
          end
        end
        if (SR0TW10.SR0TW-RSH-LIT == "CMD")
          SR0TW10.SR0TW-RSH-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTP2.TARTYPE[SR0TW-JCL-INDEX] == " ")
      TA6REC.TARJCL[TA6INDEX] = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    SR0TW00.SR0TW-JCL-INDEX = SR0TW00.SR0TW-JCL-INDEX + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = SR0TTP2.TARJCL[SR0TW-JCL-INDEX];

end // end SR0T-85700

// Format Test jcl
Function SR0T-85800()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty;

  set SR0TW10 empty;

  SR0TW10.TA3APLID = TA3REC.TA3APLID;

  TA6REC.TA6INDEX = 1;
  SR0TW00.SR0TW-JCL-INDEX = 1;

  TA6REC.TA6-MAX-COND-CODE = 0004;

  while (SR0TTT2.TARJCL[SR0TW-JCL-INDEX] != "/*EOF")

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "J")
      SR0TW10.SR0TW-JOB-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.XWH-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "N")
      TA6REC.TARJCL[TA6INDEX] = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TARTYPE[TA6INDEX] = "N";
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "1")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
      else
        SR0TW10.SR0TW-OUTPUT-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW-OUTPUT-LIT == "OUTPUT")
          SR0TW10.SR0TW-OUTPUT-RMT = "950";
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "W")
      SR0TW10.SR0TW-WHSE-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.SR0TW-WHSE-CD = SRWREC.SRWXWHCD;
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "R")
      SR0TW10.SR0TW-SYSTSIN-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
      SR0TW10.SR0TW-DSN-VALUE = "T";
      if (TA3REC.TA3RGNID == "04"
       || TA3REC.TA3RGNID == "08")
        SR0TW10.SR0TW-DSN-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          SR0TW10.SR0TW-DSN-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            SR0TW10.SR0TW-DSN-VALUE = "F";
          else
            if (TA3REC.TA3RGNID == "06")
              SR0TW10.SR0TW-DSN-VALUE = "F";
            end
          end
        end
      end
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-SYSTSIN-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "P")
      SR0TW10.SR0TW-AZ153D-PARM-CARD = " ";
      SR0TW10.SR0TW-AZ153D-PARM-TRAN-ID = "SR0T";
      SR0TW10.SR0TW-AZ153D-PARM-WHSE-CD = SRWREC.SRWXWHCD;
      SR0TW10.SR0TW-AZ153D-PARM-BOL-1 = SR0TW01.PK1BLLAD[1];
      SR0TW10.SR0TW-AZ153D-PARM-BOL-SUB-1 = SR0TW01.SR2BLLSU[1];
      SR0TW10.SR0TW-AZ153D-PARM-MOVERS-STAT-CD = " ";
      SR0TW10.SR0TW-AZ153D-PARM-BOL-2 = SR0TW01.PK1BLLAD[2];
      SR0TW10.SR0TW-AZ153D-PARM-BOL-SUB-2 = SR0TW01.SR2BLLSU[2];
      TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "F")
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07"
       || SRWREC.SRWXWHCD == "42")
        SR0TW10.SR0TW-FTP-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-FTP-LIT == "TARGET")
          if (SRWREC.SRWXWHCD == "02"
           || SRWREC.SRWXWHCD == "04"
           || SRWREC.SRWXWHCD == "07")
            SR0TW10.SR0TW-FTP-TARGET = "camware";
          end
          if (SRWREC.SRWXWHCD == "42")
            SR0TW10.SR0TW-FTP-TARGET = "SCARBORO-SVR-16";
          end
        end
        if (SR0TW10.SR0TW-FTP-LIT == "FTPPAR")
          SR0TW10.SR0TW-FTPPARMS-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == "S") /* RSH statements*/
      if (SRWREC.SRWXWHCD == "02"
       || SRWREC.SRWXWHCD == "04"
       || SRWREC.SRWXWHCD == "07")
        SR0TW10.SR0TW-RSH-CARD = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
        if (SR0TW10.SR0TW-RSH-LIT == "TAR")
          SR0TW10.SR0TW-RSH-TARGET = "camware";
        end
        if (SR0TW10.SR0TW-RSH-LIT == "CMD")
          SR0TW10.SR0TW-RSH-CMD-WHSE-CD = SRWREC.SRWXWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = SR0TW10.SR0TW-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (SR0TTT2.TARTYPE[SR0TW-JCL-INDEX] == " ")
      TA6REC.TARJCL[TA6INDEX] = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    SR0TW00.SR0TW-JCL-INDEX = SR0TW00.SR0TW-JCL-INDEX + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = SR0TTT2.TARJCL[SR0TW-JCL-INDEX];

end // end SR0T-85800

// Determine Order Status code
Function SR0T-86000()

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZHDR01-S(); /* Cursor on DSHIP.VAZORD01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0TS-P-AND-H();

    SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "XL";

    set VAZORD01 empty;

    VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
    VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
    VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

    SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y")

      set VAZCTN01 empty;

      VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
      VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
      VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
      VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
      VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
      VAZCTN01.PK-PICK-SCHED-NBR = -1;

      SR0TS-VAZCTN01-S6(); /* Cursor on DSHIP.VAZCTN01*/

      SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "XL";

      while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

        if (SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD != "  ")

          if (VAZCTN01.PK-MOVERS-STAT-CD == "  "
           || VAZCTN01.PK-MOVERS-STAT-CD == "02")

            SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "  ";

          else

            if (VAZCTN01.PK-MOVERS-STAT-CD == "12"
             || VAZCTN01.PK-MOVERS-STAT-CD == "04")

              SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "RE";

            end

          end

        end

        SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      end /* End of cursor on DSHIP.VAZCTN01*/

      SR0TS-VAZCTN01-C6(); /* Close of cursor on DSHIP.VAZCTN01*/

      if (SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD != VAZORD01.AZ-ORD-STAT-CD)

        VAZORD01.AZ-ORD-STAT-CD = SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD;

        SR0TS-VAZORD01-U();

      end

      SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    end /* End of cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-C1(); /* Close of cursor on DSHIP.VAZORD01*/

  end

  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

  SR0TS-VAZHDR01-S(); /* Cursor on DSHIP.VAZORD01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0TS-P-AND-H();

    SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "XL";

    set VAZORD01 empty;

    VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
    VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
    VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

    SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y")

      set VAZCTN01 empty;

      VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
      VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
      VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
      VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
      VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
      VAZCTN01.PK-PICK-SCHED-NBR = -1;

      SR0TS-VAZCTN01-S6(); /* Cursor on DSHIP.VAZCTN01*/

      SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "XL";

      while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

        if (SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD != "  ")

          if (VAZCTN01.PK-MOVERS-STAT-CD == "  "
           || VAZCTN01.PK-MOVERS-STAT-CD == "02")

            SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "  ";

          else

            if (VAZCTN01.PK-MOVERS-STAT-CD == "12"
             || VAZCTN01.PK-MOVERS-STAT-CD == "04")

              SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD = "RE";

            end

          end

        end

        SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      end /* End of cursor on DSHIP.VAZCTN01*/

      SR0TS-VAZCTN01-C6(); /* Close of cursor on DSHIP.VAZCTN01*/

      if (SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD != VAZORD01.AZ-ORD-STAT-CD)

        VAZORD01.AZ-ORD-STAT-CD = SR0TW00.SR0TW-UPDATE-AZ-ORD-STAT-CD;

        SR0TS-VAZORD01-U();

      end

      SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    end /* End of cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-C1(); /* Close of cursor on DSHIP.VAZORD01*/

  end

end // end SR0T-86000

// Determine Header status code
Function SR0T-87000()

  /* -------------------------------------------------------------------*/
  /* This code determines the VAZHDR01 ASN STAT CD based on the VAZORD01*/
  /* status and Pack & Hold flag for FROM BOL*/
  /* -------------------------------------------------------------------*/

  SR0TW00.SR0TW-STATUS-FL = "N";
  set VAZHDR01 empty;

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZHDR01-S(); /* Cursor on DSHIP.VAZORD01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0TS-P-AND-H();

    set VAZORD01 empty;

    VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
    VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
    VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

    SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "XL"; /* Default*/

    while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y" && 
    SR0TW00.SR0TW-STATUS-FL != "Y")

      if (VAZORD01.AZ-ORD-STAT-CD == "RE" ||  /* Candidate for P&H*/
      VAZORD01.AZ-ORD-STAT-CD == "  ")       

        if (WAZ1000.WAZ1000-SR-PACK-HLD-FL == "Y")

          SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "HD";
          SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

        else

          if (VAZORD01.AZ-ORD-STAT-CD == "  ")

            SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "NS";
            SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

          else

            if (VAZORD01.AZ-ORD-STAT-CD == "ST")

              SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "ST";
              SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

            else

              if (VAZORD01.AZ-ORD-STAT-CD == "RE")

                SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "RE";

              end
            end
          end
        end
      end

      SR0TS-VAZORD01-N1();

    end

    SR0TS-VAZORD01-C1();

    if (SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD != VAZHDR01.AZ-ASN-STAT-CD)

      VAZHDR01.AZ-ASN-STAT-CD = SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD;

      VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

      VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

      SR0TS-VAZHDR01-U();

    end

  end

  /* -------------------------------------------------------------------*/
  /* This code determines the VAZHDR01 ASN STAT CD based on the VAZORD01*/
  /* status and Pack & Hold flag for TO BOL*/
  /* -------------------------------------------------------------------*/

  set VAZHDR01 empty;

  SR0TW00.SR0TW-STATUS-FL = "N";

  VAZHDR01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
  VAZHDR01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

  SR0TS-VAZHDR01-S(); /* Cursor on DSHIP.VAZORD01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SR0TS-P-AND-H();

    set VAZORD01 empty;

    VAZORD01.XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;
    VAZORD01.PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;
    VAZORD01.PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

    SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

    SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "XL";

    while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y" && 
    SR0TW00.SR0TW-STATUS-FL != "Y")

      if (VAZORD01.AZ-ORD-STAT-CD == "RE" ||  /* Candidate for P&H*/
      VAZORD01.AZ-ORD-STAT-CD == "  ")       

        if (WAZ1000.WAZ1000-SR-PACK-HLD-FL == "Y")

          SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "HD";
          SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

        else

          if (VAZORD01.AZ-ORD-STAT-CD == "  ")

            SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "NS";
            SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

          else

            if (VAZORD01.AZ-ORD-STAT-CD == "ST")

              SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "ST";
              SR0TW00.SR0TW-STATUS-FL = "Y"; /* Force break*/

            else

              if (VAZORD01.AZ-ORD-STAT-CD == "RE")

                SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD = "RE";

              end
            end
          end
        end
      end

      SR0TS-VAZORD01-N1();

    end

    SR0TS-VAZORD01-C1();

    if (SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD != VAZHDR01.AZ-ASN-STAT-CD)

      VAZHDR01.AZ-ASN-STAT-CD = SR0TW00.SR0TW-UPDATE-AZ-ASN-STAT-CD;

      VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;

      VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

      SR0TS-VAZHDR01-U();

    end

  end

end // end SR0T-87000

// Update SRORD
Function SR0T-98000()

  /* -----------------------------------------------------------------------*/
  /* Updating of SRORD for this whole order split or consolidate process*/
  /* is based upon AZORD/AZCTN already being updated.  Update logic*/
  /* processes orders replacing the existing bol/sub on SRORD with the*/
  /* appropriate bol/sub, either "FROM" or "TO".  Logic is included for*/
  /* "TO BOL" processing to test the sub for value 99.  If condition is*/
  /* true, we make the new sub 99 also, rather than moving the map sub.*/
  /* This eliminates having BOL's on SRORD with 99 (obsolete) and 0 or 1*/
  /* (non-obsolete) subs.*/
  /* -----------------------------------------------------------------------*/

  /* ******************** "FROM BOL" START PROCESSING *********************/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
  SR2REC.SR2BLLSU = 99;

  SR0TS-IO0800-S3();
  SR0TS-IO0800-N3();

  if (SQLCA.VAGen_SQLCODE == +0)

    SR0TW00.SR0TW-TOBOL-PART-SPLIT-FL = "Y";

  else

    SR0TW00.SR0TW-TOBOL-PART-SPLIT-FL = "N";

  end

  SR0TS-IO0800-C3();

  set VAZORD01 empty;

  SR0TW00.SR0TW-SR-TOT-NBR-CARTONS = 0;

  VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];
  VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

  SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y")

    set VAZCTN01 empty;

    VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    VAZCTN01.PK-PICK-SCHED-NBR = -1;

    SR0TS-VAZCTN01-S6(); /* Cursor on DSHIP.VAZCTN01*/
    SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

    while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

      SR0TW00.SR0TW-SAVE-SCHED-NBR = VAZCTN01.PK-PICK-SCHED-NBR;

      SR0TW00.SR0TW-PK-WEIGHT = 0;
      SR0TW00.SR0TW-PK-NBR-OF-CARTONS = 0;
      SR0TW00.SR0TW-SR-SHP-CHG = 0;

      while (VAZCTN01.PK-PICK-SCHED-NBR == SR0TW00.SR0TW-SAVE-SCHED-NBR
       && SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

        SR0TW00.SR0TW-PK-WEIGHT = SR0TW00.SR0TW-PK-WEIGHT + VAZCTN01.PK-ACTL-CRTN-WT;

        SR0TW00.SR0TW-PK-NBR-OF-CARTONS = SR0TW00.SR0TW-PK-NBR-OF-CARTONS + 1;

        SR0TW00.SR0TW-SR-TOT-NBR-CARTONS = SR0TW00.SR0TW-SR-TOT-NBR-CARTONS + 1;

        SR0TW00.SR0TW-SR-SHP-CHG = SR0TW00.SR0TW-SR-SHP-CHG + VAZCTN01.PK-CRTN-CHARGE-AMT;

        SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      end /* While schedule not changed*/

      set SR2REC empty;

      SR2REC.XWHCD = VAZCTN01.XWH-WHSE-CD;
      SR2REC.OP1CUOID = VAZCTN01.OP-CUST-ORD-ID;
      SR2REC.OP1NORID = VAZCTN01.OP-NIKE-ORD-ID;
      SR2REC.PK1PKSCH = SR0TW00.SR0TW-SAVE-SCHED-NBR;
      SR2REC.OP1NTMAL = 0;

      SR0TS-IO0800-S(); /* Read from DSHIP.VSRORD01*/

      if (SR2REC.PK1BLLAD == SR0TW01.PK1BLLAD[1]
       && SR2REC.SR2BLLSU == SR0TW01.SR2BLLSU[1])

        SR2REC.PK1WT = SR0TW00.SR0TW-PK-WEIGHT;
        SR2REC.PK1NBCTN = SR0TW00.SR0TW-PK-NBR-OF-CARTONS;
        SR2REC.SR2SHPCG = SR0TW00.SR0TW-SR-SHP-CHG;

        SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  /*      SR0TS-IO0800-U();          /* Update DSHIP.VSRORD01*/
        SR0TS-POP-VSRORD03(); /* Populate DSHIP.VSRORD03*/
        SR0TS-VSRORD03-U(); /* Update DSHIP.VSRORD01*/

      end /* If SRORD has same BOL and Sub as*/
                                   /* 'FROM'*/

    end /* End of cursor on DSHIP.VAZCTN01*/

    SR0TS-VAZCTN01-C6(); /* Close of cursor on DSHIP.VAZCTN01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/
  end /* End of cursor on DSHIP.VAZORD01*/

  SR0TS-VAZORD01-C1(); /* Close of cursor on DSHIP.VAZORD01*/

  /* -----------------------------------------------------------------------*/
  /* Code inserted to update Total BOL Carton Counts for DSHIP.VSRORD01*/
  /* "FROM BOL"*/
  /* -----------------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[1];

  SR0TS-IO0800-S3();

  SR0TS-IO0800-N3();

  while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

    SR2REC.SR2TNBCT = SR0TW00.SR0TW-SR-TOT-NBR-CARTONS;

    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;

    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  /*      SR0TS-IO0800-U();          /* Update DSHIP.VSRORD01*/
    SR0TS-POP-VSRORD03(); /* Populate DSHIP.VSRORD03*/
    SR0TS-VSRORD03-U(); /* Update DSHIP.VSRORD01*/

    SR0TS-IO0800-N3();

  end

  SR0TS-IO0800-C3();

  /* -----------------------------------------------------------------------*/

  /* ********************* "TO BOL" START PROCESSING **********************/

  set VAZORD01 empty;

  SR0TW00.SR0TW-SR-TOT-NBR-CARTONS = 0;

  VAZORD01.XWH-WHSE-CD = SR0TW01.XWHCD;
  VAZORD01.PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[2];
  VAZORD01.PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[2];

  SR0TS-VAZORD01-S1(); /* Cursor on DSHIP.VAZORD01*/

  SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  while (SR0TW00.SR0TW-AZORD-EOF-FL != "Y")

    set VAZCTN01 empty;

    VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    VAZCTN01.PK-PICK-SCHED-NBR = -1;

    SR0TS-VAZCTN01-S6(); /* Cursor on DSHIP.VAZCTN01*/

    SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

    while (SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

      SR0TW00.SR0TW-SAVE-SCHED-NBR = VAZCTN01.PK-PICK-SCHED-NBR;

      SR0TW00.SR0TW-PK-WEIGHT = 0;
      SR0TW00.SR0TW-PK-NBR-OF-CARTONS = 0;
      SR0TW00.SR0TW-SR-SHP-CHG = 0;

      while (VAZCTN01.PK-PICK-SCHED-NBR == SR0TW00.SR0TW-SAVE-SCHED-NBR
       && SR0TW00.SR0TW-AZCTN-EOF-FL != "Y")

        SR0TW00.SR0TW-PK-WEIGHT = SR0TW00.SR0TW-PK-WEIGHT + VAZCTN01.PK-ACTL-CRTN-WT;

        SR0TW00.SR0TW-PK-NBR-OF-CARTONS = SR0TW00.SR0TW-PK-NBR-OF-CARTONS + 1;

        SR0TW00.SR0TW-SR-TOT-NBR-CARTONS = SR0TW00.SR0TW-SR-TOT-NBR-CARTONS + 1;

        SR0TW00.SR0TW-SR-SHP-CHG = SR0TW00.SR0TW-SR-SHP-CHG + VAZCTN01.PK-CRTN-CHARGE-AMT;

        SR0TS-VAZCTN01-N6(); /* Fetch from DSHIP.VAZCTN01*/

      end /* While schedule not changed*/

      set SR2REC empty;

      SR2REC.XWHCD = VAZCTN01.XWH-WHSE-CD;
      SR2REC.OP1CUOID = VAZCTN01.OP-CUST-ORD-ID;
      SR2REC.OP1NORID = VAZCTN01.OP-NIKE-ORD-ID;
      SR2REC.PK1PKSCH = SR0TW00.SR0TW-SAVE-SCHED-NBR;
      SR2REC.OP1NTMAL = 0;

      SR0TS-IO0800-S(); /* Read from DSHIP.VSRORD01*/

      if (SR2REC.PK1BLLAD == SR0TW01.PK1BLLAD[1]
       && SR2REC.SR2BLLSU == SR0TW01.SR2BLLSU[1])

        SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL = "N";

        SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = 1;

        while (SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX <= 1000
         && SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] > 0
         && SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL != "Y")

          if (SR2REC.TSIPLNBR == 
          SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX])
            SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL = "Y";
          else
            SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX = SR0TW00.SR0TW-OLD-NEW-PL-NBR-INX + 1;
          end

        end

        if (SR0TW00.SR0TW-OLD-PL-NBR-FOUND-FL == "N")
          SR0TW00.SR0TW-OLD-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = SR2REC.TSIPLNBR;
          set PKDREC empty;
          PKDREC.XWHCD = SR0TW01.XWHCD;
          SR0TS-IO1890-S(); /* Lookup for next PL#*/
          SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX] = PKDREC.PKDNXPLN;
          if (SR0TW01.XWHCD == "51")
            if (PKDREC.PKDNXPLN == 19999)
              PKDREC.PKDNXPLN = 1;
            else
              PKDREC.PKDNXPLN = PKDREC.PKDNXPLN + 1;
            end
          else
            if (PKDREC.PKDNXPLN == 9999)
              PKDREC.PKDNXPLN = 1;
            else
              PKDREC.PKDNXPLN = PKDREC.PKDNXPLN + 1;
            end
          end /* If xwhcd eq '51'*/
          PKDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
          PKDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
          SR0TS-IO1890-U(); /* Update the control table*/
        end /* If PL not found condition*/

        SR2REC.TSIPLNBR = SR0TW00.SR0TW-NEW-PL-NBR[SR0TW-OLD-NEW-PL-NBR-INX];

        SR2REC.PK1WT = SR0TW00.SR0TW-PK-WEIGHT;
        SR2REC.PK1NBCTN = SR0TW00.SR0TW-PK-NBR-OF-CARTONS;
        SR2REC.SR2SHPCG = SR0TW00.SR0TW-SR-SHP-CHG;

        SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];

        if (SR0TW00.SR0TW-TOBOL-PART-SPLIT-FL == "N")

          SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[2];

        else

          SR2REC.SR2BLLSU = 99;

        end

        SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;

        SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  /*      SR0TS-IO0800-U();          /* Update DSHIP.VSRORD01*/
        SR0TS-POP-VSRORD03(); /* Populate DSHIP.VSRORD03*/
        SR0TS-VSRORD03-U(); /* Update DSHIP.VSRORD01*/

      end /* If SRORD has same BOL and sub as*/
                                   /* 'FROM'*/
    end /* End of cursor on DSHIP.VAZCTN01*/

    SR0TS-VAZCTN01-C6(); /* Close of cursor on DSHIP.VAZCTN01*/

    SR0TS-VAZORD01-N1(); /* Fetch from DSHIP.VAZORD01*/

  end /* End of cursor on DSHIP.VAZORD01*/

  SR0TS-VAZORD01-C1(); /* Close of cursor on DSHIP.VAZORD01*/

  /* -----------------------------------------------------------------------*/
  /* Code inserted to update Total BOL Carton Counts for DSHIP.VSRORD01*/
  /* "TO BOL"*/
  /* -----------------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[2];

  SR0TS-IO0800-S3();

  SR0TS-IO0800-N3();

  while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

    SR2REC.SR2TNBCT = SR0TW00.SR0TW-SR-TOT-NBR-CARTONS;

  /*      SR0TS-IO0800-U();          /* Update DSHIP.VSRORD01*/
    SR0TS-POP-VSRORD03(); /* Populate DSHIP.VSRORD03*/
    SR0TS-VSRORD03-U(); /* Update DSHIP.VSRORD01*/

    SR0TS-IO0800-N3();

  end

  SR0TS-IO0800-C3();

  /* -----------------------------------------------------------------------*/

  /* -----------------------------------------------------------------------*/
  /* Code inserted to insert TO BOL into Dship.Vsradd01 if one-time ship fl*/
  /* is 'y' or ship group override code = 2*/
  /* -----------------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[2];

  SR0TS-IO0800-S3(); /* Cursor on DSHIP.Vsrord01*/

  SR0TS-IO0800-N3(); /* Fetch from DSHIP.Vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SR2REC.OP11TMSF == "Y"
     || SR2REC.SR2SHPCD == "2")

      SR4REC.XWHCD = SR0TW01.XWHCD;
      SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
      SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[2];

      SR0TS-IO0820-S();
      if (SQLCA.VAGen_SQLCODE == +100)

        set SR4REC empty;

        SR4REC.XWHCD = SR0TW01.XWHCD;
        SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[2];
        SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[2];
        SR4REC.OP5ALTNM = SR0TM001.OP5ALTNM;
        SR4REC.XXX-ADDR[1] = SR0TM001.XXX-ADDR[1];
        SR4REC.XXX-ADDR[2] = SR0TM001.XXX-ADDR[2];
        SR4REC.XXX-ADDR[3] = SR0TM001.XXX-ADDR[3];
        SR4REC.XXX-ADDR[4] = " ";
        SR4REC.XXX-ADDR[5] = " ";
        SR4REC.XXX-ADDR[6] = " ";
        SR4REC.XXXCITY = SR0TM001.XXXCITY;
        SR4REC.XSTCD = SR0TM001.XSTCD;
        SR4REC.XCTCD = SR0TM001.XCTCD;
        SR4REC.XXXZIP = SR0TM001.XXXZIP;
        SR4REC.ZZZSDT = XX0XW01.XX0XWDAT;
        SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        SR0TS-IO0820-A(); /* Add dship.vsradd01*/
      end
    end
  end
  SR0TS-IO0800-C3();

end // end SR0T-98000

// Set BOL Sub to 99  SRORD/SRADD
Function SR0T-99000()

  /* -----------------------------------------------------------------------*/
  /* TO BOL not updated in Dship.Vsradd01 because sub changed to 99 in this*/
  /* process.  PK0B checks sub for 99 and if equal, gets data from AZ*/
  /* -----------------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = SR0TW01.XWHCD;
  SR2REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
  SR2REC.SR2BLLSU = SR0TW01.SR2BLLSU[1];

  SR0TS-IO0800-S3(); /* Cursor for DSHIP.VSRORD01*/
  SR0TS-IO0800-N3(); /* Fetch from DSHIP.VSRORD01*/

  while (SR0TW00.SR0TW-SRORD-EOF-FL != "Y")

    SR2REC.SR2BLLSU = 99;
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  /*      SR0TS-IO0800-U();          /* Update DSHIP.VSRORD01*/
    SR0TS-POP-VSRORD03(); /* Populate DSHIP.VSRORD03*/
    SR0TS-VSRORD03-U(); /* Update DSHIP.VSRORD01*/

    SR0TS-IO0800-N3(); /* Fetch from DSHIP.VSRORD01*/

  end /* End of cursor for DSHIP.VSRORD01*/

  SR0TS-IO0800-C3(); /* Close of cursor on DSHIP.VSRORD01*/

  set SR4REC empty;

  SR4REC.XWHCD = SR0TW01.XWHCD;
  SR4REC.PK1BLLAD = SR0TW01.PK1BLLAD[1];
  SR4REC.SR2BLLSU = SR0TW01.SR2BLLSU[1];

  SR0TS-IO0820-S(); /* Read from DSHIP.VSRADD01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If row is found*/

    SR4REC.SR2BLLSU = 99;
    SR4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    SR0TS-IO0820-U(); /* Update DSHIP.VSRADD01*/

  end /* IF SQLCODE = 0*/

end // end SR0T-99000

// Call Subroutine - AZ1000
Function SR0TS-AZ1000()
  set WAZ1000 empty;

  WAZ1000.WAZ1000-XWH-WHSE-CD = SR0TW01.XWHCD;

  WAZ1000.WAZ1000-PK-BILL-OF-LADING = SR0TW01.PK1BLLAD[1];

  WAZ1000.WAZ1000-PK-BOL-SUB-NBR = SR0TW01.SR2BLLSU[1];

  WAZ1000.WAZ1000-RETURN-CODE = 99;

  WAZ1000.WAZ1000-CALLING-APPL = "SR0T";

  call "AZ1000" (SQLCA, WAZ1000) {isNoRefresh = yes, isExternal = yes};

  if (WAZ1000.WAZ1000-RETURN-CODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "AZ1000";
    TA1REC.TA1LOCAT[3] = "SR0TS-AZ1000";
    TA1REC.TA1LOCAT[4] = WAZ1000.WAZ1000-RETURN-CODE;
    TAEREC.TAEDESC1 = "BAD RETURN FROM AZ1000 - RETURN CODE = ";
    TAEREC.TAEDESC2 = WAZ1000.WAZ1000-RETURN-CODE;
    exit stack; /* appl retn - go to main menu*/
  end

end // end SR0TS-AZ1000

// Check BOL mult occur in AZ1120
Function SR0TS-AZ1120-S()
   /* ------------------------------------------------------------*/
   /* Selects VAZCTN01 rows*/
   /* To determine if any of the Schedule numbers are not in*/
   /* 'Balanced' or 'Released' status.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ1120" ("S ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ1120S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ1120-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ1120-S

// Select Min. Sched #
Function SR0TS-AZ1120-SD()
   /* ------------------------------------------------------------*/
   /* Select Minimum Schedule Number from VAZCTN01 for the Order*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ1120" ("SD", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0   /* If found*/
     || SQLCA.VAGen_SQLCODE == 100 /* If not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* If multibles found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ1120SD"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ1120-SD   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ1120-SD

// Select Min. Sched #
Function SR0TS-AZ1120-SM()
   /* ------------------------------------------------------------*/
   /* Select Minimum Schedule Number from VAZCTN01 for the Order*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ1120" ("SM", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ1120SM"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ1120-SM   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ1120-SM

// Sums ctns not seen by Movers
Function SR0TS-AZ9900-IP()
  /* =====================================================================*/
  /* This process selects all cartons where AZ-ASN-STAT-cd EQ '02' or '04'*/
  /* or '06'...for the purpose of determining if work is In Process for a*/
  /* given BOL. Used for determining valid Release and Exception processing*/
  /* =====================================================================*/

  try
    call "AZ9900" ("IP", SQLCA, AZTOTREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ9900IP"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ9900-IP   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ9900-IP

// Sums ctns not seen by Movers
Function SR0TS-AZ9900-NS()
  /* =====================================================================*/
  /* This process selects all cartons where AZ-ASN-STAT-cd NOT '12' and*/
  /* NOT '20'...for the purpose of determining if all cartons have been*/
  /* seen by Movers.  Stat 12/20 mean they have been seen by Movers*/
  /* =====================================================================*/

  try
    call "AZ9900" ("NS", SQLCA, AZTOTREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ9900NS"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ9900-NS   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ9900-NS

// Sum values in DSHIP.VAZCTN01
Function SR0TS-AZ9900-SC()

   /* -----------------------------------------------------------------*/
   /* Sum Values in DSHIP.VAZCTN01*/
   /* -----------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ9900" ("SC", SQLCA, AZTOTREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ9900SC"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ9900-SC   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ9900-SC

// Sum values on DSHIP.VAZORD01
Function SR0TS-AZ9900-SO()

   /* ----------------------------------------------------------------*/
   /* Sum values on DSHIP.VAZORD01*/
   /* ----------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ9900" ("SO", SQLCA, AZTOTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ9900SO"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ9900-SO   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ9900-SO

// Sum values in DSHIP.VAZCTN01
Function SR0TS-AZ9900-SX()

   /* -----------------------------------------------------------------*/
   /* Select cancelled carton counts from DSHIP.VAZCTN01*/
   /* -----------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ9900" ("SX", SQLCA, AZTOTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "AZ9900SX"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-AZ9900-SX   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-AZ9900-SX

Function SR0TS-GET-VICS-BOL()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* This will generate the next VICS BOL*/
   /* *******************************************************************************/

  VAZCTL01.XWH-WHSE-CD = SR0TW01.XWHCD;

  SR0TS-VAZCTL01-NA(); /* Next ASN sequence number*/

  SR0TW00.SR0TW-FMT-BOL-SEQ-NBR = VAZCTL01.AZ-ASN-NXT-NBR;

  SR0TW01.SR0TW-VICS-SEQ-NBR = VAZCTL01.AZ-ASN-NXT-NBR;

  SR0TW01.SR0TW-CHECK-SEQ-NBR = VAZCTL01.AZ-ASN-NXT-NBR;

  if (SR0TW01.XWHCD == "07")
    SR0TW01.SR0TW-VICS-PREFIX-NBR = 91203;
  else
    if (SR0TW01.XWHCD == "02")
      SR0TW01.SR0TW-VICS-PREFIX-NBR = 13816;
    else
      if (SR0TW01.XWHCD == "42")
        SR0TW01.SR0TW-VICS-PREFIX-NBR = 91209;
      else
        if (SR0TW01.XWHCD == "04")
          SR0TW01.SR0TW-VICS-PREFIX-NBR = 91202;
        end
      end
    end
  end
  SR0TW01.SR0TW-CHECK-PREFIX-NBR = SR0TW01.SR0TW-VICS-PREFIX-NBR;
  SR0TW01.SR0TW-CHECK-WHSE-CD = SR0TW01.XWHCD;
  SR0TW01.SR0TW-VICS-WHSE-CD = SR0TW01.XWHCD;
  SR0TW00.SR0TW-FMT-BOL-XWH-WHSE-CD = SR0TW01.XWHCD;
  SR0TW01.SR0TW-VICS-CONSTANT = 0;
  SR0TW01.SR0TW-CHECK-CONSTANT = 0;
  SR0TW01.SR0TW-TEMP-VARIABLE = SR0TW01.SR0TW-VICS-BOL-CHECK;
  SR0TW01.SR0TW-VICS-BOL-ARRAY = SR0TW01.SR0TW-TEMP-VARIABLE;
  SR0TW01.SR0TW-VICS-IDX = 1;
  SR0TW01.SR0TW-VICS-ODD-SUM = 0;
  while (SR0TW01.SR0TW-VICS-IDX <= 16)
    SR0TW01.SR0TW-VICS-ODD-SUM = SR0TW01.SR0TW-VICS-ODD-SUM +     SR0TW01.SR0TW-VICS-BOL-DIGIT[SR0TW01.SR0TW-VICS-IDX];
    SR0TW01.SR0TW-VICS-IDX = SR0TW01.SR0TW-VICS-IDX + 2;
  end
  SR0TW01.SR0TW-VICS-IDX = 2;
  SR0TW01.SR0TW-VICS-EVEN-SUM = 0;
  while (SR0TW01.SR0TW-VICS-IDX <= 16)
    SR0TW01.SR0TW-VICS-EVEN-SUM = SR0TW01.SR0TW-VICS-EVEN-SUM +     SR0TW01.SR0TW-VICS-BOL-DIGIT[SR0TW01.SR0TW-VICS-IDX];
    SR0TW01.SR0TW-VICS-IDX = SR0TW01.SR0TW-VICS-IDX + 2;
  end
  SR0TW01.SR0TW-VICS-EVEN-SUM = SR0TW01.SR0TW-VICS-EVEN-SUM * 3;
  SR0TW01.SR0TW-VICS-TEMP-VAR1 = SR0TW01.SR0TW-VICS-EVEN-SUM + SR0TW01.SR0TW-VICS-ODD-SUM;
  SR0TW01.SR0TW-VICS-TEMP-VAR2 = SR0TW01.SR0TW-VICS-TEMP-VAR1 % 10;
  if (SR0TW01.SR0TW-VICS-TEMP-VAR2 > 0)
    SR0TW01.SR0TW-VICS-CHECK-DIGIT = 10 - SR0TW01.SR0TW-VICS-TEMP-VAR2;
  else
    SR0TW01.SR0TW-VICS-CHECK-DIGIT = SR0TW01.SR0TW-VICS-TEMP-VAR2;
  end

end // end SR0TS-GET-VICS-BOL

// Get address - Dcust.vaddr001
Function SR0TS-IO0170-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dcust.vaddr001.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0170S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VADDR001"; /* Description*/
  TA1REC.TA1DBASE = "DCUST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VADDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = KULREC.KULGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0170-S

// Get cust nm - Dcust.vstore01
Function SR0TS-IO0340-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dcust.vstore01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = KUMREC.KUMSTRNM;
                                   /* Customer name*/

      set KULREC empty;

      KULREC.KUCCOID = KUMREC.KUCCOID;
      KULREC.KULAAID = KUMREC.KUMSHAID;

      SR0TS-IO0170-S(); /* Select dcust.vaddr001*/

      if (SQLCA.VAGen_SQLCODE == +0) /* If found*/
        SR0TW01.XXX-ADDR1[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR1;
                                   /* Customer address*/
        SR0TW01.XXX-ADDR2[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR2;
        SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR3;
        SR0TW01.XXX-ADDR4[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR4;
        SR0TW01.XXX-ADDR5[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR5;
        SR0TW01.XXX-ADDR6[SR0TW-FR-TO-BOL-IND] = KULREC.XXX-ADDR6;
        SR0TW01.XXXCITY[SR0TW-FR-TO-BOL-IND] = KULREC.XXXCITY;
        SR0TW01.XSTCD[SR0TW-FR-TO-BOL-IND] = KULREC.XSTCD;
        SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND] = KULREC.XXXZIP;
        SR0TW01.XCTCD[SR0TW-FR-TO-BOL-IND] = KULREC.XCTCD;
      else
        SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND] = "* CUSTOMER ADDRESS NOT FOUND *";
      end

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0340S"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO0340-S      "; /* Description*/
  TA1REC.TA1DBASE = "DCUST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0340-S

// Get SR header - dship.vsrhdr01
Function SR0TS-IO0790-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsrhdr01.*/
   /* 8/4/98 new addition for Retrofit Project.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty; /* SQL record*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0790S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VSRHDR01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0790-S

// Close 'C3' - dship.vsrord01
Function SR0TS-IO0800-C3()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("C3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800C3"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-C3

// Close 'C3' - dship.vsrord01
Function SR0TS-IO0800-C9()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("C9", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800C9"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO0800-C9"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-C9

// Fetch 'N3' - dship.vsrord01
Function SR0TS-IO0800-N3()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("N3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      SR0TW00.SR0TW-SRORD-EOF-FL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/
        SR0TW00.SR0TW-SRORD-EOF-FL = "Y";
        return;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800N3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH FROM VSRORD01 CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-N3

// Fetch 'N3' - dship.vsrord01
Function SR0TS-IO0800-N9()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("N9", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0TW00.SR0TW-SRORD-EOF-FL = "N";
      return;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/

        SR0TW00.SR0TW-SRORD-EOF-FL = "Y";
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800N9"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO0800-N9"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-N9

// Select - dship.vsrord01
Function SR0TS-IO0800-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not availble*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT UNIQUE VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0800-S

// Cursor 'S3' - dship.vsrord01
Function SR0TS-IO0800-S3()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-SRORD-EOF-FL = "N";

  set SQLCA empty;

  try
    call "IO0800" ("S3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800S3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-S3

// Cursor 'S3' - dship.vsrord01
Function SR0TS-IO0800-S9()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-SRORD-EOF-FL = "N";

  set SQLCA empty;

  try
    call "IO0800" ("S9", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800S9"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO0800-S9"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO0800-S9

// Select - dship.vsrord01
Function SR0TS-IO0800-SE()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0800" ("SE", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or dupes exist*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0800SE"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not availble*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO0800-SE"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0800-SE

// Add - dship.vsradd01
Function SR0TS-IO0820-A()
   /* ------------------------------------------------------------*/
   /* Add to dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0820" ("A ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820A"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD TO VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0820-A

// Delete - dship.vsradd01
Function SR0TS-IO0820-D()
   /* ------------------------------------------------------------*/
   /* Delete requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0820" ("D ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == +0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820D"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "DELETE VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0820-D

// Get address - dship.vsradd01
Function SR0TS-IO0820-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0820" ("S ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Message location*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO0820-S      "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0820-S

// Update - dship.vsradd01
Function SR0TS-IO0820-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dship.vsradd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0820" ("U ", SQLCA, SR4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == +100)

      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0820U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VSRADD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRADD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR4REC.SR4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0820-U

// Select - Dpick.vcarr001
Function SR0TS-IO0860-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vcarr001.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO0860S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO0860-S      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO0860-S

// Select - Dpick.vzipcd01
Function SR0TS-IO1640-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vzipcd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1640" ("S ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1640S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO1640-S      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VZIPCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF3REC.TF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO1640-S

// Get cust nm - Dpick.vpkcus01
Function SR0TS-IO1830-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkcus01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = PK6REC.KUMSTRNM;
                                   /* Customer name*/

      set PK7REC empty;

      PK7REC.KUCCOID = PK6REC.KUCCOID;
      PK7REC.KULAAID = PK6REC.KUMSHAID;

      SR0TS-IO2000-S(); /* Read dpick.vpkadr01*/

      if (SQLCA.VAGen_SQLCODE == +0)
        SR0TW01.XXX-ADDR1[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR1;
                                   /* Customer address*/
        SR0TW01.XXX-ADDR2[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR2;
        SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR3;
        SR0TW01.XXX-ADDR4[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR4;
        SR0TW01.XXX-ADDR5[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR5;
        SR0TW01.XXX-ADDR6[SR0TW-FR-TO-BOL-IND] = PK7REC.XXX-ADDR6;
        SR0TW01.XXXCITY[SR0TW-FR-TO-BOL-IND] = PK7REC.XXXCITY;
        SR0TW01.XSTCD[SR0TW-FR-TO-BOL-IND] = PK7REC.XSTSTCD;
        SR0TW01.XXXZIP[SR0TW-FR-TO-BOL-IND] = PK7REC.XXXZIP;
        SR0TW01.XCTCD[SR0TW-FR-TO-BOL-IND] = PK7REC.XCTCD;
      else
        SR0TW01.XXX-ADDR3[SR0TW-FR-TO-BOL-IND] = "* CUSTOMER ADDRESS NOT FOUND *";
      end

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      SR0TW01.OP5ALTNM[SR0TW-FR-TO-BOL-IND] = "* CUSTOMER DOES NOT EXIST *";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1830S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO1830-S      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO1830-S

// Check spec whse Dpick.vpkctl01
Function SR0TS-IO1890-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkctl01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1890S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO1890-S      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO1890-S

// Update - dship.vsrord01
Function SR0TS-IO1890-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1890" ("U ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1890U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO1890-U "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO1890-U

// Select 'S' - Dpick.vrtexn01
Function SR0TS-IO1900-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vrtexn01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1900" ("S ", SQLCA, TF4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1900S"; /* Message location*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* If resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "READING DB2 VRTEXN01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEXN01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF4REC.TF4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO1900-S

// Close 'C1' - Dpick.vsplhd01
Function SR0TS-IO1910-C1()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vrtewt01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1910" ("C1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON VRTEWT01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO1910-C1

// Fetch 'N1' - Dpick.vsplhd01
Function SR0TS-IO1910-N1()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1910" ("N1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "FETCH FROM VRTEWT01 CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO1910-N1

// Cursor 'S1' - Dpick.vsplhd01
Function SR0TS-IO1910-S1()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vrtewt01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1910" ("S1", SQLCA, TF5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO1910S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN VRTEWT01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTEWT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF5REC.TF5KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO1910-S1

// Get address - Dpick.vpkadr01
Function SR0TS-IO2000-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from dpick.vpkadr01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO2000" ("S ", SQLCA, PK7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to teh user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO2000S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VPKADR01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKADR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK7REC.PK7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO2000-S

// Check if Picking is running
Function SR0TS-IO4240-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the picking sameday/rush runs.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO4240S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VPKPGM01"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-IO4240-S

// Add - dpick.vsplit01
Function SR0TS-IO5760-A()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("A ", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760A "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-A      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-A

// close 'CA' - dpick.vsplit01
Function SR0TS-IO5760-C5()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("C5", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760C5"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-C5     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  /* MOVE TF5REC.TF5KEY TO TA1REC.TA1TBLKE/* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-C5

// close 'C8' - dpick.vsplit01
Function SR0TS-IO5760-C8()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("C8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760C8"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-C8     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  /* MOVE TF5REC.TF5KEY TO TA1REC.TA1TBLKE/* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-C8

// close 'C8' - dpick.vsplit01
Function SR0TS-IO5760-C9()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("C9", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760C9"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-C9     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  /* MOVE TF5REC.TF5KEY TO TA1REC.TA1TBLKE/* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-C9

// close 'CA' - dpick.vsplit01
Function SR0TS-IO5760-CA()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("CA", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760CA"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-CA     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  /* MOVE TF5REC.TF5KEY TO TA1REC.TA1TBLKE/* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-CA

// close 'C8' - dpick.vsplit01
Function SR0TS-IO5760-CB()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("CB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760CB"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-CB     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-CB

// close 'CA' - dpick.vsplit01
Function SR0TS-IO5760-CC()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("CC", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760CC"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-CC     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-CC

// Delete - dpick.vsplit01
Function SR0TS-IO5760-D()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("D ", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760D "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-D      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-D

// Fetch 'NA' - dpick.vsplit01
Function SR0TS-IO5760-N5()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("N5", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760N5"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-N5     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-N5

// Fetch 'N8' - dpick.vsplit01
Function SR0TS-IO5760-N8()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("N8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      SR0TW00.SR0TW-SPLIT-EOF-FL1 = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        SR0TW00.SR0TW-SPLIT-EOF-FL1 = "Y";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760N8"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-N8     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-N8

// Fetch 'N8' - dpick.vsplit01
Function SR0TS-IO5760-N9()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("N9", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      SR0TW00.SR0TW-SPLIT-EOF-FL1 = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        SR0TW00.SR0TW-SPLIT-EOF-FL1 = "Y";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760N9"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-N9     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-N9

// Fetch 'NA' - dpick.vsplit01
Function SR0TS-IO5760-NA()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("NA", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      SR0TW00.SR0TW-SPLIT-EOF-FL2 = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        SR0TW00.SR0TW-SPLIT-EOF-FL2 = "Y";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760NA"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-NA     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-NA

// Fetch 'N8' - dpick.vsplit01
Function SR0TS-IO5760-NB()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("NB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760NB"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-NB     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-NB

// Fetch 'NA' - dpick.vsplit01
Function SR0TS-IO5760-NC()
   /* ------------------------------------------------------------*/
   /* Select rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("NC", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      SR0TW00.SR0TW-SPLIT-EOF-FL2 = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/
        SR0TW00.SR0TW-SPLIT-EOF-FL2 = "Y";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760NC"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-NC     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-NC

// Cursor 'SA' - dpick.vsplit01
Function SR0TS-IO5760-S5()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("S5", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760S5"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-S5     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-S5

// Cursor 'S8' - dpick.vsplit01
Function SR0TS-IO5760-S8()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("S8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760S8"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-S8     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-S8

// Cursor 'S8' - dpick.vsplit01
Function SR0TS-IO5760-S9()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("S9", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760S9"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-S9     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-S9

// Cursor 'SA' - dpick.vsplit01
Function SR0TS-IO5760-SA()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("SA", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760SA"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-SA     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-SA

// Get Est Weight from SPLIT
Function SR0TS-IO5760-SB()
  set SQLCA empty;

  call "IO5760" ("SB", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* select scan*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(28); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "SR0TS-IO5760-SB "; /* Process name*/
    TA1REC.TA1LOC = "DECLARE CURSOR FOR VSPLIT01 TABLE";
    TA1REC.TA1MAP = "SR0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = PWPREC.PWPKEY;

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    return; /* Return to previous process*/
  end
   /* *************************************************************/
end // end SR0TS-IO5760-SB

// Cursor 'SA' - dpick.vsplit01
Function SR0TS-IO5760-SC()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("SC", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760SC"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-SC     "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-SC

// Add - dpick.vsplit01
Function SR0TS-IO5760-U()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5760" ("U ", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5760U "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5760-U      "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5760-U

// Add - dpick.vsplhd01
Function SR0TS-IO5770-A()
   /* ------------------------------------------------------------*/
   /* Update requested row from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5770" ("A ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770A"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO5770-A "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO5770-A

// Close cursor dpick.vsplhd01
Function SR0TS-IO5770-C3()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C3", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770C3"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-C3"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-C3

// Close cursor dpick.vsplhd01
Function SR0TS-IO5770-C4()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C4", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770C4"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-C4"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-C4

// Close cursor dpick.vsplhd01
Function SR0TS-IO5770-C5()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C5", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770C5"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-C5"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-C5

// Close cursor dpick.vsplhd01
Function SR0TS-IO5770-C6()
   /* ------------------------------------------------------------*/
   /* Close cursor on dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C6", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770C6"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-C6"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-C6

// Del - dpick.vsplhd01
Function SR0TS-IO5770-D()
   /* ------------------------------------------------------------*/
   /* Update requested row from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5770" ("D ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100
     || SQLCA.VAGen_SQLCODE == -811)
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770D"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO5770-D "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO5770-D

// Fetch dpick.vsplhd01
Function SR0TS-IO5770-N3()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N3", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770N3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-N3"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-N3

// Fetch dpick.vsplhd01
Function SR0TS-IO5770-N4()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N4", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770N4"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-N4"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-N4

// Fetch dpick.vsplhd01
Function SR0TS-IO5770-N5()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N5", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770N5"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-N5"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-N5

// Fetch dpick.vsplhd01
Function SR0TS-IO5770-N6()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N6", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == +100) /* or not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770N6"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-N6"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-N6

// Select 'S' - Dpick.vsplhd01
Function SR0TS-IO5770-S()
   /* ------------------------------------------------------------*/
   /* Select row from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5770" ("S ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100
     || SQLCA.VAGen_SQLCODE == -811)
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO5770-S "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO5770-S

// Cursor on dpick.vsplhd01
Function SR0TS-IO5770-S3()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S3", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S3"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-S3"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-S3

// Cursor on dpick.vsplhd01
Function SR0TS-IO5770-S4()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S4", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S4"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-S4"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-S4

// Cursor on dpick.vsplhd01
Function SR0TS-IO5770-S5()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S5", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S5"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-S5"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-S5

// Cursor on dpick.vsplhd01
Function SR0TS-IO5770-S6()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S6", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770S6"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-IO5770-S6"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-IO5770-S6

// Update - dpick.vsplhd01
Function SR0TS-IO5770-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dpick.vsplhd01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO5770" ("U ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5770U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-IO5770-U "; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-IO5770-U

// Call Subroutine - AZ1000
Function SR0TS-P-AND-H()
  set SQLCA empty;

  set WAZ1000 empty;

  WAZ1000.WAZ1000-XWH-WHSE-CD = VAZHDR01.XWH-WHSE-CD;

  WAZ1000.WAZ1000-PK-BILL-OF-LADING = VAZHDR01.PK-BILL-OF-LADING;

  WAZ1000.WAZ1000-PK-BOL-SUB-NBR = VAZHDR01.PK-BOL-SUB-NBR;

  WAZ1000.WAZ1000-RETURN-CODE = 99;

  call "AZ1000" (SQLCA, WAZ1000) {isNoRefresh = yes, isExternal = yes};

end // end SR0TS-P-AND-H

Function SR0TS-POP-VAZCIT02()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZCIT02 is populated from the old view VAZCIT01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  set VAZCIT02 empty;
  VAZCIT02.VAZCIT02-REC = VAZCIT01.VAZCIT01-REC;
  SR0TW01.SR0TW-TEMP-VICS-BOL-NBR = 0;
  SR0TW01.SR0TW-TEMP-VICS-CONSTANT = 0;

  if (VAZCIT01.XWH-WHSE-CD == "07")
    SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91203;
  else
    if (VAZCIT01.XWH-WHSE-CD == "02")
      SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 13816;
    else
      if (VAZCIT01.XWH-WHSE-CD == "42")
        SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91209;
      else
        if (VAZCIT01.XWH-WHSE-CD == "04")
          SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91202;
        else
          if (VAZCIT01.XWH-WHSE-CD == "09")
            SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91204;
          else
            if (VAZCIT01.XWH-WHSE-CD == "51")
              SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  SR0TW01.SR0TW-TEMP-BOL-NBR = VAZCIT01.PK-BILL-OF-LADING;

  if (SR0TW01.SR0TW-OPTION == "C"
   && VAZCIT01.PK-BOL-SUB-NBR > 0)
    SR0TW01.SR0TW-AZHDR-BOL = VAZHDR02.PK-BILL-OF-LADING;
    SR0TW01.SR0TW-AZHDR-SUB-BOL = VAZHDR02.PK-BOL-SUB-NBR;
    VAZHDR02.XWH-WHSE-CD = VAZCIT01.XWH-WHSE-CD;
    VAZHDR02.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
    VAZHDR02.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
    SR0TS-VAZHDR02-S();
    if (SQLCA.VAGen_SQLCODE == 0)
      VAZCIT02.PK-VICS-BOL = VAZHDR02.PK-VICS-BOL;
    else
      VAZCIT02.PK-VICS-BOL = SR0TW-TEMP-VICS-BOL-NBR;
    end
    VAZHDR02.PK-BILL-OF-LADING = SR0TW01.SR0TW-AZHDR-BOL;
    VAZHDR02.PK-BOL-SUB-NBR = SR0TW01.SR0TW-AZHDR-SUB-BOL;
  else
    if (SR0TW01.SR0TW-VICS-BOL-NBR > 0)
      VAZCIT02.PK-VICS-BOL = SR0TW01.SR0TW-VICS-BOL-NBR;
    else
      VAZCIT02.PK-VICS-BOL = SR0TW01.SR0TW-TEMP-VICS-BOL-NBR;
    end
  end

  VAZCIT02.ZZ-SDT = VAZCIT01.ZZ-SDT;
  VAZCIT02.ZZ-SETUP-HHMM = VAZCIT01.ZZ-SETUP-HHMM;
  VAZCIT02.ZZ-CHNG-DT = VAZCIT01.ZZ-CHNG-DT;
  VAZCIT02.ZZ-CHNG-HHMM = VAZCIT01.ZZ-CHNG-HHMM;
  VAZCIT02.ZZ-CHNG-CNT = VAZCIT01.ZZ-CHNG-CNT;

end // end SR0TS-POP-VAZCIT02

Function SR0TS-POP-VAZCSZ02()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZCSZ02 is populated from the old view VAZCSZ01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  set VAZCSZ02 empty;
  VAZCSZ02.VAZCSZ02-REC = VAZCSZ01.VAZCSZ01-REC;

  SR0TW01.SR0TW-TEMP-VICS-BOL-NBR = 0;
  SR0TW01.SR0TW-TEMP-VICS-CONSTANT = 0;

  if (VAZCSZ01.XWH-WHSE-CD == "07")
    SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91203;
  else
    if (VAZCSZ01.XWH-WHSE-CD == "02")
      SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 13816;
    else
      if (VAZCSZ01.XWH-WHSE-CD == "42")
        SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91209;
      else
        if (VAZCSZ01.XWH-WHSE-CD == "04")
          SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91202;
        else
          if (VAZCSZ01.XWH-WHSE-CD == "09")
            SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91204;
          else
            if (VAZCSZ01.XWH-WHSE-CD == "51")
              SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  SR0TW01.SR0TW-TEMP-BOL-NBR = VAZCSZ01.PK-BILL-OF-LADING;

  if (SR0TW01.SR0TW-OPTION == "C"
   && VAZCSZ01.PK-BOL-SUB-NBR > 0)
    SR0TW01.SR0TW-AZHDR-BOL = VAZHDR02.PK-BILL-OF-LADING;
    SR0TW01.SR0TW-AZHDR-SUB-BOL = VAZHDR02.PK-BOL-SUB-NBR;
    VAZHDR02.XWH-WHSE-CD = VAZCSZ01.XWH-WHSE-CD;
    VAZHDR02.PK-BILL-OF-LADING = VAZCSZ01.PK-BILL-OF-LADING;
    VAZHDR02.PK-BOL-SUB-NBR = VAZCSZ01.PK-BOL-SUB-NBR;
    SR0TS-VAZHDR02-S();
    if (SQLCA.VAGen_SQLCODE == 0)
      VAZCSZ02.PK-VICS-BOL = VAZHDR02.PK-VICS-BOL;
    else
      VAZCSZ02.PK-VICS-BOL = SR0TW-TEMP-VICS-BOL-NBR;
    end
    VAZHDR02.PK-BILL-OF-LADING = SR0TW01.SR0TW-AZHDR-BOL;
    VAZHDR02.PK-BOL-SUB-NBR = SR0TW01.SR0TW-AZHDR-SUB-BOL;
  else
    if (SR0TW01.SR0TW-VICS-BOL-NBR > 0)
      VAZCSZ02.PK-VICS-BOL = SR0TW01.SR0TW-VICS-BOL-NBR;
    else
      VAZCSZ02.PK-VICS-BOL = SR0TW01.SR0TW-TEMP-VICS-BOL-NBR;
    end
  end

  VAZCSZ02.ZZ-SDT = VAZCSZ01.ZZ-SDT;
  VAZCSZ02.ZZ-SETUP-HHMM = VAZCSZ01.ZZ-SETUP-HHMM;
  VAZCSZ02.ZZ-CHNG-DT = VAZCSZ01.ZZ-CHNG-DT;
  VAZCSZ02.ZZ-CHNG-HHMM = VAZCSZ01.ZZ-CHNG-HHMM;
  VAZCSZ02.ZZ-CHNG-CNT = VAZCSZ01.ZZ-CHNG-CNT;

end // end SR0TS-POP-VAZCSZ02

Function SR0TS-POP-VAZHDR02()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZHDR02 is populated from the old view VAZHDR01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  set VAZHDR02 empty;
  VAZHDR02.VAZHDR02-REC = VAZHDR01.VAZHDR01-REC;

  SR0TW01.SR0TW-TEMP-VICS-BOL-NBR = 0;
  SR0TW01.SR0TW-TEMP-VICS-CONSTANT = 0;

  SR0TW01.SR0TW-ORIG-VICS-CONSTANT = 0;

  if (VAZHDR01.XWH-WHSE-CD == "07")
    SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 91203;
    SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91203;
  else
    if (VAZHDR01.XWH-WHSE-CD == "02")
      SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 13816;
      SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 13816;
    else
      if (VAZHDR01.XWH-WHSE-CD == "42")
        SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 91209;
        SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91209;
      else
        if (VAZHDR01.XWH-WHSE-CD == "04")
          SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 91202;
          SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91202;
        else
          if (VAZHDR01.XWH-WHSE-CD == "09")
            SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 91204;
            SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91204;
          else
            if (VAZHDR01.XWH-WHSE-CD == "51")
              SR0TW01.SR0TW-ORIG-VICS-PREFIX-NBR = 91205;
              SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  if (VAZHDR01.PK-BOL-SUB-NBR > 0)
    SR0TW01.SR0TW-ORIG-BOL-NBR = SR0TW01.PK1BLLAD[1];
    VAZHDR02.PK-ORIG-VICS-BOL = SR0TW01.SR0TW-ORIG-VICS-BOL-NBR;
  else
    VAZHDR02.PK-ORIG-VICS-BOL = 0;
  end
   /* MOVE 0 TO VAZHDR02.PK-ORIG-VICS-BOL;*/

  SR0TW01.SR0TW-TEMP-BOL-NBR = VAZHDR01.PK-BILL-OF-LADING;

  if (SR0TW01.SR0TW-VICS-BOL-NBR > 0)
    VAZHDR02.PK-VICS-BOL = SR0TW01.SR0TW-VICS-BOL-NBR;
  else
    VAZHDR02.PK-VICS-BOL = SR0TW01.SR0TW-TEMP-VICS-BOL-NBR;
  end
   /* MOVE SR0TW01.SR0TW-VICS-BOL-NBR TO VAZHDR02.PK-VICS-BOL;*/
  VAZHDR02.ZZ-SDT = VAZHDR01.ZZ-SDT;
  VAZHDR02.ZZ-SETUP-HHMM = VAZHDR01.ZZ-SETUP-HHMM;
  VAZHDR02.ZZ-CHNG-DT = VAZHDR01.ZZ-CHNG-DT;
  VAZHDR02.ZZ-CHNG-HHMM = VAZHDR01.ZZ-CHNG-HHMM;
  VAZHDR02.ZZ-CHNG-CNT = VAZHDR01.ZZ-CHNG-CNT;

end // end SR0TS-POP-VAZHDR02

Function SR0TS-POP-VSRORD03()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VSRORD03 is populated from the old view SR2REC(VSRORD01)*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  set VSRORD03 empty;
   /* MOVE 0 TO SR0TW01.SR0TW-SRORD-VICS-BOL;*/
   /* MOVE SR2REC.SR2KEYS TO VSRORD03.VSRORD03-KEY1;*/
   /* MOVE SR2REC.PK1PKSCH TO VSRORD03.PK1PKSCH;*/
   /* MOVE SR2REC.OP1CUOID TO VSRORD03.OP1CUOID;*/
   /* MOVE SR2REC.OP1NORID TO VSRORD03.OP1NORID;*/
   /* MOVE SR2REC.OP1NTMAL TO VSRORD03.OP1NTMAL;*/

   /* SR0TS-VSRORD03-S();*/

   /* IF VSRORD03.PK-VICS-BOL > 0;*/
    /* MOVE VSRORD03.PK-VICS-BOL TO SR0TW01.SR0TW-SRORD-VICS-BOL;*/
   /* ELSE;*/
    /* MOVE 0 TO SR0TW01.SR0TW-SRORD-VICS-BOL;*/
   /* END;*/

  set VSRORD03 empty;

  VSRORD03.VSRORD03-GRP = SR2REC.SR2GRP;

  SR0TW01.SR0TW-TEMP-VICS-BOL-NBR = 0;
  SR0TW01.SR0TW-TEMP-VICS-CONSTANT = 0;

  if (SR0TW01.XWHCD == "07")
    SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91203;
  else
    if (SR0TW01.XWHCD == "02")
      SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 13816;
    else
      if (SR0TW01.XWHCD == "42")
        SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91209;
      else
        if (SR0TW01.XWHCD == "04")
          SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91202;
        else
          if (SR0TW01.XWHCD == "09")
            SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91204;
          else
            if (SR0TW01.XWHCD == "51")
              SR0TW01.SR0TW-TEMP-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  SR0TW01.SR0TW-TEMP-BOL-NBR = SR2REC.PK1BLLAD;

  VSRORD03.PK-VICS-BOL = SR0TW01.SR0TW-TEMP-VICS-BOL-NBR;

   /* IF SR0TW01.SR0TW-OPTION EQ 'C';*/
    /* MOVE SR0TW01.SR0TW-TEMP-VICS-BOL-NBR TO VSRORD03.PK-VICS-BOL;*/
   /* ELSE;*/
    /* MOVE SR2REC.XWHCD TO VAZHDR01.XWH-WHSE-CD;*/
    /* MOVE SR2REC.PK1BLLAD TO VAZHDR01.PK-BILL-OF-LADING;*/
    /* SR0TS-VAZHDR01-SM();           /* Determine highest BOL-SUB*/
    /* MOVE SR2REC.XWHCD TO VAZORD01.XWH-WHSE-CD;*/
    /* MOVE SR2REC.PK1BLLAD TO VAZORD01.PK-BILL-OF-LADING;*/
    /* MOVE VAZHDR01.PK-BOL-SUB-NBR TO VAZORD01.PK-BOL-SUB-NBR;*/
    /* MOVE SR2REC.OP1CUOID TO VAZORD01.OP-CUST-ORD-ID;*/
    /* MOVE SR2REC.OP1NORID TO VAZORD01.OP-NIKE-ORD-ID;*/
    /* SR0TS-VAZOR-VICS-S();          /* / SELECT UNIQUE ROW FROM AZORD*/
   /* END;*/

   /* IF SR0TW01.OP1CUOID = SR2REC.OP1CUOID AND SR0TW01.SR0TW-VICS-BOL-NBR > 0;*/
    /* MOVE SR0TW01.SR0TW-VICS-BOL-NBR TO VSRORD03.PK-VICS-BOL;*/
   /* ELSE;*/
    /* MOVE SR0TW01.SR0TW-SRORD-VICS-BOL TO VSRORD03.PK-VICS-BOL;*/
   /* END;*/

  VSRORD03.ZZZSDT = SR2REC.ZZZSDT;
  VSRORD03.ZZZCHGDT = SR2REC.ZZZCHGDT;
  VSRORD03.ZZZCHGTM = SR2REC.ZZZCHGTM;
  VSRORD03.ZZZCHGCT = SR2REC.ZZZCHGCT;

end // end SR0TS-POP-VSRORD03

// Add 'STF2' FROM BOL TSQ rec
Function SR0TS-SR0TW02-TA()
   /* ------------------------------------------------------------*/
   /* Add the next page of orders to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF2";
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  SR0TW02.XXX-TEMP-STG-LNTH = 334;

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SR0TW02 empty; /* Display storage*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;
    SR0TW01.XXX-HI-PAGE-NBR[SR0TW-FR-TO-BOL-IND] = TA5REC.TA5TSQIX; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW02A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW02-TA        "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW02-TA

// Purge 'STF2' FROM BOL TSQ area
Function SR0TS-SR0TW02-TP()
   /* ------------------------------------------------------------*/
   /* Purge temporary storage area*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF2";
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-CURR-PAGE-NBR = 1;
    SR0TW01.XXX-HI-PAGE-NBR[1] = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW02P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW02-TP           "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW02-TP

// Read 'STF2' FROM BOL TSQ rec
Function SR0TS-SR0TW02-TR()
   /* ------------------------------------------------------------*/
   /* Read next page of orders from temporary storage queue.*/
   /* ------------------------------------------------------------*/

  set SR0TW02 empty;

  TA5REC.TA5APPID = "STF2";
  TA5REC.TA5TSQIX = SR0TW00.XXX-CURR-PAGE-NBR;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  SR0TW02.XXX-TEMP-STG-LNTH = 334;

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW02R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW02-TR      "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW02-TR

// Update 'STF2' FROM BOL TSQ rec
Function SR0TS-SR0TW02-TU()
   /* ------------------------------------------------------------*/
   /* Update current page of orders temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF2";
  TA5REC.TA5TSQIX = SR0TW00.XXX-CURR-PAGE-NBR;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  SR0TW02.XXX-TEMP-STG-LNTH = 334;

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW02U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW02-TU      "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW02-TU

// Add 'STF3' TO BOL TSQ area
Function SR0TS-SR0TW03-TA()
   /* ------------------------------------------------------------*/
   /* Add the next page of orders to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF3";
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  SR0TW02.XXX-TEMP-STG-LNTH = 334;

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SR0TW02 empty; /* Display storage*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;
    SR0TW01.XXX-HI-PAGE-NBR[2] = TA5REC.TA5TSQIX; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW03A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW03-TA        "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW03-TA

// Purge 'STF3' TO BOL TSQ area
Function SR0TS-SR0TW03-TP()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF3";
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SR0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SR0TW00.XXX-INX-FLD-NBR = 1;
    SR0TW00.XXX-CURR-PAGE-NBR = 1;
    SR0TW01.XXX-HI-PAGE-NBR[2] = 1;
    SR0TW00.XXX-INX-LMT-NBR = 10;
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW03P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW03-TP           "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW03-TP

// Add 'STF4' Carton TSQ record
Function SR0TS-SR0TW04-TA()
   /* ------------------------------------------------------------*/
   /* Add the next order to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF4";
  SR0TW04.XXX-TEMP-STG-LNTH = 433;
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SR0TW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SR0TW04 empty;

    SR0TW00.XXX-RQT-DATA-FL = "Y";
    SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;
    SR0TW00.SR0TW-M800-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW04A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW04-TA        "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW04-TA

// Purge 'STF4' Carton TSQ area
Function SR0TS-SR0TW04-TP()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF4";
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SR0TW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
    SR0TW00.SR0TW-M800-CURR-PAGE-NBR = 1;
    SR0TW00.SR0TW-M800-HI-PAGE-NBR = 1;
    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW04P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW04-TP           "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW04-TP

// Read 'STF4' Carton TSQ record
Function SR0TS-SR0TW04-TR()
   /* ------------------------------------------------------------*/
   /* Read next page of orders from temporary storage queue.*/
   /* ------------------------------------------------------------*/

  set SR0TW04 empty;

  TA5REC.TA5APPID = "STF4";
  TA5REC.TA5TSQIX = SR0TW00.SR0TW-M800-CURR-PAGE-NBR;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  SR0TW04.XXX-TEMP-STG-LNTH = 433;

  try
    call "TA0050" (SR0TW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /**/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SR0TW00.SR0TW-M800-INX-FLD-NBR = 1;
    SR0TW00.SR0TW-M800-INX-LMT-NBR = 13;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW04R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW04-TR      "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW04-TR

// Update 'STF4' Carton TSQ rec
Function SR0TS-SR0TW04-TU()
   /* ------------------------------------------------------------*/
   /* Read next page of orders from temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "STF4";
  TA5REC.TA5TSQIX = SR0TW00.SR0TW-M800-CURR-PAGE-NBR;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  SR0TW04.XXX-TEMP-STG-LNTH = 433;

  try
    call "TA0050" (SR0TW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SRWREC.XXXERRID = "SR0TW04U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-SR0TW04-TU      "; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-SR0TW04-TU

// Get Date
Function SR0TS-TA0040()
   /* ------------------------------------------------------------*/
   /* Get the date*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA2REC.TA2GROUP; /* Subroutine parameters*/

  SRWREC.XXXERRID = "TA0040 "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0TS-TA0040

// Close cursor dship.vazcit01
Function SR0TS-VAZCIT01-C2()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vazcit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCIT01" ("C2", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCITC2"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCIT01-C2       "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCIT01-C2

// Delete - dship.vazcit01
Function SR0TS-VAZCIT01-D()
   /* ------------------------------------------------------------*/
   /* Delete row on dship.vazcit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCIT01" ("D ", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCITD "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCIT01-D        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCIT01-D

// Fetch dship.vazcit01
Function SR0TS-VAZCIT01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCIT01" ("N2", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      SR0TW00.SR0TW-AZCIT-EOF-FL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/
        SR0TW00.SR0TW-AZCIT-EOF-FL = "Y";
        return;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCITN2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCIT01-N2         "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCIT01-N2

// Cursor on dship.vazcit01
Function SR0TS-VAZCIT01-S2()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from DSHIP.VAZCIT01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  SR0TW00.SR0TW-AZCIT-EOF-FL = "N";

  try
    call "VAZCIT01" ("S2", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCITS2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCIT01-S2   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCIT01.VAZCIT01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCIT01-S2

// Add - dship.vazcit01
Function SR0TS-VAZCIT02-A()
   /* ------------------------------------------------------------*/
   /* Add row on dship.vazcit01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCIT02" ("A ", SQLCA, VAZCIT02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCITA2 "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCIT02-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCIT02.VAZCIT02-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCIT02-A

// Close cursor dpick.vsplhd01
Function SR0TS-VAZCSZ01-C2()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vazcsz01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCSZ01" ("C2", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCSZC2"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCSZ01-C2       "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCSZ01-C2

// Delete - dship.vazcsz01
Function SR0TS-VAZCSZ01-D()
   /* ------------------------------------------------------------*/
   /* Delete row on dship.vazcsz01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCSZ01" ("D ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCSZD "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCSZ01-D        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCSZ01-D

// Fetch dpick.vsplhd01
Function SR0TS-VAZCSZ01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCSZ01" ("N2", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      SR0TW00.SR0TW-AZCSZ-EOF-FL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/
        SR0TW00.SR0TW-AZCSZ-EOF-FL = "Y";
        return;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCSZN2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCSZ01-N2         "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCSZ01-N2

// Cursor on dpick.vsplhd01
Function SR0TS-VAZCSZ01-S2()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vazcsz01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  SR0TW00.SR0TW-AZCSZ-EOF-FL = "N";

  try
    call "VAZCSZ01" ("S2", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCSZS2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCSZ01-S2   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCSZ01-S2

// Add - dship.vazcsz01
Function SR0TS-VAZCSZ02-A()
   /* ------------------------------------------------------------*/
   /* Add row on dship.VAZCSZ02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCSZ02" ("A ", SQLCA, VAZCSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCSZA2 "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCSZ02-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ02.VAZCSZ02-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCSZ02-A

// Select 'NB' - dship.vazctl01
Function SR0TS-VAZCTL01-NA()
   /* ------------------------------------------------------------*/
   /* Select next BOL from DSHIP.VAZCTL01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCTL01" ("NA", SQLCA, VAZCTL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTLNA"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCTL01-NA       "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTL01.VAZCTL01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCTL01-NA

// Add - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-A()

  set SQLCA empty;

  try
    call "VAZCTN01" ("A ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNA "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-A  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-A

// Close  DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-C1()

  try
    call "VAZCTN01" ("C1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01C1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-C1 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-C1

// Close  DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-C4()
  try
    call "VAZCTN01" ("C4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01C4"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-C4 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-C4

// Close 'C6' - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-C6()

  set SQLCA empty;

  try
    call "VAZCTN01" ("C6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNC6"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-C6 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-C6

// Delete - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-D()

  set SQLCA empty;

  try
    call "VAZCTN01" ("D ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Successful Call*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTND "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-D  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-D

// Fetch 'N1' - Dship.vazctn01
Function SR0TS-VAZCTN01-N1()

  try
    call "VAZCTN01" ("N1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-N1 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-N1

// Fetch 'N1' - Dship.vazctn01
Function SR0TS-VAZCTN01-N4()
  try
    call "VAZCTN01" ("N4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01N4"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-N4 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-N4

// Fetch 'N6' - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-N6()

  set SQLCA empty;

  try
    call "VAZCTN01" ("N6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0TW00.SR0TW-AZCTN-EOF-FL = "N";
      return;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/

        SR0TW00.SR0TW-AZCTN-EOF-FL = "Y";
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNN6"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-N6 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-N6

// Select - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-S()

  set SQLCA empty;

  SR0TW00.SR0TW-AZCTN-EOF-FL = "N";

  try
    call "VAZCTN01" ("S ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      SR0TW00.SR0TW-AZCTN-EOF-FL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/
        SR0TW00.SR0TW-AZCTN-EOF-FL = "Y";
        return;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNS "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-S  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-S

// Cursor 'S1' - Dship.vazctn01
Function SR0TS-VAZCTN01-S1()

  try
    call "VAZCTN01" ("S1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-S1 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-S1

// Cursor 'S1' - Dship.vazctn01
Function SR0TS-VAZCTN01-S4()
  try
    call "VAZCTN01" ("S4", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0    /* If found*/
     || SQLCA.VAGen_SQLCODE == +100 /* or not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple occurrence found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTN01S4"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-S4 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-S4

// Select 'S6' - DSHIP.VAZCTN01
Function SR0TS-VAZCTN01-S6()

  set SQLCA empty;

  SR0TW00.SR0TW-AZCTN-EOF-FL = "N";

  try
    call "VAZCTN01" ("S6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /* Verify bol*/

  if (sysVar.errorCode == "00000000" /* Successful Call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNS6"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-S6 "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end SR0TS-VAZCTN01-S6

// Update - dship.vazctn01
Function SR0TS-VAZCTN01-U()
   /* ------------------------------------------------------------*/
   /* Update row on dship.vazctn01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCTN01" ("U ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZCTNU "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZCTN01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZCTN01-U

// Add - dship.vazhdr01
Function SR0TS-VAZHDR01-D()
   /* ------------------------------------------------------------*/
   /* Add row on dship.vazhdr01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR01" ("D ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDRD "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR01-D    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR01-D

// Select 'S' - Dship.vazhdr01
Function SR0TS-VAZHDR01-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from DSHIP.VAZHDR01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  SR0TW00.SR0TW-AZHDR-EOF-FL = "N";

  try
    call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      SR0TW00.SR0TW-AZHDR-EOF-FL = "N";
      return;

    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/

        SR0TW00.SR0TW-AZHDR-EOF-FL = "Y";
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDR01"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR01-S

// Select 'SM - dship.vazhdr01
Function SR0TS-VAZHDR01-SM()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from DSHIP.VAZHDR01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR01" ("SM", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDRSM"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR01-SM   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR01-SM

// Update - dship.vazhdr01
Function SR0TS-VAZHDR01-U()
   /* ------------------------------------------------------------*/
   /* Update row on dship.vazhdr01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR01" ("U ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100 /* If not found, but okay to not find*/
     && SR0TW00.SR0TW-OK-TO-NOT-FIND == "Y")
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDRU "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR01-U

// Add - dship.vazhdr01
Function SR0TS-VAZHDR02-A()
   /* ------------------------------------------------------------*/
   /* Add row on dship.VAZHDR02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR02" ("A ", SQLCA, VAZHDR02) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == -803))  /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDRA2 "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR02-A    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR02"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR02.VAZHDR02-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR02-A

// Select 'S' - Dship.vazhdr01
Function SR0TS-VAZHDR02-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from DSHIP.VAZHDR02*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR02" ("S ", SQLCA, VAZHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDR02"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR02-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR02"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR02.VAZHDR02-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR02-S

// Update - dship.vazhdr01
Function SR0TS-VAZHDR02-U()
   /* ------------------------------------------------------------*/
   /* Update row on dship.vazhdr01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR02" ("U ", SQLCA, VAZHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100 /* If not found, but okay to not find*/
     && SR0TW00.SR0TW-OK-TO-NOT-FIND == "Y")
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZHDRU "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZHDR02-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZHDR02.VAZHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZHDR02-U

// Add - dship.vazord01
Function SR0TS-VAZORD01-A()
   /* ------------------------------------------------------------*/
   /* Add row on dship.vazord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZORD01" ("A ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* insert successful*/
   || SQLCA.VAGen_SQLCODE == -803))  /* or insert failed--duplicate*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDA "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-A     "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-A

// Close 'C1' - Dship.vazord01
Function SR0TS-VAZORD01-C1()
   /* ------------------------------------------------------------*/
   /* Close cursor on DSHIP.VAZORD01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZORD01" ("C1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDC1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-C1       "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-C1

// Add - dship.vazord01
Function SR0TS-VAZORD01-D()
   /* ------------------------------------------------------------*/
   /* Delete row on dship.vazord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZORD01" ("D ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDD "; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-D     "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-D

// Fetch 'N1' - Dship.vazord01
Function SR0TS-VAZORD01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch next row in cursor.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZORD01" ("N1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      SR0TW00.SR0TW-AZORD-EOF-FL = "N";
      return;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* or not found*/

        SR0TW00.SR0TW-AZORD-EOF-FL = "Y";
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDN1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-N1         "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-N1

// Select 'S'- dship.vazord01
Function SR0TS-VAZORD01-S()
   /* ------------------------------------------------------------*/
   /* Selected the unique row from dship.vazord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  SR0TW00.SR0TW-AZORD-EOF-FL = "N";

  try
    call "VAZORD01" ("S ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      SR0TW00.SR0TW-AZORD-EOF-FL = "N";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* and normal return code*/
        SR0TW00.SR0TW-AZORD-EOF-FL = "Y";
        return;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDS "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-S

// Cursor 'S1' - Dship.vazord01
Function SR0TS-VAZORD01-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from DSHIP.VAZORD01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  SR0TW00.SR0TW-AZORD-EOF-FL = "N";

  try
    call "VAZORD01" ("S1", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDS1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-S1   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-S1

// Update -  dship.vazord01
Function SR0TS-VAZORD01-U()
   /* ------------------------------------------------------------*/
   /* UPDATE DSHIP.VAZORD01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZORD01" ("U ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100 /* If not found, but okay to not find*/
     && SR0TW00.SR0TW-OK-TO-NOT-FIND == "Y")
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VAZORDU"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VAZORD01-U        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZORD01.VAZORD01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VAZORD01-U

// Get Carrier - DPICK.VCARR002
Function SR0TS-VCARR002-S()
   /* ------------------------------------------------------------*/
   /* Select requested row from Dpick.vcarr002.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VCARR002" ("S ", SQLCA, TF7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VCARR002"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT FROM VCARR002"; /* Description*/
  TA1REC.TA1DBASE = "DPICK"; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR002"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-VCARR002-S

// Add - dship.vazhdr01
Function SR0TS-VSPBOL01-A()
   /* ------------------------------------------------------------*/
   /* Add row on dship.vspbol01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("A ", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if ((SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == -803)) /* and normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOLA "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-A    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VSPBOL01.VSPBOL01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-A

// Add - dship.vazhdr01
Function SR0TS-VSPBOL01-C2()
   /* ------------------------------------------------------------*/
   /* Select row on dship.vspbol01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("C2", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOLC2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-C2   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VSPBOL01.VSPBOL01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-C2

// Add - dship.vazhdr01
Function SR0TS-VSPBOL01-N2()
   /* ------------------------------------------------------------*/
   /* Select row on dship.vspbol01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("N2", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if ((SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == +100)) /* and normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOLN2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-N2   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VSPBOL01.VSPBOL01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-N2

// Select 'S' - DSHIP.VSPBOL01
Function SR0TS-VSPBOL01-S()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from DSHIP.VSPBOL01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("S ", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/

        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOL01"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-S

// Add - dship.vazhdr01
Function SR0TS-VSPBOL01-S2()
   /* ------------------------------------------------------------*/
   /* Select row on dship.vspbol01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("S2", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if ((SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == +100)) /* and normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOLS2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-S2   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VSPBOL01.VSPBOL01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-S2

// Update - dship.vazhdr01
Function SR0TS-VSPBOL01-U()
   /* ------------------------------------------------------------*/
   /* Update row on dship.VSPBOL01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPBOL01" ("U ", SQLCA, VSPBOL01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* If not found, but okay to not find*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPBOLU "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPBOL01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPBOL01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPBOL01.VSPBOL01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPBOL01-U

// Add - dpick.vpklbl01
Function SR0TS-VSPLSZ02-A()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vsplsz02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPLSZ02" ("A ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5780A "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPLSZ02-A    "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPLSZ02-A

// close 'C1' - dpick.vpklbl01
Function SR0TS-VSPLSZ02-C1()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dship.vsplsz02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPLSZ02" ("C1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSPLSZ02"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPLSZ02-C1   "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPLSZ02-C1

// Delete - dpick.vpklbl01
Function SR0TS-VSPLSZ02-D()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.vSPLSZ02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPLSZ02" ("D ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5780D "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPLSZ02-D    "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPLSZ02-D

// Fetch 'N1' - dpick.vpklbl01
Function SR0TS-VSPLSZ02-N1()
   /* ------------------------------------------------------------*/
   /* Selected the requested set of rows from dpick.VSPLSZ02.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSPLSZ02" ("N1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      SR0TW00.SR0TW-SPLSZ-EOF-FL = "N";
      return;

    else

      if (SQLCA.VAGen_SQLCODE == +100) /* and not found*/

        SR0TW00.SR0TW-SPLSZ-EOF-FL = "Y";
        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5780N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPLSZ02-N1   "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPLSZ02-N1

// Cursor 'S1' - dpick.vpklbl01
Function SR0TS-VSPLSZ02-S1()
   /* ------------------------------------------------------------*/
   /* Selected set of rows from dpick.vSPLSZ02*/
   /* ------------------------------------------------------------*/

  SR0TW00.SR0TW-SPLSZ-EOF-FL = "N";

  set SQLCA empty;

  try
    call "VSPLSZ02" ("S1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "IO5780S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
  TA1REC.TA1LOC = "SR0TS-VSPLSZ02-S1   "; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end SR0TS-VSPLSZ02-S1

// Update - dship.vsrord01
Function SR0TS-VSRORD03-U()
   /* ------------------------------------------------------------*/
   /* Update requested row from dship.vsrord01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VSRORD03" ("U ", SQLCA, VSRORD03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
     || SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SRWREC.XXXERRID = "VSRORD03"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VSRORD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP"; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD03"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SR0TS-VSRORD03-U

// SUBMIT JCL TO INTERNAL READER
Function SR0TS-XPTA0P()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD > "4")         /* and normal return*/

    converseLib.validationFailed(215); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    /* NEXT SENTENCE*/

  else
    SRWREC.XXXERRID = "XPTA0P";
    converseLib.validationFailed(124);
    return;
  end

end // end SR0TS-XPTA0P

// Multiple BOLs pop-up window
Function XPSR-200()
   /* ************************************************************/
   /* *  Multiple BOLs processing is done accordingly:          **/
   /* *    - setup the key                                      **/
   /* *    - open cursor DSHIP.VAZCTN01                         **/
   /* *    - fetch each row and save BOL sub nbr and pick sched **/
   /* *      nbr into the array (99 occurrences)                **/
   /* *    - close cursor                                       **/
   /* *    - format and display xpstM001 map                    **/
   /* *    - check if selection has been made before exiting    **/
   /* ************************************************************/

  set VAZCTN01 empty; /* Initialize record area*/

  VAZCTN01.XWH-WHSE-CD = SREREC.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = SREREC.PK1BLLAD;

  XPSR-210(); /* Open cursor for BOL Sub's*/
  XPSR-220(); /* Fetch next BOL Sub*/

  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Bol sub nbr index*/

  while (SR0TW00.SR0TW-AZCTN-EOF-FL == "N")

    SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX] = VAZCTN01.PK-BOL-SUB-NBR;
    SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX] = VAZCTN01.PK-PICK-SCHED-NBR;

    SREREC.SRE-TOTAL-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

    SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;

    if (SREREC.SRE-SUB-NBR-SCHED-IDX > 99)

      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "XPSR-200";
      TA1REC.TA1LOC = "BOL SUB TBL SIZE EXCEEDED";
      TA1REC.TA1MAP = "SR0TM001";
      TA1REC.TA1DBASE = "DSHIP   ";
      TA1REC.TA1TBLVU = "VAZCTN01";
      TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY;

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

    end

    XPSR-220(); /* Fetch next dship.vazctn01 row*/

  end

  XPSR-230(); /* Close cursor*/

  set XMSRM100 initial; /* Clear pop-up window*/

  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Initialize bol sub nbr index*/

  while (SREREC.SRE-POPUP-WINDOW-DONE-FL == " ") /* Pop-up window done*/

    XPSR-240(); /* Format display pop-up window*/

  end

end // end XPSR-200

// Cursor 'S1' - AZ1120
Function XPSR-210()
   /* ------------------------------------------------------------*/
   /* Open cursor for BOL Sub's*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ1120" ("S1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)

      return;

    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-210"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(134); /* Data in use by another appl*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-210"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-210

// Fetch 'N1' - AZ1120
Function XPSR-220()
   /* ****************************************************/
   /* Fetch a row from DSHIP.VAZCTN01*/
   /* ****************************************************/

  set SQLCA empty;

  try
    call "AZ1120" ("N1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)

      SR0TW00.SR0TW-AZCTN-EOF-FL = "N";
      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100)

        SR0TW00.SR0TW-AZCTN-EOF-FL = "Y";
        return;

      else

        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
        TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
        SRWREC.XXXERRID = "XPSR-220"; /* Module identification*/

        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

          converseLib.validationFailed(134); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/

        else

          converseLib.validationFailed(124); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        end

      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-220"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-220

// Close 'C1' - AZ1120
Function XPSR-230()
   /* ****************************************************/
   /* Close cursor for DSHIP.VAZCTN01*/
   /* ****************************************************/

  set SQLCA empty;

  try
    call "AZ1120" ("C1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)

      return;

    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-230"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-230"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SCAN BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-230

// Format and display XPSRM001
Function XPSR-240()
   /* ************************************************************/
   /* Format and display XPSRM001 map                        **/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)

    converseLib.validationFailed(178); /* Continue or cancel*/
    SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/
    SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y"; /* Pop-up window done*/
    return;

  end

  XPSR-250(); /* Check for select bol sub nbr*/

  if (converseVar.validationMsgNum == 00) /* If no error*/

    if (converseVar.eventKey is pf8) /* Forward browsing*/

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")

        if (SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR < SREREC.SRE-TOTAL-SUB-NBR)
                                  /* Continue fward brws*/
          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR           + 1;
                                  /* Continue fward brws*/
        else
                                  /* Continue fward brws*/
          converseLib.validationFailed(98); /* Last page*/
          SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/
                                  /* Continue fward brws*/
        end

      else

        converseLib.validationFailed(177); /* Select is done, no browsing*/
        SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/

      end

    else

      if (converseVar.eventKey is pf7) /* Backward browsing*/

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")

          if (SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR > 10)
                                  /* Continue backward browsing*/
            SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR - 10;

          else

            converseLib.validationFailed(99); /* No scroll back past 1st page*/
            SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/

          end

        else

          converseLib.validationFailed(177); /* Select is done, no browsing*/
          SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/

        end

      else

        if (converseVar.eventKey is enter)

          if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")

            if (SREREC.SRE-SUB-NBR-SCHED-IDX == 1 /* First time around*/
             && XMSRM100.PK1BLLAD == 0)          
               /* Next sentence*/
            else

              converseLib.validationFailed(143); /* Need to select*/
              SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/

            end

          else

            SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y";
                                  /* Pop-up window done*/
            return;

          end

        else

          converseLib.validationFailed(12); /* Invalid attention key*/
          SRWREC.XXXERRID = "XPSR-240"; /* Module identification*/

        end

      end

    end

    if (converseVar.validationMsgNum == 00) /* If no error*/

      set XMSRM100 initial; /* Clear pop-up window*/

      XMSRM100.PK1BLLAD = SREREC.PK1BLLAD;

      SREREC.SRE-POPUP-WINDOW-IDX = 1;

      while (SREREC.SRE-SUB-NBR-SCHED-IDX <= SREREC.SRE-TOTAL-SUB-NBR
       && SREREC.SRE-POPUP-WINDOW-IDX <= 10)

        XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] = SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX];

        XMSRM100.SR2BLLSU[SRE-POPUP-WINDOW-IDX] = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];

        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] normal;

        if (SREREC.SRE-POPUP-WINDOW-IDX == 1)

          SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

        end

        SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;

        SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

      end

    end

  end

  if (SREREC.SRE-FR-TO-BOL-IND == "FR") /* FROM BOL*/

    XMSRM100.XPSRM10C = "**FR BOL: ";

  end

  if (SREREC.SRE-FR-TO-BOL-IND == "TO") /* to BOL*/

    XMSRM100.XPSRM10C = "**TO BOL: ";

  end

  XMSRM100.XXXERRID = SRWREC.XXXERRID;

  converse XMSRM100 ;

end // end XPSR-240

// Check for selected BOL sub nbr
Function XPSR-250()
   /* ************************************************************/
   /* Check for selected BOL sub nbr                         **/
   /* ************************************************************/

  SREREC.SRE-POPUP-WINDOW-IDX = 1;

  while (SREREC.SRE-POPUP-WINDOW-IDX <= 10
   && XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] > 0)

    if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] > " ")

      if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] == "S")

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")

          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR           + SREREC.SRE-POPUP-WINDOW-IDX - 1;

          if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX]
           == SREREC.SRE-SELECTED-SUB-NBR)

            if (converseVar.eventKey is enter)
               /* Next sentence*/
            else

              converseLib.validationFailed(177); /* Select is done, no browsing*/
              set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
              SRWREC.XXXERRID = "XPSR-250"; /* Module identification*/

            end

          else

            converseLib.validationFailed(96); /* Cannot select more than one line*/
            set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
            SRWREC.XXXERRID = "XPSR-250"; /* Module identification*/

          end

        else

          SREREC.SRE-SUB-NBR-SELECTED-FL = "Y";

          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR           + SREREC.SRE-POPUP-WINDOW-IDX - 1;

          SREREC.SRE-SELECTED-SUB-NBR = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];

          SR0TW01.PK1PKSCH[1] = SREREC.PK1PKSCH;

        end

      else

        converseLib.validationFailed(95); /* Select value must be 's'*/
        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
        SRWREC.XXXERRID = "XPSR-250"; /* Module identification*/

      end

    else

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")

        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR         + SREREC.SRE-POPUP-WINDOW-IDX - 1;

        if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX]
         == SREREC.SRE-SELECTED-SUB-NBR)

          SREREC.SRE-SUB-NBR-SELECTED-FL = " ";

          SREREC.SRE-SELECTED-SUB-NBR = 0;

        end

      end

    end

    SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

  end

end // end XPSR-250

//*** RECORD=AZTOTREC ****
// ******* order adjustment ??????????????????????????   ******
// 
// DB2 TABLE VIEW:      ???????????????
// 
// COPYLIB MEMBER:      ????????
// 
// I/O MODULE:          ??????
// 
// KEY TO DB2 TABLE:    ???????
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/07/89   mchris   New record.
// 
// ************************
Record AZTOTREC type basicRecord
  5 AZTOTREC-REC AZTOTREC-REC ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 PK-BILL-OF-LADING PK-BILL-OF-LADING ; 
    10 PK-BOL-SUB-NBR PK-BOL-SUB-NBR ; 
    10 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
    10 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
    10 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
    10 SR0TW-TOT-CARTONS SR0TW-TOT-CARTONS ; 
    10 SR0TW-TOT-UNIT-QTY SR0TW-TOT-UNIT-QTY ; 
    10 SR0TW-TOT-WEIGHT SR0TW-TOT-WEIGHT ; 
    10 SR0TW-TOT-EXPTD-WEIGHT SR0TW-TOT-EXPTD-WEIGHT ; 
    10 SR0TW-TOT-CHARGE SR0TW-TOT-CHARGE ; 
end // end AZTOTREC

//*** RECORD=PWQREC ****
// ********* PICKING SHIP PACKING LIST SIZE TABLE *************
// 
// DB2 TABLE VIEW:      DPICK.VSPLSZ01
// 
// COPYLIB MEMBER:      DCL00939
// 
// I/O MODULE:          IO5780
// 
// KEY TO DB2 TABLE:    XWHCD
//                      TS_NIKE_PL_NBR
//                      OP_ORD_PART_CHAR
//                      OP_CUST_ORD_ID
//                      OP_NIKE_ORD_ID
//                      OP_LINE_ITEM_NBR
//                      SY_SZ_ID
//                      XAR_AREA_CD
//                      SL_ZONE_CD
//                      SL_LOC_CD
// 
// DATE CREATED:        03/18/91
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 03/18/91   SJOHNS   New record definition.
// **********************
Record PWQREC type basicRecord
  5 PWQGROUP PWQGROUP ; 
    10 PWQKEY PWQKEY ; 
      15 XWHCD XWHCD ; 
      15 TSIPLNBR TSIPLNBR ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 PWPTOSQN PWPTOSQN ; 
    10 PKDNCSQN PKDNCSQN ; 
    10 SY5SZID SY5SZID ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 PK1QTY PK1QTY ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWQREC

//*** RECORD=SR0TW00 ****
// ***********************************************************
// *  This is the working storage for SR0T misc data.        *
// *                                                         *
// ***********************************************************
// ***********************
Record SR0TW00 type basicRecord
  3 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  3 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  3 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  3 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  3 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  3 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
  3 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  3 XXX-SAVE-CURR-PAGE-NBR XXX-SAVE-CURR-PAGE-NBR ; 
  3 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  3 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  3 SR0TW-JCL-INDEX SR0TW-JCL-INDEX ; 
  3 SR0TW-CARTONS-SELECT-COUNT SR0TW-CARTONS-SELECT-COUNT ; 
  3 SR0TW-CARTONS-NOT-SELECT-COUNT SR0TW-CARTONS-NOT-SELECT-COUNT ; 
  3 SR0TW-CTN-CTR SR0TW-CTN-CTR ; 
  3 SR0TW-CAN-CTN-CTR SR0TW-CAN-CTN-CTR ; 
  3 SR0TW-GOOD-CTN-CTR SR0TW-GOOD-CTN-CTR ; 
  3 SR0TW-FROM-TO-BOL-IND SR0TW-FROM-TO-BOL-IND ; 
  3 SR0TW-M800-INX-FLD-NBR SR0TW-M800-INX-FLD-NBR ; 
  3 SR0TW-M800-INX-FIRST-CARTON SR0TW-M800-INX-FIRST-CARTON ; 
  3 SR0TW-M800-INX-LMT-NBR SR0TW-M800-INX-LMT-NBR ; 
  3 SR0TW-M002-CURR-PAGE-NBR SR0TW-M002-CURR-PAGE-NBR ; 
  3 SR0TW-M800-CURR-PAGE-NBR SR0TW-M800-CURR-PAGE-NBR ; 
  3 SR0TW-M002-HI-PAGE-NBR SR0TW-M002-HI-PAGE-NBR ; 
  3 SR0TW-M800-HI-PAGE-NBR SR0TW-M800-HI-PAGE-NBR ; 
  3 SR0TW-SAVE-OP-CUST-ORD-ID SR0TW-SAVE-OP-CUST-ORD-ID ; 
  3 SR0TW-SAVE-OP-NIKE-ORD-ID SR0TW-SAVE-OP-NIKE-ORD-ID ; 
  3 SR0TW-SAVE-SCHED-NBR SR0TW-SAVE-SCHED-NBR ; 
  3 SR0TW-SAVE-PL-NBR SR0TW-SAVE-PL-NBR ; 
  3 SR0TW-M800-ROW SR0TW-M800-ROW ; 
  3 SR0TW-REPEAT-FL SR0TW-REPEAT-FL ; 
  3 SR0TW-UPDATE-FL SR0TW-UPDATE-FL ; 
  3 SR0TW-FR-TO-BOL-IND SR0TW-FR-TO-BOL-IND ; 
  3 SR0TW-GOOD-ORDER-FL SR0TW-GOOD-ORDER-FL ; 
  3 SR0TW-ST-FL SR0TW-ST-FL ; 
  3 SR0TW-XL-FL SR0TW-XL-FL ; 
  3 SR0TW-CONSOL-FL SR0TW-CONSOL-FL ; 
  3 SR0TW-ADDR-CHANGED-FL SR0TW-ADDR-CHANGED-FL ; 
  3 SR0TW-LEADSO-CHG-FL SR0TW-LEADSO-CHG-FL ; 
  3 SR0TW-SPLIT-REQUESTED-FL SR0TW-SPLIT-REQUESTED-FL ; 
  3 SR0TW-STATUS-FL SR0TW-STATUS-FL ; 
  3 SR0TW-CREATE-TO-BOL-FL SR0TW-CREATE-TO-BOL-FL ; 
  3 SR0TW-REDISPLAY-UPD-BOL-FL SR0TW-REDISPLAY-UPD-BOL-FL ; 
  3 SR0TW-BOL-MATCHES-FL SR0TW-BOL-MATCHES-FL ; 
  3 SR0TW-END-ORDER-TEST-FL SR0TW-END-ORDER-TEST-FL ; 
  3 SR0TW-LEAD-SO-IN-MULT-SCHED-FL SR0TW-LEAD-SO-IN-MULT-SCHED-FL ; 
  3 SR0TW-AZCTN-EOF-FL SR0TW-AZCTN-EOF-FL ; 
  3 SR0TW-SPBOL-EOF-FL SR0TW-SPBOL-EOF-FL ; 
  3 SR0TW-AZCIT-EOF-FL SR0TW-AZCIT-EOF-FL ; 
  3 SR0TW-AZCSZ-EOF-FL SR0TW-AZCSZ-EOF-FL ; 
  3 SR0TW-AZORD-EOF-FL SR0TW-AZORD-EOF-FL ; 
  3 SR0TW-AZHDR-EOF-FL SR0TW-AZHDR-EOF-FL ; 
  3 SR0TW-SRORD-EOF-FL SR0TW-SRORD-EOF-FL ; 
  3 SR0TW-SPLIT-EOF-FL1 SR0TW-SPLIT-EOF-FL1 ; 
  3 SR0TW-SPLIT-EOF-FL SR0TW-SPLIT-EOF-FL ; 
  3 SR0TW-SPLIT-EOF-FL2 SR0TW-SPLIT-EOF-FL2 ; 
  3 SR0TW-SPLSZ-EOF-FL SR0TW-SPLSZ-EOF-FL ; 
  3 SR0TW-SPLHD-EOF-FL SR0TW-SPLHD-EOF-FL ; 
  3 SR0TW-M800-SEL-FL SR0TW-M800-SEL-FL ; 
  3 SR0TW-UPDATE-SR-FL SR0TW-UPDATE-SR-FL ; 
  3 SR0TW-OBSELETE-SR-FL SR0TW-OBSELETE-SR-FL ; 
  3 SR0TW-ALL-CTNS-SELECTED-FL SR0TW-ALL-CTNS-SELECTED-FL ; 
  3 SR0TW-PROCESS-ALL-CTNS-FL SR0TW-PROCESS-ALL-CTNS-FL ; 
  3 SR0TW-PARTIAL-ORDERS-SELECTED SR0TW-PARTIAL-ORDERS-SELECTED ; 
  3 SR0TW-OLD-PL-NBR-FOUND-FL SR0TW-OLD-PL-NBR-FOUND-FL ; 
  3 SR0TW-MOVERS-UPDATE-FL SR0TW-MOVERS-UPDATE-FL ; 
  3 SR0TW-CONFIRM-FL SR0TW-CONFIRM-FL ; 
  3 SR0TW-WHOLE-ORDERS-FL SR0TW-WHOLE-ORDERS-FL ; 
  3 SR0TW-NEW-ORDER-FL SR0TW-NEW-ORDER-FL ; 
  3 SR0TW-RELEASE-COND-CD SR0TW-RELEASE-COND-CD ; 
  3 SR0TW-FMT-BOL-NBR SR0TW-FMT-BOL-NBR ; 
    4 SR0TW-FMT-BOL-XWH-WHSE-CD SR0TW-FMT-BOL-XWH-WHSE-CD ; 
    4 SR0TW-FMT-BOL-SEQ-NBR SR0TW-FMT-BOL-SEQ-NBR ; 
    4 SR0TW-FMT-CHK-DIGIT num(1) ; 
  3 SR0TW-JULIAN-DATE SR0TW-JULIAN-DATE ; 
    4 SR0TW-JULIAN-YY SR0TW-JULIAN-YY ; 
    4 SR0TW-JULIAN-DDD SR0TW-JULIAN-DDD ; 
  3 TA3APLID TA3APLID ; 
    4 SR0TW-CICS-LIT SR0TW-CICS-LIT ; 
    4 SR0TW-APPLID-LIT SR0TW-APPLID-LIT ; 
  3 TA3USRID TA3USRID ; 
  3 SR0TW-LEAD-SO SR0TW-LEAD-SO ; 
  3 SR0TW-ORDER-NBR SR0TW-ORDER-NBR ; 
    4 SR0TW-OP1CUOID-UNPACK SR0TW-OP1CUOID-UNPACK ; 
      5 OP1PARTN OP1PARTN ; 
      5 * num(8) ; 
    4 SR0TW-OP1NORID-UNPACK SR0TW-OP1NORID-UNPACK ; 
  3 SR0TW-OP-CUST-ORD-ID-NUM SR0TW-OP-CUST-ORD-ID-NUM ; 
  3 SR0TW-OP-CUST-ORD-ID-LCHA SR0TW-OP-CUST-ORD-ID-LCHA ; 
    4 * char(1) ; 
    4 SR0TW-OP-CUST-ORD-ID-SCHA SR0TW-OP-CUST-ORD-ID-SCHA ; 
  3 SR0TW-OP-NIKE-ORD-ID-NUM SR0TW-OP-NIKE-ORD-ID-NUM ; 
  3 SR0TW-OP-NIKE-ORD-ID-LCHA SR0TW-OP-NIKE-ORD-ID-LCHA ; 
    4 * char(2) ; 
    4 SR0TW-OP-NIKE-ORD-ID-SCHA SR0TW-OP-NIKE-ORD-ID-SCHA ; 
  3 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
  3 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
  3 SR0TW-PK1PKSCH-UNPACK SR0TW-PK1PKSCH-UNPACK ; 
    4 SR0TW-PK1PKSCH-UNPACK-4 SR0TW-PK1PKSCH-UNPACK-4 ; 
    4 * num(5) ; 
  3 SR0TW-PK1PKSCH-COMP-4 SR0TW-PK1PKSCH-COMP-4 ; 
  3 SR0TW-SR1SHPDT-MMDDYY SR0TW-SR1SHPDT-MMDDYY ; 
    4 SR0TW-SR1SHPDT-MMDDYY-MM SR0TW-SR1SHPDT-MMDDYY-MM ; 
    4 SR0TW-SR1SHPDT-MMDDYY-DD SR0TW-SR1SHPDT-MMDDYY-DD ; 
    4 SR0TW-SR1SHPDT-MMDDYY-YY SR0TW-SR1SHPDT-MMDDYY-YY ; 
  3 SR0TW-SR1SHPDT-YYMMDD SR0TW-SR1SHPDT-YYMMDD ; 
    4 SR0TW-SR1SHPDT-YYMMDD-YY SR0TW-SR1SHPDT-YYMMDD-YY ; 
    4 SR0TW-SR1SHPDT-YYMMDD-MM SR0TW-SR1SHPDT-YYMMDD-MM ; 
    4 SR0TW-SR1SHPDT-YYMMDD-DD SR0TW-SR1SHPDT-YYMMDD-DD ; 
  3 SR0TW-SR1SHPDT-TA2JULNN SR0TW-SR1SHPDT-TA2JULNN ; 
  3 SR0TW-TA2JULNN SR0TW-TA2JULNN ; 
  3 SR0TW-SR1SHPDT-AGE SR0TW-SR1SHPDT-AGE ; 
  3 SR0TW-YYMMDD SR0TW-YYMMDD ; 
    4 SR0TW-YYMMDD-YY SR0TW-YYMMDD-YY ; 
    4 * num(4) ; 
  3 XWHCD XWHCD ; 
  3 SR0TW-UNIT-OF-MEASURE SR0TW-UNIT-OF-MEASURE ; 
  3 SR0TW-OPTION SR0TW-OPTION ; 
  3 PK1BLLAD PK1BLLAD ; 
  3 SR2BLLSU SR2BLLSU ; 
  3 PK1WT PK1WT ; 
  3 SR0TW-MSG SR0TW-MSG ; 
    4 SR0TW-MSG-TEXT SR0TW-MSG-TEXT ; 
    4 SR0TW-MSG-BILL-OF-LADING SR0TW-MSG-BILL-OF-LADING ; 
    4 SR0TW-MSG-PERIOD SR0TW-MSG-PERIOD ; 
    4 SR0TW-MSG-BOL-SUB-NBR SR0TW-MSG-BOL-SUB-NBR ; 
  3 SR0TW-MESSAGE SR0TW-MESSAGE ; 
    4 SR0TW-REASON SR0TW-REASON ; 
    4 TF1CARCD TF1CARCD ; 
    4 SR0TW-SLASH SR0TW-SLASH ; 
    4 TF3DSTCD TF3DSTCD ; 
  3 XXXZIP XXXZIP ; 
    4 SR0TW-XXXZIP-5 SR0TW-XXXZIP-5 ; 
      5 SR0TW-XXXZIP-4 SR0TW-XXXZIP-4 ; 
        6 SR0TW-XXXZIP-3 SR0TW-XXXZIP-3 ; 
        6 * char(1) ; 
      5 * char(1) ; 
    4 * char(5) ; 
  3 * char(1) ; 
  3 SR0TW-PK1WT-ACCUM2 SR0TW-PK1WT-ACCUM2 ; 
  3 SR0TW-SR2SHPCG-TO-ACCUM SR0TW-SR2SHPCG-TO-ACCUM ; 
  3 SR0TW-SR2SHPCG-FR-ACCUM SR0TW-SR2SHPCG-FR-ACCUM ; 
  3 * char(1) ; 
  3 SR0TW-SR2TNBCT-ACCUM SR0TW-SR2TNBCT-ACCUM ; 
  3 SR0TW-PK1WT-BOL-ACCUM SR0TW-PK1WT-BOL-ACCUM ; 
  3 SR0TW-SR2QTYSH-BOL-ACCUM SR0TW-SR2QTYSH-BOL-ACCUM ; 
  3 * char(1) ; 
  3 SR0TW-VAZCTN01-KEY SR0TW-VAZCTN01-KEY ; 
    4 SR0TW-VAZCTN01-BOL SR0TW-VAZCTN01-BOL ; 
    4 SR0TW-VAZCTN01-BOL-SUB SR0TW-VAZCTN01-BOL-SUB ; 
    4 SR0TW-VAZCTN01-CUST-ID SR0TW-VAZCTN01-CUST-ID ; 
    4 SR0TW-VAZCTN01-NIKE-ID SR0TW-VAZCTN01-NIKE-ID ; 
  3 SR0TW-OP-CUST-ORD-ID SR0TW-OP-CUST-ORD-ID ; 
    4 * char(8) ; 
    4 SR0TW-OP-ORD-PART-CHAR SR0TW-OP-ORD-PART-CHAR ; 
  3 SR0TW-PK-WEIGHT SR0TW-PK-WEIGHT ; 
  3 SR0TW-PK-NBR-OF-CARTONS SR0TW-PK-NBR-OF-CARTONS ; 
  3 SR0TW-SR-TOT-NBR-CARTONS SR0TW-SR-TOT-NBR-CARTONS ; 
  3 SR0TW-SR-SHP-CHG SR0TW-SR-SHP-CHG ; 
  3 SR0TW-OLD-NEW-PL-NBR-ARRAY SR0TW-OLD-NEW-PL-NBR-ARRAY [1000] ; 
    4 SR0TW-OLD-PL-NBR SR0TW-OLD-PL-NBR ; 
    4 SR0TW-NEW-PL-NBR SR0TW-NEW-PL-NBR ; 
  3 SR0TW-OLD-NEW-PL-NBR-INX SR0TW-OLD-NEW-PL-NBR-INX ; 
  3 SR0TW-ORDER-ARRAY SR0TW-ORDER-ARRAY [1000] ; 
    4 SR0TW-CUST-ORD-ID SR0TW-CUST-ORD-ID ; 
    4 SR0TW-NIKE-ORD-ID SR0TW-NIKE-ORD-ID ; 
  3 SR0TW-ORDER-ARRAY-INX SR0TW-ORDER-ARRAY-INX ; 
  3 SR0TW-OK-TO-NOT-FIND SR0TW-OK-TO-NOT-FIND ; 
  3 SR0TW-SAVE-PK-PACK-GRP-NBR SR0TW-SAVE-PK-PACK-GRP-NBR ; 
  3 SR0TW-UPDATE-AZ-ASN-STAT-CD SR0TW-UPDATE-AZ-ASN-STAT-CD ; 
  3 SR0TW-UPDATE-AZ-ORD-STAT-CD SR0TW-UPDATE-AZ-ORD-STAT-CD ; 
  3 SR0TW-FIRST-ORDER-READ-FL SR0TW-FIRST-ORDER-READ-FL ; 
  3 SR0TW-OP-ONETIME-SHIP-FL SR0TW-OP-ONETIME-SHIP-FL ; 
  3 SR0TW-TS-NIKE-PL-NBR SR0TW-TS-NIKE-PL-NBR ; 
  3 XDV-DIV-CD XDV-DIV-CD ; 
  3 SR0TW-SPLIT-ROWS-READ SR0TW-SPLIT-ROWS-READ ; 
  3 SR0TW-ACT-CARTON-WEIGHT-ACCUM SR0TW-ACT-CARTON-WEIGHT-ACCUM ; 
  3 SR0TW-EXP-CARTON-WEIGHT-ACCUM SR0TW-EXP-CARTON-WEIGHT-ACCUM ; 
  3 SR0TW-SPLIT-CARTON-NBR-SAVE SR0TW-SPLIT-CARTON-NBR-SAVE ; 
  3 SR0TW-OLD-SPLIT-ACCUM SR0TW-OLD-SPLIT-ACCUM ; 
  3 SR0TW-NEW-SPLIT-ACCUM SR0TW-NEW-SPLIT-ACCUM ; 
  3 SR0TW-NBR-OF-ORDERS-ACCUM SR0TW-NBR-OF-ORDERS-ACCUM ; 
  3 SR0TW-NBR-OF-CARTONS-ACCUM SR0TW-NBR-OF-CARTONS-ACCUM ; 
  3 SR0TW-BEGINNING-OF-ORDER-FL SR0TW-BEGINNING-OF-ORDER-FL ; 
  3 SR0TW-PK-BOL-SUB-NBR-CHAR SR0TW-PK-BOL-SUB-NBR-CHAR ; 
    4 SR0TW-PK-BOL-SUB-NBR-CBYT SR0TW-PK-BOL-SUB-NBR-CBYT [4] ; 
  3 SR0TW-PK-BOL-SUB-NBR-NUM SR0TW-PK-BOL-SUB-NBR-NUM ; 
    4 SR0TW-PK-BOL-SUB-NBR-NBYT SR0TW-PK-BOL-SUB-NBR-NBYT [4] ; 
  3 SR0TW-PK-BOL-SUB-NBR-WORK1 SR0TW-PK-BOL-SUB-NBR-WORK1 ; 
    4 SR0TW-PK-BOL-SUB-NBR-WBYT1 SR0TW-PK-BOL-SUB-NBR-WBYT1 [4] ; 
  3 SR0TW-PK-BOL-SUB-NBR-WORK2 SR0TW-PK-BOL-SUB-NBR-WORK2 ; 
    4 SR0TW-PK-BOL-SUB-NBR-WBYT2 SR0TW-PK-BOL-SUB-NBR-WBYT2 [4] ; 
  3 SR0TW-WORK-IDX SR0TW-WORK-IDX ; 
  3 SR0TW-WORK-CTR1 SR0TW-WORK-CTR1 ; 
  3 SR0TW-WORK-CTR2 SR0TW-WORK-CTR2 ; 
  3 SR0TW-BOL-SUB1-NOT-NUM-FL SR0TW-BOL-SUB1-NOT-NUM-FL ; 
  3 SR0TW-BOL-SUB2-NOT-NUM-FL SR0TW-BOL-SUB2-NOT-NUM-FL ; 
  3 SR0TW-PF14-FL SR0TW-PF14-FL ; 
  3 SR0TW-ONE-ORDER-FL SR0TW-ONE-ORDER-FL ; 
  3 SR0TW-PK-INNER-CRTN-FL SR0TW-PK-INNER-CRTN-FL ; 
  3 SR0TW-LEADSO-XWHCD SR0TW-LEADSO-XWHCD ; 
  3 SR0TW-LEADSO-PK1BLLAD SR0TW-LEADSO-PK1BLLAD ; 
  3 SR0TW-LEADSO-SR2BLLSU SR0TW-LEADSO-SR2BLLSU ; 
  3 SR0TW-LEADSO-OP-CUST-ORD-ID SR0TW-LEADSO-OP-CUST-ORD-ID ; 
  3 SR0TW-LEADSO-OP-NIKE-ORD-ID SR0TW-LEADSO-OP-NIKE-ORD-ID ; 
  3 SR0TW-LEADSO-PK1PKSCH SR0TW-LEADSO-PK1PKSCH ; 
  3 SR0TW-LEADSO-MSF SR0TW-LEADSO-MSF ; 
  3 SR0TW-CHARGES-FOUND-FL SR0TW-CHARGES-FOUND-FL ; 
  3 SR0TW-SR-EST-PK-WT-ACCUM SR0TW-SR-EST-PK-WT-ACCUM ; 
  3 SR0TW-PREV-CRTN-NBR SR0TW-PREV-CRTN-NBR ; 
  3 SR0TW-EXPC-TOT-ORD-WT SR0TW-EXPC-TOT-ORD-WT ; 
  3 SR0TW-PK-OUTER-CRTN-QTY-ACCUM SR0TW-PK-OUTER-CRTN-QTY-ACCUM ; 
  3 SR0TW-PK-OUTER-ORD-QTY-ACCUM SR0TW-PK-OUTER-ORD-QTY-ACCUM ; 
  3 SR0TW-PREV-PK-CRTN-CNT-NBR SR0TW-PREV-PK-CRTN-CNT-NBR ; 
  3 SR0TW-ORDER-SR2SHPCG SR0TW-ORDER-SR2SHPCG ; 
  3 SR0TW-NOT-SELECT-ARRAY SR0TW-NOT-SELECT-ARRAY [5000] ; 
    4 SR0TW-NOT-SELECT-PL-NBR SR0TW-NOT-SELECT-PL-NBR ; 
  3 SR0TW-NS-INX SR0TW-NS-INX ; 
  3 SR0TW-SAVE-TS-NIKE-PL-NBR SR0TW-SAVE-TS-NIKE-PL-NBR ; 
  3 SR0TW-ASSIGN-NEW-PL-NBR-FL SR0TW-ASSIGN-NEW-PL-NBR-FL ; 
  3 SR0TW-TOBOL-PART-SPLIT-FL SR0TW-TOBOL-PART-SPLIT-FL ; 
end // end SR0TW00

//*** RECORD=SR0TW01 ****
// ***********************************************************
// *  This is the working storage for SR0R Bill of Lading    *
// *  screen (SR0RM100) for FROM and TO BOLs.                *
// ***********************************************************
// ***********************
Record SR0TW01 type basicRecord
  3 XWHCD XWHCD ; 
  3 XWHABRV XWHABRV ; 
  3 SR0TW-UNIT-OF-MEASURE SR0TW-UNIT-OF-MEASURE ; 
  3 SR0TW-OPTION SR0TW-OPTION ; 
  3 SR0TW-ALL-ORDERS-FL SR0TW-ALL-ORDERS-FL ; 
  3 SR0TW-BOL-DATA SR0TW-BOL-DATA [2] ; 
    4 SR0TW-ORDER-CNT SR0TW-ORDER-CNT ; 
    4 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
    4 PK1BLLAD PK1BLLAD ; 
    4 SR2BLLSU SR2BLLSU ; 
    4 AZ-ASN-STAT-CD AZ-ASN-STAT-CD ; 
    4 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
    4 PK1PKSCH PK1PKSCH ; 
    4 OP1CUOID OP1CUOID ; 
    4 OP1NORID OP1NORID ; 
    4 SR0TW-SR1PKDT-CCYYMMDD SR0TW-SR1PKDT-CCYYMMDD ; 
      5 SR0TW-SR1PKDT-CC SR0TW-SR1PKDT-CC ; 
      5 SR0TW-SR1PKDT-YYMMDD SR0TW-SR1PKDT-YYMMDD ; 
    4 TF1CARCD TF1CARCD ; 
    4 SR0TW-CARRIER-NAME SR0TW-CARRIER-NAME ; 
    4 PK4CARSP PK4CARSP ; 
    4 TF2DSTCD TF2DSTCD ; 
    4 SR0TW-DEST-DESC SR0TW-DEST-DESC ; 
    4 TF2PRONO TF2PRONO ; 
    4 SR2SHPCD SR2SHPCD ; 
    4 PK1NBCTN PK1NBCTN ; 
    4 SR2QTYSH SR2QTYSH ; 
    4 PK1WT PK1WT ; 
    4 SR0TW-SR-EST-PK-WT SR0TW-SR-EST-PK-WT ; 
    4 SR2SHPCG SR2SHPCG ; 
    4 LEADSO-CHARGES LEADSO-CHARGES ; 
    4 SR0TW-SR1SHPDT-CCYYMMDD SR0TW-SR1SHPDT-CCYYMMDD ; 
      5 SR0TW-SR1SHPDT-CCYYMMDD-CC SR0TW-SR1SHPDT-CCYYMMDD-CC ; 
      5 SR0TW-SR1SHPDT-CCYYMMDD-YY SR0TW-SR1SHPDT-CCYYMMDD-YY ; 
      5 SR0TW-SR1SHPDT-CCYYMMDD-MM SR0TW-SR1SHPDT-CCYYMMDD-MM ; 
      5 SR0TW-SR1SHPDT-CCYYMMDD-DD SR0TW-SR1SHPDT-CCYYMMDD-DD ; 
    4 SR0TW-LEAD-SO-COMMAND SR0TW-LEAD-SO-COMMAND ; 
    4 XBCCD XBCCD ; 
    4 KUCCOID KUCCOID ; 
    4 KUMSTRID KUMSTRID ; 
    4 KUVDCCID KUVDCCID ; 
    4 KUVDCSID KUVDCSID ; 
    4 SR2TNBCT SR2TNBCT ; 
    4 SR0TW-SR2QTYSH-BOL SR0TW-SR2QTYSH-BOL ; 
    4 SR0TW-PK1WT-BOL SR0TW-PK1WT-BOL ; 
    4 SR0TW-SR2SHPCG-BOL SR0TW-SR2SHPCG-BOL ; 
    4 OP5ALTNM OP5ALTNM ; 
    4 XXX-ADDR1 XXX-ADDR1 ; 
    4 XXX-ADDR2 XXX-ADDR2 ; 
    4 XXX-ADDR3 XXX-ADDR3 ; 
    4 XXX-ADDR4 XXX-ADDR4 ; 
    4 XXX-ADDR5 XXX-ADDR5 ; 
    4 XXX-ADDR6 XXX-ADDR6 ; 
    4 XXXCITY XXXCITY ; 
    4 XSTCD XSTCD ; 
    4 XXXZIP XXXZIP ; 
    4 XCTCD XCTCD ; 
    4 XGPCD1 XGPCD1 ; 
    4 SR0TW-XGPABRV1 SR0TW-XGPABRV1 ; 
    4 XGPCD2 XGPCD2 ; 
    4 SR0TW-XGPABRV2 SR0TW-XGPABRV2 ; 
    4 XGPCD3 XGPCD3 ; 
    4 SR0TW-XGPABRV3 SR0TW-XGPABRV3 ; 
    4 XGPCD4 XGPCD4 ; 
    4 SR0TW-XGPABRV4 SR0TW-XGPABRV4 ; 
    4 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
  3 SR0TW-VICS-BOL-CHECK num(16) ; 
    4 SR0TW-CHECK-CONSTANT num(1) ; 
    4 SR0TW-CHECK-PREFIX-NBR num(6) ; 
    4 SR0TW-CHECK-WHSE-CD char(2) ; 
    4 SR0TW-CHECK-SEQ-NBR num(7) ; 
  3 SR0TW-TEMP-VARIABLE num(16) ; 
  3 SR0TW-VICS-BOL-NBR num(17) ; // PK_VICS_BOL
    4 SR0TW-VICS-CONSTANT num(1) ; 
    4 SR0TW-VICS-PREFIX-NBR num(6) ; 
    4 SR0TW-VICS-WHSE-CD char(2) ; 
    4 SR0TW-VICS-SEQ-NBR num(7) ; 
    4 SR0TW-VICS-CHECK-DIGIT num(1) ; 
  3 SR0TW-VICS-BOL-ARRAY num(16) ; 
    4 SR0TW-VICS-BOL-DIGIT num(1) [16] ; 
  3 SR0TW-VICS-IDX num(3) ; 
  3 SR0TW-VICS-ODD-SUM num(3) ; 
  3 SR0TW-VICS-EVEN-SUM num(3) ; 
  3 SR0TW-VICS-TEMP-VAR1 num(3) ; 
  3 SR0TW-VICS-TEMP-VAR2 num(3) ; 
  3 SR0TW-ORIG-VICS-BOL-NBR num(17) ; 
    4 SR0TW-ORIG-VICS-CONSTANT num(1) ; 
    4 SR0TW-ORIG-VICS-PREFIX-NBR num(6) ; 
    4 SR0TW-ORIG-BOL-NBR num(10) ; 
  3 SR0TW-TEMP-VICS-BOL-NBR num(17) ; 
    4 SR0TW-TEMP-VICS-CONSTANT num(1) ; 
    4 SR0TW-TEMP-VICS-PREFIX-NBR num(6) ; 
    4 SR0TW-TEMP-BOL-NBR num(10) ; 
  3 SR0TW-SRORD-VICS-BOL num(17) ; 
  3 SR0TW-AZHDR-BOL num(13) ; 
  3 SR0TW-AZHDR-SUB-BOL num(4) ; 
end // end SR0TW01

//*** RECORD=SR0TW02 ****
// ***********************************************************
// *  This is the working storage for SR0R Order List screen *
// *  (SR0RM200) for FROM BOL.                               *
// ***********************************************************
// ***********************
Record SR0TW02 type basicRecord
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 SR0TW-ORDER-DATA SR0TW-ORDER-DATA [10] ; 
    15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 AZ-ORD-STAT-CD AZ-ORD-STAT-CD ; 
    15 PK1PKSCH PK1PKSCH ; 
    15 SR0TW-MULTI-SCHED-FL SR0TW-MULTI-SCHED-FL ; 
    15 PK1NBCTN PK1NBCTN ; 
    15 SR2QTYSH SR2QTYSH ; 
    15 PK1WT PK1WT ; 
    15 SR2SHPCG SR2SHPCG ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end SR0TW02

//*** RECORD=SR0TW04 ****
// ***********************************************************
// *  This is the working storage for SR0T Carton List Screen*
// *  (SR0TM800) for FROM BOL.                               *
// ***********************************************************
// ***********************
Record SR0TW04 type basicRecord
  5 SR0TW04-TS-GROUP SR0TW04-TS-GROUP ; 
    10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
    10 SR0TW-CARTON-DATA SR0TW-CARTON-DATA [13] ; 
      15 SR0TW-FIRST-CARTON-OF-ORDER-FL SR0TW-FIRST-CARTON-OF-ORDER-FL ; 
      15 SR0TW-ALL-LN-SEL-IND SR0TW-ALL-LN-SEL-IND ; 
      15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
      15 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
      15 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
      15 PK-PICK-SCHED-NBR PK-PICK-SCHED-NBR ; 
      15 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR ; 
      15 PK-MOVERS-STAT-CD PK-MOVERS-STAT-CD ; 
      15 PK-CRTN-UNIT-QTY PK-CRTN-UNIT-QTY ; 
      15 PK-ACTL-CRTN-WT PK-ACTL-CRTN-WT ; 
      15 PK-CRTN-CHARGE-AMT PK-CRTN-CHARGE-AMT ; 
      15 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
      15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end SR0TW04

//*** RECORD=SR0TW10 ****
// job card for asn release out of sr0t
// DLVRUSA 07/02/2001 Modified to include ESP parameters
// ***********************
Record SR0TW10 type basicRecord
  3 TA3APLID TA3APLID ; 
    4 SR0TW-CICS-LIT SR0TW-CICS-LIT ; 
    4 SR0TW-CICS-VALUE SR0TW-CICS-VALUE ; 
    4 * char(1) ; 
  3 SR0TW-JOB-CARD SR0TW-JOB-CARD ; 
    4 * char(4) ; // PARM CARD
    4 XWH-WHSE-CD XWH-WHSE-CD ; 
    4 * char(74) ; // warehouse IDENTIFIER
  3 SR0TW-OUTPUT-CARD SR0TW-OUTPUT-CARD ; 
    4 * char(2) ; 
    4 SR0TW-OUTPUT-LIT char(6) ; 
    4 * char(15) ; 
    4 SR0TW-OUTPUT-RMT SR0TW-OUTPUT-RMT ; 
    4 * char(54) ; 
  3 SR0TW-WHSE-CARD SR0TW-WHSE-CARD ; 
    4 * char(15) ; 
    4 SR0TW-WHSE-CD SR0TW-WHSE-CD ; 
    4 * char(63) ; 
  3 SR0TW-AZ1820-PARM-CARD SR0TW-AZ1820-PARM-CARD ; 
    4 SR0TW-AZ1820-PARM-WHSE-CD SR0TW-AZ1820-PARM-WHSE-CD ; 
    4 * char(78) ; 
  3 SR0TW-AZ153D-PARM-CARD SR0TW-AZ153D-PARM-CARD ; 
    4 SR0TW-AZ153D-PARM-TRAN-ID SR0TW-AZ153D-PARM-TRAN-ID ; 
    4 SR0TW-AZ153D-PARM-WHSE-CD SR0TW-AZ153D-PARM-WHSE-CD ; 
    4 SR0TW-AZ153D-PARM-BOL-1 SR0TW-AZ153D-PARM-BOL-1 ; 
    4 SR0TW-AZ153D-PARM-BOL-SUB-1 SR0TW-AZ153D-PARM-BOL-SUB-1 ; 
    4 SR0TW-AZ153D-PARM-MOVERS-STAT-CD SR0TW-AZ153D-PARM-MOVERS-STAT-CD ; 
    4 SR0TW-AZ153D-PARM-BOL-2 SR0TW-AZ153D-PARM-BOL-2 ; 
    4 SR0TW-AZ153D-PARM-BOL-SUB-2 SR0TW-AZ153D-PARM-BOL-SUB-2 ; 
    4 * char(54) ; 
  3 SR0TW-SYSTSIN-CARD SR0TW-SYSTSIN-CARD ; 
    4 * char(14) ; 
    4 SR0TW-DSN-VALUE SR0TW-DSN-VALUE ; 
    4 * char(65) ; 
  3 SR0TW-FTP-CARD SR0TW-FTP-CARD ; 
    4 * char(9) ; 
    4 SR0TW-FTP-LIT SR0TW-FTP-LIT ; 
    4 * char(2) ; 
    4 SR0TW-FTP-TARGET char(20) ; 
      5 * char(4) ; 
      5 SR0TW-FTPPARMS-WHSE-CD char(2) ; 
      5 * char(14) ; 
    4 * char(43) ; 
  3 SR0TW-RSH-CARD SR0TW-RSH-CARD ; 
    4 * char(9) ; 
    4 SR0TW-RSH-LIT SR0TW-RSH-LIT ; 
    4 * char(5) ; 
    4 SR0TW-RSH-TARGET char(20) ; 
      5 * char(11) ; 
      5 SR0TW-RSH-CMD-WHSE-CD char(2) ; 
      5 * char(7) ; 
    4 * char(43) ; 
  3 SR0TW-ESP-CARD SR0TW-ESP-CARD ; 
    4 * char(9) ; 
    4 SR0TW-ESP-LIT SR0TW-ESP-LIT ; 
    4 * char(2) ; 
    4 SR0TW-ESP-CMD char(8) ; 
      5 * char(4) ; 
      5 SR0TW-ESP-CMD-WHSE-CD char(2) ; 
      5 * char(2) ; 
    4 * char(58) ; 
  3 SR0TW-NEXT-JOB-CARD char(80) ; 
    4 * char(52) ; 
    4 SR0TW-NEXT-XWHCD char(2) ; 
    4 * char(26) ; 
end // end SR0TW10

//*** RECORD=VAZCIT02 ****
// **************   ORDER MESSAGE TABLE   *********************
// 
// DB2 TABLE:           DSHIP.VAZCIT01
// 
// COPYLIB MEMBER:      DAZCIT01
// 
// I/O MOD:             VAZCIT01
// 
// KEY TO DB2 TABLE:    XWH-WHSE-CD
//                      PK-BILL-OF-LADING
//                      PK-BOL-SUB-NBR
//                      OP-CUST-ORD-ID
//                      OP-NIKE-ORD-ID
//                      PK-CRTN-SEQ-NBR
//                      OP-LINE-ITEM-NBR
// 
// DATE CREATED:        09/20/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 09/20/97  KDENNE     INITIAL RECORD CREATION
// 11/11/97  GRAY       PRE INSTALL REVISIONS
// 
// ************************
Record VAZCIT02 type basicRecord
  3 VAZCIT02-REC VAZCIT02-REC ; 
    4 VAZCIT02-KEY VAZCIT02-KEY ; 
      5 XWH-WHSE-CD XWH-WHSE-CD ; 
      5 PK-BILL-OF-LADING PK-BILL-OF-LADING ; 
      5 PK-BOL-SUB-NBR PK-BOL-SUB-NBR ; 
      5 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
      5 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
      5 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR ; 
      5 OP-LINE-ITEM-NBR OP-LINE-ITEM-NBR ; 
    4 PK-PICK-SCHED-NBR PK-PICK-SCHED-NBR ; 
    4 AZ-ASRTMNT-NBR AZ-ASRTMNT-NBR ; 
    4 OP-CU-PO-LINE-NBR OP-CU-PO-LINE-NBR ; 
    4 XGP-GPC-CD XGP-GPC-CD ; 
    4 SY-STY-NBR SY-STY-NBR ; 
    4 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    4 XDM-DIM-CD XDM-DIM-CD ; 
    4 XQA-QUAL-CD XQA-QUAL-CD ; 
    4 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
    4 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD ; 
    4 XEG-ENGR-DIFF-CD XEG-ENGR-DIFF-CD ; 
    4 XPG-PKG-TYP-CD XPG-PKG-TYP-CD ; 
    4 XUM-UOM-CD XUM-UOM-CD ; 
    4 XBC-BRAND-CD XBC-BRAND-CD ; 
    4 CU-PROD-ID CU-PROD-ID ; 
    4 SY-STY-NM SY-STY-NM ; 
    4 SY-STY-COLR-DESC SY-STY-COLR-DESC ; 
    4 XHD-HNDL-CD1 XHD-HNDL-CD1 ; 
    4 XHD-HNDL-CD2 XHD-HNDL-CD2 ; 
    4 XHD-HNDL-CD3 XHD-HNDL-CD3 ; 
    4 XHD-HNDL-CD4 XHD-HNDL-CD4 ; 
    4 XHD-HNDL-CD5 XHD-HNDL-CD5 ; 
    4 AZ-ITEM-CNTL-QTY AZ-ITEM-CNTL-QTY ; 
    4 PK-VICS-BOL PK-VICS-BOL ; 
    4 ZZ-SDT ZZ-SDT ; 
    4 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    4 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    4 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    4 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VAZCIT02

//*** RECORD=VAZCSZ02 ****
// **************   ORDER MESSAGE TABLE   *********************
// 
// DB2 TABLE:           DSHIP.VAZCSZ01
// 
// COPYLIB MEMBER:      DAZCSZ01
// 
// I/O MOD:             VAZCSZ01
// 
// KEY TO DB2 TABLE:    XWH-WHSE-CD
//                      PK-BILL-OF-LADING
//                      PK-BOL-SUB-NBR
//                      OP-CUST-ORD-ID
//                      OP-NIKE-ORD-ID
//                      PK-CRTN-SEQ-NBR
//                      OP-LINE-ITEM-NBR
//                      SY-SZ-ID
// 
// DATE CREATED:        09/20/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 09/20/97  KDENNE     INITIAL RECORD CREATION
// 11/11/97  GRAY       PRE INSTALL REVISIONS
// 
// ************************
Record VAZCSZ02 type basicRecord
  3 VAZCSZ02-REC VAZCSZ02-REC ; 
    4 VAZCSZ02-KEY VAZCSZ02-KEY ; 
      5 XWH-WHSE-CD XWH-WHSE-CD ; 
      5 PK-BILL-OF-LADING PK-BILL-OF-LADING ; 
      5 PK-BOL-SUB-NBR PK-BOL-SUB-NBR ; 
      5 OP-CUST-ORD-ID OP-CUST-ORD-ID ; 
      5 OP-NIKE-ORD-ID OP-NIKE-ORD-ID ; 
      5 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR ; 
      5 OP-LINE-ITEM-NBR OP-LINE-ITEM-NBR ; 
      5 SY-SZ-ID SY-SZ-ID ; 
    4 SY-UPC-SYS-NBR SY-UPC-SYS-NBR ; 
    4 SY-UPC-MFG-ID-NBR SY-UPC-MFG-ID-NBR ; 
    4 SY-UPC-ITM-NBR SY-UPC-ITM-NBR ; 
    4 SY-UPC-CK-DGIT SY-UPC-CK-DGIT ; 
    4 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
    4 PK-ALOC-PICK-QTY PK-ALOC-PICK-QTY ; 
    4 OP-ON-ORD-QTY OP-ON-ORD-QTY ; 
    4 SY-PRC-PER-UNIT SY-PRC-PER-UNIT ; 
    4 CU-PROD-ID CU-PROD-ID ; 
    4 AZ-UPC-TYP-CD AZ-UPC-TYP-CD ; 
    4 PK-VICS-BOL PK-VICS-BOL ; 
    4 ZZ-SDT ZZ-SDT ; 
    4 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    4 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    4 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    4 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VAZCSZ02
//*** RECORD=VAZCTL01 ****
// **************   ORDER MESSAGE TABLE   *********************
// 
// DB2 TABLE:           DSHIP.VAZCTL01
// 
// COPYLIB MEMBER:      DAZCTL01
// 
// I/O MOD:             VAZCTL01
// 
// KEY TO DB2 TABLE:    XWH-WHSE-CD
// 
// DATE CREATED:        11/16/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 11/16/97  GRAY       INITIAL RECORD CREATION
// 
// ************************
Record VAZCTL01 type basicRecord
  5 VAZCTL01-REC VAZCTL01-REC ; 
    10 VAZCTL01-KEY VAZCTL01-KEY ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 AZ-ASN-NXT-NBR AZ-ASN-NXT-NBR ; 
    10 PK-BOL-NXT-NBR PK-BOL-NXT-NBR ; 
    10 ZZ-SDT-DT ZZ-SDT-DT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VAZCTL01

//*** RECORD=VAZHDR02 ****
// *********************  ASN HEADER TABLE ********************
// 
// DB2 TABLE:           DSHIP.VAZHDR01
// 
// COPYLIB MEMBER:      DAZHDR01
// 
// I/O MOD:             VAZHDR01
// 
// KEY TO DB2 TABLE:    XWH-WHSE-CD
//                      PK-BILL-OF-LADING
//                      PK-BOL-SUB-NBR
// 
// DATE CREATED:        09/20/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 09-20-97  KDENNE     INITIAL RECORD CREATION
// 11-12-97  GRAY       Pre install revisions
// ************************
Record VAZHDR02 type basicRecord
  3 VAZHDR02-REC VAZHDR02-REC ; 
    4 VAZHDR02-KEY VAZHDR02-KEY ; 
      5 XWH-WHSE-CD XWH-WHSE-CD ; 
      5 PK-BILL-OF-LADING PK-BILL-OF-LADING ; 
      5 PK-BOL-SUB-NBR PK-BOL-SUB-NBR ; 
    4 AZ-ASN-STAT-CD AZ-ASN-STAT-CD ; 
    4 TF-CARR-CD TF-CARR-CD ; 
    4 TF-DEST-CD TF-DEST-CD ; 
    4 PK-CARR-SPF-CD PK-CARR-SPF-CD ; 
    4 PK-SHPMT-RLSD-DATE PK-SHPMT-RLSD-DATE ; 
    4 PK-SHPMT-RLSD-TIME PK-SHPMT-RLSD-TIME ; 
    4 AZ-ASN-NBR AZ-ASN-NBR ; 
    4 TF-PRO-NBR TF-PRO-NBR ; 
    4 SR-TOT-NBR-CARTONS SR-TOT-NBR-CARTONS ; 
    4 AZ-TOT-SHPMT-WT AZ-TOT-SHPMT-WT ; 
    4 TF-CARR-NM TF-CARR-NM ; 
    4 CU-EDI-TRADPT-ID CU-EDI-TRADPT-ID ; 
    4 SR-SHGRP-ADDR-CD SR-SHGRP-ADDR-CD ; 
    4 CU-SHGRP-ADDR-ID CU-SHGRP-ADDR-ID ; 
    4 CU-DISTCTR-CO-ID CU-DISTCTR-CO-ID ; 
    4 CU-DISTCTR-STOR-ID CU-DISTCTR-STOR-ID ; 
    4 AZ-SHPMT-NOTE AZ-SHPMT-NOTE ; 
    4 CU-STOR-SELF-ID CU-STOR-SELF-ID ; 
    4 CU-EDI-SHP-SEQ-NBR CU-EDI-SHP-SEQ-NBR ; 
    4 FY-FCTY-CD FY-FCTY-CD ; 
    4 AZ-TRANS-MODE-CD AZ-TRANS-MODE-CD ; 
    4 AZ-CONT-NBR AZ-CONT-NBR ; 
    4 TF-SCAC-CD TF-SCAC-CD ; 
    4 AZ-PURPOSE-CD AZ-PURPOSE-CD ; 
    4 AZ-RECPT-TYPE-CD AZ-RECPT-TYPE-CD ; 
    4 TF-SMALL-CARR-CD TF-SMALL-CARR-CD ; 
    4 AZ-ASN-RESENT-FL AZ-ASN-RESENT-FL ; 
    4 PK-SHPMT-RLS-BY-ID PK-SHPMT-RLS-BY-ID ; 
    4 AZ-EST-ARRVL-DT AZ-EST-ARRVL-DT ; 
    4 AZ-TRAN-DAY-NBR AZ-TRAN-DAY-NBR ; 
    4 AZ-PORT-OF-ENTRY AZ-PORT-OF-ENTRY ; 
    4 AZ-PORT-OF-ORIGIN AZ-PORT-OF-ORIGIN ; 
    4 AZ-PYMT-METHOD-CD AZ-PYMT-METHOD-CD ; 
    4 AZ-ASN-TYPE-CD AZ-ASN-TYPE-CD ; 
    4 XXX-ADDR1 XXX-ADDR1 ; 
    4 XXX-ADDR2 XXX-ADDR2 ; 
    4 XXX-ADDR3 XXX-ADDR3 ; 
    4 XXX-CITY XXX-CITY ; 
    4 XST-ST-CD XST-ST-CD ; 
    4 XXX-ZIP XXX-ZIP ; 
    4 XCT-CTRY-CD XCT-CTRY-CD ; 
    4 PK-RUN-NBR PK-RUN-NBR ; 
    4 PK-SHP-SPUR-NBR PK-SHP-SPUR-NBR ; 
    4 PK-VICS-BOL PK-VICS-BOL ; 
    4 PK-ORIG-VICS-BOL PK-ORIG-VICS-BOL ; 
    4 ZZ-SDT ZZ-SDT ; 
    4 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    4 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    4 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    4 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VAZHDR02


DataItem AZ-ASN-NXT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AZTOTREC-REC char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem LEADSO-CHARGES decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PK-BOL-NXT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_ORIG_VICS_BOL
DataItem PK-ORIG-VICS-BOL decimal(17)  {
  sign = none
}
end
// Record group level
DataItem PWQGROUP char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record key level
DataItem PWQKEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ACT-CARTON-WEIGHT-ACCUM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Address changed flag
DataItem SR0TW-ADDR-CHANGED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ALL-CTNS-SELECTED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// All Cartons Select Indicator
DataItem SR0TW-ALL-LN-SEL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ALL-ORDERS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-APPLID-LIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ASSIGN-NEW-PL-NBR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bill of Lading Number
DataItem SR0TW-AZ153D-PARM-BOL-1 decimal(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bill of Lading Number
DataItem SR0TW-AZ153D-PARM-BOL-2 decimal(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL Sub Number
DataItem SR0TW-AZ153D-PARM-BOL-SUB-1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL Sub Number
DataItem SR0TW-AZ153D-PARM-BOL-SUB-2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-AZ153D-PARM-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-AZ153D-PARM-MOVERS-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-AZ153D-PARM-TRAN-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-AZ153D-PARM-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-AZ1820-PARM-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-AZ1820-PARM-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton Item EOF flag
DataItem SR0TW-AZCIT-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton Item/Size EOF flag
DataItem SR0TW-AZCSZ-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton EOF flag
DataItem SR0TW-AZCTN-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header EOF Flag
DataItem SR0TW-AZHDR-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order EOF Flag
DataItem SR0TW-AZORD-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-BEGINNING-OF-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BOL data
DataItem SR0TW-BOL-DATA char(544)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-BOL-MATCHES-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-BOL-SUB1-NOT-NUM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-BOL-SUB2-NOT-NUM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CAN-CTN-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tf-carr-nm
DataItem SR0TW-CARRIER-NAME char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order data
DataItem SR0TW-CARTON-DATA char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SR0TW-CARTONS-NOT-SELECT-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SR0TW-CARTONS-SELECT-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CHARGES-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CICS-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CICS-VALUE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirmation Flag
DataItem SR0TW-CONFIRM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CONSOL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CREATE-TO-BOL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-CTN-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// destination description
DataItem SR0TW-DEST-DESC char(22)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-DSN-VALUE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-END-ORDER-TEST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ESP-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ESP-LIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-EXP-CARTON-WEIGHT-ACCUM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-EXPC-TOT-ORD-WT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-FIRST-CARTON-OF-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-FIRST-ORDER-READ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-FMT-BOL-NBR num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-FMT-BOL-SEQ-NBR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-FMT-BOL-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Indicator if FROM or TO
DataItem SR0TW-FR-TO-BOL-IND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-FROM-TO-BOL-IND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-FTP-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-FTP-LIT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-GOOD-CTN-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-GOOD-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-JCL-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// job card
DataItem SR0TW-JOB-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-JULIAN-DATE num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-JULIAN-DDD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-JULIAN-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lead so
DataItem SR0TW-LEAD-SO num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Command to update lead so data
DataItem SR0TW-LEAD-SO-COMMAND char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lead so exists in mult sched
DataItem SR0TW-LEAD-SO-IN-MULT-SCHED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Address changed flag
DataItem SR0TW-LEADSO-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-LEADSO-MSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-LEADSO-OP-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-LEADSO-OP-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-LEADSO-PK1BLLAD decimal(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-LEADSO-PK1PKSCH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-LEADSO-SR2BLLSU smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-LEADSO-XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page number
DataItem SR0TW-M002-CURR-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Highest page number
DataItem SR0TW-M002-HI-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Highest page number
DataItem SR0TW-M800-CURR-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Highest page number
DataItem SR0TW-M800-HI-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for first carton row
DataItem SR0TW-M800-INX-FIRST-CARTON smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SR0TW-M800-INX-FLD-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem SR0TW-M800-INX-LMT-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-M800-ROW num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-M800-SEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-MESSAGE char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-MOVERS-UPDATE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-MSG char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-MSG-BILL-OF-LADING num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-MSG-BOL-SUB-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-MSG-PERIOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-MSG-TEXT char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Multiple Schedule Flag
DataItem SR0TW-MULTI-SCHED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-NBR-OF-CARTONS-ACCUM decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-NBR-OF-ORDERS-ACCUM decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New Order Flag
DataItem SR0TW-NEW-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-NEW-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-NEW-SPLIT-ACCUM decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Old/new PL Nbr array
DataItem SR0TW-NOT-SELECT-ARRAY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-NOT-SELECT-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-NS-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OBSELETE-SR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OK-TO-NOT-FIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Old/new PL Nbr array
DataItem SR0TW-OLD-NEW-PL-NBR-ARRAY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OLD-NEW-PL-NBR-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OLD-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OLD-PL-NBR-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OLD-SPLIT-ACCUM decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-ONE-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OP-CUST-ORD-ID-LCHA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-CUST-ORD-ID-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OP-CUST-ORD-ID-SCHA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-NIKE-ORD-ID-LCHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-NIKE-ORD-ID-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OP-NIKE-ORD-ID-SCHA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-ONETIME-SHIP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OP-ORD-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem SR0TW-OP1CUOID-UNPACK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem SR0TW-OP1NORID-UNPACK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OPTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ORDER-ARRAY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-ORDER-ARRAY-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Actual nbr of saved orders
DataItem SR0TW-ORDER-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order data
DataItem SR0TW-ORDER-DATA char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order number
DataItem SR0TW-ORDER-NBR num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-ORDER-SR2SHPCG decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-OUTPUT-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-OUTPUT-RMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PARTIAL-ORDERS-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PF14-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-CBYT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-NBYT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-NUM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-WBYT1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-WBYT2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-WORK1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-BOL-SUB-NBR-WORK2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-INNER-CRTN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-PK-NBR-OF-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-OUTER-CRTN-QTY-ACCUM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-OUTER-ORD-QTY-ACCUM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK-WEIGHT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK1PKSCH-COMP-4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK1PKSCH-UNPACK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK1PKSCH-UNPACK-4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK1WT-ACCUM2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL weight
DataItem SR0TW-PK1WT-BOL decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PK1WT-BOL-ACCUM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PREV-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PREV-PK-CRTN-CNT-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-PROCESS-ALL-CTNS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-REASON char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-REDISPLAY-UPD-BOL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-RELEASE-COND-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-REPEAT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-RSH-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-RSH-LIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SAVE-OP-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SAVE-OP-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SAVE-PK-PACK-GRP-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SAVE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SAVE-SCHED-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SAVE-TS-NIKE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SLASH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton EOF flag
DataItem SR0TW-SPBOL-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLHD-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLIT-CARTON-NBR-SAVE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SPLIT-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLIT-EOF-FL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLIT-EOF-FL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLIT-REQUESTED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SPLIT-ROWS-READ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SPLSZ-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-weight
DataItem SR0TW-SR-EST-PK-WT decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SR-EST-PK-WT-ACCUM num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR-SHP-CHG decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR-TOT-NBR-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sr-pick-sched-dt
DataItem SR0TW-SR1PKDT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-sched-dt
DataItem SR0TW-SR1PKDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SR1PKDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-AGE num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-CCYYMMDD-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-CCYYMMDD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-CCYYMMDD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-CCYYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-MMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-MMDDYY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-MMDDYY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-MMDDYY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-TA2JULNN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-YYMMDD-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-YYMMDD-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR1SHPDT-YYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL qty shipped
DataItem SR0TW-SR2QTYSH-BOL decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR2QTYSH-BOL-ACCUM decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOL ship charges
DataItem SR0TW-SR2SHPCG-BOL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR2SHPCG-FR-ACCUM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR2SHPCG-TO-ACCUM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-SR2TNBCT-ACCUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lead so exists in mult sched
DataItem SR0TW-SRORD-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-ST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-STATUS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-SYSTSIN-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-TA2JULNN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-TOBOL-PART-SPLIT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ_CHNG_HHMM
DataItem SR0TW-TOT-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-TOT-CHARGE decimal(13,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-TOT-EXPTD-WEIGHT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_CNT
DataItem SR0TW-TOT-UNIT-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-TOT-WEIGHT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-TS-NIKE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-UNIT-OF-MEASURE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-UPDATE-AZ-ASN-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-UPDATE-AZ-ORD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-UPDATE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-UPDATE-SR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-VAZCTN01-BOL num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-VAZCTN01-BOL-SUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-VAZCTN01-CUST-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-VAZCTN01-KEY char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-VAZCTN01-NIKE-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Whole Orders Flag
DataItem SR0TW-WHOLE-ORDERS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-WHSE-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-WORK-CTR1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-WORK-CTR2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-WORK-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC abbreviation
DataItem SR0TW-XGPABRV1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0TW-XGPABRV2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0TW-XGPABRV3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC abbreviation
DataItem SR0TW-XGPABRV4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-XL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-XXXZIP-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-XXXZIP-4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-XXXZIP-5 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0TW-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0TW-YYMMDD-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary Group for Carton
DataItem SR0TW04-TS-GROUP char(433)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VAZCIT02-KEY char(23) 
end

DataItem VAZCIT02-REC char(205) 
end

DataItem VAZCSZ02-KEY char(25) 
end

DataItem VAZCSZ02-REC char(96) 
end
DataItem VAZCTL01-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VAZCTL01-REC char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record key
DataItem VAZHDR02-KEY char(11) 
end

// record group level
DataItem VAZHDR02-REC char(467) 
end

// Saved Current page number
DataItem XXX-SAVE-CURR-PAGE-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem ZZ-SDT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

