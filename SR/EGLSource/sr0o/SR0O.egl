package sr0o;
import corpcom2.*;
import corpcom4.*;
import corpcom6.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=SR0O ****
// -------------  sr0o - deallocate order/item  --------------
// 
// overview: this is a called batch application that will
//           deallocate an item or order depending on the
//           function requested.  see sr8rec prologue for
//           requirements of data to be passed.
//           application is called with this syntax:
//           call sr0o sr8rec,sqlca (nomaps
//           note: no commit or reset is called
// 
// date written: 11/86
// author:       david ply - cap gemini america
// 
// processing:
//   i. initialization (process sr0o010)
//      a. all processing in flow
//      b. check passed function:
//         1. function 'i' - branch to sr0o020 (dealloc item)
//         2. function 'o' - branch to sr0o030 (dealloc order)
//         3. other - set return code = '3', return to caller
// 
//  ii. deallocate item (process sr0o020)
//      a. convert csp date/time  (xx0xs01)
//      b. select order using generic order key (sr0os05)
//      c. read item (sr0os10)
//      d. set deallocate flag for item
//      e. update item (sr0os15)
//      f. sub item qty, amt, count from order
//      g. update order (sr0os20)
//      h. read schedule header (sr0os25)
//      i. sub item qty, amt, count from schedule
//      j. update schedule (sr0os30)
//      k. set return code to '0'
// 
// iii. deallocate order (process sr0o030)
//      a. convert csp date/time (xx0xs01)
//      b. select order using the passed key  (sr0os05)
//      c. set deallocate flag for order
//      d. update order (sr0os20)
//      e. read schedule header (sr0os25)
//      f. sub order qty, amt, items, count from schedule
//      g. update schedule (sr0os30)
//      h. set return code to '0'
// 
//  iv. miscellaneous - db2 calls:
//      a. if sqlcode = 100, set return code
//         to 1, return to calling program.
//      b. if sqlcode is negative, set return
//         code to 2, return to calling program.
//      c. sqlca is passed with last i/o status info.
// 
// -------------------- maint history -------------------------
// 
// 08/12/88 jbc move 0 to number of items if less then zero.
// 10/20/88 jw  added call option NONCSP
// 12/07/89 mchow added code to move 'y' to dship.vsrord01
//                al-dealoc-fl if all items have been dealloc'd
//                and nothing remains in vsrord01 (SR0O020).
// 02/28/94 HKEMPE  Generate/Compile to pick up revised SR3REC.
//                  Resized SR0OW01.SR0OWAMT.
// 
// 02-06-98 oricha  y2kproj:  y2k modifications - regen to pick
//                  up new version of xx0xs01.
// *********************
Program SR0O type basicProgram //VAGen Info - called batch program
  (
   SR8REC SR8REC, // record
   SQLCA SQLCA // record
  )
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  SR0OW01 SR0OW01; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SR0O010: SR0O010();

     /* --------------- sr0o010 flow  ---------------------*/

    if (SR8REC.SR8FUNC == "I") /* item deallocate request?*/
      goto SR0O020;
    else
      if (SR8REC.SR8FUNC == "O") /* order deallocate request?*/
        goto SR0O030;
      else
        SR8REC.SR8RTN = "3"; /* invalid function*/
        exit program;
      end
    end
    SR0O020: SR0O020();

     /* --------------- sr0o020 flow  ---------------------*/

    exit program; /* return to calling program*/
    SR0O030: SR0O030();

     /* --------------- sr0o030 flow  ---------------------*/

    exit program; /* return to calling program*/

  end // end main
end // end SR0O

// initialize deallocation
Function SR0O010()
   /* ---------------  sr0o010 process start  ----------------*/

     /* work done in flow*/

   /* ---------------  sr0o010 process end    ----------------*/

end // end SR0O010

// deallocate item
Function SR0O020()
   /* ---------------  sr0o020 process start  ----------------*/

       /* deallocate item:*/

  XX0XS01(); /* convert csp date/time*/

  SR0OS05(); /* select order*/

  SR0OS10(); /* read item*/

  SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  SR3REC.SR3DALFL = "Y";

  SR0OS15(); /* update item*/

  SR2REC.SR2NBITM = SR2REC.SR2NBITM - 1; /* nbr of items*/
  SR2REC.SR2QTYSH = SR2REC.SR2QTYSH - SR3REC.SR3TQTSH; /* shipped qty*/
  SR0OW01.SR0OWAMT = SR3REC.SR3TQTSH * SR3REC.OP2AUPRC; /* value dealloc.*/
  SR2REC.SR2DLRAM = SR2REC.SR2DLRAM - SR0OW01.SR0OWAMT; /* order value*/
  SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  if (SR2REC.SR2NBITM < 0)
    SR2REC.SR2NBITM = 0;
  end

  if (SR2REC.SR2NBITM <= 0) /* no more items left on this order*/
    SR2REC.SR2DALFL = "Y"; /* set the order dealoc flag to yes*/
  end

  SR0OS20(); /* update order*/

  SR0OS25(); /* read schedule header*/

  SR1REC.SR1NBITM = SR1REC.SR1NBITM - 1;
  SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - SR3REC.SR3TQTSH;
  SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - SR0OW01.SR0OWAMT;
  SR1REC.SR1DTCHG = XX0XW01.XX0XWDAT;
  SR1REC.SR1TMCHG = XX0XW01.XX0XWTIM;
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  if (SR1REC.SR1NBITM < 0)
    SR1REC.SR1NBITM = 0;
  end

  SR0OS30(); /* update schedule header*/

  SR8REC.SR8RTN = "0"; /* good return code*/

   /* ---------------  sr0o020 process end    ----------------*/

end // end SR0O020

// deallocate order
Function SR0O030()
   /* ---------------  sr0o030 process start  ----------------*/

       /* deallocate order*/

  XX0XS01(); /* convert csp date/time*/

  SR0OS05(); /* select order*/

  SR2REC.SR2DALFL = "Y"; /* deallocate flag*/
  SR2REC.SR2NBITM = 0;
  SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  SR0OS20(); /* update order*/

  SR0OS25(); /* read schedule header*/

  SR1REC.SR1NBORD = SR1REC.SR1NBORD - 1;
  SR1REC.SR1NBITM = SR1REC.SR1NBITM - SR2REC.SR2NBITM;
  SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - SR2REC.SR2QTYSH;
  SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - SR2REC.SR2DLRAM;
  SR1REC.SR1DTCHG = XX0XW01.XX0XWDAT;
  SR1REC.SR1TMCHG = XX0XW01.XX0XWTIM;
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  if (SR1REC.SR1NBORD < 0)
    SR1REC.SR1NBORD = 0;
  end
  if (SR1REC.SR1NBITM < 0)
    SR1REC.SR1NBITM = 0;
  end

  SR0OS30(); /* update schedule header*/

  SR8REC.SR8RTN = "0"; /* good return code*/

   /* ---------------  sr0o030 process end    ----------------*/

end // end SR0O030

// select order
Function SR0OS05()
   /* ------------- start stmt grp sr0os05 ---------------*/

      /* select order using the passed key*/
      /* a. select set*/

  set SR2REC empty;
  SR2REC.XWHCD = SR8REC.XWHCD;
  SR2REC.PK1PKSCH = SR8REC.PK1PKSCH;
  SR2REC.OP1CUOID = SR8REC.OP1CUOID;
  SR2REC.OP1NORID = SR8REC.OP1NORID;
  SR2REC.OP1NTMAL = SR8REC.OP1NTMAL;

  call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR8REC.SR8RTN = "2";
    SR8REC.SR8LOC = "SR0OS05";
    exit stack;
  end


   /* -------------   end stmt grp sr0os05 ---------------*/
end // end SR0OS05

// read item
Function SR0OS10()
   /* ------------- start stmt grp sr0os10 ---------------*/

      /* select unique item*/

  set SR3REC empty;
  SR3REC.XWHCD = SR2REC.XWHCD;
  SR3REC.PK1PKSCH = SR2REC.PK1PKSCH;
  SR3REC.OP1CUOID = SR2REC.OP1CUOID;
  SR3REC.OP1NORID = SR2REC.OP1NORID;
  SR3REC.OP1NTMAL = SR2REC.OP1NTMAL;
  SR3REC.OP2LNINB = SR8REC.OP2LNINB;

  call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsritm01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* already exists*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* doesn't exist*/
      SR8REC.SR8RTN = "1";
      SR8REC.SR8LOC = "SR0OS10";
      exit stack;
    else /* sql error*/
      SR8REC.SR8RTN = "2";
      SR8REC.SR8LOC = "SR0OS10";
      exit stack;
    end
  end


   /* -------------   end stmt grp sr0os10 ---------------*/
end // end SR0OS10

// update item
Function SR0OS15()
   /* ------------- start stmt grp sr0os15 ---------------*/

      /* update item*/

  call "SR1100" ("U ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsritm01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good upt*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      SR8REC.SR8RTN = "1";
      SR8REC.SR8LOC = "SR0OS15";
      exit stack;
    else /* sql error*/
      SR8REC.SR8RTN = "2";
      SR8REC.SR8LOC = "SR0OS15";
      exit stack;
    end
  end


   /* -------------   end stmt grp sr0os15 ---------------*/
end // end SR0OS15

// update order
Function SR0OS20()
   /* ------------- start stmt grp sr0os20 ---------------*/

      /* update order*/

  call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good update*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      SR8REC.SR8RTN = "1";
      SR8REC.SR8LOC = "SR0OS20";
      exit stack;
    else /* sql error*/
      SR8REC.SR8RTN = "2";
      SR8REC.SR8LOC = "SR0OS20";
      exit stack;
    end
  end


   /* -------------   end stmt grp sr0os20 ---------------*/
end // end SR0OS20

// read schedule header
Function SR0OS25()
   /* ------------- start stmt grp sr0os25 ---------------*/

      /* select unique schedule*/

  set SR1REC empty;
  SR1REC.XWHCD = SR2REC.XWHCD;
  SR1REC.PK1PKSCH = SR2REC.PK1PKSCH;

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* exists*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* doesn't exist*/
      SR8REC.SR8RTN = "1";
      SR8REC.SR8LOC = "SR0OS25";
      exit stack;
    else /* sql error*/
      SR8REC.SR8RTN = "2";
      SR8REC.SR8LOC = "SR0OS25";
      exit stack;
    end
  end


   /* -------------   end stmt grp sr0os25 ---------------*/
end // end SR0OS25

// update schedule header
Function SR0OS30()
   /* ------------- start stmt grp sr0os30 ---------------*/

      /* update schedule*/

  call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* exists*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* doesn't exist*/
      SR8REC.SR8RTN = "1";
      SR8REC.SR8LOC = "SR0OS30";
      exit stack;
    else /* sql error*/
      SR8REC.SR8RTN = "2";
      SR8REC.SR8LOC = "SR0OS30";
      exit stack;
    end
  end


   /* -------------   end stmt grp sr0os30 ---------------*/
end // end SR0OS30

Record SR0OW01 type basicRecord
  10 SR0OWAMT SR0OWAMT ; 
end // end SR0OW01

// item amount
DataItem SR0OWAMT num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

