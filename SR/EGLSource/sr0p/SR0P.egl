package sr0p;
import az.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SR0P ****
// ******************** application sr0p **********************
// *  Set pick status flags on schedules and/or orders in the
// *  ship-rec data base for transmition to the stock-locate
// *  system.
// *
// *  The user may either Pick or De-pick the schedule/order.
// ************************************************************
// * MAINTENANCE HISTORY
// *
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// * 0000 08-28-87 jbc    created
// * 0001 11-16-87 jbc    fix problem with multiple sched pick
// * 0002 04-29-88 mb     expanded subscript sr0pwix1 and wix2
// *                      from 99 to 999, and sr0pwodr occurs
// *                      from 800 to 900 to handle overflow.
// * 0003 10-11-88 mwal   sr#42 placed batch status field on
// *                      map sr0pm320
// * 0004 01-05-89 rhetr  add edit on screen date. must be less
// *                      than dship.vsrhdr01: sr-pick-sched-dt
// * 0004 03-20-89 jwood  added xssegtr logic
// SR#193   03/18/93  HKEMPE  Display MOVERS Upload carrier
//                            code and shipping charge in
//                            SR0PM320 screen
// SR#203   04/01/93  HKEMPE  Add carrier as selection
//                            criteria and display PRO number
// 1H8400   09/30/93  SPOPA   Correct check of FROM application
//                            and handling of fields passed in
//                            CAITEM in initialization.
// 1H0003   01/11/94  HKEMPE  Changed order nbr length to nine
//                            digit in SR0PM220, SR0PM320 and
//                            SR0PW02.
// SR9001   03/01/94  HKEMPE  Generate/Compile to pick up
//                            revised COMMAREA and XWHTBL.
// SR00     07/29/94  HKEMPE  Initialize TA2REC whenever it is
//                            used to call TA0040 to avoid
//                            getting a wrong century.
// ASN/BOL  11/06/97  CBRINE  Add ability to pick/depick at
//                            carton level. Added SR0PM420 map.
// Y2Kfix   03/24/98  dpage   Y2k modifications made to sr0p010
// ASN/BOL  04/23/98  CBRINE  Upd SR1REC.SR1PKAFL any time an
//                            order is picked.
// tblchgs  06/18/98  tdaugh  regen for table changes
// RETROFT  08/04/98  marbuc  Inhibit DCMS orders to not allow
//                            the order to be Pick/Depick.
// k52460  01/24/03 BMAHAL moved '*' to PK-MOVERS-STAT-CD in  
//             order to get correct carton count.
// *********************
Program SR0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZFREC AZFREC; // record
  COMMAREA COMMAREA ; // record
  PWOREC PWOREC; // record
  PWPREC PWPREC; // record
  SQLCA SQLCA; // record
  SR0PW01 SR0PW01; // record
  SR0PW02 SR0PW02; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SRP2REC SRP2REC; // record
  SRP4REC SRP4REC; // record
  SRWREC SRWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record
  VAZORD01 VAZORD01; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use SR0PM.SR0PM020,  // forms
      SR0PM.SR0PM120, 
      SR0PM.SR0PM220, 
      SR0PM.SR0PM320, 
      SR0PM.SR0PM420
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SR0P001: SR0P001();
    goto SR0P002;
    SR0P002: SR0P002();
    goto SR0P002;
  end // end main
end // end SR0P

// * dship.vsrord01 select set
Function SR0P-010()
   /* --------------------- sr0p-010 -----------------------------*/

                /* select set 's2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("S2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ";
    SR0PW02.SR0PW-NBR = " ";
    SR0PW02.SR0PW-SUB-NBR = " ";
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-010";
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* ----------- end of process sr0p-010 ---------------------*/
end // end SR0P-010

// * dship.vsrord01 fetch next
Function SR0P-011()
   /* --------------------- sr0p-011 -----------------------------*/

                /* fetch next set 'n2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("N2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SR0PW01.SR0PW-SR-EOF-FL = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " ";
      SR0PW02.SR0PW-NBR = " ";
      SR0PW02.SR0PW-SUB-NBR = " ";
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-011";
      TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* ----------- end of process sr0p-011 ------------------------*/
end // end SR0P-011

// * dship.vsrord01 close  set
Function SR0P-012()
   /* --------------------- sr0p-012 -----------------------------*/

                 /* close set 'c2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("C2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ";
    SR0PW02.SR0PW-NBR = " ";
    SR0PW02.SR0PW-SUB-NBR = " ";
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-012";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-012 -------------------------*/
end // end SR0P-012

// * dship.vazctn01 select set
Function SR0P-020()
   /* --------------------- sr0p-020 -----------------------------*/

                /* select set 's4' dship.vazctn01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "S6";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-020";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZCTN01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* ----------- end of process sr0p-020 -----------------------*/
end // end SR0P-020

// * dship.vazctn01 fetch next
Function SR0P-021()
   /* --------------------- sr0p-021 -----------------------------*/

                /* fetch next set 'n4' dship.vazctn01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "N6";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-021";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZCTN01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-021 --------------------------*/
end // end SR0P-021

// * dship.vazctn01 close  set
Function SR0P-022()
   /* --------------------- sr0p-022 -----------------------------*/

                 /* close set 'c4' dship.vazctn01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "C6";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-022";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZCTN01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-022 ---------------------------*/
end // end SR0P-022

// * dship.vazord01 select set
Function SR0P-023()
   /* --------------------- sr0p-023 -----------------------------*/

                /* select set 's4' dship.vazord01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "S4";
  call "VAZORD01" (AZFREC, SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-023";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* ----------- end of process sr0p-023 -----------------------*/
end // end SR0P-023

// * dship.vazord01 fetch next
Function SR0P-024()
   /* --------------------- sr0p-024 -----------------------------*/

                /* fetch next set 'n4' dship.vazord01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "N4";
  call "VAZORD01" (AZFREC, SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
  ) /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SR0PW01.SR0PW-AZ-EOF-FL = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZORD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-024";
      TA1REC.TA1LOC = "ACCESSING DB2 VAZORD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* ----------- end of process sr0p-024 --------------------------*/
end // end SR0P-024

// * dship.vazord01 close  set
Function SR0P-025()
   /* --------------------- sr0p-025 -----------------------------*/

                 /* close set 'c4' dship.vazord01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "C4";
  call "VAZORD01" (AZFREC, SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-025";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-025 ---------------------------*/
end // end SR0P-025

// * select unique dship.vazhdr01
Function SR0P-030()
   /* ------------------------- sr0p-030 --------------------------*/

                 /* select unique dship.vazhdr01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "S ";
  call "VAZHDR01" (AZFREC, SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes}; /* select AZ hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    SR0PW01.SR0PW-AZ-HDR-FOUND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SR0PW01.SR0PW-AZ-HDR-FOUND = "N";
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZHDR01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " BOL ";
      SR0PW02.SR0PW-NBR = SR2REC.PK1BLLAD;
      SR0PW02.SR0PW-SUB-NBR = SR2REC.SR2BLLSU;
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-030";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1LOC = "ACCESSING DB2 VAZHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

   /* --------------- end of process sr0p-030 ---------------------*/
end // end SR0P-030

// * update dship.vazhdr01
Function SR0P-031()
   /* ------------------------- sr0p-031 --------------------------*/

                   /* update   dship.vazhdr01*/

   /* ------------------------------------------------------------*/

  VAZHDR01.ZZ-CHNG-DT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  VAZHDR01.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "U ";
  call "VAZHDR01" (AZFREC, SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes}; /* update AZheader*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(211); /* AZ hdr record does not exist*/
      set SR0PM220.SR0PM-SEL[SR0PW-SUB] cursor, bold;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZHDR01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " BOL ";
      SR0PW02.SR0PW-NBR = SR2REC.PK1BLLAD;
      SR0PW02.SR0PW-SUB-NBR = SR2REC.SR2BLLSU;
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-031";
      TA1REC.TA1LOC = "UPDATING DB2 VAZHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* -----------   end of stmt grp sr0p-031  ------------*/
end // end SR0P-031

// * get carton's packing lists
Function SR0P-035()
   /* ---------------------- process sr0p-035 ---------------------*/

   /* get all the packing lists for the carton*/
   /* total up the weight to update VAZCTN01*/
   /* if actual weight is zero, update actual weight with expected*/

   /* ------------------------------------------------------------*/

  set PWPREC empty;
  SR0PW01.SR0PW-CRTN-WT = 0;

  PWPREC.XWHCD = VAZCTN01.XWH-WHSE-CD;
  PWPREC.PK1PKSCH = VAZCTN01.PK-PICK-SCHED-NBR;
  SR0PW01.SR0PW-ORD-ID = VAZCTN01.OP-CUST-ORD-ID;
  PWPREC.OP1PARTN = SR0PW01.SR0PW-ORD-DIGIT[9];
  PWPREC.OP1CUOID = VAZCTN01.OP-CUST-ORD-ID;
  PWPREC.OP1NORID = VAZCTN01.OP-NIKE-ORD-ID;
  PWPREC.PKDNCSQN = VAZCTN01.PK-CRTN-SEQ-NBR;

  SR0P-036(); /* select set PWPREC*/
  SR0P-037(); /* retrieve first packing list*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PWPREC.PK-ACTL-CRTN-WT == 0) /* if actual wt is zero, use expected wt*/
      SR0PW01.SR0PW-CRTN-WT = SR0PW01.SR0PW-CRTN-WT + PWPREC.PK-EXPC-CRTN-WT;
      SR0P-039(); /* update actual wt with expected wt*/
    else
      SR0PW01.SR0PW-CRTN-WT = SR0PW01.SR0PW-CRTN-WT + PWPREC.PK-ACTL-CRTN-WT;
    end

    SR0P-037(); /* retrieve next packing list*/
  end

  SR0P-038(); /* close cursor*/

    /* -----------   end of process sr0p-035  ------------*/
end // end SR0P-035

// * dpick.vsplit01 select set
Function SR0P-036()
   /* --------------------- sr0p-036 -----------------------------*/

                /* select set 's8' dpick.vsplit01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO5760" ("S8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VSPLIT01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-036";
    TA1REC.TA1LOC = "ACCESSING DB2 VSPLIT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* ----------- end of process sr0p-036 ---------------------*/
end // end SR0P-036

// * dpick.vsplit01 fetch next
Function SR0P-037()
   /* --------------------- sr0p-037 -----------------------------*/

                /* fetch next set 'n8' dpick.vsplit01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO5760" ("N8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DOICK";
    TA1REC.TA1TBLVU = "VSPLIT01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-037";
    TA1REC.TA1LOC = "ACCESSING DB2 VSPLIT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-037 ------------------------*/
end // end SR0P-037

// * dpick.vsplit01 close  set
Function SR0P-038()
   /* --------------------- sr0p-038 -----------------------------*/

                 /* close set 'c2' dpick.vsplit01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO5760" ("C8", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VSPLIT01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
    SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-038";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1LOC = "ACCESSING DB2 VSPLIT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

    /* ----------- end of process sr0p-038 -------------------------*/
end // end SR0P-038

// * update dpick.vsplit01
Function SR0P-039()
   /* ------------------------- sr0p-039 --------------------------*/

               /* update dpick.vsplit01*/

   /* ------------------------------------------------------------*/

  PWPREC.PK-ACTL-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT;

  PWPREC.ZZZCHGDT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  PWPREC.ZZZCHGTM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;

  call "IO5760" ("U ", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes}; /* update AZ order*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(246); /* Packing list item not found*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VSPLIT01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1PGMNM = "SR0P-039";
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1LOC = "UPDATING DB2 VSPLIT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* -----------   end of stmt grp sr0p-039  ------------*/
end // end SR0P-039

// * select & upd AZ order
Function SR0P-040()
   /* ----------------- process sr0p-040 --------------------------*/

     /* select & update AZ orders*/

   /* ------------------------------------------------------------*/

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = SR0PM220.XWHCD;
  VAZORD01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
  VAZORD01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
  VAZORD01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
  VAZORD01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];
  SR0P-041(); /* select AZ order for update*/

  if (converseVar.validationMsgNum == 0)
    set VAZCTN01 empty; /* need to get carton weight*/
    VAZCTN01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
    VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
    VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
    VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
    VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
    VAZCTN01.PK-PICK-SCHED-NBR = -1;
    VAZCTN01.PK-CRTN-SEQ-NBR = -1;
    SR0P-056(); /* get sum of wts for all cartons*/
    VAZORD01.AZ-TOT-ORD-CART-WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;
    VAZORD01.AZ-ORD-STAT-CD = SR0PW01.SR0PW-AZORD-STAT-CD;
    SR0P-042(); /* call vazord01 to update*/
  end

  if (converseVar.validationMsgNum == 0)
    SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] = VAZORD01.AZ-ORD-STAT-CD;
  end

   /* ----------------- end of process sr0p-040 ------------------*/
end // end SR0P-040

// * select unique dship.vazord01
Function SR0P-041()
   /* ------------------------- sr0p-041 --------------------------*/

                 /* select unique dship.vazord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "S ";
  call "VAZORD01" (AZFREC, SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes}; /* access AZ order*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(212);
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZORD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-041";
      TA1REC.TA1LOC = "ACCESSING DB2 VAZORD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

   /* --------------- end of process sr0p-041 ---------------------*/
end // end SR0P-041

// * update dship.vazord01
Function SR0P-042()
   /* ------------------------- sr0p-042 --------------------------*/

               /* update dship.vazord01*/

   /* ------------------------------------------------------------*/

  VAZORD01.ZZ-CHNG-DT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  VAZORD01.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "U ";
  call "VAZORD01" (AZFREC, SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes}; /* update AZ order*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(212); /* AZ order does not exist*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZORD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1PGMNM = "SR0P-042";
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1LOC = "UPDATING DB2 VAZORD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* -----------   end of stmt grp sr0p-042  ------------*/
end // end SR0P-042

// * check carton statuses
Function SR0P-050()
   /* ----------------- process sr0p-050 --------------------------*/

   /* check all the cartons for an order*/

   /* ------------------------------------------------------------*/

  set VAZCTN01 empty;
  VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
  VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
  VAZCTN01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
  VAZCTN01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
  VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
  VAZCTN01.PK-MOVERS-STAT-CD = "*";

  SR0P-055(); /* get the count of all the crtns for this*/
                                /* sched/order that haven't been picked -*/
  if (AZFREC.AZF-AZ-CRTN-CNT == 0) /* if all cartons are picked,*/
    SR0P-051(); /* set SR order to picked*/
  end

  if (converseVar.validationMsgNum == 0)
    VAZCTN01.PK-PICK-SCHED-NBR = -1;
    VAZCTN01.OP-CUST-ORD-ID = -1;
    VAZCTN01.OP-NIKE-ORD-ID = -1;
    SR0P-055(); /* get the count of all the crtns for this*/
                                /* order (across sched) that haven't been*/
    if (AZFREC.AZF-AZ-CRTN-CNT == 0) /* picked - if all cartons are picked,*/
      SR0PW01.SR0PW-AZORD-STAT-CD = "RE";
      SR0PW01.SRWTSF2S = SR0PW01.SR0PW-SUB;
      SR0P-040(); /* set AZ order to picked*/
    end
    if (converseVar.validationMsgNum == 0)
      SR0P-070(); /* chk crtns for a BOL, if all picked, upd AZ hdr*/
    end
    XSSRT2U();
  end

  if (converseVar.validationMsgNum == 0)
    SR0P-060(); /* check all orders in temp storage*/
    if (SR0PW01.SR0PW-SR-UPD-PICK-FL == "Y") /* any SRORD updated to picked*/
      SR1REC.SR1PKAFL = "Y"; /* set activity flag on header*/
      SR1REC.SR1PKSDT = SR2REC.SR1PKSDT;
      SR0P180(); /* if they're picked, upd SR header*/
    end
  end

   /* ------------------- end of process sr0p-050 -----------------*/
end // end SR0P-050

// * upd SR order to picked
Function SR0P-051()
   /* ----------------- process sr0p-051 --------------------------*/

   /* set order to picked status*/

   /* ------------------------------------------------------------*/

  SR2REC.XWHCD = SR0PW02.SR0PWWHS;
  SR2REC.PK1PKSCH = SR0PW02.SR0PWSCH;
  SR2REC.OP1CUOID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
  SR2REC.OP1NORID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
  SR2REC.OP1NTMAL = 0;

  SR0P260(); /* select order for update*/

  /* get total weight of cartons for this schedule/order*/
  set VAZCTN01 empty; /* updated*/
  VAZCTN01.XWH-WHSE-CD = SR2REC.XWHCD;
  VAZCTN01.PK-PICK-SCHED-NBR = SR2REC.PK1PKSCH;
  VAZCTN01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VAZCTN01.PK-BOL-SUB-NBR = SR2REC.SR2BLLSU;
  VAZCTN01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCTN01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCTN01.PK-CRTN-SEQ-NBR = -1;
  SR0P-056(); /* get sum of wts for all cartons*/
  SR2REC.PK1WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;

  SR2REC.SR1PKAFL = "Y";
  SR2REC.SR1PKSFL = "Y";

  if (SRP2REC.SRP2-PICK-DT[SR0PW-SUB] == " ")
    SRP2REC.SRP2-PICK-DT[SR0PW-SUB] = SR0PM220.SR0PMDDT;
    SR0PM220.SR0PM-PICK-DT[SR0PW-SUB] = SR0PM220.SR0PMDDT;
    SR2REC.SR1PKSDT = SR0PW01.SR0PW-HOLD-DT; /* use default date*/
  else
    SR0PM220.SR0PM-PICK-DT[SR0PW-SUB] = SRP2REC.SRP2-PICK-DT[SR0PW-SUB];
    SR0PW01.SR0PW-DISP-DT = SRP2REC.SRP2-PICK-DT[SR0PW-SUB];
    SR0PS-001(); /* format pick date into DB2 format*/
    SR2REC.SR1PKSDT = SR0PW01.SR0PW-DB2-DT;
  end

  SR0P165(); /* update order to picked*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SR0PW01.SR0PW-SR-UPD-PICK-FL = "Y"; /* SRORD updated to picked*/
    SRP2REC.SRP2-PICK-ACT-FL[SR0PW-SUB] = "Y"; /* update flags in*/
    SRP2REC.SRP2-PICK-STAT-FL[SR0PW-SUB] = "Y"; /* temp storage*/
    XSSRT2U();

  end

   /* ------------------- end of process sr0p-051 -----------------*/
end // end SR0P-051

// * get carton count
Function SR0P-055()
   /* ------------------------- sr0p-055 --------------------------*/

   /* get the count of all carton for this order/bol that are not*/
   /* picked. If the count is zero, we can update the order as*/
   /* picked.*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "C ";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* get count of crtns*/
  if (SQLCA.VAGen_SQLCODE == 0)
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
    SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-055";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* --------------- end of process sr0p-055 ---------------------*/
end // end SR0P-055

// * get total charges for order
Function SR0P-056()
   /* ------------------------- sr0p-056 --------------------------*/

   /* get the total charges for this order/bol*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "SA";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* get sum of charges*/
  if (SQLCA.VAGen_SQLCODE == 0)
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " BOL ";
    SR0PW02.SR0PW-NBR = SR2REC.PK1BLLAD;
    SR0PW02.SR0PW-SUB-NBR = SR2REC.SR2BLLSU;
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-056";
    TA1REC.TA1LOC = "GETTING SUM VAZCTN01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* --------------- end of process sr0p-056 ---------------------*/
end // end SR0P-056

// * go thru temp storage
Function SR0P-060()
   /* ----------------- process sr0p-060 --------------------------*/

   /* go thru temp storage to see all orders are picked*/

   /* ------------------------------------------------------------*/
  SR0PW01.SR0PW-HOLD-PAGE = SR0PW01.SRWTSF2P;
  SR0PW01.SR0PW-HOLD-LINE = SR0PW01.SRWTSF2S;

  SR0PW01.SRWTSF2P = 1;
  SR0PW01.SR0PW-ALL-PICKED-FL = "Y";
  SR0PW01.SR0PW-AZ-PICKED-FL = "Y";
  SR0PW01.SR0PW-ALL-CHECKED-FL = "N";
  SR0PW01.SR0PW-UPD-TS = "N";

  while (SR0PW01.SRWTSF2P <= SR0PW01.SRWTSF2M
   && SR0PW01.SR0PW-ALL-CHECKED-FL == "N")

    XSSRT2R();

    SR0PW01.SRWTSF2S = 1;

    while (SR0PW01.SRWTSF2S < 11)

      if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "SR")
        if (SR0PW01.SR0PW-PREV-ORD-SRCE == "AZ")
          if (SR0PW01.SR0PW-AZ-PICKED-FL == "Y")
            SR0PW01.SR0PW-SUB1 = SR0PW01.SRWTSF2S;
            SR0PW01.SR0PW-SUB1 = SR0PW01.SR0PW-SUB1 - 1;
            if (SR0PW01.SR0PW-SUB1 == 0) /* order to upd on prev TS page*/
              SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P - 1;
              XSSRT2R(); /* read previous TS page*/
              SR0PW01.SR0PW-SUB1 = 10; /* set sub for last row*/
              SR0P-062(); /* select & upd SRORD record to picked*/
              SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P + 1;
              XSSRT2R(); /* read current TS page, again*/
            else
              SR0P-062(); /* select & upd SRORD record to picked*/
              SR0PW01.SR0PW-UPD-TS = "Y";
            end
          else
            SR0PW01.SR0PW-ALL-PICKED-FL = "N";
            SR0PW01.SR0PW-AZ-PICKED-FL = "Y"; /* re-set flag*/
          end
        end
        SR0PW01.SR0PW-PREV-ORD-SRCE = "SR";
        if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "N"
         && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y")
          /* next sentence*/
        else
          if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "Y"
           && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y")
            /* next sentence*/
          else
            SR0PW01.SR0PW-ALL-PICKED-FL = "N";
          end
        end
      else
        if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "AZ")
          SR0PW01.SR0PW-PREV-ORD-SRCE = "AZ";
          if (SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] == "  ")
            SR0PW01.SR0PW-AZ-PICKED-FL = "N";
          end
        else
          if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "  ")
            if (SR0PW01.SR0PW-PREV-ORD-SRCE == "AZ")
              if (SR0PW01.SR0PW-AZ-PICKED-FL == "Y")
                SR0PW01.SR0PW-SUB1 = SR0PW01.SRWTSF2S;
                SR0PW01.SR0PW-SUB1 = SR0PW01.SR0PW-SUB1 - 1;
                if (SR0PW01.SR0PW-SUB1 == 0) /* order to upd on prev TS page*/
                  SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P - 1;
                  XSSRT2R(); /* read previous TS page*/
                  SR0PW01.SR0PW-SUB1 = 10; /* set sub for last row*/
                  SR0P-062(); /* select & upd SRORD record to picked*/
                  SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P + 1;
                  XSSRT2R(); /* read current TS page, again*/
                else
                  SR0P-062(); /* select & upd SRORD record to picked*/
                  SR0PW01.SR0PW-UPD-TS = "Y";
                end
              else
                SR0PW01.SR0PW-ALL-PICKED-FL = "N";
                SR0PW01.SR0PW-AZ-PICKED-FL = "Y"; /* re-set flag*/
              end
            end
            SR0PW01.SR0PW-PREV-ORD-SRCE = "  ";
            SR0PW01.SR0PW-ALL-CHECKED-FL = "Y";
          end
        end
      end

      SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;

    end

    if (SR0PW01.SR0PW-UPD-TS == "Y")
      XSSRT2U();
      SR0PW01.SR0PW-UPD-TS = "N";
    end

    SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P + 1;
  end

  SR0PW01.SRWTSF2P = SR0PW01.SR0PW-HOLD-PAGE;
  SR0PW01.SRWTSF2S = SR0PW01.SR0PW-HOLD-LINE;

  XSSRT2R(); /* go back to page we started on*/

   /* ------------------- end of process sr0p-060 -----------------*/
end // end SR0P-060

// * update picked SR orders
Function SR0P-062()
   /* ----------------- process sr0p-062 --------------------------*/

     /* update picked SR orders*/

   /* ------------------------------------------------------------*/

  SR2REC.XWHCD = SR0PM220.XWHCD;
  SR2REC.PK1PKSCH = SR0PM220.PK1PKSCH;
  SR2REC.OP1CUOID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB1];
  SR2REC.OP1NORID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB1];
  SR2REC.OP1NTMAL = 0;
  SR0P260(); /* select order for update*/

  /* get total weight of cartons for this schedule/order*/
  set VAZCTN01 empty; /* updated*/
  VAZCTN01.XWH-WHSE-CD = SR2REC.XWHCD;
  VAZCTN01.PK-PICK-SCHED-NBR = SR2REC.PK1PKSCH;
  VAZCTN01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VAZCTN01.PK-BOL-SUB-NBR = SR2REC.SR2BLLSU;
  VAZCTN01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCTN01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCTN01.PK-CRTN-SEQ-NBR = -1;
  SR0P-056(); /* get sum of wts for all cartons*/
  SR2REC.PK1WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;

  SR2REC.SR1PKAFL = "Y";
  SR2REC.SR1PKSFL = "Y";

  if (SRP2REC.SRP2-PICK-DT[SR0PW-SUB1] == " ")
    SRP2REC.SRP2-PICK-DT[SR0PW-SUB1] = SR0PM220.SR0PMDDT;
    SR2REC.SR1PKSDT = SR0PW01.SR0PW-HOLD-DT; /* use default date*/
  else
    SR0PW01.SR0PW-DISP-DT = SRP2REC.SRP2-PICK-DT[SR0PW-SUB1];
    SR0PS-001(); /* format pick date into DB2 format*/
    SR2REC.SR1PKSDT = SR0PW01.SR0PW-DB2-DT;
  end

  SR0P165(); /* call io0800*/

  if (converseVar.validationMsgNum == 0)
    SR0PW01.SR0PW-SR-UPD-PICK-FL = "Y"; /* SRORD updated to picked*/
    if (SRP2REC.SRP2-ORD-SRCE[SR0PW-SUB1] == "SR")
      SRP2REC.SRP2-PICK-ACT-FL[SR0PW-SUB1] = "Y";
      SRP2REC.SRP2-PICK-STAT-FL[SR0PW-SUB1] = "Y";
    end
  end

   /* ------------ end of process sr0p-062 ----------------------*/
end // end SR0P-062

// * read all orders for bol
Function SR0P-065()
   /* ---------------------- process sr0p-065 ---------------------*/

   /* get all the bill of ladings for the order read with a*/
   /* 99 in it's bol sub nbr*/

   /* ------------------------------------------------------------*/

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = SR0PW01.XWHCD;
  VAZORD01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZORD01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  SR0PW01.SR0PW-AZ-EOF-FL = "N";
  SR0PW01.SR0PW-SUB = SR0PW01.SRWTSF2S;

  SR0P-023(); /* select set VAZORD01*/
  SR0P-024(); /* retrieve first order*/

  while (SR0PW01.SR0PW-AZ-EOF-FL == "N")
    SR0P-066();
  end

  SR0P-025(); /* close cursor*/

  SR0PW01.SRWTSF2S = SR0PW01.SR0PW-SUB;

    /* -----------   end of process sr0p-065  ------------*/
end // end SR0P-065

// * build ts with AZ orders
Function SR0P-066()
   /* ---------------------- process sr0p-066 ---------------------*/

   /* get all the bill of ladings for the order read with a*/
   /* 99 in it's bol sub nbr*/

   /* ------------------------------------------------------------*/

  while (SR0PW01.SR0PW-SUB <= 10
   && SR0PW01.SR0PW-AZ-EOF-FL == "N")
    if (VAZORD01.PK-BILL-OF-LADING == SR2REC.PK1BLLAD)
      SR0P-067(); /* get carton count for sched/bol/ord*/
      if (AZFREC.AZF-AZ-CRTN-CNT > 0)
        SRP2REC.SRP2-SEL[SR0PW-SUB] = " ";

        SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB] = VAZORD01.OP-CUST-ORD-ID; /* order nbr*/
        SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB] = VAZORD01.OP-NIKE-ORD-ID; /* nike ord*/
        SRP2REC.SRP2-BOL-NO[SR0PW-SUB] = VAZORD01.PK-BILL-OF-LADING;
                                   /* bill of lading*/
        SRP2REC.SRP2-BOL-SUB[SR0PW-SUB] = VAZORD01.PK-BOL-SUB-NBR;
                                   /* bol sub*/

        set VAZHDR01 empty; /* read AZ hdr for carrier & pro nbr*/
        VAZHDR01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
        VAZHDR01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
        VAZHDR01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
        SR0P-030(); /* select AZ header*/
        if (SR0PW01.SR0PW-AZ-HDR-FOUND == "Y")
          SRP2REC.SRP2-CARR-CD[SR0PW-SUB] = VAZHDR01.TF-CARR-CD;
                                   /* carrier code*/
          SRP2REC.SRP2-PRO-NO[SR0PW-SUB] = VAZHDR01.TF-PRO-NBR;
                                   /* pro number*/
        else
          converseLib.validationFailed(211);
          set SR0PM220.SR0PM-SEL[SR0PW-SUB] cursor, bold;
        end

        set VAZCTN01 empty; /* get total charges for bol/order*/
        VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
        VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
        VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
        VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
        VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
        VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
        VAZCTN01.PK-CRTN-SEQ-NBR = -1;
        SR0P-056(); /* get sum of charges for order*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SRP2REC.SRP2-CHARGES[SR0PW-SUB] = AZFREC.PK-CRTN-CHARGE-AMT;
                                   /* shipping charges*/
        end

        SRP2REC.SRP2-PICK-ACT-FL[SR0PW-SUB] = SR2REC.SR1PKAFL;
                                   /* pick act fl*/
        SRP2REC.SRP2-PICK-STAT-FL[SR0PW-SUB] = SR2REC.SR1PKSFL;
                                   /* pick stat fl*/
        SRP2REC.SRP2-RLV-INV-FL[SR0PW-SUB] = SR2REC.SR2RINVF;
                                   /* rlv inv fl*/
        SRP2REC.SRP2-AZ-ORD-STAT-CD[SR0PW-SUB] = VAZORD01.AZ-ORD-STAT-CD;
        if (VAZORD01.AZ-ORD-STAT-CD == "RE") /* order has been picked*/
          SR0PW01.SR0PW-DB2-DT = VAZORD01.ZZ-CHNG-DT;
          SR0PS-002();
          SRP2REC.SRP2-PICK-DT[SR0PW-SUB] = SR0PW01.SR0PW-DISP-DT;
        end
        SRP2REC.SRP2-ORD-SRCE[SR0PW-SUB] = "AZ"; /* from AZORD record*/

        SR0PW01.SR0PW-SUB = SR0PW01.SR0PW-SUB + 1;
      end
    end
    SR0P-024(); /* retrieve next order*/
  end

  if (SR0PW01.SR0PW-AZ-EOF-FL == "N")
    XSSRT2U(); /* update temp storage*/
    set SRP2REC empty;
    SR0PW01.SR0PW-SUB = 1;
  end

    /* -----------   end of process sr0p-066  ------------*/
end // end SR0P-066

// * get carton count
Function SR0P-067()
   /* ------------------------- sr0p-067 --------------------------*/

   /* get the count of all carton for this sched/bol/order*/
   /* If the count is zero, don't display order on screen*/
   /* picked.*/
   /* ------------------------------------------------------------*/

  set VAZCTN01 empty;
  set AZFREC empty;

  VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
  VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
  VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
  VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
  VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
  VAZCTN01.PK-MOVERS-STAT-CD = "*";

  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "C ";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* get count of crtns*/
  if (SQLCA.VAGen_SQLCODE == 0)
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " ORD ";
    SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
    SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P-067";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    exit stack;
  end

   /* --------------- end of process sr0p-067 ---------------------*/
end // end SR0P-067

// * do picking updates
Function SR0P-070()
   /* ----------------- process sr0p-070 --------------------------*/

   /* check all the cartons for for the bill of lading, if they*/
   /* are all picked, update the AZ header table to 'ready'.*/

   /* ------------------------------------------------------------*/

  set VAZHDR01 empty;
  VAZHDR01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZHDR01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
  VAZHDR01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
  SR0P-030(); /* select AZ header for update*/

  if (SR0PW01.SR0PW-AZ-HDR-FOUND == "N") /* if AZ header not found,*/
    return; /* return to previous process*/
  end

  SR0PW01.SR0PW-UPD-AZHDR-FL = "N";

  set VAZCTN01 empty;
  VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
  VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
  VAZCTN01.OP-CUST-ORD-ID = -1;
  VAZCTN01.OP-NIKE-ORD-ID = -1;
  VAZCTN01.PK-PICK-SCHED-NBR = -1;
  VAZCTN01.PK-MOVERS-STAT-CD = "*";

  SR0P-055(); /* get the count of all the crtns for this BOL*/
                     /* bol that haven't been picked - if all*/
  if (AZFREC.AZF-AZ-CRTN-CNT == 0) /* cartons are picked, upd AZ hdr*/
    VAZHDR01.AZ-ASN-STAT-CD = "RE";
    SR0PW01.SR0PW-UPD-AZHDR-FL = "Y";
  end

  if (SR0PW01.SR0PW-CRTN-WT-CHG-FL == "Y") /* wt of one of the cartons*/
    SR0PW01.SR0PW-UPD-AZHDR-FL = "Y"; /* was updated*/
    set VAZCTN01 empty;
    VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
    VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
    VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
    VAZCTN01.OP-CUST-ORD-ID = -1;
    VAZCTN01.OP-NIKE-ORD-ID = -1;
    VAZCTN01.PK-PICK-SCHED-NBR = -1;
    VAZCTN01.PK-CRTN-SEQ-NBR = -1;
    SR0P-056(); /* get sum of wts for all cartons*/
                                 /* for this BOL/BOL SUB*/
    VAZHDR01.AZ-TOT-SHPMT-WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;
  end

  if (SR0PW01.SR0PW-UPD-AZHDR-FL == "Y")
    if (converseVar.validationMsgNum == 0)
      SR0P-031(); /* set AZ header to ready*/
    end
  end

   /* ------------------- end of process sr0p-070 -----------------*/
end // end SR0P-070

// * select unique dpick.vsplit01
Function SR0P-074()
   /* ------------------------- sr0p-074 --------------------------*/

                 /* select unique dpick.vsplhd01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO5770" ("S ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes}; /* access packing list hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(245); /* packing list header doe not exist*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VSPLHD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P-074";
      TA1REC.TA1LOC = "ACCESSING DB2 VSPLHD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

   /* --------------- end of process sr0p-074 ---------------------*/
end // end SR0P-074

// * update dpick.vsplhd01
Function SR0P-075()
   /* ------------------------- sr0p-075 --------------------------*/

               /* update dpick.vsplhd01*/

   /* ------------------------------------------------------------*/

  PWOREC.ZZZCHGDT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  PWOREC.ZZZCHGTM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;
  call "IO5770" ("U ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes}; /* update packing list hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(245); /* Packing list header does not exist*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VSPLHD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1PGMNM = "SR0P-075";
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1LOC = "UPDATING DB2 VSPLHD01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* -----------   end of stmt grp sr0p-075  ------------*/
end // end SR0P-075

// * read all cartons for order
Function SR0P-080()
   /* ---------------------- process sr0p-080 ---------------------*/

   /* get all the cartons for the order selected on SR0PM220*/
   /* set status to pick or de-pick depending on selection*/

   /* ------------------------------------------------------------*/

  SR0PW01.SR0PW-CRTN-WT-CHG-FL = "N";
  SR0PW01.TS-NIKE-PL-NBR = 0;
  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
  VAZCTN01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
  VAZCTN01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
  VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
  VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];

  SR0P-020(); /* select set vazctn01*/
  SR0P-021(); /* retrieve first carton*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (SR0PW01.TS-NIKE-PL-NBR == 0) /* if packing list hasn't been saved,*/
      SR0PW01.TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR; /* save it*/
    end
    if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "P"
     && VAZCTN01.PK-MOVERS-STAT-CD == "  ")
      if (VAZCTN01.PK-ACTL-CRTN-WT == 0)
        SR0P-035(); /* get crtn wt from packing list*/
        VAZCTN01.PK-ACTL-CRTN-WT = SR0PW01.SR0PW-CRTN-WT;
        SR0PW01.SR0PW-CRTN-WT-CHG-FL = "Y";
      end
      VAZCTN01.PK-MOVERS-STAT-CD = "12";
      SR0P-081(); /* update carton record*/
    end
    if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "D"
     && VAZCTN01.PK-MOVERS-STAT-CD == "12")
      VAZCTN01.PK-MOVERS-STAT-CD = "  ";
      VAZCTN01.PK-ACTL-CRTN-WT = 0;
      SR0PW01.SR0PW-CRTN-WT-CHG-FL = "Y";
      SR0P-081(); /* update carton record*/
    end
    SR0P-021(); /* retrieve next carton*/
  end

  SR0P-022(); /* close cursor*/

    /* -----------   end of process sr0p-080  ------------*/
end // end SR0P-080

// * update dship.vazctn01
Function SR0P-081()
   /* ------------------------- sr0p-081 --------------------------*/

                   /* update dship.vazctn01*/

   /* ------------------------------------------------------------*/

  VAZCTN01.ZZ-CHNG-DT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  VAZCTN01.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "U ";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* update carton rcd*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(210); /* carton record does not exist*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VAZCTN01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1PGMNM = "SR0P-081";
      SR0PW02.SR0PW-LIT3 = " ORD ";
      SR0PW02.SR0PW-NBR = SR0PM220.SR0PM-ORD-NO[SRWTSF2S];
      SR0PW02.SR0PW-SUB-NBR = SR0PM220.SR0PM-ORD-SUB[SRWTSF2S];
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1LOC = "UPDATING DB2 VAZCTN01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      exit stack;
    end
  end

    /* -----------   end of stmt grp sr0p-081  ------------*/
end // end SR0P-081

// application initialization
Function SR0P001()
   /* -----------------  execute process sr0p001  ----------------*/

                    /* application initialization*/

   /* ------------------------------------------------------------*/

  XSENTRY(); /* appl entry security*/

  XSSEGTR(); /* set segmented transaction id*/

  VGVar.handleHardIOErrors = 1; /* return all file errors*/
  converseVar.commitOnConverse = 1; /* commit on every converse*/
  converseVar.segmentedMode = 1; /* force segmented run*/

  set SR0PW01 empty; /* set working records empty*/
  set SR0PW02 empty;
  set SRWREC empty;
  set SR1REC empty;
  set SR2REC empty;
  set TA1REC empty;
  set TA2REC empty;
  set X3CREC empty;

  set SR0PM020 initial; /* clear menu map*/
  set SR0PM120 initial; /* clear pick by schedule map*/
  set SR0PM220 initial; /* clear pick by order map*/
  set SR0PM320 initial; /* clear inquiry map*/
  set SR0PM420 initial; /* clear pick by carton map*/

   /* check for application change;*/
   /* ------------------------------*/
  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* application has changed*/
    SR0PW01.CAITEM = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
    if (COMMAREA.CAFRMSYS == "SR")
      SRWREC.SRWGRP = COMMAREA.CAUSERA; /* restore work record*/
      SR0PW01.XWHCD = SRWREC.SRWXWHCD;
      if (SR0PW01.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
      end
      if (SR0PW01.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
    else
      if (COMMAREA.XWHCD != "  ")
        SRWREC.SRWXWHCD = COMMAREA.XWHCD;
        SR0PW01.XWHCD = COMMAREA.XWHCD;
        if (SR0PW01.XWHCD in XWHTBL.XWHCD)
          SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
        end
        if (SR0PW01.XWHCD in XWHTBL.XWHCD)
          SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
        end
      end
    end
  end

   /* check for fastpath whse ,option, etc*/
   /* -------------------------------------*/
  if (SR0PW01.SR0PWCWH != " ")
    SR0PW01.XWHCD = SR0PWCWH;
  end
  if (SR0PW01.SR0PW-CAITEM-OPT-CHAR is numeric
   && SR0PW01.SR0PW-CAITEM-OPT > 0)
    SR0PW01.SR0PWOPT = SR0PW01.SR0PW-CAITEM-OPT;
  end
  if (SR0PW01.SR0PW-CAITEM-SCHED-CHAR is numeric)
    SR0PW01.PK1PKSCH = SR0PW01.SR0PW-CAITEM-SCHED;
  end
  if (SR0PW01.XWHCD != " ")
    if (SR0PW01.XWHCD in XWHTBL.XWHCD)
      SR0PW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      SR0PW01.XWHABRV = "UNKNOWN";
    else
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SR0PW01.XWHABRV = "WHSE INACTIVE";
      end
    end
  end
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;

  SR0PW01.SR0PWDAT = VGVar.currentShortGregorianDate; /* save current date and format it*/
  if (SR0PW01.SR0PWDTY > 86)
    SR0PW01.SR0PWDTC = 19;
  else
    SR0PW01.SR0PWDTC = 20;
  end

  SR0PW01.ZZZCHGDT = SR0PW01.SR0PWODT;
  SR0PW01.SR0PW-HOLD-DT = SR0PW01.SR0PWODT;
  SR0PW01.SR0PWDYY = SR0PW01.SR0PWDTY;
  SR0PW01.SR0PWDMM = SR0PW01.SR0PWDTM;
  SR0PW01.SR0PWDDD = SR0PW01.SR0PWDTD;

  SR0PW01.SR0PW-NEW-DATA = "Y";

   /* -------------  end process sr0p001  --------------------*/
end // end SR0P001

// set/inq sched/order pick stat.
Function SR0P002()
   /* -----------------  execute process sr0p002  ----------------*/

   /* invoke the process for each selection entered on the menu*/

   /* ------------------------------------------------------------*/

  SR0P003(); /* check for fastpath or pf1/pf4 keys*/

  if (SR0PW01.SR0PWOPT == 0)
    SR0P010(); /* converse the menu*/
  end
                                 /* ; pf1 and pf4 keys*/
  if (SR0PW01.SR0PWOPT == 1)
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y")
      SR0PW01.SR0PWOPT = 0; /* carton level warehouses cannot*/
      converseLib.validationFailed(213); /* pick/depick by schedule*/
    else
      SR0P110();
    end
  else
    if (SR0PW01.SR0PWOPT == 2)
      SR0P210();
    else
      if (SR0PW01.SR0PWOPT == 3)
        SR0P310();
      else
        if (SR0PW01.SR0PWOPT == 4
         && SR0PW01.SR0PW-SUB != 0) /* sub of order selected on SR0PM220*/
          SR0P410();
        else
          SR0PW01.SR0PWOPT = 0;
          converseLib.validationFailed(97); /* invalid option*/
        end
      end
    end
  end

   /* -------------------  end process sr0p002  ------------------*/
end // end SR0P002

// check fastpath and pf1/4 keys
Function SR0P003()
   /* ------------------------- sr0p003 --------------------------*/

                  /* check for pf keys and fastpath*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (SR0PW01.SR0PWFPF == "Y") /* fastpath request*/
      XSEXIT(); /* check security/xfer*/
      SRWREC.SRWMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      SR0PW01.SR0PWFPF = "N";
      return;
    end
    return;
  end

  if (converseVar.eventKey is pf24)
    exit program;
  end

  if (converseVar.eventKey is pf1) /* pf1 - help*/
    XSPF1();
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf4) /* pf4 - return to master menu*/
    XSPF4();
    SRWREC.SRWMSG = COMMAREA.CAMSG; /* security error*/
    return;
  end

  if (SR0PW01.SR0PWMAP != "SR0PM520") /* the rest of the pf keys are only*/
    return;
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SR0A";
    XSEXIT(); /* transfer to ship recon mast menu*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "SR0B";
    XSEXIT(); /* transfer to prepare batch*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "SR0C";
    XSEXIT(); /* transfer to correct order hdr*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "SR0G";
    XSEXIT(); /* transfer to balance batch*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SR0H";
    XSEXIT(); /* transfer to build from order file*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SR0J";
    XSEXIT(); /* transfer to inq order*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "SR0K";
    XSEXIT(); /* transfer to inq by batch*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "SR0L";
    XSEXIT(); /* transfer to correct shipto adrs*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "SR0M";
    XSEXIT(); /* transfer to correct product*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf21)
    COMMAREA.CATOAP = "SR0N";
    XSEXIT(); /* transfer to mtd ship rpt*/
    SRWREC.SRWMSG = COMMAREA.CAMSG;
    return;
  end

  converseLib.validationFailed(12); /* invalid pf key*/

    /* -----------   end of process sr0p003  ------------*/
end // end SR0P003

// init & process map sr0pm920
Function SR0P010()
   /* ----------------------process sr0p010-----------------------*/

               /* init and process map sr0pm020*/

   /* ------------------------------------------------------------*/
   /* --------------y2k out begin-------------------------*/
   /* MOVE EZEDTE TO SR0PW01.SR0PWDAT;*/
   /* --------------y2k out end  -------------------------*/
   /* --------------y2k in begin -------------------------*/
  SR0PW01.SR0PWODT = VGVar.currentGregorianDate;
   /* --------------y2k in  end  -------------------------*/
  SR0PW01.SR0PWDYY = SR0PW01.SR0PWDTY;
  SR0PW01.SR0PWDMM = SR0PW01.SR0PWDTM;
  SR0PW01.SR0PWDDD = SR0PW01.SR0PWDTD;

  SR0PM020.SR0PMDT = VGVar.currentShortGregorianDate; /* system date*/

  SR0PW01.SR0PWMAP = "SR0PM520";

  converseLib.clearScreen();
  set SR0PM020 empty;
  set SR0PM020.SR0PMACT cursor;
  SR0PW01.SR0PWOPT = 0;
  if (SRWREC.SRWMSG != " ")
    SR0PM020.SR0PMMSG = SRWREC.SRWMSG;
  end

   /* ----------------process map sr0pm020------------------------*/
  SR0P020();
   /* ----------------sr0pm020 map conversed----------------------*/

  SR0PM020.VAGen_EZEMSG = " ";
  SR0PM020.SR0PMMSG = " ";

  SR0PW01.SR0PWOPT = SR0PM020.SR0PMACT;

  if (converseVar.eventKey is pfkey
   || converseVar.eventKey is pakey)
    exit stack;
  else
    if (SR0PM020.SR0PMOPT > " " /* fastpath request*/
     && SR0PM020.SR0PMACT > 0) 
      converseLib.validationFailed(114);
      set SR0PM020.SR0PMACT cursor, bold;
      set SR0PM020.SR0PMOPT bold;
    else
      if (SR0PM020.SR0PMOPT > " ") /* fastpath request*/
        if (converseVar.eventKey is enter)
          COMMAREA.CATOAP = SR0PM020.SR0PMOPT;
          COMMAREA.CAITEM = SR0PM020.SR0PMITM;
          SRWREC.SRWXWHCD = COMMAREA.CAITEM;
          COMMAREA.CAUSERA = SRWREC.SRWGRP;
          SR0PW01.SR0PWFPF = "Y"; /* set fastpath flag*/
          exit stack;
        else
          converseLib.validationFailed(113);
        end
      end
    end
  end

   /* -------------------end of process sr0p010-------------------*/
end // end SR0P010

// pick schedule menu map
Function SR0P020()
   /* ---------------process map sr0pm020-------------------------*/
  converse SR0PM020 ;
   /* ---------------map sr0pm020 conversed-----------------------*/
end // end SR0P020

// init & process map sr0pm120
Function SR0P110()
   /* ------------------ execute process sr0p110 -----------------*/

             /* converse screen sr0p120 - pick schedule*/

   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 121) /* update complete*/
    set SR0PM120 empty;
    converseLib.clearScreen();
    set SR0PM120 initial;
    SR0PW02.SR0PWODR = "0";
    SR0PM120.SR0PMDDT = SR0PW01.SR0PWDDT;
    if (SR0PW01.XWHCD != " ")
      SR0PM120.XWHCD = SR0PW01.XWHCD;
      SR0PM120.XWHABRV = SR0PW01.XWHABRV;
      set SR0PM120.SR0PMPIK cursor;
    end
    if (SRWREC.SRWMSG != " ")
      SR0PM120.SR0PMMSG = SRWREC.SRWMSG;
      SRWREC.SRWMSG = " ";
    end
  else
    set SR0PM120 alarm;
  end

   /* -------------------process map sr0pm120--------------------*/
  SR0P120();
   /* -------------------map sr0pm120 conversed------------------*/

  SR0PW01.SR0PWMAP = "SR0PM120";
  SR0PM120.VAGen_EZEMSG = " ";
  SR0PM120.SR0PMMSG = " "; /* clear all message fields*/
  SRWREC.SRWMSG = " ";

  if (converseVar.eventKey is enter)
    SR0P125(); /* enter processing*/
  else
    if (converseVar.eventKey is pakey)
      exit stack;
    else
      if (converseVar.eventKey is pf3 /* exit to menu*/
       || converseVar.eventKey is pf4)
        SR0PW01.SR0PWOPT = 0;
      else
        if (converseVar.eventKey is pf9) /* exit to pick by order*/
          SR0PW01.SR0PW-NEW-DATA = "Y";
          SR0PW01.SR0PWOPT = 2;
        else
          if (converseVar.eventKey is pf10) /* exit to pick status inquiry*/
            SR0PW01.SR0PWOPT = 3;
          end
        end
      end
    end
  end

  exit stack;

   /* -------------  end process sr0p110  --------------------*/
end // end SR0P110

// pick by schedule map
Function SR0P120()
   /* ------------------- process map sr0pm120 -------------------*/
  converse SR0PM120 ;
   /* --------------------map sr0pm120 conversed------------------*/
end // end SR0P120

// * enter processing
Function SR0P125()
   /* ------------------- sr0p125 enter processing ---------------*/

   /* this procedure edits and processes the picking or de-pick*/
   /* of the schedule(s) and date(s) entered.*/

   /* ------------------------------------------------------------*/

   /* 1.  check for fastpath*/
   /* ------------------------*/
  if (SR0PM120.SR0PMOPT != " ")
    COMMAREA.CATOAP = SR0PM120.SR0PMOPT;
    COMMAREA.CAITEM = SR0PM120.SR0PMITM;
    SRWREC.SRWXWHCD = COMMAREA.CAITEM;
    SRWREC.SRWXWHCD = SR0PM120.XWHCD; /* move warehouse and batch*/
    COMMAREA.CAUSERA = SRWREC.SRWGRP; /* in case of transfer.*/
    COMMAREA.CAFROMAP = "SR0P"; /* move in from transaction*/
    SR0PW01.SR0PWFPF = "Y"; /* indicate fastpath request*/
    exit stack;
  end

   /* 2.  EDIT WAREHOUSE CODE*/
   /* ------------------------*/
  if (SR0PM120.XWHCD is modified)
    set SR0PM120.XWHCD normal;
    if (SR0PM120.XWHCD != "  ")
      if (SR0PM120.XWHCD in XWHTBL.XWHCD)
        SR0PM120.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(1); /* non-existent warehouse*/
        set SR0PM120.XWHCD cursor, bold;
        SR0PM120.XWHABRV = " ";
        exit stack;
      else
        if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y")
          SR0PW01.SR0PWOPT = 0; /* carton level warehouses cannot*/
          converseLib.validationFailed(213); /* pick/depick by schedule*/
          exit stack;
        else
          if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
            converseLib.validationFailed(2); /* inactive warehouse*/
            set SR0PM120.XWHCD cursor, bold;
            set SR0PM120.XWHABRV modified, bold;
            exit stack;
          else
            SR0PW01.XWHCD = SR0PM120.XWHCD;
            SR0PW01.XWHABRV = SR0PM120.XWHABRV;
          end
        end
      end
    else
      converseLib.validationFailed(17); /* warehouse code required*/
      set SR0PM120.XWHCD cursor, modified, bold;
      exit stack;
    end
  end

   /* 3. edit action code (pick or depick)*/
   /* -------------------------------------*/
  if (SR0PM120.SR0PMPIK != "P"
   && SR0PM120.SR0PMPIK != "D")
    converseLib.validationFailed(111);
    set SR0PM120.SR0PMPIK bold;
    set SR0PM120.SR0PMPIK cursor;
    exit stack;
  else
    set SR0PM120.SR0PMPIK normal;
  end

   /* there is no need to edit date at this time because it will*/
   /* be edited later as other edits are performed. So lets get*/
   /* on with the schedule edit/update.*/
   /* ------------------------------------------------------------*/
  SR0P130(); /* process schedule(s)*/

   /* ---------------- end of process sr0p125 ------------------*/
end // end SR0P125

// * pick/de-pick schedules
Function SR0P130()
   /* ---------------- sr0p130 process schedules -----------------*/

   /* ------------------------------------------------------------*/

  SR0PW02.SR0PWIX1 = 1;
  while (SR0PW02.SR0PWIX1 <= 16) /* reset pick schedule field*/
    set SR0PM120.PK1PKSCH[SR0PWIX1] initialAttributes;
    SR0PW02.SR0PWIX1 = SR0PW02.SR0PWIX1 + 1;
  end

  SR0PW02.SR0PWDFL = "N"; /* set no data present flag*/
  SR0PW02.SR0PWIX1 = 0; /* init idx to 0*/
  while (SR0PW02.SR0PWIX1 < 16)
    SR0PW02.SR0PWIX1 = SR0PW02.SR0PWIX1 + 1;
    if (SR0PM120.PK1PKSCH[SR0PWIX1] > 0)
      SR0PW02.SR0PWDFL = "Y";
      SR0PW02.SR0PW-LIT1 = "WHS ";
      SR0PW02.SR0PWWHS = SR0PW01.XWHCD;
      SR0PW02.SR0PW-LIT2 = " SCH ";
      SR0PW02.SR0PWSCH = SR0PM120.PK1PKSCH[SR0PWIX1];
      SR0P135(); /* select unique hdr*/
      if (VAGen_SQLCODE == 0
       && converseVar.validationMsgNum == 0)
        SR0P137(); /* check current status*/
        if (converseVar.validationMsgNum == 0)
          if (SR0PM120.SR0PMPIK == "P")
            SR0P140(); /* check pick date*/
            SR0P150();
                                   /* check order for changes and/or*/
                                 /* ;        direct ship status*/
            SR0P175();
                                   /* update to picked srhdr01 table*/
          else
            SR0P185(); /* de-pick schedule*/
          end
        else
          set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
          exit stack;
        end
      else
        set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
        exit stack;
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    if (SR0PW02.SR0PWDFL == "Y")
      converseLib.validationFailed(121); /* update complete*/
    else
      converseLib.validationFailed(18); /* please enter data*/
    end
  else
    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback();
  end

   /* ------------------- end of process sr0p130 -----------------*/
end // end SR0P130

// * select unique dship.vsrhdr01
Function SR0P135()
   /* ------------------------- sr0p135 --------------------------*/

                  /* io0790 access to dship.vsrhdr01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  SR1REC.XWHCD = SR0PW02.SR0PWWHS;
  SR1REC.PK1PKSCH = SR0PW02.SR0PWSCH;

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read schedule hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SR1REC.TF1CARNM == "DCMS")
      converseLib.validationFailed(256); /* DCMS order can not be pick/depick on*/
    else /* GOAL*/
      if (SR1REC.SR1BTST == "R"
       || SR1REC.SR1BTST == "B")
        converseLib.validationFailed(135); /* schedule already 'b' or 'r', can not*/
      end /* pick or depick*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(38); /* batch hdr record does not exist*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRHDR01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P135";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1LOC = "READING DB2 VSRHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      converseLib.validationFailed(16); /* pick schedule not on file*/
    end
  end

    /* -----------   end sr0p135 -------------------------*/
end // end SR0P135

// * edit current status of sched
Function SR0P137()
   /* ----------------beginning of proc sr0p137-------------------*/
      /* check the current status of record - if status matches*/
      /* the status we are trying to set set ezemno and exit*/
   /* ------------------------------------------------------------*/

  if (SR0PM120.SR0PMPIK == "P")
    if (SR1REC.SR1PKSFL == "Y")
      converseLib.validationFailed(120); /* schedule already picked*/
      set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
    end
  else
    if (SR0PM120.SR0PMPIK == "D")
      if (SR1REC.SR1PKSFL == "N"
       && SR1REC.SR1PKAFL == "Y")
        converseLib.validationFailed(122); /* schedule already depicked*/
        set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
      else
        if (SR1REC.SR1PKSFL == "N"
         && SR1REC.SR1PKAFL == "N")
          converseLib.validationFailed(123); /* sch never picked can't be depicked*/
          set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
        end
      end
    end
  end
end // end SR0P137

// * check optional pick date
Function SR0P140()
   /* ------------------ process sr0p140 -------------------------*/

    /* check validity of any dates entered on screen sr0pm120*/

   /* ------------------------------------------------------------*/

  set TA2REC empty;

  if (SR0PM120.SR0PMPDT[SR0PWIX1] > 0)
    TA2REC.TA2GRGA = SR0PM120.SR0PMPDT[SR0PWIX1];
    set SR0PM120.SR0PMPDT[SR0PWIX1] cursor, bold;
  else
    TA2REC.TA2GRGA = SR0PM120.SR0PMDDT;
    set SR0PM120.SR0PMDDT cursor, bold;
  end

  SR0P145(); /* call to ta0040*/
  SR0P147(); /* check against sr-pick-sched-dt*/
  if (converseVar.validationMsgNum != 0)
    converseLib.validationFailed(117); /* invalid date*/
    return;
  else
    set SR0PM120.SR0PMPDT[SR0PWIX1] normal;
    set SR0PM120.SR0PMDDT normal;
  end

   /* ---------------- end of process sr0p140 -----------------*/
end // end SR0P140

// * ta0040 date validation
Function SR0P145()
   /* ------------------------- sr0p145 --------------------------*/

                 /* validate input date and translate to*/
                        /* ccyymmdd format*/

   /* ------------------------------------------------------------*/

  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(115);
    exit stack;
  end

    /* -----------   end of sr0p145 ----------------------*/
end // end SR0P145

// * check for sr-pick-sched-dt
Function SR0P147()
   /* ------------------ process sr0p147 -------------------------*/

    /* edit either the default date or any date entered online.*/
    /* date must be less than dship.vsrhdr01's sr-pick-sched-dt.*/

   /* ------------------------------------------------------------*/

  if (SR0PM120.SR0PMPDT[SR0PWIX1] > 0)
    SR0PWUDT = SR0PM120.SR0PMPDT[SR0PWIX1];
  else
    SR0PWUDT = SR0PM120.SR0PMDDT;
  end

  move SR0PWUMM to SR0PWFMM withV60Compat;
  move SR0PWUDD to SR0PWFDD withV60Compat;
  move SR0PWUYY to SR0PWFYY withV60Compat;

  if (SR0PWUYY > 80)
    SR0PWFCC = 19;
  else
    SR0PWFCC = 20;
  end

  if (SR0PWFDT < SR1PKDT)
    if (SR0PM120.SR0PMPDT[SR0PWIX1] > 0)
      set SR0PM120.SR0PMPDT[SR0PWIX1] cursor, bold;
    else
      set SR0PM120.SR0PMDDT cursor, bold;
    end
    converseLib.validationFailed(161); /* display 'date must be >=*/
                                   /* pick-sched-dt'*/
    exit stack;
  end

   /* ------------------- end of process sr0p147 -----------------*/
end // end SR0P147

// * pick/check schd active ords
Function SR0P150()
   /* ---------------------- process sr0p150 ---------------------*/

   /* ------------------------------------------------------------*/
  SR2REC.XWHCD = SR0PW01.XWHCD;
  SR2REC.PK1PKSCH = SR0PM120.PK1PKSCH[SR0PWIX1];
  SR2REC.OP1CUOID = -1;
  SR2REC.OP1NORID = -1;
  SR2REC.OP1NTMAL = -1;
  SR0P155(); /* select set vsrord01*/
  SR0P160(); /* retrive first order*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(38); /* orders not found for schedule*/
    set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
    exit stack;
  end

   /* checks the first record in the set for a direct ship status*/

  if (SR2REC.SR2RINVF != "Y")
    set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
    converseLib.validationFailed(119); /* direct ship not pickable*/
    SR0P170(); /* close cursor*/
    exit stack;
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    if (SR2REC.SR1PKAFL == "Y" /* reverse de-pick of order as*/
     && SR2REC.SR1PKSFL == "N") /* entire schedule has been picked*/
      SR2REC.SR1PKSFL = "Y";
      SR2REC.SR1PKAFL = "N";
      SR0P165(); /* update srord01*/
    end
    if (SR2REC.SR1PKAFL == "Y" /* turn off exclude as sched picked*/
     && SR2REC.SR1PKSFL == "X")
      SR2REC.SR1PKSFL = "N";
      SR2REC.SR1PKAFL = "N";
      SR0P165(); /* update srord01*/
    end
    SR0P160(); /* retrive next order*/
  end

  SR0P170(); /* close cursor*/

  return;

    /* -----------   end of process sr0p150  ------------*/

end // end SR0P150

// * dship.vsrord01 select set
Function SR0P155()
   /* ------------------------- sr0p155 --------------------------*/

                /* select set 's2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("S2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SR0PW02.SR0PW800;
    TA1REC.TA1PGMNM = "SR0P155";
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

    /* -----------   end of process sr0p155  ------------*/
end // end SR0P155

// * dship.vsrord01 fetch next
Function SR0P160()
   /* ------------------------- sr0p160 --------------------------*/

                /* fetch next set 'n2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("N2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = "              ";
    TA1REC.TA1PGMNM = "SR0P160";
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

    /* -----------   end of stmt grp sr0p160  ------------*/
end // end SR0P160

// * update dship.vsrord01
Function SR0P165()
   /* ------------------------- sr0p165 --------------------------*/

                   /* update   dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SR2REC.ZZZCHGDT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  SR2REC.ZZZCHGTM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* update order hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(38); /* batch hdr record does not exist*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1PGMNM = "SR0P165";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1LOC = "UPDATING DB2 VSRHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end

    /* -----------   end of stmt grp sr0p165  ------------*/
end // end SR0P165

// * dship.vsrord01 close  set
Function SR0P170()
   /* ------------------------- sr0p170 --------------------------*/

                 /* close set 'c2' dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("C2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = "              ";
    TA1REC.TA1PGMNM = "SR0P170";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

    /* -----------   end of sr0p170 ----------------------*/
end // end SR0P170

// * update schedule to picked
Function SR0P175()
   /* --------------------- sr0p175 ------------------------------*/

                 /* update schedule header*/

   /* ------------------------------------------------------------*/

                     /* edit date fields*/
                     /* ----------------*/
  set TA2REC empty;

  if (SR0PM120.SR0PMPDT[SR0PWIX1] > 0)
    TA2REC.TA2GRGA = SR0PM120.SR0PMPDT[SR0PWIX1];
    set SR0PM120.SR0PMPDT[SR0PWIX1] cursor, bold;
    SR0P145(); /* call to ta0040*/
    SR0P147(); /* check against sr-pick-sched-dt*/
    set SR0PM120.SR0PMPDT[SR0PWIX1] normal;
    set SR0PM120.SR0PMDDT normal;
  else
    TA2REC.TA2GRGA = SR0PM120.SR0PMDDT;
    set SR0PM120.SR0PMDDT cursor, bold;
    SR0P145(); /* call to ta0040*/
    set SR0PM120.SR0PMPDT[SR0PWIX1] normal;
    set SR0PM120.SR0PMDDT normal;
  end

                     /* process updates*/
   /* ------------------------------------------------------------*/
  SR1REC.SR1PKSDT = TA2REC.TA2GRGGN;
  SR1REC.SR1PKSFL = "Y";
  SR1REC.SR1PKAFL = "Y";
  SR0P180();

  return;
   /* ------------------- end of process sr0p175 -----------------*/
end // end SR0P175

// * update dship.vsrhdr01
Function SR0P180()
   /* ------------------------- sr0p180 --------------------------*/

                  /* IO0790 'u ' update dship.vsrhdr01*/

   /* ------------------------------------------------------------*/

  SR1REC.ZZZCHGDT = SR0PW01.ZZZCHGDT;

  X3CREC.X3CTIME = VGVar.currentFormattedTime;
  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;
  SR1REC.ZZZCHGTM = X3CREC.X3CCURST;

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* update schedule hdr*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(38); /* batch hdr record does not exist*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRHDR01";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
      TA1REC.TA1PGMNM = "SR0P401";
      TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
      TA1REC.TA1LOC = "UPDATING DB2 VSRHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end

    /* -----------   end of stmt grp sr0p180  ------------*/

end // end SR0P180

// * de-pick schedule logic
Function SR0P185()
   /* ---------------- sr0p185 de-pick schedules -----------------*/

   /* ------------------------------------------------------------*/
  SR2REC.XWHCD = SR0PW01.XWHCD;
  SR2REC.PK1PKSCH = SR0PM120.PK1PKSCH[SR0PWIX1];
  SR2REC.OP1CUOID = -1;
  SR2REC.OP1NORID = -1;
  SR2REC.OP1NTMAL = -1;
  SR0P155(); /* select set vsrord01*/
  SR0P160(); /* retrive first order*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(38); /* orders not found for schedule*/
    set SR0PM120.PK1PKSCH[SR0PWIX1] bold;
    exit stack;
  end

   /* this check is performed only when sr1pkafl and sr1pksfl*/
   /* equals 'y'.  checks the first record in the set for a*/
   /* direct ship status.*/

  if (SR2REC.SR2RINVF != "Y") /* check for direct shipments*/
    set SR0PM120.PK1PKSCH[SR0PWIX1] cursor, bold;
    converseLib.validationFailed(119); /* direct ship's can not be picked or depicked*/
    SR0P170(); /* close cursor*/
    exit stack;
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    if (SR2REC.SR1PKAFL == "Y")
      if (SR2REC.SR1PKSFL == "X"
       || SR2REC.SR1PKSFL == "Y")
        SR2REC.SR1PKSFL = "N";
        SR2REC.SR1PKAFL = "N";
        SR2REC.SR1PKSDT = 0;
        SR2REC.SR1SHPDT = 0;
        SR0P165();
      end
    else
      if (SR2REC.SR1PKSFL == "Y")
        SR2REC.SR1PKSFL = "N";
        SR2REC.SR1PKAFL = "Y";
        SR2REC.SR1PKSDT = 0;
        SR2REC.SR1SHPDT = 0;
        SR0P165();
      end
    end
    SR0P160(); /* retrieve next order*/
  end

  SR0P170(); /* close cursor*/

  SR1REC.SR1PKSFL = "N";
  SR1REC.SR1PKAFL = "Y";
  SR1REC.SR1SHPDT = 0;
  SR1REC.SR1PKSDT = 0;
  SR1REC.SR1BTST = "E";
  SR0P180(); /* update schedule hdr*/

  return;

    /* -----------   end of process sr0p185  ------------*/

end // end SR0P185

// init & process map sr0pm220
Function SR0P210()

    /* -------------  execute process sr0p210  --------------*/

  if (SR0PW01.SR0PW-NEW-DATA == "Y")
    SR0PW01.SR0PW-NEW-DATA = "N";
    converseLib.clearScreen();
    set SR0PM220 initial;
    set SR0PW02 empty;
    set SR2REC empty;
    XSSRT2P();
    SR0PW02.SR0PWODR = "0";
    SR0PM220.SRWTSF2P = SR0PW01.SRWTSF2P;
    SR0PM220.SRWTSF2M = SR0PW01.SRWTSF2M;
    SR0PM220.SR0PMDDT = SR0PW01.SR0PWDDT;
    SR0PM220.SR0PMDT = VGVar.currentShortGregorianDate; /* system date*/
    if (SR0PW01.XWHCD != " ")
      SR0PM220.XWHCD = SR0PW01.XWHCD;
      SR0PM220.XWHABRV = SR0PW01.XWHABRV;
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PM220.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
      set SR0PM220.PK1PKSCH cursor;
    end
    SR0PS-212(); /* protect blank array*/
    converseLib.validationFailed(208);
  else
    if (converseVar.validationMsgNum == 0)
      SR0P270();
    end
  end

  if (SRWREC.SRWMSG != " ")
    SR0PM220.SR0PMMSG = SRWREC.SRWMSG;
    SRWREC.SRWMSG = " ";
  end

   /* --------------------process map sr0pm215--------------------*/
  SR0P215();
   /* --------------------map sr0pm215 conversed------------------*/

  if (SR0PM220.SR0PM-ORD-NO[1] == 0)
    SR0PS-212(); /* re-set attributes for blank array*/
  else
    SR0PS-271(); /* re-set attributes*/
  end

  SR0PW01.SR0PWMAP = "SR0PM220"; /* set map name for errors*/
  SR0PM220.SR0PMMSG = " "; /* clear all message fields*/
  SR0PM220.VAGen_EZEMSG = " ";
  SRWREC.SRWMSG = " ";

  if (converseVar.eventKey is enter)
    SR0P220();
  else
    if (converseVar.eventKey is pakey)
      exit stack;
    else
      SR0PS-211(); /* edit pf keys*/
    end
  end

  exit stack;

   /* -------------  end process sr0p210  --------------------*/
end // end SR0P210

// pick by order map
Function SR0P215()
   /* --------------------process map sr0pm215--------------------*/
  converse SR0PM220 ;
   /* --------------------map sr0pm215 conversed------------------*/
end // end SR0P215

// * enter processing
Function SR0P220()
   /* ------------------- sr0p220 enter processing ---------------*/

  if (SR0PM220.SR0PMOPT != " ")
    COMMAREA.CATOAP = SR0PM220.SR0PMOPT;
    COMMAREA.CAITEM = SR0PM220.SR0PMITM;
    SRWREC.SRWXWHCD = COMMAREA.CAITEM;
    SRWREC.SRWXWHCD = SR0PM220.XWHCD; /* move warehouse and batch*/
    COMMAREA.CAUSERA = SRWREC.SRWGRP; /* in case of transfer.*/
    COMMAREA.CAFROMAP = "SR0P"; /* move in from transaction*/
    SR0PW01.SR0PWFPF = "Y"; /* indicate fastpath request*/
    exit stack;
  end

  set SR0PM220.SRWTSF2P initialAttributes;
  if (SR0PM220.SRWTSF2P != SR0PW01.SRWTSF2P)
    if (SR0PM220.SRWTSF2P < 1 /* page must be within valid range*/
     || SR0PM220.SRWTSF2P > SR0PW01.SRWTSF2M)
      SR0PW01.SRWERRFL = "Y"; /* set error*/
      converseLib.validationFailed(206);
                                   /* page number must be between 1 and max*/
      set SR0PM220.SRWTSF2P cursor, bold;
      exit stack;
    else
      SR0PW01.SRWTSF2P = SR0PM220.SRWTSF2P;
      XSSRT2R(); /* read temp storage*/
      SR0P270(); /* build map*/
      exit stack;
    end
  end

  SR0P225(); /* edit map*/

  exit stack;
    /* -----------   end of process sr0p220  ------------*/
end // end SR0P220

// * edit map
Function SR0P225()
   /* ------------------- sr0p225 edit map -----------------------*/

  SR0PW01.SRWERRFL = "N";
  SR0PW01.SR0PW-FIRST-SEL = " ";

  if (SR0PM220.XWHCD is modified)
    set SR0PM220.XWHCD initialAttributes;
    if (SR0PM220.XWHCD != " ")
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PM220.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
      end
      if (SR0PM220.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        SR0PW01.SRWERRFL = "Y";
        converseLib.validationFailed(1); /* non-existent warehouse*/
        set SR0PM220.XWHCD cursor, bold;
        SR0PM220.XWHABRV = " ";
        return;
      else
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          SR0PW01.SRWERRFL = "Y";
          converseLib.validationFailed(2); /* inactive warehouse*/
          set SR0PM220.XWHCD cursor, bold;
          set SR0PM220.XWHABRV modified, bold;
          return;
        else
          SR0PW01.XWHCD = SR0PM220.XWHCD;
          SR0PW01.XWHABRV = SR0PM220.XWHABRV;
        end
      end
    else
      SR0PW01.SRWERRFL = "Y";
      converseLib.validationFailed(17); /* warehouse code required*/
      set SR0PM220.XWHCD cursor, bold;
      return;
    end
  end

  if (SR0PM220.SR0PMDDT is modified)
    set TA2REC empty;
    TA2REC.TA2GRGA = SR0PM220.SR0PMDDT;
    set SR0PM220.SR0PMDDT initialAttributes;
    SR0P227();
    if (SR0PW01.SRWERRFL == "N")
      SR0PW01.SR0PWUDT = SR0PM220.SR0PMDDT;
      SR0PS-283();
    end
    if (converseVar.validationMsgNum == 0)
      SR0PW01.SR0PWDDT = SR0PM220.SR0PMDDT;
    else
      set SR0PM220.SR0PMDDT cursor, bold;
      return;
    end
  end

  set SR0PM220.PK1PKSCH initialAttributes;
  if (SR0PM220.PK1PKSCH > 0)
    SR0PW02.SR0PW-LIT1 = "WHS ";
    SR0PW02.SR0PWWHS = SR0PM220.XWHCD;
    SR0PW02.SR0PW-LIT2 = " SCH ";
    SR0PW02.SR0PWSCH = SR0PM220.PK1PKSCH;
    converseLib.validationFailed(0);
    SR0P135(); /* validate schedule*/
    if (converseVar.validationMsgNum != 0)
      set SR0PM220.PK1PKSCH bold;
      set SR0PM220.PK1PKSCH cursor;
      return;
    end
  else
    SR0PW01.SRWERRFL = "Y";
    converseLib.validationFailed(14); /* schedule required*/
    set SR0PM220.PK1PKSCH bold;
    set SR0PM220.PK1PKSCH cursor;
    return;
  end

  if (SR0PM220.XWHCD is modified /* if either the warehouse or the*/
   || SR0PM220.PK1PKSCH is modified) /* schedule changed, we need to get*/
                                  /* the orders for the map*/
    XSSRT2P(); /* purge temp storage*/
    SR0P250();
    SR0PM220.SRWTSF2P = SR0PW01.SRWTSF2P;
    SR0PM220.SRWTSF2M = SR0PW01.SRWTSF2M;
    SR0PW01.SRWTSF2P = 1; /* want first page of temp storage*/
    XSSRT2R(); /* read temp storage*/
    SR0P270(); /* build map array*/
    return;
  end

     /* we need to save the first option value to do edits against -*/
     /* (all options must be the same and make sure that correct*/
     /* (option(s) are entered for the pf-key pressed)*/

  if (SR0PW01.SR0PW-FIRST-SEL == " ")
    SR0PW01.SRWTSF2S = 1; /* init subscript*/

    while (SR0PW01.SRWTSF2S < 11) /* find first option selected*/
      if (SR0PM220.SR0PM-SEL[SRWTSF2S] != " ")
        if (SR0PW01.SR0PW-FIRST-SEL == " ")
          SR0PW01.SR0PW-FIRST-SEL = SR0PM220.SR0PM-SEL[SRWTSF2S];
          SR0PW01.SR0PW-SUB = SR0PW01.SRWTSF2S;
        end
      end
      SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
    end
  end

   /* edit all the options and dates entered*/

  SR0PW01.SRWTSF2S = 10; /* init subscript*/

  while (SR0PW01.SRWTSF2S >= 1) /* process all 10 rows*/
    SR0P280(); /* edit map*/
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S - 1;
  end

  if (SR0PW01.SRWERRFL == "Y") /* have user correct selections*/
    return; /* before editting order flags*/
  end

   /* edit all the orders selected to be picked or de-picked*/

  SR0PW01.SRWTSF2S = 10; /* init subscript*/

  while (SR0PW01.SRWTSF2S >= 1) /* process all 10 rows*/
    SR0PS-285(); /* edit order flags*/
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S - 1;
  end

  if (SR0PW01.SRWERRFL == "N")
    SR0PS-226(); /* update temp storage*/
    if (SR0PW01.SR0PW-FIRST-SEL == "S")
      converseLib.validationFailed(209); /* no errors - press pf5 to see cartons*/
    else
      if (SR0PW01.SR0PW-FIRST-SEL != " ")
        converseLib.validationFailed(207); /* no errors - press pf12 to update*/
      end
    end
  end

    /* -----------   end of process sr0p225  ------------*/
end // end SR0P225

// * ta0040 date validation
Function SR0P227()
   /* ------------------------- sr0p227 --------------------------*/

                 /* validate input date and translate to*/
                        /* ccyymmdd format*/

   /* ------------------------------------------------------------*/

  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    converseLib.validationFailed(115);
    SR0PW01.SRWERRFL = "Y";
  end

    /* -----------   end of sr0p227 ----------------------*/

end // end SR0P227

// * upd all picked orders in ts
Function SR0P230()
   /* ---------------update picked orders -----------------------*/

  SR0PW01.SR0PW-DISP-DT = SR0PM220.SR0PMDDT;
  SR0PS-001(); /* format date into DB2 format*/
  SR0PW01.SR0PW-HOLD-DT = SR0PW01.SR0PW-DB2-DT;

  SR0PW01.SR0PW-SR-UPD-PICK-FL = "N"; /* initialize flag*/
  set SR2REC empty;
  converseLib.validationFailed(0);

  set SR2REC empty;
  SR0PW01.SRWTSF2S = 1; /* start subscript*/

  while (SR0PW01.SRWTSF2S < 11)
    if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "P")
      SR0P235();
    end
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
  end

   /* For carton level warehouses:*/
   /* - check if all cartons for a BOL are picked*/
   /* - if they are, update AZ header status to 'ready'*/
   /* For all warehouses:*/
   /* - check if all orders for a schedule are picked*/
   /* -   if they are, update SR header top picked*/

  if (converseVar.validationMsgNum == 0)
    XSSRT2U(); /* update ts*/
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y") /* crtn lvl whs*/
      SR0P-070(); /* update AZ schedule hdr*/
    end
  end

  if (converseVar.validationMsgNum == 0)
    SR0P-060(); /* check all orders in temp storage*/
    if (SR0PW01.SR0PW-SR-UPD-PICK-FL == "Y") /* if any orders picked,*/
      SR1REC.SR1PKAFL = "Y"; /* set activity flag on header*/
      SR0P180(); /* upd SR header*/
    end
  end

   /* if ezemno is eq to zero all is ok otherwise roll back*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    XSSRT2U(); /* update temp storage*/
    SR0P270(); /* rebuild map*/
    converseLib.validationFailed(121); /* update complete*/
  else
    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback();
  end

   /* ------------------- end of process sr0p230 -----------------*/
end // end SR0P230

// * update picked orders
Function SR0P235()
   /* ----------------- process sr0p235 --------------------------*/

   /* If order was read from SRORD*/
   /* - update SR order record*/
   /* (If order was read from AZORD, the updating to SRORD will*/
   /* take place in SR0P-060 after all the AZ orders have been*/
   /* updated and checked)*/
   /* For carton level warehouses:*/
   /* -  update all AZ carton records for that order*/
   /* to picked ('12')*/
   /* -  check the cartons for that order (across schedules)*/
   /* -  if they are all picked, update AZ order to 'ready'*/
   /* - update PK-ACTL-CRTN-WT on packing list item*/

   /* ------------------------------------------------------------*/

  if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "SR") /* came from SRORD*/
    SR0PW01.SR0PW-SUB1 = SR0PW01.SRWTSF2S;
    SR0P-062(); /* select & upd SRORD to picked*/
  end

  if (converseVar.validationMsgNum == 0)
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y") /* crtn lvl whs*/
      SR0P-080(); /* call vazctn01 to upd all crtns*/
      set VAZCTN01 empty;
      VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
      VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
      VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];
      VAZCTN01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      VAZCTN01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
      VAZCTN01.PK-PICK-SCHED-NBR = -1;
      SR0PW01.SR0PW-UPD-AZORD-FL = "N";
      VAZCTN01.PK-MOVERS-STAT-CD = "*";

      SR0P-055(); /* get the count of all the crtns for this*/
                              /* order that haven't been picked*/
      if (AZFREC.AZF-AZ-CRTN-CNT == 0) /* cartons are picked,*/
        SR0PW01.SR0PW-AZORD-STAT-CD = "RE";
        SR0PW01.SR0PW-UPD-AZORD-FL = "Y";
      end

      if (SR0PW01.SR0PW-CRTN-WT-CHG-FL == "Y") /* wt of one of the ctns was*/
        SR0PW01.SR0PW-UPD-AZORD-FL = "Y"; /* updated*/
      end

      if (SR0PW01.SR0PW-UPD-AZORD-FL == "Y")
        SR0P-040(); /* select & update AZ order*/
        if (converseVar.validationMsgNum == 0)
          set PWOREC empty;
          PWOREC.XWHCD = SR0PW02.SR0PWWHS;
          PWOREC.TSIPLNBR = SR0PW01.TS-NIKE-PL-NBR;
          SR0PW01.SR0PW-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
          PWOREC.OP1PARTN = SR0PW01.SR0PW-ORD-DIGIT[9];
          PWOREC.OP1CUOID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
          PWOREC.OP1NORID = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
          SR0P-074(); /* select dpick.vsplhdr01*/
          if (converseVar.validationMsgNum == 0)
            PWOREC.PK-ACTL-TOT-PL-WT = PWOREC.PK-EXPC-TOT-PL-WT;
            SR0P-075(); /* update dpick.vsplhdr01*/
          end
        end
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    SRP2REC.SRP2-SEL[SRWTSF2S] = " ";
    SR0PM220.SR0PM-SEL[SRWTSF2S] = " ";
  end

   /* ------------------- end of process sr0p235 -----------------*/
end // end SR0P235

// * edit/update de-picked orders
Function SR0P240()
   /* ----------------- process sr0p240 ----------------------*/

  set SR2REC empty;
  converseLib.validationFailed(0);
  SR0PW01.SRWTSF2S = 1; /* start subscript*/

  while (SR0PW01.SRWTSF2S < 11)
    if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "D")
      SR0P245();
    end
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
  end

  if (converseVar.validationMsgNum == 0)
    XSSRT2U(); /* update temp storage*/
    SR0P270(); /* rebuild map*/
    converseLib.validationFailed(121); /* update complete*/
  else
    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback();
  end

   /* ---------------- end of process sr0p240 ---------------------*/
end // end SR0P240

// * update de-picked orders
Function SR0P245()
   /* ----------------- process sr0p245 --------------------------*/

   /* For all warehouses:*/
   /* - update SR order record*/
   /* - update SR header record*/
   /* For carton level warehouses:*/
   /* - update AZ order record to 'not ready'*/
   /* - update AZ carton records to de-picked*/
   /* - update AZ header record as 'not ready'*/

   /* ------------------------------------------------------------*/

  SR2REC.XWHCD = SR0PM220.XWHCD;
  SR2REC.PK1PKSCH = SR0PM220.PK1PKSCH;
  SR2REC.OP1CUOID = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
  SR2REC.OP1NORID = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];
  SR2REC.OP1NTMAL = 0;
  SR0P260(); /* select order for update*/

  /* get total weight of cartons for this schedule/order*/
  set VAZCTN01 empty; /* updated*/
  VAZCTN01.XWH-WHSE-CD = SR2REC.XWHCD;
  VAZCTN01.PK-PICK-SCHED-NBR = SR2REC.PK1PKSCH;
  VAZCTN01.PK-BILL-OF-LADING = SR2REC.PK1BLLAD;
  VAZCTN01.PK-BOL-SUB-NBR = SR2REC.SR2BLLSU;
  VAZCTN01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCTN01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCTN01.PK-CRTN-SEQ-NBR = -1;
  SR0P-056(); /* get sum of wts for all cartons*/
  SR2REC.PK1WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;

  SR0P246(); /* set flags*/
  SRP2REC.SRP2-PICK-DT[SRWTSF2S] = " ";

  SR0P165(); /* call io0800*/

  if (converseVar.validationMsgNum == 0)
    SR0PW01.SR0PW-SR-UPD-PICK-FL = "Y"; /* SRORD updated to picked*/
    SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] = SR2REC.SR1PKAFL;
    SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] = SR2REC.SR1PKSFL;
    SR1REC.SR1PKSFL = "N";
    SR1REC.SR1PKSDT = 0;
    SR0P180(); /* update schedule hdr*/
  end

   /* the following code is only for carton level warehouses*/

  if (converseVar.validationMsgNum == 0)
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y")
                                   /* /crtn lvl whse*/
      SR0P-080(); /* call vazctn01 to upd all crtns*/
      if (converseVar.validationMsgNum == 0)
        SR0PW01.SR0PW-AZORD-STAT-CD = " ";
        SR0P-040(); /* select & upd AZ order*/
        if (VAGen_SQLCODE == 0)
          set VAZHDR01 empty;
          VAZHDR01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
          VAZHDR01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
          VAZHDR01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];
          SR0PW01.SR0PW-SUB = SR0PW01.SRWTSF2S;
          SR0P-030(); /* select AZ header*/

          if (SR0PW01.SR0PW-AZ-HDR-FOUND == "Y")
            if (SR0PW01.SR0PW-CRTN-WT-CHG-FL == "Y") /* wt of one of the ctns*/
              set VAZCTN01 empty; /* was updated*/
              VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
              VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
              VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];
              VAZCTN01.OP-CUST-ORD-ID = -1;
              VAZCTN01.OP-NIKE-ORD-ID = -1;
              VAZCTN01.PK-PICK-SCHED-NBR = -1;
              VAZCTN01.PK-CRTN-SEQ-NBR = -1;
              SR0P-056(); /* get sum of wts for all cartons*/
                                     /* for this BOL/BOL SUB*/
              VAZHDR01.AZ-TOT-SHPMT-WT = AZFREC.IO-TOT-PK-ACTL-CRTN-WT;
            end

            VAZHDR01.AZ-ASN-STAT-CD = "  ";
            SR0P-031(); /* update AZ header*/
          else
            converseLib.validationFailed(211);
            set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
          end
        end
      end
    end
  end

  if (converseVar.validationMsgNum == 0)
    SRP2REC.SRP2-SEL[SRWTSF2S] = " ";
    SR0PM220.SR0PM-SEL[SRWTSF2S] = " ";
  end

   /* ---------------- end of process sr0p245 ---------------------*/
end // end SR0P245

// * set de-pick status flags
Function SR0P246()
   /* ------------------ sr0p246 set de-pick stat flags-----------*/

  if (SR1REC.SR1PKSFL == "Y" /* order to be excluded from pick*/
   && SR1REC.SR1PKAFL == "Y") /* of full schedule done today*/
    if (SR2REC.SR1PKSFL == "N"
     && SR2REC.SR1PKAFL == "N")
      SR0PM220.SR0PMMSG = "ORDER EXCLUDED FROM FULL SCHEDULE PICK";
      SR2REC.SR1PKSFL = "X";
      SR2REC.SR1PKAFL = "Y";
      SR2REC.SR1PKSDT = 0;
      SR2REC.SR1SHPDT = 0;
      return;
    else
      if (SR2REC.SR1PKSFL == "Y"
       && SR2REC.SR1PKAFL == "Y")
        SR0PM220.SR0PMMSG = "ORDER EXCLUDED FROM FULL SCHEDULE PICK";
        SR2REC.SR1PKSFL = "X";
        SR2REC.SR1PKAFL = "Y";
        SR2REC.SR1PKSDT = 0;
        SR2REC.SR1SHPDT = 0;
        return;
      end
    end
  end

  if (SR2REC.SR1PKAFL == "Y" /* order picked today so it will*/
   && SR2REC.SR1PKSFL == "Y") /* be unpicked showing no activity*/
    SR2REC.SR1PKAFL = "N";
    SR2REC.SR1PKSFL = "N";
    SR2REC.SR1PKSDT = 0;
    SR2REC.SR1SHPDT = 0;
    return;
  end

  if (SR2REC.SR1PKSFL == "Y" /* de-pick order NOT processed today*/
   && SR2REC.SR1PKAFL == "N")
    SR1REC.SR1PKAFL = "Y"; /* set hdr activity flag on*/
    SR1REC.SR1PKSFL = "N"; /* set hdr picked flag off*/
    SR1REC.SR1PKSDT = 0; /* zero out sched pick date*/
    SR2REC.SR1SHPDT = 0; /* zero out ship date*/
    SR1REC.SR1SHPDT = 0; /* zero out ship date*/
    SR2REC.SR1PKAFL = "Y";
    SR2REC.SR1PKSFL = "N";
    SR1REC.SR1BTST = "E";
    SR2REC.SR1PKSDT = 0;
    return;
  end

   /* ------------------- end of process sr0p246 -----------------*/
end // end SR0P246

// * pick/check schd active ords
Function SR0P250()
   /* ---------------------- process sr0p250 ---------------------*/

   /* get all the orders for the warehouse/schedule on SR0PM220*/
   /* build temp storage records for the map*/

   /* ------------------------------------------------------------*/
  SR2REC.XWHCD = SR0PW01.XWHCD;
  SR2REC.PK1PKSCH = SR0PM220.PK1PKSCH;
  SR2REC.OP1CUOID = -1;
  SR2REC.OP1NORID = -1;
  SR2REC.OP1NTMAL = -1;
  SR0PW01.SR0PW-SR-EOF-FL = "N";
  SR0P-010(); /* select set vsrord01*/
  SR0P-011(); /* retrieve first order*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(38); /* orders not found for schedule*/
    set SR0PM220.PK1PKSCH cursor, bold;
    exit stack;
  end

  while (SR0PW01.SR0PW-SR-EOF-FL == "N")
    SR0P255(); /* build ts record (SRP2REC)*/
  end

  SR0P-012(); /* close cursor*/

    /* -----------   end of process sr0p250  ------------*/
end // end SR0P250

// * load & write SRP2REC
Function SR0P255()
   /* ------------------ process sr0p255 -------------------------*/

   /* load and write temp storage 2 (SRP2REC)*/

  set SRP2REC empty; /* init work record*/

  SR0PW01.SRWTSF2S = 1;

  while (SR0PW01.SRWTSF2S <= 10
   && SR0PW01.SR0PW-SR-EOF-FL == "N")

    if (SR2REC.SR2DALFL != "Y") /* don't want de-allocated orders*/
      if (SR2REC.SR2BLLSU == 99) /* multiple sub's for this bol/order*/
        SR0P-065(); /* get orders for this bol*/
      else
        SR0P275(); /* build temp storage 2*/
        SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1; /* increment storage sub*/
      end
    end

    SR0P-011(); /* select next order*/

  end

   /* write temp storage 2*/

  if (SR0PW01.SRWTSF2S > 1) /* at least one order found*/
    XSSRT2A();
  end

   /* ------------------ end of process sr0p255 ------------------*/
end // end SR0P255

// * select unique dship.vsrord01
Function SR0P260()
   /* ------------------------- sr0p260 --------------------------*/

                 /* select unique dship.vsrord01*/

   /* ------------------------------------------------------------*/

  SQLCA.VAGen_SQLCODE = 0;
  call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* access dship.vsrord01*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0PS06";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1LOC = "ACCESSING DB2 VSRORD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* --------------- end of process sr0p260 ---------------------*/
end // end SR0P260

// * build SR0PM220 map array
Function SR0P270()
   /* ------------------ sr0p270 -------------------------*/

   /* build order array on screen*/

  set SR0PM220 initial;
  SR0PM220.XWHCD = SR0PW02.SR0PWWHS;
  SR0PM220.XWHABRV = SR0PW01.XWHABRV;
  SR0PM220.PK1PKSCH = SR0PW02.SR0PWSCH;
  SR0PM220.SRWTSF2P = SR0PW01.SRWTSF2P;
  SR0PM220.SRWTSF2M = SR0PW01.SRWTSF2M;
  SR0PM220.SR0PMDT = VGVar.currentShortGregorianDate;
  SR0PM220.SR0PMDDT = SR0PW01.SR0PWDDT;
  SR0PW01.SRWTSF2S = 1;

  while (SR0PW01.SRWTSF2S <= 10)

    set SR0PM220.SR0PM-SEL[SRWTSF2S] initialAttributes;
    set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] initialAttributes;
    if (SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S] != 0)
     /* MOVE SRP2REC.SRP2-SEL(SRWTSF2S) TO SR0PM220.SR0PM-SEL(SRWTSF2S);*/
      SR0PM220.SR0PM-ORD-NO[SRWTSF2S] = SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S];
      SR0PM220.SR0PM-ORD-SUB[SRWTSF2S] = SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S];

      SR0PM220.SR0PM-BOL-NO[SRWTSF2S] = SRP2REC.SRP2-BOL-NO[SRWTSF2S];
      SR0PM220.SR0PM-BOL-SUB[SRWTSF2S] = SRP2REC.SRP2-BOL-SUB[SRWTSF2S];

      SR0PM220.SR0PM-PICK-DT[SRWTSF2S] = SRP2REC.SRP2-PICK-DT[SRWTSF2S];
      SR0PM220.SR0PM-CARR-CD[SRWTSF2S] = SRP2REC.SRP2-CARR-CD[SRWTSF2S];
      SR0PM220.SR0PM-CHARGES[SRWTSF2S] = SRP2REC.SRP2-CHARGES[SRWTSF2S];
      SR0PM220.SR0PM-PRO-NO[SRWTSF2S] = SRP2REC.SRP2-PRO-NO[SRWTSF2S];
      set SR0PM220.SR0PM-SEL[SRWTSF2S] normal;
      set SR0PM220.SR0PM-SEL[SRWTSF2S] underline;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] normal;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] underline;
      if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "SR")
        if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "N"
         && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y") /* protect date if*/
          set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip; /* order picked*/
        end
        if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "Y"
         && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y") /* protect date if*/
          set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip; /* order picked*/
        end
      else
        if (SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] == "RE") /* protect date if*/
          set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip; /* order picked*/
        end
      end
    else
      /* MOVE ' ' TO SR0PM220.SR0PM-ORD-NO(SRWTSF2S);*/
      /* MOVE ' ' TO SR0PM220.SR0PM-BOL-NO(SRWTSF2S);*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] skip, invisible;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip, invisible;
    end

    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1; /* increment storage sub*/

  end

   /* ------------------ end of sr0p270 ------------------*/
end // end SR0P270

// * build SRP2REC
Function SR0P275()
   /* ----------------- process sr0p275 -------------------------*/

   /* load temp storage 2 - SRP2REC*/

  SRP2REC.SRP2-SEL[SRWTSF2S] = " ";

  SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S] = SR2REC.OP1CUOID; /* order nbr*/
  SRP2REC.SRP2-NIKE-ORD-ID[SRWTSF2S] = SR2REC.OP1NORID; /* nike ord*/
  SRP2REC.SRP2-BOL-NO[SRWTSF2S] = SR2REC.PK1BLLAD; /* bill of lading*/
  SRP2REC.SRP2-BOL-SUB[SRWTSF2S] = SR2REC.SR2BLLSU; /* bol sub*/
  SRP2REC.SRP2-CARR-CD[SRWTSF2S] = SR2REC.TF1CARCD; /* carrier code*/
  SRP2REC.SRP2-CHARGES[SRWTSF2S] = SR2REC.SR2SHPCG; /* shipping chrgs*/
  SRP2REC.SRP2-PRO-NO[SRWTSF2S] = SR2REC.TF2PRONO; /* pro number*/
  SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] = SR2REC.SR1PKAFL; /* pick act fl*/
  SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] = SR2REC.SR1PKSFL; /* pk stat fl*/

  if (SR2REC.SR1PKSDT > 0)
    SR0PW01.SR0PW-DB2-DT = SR2REC.SR1PKSDT;
    SR0PS-002(); /* format DB2 date for display*/
    SRP2REC.SRP2-PICK-DT[SRWTSF2S] = SR0PW01.SR0PW-DISP-DT;
  end

  SRP2REC.SRP2-RLV-INV-FL[SRWTSF2S] = SR2REC.SR2RINVF; /* rlv inv fl*/
  SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] = "SR"; /* from SRORD record*/
  SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] = "  "; /* AZ stat code*/

   /* ------------------- end of sr0p275 -------------------------*/
end // end SR0P275

// * edit map
Function SR0P280()
   /* -------------------- process sr0p280 ---------------------------*/

      /* edit date fields*/

  set TA2REC empty;

  if (SRP2REC.SRP2-PICK-DT[SRWTSF2S] == SR0PM220.SR0PM-PICK-DT[SRWTSF2S])
       /* continue*/
  else
    if (SR0PM220.SR0PM-PICK-DT[SRWTSF2S] > 0)
      SR0PS-282(); /* edit date format*/
      if (TA2REC.TA2RTNCD == 0)
        SR0PW01.SR0PWUDT = SR0PM220.SR0PM-PICK-DT[SRWTSF2S];
        SR0PS-283(); /* edit against sr-pick-sched-dt*/
        if (converseVar.validationMsgNum != 0)
          set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] cursor, bold;
        end
      end
    end
  end

    /* compare select codes on screen with temp storage,*/
      /* if they are equal - OK*/

  if (SRP2REC.SRP2-SEL[SRWTSF2S] == SR0PM220.SR0PM-SEL[SRWTSF2S])
       /* continue*/
  else
    SR0PS-281(); /* edit selection values*/
  end

   /* ---------------- end of process sr0p280 -----------------------------*/
end // end SR0P280

// init & process map sr0pm320
Function SR0P310()

    /* -------------  execute process sr0p310  --------------*/

  if (SRWREC.SRWMSG != " ")
    SR0PM320.SR0PMMSG = SRWREC.SRWMSG;
    SRWREC.SRWMSG = " ";
  else
    if (converseVar.validationMsgNum == 0)
      set SR0PW02 empty;
      set SRWREC empty;
      set SR1REC empty;
      set SR2REC empty;
      set SR0PM320 initial;
      SR0PM320.SR0PMDT = VGVar.currentShortGregorianDate; /* system date*/
    end
  end

  converseLib.clearScreen();
  
  if (SR0PW01.XWHCD != " ")
    SR0PM320.XWHCD = SR0PW01.XWHCD;
    SR0PM320.XWHABRV = SR0PW01.XWHABRV;
    if (converseVar.validationMsgNum == 179)
       /* next sentence*/
    else
      set SR0PM320.PK1PKSCH cursor;
    end
  end

   /* ----------------process map sr0pm320------------------------*/
  SR0P320();
   /* ----------------map sr0pm320 conversed----------------------*/

  SR0PW01.SR0PWMAP = "SR0PM320"; /* set map name to work storage*/
  SR0PM320.VAGen_EZEMSG = " "; /* clear all msg fields*/
  SR0PM320.SR0PMMSG = " ";
  SRWREC.SRWMSG = " ";

  if (converseVar.eventKey is enter)
    SR0P325(); /* process data*/
  else
    if (converseVar.eventKey is pf7 /* page forward or back*/
     || converseVar.eventKey is pf8)
      SR0P330();
    else
      if (converseVar.eventKey is pf3
       || converseVar.eventKey is pf4)
        SR0PW01.SR0PWOPT = 0; /* set return to appl menu*/
        exit stack;
      else
        if (converseVar.eventKey is pf9)
          SR0PW01.SR0PW-NEW-DATA = "Y";
          SR0PW01.SR0PWOPT = 2; /* set pick order option*/
        else
          if (converseVar.eventKey is pf10)
            if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y")
              converseLib.validationFailed(213);
            else
              SR0PW01.SR0PWOPT = 1; /* set pick by schedule option*/
            end
          else
            if (converseVar.eventKey is pa2) /* ; cancel*/
              exit stack;
            else
              converseLib.validationFailed(12); /* invalid pf key*/
            end
          end
        end
      end
    end
  end

  exit stack;

   /* -------------  end process sr0p310  --------------------*/
end // end SR0P310

// pick status inquiry map
Function SR0P320()
   /* ------------------process map sr0pm320----------------------*/
  converse SR0PM320 ;
   /* ------------------map sr0pm320 conversed--------------------*/
end // end SR0P320

// * 'enter' processing
Function SR0P325()
   /* ---------------- sr0p325 enter processing -----------------*/

   /* -----------------------------------------------------------*/
  if (SR0PM320.SR0PMOPT != " ")
    COMMAREA.CATOAP = SR0PM320.SR0PMOPT;
    COMMAREA.CAITEM = SR0PM320.SR0PMITM;
    SRWREC.SRWXWHCD = COMMAREA.CAITEM;
    SRWREC.SRWXWHCD = SR0PM320.XWHCD; /* move warehouse and batch*/
    COMMAREA.CAUSERA = SRWREC.SRWGRP; /* in case of transfer.*/
    COMMAREA.CAFROMAP = "SR0P"; /* move in from transaction*/
    SR0PW01.SR0PWFPF = "Y"; /* indicate fastpath request*/
    exit stack;
  end

  if (SR0PM320.XWHCD is modified)
    if (SR0PM320.XWHCD == " ")
      converseLib.validationFailed(17); /* warehouse code required*/
      set SR0PM320.XWHCD cursor, modified, bold;
      exit stack;
    else
      if (SR0PM320.XWHCD in XWHTBL.XWHCD)
        SR0PM320.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      if (SR0PM320.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWTCD = XWHTBL.XWTCD[sysVar.arrayIndex];
      end
      if (SR0PM320.XWHCD in XWHTBL.XWHCD)
        SR0PW01.XWHSTKLF = XWHTBL.XWHSTKLF[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex == 0)
        converseLib.validationFailed(1); /* non-existent warehouse*/
        set SR0PM320.XWHCD cursor, bold;
        SR0PM320.XWHABRV = " ";
        exit stack;
      else
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(2); /* inactive warehouse*/
          set SR0PM320.XWHCD cursor, bold;
          set SR0PM320.XWHABRV modified, bold;
          exit stack;
        else
          SR0PW01.XWHCD = SR0PM320.XWHCD;
          SR0PW01.XWHABRV = SR0PM320.XWHABRV;
        end
      end
    end
  end

  if (SR0PM320.PK1PKSCH is modified
   || SR0PM320.TF1CARCD is modified
   || SR0PM320.XWHCD is modified)
    set SR0PM320.PK1PKSCH normal;
    set SR0PM320.TF1CARCD normal;
    SR0PW02.SR0PW-LIT1 = "WHS ";
    SR0PW02.SR0PWWHS = SR0PM320.XWHCD;
    SR0PW02.SR0PW-LIT2 = " SCH ";
    SR0PW02.SR0PWSCH = SR0PM320.PK1PKSCH;
    SR0PW02.SR0PWIX3 = 0;
    while (SR0PW02.SR0PWIX3 < 11)
      SR0PW02.SR0PWIX3 = SR0PW02.SR0PWIX3 + 1;
      set SR0PM320.SR0PMORD[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMSUB[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMPDT[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMCAR[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMSCG[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMPRO[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMDTS[SR0PWIX3] skip, invisible;
    end
    SR0P135(); /* get schedule record*/
    if (VAGen_SQLCODE != 0) /* schedule found*/
      exit stack;
    else
      SR0PM320.SR0PMBTS = SR1REC.SR1BTST;
      SR2REC.XWHCD = SR0PW02.SR0PWWHS;
      SR2REC.PK1PKSCH = SR0PW02.SR0PWSCH;
      SR2REC.OP1CUOID = -1;
      SR2REC.OP1NORID = -1;
      SR2REC.OP1NTMAL = -1;
      SR0P155(); /* <== select set vsrord01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(38); /* <== order not found*/
        SR0P170(); /* <== close cursor*/
      else
        if (VAGen_SQLCODE == 0) /* orders found*/
          SR0PW02.SR0PWIX1 = 0;
          SR0P335(); /* load order table*/
          if (SR0PW02.SR0PWIX1 > 0)
            SR0PW02.SR0PWIX2 = 0;
            SR0P340(); /* load order table to screen*/
          else
            if (SR0PW02.SR0PWOFL == "Y") /* order found?*/
              converseLib.validationFailed(179); /* no carrier code*/
              set SR0PM320.TF1CARCD cursor, bold;
            else
              converseLib.validationFailed(92);
              set SR0PM320.PK1PKSCH bold;
            end
            exit stack;
          end
        else
          converseLib.validationFailed(3);
          exit stack;
        end
      end
    end
  else
    converseLib.validationFailed(14);
    set SR0PM320.PK1PKSCH bold;
    exit stack;
  end
  set SR0PM320.PK1PKSCH cursor;

  return;

    /* -----------   end of process sr0p325  ------------*/

end // end SR0P325

// * pf7 & pf8 key processing
Function SR0P330()
   /* ----------------- process sr0p330 pf key check -------------*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* page back*/
    SR0PW02.SR0PWIX2 = SR0PW02.SR0PWIX2 - 22;
    if (SR0PW02.SR0PWIX2 >= 0)
      SR0P340();
    else
      SR0PW02.SR0PWIX2 = 0;
      SR0P340();
      converseLib.validationFailed(99);
    end
  else
    if (converseVar.eventKey is pf8) /* page forward*/
      if (SR0PW02.SR0PWIX1 > SR0PW02.SR0PWIX2)
        SR0P340();
      else
        converseLib.validationFailed(98); /* at bottom of pages*/
      end
    end
  end

    /* -----------   end of process sr0p330  ------------*/

end // end SR0P330

// * load picked orders to table
Function SR0P335()
   /* ---------- sr0p335 load picked orders into table -----------*/

  SR0PW02.SR0PWODR = "0";
  SR0PW02.SR0PWIX1 = 0;
  while (SQLCA.VAGen_SQLCODE == 0
   && SR0PW02.SR0PWIX1 < 900)
    SR0P160(); /* <== access dship.vsrord01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SR2REC.SR2RINVF != "Y") /* <== direct ship not pickable*/
        SR0P170(); /* <== close cursor dship.vsrord01*/
        converseLib.validationFailed(119);
        set SR0PM320.PK1PKSCH cursor, bold;
        exit stack;
      end
      if (SR2REC.SR2DALFL != "Y")
        SR0PW02.SR0PWOFL = "Y"; /* order found*/
        if (SR2REC.SR2BLLSU == 99) /* multiple sub's for this bol/order*/
          SR0P350(); /* get orders for this bol*/
        else
          SR0P345(); /* move SRORD data to table*/
        end
      end
    end
  end

  SR0P170(); /* <== close cursor dship.vsrord01*/

    /* -----------   end of process sr0p335  ------------*/

end // end SR0P335

// * load table to screen
Function SR0P340()
   /* ------------------------ sr0p340 ---------------------------*/
      /* load sr0p330 screen array with orders and their pick*/
      /* dates using the value of sr0pwix2 as a starting point*/
      /* and going until > 11 or > sr0pwix1 (array size).*/
      /* sr0pwix3 is the idx to the screen array.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(27); /* more on next page message*/
  SR0PW02.SR0PWIX3 = 0;

  while (SR0PW02.SR0PWIX3 < 11)
    SR0PW02.SR0PWIX2 = SR0PW02.SR0PWIX2 + 1;
    SR0PW02.SR0PWIX3 = SR0PW02.SR0PWIX3 + 1;
    if (SR0PW02.SR0PWIX2 <= SR0PW02.SR0PWIX1)
      set SR0PM320.SR0PMORD[SR0PWIX3] skip;
      SR0PM320.SR0PMORD[SR0PWIX3] = SR0PW02.SR0PWORD[SR0PWIX2];
      set SR0PM320.SR0PMSUB[SR0PWIX3] skip;
      SR0PM320.SR0PMSUB[SR0PWIX3] = SR0PW02.SR0PWSUB[SR0PWIX2];
      if (SR0PW02.SR0PWSDT[SR0PWIX2] > 0)
        set SR0PM320.SR0PMPDT[SR0PWIX3] skip;
        SR0PM320.SR0PMPDT[SR0PWIX3] = SR0PW02.SR0PWPDT[SR0PWIX2];
      else
        set SR0PM320.SR0PMPDT[SR0PWIX3] skip, invisible;
      end
      set SR0PM320.SR0PMCAR[SR0PWIX3] skip;
      SR0PM320.SR0PMCAR[SR0PWIX3] = SR0PW02.SR0PWCAR[SR0PWIX2];
      set SR0PM320.SR0PMSCG[SR0PWIX3] skip;
      SR0PM320.SR0PMSCG[SR0PWIX3] = SR0PW02.SR0PWSCG[SR0PWIX2];
      set SR0PM320.SR0PMPRO[SR0PWIX3] skip;
      SR0PM320.SR0PMPRO[SR0PWIX3] = SR0PW02.SR0PWPRO[SR0PWIX2];
      if (SR0PW02.SR0PWDTS[SR0PWIX2] > 0)
        set SR0PM320.SR0PMDTS[SR0PWIX3] skip;
        SR0PM320.SR0PMDTS[SR0PWIX3] = SR0PW02.SR0PWDSH[SR0PWIX2];
      else
        set SR0PM320.SR0PMDTS[SR0PWIX3] skip, invisible;
      end
    else
      set SR0PM320.SR0PMORD[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMSUB[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMPDT[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMCAR[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMSCG[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMPRO[SR0PWIX3] skip, invisible;
      set SR0PM320.SR0PMDTS[SR0PWIX3] skip, invisible;
      converseLib.validationFailed(98);
    end
  end

    /* -----------   end of process sr0p340  ------------*/
end // end SR0P340

// * load SRORD orders to table
Function SR0P345()
   /* ---------- sr0p345 load SRORD orders into table -----------*/

  if (SR2REC.SR1PKSFL == "N")
    SR2REC.SR1PKSDT = 0;
  end
  if (SR2REC.SR1PKSFL == "N" /* <== check pick status*/
   && SR1REC.SR1PKSFL == "Y" 
   && SR1REC.SR1PKAFL == "Y")
    SR2REC.SR1PKSFL = "Y";
    SR2REC.SR1PKSDT = SR1REC.SR1PKSDT;
  end
  if (SR0PM320.TF1CARCD > " " /* if a carrier code is entered*/
   && SR2REC.TF1CARCD != SR0PM320.TF1CARCD) /* if requested carrier*/
       /* next sentence*/
  else
    SR0PW02.SR0PWIX1 = SR0PW02.SR0PWIX1 + 1;
    SR0PW02.SR0PWORD[SR0PWIX1] = SR2REC.OP1CUOID;
    SR0PW02.SR0PWSUB[SR0PWIX1] = SR2REC.OP1NORID;
    SR0PW02.SR0PWSDT[SR0PWIX1] = SR2REC.SR1PKSDT;
    SR0PW02.SR0PWSFL[SR0PWIX1] = SR2REC.SR1PKSFL;
    SR0PW02.SR0PWAFL[SR0PWIX1] = SR2REC.SR1PKAFL;
    SR0PW02.SR0PWCAR[SR0PWIX1] = SR2REC.TF1CARCD;
    SR0PW02.SR0PWSCG[SR0PWIX1] = SR2REC.SR2SHPCG;
    SR0PW02.SR0PWPRO[SR0PWIX1] = SR2REC.TF2PRONO;
    SR0PW02.SR0PWDTS[SR0PWIX1] = SR2REC.SR1SHPDT;
  end

    /* -----------   end of process sr0p345  ------------*/
end // end SR0P345

// * read all orders for bol
Function SR0P350()
   /* ---------------------- process sr0p350 ----------------------*/

   /* get all the bill of ladings for the order read with a*/
   /* 99 in it's bol sub nbr*/

   /* ------------------------------------------------------------*/

  set VAZORD01 empty;

  VAZORD01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZORD01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZORD01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  SR0PW01.SR0PW-AZ-EOF-FL = "N";

  SR0P-023(); /* select set VAZORD01*/
  SR0P-024(); /* retrieve first order*/

  while (SR0PW01.SR0PW-AZ-EOF-FL == "N")
    SR0P355(); /* move AZ data to table*/
  end

  SR0P-025(); /* close cursor*/

    /* -----------   end of process sr0p350 - ------------*/
end // end SR0P350

// * build tbl with AZ orders
Function SR0P355()
   /* ---------------------- process sr0p355 ----------------------*/

   /* get all the bill of ladings for the order read with a*/
   /* 99 in it's bol sub nbr*/

   /* ------------------------------------------------------------*/

  while (SR0PW02.SR0PWIX1 < 900
   && SR0PW01.SR0PW-AZ-EOF-FL == "N")
    if (VAZORD01.PK-BILL-OF-LADING == SR2REC.PK1BLLAD)
      SR0P-067(); /* get carton count for sched/bol/order*/
      if (AZFREC.AZF-AZ-CRTN-CNT > 0)
        set VAZHDR01 empty; /* read AZ hdr for carrier & pro nbr*/
        VAZHDR01.XWH-WHSE-CD = VAZORD01.XWH-WHSE-CD;
        VAZHDR01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
        VAZHDR01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
        SR0P-030(); /* select AZ header*/
        if (SR0PW01.SR0PW-AZ-HDR-FOUND == "Y")
          if (VAZHDR01.TF-CARR-CD == SR0PM320.TF1CARCD) /* requested carrier*/
            SR0PW02.SR0PWIX1 = SR0PW02.SR0PWIX1 + 1;
            SR0PW02.SR0PWCAR[SR0PWIX1] = VAZHDR01.TF-CARR-CD;
                                     /* carrier code*/
            SR0PW02.SR0PWPRO[SR0PWIX1] = VAZHDR01.TF-PRO-NBR;
                                     /* pro number*/
            SR0PW02.SR0PWORD[SR0PWIX1] = VAZORD01.OP-CUST-ORD-ID;
                                     /* order nbr*/
            SR0PW02.SR0PWSUB[SR0PWIX1] = VAZORD01.OP-NIKE-ORD-ID;
                                     /* nike ord*/

            set VAZCTN01 empty; /* get total charges for bol/order*/
            VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
            VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
            VAZCTN01.PK-BILL-OF-LADING = VAZORD01.PK-BILL-OF-LADING;
            VAZCTN01.PK-BOL-SUB-NBR = VAZORD01.PK-BOL-SUB-NBR;
            VAZCTN01.OP-CUST-ORD-ID = VAZORD01.OP-CUST-ORD-ID;
            VAZCTN01.OP-NIKE-ORD-ID = VAZORD01.OP-NIKE-ORD-ID;
            VAZCTN01.PK-CRTN-SEQ-NBR = -1;
            SR0P-056(); /* get sum of charges for order*/
            if (SQLCA.VAGen_SQLCODE == 0)
              SR0PW02.SR0PWSCG[SR0PWIX1] = AZFREC.PK-CRTN-CHARGE-AMT;
                                     /* shipping charges*/
            end

            SR0PW02.SR0PWAFL[SR0PWIX1] = SR2REC.SR1PKAFL;
                                     /* pick act fl*/
            SR0PW02.SR0PWSFL[SR0PWIX1] = SR2REC.SR1PKSFL;
                                     /* pick stat fl*/
            SR0PW02.SR0PWDTS[SR0PWIX1] = SR2REC.SR1SHPDT;
                                     /* date shipped*/
            if (VAZORD01.AZ-ORD-STAT-CD == "RE") /* order has been picked*/
              SR0PW02.SR0PWSDT[SR0PWIX1] = VAZORD01.ZZ-CHNG-DT; /* pick date*/
            else
              SR0PW02.SR0PWSDT[SR0PWIX1] = 0; /* pick date*/
            end

          end
        end
      end
    end
    SR0P-024(); /* retrieve next order*/
  end

    /* -----------   end of process sr0p355 - ------------*/
end // end SR0P355

// init & process map sr0pm420
Function SR0P410()

    /* -------------  execute process sr0p410  --------------*/

  if (SRWREC.SRWMSG != " "
   && converseVar.validationMsgNum != 121)
    SR0PM420.SR0PMMSG = SRWREC.SRWMSG;
    SRWREC.SRWMSG = " ";
  else
    if (SR0PW01.SR0PW-NEW-DATA == "Y")
      SR0PW01.SR0PW-NEW-DATA = "N";
      set SR0PM420 initial;
      SR0PM420.SR0PMDT = VGVar.currentShortGregorianDate; /* system date*/
      SR0PM420.XWHCD = SR0PM220.XWHCD;
      SR0PM420.XWHABRV = SR0PM220.XWHABRV;
      SR0PM420.PK1PKSCH = SR0PM220.PK1PKSCH;
      SR0PM420.SR0PM-ORD-NO = SR0PM220.SR0PM-ORD-NO[SR0PW-SUB];
      SR0PM420.SR0PM-ORD-SUB = SR0PM220.SR0PM-ORD-SUB[SR0PW-SUB];
      SR0PM420.SR0PM-BOL-NO = SR0PM220.SR0PM-BOL-NO[SR0PW-SUB];
      SR0PM420.SR0PM-BOL-SUB = SR0PM220.SR0PM-BOL-SUB[SR0PW-SUB];
      if (SR0PM220.SR0PM-PICK-DT[SR0PW-SUB] == " ")
        SR0PM420.SR0PMDDT = SR0PM220.SR0PMDDT;
      else
        SR0PM420.SR0PMDDT = SR0PM220.SR0PM-PICK-DT[SR0PW-SUB];
      end
      XSSRT4P(); /* purge temp storage*/
      SR0P450(); /* build temp storage*/
      SR0PW01.SRWTSF4P = 1;
      XSSRT4R();
      SR0P470();
      converseLib.validationFailed(0);
    else
      if (converseVar.validationMsgNum == 0
       || converseVar.validationMsgNum == 121)
         /* next sentence*/
      else
        set SR0PM420 alarm;
      end
    end
  end

   /* --------------------process map sr0pm420--------------------*/
  SR0P420();
   /* --------------------map sr0pm420 conversed------------------*/

  SR0PW01.SR0PWMAP = "SR0PM420"; /* set map name for errors*/
  SR0PM420.SR0PMMSG = " "; /* clear all message fields*/
  SR0PM420.VAGen_EZEMSG = " ";
  SRWREC.SRWMSG = " ";

  if (converseVar.eventKey is enter)
    SR0P425(); /* edit map*/
  else
    if (converseVar.eventKey is pakey)
      exit stack;
    else
      SR0PS-411(); /* edit pf keys*/
    end
  end

  exit stack;

   /* -------------  end process sr0p410  --------------------*/

end // end SR0P410

// pick by carton map
Function SR0P420()
   /* --------------------process map sr0pm420--------------------*/
  converse SR0PM420 ;
   /* --------------------map sr0pm420 conversed------------------*/
end // end SR0P420

// * enter processing
Function SR0P425()
   /* ------------------- sr0p425 enter processing ---------------*/

  if (SR0PM420.SR0PMOPT != " ")
    COMMAREA.CATOAP = SR0PM420.SR0PMOPT;
    COMMAREA.CAITEM = SR0PM420.SR0PMITM;
    SRWREC.SRWXWHCD = COMMAREA.CAITEM;
    SRWREC.SRWXWHCD = SR0PM420.XWHCD; /* move warehouse and batch*/
    COMMAREA.CAUSERA = SRWREC.SRWGRP; /* in case of transfer.*/
    COMMAREA.CAFROMAP = "SR0P"; /* move in from transaction*/
    SR0PW01.SR0PWFPF = "Y"; /* indicate fastpath request*/
    exit stack;
  end

  if (SR0PM420.SRWTSF4P != SR0PW01.SRWTSF4P)
    if (SR0PM420.SRWTSF4P < 1 /* page must be within valid range*/
     || SR0PM420.SRWTSF4P > SR0PW01.SRWTSF4M)
      SR0PW01.SRWERRFL = "Y"; /* set error*/
      converseLib.validationFailed(206);
                                   /* page number must be between 1 and max*/
      set SR0PM420.SRWTSF4P cursor, bold;
      exit stack;
    else
      SR0PW01.SRWTSF4P = SR0PM420.SRWTSF4P;
      XSSRT4R(); /* read temp storage*/
      SR0P470(); /* build map*/
      exit stack;
    end
  end

  SR0P430(); /* edit map*/

  if (SR0PW01.SRWERRFL == "N")
    if (SR0PW01.SR0PW-CRTN-SEL-FL == "Y") /* 'P' was set on at least one row*/
      converseLib.validationFailed(207); /* no errors, press pf12 to update*/
    end
  end

  exit stack;

    /* -----------   end of process sr0p425  ------------*/
end // end SR0P425

// * edit map SR0PM420
Function SR0P430()
   /* ------------------- sr0p430 edit map -----------------------*/

  SR0PW01.SRWERRFL = "N";

  if (SR0PM420.SR0PMDDT is modified)
    set TA2REC empty;
    TA2REC.TA2GRGA = SR0PM420.SR0PMDDT;
    set SR0PM420.SR0PMDDT normal;
    SR0P227();
    if (SR0PW01.SRWERRFL == "N")
      SR0PW01.SR0PWUDT = SR0PM420.SR0PMDDT;
      SR0PS-283();
    end
    if (converseVar.validationMsgNum == 0)
      SR0PW01.SR0PWDDT = SR0PM420.SR0PMDDT;
    else
      set SR0PM420.SR0PMDDT cursor, bold;
      return;
    end
  end

   /* edit all the options and dates entered*/

  SR0PW01.SR0PW-CRTN-SEL-FL = " "; /* init flag*/
  SR0PW01.SRWTSF4S = 10; /* init subscript*/

  while (SR0PW01.SRWTSF4S >= 1) /* process all 10 rows*/
    SR0P480(); /* edit map*/
    SR0PW01.SRWTSF4S = SR0PW01.SRWTSF4S - 1;
  end

    /* -----------   end of process sr0p430  ------------*/
end // end SR0P430

// * upd all picked cartons
Function SR0P435()
   /* ---------------------- sr0p435 ----------------------------*/

   /* update picked cartons*/
   /* 1. update AZ carton record*/
   /* 1.1 get carton weight from packing list*/
   /* 1.2 update PK-ACTL-CRTN-WT from PK-EXPC-CRTN-WT*/
   /* 2. check if all cartons for an order are picked*/
   /* 2.1 if they are:*/
   /* update SR order status to picked*/
   /* update AZ order status to 'ready'*/
   /* 3. check if all cartons for a BOL are picked*/
   /* 3.1 if they are, update AZ header status to 'ready'*/
   /* 4. check if all orders for a schedule are picked*/
   /* 4.1 if they are, update SR header top picked*/
   /* 5. update PK-ACTL-TOT-PL-WT on packing list header*/

  SR0PW01.SR0PW-DISP-DT = SR0PM420.SR0PMDDT;
  SR0PS-001(); /* format date into DB2 format*/
  SR0PW01.SR0PW-HOLD-DT = SR0PW01.SR0PW-DB2-DT;

  SR0PW01.SRWTSF4S = 1; /* start subscript*/
  SR0PW01.TS-NIKE-PL-NBR = 0;

  while (SR0PW01.SRWTSF4S < 11)
    if (SR0PM420.SR0PM-SEL[SRWTSF4S] == "P")
      set VAZCTN01 empty;
      VAZCTN01.XWH-WHSE-CD = SR0PM420.XWHCD;
      VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
      VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
      VAZCTN01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
      VAZCTN01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
      VAZCTN01.PK-CRTN-SEQ-NBR = SR0PM420.SR0PM-CRTN-SEQ[SRWTSF4S];
      SR0P460(); /* select carton for update*/
      if (SR0PW01.TS-NIKE-PL-NBR == 0) /* if packing list hasn't been saved,*/
        SR0PW01.TS-NIKE-PL-NBR = VAZCTN01.TS-NIKE-PL-NBR; /* save it*/
      end
      if (VAZCTN01.PK-ACTL-CRTN-WT == 000.00)
        SR0P-035(); /* get crtn wt from packing list*/
        VAZCTN01.PK-ACTL-CRTN-WT = SR0PW01.SR0PW-CRTN-WT;
        SR0PW01.SR0PW-CRTN-WT-CHG-FL = "Y";
      end
      VAZCTN01.PK-MOVERS-STAT-CD = "12";
      SR0P-081(); /* call vazctn01 to upd carton*/
      SRP4REC.SRP4-STAT-CD[SRWTSF4S] = "12";
      SRP4REC.SRP4-WEIGHT[SRWTSF4S] = SR0PW01.SR0PW-CRTN-WT;
    end
    SR0PW01.SRWTSF4S = SR0PW01.SRWTSF4S + 1;
  end

  if (converseVar.validationMsgNum == 0)
    XSSRT4U(); /* update temp storage*/
    SR0P470(); /* re-format screen*/
    SR0P-050(); /* check all the cartons*/
  end

  if (converseVar.validationMsgNum == 0)
    set PWOREC empty;
    PWOREC.XWHCD = SR0PW02.SR0PWWHS;
    PWOREC.TSIPLNBR = SR0PW01.TS-NIKE-PL-NBR;
    SR0PW01.SR0PW-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
    PWOREC.OP1PARTN = SR0PW01.SR0PW-ORD-DIGIT[9];
    PWOREC.OP1CUOID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
    PWOREC.OP1NORID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
    SR0P-074(); /* select dpick.vsplhdr01*/
    if (converseVar.validationMsgNum == 0)
      PWOREC.PK-ACTL-TOT-PL-WT = PWOREC.PK-ACTL-TOT-PL-WT + SR0PW01.SR0PW-CRTN-WT;
      SR0P-075(); /* update dpick.vsplhdr01*/
    end
  end

   /* if ezemno is eq to zero all is ok otherwise roll back,*/
   /* if the update is un-successful ta0010 will be*/
   /* called and this application will have exited.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0)
    converseLib.validationFailed(121); /* update complete*/
  else
    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback();
  end

   /* ------------------- end of process sr0p435 -----------------*/
end // end SR0P435

// * pick/check cartons for order
Function SR0P450()
   /* ---------------------- process sr0p450 ---------------------*/

   /* get all the cartons for the order selected on SR0PM220*/
   /* build temp storage records for the map*/

   /* ------------------------------------------------------------*/

  set VAZCTN01 empty;

  VAZCTN01.XWH-WHSE-CD = SR0PW02.SR0PWWHS;
  VAZCTN01.PK-PICK-SCHED-NBR = SR0PW02.SR0PWSCH;
  VAZCTN01.OP-CUST-ORD-ID = SRP2REC.SRP2-CUST-ORD-ID[SR0PW-SUB];
  VAZCTN01.OP-NIKE-ORD-ID = SRP2REC.SRP2-NIKE-ORD-ID[SR0PW-SUB];
  VAZCTN01.PK-BILL-OF-LADING = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
  VAZCTN01.PK-BOL-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];

  SR0P-020(); /* select set vazctn01*/
  SR0P-021(); /* retrieve first carton*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(203); /* cartons not found for order*/
    set SR0PM220.SR0PM-SEL[SR0PW-SUB] cursor, bold;
    SR0PW01.SR0PWOPT = "2";
    exit stack;
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    SR0P455(); /* build ts record (SRP4REC)*/
  end

  SR0P-022(); /* close cursor*/

    /* -----------   end of process sr0p450  ------------*/
end // end SR0P450

// * load & write SRP4REC
Function SR0P455()
   /* ------------------ process sr0p455 -------------------------*/

   /* load and write temp storage 4 (SRP4REC)*/

  set SRP4REC empty; /* init work record*/

  SR0PW01.SRWTSF4S = 1;

  while (SR0PW01.SRWTSF4S <= 10
   && SQLCA.VAGen_SQLCODE == 0)

    if (VAZCTN01.PK-MOVERS-STAT-CD == "  "
     || VAZCTN01.PK-MOVERS-STAT-CD == "12"
     || VAZCTN01.PK-MOVERS-STAT-CD == "20")
      SR0P475(); /* build temp storage 4*/
      SR0PW01.SRWTSF4S = SR0PW01.SRWTSF4S + 1; /* increment storage sub*/
    end

    SR0P-021(); /* select next carton*/

  end

   /* write temp storage 4*/

  if (SR0PW01.SRWTSF4S > 1) /* at least one carton found*/
    XSSRT4A();
  end

   /* ------------------ end of process sr0p455 ------------------*/
end // end SR0P455

// * select unique dship.vazctn01
Function SR0P460()
   /* ------------------------- sr0p460 --------------------------*/

                 /* select unique dship.vazctn01*/

   /* ------------------------------------------------------------*/

  set AZFREC empty;
  SQLCA.VAGen_SQLCODE = 0;
  AZFREC.AZFTASK = "S ";
  call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* read dship.vazctn01*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    SR0PW02.SR0PW-LIT3 = " BOL ";
    SR0PW02.SR0PW-NBR = SRP2REC.SRP2-BOL-NO[SR0PW-SUB];
    SR0PW02.SR0PW-SUB-NBR = SRP2REC.SRP2-BOL-SUB[SR0PW-SUB];
    TA1REC.TA1TBLKE = SR0PW02.SR0PW790;
    TA1REC.TA1PGMNM = "SR0P460";
    TA1REC.TA1LOC = "ACCESSING DB2 VAZCTN01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* --------------- end of process sr0p460 ---------------------*/
end // end SR0P460

// * build SR0PM420 map array
Function SR0P470()
   /* ------------------ sr0p470 -------------------------*/

   /* build carton array on screen*/

  set SR0PM420 initial;
  SR0PM420.SR0PMDT = VGVar.currentShortGregorianDate; /* system date*/
  SR0PM420.XWHCD = SR0PM220.XWHCD;
  SR0PM420.XWHABRV = SR0PM220.XWHABRV;
  SR0PM420.PK1PKSCH = SR0PM220.PK1PKSCH;
  SR0PM420.SR0PM-ORD-NO = SR0PM220.SR0PM-ORD-NO[SR0PW-SUB];
  SR0PM420.SR0PM-ORD-SUB = SR0PM220.SR0PM-ORD-SUB[SR0PW-SUB];
  SR0PM420.SR0PM-BOL-NO = SR0PM220.SR0PM-BOL-NO[SR0PW-SUB];
  SR0PM420.SR0PM-BOL-SUB = SR0PM220.SR0PM-BOL-SUB[SR0PW-SUB];
  if (SR0PM220.SR0PM-PICK-DT[SR0PW-SUB] == " ")

    SR0PM420.SR0PMDDT = SR0PM220.SR0PMDDT;
  else
    SR0PM420.SR0PMDDT = SR0PM220.SR0PM-PICK-DT[SR0PW-SUB];
  end

  SR0PM420.SRWTSF4P = SR0PW01.SRWTSF4P;
  SR0PM420.SRWTSF4M = SR0PW01.SRWTSF4M;

  SR0PW01.SRWTSF4S = 1;

  while (SR0PW01.SRWTSF4S <= 10)

    if (SRP4REC.SRP4-CRTN-SEQ[SRWTSF4S] == 0
     && SRP4REC.SRP4-STAT-CD[SRWTSF4S] == " "
     && SRP4REC.SRP4-QTY[SRWTSF4S] == 0
     && SRP4REC.SRP4-WEIGHT[SRWTSF4S] == 0
     && SRP4REC.SRP4-CHARGES[SRWTSF4S] == 0)
      SR0PM420.SR0PM-REASON[SRWTSF4S] = "X";
      set SR0PM420.SR0PM-SEL[SRWTSF4S] skip, invisible;
      set SR0PM420.SR0PM-REASON[SRWTSF4S] skip, invisible;
    else
      SR0PM420.SR0PM-SEL[SRWTSF4S] = SRP4REC.SRP4-SEL[SRWTSF4S];

      SR0PM420.SR0PM-CRTN-SEQ[SRWTSF4S] = SRP4REC.SRP4-CRTN-SEQ[SRWTSF4S];
      SR0PM420.SR0PM-STAT-CD[SRWTSF4S] = SRP4REC.SRP4-STAT-CD[SRWTSF4S];

      SR0PM420.SR0PM-QTY[SRWTSF4S] = SRP4REC.SRP4-QTY[SRWTSF4S];
      SR0PM420.SR0PM-WT[SRWTSF4S] = SRP4REC.SRP4-WEIGHT[SRWTSF4S];
      SR0PM420.SR0PM-CHARGES[SRWTSF4S] = SRP4REC.SRP4-CHARGES[SRWTSF4S];

      set SR0PM420.SR0PM-SEL[SRWTSF4S] initialAttributes;
      set SR0PM420.SR0PM-REASON[SRWTSF4S] initialAttributes;
      if (SRP4REC.SRP4-STAT-CD[SRWTSF4S] == "12") /* carton has been picked*/
        SR0PM420.SR0PM-REASON[SRWTSF4S] = "PICKED";
        set SR0PM420.SR0PM-SEL[SRWTSF4S] underline;
        set SR0PM420.SR0PM-SEL[SRWTSF4S] protect;
      else
        if (SRP4REC.SRP4-STAT-CD[SRWTSF4S] == "20") /* carton is cancelled*/
          SR0PM420.SR0PM-REASON[SRWTSF4S] = "CANCLED";
          set SR0PM420.SR0PM-SEL[SRWTSF4S] underline;
          set SR0PM420.SR0PM-SEL[SRWTSF4S] protect;
        else
          SR0PM420.SR0PM-REASON[SRWTSF4S] = " ";
          set SR0PM420.SR0PM-SEL[SRWTSF4S] normal;
          set SR0PM420.SR0PM-SEL[SRWTSF4S] underline;
        end
      end

    end
    SR0PW01.SRWTSF4S = SR0PW01.SRWTSF4S + 1; /* increment storage sub*/

  end

   /* if first line is protected, find next cursor position*/

  SR0PW01.SRWTSF4S = 1;
  SR0PW01.SR0PW-CURSOR-FOUND = "N";

  if (SR0PM420.SR0PM-REASON[SRWTSF4S] != " ")
    while (SR0PW01.SRWTSF4S <= 10
     && SR0PW01.SR0PW-CURSOR-FOUND == "N")
      if (SR0PM420.SR0PM-REASON[SRWTSF4S] == " ")
        set SR0PM420.SR0PM-SEL[SRWTSF4S] cursor;
        SR0PW01.SR0PW-CURSOR-FOUND = "Y";
      end
      SR0PW01.SRWTSF4S = SR0PW01.SRWTSF4S + 1; /* increment storage sub*/
    end
  else
    SR0PW01.SR0PW-CURSOR-FOUND = "Y";
  end

  if (SR0PW01.SR0PW-CURSOR-FOUND == "N")
    set SR0PM420.SR0PMOPT cursor;
  end

   /* ------------------ end of sr0p470 ------------------*/
end // end SR0P470

// * build SRP4REC
Function SR0P475()
   /* ----------------- process sr0p475 -------------------------*/

   /* load temp storage 2 - SRP4REC*/

  SRP4REC.SRP4-SEL[SRWTSF4S] = " ";

  SRP4REC.SRP4-CRTN-SEQ[SRWTSF4S] = VAZCTN01.PK-CRTN-SEQ-NBR; /* crtn seq nbr*/
  SRP4REC.SRP4-STAT-CD[SRWTSF4S] = VAZCTN01.PK-MOVERS-STAT-CD;
                                   /* crtn stat code*/
  SRP4REC.SRP4-QTY[SRWTSF4S] = VAZCTN01.PK-CRTN-UNIT-QTY; /* carton quantity*/
  SRP4REC.SRP4-WEIGHT[SRWTSF4S] = VAZCTN01.PK-ACTL-CRTN-WT; /* carton weight*/
  SRP4REC.SRP4-CHARGES[SRWTSF4S] = VAZCTN01.PK-CRTN-CHARGE-AMT; /* shipping chrgs*/

   /* ------------------- end of sr0p475 -------------------------*/
end // end SR0P475

// * edit map
Function SR0P480()
   /* -------------------- process sr0p480 ---------------------------*/

    /* compare select codes on screen with temp storage,*/
      /* if they are equal - OK*/

  if (SRP4REC.SRP4-SEL[SRWTSF4S] == SR0PM420.SR0PM-SEL[SRWTSF4S])
     /* next sentence*/
  else
    if (SR0PM420.SR0PM-SEL[SRWTSF4S] == " "
     || SR0PM420.SR0PM-SEL[SRWTSF4S] == "P")
      /* next sentence*/
    else
      SR0PW01.SRWERRFL = "Y";
      converseLib.validationFailed(202); /* edit selection values*/
      set SR0PM420.SR0PM-SEL[SRWTSF4S] cursor, bold;
    end
  end

  if (SR0PM420.SR0PM-SEL[SRWTSF4S] == "P")
    SR0PW01.SR0PW-CRTN-SEL-FL = "Y";
  end

   /* ---------------- end of process sr0p480 -----------------------------*/
end // end SR0P480

// format DB2 date for updating
Function SR0PS-001()
   /* ------------------ sr0ps-001 -------------------------*/

  SR0PW01.SR0PW-DB2-MM = SR0PW01.SR0PW-DISP-MM;
  SR0PW01.SR0PW-DB2-DD = SR0PW01.SR0PW-DISP-DD;
  SR0PW01.SR0PW-DB2-YY = SR0PW01.SR0PW-DISP-YY;

  if (SR0PW01.SR0PW-DISP-YY > 56)
    SR0PW01.SR0PW-DB2-CC = 19;
  else
    SR0PW01.SR0PW-DB2-CC = 20;
  end

   /* ------------------ end of sr0ps-001 ------------------*/
end // end SR0PS-001

// format DB2 date for displaying
Function SR0PS-002()
   /* ------------------ sr0ps-002 -------------------------*/

  SR0PW01.SR0PW-DISP-MM = SR0PW01.SR0PW-DB2-MM;
  SR0PW01.SR0PW-DISP-DD = SR0PW01.SR0PW-DB2-DD;
  SR0PW01.SR0PW-DISP-YY = SR0PW01.SR0PW-DB2-YY;

   /* ------------------ end of sr0ps-002 ------------------*/
end // end SR0PS-002

// edit pf keys
Function SR0PS-211()
   /* ------------------ sr0ps-211 -------------------------*/

  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4)
    SR0PW01.SR0PWOPT = 0;
    XSSRT2P(); /* purge ts for SR0PM220*/
    XSSRT4P(); /* purge ts for SR0PM420*/
    SR0PW01.SR0PW-NEW-DATA = "Y";
    return;
  end

  if (converseVar.eventKey is pf5) /* want to go to carton level*/
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y") /* crtn lvl whse*/
      SR0P225(); /* edit map before allowing paging*/
      if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
        converseLib.validationFailed(201);
      else
        if (SR0PW01.SR0PW-FIRST-SEL == " ") /* no options entered*/
          converseLib.validationFailed(196); /* send msg*/
        else
          if (SR0PW01.SR0PW-FIRST-SEL == "S") /* valid option*/
            SR0PW01.SR0PWOPT = 4; /* go to carton level screen*/
            SR0PW01.SR0PW-NEW-DATA = "Y"; /* get new carton data*/
          else
            converseLib.validationFailed(197); /* only 'S' is valid option for pf5*/
          end
        end
      end
    else
      converseLib.validationFailed(199);
    end
    return;
  end

  if (converseVar.eventKey is pf7) /* go to previous page*/
    SR0P225(); /* edit map before allowing paging*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(201);
    else
      if (SR0PW01.SR0PW-FIRST-SEL == "P"
       || SR0PW01.SR0PW-FIRST-SEL == "D") /* must do update first*/
        converseLib.validationFailed(205);
      else
        if (SR0PW01.SRWTSF2P == 1) /* already on first page*/
          converseLib.validationFailed(99);
        else
          SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P - 1; /* prior page*/
          XSSRT2R(); /* read temp storage*/
          SR0P270(); /* build map array*/
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* go to next page*/
    SR0P225(); /* edit map before allowing paging*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(201);
    else
      if (SR0PW01.SR0PW-FIRST-SEL == "P"
       || SR0PW01.SR0PW-FIRST-SEL == "D") /* must do update first*/
        converseLib.validationFailed(205);
      else
        if (SR0PW01.SRWTSF2P == SR0PW01.SRWTSF2M)
          converseLib.validationFailed(98);
        else
          SR0PW01.SRWTSF2P = SR0PW01.SRWTSF2P + 1; /* prior page*/
          XSSRT2R(); /* read temp storage*/
          SR0P270(); /* build map array*/
        end
      end
    end
    return;
  end

  if (converseVar.eventKey is pf9) /* go to pick by schedule*/
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y")
      converseLib.validationFailed(213);
    else
      if (SR0PW01.SR0PW-FIRST-SEL == "P"
       || SR0PW01.SR0PW-FIRST-SEL == "D") /* must do update first*/
        converseLib.validationFailed(205);
      else
        SR0PW01.SR0PWOPT = 1;
        XSSRT2P(); /* purge ts for SR0PM220*/
        XSSRT4P(); /* purge ts for SR0PM420*/
        SR0PW01.SR0PW-NEW-DATA = "Y";
      end
    end
    return;
  end

  if (converseVar.eventKey is pf10) /* go to query*/
    SR0PW01.SR0PWOPT = 3;
    XSSRT2P(); /* purge ts for SR0PM220*/
    XSSRT4P(); /* purge ts for SR0PM420*/
    SR0PW01.SR0PW-NEW-DATA = "Y";
    return;
  end

  if (converseVar.eventKey is pf12) /* want to update*/
    SR0P225(); /* edit map before allowing updating*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(200);
    else
      if (SR0PW01.SR0PW-FIRST-SEL == " ") /* no options entered*/
        converseLib.validationFailed(196); /* send msg*/
      else
        if (SR0PW01.SR0PW-FIRST-SEL == "P")
          SR0P230(); /* update/edit picked orders and dates*/
        else
          if (SR0PW01.SR0PW-FIRST-SEL == "D")
            SR0P240(); /* update/edit depicked orders*/
          else
            converseLib.validationFailed(198); /* only 'P'  or 'D' valid for pf12*/
          end
        end
      end
    end
    return;
  end

  converseLib.validationFailed(12);

   /* ------------------ end of sr0ps-211 ------------------*/
end // end SR0PS-211

// protect blank array
Function SR0PS-212()
   /* ------------------ sr0ps-212 -------------------------*/

  SR0PW01.SRWTSF2S = 1;

  while (SRWTSF2S < 11)
    set SR0PM220.SR0PM-SEL[SRWTSF2S] protect, invisible;
    set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] protect, invisible;

    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
  end

   /* ------------------ end of sr0ps-212 ------------------*/
end // end SR0PS-212

// update ts fields
Function SR0PS-226()
   /* ------------------ sr0ps-226 -------------------------*/

  SRWTSF2S = 1;

  while (SRWTSF2S < 11)
    SRP2REC.SRP2-SEL[SRWTSF2S] = SR0PM220.SR0PM-SEL[SRWTSF2S];
    SRP2REC.SRP2-PICK-DT[SRWTSF2S] = SR0PM220.SR0PM-PICK-DT[SRWTSF2S];
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
  end

  XSSRT2U(); /* update temp storage*/

   /* -----------------end of sr0ps-226 -------------------------*/
end // end SR0PS-226

// re-set attributes for map
Function SR0PS-271()
   /* ------------------ sr0ps-271 -------------------------*/

  SR0PW01.SRWTSF2S = 1;

  while (SR0PW01.SRWTSF2S <= 10)

    set SR0PM220.SR0PM-SEL[SRWTSF2S] initialAttributes;
    set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] initialAttributes;
    if (SRP2REC.SRP2-CUST-ORD-ID[SRWTSF2S] != 0)
      set SR0PM220.SR0PM-SEL[SRWTSF2S] normal;
      set SR0PM220.SR0PM-SEL[SRWTSF2S] underline;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] normal;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] underline;
      if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "N"
       && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y") /* protect date if*/
        set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip; /* order picked*/
      end
      if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "Y"
       && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y") /* protect date if*/
        set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip; /* order picked*/
      end
    else
      set SR0PM220.SR0PM-SEL[SRWTSF2S] skip, invisible;
      set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] skip, invisible;
    end

    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1; /* increment storage sub*/

  end

   /* ------------------ end of sr0ps-271 ------------------*/
end // end SR0PS-271

// edit selection option
Function SR0PS-281()
   /* ------------------ sr0ps-281 -------------------------*/

    /* if user entered ' ' or 'P' or 'D' or 'S' - O.K.*/
      /* other select options are errors.*/

   /* SET SR0PM220.SR0PM-SEL(SRWTSF2S) NORMAL;*/
   /* SET SR0PM220.SR0PM-SEL(SRWTSF2S) USCORE;*/

  if (SR0PM220.SR0PM-SEL[SRWTSF2S] == " " /* blank*/
   || SR0PM220.SR0PM-SEL[SRWTSF2S] == "S" /* select for carton level*/
   || SR0PM220.SR0PM-SEL[SRWTSF2S] == "P" /* pick*/
   || SR0PM220.SR0PM-SEL[SRWTSF2S] == "D" /* de-pick*/
  )                                       /* next sentence*/
  else
    SR0PW01.SRWERRFL = "Y"; /* set err flag*/
    converseLib.validationFailed(193); /* select option invalid - enter 's'*/
    set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
  end

  if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "S") /* selection made*/
    if (SR0PW01.XWTCD == "01" && SR0PW01.XWHSTKLF == "Y") /* crtn lvl whse*/
    /* next sentence*/
    else
      SR0PW01.SRWERRFL = "Y"; /* set err flag*/
      converseLib.validationFailed(194); /* select option invalid if not crtn lvl*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    end
  end

  if (SR0PM220.SR0PM-SEL[SRWTSF2S] == " ") /**/

  else
    if (SR0PM220.SR0PM-SEL[SRWTSF2S] != SR0PW01.SR0PW-FIRST-SEL)
      SR0PW01.SRWERRFL = "Y"; /* set err flag*/
      converseLib.validationFailed(195); /* options must all be the same*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    end
  end

   /* ------------------ end of sr0ps-281 ------------------*/
end // end SR0PS-281

// edit date format
Function SR0PS-282()
   /* ------------------ sr0ps-282 -------------------------*/

                 /* validate input date and translate to*/
                        /* ccyymmdd format*/

   /* ------------------------------------------------------------*/

   /* SET SR0PM220.SR0PM-PICK-DT(SRWTSF2S) NORMAL;*/
   /* SET SR0PM220.SR0PM-PICK-DT(SRWTSF2S) USCORE;*/
  TA2REC.TA2GRGA = SR0PM220.SR0PM-PICK-DT[SRWTSF2S];
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0)
    SR0PW01.SRWERRFL = "Y"; /* set err flag*/
    converseLib.validationFailed(115);
    set SR0PM220.SR0PM-PICK-DT[SRWTSF2S] cursor, bold;
  end

   /* ------------------ end of sr0ps-282 ------------------*/
end // end SR0PS-282

// edit against sr-pick-sched-dt
Function SR0PS-283()
   /* ------------------ sr0ps-283 -------------------------*/

    /* date must be less than dship.vsrhdr01's sr-pick-sched-dt.*/

   /* ------------------------------------------------------------*/

  move SR0PWUMM to SR0PWFMM withV60Compat;
  move SR0PWUDD to SR0PWFDD withV60Compat;
  move SR0PWUYY to SR0PWFYY withV60Compat;

  if (SR0PWUYY > 80)
    SR0PWFCC = 19;
  else
    SR0PWFCC = 20;
  end

  if (SR0PWFDT < SR1PKDT)
    SR0PW01.SRWERRFL = "Y"; /* set err flag*/
    converseLib.validationFailed(161); /* display 'date must be >=*/
                                   /* pick-sched-dt'*/
  end

   /* ------------------ end of sr0ps-283 ------------------*/
end // end SR0PS-283

// edit selection option
Function SR0PS-285()
   /* ------------------ sr0ps-285 -------------------------*/

  if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "P")
    if (SRP2REC.SRP2-RLV-INV-FL[SRWTSF2S] != "Y")
      SR0PW01.SRWERRFL = "Y"; /* set err flag*/
      converseLib.validationFailed(119); /* direct ship not pickable*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    end
    if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "SR")
      if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "N"
       && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y")
        SR0PW01.SRWERRFL = "Y"; /* set err flag*/
        converseLib.validationFailed(116);
        set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
      end
      if (SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] == "Y"
       && SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "Y")
        SR0PW01.SRWERRFL = "Y"; /* set err flag*/
        converseLib.validationFailed(116);
        set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
      end
    else
      if (SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] == "RE")
        SR0PW01.SRWERRFL = "Y"; /* set err flag*/
        converseLib.validationFailed(116);
        set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
      end
    end
  end

  if (SR0PM220.SR0PM-SEL[SRWTSF2S] == "D")
    if (SRP2REC.SRP2-RLV-INV-FL[SRWTSF2S] != "Y")
      SR0PW01.SRWERRFL = "Y"; /* set err flag*/
      converseLib.validationFailed(119); /* direct ship not pickable*/
      set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
    end
    if (SRP2REC.SRP2-ORD-SRCE[SRWTSF2S] == "SR")
      if (SR1REC.SR1PKSFL == "Y" && SR1REC.SR1PKAFL == "Y"
       && SRP2REC.SRP2-PICK-ACT-FL[SRWTSF2S] != 
      SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S])
        SR0PW01.SRWERRFL = "Y"; /* set err flag*/
        converseLib.validationFailed(117);
        set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
      else
        if (SRP2REC.SRP2-PICK-STAT-FL[SRWTSF2S] == "N")
          SR0PW01.SRWERRFL = "Y"; /* set err flag*/
          converseLib.validationFailed(117);
          set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
        end
      end
    else
      if (SRP2REC.SRP2-AZ-ORD-STAT-CD[SRWTSF2S] == "  ")
        SR0PW01.SRWERRFL = "Y"; /* set err flag*/
        converseLib.validationFailed(117);
        set SR0PM220.SR0PM-SEL[SRWTSF2S] cursor, bold;
      end
    end
  end

   /* ------------------ end of sr0ps-285 ------------------*/
end // end SR0PS-285

// edit pf keys
Function SR0PS-411()
   /* ------------------ sr0ps-411 -------------------------*/

  if (converseVar.eventKey is pf3) /* go to pick by order*/
    SR0PS-412(); /* loop through all selects on SRP2REC*/
    return;
  end

  if (converseVar.eventKey is pf4)
    SR0PW01.SR0PWOPT = 0;
    XSSRT2P(); /* purge ts for SR0PM220*/
    XSSRT4P(); /* purge ts for SR0PM220*/
    SR0PW01.SR0PW-NEW-DATA = "Y";
    return;
  end

  if (converseVar.eventKey is pf7) /* go to previous page*/
    SR0P430(); /* edit map*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(201);
    else
      if (SR0PW01.SRWTSF4P == 1) /* already on first page*/
        converseLib.validationFailed(99);
      else
        SR0PW01.SRWTSF4P = SR0PW01.SRWTSF4P - 1; /* prior page*/
        XSSRT4R(); /* read temp storage*/
        SR0P470(); /* build map array*/
      end
    end
    return;
  end

  if (converseVar.eventKey is pf8) /* go to next page*/
    SR0P430(); /* edit map*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(201);
    else
      if (SR0PW01.SRWTSF4P == SR0PW01.SRWTSF4M)
        converseLib.validationFailed(98);
      else
        SR0PW01.SRWTSF4P = SR0PW01.SRWTSF4P + 1; /* prior page*/
        XSSRT4R(); /* read temp storage*/
        SR0P470(); /* build map array*/
      end
    end
    return;
  end

  if (converseVar.eventKey is pf12) /* want to update*/
    SR0P430(); /* edit map*/
    if (SR0PW01.SRWERRFL == "Y") /* must corrct errors first*/
      converseLib.validationFailed(200);
    else
      if (SR0PW01.SR0PW-CRTN-SEL-FL == " ") /* no options entered*/
        converseLib.validationFailed(196); /* send msg*/
      else
        SR0P435(); /* update picked orders and dates*/
      end
    end
    return;
  end

  converseLib.validationFailed(12);

   /* ------------------ end of sr0ps-411 ------------------*/
end // end SR0PS-411

// PF9 processing
Function SR0PS-412()
   /* ------------------ sr0ps-412 -------------------------*/

  SR0PW01.SRWTSF2S = SR0PW01.SR0PW-SUB;
  SR0PM220.SR0PM-SEL[SRWTSF2S] = " ";
  SR0PW01.SR0PW-SUB = 0;

  while (SRWTSF2S <= 9
   && SR0PW01.SR0PW-SUB == 0)
    SR0PW01.SRWTSF2S = SR0PW01.SRWTSF2S + 1;
    if (SRP2REC.SRP2-SEL[SRWTSF2S] == "S")
      SR0PW01.SR0PW-SUB = SR0PW01.SRWTSF2S;
      SRP2REC.SRP2-SEL[SRWTSF2S] = " ";
      SR0PM220.SR0PM-SEL[SRWTSF2S] = " ";
      SR0PW01.SR0PW-NEW-DATA = "Y";
    end
  end

  if (SR0PW01.SR0PW-SUB == 0)
    XSSRT2U(); /* update temp storage*/
    SR0PW01.SR0PWOPT = 2;
  end

   /* ------------------ end of sr0ps-412 ------------------*/
end // end SR0PS-412

// write temp storage - orders
Function XSSRT2A()

   /* write temporary storage - orders*/

  TA5REC.TA5APPID = "SRF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  SRP2REC.SRP2TSLEN = 684; /* length of record*/

  call "TA0050" (SRP2REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    SR0PW01.SRWTSF2M = TA5REC.TA5TSQIX;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1LOCAT[1] = "ADD TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT2A

// purge temp storage - orders
Function XSSRT2P()

   /* purge temporary storage - orders*/

  TA5REC.TA5APPID = "SRF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (SRP2REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    SR0PW01.SRWTSF2P = 1;
    SR0PW01.SRWTSF2S = 1;
    SR0PW01.SRWTSF2M = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT2P

// read temp storage - orders
Function XSSRT2R()

   /* read temporary storage - orders*/

  set SRP2REC empty;

  TA5REC.TA5APPID = "SRF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = SR0PW01.SRWTSF2P; /* current page*/
  SRP2REC.SRP2TSLEN = 684; /* length of record*/

  call "TA0050" (SRP2REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1LOCAT[1] = "READ TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SRP2REC.SRP2TSROW[1];
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT2R

// update temp storage - orders
Function XSSRT2U()

   /* update temporary storage - orders*/

  TA5REC.TA5APPID = "SRF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = SR0PW01.SRWTSF2P; /* current page*/
  SRP2REC.SRP2TSLEN = 684; /* length of record*/

  call "TA0050" (SRP2REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "UPD TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SRP2REC.SRP2TSROW[1];
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT2U

// write temp storage - cartons
Function XSSRT4A()

   /* write temporary storage - cartons*/

  TA5REC.TA5APPID = "SRF4"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  SRP4REC.SRP4TSLEN = 304; /* length of record*/

  call "TA0050" (SRP4REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    SR0PW01.SRWTSF4M = TA5REC.TA5TSQIX;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1LOCAT[1] = "ADD TS4";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT4A

// purge temp storage - cartons
Function XSSRT4P()

   /* purge temporary storage - cartons*/

  TA5REC.TA5APPID = "SRF4"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (SRP4REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    SR0PW01.SRWTSF4P = 1;
    SR0PW01.SRWTSF4S = 1;
    SR0PW01.SRWTSF4M = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS4";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT4P

// read temp storage - cartons
Function XSSRT4R()

   /* read temporary storage - cartons*/

  set SRP4REC empty;

  TA5REC.TA5APPID = "SRF4"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = SR0PW01.SRWTSF4P; /* current page*/
  SRP4REC.SRP4TSLEN = 304; /* length of record*/

  call "TA0050" (SRP4REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1LOCAT[1] = "READ TS4";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SRP4REC.SRP4TSROW[1];
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT4R

// update temp storage - cartons
Function XSSRT4U()

   /* update temporary storage - cartons*/

  TA5REC.TA5APPID = "SRF4"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = SR0PW01.SRWTSF4P; /* current page*/
  SRP4REC.SRP4TSLEN = 304; /* length of record*/

  call "TA0050" (SRP4REC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "UPD TS4";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP;
    TA1REC.TA1MAP = SR0PW01.SR0PWMAP;
    TA1REC.TA1TBLKE = SRP4REC.SRP4TSROW[1];
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end

  end
end // end XSSRT4U

//*** RECORD=SR0PW01 ****
// ;********************* sr0pw01 *****************************
// ;
// ; this data holding area for sr0p is only initialized upon
// ; first entry to this application.
// ;
// ;***********************************************************
// ***********************
Record SR0PW01 type basicRecord
  10 CAITEM CAITEM ; 
    15 SR0PWCWH SR0PWCWH ; 
    15 * char(1) ; 
    15 SR0PW-CAITEM-OPT-CHAR SR0PW-CAITEM-OPT-CHAR ; 
      20 SR0PW-CAITEM-OPT SR0PW-CAITEM-OPT ; 
    15 * char(1) ; 
    15 SR0PW-CAITEM-SCHED-CHAR SR0PW-CAITEM-SCHED-CHAR ; 
      20 SR0PW-CAITEM-SCHED SR0PW-CAITEM-SCHED ; 
    15 * char(8) ; 
  10 SR0PWUSR SR0PWUSR ; 
    15 SR0PWACT SR0PWACT ; 
    15 * char(14) ; 
  10 SR0PWMSG SR0PWMSG ; 
  10 SR0PWFRA SR0PWFRA ; 
    15 SR0PWFR1 SR0PWFR1 ; 
    15 SR0PWFR2 SR0PWFR2 ; 
  10 * char(1) ; 
  10 SR0PWODT SR0PWODT ; 
    15 SR0PWDTC SR0PWDTC ; 
    15 SR0PWDAT SR0PWDAT ; 
      20 SR0PWDTY SR0PWDTY ; 
      20 SR0PWDTM SR0PWDTM ; 
      20 SR0PWDTD SR0PWDTD ; 
  10 * char(1) ; 
  10 SR0PWDDT SR0PWDDT ; 
    15 SR0PWDMM SR0PWDMM ; 
    15 SR0PWDDD SR0PWDDD ; 
    15 SR0PWDYY SR0PWDYY ; 
  10 * char(1) ; 
  10 SR0PWUDT SR0PWUDT ; 
    15 SR0PWUMM SR0PWUMM ; 
    15 SR0PWUDD SR0PWUDD ; 
    15 SR0PWUYY SR0PWUYY ; 
  10 SR0PWFDT SR0PWFDT ; 
    15 SR0PWFCC SR0PWFCC ; 
    15 SR0PWFDY SR0PWFDY ; 
      20 SR0PWFYY SR0PWFYY ; 
      20 SR0PWFMM SR0PWFMM ; 
      20 SR0PWFDD SR0PWFDD ; 
  10 * char(1) ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 SR0PWMAP SR0PWMAP ; 
  10 * char(1) ; 
  10 SR0PWOPT SR0PWOPT ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 PK1PKSCH PK1PKSCH ; 
  10 SR0PWFPF SR0PWFPF ; 
  10 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
  10 * char(1) ; 
  10 XWTCD XWTCD ; 
  10 XWHSTKLF XWHSTKLF ; 
  10 SR0PW-FIRST-SEL SR0PW-FIRST-SEL ; 
  10 SR0PW-NEW-DATA SR0PW-NEW-DATA ; 
  10 SR0PW-AZ-EOF-FL SR0PW-AZ-EOF-FL ; 
  10 SR0PW-SR-EOF-FL SR0PW-SR-EOF-FL ; 
  10 SR0PW-CURSOR-FOUND SR0PW-CURSOR-FOUND ; 
  10 SR0PW-AZ-HDR-FOUND SR0PW-AZ-HDR-FOUND ; 
  10 SR0PW-AZORD-STAT-CD SR0PW-AZORD-STAT-CD ; 
  10 SR0PW-CRTN-SEL-FL SR0PW-CRTN-SEL-FL ; 
  10 SR0PW-ASN-STAT-CD SR0PW-ASN-STAT-CD ; 
  10 SR0PW-PREV-ORD-SRCE SR0PW-PREV-ORD-SRCE ; 
  10 SR0PW-HOLD-PAGE SR0PW-HOLD-PAGE ; 
  10 SR0PW-HOLD-LINE SR0PW-HOLD-LINE ; 
  10 SR0PW-SR-UPD-PICK-FL SR0PW-SR-UPD-PICK-FL ; 
  10 SR0PW-ALL-PICKED-FL SR0PW-ALL-PICKED-FL ; 
  10 SR0PW-ALL-CHECKED-FL SR0PW-ALL-CHECKED-FL ; 
  10 SR0PW-AZ-PICKED-FL SR0PW-AZ-PICKED-FL ; 
  10 SR0PW-UPD-AZORD-FL SR0PW-UPD-AZORD-FL ; 
  10 SR0PW-UPD-AZHDR-FL SR0PW-UPD-AZHDR-FL ; 
  10 SR0PW-CRTN-WT-CHG-FL SR0PW-CRTN-WT-CHG-FL ; 
  10 SR0PW-UPD-TS SR0PW-UPD-TS ; 
  10 SRWERRFL SRWERRFL ; 
  10 SR0PW-SUB SR0PW-SUB ; 
  10 SR0PW-SUB1 SR0PW-SUB1 ; 
  10 SR0PW-CRTN-WT num(5,2) ; 
  10 SR0PW-ORD-ID num(9) ; 
    15 SR0PW-ORD-DIGIT num(1) [9] ; 
  10 SR0PW-DISP-DT num(6) ; 
    15 SR0PW-DISP-MM num(2) ; 
    15 SR0PW-DISP-DD num(2) ; 
    15 SR0PW-DISP-YY num(2) ; 
  10 SR0PW-DB2-DT num(8) ; 
    15 SR0PW-DB2-CC num(2) ; 
    15 SR0PW-DB2-YY num(2) ; 
    15 SR0PW-DB2-MM num(2) ; 
    15 SR0PW-DB2-DD num(2) ; 
  10 SR0PW-HOLD-DT num(8) ; 
  10 * char(1) ; 
  10 SRWTSF2S SRWTSF2S ; 
  10 SRWTSF2P SRWTSF2P ; 
  10 SRWTSF2M SRWTSF2M ; 
  10 SRWTSF4S SRWTSF4S ; 
  10 SRWTSF4P SRWTSF4P ; 
  10 SRWTSF4M SRWTSF4M ; 
end // end SR0PW01

Record SR0PW02 type basicRecord
  10 SR0PWIX1 SR0PWIX1 ; 
  10 SR0PWIX2 SR0PWIX2 ; 
  10 SR0PWIX3 SR0PWIX3 ; 
  10 * char(3) ; 
  10 SR0PW800 SR0PW800 ; 
  10 * char(3) ; 
  10 SR0PWODR SR0PWODR [900] ; 
    15 SR0PWORD SR0PWORD ; 
    15 SR0PWSUB SR0PWSUB ; 
    15 SR0PWSFL SR0PWSFL ; 
    15 SR0PWAFL SR0PWAFL ; 
    15 SR0PWSDT SR0PWSDT ; 
      20 SR0PWPCE SR0PWPCE ; 
      20 SR0PWPDT SR0PWPDT ; 
    15 SR0PWCAR SR0PWCAR ; 
    15 SR0PWSCG SR0PWSCG ; 
    15 SR0PWPRO SR0PWPRO ; 
    15 SR0PWDTS SR0PWDTS ; 
      20 SR0PWDCE SR0PWDCE ; 
      20 SR0PWDSH SR0PWDSH ; 
  10 * char(1) ; 
  10 SR0PW790 SR0PW790 ; 
    15 SR0PW-LIT1 SR0PW-LIT1 ; 
    15 SR0PWWHS SR0PWWHS ; 
    15 SR0PW-LIT2 SR0PW-LIT2 ; 
    15 SR0PWSCH SR0PWSCH ; 
    15 SR0PW-LIT3 SR0PW-LIT3 ; 
    15 SR0PW-NBR SR0PW-NBR ; 
    15 * char(1) ; 
    15 SR0PW-SUB-NBR SR0PW-SUB-NBR ; 
  10 * char(1) ; 
  10 SR0PMDDT SR0PMDDT ; 
  10 SR0PWDFL SR0PWDFL ; 
  10 SR0PWOFL SR0PWOFL ; 
end // end SR0PW02

//*** RECORD=SRP2REC ****
// *     Temporary storage record used to hold orders for a
// *     particular warehouse/schedule for SR0P.
// *
// *     Csp record: SRP2REC
// *
// *     Data from: DSHIP.Vsrord01
// *
// *     Loaded in: SR0P - SR0PS11
// *
// *     Displayed in: SR0P
// *
// *     System statement groups:  XSSRT2P - purge
// *                               XSSRT2A - add/insert
// *                               XSSRT2R - read
// *                               XSSRT2U - update
// *
// *
// *
// ***********************
Record SRP2REC type basicRecord
  5 SRP2GROUP SRP2GROUP ; 
    10 SRP2TSLEN SRP2TSLEN ; 
    10 SRP2TSROW SRP2TSROW [10] ; 
      15 SRP2-SEL SRP2-SEL ; 
      15 SRP2-CUST-ORD-ID SRP2-CUST-ORD-ID ; 
      15 SRP2-NIKE-ORD-ID SRP2-NIKE-ORD-ID ; 
      15 SRP2-BOL-NO SRP2-BOL-NO ; 
      15 SRP2-BOL-SUB SRP2-BOL-SUB ; 
      15 SRP2-PICK-DT SRP2-PICK-DT ; 
      15 SRP2-CARR-CD SRP2-CARR-CD ; 
      15 SRP2-CHARGES SRP2-CHARGES ; 
      15 SRP2-PRO-NO SRP2-PRO-NO ; 
      15 SRP2-PICK-ACT-FL SRP2-PICK-ACT-FL ; 
      15 SRP2-PICK-STAT-FL SRP2-PICK-STAT-FL ; 
      15 SRP2-RLV-INV-FL SRP2-RLV-INV-FL ; 
      15 SRP2-ORD-SRCE SRP2-ORD-SRCE ; 
      15 SRP2-AZ-ORD-STAT-CD SRP2-AZ-ORD-STAT-CD ; 
end // end SRP2REC

//*** RECORD=SRP4REC ****
// *     Temporary storage record used to hold orders or bill
// *     of ladings for a warehouse/schedule for SR0P.
// *
// *     Csp record: SRP4REC
// *
// *     Data from: DSHIP.VAZCTN01
// *
// *     Loaded in: SR0P - SR0PS11
// *
// *     Displayed in: SR0P
// *
// *     System statement groups:  XSSRT4P - purge
// *                               XSSRT4A - add/insert
// *                               XSSRT4R - read
// *                               XSSRT4U - update
// *
// *
// *
// ***********************
Record SRP4REC type basicRecord
  5 SRP4GROUP SRP4GROUP ; 
    10 SRP4TSLEN SRP4TSLEN ; 
    10 SRP4TSROW SRP4TSROW [10] ; 
      15 SRP4-SEL SRP4-SEL ; 
      15 SRP4-CRTN-SEQ SRP4-CRTN-SEQ ; 
      15 SRP4-STAT-CD SRP4-STAT-CD ; 
      15 SRP4-QTY SRP4-QTY ; 
      15 SRP4-WEIGHT SRP4-WEIGHT ; 
      15 SRP4-CHARGES SRP4-CHARGES ; 
end // end SRP4REC

DataItem SR0PMDDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-ALL-CHECKED-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-ALL-PICKED-FL char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-ASN-STAT-CD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-AZ-EOF-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-AZ-HDR-FOUND char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-AZ-PICKED-FL char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// ASN Order Status Code
DataItem SR0PW-AZORD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item option
DataItem SR0PW-CAITEM-OPT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea item option
DataItem SR0PW-CAITEM-OPT-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item schedule
DataItem SR0PW-CAITEM-SCHED num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// commarea item schedule
DataItem SR0PW-CAITEM-SCHED-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-CRTN-SEL-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-CRTN-WT-CHG-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-CURSOR-FOUND char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-FIRST-SEL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-HOLD-LINE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0PW-HOLD-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** 'WHS'
DataItem SR0PW-LIT1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** 'SCH'
DataItem SR0PW-LIT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** 'ORD' or 'BOL'
DataItem SR0PW-LIT3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** order/BOL number
DataItem SR0PW-NBR num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0PW-NEW-DATA char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-PREV-ORD-SRCE char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-SR-EOF-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-SR-UPD-PICK-FL char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// *** pk-pick-sched-id
DataItem SR0PW-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** order/BOL sub number
DataItem SR0PW-SUB-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0PW-SUB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0PW-UPD-AZHDR-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-UPD-AZORD-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PW-UPD-TS char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// *** IO0790 record key ***
DataItem SR0PW790 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** IO0800 record key  ***
DataItem SR0PW800 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0PWACT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** sr-pick-act-fl
DataItem SR0PWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ***  carrier code
DataItem SR0PWCAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea item whse
DataItem SR0PWCWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cur/latest default date
DataItem SR0PWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ****** century
DataItem SR0PWDCE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default day
DataItem SR0PWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default date (todays)
DataItem SR0PWDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no data present flag
DataItem SR0PWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default month
DataItem SR0PWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ****** yymmdd
DataItem SR0PWDSH num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem SR0PWDTC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem SR0PWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem SR0PWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date shipped
DataItem SR0PWDTS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem SR0PWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// default year
DataItem SR0PWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated century
DataItem SR0PWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated day
DataItem SR0PWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated date
DataItem SR0PWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated yymmdd
DataItem SR0PWFDY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formated month
DataItem SR0PWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fastpath request flag
DataItem SR0PWFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st two letters
DataItem SR0PWFR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd two letters
DataItem SR0PWFR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from aplication
DataItem SR0PWFRA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated year
DataItem SR0PWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ** ordr num array index 1 **
DataItem SR0PWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ** ordr num array index 2 **
DataItem SR0PWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ** sr0pm320 array index   **
DataItem SR0PWIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map id
DataItem SR0PWMAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error/warning message
DataItem SR0PWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** order number array ***
DataItem SR0PWODR char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output pick date
DataItem SR0PWODT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order found flag
DataItem SR0PWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu option for process
DataItem SR0PWOPT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** op-cust-ord-id
DataItem SR0PWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ****** century
DataItem SR0PWPCE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ****** yymmdd
DataItem SR0PWPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ***  pro number
DataItem SR0PWPRO char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ***  shipping charge
DataItem SR0PWSCG num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** pk-pick-sched-id
DataItem SR0PWSCH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update setup date
DataItem SR0PWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** sr-pick-stat-fl
DataItem SR0PWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// *** op-nike-ord-id
DataItem SR0PWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used day
DataItem SR0PWUDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used date
DataItem SR0PWUDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used month
DataItem SR0PWUMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0PWUSR char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used year
DataItem SR0PWUYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// *** xwh-whse-cd
DataItem SR0PWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-stat-fl
DataItem SRP2-AZ-ORD-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK-BILL-OF-LADING
DataItem SRP2-BOL-NO num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK-BILL-OF-LADING
DataItem SRP2-BOL-SUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TF-CARR-CD
DataItem SRP2-CARR-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total charges per order
DataItem SRP2-CHARGES num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-CUST-ORD-ID
DataItem SRP2-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-NIKE-ORD-ID
DataItem SRP2-NIKE-ORD-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sr-pick-stat-fl
DataItem SRP2-ORD-SRCE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-act-fl
DataItem SRP2-PICK-ACT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SR-PICK-SCHED-DT
DataItem SRP2-PICK-DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-stat-fl
DataItem SRP2-PICK-STAT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TF-PRO-NBR
DataItem SRP2-PRO-NO char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr-pick-stat-fl
DataItem SRP2-RLV-INV-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map option select field
DataItem SRP2-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SRP2REC group
DataItem SRP2GROUP char(684)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem SRP2TSLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem SRP2TSROW char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK-CRTN-CHARGE-AMT
DataItem SRP4-CHARGES num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK-CRTN-SEQ-NBR
DataItem SRP4-CRTN-SEQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK-CRTN-UNIT-QTY
DataItem SRP4-QTY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map option select field
DataItem SRP4-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AZ-CTN-STAT-CD
DataItem SRP4-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK-ACTL-CRTN-WT
DataItem SRP4-WEIGHT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SRP2REC group
DataItem SRP4GROUP char(304)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem SRP4TSLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem SRP4TSROW char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem SRWCOLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order number
DataItem SRWCUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dimension
DataItem SRWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SRWERRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem SRWGRP char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key
DataItem SRWKEY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// misc. flags
DataItem SRWMISCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message field
DataItem SRWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message number to display
DataItem SRWMSGNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub order nbr
DataItem SRWNORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr times aloc
DataItem SRWNTMAL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pick schedule id
DataItem SRWPKID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quality code
DataItem SRWQUAL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// must return to prev appl
DataItem SRWRETFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option from prev appl
DataItem SRWRETOP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shade code
DataItem SRWSHADE char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spec difference
DataItem SRWSPEC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style
DataItem SRWSTYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SRP2 t-s current last page num
DataItem SRWTSF2M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SRP2 t-s current page/record
DataItem SRWTSF2P smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SRP2 t-s current subscript
DataItem SRWTSF2S smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SRP2 t-s current last page num
DataItem SRWTSF4M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SRP2 t-s current page/record
DataItem SRWTSF4P smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SRP2 t-s current subscript
DataItem SRWTSF4S smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse code
DataItem SRWXWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_LANE_NBR
DataItem SWCLNENB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end