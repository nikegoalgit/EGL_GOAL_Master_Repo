package sr0a;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import sr.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SR0A ****
// ************ SR0A - ship recon master menu *****************
// 
// maintenance history:
// 
//   date     name      description
//   ----     ----      ---------------------------------------
// 10/23/86  tlewis     creation
// 10/28/87  jcampb     add options 11 thru 13
// 10/04/88  jcampb     activate option 12 and 13
// 03/20/89  jwood      checked for use of noncsp opt on calls
// 03/20/89  jwood      added xssegtr logic
// 05/16/89  jcampb     deinstall sr0l (option 3)
// 02/28/94  HKEMPE     Generate/Compile to pick up revised
//                      COMMAREA
// 09/17/97  Kdenne     added option 14
// 10/20/97  Dkesle     Add check in option 12 for whse type
// 12/06/97  KDENNE     added option 15
// 03/19/98  dkesle     added option 5 and 9
// ************************************************************
// description:
//  this is the ship recon master menu.
//  it simply transfers to the requested application within
// ship recon and supports the usual pf keys.
// *********************
Program SR0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SR0AW01 SR0AW01; // record
  SRWREC SRWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use SR0AM.SR0AM020 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SR0A010: SR0A010();
    goto SR0A020; /* converse ship rec master menu*/
    SR0A020: SR0A020();
     /* -----------  sr0a020 flow  -----------------*/

    if (converseVar.eventKey is pa2) /* reset screen*/
      goto SR0A010;
    end

    if (SR0AM020.SR0AMMSG != " "
     || SR0AM020.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto SR0A020; /* errors/msg's - redisplay menu*/
    end

     /* check for invalid pf key or security violation*/

    if (SRWREC.SRWMSG != " ")
      SR0AM020.SR0AMMSG = SRWREC.SRWMSG;
      goto SR0A020;
    end




    goto SR0A020;

  end // end main
end // end SR0A

// init ship rec master menu
Function SR0A010()

    /* -------------  execute process sr0a010  --------------*/

  XSENTRY(); /* appl entry security*/

  XSSEGTR(); /* set segmented transaction id*/


  set SR0AW01 empty;
  set SR0AM020 initial;
  set SRWREC empty;



   /* if youre coming from an application outside ship recon*/
   /* move whatever (if anything) is in the item field to*/
   /* the action field on the map.*/

  if (COMMAREA.CAFROMAP != " ")
    SR0AW01.SR0AWFRA = COMMAREA.CAFROMAP;
    if (SR0AWFR1 != "SR")
      if (COMMAREA.CAITEM > "  ")
        SR0AW01.SR0AWUSR = COMMAREA.CAITEM;
        SR0AM020.SR0AMACT = SR0AW01.SR0AWACT;
      end
      SRWREC.SRWXWHCD = COMMAREA.XWHCD;
      COMMAREA.CAUSERA = SRWREC.SRWGRP;
    else
      SRWREC.SRWGRP = COMMAREA.CAUSERA;
    end
  end


  SR0AM020.SR0AMDT = VGVar.currentShortGregorianDate; /* system date*/

   /* -------------  end process sr0a010  --------------------*/

end // end SR0A010

// converse ship rec menu
Function SR0A020()
   /* -----------  before stage - sr0a020 -----*/


  converse SR0AM020 ;
   /* -----------------  sr0a020  -----------------------------*/

   /* ------------- clear message flds ------------------*/

  converseLib.validationFailed(0);
  SR0AM020.VAGen_EZEMSG = " ";
  SR0AM020.SR0AMMSG = " ";
  SRWREC.SRWMSG = " ";
  set SR0AM020.SR0AMACT initialAttributes;
  set SR0AM020.SR0AMOPT initialAttributes;


  SR0AS01(); /* check standard pf keys*/



  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || SR0AM020.SR0AMMSG != " ")         /* invalid security*/
    exit stack;
  end

  if (SRWREC.SRWXWHCD == " ")
    SRWREC.SRWXWHCD = COMMAREA.XWHCD;
  end

  if (SR0AM020.SR0AMOPT > " " /* fastpath request*/
   && SR0AM020.SR0AMACT > 0) 
    SR0AMMSG = "CHOOSE EITHER FASTPATH OR ACTION BUT NOT BOTH";
    set SR0AM020.SR0AMACT bold;
    set SR0AM020.SR0AMOPT normal;
    set SR0AM020.SR0AMOPT cursor, bold;
    exit stack;
  else
    if (SR0AM020.SR0AMOPT > " ") /* fastpath request*/
      if (converseVar.eventKey is enter)
        COMMAREA.CATOAP = SR0AM020.SR0AMOPT;
        COMMAREA.CAITEM = SR0AM020.SR0AMITM;
        SRWREC.SRWXWHCD = COMMAREA.CAITEM;
        COMMAREA.CAUSERA = SRWREC.SRWGRP;
        XSEXIT(); /* check security/xfer*/
        SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* security failed*/
        COMMAREA.CATOAP = " ";
        exit stack;
      else
        SR0AM020.SR0AMMSG = "PRESS ENTER FOR FASTPATH";
        exit stack;
      end
    end
  end

    /* ----- menu options 1 thru 17 transfer to appropriate*/
          /* applications.*/


   /* check for valid option*/




  if (SR0AM020.SR0AMACT < 1
   || SR0AM020.SR0AMACT > 17)
    SR0AM020.SR0AMMSG = "INVALID OPTION";
    set SR0AM020.SR0AMACT cursor, bold;
    exit stack;
  end

  if (SR0AM020.SR0AMACT == 1) /* prepare batch*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0B";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 2) /* correct order header*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0C";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 3) /* nil packing list menu*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "TS03";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 4) /* correct product*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0M";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 5) /* picking exceptions*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "PW0Y";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 6) /* balance batch*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0G";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 7) /* hold batch*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0D";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 8) /* split batch by order*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0E";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 9) /* split batch by bol*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0F";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 10) /* build schedule from orders*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0H";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 11) /* inquire on schedule by order*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0J";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 12) /* inquire by schedule*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0K";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 13) /* pick schedules*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0P";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

     /* consolidated bill of lading - Non-Carton Warehouses*/

  if (SR0AM020.SR0AMACT == 14)
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0R";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

     /* consolidated bill of lading - Carton Warehouses*/

  if (SR0AM020.SR0AMACT == 15)
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0T";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 16) /* ADV. Ship Notice INQ*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "AZ0A";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

  if (SR0AM020.SR0AMACT == 17) /* request print*/
    COMMAREA.CAFROMAP = "SR0A";
    COMMAREA.CATOAP = "SR0Q";
    XSEXIT();
    SR0AM020.SR0AMMSG = COMMAREA.CAMSG; /* access error*/
    COMMAREA.CATOAP = " ";
  end

    /* -----------   end of process sr0a020  ------------*/

end // end SR0A020

// check standard entry keys
Function SR0AS01()


   /* ------------ start stmt grp sr0as01 -----------------*/

               /* check valid entry key,*/
               /* do menu transfers if requested*/

   /* -----------------------------------------------------*/

  SR0AW01.SR0AWMSG = " ";

  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pa2) /* pa2 - exit application*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help*/
        XSPF1();
        SR0AM020.SR0AMMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " ";
        exit stack;
      else
        if (converseVar.eventKey is pf4 /* pf4 - return to master menu*/
         || converseVar.eventKey is pf3)
          XSPF4();
          SR0AW01.SR0AWMSG = COMMAREA.CAMSG; /* security error*/
          COMMAREA.CATOAP = " ";
          exit stack;
        else
          if (converseVar.eventKey is pf6) /* pf6 - ezeclos for testing*/
            exit program;
          else
            SR0AM020.SR0AMMSG = "INVALID PF KEY"; /* invalid pf key*/
          end
        end
      end
    end
  end


    /* -----------   end of stmt grp sr0as01  ------------*/

end // end SR0AS01

//*** RECORD=SR0AW01 ****
// ;********************* sr0aw01 *****************************
// ;
// ;                work area for sr0a
// ;
// ;***********************************************************
// ***********************
Record SR0AW01 type basicRecord
  10 SR0AWUSR SR0AWUSR ; 
    15 SR0AWACT SR0AWACT ; 
    15 * char(18) ; 
  10 SR0AWMSG SR0AWMSG ; 
  10 SR0AWFRA SR0AWFRA ; 
    15 SR0AWFR1 SR0AWFR1 ; 
    15 SR0AWFR2 SR0AWFR2 ; 
end // end SR0AW01

DataItem SR0AWACT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st two letters
DataItem SR0AWFR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd two letters
DataItem SR0AWFR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from aplication
DataItem SR0AWFRA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0AWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0AWUSR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

