package sr0d;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import sr.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=SR0D ****
// ******************* sr0d - hold batch **********************
// 
// maintenance history
//   date        name       description
//   ----        ----       -----------------------------------
// 10/23/86     tlewis      creation
// 04/07/88     mblail      changed to hold any batch status
//                            except 'r' (released).
// 10/20/88     jwood       changed call options to NONCSP
// 01/20/89     jwood       added xssegtr logic
// 02/28/94     HKEMPE      Generate/Compile to pick up revised
//                          COMMAREA and XWHTBL.
// 02-06-98     oricha      y2k modifications:  sr0d040 - use
//              y2kproj     ezedtel instead of ezedte to load
//                          century for updating dates.
// ************************************************************
// description:
// 
// the purpose of this application is to put a hold status on
// batchs.
// *********************
Program SR0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  SR0DW01 SR0DW01; // record
  SR0DW02 SR0DW02; // record
  SR1REC SR1REC; // record
  SRWREC SRWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use SR0DM.SR0DM020 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SR0D010: SR0D010();
    goto SR0D020; /* go to hold batch scrn*/
    SR0D020: SR0D020();
     /* -----------  sr0d020 flow  -----------------*/

     /* test for pa2 and save warehouse code and name*/

    if (converseVar.eventKey is pa2)
      SR0DW02.XWHCD = SR0DM020.XWHCD;
      SR0DW02.XWHABRV = SR0DM020.XWHABRV;
      goto SR0D010; /* back to initialize screen*/
    else
      if (SR0DM020.SR0DMMSG != " "
       || SR0DM020.VAGen_EZEMSG != " "
       || converseVar.validationMsgNum != 0)
        set SR0DM020 alarm;
        goto SR0D020; /* errors/msg's - redisplay scrn*/
      else
        if (SRWREC.SRWMSG != " ")
          SR0DM020.SR0DMMSG = SRWREC.SRWMSG;
          set SR0DM020 alarm;
          goto SR0D020; /* errors/msg's - redisplay scrn*/
        else
          goto SR0D040; /* no errors so update the*/
        end /* batch headers*/
      end
    end
     /* ----------- end sr0d020 flow ------------------*/

    SR0D040: SR0D040();
    set SR0DM020.PK1PKSCH cursor;
    goto SR0D020; /* back to converse screen*/
  end // end main
end // end SR0D

// init hold batch scrn
Function SR0D010()

    /* -------------  execute process sr0d010  --------------*/
  XSENTRY(); /* appl entry security*/

  XSSEGTR(); /* set segmented transaction id*/



  set SR1REC empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set SR0DW01 empty;
  set SRWREC empty;
  set SR0DM020 initial;
  set SR0DM020.PK1PKSCH cursor;

   /* if youre coming from an application outside ship recon*/
   /* move whatever (if anything) is in the item field to*/
   /* the warehouse code on the map.*/

  if (COMMAREA.CAFROMAP != " ")
    SR0DW01.SR0DWFRA = COMMAREA.CAFROMAP;
    if (SR0DW01.SR0DWFR1 != "SR")
      SR0DW01.SR0DWITM = COMMAREA.CAITEM;
      SR0DM020.XWHCD = SR0DW01.SR0DWWHS;
    else
      SRWREC.SRWGRP = COMMAREA.CAUSERA;
      SR0DM020.XWHCD = SRWREC.SRWXWHCD;
    end
  else
     /* next sentence.*/
  end

   /* about the following 'if' stmt:*/


   /* if pa2 was requested then move the last warehouse code the*/
   /* user entered to the screen.*/

  if (converseVar.eventKey is pa2)
    SR0DM020.XWHCD = SR0DW02.XWHCD;
    SR0DM020.XWHABRV = SR0DW02.XWHABRV;
  end



  SR0DM020.SR0DMDT = VGVar.currentShortGregorianDate; /* system date*/


   /* -------------  end process sr0d010  --------------------*/

end // end SR0D010

// converse hold batch scrn
Function SR0D020()
   /* -----------  before stage - sr0d020 -----*/



  converse SR0DM020 ;
   /* -----------------  sr0d020  -----------------------------*/

  SR0DM020.VAGen_EZEMSG = " ";
  SR0DM020.SR0DMMSG = " "; /* clear all message fields*/
  SRWREC.SRWMSG = " ";

  SRWREC.SRWXWHCD = SR0DM020.XWHCD; /* move warehouse cd*/
  COMMAREA.CAUSERA = SRWREC.SRWGRP; /* in case of transfer.*/
  COMMAREA.CAFROMAP = "SR0D";

  XSSRS01(); /* check standard pf keys*/

  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || SR0DM020.SR0DMMSG != " ")         /* invalid security*/
    exit stack;
  end



  SR0DS01(); /* edit warehouse code*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


  SR0DW01.SR0DWFL1 = "N"; /* initialize error flag to no*/
  if (converseVar.eventKey is enter)
    SR0DS04(); /* check required fields*/
  end

  if (converseVar.validationMsgNum == 0)
     /* next sentence*/
  else
    exit stack;
  end





  if (converseVar.eventKey is enter)
    SR0DS02(); /* edit schedule nbr*/
  end

  exit stack;


    /* -----------   end of process sr0d020  ------------*/
end // end SR0D020

// update batch headers
Function SR0D040()

   /* ---------------  execute process sr0d040  --------------*/
                    /* update batch headers*/
   /* --------------------------------------------------------*/



  SR1REC.PK1PKSCH = SR0DM020.PK1PKSCH;

   /* -------- y2k out begin ------*/
   /* MOVE 19 TO SR0DW01.SR0DWFCT;*/
   /* -------- y2k out end --------*/

  SR0DW01.SR0DWTIM = VGVar.currentFormattedTime;
  SR0DW01.SR0DWTHH = SR0DW01.SR0DWHH;
  SR0DW01.SR0DWTMM = SR0DW01.SR0DWMI;
  SR1REC.SR1TMCHG = SR0DW01.SR0DWTI;
  SR1REC.ZZZCHGTM = SR0DW01.SR0DWTI;
  SR1REC.SR1HLDRN = SR0DM020.SR1HLDRN;
  SR1REC.SR1BTST = "H";

   /* ----- Y2K OUT BEGIN --------*/
   /* MOVE 19 TO SR0DW01.SR0DWFCT;*/
   /* MOVE EZEDTE TO SR0DW01.SR0DWFDA;*/
   /* ------ y2k out end ---------*/
   /* ------ y2k in begin --------*/
  SR0DW01.SR0DWFDT = VGVar.currentGregorianDate;
   /* ------ y2k in  end ---------*/
  SR1REC.SR1DTCHG = SR0DW01.SR0DWFDT;
  SR1REC.ZZZCHGDT = SR0DW01.SR0DWFDT;
  SR0DS06(); /* update batch header*/

   /* check to see if there is a message using ezemno from*/
   /* sr0ds06. if so this means that the record has been*/
   /* updated since the user last saw it. they will have to*/
   /* update it again.*/

  if (converseVar.validationMsgNum != 15) /* batch(s) updated*/
    exit stack;
  end

   /* if no problems with updates then commit*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit the changes*/
  exit stack;

   /* -------------  end process sr0d040  --------------------*/

end // end SR0D040

// edit warehouse code
Function SR0DS01()


   /* ------------ start stmt grp sr0ds01 -----------------*/

                /* edit warehouse code*/

   /* -----------------------------------------------------*/

  set SR0DM020.XWHCD initialAttributes;
  set SR0DM020.XWHABRV initialAttributes;
  if (SR0DM020.XWHCD != " ")
    if (SR0DM020.XWHCD in XWHTBL.XWHCD)
      SR0DM020.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      converseLib.validationFailed(1); /* non-existent warehouse*/
      set SR0DM020.XWHCD cursor, modified, bold;
      SR0DM020.XWHABRV = " ";
    else
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(2); /* inactive warehouse*/
        set SR0DM020.XWHCD cursor, modified, bold;
        set SR0DM020.XWHABRV modified, bold;
      else
        return;
      end
    end
  else
    converseLib.validationFailed(17); /* warehouse code required*/
    set SR0DM020.XWHCD cursor, modified, bold;
  end


   /* -------------   end of stmt grp sr0ds01  ------------*/

end // end SR0DS01

// edit pick schedule nbr
Function SR0DS02()

   /* ------------ start stmt grp sr0ds02 -----------------*/

                   /* edit pick nbr*/

   /* -----------------------------------------------------*/


             /* edit pick schedule number*/

  set SR0DM020.PK1PKSCH initialAttributes;
  SR0DW01.SR0DWFL2 = "N";
  SR0DS03(); /* read batch record*/
  if (SR0DW01.SR0DWFL2 == "Y") /* error on btch hdr read*/
    converseLib.validationFailed(16); /* pick schedule nbr not on file*/
    set SR0DM020.PK1PKSCH cursor, bold;
  else
    SR0DS08(); /* check batch status*/
  end






   /* -------------   end of stmt grp sr0ds02  ------------*/

end // end SR0DS02

// read batch header
Function SR0DS03()

   /* ------------ start stmt grp sr0ds03 -----------------*/

               /* read hdr batch record*/

   /* -----------------------------------------------------*/
  SR0DW01.SR0DWMSG = " ";

  set SR1REC empty; /* clear batch record*/
  set SQLCA empty;

  SR1REC.XWHCD = SR0DM020.XWHCD; /* set batch header key*/
  SR1REC.PK1PKSCH = SR0DM020.PK1PKSCH;
  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read batch header*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SR0DW01.SR0DWFL2 = "Y"; /* error on btch hdr read*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRHDR01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1TBLKE = SR1REC.SR1KEYS;
      TA1REC.TA1PGMNM = "SR0DS03";
      TA1REC.TA1LOC = "READING DB2 VSRHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CAUSERA = " ";
      XSPF4();
    end
  end




    /* -----------   end of stmt grp sr0ds03  ------------*/

end // end SR0DS03

// check for required fields
Function SR0DS04()

   /* ---------------  statement group sr0ds04  --------------*/

                   /* check for required fields*/

   /* --------------------------------------------------------*/

  set SR0DM020.PK1PKSCH initialAttributes;
  set SR0DM020.SR1HLDRN initialAttributes;

  if (SR0DM020.PK1PKSCH == 0)
    set SR0DM020.PK1PKSCH cursor, bold;
    SR0DW01.SR0DWFL1 = "Y";
    converseLib.validationFailed(14); /* pick number required*/
  end

  if (SR0DM020.SR1HLDRN == " "
   && SR0DW01.SR0DWFL1 == "Y")
    set SR0DM020.SR1HLDRN bold;
  else
    if (SR0DM020.SR1HLDRN == " "
     && SR0DW01.SR0DWFL1 == "N")
      set SR0DM020.SR1HLDRN cursor, bold;
      converseLib.validationFailed(64); /* hold reason required*/
    end
  end

   /* -------------  end statement group sr0ds04 -------------*/

end // end SR0DS04

// update header
Function SR0DS06()

   /* ---------------  statement group sr0ds06  --------------*/

                    /* update batch headers*/

   /* --------------------------------------------------------*/




    /* update batch header*/

  set SQLCA empty;

  call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(71); /* batch(s) updated*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(20); /* record updated since last reference*/
      set SR0DM020.PK1PKSCH bold;
      return;
    else
      SR0DW01.SR0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = SR0DW01.SR0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRHDR01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1TBLKE = SR1REC.SR1KEYS;
      TA1REC.TA1PGMNM = "SR0DS06";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VSRHDR01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end


   /* -------------  end statement group sr0ds06 -------------*/

end // end SR0DS06

// check batch status
Function SR0DS08()

   /* ------------ start stmt grp sr0ds08 -----------------*/

                 /* check batch status*/

   /* -----------------------------------------------------*/


             /* any batch status except 'r' (released)*/
                /* may be held.*/


  if (SR1REC.SR1BTST != "R")
    /* next sentence*/
  else
    converseLib.validationFailed(40); /* batch status is released*/
    set SR0DM020.PK1PKSCH cursor, bold;
    return;
  end



   /* -------------   end of stmt grp sr0ds08  ------------*/

end // end SR0DS08

//*** RECORD=SR0DW01 ****
// ;********************** sr0dw01 ****************************
// ;
// ;         work record for sr0d: hold batch
// ;
// ;***********************************************************
// ***********************
Record SR0DW01 type basicRecord
  5 SR0DWGR1 SR0DWGR1 ; 
    10 XWHCD XWHCD ; 
    10 SR0DWMSG SR0DWMSG ; 
  5 SR0DWWRK SR0DWWRK ; 
    10 SR0DWDT SR0DWDT ; 
      15 SR0DWMM SR0DWMM ; 
      15 SR0DWDD SR0DWDD ; 
      15 SR0DWYY SR0DWYY ; 
    10 SR0DWFRA SR0DWFRA ; 
      15 SR0DWFR1 SR0DWFR1 ; 
      15 SR0DWFR2 SR0DWFR2 ; 
    10 SR0DWITM SR0DWITM ; 
      15 SR0DWWHS SR0DWWHS ; 
      15 * char(18) ; 
    10 SR0DWFDT SR0DWFDT ; 
      15 SR0DWFCT SR0DWFCT ; 
      15 SR0DWFDA SR0DWFDA ; 
        20 SR0DWFYY SR0DWFYY ; 
        20 SR0DWFMM SR0DWFMM ; 
        20 SR0DWFDD SR0DWFDD ; 
    10 SR0DWTIM SR0DWTIM ; 
      15 SR0DWHH SR0DWHH ; 
      15 * char(1) ; 
      15 SR0DWMI SR0DWMI ; 
      15 * char(1) ; 
      15 SR0DWSS SR0DWSS ; 
    10 SR0DWTI SR0DWTI ; 
      15 SR0DWTHH SR0DWTHH ; 
      15 SR0DWTMM SR0DWTMM ; 
    10 SR0DWPIC SR0DWPIC ; 
    10 SR0DWFL1 SR0DWFL1 ; 
    10 SR0DWFL2 SR0DWFL2 ; 
    10 SR0DWFL3 SR0DWFL3 ; 
    10 SR0DWFL4 SR0DWFL4 ; 
    10 SR0DWSQL SR0DWSQL ; 
end // end SR0DW01

//*** RECORD=SR0DW02 ****
// ;************************* sr0dw02 *************************
// ;
// ;       save area for warehouse and abreviation
// ;
// ;***********************************************************
// ***********************
Record SR0DW02 type basicRecord
  5 SR0DWSAV SR0DWSAV ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
end // end SR0DW02

// day
DataItem SR0DWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group date
DataItem SR0DWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem SR0DWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yymmdd
DataItem SR0DWFDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem SR0DWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group yyyymmdd
DataItem SR0DWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error on previous line flag
DataItem SR0DWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error on btch hdr read flag
DataItem SR0DWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// is there data flag
DataItem SR0DWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// batch status error
DataItem SR0DWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem SR0DWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first 2 chars of from appl
DataItem SR0DWFR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last 2 chars of from appl
DataItem SR0DWFR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from appl name
DataItem SR0DWFRA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem SR0DWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem SR0DWGR1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem SR0DWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// caitem group level
DataItem SR0DWITM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem SR0DWMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem SR0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0DWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold pick nbr
DataItem SR0DWPIC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem SR0DWSAV char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql hold area
DataItem SR0DWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem SR0DWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hours
DataItem SR0DWTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time
DataItem SR0DWTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group time
DataItem SR0DWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem SR0DWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whse cd from commarea.caitem
DataItem SR0DWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start of work area
DataItem SR0DWWRK char(197)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem SR0DWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

