package sr0q;
import az.common.*;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SR0Q ****
// This application displays the Background Job Request Menu
// screen and subordinate Background Job Submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Background Job Request Subroutine (TA0P).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.  The data in working storage is substituted
// and the statement is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      03/25/93  HKEMPE  New application.
// SR#0     06/02/93  HKEMPE  Standardize process groups where
//                            I/O subroutines are called.
// SR#0     06/18/93  HKEMPE  Correct error reporting routines
// SR#0     10/08/93  HKEMPE  Change to follow Nike's standard
//                            way of submitting job online-
//                            SR0Q025, SR0QS-TA0230, SR0QT02,
//                            SR0QW03, TA3REC.
// SR9001   03/01/94  HKEMPE  Generate/Compile to pick up
//                            revised COMMAREA and XWHTBL.
// SR#0     08/09/95  HKEMPE  Rearranged SR0QM002 map and
//                            included SR0R request to print.
// SR#0     10/22/97  DKESLE  Added return to SR0T
// SR#0     11/13/97  DKESLE  Added carton check list screen
// SR#0     01/08/98  DKESLE  add pop-up for new report
// tblchgs  06/18/98  tdaugh  regen for table changes
// kintana  11/17/03 bmahal modified for VICS BOL printing
// 60938
// k100424 11/12/04 rathal  modified the BOL printing job for
//  winchester whse
// *********************
Program SR0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  SR0QW01 SR0QW01; // record
  SR0QW02 SR0QW02; // record
  SR0QW03 SR0QW03; // record
  SR0QW05 SR0QW05; // record
  SR0QW06 SR0QW06; // record
  SR0QW92 SR0QW92; // record
  SR2REC SR2REC; // record
  SREREC SREREC; // record
  SRWREC SRWREC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAZCTN01 VAZCTN01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SR0QTP2 {deleteAfterUse = yes}; // table
  use SR0QTT2 {deleteAfterUse = yes}; // table
  use SR0QTP3 {deleteAfterUse = yes}; // table
  use SR0QTT3 {deleteAfterUse = yes}; // table
  use XWHTBL; // table
  use SR0QM.SR0QM002,  // forms
      SR0QM.SR0QM003, 
      SR0QM.SR0QM099, 
      SR0QM.TA0PM001, 
      SR0QM.XMSRM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSR001: XPSR001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set SR0QM002 initial; /* M002 input/output*/
    set SR0QM099 initial; /* M099 input/output*/
    set SR0QW01 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Obtain distribution information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/

    SR0QW01.SR0QWIXL = 3; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0Q001; /* Converse the main process*/

    SR0Q001: SR0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SR0Q001; /* Converse the main process*/

  end // end main
end // end SR0Q

// Main process to display a map
Function SR0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SR0QW01.SR0QWSWX != "Y") /* EXIT not requested*/

    if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
     || COMMAREA.CAFROMAP == "SR0T") /* or from SR0T*/
     && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

      if (converseVar.validationMsgNum != 0) /* If error*/

        if (COMMAREA.CAFROMAP == "SR0R") /* If from SR0R*/
          COMMAREA.CATOAP = "SR0R"; /* TO application*/
        else
          COMMAREA.CATOAP = "SR0T"; /* TO application*/
        end

        SRWMSGNO = converseVar.validationMsgNum;
        COMMAREA.CAUSERA = SRWREC.CAUSERA; /* Save user area*/

        XSEXIT(); /* Exit to another application*/

      end

      set SR0QW92 empty; /* Bol data array*/

      SR0QW92.PK1BLLAD[1] = SRWREC.PK1BLLAD[1]; /* FROM BOL*/
      SR0QW92.SR2BLLSU[1] = SRWREC.SR2BLLSU[1];

      SR0QW92.PK1BLLAD[2] = SRWREC.PK1BLLAD[2]; /* TO BOL*/
      SR0QW92.SR2BLLSU[2] = SRWREC.SR2BLLSU[2];

      SR0Q010(); /* Specify report distribution*/

      SR0QW01.SR0QMSEL[1] = "S"; /* Line 1 selected*/
      SR0QW01.SR0QMSEL[2] = "S"; /* Line 2 selected*/

      TA6REC.TA6SUBSW = "N"; /* Report dist info requested*/

    end

    if (SR0QW01.SR0QMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      SR0Q010(); /* Specify report distribution*/

    end

    if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
     || COMMAREA.CAFROMAP == "SR0T") /* or from SR0T*/
     && SRWREC.SRWRETFL == "Y"       /* and must return to SR0R/SR0T*/
     && SR0QW01.SR0QMSEL[1] == "C")  /* and line 1 was cancelled*/

      SRWMSGNO = 186; /* Print request cancelled*/

      if (COMMAREA.CAFROMAP == "SR0R") /* If from SR0R*/
        COMMAREA.CATOAP = "SR0R"; /* TO application*/
      else
        COMMAREA.CATOAP = "SR0T"; /* TO application*/
      end

      COMMAREA.CAUSERA = SRWREC.CAUSERA; /* Save user area*/

      XSEXIT(); /* Exit to another application*/

    end

    if (SR0QW01.SR0QMSEL[2] == "S") /* Line 2 was selected*/

      SR0Q020(); /* Print consolidated bol*/

    end

    if (SR0QW01.SR0QMSEL[3] == "S") /* Line 3 was selected*/

      SR0Q030(); /* Print Carton Check List Report*/

    end

    if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
     || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
     && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

      if (converseVar.validationMsgNum == 0) /* and no error*/
        if (SR0QW01.SR0QMSEL[2] == "*") /* IF PRINT BOL LINE SELECTED*/
          SRWMSGNO = 184; /* Print BOL msg*/
        else
          SRWMSGNO = 204; /* Print Carton Check List msg*/
        end
      else
        SRWMSGNO = converseVar.validationMsgNum; /* Error*/
      end

      if (COMMAREA.CAFROMAP == "SR0R") /* If from SR0R*/
        COMMAREA.CATOAP = "SR0R"; /* TO application*/
      else
        COMMAREA.CATOAP = "SR0T"; /* TO application*/
      end
      COMMAREA.CAUSERA = SRWREC.CAUSERA; /* Save user area*/

      XSEXIT(); /* Exit to another application*/

    end

  end

  SR0QW01.SR0QWSWX = "N"; /* Reset exit requested switch*/

  SR0Q990(); /* Report Request Menu*/

end // end SR0Q001

// Specify output destination
Function SR0Q010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the report distribution for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Report distribution information*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        SR0QW01.SR0QMSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      SR0QW01.SR0QMSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXERRID = "010"; /* Module identification*/
  converseLib.validationFailed(124); /* Unexpected error occurred*/

end // end SR0Q010

// Development Model Example
Function SR0Q020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0Q021(); /* Format and display the map*/

  SR0Q022(); /* Check attention identifier*/

  SR0Q023(); /* Reset fields to normal intensity*/

  SR0Q024(); /* Verify the data that was entered*/

  SR0Q025(); /* Process valid input request*/

end // end SR0Q020

// Format and display the map
Function SR0Q021()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to the previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y"       /* and must return to SR0R/SR0T*/
   && converseVar.validationMsgNum == 0) /* and no error*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SR0QM002.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
  SR0QM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0QM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SR0QM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SR0QM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SR0QM002.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/
  SR0QM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0QM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0QM002.XXXERRID = SRWREC.XXXERRID; /* Module identification*/

    set SR0QM002 alarm; /* Indicate sound alarm*/

  end

  converse SR0QM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXMSGNO = 0; /* Message number*/
  SRWREC.XXXERRID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

end // end SR0Q021

// Check attention identifier
Function SR0Q022()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* or from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SR0QW01.SR0QMSEL[2] = "C"; /* Indicate selection cancelled*/

    set SR0QM002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SR0QW01.SR0QWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SRWREC.XXXERRID = "022"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SR0Q022

// Reset highlighted fields
Function SR0Q023()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

  while (SR0QW01.SR0QWIXM <= 24) /* Until all are reset*/

    set SR0QM002.PK1BLLAD[SR0QWIXM] initialAttributes; /* Output print group*/

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

  end

end // end SR0Q023

// Verify the entered data
Function SR0Q024()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Ensure that at least one line was entered.*/
   /* Verify the bill of lading selection list.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWSWL = "N"; /* Initialize line switch*/

  SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

  while (SR0QW01.SR0QWIXM <= 24 /* Until all bols are searched*/
   && SR0QW01.SR0QWSWL == "N") /* or an entered line is found*/

    if (SR0QM002.PK1BLLAD[SR0QWIXM] != 0) /* bol was entered*/

      SR0QW01.SR0QWSWL = "Y"; /* Indicate line was entered*/

    end

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

  end

  if (SR0QW01.SR0QWSWL == "N") /* No line was entered*/

    set SR0QM002.PK1BLLAD[1] cursor; /* Position cursor*/
    converseLib.validationFailed(126); /* Indicate parameters required*/
    SRWREC.XXXERRID = "024"; /* Process name*/

  else

    set SR0QW92 empty; /* Initialize working storage*/
    SR0QW01.SR0QWIXM = 24; /* Initialize map index*/

    while (SR0QW01.SR0QWIXM > 0) /* Until all lines verified*/

      if (SR0QM002.PK1BLLAD[SR0QWIXM] != 0) /* bol was entered*/

        SR0QS01(); /* Verify bill of lading*/

      end

      SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM - 1; /* Decrement from index*/

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end SR0Q024

// Process valid request
Function SR0Q025()
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

    TA6REC.TA6ROW = " "; /* Initialize output jcl area*/
    SR0QW01.SR0QWIXT = 1; /* Initialize input index*/
    TA6REC.TA6INDEX = 1; /* Initialize output index*/

    if (TA3REC.TA3RGNID == "03") /* prod environment*/
      SR0Q025-PROD(); /* create prod jcl*/
    else
      SR0Q025-TEST(); /* create test jcl*/
    end

  else
    converseLib.validationFailed(124); /* Error calling ta0230*/
    exit stack;
  end

  TA6REC.TA6SUBSW = "S";
  TA6REC.TA6MSGSW = "N";

  XPTA0P(); /* submit jcl*/

  if (sysVar.errorCode == "00000000"
   && TA6REC.TA6RTNCD == "0")
    SR0QW01.SR0QMSEL[2] = "*";
    set SR0QM002 initial;
    return;
  else
    SRWREC.XXXERRID = "SR0Q025";
    converseLib.validationFailed(124);
    exit stack; /* Exit do display map*/
  end

end // end SR0Q025

// Format prod jcl
Function SR0Q025-PROD()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  while (SR0QTP2.TARJCL[SR0QWIXT] != "/*EOF")
    /**/
    if (SR0QTP2.TARTYPE[SR0QWIXT] == "P")
      set SR0QW02 empty;
      SR0QW02.XWHCD = SRWREC.SRWXWHCD;
      SR0QW01.SR0QWIXM = 1;
      /**/
      while (SR0QW01.SR0QWIXM <= 24)
        if (SR0QW92.PK1BLLAD[SR0QWIXM] != 0)
          SR0QW02.SR0QWBOL = SR0QW92.PK1BLLAD[SR0QWIXM];
          /**/
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == -1)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-100(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          /**/
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == 99)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-300(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          /**/
          SR0QW02.SR0QWBLS = SR0QW92.SR2BLLSU[SR0QWIXM];
          TA6REC.TARJCL[TA6INDEX] = SR0QW02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = "P";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        end
        SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment map index*/
      end
      converseLib.clearScreen();
       /* reset screen*/
    else
      /**/
      if (SR0QTP2.TARTYPE[SR0QWIXT] == "D")
        set SR0QW06 empty;
        SR0QW06.SR0QW-RMT-NAME = TA6REC.XURDEST;
        SR0QTP2.SR0QWDST[SR0QWIXT] = SR0QW06.SR0QW-RMT-VALUE;
        TA6REC.TARJCL[TA6INDEX] = SR0QTP2.TARJCL[SR0QWIXT];
        TA6REC.TARTYPE[TA6INDEX] = "D";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
      else

        if (SR0QTP2.TARTYPE[SR0QWIXT] == "E")
          set SR0QW06 empty;
          if (SRWREC.SRWXWHCD == "04")
            SR0QTP2.SR0QWEXE[SR0QWIXT] = "SR1302";
          else
            SR0QTP2.SR0QWEXE[SR0QWIXT] = "SR1301";
          end
          TA6REC.TARJCL[TA6INDEX] = SR0QTP2.TARJCL[SR0QWIXT];
          TA6REC.TARTYPE[TA6INDEX] = "E";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        else
       /**/
          TA6REC.TARJCL[TA6INDEX] = SR0QTP2.TARJCL[SR0QWIXT];
          TA6REC.TARTYPE[TA6INDEX] = SR0QTP2.TARTYPE[SR0QWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        end
      end
    end
    /**/
    SR0QW01.SR0QWIXT = SR0QW01.SR0QWIXT + 1; /* Increment PT3 index*/
    /**/
  end

  TA6REC.TARJCL[TA6INDEX] = SR0QTP2.TARJCL[SR0QWIXT]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = SR0QTP2.TARTYPE[SR0QWIXT]; /* TYPE*/
end // end SR0Q025-PROD

// Format test jcl
Function SR0Q025-TEST()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  while (SR0QTT2.TARJCL[SR0QWIXT] != "/*EOF")
    /**/
    if (SR0QTT2.TARTYPE[SR0QWIXT] == "P")
      set SR0QW02 empty;
      SR0QW02.XWHCD = SRWREC.SRWXWHCD;
      SR0QW01.SR0QWIXM = 1;
      /**/
      while (SR0QW01.SR0QWIXM <= 24)
        if (SR0QW92.PK1BLLAD[SR0QWIXM] != 0)
          SR0QW02.SR0QWBOL = SR0QW92.PK1BLLAD[SR0QWIXM];
          /**/
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == -1)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-100(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
              
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          /**/
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == 99)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-300(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
              
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          /**/
          SR0QW02.SR0QWBLS = SR0QW92.SR2BLLSU[SR0QWIXM];
          TA6REC.TARJCL[TA6INDEX] = SR0QW02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = "P";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        end
        SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment map index*/
      end
      converseLib.clearScreen();
      
    else
      /**/
      if (SR0QTT2.TARTYPE[SR0QWIXT] == "D")
        set SR0QW06 empty;
        SR0QW06.SR0QW-RMT-NAME = TA6REC.XURDEST;
        SR0QTT2.SR0QWDST[SR0QWIXT] = SR0QW06.SR0QW-RMT-VALUE;
        TA6REC.TARJCL[TA6INDEX] = SR0QTT2.TARJCL[SR0QWIXT];
        TA6REC.TARTYPE[TA6INDEX] = "D";
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
      else

        if (SR0QTT2.TARTYPE[SR0QWIXT] == "E")
          set SR0QW06 empty;
          if (SRWREC.SRWXWHCD == "04")
            SR0QTT2.SR0QWEXE[SR0QWIXT] = "SR1302";
          else
            SR0QTT2.SR0QWEXE[SR0QWIXT] = "SR1301";
          end
          TA6REC.TARJCL[TA6INDEX] = SR0QTT2.TARJCL[SR0QWIXT];
          TA6REC.TARTYPE[TA6INDEX] = "E";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        else
       /**/
          TA6REC.TARJCL[TA6INDEX] = SR0QTT2.TARJCL[SR0QWIXT];
          TA6REC.TARTYPE[TA6INDEX] = SR0QTT2.TARTYPE[SR0QWIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        /**/
        end
      end
    end
    SR0QW01.SR0QWIXT = SR0QW01.SR0QWIXT + 1; /* Increment TT3 index*/
    /**/
  end

  TA6REC.TARJCL[TA6INDEX] = SR0QTT2.TARJCL[SR0QWIXT]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = SR0QTT2.TARTYPE[SR0QWIXT]; /* TYPE*/
end // end SR0Q025-TEST

// print carton list report
Function SR0Q030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0Q031(); /* Format and display the map*/

  SR0Q032(); /* Check attention identifier*/

  SR0Q033(); /* Reset fields to normal intensity*/

  SR0Q034(); /* Verify the data that was entered*/

  SR0Q035(); /* Process valid input request*/

end // end SR0Q030

// Format and display the map
Function SR0Q031()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to the previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y"       /* and must return to SR0R/SR0T*/
   && converseVar.validationMsgNum == 0) /* and no error*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  SR0QM003.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
  SR0QM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0QM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  SR0QM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  SR0QM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  SR0QM003.XURBLDID = TA6REC.XURBLDID; /* NIKE location*/
  SR0QM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0QM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0QM003.XXXERRID = SRWREC.XXXERRID; /* Module identification*/

    set SR0QM003 alarm; /* Indicate sound alarm*/

  end

  converse SR0QM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXMSGNO = 0; /* Message number*/
  SRWREC.XXXERRID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

end // end SR0Q031

// Check attention identifier
Function SR0Q032()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* or from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SR0QW01.SR0QMSEL[3] = "C"; /* Indicate selection cancelled*/

    set SR0QM003 initial; /* M003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SR0QW01.SR0QWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SRWREC.XXXERRID = "022"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SR0Q032

// Reset highlighted fields
Function SR0Q033()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

  while (SR0QW01.SR0QWIXM <= 24) /* Until all are reset*/

    set SR0QM003.PK1BLLAD[SR0QWIXM] initialAttributes; /* Output print group*/

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

  end

end // end SR0Q033

// Verify the entered data
Function SR0Q034()
   /* ------------------------------------------------------------*/
   /* If request is from SR0R/SR0T, return to previous routine.*/
   /* ------------------------------------------------------------*/

  if ((COMMAREA.CAFROMAP == "SR0R" /* If from SR0R*/
   || COMMAREA.CAFROMAP == "SR0T") /* If from SR0T*/
   && SRWREC.SRWRETFL == "Y")      /* and must return to SR0R/SR0T*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Ensure that at least one line was entered.*/
   /* Verify the bill of lading selection list.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWSWL = "N"; /* Initialize line switch*/

  SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

  while (SR0QW01.SR0QWIXM <= 24 /* Until all bols are searched*/
   && SR0QW01.SR0QWSWL == "N") /* or an entered line is found*/

    if (SR0QM003.PK1BLLAD[SR0QWIXM] != 0) /* bol was entered*/

      SR0QW01.SR0QWSWL = "Y"; /* Indicate line was entered*/

    end

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

  end

  if (SR0QW01.SR0QWSWL == "N") /* No line was entered*/

    set SR0QM003.PK1BLLAD[1] cursor; /* Position cursor*/
    converseLib.validationFailed(126); /* Indicate parameters required*/
    SRWREC.XXXERRID = "024"; /* Process name*/

  else

    set SR0QW92 empty; /* Initialize working storage*/
    SR0QW01.SR0QWIXM = 24; /* Initialize map index*/

    while (SR0QW01.SR0QWIXM > 0) /* Until all lines verified*/

      if (SR0QM003.PK1BLLAD[SR0QWIXM] != 0) /* bol was entered*/

        SR0QS03(); /* Verify bill of lading*/

      end

      SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM - 1; /* Decrement from index*/

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end SR0Q034

// Process valid request
Function SR0Q035()
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

    TA6REC.TA6ROW = " "; /* Initialize output jcl area*/
    SR0QW01.SR0QWIXT = 1; /* Initialize input index*/
    TA6REC.TA6INDEX = 1; /* Initialize output index*/

    if (TA3REC.TA3RGNID == "03") /* prod environment*/
      SR0Q035-PROD(); /* create prod jcl*/
    else
      SR0Q035-TEST(); /* create test jcl*/
    end

  else
    converseLib.validationFailed(124); /* Error calling ta0230*/
    exit stack;
  end

  TA6REC.TA6SUBSW = "S";
  TA6REC.TA6MSGSW = "N";

  XPTA0P(); /* submit jcl*/

  if (sysVar.errorCode == "00000000"
   && TA6REC.TA6RTNCD == "0")
    SR0QW01.SR0QMSEL[3] = "*";
    set SR0QM003 initial;
    return;
  else
    SRWREC.XXXERRID = "SR0Q035";
    converseLib.validationFailed(124);
    exit stack; /* Exit do display map*/
  end

end // end SR0Q035

// Format prod jcl
Function SR0Q035-PROD()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  while (SR0QTP3.TARJCL[SR0QWIXT] != "/*EOF")

    if (SR0QTP3.TARTYPE[SR0QWIXT] == "P")
      set SR0QW02 empty;
      SR0QW02.XWHCD = SRWREC.SRWXWHCD;
      SR0QW01.SR0QWIXM = 1;

      while (SR0QW01.SR0QWIXM <= 24)
        if (SR0QM003.PK1BLLAD[SR0QWIXM] != 0)
          SR0QW02.SR0QWBOL = SR0QM003.PK1BLLAD[SR0QWIXM];
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == -1)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-100(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end

          if (SR0QW92.SR2BLLSU[SR0QWIXM] == 99)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-300(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          SR0QW02.SR0QWBLS = SR0QW92.SR2BLLSU[SR0QWIXM];
          TA6REC.TARJCL[TA6INDEX] = SR0QW02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = "P";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        end
        SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment map index*/
      end
      converseLib.clearScreen();
       /* reset screen*/
    else
      TA6REC.TARJCL[TA6INDEX] = SR0QTP3.TARJCL[SR0QWIXT];
      TA6REC.TARTYPE[TA6INDEX] = SR0QTP3.TARTYPE[SR0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
    end

    SR0QW01.SR0QWIXT = SR0QW01.SR0QWIXT + 1; /* Increment PT3 index*/

  end

  TA6REC.TARJCL[TA6INDEX] = SR0QTP3.TARJCL[SR0QWIXT]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = SR0QTP3.TARTYPE[SR0QWIXT]; /* TYPE*/
end // end SR0Q035-PROD

// Format test jcl
Function SR0Q035-TEST()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  while (SR0QTT3.TARJCL[SR0QWIXT] != "/*EOF")

    if (SR0QTT3.TARTYPE[SR0QWIXT] == "P")
      set SR0QW02 empty;
      SR0QW02.XWHCD = SRWREC.SRWXWHCD;
      SR0QW01.SR0QWIXM = 1;

      while (SR0QW01.SR0QWIXM <= 24)
        if (SR0QM003.PK1BLLAD[SR0QWIXM] != 0)
          SR0QW02.SR0QWBOL = SR0QM003.PK1BLLAD[SR0QWIXM];
          if (SR0QW92.SR2BLLSU[SR0QWIXM] == -1)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-100(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end

          if (SR0QW92.SR2BLLSU[SR0QWIXM] == 99)
            set SREREC empty; /* initialize pop-up window work area*/
            SREREC.XWHCD = SRWREC.SRWXWHCD; /* warehouse code*/
            SREREC.PK1BLLAD = SR0QW92.PK1BLLAD[SR0QWIXM]; /* bol*/
            SRWREC.XXXERRID = "SR0Q"; /* initialize error id*/
            XPSR-300(); /* process pop-up window*/
            if (converseVar.eventKey is pa2)
              converseLib.clearScreen();
               /* reset screen*/
              exit stack;
            else
              SR0QW92.SR2BLLSU[SR0QWIXM] = SREREC.SRE-SELECTED-SUB-NBR;
            end
          end
          SR0QW02.SR0QWBLS = SR0QW92.SR2BLLSU[SR0QWIXM];
          TA6REC.TARJCL[TA6INDEX] = SR0QW02.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = "P";
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/
        end
        SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment map index*/
      end
      converseLib.clearScreen();
       /* reset screen*/
    else

      TA6REC.TARJCL[TA6INDEX] = SR0QTT3.TARJCL[SR0QWIXT];
      TA6REC.TARTYPE[TA6INDEX] = SR0QTT3.TARTYPE[SR0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment TA6 index*/

    end
    SR0QW01.SR0QWIXT = SR0QW01.SR0QWIXT + 1; /* Increment TT3 index*/

  end

  TA6REC.TARJCL[TA6INDEX] = SR0QTT3.TARJCL[SR0QWIXT]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = SR0QTT3.TARTYPE[SR0QWIXT]; /* TYPE*/
end // end SR0Q035-TEST

// Report Request Menu
Function SR0Q990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SR0Q991(); /* Format and display the map*/

  SR0Q992(); /* Check attention identifier*/

  SR0Q993(); /* Reset fields to normal intensity*/

  SR0Q994(); /* Verify the data that was entered*/

  SR0Q995(); /* Process valid input request*/

end // end SR0Q990

// Format and display the map
Function SR0Q991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SRWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set SR0QM099 initial; /* M099 input/output*/

    SR0QM099.XWHCD = SRWREC.SRWXWHCD; /* Warehouse code*/
    SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

    while (SR0QW01.SR0QWIXM <= SR0QW01.SR0QWIXL) /* Until end of array*/

      SR0QM099.SR0QMSEL[SR0QWIXM] = SR0QW01.SR0QMSEL[SR0QWIXM];

      SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SR0QM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SR0QM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SR0QM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SRWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SRWREC.XXXMSGNO != 0) /* Message to display*/

      if (SRWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SRWREC.XXXMSGNO);
      end /* Message number*/
    else
      SR0QM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SR0QM099.XXXERRID = SRWREC.XXXERRID; /* Module identification*/

    set SR0QM099 alarm; /* Indicate sound alarm*/

  end

  converse SR0QM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SRWREC.XXXMSGNO = 0; /* Message number*/
  SRWREC.XXXERRID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SR0QM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SR0QM099.CAITEM; /* Application data*/

end // end SR0Q991

// Check attention identifier
Function SR0Q992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SR0QM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    SR0QS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set SR0QM099.CATOAP cursor, bold; /* Highlight*/

      if (COMMAREA.CATOAP == "SR0T")
        SRWREC.XXXERRID = "13000";
        converseLib.validationFailed(129);
      else
        XSSRS01(); /* Exit to another application*/
      end

    else

      SRWREC.XXXERRID = "992"; /* Module identification*/
      converseLib.validationFailed(114); /* PA/PF key may not be used*/

    end

    SR0QS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SR0QM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SR0Q"; /* TO application*/
    end

    XSSRS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    SR0QS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SRWREC.XXXERRID = "992"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    SR0QS99(); /* Exit to display map*/

  end

end // end SR0Q992

// Reset highlighted fields
Function SR0Q993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SR0QM099.XWHCD initialAttributes; /* warehouse code*/

  SR0QW01.SR0QWIXM = 1; /* Initialize index*/

  while (SR0QW01.SR0QWIXM <= SR0QW01.SR0QWIXL) /* Until all lines are reset*/

    set SR0QM099.SR0QMSEL[SR0QWIXM] initialAttributes; /* Reset select field*/

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment line index*/

  end

  set SR0QM099.CATOAP initialAttributes; /* TO application*/
  set SR0QM099.CAITEM initialAttributes; /* Application data*/

end // end SR0Q993

// Verify the entered data
Function SR0Q994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SRWREC.XXXERRID = "994"; /* Module identification*/
    set SR0QM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXL; /* Initialize line index*/

  while (SR0QW01.SR0QWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (SR0QM099.SR0QMSEL[SR0QWIXM] != SR0QW01.SR0QMSEL[SR0QWIXM]
     && SR0QM099.SR0QMSEL[SR0QWIXM] != " " /* Line was selected*/
     && SR0QM099.SR0QMSEL[SR0QWIXM] != "S") /* and not with an "S"*/

      SRWREC.XXXERRID = "994"; /* Module identification*/
      set SR0QM099.SR0QMSEL[SR0QWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(95); /* Only "S" is may be entered*/

    end

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Verify warehouse code.*/
   /* ------------------------------------------------------------*/

  if (SR0QM099.XWHCD == " ") /* warehouse code blank*/
    set SR0QM099.XWHCD cursor, bold; /* highlight*/
    SRWREC.XXXERRID = "994"; /* module id*/
    converseLib.validationFailed(1); /* warehouse code is invalid*/
  else
    if (SR0QM099.XWHCD != SRWREC.SRWXWHCD) /* warehouse code changed*/
      if (SR0QM099.XWHCD in XWHTBL.XWHCD /* code in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      /* NEXT SENTENCE*/
      else
        set SR0QM099.XWHCD cursor, bold; /* highlight*/
        SRWREC.XXXERRID = "994"; /* module id*/
        converseLib.validationFailed(1); /* warehouse code is invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SR0QS99(); /* Exit to display map*/
  end

end // end SR0Q994

// Process valid input request
Function SR0Q995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  SRWREC.SRWXWHCD = SR0QM099.XWHCD; /* warehouse code*/

  move SR0QM099.SR0QMSEL to SR0QW01.SR0QMSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (SR0QW01.SR0QMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end

end // end SR0Q995

// Verify bol in shiprec
Function SR0QS01()
   /* ------------------------------------------------------------*/
   /* Verify that the bol exits on shiprec.*/
   /* If invalid or not available, return an error.*/
   /* If any other error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWSWL = "N"; /* Initialize line error switch*/

  SR0QW01.SR0QWIX2 = SR0QW01.SR0QWIXM - 1; /* Initialize index*/

  while (SR0QW01.SR0QWIX2 > 0) /* Until all lines checked*/

    if (SR0QM002.PK1BLLAD[SR0QWIXM] == SR0QM002.PK1BLLAD[SR0QWIX2])

      SR0QW01.SR0QWSWL = "Y"; /* Indicate line error*/

      set SR0QM002.PK1BLLAD[SR0QWIXM] cursor, modified, bold;
      converseLib.validationFailed(132); /* Indicate queue invalid*/
      SRWREC.XXXERRID = "S01"; /* Process name*/

    end

    SR0QW01.SR0QWIX2 = SR0QW01.SR0QWIX2 - 1; /* Initialize index*/

  end

  if (SR0QW01.SR0QWSWL == "N" /* No line error*/
   && SR0QM002.PK1BLLAD[SR0QWIXM] > " ") /* and bol entered*/

    set SR2REC empty; /* Initialize record area*/

    SR2REC.XWHCD = SR0QM002.XWHCD;
    SR2REC.PK1BLLAD = SR0QM002.PK1BLLAD[SR0QWIXM]; /* bol*/
    SR0QW92.PK1BLLAD[SR0QWIXM] = SR0QM002.PK1BLLAD[SR0QWIXM];

    try
      call "SR1120" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Verify bol*/

    if (sysVar.errorCode == "00000000")

      if (SQLCA.VAGen_SQLCODE == 0) /* Only one bol is found*/
        SR0QW92.SR2BLLSU[SR0QWIXM] = SR2REC.SR2BLLSU;
        return;
      end

      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple bols found*/
        SR0QW92.SR2BLLSU[SR0QWIXM] = -1;
        return;
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/
        set SR0QM002.PK1BLLAD[SR0QWIXM] cursor, modified, bold;
        converseLib.validationFailed(133); /* Indicate invalid bol*/
        SRWREC.XXXERRID = "S01"; /* Process name*/
        return;
      end

    end

    TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

    SRWREC.XXXERRID = "SR0QS01"; /* error identification*/

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(134); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(124); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN SHIPREC BILL OF LADING";
    TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    exit stack; /* Exit to redisplay map*/

  end

end // end SR0QS01

// Verify bol in shiprec
Function SR0QS03()
   /* ------------------------------------------------------------*/
   /* Verify that the bol exits on shiprec.*/
   /* If invalid or not available, return an error.*/
   /* If any other error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWSWL = "N"; /* Initialize line error switch*/

  SR0QW01.SR0QWIX2 = SR0QW01.SR0QWIXM - 1; /* Initialize index*/

  while (SR0QW01.SR0QWIX2 > 0) /* Until all lines checked*/

    if (SR0QM003.PK1BLLAD[SR0QWIXM] == SR0QM003.PK1BLLAD[SR0QWIX2])

      SR0QW01.SR0QWSWL = "Y"; /* Indicate line error*/

      set SR0QM003.PK1BLLAD[SR0QWIXM] cursor, modified, bold;
      converseLib.validationFailed(132); /* Indicate queue invalid*/
      SRWREC.XXXERRID = "S03"; /* Process name*/

    end

    SR0QW01.SR0QWIX2 = SR0QW01.SR0QWIX2 - 1; /* Initialize index*/

  end

  if (SR0QW01.SR0QWSWL == "N" /* No line error*/
   && SR0QM003.PK1BLLAD[SR0QWIXM] > " ") /* and bol entered*/

    set SR2REC empty; /* Initialize record area*/

    SR2REC.XWHCD = SR0QM003.XWHCD;
    SR2REC.PK1BLLAD = SR0QM003.PK1BLLAD[SR0QWIXM]; /* bol*/
    SR0QW92.PK1BLLAD[SR0QWIXM] = SR0QM003.PK1BLLAD[SR0QWIXM];

    try
      call "SR1120" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Verify bol*/

    if (sysVar.errorCode == "00000000")

      if (SQLCA.VAGen_SQLCODE == 0) /* Only one bol is found*/
        SR0QW92.SR2BLLSU[SR0QWIXM] = SR2REC.SR2BLLSU;
        return;
      end

      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple bols found*/
        SR0QW92.SR2BLLSU[SR0QWIXM] = -1;
        return;
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* No pick tickets to print*/
        set SR0QM003.PK1BLLAD[SR0QWIXM] cursor, modified, bold;
        converseLib.validationFailed(133); /* Indicate invalid bol*/
        SRWREC.XXXERRID = "S03"; /* Process name*/
        return;
      end

    end

    TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

    SRWREC.XXXERRID = "SR0QS03"; /* error identification*/

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(134); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(124); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN SHIPREC BILL OF LADING";
    TA1REC.TA1PGMNM = SRWREC.XXXERRID; /* Process name*/
    TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    exit stack; /* Exit to redisplay map*/

  end

end // end SR0QS03

// Clear selections and exit
Function SR0QS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  SR0QW01.SR0QWIXM = 1; /* Initialize map index*/

  while (SR0QW01.SR0QWIXM <= SR0QW01.SR0QWIXL) /* Until end of array*/

    if (SR0QW01.SR0QMSEL[SR0QWIXM] == "S") /* Entry is selected*/
      SR0QW01.SR0QMSEL[SR0QWIXM] = " "; /* Reset entry*/
    end

    SR0QW01.SR0QWIXM = SR0QW01.SR0QWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/

end // end SR0QS99

// Multiple BOLs pop-up window
Function XPSR-300()
   /* ************************************************************/
   /* *  Multiple BOLs processing is done accordingly:          **/
   /* *    - setup the key                                      **/
   /* *    - open cursor DSHIP.VAZCTN01                         **/
   /* *    - fetch each row and save BOL sub nbr and pick sched **/
   /* *      nbr into the array (99 occurrences)                **/
   /* *    - close cursor                                       **/
   /* *    - format and display xpstM001 map                    **/
   /* *    - check if selection has been made before exiting    **/
   /* ************************************************************/

  set VAZCTN01 empty; /* Initialize record area*/

  VAZCTN01.XWH-WHSE-CD = SREREC.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = SREREC.PK1BLLAD;

  XPSR-310(); /* Open cursor for BOL Sub's*/
  XPSR-320(); /* Fetch next BOL Sub*/

  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Bol sub nbr index*/

  while (SQLCA.VAGen_SQLCODE == 0)

    SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX] = VAZCTN01.PK-BOL-SUB-NBR;
    SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX] = VAZCTN01.PK-PICK-SCHED-NBR;

    SREREC.SRE-TOTAL-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

    SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;

    if (SREREC.SRE-SUB-NBR-SCHED-IDX > 99)

      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "XPSR-300";
      TA1REC.TA1LOC = "BOL SUB TBL SIZE EXCEEDED";
      TA1REC.TA1MAP = "SR0TM001";
      TA1REC.TA1DBASE = "DSHIP   ";
      TA1REC.TA1TBLVU = "VAZCTN01";
      TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY;

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};

    end

    XPSR-320(); /* Fetch next dship.vazctn01 row*/

  end

  XPSR-330(); /* Close cursor*/

  set XMSRM100 initial; /* Clear pop-up window*/

  SREREC.SRE-SUB-NBR-SCHED-IDX = 1; /* Initialize bol sub nbr index*/

  while (SREREC.SRE-POPUP-WINDOW-DONE-FL == " ") /* Pop-up window done*/

    XPSR-340(); /* Format display pop-up window*/

  end


end // end XPSR-300

// Cursor 'S1' - AZ1120
Function XPSR-310()
   /* ------------------------------------------------------------*/
   /* Open cursor for BOL Sub's*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "AZ1120" ("S1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-310"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another appl*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-310"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SCAN BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-310

// Fetch 'N1' - AZ1120
Function XPSR-320()
   /* ****************************************************/
   /* Fetch a row from DSHIP.VAZCTN01*/
   /* ****************************************************/

  set SQLCA empty;

  try
    call "AZ1120" ("N1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-320"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-320"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-320

// Close 'C1' - AZ1120
Function XPSR-330()
   /* ****************************************************/
   /* Close cursor for DSHIP.VAZCTN01*/
   /* ****************************************************/

  set SQLCA empty;

  try
    call "AZ1120" ("C1", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      SRWREC.XXXERRID = "XPSR-330"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "XPSR-330"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SCAN BOL IN AZCTN";
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCTN01.VAZCTN01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

end // end XPSR-330

// Format and display XPSRM001
Function XPSR-340()
   /* ************************************************************/
   /* Format and display XPSRM001 map                        **/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)

    converseLib.validationFailed(178); /* Continue or cancel*/
    SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
    SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y"; /* Pop-up window done*/
    return;

  end

  XPSR-350(); /* Check for select bol sub nbr*/

  if (converseVar.validationMsgNum == 00) /* If no error*/

    if (converseVar.eventKey is pf8) /* Forward browsing*/

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
        if (SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR < SREREC.SRE-TOTAL-SUB-NBR)
                                   /* Continue fward brws*/
          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR           + 1;
        else
          converseLib.validationFailed(98); /* Last page*/
          SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
        end
      else
        converseLib.validationFailed(177); /* Select is done, no browsing*/
        SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
      end

    else

      if (converseVar.eventKey is pf7) /* Backward browsing*/

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
          if (SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR > 10)
                                   /* Continue backward browsing*/
            SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR - 10;
          else
            converseLib.validationFailed(99); /* No scroll back past 1st page*/
            SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
          end
        else
          converseLib.validationFailed(177); /* Select is done, no browsing*/
          SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
        end

      else
        if (converseVar.eventKey is enter)

          if (SREREC.SRE-SUB-NBR-SELECTED-FL == " ")
            if (SREREC.SRE-SUB-NBR-SCHED-IDX == 1 /* First time around*/
             && XMSRM100.PK1BLLAD == 0)          
               /* Next sentence*/
            else
              converseLib.validationFailed(143); /* Need to select*/
              SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/
            end
          else
            SREREC.SRE-POPUP-WINDOW-DONE-FL = "Y";
                                   /* Pop-up window done*/
            return;
          end

        else

          converseLib.validationFailed(12); /* Invalid attention key*/
          SRWREC.XXXERRID = "XPSR-340"; /* Module identification*/

        end

      end

    end

    if (converseVar.validationMsgNum == 00) /* If no error*/

      set XMSRM100 initial; /* Clear pop-up window*/

      XMSRM100.PK1BLLAD = SREREC.PK1BLLAD;

      SREREC.SRE-POPUP-WINDOW-IDX = 1;

      while (SREREC.SRE-SUB-NBR-SCHED-IDX <= SREREC.SRE-TOTAL-SUB-NBR
       && SREREC.SRE-POPUP-WINDOW-IDX <= 10)

        XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] = SREREC.PK1PKSCH[SRE-SUB-NBR-SCHED-IDX];

        XMSRM100.SR2BLLSU[SRE-POPUP-WINDOW-IDX] = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];

        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] normal;

        if (SREREC.SRE-POPUP-WINDOW-IDX == 1)

          SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

        end

        SREREC.SRE-IDX-OF-MAP-LAST-SUB-NBR = SREREC.SRE-SUB-NBR-SCHED-IDX;

        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-SUB-NBR-SCHED-IDX + 1;

        SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

      end

    end

  end

  if (SREREC.SRE-FR-TO-BOL-IND == "FR") /* FROM BOL*/

    XMSRM100.XPSRM10C = "**FR BOL: ";

  end

  if (SREREC.SRE-FR-TO-BOL-IND == "TO") /* to BOL*/

    XMSRM100.XPSRM10C = "**TO BOL: ";

  end

  XMSRM100.XXXERRID = SRWREC.XXXERRID;

  converse XMSRM100 ;

end // end XPSR-340

// Check for selected BOL sub nbr
Function XPSR-350()
   /* ************************************************************/
   /* Check for selected BOL sub nbr                         **/
   /* ************************************************************/

  SREREC.SRE-POPUP-WINDOW-IDX = 1;

  while (SREREC.SRE-POPUP-WINDOW-IDX <= 10
   && XMSRM100.PK1PKSCH[SRE-POPUP-WINDOW-IDX] > 0)

    if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] > " ")

      if (XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] == "S")

        if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")

          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR            + SREREC.SRE-POPUP-WINDOW-IDX - 1;

          if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX]
           == SREREC.SRE-SELECTED-SUB-NBR)

            if (converseVar.eventKey is enter)
               /* Next sentence*/
            else

              converseLib.validationFailed(177); /* Select is done, no browsing*/
              set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
              SRWREC.XXXERRID = "XPSR-350"; /* Module identification*/

            end

          else

            converseLib.validationFailed(96); /* Cannot select more than one line*/
            set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
            SRWREC.XXXERRID = "XPSR-350"; /* Module identification*/

          end

        else

          SREREC.SRE-SUB-NBR-SELECTED-FL = "Y";

          SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR            + SREREC.SRE-POPUP-WINDOW-IDX - 1;

          SREREC.SRE-SELECTED-SUB-NBR = SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX];

        end

      else

        converseLib.validationFailed(95); /* Select value must be 's'*/
        set XMSRM100.XXXCHAR[SRE-POPUP-WINDOW-IDX] cursor, bold;
        SRWREC.XXXERRID = "XPSR-350"; /* Module identification*/

      end

    else

      if (SREREC.SRE-SUB-NBR-SELECTED-FL == "Y")

        SREREC.SRE-SUB-NBR-SCHED-IDX = SREREC.SRE-IDX-OF-MAP-FIRST-SUB-NBR          + SREREC.SRE-POPUP-WINDOW-IDX - 1;

        if (SREREC.SR2BLLSU[SRE-SUB-NBR-SCHED-IDX]
         == SREREC.SRE-SELECTED-SUB-NBR)

          SREREC.SRE-SUB-NBR-SELECTED-FL = " ";

          SREREC.SRE-SELECTED-SUB-NBR = 0;

        end

      end

    end

    SREREC.SRE-POPUP-WINDOW-IDX = SREREC.SRE-POPUP-WINDOW-IDX + 1;

  end


end // end XPSR-350

// Application initialization
Function XPSR001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set transaction identification*/

   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/

    SRWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set SRWREC empty; /* Initialize work record area*/

  end

  if (SRWREC.SRWXWHCD == " ") /* Warehouse blank*/
    SRWREC.SRWXWHCD = COMMAREA.XWHCD; /* Warehouse code*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPSR001

//*** RECORD=SR0QW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SR0QW01 type basicRecord
  10 SR0QMSEL SR0QMSEL [98] ; 
  10 SR0QWIXL SR0QWIXL ; 
  10 SR0QWIXM SR0QWIXM ; 
  10 SR0QWIXT SR0QWIXT ; 
  10 SR0QWIX2 SR0QWIX2 ; 
  10 SR0QWSWX SR0QWSWX ; 
  10 SR0QWSWL SR0QWSWL ; 
end // end SR0QW01

//*** RECORD=SR0QW02 ****
// ------------------------------------------------------------
// Parameters for SR1301 - Print Bill of Lading.
// ------------------------------------------------------------
// ***********************
Record SR0QW02 type basicRecord
  3 TARJCL TARJCL ; 
    4 XWHCD XWHCD ; 
    4 * char(1) ; 
    4 SR0QWBOL SR0QWBOL ; 
    4 * char(1) ; 
    4 SR0QWBLS SR0QWBLS ; 
    4 * char(59) ; 
end // end SR0QW02

//*** RECORD=SR0QW03 ****
// JCL SYstsin card
// ***********************
Record SR0QW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(14) ; // DSN SYSTEM(DSN
    10 SR0QW-DSN SR0QW-DSN ; 
    10 * char(1) ; // )
    10 * char(64) ; 
end // end SR0QW03

//*** RECORD=SR0QW05 ****
// Parm record passed from SR0T to proc AZ1821
// ***********************
Record SR0QW05 type basicRecord
  10 SR0QW05-SR131D-PARM-REC SR0QW05-SR131D-PARM-REC ; 
    15 SR0QW05-SR131D-WHSE-CD SR0QW05-SR131D-WHSE-CD ; 
    15 SR0QW05-SR131D-BOL SR0QW05-SR131D-BOL ; 
    15 SR0QW05-SR131D-FILLER SR0QW05-SR131D-FILLER ; 
end // end SR0QW05

Record SR0QW06 type basicRecord
  3 SR0QW-RMT-NAME char(6) ; // RMT-PRINTER
    4 * char(3) ; // RMT
    4 SR0QW-RMT-VALUE char(3) ; // RMT-PRINTER-VALUE
end // end SR0QW06

//*** RECORD=SR0QW92 ****
// ************************************************************
// *
// *     ****  BILL OF LADING AND BOL SUB NBR TABLE  ****
// *
// ************************************************************
// *
// *  Maintenance History:
// *
// *  CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// * -------  --------  ------  ------------------------------
// *  SR#27b03/15/93  hkempe  created
// ************************************************************
// ***********************
Record SR0QW92 type basicRecord
  5 SR0QWBSA SR0QWBSA [24] ; 
    10 PK1BLLAD PK1BLLAD ; 
    10 SR2BLLSU SR2BLLSU ; 
end // end SR0QW92

// Select field
DataItem SR0QMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// T or D
DataItem SR0QW-DSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0QW05-SR131D-BOL num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0QW05-SR131D-FILLER char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0QW05-SR131D-PARM-REC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0QW05-SR131D-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_BOL_SUB_NBR
DataItem SR0QWBLS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_BILL_OF_LADING
DataItem SR0QWBOL num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bol sub nbr array
DataItem SR0QWBSA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem SR0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem SR0QWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SR0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem SR0QWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line error switch
DataItem SR0QWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem SR0QWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end