package sr0f;
import az.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SR0F ****
// ---------------  sr0f - split batch  --------------------
// 
// overview: this application is used to split off bols from
//           an original picking schedule batch to a newly
//           generated batch.  this is done by entering the
//           original whse and batch, and each bol to be
//           split off.  the application verifys entered batch
//           and bol data, and if valid generates a new batch
//           number, copys requested bols into the new batch,
//           and deletes copied bols from the original batch.
// 
// 
// MAINTENANCE HISTORY:
// 
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/10/98  dkesle  new pgm - cloned from sr0e
//          04/23/98  dkesle  change logic to fill pick actual
//                            and pick status flags
// tblchgs  06/18/98  tdaugh  regen for table changes
// RETROFT  08/04/98  marbuc  Inhibit DCMS orders so they can
//                            not be split
// *********************
Program SR0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SR00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKDREC PKDREC; // record
  PWPREC PWPREC; // record
  SQLCA SQLCA; // record
  SR0FW01 SR0FW01; // record
  SR0FW02 SR0FW02; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR5REC SR5REC; // record
  SR9REC SR9REC; // record
  SRWREC SRWREC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  TSVREC TSVREC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCTN01 VAZCTN01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use SR0FM.SR0FM030 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SR0F010: SR0F010();

     /* -----------  sr0f010 flow ------------------*/

    goto SR0F030; /* display empty split batch map*/

    SR0F020: SR0F020();

     /* -------------  sr0f020 flow ----------------*/

    goto SR0F030; /* display split batch map*/

    SR0F030: SR0F030();

     /* ------------  sr0f030 flow  --------------------*/


    if (converseVar.eventKey is pa2) /* reset?*/
      goto SR0F010; /* reinitialize map*/
    end

    if (SRWREC.SRWMSG != " ")
      SR0FM030.SR0FMMSG = SRWREC.SRWMSG;
    end

    if (converseVar.validationMsgNum == 0
     && SR0FM030.SR0FMMSG == " ")
      /* next sentence*/
    else
      goto SR0F030; /* errors - redisplay*/
    end

     /* move bols on this page to storage*/

    SR0FW02.SR0FWIX1 = 1;
    SR0FW02.SR0FWIX2 = ((SR0FM030.SR0FMPAG - 1) * 40) + 1;
    while (SR0FW02.SR0FWIX1 <= 40)
      SR0FW02.SR0FMBLL[SR0FWIX2] = SR0FM030.SR0FMBLL[SR0FWIX1];
      SR0FW02.SR0FWIX1 = SR0FW02.SR0FWIX1 + 1;
      SR0FW02.SR0FWIX2 = SR0FW02.SR0FWIX2 + 1;
    end

    if (converseVar.eventKey is pf7)
      if (SR0FM030.SR0FMPAG == 1) /* already on first page?*/
        converseLib.validationFailed(99); /* no previous pages*/
        goto SR0F030; /* redisplay first page*/
      else
        SR0FM030.SR0FMPAG = SR0FM030.SR0FMPAG - 1;
        goto SR0F020; /* load prior page*/
      end
    end


    if (converseVar.eventKey is pf8)
      if (SR0FM030.SR0FMPAG == 5)
        converseLib.validationFailed(98); /* maximum page forward is reached*/
        goto SR0F030; /* redisplay map*/
      end
      SR0FW02.SR0FWIX2 = 1;
      while (SR0FW02.SR0FWIX2 <= 40
       && SR0FM030.SR0FMBLL[SR0FWIX2] != 0)
        SR0FW02.SR0FWIX2 = SR0FW02.SR0FWIX2 + 1;
      end
      if (SR0FW02.SR0FWIX2 < 40) /* less than 40 bols on page?*/
        converseLib.validationFailed(243);
        goto SR0F030; /* redisplay map*/
      end
      SR0FM030.SR0FMPAG = SR0FM030.SR0FMPAG + 1;
      if (SR0FM030.SR0FMPAG > SR0FM030.SR0FMHPG)
        SR0FM030.SR0FMHPG = SR0FM030.SR0FMPAG;
      end
      goto SR0F020; /* redisplay map*/
    end

    if (converseVar.eventKey is enter)

      if (SR0FW01.SR0FVRFY == "N") /* has verify msg been displayed?*/
        SR0FW01.SR0FVRFY = "Y";
        converseLib.validationFailed(55);
        goto SR0F030;
      end

      SR0FW01.SR0FVRFY = "N";
      goto SR0F040;

    end

    SR0F040: SR0F040();
     /* ---------------- sr0f040 flow ----------------------*/

    goto SR0F030;

  end // end main
end // end SR0F

// initial processing
Function SR0F010()

  XSENTRY(); /* entry security*/

  XSSEGTR(); /* set segmented transaction id*/

  set SR0FW01 empty; /* clear misc work fields*/
  set SR0FW02 empty; /* clear batches array*/
  set SR0FM030 initial; /* clear map fields*/

  SR0FM030.SR0FMDT = VGVar.currentShortGregorianDate; /* move system date to map*/

     /* look for whse passed from outside applications*/
  SRWREC.SRWGRP = COMMAREA.CAUSERA; /* user commarea to work*/
  if (COMMAREA.CAFROMAP != "SR") /* outside shiprec system,*/
    SRWREC.SRWXWHCD = COMMAREA.XWHCD; /* use commarea.xwhcd*/
  end

  if (SRWREC.SRWXWHCD == " ")
    set SR0FM030.SR0FMXWH cursor;
    set SR0FM030.SR0FMSCH initialAttributes;
  else
    SR0FM030.SR0FMXWH = SRWREC.SRWXWHCD;
    SR0FS05(); /* validate whse*/
    if (converseVar.validationMsgNum == 0)
      set SR0FM030.SR0FMXWH initialAttributes;
      set SR0FM030.SR0FMSCH cursor;
      SR0FW01.SR0FMXWH = SR0FM030.SR0FMXWH;
    else
      set SR0FM030.SR0FMXWH cursor, bold;
      set SR0FM030.SR0FMSCH initialAttributes;
    end
  end
  set SR0FM030.SR0FMRSN initialAttributes;
  SR0FW02.SR0FWIX1 = 1;
  while (SR0FW02.SR0FWIX1 <= 40)
    set SR0FM030.SR0FMBLL[SR0FWIX1] initialAttributes;
    SR0FWIX1 = SR0FWIX1 + 1;
  end

  SR0FM030.SR0FMPAG = 1; /* set page counter to 1*/
  SR0FM030.SR0FMHPG = 1; /* set high page to 1*/
  SR0FW01.SR0FVRFY = "N";

end // end SR0F010

// load new page to screen
Function SR0F020()

  SR0FW02.SR0FWIX1 = 1;
  SR0FW02.SR0FWIX2 = ((SR0FM030.SR0FMPAG - 1) * 40) + 1;
  while (SR0FW02.SR0FWIX1 <= 40)
    SR0FM030.SR0FMBLL[SR0FWIX1] = SR0FW02.SR0FMBLL[SR0FWIX2];
    SR0FW02.SR0FWIX1 = SR0FW02.SR0FWIX1 + 1;
    SR0FW02.SR0FWIX2 = SR0FW02.SR0FWIX2 + 1;
  end

end // end SR0F020

// converse split batch map
Function SR0F030()

  converse SR0FM030 ;


  if (converseVar.eventKey is enter
  )
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      SR0FW01.SR0FVRFY = "N";
    else
      set SRWREC empty;
      SRWREC.SRWXWHCD = SR0FM030.SR0FMXWH; /* set whse for commarea*/
      COMMAREA.CAUSERA = SRWREC.SRWGRP;
      XSSRS01(); /* check shiprec pf keys*/
      if (converseVar.validationMsgNum != 0
       || SRWREC.SRWMSG != " ")
        exit stack;
      end
    end
  end

  if (SR0FM030.SR0FMMSG != " ")
    exit stack;
  end

  if (SR0FM030.SR0FMXWH == SR0FW01.SR0FMXWH
   && SR0FM030.SR0FMXWH != " ")
    set SR0FM030.SR0FMXWH skip, noHighLight;

  else
    SR0FS05(); /* validate warehouse entered*/
    if (converseVar.validationMsgNum == 0)
      set SR0FM030.SR0FMXWH skip, noHighLight;
      SR0FW01.SR0FMXWH = SR0FM030.SR0FMXWH;
    else
      set SR0FM030.SR0FMXWH cursor, bold;
      exit stack;
    end
    SR0FS07(); /* validate schedule entered*/
    if (converseVar.validationMsgNum == 0)
      set SR0FM030.SR0FMSCH skip, noHighLight;
      set SR0FM030.SR0FMRSN cursor;
      SR0FW01.SR0FMSCH = SR0FM030.SR0FMSCH;
    else
      set SR0FM030.SR0FMSCH cursor, bold;
      exit stack;
    end
  end

  if (SR0FM030.SR0FMSCH == SR0FW01.SR0FMSCH
   && SR0FM030.SR0FMSCH != 0)

  else
    SR0FS07(); /* validate schedule entered*/
    if (converseVar.validationMsgNum == 0)
      set SR0FM030.SR0FMSCH skip, noHighLight;
      set SR0FM030.SR0FMRSN cursor;
      SR0FW01.SR0FMSCH = SR0FM030.SR0FMSCH;
    else
      set SR0FM030.SR0FMSCH cursor, bold;
      exit stack;
    end
  end

  if (SR0FM030.SR0FMRSN == SR0FW01.SR0FMRSN
   && SR0FM030.SR0FMRSN != " ")

  else
    SR0FW01.SR0FVRFY = "N";
    if (SR0FM030.SR0FMRSN == " ") /* validate split reason*/
      set SR0FM030.SR0FMRSN cursor, bold;
      converseLib.validationFailed(54); /* SPLIT REASON cannot be blank*/
      exit stack;
    else
      set SR0FM030.SR0FMRSN initialAttributes;
      SR0FW01.SR0FMRSN = SR0FM030.SR0FMRSN;
    end
  end

     /* validate all bol on this page*/

  SR0FW02.SR0FWIX1 = 1;
  SR0FW02.SR0FWIX2 = ((SR0FM030.SR0FMPAG - 1) * 40) + 1;
  while (SR0FW02.SR0FWIX1 <= 40)

    set SR0FM030.SR0FMBLL[SR0FWIX1] initialAttributes;
    if (SR0FM030.SR0FMBLL[SR0FWIX1] == SR0FW02.SR0FMBLL[SR0FWIX2]
     || SR0FM030.SR0FMBLL[SR0FWIX1] == 0)

    else
      SR0FW01.SR0FVRFY = "N";
      SR0FS10(); /* validate bol*/
      if (converseVar.validationMsgNum == 0)
        SR0FW02.SR0FMBLL[SR0FWIX2] = SR0FM030.SR0FMBLL[SR0FWIX1];
      else
        set SR0FM030.SR0FMBLL[SR0FWIX1] cursor, bold;
        SR0FW02.SR0FMBLL[SR0FWIX2] = 0;
        exit stack;
      end
    end

    SR0FWIX1 = SR0FWIX1 + 1;
    SR0FWIX2 = SR0FWIX2 + 1;

  end

end // end SR0F030

// split batch process
Function SR0F040()

  SR0FW02.SR0FWIX2 = 1;
  SR0FW01.SR0FW-BOLS-ENTERED = 0;
  while (SR0FW02.SR0FWIX2 <= 200)
    if (SR0FW02.SR0FMBLL[SR0FWIX2] == 0) /* count number of bols*/
                                      /* entered*/
    else
      SR0FW01.SR0FW-BOLS-ENTERED = SR0FW01.SR0FW-BOLS-ENTERED + 1;
    end
    SR0FW02.SR0FWIX2 = SR0FW02.SR0FWIX2 + 1;
  end

  if (SR0FW01.SR0FW-BOLS-ENTERED == 0) /* if no bols are entered on*/
    converseLib.validationFailed(242); /* the screen*/
    set SR0FM030.SR0FMBLL[1] cursor;
    exit stack;
  end

  SR2REC.XWHCD = SR0FM030.SR0FMXWH; /* count total number*/
  SR2REC.PK1BLLAD = SR0FM030.SR0FMSCH; /* of bols for schedule*/
  SR0FW-TOT-BOLS-FOR-SCHED = 0;
  SR0FS-VSRORD01-S8(); /* select set of srord row*/
  SR0FS-VSRORD01-N8(); /* fetch first row*/
  while (SQLCA.VAGen_SQLCODE == 0)
    SR0FW-TOT-BOLS-FOR-SCHED = SR0FW-TOT-BOLS-FOR-SCHED + 1;
    SR0FS-VSRORD01-N8(); /* fetch next row*/
  end
  SR0FS-VSRORD01-C8(); /* close cursor for srord*/

  if (SR0FW01.SR0FW-BOLS-ENTERED == SR0FW-TOT-BOLS-FOR-SCHED)
    converseLib.validationFailed(244); /* if all of the bols for the*/
    set SR0FM030.SR0FMBLL[1] cursor; /* schedule are entered*/
    exit stack;
  end


  SR0FS13(); /* get next avail sched number*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  else
    SR0FM030.SR0FMNSC = SR1REC.PK1PKSCH; /* move new sched to map*/
  end

  XX0XS01(); /* get timestamp info*/

  SR0FW02.SR0FWIX2 = 1;

  while (SR0FW02.SR0FWIX2 <= 200) /* for each bol slot*/
    if (SR0FW02.SR0FMBLL[SR0FWIX2] != 0)
      SR0FW-SRORD-EOF-FL = "N";
      set SR2REC empty; /* Clear row storage area*/
      SR2REC.XWHCD = SR0FM030.SR0FMXWH;
      SR2REC.PK1PKSCH = SR0FM030.SR0FMSCH;
      SR2REC.PK1BLLAD = SR0FW02.SR0FMBLL[SR0FWIX2];
      SR0FS-VSRORD01-S7();
      SR0FS-VSRORD01-N7();
      while (SR0FW01.SR0FW-SRORD-EOF-FL == "N") /* for each order within bol*/

        if (SR0FW01.SR0FW-MOVERS-WHSE-FL == "Y")
          SR0FS-VAZCTN01-UPD(); /* update vazctn01 table rows*/
          SR0FS-VAZCIT01-UPD(); /* update vazcit01 table rows*/
        end

        SR0FS-VSRITM01-UPD(); /* update vsritm01 table rows*/

        SR0FS-VSRXCP01-UPD(); /* Update VSRXCP01 table rows*/

        SR0FS-VSRTXT01-UPD(); /* Update VSRTXT01 table rows*/

        SR0FS-VNLPLO01-UPD(); /* Update VNLPLO01 table rows*/

        SR0FS-VSPLIT01-UPD(); /* Update VSPLIT01 table rows*/

        SR0FS-VSRORD01-D(); /* delete original order*/

        SR2REC.PK1PKSCH = SR0FM030.SR0FMNSC; /* new schedule number*/
        SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
        SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* last chng time*/
        SR2REC.ZZZCHGCT = SR2REC.ZZZCHGCT + 1; /* Change count*/
        SR0FS-VSRORD01-A(); /* add order with new schedule*/

        /* accum order amounts to be used when updating srhdr*/

        SR0FW01.SR0FWITM = SR0FW01.SR0FWITM + SR2REC.SR2NBITM; /* accum items*/
        SR0FW01.SR0FWAMT = SR0FW01.SR0FWAMT + SR2REC.SR2DLRAM; /* accum amt*/
        SR0FW01.SR0FWQTY = SR0FW01.SR0FWQTY + SR2REC.SR2QTYSH; /* accum qty*/
        SR0FW01.SR0FWOCT = SR0FW01.SR0FWOCT + 1; /* add 1 to new order cnt*/

        SR0FS-VSRORD01-N7();

      end

      SR0FS-VSRORD01-C7();

    end

    SR0FW02.SR0FWIX2 = SR0FW02.SR0FWIX2 + 1;

  end


  SR0FS-VSRHDR01-UPD(); /* update srhdr row with old sched*/

  SR0FS-VSRHDR01-ADD(); /* add    srhdr row with new sched*/

  SR0FS-VSRHDR01-UPB(); /* update srhdr row with base sched*/

  set SR0FM030.SR0FMXWH cursor;
  set SR0FM030.SR0FMRSN skip, noHighLight;
  SR0FW02.SR0FWIX1 = 1;
  while (SR0FW02.SR0FWIX1 <= 40)
    set SR0FM030.SR0FMBLL[SR0FWIX1] skip, noHighLight;
    SR0FWIX1 = SR0FWIX1 + 1;
  end

  converseLib.validationFailed(58); /* BATCH HAS BEEN SPLIT*/
  SR0FM030.SR0FMMSG = "YOU MUST RESET THIS SCREEN BEFORE SPLITTING ANOTHER SCHEDULE";

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end SR0F040

// close vazcit01 set
Function SR0FS-VAZCIT01-C1()

  call "VAZCIT01" ("C1", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* c2 dship.vazcit01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCIT01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CIT01-C1";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCIT01-C1

// fetch next vazcit01 row
Function SR0FS-VAZCIT01-N1()

  call "VAZCIT01" ("N1", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* N2 dship.vazcit01*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCIT01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CIT01-N1";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCIT01-N1

// select original item set
Function SR0FS-VAZCIT01-S1()

  call "VAZCIT01" ("S1", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* s2 dship.vazcit01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCIT01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CIT01-S1";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCIT01-S1

// update dship.vazcit01 row
Function SR0FS-VAZCIT01-U()

  call "VAZCIT01" ("U ", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes}; /* update vazcit01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCIT01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CIT01-U";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCIT01-U

// update vazcit01 rows
Function SR0FS-VAZCIT01-UPD()

  VAZCIT01.XWH-WHSE-CD = SR0FM030.SR0FMXWH;
  VAZCIT01.PK-BILL-OF-LADING = SR0FW02.SR0FMBLL[SR0FWIX2];
  VAZCIT01.PK-BOL-SUB-NBR = -1;
  VAZCIT01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCIT01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;

  SR0FS-VAZCIT01-S1(); /* open vazcit01 cursor*/
  SR0FS-VAZCIT01-N1(); /* fetch first vazcit01 row*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (VAZCIT01.PK-PICK-SCHED-NBR == SR0FM030.SR0FMSCH)
      VAZCIT01.PK-PICK-SCHED-NBR = SR0FM030.SR0FMNSC;
      VAZCIT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VAZCIT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      VAZCIT01.ZZ-CHNG-CNT = 0;
      SR0FS-VAZCIT01-U(); /* update vazcit01 row*/
    end
    SR0FS-VAZCIT01-N1(); /* fetch next vazcit01 row*/
  end

  SR0FS-VAZCIT01-C1(); /* close vazcit01 cursor*/

end // end SR0FS-VAZCIT01-UPD

// close carton set (C6)
Function SR0FS-VAZCTN01-C6()

  call "VAZCTN01" ("C6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* c6 dship.vazctn01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CNT01-C6";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCTN01-C6

// read next carton row (N6)
Function SR0FS-VAZCTN01-N6()

  call "VAZCTN01" ("N6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* N6 dship.vazctn01*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CTN01-N6";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCTN01-N6

// select carton set (S6)
Function SR0FS-VAZCTN01-S6()

  call "VAZCTN01" ("S6", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* s6 dship.vazctn01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CTN01-S6";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCTN01-S6

// update dship.vazctn01 row
Function SR0FS-VAZCTN01-U()

  call "VAZCTN01" ("U ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes}; /* update vazctn01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VAZCTN01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CTN01-U";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VAZCTN01-U

// update vazctn01 rows
Function SR0FS-VAZCTN01-UPD()

  VAZCTN01.XWH-WHSE-CD = SR0FM030.SR0FMXWH;
  VAZCTN01.PK-BILL-OF-LADING = SR0FW02.SR0FMBLL[SR0FWIX2];
  VAZCTN01.PK-BOL-SUB-NBR = -1;
  VAZCTN01.OP-CUST-ORD-ID = SR2REC.OP1CUOID;
  VAZCTN01.OP-NIKE-ORD-ID = SR2REC.OP1NORID;
  VAZCTN01.PK-PICK-SCHED-NBR = SR0FM030.SR0FMSCH;

  SR0FS-VAZCTN01-S6(); /* open vazctn01 cursor*/
  SR0FS-VAZCTN01-N6(); /* fetch first vazctn01 row*/

  while (SQLCA.VAGen_SQLCODE == 0)
    VAZCTN01.PK-PICK-SCHED-NBR = SR0FM030.SR0FMNSC;
    VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZCTN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VAZCTN01.ZZ-CHNG-CNT = 0;
    SR0FS-VAZCTN01-U(); /* update vazctn01 row*/
    SR0FS-VAZCTN01-N6(); /* fetch next vazctn01 row*/
  end

  SR0FS-VAZCTN01-C6(); /* close vazctn01 cursor*/

end // end SR0FS-VAZCTN01-UPD

// Close VNLPLO01 cursor
Function SR0FS-VNLPLO01-C2()

  try
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VNLPLO01 CURSOR";
  TA1REC.TA1PGMNM = "PLO01-C2"; /* Program name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VNLPLO01-C2

// Fetch next VNLPLO01 row
Function SR0FS-VNLPLO01-N2()

  try
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of cursor*/
      return; /* Return to previous process*/
    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VNLPLO01 ROW";
  TA1REC.TA1PGMNM = "PLO01-N2"; /* Program name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VNLPLO01-N2

// Open VNLPLO01 cursor
Function SR0FS-VNLPLO01-S2()

  try
    call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VNLPLO01 CURSOR";
  TA1REC.TA1PGMNM = "PLO01-S2"; /* Program name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VNLPLO01-S2

// Update VNLPLO01 row
Function SR0FS-VNLPLO01-U()

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE VNLPLO01 ROW";
  TA1REC.TA1PGMNM = "PLO01-U"; /* Program name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VNLPLO01-U

// Update VNLPLO01 table rows
Function SR0FS-VNLPLO01-UPD()

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.OP1CUOID = SR2REC.OP1CUOID;
  TSVREC.OP1NORID = SR2REC.OP1NORID;

  SR0FS-VNLPLO01-S2(); /* Open VNLPLO01 cursor*/
  SR0FS-VNLPLO01-N2(); /* Fetch first VNLPLO01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Until end of rows*/
    if (SR0FM030.SR0FMXWH == TSVREC.XWHCD /* and same warehouse*/
     && SR0FM030.SR0FMSCH == TSVREC.PK2SCHNO) /* and same schedule*/
      TSVREC.PK2SCHNO = SR0FM030.SR0FMNSC; /* New schedule*/
      TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      SR0FS-VNLPLO01-U(); /* Update VNLPLO01 row*/
    end
    SR0FS-VNLPLO01-N2(); /* Fetch next VNLPLO01 row*/
  end

  SR0FS-VNLPLO01-C2(); /* Close VNLPLO01 cursor*/

end // end SR0FS-VNLPLO01-UPD

// Close VSPLIT01 cursor
Function SR0FS-VSPLIT01-C4()

  try
    call "IO5760" ("C4", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSPLIT01 CURSOR";
  TA1REC.TA1PGMNM = "SPLIT-C4"; /* Program name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSPLIT01-C4

// Fetch next VSPLIT01 row
Function SR0FS-VSPLIT01-N4()

  try
    call "IO5760" ("N4", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of cursor*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VSPLIT01 ROW";
  TA1REC.TA1PGMNM = "SPLIT-N4"; /* Program name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSPLIT01-N4

// Open VSPLIT01 cursor
Function SR0FS-VSPLIT01-S4()

  try
    call "IO5760" ("S4", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSPLIT01 CURSOR";
  TA1REC.TA1PGMNM = "SPLIT-S4"; /* Program name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSPLIT01-S4

// Update VSPLIT01 row
Function SR0FS-VSPLIT01-U()

  try
    call "IO5760" ("U ", SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE VSPLIT01 ROW";
  TA1REC.TA1PGMNM = "SPLIT-U "; /* Program name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSPLIT01-U

// Update VSPLIT01 table rows
Function SR0FS-VSPLIT01-UPD()

  set PWPREC empty; /* Clear row storage area*/

  PWPREC.XWHCD = SR0FM030.SR0FMXWH;
  PWPREC.PK1PKSCH = SR0FM030.SR0FMSCH;
  PWPREC.OP1CUOID = SR2REC.OP1CUOID;
  PWPREC.OP1NORID = SR2REC.OP1NORID;

  SR0FS-VSPLIT01-S4(); /* Open VSPLIT01 cursor*/
  SR0FS-VSPLIT01-N4(); /* Fetch first VSPLIT01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Until end of rows*/
    PWPREC.PK1PKSCH = SR0FM030.SR0FMNSC; /* New schedule*/
    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    SR0FS-VSPLIT01-U(); /* Update VSPLIT01 row*/
    SR0FS-VSPLIT01-N4(); /* Fetch next VSPLIT01 row*/
  end

  SR0FS-VSPLIT01-C4(); /* Close VSPLIT01 cursor*/

end // end SR0FS-VSPLIT01-UPD

// fmt/write new batch header
Function SR0FS-VSRHDR01-A()

  call "IO0790" ("A ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRHDR01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "HDR01-A";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRHDR01-A

// add vsrhdr01 with new sched
Function SR0FS-VSRHDR01-ADD()
  SR1REC.PK1PKSCH = SR0FM030.SR0FMNSC; /* new schedule number*/
  SR0FW01.SR0FWSCH = SR0FM030.SR0FMSCH;
  SR0FW01.SR0FLSTD = 0;
  SR1REC.SR1ORGSD = SR0FW01.SR0FWSCH - SR0FW01.SR0FWSCT;
  SR1REC.SR1HLDRN = " "; /* Hold reason*/
  SR1REC.SR1SPLRN = SR0FM030.SR0FMRSN; /* split reason*/
  SR1REC.SR1NTMSP = 0; /* number times split*/
  SR1REC.SR1DTCHG = 0; /* clear change date*/
  SR1REC.SR1TMCHG = 0; /* clear change time*/
  SR1REC.SR1NBORD = SR0FW01.SR0FWOCT; /* number of orders*/
  SR1REC.SR1NBITM = SR0FW01.SR0FWITM; /* number of items*/
  SR1REC.SR1QTYSH = SR0FW01.SR0FWQTY; /* batch qty shipped*/
  SR1REC.SR1DLRAM = SR0FW01.SR0FWAMT; /* batch dollar amt*/
  SR1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  SR1REC.ZZZCHGCT = 0; /* change count*/

  SR2REC.PK1PKSCH = SR0FM030.SR0FMNSC;
  SR0FS43(); /* see if all orders on new schedule*/
                                  /* have been picked*/
  if (SR0FW-ALL-STAT-EQ-Y-FL == "Y" /* if all orders have been picked*/
   && SR0FW-ALL-SHP-DT-GT-ZERO-FL == "Y") /* and all ship dates not = 0*/
    SR1REC.SR1BTST = "P"; /* mark schedule as prepared*/
    SR1REC.SR1SHPDT = SR0FW-MAX-SHP-DT; /* and use max ship date*/
  else
    SR1REC.SR1BTST = "E"; /* mark schedule as entered*/
    SR1REC.SR1SHPDT = 0; /* use zero ship date*/
  end

  if (SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL == "Y")
    SR1REC.SR1PKAFL = "N"; /* set srhdr pick actual to n*/
    SR1REC.SR1PKSFL = "Y"; /* set srhdr pick status to y*/
    SR1REC.SR1PKSDT = SR0FW-MAX-PICK-DT; /* and use max pick date*/
  else
    SR1REC.SR1PKSFL = "N"; /* set srhdr pick status to n*/
    SR1REC.SR1PKSDT = 0; /* and use zero pick date*/
    if (SR0FW-ANY-ACT-EQ-Y-FL == "Y")
      SR1REC.SR1PKAFL = "Y"; /* set srhdr pick actual to y*/
    else
      SR1REC.SR1PKAFL = "N"; /* set srhdr pick actual to n*/
    end
  end

  SR0FS-VSRHDR01-A(); /* add new header with new sched*/

end // end SR0FS-VSRHDR01-ADD

// read vsrhdr01 row
Function SR0FS-VSRHDR01-S()

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRHDR01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "HDR01-S";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRHDR01-S

// fmt/update orig. batch header
Function SR0FS-VSRHDR01-U()

  call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRHDR01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "HDR01-U";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRHDR01-U

// update vsrhdr01 with bas sched
Function SR0FS-VSRHDR01-UPB()
  SR1REC.XWHCD = SR0FM030.SR0FMXWH; /* whse*/
  SR0FW01.SR0FWSCH = SR0FM030.SR0FMSCH; /* get base*/
  SR0FW01.SR0FLSTD = 0; /* schedule number*/
  SR1REC.PK1PKSCH = SR0FW01.SR0FWSCH;

  SR0FS-VSRHDR01-S();

  SR1REC.SR1ORGSD = SR0FM030.SR0FMNSC;
  SR1REC.SR1NTMSP = SR1REC.SR1NTMSP + 1;
  SR1REC.SR1DTCHG = XX0XW01.XX0XWDAT;
  SR1REC.SR1TMCHG = XX0XW01.XX0XWTIM;
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  SR0FS-VSRHDR01-U();

end // end SR0FS-VSRHDR01-UPB

// update vsrhdr01 with old sched
Function SR0FS-VSRHDR01-UPD()
  SR1REC.XWHCD = SR0FM030.SR0FMXWH; /* whse*/
  SR1REC.PK1PKSCH = SR0FM030.SR0FMSCH; /* schedule*/
  SR0FS-VSRHDR01-S(); /* read original batch header*/

  SR1REC.SR1DTCHG = XX0XW01.XX0XWDAT;
  SR1REC.SR1TMCHG = XX0XW01.XX0XWTIM;
  SR1REC.SR1NBORD = SR1REC.SR1NBORD - SR0FW01.SR0FWOCT; /* nbr of orders*/
  SR1REC.SR1NBITM = SR1REC.SR1NBITM - SR0FW01.SR0FWITM; /* nbr of items*/
  SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - SR0FW01.SR0FWQTY; /* qty shipped*/
  SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - SR0FW01.SR0FWAMT; /* dollar amt*/
  SR1REC.XXXUSRID = COMMAREA.CAUSERID;
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  SR2REC.PK1PKSCH = SR0FM030.SR0FMSCH;
  SR0FS43(); /* see if all orders on old schedule*/
                                    /* have been picked*/
  if (SR0FW-ALL-STAT-EQ-Y-FL == "Y" /* if all orders have been picked*/
   && SR0FW-ALL-SHP-DT-GT-ZERO-FL == "Y") /* and all ship dates gt 0*/
    SR1REC.SR1BTST = "P"; /* mark schedule as prepared*/
    SR1REC.SR1SHPDT = SR0FW-MAX-SHP-DT; /* and use max ship date*/
  else
    SR1REC.SR1BTST = "E"; /* mark schedule as entered*/
    SR1REC.SR1SHPDT = 0; /* use zero ship date*/
  end

  if (SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL == "Y")
    SR1REC.SR1PKAFL = "N"; /* set srhdr pick actual to n*/
    SR1REC.SR1PKSFL = "Y"; /* set srhdr pick status to y*/
    SR1REC.SR1PKSDT = SR0FW-MAX-PICK-DT; /* and use max pick date*/
  else
    SR1REC.SR1PKSFL = "N"; /* set srhdr pick status to n*/
    SR1REC.SR1PKSDT = 0; /* and use zero pick date*/
    if (SR0FW-ANY-ACT-EQ-Y-FL == "Y")
      SR1REC.SR1PKAFL = "Y"; /* set srhdr pick actual to y*/
    else
      SR1REC.SR1PKAFL = "N"; /* set srhdr pick actual to n*/
    end
  end

  SR0FS-VSRHDR01-U(); /* update original header*/

end // end SR0FS-VSRHDR01-UPD

// add new vsritm01 row
Function SR0FS-VSRITM01-A()

  call "SR1100" ("A ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsritm01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ITM01-A";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRITM01-A

// close vsritm01 cursor
Function SR0FS-VSRITM01-CS()

  call "SR1100" ("CS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* cs dship.vsritm01 view*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ITM01-CS";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRITM01-CS

// global delete orig vsritm01
Function SR0FS-VSRITM01-D()

  call "SR1100" ("D ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsritm01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ITM01-D";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRITM01-D

// readnext original item
Function SR0FS-VSRITM01-SN()

  call "SR1100" ("SN", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* sn dship.vsritm01 view*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "SRITM-SN";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRITM01-SN

// select vsritm01 set
Function SR0FS-VSRITM01-SS()

  call "SR1100" ("SS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes}; /* ss dship.vsritm01 view*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRITM01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ITM01-SS";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRITM01-SS

// update vsritm01 rows
Function SR0FS-VSRITM01-UPD()

  SR3REC.XWHCD = SR0FM030.SR0FMXWH;
  SR3REC.PK1PKSCH = SR0FM030.SR0FMSCH;
  SR3REC.OP1CUOID = SR2REC.OP1CUOID;
  SR3REC.OP1NORID = SR2REC.OP1NORID;
  SR3REC.OP1NTMAL = SR2REC.OP1NTMAL;

  SR0FS-VSRITM01-SS(); /* select items in original order*/
  SR0FS-VSRITM01-SN(); /* read first selected item*/

  while (SQLCA.VAGen_SQLCODE == 0)
    SR3REC.PK1PKSCH = SR0FM030.SR0FMNSC; /* new schedule numbe*/
    SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* last chng time*/
    SR3REC.ZZZCHGCT = 0; /* change count*/
    SR0FS-VSRITM01-A(); /* add new item row*/
    SR0FS-VSRITM01-SN(); /* read next selected item*/
  end

  SR0FS-VSRITM01-CS(); /* close item set*/

  SR3REC.PK1PKSCH = SR0FM030.SR0FMSCH; /* reset original sched*/
  SR3REC.OP2LNINB = -1; /* wildcard for items*/
  SR0FS-VSRITM01-D(); /* globally delete orig sritm rows*/

end // end SR0FS-VSRITM01-UPD

// add new vsrord01 row
Function SR0FS-VSRORD01-A()

  call "IO0800" ("A ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ORD01-A";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-A

// close VSRORD01 C2 cursor
Function SR0FS-VSRORD01-C2()

  call "IO0800" ("C2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CLOSE VSRORD01 S2 CUSSOR";
    TA1REC.TA1PGMNM = "ORD01-C2";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-C2

// close vsrord01 cursor
Function SR0FS-VSRORD01-C7()

  call "IO0800" ("C7", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0
  )
  else
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ORD01-C7";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-C7

// close VSRORD01 C8 cursor
Function SR0FS-VSRORD01-C8()

  call "IO0800" ("C8", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "CLOSE VSRORD01 S2 CUSSOR";
    TA1REC.TA1PGMNM = "ORD01-C8";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-C8

// delete original vsrord01 row
Function SR0FS-VSRORD01-D()

  call "IO0800" ("D ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* write dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ORD01-D";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-D

// fetch next VSRORD01 row
Function SR0FS-VSRORD01-N2()

  call "IO0800" ("N2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "FETCH VSRORD01 S2 ROW";
    TA1REC.TA1PGMNM = "ORD01-N2";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-N2

// get next vsrord01 row
Function SR0FS-VSRORD01-N7()

  call "IO0800" ("N7", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0
  )
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SR0FW01.SR0FW-SRORD-EOF-FL = "Y";
    else
      SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DSHIP";
      TA1REC.TA1TBLVU = "VSRORD01";
      TA1REC.TA1MAP = "SR0FM030";
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1LOC = "ORD01-N7";
      TA1REC.TA1PGMNM = "CSP    ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

  end

end // end SR0FS-VSRORD01-N7

// fetch next VSRORD01 row
Function SR0FS-VSRORD01-N8()

  call "IO0800" ("N8", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "FETCH VSRORD01 S8 ROW";
    TA1REC.TA1PGMNM = "ORD01-N8";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-N8

// open S2 cursor for VSRORD01
Function SR0FS-VSRORD01-S2()

  call "IO0800" ("S2", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "OPEN VSRORD01 S2 CURSOR";
    TA1REC.TA1PGMNM = "ORD01-S2";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-S2

// open vsrord01 cursor
Function SR0FS-VSRORD01-S7()

  call "IO0800" ("S7", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0
  )
  else
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "ORD01-S7";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-S7

// open S8 cursor for VSRORD01
Function SR0FS-VSRORD01-S8()

  call "IO0800" ("S8", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "OPEN VSRORD01 S8 CURSOR";
    TA1REC.TA1PGMNM = "ORD01-S8";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS-VSRORD01-S8

// Insert VSRTXT01 row
Function SR0FS-VSRTXT01-A()

  try
    call "IO2040" ("A ", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT VSRTXT01 ROW";
  TA1REC.TA1PGMNM = "TXT01-A "; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRTXT01-A

// Close VSRTXT01 cursor
Function SR0FS-VSRTXT01-C1()

  try
    call "IO2040" ("C1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSRTXT01 CURSOR";
  TA1REC.TA1PGMNM = "TXT01-C1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRTXT01-C1

// Delete VSRTXT01 row
Function SR0FS-VSRTXT01-D()

  try
    call "IO2040" ("D ", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE VSRTXT01 ROW";
  TA1REC.TA1PGMNM = "TXT01-D "; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SR0FS-VSRTXT01-D

// Fetch next VSRTXT01 row
Function SR0FS-VSRTXT01-N1()

  try
    call "IO2040" ("N1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of cursor*/
      return; /* Return to previous process*/
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VSRTXT01 ROW";
  TA1REC.TA1PGMNM = "TXT01-N1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRTXT01-N1

// Open VSRTXT01 cursor
Function SR0FS-VSRTXT01-S1()

  try
    call "IO2040" ("S1", SQLCA, SR9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSRTXT01 CURSOR";
  TA1REC.TA1PGMNM = "TXT01-S1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRTXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR9REC.SR9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRTXT01-S1

// Update VSRTXT01 table rows
Function SR0FS-VSRTXT01-UPD()

  set SR9REC empty; /* Clear row storage area*/

  SR9REC.XWHCD = SR0FM030.SR0FMXWH;
  SR9REC.PK1PKSCH = SR0FM030.SR0FMSCH;
  SR9REC.OP1CUOID = SR2REC.OP1CUOID;
  SR9REC.OP1NORID = SR2REC.OP1NORID;
  SR9REC.OP4TRTYP = "*";
  SR9REC.XNDCD = "*";

  SR0FS-VSRTXT01-S1(); /* Open VSRTXT01 cursor*/
  SR0FS-VSRTXT01-N1(); /* Fetch next VSRTXT01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Until end of rows*/
    SR0FS-VSRTXT01-D(); /* Delete VSRTXT01 row*/
    SR9REC.PK1PKSCH = SR0FM030.SR0FMNSC; /* New schedule*/
    SR9REC.ZZZCHGCT = SR9REC.ZZZCHGCT + 1; /* Change count*/
    SR0FS-VSRTXT01-A(); /* Insert VSRTXT01 row*/
    SR0FS-VSRTXT01-N1(); /* Fetch next VSRTXT01 row*/
  end

  SR0FS-VSRTXT01-C1(); /* Close VSRTXT01 cursor*/

end // end SR0FS-VSRTXT01-UPD

// Insert VSRXCP01 row
Function SR0FS-VSRXCP01-A()

  try
    call "IO0830" ("A ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT VSRXCP01 ROW";
  TA1REC.TA1PGMNM = "XCP01-A "; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR5REC.SR5GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRXCP01-A

// Close VSRXCP01 cursor
Function SR0FS-VSRXCP01-C1()

  try
    call "IO0830" ("C1", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSRXCP01 CURSOR";
  TA1REC.TA1PGMNM = "XCP01-C1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR5REC.SR5GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRXCP01-C1

// Delete VSRXCP01 row
Function SR0FS-VSRXCP01-D()

  try
    call "IO0830" ("D ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(124); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE VSRXCP01 ROW";
  TA1REC.TA1PGMNM = "XCP01-D "; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR5REC.SR5GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRXCP01-D

// Fetch next VSRXCP01 row
Function SR0FS-VSRXCP01-N1()

  try
    call "IO0830" ("N1", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or end of cursor*/
      return; /* Return to previous process*/
    end
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VSRXCP01 ROW";
  TA1REC.TA1PGMNM = "XCP01-N1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR5REC.SR5GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRXCP01-N1

// Open VSRXCP01 cursor
Function SR0FS-VSRXCP01-S1()

  try
    call "IO0830" ("S1", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(124); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSRXCP01 CURSOR";
  TA1REC.TA1PGMNM = "XCP01-S1"; /* Program name*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR5REC.SR5GRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SR0FS-VSRXCP01-S1

// Update VSRXCP01 table rows
Function SR0FS-VSRXCP01-UPD()

  set SR5REC empty; /* Clear row storage area*/

  SR5REC.XWHCD = SR0FM030.SR0FMXWH;
  SR5REC.PK1PKSCH = SR0FM030.SR0FMSCH;
  SR5REC.OP1CUOID = SR2REC.OP1CUOID;
  SR5REC.OP1NORID = SR2REC.OP1NORID;

  SR0FS-VSRXCP01-S1(); /* Open VSRXCP01 cursor*/
  SR0FS-VSRXCP01-N1(); /* Fetch next VSRXCP01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* Until end of rows*/
    SR0FS-VSRXCP01-D(); /* Delete VSRXCP01 row*/
    SR5REC.PK1PKSCH = SR0FM030.SR0FMNSC; /* New schedule*/
    SR5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    SR5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    SR5REC.ZZZCHGCT = SR5REC.ZZZCHGCT + 1; /* Change count*/
    SR0FS-VSRXCP01-A(); /* Insert VSRXCP01 row*/
    SR0FS-VSRXCP01-N1(); /* Fetch next VSRXCP01 row*/
  end

  SR0FS-VSRXCP01-C1(); /* Close VSRXCP01 cursor*/

end // end SR0FS-VSRXCP01-UPD

// validate whse
Function SR0FS05()

  if (SR0FM030.SR0FMXWH == " ")
    SR0FM030.SR0FMWHN = " ";
    converseLib.validationFailed(17); /* warehouse code cannot be blank*/
  else
    if (SR0FM030.SR0FMXWH in XWHTBL.XWHCD)
      SR0FM030.SR0FMWHN = XWHTBL.XWHNM[sysVar.arrayIndex];
      if (XWHTBL.XWTCD[sysVar.arrayIndex] == "01"
       && XWHTBL.XWHSTKLF[sysVar.arrayIndex] == "Y")
        SR0FW01.SR0FW-MOVERS-WHSE-FL = "Y";
      else
        SR0FW01.SR0FW-MOVERS-WHSE-FL = "N";
      end
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set PKDREC empty; /* warehouse valid*/
        PKDREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex];
        SR0FS06(); /* get picking cntrl tbl*/
      else
        SR0FM030.SR0FMWHN = " ";
        converseLib.validationFailed(2); /* warehouse code inactive*/
      end
    else
      SR0FM030.SR0FMWHN = " ";
      converseLib.validationFailed(1); /* warehouse code entered is invalid*/
    end
  end

end // end SR0FS05

// get whse type(processing etc)
Function SR0FS06()
    /* read picking control table (dpick.vpkctl01)*/

  call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VPKCTL01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = PKDREC.XWHCD;
    TA1REC.TA1LOC = "SR0FS06";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS06

// validate schedule entered
Function SR0FS07()
  if (SR0FM030.SR0FMSCH == 0)
    converseLib.validationFailed(14); /* ORIG. BTCH NOT FOUND*/
    return;
  end

  SR1REC.XWHCD = SR0FM030.SR0FMXWH; /* whse*/
  SR1REC.PK1PKSCH = SR0FM030.SR0FMSCH; /* schedule*/

  SR0FS08(); /* read dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SR1REC.TF1CARNM == "DCMS") /* if a dcms order*/
      converseLib.validationFailed(254); /* can not split dcms order*/

    else
      if (SR1REC.SR1BTST == "E" /* status entered?*/
       || SR1REC.SR1BTST == "P" /* status prepared?*/
       || SR1REC.SR1BTST == "H") /* status hold?*/

      else
        converseLib.validationFailed(52); /* ORIG. BTCH MUST BE E, P, OR*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(53); /* ORIG. BTCH NOT FOUND*/
    end
  end

end // end SR0FS07

// get srhdr row
Function SR0FS08()

  call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)

  else
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRHDR01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "SR0FS08";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS08

// validate sched/bol exists
Function SR0FS10()

  set SR2REC empty;
  SR2REC.XWHCD = SR0FM030.SR0FMXWH;
  SR2REC.PK1PKSCH = SR0FM030.SR0FMSCH;
  SR2REC.PK1BLLAD = SR0FM030.SR0FMBLL[SR0FWIX1];

  SR0FS12(); /* select one or many rows with bol*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(133); /* sched/bol not found*/
    return;
  end


    /* verify bol not already entered on previous line*/
    /*  */
  SR0FW02.SR0FWIX3 = SR0FM030.SR0FMHPG * 40;
  while (SR0FW02.SR0FWIX3 > 0)
    if (SR0FM030.SR0FMBLL[SR0FWIX1] == SR0FW02.SR0FMBLL[SR0FWIX3])
      converseLib.validationFailed(132);
      return;
    end
    SR0FW02.SR0FWIX3 = SR0FWIX3 - 1;
  end

end // end SR0FS10

// select unique srord
Function SR0FS12()

  call "IO0800" ("2E", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes}; /* read dship.vsrord01*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -811)

  else
    SR0FW01.SR0FWSQL = SQLCA.SQLCAREC; /* save error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    SQLCA.SQLCAREC = SR0FW01.SR0FWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DSHIP";
    TA1REC.TA1TBLVU = "VSRORD01";
    TA1REC.TA1MAP = "SR0FM030";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "SR0FS12";
    TA1REC.TA1PGMNM = "CSP    ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end SR0FS12

// get new schedule number
Function SR0FS13()

  SR1REC.XWHCD = SR0FM030.SR0FMXWH; /* whse*/
  SR0FW01.SR0FWSCH = SR0FM030.SR0FMSCH; /* make low order digit*/
  SR0FW01.SR0FLSTD = 0; /* of old sched # = 0*/
  SR1REC.PK1PKSCH = SR0FW01.SR0FWSCH;

  SR0FS08(); /* get srhdr row with that sched*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(109); /* base schedule not found*/
    return;
  end

  if (SR0FM030.SR0FMSCH >= 9900000 /* direct ship schedule*/
   || PKDREC.PKDWHTCD == "10"      /* packing spur warehouse*/
   || PKDREC.PKDWHTCD == "30")     /* processing warehouse*/
    SR0FW01.SR0FWSCT = 0;
    SR0FW01.SR0FWSCH = SR1REC.SR1ORGSD;
  else
    SR0FW01.SR0FWSCT = SR1REC.PK1PKSCH;
    SR0FW01.SR0FWSCX = 0;
    SR0FW01.SR0FWSCH = SR1REC.SR1ORGSD + SR0FW01.SR0FWSCT;
  end

  SR0FW01.SR0FSLST = SR0FW01.SR0FLSTD;
  SR0FW01.SR0FW-FND-AVAIL-SCH = "N";

  if (SR0FW01.SR0FLSTD == 9)
    SR0FW01.SR0FLSTD = 1;
  else
    SR0FW01.SR0FLSTD = SR0FW01.SR0FLSTD + 1;
  end

  while (SR0FW01.SR0FLSTD != SR0FW01.SR0FSLST
   && SR0FW01.SR0FW-FND-AVAIL-SCH == "N")
    SR1REC.PK1PKSCH = SR0FW01.SR0FWSCH; /* make low order digit*/
    SR0FS08();
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SR0FW01.SR0FLSTD == 9)
        SR0FW01.SR0FLSTD = 1;
      else
        SR0FW01.SR0FLSTD = SR0FW01.SR0FLSTD + 1;
      end
    else
      SR0FW01.SR0FW-FND-AVAIL-SCH = "Y";
    end
  end

  if (SR0FW01.SR0FW-FND-AVAIL-SCH == "N") /* if no avail new sched*/
    converseLib.validationFailed(108); /* schedule already split 9 times*/
  end

end // end SR0FS13

// see if all orders picked
Function SR0FS43()

  SR0FW-ALL-STAT-EQ-Y-FL = "Y";
  SR0FW-ANY-ACT-EQ-Y-FL = "N";
  SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL = "Y";
  SR0FW-ALL-SHP-DT-GT-ZERO-FL = "Y";
  SR0FW-MAX-SHP-DT = 0;
  SR0FW-MAX-PICK-DT = 0;

  SR2REC.XWHCD = SR0FM030.SR0FMXWH;
  SR2REC.OP1CUOID = -1;
  SR2REC.OP1NORID = -1;
  SR2REC.OP1NTMAL = -1;

  SR0FS-VSRORD01-S2(); /* select set of srord rows with sched*/
  SR0FS-VSRORD01-N2(); /* fetch first row*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (SR2REC.SR1PKSFL == "N")
      SR0FW-ALL-STAT-EQ-Y-FL = "N";
    end
    if (SR2REC.SR1PKAFL == "Y")
      SR0FW-ANY-ACT-EQ-Y-FL = "Y";
    end
    if (SR2REC.SR1PKAFL == "N"
     && SR2REC.SR1PKSFL == "Y")

    else
      SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL = "N";
    end
    if (SR2REC.SR1SHPDT == 0)
      SR0FW-ALL-SHP-DT-GT-ZERO-FL = "N";
    end
    if (SR2REC.SR1PKSDT > SR0FW-MAX-PICK-DT)
      SR0FW-MAX-PICK-DT = SR2REC.SR1PKSDT;
    end
    if (SR2REC.SR1SHPDT > SR0FW-MAX-SHP-DT)
      SR0FW-MAX-SHP-DT = SR2REC.SR1SHPDT;
    end
    SR0FS-VSRORD01-N2(); /* fetch next row*/
  end

  SR0FS-VSRORD01-C2(); /* close cursor for srord*/

end // end SR0FS43

//*** RECORD=SR0FW01 ****
// *********** split batch misc fields work rec ***************
// 
// ***********************
Record SR0FW01 type basicRecord
  5 SR0FMXWH SR0FMXWH ; 
  5 SR0FMSCH SR0FMSCH ; 
  5 SR0FMRSN SR0FMRSN ; 
  5 * char(1) ; 
  5 SR0FWSQL SR0FWSQL ; 
  5 SR0FVRFY SR0FVRFY ; 
  5 SR0FWSCH SR0FWSCH ; 
    10 * num(6) ; 
    10 SR0FLSTD SR0FLSTD ; 
  5 SR0FWSCT SR0FWSCT ; 
    10 * num(1) ; 
    10 SR0FWSCX SR0FWSCX ; 
  5 SR0FW-FND-AVAIL-SCH SR0FW-FND-AVAIL-SCH ; 
  5 SR0FW-MOVERS-WHSE-FL SR0FW-MOVERS-WHSE-FL ; 
  5 SR0FW-ALL-SHP-DT-GT-ZERO-FL SR0FW-ALL-SHP-DT-GT-ZERO-FL ; 
  5 SR0FW-ALL-STAT-EQ-Y-FL SR0FW-ALL-STAT-EQ-Y-FL ; 
  5 SR0FW-ANY-ACT-EQ-Y-FL SR0FW-ANY-ACT-EQ-Y-FL ; 
  5 SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL ; 
  5 SR0FW-SRORD-EOF-FL SR0FW-SRORD-EOF-FL ; 
  5 SR0FW-MAX-PICK-DT SR0FW-MAX-PICK-DT ; 
  5 SR0FW-MAX-SHP-DT SR0FW-MAX-SHP-DT ; 
  5 SR0FSLST SR0FSLST ; 
  5 * char(1) ; 
  5 SR0FWITM SR0FWITM ; 
  5 SR0FWAMT SR0FWAMT ; 
  5 SR0FWQTY SR0FWQTY ; 
  5 SR0FWOCT SR0FWOCT ; 
  5 SR0FW-BOLS-ENTERED SR0FW-BOLS-ENTERED ; 
  5 SR0FW-TOT-BOLS-FOR-SCHED SR0FW-TOT-BOLS-FOR-SCHED ; 
end // end SR0FW01

//*** RECORD=SR0FW02 ****
// ** split batch orders array and supporting fields **
// 
// ***********************
Record SR0FW02 type basicRecord
  10 SR0FWIX1 SR0FWIX1 ; 
  10 SR0FWIX2 SR0FWIX2 ; 
  10 SR0FWIX3 SR0FWIX3 ; 
  10 SR0FMBLL SR0FMBLL [200] ; 
end // end SR0FW02

DataItem SR0FLSTD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FMBLL num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FMRSN char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FMSCH num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FMXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FSLST num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FVRFY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-ALL-ACT-EQ-N-STAT-EQ-Y-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-ALL-SHP-DT-GT-ZERO-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-ALL-STAT-EQ-Y-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-ANY-ACT-EQ-Y-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-BOLS-ENTERED smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FW-FND-AVAIL-SCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-MAX-PICK-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FW-MAX-SHP-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FW-MOVERS-WHSE-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-SRORD-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SR0FW-TOT-BOLS-FOR-SCHED smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWAMT num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWITM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWOCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWQTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWSCH num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWSCT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWSCX num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SR0FWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

