package nl0a;

import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ni.common.NIWREC;
import nl.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
//*** PROGRAM=NL0A ****
// ************************************************************
// 
//               nl0A - Descriptive name
//               ---------------------------
// 
// General program explanation and notes
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 05-07-89 ccc    set up
// 04-15-91 JSHANN Added L/C PROFORMA OPTION
// 09-08-91 JSHANN Added Claims
// 11-18-93 JJUDKI Added INTL SUBMITTED BUY LOG OPTION #7.
// 03-11-94 kshaw  march db changes.
// *********************
Program NL0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  NIWREC NIWREC; // record
  NL0AW01 NL0AW01; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NL0AT {deleteAfterUse = yes}; // table
  use NL0AM.NL0AM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NL0A000: NL0A000();
    exit program;
  end // end main
end // end NL0A

// main flow
Function NL0A000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NL0A000";
  COMMAREA.CACURRAP = "NL0A";
  ;
  NL0A001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NL0A050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NL0A000

// initialize application
Function NL0A001()
  ;
  NLXREC.NLXCPROC = "NL0A001";
  ;
   /* SET NL0AW01 EMPTY               ; clear working storage rec1*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
   /* TEMP001;*/
  ;
   /* SET NLXREC EMPTY    ; clear common working storage*/
  ;
  NLXREC.NLXSNAME[1] = "NL0AM100"; /* init screens used in this appl*/
  NLXREC.NLXCSCRN = "NL0AM100"; /* set first screen to display*/
  ;
end // end NL0A001

// decide which map to display
Function NL0A050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NL0A050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NL0A100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NL0A050

// converse menu
Function NL0A100()
  NL0AM100.NL0AMDT = VGVar.currentShortGregorianDate;
  NL0AW01.NL0AWNDX = 01;
  while (NL0AW01.NL0AWNDX <= 26
   && NL0AT.NL0ATOCD[NL0AWNDX] != 99)
    NL0AM100.NL0ATOCD[NL0AWNDX] = NL0AT.NL0ATOCD[NL0AWNDX];
    NL0AM100.NL0ATCDD[NL0AWNDX] = NL0AT.NL0ATCDD[NL0AWNDX];
    NL0AWNDX = NL0AWNDX + 1;
  end
  if (NL0AWNDX <= 14)
    set NL0AM100.NL0AMHD1 skip, invisible;
                                   /* remove second column header*/
    set NL0AM100.NL0AMHD2 skip, invisible;
                                   /* remove second column header*/
  end
  converse NL0AM100 ;
  ;
      /* clear message fields*/
  ;
  NL0AM100.VAGen_EZEMSG = " "; /* clear err msg*/
  NL0AM100.NL0AMMSG = " "; /* clear err msg*/
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  if (NL0AM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NL0AM100.CATOAP;
    COMMAREA.CAITEM = NL0AM100.CAITEM;
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4
         || converseVar.eventKey is pf3)
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          COMMAREA.CATOAP = " ";
          converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
          NLXREC.NLXERRF = "Y";
        end
      end
    end
  end
  ;
      /* reset map attributes*/
  ;
  set NL0AM100.NL0AMSEL cursor, normal;
  ;
      /* process selected application*/
  ;
  if (NL0AM100.NL0AMSEL in NL0AT.NL0ATOCD)
    COMMAREA.CATOAP = NL0AT.NL0ATTAP[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* test for not found in table*/
    NL0AM100.VAGen_EZEMSG = "INVALID APPLICATION SELECTED - REENTER";
    set NL0AM100.NL0AMSEL modified, bold; /* field error*/
    return;
  else
    COMMAREA.CAUSERA = " ";
    COMMAREA.CATOAP = NL0AT.NL0ATTAP[sysVar.arrayIndex];
    XPNL002();
    return;
  end
  ;
end // end NL0A100

//*** RECORD=NL0AW01 ****
// this is the working storage for the csp application ku0a
// ***********************
Record NL0AW01 type basicRecord
  5 NL0AWNDX NL0AWNDX ; 
end // end NL0AW01

// table index
DataItem NL0AWNDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

