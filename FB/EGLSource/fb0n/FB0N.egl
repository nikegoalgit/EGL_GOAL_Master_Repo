package fb0n;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import fb.common.FB1CMNT;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB5FRMDT;
import fb.common.FB5REC;
import fb.common.FB5TODT;
import fb.common.FBWREC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0N ****
// The transferred data is verified to be complete and
// correct. The requested table row is selected and the data is
// formatted and displayed to the user.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/14/89  cnewma  New application.
// FB-306   02/03/93  jmclau  Enlarge the size percent fields
//                            so 100 % can be displayed.
//          10/02/03  ldeluh  Replace xsexit with xsfbs01
//                            which then calls xsexit.
// *********************
Program FB0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0NW00 FB0NW00; // record
  FB0NW01 FB0NW01; // record
  FB0NW02 FB0NW02; // record
  FB0NW03 FB0NW03; // record
  FB1REC FB1REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use FB0NM.FB0NM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FB0NM010 initial; /* M001 input/output*/
    set FB0NW00 empty; /* Working storage*/
    set FB0NW01 empty; /* header display storage*/
    set FB0NW02 empty; /* page one display storage*/
    set FB0NW03 empty; /* page two display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FB0NW00.FB1INSEQ = FBWREC.FB1INSEQ; /* internal sequence nbr*/
    FB0NW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    FB0NW01.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
    FB0NW01.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
    FB0NW01.XDMCD = FBWREC.XDMCD; /* dimension code*/
    ;
    if (FBWREC.SY1STNBR != " " /* gpc code*/
     && FBWREC.SY2CLRID != " " /* color id*/
     && FBWREC.XDMCD != " "    /* dimension code*/
     && FBWREC.XQACD != " "    /* quality code*/
     && FBWREC.PC2INSEG != " " /* spec difference code*/
     && FBWREC.XSACD != " "    /* shade code*/
     && FBWREC.XPGCD != " "    /* packing type code*/
     && FBWREC.XUMCD != " "    /* unit of measure code*/
     && FBWREC.FB1INSEQ != 0)  /* internal sequence number*/
      FB0NW00.FB0NWSPR = "P"; /* indicate valid product*/
    else
      FB0NW00.FB0NWSPR = "I"; /* indicate invalid product*/
      FB0NM010.XXXMODID = "XPFB"; /* module identification*/
      converseLib.validationFailed(42); /* 'no product data'*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0N001; /* Converse the main process*/
    ;
    ;
    FB0N001: FB0N001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0N001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FB0N

// Inquire/maintain a table row
Function FB0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0N100(); /* Obtain the data to display*/
  ;
  FB0N200(); /* Format and display the map*/
  ;
  FB0N300(); /* Check attention identifier*/
  ;
  FB0N400(); /* Reset fields to normal intensity*/
  ;
  FB0N500(); /* Verify the entered data*/
  ;
  FB0N600(); /* Process valid input request*/
  ;
  ;
end // end FB0N001

// Obtain the data to display
Function FB0N100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* data should not be re-obtained*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWSDR == "N") /* do not re-obtain data*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* get selection criteria*/
   /* ------------------------------------------------------------*/
  ;
  FB0N110(); /* get selection criteria*/
  ;
   /* ------------------------------------------------------------*/
   /* get region data*/
   /* ------------------------------------------------------------*/
  ;
  FB0N120(); /* get region data*/
  ;
  ;
end // end FB0N100

// get selection criteria
Function FB0N110()
  FB0NW00.FB0NWMAP = "PG1"; /* set switch to display first page*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain header data*/
   /* ------------------------------------------------------------*/
  ;
  FB0N111(); /* Obtain header data*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain need dates*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and set cursor from table  - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0N112(); /* Select and set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the next row to display from the table - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0NW00.FB0NWDCF != "Y")
    FB0N113(); /* Get next table row*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if no date table rows found - abort application*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWFD == " ") /* no record read*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    FB0NM010.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "TABLE ROW NOT FOUND ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
    TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor from table   - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0N114(); /* close cursor*/
  ;
  ;
end // end FB0N110

// obtain header data
Function FB0N111()
   /* ------------------------------------------------------------*/
   /* Initialize row storage area*/
   /* Format record key*/
   /* ------------------------------------------------------------*/
  ;
  set FB1REC empty; /* Initialize row storage*/
  ;
  FB1REC.FB1INSEQ = FB0NW00.FB1INSEQ; /* initialize seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* Select requested row from table - vselhd01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If sucessful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      ;
      FB0NW01.FB1CMNT = FB1REC.FB1CMNT; /* comments*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* If data not found, abort the application; otherwise, indi-*/
   /* cate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(11); /* 'RECORD NOT ON DATABASE'*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        ;
        converseLib.validationFailed(19); /* 'RESOURCES UNAVAILABLE'*/
        FB0NW00.FB0NWRNA = "Y"; /* reSOURCES UNAVAILABLE switch*/
        TA1REC.TA1FUNC = "POST"; /* termination function*/
        ;
      else
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        converseLib.validationFailed(01); /* 'ERROR - PLEASE NOTIFY PROGRAMMING'*/
      end
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  FB0NM010.XXXMODID = "111"; /* module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "GET VSELHD01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* exit to display map*/
  ;
  ;
  ;
  ;
end // end FB0N111

// select set date table cursor
Function FB0N112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FB5REC empty; /* clear row storage area*/
  FB0NW00.FB0NWDCF = "N"; /* End of vseldt01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key with saved sequence number from vcurve01 or*/
   /* vselhd01.*/
   /* ------------------------------------------------------------*/
  ;
  FB5REC.FB1INSEQ = FB0NW00.FB1INSEQ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    FB0NW00.FB0NWRNA = "Y"; /* Resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSELDT01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N112

// get next row date table
Function FB0N113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0NW00.FB0NWFD = "Y"; /* record was read*/
      FB0NW01.FB0NWFDT = FB5REC.FB5FRMDT; /* save from date*/
      FB0NW01.FB0NWTDT = FB5REC.FB5TODT; /* save to date*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0NW00.FB0NWDCF = "Y"; /* indicate end of cursor*/
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      FB0NW00.FB0NWRNA = "Y"; /* resources unavailable switch*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N113

// close date table cursor
Function FB0N114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N114

// get curve data
Function FB0N120()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/
  ;
  set FB4REC empty; /* clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* sequence number*/
  FB4REC.XGPCD = FBWREC.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FBWREC.SY2CLRID; /* color*/
  FB4REC.XDMCD = FBWREC.XDMCD; /* dimension*/
  FB4REC.XQACD = FBWREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBWREC.PC2INSEG; /* spec difference code*/
  FB4REC.XSACD = FBWREC.XSACD; /* shade code*/
  FB4REC.XPGCD = FBWREC.XPGCD; /* packaging type code*/
  FB4REC.XUMCD = FBWREC.XUMCD; /* unit of measure code*/
  ;
  FB4REC.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/
  ;
   /* ------------------------------------------------------------*/
   /* Get product descriptions*/
   /* ------------------------------------------------------------*/
  ;
  FB0N124(); /* get product descriptions*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vcurve01*/
   /* ------------------------------------------------------------*/
  ;
  FB0N121(); /* Select set vcurve01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Select next vcurve01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0NW00.FB0NWIXM = 0; /* initialize index*/
  FB0NW00.FB0NWP2D = "N"; /* reset switch*/
  ;
  while (FB0NW00.FB0NWDCF != "Y") /* Until end vcurve01 cursor*/
    FB0N122(); /* Fetch next vcurve01 rows*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display, return a message to the user.*/
   /* Otherwise get all the vcurve01 data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWIXM < 0) /* No vcurve01 data available*/
    FB0NM010.XXXMODID = "120"; /* module identification*/
    converseLib.validationFailed(1); /* No data found , abort application*/
    exit stack; /* Return to flow*/
  end
  ;
  if (FB0NW00.FB0NWIXM <= 4) /* no more than 3 rows found*/
     /* next sentence*/
  else
    FB0NM010.XXXMODID = "120"; /* module identification*/
    converseLib.validationFailed(18); /* 'No data to display'*/
    exit stack; /* Return to flow*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vcurve01 set*/
   /* ------------------------------------------------------------*/
  ;
  FB0N123(); /* close vcurve01 cursor*/
  ;
end // end FB0N120

// select set curve table cursor
Function FB0N121()
  FB0NW00.FB0NWDCF = "N"; /* end of vcurve01 flag*/
   /* ------------------------------------------------------------*/
   /* select set the vcurve01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0NWIXM = 0;
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the*/
   /* user. Otherwise, indicate a system error has occured.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "121"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N121

// get next row curve table
Function FB0N122()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 rows. Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0NW00.FB0NWIXM = FB0NW00.FB0NWIXM + 1; /* increment index*/
      FB0NW00.FB1INSEQ = FB4REC.FB1INSEQ; /* sequence number*/
      FB0N125(); /* get size data*/
      FB0N126(); /* load data*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0NW00.FB0NWDCF = "Y"; /* Indicate vcurve01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N122

// close curve table cursor
Function FB0N123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0NM010.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0NM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0N123

// get product descriptions
Function FB0N124()
   /* ------------------------------------------------------------*/
   /* Obtain style and color description*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = FB4REC.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FB4REC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FB4REC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FB4REC.XDMCD; /* dimension code*/
  ;
  XSPG202();
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0NW01.SY2CLRAB = PG2REC.SY2CLRAB; /* color desc*/
      FB0NW01.SY1STYNM = PG2REC.SY1SSTNM; /* style name*/
      ;
      ;
      FB0NW01.XDVCD = PG2REC.XDVCD1; /* save div for size lookup*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0NW01.SY2CLRAB = "UNKNOWN "; /* color desc*/
        FB0NW01.SY1STYNM = "UNKNOWN "; /* style name*/
        return;
      end
    end
  end
  ;
  ;
end // end FB0N124

// get size data
Function FB0N125()
   /* ------------------------------------------------------------*/
   /* Obtain valid sizes*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  ;
  PG3REC.PG3XDVCD = FB0NW01.XDVCD; /* division code*/
  PG3REC.XGPCD = FB4REC.XGPCD; /* gpc*/
  PG3REC.SY1STNBR = FB4REC.SY1STNBR; /* style number*/
  PG3REC.SY2CLRID = FB4REC.SY2CLRID; /* color id*/
  PG3REC.XDMCD = FB4REC.XDMCD; /* dimension code*/
  PG3REC.XQACD = FB4REC.XQACD; /* quality code*/
  PG3REC.PG3FUNCD = "PC"; /* pg3 function code*/
  PG3REC.PG3DATFM = "N"; /* pg3 data format*/
  TA1REC.TA1PGMNM = "FB0N12A"; /* module identification*/
  ;
  XSPG301();
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
end // end FB0N125

// load data
Function FB0N126()
   /* ------------------------------------------------------------*/
   /* load data to working storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0NW00.FB0NWBNK = "Y"; /* initialize switch*/
  FB0NW00.FB0NWIX1 = 1; /* initialize index*/
  FB0NW00.FB0NWIX2 = 1; /* initialize index*/
  FB0NW00.FB0NWIX3 = 1; /* initialize index*/
  ;
  FB0NW01.XWHCD[FB0NWIXM] = FB4REC.XWHCD; /* warehouse cd*/
  FB0NW01.FB4RGPCT[FB0NWIXM] = FB4REC.FB4RGPCT;
  if (FB4REC.XWHCD in XWHTBL.XWHCD)
    FB0NW01.XWHABRV[FB0NWIXM] = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  FB0NM010.FB4CRVNB = FB4REC.FB4CRVNB; /* curve number*/
  ;
  while (FB0NW00.FB0NWIX1 <= 40)
    if (FB4REC.FB4SZPCT[FB0NWIX1] == 0   /* size percent blank*/
     && PG3REC.SY4IDDSC[FB0NWIX1] == " " /* size description blank*/
     && FB0NW00.FB0NWBNK == "Y")         /* non-blank not found*/
      FB0NW00.FB0NWIX1 = FB0NW00.FB0NWIX1 + 1;
      ;
    else
      FB0NW00.FB0NWBNK = "N"; /* non-blank value found*/
      if (FB0NW00.FB0NWIX2 <= 28)
        FB0NS01(); /* move pg1 data to working storage*/
        FB0NW00.FB0NWIX1 = FB0NW00.FB0NWIX1 + 1;
        FB0NW00.FB0NWIX2 = FB0NW00.FB0NWIX2 + 1;
      else
        FB0NS02(); /* move pg2 data to working storage*/
        FB0NW00.FB0NWIX1 = FB0NW00.FB0NWIX1 + 1;
        FB0NW00.FB0NWIX3 = FB0NW00.FB0NWIX3 + 1;
      end
    end
  end
  ;
  ;
end // end FB0N126

// Format and converse the map
Function FB0N200()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NM010.XXXCURDT == 0) /* Map is not formatted*/
    FB0N210(); /* Format the data on the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data was requested, move data to the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWMAP == "PG1")
    FB0N220(); /* move page 1 data to map*/
  else
    if (FB0NW00.FB0NWMAP == "PG2")
      FB0N230(); /* move page 2 data to map*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0NM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0NM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0NM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set FB0NM010 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FB0NM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0NM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0NM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0NM010.CAITEM; /* Application data*/
  ;
  ;
end // end FB0N200

// Format the display data
Function FB0N210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0NM010.FB1CMNT = FB0NW01.FB1CMNT; /* comments*/
  FB0NM010.FB0NMMM1 = FB0NW01.FB0NWFMM; /* from month*/
  FB0NM010.FB0NMYY1 = FB0NW01.FB0NWFYY; /* from year*/
  FB0NM010.FB0NMMM2 = FB0NW01.FB0NWTMM; /* to month*/
  FB0NM010.FB0NMYY2 = FB0NW01.FB0NWTYY; /* to year*/
  FB0NM010.SY1STNBR = FB0NW01.SY1STNBR; /* Style number*/
  FB0NM010.SY2CLRID = FB0NW01.SY2CLRID; /* Color identification*/
  FB0NM010.XDMCD = FB0NW01.XDMCD; /* Dimension code*/
  FB0NM010.SY1STYNM = FB0NW01.SY1STYNM; /* style name*/
  FB0NM010.SY2CLRAB = FB0NW01.SY2CLRAB; /* color name*/
  ;
  FB0NW00.FB0NWIX1 = 1;
  FB0NW00.FB0NWIXM = 1;
  ;
  while (FB0NW00.FB0NWIXM <= 3)
    FB0NM010.XWHABRV[FB0NWIXM] = FB0NW01.XWHABRV[FB0NWIXM];
    FB0NM010.FB4RGPCT[FB0NWIXM] = FB0NW01.FB4RGPCT[FB0NWIXM];
    FB0NW00.FB0NWIXM = FB0NW00.FB0NWIXM + 1;
  end
  ;
  ;
end // end FB0N210

// move page 1 data to map
Function FB0N220()
   /* ------------------------------------------------------------*/
   /* move page 1 data to map*/
   /* ------------------------------------------------------------*/
  ;
  FB0NW00.FB0NWIX1 = 1;
  ;
  while (FB0NW00.FB0NWIX1 <= 28)
    ;
    FB0NM010.FB0NMD1A[FB0NWIX1] = FB0NW02.FB0NWD1A[FB0NWIX1];
    FB0NM010.FB0NMP1A[FB0NWIX1] = FB0NW02.FB0NWP1A[FB0NWIX1];
    FB0NM010.FB0NMD1B[FB0NWIX1] = FB0NW02.FB0NWD1B[FB0NWIX1];
    FB0NM010.FB0NMP1B[FB0NWIX1] = FB0NW02.FB0NWP1B[FB0NWIX1];
    FB0NM010.FB0NMD1C[FB0NWIX1] = FB0NW02.FB0NWD1C[FB0NWIX1];
    FB0NM010.FB0NMP1C[FB0NWIX1] = FB0NW02.FB0NWP1C[FB0NWIX1];
    ;
    ;
    ;
    if (FB0NW02.FB0NWD1A[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1A[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1A[FB0NWIX1] protect, invisible;
    end
    if (FB0NW02.FB0NWD1B[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1B[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1B[FB0NWIX1] protect, invisible;
    end
    if (FB0NW02.FB0NWD1C[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1C[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1C[FB0NWIX1] protect, invisible;
    end
    ;
    FB0NW00.FB0NWIX1 = FB0NW00.FB0NWIX1 + 1;
    ;
  end
  ;
end // end FB0N220

// move page 2 data to map
Function FB0N230()
   /* ------------------------------------------------------------*/
   /* move page 2 data to map*/
   /* ------------------------------------------------------------*/
  ;
  FB0NW00.FB0NWIX1 = 1;
  ;
  while (FB0NW00.FB0NWIX1 <= 28)
    ;
    FB0NM010.FB0NMD1A[FB0NWIX1] = FB0NW03.FB0NWD2A[FB0NWIX1];
    FB0NM010.FB0NMP1A[FB0NWIX1] = FB0NW03.FB0NWP2A[FB0NWIX1];
    FB0NM010.FB0NMD1B[FB0NWIX1] = FB0NW03.FB0NWD2B[FB0NWIX1];
    FB0NM010.FB0NMP1B[FB0NWIX1] = FB0NW03.FB0NWP2B[FB0NWIX1];
    FB0NM010.FB0NMD1C[FB0NWIX1] = FB0NW03.FB0NWD2C[FB0NWIX1];
    FB0NM010.FB0NMP1C[FB0NWIX1] = FB0NW03.FB0NWP2C[FB0NWIX1];
    ;
    ;
    ;
    if (FB0NW02.FB0NWD1A[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1A[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1A[FB0NWIX1] protect, invisible;
    end
    if (FB0NW02.FB0NWD1B[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1B[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1B[FB0NWIX1] protect, invisible;
    end
    if (FB0NW02.FB0NWD1C[FB0NWIX1] == " "
     && FB0NW02.FB0NWP1C[FB0NWIX1] == 0)
      set FB0NM010.FB0NMP1C[FB0NWIX1] protect, invisible;
    end
    ;
    FB0NW00.FB0NWIX1 = FB0NW00.FB0NWIX1 + 1;
    ;
  end
  ;
end // end FB0N230

// Check attention identifier
Function FB0N300()
   /* ------------------------------------------------------------*/
   /* reset request for data switch*/
   /* ------------------------------------------------------------*/
  ;
  FB0NW00.FB0NWSDR = "Y"; /* reset switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFBS01();
      ;
    else
      ;
      converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
      FB0NM010.XXXMODID = "300"; /* module identification*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    FB0NM010.XXXMODID = "300"; /* Module identification*/
    set FB0NM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = "FB0N"; /* selection criteria*/
    XSFBS01();
    FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CAITEM = "FB0NM010"; /* Application find code*/
    COMMAREA.CATOAP = "GD01"; /* size/maint sel*/
    XSFBS01(); /* Exit to another application*/
    FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  else
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0D"; /* size/maint sel*/
      XSFBS01();
      FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else
      ;
      if (converseVar.eventKey is pf5) /* pf5 was pressed*/
        COMMAREA.CATOAP = "FY0M"; /* prod menu*/
        XSFBS01();
        FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
    end
  end
  ;
  if (converseVar.eventKey is pf7 /* scrolling requested*/
   || converseVar.eventKey is pf8) /* scrolling requested*/
    if (FB0NW00.FB0NWSPR != "I") /* product data not invalid*/
      FB0N310(); /* scroll data*/
    end
  end
  ;
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    if (FB0NW00.FB0NWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0P"; /* selection criteria inquiry*/
      XSFBS01();
      FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (FB0NW00.FB0NWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0O"; /* size/region percent inquiry*/
      XSFBS01();
      FB0NM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (FB0NW00.FB0NWRNA == "Y") /* resources previously unavailable*/
      /* next sentence*/
    else
      FB0NW00.FB0NWSDR = "N";
                                   /* set data request switch to 'n'*/
    end
    return;
  end
  ;
  FB0NM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3); /* 'pf key not supported'*/
  exit stack; /* return to show error msg*/
  ;
  ;
end // end FB0N300

// process scrolling request
Function FB0N310()
   /* ------------------------------------------------------------*/
   /* check  for scrolling request*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7)
    FB0NW00.FB0NWSDR = "N"; /* do not re-obtain data*/
    if (FB0NW00.FB0NWMAP == "PG1") /* if page 1 data requested*/
      converseLib.validationFailed(6);
      FB0NM010.XXXMODID = "310";
    else
      FB0NW00.FB0NWMAP = "PG1"; /* request page 1 data switch*/
    end
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf8)
    FB0NW00.FB0NWSDR = "N"; /* do not re-obtain data*/
    if (FB0NW00.FB0NWMAP == "PG2" /* if page 1 data requested*/
     || FB0NW00.FB0NWP2D == "N")  /* page two data not present*/
      converseLib.validationFailed(7);
      FB0NM010.XXXMODID = "310";
    else
      FB0NW00.FB0NWMAP = "PG2"; /* request page 1 data switch*/
    end
    exit stack;
  end
  ;
  ;
end // end FB0N310

// Reset highlighted fields
Function FB0N400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0NM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0NM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
end // end FB0N400

// Verify the entered data
Function FB0N500()
   /* this application accepts no user entered data and therefore*/
   /* has no need to verify the entered data*/
end // end FB0N500

// Process valid input request
Function FB0N600()
   /* this application accepts no user entered data and therefore*/
   /* has no need to process an input request.*/
end // end FB0N600

// move page one data
Function FB0NS01()
   /* ------------------------------------------------------------*/
   /* move fields to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWIXM == 1) /* region number 1*/
    ;
    FB0NW02.FB0NWD1A[FB0NWIX2] = PG3REC.SY4IDDSC[FB0NWIX1];
    FB0NW02.FB0NWP1A[FB0NWIX2] = FB4REC.FB4SZPCT[FB0NWIX1];
    ;
  else
    ;
    if (FB0NW00.FB0NWIXM == 2) /* region number 2*/
      ;
      FB0NW02.FB0NWD1B[FB0NWIX2] = PG3REC.SY4IDDSC[FB0NWIX1];
      FB0NW02.FB0NWP1B[FB0NWIX2] = FB4REC.FB4SZPCT[FB0NWIX1];
      ;
    else
      ;
      if (FB0NW00.FB0NWIXM == 3) /* region number 3*/
        ;
        FB0NW02.FB0NWD1C[FB0NWIX2] = PG3REC.SY4IDDSC[FB0NWIX1];
        FB0NW02.FB0NWP1C[FB0NWIX2] = FB4REC.FB4SZPCT[FB0NWIX1];
        ;
      end
    end
  end
  ;
  ;
end // end FB0NS01

// move page two data
Function FB0NS02()
   /* ------------------------------------------------------------*/
   /* set switch to show if data is present for page two*/
   /* ------------------------------------------------------------*/
  ;
  if (PG3REC.SY4IDDSC[FB0NWIX1] != " " /* description not blank*/
   || FB4REC.FB4SZPCT[FB0NWIX1] != 0)  /* size percent not zero*/
    FB0NW00.FB0NWP2D = "Y"; /* page 2 data present*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* move fields to working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0NW00.FB0NWIXM == 1) /* region number 1*/
    ;
    FB0NW03.FB0NWD2A[FB0NWIX3] = PG3REC.SY4IDDSC[FB0NWIX1];
    FB0NW03.FB0NWP2A[FB0NWIX3] = FB4REC.FB4SZPCT[FB0NWIX1];
    ;
  else
    ;
    if (FB0NW00.FB0NWIXM == 2) /* region number 2*/
      ;
      FB0NW03.FB0NWD2B[FB0NWIX3] = PG3REC.SY4IDDSC[FB0NWIX1];
      FB0NW03.FB0NWP2B[FB0NWIX3] = FB4REC.FB4SZPCT[FB0NWIX1];
      ;
    else
      ;
      if (FB0NW00.FB0NWIXM == 3) /* region number 3*/
        ;
        FB0NW03.FB0NWD2C[FB0NWIX3] = PG3REC.SY4IDDSC[FB0NWIX1];
        FB0NW03.FB0NWP2C[FB0NWIX3] = FB4REC.FB4SZPCT[FB0NWIX1];
        ;
      end
    end
  end
  ;
  ;
end // end FB0NS02

//*** RECORD=FB0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0NW00 type basicRecord
  10 FB0NWSDR FB0NWSDR ; 
  10 FB0NWSWR FB0NWSWR ; 
  10 FB0NWBNK FB0NWBNK ; 
  10 FB0NWSPR FB0NWSPR ; 
  10 FB0NWNA FB0NWNA ; 
  10 FB0NWRNA FB0NWRNA ; 
  10 FB0NWP2D FB0NWP2D ; 
  10 FB0NWPGS FB0NWPGS ; 
  10 FB0NWMAP FB0NWMAP ; 
  10 FB0NWFD FB0NWFD ; 
  10 XGPCD XGPCD ; 
  10 FB0NWIXM FB0NWIXM ; 
  10 FB0NWIX1 FB0NWIX1 ; 
  10 FB0NWIX2 FB0NWIX2 ; 
  10 FB0NWIX3 FB0NWIX3 ; 
  10 FB0NWMIX FB0NWMIX ; 
  10 FB1INSEQ FB1INSEQ ; 
  10 FB0NWDCF FB0NWDCF ; 
end // end FB0NW00

//*** RECORD=FB0NW01 ****
// ----    header display storage
// ***********************
Record FB0NW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 FB1CMNT FB1CMNT ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XGPCD XGPCD ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 SY1STYNM SY1STYNM ; 
  10 XDVCD XDVCD ; 
  10 XWHCD XWHCD [3] ; 
  10 XWHABRV XWHABRV [3] ; 
  10 FB4RGPCT FB4RGPCT [3] ; 
  10 FB5FRMDT FB5FRMDT ; 
  10 FB0NWFDT FB0NWFDT ; 
    15 FB0NWF3 FB0NWF3 ; 
    15 FB0NWFYY FB0NWFYY ; 
    15 FB0NWFMM FB0NWFMM ; 
    15 FB0NWFDD FB0NWFDD ; 
  10 FB5TODT FB5TODT ; 
  10 FB0NWTDT FB0NWTDT ; 
    15 FB0NWT3 FB0NWT3 ; 
    15 FB0NWTYY FB0NWTYY ; 
    15 FB0NWTMM FB0NWTMM ; 
    15 FB0NWTDD FB0NWTDD ; 
end // end FB0NW01

//*** RECORD=FB0NW02 ****
// -----   page one display storage
// ***********************
Record FB0NW02 type basicRecord
  10 FB0NWD1A FB0NWD1A [40] ; 
  10 FB0NWP1A FB0NWP1A [40] ; 
  10 FB0NWD1B FB0NWD1B [40] ; 
  10 FB0NWP1B FB0NWP1B [40] ; 
  10 FB0NWD1C FB0NWD1C [40] ; 
  10 FB0NWP1C FB0NWP1C [40] ; 
end // end FB0NW02

//*** RECORD=FB0NW03 ****
// ------ page 2 display storage
// ***********************
Record FB0NW03 type basicRecord
  10 FB0NWD2A FB0NWD2A [40] ; 
  10 FB0NWP2A FB0NWP2A [40] ; 
  10 FB0NWD2B FB0NWD2B [40] ; 
  10 FB0NWP2B FB0NWP2B [40] ; 
  10 FB0NWD2C FB0NWD2C [40] ; 
  10 FB0NWP2C FB0NWP2C [40] ; 
end // end FB0NW03

// non-blank size switch
DataItem FB0NWBNK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD1A char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD1B char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD1C char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD2A char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD2B char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0NWD2C char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// flag for vcurve01
DataItem FB0NWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0NWF3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First date record switch
DataItem FB0NWFD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date day
DataItem FB0NWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from work date
DataItem FB0NWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date month
DataItem FB0NWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date year
DataItem FB0NWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FB0NWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FB0NWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FB0NWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for stored fields
DataItem FB0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display page switch
DataItem FB0NWMAP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map
DataItem FB0NWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No user action taken switch
DataItem FB0NWNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size percent
DataItem FB0NWP1A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0NWP1B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0NWP1C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0NWP2A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0NWP2B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0NWP2C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page two data present switch
DataItem FB0NWP2D char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Paging switch
DataItem FB0NWPGS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FB0NWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0NWSDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing switch
DataItem FB0NWSPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FB0NWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0NWT3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date day
DataItem FB0NWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to work date
DataItem FB0NWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date month
DataItem FB0NWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date year
DataItem FB0NWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

