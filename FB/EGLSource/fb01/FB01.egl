package fb01;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpcom7.XXXUSER;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpx2.XPLCD;
import corpx2.XPLSDESC;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import fb.common.FB3REC;
import fb.common.FB8BUYDT;
import fb.common.FB8FTQTB;
import fb.common.FB8REC;
import fb.common.FB9REC;
import fb.common.FBHDSAFL;
import fb.common.FBHREC;
import fb.common.FBIREC;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBMDSLNF;
import fb.common.FBMFINFL;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.*;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pt.common.PT3YYMM;
import pt.common.PT5REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA1TBLKE;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA5TSQIX1;
import ta.common.TA5TSQIX2;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VDRSAT01;
import vv.common.VPOITM04;
//*** PROGRAM=FB01 ****
// This program is part of the footwear buy system.
// It will list the products for an availability specialist
// which are being direct shipped for a particular buy month.
// From this list, there are certain product quantities which
// can be pulled from warehouse stock rather than being direct
// shipped to a customer.  The screen allows the user to select
// a product and go to another application to do the
// maintenance function.
// Paging forward and backward through the list will be
// supposed via PF keys.
// Products may only be selected from the current screen.
// The user may exit to any allowed application via fast path
// or PF keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/27/89   wdishm   Created.
// 08/08/90   jalle1   Solve problem with popup window data not
//                     being recognized by program.
// 04/02/91   pmainw   Add submit of FB1101 - drs/pfs rpt.
// 05/24/91   jalle1   Add update of drs acpt fl for products
//                     without drs orders.
// 10/04/91   jalle1   add pf12 - buy sel (to fb0q).
// 10/16/91   jalle1   prevent abend when pf17 pressed and
//                     contention (sql -911) exists.
// 10/07/91   jalle1   Change pf19 to submit fb3002 - direct
//                     ship change report (instead of fb1101).
// 05/28/92   pmainw   Add pf20 to submit fb3002 - direct
// FB-283              ship change report print to bundl.
// 07/21/93   ldeluh   Chg testrms to testenc.
// 09/13/93   ldeluh   Make smart jcl submit.
// 11/02/93   ldeluh   FB322 - add divert checking logic. Also
//                     replace "bld drs" with "pr oa" on map.
// 12-20-94   lrein    added sum code table for european
//                     centralised forecasting.  validate whse
//                     as domestic
// 03-15-96   jalle1   fix test jcl for pf20.
// 05-30-96   BKEPFO   MODIFY dIVERT lOGIC.
// 10-22-96   rtran    Modified to bring the future orders into
//                     the current buy.
// 04-02-97   KSUMME   Allow future orders - selected and not-
//                     chng screen to show totals for futures
//                     orders - selected and not- separate from
//                     the current orders.  (be sure to sum
//                     currents and selected futures to verify
//                     on PF17, that there is enough forecast
//                     to cover only those s.o.(s) being bought
// 10-14-97   AMAND1   Application is regenerated due to the
//                     oct'97 table changes.
// 11-14-97   RJOGIA   FB1131-Indirect Direct brought into the
//                     current buy.
// 01-07-98   oricha   y2k modifications:  fb01m010 zero fill
//                     year; fb01w00,w02,001,130,135,136,137,
//                     500.
// 09/21/98   psarka   Fixed the screen to remain as such when
//                     there is a transfer from another
//                     application.
// 07/01/99   RTRAN    Revised screen to bring Prior Bottom
// FB1570              Line, PO Due and O/A Amounts as a part
//                     of DRS Automation and added PF16 option
//                     to submit Automatic Divert for O/A.
// 10/04/99   RTRAN    Corrected bug for po month range.
// 10/29/99   RTRAN    Corrected bug for Order Adjustment date.
// 11/16/99   GREDDY   Prevent submit of PA1101 when no drs
//                     records found. Modified proc FB01600 and
//                     added new WS-Record FBPREC.
// 02/24/00   SKATHI   Populate Divert OA field from "to be"
//                     diverted SO amount
// 04/05/00   SKATHI   Populate Divert OA field from "to be"
//                     diverted SO amount + Open OA's
// 04/18/00   GREDDY   Fix bug in Accept Map Flag logic
//                     diverted SO amount + Open OA's
// 05/01/00   SKATHI   Reverted the Bug fix
// 07/28/00   GREDDY   Factory load run flag update logic
//                     changed to ignore footwear lines.
//                     Added FB01625 for this purpose.
// *********************
Program FB01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB01W00 FB01W00; // record
  FB01W01 FB01W01; // record
  FB01W02 FB01W02; // record
  FB01W03 FB01W03; // record
  FB01W04 FB01W04; // record
  FB01W05 FB01W05; // record
  FB01W07 FB01W07; // record
  FB3REC FB3REC; // record
  FB8REC FB8REC; // record
  FB9REC FB9REC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBPREC FBPREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FF3REC FF3REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT5REC PT5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VDRSAT01 VDRSAT01; // record
  VPOITM04 VPOITM04; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use FB01T01 {deleteAfterUse = yes}; // table
  use FB01T02 {deleteAfterUse = yes}; // table
  use FB01T03 {deleteAfterUse = yes}; // table
  use FB01T04 {deleteAfterUse = yes}; // table
  use FB01T05 {deleteAfterUse = yes}; // table
  use FB01T06 {deleteAfterUse = yes}; // table
  use FB01T07 {deleteAfterUse = yes}; // table
  use FB01T08 {deleteAfterUse = yes}; // table
  use FB01M.FB01M010, // form
  		FB01M.TA0PM001,
  		FB01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB01001;
    FB01001: FB01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the DRS Product Selection.*/
     /* ------------------------------------------------------------*/

    goto FB01002; /* Converse DRS Product Selection*/


    FB01002: FB01002();
    goto FB01002;
  end // end main
end // end FB01

// footwear forecasting main menu
Function FB01001()

   /* ---------------------------------------------------------*/
   /* If entry is  from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB") /* Not from footwear*/
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    /* TCS CHANGE BEGINS*/
    FB01W05.FB01WGRP2 = CA-USER-WORKAREA-2K-C;
    FB01W00.FB01WCIX1 = 1;
    while (FB01W00.FB01WCIX1 <= 50)
      if (FB01W05.FB01WAPPLN[FB01WCIX1] == "FB01")
        FB01W05.FB01WGRP3[FB01WCIX1] = " ";
        CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
        FB01W00.FB01WCIX1 = 50;
      end
      FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
    end
  else
    FB01W05.FB01WGRP2 = CA-USER-WORKAREA-2K-C;
    FB01W00.FB01WCIX1 = 1;
    if (FBWREC.FBWFILL != " ")
      while (FB01W00.FB01WCIX1 <= 50)
        if (FB01W05.FB01WAPPLN[FB01WCIX1] == "FB01")
          FB01W04.FB01WGRP2 = FB01W05.FB01WAPPLD[FB01WCIX1];
          FB01W05.FB01WGRP3[FB01WCIX1] = " ";
          CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
          FB01W00.FB01WCIX1 = 50;
        end
        FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
      end
    else
      while (FB01W00.FB01WCIX1 <= 50)
        if (FB01W05.FB01WAPPLN[FB01WCIX1] == "FB01")
          FB01W05.FB01WGRP3[FB01WCIX1] = " ";
          CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
          FB01W00.FB01WCIX1 = 50;
        end
        FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
      end
    end
    /* TCS CHANGE ENDS*/
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end



   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FB01W00 empty; /* Working storage record*/
  set FB01W01 empty; /* Map storage for map heading data*/
  set FB01W02 empty;
  set FB01W03 empty;
  set FBIREC empty;

  set FB01M010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
   /* ---------- y2k out begin -----------*/
   /* MOVE 914 TO FB01W00.FB01WTSL;    /* Temporary storage page length*/
   /* ---------- y2k out end -------------*/
   /* ---------- y2k in  begin -----------*/
  FB01W00.FB01WTSL = 942; /* Temporary storage page length*/
   /* ---------- y2k in end --------------*/

   /* 08/30/99 Richard Tran - Direct ship Automation*/

  FB01W00.FB01WTSL = 1278; /* Temporary storage page length*/

  FB01W00.FB01WMAX = 14; /* Max lines per map page*/
  FB01W00.FB01WTSP = 1; /* Temp storage page request*/

   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to the map and set request for data flag to yes.*/
   /* ---------------------------------------------------------*/

  FB01W00.FB01WRDF = "N"; /* Request for data flag*/

  if (FBXREC.CAUSERID != " ")
    FB01W01.XXXUSER = FBXREC.CAUSERID;
  else
    FB01W01.XXXUSER = COMMAREA.CAUSERID;
  end


  if (FBXREC.XPLCD != " ") /* Data has been passed*/
    FB01W00.FB01WRDF = "Y"; /* Request for data flag*/
    FB01W01.XPLCD = FBXREC.XPLCD;
    XPLREC.XPLCD = FBXREC.XPLCD;
    XPLREC.XGPCD = "02";
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FB01W01.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    end
    FB01W00.FB01WBDT = FBXREC.FB8BUYDT;
    FB01W01.FB01WBYM = FB01W00.FB01WBYM;
    if (FBXREC.XPCCD != " ")
      FB01W01.XPCCD = FBXREC.XPCCD;
      XPCREC.XPCCD = FBXREC.XPCCD;
      XPCREC.XGPCD = "02";
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB01W01.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      end
    end
  end

  FB01S17(); /* Get control row*/

  if (FBXREC.XPLCD == " ") /* Data hasn't been passed*/
    FB01W00.FB01WBDT = FB9REC.FB8BUYDT;
    FB01W01.FB01WBYM = FB01W00.FB01WBYM;
  end

   /* ----------------------------------------------------*/
   /* Validate userid field against DPRODG.VSUSER01 table*/
   /* ----------------------------------------------------*/

  set PG1REC empty;

  PG1REC.XXXUSER = FB01W01.XXXUSER;

  FB01120(); /* validate user id*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(257); /* scheduler code not on table*/
    FB01M010.XXXUSER = FB01W01.XXXUSER;
    set FB01M010.XXXUSER cursor, bold;
    FB01W01.XXXUSER = " ";
  end

  FB01S25();
end // end FB01001

// Footwear products to buy
Function FB01002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FB01100(); /* Obtain data to display*/

  FB01200(); /* Format and display the map*/

  FB01300(); /* Check attention identifier*/

  FB01400(); /* Reset fields to normal intensity*/

  FB01500(); /* Verify the entered data*/

  FB01600(); /* Process valid input request*/

end // end FB01002

// Obtain data to display
Function FB01100()



   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end



  FB01110(); /* Purge temporary storage*/

  set PG1REC empty;
  PG1REC.XXXUSER = FB01W01.XXXUSER;

  FB01120(); /* Obtain scheduler code*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(18); /* No data to display*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Obtain the finished flags for the user.*/
   /* ------------------------------------------------------------*/

  set FBMREC empty; /* Init the record*/

  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;

  FB01140(); /* Obtain VFSCTL01 row*/

  FB01W01.FBMFINFL = FBMREC.FBMFINFL;

  FB01W00.FB01WIX1 = 1;

  FB01W01.FBMDSLNF = " ";
  FB01W01.FBMDSLNF = " ";

  FB01W00.FB01WPLF = "N"; /* Product line found flag*/

  while (FB01W00.FB01WIX1 <= 20
   && FB01W00.FB01WPLF == "N")

    if (FB01W01.XPLCD == FBMREC.FBMPCD[FB01WIX1])
      FB01W01.FBMDSLNF = FBMREC.FBMDSLNF[FB01WIX1];
      FB01W00.FB01WPLF = "Y";
    end
    FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
  end

  if (FB01W00.FB01WPLF == "N")
    converseLib.validationFailed(325); /* Product line not found for scheduler*/
    set FB01M010 initial;
    FB01M010.XXXCURDT = VGVar.currentShortGregorianDate;
    if (FB01W01.FB01WBYM != 0)
      FB01M010.FB01MBYM = FB01W01.FB01WBYM;
    end
    FB01M010.XPLCD = FB01W01.XPLCD;
    set FB01M010.XPLCD cursor, bold;
    FB01M010.XXXUSER = FB01W01.XXXUSER;
    return;
  end

   /* ------------------------------------------------------------*/
   /* Get the user list of products for the line entered.*/
   /* If a page to style has been entered on the screen use it*/
   /* for the key otherwise wildcard it.*/
   /* Open cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Initialize record*/

  FF3REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Scheduler code*/
  FF3REC.YSMXDV = "*";

  FF3REC.SY1STNBR = "  "; /* ; Forecast style number*/
  FF3REC.XPLCD = FB01W01.XPLCD; /* Product line*/

  if (FB01W01.XPCCD != " ") /* ; Product category*/
    FF3REC.XPCCD = FB01W01.XPCCD;
    FB01W00.FB01WP17 = "Y"; /* Don't allow PF17 flag*/
  else
    FF3REC.XPCCD = "*";
  end


  FB01S01(); /* Open cursor for DFCAST.VFFSTY01*/

   /* ------------------------------------------------------------*/
   /* Obtain first row--if rows exist process all of the records.*/
   /* ------------------------------------------------------------*/



  FB01S02(); /* Obtain next DFCAST.VFFSTY01 row*/

  FB01W00.FB01WCAF = 0; /* Count accept flags = 'n'*/

  if (FB01W00.FB01WFSC == "Y") /* If end of cursor on first read*/
    converseLib.validationFailed(18); /* Request processed no data to display*/
    return;
  end

  while (FB01W00.FB01WFSC == "N") /* While cursor not at end*/

    FB01130(); /* Process all styles for scheduler*/

  end

  FB01S07(); /* Close DFCAST.VFFSTY01 cursor*/


   /* ------------------------------------------------------------*/
   /* If a partial page has been formatted add  to temp storage.*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WIXM != 0) /* Write partial page to temp storage*/

    FB01S06(); /* Add to temp storage*/

  end

  if (FB01W00.TA5TSQIX == 0) /* No pages written*/
    converseLib.validationFailed(18); /* No data to display*/
  end

  FB01W00.FB01WRDF = "N"; /* Data not requested*/



end // end FB01100

// Purge temporary storage
Function FB01110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB01W02 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/


  FB01W00.TA5TSQIX = 0; /* Highest page number*/
  FB01W00.FB01WIXM = 0; /* temporary storage line index*/
  FB01W00.FB01WTSP = 1;

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FB01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB01M010.XXXPRCNM = "FB01110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01110

// Obtain scheduler code
Function FB01120()

   /* -------------------------------------------------*/
    /* Format key*/
   /* -------------------------------------------------*/

  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01120"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01120";
  exit stack;

end // end FB01120

// Process all style for schedule
Function FB01130()

  FB01W00.FB01WSDF = "N"; /* Style data found flag*/
  FB01W00.FB01W-OA-SUM = 0; /* clear data*/


   /* ------------------------------------------------------------*/
   /* Get the direct ship quantity to buy.*/
   /* ------------------------------------------------------------*/

  set FBHREC empty; /* Init record*/

  FBHREC.SY1STNBR = FF3REC.SY1STNBR;
  FBHREC.SY2CLRID = FF3REC.SY2CLRID;
  FBHREC.XDMCD = FF3REC.XDMCD;
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
  FBHREC.XDSCD = "*";
  FBHREC.FBHDSAFL = "*";
  FBHREC.XWHCD = "*";
  FBHREC.FB7BUYST = "*"; /* Current and future buy status*/
  FBHREC.FB8BUYDT = FB01W00.FB01WBDT;
  FB01W00.FB01W-CHK-DTE = 0; /* INIT DATE*/


  FB01S03(); /* Open cursor for DFBUY.VDNORD01*/

  FB01S04(); /* Fetch DFBUY.VDNORD01 row*/

  if (SQLCA.VAGen_SQLCODE == 0 &&  /* IF FETCH WORKED OK AND INITIAL*/
  FB01W00.FB01W-CHK-DTE == 0)      /* TIME THRU, CONVERT FB-BUY-DATE*/
                                   /* INTO PO-ID-MO-RNG.*/
    FB01W00.FB01W-TMP-DT = FBHREC.FB8BUYDT;
    FB01W00.FB01W-CHK-CC = FB01W00.FB01W-TMP-CC; /* SET CENTURY*/
    FB01W00.FB01W-CHK-YY = FB01W00.FB01W-TMP-YY; /* SET YEAR*/
    FB01W00.FB01W-CHK-DM = FB01W00.FB01W-TMP-MM; /* SET DLV MONTH*/
    FB01W00.FB01W-CHK-MM = FB01W00.FB01W-TMP-MM - 2; /* SET MFG MONTH*/

    /* ------------- y2k out begin --------*/
    /* IF FB01W00.FB01W-CHK-MM < 0;*/
     /* MOVE 11 TO FB01W00.FB01W-CHK-MM;*/
     /* FB01W00.FB01W-CHK-YY = FB01W00.FB01W-CHK-YY - 1;*/
    /* ELSE;*/
     /* IF FB01W00.FB01W-CHK-MM = 0;*/
       /* MOVE 12 TO FB01W00.FB01W-CHK-MM;*/
       /* FB01W00.FB01W-CHK-YY = FB01W00.FB01W-CHK-YY - 1;*/
     /* END;*/
    /* END;*/
    /* ------------- y2k out end ----------*/
    /* ------------- y2k in  begin --------*/
    if (FB01W00.FB01W-CHK-MM < 0)
      FB01W00.FB01W-CHK-MM = 11;
      FB01W00.FB01W-CHK-CY = FB01W00.FB01W-CHK-CY - 1;
    else
      if (FB01W00.FB01W-CHK-MM == 0)
        FB01W00.FB01W-CHK-MM = 12;
        FB01W00.FB01W-CHK-CY = FB01W00.FB01W-CHK-CY - 1;
      end
    end
    /* ------------- y2k in end -----------*/
    FB01W00.FB01W-CHK-DTE = FB01W00.FB01W-CHK-DT;
  end

  FB01W00.FB01WDRS = 0; /* Initialize*/
  FB01W00.FB01WDCT = 0; /* TOTAL 'BOUGHT'*/
  FB01W00.FB01WDC1 = 0; /* DC1 DRS - CURRENT*/
  FB01W00.FB01WDCF = 0; /* FUTURE DRS*/
  FB01W00.FB01WDC3 = 0; /* DC3 DRS*/
  FB01W00.FB01W-TOT-PREADVISE-QTY = 0; /* Total preadvise qty*/
  FB01W00.FB01W-DIVERT-HOLD = 0; /* no divert count hold*/
  FB01W00.FB01W-ORD-ADJ-BUY-DT = FB01W00.FB01WBDT;
  FB01W00.XWHCD = " "; /* Warehouse code*/

  FB01W00.FBHDSAFL = " "; /* Init WS sum accept flag*/

  while (FB01W00.FB01WDNC == "N") /* While not end of cursor*/

    if (FBHREC.XDVCD != "02")

      FB01131(); /* Check for diverts*/
      set FB01W03 empty; /* Init record*/
      FB01W03.FB01W-FBI-GROUP = FBIREC.FBI-GROUP; /* Move fb1510 results*/

      if (FB01W00.FB01W-DIVERT-HOLD == 0) /* If no diverts*/

        FB01132(); /* Check for preadvises*/
        set FB01W03 empty; /* Init record*/
        FB01W03.FB01W-FBI-GROUP = FBIREC.FBI-GROUP; /* Move FB1510 results*/

        if (FB01W03.FB01W-COUNT == 0) /* no preadvises*/
          FB01W00.FB01WSDF = "Y"; /* Style data found flag*/
          if (FBHREC.FBHDSAFL == "N" && FBHREC.FB7BUYST == "Y")
  /* IF FBHREC.FB7BUYST NE 'N';*/
            FB01W00.FBHDSAFL = FBHREC.FBHDSAFL;
          end

          FB01W00.FB01WNQT = 0; /* direct ship/ Nil qty size total*/
          FB01W00.FB01WIX1 = 1; /* Init work index*/
          while (FB01W00.FB01WIX1 <= 40) /* Max size array*/
            FB01W00.FB01WNQT = FB01W00.FB01WNQT + FBHREC.FB7QTB[FB01WIX1];
            FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
          end

          FB01139(); /* To get Divert OA Qty*/

          if (FBHREC.FB8BUYDT == FB01W00.FB01WBDT)
            if (FBHREC.XDSCD == "3")
              FB01W00.FB01WDC3 = FB01W00.FB01WDC3 + FB01W00.FB01WNQT;
            else
              if (FBHREC.XDSCD == "1" || FBHREC.XDSCD == "2")
                if (FBHREC.XWHCD == " ")
                   /* next sentence*/
                else
                  FB01W00.XWHCD = FBHREC.XWHCD;
                end
                FB01W00.FB01WDC1 = FB01W00.FB01WDC1 + FB01W00.FB01WNQT;
                FB01W00.FB01WDCT = FB01W00.FB01WDCT + FB01W00.FB01WNQT;
              end

            end
          else
            FB01W00.FB01WDCF = FB01W00.FB01WDCF + FB01W00.FB01WNQT;
            if ((FBHREC.FB7BUYST == "Y" && FBHREC.XDSCD == "1")
             || (FBHREC.FB7BUYST == "Y" && FBHREC.XDSCD == "2"))
              FB01W00.FB01WDCT = FB01W00.FB01WDCT + FB01W00.FB01WNQT;
            end
          end
        end
      end
    end
    FB01S04(); /* Fetch DFBUY.VDNORD01 row*/

  end


  FB01S05(); /* Close DFBUY.VDNORD01 cursor*/

   /* ------------------------------------------------------------*/
   /* Get total preadvise qty for style.  Include stk preadvises.*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/
    FB01133(); /* Get preadvise total*/
    set FB01W03 empty; /* Init record*/
    FB01W03.FB01W-FBI-GROUP = FBIREC.FBI-GROUP; /* Move fb1510 results*/
    FB01W00.FB01W-TOT-PREADVISE-QTY = FB01W03.FB01W-COUNT;
  end

   /* ------------------------------------------------------------*/
   /* Get Forecast quantity to buy.*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/

    set FBKREC empty; /* Init record*/

    FBKREC.SY1STNBR = FF3REC.SY1STNBR;
    FBKREC.SY2CLRID = FF3REC.SY2CLRID;
    FBKREC.XDMCD = FF3REC.XDMCD;

    FBKREC.FB8BUYDT = FB01W00.FB01WBDT;

    FBKREC.FB8RCTYP = "B";
    FBKREC.FBKFSAFL = "N";

    FB01134(); /* Obtain unique VFQTBS01 row*/

  end

   /* ------------------------------------------------------------*/
   /* Get the B/L date.*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/

    set FBLREC empty;

    FBLREC.SY1STNBR = FF3REC.SY1STNBR;
    FBLREC.SY2CLRID = FF3REC.SY2CLRID;
    FBLREC.XDMCD = FF3REC.XDMCD;
    FBLREC.XQACD = "01";
    FBLREC.PC2INSEG = "000";
    FBLREC.XPGCD = "00";
    FBLREC.XUMCD = "01";
    FBLREC.FB8BUYDT = FB01W00.FB01WBDT;

    FB01135(); /* Open VFBLAV01 cursor*/
    FB01W00.FB01WDWS = "N";

    while (SQLCA.VAGen_SQLCODE != 100
     && FB01W00.FB01WDWS != "Y")
      FB01136(); /* Fetch VFBLAV01 row*/
    end

    FB01137(); /* close VFBLAV01 cursor*/
  end

   /* RTRAN 07/16/1999*/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/

    FB01W00.FB01W0FBD = FB01W00.FB01WBDT;
    FB01W00.FB01W1BLM = FB01W00.FB01W0BLM;

     /* ------------------------------------------------------------*/
     /* Get the prior Bottom Line Avaiability total*/
     /* ------------------------------------------------------------*/

    FB01W00.FB01W1MM = FB01W00.FB01W0MM - 1;
    if (FB01W00.FB01W1MM < 0 || 
    FB01W00.FB01W1MM == 0)
      FB01W00.FB01W1MM = FB01W00.FB01W1MM + 12;
      FB01W00.FB01W1CY = FB01W00.FB01W1CY - 1;
    end


    set PT5REC empty; /* initialize record*/
    FB01W00.FB01W-PRIOR-04 = 0;
    FB01W00.FB01W-PRIOR-07 = 0;
    FB01W00.FB01W-PRIOR-XX = 0;

    PT5REC.XGPCD = "02"; /* gpc*/
    PT5REC.SY1STNBR = FF3REC.SY1STNBR; /* style*/
    PT5REC.SY2CLRID = FF3REC.SY2CLRID; /* color*/
    PT5REC.XDMCD = FF3REC.XDMCD; /* dimension*/
    PT5REC.PC2INSEG = "000"; /* iseg*/
    PT5REC.XPGCD = "00"; /* package type*/
    PT5REC.XUMCD = "01"; /* unit of measure*/
    PT5REC.XQACD = "01"; /* quality*/
    FB01W07.XWHCD[1] = "04"; /* beg whse*/
    FB01W07.XWHCD[2] = "07"; /* end whse*/
    PT5REC.PT3YYMM = FB01W00.FB01W1BLM;

    FB01141(); /* open csr dmodel.vfbasm04*/
    FB01142(); /* fetch record dmodel.vfbasm04*/

    if (SQLCA.VAGen_SQLCODE == +100)
      FB01W00.FB01W-PRIOR-BL = 0;
    else
      while (SQLCA.VAGen_SQLCODE == 0)
        if (PT5REC.XWHCD == "04")
          if (PT5REC.PT2RNUM == "1"
           || PT5REC.PT2RNUM == "2"
           || PT5REC.PT2RNUM == "3"
           || PT5REC.PT2RNUM == "4")
            FB01W00.FB01W-PRIOR-04 = PT5REC.PT3ADAVT;
            FB01W00.FB01W-PRIOR-XX = FB01W00.FB01W-PRIOR-04;
          end
        else
          if (PT5REC.XWHCD == "07")
            if (PT5REC.PT2RNUM == "1"
             || PT5REC.PT2RNUM == "2"
             || PT5REC.PT2RNUM == "3"
             || PT5REC.PT2RNUM == "4")
              if (FB01W00.FB01W-PRIOR-04 == 0)
                FB01W00.FB01W-PRIOR-07 = PT5REC.PT3ADAVT;
                FB01W00.FB01W-PRIOR-XX = FB01W00.FB01W-PRIOR-07;
              else
                FB01W00.FB01W-PRIOR-07 = PT5REC.PT3ADAVT;
                FB01W00.FB01W-PRIOR-XX = FB01W00.FB01W-PRIOR-04 +                     FB01W00.FB01W-PRIOR-07;
              end
            end
          else
            FB01W00.FB01W-PRIOR-XX = PT5REC.PT3ADAVT;
          end
        end
        FB01142(); /* fetch vfbasm04*/
        FB01W00.FB01W-PRIOR-BL = FB01W00.FB01W-PRIOR-XX;
        FB01W00.FB01W-PRIOR-XX = 0;
      end
    end

    FB01143(); /* close cursor*/

       /* end of change 07/16/99*/
  end

   /* *****************************************************************/
   /* RETRIEVING THE TOTAL PO PRIOR QUANTITIES*/
   /* *****************************************************************/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/

    set VPOITM04 empty; /* initialize record*/

    VPOITM04.XGPCD = "02"; /* gpc*/
    VPOITM04.SY1STNBR = FF3REC.SY1STNBR; /* style*/
    VPOITM04.SY2CLRID = FF3REC.SY2CLRID; /* color*/
    VPOITM04.XDMCD = FF3REC.XDMCD; /* dimension*/
    VPOITM04.YSMXDV = "10"; /* division*/
    VPOITM04.PC4ORTYP = "FT"; /* po type code*/
    VPOITM04.PC6STAT = "OP"; /* open status*/
    VPOITM04.PC2CUXID = "  "; /* cross reference*/
    VPOITM04.OP1PARTN = " ";
    VPOITM04.OP1CUOID = 0;
    VPOITM04.OP1NORID = 0;

    FB01W00.FB01WPFL = "N"; /* eof flag for po rows*/
    FB01W00.FB01W-PRIOR-PO = 0; /* clear data*/
    FB01W00.FB01W0FBD = FB01W00.FB01WBDT;
    FB01W00.FB01WPPOM = FB01W00.FB01WBDT;
    FB01W00.FB01W3POM = FB01W00.FB01WBDT;

    FB01W00.FB01Y2KFL = "N";
    FB01W00.FB01W5RCY = FB01W00.FB01WPCYM;

    FB01W00.FB01W3MMD = FB01W00.FB01W0MM - 1;
    if (FB01W00.FB01W3MMD < 0
     || FB01W00.FB01W3MMD == 0)
      FB01W00.FB01W3MMD = FB01W00.FB01W3MMD + 12;
      FB01W00.FB01W5RCY = FB01W00.FB01WPCYM - 1;
      FB01W00.FB01Y2KFL = "Y";
    end

    FB01W00.FB01W3MMO = FB01W00.FB01W3MMD - 2;
    if (FB01W00.FB01W3MMO < 0
     || FB01W00.FB01W3MMO == 0)
      FB01W00.FB01W3MMO = FB01W00.FB01W3MMO + 12;
      FB01W00.FB01Y2KFL = "Y";
    end

    if (FB01W00.FB01Y2KFL == "Y")
      FB01W00.FB01W3CYM = FB01W00.FB01W3CYM - 1;
    end

    VPOITM04.PC3POIDT = FB01W00.FB01W3POM;

    FB01W00.FB01W5RMM = FB01W00.FB01W3MMD;
    FB01W00.FB01W5RDD = 15;
    VPOITM04.PC6RTADT = FB01W00.FB01W5RTA;

    FB01144(); /* open csr*/
    FB01145(); /* fetch record*/

    while (FB01W00.FB01WPFL == "N")
      FB01W00.FB01W-PRIOR-PO = FB01W00.FB01W-PRIOR-PO +                                VPOITM04.PC6TORDE;
      FB01145(); /* fetch record*/
    end

    FB01146(); /* close cursor*/

  end

   /* *****************************************************************/
   /* RETRIEVING THE ORDER ADJUSTMENT QUANTITIES WITH OA STATUS '00'*/
   /* ALONG WITH THE TO BE DIVERTED SO QUANTITIES THROUGH AUTO DRS.*/
   /* SKATHI. 04/18/00*/
   /* *****************************************************************/

  if (FB01W00.FB01WSDF == "Y") /* Style data found*/

    set FB01W03 empty; /* initialize record*/

    FB01W03.SY1STNBR = FF3REC.SY1STNBR; /* style*/
    FB01W03.SY2CLRID = FF3REC.SY2CLRID; /* color*/
    FB01W03.XDMCD = FF3REC.XDMCD; /* dimension*/
    FB01W00.FB01W4OAC = FB01W00.FB01W0CC;
    FB01W00.FB01W4OAY = FB01W00.FB01W0YY;
    FB01W00.FB01W4OAM = FB01W00.FB01W3MMD;
    FB01W03.FB01W-PA-ORD-ADJ-BUY-MO = FB01W00.FB01W4OAD;

    set FBIREC empty;
    FBIREC.FBI-GROUP = FB01W03.FB01W-FBI-GROUP;
    FB01W00.FB01WJFL = "N";
  /* MOVE 0 TO FB01W00.FB01W-OA-SUM;    /* clear data*/

    FB01S32(); /* Open cursor*/

    FB01S33(); /* Fetch cursor*/

    while (FB01W00.FB01WJFL == "N")
      FB01W00.FB01W-OA-SUM = FB01W00.FB01W-OA-SUM +                               FB01W00.FB01W-OA-QTY;
      FB01S33(); /* Fetch cursor*/
    end
    FB01S34(); /* Close cursor*/

  end

   /* **************************************************************/
   /* Format a map line of data to display storage.*/
   /* **************************************************************/

  if (FB01W00.FB01WSDF == "Y") /* If style data found*/

    FB01W00.FB01WIXM = FB01W00.FB01WIXM + 1;

    FB01138(); /* Format display storage line*/

  end

   /* ------------------------------------------------------------*/
   /* Add to temp storage if all lines on page have been filled*/
   /* ------------------------------------------------------------*/

  if (FB01W00.FB01WIXM == FB01W00.FB01WMAX)
                                   /* Line index = max lines per page*/

    FB01S06(); /* add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch next VFFSTY01 row.*/
   /* ------------------------------------------------------------*/

  FB01S02(); /* Fetch next VFFSTY01 row*/


end // end FB01130

// Check for diverts
Function FB01131()

   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAITM01*/
   /* for each style, color, dimension, and sales order to check*/
   /* for diverts.*/
   /* ------------------------------------------------------------*/

  set FB01W03 empty; /* Init FB1510 record*/

  FB01W03.SY1STNBR = FBHREC.SY1STNBR;
  FB01W03.SY2CLRID = FBHREC.SY2CLRID;
  FB01W03.XDMCD = FBHREC.XDMCD;
  FB01W03.FB01W-PA-ORD-ADJ-BUY-MO = FB01W00.FB01W-ORD-ADJ-BUY-MO;
  FB01W03.XWHCD = FBHREC.XWHCD;
  FB01W03.OP1PARTN = FBHREC.OP1PARTN;
  FB01W03.OP1CUOID = FBHREC.OP1CUOID;
  FB01W03.OP1NORID = FBHREC.OP1NORID;
  FB01W03.FB01W-PRDCUID = FBHREC.PC2CUXID; /* PRD CD*/
  FB01W03.FB01W-PKGTYPCD = FBHREC.XPGCD; /* PKG CD*/
  FB01W03.FB01W-XQAQALCD = FBHREC.XQACD; /* QUAL CD*/
  FB01W03.FB01W-XUMUOMCD = FBHREC.XUMCD; /* UOM CD*/
  FB01W03.FB01W-DLVRY-DT = FB01W00.FB01W-CHK-DTE;

  set FBIREC empty;
  FBIREC.FBI-GROUP = FB01W03.FB01W-FBI-GROUP;

   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as count of DPRODC.VPOITM01,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01W-OA-COUNT = 0; /* initialize oa counter*/
  FB01S30(); /* determine oa count*/

  FB01W00.FB01W-PO-COUNT = 0; /* initialize po counter*/
  FB01S31(); /* determine po count*/

  if (FB01W00.FB01W-OA-COUNT > 0 && 
  FB01W00.FB01W-PO-COUNT > 0)
    FB01W03.FB01W-COUNT = 0;
  else
    if (FB01W00.FB01W-OA-COUNT > 0 && 
    FB01W00.FB01W-PO-COUNT == 0)
      FB01W03.FB01W-COUNT = 1;
    else
      if (FB01W00.FB01W-OA-COUNT == 0 && 
      FB01W00.FB01W-PO-COUNT > 0)
        FB01W03.FB01W-COUNT = 1;
      else
        if (FB01W00.FB01W-OA-COUNT == 0 && 
        FB01W00.FB01W-PO-COUNT == 0)
          FB01W03.FB01W-COUNT = 0;
        end
      end
    end
  end

  FB01W00.FB01W-DIVERT-HOLD = FB01W03.FB01W-COUNT;

end // end FB01131

// Check for preadvises
Function FB01132()

   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order to check*/
   /* for preadvises.*/
   /* ------------------------------------------------------------*/

  set FB01W03 empty; /* Init FB1510 record*/

  FB01W03.SY1STNBR = FBHREC.SY1STNBR;
  FB01W03.SY2CLRID = FBHREC.SY2CLRID;
  FB01W03.XDMCD = FBHREC.XDMCD;
  FB01W03.FB01W-PA-ORD-ADJ-BUY-MO = FB01W00.FB01W-ORD-ADJ-BUY-MO;
  FB01W03.XWHCD = FBHREC.XWHCD;
  FB01W03.OP1PARTN = FBHREC.OP1PARTN;
  FB01W03.OP1CUOID = FBHREC.OP1CUOID;
  FB01W03.OP1NORID = FBHREC.OP1NORID;

  set FBIREC empty;
  FBIREC.FBI-GROUP = FB01W03.FB01W-FBI-GROUP;

  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01132"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01132";
  exit stack;


end // end FB01132

// Get total preadvises
Function FB01133()

   /* ------------------------------------------------------------*/
   /* Get total preadvise quantity from join of DPRODA.VPAHDR01*/
   /* & VPAWRK01 for given product.*/
   /* ------------------------------------------------------------*/

  set FB01W03 empty; /* Init FB1510 record*/

  FB01W03.SY1STNBR = FBHREC.SY1STNBR;
  FB01W03.SY2CLRID = FBHREC.SY2CLRID;
  FB01W03.XDMCD = FBHREC.XDMCD;
  FB01W03.FB01W-PA-ORD-ADJ-BUY-MO = FB01W00.FB01W-ORD-ADJ-BUY-MO;
  FB01W03.XWHCD = FBHREC.XWHCD;
  FB01W03.OP1PARTN = FBHREC.OP1PARTN;
  FB01W03.OP1CUOID = FBHREC.OP1CUOID;
  FB01W03.OP1NORID = FBHREC.OP1NORID;

  set FBIREC empty;
  FBIREC.FBI-GROUP = FB01W03.FB01W-FBI-GROUP;

  try
    call "FB1510" ("SS", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -305) /* and no rows found to sum*/
        FBIREC.FBI-COUNT = 0; /* clear sum qty field*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01133"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01133";
  exit stack;


end // end FB01133

// Obtain unique VFQTBS01
Function FB01134()


  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01134"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01134";
  exit stack;


end // end FB01134

// Open VFBLAV01 cursor
Function FB01135()


   /* -------- y2k out begin ----------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* -------- y2k out end ------------*/
   /* -------- y2k in  begin ----------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* -------- y2k in end -------------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01135"; /* Process name*/
  TA1REC.TA1LOC = "OPEN CURSOR             ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01135";
  exit stack;


end // end FB01135

// Fetch VFBLAV01 row
Function FB01136()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* -------- y2k out begin --------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* -------- y2k out END ----------*/
   /* -------- y2k IN  begin --------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* -------- y2k in end -----------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (FBLREC.XWHCD in FB01W00.XWH-WHSE-CD)
        FB01W00.FB01WDWS = "Y"; /* domestic whse found*/
      end


      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01136"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01136";
  exit stack;


end // end FB01136

// Close VFBLAV01 cursor
Function FB01137()


   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VFBLAV01*/
   /* ------------------------------------------------------------*/

   /* ------- y2k out begin --------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* ------- y2k out end ----------*/
   /* ------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end -----------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01137"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01137";
  exit stack;


end // end FB01137

// Format display storage line
Function FB01138()

   /* ------------------------------------------------------------*/
   /* Move the data from the records to the temporary storage*/
   /* line--calculate the stock quantity to buy.*/
   /* ------------------------------------------------------------*/

  FB01W02.SY1STNBR[FB01WIXM] = FF3REC.SY1STNBR;
  FB01W02.SY2CLRID[FB01WIXM] = FF3REC.SY2CLRID;
  FB01W02.XDMCD[FB01WIXM] = FF3REC.XDMCD;
  FB01W02.SY1SSTNM[FB01WIXM] = FF3REC.SY1SSTNM;
  FB01W02.SY2CLRAB[FB01WIXM] = FF3REC.SY2CLRAB;
  FB01W02.FB8FTQTB[FB01WIXM] = FBKREC.FB8FTQTB;
  FB01W02.PT3YYMM[FB01WIXM] = FBLREC.PT3YYMM;

  if (FBKREC.FBKFSAFL == "Y"
   && FB01W00.FBHDSAFL != "N")
  /* AND FB01W00.FBHDSAFL = 'Y';*/
    FB01W02.FB01WACF[FB01WIXM] = "Y";
  else
    FB01W02.FB01WACF[FB01WIXM] = "N";
    FB01W00.FB01WCAF = FB01W00.FB01WCAF + 1; /* Count # of 'n' accept flags*/
  end


   /* ------------------------------------------------------------*/
   /* Move DC1 DRS, DC3 DRS, and PR OA to screen storage.*/
   /* Move Forecast stock qty to buy to screen storage.*/
   /* Calculate total DRS = DC1 DRS + DC3 DRS.*/
   /* ------------------------------------------------------------*/

  FB01W02.FB01WDC1[FB01WIXM] = FB01W00.FB01WDC1;
  FB01W02.FB01WDCF[FB01WIXM] = FB01W00.FB01WDCF;
  FB01W02.FB01WDC3[FB01WIXM] = FB01W00.FB01WDC3;
  FB01W02.FB01W-TOT-PREADVISE-QTY[FB01WIXM] = FB01W00.FB01W-TOT-PREADVISE-QTY;
  FB01W02.XWHCD[FB01WIXM] = FB01W00.XWHCD;
  FB01W02.FB8FTQTB[FB01WIXM] = FBKREC.FB8FTQTB;

  FB01W02.FB01WDCT[FB01WIXM] = FB01W00.FB01WDCT;

   /* ------------------------------------------------------------*/
   /* Move previous Bottom Line Availability, Previous Production*/
   /* Order and Order Adjustment to screen storage.*/
   /* ------------------------------------------------------------*/

  FB01W02.FB01MPBL[FB01WIXM] = FB01W00.FB01W-PRIOR-BL;
  FB01W02.FB01MPOQ[FB01WIXM] = FB01W00.FB01W-PRIOR-PO;
  FB01W02.FB01MOAQ[FB01WIXM] = FB01W00.FB01W-OA-SUM;

end // end FB01138

// Format temp storage line
Function FB01139()

   /* ---------------------------------------------------*/
   /* To get the To be diverted OA quantity*/
   /* ---------------------------------------------------*/

  set VDRSAT01 empty;

  VDRSAT01.PG1SC4CD = FBHREC.PG1SC4CD;
  VDRSAT01.XPLCD = FBHREC.XPLCD;
  VDRSAT01.SY1STNBR = FBHREC.SY1STNBR;
  VDRSAT01.SY2CLRID = FBHREC.SY2CLRID;
  VDRSAT01.XDMCD = FBHREC.XDMCD;
  VDRSAT01.OP1PARTN = FBHREC.OP1PARTN;
  VDRSAT01.OP1CUOID = FBHREC.OP1CUOID;
  VDRSAT01.OP1NORID = FBHREC.OP1NORID;

  FB01S35(); /* Obtain unique VDRSAT01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VDRSAT01.FB7BUYST == "D")
      FB01W00.FB01WIX1 = 1;
      FB01W00.FB01W-OA-QTY = 0;
      while (FB01W00.FB01WIX1 <= 40) /* Max sizes*/
        FB01W00.FB01W-OA-QTY = FB01W00.FB01W-OA-QTY +                               FBHREC.FB7QTB[FB01WIX1];
        FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
      end
      FB01W00.FB01W-OA-SUM = FB01W00.FB01W-OA-SUM +                              FB01W00.FB01W-OA-QTY;
    end
  end

end // end FB01139

// Obtain unique Vfsctl01 row
Function FB01140()


  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      converseLib.validationFailed(202); /* User cannot access finishing flag*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01140"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE ROW        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01140";
  exit stack;

end // end FB01140

// open dmodel.vfbasm04 csr
Function FB01141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  FB01W07.FB01WFUN = "S1"; /* function*/

  try
    call "VFBASM04" (FB01W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01141

// fetch dmodel.vfbasm04 csr
Function FB01142()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB01W07.FB01WFUN = "N1"; /* function*/

  try
    call "VFBASM04" (FB01W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or empty return*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "142"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH  CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01142

// close dmodel.vfbasm04 csr
Function FB01143()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB01W07.FB01WFUN = "C1"; /* function*/

  try
    call "VFBASM04" (FB01W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "143"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01143

// Open dprodc.vpoitm03 csr
Function FB01144()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  FB01W07.FB01WFUN = "SX"; /* function*/

  try
    call "VPOITM04" (FB01W07, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "144"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CSR VPOITM03 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01144

// Fetch dprodc.vpoitm03 csr
Function FB01145()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WPFL = "N";
  FB01W07.FB01WFUN = "NX"; /* function*/

  try
    call "VPOITM04" (FB01W07, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or empty return*/
        FB01W00.FB01WPFL = "Y";
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

   /* IF EZERT8 EQ '00000000'          /* Call successful*/
    /* AND SQLCA.SQLCODE EQ -911;     /* and resource not available*/
    /* MOVE 47 TO EZEMNO;             /* Indicate not available*/
    /* MOVE 'POST' TO TA1REC.TA1FUNC; /* Termination function*/
   /* ELSE;*/
    /* MOVE 01 TO EZEMNO;             /* Indicate system error*/
    /* MOVE 'RETN' TO TA1REC.TA1FUNC; /* Termination function*/
    /* SET FB01M010 PAGE;             /* Clear screen before display*/
   /* END;*/

   /* CALL EZEROLLB;                    /* Return to previous process*/

   /* MOVE EZERT8 TO TA1REC.TA1MAP;    /* CSP return code*/
   /* MOVE SQLCA.SQLCAREC TO TAEREC.SQLCAREC;/* SQL Commarea*/
   /* MOVE '145' TO FB01M010.XXXPRCNM; /* Module identification*/

   /* MOVE 'DB2 ' TO TA1REC.TA1TYPE;   /* Type of error*/
   /* MOVE 'FETCH  CSR VPOITM03 ' TO TA1REC.TA1LOC;*/
   /* MOVE COMMAREA.CACURRAP TO TA1REC.TA1PGMAP;/* Program application*/
   /* MOVE FB01M010.XXXPRCNM TO TA1REC.TA1PGMNO;/* Program number*/
   /* MOVE 'DPRODC  ' TO TA1REC.TA1DBASE;   /* Data base name*/
   /* MOVE 'VPOITM04' TO TA1REC.TA1TBLVU;   /* Table view name*/
   /* MOVE VPOITM04.VPOITM04-KEY TO TA1REC.TA1TBLKE;/* Table key*/

   /* CALL TA0020 TA1REC,TAEREC (NOMAPS,NONCSP;/* Error diagnosis routine*/

   /* EZEFLO;                          /* Exit to display map*/


end // end FB01145

// Close dprodc.vpoitm03 csr
Function FB01146()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB01W07.FB01WFUN = "CX"; /* function*/

  try
    call "VPOITM04" (FB01W07, SQLCA, VPOITM04) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "146"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CSR VPOITM03 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM04"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM04.VPOITM04-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01146

// Format and display map 1
Function FB01200()


  if (converseVar.validationMsgNum != 0)
    set FB01M010 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 18) /* No data to display*/
    FB01S09(); /* reset map*/
  end

   /* -----------------------------------------------------------*/
   /* If current page not equal request page, obtain temp*/
   /* storage record.*/
   /* -----------------------------------------------------------*/

   /* TCS CHANGE BEGINS*/
  if ((FB01W00.FB01WBYM == FB01W04.FB01WBYM && 
  FBXREC.XPLCD == FB01W04.XPLCD && 
  FBXREC.CAUSERID == FB01W04.XXXUSER && 
  FBXREC.XPCCD == FB01W04.XPCCD))
    FB01W00.FB01WTSP = FB01W04.FB01WTSP;
    FB01W00.TA5TSQIX = FB01W04.TA5TSQIX1;
    TA5REC.TA5TSQIX = FB01W04.TA5TSQIX2;
    set FB01W04 empty;
  else
    set FB01W04 empty;
  end
   /* TCS CHANGE ENDS*/
  if (FB01W00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FB01W00.FB01WTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      set FB01M010 initial;

      FB01S08(); /* Obtain temp storage page*/


    end
  end

   /* -----------------------------------------------------------*/
   /* If map is not formatted--format heading and detail*/
   /* data.*/
   /* -----------------------------------------------------------*/


  if (FB01M010.XXXCURDT == 0) /* Map not formatted*/

    FB01210(); /* Move header data to the map*/

    FB01220(); /* Format map 1 detail lines*/

  end

  FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FB01M010.SY1STNBR[1] == " ")
      set FB01M010.FB01MBYM cursor;
    else
      set FB01M010.FB01MSEL[1] cursor;
    end
  end



  if (FB01W00.XXXMSGNO != 0) /* Contains informational message*/
    if (FB01W00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB01W00.XXXMSGNO);
    end
  end

  FB01M010.XXXPRCNM = "FB01"; /* Process number*/

  converse FB01M010 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  converseLib.validationFailed(0); /* message number*/
  FB01W00.XXXMSGNO = 0; /* Message number*/
  FB01M010.XXXPRCNM = "FB01"; /* Process number*/

end // end FB01200

// Format map Header data
Function FB01210()

   /* ------------------------------------------------------------*/
   /* Move map header from fb01w01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/


  if (FB01W01.XXXUSER != " ")
    FB01M010.XXXUSER = FB01W01.XXXUSER;
  end

  if (FB01W01.FB01WBYM != 0)
    FB01M010.FB01MBYM = FB01W01.FB01WBYM; /* buy month*/
  end

  FB01M010.XPLCD = FB01W01.XPLCD; /* line code*/
  FB01M010.XPLSDESC = FB01W01.XPLSDESC; /* category description*/
  FB01M010.XPCCD = FB01W01.XPCCD; /* category code*/
  FB01M010.XPCSDESC = FB01W01.XPCSDESC; /* category description*/
  FB01M010.FBMFINFL = FB01W01.FBMFINFL;
  FB01M010.FBMDSLNF = FB01W01.FBMDSLNF;


  if (FB01M010.FBMFINFL == "Y")
    set FB01M010.FBMFINFL protect;
  else
    set FB01M010.FBMFINFL normal;
  end



end // end FB01210

// Format map 1 Detail lines
Function FB01220()

   /* ------------------------------------------------------------*/
   /* Move each temporary storage line from the record to*/
   /* the map line.  Unprotect and display the select field*/
   /* when there is data to display.*/
   /* Position the cursor on the first select field if key fields*/
   /* have been passed in the FBXREC.*/
   /* ------------------------------------------------------------*/


  FB01W00.FB01WIXM = FB01W00.FB01WMAX; /* set to max lines*/

  while (FB01W00.FB01WIXM >= 1)


    if (FB01W02.SY1STNBR[FB01WIXM] != " ")
      FB01M010.SY1STNBR[FB01WIXM] = FB01W02.SY1STNBR[FB01WIXM];
      FB01M010.SY2CLRID[FB01WIXM] = FB01W02.SY2CLRID[FB01WIXM];
      FB01M010.SY1SSTNM[FB01WIXM] = FB01W02.SY1SSTNM[FB01WIXM];
      FB01M010.FB01MDC1[FB01WIXM] = FB01W02.FB01WDC1[FB01WIXM];
      FB01M010.FB01MDCF[FB01WIXM] = FB01W02.FB01WDCF[FB01WIXM];
      FB01M010.FB01MDC3[FB01WIXM] = FB01W02.FB01WDC3[FB01WIXM];
      FB01M010.FB01M-TOT-PREADVISE-QTY[FB01WIXM] = FB01W02.FB01W-TOT-PREADVISE-QTY[FB01WIXM];
      FB01M010.FB8FTQTB[FB01WIXM] = FB01W02.FB8FTQTB[FB01WIXM];
      FB01M010.FB01MACF[FB01WIXM] = FB01W02.FB01WACF[FB01WIXM];

      FB01M010.FB01MPBL[FB01WIXM] = FB01W02.FB01MPBL[FB01WIXM];
      FB01M010.FB01MPOQ[FB01WIXM] = FB01W02.FB01MPOQ[FB01WIXM];
      FB01M010.FB01MOAQ[FB01WIXM] = FB01W02.FB01MOAQ[FB01WIXM];

      if (FB01W01.FB01WBYM != 0
       && FB01W01.XPLCD != " ")
        set FB01M010.FB01MSEL[FB01WIXM] cursor, normal; /* Allow entry*/
      else
        set FB01M010.FB01MSEL[FB01WIXM] normal; /* Allow entry*/
      end
    else
      set FB01M010.FB01MSEL[FB01WIXM] initialAttributes; /* Protect and darken*/
    end
    FB01W00.FB01WIXM = FB01W00.FB01WIXM - 1;
  end

end // end FB01220

// Check attention ID
Function FB01300()


   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB01M010.XXXPRCNM = "FB01";
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    FB01310(); /* Validate scroll request*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB01M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      /* TCS CHANGE BEGINS*/
      set FB01W04 empty;
      FB01W04.XPLCD = FB01W01.XPLCD;
      FB01W04.XXXUSER = FB01W01.XXXUSER;
      FB01W04.XPCCD = FB01W01.XPCCD;
      FB01W04.FB01WBYM = FB01W00.FB01WBYM;
      FB01W04.FB01WTSP = FB01W00.FB01WTSP;
      FB01W04.TA5TSQIX1 = FB01W00.TA5TSQIX;
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      FB01W04.TA5TSQIX2 = TA5REC.TA5TSQIX;

      FB01W00.FB01WCIX1 = 1;
      while (FB01W00.FB01WCIX1 <= 50)
        if (FB01W05.FB01WAPPLN[FB01WCIX1] == " ")
          FB01W05.FB01WAPPLN[FB01WCIX1] = "FB01";
          FB01W05.FB01WAPPLD[FB01WCIX1] = FB01W04.FB01WGRP2;
          CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
          FB01W00.FB01WCIX1 = 50;
        end
        FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
      end
        /* TCS CHANGE ENDS*/
      FB01110(); /* Purge temp storage*/

      FBXREC.CAUSERID = FB01M010.XXXUSER;
      FBXREC.FB8BUYDT = FB01W00.FB01WBDT;
      FBXREC.XPLCD = FB01M010.XPLCD;
      FBXREC.XPCCD = FB01M010.XPCCD;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      COMMAREA.CAUSERA = FBWREC.FBWGROUP;
      COMMAREA.CATOAP = FB01M010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB01M010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB01M010.CATOAP cursor, bold;
      exit stack;
    else
      FB01M010.XXXPRCNM = "FB01300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    FB01110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB01M010.XXXPRCNM = "FB01300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* menu screen requested*/

    FB01110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB01M010.XXXPRCNM = "FB01300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    FB01110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB01M010.XXXPRCNM = "FB01300"; /* Module identification*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* On PF12 TRANSFER TO FB0Q (BUY PRODUCT SELECT)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* FB0Q screen requested*/

      /* TCS CHANGE BEGINS*/
    set FB01W04 empty;
    FB01W04.XPLCD = FB01W01.XPLCD;
    FB01W04.XXXUSER = FB01W01.XXXUSER;
    FB01W04.XPCCD = FB01W01.XPCCD;
    FB01W04.FB01WBYM = FB01W00.FB01WBYM;
    FB01W04.FB01WTSP = FB01W00.FB01WTSP;
    FB01W04.TA5TSQIX1 = FB01W00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB01W04.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB01W00.FB01WCIX1 = 1;
    while (FB01W00.FB01WCIX1 <= 50)
      if (FB01W05.FB01WAPPLN[FB01WCIX1] == " ")
        FB01W05.FB01WAPPLN[FB01WCIX1] = "FB01";
        FB01W05.FB01WAPPLD[FB01WCIX1] = FB01W04.FB01WGRP2;
        CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
        FB01W00.FB01WCIX1 = 50;
      end
      FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
    end
        /* TCS CHANGE ENDS*/
    FB01110(); /* Purge temp storage*/

    FBXREC.CAUSERID = FB01M010.XXXUSER;
    FBXREC.FB8BUYDT = FB01W00.FB01WBDT;
    FBXREC.XPLCD = FB01M010.XPLCD;
    FBXREC.XPCCD = FB01M010.XPCCD;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    COMMAREA.CATOAP = "FB0Q"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB01M010.XXXPRCNM = "FB01300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* (Process screen input)*/
   || converseVar.eventKey is pf13  /* FB02 DRS/PFS maintenance*/
   || converseVar.eventKey is pf14  /* FB08 PFS/DRS maintenance*/
   || converseVar.eventKey is pf17  /* Accept all DRS/PFS*/
   || converseVar.eventKey is pf19  /* Print drs/pfs*/
   || converseVar.eventKey is pf20  /* Print drs/pfs in bundl*/
   || converseVar.eventKey is pf15  /* Print screen*/
   || converseVar.eventKey is pf11  /* Automatic Divert to FB*/
   || converseVar.eventKey is pf16) /* Automatic Divert to OA*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FB01M010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ----------------------------------------------------*/
   /* If PF18 has been pressed pass data (edited or not)*/
   /* set up FBXREC for transfer, purge temp storage*/
   /* and transfer to requested application.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* FB09*/


    FBXREC.XPLCD = FB01W01.XPLCD;
    FBXREC.XPCCD = FB01W01.XPCCD;
    FBXREC.FB8BUYDT = FB01W00.FB01WBDT;
    FBXREC.XGPCD = "02";
    FBXREC.CAUSERID = FB01W01.XXXUSER;

    FB01W00.FB01WIX1 = 1; /* Init FBXREC product array*/
    FB01W00.FB01WIXM = 1; /* Init Map array*/

    while (FB01W00.FB01WIXM <= FB01W00.FB01WMAX) /* Max lines*/

      if (FB01M010.FB01MSEL[FB01WIXM] == "S")
        FBXREC.SY1STNBR[FB01WIX1] = FB01M010.SY1STNBR[FB01WIXM];
        FBXREC.SY2CLRID[FB01WIX1] = FB01M010.SY2CLRID[FB01WIXM];
        FBXREC.FBXPRIPO[FB01WIX1] = FB01M010.FB01MPOQ[FB01WIXM];
        FBXREC.FBXPRIBL[FB01WIX1] = FB01M010.FB01MPBL[FB01WIXM];
        FBXREC.XDMCD[FB01WIX1] = "00";
        FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
      end

      FB01W00.FB01WIXM = FB01W00.FB01WIXM + 1;
    end

    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

      /* TCS CHANGE BEGINS*/
    set FB01W04 empty;
    FB01W04.XPLCD = FB01W01.XPLCD;
    FB01W04.XXXUSER = FB01W01.XXXUSER;
    FB01W04.XPCCD = FB01W01.XPCCD;
    FB01W04.FB01WBYM = FB01W00.FB01WBYM;
    FB01W04.FB01WTSP = FB01W00.FB01WTSP;
    FB01W04.TA5TSQIX1 = FB01W00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB01W04.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB01W00.FB01WCIX1 = 1;
    while (FB01W00.FB01WCIX1 <= 50)
      if (FB01W05.FB01WAPPLN[FB01WCIX1] == " ")
        FB01W05.FB01WAPPLN[FB01WCIX1] = "FB01";
        FB01W05.FB01WAPPLD[FB01WCIX1] = FB01W04.FB01WGRP2;
        CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
        FB01W00.FB01WCIX1 = 50;
      end
      FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
    end
        /* TCS CHANGE ENDS*/
    FB01110(); /* Purge temp storage*/
    COMMAREA.CATOAP = "FB09";

    XSFBS01();
    FB01M010.XXXPRCNM = "FB01600";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  FB01M010.XXXPRCNM = "FB01300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;



end // end FB01300

// Validate scroll request
Function FB01310()



   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB01W00.FB01WTSP < 2)       /* and no previous pages*/

    FB01M010.XXXPRCNM = "FB01131"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB01W00.FB01WTSP >= FB01W00.TA5TSQIX) /* and no more pages*/

    FB01M010.XXXPRCNM = "FB01310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   && FB01W00.FB01WTSP == 1)      /* on first page*/

    FB01M010.XXXPRCNM = "FB01310"; /* Module identification*/
    converseLib.validationFailed(6); /* No more pages to display*/

  end
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FB01310

// Reset highlighted fields
Function FB01400()

   /* ----------------------------------------------------*/
   /* Set the select code to either defined or normal*/
   /* ----------------------------------------------------*/

  FB01W00.FB01WIXM = 1; /* Initialize map index*/

  while (FB01W00.FB01WIXM <= FB01W00.FB01WMAX) /* Max lines*/
    if (FB01W02.SY1STNBR[FB01WIXM] == " ")

      set FB01M010.FB01MSEL[FB01WIXM] initialAttributes; /* Protect and darken*/
    else
      set FB01M010.FB01MSEL[FB01WIXM] normal; /* Allow entry*/

    end
    FB01W00.FB01WIXM = FB01W00.FB01WIXM + 1;
  end

  set FB01M010.FB01MBYM initialAttributes;
  set FB01M010.XPLCD initialAttributes;
  set FB01M010.XPCCD initialAttributes;
  set FB01M010.FBMFINFL initialAttributes;
  set FB01M010.XXXUSER initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FB01M010.XPLCD == "?" /* Product line list requested*/
   || FB01M010.XPCCD == "?") /* Category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FB01M010.XXXPRCNM = "400"; /* Module identification*/
      converseLib.validationFailed(03); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FB01M010.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB01M010.XPCCD = FB01W01.XPCCD; /* Restore prior code*/
      FB01M010.XPCSDESC = FB01W01.XPCSDESC; /* Description*/
    else
      FB01M010.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FB01M010.XPCSDESC = XPCTBL.XPCSDESC[XX0XWPIX]; /* Description*/

    end

    set FB01M010.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FB01M010.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the silhouette list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB01M010.XPLCD = FB01W01.XPLCD; /* Restore prior code*/
    else
      FB01M010.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FB01M010.XPLSDESC = XPLTBL.XPLSDESC[XX0XWPIX];

    end

    set FB01M010.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB01M010.XXXPRCNM = "400"; /* Module identification*/

  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FB01400

// Verify entered data
Function FB01500()

   /* ----------------------------------------------------*/
   /* Do select field validation.*/
     /* l). verify only 's' has been entered*/
     /* 2). verify that no userid, buy month, line, category,*/
         /* or page to style have been entered*/
     /* 3). verify that scrolling has not been requested*/
         /* when a select code has been entered.*/
   /* ----------------------------------------------------*/

  FB01M010.XXXPRCNM = "FB01500";

  if (FB01M010.SY1STNBR[1] != " ") /* Style exists*/

    FB01W00.FB01WIXM = FB01W00.FB01WMAX;
    FB01W00.FB01WCNT = 0; /* Field to count select codes*/

    while (FB01W00.FB01WIXM >= 1)
      if (FB01M010.FB01MSEL[FB01WIXM] == "S")
        FB01W00.FB01WCNT = FB01W00.FB01WCNT + 1;
      else
        if (FB01M010.FB01MSEL[FB01WIXM] != " ")
          set FB01M010.FB01MSEL[FB01WIXM] cursor, bold;
          converseLib.validationFailed(41); /* 'S' is the only valid selection code*/
        end
      end
      FB01W00.FB01WIXM = FB01W00.FB01WIXM - 1;
    end
  end

  if (FB01W00.FB01WCNT != 0)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf17)
      converseLib.validationFailed(5);
    end
    if (FB01M010.XXXUSER != " "
     && FB01M010.XXXUSER != FB01W01.XXXUSER)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB01M010.XXXUSER cursor, bold;
    end
    if (FB01M010.XPCCD != " "
     && FB01M010.XPCCD != FB01W01.XPCCD)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB01M010.XPCCD cursor, bold;
    end
    if (FB01M010.XPLCD != " "
     && FB01M010.XPLCD != FB01W01.XPLCD)
      converseLib.validationFailed(194); /* 's'  invalid when key fields changed*/
      set FB01M010.XPLCD cursor, bold;
    end
    if (FB01M010.FB01MBYM != 0
     && FB01M010.FB01MBYM != FB01W01.FB01WBYM)
      converseLib.validationFailed(194); /* 's' invalid when key fields changed*/
      set FB01M010.FB01MBYM cursor, bold;
    end
  else /* No select code entered*/
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14)
      converseLib.validationFailed(196);
                                   /* At lease one product must be selected*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* IF PF17 (accept all DRS/PFS verify that the*/
   /* direct ship finish flag is not equal to'y'*/
   /* already.*/
   /* ----------------------------------------------------*/

   /* IF EZEAID IS PF17;*/
    /* IF FBMREC.FBMFINFL EQ 'Y';*/
      /* MOVE 258 TO EZEMNO ; DRS/PFS were previously accepted*/
  if (FB01M010.FBMFINFL != "Y"
   && FB01M010.FBMFINFL != "N"
   && FB01M010.FBMFINFL != " ")
    converseLib.validationFailed(10); /* invalid value*/
    set FB01M010.FBMFINFL cursor, bold;
  else
    FB01W01.FBMFINFL = FB01M010.FBMFINFL;
  end


   /* ----------------------------------------------------*/
   /* Edit category code if entered or changed*/
   /* ----------------------------------------------------*/

  if (FB01M010.XPCCD == " ")
    if (FB01W01.XPCCD != " ")
      FBXREC.XPCCD = " ";
      FB01W00.FB01WKFC = "Y"; /* Key fields have changed*/
         /* MOVE 'N' TO FB01W00.FB01WP17; PF17 not allowed flag*/
    end
    FB01W01.XPCCD = " "; /* Map field may have been erased*/
    FB01W01.XPCSDESC = " "; /* Map field may have been erased*/
    FB01M010.XPCSDESC = " "; /* Map field may have been erased*/
  else
    if (FB01M010.XPCCD != FB01W01.XPCCD) /* Category changed*/
      FB01W00.FB01WKFC = "Y"; /* Key fields have changed*/
         /* MOVE 'Y' TO FB01W00.FB01WP17; PF17 not allowed flag*/
      XPCREC.XPCCD = FB01M010.XPCCD;
      XPCREC.XGPCD = "02";
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB01W01.XPCCD = FB01M010.XPCCD;
        FB01W01.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
        FB01M010.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
        FBXREC.XPCCD = FB01M010.XPCCD;
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB01M010.XPCCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit product line code  if entered or changed*/
   /* ----------------------------------------------------*/

  if (FB01M010.XPLCD == " ")
    if (FB01W01.XPLCD != " ")
      FB01W00.FB01WKFC = "Y"; /* Key fields have changed*/
    end
    FB01W01.XPLCD = " "; /* Field may have been erased*/
    FB01M010.XPLSDESC = " "; /* Field may have been erased*/
    converseLib.validationFailed(8); /* Required field*/
    set FB01M010.XPLCD cursor, bold;
  else
    if (FB01M010.XPLCD != FB01W01.XPLCD) /* product line changed*/
      FB01W00.FB01WKFC = "Y"; /* Key fields have changed*/
      XPLREC.XPLCD = FB01M010.XPLCD;
      XPLREC.XGPCD = "02";
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB01W01.XPLCD = FB01M010.XPLCD;
        FB01W01.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
        FB01M010.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
        FBXREC.XPLCD = FB01M010.XPLCD;
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB01M010.XPLCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit buy date if entered or changed.*/
   /* ----------------------------------------------------*/

  if (FB01M010.FB01MBYM == 0)
    FB01W01.FB01WBYM = "0"; /* Field may have been erased*/
    FB01W00.FB01WBDT = "0";
    converseLib.validationFailed(8); /* Required field*/
    set FB01M010.FB01MBYM cursor, bold;
  else
    /* ------------- y2k out begin --------*/
    /* IF FB01M010.FB01MBYM NE FB01W01.FB01WBYM;*/
     /* MOVE 'Y' TO FB01W00.FB01WKFC;        /* Key fields have changed*/
     /* MOVE 0 TO FB01W01.FB01WBYM;*/
     /* MOVE EZEDTE TO FB01W00.FB01WSDT;*/
     /* MOVE 19 TO FB01W00.FB01WBCC;  /* Buy century*/
     /* MOVE 1 TO FB01W00.FB01WBDD;   /* Buy day*/
     /* MOVE FB01M010.FB01MBYM TO FB01W00.FB01WBYM;*/
    /* ------------- y2k out end ----------*/
    /* ------------- y2k in  begin --------*/
    if (FB01M010.FB01MBYM != FB01W01.FB01WBYM)
      FB01W00.FB01WKFC = "Y"; /* Key fields have changed*/
      FB01W01.FB01WBYM = 0;
      FB01W00.FB01WSDT = VGVar.currentGregorianDate;
      FB01W00.FB01WBDD = 1; /* Buy day*/
      FB01W00.FB01WBYM = FB01M010.FB01MBYM;
      FB01W00.FB01WBY1 = FB01W00.FB01WBYY;
      if (FB01W00.FB01WBYY > 65)
        FB01W00.FB01WBCC = 19;
        FB01W00.FB01WBC1 = 19;
      else
        FB01W00.FB01WBCC = 20;
        FB01W00.FB01WBC1 = 20;
      end
      /* ------------- y2k in end -----------*/
      if (FB01W00.FB01WBMM > 12) /* Month > 12*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB01M010.FB01MBYM cursor, bold;
        FB01W00.FB01WBDT = 0;
        FB01W01.FB01WBYM = 0;
      else
        FB01W00.FB01WBYM = FB01M010.FB01MBYM;
        FB01W01.FB01WBYM = FB01M010.FB01MBYM;
      end
      if (FB01W00.FB01WBMM < 1) /* Month < 1*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB01M010.FB01MBYM cursor, bold;
        FB01W00.FB01WBDT = 0;
        FB01W01.FB01WBYM = 0;
      else
        FB01W00.FB01WBYM = FB01M010.FB01MBYM;
        FB01W01.FB01WBYM = FB01M010.FB01MBYM;
      end
      /* ----------- y2k out begin ----------*/
      /* FB01W00.FB01WSYY = FB01W00.FB01WSYY - 1;*/
      /* IF FB01W00.FB01WBYY LT FB01W00.FB01WSYY;/* Year < current year*/
      /* ----------- y2k out end ------------*/
      /* ----------- y2k in  begin ----------*/
      FB01W00.FB01WSCY = FB01W00.FB01WSCY - 1;
      if (FB01W00.FB01WBCY < FB01W00.FB01WSCY) /* Year < current year*/
        /* ----------- y2k in end -------------*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB01M010.FB01MBYM cursor, bold;
        FB01W00.FB01WBDT = 0;
        FB01W01.FB01WBYM = 0;
      else
        FB01W00.FB01WBYM = FB01M010.FB01MBYM;
        FB01W01.FB01WBYM = FB01M010.FB01MBYM;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Validate userid field against DPRODG.VSUSER01 table*/
   /* if field has been modified.*/
   /* ----------------------------------------------------*/

  if (FB01M010.XXXUSER != " "
   && FB01M010.XXXUSER != FB01W01.XXXUSER)
    if (converseVar.eventKey is enter)

      set PG1REC empty;
      PG1REC.XXXUSER = FB01M010.XXXUSER;

      FB01120(); /* validate user id*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FB01110(); /* Purge temp storage*/
        FB01W01.XXXUSER = FB01M010.XXXUSER;
        set FB01M010 empty;
        FB01M010.XXXUSER = FB01W01.XXXUSER;
        FB01W01.XXXUSER = " ";
        converseLib.validationFailed(257); /* scheduler code not on table*/
        set FB01M010.XXXUSER cursor, bold;
      else
        FB01W01.XXXUSER = FB01M010.XXXUSER;
        FB01W00.FB01WKFC = "Y"; /* key fields changed flag*/
      end

    else
      converseLib.validationFailed(219); /* displayed data cannot change etc.*/
      set FB01M010.XXXUSER cursor, bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If any edit errors on entered key fields exit to*/
   /* display map, otherwise set request data flag to*/
   /* yes.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (FB01W00.FB01WKFC == "Y") /* Key fields have changed*/
    FB01W00.FB01WRDF = "Y"; /* Set request data flag to yes*/
  end

  FB01W00.FB01WKFC = "N"; /* Key fields changed flag*/

  FB01M010.XXXPRCNM = "  ";


end // end FB01500

// Process valid input
Function FB01600()

   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FB01W00.FB01WTSP = FB01W00.FB01WTSP - 1;
    FB01W00.XXXMSGNO = 13;
    return;
  end

  if (converseVar.eventKey is pf8)
    FB01W00.FB01WTSP = FB01W00.FB01WTSP + 1;
    FB01W00.XXXMSGNO = 12;
    return;
  end


   /* ----------------------------------------------------*/
   /* If PF17 update the direct ship finish flag*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf17)
     /* IF FB01W00.FB01WP17 EQ 'Y'    ; PF17 not allowed*/
       /* MOVE 300 TO EZEMNO ;Cannot use pf17 when category entered*/
       /* EZERTN;*/
     /* ELSE ;*/

    FB01610(); /* process all products not accepted*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

     /* END ;*/
  end

   /* ----------------------------------------------------*/
   /* If enter has been pressed ezertn to display map*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter)
    return;
  end

   /* ----------------------------------------------------*/
   /* If PF13, PF14, PF18 have been pressed*/
   /* set up FBXREC for transfer, purge temp storage*/
   /* and transfer to requested applications.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* FB08*/
   || converseVar.eventKey is pf14 /* FB02*/
   || converseVar.eventKey is pf18) /* FB09*/


    FBXREC.XPLCD = FB01W01.XPLCD;
    FBXREC.XPCCD = FB01W01.XPCCD;
    FBXREC.FB8BUYDT = FB01W00.FB01WBDT;
    FBXREC.XGPCD = "02";
    FBXREC.CAUSERID = FB01W01.XXXUSER;

    FB01W00.FB01WIX1 = 1; /* Init FBXREC product array*/
    FB01W00.FB01WIXM = 1; /* Init Map array*/

    while (FB01W00.FB01WIXM <= FB01W00.FB01WMAX) /* Max lines*/

      if (FB01M010.FB01MSEL[FB01WIXM] == "S")
        FBXREC.SY1STNBR[FB01WIX1] = FB01M010.SY1STNBR[FB01WIXM];
        FBXREC.SY2CLRID[FB01WIX1] = FB01M010.SY2CLRID[FB01WIXM];
        FBXREC.FBXPRIPO[FB01WIX1] = FB01M010.FB01MPOQ[FB01WIXM];
        FBXREC.FBXPRIBL[FB01WIX1] = FB01M010.FB01MPBL[FB01WIXM];
        FBXREC.XDMCD[FB01WIX1] = "00";
        FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
      end

      FB01W00.FB01WIXM = FB01W00.FB01WIXM + 1;
    end

    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

   /* TCS CHANGE BEGINS*/
    set FB01W04 empty;
    FB01W04.XPLCD = FB01W01.XPLCD;
    FB01W04.XXXUSER = FB01W01.XXXUSER;
    FB01W04.XPCCD = FB01W01.XPCCD;
    FB01W04.FB01WBYM = FB01W00.FB01WBYM;
    FB01W04.FB01WTSP = FB01W00.FB01WTSP;
    FB01W04.TA5TSQIX1 = FB01W00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB01W04.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB01W00.FB01WCIX1 = 1;
    while (FB01W00.FB01WCIX1 <= 50)
      if (FB01W05.FB01WAPPLN[FB01WCIX1] == " ")
        FB01W05.FB01WAPPLN[FB01WCIX1] = "FB01";
        FB01W05.FB01WAPPLD[FB01WCIX1] = FB01W04.FB01WGRP2;
        CA-USER-WORKAREA-2K-C = FB01W05.FB01WGRP2;
        FB01W00.FB01WCIX1 = 50;
      end
      FB01W00.FB01WCIX1 = FB01W00.FB01WCIX1 + 1;
    end
   /* TCS CHANGE ENDS*/
    FB01110(); /* Purge temp storage*/


    if (converseVar.eventKey is pf13) /* (FB08)*/
      COMMAREA.CATOAP = "FB08";

      XSFBS01();
      FB01M010.XXXPRCNM = "FB01600";
      exit stack;
    end

    if (converseVar.eventKey is pf14) /* (FB02)*/
      COMMAREA.CATOAP = "FB02";

      XSFBS01();
      FB01M010.XXXPRCNM = "FB01600";
      exit stack;
    end
    if (converseVar.eventKey is pf18) /* Freeze bottom line (FB09)*/
      COMMAREA.CATOAP = "FB09";

      XSFBS01();
      FB01M010.XXXPRCNM = "FB01600";
      exit stack;
    end
    if (converseVar.eventKey is pf21) /* order adjustment (XXXX)*/
      COMMAREA.CATOAP = "XXXX";

      XSFBS01();
      FB01M010.XXXPRCNM = "FB01600";
      exit stack;
    end

  end

   /* ----------------------------------------------------*/
   /* If PF15 has been pressed submit JCl to run job*/
   /* FB1171.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf15)

    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/

    FB01601(); /* determine region*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the jcl.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    TA6REC.TA6MSGSW = "N";

    FB01W00.FB01WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Submit production or test jcl.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      FB01602(); /* submit production report*/
    else
      FB01603(); /* submit test report*/
    end

    FB01620(); /* Submit the JCL*/

    set FB01M010 empty; /* 010 input/output area*/

    FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/

    FB01W00.FB01WRDF = "Y"; /* want to display data*/

    FB01W00.XXXMSGNO = 76; /* Job submitted for batch processing*/


  end


   /* ----------------------------------------------------*/
   /* If PF19 has been pressed submit JCl to run job*/
   /* FB3002 - drs/pfs report*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf19)

    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/

    FB01601(); /* determine region*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the jcl.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    TA6REC.TA6MSGSW = "N";

    FB01W00.FB01WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Submit production or test jcl.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      FB01605(); /* submit production report*/
    else
      FB01606(); /* submit test report*/
    end

    FB01620(); /* Submit the JCL*/

    set FB01M010 empty; /* 010 input/output area*/

    FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/

    FB01W00.FB01WRDF = "Y"; /* want to display data*/

    FB01W00.XXXMSGNO = 76; /* Job submitted for batch processing*/

  end


   /* ----------------------------------------------------*/
   /* If PF20 has been pressed submit JCl to run job*/
   /* FB3002 - drs/pfs report  - bundl*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/

    FB01601(); /* determine region*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the jcl.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    TA6REC.TA6MSGSW = "N";

    FB01W00.FB01WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Submit production or test jcl.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      FB01608(); /* submit production report*/
    else
      FB01609(); /* submit test report*/
    end

    FB01620(); /* Submit the JCL*/

    set FB01M010 empty; /* 010 input/output area*/

    FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/

    FB01W00.FB01WRDF = "Y"; /* want to display data*/

    FB01W00.XXXMSGNO = 76; /* Job submitted for batch processing*/

  end


   /* ----------------------------------------------------*/
   /* If PF11 has been pressed submit JCl to run job*/
   /* FB288D - Automate Direct Ship Process*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf11)

    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/

    FB01601(); /* determine region*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the jcl.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/

    TA6REC.TA6MSGSW = "Y";

    FB01W00.FB01WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Submit production or test jcl.*/
    /* ------------------------------------------------------------*/

    if (TA3REC.TA3RGNID == "03") /* If production environment*/
      FB01615(); /* submit production report*/
    else
      FB01616(); /* submit test report*/
    end

    FB01620(); /* Submit the JCL*/

    set FB01M010 empty; /* 010 input/output area*/

    FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/

    FB01W00.FB01WRDF = "Y"; /* want to display data*/

    FB01W00.XXXMSGNO = 76; /* Job submitted for batch processing*/

  end

   /* ----------------------------------------------------*/
   /* If PF16 has been pressed submit JCl to run job*/
   /* PA110D - Automate Direct Ship Process*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf16)

   /* GOUTHAM - CHANGES  ADDED - BEGIN*/
    /* ------------------------------------------------------------*/
     /* determine which environment the program is executing in:*/
     /* development or production.*/
    /* ------------------------------------------------------------*/

    VDRSAT01.PG1SC4CD = PG1REC.PG1SC4CD;
    VDRSAT01.XPLCD = FBXREC.XPLCD;
    VDRSAT01.FB7BUYST = "D";
    FBPREC.DRS-TASK = "T";
    try
      call "VDRSAT01" (FBPREC, SQLCA, VDRSAT01) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
    if (FBPREC.DRSR-CNT > 0)
      FB01601(); /* determine region*/

        /* ------------------------------------------------------*/
         /* Initialize the work areas and indexes to be used for*/
         /* submitting the jcl.*/
        /* ------------------------------------------------------*/

      set TA6REC empty; /* Subroutine work area*/

      TA6REC.TA6MSGSW = "Y";

      FB01W00.FB01WIXT = 1; /* Initialize table index*/
      TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

        /* -------------------------------------------------------*/
         /* Submit production or test jcl.*/
        /* -------------------------------------------------------*/

      if (TA3REC.TA3RGNID == "03") /* If production environment*/
        FB01617(); /* submit production report*/
      else
        FB01618(); /* submit test report*/
      end

      FB01620(); /* Submit the JCL*/

      set FB01M010 empty; /* 010 input/output area*/

      FB01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/

      FB01W00.FB01WRDF = "Y"; /* want to display data*/

      FB01W00.XXXMSGNO = 76; /* Job submitted for batch processing*/
    else
      FB01W00.XXXMSGNO = 552; /* No DRS records to process*/
    end
  end
   /* GOUTHAM - CHANGES  ADDED - END*/

end // end FB01600

// Get region information
Function FB01601()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FB01M010.XXXPRCNM = "FB01601"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end


end // end FB01601

// Submit FB1171 prod jcl
Function FB01602()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


    if (FB01T02.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* move required parm fields to working storage and then*/
         /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG1SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01WPBD = FB01W00.FB01WBDT; /* Buy date*/
      FB01W00.XPLCD = FB01W01.XPLCD;
      FB01W00.XPCCD = FB01W01.XPCCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01WPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T02.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T02.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T02.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T02.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01602

// Submit FB1171 test jcl
Function FB01603()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


    if (FB01T01.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* move required parm fields to working storage and then*/
         /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG1SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01WPBD = FB01W00.FB01WBDT; /* Buy date*/
      FB01W00.XPLCD = FB01W01.XPLCD;
      FB01W00.XPCCD = FB01W01.XPCCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01WPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T01.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T01.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T01.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T01.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01603

// Submit FB3002 prod jcl
Function FB01605()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FB01T04.TARJCL[FB01WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FB01T04.TARTYPE[FB01WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T04.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01605

// Submit FB3002 test jcl
Function FB01606()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FB01T03.TARJCL[FB01WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FB01T03.TARTYPE[FB01WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T03.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01606

// Submit FB3002 prod jcl-bundl
Function FB01608()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    FB01W00.FB01WJCL = FB01T04.TARJCL[FB01WIXT];
    if (FB01W00.FB01WRCL == "(P,,FB39)")
      FB01W00.FB01WRCL = "(N,,FB39)";
      FB01T04.TARJCL[FB01WIXT] = FB01W00.FB01WJCL;
    end

    if (FB01T04.TARTYPE[FB01WIXT] == "O")
      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/
      TA6REC.TARJCL[TA6INDEX] = FB01T04.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T04.TARTYPE[FB01WIXT]; /* Type*/
    else
      TA6REC.TARJCL[TA6INDEX] = FB01T04.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T04.TARTYPE[FB01WIXT]; /* Type*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T04.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01608

// Submit FB3002 test jcl-bundl
Function FB01609()

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/


      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    FB01W00.FB01WJCL = FB01T03.TARJCL[FB01WIXT];
    if (FB01W00.FB01WRCL == "(P,,FB39)")
      FB01W00.FB01WRCL = "(T,,FB39)";
      FB01T03.TARJCL[FB01WIXT] = FB01W00.FB01WJCL;
    end

    if (FB01T03.TARTYPE[FB01WIXT] == "O")
      /* FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1;/* Increment table index*/
      TA6REC.TARJCL[TA6INDEX] = FB01T03.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T03.TARTYPE[FB01WIXT]; /* Type*/
    else
      TA6REC.TARJCL[TA6INDEX] = FB01T03.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T03.TARTYPE[FB01WIXT]; /* Type*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T03.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/

      FB01W00.FB01WIXT = 0; /* Indicate end of table*/

    else

      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/

    end

  end


end // end FB01609

// Update line finished flag
Function FB01610()


   /* ------------------------------------------------------------*/
   /* This module will check all of the accept flags for each*/
   /* product in working storage. For each flag that is an 'n'*/
   /* check to see if the DC1 qty is less than or equal to the*/
   /* forecast qty to buy.  if so then update the  direct*/
   /* ship accept flag for the product (multiple records) and*/
   /* set the warehouse code to spaces on the VDNORD01 table.*/
   /* If addition update the the forecast accept flag on the*/
   /* VFQTBS01 table and update the scheduler approval flag*/
   /* on the VFFQTB01 table (multiple rows).*/
   /* ------------------------------------------------------------*/


  FB01W00.FB01WSSP = FB01W00.FB01WTSP; /* Save temp storage page*/

  FB01W00.FB01WTSP = 1; /* Reqest 1st page of temp storage*/
  FB01W00.XWHCD = " "; /* WS warehouse code*/

  while (FB01W00.FB01WTSP <= FB01W00.TA5TSQIX) /* While pages*/

    FB01S08(); /* Obtain temp storage*/
    FB01W00.FB01WIXM = 1; /* Page line index*/

    while (FB01W00.FB01WIXM <= FB01W00.FB01WMAX) /* While more lines*/

      if (FB01W02.FB01WACF[FB01WIXM] == "N") /* Accept flag equal 'n'*/
        FB01W00.FB01WWF1 = FB01W02.FB8FTQTB[FB01WIXM];
        FB01W00.FB01WTOL = FB01W00.FB01WWF1 + FB9REC.FB9BTQTY;
        if (FB01W02.FB01WDCT[FB01WIXM] <= FB01W00.FB01WTOL
         && FB01W02.XWHCD[FB01WIXM] == " ")
          FB01W00.FB01WCAF = FB01W00.FB01WCAF - 1; /* count 'n' AC flags*/

          FB01612(); /* Update VDNORD01 accept flags*/


          set FB8REC empty; /* Init record*/

          FB8REC.SY1STNBR = FB01W02.SY1STNBR[FB01WIXM];
          FB8REC.SY2CLRID = FB01W02.SY2CLRID[FB01WIXM];
          FB8REC.XDMCD = FB01W02.XDMCD[FB01WIXM];
          FB8REC.FB8BUYDT = FB01W00.FB01WBDT;

          FB01613(); /* Update VFFQTB01 accept flags*/

          set FBKREC empty;
          FBKREC.SY1STNBR = FB01W02.SY1STNBR[FB01WIXM];
          FBKREC.SY2CLRID = FB01W02.SY2CLRID[FB01WIXM];
          FBKREC.XDMCD = FB01W02.XDMCD[FB01WIXM];
          FBKREC.FB8RCTYP = "B";
          FBKREC.FBKFSAFL = "N";
          FBKREC.FB8BUYDT = FB01W00.FB01WBDT;

          FB01134(); /* Obtain  VFQTBS01 row*/

          FBKREC.FBKFSAFL = "Y"; /* forecast accept flag*/

          FB01S16(); /* Update  VFQTBS01 row*/

        else
           /* product not accepted DC1 > fcst or DC1 PFS found*/
          FB01W00.XXXMSGNO = 301;
        end
      end
      FB01W00.FB01WIXM = FB01W00.FB01WIXM + 1;
    end
    FB01W00.FB01WTSP = FB01W00.FB01WTSP + 1;
  end

   /* ------------------------------------------------------------*/
   /* if at line level only----------------- First, update the*/
   /* direct ship line finish flag and scheduler approved flag*/
   /* for all products on dfbuy.vfqtbs01 and dfbuy.vffqtb01*/
   /* that do not have any direct ship records.*/
   /* ------------------------------------------------------------*/
   /* If all of the line*/
   /* finish flags for a scheduler are 'Y' then the direct ship*/
   /* finish flag on the VFSCTL01 row can be updated. If the*/
   /* direct ship finish flag for the scheduler is turned on*/
   /* check to see if the flag is on for all schedulers, and if*/
   /* it is turn on the factory autoload flag.*/
   /* ------------------------------------------------------------*/

   /* COUNT OF ACCEPT FLAGS EQUAL TO 'N'  is zero and*/
   /* no warehouse--update the product flag on the*/
   /* VFSCTL01 table*/

  if (FB01M010.XPCCD == " ")
    if (FB01W00.FB01WCAF == 0 /* No 'N' accept flags for product*/
     && FB01W00.XWHCD == " ") /* No warehouses for VDNORD01 rows*/

      FB01614(); /* update flags for prods w/ no drs*/

      FB01W00.FB01WIX1 = 1;
      while (FB01W00.FB01WIX1 <= 20)
        if (FB01W01.XPLCD == FBMREC.FBMPCD[FB01WIX1])
          FBMREC.FBMDSLNF[FB01WIX1] = "Y";

          FB01S11(); /* Update VFSCTL01 row*/

          FB01W00.FB01WIX1 = 99; /* Drop out of loop*/
        end
        FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
      end

      FB01611(); /* Check line accept flags*/

    else
      FB01611(); /* Check line accept flags*/
    end
  end

   /* FB01625 is included to set the FB-FCTYLD-RUN-FL for the*/
   /* scheduler to 'Y' if the scheduler has completed his/her*/
   /* equipment DRS. If the scheduler has no equipment line, then*/
   /* just set the FB-FCTYLD-RUN-FL to 'Y'*/
   /* GREDDY -- 07/28/00*/

  FB01625();

  if (FB01W00.XXXMSGNO != 301)
    if (FB01M010.XPCCD == " ")
      FB01W00.XXXMSGNO = 32;
    else
      FB01W00.XXXMSGNO = 354;
    end
  end

   /* Restore temp storage page*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp storage page*/
  TA5REC.TA5TSQIX = 0;
  FB01W00.FB01WRDF = "Y"; /* Request for data*/


end // end FB01610

// Check line accept flags
Function FB01611()
   /* -------------------------------------------------------*/
   /* check the scheduler's direct ship line accept flags*/
   /* for each line assigned to the scheduler. if all are*/
   /* a 'y' set the direct ship finish flag to 'y' and*/
   /* check all of the schedulers direct ship finish flags.*/
   /* If they are all 'y' set the factory load run flag to.*/
   /* yes.*/
   /* -------------------------------------------------------*/

  FB01W00.FB01WIX1 = 1;
  FB01W00.FB01WCAF = 0; /* Count accept flags*/

  while (FB01W00.FB01WIX1 <= 20)
    if (FBMREC.FBMPCD[FB01WIX1] != " ")
      if (FBMREC.FBMDSLNF[FB01WIX1] != "Y")
        FB01W00.FB01WCAF = FB01W00.FB01WCAF + 1;
      end

    end
    FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
  end

  if (FB01W00.FB01WCAF != 0)
    return;

  end

   /* update the direct ship finish and factory load run flag*/

  FBMREC.FBMFINFL = "Y"; /* Direct ship finish flag*/
  FBMREC.FBMFLRFL = "Y"; /* Factory load run flag*/

  FB01S11(); /* Update VFSCTL01 row*/


end // end FB01611

// Update Vdnord01 accept flags
Function FB01612()

   /* ------------------------------------------------------------*/
   /* Get the direct ship / nil quantity to buy.*/
   /* ------------------------------------------------------------*/

  set FBHREC empty; /* Init record*/

  FBHREC.SY1STNBR = FB01W02.SY1STNBR[FB01WIXM];
  FBHREC.SY2CLRID = FB01W02.SY2CLRID[FB01WIXM];
  FBHREC.XDMCD = FB01W02.XDMCD[FB01WIXM];
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
  FBHREC.XDSCD = "*";
  FBHREC.FBHDSAFL = "*";
  FBHREC.XWHCD = "*";
  FBHREC.FB7BUYST = "Y"; /* Current and future buy status*/
  FBHREC.FB8BUYDT = FB01W00.FB01WBDT;

  FB01S22(); /* Open cursor for DFBUY.VDNORD01*/

  FB01S23(); /* Fetch DFBUY.VDNORD01 row*/


  while (FB01W00.FB01WDNC == "N") /* While not end of cursor*/

    if (FBHREC.XDVCD != "02"
     && FBHREC.FB7BUYST == "Y") /* Current and future buy*/
      FBHREC.FBHDSAFL = "Y";

      FB01S10(); /* Update Vdnord01 row*/
    end
    FB01S23(); /* Fetch DFBUY.VDNORD01 row*/

  end


  FB01S24(); /* Close DFBUY.VDNORD01 cursor*/


end // end FB01612

// Update VFFQTB01 accept flags
Function FB01613()

   /* ------------------------------------------------------------*/
   /* Get the detail forecast quty to buy.*/
   /* ------------------------------------------------------------*/

  FB01S12(); /* Open cursor for DFBUY.VFFQTB01*/

  FB01S13(); /* Fetch DFBUY.VFFQTB01 row*/


  while (FB01W00.FB01WFFC == "N") /* While not end of cursor*/

    FB8REC.FB8SAPFL = "Y"; /* Scheduler approved flag*/

    FB01S15(); /* Update VFFQTB01 row*/

    FB01S13(); /* Fetch DFBUY.VFFQTB01 row*/

  end


  FB01S14(); /* Close DFBUY.VFFQTB01 cursor*/


end // end FB01613

// Update drs flags/non drs prods
Function FB01614()
   /* ------------------------------------------------------------*/
   /* this procedure updates flags on dfbuy.vffqtb01 and*/
   /* dfbuy.vfqtbs01 tables for records that do not have any*/
   /* corresponding direct ship records.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* format key*/
   /* ------------------------------------------------------------*/

  set FBKREC empty; /* Init record*/

  FBKREC.FB8RCTYP = "B"; /* record type*/
  FBKREC.PG1SC4CD = PG1REC.PG1SC4CD; /* sched cd*/
  FBKREC.FB8BUYDT = FB01W00.FB01WBDT;
  FBKREC.FBKFSAFL = "N"; /* fcst acpt fl*/

  FB01S18(); /* open cursor dfbuy.vfqtbs01*/

  FB01W00.FB01WFQC = "N";

  FB01S19(); /* fetch dfbuy.vfqtbs01 cursor*/

  while (FB01W00.FB01WFQC == "N") /* While not end of cursor*/

    set PG2REC empty;

    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FBKREC.SY1STNBR;
    PG2REC.SY2CLRID = FBKREC.SY2CLRID;
    PG2REC.XDMCD = FBKREC.XDMCD;

    FB01S21(); /* select dprodg.vsyclr01 record*/

    if (PG2REC.XPLCD == FB01M010.XPLCD)

      FBKREC.FBKFSAFL = "Y"; /* fcst acpt fl*/
      FB01S16(); /* update vfqtbs01 row*/

      set FB8REC empty; /* Init record*/

      FB8REC.SY1STNBR = FBKREC.SY1STNBR;
      FB8REC.SY2CLRID = FBKREC.SY2CLRID;
      FB8REC.XDMCD = FBKREC.XDMCD;
      FB8REC.FB8BUYDT = FB01W00.FB01WBDT;

      FB01613(); /* Update VFFQTB01 accept flags*/

    end

    FB01S19(); /* fetch dfbuy.vfqtbs01 cursor*/

  end


  FB01S20(); /* close dfbuy.vfqtbs01 cursor*/


end // end FB01614

// Submit FB2881 prod jcl
Function FB01615()

    /* ------------------------------------------------------------*/
    /* Format PROD JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/

    if (FB01T05.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* move required parm fields to working storage and then*/
         /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG2SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01PLCD = FB01W01.XPLCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01PARM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T05.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T05.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T05.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T05.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/
      FB01W00.FB01WIXT = 0; /* Indicate end of table*/
    else
      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/
    end
  end

end // end FB01615

// Submit FB2881 test jcl
Function FB01616()

    /* ------------------------------------------------------------*/
    /* Format test JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/

    if (FB01T06.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* move required parm fields to working storage and then*/
        /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG2SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01PLCD = FB01W01.XPLCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01PARM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T06.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T06.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T06.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T06.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/
      FB01W00.FB01WIXT = 0; /* Indicate end of table*/
    else
      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/
    end
  end

end // end FB01616

// Submit PA1101 prod jcl
Function FB01617()

    /* ------------------------------------------------------------*/
    /* Format PROD JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/

    if (FB01T07.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* move required parm fields to working storage and then*/
         /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG2SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01PLCD = FB01W01.XPLCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01PARM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T07.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T07.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T07.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T07.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/
      FB01W00.FB01WIXT = 0; /* Indicate end of table*/
    else
      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/
    end
  end

end // end FB01617

// Submit PA1101 test jcl
Function FB01618()

    /* ------------------------------------------------------------*/
    /* Format test JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB01W00.FB01WIXT > 0) /* Until end of table*/

    if (FB01T08.TARTYPE[FB01WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* move required parm fields to working storage and then*/
        /* move working storage parm line to the TA6REC.*/
        /* ------------------------------------------------------------*/

      FB01W00.PG2SC4CD = PG1REC.PG1SC4CD;
      FB01W00.FB01PLCD = FB01W01.XPLCD;

      TA6REC.TARJCL[TA6INDEX] = FB01W00.FB01PARM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T08.TARTYPE[FB01WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB01T08.TARJCL[FB01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB01T08.TARTYPE[FB01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

      /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB01T08.TARJCL[FB01WIXT] == "/*EOF") /* End of table*/
      FB01W00.FB01WIXT = 0; /* Indicate end of table*/
    else
      FB01W00.FB01WIXT = FB01W00.FB01WIXT + 1; /* Increment table index*/
    end
  end

end // end FB01618

// Submit jcl to internal reader
Function FB01620()



   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20 /* print to bundl*/
   && TA3REC.TA3RGNID == "03")    
    TA6REC.TA6SUBSW = "S"; /* submit JCL*/
  else
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL to remote*/
  end

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB01M010.XXXPRCNM = "FB01620"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB01M010.XXXPRCNM = "FB01620"; /* module identification*/

  end

  exit stack; /* Exit to display map*/



end // end FB01620

// Set FB-FCTYLD-RUN-FL to 'Y'
Function FB01625()
   /* This proc used to set the FB-FCTYLD-RUN-FL to 'Y' if the*/
   /* scheduler has completed the DRS for equipment or if the*/
   /* scheduler does not handle equipment at all*/

  FB01S40-IO4670-S1(); /* Cursor to select all details from VFSCTL01*/

  FB01S41-IO4670-N1(); /* Fetch the row from VFSCTL01*/

  while (SQLCA.VAGen_SQLCODE == 0)
    FB01W00.FB01WCAF = 0; /* DRS line not finished flag counter*/
    FB01W00.FB01WIX1 = 1;
    FB01W00.EQP-FNSH-FL = "Y"; /* Equipment finish flag*/
    while (FB01W00.FB01WIX1 <= 20)
      if (FBMREC.FBMPCD[FB01WIX1] != " "
       && FBMREC.FBMPCD[FB01WIX1] == "11") /* Prod line code is Eqmt*/
        if (FBMREC.FBMDSLNF[FB01WIX1] == "Y") /* Line is finished*/
          FB01W00.EQP-FNSH-FL = "Y"; /* Equipment line finished*/
        else
          FB01W00.EQP-FNSH-FL = "N"; /* Eqpmt line not finished*/
          FB01W00.FB01WCAF = FB01W00.FB01WCAF + 1;
        end
      end
      FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
    end
    FB01W00.FB01WLCT = 0; /* Prod line counter*/
    FB01W00.FB01WIX1 = 1;
    FB01W00.EQP-FND-FL = "N"; /* Equipment line among prod lines*/
    FB01W00.EQP-ONLY-FL = "N"; /* Equipment is the only line*/
    while (FB01W00.FB01WIX1 <= 20)
      if (FBMREC.FBMPCD[FB01WIX1] != " ")
        FB01W00.FB01WLCT = FB01W00.FB01WLCT + 1;
      end
      if (FBMREC.FBMPCD[FB01WIX1] == "11")
        FB01W00.EQP-FND-FL = "Y";
      end
      FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1;
    end
    if (FB01W00.EQP-FND-FL == "Y"
     && FB01W00.FB01WLCT == 1)
      FB01W00.EQP-ONLY-FL = "Y";
    end
    if (FB01W00.EQP-FNSH-FL == "Y" /* Equipment line is finished*/
     && FB01W00.FB01WCAF == 0      /**/
     && FB01W00.EQP-ONLY-FL != "Y") /* Equipment not the only line*/
      FBMREC.FBMFLRFL = "Y"; /* Set fctyld-run-fl to 'Y'*/
      FB01S11(); /* Update VFSCTL01*/
    end
    FB01S41-IO4670-N1(); /* Fetch next VFSCTL01 row*/
  end
  FB01S42-IO4670-C1(); /* Close VFSCTL01 row*/
end // end FB01625

// open DFCAST.VFFSTY01 cursor
Function FB01S01()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WFSC = "N"; /* Set cursor to no*/



  try
    call "IO3990" ("S4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S01"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S01";
  exit stack;

end // end FB01S01

// Fetch DFCAST.VFFSTY01 row
Function FB01S02()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3990" ("N4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WFSC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S02"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S02";
  exit stack;

end // end FB01S02

// open DFBUY.VDNORD01 cursor
Function FB01S03()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WDNC = "N"; /* Set cursor to no*/



  try
    call "IO4640" ("S5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S03"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S03";
  exit stack;

end // end FB01S03

// Fetch DFBUY.VDNORD01 row
Function FB01S04()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4640" ("N5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WDNC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S04";
  exit stack;

end // end FB01S04

// Close DFBUY.VDNord01 cursor
Function FB01S05()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNord01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4640" ("C5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S05"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S05";
  exit stack;

end // end FB01S05

// Add page to temp storage
Function FB01S06()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FB01W02.FB01WTSL = FB01W00.FB01WTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FB01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FB01W02 empty; /* Temp storage record*/

    FB01W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB01W00.FB01WIXM = 0; /* temp storage line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB01M010.XXXPRCNM = "FB01S06"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FB01M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01S06

// Close DFCAST.VFFSTY01 Cussor
Function FB01S07()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S07"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S07";
  exit stack;

end // end FB01S07

// Obtain temp storage page
Function FB01S08()


   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/

  FB01W02.FB01WTSL = FB01W00.FB01WTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB01W00.FB01WTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FB01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB01M010.XXXPRCNM = "FB01S08"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01S08

// reset application map
Function FB01S09()
  FB01W00.XXXUSER = FB01M010.XXXUSER;
  FB01W00.FB01MBYM = FB01M010.FB01MBYM;
  FB01W00.XPLCD = FB01M010.XPLCD;
  set FB01M010 empty;
  FB01M010.XXXUSER = FB01W00.XXXUSER;
  FB01M010.FB01MBYM = FB01W00.FB01MBYM;
  FB01M010.XPLCD = FB01W00.XPLCD;
  FB01M010.FBMFINFL = FB01W01.FBMFINFL;
  FB01M010.FBMDSLNF = FB01W01.FBMDSLNF;
end // end FB01S09

// Update DFBUY.VDNORD01 row
Function FB01S10()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FBHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4640" ("U ", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      FB01M010.XXXPRCNM = "FB01S10"; /* Process name*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S10 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S10"; /* Process name*/

  exit stack;

end // end FB01S10

// Update DFBUY.VFSCTL01 row
Function FB01S11()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/


  XX0XS01();

  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      FB01M010.XXXPRCNM = "FB0WS11"; /* Process name*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS11 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB0WS11"; /* Process name*/

  exit stack;

end // end FB01S11

// open DFBUY.VFFQTB01 cursor
Function FB01S12()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VFFQTB01*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WFFC = "N"; /* Set cursor to no*/



  try
    call "IO3450" ("S2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S12"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S12";
  exit stack;

end // end FB01S12

// Fetch DFBUY.VFFQTB01 row
Function FB01S13()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3450" ("N2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WFFC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S13"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S13";
  exit stack;

end // end FB01S13

// Close DFBUY.VFFQTB01 cursor
Function FB01S14()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VFFQTB01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3450" ("C2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S14"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S14";
  exit stack;

end // end FB01S14

// Update DFBUY.VFFQTB01 row
Function FB01S15()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FB8REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB8REC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO3450" ("U ", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      FB01M010.XXXPRCNM = "FB01S15"; /* Process name*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S15 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S15"; /* Process name*/

  exit stack;

end // end FB01S15

// Update DFBUY.VFQTBS01 row
Function FB01S16()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      FB01M010.XXXPRCNM = "FB01S16"; /* Process name*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S16 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S16"; /* Process name*/

  exit stack;

end // end FB01S16

// Get current buy month
Function FB01S17()


  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S17"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S17";
  exit stack;


end // end FB01S17

// Select s2 csr DFBUY.VFQTBS01
Function FB01S18()


  try
    call "IO4740" ("S2", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S18"; /* Process name*/
  TA1REC.TA1LOC = "SELECT S2 CSR VFQTBS01  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S18";
  exit stack;

end // end FB01S18

// Fetch s2 csr DFBUY.VFQTBS01
Function FB01S19()


  try
    call "IO4740" ("N2", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WFQC = "Y"; /* end of csr flag*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S19"; /* Process name*/
  TA1REC.TA1LOC = "FETCH S2 CSR VFQTBS01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S19";
  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* replace temp stor page*/
  exit stack;

end // end FB01S19

// Close s2 csr dfbuy.vfqtbs01
Function FB01S20()


  try
    call "IO4740" ("C2", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S20"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE S2 CSR VFQTBS01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S20";
  exit stack;

end // end FB01S20

// Select DPRODG.VSYCLR01 record
Function FB01S21()


  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S21"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01  ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S21";
  exit stack;

end // end FB01S21

// open DFBUY.VDNORD01 cursor
Function FB01S22()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WDNC = "N"; /* Set cursor to no*/



  try
    call "IO4640" ("S5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S22"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S22";
  exit stack;

end // end FB01S22

// Fetch DFBUY.VDNORD01 row
Function FB01S23()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4640" ("N5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WDNC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S23"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S23";
  exit stack;

end // end FB01S23

// Close DFBUY.VDNord01 cursor
Function FB01S24()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4640" ("C5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S24"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S24";
  exit stack;

end // end FB01S24

// Load sum code array
Function FB01S25()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB01S26(); /* declare cursor*/
  FB01W00.FB01WIX1 = 1; /* first row*/

  while (FB01W00.FB01WIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB01S27(); /* fetch row*/
    FB01W00.FB01WIX1 = FB01W00.FB01WIX1 + 1; /* next row*/
  end

  if (FB01W00.FB01WIX1 <= 10)
    FB01S28(); /* close cursor*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  FB01M010.XXXPRCNM = "FB01S25"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB01W00.FB01WRDF = "N"; /* dont request data*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB01S25

// Declare DCORP.VSUMCD01 cursor
Function FB01S26()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "FB01S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB01W00.FB01WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB01S26

// Fetch DCORP.VSUMCD01 row
Function FB01S27()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB01W00.XWH-WHSE-CD[FB01WIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB01M010.XXXPRCNM = "FB01S27"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FB01W00.FB01WRDF = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end

end // end FB01S27

// Close DCORP.FSUMCD01 cursor
Function FB01S28()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB01M010.XXXPRCNM = "FB01S28"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB01M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB01W00.FB01WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB01S28

// determine oa count
Function FB01S30()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB01W00.FB01W-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S30"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S30";
  exit stack;

end // end FB01S30

// determine po counts
Function FB01S31()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB01W00.FB01W-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S31"; /* Process name*/
  TA1REC.TA1LOC = "VPOITM01";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S31";
  exit stack;

end // end FB01S31

// Open join cursor PAWRK & PAHDR
Function FB01S32()

   /* ------------------------------------------------------------*/
   /* Declare cursor for join PAWRK an PAHDR*/
   /* ------------------------------------------------------------*/

  FB01W00.FB01WJFL = "N"; /* Set cursor to no*/

  try
    call "FB1510" ("S2", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S32"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWKR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S32";
  exit stack;

end // end FB01S32

// Fetch JOIN PAWRK AND PAHDR
Function FB01S33()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "FB1510" ("N2", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FB01W00.FB01W-OA-QTY = FBIREC.FBI-COUNT;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WJFL = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

   /* IF EZERT8 EQ '00000000'           /* Successful call*/
    /* AND SQLCA.SQLCODE EQ -911;      /* Resource not available*/
    /* MOVE 19 TO EZEMNO;              /* Indicate not available*/
    /* MOVE 'POST' TO TA1REC.TA1FUNC;  /* Termination function*/
   /* ELSE;*/
    /* MOVE 01 TO EZEMNO;              /* Indicate system error*/
    /* MOVE 'RETN' TO TA1REC.TA1FUNC;  /* Termination function*/
    /* SET FB01M010 PAGE;*/
   /* END;*/

   /* CALL EZEROLLB;*/

   /* MOVE EZERT8 TO TA1REC.TA1MAP;             /* Csp return code*/
   /* MOVE SQLCA.SQLCAREC TO TAEREC.SQLCAREC;   /* Sql comm. area*/
   /* MOVE 'DB2 ' TO TA1REC.TA1TYPE;            /* Type of error*/
   /* MOVE 'FB01S33' TO TA1REC.TA1PGMNM;        /* Process name*/
   /* MOVE 'FETCH ROW               ' TO TA1REC.TA1LOC;*/
   /* MOVE 'DPRODA  ' TO TA1REC.TA1DBASE;       /* Data base name*/
   /* MOVE 'VPAWKR01' TO TA1REC.TA1TBLVU;       /* Table view name*/

   /* CALL TA0020 TA1REC,TAEREC (NOMAPS,NONCSP; /* Error diagnosis routine*/

   /* MOVE FB01W00.FB01WSSP TO FB01W00.FB01WTSP;/* restore temp store page*/
   /* MOVE 'FB01S33' TO FB01M010.XXXPRCNM;*/
   /* EZEFLO;*/

end // end FB01S33

// Close JOIN PAWRK/PAHDR cursor
Function FB01S34()

   /* ------------------------------------------------------------*/
   /* Close cursor for join PAWRK and PAHDR*/
   /* ------------------------------------------------------------*/

  try
    call "FB1510" ("C2", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S34"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S34";
  exit stack;

end // end FB01S34

// OBtain Dfbuy.Vdrsat01 row
Function FB01S35()

  try
    call "VDRSAT01" ("S ", SQLCA, VDRSAT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S35"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDRSAT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01M010.XXXPRCNM = "FB01S35";
  exit stack;



end // end FB01S35

// open DFBUY.VFSCTL01 cursor
Function FB01S40-IO4670-S1()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VFSCTL01*/
   /* ------------------------------------------------------------*/
  try
    call "IO4670" ("S1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S40"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S40";
  exit stack;

end // end FB01S40-IO4670-S1

// Fetch DFBUY.VFSCTL01 row
Function FB01S41-IO4670-N1()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4670" ("N1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB01W00.FB01WDNC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S41"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S41";
  exit stack;

end // end FB01S41-IO4670-N1

// Close DFBUY.VFSCTL01 cursor
Function FB01S42-IO4670-C1()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VFSCTL01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4670" ("C1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB01S42"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB01W00.FB01WTSP = FB01W00.FB01WSSP; /* restore temp store page*/
  FB01M010.XXXPRCNM = "FB01S42";
  exit stack;

end // end FB01S42-IO4670-C1

//*** RECORD=FB01W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB01W00 type basicRecord
  5 * char(568) ; 
    10 FB01WTSL FB01WTSL ; 
    10 FB01WRDF FB01WRDF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB01WTSP FB01WTSP ; 
    10 FB01WSSP FB01WSSP ; 
    10 FB01WFSC FB01WFSC ; 
    10 FB01WDNC FB01WDNC ; 
    10 FB01WFFC FB01WFFC ; 
    10 FB01WFQC FB01WFQC ; 
    10 FB01WKFC FB01WKFC ; 
    10 FB01WSDF FB01WSDF ; 
    10 FB01WP17 FB01WP17 ; 
    10 FB01WPLF FB01WPLF ; 
    10 FB01WCNT FB01WCNT ; 
    10 FB01WCAF FB01WCAF ; 
    10 FBHDSAFL FBHDSAFL ; 
    10 FB01WDWS FB01WDWS ; 
    10 FB01WTOL FB01WTOL ; 
    10 * char(1) ; 
    10 * char(1) ; 
    10 FB01WFDT FB01WFDT ; 
      15 FB01WFCT FB01WFCT ; 
      15 FB01WFYM FB01WFYM ; 
        20 FB01WFYY FB01WFYY ; 
        20 FB01WFMM FB01WFMM ; 
      15 FB01WFDD FB01WFDD ; 
    10 FB01WYMD FB01WYMD ; 
      15 FB01WYY FB01WYY ; 
      15 FB01WMM FB01WMM ; 
      15 FB01WDD FB01WDD ; 
    10 FB01WBDT FB01WBDT ; 
      15 FB01WBCC FB01WBCC ; 
      15 FB01WBYM FB01WBYM ; 
        20 FB01WBYY FB01WBYY ; 
        20 FB01WBMM FB01WBMM ; 
      15 FB01WBDD FB01WBDD ; 
    10 FB01WBD1 FB01WBD1 ; 
      15 FB01WBCY FB01WBCY ; 
        20 FB01WBC1 FB01WBC1 ; 
        20 FB01WBY1 FB01WBY1 ; 
      15 FB01WMD1 FB01WMD1 ; 
    10 FB01WDRD FB01WDRD ; 
      15 FB01WDYY FB01WDYY ; 
      15 FB01WDMM FB01WDMM ; 
      15 FB01WDDD FB01WDDD ; 
    10 FB01WSDT FB01WSDT ; 
      15 FB01WSCY FB01WSCY ; 
        20 FB01WSCC FB01WSCC ; 
        20 FB01WSYY FB01WSYY ; 
      15 FB01WSMM FB01WSMM ; 
      15 FB01WSDD FB01WSDD ; 
    10 TA1TBLKE TA1TBLKE ; 
    10 FB01WIXM FB01WIXM ; 
    10 FB01WIXT FB01WIXT ; 
    10 FB01WIX1 FB01WIX1 ; 
    10 FB01WCIX1 FB01WCIX1 ; 
    10 FB01WNQT FB01WNQT ; 
    10 FB01WDCT FB01WDCT ; 
    10 FB01WDC1 FB01WDC1 ; 
    10 FB01WDCF FB01WDCF ; 
    10 FB01WDC3 FB01WDC3 ; 
    10 FB01W-TOT-PREADVISE-QTY FB01W-TOT-PREADVISE-QTY ; 
    10 XWHCD XWHCD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
    10 FB01WDRS FB01WDRS ; 
    10 FB01WMAX FB01WMAX ; 
    10 FB01WWF1 FB01WWF1 ; 
    10 * char(1) ; 
    10 FB01WPRM FB01WPRM ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 FB01WPBD FB01WPBD ; 
      15 XPLCD XPLCD ; 
      15 XPCCD XPCCD ; 
      15 * char(70) ; 
    10 FB01PARM FB01PARM ; 
      15 PG2SC4CD PG2SC4CD ; 
      15 FB01PLCD FB01PLCD ; 
      15 * char(76) ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 XXXUSER XXXUSER ; 
    10 FB01MBYM FB01MBYM ; 
    10 FB01WJCL FB01WJCL ; 
      15 * char(17) ; 
      15 FB01WRCL FB01WRCL ; 
      15 * char(54) ; 
    10 FB01W-ORD-ADJ-BUY-DT FB01W-ORD-ADJ-BUY-DT ; 
      15 FB01W-ORD-ADJ-BUY-MO FB01W-ORD-ADJ-BUY-MO ; 
      15 FB01W-ORD-ADJ-BUY-DD FB01W-ORD-ADJ-BUY-DD ; 
    10 FB01W-OA-COUNT FB01W-OA-COUNT ; 
    10 FB01W-PO-COUNT FB01W-PO-COUNT ; 
    10 FB01W-TMP-DT FB01W-TMP-DT ; 
      15 FB01W-TMP-CC FB01W-TMP-CC ; 
      15 FB01W-TMP-YY FB01W-TMP-YY ; 
      15 FB01W-TMP-MM FB01W-TMP-MM ; 
      15 FB01W-TMP-DD FB01W-TMP-DD ; 
    10 FB01W-CHK-DT FB01W-CHK-DT ; 
      15 FB01W-CHK-CY FB01W-CHK-CY ; 
        20 FB01W-CHK-CC FB01W-CHK-CC ; 
        20 FB01W-CHK-YY FB01W-CHK-YY ; 
      15 FB01W-CHK-MM FB01W-CHK-MM ; 
      15 FB01W-CHK-DM FB01W-CHK-DM ; 
    10 FB01W-CHK-DTE FB01W-CHK-DTE ; 
    10 FB01W-DIVERT-HOLD FB01W-DIVERT-HOLD ; 
    10 FB01W0FBD FB01W0FBD ; 
      15 FB01W0BLM FB01W0BLM ; 
        20 FB01W0CY FB01W0CY ; 
          25 FB01W0CC FB01W0CC ; 
          25 FB01W0YY FB01W0YY ; 
        20 FB01W0MM FB01W0MM ; 
      15 FB01W0DD FB01W0DD ; 
    10 FB01W1BLM FB01W1BLM ; 
      15 FB01W1CY FB01W1CY ; 
        20 FB01W1CC FB01W1CC ; 
        20 FB01W1YY FB01W1YY ; 
      15 FB01W1MM FB01W1MM ; 
    10 FB01W2BLM FB01W2BLM ; 
      15 FB01W2CC FB01W2CC ; 
      15 FB01W2CY FB01W2CY ; 
        20 FB01W2YY FB01W2YY ; 
        20 FB01W2MM FB01W2MM ; 
    10 FB01WPPOM FB01WPPOM ; 
      15 FB01WPCYM FB01WPCYM ; 
        20 FB01WPCCM FB01WPCCM ; 
        20 FB01WPYYM FB01WPYYM ; 
      15 FB01WPMMO FB01WPMMO ; 
      15 FB01WPMMD FB01WPMMD ; 
    10 FB01W3POM FB01W3POM ; 
      15 FB01W3CYM FB01W3CYM ; 
        20 FB01W3CCM FB01W3CCM ; 
        20 FB01W3YYM FB01W3YYM ; 
      15 FB01W3MMO FB01W3MMO ; 
      15 FB01W3MMD FB01W3MMD ; 
    10 FB01W4OAD FB01W4OAD ; 
      15 FB01W4OAC FB01W4OAC ; 
      15 FB01W4OAY FB01W4OAY ; 
      15 FB01W4OAM FB01W4OAM ; 
    10 FB01W5RTA FB01W5RTA ; 
      15 FB01W5RCY FB01W5RCY ; 
      15 FB01W5RMM FB01W5RMM ; 
      15 FB01W5RDD FB01W5RDD ; 
    10 FB01WJFL FB01WJFL ; 
    10 FB01WPFL FB01WPFL ; 
    10 FB01Y2KFL FB01Y2KFL ; 
    10 FB01W-OA-QTY FB01W-OA-QTY ; 
    10 FB01W-OA-SUM FB01W-OA-SUM ; 
    10 FB01W-PRIOR-PO FB01W-PRIOR-PO ; 
    10 FB01W-PRIOR-BL FB01W-PRIOR-BL ; 
    10 FB01W-PRIOR-04 FB01W-PRIOR-04 ; 
    10 FB01W-PRIOR-07 FB01W-PRIOR-07 ; 
    10 FB01W-PRIOR-XX FB01W-PRIOR-XX ; 
    10 EQP-FNSH-FL EQP-FNSH-FL ; 
    10 EQP-FND-FL EQP-FND-FL ; 
    10 EQP-ONLY-FL EQP-ONLY-FL ; 
    10 FB01WLCT FB01WLCT ; 
end // end FB01W00

//*** RECORD=FB01W01 ****
// Fb0qm010 map heading storage record
// ***********************
Record FB01W01 type basicRecord
  10 XXXUSER XXXUSER ; 
  10 FB01WBYM FB01WBYM ; 
  10 XPLCD XPLCD ; 
  10 XPLSDESC XPLSDESC ; 
  10 XPCCD XPCCD ; 
  10 XPCSDESC XPCSDESC ; 
  10 FBMFINFL FBMFINFL ; 
  10 FBMDSLNF FBMDSLNF ; 
  10 * char(1) ; 
end // end FB01W01

//*** RECORD=FB01W02 ****
// FB0W temporary storage detail record
// ***********************
Record FB01W02 type basicRecord
  5 FB01W02G FB01W02G ; 
    10 FB01WTSL FB01WTSL ; 
    10 FB01W02R FB01W02R [14] ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 FB01WDCT FB01WDCT ; 
      15 FB01WDC1 FB01WDC1 ; 
      15 FB01WDCF FB01WDCF ; 
      15 FB01WDC3 FB01WDC3 ; 
      15 FB01W-TOT-PREADVISE-QTY FB01W-TOT-PREADVISE-QTY ; 
      15 FB8FTQTB FB8FTQTB ; 
      15 FB01WACF FB01WACF ; 
      15 PT3YYMM PT3YYMM ; 
      15 XWHCD XWHCD ; 
      15 FB01WPBL FB01WPBL ; 
      15 FB01WPOQ FB01WPOQ ; 
      15 FB01WOAQ FB01WOAQ ; 
      15 FB01MPBL FB01MPBL ; 
      15 FB01MPOQ FB01MPOQ ; 
      15 FB01MOAQ FB01MOAQ ; 
end // end FB01W02

//*** RECORD=FB01W03 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the style, color,
// dim, and sales order for special "count" function in FB1510.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement. FB1510 is a Footwear Buy
// IO Module.
// 
//    EXAMPLE:
//    --------
//    CALL FB1510 FBIREC,SQLCA (NOMAPS,NONCSP,REPLY;
// 
// ***********************
Record FB01W03 type basicRecord
  5 FB01W-FBI-GROUP FB01W-FBI-GROUP ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FB01W-PA-ORD-ADJ-BUY-MO FB01W-PA-ORD-ADJ-BUY-MO ; 
    10 XWHCD XWHCD ; 
    10 FB01W-COUNT FB01W-COUNT ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB01W-PENDING-ORD-ADJ-FL FB01W-PENDING-ORD-ADJ-FL ; 
    10 FB01W-CURRENT-DT FB01W-CURRENT-DT ; 
    10 FB01W-CURRENT-HHMMSS FB01W-CURRENT-HHMMSS ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB01W-PRDCUID FB01W-PRDCUID ; 
    10 FB01W-XQAQALCD FB01W-XQAQALCD ; 
    10 FB01W-XUMUOMCD FB01W-XUMUOMCD ; 
    10 FB01W-PKGTYPCD FB01W-PKGTYPCD ; 
    10 FB01W-DLVRY-DT FB01W-DLVRY-DT ; 
end // end FB01W03

//*** RECORD=FB01W04 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the style, color,
// dim, and sales order for special "count" function in FB1510.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement. FB1510 is a Footwear Buy
// IO Module.
// 
//    EXAMPLE:
//    --------
//    CALL FB1510 FBIREC,SQLCA (NOMAPS,NONCSP,REPLY;
// 
// ***********************
Record FB01W04 type basicRecord
  5 FB01WGRP2 FB01WGRP2 ; 
    10 FB01WBYM FB01WBYM ; 
    10 XXXUSER XXXUSER ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FB01WTSP FB01WTSP ; 
    10 TA5TSQIX1 TA5TSQIX1 ; 
    10 TA5TSQIX2 TA5TSQIX2 ; 
    10 * char(2020) ; // FB_BUY_DT
end // end FB01W04

//*** RECORD=FB01W05 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the style, color,
// dim, and sales order for special "count" function in FB1510.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement. FB1510 is a Footwear Buy
// IO Module.
// 
//    EXAMPLE:
//    --------
//    CALL FB1510 FBIREC,SQLCA (NOMAPS,NONCSP,REPLY;
// 
// ***********************
Record FB01W05 type basicRecord
  5 FB01WGRP2 FB01WGRP2 ; 
    10 FB01WGRP3 FB01WGRP3 [50] ; 
      15 FB01WAPPLN FB01WAPPLN ; 
      15 FB01WAPPLD FB01WAPPLD ; 
      15 * char(8) ; 
    10 * char(48) ; 
end // end FB01W05

//*** RECORD=FB01W07 ****
// ------------------------------------------------------------
// First parameter passed to the I/O module when selecting rows
// from the Base By Month table.
// ------------------------------------------------------------
// ***********************
Record FB01W07 type basicRecord
  10 FB01WFUN FB01WFUN ; 
  10 XWHCD XWHCD [2] ; 
end // end FB01W07

//*** RECORD=FBPREC ****
// *************** FOOTWEAR FACTORY LOAD/BUY SYSTEM ***********
// *********** direct ship/nil order extract detail  **********
// 
// DB2 TABLE VIEW:     Vdnord01
// 
// COPYLIB MEMBER:     dcl00751
// 
// I/O MODULE:         io4640
// 
// KEY TO DB2 TABLE    N/A
// 
// MAINTENANCE LOG:
// 
// CONTROL     DATE    NAME     COMMENT
// --------  --------  ------   -------------------------------
//           08/29/89  JMCLAU   NEW RECORD DEFINITION.
//           02/15/90  JWOOD    RENAMED XSDCD TO PC2INSEG AS
//                              PER MCHRIS
//  FB312    05/14/93  LDELUH   Add fb-red-bla-fl field.
// **********************
Record FBPREC type basicRecord
  5 FBPGROUP FBPGROUP ; 
    10 DRS-TASK DRS-TASK ; 
    10 DRSR-CNT DRSR-CNT ; 
end // end FBPREC

// XPL_PROD_LN_CD
DataItem DRS-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem DRSR-CNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EQUIPMENT LINE FOUND FLAG
DataItem EQP-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EQUIPMENT DRS FINISH INDICATOR
DataItem EQP-FNSH-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EQUIPMENT LINE ONLY FLAG
DataItem EQP-ONLY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01MBYM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// O/A Amount
DataItem FB01MOAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Prior Bottom Line Amount
DataItem FB01MPBL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO Due Amount
DataItem FB01MPOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01PLCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHECK BUY CENTURY
DataItem FB01W-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB01W-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHECK BUY DAY
DataItem FB01W-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHECK BUY DATE
DataItem FB01W-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BINARY CHECK DATE
DataItem FB01W-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHECK BUY MONTH
DataItem FB01W-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHECK BUY YEAR
DataItem FB01W-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// I/O MODULE COUNTER
DataItem FB01W-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT DATE
DataItem FB01W-CURRENT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT TIME HHMMSS
DataItem FB01W-CURRENT-HHMMSS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BINARY CHECK DATE
DataItem FB01W-DIVERT-HOLD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DELIVERY DATE
DataItem FB01W-DLVRY-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FB1510 group
DataItem FB01W-FBI-GROUP char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OA DIVERT COUNT
DataItem FB01W-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OA qty
DataItem FB01W-OA-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OA sum all qty
DataItem FB01W-OA-SUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adj buy day
DataItem FB01W-ORD-ADJ-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adj buy ccyymmdd
DataItem FB01W-ORD-ADJ-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adj buy ccyymm
DataItem FB01W-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PA-ORD-ADJ-BUY-MO
DataItem FB01W-PA-ORD-ADJ-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PENDING O/A FLAG
DataItem FB01W-PENDING-ORD-ADJ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PKG TYP CD
DataItem FB01W-PKGTYPCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PO DIVERT COUNT
DataItem FB01W-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PCUID
DataItem FB01W-PRDCUID char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// prior b/l warehouse 04 only
DataItem FB01W-PRIOR-04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior b/l warehouse 07 only
DataItem FB01W-PRIOR-07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior b/l amount warehouse
DataItem FB01W-PRIOR-BL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior po amount warehouse only
DataItem FB01W-PRIOR-PO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior b/l hold amount
DataItem FB01W-PRIOR-XX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEMP BUY CENTURY
DataItem FB01W-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEMP BUY DAY
DataItem FB01W-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEMP BUY DATE
DataItem FB01W-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEMP BUY MONTH
DataItem FB01W-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TEMP BUY YEAR
DataItem FB01W-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total preadvise qty
DataItem FB01W-TOT-PREADVISE-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// QUAL CD
DataItem FB01W-XQAQALCD char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// UOM CD
DataItem FB01W-XUMUOMCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01W02G char(1278)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01W02R char(91)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear buy date ccyymmdd
DataItem FB01W0BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W0CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W0CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem FB01W0DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holding tank date
DataItem FB01W0FBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W0MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01W0YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line month ccyymm
DataItem FB01W1BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W1CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy
DataItem FB01W1CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01W1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line month ccyymm
DataItem FB01W2BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W2CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy
DataItem FB01W2CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W2MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01W2YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W3CCM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W3CYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W3MMD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W3MMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po month ccyymmmm
DataItem FB01W3POM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01W3YYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W4OAC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// oa adjustment date
DataItem FB01W4OAD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W4OAM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01W4OAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01W5RCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem FB01W5RDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01W5RMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RTA date
DataItem FB01W5RTA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Accept flag
DataItem FB01WACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01WAPPLD char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem FB01WAPPLN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem FB01WBC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy century
DataItem FB01WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyy
DataItem FB01WBCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holding tank date
DataItem FB01WBD1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB01WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB01WBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB01WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem FB01WBY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date yymm
DataItem FB01WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FB01WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Count 'n' accept flags
DataItem FB01WCAF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 1
DataItem FB01WCIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select field counter
DataItem FB01WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DC1 DRS total - CURRENT BUY
DataItem FB01WDC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DC3 DRS total
DataItem FB01WDC3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// drs FUTURE ORDERS
DataItem FB01WDCF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SELECTED DRS TOTAL
DataItem FB01WDCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FB01WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA day
DataItem FB01WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA month
DataItem FB01WDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Direct ship/Nil cursor flag
DataItem FB01WDNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat detail RTA date
DataItem FB01WDRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Direct ship (no warehouse)
DataItem FB01WDRS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// domestic warehouse flag
DataItem FB01WDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail RTA year
DataItem FB01WDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem FB01WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB01WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB01WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast detail cursor flag
DataItem FB01WFFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem FB01WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast qtb summary csr flag
DataItem FB01WFQC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast style cursor flag
DataItem FB01WFSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function for DB2 I/O module
DataItem FB01WFUN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB01WFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem FB01WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB1510 group
DataItem FB01WGRP2 char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01WGRP3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB01WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB01WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB01WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Jcl image to change class
DataItem FB01WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// join pawrk and pahdr oa flag
DataItem FB01WJFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key fields changed flag
DataItem FB01WKFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT LINE COUNTER
DataItem FB01WLCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max lines per map
DataItem FB01WMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmdd
DataItem FB01WMD1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FB01WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dir ship/nil qty to buy
DataItem FB01WNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SELECTED DRS TOTAL
DataItem FB01WOAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF 17 flag
DataItem FB01WP17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm buy date
DataItem FB01WPBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SELECTED DRS TOTAL
DataItem FB01WPBL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01WPCCM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem FB01WPCYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po flag
DataItem FB01WPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product line found flag
DataItem FB01WPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem FB01WPMMD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem FB01WPMMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SELECTED DRS TOTAL
DataItem FB01WPOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po month ccyymmmm
DataItem FB01WPPOM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB01WPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem FB01WPYYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Report class
DataItem FB01WRCL char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB01WRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB01WSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB01WSCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System day
DataItem FB01WSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style data found flag
DataItem FB01WSDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// System date
DataItem FB01WSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System month
DataItem FB01WSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save temp storage page nbr
DataItem FB01WSSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System year
DataItem FB01WSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy tolerance
DataItem FB01WTOL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FB01WTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB01WTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FB01WWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMDD Date
DataItem FB01WYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FB01WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po flag
DataItem FB01Y2KFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// drs/nil order extract group
DataItem FBPGROUP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG2SC4CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

