package fb0e;

import corpcom2.XX0XW01;
import corpcom3.XPFB001;
import corpcom4.XSEXIT;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XDVCD1;
import corpx1.XDVDESC;
import corpx1.XDVTBL;
import corpx1.XGPCD;
import corpx1.XPCTBL;
import corpx1.XPRTBL;
import corpx1.XSUTBL;
import corpx2.XPCCD;
import corpx2.XPCKEY;
import corpx2.XPCSDESC;
import corpx2.XPRABRV;
import corpx2.XPRCD;
import corpx2.XSUABRV;
import corpx2.XSUCD;
import corpy2.YPPCD;
import corpy2.YPPDESC;
import corpy2.YPPTBL;
import corpy2.YSMXOT;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB0JW02;
import fb.common.FB0JW03;
import fb.common.FB0JW04;
import fb.common.FB0JW05;
import fb.common.FB1CMNT;
import fb.common.FB1INCDS;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB3REC;
import fb.common.FB4CRVNB;
import fb.common.FB4KEY;
import fb.common.FB4REC;
import fb.common.FB4STDFL;
import fb.common.FB5REC;
import fb.common.FB6REC;
import fb.common.FBWREC;
import fb.common.FBZREC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4IDDSC;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FB0E ****
// This application assigns the current curve to one or more
// products.
// 
// If the 'from' application is within the Footwear Buy system,
// a key will have been passed.  You can only get to this
// screen from the 'size percent' 'region percent' and 'copy
// a region' screen.  You cannot transfer from outside the
// footwear buy system as no key will have been passed.
// 
// If an error has occurred while assigning the curve, the
// invalid product is highlighted and the user can correct or
// delete the product.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/16/89  wdishm  New application.
//          02/28/91  pmainw  add the capability of making
//                            the newly assigned curve the
//                            standard for that product.
// FB-281   06/17/92  pmainw  Handle the combination of size
//                            scales '01' and '13'.
// FB-292   08/04/92  LDELUH  Correct duplicate curve error
//                            when FP9/PF13.
//          12/21/92  pmainw  Correct duplicate curve error
//                            when FP9/PF13.
// FIX      03/22/93  ldeluh  Fix bug when have combo of size
//                            scales 01 & 13's.  Not resetting
//                            after re-align in 600 processing.
//          10/26/94  jalle1  After insert of each vcurve01
//                            record, check to make sure we
//                            still do not have duplicates.
//                            Abend if duplicate found.
// YR2000   12/03/97  rgilli  Y2K MODIFICATIONS MADE TO:
//                            Re-generate to include the new
//                            version of XX0XS01.
// *********************
Program FB0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0EW00 FB0EW00; // record
  FB0EW01 FB0EW01; // record
  FB0EW02 FB0EW02; // record
  FB0EW03 FB0EW03; // record
  FB0EW04 FB0EW04; // record
  FB0EW05 FB0EW05; // record
  FB0JW02 FB0JW02; // record
  FB0JW03 FB0JW03; // record
  FB0JW04 FB0JW04; // record
  FB0JW05 FB0JW05; // record
  FB1REC FB1REC; // record
  FB2REC FB2REC; // record
  FB3REC FB3REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FB6REC FB6REC; // record
  FBWREC FBWREC; // record
  FBZREC FBZREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use YPPTBL {deleteAfterUse = yes}; // table
  
  use FB0EM.FB0EM010 {
	pfKeyEquate = no
  };
  

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FB0EM010 initial; /* M010 input/output*/
    set FB0EW00 empty; /* working storage record*/
    set FB0EW01 empty; /* M010 display storagefor heading data*/
    set FB0EW02 empty; /* m010 display storage for detail data*/
    set FB0EW03 empty; /* m010 display storage for detail data*/
    set FB0EW04 empty; /* storage for vseldt01*/
    set FB0EW05 empty; /* storage for vselst01*/
    set FB0JW02 empty;
    set FB0JW03 empty;
    set FB0JW04 empty;
    set FB0JW05 empty;
    set FB4REC empty; /* vcurve01 record*/
    set FB3REC empty; /* vselhd01 record*/
    set FB6REC empty; /* vselst01 record*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    FB0EW00.FB0EWTSL = 644; /* Temporary storage page length*/
    FB0EW00.FB0EWIVD = "N"; /* invalid data flag*/
    move "N" to FB0EW02.FB0EWIVS[1] for all; /* invalid size flag*/
    move "N" to FB0EW03.FB0EWIVS[1] for all; /* invalid size flag*/
    FB0EW00.FB0EW-DUP-STD-FL = "N"; /* Duplicate standard flag*/
    ;
     /* ------------------------------------------------------------*/
     /* Identify the type of processing and set up the appropriate*/
     /* working storage records.*/
     /* ------------------------------------------------------------*/
    ;
    if (FBWREC.XGPCD != "  "        /* gen product class*/
     && FBWREC.SY1STNBR != "      " /* style number*/
     && FBWREC.SY2CLRID != "   "    /* color*/
     && FBWREC.XDMCD != "  "        /* dimension*/
     && FBWREC.XQACD != "  "        /* quality*/
     && FBWREC.PC2INSEG != " "      /* spec difference*/
     && FBWREC.XSACD != "  "        /* shade*/
     && FBWREC.XPGCD != "  "        /* package type*/
     && FBWREC.XUMCD != "  "        /* unit of measure*/
     && FBWREC.FB1INSEQ != 0        /* fb-intrn-seq-nbr*/
     && FBWREC.FBWFILL != " "       /* area passed from fb0j*/
     && COMMAREA.CAFROMAP == "FB0J") /* comming from 'size percemt maint'*/
      FB0EW00.FB0EWPSW = "IP"; /* invalid product curve*/
      FB0EW00.FB0EWDSW = "Y"; /* display data switch*/
      FB0EW00.FB0EWFRJ = "Y"; /* coming from fb0j flag*/
      FB0JW02.FB0JWGR0 = FBWREC.FBWFILL; /* area passed from fb0j*/
    else
      if (FBWREC.XGPCD == "  "        /* gen product class*/
       && FBWREC.SY1STNBR == "      " /* style number*/
       && FBWREC.SY2CLRID == "   "    /* color*/
       && FBWREC.XDMCD == "  "        /* dimension*/
       && FBWREC.XQACD == "  "        /* quality*/
       && FBWREC.PC2INSEG == "  "     /* spec difference*/
       && FBWREC.XSACD == "  "        /* shade*/
       && FBWREC.XPGCD == "  "        /* package type*/
       && FBWREC.XUMCD == "  "        /* unit of measure*/
       && FBWREC.FB1INSEQ != 0        /* fb-intrn-seq-nbr*/
       && FBWREC.FBWFILL != " "       /* area passed from fb0j*/
       && COMMAREA.CAFROMAP == "FB0J") /* comming from 'size percent maint'*/
        FB0EW00.FB0EWPSW = "IU"; /* invalid user curve*/
        FB0EW00.FB0EWDSW = "Y"; /* display data switch*/
        FB0EW00.FB0EWFRJ = "Y"; /* coming from fb0j flag*/
        FB0JW02.FB0JWGR0 = FBWREC.FBWFILL; /* area passed from fb0e*/
      else
        if (FBWREC.XGPCD != "  "        /* gen product class*/
         && FBWREC.SY1STNBR != "      " /* style number*/
         && FBWREC.SY2CLRID != "   "    /* color*/
         && FBWREC.XDMCD != "  "        /* dimension*/
         && FBWREC.XQACD != "  "        /* quality*/
         && FBWREC.PC2INSEG != "  "     /* spec difference*/
         && FBWREC.XSACD != "  "        /* shade*/
         && FBWREC.XPGCD != "  "        /* package type*/
         && FBWREC.XUMCD != "  "        /* unit of measure*/
         && FBWREC.FB1INSEQ != 0)       /* fb-intrn-seq-nbr*/
          FB0EW00.FB0EWPSW = "DP"; /* display product curve*/
          FB0EW00.FB0EWDSW = "Y"; /* display data switch*/
        else
          if (FBWREC.XGPCD == "  "        /* gen product class*/
           && FBWREC.SY1STNBR == "      " /* style number*/
           && FBWREC.SY2CLRID == "   "    /* color*/
           && FBWREC.XDMCD == "  "        /* dimension*/
           && FBWREC.XQACD == "  "        /* quality*/
           && FBWREC.PC2INSEG == "  "     /* spec difference*/
           && FBWREC.XSACD == "  "        /* shade*/
           && FBWREC.XPGCD == "  "        /* package type*/
           && FBWREC.XUMCD == "  "        /* unit of measure*/
           && FBWREC.FB1INSEQ != 0)       /* fb-intrn-seq-nbr*/
            FB0EW00.FB0EWPSW = "DU"; /* display user curve*/
            FB0EW00.FB0EWDSW = "Y"; /* display data switch*/
          else
            FB0EW00.FB0EWPSW = "NO"; /* nothing to display*/
            FB0EW00.FB0EWDSW = "N"; /* display data switch*/
            converseLib.validationFailed(42); /* No data to display*/
          end
        end
      end
    end
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0E001; /* Converse the main process*/
    ;
    FB0E001: FB0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0E001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FB0E

// Main process - Assign curves
Function FB0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0E100(); /* Obtain the data to display*/

  FB0E200(); /* Format and display the map*/

  FB0E300(); /* Check attention identifier*/
  ;
  FB0E400(); /* Reset fields to normal intensity*/
  ;
  FB0E500(); /* Verify the entered data*/
  ;
  FB0E600(); /* Process valid input request*/
  ;
  ;
end // end FB0E001

// Obtain the data to display
Function FB0E100()
   /* ------------------------------------------------------------*/
   /* If an error was found or no data was requested return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWDSW == "N") /* data not requested*/
    return;
  end
  ;
  if (converseVar.validationMsgNum == 0  /* No error found*/
   || converseVar.validationMsgNum == 69 /* Update partially successful*/
   || converseVar.validationMsgNum == 74 /* Invalid sizes - no updates*/
   || converseVar.validationMsgNum == 32) /* Update completely successful*/
      /* next sentence*/
  else
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set up display data according to processing type.*/
   /* ------------------------------------------------------------*/
  ;
  FB0E110(); /* Purge temporary storage*/
  ;
  FB0E120(); /* Get selection criteria*/
  ;
  FB0E130(); /* Get all rows for vcurve01*/
  ;
  ;
  if (FB0EW00.FB0EWPSW == "IP" /* invalid product curve*/
   || FB0EW00.FB0EWPSW == "IU") /* invalid user curve*/
    ;
    FB0E140(); /* Load invalid data*/
    ;
  else
    ;
    FB0E150();
                                   /* Load input lines to temporary storage*/
    ;
  end
  ;
  FB0EW00.FB0EWDSW = "N"; /* display data switch*/
end // end FB0E100

// Purge temporary storage
Function FB0E110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0EW02 empty; /* M010 detail display storage*/
  set TA5REC empty; /* temporary storage record*/
  ;
  ;
  FB0EW00.TA5TSQIX = 0; /* Highest page number*/
  FB0EW00.FB0EWDBP = 0; /* Last page of database data*/
  FB0EW00.FB0EWDBL = 0; /* Last line of database data*/
  FB0EW00.FB0EWTSP = 1; /* Increment and decrement page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FB0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0EM010.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E110

// Get selection criteria
Function FB0E120()
   /* ------------------------------------------------------------*/
   /* This process will do a select on vselhd01.*/
   /* A not found condition on vselhd01 will be fatal.*/
  ;
   /* Next this process retrieves the available need dates and*/
   /* order/type/group from the vseldt01 records. A not found*/
   /* condition on vseldt01 will be fatal.*/
  ;
   /* This process will then do a select on vselcg01.*/
   /* A not found condition on vselcb01 is ok.*/
  ;
   /* If display product or user obtain the 'from' curve*/
   /* data from the vcurve01 records.  If invalid product*/
   /* or user data use the curve data passed by fb0j for*/
   /* the from curve.*/
  ;
   /* Csp tables are accessed to obtain the descriptions for*/
   /* the map heading codes.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0E121(); /* Get vselhd01 row*/
  ;
  FB0E122(); /* Get need dates and order type group*/
  ;
  FB0E123(); /* Get vselcg01 row*/
  ;
  FB0E160(); /* Get vselst01 rows*/
  ;
  if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
   || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
    FB0EW01.FB0EWCID = "CURVE NBR";
  else
    FB0EW01.FB0EWCID = "DUMMY NBR";
  end
  ;
   /* ------------------------------------------------------------*/
   /* If display product or user data, get the 'from' curve for*/
   /* the warehouses from vcurve01 data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
   || FB0EW00.FB0EWPSW == "DU") /* Display user*/
    ;
    FB0E124(); /* Select set for vcurve01*/
    ;
    ;
    FB0EW00.FB0EWWHS = 1; /* Initialize warehouse count*/
    ;
    while (FB0EW00.FB0EWCCF != "Y" /* While not end of set and*/
     && FB0EW00.FB0EWWHS <= 3) /* no more than 3 warehouses*/
      ;
      FB0E125(); /* Select next vcurve01*/
      ;
      ;
    end
    if (FB0EW00.FB0EWWHS == 0)
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "NO CURVE DATA FOR ANY WAREHOUSE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = "120"; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      COMMAREA.CATOAP = "FY0M"; /* To application*/
      ;
      XSEXIT(); /* Exit to another application*/
      FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
    end
    ;
    FB0E126(); /* Close vcurve01 set*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if invalid product or user data move the curve data from*/
   /* the fb0jw02 record to the corresponding warehouse records.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWPSW == "IP" /* Invalid product or*/
   || FB0EW00.FB0EWPSW == "IU") /* Invalid user data*/
    if (FB0EW00.FB0EWIVD != "Y") /* redisplaying invalid data*/
      FB0JW03.FB0JWGRP = FB0JW02.FB0JWGP1; /* warehouse 1*/
      FB0JW04.FB0JWGRP = FB0JW02.FB0JWGP2; /* warehouse 2*/
      FB0JW05.FB0JWGRP = FB0JW02.FB0JWGP3; /* warehouse 3*/
    end
    ;
  end
  ;
  ;
  FB0E127(); /* Get table descriptions*/
  ;
end // end FB0E120

// Get vselhd01 row
Function FB0E121()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and record key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FB1REC empty; /* Clear row storage area*/
  ;
  FB1REC.FB1INSEQ = FBWREC.FB1INSEQ; /* internal seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EW01.FB1CMNT = FB1REC.FB1CMNT; /* Comments*/
      FB0EW01.FB1INCDS = FB1REC.FB1INCDS;
      FB0EW01.XDVCD = FB1REC.XDVCD; /* Division code*/
      if (FB0EW00.FB0EWPSW == "IU" /* invalid user curve*/
       || FB0EW00.FB0EWPSW == "DU") /* display user curve*/
        FB0EW01.FB0EWCNB = FB1REC.FB1DUMNB; /* Map curve number*/
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* if data not found abort the applicaton otherwiseindicated*/
   /* that a system error has occured*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "121"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'Resources unavailabe'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(11); /* 'Record not on database'*/
      else
        converseLib.validationFailed(01); /* 'error - please notify programming'*/
      end
    end
    ;
  end
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VSELHD01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E121

// GET vseldt01 data
Function FB0E122()
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0ES01(); /* ; Open cursor for vseldt01*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the first vseldt01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX3 = 1;
  ;
  FB0ES02(); /* Get first vseldt01 row*/
  ;
   /* ------------------------------------------------------------*/
   /* if there are no rows in the set it is a fatal error.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWDCF == "Y") /* end of cursor on first fetch*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "NO VSELDT01 DATA    ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "122"; /* Program number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    COMMAREA.CATOAP = "FY0M"; /* To application*/
    XSEXIT();
    FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* The map can display only two sets of need dates,*/
   /* consequently only two sets of dates will be retrieved.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWDTC = 0; /* Initialize date counter*/
  FB0EW00.FB0EWIX1 = 0; /* Initialize index (moves date to map)*/
  FB0EW00.FB0EWIX2 = 0; /* Initialize index (moves order/type/*/
                                   /* group code to map)*/
  ;
  ;
  while (FB0EW00.FB0EWDCF != "Y" /* Not end of set*/
   && FB0EW00.FB0EWDTC < 2) /* and no more than two dates retrieved*/

    FB0ES03(); /* Get need dates*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vseldt01 set*/
   /* ------------------------------------------------------------*/
  FB0ES04(); /* Close cursor for vseldt01*/
end // end FB0E122

// get vselcg01 row
Function FB0E123()
   /* ------------------------------------------------------------*/
   /* Initialize the storage area and record key.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FB2REC empty; /* Clear row storage area*/
  ;
  FB2REC.FB1INSEQ = FBWREC.FB1INSEQ; /* Internal seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3050" ("S ", SQLCA, FB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, or no data return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0EW01.XPRCD = FB2REC.XPRCD; /* Product type code*/
      FB0EW01.XPCCD = FB2REC.XPCCD; /* Product category code*/
      FB0EW01.XSUCD = FB2REC.XSUCD; /* Product silhouette code*/
      FB0EW01.YPPCD = FB2REC.YPPCD; /* Price point code*/
      return; /* Return to previous process*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        ;
        return; /* Return to previous process*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "123"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VSELCG01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELCG01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB2REC.FB2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E123

// Select set vcurve01
Function FB0E124()
  FB0EW00.FB0EWCCF = "N"; /* End of vcurve01 flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the product curve key from data in the passed fbwrec*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* Internal sequence number*/
  FB4REC.XGPCD = FBWREC.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FBWREC.SY2CLRID; /* color*/
  FB4REC.XDMCD = FBWREC.XDMCD; /* dimension*/
  FB4REC.XQACD = FBWREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBWREC.PC2INSEG; /* spec difference*/
  FB4REC.XSACD = FBWREC.XSACD; /* share*/
  FB4REC.XPGCD = FBWREC.XPGCD; /* package type*/
  FB4REC.XUMCD = FBWREC.XUMCD; /* unit of measure*/
  ;
  FB4REC.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "124"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0E124

// Select next vcurve01 row
Function FB0E125()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      FB0E128(); /* Save warehouse data*/
      ;
      if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
       || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
        FB0EW01.FB0EWCNB = FB4REC.FB4CRVNB;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0EW00.FB0EWCCF = "Y";
      return; /* Return to previous process*/
      ;
    else
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "125"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E125

// close vcurve01 set
Function FB0E126()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "126"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E126

// Get table descriptions
Function FB0E127()
   /* -------------------------------------------------------*/
   /* Access division code table for description*/
   /* --------------------------------------------------------*/
  ;
  if (FB0EW01.XDVCD in XDVTBL.XDVCD)
    FB0EW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    FB0EW01.XDVDESC = "UNKNOWN";
  end
  ;
   /* -------------------------------------------------------*/
   /* The product code, category code, silhouette code and*/
   /* price point code are obtained from the vselcg01 record*/
   /* and since that record is optional these codes may not*/
   /* be available.*/
   /* --------------------------------------------------------*/
  ;
   /* -------------------------------------------------------*/
   /* Access Product type table for description*/
   /* --------------------------------------------------------*/
  ;
  ;
  if (FB0EW01.XPRCD in XPRTBL.XPRCD)
    FB0EW01.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    FB0EW01.XPRABRV = "UNKNOWN";
  end
  ;
  ;
   /* -------------------------------------------------------*/
   /* Access silhouette code table for description*/
   /* --------------------------------------------------------*/
  ;
  ;
  if (FB0EW01.XSUCD in XSUTBL.XSUCD)
    FB0EW01.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    FB0EW01.XSUABRV = "UNKNOWN";
  end
  ;
  ;
   /* -------------------------------------------------------*/
   /* Access product category code table for description*/
   /* --------------------------------------------------------*/
  ;
  ;
  FB0EW01.XGPCD = FBWREC.XGPCD; /* Product class code*/
  if (FB0EW01.XPCKEY in XPCTBL.XPCKEY)
    FB0EW01.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    FB0EW01.XPCSDESC = "UNKNOWN";
  end
  ;
  ;
   /* -------------------------------------------------------*/
   /* Access price point code table for description*/
   /* --------------------------------------------------------*/
  ;
  ;
  if (FB0EW01.YPPCD in YPPTBL.YPPCD)
    FB0EW01.YPPDESC = YPPTBL.YPPDESC[sysVar.arrayIndex];
  end
  ;
  if (sysVar.arrayIndex == 0) /* Table entry not found*/
    FB0EW01.YPPDESC = "UNKNOWN";
  end
  ;
  ;
  ;
end // end FB0E127

// move vcurve01 data to storage
Function FB0E128()
  FB0EW00.FB0EWIX1 = 1; /* General index 1*/
  ;
  if (FB0EW00.FB0EWWHS == 1) /* Warehouse count*/
    set FB0JW03 empty;
    FB0JW03.XWHCD = FB4REC.XWHCD; /* Warehouse code*/
    FB0JW03.FB4RGPCT = FB4REC.FB4RGPCT; /* Region percent*/
    FB0JW03.FB4STDFL = FB4REC.FB4STDFL; /* Standard curve flag*/
    FB0JW03.FB4QTYLK = FB4REC.FB4QTYLK; /* Protect quantities flag*/
    FB0JW03.FB4CRVNB = FB4REC.FB4CRVNB; /* Curve number*/
    FB0JW03.ZZZCHGCT = FB4REC.ZZZCHGCT; /* Change count*/
    FB0JW03.ZZZSDT = FB4REC.ZZZSDT; /* Setup date*/
    move FB4REC.FB4DMQTY to FB0JW03.FB4DMQTY[1] for all; /* Move quantity array*/
    move FB4REC.FB4SZPCT to FB0JW03.FB4SZPCT[1] for all; /* Move size array*/
  else
    if (FB0EW00.FB0EWWHS == 2) /* Warehouse count*/
      set FB0JW04 empty;
      FB0JW04.XWHCD = FB4REC.XWHCD; /* Warehouse code*/
      FB0JW04.FB4RGPCT = FB4REC.FB4RGPCT; /* Region percent*/
      FB0JW04.FB4STDFL = FB4REC.FB4STDFL; /* Standard curve flag*/
      FB0JW04.FB4QTYLK = FB4REC.FB4QTYLK; /* Protect quantities flag*/
      FB0JW04.FB4CRVNB = FB4REC.FB4CRVNB; /* Curve number*/
      FB0JW04.ZZZSDT = FB4REC.ZZZSDT; /* Setup date*/
      FB0JW04.ZZZCHGCT = FB4REC.ZZZCHGCT; /* Change count*/
      move FB4REC.FB4DMQTY to FB0JW04.FB4DMQTY[1] for all; /* Move quantity array*/
      move FB4REC.FB4SZPCT to FB0JW04.FB4SZPCT[1] for all; /* Move size array*/
    else
      if (FB0EW00.FB0EWWHS == 3) /* Warehouse count*/
        set FB0JW05 empty;
        FB0JW05.XWHCD = FB4REC.XWHCD; /* Warehouse code*/
        FB0JW05.FB4RGPCT = FB4REC.FB4RGPCT; /* Region percent*/
        FB0JW05.FB4STDFL = FB4REC.FB4STDFL; /* Standard curve flag*/
        FB0JW05.FB4QTYLK = FB4REC.FB4QTYLK; /* Protect quantities flag*/
        FB0JW05.FB4CRVNB = FB4REC.FB4CRVNB; /* Curve number*/
        FB0JW05.ZZZSDT = FB4REC.ZZZSDT; /* Setup date*/
        move FB4REC.FB4DMQTY to FB0JW05.FB4DMQTY[1] for all; /* Move quantity array*/
        move FB4REC.FB4SZPCT to FB0JW05.FB4SZPCT[1] for all; /* Move size array*/
      end
    end
  end
  ;
  FB0EW00.FB0EWWHS = FB0EW00.FB0EWWHS + 1; /* Increment whse count*/
  ;
  ;
end // end FB0E128

// get all current vcurve01 data
Function FB0E130()
   /* ------------------------------------------------------------*/
   /* Open set for vcurve01 using passed internal sequence number*/
   /* as the key. Then obtain the first vcurve01 record.  If*/
   /* there are any records in the set and the record key does*/
   /* not match the key passed in the fbwrec get the color and*/
   /* style description (for map display).  Check to see if*/
   /* there is page overflow and if there is write a page to*/
   /* temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
   /* Initialize last database page and line in case there*/
   /* happens to be no database data to display.*/
  ;
  FB0EW00.FB0EWDBP = 1; /* Last data base page*/
  FB0EW00.FB0EWDBL = 0; /* Last data base line*/
  FB0E131(); /* Open vcurve01 set*/
  ;
  FB0EW00.FB0EWIXM = 0; /* Initialize map index*/
  ;
  FB0E132(); /* Get first vcurve01 row*/
  ;
  while (FB0EW00.FB0EWCCF != "Y") /* Not end of set*/
    if (FB4REC.FB4KEY != FBWREC.FBWKEY
     && FB4REC.SY1STNBR != " ")
      ;
      FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1; /* Increment index*/
      FB0EW02.SY1STNBR[FB0EWIXM] = FB4REC.SY1STNBR;
      FB0EW02.SY2CLRID[FB0EWIXM] = FB4REC.SY2CLRID;
      FB0EW02.XDMCD[FB0EWIXM] = FB4REC.XDMCD;
      FB0EW02.FB0EWPTD[FB0EWIXM] = "Y"; /* Data should be protected*/
      FB0EW02.FB0EWMDF[FB0EWIXM] = "N"; /* Modified data flag*/
      FB0E133(); /* Get product description*/
      ;
    end
    if (FB0EW00.FB0EWIXM == 10) /* Page is full*/
      ;
      FB0E134(); /* Add page to temporary storage*/
    end
    FB0EW00.FB4KEY = FB4REC.FB4KEY;
    while (FB0EW00.FB0EWCCF != "Y" /* Not end of set*/
     && FB4REC.FB4KEY == FB0EW00.FB4KEY) /* and same product*/
      ;
      FB0E132(); /* Get next vcurve01 row*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the last page and the last line of data base data in*/
   /* working storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWDBL = FB0EW00.FB0EWIXM; /* Last data base line*/
  ;
  if (FB0EW00.TA5TSQIX != 0) /* One page has been written*/
    FB0EW00.FB0EWDBP = TA5REC.TA5TSQIX; /* Last data base page*/
  end
  ;
  ;
  FB0E135(); /* Close vcurve01 set*/
  ;
end // end FB0E130

// Select set vcurve01
Function FB0E131()
  FB0EW00.FB0EWCCF = "N"; /* End of vcurve01 flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Use the internal sequence nbr from the fbwrec as the key*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* Internal sequence number*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S3", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "131"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0E131

// GET next vcurve01 row
Function FB0E132()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N3", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0EW00.FB0EWCCF = "Y"; /* vcurve01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "132"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E132

// GET product/color description
Function FB0E133()
  ;
   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB4REC.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = FB4REC.SY2CLRID; /* Color*/
  PG2REC.XDMCD = FB4REC.XDMCD; /* Dimension*/
  ;
  XSPG202(); /* Get style and color descriptions*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EW02.SY1STYNM[FB0EWIXM] = PG2REC.SY1STYNM;
      FB0EW02.SY2CLRAB[FB0EWIXM] = PG2REC.SY2CLRAB;
    end
  end
end // end FB0E133

// Add page to temporary storage
Function FB0E134()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW02.FB0EWTSL = FB0EW00.FB0EWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FB0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FB0EW02 empty; /* M010 detail display storage*/
    ;
    FB0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB0EW00.FB0EWIXM = 0; /* Map index*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0EM010.XXXMODID = "134"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E134

// Close vcurve01 set
Function FB0E135()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C3", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "135"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E135

// Load data from fb0j
Function FB0E140()
   /* ------------------------------------------------------------*/
   /* Add the invalid data and the lines for input to temporary*/
   /* storage (invalid and input lines cannot be greater*/
   /* than 27).*/
   /* Use the index previously used for loading database data to*/
   /* load data to the temporary storage record (Start loading*/
   /* invalid data from the last line of database data.)*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = 1; /* Initialize index for invalid/input data*/
  FB0EW00.FB0EWIXM = FB0EW00.FB0EWDBL; /* Last line of database data*/
  ;
  if (FB0EW00.FB0EWFRJ == "Y") /* From FB0J application*/
    move "N" to FB0JW02.FB0JWIVS[1] for all; /* Initialize invalid size flag*/
  end
  ;
  ;
  while (FB0EW00.FB0EWIX1 <= 27)
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    FB0EW02.FB0EWPTD[FB0EWIXM] = "N";
    FB0EW02.FB0EWMDF[FB0EWIXM] = "N";
    if (FB0JW02.SY1STNBR[FB0EWIX1] > " ") /* Invalid data exists*/
      FB0EW02.SY1STNBR[FB0EWIXM] = FB0JW02.SY1STNBR[FB0EWIX1];
      FB0EW02.SY2CLRID[FB0EWIXM] = FB0JW02.SY2CLRID[FB0EWIX1];
      FB0EW02.XDMCD[FB0EWIXM] = FB0JW02.XDMCD[FB0EWIX1];
      FB0EW02.FB0EWIVS[FB0EWIXM] = FB0JW02.FB0JWIVS[FB0EWIX1];
      FB0EW02.FB4CRVNB[FB0EWIXM] = FB0JW02.FB4CRVNB[FB0EWIX1];
      FB0EW02.FB4STDFL[FB0EWIXM] = FB0JW02.FB4STDFL[FB0EWIX1];
      FB0EW02.FB0EWMDF[FB0EWIXM] = "Y";
      ;
      FB0E141(); /* Get invalid product description*/
      if (FB0EW00.FB0EWFRJ == "Y") /* Coming from fb0j application*/
        FB0E142(); /* Validate product size pct & qty*/
      end
      ;
    end
    if (FB0EW00.FB0EWIXM == 10) /* Page full*/
      FB0E134(); /* Add page to temporary storage*/
    end
    ;
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1; /* Increment invalid/input index*/
  end
  ;
  FB0EW00.FB0EWFRJ = "N"; /* Coming from fb0j application*/
   /* ------------------------------------------------------------*/
   /* Add any partial data to the last page in temporary storage.*/
   /* Since invalid or input data cannot exceed 27 lines,*/
   /* protect the style nbr on any lines that would exceed that*/
   /* amount.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWIXM > 1) /* At least one line formatted*/
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    ;
    while (FB0EW00.FB0EWIXM <= 10)
      FB0EW02.FB0EWPTD[FB0EWIXM] = "Y";
      FB0EW02.FB0EWMDF[FB0EWIXM] = "N";
      FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    end
    ;
    FB0E134();
  end
  ;
end // end FB0E140

// GET fb0j product/color desc
Function FB0E141()
  ;
   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB0EW02.SY1STNBR[FB0EWIXM];
  PG2REC.SY2CLRID = FB0EW02.SY2CLRID[FB0EWIXM];
  PG2REC.XDMCD = FB0EW02.XDMCD[FB0EWIXM];
  ;
  ;
  ;
  FB0EM010.XXXMODID = "141"; /* Module identification*/
  ;
  XSPG202(); /* Get style and color descriptions*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EW02.SY1STYNM[FB0EWIXM] = PG2REC.SY1STYNM;
      FB0EW02.SY2CLRAB[FB0EWIXM] = PG2REC.SY2CLRAB;
      ;
      FB0EW02.XDVCD1[FB0EWIXM] = PG2REC.XDVCD1; /* Save div for size lookup*/
      ;
    end
  end
end // end FB0E141

// validate size pct and qty
Function FB0E142()
  ;
   /* ------------------------------------------------------------*/
   /* Get size descriptions*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.XGPCD = COMMAREA.XGPCD;
  PG3REC.SY1STNBR = FB0JW02.SY1STNBR[FB0EWIX1];
  PG3REC.SY2CLRID = FB0JW02.SY2CLRID[FB0EWIX1];
  PG3REC.XDMCD = FB0JW02.XDMCD[FB0EWIX1];
  ;
  PG3REC.PG3XDVCD = FB0EW02.XDVCD1[FB0EWIXM]; /* division code*/
  ;
   /* ------------------------------------------------------------*/
   /* Default quality code to 01*/
   /* ------------------------------------------------------------*/
  ;
  PG3REC.XQACD = "01";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  TA1REC.TA1PGMNM = "FB0E142";
  ;
  ;
  XSPG301(); /* Get valid sizes*/
  ;
   /* ------------------------------------------------------------*/
   /* CHeck each warehouse (if it has a curve)  and*/
   /* Flag style with invalid size and a size percent*/
   /* or quantity.*/
   /* ------------------------------------------------------------*/
  ;
   /* Warehouse one*/
  ;
  ;
  if (FB0JW03.XWHCD > " ") /* Data for warehouse1*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N")
      if (FB0JW03.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* For an invalid size*/
        FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
        converseLib.validationFailed(75); /* Invalid size has a percent*/
      end
      if (FB0JW03.FB4QTYLK != "Y")
        if (FB0JW03.FB4DMQTY[FB0EWIX2] != 0 /* Percent exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* For an invalid size*/
          FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
          converseLib.validationFailed(49); /* Invalid size has demand quantity*/
        end
      end
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1; /* Increment general index*/
    end
  end
  ;
   /* Warehouse two*/
  ;
  if (FB0JW04.XWHCD > " ") /* Data for warehouse two*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N")
      if (FB0JW04.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
        FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
        converseLib.validationFailed(75); /* Invalid size has a percent*/
      end
      if (FB0JW04.FB4QTYLK != "Y")
        if (FB0JW04.FB4DMQTY[FB0EWIX2] != 0 /* Percent exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* For an invalid size*/
          FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
          converseLib.validationFailed(49); /* Invalid size has demand quantity*/
        end
      end
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1; /* Increment general index*/
    end
  end
  ;
  ;
   /* Warehouse three*/
  ;
  if (FB0JW05.XWHCD > " ") /* Data for warehouse three*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N")
      if (FB0JW05.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
        FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
        converseLib.validationFailed(75); /* Invalid size has a percent*/
      end
      if (FB0JW05.FB4QTYLK != "Y")
        if (FB0JW05.FB4DMQTY[FB0EWIX2] != 0 /* Percent exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* For an invalid size*/
          FB0EW02.FB0EWIVS[FB0EWIXM] = "Y"; /* Flag data as invalid*/
          converseLib.validationFailed(49); /* Invalid size has demand quantity*/
        end
      end
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1; /* Increment general index*/
    end
  end
  ;
end // end FB0E142

// Load input lines to storage
Function FB0E150()
  ;
   /* ------------------------------------------------------------*/
   /* Use the index previously used for loading database data to*/
   /* load input lines to temporary storage.*/
   /* Protect any lines that would allow in excess of 27 style*/
   /* to be entered.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = 1; /* Initialize index for invalid/input data*/
  ;
  FB0EW00.FB0EWIXM = FB0EW00.FB0EWDBL; /* Last line of database data*/
  ;
  while (FB0EW00.FB0EWIX1 <= 27)
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    FB0EW02.FB0EWPTD[FB0EWIXM] = "N";
    FB0EW02.FB0EWMDF[FB0EWIXM] = "N";
    if (FB0EW00.FB0EWIXM == 10) /* Page full*/
      FB0E134(); /* Add page to temporary storage*/
    end
    ;
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1; /* Increment invalid/input index*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partial data to the last page in temporary storage*/
   /* If there are lines on the map that would exceed 27 for*/
   /* invalid or input set the protect flag on so data cannot*/
   /* be entered in the field.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWIXM > 1) /* At least one line formatted*/
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    while (FB0EW00.FB0EWIXM <= 10)
      FB0EW02.FB0EWPTD[FB0EWIXM] = "Y";
      FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    end
    ;
    FB0E134();
  end
  ;
  ;
end // end FB0E150

// Get vselst01
Function FB0E160()
  ;
  FB0E161(); /* select set vselst01*/
  ;
  while (FB0EW00.FB0EWIX3 <= 50 /* Max*/
   && FB0EW00.FB0EWSCF == "N") /* End of vselst01 flag*/
    FB0E162(); /* fetch vselst01*/
  end
  FB0E163(); /* close set vselst01*/
end // end FB0E160

// Select set vselst01
Function FB0E161()
  ;
  ;
  set FB6REC empty; /* Initialize record*/
  FB0EW00.FB0EWSCF = "N"; /* End of vselst01 flag*/
  FB0EW00.FB0EWIX3 = 1;
  ;
   /* ------------------------------------------------------------*/
   /* Use the passed internal sequence number as the key.*/
   /* ------------------------------------------------------------*/
  ;
  FB6REC.FB1INSEQ = FBWREC.FB1INSEQ; /* Internal sequence number*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3060" ("S1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "160"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0E161

// Fetch next vselst01 row
Function FB0E162()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3060" ("N1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EW05.FB0EWGR5[FB0EWIX3] = FB6REC.FB6GROUP;
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0EW00.FB0EWSCF = "Y";
      return; /* Return to previous process*/
      ;
    else
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E162

// close vselst01 set
Function FB0E163()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3060" ("C1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E163

// Format and converse the map
Function FB0E200()
  ;
  if (converseVar.validationMsgNum != 0)
    FBWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    /* ------------------------------------------------------------*/
     /* The following are informational messages-not errors*/
    /* ------------------------------------------------------------*/
    if (converseVar.validationMsgNum == 12 /* Scroll forward successful*/
     || converseVar.validationMsgNum == 13 /* scroll backward successful*/
     || converseVar.validationMsgNum == 74 /* No updates--invalid sizes*/
     || converseVar.validationMsgNum == 32 /* Update Competely successful*/
     || converseVar.validationMsgNum == 69) /* Update partially successful*/
       /* next sentence*/
    else
      set FB0EM010 alarm; /* Indicate sound alarm*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the heading data to be*/
   /* displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EM010.XXXCURDT == 0) /* Map is not formatted*/
    FB0E210(); /* Format the heading data*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FB0EW00.FB0EWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FB0EW00.FB0EWUTS == "Y") /* Screen data has been updated*/
        ;
        FB0E220(); /* Move map fields to display storage*/
        FB0EW00.FB0EWUTS = "N";
        ;
      end
      ;
      FB0E230(); /* Obtain temporary storage page*/
      ;
      FB0E240(); /* Format Detail data*/
    end
    ;
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0EM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0EM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
  ;
  converse FB0EM010 ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FB0EM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0EM010.CATOAP; /* To application*/
  COMMAREA.CAITEM = FB0EM010.CAITEM; /* Application data*/
  ;
end // end FB0E200
// Format Map Heading data
Function FB0E210()
   /* ------------------------------------------------------------*/
   /* Move map heading data from fb0ew01 display storage record*/
   /* to the map fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0EM010.FB0EMCID = FB0EW01.FB0EWCID; /* Curve or dummy literal*/
  ;
  if (FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
    FB0EM010.FB0EMCNB = FBWREC.FB4CRVNB;
  else
    FB0EM010.FB0EMCNB = FB0EW01.FB0EWCNB; /* Curve or dummy number*/
  end
  ;
  FB0EM010.FB1CMNT = FB0EW01.FB1CMNT; /* Comments*/
  FB0EM010.FB1INCDS = FB0EW01.FB1INCDS; /* Direct ship code*/
  FB0EM010.XPCCD = FB0EW01.XPCCD; /* Product category code*/
  FB0EM010.XPCSDESC = FB0EW01.XPCSDESC; /* Product short description*/
  FB0EM010.XSUCD = FB0EW01.XSUCD; /* Silhouette code*/
  FB0EM010.XSUABRV = FB0EW01.XSUABRV; /* Silhouette description*/
  FB0EM010.YPPCD = FB0EW01.YPPCD; /* Price point code*/
  FB0EM010.YPPDESC = FB0EW01.YPPDESC; /* Price point description*/
  FB0EM010.XPRCD = FB0EW01.XPRCD; /* Product type code*/
  FB0EM010.XPRABRV = FB0EW01.XPRABRV; /* Product type description*/
  FB0EM010.XDVCD = FB0EW01.XDVCD; /* Division code*/
  FB0EM010.XDVDESC = FB0EW01.XDVDESC; /* Division description*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move the from and to need dates to the map*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = 1; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIX1 <= 2)
    FB0EM010.FB0EMFRM[FB0EWIX1] = FB0EW01.FB0EWFRM[FB0EWIX1];
    FB0EM010.FB0EMFRY[FB0EWIX1] = FB0EW01.FB0EWFRY[FB0EWIX1];
    FB0EM010.FB0EMTOM[FB0EWIX1] = FB0EW01.FB0EWTOM[FB0EWIX1];
    FB0EM010.FB0EMTOY[FB0EWIX1] = FB0EW01.FB0EWTOY[FB0EWIX1];
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move the Order type group codes to the map*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = 1; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIX1 <= 6)
    FB0EM010.YSMXOT[FB0EWIX1] = FB0EW01.YSMXOT[FB0EWIX1];
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
  end
  ;
  ;
end // end FB0E210

// move map fields to storage
Function FB0E220()
   /* ------------------------------------------------------------*/
   /* If the map data is not protected (from the database) move*/
   /* the map fields to the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIXM = +1; /* Initialize index*/
  while (FB0EW00.FB0EWIXM <= 10)
    if (FB0EW02.FB0EWPTD[FB0EWIXM] != "Y") /* Data not protected*/
      FB0EW02.SY1STNBR[FB0EWIXM] = FB0EM010.SY1STNBR[FB0EWIXM];
      FB0EW02.SY2CLRID[FB0EWIXM] = FB0EM010.SY2CLRID[FB0EWIXM];
      FB0EW02.XDMCD[FB0EWIXM] = FB0EM010.XDMCD[FB0EWIXM];
      FB0EW02.SY1STYNM[FB0EWIXM] = FB0EM010.SY1STYNM[FB0EWIXM];
      FB0EW02.SY2CLRAB[FB0EWIXM] = FB0EM010.SY2CLRAB[FB0EWIXM];
      FB0EW02.FB0EWMDF[FB0EWIXM] = "N";
    end
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    ;
  end
  FB0E221(); /* Update display storage*/
  ;
  ;
end // end FB0E220

// Update temporary storage
Function FB0E221()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW02.FB0EWTSL = FB0EW00.FB0EWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FB0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0EM010.XXXMODID = "221"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E221

// Obtain temporary Storage Page
Function FB0E230()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW02.FB0EWTSL = FB0EW00.FB0EWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  if (FB0EW00.FB0EWTSP == 0)
    FB0EW00.FB0EWTSP = 1;
  end
  TA5REC.TA5TSQIX = FB0EW00.FB0EWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FB0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0EM010.XXXMODID = "230"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E230

// Format Map detail data
Function FB0E240()
  ;
  FB0EW00.FB0EWIXM = 10; /* Initialize index*/
  FB0EW00.FB0EWIX1 = 0;
  ;
  while (FB0EW00.FB0EWIXM >= 1) /* Until all data moved*/
    ;
    FB0EM010.SY1STNBR[FB0EWIXM] = FB0EW02.SY1STNBR[FB0EWIXM];
    FB0EM010.SY2CLRID[FB0EWIXM] = FB0EW02.SY2CLRID[FB0EWIXM];
    FB0EM010.XDMCD[FB0EWIXM] = FB0EW02.XDMCD[FB0EWIXM];
    FB0EM010.SY1STYNM[FB0EWIXM] = FB0EW02.SY1STYNM[FB0EWIXM];
    FB0EM010.SY2CLRAB[FB0EWIXM] = FB0EW02.SY2CLRAB[FB0EWIXM];
    ;
    if (FB0EW02.FB0EWPTD[FB0EWIXM] == "Y") /* Field is protected*/
      if (FB0EW02.SY1STNBR[FB0EWIXM] == " ") /* INPUT FIELDS > 27*/
        set FB0EM010.SY1STNBR[FB0EWIXM] protect, invisible;
        set FB0EM010.SY2CLRID[FB0EWIXM] protect, invisible;
        set FB0EM010.XDMCD[FB0EWIXM] protect, invisible;
      else
        set FB0EM010.SY1STNBR[FB0EWIXM] initialAttributes; /* Database data*/
        set FB0EM010.SY2CLRID[FB0EWIXM] initialAttributes; /* Database data*/
        set FB0EM010.XDMCD[FB0EWIXM] initialAttributes; /* Database data*/
      end
    else
      set FB0EM010.SY1STNBR[FB0EWIXM] cursor, normal; /* Input fields*/
      set FB0EM010.SY2CLRID[FB0EWIXM] normal; /* Input fields*/
      set FB0EM010.XDMCD[FB0EWIXM] normal; /* Input fields*/
    end
    ;
    if (FB0EW02.FB0EWIVS[FB0EWIXM] == "Y") /* Invalid size*/
      FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIXM; /* uppermost style error*/
      set FB0EM010.SY1STNBR[FB0EWIXM] cursor, bold;
      set FB0EM010.SY2CLRID[FB0EWIXM] bold;
      set FB0EM010.XDMCD[FB0EWIXM] bold;
      if (converseVar.validationMsgNum != 0)
        if (converseVar.validationMsgNum == 69 /* Update partial successful*/
         || converseVar.validationMsgNum == 74) /* No updates --product size error*/
                /* next sentence*/
        end
      else
        converseLib.validationFailed(75); /* Highlighted fields have size error*/
      end
    end
    ;
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM - 1; /* Decrement line index*/
    ;
  end
  ;
   /* Position cursor at uppermost invalid style number*/
  ;
  if (FB0EW00.FB0EWIX1 != 0)
    set FB0EM010.SY1STNBR[FB0EWIX1] cursor, bold;
    set FB0EM010.SY2CLRID[FB0EWIX1] bold;
    set FB0EM010.XDMCD[FB0EWIX1] bold;
  end
  ;
  ;
end // end FB0E240

// Check attention identifier
Function FB0E300()
   /* ------------------------------------------------------------*/
   /* If invalid sizes, enter must be pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FBWREC.XXXMSGNO == 69
   || FBWREC.XXXMSGNO == 74)
    if (converseVar.eventKey not enter /* ENTER was not pressed*/
     && converseVar.eventKey not pf1   /* help not requested*/
     && converseVar.eventKey not pf5   /* prod menu not requested*/
     && converseVar.eventKey not pf3)  /* exit not requested*/
      if (FBWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FBWREC.XXXMSGNO);
      end
      FB0EW00.FB0EWIVD = "Y"; /* Invalid product*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FBWREC.FBWFILL = " ";
      COMMAREA.CAUSERA = FBWREC.FBWGROUP;
      COMMAREA.CATOAP = FB0EM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0EM010.CAITEM; /* TO application key*/
      XSEXIT(); /* Exit to another application*/
      FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else
      FB0EM010.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(40); /* Enter must be used for fast path*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, restart from the top.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    FBWREC.FBWFILL = " ";
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    COMMAREA.CATOAP = "FB0E"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    XSEXIT(); /* Exit to self*/
    FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If enter was pressed and there were invalid sizes the*/
   /* 'from' curve data and invalid styles are loaded into*/
   /* the fbw and fb0j records and control is passed to fb0j.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FB0EW00.FB0EWIVD == "Y") /* Invalid product*/
      ;
      FBWREC.XXXMSGNO = 0;
      FB0E310(); /* Load data and transfer to fb0j*/
    else
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Handle pf-keys*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* To application*/
    COMMAREA.CAITEM = "FB0EM010"; /* Application find code*/
    XSEXIT();
    FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  end
  ;
  if (converseVar.eventKey is pf5) /* pf5 was pressed*/
    COMMAREA.CATOAP = "FY0M"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    XSEXIT(); /* exit to production menu*/
    FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  end
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    FBWREC.FBWFILL = " ";
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    ;
    if (FB0EW00.FB0EW-DUP-STD-FL == "Y")
      converseLib.validationFailed(0); /* reset error msg*/
      COMMAREA.CAMSG = " ";
      COMMAREA.CATOAP = "FB0C"; /* TO application*/
      COMMAREA.CAITEM = " "; /* Application data*/
      XSEXIT(); /* exit to Size maint. select*/
      FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else
      if (COMMAREA.CAFROMAP == "FB0J")
        COMMAREA.CATOAP = "FB0J"; /* TO application*/
        COMMAREA.CAITEM = " "; /* Application data*/
        XSEXIT(); /* exit to Size maint. select*/
        FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FB0I")
        COMMAREA.CATOAP = "FB0I"; /* TO application*/
        COMMAREA.CAITEM = " "; /* Application data*/
        XSEXIT(); /* exit to Size maint. select*/
        FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FB0L")
        COMMAREA.CATOAP = "FB0L"; /* TO application*/
        COMMAREA.CAITEM = " "; /* Application data*/
        XSEXIT(); /* exit to Size maint. select*/
        FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
      if (COMMAREA.CAFRMSYS == "FB")
        COMMAREA.CATOAP = "FB0C"; /* TO application*/
        COMMAREA.CAITEM = " "; /* Application data*/
        XSEXIT(); /* exit to Size maint. select*/
        FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
      COMMAREA.CATOAP = "FB0M"; /* TO application*/
      COMMAREA.CAITEM = " "; /* Application data*/
      XSEXIT(); /* exit to Size maint. select*/
      FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
      ;
    end
  end
  ;
  if (converseVar.eventKey is pf9 /* Update & make std requested*/
   || converseVar.eventKey is pf13) /* Update requested*/
    FB0EW00.FB0EWPF9 = "Y"; /* Pf9 requested flag*/
    return;
  end
  ;
  if (converseVar.eventKey is pf7 /* PF7 (scoll back requested)*/
   || converseVar.eventKey is pf8) /* PF8 (scroll forward requested)*/
    FB0E320(); /* Validate scroll request*/
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If this point has been reached, an invalid pf-keys was hit.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3);
  exit stack; /* Return to show error message*/
end // end FB0E300

// load data & transfer to fb0j
Function FB0E310()
  ;
   /* ------------------------------------------------------------*/
   /* There were invalid sizes for the product so control will*/
   /* be passed to fb0j.*/
   /* ------------------------------------------------------------*/
  ;
  FB0JW02.FB0JWGP1 = FB0JW03.FB0JWGRP; /* Size data, 1st warehouse*/
  FB0JW02.FB0JWGP2 = FB0JW04.FB0JWGRP; /* Size data, 2nd warehouse*/
  FB0JW02.FB0JWGP3 = FB0JW05.FB0JWGRP; /* Size data, 3rd warehouse*/
  ;
  ;
  FBWREC.FBWFILL = FB0JW02.FB0JWGR0; /* Area used by fb0j*/
  COMMAREA.CAUSERA = FBWREC.FBWGROUP; /* Common user area*/
  ;
  COMMAREA.CATOAP = "FB0J"; /* TO application*/
  COMMAREA.CAITEM = " "; /* Application data*/
  XSEXIT(); /* Exit to 'to application'*/
  FB0EM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
  exit stack; /* return to show error msg*/
  ;
  ;
  ;
end // end FB0E310

// Validate scroll request
Function FB0E320()
  ;
   /* ------------------------------------------------------------*/
   /* If update has been requested with invalid data don't*/
   /* allow any paging.*/
   /* ------------------------------------------------------------*/
  if (FB0EW00.FB0EWPF9 == "Y"
   && FB0EW00.FB0EWIVD == "Y")
    converseLib.validationFailed(88); /* Scrolling not allowed when updating*/
                                   /* with errors*/
    FB0EM010.XXXMODID = "320"; /* Module identification*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB0EW00.FB0EWTSP < 2)       /* and no previous pages*/
    ;
    FB0EM010.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(6); /* Unable to scroll backward*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB0EW00.FB0EWTSP >= FB0EW00.TA5TSQIX) /* and no more pages*/
    ;
    FB0EM010.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(7); /* Unable to scroll forward*/
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
  ;
end // end FB0E320

// Reset highlighted fields
Function FB0E400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0EM010.CATOAP initialAttributes; /* Commarea To application*/
  set FB0EM010.CAITEM initialAttributes; /* Commarea application data*/
  FB0EM010.XXXMODID = " ";
  ;
  ;
  FB0EW00.FB0EWIXM = 1;
  ;
  while (FB0EW00.FB0EWIXM <= 10)
    if (FB0EW02.FB0EWPTD[FB0EWIXM] != "Y") /* Unprotected*/
      set FB0EM010.SY1STNBR[FB0EWIXM] normal; /* STYLE NUMBER*/
      set FB0EM010.SY2CLRID[FB0EWIXM] normal; /* COLOR*/
      set FB0EM010.XDMCD[FB0EWIXM] normal; /* DIM*/
    end
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1; /* Increment INDEX*/
  end
  ;
end // end FB0E400

// Verify the entered data
Function FB0E500()
  ;
   /* ------------------------------------------------------------*/
   /* Check to see if any of the style numbers on the screen*/
   /* have been erased.  Move spaces to the screen data*/
   /* associated with an erased style number.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIXM = 1; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIXM <= 10)
    if (FB0EW02.SY1STNBR[FB0EWIXM] != " " /* Previous style number*/
     && FB0EM010.SY1STNBR[FB0EWIXM] == " ") /* No current style number*/
      FB0EM010.SY2CLRID[FB0EWIXM] = " ";
      FB0EM010.XDMCD[FB0EWIXM] = " ";
      FB0EM010.SY1STYNM[FB0EWIXM] = " ";
      FB0EM010.SY2CLRAB[FB0EWIXM] = " ";
      FB0EW00.FB0EWUTS = "Y"; /* Update temp storage flag*/
      FB0EW02.FB0EWMDF[FB0EWIXM] = "N";
      FB0EW02.FB0EWIVS[FB0EWIXM] = "N";
      set FB0EM010.SY1STNBR[FB0EWIXM] normal;
      set FB0EM010.SY2CLRID[FB0EWIXM] normal;
      set FB0EM010.XDMCD[FB0EWIXM] normal;
    end
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Determine if any style numbers have been added or modified*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0EW00.FB0EWIXM = 1; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIXM <= 10)
    ;
    if (FB0EM010.SY1STNBR[FB0EWIXM] != " ") /* Style number on map*/
      if (FB0EW02.SY1STNBR[FB0EWIXM] == " ") /* No prior style number*/
         /* Style number added*/
        FB0EW02.SY1STNBR[FB0EWIXM] = FB0EM010.SY1STNBR[FB0EWIXM];
        FB0EW02.FB0EWMDF[FB0EWIXM] = "Y"; /* Modified data flag*/
        FB0EW00.FB0EWUTS = "Y"; /* Update temp storage flag*/
        if (FB0EM010.SY2CLRID[FB0EWIXM] == "   ")
          FB0EM010.SY2CLRID[FB0EWIXM] = "00 "; /* Default color and*/
          FB0EM010.XDMCD[FB0EWIXM] = "00"; /* dim to zeros.*/
        end
      else
        if (FB0EM010.SY1STNBR[FB0EWIXM] != FB0EW02.SY1STNBR[FB0EWIXM])
          FB0EW02.SY1STNBR[FB0EWIXM] = FB0EM010.SY1STNBR[FB0EWIXM];
           /* Style number changed*/
          FB0EW02.FB0EWMDF[FB0EWIXM] = "Y"; /* Modified data flag*/
          FB0EW00.FB0EWUTS = "Y"; /* Update temp storage flag*/
          FB0EW02.FB0EWIVS[FB0EWIXM] = "N";
          if (FB0EM010.SY2CLRID[FB0EWIXM] == "   ")
            FB0EM010.SY2CLRID[FB0EWIXM] = "00 "; /* Default color and*/
            FB0EM010.XDMCD[FB0EWIXM] = "00"; /* dim to zeros.*/
          end
          FB0EM010.SY1STYNM[FB0EWIXM] = " ";
          FB0EM010.SY2CLRAB[FB0EWIXM] = " ";
        end
      end
    end
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the style and color description and verify that*/
   /* any added or modified style numbers are on the product*/
   /* file. If any errors exit and display map*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIXM = 10; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIXM >= 1)
    ;
    if (FB0EW02.FB0EWMDF[FB0EWIXM] == "Y")
      FB0E510(); /* Get product description*/
    end
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM - 1;
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify that an additional assiged curve to an added or*/
   /* modified style number will not exceed the maximum of 10*/
   /* curves for a product. If any errors exit to display map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIXM = 10; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIXM >= 1)
    ;
    if (FB0EW02.FB0EWMDF[FB0EWIXM] == "Y")
      FB0E520(); /* Check for more than 10 curves*/
    end
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM - 1;
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify that any added or modified style numbers are not*/
   /* duplicates on other pages. If an errors exit to display*/
   /* map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0E540(); /* Load temporary storage*/
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Validate the size scale code for all the products entered*/
   /* on the screen. The one exception to the rule is that it*/
   /* is ok to combine size scales '01' and '13'.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  FB0EW00.FB0EWIXM = 10; /* Initialize index*/
  ;
  while (FB0EW00.FB0EWIXM >= 1)
    ;
    if (FB0EW02.FB0EWMDF[FB0EWIXM] == "Y " /* style number modified*/
     && FB0EW02.SY4SZSCL[FB0EWIXM] != FB1REC.SY4SZSCL)
      if (FB0EW02.SY4SZSCL[FB0EWIXM] == "01"
       && FB1REC.SY4SZSCL == "13")
   /* NEXT SENTENCE;*/
      else
        if (FB0EW02.SY4SZSCL[FB0EWIXM] == "13"
         && FB1REC.SY4SZSCL == "01")
   /* NEXT SENTENCE;*/
        else
          FB0EM010.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(56); /* Incompatible size scale code*/
          set FB0EM010.SY1STNBR[FB0EWIXM] cursor, bold; /* Highlight*/
        end
      end
    end
    ;
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM - 1;
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If update has been requested (PF9) and the style has*/
   /* been added or changed validate the sizes for percents and*/
   /* quantities. First the screen data must be loaded into the*/
   /* fb0ew03 record. The other pages with fb0j or input data*/
   /* were loaded from temp storage in routine FB0E540 (check*/
   /* for duplicates on other pages).*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf9 /* Update & make std requested*/
   || converseVar.eventKey is pf13) /* Update requested*/
    FB0EW00.FB0EWIXM = 1; /* Initialize map index*/
    while (FB0EW00.FB0EWIXM <= 10)
      if (FB0EW02.FB0EWPTD[FB0EWIXM] != "Y" /* Field not protected*/
       && FB0EM010.SY1STNBR[FB0EWIXM] != " ") /* and style number exists*/
        FB0EW03.SY1STNBR[FB0EWIX1] = FB0EM010.SY1STNBR[FB0EWIXM];
        FB0EW03.SY2CLRID[FB0EWIX1] = FB0EM010.SY2CLRID[FB0EWIXM];
        FB0EW03.XDMCD[FB0EWIX1] = FB0EM010.XDMCD[FB0EWIXM];
        FB0EW03.FB4STDFL[FB0EWIX1] = FB0EW02.FB4STDFL[FB0EWIXM];
        FB0EW03.FB4CRVNB[FB0EWIX1] = FB0EW02.FB4CRVNB[FB0EWIXM];
        FB0EW03.XDVCD1[FB0EWIX1] = FB0EW02.XDVCD1[FB0EWIXM];
        FB0EW03.SY4SZSCL[FB0EWIX1] = FB0EW02.SY4SZSCL[FB0EWIXM];
        FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
      end
      FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Edit all the of the fb0j and input data for sizes and*/
     /* quantities.*/
    /* ------------------------------------------------------------*/
    move "N" to FB0EW03.FB0EWIVS[1] for all; /* Invalid size flag array*/
    FB0EW00.FB0EWIX1 = 1; /* Initialize index*/
    ;
    while (FB0EW00.FB0EWIX1 <= 27)
      ;
      if (FB0EW03.SY1STNBR[FB0EWIX1] != "  ") /* Style number entered*/
        ;
        FB0E545(); /* Shift sizes for unlike sz scales*/
        FB0E550(); /* Edit for quantities and % with sizes*/
        FB0E555(); /* reset sizes for unlike sz scales*/
        ;
      end
      ;
      FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
    end
  end
  ;
  ;
  ;
  ;
  ;
end // end FB0E500

// Get style/color description
Function FB0E510()
  ;
   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB0EM010.SY1STNBR[FB0EWIXM];
  PG2REC.SY2CLRID = FB0EM010.SY2CLRID[FB0EWIXM];
  PG2REC.XDMCD = FB0EM010.XDMCD[FB0EWIXM];
  ;
  FB0EM010.XXXMODID = "510"; /* Module identification*/
  ;
  XSPG202(); /* Get style and color descriptions*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EM010.SY1STYNM[FB0EWIXM] = PG2REC.SY1STYNM;
      FB0EW02.SY1STYNM[FB0EWIXM] = PG2REC.SY1STYNM;
      FB0EM010.SY2CLRAB[FB0EWIXM] = PG2REC.SY2CLRAB;
      FB0EW02.SY2CLRAB[FB0EWIXM] = PG2REC.SY2CLRAB;
      FB0EW02.SY4SZSCL[FB0EWIXM] = PG2REC.SY4SZSCL;
      ;
      FB0EW02.XDVCD1[FB0EWIXM] = PG2REC.XDVCD1; /* Save div for size lookup*/
      ;
    else
      set FB0EM010.SY1STNBR[FB0EWIXM] cursor, bold; /* Highlight*/
      set FB0EM010.SY2CLRID[FB0EWIXM] bold; /* Highlight*/
      set FB0EM010.XDMCD[FB0EWIXM] bold; /* Highlight*/
      FB0EM010.SY1STYNM[FB0EWIXM] = "  ";
      FB0EW02.SY1STYNM[FB0EWIXM] = "  ";
      FB0EM010.SY2CLRAB[FB0EWIXM] = "  ";
      FB0EW02.SY2CLRAB[FB0EWIXM] = "  ";
      FB0EW02.SY4SZSCL[FB0EWIXM] = "  ";
      converseLib.validationFailed(22); /* Invalid style/color entered*/
    end
  end
end // end FB0E510

// check for more than 10 curves
Function FB0E520()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This process obtains all the curves for a product key*/
   /* and saves each unique internal sequence number in a*/
   /* table in the fb0ew00 record.  When all the vcurve01*/
   /* rows have been read the number of entries in the table*/
   /* are counted and if the table has 10 entries this product*/
   /* has the maximum number of allowable curves and an error*/
   /* condition exists.*/
   /* in addition all of the curve numbers for the product are*/
   /* saved and used to determine the lowest unused curve number*/
   /* that will be assigned to the copied curve.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  move 0 to FB0EW00.FB1INSEQ[1] for all; /* Initialize seq nbr array to zero*/
  move 0 to FB0EW00.FB4CRVNB[1] for all; /* Initialize curve number array to*/
                                   /* zeros*/
  ;
  FB0E521(); /* Select set for vcurve01*/
  ;
  FB0E522(); /* Select next vcurve01*/
  ;
   /* ------------------------------------------------------------*/
   /* If end of set on the first fetch there are no curves*/
   /* associated with this product yet so the working storage*/
   /* standard flag is set to 'y'. (This flag will be used*/
   /* when the new curves are created).*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (FB0EW00.FB0EWCCF == "Y"
   || converseVar.eventKey is pf9) /* Update & make std requested*/
    FB0EW02.FB4STDFL[FB0EWIXM] = "Y";
  else
    FB0EW02.FB4STDFL[FB0EWIXM] = "N";
  end
  ;
  ;
  while (FB0EW00.FB0EWCCF != "Y") /* While not end of set*/
    ;
    FB0EW00.FB0EWIX1 = +1; /* Initialize general index*/
    FB0EW00.FB0EWISF = "N"; /* Initialize seq nbr found flag*/
    ;
    while (FB0EW00.FB0EWIX1 <= 10
     && FB0EW00.FB0EWISF == "N") /* Seq nbr not in table*/
      ;
      if (FB4REC.FB1INSEQ == FB0EW00.FB1INSEQ[FB0EWIX1]
       && FB4REC.FB4CRVNB == FB0EW00.FB4CRVNB[FB0EWIX1])
        FB0EW00.FB0EWISF = "Y"; /* Indicate sequence nbr found*/
      else
        if (FB0EW00.FB1INSEQ[FB0EWIX1] == 0)
          FB0EW00.FB0EWISF = "Y"; /* Indicate sequence nbr found*/
          FB0EW00.FB1INSEQ[FB0EWIX1] = FB4REC.FB1INSEQ;
          FB0EW00.FB4CRVNB[FB0EWIX1] = FB4REC.FB4CRVNB;
        end
      end
      ;
      FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
    end
    ;
    FB0E522(); /* Select next vcurve01*/
    ;
  end
  ;
  FB0E523(); /* Close vcurve01 set*/
  ;
   /* ------------------------------------------------------------*/
   /* Check the table to see if all the entries contain sequence*/
   /* numbers.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = +1; /* Initialize general index*/
  ;
  while (FB0EW00.FB0EWIX1 <= 10
   && FB0EW00.FB1INSEQ[FB0EWIX1] > 0) /* Entries in table*/
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
  end
  ;
  if (FB0EW00.FB0EWIX1 > 10) /* 10 sequence numbers in table*/
    FB0EM010.XXXMODID = "520"; /* Module identification*/
    set FB0EM010.SY1STNBR[FB0EWIXM] cursor, bold; /* Highlight error*/
    converseLib.validationFailed(65);
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    FB0E524(); /* Find lowest unused curve number*/
  end
  ;
  ;
  ;
end // end FB0E520

// Select set vcurve01
Function FB0E521()
  FB0EW00.FB0EWCCF = "N"; /* End of vcurve01 flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the product curve key from data in the passed fbwrec*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
   || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
    FB4REC.XGPCD = FBWREC.XGPCD;
    FB4REC.XQACD = FBWREC.XQACD;
    FB4REC.PC2INSEG = FBWREC.PC2INSEG;
    FB4REC.XSACD = FBWREC.XSACD;
    FB4REC.XPGCD = FBWREC.XPGCD;
    FB4REC.XUMCD = FBWREC.XUMCD;
  else
    FB4REC.XGPCD = COMMAREA.XGPCD;
    FB4REC.XQACD = "01";
    FB4REC.PC2INSEG = "000";
    FB4REC.XSACD = "000";
    FB4REC.XPGCD = "00";
    FB4REC.XUMCD = "01";
  end
  FB4REC.SY1STNBR = FB0EM010.SY1STNBR[FB0EWIXM]; /* style number*/
  FB4REC.SY2CLRID = FB0EM010.SY2CLRID[FB0EWIXM]; /* color*/
  FB4REC.XDMCD = FB0EM010.XDMCD[FB0EWIXM]; /* dimension*/
  FB4REC.FB4STDFL = "*"; /* Wildcard the standard flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "521"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0E521

// Select next vcurve01 row
Function FB0E522()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0EW00.FB0EWCCF = "Y";
      return; /* Return to previous process*/
      ;
      ;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "522"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E522

// close vcurve01 set
Function FB0E523()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "523"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E523

// find lowest unused curve nbr
Function FB0E524()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This process finds the lowest unused curve number for*/
   /* the product.  this number will be used as the curve*/
   /* number if a new curve is added.If the lowest existing*/
   /* curve number is greater than one--start at one.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB4CRVNB[1] > 1)
    FB0EW02.FB4CRVNB[FB0EWIXM] = 1;
    return;
  end
  ;
  ;
  FB0EW00.FB0EWIX1 = +1; /* Initialize indexes*/
  FB0EW00.FB0EWIX2 = +2;
  FB0EW00.FB0EWCRF = "N"; /* Initialize unused curve found flag*/
  ;
  while (FB0EW00.FB0EWIX1 <= 10
   && FB0EW00.FB0EWCRF == "N")
    ;
    FB0EW00.FB0EWCRV = FB0EW00.FB4CRVNB[FB0EWIX1]; /* Move to work field*/
    FB0EW00.FB0EWCRV = FB0EW00.FB0EWCRV + 1; /* Add one to curve*/
    ;
    if (FB0EW00.FB0EWCRV == FB0EW00.FB4CRVNB[FB0EWIX2])
      FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1;
    else
      FB0EW02.FB4CRVNB[FB0EWIXM] = FB0EW00.FB0EWCRV;
      FB0EW00.FB0EWCRF = "Y";
    end
  end
  ;
  ;
end // end FB0E524

// Load temporary storage
Function FB0E540()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* First the current temporary storage page is updated.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0EW00.FB0EWIXM = +1; /* Initialize index*/
  while (FB0EW00.FB0EWIXM <= 10)
    if (FB0EW02.FB0EWMDF[FB0EWIXM] == "Y") /* Data modified*/
      FB0EW02.SY1STNBR[FB0EWIXM] = FB0EM010.SY1STNBR[FB0EWIXM];
      FB0EW02.SY2CLRID[FB0EWIXM] = FB0EM010.SY2CLRID[FB0EWIXM];
      FB0EW02.XDMCD[FB0EWIXM] = FB0EM010.XDMCD[FB0EWIXM];
      FB0EW02.SY1STYNM[FB0EWIXM] = FB0EM010.SY1STYNM[FB0EWIXM];
      FB0EW02.SY2CLRAB[FB0EWIXM] = FB0EM010.SY2CLRAB[FB0EWIXM];
    end
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    ;
  end
  ;
  FB0E221(); /* Update temporary storage*/
  ;
  ;
  set FB0EW03 empty; /* Initialize record.*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the current temporary storage page number.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW03.FB0EWTSP = FB0EW00.FB0EWTSP;
  ;
   /* ------------------------------------------------------------*/
   /* Init page requested to last page of database data*/
   /* Init index to the last line of database data on the page*/
   /* INit save style number index to 1*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWTSP = FB0EW00.FB0EWDBP; /* INit to last db data page*/
  FB0EW00.FB0EWIXM = FB0EW00.FB0EWDBL; /* Init to last db data line*/
  FB0EW00.FB0EWIX1 = +1;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the pages from temporary storage starting with the*/
   /* first page of database data.  Read all the pages from that*/
   /* point (bypass the current page).  Load any unprotected,*/
   /* (entered) non blank style numbers and related data into*/
   /* the fb0ew03 table.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0EW00.FB0EWTSP <= FB0EW00.TA5TSQIX)
    FB0E230(); /* Obtain page of temporary storage*/
    FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
    if (FB0EW00.FB0EWTSP != FB0EW03.FB0EWTSP) /* Skip current page*/
      while (FB0EWIXM <= 10)
        if (FB0EW02.FB0EWPTD[FB0EWIXM] != "Y" /* Unprotected style number*/
         && FB0EW02.SY1STNBR[FB0EWIXM] != " ")
          FB0EW03.SY1STNBR[FB0EWIX1] = FB0EW02.SY1STNBR[FB0EWIXM];
          FB0EW03.SY2CLRID[FB0EWIX1] = FB0EW02.SY2CLRID[FB0EWIXM];
          FB0EW03.XDMCD[FB0EWIX1] = FB0EW02.XDMCD[FB0EWIXM];
          FB0EW03.FB4CRVNB[FB0EWIX1] = FB0EW02.FB4CRVNB[FB0EWIXM];
          FB0EW03.FB0EWIVS[FB0EWIX1] = "N";
          FB0EW03.FB4STDFL[FB0EWIX1] = FB0EW02.FB4STDFL[FB0EWIXM];
          ;
          FB0EW03.XDVCD1[FB0EWIX1] = FB0EW02.XDVCD1[FB0EWIXM];
          ;
          FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
        end
        FB0EW00.FB0EWIXM = FB0EW00.FB0EWIXM + 1;
      end
    end
    FB0EW00.FB0EWTSP = FB0EW00.FB0EWTSP + 1;
    FB0EW00.FB0EWIXM = 0;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Restore the current temporary storage page and page*/
   /* request.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0EW00.FB0EWTSP = FB0EW03.FB0EWTSP;
  ;
  FB0E230(); /* Obtain page of temporary storage*/
  ;
  ;
  ;
end // end FB0E540

// Shift sizes for unlike sz scl
Function FB0E545()
  ;
   /* ------------------------------------------------------------*/
   /* In the case where a size scale '01' curve is being assigned*/
   /* to a product that has a size scale of '13', all size buckets*/
   /* must be shifted to the left 10 buckets.  For example size*/
   /* quantity 11 will get move to size quantity 01.*/
   /* Inversely, assigning a scale '13' curve to a scale '01' will*/
   /* cause shifting to the right.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (FB0EW00.FB0EWPSW == "DP"
   || FB0EW00.FB0EWPSW == "DU")
    ;
    ;
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      ;
      FB0EW00.FB0EWIX3 = 11; /* index for 'from' size*/
      while (FB0EW00.FB0EWIX3 <= 50) /* Max number of sizes*/
        FB0EW00.FB0EWIX4 = FB0EW00.FB0EWIX3 - 10; /* Index for 'to' size*/
        if (FB0EW00.FB0EWIX3 > 40) /**/
          FB0JW03.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW03.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW04.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW04.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW05.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW05.FB4SZPCT[FB0EWIX4] = 0;
        else
          FB0JW03.FB4SZPCT[FB0EWIX4] = FB0JW03.FB4SZPCT[FB0EWIX3];
          FB0JW03.FB4DMQTY[FB0EWIX4] = FB0JW03.FB4DMQTY[FB0EWIX3];
          FB0JW04.FB4SZPCT[FB0EWIX4] = FB0JW04.FB4SZPCT[FB0EWIX3];
          FB0JW04.FB4DMQTY[FB0EWIX4] = FB0JW04.FB4DMQTY[FB0EWIX3];
          FB0JW05.FB4SZPCT[FB0EWIX4] = FB0JW05.FB4SZPCT[FB0EWIX3];
          FB0JW05.FB4DMQTY[FB0EWIX4] = FB0JW05.FB4DMQTY[FB0EWIX3];
        end
        FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1;
      end
    end
    ;
    ;
    ;
    ;
    ;
    if (FB1REC.SY4SZSCL == "13"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
      ;
      FB0EW00.FB0EWIX3 = 30; /* index for 'from' size*/
      while (FB0EW00.FB0EWIX3 >= -9) /* Min number of sizes*/
        FB0EW00.FB0EWIX4 = FB0EW00.FB0EWIX3 + 10; /* Index for 'to' size*/
        if (FB0EW00.FB0EWIX3 < 1) /**/
          FB0JW03.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW03.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW04.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW04.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW05.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW05.FB4SZPCT[FB0EWIX4] = 0;
        else
          FB0JW03.FB4SZPCT[FB0EWIX4] = FB0JW03.FB4SZPCT[FB0EWIX3];
          FB0JW03.FB4DMQTY[FB0EWIX4] = FB0JW03.FB4DMQTY[FB0EWIX3];
          FB0JW04.FB4SZPCT[FB0EWIX4] = FB0JW04.FB4SZPCT[FB0EWIX3];
          FB0JW04.FB4DMQTY[FB0EWIX4] = FB0JW04.FB4DMQTY[FB0EWIX3];
          FB0JW05.FB4SZPCT[FB0EWIX4] = FB0JW05.FB4SZPCT[FB0EWIX3];
          FB0JW05.FB4DMQTY[FB0EWIX4] = FB0JW05.FB4DMQTY[FB0EWIX3];
        end
        FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 - 1;
      end
    end
    ;
    ;
  end
  ;
end // end FB0E545

// Validate product size percent
Function FB0E550()
  ;
   /* ------------------------------------------------------------*/
   /* Get size descriptions*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.XGPCD = COMMAREA.XGPCD;
  PG3REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
  PG3REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
  PG3REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
  ;
  PG3REC.PG3XDVCD = FB0EW03.XDVCD1[FB0EWIX1]; /* division code*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* default quality code to 1*/
   /* ------------------------------------------------------------*/
  ;
  PG3REC.XQACD = "01";
   /* ------------------------------------------------------------*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  TA1REC.TA1PGMNM = "FB0E550";
  ;
  ;
  ;
  XSPG301(); /* Get valid sizes*/
  ;
   /* ------------------------------------------------------------*/
   /* Check each warehouse (if it has a curve)  and set the*/
   /* invalid flag for any styles that fail the invalid size*/
   /* quantity/percent edits.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Warehouse one edits*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIVD = "N"; /* Init invalid data found flag*/
  ;
  if (FB0JW03.XWHCD > " ") /* Data for warehouse 1*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    FB0EW00.FB0EWPCT = 0; /* Sum percent field*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N") /* Or invalid data found*/
      if (FB0JW03.FB4QTYLK != "Y")
        /* ---------------------------------------------------*/
        /* Edit for invalid size with quantity*/
        /* ---------------------------------------------------*/
        if (FB0JW03.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        /* ---------------------------------------------------*/
        /* Edit for valid size with no quantity*/
        /* ---------------------------------------------------*/
        if (FB0EW00.FB0EWPSW == "DU"
         || FB0EW00.FB0EWPSW == "DU")
          if (FB0JW03.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
           && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
            FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
            FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
          end
        end
      end
      /* ---------------------------------------------------*/
      /* Edit for invalid size with a percent*/
      /* ---------------------------------------------------*/
      if (FB0JW03.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
        FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
                                   /* Set map invalid size flag*/
        FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
      end
      ;
      /* ---------------------------------------------------*/
      /* Edit for valid sizes with no percent*/
      /* ---------------------------------------------------*/
      if (FB0JW03.FB4SZPCT[FB0EWIX2] == 0 /* No percent*/
       && PG3REC.SY4IDDSC[FB0EWIX2] != " ") /* Size is valid*/
        if (FB0EW00.FB0EWPSW == "DP"
         || FB0EW00.FB0EWPSW == "DU")
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        ;
      end
      FB0EW00.FB0EWPCT = FB0EW00.FB0EWPCT + FB0JW03.FB4SZPCT[FB0EWIX2];
                       /* to summarize size percent. total must = 100*/
      ;
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1;
    end
    ;
    /* ---------------------------------------------------*/
    /* Edit for total size percent = 100*/
    /* ---------------------------------------------------*/
    if (FB0EW00.FB0EWPCT != 100)
      FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Set map invalid size flag*/
      FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Warehouse two edits*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0JW04.XWHCD > " ") /* Data for warehouse 1*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    FB0EW00.FB0EWPCT = 0; /* Sum percent field*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N") /* Or invalid data found*/
      if (FB0JW04.FB4QTYLK != "Y")
        /* ---------------------------------------------------*/
        /* Edit for invalid size with quantity*/
        /* ---------------------------------------------------*/
        if (FB0JW04.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        /* ---------------------------------------------------*/
        /* Edit for valid size with no quantity*/
        /* ---------------------------------------------------*/
        if (FB0EW00.FB0EWPSW == "DU"
         || FB0EW00.FB0EWPSW == "DU")
          if (FB0JW04.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
           && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
            FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
            FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
          end
        end
      end
      /* ---------------------------------------------------*/
      /* Edit for invalid size with a percent*/
      /* ---------------------------------------------------*/
      if (FB0JW04.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
        FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
                                   /* Set map invalid size flag*/
        FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
      end
      ;
      /* ---------------------------------------------------*/
      /* Edit for valid sizes with no percent*/
      /* ---------------------------------------------------*/
      if (FB0JW04.FB4SZPCT[FB0EWIX2] == 0 /* No percent*/
       && PG3REC.SY4IDDSC[FB0EWIX2] != " ") /* Size is valid*/
        if (FB0EW00.FB0EWPSW == "DP"
         || FB0EW00.FB0EWPSW == "DU")
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        ;
      end
      FB0EW00.FB0EWPCT = FB0EW00.FB0EWPCT + FB0JW04.FB4SZPCT[FB0EWIX2];
                       /* to summarize size percent. total must = 100*/
      ;
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1;
    end
    ;
    /* ---------------------------------------------------*/
    /* Edit for total size percent = 100*/
    /* ---------------------------------------------------*/
    if (FB0EW00.FB0EWPCT != 100)
      FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Set map invalid size flag*/
      FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Warehouse Three edits*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FB0JW05.XWHCD > " ") /* Data for warehouse 1*/
    FB0EW00.FB0EWIX2 = 1; /* General index 1*/
    FB0EW00.FB0EWPCT = 0; /* Sum percent field*/
    while (FB0EW00.FB0EWIX2 <= 40 /* Max number of sizes*/
     && FB0EW00.FB0EWIVD == "N") /* Or invalid data found*/
      if (FB0JW05.FB4QTYLK != "Y")
        /* ---------------------------------------------------*/
        /* Edit for invalid size with quantity*/
        /* ---------------------------------------------------*/
        if (FB0JW05.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
         && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        /* ---------------------------------------------------*/
        /* Edit for valid size with no quantity*/
        /* ---------------------------------------------------*/
        if (FB0EW00.FB0EWPSW == "DU"
         || FB0EW00.FB0EWPSW == "DU")
          if (FB0JW05.FB4DMQTY[FB0EWIX2] != 0 /* Quantity exists*/
           && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
            FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Invalid product flag*/
            FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
          end
        end
      end
      /* ---------------------------------------------------*/
      /* Edit for invalid size with a percent*/
      /* ---------------------------------------------------*/
      if (FB0JW05.FB4SZPCT[FB0EWIX2] != 0 /* Percent exists*/
       && PG3REC.SY4IDDSC[FB0EWIX2] == " ") /* for an invalid size*/
        FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
                                   /* Set map invalid size flag*/
        FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
      end
      ;
      /* ---------------------------------------------------*/
      /* Edit for valid sizes with no percent*/
      /* ---------------------------------------------------*/
      if (FB0JW05.FB4SZPCT[FB0EWIX2] == 0 /* No percent*/
       && PG3REC.SY4IDDSC[FB0EWIX2] != " ") /* Size is valid*/
        if (FB0EW00.FB0EWPSW == "DP"
         || FB0EW00.FB0EWPSW == "DU")
          FB0EW03.FB0EWIVS[FB0EWIX1] = "Y";
          FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
        end
        ;
      end
      FB0EW00.FB0EWPCT = FB0EW00.FB0EWPCT + FB0JW05.FB4SZPCT[FB0EWIX2];
                       /* to summarize size percent. total must = 100*/
      ;
      FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1;
    end
    ;
    /* ---------------------------------------------------*/
    /* Edit for total size percent = 100*/
    /* ---------------------------------------------------*/
    if (FB0EW00.FB0EWPCT != 100)
      FB0EW03.FB0EWIVS[FB0EWIX1] = "Y"; /* Set map invalid size flag*/
      FB0EW00.FB0EWIVD = "Y"; /* Invalid data found*/
    end
  end
  ;
  ;
end // end FB0E550

// Reset sizes for unlike sz scl
Function FB0E555()
  ;
   /* ------------------------------------------------------------*/
   /* Reset Size Buckets*/
   /* In the case where a size scale '13' curve is being assigned*/
   /* to a product that has a size scale of '01', all size buckets*/
   /* must be shifted to the left 10 buckets.  For example size*/
   /* quantity 11 will get move to size quantity 01.*/
   /* Inversely, assigning a scale '01' curve to a scale '13' will*/
   /* cause shifting to the right.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FB0EW00.FB0EWPSW == "DP"
   || FB0EW00.FB0EWPSW == "DU")
    ;
    ;
    ;
    if (FB1REC.SY4SZSCL == "13"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
      ;
      FB0EW00.FB0EWIX3 = 11; /* index for 'from' size*/
      while (FB0EW00.FB0EWIX3 <= 50) /* Max number of sizes*/
        FB0EW00.FB0EWIX4 = FB0EW00.FB0EWIX3 - 10; /* Index for 'to' size*/
        if (FB0EW00.FB0EWIX3 > 40) /**/
          FB0JW03.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW03.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW04.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW04.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW05.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW05.FB4SZPCT[FB0EWIX4] = 0;
        else
          FB0JW03.FB4SZPCT[FB0EWIX4] = FB0JW03.FB4SZPCT[FB0EWIX3];
          FB0JW03.FB4DMQTY[FB0EWIX4] = FB0JW03.FB4DMQTY[FB0EWIX3];
          FB0JW04.FB4SZPCT[FB0EWIX4] = FB0JW04.FB4SZPCT[FB0EWIX3];
          FB0JW04.FB4DMQTY[FB0EWIX4] = FB0JW04.FB4DMQTY[FB0EWIX3];
          FB0JW05.FB4SZPCT[FB0EWIX4] = FB0JW05.FB4SZPCT[FB0EWIX3];
          FB0JW05.FB4DMQTY[FB0EWIX4] = FB0JW05.FB4DMQTY[FB0EWIX3];
        end
        FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1;
      end
    end
    ;
    ;
    ;
    ;
    ;
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      ;
      FB0EW00.FB0EWIX3 = 30; /* index for 'from' size*/
      while (FB0EW00.FB0EWIX3 >= -9) /* Min number of sizes*/
        FB0EW00.FB0EWIX4 = FB0EW00.FB0EWIX3 + 10; /* Index for 'to' size*/
        if (FB0EW00.FB0EWIX3 < 1) /**/
          FB0JW03.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW03.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW04.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW04.FB4SZPCT[FB0EWIX4] = 0;
          FB0JW05.FB4DMQTY[FB0EWIX4] = 0;
          FB0JW05.FB4SZPCT[FB0EWIX4] = 0;
        else
          FB0JW03.FB4SZPCT[FB0EWIX4] = FB0JW03.FB4SZPCT[FB0EWIX3];
          FB0JW03.FB4DMQTY[FB0EWIX4] = FB0JW03.FB4DMQTY[FB0EWIX3];
          FB0JW04.FB4SZPCT[FB0EWIX4] = FB0JW04.FB4SZPCT[FB0EWIX3];
          FB0JW04.FB4DMQTY[FB0EWIX4] = FB0JW04.FB4DMQTY[FB0EWIX3];
          FB0JW05.FB4SZPCT[FB0EWIX4] = FB0JW05.FB4SZPCT[FB0EWIX3];
          FB0JW05.FB4DMQTY[FB0EWIX4] = FB0JW05.FB4DMQTY[FB0EWIX3];
        end
        FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 - 1;
      end
    end
    ;
    ;
  end
  ;
end // end FB0E555

// Process valid input request
Function FB0E600()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FB0EW00.FB0EWTSP = FB0EW00.FB0EWTSP - 1; /* Decrement page number*/
    converseLib.validationFailed(13);
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FB0EW00.FB0EWTSP = FB0EW00.FB0EWTSP + 1; /* Increment page number*/
    converseLib.validationFailed(12);
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is pf9 /* Update & make std requested*/
   || converseVar.eventKey is pf13) /* Update requested*/
    ;
    FB0E610(); /* Assign curve to product*/
    ;
  end
end // end FB0E600

// Assign curve to product
Function FB0E610()
  ;
   /* ------------------------------------------------------------*/
   /* Updates are processed as follows:*/
     /* For each style number that is not flagged as having an*/
      /* invalid size:*/
      /* 1).  Create the vcurve01 rows for each warehouse having*/
           /* curve data in fb0j03, fb0j04, and fb0j05 records.*/
           /* After storing all the curves for a style do a*/
           /* database committ.*/
     /* When a style number flagged as invalid is reached:*/
      /* 1).  Database update terminates for the current style*/
           /* and any subsequent.*/
           /* The remaining style numbers are moved to the*/
           /* record array.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Init the fb0jw02 record  and processing flags*/
   /* ------------------------------------------------------------*/
  ;
  move " " to FB0JW02.SY1STNBR[1] for all;
  move " " to FB0JW02.SY2CLRID[1] for all;
  move " " to FB0JW02.XDMCD[1] for all;
  move " " to FB0JW02.XQACD[1] for all;
  move " " to FB0JW02.PC2INSEG[1] for all;
  move " " to FB0JW02.XPGCD[1] for all;
  move " " to FB0JW02.XUMCD[1] for all;
  move "N" to FB0JW02.FB0JWIVS[1] for all;
  ;
  FB0EW00.FB0EWUTS = "N"; /* Init unpdate temp storage flag*/
  FB0EW00.FB0EWIVD = "N"; /* Init invalid data flag*/
  FB0EW00.FB0EWDBW = "N"; /* Init database rows written flag*/
  FB0EW00.FB0EWIX1 = +1;
                                   /* Init index used for loading fb0j data*/
  ;
   /* ------------------------------------------------------------*/
   /* Create vcurve01 records for all the style numbers that*/
   /* exist in the fb0ew03 record.*/
   /* Once an invalid style number has been found no more*/
   /* database records are created and the remaining styles*/
   /* are moved to the fb0jw02 passed record fields.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = +1;
  FB0EW00.FB0EWIX2 = +1;
  ;
  while (FB0EWIX1 <= 27)
    if (FB0EW03.SY1STNBR[FB0EWIX1] != " ")
      if (converseVar.eventKey is pf9)
        FB0EW03.FB4STDFL[FB0EWIX1] = "Y";
      end
      FB0E545(); /* Shift sizes for unlike sz scales*/
      if (FB0EW03.FB0EWIVS[FB0EWIX1] == "Y") /* Has invalid size*/
        FB0EW00.FB0EWIVD = "Y"; /* Invalid data found flag*/
      end
      if (FB0EW00.FB0EWIVD != "Y") /* ; Data not invalid*/
        FB0EW00.FB0EWDBW = "Y"; /* Database rows written flag*/
        FB0E611(); /* Create database records*/
        FB0E555(); /* reset sizes for unlike sz scales*/
      else
        FB0E612(); /* Move data to fb0jw02 fields*/
        FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1;
      end
    end
    FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Display message based upon whether or not any style numbers*/
   /* have invalid sizes.  Set the two display data flags on.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (FB0EW00.FB0EWIVD == "Y") /* Invalid data found*/
    FB0EW00.FB0EWDSW = "Y"; /* Display data flag*/
    FB0EW00.FB0EWPSW = "IP"; /* Invalid product curve*/
    ;
    if (FB0EW00.FB0EWDBW == "Y") /* Database rows written*/
      converseLib.validationFailed(69); /* Update partially successful*/
    else
      converseLib.validationFailed(74);
                                   /* No updates--highlighted products etc.*/
    end
    ;
  else
    if (FB0EW00.FB0EWDBW == "Y") /* Database rows written*/
      FB0EW00.FB0EWDSW = "Y"; /* Display data flag*/
      FB0EW00.FB0EWPSW = "DP"; /* Display product curve*/
      converseLib.validationFailed(32); /* Update completely successful*/
      set FB0JW02 empty; /* Init records used by fb0j*/
    end
  end
  ;
  ;
  ;
end // end FB0E610

// Create vcurve01 data records
Function FB0E611()
   /* ------------------------------------------------------*/
   /* Check to see if need to get next fb-intrn-seq-nbr*/
   /* ------------------------------------------------------*/
  ;
  if (FB0JW03.XWHCD > " " /* First warehouse*/
   || FB0JW04.XWHCD > " " /* Second warehouse*/
   || FB0JW05.XWHCD > " ") /* Third warehouse*/
    ;
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      FB0E631(); /* Get next fb-intrn-seq-nbr*/
    end
    ;
    if (FB1REC.SY4SZSCL == "13"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
      FB0E631(); /* Get next fb-intrn-seq-nbr*/
    end
  end
  ;
   /* ------------------------------------------------------*/
   /* For each 'from' vcurve create a curve for the style.*/
   /* If pf9 - update & make the standard, set the std*/
   /* flag to 'n' where the flag is = 'y'.*/
   /* ------------------------------------------------------*/
  ;
  if (FB0JW03.XWHCD > " ") /* First warehouse*/
    ;
    set FB4REC empty;
    ;
    if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
     || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
      FB4REC.XGPCD = FBWREC.XGPCD;
      FB4REC.XQACD = FBWREC.XQACD;
      FB4REC.PC2INSEG = FBWREC.PC2INSEG;
      FB4REC.XSACD = FBWREC.XSACD;
      FB4REC.XPGCD = FBWREC.XPGCD;
      FB4REC.XUMCD = FBWREC.XUMCD;
    else
      FB4REC.XGPCD = COMMAREA.XGPCD;
      FB4REC.XQACD = "01";
      FB4REC.PC2INSEG = "000";
      FB4REC.XSACD = "000";
      FB4REC.XPGCD = "00";
      FB4REC.XUMCD = "01";
    end
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      FB4REC.FB1INSEQ = FB3REC.FB1INSEQ; /* new nbr*/
    else
      if (FB1REC.SY4SZSCL == "13"
       && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
        FB4REC.FB1INSEQ = FB3REC.FB1INSEQ; /* new nbr*/
      else
        FB4REC.FB1INSEQ = FBWREC.FB1INSEQ;
      end
    end
    FB4REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
    FB4REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
    FB4REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
    FB4REC.FB4CRVNB = FB0EW03.FB4CRVNB[FB0EWIX1];
    FB4REC.FB4STDFL = FB0EW03.FB4STDFL[FB0EWIX1];
    FB4REC.XWHCD = FB0JW03.XWHCD;
    ;
    FB0ES06(); /* check curve existence*/
    ;
    if (FB0EW00.FB0EWDEF == "N") /* duplicate curve not exist*/
      if (converseVar.eventKey is pf9) /* updt & make std requested*/
        FB0E616(); /* reset old std flags*/
      end
      set FB4REC empty;
      FB4REC.XWHCD = FB0JW03.XWHCD;
      FB4REC.FB4QTYLK = FB0JW03.FB4QTYLK;
      FB4REC.FB4RGPCT = FB0JW03.FB4RGPCT;
      move FB0JW03.FB4DMQTY to FB4REC.FB4DMQTY[1] for all;
      move FB0JW03.FB4SZPCT to FB4REC.FB4SZPCT[1] for all;
      FB4REC.ZZZSDT = FB0JW03.ZZZSDT;
      FB0ES08(); /* insert curve*/
      FB0ES09(); /* check for duplicate std curves*/
    end
    ;
  end
  ;
  if (FB0JW04.XWHCD > " ") /* Second warehouse*/
    ;
    set FB4REC empty;
    ;
    if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
     || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
      FB4REC.XGPCD = FBWREC.XGPCD;
      FB4REC.XQACD = FBWREC.XQACD;
      FB4REC.PC2INSEG = FBWREC.PC2INSEG;
      FB4REC.XSACD = FBWREC.XSACD;
      FB4REC.XPGCD = FBWREC.XPGCD;
      FB4REC.XUMCD = FBWREC.XUMCD;
    else
      FB4REC.XGPCD = COMMAREA.XGPCD;
      FB4REC.XQACD = "01";
      FB4REC.PC2INSEG = "000";
      FB4REC.XSACD = "000";
      FB4REC.XPGCD = "00";
      FB4REC.XUMCD = "01";
    end
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      FB4REC.FB1INSEQ = FB3REC.FB1INSEQ;
    else
      if (FB1REC.SY4SZSCL == "13"
       && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
        FB4REC.FB1INSEQ = FB3REC.FB1INSEQ;
      else
        FB4REC.FB1INSEQ = FBWREC.FB1INSEQ;
      end
    end
    FB4REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
    FB4REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
    FB4REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
    FB4REC.FB4CRVNB = FB0EW03.FB4CRVNB[FB0EWIX1];
    FB4REC.FB4STDFL = FB0EW03.FB4STDFL[FB0EWIX1];
    FB4REC.XWHCD = FB0JW04.XWHCD;
    FB4REC.FB4QTYLK = FB0JW04.FB4QTYLK;
    FB4REC.FB4RGPCT = FB0JW04.FB4RGPCT;
    move FB0JW04.FB4DMQTY to FB4REC.FB4DMQTY[1] for all;
    move FB0JW04.FB4SZPCT to FB4REC.FB4SZPCT[1] for all;
    FB4REC.ZZZSDT = FB0JW04.ZZZSDT;
    ;
    if (FB0EW00.FB0EWDEF == "N") /* duplicate curve not exist*/
      FB0ES08(); /* insert curve*/
      FB0ES09(); /* check for duplicate std curves*/
    end
    ;
  end
  ;
  if (FB0JW05.XWHCD > " ") /* Third warehouse*/
    ;
    set FB4REC empty;
    ;
    if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
     || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
      FB4REC.XGPCD = FBWREC.XGPCD;
      FB4REC.XQACD = FBWREC.XQACD;
      FB4REC.PC2INSEG = FBWREC.PC2INSEG;
      FB4REC.XSACD = FBWREC.XSACD;
      FB4REC.XPGCD = FBWREC.XPGCD;
      FB4REC.XUMCD = FBWREC.XUMCD;
    else
      FB4REC.XGPCD = COMMAREA.XGPCD;
      FB4REC.XQACD = "01";
      FB4REC.PC2INSEG = "000";
      FB4REC.XSACD = "000";
      FB4REC.XPGCD = "00";
      FB4REC.XUMCD = "01";
    end
    if (FB1REC.SY4SZSCL == "01"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
      FB4REC.FB1INSEQ = FB3REC.FB1INSEQ;
    else
      if (FB1REC.SY4SZSCL == "13"
       && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
        FB4REC.FB1INSEQ = FB3REC.FB1INSEQ;
      else
        FB4REC.FB1INSEQ = FBWREC.FB1INSEQ;
      end
    end
    FB4REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
    FB4REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
    FB4REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
    FB4REC.FB4CRVNB = FB0EW03.FB4CRVNB[FB0EWIX1];
    FB4REC.FB4STDFL = FB0EW03.FB4STDFL[FB0EWIX1];
    FB4REC.XWHCD = FB0JW05.XWHCD;
    FB4REC.FB4QTYLK = FB0JW05.FB4QTYLK;
    FB4REC.FB4RGPCT = FB0JW05.FB4RGPCT;
    move FB0JW05.FB4DMQTY to FB4REC.FB4DMQTY[1] for all;
    move FB0JW05.FB4SZPCT to FB4REC.FB4SZPCT[1] for all;
    FB4REC.ZZZSDT = FB0JW05.ZZZSDT;
    ;
    if (FB0EW00.FB0EWDEF == "N") /* duplicate curve not exist*/
      FB0ES08(); /* insert curve*/
      FB0ES09(); /* check for duplicate std curves*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------*/
   /* If vcurve01 rows were written and the 'assigned to'*/
   /* styles size scale is different,  then a new set of*/
   /* selection rows must be written with the different*/
   /* size scale.*/
   /* ------------------------------------------------------*/
  if (FB0JW03.XWHCD > " " /* First warehouse*/
   || FB0JW04.XWHCD > " " /* Second warehouse*/
   || FB0JW05.XWHCD > " ") /* Third warehouse*/
    if (FB0EW00.FB0EWDEF == "N") /* no duplicate curves*/
      if (FB1REC.SY4SZSCL == "01"
       && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
        FB0E630(); /* Write new selection rows*/
      end
      if (FB1REC.SY4SZSCL == "13"
       && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
        FB0E630(); /* Write new selection rows*/
      end
    end
  end
  ;
  ;
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
  end
  ;
  ;
end // end FB0E611

// Format invalid size fields
Function FB0E612()
   /* ------------------------------------------------------------*/
   /* Move fields from the display storage record to the*/
   /* fields in the record passed to application fb0j*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  FB0JW02.XGPCD[FB0EWIX2] = FB4REC.XGPCD;
  FB0JW02.SY1STNBR[FB0EWIX2] = FB0EW03.SY1STNBR[FB0EWIX1];
  FB0JW02.SY2CLRID[FB0EWIX2] = FB0EW03.SY2CLRID[FB0EWIX1];
  FB0JW02.XDMCD[FB0EWIX2] = FB0EW03.XDMCD[FB0EWIX1];
  FB0JW02.FB4STDFL[FB0EWIX2] = FB0EW03.FB4STDFL[FB0EWIX1];
  FB0JW02.FB4CRVNB[FB0EWIX2] = FB0EW03.FB4CRVNB[FB0EWIX1];
  FB0JW02.FB0JWIVS[FB0EWIX2] = FB0EW03.FB0EWIVS[FB0EWIX1];
  FB0JW02.SY4SZSCL[FB0EWIX2] = FB0EW03.SY4SZSCL[FB0EWIX1];
  ;
  ;
end // end FB0E612

// Reset old standard flag
Function FB0E616()
  ;
  set FB4REC empty;
  ;
  if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
   || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
    FB4REC.XGPCD = FBWREC.XGPCD;
    FB4REC.XQACD = FBWREC.XQACD;
    FB4REC.PC2INSEG = FBWREC.PC2INSEG;
    FB4REC.XSACD = FBWREC.XSACD;
    FB4REC.XPGCD = FBWREC.XPGCD;
    FB4REC.XUMCD = FBWREC.XUMCD;
  else
    FB4REC.XGPCD = COMMAREA.XGPCD;
    FB4REC.XQACD = "01";
    FB4REC.PC2INSEG = "000";
    FB4REC.XSACD = "000";
    FB4REC.XPGCD = "00";
    FB4REC.XUMCD = "01";
  end
  FB4REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
  FB4REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
  FB4REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
  FB4REC.FB1INSEQ = -1; /* wildcard intrn-seq-nbr*/
  ;
  ;
  FB0E617(); /* Select set for vcurve01*/
  ;
  FB0EW00.FB0EWCCF = "N"; /* end of set sw*/
  ;
  ;
  while (FB0EW00.FB0EWCCF != "Y") /* While not end of set*/
    ;
    FB0E618(); /* Select next vcurve01*/
    if (FB4REC.FB4STDFL == "Y") /* standard curve*/
      FB0E620(); /* reset to non-standard*/
    end
  end
  ;
  FB0E619(); /* Close set for vcurve01*/
  ;
  ;
end // end FB0E616

// Select set vcurve01
Function FB0E617()
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "617"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes made by user*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0E617

// Select next vcurve01 row
Function FB0E618()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0EW00.FB0EWCCF = "Y";
      return; /* Return to previous process*/
      ;
      ;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "618"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes made by user*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E618

// close vcurve01 set
Function FB0E619()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "619"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes made by user*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E619

// Reset to non-standard
Function FB0E620()
  ;
   /* ------------------------------------------------------------*/
   /* Update vcurve01*/
   /* ------------------------------------------------------------*/
  FB4REC.FB4STDFL = "N"; /* Standard flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date and time for change date and time.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3020" ("U ", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        converseLib.validationFailed(47); /* Data in use by another user*/
        ;
      else
        ;
        converseLib.validationFailed(01); /* 'error - please nofity programming'*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
      end
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes made by user*/
  ;
  TA1REC.TA1LOC = "UPDATE STANDARD FLAG";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0E620

// Write new selection rows
Function FB0E630()
  ;
   /* ------------------------------------------------------------*/
   /* In the case where a size scale '01' curve is being assigned*/
   /* to a product that has a size scale of '13', a new set of*/
   /* selection rows must be written with size scale '13' in the*/
   /* selection header row.*/
   /* When assigning a scale '13' curve to a scale '01', a new set*/
   /* of selection rows must be written with size scale '01' in*/
   /* the selection header row.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FB1REC.SY4SZSCL == "01"
   && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
    ;
    FB1REC.SY4SZSCL = "13"; /* size scale '13'*/
    FB0E636(); /* Insert new vselhd01 row*/
    FB1REC.SY4SZSCL = "01"; /* Reset size scale*/
    ;
    FB0EW00.FB0EWIX3 = 1;
    while (FB0EW00.FB0EWIX3 <= 6
     && FB0EW04.FB0EWGR4[FB0EWIX3] != " ")
      FB0E637(); /* Insert new vseldt01 rows*/
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1; /* increment index*/
    end
    ;
    FB0EW00.FB0EWIX3 = 1;
    while (FB0EW00.FB0EWIX3 <= 50
     && FB0EW05.FB0EWGR5[FB0EWIX3] != " ")
      FB0E638(); /* Insert new vselst01 rows*/
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1; /* increment index*/
    end
    ;
    FB0E632(); /* Get/updt FB-INTRN-SEQ-NBR*/
    ;
  end
  ;
  if (FB1REC.SY4SZSCL == "13"
   && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
    ;
    FB1REC.SY4SZSCL = "01"; /* size scale '13'*/
    FB0E636(); /* Insert new vselhd01 row*/
    FB1REC.SY4SZSCL = "13"; /* Reset size scale*/
    ;
    FB0EW00.FB0EWIX3 = 1;
    while (FB0EW00.FB0EWIX3 <= 6
     && FB0EW04.FB0EWGR4[FB0EWIX3] != " ")
      FB0E637(); /* Insert new vseldt01 rows*/
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1; /* increment index*/
    end
    ;
    FB0EW00.FB0EWIX3 = 1;
    while (FB0EW00.FB0EWIX3 <= 50
     && FB0EW05.FB0EWGR5[FB0EWIX3] != " ")
      FB0E638(); /* Insert new vselst01 rows*/
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1; /* increment index*/
    end
    ;
    FB0E632(); /* Get/updt FB-INTRN-SEQ-NBR*/
    ;
  end
  ;
  ;
  ;
end // end FB0E630

// Get next fb-intrn-seq-nbr
Function FB0E631()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage area*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FB3REC empty; /* Clear row storage area*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select and update the requested table row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3430" ("S ", SQLCA, FB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "631"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VFBCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB3REC.FB3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0E631

// update fb-intrn-seq-nbr
Function FB0E632()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage area*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FB3REC empty; /* Clear row storage area*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select and update the requested table row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3430" ("SU", SQLCA, FB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "632"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VFBCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB3REC.FB3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0E632

// Write new vselhd01 row
Function FB0E636()
   /* ------------------------------------------------------------*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/
  ;
  FB1REC.FB1INSEQ = FB3REC.FB1INSEQ;
  FB1REC.FB1CRVST = "4"; /* Curve status = assigned*/
  XX0XS01();
  FB1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FB1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FB1REC.ZZZCHGCT = 0; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert vselhd01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("A ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0EM010.XXXMODID = "636"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "636"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0E636

// Write new vseldt01 rows
Function FB0E637()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize record*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/
  ;
  set FB5REC empty; /* Initialize record*/
  ;
  ;
  FB5REC.FB5GROUP = FB0EW04.FB0EWGR4[FB0EWIX3];
  FB5REC.FB1INSEQ = FB3REC.FB1INSEQ;
  XX0XS01();
  FB5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FB5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB5REC.ZZZCHGCT = 0; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert vseldt01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("A ", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0EM010.XXXMODID = "637"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "637"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0E637

// Write new vselst01 rows
Function FB0E638()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize record*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/
  ;
  set FB6REC empty; /* Initialize record*/
  ;
  FB6REC.FB6GROUP = FB0EW05.FB0EWGR5[FB0EWIX3];
  FB6REC.FB1INSEQ = FB3REC.FB1INSEQ;
  XX0XS01();
  FB6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB6REC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FB6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB6REC.ZZZCHGCT = 0; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert vselst01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3060" ("A ", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0EM010.XXXMODID = "638"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "638"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0E638

// open vseldt01 set
Function FB0ES01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FB5REC empty; /* clear row storage area*/
  FB0EW00.FB0EWDCF = "N"; /* End of vseldt01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key with fbwrec sequence number*/
   /* ------------------------------------------------------------*/
  ;
  FB5REC.FB1INSEQ = FBWREC.FB1INSEQ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VSELDT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB2REC.FB2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0ES01

// Get next vseldt01 row
Function FB0ES02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0EW04.FB0EWGR4[FB0EWIX3] = FB5REC.FB5GROUP;
      FB0EW00.FB0EWIX3 = FB0EW00.FB0EWIX3 + 1;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0EW00.FB0EWDCF = "Y"; /* Indicate vseldt01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0ES02

// get need dates
Function FB0ES03()
  ;
   /* ------------------------------------------------------------*/
   /* Move the dates from the record to working storage to format*/
   /* and then move the formated month and year to the map*/
   /* storage fields.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX1 = FB0EW00.FB0EWIX1 + 1; /* Increment date index*/
  ;
  FB0EW00.FB0EWFDT = FB5REC.FB5TODT; /* TO date*/
  FB0EW01.FB0EWTOM[FB0EWIX1] = FB0EW00.FB0EWFMM; /* To month*/
  FB0EW01.FB0EWTOY[FB0EWIX1] = FB0EW00.FB0EWFYY; /* To year*/
  FB0EW00.FB0EWFDT = FB5REC.FB5FRMDT; /* From date*/
  FB0EW01.FB0EWFRM[FB0EWIX1] = FB0EW00.FB0EWFMM; /* From month*/
  FB0EW01.FB0EWFRY[FB0EWIX1] = FB0EW00.FB0EWFYY; /* From year*/
  ;
  FB0EW00.FB0EWDTC = FB0EW00.FB0EWDTC + 1; /* Increment date counter*/
  ;
   /* ------------------------------------------------------------*/
   /* Starting a new line of dates --set the order type group*/
   /* index up.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWDTC == 2)
    FB0EW00.FB0EWIX2 = 3;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Save the from date in working storage and use it for*/
   /* comparing the next retrieved from date.  Up to 3 order*/
   /* type group codes for a date can be displayed on the map*/
   /* so a maximum of 3 duplicate date records can be retrieved.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWFRD = FB5REC.FB5FRMDT; /* save current date*/
  FB0EW00.FB0EWOTC = 0; /* Initialize order type group counter*/
  ;
  while (FB0EW00.FB0EWDCF != "Y"             /* Not end of set and*/
   && FB5REC.FB5FRMDT == FB0EW00.FB0EWFRD /* Current from date equal prior*/
   && FB0EW00.FB0EWOTC < 3) /* and number of group codes not > 3*/
    ;
    FB0ES05();
                                   /* Get order type group codes for a date*/
  end
  ;
  while (FB0EW00.FB0EWDCF != "Y" /* Not end of set and*/
   && FB5REC.FB5FRMDT == FB0EW00.FB0EWFRD) /* Current from date equal prior*/
    ;
    FB0ES02();
  end
  ;
end // end FB0ES03
// close vseldt01 set
Function FB0ES04()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0EM010.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0ES04

// get order group codes for date
Function FB0ES05()
  ;
   /* ------------------------------------------------------------*/
   /* Increment the order type group index and move the order*/
   /* type group field to display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWIX2 = FB0EW00.FB0EWIX2 + 1; /* Increment order etc index*/
  ;
  ;
  FB0EW01.YSMXOT[FB0EWIX2] = FB5REC.YSMXOT;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Increment the order type group counter*/
   /* ------------------------------------------------------------*/
  ;
  FB0EW00.FB0EWOTC = FB0EW00.FB0EWOTC + 1;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next vseldt01 row.*/
   /* ------------------------------------------------------------*/
  ;
  FB0ES02(); /* Fetch vseldt01 row*/
  ;
end // end FB0ES05

// Check for dupe curve
Function FB0ES06()
   /* ------------------------------------------------------------*/
   /* Select vcurve01 row*/
   /* ------------------------------------------------------------*/
   /*  */
  if (FB4REC.XGPCD == "  ")
    FB4REC.XGPCD = "02"; /* DEFAULT GPC CODE*/
    FB4REC.XQACD = "01"; /* DEFAULT quality code*/
    FB4REC.PC2INSEG = "000"; /* DEFAULT i-seg code*/
    FB4REC.XSACD = "000"; /* DEFAULT shade code*/
    FB4REC.XPGCD = "00"; /* DEFAULT package type*/
    FB4REC.XUMCD = "01"; /* DEFAULT unit of measure*/
  end
  ;
  try
    call "IO3020" ("S ", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0EW00.FB0EWDEF = "Y"; /* Dupe curve found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* not found*/
        FB0EW00.FB0EWDEF = "N"; /* Dupe curve not found*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* database currently in use*/
          FB0EM010.XXXMODID = "S06"; /* Module identification*/
          converseLib.validationFailed(57); /* 'database currently in use'*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* rollback changes made by user*/
          converseLib.validationFailed(48); /* 'fatal data base error'*/
        end
      end
    end
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "S06"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CHECK FOR DUPLICATES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0ES06

// Insert vcurve01 row
Function FB0ES08()
   /* ------------------------------------------------------------*/
   /* Build & insert new curve*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0EW00.FB0EWPSW == "DP" /* Display product or*/
   || FB0EW00.FB0EWPSW == "IP") /* Invalid product*/
    FB4REC.XGPCD = FBWREC.XGPCD;
    FB4REC.XQACD = FBWREC.XQACD;
    FB4REC.PC2INSEG = FBWREC.PC2INSEG;
    FB4REC.XSACD = FBWREC.XSACD;
    FB4REC.XPGCD = FBWREC.XPGCD;
    FB4REC.XUMCD = FBWREC.XUMCD;
  else
    FB4REC.XGPCD = COMMAREA.XGPCD;
    FB4REC.XQACD = "01";
    FB4REC.PC2INSEG = "000";
    FB4REC.XSACD = "000";
    FB4REC.XPGCD = "00";
    FB4REC.XUMCD = "01";
  end
  ;
  if (FB1REC.SY4SZSCL == "01"
   && FB0EW03.SY4SZSCL[FB0EWIX1] == "13")
    FB4REC.FB1INSEQ = FB3REC.FB1INSEQ; /* new nbr*/
  else
    if (FB1REC.SY4SZSCL == "13"
     && FB0EW03.SY4SZSCL[FB0EWIX1] == "01")
      FB4REC.FB1INSEQ = FB3REC.FB1INSEQ; /* new nbr*/
    else
      FB4REC.FB1INSEQ = FBWREC.FB1INSEQ;
    end
  end
  ;
  FB4REC.SY1STNBR = FB0EW03.SY1STNBR[FB0EWIX1];
  FB4REC.SY2CLRID = FB0EW03.SY2CLRID[FB0EWIX1];
  FB4REC.XDMCD = FB0EW03.XDMCD[FB0EWIX1];
  FB4REC.FB4CRVNB = FB0EW03.FB4CRVNB[FB0EWIX1];
  FB4REC.FB4STDFL = FB0EW03.FB4STDFL[FB0EWIX1];
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date and time for change date and time.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB4REC.ZZZCHGCT = 0; /* Change count*/
  ;
   /* ------------------------------------------------------------*/
   /* Add vcurve01 row*/
   /* ------------------------------------------------------------*/
   /*  */
  if (FB4REC.XGPCD == "  ")
    FB4REC.XGPCD = "02"; /* DEFAULT GPC CODE*/
    FB4REC.XQACD = "01"; /* DEFAULT quality code*/
    FB4REC.PC2INSEG = "000"; /* DEFAULT i-seg code*/
    FB4REC.XSACD = "000"; /* DEFAULT shade code*/
    FB4REC.XPGCD = "00"; /* DEFAULT package type*/
    FB4REC.XUMCD = "01"; /* DEFAULT unit of measure*/
  end
  ;
  try
    call "IO3020" ("A ", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database currently in use*/
        FB0EM010.XXXMODID = "S08"; /* Module identification*/
        converseLib.validationFailed(57); /* 'database currently in use'*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        ;
      else
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        converseLib.validationFailed(48); /* 'fatal data base error'*/
      end
    end
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "S08"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0ES08

// Check duplicate stds
Function FB0ES09()
   /* ------------------------------------------------------------*/
   /* Verify that a duplicate standard was not just inserted to*/
   /* Dfbuy.Vcurve01.*/
   /* ------------------------------------------------------------*/
  ;
  set FBZREC empty;
  ;
  FBZREC.FBZFUNC = "CC";
  ;
  try
    call "IO3020" (FBZREC, SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    if (FBZREC.FBZSUM1 <= 1) /* No more than 1 std found - good call*/
      return; /* Return to previous process*/
    else
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes made by user*/
      ;
      converseLib.validationFailed(502); /* Unexpected error - DUP CURVES*/
      ;
      converseLib.clearScreen();
      
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      FB0EM010.XXXMODID = "S09"; /* Module identification*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "CHECK DUPLICATE STDS";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
      TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      set FB0EM010 initial;
      FBWREC.FBWFILL = " ";
      set FB0EW01 empty;
      set FB0EW02 empty;
      set FB0EW03 empty;
      set FB0EW04 empty;
      FB0EW00.FB0EW-DUP-STD-FL = "Y"; /* Duplicate standard flag*/
      FB0EW00.FB0EWDSW = "N"; /* Display data switch*/
      FB0EW00.FB0EWPSW = "NO";
      exit stack; /* Exit to display map*/
    end
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes made by user*/
  converseLib.validationFailed(1); /* Unexpected error*/
  ;
  converseLib.clearScreen();
  
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0EM010.XXXMODID = "S09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CHECK DUPLICATE STDS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0EM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0ES09

//*** RECORD=FB0EW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0EW00 type basicRecord
  5 * char(1359) ; 
    10 FB0EWPSW FB0EWPSW ; 
    10 FB0EWIVX FB0EWIVX ; 
    10 FB0EWDSW FB0EWDSW ; 
    10 FB0EWDBW FB0EWDBW ; 
    10 FB0EW-DUP-STD-FL FB0EW-DUP-STD-FL ; 
    10 FB0EWISF FB0EWISF ; 
    10 FB0EWUTS FB0EWUTS ; 
    10 FB0EWIVD FB0EWIVD ; 
    10 FB0EWFRJ FB0EWFRJ ; 
    10 FB0EWPF9 FB0EWPF9 ; 
    10 FB0EWDCF FB0EWDCF ; 
    10 FB0EWSCF FB0EWSCF ; 
    10 FB0EWCCF FB0EWCCF ; 
    10 FB0EWCRF FB0EWCRF ; 
    10 FB0EWDEF FB0EWDEF ; 
    10 XGPCD XGPCD ; 
    10 FB4KEY FB4KEY ; 
    10 FB0EWCRV FB0EWCRV ; 
    10 FB0EWFDT FB0EWFDT ; 
      15 FB0EWFCT FB0EWFCT ; 
      15 FB0EWFYY FB0EWFYY ; 
      15 FB0EWFMM FB0EWFMM ; 
      15 FB0EWFDD FB0EWFDD ; 
    10 FB0EWDTC FB0EWDTC ; 
    10 FB0EWWHS FB0EWWHS ; 
    10 FB0EWINC FB0EWINC ; 
    10 FB0EWTSL FB0EWTSL ; 
    10 FB0EWTSP FB0EWTSP ; 
    10 FB0EWOTC FB0EWOTC ; 
    10 FB0EWFRD FB0EWFRD ; 
    10 FB0EWIXM FB0EWIXM ; 
    10 FB0EWDBP FB0EWDBP ; 
    10 FB0EWDBL FB0EWDBL ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0EWIX1 FB0EWIX1 ; 
    10 FB0EWIX2 FB0EWIX2 ; 
    10 FB0EWIX3 FB0EWIX3 ; 
    10 FB0EWIX4 FB0EWIX4 ; 
    10 FB0EWFB4 FB0EWFB4 [3] ; 
    10 FB1INSEQ FB1INSEQ [10] ; 
    10 FB4STDFL FB4STDFL [10] ; 
    10 FB4CRVNB FB4CRVNB [10] ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 FB0EWPCT FB0EWPCT ; 
end // end FB0EW00

//*** RECORD=FB0EW01 ****
// ----------------------------------------
// Map 010 display storage for heading data
// ----------------------------------------
// ***********************
Record FB0EW01 type basicRecord
  10 FB0EWCID FB0EWCID ; 
  10 FB0EWCNB FB0EWCNB ; 
  10 FB0EWFRM FB0EWFRM [2] ; 
  10 FB0EWFRY FB0EWFRY [2] ; 
  10 FB0EWTOM FB0EWTOM [2] ; 
  10 FB0EWTOY FB0EWTOY [2] ; 
  10 YSMXOT YSMXOT [6] ; 
  10 FB1CMNT FB1CMNT ; 
  10 FB1INCDS FB1INCDS ; 
  10 XPCKEY XPCKEY ; 
    15 XPCCD XPCCD ; 
    15 XGPCD XGPCD ; 
  10 XPCSDESC XPCSDESC ; 
  10 XSUCD XSUCD ; 
  10 XSUABRV XSUABRV ; 
  10 YPPCD YPPCD ; 
  10 YPPDESC YPPDESC ; 
  10 XPRCD XPRCD ; 
  10 XPRABRV XPRABRV ; 
  10 XDVCD XDVCD ; 
  10 XDVDESC XDVDESC ; 
end // end FB0EW01

//*** RECORD=FB0EW02 ****
// ---------------------------------------
// Map 010 display storage for detail data
// ---------------------------------------
// ***********************
Record FB0EW02 type basicRecord
  5 FB0EWPAG FB0EWPAG ; 
    10 FB0EWTSL FB0EWTSL ; 
    10 SY1STNBR SY1STNBR [10] ; 
    10 SY2CLRID SY2CLRID [10] ; 
    10 XDMCD XDMCD [10] ; 
    10 SY1STYNM SY1STYNM [10] ; 
    10 SY2CLRAB SY2CLRAB [10] ; 
    10 FB4STDFL FB4STDFL [10] ; 
    10 FB4CRVNB FB4CRVNB [10] ; 
    10 SY4SZSCL SY4SZSCL [10] ; 
    10 XDVCD1 XDVCD1 [10] ; 
    10 FB0EWMDF FB0EWMDF [10] ; 
    10 FB0EWPTD FB0EWPTD [10] ; 
    10 FB0EWIVS FB0EWIVS [10] ; 
end // end FB0EW02

//*** RECORD=FB0EW03 ****
// ---------------------------------------
// Working stoage record
// ---------------------------------------
// ***********************
Record FB0EW03 type basicRecord
  5 * char(521) ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0EWTSP FB0EWTSP ; 
    10 SY1STNBR SY1STNBR [27] ; 
    10 SY2CLRID SY2CLRID [27] ; 
    10 XDMCD XDMCD [27] ; 
    10 FB0EWIVS FB0EWIVS [27] ; 
    10 FB4STDFL FB4STDFL [27] ; 
    10 FB4CRVNB FB4CRVNB [27] ; 
    10 XDVCD1 XDVCD1 [27] ; 
    10 SY4SZSCL SY4SZSCL [27] ; 
end // end FB0EW03

//*** RECORD=FB0EW04 ****
// ---------------------------------------
// Working stoage record for vseldt01
// ---------------------------------------
// ***********************
Record FB0EW04 type basicRecord
  5 * char(156) ; 
    10 FB0EWGR4 FB0EWGR4 [6] ; 
end // end FB0EW04

//*** RECORD=FB0EW05 ****
// ---------------------------------------
// Working stoage record for vselst01
// ---------------------------------------
// ***********************
Record FB0EW05 type basicRecord
  5 * char(2350) ; 
    10 FB0EWGR5 FB0EWGR5 [50] ; 
end // end FB0EW05

//*** RECORD=FB2REC ****
// ****************** selection parameters ********************
// 
// DB2 TABLE VIEW:      dfbuy.vselcg01
// 
// COPYLIB MEMBER:      DCL00546
// 
// I/O MODULE:          IO3050
// 
// KEY TO DB2 TABLE:    fb1inseq
// 
// MAINTENANCE LOG:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/27/88  wdishm  New record definition.
// **********************
Record FB2REC type basicRecord
  5 FB2GROUP FB2GROUP ; 
    10 FB2KEY FB2KEY ; 
      15 FB1INSEQ FB1INSEQ ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 XSUCD XSUCD ; 
    10 YPPCD YPPCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB2REC

// Duplicate standard flag
DataItem FB0EW-DUP-STD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vcurve01 cursor flag
DataItem FB0EWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Curve or dummy literal
DataItem FB0EWCID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Curve or dummy number
DataItem FB0EWCNB smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// lowest curve found flag
DataItem FB0EWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb-sz-pct-crv-nbr
DataItem FB0EWCRV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last storage line of db data
DataItem FB0EWDBL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last storage page of db data
DataItem FB0EWDBP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data base rows written flag
DataItem FB0EWDBW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vseldt01 cursor flag
DataItem FB0EWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Duplicate curve exists flag
DataItem FB0EWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display data flag
DataItem FB0EWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date counter
DataItem FB0EWDTC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save area for fb4recs
DataItem FB0EWFB4 char(330)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map reformat century
DataItem FB0EWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat day
DataItem FB0EWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat date field
DataItem FB0EWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat month
DataItem FB0EWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save fb5rec from date
DataItem FB0EWFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From FB0J application flag
DataItem FB0EWFRJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From need date
DataItem FB0EWFRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From need year
DataItem FB0EWFRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map reformat year
DataItem FB0EWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TSQ rel rec no./index
DataItem FB0EWGR4 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem FB0EWGR5 char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid/input record count
DataItem FB0EWINC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sequence number found flag
DataItem FB0EWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data found flag
DataItem FB0EWIVD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid size flag for map
DataItem FB0EWIVS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid product flag
DataItem FB0EWIVX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB0EWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB0EWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FB0EWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 4
DataItem FB0EWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem FB0EWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order type group counter
DataItem FB0EWOTC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// One page of temporary storage
DataItem FB0EWPAG char(644)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field used for sum percent
DataItem FB0EWPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF9 update requested flag
DataItem FB0EWPF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Processing type flag
DataItem FB0EWPSW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Protect data flag for map
DataItem FB0EWPTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vselst01 cursor flag
DataItem FB0EWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To need month
DataItem FB0EWTOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To need year
DataItem FB0EWTOY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem FB0EWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB0EWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update temporary storage flag
DataItem FB0EWUTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse count
DataItem FB0EWWHS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem FB2GROUP char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record key
DataItem FB2KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

