package fb06;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XFRCD;
import corpx2.XPCCD;
import corpx2.XPGCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB7BUYST;
import fb.common.FB7QTB;
import fb.common.FB7REC;
import fb.common.FB7RTADT;
import fb.common.FB7RTAPC;
import fb.common.FB8BUYDT;
import fb.common.FB8FTQTB;
import fb.common.FB9REC;
import fb.common.FBDBTCD;
import fb.common.FBEREC;
import fb.common.FBKRDFL;
import fb.common.FBLREC;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.FF00ENU;
import fy.common.FY1FCTYC;
import fy.common.FY1REC;
import fy.common.FY2MFGPC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FB06 ****
// This program is part of the footwear buy system.
// This application provides the capability of moving qtys
// by size from one factory to another factory for a specific
// product and rta date.  The product, warehouse or customer
// cross reference, and rta date are selected in FB0W and
// passed to this application through the commarea.  The
// application selects the size information from the merged
// quantity to buy table and stores the data in an internal
// working storage area.  The user has the option of moving
// any size quantities from the 'from' factory to the 'to'
// factory size quantities.  After all desired changeds have
// been made, the user presses enter.  The application then
// makes the required adjustments, recalculates the total
// size quantities for each factory and redisplays the map.
// Whenever an update occurs, the merged quantity to buy table
// (DFBUY.VMFBUY01) is updated.
// 
// PF10 and PF11 are provided to shift left and right to view
// all sizes.  In addition, the number of sizes to be scrolled
// may be entered.  The default is ten.
// 
// The user may exit to any allowed application via fast path
// or PF keys.
// 
// 
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/14/91   jalle1   Created.
// 07/02/91   jalle1   Modify routine to decide which sizes
//                     to display.
// 10/09/91   jalle1   oct '91 tbl chgs - fix w01 and w02 to
//                     include new dfbuy.vmfbuy01 fields
//                     xfrcd, fb-late-bk-fl, fb-late-bk-fl-mdt.
// 02/21/92   pmainw   Support multiple S.O. for an xref.
// 03/18/93   ldeluh   Chg to use units per case from syclr
//                     instead of hardcoded 6 for rounding.
// 12/03/93   pmainw   Handle twenty product lines on vfsctl01.
// 01-05-95   lrein    Add DCORP.VSUMCD01 and whse processing
//                     for European Centralised Forecasting
//                     project
// 02-10-95   jalle1   Darken S.O. when = 0.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  12/16/97 WSQUIR MODIFICATIONS MADE TO: FB06M010,
//                         FB06150, FB06160 & FB06170.
// *********************
Program FB06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB06W00 FB06W00; // record
  FB06W01 FB06W01; // record
  FB06W02 FB06W02; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBEREC FBEREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FY1REC FY1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB06M.FB06M010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB06001;
    FB06001: FB06001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the RTA maintenance - size qty moves*/
     /* ------------------------------------------------------------*/

    goto FB06002; /* Converse factory size qty moves*/


    FB06002: FB06002();
    goto FB06002;
  end // end main
end // end FB06

// special fb06 initialization
Function FB06001()

   /* ---------------------------------------------------------*/
   /* If entry is from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB")
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
  else
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end


   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FB06W00 empty; /* Working storage record*/
  set FB06W01 empty; /* 'from' record*/
  set FB06W02 empty; /* 'to' record*/

  set FB06M010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/

   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to display storage--and set the obtain data flag*/
   /* to yes.*/
   /* ---------------------------------------------------------*/

  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB06W00.SY1STNBR = FBXREC.SY1STNBR[1];
    FB06W00.SY2CLRID = FBXREC.SY2CLRID[1];
    FB06W00.XDMCD = FBXREC.XDMCD[1];
    FB06W00.XQACD = FBXREC.XQACD[1];
    FB06W00.PC2INSEG = FBXREC.PC2INSEG[1];
    FB06W00.XPGCD = FBXREC.XPGCD[1];
    FB06W00.XUMCD = FBXREC.XUMCD[1];
    FB06W00.XWHCD = FBXREC.XWHCD1[1];
    FB06W00.PC2CUXID = FBXREC.PC2CUXID;
    FB06W00.OP1PARTN = FBXREC.OP1PARTN; /* OP-ORD-PART-CHAR*/
    FB06W00.OP1CUOID = FBXREC.OP1CUOID; /* OP-CUST-ORD-ID*/
    FB06W00.OP1NORID = FBXREC.OP1NORID; /* OP-NIKE-ORD-ID*/
    FB06W00.FB8BUYDT = FBXREC.FB8BUYDT;
    FB06W00.FB7RTADT = FBXREC.FB7RTADT;
    FB06W00.FB06WFPF = "N"; /* set fast path flag to 'n'*/
  else
    FB06M010.SY2CLRID = "00 ";
    FB06M010.XDMCD = "00";
    FB06M010.XXXPRCNM = "FB06001";
    converseLib.validationFailed(327); /* can't fastpath to application*/
    FB06W00.FB06WFPF = "Y"; /* set fast path flag to 'y'*/

  end

   /* ---------------------------------------------------------*/
   /* if fb-buy-dt was not passed, get it from dfbuy.vfmctl01.*/
   /* ---------------------------------------------------------*/

  if (FB06W00.FB8BUYDT == 0) /* buy date not loaded*/

    FB06S01(); /* select control row*/
    FB06W00.FB8BUYDT = FB9REC.FB8BUYDT; /* save buy dt*/

  end

   /* ---------------------------------------------------------*/
   /* reformat fb-rta-dt.*/
   /* ---------------------------------------------------------*/

  FB06W00.FB06WKDT = FB06W00.FB7RTADT; /* work date*/
  FB06W00.FB06WRTY = FB06W00.FB06WKYY; /* year*/
  FB06W00.FB06WRTM = FB06W00.FB06WKMM; /* month*/
  FB06W00.FB06WRTD = FB06W00.FB06WKDD; /* day*/

   /* ---------------------------------------------------------*/
   /* set default values and flags.*/
   /* ---------------------------------------------------------*/

  FB06W00.FB06MSZS = 10; /* Default size screen scroll*/
  FB06W00.FB06WCSI = 1; /* current size index*/
  FB06W00.FB06WFSI = 1; /* first size index*/
  FB06W00.FB06WLSI = 40; /* last size index*/
  if (converseVar.validationMsgNum == 0) /* if no errors*/
    FB06W00.FB06WFTF = "Y"; /* set first time thru flag*/
    FB06W00.FB06WSWF = "Y"; /* set format map switch*/
  else
    FB06W00.FB06WFTF = "N"; /* set first time thru flag*/
    FB06W00.FB06WSWF = "N"; /* set format map switch*/
  end

  FB06S02(); /* load sum code array*/
end // end FB06001

// main process to display map
Function FB06002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FB06100(); /* Obtain data to display*/

  FB06200(); /* Format and display the map*/

  FB06300(); /* Check attention identifier*/

  FB06400(); /* Reset fields to normal intensity*/

  FB06500(); /* Verify the entered data*/

  FB06600(); /* Process valid input request*/

end // end FB06002

// Obtain data to display
Function FB06100()
   /* ------------------------------------------------------------*/
   /* if fast path flag = 'y', don't obtain data -- ever!*/
   /* ------------------------------------------------------------*/

  if (FB06W00.FB06WFPF == "Y") /* if fast path*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If this is the first time through, get the product descs;*/
   /* get the factory list; get autoload flag for this scheduler.*/
   /* ------------------------------------------------------------*/

  if (FB06W00.FB06WFTF == "Y") /* if first time through*/
    FB06110(); /* do first time thru stuff*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FB06W00.FB06WRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end


  set FB06W01 empty; /* initialize 'from' record*/
  set FB06W02 empty; /* initialize 'to' record*/


   /* ------------------------------------------------------------*/
   /* obtain the 'from' factory row from dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  FB06120(); /* get 'from' factory*/


   /* ------------------------------------------------------------*/
   /* obtain the 'to' factory row from dfbuy.vmfbuy01.*/
   /* ------------------------------------------------------------*/

  FB06130(); /* get 'to' factory*/


   /* ------------------------------------------------------------*/
   /* move 'from' and 'to' qtys to working storage arrays.*/
   /* calculate qty totals.*/
   /* ------------------------------------------------------------*/

  move 0 to FB06W00.FB06MFAJ[1] for all; /* adjustments = 0 right now*/
  move FB06W01.FB7QTB to FB06W00.FB06MFCQ[1] for all; /* from current qty*/
  move FB06W01.FB7QTB to FB06W00.FB06MFAQ[1] for all; /* from adj qty*/
  move FB06W02.FB7QTB to FB06W00.FB06MTCQ[1] for all; /* to current qty*/
  move FB06W02.FB7QTB to FB06W00.FB06MTAQ[1] for all; /* to adj qty*/

  FB06W00.FB06MFCT = 0; /* init from cur qty total*/
  FB06W00.FB06MFAT = 0; /* init from adj qty total*/
  FB06W00.FB06MTCT = 0; /* init to cur qty total*/
  FB06W00.FB06MTTA = 0; /* total adj = 0 too*/
  FB06W00.FB06MTAT = 0; /* init to cur qty total*/

  FB06W00.FB06WIX1 = 1; /* init index*/
  move "N" to FB06W00.FB06WZHD[1] for all; /* Init size has data array to no*/

  while (FB06W00.FB06WIX1 <= 40) /* for all sizes*/

    if (FB06W01.FB7QTB[FB06WIX1] != 0 /* 'from' size has data*/
     || FB06W02.FB7QTB[FB06WIX1] != 0) /* or 'to' size has data*/

      FB06W00.FB06WZHD[FB06WIX1] = "Y";

      FB06W00.FB06MFCT = FB06W00.FB06MFCT + FB06W01.FB7QTB[FB06WIX1];
      FB06W00.FB06MFAT = FB06W00.FB06MFAT + FB06W01.FB7QTB[FB06WIX1];
      FB06W00.FB06MTCT = FB06W00.FB06MTCT + FB06W02.FB7QTB[FB06WIX1];
      FB06W00.FB06MTAT = FB06W00.FB06MTAT + FB06W02.FB7QTB[FB06WIX1];

    end

    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/

  end


   /* ------------------------------------------------------------*/
   /* get size descriptions.*/
   /* ------------------------------------------------------------*/

  FB06140(); /* get size descs*/


   /* ------------------------------------------------------------*/
   /* determine first and last sizes to be displayed on map.*/
   /* ------------------------------------------------------------*/

  FB06W00.FB06WFSI = 0; /* init 1st size index*/
  FB06W00.FB06WLSI = 0; /* init last size index*/


   /* find first size*/

  FB06W00.FB06WIX1 = 1; /* init index*/

  while (FB06W00.FB06WIX1 <= 40) /* until end of sizes*/

    if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* if size has data*/

      FB06W00.FB06WFSI = FB06W00.FB06WIX1; /* first sz index*/
      FB06W00.FB06WIX1 = 41; /* get out while you can*/

    end
    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/
  end

   /* find last size*/

  FB06W00.FB06WIX1 = FB06W00.FB06WFSI; /* init index*/

  while (FB06W00.FB06WIX1 <= 40) /* until end of sizes*/

    if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* if size has data*/

      FB06W00.FB06WLSI = FB06W00.FB06WIX1; /* last sz index*/

    end
    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/
  end

   /* set current size index = first size index*/

  FB06W00.FB06WCSI = FB06W00.FB06WFSI;

   /* ------------------------------------------------------------*/
   /* get fb-rnd-fl from dfbuy.vfblav01.*/
   /* ------------------------------------------------------------*/

  FB06150(); /* select dfbuy.vfblav01 csr*/
  FB06W00.FB06WDWF = "N"; /* domestic whse not found*/

  while (SQLCA.VAGen_SQLCODE != 100
   && FB06W00.FB06WDWF != "Y")
    FB06160(); /* fetch dfbuy.vfblav01 csr*/
  end

  FB06170(); /* close dfbuy.vfblav01 csr*/



  FB06W00.FB06WRDF = "N"; /* Data not requested*/
  FB06W00.FB06WSWF = "Y"; /* format the map switch*/



end // end FB06100

// obtain first time thru data
Function FB06110()
   /* ------------------------------------------------------------*/
   /* obtain style/color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* initialize style/color record*/

  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FB06W00.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = FB06W00.SY2CLRID; /* color*/
  PG2REC.XDMCD = FB06W00.XDMCD; /* dimension*/

  XSPG202(); /* obtain style color table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
    FB06W00.SY1SSTNM = PG2REC.SY1SSTNM; /* short sty nm*/
    FB06W00.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbrev.*/
  else
    FB06W00.SY1SSTNM = "************";
    FB06W00.SY2CLRAB = "************";
  end


   /* ------------------------------------------------------------*/
   /* select and open cursor for dfbuy.vmfbuy01 to get factory*/
   /* list.*/
   /* ------------------------------------------------------------*/

  FB06111(); /* select csr for dfbuy.vmfbuy01*/


   /* ------------------------------------------------------------*/
   /* fetch dfbuy.vmfbuy01 records to fill factory list.*/
   /* ------------------------------------------------------------*/

  FB06W00.FB06WIX1 = 1; /* set index 1*/
  FB06W00.FB06WMFF = "Y"; /* set more fcty flag to 'y'*/

  while (FB06W00.FB06WMFF == "Y" /* while more fctys*/
   && FB06W00.FB06WIX1 <= 5) /* and not max # fctys*/

    FB06112(); /* fetch next record*/

    if (FB06W00.FB06WMFF == "Y"             /* if good fetch*/
                                            
     && FB06W00.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB06W00.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB06W00.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/

      if (FB7REC.FY1FCTYC in FB06W00.FY1FCTYC) /* if factory already fetched*/
         /* next sentence*/
      else
        FB06W00.FY1FCTYC[FB06WIX1] = FB7REC.FY1FCTYC;
        FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/
      end

    end
  end


   /* ------------------------------------------------------------*/
   /* close dfbuy.vmfbuy01 cursor.*/
   /* ------------------------------------------------------------*/

  FB06113(); /* close csr*/


   /* ------------------------------------------------------------*/
   /* get autoload flag for user.  set internal flag*/
   /* if autoload flag = y -- this will prevent updates.*/
   /* ------------------------------------------------------------*/

  FB06W00.FB06WISF = "N"; /* init invalid scheduler flag*/

  FB06114(); /* obtain vsuser01 row*/

  if (FB06W00.FB06WISF != "Y") /* if still valid scheduler*/
    FB06115(); /* obtain vfsctl01 row*/
  end

  if (FB06W00.FB06WISF == "Y") /* if invalid scheduler*/
    converseLib.validationFailed(62); /* this scheduler can't to nothin*/
    FB06M010.XXXPRCNM = "FB06110";
  end


  FB06W00.FB06WFTF = "N"; /* set first time flag to 'n'*/


end // end FB06110

// select csr for DFBUY.VMFBUY01
Function FB06111()
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VMFBUY01*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* initialize dfbuy.vmfbuy01 record*/

  FB7REC.SY1STNBR = FB06W00.SY1STNBR; /* style*/
  FB7REC.SY2CLRID = FB06W00.SY2CLRID; /* color*/
  FB7REC.XDMCD = FB06W00.XDMCD; /* dimension*/
  FB7REC.FB8BUYDT = FB06W00.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = FB06W00.XWHCD; /* whse*/
  FB7REC.PC2CUXID = FB06W00.PC2CUXID; /* xref*/
  FB7REC.OP1PARTN = FB06W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB06W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB06W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB06W00.FB7RTADT; /* rta date*/


  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06111"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE DFBUY.VMFBUY01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W00.FB06WMKY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06111";
  exit stack;


end // end FB06111

// fetch csr for DFBUY.VMFBUY01
Function FB06112()
   /* ------------------------------------------------------------*/
   /* fetch next row from dfbuy.vmfbuy01.*/
   /* set more fcty flag to 'n'o when no more rows found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB06W00.FB06WMFF = "N"; /* no more factorys*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06112"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W00.FB06WMKY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06112";
  exit stack;

end // end FB06112

// close csr for DFBUY.VMFBUY01
Function FB06113()
   /* ------------------------------------------------------------*/
   /* Close cursor for dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06113"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE DFBUY.VMFBUY01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W00.FB06WMKY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06113";
  exit stack;

end // end FB06113

// obtain DPRODG.VSUSER01 row
Function FB06114()
   /* -------------------------------------------------*/
    /* Format key*/
   /* -------------------------------------------------*/

  set PG1REC empty;

  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/
  if (FBXREC.CAUSERID != " ")
    PG1REC.XXXUSER = FBXREC.CAUSERID; /* User id*/
  else
    PG1REC.XXXUSER = COMMAREA.CAUSERID; /* User id*/
  end

   /* -------------------------------------------------*/
    /* select row from dprodg.vsuser01*/
   /* -------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB06W00.FB06WISF = "Y"; /* set invalid scheduler flag*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06114"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSUSER01  ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06114";
  exit stack;


end // end FB06114

// obtain DFBUY.VFSCTL01 row
Function FB06115()
   /* -------------------------------------------------*/
   /* Initialize record and format key.*/
   /* -------------------------------------------------*/

  set FBMREC empty;
  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;

   /* -------------------------------------------------*/
   /* select dfbuy.vfsctl01 row.*/
   /* -------------------------------------------------*/

  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB06W00.FB06WISF = "Y"; /* Invalid scheduler flag*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06115"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFSCTL01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLVU = PG1REC.PG1SC4CD; /* table view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06115";
  exit stack;


end // end FB06115

// select 'from' DFBUY.VMFBUY01
Function FB06120()
   /* ------------------------------------------------------------*/
   /* select unique record for 'from' factory on dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* initialize dfbuy.vmfbuy01 record*/

  if (FB06M010.FB06MFFY == " ")
    FB7REC.FY1FCTYC = FB06W00.FB06MFFY; /* factory*/
  else
    FB7REC.FY1FCTYC = FB06M010.FB06MFFY; /* factory*/
  end
  FB7REC.SY1STNBR = FB06W00.SY1STNBR; /* style*/
  FB7REC.SY2CLRID = FB06W00.SY2CLRID; /* color*/
  FB7REC.XDMCD = FB06W00.XDMCD; /* dimension*/
  FB7REC.FB8BUYDT = FB06W00.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = FB06W00.XWHCD; /* whse*/
  FB7REC.PC2CUXID = FB06W00.PC2CUXID; /* xref*/
  FB7REC.OP1PARTN = FB06W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB06W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB06W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB06W00.FB7RTADT; /* rta date*/


  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      FB06W01.FB06WGRP = FB7REC.FB7GROUP; /* save from row*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB06M010.XXXPRCNM = "FB06120"; /* process*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06120"; /* Process name*/
  TA1REC.TA1LOC = "SELECT FROM DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W00.FB06WMKY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06120";
  exit stack;


end // end FB06120

// select 'to' DFBUY.VMFBUY01
Function FB06130()
   /* ------------------------------------------------------------*/
   /* select unique record for 'to' factory on dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* initialize dfbuy.vmfbuy01 record*/

  if (FB06M010.FB06MTFY == " ")
    FB7REC.FY1FCTYC = FB06W00.FB06MTFY; /* factory*/
  else
    FB7REC.FY1FCTYC = FB06M010.FB06MTFY; /* factory*/
  end
  FB7REC.SY1STNBR = FB06W00.SY1STNBR; /* style*/
  FB7REC.SY2CLRID = FB06W00.SY2CLRID; /* color*/
  FB7REC.XDMCD = FB06W00.XDMCD; /* dimension*/
  FB7REC.FB8BUYDT = FB06W00.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = FB06W00.XWHCD; /* whse*/
  FB7REC.PC2CUXID = FB06W00.PC2CUXID; /* xref*/
  FB7REC.OP1PARTN = FB06W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB06W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB06W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB06W00.FB7RTADT; /* rta date*/


  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      FB06W02.FB06WGRP = FB7REC.FB7GROUP; /* save from row*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB06M010.XXXPRCNM = "FB06130"; /* process*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06130"; /* Process name*/
  TA1REC.TA1LOC = "SELECT TO DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W00.FB06WMKY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06130";
  exit stack;


end // end FB06130

// obtain size descriptions
Function FB06140()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB06W00.SY1STNBR;
  PG3REC.SY2CLRID = FB06W00.SY2CLRID;
  PG3REC.XDMCD = FB06W00.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  PG3REC.PG3XDVCD = PG2REC.XDVCD1;

  XSPG301(); /* Get valid sizes*/

   /* ---------------------------------------------------------*/
   /* determine which fields have size descriptions.*/
   /* ---------------------------------------------------------*/

  FB06W00.FB06WIX1 = 1; /* init index*/

  while (FB06W00.FB06WIX1 <= 40) /* for all sizes*/

    if (PG3REC.SY4IDDSC[FB06WIX1] != " ") /* if description*/
      FB06W00.FB06WZHD[FB06WIX1] = "Y";
    end

    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1;
  end


end // end FB06140

// select csr DFBUY.VFBLAV01
Function FB06150()
  set FBLREC empty;
  FBLREC.SY1STNBR = FB06W00.SY1STNBR;
  FBLREC.SY2CLRID = FB06W00.SY2CLRID;
  FBLREC.XDMCD = FB06W00.XDMCD;
  FBLREC.XQACD = FB06W00.XQACD;
  FBLREC.XPGCD = FB06W00.XPGCD;
  FBLREC.XUMCD = FB06W00.XUMCD;
  FBLREC.FB8BUYDT = FB06W00.FB8BUYDT;

  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06150"; /* Process name*/
  TA1REC.TA1LOC = "SELECT CSR DFBUY.VFBLAV01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06150";
  exit stack;


end // end FB06150

// fetch csr DFBUY.VFBLAV01
Function FB06160()
   /* ------------------------------------------------------------*/
   /* fetch next row from dfbuy.vfblav01.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (FBLREC.XWHCD in FB06W00.XWH-WHSE-CD)
        FB06W00.FB06WDWF = "Y"; /* domestic whse found*/
        FB06W00.FBKRDFL = FBLREC.FBKRDFL; /* save round flag*/
      end
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB06W00.FBKRDFL = "N"; /* default to 'n'o*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06160"; /* Process name*/
  TA1REC.TA1LOC = "FETCH DFBUY.VFBLAV01 CSR ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* tagle key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06160";
  exit stack;

end // end FB06160

// close csr DFBUY.VFBLAV01
Function FB06170()
   /* ------------------------------------------------------------*/
   /* Close cursor for dfbuy.vfblav01*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06170"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE DFBUY.VFBLAV01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06170";
  exit stack;

end // end FB06170

// Format and converse the map
Function FB06200()
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FB06W00.FB06WRDF == "Y"           /* obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no errors*/
   || converseVar.validationMsgNum == 98) /* or press pf9 to update*/

    if (FB06W00.FB06WSWF == "Y") /* Map must be formatted*/
      FB06210(); /* Format the data on the map*/
      FB06W00.FB06WSWF = "N"; /* Map must be formatted fl*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Format the adjusted total and size scroll*/
   /* ------------------------------------------------------------*/

  FB06M010.FB06MTTA = FB06W00.FB06MTTA;
  FB06M010.FB06MSZS = FB06W00.FB06MSZS;


   /* ------------------------------------------------------------*/
   /* protect and set dark all invalid map columns.*/
   /* ------------------------------------------------------------*/


   /* skip all valid fields to find beginning of invalid fields*/

  FB06W00.FB06WIXM = 1; /* init map index*/
  FB06W00.FB06WIX1 = FB06W00.FB06WCSI; /* current size index*/

  while (FB06W00.FB06WIXM <= 10 /* max 10 sizes*/
   && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* last size*/

    if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* if data exists*/
      FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1; /* increment*/
    end
    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1;
  end

   /* protect remaining invalid fields*/

  while (FB06W00.FB06WIXM <= 10) /* for rest of map*/
    set FB06M010.FB06MFAJ[FB06WIXM] skip, invisible;
    set FB06M010.SY4IDDSC[FB06WIXM] invisible;
    FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1;
  end

  if (FB06M010.OP1CUOID == 0
   && FB06M010.OP1NORID == 0)
    set FB06M010.OP1CUOID skip, invisible;
    set FB06M010.FB06MDOT skip, invisible;
    set FB06M010.OP1NORID skip, invisible;
    set FB06M010.OP1PARTN skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB06M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FB06M010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB06M010.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* if message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FB06W00.XXXMSGNO != 0) /* message to display*/
    if (FB06W00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB06W00.XXXMSGNO);
    end /* message to display*/
  end



  if (converseVar.validationMsgNum != 0) /* message to display*/
    set FB06M010 alarm; /* indicate alarm*/
  end

  converse FB06M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB06M010.XXXPRCNM = "FB06   "; /* Module identification*/
  converseLib.validationFailed(0); /* reset*/
  FB06W00.XXXMSGNO = 0; /* reset*/

  COMMAREA.CATOAP = FB06M010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB06M010.CAITEM; /* Application data*/


end // end FB06200

// format map data
Function FB06210()
   /* ------------------------------------------------------------*/
   /* clear map*/
   /* ------------------------------------------------------------*/

  set FB06M010 initial;



   /* ------------------------------------------------------------*/
   /* Move map header from display storage to the map*/
   /* ------------------------------------------------------------*/


  FB06M010.SY1STNBR = FB06W00.SY1STNBR;
  FB06M010.SY2CLRID = FB06W00.SY2CLRID;
  FB06M010.XDMCD = FB06W00.XDMCD;
  FB06M010.SY1SSTNM = FB06W00.SY1SSTNM;
  FB06M010.SY2CLRAB = FB06W00.SY2CLRAB;
  FB06M010.XQACD = FB06W00.XQACD;
  FB06M010.PC2INSEG = FB06W00.PC2INSEG;
  FB06M010.XPGCD = FB06W00.XPGCD;
  FB06M010.XUMCD = FB06W00.XUMCD;
  FB06M010.XWHCD = FB06W00.XWHCD;
  FB06M010.PC2CUXID = FB06W00.PC2CUXID;
  FB06M010.OP1PARTN = FB06W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB06M010.OP1CUOID = FB06W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB06M010.OP1NORID = FB06W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB06M010.FB7RTADT = FB06W00.FB06WRTA;
  FB06M010.FB06MSZS = FB06W00.FB06MSZS;

  FB06W00.FB06WIXM = 1; /* init index*/

  while (FB06W00.FB06WIXM <= 5 /* for all factories*/
   && FB06W00.FY1FCTYC[FB06WIXM] != " ") /* and valid factory*/

    FB06M010.FY1FCTYC[FB06WIXM] = FB06W00.FY1FCTYC[FB06WIXM];
    FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1;

  end

  FB06M010.FB06MFFY = FB06W00.FB06MFFY; /* from fcty*/
  FB06M010.FB06MTFY = FB06W00.FB06MTFY; /* to fcty*/

   /* ------------------------------------------------------------*/
   /* load size descriptions to map*/
   /* ------------------------------------------------------------*/

  if (FB06M010.SY1STNBR != " ") /* if header data exists*/

    FB06W00.FB06WIXM = 1; /* Init map index*/
    FB06W00.FB06WIX1 = FB06W00.FB06WCSI; /* Current size index*/

    while (FB06W00.FB06WIXM <= 10
     && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* Last size*/

      if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* if data exists*/

        FB06M010.SY4IDDSC[FB06WIXM] = PG3REC.SY4IDDSC[FB06WIX1];
        FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1;

      end
      FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1;
    end
  end


   /* ------------------------------------------------------------*/
   /* Use the current size index as the starting point*/
   /* for loading the sizes quantities to the map.*/
   /* ------------------------------------------------------------*/

  if (FB06M010.SY1STNBR != " ")
    FB06W00.FB06WIXM = 1; /* map size index*/
    FB06W00.FB06WIX1 = FB06W00.FB06WCSI; /* Current size*/


    while (FB06W00.FB06WIXM <= 10 /* Max sizes on map*/
     && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* Last size*/
      if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* size has data*/

        FB06M010.FB06MFCQ[FB06WIXM] = FB06W00.FB06MFCQ[FB06WIX1];
        FB06M010.FB06MFAQ[FB06WIXM] = FB06W00.FB06MFAQ[FB06WIX1];
        FB06M010.FB06MTCQ[FB06WIXM] = FB06W00.FB06MTCQ[FB06WIX1];
        FB06M010.FB06MFAJ[FB06WIXM] = FB06W00.FB06MFAJ[FB06WIX1];
        FB06M010.FB06MTAQ[FB06WIXM] = FB06W00.FB06MTAQ[FB06WIX1];

        FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1;
      end
      FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* load working storage totals to map.*/
   /* ------------------------------------------------------------*/

  FB06M010.FB06MFCT = FB06W00.FB06MFCT;
  FB06M010.FB06MFAT = FB06W00.FB06MFAT;
  FB06M010.FB06MTCT = FB06W00.FB06MTCT;
  FB06M010.FB06MTTA = FB06W00.FB06MTTA;
  FB06M010.FB06MTAT = FB06W00.FB06MTAT;


   /* ------------------------------------------------------------*/
   /* establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (FB06M010.FB06MFFY == " ") /* if 'from' factory not entered*/
    set FB06M010.FB06MFFY cursor; /* set cursor*/
  else
    set FB06M010.FB06MFAJ[1] cursor; /* set cursor*/
  end


end // end FB06210

// Check attention ID
Function FB06300()
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FB06M010 empty; /* Clear the map fields*/
    FB06W00.FB06WRDF = "Y"; /* Request reload of data*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB06M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/


      COMMAREA.CATOAP = FB06M010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB06M010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB06M010.CATOAP cursor, bold;
      exit stack;
    else
      FB06M010.XXXPRCNM = "FB06300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB06M010.XXXPRCNM = "FB06300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0M (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    set FBXREC empty;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB06M010.XXXPRCNM = "FB06300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9)
    return;
  end

   /* ------------------------------------------------------------*/
   /* On PF3  transfer to FB0W*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* FB0W requested*/

    FBXREC.FBXFRMDT = 0;
    FBXREC.FBXTODT = 0;
    FBXREC.XWHCD1[1] = " ";
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CATOAP = "FB0W"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB06M010.XXXPRCNM = "FB06300"; /* Module identification*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* if scroll not requested, PF key is invalid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf10 /* Scroll left requested*/
   && converseVar.eventKey not pf11) /* Scroll right requested*/

    FB06M010.XXXPRCNM = "FB06300";
    converseLib.validationFailed(03); /* invalid pf key*/
    exit stack;
  end


end // end FB06300

// Reset highlighted fields
Function FB06400()
  set FB06M010.XWHCD initialAttributes; /* whse*/
  set FB06M010.PC2CUXID initialAttributes; /* xref*/
  set FB06M010.OP1PARTN initialAttributes; /* part-char*/
  set FB06M010.OP1CUOID initialAttributes; /* cust-ord*/
  set FB06M010.OP1NORID initialAttributes; /* nike-ord*/
  set FB06M010.FB06MSZS initialAttributes; /* size scroll*/
  set FB06M010.FB06MFFY initialAttributes; /* from factory*/
  set FB06M010.FB06MTFY initialAttributes; /* to factory*/
  set FB06M010.FB06MTTA initialAttributes; /* total adjustments*/


  FB06W00.FB06WIXM = 1; /* set map index*/

  while (FB06W00.FB06WIXM <= 10) /* for all fields*/

    set FB06M010.FB06MFAQ[FB06WIXM] initialAttributes;
    set FB06M010.FB06MFAJ[FB06WIXM] initialAttributes;
    set FB06M010.FB06MTAQ[FB06WIXM] initialAttributes;

    FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1;

  end


  set FB06M010.CATOAP initialAttributes;
  set FB06M010.CAITEM initialAttributes;


end // end FB06400

// Verify entered data
Function FB06500()
   /* ----------------------------------------------------*/
   /* If invalid scheduler display message and ezeflo*/
   /* ----------------------------------------------------*/

  if (FB06W00.FB06WISF == "Y")
    converseLib.validationFailed(62); /* Do not allow updates*/
    FB06M010.XXXPRCNM = "FB06500";
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If fastpathed into application display message and*/
   /* ezeflo.*/
   /* ----------------------------------------------------*/

  if (FB06W00.FB06WFPF == "Y")
    converseLib.validationFailed(327); /* Fastpath invalid etc*/
    FB06M010.XXXPRCNM = "FB06500";
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If updates requested do not allow if the scheduler*/
   /* code is equal 'y'.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf9)
    if (FBMREC.FBMALAFL == "Y")
      converseLib.validationFailed(322); /* Do not allow updates*/
      FB06M010.XXXPRCNM = "FB06500";
      exit stack;
    end
  end


   /* ----------------------------------------------------*/
   /* do not allow any processing if whse and xref both*/
   /* have values (this is an invalid product).*/
   /* ----------------------------------------------------*/

  if (FB06M010.XWHCD != " " /* if whse has value*/
   && FB06M010.PC2CUXID != " ") /* and xref has value*/

    set FB06M010.XWHCD bold; /* highlight*/
    set FB06M010.PC2CUXID bold; /* highlight*/
    converseLib.validationFailed(390);
                                   /* both whse and xref cannot have values*/
    FB06M010.XXXPRCNM = "FB06500";
    exit stack;

  end

   /* ----------------------------------------------------*/
   /* Check for db2 contention due to merge.*/
   /* ----------------------------------------------------*/

  FB06520(); /* check for contention*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


  FB06W00.FB06WKCF = "N"; /* key changed*/

   /* ----------------------------------------------------*/
   /* if 'to' factory changed, verify new code*/
   /* ----------------------------------------------------*/

  if (FB06M010.FB06MTFY == " ") /* if blank*/
    set FB06M010.FB06MTFY cursor, bold;
    converseLib.validationFailed(8); /* required field*/
    FB06M010.XXXPRCNM = "FB06500";
  else

    if (FB06M010.FB06MTFY != FB06W00.FB06MTFY) /* if factory changed*/

      if (FB06M010.FB06MTFY in FB06W00.FY1FCTYC) /* if in detail list*/
         /* next sentence*/
      else
        set FB06M010.FB06MTFY cursor, bold;
        converseLib.validationFailed(393); /* not a good factory*/
        FB06M010.XXXPRCNM = "FB06500";
      end

      FB06W00.FB06WKCF = "Y"; /* key changed*/
    end
  end

   /* ----------------------------------------------------*/
   /* if 'from' factory changed, verify new code*/
   /* ----------------------------------------------------*/

  if (FB06M010.FB06MFFY == " ") /* if blank*/
    set FB06M010.FB06MFFY cursor, bold;
    converseLib.validationFailed(8); /* required field*/
    FB06M010.XXXPRCNM = "FB06500";
  else

    if (FB06M010.FB06MFFY != FB06W00.FB06MFFY) /* if factory changed*/

      if (FB06M010.FB06MFFY in FB06W00.FY1FCTYC) /* if in detail list*/
         /* next sentence*/
      else
        set FB06M010.FB06MFFY cursor, bold;
        converseLib.validationFailed(393); /* not a good factory*/
        FB06M010.XXXPRCNM = "FB06500";
      end

      FB06W00.FB06WKCF = "Y"; /* key changed*/
    end
  end


  if (FB06M010.FB06MTFY == FB06M010.FB06MFFY) /* if to and from fcty =*/
    set FB06M010.FB06MFFY cursor, bold;
    set FB06M010.FB06MTFY bold;
    converseLib.validationFailed(397); /* from and to fcty cannot be =*/
    FB06M010.XXXPRCNM = "FB06500";
  end


   /* ----------------------------------------------------*/
   /* if factories were valid, save.  if new values,*/
   /* set request for data flag and get out.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if factories were valid*/
    FB06W00.FB06MTFY = FB06M010.FB06MTFY; /* save factory*/
    FB06W00.FB06MFFY = FB06M010.FB06MFFY; /* save factory*/
  end

  if (FB06W00.FB06WKCF == "Y") /* if key changed*/
    FB06W00.FB06WRDF = "Y"; /* request data*/
    exit stack;
  end


   /* ----------------------------------------------------*/
   /* Verify scroll request*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* if scroll left*/
   || converseVar.eventKey is pf11) /* or scroll right*/

    FB06510(); /* verify scroll*/
    return;

  end

   /* ----------------------------------------------------*/
   /* If 'from' and 'to' factories are entered, verify:*/
     /* 1)  if stk or drs and round flag = 'y', verify*/
         /* adjustments are in multples of units per case*/
     /* 2)  no adjustments force negative 'from' or 'to'*/
         /* quantities*/
   /* ----------------------------------------------------*/

  if (FB06M010.FB06MFFY != " " /* 'from' fcty exists*/
   && FB06M010.FB06MTFY != " ") /* 'to' fcty exists*/

    FB06W00.FB06WDCF = "N"; /* data changed flag*/
    FB06W00.FB06WIXM = 10; /* init map index*/

    while (FB06W00.FB06WIXM >= 1) /* for all map fields*/

      if (FB06M010.FB06MFAJ[FB06WIXM] != 0) /* adjustment entered*/

        FB06W00.FB06WDCF = "Y"; /* data changed flag*/

         /* if round flag, verify multiple of units per case*/

        if (FB06W02.FBDBTCD == "STK" /* if stock product*/
         || FB06W02.FBDBTCD == "DRS") /* or direct ship*/

          if (FB06W00.FBKRDFL == "Y") /* if round flag, verify rounded*/

            if (PG2REC.SY1UNPCS == 0)
              PG2REC.SY1UNPCS = 12; /* Default value*/
            end

            FB06W00.FB06WRDR = FB06M010.FB06MFAJ[FB06WIXM]             % PG2REC.SY1UNPCS; /* remainder*/
            if (FB06W00.FB06WRDR != 0) /* if not multiple of upc*/
              if (PG2REC.SY1UNPCS == 12) /* rounding factor is 12*/
                converseLib.validationFailed(471); /* not rounded to 12*/
                FB06M010.XXXPRCNM = "FB06500"; /* process number*/
                set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
              else
                if (PG2REC.SY1UNPCS == 24) /* rounding factor is 24*/
                  converseLib.validationFailed(472); /* not rounded to 24*/
                  FB06M010.XXXPRCNM = "FB06500"; /* process number*/
                  set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
                else
                  if (PG2REC.SY1UNPCS == 48) /* rounding factor is 48*/
                    converseLib.validationFailed(473); /* not rounded to 48*/
                    FB06M010.XXXPRCNM = "FB06500"; /* process number*/
                    set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
                  else
                    converseLib.validationFailed(474); /* none of above & not pass*/
                    FB06M010.XXXPRCNM = "FB06500"; /* process number*/
                    set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
                  end
                end
              end
            end
          end
        end

         /* verify 'from' and 'to' qtys not forced negative*/

        FB06W00.FB06WWF1 = FB06M010.FB06MFCQ[FB06WIXM]; /* work fld*/
        FB06W00.FB06WWF1 = FB06W00.FB06WWF1 - FB06M010.FB06MFAJ[FB06WIXM];
        if (FB06W00.FB06WWF1 < 0) /* if negative*/
          set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
          converseLib.validationFailed(391); /* adjusted qty cannot be neg.*/
          FB06M010.XXXPRCNM = "FB06500";
        end

        FB06W00.FB06WWF1 = FB06M010.FB06MTCQ[FB06WIXM]; /* work fld*/
        FB06W00.FB06WWF1 = FB06W00.FB06WWF1 + FB06M010.FB06MFAJ[FB06WIXM];
        if (FB06W00.FB06WWF1 < 0) /* if negative*/
          set FB06M010.FB06MFAJ[FB06WIXM] cursor, bold;
          converseLib.validationFailed(391); /* adjusted qty cannot be neg.*/
          FB06M010.XXXPRCNM = "FB06500";
        end

      end
      FB06W00.FB06WIXM = FB06W00.FB06WIXM - 1; /* decrement index*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end




   /* ----------------------------------------------------*/
   /* if pf9 is pressed, place adjustments on map into*/
   /* working storage.*/
   /* then verify sum of all adjustments = 0.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* update*/
   && FB06M010.FB06MFFY != " "    /* 'from' fcty exists*/
   && FB06M010.FB06MTFY != " ")   /* 'to' fcty exists*/

     /* move adjustments to working storage*/

    FB06W00.FB06WIXM = 1; /* map index*/
    FB06W00.FB06WIX1 = FB06W00.FB06WCSI; /* current size*/

    while (FB06W00.FB06WIXM <= 10 /* max map sizes*/
     && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* last size*/

      if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* size has data*/

        FB06W00.FB06MFAJ[FB06WIX1] = FB06M010.FB06MFAJ[FB06WIXM];

      end
      FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1; /* increment*/
      FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/

    end

     /* verify total of adjustments = 0*/

    FB06W00.FB06MTTA = 0; /* total adjustments*/
    FB06W00.FB06WIX1 = 1; /* map index*/

    while (FB06W00.FB06WIX1 <= 40) /* for all sizes*/

      FB06W00.FB06MTTA = FB06W00.FB06MTTA + FB06W00.FB06MFAJ[FB06WIX1];

      FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/

    end

    if (FB06W00.FB06MTTA != 0) /* if sum of totals not = 0*/
      set FB06M010.FB06MFAJ[1] cursor;
      set FB06M010.FB06MTTA bold;
      converseLib.validationFailed(392); /* sum of adjust must = 0*/
      FB06M010.XXXPRCNM = "FB06500";
    end
  end

   /* ----------------------------------------------------*/
   /* If any errors found, return to display map.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FB06500

// Validate scroll request
Function FB06510()
   /* ------------------------------------------------------------*/
   /* Validate that size scroll is positive and not greater than*/
   /* 40*/
   /* ------------------------------------------------------------*/

  if (FB06M010.FB06MSZS < 1
   || FB06M010.FB06MSZS > 40)
    set FB06M010.FB06MSZS cursor, bold;
    converseLib.validationFailed(10); /* no more cols to display*/
    FB06M010.XXXPRCNM = "FB06510"; /* process*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    FB06W00.FB06WWF1 = FB06WCSI - FB06M010.FB06MSZS;
    FB06W00.FB06WWF2 = FB06WCSI - 1;

    if (FB06W00.FB06WWF1 < FB06W00.FB06WFSI
     && FB06W00.FB06WWF2 < FB06W00.FB06WFSI)
      set FB06M010.FB06MSZS cursor, bold;
      converseLib.validationFailed(23); /* No more columns to left to display*/
      FB06M010.XXXPRCNM = "FB06510"; /* Module identification*/
      exit stack;
    end
  end


   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    FB06W00.FB06WWF1 = FB06WCSI + FB06M010.FB06MSZS + 1;

    if (FB06W00.FB06WWF1 >= FB06W00.FB06WLSI) /* last size index*/
      set FB06M010.FB06MSZS cursor, bold;
      converseLib.validationFailed(24); /* No more columns to right to display*/
      FB06M010.XXXPRCNM = "FB06510"; /* Module identification*/
      exit stack;
    end
  end


end // end FB06510

// check for merge contention
Function FB06520()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FBEREC empty;

  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/

   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        exit stack; /* return to process*/
      end
    else


      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.XXXPGMNB; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      FB06M010.XXXPRCNM = "FB06520";
      exit stack;
    end
  end


end // end FB06520

// Process valid input
Function FB06600()

   /* ----------------------------------------------------*/
   /* save adjustments in working storage array.*/
   /* ----------------------------------------------------*/

  FB06W00.FB06WIX1 = FB06W00.FB06WCSI; /* current size*/
  FB06W00.FB06WIXM = 1; /* map size index*/

  while (FB06W00.FB06WIXM <= 10 /* max sizes on map*/
   && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* last size*/

    if (FB06W00.FB06WZHD[FB06WIX1] == "Y") /* size has data*/

      FB06W00.FB06MFAJ[FB06WIX1] = FB06M010.FB06MFAJ[FB06WIXM];
      FB06W00.FB06WIXM = FB06W00.FB06WIXM + 1; /* increment map index*/

    end

    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment current size*/
  end


   /* ----------------------------------------------------*/
   /* calculate adjusted quantities.*/
   /* due to csp limitations, all array values are moved*/
   /* to temporary storage values (so arithmetic stmts*/
   /* can fit on one line).*/
   /* ----------------------------------------------------*/

  FB06W00.FB06WIX1 = FB06W00.FB06WFSI; /* init index to first size*/
  FB06W00.FB06MFAT = 0; /* init from adjust total*/
  FB06W00.FB06MTTA = 0; /* init total adjustment*/
  FB06W00.FB06MTAT = 0; /* init to adjust total*/

  while (FB06W00.FB06WIX1 <= 40 /* up to max size 40*/
   && FB06W00.FB06WIX1 <= FB06W00.FB06WLSI) /* or to last valid size*/

    if (FB06W00.FB06WZHD[FB06WIX1] == "Y" /* size has data*/
     && FB06W00.FB06MFAJ[FB06WIX1] != 0)  /* and adjustments made*/

       /* calculate 'from' adjusted qtys*/

      FB06W00.FB06WWF1 = FB06W00.FB06MFCQ[FB06WIX1]; /* curr to work*/
      FB06W00.FB06WWF2 = FB06W00.FB06MFAJ[FB06WIX1]; /* adj to work*/
      FB06W00.FB06MFAQ[FB06WIX1] = FB06W00.FB06WWF1 - FB06W00.FB06WWF2;

       /* calculate 'to' adjusted qtys*/

      FB06W00.FB06WWF1 = FB06W00.FB06MTCQ[FB06WIX1]; /* curr to work*/
      FB06W00.FB06WWF2 = FB06W00.FB06MFAJ[FB06WIX1]; /* adj to work*/
      FB06W00.FB06MTAQ[FB06WIX1] = FB06W00.FB06WWF1 + FB06W00.FB06WWF2;

    end

    FB06W00.FB06MFAT = FB06W00.FB06MFAT + FB06W00.FB06MFAQ[FB06WIX1];
    FB06W00.FB06MTTA = FB06W00.FB06MTTA + FB06W00.FB06MFAJ[FB06WIX1];
    FB06W00.FB06MTAT = FB06W00.FB06MTAT + FB06W00.FB06MTAQ[FB06WIX1];

    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* increment*/

  end


   /* ----------------------------------------------------*/
   /* ezeaid not pf9 and data was changed,*/
   /* set message 'press pf9 to update'.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey not pf9
   && FB06W00.FB06WDCF == "Y") /* and data changed*/

    converseLib.validationFailed(98); /* press pf9 to update*/
    FB06M010.XXXPRCNM = "FB06600";
  end



   /* ----------------------------------------------------*/
   /* If PF10 or PF11 has been pressed increment or*/
   /* decrement the sizes requested and return to*/
   /* reload size data and display map.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf10)
    FB06W00.FB06WSSR = "Y"; /* Scroll request*/
    FB06W00.FB06WCSI = FB06W00.FB06WCSI - FB06M010.FB06MSZS;
    FB06W00.XXXMSGNO = 15; /* Scroll left successful*/
    FB06W00.FB06MSZS = FB06M010.FB06MSZS;
    FB06W00.FB06WSWF = "Y"; /* format data flag*/
    return;
  end

  if (converseVar.eventKey is pf11)
    FB06W00.FB06WSSR = "Y"; /* Scroll request*/
    FB06W00.FB06WCSI = FB06W00.FB06WCSI + FB06M010.FB06MSZS;
    FB06W00.XXXMSGNO = 14; /* Scroll right successful*/
    FB06W00.FB06MSZS = FB06M010.FB06MSZS;
    FB06W00.FB06WSWF = "Y"; /* format data flag*/
    return;
  end


   /* ----------------------------------------------------*/
   /* If enter pressed, save size scroll.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter pressed*/
    FB06W00.FB06MSZS = FB06M010.FB06MSZS; /* save size scroll*/
    if (FB06W00.FB06WDCF == "N")
      return;
    end
  end

   /* ----------------------------------------------------*/
   /* If PF9 has been pressed, update dfbuy.vmfbuy01*/
   /* table with current map values.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* Update requested*/

    if (FB06W00.FB06WDCF == "Y") /* if data changed*/

      XX0XS01(); /* get date and time*/

       /* update from dfbuy.vmfbuy01 record*/


      set FB7REC empty; /* initialize*/

      FB7REC.FB7GROUP = FB06W01.FB06WGRP; /* move data*/

      move FB06W00.FB06MFAQ to FB7REC.FB7QTB[1] for all; /* move quantities*/
      FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
      FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

      FB06610(); /* update 'from' dfbuy.vmfbuy01 row*/


       /* update to dfbuy.vmfbuy01 record*/


      set FB7REC empty; /* initialize*/

      FB7REC.FB7GROUP = FB06W02.FB06WGRP; /* move data*/

      move FB06W00.FB06MTAQ to FB7REC.FB7QTB[1] for all; /* move quantities*/
      FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
      FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

      FB06620(); /* update 'to' dfbuy.vmfbuy01 row*/





        /* commit database changes*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit database change*/

      FB06W00.XXXMSGNO = 32; /* Update successful*/
      FB06W00.FB06WRDF = "Y"; /* Reload data*/
    else
      converseLib.validationFailed(66); /* no data to update*/
    end
  end

  FB06W00.FB06WSWF = "Y"; /* format the map switch*/


end // end FB06600

// update 'from' DFBUY.VMFBUY01
Function FB06610()
   /* ------------------------------------------------------------*/
   /* update dfbuy.vmfbuy01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB06M010.XXXPRCNM = "FB06610"; /* process*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06610"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W01.FB06WGRP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06610";
  exit stack;


end // end FB06610

// update 'to' DFBUY.VMFBUY01
Function FB06620()
   /* ------------------------------------------------------------*/
   /* update dfbuy.vmfbuy01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB06M010.XXXPRCNM = "FB06620"; /* process*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06620"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB06W02.FB06WGRP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06620";
  exit stack;


end // end FB06620

// select DFBUY.VFMCTL01 row
Function FB06S01()
  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB06S01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFMCTL01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB06M010.XXXPRCNM = "FB06S01";
  exit stack;


end // end FB06S01

// load whse array
Function FB06S02()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB06S03(); /* declare cursor*/
  FB06W00.FB06WIX1 = 1; /* first row*/

  while (FB06W00.FB06WIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB06S04(); /* fetch row*/
    FB06W00.FB06WIX1 = FB06W00.FB06WIX1 + 1; /* next row*/
  end

  if (FB06W00.FB06WIX1 <= 10)
    FB06S05(); /* close cursor*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  FB06M010.XXXPRCNM = "FB06S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB06M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB06W00.FB06WRDF = "N"; /* dont request data*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB06S02

// Declare cursor DCORP.VSUMCD01
Function FB06S03()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB06M010.XXXPRCNM = "FB06S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB06M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB06W00.FB06WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB06S03

// Fetch row DCORP.VSUMCD01
Function FB06S04()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB06W00.XWH-WHSE-CD[FB06WIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB06M010.XXXPRCNM = "FB06S04"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB06M010.XXXPRCNM; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FB06W00.FB06WRDF = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end

end // end FB06S04

// Close cursor DCORP.VSUMCD01
Function FB06S05()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB06M010.XXXPRCNM = "FB06S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB06M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB06W00.FB06WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB06S05

//*** RECORD=FB06W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB06W00 type basicRecord
  5 * char(1238) ; 
    10 FB06WMKY FB06WMKY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 FB7RTADT FB7RTADT ; 
      15 FB06MSZS FB06MSZS ; 
      15 FY1FCTYC FY1FCTYC [5] ; 
    10 FB06WRDF FB06WRDF ; 
    10 FB06WSWF FB06WSWF ; 
    10 FB06WSSR FB06WSSR ; 
    10 FB06WISF FB06WISF ; 
    10 FB06WFPF FB06WFPF ; 
    10 FB06WFTF FB06WFTF ; 
    10 FB06WMFF FB06WMFF ; 
    10 FB06WDCF FB06WDCF ; 
    10 FB06WKCF FB06WKCF ; 
    10 FB06WDWF FB06WDWF ; 
    10 * char(1) ; 
    10 FB06MFCQ FB06MFCQ [40] ; 
    10 FB06MFAQ FB06MFAQ [40] ; 
    10 FB06MTCQ FB06MTCQ [40] ; 
    10 FB06MFAJ FB06MFAJ [40] ; 
    10 FB06MTAQ FB06MTAQ [40] ; 
    10 FB06MFCT FB06MFCT ; 
    10 FB06MFAT FB06MFAT ; 
    10 FB06MTCT FB06MTCT ; 
    10 FB06MTTA FB06MTTA ; 
    10 FB06MTAT FB06MTAT ; 
    10 * char(1) ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBKRDFL FBKRDFL ; 
    10 FB06MFFY FB06MFFY ; 
    10 FB06MTFY FB06MTFY ; 
    10 FB06WIXM FB06WIXM ; 
    10 FB06WIX1 FB06WIX1 ; 
    10 FB06WFSI FB06WFSI ; 
    10 FB06WLSI FB06WLSI ; 
    10 FB06WCSI FB06WCSI ; 
    10 FB06WZHD FB06WZHD [40] ; 
    10 FB06WWF1 FB06WWF1 ; 
    10 FB06WWF2 FB06WWF2 ; 
    10 FB06WRDR FB06WRDR ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB06WRTA FB06WRTA ; 
      15 FB06WRTM FB06WRTM ; 
      15 FB06WRTD FB06WRTD ; 
      15 FB06WRTY FB06WRTY ; 
    10 FB06WKDT FB06WKDT ; 
      15 FB06WKLZ FB06WKLZ ; 
      15 FB06WKCC FB06WKCC ; 
      15 FB06WKYY FB06WKYY ; 
      15 FB06WKMM FB06WKMM ; 
      15 FB06WKDD FB06WKDD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
end // end FB06W00

//*** RECORD=FB06W01 ****
// ------------------------------------------------------------
// working storage for the 'from' factory.
// 
// this is an exact duplication of fb7rec - the data record
// from the dfbuy.vmfbuy01 table.
// ------------------------------------------------------------
// ***********************
Record FB06W01 type basicRecord
  5 FB06WGRP FB06WGRP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 XDVCD XDVCD ; 
    10 XCTCD XCTCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB06W01

//*** RECORD=FB06W02 ****
// ------------------------------------------------------------
// working storage for the 'to' factory.
// 
// this is an exact duplication of fb7rec - the data record
// from the dfbuy.vmfbuy01 table.
// ------------------------------------------------------------
// ***********************
Record FB06W02 type basicRecord
  5 FB06WGRP FB06WGRP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 XDVCD XDVCD ; 
    10 XCTCD XCTCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB06W02

// adjustment
DataItem FB06MFAJ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from adjusted quantity
DataItem FB06MFAQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from adjusted total
DataItem FB06MFAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from current qty
DataItem FB06MFCQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from current total
DataItem FB06MFCT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from factory
DataItem FB06MFFY char(3)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// size scroll
DataItem FB06MSZS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to adjusted qty
DataItem FB06MTAQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to adjusted qty total
DataItem FB06MTAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to current quantity
DataItem FB06MTCQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to current qty total
DataItem FB06MTCT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to factory
DataItem FB06MTFY char(3)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// total adjustment
DataItem FB06MTTA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current size index
DataItem FB06WCSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed flag
DataItem FB06WDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// domestic whse found flag
DataItem FB06WDWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fast path flag
DataItem FB06WFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First size index
DataItem FB06WFSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem FB06WFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'to' fcty group
DataItem FB06WGRP char(255)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid scheduler flag
DataItem FB06WISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB06WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB06WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date cc
DataItem FB06WKCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed flag
DataItem FB06WKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date dd
DataItem FB06WKDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FB06WKDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date leading zero
DataItem FB06WKLZ num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mm
DataItem FB06WKMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yy
DataItem FB06WKYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size index
DataItem FB06WLSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// more factorys flag
DataItem FB06WMFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map key
DataItem FB06WMKY char(86)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB06WRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remainder
DataItem FB06WRDR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformatted rta date
DataItem FB06WRTA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta day
DataItem FB06WRTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta month
DataItem FB06WRTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta year
DataItem FB06WRTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size scroll requested flag
DataItem FB06WSSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem FB06WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field 1
DataItem FB06WWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB06WWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size has data flag
DataItem FB06WZHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

