package fb0r;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XPGCD;
import corpx2.XPLCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpx2.XWHCD1;
import corpx2.XWHCD2;
import corpx2.XWHCD3;
import corpx2.XWHSABRV;
import corpz3.ZZZCHGCT;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB4SZPCT;
import fb.common.FB8BUYDT;
import fb.common.FBHREC;
import fb.common.FBI-GROUP;
import fb.common.FBIREC;
import fb.common.FBKRDFL;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT3YYMM;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0R ****
// This application is part of the footwear buy system.  It is
// a display only screen that shows bottom line availability by
// size/warehouse and for all warehouses combined.  It also
// displays bottom line percent which is the B/L available
// quantity by size divided by the total B/L available quantity
// the standard size distribution percent is also listed.  on
// the far fight side of the screen is the total B/L available
// quantity, the total B/L regional percent, and the standard
// reqional percent (this can be overlayed with the adjusted
// B/L regional percent)
// to view all sizes, PF10 and PF11 are proveded to shift left
// and right.  the number of sizes to be entered.  the default
// is ten.
// the user may exit to any allowed application via fast path
// or PF keys
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/21/89   lrein    Created.
// 08/02/90   jalle1   add DATAIN to p0020 steps in jcl tables
//                     for fb1401 reports.
// 09/25/90   jalle1   Add stock qtb, rnd-flag, and print calc
//                     rpt field and supporting logic.
// 01/22/91   jalle1   fix concatination problem in fb0rt13.
// 04/16/91   jalle1   fix scroll error.
// 04/26/92   jalle1   remove fbltaqty from calculation of
//                     adjusted bottom line availability.
// 08/20/92   jmclau   fix corp b/l percentage calculation.
//                     adjusted bottom line availability.
// 01/25/93   jmclau   PA-308 non-nil direct ship orders that
//                     have pre-advises should be taken out of
//                     the stock quantity to buy calculation.
// 07/21/93   ldeluh   Chg to use testenc instead of testrms.
// 09/17/93   pmainw   fb9995 - CSPv4 conversion, map change.
// 12/03/93   pmainw   FB-322 - handle divert O.A.'s.
// 12-22-94   lrein    added summary code table to verify that
//                     only using domestic whses this for
//                     European centralised forecasting project
// 05-30-96   bkepfo   Modify divert logic.
// 09-04-96   rtran    HOCKEY - Changed process FB0R211 to
//                     capture the ASRA problem when there is
//                     one or two warehouses occurs.
// 10-24-96   rtran    Modified to bring the future orders into
//                     the current buy.
// 11/17/97   RJOGIA   Modified to bring Indirect Dsirect ship-
//                     ment into the current buy.
// 01-09-97   oricha  y2k modifications:  m010 zero fill year;
//                     w00, 100, 110, 120, 190, 500, 621, 631,
//                     633, xpfb001 flow.
// 04-02-99   VANNAM   Modified to show the MacKinney Systems
//                     Output Screen after the completion of
//                     the background job.
// 04/19/99   RTRAN    Restored logic not to display Mackinney
//                     Output Screen.
// *********************
Program FB0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0RW00 FB0RW00; // record
  FB0RW01 FB0RW01; // record
  FB0RW02 FB0RW02; // record
  FB0RW03 FB0RW03; // record
  FB0RW04 FB0RW04; // record
  FB4REC FB4REC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0RT11; // table
  use FB0RT13; // table
  use FB0RT01 {deleteAfterUse = yes}; // table
  use FB0RT03 {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use FB0RM.FB0RM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the b/l inquiry process.*/
     /* ------------------------------------------------------------*/
    ;
    set FB0RW00 empty; /* Initialize working storage*/
    set FB0RW01 empty; /* Initialize working storage*/
    set FB0RW02 empty; /* Initialize working storage*/
    set FB0RW03 empty; /* Initialize working storage*/
    set FB0RW04 empty; /* Initialize working storage*/
    set FB0RM010 initial; /* Initialize map output area*/
    set FBIREC empty; /* initialise working storage*/
    set FB4REC empty; /* initialise working storage*/
    set FBHREC empty; /* initialise working storage*/
    set FBKREC empty; /* initialise working storage*/
    set FBLREC empty; /* initialise working storage*/
    set FBXREC empty; /* initialise working storage*/
    set FBXREC empty; /* initialise working storage*/
    set SQLCA empty; /* initialise working storage*/
    set TA1REC empty; /* initialise working storage*/
    set TA5REC empty; /* initialise working storage*/
    set TA6REC empty; /* initialise working storage*/
    set PG2REC empty; /* initialise working storage*/
    set PG3REC empty; /* initialise working storage*/
    FB0RW00.FB0RWRDS = "N"; /* no to request data switch*/
    FB0RW00.FB0RWMCS = "N"; /* no to format map switch*/
     /* ------ y2k out begin --------*/
     /* MOVE 19 TO FB0RW00.FB0RWBCC;      /* century*/
     /* ------ y2k out end ----------*/
    FB0RW00.FB0RWBDD = 01; /* day*/
    ;
    if (COMMAREA.CAFRMSYS == "FB") /* came from within the system*/
      ;
      /* ------------------------------------------------------------*/
        /* this  checks the from application for various values.  if*/
        /* the fromap is not one of them, a list of data form fbwrec*/
        /* is moved to fbxrec.  if the fromap is one of the values,*/
        /* spaces are moved to fbxrec.*/
      /* ------------------------------------------------------------*/
      if (COMMAREA.CAFROMAP != "FB0A"
       && COMMAREA.CAFROMAP != "FB0B"
       && COMMAREA.CAFROMAP != "FB0C"
       && COMMAREA.CAFROMAP != "FB0D"
       && COMMAREA.CAFROMAP != "FB0E"
       && COMMAREA.CAFROMAP != "FB0G"
       && COMMAREA.CAFROMAP != "FB0I"
       && COMMAREA.CAFROMAP != "FB0J"
       && COMMAREA.CAFROMAP != "FB0K"
       && COMMAREA.CAFROMAP != "FB0L"
       && COMMAREA.CAFROMAP != "FB0N"
       && COMMAREA.CAFROMAP != "FB0O"
       && COMMAREA.CAFROMAP != "FB0P")
        FBXREC.FBXGROUP = FBWREC.FBWFILL;
      else
        set FBXREC empty;
      end
      ;
    end
    ;
    if (FBXREC.SY1STNBR[1] != " ")
      FB0RM010.SY1STNBR = FBXREC.SY1STNBR[1];
      FB0RW00.FB0RWRDS = "Y";
      FB0RW00.FB0RWMCS = "Y";
    end
    ;
    if (FBXREC.SY2CLRID[1] != " ")
      FB0RM010.SY2CLRID = FBXREC.SY2CLRID[1];
      FB0RW00.FB0RWRDS = "Y";
    end
    ;
    if (FBXREC.XDMCD[1] != " ")
      FB0RM010.XDMCD = FBXREC.XDMCD[1];
      FB0RW00.FB0RWRDS = "Y";
      FB0RW00.FB0RWMCS = "Y";
    end
    ;
    if (FBXREC.FB8BUYDT != 0)
      FB0RW00.FB0RWBDT = FBXREC.FB8BUYDT;
      FB0RW00.FB0RW-ORD-ADJ-BUY-DT = FBXREC.FB8BUYDT;
      FB0RM010.FB0RMBMO = FB0RW00.FB0RWBMO;
      FB0RW00.FB0RWRDS = "Y";
      FB0RW00.FB0RWMCS = "Y";
    end
    ;
    FB0RM010.FB0RMSCR = 10;
    ;
    FB0RM010.FB0RMPCR = "N";
    ;
    goto FB0R001; /* converse the main process*/
    ;
    ;
    FB0R001: FB0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0R001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FB0R

// b/l inquiry main process
Function FB0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0R100(); /* Obtain data to display*/
  ;
  FB0R200(); /* Format and display the map*/
  ;
  FB0R300(); /* Check attention identifier*/
  ;
  FB0R400(); /* Reset fields to normal intensity*/
  ;
  FB0R500(); /* Verify the entered data*/
  ;
  FB0R600(); /* Process valid input request*/
  ;
  ;
end // end FB0R001

// obtain data to display
Function FB0R100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RW00.FB0RWRDS != "Y") /* Data was not requested*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  FB0RW00.FB0RWSCS = "Y"; /* can scroll*/
  ;
  FB0RS06(); /* load sum code array*/
  ;
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from the frozen bottom*/
   /* line table.*/
   /* ------------------------------------------------------------*/
  ;
  set FBLREC empty; /* initialise record*/
  FBLREC.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
  FBLREC.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
  FBLREC.XDMCD = FB0RM010.XDMCD; /* dimension code*/
  FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO; /* move yymm to workarea*/
   /* --------- y2k in begin ---------*/
  if (FB0RW00.FB0RWBDT < 19000000) /* no century yet*/
    if (FB0RW00.FB0RWBYY > 65)
      FB0RW00.FB0RWBCC = 19;
    else
      FB0RW00.FB0RWBCC = 20;
    end
  end
  FB0RW00.FB0RWBDD = 01;
   /* --------- y2k in end ----------*/
  ;
  FBLREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* move to ccyymm01*/

  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBLREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBLREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBLREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
  else
    FBLREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBLREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBLREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBLREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBLREC.XUMCD = "01"; /* move default*/
  end
  ;
  FB0R110(); /* select set fr b/l table*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain all table rows to be accumulated*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWFFI = "Y"; /* initialise first fetch sw*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* for each row*/
    FB0RW00.FB0RWDWS = "N"; /* Domestic whse not found*/
    FB0R120(); /* get the table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100  /* row not found*/
     && converseVar.eventKey is pf6 /* next product*/
     && FB0RW00.FB0RWFFI == "Y")    /* first fetch*/
      set FB0RW02 empty;
      set FB0RW01 empty;
      ;
      /* ------------------------------------------------------------*/
       /* Save the key information in map display storage area.*/
      /* ------------------------------------------------------------*/
      ;
      FB0RW01.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
      FB0RW01.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
      FB0RW01.XDMCD = FB0RM010.XDMCD; /* dimension code*/
      FB0RW01.PT3YYMM = FB0RM010.PT3YYMM; /* bottom line month*/
      FB0RW01.FB0RWBMO = FB0RM010.FB0RMBMO; /* buy month*/
      FB0RW01.FB0RMSCR = FB0RM010.FB0RMSCR; /* scroll cols*/
      FBXREC.SY1STNBR[1] = FB0RM010.SY1STNBR; /* style number*/
      FBXREC.SY2CLRID[1] = FB0RM010.SY2CLRID; /* color code*/
      FBXREC.XDMCD[1] = FB0RM010.XDMCD; /* dimension code*/
      FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO; /* buy month*/
      FB0RW01.FB0RMPCR = FB0RM010.FB0RMPCR; /* print calc report*/
      /* ---------- y2k out begin ---------*/
      /* MOVE 19 TO FB0RW00.FB0RWBCC; /* century*/
      /* ---------- y2k out end -----------*/
      /* ---------- y2k in  begin ---------*/
      if (FB0RW00.FB0RWBYY > 65)
        FB0RW00.FB0RWBCC = 19; /* century*/
      else
        FB0RW00.FB0RWBCC = 20; /* century*/
      end
      /* ---------- y2k in end ------------*/
      FB0RW00.FB0RWBDD = 01; /* day*/
      FBXREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* buy date ccyymmdd*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* if found, save the data in working storage area*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     && FB0RW00.FB0RWDWS == "Y"  /* found a domestic whse*/
     && FB0RW00.FB0RWFFI == "Y") /* first row*/
      FB0RW00.FB0RWFFI = "N"; /* not first fetch any more*/
      FB0RW00.FB0RWTFP = 0; /* Total of all VFBLAV01 percents*/
      set FB0RW02 empty; /* intialize accum table*/
      set FB0RW01 empty;
      FB0RW02.FB0RWSRP = "Y"; /* standard percent flag*/
      move "N" to FB0RW02.FB0RWSPF[1] for all; /* standard percent flag array*/
      move "N" to FB0RW02.FBKRDFL[1] for all; /* round flag array*/
      move 0 to FB0RW00.FB0RWFSQ[1] for all; /* FBL invalid size array*/
      ;
      /* ------------------------------------------------------------*/
       /* Save the key information in map display storage area.*/
      /* ------------------------------------------------------------*/
      ;
      FB0RW01.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
      FB0RW01.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
      FB0RW01.XDMCD = FB0RM010.XDMCD; /* dimension code*/
      FB0RW01.PT3YYMM = FB0RM010.PT3YYMM; /* bottom line month*/
      FB0RW01.FB0RWBMO = FB0RM010.FB0RMBMO; /* buy month*/
      FB0RW01.FB0RMSCR = FB0RM010.FB0RMSCR; /* scroll cols*/
      FBXREC.SY1STNBR[1] = FB0RM010.SY1STNBR; /* style number*/
      FBXREC.SY2CLRID[1] = FB0RM010.SY2CLRID; /* color code*/
      FBXREC.XDMCD[1] = FB0RM010.XDMCD; /* dimension code*/
      FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO; /* buy month*/
      FB0RW01.FB0RMPCR = FB0RM010.FB0RMPCR; /* print calc report*/
      /* ---------- y2k out begin ---------*/
      /* MOVE 19 TO FB0RW00.FB0RWBCC; /* century*/
      /* ---------- y2k out end -----------*/
      /* ---------- y2k in  begin ---------*/
      if (FB0RW00.FB0RWBYY > 65)
        FB0RW00.FB0RWBCC = 19; /* century*/
      else
        FB0RW00.FB0RWBCC = 20; /* century*/
      end
      /* ---------- y2k in end ------------*/
      FB0RW00.FB0RWBDD = 01; /* day*/
      FBXREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* buy date ccyymmdd*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* Save the key information in map display storage area.*/
      /* ------------------------------------------------------------*/
      ;
      FB0RW01.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
      FB0RW01.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
      FB0RW01.XDMCD = FB0RM010.XDMCD; /* dimension code*/
      FB0RW01.PT3YYMM = FB0RM010.PT3YYMM; /* bottom line month*/
      FB0RW01.FB0RWBMO = FB0RM010.FB0RMBMO; /* buy month*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     && FB0RW00.FB0RWDWS == "Y") /* found a domestic whse*/
      FB0R130(); /* save data in display working storage*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* Otherwise, if first fetch, indicate that no data was found*/
       /* to display*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0RW00.FB0RWFFI == "Y" /* first fetch*/
       && SQLCA.VAGen_SQLCODE == 100)
        FB0RS01(); /* clear data from map*/
        FB0RW00.FB0RWSCS = "N"; /* cant scroll*/
        FB0RM010.XXXMODID = "100"; /* Module identification*/
        set FB0RM010.SY1STNBR cursor, bold; /* highlight, place cursor*/
        converseLib.validationFailed(18); /* Indicate no data found*/
        FB0RW00.FB0RWMCS = "N"; /* dont format map*/
        FB0RW00.FB0RWRDS = "N"; /* dont request data*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/
  ;
   /* --------- y2k out begin -----------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* --------- y2k out begin -----------*/
   /* --------- y2k out begin -----------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* --------- y2k out begin -----------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, continue*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
    ;
    /* ------------------------------------------------------------*/
     /* indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0RM010.XXXMODID = "100"; /* Module identification*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB0RW00.FB0RWRDS = "N"; /* Request for data switch*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from the size/region*/
   /* percent table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0  /* no errors*/
   || converseVar.validationMsgNum == 10 /* scroll out of range*/
   || converseVar.validationMsgNum == 7) /* no next page*/
    set FB4REC empty; /* initialise record*/
    FB4REC.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
    FB4REC.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
    FB4REC.XDMCD = FB0RM010.XDMCD; /* dimension code*/
    FB4REC.FB4STDFL = "Y"; /* standard flag*/
    FB4REC.XQACD = FBLREC.XQACD; /* quality code*/
    FB4REC.PC2INSEG = FBLREC.PC2INSEG; /* spec code*/
    FB4REC.XPGCD = FBLREC.XPGCD; /* package type code*/
    FB4REC.XUMCD = FBLREC.XUMCD; /* unit of measure code*/
     /* MOVE -1 TO FB4REC.FB1INSEQ    ;         wild card int seq #*/
    FB4REC.XSACD = "000"; /* default shade code*/
    ;
    if (FBWREC.XGPCD != "  ") /* gpc in commarea*/
      FB4REC.XGPCD = FBWREC.XGPCD; /* move to key*/
    else
      FB4REC.XGPCD = "02"; /* move default*/
    end
    ;
    FB0R140(); /* select set size/reg pct tbl*/
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area, and obtain all table rows to be*/
     /* accumulated.*/
    /* ------------------------------------------------------------*/
    ;
    FB0RW00.FB0RWFFI = "Y"; /* initialise first fetch sw*/
    ;
    while (SQLCA.VAGen_SQLCODE != 100) /* for each row in the selected set*/
      FB0R150(); /* get the table row*/
      ;
      /* ------------------------------------------------------------*/
       /* if found, save the data in working storage area*/
      /* ------------------------------------------------------------*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FB0R160(); /* save data in display working storage*/
      else
        ;
        /* ------------------------------------------------------------*/
         /* Otherwise, if first fetch, indicate that no data was found*/
         /* to display*/
        /* ------------------------------------------------------------*/
        ;
        if (FB0RW00.FB0RWFFI == "Y") /* first fetch*/
          FB0RW02.FB0RWSRP = "NA"; /* Standard percent flag*/
           /* FB0RS01                 ;          clear data from map*/
           /* MOVE 'N' TO FB0RW00.FB0RWSCS   ;   cant scroll*/
           /* MOVE '100' TO FB0RM010.XXXMODID;   Module identification*/
           /* SET FB0RM010.SY1STNBR CURSOR,BRIGHT*/
           /* MOVE 175 TO EZEMNO*/
           /* MOVE 'N' TO FB0RW00.FB0RWMCS   ;   dont format map*/
             /* MOVE 'N' TO FB0RW00.FB0RWRDS   ;   dont request data*/
             /* EZEFLO                  ;   display map*/
        end
        ;
      end
      ;
    end
    ;
    FB0R170(); /* get product and size descriptions*/
    FB0R180(); /* get warehouse description*/
    /* ------------------------------------------------------------*/
     /* close cursor*/
    /* ------------------------------------------------------------*/
    ;
    try
      call "IO3020" ("C4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
    ;
    /* ------------------------------------------------------------*/
     /* If not successful display error*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Not normal return code*/
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      FB0RM010.XXXMODID = "100"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "CLOSE CURSOR        ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
      TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      ;
      FB0RW00.FB0RWRDS = "N"; /* Request for data switch*/
      ;
      exit stack; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate stock quantity to buy from dfbuy.vdnord01 and*/
   /* and dfbuy.vfqtbs01 tables.*/
   /* ------------------------------------------------------------*/
  ;
  FB0R190(); /* calculate stock qty*/
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* No error was found*/
    FB0RW00.FB0RWRDS = "N"; /* Request for data switch*/
    exit stack;
  end
  FB0RW00.FB0RWSCL = 1; /* start column*/
  FB0RW00.FB0RWRDS = "N"; /* Request for data switch*/
  FB0RW00.FB0RWMCS = "Y"; /* format map*/
  ;
   /* ------------------------------------------------------------*/
   /* check to see if there are any invalid sizes*/
   /* ------------------------------------------------------------*/
  ;
  FB0RS02();
  ;
end // end FB0R100

// select set from frozen b/l tbl
Function FB0R110()

   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ---------- y2k out begin --------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select set*/
   /* ---------- y2k out end ----------*/
   /* ---------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* ---------- y2k in end -----------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0RW00.FB0RWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R110

// get frozen b/l table row
Function FB0R120()

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ---------- y2k out begin --------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* ---------- y2k out end ----------*/
   /* ---------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ---------- y2k in end -----------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBLREC.XWHCD in FB0RW00.XWH-WHSE-CD)
        FB0RW00.FB0RWDWS = "Y"; /* domestic whse found*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0RW00.FB0RWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R120

// save b/l data in display ws
Function FB0R130()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
   /* Total the percents from all the rows*/
  ;
  FB0RW00.FB0RWTFP = FB0RW00.FB0RWTFP + FBLREC.FB4RGPCT;
  ;
  FB0RW00.FB0RWWIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWWIX < 4) /* until table end*/
    ;
    if (FBLREC.XWHCD == FB0RW02.XWHCD[FB0RWWIX]) /* warehouses match*/
      FB0RW02.ZZZCHGCT[FB0RWWIX] = FBLREC.ZZZCHGCT;
      FB0RW02.FBKRDFL[FB0RWWIX] = FBLREC.FBKRDFL;
      FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[FB0RWWIX]; /* to separate*/
      FB0RW00.FB0RWSIX = FB0RW00.FB0RWWIX; /* save index*/
      FB0RW00.FB0RWWIX = 4; /* end loop*/
    else
      ;
      if (FB0RW02.XWHCD[FB0RWWIX] == "  ") /* no match in tbl*/
        FB0RW02.FBKRDFL[FB0RWWIX] = FBLREC.FBKRDFL;
        FB0RW00.FB0RWGIX = 1; /* initialise size index*/
        ;
        while (FB0RW00.FB0RWGIX < 41) /* for all sizes*/
          FB0RW00.FB0RWBLQ[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB4SZPCT[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB0RWBLP[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
        end
        ;
        FB0RW02.ZZZCHGCT[FB0RWWIX] = FBLREC.ZZZCHGCT;
        FB0RW02.XWHCD[FB0RWWIX] = FBLREC.XWHCD;
                                   /* first for this whse*/
        FB0RW02.PT3YYMM = FBLREC.PT3YYMM; /* b/l yymm*/
        FB0RW02.FB4RGPCT[FB0RWWIX] = FBLREC.FB4RGPCT;
        FB0RW00.FB0RWSIX = FB0RW00.FB0RWWIX; /* save index*/
        FB0RW02.FB0RWGRP[FB0RWWIX] = FB0RW00.FB0RWGRP;
        FB0RW02.FB0RWGR2[FB0RWWIX] = FB0RW00.FB0RWGR2;
        FB0RW02.FB0RWPCT[FB0RWWIX] = FB0RW00.FB0RWPCT;
        FB0RW00.FB0RWWIX = 4; /* end loop*/
      else
        FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* next warehouse*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* add the various values for each size to the appropriate*/
    /* bucket*/
    /* ADDED CODE:  ADD ALL OF THE QUANTITIES ON THE FROZEN*/
    /* BOTTOM LINE TO A SIZE ARRAY IN WORKING STORAGE--THIS WILL*/
    /* BE USED TO VALIDATE SIZES.*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWGIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWGIX < 41) /* for each size*/
    FB0RW00.FB0RWWK = FB0RW00.FB0RWBLQ[FB0RWGIX];
    FB0RW00.FB0RWWK = FB0RW00.FB0RWWK + FBLREC.PT3AVQT[FB0RWGIX];
    FB0RW00.FB0RWWK = FB0RW00.FB0RWWK + FBLREC.FBLDAQTY[FB0RWGIX];
    FB0RW00.FB0RWWK = FB0RW00.FB0RWWK + FBLREC.FBLMAQTY[FB0RWGIX];
    FB0RW00.FB0RWWK = FB0RW00.FB0RWWK + FBLREC.FBLOAQTY[FB0RWGIX];
    FB0RW00.FB0RWBLQ[FB0RWGIX] = FB0RW00.FB0RWWK; /* back to bucket*/
    FB0RW00.FB0RWFSQ[FB0RWGIX] = FB0RW00.FB0RWFSQ[FB0RWGIX] + FB0RWWK;
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
  end
  ;
  FB0RW02.FB0RWGRP[FB0RWSIX] = FB0RW00.FB0RWGRP; /* back to table*/
end // end FB0R130

// select set from sz/reg pct tbl
Function FB0R140()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R140

// get size/region percent row
Function FB0R150()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0RW00.FB0RWFFI = "N"; /* not first fetch anymore*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R150

// save sz/reg pct data in ws
Function FB0R160()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWWIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWWIX < 4) /* until table end*/
    ;
    if (FB4REC.XWHCD == FB0RW02.XWHCD[FB0RWWIX]) /* warehouses match*/
      FB0RW02.FB0RWSPF[FB0RWWIX] = "Y";
         /* MOVE FB4REC.FB4RGPCT TO FB0RW02.FB4RGPCT(FB0RWWIX);*/
      if (FB4REC.FB4RGPCT != FB0RW02.FB4RGPCT[FB0RWWIX])
        FB0RW02.FB0RWSRP = "N";
      end
      FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[FB0RWWIX]; /* to separate*/
      FB0RW00.FB0RWSIX = FB0RW00.FB0RWWIX; /* save index*/
      FB0RW00.FB0RWWIX = 4; /* end loop*/
    else
      ;
      if (FB0RW02.XWHCD[FB0RWWIX] == "  ") /* no match in tbl*/
        FB0RW02.FB0RWSRP = "N";
        FB0RW00.FB0RWGIX = 1; /* initialise size index*/
        ;
        while (FB0RW00.FB0RWGIX < 41) /* for all sizes*/
          FB0RW00.FB0RWBLQ[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB4SZPCT[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB0RWBLP[FB0RWGIX] = 0; /* initialise bucket*/
          FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
        end
        ;
        FB0RW02.XWHCD[FB0RWWIX] = FB4REC.XWHCD;
                                   /* first for this whse*/
             /* MOVE FB4REC.FB4RGPCT TO FB0RW02.FB4RGPCT(FB0RWWIX);*/
        FB0RW02.FB0RWGRP[FB0RWWIX] = FB0RW00.FB0RWGRP;
        FB0RW02.FB0RWGR2[FB0RWWIX] = FB0RW00.FB0RWGR2;
        FB0RW02.FB0RWPCT[FB0RWWIX] = FB0RW00.FB0RWPCT;
        FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[FB0RWWIX]; /* to separate*/
        FB0RW00.FB0RWSIX = FB0RW00.FB0RWWIX; /* save index*/
        FB0RW00.FB0RWWIX = 4; /* end loop*/
      else
        FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* bump index*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* add the various values for each size to the appropriate*/
    /* bucket*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWGIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWGIX < 41) /* for each size*/
    FB0RW00.FB0RWWK2 = FB0RW00.FB4SZPCT[FB0RWGIX];
    FB0RW00.FB0RWWK2 = FB0RW00.FB0RWWK2 + FB4REC.FB4SZPCT[FB0RWGIX];
    FB0RW00.FB4SZPCT[FB0RWGIX] = FB0RW00.FB0RWWK2; /* back to bucket*/
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* bump index*/
  end
  ;
  FB0RW02.FB0RWPCT[FB0RWSIX] = FB0RW00.FB0RWPCT; /* back to table*/
end // end FB0R160

// get product and size desc
Function FB0R170()
   /* ------------------------------------------------------------*/
    /* build key for pg2rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FB0RM010.SY1STNBR;
  PG2REC.SY2CLRID = FB0RM010.SY2CLRID;
  PG2REC.XDMCD = FB0RM010.XDMCD;
  TA1REC.TA1PGMNM = "FB0R170";
  ;
  XSPG202();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or product not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB0RM010.XXXMODID = "170"; /* process number*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* product not found*/
    FB0RS01(); /* reset screen*/
    FB0RW00.FB0RWSCS = "N"; /* scroll switch*/
    converseLib.validationFailed(167); /* invalid product*/
    set FB0RM010.SY1STNBR cursor, bold;
    FB0RM010.XXXMODID = "170"; /* process number*/
    exit stack; /* display map*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* build key for pg3rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  TA1REC.TA1PGMNM = "PG0R170"; /* module id*/
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB0RM010.SY1STNBR;
  PG3REC.SY2CLRID = FB0RM010.SY2CLRID;
  PG3REC.XDMCD = FB0RM010.XDMCD;
  PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* sizes for only this div*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* in commarea*/
    PG3REC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    PG3REC.XQACD = "01"; /* move default*/
  end
  ;
  XSPG301();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or sizes not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
    FB0RM010.XXXMODID = 170; /* process number*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB0RM010.XXXMODID = 170; /* process number*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* no sizes found*/
    FB0RS01(); /* reset map*/
    FB0RW00.FB0RWSCS = "N"; /* scroll switch*/
    converseLib.validationFailed(999); /* set error message*/
    FB0RM010.XXXMODID = 170; /* process number*/
    exit stack; /* display map*/
  end
  ;
end // end FB0R170

// get warehouse descriptions
Function FB0R180()
   /* ------------------------------------------------------------*/
    /* scan the working storage areas to find the description for*/
    /* each warehouse.  if the description is not found in xwhtbl*/
    /* use 'unknwn' for the description.*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWWIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWWIX < 4) /* until table end*/
    ;
    if (FB0RW02.XWHCD[FB0RWWIX] in XWHTBL.XWHCD) /* match in table*/
      FB0RW02.XWHSABRV[FB0RWWIX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      ;
      if (FB0RW02.XWHCD[FB0RWWIX] != "  ")
        FB0RW02.XWHSABRV[FB0RWWIX] = "UNKNWN"; /* unknwn to desc*/
      end
      ;
    end
    ;
    FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* next warehouse*/
  end
  ;
end // end FB0R180

// calculate stock qtb
Function FB0R190()
   /* ------------------------------------------------------------*/
   /* select unique dfbuy.vfqtbs01 record.*/
   /* ------------------------------------------------------------*/
  ;
  set FBKREC empty;
  ;
  FBKREC.SY1STNBR = FB0RM010.SY1STNBR; /* style nbr*/
  FBKREC.SY2CLRID = FB0RM010.SY2CLRID; /* colr id*/
  FBKREC.XDMCD = FB0RM010.XDMCD; /* dim code*/
  FBKREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* buy date*/
  FBKREC.FB8RCTYP = "B";
  ;
  FB0R191();
  ;
   /* ------------------------------------------------------------*/
   /* select unique dfbuy.vfqtbs01 record.*/
   /* ------------------------------------------------------------*/
  ;
  set FBHREC empty;
  ;
  FBHREC.SY1STNBR = FB0RM010.SY1STNBR; /* style nbr*/
  FBHREC.SY2CLRID = FB0RM010.SY2CLRID; /* colr id*/
  FBHREC.XDMCD = FB0RM010.XDMCD; /* dim code*/
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
   /* MOVE '1' TO FBHREC.XDSCD;*/
  FBHREC.FBHDSAFL = "*";
   /* MOVE '  ' TO FBHREC.XWHCD;*/
  FBHREC.FB7BUYST = "Y"; /* future orders*/
  FBHREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* buy date*/
  ;
  FB0RW00.FB0RW-PREADVISE-TOT = 0; /* direct ship preadvise total*/
  FB0RW00.FB0RW-DIVERT-TOT = 0; /* direct ship divert total*/
  FB0RW00.FB0RWNQT = 0; /* direct ship/nil qty size total*/
  FB0RW00.FB0RWECS = "N"; /* cursor switch*/
  FB0RW00.FB0RW-CHK-DTE = 0; /* Init check date*/
  ;
  FB0RS03(); /* open cursor for dfbuy.vdnord01*/
  ;
  FB0RS04(); /* fetch dfbuy.vdnord01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 &&  /* If fetch worked OK   AND*/
  FB0RW00.FB0RW-CHK-DTE == 0)      /* and initial time thru*/
                                  /* convert FB-BUY-DT into PO-ID-MO-RNG*/
    FB0RW00.FB0RW-TMP-DT = FBHREC.FB8BUYDT;
    FB0RW00.FB0RW-CHK-CC = FB0RW00.FB0RW-TMP-CC; /* SET CENTURY*/
    FB0RW00.FB0RW-CHK-YY = FB0RW00.FB0RW-TMP-YY; /* SET YEAR*/
    FB0RW00.FB0RW-CHK-DM = FB0RW00.FB0RW-TMP-MM; /* SET DLV MONTH*/
    FB0RW00.FB0RW-CHK-MM = FB0RW00.FB0RW-TMP-MM - 2; /* SET MFG MONTH*/
    ;
    if (FB0RW00.FB0RW-CHK-MM < 0)
      FB0RW00.FB0RW-CHK-MM = 11;
      /* ------- y2k out begin --------*/
      /* FB0RW00.FB0RW-CHK-YY = FB0RW00.FB0RW-CHK-YY - 1;*/
      /* ------- y2k out end --------*/
      /* ------- y2k in begin ---------*/
      FB0RW00.FB0RW-CHK-CY = FB0RW00.FB0RW-CHK-CY - 1;
      /* ------- y2k in end -----------*/
    else
      if (FB0RW00.FB0RW-CHK-MM == 0)
        FB0RW00.FB0RW-CHK-MM = 12;
        /* ------- y2k out begin --------*/
        /* FB0RW00.FB0RW-CHK-YY = FB0RW00.FB0RW-CHK-YY - 1;*/
        /* ------- y2k out end --------*/
        /* ------- y2k in begin ---------*/
        FB0RW00.FB0RW-CHK-CY = FB0RW00.FB0RW-CHK-CY - 1;
        /* ------- y2k in end -----------*/
      end
    end
    FB0RW00.FB0RW-CHK-DTE = FB0RW00.FB0RW-CHK-DT;
  end
  ;
  while (FB0RW00.FB0RWECS == "N") /* while not end of cursor*/
    ;
    if (FBHREC.XDVCD != "02")
      FB0RW00.FB0RW-PREADVISE-COUNT = 0; /* direct ship preadvise CNT*/
      FB0RW00.FB0RW-DIVERT-COUNT = 0; /* direct ship divert total*/
      ;
      set FB0RW04 empty;
                         /* Init working storage record to be passed*/
                        /* to fbirec. fbirec was created after this*/
                        /* application was modified to access fb1510*/
                        /* io mod.*/
      ;
      ;
      FB0RW04.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
      FB0RW04.SY2CLRID = FBHREC.SY2CLRID; /* colr id*/
      FB0RW04.XDMCD = FBHREC.XDMCD; /* dim code*/
      FB0RW04.FB0RW-PA-ORD-ADJ-BUY-MO = FB0RW00.FB0RW-ORD-ADJ-BUY-MO; /* ord adj buy mo ccyymm*/
      FB0RW04.XWHCD = FBHREC.XWHCD; /* whse*/
      FB0RW04.FB0RW-COUNT = 0; /* io count*/
      FB0RW04.FB8BUYDT = 0; /* buy date*/
      FB0RW04.FB0RW-PENDING-ORD-ADJ-FL = " "; /* oa fl*/
      FB0RW04.FB0RW-CURRENT-DT = 0; /* current date*/
      FB0RW04.FB0RW-CURRENT-HHMMSS = 0; /* current time*/
      FB0RW04.OP1PARTN = FBHREC.OP1PARTN; /* ord partition char*/
      FB0RW04.OP1CUOID = FBHREC.OP1CUOID; /* cust ord id*/
      FB0RW04.OP1NORID = FBHREC.OP1NORID; /* nike ord id*/
      FB0RW04.FB0RW-PRDCUID = FBHREC.PC2CUXID; /* PRD CD*/
      FB0RW04.FB0RW-PKGTYPCD = FBHREC.XPGCD; /* PKG CD*/
      FB0RW04.FB0RW-XQAQALCD = FBHREC.XQACD; /* QUAL CD*/
      FB0RW04.FB0RW-XUMUOMCD = FBHREC.XUMCD; /* UOM CD*/
      FB0RW04.FB0RW-DLVRY-DT = FB0RW00.FB0RW-CHK-DTE; /* PO ID MO RNG*/
      ;
      FB0R193(); /* check for preadvises*/
      ;
                /* PERFORM FB0R194;    check for diverts  - OLD*/
   /* check for diverts*/
      FB0RS195();
      set FB0RW04 empty;
      FB0RW04.FBI-GROUP = FBIREC.FBI-GROUP;
                                  /* move fb1510 results back*/
                                  /* to the working storage record*/
      FB0RW00.FB0RWIX1 = 1; /* init work index*/
      while (FB0RW00.FB0RWIX1 <= 40) /* max size array*/
        FB0RW00.FB0RWNQT = FB0RW00.FB0RWNQT + FBHREC.FB7QTB[FB0RWIX1];
        if ((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ") || 
        (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
          if (FB0RW00.FB0RW-PREADVISE-COUNT > 0)
            FB0RW00.FB0RW-PREADVISE-TOT = FB0RW00.FB0RW-PREADVISE-TOT +             FBHREC.FB7QTB[FB0RWIX1];
          end
          if (FB0RW00.FB0RW-DIVERT-COUNT > 0)
            FB0RW00.FB0RW-DIVERT-TOT = FB0RW00.FB0RW-DIVERT-TOT +             FBHREC.FB7QTB[FB0RWIX1];
          end
        end
        FB0RW00.FB0RWIX1 = FB0RW00.FB0RWIX1 + 1;
      end
    end
    ;
    FB0RS04(); /* fetch dfbuy.vdnord01 row*/
    ;
  end
  ;
  FB0RS05(); /* close dfbuy.vdnord01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* stock qtb = forecast qtb - (all size qty buckets from*/
   /* direct ship/nil array - preadvise qty).*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RW-DIR-SHP-PREADV-TOT = 0; /* dir ship - preadvise*/
  FB0RW00.FB0RW-DIR-SHP-PREADV-TOT = FB0RW00.FB0RWNQT - FB0RW00.FB0RW-PREADVISE-TOT   - FB0RW00.FB0RW-DIVERT-TOT;
  FB0RW01.FB0RMSTQ = FBKREC.FB8FTQTB - FB0RW00.FB0RW-DIR-SHP-PREADV-TOT;
  ;
  ;
end // end FB0R190

// Obtain unique VFSQTB01
Function FB0R191()
  ;
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0R191"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0R191

// Check for preadvises
Function FB0R193()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FBIREC empty; /* Init record*/
  FBIREC.FBI-GROUP = FB0RW04.FBI-GROUP; /* Group move of record*/
  ;
  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0RW00.FB0RW-PREADVISE-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0R193"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0RM010.XXXMODID = "FB0R193";
  exit stack;
  ;
end // end FB0R193

// format and display the map
Function FB0R200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB0RW00.FB0RWMCS == "Y") /* map needs to be formatted*/
    FB0R210(); /* format the map*/
  end
  ;
  if (FBXREC.XXXMSGNO != 0)
                                   /* error or informational message*/
    ;
    FB0RW00.XXXMSGNO = FBXREC.XXXMSGNO; /* save prev error*/
    if (FBXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBXREC.XXXMSGNO);
    end /* move to map*/
   /* ------ y2k out begin ...no need to move to itself-*/
   /* MOVE FB0RM010.XXXMODID TO FB0RM010.XXXMODID; /* error module name*/
   /* ------ y2k out end -------------------------------*/
    set FB0RM010 alarm; /* indicate sound alarm*/
    ;
  end
  ;
  if (converseVar.eventKey is pf5) /* fix sizes*/
    FB0RM010.VAGen_EZEMSG = FB0RW00.FB0RWF5M;
  end
  ;
  converse FB0RM010 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FBXREC.XXXMSGNO = 0; /* message number*/
  ;
  COMMAREA.CATOAP = FB0RM010.CATOAP; /* to application*/
  COMMAREA.CAITEM = FB0RM010.CAITEM; /* application data*/
end // end FB0R200

// format map from display ws
Function FB0R210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/
  ;
  set FB0RM010 initial; /* map io area*/
  FB0RW00.FB0RWMCS = "N"; /* map format switch*/
  FB0RM010.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
  if (FB0RW00.FB0RWSCL > 40)
    FB0RW00.FB0RWSCL = 31;
  else
    ;
    if (FB0RW00.FB0RWSCL < 1)
      FB0RW00.FB0RWSCL = 1;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* calculate the proper start column*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[1]; /* to separate*/
  FB0RW00.FB0RWGR2 = FB0RW02.FB0RWGR2[1]; /* to separate*/
  FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[1]; /* to separate*/
  ;
  while (FB0RW00.FB0RWBLQ[FB0RWSCL] == 0 /* no data for any*/
   && FB0RW00.FB0RWBLP[FB0RWSCL] == 0 /* of the buckets,*/
   && FB0RW00.FB4SZPCT[FB0RWSCL] == 0 /* so bump the start*/
   && FB0RW00.FB0RWFSQ[FB0RWSCL] == 0 
   && PG3REC.SY4IDDSC[FB0RWSCL] == "  ") /* no sizes*/
    if (FB0RW00.FB0RWSCL < 40)
      FB0RW00.FB0RWSCL = FB0RW00.FB0RWSCL + 1; /* next bucket*/
    else
      ;
      FB0RW00.FB0RWRDS = "N"; /* no Request for data switch*/
      FB0RW00.FB0RWISF = "Y"; /* invalid size switch*/
      FB0RW00.FB0RWSCL = 1;
      FB0RM010.SY1STNBR = FB0RW01.SY1STNBR;
      FB0RM010.SY2CLRID = FB0RW01.SY2CLRID;
      FB0RM010.XDMCD = FB0RW01.XDMCD;
      FB0RM010.PT3YYMM = FBLREC.PT3YYMM;
      FB0RM010.FB0RMBMO = FB0RW01.FB0RWBMO;
      FB0RM010.SY1SSTNM = PG2REC.SY1SSTNM;
      FB0RM010.SY2CLRAB = PG2REC.SY2CLRAB;
      FB0RM010.FB0RMSRP = FB0RW02.FB0RWSRP;
      FB0RM010.FB0RMSCR = 10;
      converseLib.validationFailed(359); /* No size detail for this products division*/
      exit stack;
    end
  end
  ;
  FB0RW00.FB0RWECL = FB0RW00.FB0RWSCL + 10; /* end column*/
  FB0R211(); /* calculate amounts*/
  ;
   /* ------------------------------------------------------------*/
   /* format the key data*/
   /* ------------------------------------------------------------*/
  ;
  FB0RM010.SY1STNBR = FB0RW01.SY1STNBR;
  FB0RM010.SY2CLRID = FB0RW01.SY2CLRID;
  FB0RM010.XDMCD = FB0RW01.XDMCD;
  FB0RM010.PT3YYMM = FBLREC.PT3YYMM;
  FB0RM010.FB0RMBMO = FB0RW01.FB0RWBMO;
  FB0RM010.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0RM010.SY2CLRAB = PG2REC.SY2CLRAB;
  FB0RM010.FB0RMSRP = FB0RW02.FB0RWSRP;
  FB0RM010.FB0RMSTQ = FB0RW01.FB0RMSTQ;
  FB0RM010.FBKRDFL = FB0RW02.FBKRDFL[1];
  ;
  if (FB0RW01.FB0RMPCR == " ")
    FB0RM010.FB0RMPCR = "N";
  else
    FB0RM010.FB0RMPCR = FB0RW01.FB0RMPCR;
  end
  ;
  if (FB0RW01.FB0RMSCR == 0)
    FB0RM010.FB0RMSCR = 10;
  else
    FB0RM010.FB0RMSCR = FB0RW01.FB0RMSCR;
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWWIX = 1; /* initialise whse index*/
  ;
  while (FB0RW00.FB0RWWIX < 4 /* for each warehouse*/
   && FB0RW02.XWHCD[FB0RWWIX] != "  ") /* in the table*/
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWSCL; /* initialise index*/
    FB0RM010.XWHSABRV[FB0RWWIX] = FB0RW02.XWHSABRV[FB0RWWIX];
    FB0RM010.FB0RMTQ[FB0RWWIX] = FB0RW02.FB0RWTQ[FB0RWWIX];
    FB0RM010.FB0RMTBP[FB0RWWIX] = FB0RW02.FB0RWTBP[FB0RWWIX];
    FB0RM010.FB0RMTSP[FB0RWWIX] = FB0RW02.FB4RGPCT[FB0RWWIX];
    FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[FB0RWWIX]; /* to separate*/
    FB0RW00.FB0RWGR2 = FB0RW02.FB0RWGR2[FB0RWWIX]; /* to separate*/
    FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[FB0RWWIX]; /* to separate*/
    ;
    if (FB0RW00.FB0RWWIX == 1)
      FB0RW00.FB0RWMIX = 1; /* set map index to 1*/
    else
      ;
      if (FB0RW00.FB0RWWIX == 2)
        FB0RW00.FB0RWMIX = 11; /* set map index to 11*/
      else
        ;
        if (FB0RW00.FB0RWWIX == 3)
          FB0RW00.FB0RWMIX = 21; /* set map index to 21*/
        end
        ;
      end
      ;
    end
    ;
    while (FB0RW00.FB0RWGIX < FB0RW00.FB0RWECL) /* for each screen column*/
      FB0RM010.FB0RMBLQ[FB0RWMIX] = FB0RW00.FB0RWBLQ[FB0RWGIX];
      FB0RM010.FB0RMBLP[FB0RWMIX] = FB0RW00.FB0RWBLP[FB0RWGIX];
      FB0RM010.FB4SZPCT[FB0RWMIX] = FB0RW00.FB4SZPCT[FB0RWGIX];
      FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* set group index up 1*/
      FB0RW00.FB0RWMIX = FB0RW00.FB0RWMIX + 1; /* set map index up 1*/
    end
    ;
    FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* set whse index up 1*/
  end
  ;
  FB0RW00.FB0RWGIX = FB0RW00.FB0RWSCL; /* initialise group index*/
  FB0RW00.FB0RWMIX = 1; /* initialise map index*/
  ;
  while (FB0RW00.FB0RWMIX <= 10)
    FB0RM010.FB0RMCBQ[FB0RWMIX] = FB0RW00.FB0RWCBQ[FB0RWGIX];
    FB0RM010.FB0RMCBP[FB0RWMIX] = FB0RW00.FB0RWCBP[FB0RWGIX];
    FB0RM010.FB0RMCSP[FB0RWMIX] = FB0RW00.FB0RWCSP[FB0RWGIX];
    FB0RM010.SY4IDDSC[FB0RWMIX] = PG3REC.SY4IDDSC[FB0RWGIX];
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1;
    FB0RW00.FB0RWMIX = FB0RW00.FB0RWMIX + 1;
  end
  ;
  FB0RM010.FB0RMCTQ = FB0RW00.FB0RWCTQ;
  FB0RM010.FB0RMCTP = FB0RW00.FB0RWCTP;
  FB0RM010.FB0RMCTS = FB0RW00.FB0RWCTS;
  ;
end // end FB0R210
// calculate map amounts
Function FB0R211()
  ;
   /* ------------------------------------------------------------*/
   /* calculate total bottom line quantity by warehouse and total*/
   /* total bottom line quantity*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWWIX = 1; /* warehouse index*/
  FB0RW00.FB0RWCTQ = 0; /* corporate total total qty*/
  FB0RW00.FB0RWPTO = 0; /* corporate total positive qty*/
  FB0RW00.FB0RWCTP = 0; /* corporate total total b/l%*/
  FB0RW00.FB0RWCTS = 0; /* corporate total total ss%*/
  ;
  while (FB0RW00.FB0RWWIX < 4 /* for each warehouse*/
   && FB0RW02.XWHCD[FB0RWWIX] != "  ") /* in the table*/
    FB0RW02.FB0RWTQ[FB0RWWIX] = 0; /* zero whse total quantity*/
    FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[FB0RWWIX];
    FB0RW00.FB0RWGIX = 1; /* size index*/
    ;
    while (FB0RW00.FB0RWGIX < 41) /* for each size*/
      FB0RW00.FB0RWWK = FB0RW00.FB0RWBLQ[FB0RWGIX]; /* work area*/
      FB0RW02.FB0RWTQ[FB0RWWIX] = FB0RW02.FB0RWTQ[FB0RWWIX] +       FB0RW00.FB0RWWK;
      FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
    end
    ;
    if (FB0RW02.FB0RWTQ[FB0RWWIX] > 0) /* total corp positive qtys*/
      FB0RW00.FB0RWPTO = FB0RW00.FB0RWPTO + FB0RW02.FB0RWTQ[FB0RWWIX];
    end
    ;
    FB0RW00.FB0RWCTQ = FB0RW00.FB0RWCTQ + FB0RW02.FB0RWTQ[FB0RWWIX];
    FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* next warehouse*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate percents by size and warehouse.*/
   /* pct = 100*(blq(whse,size)/tot blq(whse))*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWWIX = 1; /* warehouse index*/
  ;
  while (FB0RW00.FB0RWWIX < 4 /* for each warehouse*/
   && FB0RW02.XWHCD[FB0RWWIX] != "  ") /* in the table*/
    FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[FB0RWWIX]; /* to separate*/
    FB0RW00.FB0RWWK3 = FB0RW02.FB0RWTQ[FB0RWWIX]; /* work area*/
    ;
    ;
    if (FB0RW00.FB0RWCTQ == 0) /* total corp qtys*/
      if (FB0RW00.FB0RWPTO > 0) /* total corp positive qtys*/
        FB0RW00.FB0RWCTQ = FB0RW00.FB0RWPTO;
      end
    end
    ;
    if (FB0RW00.FB0RWCTQ == 0)
      FB0RW02.FB0RWTBP[FB0RWWIX] = 0;
    else
      FB0RW02.FB0RWTBP[FB0RWWIX] = 100 * FB0RW00.FB0RWWK3 /       FB0RW00.FB0RWCTQ;
      FB0RW02.FB0RWTBP[FB0RWWIX] = FB0RW02.FB0RWTBP[FB0RWWIX] + .05;
    end
    ;
    FB0RW00.FB0RWCTS = FB0RW00.FB0RWCTS + FB0RW02.FB4RGPCT[FB0RWWIX];
    FB0RW00.FB0RWGIX = 1; /* size index*/
    ;
    while (FB0RW00.FB0RWGIX < 41) /* for each size*/
      FB0RW00.FB0RWWK = FB0RW00.FB0RWBLQ[FB0RWGIX]; /* work area*/
      ;
      if (FB0RW00.FB0RWWK3 != 0)
        FB0RW00.FB0RWBLP[FB0RWGIX] = 100 * FB0RW00.FB0RWWK /         FB0RW00.FB0RWWK3;
        if (FB0RW00.FB0RWBLP[FB0RWGIX] != 0)
          FB0RW00.FB0RWBLP[FB0RWGIX] = FB0RW00.FB0RWBLP[FB0RWGIX] + .05;
        end
      else
        FB0RW00.FB0RWBLP[FB0RWGIX] = 0;
      end
      ;
      FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
    end
    ;
    FB0RW02.FB0RWGR2[FB0RWWIX] = FB0RW00.FB0RWGR2; /* save percents*/
    FB0RW02.FB0RWGRP[FB0RWWIX] = FB0RW00.FB0RWGRP; /* save again*/
    FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* next warehouse*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate corporate total quantities and percents by size*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWGIX = 1; /* size index*/
  ;
  while (FB0RW00.FB0RWGIX < 41) /* for each size*/
    FB0RW00.FB0RWCBQ[FB0RWGIX] = 0; /* initialise corp quant by size*/
    FB0RW00.FB0RWCPQ[FB0RWGIX] = 0; /* initialise corp b/l % size*/
    FB0RW00.FB0RWCBP[FB0RWGIX] = 0; /* initialise corp b/l % size*/
    FB0RW00.FB0RWCSP[FB0RWGIX] = 0; /* initialise corp std % size*/
    FB0RW00.FB0RWWIX = 1; /* warehouse index*/
    ;
    while (FB0RW00.FB0RWWIX < 4 /* for each warehouse*/
     && FB0RW02.XWHCD[FB0RWWIX] != "  ") /* in the table*/
      FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[FB0RWWIX]; /* to separate*/
      FB0RW00.FB0RWGR2 = FB0RW02.FB0RWGR2[FB0RWWIX]; /* to separate*/
      FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[FB0RWWIX]; /* to separate*/
      FB0RW00.FB0RWWK = FB0RW00.FB0RWBLQ[FB0RWGIX]; /* work area*/
      FB0RW00.FB0RWCBQ[FB0RWGIX] = FB0RW00.FB0RWCBQ[FB0RWGIX] +       FB0RW00.FB0RWWK;
      ;
      FB0RW00.FB0RWWK2 = FB0RW00.FB4SZPCT[FB0RWGIX]; /* work area*/
      FB0RW00.FB0RWWK2 = FB0RW00.FB0RWWK2 * FB0RW02.FB4RGPCT[FB0RWWIX];
      FB0RW00.FB0RWWK2 = FB0RW00.FB0RWWK2 / 100;
      FB0RW00.FB0RWWK2 = FB0RW00.FB0RWWK2 + FB0RW00.FB0RWCSP[FB0RWGIX];
      FB0RW00.FB0RWCSP[FB0RWGIX] = FB0RW00.FB0RWWK2;
      if (FB0RW00.FB0RWWK > 0) /* positive b\l qty*/
        FB0RW00.FB0RWCPQ[FB0RWGIX] = FB0RW00.FB0RWCPQ[FB0RWGIX] +         FB0RW00.FB0RWWK;
      end
      FB0RW00.FB0RWWIX = FB0RW00.FB0RWWIX + 1; /* next warehouse*/
    end
    ;
    if (FB0RW00.FB0RWCBQ[FB0RWGIX] == 0)
      if (FB0RW00.FB0RWCPQ[FB0RWGIX] > 0) /* positive b/l qty*/
        FB0RW00.FB0RWCBQ[FB0RWGIX] = FB0RW00.FB0RWCPQ[FB0RWGIX];
      end
    end
    ;
    if (FB0RW00.FB0RWCBQ[FB0RWGIX] != 0) /* work area*/
      FB0RW00.FB0RWWK3 = FB0RW00.FB0RWCBQ[FB0RWGIX]; /* work area*/
      if (FB0RW00.FB0RWCSP[FB0RWGIX] != 0)
        FB0RW00.FB0RWCSP[FB0RWGIX] = FB0RW00.FB0RWCSP[FB0RWGIX] + .05;
      end
      ;
      if (FB0RW00.FB0RWCTQ == 0)
        FB0RW00.FB0RWCBP[FB0RWGIX] = 0;
      else
        FB0RW00.FB0RWCBP[FB0RWGIX] = 100 * FB0RW00.FB0RWWK3 /         FB0RW00.FB0RWCTQ;
        if (FB0RW00.FB0RWCBP[FB0RWGIX] != 0)
          FB0RW00.FB0RWCBP[FB0RWGIX] = FB0RW00.FB0RWCBP[FB0RWGIX] + .05;
        end
      end
    end
    ;
    FB0RW00.FB0RWCTP = FB0RW00.FB0RWCTP + FB0RW00.FB0RWCBP[FB0RWGIX];
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
  end
  ;
end // end FB0R211

// check attention identifier
Function FB0R300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFBS01(); /* Exit to another application*/
      FB0RM010.XXXMODID = "300"; /* Process name*/
      set FB0RM010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FB0RM010.XXXMODID = "300"; /* Process name*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pa2) /* clear screen*/
      COMMAREA.CATOAP = "FB0R"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FB0RM010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* select products*/
      COMMAREA.CATOAP = "FB0Q";
    end
    ;
    if (converseVar.eventKey is pf13) /* b/l avail maint*/
      COMMAREA.CATOAP = "FB0T";
    end
    ;
    if (converseVar.eventKey is pf16) /* adjust the buy*/
      COMMAREA.CATOAP = "FB0S";
    end
    ;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    XSFBS01(); /* transfer to another application*/
    FB0RW00.FB0RWRDS = "N"; /* dont request data*/
    FB0RW00.FB0RWMCS = "Y"; /* format map*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf18)
    if (FBLREC.FBKRDFL == "Y")
      FB0R310(); /* CHECK  FOR CORP TOTAL*/
    end
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf5  /* fix sizes*/
   && converseVar.eventKey not pf6  /* next product*/
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11 /* scroll right*/
   && converseVar.eventKey not pf15 /* print*/
   && converseVar.eventKey not pf18) /* calculate the buy*/
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FB0RM010.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    ;
    if (FB0RW00.FB0RWSCS == "N")
      converseLib.validationFailed(167); /* invalid product*/
      FB0RM010.XXXMODID = "300"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
end // end FB0R300

// CHECK CORP TOTAL FOR TOLERAN
Function FB0R310()
   /* ----------------------------------------------------------*/
    /* ADD ALL THE CORP SIZE PCTS TOGETHER*/
    /* IF TOTAL > 105 OR LESS THAN 95*/
       /* ERROR EXISTS*/
   /* ----------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 1;
  ;
  FB0RW00.FB0RWAIU = 0;
  ;
  while (sysVar.arrayIndex <= 40)
    ;
    FB0RW00.FB0RWAIU = FB0RW00.FB0RWAIU + FB0RW00.FB0RWCSP[sysVar.arrayIndex];
    ;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    ;
  end
  ;
  if (FB0RW00.FB0RWAIU > 105
   || FB0RW00.FB0RWAIU < 95)
    converseLib.validationFailed(361);
    exit stack;
  end
  ;
end // end FB0R310

// reset highlighted fields
Function FB0R400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0RM010.SY1STNBR initialAttributes; /* style number*/
  set FB0RM010.SY2CLRID initialAttributes; /* color code*/
  set FB0RM010.XDMCD initialAttributes; /* dimension code*/
  set FB0RM010.PT3YYMM initialAttributes; /* b/l date yymm*/
  set FB0RM010.FB0RMSCR initialAttributes; /* scroll amount*/
  set FB0RM010.FB0RMBMO initialAttributes; /* buy date yymm*/
  ;
  set FB0RM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0RM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FB0R400

// verify the entered data
Function FB0R500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RM010.CAITEM > " ") /* Application data was entered*/
    FB0RM010.XXXMODID = "500"; /* Module identification*/
    set FB0RM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* check if key was changed*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RM010.SY1STNBR != FB0RW01.SY1STNBR
   || FB0RM010.SY2CLRID != FB0RW01.SY2CLRID
   || FB0RM010.XDMCD != FB0RW01.XDMCD
   || FB0RM010.FB0RMBMO != FB0RW01.FB0RWBMO)
    FB0RW00.FB0RWKCS = "Y"; /* key changed*/
  else
    FB0RW00.FB0RWKCS = "N"; /* key didnt change*/
  end
  ;
  if (FB0RM010.FB0RMSCR < 1
   || FB0RM010.FB0RMSCR > 40)
    FB0RM010.XXXMODID = "500";
    converseLib.validationFailed(10);
    set FB0RM010.FB0RMSCR cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* aid validation*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RW00.FB0RWKCS == "Y") /* key changed*/
    ;
    if (converseVar.eventKey not enter) /* pf key was pressed*/
      ;
      if (converseVar.eventKey is pf6 /* next product*/
       && FB0RW01.SY1STNBR == " "     /* no previous good*/
       && FB0RW01.XDMCD == " "        /* products*/
       && FB0RW01.FB0RWBMO == 0)     
        FB0RW00.FB0RWRDS = "N"; /* dont request data*/
        FB0RW00.FB0RWMCS = "N"; /* dont format map*/
        converseLib.validationFailed(356); /* end of list message*/
        FB0RM010.XXXMODID = "500"; /* process number*/
        exit stack;
      else
        FB0RM010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(5); /* cant pf and change data*/
      end
      ;
    else /* enter was pressed*/
      ;
      if (FB0RM010.FB0RMPCR == "Y"
       || FB0RM010.FB0RMPCR == "N")
        FB0RW01.FB0RMPCR = FB0RM010.FB0RMPCR;
      else
        FB0RM010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(118); /* invalid data*/
        set FB0RM010.FB0RMPCR cursor, bold; /* highlight*/
      end
      ;
      if (FB0RM010.FB0RMBMO == "    ") /* buy month not entered*/
        FB0RM010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(8); /* required field*/
        set FB0RM010.FB0RMBMO cursor, bold; /* highlight*/
      else
        FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO;
        /* ----------- y2k out begin ----*/
        /* XX0XS01;*/
        /* XX0XW01.XX0XWYY = XX0XW01.XX0XWYY - 1;*/
        /* IF FB0RW00.FB0RWBYY LT XX0XW01.XX0XWYY;*/
        /* ----------- y2k out end ------*/
        /* ----------- y2k in begin -----*/
        FB0RW00.FB0RW-BUY-DT = FB0RM010.FB0RMBMO;
        if (FB0RW00.FB0RW-BUY-YY > 65)
          FB0RW00.FB0RW-BUY-CC = 19;
          FB0RW00.FB0RWBCC = 19;
        else
          FB0RW00.FB0RW-BUY-CC = 20;
          FB0RW00.FB0RWBCC = 20;
        end
        FB0RW00.FB0RW-CUR-DT = VGVar.currentGregorianDate;
        FB0RW00.FB0RW-CUR-CY = FB0RW00.FB0RW-CUR-CY - 1;
        if (FB0RW00.FB0RW-BUY-CY < FB0RW00.FB0RW-CUR-CY
        ) /* ----------- y2k in end -------*/
          FB0RM010.XXXMODID = "500"; /* process number*/
          converseLib.validationFailed(17); /* invalid value*/
          FB0RW00.FB0RWRDS = "N";
          FB0RW00.FB0RWMCS = "N";
          set FB0RM010.FB0RMBMO cursor, bold; /* highlight*/
        end
        ;
        if (FB0RW00.FB0RWBMM < 1
         || FB0RW00.FB0RWBMM > 12)
          FB0RW00.FB0RWRDS = "N";
          FB0RW00.FB0RWMCS = "N";
          FB0RM010.XXXMODID = "500"; /* process number*/
          converseLib.validationFailed(17); /* invalid value*/
          set FB0RM010.FB0RMBMO cursor, bold; /* highlight*/
        end
        ;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* move defaults*/
    /* ------------------------------------------------------------*/
    ;
    FB0RM010.SY2CLRID = "00"; /* color code*/
    FB0RM010.XDMCD = "00"; /* dimension code*/
    FBXREC.SY2CLRID[1] = "00"; /* color code*/
    FBXREC.XDMCD[1] = "00"; /* dimension code*/
    FBXREC.XQACD[1] = "01"; /* quality code*/
    FBXREC.PC2INSEG[1] = "000"; /* spec code*/
    FBXREC.XPGCD[1] = "00"; /* package type code*/
    FBXREC.XUMCD[1] = "01"; /* unit of measure code*/
    ;
    if (FB0RM010.SY1STNBR != " "
     && converseVar.eventKey not pf6)
      FB0R170();
    end
    ;
  else /* key didnt change*/
    ;
    /* -----------------------------------------------------------*/
      /* this next if in case the data was in error.  The map has*/
      /* already been reset, so the bad fields need to get*/
      /* highlighted again*/
    /* -----------------------------------------------------------*/
    ;
    if (converseVar.eventKey is enter) /* nothing new*/
      FB0RW00.FB0RWRDS = "Y"; /* request data*/
      exit stack; /* display map*/
    end
    ;
    if (converseVar.eventKey is pf5 /* fix sizes*/
     && FB0RW00.FB0RWISC == 0)      /* no invalid sizes*/
      converseLib.validationFailed(66); /* no data to update*/
      FB0RM010.XXXMODID = "500"; /* process number*/
      exit stack; /* display map*/
    end
    ;
    if (converseVar.eventKey is pf18) /* calculate the buy*/
      if (FB0RW00.FB0RWISF == "Y") /* Count of invalid sizes*/
        FB0RM010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(355); /* can't submit calc -invalid sizes*/
        exit stack;
      end
      ;
      FB0RW00.FB0RWIX1 = 1; /* set index to 1*/
      while (FB0RW00.FB0RWIX1 <= 4)
        if (FB0RW02.FBKRDFL[FB0RWIX1] == "Y")
          if (FB0RW02.FB0RWSRP != "NA" /* Vcurve exists*/
           && FB0RW00.FB0RWTFP == 0)   /* Total bottom line percent is zero*/
            converseLib.validationFailed(351); /* region percent are zero*/
            exit stack;
          end
        end
        FB0RW00.FB0RWIX1 = FB0RW00.FB0RWIX1 + 1;
      end
      ;
      FB0R510(); /* edit ship, forecast smry fl*/
    end
    ;
    if (converseVar.eventKey is pf10 /* scroll to the left*/
     || converseVar.eventKey is pf11) /* scroll to the right*/
      FB0R520(); /* edit scroll amount*/
    end
    ;
    if (converseVar.eventKey is pf6 /* next product*/
     && FBXREC.SY1STNBR[2] == " ")  /* nothing in next prod*/
      converseLib.validationFailed(356); /* nothing to display*/
      FB0RW00.FB0RWRDS = "N"; /* request data*/
      FB0RW00.FB0RWMCS = "N"; /* dont format map*/
      FB0RM010.XXXMODID = "500"; /* process number*/
    end
    ;
  end
  ;
  if (FB0RM010.SY1STNBR == " ")
    FB0RM010.XXXMODID = "500"; /* process number*/
    converseLib.validationFailed(8); /* required field*/
    set FB0RM010.SY1STNBR cursor, bold; /* highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 7
   && converseVar.eventKey not enter)
    /* next sentence*/
  else
    if (converseVar.validationMsgNum == 8
     || converseVar.validationMsgNum == 17)
      /* next sentence*/
    else
      if (converseVar.eventKey not pf6)
        FB0RW00.FB0RWRDS = "Y";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if vfblav01 round flag is a 'y' then a standard curve*/
   /* must exist for the warehouses or the calc submit is*/
   /* not allowed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18) /* Calc submit*/
    FB0RWIX1 = 1;
    while (FB0RWIX1 <= 4)
      if (FB0RW02.XWHCD != " ")
        if (FB0RW02.FBKRDFL[FB0RWIX1] == "Y"
         && FB0RW02.FB0RWSRP == "NA") /* no standard percent*/
          converseLib.validationFailed(175); /* No standard percent exists*/
          exit stack;
        end
      end
      FB0RW00.FB0RWIX1 = FB0RW00.FB0RWIX1 + 1;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FB0R500

// edit ship, forecast summary fl
Function FB0R510()
   /* ------------------------------------------------------------*/
   /* build key for fbhrec*/
   /* ------------------------------------------------------------*/
  ;
  FBHREC.SY1STNBR = FB0RM010.SY1STNBR;
  FBHREC.SY2CLRID = FB0RM010.SY2CLRID;
  FBHREC.XDMCD = FB0RM010.XDMCD;
  FBHREC.FB8BUYDT = FBXREC.FB8BUYDT;
  FBHREC.FBHDSAFL = "N";
  FBHREC.XQACD = FBLREC.XQACD;
  FBHREC.PC2INSEG = FBLREC.PC2INSEG;
  FBHREC.XPGCD = FBLREC.XPGCD;
  FBHREC.XUMCD = FBLREC.XUMCD;
  FBHREC.XWHCD = "*";
  ;
   /* ------------------------------------------------------------*/
   /* Select exist from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("SE", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row exists*/
      FB0RM010.XXXMODID = "510"; /* process number*/
      converseLib.validationFailed(224); /* product not accepted*/
      exit stack; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0R511(); /* edit forecast qtb summary flag*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "510"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R510

// edit forecast summary flag
Function FB0R511()
   /* ------------------------------------------------------------*/
   /* build key for fbkrec*/
   /* ------------------------------------------------------------*/
  ;
  FBKREC.SY1STNBR = FB0RM010.SY1STNBR;
  FBKREC.SY2CLRID = FB0RM010.SY2CLRID;
  FBKREC.XDMCD = FB0RM010.XDMCD;
  FBKREC.FB8BUYDT = FBXREC.FB8BUYDT;
  FBKREC.FB8RCTYP = "B";
  ;
   /* ------------------------------------------------------------*/
   /* Select unique from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBKREC.FBKFSAFL == "Y")
        return;
      end
      ;
      if (FBKREC.FBKFSAFL == "N") /* not all accepts done*/
        FB0RM010.XXXMODID = "511"; /* process number*/
        converseLib.validationFailed(225); /* product not accepted*/
        exit stack; /* Return to previous process*/
      end
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0RM010.XXXMODID = "511"; /* process number*/
      converseLib.validationFailed(226); /* product not on file*/
      exit stack; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "511"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R511

// edit scroll amounts
Function FB0R520()
  if (FB0RM010.FB0RMSCR == 0) /* no scroll amount entered*/
    FB0RW01.FB0RMSCR = 10; /* move default (full screen)*/
  else
    FB0RW01.FB0RMSCR = FB0RM010.FB0RMSCR;
  end
  ;
  if (FB0RM010.FB0RMSCR > 40)
    FB0RM010.XXXMODID = "520";
    converseLib.validationFailed(10);
    set FB0RM010.FB0RMSCR cursor, bold;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if scroll right and the start column is equal to 30 (40-10)*/
   /* set an error message.  if scroll left and the start col*/
   /* is equal to 1 set an error message*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11
   && FB0RW00.FB0RWSCL >= 30)
    FB0RM010.XXXMODID = "520";
    converseLib.validationFailed(24);
  end
  ;
  if (converseVar.eventKey is pf10
   && FB0RW00.FB0RWSCL == 1)
    FB0RM010.XXXMODID = "520";
    converseLib.validationFailed(23);
  end
  ;
end // end FB0R520

// process valid input request
Function FB0R600()
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if invalid sizes were found.*/
   /* ------------------------------------------------------------*/
  if (FB0RW00.FB0RWISF == "Y") /* invalid sizes were found*/
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
     /* Next sentence*/
  else
    ;
    FB0RM010.XXXMODID = "600"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RW00.FB0RWKCS == "Y" /* key changed*/
   && converseVar.eventKey not pf6) /* next prod with no good prev prods*/
    FB0RW00.FB0RWRDS = "Y"; /* set data request switch to yes*/
    FB0RW00.FB0RWMCS = "Y"; /* clear map*/
    ;
    /* ------------------------------------------------------------*/
     /* move defaults*/
    /* ------------------------------------------------------------*/
    ;
    FB0RM010.SY2CLRID = "00"; /* color code*/
    FB0RM010.XDMCD = "00"; /* dimension code*/
    FBXREC.SY2CLRID[1] = "00"; /* color code*/
    FBXREC.XDMCD[1] = "00"; /* dimension code*/
    FBXREC.XQACD[1] = "01"; /* quality code*/
    FBXREC.PC2INSEG[1] = "000"; /* spec code*/
    FBXREC.XPGCD[1] = "00"; /* package type code*/
    FBXREC.XUMCD[1] = "01"; /* unit of measure code*/
    return; /* return to performing process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if scrolling calculate the proper start column, and return*/
   /* to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RWGRP = FB0RW02.FB0RWGRP[1]; /* to separate*/
  FB0RW00.FB0RWGR2 = FB0RW02.FB0RWGR2[1]; /* to separate*/
  FB0RW00.FB0RWPCT = FB0RW02.FB0RWPCT[1]; /* to separate*/
  ;
  if (converseVar.eventKey is pf10) /* scroll right*/
    FB0RW00.FB0RWMCS = "Y"; /* format map*/
    FB0RW00.FB0RWSCL = FB0RW00.FB0RWSCL - FB0RM010.FB0RMSCR;
    ;
    if (FB0RW00.FB0RWSCL < 1) /* before first screen column*/
      FB0RW00.FB0RWSCL = 1; /* start at first column*/
    end
    ;
    while (FB0RW00.FB0RWBLQ[FB0RWSCL] == 0 /* no data for any*/
     && FB0RW00.FB0RWBLP[FB0RWSCL] == 0 /* of the buckets,*/
     && FB0RW00.FB4SZPCT[FB0RWSCL] == 0 /* so bump the start*/
     && PG3REC.SY4IDDSC[FB0RWSCL] == "     ") /* column up to the*/
      FB0RW00.FB0RWSCL = FB0RW00.FB0RWSCL + 1; /* next bucket*/
      converseLib.validationFailed(23); /* no more to left*/
    end
    ;
    FBXREC.XXXMSGNO = 15; /* info scroll ok*/
    return; /* return to performing process*/
  end
  ;
  if (converseVar.eventKey is pf11) /* scroll left*/
    FB0RW00.FB0RWMCS = "Y"; /* format map*/
    FB0RW00.FB0RWSCL = FB0RW00.FB0RWSCL + FB0RM010.FB0RMSCR;
    ;
    if (FB0RW00.FB0RWSCL > 30) /* after last possible col*/
      FB0RW00.FB0RWSCL = 31; /* start at last page*/
    end
    ;
    FB0RW00.FB0RWECL = FB0RW00.FB0RWSCL + 9; /* screen end col*/
    FB0RW00.FB0RWGIX = 40;
    ;
    while (FB0RW00.FB0RWBLQ[FB0RWGIX] == 0 /* no data for any*/
     && FB0RW00.FB0RWBLP[FB0RWGIX] == 0 /* of the buckets,*/
     && FB0RW00.FB4SZPCT[FB0RWGIX] == 0 
     && PG3REC.SY4IDDSC[FB0RWGIX] == "     ")
      FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX - 1; /* index down 1*/
    end
    ;
    if (FB0RW00.FB0RWGIX < FB0RW00.FB0RWECL)
      FB0RW00.FB0RWECL = FB0RW00.FB0RWGIX;
      FB0RW00.FB0RWSCL = FB0RW00.FB0RWECL - 9;
      converseLib.validationFailed(24); /* no more to right*/
    end
    ;
    FBXREC.XXXMSGNO = 14; /* info scroll ok*/
    return; /* return to performing process*/
  end
  ;
  if (converseVar.eventKey is pf6) /* next product*/
    FB0R610(); /* bump array in fbxrec*/
    if (FBXREC.SY1STNBR[1] == " ") /* No more items*/
      converseLib.validationFailed(356);
      FB0RW00.FB0RWRDS = "N";
                                   /* set data request switch to yes*/
      exit stack;
    else
      FB0RW00.FB0RWRDS = "Y";
                                   /* set data request switch to yes*/
      FB0RW00.FB0RWMCS = "Y"; /* clear map*/
      return; /* return to performing process*/
    end
  end
  ;
  if (converseVar.eventKey is pf15 /* print*/
   || converseVar.eventKey is pf18) /* calculate the buy*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0R620(); /* format production JCL*/
    else
      FB0R625(); /* format development JCL*/
    end
  end
  ;
  if (converseVar.eventKey is pf5) /* zero out invalid size buckets*/
    FB0R630(); /* Update VFBLAV01 rows*/
    FB0RW00.FB0RWRDS = "Y"; /* set data request switch to yes*/
    FB0RW00.FB0RWMCS = "Y"; /* clear map*/
    FB0RW00.FB0RWISF = "N"; /* invalid size flag*/
    FB0RW00.FB0RWISC = 0; /* invalid size count*/
    return; /* return to performing process*/
  end
  ;
  FBXREC.XXXMSGNO = 32; /* an info message, not an error*/
end // end FB0R600

// bump fbxrec array
Function FB0R610()
   /* ------------------------------------------------------------*/
   /* search through the array in fbxrec.  move element (n+1) to*/
   /* element n.  space out the last element to indicate end of*/
   /* array*/
   /* ------------------------------------------------------------*/
  FB0RW00.FB0RWLIX = 1; /* initialise low index*/
  FB0RW00.FB0RWHIX = 2; /* initialise high index*/
  ;
  while (FB0RW00.FB0RWHIX < 15 /* for each table entry*/
   && FBXREC.SY1STNBR[FB0RWHIX] != " ") /* with data in it*/
    FBXREC.XGPCD[FB0RWLIX] = FBXREC.XGPCD[FB0RWHIX]; /* up 1 rank*/
    FBXREC.SY1STNBR[FB0RWLIX] = FBXREC.SY1STNBR[FB0RWHIX];
    FBXREC.SY2CLRID[FB0RWLIX] = FBXREC.SY2CLRID[FB0RWHIX];
    FBXREC.XDMCD[FB0RWLIX] = FBXREC.XDMCD[FB0RWHIX];
    FBXREC.XQACD[FB0RWLIX] = FBXREC.XQACD[FB0RWHIX];
    FBXREC.PC2INSEG[FB0RWLIX] = FBXREC.PC2INSEG[FB0RWHIX];
    FBXREC.XPGCD[FB0RWLIX] = FBXREC.XPGCD[FB0RWHIX];
    FBXREC.XUMCD[FB0RWLIX] = FBXREC.XUMCD[FB0RWHIX];
    FBXREC.FBXFCTY1[FB0RWLIX] = FBXREC.FBXFCTY1[FB0RWHIX];
    FBXREC.FBXFCTY2[FB0RWLIX] = FBXREC.FBXFCTY2[FB0RWHIX];
    FBXREC.FBXFCTY3[FB0RWLIX] = FBXREC.FBXFCTY3[FB0RWHIX];
    FBXREC.FBXFCTY4[FB0RWLIX] = FBXREC.FBXFCTY4[FB0RWHIX];
    FBXREC.FBXFCTY5[FB0RWLIX] = FBXREC.FBXFCTY5[FB0RWHIX];
    FBXREC.FBXRPCT1[FB0RWLIX] = FBXREC.FBXRPCT1[FB0RWHIX];
    FBXREC.FBXRPCT2[FB0RWLIX] = FBXREC.FBXRPCT2[FB0RWHIX];
    FBXREC.FBXRPCT3[FB0RWLIX] = FBXREC.FBXRPCT3[FB0RWHIX];
    FBXREC.XWHCD1[FB0RWLIX] = FBXREC.XWHCD1[FB0RWHIX];
    FBXREC.XWHCD2[FB0RWLIX] = FBXREC.XWHCD2[FB0RWHIX];
    FBXREC.XWHCD3[FB0RWLIX] = FBXREC.XWHCD3[FB0RWHIX];
    ;
    FB0RW00.FB0RWHIX = FB0RW00.FB0RWHIX + 1; /* increment index*/
    FB0RW00.FB0RWLIX = FB0RW00.FB0RWLIX + 1; /* increment index*/
  end
  ;
  FBXREC.XGPCD[FB0RWLIX] = "  "; /* empty this element*/
  FBXREC.SY1STNBR[FB0RWLIX] = "      ";
  FBXREC.SY2CLRID[FB0RWLIX] = "   ";
  FBXREC.XDMCD[FB0RWLIX] = "  ";
  FBXREC.XQACD[FB0RWLIX] = "  ";
  FBXREC.PC2INSEG[FB0RWLIX] = "   ";
  FBXREC.XPGCD[FB0RWLIX] = "  ";
  FBXREC.XUMCD[FB0RWLIX] = "  ";
  FBXREC.FBXFCTY1[FB0RWLIX] = "    ";
  FBXREC.FBXFCTY2[FB0RWLIX] = "    ";
  FBXREC.FBXFCTY3[FB0RWLIX] = "    ";
  FBXREC.FBXFCTY4[FB0RWLIX] = "    ";
  FBXREC.FBXFCTY5[FB0RWLIX] = "    ";
  FBXREC.FBXRPCT1[FB0RWLIX] = 0;
  FBXREC.FBXRPCT2[FB0RWLIX] = 0;
  FBXREC.FBXRPCT3[FB0RWLIX] = 0;
  FBXREC.XWHCD1[FB0RWLIX] = "  ";
  FBXREC.XWHCD2[FB0RWLIX] = "  ";
  FBXREC.XWHCD3[FB0RWLIX] = "  ";
  ;
  FB0RM010.SY1STNBR = FBXREC.SY1STNBR[1];
  FB0RM010.SY2CLRID = FBXREC.SY2CLRID[1];
  FB0RM010.XDMCD = FBXREC.XDMCD[1];
end // end FB0R610

// format production JCL
Function FB0R620()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0RW00.FB0RWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0RW00.FB0RWTIX > 0) /* Until end of table*/
    ;
    if (converseVar.eventKey is pf18) /* calc the buy*/
      ;
      if (FB0RT11.TARTYPE[FB0RWTIX] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format program parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = FB0RT11.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        FB0R621(); /* formats JCL*/
        ;
      else
        ;
        if (FB0RT11.TARTYPE[FB0RWTIX] == "C") /* if condition stmt*/
          ;
          FB0RW03.FB0RWCND = FB0RT11.TARJCL[FB0RWTIX];
          if (FB0RM010.FB0RMPCR == "Y") /* if print calc report*/
            FB0RW03.FB0RWCON = "(0,NE)         ";
          else
            FB0RW03.FB0RWCON = "((0,EQ),(0,NE))";
          end
          TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWCND; /* jcl*/
          TA6REC.TARTYPE[TA6INDEX] = " "; /* type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms index*/
        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
          ;
          TA6REC.TARJCL[TA6INDEX] = FB0RT11.TARJCL[FB0RWTIX];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0RT11.TARTYPE[FB0RWTIX]; /* Type*/
          ;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          ;
        end
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0RT11.TARJCL[FB0RWTIX] == "/*EOF") /* End of table*/
        ;
        FB0RW00.FB0RWTIX = 0; /* Indicate end of table*/
        ;
      else
        ;
        FB0RW00.FB0RWTIX = FB0RW00.FB0RWTIX + 1; /* Increment table index*/
        ;
      end
      ;
    end
    ;
    if (converseVar.eventKey is pf15) /* print screen*/
      ;
      if (FB0RT13.TARTYPE[FB0RWTIX] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format program parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = FB0RT11.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        FB0R621(); /* formats JCL*/
        ;
      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0RT13.TARJCL[FB0RWTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0RT13.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0RT13.TARJCL[FB0RWTIX] == "/*EOF") /* End of table*/
        ;
        FB0RW00.FB0RWTIX = 0; /* Indicate end of table*/
        ;
      else
        ;
        FB0RW00.FB0RWTIX = FB0RW00.FB0RWTIX + 1; /* Increment table index*/
        ;
      end
      ;
    end
    ;
  end
  ;
  FB0R622(); /* Submit the JCL*/
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0R620

// format parm
Function FB0R621()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW03.FB0RWCMT = "//*"; /* indicate a comment jcl card*/
  ;
  if (converseVar.eventKey is pf18) /* calculate the buy*/
    FB0RW03.XGPCD = "02";
    FB0RW03.SY1STNBR = FBHREC.SY1STNBR;
    FB0RW03.SY2CLRID = FBHREC.SY2CLRID;
    FB0RW03.XDMCD = FBHREC.XDMCD;
    FB0RW03.XQACD = FBHREC.XQACD;
    FB0RW03.PC2INSEG = FBHREC.PC2INSEG;
    FB0RW03.XPGCD = FBHREC.XPGCD;
    FB0RW03.XUMCD = FBHREC.XUMCD;
    FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO;
    /* -------- y2k out begin -------*/
    /* MOVE 19 TO FB0RW00.FB0RWBCC;*/
    /* -------- y2k out end ---------*/
    /* -------- y2k in  begin -------*/
    if (FB0RW00.FB0RWBYY > 65)
      FB0RW00.FB0RWBCC = 19;
    else
      FB0RW00.FB0RWBCC = 20;
    end
    /* -------- y2k in end ----------*/
    FB0RW00.FB0RWBDD = 01;
    FB0RW03.FB8BUYDT = FB0RW00.FB0RWBDT;
    FB0RW03.XWHCD1 = FB0RW02.XWHCD[1];
    FB0RW03.XWHCD2 = FB0RW02.XWHCD[2];
    FB0RW03.XWHCD3 = FB0RW02.XWHCD[3];
    FB0RW03.FB0RWPCA = FB0RW02.FB4RGPCT[1];
    FB0RW03.FB0RWPCB = FB0RW02.FB4RGPCT[2];
    FB0RW03.FB0RWPCC = FB0RW02.FB4RGPCT[3];
    FB0RW03.FBKRDFL = FB0RW02.FBKRDFL[1];
    TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWPRM; /* jcl*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWPRR; /* JCL parm comment*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  end
  ;
  if (converseVar.eventKey is pf15) /* print screen*/
    FB0RW03.XGPCD = "02";
    FB0RW03.SY1STNBR = FB0RM010.SY1STNBR;
    FB0RW03.SY2CLRID = FB0RM010.SY2CLRID;
    FB0RW03.XDMCD = FB0RM010.XDMCD;
    FB0RW03.XQACD = "01";
    FB0RW03.PC2INSEG = "000";
    FB0RW03.XPGCD = "00";
    FB0RW03.XUMCD = "01";
    FB0RW00.FB0RWBMO = FB0RM010.FB0RMBMO;
    /* -------- y2k out begin -------*/
    /* MOVE 19 TO FB0RW00.FB0RWBCC;*/
    /* -------- y2k out end ---------*/
    /* -------- y2k in  begin -------*/
    if (FB0RW00.FB0RWBYY > 65)
      FB0RW00.FB0RWBCC = 19;
    else
      FB0RW00.FB0RWBCC = 20;
    end
    /* -------- y2k in end ----------*/
    FB0RW00.FB0RWBDD = 01;
    FB0RW03.FB8BUYDT = FB0RW00.FB0RWBDT;
    FB0RW03.XWHCD1 = FB0RW02.XWHCD[1];
    FB0RW03.XWHCD2 = FB0RW02.XWHCD[2];
    FB0RW03.XWHCD3 = FB0RW02.XWHCD[3];
    FB0RW03.FB0RWPCA = FB0RW02.FB4RGPCT[1];
    FB0RW03.FB0RWPCB = FB0RW02.FB4RGPCT[2];
    FB0RW03.FB0RWPCC = FB0RW02.FB4RGPCT[3];
    TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWPRM; /* jcl*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWPRR; /* JCL parm comment*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  end
  ;
end // end FB0R621

// submit batch jcl
Function FB0R622()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0RM010.FB0RMPCR == "Y") /* print calc report*/
    TA6REC.TA6SUBSW = "Y"; /* display info, tailor & submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* tailor & submit JCL*/
  end
  ;
  TA6REC.TA6MSGSW = "N"; /* end of job msgs*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(76);
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0RM010.XXXMODID = "622"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0RM010.XXXMODID = "622"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R622

// format development JCL
Function FB0R625()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0RW00.FB0RWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0RW00.FB0RWTIX > 0) /* Until end of table*/
    ;
    if (converseVar.eventKey is pf18) /* calc the buy*/
      ;
      if (FB0RT01.TARTYPE[FB0RWTIX] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format program parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = FB0RT01.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        FB0R621(); /* formats JCL*/
        ;
      else
        ;
        if (FB0RT01.TARTYPE[FB0RWTIX] == "C") /* if condition stmt*/
          ;
          FB0RW03.FB0RWCND = FB0RT01.TARJCL[FB0RWTIX];
          if (FB0RM010.FB0RMPCR == "Y") /* if print calc report*/
            FB0RW03.FB0RWCON = "(0,NE)         ";
          else
            FB0RW03.FB0RWCON = "((0,EQ),(0,NE))";
          end
          TA6REC.TARJCL[TA6INDEX] = FB0RW03.FB0RWCND; /* jcl*/
          TA6REC.TARTYPE[TA6INDEX] = " "; /* type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        else
          ;
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/
          ;
          TA6REC.TARJCL[TA6INDEX] = FB0RT01.TARJCL[FB0RWTIX];
                                   /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0RT01.TARTYPE[FB0RWTIX]; /* Type*/
          ;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          ;
        end
      end
      ;
      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0RT01.TARJCL[FB0RWTIX] == "/*EOF") /* End of table*/
        ;
        FB0RW00.FB0RWTIX = 0; /* Indicate end of table*/
        ;
      else
        ;
        FB0RW00.FB0RWTIX = FB0RW00.FB0RWTIX + 1; /* Increment table index*/
        ;
      end
      ;
    end
    ;
    if (converseVar.eventKey is pf15) /* print screen*/
      ;
      if (FB0RT03.TARTYPE[FB0RWTIX] == "P") /* Parameters statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format program parameters*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARTYPE[TA6INDEX] = FB0RT01.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        FB0R621(); /* formats JCL*/
        ;
      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0RT03.TARJCL[FB0RWTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0RT03.TARTYPE[FB0RWTIX]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0RT03.TARJCL[FB0RWTIX] == "/*EOF") /* End of table*/
        ;
        FB0RW00.FB0RWTIX = 0; /* Indicate end of table*/
        ;
      else
        ;
        FB0RW00.FB0RWTIX = FB0RW00.FB0RWTIX + 1; /* Increment table index*/
        ;
      end
      ;
    end
    ;
  end
  ;
  FB0R622(); /* Submit the JCL*/
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0R625

// Update VFBLAV01 rows
Function FB0R630()
  ;
   /* ------------------------------------------------------------*/
   /* Get all of the frozen bottom line rows for the product (by*/
   /* warehouse) update any invalid sizes zero quantities.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0RW00.FB0RWIX1 = 1;
  ;
  while (FB0RW00.FB0RWIX1 <= 3)
    ;
    if (FB0RW02.XWHCD[FB0RWIX1] != " ")
      set FBLREC empty; /* initialise record*/
      FBLREC.SY1STNBR = FB0RM010.SY1STNBR; /* style number*/
      FBLREC.SY2CLRID = FB0RM010.SY2CLRID; /* color code*/
      FBLREC.XDMCD = FB0RM010.XDMCD; /* dimension code*/
      FBLREC.XQACD = "01";
      FBLREC.XPGCD = "00";
      FBLREC.XUMCD = "01";
      FBLREC.FB8BUYDT = FB0RW00.FB0RWBDT; /* move to ccyymm01*/
      FBLREC.XWHCD = FB0RW02.XWHCD[FB0RWIX1];
      ;
      FB0R631(); /* get unique table row*/
      ;
      FB0R632(); /* zero invalid sizes*/
      ;
      FB0R633(); /* Update table row*/
      ;
    end
    FB0RW00.FB0RWIX1 = FB0RW00.FB0RWIX1 + 1;
  end
  ;
   /* Format message in ezemsg field*/
  ;
  ;
  FB0RW00.FB0RW5LT = "**** NUMBER OF INVALID SIZES FIXED  = ";
  FB0RW00.FB0RW5CT = FB0RW00.FB0RWISC;
  ;
  FB0RM010.VAGen_EZEMSG = FB0RW00.FB0RWF5M;
  FB0RW00.FB0RWRDS = "Y"; /* Request data*/
  FB0RW00.FB0RWMCS = "Y"; /* Clear map*/
  ;
  exit stack;
  ;
end // end FB0R630

// Obtain unique VFBLAV01 row
Function FB0R631()

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* --------- y2k out begin ---------*/
   /* CALL IO4680 'S ',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* --------- y2k out end -----------*/
   /* --------- y2k in  begin ---------*/
  try
    call "VFBLAV02" ("S ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* --------- y2k in end ------------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FBLREC.ZZZCHGCT != FB0RW02.ZZZCHGCT[FB0RWIX1])
        converseLib.validationFailed(20); /* Record has been updated etc*/
        exit stack;
      end
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(20); /* Record has been updated etc*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "631"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0RW00.FB0RWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0R631

// Zero invalid size quantities
Function FB0R632()
  ;
  FB0RW00.FB0RWGIX = 1; /* initialise index*/
  ;
  while (FB0RW00.FB0RWGIX < 41) /* for each size*/
    if (PG3REC.SY4IDDSC[FB0RWGIX] == " "
     && FB0RW00.FB0RWFSQ[FB0RWGIX] != 0)
      FBLREC.PT3AVQT[FB0RWGIX] = 0;
      FBLREC.FBLDAQTY[FB0RWGIX] = 0;
      FBLREC.FBLMAQTY[FB0RWGIX] = 0;
      FBLREC.FBLOAQTY[FB0RWGIX] = 0;
    end
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
  end
  ;
  ;
end // end FB0R632

// Update VFBLAV01 row
Function FB0R633()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FBLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
   /* ---------- y2k out begin -----------*/
                                  /* CALL IO4680 'U ',SQLCA,FBLREC*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Update table*/
                                   /* row*/
   /* ---------- y2k out end -------------*/
   /* ---------- y2k in  begin -----------*/
  try
    call "VFBLAV02" ("U ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/
   /* ---------- y2k in end --------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      exit stack;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0R633 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0RM010.XXXMODID = "633"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FB0R633

// save, clear, restore map
Function FB0RS01()
  FB0RW00.SY1STNBR = FB0RM010.SY1STNBR;
  FB0RW00.SY2CLRID = FB0RM010.SY2CLRID;
  FB0RW00.PT3YYMM = FB0RM010.PT3YYMM;
  FB0RW00.XDMCD = FB0RM010.XDMCD;
  FB0RW00.SY1SSTNM = FB0RM010.SY1SSTNM;
  FB0RW00.SY2CLRAB = FB0RM010.SY2CLRAB;
  FB0RW00.PT3YYMM = FB0RM010.PT3YYMM;
  FB0RW00.FB0RMBMO = FB0RM010.FB0RMBMO;
  set FB0RM010 initial;
  FB0RM010.SY1STNBR = FB0RW00.SY1STNBR;
  FB0RM010.SY2CLRID = FB0RW00.SY2CLRID;
  FB0RM010.PT3YYMM = FB0RW00.PT3YYMM;
  FB0RM010.XDMCD = FB0RW00.XDMCD;
   /* MOVE FB0RW00.SY1SSTNM TO FB0RM010.SY1SSTNM;*/
   /* MOVE FB0RW00.SY2CLRAB TO FB0RM010.SY2CLRAB;*/
  FB0RM010.PT3YYMM = FB0RW00.PT3YYMM;
  FB0RM010.FB0RMBMO = FB0RW00.FB0RMBMO;
  FB0RM010.FB0RMSCR = 10;
  FB0RM010.XXXCURDT = VGVar.currentShortGregorianDate;
end // end FB0RS01

// Edit VFBLAV01 sizes
Function FB0RS02()
  ;
  ;
   /* ------------------------------------------------------------*/
    /* Validate all of the sizes for all of the qty fields*/
    /* on the frozen bottom line table against the valid size*/
    /* descriptions on the size table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0RW00.FB0RWIX1 = 1; /* Index for invalid size message*/
  ;
  FB0RW00.FB0RWGIX = 1; /* Initialize index*/
  FB0RW00.FB0RWISF = "N"; /* Invalid size flag*/
  FB0RW00.FB0RWISC = 0; /* Invalid size count*/
  ;
  while (FB0RW00.FB0RWGIX < 41) /* For each size*/
    if (PG3REC.SY4IDDSC[FB0RWGIX] == " "
     && FB0RW00.FB0RWFSQ[FB0RWGIX] != 0)
      FB0RW00.FB0RWISF = "Y"; /* Invalid size flag*/
      FB0RW00.FB0RWISC = FB0RW00.FB0RWISC + 1;
    end
    FB0RW00.FB0RWGIX = FB0RW00.FB0RWGIX + 1; /* next size*/
  end
  ;
  ;
  ;
end // end FB0RS02

// open DFBUY.VDNORD01 cursor
Function FB0RS03()
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("S7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0RS03"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0RS03

// Fetch DFBUY.VDNORD01 row
Function FB0RS04()
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("N7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0RW00.FB0RWECS = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0RS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0RS04

// Close DFBUY.VDNORD01 cursor
Function FB0RS05()
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("C7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS05"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0RS05

// Load sum code array
Function FB0RS06()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB0RS07(); /* declare cursor*/
  FB0RW00.FB0RWIX1 = 1; /* first row*/
  ;
  while (FB0RW00.FB0RWIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB0RS08(); /* fetch row*/
    FB0RW00.FB0RWIX1 = FB0RW00.FB0RWIX1 + 1; /* next row*/
  end
  ;
  if (FB0RW00.FB0RWIX1 <= 10)
    FB0RS09(); /* close cursor*/
    return; /* return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0RM010.XXXMODID = "S25"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0RS06

// Declare cursor DCORP.VSUMCD01
Function FB0RS07()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0RS07

// Fetch row DCORP.VSUMCD01
Function FB0RS08()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0RW00.XWH-WHSE-CD[FB0RWIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0RM010.XXXMODID = "S08"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB0RW00.FB0RWRDS = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FB0RS08

// Close cursor DCORP.VSUMCD01
Function FB0RS09()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0RM010.XXXMODID = "S09"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0RM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0RW00.FB0RWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0RS09

// check for diverts
Function FB0RS195()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as count of DPRODC.VPOITM01,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  FB0RW00.FB0RW-OA-COUNT = 0; /* initialize oa counter*/
  FB0RS196(); /* determine oa count*/
  ;
  FB0RW00.FB0RW-PO-COUNT = 0; /* initialize po counter*/
  FB0RS197(); /* determine po count*/
  ;
  if (FB0RW00.FB0RW-OA-COUNT > 0
   && FB0RW00.FB0RW-PO-COUNT > 0)
    FB0RW00.FB0RW-DIVERT-COUNT = 0;
  else
    if (FB0RW00.FB0RW-OA-COUNT > 0
     && FB0RW00.FB0RW-PO-COUNT == 0)
      FB0RW00.FB0RW-DIVERT-COUNT = 1;
    else
      if (FB0RW00.FB0RW-OA-COUNT == 0
       && FB0RW00.FB0RW-PO-COUNT > 0)
        FB0RW00.FB0RW-DIVERT-COUNT = 1;
      else
        if (FB0RW00.FB0RW-OA-COUNT == 0
         && FB0RW00.FB0RW-PO-COUNT == 0)
          FB0RW00.FB0RW-DIVERT-COUNT = 0;
        end
      end
    end
  end
  ;
  ;
end // end FB0RS195

// check for diverts
Function FB0RS196()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0RW00.FB0RW-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0RS196"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0RS196

// check for diverts
Function FB0RS197()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0RW00.FB0RW-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0RS197"; /* Process name*/
  TA1REC.TA1LOC = "VPOITM01";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack;
  ;
end // end FB0RS197

//*** RECORD=FB0RW00 ****
// misc working storage for fb0r
// ***********************
Record FB0RW00 type basicRecord
  10 FB0RWBDT FB0RWBDT ; 
    15 FB0RWBCC FB0RWBCC ; 
    15 FB0RWBMO FB0RWBMO ; 
      20 FB0RWBYY FB0RWBYY ; 
      20 FB0RWBMM FB0RWBMM ; 
    15 FB0RWBDD FB0RWBDD ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 FB0RWFFI FB0RWFFI ; 
  10 FB0RWMCS FB0RWMCS ; 
  10 FB0RWRDS FB0RWRDS ; 
  10 FB0RWKCS FB0RWKCS ; 
  10 FB0RWSCS FB0RWSCS ; 
  10 FB0RWECS FB0RWECS ; 
  10 FB0RWISF FB0RWISF ; 
  10 FB0RWDWS FB0RWDWS ; 
  10 FB0RWSCL FB0RWSCL ; 
  10 FB0RWECL FB0RWECL ; 
  10 FB0RWHIX FB0RWHIX ; 
  10 FB0RWGIX FB0RWGIX ; 
  10 FB0RWLIX FB0RWLIX ; 
  10 FB0RWMIX FB0RWMIX ; 
  10 FB0RWSIX FB0RWSIX ; 
  10 FB0RWTIX FB0RWTIX ; 
  10 FB0RWWIX FB0RWWIX ; 
  10 FB0RWIX1 FB0RWIX1 ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 PT3YYMM PT3YYMM ; 
  10 FB0RMBMO FB0RMBMO ; 
  10 XPLCD XPLCD ; 
  10 FB8BUYDT FB8BUYDT ; 
  10 FB0RWTFP FB0RWTFP ; 
  10 FB0RWGRP FB0RWGRP ; 
    15 FB0RWBLQ FB0RWBLQ [40] ; 
  10 FB0RWNQT FB0RWNQT ; 
  10 FB0RWPCT FB0RWPCT ; 
    15 FB4SZPCT FB4SZPCT [40] ; 
  10 FB0RWGR2 FB0RWGR2 ; 
    15 FB0RWBLP FB0RWBLP [40] ; 
  10 FB0RWWK FB0RWWK ; 
  10 FB0RWWK2 FB0RWWK2 ; 
  10 FB0RWWK3 FB0RWWK3 ; 
  10 FB0RWCBQ FB0RWCBQ [40] ; 
  10 FB0RWCPQ FB0RWCPQ [40] ; 
  10 FB0RWCBP FB0RWCBP [40] ; 
  10 FB0RWCSP FB0RWCSP [40] ; 
  10 FB0RWCTP FB0RWCTP ; 
  10 FB0RWCTS FB0RWCTS ; 
  10 FB0RWCTQ FB0RWCTQ ; 
  10 FB0RWPTO FB0RWPTO ; 
  10 FB0RWFSQ FB0RWFSQ [40] ; 
  10 FB0RWISC FB0RWISC ; 
  10 FB0RWF5M FB0RWF5M ; 
    15 FB0RW5LT FB0RW5LT ; 
    15 * char(1) ; 
    15 FB0RW5CT FB0RW5CT ; 
    15 * char(1) ; 
  10 FB0RWF8M FB0RWF8M ; 
    15 FB0RW8LT FB0RW8LT ; 
    15 FB0RW8SM FB0RW8SM [4] ; 
    15 * char(1) ; 
    15 FB0RW8MM FB0RW8MM ; 
  10 FB0RW8SI FB0RW8SI ; 
    15 * char(1) ; 
    15 FB0RW8SD FB0RW8SD ; 
    15 * char(1) ; 
    15 FB0RW8SQ FB0RW8SQ ; 
    15 * char(1) ; 
  10 FB0RWAIU FB0RWAIU ; 
  10 FB0RW-ORD-ADJ-BUY-DT FB0RW-ORD-ADJ-BUY-DT ; 
    15 FB0RW-ORD-ADJ-BUY-MO FB0RW-ORD-ADJ-BUY-MO ; 
    15 FB0RW-ORD-ADJ-BUY-DD FB0RW-ORD-ADJ-BUY-DD ; 
  10 FB0RW-PREADVISE-TOT FB0RW-PREADVISE-TOT ; 
  10 FB0RW-PREADVISE-COUNT FB0RW-PREADVISE-COUNT ; 
  10 FB0RW-DIVERT-TOT FB0RW-DIVERT-TOT ; 
  10 FB0RW-DIVERT-COUNT FB0RW-DIVERT-COUNT ; 
  10 FB0RW-DIR-SHP-PREADV-TOT FB0RW-DIR-SHP-PREADV-TOT ; 
  10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
  10 FB0RW-OA-COUNT FB0RW-OA-COUNT ; 
  10 FB0RW-PO-COUNT FB0RW-PO-COUNT ; 
  10 FB0RW-TMP-DT FB0RW-TMP-DT ; 
    15 FB0RW-TMP-CC FB0RW-TMP-CC ; 
    15 FB0RW-TMP-YY FB0RW-TMP-YY ; 
    15 FB0RW-TMP-MM FB0RW-TMP-MM ; 
    15 FB0RW-TMP-DD FB0RW-TMP-DD ; 
  10 FB0RW-CHK-DT FB0RW-CHK-DT ; 
    15 FB0RW-CHK-CY FB0RW-CHK-CY ; 
      20 FB0RW-CHK-CC FB0RW-CHK-CC ; 
      20 FB0RW-CHK-YY FB0RW-CHK-YY ; 
    15 FB0RW-CHK-MM FB0RW-CHK-MM ; 
    15 FB0RW-CHK-DM FB0RW-CHK-DM ; 
  10 FB0RW-CHK-DTE FB0RW-CHK-DTE ; 
  10 FB0RW-CUR-DT FB0RW-CUR-DT ; 
    15 FB0RW-CUR-CY FB0RW-CUR-CY ; 
      20 FB0RW-CUR-CC FB0RW-CUR-CC ; 
      20 FB0RW-CUR-YY FB0RW-CUR-YY ; 
    15 FB0RW-CUR-MM FB0RW-CUR-MM ; 
    15 FB0RW-CUR-DD FB0RW-CUR-DD ; 
  10 FB0RW-BUY-DT FB0RW-BUY-DT ; 
    15 FB0RW-BUY-CY FB0RW-BUY-CY ; 
      20 FB0RW-BUY-CC FB0RW-BUY-CC ; 
      20 FB0RW-BUY-YY FB0RW-BUY-YY ; 
    15 FB0RW-BUY-MM FB0RW-BUY-MM ; 
end // end FB0RW00

//*** RECORD=FB0RW01 ****
// display working storage for fb0r
// ***********************
Record FB0RW01 type basicRecord
  10 FB0RWBMO FB0RWBMO ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PT3YYMM PT3YYMM ; 
  10 FB0RMSCR FB0RMSCR ; 
  10 FB0RMSTQ FB0RMSTQ ; 
  10 FB0RMPCR FB0RMPCR ; 
end // end FB0RW01

Record FB0RW02 type basicRecord
  10 PT3YYMM PT3YYMM ; 
  10 XWHCD XWHCD [4] ; 
  10 FB0RWGRP FB0RWGRP [4] ; 
  10 FB0RWGR2 FB0RWGR2 [4] ; 
  10 FB0RWPCT FB0RWPCT [4] ; 
  10 FB4RGPCT FB4RGPCT [4] ; 
  10 XWHSABRV XWHSABRV [4] ; 
  10 FB0RWTQ FB0RWTQ [4] ; 
  10 FB0RWTBP FB0RWTBP [4] ; 
  10 FB0RWSPF FB0RWSPF [4] ; 
  10 FBKRDFL FBKRDFL [4] ; 
  10 ZZZCHGCT ZZZCHGCT [4] ; 
  10 FB0RWSRP FB0RWSRP ; 
end // end FB0RW02

Record FB0RW03 type basicRecord
  10 FB0RWPRR FB0RWPRR ; 
    15 FB0RWCMT FB0RWCMT ; 
    15 FB0RWPRM FB0RWPRM ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 FB8BUYDT FB8BUYDT ; 
      20 XWHCD1 XWHCD1 ; 
      20 FB0RWPCA FB0RWPCA ; 
      20 XWHCD2 XWHCD2 ; 
      20 FB0RWPCB FB0RWPCB ; 
      20 XWHCD3 XWHCD3 ; 
      20 FB0RWPCC FB0RWPCC ; 
      20 FBKRDFL FBKRDFL ; 
  10 FB0RWCND FB0RWCND ; 
    15 * char(18) ; 
    15 FB0RWCON FB0RWCON ; 
    15 * char(47) ; 
end // end FB0RW03

//*** RECORD=FB0RW04 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the style, color,
// dim, and sales order for special "count" function in FB1510.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement. FB1510 is a Footwear Buy
// IO Module.
// 
//    EXAMPLE:
//    --------
//    CALL FB1510 FB0RW06,SQLCA (NOMAPS,NONCSP,REPLY; SELECT
//    COUNT
// 
// ***********************
Record FB0RW04 type basicRecord
  5 FBI-GROUP FBI-GROUP ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FB0RW-PA-ORD-ADJ-BUY-MO FB0RW-PA-ORD-ADJ-BUY-MO ; 
    10 XWHCD XWHCD ; 
    10 FB0RW-COUNT FB0RW-COUNT ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB0RW-PENDING-ORD-ADJ-FL FB0RW-PENDING-ORD-ADJ-FL ; 
    10 FB0RW-CURRENT-DT FB0RW-CURRENT-DT ; 
    10 FB0RW-CURRENT-HHMMSS FB0RW-CURRENT-HHMMSS ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB0RW-PRDCUID FB0RW-PRDCUID ; 
    10 FB0RW-XQAQALCD FB0RW-XQAQALCD ; 
    10 FB0RW-XUMUOMCD FB0RW-XUMUOMCD ; 
    10 FB0RW-PKGTYPCD FB0RW-PKGTYPCD ; 
    10 FB0RW-DLVRY-DT FB0RW-DLVRY-DT ; 
end // end FB0RW04


DataItem FB0RMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// print calc rpt control
DataItem FB0RMPCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0RWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size scroll columns
DataItem FB0RMSCR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0RMSTQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end
DataItem FB0RW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-BUY-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB0RW-BUY-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Century
DataItem FB0RW-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Day
DataItem FB0RW-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Date
DataItem FB0RW-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Date
DataItem FB0RW-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Month
DataItem FB0RW-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Check Year
DataItem FB0RW-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// I/O MODULE COUNTER
DataItem FB0RW-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CUR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CUR-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CUR-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today's date
DataItem FB0RW-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CUR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-CUR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT DATE
DataItem FB0RW-CURRENT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT TIME HHMMSS
DataItem FB0RW-CURRENT-HHMMSS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RESULT OF DIR SHP - PREADV
DataItem FB0RW-DIR-SHP-PREADV-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-DIVERT-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// PRODUCT DIVERT TOTAL
DataItem FB0RW-DIVERT-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DELVIRY DATE
DataItem FB0RW-DLVRY-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OA divert count
DataItem FB0RW-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDER ADJ BUY DAY
DataItem FB0RW-ORD-ADJ-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDER ADJ BUY DT CCYYMMDD
DataItem FB0RW-ORD-ADJ-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0RW-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// PA-ORD-ADJ-BUY-MO
DataItem FB0RW-PA-ORD-ADJ-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PENDING O/A FLAG
DataItem FB0RW-PENDING-ORD-ADJ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG PKG CD
DataItem FB0RW-PKGTYPCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PO divert count
DataItem FB0RW-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRDCUID
DataItem FB0RW-PRDCUID char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PRODUCT PREADVISE COUNT
DataItem FB0RW-PREADVISE-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT PREADVISE TOTAL
DataItem FB0RW-PREADVISE-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Temp Century
DataItem FB0RW-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Temp Day
DataItem FB0RW-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Temp Date
DataItem FB0RW-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Temp Month
DataItem FB0RW-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Temp Year
DataItem FB0RW-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// QUAL
DataItem FB0RW-XQAQALCD char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// UOM CD
DataItem FB0RW-XUMUOMCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PF5 message count
DataItem FB0RW5CT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 message literal
DataItem FB0RW5LT char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 message literal
DataItem FB0RW8LT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 more message
DataItem FB0RW8MM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 size description
DataItem FB0RW8SD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0RW8SI char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message arrag
DataItem FB0RW8SM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 size quantity
DataItem FB0RW8SQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHECK CORP SIZE PCT TOTAL
DataItem FB0RWAIU num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date century
DataItem FB0RWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date day
DataItem FB0RWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date ccyymm01
DataItem FB0RWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line percent
DataItem FB0RWBLP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bottom line quantity
DataItem FB0RWBLQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy date mm
DataItem FB0RWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date yymm
DataItem FB0RWBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date yy
DataItem FB0RWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corporate b/l percent
DataItem FB0RWCBP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// corporate bottom line qty
DataItem FB0RWCBQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// comment, value //*
DataItem FB0RWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition statement
DataItem FB0RWCND char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition
DataItem FB0RWCON char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corporate postive b\l qty
DataItem FB0RWCPQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem FB0RWCSP decimal(9,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end
// corporate total b/l pct
DataItem FB0RWCTP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// corporate total quantity
DataItem FB0RWCTQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// corporate total std pct
DataItem FB0RWCTS decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Domestic warehouse switch
DataItem FB0RWDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end column
DataItem FB0RWECL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor switch
DataItem FB0RWECS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF5 message
DataItem FB0RWF5M char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 message
DataItem FB0RWF8M char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first fetch indicator
DataItem FB0RWFFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total VFBLAV01 size qty
DataItem FB0RWFSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group (size) index
DataItem FB0RWGIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line percent group
DataItem FB0RWGR2 char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom line quantity group
DataItem FB0RWGRP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fbxrec high index
DataItem FB0RWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid size count
DataItem FB0RWISC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid size flag
DataItem FB0RWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FB0RWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fbxrec low index
DataItem FB0RWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map format switch
DataItem FB0RWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index
DataItem FB0RWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// direct ship/nil qty size total
DataItem FB0RWNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 1
DataItem FB0RWPCA num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 2
DataItem FB0RWPCB num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/req percent 3
DataItem FB0RWPCC num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent group
DataItem FB0RWPCT char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl parameter group level
DataItem FB0RWPRM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem FB0RWPRR char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corporate positive total qty
DataItem FB0RWPTO int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem FB0RWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start column
DataItem FB0RWSCL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll switch
DataItem FB0RWSCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save warehouse index
DataItem FB0RWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// standard  percent found flag
DataItem FB0RWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// standard region percent flag
DataItem FB0RWSRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse total b/l pct
DataItem FB0RWTBP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total FBl percent
DataItem FB0RWTFP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm table index
DataItem FB0RWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse total quantity
DataItem FB0RWTQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// warehouse index
DataItem FB0RWWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0RWWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0RWWK2 decimal(9,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0RWWK3 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

