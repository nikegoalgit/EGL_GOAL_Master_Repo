package fb0a;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx2.XPCCD;
import corpx2.XPCKEY;
import corpx2.XPCSDESC;
import corpx2.XPRABRV;
import corpx2.XPRCD;
import corpx2.XSUABRV;
import corpx2.XSUCD;
import corpy2.YPPCD;
import corpy2.YPPDESC;
import corpy2.YSMXOT;
import fb.common.FB1CMNT;
import fb.common.FB1DUMNB;
import fb.common.FB1INCDS;
import fb.common.FB1REC;
import fb.common.FB3REC;
import fb.common.FB5REC;
import fb.common.FB6REC;
import fb.common.FBWREC;
import ff.common.FF00ENU;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0A ****
// This application is past of the footwear buy system.
// It allows the entry of parameters and submits a batch job
// that creates size percent distribution curves.  Selection
// parameters include need dates, order type groups, products.
// These are written to DB2 tables & the batch demand history
// extract program will use them when selecting orders used to
// build the size percent curves.
// 
// Paging will be supported so that the user can enter large
// groups of products.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE        NAME           DESCRIPTION OF CHANGE
// --------   ------------   ----------------------------------
// 04/10/89   wdishm         New application
// 07/08/92   JMCLAU         fb284 changed batch application to
//                           cobol 2. Changed jcl tables to
//                           process the cobol 2 change.
// 08/05/92   JMCLAU         Change FB0A to default to gpc code
//                           '02' when fastpathing.
// 03/30/93   LDELUH         Dir ships on history will now
//                           contain a warehouse code.
// 10/01/93   pmainw         Fix commarea problem - cspv4.
// 12/03/97   rgilli         Y2K MODIFICATIONS MADE TO:
//                           FB0AM010: Remove zero supression
//                           FB0A550:  Change if statement
//                                     see code.
// *********************
Program FB0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0AW00 FB0AW00; // record
  FB0AW01 FB0AW01; // record
  FB0AW02 FB0AW02; // record
  FB1REC FB1REC; // record
  FB3REC FB3REC; // record
  FB5REC FB5REC; // record
  FB6REC FB6REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0AT01 {deleteAfterUse = yes}; // table
  use FB0AT02 {deleteAfterUse = yes}; // table
  use FB0AM.FB0AM010, // form
  		FB0AM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the selection parameters process.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XGPCD == " ") /* Edit gpc code*/
      COMMAREA.XGPCD = "02"; /* Move default gpc code*/
    end

    FBWREC.XGPCD = COMMAREA.XGPCD;


    set FB0AW00 empty; /* Initialize working storage*/
    set FB0AW01 empty; /* Initialize map heading storage*/
    set FB0AW02 empty; /* Initialize map detail storage*/
    set FB0AW01 empty; /* Initialize working storage*/
    set FB1REC empty;
    set FB0AM010 initial; /* Initialize map output area*/
    set SQLCA empty; /* Sql communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set FB3REC empty; /* Internal sequence number record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    FB0AW00.FB0AWTSL = 664; /* Temporary storage length*/


    FB0AW00.FB0AWODF = "Y"; /* Obtain data flag*/
    FB0AW00.FB0AWFTF = "Y"; /* First time flag*/
    FB0AW00.FB0AWDSW = "N"; /* Display data flag*/


     /* ------------------------------------------------------------*/
     /* If coming from FB0B set the obtain data flag to yes and*/
     /* the display data flag to yes.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "FB0B" /* From 'combine regions'*/
     && FBWREC.FB1INSEQ != 0)      
      FB0AW00.FB0AWODF = "Y"; /* Set the obtain data flag to 'y'*/
      FB0AW00.FB0AWDSW = "Y"; /* Set display data flag to 'y'*/
    end


    goto FB0A001; /* Converse Footwear Menu*/


    FB0A001: FB0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Selection criteria process.*/
     /* ------------------------------------------------------------*/

    goto FB0A001; /* Converse selection criteria*/


  end // end main
end // end FB0A

// Selection parameters appl
Function FB0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FB0A100(); /* Obtain data to display*/

  FB0A200(); /* Format and display the map*/

  FB0A300(); /* Check attention identifier*/

  FB0A400(); /* Reset fields to normal intensity*/

  FB0A500(); /* Verify the entered data*/

  FB0A600(); /* Process valid input request*/


end // end FB0A001

// Obtain data to display
Function FB0A100()



   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWODF == "N" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end


  FB0A150(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Put out 10 pages of temporary storage.  These pages will*/
   /* be used for entering products and group product codes.*/
   /* A maximum of 100 products and/or codes can be entered.*/
   /* When the temporary storage pages have been created exit*/
   /* this proceudre as the remainder of the processing is for*/
   /* inquiry.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "N" /* Application will function as input*/
   && FB0AW00.FB0AWFTF == "Y") /* First time through*/

    FB0AW00.FB0AWIX1 = +1; /* Initialize index*/

    while (FB0AW00.FB0AWIX1 <= 10)
      FB0AS03(); /* Add page to temporary storage*/
      FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
    end

    FB0AW00.FB0AWFTF = "N"; /* First time through flag*/
    FB0AW00.FB0AWODF = "N"; /* Obtain data flag*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* OBtain the header record.*/
   /* ------------------------------------------------------------*/

  FB0A110(); /* Get vselhd01 row*/

   /* ------------------------------------------------------------*/
   /* If the status on the header is not a '1' (the extract has*/
   /* been submitted) set the passed record empty and*/
   /* bypass obtaining the selection criteria. Otherwise*/
   /* get all the selection criteria and the product rows from*/
   /* the vselst01 table for map display.*/
   /* ------------------------------------------------------------*/

  if (FB1REC.FB1CRVST != "1")

    set FBWREC empty;
    converseLib.validationFailed(18); /* No data to display*/
    return;
  end

  FB0AW01.FB1CMNT = FB1REC.FB1CMNT; /* Move comments to storage*/
  FB0AW01.FB1INCDS = FB1REC.FB1INCDS; /* Move direct ship flag*/
  FB0AW01.SY4SZSCL = FB1REC.SY4SZSCL; /* Scale code*/
  FB0AW00.FB0AWSQN = FB1REC.FB1INSEQ; /* Sequence number*/


  FB0A130(); /* Get vseldt01 data*/

  FB0A160(); /* Select cursor for vselst01 table*/

  FB0A170(); /* Get all vselst01 rows*/

  FB0A180(); /* Close cursor for vselst01 table*/

  FB0AW00.FB0AWODF = "N"; /* Obtain data flag*/


end // end FB0A100

// Get vselhd01 row
Function FB0A110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and record key*/
   /* ------------------------------------------------------------*/


  set FB1REC empty; /* Clear row storage area*/

  FB1REC.FB1INSEQ = FBWREC.FB1INSEQ; /* internal seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* if data not found abort the applicaton otherwiseindicated*/
   /* that a system error has occured*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'Resources unavailabe'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(11); /* 'Record not on database'*/
      else
        converseLib.validationFailed(01); /* 'error - please notify programming'*/
      end
    end

  end

  converseLib.clearScreen();
   /* Clear screen before display*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VSELHD01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A110

// GET vseldt01 data
Function FB0A130()

   /* ------------------------------------------------------------*/
   /* IO to select and open vseldt01*/
   /* ------------------------------------------------------------*/

  FB0A131(); /* Open cursor for vseldt01*/

   /* ------------------------------------------------------------*/
   /* Fetch the first vseldt01 row*/
   /* ------------------------------------------------------------*/

  FB0AS01(); /* Get first vseldt01 row*/

   /* ------------------------------------------------------------*/
   /* if there are no rows in the set it is a fatal error.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDCF == "Y") /* end of cursor on first fetch*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "NO VSELDT01 DATA    ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "130"; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    COMMAREA.CATOAP = "FY0M"; /* To application*/
    XSFBS01();
    FB0AM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/

  end

   /* ------------------------------------------------------------*/
   /* The map can display only two sets of need dates,*/
   /* consequently only two sets of dates will be retrieved.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWDTC = 0; /* Initialize date counter*/
  FB0AW00.FB0AWIX1 = 0; /* Initialize index (moves date to map)*/
  FB0AW00.FB0AWIX2 = 0; /* Initialize index (moves order/type/*/
                                   /* group code to map)*/


  while (FB0AW00.FB0AWDCF != "Y" /* Not end of set*/
   && FB0AW00.FB0AWDTC < 2) /* and no more than two dates retrieved*/

    FB0A132(); /* Get need dates*/

  end


   /* ------------------------------------------------------------*/
   /* IO to close vseldt01 set*/
   /* ------------------------------------------------------------*/
  FB0A133(); /* Close cursor for vseldt01*/



end // end FB0A130

// Select vseldt01 cursor
Function FB0A131()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set FB5REC empty; /* clear row storage area*/
  FB0AW00.FB0AWDCF = "N"; /* End of vseldt01 flag*/


   /* ------------------------------------------------------------*/
   /* Format the key with fbwrec sequence number*/
   /* ------------------------------------------------------------*/

  FB5REC.FB1INSEQ = FBWREC.FB1INSEQ;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VSELDT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A131

// GET Two set of need dates
Function FB0A132()


   /* ------------------------------------------------------------*/
   /* Move the dates from the record to working storage to format*/
   /* and then move the formated month and year to the map*/
   /* storage fields.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1; /* Increment date index*/

  FB0AW00.FB0AWFDT = FB5REC.FB5TODT; /* TO date*/
  FB0AW01.FB0AWTOM[FB0AWIX1] = FB0AW00.FB0AWFMM; /* To month*/
  FB0AW01.FB0AWTOY[FB0AWIX1] = FB0AW00.FB0AWFYY; /* To year*/
  FB0AW00.FB0AWFDT = FB5REC.FB5FRMDT; /* From date*/
  FB0AW01.FB0AWFRM[FB0AWIX1] = FB0AW00.FB0AWFMM; /* From month*/
  FB0AW01.FB0AWFRY[FB0AWIX1] = FB0AW00.FB0AWFYY; /* From year*/

  FB0AW00.FB0AWDTC = FB0AW00.FB0AWDTC + 1; /* Increment date counter*/

   /* ------------------------------------------------------------*/
   /* Starting a new line of dates --set the order type group*/
   /* index up.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDTC == 2)
    FB0AW00.FB0AWIX2 = 3;
  end


   /* ------------------------------------------------------------*/
   /* Save the from date in working storage and use it for*/
   /* comparing the next retrieved from date.  Up to 3 order*/
   /* type group codes for a date can be displayed on the map*/
   /* so a maximum of 3 duplicate date records can be retrieved.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWFRD = FB5REC.FB5FRMDT; /* save current date*/
  FB0AW00.FB0AWOTC = 0; /* Initialize order type group counter*/

  while (FB0AW00.FB0AWDCF != "Y"             /* Not end of set and*/
   && FB5REC.FB5FRMDT == FB0AW00.FB0AWFRD /* Current from date equal prior*/
   && FB0AW00.FB0AWOTC < 3) /* and number of group codes not > 3*/

    FB0AS02();
                                   /* Get order type group codes for a date*/
  end

   /* ------------------------------------------------------------*/
   /* Bypass any more order/type/groups for a date (can only*/
   /* display 3).*/
   /* ------------------------------------------------------------*/

  while (FB0AW00.FB0AWDCF != "Y" /* Not end of set and*/
   && FB5REC.FB5FRMDT == FB0AW00.FB0AWFRD) /* Current from date equal prior*/

    FB0AS01();
  end


end // end FB0A132

// close vseldt01 cursor
Function FB0A133()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "133"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A133

// Purge temporary storage
Function FB0A150()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB0AW02 empty; /* M010 detail display storage*/
  set TA5REC empty; /* temporary storage record*/


  FB0AW00.TA5TSQIX = 0; /* Highest page number*/
  FB0AW00.FB0AWTSP = 1; /* Increment and decrement page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FB0AW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0AM010.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A150

// Select set vselst01
Function FB0A160()


  set FB6REC empty; /* Initialize record*/
  FB0AW00.FB0AWSCF = "N"; /* End of vselst01 flag*/

   /* ------------------------------------------------------------*/
   /* Use the passed internal sequence number as the key.*/
   /* ------------------------------------------------------------*/

  FB6REC.FB1INSEQ = FBWREC.FB1INSEQ; /* Internal sequence number*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("S1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "160"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FB0A160

// get all vselst01 data
Function FB0A170()


  FB0A171(); /* Get first vselst01 row*/

  FB0AW00.FB0AWIXM = 0; /* Initialize index*/
   /* ------------------------------------------------------------*/
   /* Obtain all the vselst01 rows.*/
   /* Get the product description.*/
   /* Write to temporary storage if the the page is full.*/
   /* ------------------------------------------------------------*/

  while (FB0AW00.FB0AWSCF != "Y") /* Not end of set*/

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1; /* Increment index*/
    FB0AW02.SY1STNBR[FB0AWIXM] = FB6REC.SY1STNBR;
    FB0AW02.SY2CLRID[FB0AWIXM] = FB6REC.SY2CLRID;
    FB0AW02.XDMCD[FB0AWIXM] = FB6REC.XDMCD;
    FB0AW02.SYBSTGNB[FB0AWIXM] = FB6REC.SYBSTGNB;

    if (FB0AW02.SY1STNBR[FB0AWIXM] != " ") /* Have style not style group*/

      FB0A172(); /* Get product description*/

    end

    if (FB0AW00.FB0AWIXM == 10) /* Page is full*/

      FB0AS03(); /* Add page to temporary storage*/
    end

    FB0A171(); /* Get next vselst01 row*/

  end


   /* ------------------------------------------------------------*/
   /* Add any partial data to the last page in temporary storage*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWIXM > 0) /* At least one line formatted*/

    FB0AS03(); /* Add page to temp storage*/

  end




end // end FB0A170

// Select next vselst01 row
Function FB0A171()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("N1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/



      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0AW00.FB0AWSCF = "Y";
      return; /* Return to previous process*/

    else
      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/


    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A171

// GET product/color description
Function FB0A172()

   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/


  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = FB6REC.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB6REC.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = FB6REC.SY2CLRID; /* Color*/
  PG2REC.XDMCD = FB6REC.XDMCD; /* Dimension*/

  XSPG202(); /* Get style and color descriptions*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FB0AW02.SY1STYNM[FB0AWIXM] = PG2REC.SY1STYNM;
      FB0AW02.SY2CLRAB[FB0AWIXM] = PG2REC.SY2CLRAB;
    else
      FB0AW02.SY1STYNM[FB0AWIXM] = "UNKNOWN";
      FB0AW02.SY2CLRAB[FB0AWIXM] = "UNKNOWN";
    end
  end
end // end FB0A172

// close vselst01 set
Function FB0A180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("C1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A180

// Format and display the map
Function FB0A200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set FB0AM010 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* If an informational message--display it from the*/
   /* record.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FBWREC.XXXMSGNO != 0)
      if (FBWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FBWREC.XXXMSGNO);
      end
      FBWREC.XXXMSGNO = 0;
    end
  end


  if (FB0AW00.FB0AWDSW == "Y") /* Displaying data (no input)*/

    FB0A210(); /* Display data map format*/
    FB0A220(); /* Protect fields*/

  else

    FB0A230(); /* Data entry map format*/

    if (converseVar.validationMsgNum == 0)
      FB0A240(); /* Unprotect fields*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0AM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0AM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0AM010.CAITEM = COMMAREA.CAITEM; /* Application data*/



  converse FB0AM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the messge field and save fast PATH information.*/
   /* ------------------------------------------------------------*/

  FBWREC.XXXMSGNO = 0; /* Message number*/
  FB0AM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0AM010.CATOAP; /* To application*/
  COMMAREA.CAITEM = FB0AM010.CAITEM; /* Applicatin data*/

end // end FB0A200

// Display data map format
Function FB0A210()

   /* ------------------------------------------------------------*/
   /* Move map heading data from fb0aw01 display storage record*/
   /* to the map fields.*/
   /* ------------------------------------------------------------*/


  if (FB0AM010.XXXCURDT == 0) /* Map heading data not formatted*/

    FB0A211(); /* Format map heading data*/

  end

   /* ------------------------------------------------------------*/
   /* The following is paging logic when the application is*/
   /* functioning as display only.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FB0AW00.FB0AWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      FB0AS04(); /* Obtain temporary storage page*/

      FB0A212(); /* Format Detail data*/
    end


  end


end // end FB0A210

// Format map heading data
Function FB0A211()

   /* ------------------------------------------------------------*/
   /* Move map heading data from fb0aw01 display storage record*/
   /* to the map fields and protect all the fields.*/
   /* ------------------------------------------------------------*/

  FB0AM010.FB1CMNT = FB0AW01.FB1CMNT; /* Comments*/
  FB0AM010.FB1INCDS = FB0AW01.FB1INCDS; /* Direct ship code*/

   /* ------------------------------------------------------------*/
   /* Move the from and to need dates to the map.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 2)
    FB0AM010.FB0AMFRM[FB0AWIX1] = FB0AW01.FB0AWFRM[FB0AWIX1];
    FB0AM010.FB0AMFRY[FB0AWIX1] = FB0AW01.FB0AWFRY[FB0AWIX1];
    FB0AM010.FB0AMTOM[FB0AWIX1] = FB0AW01.FB0AWTOM[FB0AWIX1];
    FB0AM010.FB0AMTOY[FB0AWIX1] = FB0AW01.FB0AWTOY[FB0AWIX1];

    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* Move the Order type group codes to the map.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 6)
    FB0AM010.YSMXOT[FB0AWIX1] = FB0AW01.YSMXOT[FB0AWIX1];
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end


end // end FB0A211

// Format map detail
Function FB0A212()


  FB0AW00.FB0AWIXM = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIXM <= 10) /* Until all data moved*/

    FB0AM010.SY1STNBR[FB0AWIXM] = FB0AW02.SY1STNBR[FB0AWIXM];
    FB0AM010.SY2CLRID[FB0AWIXM] = FB0AW02.SY2CLRID[FB0AWIXM];
    FB0AM010.XDMCD[FB0AWIXM] = FB0AW02.XDMCD[FB0AWIXM];
    FB0AM010.SYBSTGNB[FB0AWIXM] = FB0AW02.SYBSTGNB[FB0AWIXM];
    FB0AM010.SY1STYNM[FB0AWIXM] = FB0AW02.SY1STYNM[FB0AWIXM];
    FB0AM010.SY2CLRAB[FB0AWIXM] = FB0AW02.SY2CLRAB[FB0AWIXM];

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;

  end


end // end FB0A212

// Protect map fields
Function FB0A220()

   /* ------------------------------------------------------------*/
   /* Protect the map heading fields.*/
   /* ------------------------------------------------------------*/

  set FB0AM010.FB1CMNT protect;
  set FB0AM010.FB1INCDS protect;

   /* ------------------------------------------------------------*/
   /* set need dates on the map to protect.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 2)

    set FB0AM010.FB0AMFRM[FB0AWIX1] protect;
    set FB0AM010.FB0AMFRY[FB0AWIX1] protect;
    set FB0AM010.FB0AMTOM[FB0AWIX1] protect;
    set FB0AM010.FB0AMTOY[FB0AWIX1] protect;

    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* Set order type group codes on the map to protect*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 6)
    set FB0AM010.YSMXOT[FB0AWIX1] protect;
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end



  FB0AW00.FB0AWIXM = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIXM <= 10) /* Until all data moved*/

    if (FB0AW02.SY1STNBR[FB0AWIXM] == " ") /* No data*/
      set FB0AM010.SY1STNBR[FB0AWIXM] initialAttributes;
      set FB0AM010.SY2CLRID[FB0AWIXM] initialAttributes;
      set FB0AM010.XDMCD[FB0AWIXM] initialAttributes;
    else
      set FB0AM010.SY1STNBR[FB0AWIXM] protect;
      set FB0AM010.SY2CLRID[FB0AWIXM] protect;
      set FB0AM010.XDMCD[FB0AWIXM] protect;
    end

    if (FB0AW02.SYBSTGNB[FB0AWIXM] == " ")
      set FB0AM010.SYBSTGNB[FB0AWIXM] initialAttributes;
    else
      set FB0AM010.SYBSTGNB[FB0AWIXM] protect;
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;

  end


   /* ------------------------------------------------------------*/
   /* Position cursor on first unprotect field*/
   /* ------------------------------------------------------------*/

  set FB0AM010.CATOAP cursor;



end // end FB0A220

// Data entry map display
Function FB0A230()



   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FB0AW00.FB0AWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      if (FB0AW00.FB0AWUTS == "Y") /* Screen data has been updated*/

        FB0A231(); /* Move map fields to display storage*/

        FB0AW00.FB0AWUTS = "N";

      end

      FB0AS04(); /* Obtain temporary storage page*/

      FB0A232(); /* Format map input detail*/

    end


  end

end // end FB0A230

// Move map to display storage
Function FB0A231()


  FB0AW00.FB0AWIXM = +1; /* Initialize index*/
  while (FB0AW00.FB0AWIXM <= 10)
    FB0AW02.SY1STNBR[FB0AWIXM] = FB0AM010.SY1STNBR[FB0AWIXM];
    FB0AW02.SY2CLRID[FB0AWIXM] = FB0AM010.SY2CLRID[FB0AWIXM];
    FB0AW02.XDMCD[FB0AWIXM] = FB0AM010.XDMCD[FB0AWIXM];
    FB0AW02.SYBSTGNB[FB0AWIXM] = FB0AM010.SYBSTGNB[FB0AWIXM];
    FB0AW02.SY1STYNM[FB0AWIXM] = FB0AM010.SY1STYNM[FB0AWIXM];
    FB0AW02.SY2CLRAB[FB0AWIXM] = FB0AM010.SY2CLRAB[FB0AWIXM];
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;

  end

  FB0AS05(); /* Update temporary storage*/


end // end FB0A231

// Format input map detail
Function FB0A232()


  FB0AW00.FB0AWIXM = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIXM <= 10) /* Until all data moved*/

    FB0AM010.SY1STNBR[FB0AWIXM] = FB0AW02.SY1STNBR[FB0AWIXM];
    FB0AM010.SY2CLRID[FB0AWIXM] = FB0AW02.SY2CLRID[FB0AWIXM];
    FB0AM010.XDMCD[FB0AWIXM] = FB0AW02.XDMCD[FB0AWIXM];
    FB0AM010.SYBSTGNB[FB0AWIXM] = FB0AW02.SYBSTGNB[FB0AWIXM];
    FB0AM010.SY1STYNM[FB0AWIXM] = FB0AW02.SY1STYNM[FB0AWIXM];
    FB0AM010.SY2CLRAB[FB0AWIXM] = FB0AW02.SY2CLRAB[FB0AWIXM];

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;

  end




end // end FB0A232

// unprotect map fields
Function FB0A240()


  set FB0AM010.FB1CMNT normal;
  set FB0AM010.FB1INCDS normal;

  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 2)

    set FB0AM010.FB0AMFRM[FB0AWIX1] normal;
    set FB0AM010.FB0AMFRY[FB0AWIX1] normal;
    set FB0AM010.FB0AMTOM[FB0AWIX1] normal;
    set FB0AM010.FB0AMTOY[FB0AWIX1] normal;

    if (FB0AW00.FB0AWIX1 == 1)
      set FB0AM010.FB0AMFRM[FB0AWIX1] cursor, normal; /* Position cursor*/
    end

    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end


  FB0AW00.FB0AWIX1 = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIX1 <= 6)
    set FB0AM010.YSMXOT[FB0AWIX1] normal;
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end



  FB0AW00.FB0AWIXM = 1; /* Initialize index*/

  while (FB0AW00.FB0AWIXM <= 10) /* All 10 lines on map*/

    set FB0AM010.SY1STNBR[FB0AWIXM] normal;
    set FB0AM010.SY2CLRID[FB0AWIXM] normal;
    set FB0AM010.XDMCD[FB0AWIXM] normal;
    set FB0AM010.SYBSTGNB[FB0AWIXM] normal;

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;
  end





end // end FB0A240

// Check attention identifier
Function FB0A300()


   /* ------------------------------------------------------------*/
   /* When checking any of the valid PF keys, process module*/
   /* Fb0a310 will be called to determine if the selection*/
   /* criteria data should be deleted prior to transfering to*/
   /* the requested application. The selection rows should not*/
   /* be deleted with  enter, PF9 or Pf15.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB0AM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = FB0AM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0AM010.CAITEM; /* TO application key*/
      FB0A310();
    else
      FB0AM010.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(40); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, restart from the top.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "FB0A"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    XSFBS01();
    FB0AM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
    exit stack;
  end

  if (converseVar.eventKey is pf9) /* Update requested*/
    if (FB0AW00.FB0AWJSF != "Y") /* Job hasn't been submitted*/
      return; /* Return to previous process*/
    end
  end

  if (converseVar.eventKey is enter /* Enter was pressed*/
   || converseVar.eventKey is pf15) /* Combine regions*/
    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa3)

    converseLib.clearScreen();
     /* Clear screen before display*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Handle pf-keys*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* To application*/
    COMMAREA.CAITEM = "FB0AM010"; /* Application find code*/
    FB0A310();
  end

  if (converseVar.eventKey is pf5) /* pf5 was pressed*/
    COMMAREA.CATOAP = "FY0M"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    FB0A310();
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "FB0M"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    FB0A310();
  end

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    FB0A320(); /* Validate scroll request*/

    return; /* Exit to next process*/
  end


  if (converseVar.eventKey is pf14) /* Size percent maintenance selection*/

    COMMAREA.CATOAP = "FB0C"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    FB0A310(); /* Validate scroll request*/
  end


   /* ------------------------------------------------------------*/
   /* If this point has been reached, an invalid pf-keys was hit.*/
   /* ------------------------------------------------------------*/

  FB0AM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3);
  exit stack; /* Return to show error message*/
end // end FB0A300

// delete selection parms & trans
Function FB0A310()
   /* ------------------------------------------------------------*/
   /* If the vselhd01 status is = '1' then all the selection*/
   /* criteria rows for the fbwrec internal sequence number*/
   /* should be deleted prior to executing the requested*/
   /* transfer.*/
   /* ------------------------------------------------------------*/

  if (FB1REC.FB1CRVST == "1")

    FB0A311(); /* Delete vselhd01 row*/

    FB0A313(); /* Delete vselst01 row*/

    FB0A314(); /* Delete vseldt01 row*/

  end

  XSFBS01();
  FB0AM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
  converseLib.validationFailed(); /* Prevent additional processing*/
  exit stack;

end // end FB0A310

// Delete vselhd01 rows
Function FB0A311()
  set FB1REC empty;
  FB1REC.FB1INSEQ = FBWREC.FB1INSEQ;


   /* ------------------------------------------------------------*/
   /* Delete the row from dfcast.vselhd01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("D ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "311"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Back out current db2 unit of work*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE VSELHD01 ROWS          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A311

// Delete vselst01 rows
Function FB0A313()
  set FB6REC empty;
  FB6REC.FB1INSEQ = FBWREC.FB1INSEQ;


   /* ------------------------------------------------------------*/
   /* Delete the row from dfcast.vselst01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("D ", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "313"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Back out current db2 unit of work*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE VSELST01 ROWS          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A313

// Delete vseldt01 rows
Function FB0A314()
  set FB5REC empty;
  FB5REC.FB1INSEQ = FBWREC.FB1INSEQ;


   /* ------------------------------------------------------------*/
   /* Delete the row from dfcast.vseldt01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("D ", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "314"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Back out current db2 unit of work*/
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE VSELDT01 ROWS          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A314

// Validate scroll request
Function FB0A320()



   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB0AW00.FB0AWTSP < 2)       /* and no previous pages*/

    FB0AM010.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(6); /* Unable to scroll backward*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB0AW00.FB0AWTSP >= FB0AW00.TA5TSQIX) /* and no more pages*/

    FB0AM010.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(7); /* Unable to scroll forward*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FB0A320

// reset highlighted fields
Function FB0A400()

  if (FB0AW00.FB0AWDSW == "Y") /* Displaying data--no entry allowed*/
    return; /* Exit to next procedure*/
  else
    FB0A240(); /* Reset input fields to normal*/
    return; /* Return to previous process*/
  end


end // end FB0A400

// Verify entered data
Function FB0A500()

   /* ------------------------------------------------------------*/
   /* if the display data flag is equal to 'y' exit this*/
   /* procedure---no data has been entered--no validation needed.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "Y")
    return; /* Exit to next procedure*/
  end

   /* ------------------------------------------------------------*/
   /* If no style number has been entered move spaces to the*/
   /* color, dimension, and description fields (in case a*/
   /* previously entered style number was erased.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +1; /* Initialize map index*/

  while (FB0AW00.FB0AWIXM <= 10) /* For all lines on the map*/
    if (FB0AM010.SY1STNBR[FB0AWIXM] == " ") /* No style number*/
      FB0AM010.SY2CLRID[FB0AWIXM] = " ";
      FB0AM010.XDMCD[FB0AWIXM] = " ";
      FB0AM010.SY1STYNM[FB0AWIXM] = " ";
      FB0AM010.SY2CLRAB[FB0AWIXM] = " ";
      FB0AW02.FB0AWSGC[FB0AWIXM] = " ";
      FB0AW02.SY4SZSCL[FB0AWIXM] = " ";
      FB0AW00.SY4SZSCL[FB0AWIXM] = " ";
    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;
  end

   /* ------------------------------------------------------------*/
   /* Initialize style number found and style group code found*/
   /* flag to no.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWSNF = "N"; /* Style number found flag*/
  FB0AW00.FB0AWSGF = "N"; /* style group code entered*/
  move " " to FB0AW00.SYBSTGNB[1] for all; /* Initialize style group code array*/

   /* ------------------------------------------------------------*/
   /* Otherwise start at the bottom of the map, and check for*/
   /* entered style numbers or style group codes and perform*/
   /* the procedures for validating the entered field(s).*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +10; /* Initialize map index*/

  while (FB0AW00.FB0AWIXM >= 1) /* For all lines on the map*/
    if (FB0AM010.SY1STNBR[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWSNF = "Y"; /* Style number found flag*/
      FB0A520(); /* Validate style number*/
    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1; /* map indexing*/
  end

  FB0AW00.FB0AWIXM = +10; /* Initialize map index*/

  while (FB0AW00.FB0AWIXM >= 1) /* For all lines on the map*/
    if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ") /* Style group code entered*/
      FB0AW00.FB0AWSGF = "Y"; /* style group code entered*/
      FB0A530(); /* Validate style group code*/
    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


  if (FB0AW00.FB0AWSNF == "Y" /* Style numbers or style group*/
   || FB0AW00.FB0AWSGF == "Y") /* codes have been entered*/

    FB0A540(); /* Edit for duplicate styles*/
    FB0A570(); /* Edit for different size scales*/

  end


  FB0A550(); /* General field edits*/

  FB0A560(); /* Edit for more than 9 curves*/

  FB0AW00.FB0AWUTS = "Y"; /* Update temp storage flag*/

   /* ------------------------------------------------------------*/
   /* Fields have passed edits--update display heading fields*/
   /* that have not previously been updated.*/
   /* ------------------------------------------------------------*/

  FB0AW01.FB1CMNT = FB0AM010.FB1CMNT;
  FB0AW01.FB1INCDS = FB0AM010.FB1INCDS;

  FB0AW00.FB0AWIX1 = +1;

  while (FB0AW00.FB0AWIX1 <= 6) /* Move order type group codes.*/
    FB0AW01.YSMXOT[FB0AWIX1] = FB0AM010.YSMXOT[FB0AWIX1];
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* If neither the style number or style group have been*/
   /* entered--display an error message,*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWSNF == "N" /* Neither style or style group entered*/
   && FB0AW00.FB0AWSGF == "N")
    converseLib.validationFailed(08); /* Required field*/
    set FB0AM010.SY1STNBR[1] cursor, bold;

    exit stack;
  end


end // end FB0A500

// Validate entered style numbers
Function FB0A520()

  if (FB0AM010.SY2CLRID[FB0AWIXM] == "   ") /* Default color code*/
    FB0AM010.SY2CLRID[FB0AWIXM] = "00 "; /* Default color code*/
  end
  if (FB0AM010.XDMCD[FB0AWIXM] == "  ") /* Default dimension code*/
    FB0AM010.XDMCD[FB0AWIXM] = "00"; /* Default dimension code*/
  end

  if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ")
    set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(99); /* Style and style group code entered*/
  end


   /* ------------------------------------------------------------*/
   /* Verify that the entered style number exists*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/


  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = COMMAREA.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB0AM010.SY1STNBR[FB0AWIXM];
  PG2REC.SY2CLRID = FB0AM010.SY2CLRID[FB0AWIXM];
  PG2REC.XDMCD = FB0AM010.XDMCD[FB0AWIXM];

  FB0AM010.XXXMODID = "520"; /* Module identification*/

  XSPG202(); /* Get style and color descriptions*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FB0AM010.SY1STYNM[FB0AWIXM] = PG2REC.SY1STYNM;
      FB0AW02.SY1STYNM[FB0AWIXM] = PG2REC.SY1STYNM;
      FB0AM010.SY2CLRAB[FB0AWIXM] = PG2REC.SY2CLRAB;
      FB0AW02.SY2CLRAB[FB0AWIXM] = PG2REC.SY2CLRAB;
      FB0AW02.FB0AWSGC[FB0AWIXM] = PG2REC.SYBSTGNB;
                                   /* Save style code*/
      FB0AW00.SYBSTGNB[FB0AWIXM] = PG2REC.SYBSTGNB;
      FB0AW01.SY4SZSCL = PG2REC.SY4SZSCL; /* Save size scale*/
      FB0AW02.SY4SZSCL[FB0AWIXM] = PG2REC.SY4SZSCL; /* size scale*/
      FB0AW00.SY4SZSCL[FB0AWIXM] = PG2REC.SY4SZSCL; /* size scale*/
    else
      set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold; /* Highlight*/
      set FB0AM010.SY2CLRID[FB0AWIXM] bold; /* Highlight*/
      set FB0AM010.XDMCD[FB0AWIXM] bold; /* Highlight*/
      FB0AM010.SY1STYNM[FB0AWIXM] = "  ";
      FB0AW02.SY1STYNM[FB0AWIXM] = "  ";
      FB0AM010.SY2CLRAB[FB0AWIXM] = "  ";
      FB0AW02.SY2CLRAB[FB0AWIXM] = "  ";
      FB0AW02.FB0AWSGC[FB0AWIXM] = "  "; /* Save style code*/
      FB0AW00.SYBSTGNB[FB0AWIXM] = "  ";
      FB0AW01.SY4SZSCL = "  "; /* Save size scale*/
      converseLib.validationFailed(22); /* Invalid style/color entered*/
    end
  end


end // end FB0A520

// verify entered style/grp codes
Function FB0A530()
   /* ------------------------------------------------------------*/
   /* Verify that the entered style group code exists on vsyclr01*/
   /* ------------------------------------------------------------*/



  FB0A531(); /* Set up cursor for gpc/style-group*/



  if (SQLCA.VAGen_SQLCODE == 0)
    FB0A532(); /* Fetch first row - save scale code*/



    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      FB0A533(); /* close cursor*/
    end
  end

end // end FB0A530

// declare cursor style/grp
Function FB0A531()
   /* ------------------------------------------------------------*/
   /* Verify that the entered style group code exists*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the storage area and record key.*/
   /* ------------------------------------------------------------*/


  set PG2REC empty; /* Clear row storage area*/

  PG2REC.XGPCD = COMMAREA.XGPCD;
  PG2REC.SYBSTGNB = FB0AM010.SYBSTGNB[FB0AWIXM]; /* Style group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, or no data return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
       /* Next sentence*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A531

// Fetch next style/grp
Function FB0A532()
   /* ------------------------------------------------------------*/
   /* Fetch next style group.  save scale code.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, or no data return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FB0AW01.SY4SZSCL = PG2REC.SY4SZSCL; /* Save size scale*/

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
        set FB0AM010.SYBSTGNB[FB0AWIXM] cursor, bold;
        converseLib.validationFailed(10); /* Invalid value entered*/
        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "532"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A532

// Close cursor style/grp
Function FB0A533()
   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/


  try
    call "IO3120" ("C2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, or no data return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "533"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSYCLR01 SET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A533

// Edit for duplicate stylesetc
Function FB0A540()

   /* ------------------------------------------------------------*/
   /* Check to see if any of the style nbrs have the style*/
   /* group code entered.*/
   /* Check to see if any of the style group codes are*/
   /* duplicates.*/
   /* Check to see if any of the style nbrs are duplicates on*/
   /* the current screen and temporary storage pages.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify that any of the style number do not have their*/
   /* style group code on the current page.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +10; /* Initialize map index*/


  while (FB0AW00.FB0AWIXM >= 1)

    if (FB0AM010.SY1STNBR[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = 1;

      while (FB0AW00.FB0AWIX1 <= 10)
        if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ") /* Style group entered*/
           /* Next sentence*/
        else
          if (FB0AW00.SYBSTGNB[FB0AWIXM] != " "
           && FB0AM010.SYBSTGNB[FB0AWIX1] == FB0AW00.SYBSTGNB[FB0AWIXM])
            converseLib.validationFailed(143); /* Duplicate, sty exists in sty grp*/
            set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
            set FB0AM010.SY2CLRID[FB0AWIXM] bold;
            set FB0AM010.XDMCD[FB0AWIXM] bold;
          end
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end

    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;
  end


   /* ------------------------------------------------------------*/
   /* Verify that any style group codes are not duplicates on*/
   /* the current screen.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = 10; /* Initialize index*/

  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style fields*/

    if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ") /* Style group entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= 10)
        if (FB0AM010.SYBSTGNB[FB0AWIXM] == FB0AM010.SYBSTGNB[FB0AWIX1]
         && FB0AW00.FB0AWIXM != FB0AW00.FB0AWIX1)
          set FB0AM010.SYBSTGNB[FB0AWIXM] cursor, bold;
          converseLib.validationFailed(139); /* Duplicate style group codes*/
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end


   /* ------------------------------------------------------------*/
   /* Verify that any style numbers are not duplicates on the*/
   /* current screen.*/
   /* ------------------------------------------------------------*/


  FB0AW00.FB0AWIXM = 10; /* Initialize index*/

  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style fields*/

    if (FB0AM010.SY1STNBR[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= 10)
        if (FB0AM010.SY1STNBR[FB0AWIXM] == FB0AM010.SY1STNBR[FB0AWIX1]
         && FB0AM010.SY2CLRID[FB0AWIXM] == FB0AM010.SY2CLRID[FB0AWIX1]
         && FB0AM010.XDMCD[FB0AWIXM] == FB0AM010.XDMCD[FB0AWIX1]
         && FB0AW00.FB0AWIXM != FB0AW00.FB0AWIX1)
          set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
          set FB0AM010.SY2CLRID[FB0AWIXM] bold;
          set FB0AM010.XDMCD[FB0AWIXM] bold;
          converseLib.validationFailed(70); /* Duplicate style nbr on current page*/
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end


   /* ------------------------------------------------------------*/
   /* Verify that any style number or group codes are not*/
   /* duplicates on one of the other pages.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* First the current temporary storage page is updated.*/
   /* ------------------------------------------------------------*/

  FB0A231(); /* Move map data to storage*/

  FB0AS05(); /* Update temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the current temporary storage page number.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWSTS = FB0AW00.FB0AWTSP;

   /* ------------------------------------------------------------*/
   /* Init page requested to first page.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWTSP = +1; /* Init to first page of storage*/


   /* ------------------------------------------------------------*/
   /* Starting with page one of temp storage read all the pages.*/
   /* With the exception of the current page check for duplicates*/
   /* on the other pages.*/
   /* ------------------------------------------------------------*/

  while (FB0AW00.FB0AWTSP <= FB0AW00.TA5TSQIX)
    if (FB0AW00.FB0AWTSP == FB0AW00.FB0AWSTS) /* current page = saved*/
      FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1; /* increment page requested*/

    else

      FB0AS04(); /* Obtain page of temporary storage*/

      FB0A541(); /* Edit against the temporary storage data*/

      FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1; /* increment page requested*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Restore the current temporary storage page and page*/
   /* request.*/
   /* ------------------------------------------------------------*/


  FB0AW00.FB0AWTSP = FB0AW00.FB0AWSTS;

  FB0AS04(); /* Obtain page of temporary storage*/




end // end FB0A540

// Edit for dupes on other pages
Function FB0A541()

   /* ------------------------------------------------------------*/
   /* Verify that any of the style number do not have their*/
   /* style group code on the current page.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +10; /* Initialize map index*/

  while (FB0AW00.FB0AWIXM >= 1)

    if (FB0AM010.SY1STNBR[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = 1;

      while (FB0AW00.FB0AWIX1 <= 10)


        if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ") /* Style group entered*/
           /* Next sentence*/
        else

          if (FB0AW00.SYBSTGNB[FB0AWIXM] != " "
           && FB0AW00.SYBSTGNB[FB0AWIXM] == FB0AW02.SYBSTGNB[FB0AWIX1])
            converseLib.validationFailed(143); /* duplicate style and group code*/
            set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
          end
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end

    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;
  end



   /* ------------------------------------------------------------*/
   /* Verify that any style group codes are not duplicates on*/
   /* other pages.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = 10; /* Initialize index*/

  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style group fields*/

    if (FB0AM010.SYBSTGNB[FB0AWIXM] != " ") /* Style group entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= 10)
        if (FB0AM010.SYBSTGNB[FB0AWIXM] == FB0AW02.SYBSTGNB[FB0AWIX1])
          set FB0AM010.SYBSTGNB[FB0AWIXM] cursor, bold;
          converseLib.validationFailed(139); /* Duplicate style group code*/
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end


   /* ------------------------------------------------------------*/
   /* Verify that any style numbers are not duplicates on the*/
   /* other pages in temp storage*/
   /* ------------------------------------------------------------*/


  FB0AW00.FB0AWIXM = 10; /* Initialize index*/

  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style fields*/

    if (FB0AM010.SY1STNBR[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= 10)
        if (FB0AM010.SY1STNBR[FB0AWIXM] == FB0AW02.SY1STNBR[FB0AWIX1]
         && FB0AM010.SY2CLRID[FB0AWIXM] == FB0AW02.SY2CLRID[FB0AWIX1]
         && FB0AM010.XDMCD[FB0AWIXM] == FB0AW02.XDMCD[FB0AWIX1])
          set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
          set FB0AM010.SY2CLRID[FB0AWIXM] bold;
          set FB0AM010.XDMCD[FB0AWIXM] bold;
          converseLib.validationFailed(71); /* Duplicate style on different page*/
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end


end // end FB0A541

// General field edits
Function FB0A550()

   /* ------------------------------------------------------------*/
   /* If direct ship has not been entered default to 'n'.*/
   /* ------------------------------------------------------------*/

  if (FB0AM010.FB1INCDS == "Y"
   || FB0AM010.FB1INCDS == "N")
    FB0AW01.FB1INCDS = FB0AM010.FB1INCDS;
  else
    FB0AM010.FB1INCDS = "N";
    FB0AW01.FB1INCDS = FB0AM010.FB1INCDS;
  end

   /* ------------------------------------------------------------*/
   /* Edit that at least one from date has been entered on the*/
   /* map.*/
   /* ------------------------------------------------------------*/

  if (FB0AM010.FB0AMFRM[1] == 0
   && FB0AM010.FB0AMFRM[2] == 0)
    converseLib.validationFailed(8); /* Required field*/
    set FB0AM010.FB0AMFRM[1] cursor, bold;
    set FB0AM010.FB0AMFRY[1] bold;
  end

   /* ------------------------------------------------------------*/
   /* Edit that if order type groups have been entered need*/
   /* dates have also.*/
   /* ------------------------------------------------------------*/

  if (FB0AM010.FB0AMFRM[1] == 0)
    if (FB0AM010.YSMXOT[1] != " "
     || FB0AM010.YSMXOT[2] != " "
     || FB0AM010.YSMXOT[3] != " ")
      converseLib.validationFailed(08); /* Required field*/
      set FB0AM010.FB0AMFRM[1] cursor, bold;
      set FB0AM010.FB0AMFRY[1] bold;

    end
  end

  if (FB0AM010.FB0AMFRM[2] == 0)
    if (FB0AM010.YSMXOT[4] != " "
     || FB0AM010.YSMXOT[5] != " "
     || FB0AM010.YSMXOT[6] != " ")
      converseLib.validationFailed(08); /* Required field*/
      set FB0AM010.FB0AMFRM[2] cursor, bold;
      set FB0AM010.FB0AMFRY[2] bold;

    end
  end


   /* ------------------------------------------------------------*/
   /* Edit that if dates have been entered order type groups*/
   /* have also.*/
   /* ------------------------------------------------------------*/

  if (FB0AM010.FB0AMFRM[1] != 0)
    if (FB0AM010.YSMXOT[1] == " "
     && FB0AM010.YSMXOT[2] == " "
     && FB0AM010.YSMXOT[3] == " ")
      converseLib.validationFailed(08); /* Required field*/
      set FB0AM010.YSMXOT[1] cursor, bold;

    end
  end

  if (FB0AM010.FB0AMFRM[2] != 0)
    if (FB0AM010.YSMXOT[4] == " "
     && FB0AM010.YSMXOT[5] == " "
     && FB0AM010.YSMXOT[6] == " ")
      converseLib.validationFailed(08); /* Required field*/
      set FB0AM010.YSMXOT[4] cursor, bold;

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the entered order type group codes.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = +6; /* Initialize general index*/

  while (FB0AW00.FB0AWIX1 >= 1)
    if (FB0AM010.YSMXOT[FB0AWIX1] != " ") /* Order/type/group entered*/

      FB0A551(); /* open cursor for vsumcd01*/
      FB0A553(); /* Edit order group code*/
      FB0A554(); /* close cursor for vsumcd01*/

    end
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 - 1;
  end


   /* ------------------------------------------------------------*/
   /* Edit each of the entered need dates. Edit the from date*/
   /* first and then the to date. Save the date return from*/
   /* TA0040 in working storage (contains century) for*/
   /* creating data base records.*/
   /* Initialize the working storage day to '01' since no day*/
   /* date is entered on the screen for validating in TA0040;*/
   /* however it is to be 00 on the vseldt01 database record.*/
   /* ------------------------------------------------------------*/

  move 0 to FB0AW00.FB0AWFRC[1] for all; /* Initialize working storage dates*/
  move 0 to FB0AW00.FB0AWTOC[1] for all;


  FB0AW00.FB0AWIX1 = +2; /* Initialize general index*/
  FB0AW00.FB0AWGDD = "01"; /* Initialize work date day to '01'*/

  while (FB0AW00.FB0AWIX1 >= 1)

    /* --------------------- y2k out begin -----------------*/
    /* IF FB0AM010.FB0AMFRM(FB0AWIX1) NE 0*/
      /* OR FB0AM010.FB0AMFRY(FB0AWIX1) NE 0;*/
    /* --------------------- y2k out end   -----------------*/
    /* --------------------- y2k in begin  -----------------*/
    if (FB0AM010.FB0AMFRM[FB0AWIX1] == 0
     && FB0AM010.FB0AMFRY[FB0AWIX1] == 0)
       /* next sentence*/
    else
      /* --------------------- y2k in end    -----------------*/

      FB0AW00.FB0AWGMM = FB0AM010.FB0AMFRM[FB0AWIX1];
      FB0AW00.FB0AWGYY = FB0AM010.FB0AMFRY[FB0AWIX1];

      FB0A552(); /* Edit need dates*/

       /* move the gregorian date with the century to working storage*/
       /* ccyymmdd - numeric format*/

      FB0AW00.FB0AWFRC[FB0AWIX1] = TA2REC.TA2GRGGN;

      if (TA2REC.TA2RTNCD != 0) /* Invalid date*/
        set FB0AM010.FB0AMFRM[FB0AWIX1] cursor, bold;
        set FB0AM010.FB0AMFRY[FB0AWIX1] bold;
        /* ----------------------- y2k in begin --------------------*/
      else
        if (TA2REC.TA2GRGGN < 19800101) /* Replaced map year edit of 80 -99*/
          converseLib.validationFailed(10); /* Invalid value entered*/
          set FB0AM010.FB0AMFRM[FB0AWIX1] cursor, bold;
          set FB0AM010.FB0AMFRY[FB0AWIX1] bold;
          /* ----------------------- y2k in end   --------------------*/
        else
          FB0AW00.FB0AWFRC[FB0AWIX1] = TA2REC.TA2GRGGN;
          FB0AW00.FB0AWFCD[FB0AWIX1] = 00;
        end
      end
    end
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 - 1;
  end

  FB0AW00.FB0AWIX1 = +2; /* Initialize general index*/

  while (FB0AW00.FB0AWIX1 >= 1)

    /* --------------------- y2k out begin -----------------*/
    /* IF FB0AM010.FB0AMTOM(FB0AWIX1) NE 0*/
      /* OR FB0AM010.FB0AMTOY(FB0AWIX1) NE 0;*/
    /* --------------------- y2k out end   -----------------*/
    /* --------------------- y2k in begin  -----------------*/
    if (FB0AM010.FB0AMTOM[FB0AWIX1] == 0
     && FB0AM010.FB0AMTOY[FB0AWIX1] == 0)
       /* If from date exists and there is no to date default the to*/
       /* date to the from date*/

      if (FB0AW00.FB0AWFRC[FB0AWIX1] != 0)
        FB0AW00.FB0AWTOC[FB0AWIX1] = FB0AW00.FB0AWFRC[FB0AWIX1];
        FB0AM010.FB0AMTOM[FB0AWIX1] = FB0AM010.FB0AMFRM[FB0AWIX1];
        FB0AM010.FB0AMTOY[FB0AWIX1] = FB0AM010.FB0AMFRY[FB0AWIX1];
      end
    else
      /* --------------------- y2k in end    -----------------*/
      FB0AW00.FB0AWGMM = FB0AM010.FB0AMTOM[FB0AWIX1];
      FB0AW00.FB0AWGYY = FB0AM010.FB0AMTOY[FB0AWIX1];

      FB0A552(); /* Edit need dates*/
       /* move the gregorian date with the century to working storage*/
       /* ccyymmdd - numeric format*/


      if (TA2REC.TA2RTNCD != 0) /* Invalid date*/
        set FB0AM010.FB0AMTOM[FB0AWIX1] cursor, bold;
        set FB0AM010.FB0AMTOY[FB0AWIX1] bold;
      else
        /* ----------------------- y2k in begin --------------------*/
        if (TA2REC.TA2GRGGN < 19800101) /* Replaced map year edit of 80 -99*/
          converseLib.validationFailed(10); /* Invalid value entered*/
          set FB0AM010.FB0AMTOM[FB0AWIX1] cursor, bold;
          set FB0AM010.FB0AMTOY[FB0AWIX1] bold;
          /* ----------------------- y2k in end   --------------------*/
        else
          FB0AW00.FB0AWTOC[FB0AWIX1] = TA2REC.TA2GRGGN;
          FB0AW00.FB0AWTCD[FB0AWIX1] = 00;
        end
      end

      /* ----------------- y2k out begin (moved above) ---------*/
      /* ELSE;*/
       /* If from date exists and there is no to date default the to*/
       /* date to the from date*/

      /* IF FB0AW00.FB0AWFRC(FB0AWIX1) NE 0;*/
        /* MOVE FB0AW00.FB0AWFRC(FB0AWIX1) TO FB0AW00.FB0AWTOC(FB0AWIX1);*/
        /* MOVE FB0AM010.FB0AMFRM(FB0AWIX1) TO*/
              /* FB0AM010.FB0AMTOM(FB0AWIX1);*/
        /* MOVE FB0AM010.FB0AMFRY(FB0AWIX1) TO*/
              /* FB0AM010.FB0AMTOY(FB0AWIX1);*/
      /* END;*/
      /* ----------------- y2k out end   (moved above) ---------*/
    end
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 - 1;
  end

   /* ------------------------------------------------------------*/
   /* Make sure the from date is not greater than the to date*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = +2; /* Initialize general index*/

  while (FB0AW00.FB0AWIX1 >= 1)

    if (FB0AW00.FB0AWFRC[FB0AWIX1] > FB0AW00.FB0AWTOC[FB0AWIX1])
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FB0AM010.FB0AMFRM[FB0AWIX1] cursor, bold;
      set FB0AM010.FB0AMFRY[FB0AWIX1] bold;
      set FB0AM010.FB0AMTOM[FB0AWIX1] bold;
      set FB0AM010.FB0AMTOY[FB0AWIX1] bold;
    end
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 - 1;
  end

   /* ------------------------------------------------------------*/
   /* If any errors ezeflo to display map*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end FB0A550

// open cursor for vsumcd01
Function FB0A551()

   /* ------------------------------------------------------------*/
   /* Check the entered order type group code against the*/
   /* corporate summary code table .  If not found it is an*/
   /* invalid code.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Initialize record*/

  YSMREC.YSMTBLPF = "XOT"; /* Table prefix*/
  YSMREC.YSMSYSPF = "FB"; /* System prefix*/
  YSMREC.YSMSUMID = 01;
  YSMREC.YSMSUMCD = FB0AM010.YSMXOT[FB0AWIX1]; /* Summary code*/
  YSMREC.YSMSRCVL = "****";

   /* ------------------------------------------------------------*/
   /* Select the row from summary code table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
                                     
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "551"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(1); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR FOR VSUMCD01 TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* eXIT TO DISPLAY MAP*/

end // end FB0A551

// Validate need dates
Function FB0A552()

   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate the need dates.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize record*/

  TA2REC.TA2GRGA = FB0AW00.FB0AWGDT; /* Sending gregory date*/
  TA2REC.TA2GRTYP = "A"; /* Type*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get all greg formats*/

   /* ------------------------------------------------------------*/
   /* Call TA0040*/
   /* ------------------------------------------------------------*/


  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD == 0) /* Valid date*/
      return; /* Return to previous process*/
    else /* Invalid return*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA2REC.TA2GRGA; /* date sent to validate*/

  FB0AM010.XXXMODID = "552"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A552

// edit order/group code
Function FB0A553()

   /* ------------------------------------------------------------*/
   /* Select a row from summary code table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        converseLib.validationFailed(10); /* Invalid value entered*/
        set FB0AM010.YSMXOT[FB0AWIX1] cursor, bold;
        return;
      end

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "55A"; /* Module identification*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(1); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW FROM SUMMARY TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Table key*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* eXIT TO DISPLAY MAP*/

end // end FB0A553

// close vsumcd01 cursor
Function FB0A554()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "55B"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSUMCD01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A554

// Edit for more than 9 curves
Function FB0A560()



   /* ------------------------------------------------------------*/
   /* This process obtains all the header records with a*/
   /* status code of less than 4 and matching the user id in*/
   /* the commarea.  if there are curently 10 records there can*/
   /* be no more curves added for this user and an error*/
   /* message is printed.*/
   /* ------------------------------------------------------------*/


  move 0 to FB0AW00.FB1DUMNB[1] for all; /* Initialize dummy number array to*/
                                   /* zeros*/

  FB0A561(); /* Select set for vselhd01*/

  FB0A562(); /* Select next vselhd01*/



  FB0AW00.FB0AWIX1 = +0; /* Initialize general index*/

  while (FB0AW00.FB0AWHCF != "Y" /* While not end of set*/
   && FB0AW00.FB0AWIX1 <= 11)

    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;

    FB0AW00.FB1DUMNB[FB0AWIX1] = FB1REC.FB1DUMNB;

    FB0A562(); /* Select next vselhd01*/


  end

  FB0A563(); /* Close vselhd01 set*/

   /* ------------------------------------------------------------*/
   /* Check the table to see if all the entries contain sequence*/
   /* numbers.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX1 = +1; /* Initialize general index*/

  while (FB0AW00.FB0AWIX1 <= 10
   && FB0AW00.FB1DUMNB[FB0AWIX1] > 0) /* Entries in table*/
    FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
  end

  if (FB0AW00.FB0AWIX1 > 10) /* 10 sequence numbers in table*/
    FB0AM010.XXXMODID = "560"; /* Module identification*/
    set FB0AM010.SY1STNBR[1] cursor, bold; /* Highlight error*/
    converseLib.validationFailed(100);
    exit stack;
  end


  FB0A564(); /* Find lowest unused curve number*/



end // end FB0A560

// Select set for vselhd01
Function FB0A561()

  set FB1REC empty; /* Initialize record*/

  FB0AW00.FB0AWHCF = "N"; /* End of vselhd01*/

   /* ------------------------------------------------------------*/
   /* Format the key data*/
   /* ------------------------------------------------------------*/

  FB1REC.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
  FB1REC.FB1CRVST = "4"; /* Header status flag*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("S2", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VSELHD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.XXXUSRID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FB0A561

// Fetch next vselhd01
Function FB0A562()



   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("N2", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FB0AW00.FB0AWHCF = "Y";
      return; /* Return to previous process*/



    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "562"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.XXXUSRID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0A562

// Close vselhd01 cursor
Function FB0A563()


   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("C2", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "563"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELHD011 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0A563

// Find lowest unused number
Function FB0A564()



   /* ------------------------------------------------------------*/
   /* This process finds the lowest unused dummy number for*/
   /* the user.  This number will be used as the dummy*/
   /* number for adding the  dummy curve.*/
   /* ------------------------------------------------------------*/

    /* If the first dummy number is > 1 make the new dummy*/
    /* number 1.*/

  if (FB0AW00.FB1DUMNB[1] > +1)
    FB0AW01.FB1DUMNB = 1;
    return;
  end


  FB0AW00.FB0AWIX1 = +1; /* Initialize indexes*/
  FB0AW00.FB0AWIX2 = +2;
  FB0AW00.FB0AWCRF = "N"; /* Initialize unused curve found flag*/

  while (FB0AW00.FB0AWIX1 <= 10
   && FB0AW00.FB0AWCRF == "N")

    FB0AW00.FB0AWCRV = FB0AW00.FB1DUMNB[FB0AWIX1]; /* Move to work field*/
    FB0AW00.FB0AWCRV = FB0AW00.FB0AWCRV + 1; /* Add one to curve*/

    if (FB0AW00.FB0AWCRV == FB0AW00.FB1DUMNB[FB0AWIX2])
      FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      FB0AW00.FB0AWIX2 = FB0AW00.FB0AWIX2 + 1;
    else
      FB0AW01.FB1DUMNB = FB0AW00.FB0AWCRV;
      FB0AW00.FB0AWCRF = "Y";
    end
  end



end // end FB0A564

// Edit for different size scales
Function FB0A570()
   /* ------------------------------------------------------------*/
   /* Verify that any styles entered with different size scales,*/
   /* except for '01' and '13', are not on the current screen.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +10;


  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style fields*/

    if (FB0AW02.SY4SZSCL[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= FB0AW00.FB0AWIXM)

        if (FB0AW02.SY4SZSCL[FB0AWIXM] != FB0AW02.SY4SZSCL[FB0AWIX1])
          if (FB0AW02.SY4SZSCL[FB0AWIXM] == "  "
           || FB0AW02.SY4SZSCL[FB0AWIX1] == "  ")
              /* A OK*/
          else

            if (FB0AW02.SY4SZSCL[FB0AWIXM] == "01"
             && FB0AW02.SY4SZSCL[FB0AWIX1] == "13")
              /* A OK*/
              FB0AW01.SY4SZSCL = FB0AW02.SY4SZSCL[FB0AWIX1];
            else

              if (FB0AW02.SY4SZSCL[FB0AWIXM] == "13"
               && FB0AW02.SY4SZSCL[FB0AWIX1] == "01")
              /* A OK*/
                FB0AW01.SY4SZSCL = FB0AW02.SY4SZSCL[FB0AWIXM];
              else

                set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
                set FB0AM010.SY2CLRID[FB0AWIXM] bold;
                set FB0AM010.XDMCD[FB0AWIXM] bold;
                converseLib.validationFailed(452); /* Different size scales*/
                FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIXM + 1; /* to get out of loop*/
              end
            end
          end
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end
   /* ------------------------------------------------------------*/
   /* Verify that size scales are not incompatible on one of the*/
   /* other pages.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* First the current temporary storage page is updated.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 452)
    FB0A231(); /* Move map data to storage*/

   /* B0AS05;                         /* Update temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the current temporary storage page number.*/
   /* ------------------------------------------------------------*/

    if (FB0AW00.FB0AWTSP != 1)
      FB0AW00.FB0AWSTS = FB0AW00.FB0AWTSP;

   /* ------------------------------------------------------------*/
   /* Init page requested to first page.*/
   /* ------------------------------------------------------------*/

      FB0AW00.FB0AWTSP = +1; /* Init to first page of storage*/


   /* ------------------------------------------------------------*/
   /* Starting with page one of temp storage read all the pages.*/
   /* With the exception of the current page check for duplicates*/
   /* on the other pages.*/
   /* ------------------------------------------------------------*/

      while (FB0AW00.FB0AWTSP <= FB0AW00.TA5TSQIX)
        if (FB0AW00.FB0AWTSP >= FB0AW00.FB0AWSTS) /* current page = saved*/
          FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1; /* increment page requested*/

        else

          FB0AS04(); /* Obtain page of temporary storage*/

          FB0A571(); /* Retrieve size scales*/
          FB0A572(); /* Edit against the temporary storage*/
                                   /* data*/

          FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1; /* increment page requested*/

        end

      end


   /* ------------------------------------------------------------*/
   /* Restore the current temporary storage page and page*/
   /* request.*/
   /* ------------------------------------------------------------*/


      FB0AW00.FB0AWTSP = FB0AW00.FB0AWSTS;

      FB0AS04(); /* Obtain page of temporary storage*/

    end
  end



end // end FB0A570

// Retrieve scl for previous page
Function FB0A571()

   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +1;

  while (FB0AW00.FB0AWIXM <= 10)
    if (FB0AW02.SY1STNBR[FB0AWIXM] != " ")

      set PG2REC empty; /* Clear row storage area*/

      PG2REC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      PG2REC.SY1STNBR = FB0AW02.SY1STNBR[FB0AWIXM];
      PG2REC.SY2CLRID = FB0AW02.SY2CLRID[FB0AWIXM];
      PG2REC.XDMCD = FB0AW02.XDMCD[FB0AWIXM];

      FB0AM010.XXXMODID = "571"; /* Module identification*/

      XSPG202(); /* Get style and color descriptions*/

      if (sysVar.errorCode == "00000000") /* Call successful*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

          FB0AW02.SY4SZSCL[FB0AWIXM] = PG2REC.SY4SZSCL; /* size scale*/
        else
          converseLib.validationFailed(455); /* Invalid style/color on prev page*/
          FB0AW00.FB0AWIXM = +10; /* To get out of loop*/
        end
      end
    end
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;
  end


end // end FB0A571

// Edit for diff scl on prev page
Function FB0A572()
   /* ------------------------------------------------------------*/
   /* Verify that any styles entered do not have different size scale*/
   /* codes except for '01' and '13', on other pages in temp storage.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIXM = +10;


  while (FB0AW00.FB0AWIXM >= 1) /* Check all map style fields*/

    if (FB0AW00.SY4SZSCL[FB0AWIXM] != " ") /* Style number entered*/
      FB0AW00.FB0AWIX1 = +1; /* Initialize second index*/
      while (FB0AW00.FB0AWIX1 <= 10)

        if (FB0AW00.SY4SZSCL[FB0AWIXM] != FB0AW02.SY4SZSCL[FB0AWIX1])
          if (FB0AW00.SY4SZSCL[FB0AWIXM] == "  "
           || FB0AW02.SY4SZSCL[FB0AWIX1] == "  ")
              /* A OK*/
          else

            if (FB0AW00.SY4SZSCL[FB0AWIXM] == "01"
             && FB0AW02.SY4SZSCL[FB0AWIX1] == "13")
              /* A OK*/
              FB0AW01.SY4SZSCL = FB0AW02.SY4SZSCL[FB0AWIX1];
            else

              if (FB0AW00.SY4SZSCL[FB0AWIXM] == "13"
               && FB0AW02.SY4SZSCL[FB0AWIX1] == "01")
              /* A OK*/
                FB0AW01.SY4SZSCL = FB0AW00.SY4SZSCL[FB0AWIXM];
              else

                set FB0AM010.SY1STNBR[FB0AWIXM] cursor, bold;
                set FB0AM010.SY2CLRID[FB0AWIXM] bold;
                set FB0AM010.XDMCD[FB0AWIXM] bold;
                converseLib.validationFailed(454); /* Diff size scales on diff page*/
                FB0AW00.FB0AWIX1 = +10; /* to get out of loop*/
              end
            end
          end
        end
        FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
      end
    end

    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM - 1;

  end

end // end FB0A572

// Process valid input request
Function FB0A600()



   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP - 1; /* Decrement page number*/
    FB0AM010.XXXMODID = "600";
    FBWREC.XXXMSGNO = 13;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1; /* Increment page number*/
    FB0AM010.XXXMODID = "600";
    FBWREC.XXXMSGNO = 12;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* This process should only be performed when PF9 update*/
   /* or pf15 (combine regions) has been selected.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* Update*/
   || converseVar.eventKey is pf15) /* Combine regions*/
     /* Next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain a new internal sequence number if data entered*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "N") /* Data has been entered*/
    FB0A610(); /* Obtain internal sequence nbr*/
  end

   /* ------------------------------------------------------------*/
   /* create a new header (vselhd01) row if data entered*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "N") /* Data has been entered*/
    FB0A620(); /* Insert vselhd01 row*/
  end

   /* ------------------------------------------------------------*/
   /* For each order type group code create a vseldt01 row*/
   /* If data has been entered.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "N") /* Data has been entered*/

    FB0AW00.FB0AWIX1 = +1; /* Initialize index*/

    while (FB0AW00.FB0AWIX1 <= 6)

      if (FB0AW01.YSMXOT[FB0AWIX1] != " ")

        FB0A630(); /* Insert vseldt01 rows*/

      end
      FB0AW00.FB0AWIX1 = FB0AW00.FB0AWIX1 + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Create vselst01 rows if data has been entered.*/
   /* ------------------------------------------------------------*/

  if (FB0AW00.FB0AWDSW == "N") /* Data has been entered*/
    FB0A650(); /* Create vselst01 rows*/
  end


  if (converseVar.eventKey is pf15) /* Combine regions*/
    FB0A660(); /* transfer to FB0B*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the jcl.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0AW00.FB0AWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/



   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  TA3REC.TA3OPTN = "ALLFLDS";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0A605(); /* format production jcl*/
    else
      FB0A607(); /* format development jcl*/
    end
  end




  FB0A670(); /* Submit the JCL*/

  set FB0AM010 empty; /* 010 input/output area*/
  FB0AM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/
  FB0AW00.FB0AWDSW = " "; /* Don't want to display data*/

   /* Format an information message to display in ezemsg*/

  FB0AW00.FB0AW1LT = "** SIZE PERCENT CALCULATION ";
  FB0AW00.FB0AW2LT = "SUBMITTED, YOUR DUMMY NBR IS: ";
  FB0AW00.FB1DUMNB = FBWREC.FB1DUMNB; /* Dummy curve number*/

   /* Move the dummy number from this application or the dummy*/
   /* passed from fb0b.*/

  if (FB0AW01.FB1DUMNB > 0)
    FB0AW00.FB0AWDUM = FB0AW01.FB1DUMNB;
  else
    FB0AW00.FB0AWDUM = FB0AW00.FB1DUMNB;
  end

  FB0AM010.VAGen_EZEMSG = FB0AW00.FB0AWMSG; /* Message to message area*/
  set FBWREC empty; /* Initialize record*/
  COMMAREA.CAUSERA = FBWREC.FBWGROUP; /* Move to commarea*/

   /* don't want to obtain any data*/

  FB0AW00.FB0AWTSP = 1; /* temp storage page requested*/
  TA5REC.TA5TSQIX = 1; /* current page*/
  FB0AW00.FB0AWDSW = "Y"; /* display data switch*/
  FB0AW00.FB0AWJSF = "Y"; /* Job submitted flag set to yes*/



  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();


end // end FB0A600

// format production jcl
Function FB0A605()

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0AW00.FB0AWIXT > 0) /* Until end of table*/


    if (FB0AT02.TARTYPE[FB0AWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move sequence number to a field in working storage to*/
       /* convert from binary to numeric and then move to the*/
       /* TA6Rec.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0AW00.FB0AWSQN; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB0AT02.TARTYPE[FB0AWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0AT02.TARJCL[FB0AWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0AT02.TARTYPE[FB0AWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0AT02.TARJCL[FB0AWIXT] == "/*EOF") /* End of table*/

      FB0AW00.FB0AWIXT = 0; /* Indicate end of table*/

    else

      FB0AW00.FB0AWIXT = FB0AW00.FB0AWIXT + 1; /* Increment table index*/

    end

  end



end // end FB0A605

// format development jcl
Function FB0A607()

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0AW00.FB0AWIXT > 0) /* Until end of table*/


    if (FB0AT01.TARTYPE[FB0AWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move sequence number to a field in working storage to*/
       /* convert from binary to numeric and then move to the*/
       /* TA6Rec.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0AW00.FB0AWSQN; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB0AT01.TARTYPE[FB0AWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0AT01.TARJCL[FB0AWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0AT01.TARTYPE[FB0AWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0AT01.TARJCL[FB0AWIXT] == "/*EOF") /* End of table*/

      FB0AW00.FB0AWIXT = 0; /* Indicate end of table*/

    else

      FB0AW00.FB0AWIXT = FB0AW00.FB0AWIXT + 1; /* Increment table index*/

    end

  end



end // end FB0A607

// Obtain internal sequence nbr
Function FB0A610()


   /* ------------------------------------------------------------*/
   /* Initialize the storage area*/
   /* ------------------------------------------------------------*/


  set FB3REC empty; /* Clear row storage area*/


   /* ------------------------------------------------------------*/
   /* Select and update the requested table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3430" ("SU", SQLCA, FB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    FB0AW00.FB0AWSQN = FB3REC.FB1INSEQ;
    FBWREC.FB1INSEQ = FB3REC.FB1INSEQ;
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VFBCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB3REC.FB3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/






end // end FB0A610

// Insert vselhd01 row
Function FB0A620()



   /* ------------------------------------------------------------*/
   /* Initialize record*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/

  set FB1REC empty; /* Initialize record*/

  FB1REC.FB1INSEQ = FB3REC.FB1INSEQ;
  FB1REC.SY4SZSCL = FB0AW01.SY4SZSCL;
  FB1REC.FB1INCDS = FB0AW01.FB1INCDS;
  FB1REC.FB1DUMNB = FB0AW01.FB1DUMNB;
  if (converseVar.eventKey is pf9)
    FB1REC.FB1CRVST = "2";
  else
    if (converseVar.eventKey is pf15)
      FB1REC.FB1CRVST = "1";
    end
  end

  FB1REC.FB1CMNT = FB0AW01.FB1CMNT;
  FB1REC.XXXUSRID = COMMAREA.CAUSERID;

   /* ------------------------------------------------------------*/
   /* Obtain current date and time for insert date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01();
  FB1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FB1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FB1REC.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Select vselhd01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("A ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0AM010.XXXMODID = "620"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "620"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/






end // end FB0A620

// Insert vseldt01 row
Function FB0A630()



   /* ------------------------------------------------------------*/
   /* Initialize record*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/

  set FB5REC empty; /* Initialize record*/

  FB5REC.FB1INSEQ = FB3REC.FB1INSEQ;

  if (FB0AW00.FB0AWIX1 <= 3) /* First set of need dates*/
    FB5REC.FB5FRMDT = FB0AW00.FB0AWFRC[1];
    FB5REC.FB5TODT = FB0AW00.FB0AWTOC[1];
  else
    FB5REC.FB5FRMDT = FB0AW00.FB0AWFRC[2];
    FB5REC.FB5TODT = FB0AW00.FB0AWTOC[2];
  end

  FB5REC.YSMXOT = FB0AW01.YSMXOT[FB0AWIX1];

  XX0XS01();
  FB5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FB5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB5REC.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Obtain current date and time for insert date and time.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select vseldt01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("A ", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0AM010.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "630"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/






end // end FB0A630

// Create vselst01 rows
Function FB0A650()

   /* ------------------------------------------------------------*/
   /* update the current page in temp storage.*/
   /* ------------------------------------------------------------*/


  FB0AW00.FB0AWIXM = +1; /* Initialize index*/
  while (FB0AW00.FB0AWIXM <= 10)
    FB0AW02.SY1STNBR[FB0AWIXM] = FB0AM010.SY1STNBR[FB0AWIXM];
    FB0AW02.SY2CLRID[FB0AWIXM] = FB0AM010.SY2CLRID[FB0AWIXM];
    FB0AW02.XDMCD[FB0AWIXM] = FB0AM010.XDMCD[FB0AWIXM];
    FB0AW02.SYBSTGNB[FB0AWIXM] = FB0AM010.SYBSTGNB[FB0AWIXM];
    FB0AW02.SY1STYNM[FB0AWIXM] = FB0AM010.SY1STYNM[FB0AWIXM];
    FB0AW02.SY2CLRAB[FB0AWIXM] = FB0AM010.SY2CLRAB[FB0AWIXM];
    FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;

  end

  FB0AS05(); /* Update temporary storage*/


   /* ------------------------------------------------------------*/
   /* Obtain the pages from temporary storage and create*/
   /* vselst01 rows for each style number or style group code*/
   /* entered.*/
   /* ------------------------------------------------------------*/


  FB0AW00.FB0AWTSP = +1; /* Initialize page requested*/

  while (FB0AW00.FB0AWTSP <= FB0AW00.TA5TSQIX)
    FB0AS04(); /* Obtain page of temporary storage*/
    FB0AW00.FB0AWIXM = +1;
    while (FB0AWIXM <= 10)
      if (FB0AW02.SY1STNBR[FB0AWIXM] != " " /* style number entered*/
       || FB0AW02.SYBSTGNB[FB0AWIXM] != " ")
        FB0A651(); /* Create vselst01 row*/
      end
      FB0AW00.FB0AWIXM = FB0AW00.FB0AWIXM + 1;
    end
    FB0AW00.FB0AWTSP = FB0AW00.FB0AWTSP + 1;
  end



end // end FB0A650

// Insert vselst01 row
Function FB0A651()




   /* ------------------------------------------------------------*/
   /* Initialize record*/
   /* Obtain current date and time for insert date and time.*/
   /* Format record data*/
   /* ------------------------------------------------------------*/

  set FB6REC empty; /* Initialize record*/

  FB6REC.XGPCD = COMMAREA.XGPCD;
  FB6REC.FB1INSEQ = FB3REC.FB1INSEQ;
  FB6REC.SYBSTGNB = FB0AW02.SYBSTGNB[FB0AWIXM];
  FB6REC.SY1STNBR = FB0AW02.SY1STNBR[FB0AWIXM];
  FB6REC.SY2CLRID = FB0AW02.SY2CLRID[FB0AWIXM];
  FB6REC.XDMCD = FB0AW02.XDMCD[FB0AWIXM];

  if (FB0AW02.SYBSTGNB[FB0AWIXM] > " ")
    FB6REC.XQACD = " ";
    FB6REC.PC2INSEG = " ";
    FB6REC.XSACD = " ";
    FB6REC.XPGCD = " ";
    FB6REC.XUMCD = " ";
  else
    FB6REC.XQACD = "01";
    FB6REC.PC2INSEG = "000";
    FB6REC.XSACD = "000";
    FB6REC.XPGCD = "00";
    FB6REC.XUMCD = "01";
  end

  XX0XS01();
  FB6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB6REC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  FB6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FB6REC.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Obtain current date and time for insert date and time.*/
   /* ------------------------------------------------------------*/
   /* Select vselst01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("A ", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    FB0AM010.XXXMODID = "651"; /* Module identification*/
    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(48); /* 'fatal data base error'*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "651"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/







end // end FB0A651

// Transfer to FB0B
Function FB0A660()

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

  set FBWREC empty; /* Initialize record*/

  FBWREC.FB1INSEQ = FB0AW00.FB0AWSQN; /* Internal seq nbr*/
  FBWREC.FB1DUMNB = FB1REC.FB1DUMNB; /* Dummy curve number*/
  COMMAREA.CAUSERA = FBWREC.FBWGROUP;
  COMMAREA.CATOAP = "FB0B"; /* To application*/
  COMMAREA.CAITEM = " "; /* Application data*/

  XSFBS01();

  FB0AM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
  exit stack; /* Return to display message*/
end // end FB0A660

// Submit jcl to internal reader
Function FB0A670()


  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


  FB0AW00.FB0AWTSP = 1; /* set temp storage page to 1*/

   /* ------------------------------------------------------------*/
   /* If a successful call, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FBWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
    XXXMODID = "670"; /* module identification*/
  else
    FBWREC.XXXMSGNO = 01; /* Indicate system error*/
    XXXMODID = "670"; /* module identification*/

  end



   /* ------------------------------------------------------------*/
   /* The submit job request was either cancelled or unsuccessful*/
   /* so the status on the header record should be changed to*/
   /* a '1' because no extract was submitted.*/
   /* ------------------------------------------------------------*/

  FBWREC.FB1INSEQ = FB3REC.FB1INSEQ;

  FB0A110(); /* Obtain header row*/


  FB0A671(); /* Update header row*/


  set FB0AM010 empty; /* 010 input/output area*/
  FB0AM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/
  TA5REC.TA5TSQIX = 1;
  FB0AW00.FB0AWDSW = "Y";


   /* Move the sequence number to the fbwrec*/

  FBWREC.FB1INSEQ = FB1REC.FB1INSEQ;




  exit stack; /* Exit to display map*/

end // end FB0A670

// Update header row
Function FB0A671()


   /* ------------------------------------------------------------*/
   /* Update the field on the record in storage.*/
   /* ------------------------------------------------------------*/


  FB1REC.FB1INSEQ = FBWREC.FB1INSEQ;
  FB1REC.FB1CRVST = "1"; /* Update status code*/

   /* ------------------------------------------------------------*/
   /* Format the change date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();
  FB1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Select vselhd01 row for update*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("U ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
      set FB0AM010 initial; /* M010 input/output*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes made by user*/
      FB0AM010.XXXMODID = "671"; /* Module identification*/
      converseLib.validationFailed(46); /* 'database updated by another user'*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user,*/
   /* Otherwise, indicate that a system error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0AM010.XXXMODID = "671"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/

    converseLib.validationFailed(57); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    converseLib.validationFailed(48); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Terminate function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/








end // end FB0A671

// Get next vseldt01 row
Function FB0AS01()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FB0AW00.FB0AWDCF = "Y"; /* Indicate vseldt01 end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0AM010.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0AS01

// get order group codes for date
Function FB0AS02()

   /* ------------------------------------------------------------*/
   /* Increment the order type group index and move the order*/
   /* type group field to display storage.*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWIX2 = FB0AW00.FB0AWIX2 + 1; /* Increment order etc index*/


  FB0AW01.YSMXOT[FB0AWIX2] = FB5REC.YSMXOT;


   /* ------------------------------------------------------------*/
   /* Increment the order type group counter*/
   /* ------------------------------------------------------------*/

  FB0AW00.FB0AWOTC = FB0AW00.FB0AWOTC + 1;

   /* ------------------------------------------------------------*/
   /* Fetch the next vseldt01 row.*/
   /* ------------------------------------------------------------*/

  FB0AS01(); /* Fetch vseldt01 row*/

end // end FB0AS02

// Add page to temporary storage
Function FB0AS03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FB0AW02.FB0AWTSL = FB0AW00.FB0AWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FB0AW02 empty; /* M010 detail display storage*/

    FB0AW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB0AW00.FB0AWIXM = 0; /* Map index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0AM010.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0AS03

// Obtain temporary storage page
Function FB0AS04()


   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/

  FB0AW02.FB0AWTSL = FB0AW00.FB0AWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB0AW00.FB0AWTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0AM010.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0AS04

// update temporary storage
Function FB0AS05()

   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FB0AW02.FB0AWTSL = FB0AW00.FB0AWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FB0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0AM010.XXXMODID = "S06"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0AM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FB0AS05

//*** RECORD=FB0AW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0AW00 type basicRecord
  5 * char(272) ; 
    10 FB0AWDSW FB0AWDSW ; 
    10 FB0AWDCF FB0AWDCF ; 
    10 FB0AWSCF FB0AWSCF ; 
    10 FB0AWHCF FB0AWHCF ; 
    10 FB0AWODF FB0AWODF ; 
    10 FB0AWFTF FB0AWFTF ; 
    10 FB0AWSNF FB0AWSNF ; 
    10 FB0AWSGF FB0AWSGF ; 
    10 FB0AWCRF FB0AWCRF ; 
    10 FB0AWSEF FB0AWSEF ; 
    10 FB0AWJSF FB0AWJSF ; 
    10 FB0AWUTS FB0AWUTS ; 
    10 XGPCD XGPCD ; 
    10 FB0AWFDT FB0AWFDT ; 
      15 FB0AWFCT FB0AWFCT ; 
      15 FB0AWFYY FB0AWFYY ; 
      15 FB0AWFMM FB0AWFMM ; 
      15 FB0AWFDD FB0AWFDD ; 
    10 FB0AWDTC FB0AWDTC ; 
    10 FB0AWOTC FB0AWOTC ; 
    10 FB0AWFRD FB0AWFRD ; 
    10 FB0AWIXM FB0AWIXM ; 
    10 FB0AWIX1 FB0AWIX1 ; 
    10 FB0AWIX2 FB0AWIX2 ; 
    10 FB0AWIXT FB0AWIXT ; 
    10 FB1DUMNB FB1DUMNB [12] ; 
    10 FB0AWCRV FB0AWCRV ; 
    10 FB0AWMSG FB0AWMSG ; 
      15 FB0AW1LT FB0AW1LT ; 
      15 FB0AW2LT FB0AW2LT ; 
      15 FB0AWDUM FB0AWDUM ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0AWTSP FB0AWTSP ; 
    10 FB0AWSTS FB0AWSTS ; 
    10 FB0AWTSL FB0AWTSL ; 
    10 FB0AWFRC FB0AWFRC [2] ; 
      15 * num(6) ; 
      15 FB0AWFCD FB0AWFCD ; 
    10 FB0AWTOC FB0AWTOC [2] ; 
      15 * num(6) ; 
      15 FB0AWTCD FB0AWTCD ; 
    10 FB0AWGDT FB0AWGDT ; 
      15 FB0AWGMM FB0AWGMM ; 
      15 FB0AWGDD FB0AWGDD ; 
      15 FB0AWGYY FB0AWGYY ; 
    10 SYBSTGNB SYBSTGNB [10] ; 
    10 FB0AWSQN FB0AWSQN ; 
    10 SY4SZSCL SY4SZSCL [10] ; 
end // end FB0AW00

//*** RECORD=FB0AW01 ****
// ----------------------------------------
// Map 010 display storage for heading data
// ----------------------------------------
// ***********************
Record FB0AW01 type basicRecord
  10 FB0AWFRM FB0AWFRM [2] ; 
  10 FB0AWFRY FB0AWFRY [2] ; 
  10 FB0AWTOM FB0AWTOM [2] ; 
  10 FB0AWTOY FB0AWTOY [2] ; 
  10 YSMXOT YSMXOT [6] ; 
  10 FB1CMNT FB1CMNT ; 
  10 FB1INCDS FB1INCDS ; 
  10 XPCKEY XPCKEY ; 
    15 XPCCD XPCCD ; 
    15 XGPCD XGPCD ; 
  10 XPCSDESC XPCSDESC ; 
  10 XSUCD XSUCD ; 
  10 XSUABRV XSUABRV ; 
  10 YPPCD YPPCD ; 
  10 YPPDESC YPPDESC ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 XPRCD XPRCD ; 
  10 XPRABRV XPRABRV ; 
  10 FB1DUMNB FB1DUMNB ; 
end // end FB0AW01

//*** RECORD=FB0AW02 ****
// ---------------------------------------
// Map 010 display storage for detail data
// ---------------------------------------
// ***********************
Record FB0AW02 type basicRecord
  5 FB0AWPAG FB0AWPAG ; 
    10 FB0AWTSL FB0AWTSL ; 
    10 SY1STNBR SY1STNBR [10] ; 
    10 SY2CLRID SY2CLRID [10] ; 
    10 XDMCD XDMCD [10] ; 
    10 SYBSTGNB SYBSTGNB [10] ; 
    10 SY1STYNM SY1STYNM [10] ; 
    10 SY2CLRAB SY2CLRAB [10] ; 
    10 FB0AWSGC FB0AWSGC [10] ; 
    10 SY4SZSCL SY4SZSCL [10] ; 
end // end FB0AW02

// Job submit literal 1
DataItem FB0AW1LT char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submit literal 2
DataItem FB0AW2LT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dummy curve found flag
DataItem FB0AWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated curve number
DataItem FB0AWCRV smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Vseldt01 cursor flag
DataItem FB0AWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display data flag
DataItem FB0AWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date counter
DataItem FB0AWDTC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display dummy nbr
DataItem FB0AWDUM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From day
DataItem FB0AWFCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat century
DataItem FB0AWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat day
DataItem FB0AWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat date field
DataItem FB0AWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map reformat month
DataItem FB0AWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From date with century added
DataItem FB0AWFRC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save fb5rec from date
DataItem FB0AWFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from need month
DataItem FB0AWFRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From need year
DataItem FB0AWFRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIrst time flag
DataItem FB0AWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map reformat year
DataItem FB0AWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FB0AWGDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Gregorian work date
DataItem FB0AWGDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FB0AWGMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem FB0AWGYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vselhd01 cursor flag
DataItem FB0AWHCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB0AWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB0AWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB0AWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table index
DataItem FB0AWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted flag
DataItem FB0AWJSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submit message
DataItem FB0AWMSG char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Obtain data flag
DataItem FB0AWODF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order type group counter
DataItem FB0AWOTC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// One page of temporary storage
DataItem FB0AWPAG char(684)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vselst01 cursor flag
DataItem FB0AWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// styles entered flag
DataItem FB0AWSEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style Nbr group code
DataItem FB0AWSGC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style group found flag
DataItem FB0AWSGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style number found flag
DataItem FB0AWSNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sequence number (numeric)
DataItem FB0AWSQN num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save temp storage page
DataItem FB0AWSTS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to day
DataItem FB0AWTCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date with century added
DataItem FB0AWTOC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// To need month
DataItem FB0AWTOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To need year
DataItem FB0AWTOY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage page length
DataItem FB0AWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB0AWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update temporary storage
DataItem FB0AWUTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

