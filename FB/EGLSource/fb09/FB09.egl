package fb09;

import corpcom1.CAUSERID;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXPR01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpy2.YPGCD;
import fb.common.FB-FRZ-BTL-DT;
import fb.common.FB0QWSCT;
import fb.common.FB8BUYDT;
import fb.common.FB9REC;
import fb.common.FBHREC;
import fb.common.FBIREC;
import fb.common.FBKCAFL;
import fb.common.FBKRDFL;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.*;
import pa.common.PA1BUYMO;
import pg.common.PG1REC;
import pt.common.PT3YYMM;
import pt.common.PT5REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB09 ****
// This progrma is part of the Footwear Buy system.  It
// displays a list of products for which a forecast analyst is
// responsible.  depending on which PF key is hit, a job will
// be submitted that will freeze B/L availability for a
// selected product on the list or for all products on the list
// The products are "frozen" by copying data from availability
// tables to the frozen B/L availability table.
// The user can page forward or backward through the list by
// using PF keys.
// The user may also exit to any allowed application by using
// fast path or PF keys
// 
//   date    name  description of change
// -------- ------ ----------------------------------------
// 09-22-89 lrein  created
// 09-17-90 jalle1 adjusted pf16 master freeze so that defaults
//                 in round flag and b/l date are always used
// 07-12-91 jalle1 added calc acpt flag to map; pf16 only
//                 freezes prods where calc acpt fl = 'n'.
// 07-31-91 pmainw add category to selection criteria (optional
// FL-261          Also, put in enterable default B/L date.
// 08-07-91 jalle1 fix temp storage length error.
// 08-07-91 jalle1 allow multiple selects with pf15.
// 08-08-91 jalle1 display warning if o/a exists for whse
//                 with no par data (for both pf15 and pf16).
// 11-15-91 jalle1 fix temp storage error when pf16 and no
//                 data to display.
// 01-23-92 jmclau fb276 - modify how the round fl is processed
//                 if ypg-pdtyp-grp-cd = '02'(spl makups) in
//                 dfcast.vffsty01 table for the product being
//                 processed move 'n' to round flage else move
//                 'y'. will also pass the round fl down to
//                  fb150d when doing a master freeze.
// 02-11-92 jmclau 00000 - modify how the round fl is processed
//                 if ypg-pdtyp-grp-cd = '02' and
//                 xpr-prod-typ-cd not = '96'(spl makups)
//                 dfcast.vffsty01 table for the product being
//                 processed move 'n' to round flag else move
//                 'y'.
// 03-23-92 PMAINW FB-279 ADD PF-12 & PF-20.
// 07-20-92 JMCLAU FB-288 Add the actual time of the B/L Freeze
//                 to the FB09 screen for each model.
// 10-14-92 LDELUH OCT '92 table changes modified test jcl to
//                 look at cob2.
// 03-23-93 PMAINW FB-270 - Use FBIREC when calling FB1510.
// 04-15-93 JMCLAU 000000 - Change heading in map from unfreeze
//                 to refreeze.
// 07-21-93 LDELUH Change order of loadlibs on test jcl.
// 12-06-93 pmainw include product type to display list of
//                 products.
// 12-19-94 lrein  back again.  Added sum code table to
//                 validate warehouses
// 02-27-95 LREIN  default round flag from fblav if the row
//                 exists.  always let round flag be enterable
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  12/17/97 WSQUIR MODIFICATIONS MADE TO: FB09M001,
//                         FB09S05, FB09W00, FB09W01, FB09W02,
//                         FB09100, FB09133, FB09500, FB09520,
//                         FB09540, FB09550, FB09560, FB09600 &
//                         FB09611, FB09564, FB09565, FB09566.
// Y2KFIX  02/09/98 rgilli MODIFICATIONS MADE TO:
//                         FB09(Flow): Increase t/s length from
//                                     813 to 843 to accomodate
//                                     new field sizes.
// Y2KFIX  05/12/98 CSAWKI MODIFICATIONS MADE TO:
//                         Changed FB09M001.BF09MBMO to right
//                         justify.
// FB1537  06/15/98 MSEVAL Corrected validation for default B/L
//                         Date field.
// FB1557  11/11/98 SSANKA Additions of new columns to map.
//                         Addition of PF9 key.
// FB1561  12/31/98 PSARKA Modified round flag to unprotected.
//                         Prevent the resetting of B/L date
//                         for products having FB-CALC-ACPT-FL
//                         as 'N' while doing a master freeze.
// FB1565  03/23/99 RTRAN  Modified program to bring the ADJUST
//                         -ED Bottom Line Availability total.
// *********************
Program FB09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB09W00 FB09W00; // record
  FB09W01 FB09W01; // record
  FB09W02 FB09W02; // record
  FB09W03 FB09W03; // record
  FB09W04 FB09W04; // record
  FB9REC FB9REC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FF3REC FF3REC; // record
  PG1REC PG1REC; // record
  PT5REC PT5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XPCTBL; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use FB09TP1; // table
  use FB09T01; // table
  use FB09M.FB09M001, // form
  		FB09M.TA0PM001,
  		FB09M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* initialise working storage and map areas*/
     /* ------------------------------------------------------------*/

    set FB09M001 initial; /* map area*/
    set XX0XM001 initial; /* pop up window*/

    set FB09W00 empty; /* working storage*/
    set FB09W01 empty; /* display working storage*/
    set FB09W02 empty; /* for jcl stuff*/
    set FB09W03 empty; /* fb1510 working storage*/
    set FBXREC empty; /* passed record*/
    set TAEREC empty; /* error record*/
    set TA5REC empty; /* error record*/
    set TA6REC empty; /* submit jcl record*/
    set SQLCA empty; /* io mod area*/
    set XX0XW01 empty; /* time date work area*/

    FB09W00.FB09WRDS = "N"; /* dont request data*/
    FB09W00.FB09WRNS = "N"; /* warning switch*/
     /* TCS CHANGE BEGINS*/
     /* MOVE 'N' TO FB09W00.FB09WMCS;    /* dont format map*/
    FB09W00.FB09WMCS = "Y"; /* dont format map*/
    FB09W00.FB09WSTC = "Y";
     /* TCS CHANGE ENDS               /* Style/color flag*/

     /* ------------------------ y2k out begin ------------------------*/
     /* MOVE 813 TO FB09W00.XXXTSLEN;     /* temp storage queue length*/
     /* ------------------------ y2k out end   ------------------------*/

     /* ------------------------ y2k in begin  ------------------------*/
     /* / TCS CHANGE BEGINS*/
     /* MOVE 843 TO FB09W00.XXXTSLEN;    /* temp storage queue length*/
    FB09W00.XXXTSLEN = 1083; /* temp storage queue length*/
     /* / TCS CHANGE ENDS*/
     /* ------------------------ y2k in end    ------------------------*/
    /*  */
    /* ***************************** Y2K OUT BEGIN ****************************/
    /*  */
    /* MOVE 19 TO FB09W00.FB09WBCC;      /* buy century*/
    /*  */
    /* ***************************** Y2K OUT END ******************************/
    /*  */
    FB09W00.FB09WBDD = 1; /* buy day*/
    FB09W00.FB09WPFK = "    "; /* init pfkey switch*/

    if (COMMAREA.CAFRMSYS == "FB") /* came from this system*/

      /* ------------------------------------------------------------*/
       /* if the from system is fb, and the application is not one of*/
       /* those below, a list of data from fbwrec is moved to fbxrec*/
      /* ------------------------------------------------------------*/

      if (COMMAREA.CAFROMAP != "FB0A"
       && COMMAREA.CAFROMAP != "FB0B"
       && COMMAREA.CAFROMAP != "FB0C"
       && COMMAREA.CAFROMAP != "FB0D"
       && COMMAREA.CAFROMAP != "FB0E"
       && COMMAREA.CAFROMAP != "FB0G"
       && COMMAREA.CAFROMAP != "FB0I"
       && COMMAREA.CAFROMAP != "FB0J"
       && COMMAREA.CAFROMAP != "FB0K"
       && COMMAREA.CAFROMAP != "FB0L"
       && COMMAREA.CAFROMAP != "FB0N"
       && COMMAREA.CAFROMAP != "FB0O"
       && COMMAREA.CAFROMAP != "FB0P")
        FBXREC.FBXGROUP = FBWREC.FBWFILL;
      end

    end



     /* ------------------------------------------------------------*/
     /* if the key data is in the commarea, it is moved to the map,*/
     /* and the data request switch and map format switch are set*/
     /* to yes*/
     /* ------------------------------------------------------------*/

    if (FBXREC.CAUSERID == " ")
      FB09M001.CAUSERID = COMMAREA.CAUSERID; /* user id to map*/
      /* OVE COMMAREA.CAUSERID TO FB09W01.CAUSERID;/* user id to map*/
    else
      FB09M001.CAUSERID = FBXREC.CAUSERID; /* user id to map*/
      /* MOVE FBXREC.CAUSERID TO FB09W01.CAUSERID;/* user id to map*/
    end

    if (FBXREC.FB8BUYDT != 0) /* buy date in commarea*/
      FB09W00.FB09WBDT = FBXREC.FB8BUYDT; /* separate*/
      FB09M001.FB09MBMO = FB09W00.FB09WBMO; /* yymm format*/
      FB09W01.FB09WBMO = FB09W00.FB09WBMO; /* yymm format*/
      FB09W00.FB09WRDS = "Y"; /* request data*/
      FB09W00.FB09WMCS = "Y"; /* format map*/
    end

    if (FBXREC.XPLCD != "  ") /* product line in commarea*/
      FB09M001.XPLCD = FBXREC.XPLCD; /* move to map*/
      FB09W00.FB09WRDS = "Y"; /* request data*/
      FB09W00.FB09WMCS = "Y"; /* format map*/
    end

    if (FBXREC.XPCCD != "  ") /* product category*/
      FB09M001.XPCCD = FBXREC.XPCCD; /* move to map*/
      FB09W00.FB09WRDS = "Y"; /* request data*/
      FB09W00.FB09WMCS = "Y"; /* format map*/
    end

    FB09001: FB09001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process*/
     /* ------------------------------------------------------------*/

    goto FB09001; /* converse the main process*/
  end // end main
end // end FB09

// main process
Function FB09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain the data to display*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FB09100(); /* Obtain data to display*/

  FB09200(); /* Format and display the map*/

  FB09300(); /* Check attention identifier*/

  FB09400(); /* Reset fields to normal intensity*/

  FB09500(); /* Verify the entered data*/

  FB09600(); /* Process valid input request*/



end // end FB09001

// obtain data to display
Function FB09100()
   /* ------------------------------------------------------------*/
   /* If no buy month was passed get the current buy month from*/
   /* the control record.*/
   /* ------------------------------------------------------------*/
  if (FB09W00.FB09WBMO == 0)

    FB09S04(); /* Get current buy month*/

    FB09W00.FB09WBDT = FB9REC.FB8BUYDT;
    FB09M001.FB09MBMO = FB09W00.FB09WBMO;
    FB09W01.FB09WBMO = FB09W00.FB09WBMO;
  end

   /* tcs change begins*/
  FB09W01.CAUSERID = FB09M001.CAUSERID;
   /* tcs change ends*/
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (FB09W00.FB09WRDS != "Y") /* Data was not requested*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/

  FB09W01.CAUSERID = FB09M001.CAUSERID; /* user identification*/
  FB09W01.FB09WBMO = FB09M001.FB09MBMO; /* buy month*/
  FB09W01.XPLCD = FB09M001.XPLCD; /* product line code*/
  FB09W01.XPCCD = FB09M001.XPCCD; /* product category*/
  FB09W01.XPRCD = FB09M001.XPRCD; /* product type*/
  FB09W00.FB09WBMO = FB09W01.FB09WBMO;
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  if (FB09W00.FB09WBMO != 0)
    if (FB09W00.FB09WBMO > 6000)
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
      FB09W00.FB09WBCC = 19;
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
    else
      FB09W00.FB09WBCC = 20;
    end
    FB09W00.FB09WBDD = 01;
  else
    FB09W00.FB09WBCC = 0;
    FB09W00.FB09WBDD = 00;
  end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  FBXREC.FB8BUYDT = FB09W00.FB09WBDT; /* buy date*/
  FBXREC.XPLCD = FB09M001.XPLCD; /* product line code*/
  FBXREC.XPCCD = FB09M001.XPCCD; /* product category*/

   /* tcs change begins*/
  FB09W00.FB09WCNT = 1;

  FB09W00.FB09WYYM = FB09W00.FB09W-BEG-CCYYMM;

  while (FB09W00.FB09WCNT <= 3)
    FB09W00.FB09WCPD[FB09WCNT] = FB09W00.FB09WYYM;

    FB09W00.FB09WYYM = FB09W00.FB09WYYM + 1;

    if (FB09W00.FB09WPTM > 12)
      FB09W00.FB09WPCY = FB09W00.FB09WPCY + 1;
      FB09W00.FB09WPTM = 1;
    end

    FB09W00.FB09WCNT = FB09W00.FB09WCNT + 1;
  end

  FB09150(); /* load warehouses*/

   /* ------------------------------------------------------------*/
   /* set the key, select a row from dprodg.vsuser01, scheduler*/
   /* table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* initialise record*/
  PG1REC.XXXUSER = FB09M001.CAUSERID; /* user id*/
  PG1REC.XGPCD = "02"; /* gpc code*/
  PG1REC.PG1SC4CD = "**"; /* sched/avail code*/
  PG1REC.PG1FCTCD = "**"; /* forecaster code*/
  FB09110(); /* get schedule code*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
    set FB09M001 initial;
    FB09M001.XXXMODID = "100"; /* Module identification*/
    set FB09M001.CAUSERID cursor, bold; /* highlight, place cursor*/
    set FB09M001.FB09MBMO bold; /* highlight*/
    set FB09M001.XPLCD bold; /* highlight*/
    set FB09M001.XPCCD bold; /* highlight*/
    set FB09M001.XPRCD bold; /* highlight*/
    converseLib.validationFailed(18); /* Indicate no data found*/
    FB09W00.FB09WMCS = "N"; /* dont format map*/
  end


   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from dfcast.vffsty01*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* initialise record*/
  FF3REC.SY1STNBR = "      "; /* style number*/
  if (FB09M001.XPCCD == "  ")
    FF3REC.XPCCD = "*"; /* category code*/
  else
    FF3REC.XPCCD = FB09M001.XPCCD; /* category code*/
  end
  FF3REC.YSMXDV = "*";
  FF3REC.XPLCD = FB09M001.XPLCD; /* product line*/
  FF3REC.PG1SC4CD = PG1REC.PG1SC4CD; /* sched/avail code*/
  FB09120(); /* select set for users list*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area, and obtain all table rows to be*/
   /* accumulated.*/
   /* ------------------------------------------------------------*/

  FB09W00.FB09WIXM = 1; /* initialise display line index*/
  FB09W00.FB09WFFI = "Y"; /* initialise first fetch sw*/
   /* FB09S01                         ; purge temp storage queue*/

  while (SQLCA.VAGen_SQLCODE != 100) /* for each row in the selected set*/
    set FF3REC empty; /* clear area*/
    FB09130(); /* get next product for user*/
  end

   /* ------------------------------------------------------------*/
   /* if first fetch, indicate that no data was found to display*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100 /* no more rows*/
   && FB09W00.FB09WFFI == "Y")   /* first fetch*/
    set FB09M001 initial;
    FB09M001.XXXMODID = "100"; /* Module identification*/
    set FB09M001.CAUSERID cursor, bold; /* highlight, place cursor*/
    set FB09M001.FB09MBMO bold; /* highlight*/
    set FB09M001.XPLCD bold; /* highlight*/
    set FB09M001.XPCCD bold; /* highlight*/
    set FB09M001.XPRCD bold; /* highlight*/
    converseLib.validationFailed(18); /* Indicate no data found*/
    FB09W00.FB09WMCS = "N"; /* dont format map*/
  end

  if (FB09W00.TA5TSQIX < 1 /* no full tsq pages formatted*/
   && FB09W00.FB09WIXM <= 1) /* no lines were formatted*/
    set FB09M001 initial;
    FB09M001.XXXMODID = "100"; /* Module identification*/
    set FB09M001.CAUSERID cursor, bold; /* highlight*/
    set FB09M001.FB09MBMO bold; /* highlight*/
    set FB09M001.XPLCD bold; /* highlight*/
    set FB09M001.XPCCD bold; /* highlight*/
    set FB09M001.XPRCD bold; /* highlight*/
    converseLib.validationFailed(18); /* Indicate no data found*/
    FB09W00.FB09WMCS = "N"; /* dont format map*/
  end

   /* ------------------------------------------------------------*/
   /* add any partially formatted last page to the temp storage q*/
   /* ------------------------------------------------------------*/

  if (FB09W00.FB09WIXM > 1) /* some lines were formatted*/
    FB09S02(); /* add page to temp storage queue*/

    /* ------------------------------------------------------------*/
     /* Save the key information in map display storage area.*/
    /* ------------------------------------------------------------*/

    FB09W01.CAUSERID = FB09M001.CAUSERID; /* user identification*/
    FB09W01.XPLCD = FB09M001.XPLCD; /* product line code*/
    FB09W01.XPCCD = FB09M001.XPCCD; /* product category*/
    FB09W01.XPRCD = FB09M001.XPRCD; /* product type*/
    FB09W01.FB09WBMO = FB09M001.FB09MBMO; /* buy month*/

  end

  FB09140(); /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FB09W00.FB09WRDS = "N"; /* Request for data switch*/
    FB09W00.XXXTSPAG = 1; /* desired page number*/
  end


end // end FB09100

// get schedule code
Function FB09110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.XXXUSER; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09110

// select set for users list
Function FB09120()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "FFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY4; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09120

// get  next product for user
Function FB09130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FB09W00.FB09WFFI == "Y") /* first fetch*/
        FB09S01(); /* purge temp storage queue*/

        /* ------------------------------------------------------------*/
         /* Save the key information in map display storage area.*/
        /* ------------------------------------------------------------*/

        FB09W01.CAUSERID = FB09M001.CAUSERID; /* user identification*/
        FB09W01.XPLCD = FB09M001.XPLCD; /* product line code*/
        FB09W01.XPCCD = FB09M001.XPCCD; /* product category*/
        FB09W01.XPRCD = FB09M001.XPRCD; /* product type*/
        FB09W01.FB09WBMO = FB09M001.FB09MBMO; /* buy month*/
      end

      FB09W00.FB09WFFI = "N"; /* not first fetch anymore*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB09M001.XXXMODID = "130"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = FF3REC.FF3KEY4; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FB09W00.FB09WRDS = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end

   /* 12-06-93 pmainw include product type to display list of*/
               /* products. ';*/
  if (FB09M001.XPRCD != "  ")
    if (FF3REC.XPRCD != FB09M001.XPRCD)
      return;
    end
  end

  FB09131(); /* check for forecast qty to buy*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no forecast qtb*/
    FBKREC.FBKCAFL = " "; /* set calc acpt flag to ' '*/
    FB09132(); /* check for direct ship/nil qtb*/

    if (SQLCA.VAGen_SQLCODE == 100) /* no direct ship/nil qtb*/
      SQLCA.VAGen_SQLCODE = 0; /* reinitialise code*/
      return; /* return to calling process*/
    end

    SQLCA.VAGen_SQLCODE = 0; /* reset sqlcode to product found*/
  end

  FB09133(); /* get b/l freeze dates*/
  SQLCA.VAGen_SQLCODE = 0; /* reset sqlcode to product found*/
  FB09134(); /* save data in display ws*/

  if (FB09W00.FB09WIXM > 15) /* page is full*/
    FB09S02(); /* add page to temp storage queue*/

    /* ------------------------------------------------------------*/
     /* Save the key information in map display storage area.*/
    /* ------------------------------------------------------------*/

    FB09W01.CAUSERID = FB09M001.CAUSERID; /* user identification*/
    FB09W01.XPLCD = FB09M001.XPLCD; /* product line code*/
    FB09W01.XPCCD = FB09M001.XPCCD; /* product category*/
    FB09W01.XPRCD = FB09M001.XPRCD; /* product type*/
    FB09W01.FB09WBMO = FB09M001.FB09MBMO; /* buy month*/
  end

end // end FB09130

// check for forecast qty to buy
Function FB09131()
   /* ------------------------------------------------------------*/
   /* build key for fbkrec*/
   /* ------------------------------------------------------------*/

  set FBKREC empty;

  FBKREC.SY1STNBR = FF3REC.SY1STNBR;
  FBKREC.SY2CLRID = FF3REC.SY2CLRID;
  FBKREC.XDMCD = FF3REC.XDMCD;
  FB09W00.FB09WBMO = FB09M001.FB09MBMO; /* to get to 19yymm01 format*/
  FBKREC.FB8BUYDT = FB09W00.FB09WBDT;
  FBKREC.FB8RCTYP = "B";

   /* ------------------------------------------------------------*/
   /* Select exist from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist*/

   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* return to calling process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09131

// check for direct ship/nil qtb
Function FB09132()
   /* ------------------------------------------------------------*/
   /* build key for fbhrec*/
   /* ------------------------------------------------------------*/

  FBHREC.SY1STNBR = FF3REC.SY1STNBR;
  FBHREC.SY2CLRID = FF3REC.SY2CLRID;
  FBHREC.XDMCD = FF3REC.XDMCD;
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
  FBHREC.FB8BUYDT = FB09W00.FB09WBDT;
  FBHREC.FBHDSAFL = "N";
  FBHREC.XWHCD = "*";

   /* ------------------------------------------------------------*/
   /* Select exist from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4640" ("SE", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist*/

   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row exists*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "132"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09132

// get b/l freeze dates
Function FB09133()
   /* ------------------------------------------------------------*/
   /* build key for fblrec*/
   /* ------------------------------------------------------------*/

  FBLREC.SY1STNBR = FF3REC.SY1STNBR;
  FBLREC.SY2CLRID = FF3REC.SY2CLRID;
  FBLREC.XDMCD = FF3REC.XDMCD;
  FBLREC.XQACD = "01";
  FBLREC.PC2INSEG = "000";
  FBLREC.XPGCD = "00";
  FBLREC.XUMCD = "01";

  if (FBXREC.FB8BUYDT != 0)
    FBLREC.FB8BUYDT = FBXREC.FB8BUYDT;
  else
    FB09W00.FB09WBMO = FB09W01.FB09WBMO; /* yymm format*/
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
    if (FB09W00.FB09WBMO != 0)
      if (FB09W00.FB09WBMO > 6000)
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
        FB09W00.FB09WBCC = 19; /* century*/
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
      else
        FB09W00.FB09WBCC = 20;
      end
      FB09W00.FB09WBDD = 01; /* 01 to day*/
    else
      FB09W00.FB09WBCC = 0;
      FB09W00.FB09WBDD = 00; /* 00 to day*/
    end
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
    FBLREC.FB8BUYDT = FB09W00.FB09WBDT; /* ccyymmdd format*/
  end

   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select set*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */

   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FBLREC.FB-FRZ-BTL-DT = 0; /* freeze date*/
      FBLREC.FB-FRZ-BTL-HHMM = 0; /* freeze time*/
      FBLREC.PT3YYMM = 0; /* period date*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB09M001.XXXMODID = "133"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT SET          ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    FB09W00.FB09WRDS = "N"; /* dont request data*/
    exit stack; /* Exit to display map*/
  end

  FB09W00.FB09WDWS = "N"; /* dom whse not found*/

  while (SQLCA.VAGen_SQLCODE != 100
   && FB09W00.FB09WDWS != "Y") /* still rows and dom whse not found*/
    FB09S05(); /* fetch fblav row*/
  end

   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

   /* ---------- y2k out begin --------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select set*/
   /* ---------- y2k out end ----------*/
   /* ---------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* ---------- y2k in end -----------*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     
    return;
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "133"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/

end // end FB09133

// save in disp working storage
Function FB09134()
  FB09W01.SY1STNBR[FB09WIXM] = FF3REC.SY1STNBR; /* style number*/
  FB09W01.SY2CLRID[FB09WIXM] = FF3REC.SY2CLRID; /* color code*/
  FB09W01.XDMCD[FB09WIXM] = FF3REC.XDMCD; /* dimension code*/
  FB09W01.SY1SSTNM[FB09WIXM] = FF3REC.SY1SSTNM; /* style short name*/
  FB09W01.SY2CLRAB[FB09WIXM] = FF3REC.SY2CLRAB; /* color abbrev*/
  FB09W01.FB-FRZ-BTL-DT[FB09WIXM] = FBLREC.FB-FRZ-BTL-DT; /* b/l frozen date*/
  FB09W00.FB09WFTN = FBLREC.FB-FRZ-BTL-HHMM; /* Frz time numeric*/
  if (FB09W00.FB09WFTN > 0)
    FB09W00.FB09WFHH = FB09W00.FB09WFHN;
    FB09W00.FB09WFSE = ":";
    FB09W00.FB09WFMM = FB09W00.FB09WFMN;
    FB09W01.FB09WFTM[FB09WIXM] = FB09W00.FB09WFTC; /* Frz time char*/
  end
  FB09W01.PT3YYMM[FB09WIXM] = FBLREC.PT3YYMM; /* buy month*/
  FB09W01.YPGCD[FB09WIXM] = FF3REC.YPGCD; /* product line code*/

  if (FBLREC.FB-FRZ-BTL-DT > 0) /* a fblav row found*/
    FB09W01.FBKRDFL[FB09WIXM] = FBLREC.FBKRDFL;
  else
    if (FF3REC.YPGCD == "02") /* special makeups*/
      if (FF3REC.XPRCD != "96")
        FB09W01.FBKRDFL[FB09WIXM] = "N"; /* round flag*/
      else
        FB09W01.FBKRDFL[FB09WIXM] = "Y"; /* round flag*/
      end
    else
      FB09W01.FBKRDFL[FB09WIXM] = "Y"; /* round flag*/
    end
  end

   /* TCS CHANGE BEGINS*/
  FB09W01.FCST-QTB[FB09WIXM] = FBKREC.FB8FTQTB; /* forecasted qty*/

   /* RETRIEVING THE TOTAL ADJ AVAIL QUANTITIES FOR CORP B/Ls FOR THE*/
   /* CURRENT BUY MONTH AND THE FUTURE MONTHS --*/

  FB09W00.FB09WCNT = 1; /* initialize counter*/
  while (FB09W00.FB09WCNT <= 3)
    set PT5REC empty; /* initialize record*/

    PT5REC.XGPCD = "02"; /* gpc*/
    PT5REC.SY1STNBR = FF3REC.SY1STNBR; /* style*/
    PT5REC.SY2CLRID = FF3REC.SY2CLRID; /* color*/
    PT5REC.XDMCD = FF3REC.XDMCD; /* dimension*/
    PT5REC.PC2INSEG = "000"; /* iseg*/
    PT5REC.XPGCD = "00"; /* package type*/
    PT5REC.XUMCD = "01"; /* unit of measure*/
    PT5REC.XQACD = "01"; /* quality*/
    FB09W04.XWHCD[1] = "**"; /* beg whse*/
    FB09W04.XWHCD[2] = "**"; /* end whse*/
    PT5REC.PT3YYMM = FB09W00.FB09WCPD[FB09WCNT];

    FB09564(); /* open csr dmodel.vfbasm04*/
    FB09565(); /* fetch record dmodel.vfbasm04*/

    if (SQLCA.VAGen_SQLCODE == +100)
      FB09W01.CURR-ADJ-AVL-TOT[FB09WIXM] = 0;
    else
      if (FB09W00.FB09WCNT == 1)
        FB09W01.CURR-ADJ-AVL-TOT[FB09WIXM] = PT5REC.PT3ADAVT;
      else
        if (FB09W00.FB09WCNT == 2)
          FB09W01.FUT1-ADJ-AVL-TOT[FB09WIXM] = PT5REC.PT3ADAVT;
        else
          FB09W01.FUT2-ADJ-AVL-TOT[FB09WIXM] = PT5REC.PT3ADAVT;
        end
      end
    end
    FB09566(); /* close cursor*/
    FB09W00.FB09WCNT = FB09W00.FB09WCNT + 1;
  end
   /* TCS CHANGE ENDS*/

  FB09W01.FBKCAFL[FB09WIXM] = FBKREC.FBKCAFL; /* calc acpt flag*/
  FB09W01.FB09WERR[FB09WIXM] = "N"; /* init err to 'n'*/
  FB09W01.FB09WSCD[FB09WIXM] = " "; /* map select field*/

  FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* increment index*/
end // end FB09134

// close cursor
Function FB09140()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C4", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "FFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY4; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09140

// Load warehouses
Function FB09150()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB09151(); /* declare cursor*/
  FB09W00.FB09WIX1 = 1; /* first row*/

  while (FB09W00.FB09WIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB09152(); /* fetch row*/
    FB09W00.FB09WIX1 = FB09W00.FB09WIX1 + 1; /* next row*/
  end

  if (FB09W00.FB09WIX1 <= 10)
    FB09153(); /* close cursor*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  FB09M001.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB09150

// Declare cursor DCORP.VSUMCD01
Function FB09151()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09151

// Fetch row DCORP.VSUMCD01
Function FB09152()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB09W00.XWH-WHSE-CD[FB09WIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB09M001.XXXMODID = "152"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FB09W00.FB09WRDS = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end

end // end FB09152

// Close cursor DCORP.VSUMCD01
Function FB09153()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09153

// format and display the map
Function FB09200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  XXXCURDT = VGVar.currentShortGregorianDate; /* date*/

  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end

  if (converseVar.validationMsgNum == 18)
    FB09M001.CAUSERID = FB09W01.CAUSERID;
    FB09M001.FB09MBMO = FB09W01.FB09WBMO;
    FB09M001.XPLCD = FB09W01.XPLCD;
    FB09M001.XPCCD = FB09W01.XPCCD;
    FB09M001.XPRCD = FB09W01.XPRCD;
    /* TCS CHANGE BEGINS*/
    FB09W00.FB09WIXM = 1;
    while (FB09W00.FB09WIXM <= 15) /* Until screen is full*/
      set FB09M001.FB09MSCD[FB09WIXM] skip, invisible;
      set FB09M001.PT3YYMM[FB09WIXM] skip, invisible;
      FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1;
    end
    /* TCS CHANGE ENDS*/
  end

  if (FB09W00.FB09WMCS == "Y") /* map needs to be formatted*/
    FB09210(); /* format the map*/
  end

  if (FBXREC.XXXMSGNO != 0)
                                   /* error or informational message*/

    if (FBXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBXREC.XXXMSGNO);
    end /* move to map*/
    FB09M001.XXXMODID = FB09M001.XXXMODID; /* error module name*/
    set FB09M001 alarm; /* indicate sound alarm*/

  end

  converse FB09M001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  FBXREC.XXXMSGNO = 0; /* message number*/

  COMMAREA.CATOAP = FB09M001.CATOAP; /* to application*/
  COMMAREA.CAITEM = FB09M001.CAITEM; /* application data*/
end // end FB09200

// format map from disp ws
Function FB09210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FB09M001 initial; /* Map input/output area*/
  FB09M001.XXXCURDT = VGVar.currentShortGregorianDate;
  FB09W00.FB09WMCS = "N"; /* reset map clear switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FB09W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FB09W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FB09W00.FB09WSWU == "Y") /* Current page was changed*/
        FB09211(); /* Update temporary storage page*/
        FB09W00.FB09WSWU = "N"; /* Storage update switch*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FB09W00.XXXTSPAG > FB09W00.TA5TSQIX) /* Desired greater highest*/
        FB09W00.XXXTSPAG = FB09W00.TA5TSQIX; /* Default to highest*/
      end

      FB09S03(); /* Obtain temporary storage page*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FB09M001.CAUSERID = FB09W01.CAUSERID; /* user*/
  FB09M001.FB09MBMO = FB09W01.FB09WBMO; /* buy date yymm*/
  FB09M001.FB09MBLD = FB09W00.FB09MBLD; /* default date*/
  FB09M001.XPLCD = FB09W01.XPLCD; /* product line code*/
  FB09M001.XPCCD = FB09W01.XPCCD; /* product category*/
  FB09M001.XPRCD = FB09W01.XPRCD; /* product type*/
  FB09W00.FB09WIXM = 1; /* Initialize line index*/

   /* TCS CHANGE BEGINS*/
  if (FB09W00.FB09WSTC == "Y")
    FB09M001.FB09M-STY-COL = "STYLE";
  else
    FB09M001.FB09M-STY-COL = "COLOR";
  end
  FB09M001.FB09M-CURRBMO = FB09W00.FB09WCYM[1];
  FB09M001.FB09M-FUT1BMO = FB09W00.FB09WCYM[2];
  FB09M001.FB09M-FUT2BMO = FB09W00.FB09WCYM[3];
   /* TCS CHANGE ENDS*/

  while (FB09W00.FB09WIXM <= 15 /* Until screen is full*/
   && FB09W01.SY1STNBR[FB09WIXM] > " ") /* or end of data*/

    if (FB09W00.FB09WIXM == 1) /* First select field*/
      set FB09M001.FB09MSCD[FB09WIXM] cursor, normal; /* Position cursor*/
    end

    FB09M001.FB09MSCD[FB09WIXM] = FB09W01.FB09WSCD[FB09WIXM];
    FB09M001.SY1STNBR[FB09WIXM] = FB09W01.SY1STNBR[FB09WIXM];
    FB09M001.SY2CLRID[FB09WIXM] = FB09W01.SY2CLRID[FB09WIXM];
    FB09M001.XDMCD[FB09WIXM] = FB09W01.XDMCD[FB09WIXM];
    /* tcs change begins*/
    if (FB09W00.FB09WSTC == "Y")
      FB09M001.SY1SSTNM[FB09WIXM] = FB09W01.SY1SSTNM[FB09WIXM];
    else
      FB09M001.SY1SSTNM[FB09WIXM] = FB09W01.SY2CLRAB[FB09WIXM];
      set FB09M001.SY1SSTNM[FB09WIXM] yellow;
    end
    FB09M001.FCSTQTB[FB09WIXM] = FB09W01.FCST-QTB[FB09WIXM];
    FB09M001.CURRAVL[FB09WIXM] = FB09W01.CURR-ADJ-AVL-TOT[FB09WIXM];
    FB09M001.FUTR1AVL[FB09WIXM] = FB09W01.FUT1-ADJ-AVL-TOT[FB09WIXM];
    FB09M001.FUTR2AVL[FB09WIXM] = FB09W01.FUT2-ADJ-AVL-TOT[FB09WIXM];
    /* tcs change ends*/

    FB09M001.FB-FRZ-BTL-DT[FB09WIXM] = FB09W01.FB-FRZ-BTL-DT[FB09WIXM];
    FB09M001.FB09WFTM[FB09WIXM] = FB09W01.FB09WFTM[FB09WIXM];
    FB09M001.PT3YYMM[FB09WIXM] = FB09W01.PT3YYMM[FB09WIXM];
    FB09M001.FBKRDFL[FB09WIXM] = FB09W01.FBKRDFL[FB09WIXM];
    FB09M001.FBKCAFL[FB09WIXM] = FB09W01.FBKCAFL[FB09WIXM];
    /* IF FB09W01.YPGCD(FB09WIXM) EQ '01';/* In line product*/
     /* SET FB09M001.FBKRDFL(FB09WIXM) AUTOSKIP;/* Dont't allow entry*/
    /* END;*/

    /* ------------------------------------------------------------*/
     /* if warning message to display (o/a in invalid whse),*/
     /* highlight product row.*/
    /* ------------------------------------------------------------*/

    if (FB09W00.FB09WRNS == "Y" /* if warning to display*/
     && FB09W01.FB09WERR[FB09WIXM] == "Y") /* on this product*/

      set FB09M001.FB09MSCD[FB09WIXM] bold;
      set FB09M001.SY1STNBR[FB09WIXM] bold;
      set FB09M001.SY2CLRID[FB09WIXM] bold;
      set FB09M001.XDMCD[FB09WIXM] bold;
      set FB09M001.SY1SSTNM[FB09WIXM] bold;
      /* SET FB09M001.SY2CLRAB(FB09WIXM) BRIGHT;*/
      set FB09M001.FB-FRZ-BTL-DT[FB09WIXM] bold;
      set FB09M001.FB09WFTM[FB09WIXM] bold;
      set FB09M001.PT3YYMM[FB09WIXM] bold;
      set FB09M001.FBKRDFL[FB09WIXM] bold;
      set FB09M001.FBKCAFL[FB09WIXM] bold;
    end

    FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* Increment line index*/
  end

  while (FB09W00.FB09WIXM <= 15) /* Until screen is full*/
    set FB09M001.FB09MSCD[FB09WIXM] skip, invisible;
    set FB09M001.SY1STNBR[FB09WIXM] skip, invisible;
    set FB09M001.SY2CLRID[FB09WIXM] skip, invisible;
    set FB09M001.XDMCD[FB09WIXM] skip, invisible;
    set FB09M001.SY1SSTNM[FB09WIXM] skip, invisible;
    /* SET FB09M001.SY2CLRAB(FB09WIXM) AUTOSKIP,DARK;*/
    set FB09M001.FB-FRZ-BTL-DT[FB09WIXM] skip, invisible;
    set FB09M001.FB09WFTM[FB09WIXM] skip, invisible;
    set FB09M001.PT3YYMM[FB09WIXM] skip, invisible;
    set FB09M001.FBKRDFL[FB09WIXM] skip, invisible;
    set FB09M001.FBKCAFL[FB09WIXM] skip, invisible;
    FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* Increment line index*/
  end


end // end FB09210

// update temp storage queue page
Function FB09211()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FB09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB09M001.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB09211

// check attention identifier
Function FB09300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* TCS CHANGE BEGINS*/
  if (converseVar.eventKey is pf9)
    if (FB09W00.FB09WSTC == "Y")
      FB09W00.FB09WSTC = "N";
    else
      FB09W00.FB09WSTC = "Y";
    end
    FB09W00.FB09WMCS = "Y";
    exit stack;
  end
   /* TCS CHANGE ENDS*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "FB09";
    FBXREC.CAUSERID = FB09W01.CAUSERID;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    FB09S01(); /* purge temp storage*/
    XSFBS01(); /* transfer to another appl*/
    FB09W00.FB09WRDS = "N"; /* reset request for data switch*/
    exit stack; /* Exit to redisplay map*/
  end

  if (FB09M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FB09M001.CAUSERID != COMMAREA.CAUSERID)
        FBXREC.CAUSERID = FB09M001.CAUSERID;
      end

      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      FB09S01(); /* purge temp storage*/
      XSFBS01(); /* Exit to another application*/
      FB09W00.FB09WRDS = "N"; /* reset request for data sw*/
      set FB09M001.CATOAP cursor, bold; /* Highlight*/
    else
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      FB09M001.XXXMODID = "300"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf20)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FB09M001"; /* for help*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0F";
    end

    if (converseVar.eventKey is pf12) /* PF12 - BUY SEL*/
      COMMAREA.CATOAP = "FB0Q";
    end

    if (converseVar.eventKey is pf20) /* PF20 - DRS SEL*/
      COMMAREA.CATOAP = "FB01";
    end

    FBXREC.CAUSERID = FB09W01.CAUSERID;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    FB09S01(); /* purge temp storage*/
    XSFBS01(); /* transfer to another appl*/
    FB09W00.FB09WRDS = "N"; /* reset request for data switch*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* pf15 pressed*/
   && FB09W00.FB09WPFK == "    ")  /* and pfk hold still blank*/
    FB09W00.FB09WPFK = "PF15";
  end

  if (converseVar.eventKey is pf16 /* pf16 pressed*/
   && FB09W00.FB09WPFK == "    ")  /* and pfk hold still blank*/
    FB09W00.FB09WPFK = "PF16";
  end

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7  /* scroll backward*/
   && converseVar.eventKey not pf8  /* scroll forward*/
   && converseVar.eventKey not pf9  /* style/color toggle*/
   && converseVar.eventKey not pf15 /* product freeze*/
   && converseVar.eventKey not pf16) /* master freezed*/
    converseLib.validationFailed(3); /* invalid key*/
    FB09M001.XXXMODID = "300"; /* program name*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end

    exit stack;
  end

end // end FB09300

// reset highlighted fields
Function FB09400()
  set FB09M001.FB09MBMO initialAttributes; /* buy date*/
  set FB09M001.XPLCD initialAttributes; /* product line code*/
  set FB09M001.XPCCD initialAttributes; /* product category*/
  set FB09M001.XPRCD initialAttributes; /* product type*/
  set FB09M001.CAUSERID initialAttributes; /* user id*/
  FB09W00.FB09WIXM = 1; /* initialise line index*/

  while (FB09W00.FB09WIXM < 15) /* for each screen line*/

    set FB09M001.FB09MSCD[FB09WIXM] initialAttributes;
    set FB09M001.SY1STNBR[FB09WIXM] initialAttributes;
    set FB09M001.SY2CLRID[FB09WIXM] initialAttributes;
    set FB09M001.XDMCD[FB09WIXM] initialAttributes;
    /* TCS CHANGE BEGINS*/
    if (FB09W00.FB09WSTC == "Y")
      set FB09M001.SY1SSTNM[FB09WIXM] initialAttributes;
    else
      set FB09M001.SY1SSTNM[FB09WIXM] yellow;
    end
    /* TCS CHANGE ENDS*/
    set FB09M001.FB-FRZ-BTL-DT[FB09WIXM] initialAttributes;
    set FB09M001.FB09WFTM[FB09WIXM] initialAttributes;
    set FB09M001.PT3YYMM[FB09WIXM] initialAttributes;
    set FB09M001.FBKRDFL[FB09WIXM] initialAttributes;
    set FB09M001.FBKCAFL[FB09WIXM] initialAttributes;
   /* *** TCS CHANGE AS PER SR FB1561 BEGINS ******/
   /* IF FB09W01.YPGCD(FB09WIXM) EQ '01';*/
     /* SET FB09M001.FBKRDFL(FB09WIXM) AUTOSKIP;*/
   /* ELSE;*/
     /* SET FB09M001.FBKRDFL(FB09WIXM) DEFINED;*/
   /* END;*/
   /* *** TCS CHANGE AS PER SR FB1561 ENDS ******/

    FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* next line*/
  end

  if (FB09M001.XPCCD == "?") /* list requested for prod cat*/
    FB09420(); /* pop up window*/
  end

  if (FB09M001.XPLCD == "?")
                                   /* list requested for prod line*/
    FB09410(); /* pop up window*/
  end


  if (FB09M001.XPRCD == "?")
                                   /* list requested for prod type*/
    FB09430(); /* pop up window*/
  end

end // end FB09400

// pop up window request
Function FB09410()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FB09M001.XXXMODID = "410"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate PF key not valid*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FB09M001.XPLCD == "?") /* line list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PROD LINE "; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB09M001.XPLCD = FB09W01.XPLCD; /* Restore prior code*/
    else
      FB09M001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/

    end

    set FB09M001.XPLCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB09M001.XXXMODID = "410"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end FB09410

// pop up window request
Function FB09420()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FB09M001.XXXMODID = "420"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate PF key not valid*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FB09M001.XPCCD == "?") /* line list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PROD CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB09M001.XPCCD = FB09W01.XPCCD; /* Restore prior code*/
    else
      FB09M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/

    end

    set FB09M001.XPCCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB09M001.XXXMODID = "420"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end FB09420

// pop up window request
Function FB09430()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FB09M001.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate PF key not valid*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FB09M001.XPRCD == "?") /* line list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PROD CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB09M001.XPRCD = FB09W01.XPRCD; /* Restore prior code*/
    else
      FB09M001.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/

    end

    set FB09M001.XPRCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB09M001.XXXMODID = "430"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end FB09430

// verify entered data
Function FB09500()
  XX0XS01();

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FB09M001.CAITEM > " ") /* Application data was entered*/
    FB09M001.XXXMODID = "500"; /* Module identification*/
    set FB09M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/

  if (FB09M001.FB09MBMO != FB09W01.FB09WBMO /* buy date changed*/
   || FB09M001.XPLCD != FB09W01.XPLCD       /* product line changed*/
   || FB09M001.XPCCD != FB09W01.XPCCD       /* category changed*/
   || FB09M001.XPRCD != FB09W01.XPRCD       /* type changed*/
   || FB09M001.CAUSERID != FB09W01.CAUSERID) /* user changed*/
    FB09W00.FB09WKCS = "Y"; /* key data changed*/
  else
    FB09W00.FB09WKCS = "N"; /* key data not changed*/
  end

   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/

  FB09W00.FB09WDCS = "N"; /* data didnt change*/
  FB09W00.FB09WSWU = "N"; /* data didnt change*/
  FB09W00.FB09WIXM = 1; /* line index*/

  while (FB09W00.FB09WIXM < 16 /* for each line*/
   && FB09W00.FB09WDCS == "N") /* or until data changed*/

  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
    FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
    if (FB09W00.FB09WKYM != 0)
      if (FB09W00.FB09WKYM > 6000)
        FB09W00.FB09WKCC = 19;
      else
        FB09W00.FB09WKCC = 20;
      end
    else
      FB09W00.FB09WKCC = 0;
    end
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
    if (FB09M001.FB09MSCD[FB09WIXM] != FB09W01.FB09WSCD[FB09WIXM]
     /**/
     /* ************************* Y2K OUT*/
     /* BEGIN ********************************/
     /**/
     /* OR FB09M001.PT3YYMM(FB09WIXM) NE*/
     /* FB09W01.PT3YYMM(FB09WIXM)*/
     /**/
     /* ************************* Y2K OUT END*/
     /* **********************************/
     /**/
     /**/
     /* ************************* Y2K IN BEGIN*/
     /* *********************************/
     /**/
     || FB09W00.FB09WKDT != FB09W01.PT3YYMM[FB09WIXM]
     /**/
     /* ************************* Y2K IN END*/
     /* ***********************************/
     /**/
     || FB09M001.FBKRDFL[FB09WIXM] != FB09W01.FBKRDFL[FB09WIXM])
      FB09W00.FB09WDCS = "Y"; /* data did change*/
      FB09W00.FB09WSWU = "Y"; /* data did change*/
    end

    FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* next line*/
  end

   /* -------------------------------------------------------------*/
   /* Check what edits apply*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter         
   && FB09W01.CAUSERID != FB09M001.CAUSERID /* user code changed*/
   && FB09W00.FB09WKCS != "N"               /* key changed*/
   && FB09W00.FB09WDCS != "N")              /* or data changed*/
    FB09M001.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(130); /* cannot change key and data*/
    exit stack;
  end

  if (converseVar.eventKey is enter)

    if (FB09W00.FB09WKCS == "Y" /* key changed*/
     && FB09W00.FB09WDCS == "Y") /* data changed*/
      FB09M001.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(130); /* cannot change key and data*/
    end

  /* begin tcs*/
    if (FB09M001.FB09MBLD != 0)
      FB09W00.FB09WYYM = FB09M001.FB09MBLD;
  /*  */
  /* *************************** Y2K IN BEGIN ******************************/
  /*  */
      if (FB09W00.FB09WYYM != 0)
        if (FB09W00.FB09WPTY > 60)
          FB09W00.FB09WPTC = 19;
        else
          FB09W00.FB09WPTC = 20;
        end
      else
        FB09W00.FB09WPTC = 0;
      end
   /*  */
  /*  */
   /* *************************** Y2K IN END *******************************/
   /*  */

      if (FB09W00.FB09WPTM < 1  /* month between 1*/
       || FB09W00.FB09WPTM > 12 /* and 12*/
       || FB09W00.FB09WYYM < XX0XWCYM)
   /*  */
   /* *************************** Y2K IN END *******************************/
   /*  */
        FB09M001.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(151); /* date out of range*/
        set FB09M001.FB09MBLD cursor, bold; /* highlight*/
      end

    end

  /* end tcs*/
    if (FB09W00.FB09WKCS == "N" /* key not changed*/
     && FB09W00.FB09WDCS == "N") /* data not changed*/
      FB09W00.FB09WIXM = 15; /* last line on screen*/

      while (FB09W00.FB09WIXM >= 1 /* Until top of screen*/
       && FB09M001.SY1STNBR[FB09WIXM] == " ") /* or an entry*/
        set FB09M001.FB09MSCD[FB09WIXM] skip, invisible;
        set FB09M001.SY1STNBR[FB09WIXM] skip, invisible;
        set FB09M001.SY2CLRID[FB09WIXM] skip, invisible;
        set FB09M001.XDMCD[FB09WIXM] skip, invisible;
        set FB09M001.SY1SSTNM[FB09WIXM] skip, invisible;
        /* SET FB09M001.SY2CLRAB(FB09WIXM) AUTOSKIP,DARK;*/
        set FB09M001.FB-FRZ-BTL-DT[FB09WIXM] skip, invisible;
        set FB09M001.FB09WFTM[FB09WIXM] skip, invisible;
        set FB09M001.PT3YYMM[FB09WIXM] skip, invisible;
        set FB09M001.FBKRDFL[FB09WIXM] skip, invisible;
        FB09W00.FB09WIXM = FB09W00.FB09WIXM - 1; /* previous entry*/
      end

      exit stack; /* display map*/
    end

  else /* a pf key was depressed*/

    if (FB09W00.FB09WKCS == "N" /* key not changed*/
     && FB09W00.FB09WDCS == "N") /* data not changed*/

      if (converseVar.eventKey is pf7 /* scroll back*/
       || converseVar.eventKey is pf8) /* scroll forward*/
        FB09510(); /* edit scroll amount*/
      end

    end

  end

  if (FB09W00.FB09WDCS == "Y" /* data changed*/
   && FB09W00.FB09WKCS == "N") /* key not changed*/

    if (converseVar.eventKey is pf7 /* scroll back*/
     || converseVar.eventKey is pf8) /* scroll forward*/
      FB09M001.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* cannot change data and scroll*/
    end

    if (converseVar.eventKey is enter)
      FB09540(); /* edit data*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If pf16 pressed, verify there is data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* master freeze requested*/
   && FB09W00.TA5TSQIX < 1)        /* and no data to display*/

    FB09M001.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(18); /* no data to display*/
    exit stack;
  end




  if (converseVar.validationMsgNum == 0)

    if (converseVar.eventKey is pf15) /* product freeze*/
      FB09520(); /* product freeze edits*/
    end

    if (converseVar.eventKey is pf16) /* master freeze*/
      FB09530(); /* master freeze edits*/
    end

  end

  if (FB09W00.FB09WDCS == "N" /* data didnt change*/
   && FB09W00.FB09WKCS == "Y") /* key changed*/
    FB09550(); /* edit key*/
  end

  FB09W00.FB09WIXM = 15; /* last line on screen*/

  while (FB09W00.FB09WIXM >= 1 /* Until top of screen*/
   && FB09M001.SY1STNBR[FB09WIXM] == " ") /* or an entry*/
    set FB09M001.FB09MSCD[FB09WIXM] skip, invisible;
    set FB09M001.SY1STNBR[FB09WIXM] skip, invisible;
    set FB09M001.SY2CLRID[FB09WIXM] skip, invisible;
    set FB09M001.XDMCD[FB09WIXM] skip, invisible;
    set FB09M001.SY1SSTNM[FB09WIXM] skip, invisible;
    /* SET FB09M001.SY2CLRAB(FB09WIXM) AUTOSKIP,DARK;*/
    set FB09M001.FB-FRZ-BTL-DT[FB09WIXM] skip, invisible;
    set FB09M001.FB09WFTM[FB09WIXM] skip, invisible;
    set FB09M001.PT3YYMM[FB09WIXM] skip, invisible;
    set FB09M001.FBKRDFL[FB09WIXM] skip, invisible;
    FB09W00.FB09WIXM = FB09W00.FB09WIXM - 1; /* previous entry*/
  end

  FB09W00.FB09MBLD = FB09M001.FB09MBLD; /* save default*/


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    FB09W00.FB09WRNS = "N"; /* reset warning switch*/
    FB09W00.FB09WPFK = "    "; /* reset pfk hold*/
    exit stack; /* Exit to display map*/
  end


  if (FB09W00.FB09WDCS == "Y" /* data changed*/
   && FB09W00.FB09WRNS == "Y") /* and displaying o/a warning*/
    FB09M001.XXXMODID = "500"; /* Module identification*/
    FB09W00.FB09WMCS = "Y"; /* format the map*/
    if (FB09W00.FB09WPFK == "PF15")
      converseLib.validationFailed(419); /* data chgs not allowed, pf15/pa2*/
    else
      converseLib.validationFailed(420); /* data chgs not allowed, pf16/pa2*/
    end
    exit stack;
  end



   /* ------------------------------------------------------------*/
   /* If warning switch has been set, redisplay message if*/
   /* necessary.*/
   /* ------------------------------------------------------------*/

  if (FB09W00.FB09WRNS == "Y") /* if warning displayed*/

    if (converseVar.eventKey is pf7 /* scroll backward*/
     || converseVar.eventKey is pf8) /* scroll forward*/

      FB09M001.XXXMODID = "500"; /* Module identification*/
      if (FB09W00.FB09WPFK == "PF15") /* product freeze*/
        converseLib.validationFailed(408); /* o/a in invalid whse, pf9 or pa2*/
        FB09W00.FB09WMCS = "Y"; /* format the map*/
        exit stack; /* and don't allow scroll request*/
      else
        converseLib.validationFailed(418); /* o/a in invalid whse, pf9 or pa2*/
        FB09W00.FB09WMCS = "Y"; /* format the map*/
        return; /* and allow scroll request*/
      end

    else

      if (converseVar.eventKey is pf15 /* continue with update*/
       || converseVar.eventKey is pf16)

        if (converseVar.eventKey is pf15 /* pf15 pressed (product freeze)*/
         && FB09W00.FB09WPFK == "PF16")  /* and in master freeze process*/
          FB09M001.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(418); /* o/a in invalid whse, pf16 or pa2*/
          exit stack;
        end

        if (converseVar.eventKey is pf16 /* pf16 pressed (master freeze)*/
         && FB09W00.FB09WPFK == "PF15")  /* and in product freeze process*/
          FB09M001.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(408); /* o/a in invalid whse, pf15 or pa2*/
          exit stack;
        end

      else
        FB09M001.XXXMODID = "500"; /* Module identification*/
        if (FB09W00.FB09WPFK == "PF15") /* product freeze*/
          converseLib.validationFailed(408); /* o/a in invalid whse, pf15 or pa2*/
        else
          converseLib.validationFailed(418); /* o/a in invalid whse, pf16 or pa2*/
        end
        exit stack;
      end
    end

  else

    /* ------------------------------------------------------------*/
     /* If PF15 or PF16 pressed,  check oa's to verify all*/
     /* oa's are in valid par whses.  if not, set a warning.*/
     /* Only check those products we are trying to freeze.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf15) /* product freeze*/

      FB09W00.FB09WIXM = 1; /* set index*/

      while (FB09W00.FB09WIXM <= 15) /* check every product on map*/
        if (FB09M001.FB09MSCD[FB09WIXM] == "S") /* if product selected*/
          FB09560(); /* check o/a and par*/
          /* *** TCS CHANGE AS PER SR FB1561 BEGINS ******/
          if (FB09W01.FBKCAFL[FB09WIXM] != " ")
            if (FB09M001.FB09MBLD == 0) /* no default b/l date*/
              if (FB09M001.PT3YYMM[FB09WIXM] == 0) /* no b/l date*/
                FB09W01.PT3YYMM[FB09WIXM] = FB09W00.FB09W-BEG-CCYYMM;
              else
                FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
                if (FB09W00.FB09WKYM != 0)
                  if (FB09W00.FB09WKYM > 6000)
                    FB09W00.FB09WKCC = 19;
                  else
                    FB09W00.FB09WKCC = 20;
                  end
                else
                  FB09W00.FB09WKCC = 0;
                end
                FB09W01.PT3YYMM[FB09WIXM] = FB09W00.FB09WKDT;
              end
            else
              FB09W00.FB09WKYM = FB09M001.FB09MBLD;
              if (FB09W00.FB09WKYM != 0)
                if (FB09W00.FB09WKYM > 6000)
                  FB09W00.FB09WKCC = 19;
                else
                  FB09W00.FB09WKCC = 20;
                end
              else
                FB09W00.FB09WKCC = 0;
              end
              FB09W01.PT3YYMM[FB09WIXM] = FB09W00.FB09WKDT;
            end
          end

          /* *** TCS CHANGE AS PER SR FB1561 ENDS ******/
        else
          FB09W01.FB09WERR[FB09WIXM] = "N"; /* set error flag 'n'*/
        end
        FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1;
      end

      FB09211(); /* update flags to temp storage*/

       /* if warning to display, save enterable data to redisplay*/

      if (FB09W00.FB09WRNS == "Y") /* if warning to display*/
        FB09W00.FB09WIXM = 1; /* init index*/
        while (FB09W00.FB09WIXM <= 15)
  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
          FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
          if (FB09W00.FB09WKYM != 0)
            if (FB09W00.FB09WKYM > 6000)
              FB09W00.FB09WKCC = 19;
            else
              FB09W00.FB09WKCC = 20;
            end
          else
            FB09W00.FB09WKCC = 0;
          end
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
          FB09W01.FB09WSCD[FB09WIXM] = FB09M001.FB09MSCD[FB09WIXM];
  /*  */
  /* ************************* Y2K OUT BEGIN ********************************/
  /*  */
  /* MOVE FB09M001.PT3YYMM(FB09WIXM)*/
  /* TO FB09W01.PT3YYMM(FB09WIXM);*/
  /*  */
  /* ************************* Y2K OUT END **********************************/
  /*  */
  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
          FB09W01.PT3YYMM[FB09WIXM] = FB09W00.FB09WKDT;
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
          FB09W01.FBKRDFL[FB09WIXM] = FB09M001.FBKRDFL[FB09WIXM];
          FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1;
        end
      end

    else
      if (converseVar.eventKey is pf16) /* pf16 pressed*/

        FB09W00.FB09WSTP = FB09W00.XXXTSPAG; /* save temp stor page*/
        FB09W00.XXXTSPAG = 1; /* init to first page*/

        while (FB09W00.XXXTSPAG <= FB09W00.TA5TSQIX) /* for each tsq page*/

          FB09S03(); /* get temp storage page*/

          FB09W00.FB09WIXM = 1; /* set index*/

          while (FB09W00.FB09WIXM <= 15 /* check every product on map*/
           && FB09W01.SY1STNBR[FB09WIXM] != "  ")

            if (FB09W01.FBKCAFL[FB09WIXM] == "N") /* where calc acpt fl = 'n'*/
              FB09560(); /* check o/a and par*/
            end
            FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1;
          end

          FB09211(); /* update flags to temp storage*/

          FB09W00.XXXTSPAG = FB09W00.XXXTSPAG + 1; /* get next page*/
        end

        FB09W00.XXXTSPAG = FB09W00.FB09WSTP;
        FB09S03(); /* get temp storage page*/
      end
    end
  end



   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error found*/

    if (converseVar.validationMsgNum == 408 /* o/a in invalid whse, pf15/pa2*/
     || converseVar.validationMsgNum == 418) /* o/a in invalid whse, pf16/pa2*/
      FB09W00.FB09WMCS = "Y"; /* format the map*/
    end

    exit stack;
  end


end // end FB09500

// edit scroll amounts
Function FB09510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB09W00.XXXTSPAG <= 1)      /* and no previous pages*/
    FB09M001.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB09W00.XXXTSPAG >= FB09W00.TA5TSQIX) /* and no more pages*/
    FB09M001.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

end // end FB09510

// edit product freeze
Function FB09520()
  FB09W00.FB09WIXM = 15;
                                   /* line index to bottom of screen*/
  FB09W00.FB09WFSS = "N"; /* no lines selected*/
  FB09W00.FB09WCSC = 0; /* count select codes*/

  while (FB09W00.FB09WIXM >= 1) /* for each line on screen*/

    if (FB09M001.FB09MSCD[FB09WIXM] == "S") /* product selected*/
      FB09W00.FB09WCSC = FB09W00.FB09WCSC + 1;

      if (FB09M001.FBKRDFL[FB09WIXM] != FB09W01.FBKRDFL[FB09WIXM])

        if (FB09M001.FBKRDFL[FB09WIXM] != "Y"
         && FB09M001.FBKRDFL[FB09WIXM] != "N")
          FB09M001.XXXMODID = "520"; /* process number*/
          converseLib.validationFailed(153); /* value must be y or n*/
          set FB09M001.FBKRDFL[FB09WIXM] cursor, bold; /* highlight*/
        end

      end

      /* IF FB09M001.PT3YYMM(FB09WIXM) EQ FB09W01.PT3YYMM(FB09WIXM);*/
           /* MOVE '520' TO FB09M001.XXXMODID  ; process number*/
           /* MOVE 214 TO EZEMNO        ;        b/l date must change*/
           /* SET FB09M001.PT3YYMM(FB09WIXM) CURSOR,BRIGHT; highlight*/
         /* ELSE                        ;        date changed*/
      FB09W00.FB09WYYM = FB09M001.PT3YYMM[FB09WIXM];
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
      if (FB09W00.FB09WYYM != 0)
        if (FB09W00.FB09WPTY > 60)
          FB09W00.FB09WPTC = 19;
        else
          FB09W00.FB09WPTC = 20;
        end
      else
        FB09W00.FB09WPTC = 0;
      end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
                                   /* to break out*/
   /* *** TCS CHANGE AS PER SR FB1561 BEGINS ******/
      if (FB09W00.FB09WYYM != FB09W01.PT3YYMM[FB09WIXM])

        if (FB09W00.FB09WPTM < 1  /* month between 1*/
         || FB09W00.FB09WPTM > 12 /* and 12*/
         || FB09W00.FB09WYYM < XX0XWCYM) /* yr lt curr*/
          FB09M001.XXXMODID = "520"; /* process number*/
          converseLib.validationFailed(151); /* date out of range*/
          set FB09M001.PT3YYMM[FB09WIXM] cursor, bold; /* highlight*/
        end

      end
   /* *** TCS CHANGE AS PER SR FB1561 ENDS ******/

      FB09W00.FB09WFSS = "Y"; /* a product selected*/
    end

    FB09W00.FB09WIXM = FB09W00.FB09WIXM - 1; /* previous line*/
  end
   /* IF FB09W00.FB09WCSC > 1         ; move than 1 select codes*/
    /* FB09W00.FB09WCSC = FB09W00.FB09WCSC + 1;*/
    /* MOVE '520' TO FB09M001.XXXMODID      ; process number*/
    /* MOVE 73 TO EZEMNO             ;    move than 1 select*/
   /* END ;*/

  if (FB09W00.FB09WFSS == "N") /* no prods on scrn selected*/
    FB09M001.XXXMODID = "520"; /* process number*/
    converseLib.validationFailed(154); /* gotta select something*/
  end
end // end FB09520

// edit master freeze
Function FB09530()
  FB09W00.FB09WIXM = 15; /* last line on screen*/

  while (FB09W00.FB09WIXM >= 1) /* for all products on screen*/

    if (FB09M001.FBKRDFL[FB09WIXM] != FB09W01.FBKRDFL[FB09WIXM])
      FB09M001.XXXMODID = "530"; /* process number*/
      converseLib.validationFailed(111); /* cant change data*/
      set FB09M001.FBKRDFL[FB09WIXM] cursor, bold; /* highlight*/
    end

    if (FB09M001.FB09MSCD[FB09WIXM] != " ") /* product selected*/
      FB09M001.XXXMODID = "530"; /* process number*/
      converseLib.validationFailed(111); /* cant change data*/
      set FB09M001.FB09MSCD[FB09WIXM] cursor, bold; /* highlight*/
    end

    if (converseVar.validationMsgNum == 0) /* no error*/
      if (FB09M001.FB-FRZ-BTL-DT[FB09WIXM] != 0 /* a freeze date exists*/
       && FB09W00.FB09WPFL == " ")              /* and first fime through*/
        FB09M001.XXXMODID = "530"; /* process number*/
        converseLib.validationFailed(261);
                                   /* pf16 again or pa2 to cancel*/
        FB09W00.FB09WPFL = "2"; /* 2nd time through*/
      end

    end

    if (converseVar.validationMsgNum != 0 /* an error*/
     && converseVar.validationMsgNum != 261) /* hit pf16 again*/
      FB09W00.FB09WPFL = " "; /* still first time through*/
    end

    FB09W00.FB09WIXM = FB09W00.FB09WIXM - 1; /* previous screen line*/
  end

end // end FB09530

// edit data
Function FB09540()
  FB09W00.FB09WIXM = 15;
  FB09W00.FB09WFSS = "N";

  while (FB09W00.FB09WIXM >= 1)

    /* ------------------------------------------------------------*/
     /* if round flag is entered, it must be 'y' or 'n'.  also,*/
     /* that product must be selected (with an s)*/
    /* ------------------------------------------------------------*/

    if (FB09M001.FBKRDFL[FB09WIXM] != FB09W01.FBKRDFL[FB09WIXM])

      if (FB09M001.FBKRDFL[FB09WIXM] != "Y"
       && FB09M001.FBKRDFL[FB09WIXM] != "N")
        FB09M001.XXXMODID = "540";
        converseLib.validationFailed(153);
        set FB09M001.FBKRDFL[FB09WIXM] cursor, bold;
      end

      if (FB09M001.FB09MSCD[FB09WIXM] != "S")
        FB09M001.XXXMODID = "540";
        converseLib.validationFailed(118);
        set FB09M001.FB09MSCD[FB09WIXM] cursor, bold;
             /* SET FB09M001.FBKRDFL(FB09WIXM) BRIGHT;*/
      end

    end

    /* ------------------------------------------------------------*/
     /* if b/l date is entered, the month must be between 1 and 12*/
     /* and the year may not be less than the current year*/
    /* ------------------------------------------------------------*/

  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
    FB09W00.FB09WYYM = FB09M001.PT3YYMM[FB09WIXM];
    if (FB09W00.FB09WYYM != 0)
      if (FB09W00.FB09WPTY > 60)
        FB09W00.FB09WPTC = 19;
      else
        FB09W00.FB09WPTC = 20;
      end
    else
      FB09W00.FB09WPTC = 0;
    end
    if (FB09W00.FB09WYYM != FB09W01.PT3YYMM[FB09WIXM])
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* IF FB09M001.PT3YYMM(FB09WIXM) NE FB09W01.PT3YYMM(FB09WIXM);*/
  /* MOVE FB09M001.PT3YYMM(FB09WIXM) TO FB09W00.FB09WYYM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */

      if (FB09W00.FB09WPTM < 1  /* month between 1*/
       || FB09W00.FB09WPTM > 12 /* and 12*/
       /**/
       /* *************************** Y2K OUT*/
       /* BEGIN ******************************/
       /**/
       /* OR FB09W00.FB09WPTY LT XX0XWZYY;*/
       /* /* yr lt curr*/
       /**/
       /* *************************** Y2K OUT*/
       /* END ********************************/
       /**/
       /**/
       /* *************************** Y2K IN*/
       /* BEGIN *******************************/
       /**/
       || FB09W00.FB09WYYM < XX0XWCYM)
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
        FB09M001.XXXMODID = "540"; /* process number*/
        converseLib.validationFailed(151); /* date out of range*/
        set FB09M001.PT3YYMM[FB09WIXM] cursor, bold; /* highlight*/
      end

    end

    /* ------------------------------------------------------------*/
     /* if select code is entered, it must be 's'.*/
    /* ------------------------------------------------------------*/

    if (FB09M001.FB09MSCD[FB09WIXM] != " ") /* sel cd not spaces*/

      if (FB09M001.FB09MSCD[FB09WIXM] != "S") /* sel cd not s*/
        FB09M001.XXXMODID = "540"; /* process number*/
        converseLib.validationFailed(41); /* only s valid*/
        set FB09M001.FB09MSCD[FB09WIXM] cursor, bold; /* highlight*/
      end

    end

    FB09W00.FB09WIXM = FB09W00.FB09WIXM - 1; /* previous line*/
  end


  if (FB09M001.FB09MBLD != 0)
    FB09W00.FB09WYYM = FB09M001.FB09MBLD;
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
    if (FB09W00.FB09WYYM != 0)
      if (FB09W00.FB09WPTY > 60)
        FB09W00.FB09WPTC = 19;
      else
        FB09W00.FB09WPTC = 20;
      end
    else
      FB09W00.FB09WPTC = 0;
    end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */

    if (FB09W00.FB09WPTM < 1  /* month between 1*/
     || FB09W00.FB09WPTM > 12 /* and 12*/
     /**/
     /* *************************** Y2K OUT*/
     /* BEGIN ******************************/
     /**/
     /* OR FB09W00.FB09WPTY LT XX0XWZYY;*/
     /* /* yr lt curr*/
     /**/
     /* *************************** Y2K OUT*/
     /* END ********************************/
     /**/
     /**/
     /* *************************** Y2K IN*/
     /* BEGIN *******************************/
     /**/
     || FB09W00.FB09WYYM < XX0XWCYM)
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
      FB09M001.XXXMODID = "540"; /* process number*/
      converseLib.validationFailed(151); /* date out of range*/
      set FB09M001.FB09MBLD cursor, bold; /* highlight*/
    end

  end

  if (FB09W00.FB09WFSS == "M") /* multi prods selected*/
    FB09M001.XXXMODID = "540"; /* process number*/
    converseLib.validationFailed(136); /* cant sel more than 1*/
    FB09W00.FB09WIXM = 1; /* first line*/

    while (FB09W00.FB09WIXM < 16) /* for each line*/

      if (FB09M001.FB09MSCD[FB09WIXM] == "S") /* line selected*/
        set FB09M001.FB09MSCD[FB09WIXM] cursor, bold; /* highlight*/
      end

      FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* next line*/
    end

  end

end // end FB09540

// edit key
Function FB09550()

  if (FB09M001.XPCCD != FB09W01.XPCCD
   /* product line code changed*/
   && FB09M001.XPCCD != "  ") /* category is optional*/
    if (FB09M001.XPCCD in XPCTBL.XPCCD)
                                   /* entered value in table*/
      /* next sentence*/
    else
      FB09M001.XXXMODID = "550"; /* process number*/
      converseLib.validationFailed(10); /* invalid value entered*/
      set FB09M001.XPCCD cursor, bold; /* highlight*/
    end

  end

  if (FB09M001.XPLCD != FB09W01.XPLCD
   /* product line code changed*/
   || FB09M001.XPLCD == "  ") /* or spaces*/
    if (FB09M001.XPLCD in XPLTBL.XPLCD)
                                   /* entered value in table*/
      /* next sentence*/
    else
      FB09M001.XXXMODID = "550"; /* process number*/
      converseLib.validationFailed(10); /* invalid value entered*/
      set FB09M001.XPLCD cursor, bold; /* highlight*/
    end

  end


  if (FB09M001.XPRCD != FB09W01.XPRCD
   /* product type code changed*/
   && FB09M001.XPRCD != "  ") /* and not spaces*/
    if (FB09M001.XPRCD in XPRTBL.XPRCD)
                                   /* entered value in table*/
      /* next sentence*/
    else
      FB09M001.XXXMODID = "550"; /* process number*/
      converseLib.validationFailed(10); /* invalid value entered*/
      set FB09M001.XPRCD cursor, bold; /* highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if buy date was entered, the month must be between 1 and*/
   /* 12, and the year may not be less than the current year.*/
   /* ------------------------------------------------------------*/

  if (FB09M001.FB09MBMO != FB09W01.FB09WBMO) /* buy date was changed*/
    FB09W00.FB09WYYM = FB09M001.FB09MBMO; /* to separate*/
  /*  */
  /* ************************** Y2K IN BEGIN ********************************/
  /*  */
    if (FB09W00.FB09WYYM != 0)
      if (FB09W00.FB09WPTY > 60)
        FB09W00.FB09WPTC = 19;
      else
        FB09W00.FB09WPTC = 20;
      end
    else
      FB09W00.FB09WPTC = 0;
    end
  /*  */
  /* ************************** Y2K IN END **********************************/
  /*  */

    if (FB09W00.FB09WPTM < 1  /* month less than 1*/
     || FB09W00.FB09WPTM > 12 /* or greater than 12*/
     /**/
     /* ************************** Y2K OUT*/
     /* BEGIN *******************************/
     /**/
     /* OR FB09W00.FB09WPTY LT*/
     /* XX0XW01.XX0XWZYY;/* year less than*/
     /* current*/
     /**/
     /* ************************** Y2K OUT END*/
     /* *********************************/
     /**/
     /**/
     /* ************************** Y2K IN*/
     /* BEGIN ********************************/
     /**/
     || FB09W00.FB09WYYM < XX0XW01.XX0XWCYM) /* year less than current*/
  /*  */
  /* ************************** Y2K IN END **********************************/
  /*  */
      FB09M001.XXXMODID = "550"; /* process number*/
      converseLib.validationFailed(151); /* date out of range*/
      set FB09M001.FB09MBMO cursor, bold; /* highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* set the key, select a row from dprodg.vsuser01, scheduler*/
   /* table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* initialise record*/
  PG1REC.XXXUSER = FB09M001.CAUSERID; /* user id*/
  PG1REC.XGPCD = "02"; /* gpc code*/
  PG1REC.PG1SC4CD = "**"; /* sched/avail code*/
  PG1REC.PG1FCTCD = "**"; /* forecaster code*/
  FB09110(); /* get schedule code*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no row found*/
    FB09M001.XXXMODID = "550"; /* Module identification*/
    set FB09M001.CAUSERID cursor, bold; /* highlight, place cursor*/
    converseLib.validationFailed(10); /* invalid data*/
  end

end // end FB09550

// check o/a's and par whses
Function FB09560()
   /* ------------------------------------------------------------*/
   /* initialize internal whse table.*/
   /* ------------------------------------------------------------*/

  move "  " to FB09W00.XWHCD[1] for all; /* init whses*/

   /* ------------------------------------------------------------*/
   /* declare cursor for iomod fb1510.  Fetch all whses for any*/
   /* o/a's and place in internal array.*/
   /* ------------------------------------------------------------*/

  set FB09W03 empty; /* initialize table*/

  FB09W03.SY1STNBR = FB09W01.SY1STNBR[FB09WIXM]; /* style*/
  FB09W03.SY2CLRID = FB09W01.SY2CLRID[FB09WIXM]; /* color*/
  FB09W03.XDMCD = FB09W01.XDMCD[FB09WIXM]; /* dimension*/
  FB09W00.FB09WKYM = FB09W00.FB09WBMO;
  /*  */
  /* **************************** Y2K OUT BEGIN *****************************/
  /*  */
  /* IF FB09W00.FB09WKYM LE 89;*/
  /*  */
  /* **************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  if (FB09W00.FB09WKYM != 0)
    if (FB09W00.FB09WKYM <= 6000)
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
      FB09W00.FB09WKCC = 20;
    else
      FB09W00.FB09WKCC = 19;
    end
  else
    FB09W00.FB09WKCC = 0;
  end

  FB09W03.PA1BUYMO = FB09W00.FB09WKDT; /* buy month*/

   /* ------------------------------------------------------------*/
   /* open cursor for iomod fb1510.*/
   /* fetch whse codes until end of cursor; close cursor*/
   /* ------------------------------------------------------------*/

  FB09W00.FB09WSWC = "N";
  FB09W00.FB09WIX1 = 1;

  FB09561(); /* open pahdr/pawrk csr*/

  FB09562(); /* fetch pahdr/pawrk csr*/

  while (FB09W00.FB09WSWC == "N" /* until end of cursor*/
   && FB09W00.FB09WIX1 <= 10) /* or end of table*/

    FB09W00.XWHCD[FB09WIX1] = FB09W03.XWHCD;
    FB09W00.FB09WIX1 = FB09W00.FB09WIX1 + 1; /* increment table*/

    FB09562(); /* fetch pahdr/pawrk csr*/

  end

  FB09563(); /* close cursor*/



   /* ------------------------------------------------------------*/
   /* using the table of whses (from o/a's), check for a par*/
   /* record for each whse.  if not found, set warning message*/
   /* ------------------------------------------------------------*/

  FB09W00.FB09WIX1 = 1; /* init index*/

  while (FB09W00.FB09WIX1 <= 10
   && FB09W00.XWHCD[FB09WIX1] != " ") /* for all valid whse codes*/

    set PT5REC empty; /* initialize record*/

    PT5REC.XGPCD = "02"; /* gpc*/
    PT5REC.SY1STNBR = FB09W01.SY1STNBR[FB09WIXM]; /* style*/
    PT5REC.SY2CLRID = FB09W01.SY2CLRID[FB09WIXM]; /* color*/
    PT5REC.XDMCD = FB09W01.XDMCD[FB09WIXM]; /* dimension*/
    PT5REC.PC2INSEG = "000"; /* iseg*/
    PT5REC.XPGCD = "00"; /* package type*/
    PT5REC.XUMCD = "01"; /* unit of measure*/
    PT5REC.XQACD = "01"; /* quality*/
    FB09W04.XWHCD[1] = FB09W00.XWHCD[FB09WIX1]; /* beg whse*/
    FB09W04.XWHCD[2] = FB09W00.XWHCD[FB09WIX1]; /* end whse*/
    if (converseVar.eventKey is pf15) /* product freeze*/

      if (FB09M001.FB09MBLD == 0) /* no default b/l date*/
        if (FB09M001.PT3YYMM[FB09WIXM] == 0) /* no b/l date*/
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE FB09W00.FB09WBMO TO PT5REC.PT3YYMM;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
          PT5REC.PT3YYMM = FB09W00.FB09W-BEG-CCYYMM;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
        else
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE FB09M001.PT3YYMM(FB09WIXM) TO PT5REC.PT3YYMM;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
          FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
          if (FB09W00.FB09WKYM != 0)
            if (FB09W00.FB09WKYM > 6000)
              FB09W00.FB09WKCC = 19;
            else
              FB09W00.FB09WKCC = 20;
            end
          else
            FB09W00.FB09WKCC = 0;
          end
          PT5REC.PT3YYMM = FB09W00.FB09WKDT;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
        end
      else
        FB09W00.FB09WKYM = FB09M001.FB09MBLD;
        if (FB09W00.FB09WKYM != 0)
          if (FB09W00.FB09WKYM > 6000)
            FB09W00.FB09WKCC = 19;
          else
            FB09W00.FB09WKCC = 20;
          end
        else
          FB09W00.FB09WKCC = 0;
        end
        PT5REC.PT3YYMM = FB09W00.FB09WKDT;
      end

    else
      if (converseVar.eventKey is pf16) /* master freeze*/

   /* *** TCS CHANGE AS PER SR FB1561 BEGINS ******/
        if (FB09M001.FB09MBLD == 0) /* no default b/l date*/
          if (FB09W01.PT3YYMM[FB09WIXM] == 0) /* no default b/l date*/
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE FB09W00.FB09WBMO TO PT5REC.PT3YYMM;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
            PT5REC.PT3YYMM = FB09W00.FB09W-BEG-CCYYMM;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
          else
            PT5REC.PT3YYMM = FB09W01.PT3YYMM[FB09WIXM];
          end
        else
   /* *** TCS CHANGE AS PER SR FB1561 ENDS ******/
  /*  */
  /* ***************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* MOVE FB09M001.FB09MBLD TO PT5REC.PT3YYMM;*/
  /*  */
  /* ***************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* ***************************** Y2K IN BEGIN *****************************/
  /*  */
          FB09W00.FB09WKYM = FB09M001.FB09MBLD;
          if (FB09W00.FB09WKYM != 0)
            if (FB09W00.FB09WKYM > 6000)
              FB09W00.FB09WKCC = 19;
            else
              FB09W00.FB09WKCC = 20;
            end
          else
            FB09W00.FB09WKCC = 0;
          end
          PT5REC.PT3YYMM = FB09W00.FB09WKDT;
  /*  */
  /* ***************************** Y2K IN END *******************************/
  /*  */
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* check for existence of par record.  only need to prove 1*/
     /* record exists, so do not fetch until end of cursor. 1 fetch*/
     /* is enough.*/
    /* ------------------------------------------------------------*/

    FB09564(); /* open csr dmodel.vfbasm01*/
    FB09565(); /* fetch record dmodel.vfbasm01*/

    if (SQLCA.VAGen_SQLCODE == +100)
      FB09W01.FB09WERR[FB09WIXM] = "Y"; /* set error flag*/
      FB09W00.FB09WRNS = "Y"; /* set warning flag*/
      FB09M001.XXXMODID = "560"; /* module identification*/
      if (converseVar.eventKey is pf15)
        converseLib.validationFailed(408); /* o/a exists in invalid par whse,*/
                                   /* pf15/pa2*/
      else
        converseLib.validationFailed(418); /* o/a exists in invalid par whse,*/
                                   /* pf16/pa2*/
      end

    else
      FB09W01.FB09WERR[FB09WIXM] = "N"; /* set error flag 'n'*/
    end

    FB09566(); /* fetch record dmodel.vfbasm01*/

    FB09W00.FB09WIX1 = FB09W00.FB09WIX1 + 1; /* increment*/

  end

end // end FB09560

// select csr join pahdr/pawrk
Function FB09561()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FBIREC empty;
  FBIREC.FBI-FB09-SUB-GROUP = FB09W03.FB09W3KY;
  try
    call "FB1510" ("S1", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CSR FOR JOIN ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB09W03.FB09W3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09561

// fetch csr join pahdr/pawrk
Function FB09562()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FBIREC empty;
  try
    call "FB1510" ("N1", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  FB09W03.FB09W3KY = FBIREC.FBI-FB09-SUB-GROUP;

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* or row not found*/
        FB09W00.FB09WSWC = "Y"; /* cursor switch*/
        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "562"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH CSR FOR JOIN ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB09W03.FB09W3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09562

// close csr join pahdr/pawrk
Function FB09563()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FBIREC empty;
  FBIREC.FBI-FB09-SUB-GROUP = FB09W03.FB09W3KY;
  try
    call "FB1510" ("C1", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "563"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CSR FOR JOIN  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB09W03.FB09W3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09563

// open dmodel.vfbasm01 csr
Function FB09564()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  FB09W04.FB09WFUN = "S1"; /* function*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* CALL IO3110 FB09W04,SQLCA,PT5REC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  try
    call "VFBASM04" (FB09W04, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "564"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09564

// fetch dmodel.vfbasm01 csr
Function FB09565()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB09W04.FB09WFUN = "N1"; /* function*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* CALL IO3110 FB09W04,SQLCA,PT5REC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  try
    call "VFBASM04" (FB09W04, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or empty return*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "565"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH  CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09565

// close dmodel.vfbasm01 csr
Function FB09566()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  FB09W04.FB09WFUN = "C1"; /* function*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* CALL IO3110 FB09W04,SQLCA,PT5REC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  try
    call "VFBASM04" (FB09W04, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB09M001.XXXMODID = "566"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB09566

// process valid input request
Function FB09600()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FB09M001.XXXMODID = "600"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* if key has changed, clear out working storage, purge temp*/
   /* storage, set the switches to obtain data and format the map*/
   /* ------------------------------------------------------------*/

  if (FB09W00.FB09WKCS == "Y"
   || FB09W01.CAUSERID != FB09M001.CAUSERID)
    set FB09W01 empty;
    set FB09W02 empty;
    FB09S01();
    FB09W00.FB09WRDS = "Y";
    FB09W00.FB09WMCS = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* if scroll backward was requested, decrement the page index,*/
   /* set the format map switch, and return to the performing*/
   /* process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FB09W00.XXXTSPAG = FB09W00.XXXTSPAG - 1;
    FB09W00.FB09WMCS = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* if scroll forward was requested, increment the page index,*/
   /* set the format map switch, and return to the performing*/
   /* process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    FB09W00.XXXTSPAG = FB09W00.XXXTSPAG + 1;
    FB09W00.FB09WMCS = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* if a product freeze, search through the map to find the*/
   /* product selected.  it will be on this page, because of an*/
   /* edit earlier*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* product freeze*/

    FB09W00.FB09WSTP = FB09W00.XXXTSPAG; /* Save current page*/

    if (TA3REC.TA3RGNID == "03") /* prod environment*/
      FB09610(); /* format prod batch sub*/
    else
      FB09620(); /* format test batch sub*/
    end

    FB09W00.FB09WIXM = 1; /* initialise the index*/

    while (FB09W00.FB09WIXM <= 15) /* clear selected fields*/
      if (FB09M001.FB09MSCD[FB09WIXM] != " ")
        FB09M001.FB09MSCD[FB09WIXM] = " ";
        FB09W01.FB09WSCD[FB09WIXM] = " ";
  /*  */
  /* ****************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* MOVE FB09M001.PT3YYMM(FB09WIXM) TO FB09W01.PT3YYMM(FB09WIXM);*/
  /*  */
  /* ****************************** Y2K OUT END *****************************/
  /*  */
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
        FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
        if (FB09W00.FB09WKYM != 0)
          if (FB09W00.FB09WKYM > 6000)
            FB09W00.FB09WKCC = 19;
          else
            FB09W00.FB09WKCC = 20;
          end
        else
          FB09W00.FB09WKCC = 0;
        end
        FB09W01.PT3YYMM[FB09WIXM] = FB09W00.FB09WKDT;
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
        FB09W01.FBKRDFL[FB09WIXM] = FB09M001.FBKRDFL[FB09WIXM];
      end
      FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* to the proper value for*/
    end /* the product selected*/

    FB09W00.FB09WPFK = "    "; /* re-init pfkey hold*/

  end

  if (converseVar.eventKey is pf15) /* product freeze*/
    FB09W00.FB09WIXM = 1; /* initialise the index*/

    while (FB09W00.FB09WIXM < 15 /* the purpose of this loop*/
     && FB09M001.FB09MSCD[FB09WIXM] == "S") /* is clear select codes*/
      FB09M001.FB09MSCD[FB09WIXM] = " ";
      FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* to the proper value for*/
    end /* the product selected*/
  end

   /* ------------------------------------------------------------*/
   /* if a master freeze, all the products in temp storage must*/
   /* be obtained and written out on the jcl parm card(s)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* master freeze*/
    FB09W00.FB09WPFL = " "; /* first time again*/
    FB09W00.FB09WSTP = FB09W00.XXXTSPAG; /* Save current page*/

    if (TA3REC.TA3RGNID == "03") /* prod environment*/
      FB09610(); /* format prod batch sub*/
    else
      FB09620(); /* format test batch sub*/
    end

    FB09W00.XXXTSPAG = FB09W00.FB09WSTP; /* Restore current page*/
    FB09W00.FB09WMCS = "Y"; /* Format map*/
    FB09W00.FB09WPFK = "    "; /* re-init pfkey hold*/
  end

  FB09W00.FB09WRNS = "N"; /* reset warning switch*/
  set FB09M001.FB09MSCD[1] cursor; /* cursor to first select*/
  return;
                                   /* retn to performing process*/
end // end FB09600

// format for prod batch submit
Function FB09610()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB09W00.FB09WTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB09W00.FB09WTIX > 0) /* Until end of table*/

    if (converseVar.eventKey is pf15) /* product freeze*/

      if (FB09TP1.TARTYPE[FB09WTIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format region parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARTYPE[TA6INDEX] = FB09TP1.TARTYPE[FB09WTIX]; /* Type*/

        FB09611(); /* formats parm jcl*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB09TP1.TARJCL[FB09WTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB09TP1.TARTYPE[FB09WTIX]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    if (converseVar.eventKey is pf16) /* master freeze*/

      if (FB09TP1.TARTYPE[FB09WTIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format region parameters*/
        /* ------------------------------------------------------------*/

        FB09W00.FB09WVPS = "N"; /* set valid parm to 'n'*/

        TA6REC.TARTYPE[TA6INDEX] = FB09TP1.TARTYPE[FB09WTIX]; /* Type*/

        FB09611(); /* formats parm jcl*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB09TP1.TARJCL[FB09WTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB09TP1.TARTYPE[FB09WTIX]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB09TP1.TARJCL[FB09WTIX] == "/*EOF") /* End of table*/

      FB09W00.FB09WTIX = 0; /* Indicate end of table*/

    else

      FB09W00.FB09WTIX = FB09W00.FB09WTIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* if pf15, submit job.*/
   /* if pf16, verify there are valid products to submit.*/
     /* if there are, submit job, else display error msg.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* product freeze*/
    FB09612(); /* Submit the JCL*/
    FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
    return;
  end

  if (converseVar.eventKey is pf16) /* master freeze*/
    if (FB09W00.FB09WVPS == "Y") /* if valid parms*/
      FB09612(); /* Submit the JCL*/
      FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
    else
      converseLib.validationFailed(404); /* calc accepted all prods*/
      FB09M001.XXXMODID = "610"; /* module identification*/
    end
  end


end // end FB09610

// format parm jcl
Function FB09611()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/

  set FB09W02 empty;
  FB09W02.FB09WCMT = "//*"; /* indicate a comment jcl card*/

  if (converseVar.eventKey is pf15) /* product freeze*/

    FB09W00.FB09WIXM = 1; /* init index*/

    while (FB09W00.FB09WIXM <= 15 /* for all products on page*/
     && FB09W01.SY1STNBR[FB09WIXM] != "      ") /* entry on page*/

      if (FB09M001.FB09MSCD[FB09WIXM] == "S") /* product selected*/

        FB09W02.FB8BUYDT = FB09W00.FB09WBDT;
        FB09W02.FBKRDFL = FB09M001.FBKRDFL[FB09WIXM];

        if (FB09M001.FB09MBLD == 0) /* no default B/L date*/
          if (FB09M001.PT3YYMM[FB09WIXM] == 0) /* no b/l date*/
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE FB09W00.FB09WBMO TO FB09W02.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
            FB09W02.PT3YYMM = FB09W00.FB09W-BEG-CCYYMM;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
          else
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE FB09M001.PT3YYMM(FB09WIXM) TO FB09W02.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
            FB09W00.FB09WKYM = FB09M001.PT3YYMM[FB09WIXM];
            if (FB09W00.FB09WKYM != 0)
              if (FB09W00.FB09WKYM > 6000)
                FB09W00.FB09WKCC = 19;
              else
                FB09W00.FB09WKCC = 20;
              end
            else
              FB09W00.FB09WKCC = 0;
            end
            FB09W02.PT3YYMM = FB09W00.FB09WKDT;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
          end
        else
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE FB09M001.FB09MBLD TO FB09W02.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
          FB09W00.FB09WKYM = FB09M001.FB09MBLD;
          if (FB09W00.FB09WKYM != 0)
            if (FB09W00.FB09WKYM > 6000)
              FB09W00.FB09WKCC = 19;
            else
              FB09W00.FB09WKCC = 20;
            end
          else
            FB09W00.FB09WKCC = 0;
          end
          FB09W02.PT3YYMM = FB09W00.FB09WKDT;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
        end

        FB09W02.SY1STNBR = FB09M001.SY1STNBR[FB09WIXM];
        FB09W02.SY2CLRID = FB09M001.SY2CLRID[FB09WIXM];
        FB09W02.XDMCD = FB09M001.XDMCD[FB09WIXM];
        FB09W02.FB09WCDT = XX0XW01.XX0XWDAT; /* current date*/
        TA6REC.TARJCL[TA6INDEX] = FB09W02.FB09WPRM; /* jcl*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


         /* MOVE FB09W02.FB09WPRR TO TA6REC.TARJCL(TA6INDEX); prm cmnt*/
         /* TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; Increment parms idx*/
      end
      FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1;
    end

  end



  if (converseVar.eventKey is pf16) /* master freeze*/
    set FB09W02 empty;
    FB09W02.FB09WCMT = "//*"; /* indicate a comment jcl card*/
    FB09W00.XXXTSPAG = 1; /* get first page*/
    FB09W02.FB8BUYDT = FB09W00.FB09WBDT;

    while (FB09W00.XXXTSPAG <= FB09W00.TA5TSQIX) /* for each page in tsq*/
      FB09S03(); /* get temp stor page*/
      FB09W00.FB09WIXM = 1; /* first line on page*/

      while (FB09WIXM <= 15 /* for each line on the page*/
       && FB09W01.SY1STNBR[FB09WIXM] != "      ") /* and entry on line*/

             /* if the calc not accepted, can master freeze product*/
        if (FB09W01.FBKCAFL[FB09WIXM] == "N" /* calc not accepted*/
         || FB09W01.FBKCAFL[FB09WIXM] == " ") /* fqtb record not found*/

          FB09W00.FB09WVPS = "Y"; /* set valid parm switch*/

          /* MOVE ' ' TO FB09W02.FBKRDFL;    /* always gather defaults*/

   /* *** TCS CHANGE AS PER SR FB1561 BEGINS ******/
          if (FB09W01.FBKCAFL[FB09WIXM] == "N")
            if (FB09M001.FB09MBLD == 0) /* no default B/L date*/
              if (FB09W01.PT3YYMM[FB09WIXM] == 0) /* no b/l date*/
                FB09W02.PT3YYMM = FB09W00.FB09W-BEG-CCYYMM;
              else
                FB09W02.PT3YYMM = FB09W01.PT3YYMM[FB09WIXM];
              end
            else
              FB09W00.FB09WKYM = FB09M001.FB09MBLD;
              if (FB09W00.FB09WKYM != 0)
                if (FB09W00.FB09WKYM > 6000)
                  FB09W00.FB09WKCC = 19;
                else
                  FB09W00.FB09WKCC = 20;
                end
              else
                FB09W00.FB09WKCC = 0;
              end
              FB09W02.PT3YYMM = FB09W00.FB09WKDT;
            end
          else
   /* *** TCS CHANGE AS PER SR FB1561 ENDS ******/
            if (FB09M001.FB09MBLD == 0) /* no default B/L date*/
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE FB09W00.FB09WBMO TO FB09W02.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
              FB09W02.PT3YYMM = FB09W00.FB09W-BEG-CCYYMM;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
            else
  /*  */
  /* *************************** Y2K OUT BEGIN ******************************/
  /*  */
  /* MOVE FB09M001.FB09MBLD TO FB09W02.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END ********************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
              FB09W00.FB09WKYM = FB09M001.FB09MBLD;
              if (FB09W00.FB09WKYM != 0)
                if (FB09W00.FB09WKYM > 6000)
                  FB09W00.FB09WKCC = 19;
                else
                  FB09W00.FB09WKCC = 20;
                end
              else
                FB09W00.FB09WKCC = 0;
              end
              FB09W02.PT3YYMM = FB09W00.FB09WKDT;
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
            end
          end

          FB09W02.SY1STNBR = FB09W01.SY1STNBR[FB09WIXM];
          FB09W02.SY2CLRID = FB09W01.SY2CLRID[FB09WIXM];
          FB09W02.FBKRDFL = FB09W01.FBKRDFL[FB09WIXM];
          FB09W02.XDMCD = FB09W01.XDMCD[FB09WIXM];
          FB09W02.FB09WCDT = XX0XW01.XX0XWDAT; /* current date*/
          TA6REC.TARJCL[TA6INDEX] = FB09W02.FB09WPRM;

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        end
        FB09W00.FB09WIXM = FB09W00.FB09WIXM + 1; /* increment line index*/

      end

      FB09W00.XXXTSPAG = FB09W00.XXXTSPAG + 1; /* next temp stor page*/
    end

  end





end // end FB09611

// submit batch jcl
Function FB09612()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* display fancy messages*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB09M001.XXXMODID = "612"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB09M001.XXXMODID = "612"; /* module identification*/
  end

  FB09W00.XXXTSPAG = FB09W00.FB09WSTP; /* return to saved page*/
  FB09W00.FB09WMCS = "Y"; /* format map*/
  exit stack; /* Exit to display map*/


end // end FB09612

// format for test batch submit
Function FB09620()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB09W00.FB09WTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB09W00.FB09WTIX > 0) /* Until end of table*/

    if (converseVar.eventKey is pf15) /* product freeze*/

      if (FB09T01.TARTYPE[FB09WTIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format region parameters*/
        /* ------------------------------------------------------------*/

        TA6REC.TARTYPE[TA6INDEX] = FB09T01.TARTYPE[FB09WTIX]; /* Type*/

        FB09611(); /* formats parm jcl*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB09T01.TARJCL[FB09WTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB09T01.TARTYPE[FB09WTIX]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    if (converseVar.eventKey is pf16) /* master freeze*/

      if (FB09T01.TARTYPE[FB09WTIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format region parameters*/
        /* ------------------------------------------------------------*/

        FB09W00.FB09WVPS = "N"; /* set valid parm to 'n'*/

        TA6REC.TARTYPE[TA6INDEX] = FB09T01.TARTYPE[FB09WTIX]; /* Type*/

        FB09611(); /* formats parm jcl*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB09T01.TARJCL[FB09WTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB09T01.TARTYPE[FB09WTIX]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB09T01.TARJCL[FB09WTIX] == "/*EOF") /* End of table*/

      FB09W00.FB09WTIX = 0; /* Indicate end of table*/

    else

      FB09W00.FB09WTIX = FB09W00.FB09WTIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* if pf15, submit job.*/
   /* if pf16, verify there are valid products to submit.*/
     /* if there are, submit job, else display error msg.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* product freeze*/
    FB09612(); /* Submit the JCL*/
    FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
    return;
  end

  if (converseVar.eventKey is pf16) /* master freeze*/
    if (FB09W00.FB09WVPS == "Y") /* if valid parms*/
      FB09612(); /* Submit the JCL*/
      FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
    else
      converseLib.validationFailed(404); /* calc accepted all prods*/
      FB09M001.XXXMODID = "610"; /* module identification*/
    end
  end


end // end FB09620

// purge temp storage queue
Function FB09S01()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB09W01 empty; /* M001 display storage*/

  FB09W00.FB09WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FB09W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FB09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB09M001.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  FB09W00.FB09WRDS = "N"; /* Don't request data*/
  exit stack; /* Exit to display map*/


end // end FB09S01

// add page to temp storage queue
Function FB09S02()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FB09W01.XXXTSLEN = FB09W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FB09W00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FB09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FB09W01 empty; /* map display storage*/

    FB09W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB09W00.FB09WIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB09M001.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB09W00.FB09WRDS = "N"; /* don't request data*/

  exit stack; /* Exit to display map*/


end // end FB09S02

// obtain temp storage page
Function FB09S03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FB09W01.XXXTSLEN = FB09W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB09W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FB09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  FB09M001.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB09S03

// Get current buy month
Function FB09S04()


  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB09S04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB09M001.XXXMODID = "S04";

  FB09W00.FB09WRDS = "N"; /* request for data flag*/

  exit stack;


end // end FB09S04

// fetch b/l freeze row
Function FB09S05()

   /* ------------------------------------------------------------*/
   /* fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  /*  */
  /* ************************** Y2K OUT BEGIN *******************************/
  /*  */
  /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select set*/
  /*  */
  /* ************************** Y2K OUT END *********************************/
  /*  */
  /*  */
  /* ************************** Y2K IN BEGIN ********************************/
  /*  */
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  /*  */
  /* ************************** Y2K IN END **********************************/
  /*  */

   /* ------------------------------------------------------------*/
   /* If not found, zero the dates*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (FBLREC.XWHCD in FB09W00.XWH-WHSE-CD)
        FB09W00.FB09WDWS = "Y";
      else
        FBLREC.FB-FRZ-BTL-DT = 0; /* freeze date*/
        FBLREC.FB-FRZ-BTL-HHMM = 0; /* freeze time*/
        FBLREC.PT3YYMM = 0; /* period date*/
      end

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FBLREC.FB-FRZ-BTL-DT = 0; /* freeze date*/
      FBLREC.FB-FRZ-BTL-HHMM = 0; /* freeze time*/
      FBLREC.PT3YYMM = 0; /* period date*/
      return;
    end

    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB09M001.XXXMODID = "133"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "FETCH NEXT ROW      ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB09M001.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    FB09W00.FB09WRDS = "N"; /* dont request data*/
    exit stack; /* Exit to display map*/
  end

end // end FB09S05

//*** RECORD=FB09W00 ****
// misc working storage for fb09
// ***********************
Record FB09W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 FB09WBDT FB09WBDT ; 
    15 FB09W-BEG-CCYYMM FB09W-BEG-CCYYMM ; 
      20 FB09WBCC FB09WBCC ; 
      20 FB09WBMO FB09WBMO ; 
    15 FB09WBDD FB09WBDD ; 
  10 FB09WKDT FB09WKDT ; 
    15 FB09WKCC FB09WKCC ; 
    15 FB09WKYM FB09WKYM ; 
  10 FB09WFFI FB09WFFI ; 
  10 FB09WFSS FB09WFSS ; 
  10 FB09WMCS FB09WMCS ; 
  10 FB09WRDS FB09WRDS ; 
  10 FB09WKCS FB09WKCS ; 
  10 FB09WDCS FB09WDCS ; 
  10 FB09WVPS FB09WVPS ; 
  10 FB09WSWC FB09WSWC ; 
  10 FB09WRNS FB09WRNS ; 
  10 FB09WDWS FB09WDWS ; 
  10 FB09WSWU FB09WSWU ; 
  10 FB09WPFL FB09WPFL ; 
  10 FB09WCSC FB09WCSC ; 
  10 FB09WYYM FB09WYYM ; 
    15 FB09WPCY FB09WPCY ; 
      20 FB09WPTC FB09WPTC ; 
      20 FB09WPTY FB09WPTY ; 
    15 FB09WPTM FB09WPTM ; 
  10 FB09WIXM FB09WIXM ; 
  10 FB09WTIX FB09WTIX ; 
  10 FB09WBIX FB09WBIX ; 
  10 FB09WIX1 FB09WIX1 ; 
  10 FB09WCNT FB09WCNT ; 
  10 FB09WERR FB09WERR ; 
  10 FB09WSTC FB09WSTC ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FB09WSTP FB09WSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XWHCD XWHCD [10] ; 
  10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
  10 FB09MBLD FB09MBLD ; 
  10 FB09WPFK FB09WPFK ; 
  10 FB09WFTN FB09WFTN ; 
    15 FB09WFHN FB09WFHN ; 
    15 FB09WFMN FB09WFMN ; 
  10 FB09WFTC FB09WFTC ; 
    15 FB09WFHH FB09WFHH ; 
    15 FB09WFSE FB09WFSE ; 
    15 FB09WFMM FB09WFMM ; 
  10 FB09WCPD FB09WCPD [3] ; 
    15 FB09WCPC FB09WCPC ; 
    15 FB09WCYM FB09WCYM ; 
      20 FB09WCPY FB09WCPY ; 
      20 FB09WCPM FB09WCPM ; 
end // end FB09W00

//*** RECORD=FB09W01 ****
// display working storage for fb09
// ***********************
Record FB09W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1083) ; 
    10 CAUSERID CAUSERID ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XPRCD XPRCD ; 
    10 FB09WBMO FB09WBMO ; 
    10 FB09WSCD FB09WSCD [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SY1SSTNM SY1SSTNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
    10 PT3YYMM PT3YYMM [15] ; 
    10 FBKRDFL FBKRDFL [15] ; 
    10 YPGCD YPGCD [15] ; 
    10 FBKCAFL FBKCAFL [15] ; 
    10 FB09WERR FB09WERR [15] ; 
    10 FB-FRZ-BTL-DT FB-FRZ-BTL-DT [15] ; 
    10 FCST-QTB FCST-QTB [15] ; 
    10 FB09WFTM FB09WFTM [15] ; 
    10 CURR-ADJ-AVL-TOT CURR-ADJ-AVL-TOT [15] ; 
    10 FUT1-ADJ-AVL-TOT FUT1-ADJ-AVL-TOT [15] ; 
    10 FUT2-ADJ-AVL-TOT FUT2-ADJ-AVL-TOT [15] ; 
end // end FB09W01

//*** RECORD=FB09W02 ****
// fb09 working storage for jcl submission
// ***********************
Record FB09W02 type basicRecord
  10 FB09WPRR FB09WPRR ; 
    15 FB09WCMT FB09WCMT ; 
    15 FB09WPRM FB09WPRM ; 
      20 FB8BUYDT FB8BUYDT ; 
      20 PT3YYMM PT3YYMM ; 
      20 FBKRDFL FBKRDFL ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 FB09WCDT FB09WCDT ; 
      20 * char(53) ; 
end // end FB09W02

//*** RECORD=FB09W03 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record is used to access iomod fb1510.
// 
// ***********************
Record FB09W03 type basicRecord
  5 FB09W3KY FB09W3KY ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PA1BUYMO PA1BUYMO ; 
    10 XWHCD XWHCD ; 
    10 FB0QWSCT FB0QWSCT ; 
end // end FB09W03

//*** RECORD=FB09W04 ****
// ------------------------------------------------------------
// First parameter passed to the I/O module when selecting rows
// from the Base By Month table.
// ------------------------------------------------------------
// ***********************
Record FB09W04 type basicRecord
  10 FB09WFUN FB09WFUN ; 
  10 XWHCD XWHCD [2] ; 
end // end FB09W04

// Current CORP B/J ADJ-AVL QTY
DataItem CURR-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Default B/L Date
DataItem FB09MBLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB09W-BEG-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB09W3KY char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date century
DataItem FB09WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date day
DataItem FB09WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date ccyymm01
DataItem FB09WBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm bucket index
DataItem FB09WBIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date yymm format
DataItem FB09WBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FB09WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment, value //*
DataItem FB09WCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter to access VFBASM02
DataItem FB09WCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem FB09WCPC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PT_PERIOD_MO
DataItem FB09WCPD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// month
DataItem FB09WCPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FB09WCPY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count select codes
DataItem FB09WCSC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FB09WCYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem FB09WDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// domestic warehouse switch
DataItem FB09WDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem FB09WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first fetch indicator
DataItem FB09WFFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freeze time char hh
DataItem FB09WFHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freeze time numeric hh
DataItem FB09WFHN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// freeze time char mm
DataItem FB09WFMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freeze time numeric mm
DataItem FB09WFMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// freeze time :
DataItem FB09WFSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line selected switch
DataItem FB09WFSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freez time char
DataItem FB09WFTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b/l frz time in hh:mm format
DataItem FB09WFTM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// freez time numeric
DataItem FB09WFTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function for DB2 I/O module
DataItem FB09WFUN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general index 1
DataItem FB09WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index
DataItem FB09WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date cc
DataItem FB09WKCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FB09WKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date (ccyymm)
DataItem FB09WKDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yymm
DataItem FB09WKYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map format switch
DataItem FB09WMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT_PERIOD_MO
DataItem FB09WPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pfkey hold
DataItem FB09WPFK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf16 time through flag
DataItem FB09WPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl parameter group level
DataItem FB09WPRM char(81)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem FB09WPRR char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem FB09WPTC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FB09WPTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FB09WPTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FB09WRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning switch
DataItem FB09WRNS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product select code
DataItem FB09WSCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style/color flag
DataItem FB09WSTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save temporary storage page
DataItem FB09WSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem FB09WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage updated sw
DataItem FB09WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem FB09WTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid parm switch
DataItem FB09WVPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PT_PERIOD_MO
DataItem FB09WYYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Forecasted Qty to buy
DataItem FCST-QTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Future CORP B/L ADJ-AVL QTY
DataItem FUT1-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Future CORP B/L ADJ-AVL QTY
DataItem FUT2-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

