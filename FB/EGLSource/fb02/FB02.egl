package fb02;

import corpcom1.CAUSERID;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx1.XDSCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XPGCD;
import corpx2.XPLCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpx2.XWHSABRV;
import corpz3.ZZZCHGCT;
import fb.common.FB7BUYST;
import fb.common.FB7QTB;
import fb.common.FB8BUYDT;
import fb.common.FB8REC;
import fb.common.FB9REC;
import fb.common.FBEREC;
import fb.common.FBHREC;
import fb.common.FBI-GROUP;
import fb.common.FBIREC;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBMREC;
import fb.common.FBOREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.FF00ENU;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2LNINB;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT3YYMM;
import pt.common.PT5REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA1TBLKE;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VDRSAT01;
//*** PROGRAM=FB02 ****
// This program is part of the footwear buy system.
// To change direct ships to pull from stock or to change
// pull from stock to direct ships, the user would select a
// product on FB01 and then move to this screen.
// Direct ships/pull from stock rows can be changed here and
// the impact will be reflected on frozen bottom line
// availability.  When the user is finished with a product, it
// is then accepted by pressing PF17.  When all products are
// accepted, the direct ship/PFS finished flag is set to 'y'.
// To see the overall results of DRS.PFS, the user may inquire
// via the DRS customer detail screen (FB08).
// To view all sizes, PF10 and PF11 are provided to shift left
// and right.  The number of sizes to be scrolled may be
// entered.  The default is nine.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 10/31/89   Cprogm   Created.
// 08/02/90   jalle1   fix subscript error caused by loading
//                     too many customer/xref and whse to a
//                     temporary storage page.
// 04/26/91   jalle1   remove fblrec.fbltaqty from calculation
//                     of adjusted bottom line availability.
// 06/28/91   jalle1   add sales order # to map, restructure
//                     temp storage logic.
// 10/01/91   jalle1   give visibility to dc1/dc2/dc3 records.
// 10/02/91   jalle1   give maintenance capability to dc3
//                     records (including changing xdscd on
//                     dfbuy.vdnord01).
// 06/10/92   jmclau   June table changes. vxwh0001. add
//                     xdv-div-cd1-3 and xgp-gpc-cd1-8.
// 01/11/93   jmclau   PG-308 If a direct ship has a pre-advise
//                     < 21 display preadvise next to the order
//                     and do not allow modifications to that
//                     order.
// 06/11/93   ldeluh   fb312 add flag to fbhrec
// 07/21/93   ldeluh   Add cob2 loadlibs to test jcl.
// 10/28/93   ldeluh   FB322 add divert checking logic. Also
//                     change to no longer show preadvises.
// 12/21/93   ldeluh   FB324 - add musical size run display.
// 01/14/94   jalle1   FB321 - make product codes enterable.
//                     Return to same page as update performed.
// 12-20-94   lrein    Add YSMREC and validation of warehouse
//                     for european centralised forecasting
// 02/07/95   JALLE1   Fix subscript out of bounds abend.
// 03-08-95   lrein    Update drs accept flag when going from
//                     drs to pfs or pfs to drs.
// 05-30-96   bkepfo   Modify divert logic.
// 10-25-96   ksumme   FB180 - make changes to select future
//                     orders that will be brought into the
//                     current buy.  The screen map is changed
//                     to add the 'selection' field.  As a
//                     future order is selected or deselected
//                     the FB_BUY_STAT_IND field on the DNORD
//                     table is updated.
// 11-18-96   ksumme   Fix the length FB02WTSL was being set to
//                     in statement group fb02s13.
// 07/15/97   Rjogia   Default FB-RED-BLA-FL to NO
// 08/29/97   RTRAN    Changed process FB02220 not to skip the
//                     flag was set to 'y' on current buy.
// 10/14/97   AMAND1   Application is regenerated due to the
//                     oct'97 DB2 table changes.
// 12/09/97   RTRAN    FB1311 - Bring Indirect Direct with DRS
//                     code of '2' into the current and future
//                     buy.
// 12/30/97   RTRAN    FB1311 - Quick fix to program based on
//                     extra implementation per users.
// 01-15-97   ORICHA   y2k modifications:  fb02m001-zero fill
//                     year; s04, s05, s06, s11, s20, w00, 100.
// 02-12-98   rgilli   modified item fb02w01.fb02wflr length
//                     from 850 to 852 to match the new
//                     fblrec.fblgroup length.
// 03/06/98   RTRAN    Modified process FB02600 to update the
//                     fb_red_bla_fl correctly into the table.
// 04/29/98   RTRAN    Modified process FB02630 to correct the
//                     Buy Indicator Changes.  If a Buy Indi-
//                     cator is changed from a 'Y' to a 'N',
//                     the B/L flag will change from a 'Y' to
//                     a 'N', and the B/L amount will increased
//                     by the amount of the DRS.  If a Buy Indi
//                     cator is changed from a 'N' to 'Y' , the
//                     B/L flag will change from a 'N' to a 'Y'
//                     and will decrement the current B/L by
//                     the amount of DRS.
// 09/15/98   SSANKA   Updation bug fix (No updation when
//                     STK-QTY is negative)
// 06/01/99   RTRAN    Revised map to include Order Adjustment
//            FB1573   flags  and Prior Bottom Line Availabili-
//                     ties for Automate Direct ship process.
// 09/15/99   SKATHI   Revised application to correct bug.....
// 09/17/99   RTRAN    Revised application to correct bug.....
// 10/05/99   RTRAN    Correct bug in prior Bottom Line.......
// 01/06/2000 RTRAN    Correct bug Future Direct Ship Diverting
// 02/22/2000 GREDDY   FIXED AUTODRS BUGS. UPDATED MEMBERS
//                     FB02W00,FB02W01,FB02S37,FF00ENU,FB02100,
//                     FB02001,FB02120,FB02130,FB02210,FB02500,
//                     FB02600,FB02643.
//                     ADDED MEMBERS FB02644, FB02645
// 04/04/2000 GREDDY   FIXED LOGIC THAT WAS CAUSING ABEND DUE
//                     TO INVALID WAREHOUSES. FIXED FB02100 AND
//                     FB02210.
// 05/22/2000 SKATHI   FIXED BUG IN B/L LOGIC FOR 3 WHSE DISPLY
// 06/14/2000 RTRAN    NO CHANGE
// 05/24/2001 GREDDY   FIXED BUG IN B/L TABLE UPDATE WHEN DRS
//                     CODE IS '3'.
// 07/17/2001 SKATHI   To Exclude PFS orders from Xref validatn
// *********************
Program FB02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB02W00 FB02W00; // record
  FB02W01 FB02W01; // record
  FB02W03 FB02W03; // record
  FB02W04 FB02W04; // record
  FB02W05 FB02W05; // record
  FB02W06 FB02W06; // record
  FB02W07 FB02W07; // record
  FB8REC FB8REC; // record
  FB9REC FB9REC; // record
  FBEREC FBEREC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBOREC FBOREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  OP1REC OP1REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT5REC PT5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VDRSAT01 VDRSAT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use FB02T01; // table
  use FB02T02; // table
  use FB02M.FB02M010, // form
  		FB02M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB02001;
    FB02001: FB02001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the DRS Product/Size detail*/
     /* ------------------------------------------------------------*/
    ;
    goto FB02002; /* Converse DRS Product/Size detail*/
    ;
    ;
    FB02002: FB02002();
    goto FB02002;
  end // end main
end // end FB02

// footwear forecasting main menu
Function FB02001()
  ;
   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to YES.*/
   /* ---------------------------------------------------------*/
  ;
  set FB02W00 empty; /* Working storage record*/
  set FB02W01 empty; /* Map storage for map heading data*/
  set FB02W03 empty;
  set FB02W04 empty;
  set FB02W05 empty;
  set FB02W06 empty; /* IOFB1510 Working storage record*/
  set FBIREC empty; /* IOFB1510 record that passes data*/
                                  /* to IOfb1510. NOTE: FBIREC was*/
                                  /* created after this application*/
                                  /* was modified during the pre-advise*/
                                  /* PA-308 task.*/
  ;
  ;
   /* ---------------------------------------------------------*/
   /* If entry is from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB")
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    FB02W00.FB02WIFL = "Y"; /* Invalid fastpath flag*/
    converseLib.validationFailed(303); /* No product selected*/
    set FB02M010.SY1STNBR invisible, skip; /* Protect product*/
    set FB02M010.SY2CLRID invisible, skip;
    set FB02M010.XDMCD invisible, skip;
    set FB02M010.FB02MBYM invisible, skip;
  else
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
    if (FBXREC.SY1STNBR == " "
     || FBXREC.CAUSERID == " ")
      FB02W00.FB02WIFL = "Y"; /* Invalid fastpath flag*/
      converseLib.validationFailed(303); /* No product selected*/
      set FB02M010.SY1STNBR invisible, skip; /* Protect product*/
      set FB02M010.SY2CLRID invisible, skip;
      set FB02M010.XDMCD invisible, skip;
    end
  end
  ;
  ;
  FB02W00.FB02WAC = "Y"; /* Initialize product accept fl to 'y'*/
  ;
  set FB02M010 empty;
  ;
  COMMAREA.XGPCD = "02"; /* default gpc cd*/
  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
   /* MOVE 1148 TO FB02W00.FB02WTSL;   /* Temporary storage page length*/
  FB02W00.FB02WTSL = 1172; /* Temporary storage page length*/
  FB02W00.FB02WMAX = 4; /* Max lines per map page*/
  FB02W00.FB02WTSP = 1; /* Temp storage page request*/
  FB02W01.FB02WSZS = 9; /* Default size screen scroll*/
  ;
   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* key to display storage--and set the obtain data flag*/
   /* to yes.*/
   /* ---------------------------------------------------------*/
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB02W00.FB02WRDF = "Y"; /* Request for data flag*/
    FB02W01.SY1STNBR = FBXREC.SY1STNBR[1];
    FB02W00.SY1STNBR = FBXREC.SY1STNBR[1];
    FB02W01.SY2CLRID = FBXREC.SY2CLRID[1];
    FB02W00.SY2CLRID = FBXREC.SY2CLRID[1];
  /* GREDDY - 02/22/00*/
    FB02W00.POTOTAL = FBXREC.FBXPRIPO[1];
    FB02W01.POTOTAL = FBXREC.FBXPRIPO[1];
    FB02W00.BLTOTAL = FBXREC.FBXPRIBL[1];
    FB02W01.BLTOTAL = FBXREC.FBXPRIBL[1];
  /* GREDDY - 02/22/00*/
    FB02W01.XDMCD = FBXREC.XDMCD[1];
    FB02W00.XDMCD = FBXREC.XDMCD[1];
    FB02W00.FB02WFDT = FBXREC.FB8BUYDT;
    FB02W00.FB02WPBD = FBXREC.FB8BUYDT;
    FB02W00.FB02WBDT = FBXREC.FB8BUYDT;
    FB02W00.FB02W-ORD-ADJ-BUY-DT = FBXREC.FB8BUYDT;
    FB02W01.FB02WBYM = FB02W00.FB02WBYM;
    ;
    set PG2REC empty; /* Initialize style color record*/
    ;
    PG2REC.SY1STNBR = FBXREC.SY1STNBR[1];
    PG2REC.SY2CLRID = FBXREC.SY2CLRID[1];
    PG2REC.XDMCD = FBXREC.XDMCD[1];
    PG2REC.XGPCD = "02";
    ;
    XSPG202(); /* Obtain style color table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FB02W01.SY1SSTNM = PG2REC.SY1SSTNM;
      FB02W01.SY2CLRAB = PG2REC.SY2CLRAB;
      ;
      FB02S25(); /* Select DPRODG.VSUSER01*/
      FBXREC.CAUSERID = PG1REC.XXXUSER; /* Save userid*/
    end
  else
     /* Next sentence*/
  end
  ;
   /* ---------------------------------------------------------*/
   /* If the fbxrec has data find the last non  blank position*/
   /* in the fbxrec product key array and save it--this*/
   /* will be used to clear out the array as the products*/
   /* are 'bubbled' up*/
   /* ---------------------------------------------------------*/
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB02W00.FB02WIX1 = 1;
    FB02W00.FB02WSTI = 1; /* Style index*/
    while (FB02W00.FB02WIX1 <= 14)
      if (FBXREC.SY1STNBR[FB02WIX1] != " ")
        FB02W00.FB02WSTI = FB02W00.FB02WIX1;
   /*  */
  /* MOVE FBXREC.FBXPRIPO(FB02WIX1) TO FB02W00.POTOTAL;*/
  /* MOVE FBXREC.FBXPRIBL(FB02WIX1) TO FB02W00.BLTOTAL;*/
   /*  */
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
    end
    if (FB02W00.FB02WSTI == 0)
      FB02W00.FB02WSTI = 14;
    end
  else
    FB02W00.FB02WSTI = 1;
  end
  ;
  FB02S26(); /* load sum code*/
end // end FB02001

// Footwear products to buy
Function FB02002()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02100(); /* Obtain data to display*/
  ;
  FB02200(); /* Format and display the map*/
  ;
  FB02300(); /* Check attention identifier*/
  ;
  FB02400(); /* Reset fields to normal intensity*/
  ;
  FB02500(); /* Verify the entered data*/
  ;
  FB02600(); /* Process valid input request*/
  ;
end // end FB02002

// Obtain data to display
Function FB02100()
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.FB02WRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Purge temporary storage.*/
   /* If no message to display, reset page to display.*/
   /* ------------------------------------------------------------*/
  ;
  FB02110(); /* Purge temporary storage*/
  ;
  if (FB02W00.XXXMSGNO == 0) /* No message*/
    FB02W00.FB02WTSP = 1; /* Reset page to display*/
  end
  ;
  ;
  ;
  move "N" to FB02W00.FB02WZHD[1] for all; /* Init size has data array*/
  ;
  FB02W00.FB02WAC = "Y"; /* Init product accept flag to 'y'es*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the direct ship / nil quantity to buy.*/
   /* ------------------------------------------------------------*/
  ;
  set FBHREC empty; /* Init record*/
  ;
  FBHREC.SY1STNBR = FB02W00.SY1STNBR;
  FBHREC.SY2CLRID = FB02W00.SY2CLRID;
  FBHREC.XDMCD = FB02W00.XDMCD;
  FBHREC.XQACD = "01";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
  FBHREC.FBHDSAFL = "*";
  FBHREC.XWHCD = "*";
  FBHREC.XDSCD = "*";
  FBHREC.FB7BUYST = "*";
  ;
  FBHREC.FB8BUYDT = FB02W00.FB02WBDT;
  ;
  FB02W00.FB02W-CHK-DTE = 0; /* INIT DATE*/
  ;
  FB02S01(); /* Open cursor for DFBUY.VDNORD01*/
  ;
  FB02S02(); /* Fetch DFBUY.VDNORD01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 &&  /* IF FETCH GOOD AND*/
  FB02W00.FB02W-CHK-DTE == 0)      /* INITIAL TIME THRU*/
                                   /* CONVERT BUY DATE INTO PO-ID-MO-RNG*/
    FB02W00.FB02W-TMP-DT = FBHREC.FB8BUYDT; /* BUY DATE*/
    FB02W00.FB02W-CHK-CC = FB02W00.FB02W-TMP-CC; /* CENTURY*/
    FB02W00.FB02W-CHK-YY = FB02W00.FB02W-TMP-YY; /* YEAR*/
    FB02W00.FB02W-CHK-DM = FB02W00.FB02W-TMP-MM; /* DLV MONTH*/
    FB02W00.FB02W-CHK-MM = FB02W00.FB02W-TMP-MM - 2; /* MFG MONTH*/
    ;
    if (FB02W00.FB02W-CHK-MM < 0)
      FB02W00.FB02W-CHK-MM = 11;
      /* ------ Y2K OUT BEGIN -----*/
         /* FB02W00.FB02W-CHK-YY = FB02W00.FB02W-CHK-YY - 1;*/
      /* ------ Y2K OUT END -------*/
      /* ------ Y2K IN  BEGIN -----*/
      FB02W00.FB02W-CHK-CY = FB02W00.FB02W-CHK-CY - 1;
      /* ------ Y2K IN END --------*/
    else
      if (FB02W00.FB02W-CHK-MM == 0)
        FB02W00.FB02W-CHK-MM = 12;
        /* ------ Y2K OUT BEGIN -----*/
         /* FB02W00.FB02W-CHK-YY = FB02W00.FB02W-CHK-YY - 1;*/
        /* ------ Y2K OUT END -------*/
        /* ------ Y2K IN  BEGIN -----*/
        FB02W00.FB02W-CHK-CY = FB02W00.FB02W-CHK-CY - 1;
        /* ------ Y2K IN END --------*/
      end
    end
    FB02W00.FB02W-CHK-DTE = FB02W00.FB02W-CHK-DT;
  end
  ;
  FB02W00.FB02WBXF = "N"; /* Blank xref flag*/
  FB02W00.FB02WCCT = 0; /* Cust/xref count set to zero*/
  move " " to FB02W00.FB02WZHD[1] for all; /* Size has data*/
  FB02W01.FB02WDRQ = 0; /* Total DRS qty*/
  FB02W01.FB02WBLQ = 0; /* Total DRS BLD  qty*/
   /* INSERTED BY GREDDY-BEGIN 02/22/00*/
  FB02W00.FB02WOAD = 0; /* Total DIVERT  qty*/
   /* INSERTED BY GREDDY-end 02/22/00*/
  FB02W00.FB02WIXM = 0; /* map index*/
  FB02W00.PC2CUXID = " "; /* xref*/
  FB02W00.XWHCD = " "; /* whse*/
  FB02W00.OP1CUOID = 0; /* cust ord id*/
  FB02W00.OP1NORID = 0; /* nike ord id*/
  FB02W00.XDSCD = " "; /* drs code*/
  ;
  while (FB02W00.FB02WDNC == "N") /* While not end of cursor*/
    ;
    if (FBHREC.XDVCD != "02") /* If not NIL*/
      set FB02W06 empty; /* Init FB1510 record*/
      ;
      FB02W06.SY1STNBR = FBHREC.SY1STNBR;
      FB02W06.SY2CLRID = FBHREC.SY2CLRID;
      FB02W06.XDMCD = FBHREC.XDMCD;
      FB02W06.FB02W-PA-ORD-ADJ-BUY-MO = FB02W00.FB02W-ORD-ADJ-BUY-MO;
      FB02W06.XWHCD = FBHREC.XWHCD;
      FB02W06.OP1PARTN = FBHREC.OP1PARTN;
      FB02W06.OP1CUOID = FBHREC.OP1CUOID;
      FB02W06.OP1NORID = FBHREC.OP1NORID;
      ;
      FB02115(); /* Check for preadvises*/
      ;
      set FB02W06 empty; /* Init record*/
      FB02W06.FBI-GROUP = FBIREC.FBI-GROUP; /* Move fb1510 results*/
                                  /* into working storage*/
      ;
      if (FB02W06.FB02W-COUNT == 0) /* No preadvises found*/
        set FB02W06 empty; /* Init FB1510 record*/
        ;
        FB02W06.SY1STNBR = FBHREC.SY1STNBR;
        FB02W06.SY2CLRID = FBHREC.SY2CLRID;
        FB02W06.XDMCD = FBHREC.XDMCD;
        FB02W06.FB02W-PA-ORD-ADJ-BUY-MO = FB02W00.FB02W-ORD-ADJ-BUY-MO;
        FB02W06.XWHCD = FBHREC.XWHCD;
        FB02W06.OP1PARTN = FBHREC.OP1PARTN;
        FB02W06.OP1CUOID = FBHREC.OP1CUOID;
        FB02W06.OP1NORID = FBHREC.OP1NORID;
        FB02W06.FB02W-PRDCUID = FBHREC.PC2CUXID; /* PRD CD*/
        FB02W06.FB02W-PKGTYPCD = FBHREC.XPGCD; /* PKG CD*/
        FB02W06.FB02W-XQAQALCD = FBHREC.XQACD; /* QUAL CD*/
        FB02W06.FB02W-XUMUOMCD = FBHREC.XUMCD; /* OUM CD*/
        FB02W06.FB02W-DLVRY-DT = FB02W00.FB02W-CHK-DTE;
        ;
        FB02S30(); /* CHECK FOR DIVERTS*/
        ;
        if (FB02W06.FB02W-COUNT == 0) /* No diverts found*/
          ;
          FB02118(); /* Check for musical size run*/
          ;
          FB02120(); /* Format temp storage line*/
          ;
          FB02130(); /* Accumulate heading totals*/
          ;
          if (FBHREC.FBHDSAFL != "Y")
            FB02W00.FB02WAC = "N"; /* product accept fl set to 'n'*/
          end
          ;
          FB02W00.FB02WOAF = "N"; /* there is no divert O/A*/
        else
          FB02W00.FB02WOAF = "Y"; /* there is a  divert O/A*/
        end
      end
      ;
    end
    FB02S02(); /* Fetch DFBUY.VDNORD01 row*/
    ;
    /* ------------------------------------------------------------*/
     /* check to see if 4 cust/xref whse on page, if so, add to*/
     /* temp storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB02W00.FB02WCCT == FB02W00.FB02WMAX) /* max cust per page*/
      ;
      FB02S08(); /* add page to temp storage*/
      ;
      FB02W00.FB02WCCT = 0;
      ;
      ;
    end
  end
  ;
  FB02S03(); /* Close DFBUY.VDNORD01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If a partial page has been formatted add  to temp storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.FB02WIXM != 0) /* Write partial page to temp storage*/
    ;
    FB02S08(); /* Add to temp storage*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If there is no direct ship/nil data clear map and display*/
   /* message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.TA5TSQIX == 0)
    FB02W00.XXXMSGNO = 18; /* No data to display*/
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Get the bottom line available quantities for each warehouse*/
   /* ------------------------------------------------------------*/
  ;
  set FBLREC empty;
  ;
  FBLREC.SY1STNBR = FB02W00.SY1STNBR;
  FBLREC.SY2CLRID = FB02W00.SY2CLRID;
  FBLREC.XDMCD = FB02W00.XDMCD;
  FBLREC.XQACD = "01";
  FBLREC.PC2INSEG = "000";
  FBLREC.XPGCD = "00";
  FBLREC.XUMCD = "01";
  FBLREC.FB8BUYDT = FB02W00.FB02WBDT;
  ;
  FB02S04(); /* Open VFBLAV02 cursor*/
  FB02W00.FB02WDWS = "N";
  ;
  while (SQLCA.VAGen_SQLCODE != +100
   && FB02W00.FB02WDWS != "Y")
    FB02S05(); /* Fetch VFBLAV02 row*/
  end
  ;
  if (FB02W00.FB02WFCF == "Y") /* end of cursor*/
    FB02W00.FB02WBLF = "N"; /* VFBLAV02 row found flag*/
  end
  ;
  FB02W00.FB02WIXT = 0;
  FB02W00.PT3YYMM = FBLREC.PT3YYMM;
  FB02W01.FB02WBLM = FBLREC.PT3YYMM;
  FB02W00.FB02W0FBD = FBLREC.FB8BUYDT;
  FB02W00.FB02W1BLM = FB02W00.FB02W0BLM;
  ;
  while (FB02W00.FB02WFCF == "N") /* While not end of cursor*/
    ;
    if (FBLREC.PT3YYMM == FB02W00.PT3YYMM
     && FB02W00.FB02WDWS == "Y") /* And domestic whse*/
      ;
      FB02140(); /* Format warehouse data*/
      ;
    end
    FB02S05(); /* Fetch VFBLAV02 row*/
    ;
  end
  ;
  FB02S06(); /* Close VFBLAV02 cursor*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Get the prior Bottom Line Avaiability total*/
   /* ------------------------------------------------------------*/
  ;
   /* FB02W00.FB02W1MM = FB02W00.FB02W0MM - 1;*/
   /* IF FB02W00.FB02W1MM < 0 OR*/
     /* FB02W00.FB02W1MM = 0;*/
     /* FB02W00.FB02W1MM = FB02W00.FB02W1MM + 12;*/
     /* FB02W00.FB02W1CY = FB02W00.FB02W1CY - 1;*/
   /* END;*/
  ;
  if (FB02W00.FB02W1MM > 12)
    FB02W00.FB02W1CY = FB02W00.FB02W1CY + 1;
    FB02W00.FB02W1MM = 1;
  else
    if (FB02W00.FB02W1MM == 0)
      FB02W00.FB02W1CY = FB02W00.FB02W1CY - 1;
      FB02W00.FB02W1MM = 10;
    end
  end
  ;
  if (FB02W00.FB02W1MM == 1)
    FB02W00.FB02W1CY = FB02W00.FB02W1CY - 1; /* If it is 200001*/
    FB02W00.FB02W1MM = 11;
  else
    FB02W00.FB02W1MM = FB02W00.FB02W1MM - 2; /* Back 2 months*/
  end
  ;
  if (FB02W00.FB02W1MM == 0) /* If it is 200000*/
    FB02W00.FB02W1CY = FB02W00.FB02W1CY - 1;
    FB02W00.FB02W1MM = 12;
  end
  ;
  FB02W00.FB02WCNT = 1;
  ;
  while (FB02W00.FB02WCNT <= 3)
    ;
    FB02W00.FB02W2BLM[FB02WCNT] = FB02W00.FB02W1BLM;
    FB02W00.FB02W1BLM = FB02W00.FB02W1BLM + 1; /* next period b/l month*/
    ;
    if (FB02W00.FB02W1MM > 12)
      FB02W00.FB02W1CY = FB02W00.FB02W1CY + 1;
      FB02W00.FB02W1MM = 1;
    end
    ;
    FB02W00.FB02WCNT = FB02W00.FB02WCNT + 1;
  end
  ;
   /* RETRIEVING THE TOTAL ADJ AVAIL QUANTITIES FOR CORP B/Ls FOR THE*/
   /* CURRENT BUY MONTH AND THE PREVIOUS MONTH*/
  ;
  FB02W00.FB02WCNT = 1; /* initialize counter*/
  FB02W00.FB02WIXT = 0;
  FB02W01.FB02PVWH = " ";
  ;
  while (FB02W00.FB02WCNT <= 3)
    set PT5REC empty; /* initialize record*/
    ;
    PT5REC.XGPCD = "02"; /* gpc*/
    PT5REC.SY1STNBR = FB02W00.SY1STNBR; /* style*/
    PT5REC.SY2CLRID = FB02W00.SY2CLRID; /* color*/
    PT5REC.XDMCD = FB02W00.XDMCD; /* dimension*/
    PT5REC.PC2INSEG = "000"; /* iseg*/
    PT5REC.XPGCD = "00"; /* package type*/
    PT5REC.XUMCD = "01"; /* unit of measure*/
    PT5REC.XQACD = "01"; /* quality*/
    FB02W07.XWHCD[1] = "04"; /* beg whse*/
    FB02W07.XWHCD[2] = "72"; /* end whse*/
    PT5REC.PT3YYMM = FB02W00.FB02W2BLM[FB02WCNT];
    ;
    FB02141(); /* open csr dmodel.vfbasm04*/
    FB02142(); /* fetch record dmodel.vfbasm04*/
    ;
    if (SQLCA.VAGen_SQLCODE == +100)
      FB02W01.BL1-ADJ-AVL-TOT = 0;
    else
      if (FB02W00.FB02WCNT == 1)
        FB02W00.FB02WIX2 = 0;
        while (FB02W00.FB02WIX2 <= 40
         && SQLCA.VAGen_SQLCODE == 0)
          FB02W00.FB02WIX1 = 1;
          while (FB02W00.FB02WIX1 <= 10)
            if (PT5REC.PT2RNUM == "1"
             || PT5REC.PT2RNUM == "2"
             || PT5REC.PT2RNUM == "3"
             || PT5REC.PT2RNUM == "4")
              if (PT5REC.SY5SZID[FB02WIX1] > 0)
                FB02W00.FB02WIX2 = PT5REC.SY5SZID[FB02WIX1];
              end
              FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
            end
          end
          FB02142(); /* Fetch vfbasm04*/
        end
      else
   /* RTRAN*/
        if (FB02W00.FB02WCNT == 2)
          FB02W01.BL2-ADJ-AVL-TOT = PT5REC.PT3ADAVT;
          FB02W00.FB02WIX2 = 0;
          FB02W01.FB02WWHT[4] = 0;
          FB02W00.FB02WWHF = "N";
          while (FB02W00.FB02WIX2 <= 40
           && SQLCA.VAGen_SQLCODE == 0)
            if (PT5REC.XWHCD != FB02W01.FB02PVWH)
              FB02W00.FB02WIXT = FB02W00.FB02WIXT + 1;
              FB02W01.FB02PVWH = PT5REC.XWHCD;
   /* COMMENTED STATEMENT BELOW PART OF TASK 5290 -- GREDDY*/
   /* MOVE PT5REC.XWHCD TO FB02W01.XWHCD(FB02WIXT);*/
              if (PT5REC.XWHCD in XWHTBL.XWHCD
               && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
                 /* MOVE XWHTBL.XWHSABRV(EZETST)*/
                   /* TO FB02W01.XWHSABRV(FB02WIXT);*/
                if (PT5REC.XWHCD == "04")
                  FB02W01.XWHSABRV[1] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
                else
                  if (PT5REC.XWHCD == "07")
                    FB02W01.XWHSABRV[2] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
                  else
                    if (PT5REC.XWHCD == "51")
                      FB02W01.XWHSABRV[3] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
                    end
                  end
                end
              end
            end
            FB02W00.FB02WIX1 = 1;
            while (FB02W00.FB02WIX1 <= 10)
              if (PT5REC.PT2RNUM == "1"
               || PT5REC.PT2RNUM == "2"
               || PT5REC.PT2RNUM == "3"
               || PT5REC.PT2RNUM == "4")
                if (PT5REC.SY5SZID[FB02WIX1] > 0)
                  FB02W00.FB02WIX2 = PT5REC.SY5SZID[FB02WIX1];
                  if (PT5REC.XWHCD == "04")
                    FB02W01.FB02WWHT[4] = PT5REC.PT3ADAVT;
                    FB02W01.FB02WW4Q[FB02WIX2] = PT5REC.PT3ADAVQ[FB02WIX1];
                  else
                    if (PT5REC.XWHCD == "07")
  /* SKATHI. COMMENTED TO HAVE UNIFORMITY IN B/L POPULATING LOGIC*/
  /* IF FB02W01.FB02WWHT(4) EQ 0*/
  /* OR FB02W00.FB02WWHF EQ 'Y';*/
  /* MOVE PT5REC.PT3ADAVT TO FB02W01.FB02WWHT(4);*/
  /* MOVE PT5REC.PT3ADAVQ(FB02WIX1)*/
  /* TO FB02W01.FB02WW4Q(FB02WIX2);*/
  /* MOVE 'Y' TO FB02W00.FB02WWHF;*/
  /* ELSE;*/
                      FB02W00.FB02WWHF = "N";
                      FB02W01.FB02WWHT[5] = PT5REC.PT3ADAVT;
                      FB02W01.FB02WW5Q[FB02WIX2] = PT5REC.PT3ADAVQ[FB02WIX1];
  /* END;*/
                    else
                      if (PT5REC.XWHCD == "51")
                        FB02W01.FB02WWHT[6] = PT5REC.PT3ADAVT;
                        FB02W01.FB02WW6Q[FB02WIX2] = PT5REC.PT3ADAVQ[FB02WIX1];
                      end
                    end
                  end
                end
                FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
              end
            end
            FB02142(); /* Fetch vfbasm04*/
          end
        else
          FB02W01.BL3-ADJ-AVL-TOT = PT5REC.PT3ADAVT;
        end
      end
    end
    ;
    FB02143(); /* close cursor*/
    ;
    FB02W00.FB02WCNT = FB02W00.FB02WCNT + 1;
  end
  ;
   /* end of change 03/23/99*/
  ;
   /* FB02S39;      /* Rearrange whs seq of VFBASM04 with -*/
               /* -  seq of VFBLAV02.*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the forecast qty to buy.*/
   /* ------------------------------------------------------------*/
  ;
  set FBKREC empty; /* Init record*/
  ;
  FBKREC.SY1STNBR = FB02W00.SY1STNBR;
  FBKREC.SY2CLRID = FB02W00.SY2CLRID;
  FBKREC.XDMCD = FB02W00.XDMCD;
  ;
  FBKREC.FB8BUYDT = FB02W00.FB02WBDT;
  ;
  FBKREC.FB8RCTYP = "B";
  ;
  FB02S07(); /* Obtain unique VFQTBS01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FB02W01.FB02WFQB = FBKREC.FB8FTQTB;
    ;
    if (FBKREC.FBKFSAFL != "Y")
      FB02W00.FB02WAC = "N"; /* product accept fl set to 'n'*/
    end
    ;
  end
  ;
   /* Compute stock quantity to buy*/
      /* Forecast quantity - DRS BLD qty*/
  ;
  FB02W01.FB02WSTQ = FBKREC.FB8FTQTB - FB02W01.FB02WBLQ;
  ;
   /* ------------------------------------------------------------*/
   /* Get the size descriptions.*/
   /* ------------------------------------------------------------*/
  ;
  FB02150(); /* Get the size description*/
  ;
  FB02W00.FB02WRDF = "N"; /* Data not requested*/
  ;
   /* ------------------------------------------------------------*/
   /* Based upon whether a size has data or a description for*/
   /* this product set the first and last size index fields*/
   /* ------------------------------------------------------------*/
  ;
   /* Find first size index*/
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 40)
    ;
    if (FB02W00.FB02WZHD[FB02WIX1] == "Y") /* Size has data or desc*/
      FB02W00.FB02WFSI = FB02W00.FB02WIX1;
      FB02W00.FB02WIX1 = 41;
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
   /* Find last size index*/
  ;
  FB02W00.FB02WIX1 = FB02W00.FB02WFSI;
  ;
  while (FB02W00.FB02WIX1 <= 40)
    ;
    if (FB02W00.FB02WZHD[FB02WIX1] == "Y") /* Size has data or desc*/
      FB02W00.FB02WLSI = FB02W00.FB02WIX1;
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
  ;
   /* Calculate number of size buckets to display*/
  ;
  FB02W00.FB02WSZB = FB02W00.FB02WLSI - FB02W00.FB02WFSI;
  ;
  ;
  ;
   /* Determine the first size to display*/
  ;
  if (FB02W00.XXXMSGNO == 32) /* Update successful, try to go prev*/
                                   /* page*/
    ;
    if (FB02W00.FB02W-SAVED-FB02WCSI >= FB02W00.FB02WFSI
     && FB02W00.FB02W-SAVED-FB02WCSI <= FB02W00.FB02WLSI)
      ;
      FB02W00.FB02WCSI = FB02W00.FB02W-SAVED-FB02WCSI; /* Go back*/
                                  /* to page update performed on*/
    else
      FB02W00.FB02WCSI = FB02W00.FB02WFSI; /* go to leftmost page*/
      FB02W00.FB02W-SAVED-FB02WCSI = FB02W00.FB02WFSI; /* Save it*/
    end
  else
    ;
    FB02W00.FB02WCSI = FB02W00.FB02WFSI; /* go to leftmost page*/
    FB02W00.FB02W-SAVED-FB02WCSI = FB02W00.FB02WFSI; /* Save it*/
  end
  ;
  FB02W00.FB02WRDF = "N";
  ;
   /* ------------------------------------------------------------*/
   /* Get the Scheduler Control table row*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FB02180(); /* Get the Scheduler cntrl row*/
  else
    ;
    converseLib.validationFailed(257);
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for no frozen bottom line availability*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.FB02WBLF == "N") /* no vfblav01 row found*/
    converseLib.validationFailed(305); /* hit pf18 to freeze b/l*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Get control row for tolerance quantity*/
   /* ------------------------------------------------------------*/
  ;
  FB02S24();
  ;
end // end FB02100

// Purge temporary storage
Function FB02110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FB02W03 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/
  ;
  ;
  FB02W00.TA5TSQIX = 0; /* Highest page number*/
  FB02W00.FB02WIXM = 0; /* temporary storage line index*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FB02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB02M010.XXXPRCNM = "FB02110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02110

// Check for preadvises
Function FB02115()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order to check*/
   /* for preadvises.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FBIREC empty;
  FBIREC.FBI-GROUP = FB02W06.FBI-GROUP;
  ;
  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02115"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02115";
  exit stack;
  ;
  ;
end // end FB02115

// Check for musical sz run
Function FB02118()
   /* ------------------------------------------------------------*/
   /* Check to see if this drs sales order is requesting musical*/
   /* size runs.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set OP1REC empty;
  OP1REC.OP1PARTN = FBHREC.OP1PARTN;
  OP1REC.OP1CUOID = FBHREC.OP1CUOID;
  OP1REC.OP1NORID = FBHREC.OP1NORID;
  ;
  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /**/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/
      OP1REC.XPACD = " "; /* Default to "no"*/
      return;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02118"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE VORHDRR1";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02118";
  exit stack;
  ;
  ;
end // end FB02118

// Format temp storage line
Function FB02120()
  ;
   /* ---------------------------------------------------*/
   /* Determine what sizes have data (used for size*/
   /* paging).*/
   /* ---------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 40)
    if (FBHREC.FB7QTB[FB02WIX1] != 0)
      FB02W00.FB02WZHD[FB02WIX1] = "Y"; /* Size has data*/
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
   /* ---------------------------------------------------*/
   /* There can be a maximum of 4 customer xref/warehouse*/
   /* detail lines on a map page.*/
   /* ---------------------------------------------------*/
  ;
  ;
  /* To Load only orders with Xref. Sakthi. 07/18/01*/
  if (FBHREC.PC2CUXID != " ")
    FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1; /* temp storage line count*/
    ;
    FB02W03.FB02W03D[FB02WIXM] = FBHREC.FBHGROUP;
    ;
    FB02W03.PC2CUXID[FB02WIXM] = FBHREC.PC2CUXID;
    FB02W03.XWHCD[FB02WIXM] = FBHREC.XWHCD;
    FB02W03.OP1CUOID[FB02WIXM] = FBHREC.OP1CUOID;
    FB02W03.OP1NORID[FB02WIXM] = FBHREC.OP1NORID;
    ;
    ;
    if (FBHREC.FB7BUYST == "Y")
      FB02W03.FB7BUYST[FB02WIXM] = FBHREC.FB7BUYST;
    else
      FB02W03.FB7BUYST[FB02WIXM] = "N";
    end
    ;
    ;
    FB02W03.FB8BUYDT[FB02WIXM] = FBHREC.FB8BUYDT;
    ;
    if (FBHREC.FB-RED-BLA-FL == " ")
      FB02W03.FB02W-RED-BLA-FL[FB02WIXM] = "N";
    else
      FB02W03.FB02W-RED-BLA-FL[FB02WIXM] = FBHREC.FB-RED-BLA-FL;
    end
    ;
    if (OP1REC.XPACD == "MS") /* if musical size run*/
      FB02W03.FB02W-MSR-IND[FB02WIXM] = "MSR";
    else
      FB02W03.FB02W-MSR-IND[FB02WIXM] = "   ";
    end
    ;
    FB02W03.OP1CUNDT[FB02WIXM] = FBHREC.OP1CUNDT;
    ;
    if (FBHREC.PC2CUXID == " ")
  /* Not to Consider PFS orders. Sakthi. 07/18/01*/
      if (FBHREC.XDSCD == "1" || 
      FBHREC.XDSCD == "2")
        FB02W00.FB02WBXF = "Y"; /* Blank xref flag*/
        FB02W00.XXXMSGNO = 349; /* Style has order with blank xref*/
      end
    end
    ;
    FB02W00.FB02WCCT = FB02W00.FB02WCCT + 1; /* Increment customer count*/
    FB02W00.PC2CUXID = FBHREC.PC2CUXID;
    FB02W00.XWHCD = FBHREC.XWHCD;
    FB02W00.OP1CUOID = FBHREC.OP1CUOID;
    FB02W00.OP1NORID = FBHREC.OP1NORID;
    ;
    set VDRSAT01 empty;
    ;
    VDRSAT01.PG1SC4CD = FBHREC.PG1SC4CD;
    VDRSAT01.XPLCD = FBHREC.XPLCD;
    VDRSAT01.SY1STNBR = FBHREC.SY1STNBR;
    VDRSAT01.SY2CLRID = FBHREC.SY2CLRID;
    VDRSAT01.XDMCD = FBHREC.XDMCD;
    VDRSAT01.OP1PARTN = FBHREC.OP1PARTN;
    VDRSAT01.OP1CUOID = FBHREC.OP1CUOID;
    VDRSAT01.OP1NORID = FBHREC.OP1NORID;
    ;
    FB02S36(); /* Obtain unique VDRSAT01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FB02W03.ZZZCHGCT[FB02WIXM] = VDRSAT01.ZZZCHGCT;
      FB02W03.OP1PARTN[FB02WIXM] = VDRSAT01.OP1PARTN;
      FB02W03.OP2LNINB[FB02WIXM] = VDRSAT01.OP2LNINB;
      FB02W03.FB02W-DIVERT-FL[FB02WIXM] = VDRSAT01.FB7BUYST;
   /* COMMENTED BY GREDDY - BEGIN 02/22/00*/
   /* **************************************************/
   /* PART OF LOGIC BELOW TO COMPUTE TOTAL DIVERT QTY*/
   /* HAS BEEN SHIFTED TO FB02130*/
   /* **************************************************/
   /* IF VDRSAT01.FB7BUYST EQ 'D';*/
   /* MOVE 1 TO FB02W00.FB02WIX1;*/
   /* WHILE FB02W00.FB02WIX1 LE 40;    /* Max sizes*/
   /* FB02W01.FB02WOAD = FB02W01.FB02WOAD + FBHREC.FB7QTB(FB02WIX1);*/
   /* FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;*/
   /* END;*/
   /* IF FB02W01.POTOTAL > 0;*/
   /* FB02W01.POTOTAL = FB02W01.POTOTAL - FB02W01.FB02WOAD;*/
   /* END;*/
   /* IF FB02W01.BLTOTAL > 0;*/
   /* FB02W01.BLTOTAL = FB02W01.BLTOTAL - FB02W01.FB02WOAD;*/
   /* END;*/
   /* END;*/
   /* COMMENTED BY GREDDY - END 02/22/00*/
    else
      FB02W03.FB02W-DIVERT-FL[FB02WIXM] = "N";
    end
    ;
  else
    if (FBHREC.XDSCD == "1" || 
    FBHREC.XDSCD == "2")
      FB02W00.FB02WBXF = "Y"; /* Blank xref flag*/
      FB02W00.XXXMSGNO = 349; /* Style has order with blank xref*/
    end
  end
end // end FB02120

// Accumulate heading totals
Function FB02130()
  ;
   /* ------------------------------------------------------------*/
   /* Based upon the direct ship code add the size buckets into*/
   /* the appropriate totals.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 40) /* Max sizes*/
    ;
    if ((FBHREC.XDSCD == "1"
     && FBHREC.XWHCD == " "
     && FBHREC.FB7BUYST == "Y") || 
    (FBHREC.XDSCD == "2"
     && FBHREC.XWHCD != " "
     && FBHREC.FB7BUYST == "Y"))
      FB02W01.FB02WBLQ = FB02W01.FB02WBLQ + FBHREC.FB7QTB[FB02WIX1];
    end
    if ((FBHREC.XDSCD == "1"
     || FBHREC.XDSCD == "2"
     || FBHREC.XDSCD == "3")
     && FBHREC.FB7BUYST == "Y")
      FB02W01.FB02WDRQ = FB02W01.FB02WDRQ + FBHREC.FB7QTB[FB02WIX1];
    end
   /* CHANGE BY GREDDY-BEGIN 02/22/00*/
   /* ************************************************/
   /* Compute total divert qty.*/
   /* ************************************************/
    if (VDRSAT01.FB7BUYST == "D")
      FB02W00.FB02WOAD = FB02W00.FB02WOAD + FBHREC.FB7QTB[FB02WIX1];
    end
   /* CHANGE BY GREDDY-END   02/22/00*/
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
end // end FB02130

// Format warehouse data
Function FB02140()
  ;
   /* ---------------------------------------------------*/
   /* Calculate the size quantities for each of the*/
   /* warehouses and move to the appropriate fields in*/
   /* display storage.*/
   /* Move the warehouse code and the entire record*/
   /* to VFBLAV02 storage in the FB02W01 record.*/
   /* Get the warehouse description and move to*/
   /* display storage (it will be truncated).*/
   /* ---------------------------------------------------*/
  ;
  ;
  FB02W00.FB02WIXT = FB02W00.FB02WIXT + 1;
  ;
   /* COMMENTED OUT BY RTRAN 06/15/00*/
  ;
   /* MOVE FBLREC.XWHCD TO FB02W01.XWHCD(FB02WIXT);*/
   /* MOVE FBLREC.FBLGROUP TO FB02W01.FB02WFLR(FB02WIXT);*/
  ;
  if (FBLREC.XWHCD == "04")
    FB02W01.XWHCD[1] = "04";
    FB02W01.FB02WFLR[1] = FBLREC.FBLGROUP;
  else
    if (FBLREC.XWHCD == "07")
      FB02W01.XWHCD[2] = "07";
      FB02W01.FB02WFLR[2] = FBLREC.FBLGROUP;
    else
      if (FBLREC.XWHCD == "51")
        FB02W01.XWHCD[3] = "51";
        FB02W01.FB02WFLR[3] = FBLREC.FBLGROUP;
      end
    end
  end
  ;
  if (FBLREC.XWHCD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
   /* MOVE XWHTBL.XWHSABRV(EZETST) TO FB02W01.XWHSABRV(FB02WIXT);*/
    if (FBLREC.XWHCD == "04")
      FB02W01.XWHSABRV[1] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      if (FBLREC.XWHCD == "07")
        FB02W01.XWHSABRV[2] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      else
        if (FBLREC.XWHCD == "51")
          FB02W01.XWHSABRV[3] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        end
      end
    end
  end
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  FB02W00.FB02WWF2 = 0;
  ;
  while (FB02W00.FB02WIX1 <= 40)
    FB02W00.FB02WWF1 = 0;
    FB02W00.FB02WWF1 = FB02W00.FB02WWF1 + FBLREC.PT3AVQT[FB02WIX1];
    FB02W00.FB02WWF1 = FB02W00.FB02WWF1 + FBLREC.FBLDAQTY[FB02WIX1];
    FB02W00.FB02WWF1 = FB02W00.FB02WWF1 + FBLREC.FBLMAQTY[FB02WIX1];
    FB02W00.FB02WWF1 = FB02W00.FB02WWF1 + FBLREC.FBLOAQTY[FB02WIX1];
    FB02W00.FB02WWF2 = FB02W00.FB02WWF2 + FB02W00.FB02WWF1;
    if (FB02W00.FB02WWF1 != 0)
      FB02W00.FB02WZHD[FB02WIX1] = "Y"; /* Indicate size has data*/
    end
  /* SPLIT BASED ON THE WAREHOUSE. SKATHI*/
  /* IF FB02W00.FB02WIXT = 1;*/
    if (FBLREC.XWHCD == "04")
      FB02W01.FB02WW1Q[FB02WIX1] = FB02W00.FB02WWF1;
      FB02W01.FB02WWHT[1] = FB02W00.FB02WWF2;
    else
  /* IF FB02W00.FB02WIXT = 2;*/
      if (FBLREC.XWHCD == "07")
        FB02W01.FB02WW2Q[FB02WIX1] = FB02W00.FB02WWF1;
        FB02W01.FB02WWHT[2] = FB02W00.FB02WWF2;
      else
  /* IF FB02W00.FB02WIXT = 3;*/
        if (FBLREC.XWHCD == "51")
          FB02W01.FB02WW3Q[FB02WIX1] = FB02W00.FB02WWF1;
          FB02W01.FB02WWHT[3] = FB02W00.FB02WWF2;
        end
      end
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  /* MOVE FB02W00.FB02WWF2 TO FB02W01.FB02WWHT(FB02WIXT);*/
  ;
end // end FB02140

// open dmodel.vfbasm04 csr
Function FB02141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02W07.FB02WFUN = "S1"; /* function*/
  ;
  try
    call "VFBASM04" (FB02W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "141"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02141

// fetch dmodel.vfbasm04 csr
Function FB02142()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W07.FB02WFUN = "N1"; /* function*/
  ;
  try
    call "VFBASM04" (FB02W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or empty return*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "142"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH  CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02142

// close dmodel.vfbasm04 csr
Function FB02143()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W07.FB02WFUN = "C1"; /* function*/
  ;
  try
    call "VFBASM04" (FB02W07, SQLCA, PT5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "143"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CSR VFBASM04 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBASM04"; /* Table view name*/
  TA1REC.TA1TBLKE = PT5REC.PT5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02143

// Get size descriptions
Function FB02150()
  ;
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/
  ;
  set PG3REC empty;
  ;
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB02W00.SY1STNBR;
  PG3REC.SY2CLRID = FB02W00.SY2CLRID;
  PG3REC.XDMCD = FB02W00.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* Division code*/
  ;
  XSPG301(); /* Get valid sizes*/
  ;
  ;
   /* ---------------------------------------------------------*/
   /* Load size descriptions to table in storage*/
   /* ---------------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = 1; /* Initialize index*/
  ;
  while (FB02W00.FB02WIX1 <= 40) /* Check all 40 sizes*/
    ;
    if (PG3REC.SY4IDDSC[FB02WIX1] != " ")
      FB02W01.FB02WSZD[FB02WIX1] = PG3REC.SY4IDDSC[FB02WIX1];
      FB02W00.FB02WZHD[FB02WIX1] = "Y"; /* Size has desc or data flag*/
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
end // end FB02150

// Get scheduler row
Function FB02180()
  ;
  set FBMREC empty;
  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;
  ;
  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02180"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE ROW        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02180";
  exit stack;
  ;
end // end FB02180

// Format and display map 1
Function FB02200()
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    set FB02M010 alarm; /* Indicate sound alarm*/
  end
  ;
   /* -----------------------------------------------------------*/
   /* If no data found clear the map.*/
   /* -----------------------------------------------------------*/
  ;
  if (FB02W00.XXXMSGNO == 18 /* No data to display*/
   || FB02W00.XXXMSGNO == 356) /* End of list*/
    ;
    set FB02M010 initial;
    set FB02M010.SY1STNBR cursor;
    set FB02M010.FB02MBLL[1] skip, invisible;
    set FB02M010.FB02MBLL[2] skip, invisible;
    set FB02M010.FB02MBLL[3] skip, invisible;
    set FB02M010.FB7BUYST[1] skip, invisible;
    set FB02M010.FB7BUYST[2] skip, invisible;
    set FB02M010.FB7BUYST[3] skip, invisible;
    set FB02M010.FB7BUYST[4] skip, invisible;
    set FB02M010.XWHCD[1] initialAttributes;
    set FB02M010.XWHCD[2] initialAttributes;
    set FB02M010.XWHCD[3] initialAttributes;
    set FB02M010.XWHCD[4] initialAttributes;
    set FB02M010.FB02M-DIVERT-FL[1] initialAttributes;
    set FB02M010.FB02M-DIVERT-FL[2] initialAttributes;
    set FB02M010.FB02M-DIVERT-FL[3] initialAttributes;
    set FB02M010.FB02M-DIVERT-FL[4] initialAttributes;
    set FB02M010.FB02M-RED-BLA-FL[1] initialAttributes;
    set FB02M010.FB02M-RED-BLA-FL[2] initialAttributes;
    set FB02M010.FB02M-RED-BLA-FL[3] initialAttributes;
    set FB02M010.FB02M-RED-BLA-FL[4] initialAttributes;
    set FB02M010.FB02M-MSR-IND[1] initialAttributes;
    set FB02M010.FB02M-MSR-IND[2] initialAttributes;
    set FB02M010.FB02M-MSR-IND[3] initialAttributes;
    set FB02M010.FB02M-MSR-IND[4] initialAttributes;
    set FB02M010.OP1CUNDT[1] initialAttributes;
    set FB02M010.OP1CUNDT[2] initialAttributes;
    set FB02M010.OP1CUNDT[3] initialAttributes;
    set FB02M010.OP1CUNDT[4] initialAttributes;
    set FB02M010.OP1CUOID[1] initialAttributes;
    set FB02M010.OP1CUOID[2] initialAttributes;
    set FB02M010.OP1CUOID[3] initialAttributes;
    set FB02M010.OP1CUOID[4] initialAttributes;
    set FB02M010.OP1NORID[1] initialAttributes;
    set FB02M010.OP1NORID[2] initialAttributes;
    set FB02M010.OP1NORID[3] initialAttributes;
    set FB02M010.OP1NORID[4] initialAttributes;
    set FB02M010.XDSCD[1] initialAttributes;
    set FB02M010.XDSCD[2] initialAttributes;
    set FB02M010.XDSCD[3] initialAttributes;
    set FB02M010.XDSCD[4] initialAttributes;
  end
  ;
   /* -----------------------------------------------------------*/
   /* If current page not equal request page, obtain temp*/
   /* storage record.*/
   /* -----------------------------------------------------------*/
  ;
  if (FB02W00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FB02W00.FB02WTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      set FB02M010 initial;
      ;
      FB02S09(); /* Obtain temp storage page*/
      /* MOVE FB02W00.FB02WFSI TO FB02W00.FB02WCSI;/* current size index*/
      FB02W00.FB02W-SAVED-FB02WCSI = FB02W00.FB02WFSI; /* crnt sz idx*/
      ;
      ;
      FB02220(); /* Format map 1 detail lines*/
      ;
    end
  end
  ;
  if (FB02W00.FB02WSSR == "Y") /* Size scroll requested*/
    FB02W00.FB02WSSR = "N";
    set FB02M010 initial;
    ;
    FB02220(); /* Format map 1 detail lines*/
    ;
  end
  ;
   /* -----------------------------------------------------------*/
   /* If map is not formatted--format heading data*/
   /* -----------------------------------------------------------*/
  ;
  if (FB02M010.XXXCURDT == 0) /* Map not formatted*/
    ;
    FB02210(); /* Move header data to the map*/
    ;
    if (FB02W00.XXXMSGNO == 76) /* Batch job submitting for processing*/
      FB02220(); /* Format map 1 detail lines*/
    end
  end
  ;
  FB02M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/
   /*  */
  ;
  if (converseVar.validationMsgNum == 0)
    if (FB02M010.SY1STNBR == " ")
      set FB02M010.SY1STNBR cursor;
      ;
    else
      if (FB02W05.FB8BUYDT[1] > FB02W00.FB02WBDT)
        set FB02M010.FB7BUYST[1] cursor;
      else
        if (FB02W05.FB8BUYDT[2] > FB02W00.FB02WBDT)
          set FB02M010.FB7BUYST[2] cursor;
        else
          if (FB02W05.FB8BUYDT[3] > FB02W00.FB02WBDT)
            set FB02M010.FB7BUYST[3] cursor;
          else
            if (FB02W05.FB8BUYDT[4] > FB02W00.FB02WBDT)
              set FB02M010.FB7BUYST[4] cursor;
            else
              if (FB02M010.XDSCD[1] != " "
               && FB02M010.PC2CUXID[1] != "  ")
                set FB02M010.XWHCD[1] cursor;
                ;
              else
                if (FB02M010.XDSCD[2] != " "
                 && FB02M010.PC2CUXID[2] != "  ")
                  set FB02M010.XWHCD[2] cursor;
                  ;
                else
                  if (FB02M010.XDSCD[3] != " "
                   && FB02M010.PC2CUXID[3] != "  ")
                    set FB02M010.XWHCD[3] cursor;
                    ;
                  else
                    if (FB02M010.XDSCD[4] != " "
                     && FB02M010.PC2CUXID[4] != "  ")
                      set FB02M010.XWHCD[4] cursor;
                    else
                      set FB02M010.CATOAP cursor;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
  if (FB02W00.XXXMSGNO != 0) /* Contains informational message*/
    if (FB02W00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB02W00.XXXMSGNO);
    end
  end
  ;
  ;
  FB02M010.XXXPRCNM = "FB02"; /* Process number*/
  ;
   /* -----------------------------------------------------------*/
   /* Protect dc2s unconditionally.*/
   /* -----------------------------------------------------------*/
  ;
  /* MOVE 1 TO FB02W00.FB02WIXM;*/
  /* WHILE FB02W00.FB02WIXM LE 4;*/
  /* IF FB02M010.XDSCD(FB02WIXM) NE ' ';*/
  ;
  /* SET FB02M010.XWHCD(FB02WIXM) CURSOR;*/
  /* SET FB02M010.FB02M-RED-BLA-FL(FB02WIXM) CURSOR;*/
  ;
  /* END;*/
  /* FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;*/
  /* END;*/
  converse FB02M010 ;
  ;
   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/
  ;
  FB02W00.XXXMSGNO = 0; /* Message number*/
  FB02M010.XXXPRCNM = "FB02"; /* Process number*/
  ;
end // end FB02200

// Format map Header data
Function FB02210()
  ;
   /* ------------------------------------------------------------*/
   /* Move map header from fb02w01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02M010.SY1STNBR = FB02W01.SY1STNBR;
  FB02M010.SY2CLRID = FB02W01.SY2CLRID;
  FB02M010.XDMCD = FB02W01.XDMCD;
  FB02M010.SY1SSTNM = FB02W01.SY1SSTNM;
  FB02M010.SY2CLRAB = FB02W01.SY2CLRAB;
  if (FB02W01.FB02WBYM != 0)
    FB02M010.FB02MBYM = FB02W01.FB02WBYM; /* buy month*/
  end
  ;
  if (FB02W00.XXXMSGNO == 18) /* No data to display*/
    return;
  end
  ;
   /* ------------------------------------------------------------------*/
   /* COMPUTE THE PO AVAILABLE FOR DIVERT*/
   /* MOVE PO AVAILABLE AND TOTAL DIVERT TO MAP FIELDS- GREDDY 02/22/00*/
   /* ------------------------------------------------------------------*/
  FB02M010.FB02MOAD = FB02W00.FB02WOAD;
  FB02W00.FB02WPOD = 0;
  FB02W00.FB02WPOD = FB02W01.POTOTAL - FB02W00.FB02WOAD;
  FB02M010.FB02MPO = FB02W00.FB02WPOD;
   /* ------------------------------------------------------------------*/
  FB02M010.FB02MFQB = FB02W01.FB02WFQB;
  FB02M010.FB02MDRQ = FB02W01.FB02WDRQ;
  FB02M010.FB02MBLQ = FB02W01.FB02WBLQ;
  FB02M010.FB02MSTQ = FB02W01.FB02WSTQ;
  ;
  FB02M010.FB02MBLL[4] = FB02W00.FB02W2CY[2];
  FB02M010.FB02MBLL[5] = FB02W00.FB02W2CY[2];
  FB02M010.FB02MBLL[6] = FB02W00.FB02W2CY[2];
  ;
  FB02M010.FB02MOAF = FB02W00.FB02WOAF;
  ;
   /* tcs change begins*/
  if (FB02M010.FB02MSTQ < -240)
    FB02W00.XXXMSGNO = 547;
  end
   /* tcs change ends*/
  ;
  if (FB02W01.FB02WBLM != 0)
    FB02M010.FB02MBLM = FB02W01.FB02WBLM; /* B/L month*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* load size descriptions to map*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02M010.SY1STNBR != " ")
    FB02M010.FB02MSZS = FB02W01.FB02WSZS; /* size scroll*/
    ;
    FB02W00.FB02WIXM = 1; /* Init map index*/
    if (FB02W00.FB02WCSI != 0)
      FB02W00.FB02WIX1 = FB02W00.FB02WCSI; /* Current size index*/
    else
      FB02W00.FB02WIX1 = 10;
    end
    ;
    while (FB02W00.FB02WIXM <= 9)
      FB02M010.FB02MSZD[FB02WIXM] = FB02W01.FB02WSZD[FB02WIX1];
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* load warehouse data to the map*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = 1; /* Init map index*/
  ;
  while (FB02W00.FB02WIXM <= 3)
    ;
   /* GREDDY 04/04/00 - TASK 5290*/
   /* IF FB02W01.XWHCD(FB02WIXM) NE ' ';*/
    ;
    if (FB02W01.XWHSABRV[FB02WIXM] != " ")
      ;
      FB02M010.FB02MWHC[FB02WIXM] = FB02W01.XWHSABRV[FB02WIXM];
      FB02M010.FB02MWHT[FB02WIXM] = FB02W01.FB02WWHT[FB02WIXM];
      ;
      FB02211(); /* Load warehouse size data*/
      ;
    else
      set FB02M010.FB02MWHC[FB02WIXM] skip, invisible;
      set FB02M010.FB02MBLL[FB02WIXM] skip, invisible;
      if (FB02WIXM == 1)
        set FB02M010.FB02MWHC[4] skip, invisible;
        set FB02M010.FB02MBLL[4] skip, invisible;
      else
        if (FB02WIXM == 2)
          set FB02M010.FB02MWHC[5] skip, invisible;
          set FB02M010.FB02MBLL[5] skip, invisible;
        else
          if (FB02WIXM == 3)
            set FB02M010.FB02MWHC[6] skip, invisible;
            set FB02M010.FB02MBLL[6] skip, invisible;
          end
        end
      end
    end
    FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
  end
  ;
end // end FB02210

// Load warehouse size data
Function FB02211()
  ;
   /* ------------------------------------------------------------*/
   /* Check map index to determine what warehouse to load size*/
   /* data for.Use the current size index as the starting point*/
   /* for loading the sizes to the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = FB02W00.FB02WCSI; /* Current size*/
  FB02W00.FB02WIX2 = 1; /* Map size index*/
  ;
  if (FB02W00.FB02WIXM == 1) /* Warehouse 1*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W01.FB02WW1Q[FB02WIX1] != 0
       || FB02W01.FB02WW4Q[FB02WIX1] != 0)
        FB02M010.FB02MW1Q[FB02WIX2] = FB02W01.FB02WW1Q[FB02WIX1];
        FB02M010.FB02MW4Q[FB02WIX2] = FB02W01.FB02WW4Q[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
    FB02M010.FB02MWHC[4] = FB02W01.XWHSABRV[FB02WIXM];
    FB02M010.FB02MWHT[4] = FB02W01.FB02WWHT[4];
  end
  ;
  ;
  if (FB02W00.FB02WIXM == 2) /* Warehouse 2*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W01.FB02WW2Q[FB02WIX1] != 0
       || FB02W01.FB02WW5Q[FB02WIX1] != 0)
        FB02M010.FB02MW2Q[FB02WIX2] = FB02W01.FB02WW2Q[FB02WIX1];
        FB02M010.FB02MW5Q[FB02WIX2] = FB02W01.FB02WW5Q[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
    ;
    FB02M010.FB02MWHC[5] = FB02W01.XWHSABRV[FB02WIXM];
    FB02M010.FB02MWHT[5] = FB02W01.FB02WWHT[5];
    ;
  end
  ;
  ;
  if (FB02W00.FB02WIXM == 3) /* Warehouse 3*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W01.FB02WW3Q[FB02WIX1] != 0
       || FB02W01.FB02WW6Q[FB02WIX1] != 0)
        FB02M010.FB02MW3Q[FB02WIX2] = FB02W01.FB02WW3Q[FB02WIX1];
        FB02M010.FB02MW6Q[FB02WIX2] = FB02W01.FB02WW6Q[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
    ;
    FB02M010.FB02MWHC[6] = FB02W01.XWHSABRV[FB02WIXM];
    FB02M010.FB02MWHT[6] = FB02W01.FB02WWHT[6];
    ;
  end
  ;
end // end FB02211

// Format map 1 Detail lines
Function FB02220()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process all FBLRECS in temporary storage.*/
   /* Accumulate the size totals and grand total for the each*/
   /* customer.*/
   /* Format a display data line and move it to the display page*/
   /* record.*/
   /* ------------------------------------------------------------*/
  ;
  set FB02W05 empty;
  ;
  FB02W00.FB02WIXM = 1;
  ;
  while (FB02W00.FB02WIXM <= FB02W00.FB02WMAX) /* max map lines*/
  /* AND FB02W03.PC2CUXID(FB02WIXM) NE ' ';/* and data*/
  /* TO Display Orders with Xref. Sakthi. 07/18/01*/
    if (FB02W03.PC2CUXID[FB02WIXM] != " ")
      ;
      FBHREC.FBHGROUP = FB02W03.FB02W03D[FB02WIXM];
      ;
      set FB02W04 empty;
      ;
      FB02W00.PC2CUXID = FBHREC.PC2CUXID; /* Save customer*/
      FB02W04.PC2CUXID = FBHREC.PC2CUXID; /* Customer to storage record*/
      FB02W00.XWHCD = FBHREC.XWHCD; /* Save warehouse*/
      FB02W04.XWHCD = FBHREC.XWHCD; /* Warehouse to storage record*/
      if (FBHREC.FB7BUYST == "Y")
        FB02W00.FB7BUYST = FBHREC.FB7BUYST; /* Save stat-ind*/
        FB02W04.FB7BUYST = FBHREC.FB7BUYST; /* Stat-ind to storage rec*/
      else
        FB02W00.FB7BUYST = "N"; /* Save stat-ind*/
        FB02W04.FB7BUYST = "N"; /* Stat-ind to storage rec*/
      end
      FB02W00.FB8BUYDT = FBHREC.FB8BUYDT; /* Save order buy date*/
      FB02W04.FB8BUYDT = FBHREC.FB8BUYDT; /* Save order buy date*/
      if (FBHREC.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB02W04.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      end
      if (FBHREC.FB-RED-BLA-FL == " ")
        FB02W04.FB02W-RED-BLA-FL = "N";
      else
        FB02W04.FB02W-RED-BLA-FL = FBHREC.FB-RED-BLA-FL;
      end
      FB02W00.OP1CUOID = FBHREC.OP1CUOID; /* cust order #*/
      FB02W04.OP1CUOID = FBHREC.OP1CUOID; /* cust order #*/
      FB02W00.OP1NORID = FBHREC.OP1NORID; /* nike order #*/
      FB02W04.OP1NORID = FBHREC.OP1NORID; /* nike order #*/
      FB02W00.XDSCD = FBHREC.XDSCD; /* drs code*/
      FB02W04.XDSCD = FBHREC.XDSCD; /* drs code*/
      FB02W04.FB02W-MSR-IND = FB02W03.FB02W-MSR-IND[FB02WIXM];
      FB02W04.OP1CUNDT = FB02W03.OP1CUNDT[FB02WIXM];
      FB02W04.FB02W-DIVERT-FL = FB02W03.FB02W-DIVERT-FL[FB02WIXM];
      ;
      FB02221(); /* accum xref qtys*/
      ;
      FBHREC.FBHGROUP = FB02W03.FB02W03D;
      ;
      FB02W05.FB02W05R[FB02WIXM] = FB02W04.FB02W04R;
      ;
    end
    FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Move each temporary storage line from the record to*/
   /* the map line.  Unprotect and display the warehouse fields*/
   /* when there is customer xref data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX; /* set to max lines*/
  ;
  FB02M010.FB02MAC = FB02W00.FB02WAC; /* product accept fl*/
  ;
  while (FB02W00.FB02WIXM >= 1)
    ;
    if (FB02W05.PC2CUXID[FB02WIXM] != " ")
     /* IF FB02W04.FB02W-DIVERT-FL EQ 'D';*/
        /* MOVE 'N' FB02W05.FB7BUYST(FB02WIXM);*/
     /* END;*/
      ;
      FB02W04.FB02W04R = FB02W05.FB02W05R[FB02WIXM];
      FB02M010.PC2CUXID[FB02WIXM] = FB02W04.PC2CUXID;
      FB02M010.FB7BUYST[FB02WIXM] = FB02W04.FB7BUYST;
      FB02M010.XWHCD[FB02WIXM] = FB02W04.XWHCD;
      FB02M010.FB02M-DIVERT-FL[FB02WIXM] = FB02W04.FB02W-DIVERT-FL;
      FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = FB02W04.FB02W-RED-BLA-FL;
      FB02M010.FB02MCTO[FB02WIXM] = FB02W04.FB02WCTO;
      FB02M010.OP1CUOID[FB02WIXM] = FB02W04.OP1CUOID;
      FB02M010.OP1NORID[FB02WIXM] = FB02W04.OP1NORID;
      FB02M010.XDSCD[FB02WIXM] = FB02W04.XDSCD;
      FB02M010.FB02M-MSR-IND[FB02WIXM] = FB02W04.FB02W-MSR-IND;
      FB02M010.OP1CUNDT[FB02WIXM] = FB02W04.OP1CUNDT;
      ;
      if (FB02M010.FB7BUYST[FB02WIXM] == "Y")
        if (FB02M010.XDSCD[FB02WIXM] == "1" || 
        FB02M010.XDSCD[FB02WIXM] == "2")
          FB02W04.FB02W-RED-BLA-FL = "N";
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = FB02W04.FB02W-RED-BLA-FL;
        else
          FB02W04.FB02W-RED-BLA-FL = "Y";
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = FB02W04.FB02W-RED-BLA-FL;
        end
      else
        if (FB02M010.FB7BUYST[FB02WIXM] == "N")
          FB02W04.FB02W-RED-BLA-FL = "N";
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = FB02W04.FB02W-RED-BLA-FL;
        end
      end
      ;
      if (FB02M010.FB7BUYST[FB02WIXM] == "N" && 
      FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "O")
        set FB02M010.FB7BUYST[FB02WIXM] protect;
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] protect;
      else
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] cursor, normal;
      end
      ;
      set FB02M010.FB02MWHL[FB02WIXM] protect;
      set FB02M010.FB02MRBL[FB02WIXM] protect;
      set FB02M010.XWHCD[FB02WIXM] cursor, normal;
      set FB02M010.FB02M-RED-BLA-FL[FB02WIXM] protect;
      if (FB02W04.FB8BUYDT > FB02W00.FB02WBDT)
        set FB02M010.FB7BUYST[FB02WIXM] cursor;
      else
        set FB02M010.FB7BUYST[FB02WIXM] cursor;
      end
      ;
      set FB02M010.FB02MSOL[FB02WIXM] protect;
      set FB02M010.FB02MDPL[FB02WIXM] protect;
      set FB02M010.OP1CUOID[FB02WIXM] protect;
      set FB02M010.FB02MDPL[FB02WIXM] protect;
      set FB02M010.OP1NORID[FB02WIXM] protect;
      set FB02M010.FB02MDCL[FB02WIXM] protect;
      set FB02M010.XDSCD[FB02WIXM] cursor, normal;
      ;
      FB02222(); /* Load xref size data*/
      ;
    else
      set FB02M010.FB7BUYST[FB02WIXM] invisible, skip;
      set FB02M010.FB02M-DIVERT-FL[FB02WIXM] invisible, noHighLight, skip;
      set FB02M010.FB02MWHL[FB02WIXM] initialAttributes;
      set FB02M010.XWHCD[FB02WIXM] initialAttributes;
      set FB02M010.FB02MRBL[FB02WIXM] initialAttributes;
      set FB02M010.FB02M-RED-BLA-FL[FB02WIXM] protect;
      set FB02M010.FB02MSOL[FB02WIXM] initialAttributes;
      set FB02M010.OP1CUOID[FB02WIXM] initialAttributes;
      set FB02M010.FB02MDPL[FB02WIXM] initialAttributes;
      set FB02M010.OP1NORID[FB02WIXM] initialAttributes;
      set FB02M010.FB02MDCL[FB02WIXM] initialAttributes;
      set FB02M010.XDSCD[FB02WIXM] initialAttributes;
      set FB02M010.FB02M-MSR-IND[FB02WIXM] initialAttributes;
      set FB02M010.OP1CUNDT[FB02WIXM] initialAttributes;
    end
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
    ;
  end
  ;
end // end FB02220

// Accumulate xref quantities
Function FB02221()
  ;
   /* ------------------------------------------------------------*/
   /* ACcumulate size totals for the customer/xref*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 40)
    ;
    if (FBHREC.FB7QTB[FB02WIX1] != 0)
      FB02W00.FB02WWF1 = FBHREC.FB7QTB[FB02WIX1];
      FB02W04.FB7QTB[FB02WIX1] = FB02W04.FB7QTB[FB02WIX1] + FB02WWF1;
      FB02W04.FB02WCTO = FB02W04.FB02WCTO + FB02W00.FB02WWF1;
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
  ;
end // end FB02221

// Load xref size data
Function FB02222()
  ;
   /* ------------------------------------------------------------*/
   /* Check map index to determine what xref to load size*/
   /* data for. Use the current size index as the starting point*/
   /* for loading the sizes to the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = FB02W00.FB02WCSI; /* Current size*/
  FB02W00.FB02W-SAVED-FB02WCSI = FB02W00.FB02WCSI; /* Save it*/
  FB02W00.FB02WIX2 = 1; /* Map size index*/
  ;
  if (FB02W00.FB02WIXM == 1) /* xref 1*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W04.FB7QTB[FB02WIX1] != 0)
        FB02M010.FB02MC1Z[FB02WIX2] = FB02W04.FB7QTB[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
  end
  ;
  ;
  if (FB02W00.FB02WIXM == 2) /* xref 2*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W04.FB7QTB[FB02WIX1] != 0)
        FB02M010.FB02MC2Z[FB02WIX2] = FB02W04.FB7QTB[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
  end
  ;
  ;
  if (FB02W00.FB02WIXM == 3) /* xref 3*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W04.FB7QTB[FB02WIX1] != 0)
        FB02M010.FB02MC3Z[FB02WIX2] = FB02W04.FB7QTB[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
  end
  ;
  ;
  if (FB02W00.FB02WIXM == 4) /* xref 4*/
    ;
    while (FB02W00.FB02WIX2 <= 9) /* Max sizes on map*/
      if (FB02W04.FB7QTB[FB02WIX1] != 0)
        FB02M010.FB02MC4Z[FB02WIX2] = FB02W04.FB7QTB[FB02WIX1];
      end
      FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
      FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
    end
  end
end // end FB02222

// Check attention ID
Function FB02300()
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "FB02"; /* TO application*/
    XSFBS01();
    set FB02M010.CATOAP cursor, bold;
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for invalid fastpath*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.FB02WIFL == "Y") /* Invalid fastpath*/
    converseLib.validationFailed(303);
    set FB02M010.SY1STNBR invisible, skip;
    set FB02M010.SY2CLRID invisible, skip;
    set FB02M010.XDMCD invisible, skip;
    set FB02M010.FB02MBYM invisible, skip;
    if (converseVar.eventKey not pf1
     && converseVar.eventKey not pf3
     && converseVar.eventKey not pf4)
      exit stack;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check for no frozen bottom line availability*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02W00.FB02WBLF == "N") /* no vfblav01 row found*/
    converseLib.validationFailed(305); /* hit pf18 to freeze b/l*/
    if (converseVar.eventKey not pf1
     && converseVar.eventKey not pf3
     && converseVar.eventKey not pf4
     && converseVar.eventKey not pf18)
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FB02310(); /* Validate scroll request*/
    return; /* Exit to next process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF10 or PF11*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FB02320(); /* Validate scroll request*/
    ;
    return; /* Exit to next process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FB02110(); /* Purge temp storage*/
      ;
      COMMAREA.CATOAP = FB02M010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB02M010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB02M010.CATOAP cursor, bold;
      exit stack;
    else
      FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* Help screen requested*/
    ;
    FB02110(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB01*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3)
    ;
    FB02110(); /* Purge temp storage*/
    ;
     /* SET FBXREC EMPTY; replace with new product and codes*/
     /* SET FBWREC EMPTY;*/
     /* MOVE FBXREC.FBXGROUP TO FBWREC.FBWFILL;*/
    ;
    COMMAREA.CATOAP = "FB01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* Menu screen requested*/
    ;
    FB02110(); /* Purge temp storage*/
    ;
    set FBXREC empty;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF13 transfer to FB08*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13) /* FB01 requested*/
    ;
    FB02110(); /* Purge temp storage*/
    ;
    /* SET FBXREC EMPTY;*/
    /* SET FBWREC EMPTY;*/
    /* MOVE FBXREC.FBXGROUP TO FBWREC.FBWFILL;*/
    COMMAREA.CATOAP = "FB08"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF18 transfer to FB09*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18) /* FB09 requested*/
    ;
    FB02110(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "FB09"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB02M010.XXXPRCNM = "FB02300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter /* (Process screen input)*/
   || converseVar.eventKey is pf6   /* Next product*/
   || converseVar.eventKey is pf15  /* Print screen*/
   || converseVar.eventKey is pf16) /* Accept*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FB02M010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02M010.XXXPRCNM = "FB02300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;
  ;
  ;
  ;
end // end FB02300

// Validate scroll request
Function FB02310()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB02W00.FB02WTSP < 2)       /* and no previous pages*/
    ;
    FB02M010.XXXPRCNM = "FB02310"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB02W00.FB02WTSP >= FB02W00.TA5TSQIX) /* and no more pages*/
    ;
    FB02M010.XXXPRCNM = "FB02310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
  ;
end // end FB02310

// Validate scroll request
Function FB02320()
  ;
   /* ------------------------------------------------------------*/
   /* Validate that size scroll is positive and not greater than*/
   /* 40.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB02M010.FB02MSZS < 1
   || FB02M010.FB02MSZS > 40)
    set FB02M010.FB02MSZS cursor, bold;
    converseLib.validationFailed(10); /* Invalid value*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    FB02W00.FB02WWF1 = FB02WCSI - FB02M010.FB02MSZS;
    FB02W00.FB02WWF2 = FB02WCSI - 1;
    ;
    if (FB02W00.FB02WWF1 < FB02W00.FB02WFSI
     && FB02W00.FB02WWF2 < FB02W00.FB02WFSI)
      converseLib.validationFailed(23); /* No more columns to left to display*/
      FB02M010.XXXPRCNM = "FB02320"; /* Module identification*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    FB02W00.FB02WWF1 = FB02WCSI + FB02M010.FB02MSZS;
    ;
    if (FB02W00.FB02WWF1 > FB02W00.FB02WLSI) /* last size index*/
      converseLib.validationFailed(24); /* No more columns to right to display*/
      FB02M010.XXXPRCNM = "FB02320"; /* Module identification*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
  ;
end // end FB02320

// Reset highlighted fields
Function FB02400()
  ;
   /* ----------------------------------------------------*/
   /* Set enterable fields normal*/
   /* ----------------------------------------------------*/
  ;
  set FB02M010.FB02MSZS normal;
  set FB02M010.SY1STNBR initialAttributes;
  set FB02M010.SY2CLRID initialAttributes;
  set FB02M010.XDMCD initialAttributes;
  ;
   /* ----------------------------------------------------*/
   /* Set the warehouse code to normal*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 4)
    if (FB02M010.PC2CUXID[FB02WIX1] != " ")
      set FB02M010.XWHCD[FB02WIX1] normal;
      set FB02M010.XDSCD[FB02WIX1] normal;
      set FB02M010.FB02M-RED-BLA-FL[FB02WIX1] protect;
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
  ;
end // end FB02400

// Verify entered data
Function FB02500()
  ;
   /* ----------------------------------------------------*/
   /* If data was previously loaded and there was a*/
   /* blank xref do not allow any processing.*/
   /* ----------------------------------------------------*/
  ;
  if (FB02W00.FB02WBXF == "Y") /* Blank xref*/
    if (converseVar.eventKey is pf6)
      /* next sentence*/
    else
      converseLib.validationFailed(349);
      exit stack;
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* If the style, color or dimension or buy month*/
   /* entered (ie changed) then perform process to*/
   /* validate the key fields.  if no style, color*/
   /* dim on screen by either entry or from FBXREC*/
   /* indicate an error and ezeflo to display message.*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WKFC = "N"; /* Key fields were changed*/
  ;
  if (FB02M010.SY1STNBR != " " /* Style exists or*/
   || FB02M010.SY2CLRID != " " /* Color exists or*/
   || FB02M010.XDMCD != " "    /* Dimension exists  or*/
   || FB02M010.FB02MBYM != 0)  /* Buy date exists*/
    if (FB02M010.SY1STNBR != FB02W01.SY1STNBR /* Style changed  or*/
     || FB02M010.SY2CLRID != FB02W01.SY2CLRID /* Color changed or*/
     || FB02M010.XDMCD != FB02W01.XDMCD       /* Dimension changed or*/
     || FB02M010.FB02MBYM != FB02W01.FB02WBYM) /* Buy date changed*/
      ;
      FB02510(); /* Edit key fields*/
      ;
    end
  else
    if (FB02M010.FB02MBYM == 0) /* No buy date entered*/
      set FB02M010.FB02MBYM cursor, bold;
      converseLib.validationFailed(8); /* Required field enter a valid value*/
    end
    if (FB02M010.XDMCD == " ") /* No dimension entered*/
      set FB02M010.XDMCD cursor, bold;
      converseLib.validationFailed(8); /* Required field enter a valid value*/
    end
    if (FB02M010.SY2CLRID == " ") /* No color entered*/
      set FB02M010.SY2CLRID cursor, bold;
      converseLib.validationFailed(8); /* Required field enter a valid value*/
    end
    if (FB02M010.SY1STNBR == " ") /* No style entered*/
      set FB02M010.SY1STNBR cursor, bold;
      converseLib.validationFailed(8); /* Required field enter a valid value*/
    end
    ;
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* If key fields have changed, verify only the enter*/
   /* key was pressed.*/
   /* If warehouse codes were changed verify that no key*/
   /* fields were changed and that the enter key was*/
   /* pressed.*/
   /* ----------------------------------------------------*/
  ;
  if (FB02W00.FB02WKFC == "Y") /* Key fields were changed*/
    if (converseVar.eventKey is enter)
      /* next sentence*/
    else
      set FB02M010.SY1STNBR cursor, bold;
      converseLib.validationFailed(111); /* Data cannot be changed with this*/
                                   /* function*/
    end
  end
  ;
  if (FB02W00.FB02WKFC == "Y")
    FB02W00.FB02WIXM = FB02W00.FB02WMAX;
    while (FB02W00.FB02WIXM >= 1)
      if (FB02M010.FB7BUYST[FB02WIXM] != FB02W05.FB7BUYST[FB02WIXM])
        converseLib.validationFailed(232); /* Cannot 'buy' future ord & style*/
        set FB02M010.FB7BUYST[FB02WIXM] cursor, bold;
      end
      FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
    end
  end
  ;
  if (FB02W00.FB02WKFC == "Y")
    FB02W00.FB02WIXM = FB02W00.FB02WMAX;
    while (FB02W00.FB02WIXM >= 1)
      if (FB02M010.XWHCD[FB02WIXM] != FB02W05.XWHCD[FB02WIXM])
        converseLib.validationFailed(232); /* Cannot change warehouse & style*/
        set FB02M010.XWHCD[FB02WIXM] cursor, bold;
      end
      FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* If key fields have changed and any errors to this*/
   /* point set the dipslay storage key fields blank*/
   /* to force edits. If no errors move new key fields*/
   /* to the FBXREC fields and set request data flag to*/
   /* yes.*/
   /* ----------------------------------------------------*/
  ;
  if (FB02W00.FB02WKFC == "Y") /* Key fields were changed*/
    if (converseVar.validationMsgNum != 0)
      FB02W01.SY1STNBR = " ";
      FB02W01.SY2CLRID = " ";
      FB02W01.XDMCD = " ";
      FB02W01.FB02WBYM = 0;
      exit stack;
    else
      FB02W00.FB02WRDF = "Y"; /* Request data flag*/
      ;
      FB02W00.CAUSERID = FBXREC.CAUSERID;
      FB02W00.XPLCD = FBXREC.XPLCD;
      ;
      set FBXREC empty;
      FBXREC.CAUSERID = FB02W00.CAUSERID;
      FBXREC.XPLCD = FB02W00.XPLCD;
      FBXREC.SY1STNBR[1] = FB02M010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB02M010.SY2CLRID;
      FBXREC.XDMCD[1] = FB02M010.XDMCD;
      FBXREC.XQACD[1] = "01";
      FBXREC.XPGCD[1] = "000";
      FBXREC.XUMCD[1] = "01";
      FBXREC.FB8BUYDT = FB02W00.FB02WBDT;
      FB02W00.FB02WSTI = 1;
      FB02S13(); /* Refresh application*/
      exit stack; /* Ezeflo to obtain data*/
    end
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* If warehouse codes were changed verify that no key*/
   /* fields were changed and that the enter key was*/
   /* pressed.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    FB02W00.FB02WIXM = FB02W00.FB02WMAX;
    while (FB02W00.FB02WIXM >= 1)
      if (FB02M010.XWHCD[FB02WIXM] != FB02W05.XWHCD[FB02WIXM]
       || FB02M010.FB7BUYST[FB02WIXM] != FB02W05.FB7BUYST[FB02WIXM])
        converseLib.validationFailed(111); /* Data cannot be changed with this*/
                                   /* function*/
        set FB02M010.XWHCD[FB02WIXM] cursor, bold;
      else
        if (FB02M010.XDSCD[FB02WIXM] != FB02W05.XDSCD[FB02WIXM])
          converseLib.validationFailed(111);
          set FB02M010.XDSCD[FB02WIXM] cursor, bold;
        else
   /* IF FB02M010.FB02M-RED-BLA-FL(FB02WIXM) NE*/
   /* FB02W05.FB02W-RED-BLA-FL(FB02WIXM);*/
   /* MOVE 111 TO EZEMNO;    /* Data cannot be changed with this*/
   /* /* function*/
   /* SET FB02M010.FB02M-RED-BLA-FL(FB02WIXM) CURSOR,BRIGHT;*/
   /* END;*/
        end
      end
      FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* If buy status indicator has changed, verify*/
   /* only 'y' or 'n' was used, and only on future*/
   /* orders.*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX;
  ;
  while (FB02W00.FB02WIXM >= 1)
    if (FB02M010.FB7BUYST[FB02WIXM] != FB02W05.FB7BUYST[FB02WIXM])
      if (FB02W05.FB8BUYDT[FB02WIXM] > FB02W00.FB02WBDT)
        if (FB02M010.FB7BUYST[FB02WIXM] == "Y"
         || FB02M010.FB7BUYST[FB02WIXM] == "N")
              /* continue;*/
        else
          converseLib.validationFailed(10); /* INVALID DATA;*/
          set FB02M010.FB7BUYST[FB02WIXM] cursor, bold;
        end
      end
    end
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* If divert status indicator has changed, verify*/
   /* only 'd','n', or 'o' was used, and only on future*/
   /* orders.*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX;
  ;
  while (FB02W00.FB02WIXM >= 1)
    if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] != 
    FB02W05.FB02W-DIVERT-FL[FB02WIXM])
      if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "D"
       || FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "N"
       || FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "O"
       || FB02M010.FB02M-DIVERT-FL[FB02WIXM] == " ")
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] normal;
      else
        converseLib.validationFailed(550); /* INVALID DATA;*/
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] cursor, bold;
      end
    end
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
  end
  ;
   /* -------------------------------------------------------------------*/
   /* If divert flag is equal to 'D' then DRS code must be '1'*/
   /* -------------------------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX;
  ;
  while (FB02W00.FB02WIXM >= 1)
    if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "D")
      if (FB02M010.XDSCD[FB02WIXM] == "1")
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] normal;
      else
        converseLib.validationFailed(549); /* INVALID DATA;*/
        set FB02M010.FB02M-DIVERT-FL[FB02WIXM] cursor, bold;
      end
    end
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
  end
  ;
   /* -------------------------------------------------------------------*/
   /* If Divert flag is equal to 'D' then Buy status flag is 'N'*/
   /* -------------------------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX;
  ;
  while (FB02W00.FB02WIXM >= 1)
    if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "D")
      if (FB02M010.FB7BUYST[FB02WIXM] == "N")
        set FB02M010.FB7BUYST[FB02WIXM] normal;
      else
        converseLib.validationFailed(548); /* INVALID DATA;*/
        set FB02M010.FB7BUYST[FB02WIXM] cursor, bold;
      end
    end
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* If warehouse has been entered validate against*/
   /* the xwhtbl.Verify that it is one of the*/
   /* warehouses on the heading part of the screen.*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WIXM = FB02W00.FB02WMAX;
  ;
  while (FB02W00.FB02WIXM >= 1)
    if (FB02M010.XWHCD[FB02WIXM] != FB02W05.XWHCD[FB02WIXM]
     && FB02M010.XWHCD[FB02WIXM] != " ")
      if (FB02M010.XWHCD[FB02WIXM] in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XWHTBL.XDVCD1[sysVar.arrayIndex] == "01"
         || XWHTBL.XDVCD2[sysVar.arrayIndex] == "01"
         || XWHTBL.XDVCD3[sysVar.arrayIndex] == "01")
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD2[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD3[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD4[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD5[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD6[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD7[sysVar.arrayIndex] == "02"
           || XWHTBL.XGPCD8[sysVar.arrayIndex] == "02")
                 /* next sentence*/
          else
            converseLib.validationFailed(10); /* Invalid data*/
            set FB02M010.XWHCD[FB02WIXM] cursor, bold;
          end
        end
      else
        converseLib.validationFailed(10); /* Invalid data*/
        set FB02M010.XWHCD[FB02WIXM] cursor, bold;
      end
      if (converseVar.validationMsgNum != 10) /* Invalid warehouse*/
        if (FB02M010.XWHCD[FB02WIXM] == FB02W01.XWHCD[1]
         || FB02M010.XWHCD[FB02WIXM] == FB02W01.XWHCD[2]
         || FB02M010.XWHCD[FB02WIXM] == FB02W01.XWHCD[3])
           /* next sentence*/
        else
          converseLib.validationFailed(529); /* Only warehouse already entered etc*/
          set FB02M010.XWHCD[FB02WIXM] cursor, bold;
        end
      end
    end
    ;
    if (FB02M010.XDSCD[FB02WIXM] == "1"
     || FB02M010.XDSCD[FB02WIXM] == "2"
     || FB02M010.XDSCD[FB02WIXM] == "3"
     || FB02M010.XDSCD[FB02WIXM] == " "
    )
    else
      converseLib.validationFailed(523); /* invalid drs code*/
      set FB02M010.XDSCD[FB02WIXM] cursor, bold;
    end
    ;
    if (FB02M010.XWHCD[FB02WIXM] != "  "
     && (FB02M010.XDSCD[FB02WIXM] == " " || 
    FB02M010.XDSCD[FB02WIXM] == "1"))
      converseLib.validationFailed(524); /* drs code should be entered*/
      set FB02M010.XDSCD[FB02WIXM] cursor, bold;
    else
    end
    if (FB02M010.XDSCD[FB02WIXM] == "1"
     && FB02M010.XWHCD[FB02WIXM] != "  ")
      converseLib.validationFailed(525); /* warehouse code should be blank*/
      set FB02M010.XWHCD[FB02WIXM] cursor, bold;
    else
    end
    if (FB02M010.XWHCD[FB02WIXM] == "  "
     && FB02M010.FB02M-RED-BLA-FL[FB02WIXM] != " "
     && FB02M010.XDSCD[FB02WIXM] != "1"
    )
      converseLib.validationFailed(526); /* drs code should be 1*/
      set FB02M010.XDSCD[FB02WIXM] cursor, bold;
    else
    end
    ;
    if (FB02M010.FB02M-RED-BLA-FL[FB02WIXM] != 
    FB02W05.FB02W-RED-BLA-FL[FB02WIXM])
      if (FB02M010.FB02M-RED-BLA-FL[FB02WIXM] != "Y"
       && FB02M010.FB02M-RED-BLA-FL[FB02WIXM] != "N")
        converseLib.validationFailed(10); /* Invalid data*/
        set FB02M010.FB02M-RED-BLA-FL[FB02WIXM] cursor, bold;
      end
    end
   /* IF FB02M010.FB02M-RED-BLA-FL(FB02WIXM) NE 'N'*/
   /* AND (FB02M010.XDSCD(FB02WIXM) EQ '1' OR*/
   /* FB02M010.XDSCD(FB02WIXM) EQ '2');*/
   /* MOVE 527 TO EZEMNO;*/
   /* SET FB02M010.FB02M-RED-BLA-FL(FB02WIXM) CURSOR,BRIGHT;*/
   /* END;*/
   /* IF FB02M010.FB7BUYST(FB02WIXM) EQ 'Y'*/
   /* AND FB02M010.FB02M-RED-BLA-FL(FB02WIXM) NE 'Y'*/
   /* AND FB02M010.XDSCD(FB02WIXM) EQ '3';*/
   /* MOVE 528 TO EZEMNO;*/
   /* SET FB02M010.FB02M-RED-BLA-FL(FB02WIXM) CURSOR,BRIGHT;*/
   /* END;*/
    ;
    FB02W00.FB02WIXM = FB02W00.FB02WIXM - 1;
  end
  ;
  if (converseVar.eventKey is pf16) /* accept*/
    ;
    FB02W00.FB02WTOL = FB9REC.FB9BTQTY;
    FB02W00.FB02WTOL = FB02W00.FB02WTOL * -1;
    if (FB02M010.FB02MSTQ < 0) /* negative stock qtb*/
      if (FB02M010.FB02MSTQ < FB02W00.FB02WTOL)
        converseLib.validationFailed(347); /* cannot exceed negative tolerance*/
      end
    end
    ;
    if (FB02M010.FB02MSTQ < 0) /* negative stock qtb*/
      if (FB02M010.FB02MSTQ > FB02W00.FB02WTOL
       && FB02W00.FB02WPAC != "Y") /* Pending accept flag*/
        converseLib.validationFailed(348); /* less than neg tolerance--confirm to*/
                                   /* update*/
        FB02W00.FB02WPAC = "Y"; /* Set flag for next time thru*/
      end
    end
    ;
    ;
  else
    FB02W00.FB02WPAC = "N"; /* Set a pending accept flag off*/
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FB02500

// Verify key fields
Function FB02510()
  ;
   /* ----------------------------------------------------*/
   /* Validate the buy month date using TA0040 subroutine.*/
   /* ----------------------------------------------------*/
  ;
  FB02W00.FB02WKFC = "N"; /* Key field changed flag*/
  ;
  ;
  if (FB02M010.FB02MBYM == 0)
    set FB02M010.FB02MBYM cursor, bold;
    converseLib.validationFailed(08);
  else
    if (FB02M010.FB02MBYM != FB02W01.FB02WBYM) /* Buy date changed*/
      ;
      set TA2REC empty; /* Initialize record*/
      ;
      FB02W00.FB02WBYM = FB02M010.FB02MBYM; /* Screen yymm date to WS*/
      FB02W00.FB02WYY = FB02W00.FB02WBYY; /* Format the date in*/
      FB02W00.FB02WMM = FB02W00.FB02WBMM; /* YYMMDD format*/
      FB02W00.FB02WDD = 01;
      TA2REC.TA2GRGEN = FB02W00.FB02WYMD;
      ;
      FB02S10(); /* Call Ta0040 to validate date*/
      ;
      if (TA2RTNCD == 0) /* Successful return code from TA0040*/
        FB02W01.FB02WBYM = FB02M010.FB02MBYM;
        FB02W00.FB02WBDT = TA2REC.TA2GRGGN;
        FB02W00.FB02WPBD = TA2REC.TA2GRGGN;
        FB02W00.FB02WFDT = TA2REC.TA2GRGGN;
      else
        set FB02M010.FB02MBYM cursor, bold;
        converseLib.validationFailed(17); /* Invalid date entered*/
      end
      ;
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate the style, color or dimension against*/
   /* the DPRODG.VSYCLR01 table.*/
   /* ----------------------------------------------------*/
  ;
  if (FB02M010.SY2CLRID == " ")
    FB02M010.SY2CLRID = "00 ";
    FB02W01.SY2CLRID = "00 ";
    FB02W00.SY2CLRID = "00 ";
  end
  if (FB02M010.XDMCD == " ")
    FB02M010.XDMCD = "00";
    FB02W01.XDMCD = "00";
    FB02W00.XDMCD = "00";
  end
  ;
  set PG2REC empty; /* Initialize record*/
  ;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FB02M010.SY1STNBR;
  PG2REC.SY2CLRID = FB02M010.SY2CLRID;
  PG2REC.XDMCD = FB02M010.XDMCD;
  ;
  XSPG202(); /* Obtain style color row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FB02W01.SY1SSTNM = PG2REC.SY1SSTNM;
    FB02W01.SY2CLRAB = PG2REC.SY2CLRAB;
    FB02W01.SY1STNBR = FB02M010.SY1STNBR;
    FB02W00.SY1STNBR = FB02M010.SY1STNBR;
    FB02W01.SY2CLRID = FB02M010.SY2CLRID;
    FB02W00.SY2CLRID = FB02M010.SY2CLRID;
    FB02W01.XDMCD = FB02M010.XDMCD;
    FB02W00.XDMCD = FB02M010.XDMCD;
  else
    set FB02M010.XDMCD bold;
    set FB02M010.SY2CLRID bold;
    set FB02M010.SY1STNBR cursor, bold;
    converseLib.validationFailed(22); /* Invalid style color entered*/
  end
  ;
  ;
  ;
  FB02W00.FB02WKFC = "Y"; /* Key field changed flag*/
  ;
  ;
end // end FB02510

// Process valid input
Function FB02600()
  ;
   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7)
    FB02W00.FB02WTSP = FB02W00.FB02WTSP - 1;
    FB02W00.XXXMSGNO = 13; /* Scroll backward successful*/
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    FB02W00.FB02WTSP = FB02W00.FB02WTSP + 1;
    FB02W00.XXXMSGNO = 12; /* Scroll forward successful*/
    return;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF10 or PF11 has been pressed increment or*/
   /* decrement the sizes requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10)
    FB02W00.FB02WSSR = "Y"; /* Scroll request*/
    FB02W00.FB02WCSI = FB02W00.FB02WCSI - FB02M010.FB02MSZS;
    FB02W00.XXXMSGNO = 15; /* Scroll left successful*/
    FB02W01.FB02WSZS = FB02M010.FB02MSZS;
    return;
  end
  ;
  if (converseVar.eventKey is pf11)
    FB02W00.FB02WSSR = "Y"; /* Scroll request*/
    FB02W00.FB02WCSI = FB02W00.FB02WCSI + FB02M010.FB02MSZS;
    FB02W00.XXXMSGNO = 14; /* Scroll right successful*/
    FB02W01.FB02WSZS = FB02M010.FB02MSZS;
    return;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF6 has been pressed get next product in*/
   /* FBXREC.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf6) /* Next product*/
    ;
    FB02610(); /* Set up for next product*/
    ;
    return;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF15 has been pressed submit JCl to run job*/
   /* FB1121.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15)
    ;
    FB02620(); /* Format JCL parms*/
    ;
    return;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF17 has been pressed submit JCl to run job*/
   /* PA1101.*/
   /* ----------------------------------------------------*/
  ;
   /* IF EZEAID IS PF17;*/
  ;
    /* PERFORM FB02622;               /* Format JCL parms*/
  ;
    /* EZERTN;*/
   /* END;*/
  ;
   /* ----------------------------------------------------*/
   /* If enter has been pressed and buy-stat-ind,*/
   /* warehouses, or reduce bottom line flags have been*/
   /* modified check flag on table to determine if*/
   /* model is being run--if flag is set to 'y'*/
   /* do not allow updates.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    FB02W00.FB02WWCH = "N"; /* Warehouse change flag*/
    FB02W00.FB02WIXM = 1;
    while (FB02W00.FB02WIXM <= FB02W00.FB02WMAX)
      ;
      if (FB02M010.FB7BUYST[FB02WIXM] == "Y")
        if (FB02M010.XDSCD[FB02WIXM] == "1" || 
        FB02M010.XDSCD[FB02WIXM] == "2")
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = "N";
        else
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = "Y";
        end
      else
        if (FB02M010.FB7BUYST[FB02WIXM] != " "
         && FB02M010.FB7BUYST[FB02WIXM] == "N")
          FB02M010.FB02M-RED-BLA-FL[FB02WIXM] = "N";
        end
      end
      ;
      if (FB02W05.XWHCD[FB02WIXM] != FB02M010.XWHCD[FB02WIXM]
       || FB02W05.FB7BUYST[FB02WIXM] != FB02M010.FB7BUYST[FB02WIXM]
       || FB02W05.FB02W-RED-BLA-FL[FB02WIXM] != 
      FB02M010.FB02M-RED-BLA-FL[FB02WIXM]
       || FB02W05.XDSCD[FB02WIXM] != FB02M010.XDSCD[FB02WIXM])
        FB02W00.FB02WWCH = "Y"; /* Set whse chgd flag to y*/
      end
      FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
    end
    ;
    if (FB02W00.FB02WWCH == "Y") /* Whse of red-bla-fl has changed*/
      FB02650(); /* Check model in process fl*/
    end
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* If enter has been pressed and buy-status, warehouses or flags*/
   /* have been modified update the VFBLAV01 tables and*/
   /* the VDNORD01.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    FB02W00.FB02WUDF = "N"; /* Update flag*/
   /* **************************************/
   /* CHANGE BY GREDDY -BEGIN 02/22/00*/
   /* **************************************/
    FB02W00.FB02WIXM = 1;
    ;
    while (FB02W00.FB02WIXM <= FB02W00.FB02WMAX)
      if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] != 
      FB02W05.FB02W-DIVERT-FL[FB02WIXM])
        if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "N"
         && FB02W05.FB02W-DIVERT-FL[FB02WIXM] == "D")
          FB02645();
        end
      end
      ;
      FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
      ;
    end
    ;
    FB02W00.FB02WIXM = 1;
    ;
    while (FB02W00.FB02WIXM <= FB02W00.FB02WMAX)
      if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] != 
      FB02W05.FB02W-DIVERT-FL[FB02WIXM])
        if (FB02M010.FB02M-DIVERT-FL[FB02WIXM] == "D"
         && FB02W05.FB02W-DIVERT-FL[FB02WIXM] == "N")
          FB02644();
        end
      end
      ;
      FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
      ;
    end
    if (converseVar.validationMsgNum > 0) /* An error message*/
      return;
    else
   /* CONTINUE*/
    end
   /* **********************************************/
   /* CHANGE BY GREDDY -END 02/22/00*/
   /* **********************************************/
    FB02W00.FB02WIXM = 1;
    while (FB02W00.FB02WIXM <= FB02W00.FB02WMAX)
      if (FB02W05.XWHCD[FB02WIXM] != FB02M010.XWHCD[FB02WIXM]
       || FB02W05.FB7BUYST[FB02WIXM] != FB02M010.FB7BUYST[FB02WIXM]
       || FB02W05.FB02W-RED-BLA-FL[FB02WIXM] != 
      FB02M010.FB02M-RED-BLA-FL[FB02WIXM]
       || FB02W05.XDSCD[FB02WIXM] != FB02M010.XDSCD[FB02WIXM]
      )
        FB02630(); /* Update VFBLAV01 row(s)*/
        ;
        FB02640(); /* Update VDNORD01 row*/
        ;
        FB02642(); /* Set flags*/
        ;
        FB02S14(); /* update vflqtb01 row*/
        ;
        FB02S23(); /* update vfsctl01 row*/
        ;
      end
      ;
  /* IF FB02W05.FB02W-DIVERT-FL(FB02WIXM) NE*/
  /* FB02M010.FB02M-DIVERT-FL(FB02WIXM);*/
  /* PERFORM FB02643;           /* Update VDRSAT01 row*/
  /* END;*/
      ;
      FB02W00.FB02WIXM = FB02W00.FB02WIXM + 1;
    end
    ;
    if (FB02W00.FB02WUDF == "Y") /* Records updated*/
      FB02W00.FB02WUDF = "N";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit database change*/
      FB02W00.FB02WRDF = "Y"; /* Request data flag*/
      FB02W00.XXXMSGNO = 32; /* Updates successfully completed*/
      FB02S13(); /* Refresh application*/
      return;
    end
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF16 (accept) update the vdnord01 set accept*/
   /* flag and update vdrsat01 divert flag.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Accept*/
    ;
    FB02650(); /* Check model in process fl*/
    ;
    /* ------------------------------------------------------------*/
     /* Get the direct ship / nil quantity to buy.*/
    /* ------------------------------------------------------------*/
    ;
    set FBHREC empty; /* Init record*/
    ;
    FBHREC.SY1STNBR = FB02W00.SY1STNBR;
    FBHREC.SY2CLRID = FB02W00.SY2CLRID;
    FBHREC.XDMCD = FB02W00.XDMCD;
    FBHREC.XQACD = "01";
    FBHREC.PC2INSEG = "000";
    FBHREC.XPGCD = "00";
    FBHREC.XUMCD = "01";
    FBHREC.FBHDSAFL = "*";
    FBHREC.XWHCD = "*";
    FBHREC.XDSCD = "*";
    FBHREC.FB7BUYST = "*";
    FBHREC.FB8BUYDT = FB02W00.FB02WBDT;
    ;
    FB02S01(); /* Open cursor for DFBUY.VDNORD01*/
    FB02S02(); /* Fetch DFBUY.VDNORD01 row*/
    ;
    while (FB02W00.FB02WDNC == "N") /* While not end of cursor*/
      if (FBHREC.XDVCD != "02")
        FBHREC.FBHDSAFL = "Y"; /* Direct ship flag*/
        FB02S12(); /* Update Dfbuy.Vdnord01*/
      end
      FB02S02(); /* Fetch DFBUY.VDNORD01 row*/
      ;
    end
    ;
    FB02S03(); /* Close DFBUY.VDNORD01 cursor*/
    ;
    FBKREC.FBKFSAFL = "Y";
    ;
    FB02S14(); /* update dfbuy.vfqtb01 row*/
    FB02S18(); /* update dfbuy.vffqtb1 row*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit database change*/
    FB02W00.FB02WRDF = "Y"; /* Request data flag*/
    FB02W00.FB02WAC = "Y"; /* accept flag*/
    FB02W00.FB02WPAC = "N"; /* Pending accept flag*/
    FB02W00.XXXMSGNO = 32; /* UPdated successfully completed*/
    ;
    FB02S13(); /* Refresh application*/
    ;
  end
end // end FB02600

// Set up for next product
Function FB02610()
   /* ------------------------------------------------------*/
   /* Bubble up the array in FBXREC so that the next product*/
   /* is moved to the first level of the table and, and*/
   /* all subsequent products are shifted down one.*/
   /* The first product will be lost, as will the last one.*/
   /* ------------------------------------------------------*/
  ;
  FB02W00.FB02WIX1 = 2; /* Init work index*/
  FB02W00.FB02WIX2 = 1;
  ;
  while (FB02WIX1 <= 14
  ) /* AND FBXREC.SY1STNBR(FB02WIX1) NE ' ';*/
    FBXREC.SY1STNBR[FB02WIX2] = FBXREC.SY1STNBR[FB02WIX1];
    FBXREC.SY2CLRID[FB02WIX2] = FBXREC.SY2CLRID[FB02WIX1];
    FBXREC.XDMCD[FB02WIX2] = FBXREC.XDMCD[FB02WIX1];
    FBXREC.XQACD[FB02WIX2] = FBXREC.XQACD[FB02WIX1];
    FBXREC.PC2INSEG[FB02WIX2] = FBXREC.PC2INSEG[FB02WIX1];
    FBXREC.XPGCD[FB02WIX2] = FBXREC.XPGCD[FB02WIX1];
    FBXREC.XUMCD[FB02WIX2] = FBXREC.XUMCD[FB02WIX1];
  /* GREDDY - 02/22/00*/
    FBXREC.FBXPRIPO[FB02WIX2] = FBXREC.FBXPRIPO[FB02WIX1];
    FBXREC.FBXPRIBL[FB02WIX2] = FBXREC.FBXPRIBL[FB02WIX1];
  /* GREDDY - 02/22/00*/
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
    FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
  end
  ;
   /* move spaces to the last field in the fbxrec product array*/
  ;
  FBXREC.SY1STNBR[FB02WSTI] = " ";
  FBXREC.SY2CLRID[FB02WSTI] = " ";
  FBXREC.XDMCD[FB02WSTI] = " ";
  FBXREC.XQACD[FB02WSTI] = " ";
  FBXREC.PC2INSEG[FB02WSTI] = " ";
  FBXREC.XPGCD[FB02WSTI] = " ";
  FBXREC.XUMCD[FB02WSTI] = " ";
  /* GREDDY - 02/22/00*/
  FBXREC.FBXPRIPO[FB02WSTI] = 0;
  FBXREC.FBXPRIBL[FB02WSTI] = 0;
  /* GREDDY - 02/22/00*/
  ;
  FB02W00.FB02WSTI = FB02W00.FB02WSTI - 1;
  ;
  FB02S13(); /* Refresh application*/
  ;
  ;
end // end FB02610

// Format Jcl parms
Function FB02620()
  ;
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB02627(); /* format production jcl*/
    else
      FB02625(); /* format development jcl*/
    end
  else
    ;
    FB02M010.XXXPRCNM = "500"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
end // end FB02620

// Submit jcl to internal reader
Function FB02621()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB02M010.XXXPRCNM = "FB02621"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB02M010.XXXPRCNM = "FB02621"; /* module identification*/
    ;
  end
  ;
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB02621

// Format development Jcl parms
Function FB02625()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the jcl.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  TA6REC.TA6MSGSW = "N";
  ;
  FB02W00.FB02WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB02W00.FB02WIXT > 0) /* Until end of table*/
    ;
    ;
    if (FB02T01.TARTYPE[FB02WIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/
      ;
      FB02W00.SY1STNBR = FB02W01.SY1STNBR;
      FB02W00.SY2CLRID = FB02W01.SY2CLRID;
      FB02W00.XDMCD = FB02W01.XDMCD;
      FB02W00.FB02WPBD = FB02W00.FB02WBDT;
      FB02W00.XGPCD = "02";
      FB02W00.XQACD = "01";
      FB02W00.PC2INSEG = "00";
      FB02W00.XPGCD = "00";
      FB02W00.XUMCD = "01";
      ;
      TA6REC.TARJCL[TA6INDEX] = FB02W00.FB02WPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB02T01.TARTYPE[FB02WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB02T01.TARJCL[FB02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB02T01.TARTYPE[FB02WIXT]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB02T01.TARJCL[FB02WIXT] == "/*EOF") /* End of table*/
      ;
      FB02W00.FB02WIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB02W00.FB02WIXT = FB02W00.FB02WIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  FB02621(); /* Submit the JCL*/
  ;
   /* SET FB02W01 EMPTY               ; Refresh map*/
   /* SET FB02W03 EMPTY               ; Refresh map*/
   /* SET FB02W04 EMPTY               ; Refresh map*/
   /* SET FB02W05 EMPTY               ; Refresh map*/
  ;
  set FB02M010 initial; /* 010 input/output area*/
  FB02M010.XXXCURDT = " ";
  ;
   /* MOVE 'Y' TO FB02W00.FB02WRDF    ; Don't want to display data*/
  ;
  FB02W00.XXXMSGNO = 76; /* Job submitted for batch processing*/
  ;
  ;
  ;
end // end FB02625

// Format production Jcl parms
Function FB02627()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the jcl.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  TA6REC.TA6MSGSW = "N";
  ;
  FB02W00.FB02WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB02W00.FB02WIXT > 0) /* Until end of table*/
    ;
    ;
    if (FB02T02.TARTYPE[FB02WIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/
      ;
      FB02W00.SY1STNBR = FB02W01.SY1STNBR;
      FB02W00.SY2CLRID = FB02W01.SY2CLRID;
      FB02W00.XDMCD = FB02W01.XDMCD;
      FB02W00.FB02WPBD = FB02W00.FB02WBDT;
      FB02W00.XGPCD = "02";
      FB02W00.XQACD = "01";
      FB02W00.PC2INSEG = "00";
      FB02W00.XPGCD = "00";
      FB02W00.XUMCD = "01";
      ;
      TA6REC.TARJCL[TA6INDEX] = FB02W00.FB02WPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB02T02.TARTYPE[FB02WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB02T02.TARJCL[FB02WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB02T02.TARTYPE[FB02WIXT]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB02T02.TARJCL[FB02WIXT] == "/*EOF") /* End of table*/
      ;
      FB02W00.FB02WIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB02W00.FB02WIXT = FB02W00.FB02WIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  ;
  FB02621(); /* Submit the JCL*/
  ;
   /* SET FB02W01 EMPTY               ; Refresh map*/
   /* SET FB02W03 EMPTY               ; Refresh map*/
   /* SET FB02W04 EMPTY               ; Refresh map*/
   /* SET FB02W05 EMPTY               ; Refresh map*/
  ;
  set FB02M010 initial; /* 010 input/output area*/
  FB02M010.XXXCURDT = " ";
  ;
   /* MOVE 'Y' TO FB02W00.FB02WRDF    ; Don't want to display data*/
  ;
  FB02W00.XXXMSGNO = 76; /* Job submitted for batch processing*/
  ;
  ;
  ;
end // end FB02627

// Update Vfblav01 row(s)
Function FB02630()
  ;
  ;
  FB02W04.FB02W04R = FB02W05.FB02W05R[FB02WIXM];
  ;
   /* ------------------------------------------------------------*/
   /* If the warehouse has changed from one warehouse to*/
   /* another, increment the direct ship quantities for the*/
   /* entered warehouse and decrement the directship for the*/
   /* warehouse that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB-BL-UPD-FL = "N"; /* Flag for whether BLAV table updated*/
  ;
  if (FB02M010.FB7BUYST[FB02WIXM] == "N" /* Buy stat 'N and WHS changed*/
   && FB02M010.XWHCD[FB02WIXM] != FB02W04.XWHCD)
    FB0263010();
    FB02W00.FB-BL-UPD-FL = "Y";
  end
  ;
  if (FB02W00.FB-BL-UPD-FL == "N")
    if (FB02W04.FB7BUYST == FB02M010.FB7BUYST[FB02WIXM]
     && FB02M010.FB7BUYST[FB02WIXM] == "Y")
      ;
      if (FB02W04.XWHCD != " " /* Warehouse changed*/
       && FB02M010.XWHCD[FB02WIXM] != " "
       && FB02W04.XWHCD != FB02M010.XWHCD[FB02WIXM])
        ;
        FB02W00.FB02WIX2 = 1;
        ;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02M010.XWHCD[FB02WIXM])
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02M010.FB02M-RED-BLA-FL[FB02WIXM] == "Y")
          FB02631(); /* Decrement warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
        FB02W00.FB02WIX2 = 1;
        ;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02W04.XWHCD)
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02W04.FB02W-RED-BLA-FL == "Y")
          FB02632(); /* Increment warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
      end
      ;
      ;
   /* ------------------------------------------------------------*/
    /* If the warehouse has changed from a non-blank to blank*/
    /* increment the directship adjust quantities on the row*/
    /* for the warehouse that was changed.*/
   /* ------------------------------------------------------------*/
      ;
      if (FB02W04.XWHCD != " " /* Changed from non blank to blank*/
       && FB02M010.XWHCD[FB02WIXM] == " ")
        FB02W00.FB02WIX2 = 1;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02W04.XWHCD)
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        ;
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02W04.FB02W-RED-BLA-FL == "Y"
         || FB02M010.FB02M-RED-BLA-FL[FB02WIXM] == "Y")
          FB02632(); /* Increment warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
        return;
      end
      ;
      ;
   /* ------------------------------------------------------------*/
    /* If the warehouse has changed from a blank to a valid*/
    /* warehouse decrement the directship adjust quantities.*/
   /* ------------------------------------------------------------*/
      ;
      if (FB02W04.XWHCD == " " /* Changed from blank to nonblank*/
       && FB02M010.XWHCD[FB02WIXM] != " ")
        FB02W00.FB02WIX2 = 1;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02M010.XWHCD[FB02WIXM])
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        ;
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02M010.XDSCD[FB02WIXM] == "3")
          FB02631(); /* Decrement warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
      end
      ;
   /* END;*/
    else
      if (((FB02M010.FB7BUYST[FB02WIXM] == "N" || 
      FB02M010.FB7BUYST[FB02WIXM] == "Y") && 
      FB02M010.XDSCD[FB02WIXM] == "3"))
        if (FB02M010.XWHCD[FB02WIXM] != "  " /* Whse not blank*/
         && FB02W04.FB02W-RED-BLA-FL !=      
        FB02M010.FB02M-RED-BLA-FL[FB02WIXM]) /* Red bla flag changed*/
          ;
          if (FB02W04.FB02W-RED-BLA-FL == "N") /* Chg dnord row to 'n'*/
            FB02W00.FB02WIX2 = 1;
            while (FB02W00.FB02WIX2 <= 3
             && FB02W01.XWHCD[FB02WIX2] != FB02M010.XWHCD[FB02WIXM])
              FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
            end
            FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
            FB02631(); /* Decrement warehouse row*/
            FB02S11(); /* Update Dfbuy.Vfblav01*/
            FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
            ;
          else /* Chg dnord row to 'y'*/
            ;
            FB02W00.FB02WIX2 = 1;
            while (FB02W00.FB02WIX2 <= 3
             && FB02W01.XWHCD[FB02WIX2] != FB02M010.XWHCD[FB02WIXM])
              FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
            end
            FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
            FB02632(); /* Increment warehouse row*/
            FB02S11(); /* Update Dfbuy.Vfblav01*/
            FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
            ;
          end
          ;
        end
      end
      ;
    end
  end
  ;
end // end FB02630

// Update B/L AV table
Function FB0263010()
  if ((FB02M010.FB7BUYST[FB02WIXM] == "N" || 
  FB02M010.FB7BUYST[FB02WIXM] == "Y"))
    if (FB02W04.FB02W-RED-BLA-FL != 
    FB02M010.FB02M-RED-BLA-FL[FB02WIXM]) /* Red bla flag changed*/
      ;
      if (FB02W04.XWHCD != " " /* Warehouse changed*/
       && FB02M010.XWHCD[FB02WIXM] != " "
       && FB02W04.XWHCD != FB02M010.XWHCD[FB02WIXM])
        ;
        FB02W00.FB02WIX2 = 1;
        ;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02M010.XWHCD[FB02WIXM])
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02M010.FB02M-RED-BLA-FL[FB02WIXM] == "Y")
          FB02631(); /* Decrement warehouse row*/
        end
        ;
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
        FB02W00.FB02WIX2 = 1;
        ;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02W04.XWHCD)
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02W04.FB02W-RED-BLA-FL == "Y")
          FB02632(); /* Increment warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
      end
      ;
      ;
         /* ------------------------------------------------------------*/
          /* If the warehouse has changed from a non-blank to blank*/
          /* increment the directship adjust quantities on the row*/
          /* for the warehouse that was changed.*/
         /* ------------------------------------------------------------*/
      ;
      if (FB02W04.XWHCD != " " /* Changed from non blank to blank*/
       && FB02M010.XWHCD[FB02WIXM] == " ")
        FB02W00.FB02WIX2 = 1;
        while (FB02W00.FB02WIX2 <= 3
         && FB02W01.XWHCD[FB02WIX2] != FB02W04.XWHCD)
          FB02W00.FB02WIX2 = FB02W00.FB02WIX2 + 1;
        end
        ;
        FBLREC.FBLGROUP = FB02W01.FB02WFLR[FB02WIX2];
        ;
        if (FB02W04.FB02W-RED-BLA-FL == "Y"
         || FB02M010.FB02M-RED-BLA-FL[FB02WIXM] == "Y")
          FB02632(); /* Increment warehouse row*/
        end
        ;
        FB02S11(); /* Update Dfbuy.Vfblav01*/
        ;
        FB02W01.FB02WFLR[FB02WIX2] = FBLREC.FBLGROUP;
        ;
        return;
      end
      ;
    end
    ;
  end
  ;
end // end FB0263010

// Decrement warehouse row
Function FB02631()
  ;
  ;
  FB02W00.FB02WIX1 = 1;
  while (FB02W00.FB02WIX1 <= 40)
    FB02W00.FB02WWF1 = FBLREC.FBLDAQTY[FB02WIX1];
    FB02W00.FB02WWF2 = FB02W04.FB7QTB[FB02WIX1];
    FB02W00.FB02WWF3 = FB02W00.FB02WWF1 - FB02W00.FB02WWF2;
    FBLREC.FBLDAQTY[FB02WIX1] = FB02W00.FB02WWF3;
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
end // end FB02631

// Increment warehouse row
Function FB02632()
  ;
  ;
  FB02W00.FB02WIX1 = 1;
  while (FB02W00.FB02WIX1 <= 40)
    FB02W00.FB02WWF1 = FBLREC.FBLDAQTY[FB02WIX1];
    FB02W00.FB02WWF2 = FB02W04.FB7QTB[FB02WIX1];
    FB02W00.FB02WWF3 = FB02W00.FB02WWF1 + FB02W00.FB02WWF2;
    FBLREC.FBLDAQTY[FB02WIX1] = FB02W00.FB02WWF3;
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
  ;
end // end FB02632

// Update Vdnord01 row(s)
Function FB02640()
   /* ------------------------------------------------------------*/
   /* Update all of the Vdnord01 for the customer xref and*/
   /* warehouse. Use the records that have been saved in*/
   /* temporary storage to update.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02W04.FB02W04R = FB02W05.FB02W05R[FB02WIXM];
  ;
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= FB02W00.FB02WMAX) /* map max whses*/
    if (FB02W03.PC2CUXID[FB02WIX1] == FB02W04.PC2CUXID
     && FB02W03.XWHCD[FB02WIX1] == FB02W04.XWHCD
     && FB02W03.OP1CUOID[FB02WIX1] == FB02W04.OP1CUOID
     && FB02W03.OP1NORID[FB02WIX1] == FB02W04.OP1NORID)
      ;
      FBHREC.FBHGROUP = FB02W03.FB02W03D[FB02WIX1];
      FBHREC.XWHCD = FB02M010.XWHCD[FB02WIXM];
      FBHREC.FB-RED-BLA-FL = FB02M010.FB02M-RED-BLA-FL[FB02WIXM];
      FBHREC.FB7BUYST = FB02M010.FB7BUYST[FB02WIXM];
      FBHREC.XDSCD = FB02M010.XDSCD[FB02WIXM];
      ;
      FBHREC.FBHDSAFL = "N"; /* fb-dirship-acpt-fl*/
      FB02S12(); /* Update Vdnord01 row*/
      ;
      if ((FB02M010.XWHCD[FB02WIXM] != FB02W04.XWHCD       /* If whse chngd*/
       && FB02M010.FB7BUYST[FB02WIXM] == FB02W04.FB7BUYST) /* buy st same*/
       || FB02M010.FB7BUYST[FB02WIXM] != FB02M010.FB7BUYST) /* buy st chngd*/
        FB02S15(); /* format and update VDNTAG01 row*/
      end
      ;
    end
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
end // end FB02640

// Set accept flags off
Function FB02642()
  ;
  ;
  FB02M010.FB02MAC = "N"; /* ac: on the map*/
  FBMREC.FBMCFFL = "N"; /* fb-calc-fnsh-fl*/
  FBKREC.FBKCAFL = "N"; /* fb-calc-acpt-fl*/
  FBMREC.FBMFINFL = "N"; /* fb-dirship-fnsh-fl*/
  FBHREC.FBHDSAFL = "N"; /* fb-dirship-acpt-fl*/
  FB02W00.FB02WIX1 = 1;
  ;
  while (FB02W00.FB02WIX1 <= 20)
    ;
    if (FBMREC.FBMPCD[FB02WIX1] == FBXREC.XPLCD) /* product line =*/
      FBMREC.FBMPAFL[FB02WIX1] = "N"; /* fb-prodln-acpt-fl*/
      FBMREC.FBMDSLNF[FB02WIX1] = "N"; /* fb-drsln-fnsh-fl*/
    end
    ;
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1;
  end
  ;
end // end FB02642

// Update Vdrsat01 row(s)
Function FB02643()
   /* ------------------------------------------------------------*/
   /* Update all of the Vdrsat01*/
   /* ------------------------------------------------------------*/
  ;
  VDRSAT01.PG1SC4CD = PG1REC.PG1SC4CD;
  VDRSAT01.XPLCD = FBXREC.XPLCD;
  VDRSAT01.SY1STNBR = FB02W00.SY1STNBR;
  VDRSAT01.SY2CLRID = FB02W00.SY2CLRID;
  VDRSAT01.XDMCD = FB02W00.XDMCD;
  VDRSAT01.OP1PARTN = FB02W03.OP1PARTN[FB02WIXM];
  VDRSAT01.OP1CUOID = FB02W03.OP1CUOID[FB02WIXM];
  VDRSAT01.OP1NORID = FB02W03.OP1NORID[FB02WIXM];
  VDRSAT01.OP2LNINB = FB02W03.OP2LNINB[FB02WIXM];
  VDRSAT01.PC2CUXID = FB02W03.PC2CUXID[FB02WIXM];
  VDRSAT01.ZZZCHGCT = FB02W03.ZZZCHGCT[FB02WIXM];
  VDRSAT01.FB7BUYST = FB02M010.FB02M-DIVERT-FL[FB02WIXM];
  FB02S37(); /* Update Vdrsat01 row*/
  FB02W03.ZZZCHGCT[FB02WIXM] = FB02W03.ZZZCHGCT[FB02WIXM] + 1;
  return;
  ;
end // end FB02643

// Adjust Prior PO & B/L
Function FB02644()
   /* When Divert flag changed from 'N' to 'D'.*/
  FB02W00.FB02WOAD = FB02W00.FB02WOAD + FB02M010.FB02MCTO[FB02WIXM];
  if (FB02W01.BLTOTAL >= FB02W00.FB02WOAD
   && FB02W01.BLTOTAL > 0)
    if (FB02W01.POTOTAL >= FB02W00.FB02WOAD
     && FB02W01.POTOTAL > 0)
  /* FB02W00.BLTOTAL = FB02W00.BLTOTAL - FB02M010.FB02MCTO(FB02WIXM);*/
  /* FB02W00.POTOTAL = FB02W00.POTOTAL - FB02M010.FB02MCTO(FB02WIXM);*/
      FB02W00.FB02WPOD = FB02W01.POTOTAL - FB02W00.FB02WOAD;
      FB02M010.FB02MOAD = FB02W00.FB02WOAD;
      FB02M010.FB02MPO = FB02W00.FB02WPOD;
      FB02643(); /* Update VDRSAT01*/
      FB02W05.FB02W-DIVERT-FL[FB02WIXM] = FB02M010.FB02M-DIVERT-FL[FB02WIXM];
      FB02W03.FB02W-DIVERT-FL[FB02WIXM] = FB02M010.FB02M-DIVERT-FL[FB02WIXM];
      FB02S38(); /* Update Temp Storage*/
    else
      FB02W00.FB02WUDF = "N"; /* Update flag*/
      converseLib.validationFailed(551); /* CAN NOT DIVERT IT;*/
      set FB02M010.FB02M-DIVERT-FL[FB02WIXM] cursor, bold;
      FB02W00.FB02WOAD = FB02W00.FB02WOAD - FB02M010.FB02MCTO[FB02WIXM];
      FB02W00.FB02WPOD = FB02W01.POTOTAL - FB02W00.FB02WOAD;
      FB02M010.FB02MPO = FB02W00.FB02WPOD;
    end
  else
    FB02W00.FB02WUDF = "N"; /* Update flag*/
    converseLib.validationFailed(551); /* Can not divert it;*/
    set FB02M010.FB02M-DIVERT-FL[FB02WIXM] cursor, bold;
    FB02W00.FB02WOAD = FB02W00.FB02WOAD - FB02M010.FB02MCTO[FB02WIXM];
    FB02W00.FB02WPOD = FB02W01.POTOTAL - FB02W00.FB02WOAD;
    FB02M010.FB02MPO = FB02W00.FB02WPOD;
  end
end // end FB02644

// CHECK DIVERTS
Function FB02645()
   /* When Divert flag changed from 'D' to 'N'*/
  FB02W00.FB02WOAD = FB02W00.FB02WOAD - FB02M010.FB02MCTO[FB02WIXM];
  /* FB02W00.BLTOTAL = FB02W00.BLTOTAL + FB02M010.FB02MCTO(FB02WIXM);*/
  /* FB02W00.POTOTAL = FB02W00.POTOTAL + FB02M010.FB02MCTO(FB02WIXM);*/
  FB02W00.FB02WPOD = FB02W01.POTOTAL + FB02W00.FB02WOAD;
  FB02M010.FB02MOAD = FB02W00.FB02WOAD;
  FB02M010.FB02MPO = FB02W00.FB02WPOD;
  FB02643();
  FB02W05.FB02W-DIVERT-FL[FB02WIXM] = FB02M010.FB02M-DIVERT-FL[FB02WIXM];
  FB02W03.FB02W-DIVERT-FL[FB02WIXM] = FB02M010.FB02M-DIVERT-FL[FB02WIXM];
  FB02S38();
end // end FB02645

// Verify model flag
Function FB02650()
   /* ----------------------------------------------------------*/
   /* Obtain the DFBUY.VFBPGM01 row and if the model being*/
   /* run flag is equal to 'y'  for program 'fl180d' or*/
   /* programs 'flok190d' ezeflo to display message and do*/
   /* not allow updates.*/
   /* ----------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FL180D";
  ;
  FB02S17(); /* select row from vfbpgm01*/
  ;
  if (FBEREC.FBEMDLPF == "Y")
    ;
    FB02M010.XXXPRCNM = "FB02630";
    converseLib.validationFailed(72);
    exit stack;
  else
    set FBEREC empty;
    FBEREC.XXXPGMNB = "FL190D";
    ;
    FB02S17(); /* select row from vfbpgm01*/
    ;
    if (FBEREC.FBEMDLPF == "Y")
      FB02M010.XXXPRCNM = "630";
      converseLib.validationFailed(72);
      exit stack;
    end
    ;
  end
  ;
  ;
  ;
end // end FB02650

// Open cursor for Dfbuy.Vdnord01
Function FB02S01()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  FB02W00.FB02WDNC = "N"; /* Set cursor to no*/
  ;
  ;
  ;
  try
    call "IO4640" ("S5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S01"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S01";
  exit stack;
  ;
end // end FB02S01

// Fetch DFBUY.VDNORD01 row
Function FB02S02()
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("N5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB02W00.FB02WDNC = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S02"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S02";
  exit stack;
  ;
end // end FB02S02

// Close DFBUY.VDNORD01 cursor
Function FB02S03()
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("C5", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S03"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S03";
  exit stack;
  ;
end // end FB02S03

// Open Dfbuy.Vfblav01 cursor
Function FB02S04()
  ;
  ;
  FB02W00.FB02WFCF = "N"; /* Vfblav01 cursor flag*/
  ;
   /* -------- y2k out begin -------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* -------- y2k in end ----------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == 811) /* Multiple rows*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S04"; /* Process name*/
  TA1REC.TA1LOC = "OPEN CURSOR             ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S04";
  exit stack;
  ;
  ;
end // end FB02S04

// Fetch Dfbuy.Vfblav01 row
Function FB02S05()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* -------- y2k out begin -------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* -------- y2k in end ----------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      ;
      if (FBLREC.XWHCD in FB02W00.XWH-WHSE-CD)
        FB02W00.FB02WDWS = "Y"; /* Domestic whse*/
      else
        FB02W00.FB02WDWS = "N"; /* Not domestic whse*/
      end
      ;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FB02W00.FB02WFCF = "Y"; /* Vfblav01 cursor flag*/
      return;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S05"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S05";
  exit stack;
  ;
  ;
  ;
  ;
end // end FB02S05

// Close Dfbuy.Vfblav01 cursor
Function FB02S06()
  ;
  ;
   /* ------- y2k out begin ------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ---------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == 811) /* Multiple rows*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S06"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S06";
  exit stack;
  ;
  ;
end // end FB02S06

// OBtain Dfbuy.Vfqtbs01 row
Function FB02S07()
  ;
  ;
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S07"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S07";
  exit stack;
  ;
  ;
  ;
end // end FB02S07

// Add page to temp storage
Function FB02S08()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB02W03.FB02WTSL = FB02W00.FB02WTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FB02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FB02W03 empty; /* Temp storage record*/
    ;
    FB02W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB02W00.FB02WIXM = 0; /* temp storage line index*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB02M010.XXXPRCNM = "FB02S08"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FB02M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
end // end FB02S08

// Obtain temp storage page
Function FB02S09()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FB02W03.FB02WTSL = FB02W00.FB02WTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB02W00.FB02WTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FB02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB02M010.XXXPRCNM = "FB02S11"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB02S09

// Validate buy month
Function FB02S10()
  ;
  ;
  TA2REC.TA2GRTYP = "E"; /* gregorian yymmdd*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get greg formats*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/
    ;
    FB02M010.XXXPRCNM = "FB02S10"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M010"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
  ;
end // end FB02S10

// Update Dfbuy.vfblav01
Function FB02S11()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
   /* -------- y2k out begin --------*/
                                  /* CALL IO4680 'U ',SQLCA,FBLREC*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Delete table*/
                                   /* row*/
   /* -------- y2k out end ----------*/
   /* -------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("U ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
   /* -------- y2k in end -----------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FB02W00.FB02WUDF = "Y"; /* Update flag*/
      return; /* Return to previous process*/
      ;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/
      ;
      FB02W00.FB02WUDF = "N"; /* Update flag*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all database changes*/
      FB02W00.XXXMSGNO = 20; /* Database updated by another*/
      FB02M010.XXXPRCNM = "FB02S11"; /* Process name*/
      exit stack; /* Return to previous process*/
      ;
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S11 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S11"; /* Process name*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
  ;
end // end FB02S11

// Update Dfbuy.Vdnord01
Function FB02S12()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4640" ("U ", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FB02W00.FB02WUDF = "Y"; /* Update flag*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Data updated by another*/
      ;
      FB02W00.FB02WUDF = "N"; /* Update flag*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all changes*/
      FB02W00.XXXMSGNO = 20; /* Database updated by another*/
      FB02M010.XXXPRCNM = "FB02S12"; /* Process name*/
      ;
      exit stack; /* Return to previous process*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S12 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S12"; /* Process name*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
  ;
end // end FB02S12

// Refresh application
Function FB02S13()
   /* ------------------------------------------------------*/
   /* Initialize map and storage areas.*/
   /* ------------------------------------------------------*/
  ;
  set FB02M010 empty;
  set FB02W01 empty;
  set FB02W03 empty;
  set FB02W04 empty;
  set FB02W05 empty;
  ;
  FB02W00.FB02WTSL = 1172; /* Temporary storage length fb02w03*/
  FB02W00.FB02WMAX = 4; /* Max number of map lines*/
  FB02W01.FB02WSZS = 9; /* Size scroll*/
  if (FB02W00.XXXMSGNO != 32) /* Update successful*/
    FB02W00.FB02WTSP = 1; /* Temp storage page*/
  end
  ;
   /* ---------------------------------------------------------*/
   /* If more products have been passed then obtain the*/
   /* style and color description.*/
   /* ---------------------------------------------------------*/
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB02W00.FB02WRDF = "Y"; /* Request for data flag*/
    FB02W01.SY1STNBR = FBXREC.SY1STNBR[1];
    FB02W00.SY1STNBR = FBXREC.SY1STNBR[1];
    FB02W01.SY2CLRID = FBXREC.SY2CLRID[1];
    FB02W00.SY2CLRID = FBXREC.SY2CLRID[1];
    FB02W01.XDMCD = FBXREC.XDMCD[1];
    FB02W00.XDMCD = FBXREC.XDMCD[1];
  /* GREDDY*/
    FB02W01.POTOTAL = FBXREC.FBXPRIPO[1];
    FB02W00.POTOTAL = FBXREC.FBXPRIPO[1];
    FB02W01.BLTOTAL = FBXREC.FBXPRIBL[1];
    FB02W00.BLTOTAL = FBXREC.FBXPRIBL[1];
  /* GREDDY*/
    FB02W00.FB02WFDT = FBXREC.FB8BUYDT;
    FB02W00.FB02WBDT = FBXREC.FB8BUYDT;
    FB02W01.FB02WBYM = FB02W00.FB02WBYM;
    ;
    set PG2REC empty; /* Initialize style color record*/
    ;
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FBXREC.SY1STNBR[1];
    PG2REC.SY2CLRID = FBXREC.SY2CLRID[1];
    PG2REC.XDMCD = FBXREC.XDMCD[1];
    ;
    XSPG202(); /* Obtain style color table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FB02W01.SY1SSTNM = PG2REC.SY1SSTNM;
      FB02W01.SY2CLRAB = PG2REC.SY2CLRAB;
      FBXREC.XPLCD = PG2REC.XPLCD;
      ;
      FB02S25(); /* Select DPRODG.VSUSER01*/
      FBXREC.CAUSERID = PG1REC.XXXUSER; /* Save userid*/
    end
  else
    FB02110(); /* Purge temp storage*/
    FB02W00.XXXMSGNO = 356; /* No data to display*/
    exit stack;
    ;
    ;
  end
  ;
  FBWREC.FBWFILL = FBXREC.FBXGROUP;
  COMMAREA.CAUSERA = FBWREC.FBWGROUP;
  ;
end // end FB02S13

// update vfqtb01 row
Function FB02S14()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FB02W00.FB02WUDF = "Y"; /* Update flag*/
      return; /* Return to previous process*/
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Expected return codes*/
      ;
      converseLib.validationFailed(20);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      exit stack; /* Exit*/
      ;
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S14 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S14"; /* Process name*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
  ;
end // end FB02S14

// format VDNTAG01 row
Function FB02S15()
  set FBOREC empty;
  FBOREC.OP1PARTN = FBHREC.OP1PARTN;
  FBOREC.OP1CUOID = FBHREC.OP1CUOID;
  FBOREC.OP1NORID = FBHREC.OP1NORID;
  FBOREC.OP2LNINB = FBHREC.OP2LNINB;
  FBOREC.SY1STNBR = FBHREC.SY1STNBR;
  FBOREC.SY2CLRID = FBHREC.SY2CLRID;
  FBOREC.XDMCD = FBHREC.XDMCD;
  FBOREC.XQACD = FBHREC.XQACD;
  FBOREC.PC2INSEG = FBHREC.PC2INSEG;
  FBOREC.XPGCD = FBHREC.XPGCD;
  FBOREC.XUMCD = FBHREC.XUMCD;
  FBOREC.FB8BUYDT = FBHREC.FB8BUYDT;
  FBOREC.XWHCD = FBHREC.XWHCD;
  if (FBHREC.XWHCD == " ")
    FBOREC.PC2CUXID = FBHREC.PC2CUXID;
  end
  move "N" to FBOREC.FB8MPFL[1] for all;
  ;
  FB02W00.FB02WCSI = 1;
  ;
  while (FB02W00.FB02WCSI < 41)
    FBOREC.FBDQTB = FBOREC.FBDQTB + FBHREC.FB7QTB[FB02WCSI];
    FB02W00.FB02WCSI = FB02W00.FB02WCSI + 1;
  end
  ;
  XX0XS01();
  FBOREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FBOREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FBOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FB02S16();
  FBOREC.FBDQTB = 0 - FBOREC.FBDQTB;
  ;
  if (FBOREC.XWHCD == " ")
    FBOREC.XWHCD = FB02W04.XWHCD;
  else
    FBOREC.XWHCD = " ";
  end
  if (FBOREC.XWHCD == " ")
    FBOREC.PC2CUXID = FBHREC.PC2CUXID;
  else
    FBOREC.PC2CUXID = " ";
  end
  ;
  FB02S16();
end // end FB02S15

// add row to DFBUY.VDNTAG01 tbl
Function FB02S16()
  ;
  try
    call "IO4940" ("A ", SQLCA, FBOREC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row found return to calling process.  If any other code,*/
   /* roll back any changes, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S16"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE ROW              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNTAG01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S16";
  exit stack;
  ;
  ;
  ;
end // end FB02S16

// Obtain DFBUY.VFBPGM01 tbl
Function FB02S17()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If  successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call not successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* good sql return code*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "FB02S17"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
end // end FB02S17

// update vffqtb01
Function FB02S18()
  ;
  FB02S19(); /* Check in process flag*/
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0       /* Row found*/
   && FBEREC.FBEMDLPF == "N")       
    FB02S20(); /* select set vffqtb01*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0) /* Good return code*/
      FB02S21(); /* Fetch next vffqtb01 row, updt fl*/
    end
    ;
    FB02S22(); /* close  set vffqtb01*/
  end
end // end FB02S18

// Check in process flag
Function FB02S19()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  FBEREC.XXXPGMNB = "FL180D";
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      ;
      if (FBEREC.FBEMDLPF == "Y")
        FB02M010.XXXPRCNM = "FB02MS19";
        converseLib.validationFailed(72);
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back any changes*/
        return;
      else
        return;
      end
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02FB02MS19"; /* Process name*/
  TA1REC.TA1LOC = "SELECT                  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02MS19";
  exit stack;
  ;
end // end FB02S19

// select set vffqtb01
Function FB02S20()
   /* ------------------------------------------------------------*/
   /* Select set for update of sheduler approval flag*/
   /* ------------------------------------------------------------*/
  ;
  set FB8REC empty;
  ;
  FB8REC.FB8RECTP = "B";
  FB8REC.FB8SAPFL = "N";
  FB02W00.FB02WBYM = FB02M010.FB02MBYM; /* move yymm to workarea*/
   /* -------- Y2K OUT BEGIN ------*/
   /* MOVE 19 TO FB02W00.FB02WBCC;               /* century*/
   /* -------- Y2K OUT END --------*/
   /* -------- Y2K IN  BEGIN ------*/
  if (FB02W00.FB02WBYY > 65)
    FB02W00.FB02WBCC = 19; /* century*/
  else
    FB02W00.FB02WBCC = 20; /* century*/
  end
   /* -------- Y2K IN END ---------*/
  FB02W00.FB02WBDD = 1; /* day*/
  FB8REC.FB8BUYDT = FB02W00.FB02WBDT; /* move to ccyymm01*/
  FB8REC.SY1STNBR = FB02M010.SY1STNBR; /* style number*/
  FB8REC.SY2CLRID = FB02M010.SY2CLRID; /* color code*/
  FB8REC.XDMCD = FB02M010.XDMCD; /* dimension code*/
  ;
  try
    call "IO3450" ("S2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S20"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02MS20";
  exit stack;
  ;
end // end FB02S20

// fetch/update vffqtb01
Function FB02S21()
   /* ------------------------------------------------------------*/
   /* Fetch/update of sheduler approval flag*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3450" ("N2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FB8REC.FB8SAPFL = "Y";
      XX0XS01(); /* get date and time*/
      FB8REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      FB8REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      try
        call "IO3450" ("U ", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
      end /* Update row*/
      if (sysVar.errorCode == "00000000") /* Successful call*/
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          return; /* return to calling process*/
        end
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(20); /* Updated since last read*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* roll back any changes*/
          return; /* return to calling process*/
        end
      end
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back any changes*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S21"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE                  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02MS12";
  exit stack;
end // end FB02S21

// close set vffqtb01
Function FB02S22()
   /* ------------------------------------------------------------*/
   /* Close set for vffqtb01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3450" ("C2", SQLCA, FB8REC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S13"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02MS13";
  exit stack;
  ;
end // end FB02S22

// update vfsctl01 row
Function FB02S23()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FB02W00.FB02WUDF = "Y"; /* Update flag*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      ;
      FB02W00.FB02WUDF = "N"; /* Update flag*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      FB02W00.XXXMSGNO = 20; /* Database updated by another*/
      FB02M010.XXXPRCNM = "FB02S23"; /* Process name*/
      ;
      exit stack; /* Exit to display the map*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S23 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S23"; /* Process name*/
  ;
  exit stack;
  ;
  ;
  ;
  ;
  ;
end // end FB02S23

// Get control row
Function FB02S24()
  ;
  ;
  set FB9REC empty;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S24"; /* Process name*/
  TA1REC.TA1LOC = "FETCH CONTROL RECORD    ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S24";
  exit stack;
  ;
  ;
end // end FB02S24

// Select DPRODG.VSUSER01
Function FB02S25()
   /* -------------------------------------------------*/
    /* Format key*/
   /* -------------------------------------------------*/
  ;
  set PG1REC empty;
  ;
  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = PG2REC.PG1SC4CD; /* Scheduler code*/
  PG1REC.PG1FCTCD = "  "; /* Forecast code*/
  ;
  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S25"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02170";
  exit stack;
  ;
end // end FB02S25

// Load summary code array
Function FB02S26()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB02S27(); /* declare cursor*/
  FB02W00.FB02WIX1 = 1; /* first row*/
  ;
  while (FB02W00.FB02WIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB02S28(); /* fetch row*/
    FB02W00.FB02WIX1 = FB02W00.FB02WIX1 + 1; /* next row*/
  end
  ;
  if (FB02W00.FB02WIX1 <= 10)
    FB02S29(); /* close cursor*/
    return; /* return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB02M010.XXXPRCNM = "FB02S26"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB02W00.FB02WRDF = "N"; /* dont request data*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02S26

// Declare cursor DCORP.VSUMCD01
Function FB02S27()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "FB02S27"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB02W00.FB02WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02S27

// Fetch row DCORP.VSUMCD01
Function FB02S28()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB02W00.XWH-WHSE-CD[FB02WIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB02M010.XXXPRCNM = "FB02S28"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB02W00.FB02WRDF = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FB02S28

// Close cursor DCORP.VSUMCD01
Function FB02S29()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB02M010.XXXPRCNM = "FB02S29"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB02W00.FB02WRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB02S29

// check for diverts
Function FB02S30()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as count of DPRODC.VPOITM01,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  set FBIREC empty;
  FBIREC.FBI-GROUP = FB02W06.FBI-GROUP;
  ;
  FB02W00.FB02W-OA-COUNT = 0; /* initialize oa counter*/
  FB02S31(); /* determine oa count*/
  ;
  FB02W00.FB02W-PO-COUNT = 0; /* initialize po counter*/
  FB02S32(); /* determine po count*/
  ;
  if (FB02W00.FB02W-OA-COUNT > 0
   && FB02W00.FB02W-PO-COUNT > 0)
    FB02W06.FB02W-COUNT = 0;
  else
    if (FB02W00.FB02W-OA-COUNT > 0
     && FB02W00.FB02W-PO-COUNT == 0)
      FB02W06.FB02W-COUNT = 1;
    else
      if (FB02W00.FB02W-OA-COUNT == 0
       && FB02W00.FB02W-PO-COUNT > 0)
        FB02W06.FB02W-COUNT = 1;
      else
        if (FB02W00.FB02W-OA-COUNT == 0
         && FB02W00.FB02W-PO-COUNT == 0)
          FB02W06.FB02W-COUNT = 0;
        end
      end
    end
  end
  ;
  ;
end // end FB02S30

// check for diverts
Function FB02S31()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB02W00.FB02W-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S31"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S31";
  exit stack;
  ;
end // end FB02S31

// check for diverts
Function FB02S32()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB02W00.FB02W-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S32"; /* Process name*/
  TA1REC.TA1LOC = "VPOITM01";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S32";
  exit stack;
  ;
end // end FB02S32

// OBtain Dfbuy.Vdrsat01 row
Function FB02S36()
  ;
  try
    call "VDRSAT01" ("S ", SQLCA, VDRSAT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S36"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDRSAT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S36";
  exit stack;
  ;
  ;
  ;
end // end FB02S36

// Update Dfbuy.VDRSAT01
Function FB02S37()
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  VDRSAT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VDRSAT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "VDRSAT01" ("U ", SQLCA, VDRSAT01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      FB02W00.FB02WUDF = "Y"; /* Update flag*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Data updated by another*/
      ;
      FB02W00.FB02WUDF = "N"; /* Update flag*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all changes*/
      FB02W00.XXXMSGNO = 556; /* SO NOT FOUND*/
      FB02M010.XXXPRCNM = "FB02S37"; /* Process name*/
      ;
      exit stack; /* Return to previous process*/
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB02S37 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDRSAT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB02M010.XXXPRCNM = "FB02S37"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB02S37

// update temp storage
Function FB02S38()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Update the specified page of data from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FB02W03.FB02WTSL = FB02W00.FB02WTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB02W00.FB02WTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FB02W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB02M010.XXXPRCNM = "FB02S38"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE CURR PAGE OF TMP STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB02M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB02S38

//*** RECORD=FB02W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// 4360   - ADDED fb02woad, FB02WPOD, bltotal and pototal.
//          CHANGE BY GREDDY -- 02/22/00.
//        - ADDED FB-BL-UPD-FL - CHANGE BY GREDDY -- 05/30/01.
// ***********************
Record FB02W00 type basicRecord
  5 * char(438) ; 
    10 FB02WTSL FB02WTSL ; 
    10 FB02WRDF FB02WRDF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB02WTSP FB02WTSP ; 
    10 FB02WDNC FB02WDNC ; 
    10 FB02WFCF FB02WFCF ; 
    10 FB02WKFC FB02WKFC ; 
    10 FB02WSSR FB02WSSR ; 
    10 FB02WWCH FB02WWCH ; 
    10 FB02WUDF FB02WUDF ; 
    10 FB02WPAC FB02WPAC ; 
    10 FB02WBLF FB02WBLF ; 
    10 FB02WDWS FB02WDWS ; 
    10 FB02WLCT FB02WLCT ; 
    10 FB02WCCT FB02WCCT ; 
    10 FB02WAC FB02WAC ; 
    10 FB02WBXF FB02WBXF ; 
    10 FB02WFDT FB02WFDT ; 
      15 FB02WFCT FB02WFCT ; 
      15 FB02WFYM FB02WFYM ; 
        20 FB02WFYY FB02WFYY ; 
        20 FB02WFMM FB02WFMM ; 
      15 FB02WFDD FB02WFDD ; 
    10 FB02WYMD FB02WYMD ; 
      15 FB02WYY FB02WYY ; 
      15 FB02WMM FB02WMM ; 
      15 FB02WDD FB02WDD ; 
    10 FB02WBDT FB02WBDT ; 
      15 FB02WBCC FB02WBCC ; 
      15 FB02WBYM FB02WBYM ; 
        20 FB02WBYY FB02WBYY ; 
        20 FB02WBMM FB02WBMM ; 
      15 FB02WBDD FB02WBDD ; 
    10 FB02WSDT FB02WSDT ; 
      15 FB02WSYY FB02WSYY ; 
      15 FB02WSMM FB02WSMM ; 
      15 FB02WSDD FB02WSDD ; 
    10 TA1TBLKE TA1TBLKE ; 
    10 FB02WIXM FB02WIXM ; 
    10 FB02WIXT FB02WIXT ; 
    10 FB02WIX1 FB02WIX1 ; 
    10 FB02WIX2 FB02WIX2 ; 
    10 FB02WFSI FB02WFSI ; 
    10 FB02WLSI FB02WLSI ; 
    10 FB02WSZB FB02WSZB ; 
    10 FB02WCSI FB02WCSI ; 
    10 FB02W-SAVED-FB02WCSI FB02W-SAVED-FB02WCSI ; 
    10 FB02WSTI FB02WSTI ; 
    10 FB02WTDQ FB02WTDQ ; 
    10 FB02WTOL FB02WTOL ; 
    10 FB02WMAX FB02WMAX ; 
    10 FB02WZHD FB02WZHD [40] ; 
    10 FB02WIFL FB02WIFL ; 
    10 PT3YYMM PT3YYMM ; 
    10 PC2CUXID PC2CUXID ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 * char(1) ; 
    10 FB02WPRM FB02WPRM ; 
      15 XGPCD XGPCD ; 
      15 FB02WPBD FB02WPBD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 * char(54) ; 
    10 CAUSERID CAUSERID ; 
    10 XPLCD XPLCD ; 
    10 XWHCD XWHCD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XDSCD XDSCD ; 
    10 FB02WWF1 FB02WWF1 ; 
    10 FB02WWF2 FB02WWF2 ; 
    10 FB02WWF3 FB02WWF3 ; 
    10 * char(1) ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB02W-ORD-ADJ-BUY-DT FB02W-ORD-ADJ-BUY-DT ; 
      15 FB02W-ORD-ADJ-BUY-MO FB02W-ORD-ADJ-BUY-MO ; 
      15 FB02W-ORD-ADJ-BUY-DD FB02W-ORD-ADJ-BUY-DD ; 
    10 FB02W-OA-COUNT FB02W-OA-COUNT ; 
    10 FB02W-PO-COUNT FB02W-PO-COUNT ; 
    10 FB02W-TMP-DT FB02W-TMP-DT ; 
      15 FB02W-TMP-CC FB02W-TMP-CC ; 
      15 FB02W-TMP-YY FB02W-TMP-YY ; 
      15 FB02W-TMP-MM FB02W-TMP-MM ; 
      15 FB02W-TMP-DD FB02W-TMP-DD ; 
    10 FB02W-CHK-DT FB02W-CHK-DT ; 
      15 FB02W-CHK-CY FB02W-CHK-CY ; 
        20 FB02W-CHK-CC FB02W-CHK-CC ; 
        20 FB02W-CHK-YY FB02W-CHK-YY ; 
      15 FB02W-CHK-MM FB02W-CHK-MM ; 
      15 FB02W-CHK-DM FB02W-CHK-DM ; 
    10 FB02W-CHK-DTE FB02W-CHK-DTE ; 
    10 FB02W0FBD FB02W0FBD ; 
      15 FB02W0BLM FB02W0BLM ; 
        20 FB02W0CC FB02W0CC ; 
        20 FB02W0YY FB02W0YY ; 
        20 FB02W0MM FB02W0MM ; 
      15 FB02W0DD FB02W0DD ; 
    10 FB02W1BLM FB02W1BLM ; 
      15 FB02W1CY FB02W1CY ; 
        20 FB02W1CC FB02W1CC ; 
        20 FB02W1YY FB02W1YY ; 
      15 FB02W1MM FB02W1MM ; 
    10 FB02W2BLM FB02W2BLM [8] ; 
      15 FB02W2CC FB02W2CC ; 
      15 FB02W2CY FB02W2CY ; 
        20 FB02W2YY FB02W2YY ; 
        20 FB02W2MM FB02W2MM ; 
    10 FB02WCNT FB02WCNT ; 
    10 FB02WOAF FB02WOAF ; 
    10 FB02WWHF FB02WWHF ; 
    10 FB02WOAD FB02WOAD ; 
    10 FB02WPOD FB02WPOD ; 
    10 POTOTAL POTOTAL ; 
    10 BLTOTAL BLTOTAL ; 
    10 FB-BL-UPD-FL FB-BL-UPD-FL ; 
end // end FB02W00

//*** RECORD=FB02W01 ****
// Fb02m010 map heading storage record
// 4360   - Change by GREDDY. Moved variables FB02WOAD, BLTOTAL
//          AND POTOTAL to FB02W00.
// ***********************
Record FB02W01 type basicRecord
  5 * char(9340) ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 FB02WFQB FB02WFQB ; 
    10 FB02WDRQ FB02WDRQ ; 
    10 FB02WBLQ FB02WBLQ ; 
    10 FB02WSTQ FB02WSTQ ; 
    10 FB02WBYM FB02WBYM ; 
    10 FB02WBLM FB02WBLM ; 
    10 FB02WSZS FB02WSZS ; 
    10 FB02WSZD FB02WSZD [40] ; 
    10 XWHCD XWHCD [9] ; 
    10 FB02WFLR FB02WFLR [9] ; 
    10 XWHSABRV XWHSABRV [9] ; 
    10 FB02WWHT FB02WWHT [9] ; 
    10 FB02WW1Q FB02WW1Q [40] ; 
    10 FB02WW2Q FB02WW2Q [40] ; 
    10 FB02WW3Q FB02WW3Q [40] ; 
    10 FB02WW4Q FB02WW4Q [40] ; 
    10 FB02WW5Q FB02WW5Q [40] ; 
    10 FB02WW6Q FB02WW6Q [40] ; 
    10 FB02WW7Q FB02WW7Q [40] ; 
    10 FB02WW8Q FB02WW8Q [40] ; 
    10 BL1-ADJ-AVL-TOT BL1-ADJ-AVL-TOT ; 
    10 BL2-ADJ-AVL-TOT BL2-ADJ-AVL-TOT ; 
    10 BL3-ADJ-AVL-TOT BL3-ADJ-AVL-TOT ; 
    10 FB02PVWH FB02PVWH ; 
    10 POTOTAL POTOTAL ; 
    10 BLTOTAL BLTOTAL ; 
end // end FB02W01

//*** RECORD=FB02W03 ****
// Fb02m010 temp storage page
// ***********************
Record FB02W03 type basicRecord
  5 FB02W03G FB02W03G ; 
    10 FB02WTSL FB02WTSL ; 
    10 FB02W03R FB02W03R [4] ; 
      15 PC2CUXID PC2CUXID ; 
      15 FB7BUYST FB7BUYST ; 
      15 FB8BUYDT FB8BUYDT ; 
      15 XWHCD XWHCD ; 
      15 FB02W-RED-BLA-FL FB02W-RED-BLA-FL ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
      15 FB02W03D FB02W03D ; 
      15 FB02W-MSR-IND FB02W-MSR-IND ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 FB02W-DIVERT-FL FB02W-DIVERT-FL ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end FB02W03

//*** RECORD=FB02W04 ****
// fb0wm010 display storage line
// ***********************
Record FB02W04 type basicRecord
  10 FB02W04R FB02W04R ; 
    15 PC2CUXID PC2CUXID ; 
    15 FB7BUYST FB7BUYST ; 
    15 FB8BUYDT FB8BUYDT ; 
    15 XWHCD XWHCD ; 
    15 XWHSABRV XWHSABRV ; 
    15 FB02W-RED-BLA-FL FB02W-RED-BLA-FL ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
    15 XDSCD XDSCD ; 
    15 FB7QTB FB7QTB [40] ; 
    15 FB02WCTO FB02WCTO ; 
    15 FB02W-MSR-IND FB02W-MSR-IND ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 FB02W-DIVERT-FL FB02W-DIVERT-FL ; 
end // end FB02W04

//*** RECORD=FB02W05 ****
// fb0wm010 display storage page
// ***********************
Record FB02W05 type basicRecord
  10 FB02W05R FB02W05R [4] ; 
    15 PC2CUXID PC2CUXID ; 
    15 FB7BUYST FB7BUYST ; 
    15 FB8BUYDT FB8BUYDT ; 
    15 XWHCD XWHCD ; 
    15 XWHSABRV XWHSABRV ; 
    15 FB02W-RED-BLA-FL FB02W-RED-BLA-FL ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
    15 XDSCD XDSCD ; 
    15 * char(160) ; 
    15 FB02WCTO FB02WCTO ; 
    15 FB02W-MSR-IND FB02W-MSR-IND ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 FB02W-DIVERT-FL FB02W-DIVERT-FL ; 
end // end FB02W05

//*** RECORD=FB02W06 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the style, color,
// dim, and sales order for special "count" function in FB1510.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement. FB1510 is a Footwear Buy
// IO Module.
// 
//    EXAMPLE:
//    --------
//    CALL FB1510 FBIREC,SQLCA (NOMAPS,NONCSP,REPLY; SELECT
//    COUNT
// 
// ***********************
Record FB02W06 type basicRecord
  5 FBI-GROUP FBI-GROUP ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FB02W-PA-ORD-ADJ-BUY-MO FB02W-PA-ORD-ADJ-BUY-MO ; 
    10 XWHCD XWHCD ; 
    10 FB02W-COUNT FB02W-COUNT ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB02W-PENDING-ORD-ADJ-FL FB02W-PENDING-ORD-ADJ-FL ; 
    10 FB02W-CURRENT-DT FB02W-CURRENT-DT ; 
    10 FB02W-CURRENT-HHMMSS FB02W-CURRENT-HHMMSS ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB02W-PRDCUID FB02W-PRDCUID ; 
    10 FB02W-XQAQALCD FB02W-XQAQALCD ; 
    10 FB02W-XUMUOMCD FB02W-XUMUOMCD ; 
    10 FB02W-PKGTYPCD FB02W-PKGTYPCD ; 
    10 FB02W-DLVRY-DT FB02W-DLVRY-DT ; 
end // end FB02W06

//*** RECORD=FB02W07 ****
// ------------------------------------------------------------
// First parameter passed to the I/O module when selecting rows
// from the Base By Month table.
// ------------------------------------------------------------
// ***********************
Record FB02W07 type basicRecord
  10 FB02WFUN FB02WFUN ; 
  10 XWHCD XWHCD [2] ; 
end // end FB02W07

// Warehouse 1 size qty
DataItem BL1-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem BL2-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem BL3-ADJ-AVL-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total prior bottom line avail
DataItem BLTOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check if update done.
DataItem FB-BL-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecast QTB
DataItem FB02PVWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Check century hold
DataItem FB02W-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year ccyy
DataItem FB02W-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check day hold
DataItem FB02W-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check buy date hold
DataItem FB02W-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check date hold - binary
DataItem FB02W-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check month hold
DataItem FB02W-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Check year hold
DataItem FB02W-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// I/O MODULE COUNTER
DataItem FB02W-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT DATE
DataItem FB02W-CURRENT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT TIME HHMMSS
DataItem FB02W-CURRENT-HHMMSS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// divert-indicator
DataItem FB02W-DIVERT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BUY DATE FOR DIVERTS
DataItem FB02W-DLVRY-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Musical size run indicator
DataItem FB02W-MSR-IND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO counter
DataItem FB02W-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDER ADJ BUY DAY
DataItem FB02W-ORD-ADJ-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDER ADJ BUY DT CCYYMMDD
DataItem FB02W-ORD-ADJ-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDER ADJ BUY MO CCYYMM
DataItem FB02W-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PA-ORD-ADJ-BUY-MO
DataItem FB02W-PA-ORD-ADJ-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PENDING O/A FLAG
DataItem FB02W-PENDING-ORD-ADJ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG PKG CD
DataItem FB02W-PKGTYPCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// OA counter
DataItem FB02W-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRD CU ID
DataItem FB02W-PRDCUID char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// fb-red-bla-fl
DataItem FB02W-RED-BLA-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved current size index
DataItem FB02W-SAVED-FB02WCSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp century hold
DataItem FB02W-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp day hold
DataItem FB02W-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp buy date hold
DataItem FB02W-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp month hold
DataItem FB02W-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp year hold
DataItem FB02W-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XQA QUAL CD
DataItem FB02W-XQAQALCD char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// XUM UOM CD
DataItem FB02W-XUMUOMCD char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// record data
DataItem FB02W03D char(260)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB02W03G char(1172)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB02W03R char(292)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB02W04R char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB02W05R char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work  date ccyymm
DataItem FB02W0BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyy
DataItem FB02W0CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date mm
DataItem FB02W0DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyymm
DataItem FB02W0FBD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date yy
DataItem FB02W0MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date cc
DataItem FB02W0YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyymm
DataItem FB02W1BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date cc
DataItem FB02W1CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyy
DataItem FB02W1CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date mm
DataItem FB02W1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date yy
DataItem FB02W1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyymm
DataItem FB02W2BLM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date ccyy
DataItem FB02W2CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date cc
DataItem FB02W2CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date mm
DataItem FB02W2MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work  date yy
DataItem FB02W2YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product accept flag
DataItem FB02WAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy century
DataItem FB02WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB02WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB02WBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vfblav01 found flag
DataItem FB02WBLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B/L month
DataItem FB02WBLM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DRS BLD qty
DataItem FB02WBLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB02WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// blank xref flag
DataItem FB02WBXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB02WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FB02WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer xref count
DataItem FB02WCCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Loop counters
DataItem FB02WCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current size index
DataItem FB02WCSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer total
DataItem FB02WCTO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FB02WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Direct ship/Nil cursor flag
DataItem FB02WDNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total DRS qty
DataItem FB02WDRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// domestic whse flag
DataItem FB02WDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vfblav01 curosr flag
DataItem FB02WFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat century
DataItem FB02WFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB02WFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB02WFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Vfblav01 record
DataItem FB02WFLR char(852)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem FB02WFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast QTB
DataItem FB02WFQB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First size index
DataItem FB02WFSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function for DB2 I/O module
DataItem FB02WFUN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB02WFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem FB02WFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invalid fastpath fl
DataItem FB02WIFL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB02WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB02WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB02WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB02WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key fields changed flag
DataItem FB02WKFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line counter
DataItem FB02WLCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size index
DataItem FB02WLSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max lines per map
DataItem FB02WMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FB02WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total divert
DataItem FB02WOAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// O/A flags
DataItem FB02WOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pending accept flag
DataItem FB02WPAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm buy date
DataItem FB02WPBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total PO AVAILABLE
DataItem FB02WPOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB02WPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB02WRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// System day
DataItem FB02WSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System date
DataItem FB02WSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System month
DataItem FB02WSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size scroll requested flag
DataItem FB02WSSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style index
DataItem FB02WSTI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// STK QTB
DataItem FB02WSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System year
DataItem FB02WSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size buckets for display
DataItem FB02WSZB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size description
DataItem FB02WSZD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size scroll
DataItem FB02WSZS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total DRS qty
DataItem FB02WTDQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy tolerance
DataItem FB02WTOL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FB02WTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB02WTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// UPdate flag
DataItem FB02WUDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW1Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW2Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW3Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW4Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW5Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW6Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW7Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warehouse 1 size qty
DataItem FB02WW8Q int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse changed flag
DataItem FB02WWCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field 1
DataItem FB02WWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB02WWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 3
DataItem FB02WWF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// O/A flags
DataItem FB02WWHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse total quantities
DataItem FB02WWHT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMDD Date
DataItem FB02WYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FB02WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size has data flag
DataItem FB02WZHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total prior po
DataItem POTOTAL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

