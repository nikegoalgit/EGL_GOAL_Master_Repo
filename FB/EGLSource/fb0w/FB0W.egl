package fb0w;

import corpcom2.XX0XW01;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import fb.common.FB7QTB;
import fb.common.FB7REC;
import fb.common.FB7RTADT;
import fb.common.FB7RTAPC;
import fb.common.FB8BUYDT;
import fb.common.FB9REC;
import fb.common.FBEREC;
import fb.common.FBFREC;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import fy.common.FY1FCTYC;
import fy.common.FY2MFGPC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA1TBLKE;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FB0W ****
// This application is part of the footwear buy system.
// It displays,adds,deletes, and modifies RTA dates and RTA
// percents for a specific product by warehouse or customer
// xref.  It also displays the factories where the product is
// going to be produced and any warehouse or customer xref
// variances.  In addition, the application provides the
// capability of selecting one warehouse or customer xref and
// using PF15 to transfer to a screen that displays the size
// quantities for the selected product.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/04/89   wdishm   Created.
// 08/27/90   jalle1   Check for contention with merge before
//                     any db2 updates (dhermm request)
// 01/22/91   jalle1   Add PF19 capability to go to FB06.
//                     Add pf12 capability to go to FB07.
// 01/11/92   pmainw   Support multiple S.O. for a cust xref.
// 03/19/93   ldeluh   Use units per case from syclr instead
//                     of hardcoded 6 for rounding.
// 05/20/93   ldeluh   Fix bug in record layout
// 08/27/93   ldeluh   Fix some iomod calls for csp v4.
// 12/02/94   pmainw   Re-compile for table change (vfsctl01)
// 01/27/95   jalle1   Change S.O. to 9.3 digits.
// 05/13/97   rkudpi   Changed screen to get rid of hardcoded
//                     warehouse codes to show percent variance
// CONTROL    DATE    NAME  DESCRIPTION OF CHANGE
// -------- -------- ------ -----------------------------------
// Y2KFIX   01/08/97 WSQUIR MODIFICATIONS MADE TO: FB0WM010,
//                          FB0WS23, FB0WS29, FB0W520, FB0W540,
//                          FB0W621, FB0W640 & FB0W650.
// Y2KFIX   02/16/97 WSQUIR MODIFICATIONS MADE TO: FB0W520.
// *********************
Program FB0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0WW00 FB0WW00; // record
  FB0WW01 FB0WW01; // record
  FB0WW02 FB0WW02; // record
  FB0WW03 FB0WW03; // record
  FB0WW04 FB0WW04; // record
  FB0WW05 FB0WW05; // record
  FB0WW06 FB0WW06; // record
  FB0WW07 FB0WW07; // record
  FB0WW08 FB0WW08; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBEREC FBEREC; // record
  FBFREC FBFREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0WM.FB0WM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB0W001;
    FB0W001: FB0W001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the RTA percent maintenance process.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0W002; /* Converse RTA percent maintenance*/
    ;
    ;
    FB0W002: FB0W002();
    goto FB0W002;
  end // end main
end // end FB0W

// FB0W special initialization
Function FB0W001()
   /* ---------------------------------------------------------*/
   /* If entry is from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB")
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
  else
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end
  ;
   /* ---------------------------------------------------------*/
  ;
   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag toyes.*/
   /* ---------------------------------------------------------*/
  ;
  set FB0WW00 empty; /* Working storage record*/
  set FB0WW01 empty; /* Map storage for map heading data*/
  set FB0WW02 empty;
  set FB0WW03 empty;
  set FB0WW04 empty;
  set FB0WW05 empty;
  set FB0WW06 empty;
  set FB0WW07 empty;
  set FB0WW08 empty;
  ;
  set FB0WM010 empty;
  ;
  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  FB0WW00.FB0WWTSL = 4019; /* Temporary storage page length*/
  FB0WW00.FB0WWMAX = 11; /* Max lines per map page*/
  FB0WW00.FB0WWTSP = 1; /* Temp storage page request*/
  FB0WW00.FB0WWISF = "N"; /* fastpath flag*/
  ;
   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to the map and do a select set on DFBUY.VRTQTB01*/
   /* to obtain the number of lines that will be printed for*/
   /* each destination and RTA date.*/
   /* ---------------------------------------------------------*/
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB0WW00.FB0WWRDF = "Y"; /* Request for data flag*/
    FB0WW01.SY1STNBR = FBXREC.SY1STNBR[1];
    FB0WW01.SY2CLRID = FBXREC.SY2CLRID[1];
    FB0WW01.XDMCD = FBXREC.XDMCD[1];
    FB0WW00.FB0WWFDT = FBXREC.FB8BUYDT;
    FB0WW01.FB0WWBDT = FB0WW00.FB0WWBYM;
    FB0WW01.FB0WWFY1 = FBXREC.FBXFCTY1;
    FB0WW01.FB0WWFY2 = FBXREC.FBXFCTY2;
    FB0WW01.FB0WWFY3 = FBXREC.FBXFCTY3;
    FB0WW01.FB0WWFY4 = FBXREC.FBXFCTY4;
    FB0WW01.FB0WWFY5 = FBXREC.FBXFCTY5;
    ;
    set PG2REC empty; /* Initialize style color record*/
    ;
    PG2REC.SY1STNBR = FBXREC.SY1STNBR[1];
    PG2REC.SY2CLRID = FBXREC.SY2CLRID[1];
    PG2REC.XDMCD = FBXREC.XDMCD[1];
    PG2REC.XGPCD = "02";
    ;
    XSPG202(); /* Obtain style color table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FB0WW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FB0WW01.SY2CLRAB = PG2REC.SY2CLRAB;
    end
    ;
    set FBFREC empty; /* Initialize size region qty to buy record*/
    ;
     /* Move in key fields*/
    FBFREC.SY1STNBR = FBXREC.SY1STNBR[1];
    FB0WW00.SY1STNBR = FBXREC.SY1STNBR;
    FBFREC.SY2CLRID = FBXREC.SY2CLRID[1];
    FB0WW00.SY2CLRID = FBXREC.SY2CLRID[1];
    FBFREC.XDMCD = FBXREC.XDMCD[1];
    FB0WW00.XDMCD = FBXREC.XDMCD[1];
    FBFREC.FB8BUYDT = FBXREC.FB8BUYDT;
    FB0WW00.FB8BUYDT = FBXREC.FB8BUYDT;
    ;
    ;
    FB0WS01(); /* Load item count table*/
    ;
  else
    FB0WM010.SY2CLRID = "00 ";
    FB0WW01.SY2CLRID = "00 ";
    FB0WM010.XDMCD = "00";
    FB0WW01.XDMCD = "00";
    FB0WW00.FB0WWFPF = "Y"; /* fastpath flag*/
  end
  ;
   /* ---------------------------------------------------------*/
   /* If the fbxrec has data find the last non  blank position*/
   /* in the fbxrec product key array and save it--this*/
   /* will be used to clear out the array as the products*/
   /* are 'bubbled' up*/
   /* ---------------------------------------------------------*/
  ;
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB0WW00.FB0WWIX1 = 1;
    while (FB0WW00.FB0WWIX1 <= 14)
      if (FBXREC.SY1STNBR[FB0WWIX1] == " ")
        FB0WW00.FB0WWSTI = FB0WW00.FB0WWIX1;
      end
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
    if (FB0WW00.FB0WWSTI == 0)
      FB0WW00.FB0WWSTI = 14;
    end
  else
    FB0WW00.FB0WWSTI = 1;
  end
  ;
  if (FB0WW00.FB0WWFPF == "Y") /* Fast path*/
    converseLib.validationFailed(327);
    return;
  end
  ;
   /* ---------------------------------------------------------*/
   /* OBtain the scheduler autoload flag*/
   /* ---------------------------------------------------------*/
  ;
  FB0WW00.FB0WWISF = "N"; /* INvalid scheduler flag*/
  FB0WS26(); /* Obtain VSUSER01 row*/
  ;
  FB0WS27(); /* Obtain VFSCTL01 row*/
  ;
  if (FB0WW00.FB0WWISF == "Y")
    FB0WW00.FB0WWRDF = "N";
    converseLib.validationFailed(62);
  end
end // end FB0W001

// Footwear RTA % maintenance
Function FB0W002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0W100(); /* Obtain data to display*/
  ;
  FB0W200(); /* Format and display the map*/
  ;
  FB0W300(); /* Check attention identifier*/
  ;
  FB0W400(); /* Reset fields to normal intensity*/
  ;
  FB0W500(); /* Verify the entered data*/
  ;
  FB0W600(); /* Process valid input request*/
  ;
end // end FB0W002

// Obtain data to display
Function FB0W100()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end
  ;
  ;
  ;
  FB0W110(); /* Purge temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Open cursor for DFBUY.VRTQTB01*/
   /* ------------------------------------------------------------*/
  ;
  set FBFREC empty; /* Initialize record*/
  ;
  FBFREC.SY1STNBR = FB0WW00.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW00.SY2CLRID;
  FBFREC.XDMCD = FB0WW00.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  ;
  FB0WS02(); /* Open cursor for DFBUY.VRTQTB01*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain first row--if rows exist process all of the record.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  FB0WS03(); /* Obtain next DFBUY.VRTQTB01 row*/
  ;
  if (FB0WW00.FB0WWQBC == "Y") /* If end of cursor on first read*/
    converseLib.validationFailed(18); /* Request processed no data to display*/
    return;
  end
  ;
   /* Set line count to max lines per page in temp storage*/
   /* Init destination index to 1*/
   /* Subtract first destination line count*/
   /* from the max line count.*/
  ;
  FB0WW00.FB0WWLCT = FB0WW00.FB0WWMAX; /* Set to max lines per page*/
  FB0WW00.FB0WWDIX = 1; /* Init desination index*/
  FB0WW00.FB0WWLCT = FB0WW00.FB0WWLCT - FB0WW00.FB0WWDCT[FB0WWDIX];
  ;
  while (FB0WW00.FB0WWQBC == "N") /* While cursor not at end*/
    if (FBFREC.XDVCD != "02")
      ;
      FB0W120(); /* Process all size region rows*/
      ;
    else
      FB0WS03(); /* Obtain next VRTQTB01 row*/
    end
  end
  ;
  FB0WS04(); /* Close DFBUY.VRTQTB01 cursor*/
  ;
  if (FB0WW00.FB0WWIXT != 0) /* Write partial page to temp storage*/
    ;
    FB0WS05(); /* Add to temp storage*/
    ;
  end
  ;
  ;
  FB0WW00.FB0WWRDF = "N"; /* Data not requested*/
  ;
  ;
  ;
end // end FB0W100

// Purge temporary storage
Function FB0W110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0WW02 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/
  ;
  ;
  FB0WW00.TA5TSQIX = 0; /* Highest page number*/
  FB0WW00.FB0WWIXT = 0; /* temporary storage line index*/
  FB0WW00.FB0WWTSP = 1;
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FB0WW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0WM010.XXXPRCNM = "FB0W110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0WM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0W110

// Process all size region rows
Function FB0W120()
  ;
   /* ------------------------------------------------------------*/
   /* Only one destination (warehouse and customer xref)*/
   /* can appear on a page--so when there is a break on warehouse*/
   /* and/or customer xref check the next entry in the*/
   /* destination working storage table and increment the line*/
   /* counter to determine if the new destination records will*/
   /* fit on the current page--if not write a page to temp*/
   /* storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW00.FB0WWSWH = FBFREC.XWHCD;
  FB0WW00.FB0WWSCF = FBFREC.PC2CUXID;
  FB0WW00.FB0WWPAR = FBFREC.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB0WW00.FB0WWCUO = FBFREC.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB0WW00.FB0WWNOR = FBFREC.OP1NORID; /* OP-NIKE-ORD-ID*/
  ;
  while (FB0WW00.FB0WWQBC == "N"             /* While not end of cursor*/
   && FB0WW00.FB0WWSWH == FBFREC.XWHCD    
   && FB0WW00.FB0WWSCF == FBFREC.PC2CUXID 
   && FB0WW00.FB0WWPAR == FBFREC.OP1PARTN /* OP-ORD-PART-CHAR*/
   && FB0WW00.FB0WWCUO == FBFREC.OP1CUOID /* OP-CUST-ORD-ID*/
   && FB0WW00.FB0WWNOR == FBFREC.OP1NORID) /* OP-NIKE-ORD-ID*/
    ;
    FB0W121(); /* Process all destinations*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* All of one destination has been processed--add the next*/
   /* destination record count to the page line count to see*/
   /* if another destination can fit on the page--if not*/
   /* write a temp storage record.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWQBC == "N") /* While not end of cursor*/
    ;
    FB0WW00.FB0WWDIX = FB0WW00.FB0WWDIX + 1;
    if (FB0WW00.FB0WWDIX > 30) /* index exceeds array bounds*/
      ;
      FB0WM010.XXXPRCNM = "FB0W120"; /* Module identification*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "PROCESS ALL SIZE REGION ROW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FB0WM010.XXXPRCNM; /* Program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
      TA1REC.TA1MAPNO = "M001"; /* Map number*/
      FB0WW00.FB0WWRDF = "N"; /* request data fl*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/
      exit stack; /* Exit to display map*/
      ;
    end
    FB0WW00.FB0WWLCT = FB0WW00.FB0WWLCT - FB0WW00.FB0WWDCT[FB0WWDIX];
    ;
    if (FB0WW00.FB0WWLCT < 0) /* Next destination will not fit*/
      ;
      FB0WS05(); /* add page to temporary storage*/
      ;
    end
  end
  ;
  ;
  ;
end // end FB0W120

// Process one destination
Function FB0W121()
  ;
   /* ------------------------------------------------------------*/
   /* Add a line to the temporary storage map index.*/
   /* Move the FBFREC fields to the FB0WW02 (temp storage detail*/
   /* redefine record) and then into the current occurrence of*/
   /* the temp storage record.*/
   /* Add all of the size buckets into a work field and move*/
   /* to total quantity field.*/
   /* Obtain the next size region qty to buy row.*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW00.FB0WWIXT = FB0WW00.FB0WWIXT + 1;
  ;
  FB0WW02.XWHCD = FBFREC.XWHCD;
  FB0WW02.PC2CUXID = FBFREC.PC2CUXID;
  FB0WW02.OP1PARTN = FBFREC.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB0WW02.OP1CUOID = FBFREC.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB0WW02.OP1NORID = FBFREC.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB0WW02.XQACD = FBFREC.XQACD;
  FB0WW02.PC2INSEG = FBFREC.PC2INSEG;
  FB0WW02.XPGCD = FBFREC.XPGCD;
  FB0WW02.XUMCD = FBFREC.XUMCD;
  FB0WW02.FB7RTADT = FBFREC.FB7RTADT;
  FB0WW02.FB7RTAPC = FBFREC.FB7RTAPC;
  FB0WW00.FB0WWFDT = FBFREC.FB7RTADT;
  FB0WW02.FB0WWSYY = FB0WW00.FB0WWFYY;
  FB0WW02.FB0WWSMM = FB0WW00.FB0WWFMM;
  FB0WW02.FB0WWSDD = FB0WW00.FB0WWFDD;
  FB0WW02.ZZZCHGCT = FBFREC.ZZZCHGCT;
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init work index*/
  FB0WW00.FB0WWWF1 = 0; /* Work field*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FBFREC.FB7QTB[FB0WWIX1];
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
  FB0WW02.FB0WWTQB = FB0WW00.FB0WWWF1;
  ;
  move FBFREC.FB7QTB to FB0WW02.FB7QTB[1] for all;
  ;
  FB0WW03.FB0WW03R[FB0WWIXT] = FB0WW02.FB0WW02G;
  ;
  if (FB0WW00.FB0WWIXT == 11)
    FB0WS05(); /* add page to temp storage*/
  end
  ;
  ;
  FB0WS03(); /* Obtain next size region qty to buy*/
                                   /* row*/
  ;
  ;
  ;
end // end FB0W121

// Format and display map 1
Function FB0W200()
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    set FB0WM010 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
   /* -----------------------------------------------------------*/
   /* If map is not formatted, format the data to display*/
   /* -----------------------------------------------------------*/
  ;
  ;
  if (FB0WW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FB0WW00.FB0WWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      set FB0WM010 initial;
      ;
      FB0WS06(); /* Obtain temp storage page*/
      ;
      ;
    end
  end
  ;
  ;
  if (FB0WM010.XXXCURDT == 0) /* Map not formatted*/
    ;
    FB0W210(); /* Move header data to the map*/
    ;
    FB0W220(); /* Format map 1 detail lines*/
    ;
  end
  ;
  FB0WM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (FB0WM010.SY1STNBR == " ")
      set FB0WM010.SY1STNBR cursor;
    else
      set FB0WM010.FB0WMPCT[1] cursor;
    end
  end
  ;
  ;
  ;
  if (FB0WW00.XXXMSGNO != 0) /* Contains informational message*/
    if (FB0WW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB0WW00.XXXMSGNO);
    end
  end
  ;
  FB0WM010.XXXPRCNM = "FB0W"; /* Process number*/
  ;
  converse FB0WM010 ;
  ;
   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/
  ;
  FB0WW00.XXXMSGNO = 0; /* Message number*/
  FB0WM010.XXXPRCNM = "FB0W"; /* Process number*/
  ;
end // end FB0W200

// Format map Header data
Function FB0W210()
  ;
   /* ------------------------------------------------------------*/
   /* Move map header from fb0ww01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0WM010.SY1STNBR = FB0WW01.SY1STNBR; /* Style number*/
  FB0WM010.SY2CLRID = FB0WW01.SY2CLRID; /* Color*/
  FB0WM010.XDMCD = FB0WW01.XDMCD; /* Dimension*/
  FB0WM010.SY1SSTNM = FB0WW01.SY1SSTNM; /* Style short description*/
  FB0WM010.SY2CLRAB = FB0WW01.SY2CLRAB; /* Colorshort description*/
  FB0WM010.FB0WMFY1 = FB0WW01.FB0WWFY1; /* Factory 1*/
  FB0WM010.FB0WMFY2 = FB0WW01.FB0WWFY2; /* Factory 2*/
  FB0WM010.FB0WMFY3 = FB0WW01.FB0WWFY3; /* Factory 3*/
  FB0WM010.FB0WMFY4 = FB0WW01.FB0WWFY4; /* Factory 4*/
  FB0WM010.FB0WMFY5 = FB0WW01.FB0WWFY5; /* Factory 5*/
  FB0WM010.FB0WMBDT = FB0WW01.FB0WWBDT; /* Buy date*/
  ;
  ;
   /* ----------------------------------------------------*/
   /* If there is no product in the FBXREC allow entry*/
   /* of product key--otherwise set to protect.*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FBXREC.SY1STNBR[1] == " ")
    set FB0WM010.SY1STNBR initialAttributes;
    set FB0WM010.SY2CLRID initialAttributes;
    set FB0WM010.XDMCD initialAttributes;
    set FB0WM010.FB0WMBDT initialAttributes;
  else
    set FB0WM010.SY1STNBR skip;
    set FB0WM010.SY2CLRID skip;
    set FB0WM010.XDMCD skip;
    set FB0WM010.FB0WMBDT skip;
  end
  ;
  ;
  ;
end // end FB0W210

// Format map 1 Detail lines
Function FB0W220()
  ;
   /* ------------------------------------------------------------*/
   /* Move each temporary storage line from the record to*/
   /* the map line.  Unprotect and display the select field*/
   /* and the percent field when there is data to display.*/
   /* Position the cursor on the first detail percent field.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX; /* set to max lines*/
  ;
  while (FB0WW00.FB0WWIXM >= 1)
    ;
    ;
    if (FB0WW03.FB7RTADT[FB0WWIXM] != 0)
      FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWIXM];
      FB0WM010.XWHCD[FB0WWIXM] = FB0WW03.XWHCD[FB0WWIXM];
      FB0WM010.PC2CUXID[FB0WWIXM] = FB0WW03.PC2CUXID[FB0WWIXM];
      FB0WM010.OP1PARTN[FB0WWIXM] = FB0WW03.OP1PARTN[FB0WWIXM];
      FB0WM010.OP1CUOID[FB0WWIXM] = FB0WW03.OP1CUOID[FB0WWIXM];
      FB0WM010.OP1NORID[FB0WWIXM] = FB0WW03.OP1NORID[FB0WWIXM];
      FB0WM010.FB0WMPCT[FB0WWIXM] = FB0WW03.FB7RTAPC[FB0WWIXM];
      FB0WM010.FB0WMRDT[FB0WWIXM] = FB0WW03.FB0WWRDT[FB0WWIXM];
      if (FB0WW03.PC2CUXID[FB0WWIXM] == "     ")
        set FB0WM010.OP1CUOID[FB0WWIXM] skip, invisible;
        set FB0WM010.FB0WMDOT[FB0WWIXM] skip, invisible;
        set FB0WM010.OP1NORID[FB0WWIXM] skip, invisible;
      end
      FB0WW00.FB0WWIX1 = 1;
      FB0WW00.FB0WWWF1 = 0;
      while (FB0WW00.FB0WWIX1 <= 40)
        FB0WW00.FB0WWWF2 = FB0WW02.FB7QTB[FB0WWIX1];
        FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF2;
        FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
      end
      FB0WM010.FB0WMQTY[FB0WWIXM] = FB0WW00.FB0WWWF1;
      set FB0WM010.FB0WMSEL[FB0WWIXM] normal; /* Allow entry*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] cursor, normal;
      set FB0WM010.FB0WMRDT[FB0WWIXM] normal;
    else
      set FB0WM010.FB0WMSEL[FB0WWIXM] initialAttributes; /* Protect and darken*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] initialAttributes; /* protect and darken*/
      set FB0WM010.FB0WMRDT[FB0WWIXM] initialAttributes;
      set FB0WM010.FB0WMDOT[FB0WWIXM] skip, invisible;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
  end
  ;
  ;
  ;
  ;
end // end FB0W220

// Check attention ID
Function FB0W300()
  ;
   /* ------------------------------------------------------------*/
   /* If the percent has been calculated the only value keys*/
   /* are PF 9 for update or PA2 for cancel.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWPCL == "Y" /* Percent has been calculated*/
   || FB0WW00.FB0WWCDC != 0)  /* or RTA dates changed*/
    if (converseVar.eventKey is pf9) /* Update*/
      return;
    else
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        set FB0WM010 empty; /* Initialize map*/
        TA5REC.TA5TSQIX = 0; /* Reload from temp storage*/
        FB0WM010.XXXPRCNM = "FB0W";
        FB0WW00.FB0WWPCL = " ";
        FB0WW00.FB0WWCDC = 0;
        exit stack;
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FB0WM010 empty; /* Initialize map*/
    TA5REC.TA5TSQIX = 0; /* Reload from temp storage*/
    FB0WM010.XXXPRCNM = "FB0W";
    FB0WW00.FB0WWPCL = " ";
    FB0WW00.FB0WWCDC = 0;
    exit stack;
     /* AND FB0WW00.FB0WWPCL NE 'Y'*/
     /* SET FB0WM010 PAGE*/
     /* MOVE 'FB0W' TO FB0WM010.XXXPRCNM;*/
     /* EZEFLO*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the percent has been calculated the only value keys*/
   /* are PF 9 for update or PA2 for cancel.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWPCL == "Y" /* Percent has been calculated*/
   || FB0WW00.FB0WWCDC != 0)  /* or RTA dates changed*/
    if (converseVar.eventKey is pf9) /* Update*/
      return;
    else
      if (converseVar.eventKey is pa2) /* PA2 was pressed*/
        set FB0WM010 empty; /* Initialize map*/
        TA5REC.TA5TSQIX = 0; /* Reload from temp storage*/
        FB0WM010.XXXPRCNM = "FB0W";
        FB0WW00.FB0WWPCL = " ";
        FB0WW00.FB0WWCDC = 0;
        exit stack;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    if (FB0WW00.FB0WWPCL == "Y") /* Percent has been calculated*/
      converseLib.validationFailed(05);
                                   /* Data changes not allowed during scrol*/
      exit stack;
    else
      FB0W310(); /* Validate scroll request*/
      return; /* Exit to next process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0WM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FB0W110(); /* Purge temp storage*/
      if (FBXREC.SY1STNBR[1] == " ")
        if (FB0WW00.SY1STNBR != " ")
          FBXREC.SY1STNBR[1] = FB0WW00.SY1STNBR;
          FBXREC.SY2CLRID[1] = FB0WW00.SY2CLRID;
          FBXREC.XDMCD[1] = FB0WW00.XDMCD;
          FBXREC.FB8BUYDT = FB0WW00.FB8BUYDT;
        end
      end
      ;
      COMMAREA.CATOAP = FB0WM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0WM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0WM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0WM010.XXXPRCNM = "FB0W300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* Help screen requested*/
    ;
    FB0W110(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0WM010.XXXPRCNM = "FB0W300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* Menu screen requested*/
    ;
    FB0W110(); /* Purge temp storage*/
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    ;
    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0WM010.XXXPRCNM = "FB0W300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter /* (Process screen input)*/
   || converseVar.eventKey is pf6   /* Next product*/
   || converseVar.eventKey is pf9   /* Update*/
   || converseVar.eventKey is pf12  /* DRS RTA size qty moves  (FB07)*/
   || converseVar.eventKey is pf15  /* RTA size quantity moves (FB0Y)*/
   || converseVar.eventKey is pf16  /* Product accept*/
   || converseVar.eventKey is pf19) /* factory size qty moves  (FB06)*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move key data to the fbwrec prior to a transfer--in no*/
   /* data is there already.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf14)
    if (FBXREC.SY1STNBR[1] == " ")
      if (FB0WW00.SY1STNBR != " ")
        FBXREC.SY1STNBR[1] = FB0WW00.SY1STNBR;
        FBXREC.SY2CLRID[1] = FB0WW00.SY2CLRID;
        FBXREC.XDMCD[1] = FB0WW00.XDMCD;
        FBXREC.FB8BUYDT = FB0WW00.FB8BUYDT;
        FBWREC.FBWFILL = FBXREC.FBXGROUP;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF3  transfer to FB0U (Rta product selection)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* Product selection requested*/
    ;
    FB0W110(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "FB0U"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0WM010.XXXPRCNM = "FB0W300";
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* On PF14 transfer to FB0X (RTA % factory maintenance)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* Product selection requested*/
    ;
    FB0W110(); /* Purge temp storage*/
    ;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWFILL;
    COMMAREA.CATOAP = "FB0X"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0WM010.XXXPRCNM = "FB0W300";
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FB0WM010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0WM010.XXXPRCNM = "FB0W300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;
  ;
  ;
  ;
end // end FB0W300

// Validate scroll request
Function FB0W310()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB0WW00.FB0WWTSP < 2)       /* and no previous pages*/
    ;
    FB0WM010.XXXPRCNM = "FB0W131"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB0WW00.FB0WWTSP >= FB0WW00.TA5TSQIX) /* and no more pages*/
    ;
    FB0WM010.XXXPRCNM = "FB0W310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   && FB0WW00.FB0WWTSP == 1)      /* on first page*/
    ;
    FB0WM010.XXXPRCNM = "FB0W310"; /* Module identification*/
    converseLib.validationFailed(6); /* No more pages to display*/
    ;
  end
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
  ;
end // end FB0W310

// Reset highlighted fields
Function FB0W400()
  ;
   /* ----------------------------------------------------*/
   /* Set the select code and RTA detail pct to*/
   /* either defined or normal.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIXM = 1; /* Initialize map index*/
  ;
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX) /* Max lines*/
    set FB0WM010.FB0WMQTY[FB0WWIXM] initialAttributes;
    if (FB0WW03.FB7RTADT[FB0WWIXM] == 0)
      ;
      set FB0WM010.FB0WMSEL[FB0WWIXM] initialAttributes; /* Protect and darken*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] initialAttributes;
      set FB0WM010.FB0WMRDT[FB0WWIXM] initialAttributes;
    else
      set FB0WM010.FB0WMSEL[FB0WWIXM] normal; /* Allow entry*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] normal;
      set FB0WM010.FB0WMRDT[FB0WWIXM] normal;
      ;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
   /* SET FB0WM010.FB0WMW2P DEFINED;*/
   /* SET FB0WM010.FB0WMW4P DEFINED;*/
   /* SET FB0WM010.FB0WMW7P DEFINED;*/
  set FB0WM010.FB0WMCXP initialAttributes;
  ;
   /* ----------------------------------------------------*/
   /* If there is no product in the FBXREC allow entry*/
   /* of product key--otherwise set to protect.*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FBXREC.SY1STNBR[1] == " ")
    set FB0WM010.SY1STNBR initialAttributes;
    set FB0WM010.SY2CLRID initialAttributes;
    set FB0WM010.XDMCD initialAttributes;
    set FB0WM010.FB0WMBDT initialAttributes;
  else
    set FB0WM010.SY1STNBR skip;
    set FB0WM010.SY2CLRID skip;
    set FB0WM010.XDMCD skip;
    set FB0WM010.FB0WMBDT skip;
  end
  ;
   /* ----------------------------------------------------*/
   /* Set add fields to normal*/
   /* ----------------------------------------------------*/
  ;
  set FB0WM010.FB0WMEWH normal; /* Entered warehouse*/
  set FB0WM010.FB0WMEXF normal; /* Entered xref*/
  set FB0WM010.FB0WMRTM normal; /* Entered RTA month*/
  set FB0WM010.FB0WMRTD normal; /* Entered RTA day*/
  set FB0WM010.FB0WMRTY normal; /* Entered RTA year*/
  set FB0WM010.FB0WMEPC normal; /* Entered percent*/
  ;
  ;
end // end FB0W400

// Verify entered data
Function FB0W500()
  ;
   /* ----------------------------------------------------*/
   /* If fastpath into application allow only PF1, PF3*/
   /* or PF4.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWFPF == "Y") /* Fast path flag*/
    converseLib.validationFailed(327);
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* If userid not in scheduler table display message*/
   /* on*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WW00.FB0WWISF == "Y") /* Invalid scheduler flag*/
    converseLib.validationFailed(62);
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* Check for contention due to merge.*/
   /* ----------------------------------------------------*/
  ;
  FB0W505(); /* check for contention*/
  ;
   /* ----------------------------------------------------*/
   /* Do not allow any updates if the scheduler auto*/
   /* load flag is equal 'y'.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9
   && FBMREC.FBMALAFL == "Y")
    converseLib.validationFailed(322); /* NO updates etc*/
    exit stack;
  end
   /* ----------------------------------------------------*/
   /* If the style, color or dimension or buy month*/
   /* entered (ie changed) then perform process to*/
   /* validate the key fields.  if no style, color*/
   /* dim on screen by either entry or from FBXREC*/
   /* indicate an error and ezeflo to display message.*/
   /* ----------------------------------------------------*/
  ;
  ;
   /* IF FB0WM010.SY1STNBR NE ' '     ; Style exists or*/
    /* OR FB0WM010.SY2CLRID NE ' '   ; Color exists or*/
    /* OR FB0WM010.XDMCD NE ' '      ; Dimension exists  or*/
    /* OR FB0WM010.FB0WMBDT NE 0     ; Buy date exists*/
    /* IF FB0WM010.SY1STNBR NE FB0WW01.SY1STNBR*/
      /* OR FB0WM010.SY2CLRID NE FB0WW01.SY2CLRID*/
      /* OR FB0WM010.XDMCD NE FB0WW01.XDMCD*/
      /* OR FB0WM010.FB0WMBDT NE FB0WW01.FB0WWBDT*/
      /* ;*/
      /* PERFORM FB0W510             ; Edit key fields*/
      /* ;*/
    /* END ;*/
   /* ELSE ;*/
    /* IF FB0WM010.FB0WMBDT EQ 0     ; No buy date entered*/
      /* SET FB0WM010.FB0WMBDT CURSOR,BRIGHT;*/
      /* MOVE 8 TO EZEMNO*/
    /* END ;*/
    /* IF FB0WM010.XDMCD EQ ' '      ; No dimension entered*/
      /* SET FB0WM010.XDMCD CURSOR,BRIGHT;*/
      /* MOVE 8 TO EZEMNO*/
    /* END ;*/
    /* IF FB0WM010.SY2CLRID EQ ' '   ; No color entered*/
      /* SET FB0WM010.SY2CLRID CURSOR,BRIGHT;*/
      /* MOVE 8 TO EZEMNO*/
    /* END ;*/
    /* IF FB0WM010.SY1STNBR EQ ' '   ; No style entered*/
      /* SET FB0WM010.SY1STNBR CURSOR,BRIGHT;*/
      /* MOVE 8 TO EZEMNO*/
    /* END ;*/
    /* IF EZEMNO NE 0;*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/
  ;
   /* ----------------------------------------------------*/
   /* If a warehouse, customer xref, RTA date or RTA*/
   /* percent have been entered validate the fields.*/
   /* If no data in fields clear the saved fields*/
   /* (in case any map fields were erased).*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWADF = "N";
  FB0WW00.FB0WWCWH = " "; /* Init changed warehouse to spaces*/
  FB0WW00.FB0WWSXF = " "; /* Init changed cust xref to spaces*/
  ;
  if (FB0WM010.FB0WMEWH != " "
   || FB0WM010.FB0WMEXF != " "
   || FB0WM010.FB0WMRTM != 0
   || FB0WM010.FB0WMRTD != 0
   || FB0WM010.FB0WMRTY != 0
   || FB0WM010.FB0WMEPC != 0)
    ;
    FB0WW00.FB0WWADF = "Y"; /* Add flag set to yes*/
    ;
    FB0W520(); /* Validate entered fields*/
    ;
    if (converseVar.validationMsgNum == 0)
      FB0WW00.FB0WWCWH = FB0WM010.FB0WMEWH;
      FB0WW00.FB0WWSXF = FB0WM010.FB0WMEXF;
    end
    ;
  else
    FB0WW00.FB0WWADF = "N"; /* Add flag set to no*/
    FB0WM010.FB0WMEWH = " ";
    FB0WM010.FB0WMEXF = " ";
    FB0WM010.FB0WMRTM = 0;
    FB0WM010.FB0WMRTD = 0;
    FB0WM010.FB0WMRTY = 0;
    FB0WM010.FB0WMEPC = 0;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate any percents entered on the detail lines.*/
   /* First validate that only 1 new percent has been*/
   /* entered if it is an add.*/
   /* Next validate that only 2 new percents have been*/
   /* entered if it is a change or a delete.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWCTP = 0; /* Init percent count to 1*/
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX; /* Set to max for map lines*/
  ;
  while (FB0WW00.FB0WWIXM >= 1)
    if (FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      FB0WW00.FB0WWCTP = FB0WW00.FB0WWCTP + 1;
    end
    if (FB0WW00.FB0WWCTP > 1
     && FB0WW00.FB0WWADF == "Y") /* If an add*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] cursor, bold;
      converseLib.validationFailed(179); /* Only one % change with an add*/
    end
    if (FB0WW00.FB0WWCTP > 2
     && FB0WW00.FB0WWADF != "Y") /* Not an add*/
      set FB0WM010.FB0WMPCT[FB0WWIXM] cursor, bold;
      converseLib.validationFailed(180); /* Only two percents can be modified*/
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate that if percents have been changed--*/
   /* it is for the same warehouse and/ or customer*/
   /* xref.*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FB0WW00.FB0WWCTP != 0) /* Percent count > 0*/
    ;
    FB0WW00.FB0WWIX1 = 1; /* work index*/
    while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMAX) /* Max lines on map*/
      if (FB0WM010.FB0WMPCT[FB0WWIX1] != FB0WW03.FB7RTAPC[FB0WWIX1])
        FB0WW00.FB0WWCWH = FB0WM010.XWHCD[FB0WWIX1];
        FB0WW00.FB0WWSXF = FB0WM010.PC2CUXID[FB0WWIX1];
        FB0WW00.FB0WWPA2 = FB0WM010.OP1PARTN[FB0WWIX1];
        FB0WW00.FB0WWCU2 = FB0WM010.OP1CUOID[FB0WWIX1];
        FB0WW00.FB0WWNO2 = FB0WM010.OP1NORID[FB0WWIX1];
        FB0WW00.FB0WWIX2 = 1; /* Init index*/
        while (FB0WW00.FB0WWIX2 <= FB0WW00.FB0WWMAX)
          if (FB0WM010.FB0WMPCT[FB0WWIX2] != FB0WW03.FB7RTAPC[FB0WWIX2]
           && FB0WW00.FB0WWIX1 != FB0WW00.FB0WWIX2)
            if (FB0WM010.XWHCD[FB0WWIX1] != FB0WM010.XWHCD[FB0WWIX2]
             || FB0WM010.PC2CUXID[FB0WWIX1] != FB0WM010.PC2CUXID[FB0WWIX2]
             || FB0WM010.OP1PARTN[FB0WWIX1] != FB0WM010.OP1PARTN[FB0WWIX2]
             || FB0WM010.OP1CUOID[FB0WWIX1] != FB0WM010.OP1CUOID[FB0WWIX2]
             || FB0WM010.OP1NORID[FB0WWIX1] != FB0WM010.OP1NORID[FB0WWIX2])
              converseLib.validationFailed(172);
              set FB0WM010.XWHCD[FB0WWIX1] cursor, bold;
              set FB0WM010.XWHCD[FB0WWIX2] cursor, bold;
            else
            end
          end
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
        end
      end
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* If a percent has been entered or changed verify*/
   /* that the total for all of the selected warehouses*/
   /* and/or customer xref are equal to 100.*/
   /* if not equal to 100 move the percent to either the*/
   /* warehouse or customer xref warehouse variance field*/
   /* and highlight that percent.*/
   /* ----------------------------------------------------*/
  ;
  ;
  FB0WM010.FB0WMWHP = " ";
  FB0WM010.FB0WMWHC = " ";
  ;
  if (FB0WW00.FB0WWCTP != 0 /* Percent count > 0*/
   || FB0WW00.FB0WWADF == "Y") /* An add*/
    ;
    FB0WW00.FB0WWWPC = 0; /* work percent field set to 0*/
    ;
    if (FB0WM010.FB0WMEPC != 0) /* percent has been entered*/
      FB0WW00.FB0WWWPC = FB0WW00.FB0WWWPC + FB0WM010.FB0WMEPC;
    end
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWMAX; /* Init work index*/
    ;
    while (FB0WW00.FB0WWIX1 >= 1)
      if (FB0WM010.XWHCD[FB0WWIX1] == FB0WW00.FB0WWCWH
       && FB0WM010.PC2CUXID[FB0WWIX1] == FB0WW00.FB0WWSXF
       && FB0WM010.OP1PARTN[FB0WWIX1] == FB0WW00.FB0WWPA2
       && FB0WM010.OP1CUOID[FB0WWIX1] == FB0WW00.FB0WWCU2
       && FB0WM010.OP1NORID[FB0WWIX1] == FB0WW00.FB0WWNO2)
        FB0WW00.FB0WWWPC = FB0WW00.FB0WWWPC + FB0WM010.FB0WMPCT[FB0WWIX1];
      end
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 - 1;
    end
    ;
    if (FB0WW00.FB0WWWPC != 100)
      converseLib.validationFailed(45); /* Total percent does not equal 100*/
      FB0WM010.FB0WMWHC = FB0WW00.FB0WWCWH;
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWPC - 100;
      FB0WM010.FB0WMWHP = FB0WW00.FB0WWWF1;
      set FB0WM010.FB0WMWHP bold;
    else
      FB0WM010.FB0WMWHC = " ";
    end
   /* IF FB0WW00.FB0WWCWH EQ '02';*/
   /* FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWPC - 100;*/
   /* MOVE FB0WW00.FB0WWWF1 TO FB0WM010.FB0WMW2P;*/
   /* ;     /* MOVE FB0WW00.FB0WWWPC TO FB0WM010.FB0WMW2P;*/
   /* SET FB0WM010.FB0WMW2P BRIGHT;*/
   /* END;*/
   /* IF FB0WW00.FB0WWCWH EQ '04';*/
   /* FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWPC - 100;*/
   /* MOVE FB0WW00.FB0WWWF1 TO FB0WM010.FB0WMW4P;*/
   /* ;     /* MOVE FB0WW00.FB0WWWPC TO FB0WM010.FB0WMW4P;*/
   /* SET FB0WM010.FB0WMW4P BRIGHT;*/
   /* END;*/
   /* IF FB0WW00.FB0WWCWH EQ '07';*/
   /* FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWPC - 100;*/
   /* MOVE FB0WW00.FB0WWWF1 TO FB0WM010.FB0WMW7P;*/
   /* ;     /* MOVE FB0WW00.FB0WWWPC TO FB0WM010.FB0WMW7P;*/
   /* SET FB0WM010.FB0WMW7P BRIGHT;*/
   /* END;*/
   /* IF FB0WW00.FB0WWSXF NE ' ';*/
   /* FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWPC - 100;*/
   /* MOVE FB0WW00.FB0WWWF1 TO FB0WM010.FB0WMCXP;*/
   /* ;     /* MOVE FB0WW00.FB0WWWPC TO FB0WM010.FB0WMCXP;*/
   /* SET FB0WM010.FB0WMCXP BRIGHT;*/
   /* END;*/
   /* ND;*/
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* if an update has been requested (PF9) and no*/
   /* fields have been entered or changed --error*/
   /* ----------------------------------------------------*/
  ;
  ;
  FB0WW00.FB0WWFCF = "N"; /* Field changed flag*/
  ;
  if (FB0WM010.FB0WMEPC != 0) /* percent has been entered*/
    FB0WW00.FB0WWFCF = "Y"; /* Field changed flag*/
  end
  ;
  FB0WW00.FB0WWIXM = 1; /* Init map index*/
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
    if (FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      FB0WW00.FB0WWFCF = "Y"; /* Field changed flag*/
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate for PF12 (one from 'f' line must be*/
   /* selected, one to 't' row is optional.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWCTF = 0; /* Field to count from codes*/
  FB0WW00.FB0WWCTT = 0; /* Field to count to codes*/
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX;
  ;
  if (converseVar.eventKey is pf12) /* FB07 (drsrta)*/
    if (FB0WM010.SY1STNBR == " ")
      converseLib.validationFailed(008);
      set FB0WM010.SY1STNBR bold;
    end
    ;
    while (FB0WW00.FB0WWIXM >= 1)
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
        FB0WW00.FB0WWCTF = FB0WW00.FB0WWCTF + 1;
      else
        if (FB0WM010.FB0WMSEL[FB0WWIXM] == "T")
          FB0WW00.FB0WWCTT = FB0WW00.FB0WWCTT + 1;
        else
          if (FB0WM010.FB0WMSEL[FB0WWIXM] != " ")
            converseLib.validationFailed(010); /* invalid*/
            set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
          end
        end
      end
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
    end
    ;
    if (FB0WW00.FB0WWCTF < 1)
      converseLib.validationFailed(318); /* sel 1 from row, to is optional*/
      set FB0WM010.FB0WMSEL[1] cursor;
    end
    ;
    if (FB0WW00.FB0WWCTF > 1)
      converseLib.validationFailed(209); /* no more than 1 from row*/
      set FB0WM010.FB0WMSEL[1] cursor;
    end
    ;
    if (FB0WW00.FB0WWCTT > 1)
      converseLib.validationFailed(210); /* no more than 1 to row*/
      set FB0WM010.FB0WMSEL[1] cursor;
    end
    ;
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end
  ;
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate for PF15 (a from 'f' and a to 't' line*/
   /* must be selected--only one) and it must be for*/
   /* the same warehouse (not customer xref).*/
   /* In addition--a style must have been entered or*/
   /* passed in the FBXREC.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWCTF = 0; /* Field to count from codes*/
  FB0WW00.FB0WWTIX = 0;
  FB0WW00.FB0WWFIX = 0;
  FB0WW00.FB0WWCTT = 0; /* Field to count to codes*/
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX;
  ;
  if (converseVar.eventKey is pf15) /* FB0Y (size)*/
    if (FB0WM010.SY1STNBR == " ")
      converseLib.validationFailed(008);
      set FB0WM010.SY1STNBR bold;
    end
    ;
    while (FB0WW00.FB0WWIXM >= 1)
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F"
       || FB0WM010.FB0WMSEL[FB0WWIXM] == "T")
        FB0WW00.FB0WWCNT = 0;
        if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
          FB0WW00.FB0WWFIX = FB0WW00.FB0WWIXM;
          FB0WW00.FB0WWCTF = FB0WW00.FB0WWCTF + 1;
          FB0WW00.FB0WWIX1 = 1; /* Init second index*/
          while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMAX)
            if (FB0WM010.FB0WMSEL[FB0WWIXM] == FB0WM010.FB0WMSEL[FB0WWIX1]
             && FB0WW00.FB0WWIXM != FB0WW00.FB0WWIX1)
              set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
              converseLib.validationFailed(209); /* cannot select more than 1 from line*/
            end
            if (FB0WW03.PC2CUXID[FB0WWIXM] != " ")
              set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
              converseLib.validationFailed(254); /* cannot have customer xref*/
            end
            FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
          end
        end
        if (FB0WM010.FB0WMSEL[FB0WWIXM] == "T")
          FB0WW00.FB0WWTIX = FB0WW00.FB0WWIXM;
          FB0WW00.FB0WWCTT = FB0WW00.FB0WWCTT + 1;
          FB0WW00.FB0WWIX1 = 1; /* Init second index*/
          while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMAX)
            if (FB0WM010.FB0WMSEL[FB0WWIXM] == FB0WM010.FB0WMSEL[FB0WWIX1]
             && FB0WW00.FB0WWIXM != FB0WW00.FB0WWIX1)
              set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
              converseLib.validationFailed(210); /* cannot select more than 1 to line*/
            end
            if (FB0WW03.PC2CUXID[FB0WWIXM] != " ")
              set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
              converseLib.validationFailed(254); /* Only warehouse can be selected*/
            end
            FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
          end
        end
      else
        if (FB0WM010.FB0WMSEL[FB0WWIXM] != " ")
          set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
          converseLib.validationFailed(318); /* select 1 'f' and 1 't' line*/
        end
      end
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
    end
    if (FB0WW00.FB0WWCTF == 0)
      set FB0WM010.FB0WMSEL[1] cursor;
      converseLib.validationFailed(318); /* select 1 'f' row*/
    end
    if (converseVar.validationMsgNum == 0)
       /* next sentence*/
    else
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is pf15) /* FB0Y (size)*/
    if (FB0WW00.FB0WWCTT != 0) /* There is a to row*/
      if (FB0WM010.XWHCD[FB0WWFIX] != FB0WM010.XWHCD[FB0WWTIX])
        set FB0WM010.XWHCD[FB0WWFIX] bold;
        set FB0WM010.XWHCD[FB0WWTIX] bold;
        converseLib.validationFailed(182); /* only one warehouse*/
      end
    end
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate for PF19 (one from 'f' line must be*/
   /* selected).*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWCTF = 0; /* Field to count from codes*/
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX;
  ;
  if (converseVar.eventKey is pf19) /* FB06 (fctsz)*/
    if (FB0WM010.SY1STNBR == " ")
      converseLib.validationFailed(008);
      set FB0WM010.SY1STNBR bold;
    end
    ;
    while (FB0WW00.FB0WWIXM >= 1)
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
        FB0WW00.FB0WWCTF = FB0WW00.FB0WWCTF + 1;
      else
        if (FB0WM010.FB0WMSEL[FB0WWIXM] != " ")
          converseLib.validationFailed(010); /* invalid*/
          set FB0WM010.FB0WMSEL[FB0WWIXM] cursor, bold;
        end
      end
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
    end
    ;
    if (FB0WW00.FB0WWCTF < 1)
      converseLib.validationFailed(394); /* select 1 from row*/
      set FB0WM010.FB0WMSEL[1] cursor;
    end
    ;
    if (FB0WW00.FB0WWCTF > 1)
      converseLib.validationFailed(209); /* no more than 1 from row*/
      set FB0WM010.FB0WMSEL[1] cursor;
    end
    ;
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate any entered RTA date.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX; /* Set to max for map lines*/
  FB0WW00.FB0WWCDC = 0; /* Count RTA date changes*/
  ;
  while (FB0WW00.FB0WWIXM >= 1)
    if (FB0WM010.FB0WMRDT[FB0WWIXM] != FB0WW03.FB0WWRDT[FB0WWIXM])
      FB0WW00.FB0WWRIX = FB0WW00.FB0WWIXM; /* RTA index*/
      FB0WW00.FB0WWCDC = FB0WW00.FB0WWCDC + 1;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
  end
  ;
  ;
  if (FB0WW00.FB0WWCDC != 0) /* Date field has changed*/
    if (FB0WW00.FB0WWPCL == "Y" /* percent calculated*/
     || FB0WW00.FB0WWCTP != 0)  /* percent field changed*/
      converseLib.validationFailed(314); /* RTA date and % cannot change*/
      set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    end
    if (FB0WW00.FB0WWCDC > 1) /* MORE THAN ONe DATE CHANGED*/
      converseLib.validationFailed(320); /* Cannot change more than 1 rta date*/
      set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    else
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf9)
    if (FB0WW00.FB0WWFCF == "N"
     && FB0WW00.FB0WWCDC == 0)
      converseLib.validationFailed(181); /* Data must be modified for update*/
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  if (FB0WW00.FB0WWCDC != 0)
    FB0W540(); /* Validate changed date*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  ;
  ;
end // end FB0W500

// check for merge contention
Function FB0W505()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBEREC empty;
  ;
  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        exit stack; /* return to process*/
      end
    else
      ;
      ;
      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end
  ;
  ;
end // end FB0W505

// Validate entered fields
Function FB0W520()
  ;
   /* ----------------------------------------------------*/
   /* Verify that all required fields have been*/
   /* entered.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WM010.FB0WMRTM != 0 /* Date entered*/
   /**/
   /* ******************************* Y2K OUT BEGIN **************************/
   /**/
   /* OR FB0WM010.FB0WMRTD NE 0*/
   /* OR FB0WM010.FB0WMRTY NE 0;*/
   /**/
   /* ******************************* Y2K OUT END ****************************/
   /**/
   /**/
   /* ******************************* Y2K IN BEGIN ***************************/
   /**/
   || FB0WM010.FB0WMRTD != 0)
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
    if (FB0WM010.FB0WMEXF == " ") /* No customer xref*/
      if (FB0WM010.FB0WMEWH == " ") /* No warehouse*/
        set FB0WM010.FB0WMEWH cursor, bold;
        converseLib.validationFailed(8); /* Required field*/
      end
    end
  end
  ;
  if (FB0WM010.FB0WMEPC != 0) /* Percent entered*/
    if (FB0WM010.FB0WMEXF == " ") /* No customer xref*/
      if (FB0WM010.FB0WMEWH == " ") /* No warehouse*/
        set FB0WM010.FB0WMEWH cursor, bold;
        converseLib.validationFailed(8); /* Required field*/
      end
    end
  end
  ;
  if (FB0WM010.FB0WMEXF != " " /* Customer xref  entered*/
   || FB0WM010.FB0WMEWH != " ") /* Warehouse  entered*/
    if (FB0WM010.FB0WMEPC == 0) /* Percent not entered*/
      set FB0WM010.FB0WMEPC cursor, bold;
    end
    if (FB0WM010.FB0WMRTM == 0 /* Date not entered*/
     /**/
     /* ******************************* Y2K OUT BEGIN **************************/
     /**/
     /* OR FB0WM010.FB0WMRTD EQ 0*/
     /* OR FB0WM010.FB0WMRTY EQ 0;*/
     /**/
     /* ******************************* Y2K OUT END ****************************/
     /**/
     /**/
     /* ******************************* Y2K IN BEGIN ***************************/
     /**/
     || FB0WM010.FB0WMRTD == 0)
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
      converseLib.validationFailed(8); /* Requred field*/
      set FB0WM010.FB0WMRTM cursor, bold;
      set FB0WM010.FB0WMRTD bold;
      set FB0WM010.FB0WMRTY bold;
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* If required fields are not entered ezeflo to*/
   /* display message--otherwise continue with edits*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate changed percent*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WM010.FB0WMEPC != 0)
    if (FB0WM010.FB0WMEPC != FB0WM010.FB0WMEPC)
      if (FB0WM010.FB0WMEPC > 100
       || FB0WM010.FB0WMEPC < 1)
        set FB0WM010.FB0WMEPC cursor, bold;
        converseLib.validationFailed(10);
      end
    end
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Validate the entered RTA date using TA0040 subroutine.*/
   /* The date cannot be greater than 90 days plus or*/
   /* minus the buy date.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWDMM = FB0WM010.FB0WMRTM;
  FB0WW00.FB0WWDDD = FB0WM010.FB0WMRTD;
  FB0WW00.FB0WWDYY = FB0WM010.FB0WMRTY;
  ;
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGAN = FB0WW00.FB0WWDRD;
  TA2REC.TA2GRTYP = "A"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL "; /* Validate gregorian*/
  ;
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWRJF = TA2REC.TA2JULNN; /* RTA to julian format*/
  else
    set FB0WM010.FB0WMRTM cursor, bold;
    set FB0WM010.FB0WMRTD bold;
    set FB0WM010.FB0WMRTY bold;
    converseLib.validationFailed(17);
    exit stack;
  end
  ;
  ;
     /* Add 90 days to buy date*/
  ;
  set TA2REC empty; /* Initialize record*/
  ;
  ;
  TA2REC.TA2GRGGN = FB0WW00.FB8BUYDT;
  TA2REC.TA2DYAOD = +90;
  TA2REC.TA2GRTYP = "G"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL";
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWBJF = TA2REC.TA2JULNN; /* added date*/
  end
  ;
  if (FB0WW00.FB0WWRJF > FB0WW00.FB0WWBJF) /* RTA > buy date+ 90*/
    set FB0WM010.FB0WMRTM cursor, bold;
    set FB0WM010.FB0WMRTD bold;
    set FB0WM010.FB0WMRTY bold;
    converseLib.validationFailed(316); /* entered date > 90 days > buy date*/
    exit stack;
  end
  ;
     /* subtract 90 days to buy date*/
  ;
  set TA2REC empty; /* Initialize record*/
  ;
  TA2REC.TA2GRGGN = FB0WW00.FB8BUYDT;
  TA2REC.TA2DYAOD = -90;
  TA2REC.TA2GRTYP = "G"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL";
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWBJF = TA2REC.TA2JULNN; /* subtract date*/
  end
  ;
  if (FB0WW00.FB0WWRJF < FB0WW00.FB0WWBJF) /* RTA < buy date- 90*/
    set FB0WM010.FB0WMRTM cursor, bold;
    set FB0WM010.FB0WMRTD bold;
    set FB0WM010.FB0WMRTY bold;
    converseLib.validationFailed(316); /* entered date > 90 days > buy date*/
    exit stack;
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Verify date is not the same as any other on*/
   /* the detail screen.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WM010.FB0WMRTM != 0 /* If date entered*/
   /**/
   /* ******************************* Y2K OUT BEGIN **************************/
   /**/
   /* OR FB0WM010.FB0WMRTD NE 0*/
   /* OR FB0WM010.FB0WMRTY NE 0;*/
   /**/
   /* ******************************* Y2K OUT END ****************************/
   /**/
   /**/
   /* ******************************* Y2K IN BEGIN ***************************/
   /**/
   || FB0WM010.FB0WMRTD != 0)
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
    ;
    FB0WW00.FB0WWDMM = FB0WM010.FB0WMRTM;
    FB0WW00.FB0WWDDD = FB0WM010.FB0WMRTD;
    FB0WW00.FB0WWDYY = FB0WM010.FB0WMRTY;
    ;
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWMAX; /* Init max index to max*/
    while (FB0WW00.FB0WWIXM >= 1)
      FB0WW00.FB0WWFDT = FB0WW03.FB7RTADT[FB0WWIXM];
       /* If trying to move a warehouse to an existing*/
       /* RTA date, flag it as an error.*/
       /*  */
      if (FB0WM010.FB0WMEWH != "  " /* Warehouse entered*/
       && FB0WW03.FB0WWRDT[FB0WWIXM] == FB0WW00.FB0WWDRD
       && FB0WW03.XWHCD[FB0WWIXM] == FB0WM010.FB0WMEWH) /* Warehouse =*/
        converseLib.validationFailed(173); /* Can't have the same RTA date*/
        set FB0WM010.FB0WMRTM cursor, bold;
        set FB0WM010.FB0WMRTD bold;
        set FB0WM010.FB0WMRTY bold;
      end
       /* If trying to move a customer order to an existing*/
       /* RTA date, flag it as an error.*/
       /*  */
      if (FB0WM010.FB0WMEXF != " "                        /* Xref entered*/
       && FB0WW03.FB0WWRDT[FB0WWIXM] == FB0WW00.FB0WWDRD  
       && FB0WW03.PC2CUXID[FB0WWIXM] == FB0WM010.FB0WMEXF /* Xref =*/
       && FB0WW03.FB7RTAPC[FB0WWIXM] != FB0WM010.FB0WMPCT[FB0WWIXM])
        converseLib.validationFailed(173); /* Can't have the same RTA date*/
        set FB0WM010.FB0WMRTM cursor, bold;
        set FB0WM010.FB0WMRTD bold;
        set FB0WM010.FB0WMRTY bold;
      end
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM - 1;
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate changed customer xref*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FB0WM010.FB0WMEXF != " ")
    if (FB0WM010.FB0WMEXF != FB0WW01.FB0WWEXF)
      FB0WW00.FB0WWCXF = "N"; /* No to xref found flag*/
      FB0WW00.FB0WWIXM = 1; /* Init map index*/
      while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX /* while lines on map*/
       && FB0WW00.FB0WWCXF == "N") /* And xref not found*/
        if (FB0WM010.PC2CUXID[FB0WWIXM] == FB0WM010.FB0WMEXF)
          FB0WW00.FB0WWCXF = "Y"; /* Yes to xref found flag*/
        end
        FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
      end
      if (FB0WW00.FB0WWCXF == "N")
        set FB0WM010.FB0WMEXF cursor, bold;
        converseLib.validationFailed(169); /* Invalid xref*/
      end
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate changed warehouse*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FB0WM010.FB0WMEWH != " ")
    if (FB0WM010.FB0WMEWH != FB0WW01.FB0WWEWH)
      FB0WW00.FB0WWWHF = "N"; /* No to warehouse found flag*/
      FB0WW00.FB0WWIXM = 1; /* Init map index*/
      while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX /* while lines on map*/
       && FB0WW00.FB0WWWHF == "N") /* And warehouse not found*/
        if (FB0WM010.XWHCD[FB0WWIXM] == FB0WM010.FB0WMEWH)
          FB0WW00.FB0WWWHF = "Y"; /* Yes to warehouse found flag*/
        end
        FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
      end
      if (FB0WW00.FB0WWWHF == "N")
        set FB0WM010.FB0WMEWH cursor, bold;
        converseLib.validationFailed(168); /* Invalid warehouse*/
      end
    end
  end
  ;
  ;
end // end FB0W520

// Validate changed date
Function FB0W540()
  ;
   /* ----------------------------------------------------*/
   /* Validate the changed RTA date using TA0040 subroutine.*/
   /* The date cannot be greater than 90 days plus or*/
   /* minus the buy date.*/
   /* ----------------------------------------------------*/
  ;
  set TA2REC empty; /* Initialize record*/
  TA2REC.TA2GRGAN = FB0WM010.FB0WMRDT[FB0WWRIX];
  TA2REC.TA2GRTYP = "A"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL "; /* Validate gregorian*/
  ;
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWRJF = TA2REC.TA2JULNN; /* RTA to julian format*/
  else
    set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    converseLib.validationFailed(17);
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* Verify row doesn't current exist.*/
   /* ----------------------------------------------------*/
  set FBFREC empty;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW03.XWHCD[FB0WWRIX];
  FBFREC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWRIX];
  FBFREC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWRIX];
  FBFREC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWRIX];
  FBFREC.OP1NORID = FB0WW03.OP1NORID[FB0WWRIX];
  FB0WW00.FB0WWDRD = FB0WM010.FB0WMRDT[FB0WWRIX];
  FB0WW00.FB0WWFYY = FB0WW00.FB0WWDYY;
  FB0WW00.FB0WWFMM = FB0WW00.FB0WWDMM;
  FB0WW00.FB0WWFDD = FB0WW00.FB0WWDDD;
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  if (FB0WW00.FB0WWFYY > 60)
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
    FB0WW00.FB0WWFCT = 19;
  /*  */
  /* *************************** Y2K IN BEGIN *******************************/
  /*  */
  else
    FB0WW00.FB0WWFCT = 20;
  end
  /*  */
  /* *************************** Y2K IN END *********************************/
  /*  */
  FBFREC.FB7RTADT = FB0WW00.FB0WWFDT;
  ;
  FB0WS24(); /* Obtain unique row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(315); /* Changed to date already exists*/
    set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    exit stack;
  end
  ;
     /* Add 90 days to buy date*/
  ;
  set TA2REC empty; /* Initialize record*/
  ;
  ;
  TA2REC.TA2GRGGN = FB0WW00.FB8BUYDT;
  TA2REC.TA2DYAOD = +90;
  TA2REC.TA2GRTYP = "G"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL";
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWBJF = TA2REC.TA2JULNN; /* added date*/
  end
  ;
  if (FB0WW00.FB0WWRJF > FB0WW00.FB0WWBJF) /* RTA > buy date+ 90*/
    set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    converseLib.validationFailed(316); /* entered date > 90 days > buy date*/
    exit stack;
  end
  ;
     /* subtract 90 days to buy date*/
  ;
  set TA2REC empty; /* Initialize record*/
  ;
  TA2REC.TA2GRGGN = FB0WW00.FB8BUYDT;
  TA2REC.TA2DYAOD = -90;
  TA2REC.TA2GRTYP = "G"; /* Gregorian MMDDYY*/
  TA2REC.TA2DTOPT = "GREGJUL";
  ;
  FB0WS07(); /* Call Ta0040 to validate date*/
  ;
  if (TA2RTNCD == 0) /* Successful return code from TA0040*/
    FB0WW00.FB0WWBJF = TA2REC.TA2JULNN; /* subtract date*/
  end
  ;
  if (FB0WW00.FB0WWRJF < FB0WW00.FB0WWBJF) /* RTA < buy date- 90*/
    set FB0WM010.FB0WMRDT[FB0WWRIX] cursor, bold;
    converseLib.validationFailed(316); /* entered date > 90 days > buy date*/
    exit stack;
  end
  ;
  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey not pf9)
    converseLib.validationFailed(156); /* press PF9 to update, pa2 to cancel*/
    exit stack;
  end
  ;
end // end FB0W540

// Process valid input
Function FB0W600()
  ;
   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7)
    FB0WW00.XXXMSGNO = 13;
    FB0WW00.FB0WWTSP = FB0WW00.FB0WWTSP - 1;
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    FB0WW00.XXXMSGNO = 12;
    FB0WW00.FB0WWTSP = FB0WW00.FB0WWTSP + 1;
    return;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* If PF6 has been pressed get next product in*/
   /* FBXREC.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf6) /* Next product*/
    ;
    if (FBXREC.SY1STNBR[2] != " ") /* There are still products*/
                                   /* to look at*/
      FB0W610(); /* Set up for next product*/
      ;
      return;
      ;
    else
      converseLib.validationFailed(356); /* end of list*/
      FB0WM010.XXXPRCNM = "FB0W600";
      return;
      ;
    end
    ;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* If enter has been pressed and screen data was*/
   /* modified--calculate the new RTA percent.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    if (FB0WW00.FB0WWCTP != 0) /* Changed Percent count > 0*/
      ;
      FB0W620(); /* Calculate new RTA percent*/
      ;
      exit stack; /* Exit to display new % & quantities*/
    else
      exit stack; /* Exit to redisplay map*/
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF9 has been pressed update the size region*/
   /* qty to buy and the merged qty to buy table.s*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* Update*/
    if (FB0WW00.FB0WWCDC != 0) /* RTA date has changed*/
      ;
      FB0W650(); /* UPdate RTA date*/
      ;
      return;
    else
      ;
      FB0W630(); /* Update the Size region tables*/
      ;
      FB0W640(); /* Update the merged tables*/
      ;
      return;
    end
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* If PF12 move the selected data from the screen to*/
   /* the FBXREC and transfer to application FB07.*/
   /* ----------------------------------------------------*/
  ;
  FBXREC.FBXFRMDT = 0;
  FBXREC.FBXTODT = 0;
  ;
  FB0WW00.FB0WWIXM = 1;
  if (converseVar.eventKey is pf12) /* drsrta*/
    ;
    while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX) /* Max lines*/
      ;
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
        FBXREC.XWHCD1[1] = "  ";
        FBXREC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWIXM];
        FBXREC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWIXM];
        FBXREC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWIXM];
        FBXREC.OP1NORID = FB0WW03.OP1NORID[FB0WWIXM];
        FBXREC.XQACD = FB0WW03.XQACD[FB0WWIXM];
        FBXREC.PC2INSEG = FB0WW03.PC2INSEG[FB0WWIXM];
        FBXREC.XPGCD = FB0WW03.XPGCD[FB0WWIXM];
        FBXREC.XUMCD = FB0WW03.XUMCD[FB0WWIXM];
        FBXREC.FBXFRMDT = FB0WW03.FB7RTADT[FB0WWIXM];
      end
      ;
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "T")
        FBXREC.XWHCD1[1] = "  ";
        FBXREC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWIXM];
        FBXREC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWIXM];
        FBXREC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWIXM];
        FBXREC.OP1NORID = FB0WW03.OP1NORID[FB0WWIXM];
        FBXREC.XQACD = FB0WW03.XQACD[FB0WWIXM];
        FBXREC.PC2INSEG = FB0WW03.PC2INSEG[FB0WWIXM];
        FBXREC.XPGCD = FB0WW03.XPGCD[FB0WWIXM];
        FBXREC.XUMCD = FB0WW03.XUMCD[FB0WWIXM];
        FBXREC.FBXTODT = FB0WW03.FB7RTADT[FB0WWIXM];
      end
      ;
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
    end
    ;
    FB0W120(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "FB07"; /* To Application*/
    ;
    if (FBXREC.SY1STNBR[1] == " ")
      FBXREC.SY1STNBR[1] = FB0WM010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB0WM010.SY2CLRID;
      FBXREC.XDMCD[1] = FB0WM010.XDMCD;
      FBXREC.FB8BUYDT = FB0WW00.FB8BUYDT;
    end
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    ;
    XSFBS01();
    ;
    FB0WM010.XXXPRCNM = "FB0W600";
    exit stack;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* If PF15 move the selected data from the screen to*/
   /* the FBXREC and transfer to application FB0Y.*/
   /* ----------------------------------------------------*/
  ;
  FBXREC.FBXFRMDT = 0;
  FBXREC.FBXTODT = 0;
  ;
  FB0WW00.FB0WWIXM = 1;
  if (converseVar.eventKey is pf15) /* Sizes*/
    ;
    while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX) /* Max lines*/
      ;
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
        FBXREC.XWHCD1[1] = FB0WM010.XWHCD[FB0WWIXM];
        FBXREC.FBXFRMDT = FB0WW03.FB7RTADT[FB0WWIXM];
      end
      ;
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "T")
        FBXREC.XWHCD1[1] = FB0WM010.XWHCD[FB0WWIXM];
        FBXREC.FBXTODT = FB0WW03.FB7RTADT[FB0WWIXM];
      end
      ;
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
    end
    ;
    FB0W120(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "FB0Y"; /* To Application*/
    ;
    if (FBXREC.SY1STNBR[1] == " ")
      FBXREC.SY1STNBR[1] = FB0WM010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB0WM010.SY2CLRID;
      FBXREC.XDMCD[1] = FB0WM010.XDMCD;
      FBXREC.FB8BUYDT = FB0WW00.FB8BUYDT;
    end
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    ;
    XSFBS01();
    ;
    FB0WM010.XXXPRCNM = "FB0W600";
    exit stack;
  end
  ;
   /* ----------------------------------------------------*/
   /* If PF16 has been pressed update the RTA*/
   /* accept flag on the DFBUY.VFQTBS01 table.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf16) /* Update RTA accept flag*/
    ;
    FBKREC.SY1STNBR = FB0WW00.SY1STNBR;
    FBKREC.SY2CLRID = FB0WW00.SY2CLRID;
    FBKREC.XDMCD = FB0WW00.XDMCD;
    FBKREC.FB8RCTYP = "B";
    FBKREC.FB8BUYDT = FB0WW00.FB8BUYDT;
    ;
    FB0WS21(); /* Obtain unique DFBUY.VFQTBS01*/
    ;
    FBKREC.FBKRTAFL = "Y"; /* Set product accept to 'y'*/
    ;
    FB0WS22(); /* Update DFBUY.VFQTBS01*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit database change*/
    FB0WW00.XXXMSGNO = 32; /* Update successful*/
    ;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* If PF19 move the selected data from the screen to*/
   /* the FBXREC and transfer to application FB06.*/
   /* ----------------------------------------------------*/
  ;
  FBXREC.FBXFRMDT = 0;
  FBXREC.FBXTODT = 0;
  ;
  FB0WW00.FB0WWIXM = 1;
  if (converseVar.eventKey is pf19) /* FCTSZ*/
    ;
    while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX) /* Max lines*/
      ;
      if (FB0WM010.FB0WMSEL[FB0WWIXM] == "F")
        FBXREC.XWHCD1[1] = FB0WM010.XWHCD[FB0WWIXM];
        FBXREC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWIXM];
        FBXREC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWIXM];
        FBXREC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWIXM];
        FBXREC.OP1NORID = FB0WW03.OP1NORID[FB0WWIXM];
        FBXREC.XQACD = FB0WW03.XQACD[FB0WWIXM];
        FBXREC.PC2INSEG = FB0WW03.PC2INSEG[FB0WWIXM];
        FBXREC.XPGCD = FB0WW03.XPGCD[FB0WWIXM];
        FBXREC.XUMCD = FB0WW03.XUMCD[FB0WWIXM];
        FBXREC.FB7RTADT = FB0WW03.FB7RTADT[FB0WWIXM];
      end
      ;
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
    end
    ;
    FB0W120(); /* Purge temp storage*/
    ;
    COMMAREA.CATOAP = "FB06"; /* To Application*/
    ;
    if (FBXREC.SY1STNBR[1] == " ")
      FBXREC.SY1STNBR[1] = FB0WM010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB0WM010.SY2CLRID;
      FBXREC.XDMCD[1] = FB0WM010.XDMCD;
      FBXREC.FB8BUYDT = FB0WW00.FB8BUYDT;
    end
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;
    ;
    XSFBS01();
    ;
    FB0WM010.XXXPRCNM = "FB0W600";
    exit stack;
  end
  ;
  ;
end // end FB0W600

// Set up for next product
Function FB0W610()
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------*/
   /* Bubble up the array in FBXREC so that the next product*/
   /* is moved to the first level of the table and,*/
   /* all subsequent products are shifted down one.*/
   /* The first product will be lost as will the last.*/
   /* ------------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 2; /* Init work index*/
  FB0WW00.FB0WWIX2 = 1;
  ;
  while (FB0WWIX1 <= 14)
    FBXREC.SY1STNBR[FB0WWIX2] = FBXREC.SY1STNBR[FB0WWIX1];
    FBXREC.SY2CLRID[FB0WWIX2] = FBXREC.SY2CLRID[FB0WWIX1];
    FBXREC.XDMCD[FB0WWIX2] = FBXREC.XDMCD[FB0WWIX1];
    FBXREC.FBXFCTY1[FB0WWIX2] = FBXREC.FBXFCTY1[FB0WWIX1];
    FBXREC.FBXFCTY2[FB0WWIX2] = FBXREC.FBXFCTY2[FB0WWIX1];
    FBXREC.FBXFCTY3[FB0WWIX2] = FBXREC.FBXFCTY3[FB0WWIX1];
    FBXREC.FBXFCTY4[FB0WWIX2] = FBXREC.FBXFCTY4[FB0WWIX1];
    FBXREC.FBXFCTY5[FB0WWIX2] = FBXREC.FBXFCTY5[FB0WWIX1];
    ;
    /* move spaces to the last field in the fbxrec product array*/
    ;
    FBXREC.SY1STNBR[FB0WWIX1] = " ";
    FBXREC.SY2CLRID[FB0WWIX1] = " ";
    FBXREC.XDMCD[FB0WWIX1] = " ";
    FBXREC.FBXFCTY1[FB0WWIX1] = " ";
    FBXREC.FBXFCTY2[FB0WWIX1] = " ";
    FBXREC.FBXFCTY3[FB0WWIX1] = " ";
    FBXREC.FBXFCTY4[FB0WWIX1] = " ";
    FBXREC.FBXFCTY5[FB0WWIX1] = " ";
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
  end
  ;
  ;
  FB0WW00.FB0WWSTI = FB0WW00.FB0WWSTI - 1;
  ;
  ;
   /* ------------------------------------------------------*/
   /* Initialize map and storage areas.*/
   /* ------------------------------------------------------*/
  ;
  set FB0WM010 empty;
  set FB0WW01 empty;
  set FB0WW02 empty;
  set FB0WW03 empty;
  set FB0WW04 empty;
  set FB0WW05 empty;
  set FB0WW06 empty;
  set FB0WW07 empty;
  set FB0WM010 empty;
  ;
  FB0WW00.FB0WWTSL = 4019; /* Temporary storage length*/
  FB0WW00.FB0WWMAX = 11; /* Max number of map lines*/
  FB0WW00.FB0WWTSP = 1; /* Temp storage page*/
  ;
   /* ---------------------------------------------------------*/
   /* If more products have been passed than load the*/
   /* data to the map and do a select set on DFBUY.VRTQTB01*/
   /* to obtain the number of lines that will be printed for*/
   /* each destination and RTA date.*/
   /* ---------------------------------------------------------*/
  ;
  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB0WW00.FB0WWRDF = "Y"; /* Request for data flag*/
    FB0WW01.SY1STNBR = FBXREC.SY1STNBR[1];
    FB0WW00.SY1STNBR = FBXREC.SY1STNBR[1];
    FB0WW01.SY2CLRID = FBXREC.SY2CLRID[1];
    FB0WW00.SY2CLRID = FBXREC.SY2CLRID[1];
    FB0WW01.XDMCD = FBXREC.XDMCD[1];
    FB0WW00.XDMCD = FBXREC.XDMCD[1];
    FB0WW00.FB0WWFDT = FBXREC.FB8BUYDT;
    FB0WW01.FB0WWBDT = FB0WW00.FB0WWBYM;
    FB0WW01.FB0WWFY1 = FBXREC.FBXFCTY1;
    FB0WW01.FB0WWFY2 = FBXREC.FBXFCTY2;
    FB0WW01.FB0WWFY3 = FBXREC.FBXFCTY3;
    FB0WW01.FB0WWFY4 = FBXREC.FBXFCTY4;
    FB0WW01.FB0WWFY5 = FBXREC.FBXFCTY5;
    ;
    set PG2REC empty; /* Initialize style color record*/
    ;
    PG2REC.XGPCD = "02";
    PG2REC.SY1STNBR = FBXREC.SY1STNBR[1];
    PG2REC.SY2CLRID = FBXREC.SY2CLRID[1];
    PG2REC.XDMCD = FBXREC.XDMCD[1];
    ;
    XSPG202(); /* Obtain style color table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FB0WW01.SY1SSTNM = PG2REC.SY1SSTNM;
      FB0WW01.SY2CLRAB = PG2REC.SY2CLRAB;
    end
    ;
    set FBFREC empty; /* Initialize size region qty to buy record*/
    ;
     /* Move in key fields*/
    FBFREC.SY1STNBR = FBXREC.SY1STNBR[1];
    FB0WW00.SY1STNBR = FBXREC.SY1STNBR[1];
    FBFREC.SY2CLRID = FBXREC.SY2CLRID[1];
    FB0WW00.SY2CLRID = FBXREC.SY2CLRID[1];
    FBFREC.XDMCD = FBXREC.XDMCD[1];
    FB0WW00.XDMCD = FBXREC.XDMCD[1];
    FBFREC.FB8BUYDT = FBXREC.FB8BUYDT;
    FB0WW00.FB8BUYDT = FBXREC.FB8BUYDT;
    ;
    ;
    FB0WS01(); /* Load item count table*/
  else
    converseLib.validationFailed(356); /* end of list*/
    FB0WM010.XXXPRCNM = "FB0W610";
    exit stack;
    ;
  end
  ;
  ;
  ;
end // end FB0W610

// Calculate new RTA percent
Function FB0W620()
  ;
  FB0WW00.FB0WWPCL = "N"; /* Percent has been calculated*/
  ;
   /* ----------------------------------------------------*/
   /* Obtain the control record is get the tolerance*/
   /* qty.*/
   /* ----------------------------------------------------*/
  ;
  FB0WS28(); /* Get control row*/
  ;
   /* ----------------------------------------------------*/
   /* Obtain a row from Vflbav01 to get the round flag*/
   /* ----------------------------------------------------*/
  ;
  FB0WS29(); /* Get Vfblav01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Determine if this is an add, change or delete*/
   /* and set fb0ww00.fb0wwaff (application function*/
   /* flag) to an 'a', 'c', or 'd'.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWAFF = " "; /* Init application function flag*/
  ;
  if (FB0WM010.FB0WMEPC != 0) /* Percent has been entered*/
    FB0WW00.FB0WWAFF = "A";
  else
    FB0WW00.FB0WWIXM = 1; /* Init index*/
    while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
      if (FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM]
       && FB0WM010.FB0WMPCT[FB0WWIXM] == 0)
        FB0WW00.FB0WWAFF = "D";
      end
      FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
    end
    if (FB0WW00.FB0WWAFF == " ")
      FB0WW00.FB0WWAFF = "C";
    end
  end
  ;
  if (FB0WW00.FB0WWAFF == "A")
    ;
    FB0W621(); /* Calculate RTA add*/
    ;
  else
    if (FB0WW00.FB0WWAFF == "C")
      ;
      FB0W623(); /* Calculate RTA change*/
      ;
    else
      if (FB0WW00.FB0WWAFF == "D")
        ;
        FB0W622(); /* Calculate RTA delete*/
        ;
      end
    end
  end
  ;
  FB0WW00.FB0WWPCL = "Y"; /* Percent has been calculated*/
  converseLib.validationFailed(156); /* Press PF9 to update, PA2 to cancel*/
  ;
end // end FB0W620

// Calculate RTA add
Function FB0W621()
  ;
   /* ----------------------------------------------------*/
   /* Create minus and plus records.*/
   /* The added line will be the plus record--the RTA*/
   /* detail line with the changed percent will be the*/
   /* minus record.*/
   /* ----------------------------------------------------*/
  ;
  set FB0WW04 empty; /* Init minus line work record*/
  set FB0WW05 empty; /* Init plus line work record*/
  ;
   /* Create plus line record*/
  ;
  FB0WW05.XWHCD = FB0WM010.FB0WMEWH; /* Entered warehouse*/
  FB0WW05.PC2CUXID = FB0WM010.FB0WMEXF; /* Entered xref*/
  ;
  FB0WW00.FB0WWFMM = FB0WM010.FB0WMRTM; /* Month to db format*/
  FB0WW00.FB0WWFDD = FB0WM010.FB0WMRTD; /* Day to db format*/
  FB0WW00.FB0WWFYY = FB0WM010.FB0WMRTY; /* Year to db format*/
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  if (FB0WW00.FB0WWFYY > 60)
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
    FB0WW00.FB0WWFCT = 19; /* Century to 19*/
  /*  */
  /* **************************** Y2K IN BEGIN ******************************/
  /*  */
  else
    FB0WW00.FB0WWFCT = 20; /* Century to 20*/
  end
  /*  */
  /* **************************** Y2K IN END ********************************/
  /*  */
  FB0WW05.FB7RTADT = FB0WW00.FB0WWFDT; /* to record*/
  FB0WW05.FB0WWNRP = FB0WM010.FB0WMEPC;
  ;
  ;
   /* Create minus line record from the changed detail line*/
   /* Save the index value for the minus line in  FB0WWMML*/
  ;
  FB0WW00.FB0WWIXM = 1;
  ;
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
    ;
    if (FB0WM010.FB0WMPCT[FB0WWIXM] != 0
     && FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      ;
      FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWIXM];
      FB0WW04.XWHCD = FB0WW02.XWHCD;
      FB0WW04.PC2CUXID = FB0WW02.PC2CUXID;
      FB0WW04.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW04.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW04.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW05.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW05.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW05.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW04.FB7RTADT = FB0WW02.FB7RTADT;
      FB0WW04.FB7RTAPC = FB0WW02.FB7RTAPC;
      FB0WW04.ZZZCHGCT = FB0WW02.ZZZCHGCT;
      FB0WW04.FB0WWNRP = FB0WM010.FB0WMPCT[FB0WWIXM];
      move FB0WW02.FB7QTB to FB0WW04.FB7QTB[1] for all;
      FB0WW00.FB0WWMML = FB0WW00.FB0WWIXM; /* Save index value*/
      ;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Perform common statement groups that will*/
   /* calculate the percent of change--etc.*/
   /* ----------------------------------------------------*/
  ;
  FB0WS08(); /* Calculate RTA size quantities*/
  ;
   /* ----------------------------------------------------*/
   /* Move total quantities and new percents to the*/
   /* map fields.*/
   /* ----------------------------------------------------*/
  ;
   /* move the plus line data to the entered fields*/
  ;
  FB0WM010.FB0WMEPC = FB0WW05.FB0WWNRP;
  FB0WM010.FB0WMEQT = FB0WW00.FB0WWNPT;
  ;
  if (FB0WW00.FB0WWNPT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNPT != 0)
    converseLib.validationFailed(336); /* qty change less than tolerance-no updates*/
    set FB0WM010.FB0WMEQT bold;
    exit stack;
  end
  ;
   /* move the minus line data to the entered fields*/
  ;
  FB0WM010.FB0WMPCT[FB0WWMML] = FB0WW04.FB0WWNRP;
  FB0WM010.FB0WMQTY[FB0WWMML] = FB0WW00.FB0WWNMT;
  ;
  if (FB0WW00.FB0WWNMT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNMT != 0)
    converseLib.validationFailed(336); /* qty change less than tolerance-no updates*/
    set FB0WM010.FB0WMQTY[FB0WWMML] bold;
    exit stack;
  end
  ;
end // end FB0W621

// Calculate RTA delete
Function FB0W622()
  ;
   /* ----------------------------------------------------*/
   /* Create minus and plus records.*/
   /* The deleted line will be the minus record--the RTA*/
   /* detail line with the non zero changed percent*/
   /* will be the plus record.*/
   /* ----------------------------------------------------*/
  ;
  set FB0WW04 empty; /* Init minus line work record*/
  set FB0WW05 empty; /* Init plus line work record*/
  ;
   /* Create minus line record from the zero detail line*/
   /* Save the index value for the minus line in  FB0WWMML*/
  ;
  FB0WW00.FB0WWIXM = 1;
  ;
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
    ;
    if (FB0WM010.FB0WMPCT[FB0WWIXM] == 0
     && FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      ;
      FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWIXM];
      FB0WW04.XWHCD = FB0WW02.XWHCD;
      FB0WW04.PC2CUXID = FB0WW02.PC2CUXID;
      FB0WW04.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW04.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW04.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW04.FB7RTADT = FB0WW02.FB7RTADT;
      FB0WW04.FB7RTAPC = FB0WW02.FB7RTAPC;
      FB0WW04.ZZZCHGCT = FB0WW02.ZZZCHGCT;
      FB0WW04.FB0WWNRP = FB0WM010.FB0WMPCT[FB0WWIXM];
      move FB0WW02.FB7QTB to FB0WW04.FB7QTB[1] for all;
      FB0WW00.FB0WWMML = FB0WW00.FB0WWIXM; /* Save index value*/
      ;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
   /* Create plus line record*/
  ;
  FB0WW00.FB0WWIXM = 1;
  ;
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
    ;
    if (FB0WM010.FB0WMPCT[FB0WWIXM] != 0
     && FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      ;
      FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWIXM];
      FB0WW05.XWHCD = FB0WW02.XWHCD;
      FB0WW05.PC2CUXID = FB0WW02.PC2CUXID;
      FB0WW05.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW05.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW05.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW05.FB7RTADT = FB0WW02.FB7RTADT;
      FB0WW05.FB7RTAPC = FB0WW02.FB7RTAPC;
      FB0WW05.ZZZCHGCT = FB0WW02.ZZZCHGCT;
      FB0WW05.FB0WWNRP = FB0WM010.FB0WMPCT[FB0WWIXM];
      move FB0WW02.FB7QTB to FB0WW05.FB7QTB[1] for all;
      FB0WW00.FB0WWMPL = FB0WW00.FB0WWIXM; /* Save index value*/
      ;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Sum all of the size buckets for the plus and minus*/
   /* lines to get the old total size qty totals.*/
   /* ----------------------------------------------------*/
  ;
  move 0 to FB0WW00.FB0WWOSQ[1] for all; /* working storage summed size*/
                                   /* quantities*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Initialize work index*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    FB0WW00.FB0WWWF1 = FB0WW04.FB7QTB[FB0WWIX1];
    FB0WW00.FB0WWWF2 = FB0WW05.FB7QTB[FB0WWIX1];
    FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF2;
    FB0WW00.FB0WWOSQ[FB0WWIX1] = FB0WW00.FB0WWWF3;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Add minus row lines to plus row.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    if (FB0WW04.FB7QTB[FB0WWIX1] != 0 /* If a old minus size qty*/
     || FB0WW05.FB7QTB[FB0WWIX1] != 0) /* ???????????????????????*/
       /* move old minus size qty to work field*/
      FB0WW00.FB0WWWF1 = FB0WW04.FB7QTB[FB0WWIX1];
       /* Move old plus size qty to work fiedl*/
      FB0WW00.FB0WWWF2 = FB0WW05.FB7QTB[FB0WWIX1];
       /* add old minus to old plus to get new plus qty*/
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF2 + FB0WW00.FB0WWWF1;
       /* move to new plus qty bucket*/
      FB0WW05.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF3;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Sum the plus and minus row size bucket to get*/
   /* the new total quantities for each record.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  FB0WW00.FB0WWNMT = 0;
  FB0WW00.FB0WWNPT = 0;
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    FB0WW00.FB0WWNMT = FB0WW00.FB0WWNMT + FB0WW04.FB0WWNRQ[FB0WWIX1];
    FB0WW00.FB0WWNPT = FB0WW00.FB0WWNPT + FB0WW05.FB0WWNRQ[FB0WWIX1];
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Move total quantities to the map fields.*/
   /* ----------------------------------------------------*/
  ;
   /* move the plus line data to the plus line fields*/
  ;
  FB0WM010.FB0WMQTY[FB0WWMPL] = FB0WW00.FB0WWNPT;
  if (FB0WW00.FB0WWNPT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNPT != 0)
    converseLib.validationFailed(336); /* Qty less than tolerance--no updates allowed*/
    set FB0WM010.FB0WMQTY[FB0WWMPL] bold;
  end
  ;
   /* move the minus line data to the minus line fields*/
  ;
  FB0WM010.FB0WMQTY[FB0WWMML] = FB0WW00.FB0WWNMT;
  ;
  if (FB0WW00.FB0WWNMT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNMT != 0)
    converseLib.validationFailed(336); /* Qty less than tolerance--no updates allowed*/
    set FB0WM010.FB0WMQTY[FB0WWMML] bold;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FB0W622

// Calculate RTA change
Function FB0W623()
  ;
   /* ----------------------------------------------------*/
   /* Create minus and plus records.*/
   /* Determine the plus and minus lines from the screen*/
   /* detail lines by subtracting the old % from the new*/
   /* percent. Save the index values for the plus and*/
   /* minus lines.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIXM = 1;
  ;
  while (FB0WW00.FB0WWIXM <= FB0WW00.FB0WWMAX)
    ;
    if (FB0WM010.FB0WMPCT[FB0WWIXM] != 0
     && FB0WM010.FB0WMPCT[FB0WWIXM] != FB0WW03.FB7RTAPC[FB0WWIXM])
      FB0WW00.FB0WWWF1 = FB0WM010.FB0WMPCT[FB0WWIXM];
      FB0WW00.FB0WWWF2 = FB0WW03.FB7RTAPC[FB0WWIXM];
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
      if (FB0WW00.FB0WWWF3 > 0) /* (plus line)*/
        FB0WW00.FB0WWMPL = FB0WW00.FB0WWIXM;
      else /* (minus line)*/
        FB0WW00.FB0WWMML = FB0WW00.FB0WWIXM;
      end
      ;
    end
    FB0WW00.FB0WWIXM = FB0WW00.FB0WWIXM + 1;
  end
  ;
  set FB0WW04 empty; /* Init minus line work record*/
  set FB0WW05 empty; /* Init plus line work record*/
  ;
   /* Create plus line record*/
  ;
  FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWMPL];
  FB0WW05.XWHCD = FB0WW02.XWHCD;
  FB0WW05.PC2CUXID = FB0WW02.PC2CUXID;
  FB0WW05.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB0WW05.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB0WW05.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB0WW05.FB7RTADT = FB0WW02.FB7RTADT;
  FB0WW05.FB7RTAPC = FB0WW02.FB7RTAPC;
  FB0WW05.ZZZCHGCT = FB0WW02.ZZZCHGCT;
  FB0WW05.FB0WWNRP = FB0WM010.FB0WMPCT[FB0WWMPL];
  move FB0WW02.FB7QTB to FB0WW05.FB7QTB[1] for all;
  ;
   /* Create minus line record*/
  ;
  ;
  FB0WW02.FB0WW02G = FB0WW03.FB0WW03R[FB0WWMML];
  FB0WW04.XWHCD = FB0WW02.XWHCD;
  FB0WW04.PC2CUXID = FB0WW02.PC2CUXID;
  FB0WW04.OP1PARTN = FB0WW02.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB0WW04.OP1CUOID = FB0WW02.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB0WW04.OP1NORID = FB0WW02.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB0WW04.FB7RTADT = FB0WW02.FB7RTADT;
  FB0WW04.FB7RTAPC = FB0WW02.FB7RTAPC;
  FB0WW04.ZZZCHGCT = FB0WW02.ZZZCHGCT;
  FB0WW04.FB0WWNRP = FB0WM010.FB0WMPCT[FB0WWMML];
  move FB0WW02.FB7QTB to FB0WW04.FB7QTB[1] for all;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Perform common statement groups that will*/
   /* calculate the percent of change--etc.*/
   /* ----------------------------------------------------*/
  ;
  FB0WS08(); /* Calculate RTA size quantities*/
  ;
   /* ----------------------------------------------------*/
   /* Move total quantities and new percents to the*/
   /* map fields.*/
   /* ----------------------------------------------------*/
  ;
   /* move the plus line data to the entered fields*/
  ;
  FB0WM010.FB0WMPCT[FB0WWMPL] = FB0WW05.FB0WWNRP;
  FB0WM010.FB0WMQTY[FB0WWMPL] = FB0WW00.FB0WWNPT;
  if (FB0WW00.FB0WWNPT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNPT != 0)
    converseLib.validationFailed(336); /* qty below tolerance level--no updates allowed*/
    set FB0WM010.FB0WMQTY[FB0WWMPL] bold;
  end
   /* move the minus line data to the entered fields*/
  ;
  FB0WM010.FB0WMPCT[FB0WWMML] = FB0WW04.FB0WWNRP;
  FB0WM010.FB0WMQTY[FB0WWMML] = FB0WW00.FB0WWNMT;
  if (FB0WW00.FB0WWNMT < FB9REC.FB9BTQTY
   && FB0WW00.FB0WWNMT != 0)
    converseLib.validationFailed(336); /* qty below tolerance level--no updates allowed*/
    set FB0WM010.FB0WMQTY[FB0WWMML] bold;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
end // end FB0W623

// Update the size region tables
Function FB0W630()
  ;
   /* ----------------------------------------------------*/
   /* Update processing will depend upon whether it is*/
   /* an add, change or delete. The application*/
   /* function flag (set in fb0w620) should be checked*/
   /* to determine the type of processing to be done.*/
   /* ----------------------------------------------------*/
  ;
  move 0 to FB0WW00.FB0WWOSQ[1] for all; /* Init old size qty array*/
  move 0 to FB0WW00.FB0WWNSQ[1] for all; /* Init new size qty array*/
  ;
  if (FB0WW00.FB0WWAFF == "A") /* RTA add*/
    FB0W631(); /* Update and add to RTA table*/
  else
    if (FB0WW00.FB0WWAFF == "C") /* RTA change*/
      FB0W632(); /* Update RTA table*/
    else
      FB0W633(); /* Update and delete from RTA table*/
    end
  end
  ;
  ;
  ;
end // end FB0W630

// Update and add to RTA table
Function FB0W631()
  ;
   /* ----------------------------------------------------*/
   /* Obtain the RTA minus line table and update the*/
   /* quantity buckets and the percent from the FB0WW04*/
   /* fields.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW04.XWHCD;
  FBFREC.PC2CUXID = FB0WW04.PC2CUXID;
  FBFREC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW04.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO   ; Record has been updated*/
    /* FB0WS23                       ; Set up to display new prod*/
   /* END ;*/
  ;
  FBFREC.FB7RTAPC = FB0WW04.FB0WWNRP; /* New percent*/
  move FB0WW04.FB0WWNRQ to FBFREC.FB7QTB[1] for all; /* New quantities*/
  ;
  FB0WS10(); /* Update DFBUY.VRTQTB01 row*/
  ;
  ;
   /* Create plus line record*/
   /* (use the minus line record as a mask*/
  ;
  ;
  ;
  FBFREC.FB7RTADT = FB0WW05.FB7RTADT;
  FBFREC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New percent*/
  move FB0WW05.FB0WWNRQ to FBFREC.FB7QTB[1] for all; /* New quantities*/
  ;
  FB0WS11(); /* Add DFBUY.VRTQTB01 row*/
  ;
  ;
end // end FB0W631

// Update RTA table
Function FB0W632()
  ;
   /* ----------------------------------------------------*/
   /* Obtain the RTA minus line table and update the*/
   /* quantity buckets and the percent from the FB0WW04*/
   /* fields.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW04.XWHCD;
  FBFREC.PC2CUXID = FB0WW04.PC2CUXID;
  FBFREC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW04.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO   ; Record has been updated*/
    /* FB0WS23                       ; Set up to display new prod*/
   /* END ;*/
  ;
  FBFREC.FB7RTAPC = FB0WW04.FB0WWNRP; /* New percent*/
  move FB0WW04.FB0WWNRQ to FBFREC.FB7QTB[1] for all; /* New quantities*/
  ;
  FB0WS10(); /* Update DFBUY.VRTQTB01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Obtain the RTA plus line table and update the*/
   /* quantity buckets and the percent from the FB0WW05*/
   /* fields.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW05.XWHCD;
  FBFREC.PC2CUXID = FB0WW05.PC2CUXID;
  FBFREC.OP1PARTN = FB0WW05.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW05.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW05.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW05.FB7RTADT;
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW05.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO   ; Record has been updated*/
    /* FB0WS23                       ; Set up to display new prod*/
   /* END ;*/
  ;
  FBFREC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New percent*/
  move FB0WW05.FB0WWNRQ to FBFREC.FB7QTB[1] for all; /* New quantities*/
  ;
  FB0WS10(); /* Update DFBUY.VRTQTB01 row*/
  ;
  ;
end // end FB0W632

// Update and delete RTA table
Function FB0W633()
  ;
   /* ----------------------------------------------------*/
   /* Obtain the RTA minus line table and delete the*/
   /* RTA qty record.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW04.XWHCD;
  FBFREC.PC2CUXID = FB0WW04.PC2CUXID;
  FBFREC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW04.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO;*/
    /* FB0WS23                       ; set up to display new prod*/
   /* END ;*/
  ;
  ;
  FB0WS12(); /* delete DFBUY.VRTQTB01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Obtain the RTA plus line table and update the*/
   /* quantity buckets and the percent from the FB0WW05*/
   /* fields.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW05.XWHCD;
  FBFREC.PC2CUXID = FB0WW05.PC2CUXID;
  FBFREC.OP1PARTN = FB0WW05.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW05.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW05.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW05.FB7RTADT;
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW05.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO;*/
    /* FB0WS23                       ; set up to display new prod*/
   /* END ;*/
  ;
  FBFREC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New percent*/
  move FB0WW05.FB0WWNRQ to FBFREC.FB7QTB[1] for all; /* New quantities*/
  ;
  FB0WS10(); /* Update DFBUY.VRTQTB01 row*/
  ;
  ;
end // end FB0W633

// Update the merged tables
Function FB0W640()
  ;
   /* ----------------------------------------------------*/
   /* Update processing will depend upon whether it is*/
   /* an add, change or delete. The application*/
   /* function flag (set in fb0w620) should be checked*/
   /* to determine the type of processing to be done.*/
   /* ----------------------------------------------------*/
  ;
  ;
  if (FB0WW00.FB0WWAFF == "A") /* RTA add*/
    FB0W641(); /* Update and add to merged tables*/
  else
    if (FB0WW00.FB0WWAFF == "C") /* RTA change*/
      FB0W642(); /* Update merged tables*/
    else
      FB0W643(); /* Update and delete from merged tables*/
    end
  end
  ;
   /* ----------------------------------------------------*/
   /* Update completedly successfully -- do commit*/
   /* Clear work areas---reenitilize map*/
   /* Set flag to obtain data (want to display modified*/
   /* data).*/
   /* ----------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit database changee*/
  ;
  ;
  set FB0WW01 empty;
  set FB0WW02 empty;
  set FB0WW03 empty;
  set FB0WW04 empty;
  set FB0WW05 empty;
  set FB0WW06 empty;
  set FB0WW07 empty;
  set FB0WW08 empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  ;
  FB0WW01.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW01.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW01.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW01.XDMCD = FB0WM010.XDMCD;
  FB0WW01.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0WW01.SY2CLRAB = PG2REC.SY2CLRAB;
  FB0WW01.FB0WWFY1 = FBXREC.FBXFCTY1;
  FB0WW01.FB0WWFY2 = FBXREC.FBXFCTY2;
  FB0WW01.FB0WWFY3 = FBXREC.FBXFCTY3;
  FB0WW01.FB0WWFY4 = FBXREC.FBXFCTY4;
  FB0WW01.FB0WWFY5 = FBXREC.FBXFCTY5;
  ;
  ;
  FB0WW00.XXXMSGNO = 32; /* Table update was successful*/
  ;
  FB0WW00.FB0WWRDF = "Y"; /* Request for data flag*/
  FB0WW00.FB0WWTSL = 4019; /* Temp storage length*/
  FB0WW00.FB0WWMAX = 11; /* Max lines per page*/
  FB0WW00.FB0WWTSP = TA5REC.TA5TSQIX; /* Temp storage page requested*/
  TA5REC.TA5TSQIX = 0;
  ;
  set FBFREC empty;
  ;
  FBFREC.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW00.SY1STNBR = FB0WM010.SY1STNBR;
  FBFREC.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW00.SY2CLRID = FB0WM010.SY2CLRID;
  FBFREC.XDMCD = FB0WM010.XDMCD;
  FB0WW00.XDMCD = FB0WM010.XDMCD;
  FB0WW00.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW00.FB0WWFYY = FB0WW00.FB0WWBYY;
  FB0WW00.FB0WWFMM = FB0WW00.FB0WWBMM;
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
  if (FB0WW00.FB0WWFYY > 60)
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
    FB0WW00.FB0WWFCT = 19;
  /*  */
  /* ******************************** Y2K IN BEGIN **************************/
  /*  */
  else
    FB0WW00.FB0WWFCT = 20;
  end
  /*  */
  /* ******************************** Y2K IN END ****************************/
  /*  */
  FB0WW00.FB0WWFDD = 01;
  FBFREC.FB8BUYDT = FB0WW00.FB0WWFDT;
  FB0WW00.FB8BUYDT = FB0WW00.FB0WWFDT;
  FB0WW00.FB0WWPCL = "N";
  ;
  set FB0WM010 empty;
  ;
  FB0WS01(); /* Load item count table*/
  ;
  exit stack;
  ;
  ;
  ;
end // end FB0W640

// Update and add to merged tbls
Function FB0W641()
  ;
   /* ----------------------------------------------------*/
   /* Use the RTA minus line data to obtain all of*/
   /* the merged qty to buy (factory) rows. For each*/
   /* row fetched format the data in the FB0WW08 record.*/
   /* Do all of the necessary calculations and then*/
   /* move into the Fb0WW06 minus array.*/
   /* Since this is an add create the plus merged qty*/
   /* to buy also based upon the minus records read.*/
   /* ----------------------------------------------------*/
  ;
  set FB7REC empty; /* Init record*/
  set FB0WW06 empty; /* Init minus merged table array*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW04.XWHCD;
  FB7REC.PC2CUXID = FB0WW04.PC2CUXID;
  FB7REC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  ;
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  ;
  FB0WW00.FB0WWFHP = 0.00; /* Highest factory percent*/
  move 0 to FB0WW00.FB0WWMMQ[1] for all; /* Init total minus qty array*/
  move 0 to FB0WW00.FB0WWHVA[1] for all; /* Init highest variance table*/
  move 0 to FB0WW00.FB0WWLVA[1] for all; /* Init lowest variance table*/
  move 1 to FB0WW00.FB0WWSLX[1] for all; /* saved lowest index table*/
  move 1 to FB0WW00.FB0WWSHX[1] for all; /* saved highest index table*/
  FB0WW00.FB0WWMFY = 0; /* Init max nbr of factories*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init index for FB0WW06 array*/
  while (FB0WW00.FB0WWMQC == "N") /* While not end of cursor*/
    ;
    if (FB0WW05.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW05.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW05.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      set FB0WW08 empty; /* Init record*/
      ;
      if (FB7REC.FY2MFGPC > FB0WW00.FB0WWFHP)
        FB0WW00.FB0WWFHP = FB7REC.FY2MFGPC; /* Factory with highes %*/
        FB0WW00.FB0WWHPI = FB0WW00.FB0WWIX1; /* highest % index*/
      end
      FB0WW08.FY1FCTYC = FB7REC.FY1FCTYC;
      FB0WW08.XWHCD = FB7REC.XWHCD;
      FB0WW08.PC2CUXID = FB7REC.PC2CUXID;
      FB0WW08.OP1PARTN = FB7REC.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW08.OP1CUOID = FB7REC.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW08.OP1NORID = FB7REC.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW08.FB7RTADT = FB7REC.FB7RTADT;
      FB0WW08.FY2MFGPC = FB7REC.FY2MFGPC;
      move FB7REC.FB7QTB to FB0WW08.FB7QTB[1] for all;
      FB0WW08.ZZZCHGCT = FB7REC.ZZZCHGCT;
      ;
      FB0WW00.FB0WWROW = "M"; /* Calculating minus row*/
      ;
      FB0WS15(); /* Calculate merged qty row*/
      ;
      /* Move to minus row array and since it's an add zero out the*/
      /* fields and move to the plus row also. Use the new*/
      /* date and quantities from the FB0WW05 plus row.*/
      ;
      FB0WW06.FB0WW06R[FB0WWIX1] = FB0WW08.FB0WW08G;
      FB0WW08.FB7RTADT = FB0WW05.FB7RTADT;
      move 0 to FB0WW08.FB7QTB[1] for all;
      move FB0WW05.FB0WWNRQ to FB0WW08.FB0WWNRQ[1] for all;
      FB7REC.ZZZCHGCT = 0;
      FB0WW07.FB0WW07R[FB0WWIX1] = FB0WW08.FB0WW08G;
      ;
      ;
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    if (FB0WW00.FB0WWMQC == "Y") /* end of cursor*/
      FB0WW00.FB0WWMFY = FB0WW00.FB0WWIX1 - 1; /* Max nbr of factories*/
    end
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Compare the total factory qty for each size with*/
   /* the RTA minus row quantities.  If there is*/
   /* difference for any of the sizes, use the saved*/
   /* record index to move the FB0WW06 record to the*/
   /* FB0WW08 record and adjust the factory size quantity.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init size index*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
     /* Compare the RTA minus size buckets to the merged qty*/
     /* factory total size buckets.*/
    ;
    if (FB0WW04.FB0WWNRQ[FB0WWIX1] != FB0WW00.FB0WWMMQ[FB0WWIX1])
      /* Move RTA size qty to work field*/
      /* Move merged total factory size qty to work field*/
      /* calculate the difference*/
      /* use the saved rec index to find rec with highest variance*/
      /* move the record with the highest difference to the*/
         /* redefined record (fb0ww08) to access size fields.*/
      /* move the quantity field to a work field*/
      /* add the difference (may be a negative number)*/
      FB0WW00.FB0WWWF1 = FB0WW04.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF2 = FB0WW00.FB0WWMMQ[FB0WWIX1];
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
      if (FB0WW00.FB0WWWF3 > 0)
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSLX[FB0WWIX1];
        FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX2];
      else
        if (FB0WW00.FB0WWWF3 < 0)
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSHX[FB0WWIX1];
          FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX2];
        end
      end
      FB0WW00.FB0WWWF1 = FB0WW08.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF3;
      FB0WW08.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF1;
      FB0WW06.FB0WW06R[FB0WWIX2] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* ADDED CODE ----- total the new factory size quantites*/
   /* for each factory.  If any total falls below the control*/
   /* record tolerance level zero out the size quantities*/
   /* for that factory and add the size quantities into*/
   /* the factory with the highest percent.This is*/
   /* becomming a nightmare.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Factory index*/
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* max nbr of factories*/
    FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX1];
    FB0WW00.FB0WWIX2 = 1;
    FB0WW00.FB0WWWF1 = 0;
    while (FB0WW00.FB0WWIX2 <= 40)
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW08.FB0WWNRQ[FB0WWIX2];
      FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
    end
    if (FB0WW00.FB0WWWF1 < FB9REC.FB9BTQTY) /* qty < tolerance level*/
      move FB0WW08.FB0WWNRQ to FB0WW00.FB0WWSWF[1] for all;
                                   /* move to size work fields*/
      move 0 to FB0WW08.FB0WWNRQ[1] for all; /* zero out factory size quantities*/
      FB0WW06.FB0WW06R[FB0WWIX1] = FB0WW08.FB0WW08G;
      FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWHPI]; /* add size*/
      FB0WW00.FB0WWIX2 = 1; /* quantities to fcty with > %*/
      while (FB0WW00.FB0WWIX2 <= 40)
        FB0WW00.FB0WWWF1 = FB0WW00.FB0WWSWF[FB0WWIX2];
        FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW08.FB0WWNRQ[FB0WWIX2] + FB0WWWF1;
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
      end
      FB0WW06.FB0WW06R[FB0WWHPI] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Calculate the merged qty added plus rows.*/
   /* ----------------------------------------------------*/
  ;
  move 0 to FB0WW00.FB0WWHVA[1] for all; /* Init highest variance table*/
  move 0 to FB0WW00.FB0WWLVA[1] for all; /* Init lowest variance table*/
  move 1 to FB0WW00.FB0WWSLX[1] for all; /* saved lowest index table*/
  move 1 to FB0WW00.FB0WWSHX[1] for all; /* saved highest index table*/
  move 0 to FB0WW00.FB0WWMPQ[1] for all; /* Init total plus qty array*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* max nbr of factories*/
    ;
    FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX1];
    ;
    FB0WW00.FB0WWROW = "P"; /* Calculating minus row*/
    ;
    /* IF FB0WW05.OP1PARTN EQ FB7REC.OP1PARTN;/* OP-ORD-PART-CHAR*/
     /* AND FB0WW05.OP1CUOID EQ FB7REC.OP1CUOID;/* OP-CUST-ORD-ID*/
     /* AND FB0WW05.OP1NORID EQ FB7REC.OP1NORID;/* OP-NIKE-ORD-ID*/
    FB0WS15(); /* Calculate merged qty row*/
    /* END;*/
    ;
    FB0WW07.FB0WW07R[FB0WWIX1] = FB0WW08.FB0WW08G;
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* Compare the total factory qty for each size with*/
   /* the RTA plus row quantities.  If there is*/
   /* difference for any of the sizes, use the saved*/
   /* record index to move the FB0WW07 record to the*/
   /* FB0WW08 record and adjust the factory size quantity.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init size cursor*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    ;
    if (FB0WW05.FB0WWNRQ[FB0WWIX1] != FB0WW00.FB0WWMPQ[FB0WWIX1])
      /* Move RTA size qty to work field*/
      /* Move merged total factory size qty to work field*/
      /* calculate the difference*/
      /* use the saved rec index to find rec with highest variance*/
      /* move the record with the highest difference to the*/
         /* redefined record (fb0ww08) to access size fields.*/
      /* move the quantity field to a work field*/
      /* add the difference (may be a negative number)*/
      FB0WW00.FB0WWWF1 = FB0WW05.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF2 = FB0WW00.FB0WWMPQ[FB0WWIX1];
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
      if (FB0WW00.FB0WWWF3 < 0)
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSLX[FB0WWIX1];
        FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX2];
      else
        if (FB0WW00.FB0WWWF3 > 0)
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSHX[FB0WWIX1];
          FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX2];
        end
      end
      FB0WW00.FB0WWWF1 = FB0WW08.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF3;
      FB0WW08.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF1;
      FB0WW07.FB0WW07R[FB0WWIX2] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
   /* For each record in the FB0WW06 minus line merged*/
   /* factory record--update each of the merged table*/
   /* rows, and create plus line merged qty factory rows.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* Max factories*/
    ;
    ;
    FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX1];
    ;
    set FB7REC empty;
    ;
    FB7REC.FY1FCTYC = FB0WW08.FY1FCTYC;
    FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
    FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
    FB7REC.XDMCD = FB0WW01.XDMCD;
    FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
    FB7REC.XWHCD = FB0WW08.XWHCD;
    FB7REC.PC2CUXID = FB0WW08.PC2CUXID;
    FB7REC.OP1PARTN = FB0WW08.OP1PARTN; /* OP-ORD-PART-CHAR*/
    FB7REC.OP1CUOID = FB0WW08.OP1CUOID; /* OP-CUST-ORD-ID*/
    FB7REC.OP1NORID = FB0WW08.OP1NORID; /* OP-NIKE-ORD-ID*/
    FB7REC.FB7RTADT = FB0WW08.FB7RTADT;
    ;
    FB0WS17(); /* Obtain unique DFBUY.VMFBUY01*/
    ;
    ;
    move FB0WW08.FB0WWNRQ to FB7REC.FB7QTB[1] for all; /* New qty*/
    FB7REC.FB7RTAPC = FB0WW04.FB0WWNRP; /* New RTA percent*/
    ;
    FB0WS18(); /* Update DFBUY.VMFBUY01*/
    ;
    FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX1];
    FB7REC.FB7RTADT = FB0WW08.FB7RTADT;
    ;
    move FB0WW08.FB0WWNRQ to FB7REC.FB7QTB[1] for all; /* New qty*/
    FB7REC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New RTA percent*/
    ;
    FB0WS19(); /* Add DFBUY.VMFBUY01*/
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
end // end FB0W641

// Update merged tables
Function FB0W642()
   /* ----------------------------------------------------*/
   /* Use the RTA minus line data to obtain all of*/
   /* the merged qty to buy (factory) rows. For each*/
   /* row fetched format the data in the FB0WW08 record.*/
   /* Do all of the necessary calculations and then*/
   /* move into the Fb0WW06 minus array.*/
   /* ----------------------------------------------------*/
  ;
  set FB7REC empty; /* Init record*/
  set FB0WW06 empty; /* Init minus merged table array*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW04.XWHCD;
  FB7REC.PC2CUXID = FB0WW04.PC2CUXID;
  FB7REC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  FB0WW00.FB0WWFHP = 0; /* factory highest percent*/
  move 0 to FB0WW00.FB0WWMMQ[1] for all; /* Init total minus qty array*/
  FB0WW00.FB0WWMFY = 0; /* Init max nbr of factories*/
  move 0 to FB0WW00.FB0WWHVA[1] for all; /* Init highest variance table*/
  move 0 to FB0WW00.FB0WWLVA[1] for all; /* Init lowest variance table*/
  move 1 to FB0WW00.FB0WWSLX[1] for all; /* Save lowest index table*/
  move 1 to FB0WW00.FB0WWSHX[1] for all; /* Save highest index table*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init cursor for FB0WW06 array*/
  while (FB0WW00.FB0WWMQC == "N") /* While not end of cursor*/
    if (FB0WW05.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW05.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW05.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      ;
      set FB0WW08 empty; /* Init record*/
      ;
      if (FB7REC.FY2MFGPC > FB0WW00.FB0WWFHP)
        FB0WW00.FB0WWFHP = FB7REC.FY2MFGPC; /* greatest fcty %*/
        FB0WW00.FB0WWHPI = FB0WW00.FB0WWIX1; /* idx of fcty with > %*/
      end
      FB0WW08.FY1FCTYC = FB7REC.FY1FCTYC;
      FB0WW08.XWHCD = FB7REC.XWHCD;
      FB0WW08.PC2CUXID = FB7REC.PC2CUXID;
      FB0WW08.OP1PARTN = FB7REC.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW08.OP1CUOID = FB7REC.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW08.OP1NORID = FB7REC.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW08.FB7RTADT = FB7REC.FB7RTADT;
      FB0WW08.FY2MFGPC = FB7REC.FY2MFGPC;
      move FB7REC.FB7QTB to FB0WW08.FB7QTB[1] for all;
      FB0WW08.ZZZCHGCT = FB7REC.ZZZCHGCT;
      ;
      FB0WW00.FB0WWROW = "M"; /* Calculating minus row*/
      ;
      FB0WS15(); /* Calculate merged qty row*/
      ;
      /* Move to minus row array*/
      ;
      FB0WW06.FB0WW06R[FB0WWIX1] = FB0WW08.FB0WW08G;
      ;
      ;
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    if (FB0WW00.FB0WWMQC == "Y") /* end of cursor*/
      FB0WW00.FB0WWMFY = FB0WW00.FB0WWIX1 - 1; /* Max nbr of factories*/
    end
    ;
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Compare the total factory qty for each size with*/
   /* the RTA minus row quantities.  If there is*/
   /* difference for any of the sizes, use the saved*/
   /* record index to move the FB0WW06 record to the*/
   /* FB0WW08 record and adjust the factory size quantity.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  FB0WW00.FB0WWIX1 = 1; /* Init cursor for FB0WW06 array*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
     /* Compare the RTA minus size buckets to the merged qty*/
     /* factory total size buckets.*/
    ;
    if (FB0WW04.FB0WWNRQ[FB0WWIX1] != FB0WW00.FB0WWMMQ[FB0WWIX1])
      /* Move RTA size qty to work field*/
      /* Move merged total factory size qty to work field*/
      /* calculate the difference*/
      /* use the saved rec index to find the merged record*/
          /* with the highest variance*/
      /* move the record from the array to the redefined record*/
      /* move the quantity field to a work field*/
      /* add the different (may be a negative number)*/
      FB0WW00.FB0WWWF1 = FB0WW04.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF2 = FB0WW00.FB0WWMMQ[FB0WWIX1];
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
      if (FB0WW00.FB0WWWF3 < 0)
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSLX[FB0WWIX1];
        FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX2];
      else
        if (FB0WW00.FB0WWWF3 > 0)
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSHX[FB0WWIX1];
          FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX2];
        end
      end
      FB0WW00.FB0WWWF1 = FB0WW08.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF3;
      FB0WW08.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF1;
      FB0WW06.FB0WW06R[FB0WWIX2] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* ADDED CODE ----- total the new factory size quantites*/
   /* for each factory.  If any total falls below the control*/
   /* record tolerance level zero out the size quantities*/
   /* for that factory and add the size quantities into*/
   /* the factory with the highest percent.This is*/
   /* becomming a nightmare.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Factory index*/
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* max nbr of factories*/
    FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX1];
    FB0WW00.FB0WWIX2 = 1;
    FB0WW00.FB0WWWF1 = 0;
    while (FB0WW00.FB0WWIX2 <= 40)
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW08.FB0WWNRQ[FB0WWIX2];
      FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
    end
    if (FB0WW00.FB0WWWF1 < FB9REC.FB9BTQTY) /* qty < tolerance level*/
      move FB0WW08.FB0WWNRQ to FB0WW00.FB0WWSWF[1] for all;
                                   /* move to size work fields*/
      move 0 to FB0WW08.FB0WWNRQ[1] for all; /* zero out factory size quantities*/
      FB0WW06.FB0WW06R[FB0WWIX1] = FB0WW08.FB0WW08G;
      FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWHPI]; /* add size*/
      FB0WW00.FB0WWIX2 = 1; /* quantities to fcty with > %*/
      while (FB0WW00.FB0WWIX2 <= 40)
        FB0WW00.FB0WWWF1 = FB0WW00.FB0WWSWF[FB0WWIX2];
        FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW08.FB0WWNRQ[FB0WWIX2] + FB0WWWF1;
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
      end
      FB0WW06.FB0WW06R[FB0WWHPI] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Use the RTA plus line data to obtain all of*/
   /* the merged qty to buy (factory) rows. For each*/
   /* row fetched format the data in the FB0WW08 record.*/
   /* Do all of the necessary calculations and then*/
   /* move into the Fb0WW07 plus array.*/
   /* ----------------------------------------------------*/
  ;
  set FB7REC empty; /* Init record*/
  set FB0WW07 empty; /* Init plus merged table array*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW05.XWHCD;
  FB7REC.PC2CUXID = FB0WW05.PC2CUXID;
  FB7REC.OP1PARTN = FB0WW05.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW05.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW05.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW05.FB7RTADT;
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  FB0WW00.FB0WWFHP = 0; /* factory with highest percent*/
  move 0 to FB0WW00.FB0WWMPQ[1] for all; /* Init total plus qty array*/
  FB0WW00.FB0WWMFY = 0; /* Init max nbr of factories*/
  move 0 to FB0WW00.FB0WWHVA[1] for all; /* Init highest variance table*/
  move 0 to FB0WW00.FB0WWLVA[1] for all; /* Init lowest variance table*/
  move 1 to FB0WW00.FB0WWSLX[1] for all; /* Save lowest index table*/
  move 1 to FB0WW00.FB0WWSHX[1] for all; /* Save highest index table*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init cursor for FB0WW07 array*/
  while (FB0WW00.FB0WWMQC == "N") /* While not end of cursor*/
    if (FB0WW05.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW05.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW05.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      ;
      if (FB7REC.FY2MFGPC > FB0WW00.FB0WWFHP)
        FB0WW00.FB0WWFHP = FB7REC.FY2MFGPC; /* greatest fcty %*/
        FB0WW00.FB0WWHPI = FB0WW00.FB0WWIX1; /* idx of fcty with > %*/
      end
      set FB0WW08 empty; /* Init record*/
      ;
      FB0WW08.FY1FCTYC = FB7REC.FY1FCTYC;
      FB0WW08.XWHCD = FB7REC.XWHCD;
      FB0WW08.PC2CUXID = FB7REC.PC2CUXID;
      FB0WW08.OP1PARTN = FB7REC.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW08.OP1CUOID = FB7REC.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW08.OP1NORID = FB7REC.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW08.FB7RTADT = FB7REC.FB7RTADT;
      FB0WW08.FY2MFGPC = FB7REC.FY2MFGPC;
      move FB7REC.FB7QTB to FB0WW08.FB7QTB[1] for all;
      FB0WW08.ZZZCHGCT = FB7REC.ZZZCHGCT;
      ;
      FB0WW00.FB0WWROW = "P"; /* Calculating plus row*/
      ;
      FB0WS15(); /* Calculate merged qty row*/
      ;
      /* Move to plus row array*/
      ;
      FB0WW07.FB0WW07R[FB0WWIX1] = FB0WW08.FB0WW08G;
      ;
      ;
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    if (FB0WW00.FB0WWMQC == "Y") /* end of cursor*/
      FB0WW00.FB0WWMFY = FB0WW00.FB0WWIX1 - 1; /* Max nbr of factories*/
    end
    ;
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Compare the total factory qty for each size with*/
   /* the RTA plus row quantities.  If there is a*/
   /* difference for any of the sizes, use the saved*/
   /* record index to move the FB0WW07 record to the*/
   /* FB0WW08 record and adjust the factory size quantity.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  FB0WW00.FB0WWIX1 = 1; /* Init cursor for FB0WW06 array*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    ;
    if (FB0WW05.FB0WWNRQ[FB0WWIX1] != FB0WW00.FB0WWMPQ[FB0WWIX1])
      /* Move RTA size qty to work field*/
      /* Move merged total factory size qty to work field*/
      /* calculate the difference*/
      /* use the saved rec index to find the merged record*/
         /* with the highest variance*/
      /* move the record from the array to the redefined record*/
      /* move the quantity field to a work field*/
      /* add the difference (may be a negative number)*/
      FB0WW00.FB0WWWF1 = FB0WW05.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF2 = FB0WW00.FB0WWMPQ[FB0WWIX1];
      FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
      if (FB0WW00.FB0WWWF3 < 0)
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSLX[FB0WWIX1];
        FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX2];
      else
        if (FB0WW00.FB0WWWF3 > 0)
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWSHX[FB0WWIX1];
          FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX2];
        end
      end
      FB0WW00.FB0WWWF1 = FB0WW08.FB0WWNRQ[FB0WWIX1];
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF3;
      FB0WW08.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF1;
      FB0WW07.FB0WW07R[FB0WWIX2] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* ADDED CODE ----- total the new factory size quantites*/
   /* for each factory.  If any total falls below the control*/
   /* record tolerance level zero out the size quantities*/
   /* for that factory and add the size quantities into*/
   /* the factory with the highest percent.This is*/
   /* becomming a nightmare.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Factory index*/
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* max nbr of factories*/
    FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX1];
    FB0WW00.FB0WWIX2 = 1;
    FB0WW00.FB0WWWF1 = 0;
    while (FB0WW00.FB0WWIX2 <= 40)
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWWF1 + FB0WW08.FB0WWNRQ[FB0WWIX2];
      FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
    end
    if (FB0WW00.FB0WWWF1 < FB9REC.FB9BTQTY) /* qty < tolerance level*/
      move FB0WW08.FB0WWNRQ to FB0WW00.FB0WWSWF[1] for all;
                                   /* move to size work fields*/
      move 0 to FB0WW08.FB0WWNRQ[1] for all; /* zero out factory size quantities*/
      FB0WW07.FB0WW07R[FB0WWIX1] = FB0WW08.FB0WW08G;
      FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWHPI]; /* add size*/
      FB0WW00.FB0WWIX2 = 1; /* quantities to fcty with > %*/
      while (FB0WW00.FB0WWIX2 <= 40)
        FB0WW00.FB0WWWF1 = FB0WW00.FB0WWSWF[FB0WWIX2];
        FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW08.FB0WWNRQ[FB0WWIX2] + FB0WWWF1;
        FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
      end
      FB0WW07.FB0WW07R[FB0WWHPI] = FB0WW08.FB0WW08G;
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* For each record in the FB0WW06 minus line merged*/
   /* factory record--update each of the merged table*/
   /* rows.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* Max factories*/
    ;
    FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX1];
    ;
    set FB7REC empty;
    FB7REC.FY1FCTYC = FB0WW08.FY1FCTYC;
    FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
    FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
    FB7REC.XDMCD = FB0WW01.XDMCD;
    FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
    FB7REC.XWHCD = FB0WW04.XWHCD;
    FB7REC.PC2CUXID = FB0WW04.PC2CUXID;
    FB7REC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
    FB7REC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
    FB7REC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
    FB7REC.FB7RTADT = FB0WW04.FB7RTADT;
    ;
    FB0WS17(); /* Obtain unique DFBUY.VMFBUY01*/
    ;
    /* IF FB0WW08.ZZZCHGCT NE FB7REC.ZZZCHGCT;*/
     /* CALL EZEROLLB;*/
     /* MOVE 20 TO FB0WW00.XXXMSGNO ; record has been updated etc*/
     /* FB0WS23                     ; Set up for redisplay*/
    /* END ;*/
    ;
    move FB0WW08.FB0WWNRQ to FB7REC.FB7QTB[1] for all; /* New qty*/
    FB7REC.FB7RTAPC = FB0WW04.FB0WWNRP; /* New RTA percent*/
    ;
    FB0WS18(); /* Update DFBUY.VMFBUY01*/
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* For each record in the FB0WW07 plus line merged*/
   /* factory record--update each of the merged table*/
   /* rows.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWMFY) /* Max factories*/
    ;
    FB0WW08.FB0WW08G = FB0WW07.FB0WW07R[FB0WWIX1];
    ;
    set FB7REC empty;
    ;
    FB7REC.FY1FCTYC = FB0WW08.FY1FCTYC;
    FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
    FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
    FB7REC.XDMCD = FB0WW01.XDMCD;
    FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
    FB7REC.XWHCD = FB0WW05.XWHCD;
    FB7REC.PC2CUXID = FB0WW05.PC2CUXID;
    FB7REC.OP1PARTN = FB0WW05.OP1PARTN; /* OP-ORD-PART-CHAR*/
    FB7REC.OP1CUOID = FB0WW05.OP1CUOID; /* OP-CUST-ORD-ID*/
    FB7REC.OP1NORID = FB0WW05.OP1NORID; /* OP-NIKE-ORD-ID*/
    FB7REC.FB7RTADT = FB0WW05.FB7RTADT;
    ;
    FB0WS17(); /* Obtain unique DFBUY.VMFBUY01*/
    ;
    /* IF FB0WW08.ZZZCHGCT NE FB7REC.ZZZCHGCT;*/
      /* CALL EZEROLLB;*/
      /* MOVE 20 TO FB0WW00.XXXMSGNO ; record has been updated etc*/
      /* FB0WS23                     ; Set up for redisplay*/
    /* END ;*/
    ;
    move FB0WW08.FB0WWNRQ to FB7REC.FB7QTB[1] for all;
    FB7REC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New RTA percent*/
    ;
    FB0WS18(); /* Update DFBUY.VMFBUY01*/
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    ;
  end
  ;
  ;
  ;
  ;
end // end FB0W642

// Update and delete from merged
Function FB0W643()
   /* ----------------------------------------------------*/
   /* Use the RTA minus line data to obtain the*/
   /* merged qty to buy (factory) rows. Move the*/
   /* quantity to buy size quantities into the*/
   /* fb0ww06 fb7qtb field.  Delete all of the*/
   /* minus rows.*/
   /* Then obtain all of the plus rows--add the*/
   /* quantities from the minus rows to the plus*/
   /* rows and update the plus rows.*/
   /* ----------------------------------------------------*/
  ;
  ;
  set FB7REC empty; /* Init record*/
  set FB0WW06 empty; /* Init minus merged table array*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW04.XWHCD;
  FB7REC.PC2CUXID = FB0WW04.PC2CUXID;
  FB7REC.OP1PARTN = FB0WW04.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW04.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW04.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW04.FB7RTADT;
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  move 0 to FB0WW00.FB0WWMMQ[1] for all; /* Init total minus qty array*/
  FB0WW00.FB0WWMFY = 0; /* Init max nbr of factories*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init cursor for FB0WW06 array*/
  while (FB0WW00.FB0WWMQC == "N") /* While not end of cursor*/
    if (FB0WW05.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW05.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW05.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      ;
      set FB0WW08 empty; /* Init record*/
      ;
      FB0WW08.FY1FCTYC = FB7REC.FY1FCTYC;
      FB0WW08.XWHCD = FB7REC.XWHCD;
      FB0WW08.PC2CUXID = FB7REC.PC2CUXID;
      FB0WW08.OP1PARTN = FB7REC.OP1PARTN; /* OP-ORD-PART-CHAR*/
      FB0WW08.OP1CUOID = FB7REC.OP1CUOID; /* OP-CUST-ORD-ID*/
      FB0WW08.OP1NORID = FB7REC.OP1NORID; /* OP-NIKE-ORD-ID*/
      FB0WW08.FB7RTADT = FB7REC.FB7RTADT;
      FB0WW08.FY2MFGPC = FB7REC.FY2MFGPC;
      FB0WW08.ZZZCHGCT = FB7REC.ZZZCHGCT;
      move FB7REC.FB7QTB to FB0WW08.FB7QTB[1] for all;
      ;
      /* Move to minus row array*/
      ;
      FB0WW06.FB0WW06R[FB0WWIX1] = FB0WW08.FB0WW08G;
      ;
      FB0WS20(); /* Delete DFBUY.VMFBUY01 row*/
      ;
      ;
      FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
    end
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    if (FB0WW00.FB0WWMQC == "Y") /* end of cursor*/
      FB0WW00.FB0WWMFY = FB0WW00.FB0WWIX1 - 1; /* Max nbr of factories*/
    end
    ;
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
   /* ----------------------------------------------------*/
   /* Use the RTA plus line data to obtain all of*/
   /* the merged qty to buy (factory) rows. For each*/
   /* row fetched format the data in the FB0WW08 record.*/
   /* Find the minus row with the matching factory and*/
   /* Add the size quantities from the minus row to the*/
   /* plus and update the plus merged row.*/
   /* ----------------------------------------------------*/
  ;
  set FB7REC empty; /* Init record*/
  set FB0WW07 empty; /* Init plus merged table array*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW05.XWHCD;
  FB7REC.PC2CUXID = FB0WW05.PC2CUXID;
  FB7REC.OP1PARTN = FB0WW05.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW05.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW05.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW05.FB7RTADT;
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  while (FB0WW00.FB0WWMQC == "N") /* While not end of cursor*/
    if (FB0WW05.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW05.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW05.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      ;
      ;
      /* Find the factory in the minus row*/
      ;
      ;
      FB0WW00.FB0WWIX3 = 1; /* init index*/
      while (FB0WW00.FB0WWIX3 <= FB0WW00.FB0WWMFY) /* nbr of factories*/
        if (FB0WW06.FY1FCTYC[FB0WWIX3] == FB7REC.FY1FCTYC)
          FB0WW08.FB0WW08G = FB0WW06.FB0WW06R[FB0WWIX3];
          FB0WW00.FB0WWIX3 = 99; /* Drop out of loop*/
        else
          FB0WW00.FB0WWIX3 = FB0WW00.FB0WWIX3 + 1;
        end
      end
      ;
      /* add minus row to fb7rec size array*/
      ;
      FB0WW00.FB0WWIX3 = 1; /* Init index*/
      ;
      while (FB0WW00.FB0WWIX3 <= 40)
        FB0WW00.FB0WWWF1 = FB0WW08.FB7QTB[FB0WWIX3];
        FB7REC.FB7QTB[FB0WWIX3] = FB7REC.FB7QTB[FB0WWIX3] + FB0WWWF1;
        FB0WW00.FB0WWIX3 = FB0WW00.FB0WWIX3 + 1;
      end
      FB7REC.FB7RTAPC = FB0WW05.FB0WWNRP; /* New RTa percent*/
      ;
      FB0WS18(); /* Update DFBUY.VMFBUY01*/
      ;
      ;
    end
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    ;
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
  ;
  ;
end // end FB0W643

// Update RTA date
Function FB0W650()
   /* ----------------------------------------------------*/
   /* Obtain the RTA date row using the old RTA date*/
   /* and then update the table row.  OBtain all of*/
   /* the merged quantity to buy rows for the RTA date*/
   /* and update those with the new date--set data reload*/
   /* flag to yes.*/
   /* ----------------------------------------------------*/
  ;
  set FBFREC empty; /* Init record*/
  ;
  FBFREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBFREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBFREC.XDMCD = FB0WW01.XDMCD;
  FBFREC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FBFREC.XWHCD = FB0WW03.XWHCD[FB0WWRIX];
  FBFREC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWRIX];
  FBFREC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWRIX]; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWRIX]; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB0WW03.OP1NORID[FB0WWRIX]; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB0WW03.FB7RTADT[FB0WWRIX];
  ;
  FB0WS09(); /* Obtain unique DFBUY.VRTQTB01*/
  ;
  ;
   /* IF FBFREC.ZZZCHGCT NE FB0WW04.ZZZCHGCT;*/
    /* CALL EZEROLLB;*/
    /* MOVE 20 TO FB0WW00.XXXMSGNO   ; Record has been updated*/
    /* FB0WS23                       ; Set up to display new prod*/
   /* END ;*/
  ;
  FBFREC.FB7RTADT = FB0WW00.FB0WWFDT; /* New date*/
  ;
  FB0WS11(); /* add DFBUY.VRTQTB01 row*/
  ;
  FBFREC.FB7RTADT = FB0WW03.FB7RTADT[FB0WWRIX]; /* old date*/
  ;
  FB0WS12(); /* delete DFBUY.VRTQTB01*/
  ;
  ;
  set FB7REC empty; /* Init record*/
  ;
  FB7REC.SY1STNBR = FB0WW01.SY1STNBR;
  FB7REC.SY2CLRID = FB0WW01.SY2CLRID;
  FB7REC.XDMCD = FB0WW01.XDMCD;
  FB7REC.FB8BUYDT = FB0WW00.FB8BUYDT;
  FB7REC.XWHCD = FB0WW03.XWHCD[FB0WWRIX];
  FB7REC.PC2CUXID = FB0WW03.PC2CUXID[FB0WWRIX];
  FB7REC.OP1PARTN = FB0WW03.OP1PARTN[FB0WWRIX]; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB0WW03.OP1CUOID[FB0WWRIX]; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB0WW03.OP1NORID[FB0WWRIX]; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB0WW03.FB7RTADT[FB0WWRIX];
  ;
  FB0WS13(); /* Open DFBUY.VMFBUY01 cursor*/
  ;
  FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
  ;
  while (FB0WW00.FB0WWMQC == "N")
    ;
    if (FB0WW03.OP1PARTN[FB0WWRIX] == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB0WW03.OP1CUOID[FB0WWRIX] == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB0WW03.OP1NORID[FB0WWRIX] == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      FB7REC.FB7RTADT = FB0WW00.FB0WWFDT;
      ;
      FB0WS25(); /* add DFBUY.VMFBUY01 row*/
      ;
      FB7REC.FB7RTADT = FB0WW03.FB7RTADT[FB0WWRIX];
      ;
      FB0WS20(); /* delete VMFBUY01 row*/
      ;
    end
    ;
    FB0WS14(); /* Fetch DFBUY.VMFBUY01 row*/
    ;
  end
  ;
  FB0WS16(); /* Close DFBUY.VMFBUY01 row*/
  ;
  ;
   /* ----------------------------------------------------*/
   /* Update completedly successfully -- do commit*/
   /* Clear work areas---reenitilize map*/
   /* Set flag to obtain data (want to display modified*/
   /* data).*/
   /* ----------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit database changee*/
  ;
  ;
  set FB0WW00 empty;
  set FB0WW01 empty;
  set FB0WW02 empty;
  set FB0WW03 empty;
  set FB0WW04 empty;
  set FB0WW05 empty;
  set FB0WW06 empty;
  set FB0WW07 empty;
  set FB0WW08 empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  ;
  FB0WW01.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW01.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW01.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW01.XDMCD = FB0WM010.XDMCD;
  FB0WW01.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0WW01.SY2CLRAB = PG2REC.SY2CLRAB;
  ;
  ;
  FB0WW00.XXXMSGNO = 32; /* Table update was successful*/
  ;
  FB0WW00.FB0WWRDF = "Y"; /* Request for data flag*/
  FB0WW00.FB0WWTSL = 3843; /* Temp storage length*/
  FB0WW00.FB0WWMAX = 11; /* Max lines per page*/
  FB0WW00.FB0WWTSP = TA5REC.TA5TSQIX; /* Temp storage page requested*/
  TA5REC.TA5TSQIX = 0;
  ;
  set FBFREC empty;
  ;
  FBFREC.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW00.SY1STNBR = FB0WM010.SY1STNBR;
  FBFREC.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW00.SY2CLRID = FB0WM010.SY2CLRID;
  FBFREC.XDMCD = FB0WM010.XDMCD;
  FB0WW00.XDMCD = FB0WM010.XDMCD;
  FB0WW00.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW00.FB0WWFYY = FB0WW00.FB0WWBYY;
  FB0WW00.FB0WWFMM = FB0WW00.FB0WWBMM;
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
  if (FB0WW00.FB0WWFYY > 60)
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
    FB0WW00.FB0WWFCT = 19;
  /*  */
  /* ****************************** Y2K IN BEGIN ****************************/
  /*  */
  else
    FB0WW00.FB0WWFCT = 20;
  end
  /*  */
  /* ****************************** Y2K IN END ******************************/
  /*  */
  FB0WW00.FB0WWFDD = 01;
  FBFREC.FB8BUYDT = FB0WW00.FB0WWFDT;
  FB0WW00.FB8BUYDT = FB0WW00.FB0WWFDT;
  ;
  set FB0WM010 empty;
  ;
  FB0WS01(); /* Load item count table*/
  ;
  exit stack;
  ;
  ;
  ;
end // end FB0W650

// Load item count table
Function FB0WS01()
  ;
   /* ---------------------------------------------------------*/
   /* Initialize the working storage destination array*/
   /* fields (warehouse, cust xref, detination counter and*/
   /* destination total quantity.*/
   /* ---------------------------------------------------------*/
  ;
  move " " to FB0WW00.XWHCD[1] for all;
  move " " to FB0WW00.PC2CUXID[1] for all;
  FB0WW05.OP1PARTN = "0"; /* OP-ORD-PART-CHAR*/
  FB0WW05.OP1CUOID = 0; /* OP-CUST-ORD-ID*/
  FB0WW05.OP1NORID = 0; /* OP-NIKE-ORD-ID*/
  move 0 to FB0WW00.FB0WWDCT[1] for all; /* Destination counter*/
  move 0 to FB0WW00.FB0WWDTQ[1] for all; /* Destination total quantity*/
  ;
  FB0WS02(); /* Open cursor for DFBUY.VRTQTB01*/
  ;
  FB0WS03(); /* Fetch first DFBUY.VRTQTB01row*/
  ;
  ;
   /* ---------------------------------------------------------*/
   /* Save the current customer xref and warehouse in a*/
   /* table in working storage--and count  how many*/
   /* record exist for each destination (warehouse and*/
   /* cust xref). Also accumulate the total quantity for*/
   /* each destination.*/
   /* ---------------------------------------------------------*/
  ;
  ;
  FB0WW00.FB0WWIX1 = 1; /* Initialize work index*/
  ;
  ;
  while (FB0WW00.FB0WWQBC == "N" /* While there are more rows*/
   && FB0WW00.FB0WWIX1 <= 10) /* work index*/
    ;
    if (FBFREC.XDVCD != "02")
      ;
      FB0WW00.PC2CUXID[FB0WWIX1] = FBFREC.PC2CUXID; /* Save cust xref*/
      FB0WW00.OP1PARTN[FB0WWIX1] = FBFREC.OP1PARTN;
      FB0WW00.OP1CUOID[FB0WWIX1] = FBFREC.OP1CUOID;
      FB0WW00.OP1NORID[FB0WWIX1] = FBFREC.OP1NORID;
      FB0WW00.XWHCD[FB0WWIX1] = FBFREC.XWHCD; /* Save warehouse*/
      ;
      while (FB0WW00.FB0WWQBC == "N" /* While row and same dest*/
       && FB0WW00.FB0WWIX1 <= 10  /* work index*/
       && FBFREC.PC2CUXID == FB0WW00.PC2CUXID[FB0WWIX1]
       && FBFREC.OP1PARTN == FB0WW00.OP1PARTN[FB0WWIX1]
       && FBFREC.OP1CUOID == FB0WW00.OP1CUOID[FB0WWIX1]
       && FBFREC.OP1NORID == FB0WW00.OP1NORID[FB0WWIX1]
       && FBFREC.XWHCD == FB0WW00.XWHCD[FB0WWIX1])
        ;
        FB0WW00.FB0WWDCT[FB0WWIX1] = FB0WW00.FB0WWDCT[FB0WWIX1] + 1;
        FB0WW00.FB0WWIX2 = 1; /* Init size index*/
        while (FB0WW00.FB0WWIX2 <= 40)
          FB0WW00.FB0WWWF1 = FBFREC.FB7QTB[FB0WWIX2];
          FB0WW00.FB0WWDTQ[FB0WWIX1] = FB0WW00.FB0WWDTQ[FB0WWIX1] +           FB0WWWF1;
          FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
        end
        ;
        FB0WS03(); /* Fetch next DFBUY.VRTQTB01*/
        ;
      end
      if (FB0WW00.FB0WWQBC == "N")
        FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1; /* Increment index*/
      else
        FB0WW00.FB0WWDMX = FB0WW00.FB0WWIX1; /* dest table max*/
      end
    else
      FB0WS03(); /* Fetch next DFBUY.VRTQTB01*/
      if (FB0WW00.FB0WWQBC == "Y")
        FB0WW00.FB0WWDMX = FB0WW00.FB0WWIX1; /* dest table max*/
      end
    end
  end
  ;
  FB0WS04(); /* Close DFBUY.VRTQTB01*/
  ;
  ;
end // end FB0WS01

// open DFBUY.VRTQTB01 cursor
Function FB0WS02()
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for dfbuy.vrtqtb01*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW00.FB0WWQBC = "N"; /* Set quantity to buy cursor to no*/
  ;
  ;
  ;
  try
    call "IO4620" ("S1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS02"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS02";
  exit stack;
  ;
end // end FB0WS02

// Fetch DFBUY.VRTQTB01 row
Function FB0WS03()
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4620" ("N1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0WW00.FB0WWQBC = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS03"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS03";
  exit stack;
  ;
end // end FB0WS03

// Close DFBUY.VRTQTB01 cursor
Function FB0WS04()
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for dfbuy.vrtqtb01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4620" ("C1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS04"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS04";
  exit stack;
  ;
end // end FB0WS04

// Add page to temp storage
Function FB0WS05()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW03.FB0WWTSL = FB0WW00.FB0WWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FB0WW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FB0WW03 empty; /* Temp storage record*/
    ;
    FB0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB0WW00.FB0WWLCT = FB0WW00.FB0WWMAX; /* Init to max lines per pg*/
    FB0WW00.FB0WWIXT = 0; /* temp storage line index*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS05"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0WM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FB0WM010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0WS05

// Obtain temp storage page
Function FB0WS06()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW03.FB0WWTSL = FB0WW00.FB0WWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB0WW00.FB0WWTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FB0WW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS06"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0WM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0WS06

// Call TA0040 to validate date
Function FB0WS07()
  ;
  ;
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/
    ;
    FB0WM010.XXXPRCNM = "FB0WS07"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0WM010.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M010"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FB0WS07

// Calculate new RTA size qtys
Function FB0WS08()
  ;
   /* ----------------------------------------------------*/
   /* Determine the percent of change.*/
   /* (new percent / old percent) on minus row.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWPCH = FB0WW04.FB0WWNRP / FB0WW04.FB7RTAPC;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Sum all of the size buckets for the plus and minus*/
   /* lines to get the old total size quantities.*/
   /* ----------------------------------------------------*/
  ;
  move 0 to FB0WW00.FB0WWOSQ[1] for all; /* Working storage old summed size*/
                                   /* buckets*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Initialize work index*/
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    FB0WW00.FB0WWWF1 = FB0WW04.FB7QTB[FB0WWIX1];
    FB0WW00.FB0WWWF2 = FB0WW05.FB7QTB[FB0WWIX1];
    FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 + FB0WW00.FB0WWWF2;
    FB0WW00.FB0WWOSQ[FB0WWIX1] = FB0WW00.FB0WWWF3;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Calculate the % of change for each size bucket for*/
   /* the minus line to get the new unrounded minus qty*/
   /* (by size)*/
       /* New unrounded minus qty = % of change x*/
       /* original minus qty*/
   /* Round to the nearest multiple of units per case.*/
   /* ADDED CODE-----DO NOT DO ROUNDING TO MULTIPLES*/
   /* IF THE ROUND FLAG ON THE VFBLAV01  IS A 'N'*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    if (FB0WW04.FB7QTB[FB0WWIX1] != 0) /* If a size qty*/
      FB0WW00.FB0WWWF1 = FB0WW04.FB7QTB[FB0WWIX1];
      ;
       /* Unrounded qty = orig size qty x percent of change*/
      ;
      FB0WW00.FB0WWUQT = mathLib.round(FB0WW00.FB0WWWF1 * FB0WW00.FB0WWPCH, -mathLib.decimals(FB0WW00.FB0WWUQT));
      ;
      if (FBLREC.FBKRDFL == "N")
        FB0WW04.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWUQT;
      else
        ;
        if (PG2REC.SY1UNPCS == 0)
          PG2REC.SY1UNPCS = 12; /* Default value*/
        end
        ;
        FB0WW00.FB0WWDIV = FB0WW00.FB0WWUQT / PG2REC.SY1UNPCS;
        ;
        if (FB0WW00.FB0WWREM == 0)
          FB0WW04.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWUQT;
        else
          FB0WW00.FB0WW-DECRMT-CNTR = 0;
          while (FB0WW00.FB0WWREM != 0)
            FB0WW00.FB0WWUQT = FB0WW00.FB0WWUQT - 1; /* Decrement qty*/
            FB0WW00.FB0WW-DECRMT-CNTR = FB0WW00.FB0WW-DECRMT-CNTR + 1;
            FB0WW00.FB0WWDIV = FB0WW00.FB0WWUQT / PG2REC.SY1UNPCS;
          end
          ;
          if (FB0WW00.FB0WW-DECRMT-CNTR > 5)
            FB0WW00.FB0WWUQT = FB0WW00.FB0WWUQT + PG2REC.SY1UNPCS;
          end
          FB0WW04.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWUQT;
        end
        ;
      end
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* calculate the plus line size quantities for each*/
   /* size bucket.*/
       /* plus line size bucket = old total qty size*/
       /* bucket - new minus size bucket.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
     /* IF FB0WW04.FB0WWNRQ(FB0WWIX1) NE 0   ;*/
     /* Move new minus size qty to work field*/
    FB0WW00.FB0WWWF2 = FB0WW04.FB0WWNRQ[FB0WWIX1];
     /* Move working storage old total qty bucket to work field*/
    FB0WW00.FB0WWWF1 = FB0WW00.FB0WWOSQ[FB0WWIX1];
     /* do calculation*/
    FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
     /* move calculated field to new qty size bucket for plus row*/
    FB0WW05.FB0WWNRQ[FB0WWIX1] = FB0WW00.FB0WWWF3;
     /* END ;*/
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Sum the plus and minus row size bucket to get*/
   /* the new total quantities for each record.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWNMT = 0;
  FB0WW00.FB0WWNPT = 0;
  ;
  FB0WW00.FB0WWIX1 = 1;
  ;
  while (FB0WW00.FB0WWIX1 <= 40)
    ;
    FB0WW00.FB0WWNMT = FB0WW00.FB0WWNMT + FB0WW04.FB0WWNRQ[FB0WWIX1];
    FB0WW00.FB0WWNPT = FB0WW00.FB0WWNPT + FB0WW05.FB0WWNRQ[FB0WWIX1];
    ;
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Recalculate the percent for the plus and the*/
   /* minus rows*/
   /* First find the warehouse/customer xref in the*/
   /* desination table to get the total quantity.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX1 = 1; /* Init work index*/
  ;
  while (FB0WW00.FB0WWIX1 <= FB0WW00.FB0WWDMX) /* Until max destinations*/
    if (FB0WW04.XWHCD == FB0WW00.XWHCD[FB0WWIX1]
     && FB0WW04.PC2CUXID == FB0WW00.PC2CUXID[FB0WWIX1]
     && FB0WW04.OP1PARTN == FB0WW00.OP1PARTN[FB0WWIX1]
     && FB0WW04.OP1CUOID == FB0WW00.OP1CUOID[FB0WWIX1]
     && FB0WW04.OP1NORID == FB0WW00.OP1NORID[FB0WWIX1])
      FB0WW00.FB0WWWF1 = FB0WW00.FB0WWDTQ[FB0WWIX1];
    end
    FB0WW00.FB0WWIX1 = FB0WW00.FB0WWIX1 + 1;
  end
  ;
   /* recalculate minus percent*/
  ;
  if (FB0WW00.FB0WWNMT != 0
   && FB0WW00.FB0WWWF1 != 0)
    FB0WW00.FB0WWNMP = mathLib.round(FB0WW00.FB0WWNMT / FB0WW00.FB0WWWF1, -mathLib.decimals(FB0WW00.FB0WWNMP));
    FB0WW04.FB0WWNRP = FB0WW00.FB0WWNMP * 100;
  end
  ;
   /* recalculate plus percent*/
  ;
  if (FB0WW00.FB0WWNPT != 0
   && FB0WW00.FB0WWWF1 != 0)
    FB0WW00.FB0WWNPP = mathLib.round(FB0WW00.FB0WWNPT / FB0WW00.FB0WWWF1, -mathLib.decimals(FB0WW00.FB0WWNPP));
    FB0WW05.FB0WWNRP = FB0WW00.FB0WWNPP * 100;
  end
  ;
   /* ----------------------------------------------------*/
   /* Add the two new percents together.*/
   /* Add the two previous percents together.*/
   /* If the new percent is > than the old add to the*/
   /* plus row--else subtract from the minus row.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWWF1 = FB0WW05.FB7RTAPC + FB0WW04.FB7RTAPC;
  FB0WW00.FB0WWWF2 = FB0WW05.FB0WWNRP + FB0WW04.FB0WWNRP;
  FB0WW00.FB0WWWF3 = FB0WW00.FB0WWWF1 - FB0WW00.FB0WWWF2;
  ;
  if (FB0WW00.FB0WWWF3 < 0)
    FB0WW05.FB0WWNRP = FB0WW05.FB0WWNRP + FB0WW00.FB0WWWF3;
  else
    FB0WW04.FB0WWNRP = FB0WW04.FB0WWNRP + FB0WW00.FB0WWWF3;
  end
  ;
  ;
end // end FB0WS08

// Obtain unique DFBUY.VRTQTB01
Function FB0WS09()
  ;
  ;
  try
    call "IO4620" ("S ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0WW00.XXXMSGNO = 21; /* Record has been deleted*/
      FB0WS23(); /* set up to display product*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS09"; /* Process name*/
  TA1REC.TA1LOC = "FETCH QTY TO BUY        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS09";
  exit stack;
  ;
end // end FB0WS09

// Update DFBUY.VRTQTB01
Function FB0WS10()
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4620" ("U ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS10 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS10"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS10

// Add DFBUY.VRTQTB01 row
Function FB0WS11()
  ;
   /* ------------------------------------------------------------*/
   /* This module add a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  FBFREC.ZZZCHGCT = 0;
  ;
  XX0XS01();
  ;
  FBFREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FBFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4620" ("A ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS11"; /* Process name*/
  TA1REC.TA1LOC = "ADD QTY TO BUY ROW   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS11";
  ;
  exit stack;
  ;
end // end FB0WS11

// Delete DFBUY.VRTQTB01
Function FB0WS12()
  ;
   /* ------------------------------------------------------------*/
   /* This module deletes a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  try
    call "IO4620" ("D ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS12 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS12"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS12

// open DFBUY.Vmfbuy01 cursor
Function FB0WS13()
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VMFBUY01*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW00.FB0WWMQC = "N"; /* Set merged qty cursor to no*/
  ;
  ;
  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS13"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS13";
  exit stack;
  ;
end // end FB0WS13

// Fetch DFBUY.VMFBUY01 row
Function FB0WS14()
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0WW00.FB0WWMQC = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if back return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS14"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS14";
  exit stack;
  ;
end // end FB0WS14

// Calculate merged minus rows
Function FB0WS15()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the new factory size quantities--use the new*/
   /* size quantities from the RTA minus row.*/
      /* New factory size qty = factory % * new rta size qty*/
      /* Save the rounded and unrounded new factory size qty.*/
      /* Round the new factory size qty to the nearest multiple*/
      /* of units per case from syclr.*/
      /* Calculate the difference between the rounded and*/
      /* unrounded factory size qty and save the variance.*/
      /* Keep track of the highest variance (stored in*/
      /* fb0wwhva) and the record index for that*/
      /* variance.  Any differences between the RTA size qty*/
      /* and the total factory size quantity must be reconciled*/
      /* by modifying the size field on the record with the*/
      /* ADDED CODE----IF THE ROUND FLAG ON THE VFBLAV01*/
      /* ROW IS A 'N' BYPASS THE ROUND CODE  AND ALL*/
      /* THE VARIANCE LOGIC.*/
   /* ------------------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX2 = 1;
  ;
  while (FB0WW00.FB0WWIX2 <= 40)
    ;
    if (FB0WW00.FB0WWROW == "M") /* Processing minus row*/
      FB0WW00.FB0WWNRQ = FB0WW04.FB0WWNRQ[FB0WWIX2];
    else /* Processing plus row*/
      FB0WW00.FB0WWNRQ = FB0WW05.FB0WWNRQ[FB0WWIX2];
    end
    ;
    if (FB0WW00.FB0WWNRQ != 0) /* There is a size qty*/
      ;
       /* Unrounded qty = new size qty  x factory percent*/
      ;
      FB0WW00.FY2MFGPC = FB0WW08.FY2MFGPC / 100;
      ;
      FB0WW00.FB0WWNUQ = mathLib.round(FB0WW00.FB0WWNRQ * FB0WW00.FY2MFGPC, -mathLib.decimals(FB0WW00.FB0WWNUQ));
      if (FBLREC.FBKRDFL == "N")
        ;
        FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW00.FB0WWNUQ;
      else
        ;
        if (PG2REC.SY1UNPCS == 0)
          PG2REC.SY1UNPCS = 12; /* Default value*/
        end
        ;
        FB0WW00.FB0WWDIV = FB0WW00.FB0WWNUQ / PG2REC.SY1UNPCS;
        ;
        if (FB0WW00.FB0WWREM == 0)
          FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW00.FB0WWNUQ;
        else
          FB0WW00.FB0WW-DECRMT-CNTR = 0;
          while (FB0WW00.FB0WWREM != 0)
            FB0WW00.FB0WWNUQ = FB0WW00.FB0WWNUQ - 1; /* Decrement qty*/
            FB0WW00.FB0WW-DECRMT-CNTR = FB0WW00.FB0WW-DECRMT-CNTR + 1;
            FB0WW00.FB0WWDIV = FB0WW00.FB0WWNUQ / PG2REC.SY1UNPCS;
          end
          ;
          if (FB0WW00.FB0WW-DECRMT-CNTR > 5)
            FB0WW00.FB0WWNUQ = FB0WW00.FB0WWNUQ + PG2REC.SY1UNPCS;
          end
          FB0WW08.FB0WWNRQ[FB0WWIX2] = FB0WW00.FB0WWNUQ;
        end
        ;
        ;
         /* calculate variance  (unrounded - rounded bucket)*/
        ;
        FB0WWDW1 = FB0WW00.FB0WWNUQ; /* decimal work field*/
        FB0WWDW2 = FB0WW08.FB0WWNRQ[FB0WWIX2]; /* decimal work field*/
        FB0WW00.FB0WWDW3 = FB0WW00.FB0WWDW1 - FB0WW00.FB0WWDW2;
        ;
         /* If the current variance is > than highest, move it*/
         /* to highest and move the record index value to the*/
         /* highest saved field. If currest variance is < than*/
         /* lowest, move to the lowest and move the record index*/
         /* value to the lowest saved field.*/
        ;
        if (FB0WW00.FB0WWDW3 > 0)
          if (FB0WW00.FB0WWDW3 > FB0WW00.FB0WWHVA[FB0WWIX2])
            FB0WW00.FB0WWHVA[FB0WWIX2] = FB0WW00.FB0WWDW3;
            FB0WW00.FB0WWSHX[FB0WWIX2] = FB0WW00.FB0WWIX1;
          end
        else
          if (FB0WW00.FB0WWDW3 < 0)
            if (FB0WW00.FB0WWDW3 < FB0WW00.FB0WWLVA[FB0WWIX2])
              FB0WW00.FB0WWLVA[FB0WWIX2] = FB0WW00.FB0WWDW3;
              FB0WW00.FB0WWSLX[FB0WWIX2] = FB0WW00.FB0WWIX1;
            end
          end
        end
      end
    end
    FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
  end
  ;
   /* ----------------------------------------------------*/
   /* Add the rounded total into a working storage array*/
   /* that will be used to compare with the*/
   /* RTA quantities---if there is a difference due to*/
   /* rounding it has to be adjusted.*/
   /* ----------------------------------------------------*/
  ;
  FB0WW00.FB0WWIX2 = 1;
  ;
  while (FB0WW00.FB0WWIX2 <= 40)
    ;
    if (FB0WW08.FB0WWNRQ[FB0WWIX2] != 0) /* If a merged size has qty*/
       /* Move new rounded merged qty to work field*/
      FB0WW00.FB0WWWF1 = FB0WW08.FB0WWNRQ[FB0WWIX2];
       /* Do summing into working storage minus or plus*/
       /* merged qty size total.*/
      if (FB0WW00.FB0WWROW == "M") /* Minus row*/
        FB0WW00.FB0WWMMQ[FB0WWIX2] = FB0WW00.FB0WWMMQ[FB0WWIX2] + FB0WWWF1;
      else /* Plus row*/
        FB0WW00.FB0WWMPQ[FB0WWIX2] = FB0WW00.FB0WWMPQ[FB0WWIX2] + FB0WWWF1;
      end
    end
    FB0WW00.FB0WWIX2 = FB0WW00.FB0WWIX2 + 1;
  end
  ;
  ;
end // end FB0WS15

// Close DFBUY.VFMBUY01 cursor
Function FB0WS16()
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS16"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS16";
  exit stack;
  ;
end // end FB0WS16

// Obtain unique DFBUY.VFMBUY01
Function FB0WS17()
   /* ------------------------------------------------------------*/
   /* Obtain unique dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      FB0WW00.XXXMSGNO = 20; /* Record has been updated*/
      FB0WS23(); /* set up to redisplay data*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Call rollback if bad return*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS17"; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN UNIQUE           ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS17";
  exit stack;
  ;
end // end FB0WS17

// Update DFBUY.VMFBUY01
Function FB0WS18()
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS18 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS18"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS18

// Add DFBUY.VMFBUY01 row
Function FB0WS19()
   /* ------------------------------------------------------------*/
   /* This module add a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  FB7REC.ZZZCHGCT = 0;
  ;
  XX0XS01();
  ;
  FB7REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS19"; /* Process name*/
  TA1REC.TA1LOC = "ADD QTY TO BUY ROW   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS19";
  exit stack;
  ;
end // end FB0WS19

// Delete DFBUY.VFBUYB01
Function FB0WS20()
   /* ------------------------------------------------------------*/
   /* This module deletes a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  ;
  try
    call "IO3490" ("D2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS20 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBUYB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS20"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS20

// Obtain unique DFBUY.VFQTBS01
Function FB0WS21()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain unique DFBUY.VFQTBS01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS21"; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN UNIQUE           ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS21";
  exit stack;
  ;
end // end FB0WS21

// Update DFBUY.VFQTBS01
Function FB0WS22()
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS22 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS22"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS22

// Set up to display to new prod
Function FB0WS23()
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* Product key has changed--and no errors. Set up*/
   /* to display new product.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0WW00.XXXMSGNO == 20) /* Record updated*/
    set FB0WW00 empty;
    FB0WW00.XXXMSGNO = 20;
  else
    if (FB0WW00.XXXMSGNO == 21) /* Record deleted*/
      set FB0WW00 empty;
      FB0WW00.XXXMSGNO = 21;
    else
      set FB0WW00 empty;
    end
  end
  ;
  set FB0WW01 empty;
  set FB0WW02 empty;
  set FB0WW03 empty;
  set FB0WW04 empty;
  set FB0WW05 empty;
  set FB0WW06 empty;
  set FB0WW07 empty;
  set FB0WW08 empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  ;
  FB0WW01.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW01.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW01.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW01.XDMCD = FB0WM010.XDMCD;
  FB0WW01.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0WW01.SY2CLRAB = PG2REC.SY2CLRAB;
  ;
  ;
  FB0WW00.FB0WWRDF = "Y"; /* Request for data flag*/
  FB0WW00.FB0WWTSL = 4019; /* Temp storage length*/
  FB0WW00.FB0WWMAX = 11; /* Max lines per page*/
  FB0WW00.FB0WWTSP = 1; /* Temp storage page request*/
  ;
  set FBFREC empty;
  ;
  FBFREC.SY1STNBR = FB0WM010.SY1STNBR;
  FB0WW00.SY1STNBR = FB0WM010.SY1STNBR;
  FBFREC.SY2CLRID = FB0WM010.SY2CLRID;
  FB0WW00.SY2CLRID = FB0WM010.SY2CLRID;
  FBFREC.XDMCD = FB0WM010.XDMCD;
  FB0WW00.XDMCD = FB0WM010.XDMCD;
  FB0WW00.FB0WWBDT = FB0WM010.FB0WMBDT;
  FB0WW00.FB0WWBYM = FB0WM010.FB0WMBDT;
  ;
  set FB0WM010 empty;
  ;
  FB0WM010.SY1STNBR = FB0WW01.SY1STNBR;
  FB0WM010.SY2CLRID = FB0WW01.SY2CLRID;
  FB0WM010.XDMCD = FB0WW01.XDMCD;
  FB0WM010.FB0WMBDT = FB0WW01.FB0WWBDT;
  ;
  FB0WW00.FB0WWFYY = FB0WW00.FB0WWBYY;
  FB0WW00.FB0WWFMM = FB0WW00.FB0WWBMM;
  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
  if (FB0WW00.FB0WWFYY > 60)
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
    FB0WW00.FB0WWFCT = 19;
  /*  */
  /* ************************* Y2K IN BEGIN *********************************/
  /*  */
  else
    FB0WW00.FB0WWFCT = 20;
  end
  /*  */
  /* ************************* Y2K IN END ***********************************/
  /*  */
  FB0WW00.FB0WWFDD = 01;
  FBFREC.FB8BUYDT = FB0WW00.FB0WWFDT;
  FB0WW00.FB8BUYDT = FB0WW00.FB0WWFDT;
  ;
  ;
  FB0WS01(); /* Load item count table*/
  ;
  exit stack;
  ;
  ;
end // end FB0WS23

// Obtain unique DFBUY.VRTQTB01
Function FB0WS24()
  ;
  ;
  try
    call "IO4620" ("S ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS24"; /* Process name*/
  TA1REC.TA1LOC = "FETCH QTY TO BUY        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS24";
  exit stack;
  ;
end // end FB0WS24

// Update DFBUY.VMFBUY01
Function FB0WS25()
  ;
   /* ------------------------------------------------------------*/
   /* This module inserts a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  FB7REC.ZZZCHGCT = 0;
  XX0XS01();
  FB7REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS25 "; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS25"; /* Process name*/
  ;
  exit stack;
  ;
end // end FB0WS25

// Obtain Vsuser01 row
Function FB0WS26()
  ;
   /* -------------------------------------------------*/
    /* Format key*/
   /* -------------------------------------------------*/
  ;
  set PG1REC empty;
  ;
  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/
  if (FBXREC.CAUSERID != " ")
    PG1REC.XXXUSER = FBXREC.CAUSERID; /* User id*/
  else
    PG1REC.XXXUSER = COMMAREA.CAUSERID; /* User id*/
  end
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0WW00.FB0WWISF = "Y"; /* Invalid scheduler*/
      return;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS26"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS26";
  exit stack;
  ;
  ;
end // end FB0WS26

// Obtain VFSCTL01 row
Function FB0WS27()
  ;
   /* -------------------------------------------------*/
   /* Initialize record--and format key*/
  ;
   /* -------------------------------------------------*/
  ;
  set FBMREC empty;
  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;
  ;
  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB0WW00.FB0WWISF = "Y";
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS27"; /* Process name*/
  TA1REC.TA1LOC = "FETCH FOOTWEAR SCHEDULER";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS27";
  exit stack;
  ;
end // end FB0WS27

// Obtain control record
Function FB0WS28()
  ;
  set FB9REC empty;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS28"; /* Process name*/
  TA1REC.TA1LOC = "FETCH CONTROL RECORD    ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS28";
  exit stack;
  ;
end // end FB0WS28

// Obtain Vfblav01 row
Function FB0WS29()
  ;
  set FBLREC empty;
  FBLREC.SY1STNBR = FB0WW01.SY1STNBR;
  FBLREC.SY2CLRID = FB0WW01.SY2CLRID;
  FBLREC.XDMCD = FB0WW01.XDMCD;
  FBLREC.XQACD = "01";
  FBLREC.XPGCD = "00";
  FBLREC.XUMCD = "01";
  FBLREC.XWHCD = "02";
  ;
  FBLREC.FB8BUYDT = FB0WW00.FB0WWBDT;
  ;
  /*  */
  /* ******************************* Y2K OUT BEGIN **************************/
  /*  */
  /* CALL IO4680 'S ',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
  /*  */
  /* ******************************* Y2K OUT END ****************************/
  /*  */
  /*  */
  /* ******************************* Y2K IN BEGIN ***************************/
  /*  */
  try
    call "VFBLAV02" ("S ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  /*  */
  /* ******************************* Y2K IN END *****************************/
  /*  */
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0WS29"; /* Process name*/
  TA1REC.TA1LOC = "FETCH CONTROL RECORD    ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0WM010.XXXPRCNM = "FB0WS29";
  exit stack;
  ;
end // end FB0WS29

//*** RECORD=FB0WW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0WW00 type basicRecord
  5 * char(2410) ; 
    10 FB0WWTSL FB0WWTSL ; 
    10 FB0WWRDF FB0WWRDF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0WWTSP FB0WWTSP ; 
    10 FB0WWQBC FB0WWQBC ; 
    10 FB0WWMQC FB0WWMQC ; 
    10 FB0WWKEF FB0WWKEF ; 
    10 FB0WWNEF FB0WWNEF ; 
    10 FB0WWADF FB0WWADF ; 
    10 FB0WWAFF FB0WWAFF ; 
    10 FB0WWFCF FB0WWFCF ; 
    10 FB0WWROW FB0WWROW ; 
    10 FB0WWCXF FB0WWCXF ; 
    10 FB0WWWHF FB0WWWHF ; 
    10 FB0WWPCL FB0WWPCL ; 
    10 FB0WWRCF FB0WWRCF ; 
    10 FB0WWFPF FB0WWFPF ; 
    10 FB0WWISF FB0WWISF ; 
    10 FB0WWLCT FB0WWLCT ; 
    10 FB0WWCNT FB0WWCNT ; 
    10 FB0WWMFY FB0WWMFY ; 
    10 FB0WWCTP FB0WWCTP ; 
    10 FB0WWCDC FB0WWCDC ; 
    10 FB0WWCTF FB0WWCTF ; 
    10 FB0WWCTT FB0WWCTT ; 
    10 FB0WWWPC FB0WWWPC ; 
    10 FB0WWPCH FB0WWPCH ; 
    10 PC2CUXID PC2CUXID [30] ; 
    10 OP1PARTN OP1PARTN [30] ; 
    10 OP1CUOID OP1CUOID [30] ; 
    10 OP1NORID OP1NORID [30] ; 
    10 XWHCD XWHCD [30] ; 
    10 FB0WWDCT FB0WWDCT [30] ; 
    10 FB0WWDTQ FB0WWDTQ [30] ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 FB0WWHVA FB0WWHVA [40] ; 
    10 FB0WWLVA FB0WWLVA [40] ; 
    10 FB0WWNUQ FB0WWNUQ ; 
    10 FB0WWNQV FB0WWNQV ; 
    10 FB0WWNRQ FB0WWNRQ ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 FB0WWFHP FB0WWFHP ; 
    10 * char(1) ; 
    10 FB0WWCWH FB0WWCWH ; 
    10 FB0WWSXF FB0WWSXF ; 
    10 FB0WWPA2 FB0WWPA2 ; 
    10 FB0WWCU2 FB0WWCU2 ; 
    10 FB0WWNO2 FB0WWNO2 ; 
    10 FB0WWSWH FB0WWSWH ; 
    10 FB0WWSCF FB0WWSCF ; 
    10 FB0WWPAR FB0WWPAR ; 
    10 FB0WWCUO FB0WWCUO ; 
    10 FB0WWNOR FB0WWNOR ; 
    10 FB0WWOSQ FB0WWOSQ [40] ; 
    10 FB0WWNSQ FB0WWNSQ [40] ; 
    10 FB0WWMMQ FB0WWMMQ [40] ; 
    10 FB0WWMPQ FB0WWMPQ [40] ; 
    10 FB0WWSWF FB0WWSWF [40] ; 
    10 FB0WWUQT FB0WWUQT ; 
    10 FB0WWDIV FB0WWDIV ; 
      15 FB0WWINT FB0WWINT ; 
      15 FB0WWREM FB0WWREM ; 
    10 FB0WWNMT FB0WWNMT ; 
    10 FB0WWNPT FB0WWNPT ; 
    10 FB0WWNPP FB0WWNPP ; 
      15 FB0WWNPI FB0WWNPI ; 
      15 FB0WWNPD FB0WWNPD ; 
    10 FB0WWNMP FB0WWNMP ; 
      15 FB0WWNMI FB0WWNMI ; 
      15 FB0WWNMD FB0WWNMD ; 
    10 FB0WWCNP FB0WWCNP [3] ; 
    10 FB0WWFDT FB0WWFDT ; 
      15 FB0WWFCT FB0WWFCT ; 
      15 FB0WWBYM FB0WWBYM ; 
        20 FB0WWFYY FB0WWFYY ; 
        20 FB0WWFMM FB0WWFMM ; 
      15 FB0WWFDD FB0WWFDD ; 
    10 FB0WWYMD FB0WWYMD ; 
      15 FB0WWYY FB0WWYY ; 
      15 FB0WWMM FB0WWMM ; 
      15 FB0WWDD FB0WWDD ; 
    10 FB0WWBDT FB0WWBDT ; 
      15 FB0WWBYY FB0WWBYY ; 
      15 FB0WWBMM FB0WWBMM ; 
    10 FB0WWRJF FB0WWRJF ; 
    10 FB0WWBJF FB0WWBJF ; 
    10 FB0WWDRD FB0WWDRD ; 
      15 FB0WWDMM FB0WWDMM ; 
      15 FB0WWDDD FB0WWDDD ; 
      15 FB0WWDYY FB0WWDYY ; 
    10 TA1TBLKE TA1TBLKE ; 
    10 FB0WWIXM FB0WWIXM ; 
    10 FB0WWDIX FB0WWDIX ; 
    10 FB0WWRIX FB0WWRIX ; 
    10 FB0WWIX1 FB0WWIX1 ; 
    10 FB0WWIX2 FB0WWIX2 ; 
    10 FB0WWIX3 FB0WWIX3 ; 
    10 FB0WWIX4 FB0WWIX4 ; 
    10 FB0WWFIX FB0WWFIX ; 
    10 FB0WWTIX FB0WWTIX ; 
    10 FB0WWSTI FB0WWSTI ; 
    10 FB0WWSLX FB0WWSLX [40] ; 
    10 FB0WWSHX FB0WWSHX [40] ; 
    10 FB0WWMML FB0WWMML ; 
    10 FB0WWMPL FB0WWMPL ; 
    10 FB0WWHPI FB0WWHPI ; 
    10 FB0WWIXT FB0WWIXT ; 
    10 FB0WWMAX FB0WWMAX ; 
    10 FB0WWDMX FB0WWDMX ; 
    10 FB0WWWF1 FB0WWWF1 ; 
    10 FB0WWWF2 FB0WWWF2 ; 
    10 FB0WWWF3 FB0WWWF3 ; 
    10 FB0WWWF4 FB0WWWF4 ; 
    10 FB0WWDW1 FB0WWDW1 ; 
    10 FB0WWDW2 FB0WWDW2 ; 
    10 FB0WWDW3 FB0WWDW3 ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB0WW-DECRMT-CNTR FB0WW-DECRMT-CNTR ; 
end // end FB0WW00

//*** RECORD=FB0WW01 ****
// Fb0wm010 map heading storage record
// ***********************
Record FB0WW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FB0WWBDT FB0WWBDT ; 
  10 FB0WWFY1 FB0WWFY1 [4] ; 
  10 FB0WWFY2 FB0WWFY2 [4] ; 
  10 FB0WWFY3 FB0WWFY3 [4] ; 
  10 FB0WWFY4 FB0WWFY4 [4] ; 
  10 FB0WWFY5 FB0WWFY5 [4] ; 
  10 FB0WWHCD FB0WWHCD [3] ; 
  10 FB0WWHPC FB0WWHPC [3] ; 
  10 FB0WWEWH FB0WWEWH ; 
  10 FB0WWEXF FB0WWEXF ; 
  10 FB0WWRTM FB0WWRTM ; 
  10 FB0WWRTD FB0WWRTD ; 
  10 FB0WWRTY FB0WWRTY ; 
  10 * char(3) ; 
end // end FB0WW01

//*** RECORD=FB0WW02 ****
// FB0W temporary storage detail record
// ***********************
Record FB0WW02 type basicRecord
  5 FB0WW02G FB0WW02G ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB0WWRDT FB0WWRDT ; 
      15 FB0WWSMM FB0WWSMM ; 
      15 FB0WWSDD FB0WWSDD ; 
      15 FB0WWSYY FB0WWSYY ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB0WWTQB FB0WWTQB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 FB0WWNRQ FB0WWNRQ [40] ; 
    10 FB0WWNRP FB0WWNRP ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW02

//*** RECORD=FB0WW03 ****
// FB0W temporary storage page record
// ***********************
Record FB0WW03 type basicRecord
  5 FB0WW03G FB0WW03G ; 
    10 FB0WWTSL FB0WWTSL ; 
    10 FB0WW03R FB0WW03R [11] ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 FB7RTADT FB7RTADT ; 
      15 FB0WWRDT FB0WWRDT ; 
      15 FB7RTAPC FB7RTAPC ; 
      15 FB0WW03D FB0WW03D ; 
end // end FB0WW03

//*** RECORD=FB0WW04 ****
// FB0W minus line detail work record
// ***********************
Record FB0WW04 type basicRecord
  5 FB0WW04G FB0WW04G ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB0WWSDT FB0WWSDT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB0WWTQB FB0WWTQB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 FB0WWNRQ FB0WWNRQ [40] ; 
    10 FB0WWNRP FB0WWNRP ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW04

//*** RECORD=FB0WW05 ****
// FB0W plus line detail work record
// ***********************
Record FB0WW05 type basicRecord
  5 FB0WW05G FB0WW05G ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB0WWSDT FB0WWSDT ; 
    10 FB0WWTQB FB0WWTQB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 FB0WWNRQ FB0WWNRQ [40] ; 
    10 FB0WWNRP FB0WWNRP ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW05

//*** RECORD=FB0WW06 ****
// FB0W merged qty to buy minus record table
// ***********************
Record FB0WW06 type basicRecord
  5 FB0WW06G FB0WW06G ; 
    10 FB0WW06R FB0WW06R [5] ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 FB7RTADT FB7RTADT ; 
      15 FY2MFGPC FY2MFGPC ; 
      15 FB0WW06D FB0WW06D ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW06

//*** RECORD=FB0WW07 ****
// FB0W merged qty to buy plus record table
// ***********************
Record FB0WW07 type basicRecord
  5 FB0WW07G FB0WW07G ; 
    10 FB0WW07R FB0WW07R [5] ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 FB7RTADT FB7RTADT ; 
      15 FY2MFGPC FY2MFGPC ; 
      15 FB0WW07D FB0WW07D ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW07

//*** RECORD=FB0WW08 ****
// FB0W merged qty to buy redefined record
// ***********************
Record FB0WW08 type basicRecord
  5 FB0WW08G FB0WW08G ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 FB7RTADT FB7RTADT ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 FB7QTB FB7QTB [40] ; 
    10 FB0WWNRQ FB0WWNRQ [40] ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB0WW08

// Decrement counter
DataItem FB0WW-DECRMT-CNTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0WW02G char(365)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remainder of record data
DataItem FB0WW03D char(329)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW03G char(4019)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record data
DataItem FB0WW03R char(365)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW04G char(358)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW05G char(358)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// All the size arrays
DataItem FB0WW06D char(320)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW06G char(1735)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW06R char(347)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW07D char(320)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW07G char(1735)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW07R char(347)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0WW08G char(347)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add flag
DataItem FB0WWADF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Application function flag
DataItem FB0WWAFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date
DataItem FB0WWBDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date julian format
DataItem FB0WWBJF num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB0WWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date yymm
DataItem FB0WWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FB0WWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count RTA date changes
DataItem FB0WWCDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calc number of size pages
DataItem FB0WWCNP num(3,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select field counter
DataItem FB0WWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count from select codes
DataItem FB0WWCTF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count map % fields changed
DataItem FB0WWCTP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count to select codes
DataItem FB0WWCTT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved cust ord id
DataItem FB0WWCU2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save cust ord id
DataItem FB0WWCUO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// changed warehouse
DataItem FB0WWCWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref found flag
DataItem FB0WWCXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item Destination counter
DataItem FB0WWDCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FB0WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA day
DataItem FB0WWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size dividend
DataItem FB0WWDIV num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// destination index
DataItem FB0WWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA month
DataItem FB0WWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max lines per map
DataItem FB0WWDMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat detail RTA date
DataItem FB0WWDRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Destination total qty
DataItem FB0WWDTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work field 1
DataItem FB0WWDW1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work field 2
DataItem FB0WWDW2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal work field 3
DataItem FB0WWDW3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA year
DataItem FB0WWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entered warehouse
DataItem FB0WWEWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map entered cust xref
DataItem FB0WWEXF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field changed flag
DataItem FB0WWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat century
DataItem FB0WWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB0WWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB0WWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory highest percent
DataItem FB0WWFHP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from index
DataItem FB0WWFIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat month
DataItem FB0WWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fast path flag
DataItem FB0WWFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory 1
DataItem FB0WWFY1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory 2
DataItem FB0WWFY2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory 3
DataItem FB0WWFY3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory 4
DataItem FB0WWFY4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Factory 5
DataItem FB0WWFY5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat year
DataItem FB0WWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map heading warehouse code
DataItem FB0WWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map heading warehouse pct
DataItem FB0WWHPC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// highest fcty percent index
DataItem FB0WWHPI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save highest variance
DataItem FB0WWHVA decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// integer number
DataItem FB0WWINT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invalid scheduler flag
DataItem FB0WWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB0WWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB0WWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FB0WWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 4
DataItem FB0WWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB0WWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage index
DataItem FB0WWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key data entered flag
DataItem FB0WWKEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line counter
DataItem FB0WWLCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save lowest variance
DataItem FB0WWLVA decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max lines per map
DataItem FB0WWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max number of factories
DataItem FB0WWMFY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FB0WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minus line map index
DataItem FB0WWMML smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Merged qty minus total
DataItem FB0WWMMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// plus line map index
DataItem FB0WWMPL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Merged qty plus  total
DataItem FB0WWMPQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Merged qty cursor flag
DataItem FB0WWMQC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key data entered flag
DataItem FB0WWNEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new minus percent decimal
DataItem FB0WWNMD num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new minus percent integer
DataItem FB0WWNMI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new minus percent
DataItem FB0WWNMP num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new minus total
DataItem FB0WWNMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved nike ord id
DataItem FB0WWNO2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save nike ord id
DataItem FB0WWNOR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new plus percent decimal
DataItem FB0WWNPD num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new plus percent integer
DataItem FB0WWNPI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new plus percent
DataItem FB0WWNPP num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new plus total
DataItem FB0WWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New qty by size variance
DataItem FB0WWNQV decimal(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New rta percent
DataItem FB0WWNRP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New qty by size(rounded)
DataItem FB0WWNRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new size quantity table
DataItem FB0WWNSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New qty by size (unrounded
DataItem FB0WWNUQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old size quantity table
DataItem FB0WWOSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved part char
DataItem FB0WWPA2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save part char
DataItem FB0WWPAR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent of change
DataItem FB0WWPCH num(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent calculated flag
DataItem FB0WWPCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quantity buy cursor flag
DataItem FB0WWQBC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA date changed flag
DataItem FB0WWRCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB0WWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA date
DataItem FB0WWRDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// decimal number
DataItem FB0WWREM num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RTA index
DataItem FB0WWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RTA date julian format
DataItem FB0WWRJF num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Merged qty plus or minus flag
DataItem FB0WWROW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map entered rta day
DataItem FB0WWRTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map entered rta month
DataItem FB0WWRTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map entered rta year
DataItem FB0WWRTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save cust xref
DataItem FB0WWSCF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen date day
DataItem FB0WWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen date
DataItem FB0WWSDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save highest record index
DataItem FB0WWSHX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save lowest  record index
DataItem FB0WWSLX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen date month
DataItem FB0WWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style index
DataItem FB0WWSTI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size work array
DataItem FB0WWSWF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save warehouse
DataItem FB0WWSWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved cust xref
DataItem FB0WWSXF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen date year
DataItem FB0WWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to index
DataItem FB0WWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty to buy
DataItem FB0WWTQB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FB0WWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB0WWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New unrounded qty total
DataItem FB0WWUQT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FB0WWWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB0WWWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 3
DataItem FB0WWWF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 4
DataItem FB0WWWF4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse found flag
DataItem FB0WWWHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field
DataItem FB0WWWPC num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMDD Date
DataItem FB0WWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FB0WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

