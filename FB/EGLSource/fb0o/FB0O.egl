package fb0o;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import fb.common.FB1CMNT;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB5FRMDT;
import fb.common.FB5REC;
import fb.common.FB5TODT;
import fb.common.FBWREC;
import ff.common.FF00ENU;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0O ****
// The transferred data is verified to be complete and
// correct. The requested table row is selected and the data
// is formatted and displayed to the user.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/06/89  cnewma  New application.
// FB-306   02/03/93  jmclau  Allow capability to display 100%
//                            in the size percent fields of the
//                            map.
//          10/02/93  ldeluh  Replace xsexit with xsfbs01
//                            which then calls xsexit.
// *********************
Program FB0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0OW00 FB0OW00; // record
  FB0OW01 FB0OW01; // record
  FB0OW02 FB0OW02; // record
  FB0OW03 FB0OW03; // record
  FB1REC FB1REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use FB0OM.FB0OM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FB0OM010 initial; /* M001 input/output*/
    set FB0OW00 empty; /* Working storage*/
    set FB0OW01 empty; /* header display storage*/
    set FB0OW02 empty; /* page one display storage*/
    set FB0OW03 empty; /* page two display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FB0OW00.FB1INSEQ = FBWREC.FB1INSEQ; /* internal sequence nbr*/
    FB0OW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    FB0OW01.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
    FB0OW01.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
    FB0OW01.XDMCD = FBWREC.XDMCD; /* dimension code*/

    if (FBWREC.SY1STNBR != " " /* gpc code*/
     && FBWREC.SY2CLRID != " " /* color id*/
     && FBWREC.XDMCD != " "    /* dimension code*/
     && FBWREC.XQACD != " "    /* quality code*/
     && FBWREC.PC2INSEG != " " /* spec difference code*/
     && FBWREC.XSACD != " "    /* shade code*/
     && FBWREC.XPGCD != " "    /* packing type code*/
     && FBWREC.XUMCD != " "    /* unit of measure code*/
     && FBWREC.FB1INSEQ != 0)  /* internal sequence number*/
      FB0OW00.FB0OWSPR = "P"; /* indicate valid product*/
    else
      FB0OW00.FB0OWSPR = "I"; /* indicate invalid product*/
      converseLib.validationFailed(42); /* 'no product data'*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0O001; /* Converse the main process*/


    FB0O001: FB0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0O001; /* Converse the main process*/


  end // end main
end // end FB0O

// Inquire/maintain a table row
Function FB0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FB0O100(); /* Obtain the data to display*/

  FB0O200(); /* Format and display the map*/

  FB0O300(); /* Check attention identifier*/

  FB0O400(); /* Reset fields to normal intensity*/

  FB0O500(); /* Verify the entered data*/

  FB0O600(); /* Process valid input request*/


end // end FB0O001

// Obtain the data to display
Function FB0O100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* data should not be re-obtained*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWSDR == "N") /* do not re-obtain data*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* get selection criteria*/
   /* ------------------------------------------------------------*/

  FB0O110(); /* get selection criteria*/

   /* ------------------------------------------------------------*/
   /* get region data*/
   /* ------------------------------------------------------------*/

  FB0O120(); /* get region data*/


end // end FB0O100

// get selection criteria
Function FB0O110()
  FB0OW00.FB0OWMAP = "PG1"; /* set switch to display first page*/

   /* ------------------------------------------------------------*/
   /* obtain header data*/
   /* ------------------------------------------------------------*/

  FB0O111(); /* Obtain header data*/

   /* ------------------------------------------------------------*/
   /* obtain need dates*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select and set cursor from table  - vseldt01*/
   /* ------------------------------------------------------------*/

  FB0O112(); /* Select and set cursor*/

   /* ------------------------------------------------------------*/
   /* Get the next row to display from the table - vseldt01*/
   /* ------------------------------------------------------------*/

  while (FB0OW00.FB0OWDCF != "Y")
    FB0O113(); /* Get next table row*/
  end

   /* ------------------------------------------------------------*/
   /* if no date table rows found - abort application*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWFD == " ") /* no record read*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
    FB0OM010.XXXMODID = "110"; /* Module identification*/
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "TABLE ROW NOT FOUND ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
    TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor from table   - vseldt01*/
   /* ------------------------------------------------------------*/

  FB0O114(); /* close cursor*/


end // end FB0O110

// obtain header data
Function FB0O111()
   /* ------------------------------------------------------------*/
   /* Initialize row storage area*/
   /* Format record key*/
   /* ------------------------------------------------------------*/

  set FB1REC empty; /* Initialize row storage*/

  FB1REC.FB1INSEQ = FB0OW00.FB1INSEQ; /* initialize seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select requested row from table - vselhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select table row*/

   /* ------------------------------------------------------------*/
   /* If sucessful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      FB0OW01.FB1CMNT = FB1REC.FB1CMNT; /* comments*/

      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(11); /* 'RECORD NOT ON DATABASE'*/

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/

          converseLib.validationFailed(19); /* 'RESOURCES UNAVAILABLE'*/
          FB0OW00.FB0OWRNA = "Y"; /* reSOURCES UNAVAILABLE switch*/
          TA1REC.TA1FUNC = "POST"; /* termination function*/

        else
          TA1REC.TA1FUNC = "RETN"; /* termination function*/
          converseLib.validationFailed(01); /* 'ERROR - PLEASE NOTIFY PROGRAMMING'*/
        end
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  FB0OM010.XXXMODID = "111"; /* module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "GET VSELHD01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end FB0O111

// select set date table cursor
Function FB0O112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set FB5REC empty; /* clear row storage area*/
  FB0OW00.FB0OWDCF = "N"; /* End of vseldt01 flag*/


   /* ------------------------------------------------------------*/
   /* Format the key with saved sequence number from vcurve01 or*/
   /* vselhd01.*/
   /* ------------------------------------------------------------*/

  FB5REC.FB1INSEQ = FB0OW00.FB1INSEQ;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table vseldt01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0OM010.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    FB0OW00.FB0OWRNA = "Y"; /* Resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSELDT01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O112

// get next row date table
Function FB0O113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FB0OW00.FB0OWFD = "Y"; /* record was found*/
      FB0OW01.FB0OWFDT = FB5REC.FB5FRMDT; /* save from date*/
      FB0OW01.FB0OWTDT = FB5REC.FB5TODT; /* save to date*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0OW00.FB0OWDCF = "Y"; /* indicate end of cursor*/

      end
    end
    return; /* Return to previous process*/
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      FB0OW00.FB0OWRNA = "Y"; /* resources unavailable switch*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0OM010.XXXMODID = "113"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O113

// close date table cursor
Function FB0O114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0OM010.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O114

// get curve data
Function FB0O120()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FB4REC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/

  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* sequence number*/
  FB4REC.XGPCD = FBWREC.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FBWREC.SY2CLRID; /* color*/
  FB4REC.XDMCD = FBWREC.XDMCD; /* dimension*/
  FB4REC.XQACD = FBWREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBWREC.PC2INSEG; /* spec difference code*/
  FB4REC.XSACD = FBWREC.XSACD; /* shade code*/
  FB4REC.XPGCD = FBWREC.XPGCD; /* packaging type code*/
  FB4REC.XUMCD = FBWREC.XUMCD; /* unit of measure code*/

  FB4REC.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/

   /* ------------------------------------------------------------*/
   /* Get product descriptions*/
   /* ------------------------------------------------------------*/

  FB0O124(); /* get product descriptions*/

   /* ------------------------------------------------------------*/
   /* IO to select and open vcurve01*/
   /* ------------------------------------------------------------*/

  FB0O121(); /* Select set vcurve01 cursor*/

   /* ------------------------------------------------------------*/
   /* Select next vcurve01 row*/
   /* ------------------------------------------------------------*/

  FB0OW00.FB0OWIXM = 0; /* initialize index*/
  FB0OW00.FB0OWP2D = "N"; /* reset switch*/

  while (FB0OW00.FB0OWDCF != "Y") /* Until end vcurve01 cursor*/
    FB0O122(); /* Fetch next vcurve01 rows*/
  end

   /* ------------------------------------------------------------*/
   /* If no data to display, return a message to the user.*/
   /* Otherwise get all the vcurve01 data.*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWIXM < 0) /* No vcurve01 data available*/
    FB0OM010.XXXMODID = "120"; /* module identification*/
    converseLib.validationFailed(1); /* No data found , abort application*/
    exit stack; /* Return to flow*/
  end

  if (FB0OW00.FB0OWIXM <= 4) /* no more than 3 rows found*/
     /* next sentence*/
  else
    FB0OM010.XXXMODID = "120"; /* module identification*/
    converseLib.validationFailed(18); /* 'No data to display'*/
    exit stack; /* Return to flow*/
  end

   /* ------------------------------------------------------------*/
   /* IO to close vcurve01 set*/
   /* ------------------------------------------------------------*/

  FB0O123(); /* close vcurve01 cursor*/


end // end FB0O120

// select set curve table cursor
Function FB0O121()
  FB0OW00.FB0OWDCF = "N"; /* end of vcurve01 flag*/
   /* ------------------------------------------------------------*/
   /* select set the vcurve01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("S2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0OWIXM = 0;

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the*/
   /* user. Otherwise, indicate a system error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0OM010.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O121

// get next row curve table
Function FB0O122()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 rows. Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("N2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0OW00.FB0OWIXM = FB0OW00.FB0OWIXM + 1; /* increment index*/
      FB0OW00.FB1INSEQ = FB4REC.FB1INSEQ; /* sequence number*/
      FB0O125(); /* get size data*/
      FB0O126(); /* load data*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FB0OW00.FB0OWDCF = "Y"; /* Indicate vcurve01 end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0OM010.XXXMODID = "122"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O122

// close curve table cursor
Function FB0O123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("C2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0OM010.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0OM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0O123

// get product descriptions
Function FB0O124()
   /* ------------------------------------------------------------*/
   /* Obtain style and color description*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = FB4REC.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FB4REC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FB4REC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FB4REC.XDMCD; /* dimension code*/

  XSPG202();

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0OW01.SY2CLRAB = PG2REC.SY2CLRAB; /* color desc*/
      FB0OW01.SY1STYNM = PG2REC.SY1SSTNM; /* style name*/

      FB0OW01.XDVCD = PG2REC.XDVCD1; /* save div for size lookup*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0OW01.SY2CLRAB = "UNKNOWN "; /* color desc*/
        FB0OW01.SY1STYNM = "UNKNOWN "; /* style name*/
        return;
      end
    end
  end


end // end FB0O124

// get size data
Function FB0O125()
   /* ------------------------------------------------------------*/
   /* Obtain valid sizes*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.PG3XDVCD = FB0OW01.XDVCD; /* division code*/
  PG3REC.XGPCD = FB4REC.XGPCD; /* gpc*/
  PG3REC.SY1STNBR = FB4REC.SY1STNBR; /* style number*/
  PG3REC.SY2CLRID = FB4REC.SY2CLRID; /* color id*/
  PG3REC.XDMCD = FB4REC.XDMCD; /* dimension code*/
  PG3REC.XQACD = FB4REC.XQACD; /* quality code*/
  PG3REC.PG3FUNCD = "PC"; /* pg3 function code*/
  PG3REC.PG3DATFM = "N"; /* pg3 data format*/
  TA1REC.TA1PGMNM = "FB0O12A"; /* module identification*/

  XSPG301();

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end


end // end FB0O125

// load data
Function FB0O126()
   /* ------------------------------------------------------------*/
   /* load data to working storage*/
   /* ------------------------------------------------------------*/

  FB0OW00.FB0OWBNK = "Y"; /* initialize switch*/
  FB0OW00.FB0OWIX1 = 1; /* initialize index*/
  FB0OW00.FB0OWIX2 = 1; /* initialize index*/
  FB0OW00.FB0OWIX3 = 1; /* initialize index*/

  FB0OW01.XWHCD[FB0OWIXM] = FB4REC.XWHCD; /* warehouse cd*/
  FB0OW01.FB4RGPCT[FB0OWIXM] = FB4REC.FB4RGPCT;
  if (FB4REC.XWHCD in XWHTBL.XWHCD)
    FB0OW01.XWHABRV[FB0OWIXM] = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  FB0OM010.FB4CRVNB = FB4REC.FB4CRVNB; /* curve number*/

  while (FB0OW00.FB0OWIX1 <= 40)
    if (FB4REC.FB4SZPCT[FB0OWIX1] == 0   /* size percent blank*/
     && PG3REC.SY4IDDSC[FB0OWIX1] == " " /* size description blank*/
     && FB0OW00.FB0OWBNK == "Y")         /* non-blank not found*/
      FB0OW00.FB0OWIX1 = FB0OW00.FB0OWIX1 + 1;

    else
      FB0OW00.FB0OWBNK = "N"; /* non-blank value found*/
      if (FB0OW00.FB0OWIX2 <= 28)
        FB0OS01(); /* move pg1 data to working storage*/
        FB0OW00.FB0OWIX1 = FB0OW00.FB0OWIX1 + 1;
        FB0OW00.FB0OWIX2 = FB0OW00.FB0OWIX2 + 1;
      else
        FB0OS02(); /* move pg2 data to working storage*/
        FB0OW00.FB0OWIX1 = FB0OW00.FB0OWIX1 + 1;
        FB0OW00.FB0OWIX3 = FB0OW00.FB0OWIX3 + 1;
      end
    end
  end


end // end FB0O126

// Format and converse the map
Function FB0O200()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (FB0OM010.XXXCURDT == 0) /* Map is not formatted*/
    FB0O210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* If data was requested, move data to the map.*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWMAP == "PG1")
    FB0O220(); /* move page 1 data to map*/
  else
    if (FB0OW00.FB0OWMAP == "PG2")
      FB0O230(); /* move page 2 data to map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0OM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0OM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0OM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set FB0OM010 alarm; /* Indicate sound alarm*/
  end

  converse FB0OM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0OM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0OM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0OM010.CAITEM; /* Application data*/


end // end FB0O200

// Format the display data
Function FB0O210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FB0OM010.FB1CMNT = FB0OW01.FB1CMNT; /* comments*/
  FB0OM010.FB0OMMM1 = FB0OW01.FB0OWFMM; /* from month*/
  FB0OM010.FB0OMYY1 = FB0OW01.FB0OWFYY; /* from year*/
  FB0OM010.FB0OMMM2 = FB0OW01.FB0OWTMM; /* to month*/
  FB0OM010.FB0OMYY2 = FB0OW01.FB0OWTYY; /* to year*/
  FB0OM010.SY1STNBR = FB0OW01.SY1STNBR; /* Style number*/
  FB0OM010.SY2CLRID = FB0OW01.SY2CLRID; /* Color identification*/
  FB0OM010.XDMCD = FB0OW01.XDMCD; /* Dimension code*/
  FB0OM010.SY1STYNM = FB0OW01.SY1STYNM; /* style name*/
  FB0OM010.SY2CLRAB = FB0OW01.SY2CLRAB; /* color name*/

  FB0OW00.FB0OWIX1 = 1;
  FB0OW00.FB0OWIXM = 1;

  while (FB0OW00.FB0OWIXM <= 3)
    FB0OM010.XWHABRV[FB0OWIXM] = FB0OW01.XWHABRV[FB0OWIXM];
    FB0OM010.FB4RGPCT[FB0OWIXM] = FB0OW01.FB4RGPCT[FB0OWIXM];
    FB0OW00.FB0OWIXM = FB0OW00.FB0OWIXM + 1;
  end


end // end FB0O210

// move page 1 data to map
Function FB0O220()
   /* ------------------------------------------------------------*/
   /* move page 1 data to map*/
   /* ------------------------------------------------------------*/

  FB0OW00.FB0OWIX1 = 1;

  while (FB0OW00.FB0OWIX1 <= 28)

    FB0OM010.FB0OMD1A[FB0OWIX1] = FB0OW02.FB0OWD1A[FB0OWIX1];
    FB0OM010.FB0OMC1A[FB0OWIX1] = FB0OW02.FB0OWC1A[FB0OWIX1];
    FB0OM010.FB0OMD1B[FB0OWIX1] = FB0OW02.FB0OWD1B[FB0OWIX1];
    FB0OM010.FB0OMC1B[FB0OWIX1] = FB0OW02.FB0OWC1B[FB0OWIX1];
    FB0OM010.FB0OMD1C[FB0OWIX1] = FB0OW02.FB0OWD1C[FB0OWIX1];
    FB0OM010.FB0OMC1C[FB0OWIX1] = FB0OW02.FB0OWC1C[FB0OWIX1];



    if (FB0OW02.FB0OWD1A[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1A[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1A[FB0OWIX1] protect, invisible;
    end
    if (FB0OW02.FB0OWD1B[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1B[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1B[FB0OWIX1] protect, invisible;
    end
    if (FB0OW02.FB0OWD1C[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1C[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1C[FB0OWIX1] protect, invisible;
    end

    FB0OW00.FB0OWIX1 = FB0OW00.FB0OWIX1 + 1;

  end

end // end FB0O220

// move page 2 data to map
Function FB0O230()
   /* ------------------------------------------------------------*/
   /* move page 2 data to map*/
   /* ------------------------------------------------------------*/

  FB0OW00.FB0OWIX1 = 1;

  while (FB0OW00.FB0OWIX1 <= 28)

    FB0OM010.FB0OMD1A[FB0OWIX1] = FB0OW03.FB0OWD2A[FB0OWIX1];
    FB0OM010.FB0OMC1A[FB0OWIX1] = FB0OW03.FB0OWC2A[FB0OWIX1];
    FB0OM010.FB0OMD1B[FB0OWIX1] = FB0OW03.FB0OWD2B[FB0OWIX1];
    FB0OM010.FB0OMC1B[FB0OWIX1] = FB0OW03.FB0OWC2B[FB0OWIX1];
    FB0OM010.FB0OMD1C[FB0OWIX1] = FB0OW03.FB0OWD2C[FB0OWIX1];
    FB0OM010.FB0OMC1C[FB0OWIX1] = FB0OW03.FB0OWC2C[FB0OWIX1];




    if (FB0OW02.FB0OWD1A[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1A[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1A[FB0OWIX1] protect, invisible;
    end
    if (FB0OW02.FB0OWD1B[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1B[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1B[FB0OWIX1] protect, invisible;
    end
    if (FB0OW02.FB0OWD1C[FB0OWIX1] == " "
     && FB0OW02.FB0OWC1C[FB0OWIX1] == 0)
      set FB0OM010.FB0OMC1C[FB0OWIX1] protect, invisible;
    end



    FB0OW00.FB0OWIX1 = FB0OW00.FB0OWIX1 + 1;

  end

end // end FB0O230

// Check attention identifier
Function FB0O300()
   /* ------------------------------------------------------------*/
   /* reset request for data switch*/
   /* ------------------------------------------------------------*/

  FB0OW00.FB0OWSDR = "Y"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFBS01();

    else

      converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
      FB0OM010.XXXMODID = "300"; /* module identification*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    FB0OM010.XXXMODID = "300"; /* Module identification*/
    set FB0OM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FB0O"; /* selection criteria*/
    XSFBS01();
    FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CAITEM = "FB0OM010"; /* Application find code*/
    COMMAREA.CATOAP = "GD01"; /* size/maint sel*/
    XSFBS01(); /* Exit to another application*/
    FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  else

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0D"; /* size/maint sel*/
      XSFBS01();
      FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else

      if (converseVar.eventKey is pf5) /* pf5 was pressed*/
        COMMAREA.CATOAP = "FY0M"; /* prod menu*/
        XSFBS01();
        FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
    end
  end

  if (converseVar.eventKey is pf7 /* scrolling requested*/
   || converseVar.eventKey is pf8) /* scrolling requested*/
    if (FB0OW00.FB0OWSPR != "I") /* product data not invalid*/
      FB0O310(); /* scroll data*/
    end
  end

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    if (FB0OW00.FB0OWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0P"; /* selection criteria inquiry*/
      XSFBS01();
      FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (FB0OW00.FB0OWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0N"; /* size percent inquiry*/
      XSFBS01();
      FB0OM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (FB0OW00.FB0OWRNA == "Y") /* resources previously unavailable*/
      /* next sentence*/
    else
      FB0OW00.FB0OWSDR = "N"; /* request for data switch set to 'n'*/
    end
    return;
  end

  FB0OM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3); /* 'pf key not supported'*/
  exit stack; /* return to show error msg*/


end // end FB0O300

// process scrolling request
Function FB0O310()
   /* ------------------------------------------------------------*/
   /* check  for scrolling request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FB0OW00.FB0OWSDR = "N"; /* do not re-obtain data*/
    if (FB0OW00.FB0OWMAP == "PG1") /* if page 1 data requested*/
      converseLib.validationFailed(6);
      FB0OM010.XXXMODID = "310";
    else
      FB0OW00.FB0OWMAP = "PG1"; /* request page 1 data switch*/
    end
    exit stack;
  end

  if (converseVar.eventKey is pf8)
    FB0OW00.FB0OWSDR = "N"; /* do not re-obtain data*/
    if (FB0OW00.FB0OWMAP == "PG2" /* if page 1 data requested*/
     || FB0OW00.FB0OWP2D == "N")  /* page two data not present*/
      converseLib.validationFailed(7);
      FB0OM010.XXXMODID = "310";
    else
      FB0OW00.FB0OWMAP = "PG2"; /* request page 1 data switch*/
    end
    exit stack;
  end


end // end FB0O310

// Reset highlighted fields
Function FB0O400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FB0OM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0OM010.CAITEM initialAttributes; /* Commarea application data*/

end // end FB0O400

// Verify the entered data
Function FB0O500()
   /* this application accepts no user entered data and therefore*/
   /* has no need to verify the entered data*/
end // end FB0O500

// Process valid input request
Function FB0O600()
   /* this application accepts no user entered data and therefore*/
   /* has no need to process an input request.*/
end // end FB0O600

// move page one data
Function FB0OS01()
   /* ------------------------------------------------------------*/
   /* move fields to working storage*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWIXM == 1) /* region number 1*/

    FB0OW02.FB0OWD1A[FB0OWIX2] = PG3REC.SY4IDDSC[FB0OWIX1];
    FB0OW02.FB0OWP1A[FB0OWIX2] = FB4REC.FB4SZPCT[FB0OWIX1];
    FB0OWFLD = FB0OW02.FB0OWP1A[FB0OWIX2] * FB0OW01.FB4RGPCT[FB0OWIXM];
    FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
    FB0OW02.FB0OWC1A[FB0OWIX2] = FB0OW00.FB0OWFLD;

  else

    if (FB0OW00.FB0OWIXM == 2) /* region number 2*/

      FB0OW02.FB0OWD1B[FB0OWIX2] = PG3REC.SY4IDDSC[FB0OWIX1];
      FB0OW02.FB0OWP1B[FB0OWIX2] = FB4REC.FB4SZPCT[FB0OWIX1];
      FB0OWFLD = FB0OW02.FB0OWP1B[FB0OWIX2] * FB0OW01.FB4RGPCT[FB0OWIXM];
      FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
      FB0OW02.FB0OWC1B[FB0OWIX2] = FB0OW00.FB0OWFLD;

    else

      if (FB0OW00.FB0OWIXM == 3) /* region number 3*/

        FB0OW02.FB0OWD1C[FB0OWIX2] = PG3REC.SY4IDDSC[FB0OWIX1];
        FB0OW02.FB0OWP1C[FB0OWIX2] = FB4REC.FB4SZPCT[FB0OWIX1];
        FB0OWFLD = FB0OW02.FB0OWP1C[FB0OWIX2] * FB0OW01.FB4RGPCT[FB0OWIXM];
        FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
        FB0OW02.FB0OWC1C[FB0OWIX2] = FB0OWFLD;

      end
    end
  end


end // end FB0OS01

// move page two data
Function FB0OS02()
   /* ------------------------------------------------------------*/
   /* set switch to show if data is present for page two*/
   /* ------------------------------------------------------------*/

  if (PG3REC.SY4IDDSC[FB0OWIX1] != " " /* description not blank*/
   || FB4REC.FB4SZPCT[FB0OWIX1] != 0)  /* size percent not zero*/
    FB0OW00.FB0OWP2D = "Y"; /* page 2 data present*/
  end

   /* ------------------------------------------------------------*/
   /* move fields to working storage*/
   /* ------------------------------------------------------------*/

  if (FB0OW00.FB0OWIXM == 1) /* region number 1*/

    FB0OW03.FB0OWD2A[FB0OWIX3] = PG3REC.SY4IDDSC[FB0OWIX1];
    FB0OW03.FB0OWP2A[FB0OWIX3] = FB4REC.FB4SZPCT[FB0OWIX1];
    FB0OWFLD = FB0OW03.FB0OWP2A[FB0OWIX3] * FB0OW01.FB4RGPCT[FB0OWIXM];
    FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
    FB0OW03.FB0OWC2A[FB0OWIX3] = FB0OWFLD;

  else

    if (FB0OW00.FB0OWIXM == 2) /* region number 2*/

      FB0OW03.FB0OWD2B[FB0OWIX3] = PG3REC.SY4IDDSC[FB0OWIX1];
      FB0OW03.FB0OWP2B[FB0OWIX3] = FB4REC.FB4SZPCT[FB0OWIX1];
      FB0OWFLD = FB0OW03.FB0OWP2B[FB0OWIX3] * FB0OW01.FB4RGPCT[FB0OWIXM];
      FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
      FB0OW03.FB0OWC2B[FB0OWIX3] = FB0OWFLD;

    else

      if (FB0OW00.FB0OWIXM == 3) /* region number 3*/

        FB0OW03.FB0OWD2C[FB0OWIX3] = PG3REC.SY4IDDSC[FB0OWIX1];
        FB0OW03.FB0OWP2C[FB0OWIX3] = FB4REC.FB4SZPCT[FB0OWIX1];
        FB0OWFLD = FB0OW03.FB0OWP2C[FB0OWIX3] * FB0OW01.FB4RGPCT[FB0OWIXM];
        FB0OW00.FB0OWFLD = FB0OW00.FB0OWFLD * .01 + .005;
        FB0OW03.FB0OWC2C[FB0OWIX3] = FB0OWFLD;

      end
    end
  end


end // end FB0OS02

//*** RECORD=FB0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0OW00 type basicRecord
  10 FB0OWSDR FB0OWSDR ; 
  10 FB0OWSWR FB0OWSWR ; 
  10 FB0OWBNK FB0OWBNK ; 
  10 FB0OWSPR FB0OWSPR ; 
  10 FB0OWNA FB0OWNA ; 
  10 FB0OWRNA FB0OWRNA ; 
  10 FB0OWP2D FB0OWP2D ; 
  10 FB0OWPGS FB0OWPGS ; 
  10 FB0OWMAP FB0OWMAP ; 
  10 FB0OWFD FB0OWFD ; 
  10 XGPCD XGPCD ; 
  10 FB0OWIXM FB0OWIXM ; 
  10 FB0OWIX1 FB0OWIX1 ; 
  10 FB0OWIX2 FB0OWIX2 ; 
  10 FB0OWIX3 FB0OWIX3 ; 
  10 FB0OWMIX FB0OWMIX ; 
  10 FB1INSEQ FB1INSEQ ; 
  10 FB0OWDCF FB0OWDCF ; 
  10 FB0OWFLD FB0OWFLD ; 
end // end FB0OW00

//*** RECORD=FB0OW01 ****
// ----    header display storage
// ***********************
Record FB0OW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 FB1CMNT FB1CMNT ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XGPCD XGPCD ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 SY1STYNM SY1STYNM ; 
  10 XDVCD XDVCD ; 
  10 XWHCD XWHCD [3] ; 
  10 XWHABRV XWHABRV [3] ; 
  10 FB4RGPCT FB4RGPCT [3] ; 
  10 FB5FRMDT FB5FRMDT ; 
  10 FB0OWFDT FB0OWFDT ; 
    15 FB0OWF3 FB0OWF3 ; 
    15 FB0OWFYY FB0OWFYY ; 
    15 FB0OWFMM FB0OWFMM ; 
    15 FB0OWFDD FB0OWFDD ; 
  10 FB5TODT FB5TODT ; 
  10 FB0OWTDT FB0OWTDT ; 
    15 FB0OWT3 FB0OWT3 ; 
    15 FB0OWTYY FB0OWTYY ; 
    15 FB0OWTMM FB0OWTMM ; 
    15 FB0OWTDD FB0OWTDD ; 
end // end FB0OW01

//*** RECORD=FB0OW02 ****
// -----   page one display storage
// ***********************
Record FB0OW02 type basicRecord
  10 FB0OWD1A FB0OWD1A [40] ; 
  10 FB0OWP1A FB0OWP1A [40] ; 
  10 FB0OWC1A FB0OWC1A [40] ; 
  10 FB0OWD1B FB0OWD1B [40] ; 
  10 FB0OWP1B FB0OWP1B [40] ; 
  10 FB0OWC1B FB0OWC1B [40] ; 
  10 FB0OWD1C FB0OWD1C [40] ; 
  10 FB0OWP1C FB0OWP1C [40] ; 
  10 FB0OWC1C FB0OWC1C [40] ; 
end // end FB0OW02

//*** RECORD=FB0OW03 ****
// ------ page 2 display storage
// ***********************
Record FB0OW03 type basicRecord
  10 FB0OWD2A FB0OWD2A [40] ; 
  10 FB0OWP2A FB0OWP2A [40] ; 
  10 FB0OWC2A FB0OWC2A [40] ; 
  10 FB0OWD2B FB0OWD2B [40] ; 
  10 FB0OWP2B FB0OWP2B [40] ; 
  10 FB0OWC2B FB0OWC2B [40] ; 
  10 FB0OWD2C FB0OWD2C [40] ; 
  10 FB0OWP2C FB0OWP2C [40] ; 
  10 FB0OWC2C FB0OWC2C [40] ; 
end // end FB0OW03

// non-blank size switch
DataItem FB0OWBNK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC1A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC1B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC1C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC2A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC2B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated size/reg pct
DataItem FB0OWC2C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size description
DataItem FB0OWD1A char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0OWD1B char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0OWD1C char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0OWD2A char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0OWD2B char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem FB0OWD2C char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// flag for vcurve01
DataItem FB0OWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0OWF3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First date record switch
DataItem FB0OWFD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date day
DataItem FB0OWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from work date
DataItem FB0OWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size/reg pct work field
DataItem FB0OWFLD decimal(8,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date month
DataItem FB0OWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date year
DataItem FB0OWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FB0OWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FB0OWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FB0OWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for stored fields
DataItem FB0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display page switch
DataItem FB0OWMAP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map
DataItem FB0OWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No user action taken switch
DataItem FB0OWNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size percent
DataItem FB0OWP1A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0OWP1B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0OWP1C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0OWP2A decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0OWP2B decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent
DataItem FB0OWP2C decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page two data present switch
DataItem FB0OWP2D char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Paging switch
DataItem FB0OWPGS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FB0OWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0OWSDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing switch
DataItem FB0OWSPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FB0OWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0OWT3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date day
DataItem FB0OWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to work date
DataItem FB0OWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date month
DataItem FB0OWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date year
DataItem FB0OWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

