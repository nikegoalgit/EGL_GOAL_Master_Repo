package fb0s;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpx2.XWHSABRV;
import corpz3.ZZZCHGCT;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB4SZPCT;
import fb.common.FB8BUYDT;
import fb.common.FB9REC;
import fb.common.FBGREC;
import fb.common.FBHREC;
import fb.common.FBIREC;
import fb.common.FBKCAFL;
import fb.common.FBKRDFL;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.FF00ENU;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT3YYMM;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0S ****
// This application part of the footwear buy system. The screen
// displays the result of the buy being broken out by size and
// region.  it also displays the calculated quantities rounded
// to the nearest 1/2 dozen.  The availability specialist can
// adjust the buy quantities on this screen prior to accepting
// the buy quantities and sending the buy by size to the pur-
// chase order system.
// To view all sizes, pf10 and pf11 are provided to shift left
// and right.  The number of sizes to be scrolled may be
// entered.  The default is ten.  Pf7 and pf8 provide the
// ability to look at regional or corporate quantities.
// The user may exit to any allowed application via fast path
// or pf keys.
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/01/89   LREIN    Created.
// 09/26/90   jalle1   add stock qtb and rnd-flag to both map
//                     headers and corresponding program logic.
// 11/21/91   jalle1   prevent submit of fb1141 job (pf15)
//                     when there is no valid data to display.
// 01/07/91   jalle1   fix error with pf15 print screen.
// 01/22/91   pmainw   pf15 print screen not allow if no size
//                     /region percent curve is found.
// 04/25/91   jalle1   unprotect color and dimension; allow
//                     key change in these fields.
// 04/26/91   jalle1   remove fblrec.fbltaqty from calculation
//                     of adjusted bottom line availability.
// 08/22/91   jalle1   handle not found (sql +100) condition
//                     on dfbuy.vfsctl01.
// 10/03/91   jalle1   show date and time of last calc.
// 10/28/92   jmclau   change the way the pf17 key functions.
//                     if the adjustment is within the toler-
//                     ance of less than 300, have pf17 accept
//                     and update.
// 01/29/93   jmclau   PA-308 direct ship orders that have
//                     preadvises should be taken out of the
//                     stock quantity to buy calculation.
// 06/07/93   jmclau   FB-318 Insure that all buy screens that
//                     display warehouse code, always display
//                     the whse codes in the same order.
// 07/13/93   pmainw   Allow the current page to display after
//                     quantities are adjusted.
// 07/15/93   pmainw   Same change to corp screen.
// 07/21/93   ldeluh   Chg testrms to testenc.
// 09/10/93   ldeluh   Add logic for smart jcl submit.
// 11/30/93   pmainw   Default units per case when zero.
// 12/03/93   pmainw   FB-322 - handle divert O.A.'s.
// 04/26/94   dhales   BUG - errors/messages allowed protected
//                     fields to become enterable added routine
//                     fb0s122 to ensure fields protected.
// 07/25/94   jjudki   BUG - f0bs162 'post' to ta0020 when sql
//                     -911, not 'retn'.
// 08/08/94   jjudki   BUG - index problem when pa2 after pf17.
//                     Initialize s/c/d date in fb0s130 before
//                     transfer back to fb0s with blank map1.
// 12/02/94   pmainw   Handle twenty product lines on vfsctl01.
// 01-23-95   LREIN    Back again. add SUMCD processing to en-
//                     sure only US warehouses processed.  This
//                     the for European Centralised Forecasting
//                     project.
// 02/07/95   JALLE1   Fix subscript out of bounds abend.
// 02-08-95   LREIN    Initialise divert tot bucket
// 03-16-95   LREIN    Fix where initialise divert tot bucket
// 05-23-96   JLIBER   Modify divert logic.
// 10-15-96   skeobo   warehouse 70 processing.
// 10/24/96   rtran    Modified to bring the future order into
//                     the current buy.
// 11/19/96   rkudpi   Fixed subscript out of bounds abend
// 12/09/96   rkudpi   fixed code for looping problem.
// 11/17/97   RJOGIA   Modified to bring Indirect Dsirect ship-
//                     ment into the current buy.
// 01-13-98   oricha   y2k modifications:  m010, m020 zero fill
//                     year; fb0ss01,s02, s07, s08, s21, w00,
//                     w01, 110, 117, 151, 250.
// *********************
Program FB0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0SW00 FB0SW00; // record
  FB0SW01 FB0SW01; // record
  FB0SW02 FB0SW02; // record
  FB0SW03 FB0SW03; // record
  FB4REC FB4REC; // record
  FB9REC FB9REC; // record
  FBGREC FBGREC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0ST01; // table
  use FB0STT1; // table
  use XWHTBL; // table
  use FB0SM.FB0SM010,  // forms
      FB0SM.FB0SM020,
      FB0SM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set FBXREC empty; /* initialise working storage*/
    set FB0SW00 empty; /* Initialize working storage*/
    set FB0SW01 empty; /* Initialize working storage*/
    set FB0SW02 empty; /* Initialize working storage*/
    set FBIREC empty; /* Initialize FB1510 iomod record*/
    set SQLCA empty; /* initialise sql commarea*/
    set TA1REC empty;
    FB0SW00.FB0SWWIX = 1;
    ;
    while (FB0SW00.FB0SWWIX < 5)
      FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWBUG;
      FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWNBG;
      FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
    end
    ;
    FB0SW00.FB0SW2GR = FB0SW02.FB0SW2GR;
    FB0SW00.FB0SW1GR = FB0SW01.FB0SW1GR;
    set FB0SM010 initial; /* Initialize map output area*/
    set FB0SM020 initial; /* Initialize map output area*/
    FB0SW00.FB0SWRDS = "N"; /* no data to display*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    FB0SW00.FB0SWMNO = 1; /* display first map*/
    ;
    if (COMMAREA.CAFRMSYS == "FB")
      ;
      if (COMMAREA.CAFROMAP != "FB0A"
       && COMMAREA.CAFROMAP != "FB0B"
       && COMMAREA.CAFROMAP != "FB0C"
       && COMMAREA.CAFROMAP != "FB0D"
       && COMMAREA.CAFROMAP != "FB0E"
       && COMMAREA.CAFROMAP != "FB0G"
       && COMMAREA.CAFROMAP != "FB0I"
       && COMMAREA.CAFROMAP != "FB0J"
       && COMMAREA.CAFROMAP != "FB0K"
       && COMMAREA.CAFROMAP != "FB0L"
       && COMMAREA.CAFROMAP != "FB0N"
       && COMMAREA.CAFROMAP != "FB0O"
       && COMMAREA.CAFROMAP != "FB0P")
        FBXREC.FBXGROUP = FBWREC.FBWFILL;
      else
        set FBXREC empty;
      end
      ;
    end
    ;
    if (FBXREC.SY1STNBR[1] != " ")
      FB0SW00.FB0SWRDS = "Y";
      FB0SW00.FB0SWMCS = "Y";
      FB0SM010.SY1STNBR = FBXREC.SY1STNBR[1];
      FB0SM020.SY1STNBR = FBXREC.SY1STNBR[1];
      FB0SW01.SY1STNBR = FBXREC.SY1STNBR[1];
    end
    ;
    if (FBXREC.SY2CLRID[1] != " ")
      FB0SW00.FB0SWRDS = "Y";
      FB0SW00.FB0SWMCS = "Y";
      FB0SM010.SY2CLRID = FBXREC.SY2CLRID[1];
      FB0SM020.SY2CLRID = FBXREC.SY2CLRID[1];
      FB0SW01.SY2CLRID = FBXREC.SY2CLRID[1];
    end
    ;
    if (FBXREC.XDMCD[1] != " ")
      FB0SW00.FB0SWRDS = "Y";
      FB0SW00.FB0SWMCS = "Y";
      FB0SM010.XDMCD = FBXREC.XDMCD[1];
      FB0SM020.XDMCD = FBXREC.XDMCD[1];
      FB0SW01.XDMCD = FBXREC.XDMCD[1];
    end
    ;
    if (FBXREC.FB8BUYDT != 0)
      FB0SW00.FB0SWRDS = "Y";
      FB0SW00.FB0SWMCS = "Y";
      FB0SW00.FB0SW-ORD-ADJ-BUY-DT = FBXREC.FB8BUYDT;
      FB0SW00.FB0SWBDT = FBXREC.FB8BUYDT;
      FB0SM010.FB0SMBMO = FB0SW00.FB0SMBMO;
      FB0SM020.FB0SMBMO = FB0SW00.FB0SMBMO;
      FB0SW01.FB0SMBMO = FB0SW00.FB0SMBMO;
    end
    ;
    if (FB0SW00.FB0SWMCS == "N")
      FB0SW00.FB0SWMIX = 1;
      ;
      while (FB0SW00.FB0SWMIX < 31)
        set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
        FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
      end
      ;
    end
    ;
    goto FB0S002; /* Converse Footwear Menu*/
    ;
    ;
    FB0S002: FB0S002();
    goto FB0S001;
    FB0S001: FB0S001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0S001; /* Converse main process*/
    ;
    ;
  end // end main
end // end FB0S

// Main process to display a map
Function FB0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified or data is requested, display the first map*/
   /* 2) Otherwise, if specified, display the second map.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SW00.FB0SWMNO == 1 /* map 1 (region) was requested*/
   || FB0SW00.FB0SWRDS == "Y") /* or data was requested*/
    FB0S100(); /* Display map 1*/
  else /* map 2 (corporate) was requested*/
    FB0S200(); /* Display map 2*/
  end
  ;
end // end FB0S001

// Summary code table process
Function FB0S002()
  FB0SS34(); /* load sum code array*/
end // end FB0S002

// Display adjustment to the buy
Function FB0S100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0S110(); /* Obtain the data to display*/
  ;
  FB0S120(); /* Format and display the map*/
  ;
  FB0S130(); /* Check attention identifier*/
  ;
  FB0S140(); /* Reset fields to normal intensity*/
  ;
  FB0S150(); /* Verify the entered data*/
  ;
  FB0S160(); /* Process valid input request*/
  ;
  ;
end // end FB0S100

// obtain data to display
Function FB0S110()
   /* ------------------------------------------------------------*/
    /* the logic for this process is as follows*/
     /* 1.  get size region qty to buy*/
     /* 2.  if no errors, get b/l avail qty to buy*/
     /* 3.  if no errors, get std size percents*/
     /* 4.  if no errors, get size descriptions*/
     /* 5.  if no errors, get warehouse description*/
     /* 6.  if no errors, do required calculations*/
     /* 7.  if no errors, get all direct ship for product*/
     /* 8.  if no errors, get forecast qty to buy for product*/
     /* 9.  if no errors, save another copy of display w-s*/
         /* set request data switch to no*/
         /* set format map switch to yes*/
         /* set scroll allowed switch to yes*/
    /* 10.  if displaying map 2 (corporate map) ezeflo*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SW00.FB0SWRDS != "Y") /* no data requested*/
    return; /* continue processing*/
  end
  ;
  FB0SW00.FB0SWSCS = "N"; /* cant scroll*/
  FB0SW02.FB0SWNSF = "Y"; /* default non std flag*/
  FB0S114(); /* get size desc*/
  FB0S111(); /* get size reg qty to buy*/
  FB0S112(); /* get b/l avail qtb*/
  FB0S113(); /* get std size pcts*/
  FB0S115(); /* get whse desc*/
  FB0S116(); /* calculations*/
  FB0S117(); /* Get direct ship total*/
  FB0S118(); /* Get forecast qty to buy*/
  FB0S119(); /* Get scheduler row*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the stock quantity to buy*/
   /* stock qtb = fcst qtb - (dir shp - preadvise - diverts)*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0SW00.FB0SW-DIR-SHP-PREADV-TOT = 0; /* dir ship - preadvise*/
  FB0SW00.FB0SW-DIR-SHP-PREADV-TOT = FB0SW00.FB0SWDST - FB0SW00.FB0SW-PREADVISE-TOT   - FB0SW00.FB0SW-DIVERT-TOT;
  ;
  FB0SW00.FB0SMSTQ = FBKREC.FB8FTQTB - FB0SW00.FB0SW-DIR-SHP-PREADV-TOT;
  ;
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  FB0SW00.FB0SWMCS = "Y"; /* format map*/
  FB0SW00.FB0SWSCS = "Y"; /* can scroll now*/
  if (FB0SW00.FB0SWMNO == 1) /* map 1 request*/
    ;
    /* ------------------------------------------------------------*/
     /* Save the key information in map display storage area.*/
    /* ------------------------------------------------------------*/
    ;
    FB0SW01.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
    FB0SW01.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
    FB0SW01.XDMCD = FB0SM010.XDMCD; /* dimension code*/
    FB0SW01.PT3YYMM = FB0SM010.PT3YYMM; /* bottom line month*/
    FB0SW01.FB0SMBMO = FB0SM010.FB0SMBMO; /* buy month*/
    FB0SW01.FB0SMSCR = FB0SM010.FB0SMSCR; /* scroll cols*/
    FBXREC.SY1STNBR[1] = FB0SM010.SY1STNBR; /* style number*/
    FBXREC.SY2CLRID[1] = FB0SM010.SY2CLRID; /* color code*/
    FBXREC.XDMCD[1] = FB0SM010.XDMCD; /* dimension code*/
    FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* buy month*/
    /* --------- y2k out begin --------*/
    /* MOVE 19 TO FB0SW00.FB0SWBCC;   /* century*/
    /* --------- y2k out end ----------*/
    /* --------- y2k in  begin --------*/
    if (FB0SW00.FB0SWBYY > 65)
      FB0SW00.FB0SWBCC = 19; /* century*/
    else
      FB0SW00.FB0SWBCC = 20; /* century*/
    end
    /* --------- y2k in end -----------*/
    FB0SW00.FB0SWBDD = 01; /* day*/
    FBXREC.FB8BUYDT = FB0SW00.FB0SWBDT; /* buy date ccyymmdd*/
  else /* map 2 request*/
    FB0SW01.SY1STNBR = FB0SM020.SY1STNBR; /* style number*/
    FB0SW01.SY2CLRID = FB0SM020.SY2CLRID; /* color code*/
    FB0SW01.XDMCD = FB0SM020.XDMCD; /* dimension code*/
    FB0SW01.PT3YYMM = FB0SM020.PT3YYMM; /* bottom line month*/
    FB0SW01.FB0SMBMO = FB0SM020.FB0SMBMO; /* buy month*/
    FB0SW01.FB0SMSCR = FB0SM020.FB0SMSCR; /* scroll cols*/
    FBXREC.SY1STNBR[1] = FB0SM020.SY1STNBR; /* style number*/
    FBXREC.SY2CLRID[1] = FB0SM020.SY2CLRID; /* color code*/
    FBXREC.XDMCD[1] = FB0SM020.XDMCD; /* dimension code*/
    FB0SW00.FB0SMBMO = FB0SM020.FB0SMBMO; /* buy month*/
    /* --------- y2k out begin --------*/
    /* MOVE 19 TO FB0SW00.FB0SWBCC;   /* century*/
    /* --------- y2k out end ----------*/
    /* --------- y2k in  begin --------*/
    if (FB0SW00.FB0SWBYY > 65)
      FB0SW00.FB0SWBCC = 19; /* century*/
    else
      FB0SW00.FB0SWBCC = 20; /* century*/
    end
    /* --------- y2k in end -----------*/
    FB0SW00.FB0SWBDD = 01; /* day*/
    FBXREC.FB8BUYDT = FB0SW00.FB0SWBDT; /* buy date ccyymmdd*/
    FB0SW00.FB0SWMNO = 1; /* map 1 request*/
  end
  if (FB0SW00.FB0SWSCL == 0) /* first time into application*/
    FB0SW00.FB0SWSCL = FB0SW00.FB0SWSLB; /* start column*/
  end
  FB0SW00.FB0SW1GR = FB0SW01.FB0SW1GR; /* backup disp ws*/
  FB0SW00.FB0SW2GR = FB0SW02.FB0SW2GR; /* backup disp ws*/
  FB0SW00.FB0SWBPS = "N"; /* bad product sw*/
end // end FB0S110

// get size/region qty to buy
Function FB0S111()
   /* ------------------------------------------------------------*/
    /* this process*/
     /* 1.  selects the set from dfbuy.vsrqtb01 (fbgrec)*/
     /* 2.  if no errors, fetches rows until end of cursor*/
     /* 3.  if no rows, does error processing*/
     /* 4.  closes the cursor*/
   /* ------------------------------------------------------------*/
  ;
  FB0SS01(); /* select set*/
  FB0SW00.FB0SWFFI = "Y"; /* first fetch*/
  FB0SW00.FB0SWSRDFFL = "N"; /* vsrqtb01 data found flag*/
  FB0SW00.FB0SWNWF = 0; /* no warehouses found*/
  set FB0SW01 empty; /* reset display working storage*/
  set FB0SW02 empty; /* reset display working storage*/
  ;
   /* ------------------------------------------------------------*/
    /* initialize the working storeage table by loading warehouses*/
    /* '02', '04', '07', into working storeage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWWIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
    ;
    /* MOVE 1 TO FB0SW00.FB0SWGIX;/* initialise size index*/
    ;
    /* WHILE FB0SW00.FB0SWGIX LT 41;/* for all sizes*/
      /* MOVE 0 TO FB0SW00.FB0SMBQY(FB0SWGIX);/* initialise buy qty*/
      /* MOVE 0 TO FB0SW00.FB0SMNBL(FB0SWGIX);/* initialise b/l qty*/
      /* MOVE 0 TO FB0SW00.FB0SMBPC(FB0SWGIX);/* initialise bl/ pct*/
      /* MOVE 0 TO FB0SW00.FB4SZPCT(FB0SWGIX);/* initialise sz pct*/
     /* FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;/* next size*/
   /* END;*/
    ;
                               /* first for this whse*/
   /* MOVE 0 TO FB0SW00.FB0SWBDT;*/
   /* MOVE FB0SW00.FB0SMBMO TO FB0SW01.FB0SMBMO;*/
   /* MOVE FB0SW00.FB0SWWIX TO FB0SW00.FB0SWSIX;/* save index*/
   /* MOVE FB0SW00.FB0SWBUG TO FB0SW02.FB0SWBUG(FB0SWWIX);*/
   /* MOVE FB0SW00.FB0SWNBG TO FB0SW02.FB0SWNBG(FB0SWWIX);*/
   /* MOVE FB0SW00.FB0SWBPG TO FB0SW02.FB0SWBPG(FB0SWWIX);*/
   /* MOVE FB0SW00.FB0SWSPG TO FB0SW02.FB0SWSPG(FB0SWWIX);*/
   /* FB0SW00.FB0SWNWF = FB0SW00.FB0SWNWF + 1;*/
   /* MOVE FB0SW00.FB0SWNWF TO FB0SW00.FB0SWNWD;*/
    ;
    if (FB0SW00.FB0SWWIX == 1) /**/
      FB0SW02.XWHCD[FB0SWWIX] = FB0SW00.FB0SW-VALID-SYCLR-WHSE[FB0SWWIX]; /* load warehouse 1*/
      FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] = "N"; /* whse data*/
                                                            /* loaded flag*/
      FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
      ;
    else
      if (FB0SW00.FB0SWWIX == 2) /**/
        FB0SW02.XWHCD[FB0SWWIX] = FB0SW00.FB0SW-VALID-SYCLR-WHSE[FB0SWWIX]; /* load warehouse 2*/
        FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] = "N"; /* whse data*/
                                                            /* loaded flag*/
        FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
      else
        if (FB0SW00.FB0SWWIX == 3) /**/
          FB0SW02.XWHCD[FB0SWWIX] = FB0SW00.FB0SW-VALID-SYCLR-WHSE[FB0SWWIX]; /* load warehouse 3*/
          FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] = "N";
                                 /* whse data loaded flag*/
          FB0SW00.FB0SWWIX = FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT; /* initialise index*/
          FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
   /* ELSE;*/
   /* MOVE '  ' TO FB0SW02.XWHCD(FB0SWWIX);/* initialize corp*/
   /* FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;/* next warehouse*/
        end
      end
    end
  end
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* until no more rows*/
    FB0SS02(); /* fetch next row*/
    ;
  end
  ;
  if (FB0SW00.FB0SWFFI == "Y") /* no rows found*/
    FB0SS03(); /* error processing*/
    converseLib.validationFailed(18); /* no data to display*/
    FB0SM010.XXXMODID = "111"; /* process number*/
    FB0SM020.XXXMODID = "111"; /* process number*/
    FB0SW00.FB0SWBPS = "Y"; /* bad product*/
    ;
    if (FB0SW00.FB0SWMNO == 1) /* display map 1*/
      set FB0SM010.SY1STNBR cursor, bold;
      set FB0SM010.SY2CLRID bold;
      set FB0SM010.XDMCD bold;
    else /* display map 2*/
      set FB0SM020.SY1STNBR cursor, bold;
      set FB0SM020.SY2CLRID bold;
      set FB0SM020.XDMCD bold;
    end
    ;
  end
  ;
  FB0SS04(); /* close cursor*/
  ;
  if (FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT == 0)
    FB0SS03(); /* ERROR PROCESSING*/
    converseLib.validationFailed(513);
    FB0SM010.XXXMODID = "111"; /* PROCESS NUMBER*/
    FB0SM020.XXXMODID = "111"; /* PROCESS NUMBER*/
    FB0SW00.FB0SWBPS = "Y"; /* BAD PRODUCT*/
    FB0SW00.FB0SWMCS = "N";
  end
  if (FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT > 3)
    FB0SS03(); /* ERROR PROCESSING*/
    converseLib.validationFailed(512);
    FB0SM010.XXXMODID = "111"; /* PROCESS NUMBER*/
    FB0SM020.XXXMODID = "111"; /* PROCESS NUMBER*/
    FB0SW00.FB0SWBPS = "Y"; /* BAD PRODUCT*/
    FB0SW00.FB0SWMCS = "N";
  end
  if (converseVar.validationMsgNum == 512 || converseVar.validationMsgNum == 513)
    if (FB0SW00.FB0SWMNO == 1) /* DISPLAY MAP 1*/
      set FB0SM010.SY1STNBR cursor, bold;
      set FB0SM010.SY2CLRID bold;
      set FB0SM010.XDMCD bold;
    else /* DISPLAY MAP 2*/
      set FB0SM020.SY1STNBR cursor, bold;
      set FB0SM020.SY2CLRID bold;
      set FB0SM020.XDMCD bold;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* an error found*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display the map*/
  end
end // end FB0S111

// get b/l avail qtb
Function FB0S112()
   /* ------------------------------------------------------------*/
    /* this process*/
     /* 1.  selects the set from dfbuy.vfblav01 (fblrec)*/
     /* 2.  if no errors, fetches rows until end of cursor*/
     /* 3.  if no rows, does error processing*/
     /* 4.  closes the cursor*/
   /* ------------------------------------------------------------*/
  ;
  FB0SS06(); /* select set*/
  FB0SW00.FB0SWFFI = "Y"; /* first fetch*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* until no more rows*/
    FB0SS07(); /* fetch next row*/
    ;
  end
  ;
  if (FB0SW00.FB0SWFFI == "Y") /* no rows found*/
    FB0SS03(); /* error processing*/
    converseLib.validationFailed(18); /* no data to display*/
    FB0SM010.XXXMODID = "112"; /* process number*/
    FB0SM020.XXXMODID = "112"; /* process number*/
    FB0SW00.FB0SWBPS = "Y"; /* bad product*/
    ;
    if (FB0SW00.FB0SWMNO == 1) /* display map 1*/
      set FB0SM010.SY1STNBR cursor, bold;
      set FB0SM010.SY2CLRID bold;
      set FB0SM010.XDMCD bold;
    else /* display map 2*/
      set FB0SM020.SY1STNBR cursor, bold;
      set FB0SM020.SY2CLRID bold;
      set FB0SM020.XDMCD bold;
    end
    ;
  else
    FB0SW02.FB0SWNSF = "Y"; /* Non standard flag*/
  end
  ;
  FB0SS08(); /* close cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* an error found*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display the map*/
  end
end // end FB0S112

// get std size percent
Function FB0S113()
   /* ------------------------------------------------------------*/
    /* this process*/
     /* 1.  selects the set from dfbuy.vcurve01 (fbgrec)*/
     /* 2.  if no errors, fetches rows until end of cursor*/
     /* 3.  if no rows, does error processing*/
     /* 4.  closes the cursor*/
   /* ------------------------------------------------------------*/
  ;
  FB0SS10(); /* select set*/
  FB0SW00.FB0SWFFI = "Y"; /* first fetch*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* until no more rows*/
    FB0SS11(); /* fetch next row*/
    ;
  end
  ;
  ;
  FB0SS12(); /* close cursor*/
  ;
  if (converseVar.validationMsgNum != 0) /* an error found*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display the map*/
  end
end // end FB0S113

// get size description
Function FB0S114()
   /* ------------------------------------------------------------*/
    /* build key for pg2rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FB0SM010.SY1STNBR;
  PG2REC.SY2CLRID = FB0SM010.SY2CLRID;
  PG2REC.XDMCD = FB0SM010.XDMCD;
  TA1REC.TA1PGMNM = "FB0S114";
  ;
  XSPG202();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or product not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB0SM010.XXXMODID = "114"; /* process number*/
    FB0SM020.XXXMODID = "114"; /* process number*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* product not found*/
    FB0SS03(); /* reset screen*/
    converseLib.validationFailed(167); /* invalid product*/
    set FB0SM010.SY1STNBR cursor, bold;
    set FB0SM020.SY1STNBR cursor, bold;
    set FB0SM010.SY2CLRID bold;
    set FB0SM020.SY2CLRID bold;
    set FB0SM020.XDMCD bold;
    set FB0SM010.XDMCD bold;
    FB0SM010.XXXMODID = "114"; /* process number*/
    FB0SM020.XXXMODID = "114"; /* process number*/
    FB0SW00.FB0SWBPS = "Y"; /* bad product*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
  FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT = 0;
  FB0SWIX1 = 1;
  while (FB0SWIX1 <= FB0SW00.FB0SW-XWH-WHSE-CNT)
    FB0SWIX2 = 1;
    FB0SW00.FB0SW-MATCH = "N";
    while (FB0SWIX2 <= 6
     && FB0SW00.FB0SW-MATCH == "N")
      if (FB0SW00.XWH-WHSE-CD[FB0SWIX1]
       == PG2REC.XWHCD[FB0SWIX2])
        FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT = FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT + 1;
        if (FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT <= 3)
          FB0SW00.FB0SW-VALID-SYCLR-WHSE[FB0SW-VALID-SYCLR-WHSE-CNT] = FB0SW00.XWH-WHSE-CD[FB0SWIX1];
        end
        FB0SW00.FB0SW-MATCH = "Y";
      end
      FB0SWIX2 = FB0SWIX2 + 1;
    end
    FB0SWIX1 = FB0SWIX1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
    /* default units per case if zero*/
   /* ------------------------------------------------------------*/
  if (PG2REC.SY1UNPCS == 0)
    if (PG2REC.XPCCD == "50") /* infants*/
      PG2REC.SY1UNPCS = 24;
    else
      PG2REC.SY1UNPCS = 12;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
    /* build key for pg3rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  TA1REC.TA1PGMNM = "PG0R114"; /* module id*/
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB0SM010.SY1STNBR;
  PG3REC.SY2CLRID = FB0SM010.SY2CLRID;
  PG3REC.XDMCD = FB0SM010.XDMCD;
  PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* sizes only this div*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* in commarea*/
    PG3REC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    PG3REC.XQACD = "01"; /* move default*/
  end
  ;
  XSPG301();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or sizes not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.clearScreen();
     /* reset screen*/
    FB0SM010.XXXMODID = "114"; /* process number*/
    FB0SM020.XXXMODID = "114"; /* process number*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB0SM010.XXXMODID = "114"; /* process number*/
    FB0SM020.XXXMODID = "114"; /* process number*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* no sizes found*/
    FB0SS03(); /* reset map*/
    FB0SW00.FB0SWSCS = "N"; /* scroll switch*/
    converseLib.validationFailed(01); /* set error message*/
    FB0SM010.XXXMODID = "114"; /* process number*/
    FB0SM020.XXXMODID = "114"; /* process number*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    FB0SW00.FB0SWBPS = "Y"; /* bad product*/
    exit stack; /* display map*/
  end
  ;
end // end FB0S114

// get warehouse description
Function FB0S115()
   /* ------------------------------------------------------------*/
    /* scan the working storage areas to find the description for*/
    /* each warehouse.  if the description is not found in xwhtbl*/
    /* use 'unknwn' for the description.*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWWIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
    ;
    if (FB0SW02.XWHCD[FB0SWWIX] in XWHTBL.XWHCD) /* match in table*/
      FB0SW02.XWHSABRV[FB0SWWIX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      ;
      if (FB0SW02.XWHCD[FB0SWWIX] != "  ")
        FB0SW02.XWHSABRV[FB0SWWIX] = "UNKNWN"; /* unknwn to desc*/
      end
      ;
    end
    ;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
  end
  ;
end // end FB0S115

// calculate qtys and pcts
Function FB0S116()
  FB0SW00.FB0SWWIX = 1; /* initialise warehouse index*/
  FB0SW02.FB0SMBQT[4] = 0; /* corporate buy total*/
  FB0SW02.FB0SMNBT[4] = 0; /* corporate b/l total*/
  FB0SW00.FB0SWGIX = 1; /* initialise size index*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB0SMBQY[FB0SWGIX] = 0; /* buy quantity*/
    FB0SW00.FB0SMNBL[FB0SWGIX] = 0; /* b/l qty*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
  end
  ;
  FB0SW02.FB0SWBUG[4] = FB0SW00.FB0SWBUG; /* corporate total*/
  FB0SW02.FB0SWNBG[4] = FB0SW00.FB0SWNBG; /* corporate total*/
  FB0SW00.FB0SWBU2 = FB0SW00.FB0SWBUG; /* corp work area*/
  FB0SW00.FB0SWNB2 = FB0SW00.FB0SWNBG; /* corp work area*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT
   && FB0SW02.XWHCD[FB0SWWIX] != " ") /* for each warehouse*/
    FB0SS14(); /* round and calc totals*/
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
  end
  ;
  FB0SW00.FB0SWBUG = FB0SW00.FB0SWBU2; /* work area*/
  FB0SW02.FB0SWBUG[4] = FB0SW00.FB0SWBU2; /* back to table*/
  FB0SW00.FB0SWNBG = FB0SW00.FB0SWNB2; /* work area*/
  FB0SW02.FB0SWNBG[4] = FB0SW00.FB0SWNB2; /* back to table*/
  FB0SW00.FB0SWWIX = 1; /* initialise warehouse index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT
   && FB0SW02.XWHCD[FB0SWWIX] != " ") /* for each warehouse*/
    FB0SS15(); /* b/l pct by size and whse*/
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
  end
  ;
  FB0SS16(); /* calc corporate percents*/
  ;
  FB0SS17(); /* calc scroll limits*/
end // end FB0S116

// Total direct ship qtys
Function FB0S117()
  ;
   /* ************************************************************/
   /* Read all of the direct ship rows that have a direct*/
   /* ship code of '1' and no warehouse.  Accumulate all of the*/
   /* quantities*/
   /* ************************************************************/
  ;
  set FBHREC empty;
  ;
  FBHREC.SY1STNBR = FB0SM010.SY1STNBR;
  FBHREC.SY2CLRID = FB0SM010.SY2CLRID;
  FBHREC.XDMCD = FB0SM010.XDMCD;
  FBHREC.XQACD = "01";
  FBHREC.XUMCD = "01";
  FBHREC.XPGCD = "00";
  FBHREC.FBHDSAFL = "*";
   /* MOVE '1' TO FBHREC.XDSCD;*/
   /* MOVE ' ' TO FBHREC.XWHCD;*/
  FBHREC.FB7BUYST = "Y"; /* future orders*/
  FBHREC.FB8BUYDT = FB0SW00.FB0SWBDT;
  ;
  FB0SW00.FB0SWDST = 0; /* Direct ship total field*/
  FB0SW00.FB0SW-PREADVISE-TOT = 0; /* Init product preadvise field*/
  FB0SW00.FB0SW-DIVERT-TOT = 0;
  ;
  FB0SS24(); /* open vdnord01 cursor*/
  ;
  FB0SS25(); /* Fetch vdnord01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FB0SW00.FB0SW-TMP-DT = FBHREC.FB8BUYDT; /* Use dnord buy dt*/
    FB0SW00.FB0SW-CHK-CC = FB0SW00.FB0SW-TMP-CC; /* Set century*/
    FB0SW00.FB0SW-CHK-YY = FB0SW00.FB0SW-TMP-YY; /* Set year*/
    FB0SW00.FB0SW-CHK-DM = FB0SW00.FB0SW-TMP-MM; /* Set dlv mth*/
    FB0SW00.FB0SW-CHK-MM = FB0SW00.FB0SW-TMP-MM - 2; /* Set mfg mth*/
    ;
    if (FB0SW00.FB0SW-CHK-MM < 0)
      FB0SW00.FB0SW-CHK-MM = 11;
      /* ------- y2k out begin --------*/
      /* FB0SW00.FB0SW-CHK-YY = FB0SW00.FB0SW-CHK-YY - 1;*/
      /* ------- y2k out end ----------*/
      /* ------- y2k in  begin --------*/
      FB0SW00.FB0SW-CHK-CY = FB0SW00.FB0SW-CHK-CY - 1;
      /* ------- y2k in end -----------*/
    else
      if (FB0SW00.FB0SW-CHK-MM == 0)
        FB0SW00.FB0SW-CHK-MM = 12;
        /* ------- y2k out begin --------*/
        /* FB0SW00.FB0SW-CHK-YY = FB0SW00.FB0SW-CHK-YY - 1;*/
        /* ------- y2k out end ----------*/
        /* ------- y2k in  begin --------*/
        FB0SW00.FB0SW-CHK-CY = FB0SW00.FB0SW-CHK-CY - 1;
        /* ------- y2k in end -----------*/
      end
    end
    FB0SW00.FB0SW-CHK-DTE = FB0SW00.FB0SW-CHK-DT;
  end
  ;
  while (FB0SW00.FB0SWDCF == "N")
    ;
    if ((FBHREC.XDSCD == "1"
     && FBHREC.XWHCD == "  "
     && FBHREC.XDVCD != "02") || 
    (FBHREC.XDSCD == "2"
     && FBHREC.XWHCD != "  "
     && FBHREC.XDVCD != "02"))
      ;
      set FBIREC empty; /* init fb1510 iomod rec*/
      FBIREC.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
      FBIREC.SY2CLRID = FBHREC.SY2CLRID; /* color id*/
      FBIREC.XDMCD = FBHREC.XDMCD; /* dim code*/
      FBIREC.PA1BUYMO = FB0SW00.FB0SW-ORD-ADJ-BUY-MO; /* ord adj buy mo ccyymm*/
      FBIREC.XWHCD = FBHREC.XWHCD; /* whse code*/
      FBIREC.FBI-COUNT = 0; /* io mod count*/
      FB0SW00.FB0SW-DIVERT-COUNT = 0; /* divert indicator*/
      FBIREC.FB8BUYDT = 0; /* buy date*/
      FBIREC.FBI-PENDING-ORD-ADJ-FL = " "; /* oa flag*/
      FBIREC.FBI-CURRENT-DATE = 0; /* current date*/
      FBIREC.FBI-CURRENT-HHMMSS = 0; /* current time*/
      FBIREC.OP1PARTN = FBHREC.OP1PARTN; /* ord partition char*/
      FBIREC.OP1CUOID = FBHREC.OP1CUOID; /* cust ord id*/
      FBIREC.OP1NORID = FBHREC.OP1NORID; /* nike ord id*/
      FBIREC.PRDCUID = FBHREC.PC2CUXID; /* prdcu id*/
      FBIREC.PKGTYPCD = FBHREC.XPGCD; /* pckg typ cd*/
      FBIREC.XQAQALCD = FBHREC.XQACD; /* qual cd*/
      FBIREC.XUMUOMCD = FBHREC.XUMCD; /* uom cd*/
      FBIREC.FBI-DLVRY-DT = FB0SW00.FB0SW-CHK-DTE; /* po id mo rng*/
      ;
      FB0SS27(); /* Check for preadvises*/
      ;
      ;
      FB0SW00.FB0SWIX1 = 1;
      while (FB0SW00.FB0SWIX1 <= 40)
        FB0SW00.FB0SWDST = FB0SW00.FB0SWDST + FBHREC.FB7QTB[FB0SWIX1];
        if (FBIREC.FBI-COUNT > 0) /* there are preadvises*/
          FB0SW00.FB0SW-PREADVISE-TOT = FB0SW00.FB0SW-PREADVISE-TOT +           FBHREC.FB7QTB[FB0SWIX1]; /* accum preadvise total*/
        end
        ;
        FB0SW00.FB0SWIX1 = FB0SW00.FB0SWIX1 + 1;
      end
      ;
      ;
      if (FBIREC.FBI-COUNT == 0) /* there are no preadvises*/
        FB0SS28(); /* Check for diverts*/
        ;
        FB0SW00.FB0SWIX1 = 1;
        while (FB0SW00.FB0SWIX1 <= 40)
          if (FB0SW00.FB0SW-DIVERT-COUNT > 0) /* there are diverts*/
            FB0SW00.FB0SW-DIVERT-TOT = FB0SW00.FB0SW-DIVERT-TOT +             FBHREC.FB7QTB[FB0SWIX1]; /* accum preadvise total*/
          end
          ;
          FB0SW00.FB0SWIX1 = FB0SW00.FB0SWIX1 + 1;
        end
      end
    end
    ;
    FB0SS25(); /* Fetch vdnord01 row*/
  end
  ;
  FB0SS26(); /* Close vdnord01 row*/
  ;
  ;
end // end FB0S117

// Get forecast qty to buy
Function FB0S118()
  ;
  set FBKREC empty;
  FBKREC.SY1STNBR = FB0SM010.SY1STNBR;
  FBKREC.SY2CLRID = FB0SM010.SY2CLRID;
  FBKREC.XDMCD = FB0SM010.XDMCD;
  FBKREC.FB8BUYDT = FB0SW00.FB0SWBDT;
  FBKREC.FB8RCTYP = "B";
  ;
   /* ------------------------------------------------------------*/
   /* Get unique forecast qty to buy row*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0S118"; /* Process name*/
  TA1REC.TA1LOC = "GET UNIQUE              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0S118";
  exit stack;
  ;
end // end FB0S118

// Get scheduler row
Function FB0S119()
  ;
  ;
  set FBMREC empty;
  FBMREC.PG1SC4CD = PG2REC.PG1SC4CD;
  ;
  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    FB0SW01.SY1STNBR = FB0SM010.SY1STNBR;
    FB0SW01.SY2CLRID = FB0SM010.SY2CLRID;
    FB0SW01.XDMCD = FB0SM010.XDMCD;
    FB0SW01.FB0SMBMO = FB0SM010.FB0SMBMO;
    exit stack; /* Exit to display map*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0S119"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE ROW        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SM010.XXXMODID = "FB0S119";
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
end // end FB0S119

// format and display region map
Function FB0S120()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB0SM010.FB0SMSCR == 0) /* no scroll amount entered*/
    FB0SM010.FB0SMSCR = 10; /* default to 10*/
  end
  ;
  if (FB0SW00.FB0SWMCS == "Y") /* map needs to be formatted*/
    FB0S121(); /* format the map*/
  end
  ;
  if (FBXREC.XXXMSGNO != 0) /* Msg to display*/
    ;
    if (converseVar.validationMsgNum != 0)
      set FB0SM010 alarm; /* indicate sound alarm*/
    end
    ;
    if (FBXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBXREC.XXXMSGNO);
    end /* move to map*/
    ;
    FB0S122(); /* protect the fields*/
    ;
    if (FB0SM010.XXXMODID == " ")
      FB0SM010.XXXMODID = "120"; /* error module name*/
    end
  end
  ;
  converse FB0SM010 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FBXREC.XXXMSGNO = 0; /* message number*/
  ;
  COMMAREA.CATOAP = FB0SM010.CATOAP; /* to application*/
  COMMAREA.CAITEM = FB0SM010.CAITEM; /* application data*/
end // end FB0S120

// format region map
Function FB0S121()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/
  ;
  set FB0SM010 initial; /* map io area*/
  FB0SW00.FB0SWMCS = "N"; /* map format switch*/
  FB0SM010.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
   /* ------------------------------------------------------------*/
   /* format the key data*/
   /* ------------------------------------------------------------*/
  ;
  FB0SM010.SY1STNBR = FB0SW01.SY1STNBR;
  FB0SM010.SY2CLRID = FB0SW01.SY2CLRID;
  FB0SM010.XDMCD = FB0SW01.XDMCD;
  FB0SM010.PT3YYMM = FBLREC.PT3YYMM;
  FB0SM010.FB0SMBMO = FB0SW01.FB0SMBMO;
  FB0SM010.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0SM010.SY2CLRAB = PG2REC.SY2CLRAB;
  FB0SM010.FB0SMNSF = FB0SW02.FB0SWNSF;
  FB0SM010.FB0SMSTQ = FB0SW00.FB0SMSTQ;
  FB0SM010.FBKRDFL = FB0SW02.FBKRDFL[1];
  ;
  if (FB0SW01.FB0SMSCR == 0)
    FB0SM010.FB0SMSCR = 10;
  else
    FB0SM010.FB0SMSCR = FB0SW01.FB0SMSCR;
  end
  ;
  FB0SM010.FB0SM-LAST-CALC-DT = FB0SW00.FB0SM-LAST-CALC-DT;
   /* MOVE FBGREC.ZZZSDT TO FB0SM010.FB0SM-LAST-CALC-DT;*/
   /* MOVE FBGREC.ZZZSTM TO FB0SW00.FB0SW-WORK-TIME;*/
  FB0SW00.FB0SW-REFORMAT-HH = FB0SW00.FB0SW-WORK-HH;
  FB0SW00.FB0SW-REFORMAT-MN = FB0SW00.FB0SW-WORK-MN;
  FB0SW00.FB0SW-REFORMAT-COLON = ":";
  FB0SM010.FB0SM-LAST-CALC-TM = FB0SW00.FB0SW-REFORMAT-TIME;
  ;
   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWWIX = 1; /* initialise whse index*/
  FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 10;
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT
   && FB0SW02.XWHCD[FB0SWWIX] != "  ") /* for each whse in the table*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise index*/
    FB0SM010.XWHSABRV[FB0SWWIX] = FB0SW02.XWHSABRV[FB0SWWIX];
    FB0SM010.FB0SMBQT[FB0SWWIX] = FB0SW02.FB0SMBQT[FB0SWWIX];
    FB0SM010.FB0SMNBT[FB0SWWIX] = FB0SW02.FB0SMNBT[FB0SWWIX];
    FB0SM010.FB0SMBPT[FB0SWWIX] = FB0SW02.FB0SMBPT[FB0SWWIX];
    FB0SM010.FB4RGPCT[FB0SWWIX] = FB0SW02.FB4RGPCT[FB0SWWIX];
    FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* to separate*/
    FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[FB0SWWIX]; /* to separate*/
    FB0SW00.FB0SWBPG = FB0SW02.FB0SWBPG[FB0SWWIX]; /* to separate*/
    FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[FB0SWWIX]; /* to separate*/
    ;
    if (FB0SW00.FB0SWWIX == 1)
      FB0SW00.FB0SWMIX = 1; /* set map index to 1*/
    else
      ;
      if (FB0SW00.FB0SWWIX == 2)
        FB0SW00.FB0SWMIX = 11; /* set map index to 11*/
      else
        ;
        if (FB0SW00.FB0SWWIX == 3)
          FB0SW00.FB0SWMIX = 21; /* set map index to 21*/
        end
        ;
      end
      ;
    end
    ;
    while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* for each screen column*/
      FB0SM010.FB0SMBQY[FB0SWMIX] = FB0SW00.FB0SMBQY[FB0SWGIX];
      FB0SM010.FB0SMNBL[FB0SWMIX] = FB0SW00.FB0SMNBL[FB0SWGIX];
      FB0SM010.FB0SMBPC[FB0SWMIX] = FB0SW00.FB0SMBPC[FB0SWGIX];
      FB0SM010.FB4SZPCT[FB0SWMIX] = FB0SW00.FB4SZPCT[FB0SWGIX];
      ;
      if (PG3REC.SY4IDDSC[FB0SWGIX] == " ")
        set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      end
      ;
      FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* set group index up 1*/
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* set map index up 1*/
    end
    ;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* set whse index up 1*/
  end
  ;
  FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise group index*/
  FB0SW00.FB0SWMIX = 1; /* initialise map index*/
  ;
  while (FB0SW00.FB0SWMIX <= 10)
    FB0SM010.SY4IDDSC[FB0SWMIX] = PG3REC.SY4IDDSC[FB0SWGIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
  end
  ;
  if (FB0SW00.FB0SWNWD == 1)
    FB0SW00.FB0SWMIX = 11; /* set map index to 11*/
  else
    ;
    if (FB0SW00.FB0SWNWD == 2)
      FB0SW00.FB0SWMIX = 21; /* set map index to 21*/
    else
      FB0SW00.FB0SWMIX = 99; /* a big number*/
    end
    ;
  end
  ;
  if (FB0SW02.XWHCD[2] == "  "
   || FB0SW02.XWHCD[3] == "  ")
    FB0SW00.FB0SWMIX = 99;
    FB0SW00.FB0SWNWD = 3;
  end
  ;
  if (FB0SW00.FB0SWMIX < 50)
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL;
    FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[4]; /* to separate*/
    FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[4]; /* to separate*/
    FB0SW00.FB0SWBPG = FB0SW02.FB0SWBPG[4]; /* to separate*/
    FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[4]; /* to separate*/
    FB0SM010.XWHSABRV[FB0SWNWD] = "CORP";
    ;
    while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* for each screen column*/
      FB0SM010.FB0SMBQY[FB0SWMIX] = FB0SW00.FB0SMBQY[FB0SWGIX];
      set FB0SM010.FB0SMBQY[FB0SWMIX] skip;
      FB0SM010.FB0SMNBL[FB0SWMIX] = FB0SW00.FB0SMNBL[FB0SWGIX];
      FB0SM010.FB0SMBPC[FB0SWMIX] = FB0SW00.FB0SMBPC[FB0SWGIX];
      FB0SM010.FB4SZPCT[FB0SWMIX] = FB0SW00.FB4SZPCT[FB0SWGIX];
      FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* set group index up 1*/
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* set map index up 1*/
    end
    ;
  end
  ;
  if (FB0SM010.XWHSABRV[1] == " ")
    FB0SW00.FB0SWMIX = 1;
    set FB0SM010.FB0SM-BUY[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-NEW-BL[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-BL-PCT[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-STD-SZPCT[FB0SWMIX] skip, invisible;
    ;
    while (FB0SW00.FB0SWMIX < 11)
      set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMNBL[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMBPC[FB0SWMIX] skip, invisible;
      set FB0SM010.FB4SZPCT[FB0SWMIX] skip, invisible;
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
    end
    ;
  end
  ;
  if (FB0SM010.XWHSABRV[2] == " ")
    FB0SW00.FB0SWMIX = 2;
    set FB0SM010.FB0SM-BUY[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-NEW-BL[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-BL-PCT[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-STD-SZPCT[FB0SWMIX] skip, invisible;
    FB0SW00.FB0SWMIX = 11;
    ;
    while (FB0SW00.FB0SWMIX < 21)
      set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMNBL[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMBPC[FB0SWMIX] skip, invisible;
      set FB0SM010.FB4SZPCT[FB0SWMIX] skip, invisible;
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
    end
    ;
  end
  ;
  if (FB0SM010.XWHSABRV[3] == " ")
    FB0SW00.FB0SWMIX = 3;
    set FB0SM010.FB0SM-BUY[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-NEW-BL[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-BL-PCT[FB0SWMIX] skip, invisible;
    set FB0SM010.FB0SM-STD-SZPCT[FB0SWMIX] skip, invisible;
    FB0SW00.FB0SWMIX = 21;
    ;
    while (FB0SW00.FB0SWMIX < 31)
      set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMNBL[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMBPC[FB0SWMIX] skip, invisible;
      set FB0SM010.FB4SZPCT[FB0SWMIX] skip, invisible;
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
    end
    ;
  end
  ;
end // end FB0S121

Function FB0S122()
  ;
  FB0SW00.FB0SWWIX = 1; /* initialise whse index*/
  FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 10;
  ;
  if (FB0SW01.FB0SMSCR == 0)
    FB0SM010.FB0SMSCR = 10;
  else
    FB0SM010.FB0SMSCR = FB0SW01.FB0SMSCR;
  end
  ;
  while (FB0SW00.FB0SWWIX < 4) /* for each warehouse*/
   /* AND FB0SW02.XWHCD(FB0SWWIX) NE '  ';      /* in the table*/
    ;
    if (FB0SW00.FB0SWGIX == 0)
      FB0SW00.FB0SWGIX = 1;
    else
      if (FB0SW00.FB0SWSCL == 0)
        FB0SW00.FB0SWGIX = 1;
      else
        FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise index*/
      end
    end
    ;
    if (FB0SW00.FB0SWWIX == 1)
      FB0SW00.FB0SWMIX = 1; /* set map index to 1*/
    else
      ;
      if (FB0SW00.FB0SWWIX == 2)
        FB0SW00.FB0SWMIX = 11; /* set map index to 11*/
      else
        ;
        if (FB0SW00.FB0SWWIX == 3)
          FB0SW00.FB0SWMIX = 21; /* set map index to 21*/
        end
        ;
      end
      ;
    end
    ;
    while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* for each screen column*/
      ;
      if (PG3REC.SY4IDDSC[FB0SWGIX] == " "
       || FB0SW02.XWHCD[FB0SWWIX] == " ")
        set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      end
      ;
      FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* set group index up 1*/
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* set map index up 1*/
    end
    ;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* set whse index up 1*/
  end
  ;
  FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise group index*/
  FB0SW00.FB0SWMIX = 1; /* initialise map index*/
  ;
  ;
end // end FB0S122

// check region attn identifier
Function FB0S130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FBWREC empty;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      XSFBS01(); /* Exit to another application*/
      FB0SM010.XXXMODID = "130"; /* Process name*/
      set FB0SM010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FB0SM010.XXXMODID = "130"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pa2) /* clear screen*/
      COMMAREA.CATOAP = "FB0S"; /* display the blank map*/
      FBXREC.SY1STNBR = "      ";
      FBXREC.SY2CLRID = "   ";
      FBXREC.XDMCD = "  ";
      FBXREC.FB8BUYDT = 0;
    end
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FB0SM010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* select products*/
      COMMAREA.CATOAP = "FB0Q";
    end
    ;
    if (converseVar.eventKey is pf13) /* b/l avail maint*/
      COMMAREA.CATOAP = "FB0T";
    end
    ;
    if (converseVar.eventKey is pf14) /* b/l avail maint*/
      COMMAREA.CATOAP = "FB0R";
    end
    ;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    XSFBS01(); /* transfer to another application*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    FB0SW00.FB0SWMCS = "Y"; /* format map*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf15) /* print*/
    ;
    if (FB0SW00.FB0SWSCS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(167); /* invalid product*/
      FB0SM010.XXXMODID = "130"; /* program name*/
      exit stack;
    end
    ;
    ;
    if (FB0SW02.FB0SWNSF == "NA") /* No size% curve*/
      converseLib.validationFailed(175); /* invalid product*/
      FB0SM010.XXXMODID = "130"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  ;
  if (FB0SW00.FB0SWC17 == "Y" /* PF17 confirm flag*/
   && converseVar.eventKey not pf17)
    FB0SW00.FB0SWC17 = "N";
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf6  /* next product*/
   && converseVar.eventKey not pf7  /* display map1*/
   && converseVar.eventKey not pf8  /* display map2*/
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11 /* scroll right*/
   && converseVar.eventKey not pf15 /* print*/
   && converseVar.eventKey not pf17) /* accept the calc*/
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FB0SM010.XXXMODID = "130"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey is pf10 /* scroll to the left*/
   || converseVar.eventKey is pf11 /* scroll to the right*/
   || converseVar.eventKey is pf7  /* scroll up*/
   || converseVar.eventKey is pf8) /* scroll down*/
    ;
    if (FB0SW00.FB0SWSCS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(167); /* invalid product*/
      FB0SM010.XXXMODID = "130"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8 /* display map 2*/
   && FB0SW00.FB0SWNWD <= 2)      /* everything on map 1*/
    FB0SM010.XXXMODID = "130"; /* process number*/
    converseLib.validationFailed(7); /* no more pages to display*/
    exit stack; /* display the map*/
  end
  ;
  if (converseVar.eventKey is pf7) /* display map 1*/
    FB0SM010.XXXMODID = "130"; /* process number*/
    converseLib.validationFailed(6); /* no previous pages*/
    exit stack; /* display the map*/
  end
  ;
end // end FB0S130

// reset region highlighted field
Function FB0S140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0SM010.SY1STNBR initialAttributes; /* style number*/
  set FB0SM010.SY2CLRID initialAttributes; /* color code*/
  set FB0SM010.XDMCD initialAttributes; /* dimension code*/
  set FB0SM010.PT3YYMM initialAttributes; /* b/l date yymm*/
  set FB0SM010.FB0SMSCR initialAttributes; /* scroll amount*/
  set FB0SM010.FB0SMBMO initialAttributes; /* buy date yymm*/
  ;
  set FB0SM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0SM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FB0SW00.FB0SWMIX = 1; /* first map index*/
  ;
  while (FB0SW00.FB0SWMIX < 31) /* for each bucket*/
    set FB0SM010.FB0SMBQY[FB0SWMIX] initialAttributes;
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
  end
end // end FB0S140

// verify region entered data
Function FB0S150()
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  FB0SW00.FB0SWMCS = "N"; /* dont format map*/
  FB0SW01.FB0SMSCR = FB0SM010.FB0SMSCR;
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM010.CAITEM > " ") /* Application data was entered*/
    FB0SM010.XXXMODID = "150"; /* Module identification*/
    set FB0SM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM010.SY1STNBR != FB0SW01.SY1STNBR /* style number changed*/
   || FB0SM010.SY2CLRID != FB0SW01.SY2CLRID /* color changed*/
   || FB0SM010.XDMCD != FB0SW01.XDMCD       /* dimension changed*/
   || FB0SM010.FB0SMBMO != FB0SW01.FB0SMBMO) /* buy month changed*/
    FB0SW00.FB0SWKCS = "Y"; /* key data changed*/
    ;
    if (FB0SW01.SY1STNBR == " " /* first time in*/
     && FB0SW01.FB0SMBMO == 0)  /* then initialise*/
      FB0SW00.FB0SWSCL = 1; /* start col for data edit*/
    else
      if (FB0SW00.FB0SWSCL == 0) /* first time into application*/
        FB0SW00.FB0SWSCL = 1; /* start col for data edit*/
      end
    end
    ;
    FB0SM020.SY1STNBR = FB0SM010.SY1STNBR;
    FB0SM020.FB0SMBMO = FB0SM010.FB0SMBMO;
    FB0SM020.SY2CLRID = FB0SM010.SY2CLRID;
    FB0SM020.SY2CLRAB = FB0SM010.SY2CLRAB;
    FB0SM020.XDMCD = FB0SM010.XDMCD;
    FB0SM020.SY1SSTNM = FB0SM010.SY1SSTNM;
    FB0SM020.FB0SMSCR = FB0SM010.FB0SMSCR;
  else
    FB0SW00.FB0SWKCS = "N"; /* key data not changed*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWWIX = 1; /* initialise whse index*/
  FB0SW00.FB0SWMIX = 1; /* initialise map index*/
  FB0SW00.FB0SWDCS = "N"; /* data didnt change*/
  FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 10; /* end column*/
  ;
  while (FB0SW00.FB0SWMIX < 31
   && FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
                                  /* for each b/l field*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise size index*/
    ;
    if (FB0SW00.FB0SWMIX < 11)
      FB0SW00.FB0SWWIX = 1;
    else
      if (FB0SW00.FB0SWMIX < 21)
        FB0SW00.FB0SWWIX = 2;
      else
        if (FB0SW00.FB0SWMIX < 31)
          FB0SW00.FB0SWWIX = 3;
        end
        ;
      end
      ;
    end
    ;
    FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* to separate*/
    ;
    while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* for each size displaying*/
      ;
      if (FB0SW00.FB0SMBQY[FB0SWGIX] != FB0SM010.FB0SMBQY[FB0SWMIX])
        FB0SW00.FB0SWDCS = "Y"; /* data changed*/
        FB0SW00.FB0SWGIX = FB0SW00.FB0SWECL; /* end inner loop*/
        FB0SW00.FB0SWMIX = 31; /* end outer loop*/
      else
        FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
        FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* next bucket*/
      end
      ;
    end
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
    ;
  end
  FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX - 1;
  ;
  if (FB0SW00.FB0SWKCS == "Y" /* key changed*/
   || FB0SW00.FB0SWBPS == "Y") /* previous product bad*/
    FB0S151(); /* edit key*/
  end
  ;
  if (FB0SW00.FB0SWDCS == "Y") /* data changed*/
    FB0S152(); /* edit data*/
  end
  ;
  FB0S153(); /* edit aid*/
  ;
   /* ------------------------------------------------------------*/
   /* check to see if pf17 was entered when there was no data*/
   /* to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17 /* PF 17 pressed*/
   && FB0SW00.FB0SWSRDFFL == "N")  /* no VSRQTB01 data to display*/
    FB0SM010.XXXMODID = "150"; /* Module identification*/
    converseLib.validationFailed(475); /* Cant enter pf17 when there is*/
                                  /* no data to display*/
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    ;
    if (FB0SW00.FB0SWKCS == "Y")
      FB0SW00.FB0SWSCL = 1; /* start at column 1*/
    end
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If there were no other edit errors and PF17 has been*/
   /* pressed validate the new buy quantities against the*/
   /* tolerance levels for region (on the control record) and*/
   /* for corporation (qty of 2000).*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf17 /* PF 17 pressed once*/
   && FB0SW00.FB0SWC17 == "Y")      /* but not second time*/
    FB0SW00.FB0SWC17 = "N";
  end
  ;
  ;
  if (FB0SW00.FB0SWKCS != "Y") /* key data not changed*/
    FB0SS22(); /* Check tolerance levels*/
  end
  ;
  if (converseVar.eventKey is pf17)
    if (FB0SW00.FB0SWRTE == "Y" /* If a region tolerance error*/
     || FB0SW00.FB0SWCPE == "Y") /* or corp over 2000 error*/
      exit stack;
    end
    if (FB0SW00.FB0SWCME == "Y") /* Corp minus error*/
      if (FB0SW00.FB0SWC17 == "Y") /* Confirm pf17*/
        return;
      else
        FB0SW00.FB0SWC17 = "Y"; /* confirm pf17*/
        exit stack;
      end
    end
  end
  ;
end // end FB0S150

// verify key data
Function FB0S151()
  if (FB0SM010.FB0SMBMO != " ")
    FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* to separate*/
    /* --------y2k out begin ---------*/
    /* XX0XS01;*/
    /* XX0XW01.XX0XWYY = XX0XW01.XX0XWYY - 1;*/
    /* ;*/
    /* IF FB0SW00.FB0SWBYY LT XX0XW01.XX0XWYY; /* year too old*/
    /* --------y2k out end -----------*/
    /* --------y2k in  begin ---------*/
    FB0SW00.FB0SW-CUR-DT = VGVar.currentGregorianDate;
    FB0SW00.FB0SW-CUR-CY = FB0SW00.FB0SW-CUR-CY - 1;
    FB0SW00.FB0SW-BUY-DT = FB0SW00.FB0SMBMO;
    if (FB0SW00.FB0SW-BUY-YY > 65)
      FB0SW00.FB0SW-BUY-CC = 19;
    else
      FB0SW00.FB0SW-BUY-CC = 20;
    end
    if (FB0SW00.FB0SW-BUY-CY < FB0SW-CUR-CY
    ) /* --------y2k in end ------------*/
      converseLib.validationFailed(151); /* date out of range*/
      FB0SM010.XXXMODID = "151"; /* process number*/
      set FB0SM010.FB0SMBMO cursor, bold;
    end
    ;
    if (FB0SW00.FB0SWBMM < 1 /* month less than 1*/
     || FB0SW00.FB0SWBMM > 12) /* month greater than 12*/
      converseLib.validationFailed(151); /* date out of range*/
      FB0SM010.XXXMODID = "151"; /* process number*/
      set FB0SM010.FB0SMBMO cursor, bold;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* move defaults*/
   /* ------------------------------------------------------------*/
  ;
  FBXREC.XQACD[1] = "01"; /* quality code*/
  FBXREC.PC2INSEG[1] = "000"; /* spec code*/
  FBXREC.XPGCD[1] = "00"; /* package type code*/
  FBXREC.XUMCD[1] = "01"; /* unit of measure code*/
  ;
  if (FB0SM010.SY1STNBR != " ")
    FB0S114(); /* validate product*/
  end
  ;
  ;
  if (FB0SM010.FB0SMBMO == " ")
    converseLib.validationFailed(8);
    FB0SM010.XXXMODID = "151";
    set FB0SM010.FB0SMBMO cursor, bold;
  end
  ;
  if (FB0SM010.FB0SMSCR < 1
   || FB0SM010.FB0SMSCR > 40)
    FB0SM010.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(10); /* invalid data*/
    set FB0SM010.FB0SMSCR cursor, bold;
  else
    FB0SW01.FB0SMSCR = FB0SM010.FB0SMSCR;
  end
  ;
  if (FB0SM010.XDMCD == " ")
    converseLib.validationFailed(8);
    FB0SM010.XXXMODID = "151";
    set FB0SM010.XDMCD cursor, bold;
  end
  ;
  if (FB0SM010.SY2CLRID == " ")
    converseLib.validationFailed(8);
    FB0SM010.XXXMODID = "151";
    set FB0SM010.SY2CLRID cursor, bold;
  end
  ;
  if (FB0SM010.SY1STNBR == " ")
    converseLib.validationFailed(8);
    FB0SM010.XXXMODID = "151";
    set FB0SM010.SY1STNBR cursor, bold;
  end
  ;
  if (converseVar.validationMsgNum == 8)
    FB0SW00.FB0SWMIX = 1;
    ;
    while (FB0SW00.FB0SWMIX < 31)
      set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMNBL[FB0SWMIX] skip, invisible;
      set FB0SM010.FB0SMBPC[FB0SWMIX] skip, invisible;
      set FB0SM010.FB4SZPCT[FB0SWMIX] skip, invisible;
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
    end
    ;
    FB0SW00.FB0SWWIX = 1;
    ;
    while (FB0SW00.FB0SWWIX < 4)
      set FB0SM010.FB0SMBQT[FB0SWWIX] skip, invisible;
      set FB0SM010.FB0SMNBT[FB0SWWIX] skip, invisible;
      set FB0SM010.FB0SMBPT[FB0SWWIX] skip, invisible;
      set FB0SM010.FB4RGPCT[FB0SWWIX] skip, invisible;
      FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
    end
    ;
  end
  ;
end // end FB0S151

// verfiy qtb changes
Function FB0S152()
  FB0SW00.FB0SWWIX = FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT;
                                          /* last warehouse*/
  while (FB0SW00.FB0SWWIX > 0 /* for each warehouse*/
   && FB0SW00.FB0SWWIX <= FB0SW00.FB0SWNWD)
    ;
    if (FB0SW00.FB0SWWIX == 1) /* first warehouse*/
      FB0SW00.FB0SWMIX = 10; /* first screen line*/
    else
      if (FB0SW00.FB0SWWIX == 2) /* second warehouse*/
        FB0SW00.FB0SWMIX = 20; /* second screen line*/
      else
        FB0SW00.FB0SWMIX = 30; /* third screen line*/
      end
    end
    ;
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWMIX - 10; /* end column*/
    ;
    while (FB0SW00.FB0SWMIX > FB0SW00.FB0SWGIX) /* for each entry this line*/
      ;
      if (FB0SW02.FBKRDFL[FB0SWWIX] == "Y") /* must be rounded*/
        if (PG2REC.SY1UNPCS == 0) /* rounding factor is 0*/
          FB0SW00.FB0SWWK = 0; /* no rounding factor for product*/
        else
          FB0SW00.FB0SWWK = FB0SM010.FB0SMBQY[FB0SWMIX]                             % PG2REC.SY1UNPCS; /* remainder*/
        end
      else
        FB0SW00.FB0SWWK = 0; /* dont worry, be happy*/
      end
      ;
      if (FB0SW00.FB0SWWK != 0) /* not rounded to rounding*/
                                          /* factor*/
        if (PG2REC.SY1UNPCS == 12) /* rounding factor is 12*/
          converseLib.validationFailed(471); /* not rounded to 12*/
          FB0SM010.XXXMODID = "152"; /* process number*/
          set FB0SM010.FB0SMBQY[FB0SWMIX] cursor, bold;
        else
          if (PG2REC.SY1UNPCS == 24) /* rounding factor is 24*/
            converseLib.validationFailed(472); /* not rounded to 24*/
            FB0SM010.XXXMODID = "152"; /* process number*/
            set FB0SM010.FB0SMBQY[FB0SWMIX] cursor, bold;
          else
            if (PG2REC.SY1UNPCS == 48) /* rounding factor is 48*/
              converseLib.validationFailed(473); /* not rounded to 48*/
              FB0SM010.XXXMODID = "152"; /* process number*/
              set FB0SM010.FB0SMBQY[FB0SWMIX] cursor, bold;
            else
              converseLib.validationFailed(474); /* rounding factor is*/
                                                /* non of the above*/
                                                /* and didnt pass*/
              FB0SM010.XXXMODID = "152"; /* process number*/
              set FB0SM010.FB0SMBQY[FB0SWMIX] cursor, bold;
            end
          end
        end
      end
      ;
      if (FB0SM010.FB0SMBQY[FB0SWMIX] < 0) /* negative*/
        set FB0SM010.FB0SMBQY[FB0SWMIX] cursor, bold;
        converseLib.validationFailed(117); /* cant be negative*/
        FB0SM010.XXXMODID = "152"; /* process number*/
      end
      ;
      FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX - 1; /* previous amount*/
    end
    ;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX - 1;
  end
  ;
end // end FB0S152

// verify region aid
Function FB0S153()
  if (converseVar.eventKey is enter)
    ;
    if (FB0SW00.FB0SWKCS == "Y" /* key changed*/
     && FB0SW00.FB0SWDCS == "Y" /* data changed*/
     && FB0SW00.FB0SWBPS != "Y") /* previous product not bad*/
      FB0SM010.XXXMODID = "153"; /* Module identification*/
      converseLib.validationFailed(130); /* cannot change key and data*/
    end
    ;
    if (FB0SW00.FB0SWKCS == "N" /* key not changed*/
     && FB0SW00.FB0SWDCS == "N") /* data not changed*/
      ;
      if (FB0SM010.FB0SMSCR < 1 /* scroll value out*/
       || FB0SM010.FB0SMSCR > 40) /* of possible range*/
        FB0SM010.XXXMODID = "153"; /* Module identification*/
        converseLib.validationFailed(10); /* invalid data*/
        set FB0SM010.FB0SMSCR cursor, bold;
      else /* scroll value ok*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        FB0SW00.FB0SWMCS = "Y"; /* format map*/
      end
      ;
      exit stack; /* display map*/
    end
    ;
     /* IF FB0SW00.FB0SWBPS EQ 'Y'    ;        prev product was bad*/
       /* MOVE 'Y' TO FB0SW00.FB0SWMCS       ; format map*/
       /* EZEFLO                      ;        display map*/
     /* END ;*/
    ;
  else /* ezeaid not enter*/
    ;
    if (FB0SW00.FB0SWKCS == "N" /* key not changed*/
     && FB0SW00.FB0SWDCS == "N") /* data not changed*/
      ;
      if (converseVar.eventKey is pf10 /* scroll to the left*/
       || converseVar.eventKey is pf11) /* scroll to the right*/
        FB0SS18(); /* edit scroll amount*/
      end
      ;
      if (converseVar.eventKey is pf6 /* next product*/
       && FBXREC.SY1STNBR[2] == " ")  /* table empty*/
        FB0SS03(); /* error processing*/
        FB0SW00.FB0SWRDS = "N"; /* dont request data*/
        converseLib.validationFailed(356); /* no next product*/
        FB0SM010.XXXMODID = "153"; /* process number*/
      end
      ;
      /* -----------------------------------------------------------*/
        /* this next if in case the data was in error.  The map has*/
        /* already been reset, so the bad fields need to get*/
        /* highlighted again*/
      /* -----------------------------------------------------------*/
      ;
      if (converseVar.eventKey is enter) /* nothing new*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        FB0SW00.FB0SWMCS = "Y"; /* format map*/
        exit stack; /* display map*/
      end
      ;
      if (converseVar.validationMsgNum == 7) /* no more pages*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        exit stack; /* display map*/
      end
      ;
    end
    ;
  end
  ;
  if (FB0SW00.FB0SWDCS == "Y" /* data changed*/
   && FB0SW00.FB0SWKCS == "N") /* key not changed*/
    ;
    if (converseVar.eventKey is pf17 /* accept the calc*/
     || converseVar.eventKey is pf15) /* print screen*/
      FB0SM010.XXXMODID = "153"; /* Module identification*/
      converseLib.validationFailed(111); /* cannot change data and pf*/
    end
    ;
    if (converseVar.eventKey is pf10 /* scroll to the left*/
     || converseVar.eventKey is pf11 /* scroll to the right*/
     || converseVar.eventKey is pf7  /* scroll up*/
     || converseVar.eventKey is pf8) /* scroll down*/
      FB0SM010.XXXMODID = "153"; /* Module identification*/
      converseLib.validationFailed(5); /* cannot change data and scroll*/
    end
    ;
  end
  ;
  if (FB0SM010.FB0SMSCR < 1
   || FB0SM010.FB0SMSCR > 40)
    FB0SM010.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(10); /* invalid data*/
    set FB0SM010.FB0SMSCR cursor, bold;
  end
  ;
  if (FB0SW00.FB0SWBPS == "Y") /* previous product was bad*/
    ;
    if (converseVar.eventKey is pf10 /* scroll to the left*/
     || converseVar.eventKey is pf11) /* scroll to the right*/
      FB0SS18(); /* edit scroll amount*/
    end
    ;
    if (converseVar.eventKey is pf6 /* next product*/
     && FBXREC.SY1STNBR[2] == " ")  /* table empty*/
      FB0SW00.FB0SWRDS = "N"; /* dont request data*/
      converseLib.validationFailed(7); /* no next product*/
      FB0SM010.XXXMODID = "153"; /* process number*/
    end
    ;
  end
  ;
end // end FB0S153

// process valid region request
Function FB0S160()
  if (converseVar.eventKey is pf15) /* print screen*/
    ;
    FB0S161(); /* determine jcl region*/
    if (TA3REC.TA3RGNID == "03") /* If prod environment*/
      FB0SS30(); /* submit prod jcl*/
    else
      FB0SS33(); /* submit test jcl*/
    end
    ;
  else
    ;
    if (converseVar.eventKey is pf17) /* accept the calc*/
      if (FB0SW00.FB0SWCME == "Y") /* corp minus error*/
        if (FB0SW00.FB0SWC17 == "Y") /* and PF17 confirmed*/
          FB0SW00.FBKCAFL = "Y"; /* WS calc flag*/
          FB0S162(); /* process accept the calc request*/
        else
          return;
        end
      else
        FB0SW00.FBKCAFL = "Y"; /* WS calc flag*/
        FB0S162(); /* process accept the calc request*/
      end
    else
      ;
      if (converseVar.eventKey is pf6) /* next product*/
        FB0S163(); /* process next product request*/
        FB0SW00.FB0SWSCL = 0; /* To force display of first size*/
      else
        ;
        if (converseVar.eventKey is pf10 /* scroll to the left*/
         || converseVar.eventKey is pf11 /* scroll to the right*/
         || converseVar.eventKey is pf7  /* scroll up*/
         || converseVar.eventKey is pf8) /* scroll down*/
          FB0S164(); /* process scroll request*/
        else /* enter was hit*/
          ;
          if (FB0SW00.FB0SWKCS == "Y") /* key changed*/
            set FB0SW01 empty;
            FB0SW00.FB0SW1GR = FB0SW01.FB0SW1GR;
            set FB0SW02 empty;
            FB0SW00.FB0SW2GR = FB0SW02.FB0SW2GR;
            set FBXREC empty;
            FB0SW00.FB0SWSCL = 0; /* To force display of first size*/
            FB0SW00.FB0SWRDS = "Y"; /* request data*/
            FB0SW00.FB0SWMCS = "Y"; /* format map*/
          else
            ;
            if (FB0SW00.FB0SWBPS == "Y") /* previous product bad*/
              FB0SW00.FB0SWRDS = "Y"; /* request data*/
              FB0SW00.FB0SWMCS = "Y"; /* format map*/
            else
              FB0S165(); /* process update request*/
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
end // end FB0S160

// print screen
Function FB0S161()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FB0SM010.XXXMODID = "161"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
end // end FB0S161

// accept the calc
Function FB0S162()
   /* ------------------------------------------------------------*/
   /* build key for fbkrec*/
   /* ------------------------------------------------------------*/
  ;
  FBKREC.SY1STNBR = FB0SW01.SY1STNBR;
  FBKREC.SY2CLRID = FB0SW01.SY2CLRID;
  FBKREC.XDMCD = FB0SW01.XDMCD;
  FBKREC.FB8BUYDT = FB0SW00.FB0SWBDT;
  FBKREC.FB8RCTYP = "B";
  ;
   /* ------------------------------------------------------------*/
   /* Select unique from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, error updated since displayed*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0SM010.XXXMODID = "162"; /* process number*/
      FB0SM020.XXXMODID = "162"; /* process number*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "162"; /* Module identification*/
  FB0SM020.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        converseLib.validationFailed(10); /* Indicate system error*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back any prev changes*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before display*/
        converseLib.clearScreen();
         /* Clear screen before display*/
        ;
      end
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUELY     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (sysVar.errorCode != "00000000")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev changes*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* update the table*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FBKREC.FBKCAFL = FB0SW00.FBKCAFL;
  ;
  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* update*/
  ;
   /* ------------------------------------------------------------*/
   /* If found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FBXREC.XXXMSGNO = 32; /* info msg update ok*/
      FB0SM010.XXXMODID = "162"; /* process number*/
      FB0SM020.XXXMODID = "162"; /* process number*/
      FB0SW00.FB0SWRDS = "Y"; /* request data*/
      FB0SW00.FB0SWMCS = "Y"; /* format map*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0SM010.XXXMODID = "162"; /* process id*/
      FB0SM020.XXXMODID = "162"; /* process id*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev updates*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      exit stack; /* display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "162"; /* Module identification*/
  FB0SM020.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev updates*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FB0S162

// process next product request
Function FB0S163()
   /* ------------------------------------------------------------*/
   /* search through the array in fbxrec.  move element (n+1) to*/
   /* element n.  space out the last element to indicate end of*/
   /* array*/
   /* ------------------------------------------------------------*/
  FB0SW00.FB0SWLIX = 1; /* initialise low index*/
  FB0SW00.FB0SWHIX = 2; /* initialise high index*/
  ;
  while (FB0SW00.FB0SWHIX < 15 /* for each table entry*/
   && FBXREC.SY1STNBR[FB0SWHIX] != " ") /* with data in it*/
    FBXREC.XGPCD[FB0SWLIX] = FBXREC.XGPCD[FB0SWHIX]; /* up 1 rank*/
    FBXREC.SY1STNBR[FB0SWLIX] = FBXREC.SY1STNBR[FB0SWHIX];
    FBXREC.SY2CLRID[FB0SWLIX] = FBXREC.SY2CLRID[FB0SWHIX];
    FBXREC.XDMCD[FB0SWLIX] = FBXREC.XDMCD[FB0SWHIX];
    FBXREC.XQACD[FB0SWLIX] = FBXREC.XQACD[FB0SWHIX];
    FBXREC.PC2INSEG[FB0SWLIX] = FBXREC.PC2INSEG[FB0SWHIX];
    FBXREC.XPGCD[FB0SWLIX] = FBXREC.XPGCD[FB0SWHIX];
    FBXREC.XUMCD[FB0SWLIX] = FBXREC.XUMCD[FB0SWHIX];
    FBXREC.FBXFCTY1[FB0SWLIX] = FBXREC.FBXFCTY1[FB0SWHIX];
    FBXREC.FBXFCTY2[FB0SWLIX] = FBXREC.FBXFCTY2[FB0SWHIX];
    FBXREC.FBXFCTY3[FB0SWLIX] = FBXREC.FBXFCTY3[FB0SWHIX];
    FBXREC.FBXFCTY4[FB0SWLIX] = FBXREC.FBXFCTY4[FB0SWHIX];
    FBXREC.FBXFCTY5[FB0SWLIX] = FBXREC.FBXFCTY5[FB0SWHIX];
    FBXREC.FBXRPCT1[FB0SWLIX] = FBXREC.FBXRPCT1[FB0SWHIX];
    FBXREC.FBXRPCT2[FB0SWLIX] = FBXREC.FBXRPCT2[FB0SWHIX];
    FBXREC.FBXRPCT3[FB0SWLIX] = FBXREC.FBXRPCT3[FB0SWHIX];
    FBXREC.XWHCD1[FB0SWLIX] = FBXREC.XWHCD1[FB0SWHIX];
    FBXREC.XWHCD2[FB0SWLIX] = FBXREC.XWHCD2[FB0SWHIX];
    FBXREC.XWHCD3[FB0SWLIX] = FBXREC.XWHCD3[FB0SWHIX];
    ;
    FB0SW00.FB0SWHIX = FB0SW00.FB0SWHIX + 1; /* increment index*/
    FB0SW00.FB0SWLIX = FB0SW00.FB0SWLIX + 1; /* increment index*/
  end
  ;
  FBXREC.XGPCD[FB0SWLIX] = "  "; /* empty this element*/
  FBXREC.SY1STNBR[FB0SWLIX] = "      ";
  FBXREC.SY2CLRID[FB0SWLIX] = "   ";
  FBXREC.XDMCD[FB0SWLIX] = "  ";
  FBXREC.XQACD[FB0SWLIX] = "  ";
  FBXREC.PC2INSEG[FB0SWLIX] = "   ";
  FBXREC.XPGCD[FB0SWLIX] = "  ";
  FBXREC.XUMCD[FB0SWLIX] = "  ";
  FBXREC.FBXFCTY1[FB0SWLIX] = "    ";
  FBXREC.FBXFCTY2[FB0SWLIX] = "    ";
  FBXREC.FBXFCTY3[FB0SWLIX] = "    ";
  FBXREC.FBXFCTY4[FB0SWLIX] = "    ";
  FBXREC.FBXFCTY5[FB0SWLIX] = "    ";
  FBXREC.FBXRPCT1[FB0SWLIX] = 0;
  FBXREC.FBXRPCT2[FB0SWLIX] = 0;
  FBXREC.FBXRPCT3[FB0SWLIX] = 0;
  FBXREC.XWHCD1[FB0SWLIX] = "  ";
  FBXREC.XWHCD2[FB0SWLIX] = "  ";
  FBXREC.XWHCD3[FB0SWLIX] = "  ";
  ;
  FB0SM010.SY1STNBR = FBXREC.SY1STNBR[1];
  FB0SM020.SY1STNBR = FBXREC.SY1STNBR[1];
  FB0SM010.SY2CLRID = FBXREC.SY2CLRID[1];
  FB0SM020.SY2CLRID = FBXREC.SY2CLRID[1];
  FB0SM010.XDMCD = FBXREC.XDMCD[1];
  FB0SM020.XDMCD = FBXREC.XDMCD[1];
  ;
  ;
  set FB0SW01 empty;
  FB0SW00.FB0SW1GR = FB0SW01.FB0SW1GR;
  set FB0SW02 empty;
  FB0SW00.FB0SW2GR = FB0SW02.FB0SW2GR;
  ;
  FB0SW00.FB0SWRDS = "Y";
  FB0SW00.FB0SWMCS = "Y";
end // end FB0S163

// process scroll request
Function FB0S164()
  if (FB0SW00.FB0SWMNO == 1)
    FB0SW00.FB0SMSCR = FB0SM010.FB0SMSCR;
  else
    FB0SW00.FB0SMSCR = FB0SM020.FB0SMSCR;
  end
  ;
  FB0SW00.FB0SWMCS = "Y"; /* format map*/
  ;
  if (converseVar.eventKey is pf10) /* scroll left*/
    FB0SW00.FB0SWSCL = FB0SW00.FB0SWSCL - FB0SW00.FB0SMSCR;
    ;
    if (FB0SW00.FB0SWSCL < FB0SW00.FB0SWSLB) /* less than low bound*/
      FB0SW00.FB0SWSCL = FB0SW00.FB0SWSLB; /* move low bound to start*/
      FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 10; /* end column*/
    end
    ;
    FB0SM010.XXXMODID = "164"; /* process number*/
    FB0SM020.XXXMODID = "164"; /* process number*/
    FBXREC.XXXMSGNO = 15; /* info msg scroll ok*/
  end
  ;
  if (converseVar.eventKey is pf11) /* scroll right*/
    FB0SW00.FB0SWSCL = FB0SW00.FB0SWSCL + FB0SW00.FB0SMSCR;
    FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 9; /* end column*/
    ;
    if (FB0SW00.FB0SWECL > FB0SW00.FB0SWSHB)
                                   /* end col bigger than high*/
      FB0SW00.FB0SWECL = FB0SW00.FB0SWSHB; /* move high bound to end*/
         /* FB0SW00.FB0SWECL = FB0SW00.FB0SWECL + 1;*/
      FB0SW00.FB0SWSCL = FB0SW00.FB0SWECL - 9; /* calc start col*/
    end
    ;
    FB0SM010.XXXMODID = "164"; /* process number*/
    FB0SM020.XXXMODID = "164"; /* process number*/
    FBXREC.XXXMSGNO = 14; /* info msg scroll ok*/
  end
  ;
  if (converseVar.eventKey is pf7) /* previous page*/
    FB0SW00.FB0SWMNO = 1; /* display map 1*/
    FBXREC.XXXMSGNO = 13; /* info msg scroll ok*/
    FB0SM010.XXXMODID = "164"; /* process number*/
    FB0SM020.XXXMODID = "164"; /* process number*/
  end
  ;
  if (converseVar.eventKey is pf8) /* next page*/
    FB0SW00.FB0SWMNO = 2; /* display map 2*/
    FBXREC.XXXMSGNO = 12; /* info msg scroll ok*/
    FB0SM010.XXXMODID = "164"; /* process number*/
    FB0SM020.XXXMODID = "164"; /* process number*/
  end
end // end FB0S164

// update buy quantities
Function FB0S165()
  ;
  ;
  ;
  FB0SW00.FB0SWWIX = 1; /* first warehouse*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT
   && FB0SW00.FB0SWWIX <= FB0SW00.FB0SWNWF) /* for each whse found*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* first size on screen*/
    FB0SW00.FB0SWBCS = "N"; /* no changes*/
    FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX];
    ;
    if (FB0SW00.FB0SWWIX == 1) /* first warehouse*/
      FB0SW00.FB0SWMIX = 1; /* first screen line*/
    else
      if (FB0SW00.FB0SWWIX == 2) /* second warehouse*/
        FB0SW00.FB0SWMIX = 11; /* second screen line*/
      else
        if (FB0SW00.FB0SWWIX == 3) /* third warehouse*/
          FB0SW00.FB0SWMIX = 21; /* third screen line*/
        end
      end
    end
    ;
    while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL /* for each size on screen*/
     && FB0SW00.FB0SWBCS == "N") /* until a change*/
      ;
      if (FB0SW00.FB0SMBQY[FB0SWGIX] != FB0SM010.FB0SMBQY[FB0SWMIX])
        FB0SW00.FB0SWBCS = "Y"; /* a change made*/
      else
        FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
        FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* next map index*/
      end
      ;
    end
    ;
    if (FB0SW00.FB0SWBCS == "Y") /* a change found*/
      FB0SS21(); /* update row*/
    end
    ;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    FB0SW00.FBKCAFL = "N";
    FB0S162(); /* qty changed--set accept flag to 'n'*/
    FB0S167(); /* qty changed--set scheduler tbl flags*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      FBXREC.XXXMSGNO = 32; /* info msg update ok*/
      FB0SM010.XXXMODID = "165"; /* process number*/
      FB0SM020.XXXMODID = "165"; /* process number*/
      FB0SW00.FB0SWRDS = "Y"; /* request data*/
      FB0SW00.FB0SWMCS = "Y"; /* format map*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end
end // end FB0S165

// Set accept flags off
Function FB0S167()
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FBMREC.FBMCFFL = "N"; /* fb-calc-fnsh-fl*/
  ;
  ;
  ;
  FB0SW00.FB0SWIX1 = 1;
  ;
  while (FB0SW00.FB0SWIX1 <= 20)
    if (FBMREC.FBMPCD[FB0SWIX1] == PG2REC.XPLCD) /* product line =*/
      FBMREC.FBMPAFL[FB0SWIX1] = "N"; /* fb-prodln-acpt-fl*/
      ;
    end
    FB0SW00.FB0SWIX1 = FB0SW00.FB0SWIX1 + 1;
  end
  ;
  ;
  ;
  XX0XS01();
  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FBXREC.XXXMSGNO = 46; /* record updated by another app.*/
        FB0SM010.XXXMODID = "167"; /* module identification*/
        FB0SM020.XXXMODID = "167"; /* module identification*/
        FB0SW00.FB0SWRDS = "Y"; /* request data switch*/
        FB0SW00.FB0SWMCS = "Y"; /* format the map switch*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        exit stack;
      end
    end
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0S167 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0S167"; /* Process name*/
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0S167

// proc corp totals adj the buy
Function FB0S200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0S220(); /* Format and display the map*/
  ;
  FB0S230(); /* Check attention identifier*/
  ;
  FB0S240(); /* Reset fields to normal intensity*/
  ;
  FB0S250(); /* Verify the entered data*/
  ;
  FB0S260(); /* Process valid input request*/
  ;
  ;
end // end FB0S200

// format and display corp map
Function FB0S220()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB0SM010.FB0SMSCR == 0) /* scroll amount not entered*/
    FB0SM020.FB0SMSCR = 10; /* default to 10*/
  end
  ;
  if (FB0SW00.FB0SWMCS == "Y") /* map needs to be formatted*/
    FB0S221(); /* format the map*/
  end
  ;
  if (FBXREC.XXXMSGNO != 0) /* Msg to display*/
    ;
    if (converseVar.validationMsgNum != 0)
      set FB0SM020 alarm; /* indicate sound alarm*/
    end
    ;
    if (FBXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBXREC.XXXMSGNO);
    end /* move to map*/
    FB0SM020.XXXMODID = "220"; /* error module name*/
  end
  ;
  converse FB0SM020 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FBXREC.XXXMSGNO = 0; /* message number*/
  ;
  COMMAREA.CATOAP = FB0SM020.CATOAP; /* to application*/
  COMMAREA.CAITEM = FB0SM020.CAITEM; /* application data*/
end // end FB0S220

// format corporate map
Function FB0S221()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/
  ;
  set FB0SM020 initial; /* map io area*/
  FB0SW00.FB0SWMCS = "N"; /* map format switch*/
  FB0SM020.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
   /* ------------------------------------------------------------*/
   /* format the key data*/
   /* ------------------------------------------------------------*/
  ;
  FB0SM020.SY1STNBR = FB0SW01.SY1STNBR;
  FB0SM020.SY2CLRID = FB0SW01.SY2CLRID;
  FB0SM020.XDMCD = FB0SW01.XDMCD;
  FB0SM020.PT3YYMM = FBLREC.PT3YYMM;
  FB0SM020.FB0SMBMO = FB0SW01.FB0SMBMO;
  FB0SM020.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0SM020.SY2CLRAB = PG2REC.SY2CLRAB;
  FB0SM020.FB0SMSBT = FB0SW02.FB0SWSBT;
  FB0SM020.FB0SMCST = FB0SW02.FB0SWCST;
  FB0SM020.FB0SMCSV = FB0SW02.FB0SWCSV;
  FB0SM020.FB0SMNSF = FB0SW02.FB0SWNSF;
  FB0SM020.FB0SMSTQ = FB0SW00.FB0SMSTQ;
  FB0SM020.FBKRDFL = FB0SW02.FBKRDFL[1];
  ;
  if (FB0SW01.FB0SMSCR == 0)
    FB0SM020.FB0SMSCR = 10;
  else
    FB0SM020.FB0SMSCR = FB0SW01.FB0SMSCR;
  end
  ;
  FB0SM020.FB0SM-LAST-CALC-DT = FBGREC.ZZZSDT;
  FB0SW00.FB0SW-WORK-TIME = FBGREC.ZZZSTM;
  FB0SW00.FB0SW-REFORMAT-HH = FB0SW00.FB0SW-WORK-HH;
  FB0SW00.FB0SW-REFORMAT-MN = FB0SW00.FB0SW-WORK-MN;
  FB0SW00.FB0SW-REFORMAT-COLON = ":";
  FB0SM020.FB0SM-LAST-CALC-TM = FB0SW00.FB0SW-REFORMAT-TIME;
  ;
   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWECL = FB0SW00.FB0SWSCL + 10;
  FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise index*/
  FB0SM020.FB0SMBQT = FB0SW02.FB0SMBQT[4]; /* buy qty tot*/
  FB0SM020.FB0SMNBT = FB0SW02.FB0SMNBT[4]; /* b/l qty tot*/
  FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[4]; /* to separate*/
  FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[4]; /* to separate*/
  FB0SW00.FB0SWBPG = FB0SW02.FB0SWBPG[4]; /* to separate*/
  FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[4]; /* to separate*/
  FB0SW00.FB0SWMIX = 1; /* first screen col*/
  ;
  while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* for each screen column*/
    FB0SM020.FB0SMBQY[FB0SWMIX] = FB0SW00.FB0SMBQY[FB0SWGIX];
    FB0SM020.FB0SMNBL[FB0SWMIX] = FB0SW00.FB0SMNBL[FB0SWGIX];
    FB0SM020.FB0SMBPC[FB0SWMIX] = FB0SW00.FB0SMBPC[FB0SWGIX];
    FB0SM020.FB4SZPCT[FB0SWMIX] = FB0SW00.FB4SZPCT[FB0SWGIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* set group index up 1*/
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* set map index up 1*/
  end
  ;
  FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* initialise group index*/
  FB0SW00.FB0SWMIX = 1; /* initialise map index*/
  ;
  while (FB0SW00.FB0SWMIX <= 10)
    FB0SM020.SY4IDDSC[FB0SWMIX] = PG3REC.SY4IDDSC[FB0SWGIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
  end
  ;
end // end FB0S221

// check corp attn identifier
Function FB0S230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM020.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FBWREC empty;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      XSFBS01(); /* Exit to another application*/
      FB0SM020.XXXMODID = "230"; /* Process name*/
      set FB0SM020.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FB0SM020.XXXMODID = "230"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (FB0SW00.FB0SWC17 == "Y" /* Confirm PF17 flag*/
   && converseVar.eventKey not pf17)
    FB0SW00.FB0SWC17 = "N";
  end
  ;
  if (converseVar.eventKey is pf17) /* accept calc*/
    return;
  end
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pa2) /* clear screen*/
      COMMAREA.CATOAP = "FB0S"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FB0SM020"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* select products*/
      COMMAREA.CATOAP = "FB0Q";
    end
    ;
    if (converseVar.eventKey is pf13) /* b/l avail maint*/
      COMMAREA.CATOAP = "FB0T";
    end
    ;
    if (converseVar.eventKey is pf14) /* b/l avail maint*/
      COMMAREA.CATOAP = "FB0R";
    end
    ;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    XSFBS01(); /* transfer to another application*/
    FB0SW00.FB0SWRDS = "N"; /* dont request data*/
    FB0SW00.FB0SWMCS = "Y"; /* format map*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf15) /* print*/
    ;
    if (FB0SW00.FB0SWSCS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(167); /* invalid product*/
      FB0SM010.XXXMODID = "130"; /* program name*/
      exit stack;
    end
    ;
    ;
    if (FB0SW02.FB0SWNSF == "NA") /* No size% curve*/
      converseLib.validationFailed(175); /* invalid product*/
      FB0SM010.XXXMODID = "130"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf6  /* next product*/
   && converseVar.eventKey not pf7  /* display map1*/
   && converseVar.eventKey not pf8  /* display map2*/
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11 /* scroll right*/
   && converseVar.eventKey not pf15 /* print*/
   && converseVar.eventKey not pf17) /* accept the calc*/
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FB0SM020.XXXMODID = "230"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  if (converseVar.eventKey is pf10 /* scroll to the left*/
   || converseVar.eventKey is pf11 /* scroll to the right*/
   || converseVar.eventKey is pf7  /* scroll up*/
   || converseVar.eventKey is pf8) /* scroll down*/
    ;
    if (FB0SW00.FB0SWSCS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(167); /* invalid product*/
      FB0SM020.XXXMODID = "230"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8) /* display map 2*/
    FB0SM020.XXXMODID = "230"; /* process number*/
    converseLib.validationFailed(7); /* no more pages*/
    exit stack; /* display the map*/
  end
  ;
end // end FB0S230

// reset corp highlighted fields
Function FB0S240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0SM020.SY1STNBR initialAttributes; /* style number*/
  set FB0SM020.SY2CLRID initialAttributes; /* color code*/
  set FB0SM020.XDMCD initialAttributes; /* dimension code*/
  set FB0SM020.PT3YYMM initialAttributes; /* b/l date yymm*/
  set FB0SM020.FB0SMSCR initialAttributes; /* scroll amount*/
  set FB0SM020.FB0SMBMO initialAttributes; /* buy date yymm*/
  ;
  set FB0SM020.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0SM020.CAITEM initialAttributes; /* Commarea application data*/
  ;
end // end FB0S240

// verify corp entered data
Function FB0S250()
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  FB0SW00.FB0SWMCS = "N"; /* dont format map*/
  FB0SW01.FB0SMSCR = FB0SM020.FB0SMSCR;
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM020.CAITEM > " ") /* Application data was entered*/
    FB0SM020.XXXMODID = "250"; /* Module identification*/
    set FB0SM020.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0SM020.SY1STNBR != FB0SW01.SY1STNBR /* style number changed*/
   || FB0SM020.SY2CLRID != FB0SW01.SY2CLRID /* color changed*/
   || FB0SM020.XDMCD != FB0SW01.XDMCD       /* color changed*/
   || FB0SM020.FB0SMBMO != FB0SW01.FB0SMBMO) /* buy month changed*/
    FB0SW00.FB0SWKCS = "Y"; /* key data changed*/
    FB0SW00.FB0SWSCL = 1; /* start at column 1*/
  else
    FB0SW00.FB0SWKCS = "N"; /* key data not changed*/
  end
  ;
  FB0SM010.SY1STNBR = FB0SM020.SY1STNBR;
  FB0SM010.SY2CLRID = FB0SM020.SY2CLRID;
  FB0SM010.XDMCD = FB0SM020.XDMCD;
  FB0SM010.SY1SSTNM = FB0SM020.SY1SSTNM;
  FB0SM010.SY2CLRAB = FB0SM020.SY2CLRAB;
  FB0SM010.FB0SMSCR = FB0SM020.FB0SMSCR;
  ;
  if (FB0SW00.FB0SWKCS == "Y") /* key changed*/
    ;
    if (FB0SM020.FB0SMBMO != " ")
      FB0SW00.FB0SMBMO = FB0SM020.FB0SMBMO; /* to separate*/
      /* --------y2k out begin ---------*/
      /* XX0XS01;*/
      /* XX0XW01.XX0XWYY = XX0XW01.XX0XWYY - 1;*/
      /* ;*/
      /* IF FB0SW00.FB0SWBYY LT XX0XW01.XX0XWYY; /* year too old*/
      /* --------y2k out end -----------*/
      /* --------y2k in  begin ---------*/
      FB0SW00.FB0SW-CUR-DT = VGVar.currentGregorianDate;
      FB0SW00.FB0SW-BUY-DT = FB0SW00.FB0SMBMO;
      if (FB0SW00.FB0SW-BUY-YY > 65)
        FB0SW00.FB0SW-BUY-CC = 19;
      else
        FB0SW00.FB0SW-BUY-CC = 20;
      end
      if (FB0SW00.FB0SW-BUY-CY < FB0SW-CUR-CY
      ) /* --------y2k in end ------------*/
        converseLib.validationFailed(151); /* date out of range*/
        FB0SM020.XXXMODID = "250"; /* process number*/
        set FB0SM020.FB0SMBMO cursor, bold;
      end
      ;
      if (FB0SW00.FB0SWBMM < 1 /* month less than 1*/
       || FB0SW00.FB0SWBMM > 12) /* month greater than 12*/
        converseLib.validationFailed(151); /* date out of range*/
        FB0SM020.XXXMODID = "250"; /* process number*/
        set FB0SM020.FB0SMBMO cursor, bold;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* move defaults*/
    /* ------------------------------------------------------------*/
    ;
    FBXREC.XQACD[1] = "01"; /* quality code*/
    FBXREC.PC2INSEG[1] = "000"; /* spec code*/
    FBXREC.XPGCD[1] = "00"; /* package type code*/
    FBXREC.XUMCD[1] = "01"; /* unit of measure code*/
    ;
    if (FB0SM020.SY1STNBR != " ")
      FB0S114(); /* validate product*/
    end
    ;
    ;
    if (FB0SM020.FB0SMBMO == " ")
      converseLib.validationFailed(8);
      FB0SM020.XXXMODID = "250";
      set FB0SM020.FB0SMBMO cursor, bold;
    end
    ;
    if (FB0SM020.FB0SMSCR < 1
     || FB0SM020.FB0SMSCR > 40)
      FB0SM020.XXXMODID = "250"; /* Module identification*/
      converseLib.validationFailed(10); /* invalid data*/
      set FB0SM020.FB0SMSCR cursor, bold;
    else
      FB0SW01.FB0SMSCR = FB0SM020.FB0SMSCR;
    end
    ;
    if (FB0SM020.XDMCD == " ")
      converseLib.validationFailed(8);
      FB0SM020.XXXMODID = "250";
      set FB0SM020.XDMCD cursor, bold;
    end
    ;
    if (FB0SM020.SY2CLRID == " ")
      converseLib.validationFailed(8);
      FB0SM020.XXXMODID = "250";
      set FB0SM020.SY2CLRID cursor, bold;
    end
    ;
    if (FB0SM020.SY1STNBR == " ")
      converseLib.validationFailed(8);
      FB0SM020.XXXMODID = "250";
      set FB0SM020.SY1STNBR cursor, bold;
    end
    ;
  end
  ;
  FB0S251(); /* edit aid*/
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If there were no other edit errors and PF17 has been*/
   /* pressed validate the new buy quantities against the*/
   /* tolerance levels for region (on the control record) and*/
   /* for corporation (qty of 2000).*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf17 /* PF17 pressed once*/
   && FB0SW00.FB0SWC17 == "Y")      /* but not second time*/
    FB0SW00.FB0SWC17 = "N"; /* Set flag off*/
  end
  ;
  ;
  if (FB0SW00.FB0SWKCS != "Y") /* key data changed*/
    FB0SS22(); /* Check tolerance levels*/
  end
  ;
  if (converseVar.eventKey is pf17) /* PF17 pressed once*/
    if (FB0SW00.FB0SWRTE == "Y" /* If a region tolerance error*/
     || FB0SW00.FB0SWCPE == "Y") /* or corp over 2000 error*/
      exit stack;
    end
    if (FB0SW00.FB0SWCME == "Y") /* Corp minus error*/
      if (FB0SW00.FB0SWC17 == "Y") /* Confirm pf17 eq no*/
        return;
      else
        FB0SW00.FB0SWC17 = "Y"; /* confirm pf17*/
        exit stack;
      end
    end
  end
  ;
  ;
end // end FB0S250

// verify corporate aid
Function FB0S251()
  if (converseVar.eventKey is enter)
    ;
    if (FB0SW00.FB0SWKCS == "N") /* key not changed*/
      ;
      if (FB0SM020.FB0SMSCR < 1 /* scroll value out*/
       || FB0SM020.FB0SMSCR > 40) /* of possible range*/
        FB0SM020.XXXMODID = "251"; /* Module identification*/
        converseLib.validationFailed(10); /* invalid data*/
        set FB0SM020.FB0SMSCR cursor, bold;
      else /* scroll value ok*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        FB0SW00.FB0SWMCS = "Y"; /* format map*/
      end
      ;
      exit stack; /* display map*/
    end
    ;
  else /* ezeaid not enter*/
    ;
    if (FB0SW00.FB0SWKCS == "N") /* key not changed*/
      ;
      if (converseVar.eventKey is pf10 /* scroll to the left*/
       || converseVar.eventKey is pf11) /* scroll to the right*/
        FB0SS18(); /* edit scroll amount*/
      end
      ;
      if (converseVar.eventKey is pf6 /* next product*/
       && FBXREC.SY1STNBR[2] == " ")  /* table empty*/
        FB0SS03(); /* ERROR PROCESSING*/
        FB0SW00.FB0SWRDS = "N"; /* dont request data*/
        converseLib.validationFailed(356); /* NO NEXT PRODUCT*/
        FB0SM020.XXXMODID = "251"; /* process number*/
      end
      ;
      /* -----------------------------------------------------------*/
        /* this next if in case the data was in error.  The map has*/
        /* already been reset, so the bad fields need to get*/
        /* highlighted again*/
      /* -----------------------------------------------------------*/
      ;
      if (converseVar.eventKey is enter) /* nothing new*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        FB0SW00.FB0SWMCS = "Y"; /* format map*/
        exit stack; /* display map*/
      end
      ;
      if (converseVar.validationMsgNum == 7) /* no more pages*/
        FB0SW00.FB0SWRDS = "Y"; /* request data*/
        exit stack; /* display map*/
      end
      ;
    end
    ;
  end
  ;
  if (FB0SM020.FB0SMSCR < 1
   || FB0SM020.FB0SMSCR > 40)
    FB0SM020.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(10); /* invalid data*/
    set FB0SM020.FB0SMSCR cursor, bold;
  end
  ;
end // end FB0S251

// process valid corp request
Function FB0S260()
  if (converseVar.eventKey is pf15) /* print screen*/
    FB0S161(); /* process print request*/
  else
    ;
    if (converseVar.eventKey is pf17) /* accept the calc*/
      if (FB0SW00.FB0SWCME == "Y") /* LESS THAN 1000 TOLERANCE NEEDS*/
                                   /* CONFIRM*/
        if (FB0SW00.FB0SWC17 == "Y") /* PF17 hit once*/
          FB0SW00.FBKCAFL = "Y"; /* set calc flag to yes*/
          FB0S162(); /* process accept the calc request*/
          FB0SW00.FB0SWC17 = "N"; /* Confirm PF17*/
        else
          return;
        end
      else
        FB0SW00.FBKCAFL = "Y"; /* set calc flag to yes*/
        FB0S162(); /* process accept the calc request*/
      end
    else
      ;
      if (converseVar.eventKey is pf6) /* next product*/
        FB0S163(); /* process next product request*/
        FB0SW00.FB0SWSCL = 0; /* To force display of first size*/
      else
        ;
        if (converseVar.eventKey is pf10 /* scroll to the left*/
         || converseVar.eventKey is pf11 /* scroll to the right*/
         || converseVar.eventKey is pf7  /* scroll up*/
         || converseVar.eventKey is pf8) /* scroll down*/
          FB0S164(); /* process scroll request*/
        else
          ;
          if (converseVar.eventKey is enter) /* key changed*/
            set FB0SW01 empty;
            FB0SW00.FB0SW1GR = FB0SW01.FB0SW1GR;
            set FB0SW02 empty;
            FB0SW00.FB0SW2GR = FB0SW02.FB0SW2GR;
            set FBXREC empty;
            FB0SW00.FB0SWSCL = 0; /* To force display of first size*/
            FB0SW00.FB0SWRDS = "Y"; /* request data*/
            FB0SW00.FB0SWMCS = "Y"; /* format map*/
          end
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
end // end FB0S260

// select set vsrqtb01
Function FB0SS01()
  ;
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from dfbuy.vsrqtp01*/
   /* ------------------------------------------------------------*/
  ;
  set FBGREC empty; /* initialise record*/
  FBGREC.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
  FBGREC.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
  FBGREC.XDMCD = FB0SM010.XDMCD; /* dimension code*/
  FBGREC.FBDBTCD = "STK";
  FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* move yymm to workarea*/
   /* -------- y2k out begin -------*/
   /* MOVE 19 TO FB0SW00.FB0SWBCC;        /* century*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  if (FB0SW00.FB0SWBYY > 65)
    FB0SW00.FB0SWBCC = 19; /* century*/
  else
    FB0SW00.FB0SWBCC = 20; /* century*/
  end
   /* -------- y2k in end ----------*/
  FB0SW00.FB0SWBDD = 1; /* day*/
  FBGREC.FB8BUYDT = FB0SW00.FB0SWBDT; /* move to ccyymm01*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBGREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBGREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBGREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* MOVE TO KEY*/
  else
    FBGREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBGREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBGREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBGREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBGREC.XUMCD = "01"; /* move default*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4630" ("S1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S01"; /* Module identification*/
  FB0SM020.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS01

// fetch next row vsrqtb01
Function FB0SS02()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4630" ("N1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBGREC.XWHCD in FB0SW00.XWH-WHSE-CD) /* a domestic whse*/
        FB0SS05(); /* save in disp ws*/
        FB0SW00.FB0SM-LAST-CALC-DT = FBGREC.ZZZSDT;
        FB0SW00.FB0SW-WORK-TIME = FBGREC.ZZZSTM;
        FB0SW00.FB0SWSRDFFL = "Y"; /* data found fl*/
        FB0SW00.FB0SWFFI = "N"; /* not first fetch any more*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S02"; /* Module identification*/
  FB0SM020.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS02

// reset map and display ws
Function FB0SS03()
  FB0SW00.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
  FB0SW00.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
  FB0SW00.PT3YYMM = FB0SM010.PT3YYMM; /* b/l date*/
  FB0SW00.XDMCD = FB0SM010.XDMCD; /* dimension code*/
  FB0SW00.SY1SSTNM = FB0SM010.SY1SSTNM; /* style short name*/
  FB0SW00.SY2CLRAB = FB0SM010.SY2CLRAB; /* color abbrev*/
  FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* buy date yymm*/
  set FB0SM010 initial; /* clear first map*/
  FB0SW00.FB0SWMIX = 1;
  ;
  while (FB0SW00.FB0SWMIX < 31)
    set FB0SM010.FB0SMBQY[FB0SWMIX] skip, invisible;
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1;
  end
  ;
  FB0SM010.SY1STNBR = FB0SW00.SY1STNBR; /* restore key data*/
  FB0SM010.SY2CLRID = FB0SW00.SY2CLRID; /* for map 1*/
  FB0SM010.PT3YYMM = FB0SW00.PT3YYMM; /* region map*/
  FB0SM010.XDMCD = FB0SW00.XDMCD;
  FB0SM010.FB0SMBMO = FB0SW00.FB0SMBMO;
  FB0SM010.FB0SMSCR = 10;
  FB0SM010.XXXCURDT = VGVar.currentShortGregorianDate;
  set FB0SM020 initial; /* clear second map*/
  FB0SM020.SY1STNBR = FB0SW00.SY1STNBR; /* restore key data*/
  FB0SM020.SY2CLRID = FB0SW00.SY2CLRID; /* for map 2*/
  FB0SM020.PT3YYMM = FB0SW00.PT3YYMM; /* corporate map*/
  FB0SM020.XDMCD = FB0SW00.XDMCD;
  FB0SM020.FB0SMBMO = FB0SW00.FB0SMBMO;
  FB0SM020.FB0SMSCR = 10;
  FB0SM020.XXXCURDT = VGVar.currentShortGregorianDate;
  FB0SW01.FB0SW1GR = FB0SW00.FB0SW1GR; /* reset disp ws to*/
  FB0SW02.FB0SW2GR = FB0SW00.FB0SW2GR; /* last good product*/
  FB0SW00.FB0SWMCS = "N"; /* dont format map*/
end // end FB0SS03

// close cursor vsrqtb01
Function FB0SS04()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4630" ("C1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S04"; /* Module identification*/
  FB0SM020.XXXMODID = "S04"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS04

// save vsrqtb01 data in disp ws
Function FB0SS05()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW02.FB0SWNSF = "Y"; /* Non standard region flag*/
  ;
  FB0SW00.FB0SWSIX = 0;
  FB0SW00.FB0SWWIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
    ;
    if (FBGREC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
     && FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] == "Y") /* warehouse*/
                                                            /* data loaded*/
      FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* to separate*/
      FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
      FB0SW00.FB0SWWIX = 4; /* end loop*/
    else
      ;
     /* IF FB0SW02.XWHCD(FB0SWWIX) EQ '  ';        /* no match in tbl*/
      if (FBGREC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
       && FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] == "N") /* warehouse*/
                                                 /* data not loaded*/
        FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] = "Y"; /* warehouse*/
        FB0SW00.FB0SWGIX = 1; /* initialise size index*/
                                                       /* data loaded*/
        ;
        while (FB0SW00.FB0SWGIX < 41) /* for all sizes*/
          FB0SW00.FB0SMBQY[FB0SWGIX] = 0; /* initialise buy qty*/
          FB0SW00.FB0SMNBL[FB0SWGIX] = 0; /* initialise b/l qty*/
          FB0SW00.FB0SMBPC[FB0SWGIX] = 0; /* initialise bl/ pct*/
          FB0SW00.FB4SZPCT[FB0SWGIX] = 0; /* initialise sz pct*/
          FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
        end
        ;
        FB0SW02.ZZZCHGCT[FB0SWWIX] = FBGREC.ZZZCHGCT;
        FB0SW02.XWHCD[FB0SWWIX] = FBGREC.XWHCD;
                                   /* first for this whse*/
        FB0SW00.FB0SWBDT = FBGREC.FB8BUYDT;
        FB0SW01.FB0SMBMO = FB0SW00.FB0SMBMO;
        FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
        FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWBUG;
        FB0SW02.FB0SWNBG[FB0SWWIX] = FB0SW00.FB0SWNBG;
        FB0SW02.FB0SWBPG[FB0SWWIX] = FB0SW00.FB0SWBPG;
        FB0SW02.FB0SWSPG[FB0SWWIX] = FB0SW00.FB0SWSPG;
        FB0SW00.FB0SWWIX = 4; /* end loop*/
        FB0SW00.FB0SWNWF = FB0SW00.FB0SWNWF + 1;
        FB0SW00.FB0SWNWD = FB0SW00.FB0SWNWF;
      else
        FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* move the buy quantities to the working storage buckets*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWGIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB0SMBQY[FB0SWGIX] = FBGREC.FB7QTB[FB0SWGIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
  end
  ;
  if (FB0SW00.FB0SWSIX > 0)
    FB0SW02.FB0SWBUG[FB0SWSIX] = FB0SW00.FB0SWBUG; /* back to table*/
  end
  ;
end // end FB0SS05

// select set vfblav01
Function FB0SS06()
  ;
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from dfbuy.vfblav01*/
   /* ------------------------------------------------------------*/
  ;
  set FBLREC empty; /* initialise record*/
  FBLREC.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
  FBLREC.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
  FBLREC.XDMCD = FB0SM010.XDMCD; /* dimension code*/
  FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* move yymm to workarea*/
   /* --------- y2k out begin ---------*/
   /* MOVE 19 TO FB0SW00.FB0SWBCC;               /* century*/
   /* --------- y2k out end -----------*/
   /* --------- y2k in  begin ---------*/
  if (FB0SW00.FB0SWBYY > 65)
    FB0SW00.FB0SWBCC = 19; /* century*/
  else
    FB0SW00.FB0SWBCC = 20; /* century*/
  end
   /* --------- y2k in end ------------*/
  FB0SW00.FB0SWBDD = 1; /* day*/
  FBLREC.FB8BUYDT = FB0SW00.FB0SWBDT; /* move to ccyymm01*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBLREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBLREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBLREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
  else
    FBLREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBLREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBLREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBLREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBLREC.XUMCD = "01"; /* move default*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* --------- y2k out begin ---------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select set*/
   /* --------- y2k out end -----------*/
   /* --------- y2k in  begin ---------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* --------- y2k in end ------------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S06"; /* Module identification*/
  FB0SM020.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS06

// fetch next row vfblav01
Function FB0SS07()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* --------- y2k out begin ---------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* --------- y2k out end -----------*/
   /* --------- y2k in begin ----------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ----------y2k in end ------------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBLREC.XWHCD in FB0SW00.XWH-WHSE-CD)
        FB0SS09(); /* save in disp ws*/
        FB0SW00.FB0SWFFI = "N"; /* not first fetch any more*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S07"; /* Module identification*/
  FB0SM020.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS07

// close cursor vfblav01
Function FB0SS08()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/
  ;
   /* -------- y2k out begin --------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select set*/
   /* -------- y2k out end   --------*/
   /* -------- y2k in  begin --------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* -------- y2k in end -----------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S09"; /* Module identification*/
  FB0SM020.XXXMODID = "S09"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS08

// save vfblav01 data in disp ws
Function FB0SS09()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWSIX = 0;
  FB0SW00.FB0SWWIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
    ;
    if (FBLREC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
     && FB0SW02.FB0SW-XWH-DATA-FOUND-FL == "Y") /* warehouse data loaded*/
      FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[FB0SWWIX]; /* to separate*/
      FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* to separate*/
      FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
      FB0SW02.FBKRDFL[FB0SWWIX] = FBLREC.FBKRDFL; /* round flag*/
      FB0SW02.FB4RGPCT[FB0SWWIX] = FBLREC.FB4RGPCT; /* region percent*/
      FB0SW00.FB0SWWIX = 4; /* end loop*/
    else
      ;
     /* IF FB0SW02.XWHCD(FB0SWWIX) EQ '  ';        /* no match in tbl*/
      if (FBLREC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
       && FB0SW02.FB0SW-XWH-DATA-FOUND-FL == "N") /* warehouse not loaded*/
        FB0SW02.FB0SW-XWH-DATA-FOUND-FL = "Y"; /* warehouse data*/
                                                     /* loaded fl*/
        FB0SW02.FB4RGPCT = FBLREC.FB4RGPCT; /* region percent*/
        FB0SW02.FBKRDFL[FB0SWWIX] = FBLREC.FBKRDFL; /* round flag*/
        FB0SW00.FB0SWNWD = FB0SW00.FB0SWNWD + 1;
        FB0SW00.FB0SWGIX = 1; /* initialise size index*/
        ;
        while (FB0SW00.FB0SWGIX < 41) /* for all sizes*/
          FB0SW00.FB0SMBQY[FB0SWGIX] = 0; /* initialise buy qty*/
          FB0SW00.FB0SMNBL[FB0SWGIX] = 0; /* initialise b/l qty*/
          FB0SW00.FB0SMBPC[FB0SWGIX] = 0; /* initialise bl/ pct*/
          FB0SW00.FB4SZPCT[FB0SWGIX] = 0; /* initialise sz pct*/
          FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
        end
        ;
        FB0SW02.XWHCD[FB0SWWIX] = FBLREC.XWHCD;
                                   /* first for this whse*/
        FB0SW01.PT3YYMM = FBLREC.PT3YYMM; /* b/l yymm*/
        FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
        FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWBUG;
        FB0SW02.FB0SWNBG[FB0SWWIX] = FB0SW00.FB0SWNBG;
        FB0SW02.FB0SWBPG[FB0SWWIX] = FB0SW00.FB0SWBPG;
        FB0SW02.FB0SWSPG[FB0SWWIX] = FB0SW00.FB0SWSPG;
        FB0SW00.FB0SWWIX = 4; /* end loop*/
      else
        FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* move the b/l quantities to the working storage buckets*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWGIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB0SWWK = FB0SW00.FB0SMNBL[FB0SWGIX];
    FB0SW00.FB0SWWK = FB0SW00.FB0SWWK + FBLREC.PT3AVQT[FB0SWGIX];
    FB0SW00.FB0SWWK = FB0SW00.FB0SWWK + FBLREC.FBLDAQTY[FB0SWGIX];
    FB0SW00.FB0SWWK = FB0SW00.FB0SWWK + FBLREC.FBLMAQTY[FB0SWGIX];
    FB0SW00.FB0SWWK = FB0SW00.FB0SWWK + FBLREC.FBLOAQTY[FB0SWGIX];
    FB0SW00.FB0SWWK = FB0SW00.FB0SWWK + FB0SW00.FB0SMBQY[FB0SWGIX];
    FB0SW00.FB0SMNBL[FB0SWGIX] = FB0SW00.FB0SWWK; /* back to bucket*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
  end
  ;
  if (FB0SW00.FB0SWSIX > 0)
    FB0SW02.FB0SWNBG[FB0SWSIX] = FB0SW00.FB0SWNBG; /* back to table*/
  end
end // end FB0SS09

// select set vcurve01
Function FB0SS10()
  set FB4REC empty; /* initialise*/
  FB4REC.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
  FB4REC.XDMCD = FB0SM010.XDMCD; /* dimension code*/
  FB4REC.XQACD = FBLREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBLREC.PC2INSEG; /* spec difference code*/
  FB4REC.XPGCD = FBLREC.XPGCD; /* package type code*/
  FB4REC.XUMCD = FBLREC.XUMCD; /* unit of measure code*/
  FB4REC.FB4STDFL = "Y"; /* use standard curve*/
  FB4REC.XSACD = "000"; /* default shade code*/
  ;
  if (FBWREC.XPGCD != " ") /* gpc code in commarea*/
    FB4REC.XGPCD = FBWREC.XGPCD; /* move to key*/
  else /* gpc code not in commarea*/
    FB4REC.XGPCD = "02"; /* move default gpc code*/
  end /* end*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS10

// fetch next row vcurve01
Function FB0SS11()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0SS13(); /* save in disp ws*/
      FB0SW00.FB0SWFFI = "N"; /* not first fetch any more*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      if (FB0SW00.FB0SWFFI == "Y")
        FB0SW02.FB0SWNSF = "NA";
      end
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S11"; /* Module identification*/
  FB0SM020.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS11

// close cursor vcurve01
Function FB0SS12()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S12"; /* Module identification*/
  FB0SM020.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0SW00.FB0SWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS12

// save vcurve01 data in disp ws
Function FB0SS13()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0SW00.FB0SWSIX = 0; /* initialise index*/
  FB0SW00.FB0SWWIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
    ;
    if (FB4REC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
     && FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] == "Y") /* warehouse*/
                                                          /* data loaded*/
      FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[FB0SWWIX]; /* to separate*/
      FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
      ;
      if (FB0SW00.FB0SWWIX == 1)
        ;
             /* IF FBXREC.FBXRPCT1(1) NE 0;*/
           /* MOVE FBXREC.FBXRPCT1(1) TO FB0SW02.FB4RGPCT(FB0SWWIX);*/
             /* ELSE ;*/
           /* MOVE FB0SW02.FB4RGPCT(FB0SWWIX) TO FBXREC.FBXRPCT1(1);*/
             /* END ;*/
        ;
        if (FB4REC.FB4RGPCT != FB0SW02.FB4RGPCT[FB0SWWIX])
          FB0SW02.FB0SWNSF = "N";
        end
        ;
      end
      ;
      if (FB0SW00.FB0SWWIX == 2)
        ;
            /* IF FBXREC.FBXRPCT2(1) NE 0;*/
              /* MOVE FBXREC.FBXRPCT2(1) TO FB0SW02.FB4RGPCT(FB0SWWIX);*/
            /* ELSE ;*/
              /* MOVE FB0SW02.FB4RGPCT(FB0SWWIX) TO FBXREC.FBXRPCT2(1);*/
            /* END ;*/
        if (FB4REC.FB4RGPCT != FB0SW02.FB4RGPCT[FB0SWWIX])
          FB0SW02.FB0SWNSF = "N";
        end
        ;
      end
      ;
      if (FB0SW00.FB0SWWIX == 3)
        ;
            /* IF FBXREC.FBXRPCT3(1) NE 0;*/
              /* MOVE FBXREC.FBXRPCT3(1) TO FB0SW02.FB4RGPCT(FB0SWWIX);*/
            /* ELSE ;*/
              /* MOVE FB0SW02.FB4RGPCT(FB0SWWIX) TO FBXREC.FBXRPCT3(1);*/
            /* END ;*/
        if (FB4REC.FB4RGPCT != FB0SW02.FB4RGPCT[FB0SWWIX])
          FB0SW02.FB0SWNSF = "N";
        end
        ;
      end
      ;
      FB0SW00.FB0SWWIX = 4; /* end loop*/
    else
      ;
     /* IF FB0SW02.XWHCD(FB0SWWIX) EQ '  ';        /* no match in tbl*/
      if (FB4REC.XWHCD == FB0SW02.XWHCD[FB0SWWIX] /* warehouses match*/
       && FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] == "N") /* warehouse*/
                                                      /* not loaded*/
        FB0SW00.FB0SWGIX = 1; /* initialise size index*/
        FB0SW02.FB0SW-XWH-DATA-FOUND-FL[FB0SWWIX] = "Y"; /* warehouse*/
                                                          /* data loaded*/
        ;
        while (FB0SW00.FB0SWGIX < 41) /* for all sizes*/
          FB0SW00.FB0SMBQY[FB0SWGIX] = 0; /* initialise buy qty*/
          FB0SW00.FB0SMNBL[FB0SWGIX] = 0; /* initialise b/l qty*/
          FB0SW00.FB0SMBPC[FB0SWGIX] = 0; /* initialise bl/ pct*/
          FB0SW00.FB4SZPCT[FB0SWGIX] = 0; /* initialise sz pct*/
          FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
        end
        ;
        FB0SW00.FB0SWNWD = FB0SW00.FB0SWNWD + 1;
        FB0SW02.XWHCD[FB0SWWIX] = FB4REC.XWHCD;
                                   /* first for this whse*/
        FB0SW00.FB0SWSIX = FB0SW00.FB0SWWIX; /* save index*/
        FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWBUG;
        FB0SW02.FB0SWNBG[FB0SWWIX] = FB0SW00.FB0SWNBG;
        FB0SW02.FB0SWBPG[FB0SWWIX] = FB0SW00.FB0SWBPG;
        FB0SW02.FB0SWSPG[FB0SWWIX] = FB0SW00.FB0SWSPG;
        ;
        if (FB0SW00.FB0SWWIX == 1)
          ;
          if (FBXREC.FBXRPCT1[1] != 0)
            FB0SW02.FB4RGPCT[FB0SWWIX] = FBXREC.FBXRPCT1[1];
          else
            FBXREC.FBXRPCT1[1] = FBLREC.FB4RGPCT;
          end
          ;
        end
        ;
        if (FB0SW00.FB0SWWIX == 2)
          ;
          if (FBXREC.FBXRPCT2[1] != 0)
            FB0SW02.FB4RGPCT[FB0SWWIX] = FBXREC.FBXRPCT2[1];
          else
            FBXREC.FBXRPCT2[1] = FBLREC.FB4RGPCT;
          end
          ;
        end
        ;
        if (FB0SW00.FB0SWWIX == 3)
          ;
          if (FBXREC.FBXRPCT3[1] != 0)
            FB0SW02.FB4RGPCT[FB0SWWIX] = FBXREC.FBXRPCT3[1];
          else
            FBXREC.FBXRPCT3[1] = FBLREC.FB4RGPCT;
          end
          ;
        end
        ;
        FB0SW00.FB0SWWIX = 4; /* end loop*/
      else
        FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1; /* next warehouse*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* move the size percents to the working storage buckets*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWGIX = 1; /* initialise index*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB4SZPCT[FB0SWGIX] = FB4REC.FB4SZPCT[FB0SWGIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
  end
  ;
  if (FB0SW00.FB0SWSIX > 0)
    FB0SW02.FB0SWSPG[FB0SWSIX] = FB0SW00.FB0SWSPG; /* back to table*/
  end
end // end FB0SS13

// calc totals
Function FB0SS14()
   /* ------------------------------------------------------------*/
    /* calculate buy quantity by first seeing if rounding is*/
    /* necessary. then, calculate corp buy quantity by size,*/
    /* buy quantity by warehouse, and total corp buy quantity*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* separate*/
  FB0SW00.FB0SWGIX = 1; /* first size*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB0SWWK = FB0SW00.FB0SMBQY[FB0SWGIX];
    FB0SW00.FB0SWBQ2[FB0SWGIX] = FB0SW00.FB0SWBQ2[FB0SWGIX] + FB0SW00.FB0SWWK;
    FB0SW02.FB0SMBQT[FB0SWWIX] = FB0SW02.FB0SMBQT[FB0SWWIX] + FB0SW00.FB0SWWK;
    FB0SW02.FB0SMBQT[4] = FB0SW02.FB0SMBQT[4] + FB0SW00.FB0SWWK;
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
    /* calculate corp b/l quantity by size, b/l total quantity by*/
    /* warehouse, and total corp b/l quantity*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[FB0SWWIX]; /* separate*/
  FB0SW00.FB0SWGIX = 1; /* first size*/
  ;
  while (FB0SW00.FB0SWGIX < 41) /* for each size*/
    FB0SW00.FB0SWWK = FB0SW00.FB0SMNBL[FB0SWGIX];
    FB0SW00.FB0SWNBC[FB0SWGIX] = FB0SW00.FB0SWNBC[FB0SWGIX] + FB0SW00.FB0SWWK;
    FB0SW02.FB0SMNBT[FB0SWWIX] = FB0SW02.FB0SMNBT[FB0SWWIX] + FB0SW00.FB0SWWK;
    FB0SW02.FB0SMNBT[4] = FB0SW02.FB0SMNBT[4] + FB0SW00.FB0SWWK;
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
end // end FB0SS14

// calc b/l pct by size/whse
Function FB0SS15()
  FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[FB0SWWIX];
  FB0SW00.FB0SWGIX = 1;
  ;
  while (FB0SW00.FB0SWGIX < 41)
    ;
    if (FB0SW02.FB0SMNBT[FB0SWWIX] == 0)
      FB0SW00.FB0SMBPC[FB0SWGIX] = 0;
    else
      FB0SW00.FB0SWWK = FB0SW02.FB0SMNBT[FB0SWWIX];
      FB0SW00.FB0SWWK2 = 100 * FB0SW00.FB0SMNBL[FB0SWGIX] / FB0SW00.FB0SWWK;
      FB0SW00.FB0SWWK2 = FB0SW00.FB0SWWK2 + .05;
      FB0SW00.FB0SMBPC[FB0SWGIX] = FB0SW00.FB0SWWK2;
    end
    ;
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
  if (FB0SW02.FB0SMNBT[4] == 0)
    FB0SW02.FB0SMBPT[FB0SWWIX] = 0;
  else
    FB0SW00.FB0SWWK2 = 100 * FB0SW02.FB0SMNBT[FB0SWWIX] / FB0SW02.FB0SMNBT[4];
    FB0SW02.FB0SMBPT[FB0SWWIX] = FB0SW00.FB0SWWK2;
  end
  ;
  FB0SW02.FB0SWNBG[FB0SWWIX] = FB0SW00.FB0SWNBG;
  FB0SW02.FB0SWBPG[FB0SWWIX] = FB0SW00.FB0SWBPG;
end // end FB0SS15

// calc corporate percents
Function FB0SS16()
   /* ------------------------------------------------------------*/
    /* calculate corporate b/l pct(size) = corp b/l qty (size) /*/
                                        /* total corp b/l qty*/
   /* ------------------------------------------------------------*/
  FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[4];
  FB0SW00.FB0SWGIX = 1;
  ;
  while (FB0SW00.FB0SWGIX < 41)
    FB0SW00.FB0SWWK = FB0SW00.FB0SMNBL[FB0SWGIX];
    if (FB0SW02.FB0SMNBT[4] != 0)
      FB0SW00.FB0SWWK2 = 100 * FB0SW00.FB0SWWK / FB0SW02.FB0SMNBT[4];
      FB0SW00.FB0SWWK2 = FB0SW00.FB0SWWK2 + .05;
    else
      FB0SW00.FB0SMBPC[FB0SWGIX] = 0;
    end
    FB0SW00.FB0SMBPC[FB0SWGIX] = FB0SW00.FB0SWWK2;
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
  FB0SW02.FB0SWBPG[4] = FB0SW00.FB0SWBPG;
  ;
   /* ------------------------------------------------------------*/
    /* calculate corporate std size pct(size)*/
         /* = sz pct(warehouse, size) * std reg pct (warehouse)*/
         /* sum for each warehouse*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWGIX = 1;
  ;
  while (FB0SW00.FB0SWGIX < 41)
    FB0SW00.FB0SWWIX = 1;
    FB0SW00.FB0SWPC2[FB0SWGIX] = 0;
    ;
    while (FB0SW00.FB0SWWIX <= FB0SW00.FB0SW-VALID-SYCLR-WHSE-CNT)
      FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[FB0SWWIX];
      FB0SW00.FB0SWWK2 = FB0SW00.FB4SZPCT[FB0SWGIX];
      FB0SW00.FB0SWWK3 = FB0SW00.FB0SWWK2 * FB0SW02.FB4RGPCT[FB0SWWIX] / 100;
      FB0SW00.FB0SWPC2[FB0SWGIX] = FB0SW00.FB0SWPC2[FB0SWGIX] + FB0SWWK3;
      FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
    end
    ;
     /* FB0SW00.FB0SWPC2(FB0SWGIX)=FB0SW00.FB0SWPC2(FB0SWGIX)+.05*/
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
  FB0SW02.FB0SWSPG[4] = FB0SW00.FB0SWPG2;
end // end FB0SS16

// calc scroll limits
Function FB0SS17()
  FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[4];
  FB0SW00.FB0SWNBG = FB0SW02.FB0SWNBG[4];
  FB0SW00.FB0SWBPG = FB0SW02.FB0SWBPG[4];
  FB0SW00.FB0SWSPG = FB0SW02.FB0SWSPG[4];
  FB0SW00.FB0SWGIX = 1;
  ;
  while (PG3REC.SY4IDDSC[FB0SWGIX] == " "
   && FB0SW00.FB0SMBQY[FB0SWGIX] == 0
   && FB0SW00.FB0SMNBL[FB0SWGIX] == 0
   && FB0SW00.FB0SMBPC[FB0SWGIX] == 0
   && FB0SW00.FB4SZPCT[FB0SWGIX] == 0
   && FB0SW00.FB0SWGIX < 41)
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1;
  end
  ;
  if (FB0SW00.FB0SWGIX < 41)
    FB0SW00.FB0SWSLB = FB0SW00.FB0SWGIX; /* scroll low boundary*/
  else
    FB0SW00.FB0SWSLB = 1;
  end
  ;
  FB0SW00.FB0SWGIX = 40;
  ;
  while (PG3REC.SY4IDDSC[FB0SWGIX] == " "
   && FB0SW00.FB0SMBQY[FB0SWGIX] == 0
   && FB0SW00.FB0SMNBL[FB0SWGIX] == 0
   && FB0SW00.FB0SMBPC[FB0SWGIX] == 0
   && FB0SW00.FB4SZPCT[FB0SWGIX] == 0
   && FB0SW00.FB0SWGIX > 0)
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX - 1;
  end
  ;
  if (FB0SW00.FB0SWGIX > 1)
    FB0SW00.FB0SWSHB = FB0SW00.FB0SWGIX; /* scroll low boundary*/
  else
    FB0SW00.FB0SWSHB = 40;
  end
  ;
end // end FB0SS17

// vaildate scroll size
Function FB0SS18()
  if (FB0SW00.FB0SWSCL <= FB0SW00.FB0SWSLB /* start col less than left bnd*/
   && converseVar.eventKey is pf10)        /* scroll left*/
    converseLib.validationFailed(23); /* no more left*/
    FB0SM010.XXXMODID = "S18"; /* process id*/
  end
  ;
  if (FB0SW00.FB0SWECL > FB0SW00.FB0SWSHB
   /* end col greater than right bnd*/
   && converseVar.eventKey is pf11) /* scroll right*/
    converseLib.validationFailed(24); /* no more right*/
    FB0SM010.XXXMODID = "S18"; /* process id*/
  end
  ;
end // end FB0SS18

// update vsrqtb01 row
Function FB0SS21()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBGREC empty; /* initialise record*/
  FBGREC.SY1STNBR = FB0SM010.SY1STNBR; /* style number*/
  FBGREC.SY2CLRID = FB0SM010.SY2CLRID; /* color code*/
  FBGREC.XDMCD = FB0SM010.XDMCD; /* dimension code*/
  FBGREC.XWHCD = FB0SW02.XWHCD[FB0SWWIX]; /* warehouse code*/
  FBGREC.FBDBTCD = "STK";
  FB0SW00.FB0SMBMO = FB0SM010.FB0SMBMO; /* move yymm to workarea*/
   /* ------- y2k out begin ------*/
  FB0SW00.FB0SWBCC = 19; /* buy century*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  if (FB0SW00.FB0SWBYY > 65)
    FB0SW00.FB0SWBCC = 19; /* buy century*/
  else
    FB0SW00.FB0SWBCC = 20; /* buy century*/
  end
   /* ------- y2k in end ---------*/
  FB0SW00.FB0SWBDD = 01; /* buy day*/
  FBGREC.FB8BUYDT = FB0SW00.FB0SWBDT; /* move to ccyymm01*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBGREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBGREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBGREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
  else
    FBGREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBGREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBGREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBGREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBGREC.XUMCD = "01"; /* move default*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4630" ("S ", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S21"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
      converseLib.validationFailed(10); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev updtes*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000")
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev updtes*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (FBGREC.ZZZCHGCT != FB0SW02.ZZZCHGCT[FB0SWWIX])
    converseLib.validationFailed(20); /* updated since last access*/
    FB0SM010.XXXMODID = "S21"; /* module identification*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
                                   /* roll back any prev changes*/
    exit stack; /* display map*/
  end
  ;
  if (FB0SW00.FB0SWWIX == 1) /* first warehouse*/
    FB0SW00.FB0SWMIX = 1; /* first screen set*/
  else
    if (FB0SW00.FB0SWWIX == 2) /* second warehouse*/
      FB0SW00.FB0SWMIX = 11; /* second screen set*/
    else
      if (FB0SW00.FB0SWWIX == 3) /* third warehouse*/
        FB0SW00.FB0SWMIX = 21; /* third screen set*/
      end
    end
  end
  ;
  FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX]; /* to separate*/
  FB0SW00.FB0SWGIX = FB0SW00.FB0SWSCL; /* first screen column*/
  ;
  while (FB0SW00.FB0SWGIX < FB0SW00.FB0SWECL) /* until last screen col*/
    FBGREC.FB7QTB[FB0SWGIX] = FB0SM010.FB0SMBQY[FB0SWMIX];
    FB0SW00.FB0SMBQY[FB0SWGIX] = FB0SM010.FB0SMBQY[FB0SWMIX];
    FB0SW00.FB0SWGIX = FB0SW00.FB0SWGIX + 1; /* next size*/
    FB0SW00.FB0SWMIX = FB0SW00.FB0SWMIX + 1; /* next screen col*/
  end
  ;
  FB0SW02.FB0SWBUG[FB0SWWIX] = FB0SW00.FB0SWBUG; /* back to table*/
  ;
   /* ------------------------------------------------------------*/
   /* update the row which was just selected*/
   /* ------------------------------------------------------------*/
  ;
  FBGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO4630" ("U ", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(20); /* updated since last access*/
      FB0SM010.XXXMODID = "S21"; /* module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* display map*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* nermal return code*/
      return; /* return to performing process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0SM010.XXXMODID = "S21"; /* Module identification*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
      converseLib.validationFailed(10); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0SM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBGREC.FBGGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FB0SS21

// Check tolerance level
Function FB0SS22()
  ;
   /* **********************************************************/
   /* Total all of the buy size buckets for each region and*/
   /* check against the buy tolerance qty on the control*/
   /* record.*/
   /* **********************************************************/
  ;
  FB0SS23(); /* Obtain control record*/
  ;
  FB0SW00.FB0SWCBT = 0; /* Corp buy total*/
  FB0SW00.FB0SWWIX = 1;
  ;
  while (FB0SW00.FB0SWWIX <= 3
   && FB0SW00.FB0SWWIX <= FB0SW00.FB0SWNWF) /* Warehouse totals*/
    FB0SW00.FB0SWBUG = FB0SW02.FB0SWBUG[FB0SWWIX];
    FB0SW00.FB0SWIX1 = 1;
    FB0SW00.FB0SWRBT = 0;
    ;
    while (FB0SW00.FB0SWIX1 <= 40)
      FB0SW00.FB0SWWF1 = FB0SW00.FB0SMBQY[FB0SWIX1];
      FB0SW00.FB0SWRBT = FB0SW00.FB0SWRBT + FB0SW00.FB0SWWF1;
      FB0SW00.FB0SWIX1 = FB0SW00.FB0SWIX1 + 1;
    end
    if (FB0SW00.FB0SWRBT != 0
     && FB0SW00.FB0SWRBT < FB9REC.FB9BTQTY)
      if (converseVar.eventKey is pf17)
        if (FB0SW00.FB0SWMNO != 1)
          FB0SW00.FB0SWMNO = 1; /* request map 1 display*/
          FB0SW00.FB0SWMCS = "Y"; /* Format map*/
        end
        FB0SW00.FB0SWRTE = "Y"; /* Region tolerance error*/
        converseLib.validationFailed(341);
                                   /* qty changed less than tolerance level*/
        FB0SM010.FB0SMBQT[FB0SWWIX] = FB0SW00.FB0SWRBT;
        set FB0SM010.FB0SMBQT[FB0SWWIX] bold;
      else
        FB0SW00.FB0SWRTE = "N";
      end
    end
    FB0SW00.FB0SWCBT = FB0SW00.FB0SWCBT + FB0SW00.FB0SWRBT;
    FB0SW00.FB0SWWIX = FB0SW00.FB0SWWIX + 1;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* Subtract all of the accumulated direct ship qty minus preadvises*/
   /* from the forecast qty. Subtract the corporation buy total from*/
   /* the forecast qty minus the (direct ship minus preadvise).*/
  ;
  FB0SW00.FB0SWWF1 = FBKREC.FB8FTQTB - FB0SW00.FB0SW-DIR-SHP-PREADV-TOT;
  FB0SW00.FB0SWDIF = FB0SW00.FB0SWWF1 - FB0SW00.FB0SWCBT;
  ;
  ;
  FB0SM020.FB0SMSBT = FB0SW00.FB0SWWF1;
  FB0SW02.FB0SWSBT = FB0SW00.FB0SWWF1;
  FB0SM020.FB0SMCST = FB0SW00.FB0SWCBT;
  FB0SW02.FB0SWCST = FB0SW00.FB0SWCBT;
  FB0SM020.FB0SMCSV = FB0SW00.FB0SWDIF;
  FB0SW02.FB0SWCSV = FB0SW00.FB0SWDIF;
  ;
   /* If the difference is greater than 1000--it is an error*/
   /* that must be corrected.*/
  ;
  FB0SW00.FB0SWCPE = "N"; /* Corp plus error*/
  ;
  if (FB0SW00.FB0SWDIF != 0
   && converseVar.eventKey is pf17)
    if (FB0SW00.FB0SWDIF > 0)
      if (FB0SW00.FB0SWDIF > 1000)
        FB0SW00.FB0SWMNO = 2; /* request map 2 display*/
        FB0SW00.FB0SWCPE = "Y"; /* Corp tolerance plus error*/
        FBXREC.XXXMSGNO = 339; /* Calc buy variance > 1000*/
        FB0SW00.FB0SMSCR = FB0SM020.FB0SMSCR;
        FB0SW00.FB0SWMCS = "Y"; /* Format map*/
        FB0SW00.FB0SWC17 = "N"; /* confirm PF17*/
        return;
      end
    else /* fb0swdif is negative*/
      if (FB0SW00.FB0SWDIF < -1000)
        FB0SW00.FB0SWMNO = 2; /* request map 2 display*/
        FB0SW00.FB0SWCPE = "Y"; /* Corp tolerance plus error*/
        FBXREC.XXXMSGNO = 339; /* Calc buy variance > 1000*/
        FB0SW00.FB0SMSCR = FB0SM020.FB0SMSCR;
        FB0SW00.FB0SWMCS = "Y"; /* Format map*/
        FB0SW00.FB0SWC17 = "N"; /* Confirm PF17*/
        return;
      end
    end
  end
  ;
  ;
   /* If the difference is less than 1000  PF17 must be*/
   /* If the difference is less than 1000(but <> 300)*/
   /* PF 17 must be confirmed before an update is allowed.*/
  ;
  FB0SW00.FB0SWCME = "N"; /* Corp minus error*/
  ;
  if (FB0SW00.FB0SWDIF != 0
   && converseVar.eventKey is pf17)
    if (FB0SW00.FB0SWDIF > 0)
      if (FB0SW00.FB0SWDIF < 1000
       && FB0SW00.FB0SWDIF > 300)
        FB0SW00.FB0SWMNO = 2; /* request map 2 display*/
        FBXREC.XXXMSGNO = 340; /* Calc buy variance < 1000*/
        FB0SW00.FB0SWCME = "Y"; /* Corp minus error*/
        FB0SW00.FB0SMSCR = FB0SM020.FB0SMSCR;
        FB0SW00.FB0SWMCS = "Y"; /* Format map*/
      end
    else /* difference is negative*/
      if (FB0SW00.FB0SWDIF > -1000 /* difference is < -1000*/
       && FB0SW00.FB0SWDIF < -300)
        FB0SW00.FB0SWMNO = 2; /* request map 2 display*/
        FBXREC.XXXMSGNO = 340; /* Calc buy variance < 1000*/
        FB0SW00.FB0SWCME = "Y"; /* Corp minus error*/
        FB0SW00.FB0SMSCR = FB0SM020.FB0SMSCR;
        FB0SW00.FB0SWMCS = "Y"; /* Format map*/
      end
    end
  end
  ;
end // end FB0SS22

// Obtain control record
Function FB0SS23()
  ;
  set FB9REC empty;
  ;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS23"; /* Process name*/
  TA1REC.TA1LOC = "FETCH CONTROL RECORD    ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS23";
  exit stack;
  ;
end // end FB0SS23

// Open VDNORD01 cursor
Function FB0SS24()
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SWDCF = "N"; /* Set cursor to no*/
  ;
  ;
  ;
  try
    call "IO4640" ("S7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS24"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS24";
  exit stack;
  ;
end // end FB0SS24

// Fetch VDNORD01 row
Function FB0SS25()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("N7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0SW00.FB0SWDCF = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS25"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS25";
  exit stack;
  ;
end // end FB0SS25

// Close VDNORD01 row
Function FB0SS26()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("C7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS26"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS26";
  exit stack;
  ;
end // end FB0SS26

// check for preadvises
Function FB0SS27()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS27"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS27";
  exit stack;
  ;
end // end FB0SS27

// check for diverts
Function FB0SS28()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01,*/
   /* as well as count of DPRODC.VPOITM01 table entries,*/
   /* for each style, color, dimension, and sales order*/
   /* where the adjustment type is not 'pr'.*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW00.FB0SW-OA-COUNT = 0;
  FB0SS281(); /* determine oa item count*/
  ;
  FB0SW00.FB0SW-PO-COUNT = 0;
  FB0SS282(); /* determine po item count*/
  ;
  if (FB0SW00.FB0SW-OA-COUNT > 0
   && FB0SW00.FB0SW-PO-COUNT > 0)
    FB0SW00.FB0SW-DIVERT-COUNT = 0;
  else
    if (FB0SW00.FB0SW-OA-COUNT > 0
     && FB0SW00.FB0SW-PO-COUNT == 0)
      FB0SW00.FB0SW-DIVERT-COUNT = 1;
    else
      if (FB0SW00.FB0SW-OA-COUNT == 0
       && FB0SW00.FB0SW-PO-COUNT > 0)
        FB0SW00.FB0SW-DIVERT-COUNT = 1;
      else
        if (FB0SW00.FB0SW-OA-COUNT == 0
         && FB0SW00.FB0SW-PO-COUNT == 0)
          FB0SW00.FB0SW-DIVERT-COUNT = 0;
        end
      end
    end
  end
  ;
  ;
end // end FB0SS28

// determine OA count
Function FB0SS281()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* where the adjustment type is not 'pr'.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0SW00.FB0SW-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS281"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS281";
  exit stack;
  ;
end // end FB0SS281

// determine PO count
Function FB0SS282()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* where the adjustment type is not 'pr'.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0SW00.FB0SW-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0SS282"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0SM010.XXXMODID = "FB0SS282";
  exit stack;
  ;
end // end FB0SS282

// Submit prod jcl
Function FB0SS30()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0SW00.FB0SWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0SW00.FB0SWTIX > 0) /* Until end of table*/
    ;
    if (FB0ST01.TARTYPE[FB0SWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FB0ST01.TARTYPE[FB0SWTIX]; /* Type*/
      ;
      FB0SS31(); /* formats JCL*/
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0ST01.TARJCL[FB0SWTIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0ST01.TARTYPE[FB0SWTIX]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0ST01.TARJCL[FB0SWTIX] == "/*EOF") /* End of table*/
      ;
      FB0SW00.FB0SWTIX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0SW00.FB0SWTIX = FB0SW00.FB0SWTIX + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  FB0SS32(); /* Submit the jcl*/
  ;
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0SS30

// Format parms
Function FB0SS31()
  ;
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
  FB0SW03.FB0SWCMT = "//*"; /* indicate a comment jcl card*/
  ;
  FB0SW03.XGPCD = "02";
  FB0SW03.SY1STNBR = FBGREC.SY1STNBR;
  FB0SW03.SY2CLRID = FBGREC.SY2CLRID;
  FB0SW03.XDMCD = FBGREC.XDMCD;
  FB0SW03.XQACD = FBGREC.XQACD;
  FB0SW03.PC2INSEG = FBGREC.PC2INSEG;
  FB0SW03.XPGCD = FBGREC.XPGCD;
  FB0SW03.XUMCD = FBGREC.XUMCD;
  FB0SW03.FB0SMBMO = FB0SW01.FB0SMBMO;
  TA6REC.TARJCL[TA6INDEX] = FB0SW03.FB0SWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = FB0SW03.FB0SWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  ;
  ;
end // end FB0SS31

// Submit batch jcl
Function FB0SS32()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no end of job msg*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(76);
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0SM010.XXXMODID = "S32"; /* module identification*/
    FB0SM020.XXXMODID = "S32"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0SM010.XXXMODID = "S32"; /* module identification*/
    FB0SM020.XXXMODID = "S32"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS32

// Submit test jcl
Function FB0SS33()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0SW00.FB0SWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0SW00.FB0SWTIX > 0) /* Until end of table*/
    ;
    if (FB0STT1.TARTYPE[FB0SWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FB0STT1.TARTYPE[FB0SWTIX]; /* Type*/
      ;
      FB0SS31(); /* formats JCL*/
      ;
    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0STT1.TARJCL[FB0SWTIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0STT1.TARTYPE[FB0SWTIX]; /* Type*/
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0STT1.TARJCL[FB0SWTIX] == "/*EOF") /* End of table*/
      ;
      FB0SW00.FB0SWTIX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0SW00.FB0SWTIX = FB0SW00.FB0SWTIX + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  FB0SS32(); /* Submit the jcl*/
  ;
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0SS33

// Load summary code array
Function FB0SS34()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB0SS35(); /* declare cursor*/
  FB0SW00.FB0SWIX1 = 1; /* first row*/
  FB0SW00.FB0SW-XWH-WHSE-CNT = 0;
  ;
  while (FB0SW00.FB0SWIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB0SS36(); /* fetch row*/
    FB0SW00.FB0SWIX1 = FB0SW00.FB0SWIX1 + 1; /* next row*/
    ;
  end
  ;
  if (FB0SW00.FB0SWIX1 <= 10)
    FB0SS37(); /* close cursor*/
    return; /* return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0SM010.XXXMODID = "S34"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FB0SS34"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS34

// Declare cursor DCORP.VSUMCD01
Function FB0SS35()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S35"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FB0SS35"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS35

// Fetch row DCORP.VSUMCD01
Function FB0SS36()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0SW00.FB0SW-XWH-WHSE-CNT = FB0SW00.FB0SW-XWH-WHSE-CNT + 1;
      FB0SW00.XWH-WHSE-CD[FB0SWIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0SM010.XXXMODID = "S36"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "FB0SS36"; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB0SW00.FB0SWRDS = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FB0SS36

// Close cursor DCORP.VSUMCD01
Function FB0SS37()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0SM010.XXXMODID = "S37"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FB0SS37"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0SW00.FB0SWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0SS37

//*** RECORD=FB0SW00 ****
// misc working storage for fb0r
// ***********************
Record FB0SW00 type basicRecord
  10 FB0SWBDT FB0SWBDT ; 
    15 FB0SWBCC FB0SWBCC ; 
    15 FB0SMBMO FB0SMBMO ; 
      20 FB0SWBYY FB0SWBYY ; 
      20 FB0SWBMM FB0SWBMM ; 
    15 FB0SWBDD FB0SWBDD ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 FB0SMSCR FB0SMSCR ; 
  10 FB0SWFFI FB0SWFFI ; 
  10 FB0SWMCS FB0SWMCS ; 
  10 FB0SWRDS FB0SWRDS ; 
  10 FB0SWKCS FB0SWKCS ; 
  10 FB0SWDCS FB0SWDCS ; 
  10 FB0SWBCS FB0SWBCS ; 
  10 FB0SWSCS FB0SWSCS ; 
  10 FB0SWBPS FB0SWBPS ; 
  10 FB0SWRTE FB0SWRTE ; 
  10 FB0SWCPE FB0SWCPE ; 
  10 FB0SWCME FB0SWCME ; 
  10 FB0SWC17 FB0SWC17 ; 
  10 FB0SWDCF FB0SWDCF ; 
  10 FB0SWSCL FB0SWSCL ; 
  10 FB0SWECL FB0SWECL ; 
  10 FB0SWSLB FB0SWSLB ; 
  10 FB0SWSHB FB0SWSHB ; 
  10 FB0SWHIX FB0SWHIX ; 
  10 FB0SWGIX FB0SWGIX ; 
  10 FB0SWLIX FB0SWLIX ; 
  10 FB0SWMIX FB0SWMIX ; 
  10 FB0SWSIX FB0SWSIX ; 
  10 FB0SWTIX FB0SWTIX ; 
  10 FB0SWWIX FB0SWWIX ; 
  10 FB0SWIX1 FB0SWIX1 ; 
  10 FB0SWIX2 FB0SWIX2 ; 
  10 FB0SWNWF FB0SWNWF ; 
  10 FB0SWNWD FB0SWNWD ; 
  10 FB0SWMNO FB0SWMNO ; 
  10 FB8BUYDT FB8BUYDT ; 
  10 FB0SWDST FB0SWDST ; 
  10 FB0SWBUG FB0SWBUG ; 
    15 FB0SMBQY FB0SMBQY [40] ; 
  10 FB0SWNBG FB0SWNBG ; 
    15 FB0SMNBL FB0SMNBL [40] ; 
  10 FB0SWBU2 FB0SWBU2 ; 
    15 FB0SWBQ2 FB0SWBQ2 [40] ; 
  10 FB0SWNB2 FB0SWNB2 ; 
    15 FB0SWNBC FB0SWNBC [40] ; 
  10 FB0SWBPG FB0SWBPG ; 
    15 FB0SMBPC FB0SMBPC [40] ; 
  10 FB0SWSPG FB0SWSPG ; 
    15 FB4SZPCT FB4SZPCT [40] ; 
  10 FB0SWPG2 FB0SWPG2 ; 
    15 FB0SWPC2 FB0SWPC2 [40] ; 
  10 FBKCAFL FBKCAFL ; 
  10 FB0SWRBT FB0SWRBT ; 
  10 FB0SWCBT FB0SWCBT ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 PT3YYMM PT3YYMM ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FB0SWWK FB0SWWK ; 
  10 FB0SWWK2 FB0SWWK2 ; 
  10 FB0SWWK3 FB0SWWK3 ; 
  10 FB0SWWF1 FB0SWWF1 ; 
  10 FB0SWDIF FB0SWDIF ; 
  10 FB0SW1GR FB0SW1GR ; 
  10 FB0SW2GR FB0SW2GR ; 
  10 FB0SMSTQ FB0SMSTQ ; 
  10 FB0SM-LAST-CALC-DT FB0SM-LAST-CALC-DT ; 
  10 FB0SW-WORK-TIME FB0SW-WORK-TIME ; 
    15 FB0SW-WORK-HH FB0SW-WORK-HH ; 
    15 FB0SW-WORK-MN FB0SW-WORK-MN ; 
  10 FB0SW-REFORMAT-TIME FB0SW-REFORMAT-TIME ; 
    15 FB0SW-REFORMAT-HH FB0SW-REFORMAT-HH ; 
    15 FB0SW-REFORMAT-COLON FB0SW-REFORMAT-COLON ; 
    15 FB0SW-REFORMAT-MN FB0SW-REFORMAT-MN ; 
  10 FB0SWSRDFFL FB0SWSRDFFL ; 
  10 FB0SW-ORD-ADJ-BUY-DT FB0SW-ORD-ADJ-BUY-DT ; 
    15 FB0SW-ORD-ADJ-BUY-MO FB0SW-ORD-ADJ-BUY-MO ; 
    15 FB0SW-ORD-ADJ-BUY-DD FB0SW-ORD-ADJ-BUY-DD ; 
  10 FB0SW-PREADVISE-TOT FB0SW-PREADVISE-TOT ; 
  10 FB0SW-DIVERT-TOT FB0SW-DIVERT-TOT ; 
  10 FB0SW-DIVERT-COUNT FB0SW-DIVERT-COUNT ; 
  10 FB0SW-OA-COUNT FB0SW-OA-COUNT ; 
  10 FB0SW-PO-COUNT FB0SW-PO-COUNT ; 
  10 FB0SW-DIR-SHP-PREADV-TOT FB0SW-DIR-SHP-PREADV-TOT ; 
  10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
  10 FB0SW-VALID-SYCLR-WHSE-CNT FB0SW-VALID-SYCLR-WHSE-CNT ; 
  10 FB0SW-XWH-WHSE-CNT FB0SW-XWH-WHSE-CNT ; 
  10 FB0SW-VALID-SYCLR-WHSE FB0SW-VALID-SYCLR-WHSE [3] ; 
  10 FB0SW-MATCH FB0SW-MATCH ; 
  10 FB0SW-TMP-DT FB0SW-TMP-DT ; 
    15 FB0SW-TMP-CC FB0SW-TMP-CC ; 
    15 FB0SW-TMP-YY FB0SW-TMP-YY ; 
    15 FB0SW-TMP-MM FB0SW-TMP-MM ; 
    15 FB0SW-TMP-DD FB0SW-TMP-DD ; 
  10 FB0SW-CHK-DT FB0SW-CHK-DT ; 
    15 FB0SW-CHK-CY FB0SW-CHK-CY ; 
      20 FB0SW-CHK-CC FB0SW-CHK-CC ; 
      20 FB0SW-CHK-YY FB0SW-CHK-YY ; 
    15 FB0SW-CHK-MM FB0SW-CHK-MM ; 
    15 FB0SW-CHK-DM FB0SW-CHK-DM ; 
  10 FB0SW-CHK-DTE FB0SW-CHK-DTE ; 
  10 FB0SW-CUR-DT FB0SW-CUR-DT ; 
    15 FB0SW-CUR-CY FB0SW-CUR-CY ; 
      20 FB0SW-CUR-CC FB0SW-CUR-CC ; 
      20 FB0SW-CUR-YY FB0SW-CUR-YY ; 
    15 FB0SW-CUR-MM FB0SW-CUR-MM ; 
    15 FB0SW-CUR-DD FB0SW-CUR-DD ; 
  10 FB0SW-BUY-DT FB0SW-BUY-DT ; 
    15 FB0SW-BUY-CY FB0SW-BUY-CY ; 
      20 FB0SW-BUY-CC FB0SW-BUY-CC ; 
      20 FB0SW-BUY-YY FB0SW-BUY-YY ; 
    15 FB0SW-BUY-MM FB0SW-BUY-MM ; 
end // end FB0SW00

//*** RECORD=FB0SW01 ****
// display working storage for fb0r
// ***********************
Record FB0SW01 type basicRecord
  5 FB0SW1GR FB0SW1GR ; 
    10 FB0SMBMO FB0SMBMO ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PT3YYMM PT3YYMM ; 
    10 FB0SMSCR FB0SMSCR ; 
end // end FB0SW01

Record FB0SW02 type basicRecord
  5 FB0SW2GR FB0SW2GR ; 
    10 XWHCD XWHCD [4] ; 
    10 XWHSABRV XWHSABRV [4] ; 
    10 FBKRDFL FBKRDFL [4] ; 
    10 FB0SWBUG FB0SWBUG [4] ; 
    10 FB0SWNBG FB0SWNBG [4] ; 
    10 FB0SWBPG FB0SWBPG [4] ; 
    10 FB0SWSPG FB0SWSPG [4] ; 
    10 ZZZCHGCT ZZZCHGCT [4] ; 
    10 FB0SMBQT FB0SMBQT [4] ; 
    10 FB0SMNBT FB0SMNBT [4] ; 
    10 FB0SMBPT FB0SMBPT [4] ; 
    10 FB4RGPCT FB4RGPCT [4] ; 
    10 FB0SWFBP FB0SWFBP [4] ; 
    10 FB0SWSBT FB0SWSBT [4] ; 
    10 FB0SWCST FB0SWCST [4] ; 
    10 FB0SWCSV FB0SWCSV [4] ; 
    10 FB0SWNSF FB0SWNSF [2] ; 
    10 FB0SW-XWH-DATA-FOUND-FL FB0SW-XWH-DATA-FOUND-FL [4] ; 
end // end FB0SW02

Record FB0SW03 type basicRecord
  10 FB0SWPRR FB0SWPRR ; 
    15 FB0SWCMT FB0SWCMT ; 
    15 FB0SWPRM FB0SWPRM ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 FB0SMBMO FB0SMBMO ; 
end // end FB0SW03

// LAST CALC DATE
DataItem FB0SM-LAST-CALC-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// buy date yymm format
DataItem FB0SMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bottom line percent
DataItem FB0SMBPC decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// whse total b/l pct
DataItem FB0SMBPT decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// warehouse buy qty total
DataItem FB0SMBQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy amount
DataItem FB0SMBQY int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new bottom line quantity
DataItem FB0SMNBL int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// warehouse new b/l qty
DataItem FB0SMNBT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size scroll amount
DataItem FB0SMSCR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// direct ship/nil qtb
DataItem FB0SMSTQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0SW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-BUY-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-BUY-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date century portion
DataItem FB0SW-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date delivery mnth
DataItem FB0SW-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date field
DataItem FB0SW-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date in db format
DataItem FB0SW-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date mnfcture mnth
DataItem FB0SW-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date year portion
DataItem FB0SW-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0SW-CUR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total of dirship - preadvise
DataItem FB0SW-DIR-SHP-PREADV-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product diverted total
DataItem FB0SW-DIVERT-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product diverted total
DataItem FB0SW-DIVERT-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// match warehouse flag
DataItem FB0SW-MATCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product OA count(for diverts)
DataItem FB0SW-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord-adj-buy-dd
DataItem FB0SW-ORD-ADJ-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord-adj-buy-dt ccyymmdd
DataItem FB0SW-ORD-ADJ-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ord-adj-buy-dt ccyymm
DataItem FB0SW-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product PO count(for diverts)
DataItem FB0SW-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product preadvise total
DataItem FB0SW-PREADVISE-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMATTED : LITERAL
DataItem FB0SW-REFORMAT-COLON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REFORMATTED HOUR
DataItem FB0SW-REFORMAT-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMATTED MINUTE
DataItem FB0SW-REFORMAT-MN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMATTED TIME
DataItem FB0SW-REFORMAT-TIME char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tmp date century portion
DataItem FB0SW-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date day portion
DataItem FB0SW-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date for converting buy dt
DataItem FB0SW-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date month portion
DataItem FB0SW-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date year portion
DataItem FB0SW-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid style color whse table
DataItem FB0SW-VALID-SYCLR-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid style color whse count
DataItem FB0SW-VALID-SYCLR-WHSE-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK HOUR
DataItem FB0SW-WORK-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK MINUTE
DataItem FB0SW-WORK-MN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK TIME
DataItem FB0SW-WORK-TIME num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse data has been loaded
DataItem FB0SW-XWH-DATA-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// usa warehouse count
DataItem FB0SW-XWH-WHSE-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb0sw01 group
DataItem FB0SW1GR char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb0sw02 group level
DataItem FB0SW2GR char(2408)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date century
DataItem FB0SWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b/l changes switch
DataItem FB0SWBCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date day
DataItem FB0SWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date ccyymm01
DataItem FB0SWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date mm
DataItem FB0SWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line percent group
DataItem FB0SWBPG char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bad product switch
DataItem FB0SWBPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy amount
DataItem FB0SWBQ2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy qty group
DataItem FB0SWBU2 char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy qty group
DataItem FB0SWBUG char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date yy
DataItem FB0SWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirm PF 17 flag
DataItem FB0SWC17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corp buy total
DataItem FB0SWCBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corp minus tolerance err  flag
DataItem FB0SWCME char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment, value //*
DataItem FB0SWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corp plus tolerance error flag
DataItem FB0SWCPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corp adjusted stock total
DataItem FB0SWCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// corp stock variance
DataItem FB0SWCSV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// direct cursor flag
DataItem FB0SWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem FB0SWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field 1
DataItem FB0SWDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// direct ship total qty
DataItem FB0SWDST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end column
DataItem FB0SWECL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Vfblav01 pct
DataItem FB0SWFBP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first fetch indicator
DataItem FB0SWFFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group (size) index
DataItem FB0SWGIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fbxrec high index
DataItem FB0SWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index 1
DataItem FB0SWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index 2
DataItem FB0SWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FB0SWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fbxrec low index
DataItem FB0SWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map format switch
DataItem FB0SWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index
DataItem FB0SWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map number to display
DataItem FB0SWMNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new bottom line group
DataItem FB0SWNB2 char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new bottom line quantity
DataItem FB0SWNBC int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new bottom line group
DataItem FB0SWNBG char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// non standard flag
DataItem FB0SWNSF char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// number of warehouses displayed
DataItem FB0SWNWD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of warehouses found
DataItem FB0SWNWF smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-sz-pct
DataItem FB0SWPC2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent group
DataItem FB0SWPG2 char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl parameter group level
DataItem FB0SWPRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem FB0SWPRR char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// region buy total
DataItem FB0SWRBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FB0SWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// region tolerance error flag
DataItem FB0SWRTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stock buy total
DataItem FB0SWSBT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// start column
DataItem FB0SWSCL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll switch
DataItem FB0SWSCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll upper bound
DataItem FB0SWSHB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save warehouse index
DataItem FB0SWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll lower bound
DataItem FB0SWSLB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent group
DataItem FB0SWSPG char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Vsrqtb01 data found fl
DataItem FB0SWSRDFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm table index
DataItem FB0SWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FB0SWWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse index
DataItem FB0SWWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0SWWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0SWWK2 decimal(9,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0SWWK3 decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

