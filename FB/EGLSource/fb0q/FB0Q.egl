package fb0q;

import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import ff.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pt.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FB0Q ****
// This program is part of the footwear buy system.
// It displays a list of products that a forecast analyst is
// responsible for.  From this list the user selects products
// and goes to the B/L availability maintenance or inquiry
// screens.
// Paging forward and backward through the list will be
// supported via PF keys.  Also, a beginning product number may
// be entered.  Products may only be selected from the
// current screen.
// The user may exit to any allowed application via fast path
// or PF keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/21/89   wdishm   Created.
// 08/08/90   jalle1   Fixed popup screen problems.
// 03/21/91   jmclau   Added function to locate pending O/A's
//                     and set the appropriate flag in the map.
// 04/05/91   jmclau   Removed code processing the order
//                     adjustment number in iomod fb1510.
// 08/07/91   jalle1   Added code to send io-task to iomod
//                     fb1510.
// 03/24/92   jmclau   FB271 - added pf18-fb09 freeze/unfreeze
//                                   pf20-fb01 direct ship sel
//                           deleted pf21-opoa.
// 06/22/92   jmclau   FB259 - Add function to have the Pending
//                     O/A FL set to 'P' when there are pend-
//                     ing O/A'S that aren't in the dfbuy.
//                     vfblav01 table.
// 10/28/92   jmclau   FB286 - Add PF17(Accept All)key to
//                     change 'LINE FINISHED FLAG' to 'Y'. also
//                     to allow line finished flag to be set to
//                     'Y' when there is no product and update
//                     the appropriate flags in the dfbuy.
//                     vfsctl01, and dfbuy.vfqtbs01 tables.
// 12/07/92   jmclau   FB286 - Add PF17(Accept All)-- change
//                     calc accept fl edit to set the flag
//                     to 'y' if the stock qtb is between 0
//                     and 199 on the dfbuy.vfqtbs01 table.
//                     Also fixed a bug that would make the
//                     product line finished flag spaces.
// 02/08/93   pmainw   FB-270 new pending oa logic, FB1510 now
//                     uses the shared record FBIREC.
// 02/09/93   jmclau   PA-308 Direct ship Orders that have
//                     pre-advises should be taken out of the
//                     stock quantity to buy calculation.
// 05/14/93   jmclau   FB-307 Add pf18 key to submit fb1261
//                     that generates the unapproved forecast
//                     report.
// 07/21/93   ldeluh   Chg testrms to testenc.
// 12/03/93   pmainw   FB-322 - handle divert O.A.'s.
// 12/03/93   pmainw   Handle twenty product lines on vfsctl01.
// 12-22-94   lrein    add sum code table. verify whse is a
//                     domestic whse.  this for European
//                     centralised forecasting project
// 05-22-96   jliber   modify divert logic.
// 10-22-96   rtran    FB-322 - Modified to bring the future
//                     into the current buy.
// 11/17/97   RJOGIA   Modified to bring Indirect Dsirect ship-
//                     ment into the current buy.
// 12/05/97   RJOGIA   Modified to inlcude the logic for
//                     mastercalc & lifecycle '05' change.
// 01-21-98   oricha   y2k modifications:  fb0qw00, 130, 132
//                     133, 134, 500, w02, m001.
// 02/09/98   rtran    Modified error message number 530 to 531
//                     and quick fix on the search product line
// 07/17/98   MSEVAL   Fixed the bug regarding the change in
//                     screen data before data is submitted for
//                     printing the report.
// 02/10/98   oricha   y2k modifications: fix temp storage
//                     length from w02 adjustment.
// 05-15-98   oricha   y2k modification:  fb0q681 - fix century
//                     windowing.
// 08/12/98   ssanka   fix bug in the updation of
//                     FB_CALC_ACPT_FL in dfbuy.vfqtbs01 for
//                     products with large variance.
// 09/12/98   mseval   Fixed the screen to remain as such when
//                     there is a transfer from another
//                     application.
// 01/10/00   GREDDY   Restrict JCL submission when no parms
//                     passed to FB1401. Added SGRP member
//                     FB0QS20 to do this and it is called from
//                     FB0Q600.
// ************************************************************
// *********************
Program FB0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0QW00 FB0QW00; // record
  FB0QW01 FB0QW01; // record
  FB0QW02 FB0QW02; // record
  FB0QW03 FB0QW03; // record
  FB0QW04 FB0QW04; // record
  FB0QW05 FB0QW05; // record
  FB0QW06 FB0QW06; // record
  FB0QW07 FB0QW07; // record
  FB3REC FB3REC; // record
  FB9REC FB9REC; // record
  FBGREC FBGREC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FF3REC FF3REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use FB0QT01; // table
  use FB0QT03; // table
  use FB0QT04 {deleteAfterUse = yes}; // table
  use FB0QTT1; // table
  use FB0QTT3; // table
  use FB0QTT4 {deleteAfterUse = yes}; // table
  use FB0QM.FB0QM010, // form
  		FB0QM.XX0XM001,
  		FB0QM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB0Q001;
    FB0Q001: FB0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Buy Product Selection.*/
     /* ------------------------------------------------------------*/

    goto FB0Q002; /* Converse Buy Product Selection*/


    FB0Q002: FB0Q002();
    goto FB0Q002;
  end // end main
end // end FB0Q

// footwear forecasting main menu
Function FB0Q001()

   /* ---------------------------------------------------------*/
   /* If entry is  from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB") /* NOT FROM FOOTWEAR*/
    set FBXREC empty;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
   /* TCS CHANGE BEGINS*/
    FB0QW07.FB0QWGRP2 = CA-USER-WORKAREA-2K-C;
    FB0QW00.FB0QWCIX1 = 1;
    while (FB0QW00.FB0QWCIX1 <= 50)
      if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == "FB0Q")
        FB0QW07.FB0QWGRP3[FB0QWCIX1] = " ";
        CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
        FB0QW00.FB0QWCIX1 = 50;
      end
      FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
    end
  else
    FB0QW07.FB0QWGRP2 = CA-USER-WORKAREA-2K-C;
    FB0QW00.FB0QWCIX1 = 1;
    if (FBWREC.FBWFILL != " ")
      while (FB0QW00.FB0QWCIX1 <= 50)
        if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == "FB0Q")
          FB0QW06.FB0QWGRP2 = FB0QW07.FB0QWAPPLD[FB0QWCIX1];
          FB0QW07.FB0QWGRP3[FB0QWCIX1] = " ";
          CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
          FB0QW00.FB0QWCIX1 = 50;
        end
        FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
      end
    else
      while (FB0QW00.FB0QWCIX1 <= 50)
        if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == "FB0Q")
          FB0QW07.FB0QWGRP3[FB0QWCIX1] = " ";
          CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
          FB0QW00.FB0QWCIX1 = 50;
        end
        FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
      end
    end
    /* TCS CHANGE ENDS*/
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end


   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FB0QW00 empty; /* Working storage record*/
  set FB0QW01 empty; /* Map storage for map heading data*/
  set FB0QW02 empty;
  set FB0QW03 empty;
  set FB0QW04 empty;
  set FB0QW05 empty;
  set FBIREC empty; /* FB1510 iomod record*/

  set FB0QM010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
   /* -------- Y2K in begin ------*/
   /* MOVE 1992 TO FB0QW00.FB0QWTSL;   /* Temporary storage page length*/
   /* ---------Y2k in end --------*/
   /* -------- Y2k in begin ------*/
  FB0QW00.FB0QWTSL = 2020; /* Temporary storage page length*/
   /* ---------Y2k in end --------*/

  FB0QW00.FB0QWMAX = 14; /* Max lines per map page*/
  FB0QW00.FB0QWTSP = 1; /* Temp storage page request*/
  FB0QW00.FB0QWCPG = 0; /* Initialize current page*/

   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to the map and set request for data flag to yes.*/
   /* ---------------------------------------------------------*/

  FB0QW00.FB0QWRDF = "N"; /* Request for data flag*/

  if (FBXREC.CAUSERID != " ")
    FB0QW01.XXXUSER = FBXREC.CAUSERID;
  else
    FB0QW01.XXXUSER = COMMAREA.CAUSERID;
  end

  if (FBXREC.XPLCD != " ") /* Data has been passed*/
    FB0QW00.FB0QWRDF = "Y"; /* Request for data flag*/
    FB0QW01.XPLCD = FBXREC.XPLCD;
    FB0QW00.FB0QWBDT = FBXREC.FB8BUYDT;
    FB0QW00.FB0QWPDT = FB0QW00.FB0QWBDT; /* Load ord adj buy mo*/
    FB0QW01.FB0QWBYM = FB0QW00.FB0QWBYM;
    FB0QM010.XPLCD = FBXREC.XPLCD;
    if (FBXREC.XPCCD != " ")
      XPCREC.XPCCD = FBXREC.XPCCD;
      FB0QM010.XPCCD = FBXREC.XPCCD;
      XPCREC.XGPCD = "02";
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB0QW01.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
        FB0QW01.XPCCD = FBXREC.XPCCD;
      end
    end
  else
    FB0QS12(); /* Get current buy ate*/
    FB0QW00.FB0QWBDT = FB9REC.FB8BUYDT;
    FB0QW00.FB0QWPDT = FB0QW00.FB0QWBDT; /* Load ord adj buy mo*/
    FB0QW01.FB0QWBYM = FB0QW00.FB0QWBYM;
  end

  if (FBXREC.XPLCD == " " /* Data has been passed*/
   && FBXREC.FB8BUYDT != 0)
    FB0QW00.FB0QWRDF = "Y"; /* Request for data flag*/
    FB0QW01.XPLCD = FBXREC.XPLCD;
    FB0QW00.FB0QWBDT = FBXREC.FB8BUYDT;
    FB0QW00.FB0QWPDT = FB0QW00.FB0QWBDT; /* Load ord adj buy mo*/
    FB0QW01.FB0QWBYM = FB0QW00.FB0QWBYM;
    FB0QM010.XPLCD = FBXREC.XPLCD;
  end
  FB0QS16(); /* load sum code array*/

end // end FB0Q001

// Footwear products to buy
Function FB0Q002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FB0Q100(); /* Obtain data to display*/

  FB0Q200(); /* Format and display the map*/

  FB0Q300(); /* Check attention identifier*/

  FB0Q400(); /* Reset fields to normal intensity*/

  FB0Q500(); /* Verify the entered data*/

  FB0Q600(); /* Process valid input request*/

end // end FB0Q002

// Obtain data to display
Function FB0Q100()



   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process(except for update successful message)*/
   /* ------------------------------------------------------------*/


  if (FB0QW00.FB0QWRDF == "Y") /* Data requested*/
    if (converseVar.validationMsgNum == 32) /* Update successful*/
         /* Next sentence*/
    else
      if (converseVar.validationMsgNum == 466) /* Partial update successful*/
         /* Next sentence*/
      else
        if (converseVar.validationMsgNum != 0) /* error found*/
          return;
        end
      end
    end
  else
    if (FB0QW00.FB0QWRDF != "Y" /* Data not requested*/
     || converseVar.validationMsgNum != 0) /* Error found*/
      return;
    end
  end


  FB0Q110(); /* Purge temporary storage*/

  FB0QW00.FB0QWTSP = 1; /* Temp storage page requested*/
                                  /* MOVE ' ' TO FB0QW01.FBMPAFL;     /**/
                                   /* in case data reloaded reset flag to*/
                                   /* spaces*/
   /* MOVE ' ' TO FB0QM010.FBMPAFL;*/
  FB0QW00.FB0QWLFE = "N";

  set PG1REC empty;
  PG1REC.XXXUSER = FB0QW01.XXXUSER;

  FB0Q120(); /* Obtain scheduler code*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(18); /* No data to display*/
    exit stack;
  end



   /* ------------------------------------------------------------*/
   /* Obtain the finished flags for the user.*/
   /* ------------------------------------------------------------*/

  set FBMREC empty; /* Init the record*/

  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;

  FB0Q140(); /* Obtain VFSCTl01 row*/

  FB0QW01.FBMCFFL = FBMREC.FBMCFFL;
  FB0QW01.FBMFINFL = FBMREC.FBMFINFL;

  FB0QW00.FB0QWIX1 = 1;

  while (FB0QW00.FB0QWIX1 <= 20)

    if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
      FB0QW01.FBMPAFL = FBMREC.FBMPAFL[FB0QWIX1];
      FB0QW00.FB0QWIX1 = 99;
    end

    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* Get the user list of products for the line entered.*/
   /* If a page to style has been entered on the screen use it*/
   /* for the key otherwise wildcard it.*/
   /* Open cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Initialize record*/

  FF3REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Scheduler code*/
  FF3REC.YSMXDV = "*";

  if (FB0QM010.FB0QMPTS != " ") /* Page to style number*/
    FF3REC.SY1STNBR = FB0QM010.FB0QMPTS;
    FB0QW01.FB0QWPTS = FB0QM010.FB0QMPTS;
  else
    FF3REC.SY1STNBR = "  "; /* ; Forecast style number*/
  end

  if (FB0QM010.XPLCD != " ")
    FF3REC.XPLCD = FB0QM010.XPLCD; /* Product line*/
  else
    FF3REC.XPLCD = "*";
  end

  if (FB0QM010.XPCCD != " ")
    FF3REC.XPCCD = FB0QM010.XPCCD;
  else
    FF3REC.XPCCD = "*";
  end


  FB0QS01(); /* Open cursor for DFCAST.VFFSTY01*/

   /* ------------------------------------------------------------*/
   /* Obtain first row--if rows exist process all of the records.*/
   /* ------------------------------------------------------------*/

  FB0QS02(); /* Obtain next DFCAST.VFFSTY01 row*/

  if (FB0QW00.FB0QWFSC == "Y") /* If end of cursor on first read*/
    converseLib.validationFailed(18); /**/
                                   /* Request processed no data to display*/
    return;
  end

  if (FB0QW00.FB0QWFSC == "N") /* there is data in dfcast.vffsty01*/
    FB0QW00.FB0QWPFL = "N"; /* no product for current product line*/
    FB0QW00.FBHDSAFL = "Y"; /* all direct ships accepted flag*/
  end

  while (FB0QW00.FB0QWFSC == "N") /* While cursor not at end*/

    FB0Q112();
    if (FF3REC.YSMXDV == "10"
     && PG2REC.PG-CURR-XLC-CD == "10") /* life cycle '05' is blocked*/
      FB0Q130(); /* Process all styles for scheduler*/
    else
      FB0QS02(); /* Obtain next DFCAST.VFFSTY01 row*/

    end
  end

  FB0QS10(); /* Close DFCAST.VFFSTY01 cursor*/

   /* ------------------------------------------------------------*/
   /* If a partial page has been formatted add  to temp storage.*/
   /* ------------------------------------------------------------*/

  if (FB0QW00.FB0QWIXM != 0) /* Write partial page to temp storage*/

    FB0QW00.FB0QWIX1 = FB0QW00.TA5TSQIX + 1;
    FB0QW00.FB0QWLSN[FB0QWIX1] = FB0QW02.SY1STNBR[FB0QWIXM];

    FB0QS09(); /* Add to temp storage*/

  end

  if (FB0QW00.TA5TSQIX == 0)
    set FB0QM010 empty;
    FB0QW00.XXXMSGNO = 18; /* No data to display*/
  end


  FB0QW00.FB0QWRDF = "N"; /* Data not requested*/



end // end FB0Q100

// Purge temporary storage
Function FB0Q110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB0QW02 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/


  FB0QW00.TA5TSQIX = 0; /* Highest page number*/
  FB0QW00.FB0QWIXM = 0; /* temporary storage line index*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FB0QW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0QM010.XXXPRCNM = "FB0Q110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0Q110

// Select color (DPRODG.VSYCLR01)
Function FB0Q112()
   /* ------------------------------------------------------------*/
   /* Set up key*/
   /* ------------------------------------------------------------*/


  set PG2REC empty;

  PG2REC.XGPCD = "02"; /* Group code*/
  PG2REC.SY1STNBR = FF3REC.SY1STNBR; /* Style number*/
  PG2REC.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
  PG2REC.XDMCD = FF3REC.XDMCD; /* Dimension code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        /* next sentence*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      PG2REC.PG-CURR-XLC-CD = "  ";
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB0QM010.XXXPRCNM = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "112  GET COLOR DATA             ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "FB0QM110"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0Q112

// Obtain scheduler code
Function FB0Q120()

   /* -------------------------------------------------*/
   /* Format key*/
   /* -------------------------------------------------*/

  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q120"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q120";
  exit stack;

end // end FB0Q120

// Process all style for schedule
Function FB0Q130()

  FB0QW00.FB0QWSDF = "N"; /* style data found flag*/
   /* ------------------------------------------------------------*/
   /* Get the direct ship / nil quantity to buy.*/
   /* ------------------------------------------------------------*/

  set FBHREC empty; /* Init record*/

  FBHREC.SY1STNBR = FF3REC.SY1STNBR;
  FBHREC.SY2CLRID = FF3REC.SY2CLRID;
  FBHREC.XDMCD = FF3REC.XDMCD;
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
   /* MOVE '1' TO FBHREC.XDSCD;*/
  FBHREC.FBHDSAFL = "*";
   /* MOVE ' ' TO FBHREC.XWHCD;*/
  FBHREC.FB7BUYST = "Y"; /* future buy status*/

  FBHREC.FB8BUYDT = FB0QW00.FB0QWBDT;

  FB0QW00.FB0QW-PREADVISE-TOT = 0; /* dir ship - preadvive total*/
  FB0QW00.FB0QW-DIVERT-TOT = 0; /* dir ship - divert total*/
  FB0QW00.FB0QWNQT = 0; /* direct ship/ Nil qty size total*/
  FB0QW00.FBHDSAFL = " "; /* Init WS sum accept flag*/
  FB0QW00.FB0QW-CHK-DTE = 0; /* Init check date*/

  FB0QS03(); /* Open cursor for DFBUY.VDNORD01*/

  FB0QS04(); /* Fetch DFBUY.VDNORD01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If fetch worked ok*/
                                   /* Convert fb-buy-dt into po-id-mo-rng*/
    FB0QW00.FB0QW-TMP-DT = FBHREC.FB8BUYDT;
    FB0QW00.FB0QW-CHK-CC = FB0QW00.FB0QW-TMP-CC; /* set century*/
    FB0QW00.FB0QW-CHK-YY = FB0QW00.FB0QW-TMP-YY; /* set year*/
    FB0QW00.FB0QW-CHK-DM = FB0QW00.FB0QW-TMP-MM; /* set dlv mnth*/
    FB0QW00.FB0QW-CHK-MM = FB0QW00.FB0QW-TMP-MM;
    FB0QW00.FB0QW-CHK-MM = FB0QW00.FB0QW-TMP-MM - 2; /* set mfg mnth*/

    if (FB0QW00.FB0QW-CHK-MM < 0)
      FB0QW00.FB0QW-CHK-MM = 11;
      /* ------ y2k out begin ------*/
      /* FB0QW00.FB0QW-CHK-YY = FB0QW00.FB0QW-CHK-YY - 1;*/
      /* ------ y2k out end --------*/
      /* ------ y2k in  begin ------*/
      FB0QW00.FB0QW-CHK-CY = FB0QW00.FB0QW-CHK-CY - 1;
      /* ------ y2k in end ---------*/
    else
      if (FB0QW00.FB0QW-CHK-MM == 0)
        FB0QW00.FB0QW-CHK-MM = 12;
        /* ------ y2k out begin ------*/
        /* FB0QW00.FB0QW-CHK-YY = FB0QW00.FB0QW-CHK-YY - 1;*/
        /* ------ y2k out end --------*/
        /* ------ y2k in  begin ------*/
        FB0QW00.FB0QW-CHK-CY = FB0QW00.FB0QW-CHK-CY - 1;
        /* ------ y2k in end ---------*/
      end
    end
    FB0QW00.FB0QW-CHK-DTE = FB0QW00.FB0QW-CHK-DT;
  end

  while (FB0QW00.FB0QWDNC == "N") /* While not end of cursor*/

    if (FBHREC.XDVCD != "02")

      set FBIREC empty; /* Init FB1510 iomod record*/

      FBIREC.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
      FBIREC.SY2CLRID = FBHREC.SY2CLRID; /* colr id*/
      FBIREC.XDMCD = FBHREC.XDMCD; /* dim code*/
      FBIREC.PA1BUYMO = FB0QW00.FB0QWPBM; /* ord adj buy mo ccyymm*/
      FBIREC.XWHCD = FBHREC.XWHCD; /* whse cd*/
      FBIREC.FBI-COUNT = 0;
      FB0QW00.FB0QW-PREADVISE-COUNT = 0;
      FB0QW00.FB0QW-DIVERT-COUNT = 0;
      FBIREC.FB8BUYDT = 0; /* buy date*/
      FBIREC.FBI-PENDING-ORD-ADJ-FL = " "; /* oa flag*/
      FBIREC.FBI-CURRENT-DATE = 0; /* current date*/
      FBIREC.FBI-CURRENT-HHMMSS = 0; /* current time*/
      FBIREC.OP1PARTN = FBHREC.OP1PARTN; /* ord partition char*/
      FBIREC.OP1CUOID = FBHREC.OP1CUOID; /* cust ord id*/
      FBIREC.OP1NORID = FBHREC.OP1NORID; /* nike ord id*/
      FBIREC.PRDCUID = FBHREC.PC2CUXID; /* prdcu id*/
      FBIREC.PKGTYPCD = FBHREC.XPGCD; /* pckg type cd*/
      FBIREC.XQAQALCD = FBHREC.XQACD; /* qual cd*/
      FBIREC.XUMUOMCD = FBHREC.XUMCD; /* uom cd*/
      FBIREC.FBI-DLVRY-DT = FB0QW00.FB0QW-CHK-DTE; /* po id mo rng*/

      FB0QS14(); /* check for preadvises*/

      FB0QS15(); /* check for diverts*/


      FB0QW00.FB0QWPFL = "Y"; /* there is product for current line*/
      FB0QW00.FB0QWSDF = "Y"; /* style data found*/
      FB0QW00.FB0QWIX1 = 1; /* Init work index*/
      while (FB0QW00.FB0QWIX1 <= 40) /* Max size array*/
        FB0QW00.FB0QWNQT = FB0QW00.FB0QWNQT + FBHREC.FB7QTB[FB0QWIX1];
        if ((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ")
         || (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
          if (FB0QW00.FB0QW-PREADVISE-COUNT > 0) /* there are preadvises*/
            FB0QW00.FB0QW-PREADVISE-TOT = FB0QW00.FB0QW-PREADVISE-TOT +             FBHREC.FB7QTB[FB0QWIX1];
          end
          if (FB0QW00.FB0QW-DIVERT-COUNT > 0) /* there are diverts*/
            FB0QW00.FB0QW-DIVERT-TOT = FB0QW00.FB0QW-DIVERT-TOT +             FBHREC.FB7QTB[FB0QWIX1];
          end
        end
        FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
      end
      if (FBHREC.FBHDSAFL == "N")
        FB0QW00.FBHDSAFL = FBHREC.FBHDSAFL;
        /* MOVE 'N' TO FB0QW00.FB0QWDSF; /* direct ships not accepted*/
      end
    end

    FB0QS04(); /* Fetch DFBUY.VDNORD01 row*/

  end


  FB0QS05(); /* Close DFBUY.vdnSMY01 cursor*/

   /* ------------------------------------------------------------*/
   /* Get the forecast quantity to buy for the product.*/
   /* ------------------------------------------------------------*/


  set FBKREC empty; /* Init record*/

  FBKREC.SY1STNBR = FF3REC.SY1STNBR;
  FBKREC.SY2CLRID = FF3REC.SY2CLRID;
  FBKREC.XDMCD = FF3REC.XDMCD;

  FBKREC.FB8BUYDT = FB0QW00.FB0QWBDT;

  FBKREC.FB8RCTYP = "B";

  FB0Q131(); /* Obtain unique VFQTBS01 row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* a row was found for this prod*/
    FB0QW00.FB0QWPFL = "Y"; /* there is product for current line*/
    /* MOVE 'N' TO FB0QW00.FB0QWSTF;   /* there is stock qty*/


  end


   /* -------------------------------------------------------------*/
   /* Check to see if any forecast quantity to buy(dfbuy.vfqtbs01)*/
   /* calcs not accepted or any direct ships(dfbuy.vdnord01) not*/
   /* accepted for the product.*/
   /* If either of the above conditions exist, then it also checks*/
   /* to see if the direct ship total qty from dfbuy.vdnord01 is*/
   /* not equal to the forecast original total qty to buy and sets*/
   /* the flag if the condition is true.*/
   /* -------------------------------------------------------------*/

   /* IF FBKREC.FB0QWDSF = 'N';      /* Not all calcs accepted*/
   /* OR FB0QW00.FB0QWDSF = 'N';     /* Not all direct ships accepted*/
       /* IF FB0QW00.FB0QWNQT NE FBKREC.FB8FTQTB; /* Direct ship tot NE*/
                                  /* total forecast*/
          /* MOVE 'N' TO FB0QW00.FB0QWPAF;   /* Not all products accepted*/
       /* END;*/
   /* END;*/

   /* ------------------------------------------------------------*/
   /* Get the B/L date.*/
   /* ------------------------------------------------------------*/

  set FBLREC empty;

  FBLREC.SY1STNBR = FF3REC.SY1STNBR;
  FBLREC.SY2CLRID = FF3REC.SY2CLRID;
  FBLREC.XDMCD = FF3REC.XDMCD;
  FBLREC.XQACD = "01";
  FBLREC.PC2INSEG = "000";
  FBLREC.XPGCD = "00";
  FBLREC.XUMCD = "01";
  FBLREC.FB8BUYDT = FBKREC.FB8BUYDT;
  FBLREC.XWHCD = " ";

  FB0Q132(); /* Open VFBLAV01 cursor*/

  FB0QW00.FB0QWDWS = "N"; /* domestic warehouse found*/

  while (SQLCA.VAGen_SQLCODE != 100
   && FB0QW00.FB0QWDWS != "Y") /* domestic whse not found and rows*/
    FB0Q133(); /* Fetch VFBLAV01 row*/
  end

  FB0Q134(); /* Close VFBLAV01 cursor*/


   /* ------------------------------------------------------------*/
   /* Get the size region quantity to buy.*/
   /* ------------------------------------------------------------*/

  set FBGREC empty; /* Init record*/

  FBGREC.SY1STNBR = FF3REC.SY1STNBR;
  FBGREC.SY2CLRID = FF3REC.SY2CLRID;
  FBGREC.XDMCD = FF3REC.XDMCD;
  FBGREC.XQACD = "01";
  FBGREC.PC2INSEG = "000";
  FBGREC.XPGCD = "00";
  FBGREC.XUMCD = "01";
  FBGREC.FBDBTCD = "*";
  FBGREC.FB8BUYDT = FBKREC.FB8BUYDT;

  FB0QS06(); /* Open cursor for DFBUY.VSRQTB01*/

  FB0QW00.FB0QWDWS = "N"; /* domestic warehouse found*/

  FB0QS07(); /* Fetch DFBUY.VSRQTB01 row*/

  FB0QW00.FB0QWSQT = 0; /* Init size quantity total*/

  while (FB0QW00.FB0QWSQC == "N") /* While not end of cursor*/

    if (FB0QW00.FB0QWDWS == "Y") /* domestic whse*/

      if (FBGREC.FBDBTCD == "STK")
        FB0QW00.FB0QWPFL = "Y"; /* there is product for current line*/
        FB0QW00.FB0QWSDF = "Y"; /* style data found*/
        FB0QW00.FB0QWIX1 = 1; /* Init work index*/

        while (FB0QW00.FB0QWIX1 <= 40) /* Max size array*/
          FB0QW00.FB0QWSQT = FB0QW00.FB0QWSQT + FBGREC.FB7QTB[FB0QWIX1];
          FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
        end

      end

      FB0QW00.FB0QWDWS = "N"; /* domestic warehouse found*/
    end

    FB0QS07(); /* Fetch DFBUY.VSRQTB01 row*/

  end

  FB0QS08(); /* CLose cursor for DFBUY.VSRQTB01*/

   /* ------------------------------------------------------------*/
   /* check for PENDING Order Adjustments for the style*/
   /* ------------------------------------------------------------*/

  FB0QW03.SY1STNBR = FF3REC.SY1STNBR;
  FB0QW03.SY2CLRID = FF3REC.SY2CLRID;
  FB0QW03.XDMCD = FF3REC.XDMCD;
  FB0QW03.PA1BUYMO = FB0QW00.FB0QWPBM;
  FB0QW03.FB0QWSCT = 0;

   /* FB0QS13;                         /* select count on dproda.vpahdr01*/
                                  /* and dproda.vpawrk01*/

   /* ------------------------------------------------------------*/
   /* Format a map line of data to display storage.*/
   /* ------------------------------------------------------------*/

  if (FB0QW00.FB0QWSDF == "Y") /* style data found*/

    FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1;

    FB0Q135(); /* Format display storage line*/

  end

   /* ------------------------------------------------------------*/
   /* Add to temp storage if all lines on page have been filled*/
   /* ------------------------------------------------------------*/

  if (FB0QW00.FB0QWIXM == FB0QW00.FB0QWMAX)
                                   /* Line index = max lines per page*/

    FB0QW00.FB0QWIX1 = FB0QW00.TA5TSQIX + 1;
    FB0QW00.FB0QWLSN[FB0QWIX1] = FB0QW02.SY1STNBR[FB0QWIXM];

    FB0QS09(); /* add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch next VFFSTY01 row.*/
   /* ------------------------------------------------------------*/

  FB0QS02(); /* Fetch next VFFSTY01 row*/

end // end FB0Q130

// Obtain unique VFSQTB01
Function FB0Q131()


  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FB0QW00.FB0QWSDF = "Y"; /* Style data found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q131"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q131";
  exit stack;

end // end FB0Q131

// Open VFBLAV01 cursor
Function FB0Q132()


   /* -------- y2k out begin -------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* -------- y2k in end ----------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == 811) /* Multiple rows*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q132"; /* Process name*/
  TA1REC.TA1LOC = "OPEN CURSOR             ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q132";
  exit stack;

end // end FB0Q132

// Fetch VFBLAV01 row
Function FB0Q133()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* ------- y2k out begin ---------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* ------- y2k out end -----------*/
   /* ------- y2k in  begin ---------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ------------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (FBLREC.XWHCD in FB0QW00.XWH-WHSE-CD)
        FB0QW00.FB0QWDWS = "Y";
      else
        set FBLREC empty;
      end

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q133"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q133";
  exit stack;



end // end FB0Q133

// Close VFBLAV01 cursor
Function FB0Q134()


   /* ------- y2k out begin ------*/
   /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ---------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q134"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q134";
  exit stack;

end // end FB0Q134

// Format display storage line
Function FB0Q135()

   /* ------------------------------------------------------------*/
   /* Move the data from the records to the temporary storage*/
   /* line--calculate the stock quantity to buy.*/
   /* ------------------------------------------------------------*/


  FB0QW02.SY1STNBR[FB0QWIXM] = FF3REC.SY1STNBR;
  FB0QW02.SY2CLRID[FB0QWIXM] = FF3REC.SY2CLRID;
  FB0QW02.XDMCD[FB0QWIXM] = FF3REC.XDMCD;
  FB0QW02.SY1SSTNM[FB0QWIXM] = FF3REC.SY1SSTNM;
  FB0QW02.SY2CLRAB[FB0QWIXM] = FF3REC.SY2CLRAB;
  FB0QW02.FB8FTQTB[FB0QWIXM] = FBKREC.FB8FTQTB;
  FB0QW02.PT3YYMM[FB0QWIXM] = FBLREC.PT3YYMM;
  FB0QW02.FB0QWFLG[FB0QWIXM] = " "; /* Init WS flag fields*/

  FB0QW02.FB0QWFLB[FB0QWIXM] = FBKREC.FBKABLFL;

  if (FBKREC.FBKFSAFL == "Y"
   && FB0QW00.FBHDSAFL != "N")
    FB0QW02.FB0QWFLD[FB0QWIXM] = "Y";
  else
    FB0QW02.FB0QWFLD[FB0QWIXM] = "N";
  end
  FB0QW02.FB0QWFLA[FB0QWIXM] = FBKREC.FBKCAFL;
  FB0QW02.ZZZCHGCT[FB0QWIXM] = FBKREC.ZZZCHGCT;
  FB0QW02.FBKGROUP[FB0QWIXM] = FBKREC.FBKGROUP; /* Stores entire*/
                       /* record for possible update*/

   /* ------------------------------------------------------------*/
   /* CHECK FOR ANY PENDING ORDER ADJUSTMENTS THAT ARE*/
   /* ON THE DFBUY.VFBLAV01 TABLE.*/
   /* ------------------------------------------------------------*/

  set FB0QW03 empty; /* Init w.s. record*/
  XX0XS01(); /* Get current date and time*/
  FB0QW03.FB0QCRDT = XX0XW01.XX0XWDAT; /* Current date*/
  FB0QW03.FB0QCRTM = XX0XW01.XX0XWTIM; /* Current time HHMM*/
  FB0QW02.FB0QWFLO[FB0QWIXM] = "N"; /* init pending oa flag*/
  FB0QW03.SY1STNBR = FF3REC.SY1STNBR;
  FB0QW03.SY2CLRID = FF3REC.SY2CLRID;
  FB0QW03.XDMCD = FF3REC.XDMCD;
  FB0QW03.PA1BUYMO = FB0QW00.FB0QWPBM; /* OA buy month*/
  FB0QW03.FB8BUYDT = FB0QW00.FB0QWBDT; /* Buy date*/

  FB0QW03.FB0QWSCT = 0;
  FB0QW03.FB0QOAFL = "N";
  FB0QS13(); /* check for pending o/as.*/

  FB0QW02.FB0QWFLO[FB0QWIXM] = FB0QW03.FB0QOAFL; /* pending oa fl*/



   /* ------------------------------------------------------------*/
   /* If the first line on the page move the style number to the*/
   /* first style array--for the current page.*/
   /* ------------------------------------------------------------*/

  if (FB0QW00.FB0QWIXM == 1) /* First line on page*/
    FB0QW00.FB0QWIX1 = FB0QW00.TA5TSQIX + 1; /* add one to page number*/
    FB0QW00.FB0QWFSN[FB0QWIX1] = FB0QW02.SY1STNBR[1];
  end

   /* ------------------------------------------------------------*/
   /* Stock calc = total of all size buckets in the size*/
   /* quantity array.*/
   /* ------------------------------------------------------------*/

  FB0QW02.FB0QWSTC[FB0QWIXM] = FB0QW00.FB0QWSQT;

   /* ------------------------------------------------------------*/
   /* Stock quantity to buy = forecast quantity to buy*/
   /* - (direct-ships - preadvises - diverts)*/
   /* DRS Bld = direct-ships*/
   /* - (direct-ships - preadvises - diverts)*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QW-DIR-SHP-PREADV-TOT = 0; /* dir ship - pre, diverts*/
  FB0QW00.FB0QW-DIR-SHP-PREADV-TOT = FB0QW00.FB0QWNQT - FB0QW00.FB0QW-PREADVISE-TOT                    - FB0QW00.FB0QW-DIVERT-TOT;

  FB0QW02.FB0QWSTQ[FB0QWIXM] = FBKREC.FB8FTQTB -   FB0QW00.FB0QW-DIR-SHP-PREADV-TOT;
  FB0QW02.FB0QWSDB[FB0QWIXM] = FB0QW00.FB0QWNQT - FB0QW00.FB0QW-PREADVISE-TOT                    - FB0QW00.FB0QW-DIVERT-TOT;


end // end FB0Q135

// Process all style for schedule
Function FB0Q140()


  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB0QW00.XXXMSGNO = 202;
                                   /* Cannot access finishing flags*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q140"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE ROW        ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q140";
  exit stack;

end // end FB0Q140

// Format and display map 1
Function FB0Q200()


  if (converseVar.validationMsgNum != 0)
    set FB0QM010 alarm; /* Indicate sound alarm*/
  end

   /* -----------------------------------------------------------*/
   /* If no data found clear the map.*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 18) /* No data to display*/

    set FB0QM010 initial;
  end

   /* -----------------------------------------------------------*/
   /* If current page not equal request page, obtain temp*/
   /* storage record.*/
   /* -----------------------------------------------------------*/

   /* TCS CHANGE BEGINS*/
  if ((FB0QW00.FB0QWBYM == FB0QW06.FB0QWBYM && 
  FBXREC.XPLCD == FB0QW06.XPLCD && 
  FBXREC.CAUSERID == FB0QW06.XXXUSER && 
  FBXREC.XPCCD == FB0QW06.XPCCD))
    FB0QW00.FB0QWTSP = FB0QW06.FB0QWTSP;
    FB0QW00.TA5TSQIX = FB0QW06.TA5TSQIX1;
    TA5REC.TA5TSQIX = FB0QW06.TA5TSQIX2;
    set FB0QW06 empty;
  else
    set FB0QW06 empty;
  end
    /* TCS CHANGE ENDS*/

  if (FB0QW00.FB0QWCPG > 0) /* Pages were formatted*/
    FB0QW00.FB0QWTSP = FB0QW00.FB0QWCPG; /* Reset pf17 current pg*/
    FB0QW00.FB0QWCPG = 0; /* Reset current page*/
  end

  if (FB0QW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FB0QW00.FB0QWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      set FB0QM010 initial;

      FB0QS11(); /* Obtain temp storage page*/


    end
  end

   /* -----------------------------------------------------------*/
   /* If map is not formatted--format heading and detail*/
   /* data.*/
   /* -----------------------------------------------------------*/

  if (FB0QM010.XXXCURDT == 0) /* Map not formatted*/

    FB0Q210(); /* Move header data to the map*/

    FB0Q220(); /* Format map 1 detail lines*/

  end

  FB0QM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/

  if (FB0QW00.XXXMSGNO != 0) /* Contains informational message*/
    if (FB0QW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB0QW00.XXXMSGNO);
    end
  end

  if (converseVar.validationMsgNum == 0)
    if (FB0QM010.SY1STNBR[1] == " ")
      set FB0QM010.FB0QMBYM cursor;
    else
      set FB0QM010.FB0QMSEL[1] cursor;
    end
  end




  FB0QM010.XXXPRCNM = "FB0Q"; /* Process number*/

  converse FB0QM010 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  FB0QW00.XXXMSGNO = 0; /* Message number*/
  FB0QM010.XXXPRCNM = "FB0Q"; /* Process number*/

end // end FB0Q200

// Format map Header data
Function FB0Q210()

   /* ------------------------------------------------------------*/
   /* Move map header from fb0qw01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/


  FB0QM010.XXXUSER = FB0QW01.XXXUSER;

  if (FB0QW01.FB0QWBYM != 0)
    FB0QM010.FB0QMBYM = FB0QW01.FB0QWBYM; /* buy month*/
  end

  FB0QM010.XPLCD = FB0QW01.XPLCD; /* line code*/
  FB0QM010.XPCCD = FB0QW01.XPCCD; /* category code*/
  FB0QM010.XPCSDESC = FB0QW01.XPCSDESC; /* category description*/
  FB0QM010.FBMPAFL = FB0QW01.FBMPAFL;
  FB0QM010.FBMCFFL = FB0QW01.FBMCFFL;
  FB0QM010.FBMFINFL = FB0QW01.FBMFINFL;
  FB0QM010.FB0QMPTS = FB0QW01.FB0QWPTS;


   /* IF FB0QM010.FBMPAFL EQ 'Y';*/
    /* SET FB0QM010.FBMPAFL AUTOSKIP;*/
   /* ELSE ;*/
    /* SET FB0QM010.FBMPAFL NORMAL;*/
   /* END ;*/



end // end FB0Q210

// Format map 1 Detail lines
Function FB0Q220()

   /* ------------------------------------------------------------*/
   /* Move each temporary storage line from the record to*/
   /* the map line.  Unprotect and display the select field*/
   /* when there is data to display.*/
   /* Position the cursor on the first select field if key fields*/
   /* have been passed in the FBXREC.*/
   /* ------------------------------------------------------------*/


  FB0QW00.FB0QWIXM = FB0QW00.FB0QWMAX; /* set to max lines*/

  while (FB0QW00.FB0QWIXM >= 1)


    if (FB0QW02.SY1STNBR[FB0QWIXM] != " ")
      FB0QM010.SY1STNBR[FB0QWIXM] = FB0QW02.SY1STNBR[FB0QWIXM];
      FB0QM010.SY2CLRID[FB0QWIXM] = FB0QW02.SY2CLRID[FB0QWIXM];
      FB0QM010.XDMCD[FB0QWIXM] = FB0QW02.XDMCD[FB0QWIXM];
      FB0QM010.SY1SSTNM[FB0QWIXM] = FB0QW02.SY1SSTNM[FB0QWIXM];
      FB0QM010.SY2CLRAB[FB0QWIXM] = FB0QW02.SY2CLRAB[FB0QWIXM];
      FB0QM010.FB0QMSTQ[FB0QWIXM] = FB0QW02.FB0QWSTQ[FB0QWIXM];
      FB0QM010.FB0QMSTC[FB0QWIXM] = FB0QW02.FB0QWSTC[FB0QWIXM];
      FB0QM010.FB0QMSDB[FB0QWIXM] = FB0QW02.FB0QWSDB[FB0QWIXM];
      FB0QM010.FB8FTQTB[FB0QWIXM] = FB0QW02.FB8FTQTB[FB0QWIXM];
      FB0QM010.PT3YYMM[FB0QWIXM] = FB0QW02.PT3YYMM[FB0QWIXM];
      if (FB0QW02.FB0QWFLO[FB0QWIXM] == "P") /* Pending O/A not on vfblav01*/
        FB0QW02.FB0QWFLO[FB0QWIXM] = "Y";
        FB0QM010.FB0QMFLG[FB0QWIXM] = FB0QW02.FB0QWFLG[FB0QWIXM];
        set FB0QM010.FB0QMFLG[FB0QWIXM] skip, bold;
      else
        FB0QM010.FB0QMFLG[FB0QWIXM] = FB0QW02.FB0QWFLG[FB0QWIXM];
        set FB0QM010.FB0QMFLG[FB0QWIXM] initialAttributes;
      end
      if (FB0QW01.FB0QWBYM != 0
       && FB0QW01.XPLCD != " ")
        set FB0QM010.FB0QMSEL[FB0QWIXM] cursor, normal; /* Allow entry*/
      else
        set FB0QM010.FB0QMSEL[FB0QWIXM] normal; /* Allow entry*/
      end
    else
      set FB0QM010.FB0QMSEL[FB0QWIXM] initialAttributes; /* Protect and darken*/
    end
    FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM - 1;
  end




end // end FB0Q220

// Check attention ID
Function FB0Q300()


   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB0QM010.XXXPRCNM = "FB0Q";
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    FB0Q310(); /* Validate scroll request*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB0QM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      /* TCS CHANGE BEGINS*/
      set FB0QW06 empty;
      FB0QW06.XPLCD = FB0QW01.XPLCD;
      FB0QW06.XXXUSER = FB0QW01.XXXUSER;
      FB0QW06.XPCCD = FB0QW01.XPCCD;
      FB0QW06.FB0QWBYM = FB0QW00.FB0QWBYM;
      FB0QW06.FB0QWTSP = FB0QW00.FB0QWTSP;
      FB0QW06.TA5TSQIX1 = FB0QW00.TA5TSQIX;
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      FB0QW06.TA5TSQIX2 = TA5REC.TA5TSQIX;

      FB0QW00.FB0QWCIX1 = 1;
      while (FB0QW00.FB0QWCIX1 <= 50)
        if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == " ")
          FB0QW07.FB0QWAPPLN[FB0QWCIX1] = "FB0Q";
          FB0QW07.FB0QWAPPLD[FB0QWCIX1] = FB0QW06.FB0QWGRP2;
          CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
          FB0QW00.FB0QWCIX1 = 50;
        end
        FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
      end
        /* TCS CHANGE ENDS*/

      FB0Q110(); /* Purge temp storage*/
      FBXREC.FB8BUYDT = FB0QW00.FB0QWBDT;
      FBXREC.CAUSERID = FB0QM010.XXXUSER;
      FBXREC.XPLCD = FB0QM010.XPLCD;
      FBXREC.XPCCD = FB0QM010.XPCCD;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      COMMAREA.CAUSERA = FBWREC.FBWGROUP;

      COMMAREA.CATOAP = FB0QM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0QM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0QM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    FB0Q110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* menu screen requested*/

    FB0Q110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    FB0Q110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
    exit stack;
  end


   /* -------------------------------------------------------------*/
   /* On PF18 transfer to FB09 (FREEZE/UNFREEZE PRODUCT B/L AVAIL)*/
   /* -------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* Freeze/Unfreeze bottom line*/

      /* TCS CHANGE BEGINS*/
    set FB0QW06 empty;
    FB0QW06.XPLCD = FB0QW01.XPLCD;
    FB0QW06.XXXUSER = FB0QW01.XXXUSER;
    FB0QW06.XPCCD = FB0QW01.XPCCD;
    FB0QW06.FB0QWBYM = FB0QW00.FB0QWBYM;
    FB0QW06.FB0QWTSP = FB0QW00.FB0QWTSP;
    FB0QW06.TA5TSQIX1 = FB0QW00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB0QW06.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB0QW00.FB0QWCIX1 = 1;
    while (FB0QW00.FB0QWCIX1 <= 50)
      if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == " ")
        FB0QW07.FB0QWAPPLN[FB0QWCIX1] = "FB0Q";
        FB0QW07.FB0QWAPPLD[FB0QWCIX1] = FB0QW06.FB0QWGRP2;
        CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
        FB0QW00.FB0QWCIX1 = 50;
      end
      FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
    end
        /* TCS CHANGE ENDS*/
    FB0Q110(); /* Purge temp storage*/
    FBXREC.FB8BUYDT = FB0QW00.FB0QWBDT;
    FBXREC.CAUSERID = FB0QM010.XXXUSER;
    FBXREC.XPLCD = FB0QM010.XPLCD;
    FBXREC.XPCCD = FB0QM010.XPCCD;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

    COMMAREA.CATOAP = "FB09"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
    exit stack;
  end


   /* -------------------------------------------------------------*/
   /* On PF20 transfer to FB01 (DIRECT SHIP PRODUCT SELECT SCREEN)*/
   /* -------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* Direct ship product select*/

      /* TCS CHANGE BEGINS*/
    set FB0QW06 empty;
    FB0QW06.XPLCD = FB0QW01.XPLCD;
    FB0QW06.XXXUSER = FB0QW01.XXXUSER;
    FB0QW06.XPCCD = FB0QW01.XPCCD;
    FB0QW06.FB0QWBYM = FB0QW00.FB0QWBYM;
    FB0QW06.FB0QWTSP = FB0QW00.FB0QWTSP;
    FB0QW06.TA5TSQIX1 = FB0QW00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB0QW06.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB0QW00.FB0QWCIX1 = 1;
    while (FB0QW00.FB0QWCIX1 <= 50)
      if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == " ")
        FB0QW07.FB0QWAPPLN[FB0QWCIX1] = "FB0Q";
        FB0QW07.FB0QWAPPLD[FB0QWCIX1] = FB0QW06.FB0QWGRP2;
        CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
        FB0QW00.FB0QWCIX1 = 50;
      end
      FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
    end
        /* TCS CHANGE ENDS*/
    FB0Q110(); /* Purge temp storage*/
    FBXREC.FB8BUYDT = FB0QW00.FB0QWBDT;
    FBXREC.CAUSERID = FB0QM010.XXXUSER;
    FBXREC.XPLCD = FB0QM010.XPLCD;
    FBXREC.XPCCD = FB0QM010.XPCCD;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

    COMMAREA.CATOAP = "FB01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0QM010.XXXPRCNM = "FB0Q300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* (Process screen input)*/
   || converseVar.eventKey is pf13  /* FB0T B/L availability adjust*/
   || converseVar.eventKey is pf14  /* FB0R B/L availability inquiry*/
   || converseVar.eventKey is pf15  /* Print screen*/
   || converseVar.eventKey is pf16  /* FB0S Adjust the buy*/
   || converseVar.eventKey is pf17  /* Accept all products on product line*/
   || converseVar.eventKey is pf19  /* Master Calculation*/
   || converseVar.eventKey is pf21) /* Print unapproved fcst rpt*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FB0QM010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  FB0QM010.XXXPRCNM = "FB0Q300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;



end // end FB0Q300

// Validate scroll request
Function FB0Q310()



   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB0QW00.FB0QWTSP < 2)       /* and no previous pages*/

    FB0QM010.XXXPRCNM = "FB0Q131"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB0QW00.FB0QWTSP >= FB0QW00.TA5TSQIX) /* and no more pages*/

    FB0QM010.XXXPRCNM = "FB0Q310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   && FB0QW00.FB0QWTSP == 1)      /* on first page*/

    FB0QM010.XXXPRCNM = "FB0Q310"; /* Module identification*/
    converseLib.validationFailed(6); /* No more pages to display*/

  end
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FB0Q310

// Reset highlighted fields
Function FB0Q400()

   /* ----------------------------------------------------*/
   /* Set the select code to either defined or normal*/
   /* ----------------------------------------------------*/

  FB0QW00.FB0QWIXM = 1; /* Initialize map index*/

  while (FB0QW00.FB0QWIXM <= FB0QW00.FB0QWMAX) /* Max lines*/
    if (FB0QM010.SY1STNBR[FB0QWIXM] == " ")

      set FB0QM010.FB0QMSEL[FB0QWIXM] initialAttributes; /* Protect and darken*/
    else
      set FB0QM010.FB0QMSEL[FB0QWIXM] normal; /* Allow entry*/

    end
    FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1;
  end

  set FB0QM010.FB0QMBYM normal;
   /* SET FB0QM010.FBMPAFL NORMAL;*/
   /* SET FB0QM010.FBMFINFL NORMAL;*/
  set FB0QM010.XPLCD normal;
  set FB0QM010.XPCCD normal;
  set FB0QM010.XXXUSER normal;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0QM010.XPLCD == "?" /* Product line list requested*/
   || FB0QM010.XPCCD == "?") /* Category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FB0QM010.XXXPRCNM = "400"; /* Module identification*/
      converseLib.validationFailed(03); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FB0QM010.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FB0QM010.XPCCD = FB0QW01.XPCCD; /* Restore prior code*/
      FB0QM010.XPCSDESC = FB0QW01.XPCSDESC; /* Description*/
    else
      FB0QM010.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FB0QM010.XPCSDESC = XPCTBL.XPCSDESC[XX0XWPIX]; /* Description*/

    end

    set FB0QM010.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FB0QM010.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the silhouette list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FB0QM010.XPLCD = FB0QW01.XPLCD; /* Restore prior code*/
    else
      FB0QM010.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
    end

    set FB0QM010.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB0QM010.XXXPRCNM = "400"; /* Module identification*/

  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FB0Q400

// Verify entered data
Function FB0Q500()


   /* ----------------------------------------------------*/
   /* Do select field validation.*/
     /* l). verify only 's' has been entered*/
     /* 2). verify that no userid, buy month, line,*/
         /* category or page to style have been entered*/
     /* 3). verify that scrolling has not been requested*/
         /* when a select code has been entered.*/
   /* ----------------------------------------------------*/

  FB0QM010.XXXPRCNM = "FB0Q500";

  if (FB0QM010.SY1STNBR[1] != " ") /* Style exists or*/

    FB0QW00.FB0QWIXM = FB0QW00.FB0QWMAX;
    FB0QW00.FB0QWCNT = 0; /* Field to count select codes*/

    while (FB0QW00.FB0QWIXM >= 1)
      if (FB0QM010.FB0QMSEL[FB0QWIXM] == "S")
        FB0QW00.FB0QWCNT = FB0QW00.FB0QWCNT + 1;
      else
        if (FB0QM010.FB0QMSEL[FB0QWIXM] != " ")
          set FB0QM010.FB0QMSEL[FB0QWIXM] cursor, bold;
          converseLib.validationFailed(41); /* 'S' is the only valid selection code*/
        end
      end
      FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM - 1;
    end
  end

  if (FB0QW00.FB0QWCNT != 0)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8) /* Data changes not allowed during*/
                                   /* scrolling*/
      converseLib.validationFailed(5);
    end
    if (FB0QM010.XXXUSER != " "
     && FB0QM010.XXXUSER != FB0QW01.XXXUSER)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB0QM010.XXXUSER cursor, bold;
    end
    if (FB0QM010.FB0QMPTS != " "
     && FB0QM010.FB0QMPTS != FB0QW01.FB0QWPTS)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB0QM010.FB0QMPTS cursor, bold;
    end
    if (FB0QM010.XPCCD != " "
     && FB0QM010.XPCCD != FB0QW01.XPCCD)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB0QM010.XPCCD cursor, bold;
    end
    if (FB0QM010.XPLCD != " "
     && FB0QM010.XPLCD != FB0QW01.XPLCD)
      converseLib.validationFailed(194); /* 's'  invalid when key fields changed*/
      set FB0QM010.XPLCD cursor, bold;
    end
    if (FB0QM010.FB0QMBYM != 0
     && FB0QM010.FB0QMBYM != FB0QW01.FB0QWBYM)
      converseLib.validationFailed(194); /* 's' invalid when key fields changed*/
      set FB0QM010.FB0QMBYM cursor, bold;
    end
  else /* No select code entered*/
    if (converseVar.eventKey is pf13
     || converseVar.eventKey is pf14
     || converseVar.eventKey is pf16)
      converseLib.validationFailed(196);
                                   /* At lease one product must be selected*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If PF17 has been entered verify that*/
   /* no other key fields were entered or changed.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf17)
    FB0QM010.FBMPAFL = "Y"; /* Line finished changed*/
    FB0QW01.FBMPAFL = "Y";
    FB0QW00.FB0QWLFE = "Y"; /* Line finished changed*/
    if (FB0QM010.FB0QMPTS != " "
     && FB0QM010.FB0QMPTS != FB0QW01.FB0QWPTS)
      converseLib.validationFailed(468); /* cannot enter when key fields changed*/
      set FB0QM010.FB0QMPTS cursor, bold;
    end
    if (FB0QM010.XPCCD != " "
     && FB0QM010.XPCCD != FB0QW01.XPCCD)
      converseLib.validationFailed(468); /* cannot enter when key fields changed*/
      set FB0QM010.XPCCD cursor, bold;
    end
    if (FB0QM010.XPLCD != " "
     && FB0QM010.XPLCD != FB0QW01.XPLCD)
      converseLib.validationFailed(468); /* cannot enter when key fields changed*/
      set FB0QM010.XPLCD cursor, bold;
    end
    if (FB0QM010.FB0QMBYM != 0
     && FB0QM010.FB0QMBYM != FB0QW01.FB0QWBYM)
      converseLib.validationFailed(468); /* cannot enter when key fields changed*/
      set FB0QM010.FB0QMBYM cursor, bold;
    end
    if (FB0QM010.XXXUSER != " "
     && FB0QM010.XXXUSER != FB0QW01.XXXUSER)
      converseLib.validationFailed(468); /* cannot enter when key fields changed*/
      set FB0QM010.XXXUSER cursor, bold;
    end


   /* -----------------------------------------------------*/
    /* Initialize the line finish flag and get it ready to*/
    /* do an edit of the direct ship finish flag if processing*/
    /* the last product line. didn't want to do this look up*/
    /* twice in a row.*/
    /* Edit the direct ship line flag to make sure it is set*/
    /* to 'y'.*/
   /* -----------------------------------------------------*/

    FB0QW00.FB0QWIX1 = 1;
    while (FB0QW00.FB0QWIX1 <= 20)
      if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
        FB0QW00.FBMPAFL = FBMREC.FBMPAFL[FB0QWIX1]; /* save current*/
                                  /* line finished flag*/
        FBMREC.FBMPAFL[FB0QWIX1] = "Y"; /* set current flag for*/
                                  /* line finish flag edit ck*/
        if (FBMREC.FBMDSLNF[FB0QWIX1] != "Y"
         && FB0QW00.FB0QWPFL == "Y")
                                   /* are styles for current product line*/

          FBMREC.FBMPAFL[FB0QWIX1] = FB0QW00.FBMPAFL; /* put current*/
                                  /* line finished back to what it was*/
          converseLib.validationFailed(338); /* can't update DRS/PFS not accpt for*/
                                   /* line*/
        end
        FB0QW00.FB0QWIX1 = 21;
      end
      FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
    end


   /* -----------------------------------------------------*/
    /* Check to see if the last product line is being processed.*/
    /* if it is and there is data for the current product line*/
    /* check to see that the direct ship finish fl = 'y'.*/
   /* -----------------------------------------------------*/



    FB0QW00.FB0QWFFF = "Y"; /* set the line finish fl*/
    FB0QW00.FB0QWIX1 = 1;
    while (FB0QW00.FB0QWIX1 <= 20)
      if (FBMREC.FBMPCD[FB0QWIX1] != " " /* line exists*/
       && FBMREC.FBMPAFL[FB0QWIX1] == "N") /* line not finished*/
        FB0QW00.FB0QWFFF = "N"; /* line finished flag*/
        FB0QM010.FBMPAFL = "N"; /* Line finished changed*/
        FB0QW01.FBMPAFL = "N";
        FB0QW00.FB0QWLFE = "N"; /* Line finished changed*/
      end
      FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
    end

    if (FB0QW00.FB0QWFFF == "Y"  /* processing the last product line*/
     && FB0QM010.FBMFINFL != "Y" /* Direct ship accept all flag not y*/
     && FB0QW00.FB0QWPFL == "Y") /* are styles for current product line*/
                                  /* all direct ships have been acpted*/
      converseLib.validationFailed(465); /* cant chg if all calcs not acpted*/
      set FB0QM010.FBMFINFL cursor, bold;
    end


    if (converseVar.validationMsgNum == 0)
      FB0QW01.FBMPAFL = FB0QM010.FBMPAFL; /* Move to storage*/
    end
  end

   /* ----------------------------------------------------*/
   /* Restore product line finished flag in dfbuy.vfsctl01*/
   /* ----------------------------------------------------*/

  FB0QW00.FB0QWIX1 = 1;
  while (FB0QW00.FB0QWIX1 <= 20)
    if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
      FBMREC.FBMPAFL[FB0QWIX1] = FB0QW00.FBMPAFL; /* restore the*/
                                  /* line finished flag*/
    end
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end

   /* ------------------------------------------------------*/
   /* Master Calculation-PF19 has been entered verify that*/
   /* no other key fields were entered or changed.*/
   /* ------------------------------------------------------*/
  if (converseVar.eventKey is pf19)
    FB0QM010.FBMPAFL = "Y"; /* Line finished changed*/
    FB0QW01.FBMPAFL = "Y";
    FB0QW00.FB0QWLFE = "Y"; /* Line finished changed*/
    if (FB0QM010.FB0QMPTS != " "
     && FB0QM010.FB0QMPTS != FB0QW01.FB0QWPTS)
      converseLib.validationFailed(531); /* cannot enter when key fields changed*/
      set FB0QM010.FB0QMPTS cursor, bold;
    end
    if (FB0QM010.XPCCD != " "
     && FB0QM010.XPCCD != FB0QW01.XPCCD)
      converseLib.validationFailed(531); /* cannot enter when key fields changed*/
      set FB0QM010.XPCCD cursor, bold;
    end
    if (FB0QM010.XPLCD != " "
     && FB0QM010.XPLCD != FB0QW01.XPLCD)
      converseLib.validationFailed(531); /* cannot enter when key fields changed*/
      set FB0QM010.XPLCD cursor, bold;
    end
    if (FB0QM010.FB0QMBYM != 0
     && FB0QM010.FB0QMBYM != FB0QW01.FB0QWBYM)
      converseLib.validationFailed(531); /* cannot enter when key fields changed*/
      set FB0QM010.FB0QMBYM cursor, bold;
    end
    if (FB0QM010.XXXUSER != " "
     && FB0QM010.XXXUSER != FB0QW01.XXXUSER)
      converseLib.validationFailed(531); /* cannot enter when key fields changed*/
      set FB0QM010.XXXUSER cursor, bold;
    end
    FB0QW00.FB0QWIXM = FB0QW00.FB0QWMAX; /* last line on screen*/
    while (FB0QW00.FB0QWIXM >= 1) /* for all products on screX*/
      if (FB0QM010.FB0QMSEL[FB0QWIXM] != " ") /* product selected*/
        converseLib.validationFailed(111); /* cant change data*/
        set FB0QM010.FB0QMSEL[FB0QWIXM] cursor, bold; /* highlight*/
      end
      FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM - 1; /* previous screen line*/
    end
    if (FB0QW00.TA5TSQIX < 1)
      converseLib.validationFailed(18);
      exit stack;
    end
  end

   /* ----------------------------------------------------*/
   /* Restore product line finished flag in dfbuy.vfsctl01*/
   /* ----------------------------------------------------*/

  FB0QW00.FB0QWIX1 = 1;
  while (FB0QW00.FB0QWIX1 <= 20)
    if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
      FBMREC.FBMPAFL[FB0QWIX1] = FB0QW00.FBMPAFL; /* restore the*/
                                  /* line finished flag*/
    end
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end
   /* End of PF19 code*/
   /* ----------------------------------------------------*/
   /* Edit category code if entered or changed*/
   /* ----------------------------------------------------*/

  if (FB0QM010.XPCCD == " ")
    FB0QW01.XPCSDESC = " "; /* Map field may have been erased*/
    FB0QM010.XPCSDESC = " "; /* Map field may have been erased*/
    if (FB0QW01.XPCCD != " ")
      FB0QW00.FB0QWKFC = "Y"; /* Key fields have changed*/
    end
    FB0QW01.XPCCD = " "; /* Map field may have been erased*/
  else
    if (FB0QM010.XPCCD != FB0QW01.XPCCD) /* Category changed*/
      FB0QW00.FB0QWKFC = "Y"; /* Key fields have changed*/
      XPCREC.XPCCD = FB0QM010.XPCCD;
      XPCREC.XGPCD = "02";
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB0QW01.XPCCD = FB0QM010.XPCCD;
        FB0QW01.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
        FB0QM010.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0QM010.XPCCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit product line code  if entered or changed*/
   /* ----------------------------------------------------*/

  if (FB0QM010.XPLCD == " ")
   /* MOVE ' ' TO FB0QW01.XPLCD;     /* Field may have been erased*/
    if (FB0QW01.XPLCD != " ")
      FB0QW00.FB0QWKFC = "Y"; /* Key field have changed*/
    end
   /* Field may have been erased*/
    FB0QW01.XPLCD = " "; /* MOVE 8 TO EZEMNO;              /* Required field*/
    /* SET FB0QM010.XPLCD CURSOR,BRIGHT;*/
  else
    if (FB0QM010.XPLCD != FB0QW01.XPLCD) /* product line changed*/
      FB0QW00.FB0QWKFC = "Y"; /* Key fields have changed*/
      XPLREC.XPLCD = FB0QM010.XPLCD;
      XPLREC.XGPCD = "02";
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB0QW01.XPLCD = FB0QM010.XPLCD;
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0QM010.XPLCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit buy date if entered or changed.*/
   /* ----------------------------------------------------*/

  if (FB0QM010.FB0QMBYM == 0)
    FB0QW01.FB0QWBYM = "0"; /* Field may have been erased*/
    FB0QW00.FB0QWBDT = "0";
    converseLib.validationFailed(8); /* Required field*/
    set FB0QM010.FB0QMBYM cursor, bold;
  else
    if (FB0QM010.FB0QMBYM != FB0QW01.FB0QWBYM)
      FB0QW00.FB0QWKFC = "Y"; /* Key fields have changed*/
      FB0QW01.FB0QWBYM = 0;
      FB0QW00.FB0QWBDT = 0;
      /* ------ y2k out begin -------*/
      /* MOVE EZEDTE TO FB0QW00.FB0QWSDT;*/
      /* MOVE 19 TO FB0QW00.FB0QWBCC; /* Buy century*/
      /* MOVE 1 TO FB0QW00.FB0QWBDD;  /* Buy day*/
      /* MOVE FB0QM010.FB0QMBYM TO FB0QW00.FB0QWBYM;*/
      /* ------ y2k out end ---------*/
      /* ------ y2k in  begin -------*/
      FB0QW00.FB0QWSDT = VGVar.currentGregorianDate;
      FB0QW00.FB0QWBYM = FB0QM010.FB0QMBYM;
      FB0QW00.FB0QWBDD = 1; /* buy day*/
      FB0QW00.FB0QW-BUY-DT = FB0QW00.FB0QWBYM;
      if (FB0QW00.FB0QW-BUY-YY > 65)
        FB0QW00.FB0QWBCC = 19; /* buy century*/
        FB0QW00.FB0QW-BUY-CC = 19;
      else
        FB0QW00.FB0QWBCC = 20; /* buy century*/
        FB0QW00.FB0QW-BUY-CC = 20;
      end
      /* ------ y2k in end ----------*/
      if (FB0QW00.FB0QWBMM > 12) /* Month > 12*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0QM010.FB0QMBYM cursor, bold;
        FB0QW00.FB0QWBDT = 0;
        FB0QW01.FB0QWBYM = 0;
      else
        FB0QW00.FB0QWBYM = FB0QM010.FB0QMBYM;
        FB0QW01.FB0QWBYM = FB0QM010.FB0QMBYM;
      end
      if (FB0QW00.FB0QWBMM < 1) /* Month < 1*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0QM010.FB0QMBYM cursor, bold;
        FB0QW00.FB0QWBDT = 0;
        FB0QW01.FB0QWBYM = 0;
      else
        FB0QW00.FB0QWBYM = FB0QM010.FB0QMBYM;
        FB0QW01.FB0QWBYM = FB0QM010.FB0QMBYM;
      end
   /* ------- y2k out begin -------*/
      /* FB0QW00.FB0QWSYY = FB0QW00.FB0QWSYY - 1;*/
      /* IF FB0QW00.FB0QWBYY LT FB0QW00.FB0QWSYY;*/
   /* ------- y2k out end ---------*/
   /* ------- y2k in  begin -------*/
      FB0QW00.FB0QWSCY = FB0QW00.FB0QWSCY - 1;
      if (FB0QW00.FB0QW-BUY-CY < FB0QW00.FB0QWSCY)
   /* ------- y2k out end ---------*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0QM010.FB0QMBYM cursor, bold;
        FB0QW00.FB0QWBDT = 0;
        FB0QW01.FB0QWBYM = 0;
      else
        FB0QW00.FB0QWBYM = FB0QM010.FB0QMBYM;
        FB0QW01.FB0QWBYM = FB0QM010.FB0QMBYM;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit user id field if it has been modified.*/
   /* Validate field against DPRODG.VSUSER01 table.*/
   /* ----------------------------------------------------*/

  if (FB0QM010.XXXUSER != " "
   && FB0QM010.XXXUSER != FB0QW01.XXXUSER)
    if (converseVar.eventKey is enter)

      set PG1REC empty;
      PG1REC.XXXUSER = FB0QM010.XXXUSER;

      FB0Q120(); /* validate user id*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(257); /* scheduler code not on table*/
        set FB0QM010.XXXUSER cursor, bold;
      else
        FB0QW01.XXXUSER = FB0QM010.XXXUSER;
        FB0QW00.FB0QWKFC = "Y"; /* key fields changed*/
      end

    else
      converseLib.validationFailed(219); /* displayed data cannot change etc.*/
      set FB0QM010.XXXUSER cursor, bold;
    end
  end

   /* -------------------------------------------------------------*/
   /* Get records from vfblav01 coressponding to the row on map*/
   /* -------------------------------------------------------------*/
  if (converseVar.eventKey is pf19)
    FB0QWCPG = 0;
    FB0QW00.FB0QWIX1 = 1; /* for the proc fb0q550*/
    FB0QW00.FB0QWCPG = FB0QW00.FB0QWTSP;
    FB0QW00.FB0QWTSP = 1;
    while (FB0QW00.FB0QWTSP <= FB0QW00.TA5TSQIX)
      FB0QS11(); /* get the temp stor page*/
      FB0QW00.FB0QWIXM = 1;
      while (FB0QW00.FB0QWIXM <= FB0QW00.FB0QWMAX
       && FB0QM010.SY1STNBR != " ")
        FB0Q550();
        FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1;
      end
      FB0QW00.FB0QWTSP = FB0QW00.FB0QWTSP + 1;
    end
    FB0QW00.FB0QWTSP = FB0QW00.FB0QWCPG;
    FB0QS11();
  end

   /* ----------------------------------------------------*/
   /* If any edit errors on entered key fields exit to*/
   /* display map, otherwise if key fields have changed*/
   /* set request for data flag to yes.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (FB0QW00.FB0QWKFC == "Y") /* If key fields changed*/
    FB0QW00.FB0QWRDF = "Y"; /* Set request data flag to yes*/
    FB0QW00.FB0QWTSP = "1"; /* temp storage page requested*/
  end

  FB0QW00.FB0QWKFC = "N"; /* Key fields changed flag*/

  FB0QM010.XXXPRCNM = " ";

   /* ----------------------------------------------------*/
   /* If the page to style nbr has been entered verify*/
   /* that is exists on the DFCAST.VFFSTY01 table and*/
   /* find the page that it is on in temp storage.*/
   /* ----------------------------------------------------*/

  if (FB0QM010.FB0QMPTS != " ") /* Page to style nbr entered*/
    if (FB0QM010.FB0QMPTS != FB0QW01.FB0QWPTS)
      FB0Q510(); /* Verify page to style number*/
      FB0Q520(); /* Find page in temp storage*/
    end
  else
    FB0QW01.FB0QWPTS = " ";
  end


end // end FB0Q500

// Verify page to style nbr
Function FB0Q510()
   /* -------------------------------------------------*/
   /* Initialize record--and format key*/
   /* -------------------------------------------------*/

  set FF3REC empty;
  FF3REC.SY1STNBR = FB0QM010.FB0QMPTS;
  FF3REC.SY2CLRID = "00 ";
  FF3REC.XDMCD = "00";

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (FF3REC.PG1SC4CD != PG1REC.PG1SC4CD)
        converseLib.validationFailed(22); /* Invalid style number entered*/
        set FB0QM010.FB0QMPTS cursor, bold;
        exit stack;
      end
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/
      converseLib.validationFailed(22); /* invalid style number entered*/
      set FB0QM010.FB0QMPTS cursor, bold;
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q120"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q120";
  exit stack;

end // end FB0Q510

// Find temp storage page
Function FB0Q520()

  FB0QW00.FB0QWIX1 = 1;

  while (FB0QW00.FB0QWIX1 <= 50)
    if (FB0QW00.FB0QWFSN[FB0QWIX1] != " ")
      if (FB0QM010.FB0QMPTS <= FB0QW00.FB0QWLSN[FB0QWIX1])
        FB0QW00.FB0QWTSP = FB0QW00.FB0QWIX1;
        exit stack; /* ezeflo to display map*/
      end
    end
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end


end // end FB0Q520

Function FB0Q550()
  set FBLREC empty;

  FBLREC.SY1STNBR = FB0QW02.SY1STNBR[FB0QWIXM];
  FBLREC.SY2CLRID = FB0QW02.SY2CLRID[FB0QWIXM];
  FBLREC.XDMCD = FB0QW02.XDMCD[FB0QWIXM];
  FBLREC.XQACD = "01";
  FBLREC.XPGCD = "00";
  FBLREC.XUMCD = "01";
  FBLREC.FB8BUYDT = FBKREC.FB8BUYDT;
  FB0Q551(); /* open cursor for Vfblav01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FB0QW00.FB0QWIX2 = 1;
    FB0Q552(); /* fetch first record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (FBLREC.FB4RGPCT == 100)
        FB0QW05.SY1STNBR[FB0QWIX1] = FBLREC.SY1STNBR;
        FB0QW05.SY2CLRID[FB0QWIX1] = FBLREC.SY2CLRID;
        FB0QW05.XDMCD[FB0QWIX1] = FBLREC.XDMCD;
        FB0QW05.XQACD[FB0QWIX1] = "01";
        FB0QW05.XPGCD[FB0QWIX1] = "00";
        FB0QW05.PC2INSEG[FB0QWIX1] = "000";
        FB0QW05.XUMCD[FB0QWIX1] = "01";
        FB0QW05.FB8BUYDT[FB0QWIX1] = FBLREC.FB8BUYDT;
        FB0QW05.XWHCD1[FB0QWIX1] = FBLREC.XWHCD;
        FB0QW05.FB4RGPCT1[FB0QWIX1] = FBLREC.FB4RGPCT;
        FB0QW05.FBKRDFL[FB0QWIX1] = FBLREC.FBKRDFL;
        FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
        FB0QW00.FB0QWIX2 = 0;
      else
        FB0QW05.XWHCD1[FB0QWIX1] = FBLREC.XWHCD;
        FB0QW05.FB4RGPCT1[FB0QWIX1] = FBLREC.FB4RGPCT;
        FB0QW-RGPCT-TOT = FB0QW-RGPCT-TOT + FBLREC.FB4RGPCT;
        while (FB0QW00.FB0QWIX2 < 4)
          FB0Q552(); /* fetch second record*/
          FB0Q554(); /* chek for third record*/
          if (FB0QW-RGPCT-TOT == 100)
            FB0QW05.SY1STNBR[FB0QWIX1] = FBLREC.SY1STNBR;
            FB0QW05.SY2CLRID[FB0QWIX1] = FBLREC.SY2CLRID;
            FB0QW05.XDMCD[FB0QWIX1] = FBLREC.XDMCD;
            FB0QW05.XQACD[FB0QWIX1] = "01";
            FB0QW05.XPGCD[FB0QWIX1] = "00";
            FB0QW05.PC2INSEG[FB0QWIX1] = "000";
            FB0QW05.XUMCD[FB0QWIX1] = "01";
            FB0QW05.FB8BUYDT[FB0QWIX1] = FBLREC.FB8BUYDT;
            FB0QW05.FBKRDFL[FB0QWIX1] = FBLREC.FBKRDFL;
            FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
            FB0QW00.FB0QWIX2 = 0;
            FB0QW-RGPCT-TOT = 0;
          else
            FB0Q553(); /* Close the cursor*/
            FB0QW05.XWHCD1[FB0QWIX1] = 0;
            FB0QW05.FB4RGPCT1[FB0QWIX1] = 0;
            FB0QW05.XWHCD2[FB0QWIX1] = 0;
            FB0QW05.FB4RGPCT2[FB0QWIX1] = 0;
            FB0QW05.XWHCD3[FB0QWIX1] = 0;
            FB0QW05.FB4RGPCT3[FB0QWIX1] = 0;
            FB0QW-RGPCT-TOT = 0;
            return;
          end
          FB0Q553(); /* Close the cursor*/
          return;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      FB0Q553(); /* Close the cursor*/
      return;
    end
  end
  FB0Q553();
end // end FB0Q550

Function FB0Q551()
   /* ---------------------------------------------------------------*/
   /* select the row from dfbuy.vfblav02*/
   /* ---------------------------------------------------------------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == 811) /* Multiple rows*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q551"; /* Process name*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q551";
  exit stack;
end // end FB0Q551

Function FB0Q552()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "552"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end FB0Q552

Function FB0Q553()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* not Normal return code*/

      /* ------------------------------------------------------------*/
      /* indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "CLOSE CURSOR        ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = "553"; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack; /* Exit to display map*/
    end
  end
end // end FB0Q553

Function FB0Q554()
  if (SQLCA.VAGen_SQLCODE == 0)
    FB0QW05.XWHCD2[FB0QWIX1] = FBLREC.XWHCD;
    FB0QW05.FB4RGPCT2[FB0QWIX1] = FBLREC.FB4RGPCT;
    FB0QW-RGPCT-TOT = FB0QW-RGPCT-TOT + FBLREC.FB4RGPCT;
    FB0QW00.FB0QWIX2 = FB0QWIX2 + 1;
    if (FB0QW-RGPCT-TOT == 100)
      return;
    else
      FB0Q552(); /* fetch third record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        FB0QW05.XWHCD3[FB0QWIX1] = FBLREC.XWHCD;
        FB0QW05.FB4RGPCT3[FB0QWIX1] = FBLREC.FB4RGPCT;
        FB0QW-RGPCT-TOT = FB0QW-RGPCT-TOT + FBLREC.FB4RGPCT;
        FB0QW00.FB0QWIX2 = FB0QWIX2 + 1;
      else
        return;
      end
    end
  else
    return;
  end
end // end FB0Q554

// Process valid input
Function FB0Q600()

   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FB0QW00.FB0QWTSP = FB0QW00.FB0QWTSP - 1;
    return;
  end

  if (converseVar.eventKey is pf8)
    FB0QW00.FB0QWTSP = FB0QW00.FB0QWTSP + 1;
    return;
  end


   /* ----------------------------------------------------*/
   /* If PF17 process line finish flags in vfsctl01 table*/
   /* and possibly in vfqtbs01 table.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* Accept product line*/

    FB0Q610(); /* Process line finished flags*/
    FB0QW00.FB0QWLFE = "N";
    if (FB0QW00.FB0QWPFL == "N") /* No data for product line*/
      FB0QW00.FB0QWRDF = "N"; /* Dont Request data flag*/
    else
      FB0QW00.FB0QWRDF = "Y"; /* Request data flag*/
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

  end

   /* ----------------------------------------------------*/
   /* If enter has been pressed ezertn to display map*/
   /* ----------------------------------------------------*/


  if (converseVar.eventKey is pf17)
    if (sysVar.errorCode == "00000000") /* Successful call*/
      if (converseVar.validationMsgNum == 0) /* No other messages like partial update*/
        converseLib.validationFailed(32); /* Successful Update*/
        return;
      else
        return;
      end
      return;
    end
  end
   /* ----------------------------------------------------*/
   /* If PF13, PF14, PF16 have been pressed*/
   /* set up FBXREC & Fb0QW06 for transfer, purge temp storage*/
   /* and transfer to requested applications.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* FB0T*/
   || converseVar.eventKey is pf14 /* FB0R*/
   || converseVar.eventKey is pf16) /* FB0S*/


    set FBXREC empty;
    FBXREC.XPLCD = FB0QW01.XPLCD;
    FBXREC.XPCCD = FB0QW01.XPCCD;
    FBXREC.FB8BUYDT = FB0QW00.FB0QWBDT;
    FBXREC.XGPCD = "02";
    FBXREC.CAUSERID = FB0QW01.XXXUSER;

    FB0QW00.FB0QWIX1 = 1; /* Init FBXREC product array*/
    FB0QW00.FB0QWIXM = 1; /* Init map index*/

    while (FB0QW00.FB0QWIXM <= FB0QW00.FB0QWMAX) /* Max lines*/

      if (FB0QM010.FB0QMSEL[FB0QWIXM] == "S")
        FBXREC.SY1STNBR[FB0QWIX1] = FB0QM010.SY1STNBR[FB0QWIXM];
        FBXREC.SY2CLRID[FB0QWIX1] = FB0QM010.SY2CLRID[FB0QWIXM];
        FBXREC.XDMCD[FB0QWIX1] = FB0QM010.XDMCD[FB0QWIXM];
        FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
      end

      FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1;
    end

    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

    /* TCS CHANGE BEGINS*/
    set FB0QW06 empty;
    FB0QW06.XPLCD = FB0QW01.XPLCD;
    FB0QW06.XXXUSER = FB0QW01.XXXUSER;
    FB0QW06.XPCCD = FB0QW01.XPCCD;
    FB0QW06.FB0QWBYM = FB0QW00.FB0QWBYM;
    FB0QW06.FB0QWTSP = FB0QW00.FB0QWTSP;
    FB0QW06.TA5TSQIX1 = FB0QW00.TA5TSQIX;
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    FB0QW06.TA5TSQIX2 = TA5REC.TA5TSQIX;

    FB0QW00.FB0QWCIX1 = 1;
    while (FB0QW00.FB0QWCIX1 <= 50)
      if (FB0QW07.FB0QWAPPLN[FB0QWCIX1] == " ")
        FB0QW07.FB0QWAPPLN[FB0QWCIX1] = "FB0Q";
        FB0QW07.FB0QWAPPLD[FB0QWCIX1] = FB0QW06.FB0QWGRP2;
        CA-USER-WORKAREA-2K-C = FB0QW07.FB0QWGRP2;
        FB0QW00.FB0QWCIX1 = 50;
      end
      FB0QW00.FB0QWCIX1 = FB0QW00.FB0QWCIX1 + 1;
    end
    /* TCS CHANGE ENDS*/

    FB0Q110(); /* Purge temp storage*/


    if (converseVar.eventKey is pf13) /* B/L Availability adjustment (FB0T)*/
      COMMAREA.CATOAP = "FB0T";

      XSFBS01();
      FB0QM010.XXXPRCNM = "FB0Q600";
      exit stack;
    end

    if (converseVar.eventKey is pf14) /* B/L Availability inquiry (FB0R)*/
      COMMAREA.CATOAP = "FB0R";

      XSFBS01();
      FB0QM010.XXXPRCNM = "FB0Q600";
      exit stack;
    end
    if (converseVar.eventKey is pf16) /* Adjust the buy (FB0R)*/
      COMMAREA.CATOAP = "FB0S";

      XSFBS01();
      FB0QM010.XXXPRCNM = "FB0Q600";
      exit stack;
    end

  end


   /* ----------------------------------------------------*/
   /* RETURN IF PF15 OR PF21 HAS NOT BEEN REQUESTED.*/
   /* If PF15 OR PF21 HAS BEEN PRESSED THEN SUBMIT JCL*/
   /* TO RUN EITHER FB1121(PF15) OR FB1261(PF21).*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey not pf15
   && converseVar.eventKey not pf21
   && converseVar.eventKey not pf19)
    return;
  end

   /* ------------------------------------------------------*/
   /* Determine which environment the program is executing*/
   /* in: Test or Production.*/
   /* ------------------------------------------------------*/

  FB0Q630(); /* DETERMINE REGION*/


  set TA6REC empty; /* INIT TA6REC*/

   /* ----------------------------------------------------*/
   /* If PF21 has been pressed submit JCl to run job*/
   /* FB1261 the unapproved forecast report.*/
   /* ----------------------------------------------------*/


  if (converseVar.eventKey is pf21)
    if (TA3REC.TA3RGNID == "03") /* IF PRODUCTION ENVIRONMENT*/
      FB0Q640(); /* SUBMIT PRODUCTION REPORT*/
    else
      FB0Q650(); /* SUBMIT TEST REPORT*/
    end

    set FB0QM010 initial;

    FB0QW00.FB0QWRDF = "Y"; /* reload data*/

    FB0QW00.XXXMSGNO = 76; /* Job submitted for batch processing*/

  end


   /* ----------------------------------------------------*/
   /* IF PF15 HAS BEEN PRESSED SUBMIT JCL TO RUN JOB*/
   /* FB1121, THE PRODUCTS TO BUY REPORT(ITS A SCREEN*/
   /* PRINT OF FB0Q).*/
   /* ----------------------------------------------------*/


  if (converseVar.eventKey is pf15)
    if (PG1REC.PG1SC4CD == " ")
      FB0QW00.XXXMSGNO = 403;
    else
      if (TA3REC.TA3RGNID == "03") /* IF PRODUCTION ENVIRONMENT*/
        FB0Q660(); /* SUBMIT PRODUCTION REPORT*/
      else
        FB0Q670(); /* SUBMIT TEST REPORT*/
      end


      FB0Q620(); /* Submit the JCL*/

      set FB0QM010 initial;

      /* TCS CHANGE BEGIN*/
      FB0QW00.FB0QWRDF = "N"; /* reload data*/
      /* TCS CHANGE END*/

      FB0QW00.XXXMSGNO = 76; /* Job submitted for batch processing*/

    end
  end

   /* ----------------------------------------------------*/
   /* IF PF19 HAS BEEN PRESSED SUBMIT JCL TO RUN PROGRAM*/
   /* FB140D.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* master calculation*/
    FB0QS20(); /* Check for presence of parm records*/
    if (converseVar.validationMsgNum != 553) /* Message is other than 'No parm records found'.*/
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FB0Q680(); /* format production jcl*/
      else
        FB0Q690(); /* format development jcl*/
      end

      FB0Q682(); /* Submit the JCL*/
      FBXREC.XXXMSGNO = 16; /* Info msg, not err*/

      FB0QW00.XXXMSGNO = 76; /* Job submitted for batch processing*/
    else
      FB0QW00.XXXMSGNO = 553; /* No style/color to process for FB1401.*/
    end

  end
end // end FB0Q600

// Process line finished flags
Function FB0Q610()

   /* ------------------------------------------------------------*/
   /* This module sets the product line flag and if the product*/
   /* line is the last product line for a scheduler then it processes*/
   /* a module to update the last product line. Otherwise it*/
   /* processes a module to update the flags for a product line.*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QWIX1 = 1;
  FB0QW00.FBMPAFL = " "; /* Initialize product line flag*/

  while (FB0QW00.FB0QWIX1 <= 20)
    if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
      FB0QW00.FBMPAFL = FBMREC.FBMPAFL[FB0QWIX1];
      FBMREC.FBMPAFL[FB0QWIX1] = "Y";
      if (FB0QW00.FB0QWPFL == "N") /* no product for current product line*/
        FB0QM010.FBMPAFL = "Y"; /* set product line accept fl*/
        FBMREC.FBMDSLNF[FB0QWIX1] = "Y"; /* set direct ship line*/
                                                 /* finish flag*/
      end
      FB0QW00.FB0QWIX1 = 99; /* Drop out of loop*/
    end
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end

  FB0QW00.FB0QWIX1 = 1;
  FB0QW00.FB0QWFFF = "Y"; /* line finished flag*/

  while (FB0QW00.FB0QWIX1 <= 20)
    if (FBMREC.FBMPCD[FB0QWIX1] != " " /* line exists*/
     && FBMREC.FBMPAFL[FB0QWIX1] == "N") /* line not finished*/
      FB0QW00.FB0QWFFF = "N"; /* line finished flag*/
    end
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
  end

  if (FB0QW00.FB0QWFFF == "N") /* all lines not finished*/
    if (FB0QW00.FB0QWPFL == "Y") /* are styles for current product line*/
      FB0Q612(); /* Update vfqtbs01 calc flags*/
    end
  else
                                             /* all lines are finished*/
    if (FB0QW00.FB0QWPFL == "N") /* no product for current product line*/
      FBMREC.FBMFINFL = "Y"; /* direct ship acpt all fl*/
      FB0QM010.FBMFINFL = "Y"; /* map calc finishedflag*/
      FBMREC.FBMCFFL = "Y"; /* calc finishedflag*/
      FB0QM010.FBMCFFL = "Y"; /* map calc finishedflag*/
      FBMREC.FBMFLRFL = "Y"; /* set factory load run flag*/
    else
      FBMREC.FBMCFFL = "Y"; /* calc finishedflag*/
      FBMREC.FBMFLRFL = "Y"; /* set factory load run flag*/
      FB0Q612(); /* Update vfqtbs01 calc flags*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If only a partial update was done then reset the product line*/
   /* finished flag to 'N'.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 466 /* Partial update*/
   || converseVar.validationMsgNum == 467) /* No updates occurred*/

    FB0QW00.FB0QWIX1 = 1;

    while (FB0QW00.FB0QWIX1 <= 20)
      if (FB0QW01.XPLCD == FBMREC.FBMPCD[FB0QWIX1])
        FBMREC.FBMPAFL[FB0QWIX1] = "N";
        FB0QM010.FBMPAFL = "N"; /* Map line finished flag*/
        FB0QW00.FB0QWIX1 = 99; /* Drop out of loop*/
      end
      FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1;
    end
    FBMREC.FBMCFFL = "N"; /* calc finishedflag*/
    FB0QM010.FBMCFFL = "N"; /* map calc finishedflag*/
    FBMREC.FBMFLRFL = "N"; /* set factory load run flag*/
  end

  FB0Q614(); /* Update vfsctl01 flags*/
end // end FB0Q610

// Check for Direct Ship Toleranc
Function FB0Q612()

   /* ------------------------------------------------------------*/
   /* Read through temporary storage table to see if any styles*/
   /* that have not been calc'd have a STOCK QTB between + or -*/
   /* 199. (Forecasted QTB - Direct Ship QTB = Stock QTB)*/
   /* (if the stock qtb is + or - 199 it passes the*/
   /* edit check). Update the calc accept flag to 'y' if it meets*/
   /* the above criteria.*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QWCPG = 0; /* Initialize current page*/
  FB0QW00.FB0QWCPG = FB0QW00.FB0QWTSP; /* Save current page*/
  FB0QW00.FB0QWUFL = "N"; /* Update partially successful flag*/
  if (FB0QW00.TA5TSQIX > 0) /* pages were formatted*/
    FB0QW00.FB0QWIX1 = FB0QW00.TA5TSQIX; /* set to max pages*/
    FB0QW00.FB0QWTSP = FB0QW00.FB0QWIX1; /* Current page*/
    FB0QW00.FB0QWIXM = FB0QW00.FB0QWMAX; /* set to max lines*/

    while (FB0QW00.FB0QWIX1 >= 1)
      FB0QS11(); /* Obtain temp storage page*/
      while (FB0QW00.FB0QWIXM >= 1)


        if (FB0QW02.SY1STNBR[FB0QWIXM] != " ")
          if (FB0QW02.FB0QWFLA[FB0QWIXM] == "N") /* Calc accept flag*/
            /* FB0QW00.FB0QWBTL = FB0QW02.FB0QWSDB(FB0QWIXM) +*/
                               /* FB0QW02.FB0QWSTC(FB0QWIXM);*/
            /* FB0QW00.FB0QWTTL = FB0QW02.FB8FTQTB(FB0QWIXM) -*/
                               /* FB0QW00.FB0QWBTL;*/
            FB0QW00.FB0QWSVR = FB0QW02.FB0QWSTQ[FB0QWIXM] -             FB0QW02.FB0QWSTC[FB0QWIXM];
            if (FB0QW02.FB0QWSTQ[FB0QWIXM] <= 199 /* Stock qtb*/
             && FB0QW02.FB0QWSTQ[FB0QWIXM] >= -199)
              if (FB0QW00.FB0QWSVR <= 1000 /* variance*/
               && FB0QW00.FB0QWSVR >= -1000)
                FBKREC.FBKGROUP = FB0QW02.FBKGROUP[FB0QWIXM];
                FBKREC.FB8BUYDT = FB0QW00.FB0QWBDT;
                FBKREC.FBKCAFL = "Y"; /* Update the calc accpt fl*/
                FB0Q616(); /* Update calc flag in dfbuy.vfqtbs01*/
                if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/
                  FB0QW02.FB0QWFLA[FB0QWIXM] = FBKREC.FBKCAFL;
                  FB0QW00.FB0QWUFL = "Y"; /* Update partially*/
                                  /* successful flag*/
                end
              else
                converseLib.validationFailed(466); /* Update partially successful*/
                FB0QW01.FBMPAFL = "N"; /* Reset flag*/
              end
            else
              converseLib.validationFailed(466); /* Update partially successful*/
            end
          end
        end
        FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM - 1;
      end
      FB0QW00.FB0QWIXM = FB0QW00.FB0QWMAX; /* set to max lines*/
      FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 - 1;
      FB0QW00.FB0QWTSP = FB0QW00.FB0QWIX1; /* Current page*/
    end
  end
  FB0QW00.FB0QWTSP = FB0QW00.FB0QWCPG; /* Reset to current page*/

  if (converseVar.validationMsgNum == 466) /* Update partially successful*/
    if (FB0QW00.FB0QWUFL != "Y") /* No updates occurred on vfqtbs01*/
      converseLib.validationFailed(467); /* No updates occurred*/
    end
  end


end // end FB0Q612

// Update flags on DFBUY.VFSCTL01
Function FB0Q614()

   /* ------------------------------------------------------------*/
   /* This module updates flags on the dfbuy.vfsctl01 table*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Modify table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/

      converseLib.validationFailed(20); /* Record updated by another user*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q614 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q614"; /* Process name*/

  exit stack;

end // end FB0Q614

// Update flags on DFBUY.VFSCTL01
Function FB0Q616()

   /* ------------------------------------------------------------*/
   /* This module updates flags on the dfbuy.vfqtbs01 table*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;



  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Modify table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/

      converseLib.validationFailed(20); /* Record updated by another user*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0Q616 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0Q616"; /* Process name*/

  exit stack;

end // end FB0Q616

// Submit jcl to internal reader
Function FB0Q620()



   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0QM010.XXXPRCNM = "FB0Q620"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0QM010.XXXPRCNM = "FB0Q620"; /* module identification*/

  end

  exit stack;


end // end FB0Q620

// get region information
Function FB0Q630()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    FB0QM010.XXXPRCNM = "FB0Q630"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end


end // end FB0Q630

// Process FB1261 prod JCL
Function FB0Q640()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FB0QT03.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

       /* MOVE FB0QW02.FB0QW-PARM TO TA6REC.TARJCL(TA6INDEX);*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QT03.TARTYPE[FB0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QT03.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QT03.TARTYPE[FB0QWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QT03.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else

      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0QM010.XXXPRCNM = "FB0Q640"; /* module identification*/

  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0QM010.XXXPRCNM = "FB0Q640"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FB0Q640

// Process FB1261 test JCL
Function FB0Q650()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/


  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/

    if (FB0QTT3.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

      /* MOVE FB0ZW02.FB0ZW-PARM TO TA6REC.TARJCL(TA6INDEX);*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QTT3.TARTYPE[FB0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QTT3.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QTT3.TARTYPE[FB0QWIXT];

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QTT3.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else

      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0QM010.XXXPRCNM = "FB0Q650"; /* module identification*/

  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0QM010.XXXPRCNM = "FB0Q650"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FB0Q650

// Process FB1121 prod jcl
Function FB0Q660()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the jcl.*/
   /* ------------------------------------------------------------*/


  TA6REC.TA6MSGSW = "N";
  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/


    if (FB0QT01.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/

      FB0QW00.PG1SC4CD = PG1REC.PG1SC4CD;
      FB0QW00.FB0QWPBD = FB0QW00.FB0QWBDT; /* Buy date*/
      FB0QW00.XPLCD = FB0QW01.XPLCD;
      FB0QW00.XPCCD = FB0QW01.XPCCD;
      FB0QW00.SY1STNBR = FB0QW01.FB0QWPTS;

      TA6REC.TARJCL[TA6INDEX] = FB0QW00.FB0QWPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QT01.TARTYPE[FB0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QT01.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QT01.TARTYPE[FB0QWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QT01.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else

      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0Q660

// Process FB1121 TEST jcl
Function FB0Q670()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the jcl.*/
   /* ------------------------------------------------------------*/


  TA6REC.TA6MSGSW = "N";
  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/


    if (FB0QTT1.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/

      FB0QW00.PG1SC4CD = PG1REC.PG1SC4CD;
      FB0QW00.FB0QWPBD = FB0QW00.FB0QWBDT; /* Buy date*/
      FB0QW00.XPLCD = FB0QW01.XPLCD;
      FB0QW00.XPCCD = FB0QW01.XPCCD;
      FB0QW00.SY1STNBR = FB0QW01.FB0QWPTS;

      TA6REC.TARJCL[TA6INDEX] = FB0QW00.FB0QWPRM; /* Jcl*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QTT1.TARTYPE[FB0QWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QTT1.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QTT1.TARTYPE[FB0QWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QTT1.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else

      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0Q670

Function FB0Q680()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/

    if (FB0QT04.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format region parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = FB0QT04.TARTYPE[FB0QWIXT]; /* Type*/

      FB0Q681(); /* formats parm jcl*/

    else
           /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QT04.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QT04.TARTYPE[FB0QWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QT04.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else

      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end

end // end FB0Q680

Function FB0Q681()
  set FB0QW04 empty;

  FB0QW00.FB0QWIXM = 1; /* first line on page*/

  while (FB0QWIXM <= 10000
  )
    if (FB0QW05.SY1STNBR[FB0QWIXM] == "  "
    )
      TA6REC.TARJCL[TA6INDEX] = FB0QW04.FB0QWCMT; /* JCL parm comment*/
      return;
    else
      FB0QW04.FB0QWCMT = "//*"; /* indicate a comment jcl card*/
      FB0QW04.XGPCD = "02";
      FB0QW04.SY1STNBR = FB0QW05.SY1STNBR[FB0QWIXM];
      FB0QW04.SY2CLRID = FB0QW05.SY2CLRID[FB0QWIXM];
      FB0QW04.XDMCD = FB0QW05.XDMCD[FB0QWIXM];
      FB0QW04.XQACD = "01";
      FB0QW04.PC2INSEG = "000";
      FB0QW04.XPGCD = "00";
      FB0QW04.XUMCD = "01";
      FB0QW00.FB0QWBYM = FB0QM010.FB0QMBYM;
      /* ----------- y2k out begin ----------*/
      /* MOVE 19 TO FB0QW00.FB0QWBCC;*/
      /* ----------- y2k in  end ------------*/
      if (FB0QW00.FB0QWBYY > 60)
        FB0QW00.FB0QWBCC = 19;
      else
        FB0QW00.FB0QWBCC = 20;
      end
      /* ----------- y2k in end -------------*/
      FB0QW00.FB0QWBDD = 01;
      FB0QW04.FB8BUYDT = FB0QW00.FB0QWBDT;
      FB0QW04.XWHCD1 = FB0QW05.XWHCD1[FB0QWIXM];
      FB0QW04.XWHCD2 = FB0QW05.XWHCD2[FB0QWIXM];
      FB0QW04.XWHCD3 = FB0QW05.XWHCD3[FB0QWIXM];
      FB0QW04.FB0QWPCA = FB0QW05.FB4RGPCT1[FB0QWIXM];
      FB0QW04.FB0QWPCB = FB0QW05.FB4RGPCT2[FB0QWIXM];
      FB0QW04.FB0QWPCC = FB0QW05.FB4RGPCT3[FB0QWIXM];
      FB0QW04.FBKRDFL = FB0QW05.FBKRDFL[FB0QWIXM];

      TA6REC.TARJCL[TA6INDEX] = FB0QW04.FB0QWPMR; /* jcl*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1; /* increment line index*/

    end

  end

end // end FB0Q681

// submit batch jcl
Function FB0Q682()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  TA6REC.TA6SUBSW = "Y"; /* tailor and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* no end of submit messages*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end FB0Q682

Function FB0Q690()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0QW00.FB0QWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0QW00.FB0QWIXT > 0) /* Until end of table*/

    if (FB0QTT4.TARTYPE[FB0QWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format region parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = FB0QTT4.TARTYPE[FB0QWIXT]; /* Type*/

      FB0Q681(); /* formats parm jcl*/

    else
           /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0QTT4.TARJCL[FB0QWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0QTT4.TARTYPE[FB0QWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end
    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0QTT4.TARJCL[FB0QWIXT] == "/*EOF") /* End of table*/

      FB0QW00.FB0QWIXT = 0; /* Indicate end of table*/

    else


      FB0QW00.FB0QWIXT = FB0QW00.FB0QWIXT + 1; /* Increment table index*/

    end

  end

end // end FB0Q690

// open DFCAST.VFFSTY01 cursor
Function FB0QS01()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QWFSC = "N"; /* Set cursor to no*/



  try
    call "IO3990" ("S5", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS01"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS01";
  exit stack;

end // end FB0QS01

// Fetch DFCAST.VFFSTY01 row
Function FB0QS02()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3990" ("N5", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0QW00.FB0QWFSC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS02"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS02";
  exit stack;

end // end FB0QS02

// open DFBUY.VDNORD01 cursor
Function FB0QS03()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QWDNC = "N"; /* Set cursor to no*/



  try
    call "IO4640" ("S7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS03"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS03";
  exit stack;

end // end FB0QS03

// Fetch DFBUY.VDNORD01 row
Function FB0QS04()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4640" ("N7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0QW00.FB0QWDNC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS04";
  exit stack;

end // end FB0QS04

// Close DFBUY.VDNORD01 cursor
Function FB0QS05()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4640" ("C7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS05"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS05";
  exit stack;

end // end FB0QS05

// open DFBUY.VSRQTB01 cursor
Function FB0QS06()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VSRQTB01*/
   /* ------------------------------------------------------------*/

  FB0QW00.FB0QWSQC = "N"; /* Set cursor to no*/



  try
    call "IO4630" ("S1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS06"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS06";
  exit stack;

end // end FB0QS06

// Fetch DFBUY.VSRQTB01 row
Function FB0QS07()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4630" ("N1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (FBGREC.XWHCD in FB0QW00.XWH-WHSE-CD)
        FB0QW00.FB0QWDWS = "Y"; /* domestic whse found*/
      end

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0QW00.FB0QWSQC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS07"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS07";
  exit stack;

end // end FB0QS07

// Close DFBUY.VSRQTB01 cursor
Function FB0QS08()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VSRQTB01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4630" ("C1", SQLCA, FBGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS08"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS08";
  exit stack;

end // end FB0QS08

// Add page to temp storage
Function FB0QS09()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FB0QW02.FB0QWTSL = FB0QW00.FB0QWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FB0QW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FB0QW02 empty; /* Temp storage record*/

    FB0QW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB0QW00.FB0QWIXM = 0; /* temp storage line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0QM010.XXXPRCNM = "FB0QS09"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FB0QM010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0QS09

// Close DFCAST.VFFSTY01 Cussor
Function FB0QS10()

   /* ------------------------------------------------------------*/
   /* Close cursor for DFCAST.VFFSTY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C5", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS10"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS10";
  exit stack;

end // end FB0QS10

// Obtain temp storage page
Function FB0QS11()


   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/

  FB0QW02.FB0QWTSL = FB0QW00.FB0QWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB0QW00.FB0QWTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FB0QW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0QM010.XXXPRCNM = "FB0QS11"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0QS11

// Get current buy month
Function FB0QS12()


  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS12"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS12";
  exit stack;

end // end FB0QS12

// Join VPAHDR01 & VPAWRK01
Function FB0QS13()

   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension.*/
   /* ------------------------------------------------------------*/



  set FBIREC empty;
  FBIREC.FBI-FB0Q-SUB-GROUP = FB0QW03.FB0QW3KY;
  try
    call "FB1510" ("SC", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0QW03.FB0QW3KY = FBIREC.FBI-FB0Q-SUB-GROUP;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS13"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS13";
  exit stack;

end // end FB0QS13

// check for preadvises
Function FB0QS14()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0QW00.FB0QW-PREADVISE-COUNT = FBIREC.FBI-COUNT;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS14"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS14";
  exit stack;

end // end FB0QS14

// check for diverts
Function FB0QS15()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as count of DPRODC.VPOITM01,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  FB0QW00.FB0QW-OA-COUNT = 0; /* initialize oa counter*/
  FB0QS151(); /* determine oa count*/

  FB0QW00.FB0QW-PO-COUNT = 0; /* initialize po counter*/
  FB0QS152(); /* determine po count*/

  if (FB0QW00.FB0QW-OA-COUNT > 0
   && FB0QW00.FB0QW-PO-COUNT > 0)
    FB0QW00.FB0QW-DIVERT-COUNT = 0;
  else
    if (FB0QW00.FB0QW-OA-COUNT > 0
     && FB0QW00.FB0QW-PO-COUNT == 0)
      FB0QW00.FB0QW-DIVERT-COUNT = 1;
    else
      if (FB0QW00.FB0QW-OA-COUNT == 0
       && FB0QW00.FB0QW-PO-COUNT > 0)
        FB0QW00.FB0QW-DIVERT-COUNT = 1;
      else
        if (FB0QW00.FB0QW-OA-COUNT == 0
         && FB0QW00.FB0QW-PO-COUNT == 0)
          FB0QW00.FB0QW-DIVERT-COUNT = 0;
        end
      end
    end
  end


end // end FB0QS15

// determine OA count
Function FB0QS151()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0QW00.FB0QW-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS151"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS151";
  exit stack;

end // end FB0QS151

// determine PO count
Function FB0QS152()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/



  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0QW00.FB0QW-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0QS152"; /* Process name*/
  TA1REC.TA1LOC = "VPOITM01";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0QM010.XXXPRCNM = "FB0QS152";
  exit stack;

end // end FB0QS152

// Load sum code array
Function FB0QS16()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB0QS17(); /* declare cursor*/
  FB0QW00.FB0QWIX1 = 1; /* first row*/

  while (FB0QW00.FB0QWIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB0QS18(); /* fetch row*/
    FB0QW00.FB0QWIX1 = FB0QW00.FB0QWIX1 + 1; /* next row*/
  end

  if (FB0QW00.FB0QWIX1 <= 10)
    FB0QS19(); /* close cursor*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  FB0QM010.XXXPRCNM = "FB0QS16"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB0QW00.FB0QWRDF = "N"; /* dont request data*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0QS16

// Select set DCORP.VSUMCD01
Function FB0QS17()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB0QM010.XXXPRCNM = "FB0QS17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0QW00.FB0QWRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB0QS17

// Fetch row DCORP.VSUMCD01
Function FB0QS18()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0QW00.XWH-WHSE-CD[FB0QWIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FB0QM010.XXXPRCNM = "FB0QS18"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    FB0QW00.FB0QWRDF = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end

end // end FB0QS18

// Close cursor DCORP.VSUMCD01
Function FB0QS19()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FB0QM010.XXXPRCNM = "FB0QS19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0QM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0QW00.FB0QWRDF = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end FB0QS19

// Check for Calc parms
Function FB0QS20()
   /* This routine will check for existence of any parm records*/
   /* going to FB1401. If none are going, then an error message*/
   /* will be shown and no job submitted. GREDDY 01/10/00*/

  FB0QW00.FB0QWIXM = 1; /* First line on page*/

  while (FB0QWIXM <= 10000)

    if (FB0QW00.FB0QWIXM == 10000)
      converseLib.validationFailed(553); /* No style/color to process.*/
      return;
    end
    if (FB0QW05.SY1STNBR[FB0QWIXM] != " ")
      return;
    end
    if (FB0QW05.SY1STNBR[FB0QWIXM] == " ")
      FB0QW00.FB0QWIXM = FB0QW00.FB0QWIXM + 1; /* Increment line index*/
    end
  end
   /* END*/

end // end FB0QS20

//*** RECORD=FB0QW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0QW00 type basicRecord
  5 * char(908) ; 
    10 FB0QWTSL FB0QWTSL ; 
    10 FB0QWRDF FB0QWRDF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0QWTSP FB0QWTSP ; 
    10 FB0QWFSC FB0QWFSC ; 
    10 FB0QWDNC FB0QWDNC ; 
    10 FB0QWSQC FB0QWSQC ; 
    10 FB0QWLFE FB0QWLFE ; 
    10 FB0QWSDF FB0QWSDF ; 
    10 FB0QWCAF FB0QWCAF ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 FB0QWFFF FB0QWFFF ; 
    10 FB0QWKFC FB0QWKFC ; 
    10 FB0QWDWS FB0QWDWS ; 
    10 FB0QWLCT FB0QWLCT ; 
    10 FB0QWCNT FB0QWCNT ; 
    10 FBHDSAFL FBHDSAFL ; 
    10 FB0QWPFL FB0QWPFL ; 
    10 * char(1) ; 
    10 FB0QWFDT FB0QWFDT ; 
      15 FB0QWFCT FB0QWFCT ; 
      15 FB0QWFYM FB0QWFYM ; 
        20 FB0QWFYY FB0QWFYY ; 
        20 FB0QWFMM FB0QWFMM ; 
      15 FB0QWFDD FB0QWFDD ; 
    10 FB0QWYMD FB0QWYMD ; 
      15 FB0QWYY FB0QWYY ; 
      15 FB0QWMM FB0QWMM ; 
      15 FB0QWDD FB0QWDD ; 
    10 FB0QWBDT FB0QWBDT ; 
      15 FB0QWBCC FB0QWBCC ; 
      15 FB0QWBYM FB0QWBYM ; 
        20 FB0QWBYY FB0QWBYY ; 
        20 FB0QWBMM FB0QWBMM ; 
      15 FB0QWBDD FB0QWBDD ; 
    10 FB0QWDRD FB0QWDRD ; 
      15 FB0QWDYY FB0QWDYY ; 
      15 FB0QWDMM FB0QWDMM ; 
      15 FB0QWDDD FB0QWDDD ; 
    10 FB0QWPDT FB0QWPDT ; 
      15 FB0QWPBM FB0QWPBM ; 
      15 FB0QWPDD FB0QWPDD ; 
    10 FB0QWSDT FB0QWSDT ; 
      15 FB0QWSCY FB0QWSCY ; 
        20 FB0QWSCC FB0QWSCC ; 
        20 FB0QWSYY FB0QWSYY ; 
      15 FB0QWSMM FB0QWSMM ; 
      15 FB0QWSDD FB0QWSDD ; 
    10 TA1TBLKE TA1TBLKE ; 
    10 FB0QWIXM FB0QWIXM ; 
    10 FB0QWIXT FB0QWIXT ; 
    10 FB0QWIX1 FB0QWIX1 ; 
    10 FB0QWCIX1 FB0QWCIX1 ; 
    10 FB0QWIX2 FB0QWIX2 ; 
    10 FB0QWNQT FB0QWNQT ; 
    10 FB0QWSQT FB0QWSQT ; 
    10 FB0QWSVR FB0QWSVR ; 
    10 FB0QWMAX FB0QWMAX ; 
    10 * char(1) ; 
    10 FB0QWPRM FB0QWPRM ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 FB0QWPBD FB0QWPBD ; 
      15 XPLCD XPLCD ; 
      15 XPCCD XPCCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 * char(64) ; 
    10 * char(1) ; 
    10 FB0QWFSN FB0QWFSN [50] ; 
    10 FB0QWLSN FB0QWLSN [50] ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FBMPAFL FBMPAFL ; 
    10 FB0QWUFL FB0QWUFL ; 
    10 FB0QWCPG FB0QWCPG ; 
    10 FB0QW-PREADVISE-TOT FB0QW-PREADVISE-TOT ; 
    10 FB0QW-RGPCT-TOT FB0QW-RGPCT-TOT ; 
    10 FB0QW-PREADVISE-COUNT FB0QW-PREADVISE-COUNT ; 
    10 FB0QW-DIR-SHP-PREADV-TOT FB0QW-DIR-SHP-PREADV-TOT ; 
    10 FB0QW-DIVERT-TOT FB0QW-DIVERT-TOT ; 
    10 FB0QW-DIVERT-COUNT FB0QW-DIVERT-COUNT ; 
    10 FB0QW-OA-COUNT FB0QW-OA-COUNT ; 
    10 FB0QW-PO-COUNT FB0QW-PO-COUNT ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
    10 FB0QW-TMP-DT FB0QW-TMP-DT ; 
      15 FB0QW-TMP-CC FB0QW-TMP-CC ; 
      15 FB0QW-TMP-YY FB0QW-TMP-YY ; 
      15 FB0QW-TMP-MM FB0QW-TMP-MM ; 
      15 FB0QW-TMP-DD FB0QW-TMP-DD ; 
    10 FB0QW-CHK-DT FB0QW-CHK-DT ; 
      15 FB0QW-CHK-CY FB0QW-CHK-CY ; 
        20 FB0QW-CHK-CC FB0QW-CHK-CC ; 
        20 FB0QW-CHK-YY FB0QW-CHK-YY ; 
      15 FB0QW-CHK-MM FB0QW-CHK-MM ; 
      15 FB0QW-CHK-DM FB0QW-CHK-DM ; 
    10 FB0QW-CHK-DTE FB0QW-CHK-DTE ; 
    10 FB0QW-BUY-DT FB0QW-BUY-DT ; 
      15 FB0QW-BUY-CY FB0QW-BUY-CY ; 
        20 FB0QW-BUY-CC FB0QW-BUY-CC ; 
        20 FB0QW-BUY-YY FB0QW-BUY-YY ; 
      15 FB0QW-BUY-MM FB0QW-BUY-MM ; 
end // end FB0QW00

//*** RECORD=FB0QW01 ****
// Fb0qm010 map heading storage record
// ***********************
Record FB0QW01 type basicRecord
  10 XXXUSER XXXUSER ; 
  10 FB0QWBYM FB0QWBYM ; 
  10 XPLCD XPLCD ; 
  10 XPCCD XPCCD ; 
  10 XPCSDESC XPCSDESC ; 
  10 FBMCFFL FBMCFFL ; 
  10 FBMFINFL FBMFINFL ; 
  10 FBMPAFL FBMPAFL ; 
  10 FB0QWPTS FB0QWPTS ; 
  10 * char(1) ; 
end // end FB0QW01

//*** RECORD=FB0QW02 ****
// FB0W temporary storage detail record
// ***********************
Record FB0QW02 type basicRecord
  5 FB0QW02G FB0QW02G ; 
    10 FB0QWTSL FB0QWTSL ; 
    10 FB0QW02R FB0QW02R [14] ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 FB0QWSTQ FB0QWSTQ ; 
      15 FB0QWSTC FB0QWSTC ; 
      15 FB0QWSDB FB0QWSDB ; 
      15 FB8FTQTB FB8FTQTB ; 
      15 PT3YYMM PT3YYMM ; 
      15 FB0QWFLG FB0QWFLG ; 
        20 FB0QWFLO FB0QWFLO ; 
        20 FB0QWFLB FB0QWFLB ; 
        20 FB0QWFLD FB0QWFLD ; 
        20 FB0QWFLA FB0QWFLA ; 
      15 ZZZCHGCT ZZZCHGCT ; 
      15 FBKGROUP FBKGROUP ; 
end // end FB0QW02

//*** RECORD=FB0QW03 ****
// ********** SPECIAL FUNCTION I/O MODULE PARAMETERS **********
// 
// This record contains the function code and the beginning and
// ending months needed for special "count" function in IO5480.
// This record replaces the function literal that is passed as
// a parameter in the CALL statement.
// 
//    EXAMPLE:
//    --------
//    CALL IO5480 AV01W04,SQLCA,AVWREC (NOMAPS,NONCSP,REPLY;
// 
// ***********************
Record FB0QW03 type basicRecord
  5 FB0QW3KY FB0QW3KY ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PA1BUYMO PA1BUYMO ; 
    10 XWHCD XWHCD ; 
    10 FB0QWSCT FB0QWSCT ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FB0QOAFL FB0QOAFL ; 
    10 FB0QCRDT FB0QCRDT ; 
    10 FB0QCRTM FB0QCRTM ; 
end // end FB0QW03

//*** RECORD=FB0QW04 ****
// rjogia     created for master calc
// ***********************
Record FB0QW04 type basicRecord
  10 FB0QWPRR FB0QWPRR ; 
    15 FB0QWCMT FB0QWCMT ; 
    15 FB0QWPMR FB0QWPMR ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 FB8BUYDT FB8BUYDT ; 
      20 XWHCD1 XWHCD1 ; 
      20 FB0QWPCA FB0QWPCA ; 
      20 XWHCD2 XWHCD2 ; 
      20 FB0QWPCB FB0QWPCB ; 
      20 XWHCD3 XWHCD3 ; 
      20 FB0QWPCC FB0QWPCC ; 
      20 FBKRDFL FBKRDFL ; 
      20 * char(31) ; 
  10 FB0QWCND FB0QWCND ; 
    15 * char(18) ; 
    15 FB0QWCON FB0QWCON ; 
    15 * char(47) ; 
end // end FB0QW04

//*** RECORD=FB0QW05 ****
// rjogia       created for master calc
// ***********************
Record FB0QW05 type basicRecord
  10 FB0QW5RC FB0QW5RC [10000] ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 FB8BUYDT FB8BUYDT ; 
    15 XWHCD1 XWHCD1 ; 
    15 FB4RGPCT1 FB4RGPCT1 ; 
    15 XWHCD2 XWHCD2 ; 
    15 FB4RGPCT2 FB4RGPCT2 ; 
    15 XWHCD3 XWHCD3 ; 
    15 FB4RGPCT3 FB4RGPCT3 ; 
    15 FBKRDFL FBKRDFL ; 
end // end FB0QW05

//*** RECORD=FB0QW06 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// Record to save necessary data,while tranfer to another
// application.
// ***********************
Record FB0QW06 type basicRecord
  5 FB0QWGRP2 FB0QWGRP2 ; 
    10 FB0QWBYM FB0QWBYM ; 
    10 XXXUSER XXXUSER ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FB0QWTSP FB0QWTSP ; 
    10 TA5TSQIX1 TA5TSQIX1 ; 
    10 TA5TSQIX2 TA5TSQIX2 ; 
    10 * char(2020) ; // XPC_PROD_CAT_SDESC
end // end FB0QW06

//*** RECORD=FB0QW07 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// Record to save necessary data,while tranfer to another
// application.
// ***********************
Record FB0QW07 type basicRecord
  5 FB0QWGRP2 FB0QWGRP2 ; 
    10 FB0QWGRP3 FB0QWGRP3 [50] ; 
      15 FB0QWAPPLN FB0QWAPPLN ; 
      15 FB0QWAPPLD FB0QWAPPLD ; 
      15 * char(8) ; 
    10 * char(48) ; // Increment and decrement page
end // end FB0QW07

// CURRENT DATE
DataItem FB0QCRDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT TIME HHMMSS
DataItem FB0QCRTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PENDING O/A FLAG
DataItem FB0QOAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW-BUY-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW-BUY-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date century portion
DataItem FB0QW-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date delivery mnth
DataItem FB0QW-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date field
DataItem FB0QW-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date in db format
DataItem FB0QW-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date mnfcture mnth
DataItem FB0QW-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date year portion
DataItem FB0QW-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product preadvise total
DataItem FB0QW-DIR-SHP-PREADV-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product divert count
DataItem FB0QW-DIVERT-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product divert total
DataItem FB0QW-DIVERT-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product OA count(for diverts)
DataItem FB0QW-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product PO count(for diverts)
DataItem FB0QW-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product preadvise count
DataItem FB0QW-PREADVISE-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product preadvise total
DataItem FB0QW-PREADVISE-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product preadvise total
DataItem FB0QW-RGPCT-TOT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date century portion
DataItem FB0QW-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date day portion
DataItem FB0QW-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date for converting buy dt
DataItem FB0QW-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date month portion
DataItem FB0QW-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date year portion
DataItem FB0QW-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QW02G char(2020)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QW02R char(144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level record
DataItem FB0QW3KY char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QW5RC char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem FB0QWAPPLD char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user terminal id
DataItem FB0QWAPPLN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy century
DataItem FB0QWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB0QWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB0QWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB0QWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date yymm
DataItem FB0QWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FB0QWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// all calcs accepted flag
DataItem FB0QWCAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB0QWCIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWCND char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select field counter
DataItem FB0QWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWCON char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page
DataItem FB0QWCPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FB0QWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA day
DataItem FB0QWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA month
DataItem FB0QWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Direct ship/Nil cursor flag
DataItem FB0QWDNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat detail RTA date
DataItem FB0QWDRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Domestic whse found flag
DataItem FB0QWDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Detail RTA year
DataItem FB0QWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem FB0QWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB0QWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB0QWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// all lines finished flag
DataItem FB0QWFFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// A(ccept calc)
DataItem FB0QWFLA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B(/L adj)
DataItem FB0QWFLB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// D(rs prd acpt)
DataItem FB0QWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map displayed flags
DataItem FB0QWFLG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// open O/A's flag
DataItem FB0QWFLO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem FB0QWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast style cursor flag
DataItem FB0QWFSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWFSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB0QWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem FB0QWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWGRP2 char(2048)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB0QWGRP3 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB0QWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 1
DataItem FB0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB0QWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key fields changed flag
DataItem FB0QWKFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line counter
DataItem FB0QWLCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line finished entered flag
DataItem FB0QWLFE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWLSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max lines per map
DataItem FB0QWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FB0QWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dir ship/nil qty to buy total
DataItem FB0QWNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm buy date
DataItem FB0QWPBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adj buy ccyymm
DataItem FB0QWPBM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWPCA num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWPCB num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWPCC num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order add buy day
DataItem FB0QWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order adj buy date
DataItem FB0QWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No product found flag
DataItem FB0QWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWPMR char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWPRR char(82)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWPTS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB0QWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0QWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWSCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DRS BLD
DataItem FB0QWSDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System day
DataItem FB0QWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style data found flag
DataItem FB0QWSDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// System date
DataItem FB0QWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System month
DataItem FB0QWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size quantity cursor flag
DataItem FB0QWSQC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size quantity total
DataItem FB0QWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stock calc
DataItem FB0QWSTC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stock QTB
DataItem FB0QWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0QWSVR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System year
DataItem FB0QWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FB0QWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB0QWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Partial update fl
DataItem FB0QWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YYMMDD Date
DataItem FB0QWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FB0QWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-reg-pct
DataItem FB4RGPCT1 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-reg-pct
DataItem FB4RGPCT2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-reg-pct
DataItem FB4RGPCT3 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

