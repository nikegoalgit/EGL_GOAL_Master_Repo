package fb0t;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWH-WHSE-CD;
import corpx2.XWHCD;
import corpx2.XWHCD1;
import corpx2.XWHCD2;
import corpx2.XWHCD3;
import corpx2.XWHSABRV;
import corpz3.ZZZCHGCT;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB8BUYDT;
import fb.common.FBHREC;
import fb.common.FBIREC;
import fb.common.FBKRDFL;
import fb.common.FBKREC;
import fb.common.FBLREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT3YYMM;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0T ****
// This application is part of the footwear buy system.  It is
// a maintenance screen that shows bottom line availability by
// size/warehouse and for all warehouses combined.  It also
// displays bottom line percent which is the b/l available
// quantity by size divided by total b/l available quantity for
// a warehouse.  The standard region percent is also listed.
// Adjustments to the b/l available quantities may be made
// through this screen.
// 
// To view all sizes, pf10 and pf11 are provided to shift left
// and right.  The number of sizes to be scrolled may be
// entered.  The default is 10.
// 
// The User may exit to any allowed application via fastpath or
// pf keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 09/12/89   lrein    Created.
// 08/02/90   jalle1   added DATAIN to p0020 steps of jcl
//                     tables that submit job fb1401.
// 09/26/90   jalle1   add stock qtb, rnd-flag, and print calc
//                     rpt fields to map header and pgm logic.
// 04/16/91   jalle1   fix scroll errors.
// 04/24/91   jalle1   unprotect color and dimension; allow
//                     key change in these fields.
// 04/26/91   jalle1   remove fblrec.fbltaqty from calculation
//                     of adjusted bottom line availability.
// 06/10/91   jalle1   revise scrolling logic.
// 10/02/91   jmclau   fix bug fb268 so correct size
//                     will be display whenever dim changes.
// 01/27/93   jmclau   PF-308 non-nil direct ship orders that
//                     have pre-advises should be taken out of
//                     the stock quantity to buy calculation.
// 07/09/93   ldeluh   Chg testrms to testenc in test jcl.
// 10/15/93   ldeluh   Fix AZRA abend.
// 11/15/93   pmainw   FB-322 - Take diverts out of the stock
//                     QTB calculation.
// 12-22-94   lrein    added sum code table to verify only
//                     domestic whses used.  this for
//                     European centralised forecast project
// 05-24-96   JLIBER   Modify divert logic.
// 08-23-96   RTRAN    Correct the ASRA problems since the
//                     screen cannot handle either one or two
//                     warehouse.  This problem relates to data
//                     integrity.
// 10/24/96   rtran    Modified to bring the future orders into
//                     the current buy.
// 11/17/97   RJOGIA   Modified to bring Indirect Dsirect ship-
//                     ment into the current buy.
// 12/11/97   RTRAN    Quick fix to FB0T Indirect Dsirect ship-
//                     ment into the current buy...
// 01-13-98   oricha   y2k modifications:  m010 zero fill year;
//                     w00, w01, 100, 110, 120, 130, 190, 210,
//                     500, 600, 621, 630, 651, 653.
// 02-11-98   oricha   y2k modifications:  fix iomod fb0q630.
// 06/15/98   MSEVAL   Corrected the ASRA abend.
// 04-02-99   VANNAM   Modified to display MacKinney Systems
//                     Output Screen message after completion
//                     of the background jobs.
//                     And also, when a job is submitted, the
//                     message number 76 was displayed instead
//                     of message number 16.
// 04/19/99   RTRAN    Retored logic not to display Mackinney
//                     Output Screen message.
// *********************
Program FB0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0TW00 FB0TW00; // record
  FB0TW01 FB0TW01; // record
  FB0TW02 FB0TW02; // record
  FB0TW03 FB0TW03; // record
  FB4REC FB4REC; // record
  FBHREC FBHREC; // record
  FBIREC FBIREC; // record
  FBKREC FBKREC; // record
  FBLREC FBLREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0TT01; // table
  use FB0TT02; // table
  use XWHTBL; // table
  use FB0TM.FB0TM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set FBXREC empty; /* initialise commarea*/
    set FB0TW00 empty; /* Initialize working storage*/
    set FB0TW01 empty; /* Initialize working storage*/
    set FB0TW02 empty; /* Initialize working storage*/
    set FB0TW03 empty; /* Initialize working storage*/
    set FBIREC empty; /* Initialize working storage*/
                                     /* for fb1510 iomod*/
    set FB0TM010 initial; /* Initialize map output area*/
    FB0TW00.FB0TWRDS = "N"; /* no to request data switch*/
    FB0TW00.FB0TWMCS = "N"; /* no to format map switch*/
    FB0TW00.FB0TWRCS = "N"; /* region percent didnt change*/
    FB0TM010.FB0TMPCR = "N"; /* default print calc rpt to 'n'*/
    ;
    if (COMMAREA.CAFRMSYS == "FB")
      ;
      if (COMMAREA.CAFROMAP != "FB0A"
       && COMMAREA.CAFROMAP != "FB0B"
       && COMMAREA.CAFROMAP != "FB0C"
       && COMMAREA.CAFROMAP != "FB0D"
       && COMMAREA.CAFROMAP != "FB0E"
       && COMMAREA.CAFROMAP != "FB0G"
       && COMMAREA.CAFROMAP != "FB0I"
       && COMMAREA.CAFROMAP != "FB0J"
       && COMMAREA.CAFROMAP != "FB0K"
       && COMMAREA.CAFROMAP != "FB0L"
       && COMMAREA.CAFROMAP != "FB0N"
       && COMMAREA.CAFROMAP != "FB0O"
       && COMMAREA.CAFROMAP != "FB0P")
        FBXREC.FBXGROUP = FBWREC.FBWFILL;
      else
        set FBXREC empty;
      end
      ;
      if (FBXREC.SY1STNBR[1] != " ")
        FB0TM010.SY1STNBR = FBXREC.SY1STNBR[1];
        FB0TW00.FB0TWRDS = "Y"; /* obtain data*/
        FB0TW00.FB0TWMCS = "Y"; /* format map*/
      end
      ;
      if (FBXREC.SY2CLRID[1] != " ")
        FB0TM010.SY2CLRID = FBXREC.SY2CLRID[1];
        FB0TW00.FB0TWRDS = "Y"; /* obtain data*/
        FB0TW00.FB0TWMCS = "Y"; /* format map*/
      end
      ;
      if (FBXREC.XDMCD[1] != " ")
        FB0TM010.XDMCD = FBXREC.XDMCD[1];
        FB0TW00.FB0TWRDS = "Y"; /* obtain data*/
        FB0TW00.FB0TWMCS = "Y"; /* format map*/
      end
      ;
      if (FBXREC.FB8BUYDT != 0)
        FB0TW00.FB0TWBDT = FBXREC.FB8BUYDT;
        FB0TM010.FB0TMBMO = FB0TW00.FB0TMBMO;
        FB0TW00.FB0TW-ORD-ADJ-BUY-DT = FBXREC.FB8BUYDT;
        FB0TW00.FB0TWRDS = "Y"; /* obtain data*/
        FB0TW00.FB0TWMCS = "Y"; /* format map*/
      end
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* set defaults*/
     /* ------------------------------------------------------------*/
    ;
    FB0TW00.FB0TWGIX = 1; /* init index*/
    ;
    while (FB0TW00.FB0TWGIX <= 40) /* for each size*/
      FB0TW00.FB0TWZHD = "N";
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
    end
    ;
    FB0TW00.FB0TMSZS = 10; /* default size scroll*/
    FB0TW00.FB0TWCSI = 1; /* current size index*/
    FB0TW00.FB0TWFSI = 1; /* first size index*/
    FB0TW00.FB0TWLSI = 40; /* last size index*/
    ;
    goto FB0T001; /* Converse Footwear Menu*/
    ;
    ;
    FB0T001: FB0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the bottom line availibility main process.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0T001; /* Converse Transportation Prototype*/
    ;
    ;
  end // end main
end // end FB0T

// b/l availibility main process
Function FB0T001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain the data to display*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0T100(); /* Obtain data to display*/
  ;
  FB0T200(); /* Format and display the map*/
  ;
  FB0T300(); /* Check attention identifier*/
  ;
  FB0T400(); /* Reset fields to normal intensity*/
  ;
  FB0T500(); /* Verify the entered data*/
  ;
  FB0T600(); /* Process valid input request*/
  ;
  ;
  ;
end // end FB0T001

// obtain data to display
Function FB0T100()
  if (FB0TW00.FB0TWRCS == "Y")
    FB0TW00.FB4RGPCT[1] = FB0TM010.FB4RGPCT[1];
    FB0TW00.FB4RGPCT[2] = FB0TM010.FB4RGPCT[2];
    FB0TW00.FB4RGPCT[3] = FB0TM010.FB4RGPCT[3];
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWSSR = "Y"; /* scroll switch*/
  ;
  if (FB0TW00.FB0TWRDS != "Y") /* Data was not requested*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  FB0TS09(); /* load sum code array*/
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from the frozen bottom*/
   /* line table.*/
   /* ------------------------------------------------------------*/
  ;
  set FBLREC empty; /* initialise record*/
  FBLREC.SY1STNBR = FB0TM010.SY1STNBR; /* style number*/
  FBLREC.SY2CLRID = FB0TM010.SY2CLRID; /* color code*/
  FBLREC.XDMCD = FB0TM010.XDMCD; /* dimension code*/
  FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO; /* move yymm to workarea*/
   /* --------- y2k out begin --------*/
   /* MOVE 19 TO FB0TW00.FB0TWBCC;     /* buy date century*/
   /* --------- y2k out end ----------*/
   /* --------- y2k in  begin --------*/
  if (FB0TW00.FB0TMBYY > 65)
    FB0TW00.FB0TWBCC = 19; /* buy date century*/
  else
    FB0TW00.FB0TWBCC = 20; /* buy date century*/
  end
   /* --------- y2k in end -----------*/
  FB0TW00.FB0TWBDD = 01; /* buy date day*/
  FBLREC.FB8BUYDT = FB0TW00.FB0TWBDT; /* move to ccyymm01*/
  move 0 to FB0TW00.FB0TWFSQ[1] for all;
  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBLREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBLREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBLREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
  else
    FBLREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBLREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBLREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBLREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBLREC.XUMCD = "01"; /* move default*/
  end
  ;
  FB0T110(); /* select set fr b/l table*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear the row storage area, and obtain all table rows to be*/
   /* accumulated.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWFFI = "Y"; /* initialise first fetch sw*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* for each row in the selected set*/
    set FBLREC empty; /* clear area for frozen b/l table*/
    FB0TW00.FB0TWDWS = "N"; /* no domestic whse*/
    FB0T120(); /* get the table row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100
     && FB0TW00.FB0TWFFI == "Y")
      set FB0TW02 empty;
      set FB0TW01 empty;
      /* ------------------------------------------------------------*/
       /* Save the key information in map display storage area.*/
      /* ------------------------------------------------------------*/
      ;
      FB0TW00.FB0TWNFW = 0; /* number of whses found*/
      FB0TW01.SY1STNBR = FB0TM010.SY1STNBR; /* style number*/
      FB0TW01.SY2CLRID = FB0TM010.SY2CLRID; /* color code*/
      FB0TW01.XDMCD = FB0TM010.XDMCD; /* dimension code*/
      /* --------- y2k out begin --------*/
      /* MOVE FB0TM010.PT3YYMM TO FB0TW01.PT3YYMM;*/
      /* --------- y2k out end ----------*/
      /* --------- y2k IN BEGIN ---------*/
      FB0TW01.FB0TW-PT3-DT = FB0TM010.PT3YYMM; /* BOTTOM LINE MO*/
      if (FB0TW01.FB0TW-PT3-YY > 65)
        FB0TW01.FB0TW-PT3-CC = 19;
      else
        FB0TW01.FB0TW-PT3-CC = 20;
      end
      /* --------- y2k in END -----------*/
      FB0TW01.FB0TMBMO = FB0TM010.FB0TMBMO; /* buy month*/
      FB0TW01.FB0TMSZS = FB0TM010.FB0TMSZS; /* scroll amount*/
      FBXREC.SY1STNBR[1] = FB0TM010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB0TM010.SY2CLRID;
      FBXREC.XDMCD[1] = FB0TM010.XDMCD;
      FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO;
      /* --------- y2k out begin --------*/
      /* MOVE 19 TO FB0TW00.FB0TWBCC;     /* buy date century*/
      /* --------- y2k out end ----------*/
      /* --------- y2k in  begin --------*/
      if (FB0TW00.FB0TMBYY > 65)
        FB0TW00.FB0TWBCC = 19; /* buy date century*/
      else
        FB0TW00.FB0TWBCC = 20; /* buy date century*/
      end
      /* --------- y2k in end -----------*/
      FB0TW00.FB0TWBDD = 01;
      FBXREC.FB8BUYDT = FB0TW00.FB0TWBDT;
      FB0TW01.FB0TMPCR = FB0TM010.FB0TMPCR;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0
     && FB0TW00.FB0TWDWS == "Y" /* domestic whse found*/
     && FB0TW00.FB0TWFFI == "Y") /* first fetch*/
      FB0TW00.FB0TWFFI = "N"; /* not first fetch anymore*/
      FB0TW00.FB0TWTFP = 0; /* Total frozen percent*/
      set FB0TW02 empty;
      set FB0TW01 empty;
      FB0TW02.FB0TWSRP = "Y";
      move "N" to FB0TW02.FB0TWSPF[1] for all; /* Standard percent found flag*/
      move " " to FB0TW02.FBKRDFL[1] for all; /* round flag*/
      /* ------------------------------------------------------------*/
       /* Save the key information in map display storage area.*/
      /* ------------------------------------------------------------*/
      ;
      FB0TW00.FB0TWNFW = 0; /* number of whses found*/
      FB0TW01.SY1STNBR = FB0TM010.SY1STNBR; /* style number*/
      FB0TW01.SY2CLRID = FB0TM010.SY2CLRID; /* color code*/
      FB0TW01.XDMCD = FB0TM010.XDMCD; /* dimension code*/
      /* --------- y2k out begin --------*/
      /* MOVE FB0TM010.PT3YYMM TO FB0TW01.pt3yymm;*/
      /* --------- y2k out END ----------*/
      /* --------- y2k in  begin --------*/
      FB0TW01.FB0TW-PT3-DT = FB0TM010.PT3YYMM; /* BOTTOM LINE MO*/
      if (FB0TW01.FB0TW-PT3-YY > 65)
        FB0TW01.FB0TW-PT3-CC = 19;
      else
        FB0TW01.FB0TW-PT3-CC = 20;
      end
      /* --------- y2k in end -----------*/
      FB0TW01.FB0TMBMO = FB0TM010.FB0TMBMO; /* buy month*/
      FB0TW01.FB0TMSZS = FB0TM010.FB0TMSZS; /* scroll amount*/
      FBXREC.SY1STNBR[1] = FB0TM010.SY1STNBR;
      FBXREC.SY2CLRID[1] = FB0TM010.SY2CLRID;
      FBXREC.XDMCD[1] = FB0TM010.XDMCD;
      FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO;
      /* --------- y2k out begin --------*/
      /* MOVE 19 TO FB0TW00.FB0TWBCC;     /* buy date century*/
      /* --------- y2k out end ----------*/
      /* --------- y2k in  begin --------*/
      if (FB0TW00.FB0TMBYY > 65)
        FB0TW00.FB0TWBCC = 19; /* buy date century*/
      else
        FB0TW00.FB0TWBCC = 20; /* buy date century*/
      end
      /* --------- y2k in end -----------*/
      FB0TW00.FB0TWBDD = 01;
      FBXREC.FB8BUYDT = FB0TW00.FB0TWBDT;
      FB0TW01.FB0TMPCR = FB0TM010.FB0TMPCR;
    end
    ;
    /* ------------------------------------------------------------*/
     /* if found, save the data in working storage area*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     && FB0TW00.FB0TWDWS == "Y") /* domestic whse found*/
      FB0T130(); /* save data in display working storage*/
    else
      ;
      /* ------------------------------------------------------------*/
       /* Otherwise, if first fetch, indicate that no data was found*/
       /* to display*/
      /* ------------------------------------------------------------*/
      ;
      if (FB0TW00.FB0TWFFI == "Y") /* first fetch*/
        FB0TS01(); /* reset map*/
        FB0TW00.FB0TWSSR = "N"; /* cant scroll*/
        FB0TM010.XXXMODID = "100"; /* Module identification*/
        set FB0TM010.SY1STNBR cursor, bold; /* highlight, place cursor*/
        set FB0TM010.SY2CLRID bold; /* highlight*/
        set FB0TM010.XDMCD bold; /* highlight*/
        converseLib.validationFailed(18); /* Indicate no data found*/
        FB0TW00.FB0TWMCS = "Y"; /* dont format map*/
      end
      ;
    end
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* no more rows*/
    ;
    /* ------------------------------------------------------------*/
     /* close cursor*/
    /* ------------------------------------------------------------*/
    ;
      /* --------- y2k out begin --------*/
    /* CALL IO4680 'C1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
      /* --------- y2k out end ----------*/
      /* --------- y2k in  begin --------*/
    try
      call "VFBLAV02" ("C1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
      /* --------- y2k in end -----------*/
    ;
    /* ------------------------------------------------------------*/
     /* If successful or not found, return to the previous process.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      ;
      /* ------------------------------------------------------------*/
       /* indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      ;
      FB0TM010.XXXMODID = "100"; /* Module identification*/
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "CLOSE CURSOR        ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
      TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      FB0TW00.FB0TWRDS = "N"; /* dont request data*/
      exit stack; /* Exit to display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from the size/region*/
   /* percent table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* no errors*/
   || converseVar.validationMsgNum == 7) /* no more pages*/
    set FB4REC empty; /* initialise record*/
    FB4REC.SY1STNBR = FB0TM010.SY1STNBR; /* style number*/
    FB4REC.SY2CLRID = FB0TM010.SY2CLRID; /* color code*/
    FB4REC.XDMCD = FB0TM010.XDMCD; /* dimension code*/
    FB4REC.FB4STDFL = "Y"; /* standard pct flag*/
    if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
      FB4REC.XQACD = FBXREC.XQACD[1]; /* move to key*/
    else
      FB4REC.XQACD = "01"; /* move default*/
    end
    ;
    if (FBXREC.PC2INSEG[1] != "   ")
                                   /* spec code not spaces*/
      FB4REC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
    else
      FB4REC.PC2INSEG = "000"; /* move default*/
    end
    ;
    if (FBXREC.XPGCD[1] != "  ") /* package type code not spaces*/
      FB4REC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
    else
      FB4REC.XPGCD = "00"; /* move default*/
    end
    ;
    if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
      FB4REC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
    else
      FB4REC.XUMCD = "01"; /* move default*/
    end
    ;
    if (FBWREC.XGPCD != "  ") /* gpc in commarea*/
      FB4REC.XGPCD = FBWREC.XGPCD; /* move to key*/
    else
      FB4REC.XGPCD = "02"; /* move default*/
    end
    ;
    FB4REC.FB4STDFL = "Y"; /* standard curve only*/
    FB4REC.XSACD = "000"; /* default shade code*/
    ;
    FB0T140();
                                   /* select set size/reg pct tbl*/
    ;
    move +0 to FB0TW00.FB0TWPC1[1] for all;
    move +0 to FB0TW00.FB0TWPC2[1] for all;
    move +0 to FB0TW00.FB0TWPC3[1] for all;
    FB0TW00.FB0TWPR1 = +0;
    FB0TW00.FB0TWPR2 = +0;
    FB0TW00.FB0TWPR3 = +0;
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area, and obtain all table rows to be*/
     /* accumulated.*/
    /* ------------------------------------------------------------*/
    ;
    FB0TW00.FB0TWFFI = "Y"; /* initialise first fetch sw*/
    ;
    while (SQLCA.VAGen_SQLCODE != 100) /* for each row in the selected set*/
      set FB4REC empty; /* clear area for size/reg pct tbl*/
      FB0T150(); /* get the table row*/
      ;
      /* ------------------------------------------------------------*/
       /* if found, save the data in working storage area*/
      /* ------------------------------------------------------------*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FB0T160(); /* save data in display working storage*/
      else
        if (FB0TW00.FB0TWFFI == "Y")
          FB0TW02.FB0TWSRP = "NA"; /* Standard percent flag*/
        end
      end
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* no more rows*/
      ;
      /* ------------------------------------------------------------*/
       /* close cursor*/
      /* ------------------------------------------------------------*/
      ;
      try
        call "IO3020" ("C4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
      end /* Select row*/
      ;
      /* ------------------------------------------------------------*/
       /* If successful or not found, return to the previous process.*/
      /* ------------------------------------------------------------*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
        ;
        /* ------------------------------------------------------------*/
         /* indicate that a system error has occurred.*/
        /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
        TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
        ;
        FB0TM010.XXXMODID = "100"; /* Module identification*/
        ;
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        ;
        converseLib.clearScreen();
         /* Clear screen before display*/
        ;
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "CLOSE CURSOR        ";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
        TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
        TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        FB0TW00.FB0TWRDS = "N"; /* dont request data*/
        exit stack; /* Exit to display map*/
      end
      ;
    end
    ;
    FB0T170(); /* get product description*/
    FB0TS08(); /* get size descriptions*/
    FB0T180(); /* get warehouse description*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate stock qtb.*/
   /* ------------------------------------------------------------*/
  ;
  FB0T190(); /* calculate stock qtb*/
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* No error was found*/
    return;
  end
  FB0TW00.FB0TWRDS = "N"; /* Request for data switch*/
  FB0TW00.FB0TWMCS = "Y"; /* format map*/
  ;
  if (FB0TW00.FB0TWRCS == "Y")
    FB0TW02.FB4RGPCT[1] = FB0TW00.FB4RGPCT[1];
    FB0TW02.FB4RGPCT[2] = FB0TW00.FB4RGPCT[2];
    FB0TW02.FB4RGPCT[3] = FB0TW00.FB4RGPCT[3];
  end
  ;
   /* ------------------------------------------------------------*/
   /* check for any invalid sizes---all entered fields need to be*/
   /* protected if there are.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TS03();
  ;
  ;
  ;
end // end FB0T100

// select set from frozen b/l tbl
Function FB0T110()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------ y2k out begin -------*/
   /* CALL IO4680 'S1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select set*/
   /* ------ y2k out end ---------*/
   /* ------ y2k in  begin -------*/
  try
    call "VFBLAV02" ("S1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
   /* ------ y2k in end ----------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T110

// get frozen b/l table row
Function FB0T120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------- y2k out begin ------*/
   /* CALL IO4680 'N1',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("N1", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ---------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBLREC.XWHCD in FB0TW00.XWH-WHSE-CD)
        FB0TW00.FB0TWDWS = "Y";
      end
      ;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T120

// save b/l data in display ws
Function FB0T130()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* group of values by size to a work area, so it can be*/
    /* subscripted through when accumulating from the record.*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number and b/l date from the record to the table*/
   /* ------------------------------------------------------------*/
  ;
   /* Add percent for each warehouse into working storage field*/
  ;
  FB0TW00.FB0TWTFP = FB0TW00.FB0TWTFP + FBLREC.FB4RGPCT;
  ;
  FB0TW00.FB0TWWIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWWIX < 4) /* until table end*/
    ;
    if (FBLREC.XWHCD == FB0TW02.XWHCD[FB0TWWIX]) /* warehouses match*/
      FB0TW00.FB0TWGRP = FB0TW02.FB0TWGRP[FB0TWWIX]; /* to separate*/
      FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX]; /* to separate*/
      FB0TW02.FBKRDFL[FB0TWWIX] = FBLREC.FBKRDFL;
      FB0TW02.ZZZCHGCT[FB0TWWIX] = FBLREC.ZZZCHGCT;
      FB0TW00.FB0TWSIX = FB0TW00.FB0TWWIX; /* save index*/
      FB0TW00.FB0TWWIX = 4; /* end loop*/
    else
      ;
      if (FB0TW02.XWHCD[FB0TWWIX] == "  ") /* no match in tbl*/
        FB0TW02.ZZZCHGCT[FB0TWWIX] = FBLREC.ZZZCHGCT;
        FB0TW02.XWHCD[FB0TWWIX] = FBLREC.XWHCD;
                                   /* first for this whse*/
        FB0TW02.FBKRDFL[FB0TWWIX] = FBLREC.FBKRDFL;
   /* -------- y2k out begin ------*/
       /* MOVE FBLREC.PT3YYMM TO FB0TW01.PT3YYMM;  /* b/l yymm*/
   /* -------- y2k out end --------*/
   /* -------- y2k in  begin ------*/
        FB0TW01.FB0TW-PT3-DT = FBLREC.PT3YYMM;
   /* -------- y2k in end -- ------*/
        ;
        if (FB0TW00.FB0TWRCS == "N")
          FB0TW02.FB4RGPCT[FB0TWWIX] = FBLREC.FB4RGPCT;
        end
        ;
        FB0TW00.FB0TWNFW = FB0TW00.FB0TWNFW + 1; /* another warehouse found*/
        FB0TW00.FB0TWGIX = 1; /* first size*/
        ;
        while (FB0TW00.FB0TWGIX < 41) /* for each size*/
          FB0TW00.FB0TMBLQ[FB0TWGIX] = 0; /* quantity bucket*/
          FB0TW00.FB0TMADJ[FB0TWGIX] = 0; /* adjustments bucket*/
          FB0TW00.FB0TMABQ[FB0TWGIX] = 0;
                                   /* adjusted quantity bucket*/
          FB0TWGIX = FB0TWGIX + 1;
        end
        ;
        FB0TW02.FB0TWGRP[FB0TWWIX] = FB0TW00.FB0TWGRP;
        FB0TW02.FB0TWAGR[FB0TWWIX] = FB0TW00.FB0TWAGR;
        FB0TW02.FB0TWNGR[FB0TWWIX] = FB0TW00.FB0TWNGR;
        FB0TW00.FB0TWGRP = FB0TW02.FB0TWGRP[FB0TWWIX]; /* to separate*/
        FB0TW00.FB0TWSIX = FB0TW00.FB0TWWIX; /* save index*/
        FB0TW02.ZZZCHGCT[FB0TWWIX] = FBLREC.ZZZCHGCT;
        FB0TW00.FB0TWWIX = 4; /* end loop*/
      else
        FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* bump index*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* add the various values for each size to the appropriate*/
    /* bucket*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWGIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWGIX < 41) /* for each size*/
    FB0TW00.FB0TWWK = FB0TW00.FB0TMBLQ[FB0TWGIX];
    FB0TW00.FB0TWWK = FB0TW00.FB0TWWK + FBLREC.PT3AVQT[FB0TWGIX];
    FB0TW00.FB0TWWK = FB0TW00.FB0TWWK + FBLREC.FBLDAQTY[FB0TWGIX];
    FB0TW00.FB0TWWK = FB0TW00.FB0TWWK + FBLREC.FBLOAQTY[FB0TWGIX];
    FB0TW00.FB0TMBLQ[FB0TWGIX] = FB0TW00.FB0TWWK; /* back to bucket*/
    FB0TW00.FB0TWFSQ[FB0TWGIX] = FB0TW00.FB0TWFSQ[FB0TWGIX] + FB0TWWK;
    ;
    FB0TW00.FB0TWWK = FB0TW00.FB0TMADJ[FB0TWGIX];
    FB0TW00.FB0TWWK = FB0TW00.FB0TWWK + FBLREC.FBLMAQTY[FB0TWGIX];
    FB0TW00.FB0TWFSQ[FB0TWGIX] = FB0TW00.FB0TWFSQ[FB0TWGIX] + FB0TWWK;
    FB0TW00.FB0TMADJ[FB0TWGIX] = FB0TW00.FB0TWWK; /* back to bucket*/
    ;
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* bump index*/
  end
  ;
  FB0TW02.FB0TWGRP[FB0TWSIX] = FB0TW00.FB0TWGRP; /* back to table*/
  FB0TW02.FB0TWAGR[FB0TWSIX] = FB0TW00.FB0TWAGR; /* back to table*/
  ;
   /* ------------------------------------------------------------*/
    /* determine which sizes need to be displayed on map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWGIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWGIX < 41) /* for each size*/
    ;
    if (FBLREC.PT3AVQT[FB0TWGIX] != 0
     || FBLREC.FBLDAQTY[FB0TWGIX] != 0
     || FBLREC.FBLMAQTY[FB0TWGIX] != 0
     || FBLREC.FBLOAQTY[FB0TWGIX] != 0)
      ;
      FB0TW00.FB0TWZHD[FB0TWGIX] = "Y"; /* display this size*/
      ;
    end
    ;
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* bump index*/
  end
  ;
  ;
end // end FB0T130

// select set from sz/reg pct tbl
Function FB0T140()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T140

// get size/region percent row
Function FB0T150()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0TW00.FB0TWFFI = "N"; /* not first fetch anymore*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "150"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TW00.FB0TWRDS = "N";
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T150

// save size/reg pct data in ws
Function FB0T160()
   /* ------------------------------------------------------------*/
    /* search the table of warehouses.  if a match, move the*/
    /* size region percent to the table for that warehouse*/
    /* if there has been no entry for this warehouse, move the*/
    /* warehouse number, the size region percent, and initialise*/
    /* the accumulators for the new warehouse.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWWIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWWIX < 4) /* until table end*/
    ;
    if (FB4REC.XWHCD == FB0TW02.XWHCD[FB0TWWIX]) /* warehouses match*/
      if (FB0TWWIX == 1)
        move FB4REC.FB4SZPCT to FB0TW00.FB0TWPC1[1] for all;
        FB0TW00.FB0TWPR1 = FB4REC.FB4RGPCT;
      else
        if (FB0TWWIX == 2)
          move FB4REC.FB4SZPCT to FB0TW00.FB0TWPC2[1] for all;
          FB0TW00.FB0TWPR2 = FB4REC.FB4RGPCT;
        else
          if (FB0TWWIX == 3)
            move FB4REC.FB4SZPCT to FB0TW00.FB0TWPC3[1] for all;
            FB0TW00.FB0TWPR3 = FB4REC.FB4RGPCT;
          end
        end
      end
      FB0TW02.FB0TWSPF[FB0TWWIX] = "Y"; /* Standard percent flag*/
      if (FB4REC.FB4RGPCT != FB0TW02.FB4RGPCT[FB0TWWIX])
        FB0TW02.FB0TWSRP = "N";
      end
      ;
         /* IF FB0TW00.FB0TWRCS EQ 'N';*/
           /* MOVE FB4REC.FB4RGPCT TO FB0TW02.FB4RGPCT(FB0TWWIX);*/
         /* END ;*/
      ;
      FB0TW00.FB0TWWIX = 4; /* end loop*/
    else
      ;
      if (FB0TW02.XWHCD[FB0TWWIX] == "  ") /* no match in tbl*/
        FB0TW02.XWHCD[FB0TWWIX] = FB4REC.XWHCD;
                                   /* first for this whse*/
        FB0TW02.FB0TWSRP = "Y";
        ;
             /* IF FB0TW00.FB0TWRCS EQ 'N';*/
               /* MOVE FB4REC.FB4RGPCT TO FB0TW02.FB4RGPCT(FB0TWWIX);*/
             /* END ;*/
        ;
        FB0TW00.FB0TWGIX = 1; /* first size*/
        ;
        while (FB0TW00.FB0TWGIX < 41) /* for each size*/
          FB0TW00.FB0TMBLQ[FB0TWGIX] = 0; /* b/l qty*/
          FB0TW00.FB0TMADJ[FB0TWGIX] = 0; /* adjustments*/
          FB0TW00.FB0TMABQ[FB0TWGIX] = 0; /* adjusted qty*/
          FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
        end
        ;
        FB0TW02.FB0TWGRP[FB0TWWIX] = FB0TW00.FB0TWGRP;
        FB0TW02.FB0TWAGR[FB0TWWIX] = FB0TW00.FB0TWAGR;
        FB0TW02.FB0TWNGR[FB0TWWIX] = FB0TW00.FB0TWNGR;
        FB0TW00.FB0TWWIX = 4; /* end loop*/
      else
        FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* bump index*/
      end
      ;
    end
    ;
  end
  ;
  ;
end // end FB0T160

// get product desc
Function FB0T170()
   /* ------------------------------------------------------------*/
    /* build key for pg2rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FB0TM010.SY1STNBR;
  PG2REC.SY2CLRID = FB0TM010.SY2CLRID;
  PG2REC.XDMCD = FB0TM010.XDMCD;
  TA1REC.TA1PGMNM = "FB0T170";
  ;
  XSPG202();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or product not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB0TM010.XXXMODID = "170";
    FB0TW00.FB0TWRDS = "N"; /* dont request data to obtain*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* product not found*/
    FB0TS01(); /* reset map*/
    FB0TW00.FB0TWSSR = "N"; /* cant scroll*/
    set FB0TW02 empty;
    converseLib.validationFailed(167); /* invalid product*/
    FB0TM010.XXXMODID = "170";
    set FB0TM010.SY1STNBR cursor, bold;
    set FB0TM010.SY2CLRID bold;
    set FB0TM010.XDMCD bold;
    FB0TW00.FB0TWRDS = "Y"; /* dont request data to obtain*/
    exit stack; /* display map*/
  end
  ;
  ;
end // end FB0T170

// get warehouse descriptions
Function FB0T180()
   /* ------------------------------------------------------------*/
    /* scan the working storage areas to find the description for*/
    /* each warehouse.  if the description is not found in xwhtbl*/
    /* use 'unknwn' for the description.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWWIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWWIX < 4 /* until table end*/
   && FB0TW02.XWHCD[FB0TWWIX] != "  ") /* and valid entries*/
    ;
    if (FB0TW02.XWHCD[FB0TWWIX] in XWHTBL.XWHCD) /* match in table*/
      FB0TW02.XWHSABRV[FB0TWWIX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      FB0TW02.XWHSABRV[FB0TWWIX] = "UNKNWN"; /* unknwn to desc*/
      ;
    end
    ;
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
end // end FB0T180

// calculate stock qtb
Function FB0T190()
   /* ------------------------------------------------------------*/
   /* select unique dfbuy.vfqtbs01 record.*/
   /* ------------------------------------------------------------*/
  ;
  set FBKREC empty;
  ;
  FBKREC.SY1STNBR = FB0TM010.SY1STNBR; /* style nbr*/
  FBKREC.SY2CLRID = FB0TM010.SY2CLRID; /* colr id*/
  FBKREC.XDMCD = FB0TM010.XDMCD; /* dim code*/
  FBKREC.FB8BUYDT = FB0TW00.FB0TWBDT; /* buy date*/
  FBKREC.FB8RCTYP = "B";
  ;
  FB0T191();
  ;
   /* ------------------------------------------------------------*/
   /* select unique dfbuy.vfqtbs01 record.*/
   /* ------------------------------------------------------------*/
  ;
  set FBHREC empty;
  ;
  FBHREC.SY1STNBR = FB0TM010.SY1STNBR; /* style nbr*/
  FBHREC.SY2CLRID = FB0TM010.SY2CLRID; /* colr id*/
  FBHREC.XDMCD = FB0TM010.XDMCD; /* dim code*/
  FBHREC.XQACD = "01";
  FBHREC.PC2INSEG = "000";
  FBHREC.XPGCD = "00";
  FBHREC.XUMCD = "01";
   /* MOVE '1' TO FBHREC.XDSCD;*/
  FBHREC.FBHDSAFL = "*";
   /* MOVE '  ' TO FBHREC.XWHCD;*/
  FBHREC.FB7BUYST = "Y"; /* future orders*/
  FBHREC.FB8BUYDT = FB0TW00.FB0TWBDT; /* buy date*/
  ;
  FB0TW00.FB0TW-DIVERT-TOT = 0;
  FB0TW00.FB0TW-PREADVISE-TOT = 0;
                                   /* init fb0tw00.fb0tw-preadvise-tot*/
  FB0TW00.FB0TWNQT = 0; /* direct ship/nil qty size total*/
  FB0TW00.FB0TWECS = "N"; /* cursor switch*/
  ;
  FB0TS05(); /* open cursor for dfbuy.vdnord01*/
  ;
  FB0TS06(); /* fetch dfbuy.vdnord01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If fetch went ok*/
                                   /* Convert buy dt*/
    FB0TW00.FB0TW-TMP-DT = FBHREC.FB8BUYDT;
    FB0TW00.FB0TW-CHK-CC = FB0TW00.FB0TW-TMP-CC; /* set century*/
    FB0TW00.FB0TW-CHK-YY = FB0TW00.FB0TW-TMP-YY; /* set year*/
    FB0TW00.FB0TW-CHK-DM = FB0TW00.FB0TW-TMP-MM; /* set dlv mth*/
    FB0TW00.FB0TW-CHK-MM = FB0TW00.FB0TW-TMP-MM - 2;
    if (FB0TW00.FB0TW-CHK-MM < 0)
      FB0TW00.FB0TW-CHK-MM = 11; /* set mfg mth*/
   /* -------- y2k out begin --------*/
     /* FB0TW00.FB0TW-CHK-YY = FB0TW00.FB0TW-CHK-YY - 1;*/
   /* -------- y2k out end ----------*/
   /* -------- y2k in  begin --------*/
      FB0TW00.FB0TW-CHK-CY = FB0TW00.FB0TW-CHK-CY - 1;
   /* -------- y2k in end -----------*/
    else
      if (FB0TW00.FB0TW-CHK-MM == 0)
        FB0TW00.FB0TW-CHK-MM = 12; /* set mfg mth*/
   /* -------- y2k out begin --------*/
     /* FB0TW00.FB0TW-CHK-YY = FB0TW00.FB0TW-CHK-YY - 1;*/
   /* -------- y2k out end ----------*/
   /* -------- y2k in  begin --------*/
        FB0TW00.FB0TW-CHK-CY = FB0TW00.FB0TW-CHK-CY - 1;
   /* -------- y2k in end -----------*/
      end
    end
    FB0TW00.FB0TW-CHK-DTE = FB0TW00.FB0TW-CHK-DT;
  end
  ;
  while (FB0TW00.FB0TWECS == "N") /* while not end of cursor*/
    ;
    if (FBHREC.XDVCD != "02")
      ;
      set FBIREC empty; /* Init record*/
      FBIREC.SY1STNBR = FBHREC.SY1STNBR; /* style nbr*/
      FBIREC.SY2CLRID = FBHREC.SY2CLRID; /* colr id*/
      FBIREC.XDMCD = FBHREC.XDMCD; /* dim code*/
      FBIREC.PA1BUYMO = FB0TW00.FB0TW-ORD-ADJ-BUY-MO; /* ORD ADJ BUY MO CCYYMM*/
      FBIREC.XWHCD = FBHREC.XWHCD; /* WHSE*/
      FBIREC.FBI-COUNT = 0; /* COUNT*/
      FBIREC.FB8BUYDT = 0; /* Buy date*/
      FBIREC.FBI-PENDING-ORD-ADJ-FL = " "; /* OA Flag*/
      FBIREC.FBI-CURRENT-DATE = 0; /* Current date*/
      FBIREC.FBI-CURRENT-HHMMSS = 0; /* Current time*/
      FBIREC.OP1PARTN = FBHREC.OP1PARTN; /* Ord Partition Char*/
      FBIREC.OP1CUOID = FBHREC.OP1CUOID; /* Cust ord id*/
      FBIREC.OP1NORID = FBHREC.OP1NORID; /* Nike ord id*/
      FBIREC.PRDCUID = FBHREC.PC2CUXID; /* Prdcu id*/
      FBIREC.PKGTYPCD = FBHREC.XPGCD; /* Package type*/
      FBIREC.XQAQALCD = FBHREC.XQACD; /* Qual code*/
      FBIREC.XUMUOMCD = FBHREC.XUMCD; /* Uom code*/
      FBIREC.FBI-DLVRY-DT = FB0TW00.FB0TW-CHK-DTE;
      ;
      FB0T195(); /* Check for preadvises*/
      ;
      FB0TW00.FB0TWIX1 = 1; /* init work index*/
      while (FB0TW00.FB0TWIX1 <= 40) /* max size array*/
        FB0TW00.FB0TWNQT = FB0TW00.FB0TWNQT + FBHREC.FB7QTB[FB0TWIX1];
        if (((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ") || 
        (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
         && FBIREC.FBI-COUNT > 0)
          FB0TW00.FB0TW-PREADVISE-TOT = FB0TW00.FB0TW-PREADVISE-TOT +           FBHREC.FB7QTB[FB0TWIX1];
        end
        FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
      end
      if (((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ") || 
      (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
       && FBIREC.FBI-COUNT == 0)
        ;
        FB0T197(); /* Check for diverts*/
        ;
        FB0TW00.FB0TWIX1 = 1; /* init work index*/
        while (FB0TW00.FB0TWIX1 <= 40) /* max size array*/
          if (((FBHREC.XDSCD == "1" && FBHREC.XWHCD == " ") || 
          (FBHREC.XDSCD == "2" && FBHREC.XWHCD != " "))
           && FB0TW00.FB0TW-DIVERT-COUNT > 0)
            FB0TW00.FB0TW-DIVERT-TOT = FB0TW00.FB0TW-DIVERT-TOT +             FBHREC.FB7QTB[FB0TWIX1];
          end
          FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
        end
      end
    end
    ;
    FB0TS06(); /* fetch dfbuy.vdnord01 row*/
    ;
  end
  ;
  FB0TS07(); /* close dfbuy.vdnord01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* stock qtb = forecast qtb - all size qty buckets from*/
   /* direct ship/nil array.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TW-DIR-SHP-PREADV-TOT = 0; /* DIR SHIP - PREADVISE*/
  FB0TW00.FB0TW-DIR-SHP-PREADV-TOT = FB0TW00.FB0TWNQT - FB0TW00.FB0TW-PREADVISE-TOT   - FB0TW00.FB0TW-DIVERT-TOT;
  FB0TW01.FB0TMSTQ = FBKREC.FB8FTQTB - FB0TW00.FB0TW-DIR-SHP-PREADV-TOT;
  ;
  ;
end // end FB0T190

// Obtain unique VFSQTB01
Function FB0T191()
  ;
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0T191"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TW00.FB0TWRDS = "N";
  exit stack;
  ;
end // end FB0T191

// Check for preadvises
Function FB0T195()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SE", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0T195"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TM010.XXXMODID = "FB0T195";
  exit stack;
  ;
end // end FB0T195

// Check for DIVERTS driver
Function FB0T197()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* as well as DPRODC.VPOITM01 table,*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TW-OA-COUNT = 0; /* initialize for divert check*/
  FB0T1971(); /* determine oa count*/
  ;
  FB0TW00.FB0TW-PO-COUNT = 0; /* initialize for divert check*/
  FB0T1972(); /* determine po count*/
  ;
  if (FB0TW00.FB0TW-OA-COUNT > 0
   && FB0TW00.FB0TW-PO-COUNT > 0)
    FB0TW00.FB0TW-DIVERT-COUNT = 0;
  else
    if (FB0TW00.FB0TW-OA-COUNT > 0
     && FB0TW00.FB0TW-PO-COUNT == 0)
      FB0TW00.FB0TW-DIVERT-COUNT = 1;
    else
      if (FB0TW00.FB0TW-OA-COUNT == 0
       && FB0TW00.FB0TW-PO-COUNT > 0)
        FB0TW00.FB0TW-DIVERT-COUNT = 1;
      else
        if (FB0TW00.FB0TW-OA-COUNT == 0
         && FB0TW00.FB0TW-PO-COUNT == 0)
          FB0TW00.FB0TW-DIVERT-COUNT = 0;
        end
      end
    end
  end
  ;
end // end FB0T197

// determine OA count
Function FB0T1971()
   /* ------------------------------------------------------------*/
   /* Select count in join of DPRODA.VPAHDR01 and DPRODA.VPAWRK01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SD", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0TW00.FB0TW-OA-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0T1971"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TM010.XXXMODID = "FB0T1971";
  exit stack;
  ;
end // end FB0T1971

// determine PO count
Function FB0T1972()
   /* ------------------------------------------------------------*/
   /* Select count in DPRODC.VPOITM01*/
   /* for each style, color, dimension, and sales order*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  try
    call "FB1510" ("SP", SQLCA, FBIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0TW00.FB0TW-PO-COUNT = FBIREC.FBI-COUNT;
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0T1972"; /* Process name*/
  TA1REC.TA1LOC = "JOIN OF VPAHDR01 AND VPAWRK01";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TM010.XXXMODID = "FB0T1972";
  exit stack;
  ;
end // end FB0T1972

// format and display the map
Function FB0T200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB0TW00.FB0TWMCS == "Y") /* map needs to be formatted*/
    FB0T210(); /* format the map*/
  else
    ;
    if (FBXREC.XXXMSGNO != 86               /* batch submit cancel*/
     && converseVar.validationMsgNum != 3   /* invalid pf key*/
     && converseVar.validationMsgNum != 5   /* can't scroll*/
     && converseVar.validationMsgNum != 23  /* can't scroll left*/
     && converseVar.validationMsgNum != 24  /* can't scroll right*/
     && converseVar.validationMsgNum != 361 /* can't scroll*/
     && FBXREC.XXXMSGNO != 16               /* successful batch submit*/
     && FBXREC.XXXMSGNO != 111              /* cant pf and mod data*/
     && FBXREC.XXXMSGNO != 159              /* pcts dont = 100*/
     && FBXREC.XXXMSGNO != 175              
     && FBXREC.XXXMSGNO != 344              
     && FBXREC.XXXMSGNO != 351)            
      FB0TW00.FB0TWNFW = 0; /* no warehouses found*/
      FB0TS02(); /* protect enterable fields*/
    end
    ;
  end
  if (FB0TW02.FB0TWSRP == "NA") /* No vcurve01 rows--no std %*/
    set FB0TM010.FB4RGPCT[1] protect, invisible;
    set FB0TM010.FB4RGPCT[2] protect, invisible;
    set FB0TM010.FB4RGPCT[3] protect, invisible;
  end
  ;
   /* ------------------------------------------------------------*/
   /* set all fields dark,askip if size not valid size.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWMIX = 1; /* map index*/
  FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI; /* data index*/
  ;
  while (FB0TW00.FB0TWMIX <= 10
   && FB0TW00.FB0TWGIX <= FB0TW00.FB0TWLSI)
    ;
    if (FB0TW00.FB0TWZHD[FB0TWGIX] == "Y") /* valid size*/
      FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* increment*/
    end
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
  end
  ;
   /* protect remaining fields*/
  ;
  while (FB0TW00.FB0TWMIX <= 10)
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWMIX;
    set FB0TM010.SY4IDDSC[FB0TWIX1] skip, invisible; /* size desc*/
    set FB0TM010.FB0TMADJ[FB0TWIX1] skip, invisible; /* whse 1 adj*/
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 10;
    set FB0TM010.FB0TMADJ[FB0TWIX1] skip, invisible; /* whse 2 adj*/
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 10;
    set FB0TM010.FB0TMADJ[FB0TWIX1] skip, invisible; /* whse 3 adj*/
    ;
    FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1;
  end
  ;
  ;
  if (FBXREC.XXXMSGNO != 0)
                                   /* error or informational message*/
    ;
    if (FBXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBXREC.XXXMSGNO);
    end /* move to map*/
    set FB0TM010 alarm; /* indicate sound alarm*/
    ;
  end
  ;
  if (converseVar.eventKey is pf5)
    FB0TM010.VAGen_EZEMSG = FB0TW00.FB0TWF5M;
  end
  converse FB0TM010 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  ;
  FBXREC.XXXMSGNO = 0; /* message number*/
  ;
  COMMAREA.CATOAP = FB0TM010.CATOAP; /* to application*/
  COMMAREA.CAITEM = FB0TM010.CAITEM; /* application data*/
end // end FB0T200

// format map from display ws
Function FB0T210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/
  ;
  set FB0TM010 initial; /* map io area*/
  FB0TW00.FB0TWMCS = "N"; /* map format switch*/
  FB0TM010.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate field amounts for map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0T211(); /* calculate amounts*/
  ;
   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0TW00.FB0TWWIX = 1; /* initialise whse index*/
  ;
  while (FB0TW00.FB0TWWIX < 4) /* for each warehouse*/
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI; /* current size index*/
    FB0TM010.XWHCD[FB0TWWIX] = FB0TW02.XWHCD[FB0TWWIX]; /* warehouse*/
    FB0TM010.XWHSABRV[FB0TWWIX] = FB0TW02.XWHSABRV[FB0TWWIX]; /* desc*/
    FB0TM010.FB0TMPCT[FB0TWWIX] = FB0TW02.FB0TMPCT[FB0TWWIX]; /* b/l*/
    FB0TM010.FB4RGPCT[FB0TWWIX] = FB0TW02.FB4RGPCT[FB0TWWIX]; /* reg*/
    FB0TM010.FB0TMTBQ[FB0TWWIX] = FB0TW02.FB0TMTBQ[FB0TWWIX];
    FB0TM010.FB0TMTAD[FB0TWWIX] = FB0TW02.FB0TMTAD[FB0TWWIX];
    FB0TM010.FB0TMTAB[FB0TWWIX] = FB0TW02.FB0TMTAB[FB0TWWIX];
    FB0TW00.FB0TWGRP = FB0TW02.FB0TWGRP[FB0TWWIX]; /* to separate qty*/
    FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX]; /* to separate adj*/
    FB0TW00.FB0TWNGR = FB0TW02.FB0TWNGR[FB0TWWIX]; /* to separate net*/
    ;
    if (FB0TW00.FB0TWGRP == " ")
      FB0TW00.FB0TWGIX = 1; /* set map index to 1*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMBLQ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    ;
    if (FB0TW00.FB0TWAGR == " ")
      FB0TW00.FB0TWGIX = 1; /* set map index to 1*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMADJ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    ;
    if (FB0TW00.FB0TWNGR == " ")
      FB0TW00.FB0TWGIX = 1; /* set map index to 1*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMABQ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    ;
    if (FB0TW00.FB0TWWIX == 1)
      FB0TW00.FB0TWMIX = 1; /* set map index to 1*/
      FB0TW00.FB0TWMMI = 10; /* max map index*/
    else
      ;
      if (FB0TW00.FB0TWWIX == 2)
        FB0TW00.FB0TWMIX = 11; /* set map index to 11*/
        FB0TW00.FB0TWMMI = 20; /* max map index*/
      else
        ;
        if (FB0TW00.FB0TWWIX == 3)
          FB0TW00.FB0TWMIX = 21; /* set map index to 21*/
          FB0TW00.FB0TWMMI = 30; /* max map index*/
        end
        ;
      end
      ;
    end
    ;
    FB0TW00.FB0TWIX1 = 1;
    ;
    while (FB0TW00.FB0TWMIX <= FB0TW00.FB0TWMMI /* <= max map index*/
     && FB0TW00.FB0TWGIX <= FB0TW00.FB0TWLSI) /* last size*/
      ;
      if (FB0TW00.FB0TWZHD[FB0TWGIX] == "Y") /* if data exists*/
        ;
        FB0TM010.SY4IDDSC[FB0TWIX1] = PG3REC.SY4IDDSC[FB0TWGIX];
        FB0TM010.FB0TMBLQ[FB0TWMIX] = FB0TW00.FB0TMBLQ[FB0TWGIX];
        FB0TM010.FB0TMADJ[FB0TWMIX] = FB0TW00.FB0TMADJ[FB0TWGIX];
        FB0TM010.FB0TMABQ[FB0TWMIX] = FB0TW00.FB0TMABQ[FB0TWGIX];
        FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* set map index up 1*/
        FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* set gen index up 1*/
        ;
      end
      ;
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* set group index up 1*/
    end
    ;
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* set whse index up 1*/
  end
  ;
  ;
  if (FB0TW01.FB0TMSZS < 1)
    FB0TM010.FB0TMSZS = 10;
  else
    FB0TM010.FB0TMSZS = FB0TW01.FB0TMSZS; /* scroll amt*/
  end
  ;
  FB0TM010.SY1STNBR = FB0TW01.SY1STNBR; /* style*/
  FB0TM010.SY2CLRID = FB0TW01.SY2CLRID; /* color*/
  FB0TM010.XDMCD = FB0TW01.XDMCD; /* dimension*/
   /* -------- y2k out begin -------*/
   /* MOVE FB0TW01.PT3YYMM TO FB0TM010.PT3YYMM;*/
   /* -------- y2k out end ---------*/
   /* -------- y2k in  begin -------*/
  FB0TM010.PT3YYMM = FB0TW01.FB0TW-PT3-YM;
   /* -------- y2k in  end ---------*/
  FB0TM010.FB0TMBMO = FB0TW01.FB0TMBMO;
  FB0TM010.SY1SSTNM = PG2REC.SY1SSTNM;
  FB0TM010.SY2CLRAB = PG2REC.SY2CLRAB;
  FB0TM010.FB0TMSRP = FB0TW02.FB0TWSRP;
  FB0TM010.FB0TMSTQ = FB0TW01.FB0TMSTQ; /* stk qtb*/
  FB0TM010.FBKRDFL = FB0TW02.FBKRDFL[1]; /* round flag*/
  ;
  if (FB0TW01.FB0TMPCR == " ") /* if blank*/
    FB0TM010.FB0TMPCR = "N";
  else
    FB0TM010.FB0TMPCR = FB0TW01.FB0TMPCR;
  end
  ;
  if (FB0TW02.XWHCD[1] == " ")
    FB0TW00.FB0TWNFW = 0;
  else
    ;
    if (FB0TW02.XWHCD[2] == " ")
      FB0TW00.FB0TWNFW = 1;
    else
      ;
      if (FB0TW02.XWHCD[3] == " ")
        FB0TW00.FB0TWNFW = 2;
      else
        FB0TW00.FB0TWNFW = 3;
      end
      ;
    end
    ;
  end
  ;
  FB0TS02(); /* protect enterable fields*/
  if (FB0TW00.FB0TWNFW == 2)
    set FB0TM010.FB4RGPCT[3] skip, invisible;
  end
  ;
end // end FB0T210

// calculate amounts
Function FB0T211()
  ;
   /* ------------------------------------------------------------*/
   /* calculate total bottom line quantity, total adjustments,*/
   /* net total, and net total total by warehouse.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWWIX = 1; /* warehouse index*/
  ;
  while (FB0TW00.FB0TWWIX < 4) /* for each warehouse*/
    FB0TW02.FB0TMTBQ[FB0TWWIX] = 0; /* zero whse total quantity*/
    FB0TW02.FB0TMTAD[FB0TWWIX] = 0; /* zero whse total adjustments*/
    FB0TW00.FB0TWGRP = FB0TW02.FB0TWGRP[FB0TWWIX]; /* to separate*/
    FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX]; /* to separate*/
    FB0TW00.FB0TWNGR = FB0TW02.FB0TWNGR[FB0TWWIX]; /* to separate*/
    if (FB0TW00.FB0TWGRP == " ")
      FB0TW00.FB0TWGIX = 1; /* size index*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMBLQ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    ;
    if (FB0TW00.FB0TWAGR == " ")
      FB0TW00.FB0TWGIX = 1; /* size index*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMADJ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    if (FB0TW00.FB0TWNGR == " ")
      FB0TW00.FB0TWGIX = 1; /* size index*/
      while (FB0TW00.FB0TWGIX < 41)
        FB0TW00.FB0TMABQ[FB0TWGIX] = 0;
        FB0TWGIX = FB0TWGIX + 1;
      end
    end
    FB0TW00.FB0TWGIX = 1; /* size index*/
    while (FB0TW00.FB0TWGIX < 41) /* for each size*/
      FB0TW00.FB0TWWK = FB0TW00.FB0TMBLQ[FB0TWGIX]; /* work area*/
      FB0TW00.FB0TWWK3 = FB0TW02.FB0TMTBQ[FB0TWWIX]; /* work area*/
      FB0TW02.FB0TMTBQ[FB0TWWIX] = FB0TW00.FB0TWWK3 + FB0TW00.FB0TWWK;
      ;
      FB0TW00.FB0TWWK = FB0TW00.FB0TMADJ[FB0TWGIX]; /* work area*/
      FB0TW00.FB0TWWK3 = FB0TW02.FB0TMTAD[FB0TWWIX]; /* work area*/
      FB0TW02.FB0TMTAD[FB0TWWIX] = FB0TW00.FB0TWWK3 + FB0TW00.FB0TWWK;
      ;
      FB0TW00.FB0TWWK = FB0TW00.FB0TMBLQ[FB0TWGIX]; /* work area*/
      FB0TW00.FB0TWWK3 = FB0TW00.FB0TMADJ[FB0TWGIX]; /* work area*/
      FB0TW00.FB0TMABQ[FB0TWGIX] = FB0TW00.FB0TWWK3 + FB0TW00.FB0TWWK;
      ;
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* next size*/
    end
    ;
    FB0TW00.FB0TWWK = FB0TW02.FB0TMTBQ[FB0TWWIX]; /* work area*/
    FB0TW00.FB0TWWK3 = FB0TW02.FB0TMTAD[FB0TWWIX]; /* work area*/
    FB0TW02.FB0TMTAB[FB0TWWIX] = FB0TW00.FB0TWWK3 + FB0TW00.FB0TWWK;
    FB0TW02.FB0TWGRP[FB0TWWIX] = FB0TW00.FB0TWGRP; /* back to table*/
    FB0TW02.FB0TWAGR[FB0TWWIX] = FB0TW00.FB0TWAGR; /* back to table*/
    FB0TW02.FB0TWNGR[FB0TWWIX] = FB0TW00.FB0TWNGR; /* back to table*/
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate b/l percent*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWWIX = 1; /* warehouse index*/
  FB0TW00.FB0TWTTQ = 0; /* total total quantity*/
  ;
  while (FB0TW00.FB0TWWIX < 4 /* for each warehouse*/
   && FB0TW02.XWHCD[FB0TWWIX] != "  ")
                                   /* with an entry in the table*/
    FB0TW00.FB0TWTTQ = FB0TW00.FB0TWTTQ + FB0TW02.FB0TMTAB[FB0TWWIX];
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
  FB0TW00.FB0TWWIX = 1; /* warehouse index*/
  ;
  while (FB0TW00.FB0TWWIX < 4 /* for each warehouse*/
   && FB0TW02.XWHCD[FB0TWWIX] != "  ")
                                   /* with an entry in the table*/
    FB0TW00.FB0TWWK = FB0TW02.FB0TMTAB[FB0TWWIX];
    ;
    if (FB0TW00.FB0TWTTQ == 0)
      FB0TW02.FB0TMPCT[FB0TWWIX] = 0;
    else
      FB0TW02.FB0TMPCT[FB0TWWIX] = 100 * FB0TW00.FB0TWWK / FB0TW00.FB0TWTTQ;
    end
    ;
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
  ;
end // end FB0T211

// check attention identifier
Function FB0T300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0TM010.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FBWREC empty;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      XSFBS01(); /* Exit to another application*/
      FB0TM010.XXXMODID = "300"; /* Process name*/
      set FB0TM010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FB0TM010.XXXMODID = "300"; /* Process name*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pa2)
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FB0TM010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* buy menu*/
      COMMAREA.CATOAP = "FB0Q";
    end
    ;
    if (converseVar.eventKey is pf14) /* b/l avail inquiry*/
      COMMAREA.CATOAP = "FB0R";
    end
    ;
    if (converseVar.eventKey is pf16) /* adjust the buy*/
      COMMAREA.CATOAP = "FB0S";
    end
    ;
    if (converseVar.eventKey is pa2) /* PA2 was pressed*/
      COMMAREA.CATOAP = "FB0T";
    end
    ;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    XSFBS01(); /* transfer to another application*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf18)
    FB0T310();
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf5  /* fix sizes*/
   && converseVar.eventKey not pf6  /* next product*/
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11 /* scroll right*/
   && converseVar.eventKey not pf18 /* calculate the buy*/
   && converseVar.eventKey not pf19) /* delete*/
    ;
    converseLib.validationFailed(3); /* invalid key*/
    FB0TM010.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      ;
      converseLib.clearScreen();
       /* reset map*/
      ;
    end
    ;
    exit stack;
    ;
  end
  ;
  if (FB0TW00.FB0TWSSR == "N"
   && converseVar.eventKey not pf6
   && FB0TM010.SY1STNBR == FB0TW01.SY1STNBR
   && FB0TM010.SY2CLRID == FB0TW01.SY2CLRID
   && FB0TM010.XDMCD == FB0TW01.XDMCD
   && FB0TM010.FB0TMBMO == FB0TW01.FB0TMBMO)
    FB0TM010.XXXMODID = "300";
    converseLib.validationFailed(167);
    exit stack;
  end
end // end FB0T300

// COMPUTE CORP TOTAL PCT
Function FB0T310()
   /* ---------------------------------------------------*/
    /* COMPUTE CORP TOTAL PCT AS FOLLOWS*/
    /* 1.  SIZE PCT * REGION PCT / 100 + .05*/
   /* ---------------------------------------------------*/
  ;
  if ("Y" in FB0TW02.FBKRDFL)
     /* NEXT SENTENCE*/
  else
    return;
  end
  ;
  ;
  FB0TW00.FB0TWPC4 = 0;
  ;
  sysVar.arrayIndex = 1;
  ;
  while (sysVar.arrayIndex <= 40)
    ;
    if (FB0TM010.FB4RGPCT[1] > 0)
      if (FB0TW00.FB0TWPC1[sysVar.arrayIndex] > 0)
        FB0TWPCW = FB0TWPC1[sysVar.arrayIndex] * FB0TM010.FB4RGPCT[1] / 100;
        FB0TWPC4 = FB0TWPC4 + FB0TWPCW;
      end
    end
    ;
    if (FB0TM010.FB4RGPCT[2] > 0)
      if (FB0TW00.FB0TWPC2[sysVar.arrayIndex] > 0)
        FB0TWPCW = FB0TWPC2[sysVar.arrayIndex] * FB0TM010.FB4RGPCT[2] / 100;
        FB0TWPC4 = FB0TWPC4 + FB0TWPCW;
      end
    end
    ;
    if (FB0TM010.FB4RGPCT[3] > 0)
      if (FB0TW00.FB0TWPC3[sysVar.arrayIndex] > 0)
        FB0TWPCW = FB0TWPC3[sysVar.arrayIndex] * FB0TM010.FB4RGPCT[3] / 100;
        FB0TWPC4 = FB0TWPC4 + FB0TWPCW;
      end
    end
    ;
    ;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
  ;
  if (FB0TWPC4 > +105
   || FB0TWPC4 < +95)
    converseLib.validationFailed(361);
    exit stack;
  end
  ;
end // end FB0T310

// reset highlighted fields
Function FB0T400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0TM010.SY1STNBR initialAttributes; /* style number*/
  set FB0TM010.SY2CLRID initialAttributes; /* color code*/
  set FB0TM010.XDMCD initialAttributes; /* dimension code*/
  set FB0TM010.PT3YYMM initialAttributes; /* b/l date yymm*/
  set FB0TM010.FB0TMSZS initialAttributes; /* scroll amount*/
  set FB0TM010.FB0TMBMO initialAttributes; /* buy date yymm*/
  FB0TW00.FB0TWWIX = 1; /* initialise warehouse index*/
  ;
  while (FB0TW00.FB0TWWIX < 4) /* for each warehouse*/
    set FB0TM010.FB4RGPCT[FB0TWWIX] initialAttributes; /* std reqion percent*/
    set FB0TM010.FB0TMPCT[FB0TWWIX] initialAttributes; /* b/l region percent*/
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
  FB0TW00.FB0TWMIX = 1; /* initialise map index*/
  ;
  while (FB0TW00.FB0TWMIX < 31) /* for each size*/
    set FB0TM010.FB0TMADJ[FB0TWMIX] initialAttributes; /* adjustments*/
    FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* next size*/
  end
  ;
  ;
  FB0TW00.FB0TWMIX = 1; /* initialise map index*/
  ;
  while (FB0TW00.FB0TWMIX < 10) /* for each size*/
    set FB0TM010.SY4IDDSC[FB0TWMIX] initialAttributes; /* adjustments*/
    FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* next size*/
  end
  ;
  set FB0TM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0TM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FB0T400

// verify the entered data
Function FB0T500()
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  FB0TW00.FB0TWMCS = "N"; /* dont format map*/
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0TM010.CAITEM > " ") /* Application data was entered*/
    FB0TM010.XXXMODID = "500"; /* Module identification*/
    set FB0TM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/
  ;
      /* ;/* -------- y2k out begin ---------*/
   /* IF FB0TM010.SY1STNBR NE FB0TW01.SY1STNBR/* style number changed*/
    /* OR FB0TM010.SY2CLRID NE FB0TW01.SY2CLRID/* color changed*/
    /* OR FB0TM010.XDMCD NE FB0TW01.XDMCD/* dimension changed*/
    /* OR FB0TM010.FB0TMBMO NE FB0TW01.FB0TMBMO/* buy month changed*/
   /* OR FB0TM010.pT3YYMM NE FB0TW01.PT3YYMM;/* period date*/
    /* MOVE 'Y' TO FB0TW00.FB0TWKCS;  /* key data changed*/
      /* -------- y2k out END -----------*/
      /* -------- y2k in  begin ---------*/
  if (FB0TM010.SY1STNBR != FB0TW01.SY1STNBR /* style number changed*/
   || FB0TM010.SY2CLRID != FB0TW01.SY2CLRID /* color changed*/
   || FB0TM010.XDMCD != FB0TW01.XDMCD       /* dimension changed*/
   || FB0TM010.FB0TMBMO != FB0TW01.FB0TMBMO /* buy month changed*/
   || FB0TM010.PT3YYMM != FB0TW01.FB0TW-PT3-YM)
    FB0TW00.FB0TWKCS = "Y"; /* key data changed*/
        /* -------- y2k in end ------------*/
    if (FB0TM010.FB0TMBMO != 0) /* if buy month entered*/
      FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO; /* to separate*/
      /* -------- y2k out begin ---------*/
      /* XX0XS01;*/
      /* XX0XW01.XX0XWYY = XX0XW01.XX0XWYY - 1;*/
      /* IF FB0TW00.FB0TMBYY LT XX0XW01.XX0XWYY;/* year too old*/
      /* -------- y2k out END -----------*/
      /* -------- y2k in  begin ---------*/
      FB0TW00.FB0TW-CUR-DT = VGVar.currentGregorianDate;
      FB0TW00.FB0TW-CUR-CY = FB0TW00.FB0TW-CUR-CY - 1;
      FB0TW00.FB0TW-BUY-DT = FB0TM010.FB0TMBMO;
      if (FB0TW-BUY-YY > 65)
        FB0TW-BUY-CC = 19;
      else
        FB0TW-BUY-CC = 20;
      end
      if (FB0TW00.FB0TW-BUY-CY < FB0TW00.FB0TW-CUR-CY)
        /* -------- y2k in end ------------*/
        converseLib.validationFailed(151); /* date out of range*/
        FB0TM010.XXXMODID = 500; /* process number*/
        set FB0TM010.FB0TMBMO cursor, bold;
      end
      ;
      if (FB0TW00.FB0TMBMM < 1 /* month less than 1*/
       || FB0TW00.FB0TMBMM > 12) /* month greater than 12*/
        converseLib.validationFailed(151); /* date out of range*/
        FB0TM010.XXXMODID = 500; /* process number*/
        set FB0TM010.FB0TMBMO cursor, bold;
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* move defaults*/
    /* ------------------------------------------------------------*/
    ;
    FBXREC.XQACD[1] = "01"; /* quality code*/
    FBXREC.PC2INSEG[1] = "000"; /* spec code*/
    FBXREC.XPGCD[1] = "00"; /* package type code*/
    FBXREC.XUMCD[1] = "01"; /* unit of measure code*/
    if (FB0TM010.SY1STNBR != " ")
      FB0T170(); /* validate product*/
    end
    ;
  else
    FB0TW00.FB0TWKCS = "N"; /* key data not changed*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/
  ;
  FB0T510(); /* check if data changed*/
  ;
  if (converseVar.eventKey is enter)
    ;
    if (FB0TW00.FB0TWKCS == "Y" /* key changed*/
     && FB0TW00.FB0TWDCS == "Y") /* data changed*/
      FB0TM010.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(130); /* cannot change key and data*/
    end
    ;
    if (FB0TW00.FB0TWKCS == "N" /* key not changed*/
     && FB0TW00.FB0TWDCS == "N") /* data not changed*/
      ;
      if (FB0TM010.FB0TMSZS < 1 /* scroll value out*/
       || FB0TM010.FB0TMSZS > 40) /* of possible range*/
        FB0TM010.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(10); /* invalid data*/
        set FB0TM010.FB0TMSZS cursor, bold;
      else
        FB0TW00.FB0TWRDS = "Y";
        FB0TW00.FB0TWMCS = "Y";
      end
      ;
      exit stack; /* display map*/
    end
    ;
  else
    ;
    if (FB0TW00.FB0TWKCS == "N" /* key not changed*/
     && FB0TW00.FB0TWDCS == "N") /* data not changed*/
      ;
      if (converseVar.eventKey is pf6) /* next product*/
        if (FBXREC.SY1STNBR[2] == " ") /* table empty*/
          FB0TW00.FB0TWRDS = "N"; /* dont request data*/
          converseLib.validationFailed(356); /* no next product*/
          FB0TM010.XXXMODID = "500"; /* process number*/
        end
      else
        ;
        FB0T520();
        ;
        if (converseVar.eventKey is pf10 /* scroll to the left*/
         || converseVar.eventKey is pf11) /* scroll to the right*/
          FB0T530(); /* edit scroll amount*/
        end
      end
      ;
      /* -----------------------------------------------------------*/
        /* this next if in case the data was in error.  The map has*/
        /* already been reset, so the bad fields need to get*/
        /* highlighted again*/
      /* -----------------------------------------------------------*/
      ;
      if (converseVar.eventKey is enter) /* nothing new*/
        FB0TW00.FB0TWRDS = "Y"; /* request data*/
        FB0TW00.FB0TWMCS = "Y"; /* format map*/
        exit stack; /* display map*/
      end
      ;
      if (converseVar.validationMsgNum == 7) /* no more pages*/
        FB0TW00.FB0TWRDS = "Y"; /* request data*/
        exit stack; /* display map*/
      end
      ;
    end
    ;
  end
  ;
  if (FB0TW00.FB0TWDCS == "Y" /* data changed*/
   && FB0TW00.FB0TWKCS == "N") /* key not changed*/
    ;
    if (converseVar.eventKey is pf18) /* calculate the buy*/
      FB0TM010.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(111); /* cannot change data and pf*/
    end
    ;
    if (converseVar.eventKey is pf10 /* scroll to the left*/
     || converseVar.eventKey is pf11) /* scroll to the right*/
      FB0TM010.XXXMODID = "500";
      converseLib.validationFailed(5);
    end
    ;
     /* PERFORM FB0T540               ;        edit data*/
  end
  ;
  if (converseVar.eventKey is pf5 /* Fix sizes*/
   && FB0TW00.FB0TWISC == 0)      /* No invalid sizes*/
    converseLib.validationFailed(66); /* no data to update*/
    FB0TM010.XXXMODID = "500";
    exit stack;
  end
  FB0TW00.FB0TWWK2 = FB0TM010.FB4RGPCT[1];
  FB0TW00.FB0TWWK2 = FB0TW00.FB0TWWK2 + FB0TM010.FB4RGPCT[2];
  FB0TW00.FB0TWWK2 = FB0TW00.FB0TWWK2 + FB0TM010.FB4RGPCT[3];
  ;
  FB0TW00.FB0TWTFP = FB0TW00.FB0TWWK2; /* Total percent*/
  ;
  if (FB0TW00.FB0TWWK2 != 0)
    ;
    if (FB0TW00.FB0TWWK2 < 99.8
     || FB0TW00.FB0TWWK2 > 100.2)
      set FB0TM010.FB4RGPCT[1] cursor, bold;
      set FB0TM010.FB4RGPCT[2] bold;
      set FB0TM010.FB4RGPCT[3] bold;
      FB0TM010.XXXMODID = "500";
      converseLib.validationFailed(159);
    end
    ;
  end
  if (FB0TM010.FB4RGPCT[1] < 0)
    set FB0TM010.FB4RGPCT[1] cursor, bold;
    FB0TM010.XXXMODID = "500";
    converseLib.validationFailed(344);
  end
  if (FB0TM010.FB4RGPCT[2] < 0)
    set FB0TM010.FB4RGPCT[2] cursor, bold;
    FB0TM010.XXXMODID = "500";
    converseLib.validationFailed(344);
  end
  if (FB0TM010.FB4RGPCT[3] < 0)
    set FB0TM010.FB4RGPCT[3] cursor, bold;
    FB0TM010.XXXMODID = "500";
    converseLib.validationFailed(344);
  end
  ;
  if (FB0TM010.FB0TMBMO == 0)
    converseLib.validationFailed(8);
    FB0TM010.XXXMODID = "500";
    set FB0TM010.FB0TMBMO cursor, bold;
  end
  ;
  if (FB0TM010.XDMCD == " ")
    converseLib.validationFailed(8);
    FB0TM010.XXXMODID = "500";
    set FB0TM010.XDMCD cursor, bold;
  end
  ;
  if (FB0TM010.SY2CLRID == " ")
    converseLib.validationFailed(8);
    FB0TM010.XXXMODID = "500";
    set FB0TM010.SY2CLRID cursor, bold;
  end
  ;
  if (FB0TM010.SY1STNBR == " ")
    converseLib.validationFailed(8);
    FB0TM010.XXXMODID = "500";
    set FB0TM010.SY1STNBR cursor, bold;
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  if (converseVar.eventKey is pf18) /* calculate the buy*/
    if (FB0TW00.FB0TWISF == "Y") /* Invalid sizes*/
      FB0TM010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(355);
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if vfblav01 round flag is a 'y' then a standard curve*/
   /* must exist for the warehouses or the calc submit is*/
   /* not allowed. If a standard curve doesn't exist and the*/
   /* frozen bottom line percents are all zero--display a*/
   /* different message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18) /* Calc submit*/
    FB0TWIX1 = 1;
    while (FB0TWIX1 <= 4)
      if (FB0TW02.XWHCD != " ")
        if (FB0TW02.FBKRDFL[FB0TWIX1] == "Y")
          if (FB0TW02.FB0TWSRP == "NA") /* no standard percent*/
            converseLib.validationFailed(175); /* No standard percent exists*/
            FBXREC.XXXMSGNO = 175;
            exit stack;
          else
            if (FB0TW00.FB0TWTFP == 0) /* No frozen percent*/
              converseLib.validationFailed(351);
              exit stack;
            end
          end
        end
      end
      FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
    end
  end
  ;
  ;
  ;
  ;
  ;
  ;
end // end FB0T500

// check if data changed
Function FB0T510()
  FB0TW00.FB0TWDCS = "N"; /* data didnt change*/
  ;
  FB0TW00.FB0TWWIX = 1; /* whse index*/
  while (FB0TW00.FB0TWWIX <= 3) /* for each whse*/
    ;
    FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX]; /* to separate*/
    ;
    if (FB0TW00.FB0TWWIX == 1) /* first whse*/
      FB0TW00.FB0TWMIX = 1;
    else
      if (FB0TW00.FB0TWWIX == 2) /* second whse*/
        FB0TW00.FB0TWMIX = 11;
      else
        FB0TW00.FB0TWMIX = 21;
      end
    end
    ;
    FB0TW00.FB0TWIX1 = 1; /* gen index*/
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI; /* data index*/
    ;
    while (FB0TW00.FB0TWIX1 <= 10
     && FB0TW00.FB0TWGIX <= FB0TW00.FB0TWLSI)
      ;
      if (FB0TW00.FB0TWZHD[FB0TWGIX] == "Y") /* valid size*/
        ;
        if (FB0TW00.FB0TMADJ[FB0TWGIX] != FB0TM010.FB0TMADJ[FB0TWMIX])
          ;
          FB0TW00.FB0TWDCS = "Y"; /* data changed*/
          FB0TW00.FB0TWGIX = 41; /* get out of loop*/
          FB0TW00.FB0TWIX1 = 11; /* get out of loop*/
          FB0TW00.FB0TWWIX = 4; /* get out of this loop too*/
          ;
        else
          FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* gen index*/
          FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* map index*/
        end
      end
      ;
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* data index*/
      ;
    end
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* whse index*/
  end
  ;
  ;
  ;
  ;
  if (FB0TW00.FB0TWDCS == "N"
   && FB0TW00.FB0TWISF == "N")
    ;
    if (FB0TM010.FB4RGPCT[1] != FB0TW02.FB4RGPCT[1]
     || FB0TM010.FB4RGPCT[2] != FB0TW02.FB4RGPCT[2]
     || FB0TM010.FB4RGPCT[3] != FB0TW02.FB4RGPCT[3])
      FB0TW00.FB0TWDCS = "Y";
    end
    ;
  end
  ;
  ;
end // end FB0T510

// edit ship, forecast summary fl
Function FB0T520()
   /* ------------------------------------------------------------*/
   /* build key for fbhrec*/
   /* ------------------------------------------------------------*/
  ;
  FBHREC.SY1STNBR = FB0TM010.SY1STNBR;
  FBHREC.SY2CLRID = FB0TM010.SY2CLRID;
  FBHREC.XDMCD = FB0TM010.XDMCD;
  FBHREC.FB8BUYDT = FBXREC.FB8BUYDT;
  FBHREC.FBHDSAFL = "N";
  FBHREC.XQACD = FBLREC.XQACD;
  FBHREC.PC2INSEG = FBLREC.PC2INSEG;
  FBHREC.XPGCD = FBLREC.XPGCD;
  FBHREC.XUMCD = FBLREC.XUMCD;
  FBHREC.XWHCD = "*";
  ;
   /* ------------------------------------------------------------*/
   /* Select exist from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("SE", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select exist*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row exists*/
      FB0TM010.XXXMODID = "520"; /* process number*/
      converseLib.validationFailed(224); /* calc cannot be submitted*/
      exit stack; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0T521(); /* edit forecast qtb summary flag*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT EXIST        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBHREC.FBHGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T520

// edit forecast summary flag
Function FB0T521()
   /* ------------------------------------------------------------*/
   /* build key for fbkrec*/
   /* ------------------------------------------------------------*/
  ;
  FBKREC.SY1STNBR = FB0TM010.SY1STNBR;
  FBKREC.SY2CLRID = FB0TM010.SY2CLRID;
  FBKREC.XDMCD = FB0TM010.XDMCD;
  FBKREC.FB8BUYDT = FBXREC.FB8BUYDT;
  FBKREC.FB8RCTYP = "B";
  ;
   /* ------------------------------------------------------------*/
   /* Select unique from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FBKREC.FBKFSAFL == "Y")
        return;
      end
      ;
      if (FBKREC.FBKFSAFL == "N") /* not all accepts done*/
        FB0TM010.XXXMODID = "521"; /* process number*/
        converseLib.validationFailed(225); /* product not accepted*/
        exit stack; /* Return to previous process*/
      end
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0TM010.XXXMODID = "521"; /* process number*/
      converseLib.validationFailed(226); /* product not on file*/
      exit stack; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "521"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T521

// edit scroll amount
Function FB0T530()
  if (FB0TM010.FB0TMSZS == 0) /* no scroll amount entered*/
    FB0TM010.FB0TMSZS = 10; /* move default (full screen)*/
  end
  ;
  if (FB0TM010.FB0TMSZS < 1
   || FB0TM010.FB0TMSZS > 40)
    FB0TM010.XXXMODID = "530";
    converseLib.validationFailed(10); /* no more sizes to display*/
    set FB0TM010.FB0TMSZS cursor, bold;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if scroll left was requested, verify sizes exists*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10)
    ;
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI - 1; /* init index next position*/
    FB0TW00.FB0TWIX1 = 1; /* gen index*/
    ;
     /* find next valid size down*/
    ;
    while (FB0TW00.FB0TWGIX >= FB0TW00.FB0TWFSI
     && FB0TW00.FB0TWZHD[FB0TWGIX] != "Y")
      ;
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX - 1;
      ;
    end
    ;
    FB0TW00.FB0TWWF1 = FB0TW00.FB0TWCSI - FB0TM010.FB0TMSZS;
    ;
    if (FB0TW00.FB0TWWF1 < FB0TW00.FB0TWFSI
     && FB0TW00.FB0TWGIX < FB0TW00.FB0TWFSI)
      FB0TM010.XXXMODID = "530";
      converseLib.validationFailed(23); /* no more columns to left*/
      set FB0TM010.FB0TMSZS cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if scroll right was requested, verify sizes exists*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11)
    ;
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI; /* set index*/
    FB0TW00.FB0TWIX1 = 1; /* gen index*/
    ;
    while (FB0TW00.FB0TWIX1 <= FB0TM010.FB0TMSZS
     && FB0TW00.FB0TWGIX <= FB0TW00.FB0TWLSI)
      ;
      if (FB0TW00.FB0TWZHD[FB0TWGIX] == "Y") /* if valid size*/
        FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
        FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
      else
        FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
      end
    end
    ;
    if (FB0TW00.FB0TWIX1 < FB0TM010.FB0TMSZS
     || FB0TW00.FB0TWGIX > FB0TW00.FB0TWLSI)
      FB0TM010.XXXMODID = "530";
      converseLib.validationFailed(24); /* no more columns to right*/
      set FB0TM010.FB0TMSZS cursor, bold;
    end
  end
  ;
  ;
   /* IF EZEAID IS PF10;*/
    /* FB0TW00.FB0TWWF1 = FB0TW00.FB0TWCSI - FB0TM010.FB0TMSZS;*/
    /* FB0TW00.FB0TWWF2 = FB0TW00.FB0TWCSI - 1;*/
    /* ;*/
    /* IF FB0TW00.FB0TWWF1 LT FB0TW00.FB0TWFSI;*/
      /* AND FB0TW00.FB0TWWF2 LE FB0TW00.FB0TWFSI;*/
      /* MOVE '530' TO FB0TM010.XXXMODID;*/
      /* MOVE 23 TO EZEMNO           ; no more columns to left*/
      /* SET FB0TM010.FB0TMSZS CURSOR,BRIGHT;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
   /* IF EZEAID IS PF11;*/
    /* FB0TW00.FB0TWWF1 = FB0TW00.FB0TWCSI + FB0TM010.FB0TMSZS;*/
    /* IF FB0TW00.FB0TWWF1 GT FB0TW00.FB0TWLSI;*/
      /* MOVE '530' TO FB0TM010.XXXMODID;*/
      /* MOVE 24 TO EZEMNO           ; no more columns to right*/
      /* SET FB0TM010.FB0TMSZS CURSOR,BRIGHT;*/
    /* END ;*/
   /* END ;*/
  ;
end // end FB0T530

// process valid input request
Function FB0T600()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* next sentence*/
  else
    ;
    FB0TM010.XXXMODID = "500"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW01.FB0TMSZS = FB0TM010.FB0TMSZS;
  FB0TW01.FB0TMPCR = FB0TM010.FB0TMPCR;
  ;
  if (FB0TM010.FB4RGPCT[1] != FB0TW02.FB4RGPCT[1]
   || FB0TM010.FB4RGPCT[2] != FB0TW02.FB4RGPCT[2]
   || FB0TM010.FB4RGPCT[3] != FB0TW02.FB4RGPCT[3])
    ;
    FB0TW02.FB4RGPCT[1] = FB0TM010.FB4RGPCT[1];
    FB0TW02.FB4RGPCT[2] = FB0TM010.FB4RGPCT[2];
    FB0TW02.FB4RGPCT[3] = FB0TM010.FB4RGPCT[3];
    FB0TW00.FB0TWRCS = "Y";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0TW00.FB0TWKCS == "Y") /* key changed*/
    FB0TW00.FB0TWRDS = "Y"; /* set data request switch to yes*/
    FB0TW00.FB0TWMCS = "Y"; /* clear map*/
    FB0TW00.FB0TWRCS = "N"; /* pretend region pct didnt chg*/
    /* ------------------------------------------------------------*/
     /* set defaults*/
    /* ------------------------------------------------------------*/
    ;
    FB0TM010.FB0TMSZS = 10;
    FBXREC.SY1STNBR[1] = FB0TM010.SY1STNBR;
    FBXREC.SY2CLRID[1] = FB0TM010.SY2CLRID;
    FBXREC.XDMCD[1] = FB0TM010.XDMCD;
    FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO;
   /* --------- y2k out begin ------*/
   /* MOVE 19 TO FB0TW00.FB0TWBCC;*/
   /* --------- y2k out end -------*/
   /* --------- y2k in  begin ------*/
    if (FB0TW00.FB0TMBYY > 65)
      FB0TW00.FB0TWBCC = 19;
    else
      FB0TW00.FB0TWBCC = 20;
    end
   /* --------- y2k in end ---------*/
    FB0TW00.FB0TWBDD = 01;
    FBXREC.FB8BUYDT = FB0TW00.FB0TWBDT;
    FBXREC.XGPCD[1] = "02";
    FBXREC.XQACD[1] = "01";
    FBXREC.PC2INSEG[1] = "000";
    FBXREC.XPGCD[1] = "00";
    FBXREC.XUMCD[1] = "01";
    return; /* return to performing process*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if scrolling calculate the proper start column, and return*/
   /* to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TMSZS = FB0TM010.FB0TMSZS;
  ;
  if (converseVar.eventKey is pf10) /* scroll left*/
    FB0TW00.FB0TWIX1 = 1; /* init index*/
    ;
    while (FB0TW00.FB0TWIX1 <= FB0TW00.FB0TMSZS
     && FB0TW00.FB0TWCSI >= FB0TW00.FB0TWFSI)
      ;
      FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI - 1;
      ;
      if (FB0TW00.FB0TWZHD[FB0TWCSI] == "Y")
        FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
      end
    end
    FBXREC.XXXMSGNO = 15; /* good scroll*/
    FB0TW00.FB0TWMCS = "Y"; /* format map*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf11) /* scroll right*/
    FB0TW00.FB0TWIX1 = 1; /* init index*/
    ;
    while (FB0TW00.FB0TWIX1 <= FB0TW00.FB0TMSZS
     && FB0TW00.FB0TWCSI <= FB0TW00.FB0TWLSI)
      ;
      FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI + 1;
      ;
      if (FB0TW00.FB0TWZHD[FB0TWCSI] == "Y")
        FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
      end
    end
    FBXREC.XXXMSGNO = 14; /* good scroll*/
    FB0TW00.FB0TWMCS = "Y"; /* format map*/
    return;
  end
  ;
  ;
  ;
  ;
  ;
  ;
   /* MOVE FB0TM010.FB0TMSZS TO FB0TW00.FB0TMSZS;*/
  ;
   /* IF EZEAID IS PF10               ; scroll left*/
    /* ;*/
    /* FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI - FB0TW00.FB0TMSZS;*/
    /* ;*/
    /* WHILE FB0TW00.FB0TWZHD(FB0TWCSI) NE 'Y';*/
      /* AND FB0TW00.FB0TWCSI GE FB0TW00.FB0TWFSI;*/
      /* FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI - 1;*/
    /* END ;*/
    /* ;*/
    /* MOVE 15 TO FBXREC.XXXMSGNO    ; good scroll*/
    /* MOVE 'Y' TO FB0TW00.FB0TWMCS  ; format map*/
    /* EZERTN;*/
    /* ;*/
   /* END ;*/
   /* ;*/
   /* IF EZEAID IS PF11               ; scroll right*/
    /* ;*/
    /* FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI + FB0TW00.FB0TMSZS;*/
    /* ;*/
   /* WHILE FB0TW00.FB0TWZHD(FB0TWCSI) NE 'Y';*/
      /* AND FB0TW00.FB0TWCSI LE FB0TW00.FB0TWLSI;*/
      /* FB0TW00.FB0TWCSI = FB0TW00.FB0TWCSI + 1;*/
    /* END ;*/
    /* ;*/
   /* MOVE 14 TO FBXREC.XXXMSGNO    ; good scroll*/
   /* MOVE 'Y' TO FB0TW00.FB0TWMCS  ; format map*/
   /* EZERTN;*/
   /* ;*/
   /* END ;*/
  ;
   /* ------------------------------------------------------------*/
   /* the two valid pf keys which do not update the data base are*/
   /* pf6 - next product, and pf18 - calculate the buy*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf6) /* next product*/
    FB0T610(); /* bump array in fbxrec*/
    FB0TW00.FB0TWRDS = "Y"; /* set data request switch to yes*/
    FB0TW00.FB0TWMCS = "Y"; /* clear map*/
    return; /* return to performing process*/
  end
  ;
  if (converseVar.eventKey is pf18) /* calculate the buy*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0T620(); /* format production jcl*/
    else
      FB0T625(); /* format development jcl*/
    end
    return; /* return to performing process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* this is now the update pass.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  XX0XS01(); /* get system date and time*/
   /* ------------------------------------------------------------*/
   /* build the key for the frozen b/l table*/
   /* ------------------------------------------------------------*/
  ;
  set FBLREC empty; /* initialise record*/
  FBLREC.SY1STNBR = FB0TM010.SY1STNBR; /* style number*/
  FBLREC.SY2CLRID = FB0TM010.SY2CLRID; /* color code*/
  FBLREC.XDMCD = FB0TM010.XDMCD; /* dimension code*/
  FB0TW00.FB0TMBMO = FB0TW01.FB0TMBMO; /* move yymm to workarea*/
  FBLREC.FB8BUYDT = FB0TW00.FB0TWBDT; /* move to ccyymm01*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* quality code not spaces*/
    FBLREC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    FBLREC.XQACD = "01"; /* move default*/
  end
  ;
  if (FBXREC.PC2INSEG[1] != "   ") /* spec code not spaces*/
    FBLREC.PC2INSEG = FBXREC.PC2INSEG[1]; /* move to key*/
  else
    FBLREC.PC2INSEG = "000"; /* move default*/
  end
  ;
  if (FBXREC.XPGCD[1] != "  ")
                                   /* package type code not spaces*/
    FBLREC.XPGCD = FBXREC.XPGCD[1]; /* move to key*/
  else
    FBLREC.XPGCD = "00"; /* move default*/
  end
  ;
  if (FBXREC.XUMCD[1] != "  ") /* unit of measure not spaces*/
    FBLREC.XUMCD = FBXREC.XUMCD[1]; /* move to key*/
  else
    FBLREC.XUMCD = "01"; /* move default*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if PF5 zero the invalid size quantities on the frozen*/
   /* bottom line table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf5) /* Set invalid sizes to zero*/
    FB0T650();
    FB0TW00.FB0TWRDS = "Y"; /* request data to display*/
    FB0TW00.FB0TWMCS = "Y"; /* format map*/
    FB0TW00.FB0TWISC = 0; /* invalid size count*/
    return;
  end
  ;
  FB0TW00.FB0TWWIX = 1; /* initialise warehouse index*/
  ;
  while (FB0TW00.FB0TWWIX < 4 /* for each warehouse*/
   && FB0TW02.XWHCD[FB0TWWIX] > "  ") /* or until table empty*/
    FBLREC.XWHCD = FB0TW02.XWHCD[FB0TWWIX]; /* warehouse for key*/
    FB0T630(); /* update b/l table*/
    ;
    FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* no errors*/
    FB0T640(); /* update qty adj flag*/
  end
  ;
  FBXREC.XXXMSGNO = 32; /* an info message, not an error*/
  FB0TW00.FB0TWRDS = "Y"; /* request data to display*/
  FB0TW00.FB0TWMCS = "Y"; /* format map*/
  FB0TW00.FB0TWRCS = "N";
end // end FB0T600

// bump fbxrec array up 1 rank
Function FB0T610()
   /* ------------------------------------------------------------*/
   /* search through the array in fbxrec.  move element (n+1) to*/
   /* element n.  space out the last element to indicate end of*/
   /* array*/
   /* ------------------------------------------------------------*/
  FB0TW00.FB0TWLIX = 1; /* initialise low index*/
  FB0TW00.FB0TWHIX = 2; /* initialise high index*/
  ;
  while (FB0TW00.FB0TWHIX < 15 /* for each table entry*/
   && FBXREC.SY1STNBR[FB0TWHIX] != " ") /* with data in it*/
    FBXREC.XGPCD[FB0TWLIX] = FBXREC.XGPCD[FB0TWHIX]; /* up 1 rank*/
    FBXREC.SY1STNBR[FB0TWLIX] = FBXREC.SY1STNBR[FB0TWHIX];
    FBXREC.SY2CLRID[FB0TWLIX] = FBXREC.SY2CLRID[FB0TWHIX];
    FBXREC.XDMCD[FB0TWLIX] = FBXREC.XDMCD[FB0TWHIX];
    FBXREC.XQACD[FB0TWLIX] = FBXREC.XQACD[FB0TWHIX];
    FBXREC.PC2INSEG[FB0TWLIX] = FBXREC.PC2INSEG[FB0TWHIX];
    FBXREC.XPGCD[FB0TWLIX] = FBXREC.XPGCD[FB0TWHIX];
    FBXREC.XUMCD[FB0TWLIX] = FBXREC.XUMCD[FB0TWHIX];
    FBXREC.FBXFCTY1[FB0TWLIX] = FBXREC.FBXFCTY1[FB0TWHIX];
    FBXREC.FBXFCTY2[FB0TWLIX] = FBXREC.FBXFCTY2[FB0TWHIX];
    FBXREC.FBXFCTY3[FB0TWLIX] = FBXREC.FBXFCTY3[FB0TWHIX];
    FBXREC.FBXFCTY4[FB0TWLIX] = FBXREC.FBXFCTY4[FB0TWHIX];
    FBXREC.FBXFCTY5[FB0TWLIX] = FBXREC.FBXFCTY5[FB0TWHIX];
    FBXREC.FBXRPCT1[FB0TWLIX] = FBXREC.FBXRPCT1[FB0TWHIX];
    FBXREC.FBXRPCT2[FB0TWLIX] = FBXREC.FBXRPCT2[FB0TWHIX];
    FBXREC.FBXRPCT3[FB0TWLIX] = FBXREC.FBXRPCT3[FB0TWHIX];
    FBXREC.XWHCD1[FB0TWLIX] = FBXREC.XWHCD1[FB0TWHIX];
    FBXREC.XWHCD2[FB0TWLIX] = FBXREC.XWHCD2[FB0TWHIX];
    FBXREC.XWHCD3[FB0TWLIX] = FBXREC.XWHCD3[FB0TWHIX];
    ;
    FB0TW00.FB0TWHIX = FB0TW00.FB0TWHIX + 1; /* increment index*/
    FB0TW00.FB0TWLIX = FB0TW00.FB0TWLIX + 1; /* increment index*/
  end
  ;
  FBXREC.XGPCD[FB0TWLIX] = "  "; /* empty this element*/
  FBXREC.SY1STNBR[FB0TWLIX] = "      ";
  FBXREC.SY2CLRID[FB0TWLIX] = "   ";
  FBXREC.XDMCD[FB0TWLIX] = "  ";
  FBXREC.XQACD[FB0TWLIX] = "  ";
  FBXREC.PC2INSEG[FB0TWLIX] = "   ";
  FBXREC.XPGCD[FB0TWLIX] = "  ";
  FBXREC.XUMCD[FB0TWLIX] = "  ";
  FBXREC.FBXFCTY1[FB0TWLIX] = "    ";
  FBXREC.FBXFCTY2[FB0TWLIX] = "    ";
  FBXREC.FBXFCTY3[FB0TWLIX] = "    ";
  FBXREC.FBXFCTY4[FB0TWLIX] = "    ";
  FBXREC.FBXFCTY5[FB0TWLIX] = "    ";
  FBXREC.FBXRPCT1[FB0TWLIX] = 0;
  FBXREC.FBXRPCT2[FB0TWLIX] = 0;
  FBXREC.FBXRPCT3[FB0TWLIX] = 0;
  FBXREC.XWHCD1[FB0TWLIX] = "  ";
  FBXREC.XWHCD2[FB0TWLIX] = "  ";
  FBXREC.XWHCD3[FB0TWLIX] = "  ";
  FB0TM010.SY1STNBR = FBXREC.SY1STNBR[1];
  FB0TM010.SY2CLRID = FBXREC.SY2CLRID[1];
  FB0TM010.XDMCD = FBXREC.XDMCD[1];
  ;
  FB0TW00.FB0TWRCS = "N";
end // end FB0T610

// format production JCL
Function FB0T620()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0TW00.FB0TWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0TW00.FB0TWTIX > 0) /* Until end of table*/
    ;
    if (FB0TT01.TARTYPE[FB0TWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format region parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FB0TT01.TARTYPE[FB0TWTIX]; /* Type*/
      ;
      FB0T621(); /* formats JCL*/
      ;
    else
      ;
      if (FB0TT01.TARTYPE[FB0TWTIX] == "C") /* condition stmt*/
        ;
        FB0TW03.FB0TWCND = FB0TT01.TARJCL[FB0TWTIX];
        if (FB0TM010.FB0TMPCR == "Y") /* if print calc rpt*/
          FB0TW03.FB0TWCON = "(0,NE)         ";
        else
          FB0TW03.FB0TWCON = "((0,EQ),(0,NE))";
        end
        TA6REC.TARJCL[TA6INDEX] = FB0TW03.FB0TWCND; /* jcl*/
        TA6REC.TARTYPE[TA6INDEX] = " "; /* type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parm index*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0TT01.TARJCL[FB0TWTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0TT01.TARTYPE[FB0TWTIX]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0TT01.TARJCL[FB0TWTIX] == "/*EOF") /* End of table*/
      ;
      FB0TW00.FB0TWTIX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0TW00.FB0TWTIX = FB0TW00.FB0TWTIX + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  FB0T622(); /* Submit the JCL*/
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0T620

// format jcl parms
Function FB0T621()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW03.FB0TWCMT = "//*"; /* indicate a comment jcl card*/
  FB0TW03.XGPCD = "02";
  FB0TW03.SY1STNBR = FBHREC.SY1STNBR;
  FB0TW03.SY2CLRID = FBHREC.SY2CLRID;
  FB0TW03.XDMCD = FBHREC.XDMCD;
  FB0TW03.XQACD = "01";
  FB0TW03.PC2INSEG = "000";
  FB0TW03.XPGCD = "00";
  FB0TW03.XUMCD = "01";
  FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO;
   /* ------- y2k out begin -------*/
  FB0TW00.FB0TWBCC = 19;
   /* ------- y2k out end ---------*/
   /* ------- y2k in  begin -------*/
  if (FB0TW00.FB0TMBYY > 65)
    FB0TW00.FB0TWBCC = 19;
  else
    FB0TW00.FB0TWBCC = 20;
  end
   /* ------- y2k in end ----------*/
  FB0TW00.FB0TWBDD = 01;
  FB0TW03.FB8BUYDT = FB0TW00.FB0TWBDT;
  FB0TW03.XWHCD1 = FB0TW02.XWHCD[1];
  FB0TW03.XWHCD2 = FB0TW02.XWHCD[2];
  FB0TW03.XWHCD3 = FB0TW02.XWHCD[3];
  FB0TW03.FB0TWPCA = FB0TW02.FB4RGPCT[1];
  FB0TW03.FB0TWPCB = FB0TW02.FB4RGPCT[2];
  FB0TW03.FB0TWPCC = FB0TW02.FB4RGPCT[3];
  FB0TW03.FBKRDFL = FB0TW02.FBKRDFL[1];
  TA6REC.TARJCL[TA6INDEX] = FB0TW03.FB0TWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = FB0TW03.FB0TWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
end // end FB0T621

// submit batch jcl
Function FB0T622()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0TM010.FB0TMPCR == "Y") /* print calc report*/
    TA6REC.TA6SUBSW = "Y"; /* display info, tailor and submit jcl*/
  else
    TA6REC.TA6SUBSW = "S"; /* tailor and submit jcl only*/
  end
  ;
  TA6REC.TA6MSGSW = "N"; /* end of submit messages*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(76); /* display message*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0TM010.XXXMODID = "622"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0TM010.XXXMODID = "622"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T622

// format production JCL
Function FB0T625()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  FB0TW00.FB0TWTIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0TW00.FB0TWTIX > 0) /* Until end of table*/
    ;
    if (FB0TT02.TARTYPE[FB0TWTIX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format region parameters*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARTYPE[TA6INDEX] = FB0TT02.TARTYPE[FB0TWTIX]; /* Type*/
      ;
      FB0T621(); /* formats JCL*/
      ;
    else
      ;
      if (FB0TT02.TARTYPE[FB0TWTIX] == "C") /* condition statment*/
        ;
        FB0TW03.FB0TWCND = FB0TT02.TARJCL[FB0TWTIX];
        if (FB0TM010.FB0TMPCR == "Y") /* if print calc rept*/
          FB0TW03.FB0TWCON = "(0,NE)         ";
        else
          FB0TW03.FB0TWCON = "((0,EQ),(0,NE))";
        end
        TA6REC.TARJCL[TA6INDEX] = FB0TW03.FB0TWCND;
        TA6REC.TARTYPE[TA6INDEX] = " "; /* type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0TT02.TARJCL[FB0TWTIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0TT02.TARTYPE[FB0TWTIX]; /* Type*/
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0TT02.TARJCL[FB0TWTIX] == "/*EOF") /* End of table*/
      ;
      FB0TW00.FB0TWTIX = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0TW00.FB0TWTIX = FB0TW00.FB0TWTIX + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
  FB0T622(); /* Submit the JCL*/
  FBXREC.XXXMSGNO = 16; /* Info msg, not err*/
  ;
  ;
end // end FB0T625

// update frozen b/l table
Function FB0T630()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------- y2k out begin ------*/
   /* CALL IO4680 'S ',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("S ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ---------*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
      converseLib.validationFailed(10); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev updtes*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000")
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev updtes*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFBLAV01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (FBLREC.ZZZCHGCT != FB0TW02.ZZZCHGCT[FB0TWWIX])
    converseLib.validationFailed(20); /* updated since last access*/
    FB0TM010.XXXMODID = "630"; /* module identification*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev changes*/
    exit stack; /* display map*/
  end
  ;
  if (converseVar.eventKey is pf19) /* delete adjustments*/
    FB0TW00.FB0TWGIX = 1; /* first size*/
    ;
    while (FB0TW00.FB0TWGIX < 41) /* for each size*/
      FBLREC.FBLMAQTY[FB0TWGIX] = 0; /* zero adjustment quantity*/
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* next size*/
    end
    ;
  else /* regular update*/
    ;
    FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX]; /* to separate*/
    ;
    if (FB0TW00.FB0TWWIX == 1) /* first whse*/
      FB0TW00.FB0TWMIX = 1;
    else
      if (FB0TW00.FB0TWWIX == 2) /* 2nd whse*/
        FB0TW00.FB0TWMIX = 11;
      else
        FB0TW00.FB0TWMIX = 21;
      end
    end
    ;
    FB0TW00.FB0TWIX1 = 1; /* gen index*/
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWCSI; /* data index*/
    ;
    while (FB0TW00.FB0TWIX1 <= 10
     && FB0TW00.FB0TWGIX <= FB0TW00.FB0TWLSI)
      ;
      if (FB0TW00.FB0TWZHD[FB0TWGIX] == "Y") /* valid size*/
        ;
        if (FB0TW00.FB0TMADJ[FB0TWGIX] != FB0TM010.FB0TMADJ[FB0TWMIX])
          ;
          FBLREC.FBLMAQTY[FB0TWGIX] = FB0TM010.FB0TMADJ[FB0TWMIX];
          FB0TW00.FB0TMADJ[FB0TWGIX] = FB0TM010.FB0TMADJ[FB0TWMIX];
          FB0TW00.FB0TWAFL = "Y"; /* an adjustment made*/
          FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* increment*/
          FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* increment*/
        else
          FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1; /* increment*/
          FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* increment*/
        end
      end
      ;
      FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1;
      ;
    end
    ;
    FB0TW02.FB0TWAGR[FB0TWWIX] = FB0TW00.FB0TWAGR;
  end
  ;
  if (FB0TW02.FB4RGPCT[FB0TWWIX] != FBLREC.FB4RGPCT)
    FB0TW00.FB0TWAFL = "Y";
    FBLREC.FB4RGPCT = FB0TW02.FB4RGPCT[FB0TWWIX];
  end
  ;
   /* ------------------------------------------------------------*/
   /* update the row which was just selected*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0TW00.FB0TWAFL == "N" /* no adjustments made this whse*/
   && converseVar.eventKey not pf19)
    return;
  end
  ;
  FBLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* ------- y2k out begin ------*/
   /* CALL IO4680 'U ',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* ------- y2k out end --------*/
   /* ------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("U ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* ------- y2k in end ---------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(20); /* updated since last access*/
      FB0TM010.XXXMODID = "630"; /* module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* display map*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* nermal return code*/
      return; /* return to performing process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If data not available, return an error message to the user.*/
     /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0TM010.XXXMODID = "630"; /* Module identification*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
      converseLib.validationFailed(10); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
end // end FB0T630

// update qty adjusted flag
Function FB0T640()
   /* ------------------------------------------------------------*/
   /* build key for fbkrec*/
   /* ------------------------------------------------------------*/
  ;
  FBKREC.SY1STNBR = FB0TM010.SY1STNBR;
  FBKREC.SY2CLRID = FB0TM010.SY2CLRID;
  FBKREC.XDMCD = FB0TM010.XDMCD;
  FBKREC.FB8BUYDT = FBLREC.FB8BUYDT;
  FBKREC.FB8RCTYP = "B";
  ;
   /* ------------------------------------------------------------*/
   /* Select unique from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/
  ;
   /* ------------------------------------------------------------*/
   /* If not found, error updated since displayed*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0TM010.XXXMODID = "640"; /* process number*/
      converseLib.validationFailed(20); /* updated sincd last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      exit stack; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(10); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev changes*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUELY     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  if (sysVar.errorCode != "00000000")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev changes*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT UNIQUE       ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
    TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
  FB0TW00.FB0TWWKF = "N"; /* no adjustments*/
  if (converseVar.eventKey not pf19) /* not delete*/
    FB0TW00.FB0TWWIX = 1; /* warehouse index*/
    ;
    while (FB0TW00.FB0TWWIX < 4 /* for each warehouse*/
     && FB0TW00.FB0TWWKF == "N") /* or until an adjustment found*/
      FB0TW00.FB0TWAGR = FB0TW02.FB0TWAGR[FB0TWWIX];
      FB0TW00.FB0TWGIX = 1; /* size index*/
      ;
      while (FB0TW00.FB0TWGIX < 41 /* for each size*/
       && FB0TW00.FB0TWWKF == "N") /* or until an adjustment found*/
        ;
        if (FB0TW00.FB0TMADJ[FB0TWGIX] != 0) /* a non zero adjustment*/
          FB0TW00.FB0TWWKF = "Y"; /* yes to adjustment flag*/
        end
        ;
        FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* next size*/
      end
      ;
      FB0TW00.FB0TWWIX = FB0TW00.FB0TWWIX + 1; /* next warehouse*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* update the table*/
   /* ------------------------------------------------------------*/
  ;
  FBKREC.FBKABLFL = FB0TW00.FB0TWWKF;
  FBKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO4740" ("U ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* update*/
  ;
   /* ------------------------------------------------------------*/
   /* If found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0TM010.XXXMODID = "640"; /* process id*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any prev updates*/
      converseLib.validationFailed(20); /* updated since last displayed*/
      exit stack; /* display map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any prev updates*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE              ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.FBKGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T640

// Update VFBLAV01 rows
Function FB0T650()
  ;
   /* ------------------------------------------------------------*/
   /* Get all of the frozen bottom line rows for the product (by*/
   /* warehouse) update any invalid sizes zero quantities.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0TW00.FB0TWIX1 = 1;
  ;
  while (FB0TW00.FB0TWIX1 <= 3)
    ;
    if (FB0TW02.XWHCD[FB0TWIX1] != " ")
      FBLREC.XWHCD = FB0TW02.XWHCD[FB0TWIX1];
      ;
      FB0T651(); /* get unique table row*/
      ;
      FB0T652(); /* zero invalid sizes*/
      ;
      FB0T653(); /* Update table row*/
      ;
    end
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
  end
  ;
   /* Format message in ezemsg field*/
  ;
  ;
  FB0TW00.FB0TW5LT = "**** NUMBER OF INVALID SIZES FIXED  = ";
  FB0TW00.FB0TW5CT = FB0TW00.FB0TWISC;
  ;
  FB0TM010.VAGen_EZEMSG = FB0TW00.FB0TWF5M;
  FB0TW00.FB0TWRDS = "Y"; /* Request data*/
  FB0TW00.FB0TWMCS = "Y"; /* Clear map*/
  ;
  exit stack;
  ;
end // end FB0T650

// Obtain unique VFBLAV01 row
Function FB0T651()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
   /* --------- y2k out begin ------*/
   /* CALL IO4680 'S ',SQLCA,FBLREC (NOMAPS,NONCSP,REPLY; /* Select row*/
   /* --------- y2k out end --------*/
   /* --------- y2k in  begin ------*/
  try
    call "VFBLAV02" ("S ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* --------- y2k in end ---------*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (FBLREC.ZZZCHGCT != FB0TW02.ZZZCHGCT[FB0TWIX1])
        converseLib.validationFailed(20); /* Record has been updated etc*/
        exit stack;
      end
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(20); /* Record has been updated etc*/
      exit stack;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "651"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB0TW00.FB0TWMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  TA1REC.TA1TBLKE = FBLREC.FBLGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0T651

// Zero invalid size quantities
Function FB0T652()
  ;
  FB0TW00.FB0TWGIX = 1; /* initialise index*/
  ;
  while (FB0TW00.FB0TWGIX < 41) /* for each size*/
    if (PG3REC.SY4IDDSC[FB0TWGIX] == " "
     && FB0TW00.FB0TWFSQ[FB0TWGIX] != 0)
      FBLREC.PT3AVQT[FB0TWGIX] = 0;
      FBLREC.FBLDAQTY[FB0TWGIX] = 0;
      FBLREC.FBLMAQTY[FB0TWGIX] = 0;
      FBLREC.FBLOAQTY[FB0TWGIX] = 0;
    end
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* next size*/
  end
  ;
  ;
end // end FB0T652

// Update VFBLAV01 row
Function FB0T653()
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FBLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
   /* ------- y2k out begin -------*/
                                  /* CALL IO4680 'U ',SQLCA,FBLREC*/
                                   /* (NOMAPS,NONCSP,REPLY; /* Update table*/
                                   /* row*/
   /* ------- y2k out end ---------*/
   /* ------- y2k in  begin -------*/
  try
    call "VFBLAV02" ("U ", SQLCA, FBLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table row*/
   /* ------- y2k in end ----------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      ;
      return; /* Return to previous process*/
      ;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(20); /* Record updated since last displayed*/
      exit stack;
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0T653 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFBLAV02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TM010.XXXMODID = "653"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FB0T653

// save, clear, restore map
Function FB0TS01()
  FB0TW00.SY1STNBR = FB0TM010.SY1STNBR;
  FB0TW00.SY2CLRID = FB0TM010.SY2CLRID;
  FB0TW00.XDMCD = FB0TM010.XDMCD;
  FB0TW00.PT3YYMM = FB0TM010.PT3YYMM;
  FB0TW00.XDMCD = FB0TM010.XDMCD;
  FB0TW00.SY1SSTNM = FB0TM010.SY1SSTNM;
  FB0TW00.SY2CLRAB = FB0TM010.SY2CLRAB;
  FB0TW00.PT3YYMM = FB0TM010.PT3YYMM;
  FB0TW00.FB0TMBMO = FB0TM010.FB0TMBMO;
  FB0TW00.FB4RGPCT[1] = FB0TM010.FB4RGPCT[1];
  FB0TW00.FB4RGPCT[2] = FB0TM010.FB4RGPCT[2];
  FB0TW00.FB4RGPCT[3] = FB0TM010.FB4RGPCT[3];
  set FB0TM010 initial;
  FB0TM010.SY1STNBR = FB0TW00.SY1STNBR;
  FB0TM010.SY2CLRID = FB0TW00.SY2CLRID;
  FB0TM010.XDMCD = FB0TW00.XDMCD;
  FB0TM010.PT3YYMM = FB0TW00.PT3YYMM;
  FB0TM010.XDMCD = FB0TW00.XDMCD;
   /* MOVE FB0TW00.SY1SSTNM TO FB0TM010.SY1SSTNM;*/
   /* MOVE FB0TW00.SY2CLRAB TO FB0TM010.SY2CLRAB;*/
  FB0TM010.PT3YYMM = FB0TW00.PT3YYMM;
  FB0TM010.FB0TMBMO = FB0TW00.FB0TMBMO;
  FB0TM010.FB4RGPCT[1] = FB0TW00.FB4RGPCT[1];
  FB0TM010.FB4RGPCT[2] = FB0TW00.FB4RGPCT[2];
  FB0TM010.FB4RGPCT[3] = FB0TW00.FB4RGPCT[3];
  FB0TM010.FB0TMSZS = 10;
  FB0TM010.XXXCURDT = VGVar.currentShortGregorianDate;
end // end FB0TS01

// protect enterable fields
Function FB0TS02()
  FB0TM010.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
  if (FB0TW00.FB0TWNFW == 0)
    FB0TW00.FB0TWMIX = 1; /* set map index to  1*/
  else
    ;
    if (FB0TW00.FB0TWNFW == 1)
      FB0TW00.FB0TWMIX = 11; /* set map index to 11*/
    else
      ;
      if (FB0TW00.FB0TWNFW == 2)
        FB0TW00.FB0TWMIX = 21; /* set map index to 21*/
      else
        FB0TW00.FB0TWMIX = 31; /* set map index to 31*/
      end
      ;
    end
    ;
  end
  ;
  while (FB0TW00.FB0TWMIX < 31)
    set FB0TM010.FB0TMADJ[FB0TWMIX] skip, invisible;
    FB0TW00.FB0TWMIX = FB0TW00.FB0TWMIX + 1;
  end
  ;
  if (FB0TW00.FB0TWNFW == 0)
    set FB0TM010.FB4RGPCT[1] skip, invisible;
    set FB0TM010.FB4RGPCT[2] skip, invisible;
    set FB0TM010.FB4RGPCT[3] skip, invisible;
  end
  ;
  if (FB0TW00.FB0TWNFW == 1)
    set FB0TM010.FB4RGPCT[2] skip, invisible;
    set FB0TM010.FB4RGPCT[3] skip, invisible;
  end
  ;
  if (FB0TW00.FB0TWNFW == 2)
    set FB0TM010.FB4RGPCT[3] skip, invisible;
  end
  ;
end // end FB0TS02

// Validate sizes
Function FB0TS03()
  ;
  ;
   /* ------------------------------------------------------------*/
    /* Validate all of the sizes for all of the qty fields*/
    /* on the frozen bottom line table against the valid size*/
    /* descriptions on the size table.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0TW00.FB0TWIX1 = 1; /* Index for invalid size message*/
  ;
  FB0TW00.FB0TWGIX = 1; /* Initialize index*/
  FB0TW00.FB0TWISF = "N"; /* Invalid size flag*/
  FB0TW00.FB0TWISC = 0; /* Invalid size count*/
  ;
  while (FB0TW00.FB0TWGIX < 41) /* For each size*/
    if (PG3REC.SY4IDDSC[FB0TWGIX] == " "
     && FB0TW00.FB0TWFSQ[FB0TWGIX] != 0)
      FB0TW00.FB0TWISF = "Y"; /* Invalid size flag*/
      FB0TW00.FB0TWISC = FB0TW00.FB0TWISC + 1;
      FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
    end
    FB0TW00.FB0TWGIX = FB0TW00.FB0TWGIX + 1; /* next size*/
  end
  ;
  ;
  ;
end // end FB0TS03

// open DFBUY.VDNORD01 cursor
Function FB0TS05()
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("S7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0TS05"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TW00.FB0TWRDS = "N";
  exit stack;
  ;
end // end FB0TS05

// Fetch DFBUY.VDNORD01 row
Function FB0TS06()
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO4640" ("N7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0TW00.FB0TWECS = "Y"; /* Indicate cursor at EOF*/
      return;
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0TS06"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TW00.FB0TWRDS = "N";
  exit stack;
  ;
end // end FB0TS06

// Close DFBUY.VDNORD01 cursor
Function FB0TS07()
  ;
   /* ------------------------------------------------------------*/
   /* Close cursor for DFBUY.VDNORD01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4640" ("C7", SQLCA, FBHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0TS07"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB0TW00.FB0TWRDS = "N";
  exit stack;
  ;
end // end FB0TS07

// Get size descriptions
Function FB0TS08()
  ;
  ;
   /* ------------------------------------------------------------*/
    /* initialize size description fields*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0TW00.FB0TWIX1 = 1; /* init index*/
  ;
  while (FB0TW00.FB0TWIX1 <= 40) /* for all sizes*/
    ;
   /* move spaces*/
    FB0TW00.FB0TWZHD[FB0TWIX1] = " ";
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
    /* build key for pg3rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  TA1REC.TA1PGMNM = "PG0R170"; /* module id*/
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB0TM010.SY1STNBR;
  PG3REC.SY2CLRID = FB0TM010.SY2CLRID;
  PG3REC.XDMCD = FB0TM010.XDMCD;
  PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* only sizes this div*/
  ;
  if (FBXREC.XQACD[1] != "  ") /* in commarea*/
    PG3REC.XQACD = FBXREC.XQACD[1]; /* move to key*/
  else
    PG3REC.XQACD = "01"; /* move default*/
  end
  ;
  XSPG301();
  ;
   /* ------------------------------------------------------------*/
    /* determine which fields have size descriptions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWIX1 = 1; /* init index*/
  ;
  while (FB0TW00.FB0TWIX1 <= 40) /* for all sizes*/
    ;
    if (PG3REC.SY4IDDSC[FB0TWIX1] != " ") /* if description*/
      FB0TW00.FB0TWZHD[FB0TWIX1] = "Y"; /* valid desc*/
    end
    ;
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
  end
  ;
   /* ------------------------------------------------------------*/
    /* determine first and last sizes to be displayed on map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0TW00.FB0TWFSI = 0; /* init 1st size index*/
  FB0TW00.FB0TWLSI = 0; /* init last size index*/
  ;
   /* find first size*/
  ;
  FB0TW00.FB0TWIX1 = 1; /* init index*/
  ;
  while (FB0TW00.FB0TWIX1 <= 40) /* for all sizes*/
    ;
    if (FB0TW00.FB0TWZHD[FB0TWIX1] == "Y") /* valid size hdr*/
      FB0TW00.FB0TWFSI = FB0TW00.FB0TWIX1; /* first size index*/
      FB0TW00.FB0TWIX1 = 41; /* get out while you can*/
    end
    ;
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1;
  end
  ;
   /* find last size*/
  ;
  FB0TW00.FB0TWIX1 = FB0TW00.FB0TWFSI; /* init index*/
  ;
  while (FB0TW00.FB0TWIX1 <= 40) /* for all sizes*/
    ;
    if (FB0TW00.FB0TWZHD[FB0TWIX1] == "Y") /* size has data*/
      FB0TW00.FB0TWLSI = FB0TW00.FB0TWIX1; /* last size index*/
    end
    ;
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* increment*/
  end
  ;
   /* set current index to first size index*/
  ;
  FB0TW00.FB0TWCSI = FB0TW00.FB0TWFSI; /* current size index*/
  ;
  ;
end // end FB0TS08

// load sum code array
Function FB0TS09()
  set YSMREC empty; /* initialise record*/
  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSUMCD = "01";
  YSMSRCVL = "****";
  FB0TS10(); /* declare cursor*/
  FB0TW00.FB0TWIX1 = 1; /* first row*/
  ;
  while (FB0TW00.FB0TWIX1 <= +10
   && SQLCA.VAGen_SQLCODE != 100)
    FB0TS11(); /* fetch row*/
    FB0TW00.FB0TWIX1 = FB0TW00.FB0TWIX1 + 1; /* next row*/
  end
  ;
  if (FB0TW00.FB0TWIX1 <= 10)
    FB0TS12(); /* close cursor*/
    return; /* return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0TM010.XXXMODID = "S25"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "MORE THAN 10 WAREHOUSES SUMCD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0TS09

// declare cursor DCORP.VSUMCD01
Function FB0TS10()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0TS10

// fetch row DCORP.VSUMCD01
Function FB0TS11()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found,*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0TW00.XWH-WHSE-CD[FB0TWIX1] = YSMREC.YSMSRCVL;
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* bad return*/
   || SQLCA.VAGen_SQLCODE != 0)      /* not normal sql code*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FB0TM010.XXXMODID = "S11"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT NEXT ROW     ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
    TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB0TW00.FB0TWRDS = "N"; /* don't request data*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FB0TS11

// close cursor DCORP.VSUMCD01
Function FB0TS12()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0TM010.XXXMODID = "S12"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMCD CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0TM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMGRP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB0TW00.FB0TWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0TS12

//*** RECORD=FB0TW00 ****
// misc working storage for fb0t
// ***********************
Record FB0TW00 type basicRecord
  10 FB0TWBDT FB0TWBDT ; 
    15 FB0TWBCC FB0TWBCC ; 
    15 FB0TMBMO FB0TMBMO ; 
      20 FB0TMBYY FB0TMBYY ; 
      20 FB0TMBMM FB0TMBMM ; 
    15 FB0TWBDD FB0TWBDD ; 
  10 FB0TWFFI FB0TWFFI ; 
  10 FB0TWWKF FB0TWWKF ; 
  10 FB0TWAFL FB0TWAFL ; 
  10 FB0TWMCS FB0TWMCS ; 
  10 FB0TWRDS FB0TWRDS ; 
  10 FB0TWKCS FB0TWKCS ; 
  10 FB0TWDCS FB0TWDCS ; 
  10 FB0TWSSR FB0TWSSR ; 
  10 FB0TWISF FB0TWISF ; 
  10 FB0TWRCS FB0TWRCS ; 
  10 FB0TWECS FB0TWECS ; 
  10 FB0TWDWS FB0TWDWS ; 
  10 FB0TWGIX FB0TWGIX ; 
  10 FB0TWHIX FB0TWHIX ; 
  10 FB0TWLIX FB0TWLIX ; 
  10 FB0TWMIX FB0TWMIX ; 
  10 FB0TWMMI FB0TWMMI ; 
  10 FB0TWSIX FB0TWSIX ; 
  10 FB0TWTIX FB0TWTIX ; 
  10 FB0TWWIX FB0TWWIX ; 
  10 FB0TWIX1 FB0TWIX1 ; 
  10 FB0TWFSI FB0TWFSI ; 
  10 FB0TWCSI FB0TWCSI ; 
  10 FB0TWLSI FB0TWLSI ; 
  10 FB0TWZHD FB0TWZHD [40] ; 
  10 FB0TWNFW FB0TWNFW ; 
  10 FB0TWTFP FB0TWTFP ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 PT3YYMM PT3YYMM ; 
  10 FB4RGPCT FB4RGPCT [3] ; 
  10 FB0TMSZS FB0TMSZS ; 
  10 FB0TWGRP FB0TWGRP ; 
    15 FB0TMBLQ FB0TMBLQ [40] ; 
  10 FB0TWAGR FB0TWAGR ; 
    15 FB0TMADJ FB0TMADJ [40] ; 
  10 FB0TWNGR FB0TWNGR ; 
    15 FB0TMABQ FB0TMABQ [40] ; 
  10 FB0TWWK FB0TWWK ; 
  10 FB0TWWK3 FB0TWWK3 ; 
  10 FB0TWWK2 FB0TWWK2 ; 
  10 FB0TWWF1 FB0TWWF1 ; 
  10 FB0TWWF2 FB0TWWF2 ; 
  10 FB0TMTBQ FB0TMTBQ [4] ; 
  10 FB0TMTAD FB0TMTAD [4] ; 
  10 FB0TWTTQ FB0TWTTQ ; 
  10 FB0TWFSQ FB0TWFSQ [40] ; 
  10 FB0TWISC FB0TWISC ; 
  10 FB0TWF5M FB0TWF5M ; 
    15 FB0TW5LT FB0TW5LT ; 
    15 * char(1) ; 
    15 FB0TW5CT FB0TW5CT ; 
    15 * char(1) ; 
  10 FB0TWF8M FB0TWF8M ; 
    15 FB0TW8LT FB0TW8LT ; 
    15 FB0TW8SM FB0TW8SM [4] ; 
    15 * char(1) ; 
    15 FB0TW8MM FB0TW8MM ; 
  10 FB0TW8SI FB0TW8SI ; 
    15 * char(1) ; 
    15 FB0TW8SD FB0TW8SD ; 
    15 * char(1) ; 
    15 FB0TW8SQ FB0TW8SQ ; 
    15 * char(1) ; 
  10 FB0TWPC1 FB0TWPC1 [40] ; 
  10 FB0TWPC2 FB0TWPC2 [40] ; 
  10 FB0TWPC3 FB0TWPC3 [40] ; 
  10 FB0TWPR1 FB0TWPR1 ; 
  10 FB0TWPR2 FB0TWPR2 ; 
  10 FB0TWPR3 FB0TWPR3 [10] ; 
  10 FB0TWPCW FB0TWPCW [10] ; 
  10 FB0TWPC4 FB0TWPC4 ; 
  10 FB0TWNQT FB0TWNQT ; 
  10 FB0TW-ORD-ADJ-BUY-DT FB0TW-ORD-ADJ-BUY-DT ; 
    15 FB0TW-ORD-ADJ-BUY-MO FB0TW-ORD-ADJ-BUY-MO ; 
    15 FB0TW-ORD-ADJ-BUY-DD FB0TW-ORD-ADJ-BUY-DD ; 
  10 FB0TW-PREADVISE-TOT FB0TW-PREADVISE-TOT ; 
  10 FB0TW-DIVERT-TOT FB0TW-DIVERT-TOT ; 
  10 FB0TW-DIVERT-COUNT FB0TW-DIVERT-COUNT ; 
  10 FB0TW-OA-COUNT FB0TW-OA-COUNT ; 
  10 FB0TW-PO-COUNT FB0TW-PO-COUNT ; 
  10 FB0TW-DIR-SHP-PREADV-TOT FB0TW-DIR-SHP-PREADV-TOT ; 
  10 XWH-WHSE-CD XWH-WHSE-CD [10] ; 
  10 FB0TW-TMP-DT FB0TW-TMP-DT ; 
    15 FB0TW-TMP-CC FB0TW-TMP-CC ; 
    15 FB0TW-TMP-YY FB0TW-TMP-YY ; 
    15 FB0TW-TMP-MM FB0TW-TMP-MM ; 
    15 FB0TW-TMP-DD FB0TW-TMP-DD ; 
  10 FB0TW-CHK-DT FB0TW-CHK-DT ; 
    15 FB0TW-CHK-CY FB0TW-CHK-CY ; 
      20 FB0TW-CHK-CC FB0TW-CHK-CC ; 
      20 FB0TW-CHK-YY FB0TW-CHK-YY ; 
    15 FB0TW-CHK-MM FB0TW-CHK-MM ; 
    15 FB0TW-CHK-DM FB0TW-CHK-DM ; 
  10 FB0TW-CHK-DTE FB0TW-CHK-DTE ; 
  10 FB0TW-CUR-DT FB0TW-CUR-DT ; 
    15 FB0TW-CUR-CY FB0TW-CUR-CY ; 
      20 FB0TW-CUR-CC FB0TW-CUR-CC ; 
      20 FB0TW-CUR-YY FB0TW-CUR-YY ; 
    15 FB0TW-CUR-MM FB0TW-CUR-MM ; 
    15 FB0TW-CUR-DD FB0TW-CUR-DD ; 
  10 FB0TW-BUY-DT FB0TW-BUY-DT ; 
    15 FB0TW-BUY-CY FB0TW-BUY-CY ; 
      20 FB0TW-BUY-CC FB0TW-BUY-CC ; 
      20 FB0TW-BUY-YY FB0TW-BUY-YY ; 
    15 FB0TW-BUY-MM FB0TW-BUY-MM ; 
end // end FB0TW00

//*** RECORD=FB0TW01 ****
// display working storage for fb0t
// ***********************
Record FB0TW01 type basicRecord
  10 FB0TMBMO FB0TMBMO ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FB0TW-PT3-DT FB0TW-PT3-DT ; 
    15 FB0TW-PT3-CC FB0TW-PT3-CC ; 
    15 FB0TW-PT3-YM FB0TW-PT3-YM ; 
      20 FB0TW-PT3-YY FB0TW-PT3-YY ; 
      20 FB0TW-PT3-MM FB0TW-PT3-MM ; 
  10 FB0TMSZS FB0TMSZS ; 
  10 FB0TMSTQ FB0TMSTQ ; 
  10 FB0TMPCR FB0TMPCR ; 
end // end FB0TW01

//*** RECORD=FB0TW02 ****
// working storage for fb0t for warehouse specific data
// ***********************
Record FB0TW02 type basicRecord
  10 PT3YYMM PT3YYMM ; 
  10 XWHCD XWHCD [4] ; 
  10 FB0TWGRP FB0TWGRP [4] ; 
  10 FB0TWAGR FB0TWAGR [4] ; 
  10 FB0TWNGR FB0TWNGR [4] ; 
  10 FB4RGPCT FB4RGPCT [4] ; 
  10 XWHSABRV XWHSABRV [4] ; 
  10 FB0TMTBQ FB0TMTBQ [4] ; 
  10 FB0TMTAD FB0TMTAD [4] ; 
  10 FB0TMTAB FB0TMTAB [4] ; 
  10 FB0TMPCT FB0TMPCT [4] ; 
  10 FBKRDFL FBKRDFL [4] ; 
  10 FB0TWSPF FB0TWSPF [4] ; 
  10 FB0TWSRP FB0TWSRP ; 
  10 ZZZCHGCT ZZZCHGCT [4] ; 
end // end FB0TW02

Record FB0TW03 type basicRecord
  10 FB0TWPRR FB0TWPRR ; 
    15 FB0TWCMT FB0TWCMT ; 
    15 FB0TWPRM FB0TWPRM ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 FB8BUYDT FB8BUYDT ; 
      20 XWHCD1 XWHCD1 ; 
      20 FB0TWPCA FB0TWPCA ; 
      20 XWHCD2 XWHCD2 ; 
      20 FB0TWPCB FB0TWPCB ; 
      20 XWHCD3 XWHCD3 ; 
      20 FB0TWPCC FB0TWPCC ; 
      20 FBKRDFL FBKRDFL ; 
      20 * char(31) ; 
  10 FB0TWCND FB0TWCND ; 
    15 * char(18) ; 
    15 FB0TWCON FB0TWCON ; 
    15 * char(47) ; 
end // end FB0TW03

// orig b/l qty + adjustments
DataItem FB0TMABQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// adjustments
DataItem FB0TMADJ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// bottom line quantity
DataItem FB0TMBLQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy date month
DataItem FB0TMBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date yymm
DataItem FB0TMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date year
DataItem FB0TMBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print calc report control
DataItem FB0TMPCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bottom line percent
DataItem FB0TMPCT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// stock quantity to buy
DataItem FB0TMSTQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// scroll columns
DataItem FB0TMSZS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total adjusted b/l qty
DataItem FB0TMTAB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total adjustments
DataItem FB0TMTAD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total bottom line qty
DataItem FB0TMTBQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0TW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-BUY-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB0TW-BUY-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date century portion
DataItem FB0TW-CHK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CHK-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date delivery month
DataItem FB0TW-CHK-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date field
DataItem FB0TW-CHK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date in db format
DataItem FB0TW-CHK-DTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date mnfcture month
DataItem FB0TW-CHK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// converted date year portion
DataItem FB0TW-CHK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CUR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CUR-CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CUR-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today's date
DataItem FB0TW-CUR-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CUR-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-CUR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL OF DIRSHIP - PREADVISE
DataItem FB0TW-DIR-SHP-PREADV-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT DIVERTED TOTAL
DataItem FB0TW-DIVERT-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT DIVERTED TOTAL
DataItem FB0TW-DIVERT-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT OA count(for diverts)
DataItem FB0TW-OA-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORD ADJ BUY DD DD
DataItem FB0TW-ORD-ADJ-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORD ADJ BUY DT CCYYMMDD
DataItem FB0TW-ORD-ADJ-BUY-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORD ADJ BUY MO CCYYMM
DataItem FB0TW-ORD-ADJ-BUY-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT PO count(for diverts)
DataItem FB0TW-PO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRODUCT PREADVISE TOTAL
DataItem FB0TW-PREADVISE-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-PT3-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-PT3-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-PT3-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-PT3-YM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0TW-PT3-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date century portion
DataItem FB0TW-TMP-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date day portion
DataItem FB0TW-TMP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date for converting buy dt
DataItem FB0TW-TMP-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date month portion
DataItem FB0TW-TMP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tmp date year portion
DataItem FB0TW-TMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 message count
DataItem FB0TW5CT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 message literal
DataItem FB0TW5LT char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 message literal
DataItem FB0TW8LT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 more message
DataItem FB0TW8MM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pf 18 size quantity
DataItem FB0TW8SD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 size description
DataItem FB0TW8SI char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size message array
DataItem FB0TW8SM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf18 size quantity
DataItem FB0TW8SQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adjustment made flag
DataItem FB0TWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment group
DataItem FB0TWAGR char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date century
DataItem FB0TWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date day
DataItem FB0TWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date ccyymm01
DataItem FB0TWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment, value //*
DataItem FB0TWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition statement
DataItem FB0TWCND char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition
DataItem FB0TWCON char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current size index
DataItem FB0TWCSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem FB0TWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// domestic whse found switch
DataItem FB0TWDWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem FB0TWECS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF5 message
DataItem FB0TWF5M char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF18 message
DataItem FB0TWF8M char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first fetch indicator
DataItem FB0TWFFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first size index
DataItem FB0TWFSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total VFBLAV01 size qty
DataItem FB0TWFSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group (size) index
DataItem FB0TWGIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bottom line quantity group
DataItem FB0TWGRP char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fbxrec high index
DataItem FB0TWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid size count
DataItem FB0TWISC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid size flag
DataItem FB0TWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FB0TWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FB0TWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fbxrec low index
DataItem FB0TWLIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size index
DataItem FB0TWLSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map format switch
DataItem FB0TWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index
DataItem FB0TWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map max index
DataItem FB0TWMMI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of whses found on b/lt
DataItem FB0TWNFW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net total group
DataItem FB0TWNGR char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// direct ship/nil qty size total
DataItem FB0TWNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-sz-pct
DataItem FB0TWPC1 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-sz-pct
DataItem FB0TWPC2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-sz-pct
DataItem FB0TWPC3 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 3
DataItem FB0TWPC4 decimal(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 1
DataItem FB0TWPCA num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 2
DataItem FB0TWPCB num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display size/reg percent 3
DataItem FB0TWPCC num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC HOLD AREA FOR CORP PCT
DataItem FB0TWPCW decimal(7,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REGION PCT
DataItem FB0TWPR1 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REGION PCT
DataItem FB0TWPR2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REGION PCT
DataItem FB0TWPR3 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl parameter group level
DataItem FB0TWPRM char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem FB0TWPRR char(82)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// region pct changed sw
DataItem FB0TWRCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem FB0TWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save warehouse index
DataItem FB0TWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size percent found flag
DataItem FB0TWSPF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// standard region percent
DataItem FB0TWSRP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size scroll requested switch
DataItem FB0TWSSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total VFBLAV01 percent
DataItem FB0TWTFP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm table index
DataItem FB0TWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total total quantity
DataItem FB0TWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work field 1
DataItem FB0TWWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB0TWWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse index
DataItem FB0TWWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0TWWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area - 2 decimals
DataItem FB0TWWK2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB0TWWK3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adjustments indicator
DataItem FB0TWWKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size has data flag
DataItem FB0TWZHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

