package fb0z;

import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXPRCNM;
import fb.common.FBWREC;
import fy.common.FY1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0Z ****
// This program is part of the footwear buy system.
// 
// This application provides the capability of submitting the
// rts analysis detail report fb2551.  The user is allowed to
// enter from 1 to 5 factory codes or an '*' for all.  FB0Z
// will submit the batch programs FB254D & FB255D passing the
// entered factories.
// 
// 
// the user may exit via FAST PATH or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/20/92   LDELUH   created.
// 07/21/93   LDELUH   Replace testrms with testenc in jcl.
// 07/28/93   LDELUH   Add 2 new detail reports - FB2571 & 81.
// 08/06/93   LDELUH   Remove level=test in test jcl.
// 05/21/97   RTRAN    Added exception reports.
// 06/04/97   RTRAN    Added jcl steps to run report fb2971.
// 06/10/97   RTRAN    Changed map and proc to allow another
//                     option for report selection.
// 01/24/00   skathi   Modified Tables to add SMTP step
// *********************
Program FB0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0ZW00 FB0ZW00; // record
  FB0ZW01 FB0ZW01; // record
  FB0ZW02 FB0ZW02; // record
  FBWREC FBWREC; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0ZT01; // table
  use FB0ZTT1; // table
  use FB0ZM.FB0ZM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* clear map fields/initialize records*/
     /* ------------------------------------------------------------*/
    ;
    set FB0ZM010 initial;
    set FB0ZW00 empty;
    set FB0ZW01 empty;
    set FB0ZW02 empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA6REC empty;
    ;
    FB0ZW00.FB0ZWSWF = "Y"; /* format map flag*/
    ;
    goto FB0Z001;
    ;
    ;
    FB0Z001: FB0Z001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the RTS Analysis Detail Report parameters.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0Z001; /* Converse report parameters*/
    ;
    ;
  end // end main
end // end FB0Z

// report parameters
Function FB0Z001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0Z100(); /* Obtain data to display*/
  ;
  FB0Z200(); /* Format and display the map*/
  ;
  FB0Z300(); /* Check attention identifier*/
  ;
  FB0Z400(); /* Reset fields to normal intensity*/
  ;
  FB0Z500(); /* Verify the entered data*/
  ;
  FB0Z600(); /* Process valid input request*/
  ;
end // end FB0Z001

// Obtain data to display
Function FB0Z100()
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZW00.FB0ZWRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return;
  end
  ;
  FB0ZW00.FB0ZWRDF = "N"; /* Data not requested*/
  FB0ZW00.FB0ZWSWF = "Y"; /* format the map*/
  ;
  ;
end // end FB0Z100

// Format and display map
Function FB0Z200()
  ;
   /* ------------------------------------------------------------*/
   /* if requested, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZW00.FB0ZWSWF == "Y") /* format map*/
    FB0Z210(); /* format map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0ZM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum != 0)
    set FB0ZM010 alarm; /* Indicate sound alarm*/
    FB0ZM010.XXXPRCNM = FB0ZW00.XXXPRCNM; /* Process number*/
  else
    FB0ZM010.XXXPRCNM = "FB0Z   "; /* Process number*/
  end
  ;
  ;
  converse FB0ZM010 ;
  ;
   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/
  ;
  converseLib.validationFailed(0); /* message number*/
  FB0ZW00.XXXPRCNM = "FB0Z   "; /* Process number*/
  ;
  COMMAREA.CATOAP = FB0ZM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0ZM010.CAITEM; /* Application data*/
end // end FB0Z200

// Format data on map
Function FB0Z210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0ZM010 initial; /* m010 input/output area*/
  ;
  FB0ZW00.FB0ZWSWF = "N"; /* format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map from display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0ZW00.FB0ZWIXM = 1; /* set index*/
  while (FB0ZW00.FB0ZWIXM <= 5)
    FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] = FB0ZW01.FB0ZW-FY-FCTY-CD[FB0ZWIXM]; /* factory code*/
    FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM + 1;
  end
  ;
  ;
end // end FB0Z210

// Check attention ID
Function FB0Z300()
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB0ZM010.XXXPRCNM = "FB0Z   ";
    ;
    FB0ZW00.FB0ZWIXM = 1;
    while (FB0ZW00.FB0ZWIXM <= 5)
      FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] = FB0ZW01.FB0ZW-FY-FCTY-CD[FB0ZWIXM]; /* factory code*/
      FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM + 1;
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = FB0ZM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0ZM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0ZM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0ZW00.XXXPRCNM = "FB0Z300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* Help screen requested*/
    ;
    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0ZM010.XXXPRCNM = "FB0Z300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* menu screen requested*/
    ;
    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0ZM010.XXXPRCNM = "FB0Z300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* Menu screen requested*/
    ;
    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0ZM010.XXXPRCNM = "FB0Z300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  ;
  FB0ZM010.XXXPRCNM = "FB0Z300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;
  ;
  ;
  ;
end // end FB0Z300

// Reset highlighted fields
Function FB0Z400()
  ;
  FB0ZW00.FB0ZWIXM = 1; /* set index*/
  while (FB0ZW00.FB0ZWIXM <= 5)
    set FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] initialAttributes;
    FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM + 1; /* increment*/
  end
  ;
  FB0ZW00.FB0ZWIXM = 1; /* set index*/
  while (FB0ZW00.FB0ZWIXM <= 4)
    set FB0ZM010.FB0ZM-SEL[FB0ZWIXM] initialAttributes;
    FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM + 1; /* increment*/
  end
  ;
  return; /* return to previous process*/
  ;
  ;
end // end FB0Z400

// Verify entered data
Function FB0Z500()
  ;
   /* ----------------------------------------------------*/
   /* highlight any application data that was entered*/
   /* ----------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* application data was entered*/
    ;
    FB0ZW00.XXXPRCNM = "FB0Z500"; /* module identification*/
    set FB0ZM010.CAITEM cursor, bold; /* highlight*/
    converseLib.validationFailed(40); /* enter only with FAST PATH*/
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* verify that a selection was made & that the field*/
   /* was either blank or "s".*/
   /* ----------------------------------------------------*/
  ;
  if (FB0ZM010.FB0ZM-SEL[1] == "S"
   || FB0ZM010.FB0ZM-SEL[2] == "S"
   || FB0ZM010.FB0ZM-SEL[3] == "S"
   || FB0ZM010.FB0ZM-SEL[4] == "S")
     /* next sentence*/
  else
    FB0ZW00.XXXPRCNM = "FB0Z500"; /* module identification*/
    set FB0ZM010.FB0ZM-SEL[1] cursor, bold;
    converseLib.validationFailed(154); /* selection must be made*/
  end
  ;
  FB0ZW00.FB0ZWIXM = 4; /* initialize index*/
  while (FB0ZW00.FB0ZWIXM > 0)
    if (FB0ZM010.FB0ZM-SEL[FB0ZWIXM] == " " /* code has value*/
     || FB0ZM010.FB0ZM-SEL[FB0ZWIXM] == "S")
         /* next sentence*/
    else
      FB0ZW00.XXXPRCNM = "FB0Z500"; /* module identification*/
      set FB0ZM010.FB0ZM-SEL[FB0ZWIXM] cursor, bold;
      converseLib.validationFailed(041); /* only "s" valid*/
    end
    FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM - 1; /* decrement*/
  end
  ;
   /* ----------------------------------------------------*/
   /* verify factory codes against factory table*/
   /* ----------------------------------------------------*/
  ;
  FB0ZW00.FB0ZWIXM = 5; /* initialize index*/
  while (FB0ZW00.FB0ZWIXM > 0)
    if (FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] > "  " /* code has value*/
     && FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] != "*") /* not wildcard*/
      FB0Z520(); /* check factory table*/
      if (SQLCA.VAGen_SQLCODE == 100) /* factory not found*/
        FB0ZW00.XXXPRCNM = "FB0Z500"; /* module identification*/
        set FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM] cursor, bold;
        converseLib.validationFailed(010); /* invalid value*/
      end
    end
    FB0ZW00.FB0ZWIXM = FB0ZW00.FB0ZWIXM - 1; /* decrement*/
  end
  ;
   /* ----------------------------------------------------*/
   /* if any errors found, exit to redisplay the map.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack;
  end
  ;
  ;
end // end FB0Z500

// Validate factory code
Function FB0Z520()
   /* ------------------------------------------------------------*/
   /* Initialize the storage area and record key.*/
   /* ------------------------------------------------------------*/
  ;
  set FY1REC empty; /* Clear row storage area*/
  ;
  FY1REC.FY1FCTYC = FB0ZM010.FB0ZM-FY-FCTY-CD[FB0ZWIXM];
  FY1REC.XGPCD = "02";
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, or no data return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        return; /* Return to previous process*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0ZM010.XXXMODID = "520"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources not available'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE FACTORY  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0ZM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0Z520

// Process valid input request
Function FB0Z600()
   /* ------------------------------------------------------------*/
   /* if necessary, redisplay data with message:*/
   /* 'press enter to continue'.  save data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZW01.FB0ZW-FY-FCTY-CD[1] != FB0ZM010.FB0ZM-FY-FCTY-CD[1]
   || FB0ZW01.FB0ZW-FY-FCTY-CD[2] != FB0ZM010.FB0ZM-FY-FCTY-CD[2]
   || FB0ZW01.FB0ZW-FY-FCTY-CD[3] != FB0ZM010.FB0ZM-FY-FCTY-CD[3]
   || FB0ZW01.FB0ZW-FY-FCTY-CD[4] != FB0ZM010.FB0ZM-FY-FCTY-CD[4]
   || FB0ZW01.FB0ZW-FY-FCTY-CD[5] != FB0ZM010.FB0ZM-FY-FCTY-CD[5])
    ;
    FB0ZW01.FB0ZW-FY-FCTY-CD[1] = FB0ZM010.FB0ZM-FY-FCTY-CD[1];
    FB0ZW01.FB0ZW-FY-FCTY-CD[2] = FB0ZM010.FB0ZM-FY-FCTY-CD[2];
    FB0ZW01.FB0ZW-FY-FCTY-CD[3] = FB0ZM010.FB0ZM-FY-FCTY-CD[3];
    FB0ZW01.FB0ZW-FY-FCTY-CD[4] = FB0ZM010.FB0ZM-FY-FCTY-CD[4];
    FB0ZW01.FB0ZW-FY-FCTY-CD[5] = FB0ZM010.FB0ZM-FY-FCTY-CD[5];
  end
  ;
   /* ------------------------------------------------------------*/
   /* determine which environment the program is executing in:*/
   /* development or production.*/
   /* ------------------------------------------------------------*/
  ;
  FB0Z610(); /* determine region*/
  ;
   /* ------------------------------------------------------------*/
   /* load parameter data into working storage record & submit*/
   /* test or production jcl.*/
   /* ------------------------------------------------------------*/
  ;
  FB0Z620(); /* load parameter*/
  ;
  set TA6REC empty; /* init ta6rec*/
  ;
  if (TA3REC.TA3RGNID == "03") /* if production environment*/
    FB0Z660(); /* submit production report*/
  else
    FB0Z670(); /* submit test report*/
  end
  ;
  FB0ZW00.FB0ZWSWF = "Y"; /* format the map*/
  ;
  ;
end // end FB0Z600

// get region information
Function FB0Z610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FB0ZW00.XXXPRCNM = "FB0Z610"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
end // end FB0Z610

// load parameter data
Function FB0Z620()
   /* ------------------------------------------------------------*/
   /* format parmater to be passed to batch side.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZM010.FB0ZM-FY-FCTY-CD[1] == "*"
   || FB0ZM010.FB0ZM-FY-FCTY-CD[2] == "*"
   || FB0ZM010.FB0ZM-FY-FCTY-CD[3] == "*"
   || FB0ZM010.FB0ZM-FY-FCTY-CD[4] == "*"
   || FB0ZM010.FB0ZM-FY-FCTY-CD[5] == "*")
    FB0ZW02.FB0ZW-FY-FCTY-CD1 = "*";
    FB0ZW02.FB0ZW-FY-FCTY-CD2 = "  ";
    FB0ZW02.FB0ZW-FY-FCTY-CD3 = "  ";
    FB0ZW02.FB0ZW-FY-FCTY-CD4 = "  ";
    FB0ZW02.FB0ZW-FY-FCTY-CD5 = "  ";
  else
    FB0ZW02.FB0ZW-FY-FCTY-CD1 = FB0ZM010.FB0ZM-FY-FCTY-CD[1];
    FB0ZW02.FB0ZW-FY-FCTY-CD2 = FB0ZM010.FB0ZM-FY-FCTY-CD[2];
    FB0ZW02.FB0ZW-FY-FCTY-CD3 = FB0ZM010.FB0ZM-FY-FCTY-CD[3];
    FB0ZW02.FB0ZW-FY-FCTY-CD4 = FB0ZM010.FB0ZM-FY-FCTY-CD[4];
    FB0ZW02.FB0ZW-FY-FCTY-CD5 = FB0ZM010.FB0ZM-FY-FCTY-CD[5];
  end
  ;
  ;
end // end FB0Z620

// Process prod JCL
Function FB0Z660()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0ZW00.FB0ZWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0ZW00.FB0ZWIXT > 0) /* Until end of table*/
    ;
     /* ------------------------------------------------------------*/
      /* Format parameter statements*/
     /* ------------------------------------------------------------*/
    ;
    if (FB0ZT01.TARTYPE[FB0ZWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
     /* ------------------------------------------------------------*/
      /* Format condition statements*/
     /* ------------------------------------------------------------*/
      ;
      if (FB0ZT01.TARTYPE[FB0ZWIXT] == "1"
       || FB0ZT01.TARTYPE[FB0ZWIXT] == "2"
       || FB0ZT01.TARTYPE[FB0ZWIXT] == "3"
       || FB0ZT01.TARTYPE[FB0ZWIXT] == "4")
        FB0ZW02.FB0ZW-COND = FB0ZT01.TARJCL[FB0ZWIXT];
        FB0ZS10(); /* Set prod condition stmts*/
        ;
      else
        ;
       /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
       /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0ZT01.TARJCL[FB0ZWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0ZT01.TARJCL[FB0ZWIXT] == "/*EOF") /* End of table*/
      ;
      FB0ZW00.FB0ZWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0ZW00.FB0ZWIXT = FB0ZW00.FB0ZWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0ZM010.XXXPRCNM = "FB0Z660"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0ZM010.XXXPRCNM = "FB0Z660"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0Z660

// Process test JCL
Function FB0Z670()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0ZW00.FB0ZWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0ZW00.FB0ZWIXT > 0) /* Until end of table*/
    ;
     /* ------------------------------------------------------------*/
      /* Format parameter statements*/
     /* ------------------------------------------------------------*/
    ;
    if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
     /* ------------------------------------------------------------*/
      /* Format condition statements*/
     /* ------------------------------------------------------------*/
      ;
      if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "1"
       || FB0ZTT1.TARTYPE[FB0ZWIXT] == "2"
       || FB0ZTT1.TARTYPE[FB0ZWIXT] == "3"
       || FB0ZTT1.TARTYPE[FB0ZWIXT] == "4")
        FB0ZW02.FB0ZW-COND = FB0ZTT1.TARJCL[FB0ZWIXT];
        FB0ZS15(); /* Set test condition stmts*/
        ;
      else
        ;
       /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
       /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FB0ZTT1.TARJCL[FB0ZWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
        ;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        ;
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0ZTT1.TARJCL[FB0ZWIXT] == "/*EOF") /* End of table*/
      ;
      FB0ZW00.FB0ZWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0ZW00.FB0ZWIXT = FB0ZW00.FB0ZWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0ZM010.XXXPRCNM = "FB0Z670"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0ZM010.XXXPRCNM = "FB0Z670"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0Z670

// Format prod condition stmts
Function FB0ZS10()
  ;
   /* ------------------------------------------------------------*/
   /* Format jcl condition code statements*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZT01.TARTYPE[FB0ZWIXT] == "1") /* FB2571 report*/
    if (FB0ZM010.FB0ZM-SEL[1] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZT01.TARTYPE[FB0ZWIXT] == "2") /* FB2581 report*/
    if (FB0ZM010.FB0ZM-SEL[2] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZT01.TARTYPE[FB0ZWIXT] == "3") /* FB2551 report*/
    if (FB0ZM010.FB0ZM-SEL[3] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZT01.TARTYPE[FB0ZWIXT] == "4") /* Exception reports*/
    if (FB0ZM010.FB0ZM-SEL[4] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZT01.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  ;
end // end FB0ZS10

// Format test condition stmts
Function FB0ZS15()
  ;
   /* ------------------------------------------------------------*/
   /* Format jcl condition code statements*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "1") /* FB2571 report*/
    if (FB0ZM010.FB0ZM-SEL[1] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "2") /* FB2581 report*/
    if (FB0ZM010.FB0ZM-SEL[2] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "3") /* FB2551 report*/
    if (FB0ZM010.FB0ZM-SEL[3] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  if (FB0ZTT1.TARTYPE[FB0ZWIXT] == "4") /* Exception reports*/
    if (FB0ZM010.FB0ZM-SEL[4] == "S")
      FB0ZW02.FB0ZW-COND-LIT = "(0,GT)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    else
      FB0ZW02.FB0ZW-COND-LIT = "(0,LE)";
      TA6REC.TARJCL[TA6INDEX] = FB0ZW02.FB0ZW-COND;
      TA6REC.TARTYPE[TA6INDEX] = FB0ZTT1.TARTYPE[FB0ZWIXT];
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms idx*/
  end
  ;
  ;
end // end FB0ZS15

//*** RECORD=FB0ZW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0ZW00 type basicRecord
  5 * char(17) ; 
    10 FB0ZWSWF FB0ZWSWF ; 
    10 FB0ZWRDF FB0ZWRDF ; 
    10 FB0ZWIXM FB0ZWIXM ; 
    10 FB0ZWIXT FB0ZWIXT ; 
    10 XXXPRCNM XXXPRCNM ; 
end // end FB0ZW00

//*** RECORD=FB0ZW01 ****
// ---------------------------------------------------
// Map 010 display storage.
// ---------------------------------------------------
// ***********************
Record FB0ZW01 type basicRecord
  5 FB0ZW-FY-FCTY-CD FB0ZW-FY-FCTY-CD [5] ; 
end // end FB0ZW01

//*** RECORD=FB0ZW02 ****
// ---------------------------------------------------
// Working Storage to hold parm data passed to FB254D
// & condition codes passed to FB257D, FB258D, FB255D.
// ---------------------------------------------------
// ***********************
Record FB0ZW02 type basicRecord
  5 FB0ZW-PARM FB0ZW-PARM ; 
    10 FB0ZW-FY-FCTY-CD1 FB0ZW-FY-FCTY-CD1 ; 
    10 FB0ZW-FY-FCTY-CD2 FB0ZW-FY-FCTY-CD2 ; 
    10 FB0ZW-FY-FCTY-CD3 FB0ZW-FY-FCTY-CD3 ; 
    10 FB0ZW-FY-FCTY-CD4 FB0ZW-FY-FCTY-CD4 ; 
    10 FB0ZW-FY-FCTY-CD5 FB0ZW-FY-FCTY-CD5 ; 
    10 * char(60) ; 
  5 FB0ZW-COND FB0ZW-COND ; 
    10 * char(20) ; 
    10 FB0ZW-COND-LIT FB0ZW-COND-LIT ; 
    10 * char(54) ; 
end // end FB0ZW02

// condition record
DataItem FB0ZW-COND char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition literal
DataItem FB0ZW-COND-LIT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code
DataItem FB0ZW-FY-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code1
DataItem FB0ZW-FY-FCTY-CD1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code2
DataItem FB0ZW-FY-FCTY-CD2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code3
DataItem FB0ZW-FY-FCTY-CD3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code4
DataItem FB0ZW-FY-FCTY-CD4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory code5
DataItem FB0ZW-FY-FCTY-CD5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm record
DataItem FB0ZW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index
DataItem FB0ZWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB0ZWIXT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data flag
DataItem FB0ZWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map switch
DataItem FB0ZWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

