package fb0g;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XSACD;
import corpx2.XUMCD;
import fb.common.FB1INSEQ;
import fb.common.FB4REC;
import fb.common.FBWREC;
import ff.common.FF00ENU;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
//*** PROGRAM=FB0G ****
// A product is either passed from another application or
// entered by the user. The product descriptions are obtained
// and displayed to the user. The Report selection choices are
// also displayed.
// 
// The user may select one of the reports and the application
// will transfer control to xpta0p for printer and destination
// selection.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/28/89  cnewma  New application.
//          07/16/90  jwood   removed ut2rec from t&r list
//          07/20/93  ldeluh  Change testrms to testenc.
// fb9995   10/02/93  pmainw  fix commarea problem - cspv4.
// *********************
Program FB0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0GW00 FB0GW00; // record
  FB0GW01 FB0GW01; // record
  FB4REC FB4REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0GT01 {deleteAfterUse = yes}; // table
  use FB0GT02 {deleteAfterUse = yes}; // table
  use FB0GT03 {deleteAfterUse = yes}; // table
  use FB0GT04 {deleteAfterUse = yes}; // table
  use FB0GT05 {deleteAfterUse = yes}; // table
  use FB0GT06 {deleteAfterUse = yes}; // table
  use FB0GM.FB0GM010, // form
  		FB0GM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FB0GM010 initial; /* M001 input/output*/
    set FB0GW00 empty; /* Working storage*/
    set FB0GW01 empty; /* display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* XPTA0P work record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FB0GW00.FB0GWFST = "Y"; /* indicate first time through*/

    FB0GW00.FB1INSEQ = FBWREC.FB1INSEQ; /* internal sequence nbr*/
    FB0GW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    if (FBWREC.SY1STNBR != " " /* gpc code*/
     && FBWREC.SY2CLRID != " " /* color id*/
     && FBWREC.XDMCD != " "    /* dimension code*/
     && FBWREC.XQACD != " "    /* quality code*/
     && FBWREC.PC2INSEG != " " /* spec difference code*/
     && FBWREC.XSACD != " "    /* shade code*/
     && FBWREC.XPGCD != " "    /* packing type code*/
     && FBWREC.XUMCD != " "    /* unit of measure code*/
     && FBWREC.FB1INSEQ != 0)  /* internal sequence number*/
      FB0GM010.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
      FB0GM010.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
      FB0GM010.XDMCD = FBWREC.XDMCD; /* dimension code*/
      FB0GW00.FB0GWSPR = "P"; /* indicate valid product*/
      set FB0GM010.SY1STNBR cursor; /* set cursor position*/
      FB0GW00.XGPCD = FBWREC.XGPCD; /* gpc code*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0G001; /* Converse the main process*/


    FB0G001: FB0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0G001; /* Converse the main process*/


  end // end main
end // end FB0G

// Inquire/maintain a table row
Function FB0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FB0G100(); /* Format and display the map*/

  FB0G200(); /* Check attention identifier*/

  FB0G300(); /* Reset fields to normal intensity*/

  FB0G400(); /* Verify the entered data*/

  FB0G500(); /* Process valid input request*/


end // end FB0G001

// Format and converse the map
Function FB0G100()
   /* ------------------------------------------------------------*/
   /* If first time through application and product data entered*/
   /* obtain product descriptions.*/
   /* ------------------------------------------------------------*/

  if (FB0GW00.FB0GWFST == "Y" /* first time through*/
   && FB0GW00.FB0GWSPR == "P") /* product data passed*/
    FB0GW00.FB0GWFST = "N"; /* reset switch*/
    FB0G110(); /* obtain passed data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0GM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0GM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0GM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set FB0GM010 alarm; /* Indicate sound alarm*/
  end

  converse FB0GM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0GM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0GM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0GM010.CAITEM; /* Application data*/


end // end FB0G100

// obtain display data
Function FB0G110()
   /* ------------------------------------------------------------*/
   /* If first time through application,*/
   /* format the data in the map from the passed product data.*/
   /* ------------------------------------------------------------*/

  FB0GM010.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB0GM010.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
  FB0GM010.XDMCD = FBWREC.XDMCD; /* dimension code*/
  FB0GM010.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/

   /* ------------------------------------------------------------*/
   /* Obtain product descriptions*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = FBWREC.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FBWREC.XDMCD; /* dimension code*/

  XSPG202();

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color desc*/
      FB0GM010.SY1STYNM = PG2REC.SY1SSTNM; /* style name*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0GM010.SY2CLRAB = "UNKNOWN "; /* color desc*/
        FB0GM010.SY1STYNM = "UNKNOWN "; /* style name*/
      end
    end
  end


end // end FB0G110

// Check attention identifier
Function FB0G200()
   /* ------------------------------------------------------------*/
   /* reset request for data switch*/
   /* ------------------------------------------------------------*/

  FB0GW00.FB0GWSDR = "Y"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFBS01();

    else

      converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
      FB0GM010.XXXMODID = "200"; /* module identification*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    FB0GM010.XXXMODID = "200"; /* Module identification*/
    set FB0GM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FB0G"; /* selection criteria*/
    XSFBS01();
    FB0GM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CAITEM = "FB0GM010"; /* Application find code*/
    COMMAREA.CATOAP = "GD01"; /* size/maint sel*/
    XSFBS01(); /* Exit to another application*/
    FB0GM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  else

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0M"; /* size/reg pct calc menu*/
      XSFBS01();
      FB0GM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else

      if (converseVar.eventKey is pf4) /* PF4 was pressed*/
        COMMAREA.CATOAP = "MN0M"; /* Master menu*/
        XSFBS01();
        FB0GM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      else

        if (converseVar.eventKey is pf5) /* pf5 was pressed*/
          COMMAREA.CATOAP = "FY0M"; /* prod menu*/
          XSFBS01();
          FB0GM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
          exit stack; /* return to show error msg*/
        end
      end
    end
  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (FB0GW00.FB0GWRNA == "Y") /* resources previously unavailable*/
      /* next sentence*/
    else
      FB0GW00.FB0GWSDR = "N";
                                   /* set data request switch to 'n'*/
    end
    return;
  end

  FB0GM010.XXXMODID = "200"; /* Module identification*/
  converseLib.validationFailed(3); /* 'pf key not supported'*/
  exit stack; /* return to show error msg*/


end // end FB0G200

// Reset highlighted fields
Function FB0G300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FB0GM010.SY1STNBR initialAttributes; /* style number*/
  set FB0GM010.SY2CLRID initialAttributes; /* color*/
  set FB0GM010.XDMCD initialAttributes; /* Dim*/
  set FB0GM010.FB4CRVNB initialAttributes; /* curve number*/
  set FB0GM010.FB0GMRSL initialAttributes; /* report selection code*/

  set FB0GM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0GM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FB0G300

// Verify the entered data
Function FB0G400()
   /* ------------------------------------------------------------*/
   /* Verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if a product was entered, and color id or dimension code*/
   /* not entered, enter default values.*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.SY1STNBR != " ") /* style number entered*/
    if (FB0GM010.SY2CLRID == " ") /* no color id*/
      FB0GM010.SY2CLRID = "00 "; /* color id*/
    end
    if (FB0GM010.XDMCD == " ") /* no dimension code*/
      FB0GM010.XDMCD = "00"; /* dimension code*/
    end
  end
  if (FB0GM010.SY1STNBR != " ") /* style number entered*/
    if (FB0GM010.SY1STNBR != FB0GW00.SY1STNBR) /* style number changed*/
      if (FB0GM010.SY2CLRID == " ") /* no color id*/
        FB0GM010.SY2CLRID = "00 "; /* color id*/
      end
      if (FB0GM010.XDMCD == " ") /* no dimension code*/
        FB0GM010.XDMCD = "00"; /* dimension code*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if report selection code not equal '1' '2' '3' or ' '*/
   /* display error message*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.FB0GMRSL != "1"
   && FB0GM010.FB0GMRSL != "2"
   && FB0GM010.FB0GMRSL != "3"
   && FB0GM010.FB0GMRSL != " ")
    FB0GM010.XXXMODID = "400"; /* module identification*/
    set FB0GM010.FB0GMRSL cursor, bold; /* set cursor position*/
    converseLib.validationFailed(80); /* 'Report selection invalid'*/
    exit stack;
  end

  if (FB0GM010.FB0GMRSL == " " /* no report selected*/
   && FB0GM010.SY1STNBR == " ") /* no style number entered*/
    FB0GM010.SY1STYNM = " "; /* style description*/
    FB0GM010.SY2CLRAB = " "; /* color description*/
    FB0GM010.SY2CLRID = " "; /* color id*/
    FB0GM010.XDMCD = " "; /* dimension code*/
    FB0GM010.FB4CRVNB = " "; /* curve number*/
    set FB0GM010.SY1STNBR cursor; /* set cursor position*/
    exit stack; /* return to display map*/
  end

   /* ------------------------------------------------------------*/
   /* if report selection code equal '1' or '2'*/
       /* ensure style number is present*/
       /* if curve number entered, display error message*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.FB0GMRSL == "1" /* report selection 1*/
   || FB0GM010.FB0GMRSL == "2") /* report selection 2*/
    if (FB0GM010.SY1STNBR == " ") /* style number missing*/
      FB0GM010.XXXMODID = "400"; /* module identification*/
      set FB0GM010.SY1STNBR cursor, bold; /* set cursor position*/
      converseLib.validationFailed(81); /* 'Style number not entered'*/
      exit stack;
    end
    if (FB0GM010.FB4CRVNB != 0) /* curve number present*/
      FB0GM010.XXXMODID = "400"; /* module identification*/
      set FB0GM010.FB4CRVNB cursor, bold; /* set cursor position*/
      converseLib.validationFailed(82); /* 'Curve number invalid'*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* if report selection code equal '3'*/
       /* if product passed, obtain curve number*/
       /* ensure style number is present*/
       /* if curve number missing, display error message*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.FB0GMRSL == "3") /* report selection 3*/
    if (FB0GW00.FB0GWSPR == "P") /* product passed*/
      if (FB0GM010.FB4CRVNB == 0) /* no curve number entered*/
        FB0G410(); /* obtain curve data for product*/
        return;
      end
    end
    if (FB0GM010.SY1STNBR == " ") /* style number missing*/
      FB0GM010.XXXMODID = "400"; /* module identification*/
      set FB0GM010.SY1STNBR cursor, bold; /* set cursor position*/
      converseLib.validationFailed(81); /* 'Style number not entered'*/
      exit stack;
    end
    if (FB0GM010.FB4CRVNB == 0) /* curve number missing*/
      FB0GM010.XXXMODID = "400"; /* module identification*/
      set FB0GM010.FB4CRVNB cursor, bold; /* set cursor position*/
      converseLib.validationFailed(83); /* 'Curve number not entered'*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* obtain product descriptions*/
   /* ------------------------------------------------------------*/

  FB0G420(); /* obtain product descriptions*/

   /* ------------------------------------------------------------*/
   /* verify curve data*/
   /* ------------------------------------------------------------*/

  FB0G430(); /* verify curve data*/


end // end FB0G400

// obtain curve data
Function FB0G410()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FB4REC empty; /* clear row storage area*/
  FB0GW00.FB0GWDCF = "N"; /* initialize switch*/

   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/

  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* internal seq number*/
  FB4REC.XGPCD = FBWREC.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FBWREC.SY2CLRID; /* color*/
  FB4REC.XDMCD = FBWREC.XDMCD; /* dimension*/
  FB4REC.XQACD = FBWREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBWREC.PC2INSEG; /* spec difference code*/
  FB4REC.XSACD = FBWREC.XSACD; /* shade code*/
  FB4REC.XPGCD = FBWREC.XPGCD; /* packaging type code*/
  FB4REC.XUMCD = FBWREC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* Select set vcurve01 cursor*/
   /* ------------------------------------------------------------*/

  FB0G411(); /* Select set vcurve01 cursor*/

   /* ------------------------------------------------------------*/
   /* Select next vcurve01 row*/
   /* ------------------------------------------------------------*/

  FB0GW00.FB0GWIXM = 0; /* initialize index*/

  while (FB0GW00.FB0GWDCF != "Y") /* until end of vcurve data*/
    FB0G412(); /* Fetch next vcurve01 rows*/
  end

   /* ------------------------------------------------------------*/
   /* close vcurve01 cursor*/
   /* ------------------------------------------------------------*/

  FB0G413(); /* close vcurve01 cursor*/

   /* ------------------------------------------------------------*/
   /* Verify curve data retrieved and accurate*/
   /* ------------------------------------------------------------*/

  if (FB0GW00.FB0GWIXM <= 0) /* no vcurve01 rows found*/
    FB0GM010.XXXMODID = "410"; /* module identification*/
    set FB0GM010.SY1STNBR cursor, bold; /* set cursor bright*/
    set FB0GM010.SY2CLRID bold; /* set bright*/
    set FB0GM010.XDMCD bold; /* set bright*/
    converseLib.validationFailed(18); /* 'No data to display'*/
    exit stack; /* Return to flow*/
  end


end // end FB0G410

// select set curve table cursor
Function FB0G411()
  FB0GW00.FB0GWDCF = "N"; /* end of vcurve01 flag*/
   /* ------------------------------------------------------------*/
   /* select set the vcurve01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("S1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GW00.FB0GWIXM = 0;

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the*/
   /* user. Otherwise, indicate a system error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "411"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G411

// get next row curve table
Function FB0G412()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 rows. Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("N1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GW00.FB0GWIXM = FB0GW00.FB0GWIXM + 1; /* increment index*/

      FB0GM010.FB4CRVNB = FB4REC.FB4CRVNB; /* curve number*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FB0GW00.FB0GWDCF = "Y"; /* indicate end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "412"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G412

// close curve table cursor
Function FB0G413()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("C1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "413"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G413

// Obtain product descriptions
Function FB0G420()
   /* ------------------------------------------------------------*/
   /* obtain product descriptions*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = FB0GW00.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW00.SY1STNBR = FB0GM010.SY1STNBR; /* save style number*/
  PG2REC.SY2CLRID = FB0GM010.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FB0GM010.XDMCD; /* dimension code*/

  XSPG202();

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color desc*/
      FB0GM010.SY1STYNM = PG2REC.SY1STYNM; /* style name*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0GM010.SY2CLRAB = "UNKNOWN "; /* color desc*/
        FB0GM010.SY1STYNM = "UNKNOWN "; /* style name*/
      end
    end
  end


end // end FB0G420

// obtain curve data
Function FB0G430()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FB4REC empty; /* clear row storage area*/
  FB0GW00.FB0GWDCF = "N"; /* initialize switch*/
  FB0GW00.FB0GWCNE = "N"; /* initialize switch*/
  FB0GW00.FB0GWSCE = "N"; /* initialize switch*/

   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/

  FB4REC.FB1INSEQ = -1; /* wildcard internal seq number*/
  FB4REC.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB4REC.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB4REC.XQACD = "01"; /* quality code*/
  FB4REC.PC2INSEG = "000"; /* spec difference code*/
  FB4REC.XSACD = "000"; /* shade code*/
  FB4REC.XPGCD = "00"; /* packaging type code*/
  FB4REC.XUMCD = PG2REC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* Select set vcurve01 cursor*/
   /* ------------------------------------------------------------*/

  FB0G431(); /* Select set vcurve01 cursor*/

   /* ------------------------------------------------------------*/
   /* Select next vcurve01 row*/
   /* ------------------------------------------------------------*/

  FB0GW00.FB0GWIXM = 0; /* initialize index*/

  while (FB0GW00.FB0GWDCF != "Y") /* until end of vcurve data*/
    FB0G432(); /* Fetch next vcurve01 rows*/
  end

   /* ------------------------------------------------------------*/
   /* close vcurve01 cursor*/
   /* ------------------------------------------------------------*/

  FB0G433(); /* close vcurve01 cursor*/

   /* ------------------------------------------------------------*/
   /* Verify curve data retrieved and accurate*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.FB0GMRSL == "1") /* report selection 1*/
    if (FB0GW00.FB0GWIXM <= 0) /* no vcurve01 rows found*/
      FB0GM010.XXXMODID = "430"; /* module identification*/
      set FB0GM010.SY1STNBR cursor, bold; /* set cursor bright*/
      set FB0GM010.SY2CLRID bold; /* set bright*/
      set FB0GM010.XDMCD bold; /* set bright*/
      converseLib.validationFailed(18); /* 'No data to display'*/
      exit stack; /* Return to flow*/
    end
  end


  if (FB0GM010.FB0GMRSL == "2") /* report selection 2*/
    if (FB0GW00.FB0GWSCE == "Y") /* flag equal 'y'*/
       /* next sentence*/
    else
      FB0GM010.XXXMODID = "430"; /* module identification*/
      set FB0GM010.SY1STNBR cursor, bold; /* set cursor bright*/
      set FB0GM010.SY2CLRID bold; /* set bright*/
      set FB0GM010.XDMCD bold; /* set bright*/
      converseLib.validationFailed(84); /* 'No standard curve available'*/
      exit stack; /* Return to flow*/
    end
  end

  if (FB0GM010.FB0GMRSL == "3") /* report selection 3*/
    if (FB0GW00.FB0GWCNE == "Y") /* equal curve number found*/
       /* next sentence*/
    else
      FB0GM010.XXXMODID = "430"; /* module identification*/
      set FB0GM010.SY1STNBR cursor, bold; /* set cursor bright*/
      set FB0GM010.SY2CLRID bold; /* set bright*/
      set FB0GM010.XDMCD bold; /* set bright*/
      converseLib.validationFailed(85); /* 'No curve available'*/
      exit stack; /* Return to flow*/
    end
  end


end // end FB0G430

// select set curve table cursor
Function FB0G431()
  FB0GW00.FB0GWDCF = "N"; /* end of vcurve01 flag*/
   /* ------------------------------------------------------------*/
   /* select set the vcurve01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("S1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GW00.FB0GWIXM = 0;

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the*/
   /* user. Otherwise, indicate a system error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "431"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G431

// get next row curve table
Function FB0G432()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 rows. Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("N1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0GW00.FB0GWIXM = FB0GW00.FB0GWIXM + 1; /* increment index*/

      /* ------------------------------------------------------------*/
       /* If Report 1 or 2 selected, indicate end of cursor*/
      /* ------------------------------------------------------------*/
      if (FB0GM010.FB0GMRSL == "1") /* report 1 selected*/

        FB0GW00.FB0GWDCF = "Y"; /* indicate end of cursor*/
      end

      /* ------------------------------------------------------------*/
       /* If Report 2 selected, determine if standard curve exists*/
      /* ------------------------------------------------------------*/
      if (FB0GM010.FB0GMRSL == "2") /* report 2 selected*/

        if (FB4REC.FB4STDFL == "Y") /* standard curve exists*/
          FB0GW00.FB0GWSCE = "Y"; /* indicate standard curve*/
        end
      end

      /* ------------------------------------------------------------*/
       /* If Report 3 selected, determine if curve numbers match*/
      /* ------------------------------------------------------------*/
      if (FB0GM010.FB0GMRSL == "3") /* report 3 selected*/

        if (FB4REC.FB4CRVNB == FB0GM010.FB4CRVNB) /* curve number matches*/
          FB0GW00.FB0GWCNE = "Y"; /* indicate curve numbers equal*/
        end
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FB0GW00.FB0GWDCF = "Y"; /* indicate end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "432"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(19); /* 'resources unavailable'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(01); /* 'error - please nofity programming'*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G432

// close curve table cursor
Function FB0G433()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("C1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0GM010.XXXMODID = "433"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0GM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0G433

// Process valid input request
Function FB0G500()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  TA3REC.TA3OPTN = "ALLFLDS";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode != "00000000") /* Call successful*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end



   /* ------------------------------------------------------------*/
   /* Process valid input request*/
   /* ------------------------------------------------------------*/

  if (FB0GM010.FB0GMRSL == "1") /* report selection 1*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0G511(); /* format production jcl-opt1*/
    else
      FB0G510(); /* format development jcl-opt1*/
    end
  end




  if (FB0GM010.FB0GMRSL == "2") /* report selection 2*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0G521(); /* format production jcl-opt2*/
    else
      FB0G520(); /* format development jcl-opt2*/
    end
  end




  if (FB0GM010.FB0GMRSL == "3") /* report selection 3*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0G531(); /* format production jcl-opt3*/
    else
      FB0G530(); /* format development jcl-opt3*/
    end
  end


end // end FB0G500

// Process Report Request 1
Function FB0G510()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* execute statement*/
  FB0GW01.FB0GWPGM = "FB1011,"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT01.TARTYPE[FB0GWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT01.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (FB0GT01.TARTYPE[FB0GWIXT] == "Z") /* Override statement*/

          /* ------------------------------------------------------------*/
           /* Format Override statement   (test only)*/
          /* ------------------------------------------------------------*/

          FB0GW01.FB0GWTYP = "Z"; /* Type*/
          TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWOVR; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FB0GT01.TARJCL[FB0GWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0GT01.TARTYPE[FB0GWIXT]; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT01.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G510

// Process Production rpt req 1
Function FB0G511()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* execute statement*/
  FB0GW01.FB0GWPGM = "FB1011"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT04.TARTYPE[FB0GWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT04.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (FB0GT04.TARTYPE[FB0GWIXT] == "Z") /* Override statement*/

          /* ------------------------------------------------------------*/
           /* Format Override statement   (test only)*/
          /* ------------------------------------------------------------*/

          FB0GW01.FB0GWTYP = "Z"; /* Type*/
          TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWOVR; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        else
          /* ------------------------------------------------------------*/
           /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FB0GT04.TARJCL[FB0GWIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FB0GT04.TARTYPE[FB0GWIXT]; /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT04.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G511

// Process Report Request 2
Function FB0G520()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* Execute statement*/
  FB0GW01.FB0GWPGM = "FB1021,"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT02.TARTYPE[FB0GWIXT] == "E") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT02.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB0GT02.TARJCL[FB0GWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GT02.TARTYPE[FB0GWIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT02.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G520

// Process Production rpt req 2
Function FB0G521()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* Execute statement*/
  FB0GW01.FB0GWPGM = "FB1021"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT05.TARTYPE[FB0GWIXT] == "E") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT05.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB0GT05.TARJCL[FB0GWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GT05.TARTYPE[FB0GWIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT05.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G521

// Process Report Request 3
Function FB0G530()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/
  FB0GW01.FB0GWCRV = FB0GM010.FB4CRVNB; /* curve number*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* Execute statement*/
  FB0GW01.FB0GWPGM = "FB1061,"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT03.TARTYPE[FB0GWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT03.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB0GT03.TARJCL[FB0GWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GT03.TARTYPE[FB0GWIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT03.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G530

// Process Production rpt req 3
Function FB0G531()
   /* ------------------------------------------------------------*/
   /* Load product key into JCL statement*/
   /* ------------------------------------------------------------*/

  FB0GW01.XGPCD = FB0GW00.XGPCD; /* product group code*/
  FB0GW01.SY1STNBR = FB0GM010.SY1STNBR; /* style number*/
  FB0GW01.SY2CLRID = FB0GM010.SY2CLRID; /* color*/
  FB0GW01.XDMCD = FB0GM010.XDMCD; /* dimension*/
  FB0GW01.XQACD = "01"; /* quality code*/
  FB0GW01.PC2INSEG = "000"; /* spec difference code*/
  FB0GW01.XSACD = "000"; /* shade code*/
  FB0GW01.XPGCD = "00"; /* packaging type code*/
  FB0GW01.XUMCD = PG2REC.XUMCD; /* unit of measure code*/
  FB0GW01.FB0GWCRV = FB0GM010.FB4CRVNB; /* curve number*/

   /* ------------------------------------------------------------*/
   /* create all other appropriate jcl*/
   /* ------------------------------------------------------------*/

  FB0GW01.FB0GWEX1 = "//S0010   EXEC "; /* Execute statement*/
  FB0GW01.FB0GWPGM = "FB1061"; /* Program name*/


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  FB0GW00.FB0GWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  TA6REC.TA6MSGSW = "N"; /* No on-line notify message*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0GW00.FB0GWIXT > 0) /* Until end of table*/

    if (FB0GT06.TARTYPE[FB0GWIXT] == "E") /* Execute statement*/

      /* ------------------------------------------------------------*/
       /* Format Execute statement*/
      /* ------------------------------------------------------------*/

      FB0GW01.FB0GWTYP = "E"; /* Type*/
      TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCE; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    else

      if (FB0GT06.TARTYPE[FB0GWIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        FB0GW01.FB0GWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = FB0GW01.FB0GWJCP; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GW01.FB0GWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FB0GT06.TARJCL[FB0GWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FB0GT06.TARTYPE[FB0GWIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0GT06.TARJCL[FB0GWIXT] == "/*EOF") /* End of table*/

      FB0GW00.FB0GWIXT = 0; /* Indicate end of table*/

    else

      FB0GW00.FB0GWIXT = FB0GW00.FB0GWIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  FB0GS01(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    converseLib.validationFailed(76); /* Selections queued to print*/

  else

    converseLib.validationFailed(87); /* Error encountered with print request*/

    exit stack;

  end


end // end FB0G531

// Submit the JCL for execution
Function FB0GS01()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    XXXMODID = "S01"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end FB0GS01

//*** RECORD=FB0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0GW00 type basicRecord
  10 FB0GWFST FB0GWFST ; 
  10 FB0GWSWR FB0GWSWR ; 
  10 FB0GWSPR FB0GWSPR ; 
  10 FB0GWSDR FB0GWSDR ; 
  10 FB0GWRNA FB0GWRNA ; 
  10 FB0GWSUB FB0GWSUB ; 
  10 XGPCD XGPCD ; 
  10 FB0GWIX1 FB0GWIX1 ; 
  10 FB0GWIX2 FB0GWIX2 ; 
  10 FB0GWIXM FB0GWIXM ; 
  10 FB0GWIXT FB0GWIXT ; 
  10 FB1INSEQ FB1INSEQ ; 
  10 FB0GWDCF FB0GWDCF ; 
  10 FB0GWCNE FB0GWCNE ; 
  10 FB0GWSCE FB0GWSCE ; 
  10 SY1STNBR SY1STNBR ; 
end // end FB0GW00

//*** RECORD=FB0GW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0GW01 type basicRecord
  10 FB0GWJCP FB0GWJCP ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 FB0GWCRV FB0GWCRV ; 
    15 * char(51) ; 
  10 FB0GWJCE FB0GWJCE ; 
    15 FB0GWEX1 FB0GWEX1 ; 
    15 FB0GWPGM FB0GWPGM ; 
    15 * char(58) ; 
  10 FB0GWOVR FB0GWOVR ; 
    15 FB0GWOV1 FB0GWOV1 ; 
    15 FB0GWOV2 FB0GWOV2 ; 
    15 * char(30) ; 
  10 FB0GWTYP FB0GWTYP ; 
  10 FB0GWSLC FB0GWSLC [98] ; 
end // end FB0GW01

// flag for matching curves
DataItem FB0GWCNE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curve number
DataItem FB0GWCRV num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag for vcurve01
DataItem FB0GWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem FB0GWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FB0GWFST char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index one for stored fields
DataItem FB0GWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FB0GWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FB0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem FB0GWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Execute statement
DataItem FB0GWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem FB0GWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0GWOV1 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0GWOV2 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Override statement
DataItem FB0GWOVR char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program name
DataItem FB0GWPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FB0GWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// standard curve flag
DataItem FB0GWSCE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data requested switch
DataItem FB0GWSDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection field
DataItem FB0GWSLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing switch
DataItem FB0GWSPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Submit job switch
DataItem FB0GWSUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem FB0GWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem FB0GWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

