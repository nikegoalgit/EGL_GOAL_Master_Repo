package fb07;

import corpcom2.XX0XW01;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XFRCD;
import corpx2.XPCCD;
import corpx2.XPGCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB7BUYST;
import fb.common.FB7QTB;
import fb.common.FB7REC;
import fb.common.FB7RTADT;
import fb.common.FB7RTAPC;
import fb.common.FB8BUYDT;
import fb.common.FB8FTQTB;
import fb.common.FB9REC;
import fb.common.FBDBTCD;
import fb.common.FBEREC;
import fb.common.FBFREC;
import fb.common.FBKRDFL;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXFRMDT;
import fb.common.FBXREC;
import fb.common.FBXTODT;
import ff.common.FF00ENU;
import fy.common.FY1FCTYC;
import fy.common.FY2MFGPC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pa.common.PA1OANBR;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG1REC;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FB07 ****
// This program is part of the footwear buy system.
// This application provides the capability of moving direct
// ship qtys by size from one rta date to another rta date
// for a specific customer and product.  Product, customer,
// 'from' and 'to' rta dates are selected in FB0W and passed
// to this application through the commarea.  The 'to' rta
// date may also be entered by the user.
// 
// The application selects the size information from the
// rta/size/region table (dfbuy.vrtqtb01) and stores the data
// in temporary storage.  After the data is stored in temporary
// storage, the appliation retrieves and formats the data from
// temporary storage and displays the map.  The user has the
// option of moving any size quantities from the 'from' rta
// date to the 'to' rta date size quantities.  After all
// desired changes have been make, the user presses enter.
// The applicaiton then makes the desired adjustments,
// recalculates the total size quantities for each rta date and
// redisplays the map.  Whenever an update occurs, the
// rta/size/region quantity to buy and merged quantity to buy
// table are updated.
// 
// PF10 and PF11 are provided to shift left and right to view
// all sizes.  In addition, the number of sizes to be scrolled
// may be entered.  The default is ten.
// 
// The user may exit to any allowed application via fast path
// or PF keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/23/91   jalle1   Created.
// 03/05/91   jalle1   fixed fast path problem.
// 06/11/91   jalle1   removed fblrec from record list.
// 10/09/91   jalle1   oct '91 tbl chgs - fix w03 and w04 to
//                     include new dfbuy.vmfbuy01 fields xfrcd,
//                     fb-late-bk-fl, and fb-late-bk-fl-mdt.
// 02/20/92   pmainw   Support multiple S.O. for an xref.
// 09/17/93   ldeluh   Fix io-mod calls for csp v4.
// 12/03/93   pmainw   Handle twenty product lines on vfsctl01.
// 01/27/95   jalle1   Changed S.O. to 9.3 digits.
// 02/10/95   jalle1   Darken S.O. when = 0.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  12/16/97 WSQUIR MODIFICATIONS MADE TO: FB07M010.
// *********************
Program FB07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB07W00 FB07W00; // record
  FB07W01 FB07W01; // record
  FB07W02 FB07W02; // record
  FB07W03 FB07W03; // record
  FB07W04 FB07W04; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBEREC FBEREC; // record
  FBFREC FBFREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB07M.FB07M010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB07001;
    FB07001: FB07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the RTA maintenance - size qty moves*/
     /* ------------------------------------------------------------*/

    goto FB07002; /* Converse factory size qty moves*/


    FB07002: FB07002();
    goto FB07002;
  end // end main
end // end FB07

// special FB07 initialization
Function FB07001()

   /* ---------------------------------------------------------*/
   /* If entry is from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB")
    set FBWREC empty;
    set FBXREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
  else
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end


   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FB07W00 empty; /* Working storage record*/
  set FB07W01 empty; /* dfbuy.vrtqtb01 'from' storage*/
  set FB07W02 empty; /* dfbuy.vrtqtb01 'to' storage*/
  set FB07W03 empty; /* dfbuy.vmfbuy01 'from' storage*/
  set FB07W04 empty; /* dfbuy.vmfbuy01 'to' storage*/

  set FB07M010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/

   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to display storage--and set the obtain data flag*/
   /* to yes.*/
   /* ---------------------------------------------------------*/

  if (FBXREC.SY1STNBR[1] != " ") /* Data has been passed*/
    FB07W00.SY1STNBR = FBXREC.SY1STNBR[1];
    FB07W00.SY2CLRID = FBXREC.SY2CLRID[1];
    FB07W00.XDMCD = FBXREC.XDMCD[1];
    FB07W00.XQACD = FBXREC.XQACD[1];
    FB07W00.PC2INSEG = FBXREC.PC2INSEG[1];
    FB07W00.XPGCD = FBXREC.XPGCD[1];
    FB07W00.XUMCD = FBXREC.XUMCD[1];
    FB07W00.XWHCD = FBXREC.XWHCD1;
    FB07W00.PC2CUXID = FBXREC.PC2CUXID;

    FB07W00.OP1PARTN = FBXREC.OP1PARTN; /* OP-ORD-PART-CHAR*/
    FB07W00.OP1CUOID = FBXREC.OP1CUOID; /* OP-CUST-ORD-ID*/
    FB07W00.OP1NORID = FBXREC.OP1NORID; /* OP-NIKE-ORD-ID*/
    FB07W00.FB8BUYDT = FBXREC.FB8BUYDT;
    FB07W00.FBXFRMDT = FBXREC.FBXFRMDT;
    FB07W00.FBXTODT = FBXREC.FBXTODT;
    FB07W00.FB07WFPF = "N"; /* set fast path flag to 'n'*/
  else
    FB07M010.SY2CLRID = "00 ";
    FB07M010.XDMCD = "00";
    FB07M010.XXXPRCNM = "FB07001";
    converseLib.validationFailed(327); /* can't fastpath to application*/
    FB07W00.FB07WFPF = "Y"; /* set fast path flag to 'y'*/

  end

   /* ---------------------------------------------------------*/
   /* if fb-buy-dt was not passed, get it from dfbuy.vfmctl01.*/
   /* ---------------------------------------------------------*/

  if (FB07W00.FB8BUYDT == 0) /* buy date not loaded*/

    FB07S01(); /* select control row*/
    FB07W00.FB8BUYDT = FB9REC.FB8BUYDT; /* save buy dt*/

  end

   /* ---------------------------------------------------------*/
   /* set defaults and initial flag values.*/
   /* ---------------------------------------------------------*/

  FB07W00.FB07MSZS = 10; /* Default size screen scroll*/
  FB07W00.FB07WCSI = 1; /* current size index*/
  FB07W00.FB07WFSI = 1; /* first size index*/
  FB07W00.FB07WLSI = 40; /* last size index*/
  if (converseVar.validationMsgNum == 0) /* no errors so far . . .*/
    FB07W00.FB07WFTF = "Y"; /* set first time thru flag*/
    FB07W00.FB07WRDF = "Y"; /* set request for data switch*/
    FB07W00.FB07WSWF = "Y"; /* set format map switch*/
  else
    FB07W00.FB07WFTF = "N"; /* set first time thru flag*/
    FB07W00.FB07WRDF = "N"; /* set request for data switch*/
    FB07W00.FB07WSWF = "N"; /* set format map switch*/
  end


end // end FB07001

// main process to display map
Function FB07002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FB07100(); /* Obtain data to display*/

  FB07200(); /* Format and display the map*/

  FB07300(); /* Check attention identifier*/

  FB07400(); /* Reset fields to normal intensity*/

  FB07500(); /* Verify the entered data*/

  FB07600(); /* Process valid input request*/

end // end FB07002

// Obtain data to display
Function FB07100()
   /* ------------------------------------------------------------*/
   /* If fast path flag = 'y', don't obtain data to display.*/
   /* ------------------------------------------------------------*/

  if (FB07W00.FB07WFPF == "Y") /* fast path*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If this is the first time through, get the product descs;*/
   /* get the factory list; get autoload flag for this scheduler.*/
   /* ------------------------------------------------------------*/

  if (FB07W00.FB07WFTF == "Y") /* if first time through*/
    FB07110(); /* do first time thru stuff*/
  end

   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FB07W00.FB07WRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end


  set FB07W01 empty; /* init dfbuy.vrtqtb01 'from' record*/
  set FB07W02 empty; /* init dfbuy.vrtqtb01 'to' record*/
  set FB07W03 empty; /* init dfbuy.vmfbuy01 'from' record*/
  set FB07W04 empty; /* init dfbuy.vmfbuy01 'to' record*/


   /* ------------------------------------------------------------*/
   /* If 'to' rta date not zero, reformat for db2 statements*/
   /* ------------------------------------------------------------*/

  if (FB07W00.FB07MTRD != 0) /* if 'to' rta entered*/
    FB07W00.FB07WDAT = FB07W00.FB07MTRD;
    FB07W00.FB07WKLZ = 0; /* init leading zero*/
    if (FB07W00.FB07WYY < 91)
      FB07W00.FB07WKCC = 20; /* move 20 to century*/
    else
      FB07W00.FB07WKCC = 19; /* move 19 to century*/
    end
    FB07W00.FB07WKYY = FB07W00.FB07WYY; /* move year*/
    FB07W00.FB07WKMM = FB07W00.FB07WMM; /* move month*/
    FB07W00.FB07WKDD = FB07W00.FB07WDD; /* move day*/

    FB07W00.FBXTODT = FB07W00.FB07WKDT; /* 'to' date db2 format*/

  end


   /* ------------------------------------------------------------*/
   /* obtain the 'from' factory row from DFBUY.VRTQTB01.*/
   /* ------------------------------------------------------------*/

  set FBFREC empty; /* initialize dfbuy.vrtqtb01 record*/

  FBFREC.SY1STNBR = FB07W00.SY1STNBR; /* style*/
  FBFREC.SY2CLRID = FB07W00.SY2CLRID; /* color*/
  FBFREC.XDMCD = FB07W00.XDMCD; /* dimension*/
  FBFREC.FB8BUYDT = FB07W00.FB8BUYDT; /* buy date*/
  FBFREC.XWHCD = "  "; /* whse*/
  FBFREC.PC2CUXID = FB07W00.PC2CUXID; /* customer xref*/
  FBFREC.OP1PARTN = FB07W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB07W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB07W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB07W00.FBXFRMDT; /* from rta date*/

  FB07120(); /* get 'from' dfbuy.vrtqtb01 record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
    FB07W01.FB07WGRP = FBFREC.FBFGROUP; /* save record*/
  else
    converseLib.validationFailed(18); /* request processed, no data found*/
    FB07M010.XXXPRCNM = "FB07100"; /* process name*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* obtain the 'to' factory row from DFBUY.VRTQTB01.*/
   /* ------------------------------------------------------------*/


  set FBFREC empty; /* initialize dfbuy.vrtqtb01 record*/

  FBFREC.SY1STNBR = FB07W00.SY1STNBR; /* style*/
  FBFREC.SY2CLRID = FB07W00.SY2CLRID; /* color*/
  FBFREC.XDMCD = FB07W00.XDMCD; /* dimension*/
  FBFREC.FB8BUYDT = FB07W00.FB8BUYDT; /* buy date*/
  FBFREC.XWHCD = "  "; /* whse*/
  FBFREC.PC2CUXID = FB07W00.PC2CUXID; /* customer xref*/
  FBFREC.OP1PARTN = FB07W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBFREC.OP1CUOID = FB07W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBFREC.OP1NORID = FB07W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBFREC.FB7RTADT = FB07W00.FBXTODT; /* to rta date*/

  FB07120(); /* get 'to' dfbuy.vrtqtb01 record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
    FB07W00.FB07WNDF = "N"; /* new date flag*/
    FB07W02.FB07WGRP = FBFREC.FBFGROUP; /* save record*/
  else
    FB07W00.FB07WNDF = "Y"; /* new date flag*/
  end



   /* ------------------------------------------------------------*/
   /* obtain the 'from' factory rows from DFBUY.VMFBUY01.*/
   /* ------------------------------------------------------------*/

   /* select set cursor for DFBUY.VMFBUY01.*/


  set FB7REC empty; /* initialize dfbuy.vmfbuy01 record*/

  FB7REC.SY1STNBR = FB07W00.SY1STNBR; /* style*/
  FB7REC.SY2CLRID = FB07W00.SY2CLRID; /* color*/
  FB7REC.XDMCD = FB07W00.XDMCD; /* dimension*/
  FB7REC.FB8BUYDT = FB07W00.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = "  "; /* whse*/
  FB7REC.PC2CUXID = FB07W00.PC2CUXID; /* customer xref*/
  FB7REC.OP1PARTN = FB07W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB07W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB07W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB07W00.FBXFRMDT; /* from rta date*/

  FB07130(); /* select dfbuy.vmfbuy01 'from' cursor*/


   /* fetch rows to fill 'from' records for dfbuy.vmfbuy01*/


  FB07W00.FB07WECF = "N"; /* end of cursor flag*/
  move " " to FB07W00.FB07WMRF[1] for all; /* mfbuy record flag array*/
  FB07W00.FB07WIX1 = 1; /* initialize index*/

  while (FB07W00.FB07WECF == "N" /* while not end of cursor*/
   && FB07W00.FB07WIX1 <= 5) /* and not max # from records*/

    FB07140(); /* fetch next dfbuy.vmfbuy01 record*/

    if (FB07W00.FB07WECF == "N"              /* if not end of cursor*/
                                             
     && FB07M010.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB07M010.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB07M010.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      FB07W03.FB07WFMR[FB07WIX1] = FB7REC.FB7GROUP; /* save*/
      if (FB07W00.FB07WIX1 == 1) /* if first record*/
        FB07W00.FB07WMRF[FB07WIX1] = "Y"; /* move 'y' to 1st locat.*/
      else
        FB07W00.FB07WMRF[FB07WIX1] = "N";
      end
      FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/
    end
  end

  if (FB07W00.FB07WIX1 > 5) /* if too many rows*/
    set FB07M010.FB07MFRD bold; /* highlight from rta date*/
    converseLib.validationFailed(395); /* to many mfbuy rows*/
    FB07W00.FB07WTMF = "Y"; /* too many rows flag*/
    return;
  else
    FB07W00.FB07WTMF = "N"; /* too many rows flag*/
  end


   /* close dfbuy.vmfbuy01 cursor*/


  FB07150(); /* close dfbuy.vmfbuy01 cursor*/





   /* ------------------------------------------------------------*/
   /* obtain the 'to' factory rows from DFBUY.VMFBUY01.*/
   /* ------------------------------------------------------------*/

   /* select set cursor for DFBUY.VMFBUY01.*/


  set FB7REC empty; /* initialize dfbuy.vmfbuy01 record*/

  FB7REC.SY1STNBR = FB07W00.SY1STNBR; /* style*/
  FB7REC.SY2CLRID = FB07W00.SY2CLRID; /* color*/
  FB7REC.XDMCD = FB07W00.XDMCD; /* dimension*/
  FB7REC.FB8BUYDT = FB07W00.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = "  "; /* whse*/
  FB7REC.PC2CUXID = FB07W00.PC2CUXID; /* customer xref*/
  FB7REC.OP1PARTN = FB07W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB7REC.OP1CUOID = FB07W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB07W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.FB7RTADT = FB07W00.FBXTODT; /* from rta date*/

  FB07130(); /* select dfbuy.vmfbuy01 'to' cursor*/


   /* fetch rows to fill 'from' records for dfbuy.vmfbuy01*/


  FB07W00.FB07WECF = "N"; /* end of cursor flag*/
  FB07W00.FB07WIX1 = 1; /* initialize index*/

  while (FB07W00.FB07WECF == "N" /* while not end of cursor*/
   && FB07W00.FB07WIX1 <= 5) /* and not max # from records*/

    FB07140(); /* fetch next dfbuy.vmfbuy01 record*/

    if (FB07W00.FB07WECF == "N"              /* if not end of cursor*/
                                             
     && FB07M010.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
     && FB07M010.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
     && FB07M010.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
      FB07W04.FB07WTMR[FB07WIX1] = FB7REC.FB7GROUP; /* save*/
      FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/
    end
  end

  if (FB07W00.FB07WIX1 > 5) /* if too many rows*/
    set FB07M010.FB07MTRD bold; /* highlight to rta date*/
    converseLib.validationFailed(395); /* to many mfbuy rows*/
    FB07W00.FB07WTMF = "Y"; /* too many rows flag*/
    return;
  else
    FB07W00.FB07WTMF = "N"; /* too many rows flag*/
  end


   /* close dfbuy.vmfbuy01 cursor*/


  FB07150(); /* close dfbuy.vmfbuy01 cursor*/





   /* ------------------------------------------------------------*/
   /* Move 'from' and 'to' qtys to working storage arrays.*/
   /* Calculate qty totals.  All qty adjustments will be made to*/
   /* these fields - qtys in w01, w02, w03, and w04 will not be*/
   /* changed until the db2 tables are updated.*/
   /* Also determine which sizes have data.*/
   /* ------------------------------------------------------------*/

  move 0 to FB07W00.FB07MTAJ[1] for all; /* adjustments = 0 right now*/
  move FB07W01.FB7QTB to FB07W00.FB07MFCQ[1] for all; /* from current qty*/
  move FB07W01.FB7QTB to FB07W00.FB07MFAQ[1] for all; /* from adj qty*/
  move FB07W02.FB7QTB to FB07W00.FB07MTCQ[1] for all; /* to current qty*/
  move FB07W02.FB7QTB to FB07W00.FB07MTAQ[1] for all; /* to adj qty*/

  FB07W00.FB07MFCT = 0; /* init from cur qty total*/
  FB07W00.FB07MFAT = 0; /* init from adj qty total*/
  FB07W00.FB07MTCT = 0; /* init to cur qty total*/
  FB07W00.FB07MTTA = 0; /* total adj = 0 too*/
  FB07W00.FB07MTAT = 0; /* init to cur qty total*/


  FB07W00.FB07WIX1 = 1; /* init index*/
  move "N" to FB07W00.FB07WZHD[1] for all; /* Init size has data array to no*/

  while (FB07W00.FB07WIX1 <= 40) /* for all sizes*/

    if (FB07W01.FB7QTB[FB07WIX1] != 0 /* 'from' size has data*/
     || FB07W02.FB7QTB[FB07WIX1] != 0) /* or 'to' size has data*/

      FB07W00.FB07WZHD[FB07WIX1] = "Y";

      FB07W00.FB07MFCT = FB07W00.FB07MFCT + FB07W01.FB7QTB[FB07WIX1];
      FB07W00.FB07MFAT = FB07W00.FB07MFAT + FB07W01.FB7QTB[FB07WIX1];
      FB07W00.FB07MTCT = FB07W00.FB07MTCT + FB07W02.FB7QTB[FB07WIX1];
      FB07W00.FB07MTAT = FB07W00.FB07MTAT + FB07W02.FB7QTB[FB07WIX1];

    end

    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/

  end

  FB07W00.FB07WTQT = FB07W00.FB07MFCT + FB07W00.FB07MTCT; /* total qty*/
  FB07W00.FB07WSRP = FB07W01.FB7RTAPC + FB07W02.FB7RTAPC; /* sum rta %*/


   /* ------------------------------------------------------------*/
   /* get size descriptions.*/
   /* ------------------------------------------------------------*/

  FB07160(); /* get size descs*/

   /* ------------------------------------------------------------*/
   /* Determine first and last sizes to be displayed on map.*/
   /* ------------------------------------------------------------*/

  FB07W00.FB07WFSI = 0; /* init 1st size index*/
  FB07W00.FB07WLSI = 0; /* init last size index*/


   /* find first size*/

  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 40) /* until end of sizes*/

    if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* if size has data*/
      FB07W00.FB07WFSI = FB07W00.FB07WIX1; /* first sz index*/
      FB07W00.FB07WIX1 = 41; /* get out while you can*/
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/

  end

   /* find last size*/

  FB07W00.FB07WIX1 = FB07W00.FB07WFSI; /* init index*/

  while (FB07W00.FB07WIX1 <= 40) /* until end of sizes*/

    if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* if size has data*/
      FB07W00.FB07WLSI = FB07W00.FB07WIX1; /* last sz index*/
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/

  end

   /* set current size index = first size index*/

  FB07W00.FB07WCSI = FB07W00.FB07WFSI;


  FB07W00.FB07WRDF = "N"; /* Data not requested*/
  FB07W00.FB07WSWF = "Y"; /* format the map switch*/



end // end FB07100

// obtain first time thru data
Function FB07110()
   /* ------------------------------------------------------------*/
   /* obtain style/color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* initialize style/color record*/

  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FB07W00.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = FB07W00.SY2CLRID; /* color*/
  PG2REC.XDMCD = FB07W00.XDMCD; /* dimension*/

  XSPG202(); /* obtain style color table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good fetch*/
    FB07W00.SY1SSTNM = PG2REC.SY1SSTNM; /* short sty nm*/
    FB07W00.SY2CLRAB = PG2REC.SY2CLRAB; /* color abbrev.*/
  else
    FB07W00.SY1SSTNM = "************";
    FB07W00.SY2CLRAB = "************";
  end

   /* ------------------------------------------------------------*/
   /* get autoload flag for user.  set flag if autoload flag = y*/
   /* to prevent any updates.*/
   /* ------------------------------------------------------------*/

  FB07W00.FB07WISF = "N"; /* init invalid scheduler flag*/

  FB07111(); /* obtain vsuser01 row*/

  if (FB07W00.FB07WISF != "Y") /* if still valid scheduler*/
    FB07112(); /* obtain vfsctl01 row*/
  end

  if (FB07W00.FB07WISF == "Y") /* if invalid scheduler*/
    converseLib.validationFailed(62); /* this scheduler can't to nothin*/
    FB07M010.XXXPRCNM = "FB07110";
  end


  FB07W00.FB07WFTF = "N"; /* set first time flag to 'n'*/


end // end FB07110

// obtain DPRODG.VSUSER01 row
Function FB07111()
   /* -------------------------------------------------*/
    /* Format key*/
   /* -------------------------------------------------*/

  set PG1REC empty;

  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/
  if (FBXREC.CAUSERID != " ")
    PG1REC.XXXUSER = FBXREC.CAUSERID; /* User id*/
  else
    PG1REC.XXXUSER = COMMAREA.CAUSERID; /* User id*/
  end

   /* -------------------------------------------------*/
    /* select row from dprodg.vsuser01*/
   /* -------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB07W00.FB07WISF = "Y"; /* set invalid scheduler flag*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07111"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSUSER01  ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07111";
  exit stack;


end // end FB07111

// obtain DFBUY.VFSCTL01 row
Function FB07112()
   /* -------------------------------------------------*/
   /* Initialize record and format key.*/
   /* -------------------------------------------------*/

  set FBMREC empty;
  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;

   /* -------------------------------------------------*/
   /* select dfbuy.vfsctl01 row.*/
   /* -------------------------------------------------*/

  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      FB07W00.FB07WISF = "Y"; /* Invalid scheduler flag*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07112"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFSCTL01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.PG1SC4CD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07112";
  exit stack;


end // end FB07112

// Obtain Unique VRTQTB01 row
Function FB07120()

   /* ------------------------------------------------------------*/
   /* Obtain unique DFBUY.VRTQTB01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4620" ("S ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07120"; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN UNIQUE VRTQTB01 ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07120";
  exit stack;


end // end FB07120

// Select DFBUY.VMFBUY01 csr
Function FB07130()
   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VMFBUY01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07130"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DFBUY.VMFBUY01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07130";
  exit stack;


end // end FB07130

// Fetch DFBUY.VMFBUY01 csr
Function FB07140()
   /* ------------------------------------------------------------*/
   /* fetch next row from dfbuy.vmfbuy01.*/
   /* set end of cursor flag to 'y' when sqlcode = +100.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB07W00.FB07WECF = "Y"; /* end of cursor flag*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07140"; /* Process name*/
  TA1REC.TA1LOC = "FETCH DFBUY.VMFBUY01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07140";
  exit stack;

end // end FB07140

// Close DFBUY.VMFBUY01 csr
Function FB07150()
   /* ------------------------------------------------------------*/
   /* Close cursor for dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07150"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE DFBUY.VMFBUY01 CSR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07150";
  exit stack;

end // end FB07150

// obtain size descriptions
Function FB07160()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB07W00.SY1STNBR;
  PG3REC.SY2CLRID = FB07W00.SY2CLRID;
  PG3REC.XDMCD = FB07W00.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";
  PG3REC.PG3XDVCD = PG2REC.XDVCD1;

  XSPG301(); /* Get valid sizes*/

   /* ---------------------------------------------------------*/
   /* determine which fields have size descriptions.*/
   /* ---------------------------------------------------------*/

  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 40) /* for all sizes*/

    if (PG3REC.SY4IDDSC[FB07WIX1] != " ") /* if description*/
      FB07W00.FB07WZHD[FB07WIX1] = "Y";
    end

    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end


end // end FB07160

// Format and converse the map
Function FB07200()
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FB07W00.FB07WRDF == "Y"           /* obtain data failed*/
   || converseVar.validationMsgNum == 0 /* or no errors*/
   || converseVar.validationMsgNum == 98) /* press pf9 to update*/

    if (FB07W00.FB07WSWF == "Y") /* Map must be formatted*/
      FB07210(); /* Format the data on the map*/
      FB07W00.FB07WSWF = "N"; /* Map must be formatted fl*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Format the adjusted total and size scroll*/
   /* ------------------------------------------------------------*/

  FB07M010.FB07MTTA = FB07W00.FB07MTTA;


   /* ------------------------------------------------------------*/
   /* protect and set dark all invalid adjustment fields.*/
   /* also darken column headers.*/
   /* ------------------------------------------------------------*/

   /* skip all valid fields to find beginning of invalid fields*/

  FB07W00.FB07WIXM = 1; /* init map index*/
  FB07W00.FB07WIX1 = FB07W00.FB07WCSI; /* current size index*/

  while (FB07W00.FB07WIXM <= 10 /* max 10 sizes*/
   && FB07W00.FB07WIX1 <= FB07W00.FB07WLSI) /* last size*/

    if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* if data exists*/
      FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1; /* increment*/
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end

   /* protect remaining invalid fields*/

  while (FB07W00.FB07WIXM <= 10) /* for rest of map*/
    set FB07M010.FB07MTAJ[FB07WIXM] skip, invisible;
    set FB07M010.SY4IDDSC[FB07WIXM] skip, invisible;
    FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
  end


   /* ------------------------------------------------------------*/
   /* protect all adjustment fields when 'to' rta = 0.*/
   /* ------------------------------------------------------------*/

  if (FB07M010.FB07MTRD == 0) /* 'to' rta date = 0*/

    FB07W00.FB07WIXM = 1; /* set index*/

    while (FB07W00.FB07WIXM <= 10) /* for all map fields*/
      set FB07M010.FB07MTAJ[FB07WIXM] skip, invisible; /* protect*/
      FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
    end
  end


  if (FB07M010.OP1CUOID == 0
   && FB07M010.OP1NORID == 0)
    set FB07M010.OP1CUOID skip, invisible;
    set FB07M010.FB07MDOT skip, invisible;
    set FB07M010.OP1NORID skip, invisible;
    set FB07M010.OP1PARTN skip, invisible;
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB07M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FB07M010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB07M010.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* if message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FB07W00.XXXMSGNO != 0) /* message to display*/
    if (FB07W00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB07W00.XXXMSGNO);
    end /* message to display*/
  end



  if (converseVar.validationMsgNum != 0) /* message to display*/
    set FB07M010 alarm; /* indicate alarm*/
  end

  converse FB07M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB07M010.XXXPRCNM = "FB07   "; /* Module identification*/
  converseLib.validationFailed(0); /* reset*/
  FB07W00.XXXMSGNO = 0; /* reset*/

  COMMAREA.CATOAP = FB07M010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB07M010.CAITEM; /* Application data*/


end // end FB07200

// format map data
Function FB07210()
   /* ------------------------------------------------------------*/
   /* clear map*/
   /* ------------------------------------------------------------*/

  set FB07M010 initial;



   /* ------------------------------------------------------------*/
   /* Move map header from display storage to the map*/
   /* ------------------------------------------------------------*/


  FB07M010.SY1STNBR = FB07W00.SY1STNBR;
  FB07M010.SY2CLRID = FB07W00.SY2CLRID;
  FB07M010.XDMCD = FB07W00.XDMCD;
  FB07M010.SY1SSTNM = FB07W00.SY1SSTNM;
  FB07M010.SY2CLRAB = FB07W00.SY2CLRAB;
  FB07M010.XQACD = FB07W00.XQACD;
  FB07M010.PC2INSEG = FB07W00.PC2INSEG;
  FB07M010.XPGCD = FB07W00.XPGCD;
  FB07M010.XUMCD = FB07W00.XUMCD;
  FB07M010.PC2CUXID = FB07W00.PC2CUXID;
  FB07M010.OP1PARTN = FB07W00.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB07M010.OP1CUOID = FB07W00.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB07M010.OP1NORID = FB07W00.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB07M010.FB07MSZS = FB07W00.FB07MSZS;

   /* ------------------------------------------------------------*/
   /* format from and to dates*/
   /* ------------------------------------------------------------*/

  FB07W00.FB07WKDT = FB07W00.FBXFRMDT; /* 'from' to work date*/
  FB07W00.FB07WMM = FB07W00.FB07WKMM; /* month*/
  FB07W00.FB07WDD = FB07W00.FB07WKDD; /* day*/
  FB07W00.FB07WYY = FB07W00.FB07WKYY; /* year*/
  FB07M010.FB07MFRD = FB07W00.FB07WDAT; /* from rta date*/

  FB07W00.FB07WKDT = FB07W00.FBXTODT; /* 'to' to work date*/
  FB07W00.FB07WMM = FB07W00.FB07WKMM; /* month*/
  FB07W00.FB07WDD = FB07W00.FB07WKDD; /* day*/
  FB07W00.FB07WYY = FB07W00.FB07WKYY; /* year*/
  FB07M010.FB07MTRD = FB07W00.FB07WDAT; /* to rta date*/
  if (FB07W00.FB07MTRD == 0) /* if not initialized*/
    FB07W00.FB07MTRD = FB07W00.FB07WDAT; /* to rta date*/
  end

   /* ------------------------------------------------------------*/
   /* load size descriptions to map*/
   /* ------------------------------------------------------------*/

  if (FB07M010.SY1STNBR != " ") /* if header data exists*/

    FB07W00.FB07WIXM = 1; /* Init map index*/
    FB07W00.FB07WIX1 = FB07W00.FB07WCSI; /* Current size index*/

    while (FB07W00.FB07WIXM <= 10
     && FB07W00.FB07WIX1 <= FB07W00.FB07WLSI) /* Last size*/

      if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* if data exists*/

        FB07M010.SY4IDDSC[FB07WIXM] = PG3REC.SY4IDDSC[FB07WIX1];
        FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;

      end
      FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
    end
  end


   /* ------------------------------------------------------------*/
   /* Use the current size index as the starting point*/
   /* for loading the sizes quantities to the map.*/
   /* ------------------------------------------------------------*/

  if (FB07M010.SY1STNBR != " ")
    FB07W00.FB07WIXM = 1; /* map size index*/
    FB07W00.FB07WIX1 = FB07W00.FB07WCSI; /* Current size*/


    while (FB07W00.FB07WIXM <= 10 /* Max sizes on map*/
     && FB07W00.FB07WIX1 <= FB07W00.FB07WLSI) /* Last size*/
      if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* size has data*/

        FB07M010.FB07MFCQ[FB07WIXM] = FB07W00.FB07MFCQ[FB07WIX1];
        FB07M010.FB07MFAQ[FB07WIXM] = FB07W00.FB07MFAQ[FB07WIX1];
        FB07M010.FB07MTCQ[FB07WIXM] = FB07W00.FB07MTCQ[FB07WIX1];
        FB07M010.FB07MTAJ[FB07WIXM] = FB07W00.FB07MTAJ[FB07WIX1];
        FB07M010.FB07MTAQ[FB07WIXM] = FB07W00.FB07MTAQ[FB07WIX1];

        FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
      end
      FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
    end
  end

  FB07M010.FB07MFCT = FB07W00.FB07MFCT;
  FB07M010.FB07MFAT = FB07W00.FB07MFAT;
  FB07M010.FB07MTCT = FB07W00.FB07MTCT;
  FB07M010.FB07MTTA = FB07W00.FB07MTTA;
  FB07M010.FB07MTAT = FB07W00.FB07MTAT;


   /* ------------------------------------------------------------*/
   /* establish cursor position.*/
   /* ------------------------------------------------------------*/

  if (FB07M010.FB07MTRD == 0) /* if 'to' rta date not entered*/
    set FB07M010.FB07MTRD cursor; /* set cursor*/
  else
    set FB07M010.FB07MTAJ[1] cursor;
  end


end // end FB07210

// Check attention ID
Function FB07300()
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set FB07M010 empty; /* Clear the map fields*/
    FB07W00.FB07WRDF = "Y"; /* Request reload of data*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB07M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/


      COMMAREA.CATOAP = FB07M010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB07M010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB07M010.CATOAP cursor, bold;
      exit stack;
    else
      FB07M010.XXXPRCNM = "FB07300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB07M010.XXXPRCNM = "FB07300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0M (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    set FBXREC empty;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB07M010.XXXPRCNM = "FB07300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9)
    return;
  end

   /* ------------------------------------------------------------*/
   /* On PF3  transfer to FB0W*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* FB0W requested*/

    FBXREC.FBXFRMDT = 0;
    FBXREC.FBXTODT = 0;
    FBXREC.XWHCD1[1] = " ";
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CATOAP = "FB0W"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB07M010.XXXPRCNM = "FB07300"; /* Module identification*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* if scroll not requested, PF key is invalid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf10 /* Scroll left requested*/
   && converseVar.eventKey not pf11) /* Scroll right requested*/

    FB07M010.XXXPRCNM = "FB07300";
    converseLib.validationFailed(03); /* invalid pf key*/
    exit stack;
  end


end // end FB07300

// Reset highlighted fields
Function FB07400()

   /* ----------------------------------------------------*/
   /* Set all fields defined*/
   /* ----------------------------------------------------*/

  set FB07M010.FB07MSZS initialAttributes; /* size scroll*/
  set FB07M010.FB07MFRD initialAttributes; /* from rta date*/
  set FB07M010.FB07MTRD initialAttributes; /* to rta date*/
  set FB07M010.FB07MTTA initialAttributes; /* total adjustments*/
  set FB07M010.OP1CUOID initialAttributes; /* cust #*/
  set FB07M010.FB07MDOT initialAttributes; /* .*/
  set FB07M010.OP1NORID initialAttributes; /* nike #*/
  set FB07M010.OP1PARTN initialAttributes; /* part char*/

  FB07W00.FB07WIXM = 1; /* set map index*/

  while (FB07W00.FB07WIXM <= 10) /* for all fields*/
    set FB07M010.FB07MTAJ[FB07WIXM] initialAttributes;
    FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
  end

  set FB07M010.CATOAP initialAttributes;
  set FB07M010.CAITEM initialAttributes;


end // end FB07400

// Verify entered data
Function FB07500()
   /* ----------------------------------------------------*/
   /* If invalid scheduler display message and ezeflo*/
   /* ----------------------------------------------------*/

  if (FB07W00.FB07WISF == "Y")
    converseLib.validationFailed(62); /* Do not allow updates*/
    FB07M010.XXXPRCNM = "FB07500";
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If fastpathed into application display message and*/
   /* ezeflo.*/
   /* ----------------------------------------------------*/

  if (FB07W00.FB07WFPF == "Y")
    converseLib.validationFailed(327); /* Fastpath invalid etc*/
    FB07M010.XXXPRCNM = "FB07500";
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* Do not allow updates if scheduler code = 'y'.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf9)
    if (FBMREC.FBMALAFL == "Y")
      converseLib.validationFailed(322); /* Do not allow updates*/
      FB07M010.XXXPRCNM = "FB07500";
      exit stack;
    end
  end

   /* ----------------------------------------------------*/
   /* Do not allow updates if too many dfbuy.vmfbuy01*/
   /* rows exist.*/
   /* ----------------------------------------------------*/

  if (FB07W00.FB07WTMF == "Y") /* if too many rows*/
    converseLib.validationFailed(395); /* Do not allow updates*/
    FB07M010.XXXPRCNM = "FB07500";
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* Check for db2 contention due to merge.*/
   /* ----------------------------------------------------*/

  FB07510(); /* check for contention*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


  FB07W00.FB07WKCF = "N"; /* key changed*/

   /* ----------------------------------------------------*/
   /* if 'to' rta date changed, verify the new one.*/
   /* ----------------------------------------------------*/

  if (FB07M010.FB07MTRD == 0) /* if blank*/
    set FB07M010.FB07MTRD cursor, bold;
    converseLib.validationFailed(8); /* required field*/
    FB07M010.XXXPRCNM = "FB07500";
    exit stack;
  else

    if (FB07M010.FB07MFRD == FB07M010.FB07MTRD) /* if from = to rta*/
      set FB07M010.FB07MFRD bold; /* highlight*/
      set FB07M010.FB07MTRD cursor, bold; /* highlight*/
      converseLib.validationFailed(253); /* to rta cannot match from rta*/
      FB07M010.XXXPRCNM = "FB07500";

    else

      if (FB07M010.FB07MTRD != FB07W00.FB07MTRD) /* rta date changed*/

        FB07520(); /* verify rta date*/

        if (TA2REC.TA2RTNCD == 0) /* successful return*/
          FB07W00.FB07MTRD = FB07M010.FB07MTRD; /* save rta*/
          FB07W00.FB07WKCF = "Y"; /* key changed*/
        else
          set FB07M010.FB07MTRD cursor, bold;
          converseLib.validationFailed(17); /* that's a bad date*/
          FB07M010.XXXPRCNM = "FB07500";
        end
      end
    end
  end


  if (FB07W00.FB07WKCF == "Y") /* if key changed*/
    FB07W00.FB07WRDF = "Y"; /* request data*/
    exit stack;
  end


   /* ----------------------------------------------------*/
   /* Verify scroll request*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* if scroll left*/
   || converseVar.eventKey is pf11) /* or scroll right*/

    FB07530(); /* verify scroll*/
    return;

  end

   /* ----------------------------------------------------*/
   /* If 'from' and 'to' rta dates are entered, verify*/
   /* no adjustments force negative 'from' or 'to' qtys.*/
   /* ----------------------------------------------------*/


  if (FB07M010.FB07MFRD != " " /* 'from' fcty exists*/
   && FB07M010.FB07MTRD != " ") /* 'to' fcty exists*/

    FB07W00.FB07WDCF = "N"; /* data changed flag*/
    FB07W00.FB07WIXM = 10; /* init map index*/

    while (FB07W00.FB07WIXM >= 1) /* for all map fields*/

      if (FB07M010.FB07MTAJ[FB07WIXM] != 0) /* adjustment entered*/

        FB07W00.FB07WDCF = "Y"; /* data changed flag*/

        FB07W00.FB07WWF1 = FB07M010.FB07MFCQ[FB07WIXM]; /* work fld*/
        FB07W00.FB07WWF1 = FB07W00.FB07WWF1 - FB07M010.FB07MTAJ[FB07WIXM];
        if (FB07W00.FB07WWF1 < 0) /* if negative*/
          set FB07M010.FB07MTAJ[FB07WIXM] cursor, bold;
          converseLib.validationFailed(391); /* adjusted qty cannot be neg.*/
          FB07M010.XXXPRCNM = "FB07500";
        end

        FB07W00.FB07WWF1 = FB07M010.FB07MTCQ[FB07WIXM]; /* work fld*/
        FB07W00.FB07WWF1 = FB07W00.FB07WWF1 + FB07M010.FB07MTAJ[FB07WIXM];
        if (FB07W00.FB07WWF1 < 0) /* if negative*/
          set FB07M010.FB07MTAJ[FB07WIXM] cursor, bold;
          converseLib.validationFailed(391); /* adjusted qty cannot be neg.*/
          FB07M010.XXXPRCNM = "FB07500";
        end

      end
      FB07W00.FB07WIXM = FB07W00.FB07WIXM - 1; /* decrement index*/
    end
  end




   /* ----------------------------------------------------*/
   /* If any errors found, return to display map.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end



end // end FB07500

// check for merge contention
Function FB07510()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FBEREC empty;

  FBEREC.XXXPGMNB = "FB120D"; /* program nbr*/

   /* ------------------------------------------------------------*/
   /* select row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3440" ("S ", SQLCA, FBEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (FBEREC.FBEMDLPF == "Y") /* contention with merge*/
        converseLib.validationFailed(371); /* merge is being run*/
        exit stack; /* return to process*/
      end
    else


      /* ------------------------------------------------------------*/
       /* If data not available, return an error message to the user.*/
       /* Otherwise, indicate that a system error has occurred.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1LOC = "CHECK MERGE CONTENTION";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFBPGM01"; /* Table view name*/
      TA1REC.TA1TBLKE = FBEREC.FBEGROUP; /* Table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE";
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      FB07M010.XXXPRCNM = "FB07510";
      exit stack;
    end
  end


end // end FB07510

// Verify RTA date
Function FB07520()
   /* ------------------------------------------------------------*/
   /* call ta0040 to verify 'to' rta date*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* initialize record*/

  TA2REC.TA2GRGAN = FB07M010.FB07MTRD; /* rta date*/

  TA2REC.TA2GRTYP = "A"; /* gregorian mmddyy*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get greg formats*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    FB07M010.XXXPRCNM = "FB07520"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY RTA DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "FB07520"; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M010"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end


end // end FB07520

// Validate scroll request
Function FB07530()
   /* ------------------------------------------------------------*/
   /* Validate that size scroll is positive and not greater than*/
   /* 40*/
   /* ------------------------------------------------------------*/

  if (FB07M010.FB07MSZS < 1
   || FB07M010.FB07MSZS > 40)
    set FB07M010.FB07MSZS cursor, bold;
    converseLib.validationFailed(10); /* no more cols to display*/
    FB07M010.XXXPRCNM = "FB07530"; /* process*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    FB07W00.FB07WWF1 = FB07W00.FB07WCSI - FB07M010.FB07MSZS;
    FB07W00.FB07WWF2 = FB07W00.FB07WCSI - 1;

    if (FB07W00.FB07WWF1 < FB07W00.FB07WFSI
     && FB07W00.FB07WWF2 < FB07W00.FB07WFSI)
      set FB07M010.FB07MSZS cursor, bold;
      converseLib.validationFailed(23); /* No more columns to left to display*/
      FB07M010.XXXPRCNM = "FB07530"; /* Module identification*/
      exit stack;
    end
  end


   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that sizes exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    FB07W00.FB07WWF1 = FB07W00.FB07WCSI + FB07M010.FB07MSZS + 1;

    if (FB07W00.FB07WWF1 >= FB07W00.FB07WLSI) /* last size index*/
      set FB07M010.FB07MSZS cursor, bold;
      converseLib.validationFailed(24); /* No more columns to right to display*/
      FB07M010.XXXPRCNM = "FB07530"; /* Module identification*/
      exit stack;
    end
  end


end // end FB07530

// Process valid input
Function FB07600()

   /* ----------------------------------------------------*/
   /* save adjustments in working storage array.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = FB07W00.FB07WCSI; /* current size*/
  FB07W00.FB07WIXM = 1; /* map size index*/

  while (FB07W00.FB07WIXM <= 10 /* max sizes on map*/
   && FB07W00.FB07WIX1 <= FB07W00.FB07WLSI) /* last size*/

    if (FB07W00.FB07WZHD[FB07WIX1] == "Y") /* size has data*/

      FB07W00.FB07MTAJ[FB07WIX1] = FB07M010.FB07MTAJ[FB07WIXM];
      FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1; /* increment map index*/

    end

    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment current size*/
  end


   /* ----------------------------------------------------*/
   /* calculate adjusted quantities.*/
   /* due to csp limitations, all array values are moved*/
   /* to temporary storage values (so arithmetic stmts*/
   /* can fit on one line).*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = FB07W00.FB07WFSI; /* init index to first size*/
  FB07W00.FB07MFAT = 0; /* init from adjust total*/
  FB07W00.FB07MTTA = 0; /* init total adjustment*/
  FB07W00.FB07MTAT = 0; /* init to adjust total*/

  while (FB07W00.FB07WIX1 <= 40 /* up to max size 40*/
   && FB07W00.FB07WIX1 <= FB07W00.FB07WLSI) /* or to last valid size*/

    if (FB07W00.FB07WZHD[FB07WIX1] == "Y" /* size has data*/
     && FB07W00.FB07MTAJ[FB07WIX1] != 0)  /* and adjustments made*/

       /* calculate 'from' adjusted qtys*/

      FB07W00.FB07WWF1 = FB07W00.FB07MFCQ[FB07WIX1]; /* curr to work*/
      FB07W00.FB07WWF2 = FB07W00.FB07MTAJ[FB07WIX1]; /* adj to work*/
      FB07W00.FB07MFAQ[FB07WIX1] = FB07W00.FB07WWF1 - FB07W00.FB07WWF2;

       /* calculate 'to' adjusted qtys*/

      FB07W00.FB07WWF1 = FB07W00.FB07MTCQ[FB07WIX1]; /* curr to work*/
      FB07W00.FB07WWF2 = FB07W00.FB07MTAJ[FB07WIX1]; /* adj to work*/
      FB07W00.FB07MTAQ[FB07WIX1] = FB07W00.FB07WWF1 + FB07W00.FB07WWF2;

    end

     /* calculate total quantities*/

    FB07W00.FB07MFAT = FB07W00.FB07MFAT + FB07W00.FB07MFAQ[FB07WIX1];
    FB07W00.FB07MTTA = FB07W00.FB07MTTA + FB07W00.FB07MTAJ[FB07WIX1];
    FB07W00.FB07MTAT = FB07W00.FB07MTAT + FB07W00.FB07MTAQ[FB07WIX1];

    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/

  end


   /* ----------------------------------------------------*/
   /* calculate new 'from' and 'to' rta percents.*/
   /* ----------------------------------------------------*/

   /* calculate 'from' rta %*/

  FB07W00.FB07WWF3 = mathLib.round(FB07W00.FB07MFAT / FB07W00.FB07WTQT, -mathLib.decimals(FB07W00.FB07WWF3));
  FB07W00.FB07WFRP = mathLib.round(FB07W00.FB07WWF3 * FB07W00.FB07WSRP, -mathLib.decimals(FB07W00.FB07WFRP)); /* from rta %*/

   /* calculate 'to' rta %*/

  FB07W00.FB07WWF3 = mathLib.round(FB07W00.FB07MTAT / FB07W00.FB07WTQT, -mathLib.decimals(FB07W00.FB07WWF3));
  FB07W00.FB07WTRP = mathLib.round(FB07W00.FB07WWF3 * FB07W00.FB07WSRP, -mathLib.decimals(FB07W00.FB07WTRP)); /* to rta %*/




   /* ----------------------------------------------------*/
   /* ezeaid not pf9 and data was changed,*/
   /* set message 'press pf9 to update'.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey not pf9
   && FB07W00.FB07WDCF == "Y") /* and data changed*/

    converseLib.validationFailed(98); /* press pf9 to update*/
    FB07M010.XXXPRCNM = "FB07600";
  end



   /* ----------------------------------------------------*/
   /* If PF10 or PF11 has been pressed increment or*/
   /* decrement the sizes requested and return to*/
   /* reload size data and display map.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf10)
    FB07W00.FB07WSSR = "Y"; /* Scroll request*/
    FB07W00.FB07WCSI = FB07W00.FB07WCSI - FB07M010.FB07MSZS;
    FB07W00.XXXMSGNO = 15; /* Scroll left successful*/
    FB07W00.FB07MSZS = FB07M010.FB07MSZS;
    FB07W00.FB07WSWF = "Y"; /* format data flag*/
    return;
  end

  if (converseVar.eventKey is pf11)
    FB07W00.FB07WSSR = "Y"; /* Scroll request*/
    FB07W00.FB07WCSI = FB07W00.FB07WCSI + FB07M010.FB07MSZS;
    FB07W00.XXXMSGNO = 14; /* Scroll right successful*/
    FB07W00.FB07MSZS = FB07M010.FB07MSZS;
    FB07W00.FB07WSWF = "Y"; /* format data flag*/
    return;
  end


   /* ----------------------------------------------------*/
   /* If enter pressed, save size scroll.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter pressed*/
    FB07W00.FB07MSZS = FB07M010.FB07MSZS; /* save size scroll*/
    if (FB07W00.FB07WDCF == "N")
      return;
    end
  end

   /* ----------------------------------------------------*/
   /* If PF9 has been pressed, update DFBUY.VRTQTB01*/
   /* and DFBUY.VMFBUY01 tables for both the 'from' and*/
   /* 'to' rows.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* Update requested*/

    if (FB07W00.FB07WDCF == "Y") /* if data changed*/

      XX0XS01(); /* get date and time*/


      /* ----------------------------------------------------*/
       /* update dfbuy.vrtqtb01 'from' record.*/
      /* ----------------------------------------------------*/

      set FBFREC empty; /* initialize*/

      FBFREC.FBFGROUP = FB07W01.FB07WGRP; /* move data*/

      move FB07W00.FB07MFAQ to FBFREC.FB7QTB[1] for all; /* move quantities*/
      FBFREC.FB7RTAPC = FB07W00.FB07WFRP; /* move adj rta %*/
      FBFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
      FBFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

      FB07610(); /* update 'from' dfbuy.vrtqtb01 row*/

      /* ----------------------------------------------------*/
       /* update dfbuy.vrtqtb01 'to' record.*/
      /* ----------------------------------------------------*/

      if (FB07W00.FB07WNDF == "Y") /* if new date*/

         /* insert new row*/

        set FBFREC empty; /* initialize*/

        FBFREC.FBFGROUP = FB07W01.FB07WGRP; /* move data*/

        move FB07W00.FB07MTAQ to FBFREC.FB7QTB[1] for all; /* move quantities*/
        FBFREC.FB7RTADT = FB07W00.FBXTODT; /* rta date*/
        FBFREC.FB7RTAPC = FB07W00.FB07WTRP; /* move adj rta %*/
        FBFREC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
        FBFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
        FBFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
        FBFREC.ZZZCHGCT = 0; /* change count*/

        FB07620(); /* insert 'to' dfbuy.vrtqtb01 row*/
      else

         /* update the existing row*/

        set FBFREC empty; /* initialize*/

        FBFREC.FBFGROUP = FB07W02.FB07WGRP; /* move data*/

        move FB07W00.FB07MTAQ to FBFREC.FB7QTB[1] for all; /* move quantities*/
        FBFREC.FB7RTAPC = FB07W00.FB07WTRP; /* move adj rta %*/
        FBFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
        FBFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

        FB07610(); /* update 'from' dfbuy.vrtqtb01 row*/

      end

      /* ----------------------------------------------------*/
       /* update dfbuy.vmfbuy01 'from' records.*/
      /* ----------------------------------------------------*/

      FB07630(); /* calculate 'from' rows*/

      FB07W00.FB07WIXM = 1; /* init index*/

      while (FB07W00.FB07WIXM <= 5) /* max of 5 records*/
        FB07W03.FB07WFMG = FB07W03.FB07WFMR[FB07WIXM];
        if (FB07W03.SY1STNBR != " ") /* if style exists*/

          set FB7REC empty; /* initialize*/

          FB7REC.FB7GROUP = FB07W03.FB07WFMR[FB07WIXM]; /* move data*/
          FB7REC.FB7RTAPC = FB07W00.FB07WFRP; /* move adj rta %*/
          FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
          FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


          if (FB07M010.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
           && FB07M010.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
           && FB07M010.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
            FB07650(); /* update 'from' dfbuy.vmfbuy01*/
          end

        end

        FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
      end

      /* ----------------------------------------------------*/
       /* update dfbuy.vmfbuy01 'to' records.*/
      /* ----------------------------------------------------*/

      if (FB07W00.FB07WNDF == "Y") /* if new date*/

         /* insert new row*/

        move FB07W03.FB07WFMR to FB07W04.FB07WTMR[1] for all; /* init 'to' rows*/

        FB07W00.FB07WIX1 = 1; /* init index*/
        while (FB07W00.FB07WIX1 <= 5) /* for all 'to' rows*/
          FB07W04.FB07WTMG = FB07W04.FB07WTMR[FB07WIX1];
          move 0 to FB07W04.FB7QTB[1] for all; /* init all qtys to 0*/
          FB07W04.FB07WTMR[FB07WIX1] = FB07W04.FB07WTMG;
          FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
        end

        FB07640(); /* calculate 'to' rows*/

        FB07W00.FB07WIXM = 1; /* init index*/

        while (FB07W00.FB07WIXM <= 5) /* max of 5 records*/
          FB07W03.FB07WFMG = FB07W03.FB07WFMR[FB07WIXM];
          if (FB07W03.SY1STNBR != " ") /* and style exists*/

            set FB7REC empty; /* initialize*/

            FB7REC.FB7GROUP = FB07W04.FB07WTMR[FB07WIXM];
                                   /* move data*/
            FB7REC.FB7RTAPC = FB07W00.FB07WTRP; /* move adj rta %*/
            FB7REC.FB7RTADT = FB07W00.FBXTODT; /* rta date*/
            FB7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
            FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
            FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
            FB7REC.ZZZCHGCT = 0; /* change count*/

            if (FB07M010.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
             && FB07M010.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
             && FB07M010.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
              FB07660(); /* insert 'from' dfbuy.vmfbuy01*/
            end

          end
          FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
        end
      else

         /* update the existing row*/

        FB07640(); /* calculate 'to' rows*/

        FB07W00.FB07WIXM = 1; /* init index*/

        while (FB07W00.FB07WIXM <= 5) /* max of 5 records*/
          FB07W04.FB07WTMG = FB07W04.FB07WTMR[FB07WIXM];
          if (FB07W04.SY1STNBR != " ") /* and style exists*/

            set FB7REC empty; /* initialize*/

            FB7REC.FB7GROUP = FB07W04.FB07WTMR[FB07WIXM];
                                   /* move data*/

            FB7REC.FB7RTAPC = FB07W00.FB07WTRP; /* move adj rta %*/
            FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
            FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/


            if (FB07M010.OP1PARTN == FB7REC.OP1PARTN /* OP-ORD-PART-CHAR*/
             && FB07M010.OP1CUOID == FB7REC.OP1CUOID /* OP-CUST-ORD-ID*/
             && FB07M010.OP1NORID == FB7REC.OP1NORID) /* OP-NIKE-ORD-ID*/
              FB07650(); /* update 'from' dfbuy.vmfbuy01*/
            end
          end
          FB07W00.FB07WIXM = FB07W00.FB07WIXM + 1;
        end
      end



      /* ----------------------------------------------------*/
        /* commit database changes*/
      /* ----------------------------------------------------*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit database change*/

      FB07W00.XXXMSGNO = 32; /* Update successful*/
      FB07W00.FB07WRDF = "Y"; /* Reload data*/
    else
      converseLib.validationFailed(66); /* no data to update*/
    end
  end

  FB07W00.FB07WSWF = "Y"; /* format the map switch*/


end // end FB07600

// Update DFBUY.VRTQTB01 row
Function FB07610()
   /* ------------------------------------------------------------*/
   /* Update the dfbuy.vrtqtb01 row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4620" ("U ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback if bad return code*/
      FB07W00.XXXMSGNO = 20; /* Record has been updated etc.*/
      FB07W00.FB07WRDF = "Y"; /* request for data*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07610 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE DFBUY.VRTQTB01 ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07610"; /* Process name*/

  exit stack;


end // end FB07610

// Insert DFBUY.VRTQTB01 row
Function FB07620()
   /* ------------------------------------------------------------*/
   /* Update the dfbuy.vrtqtb01 row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4620" ("A ", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07620 "; /* Process name*/
  TA1REC.TA1LOC = "INSERT DFBUY.VRTQTB01 ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07620"; /* Process name*/

  exit stack;


end // end FB07620

// Calculate 'from' mfbuy qtys
Function FB07630()
   /* ----------------------------------------------------*/
   /* DFBUY.VMFBUY01 quantities are calculated by*/
   /* multiplying the factory manufacturing percent by*/
   /* the adjusted qty shown on the map.  This can cause*/
   /* rounding errors, so this procedure will correct*/
   /* any errors.*/
   /* ----------------------------------------------------*/
   /* PROCEDURE:*/
   /* 1) calculate adjusted dfbuy.vmfbuy01 quantities.*/
      /* if there is more than one factory (mfbuy rows)*/
      /* rounding errors can occur.*/
   /* 2) sum all of qtys/size for all dfbuy.vmfbuy01*/
      /* records.*/
   /* 3) compare summed value to the dfbuy.vrtqtb01*/
      /* qty (shown on map).*/
   /* 4) if they are not equal, make adjustments to*/
      /* individual dfbuy.vmfbuy01 records until they are*/
      /* equal.*/
   /* ----------------------------------------------------*/

   /* ----------------------------------------------------*/
   /* calculate adjusted dfbuy.vmfbuy01 quantities.*/
   /* due to limitations of csp, work variables are used*/
   /* in order to fit arithmetic statments onto one line.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 5) /* max of 5 records*/
    FB07W03.FB07WFMG = FB07W03.FB07WFMR[FB07WIX1];
    if (FB07W03.SY1STNBR != " ") /* if style exists*/

      FB07W00.FB07WIX2 = 1; /* init another index*/

      while (FB07W00.FB07WIX2 <= 40) /* for all sizes*/

        FB07W00.FB07WWF1 = FB07W00.FB07MFAQ[FB07WIX2];
        FB07W00.FB07WWF3 = FB07W03.FY2MFGPC / 100; /* convert %*/
        FB07W00.FB07WWF1 = mathLib.round(FB07W00.FB07WWF1 * FB07W00.FB07WWF3, -mathLib.decimals(FB07W00.FB07WWF1));
        FB07W03.FB7QTB[FB07WIX2] = FB07W00.FB07WWF1;
        FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* increment*/

      end
    end

    FB07W03.FB07WFMR[FB07WIX1] = FB07W03.FB07WFMG; /* move to array*/

    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end


   /* ----------------------------------------------------*/
   /* sum all qtys/size for all dfbuy.vmfbuy01 records.*/
   /* again, work fields are used.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WSQA = 0; /* sum qtys array*/
  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 5)
    FB07W03.FB07WFMG = FB07W03.FB07WFMR[FB07WIX1];
    if (FB07W03.SY1STNBR != " ") /* if style exists*/

      FB07W00.FB07WIX2 = 1; /* init another index*/
      while (FB07W00.FB07WIX2 <= 40) /* for all sizes*/

        FB07W00.FB07WWF1 = FB07W00.FB07WSQA[FB07WIX2];
        FB07W00.FB07WWF1 = FB07W00.FB07WWF1 + FB07W03.FB7QTB[FB07WIX2];
        FB07W00.FB07WSQA[FB07WIX2] = FB07W00.FB07WWF1;

        FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* increment*/
      end
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/
  end




   /* ----------------------------------------------------*/
   /* compare sums computed above to dfbuy.vrtqtb01 qtys.*/
   /* if they are not equal, add or subtract qtys until*/
   /* they are equal.  if a dfbuy.vmfbuy01 record is*/
   /* adjusted, a flag is set so that the next adjustment*/
   /* will be made to a different record.  this will help*/
   /* to maintain the factory manufacturing percents.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = 1; /* init the size index*/

  while (FB07W00.FB07WIX1 <= 40) /* for all valid sizes*/
    while (FB07W00.FB07WSQA[FB07WIX1] != FB07W00.FB07MFAQ[FB07WIX1])
       /* find record to update*/
      if ("Y" in FB07W00.FB07WMRF) /* find flag*/
        FB07W00.FB07WIX2 = sysVar.arrayIndex; /* init record index*/
      else
        FB07W00.FB07WIX2 = 1;
      end

      FB07W03.FB07WFMG = FB07W03.FB07WFMR[FB07WIX2];

      if (FB07W00.FB07WSQA[FB07WIX1] > FB07W00.FB07MFAQ[FB07WIX1])
        FB07W03.FB7QTB[FB07WIX1] = FB07W03.FB7QTB[FB07WIX1] - 1;
        FB07W00.FB07WSQA[FB07WIX1] = FB07W00.FB07WSQA[FB07WIX1] - 1;
      else
        FB07W03.FB7QTB[FB07WIX1] = FB07W03.FB7QTB[FB07WIX1] + 1;
        FB07W00.FB07WSQA[FB07WIX1] = FB07W00.FB07WSQA[FB07WIX1] + 1;
      end

      FB07W03.FB07WFMR[FB07WIX2] = FB07W03.FB07WFMG; /* move to array*/

       /* now increment flag array so next time a qty is adjusted*/
       /* it is to a different dfbuy.vmfbuy01 record.*/
       /* find the next valid record*/

      FB07W00.FB07WMRF[FB07WIX2] = "N"; /* reset flag*/
      while (FB07W00.FB07WMRF[FB07WIX2] != "Y") /* until a flag is set*/
        if (FB07W00.FB07WIX2 == 5) /* if at record max*/
          FB07W00.FB07WIX2 = 1; /* start over*/
        else
          FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* otherwise increment*/
        end
        if (FB07W00.FB07WMRF[FB07WIX2] == "N") /* if valid record flag*/
          FB07W00.FB07WMRF[FB07WIX2] = "Y"; /* set next flag*/
        end
      end
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end


end // end FB07630

// Calculate 'to' mfbuy qtys
Function FB07640()
   /* ----------------------------------------------------*/
   /* DFBUY.VMFBUY01 quantities are calculated by*/
   /* multiplying the factory manufacturing percent by*/
   /* the adjusted qty shown on the map.  This can cause*/
   /* rounding errors, so this procedure will correct*/
   /* any errors.*/
   /* ----------------------------------------------------*/
   /* PROCEDURE:*/
   /* 1) calculate adjusted dfbuy.vmfbuy01 quantities.*/
      /* if there is more than one factory (mfbuy rows)*/
      /* rounding errors can occur.*/
   /* 2) sum all of qtys/size for all dfbuy.vmfbuy01*/
      /* records.*/
   /* 3) compare summed value to the dfbuy.vrtqtb01*/
      /* qty (shown on map).*/
   /* 4) if they are not equal, make adjustments to*/
      /* individual dfbuy.vmfbuy01 records until they are*/
      /* equal.*/
   /* ----------------------------------------------------*/

   /* ----------------------------------------------------*/
   /* calculate adjusted dfbuy.vmfbuy01 quantities.*/
   /* due to limitations of csp, work variables are used*/
   /* in order to fit arithmetic statments onto one line.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 5) /* max of 5 records*/
    FB07W04.FB07WTMG = FB07W04.FB07WTMR[FB07WIX1];
    if (FB07W04.SY1STNBR != " ") /* if style exists*/

      FB07W00.FB07WIX2 = 1; /* init another index*/

      while (FB07W00.FB07WIX2 <= 40) /* for all sizes*/

        FB07W00.FB07WWF1 = FB07W00.FB07MTAQ[FB07WIX2];
        FB07W00.FB07WWF3 = FB07W04.FY2MFGPC / 100; /* convert %*/
        FB07W00.FB07WWF1 = mathLib.round(FB07W00.FB07WWF1 * FB07W00.FB07WWF3, -mathLib.decimals(FB07W00.FB07WWF1));
        FB07W04.FB7QTB[FB07WIX2] = FB07W00.FB07WWF1;
        FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* increment*/

      end
      FB07W04.FB07WTMR[FB07WIX1] = FB07W04.FB07WTMG; /* move to array*/
    end


    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end


   /* ----------------------------------------------------*/
   /* sum all qtys/size for all dfbuy.vmfbuy01 records.*/
   /* again, work fields are used.*/
   /* ----------------------------------------------------*/

  move 0 to FB07W00.FB07WSQA[1] for all; /* init sum qtys array*/
  FB07W00.FB07WIX1 = 1; /* init index*/

  while (FB07W00.FB07WIX1 <= 5)
    FB07W04.FB07WTMG = FB07W04.FB07WTMR[FB07WIX1];
    if (FB07W04.SY1STNBR != " ") /* if style exists*/

      FB07W00.FB07WIX2 = 1; /* init another index*/
      while (FB07W00.FB07WIX2 <= 40) /* for all sizes*/

        FB07W00.FB07WWF1 = FB07W00.FB07WSQA[FB07WIX2];
        FB07W00.FB07WWF1 = FB07W00.FB07WWF1 + FB07W04.FB7QTB[FB07WIX2];
        FB07W00.FB07WSQA[FB07WIX2] = FB07W00.FB07WWF1;

        FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* increment*/
      end
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1; /* increment*/
  end




   /* ----------------------------------------------------*/
   /* compare sums computed above to dfbuy.vrtqtb01 qtys.*/
   /* if they are not equal, add or subtract qtys until*/
   /* they are equal.  if a dfbuy.vmfbuy01 record is*/
   /* adjusted, a flag is set so that the next adjustment*/
   /* will be made to a different record.  this will help*/
   /* to maintain the factory manufacturing percents.*/
   /* ----------------------------------------------------*/

  FB07W00.FB07WIX1 = 1; /* init the size index*/

  while (FB07W00.FB07WIX1 <= 40) /* for all valid sizes*/
    while (FB07W00.FB07WSQA[FB07WIX1] != FB07W00.FB07MTAQ[FB07WIX1])
       /* find record to update*/
      if ("Y" in FB07W00.FB07WMRF) /* find flag*/
        FB07W00.FB07WIX2 = sysVar.arrayIndex; /* init record index*/
      else
        FB07W00.FB07WIX2 = 1;
      end

      FB07W04.FB07WTMG = FB07W04.FB07WTMR[FB07WIX2];

      if (FB07W00.FB07WSQA[FB07WIX1] > FB07W00.FB07MTAQ[FB07WIX1])
        FB07W04.FB7QTB[FB07WIX1] = FB07W04.FB7QTB[FB07WIX1] - 1;
        FB07W00.FB07WSQA[FB07WIX1] = FB07W00.FB07WSQA[FB07WIX1] - 1;
      else
        FB07W04.FB7QTB[FB07WIX1] = FB07W04.FB7QTB[FB07WIX1] + 1;
        FB07W00.FB07WSQA[FB07WIX1] = FB07W00.FB07WSQA[FB07WIX1] + 1;
      end

      FB07W04.FB07WTMR[FB07WIX2] = FB07W04.FB07WTMG;

       /* now increment flag array so next time a qty is adjusted*/
       /* it is to a different dfbuy.vmfbuy01 record.*/
       /* find the next valid record*/

      FB07W00.FB07WMRF[FB07WIX2] = "N"; /* reset flag*/
      while (FB07W00.FB07WMRF[FB07WIX2] != "Y") /* until a flag is set*/
        if (FB07W00.FB07WIX2 == 5) /* if at record max*/
          FB07W00.FB07WIX2 = 1; /* start over*/
        else
          FB07W00.FB07WIX2 = FB07W00.FB07WIX2 + 1; /* otherwise increment*/
        end
        if (FB07W00.FB07WMRF[FB07WIX2] == "N") /* if valid record flag*/
          FB07W00.FB07WMRF[FB07WIX2] = "Y"; /* set next flag*/
        end
      end
    end
    FB07W00.FB07WIX1 = FB07W00.FB07WIX1 + 1;
  end


end // end FB07640

// update DFBUY.VMFBUY01 row
Function FB07650()
   /* ------------------------------------------------------------*/
   /* update dfbuy.vmfbuy01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB07M010.XXXPRCNM = "FB07650"; /* process*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07650"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07610";
  exit stack;


end // end FB07650

// insert DFBUY.VMFBUY01 row
Function FB07660()
   /* ------------------------------------------------------------*/
   /* update dfbuy.vmfbuy01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(48); /* database updated by another user*/
      FB07M010.XXXPRCNM = "FB07660"; /* process*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback changes*/
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07660"; /* Process name*/
  TA1REC.TA1LOC = "INSERT DFBUY.VMFBUY01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07660";
  exit stack;


end // end FB07660

// select DFBUY.VFMCTL01 row
Function FB07S01()
  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB07S01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT DFBUY.VFMCTL01   ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB07M010.XXXPRCNM = "FB07S01";
  exit stack;


end // end FB07S01

//*** RECORD=FB07W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB07W00 type basicRecord
  5 * char(1393) ; 
    10 FB07MWKY FB07MWKY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 FBXFRMDT FBXFRMDT ; 
      15 FBXTODT FBXTODT ; 
      15 FB07MSZS FB07MSZS ; 
    10 FB07WRDF FB07WRDF ; 
    10 FB07WSWF FB07WSWF ; 
    10 FB07WSSR FB07WSSR ; 
    10 FB07WISF FB07WISF ; 
    10 FB07WFPF FB07WFPF ; 
    10 FB07WFTF FB07WFTF ; 
    10 FB07WECF FB07WECF ; 
    10 FB07WDCF FB07WDCF ; 
    10 FB07WKCF FB07WKCF ; 
    10 FB07WNDF FB07WNDF ; 
    10 FB07WTMF FB07WTMF ; 
    10 FB07WMRF FB07WMRF [5] ; 
    10 * char(1) ; 
    10 FB07MFCQ FB07MFCQ [40] ; 
    10 FB07MFAQ FB07MFAQ [40] ; 
    10 FB07MTCQ FB07MTCQ [40] ; 
    10 FB07MTAJ FB07MTAJ [40] ; 
    10 FB07MTAQ FB07MTAQ [40] ; 
    10 FB07MFCT FB07MFCT ; 
    10 FB07MFAT FB07MFAT ; 
    10 FB07MTCT FB07MTCT ; 
    10 FB07MTTA FB07MTTA ; 
    10 FB07MTAT FB07MTAT ; 
    10 FB07WTQT FB07WTQT ; 
    10 FB07WSRP FB07WSRP ; 
    10 FB07WFRP FB07WFRP ; 
    10 FB07WTRP FB07WTRP ; 
    10 * char(1) ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBKRDFL FBKRDFL ; 
    10 FB07MFRD FB07MFRD ; 
    10 FB07MTRD FB07MTRD ; 
    10 FB07WIXM FB07WIXM ; 
    10 FB07WIX1 FB07WIX1 ; 
    10 FB07WIX2 FB07WIX2 ; 
    10 FB07WFSI FB07WFSI ; 
    10 FB07WLSI FB07WLSI ; 
    10 FB07WCSI FB07WCSI ; 
    10 FB07WZHD FB07WZHD [40] ; 
    10 FB07WWF1 FB07WWF1 ; 
    10 FB07WWF2 FB07WWF2 ; 
    10 FB07WWF3 FB07WWF3 ; 
    10 FB07WRDR FB07WRDR ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB07WDAT FB07WDAT ; 
      15 FB07WMM FB07WMM ; 
      15 FB07WDD FB07WDD ; 
      15 FB07WYY FB07WYY ; 
    10 FB07WKDT FB07WKDT ; 
      15 FB07WKLZ FB07WKLZ ; 
      15 FB07WKCC FB07WKCC ; 
      15 FB07WKYY FB07WKYY ; 
      15 FB07WKMM FB07WKMM ; 
      15 FB07WKDD FB07WKDD ; 
    10 FB07WSQA FB07WSQA [40] ; 
end // end FB07W00

//*** RECORD=FB07W01 ****
// This is the working storage section for the 'from'
// DFBUY.VRTQTB01 record.  It is a copy of FBFREC.
// ***********************
Record FB07W01 type basicRecord
  5 FB07WGRP FB07WGRP ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 XDVCD XDVCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB07W01

//*** RECORD=FB07W02 ****
// This is the working storage section for the 'to'
// DFBUY.VRTQTB01 record.  It is a copy of FBFREC.
// ***********************
Record FB07W02 type basicRecord
  5 FB07WGRP FB07WGRP ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 XDVCD XDVCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB07W02

//*** RECORD=FB07W03 ****
// This is the working storage section for the DFBUY.VMFBUY01
// records.
// 
// Up to 5 records can be stored at one time.
// ***********************
Record FB07W03 type basicRecord
  10 FB07WFMG FB07WFMG ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
    15 PC2CUXID PC2CUXID ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XPRCD XPRCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 FY2MFGPC FY2MFGPC ; 
    15 XDVCD XDVCD ; 
    15 XCTCD XCTCD ; 
    15 FB8BUYDT FB8BUYDT ; 
    15 FBDBTCD FBDBTCD ; 
    15 XFRCD XFRCD ; 
    15 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    15 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    15 XWHCD XWHCD ; 
    15 FB7RTADT FB7RTADT ; 
    15 FB7RTAPC FB7RTAPC ; 
    15 FB7BUYST FB7BUYST ; 
    15 FB8FTQTB FB8FTQTB ; 
    15 FB7QTB FB7QTB [40] ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 FB07WFMR FB07WFMR [5] ; 
end // end FB07W03

//*** RECORD=FB07W04 ****
// This is the working storage section for the DFBUY.VMFBUY01
// 'to' records.
// 
// Up to 5 records can be stored at one time.
// ***********************
Record FB07W04 type basicRecord
  10 FB07WTMG FB07WTMG ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
    15 PC2CUXID PC2CUXID ; 
    15 PG1SC4CD PG1SC4CD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XPRCD XPRCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 FY2MFGPC FY2MFGPC ; 
    15 XDVCD XDVCD ; 
    15 XCTCD XCTCD ; 
    15 FB8BUYDT FB8BUYDT ; 
    15 FBDBTCD FBDBTCD ; 
    15 XFRCD XFRCD ; 
    15 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    15 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    15 XWHCD XWHCD ; 
    15 FB7RTADT FB7RTADT ; 
    15 FB7RTAPC FB7RTAPC ; 
    15 FB7BUYST FB7BUYST ; 
    15 FB8FTQTB FB8FTQTB ; 
    15 FB7QTB FB7QTB [40] ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 FB07WTMR FB07WTMR [5] ; 
end // end FB07W04

// from adjusted quantity
DataItem FB07MFAQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from adjusted total
DataItem FB07MFAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from current qty
DataItem FB07MFCQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from current total
DataItem FB07MFCT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from rta date
DataItem FB07MFRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size scroll
DataItem FB07MSZS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// adjustment
DataItem FB07MTAJ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to adjusted qty
DataItem FB07MTAQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to adjusted qty total
DataItem FB07MTAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to current quantity
DataItem FB07MTCQ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to current qty total
DataItem FB07MTCT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to rta date
DataItem FB07MTRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total adjustment
DataItem FB07MTTA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map key
DataItem FB07MWKY char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current size index
DataItem FB07WCSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mmddyy format
DataItem FB07WDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed flag
DataItem FB07WDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work dd
DataItem FB07WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor flag
DataItem FB07WECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from' mfbuy group
DataItem FB07WFMG char(255)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from' mfbuy record
DataItem FB07WFMR char(255)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fast path flag
DataItem FB07WFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from rta percent
DataItem FB07WFRP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First size index
DataItem FB07WFSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem FB07WFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb07 group
DataItem FB07WGRP char(241)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid scheduler flag
DataItem FB07WISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem FB07WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB07WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB07WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date cc
DataItem FB07WKCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed flag
DataItem FB07WKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date dd
DataItem FB07WKDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date ccyymmdd format
DataItem FB07WKDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date leading zero
DataItem FB07WKLZ num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mm
DataItem FB07WKMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yy
DataItem FB07WKYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last size index
DataItem FB07WLSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FB07WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mfbuy record flag array
DataItem FB07WMRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new rta date flag
DataItem FB07WNDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB07WRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remainder
DataItem FB07WRDR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum of qtys array
DataItem FB07WSQA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum rta percents
DataItem FB07WSRP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size scroll requested flag
DataItem FB07WSSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem FB07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// too many mfbuy recs flag
DataItem FB07WTMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'to' mfbuy group
DataItem FB07WTMG char(255)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'from' mfbuy record
DataItem FB07WTMR char(255)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total quantity (overall)
DataItem FB07WTQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to rta percent
DataItem FB07WTRP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FB07WWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB07WWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 3
DataItem FB07WWF3 decimal(7,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem FB07WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size has data flag
DataItem FB07WZHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

