package fb0x;

import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXPRCNM;
import corpx1.XCTTBL;
import fb.common.FB9REC;
import fb.common.FBWREC;
import fy.common.FY1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0X ****
// This program is part of the footwear buy system.
// 
// This application provides the capability of submitting the
// rts analysis summary report FB2531. The user is allowed to
// enter from 1 to 6 country codes or an '*' for all.  FB0X
// will submit the batch programs FB252D & FB253D passing the
// entered countries.
// 
// 
// the user may exit via FAST PATH or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/30/92   LDELUH   Created.
// 03/23/93   LDELUH   Add multiple p.o. logic.
// 06/21/93   LDELUH   Chg disposition in S0030.
// 07/21/93   LDELUH   Chg testrms to be testenc.
// 09/21/93   LDELUH   Convert to csp v4.
// 12/03/97   RGILLI   Y2K MODIFICATIONS MADE TO:
//                     FB0XM010: Remove zero supression
// 11/19/99   SKATHI   Y2K MODIFICATIONS TO FB0X510
// *********************
Program FB0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0XW00 FB0XW00; // record
  FB0XW01 FB0XW01; // record
  FB0XW02 FB0XW02; // record
  FB9REC FB9REC; // record
  FBWREC FBWREC; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0XT01; // table
  use FB0XTT1; // table
  use FB0XT02 {deleteAfterUse = yes}; // table
  use FB0XTT2 {deleteAfterUse = yes}; // table
  use XCTTBL; // table
  use FB0XM.FB0XM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* clear map fields/initialize records*/
     /* ------------------------------------------------------------*/
    ;
    set FB0XM010 initial;
    set FB0XW00 empty;
    set FB0XW01 empty;
    set FB0XW02 empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA6REC empty;
    ;
    FB0XW00.FB0XWRDF = "Y"; /* request data*/
    FB0XW00.FB0XWSWF = "Y"; /* format map flag*/
    ;
    goto FB0X001;
    ;
    ;
    FB0X001: FB0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the RTS Analysis Summary Report parameters.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0X001; /* Converse report parameters*/
    ;
    ;
  end // end main
end // end FB0X

// report parameters
Function FB0X001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0X100(); /* Obtain data to display*/
  ;
  FB0X200(); /* Format and display the map*/
  ;
  FB0X300(); /* Check attention identifier*/
  ;
  FB0X400(); /* Reset fields to normal intensity*/
  ;
  FB0X500(); /* Verify the entered data*/
  ;
  FB0X600(); /* Process valid input request*/
  ;
end // end FB0X001

// Obtain data to display
Function FB0X100()
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XW00.FB0XWRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If end po range not on map yet get buy month & calc the*/
   /* end po range from it.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XW01.FB0XW-END-PO-YYM1M2 == 0)
    FB0X102(); /* Get buy date*/
    FB0XW00.FB0XW-WORK-PO-CCYYM1M2 = FB9REC.FB8BUYDT;
    FB0XW00.FB0XW-WORK-PO-M2 = FB0XW00.FB0XW-WORK-PO-M1;
    FB0XW00.FB0XW-WORK-PO-M1 = FB0XW00.FB0XW-WORK-PO-M1 - 2;
    if (FB0XW00.FB0XW-WORK-PO-M1 == 0)
      FB0XW00.FB0XW-WORK-PO-M1 = 12;
      FB0XW00.FB0XW-WORK-PO-CCYYM1M2 = FB0XW00.FB0XW-WORK-PO-CCYYM1M2 - 10000;
    else
      if (FB0XW00.FB0XW-WORK-PO-M1 < 0)
        FB0XW00.FB0XW-WORK-PO-M1 = 11;
        FB0XW00.FB0XW-WORK-PO-CCYYM1M2 = FB0XW00.FB0XW-WORK-PO-CCYYM1M2 - 10000;
      end
    end
    FB0XW00.FB0XW-END-PO-ID-RNG = FB0XW00.FB0XW-WORK-PO-CCYYM1M2;
    FB0XW01.FB0XW-END-PO-YYM1M2 = FB0XW00.FB0XW-WORK-PO-YYM1M2;
  end
  ;
  FB0XW00.FB0XWRDF = "N"; /* Data not requested*/
  FB0XW00.FB0XWSWF = "Y"; /* format the map*/
  ;
  ;
end // end FB0X100

// get buy date
Function FB0X102()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0XM010.XXXMODID = "102"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0XM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0X102

// Format and display map
Function FB0X200()
  ;
   /* ------------------------------------------------------------*/
   /* if requested, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XW00.FB0XWSWF == "Y") /* format map*/
    FB0X210(); /* format map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0XM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum != 0)
    set FB0XM010 alarm; /* Indicate sound alarm*/
    FB0XM010.XXXPRCNM = FB0XW00.XXXPRCNM; /* Process number*/
  else
    FB0XM010.XXXPRCNM = "FB0X   "; /* Process number*/
  end
  ;
  ;
  converse FB0XM010 ;
  ;
   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/
  ;
  converseLib.validationFailed(0); /* message number*/
  FB0XW00.XXXPRCNM = "FB0X   "; /* Process number*/
  ;
  COMMAREA.CATOAP = FB0XM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0XM010.CAITEM; /* Application data*/
end // end FB0X200

// Format data on map
Function FB0X210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0XM010 initial; /* m010 input/output area*/
  ;
  FB0XW00.FB0XWSWF = "N"; /* format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map from display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0XW00.FB0XWIXM = 1; /* set index*/
  while (FB0XW00.FB0XWIXM <= 6)
    FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] = FB0XW01.FB0XW-XCT-CTRY-CD[FB0XWIXM]; /* country code*/
    FB0XW00.FB0XWIXM = FB0XW00.FB0XWIXM + 1;
  end
  ;
  FB0XM010.FB0XM-END-PO-YYM1M2 = FB0XW01.FB0XW-END-PO-YYM1M2;
  ;
  ;
end // end FB0X210

// Check attention ID
Function FB0X300()
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB0XM010.XXXPRCNM = "FB0X   ";
    ;
    FB0XW00.FB0XWIXM = 1;
    while (FB0XW00.FB0XWIXM <= 6)
      FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] = FB0XW01.FB0XW-XCT-CTRY-CD[FB0XWIXM]; /* country code*/
      FB0XW00.FB0XWIXM = FB0XW00.FB0XWIXM + 1;
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = FB0XM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0XM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0XM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0XW00.XXXPRCNM = "FB0X300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* Help screen requested*/
    ;
    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0XM010.XXXPRCNM = "FB0X300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* menu screen requested*/
    ;
    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0XM010.XXXPRCNM = "FB0X300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* Menu screen requested*/
    ;
    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0XM010.XXXPRCNM = "FB0X300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  ;
  FB0XM010.XXXPRCNM = "FB0X300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;
  ;
  ;
  ;
end // end FB0X300

// Reset highlighted fields
Function FB0X400()
  ;
  FB0XW00.FB0XWIXM = 1; /* set index*/
  while (FB0XW00.FB0XWIXM <= 6)
    set FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] initialAttributes;
    FB0XW00.FB0XWIXM = FB0XW00.FB0XWIXM + 1; /* increment*/
  end
  ;
  set FB0XM010.FB0XM-BEG-PO-YYM1M2 initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XM010.FB0XM-XCT-CTRY-CD[1] == "?"
   || FB0XM010.FB0XM-XCT-CTRY-CD[2] == "?"
   || FB0XM010.FB0XM-XCT-CTRY-CD[3] == "?"
   || FB0XM010.FB0XM-XCT-CTRY-CD[4] == "?"
   || FB0XM010.FB0XM-XCT-CTRY-CD[5] == "?"
   || FB0XM010.FB0XM-XCT-CTRY-CD[6] == "?")
    ;
    if (converseVar.eventKey not enter) /* enter was not pressed*/
      ;
      FB0XW00.XXXPRCNM = "FB0X400"; /* save process name*/
      converseLib.validationFailed(116); /* pf key cannot be used with list*/
      ;
      exit stack;
      ;
    end
    ;
  else
    ;
    return; /* return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/
  ;
  FB0XW00.FB0XWIXM = 1; /* init index*/
  ;
  while (FB0XW00.FB0XWIXM <= 6) /* for all country codes*/
    ;
    if (FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] == "?") /* list requested*/
      ;
      XPXX001(); /* window initialization;*/
      XX0XW02.XX0XWHDR = "COUNTRY CODE"; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until end of request*/
        XPXCT01(); /* display the list*/
      end
      ;
      if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
        FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] = FB0XW01.FB0XW-XCT-CTRY-CD[FB0XWIXM];
      else
        FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] = XCTTBL.XCTCD[XX0XWPIX];
      end
      ;
    end
    FB0XW00.FB0XWIXM = FB0XW00.FB0XWIXM + 1; /* increment*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* clear screen before display*/
  ;
  FB0XW00.XXXPRCNM = "FB0X400";
  converseLib.validationFailed(97); /* press enter to continue*/
  ;
  exit stack;
  ;
  ;
end // end FB0X400

// Verify entered data
Function FB0X500()
  ;
   /* ----------------------------------------------------*/
   /* highlight any application data that was entered*/
   /* ----------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* application data was entered*/
    ;
    FB0XW00.XXXPRCNM = "FB0X500"; /* module identification*/
    set FB0XM010.CAITEM cursor, bold; /* highlight*/
    converseLib.validationFailed(40); /* enter only with FAST PATH*/
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Validate begin po range.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0XM010.FB0XM-BEG-PO-YYM1M2 != 0)
    FB0X510(); /* Edit beg po rng*/
  end
  ;
   /* ----------------------------------------------------*/
   /* Verify country codes against corporate country table*/
   /* ----------------------------------------------------*/
  ;
  FB0XW00.FB0XWIXM = 6; /* initialize index*/
  while (FB0XW00.FB0XWIXM > 0)
    if (FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] > "  " /* code has value*/
     && FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] != "*") /* not wildcard*/
      if (FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] in XCTTBL.XCTCD
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        FB0XW00.XXXPRCNM = "FB0X500"; /* module identification*/
        set FB0XM010.FB0XM-XCT-CTRY-CD[FB0XWIXM] cursor, bold;
        converseLib.validationFailed(010); /* invalid value*/
      end
    end
    FB0XW00.FB0XWIXM = FB0XW00.FB0XWIXM - 1; /* decrement*/
  end
  ;
   /* ----------------------------------------------------*/
   /* if any errors found, exit to redisplay the map.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack;
  end
  ;
  ;
end // end FB0X500

// Edit beg po range
Function FB0X510()
  ;
  FB0XW00.FB0XW-WORK-PO-YYM1M2 = FB0XM010.FB0XM-BEG-PO-YYM1M2;
  if (FB0XW00.FB0XW-WORK-PO-YY < 80)
    FB0XW00.FB0XW-WORK-PO-CC = 20;
  else
    FB0XW00.FB0XW-WORK-PO-CC = 19;
  end
  FB0XW00.FB0XW-BEG-PO-ID-RNG = FB0XW00.FB0XW-WORK-PO-CCYYM1M2;
  ;
  FB0XW00.FB0XW-WORK-PO-YYM1M2 = FB0XM010.FB0XM-END-PO-YYM1M2;
  if (FB0XW00.FB0XW-WORK-PO-YY < 80)
    FB0XW00.FB0XW-WORK-PO-CC = 20;
  else
    FB0XW00.FB0XW-WORK-PO-CC = 19;
  end
  FB0XW00.FB0XW-END-PO-ID-RNG = FB0XW00.FB0XW-WORK-PO-CCYYM1M2;
  if (FB0XW00.FB0XW-BEG-PO-ID-RNG > FB0XW00.FB0XW-END-PO-ID-RNG)
    FB0XW00.XXXPRCNM = "FB0X510"; /* module identification*/
    set FB0XM010.FB0XM-BEG-PO-YYM1M2 cursor, bold;
    converseLib.validationFailed(250); /* Beg cannot be gt end*/
  else
    FB0XW00.FB0XW-WORK-PO-YYM1M2 = FB0XM010.FB0XM-BEG-PO-YYM1M2;
    if (FB0XW00.FB0XW-WORK-PO-YY < 80)
      FB0XW00.FB0XW-WORK-PO-CC = 20;
    else
      FB0XW00.FB0XW-WORK-PO-CC = 19;
    end
    if (FB0XW00.FB0XW-WORK-PO-M1 < 1
     || FB0XW00.FB0XW-WORK-PO-M1 > 12)
      FB0XW00.XXXPRCNM = "FB0X510"; /* module identification*/
      set FB0XM010.FB0XM-BEG-PO-YYM1M2 cursor, bold;
      converseLib.validationFailed(010); /* Invalid value*/
    end
    if (FB0XW00.FB0XW-WORK-PO-M2 < 1
     || FB0XW00.FB0XW-WORK-PO-M2 > 12)
      FB0XW00.XXXPRCNM = "FB0X510"; /* module identification*/
      set FB0XM010.FB0XM-BEG-PO-YYM1M2 cursor, bold;
      converseLib.validationFailed(010); /* Invalid value*/
    end
    if (FB0XW00.FB0XW-WORK-PO-M2 < FB0XW00.FB0XW-WORK-PO-M1)
      FB0XW00.FB0XW-PO-MONTH-DIFF = FB0XW00.FB0XW-WORK-PO-M1       - FB0XW00.FB0XW-WORK-PO-M2;
      if (FB0XW00.FB0XW-PO-MONTH-DIFF != 10)
        FB0XW00.XXXPRCNM = "FB0X510"; /* module identification*/
        set FB0XM010.FB0XM-BEG-PO-YYM1M2 cursor, bold;
        converseLib.validationFailed(010); /* Invalid value*/
      end
    else
      FB0XW00.FB0XW-PO-MONTH-DIFF = FB0XW00.FB0XW-WORK-PO-M2       - FB0XW00.FB0XW-WORK-PO-M1;
      if (FB0XW00.FB0XW-PO-MONTH-DIFF != 2)
        FB0XW00.XXXPRCNM = "FB0X510"; /* module identification*/
        set FB0XM010.FB0XM-BEG-PO-YYM1M2 cursor, bold;
        converseLib.validationFailed(010); /* Invalid value*/
      end
    end
  end
  ;
  ;
end // end FB0X510

// Process valid input request
Function FB0X600()
   /* ------------------------------------------------------------*/
   /* if necessary, redisplay data with message:*/
   /* 'press enter to continue'.  save data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XW01.FB0XW-XCT-CTRY-CD[1] != FB0XM010.FB0XM-XCT-CTRY-CD[1]
   || FB0XW01.FB0XW-XCT-CTRY-CD[2] != FB0XM010.FB0XM-XCT-CTRY-CD[2]
   || FB0XW01.FB0XW-XCT-CTRY-CD[3] != FB0XM010.FB0XM-XCT-CTRY-CD[3]
   || FB0XW01.FB0XW-XCT-CTRY-CD[4] != FB0XM010.FB0XM-XCT-CTRY-CD[4]
   || FB0XW01.FB0XW-XCT-CTRY-CD[5] != FB0XM010.FB0XM-XCT-CTRY-CD[5]
   || FB0XW01.FB0XW-XCT-CTRY-CD[6] != FB0XM010.FB0XM-XCT-CTRY-CD[6]
   || FB0XW01.FB0XW-BEG-PO-YYM1M2 != FB0XM010.FB0XM-BEG-PO-YYM1M2)
    ;
    FB0XW01.FB0XW-XCT-CTRY-CD[1] = FB0XM010.FB0XM-XCT-CTRY-CD[1];
    FB0XW01.FB0XW-XCT-CTRY-CD[2] = FB0XM010.FB0XM-XCT-CTRY-CD[2];
    FB0XW01.FB0XW-XCT-CTRY-CD[3] = FB0XM010.FB0XM-XCT-CTRY-CD[3];
    FB0XW01.FB0XW-XCT-CTRY-CD[4] = FB0XM010.FB0XM-XCT-CTRY-CD[4];
    FB0XW01.FB0XW-XCT-CTRY-CD[5] = FB0XM010.FB0XM-XCT-CTRY-CD[5];
    FB0XW01.FB0XW-XCT-CTRY-CD[6] = FB0XM010.FB0XM-XCT-CTRY-CD[6];
    FB0XW01.FB0XW-BEG-PO-YYM1M2 = FB0XM010.FB0XM-BEG-PO-YYM1M2;
    FB0XW00.FB0XW-BEG-PO-ID-RNG = FB0XW00.FB0XW-WORK-PO-CCYYM1M2;
  end
  ;
   /* ------------------------------------------------------------*/
   /* determine which environment the program is executing in:*/
   /* development or production.*/
   /* ------------------------------------------------------------*/
  ;
  FB0X610(); /* determine region*/
  ;
   /* ------------------------------------------------------------*/
   /* load parameter data into working storage record & submit*/
   /* test or production jcl.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XW01.FB0XW-BEG-PO-YYM1M2 == FB0XW01.FB0XW-END-PO-YYM1M2
   || FB0XW01.FB0XW-BEG-PO-YYM1M2 == 0)
    FB0X620(); /* load parameter for single po*/
    set TA6REC empty; /* init ta6rec*/
    if (TA3REC.TA3RGNID == "03") /* if production environment*/
      FB0X630(); /* submit production single po rpt*/
    else
      FB0X640(); /* submit test single po rpt*/
    end
  else
    FB0X660(); /* load parameter for mult po's*/
    set TA6REC empty; /* init ta6rec*/
    if (TA3REC.TA3RGNID == "03") /* if production environment*/
      FB0X670(); /* submit production mult po rpt*/
    else
      FB0X680(); /* submit test multiple po rpt*/
    end
  end
  ;
  FB0XW00.FB0XWSWF = "Y"; /* format the map*/
  ;
  ;
end // end FB0X600

// get region information
Function FB0X610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FB0XW00.XXXPRCNM = "FB0X610"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
end // end FB0X610

// Load single po parm data
Function FB0X620()
   /* ------------------------------------------------------------*/
   /* format parmater to be passed to batch side.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XM010.FB0XM-XCT-CTRY-CD[1] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[2] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[3] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[4] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[5] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[6] == "*")
    FB0XW02.FB0XW-XCT-CTRY-CD1 = "*";
    FB0XW02.FB0XW-XCT-CTRY-CD2 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD3 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD4 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD5 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD6 = "  ";
  else
    FB0XW02.FB0XW-XCT-CTRY-CD1 = FB0XM010.FB0XM-XCT-CTRY-CD[1];
    FB0XW02.FB0XW-XCT-CTRY-CD2 = FB0XM010.FB0XM-XCT-CTRY-CD[2];
    FB0XW02.FB0XW-XCT-CTRY-CD3 = FB0XM010.FB0XM-XCT-CTRY-CD[3];
    FB0XW02.FB0XW-XCT-CTRY-CD4 = FB0XM010.FB0XM-XCT-CTRY-CD[4];
    FB0XW02.FB0XW-XCT-CTRY-CD5 = FB0XM010.FB0XM-XCT-CTRY-CD[5];
    FB0XW02.FB0XW-XCT-CTRY-CD6 = FB0XM010.FB0XM-XCT-CTRY-CD[6];
  end
  ;
  FB0XW02.FB0XW-BEG-PO-RNG = FB0XW00.FB0XW-END-PO-ID-RNG;
  FB0XW02.FB0XW-END-PO-RNG = FB0XW00.FB0XW-END-PO-ID-RNG;
  ;
  ;
end // end FB0X620

// Prod JCL for single po rpt
Function FB0X630()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0XW00.FB0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0XW00.FB0XWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XT01.TARTYPE[FB0XWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XW02.FB0XW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0XT01.TARTYPE[FB0XWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XT01.TARJCL[FB0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0XT01.TARTYPE[FB0XWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XT01.TARJCL[FB0XWIXT] == "/*EOF") /* End of table*/
      ;
      FB0XW00.FB0XWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0XW00.FB0XWIXT = FB0XW00.FB0XWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0XM010.XXXPRCNM = "FB0X630"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0XM010.XXXPRCNM = "FB0X630"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0X630

// Test JCL for single po rpt
Function FB0X640()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0XW00.FB0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0XW00.FB0XWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XTT1.TARTYPE[FB0XWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XW02.FB0XW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0XTT1.TARTYPE[FB0XWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XTT1.TARJCL[FB0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0XTT1.TARTYPE[FB0XWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XTT1.TARJCL[FB0XWIXT] == "/*EOF") /* End of table*/
      ;
      FB0XW00.FB0XWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0XW00.FB0XWIXT = FB0XW00.FB0XWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0XM010.XXXPRCNM = "FB0X640"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0XM010.XXXPRCNM = "FB0X640"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0X640

// Load mult po parm data
Function FB0X660()
   /* ------------------------------------------------------------*/
   /* format parmater to be passed to batch side.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0XM010.FB0XM-XCT-CTRY-CD[1] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[2] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[3] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[4] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[5] == "*"
   || FB0XM010.FB0XM-XCT-CTRY-CD[6] == "*")
    FB0XW02.FB0XW-XCT-CTRY-CD1 = "*";
    FB0XW02.FB0XW-XCT-CTRY-CD2 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD3 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD4 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD5 = "  ";
    FB0XW02.FB0XW-XCT-CTRY-CD6 = "  ";
  else
    FB0XW02.FB0XW-XCT-CTRY-CD1 = FB0XM010.FB0XM-XCT-CTRY-CD[1];
    FB0XW02.FB0XW-XCT-CTRY-CD2 = FB0XM010.FB0XM-XCT-CTRY-CD[2];
    FB0XW02.FB0XW-XCT-CTRY-CD3 = FB0XM010.FB0XM-XCT-CTRY-CD[3];
    FB0XW02.FB0XW-XCT-CTRY-CD4 = FB0XM010.FB0XM-XCT-CTRY-CD[4];
    FB0XW02.FB0XW-XCT-CTRY-CD5 = FB0XM010.FB0XM-XCT-CTRY-CD[5];
    FB0XW02.FB0XW-XCT-CTRY-CD6 = FB0XM010.FB0XM-XCT-CTRY-CD[6];
  end
  ;
  FB0XW02.FB0XW-BEG-PO-RNG = FB0XW00.FB0XW-BEG-PO-ID-RNG;
  FB0XW02.FB0XW-END-PO-RNG = FB0XW00.FB0XW-END-PO-ID-RNG;
  ;
  ;
end // end FB0X660

// Prod JCL for multiple po rpt
Function FB0X670()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0XW00.FB0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0XW00.FB0XWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XT02.TARTYPE[FB0XWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XW02.FB0XW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0XT02.TARTYPE[FB0XWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XT02.TARJCL[FB0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0XT02.TARTYPE[FB0XWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XT02.TARJCL[FB0XWIXT] == "/*EOF") /* End of table*/
      ;
      FB0XW00.FB0XWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0XW00.FB0XWIXT = FB0XW00.FB0XWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0XM010.XXXPRCNM = "FB0X670"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0XM010.XXXPRCNM = "FB0X670"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0X670

// Test JCL for multiple po rpt
Function FB0X680()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0XW00.FB0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0XW00.FB0XWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XTT2.TARTYPE[FB0XWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XW02.FB0XW-PARM;
      TA6REC.TARTYPE[TA6INDEX] = FB0XTT2.TARTYPE[FB0XWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0XTT2.TARJCL[FB0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0XTT2.TARTYPE[FB0XWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0XTT2.TARJCL[FB0XWIXT] == "/*EOF") /* End of table*/
      ;
      FB0XW00.FB0XWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0XW00.FB0XWIXT = FB0XW00.FB0XWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
  TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0XM010.XXXPRCNM = "FB0X680"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0XM010.XXXPRCNM = "FB0X680"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0X680

//*** RECORD=FB0XW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0XW00 type basicRecord
  5 * char(36) ; 
    10 FB0XWSWF FB0XWSWF ; 
    10 FB0XWRDF FB0XWRDF ; 
    10 FB0XWIXM FB0XWIXM ; 
    10 FB0XWIXT FB0XWIXT ; 
    10 XXXPRCNM XXXPRCNM ; 
    10 FB0XW-WORK-PO-CCYYM1M2 FB0XW-WORK-PO-CCYYM1M2 ; 
      15 FB0XW-WORK-PO-CC FB0XW-WORK-PO-CC ; 
      15 FB0XW-WORK-PO-YYM1M2 FB0XW-WORK-PO-YYM1M2 ; 
        20 FB0XW-WORK-PO-YY FB0XW-WORK-PO-YY ; 
        20 FB0XW-WORK-PO-M1 FB0XW-WORK-PO-M1 ; 
        20 FB0XW-WORK-PO-M2 FB0XW-WORK-PO-M2 ; 
    10 FB0XW-BEG-PO-ID-RNG FB0XW-BEG-PO-ID-RNG ; 
    10 FB0XW-END-PO-ID-RNG FB0XW-END-PO-ID-RNG ; 
    10 FB0XW-PO-MONTH-DIFF FB0XW-PO-MONTH-DIFF ; 
end // end FB0XW00

//*** RECORD=FB0XW01 ****
// ---------------------------------------------------
// Map 010 display storage.
// ---------------------------------------------------
// ***********************
Record FB0XW01 type basicRecord
  5 FB0XW-XCT-CTRY-CD FB0XW-XCT-CTRY-CD [6] ; 
  5 FB0XW-BEG-PO-YYM1M2 FB0XW-BEG-PO-YYM1M2 ; 
  5 FB0XW-END-PO-YYM1M2 FB0XW-END-PO-YYM1M2 ; 
end // end FB0XW01

//*** RECORD=FB0XW02 ****
// ---------------------------------------------------
// Working Storage to hold parm data passed to FB252D.
// ---------------------------------------------------
// ***********************
Record FB0XW02 type basicRecord
  5 FB0XW-PARM FB0XW-PARM ; 
    10 FB0XW-XCT-CTRY-CD1 FB0XW-XCT-CTRY-CD1 ; 
    10 FB0XW-XCT-CTRY-CD2 FB0XW-XCT-CTRY-CD2 ; 
    10 FB0XW-XCT-CTRY-CD3 FB0XW-XCT-CTRY-CD3 ; 
    10 FB0XW-XCT-CTRY-CD4 FB0XW-XCT-CTRY-CD4 ; 
    10 FB0XW-XCT-CTRY-CD5 FB0XW-XCT-CTRY-CD5 ; 
    10 FB0XW-XCT-CTRY-CD6 FB0XW-XCT-CTRY-CD6 ; 
    10 FB0XW-BEG-PO-RNG FB0XW-BEG-PO-RNG ; 
    10 FB0XW-END-PO-RNG FB0XW-END-PO-RNG ; 
    10 * char(40) ; 
end // end FB0XW02

// Save po beg ccyym1m2
DataItem FB0XW-BEG-PO-ID-RNG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin po range
DataItem FB0XW-BEG-PO-RNG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Begin po yym1m2
DataItem FB0XW-BEG-PO-YYM1M2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save po end ccyym1m2
DataItem FB0XW-END-PO-ID-RNG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end po range
DataItem FB0XW-END-PO-RNG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending po yym1m2
DataItem FB0XW-END-PO-YYM1M2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm record
DataItem FB0XW-PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO month rng difference
DataItem FB0XW-PO-MONTH-DIFF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po century
DataItem FB0XW-WORK-PO-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po ccyym1m2
DataItem FB0XW-WORK-PO-CCYYM1M2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po month1
DataItem FB0XW-WORK-PO-M1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po month2
DataItem FB0XW-WORK-PO-M2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po year
DataItem FB0XW-WORK-PO-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work po yym1m2
DataItem FB0XW-WORK-PO-YYM1M2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// country code
DataItem FB0XW-XCT-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code1
DataItem FB0XW-XCT-CTRY-CD1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code2
DataItem FB0XW-XCT-CTRY-CD2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code3
DataItem FB0XW-XCT-CTRY-CD3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code4
DataItem FB0XW-XCT-CTRY-CD4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code5
DataItem FB0XW-XCT-CTRY-CD5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code6
DataItem FB0XW-XCT-CTRY-CD6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index
DataItem FB0XWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB0XWIXT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data flag
DataItem FB0XWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map switch
DataItem FB0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

