package fb0p;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXMODID;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpy2.YSMXOT;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB4REC;
import fb.common.FB5FRMDT;
import fb.common.FB5REC;
import fb.common.FB5TODT;
import fb.common.FB6REC;
import fb.common.FBWREC;
import ff.common.FF00ENU;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0P ****
// This application displays the Selection Criteria used to
// make up the size curve. This screen can be transferred to
// from Maintenance to enable the user to verify the criteria
// used in creating the size curve.
// 
// If the curve is assigned a curve number will appear, other-
// wise, a dummy number will appear.
// 
// The user will be able to scroll forward through the data
// using PF8, and backwards using PF7.
// 
// The user may exit to any allowed application, via Fast Path
// or PF key.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/21/89  cnewma  New application.
//          10/02/93  ldeluh  Replace xsexit with xsfbs01
//                            which then calls xsexit.
// *********************
Program FB0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0PW00 FB0PW00; // record
  FB0PW01 FB0PW01; // record
  FB1REC FB1REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FB6REC FB6REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0PM.FB0PM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FB0PM010 initial; /* M010 input/output*/
    set FB0PW00 empty; /* Working storage*/
    set FB0PW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Check input data to determine if requested curve is an*/
     /* assigned curve. if it is an assigned curve, continue*/
     /* processing.*/
     /* ------------------------------------------------------------*/

    FB0PW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    if (FBWREC.SY1STNBR != " " /* gpc code*/
     && FBWREC.SY2CLRID != " " /* color id*/
     && FBWREC.XDMCD != " "    /* dimension code*/
     && FBWREC.XQACD != " "    /* quality code*/
     && FBWREC.PC2INSEG != " " /* spec difference code*/
     && FBWREC.XSACD != " "    /* shade code*/
     && FBWREC.XPGCD != " "    /* packaging type code*/
     && FBWREC.XUMCD != " "    /* unit of measure code*/
     && FBWREC.FB1INSEQ != 0)  /* internal sequence number*/
      FB0PW00.FB0PWSPR = "P"; /* indicate valid product curve*/
    else
      FB0PW00.FB0PWSPR = "I"; /* indicate invalid product curve*/
      converseLib.validationFailed(42);
    end

    FB0PW00.FB1INSEQ = FBWREC.FB1INSEQ; /* save sequence number*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0P001; /* Converse the main process*/


    FB0P001: FB0P001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FB0P001; /* Converse the main process*/


  end // end main
end // end FB0P

// Inquire/maintain a table row
Function FB0P001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FB0P100(); /* Obtain the data to display*/

  FB0P200(); /* Format and display the map*/

  FB0P300(); /* Check attention identifier*/

  FB0P400(); /* Reset fields to normal intensity*/

  FB0P500(); /* Verify the entered data*/

  FB0P600(); /* Process valid input request*/


end // end FB0P001

// Obtain the data to display
Function FB0P100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0PW00.FB0PWSDR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  FB0PW00.FB0PWRNA = "N"; /* reset switch*/

  if (FB0PW00.FB0PWNA == "Y") /* no user action taken*/
    return; /* Return to previous process*/
  end

  FB0P110(); /* Get selection criteria*/

  FB0P120(); /* list selection products*/

end // end FB0P100

// Get selection criteria
Function FB0P110()
   /* ------------------------------------------------------------*/
   /* get row from table - vselhd01*/
   /* ------------------------------------------------------------*/

  FB0P111(); /* get row from table*/

   /* ------------------------------------------------------------*/
   /* Select and set cursor from table  - vseldt01*/
   /* ------------------------------------------------------------*/

  FB0P112(); /* Select and set cursor*/

   /* ------------------------------------------------------------*/
   /* Get the next row to display from the table - vseldt01*/
   /* ------------------------------------------------------------*/

  while (FB0PW00.FB0PWDCF != "Y")
    FB0P113(); /* Get next table row*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor from table   - vseldt01*/
   /* ------------------------------------------------------------*/

  FB0P114(); /* close cursor*/


  FB0PM010.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/


end // end FB0P110

// Get header data
Function FB0P111()
   /* ------------------------------------------------------------*/
   /* Initialize row storage area*/
   /* Format record key*/
   /* ------------------------------------------------------------*/

  set FB1REC empty; /* Initialize row storage*/

  FB1REC.FB1INSEQ = FB0PW00.FB1INSEQ; /* initialize seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select requested row from table - vselhd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select table row*/

   /* ------------------------------------------------------------*/
   /* If sucessful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      FB0PM010.FB1CMNT = FB1REC.FB1CMNT; /* comments*/
      FB0PM010.FB1INCDS = FB1REC.FB1INCDS; /* direct ship flag*/
      FB0PM010.FB0PMNBR = "CURVE NBR:"; /* label map field*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* If data not found, abort the application; otherwise, indi-*/
   /* cate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(11); /* 'RECORD NOT ON DATABASE'*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/

        converseLib.validationFailed(19); /* 'RESOURCES UNAVAILABLE'*/
        FB0PW00.FB0PWRNA = "Y"; /* reSOURCES UNAVAILABLE switch*/
        TA1REC.TA1FUNC = "POST"; /* termination function*/

      else
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        converseLib.validationFailed(01); /* 'ERROR - PLEASE NOTIFY PROGRAMMING'*/
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  FB0PM010.XXXMODID = "111"; /* module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "GET VSELHD01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end FB0P111

// select set date table cursor
Function FB0P112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set FB5REC empty; /* clear row storage area*/
  FB0PW00.FB0PWDCF = "N"; /* End of vseldt01 flag*/
  FB0PW00.FB0PWFD = "Y"; /* First date record flag*/


   /* ------------------------------------------------------------*/
   /* Format the key with saved sequence number from vcurve01 or*/
   /* vselhd01.*/
   /* ------------------------------------------------------------*/

  FB5REC.FB1INSEQ = FB0PW00.FB1INSEQ;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table vseldt01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    FB0PW00.FB0PWRNA = "Y"; /* Resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSELDT01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P112

// get next row date table
Function FB0P113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FB0PW00.FB0PWFD == "Y") /* indicates first date record*/
        FB0PW00.FB0PWMIX = 0; /* initialize index*/
        FB0PW00.FB0PWFD = "N"; /* reset switch*/
        FB0PW00.FB0PWFDT = FB5REC.FB5FRMDT; /* save from date*/
        FB0PW00.FB0PWTDT = FB5REC.FB5TODT; /* save to date*/
        FB0PM010.FB0PMMM1 = FB0PW00.FB0PWFMM; /* from month*/
        FB0PM010.FB0PMYY1 = FB0PW00.FB0PWFYY; /* from year*/
        FB0PM010.FB0PMMM2 = FB0PW00.FB0PWTMM; /* to month*/
        FB0PM010.FB0PMYY2 = FB0PW00.FB0PWTYY; /* to year*/
      end

      if (FB5REC.FB5FRMDT == FB0PW00.FB0PWFDT /* from dates equal*/
       && FB5REC.FB5TODT == FB0PW00.FB0PWTDT) /* to dates equal*/
        FB0PW00.FB0PWMIX = FB0PW00.FB0PWMIX + 1; /* increment index*/
        FB0PM010.YSMXOT[FB0PWMIX] = FB5REC.YSMXOT; /* move order type*/

      else

        FB0PW00.FB0PWMIX = 4; /* set index to next date set*/
        FB0PW00.FB0PWFDT = FB5REC.FB5FRMDT; /* save from date*/
        FB0PW00.FB0PWTDT = FB5REC.FB5TODT; /* save to date*/
        FB0PM010.FB0PMMM3 = FB0PW00.FB0PWFMM; /* from month*/
        FB0PM010.FB0PMYY3 = FB0PW00.FB0PWFYY; /* from year*/
        FB0PM010.FB0PMMM4 = FB0PW00.FB0PWTMM; /* to month*/
        FB0PM010.FB0PMYY4 = FB0PW00.FB0PWTYY; /* to year*/
        FB0PM010.YSMXOT[FB0PWMIX] = FB5REC.YSMXOT; /* move order type*/
      end

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0PW00.FB0PWDCF = "Y"; /* indicate end of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "113"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    FB0PW00.FB0PWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P113

// close date table cursor
Function FB0P114()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P114

// Get style data
Function FB0P120()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/

  set FB6REC empty; /* clear row storage area*/

  FB0PW00.FB0PWSTR = 1; /* init start storage field*/
  FB0PW00.FB0PWEND = 11; /* init end storage field*/
  FB0PW00.FB0PWTOT = 0; /* init total stored fields*/
  FB0PW00.FB0PWIX2 = 1; /* init index*/
   /* ------------------------------------------------------------*/
   /* Format the key*/
   /* ------------------------------------------------------------*/

  FB6REC.FB1INSEQ = FBWREC.FB1INSEQ; /* sequence number*/

   /* ------------------------------------------------------------*/
   /* IO to select and open vselst01*/
   /* ------------------------------------------------------------*/

  FB0P121(); /* Select set vselst01 cursor*/

   /* ------------------------------------------------------------*/
   /* Select all vselst01 rows*/
   /* ------------------------------------------------------------*/

  while (FB0PW00.FB0PWDCF != "Y") /* Until end vselst01 cursor*/
    FB0P122(); /* Fetch next vselst01 rows*/
  end

   /* ------------------------------------------------------------*/
   /* IO to close vselst01 set*/
   /* ------------------------------------------------------------*/

  FB0P123(); /* close vselst01 cursor*/

   /* ------------------------------------------------------------*/
   /* Display first page of data*/
   /* ------------------------------------------------------------*/

  if (FB0PW00.FB0PWTOT < 11)
    FB0PW00.FB0PWEND = FB0PW00.FB0PWTOT;
  end

  FB0P124(); /* display first page of data*/


end // end FB0P120

// select set vselst01 cursor
Function FB0P121()
  FB0PW00.FB0PWDCF = "N"; /* End of vselst01 flag*/


   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("S1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0PWIXM = 0;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    FB0PW00.FB0PWRNA = "Y"; /* Resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSELST01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P121

// get next vselst01 row
Function FB0P122()
   /* ------------------------------------------------------------*/
   /* select all rows from table vselst01 that contain data*/
   /* pertaining to the requested style number.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("N1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0PW00.FB1INSEQ = FB6REC.FB1INSEQ; /* sequence number*/

      /* ------------------------------------------------------------*/
       /* Move data from vcurve01 row to storage*/
      /* ------------------------------------------------------------*/

      FB0PW00.FB0PWIXM = FB0PW00.FB0PWIXM + 1;
      FB0PW00.FB0PWTOT = FB0PW00.FB0PWTOT + 1;

      if (FB6REC.SYBSTGNB != " ")
        FB0PW01.SY1STNBR[FB0PWIXM] = " "; /* style nbr*/
        FB0PW01.SY2CLRID[FB0PWIXM] = " "; /* color id*/
        FB0PW01.XDMCD[FB0PWIXM] = " "; /* dimension*/
        FB0PW01.SYBSTGNB[FB0PWIXM] = FB6REC.SYBSTGNB;
                                   /* style grp nbr*/
      else
        FB0PW01.SYBSTGNB[FB0PWIXM] = " "; /* style grp nbr*/
        FB0PW01.SY1STNBR[FB0PWIXM] = FB6REC.SY1STNBR; /* style nbr*/
        FB0PW01.SY2CLRID[FB0PWIXM] = FB6REC.SY2CLRID; /* color id*/
        FB0PW01.XDMCD[FB0PWIXM] = FB6REC.XDMCD; /* dimension*/

        FB0P125(); /* get product description*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FB0PW00.FB0PWDCF = "Y";
                                   /* Indicate vselst01 end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "122"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

    converseLib.validationFailed(19); /* 'resources unavailable'*/
    FB0PW00.FB0PWRNA = "Y"; /* resources unavailable switch*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB6REC.FB6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P122

// close vselst01 cursor
Function FB0P123()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3060" ("C1", SQLCA, FB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FB0PM010.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELST01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0PM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELST01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0P123

// Display first page of data
Function FB0P124()
   /* ------------------------------------------------------------*/
   /* display first page of data*/
   /* ------------------------------------------------------------*/

  FB0PW00.FB0PWMIX = 1;

  while (FB0PW00.FB0PWMIX <= FB0PW00.FB0PWEND)
    FB0PM010.SY1STNBR[FB0PWMIX] = FB0PW01.SY1STNBR[FB0PWIX2];
    FB0PM010.SY2CLRID[FB0PWMIX] = FB0PW01.SY2CLRID[FB0PWIX2];
    FB0PM010.XDMCD[FB0PWMIX] = FB0PW01.XDMCD[FB0PWIX2];
    FB0PM010.SYBSTGNB[FB0PWMIX] = FB0PW01.SYBSTGNB[FB0PWIX2];
    FB0PM010.SY1STYNM[FB0PWMIX] = FB0PW01.SY1STYNM[FB0PWIX2];
    FB0PM010.SY2CLRAB[FB0PWMIX] = FB0PW01.SY2CLRAB[FB0PWIX2];
    FB0PW00.FB0PWMIX = FB0PW00.FB0PWMIX + 1;
    FB0PW00.FB0PWIX2 = FB0PW00.FB0PWIX2 + 1;

  end


end // end FB0P124

// Get product descriptions
Function FB0P125()
   /* ------------------------------------------------------------*/
   /* Obtain style and color description*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = FB6REC.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FB6REC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FB6REC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FB6REC.XDMCD; /* dimension code*/

  XSPG202();

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0PW01.SY2CLRAB[FB0PWIXM] = PG2REC.SY2CLRAB; /* color desc*/
      FB0PW01.SY1STYNM[FB0PWIXM] = PG2REC.SY1STYNM; /* style name*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0PW01.SY2CLRAB[FB0PWIXM] = "UNKNOWN"; /* color desc*/
        FB0PW01.SY1STYNM[FB0PWIXM] = "UNKNOWN"; /* style desc*/
      end
    end
  end


end // end FB0P125

// Format and converse the map
Function FB0P200()
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0PM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0PM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0PM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Message to display*/

    set FB0PM010 alarm; /* Indicate sound alarm*/

  end

  converse FB0PM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FB0PM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0PM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0PM010.CAITEM; /* Application data*/


end // end FB0P200

// Check attention identifier
Function FB0P300()
   /* ------------------------------------------------------------*/
   /* reset no user action taken switch*/
   /* ------------------------------------------------------------*/

  FB0PW00.FB0PWNA = "N"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* reset request for data switch*/
   /* ------------------------------------------------------------*/

  FB0PW00.FB0PWSDR = "Y"; /* reset switch*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFBS01();

    else

      converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
      FB0PM010.XXXMODID = "300"; /* module identification*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    FB0PM010.XXXMODID = "300"; /* Module identification*/
    set FB0PM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "FB0P"; /* selection criteria*/
    XSFBS01();
    FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CAITEM = "FB0PM010"; /* Application find code*/
    COMMAREA.CATOAP = "GD01"; /* size/maint sel*/
    XSFBS01(); /* Exit to another application*/
    FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  else

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0D"; /* size/maint sel*/
      XSFBS01();
      FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else

      if (converseVar.eventKey is pf5) /* pf5 was pressed*/
        COMMAREA.CATOAP = "FY0M"; /* prod menu*/
        XSFBS01();
        FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
    end
  end

  if (converseVar.eventKey is pf7 /* scrolling requested*/
   || converseVar.eventKey is pf8) /* scrolling requested*/
    FB0PW00.FB0PWPGS = "Y"; /* set paging switch*/
    while (FB0PW00.FB0PWPGS != "N")
      FB0P310(); /* scroll data*/
    end
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (FB0PW00.FB0PWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0N"; /* size percent maintenance*/
      XSFBS01();
      FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end

  if (converseVar.eventKey is pf14) /* PF15 was pressed*/
    if (FB0PW00.FB0PWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0O"; /* region percent maintenance*/
      XSFBS01();
      FB0PM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (FB0PW00.FB0PWRNA == "Y") /* resources previously unavailable*/
      /* next sentence*/
    else
      FB0PW00.FB0PWNA = "Y"; /* indicate no user action taken*/
    end
    return;
  end

  FB0PM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3); /* 'pf key not supported'*/
  exit stack; /* return to show error msg*/


end // end FB0P300

// Check for scrolling request
Function FB0P310()

  if (converseVar.eventKey is pf7)
    FB0PW00.FB0PWSDR = "N";
    if (FB0PW00.FB0PWSPR != "I")
      FB0PW00.FB0PWSTR = FB0PW00.FB0PWSTR - 11;
      FB0PW00.FB0PWEND = FB0PW00.FB0PWEND - 11;

      if (FB0PW00.FB0PWSTR <= 0)
        converseLib.validationFailed(6);
        FB0PW00.FB0PWSTR = FB0PW00.FB0PWSTR + 11; /* reset start*/
        FB0PW00.FB0PWEND = FB0PW00.FB0PWEND + 11; /* reset end*/
        exit stack;

      else
        FB0PW00.FB0PWMIX = 1;
        FB0PW00.FB0PWIX2 = FB0PW00.FB0PWSTR;
        while (FB0PW00.FB0PWIX2 <= FB0PW00.FB0PWEND)
          FB0P311(); /* move stored fields to map*/
          FB0PW00.FB0PWIX2 = FB0PW00.FB0PWIX2 + 1;
          FB0PW00.FB0PWMIX = FB0PW00.FB0PWMIX + 1;
        end
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf8)
    FB0PW00.FB0PWSDR = "N";
    if (FB0PW00.FB0PWSPR != "I")
      FB0PW00.FB0PWSTR = FB0PW00.FB0PWSTR + 11;
      FB0PW00.FB0PWEND = FB0PW00.FB0PWEND + 11;

      if (FB0PW00.FB0PWSTR > FB0PW00.FB0PWTOT)
        converseLib.validationFailed(7);
        FB0PW00.FB0PWSTR = FB0PW00.FB0PWSTR - 11; /* reset start*/
        FB0PW00.FB0PWEND = FB0PW00.FB0PWEND - 11; /* reset end*/
        exit stack;

      else
        FB0PW00.FB0PWMIX = 1;
        FB0PW00.FB0PWIX2 = FB0PW00.FB0PWSTR;
        while (FB0PW00.FB0PWIX2 <= FB0PW00.FB0PWEND)
          FB0P311(); /* move stored fields to map*/
          FB0PW00.FB0PWIX2 = FB0PW00.FB0PWIX2 + 1;
          FB0PW00.FB0PWMIX = FB0PW00.FB0PWMIX + 1;
        end
        exit stack;
      end
    end
  end

  if (converseVar.eventKey not pf7 /* no scrolling requested*/
   && converseVar.eventKey not pf8) /* no scrolling requested*/
    FB0PW00.FB0PWPGS = "N"; /* indicate paging requests completed*/
  end


end // end FB0P310

// Move stored fields to map
Function FB0P311()
   /* ------------------------------------------------------------*/
   /* move stored fields to map fields*/
   /* ------------------------------------------------------------*/

  FB0PM010.SY1STNBR[FB0PWMIX] = FB0PW01.SY1STNBR[FB0PWIX2];
  FB0PM010.SY2CLRID[FB0PWMIX] = FB0PW01.SY2CLRID[FB0PWIX2];
  FB0PM010.XDMCD[FB0PWMIX] = FB0PW01.XDMCD[FB0PWIX2];
  FB0PM010.SYBSTGNB[FB0PWMIX] = FB0PW01.SYBSTGNB[FB0PWIX2];
  FB0PM010.SY1STYNM[FB0PWMIX] = FB0PW01.SY1STYNM[FB0PWIX2];
  FB0PM010.SY2CLRAB[FB0PWMIX] = FB0PW01.SY2CLRAB[FB0PWIX2];


end // end FB0P311

// Reset highlighted fields
Function FB0P400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FB0PM010.CATOAP initialAttributes; /* commarea to application*/
  set FB0PM010.CAITEM initialAttributes; /* Commarea application data*/


end // end FB0P400

// Verify the entered data
Function FB0P500()
   /* this application accepts no user entered data and therefore*/
   /* has no need to verify the entered data*/
end // end FB0P500

// Process valid input request
Function FB0P600()
   /* this application accepts no user entered data and therefore*/
   /* has no need to process an input request.*/
end // end FB0P600

//*** RECORD=FB0PW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0PW00 type basicRecord
  10 FB0PWSDR FB0PWSDR ; 
  10 FB0PWSPR FB0PWSPR ; 
  10 FB0PWSTD FB0PWSTD ; 
  10 FB0PWNA FB0PWNA ; 
  10 FB0PWRNA FB0PWRNA ; 
  10 FB0PWPGS FB0PWPGS ; 
  10 FB0PWFD FB0PWFD ; 
  10 XGPCD XGPCD ; 
  10 YSMXOT YSMXOT ; 
  10 FB0PWSTR FB0PWSTR ; 
  10 FB0PWEND FB0PWEND ; 
  10 FB0PWTOT FB0PWTOT ; 
  10 FB0PWIXM FB0PWIXM ; 
  10 FB0PWIX2 FB0PWIX2 ; 
  10 FB0PWMIX FB0PWMIX ; 
  10 FB1INSEQ FB1INSEQ ; 
  10 XXXMODID XXXMODID ; 
  10 FB0PWDCF FB0PWDCF ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 FB5FRMDT FB5FRMDT ; 
  10 FB0PWFDT FB0PWFDT ; 
    15 FB0PWF3 FB0PWF3 ; 
    15 FB0PWFYY FB0PWFYY ; 
    15 FB0PWFMM FB0PWFMM ; 
    15 FB0PWFDD FB0PWFDD ; 
  10 FB5TODT FB5TODT ; 
  10 FB0PWTDT FB0PWTDT ; 
    15 FB0PWT3 FB0PWT3 ; 
    15 FB0PWTYY FB0PWTYY ; 
    15 FB0PWTMM FB0PWTMM ; 
    15 FB0PWTDD FB0PWTDD ; 
end // end FB0PW00

//*** RECORD=FB0PW01 ****
// ****************** selection parameters ********************
// 
// DB2 TABLE VIEW:      dfcast.vcurve01
// 
// COPYLIB MEMBER:      DCL00542
// 
// I/O MODULE:          IO3020
// 
// KEY TO DB2 TABLE:    fb1inseq, xgpcd, sy1stnbr, sy2clrid,
//                     xdmcd, xqacd, xsdcd, xsacd, xpgcd, xumcd
// MAINTENANCE LOG:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/27/88  wdishm  New record definition.
// ***********************
Record FB0PW01 type basicRecord
  10 SYBSTGNB SYBSTGNB [200] ; 
  10 SY1STNBR SY1STNBR [200] ; 
  10 SY2CLRID SY2CLRID [200] ; 
  10 XDMCD XDMCD [200] ; 
  10 SY2CLRAB SY2CLRAB [200] ; 
  10 SY1STYNM SY1STYNM [200] ; 
end // end FB0PW01

// flag for vcurve01
DataItem FB0PWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end line index
DataItem FB0PWEND num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// leading zero and century
DataItem FB0PWF3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First date record switch
DataItem FB0PWFD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date day
DataItem FB0PWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from work date
DataItem FB0PWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date month
DataItem FB0PWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date year
DataItem FB0PWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FB0PWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index one for stored fields
DataItem FB0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map
DataItem FB0PWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No user action taken switch
DataItem FB0PWNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Paging switch
DataItem FB0PWPGS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Resources unavailable
DataItem FB0PWRNA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0PWSDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing switch
DataItem FB0PWSPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0PWSTD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start line index
DataItem FB0PWSTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// leading zero and century
DataItem FB0PWT3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date day
DataItem FB0PWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to work date
DataItem FB0PWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date month
DataItem FB0PWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total stored lines
DataItem FB0PWTOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date year
DataItem FB0PWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

