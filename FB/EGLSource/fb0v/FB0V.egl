package fb0v;

import corpcom1.CAUSERID;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom3.XPXDS01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXPRCNM;
import corpx1.XDSCD;
import corpx1.XDSTBL;
import fb.common.FBMREC;
import fb.common.FBWREC;
import pg.common.PG1SC4CD;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0V ****
// this program is part of the footwear buy system.
// 
// this application provides the capability of submitting the
// direct ship report fb2901.  the user is allowed to enter
// from 1 to 3 direct ship codes and beginning and ending need
// dates.  fb0v will reformat the data, pass the data to the
// batch programs, and submit the batch programs for execution.
// 
// the user will have the option of splitting the report by
// scheduler or printing the report for all schedulers.  if the
// user opts to split the report by schedulers, this
// application will generate a table of schedulers and use this
// table to generate a report submit for each scheduler.  if
// the user opts not to split the report by scheduler, this
// application will put an * in the scheduler code passed to
// the batch application, causing the batch application to
// gather information for all schedulers.
// 
// the user may exit via FAST PATH or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/13/91   jalle1   created.
// 11/12/91   jalle1   add option for mapper download.
// 07/21/93   ldeluh   Chg testrms to be testenc.
// 12/02/94   pmainw   Re-compile for table change (vfsctl01)
// 12/03/97   rgilli   Y2K MODIFICATIONS MADE TO:
//                     FB0V510: Change if statement to check if
//                              date entry fields = zero if so
//                              bypass edit.  See code.
// *********************
Program FB0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0VW00 FB0VW00; // record
  FB0VW01 FB0VW01; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0VT01; // table
  use FB0VT02 {deleteAfterUse = yes}; // table
  use FB0VTT1; // table
  use FB0VTT2 {deleteAfterUse = yes}; // table
  use XDSTBL; // table
  use FB0VM.FB0VM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* clear map fields/initialize records*/
     /* ------------------------------------------------------------*/
    set FB0VM010 initial;
    set FB0VW00 empty;
    set FB0VW01 empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA6REC empty;
    ;
    ;
    ;
    ;
    FB0VW00.FB0VWSWF = "Y"; /* format map flag*/
    FB0VW00.FB0VMRSF = "N"; /* split by sched. flag*/
    FB0VW00.FB0VM-RPT-DWN-FL = "P"; /* rpt or download flag*/
    ;
    goto FB0V001;
    FB0V001: FB0V001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the DRS Product Selection.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0V001; /* Converse report Selection*/
    ;
    ;
  end // end main
end // end FB0V

// report selection
Function FB0V001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0V100(); /* Obtain data to display*/
  ;
  FB0V200(); /* Format and display the map*/
  ;
  FB0V300(); /* Check attention identifier*/
  ;
  FB0V400(); /* Reset fields to normal intensity*/
  ;
  FB0V500(); /* Verify the entered data*/
  ;
  FB0V600(); /* Process valid input request*/
  ;
end // end FB0V001

// Obtain data to display
Function FB0V100()
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWRDF != "Y") /* Data not requested*/
    return;
  else
    ;
    if (converseVar.validationMsgNum == 0
     || converseVar.validationMsgNum == 333) /* press enter*/
      ;
       /* next sentence             ; Error found*/
      ;
    else
      ;
      return;
      ;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Get last day for 'from' month and put date in 'to' date.*/
   /* ------------------------------------------------------------*/
  ;
  set TA2REC empty;
  ;
  FB0VW00.FB0VWGMM = FB0VW00.FB0VMFMM;
  FB0VW00.FB0VWGDD = 0;
  FB0VW00.FB0VWGYY = FB0VW00.FB0VMFYY;
  ;
  TA2REC.TA2DTOPT = "LASTDAY"; /* date option*/
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = FB0VW00.FB0VWGRG; /* move greg date*/
  ;
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD == 0)
      ;
      FB0VW00.FB0VWDTT = TA2REC.TA2GRGAN; /* save date*/
      ;
    else
      ;
      converseLib.validationFailed(366); /* invalid from date*/
      FB0VW00.XXXPRCNM = "FB0V100"; /* module identification*/
      set FB0VM010.FB0VMFMM cursor, bold; /* highlight*/
      set FB0VM010.FB0VMFDD modified, bold; /* highlight*/
      set FB0VM010.FB0VMFYY modified, bold; /* highlight*/
    end
  end
  ;
  ;
  FB0VW00.FB0VWRDF = "N"; /* Data not requested*/
  FB0VW00.FB0VWSWF = "Y"; /* format the map*/
  ;
  ;
  ;
end // end FB0V100

// Format and display map 1
Function FB0V200()
  ;
   /* ------------------------------------------------------------*/
   /* if requested, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWSWF == "Y") /* format map*/
    FB0V210(); /* format map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0VM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  ;
  if (converseVar.validationMsgNum != 0)
    set FB0VM010 alarm; /* Indicate sound alarm*/
    FB0VM010.XXXPRCNM = FB0VW00.XXXPRCNM; /* Process number*/
  else
    FB0VM010.XXXPRCNM = "FB0V   "; /* Process number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 76)
    set FB0VM010.FB0VMFMM cursor;
  end
  ;
  ;
  converse FB0VM010 ;
  ;
   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/
  ;
  converseLib.validationFailed(0); /* message number*/
  FB0VW00.XXXPRCNM = "FB0V   "; /* Process number*/
  ;
  COMMAREA.CATOAP = FB0VM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0VM010.CAITEM; /* Application data*/
end // end FB0V200

// Format data on map
Function FB0V210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0VM010 initial; /* m010 input/output area*/
  ;
  FB0VW00.FB0VWSWF = "N"; /* format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the map from display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0VM010.FB0VMFMM = FB0VW00.FB0VMFMM; /* need from month*/
  FB0VM010.FB0VMFDD = FB0VW00.FB0VMFDD; /* need from day*/
  FB0VM010.FB0VMFYY = FB0VW00.FB0VMFYY; /* need from year*/
  FB0VM010.FB0VMTMM = FB0VW00.FB0VMTMM; /* need to month*/
  FB0VM010.FB0VMTDD = FB0VW00.FB0VMTDD; /* need to day*/
  FB0VM010.FB0VMTYY = FB0VW00.FB0VMTYY; /* need to year*/
  ;
  FB0VW00.FB0VWIXM = 1; /* set index*/
  while (FB0VW00.FB0VWIXM <= 3)
    FB0VM010.XDSCD[FB0VWIXM] = FB0VW00.XDSCD[FB0VWIXM]; /* drs code*/
    FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM + 1;
  end
  ;
  FB0VM010.FB0VMRSF = FB0VW00.FB0VMRSF; /* rpt by sched flag*/
  FB0VM010.FB0VM-RPT-DWN-FL = FB0VW00.FB0VM-RPT-DWN-FL;
  ;
end // end FB0V210

// Check attention ID
Function FB0V300()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB0VM010.XXXPRCNM = "FB0V   ";
    ;
    FB0VM010.FB0VMFMM = FB0VW00.FB0VMFMM; /* from month*/
    FB0VM010.FB0VMFDD = FB0VW00.FB0VMFDD; /* from day*/
    FB0VM010.FB0VMFYY = FB0VW00.FB0VMFYY; /* from year*/
    FB0VM010.FB0VMTMM = FB0VW00.FB0VMTMM; /* to month*/
    FB0VM010.FB0VMTDD = FB0VW00.FB0VMTDD; /* to day*/
    FB0VM010.FB0VMTYY = FB0VW00.FB0VMTYY; /* to year*/
    FB0VW00.FB0VWIXM = 1;
    while (FB0VW00.FB0VWIXM <= 3)
      FB0VM010.XDSCD[FB0VWIXM] = FB0VW00.XDSCD[FB0VWIXM];
      FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM + 1;
    end
    FB0VM010.FB0VMRSF = FB0VW00.FB0VMRSF;
    FB0VM010.FB0VM-RPT-DWN-FL = FB0VW00.FB0VM-RPT-DWN-FL;
    ;
    FB0VW00.FB0VWPRF = "N"; /* set print report flag*/
    ;
    FB0V400(); /* reset highlighted fields*/
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = FB0VM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0VM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0VM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0VW00.XXXPRCNM = "FB0V300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* Help screen requested*/
    ;
    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0VM010.XXXPRCNM = "FB0V300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* menu screen requested*/
    ;
    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0VM010.XXXPRCNM = "FB0V300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* Menu screen requested*/
    ;
    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0VM010.XXXPRCNM = "FB0V300"; /* Module identification*/
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    return;
  end
  ;
  FB0VM010.XXXPRCNM = "FB0V300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;
  ;
  ;
  ;
end // end FB0V300

// Reset highlighted fields
Function FB0V400()
  ;
  set FB0VM010.FB0VMFYY initialAttributes;
  set FB0VM010.FB0VMFMM initialAttributes;
  set FB0VM010.FB0VMFDD initialAttributes;
  set FB0VM010.FB0VMTYY initialAttributes;
  set FB0VM010.FB0VMTMM initialAttributes;
  set FB0VM010.FB0VMTDD initialAttributes;
  ;
  FB0VW00.FB0VWIXM = 1; /* set index*/
  while (FB0VW00.FB0VWIXM <= 3)
    set FB0VM010.XDSCD[FB0VWIXM] initialAttributes;
    FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM + 1; /* increment*/
  end
  ;
  set FB0VM010.FB0VMRSF initialAttributes;
  set FB0VM010.FB0VM-RPT-DWN-FL initialAttributes;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VM010.XDSCD[1] == "?"
   || FB0VM010.XDSCD[2] == "?"
   || FB0VM010.XDSCD[3] == "?")
    ;
    if (converseVar.eventKey not enter) /* enter was not pressed*/
      ;
      FB0VW00.XXXPRCNM = "FB0V400"; /* save process name*/
      converseLib.validationFailed(116); /* pf key cannot be used with list*/
      ;
      exit stack;
      ;
    end
    ;
  else
    ;
    return; /* return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of direct ship codes.*/
   /* Do this for each list request.*/
   /* ------------------------------------------------------------*/
  ;
  FB0VW00.FB0VWIXM = 1; /* init index*/
  ;
  while (FB0VW00.FB0VWIXM <= 3) /* for all direct ship codes*/
    ;
    if (FB0VM010.XDSCD[FB0VWIXM] == "?") /* list requested*/
      ;
      XPXX001(); /* window initialization;*/
      XX0XW02.XX0XWHDR = "DIRECT SHIP CODE"; /* heading*/
      ;
      while (XX0XW02.XX0XWEND == "N") /* until end of request*/
        XPXDS01(); /* display the list*/
      end
      ;
      if (XX0XW02.XX0XWPIX == 0) /* no selectio made*/
        FB0VM010.XDSCD[FB0VWIXM] = FB0VW01.XDSCD[FB0VWIXM];
      else
        FB0VM010.XDSCD[FB0VWIXM] = XDSTBL.XDSCD[XX0XWPIX];
      end
      ;
    end
    FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM + 1; /* increment*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicat that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* clear screen before display*/
  ;
  FB0VW00.XXXPRCNM = "FB0V400";
  converseLib.validationFailed(97); /* press enter to continue*/
  ;
  exit stack;
  ;
  ;
end // end FB0V400

// Verify entered data
Function FB0V500()
  ;
   /* ----------------------------------------------------*/
   /* highlight any application data that was entered*/
   /* ----------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* application data was entered*/
    ;
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    set FB0VM010.CAITEM cursor, bold; /* highlight*/
    converseLib.validationFailed(40); /* enter only with FAST PATH*/
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* verify report or download flag.*/
   /* ----------------------------------------------------*/
  ;
  if (FB0VM010.FB0VM-RPT-DWN-FL == "P"
   || FB0VM010.FB0VM-RPT-DWN-FL == "D")
    ;
     /* next sentence*/
    ;
  else
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    set FB0VM010.FB0VM-RPT-DWN-FL cursor, bold; /* highlight*/
    converseLib.validationFailed(10); /* invalid value entered*/
  end
  ;
   /* ----------------------------------------------------*/
   /* verify split by scheduler flag.*/
   /* ----------------------------------------------------*/
  ;
   /* if download requested, split by scheduler must = 'n'*/
  ;
  ;
  if (FB0VM010.FB0VM-RPT-DWN-FL == "D") /* download requested*/
    if (FB0VM010.FB0VMRSF == "N")
      ;
     /* next sentence*/
      ;
    else
      FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
      set FB0VM010.FB0VMRSF cursor, bold; /* highlight*/
      converseLib.validationFailed(431); /* must be 'n'*/
    end
  end
  ;
  if (FB0VM010.FB0VMRSF == "N"
   || FB0VM010.FB0VMRSF == "Y")
    ;
     /* next sentence*/
    ;
  else
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    set FB0VM010.FB0VMRSF cursor, bold; /* highlight*/
    converseLib.validationFailed(153); /* must by 'y' or 'n'*/
  end
  ;
   /* ----------------------------------------------------*/
   /* verify direct ship codes.*/
   /* ----------------------------------------------------*/
  ;
  ;
   /* verify entered codes against corporate table*/
  ;
  FB0VW00.FB0VWIXM = 3; /* initialize index*/
  while (FB0VW00.FB0VWIXM > 0)
    ;
    if (FB0VM010.XDSCD[FB0VWIXM] > "  ") /* if drs code has value*/
      ;
      if (FB0VM010.XDSCD[FB0VWIXM] in XDSTBL.XDSCD /* value in table*/
       && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        ;
         /* next sentence*/
        ;
      else
        FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
        set FB0VM010.XDSCD[FB0VWIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(010); /* invalid value*/
      end
    end
    FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM - 1; /* decrement*/
  end
  ;
  ;
   /* verify no duplicate values in codes*/
  ;
  if (FB0VM010.XDSCD[2] == FB0VM010.XDSCD[3] /* duplicate values*/
   && FB0VM010.XDSCD[2] != "  ")             /* and not blank*/
    set FB0VM010.XDSCD[2] cursor, bold; /* highlight*/
    set FB0VM010.XDSCD[3] bold; /* highlight*/
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    converseLib.validationFailed(319); /* duplicate values*/
  end
  ;
  if (FB0VM010.XDSCD[1] == FB0VM010.XDSCD[3] /* duplicate values*/
   && FB0VM010.XDSCD[1] != "  ")             /* and not blank*/
    set FB0VM010.XDSCD[1] cursor, bold; /* highlight*/
    set FB0VM010.XDSCD[3] bold; /* highlight*/
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    converseLib.validationFailed(319); /* duplicate values*/
  end
  ;
  if (FB0VM010.XDSCD[1] == FB0VM010.XDSCD[2] /* duplicate values*/
   && FB0VM010.XDSCD[1] != "  ")             /* and not blank*/
    set FB0VM010.XDSCD[1] cursor, bold; /* highlight*/
    set FB0VM010.XDSCD[2] bold; /* highlight*/
    FB0VW00.XXXPRCNM = "FB0V500"; /* module identification*/
    converseLib.validationFailed(319); /* duplicate values*/
    ;
  end
  ;
  ;
   /* ----------------------------------------------------*/
   /* verify 'to' and 'from' need dates.*/
   /* ----------------------------------------------------*/
  ;
  FB0V510(); /* validate need dates*/
  ;
  ;
  ;
   /* ----------------------------------------------------*/
   /* if any errors found, exit to redisplay the map.*/
   /* ----------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack;
  end
  ;
  ;
end // end FB0V500

// Validate need date
Function FB0V510()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if 'to' need date entered is valid.  use*/
   /* subroutine ta0040.*/
   /* perform this edit only if to date entered*/
   /* ------------------------------------------------------------*/
  ;
   /* ---------------------- y2k out begin --------------------*/
   /* IF FB0VM010.FB0VMTMM NE 0         /* to month entered*/
    /* OR FB0VM010.FB0VMTDD NE 0       /* to day entered*/
    /* OR FB0VM010.FB0VMTYY NE 0;      /* to year entered*/
   /* ---------------------- y2k out end   --------------------*/
   /* ---------------------- y2k in begin  --------------------*/
  if (FB0VM010.FB0VMTMM == 0 /* to month entered*/
   && FB0VM010.FB0VMTDD == 0 /* to day entered*/
   && FB0VM010.FB0VMTYY == 0) /* to year entered*/
     /* next sentence*/
  else
    /* ---------------------- y2k in end    --------------------*/
    ;
    FB0VW00.FB0VWGMM = FB0VM010.FB0VMTMM; /* month*/
    FB0VW00.FB0VWGDD = FB0VM010.FB0VMTDD; /* day*/
    FB0VW00.FB0VWGYY = FB0VM010.FB0VMTYY; /* year.*/
    ;
    set TA2REC empty; /* initialize record*/
    ;
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = FB0VW00.FB0VWGRG; /* move date*/
    ;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation routine*/
    ;
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(367); /* invalid to date*/
        FB0VW00.XXXPRCNM = "FB0V510"; /* module identification*/
        set FB0VM010.FB0VMTMM cursor, bold; /* highlight*/
        set FB0VM010.FB0VMTDD bold; /* highlight*/
        set FB0VM010.FB0VMTYY bold; /* highlight*/
      end
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Determine if 'from' Date entered is valid. Use subroutine*/
   /* TA0040.*/
   /* ------------------------------------------------------------*/
  ;
  FB0VW00.FB0VWGMM = FB0VM010.FB0VMFMM; /* month*/
  FB0VW00.FB0VWGDD = FB0VM010.FB0VMFDD; /* day*/
  FB0VW00.FB0VWGYY = FB0VM010.FB0VMFYY; /* year.*/
  ;
  set TA2REC empty; /* initialize record*/
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
  TA2REC.TA2GRTYP = "A"; /* date format*/
  TA2REC.TA2GRGAN = FB0VW00.FB0VWGRG; /* move date*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation routine*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA2REC.TA2RTNCD != 0)
      converseLib.validationFailed(366); /* invalid from date*/
      FB0VW00.XXXPRCNM = "FB0V510"; /* module identification*/
      set FB0VM010.FB0VMFMM cursor, bold; /* highlight*/
      set FB0VM010.FB0VMFDD bold; /* highlight*/
      set FB0VM010.FB0VMFYY bold; /* highlight*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Compare dates.  If the from date is greater than  the*/
   /* to date, display error message.*/
   /* perform this edit only if to date entered*/
   /* ------------------------------------------------------------*/
  ;
   /* ---------------------- y2k out begin --------------------*/
   /* IF FB0VM010.FB0VMTMM NE 0        /* to month entered*/
    /* OR FB0VM010.FB0VMTDD NE 0      /* to day entered*/
    /* OR FB0VM010.FB0VMTYY NE 0;     /* to year entered*/
   /* ---------------------- y2k out end   --------------------*/
   /* ---------------------- y2k in begin  --------------------*/
  if (FB0VM010.FB0VMTMM == 0 /* to month entered*/
   && FB0VM010.FB0VMTDD == 0 /* to day entered*/
   && FB0VM010.FB0VMTYY == 0) /* to year entered*/
     /* next sentence*/
  else
    /* ---------------------- y2k in end    --------------------*/
    ;
    if (FB0VM010.FB0VMFYY < 89)
      FB0VW00.FB0VWFCC = 20; /* format century*/
    else
      FB0VW00.FB0VWFCC = 19; /* format century*/
    end
    FB0VW00.FB0VWFYY = FB0VM010.FB0VMFYY; /* format year*/
    FB0VW00.FB0VWFMM = FB0VM010.FB0VMFMM; /* format month*/
    FB0VW00.FB0VWFDD = FB0VM010.FB0VMFDD; /* format day*/
    FB0VW00.FB0VWFED = FB0VW00.FB0VWFDT; /* move to from edit date*/
    ;
    ;
    if (FB0VM010.FB0VMTYY < 89)
      FB0VW00.FB0VWFCC = 20; /* format century*/
    else
      FB0VW00.FB0VWFCC = 19; /* format century*/
    end
    FB0VW00.FB0VWFYY = FB0VM010.FB0VMTYY; /* format year*/
    FB0VW00.FB0VWFMM = FB0VM010.FB0VMTMM; /* format month*/
    FB0VW00.FB0VWFDD = FB0VM010.FB0VMTDD; /* format day*/
    FB0VW00.FB0VWTED = FB0VW00.FB0VWFDT; /* move to from edit date*/
    ;
     /* compare edit dates -- error if 'from' > 'to'*/
    ;
    if (FB0VW00.FB0VWFED > FB0VW00.FB0VWTED)
      converseLib.validationFailed(368); /* from dt > to dt*/
      FB0VW00.XXXPRCNM = "FB0V510"; /* module identification*/
      set FB0VM010.FB0VMFMM cursor, bold; /* set cursor*/
      set FB0VM010.FB0VMFDD bold; /* set cursor*/
      set FB0VM010.FB0VMFYY bold; /* set cursor*/
      set FB0VM010.FB0VMTMM bold; /* set cursor*/
      set FB0VM010.FB0VMTDD bold; /* set cursor*/
      set FB0VM010.FB0VMTYY bold; /* set cursor*/
    end
  end
  ;
  ;
end // end FB0V510

// Process valid input request
Function FB0V600()
   /* ------------------------------------------------------------*/
   /* if necessary, redisplay data with message:*/
   /* 'press enter to continue'.  save data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VMFMM != FB0VM010.FB0VMFMM /* from month*/
   || FB0VW00.FB0VMFDD != FB0VM010.FB0VMFDD /* from day*/
   || FB0VW00.FB0VMFYY != FB0VM010.FB0VMFYY /* from year*/
   || FB0VW00.FB0VMTMM != FB0VM010.FB0VMTMM /* to month*/
   || FB0VW00.FB0VMTDD != FB0VM010.FB0VMTDD /* to day*/
   || FB0VW00.FB0VMTYY != FB0VM010.FB0VMTYY /* to year*/
   || FB0VW00.XDSCD[1] != FB0VM010.XDSCD[1] /* drs code*/
   || FB0VW00.XDSCD[2] != FB0VM010.XDSCD[2] /* drs code*/
   || FB0VW00.XDSCD[3] != FB0VM010.XDSCD[3] /* drs code*/
   || FB0VW00.FB0VMRSF != FB0VM010.FB0VMRSF /* split flag*/
   || FB0VW00.FB0VM-RPT-DWN-FL != FB0VM010.FB0VM-RPT-DWN-FL)
    ;
    FB0VW00.FB0VMFMM = FB0VM010.FB0VMFMM;
    FB0VW00.FB0VMFDD = FB0VM010.FB0VMFDD;
    FB0VW00.FB0VMFYY = FB0VM010.FB0VMFYY;
    FB0VW00.FB0VMTMM = FB0VM010.FB0VMTMM;
    FB0VW00.FB0VMTDD = FB0VM010.FB0VMTDD;
    FB0VW00.FB0VMTYY = FB0VM010.FB0VMTYY;
    FB0VW00.XDSCD[1] = FB0VM010.XDSCD[1];
    FB0VW00.XDSCD[2] = FB0VM010.XDSCD[2];
    FB0VW00.XDSCD[3] = FB0VM010.XDSCD[3];
    FB0VW00.FB0VMRSF = FB0VM010.FB0VMRSF;
    FB0VW00.FB0VM-RPT-DWN-FL = FB0VM010.FB0VM-RPT-DWN-FL;
    ;
    if (FB0VW00.FB0VWDTT == 0) /* to date not entered*/
      FB0VW00.FB0VWRDF = "Y"; /* set request for data flag*/
    else
      FB0VW00.FB0VWRDF = "N"; /* set request for data flag*/
    end
    ;
    FB0VWPRF = "Y"; /* set print request flag*/
    FB0VW00.XXXPRCNM = "FB0V600"; /* process name*/
    converseLib.validationFailed(333);
    return;
  end
  ;
  ;
  if (FB0VW00.FB0VWPRF == "N")
    FB0VWPRF = "Y"; /* set print request flag*/
    FB0VW00.XXXPRCNM = "FB0V600"; /* process name*/
    converseLib.validationFailed(333);
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* at this point we know we are going to submit the report*/
   /* job(s) or a mapper download.*/
   /* ------------------------------------------------------------*/
   /* determine which environment the program is executing in:*/
   /* development or production.*/
   /* ------------------------------------------------------------*/
  ;
  FB0V610(); /* determine region*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* load parameter data into working storage record.*/
   /* ------------------------------------------------------------*/
  ;
  FB0V620(); /* load parameter*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* set first report flag to 'y'es, and initialize ta6rec*/
   /* ------------------------------------------------------------*/
  ;
  FB0VW00.FB0VWFRF = "Y"; /* first report flag*/
  set TA6REC empty; /* init ta6rec*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If mapper download was requested, format and submit job.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VM010.FB0VM-RPT-DWN-FL == "D") /* download requested*/
    ;
    FB0VW01.PG1SC4CD = "*"; /* wildcard scheduler code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if production environment*/
      FB0V680(); /* submit production drs download*/
    else
      FB0V690(); /* submit test drs download*/
    end
    ;
    FB0VW00.FB0VWFRF = "N"; /* not first time anymore*/
  else
    ;
     /* ------------------------------------------------------------*/
     /* we know we are submitting a report at this point.*/
     /* ------------------------------------------------------------*/
     /* if report is NOT to be split by scheduler, format and*/
     /* submit job.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VM010.FB0VMRSF == "N") /* do NOT split by scheduler*/
      ;
      FB0VW01.PG1SC4CD = "*"; /* wildcard scheduler code*/
      ;
      if (TA3REC.TA3RGNID == "03") /* if production environment*/
        FB0V660(); /* submit production drs report*/
      else
        FB0V670(); /* submit test drs report*/
      end
      ;
      FB0VW00.FB0VWFRF = "N"; /* not first time anymore*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* at this point the report is to be split by scheduler.*/
       /* create a table of valid scheduler codes.*/
       /* submit a job to print the drs report for each scheduler.*/
      /* ------------------------------------------------------------*/
      ;
       /* create table of schedulers*/
      ;
      FB0VW00.FB0VWSWC = "N"; /* set end of cursor sw 'n'o*/
      FB0VW00.FB0VWIX1 = 0; /* init general index*/
      ;
      FB0V630(); /* declare cursor for dfbuy.vfsctl01*/
      ;
      FB0V640(); /* fetch record*/
      ;
      while (FB0VW00.FB0VWSWC != "Y") /* while not end of cursor*/
        ;
        if (FBMREC.PG1SC4CD != "99") /* 99 not valid scheduler*/
          FB0VW00.FB0VWIX1 = FB0VW00.FB0VWIX1 + 1; /* increment*/
          FB0VW00.PG1SC4CD[FB0VWIX1] = FBMREC.PG1SC4CD;
        end
        ;
        FB0V640(); /* fetch record*/
        ;
      end
      ;
      FB0VW00.FB0VWTSZ = FB0VW00.FB0VWIX1; /* save table size*/
      ;
      FB0V650(); /* close cursor*/
      ;
      ;
      ;
       /* submit 1 job to print report for each scheduler*/
      ;
      ;
      FB0VW00.FB0VWIX1 = 1; /* init index*/
      while (FB0VW00.FB0VWIX1 <= FB0VW00.FB0VWTSZ) /* until end of table*/
        ;
        FB0VW01.PG1SC4CD = FB0VW00.PG1SC4CD[FB0VWIX1]; /* sched code*/
        ;
        if (TA3REC.TA3RGNID == "03") /* if production environment*/
          FB0V660(); /* submit production drs report*/
        else
          FB0V670(); /* submit test drs report*/
        end
        ;
        FB0VW00.FB0VWFRF = "N"; /* not first time anymore*/
        FB0VW00.FB0VWIX1 = FB0VW00.FB0VWIX1 + 1; /* increment*/
        ;
      end
    end
  end
  ;
  FB0VW00.FB0VWPRF = "N"; /* set print request flag*/
  FB0VW00.FB0VWSWF = "Y"; /* format the map*/
  ;
  ;
end // end FB0V600

// get region information
Function FB0V610()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
     /* next sentence*/
    ;
  else
    ;
    FB0VW00.XXXPRCNM = "FB0V610"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end
  ;
  ;
end // end FB0V610

// load parameter data
Function FB0V620()
  ;
   /* ------------------------------------------------------------*/
   /* format parmater to be passed to batch side.*/
   /* all parameters passed to batch are loaded here except for*/
   /* scheduler code - that is done in fb0v600.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VM010.FB0VMFYY < 89)
    FB0VW01.FB0VWPFC = 20; /* from century*/
  else
    FB0VW01.FB0VWPFC = 19; /* from century*/
  end
  FB0VW01.FB0VWPFY = FB0VM010.FB0VMFYY; /* from year*/
  FB0VW01.FB0VWPFM = FB0VM010.FB0VMFMM; /* from month*/
  FB0VW01.FB0VWPFD = FB0VM010.FB0VMFDD; /* from day*/
  ;
  if (FB0VM010.FB0VMTYY < 89)
    FB0VW01.FB0VWPTC = 20; /* from century*/
  else
    FB0VW01.FB0VWPTC = 19; /* from century*/
  end
  FB0VW01.FB0VWPTY = FB0VM010.FB0VMTYY; /* to year*/
  FB0VW01.FB0VWPTM = FB0VM010.FB0VMTMM; /* to month*/
  FB0VW01.FB0VWPTD = FB0VM010.FB0VMTDD; /* to day*/
  ;
   /* if all direct ship codes blank, default to all valid codes*/
  ;
  if (FB0VM010.XDSCD[1] == "  "
   && FB0VM010.XDSCD[2] == "  "
   && FB0VM010.XDSCD[3] == "  ")
    FB0VW01.XDSCD[1] = "1";
    FB0VW01.XDSCD[2] = "2";
    FB0VW01.XDSCD[3] = "3";
  else
    ;
     /* load only valid drs codes (no blanks between real values)*/
    ;
    FB0VW00.FB0VWIXM = 1; /* init index*/
    FB0VW00.FB0VWIX1 = 1; /* init index*/
    ;
    while (FB0VW00.FB0VWIXM <= 3)
      ;
      if (FB0VM010.XDSCD[FB0VWIXM] != "  ") /* if valid value*/
        FB0VW01.XDSCD[FB0VWIX1] = FB0VM010.XDSCD[FB0VWIXM];
        FB0VW00.FB0VWIX1 = FB0VW00.FB0VWIX1 + 1;
      end
      ;
      FB0VW00.FB0VWIXM = FB0VW00.FB0VWIXM + 1;
    end
    ;
    while (FB0VW00.FB0VWIX1 <= 3)
      FB0VW01.XDSCD[FB0VWIX1] = "  "; /* blank out remaining*/
      FB0VW00.FB0VWIX1 = FB0VW00.FB0VWIX1 + 1;
    end
  end
  ;
  FB0VW01.CAUSERID = COMMAREA.CAUSERID; /* User id*/
  ;
  ;
end // end FB0V620

// declare and open vfsctl01 csr
Function FB0V630()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FBMREC empty;
  ;
   /* ------------------------------------------------------------*/
   /* Open FSCTL.  No key required.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" ("S1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0VW00.XXXPRCNM = "FB0V630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Resources not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VFSCTL01 CSR ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "630"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.FBMGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FB0V630

// Fetch vfsctl01 csr
Function FB0V640()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FBMREC empty; /* Clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch FSCTL.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" ("N1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful or row not found, return.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* End of cursor*/
        FB0VW00.FB0VWSWC = "Y"; /* End of cursor switch*/
      end
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0VW00.XXXPRCNM = "FB0V640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VFSCTL01 CSR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "640"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.FBMGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
  ;
end // end FB0V640

// Close fsctl01 csr
Function FB0V650()
   /* ------------------------------------------------------------*/
   /* Close FSCTL.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" ("C1", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0VW00.XXXPRCNM = "FB0V650"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "650"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.FBMGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  ;
end // end FB0V650

// Process prod JCL
Function FB0V660()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0VW00.FB0VWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0VW00.FB0VWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VT01.TARTYPE[FB0VWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWPRM;
      TA6REC.TARTYPE[TA6INDEX] = FB0VT01.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
      FB0VW01.FB0VWCON = "//*"; /* constant comment area*/
      FB0VW01.FB0VWVAR = FB0VW01.FB0VWPRM; /* var comnt area*/
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWCMT;
      TA6REC.TARTYPE[TA6INDEX] = FB0VT01.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VT01.TARJCL[FB0VWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0VT01.TARTYPE[FB0VWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VT01.TARJCL[FB0VWIXT] == "/*EOF") /* End of table*/
      ;
      FB0VW00.FB0VWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0VW00.FB0VWIXT = FB0VW00.FB0VWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* if this is the first report, get output destination,*/
   /* else just submit jcl with specified destination.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWFRF == "Y") /* if first report submit*/
    TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
    TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  else
    if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
      TA6REC.TA6RTNCD = " "; /* init return code*/
    end
    TA6REC.TA6SUBSW = "S"; /* submit JCL*/
    TA6REC.TA6MSGSW = "N"; /* set reply swt to no*/
  end
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0VM010.XXXPRCNM = "FB0V660"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0VM010.XXXPRCNM = "FB0V660"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0V660

// Process test JCL
Function FB0V670()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0VW00.FB0VWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0VW00.FB0VWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VTT1.TARTYPE[FB0VWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWPRM;
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT1.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
      FB0VW01.FB0VWCON = "//*"; /* constant comment area*/
      FB0VW01.FB0VWVAR = FB0VW01.FB0VWPRM; /* var comnt area*/
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWCMT;
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT1.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VTT1.TARJCL[FB0VWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT1.TARTYPE[FB0VWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VTT1.TARJCL[FB0VWIXT] == "/*EOF") /* End of table*/
      ;
      FB0VW00.FB0VWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0VW00.FB0VWIXT = FB0VW00.FB0VWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* if this is the first report, get output destination,*/
   /* else just submit jcl with specified destination.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWFRF == "Y") /* if first report submit*/
    TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
    TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  else
    if (TA6REC.TA6RTNCD == "0") /* good return from prev sub*/
      TA6REC.TA6RTNCD = " "; /* init return code*/
    end
    TA6REC.TA6SUBSW = "S"; /* submit JCL*/
    TA6REC.TA6MSGSW = "N"; /* set reply swt to no*/
  end
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0VM010.XXXPRCNM = "FB0V670"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0VM010.XXXPRCNM = "FB0V670"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0V670

// Process prod JCL-MAPPER DWNLD
Function FB0V680()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0VW00.FB0VWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0VW00.FB0VWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VT02.TARTYPE[FB0VWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWPRM;
      TA6REC.TARTYPE[TA6INDEX] = FB0VT02.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
      FB0VW01.FB0VWCON = "//*"; /* constant comment area*/
      FB0VW01.FB0VWVAR = FB0VW01.FB0VWPRM; /* var comnt area*/
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWCMT;
      TA6REC.TARTYPE[TA6INDEX] = FB0VT02.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VT02.TARJCL[FB0VWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0VT02.TARTYPE[FB0VWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VT02.TARJCL[FB0VWIXT] == "/*EOF") /* End of table*/
      ;
      FB0VW00.FB0VWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0VW00.FB0VWIXT = FB0VW00.FB0VWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* if this is the first report, get output destination,*/
   /* else just submit jcl with specified destination.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWFRF == "Y") /* if first report submit*/
    TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
    TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  else
    if (TA6REC.TA6RTNCD == "0") /* if good return from prev sub*/
      TA6REC.TA6RTNCD = " "; /* init return code*/
    end
    TA6REC.TA6SUBSW = "S"; /* submit JCL*/
    TA6REC.TA6MSGSW = "N"; /* set reply swt to no*/
  end
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0VM010.XXXPRCNM = "FB0V680"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0VM010.XXXPRCNM = "FB0V680"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0V680

// Process test JCL-MAPPER DWNLD
Function FB0V690()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0VW00.FB0VWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0VW00.FB0VWIXT > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format parameter statements*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VTT2.TARTYPE[FB0VWIXT] == "P") /* Parameters statement*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWPRM;
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT2.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
      FB0VW01.FB0VWCON = "//*"; /* constant comment area*/
      FB0VW01.FB0VWVAR = FB0VW01.FB0VWPRM; /* var comnt area*/
      TA6REC.TARJCL[TA6INDEX] = FB0VW01.FB0VWCMT;
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT2.TARTYPE[FB0VWIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FB0VTT2.TARJCL[FB0VWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0VTT2.TARTYPE[FB0VWIXT];
      ;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FB0VTT2.TARJCL[FB0VWIXT] == "/*EOF") /* End of table*/
      ;
      FB0VW00.FB0VWIXT = 0; /* Indicate end of table*/
      ;
    else
      ;
      FB0VW00.FB0VWIXT = FB0VW00.FB0VWIXT + 1; /* Increment table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* if this is the first report, get output destination,*/
   /* else just submit jcl with specified destination.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0VW00.FB0VWFRF == "Y") /* if first report submit*/
    TA6REC.TA6SUBSW = "Y"; /* format and submit jcl*/
    TA6REC.TA6MSGSW = "Y"; /* set reply swt to yes*/
  else
    if (TA6REC.TA6RTNCD == "0") /* good return from prev sub*/
      TA6REC.TA6RTNCD = " "; /* init return code*/
    end
    TA6REC.TA6SUBSW = "S"; /* submit JCL*/
    TA6REC.TA6MSGSW = "N"; /* set reply swt to no*/
  end
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    converseLib.validationFailed(76); /* Return message*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0VM010.XXXPRCNM = "FB0V690"; /* module identification*/
    ;
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0VM010.XXXPRCNM = "FB0V690"; /* module identification*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0V690

//*** RECORD=FB0VW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0VW00 type basicRecord
  5 * char(176) ; 
    10 FB0VWSWF FB0VWSWF ; 
    10 FB0VWSWC FB0VWSWC ; 
    10 FB0VWFRF FB0VWFRF ; 
    10 FB0VWRDF FB0VWRDF ; 
    10 FB0VWPRF FB0VWPRF ; 
    10 FB0VWIXM FB0VWIXM ; 
    10 FB0VWIXT FB0VWIXT ; 
    10 FB0VWIX1 FB0VWIX1 ; 
    10 FB0VWFDT FB0VWFDT ; 
      15 FB0VWFCC FB0VWFCC ; 
      15 FB0VWFYY FB0VWFYY ; 
      15 FB0VWFMM FB0VWFMM ; 
      15 FB0VWFDD FB0VWFDD ; 
    10 FB0VWGRG FB0VWGRG ; 
      15 FB0VWGMM FB0VWGMM ; 
      15 FB0VWGDD FB0VWGDD ; 
      15 FB0VWGYY FB0VWGYY ; 
    10 XXXPRCNM XXXPRCNM ; 
    10 PG1SC4CD PG1SC4CD [50] ; 
    10 FB0VWTSZ FB0VWTSZ ; 
    10 FB0VWFED FB0VWFED ; 
    10 FB0VWTED FB0VWTED ; 
    10 * char(1) ; 
    10 FB0VWDTF FB0VWDTF ; 
      15 FB0VMFMM FB0VMFMM ; 
      15 FB0VMFDD FB0VMFDD ; 
      15 FB0VMFYY FB0VMFYY ; 
    10 FB0VWDTT FB0VWDTT ; 
      15 FB0VMTMM FB0VMTMM ; 
      15 FB0VMTDD FB0VMTDD ; 
      15 FB0VMTYY FB0VMTYY ; 
    10 XDSCD XDSCD [3] ; 
    10 FB0VMRSF FB0VMRSF ; 
    10 FB0VM-RPT-DWN-FL FB0VM-RPT-DWN-FL ; 
end // end FB0VW00

//*** RECORD=FB0VW01 ****
// ---------------------------------------------------
// Working Storage to hold parm data passed to fb290d.
// ---------------------------------------------------
// ***********************
Record FB0VW01 type basicRecord
  5 FB0VWPRM FB0VWPRM ; 
    10 FB0VWPFC FB0VWPFC ; 
    10 FB0VWPFY FB0VWPFY ; 
    10 FB0VWPFM FB0VWPFM ; 
    10 FB0VWPFD FB0VWPFD ; 
    10 FB0VWPTC FB0VWPTC ; 
    10 FB0VWPTY FB0VWPTY ; 
    10 FB0VWPTM FB0VWPTM ; 
    10 FB0VWPTD FB0VWPTD ; 
    10 XDSCD XDSCD [3] ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 CAUSERID CAUSERID ; 
    10 * char(51) ; 
  5 FB0VWCMT FB0VWCMT ; 
    10 FB0VWCON FB0VWCON ; 
    10 FB0VWVAR FB0VWVAR ; 
end // end FB0VW01

// report or download flag
DataItem FB0VM-RPT-DWN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date from day
DataItem FB0VMFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// need date from month
DataItem FB0VMFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// need date from year
DataItem FB0VMFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// report by scheduler flag
DataItem FB0VMRSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date to month
DataItem FB0VMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// need date to month
DataItem FB0VMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// need date to year
DataItem FB0VMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// parm record
DataItem FB0VWCMT char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// constant //*
DataItem FB0VWCON char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map from date
DataItem FB0VWDTF num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map to date
DataItem FB0VWDTT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem FB0VWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB0VWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB0VWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'from' edit date
DataItem FB0VWFED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat month
DataItem FB0VWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first report flag
DataItem FB0VWFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat year
DataItem FB0VWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg date dd
DataItem FB0VWGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg date mm
DataItem FB0VWGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date greg format (mmddyy)
DataItem FB0VWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg date yy
DataItem FB0VWGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index 1
DataItem FB0VWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index
DataItem FB0VWIXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB0VWIXT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm from century
DataItem FB0VWPFC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm from day
DataItem FB0VWPFD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// parm from month
DataItem FB0VWPFM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// parm from year
DataItem FB0VWPFY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// print report flag
DataItem FB0VWPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm record
DataItem FB0VWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm to century
DataItem FB0VWPTC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm to day
DataItem FB0VWPTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// parm to month
DataItem FB0VWPTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// parm to year
DataItem FB0VWPTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request for data flag
DataItem FB0VWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor switch
DataItem FB0VWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map switch
DataItem FB0VWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'to' edit date
DataItem FB0VWTED num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table size
DataItem FB0VWTSZ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variable comment area
DataItem FB0VWVAR char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

