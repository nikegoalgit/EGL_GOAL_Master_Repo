package fb0l;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXMODID;
import corpcom7.XXXMSGNO;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XPGCD;
import corpx2.XQACD;
import corpx2.XSACD;
import corpx2.XUMCD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB4CRVNB;
import fb.common.FB4GROUP;
import fb.common.FB4KEY;
import fb.common.FB4QTYLK;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB4STDFL;
import fb.common.FB5FRMDT;
import fb.common.FB5REC;
import fb.common.FB5TODT;
import fb.common.FBWREC;
import ff.common.FF00ENU;
import pc.common.PC2INSEG;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0L ****
// This application allows a user to vary the region percents
// for a size curve.
// 
// The screen is displayed with the region percents for the
// selected curve. The curve can be an 'assigned to' curve or
// a dummy curve.
// 
// The percents can be altered by the user by typing over the
// existing percents. However, the total of all the region
// percents must always equal 100%. If the total does not equal
// 100%, a variance will be displayed and the curve will not be
// assigned.
// 
// The size curves may be copied from one region to another via
// PF16.
// 
// PF19 will be used to assign a size curve to a product or
// products.
// 
// If any data is modified, it is verified and, if correct and
// complete, updated.
// 
// The user may exit to any allowed application, via Fast Path
// or PF key.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/17/89  cnewma  New application.
//          10/02/93  ldeluh  Replace xsexit with xsfbs01
//                            which then calls xsexit
// YR2000   12/03/97  rgilli  Y2K MODIFICATIONS MADE TO:
//                            Re-generate to include new
//                            version of XX0XS01.
// *********************
Program FB0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0LW00 FB0LW00; // record
  FB0LW01 FB0LW01; // record
  FB1REC FB1REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use FB0LM.FB0LM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FB0LM010 initial; /* M001 input/output*/
    set FB0LW00 empty; /* Working storage*/
    set FB0LW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FB0LW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    if (FBWREC.XGPCD != "  "    /* gpc code*/
     && FBWREC.SY1STNBR != "  " /* style number*/
     && FBWREC.SY2CLRID != "  " /* color id*/
     && FBWREC.XDMCD != "  "    /* dimension code*/
     && FBWREC.XQACD != "  "    /* quality code*/
     && FBWREC.PC2INSEG != "  " /* spec difference code*/
     && FBWREC.XSACD != "  "    /* shade code*/
     && FBWREC.XPGCD != "  "    /* packaging type code*/
     && FBWREC.XUMCD != "  "    /* unit of measure code*/
     && FBWREC.FB1INSEQ != 0)   /* fb internal seq nbr not 0*/
      FB0LW00.FB0LWSPR = "P"; /* display product/user sw*/
    else
      if (FBWREC.FB1INSEQ != 0) /* fb internal seq nbr not 0*/
        FB0LW00.FB0LWSPR = "U"; /* display product/user sw*/
      else
        FB0LW00.FB0LWSNP = "Y"; /* indicate no product data*/
        set FB0LM010.SY1STNBR bold; /* highlight*/
        converseLib.validationFailed(42); /* no product data*/
      end
    end
    ;
    FB0LW00.FB1INSEQ = FBWREC.FB1INSEQ; /* save sequence number*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0L001; /* Converse the main process*/
    ;
    ;
    FB0L001: FB0L001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0L001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FB0L

// Inquire/maintain a table row
Function FB0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB0L100(); /* Obtain the data to display*/
  ;
  FB0L200(); /* Format and display the map*/
  ;
  FB0L300(); /* Check attention identifier*/
  ;
  FB0L400(); /* Reset fields to normal intensity*/
  ;
  FB0L500(); /* Verify the entered data*/
  ;
  FB0L600(); /* Process valid input request*/
  ;
  ;
end // end FB0L001

// Obtain the data to display
Function FB0L100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FB0LW00.FB0LWSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* determine if the product data should be displayed or if the*/
   /* user data should be displayed.*/
  ;
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0LW00.FB0LWSPR == "P") /* If product data requested*/
    FB0L110(); /* Get product description*/
    ;
    FB0L120(); /* Get selection criteria*/
    ;
    FB0L130(); /* Get region percents*/
    ;
      /* total percent*/
    FB0LM010.FB0LMTPC = 0; /* initalize total percent*/
    FB0LW00.FB0LWIXM = 1; /* initialize index*/
    while (FB0LW00.FB0LWIXM < 4)
      FB0LM010.FB0LMTPC = FB0LM010.FB0LMTPC + FB0LW01.FB4RGPCT[FB0LWIXM];
      FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
    end
      /* variance*/
    FB0LM010.FB0LMVAR = FB0LM010.FB0LMTPC - 100; /* Variance*/
  else
    if (FB0LW00.FB0LWSPR == "U") /* If user data requested*/
      FB0L120(); /* Get selection criteria*/
      ;
      if (converseVar.validationMsgNum > 0) /* if there is an error*/
        return; /* return to previous process*/
      end
      ;
      FB0L130(); /* Get region percents*/
      ;
      if (converseVar.validationMsgNum > 0) /* if there is an error*/
        return; /* return to previous process*/
      end
      ;
        /* total percent*/
      FB0LM010.FB0LMTPC = 0; /* initialize total percent*/
      FB0LW00.FB0LWIXM = 1; /* initialize index*/
      while (FB0LW00.FB0LWIXM < 4)
        FB0LM010.FB0LMTPC = FB0LM010.FB0LMTPC + FB0LW01.FB4RGPCT[FB0LWIXM];
        FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
      end
       /* variance*/
      FB0LM010.FB0LMVAR = FB0LM010.FB0LMTPC - 100; /* Variance*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FB0LW00.FB0LWSWR = "N"; /* Request for data switch*/
  end
  ;
  FB0L140(); /* edit input data*/
  ;
  ;
end // end FB0L100

// Get product descriptions
Function FB0L110()
   /* ------------------------------------------------------------*/
   /* Obtain style and color description*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* clear row storage area*/
   /* format key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = FB0LW00.XGPCD; /* gpc*/
  PG2REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FBWREC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FBWREC.XDMCD; /* dimension code*/
   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0LM010.SY2CLRAB = PG2REC.SY2CLRAB; /* color description*/
      FB0LM010.SY1STYNM = PG2REC.SY1STYNM; /* style name*/
      ;
      return; /* Return to previous process*/
      ;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FB0LM010.XXXMODID = "110"; /* module identification*/
        set FB0LM010.SY1STNBR bold; /* highlight style number*/
        set FB0LM010.SY2CLRID bold; /* highlight color id*/
        set FB0LM010.XDMCD bold; /* highlight dimension code*/
        FB0LW00.FB0LWSPR = "I"; /* invalid product*/
        converseLib.validationFailed(22); /* no data to display*/
        exit stack;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0LM010.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT STYLE/COLOR TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  FB0LW00.FB0LWDCF = "N"; /* End of vseldt01 flag*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L110

// Get selection criteria
Function FB0L120()
   /* ------------------------------------------------------------*/
   /* get row from table - vselhd01*/
   /* ------------------------------------------------------------*/
  ;
  FB0L121(); /* get row from table*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and set cursor from table  - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0L122(); /* Select and set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the next row to display from the table - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0L123(); /* Get next table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor from table   - vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0L124(); /* close cursor*/
  ;
  ;
end // end FB0L120

// Get header data
Function FB0L121()
   /* ------------------------------------------------------------*/
   /* Initialize row storage area*/
   /* Format record key*/
   /* ------------------------------------------------------------*/
  ;
  set FB1REC empty; /* Initialize row storage*/
  ;
  FB1REC.FB1INSEQ = FB0LW00.FB1INSEQ; /* initialize seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* Select requested row from table - vselhd01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If sucessful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      ;
      FB0LM010.FB1CMNT = FB1REC.FB1CMNT; /* comments*/
      if (FB0LW00.FB0LWSPR == "U") /* If user data requested*/
        FB0LM010.FB4CRVNB = FB1REC.FB1DUMNB; /* move dummy number*/
        FB0LM010.FB0LMNBR = "DUMMY NBR:"; /* label map field*/
      else
        FB0LM010.FB0LMNBR = "CURVE NBR:"; /* label map field*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    converseLib.validationFailed(11); /* 'RECORD NOT ON DATABASE'*/
    ;
  end
  return;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* If data not found, abort the application; otherwise, indi-*/
   /* cate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/
  ;
  FB0LM010.XXXMODID = "121"; /* module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      ;
      converseLib.validationFailed(19); /* 'RESOURCES UNAVAILABLE'*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
      ;
    else
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      converseLib.validationFailed(01); /* 'ERROR - PLEASE NOTIFY PROGRAMMING'*/
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "GET VSELHD01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  ;
  exit stack; /* exit to display map*/
  ;
  ;
end // end FB0L121

// select set date table cursor
Function FB0L122()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FB5REC empty; /* clear row storage area*/
  FB0LW00.FB0LWDCF = "N"; /* End of vseldt01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key with saved sequence number from vcurve01 or*/
   /* vselhd01.*/
   /* ------------------------------------------------------------*/
  ;
  FB5REC.FB1INSEQ = FB0LW00.FB1INSEQ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VSELDT01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L122

// Get next row - date table
Function FB0L123()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0LW00.FB0LWFDT = FB5REC.FB5FRMDT; /* from date*/
      FB0LW00.FB0LWTDT = FB5REC.FB5TODT; /* to date*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0LW00.FB0LWDCF = "Y"; /* Indicate vseldt01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "123"; /* Module identification*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L123

// close date table cursor
Function FB0L124()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "124"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L124

// Get region percents
Function FB0L130()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/
  ;
  set FB4REC empty; /* clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = FBWREC.FB1INSEQ; /* sequence number*/
  FB4REC.XGPCD = FBWREC.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FBWREC.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FBWREC.SY2CLRID; /* color*/
  FB4REC.XDMCD = FBWREC.XDMCD; /* dimension*/
  FB4REC.XQACD = FBWREC.XQACD; /* quality code*/
  FB4REC.PC2INSEG = FBWREC.PC2INSEG; /* spec difference code*/
  FB4REC.XSACD = FBWREC.XSACD; /* shade code*/
  FB4REC.XPGCD = FBWREC.XPGCD; /* packaging type code*/
  FB4REC.XUMCD = FBWREC.XUMCD; /* unit of measure code*/
  FB4REC.FB4CRVNB = FBWREC.FB4CRVNB; /* curve number*/
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vcurve01*/
   /* ------------------------------------------------------------*/
  ;
  FB0L131(); /* Select set vcurve01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* Select all vcurve01 rows*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0LW00.FB0LWDCF != "Y") /* Until end vcurve01 cursor*/
    FB0L132(); /* Fetch next vcurve01 rows*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display, return a message to the user.*/
   /* Otherwise get all the vcurve01 data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0LW00.FB0LWIXM < 0) /* No vcurve01 data available*/
    FB0LM010.XXXMODID = "130"; /* module identification*/
    converseLib.validationFailed(43); /* 'No data to display'*/
    FB0LW00.FB0LWSPR = "I"; /* set switch to show invalid product*/
    exit stack; /* Return to flow*/
  end
  ;
  if (FB0LW00.FB0LWIXM > 3) /* More than 3 rows found*/
    FB0LM010.XXXMODID = "130"; /* module identification*/
    converseLib.validationFailed(43); /* 'No data to display'*/
    FB0LW00.FB0LWSWR = "N"; /* set display switch to 'n'*/
    exit stack; /* Return to flow*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vcurve01 set*/
   /* ------------------------------------------------------------*/
  ;
  FB0L133(); /* close vcurve01 cursor*/
  ;
  ;
end // end FB0L130

// select set vcurve01 cursor
Function FB0L131()
  FB0LW00.FB0LWDCF = "N"; /* End of vcurve01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FB0LWIXM = 0;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "131"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L131

// get next vcurve01 row
Function FB0L132()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 rows. Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0LW00.FB1INSEQ = FB4REC.FB1INSEQ; /* sequence number*/
      ;
      /* ------------------------------------------------------------*/
       /* Move data from vcurve01 row to storage*/
      /* ------------------------------------------------------------*/
      ;
      FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
      ;
      if (FB4REC.XWHCD in XWHTBL.XWHCD)
        FB0LW01.XWHABRV[FB0LWIXM] = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      ;
      FB0LW01.FB4GROUP[FB0LWIXM] = FB4REC.FB4GROUP;
      ;
      if (FB0LW00.FB0LWSPR == "P")
        FB0LM010.FB4CRVNB = FB4REC.FB4CRVNB; /* curve number*/
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0LW00.FB0LWDCF = "Y"; /* Indicate vcurve01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "132"; /* Module identification*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L132

// close vcurve01 cursor
Function FB0L133()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C2", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0LM010.XXXMODID = "133"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L133

// edit input data
Function FB0L140()
   /* ------------------------------------------------------------*/
   /* determine if region percents total 100%*/
   /* ------------------------------------------------------------*/
  ;
  FB0LM010.FB0LMTPC = 0; /* initialize total percent*/
  FB0LW00.FB0LWIXM = 1; /* initialize index*/
  ;
  while (FB0LW00.FB0LWIXM < 4)
    /* calculate total percent*/
    FB0LM010.FB0LMTPC = FB0LM010.FB0LMTPC + FB0LW01.FB4RGPCT[FB0LWIXM];
    FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1; /* increment index*/
  end
  ;
  FB0LM010.FB0LMVAR = FB0LM010.FB0LMTPC - 100; /* calculate variance*/
  if (FB0LM010.FB0LMTPC != 100) /* if total percent not 100*/
    FB0LM010.XXXMODID = "500"; /* Module identification*/
    if (converseVar.eventKey is pf9) /* Update*/
      converseLib.validationFailed(45); /* 'total % must equal 100 for update'*/
      exit stack; /* Exit to display map*/
    else
      converseLib.validationFailed(159); /* 'total % must equal 100*/
      exit stack; /* Exit to display map*/
    end
    ;
  end
  ;
  ;
end // end FB0L140

// Format and converse the map
Function FB0L200()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0LM010.XXXCURDT == 0) /* Map is not formatted*/
    FB0L210(); /* Format the data on the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FB0LM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0LM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
   /* ------------------------------------------------------------*/
   /* If process was a successful update*/
       /* set message*/
       /* reset switch*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0LW00.FB0LWSUS == "Y") /* if successful update indicated*/
    converseLib.validationFailed(32); /* 'successful update'*/
    FB0LW00.FB0LWSUS = "N"; /* reset switch*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    ;
    set FB0LM010 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FB0LM010 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0LM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0LM010.CAITEM; /* Application data*/
  ;
  ;
end // end FB0L200

// Format the display data
Function FB0L210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LM010.SY1STNBR = FBWREC.SY1STNBR; /* Style number*/
  FB0LM010.SY2CLRID = FBWREC.SY2CLRID; /* Color identification*/
  FB0LM010.XDMCD = FBWREC.XDMCD; /* Dimension code*/
  ;
  FB0LM010.FB0LMYY1 = FB0LW00.FB0LWFYY; /* from date year*/
  FB0LM010.FB0LMMM1 = FB0LW00.FB0LWFMM; /* from date month*/
  FB0LM010.FB0LMYY2 = FB0LW00.FB0LWTYY; /* to date year*/
  FB0LM010.FB0LMMM2 = FB0LW00.FB0LWTMM; /* to date month*/
  ;
  FB0LW00.FB0LWIXM = 1;
  ;
  while (FB0LW00.FB0LWIXM < 4)
     /* warehouse code*/
    FB0LM010.XWHCD[FB0LWIXM] = FB0LW01.XWHCD[FB0LWIXM];
     /* warehouse abbreviation*/
    FB0LM010.XWHABRV[FB0LWIXM] = FB0LW01.XWHABRV[FB0LWIXM];
     /* region percent*/
    if (FB0LW01.XWHABRV[FB0LWIXM] != " ") /* warehouse present*/
      FB0LM010.FB4RGPCT[FB0LWIXM] = FB0LW01.FB4RGPCT[FB0LWIXM];
    else
      set FB0LM010.FB4RGPCT[FB0LWIXM] protect, invisible; /* set field protected*/
    end
    ;
    FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
    ;
  end
  ;
  ;
end // end FB0L210

// Check attention identifier
Function FB0L300()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFBS01();
      ;
    else
      ;
      converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/
    ;
    FB0LM010.XXXMODID = "300"; /* Module identification*/
    set FB0LM010.CATOAP cursor, bold; /* Highlight*/
    converseLib.validationFailed(44); /* 'exit to application unsuccessful'*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  if (FB0LW00.FB0LWSNP == "Y") /* no product selected*/
    ;
    if (converseVar.eventKey is pf1 /* help menu*/
     || converseVar.eventKey is pf3 /* exit*/
     || converseVar.eventKey is pf5) /* prod menu*/
       /* next sentence*/
      ;
    else
      set FB0LM010.SY1STNBR bold; /* highlight*/
      converseLib.validationFailed(42); /* no product data*/
      exit stack;
      ;
    end
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If transferring to an application that uses the current*/
   /* curve and data has been modified,  display a message saying*/
   /* updates will be lost.  also, set the override flag so that*/
   /* if they still want to transfer, they will the next time*/
   /* around.*/
   /* ------------------------------------------------------------*/
  if (FB0LM010.FB4RGPCT[1] != FB0LW01.FB4RGPCT[1] /* Region 1 modified*/
   || FB0LM010.FB4RGPCT[2] != FB0LW01.FB4RGPCT[2] /* Region 2 modified*/
   || FB0LM010.FB4RGPCT[3] != FB0LW01.FB4RGPCT[3]) /* Region 3 modified*/
    if (converseVar.eventKey is pf13 /* Size percent maintenance*/
     || converseVar.eventKey is pf16 /* Copy a region*/
     || converseVar.eventKey is pf19 /* Assign to product*/
     || converseVar.eventKey is pf12) /* Selection criteria*/
      if (FB0LW00.FB0LWXFL != "O") /* Not override transfer edit*/
        FB0LW00.FB0LWXFL = "O"; /* Override transfer edit*/
        converseLib.validationFailed(157); /* Updates will be lost*/
        exit stack;
      end
    end
  end
  if (converseVar.eventKey is enter /* Enter was hit*/
   || converseVar.eventKey is pf9)  /* Update*/
    FB0LW00.FB0LWXFL = " "; /* Not override transfer edit*/
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = "FB0L"; /* region percent*/
    XSFBS01();
    FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CAITEM = "FB0LM010"; /* Application find code*/
    COMMAREA.CATOAP = "GD01"; /* size/maint sel*/
    XSFBS01(); /* Exit to another application*/
    FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  else
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0C"; /* size/maint sel*/
      XSFBS01();
      FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    else
      ;
      if (converseVar.eventKey is pf5) /* pf5 was pressed*/
        COMMAREA.CATOAP = "FY0M"; /* prod menu*/
        XSFBS01();
        FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
        exit stack; /* return to show error msg*/
      end
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* PF9 was pressed*/
    if (FB0LW00.FB0LWSPR != "I") /* product data not invalid*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    if (FB0LW00.FB0LWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0K"; /* selection criteria*/
      XSFBS01();
      FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (FB0LW00.FB0LWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0J"; /* size percent maintenance*/
      XSFBS01();
      FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    if (FB0LW00.FB0LWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0I"; /* copy a region*/
      XSFBS01();
      FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    if (FB0LW00.FB0LWSPR != "I") /* product data not invalid*/
      COMMAREA.CATOAP = "FB0E"; /* assign to products*/
      XSFBS01();
      FB0LM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
  end
  ;
  if (converseVar.eventKey is enter) /* enter was pressed*/
    return; /* return to previous process*/
  end
  ;
  FB0LM010.XXXMODID = "300"; /* Module identification*/
  converseLib.validationFailed(3); /* 'pf key not supported'*/
  exit stack; /* return to show error msg*/
  ;
  ;
end // end FB0L300

// Reset highlighted fields
Function FB0L400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0LM010.SY1STNBR initialAttributes; /* Style number*/
  set FB0LM010.SY2CLRID initialAttributes; /* Color identification*/
  set FB0LM010.XDMCD initialAttributes; /* Dimension code*/
  ;
  FB0LW00.FB0LWIXM = 1; /* initialize index*/
  while (FB0LW00.FB0LWIXM < 4)
    if (FB0LW01.XWHABRV[FB0LWIXM] != " ")
      set FB0LM010.FB4RGPCT[FB0LWIXM] initialAttributes; /* region percent*/
    end
    FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1; /* increment index*/
  end
  ;
  set FB0LM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0LM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end FB0L400

// Verify the entered data
Function FB0L500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FB0LM010.XXXMODID = "500"; /* Module identification*/
    set FB0LM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine if region percents have been modified.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LW00.FB0LWSPM = "N"; /* set percents modified switch*/
  FB0L510(); /* region percents updated?*/
  ;
   /* ------------------------------------------------------------*/
   /* If none of the fields changed, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0LW00.FB0LWSPM != "Y") /* no region percents updated*/
    FB0LW00.FB0LWIXM = 1; /* initialize index*/
    FB0LM010.FB0LMTPC = 0; /* initialize total percent*/
    while (FB0LW00.FB0LWIXM < 4)
      FB0LM010.FB0LMTPC = FB0LM010.FB0LMTPC + FB0LM010.FB4RGPCT[FB0LWIXM];
      FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
    end
  end
  ;
  FB0LM010.FB0LMVAR = FB0LM010.FB0LMTPC - 100; /* calculate variance*/
  if (FB0LM010.FB0LMTPC != 100) /* if total percent not 100*/
    if (converseVar.eventKey is pf9 /* update requested*/
     || converseVar.eventKey is enter) /* enter pressed*/
      FB0LM010.XXXMODID = "500"; /* Module identification*/
      if (converseVar.eventKey is pf9) /* update requested*/
        converseLib.validationFailed(45); /* 'total % must equal 100 for update'*/
      end
      if (converseVar.eventKey is enter) /* edit*/
        converseLib.validationFailed(159); /* 'total % must equal 100'*/
      end
      FB0LW00.FB0LWIXM = 3;
      while (FB0LW00.FB0LWIXM >= 1)
        if (FB0LM010.FB4RGPCT[FB0LWIXM] != FB0LW01.FB4RGPCT[FB0LWIXM])
          set FB0LM010.FB4RGPCT[FB0LWIXM] cursor, bold; /* highlight*/
        end
        ;
        FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM - 1;
      end
      exit stack; /* Exit to display map*/
      ;
    end
  end
  ;
  ;
end // end FB0L500

// Verify region pcts modified
Function FB0L510()
   /* ------------------------------------------------------------*/
   /* determine if region percents have been modified.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LW00.FB0LWIXM = 1;
  ;
  ;
  while (FB0LW00.FB0LWIXM < 4)
     /* region percent modified?*/
    if (FB0LM010.FB4RGPCT[FB0LWIXM] != FB0LW01.FB4RGPCT[FB0LWIXM])
       /* total all region percents to get total percent*/
      FB0LW00.FB0LWSPM = "Y";
      FB0LW00.FB0LWIX2 = 1;
      FB0LM010.FB0LMTPC = 0;
      while (FB0LW00.FB0LWIX2 < 4)
        FB0LM010.FB0LMTPC = FB0LM010.FB0LMTPC + FB0LM010.FB4RGPCT[FB0LWIX2];
        FB0LW00.FB0LWIX2 = FB0LW00.FB0LWIX2 + 1;
      end
      FB0LW00.FB0LWIXM = 4;
      ;
    end
    ;
    FB0LW00.FB0LWIXM = FB0LW00.FB0LWIXM + 1;
    ;
  end
  ;
  ;
end // end FB0L510

// Process valid input request
Function FB0L600()
   /* ------------------------------------------------------------*/
   /* If update not requested or an error has occured, redisplay*/
   /* the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf9) /* update not requested*/
    if (converseVar.validationMsgNum != 0) /* error occured*/
      exit stack; /* redisplay map*/
    end
  end
  ;
  if (converseVar.eventKey is enter) /* enter pressed*/
    return; /* return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* update modified fields*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FB0L610(); /* Update table row*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/
  ;
  FB0LW00.FB0LWSUS = "Y"; /* indicate update was successful*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the display storage and save key map data.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0LW01 empty; /* display storage*/
  ;
  FB0LW01.SY1STNBR = FB0LM010.SY1STNBR; /* Style code*/
  FB0LW01.SY2CLRID = FB0LM010.SY2CLRID; /* Color code*/
  FB0LW01.XDMCD = FB0LM010.XDMCD; /* Dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear map input/output area and request data to display.*/
   /* ------------------------------------------------------------*/
  ;
   /* SET FB0LM010 CLEAR              ; M001 input/output*/
  ;
  if (FB0LM010.FB4RGPCT[1] != FB0LW01.FB4RGPCT[1] /* Region 1 modified*/
   || FB0LM010.FB4RGPCT[2] != FB0LW01.FB4RGPCT[2] /* Region 2 modified*/
   || FB0LM010.FB4RGPCT[3] != FB0LW01.FB4RGPCT[3]) /* Region 3 modified*/
    ;
    FB0LW00.FB0LWSWR = "Y"; /* Request for data switch*/
  else
    FB0LW00.FB0LWSWR = "N"; /* Request for data switch*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/
  ;
  ;
end // end FB0L600

// determine if update requested
Function FB0L610()
   /* ------------------------------------------------------------*/
   /* initialize index*/
   /* ------------------------------------------------------------*/
  ;
  FB0LW00.FB0LWIX2 = 1;
  ;
   /* ------------------------------------------------------------*/
   /* while index is less than four, and region percent has been*/
   /* modified, update the table row.*/
   /* ------------------------------------------------------------*/
  ;
  while (FB0LW00.FB0LWIX2 < 4)
    if (FB0LM010.FB4RGPCT[FB0LWIX2] != FB0LW01.FB4RGPCT[FB0LWIX2])
      FB0L611(); /* update region percents*/
    end
    ;
    FB0LW00.FB0LWIX2 = FB0LW00.FB0LWIX2 + 1;
    ;
  end
  ;
  ;
end // end FB0L610

// Update the table row
Function FB0L611()
   /* ------------------------------------------------------------*/
   /* Format the key*/
   /* ------------------------------------------------------------*/
  ;
  set FB4REC empty; /* clear row storage area*/
  ;
   /* move record saved to record to be updated*/
  FB4REC.FB4GROUP = FB0LW01.FB4GROUP[FB0LWIX2];
  ;
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  FB4REC.FB4RGPCT = FB0LM010.FB4RGPCT[FB0LWIX2];
  ;
   /* ------------------------------------------------------------*/
   /* Select vcurve01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("U ", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FB0LM010.XXXMODID = "611"; /* Module identification*/
        converseLib.validationFailed(46); /* 'database updated by another user'*/
        exit stack; /* Exit to display map*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* database currently in use*/
          FB0LM010.XXXMODID = "611"; /* Module identification*/
          converseLib.validationFailed(57); /* 'database currently in use'*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          ;
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* rollback changes made by user*/
          converseLib.validationFailed(48); /* 'fatal data base error'*/
        end
      end
    end
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FB0LM010.XXXMODID = "611"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0LM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0L611

//*** RECORD=FB0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FB0LW00 type basicRecord
  10 FB0LWSWR FB0LWSWR ; 
  10 FB0LWXFL FB0LWXFL ; 
  10 FB0LWSPR FB0LWSPR ; 
  10 FB0LWSNP FB0LWSNP ; 
  10 FB0LWSPM FB0LWSPM ; 
  10 FB0LWSUS FB0LWSUS ; 
  10 FB0LWSTD FB0LWSTD ; 
  10 XGPCD XGPCD ; 
  10 FB0LWIXM FB0LWIXM ; 
  10 FB0LWIX2 FB0LWIX2 ; 
  10 FB0LMTPC FB0LMTPC ; 
  10 FB1INSEQ FB1INSEQ ; 
  10 XXXMODID XXXMODID ; 
  10 FB0LWDCF FB0LWDCF ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 FB5FRMDT FB5FRMDT ; 
  10 FB0LWFDT FB0LWFDT ; 
    15 FB0LWF3 FB0LWF3 ; 
    15 FB0LWFYY FB0LWFYY ; 
    15 FB0LWFMM FB0LWFMM ; 
    15 FB0LWFDD FB0LWFDD ; 
  10 FB5TODT FB5TODT ; 
  10 FB0LWTDT FB0LWTDT ; 
    15 FB0LWT3 FB0LWT3 ; 
    15 FB0LWTYY FB0LWTYY ; 
    15 FB0LWTMM FB0LWTMM ; 
    15 FB0LWTDD FB0LWTDD ; 
end // end FB0LW00

//*** RECORD=FB0LW01 ****
// ****************** selection parameters ********************
// 
// DB2 TABLE VIEW:      dfcast.vcurve01
// 
// COPYLIB MEMBER:      DCL00542
// 
// I/O MODULE:          IO3020
// 
// KEY TO DB2 TABLE:    fb1inseq, xgpcd, sy1stnbr, sy2clrid,
//                     xdmcd, xqacd, xsdcd, xsacd, xpgcd, xumcd
// MAINTENANCE LOG:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/27/88  wdishm  New record definition.
// ***********************
Record FB0LW01 type basicRecord
  5 FB4GROUP FB4GROUP [3] ; 
    10 FB4KEY FB4KEY ; 
      15 FB1INSEQ FB1INSEQ ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 FB4CRVNB FB4CRVNB ; 
    10 FB4STDFL FB4STDFL ; 
    10 XWHCD XWHCD ; 
    10 FB4QTYLK FB4QTYLK ; 
    10 FB4RGPCT FB4RGPCT ; 
    10 FB0LWFL1 FB0LWFL1 ; 
    10 FB0LWFL2 FB0LWFL2 ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
  5 CACHGFL CACHGFL ; 
  5 XWHABRV XWHABRV [3] ; 
end // end FB0LW01

DataItem FB0LMTPC num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// flag for vcurve01
DataItem FB0LWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0LWF3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date day
DataItem FB0LWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from work date
DataItem FB0LWFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-dmd-hist-qty
DataItem FB0LWFL1 char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb-sz-pct
DataItem FB0LWFL2 char(120)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date month
DataItem FB0LWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date year
DataItem FB0LWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for region percents
DataItem FB0LWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FB0LWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product data availability
DataItem FB0LWSNP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updated percents switch
DataItem FB0LWSPM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing switch
DataItem FB0LWSPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0LWSTD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update successful switch
DataItem FB0LWSUS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FB0LWSWR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero and century
DataItem FB0LWT3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date day
DataItem FB0LWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to work date
DataItem FB0LWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date month
DataItem FB0LWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date year
DataItem FB0LWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Transfer override flag
DataItem FB0LWXFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

