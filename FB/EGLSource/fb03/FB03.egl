package fb03;

import corpcom1.CAUSERID;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx2.XWHCD;
import fb.common.FB7REC;
import fb.common.FB7RTADT;
import fb.common.FB9REC;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import fb.common.FBZREC;
import fy.common.FTWR-EQMT-FL;
import fy.common.FY1FCTYC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import ww.common.WEU0100;
//*** PROGRAM=FB03 ****
// Maintenance History
// -----------------------------------------------------------
// FB-257  03-05-92 pmainw  Support multiple S.O. for an xref.
// Maint   08-28-92 ldeluh  Add active status check to xct edit
// Maint   10-24-94 jjudki  Bug. RTA date allows too many days
//                         in a month. Added ta0040 to fb03510.
// pg-83   12-08-94 pmainw  Change vfsctl01 to support 20 Lines
// ecf     01-04-95 lrein   Carry whse around.  This for
//                          European Centralised Forecasting
// ecf     02-08-95 jalle1  Set S.O. dark if = 0.
// ecf     03-03-95 lrein   temp get no hit on sumcode for eur
//         04-11-95 jalle1  remove all sumcd logic.  determine
//                          if euro from dprodc.vprdcu01.
// FB-341  11-10-90 pmainw  Improve the edit for duplicates.
// FB-341  11-27-90 pmainw  Improve the edit for duplicates.
// fb-873  05-06-97 ccaint  access vsycolr01 for description
// YR2000  12-03-97 rgilli  Y2K MODIFICATIONS MADE TO:
//                          FB03M010: Remove zero supression
//                          FB03W00:  Add items fb03wbyy &
//                                    fb03wbmm.
//                          FB03121:  Century windowing
//                          FB03500:  Century windowing
//                          FB03510:  Century windowing
//                          FB03600:  Century windowing
//                          FB03630:  Century windowing
// NSC     03-14-00 greddy  prevent footwear rows from display-
//                          ing. Added FB03125. Modified
//                          FB03122.
// *********************
Program FB03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB03W00 FB03W00; // record
  FB03W01 FB03W01; // record
  FB03W02 FB03W02; // record
  FB03W03 FB03W03; // record
  FB03W04 FB03W04; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FBZREC FBZREC; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WEU0100 WEU0100; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FB03M.FB03M010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    ;
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
    ;
     /* ------------------------------------------------------------*/
      /* initialise working storage and map areas*/
     /* ------------------------------------------------------------*/
    ;
    set FB03W00 empty; /* working storage*/
    set FB03W01 empty; /* screen display working storage*/
    set FB03W02 empty; /* screen display tsq area*/
    set FB03W03 empty; /* 'from' record area*/
    set FB03W04 empty; /* 'to' record  area*/
    set SQLCA empty; /* sql area*/
    set FB03M010 initial; /* map area*/
    FB03W00.FB03WRDS = "N"; /* dont request data*/
    FB03W00.FB03WMCS = "N"; /* dont format map*/
    FB03W00.FB03WSAS = "N"; /* scrolling not allowed yet*/
    FB03W00.FB03WMSL = 8; /* maximum possible screen lines*/
    FB03W00.FB03WSTP = 1; /* current ts page*/
    FB03W00.XXXTSLEN = 524; /* temp storage queue length*/
    ;
     /* ------------------------------------------------------------*/
      /* see if key data is in commarea*/
     /* ------------------------------------------------------------*/
    ;
    if (FBXREC.CAUSERID != " ") /* userid has been changed*/
      FB03M010.CAUSERID = FBXREC.CAUSERID;
      FB03W00.FB03WRDS = "Y"; /* request data*/
    else
      FB03M010.CAUSERID = COMMAREA.CAUSERID;
    end
    ;
    if (FBXREC.XCTCD != " ") /* country code entered*/
      FB03M010.XCTCD = FBXREC.XCTCD;
      FB03W00.FB03WRDS = "Y"; /* request data*/
    end
    ;
    FB03001: FB03001();
    goto FB03001;
  end // end main
end // end FB03

// nil rta maint country
Function FB03001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB03100(); /* obtain data to display*/
  ;
  FB03200(); /* format and display map*/
  ;
  FB03300(); /* Check attention identifier*/
  ;
  FB03400(); /* Reset fields to normal intensity*/
  ;
  FB03500(); /* Verify the entered data*/
  ;
  FB03600(); /* Process valid input request*/
  ;
  ;
end // end FB03001

// obtain data to display
Function FB03100()
  if (converseVar.validationMsgNum == 0)
    ;
    if (FB03M010.FB03MBMO != 0) /* buy date present on screen*/
      FB03W01.FB03MBMO = FB03M010.FB03MBMO;
    else
      FB03130(); /* get buy date*/
      FB03W00.FB03WBDT = FB9REC.FB8BUYDT; /* buy date ccyymmdd*/
      FB03W01.FB03MBMO = FB03W00.FB03MBMO; /* buy date yymm*/
      FB03M010.FB03MBMO = FB03W00.FB03MBMO; /* map buy date*/
    end
    ;
  end
  ;
  if (FB03W00.FB03WRDS != "Y" /* data has not been requested*/
   || converseVar.validationMsgNum != 0)
    return; /* return to calling process*/
  end
  ;
  FB03S01(); /* purge temp storage*/
  FB03W00.FB03WSAS = "N"; /* scroll allowed switch*/
  FB03W00.FB03WRDS = "N"; /* dont request data*/
  ;
  if (FB03M010.XCTCD == " ") /* country not passed*/
    FB03M010.XXXMODID = "100"; /* process number*/
    converseLib.validationFailed(8); /* required field*/
    set FB03M010.XCTCD cursor, bold; /* highlight*/
    exit stack; /* display map*/
  end
  ;
   /* PERFORM FB03110                ; get scheduler code*/
  FB03140(); /* get EUR all countries code*/
  FB03145(); /* get NIL all countries code*/
  FB03120(); /* process product lines*/
  FB03W00.FB03WMCS = "Y"; /* format map*/
  FB03W00.FB03WSAS = "Y"; /* scroll allowed switch*/
  ;
  if (FB03W00.FB03WIXM > 0) /* partial page has been formatted*/
    FB03S04(); /* add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* save key data in display working storage*/
   /* ------------------------------------------------------------*/
  ;
  FB03W01.CAUSERID = FB03M010.CAUSERID; /* user id*/
  FB03W01.XCTCD = FB03M010.XCTCD; /* country code*/
  FB03W01.FB03MBMO = FB03M010.FB03MBMO; /* buy date*/
  ;
  if (converseVar.validationMsgNum == 0)
    FB03W00.XXXTSPAG = FB03W00.FB03WSTP; /* desired page number*/
  end
end // end FB03100

// process product lines
Function FB03120()
  FB03121(); /* select set vmfbuy01*/
  FB03W00.FB03WFFS = "Y"; /* first fetch*/
  ;
  while (SQLCA.VAGen_SQLCODE != 100) /* rows of data in table*/
    FB03122(); /* fetch next row*/
    ;
    /* GREDDY -- NSC CHANGES.*/
    if (SQLCA.VAGen_SQLCODE != 100 /* found a row*/
     && FB03W00.FTWR-EQMT-FL == "Y") /* and equipment related*/
      FB03123(); /* save in display working storage*/
    end
    ;
  end
  ;
  FB03124(); /* close cursor*/
end // end FB03120

// select set VMFBUY01
Function FB03121()
   /* ------------------------------------------------------------*/
   /* set the key, select a set of rows from dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  set FB7REC empty; /* initialise record*/
   /* MOVE PG1REC.PG1SC4CD TO FB7REC.PG1SC4CD;  scheduler code*/
  FB7REC.XDVCD = "02"; /* nil division code*/
  FB7REC.SY1STNBR = "*"; /* style number*/
  FB7REC.SY2CLRID = "*"; /* color code*/
  FB7REC.XDMCD = "*"; /* dimension code*/
  ;
   /* IF FB03M010.XCTCD NE ' '        ;        country code in map*/
  FB7REC.XCTCD = FB03M010.XCTCD; /* country code*/
   /* ELSE ;*/
    /* MOVE '*' TO FB7REC.XCTCD      ;         wild card country*/
   /* END ;*/
  ;
  FB03W00.FB03MBMO = FB03W01.FB03MBMO; /* buy month*/
   /* ------------------------- y2k out begin ------------------*/
   /* MOVE 19 TO FB03W00.FB03WBCC;*/
   /* ------------------------- y2k out end   ------------------*/
   /* ------------------------- y2k in begin  ------------------*/
  if (FB03W00.FB03WBYY > 60) /* Century windowing*/
    FB03W00.FB03WBCC = 19;
  else
    FB03W00.FB03WBCC = 20;
  end
   /* ------------------------- y2k in end    ------------------*/
  FB03W00.FB03WBDD = 01;
  FB7REC.FB8BUYDT = FB03W00.FB03WBDT; /* buy date*/
  ;
   /* ------------------------------------------------------------*/
   /* Declare cursor for dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("S2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03121"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "121";
  exit stack;
  ;
end // end FB03121

// fetch next row VMFBUY01
Function FB03122()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("N2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB03W00.FB03WFFS = "N"; /* not first fetch any more*/
     /* GREDDY -- NSC CHANGES*/
      FB03125(); /* Check for equipment products*/
      if (FB03W00.FTWR-EQMT-FL == "Y") /* If equipment*/
        FB03S03(); /* get product descriptions*/
      end
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      if (FB03W00.FB03WFFS == "Y") /* first fetch*/
        FB03S02(); /* reset screen*/
        FB03M010.XXXMODID = "122";
        converseLib.validationFailed(18); /* no data to display*/
        set FB03M010.XCTCD cursor, bold;
        exit stack; /* display map*/
      end
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB03M010.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB03W00.FB03WMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT ROW     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.FB7GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB03W00.FB03WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03122

// save in disp working storage
Function FB03123()
   /* --------------------------------------------------------*/
   /* Add page to temp storage if all lines on page have been*/
   /* filled.*/
   /* ---------------------------------------------------------*/
  ;
  if (FB03W00.FB03WIXM == FB03W00.FB03WMSL) /* temp storage max*/
    FB03S04(); /* Add page to temp storage*/
  end
  ;
  FB03W00.FB03WIXM = FB03W00.FB03WIXM + 1; /* temp storage line count*/
  ;
  FB03W02.SY1STNBR[FB03WIXM] = FB7REC.SY1STNBR;
  FB03W02.SY2CLRID[FB03WIXM] = FB7REC.SY2CLRID;
  FB03W02.XDMCD[FB03WIXM] = FB7REC.XDMCD;
  FB03W02.SY1SSTNM[FB03WIXM] = PG2REC.SY1SSTNM;
  FB03W02.SY2CLRAB[FB03WIXM] = PG2REC.SY2CLRAB;
  FB03W02.FB7RTADT[FB03WIXM] = FB7REC.FB7RTADT;
  FB03W02.PC2CUXID[FB03WIXM] = FB7REC.PC2CUXID;
  FB03W02.OP1PARTN[FB03WIXM] = FB7REC.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FB03W02.OP1CUOID[FB03WIXM] = FB7REC.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB03W02.OP1NORID[FB03WIXM] = FB7REC.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB03W02.FY1FCTYC[FB03WIXM] = FB7REC.FY1FCTYC;
  FB03W02.XWHCD[FB03WIXM] = FB7REC.XWHCD;
  FB03W00.FB03WWK = 0; /* initialise accumulator*/
  FB03W00.FB03WGIX = 1; /* first size*/
  ;
  while (FB03W00.FB03WGIX < 41) /* for each size*/
    FB03W00.FB03WWK = FB03W00.FB03WWK + FB7REC.FB7QTB[FB03WGIX];
    FB03W00.FB03WGIX = FB03W00.FB03WGIX + 1; /* next size*/
  end
  ;
  FB03W02.FB03MQTB[FB03WIXM] = FB03W00.FB03WWK;
  ;
end // end FB03123

// close cursor VMFBUY01
Function FB03124()
  ;
   /* ------------------------------------------------------------*/
   /* close cursor for dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("C2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03124"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "124";
  exit stack;
  ;
end // end FB03124

// check for equipment rows
Function FB03125()
   /* ---------------------------- FB03125 ---------------------------*/
   /* ROUTINE to check if the data is Footwear or Equipment*/
   /* product - Call to IO-MOD EU0100.*/
   /* In this process EU0100 is called twice.  Once to check if the*/
   /* fetched product is Equipment product in the Product Table.  If*/
   /* not, its check for Equipment product in the Development Table.*/
   /* If also not available there it is designated a Footwear Product.*/
   /* Designated footwear products are not considered for further*/
   /* processing.*/
   /* ----------------------------------------------------------------*/
  ;
  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/
  ;
  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  FB03W00.FTWR-EQMT-FL = "N"; /* Ftwr r Equipment Ind flg*/
  WEU0100.WEU0100-CALLING-APPL = "FB03";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;
  ;
  WEU0100.XGPCD = "02"; /* For Footwear/Equip only.*/
  WEU0100.SY1STNBR = FB7REC.SY1STNBR;
  WEU0100.SY2CLRID = FB7REC.SY2CLRID;
  WEU0100.XDMCD = FB7REC.XDMCD;
  WEU0100.WEU0100-TASK = "S "; /* select unique*/
  WEU0100.WEU0100-CALLER-LOCATION = "FB03125";
  ;
  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* Call EU0100 Rtn to check*/
                                  /* Ftwr or Euip*/
  SQLCA.SQLCAREC = WEU0100.SQLCAREC;
  ;
  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (WEU0100.WEU0100-RETURN-CODE != 0) /* call successful*/
    if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/
    else
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
    end
    ;
    TA1REC.TA1TYPE = "DB2"; /* type of error*/
    TA1REC.TA1LOC = "FB03125"; /* program location*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = "EU0100"; /* called program*/
    TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
    TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error handler*/
  end
  ;
  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    if (WEU0100.WEU0100-EQUIP-PROD-FL == "N") /* Not a equipment record*/
      set WEU0100 empty;
      set SQLCA empty;
      WEU0100.WEU0100-CALLING-APPL = "FB03";
      WEU0100.SQLCAREC = SQLCA.SQLCAREC;
      ;
      WEU0100.XGPCD = "02"; /* For Footwear/Equip only.*/
      WEU0100.SY1STNBR = FB7REC.SY1STNBR;
      WEU0100.SY2CLRID = FB7REC.SY2CLRID;
      WEU0100.XDMCD = FB7REC.XDMCD;
      ;
      WEU0100.WEU0100-TASK = "SD"; /* Check development Equip.*/
      WEU0100.WEU0100-CALLER-LOCATION = "FB03125";
      ;
      try
        call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
      end /* select dev. equipment*/
      ;
      SQLCA.SQLCAREC = WEU0100.SQLCAREC;
      ;
      TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE;
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      ;
      if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
        if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* equipment record*/
          FB03W00.FTWR-EQMT-FL = "Y"; /* Set flag to Equip*/
        end
      else
        if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
          TA1REC.TA1FUNC = "POST"; /* termination function*/
        else
          TA1REC.TA1FUNC = "RETN"; /* termination function*/
        end
        ;
        TA1REC.TA1TYPE = "DB2"; /* type of error*/
        TA1REC.TA1LOC = "FL07133"; /* program location*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1PGMNO = "EU0100"; /* called program*/
        TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
        TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error handler*/
      end
      ;
    else
      FB03W00.FTWR-EQMT-FL = "Y"; /* Set flag to Equip*/
    end
  end
  ;
end // end FB03125

// get buy date
Function FB03130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB9REC.FB9BTQTY = 2 * FB9REC.FB9BTQTY; /* double tolerance*/
      FB03131(); /* get first poss rta date*/
      FB03132(); /* get last poss rta date*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB03M010.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03130

// get first possible rta date
Function FB03131()
  set TA2REC empty;
  TA2REC.TA2GRGGN = FB9REC.FB8BUYDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2DYAOD = -90;
  TA2REC.TA2GRTYP = "G";
  ;
   /* ------------------------------------------------------------*/
   /* get the earliest possible rta date*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get date*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      FB03W00.FB03WFRD = TA2REC.TA2GRGGN; /* first poss rta dt*/
      return; /* Return to previous process*/
    else
      ;
      if (TA2REC.TA2RTNCD < 888)
        converseLib.validationFailed(17); /* invalid date*/
        FB03M010.XXXMODID = "131";
        set FB03M010.FB03MBMO cursor, bold;
        return; /* Return to previous process*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  ;
  FB03M010.XXXMODID = "131"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET DATE            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03131

// get last possible rta date
Function FB03132()
  set TA2REC empty;
  TA2REC.TA2GRGGN = FB9REC.FB8BUYDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2DYAOD = 90;
  TA2REC.TA2GRTYP = "G";
  ;
   /* ------------------------------------------------------------*/
   /* get the earliest possible rta date*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get date*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      FB03W00.FB03WLRD = TA2REC.TA2GRGGN; /* last  poss rta dt*/
      return; /* Return to previous process*/
    else
      ;
      if (TA2REC.TA2RTNCD < 888)
        converseLib.validationFailed(17); /* invalid date*/
        FB03M010.XXXMODID = "132";
        set FB03M010.FB03MBMO cursor, bold;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  ;
  FB03M010.XXXMODID = "132"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET DATE            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03132

// get EUR all countries code
Function FB03140()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBMREC empty; /* clear the booger*/
  set FBZREC empty; /* clear the other booger*/
  FBZREC.FBZFUNC = "S "; /* call function*/
  ;
  FBMREC.PG1SC4CD = 98; /* EUR master scheduler code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" (FBZREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB03W01.FB03MACF-EUR = FBMREC.FBMALAFL;
      FB03W00.FB03W-FBMGROUP-EUR = FBMREC.FBMGROUP;
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB03M010.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET EUR ALL COUNTIRES CODE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.PG1SC4CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03140

// get NIL all countries code
Function FB03145()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FBMREC empty; /* clear the booger*/
  set FBZREC empty; /* clear the other booger*/
  FBZREC.FBZFUNC = "S "; /* call function*/
  ;
  FBMREC.PG1SC4CD = 99; /* EUR master scheduler code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" (FBZREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB03W01.FB03MACF = FBMREC.FBMALAFL;
      FB03W00.FB03W-FBMGROUP = FBMREC.FBMGROUP;
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB03M010.XXXMODID = "145"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET NIL ALL COUNTIRES CODE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.PG1SC4CD; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03145

// format and display map
Function FB03200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  FB03M010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBWREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB03W00.FB03WMCS == "Y") /* map needs to be formatted*/
    FB03210(); /* format the map*/
  end
  ;
  if (FBWREC.XXXMSGNO != 0)
                                   /* error or informational message*/
    ;
    if (FBWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBWREC.XXXMSGNO);
    end /* move to map*/
    set FB03M010 alarm; /* indicate sound alarm*/
    ;
  end
  ;
  FB03W00.FB03WMIX = FB03W00.FB03WMSL;
  ;
  while (FB03W00.FB03WMIX > 0)
    if (FB03M010.SY1STNBR[FB03WMIX] == " ")
      set FB03M010.FB03MSCD[FB03WMIX] skip, invisible;
      set FB03M010.SY1STNBR[FB03WMIX] skip, invisible;
      set FB03M010.XDMCD[FB03WMIX] skip, invisible;
      set FB03M010.SY2CLRID[FB03WMIX] skip, invisible;
      set FB03M010.SY1SSTNM[FB03WMIX] skip, invisible;
      set FB03M010.SY2CLRAB[FB03WMIX] skip, invisible;
      set FB03M010.FB03MRDT[FB03WMIX] skip, invisible;
      set FB03M010.PC2CUXID[FB03WMIX] skip, invisible;
      set FB03M010.OP1PARTN[FB03WMIX] skip, invisible; /* OP-ORD-PART-CHAR*/
      set FB03M010.OP1CUOID[FB03WMIX] skip, invisible; /* OP-CUST-ORD-ID*/
      set FB03M010.FB03MDOT[FB03WMIX] skip, invisible; /**/
      set FB03M010.OP1NORID[FB03WMIX] skip, invisible; /* OP-NIKE-ORD-ID*/
      set FB03M010.FB03MLIT[FB03WMIX] skip, invisible; /* S.O. LITERAL*/
      set FB03M010.FB03MQTB[FB03WMIX] skip, invisible;
      set FB03M010.FY1FCTYC[FB03WMIX] skip, invisible;
    else
      ;
      if (FB03M010.OP1CUOID[FB03WMIX] == 0
       && FB03M010.OP1NORID[FB03WMIX] == 0)
        set FB03M010.OP1PARTN[FB03WMIX] skip, invisible; /* OP-ORD-PART-CHAR*/
        set FB03M010.OP1CUOID[FB03WMIX] skip, invisible; /* OP-CUST-ORD-ID*/
        set FB03M010.FB03MDOT[FB03WMIX] skip, invisible; /**/
        set FB03M010.OP1NORID[FB03WMIX] skip, invisible; /* OP-NIKE-ORD-ID*/
      end
    end
    ;
    FB03W00.FB03WMIX = FB03W00.FB03WMIX - 1;
  end
  ;
  converse FB03M010 ;
   /* ----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  FBWREC.XXXMSGNO = 0; /* clear message number*/
  COMMAREA.CATOAP = FB03M010.CATOAP; /* xfer to application*/
  COMMAREA.CAITEM = FB03M010.CAITEM; /* xfer to appl date*/
end // end FB03200

// format map
Function FB03210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FB03M010 initial; /* Map input/output area*/
  FB03M010.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  FB03W00.FB03WMCS = "N"; /* reset format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03W00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FB03W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FB03W00.XXXTSPAG > FB03W00.TA5TSQIX) /* Desired greater highest*/
        FB03W00.XXXTSPAG = FB03W00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FB03S05(); /* Obtain temporary storage page*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the header data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB03M010.CAUSERID = FB03W01.CAUSERID;
  FB03M010.FB03MBMO = FB03W01.FB03MBMO;
  FB03M010.XCTCD = FB03W01.XCTCD;
  FB03M010.FB03MACF = FB03W01.FB03MACF;
  FB03M010.FB03MACF-EUR = FB03W01.FB03MACF-EUR;
  ;
   /* ------------------------------------------------------------*/
   /* Format the detail lines in the map from temp storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB03W00.FB03WMIX = 1; /* first screen line*/
  ;
  while (FB03W00.FB03WMIX <= FB03W00.FB03WMSL
   && FB03W02.SY1STNBR[FB03WMIX] != " ")
    FB03M010.SY1STNBR[FB03WMIX] = FB03W02.SY1STNBR[FB03WMIX];
    FB03M010.SY2CLRID[FB03WMIX] = FB03W02.SY2CLRID[FB03WMIX];
    FB03M010.XDMCD[FB03WMIX] = FB03W02.XDMCD[FB03WMIX];
    FB03M010.SY1SSTNM[FB03WMIX] = FB03W02.SY1SSTNM[FB03WMIX];
    FB03M010.SY2CLRAB[FB03WMIX] = FB03W02.SY2CLRAB[FB03WMIX];
    /* MOVE FB03W02.FB7RTADT(FB03WMIX)TOFB03M010.FB03MRDT(FB03WMIX)*/
    FB03W00.FB03WDT2 = FB03W02.FB7RTADT[FB03WMIX]; /* yymmdd*/
    FB03W00.FB03WYY1 = FB03W00.FB03WYY2;
    FB03W00.FB03WMM1 = FB03W00.FB03WMM2;
    FB03W00.FB03WDD1 = FB03W00.FB03WDD2;
    FB03M010.FB03MRDT[FB03WMIX] = FB03W00.FB03WDT1; /* mmddyy*/
    FB03M010.PC2CUXID[FB03WMIX] = FB03W02.PC2CUXID[FB03WMIX];
    FB03M010.OP1PARTN[FB03WMIX] = FB03W02.OP1PARTN[FB03WMIX];
    FB03M010.OP1CUOID[FB03WMIX] = FB03W02.OP1CUOID[FB03WMIX];
    FB03M010.OP1NORID[FB03WMIX] = FB03W02.OP1NORID[FB03WMIX];
    FB03M010.FB03MQTB[FB03WMIX] = FB03W02.FB03MQTB[FB03WMIX];
    FB03M010.FY1FCTYC[FB03WMIX] = FB03W02.FY1FCTYC[FB03WMIX];
    FB03W00.FB03WMIX = FB03W00.FB03WMIX + 1;
  end
  ;
end // end FB03210

// validate attn identifier
Function FB03300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set FBWREC empty;
      FBXREC.CAUSERID = FB03M010.CAUSERID;
      FBXREC.XCTCD = FB03M010.XCTCD;
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      FB03S01(); /* purge temp storage*/
      XSFBS01(); /* Exit to another application*/
      FB03M010.XXXMODID = "300"; /* Process name*/
      set FB03M010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      FB03M010.XXXMODID = "300"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* help*/
   || converseVar.eventKey is pf3 /* buy menu*/
   || converseVar.eventKey is pf4 /* master menu*/
   || converseVar.eventKey is pa2) /* reset screen*/
    ;
    if (converseVar.eventKey is pa2) /* reset screen*/
      COMMAREA.CATOAP = "FB03"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf1) /* help*/
      COMMAREA.CAITEM = "FB03M010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* buy menu*/
      COMMAREA.CATOAP = "FB0F";
    end
    ;
    set FBWREC empty;
    FBXREC.CAUSERID = FB03M010.CAUSERID;
    FBXREC.XCTCD = FB03M010.XCTCD;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    FB03S01(); /* purge temp storage*/
    XSFBS01(); /* transfer to another application*/
    FB03W00.FB03WRDS = "N"; /* dont request data*/
    FB03W00.FB03WMCS = "Y"; /* format map*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7 /* scroll backward*/
   && converseVar.eventKey not pf8 /* scroll forward*/
   && converseVar.eventKey not pf14) /* size qty moves*/
    converseLib.validationFailed(3); /* invalid key*/
    FB03M010.XXXMODID = "300"; /* program name*/
    ;
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
       /* reset map*/
    end
    ;
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf7 /* scroll up*/
   || converseVar.eventKey is pf8) /* scroll down*/
    ;
    if (FB03W00.FB03WSAS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(167); /* invalid product*/
      FB03M010.XXXMODID = "300"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf8 /* scroll forward*/
   && FB03W00.XXXTSPAG >= FB03W00.TA5TSQIX) /* already on last page*/
    FB03M010.XXXMODID = "300"; /* process number*/
    converseLib.validationFailed(7); /* no more pages to display*/
    exit stack; /* display the map*/
  end
  ;
  if (converseVar.eventKey is pf7 /* scroll backward*/
   && FB03W00.XXXTSPAG <= 1)      /* already on first page*/
    FB03M010.XXXMODID = "300"; /* process number*/
    converseLib.validationFailed(6); /* no previous pages*/
    exit stack; /* display the map*/
  end
  ;
end // end FB03300

// reset highlighted fields
Function FB03400()
   /* ------------------------------------------------------------*/
   /* reset key fields*/
   /* ------------------------------------------------------------*/
  ;
  set FB03M010.CAUSERID initialAttributes; /* user code*/
  set FB03M010.XCTCD initialAttributes; /* country code*/
  set FB03M010.FB03MACF initialAttributes; /* all countries flag*/
  set FB03M010.FB03MACF-EUR initialAttributes; /* EUR all countries flag*/
  ;
   /* ------------------------------------------------------------*/
   /* reset detail line fields*/
   /* ------------------------------------------------------------*/
  ;
  FB03W00.FB03WMIX = 1; /* first screen line*/
  ;
  while (FB03W00.FB03WMIX <= FB03W00.FB03WMSL) /* for each screen line*/
    set FB03M010.FB03MSCD[FB03WMIX] initialAttributes; /* select code*/
    set FB03M010.FB03MRDT[FB03WMIX] initialAttributes; /* rta date*/
    set FB03M010.FB03MQTB[FB03WMIX] initialAttributes; /* quantity to buy*/
    set FB03M010.OP1CUOID[FB03WMIX] initialAttributes; /* Cust ord id*/
    set FB03M010.FB03MDOT[FB03WMIX] initialAttributes; /* .*/
    set FB03M010.OP1NORID[FB03WMIX] initialAttributes; /* Nike ord id*/
    set FB03M010.OP1PARTN[FB03WMIX] initialAttributes; /* Part char*/
    FB03W00.FB03WMIX = FB03W00.FB03WMIX + 1; /* next line*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14  /* transfer to size maint*/
   && converseVar.eventKey not pf7   /* transfer to size maint*/
   && converseVar.eventKey not pf8)  /* transfer to size maint*/
    FB03M010.XXXMODID = "400"; /* Module identification*/
    converseLib.validationFailed(116); /* pf key not valid*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03M010.XCTCD == "?") /* line list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY CODE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FB03M010.XCTCD = FB03W01.XCTCD;
    else
      FB03M010.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
    ;
    set FB03M010.XCTCD cursor; /* Establish cursor position*/
    /* ------------------------------------------------------------*/
     /* Indicate that the requested lists have been displayed and*/
     /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    FB03M010.XXXMODID = "400"; /* Module identification*/
    converseLib.validationFailed(333); /* press enter to continue*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
end // end FB03400

// verify input data
Function FB03500()
  FB03W00.FB03WDCS = "N"; /* data didnt change*/
  ;
   /* ------------------------------------------------------------*/
   /* check if key modified*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03M010.CAUSERID != FB03W01.CAUSERID /* user id changed*/
   || FB03M010.XCTCD != FB03W01.XCTCD       /* country code changed*/
   || FB03M010.FB03MBMO != FB03W01.FB03MBMO) /* buy month*/
    FB03W00.FB03WKCS = "Y"; /* key changed*/
  else
    FB03W00.FB03WKCS = "N"; /* key did not change*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* check the selection codes*/
   /* ------------------------------------------------------------*/
  ;
  FB03W00.FB03WMIX = FB03W00.FB03WMSL; /* max poss lines per page*/
  set FB03W03 empty; /* initialise hold area*/
  ;
  while (FB03W00.FB03WMIX > 0) /* for each line on screen*/
    FB03W00.FB03WDT1 = FB03M010.FB03MRDT[FB03WMIX]; /* mmddyy*/
    FB03W00.FB03WMM2 = FB03W00.FB03WMM1;
    FB03W00.FB03WDD2 = FB03W00.FB03WDD1;
    FB03W00.FB03WYY2 = FB03W00.FB03WYY1;
    /* ---------------------- y2k out begin ------------------*/
    /* FB03W00.FB7RTADT = 19000000 + FB03W00.FB03WDT2;/* YYMMDD*/
    /* ---------------------- y2k out end   ------------------*/
     /* FB03W00.FB7RTADT = 19000000 + FB03M010.FB03MRDT(FB03WMIX);*/
    /* ---------------------- y2k in begin  ------------------*/
    if (FB03W00.FB03WDT1 == 0)
      FB03W00.FB7RTADT = 0;
    else
      if (FB03W00.FB03WYY2 > 60) /* Century windowing*/
        FB03W00.FB7RTADT = 19000000 + FB03W00.FB03WDT2; /* YYMMDD*/
      else
        FB03W00.FB7RTADT = 20000000 + FB03W00.FB03WDT2; /* YYMMDD*/
      end
    end
    /* ---------------------- y2k in end    ------------------*/
    ;
    if (FB03M010.FB03MSCD[FB03WMIX] != " " /* code entered*/
     && FB03M010.FB03MSCD[FB03WMIX] != "S") /* code not s*/
      set FB03M010.FB03MSCD[FB03WMIX] cursor, bold; /* highlight*/
      FB03M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(41); /* invalid select code*/
    end
    if (FB03M010.FB03MSCD[FB03WMIX] == "S") /* select code entered*/
      ;
      if (FB03W03.SY1STNBR != " ") /* select code all ready ent*/
        set FB03M010.FB03MSCD[FB03WMIX] cursor, bold; /* highlight*/
        FB03M010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(136); /* only one select*/
      else /* save selected line*/
        FB03W03.SY1STNBR = FB03M010.SY1STNBR[FB03WMIX];
        FB03W03.SY2CLRID = FB03M010.SY2CLRID[FB03WMIX];
        FB03W03.XDMCD = FB03M010.XDMCD[FB03WMIX];
        FB03W03.FB7RTADT = FB03W00.FB7RTADT;
        FB03W03.PC2CUXID = FB03M010.PC2CUXID[FB03WMIX];
        FB03W03.OP1PARTN = FB03M010.OP1PARTN[FB03WMIX];
        FB03W03.OP1CUOID = FB03M010.OP1CUOID[FB03WMIX];
        FB03W03.OP1NORID = FB03M010.OP1NORID[FB03WMIX];
        FB03W03.FB03MQTB = FB03M010.FB03MQTB[FB03WMIX];
        FB03W03.FY1FCTYC = FB03M010.FY1FCTYC[FB03WMIX];
        FB03W03.XWHCD = FB03W02.XWHCD[FB03WMIX];
      end
      ;
      if (FB03M010.FB03MQTB[FB03WMIX] < FB9REC.FB9BTQTY)
        set FB03M010.FB03MQTB[FB03WMIX] protect, bold; /* highlight*/
        set FB03M010.FB03MSCD[FB03WMIX] cursor, bold; /* highlight*/
        FB03M010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(342); /* not splitable*/
      end
      ;
      if (FB03W00.FB7RTADT != FB03W02.FB7RTADT[FB03WMIX])
        ;
        /* ----------------- y2k out begin ----------------*/
        /* IF FB03W00.FB7RTADT EQ 19000000*/
        /* ----------------- y2k out end   ----------------*/
        /* ----------------- y2k in begin  ----------------*/
        if (FB03W00.FB7RTADT == 0
         && FB03W02.FB7RTADT[FB03WMIX] == 0)
        /* ----------------- y2k in end    ----------------*/
           /* next sentence*/
        else
          set FB03M010.FB03MRDT[FB03WMIX] cursor, bold; /* highlight*/
          FB03M010.XXXMODID = "500"; /* process number*/
          converseLib.validationFailed(321); /* cant s and chg rta*/
        end
        ;
      end
      ;
    end
    ;
    if (FB03W00.FB7RTADT != FB03W02.FB7RTADT[FB03WMIX])
      ;
      /* ----------------- y2k out begin ----------------*/
      /* IF FB03W00.FB7RTADT EQ 19000000*/
      /* ----------------- y2k out end   ----------------*/
      /* ----------------- y2k in begin  ----------------*/
      if (FB03W00.FB7RTADT == 0
       && FB03W02.FB7RTADT[FB03WMIX] == 0)
      /* ----------------- y2k in end    ----------------*/
         /* next sentence*/
      else
        FB03W00.FB03WDCS = "Y"; /* data changed*/
          /* pmainw 11/10/95*/
        FB03W00.FB03WIX1 = 8; /* init index for duplicate check*/
        while (FB03W00.FB03WIX1 > 0) /* for each line on screen*/
          if (FB03W00.FB03WIX1 != FB03W00.FB03WMIX) /* not on current line*/
            if (FB03M010.FY1FCTYC[FB03WIX1] == 
            FB03M010.FY1FCTYC[FB03WMIX]
             && FB03M010.PC2CUXID[FB03WIX1] == 
            FB03M010.PC2CUXID[FB03WMIX]
             && FB03M010.OP1PARTN[FB03WIX1] == 
            FB03M010.OP1PARTN[FB03WMIX]
             && FB03M010.OP1CUOID[FB03WIX1] == 
            FB03M010.OP1CUOID[FB03WMIX]
             && FB03M010.OP1NORID[FB03WIX1] == 
            FB03M010.OP1NORID[FB03WMIX]
             && FB03M010.FB03MRDT[FB03WIX1] == 
            FB03M010.FB03MRDT[FB03WMIX]
             && FB03M010.SY1STNBR[FB03WIX1] == 
            FB03M010.SY1STNBR[FB03WMIX]
             && FB03M010.SY2CLRID[FB03WIX1] == 
            FB03M010.SY2CLRID[FB03WMIX]
             && FB03M010.XDMCD[FB03WIX1] == 
            FB03M010.XDMCD[FB03WMIX])
              FB03M010.XXXMODID = "510";
              set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
              converseLib.validationFailed(323); /* duplicate rta dates*/
              exit stack;
            end
          end
          FB03W00.FB03WIX1 = FB03W00.FB03WIX1 - 1; /* decrement index*/
        end
          /* pmainw 11/10/95 - end*/
        FB03510(); /* edit rta date*/
        ;
        if (converseVar.validationMsgNum == 0 /* no rta date errors*/
        )                                    
          set PC2REC empty;
          PC2REC.XGPCD = "02";
          PC2REC.PC2CUXID = FB03M010.PC2CUXID[FB03WMIX];
          ;
          FB03S-10-IO3340-S(); /* Select DPRODC.VPRDCU01*/
          ;
          if (PC2REC.PC-PRDCU-APAO-FL == "E") /* Euro xref*/
            ;
            if (FB03W01.FB03MACF-EUR == "Y")
              converseLib.validationFailed(322); /* cant update*/
              set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
              FB03M010.XXXMODID = "500"; /* process number*/
              /* SET FB03M010.FB03MACF-EUR CURSOR,BRIGHT;/* highlight*/
            end
          else
            ;
            if (FB03W01.FB03MACF == "Y")
              set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
              /* SET FB03M010.FB03MACF CURSOR,BRIGHT;/* highlight*/
              converseLib.validationFailed(322); /* cant update*/
              FB03M010.XXXMODID = "500"; /* process number*/
            end
          end
        end
      end
      ;
    end
    ;
    FB03W00.FB03WMIX = FB03W00.FB03WMIX - 1;
  end
  ;
  if (FB03W03.SY1STNBR == " " /* no selection*/
   && converseVar.eventKey is pf14) /* transfer to fb04*/
    converseLib.validationFailed(154); /* mistrake - no selection*/
    FB03M010.XXXMODID = "500"; /* process number*/
  end
  ;
  if (FB03W00.FB03WKCS == "Y") /* key changed*/
    ;
    if (FB03W03.SY1STNBR != " " /* a select entered*/
     || FB03W00.FB03WDCS == "Y") /* rta date changed*/
      FB03M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(130); /* cant change key and data*/
    end
    ;
    if (FB03M010.XCTCD == " ") /* country code not entered*/
      FB03M010.XXXMODID = "500"; /* process number*/
      set FB03M010.XCTCD cursor, bold; /* highlight*/
      converseLib.validationFailed(8); /* required field*/
    else /* country code entered*/
      ;
      if (FB03M010.XCTCD in XCTTBL.XCTCD /* in country code table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else /* not in country code table*/
        FB03M010.XXXMODID = "500"; /* process number*/
        converseLib.validationFailed(256); /* invalid country code*/
        set FB03M010.XCTCD cursor, bold; /* highlight*/
      end
      ;
    end
    ;
    if (FB03M010.CAUSERID == " ") /* user code not entered*/
      FB03M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(8); /* required field*/
      set FB03M010.CAUSERID cursor, bold; /* highlight*/
    end
    ;
  end
  ;
  if (FB03W03.SY1STNBR != " " /* a select entered*/
   && FB03W00.FB03WKCS != "Y" /* key not changed*/
   && converseVar.eventKey is enter) /* enter, not xfer*/
    FB03M010.XXXMODID = "500"; /* process number*/
    converseLib.validationFailed(337); /* must pf 14 with select*/
  end
  ;
  if (FB03M010.FB03MACF != FB03W01.FB03MACF
   || FB03M010.FB03MACF-EUR != FB03W01.FB03MACF-EUR)
    FB03520(); /* edit all cntries fl*/
  end
  ;
  if (converseVar.eventKey is pf14      /* transfer to fb04*/
   && converseVar.validationMsgNum == 0 /* no other errors*/
   && FB03W03.PC2CUXID != " ")          /* And line selected*/
    ;
    set PC2REC empty;
    PC2REC.XGPCD = "02";
    PC2REC.PC2CUXID = FB03W03.PC2CUXID;
    ;
    FB03S-10-IO3340-S(); /* Select DPRODC.VPRDCU01*/
    ;
    if (PC2REC.PC-PRDCU-APAO-FL == "E"
     && FB03M010.FB03MACF-EUR == "Y")
      ;
      set FB03M010.FB03MACF-EUR cursor, bold;
      converseLib.validationFailed(331); /* Can't xfer - all ctry fl*/
      FB03M010.XXXMODID = "500"; /* process number*/
    end
    ;
    if (PC2REC.PC-PRDCU-APAO-FL != "E"
     && FB03M010.FB03MACF == "Y")
      ;
      set FB03M010.FB03MACF cursor, bold;
      converseLib.validationFailed(331); /* Can't xfer - all ctry fl*/
      FB03M010.XXXMODID = "500"; /* process number*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0) /* an err has been defective*/
    exit stack; /* display map*/
  end
end // end FB03500

// edit rta date
Function FB03510()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FB7REC empty; /* initialise record*/
  FB7REC.SY1STNBR = FB03M010.SY1STNBR[FB03WMIX];
  FB7REC.SY2CLRID = FB03M010.SY2CLRID[FB03WMIX];
  FB7REC.XDMCD = FB03M010.XDMCD[FB03WMIX];
  FB7REC.FY1FCTYC = FB03M010.FY1FCTYC[FB03WMIX];
  FB7REC.PC2CUXID = FB03M010.PC2CUXID[FB03WMIX];
  FB7REC.OP1CUOID = FB03M010.OP1CUOID[FB03WMIX];
  FB7REC.OP1NORID = FB03M010.OP1NORID[FB03WMIX];
  FB7REC.OP1PARTN = FB03M010.OP1PARTN[FB03WMIX];
  FB03W00.FB03WDT1 = FB03M010.FB03MRDT[FB03WMIX]; /* mmddyy*/
  FB03W00.FB03WMM2 = FB03W00.FB03WMM1;
  FB03W00.FB03WDD2 = FB03W00.FB03WDD1;
  FB03W00.FB03WYY2 = FB03W00.FB03WYY1;
   /* --------------------- y2k out begin -------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB03W00.FB03WDT2;/* yymmdd*/
   /* --------------------- y2k out end   -------------------*/
   /* --------------------- y2k in begin  -------------------*/
  ;
  if (FB03W00.FB03WYY2 > 60) /* Century windowing*/
    FB7REC.FB7RTADT = 19000000 + FB03W00.FB03WDT2; /* yymmdd*/
  else
    FB7REC.FB7RTADT = 20000000 + FB03W00.FB03WDT2; /* yymmdd*/
  end
   /* --------------------- y2k in end    -------------------*/
  ;
   /* Validate the rta*/
  set TA2REC empty;
  TA2REC.TA2GRGGN = FB7REC.FB7RTADT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (TA2RTNCD != "0000"
   || FB03W00.FB03WMM1 < 1
   || FB03W00.FB03WMM1 > 12
   || FB03W00.FB03WDD1 < 1
   || FB03W00.FB03WDD1 > 31)
    set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
    FB03M010.XXXMODID = "510";
    converseLib.validationFailed(151);
    exit stack;
  end
  ;
  if (FB7REC.FB7RTADT < FB03W00.FB03WFRD
   || FB7REC.FB7RTADT > FB03W00.FB03WLRD)
    set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
    FB03M010.XXXMODID = "510";
    converseLib.validationFailed(343);
    exit stack;
  end
  ;
  FB03W00.FB03MBMO = FB03M010.FB03MBMO;
  FB03W00.FB03WBDD = 01;
   /* --------------------- y2k out begin -------------------*/
   /* MOVE 19 TO FB03W00.FB03WBCC;*/
   /* --------------------- y2k out begin -------------------*/
   /* --------------------- y2k in begin  -------------------*/
  if (FB03W00.FB03WBYY > 60) /* Century windowing*/
    FB03W00.FB03WBCC = 19;
  else
    FB03W00.FB03WBCC = 20;
  end
   /* --------------------- y2k in end    -------------------*/
  FB7REC.FB8BUYDT = FB03W00.FB03WBDT;
  FB7REC.XWHCD = FB03W02.XWHCD[FB03WMIX];
  ;
   /* ------------------------------------------------------------*/
   /* select row in dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      FB03M010.XXXMODID = "510";
      set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
      converseLib.validationFailed(323); /* duplicate rta dates*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03510"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE           ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "510";
  exit stack;
  ;
end // end FB03510

// edit all countries flag
Function FB03520()
   /* --------------------------------------------------------------*/
   /* Edit the Euro all countries flag*/
   /* --------------------------------------------------------------*/
  ;
  if (FB03M010.FB03MACF-EUR != FB03W01.FB03MACF-EUR) /* Eur changed*/
    ;
    if (COMMAREA.CACHGFL != "Y")
      set FB03M010.FB03MACF-EUR cursor, bold;
      converseLib.validationFailed(328); /* not authorized to change*/
      FB03M010.XXXMODID = "520";
    end
    ;
    if (FB03M010.FB03MACF-EUR == "Y"
     || FB03M010.FB03MACF-EUR == "N")
      ;
      /* Next sentence*/
    else
      set FB03M010.FB03MACF-EUR cursor, bold; /* highlight*/
      converseLib.validationFailed(153); /* only Y or N valid*/
      FB03M010.XXXMODID = "520";
    end
    ;
    if (FB03M010.FB03MACF-EUR == "Y")
      set FBMREC empty;
      FBMREC.PG1SC4CD = "98";
      ;
      FB03S-11-IO4670-S(); /* Select DFBUY.VFSCTL01*/
      ;
      if (FBMREC.FBMFINFL == "Y" /* DIRSHP FINISH FL*/
       && FBMREC.FBMCFFL == "Y"  /* CALC FINISH FL*/
       && FBMREC.FBMFLRFL == "Y") /* FCTYLD RUN FL*/
        /* Next sentence*/
      else
        set FB03M010.FB03MACF-EUR cursor, bold;
        converseLib.validationFailed(506); /* Must set other flags = 'y'*/
        FB03M010.XXXMODID = "520";
      end
    else
      ;
      set FBZREC empty;
      set FBMREC empty;
      FBMREC.FBMALAFL = "N"; /* autoload flag*/
      FBZREC.FBZFUNC = "SC"; /* call function*/
      ;
      FB03S-12-IO4670-SC(); /* Select DFBUY.VFSCTL01*/
      ;
      if (FBZREC.FBZSUM1 == 0) /* all autoload flags are Y*/
        converseLib.validationFailed(186); /* cant change, ready for autoload*/
        FB03M010.XXXMODID = "520";
        set FB03M010.FB03MACF-EUR cursor, bold;
      end
    end
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Edit the NIL all countries flag*/
   /* --------------------------------------------------------------*/
  ;
  if (FB03M010.FB03MACF != FB03W01.FB03MACF) /* NIL all ctry fl changed*/
    ;
    if (COMMAREA.CACHGFL != "Y")
      set FB03M010.FB03MACF cursor, bold;
      converseLib.validationFailed(328); /* not authorized to change*/
      FB03M010.XXXMODID = "520";
    end
    ;
    if (FB03M010.FB03MACF == "Y"
     || FB03M010.FB03MACF == "N")
      ;
      /* Next sentence*/
    else
      set FB03M010.FB03MACF cursor, bold; /* highlight*/
      converseLib.validationFailed(153); /* only Y or N valid*/
      FB03M010.XXXMODID = "520";
    end
    ;
    if (FB03M010.FB03MACF == "Y")
      set FBMREC empty;
      FBMREC.PG1SC4CD = "99";
      ;
      FB03S-11-IO4670-S(); /* Select DFBUY.VFSCTL01*/
      ;
      if (FBMREC.FBMFINFL == "Y" /* DIRSHP FINISH FL*/
       && FBMREC.FBMCFFL == "Y"  /* CALC FINISH FL*/
       && FBMREC.FBMFLRFL == "Y") /* FCTYLD RUN FL*/
        /* Next sentence*/
      else
        set FB03M010.FB03MACF cursor, bold;
        converseLib.validationFailed(506); /* Must set other flags = 'y'*/
        FB03M010.XXXMODID = "520";
      end
    else
      ;
      set FBZREC empty;
      set FBMREC empty;
      FBMREC.FBMALAFL = "N"; /* autoload flag*/
      FBZREC.FBZFUNC = "SC"; /* call function*/
      ;
      FB03S-12-IO4670-SC(); /* Select DFBUY.VFSCTL01*/
      ;
      if (FBZREC.FBZSUM1 == 0) /* all autoload flags are Y*/
        set FB03M010.FB03MACF cursor, bold;
        converseLib.validationFailed(186); /* cant change, ready for autoload*/
        FB03M010.XXXMODID = "520";
      end
    end
  end
  ;
  ;
end // end FB03520

// process valid request
Function FB03600()
  if (converseVar.eventKey is pf7) /* scroll up*/
    FB03W00.XXXTSPAG = FB03W00.XXXTSPAG - 1; /* previous page*/
    FB03W00.FB03WMCS = "Y"; /* format map*/
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll down*/
    FB03W00.XXXTSPAG = FB03W00.XXXTSPAG + 1; /* next page*/
    FB03W00.FB03WMCS = "Y"; /* format map*/
    return;
  end
  ;
  if (converseVar.eventKey is pf14) /* size qty moves*/
    FB03610(); /* transfer to size qty moves*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* the program only gets here when enter is hit*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03W00.FB03WKCS == "Y") /* key changed*/
    FB03W00.FB03WRDS = "Y"; /* request data*/
    set FB03W01 empty;
    set FB03W02 empty;
    set FB03W03 empty;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* this is now the update pass*/
   /* ------------------------------------------------------------*/
  ;
  if (FB03M010.FB03MACF != FB03W01.FB03MACF) /* all countries fl chged*/
    ;
    FBMREC.FBMGROUP = FB03W00.FB03W-FBMGROUP;
    FBMREC.FBMALAFL = FB03M010.FB03MACF;
    FB03620(); /* update vfsctl01*/
    FB03W00.FB03WRDS = "Y"; /* request data*/
  end
  ;
  ;
  if (FB03M010.FB03MACF-EUR != FB03W01.FB03MACF-EUR) /* EUR flag chg*/
    ;
    FBMREC.FBMGROUP = FB03W00.FB03W-FBMGROUP-EUR;
    FBMREC.FBMALAFL = FB03M010.FB03MACF-EUR;
    FB03620(); /* update vfsctl01*/
    FB03W00.FB03WRDS = "Y"; /* request data*/
  end
  ;
  ;
  FB03W00.FB03WMIX = 1; /* first screen line*/
  ;
  while (FB03W00.FB03WMIX <= FB03W00.FB03WMSL /* for each valid*/
   && FB03M010.SY1STNBR[FB03WMIX] != " ") /* data line*/
    FB03W00.FB03WDT1 = FB03M010.FB03MRDT[FB03WMIX]; /* mmddyy*/
    FB03W00.FB03WMM2 = FB03W00.FB03WMM1;
    FB03W00.FB03WDD2 = FB03W00.FB03WDD1;
    FB03W00.FB03WYY2 = FB03W00.FB03WYY1;
    /* -------------------- y2k out begin --------------------*/
    /* FB03W00.FB7RTADT = 19000000 + FB03W00.FB03WDT2; /* yymmdd*/
    /* -------------------- y2k out end   --------------------*/
     /* FB03W00.FB7RTADT = 19000000 + FB03MRDT(FB03WMIX);*/
    /* -------------------- y2k in begin  --------------------*/
    if (FB03W00.FB03WYY2 > 60) /* Century windowing*/
      FB03W00.FB7RTADT = 19000000 + FB03W00.FB03WDT2; /* yymmdd*/
    else
      FB03W00.FB7RTADT = 20000000 + FB03W00.FB03WDT2; /* yymmdd*/
    end
    /* -------------------- y2k in end    --------------------*/
    ;
    if (FB03W00.FB7RTADT != FB03W02.FB7RTADT[FB03WMIX])
      FB03630(); /* update rta date*/
    end
    ;
    FB03W00.FB03WMIX = FB03W00.FB03WMIX + 1; /* next line*/
  end
  ;
  FB03W00.FB03WSTP = FB03W00.XXXTSPAG; /* save current ts page*/
  FB03W00.FB03WRDS = "Y"; /* request data*/
  FBWREC.XXXMSGNO = 32; /* info msg update ok*/
end // end FB03600

// transfer to size qty moves
Function FB03610()
  FBXREC.CAUSERID = FB03M010.CAUSERID; /* user id*/
  FBXREC.FB8BUYDT = FB03W00.FB03WBDT; /* buy date*/
  FBXREC.SY1STNBR[1] = FB03W03.SY1STNBR; /* style number*/
  FBXREC.SY2CLRID[1] = FB03W03.SY2CLRID; /* color code*/
  FBXREC.XDMCD[1] = FB03W03.XDMCD; /* dimension code*/
  FBXREC.XCTCD = FB03M010.XCTCD; /* country code*/
  FBXREC.PC2CUXID = FB03W03.PC2CUXID; /* cust xref*/
  FBXREC.OP1PARTN = FB03W03.OP1PARTN; /* OP-ORD-PART-CHAR*/
  FBXREC.OP1CUOID = FB03W03.OP1CUOID; /* OP-CUST-ORD-ID*/
  FBXREC.OP1NORID = FB03W03.OP1NORID; /* OP-NIKE-ORD-ID*/
  FBXREC.FBXFCTY1 = FB03W03.FY1FCTYC; /* factory*/
  FBXREC.FBXFRMDT = FB03W03.FB7RTADT; /* from rta date*/
  FBXREC.FBXTODT = FB03W04.FB7RTADT; /* to rta date*/
  FBXREC.XWHCD1[1] = FB03W03.XWHCD;
  ;
  set FBWREC empty;
  FBWREC.FBWFILL = FBXREC.FBXGROUP;
  COMMAREA.CATOAP = "FB04";
  FB03S01(); /* purge temp storage*/
  XSFBS01(); /* Exit to another application*/
  FB03M010.XXXMODID = "610"; /* Process name*/
  set FB03M010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
end // end FB03610

// update all countries fl
Function FB03620()
  XX0XS01(); /* get date and time*/
  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FBZREC.FBZFUNC = "U "; /* update function*/
  ;
  try
    call "IO4670" (FBZREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return, msg updated since last. If found,*/
   /* process.  If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB03M010.XXXMODID = "620"; /* process number*/
      converseLib.validationFailed(20); /* updated since displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* display map*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03620"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE ROW              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "620";
  exit stack;
  ;
  ;
  ;
end // end FB03620

// update rta date
Function FB03630()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set FB7REC empty; /* initialise record*/
  FB7REC.SY1STNBR = FB03M010.SY1STNBR[FB03WMIX];
  FB7REC.SY2CLRID = FB03M010.SY2CLRID[FB03WMIX];
  FB7REC.XDMCD = FB03M010.XDMCD[FB03WMIX];
  FB7REC.FY1FCTYC = FB03M010.FY1FCTYC[FB03WMIX];
  FB7REC.PC2CUXID = FB03M010.PC2CUXID[FB03WMIX];
  FB7REC.OP1CUOID = FB03M010.OP1CUOID[FB03WMIX];
  FB7REC.OP1NORID = FB03M010.OP1NORID[FB03WMIX];
  FB7REC.OP1PARTN = FB03M010.OP1PARTN[FB03WMIX];
  FB7REC.FB7RTADT = FB03W02.FB7RTADT[FB03WMIX];
  FB7REC.XWHCD = FB03W02.XWHCD[FB03WMIX];
  FB03W00.FB03MBMO = FB03M010.FB03MBMO;
  FB03W00.FB03WBDD = 01;
   /* -------------------------- y2k out begin ----------------------*/
   /* MOVE 19 TO FB03W00.FB03WBCC;*/
   /* -------------------------- y2k out end   ----------------------*/
   /* -------------------------- y2k in begin  ----------------------*/
  if (FB03W00.FB03WBYY > 60) /* Century windowing*/
    FB03W00.FB03WBCC = 19;
  else
    FB03W00.FB03WBCC = 20;
  end
   /* -------------------------- y2k in end    ----------------------*/
  FB7REC.FB8BUYDT = FB03W00.FB03WBDT;
  ;
   /* ------------------------------------------------------------*/
   /* select row in dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB03M010.XXXMODID = "630";
      converseLib.validationFailed(21); /* deleted since last displayed*/
      set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack;
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    ;
    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FB03630"; /* Process name*/
    TA1REC.TA1LOC = "SELECT ROW              ";
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB03M010.XXXMODID = "630";
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* delete row in dfbuy.vmfbuy01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("D2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB03M010.XXXMODID = "630";
      converseLib.validationFailed(21); /* deleted since last displayed*/
      set FB03M010.FB03MRDT[FB03WMIX] cursor, bold;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack;
    end
    ;
  end
  ;
  if (sysVar.errorCode != "00000000"
   || SQLCA.VAGen_SQLCODE != 0)
    ;
    if (sysVar.errorCode == "00000000" /* Successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
      
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "FB03630"; /* Process name*/
    TA1REC.TA1LOC = "DELETE ROW              ";
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    FB03M010.XXXMODID = "630";
    exit stack;
  end
  ;
  XX0XS01(); /* get date and time*/
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FB03W00.FB03WDT1 = FB03M010.FB03MRDT[FB03WMIX]; /* mmddyy*/
  FB03W00.FB03WMM2 = FB03W00.FB03WMM1;
  FB03W00.FB03WDD2 = FB03W00.FB03WDD1;
  FB03W00.FB03WYY2 = FB03W00.FB03WYY1;
   /* ------------------- y2k out begin -------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB03W00.FB03WDT2;/* yymmdd*/
   /* ------------------- y2k out end   -------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB03M010.FB03MRDT(FB03WMIX);*/
   /* ------------------- y2k in begin  -------------------*/
  if (FB03W00.FB03WYY2 > 60) /* Century windowing*/
    FB7REC.FB7RTADT = 19000000 + FB03W00.FB03WDT2; /* yymmdd*/
  else
    FB7REC.FB7RTADT = 20000000 + FB03W00.FB03WDT2; /* yymmdd*/
  end
   /* ------------------- y2k in end    -------------------*/
  ;
  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* add    row*/
  ;
   /* ------------------------------------------------------------*/
   /* If database in use, msg try again.  If any other, indicate*/
   /* system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03630"; /* Process name*/
  TA1REC.TA1LOC = "ADD ROW                 ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "630";
  exit stack;
  ;
  ;
  ;
end // end FB03630

// SELECT 'S' DPRDOC.VPRDCU01
Function FB03S-10-IO3340-S()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03S10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT S DPRODC.VPRDCU01";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "S10"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FB03S-10-IO3340-S

// SELECT 'S' DFBUY.VFSCTL01
Function FB03S-11-IO4670-S()
  ;
   /* ------------------------------------------------------------*/
   /* This module selects a table row from DFBUY.VFSCTL01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03S11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT S DFBUY.VFSCTL01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.FBMGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "S11"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FB03S-11-IO4670-S

// SELECT 'SC' DFBUY.VFSCTL01
Function FB03S-12-IO4670-SC()
  ;
   /* ------------------------------------------------------------*/
   /* This module performs a select count on DFBUY.VFSCTL01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4670" (FBZREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/
      return; /* Return to previous process*/
    end
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB03S12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SC DFBUY.VFSCTL01";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBMREC.FBMGROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB03M010.XXXMODID = "S12"; /* Process name*/
  ;
  exit stack;
  ;
  ;
end // end FB03S-12-IO4670-SC

// purge temp storage
Function FB03S01()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FB03W02 empty; /* m010 display storage*/
  ;
   /* MOVE 'N' TO FB03W00.FB03WSWU   ; Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FB03W00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FB03W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FB03M010.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03S01

// reset screen
Function FB03S02()
  FB03W00.CAUSERID = FB03M010.CAUSERID;
  FB03W00.XCTCD = FB03M010.XCTCD;
  FB03W00.FB03MBMO = FB03M010.FB03MBMO;
  set FB03M010 initial;
  FB03M010.CAUSERID = FB03W00.CAUSERID;
  FB03M010.XCTCD = FB03W00.XCTCD;
  FB03M010.FB03MBMO = FB03W00.FB03MBMO;
end // end FB03S02

// get product descriptions
Function FB03S03()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = "02"; /* gpc*/
  PG2REC.SY1STNBR = FB7REC.SY1STNBR; /* style number*/
  PG2REC.SY2CLRID = FB7REC.SY2CLRID; /* color id*/
  PG2REC.XDMCD = FB7REC.XDMCD; /* dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select requested row from table*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* If not found, move all * to the fields then return to the*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        PG2REC.SY1SSTNM = "********"; /* color description*/
        PG2REC.SY2CLRAB = "********"; /* style name*/
        SQLCA.VAGen_SQLCODE = 0; /* reset return code*/
        return;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB03M010.XXXMODID = "S03"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT STYLE/COLOR TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB03S03

// add page to temp storage
Function FB03S04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB03W02.XXXTSLEN = FB03W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FB03W00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
  end
  ;
  try
    call "TA0050" (FB03W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FB03W02 empty; /* map display storage*/
    FB03W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB03W00.FB03WIXM = 0; /* Display line number*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  FB03M010.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03S04

// obtain temp storage page
Function FB03S05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FB03W02.XXXTSLEN = FB03W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB03W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FB03W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  FB03M010.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB03M010.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB03S05

Record FB03W00 type basicRecord
  10 FB03WRDS FB03WRDS ; 
  10 FB03WMCS FB03WMCS ; 
  10 FB03WKCS FB03WKCS ; 
  10 FB03WDCS FB03WDCS ; 
  10 FB03WFFS FB03WFFS ; 
  10 FB03WSAS FB03WSAS ; 
  10 FB03WMSL FB03WMSL ; 
  10 FB03WIXM FB03WIXM ; 
  10 FB03WGIX FB03WGIX ; 
  10 FB03WMIX FB03WMIX ; 
  10 FB03WIX1 FB03WIX1 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FB03WSTP FB03WSTP ; 
  10 FB7RTADT FB7RTADT ; 
  10 FB03WFRD FB03WFRD ; 
  10 FB03WLRD FB03WLRD ; 
  10 FB03WBDT FB03WBDT ; 
    15 FB03WBCC FB03WBCC ; 
    15 FB03MBMO FB03MBMO ; 
      20 FB03WBYY FB03WBYY ; 
      20 FB03WBMM FB03WBMM ; 
    15 FB03WBDD FB03WBDD ; 
  10 FB03WDT1 FB03WDT1 ; 
    15 FB03WMM1 FB03WMM1 ; 
    15 FB03WDD1 FB03WDD1 ; 
    15 FB03WYY1 FB03WYY1 ; 
  10 FB03WDT2 FB03WDT2 ; 
    15 FB03WYY2 FB03WYY2 ; 
    15 FB03WMM2 FB03WMM2 ; 
    15 FB03WDD2 FB03WDD2 ; 
  10 XCTCD XCTCD ; 
  10 CAUSERID CAUSERID ; 
  10 FB03WWK FB03WWK ; 
  10 FB03W-FBMGROUP FB03W-FBMGROUP ; 
  10 FB03W-FBMGROUP-EUR FB03W-FBMGROUP-EUR ; 
  10 FTWR-EQMT-FL FTWR-EQMT-FL ; 
end // end FB03W00

//*** RECORD=FB03W01 ****
// fb03 display working storage for map heading info
// ***********************
Record FB03W01 type basicRecord
  10 CAUSERID CAUSERID ; 
  10 FB03MBMO FB03MBMO ; 
  10 XCTCD XCTCD ; 
  10 FB03MACF FB03MACF ; 
  10 FB03MACF-EUR FB03MACF-EUR ; 
end // end FB03W01

//*** RECORD=FB03W02 ****
// display working storage for temp storage in fb03
// ***********************
Record FB03W02 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(520) ; 
    5 FB03WGRP FB03WGRP [8] ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 SY1SSTNM SY1SSTNM ; 
      10 SY2CLRAB SY2CLRAB ; 
      10 FB7RTADT FB7RTADT ; 
      10 PC2CUXID PC2CUXID ; 
      10 OP1CUOID OP1CUOID ; 
      10 OP1NORID OP1NORID ; 
      10 OP1PARTN OP1PARTN ; 
      10 FB03MQTB FB03MQTB ; 
      10 FY1FCTYC FY1FCTYC ; 
      10 XWHCD XWHCD ; 
end // end FB03W02

//*** RECORD=FB03W03 ****
// fb03 working storage record for holding the 'from' scrn row
// ***********************
Record FB03W03 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FB7RTADT FB7RTADT ; 
  10 PC2CUXID PC2CUXID ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 OP1PARTN OP1PARTN ; 
  10 FB03MQTB FB03MQTB ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 XWHCD XWHCD ; 
end // end FB03W03

//*** RECORD=FB03W04 ****
// fb03 working storage record for holding the 'to' screen row
// ***********************
Record FB03W04 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FB7RTADT FB7RTADT ; 
  10 PC2CUXID PC2CUXID ; 
  10 FB03MQTB FB03MQTB ; 
  10 FY1FCTYC FY1FCTYC ; 
end // end FB03W04

// all countries flag
DataItem FB03MACF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// European all countries flag
DataItem FB03MACF-EUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb03 buy date yy mm
DataItem FB03MBMO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nil quantity bought
DataItem FB03MQTB num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ftwr buy sched control group
DataItem FB03W-FBMGROUP char(98)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ftwr buy euro control group
DataItem FB03W-FBMGROUP-EUR char(98)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy date century
DataItem FB03WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date day
DataItem FB03WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date ccyymmdd format
DataItem FB03WBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB03WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB03WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem FB03WDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work day 1
DataItem FB03WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day 2
DataItem FB03WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mmddyy
DataItem FB03WDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yymmdd
DataItem FB03WDT2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first fetch switch
DataItem FB03WFFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first possible rta date
DataItem FB03WFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size bucket index
DataItem FB03WGIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB03WGRP char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FB03WIX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tsq map index
DataItem FB03WIXM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FB03WKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last possible rta date
DataItem FB03WLRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format map switch
DataItem FB03WMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map line index
DataItem FB03WMIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month 1
DataItem FB03WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month 2
DataItem FB03WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum screen lines
DataItem FB03WMSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request data switch
DataItem FB03WRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scroll allowed switch
DataItem FB03WSAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current ts page
DataItem FB03WSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// misc work area
DataItem FB03WWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year1
DataItem FB03WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year 2
DataItem FB03WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

