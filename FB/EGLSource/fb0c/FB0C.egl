package fb0c;

import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom3.XPFB001;
import corpcom4.XSFBS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx2.XPCSDESC;
import corpx2.XXXUSRID;
import corpy2.YSMXOT;
import fb.common.FB0CWSEL;
import fb.common.FB1CMNT;
import fb.common.FB1CRVST;
import fb.common.FB1DUMNB;
import fb.common.FB1INSEQ;
import fb.common.FB1REC;
import fb.common.FB3REC;
import fb.common.FB4CRVNB;
import fb.common.FB4REC;
import fb.common.FB4STDFL;
import fb.common.FB5REC;
import fb.common.FB6REC;
import fb.common.FBWREC;
import pg.common.PG2REC;
import sy.common.SY1STNBR;
import sy.common.SY1STYNM;
import sy.common.SY2CLRDS;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0C ****
// This application displays a list of curves ordered by date
// last maintained.
// 
// Displays a blank screen with the data fields protected and
// ready for key inputs.  If a product is entered, or product
// key data is passed in the commarea up to ten product
// curves will be listed.  iI nothing is entered and the user
// hits enter, a list of up to ten unassigned curves for that
// user will be displayed.
// 
// A shift right pf key will display more data about the
// selected curves.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/29/88  wdishm  New application.
// e#fl251  05/21/91  jalle1  add pf14 key to go to fb0a.
// f#fl252  05/21/91  jalle1  if commarea.xgpcd is blank, move
//                            '02' to gpc code.
//          10/01/93  pmainw  fix commarea problem - cspv4.
// *********************
Program FB0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB0CW00 FB0CW00; // record
  FB0CW01 FB0CW01; // record
  FB0CW02 FB0CW02; // record
  FB1REC FB1REC; // record
  FB3REC FB3REC; // record
  FB4REC FB4REC; // record
  FB5REC FB5REC; // record
  FB6REC FB6REC; // record
  FBWREC FBWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FB0CM.FB0CM010,  // forms
      FB0CM.FB0CM020
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FB0CM010 initial; /* M010 input/output*/
    set FB0CM020 initial; /* M020 input/output*/
    set FB0CW00 empty; /* Working storage*/
    set FB0CW01 empty; /* M010 display storage*/
    set FB0CW02 empty; /* M020 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    if (COMMAREA.XGPCD == "  ") /* if gpc blank*/
      COMMAREA.XGPCD = "02";
    end
    ;
    FB0CW00.XGPCD = COMMAREA.XGPCD; /* gpc code to working storage*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* If the fbwrec contains product key data or unassigned user*/
     /* curve data set the obtain data switch as follows:*/
               /* '0'   no data requested*/
               /* '1'   product curve request*/
               /* '2'   unassigned user curve request*/
     /* ------------------------------------------------------------*/
    ;
    if (FBWREC.SY1STNBR > "  "
     || FBWREC.SY2CLRID > "  "
     || FBWREC.XDMCD > "  ")
      /* Product curve request*/
      FB0CW00.FB0CWSWR = "1"; /* product curves requested*/
      FB0CW01.SY1STNBR = FBWREC.SY1STNBR; /* style number to storage*/
      FB0CW02.SY1STNBR = FBWREC.SY1STNBR; /* style number to storage*/
      FB0CW01.SY2CLRID = FBWREC.SY2CLRID; /* color to storage*/
      FB0CW02.SY2CLRID = FBWREC.SY2CLRID; /* color to storage*/
      FB0CW01.XDMCD = FBWREC.XDMCD; /* dimension to storage*/
      FB0CW02.XDMCD = FBWREC.XDMCD; /* dimension to storage*/
      set FB0CM010.SY1STNBR cursor; /* set cursor to style*/
    else
      /* Unassigned user curve request*/
      if (FBWREC.FB1INSEQ > 0)
        FB0CW00.FB0CWSWR = "2"; /* Unassigned user curve data*/
      else
          /* Default style and color to zeros*/
        FB0CW00.FB0CWSWR = "0"; /* no data requested*/
      end
    end
    ;
    ;
    FB0CW00.FB0CWSWM = "1"; /* Map to be displayed switch*/
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display the maps.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0C001; /* Converse the main process*/
    ;
    ;
    FB0C001: FB0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FB0C001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FB0C

// size/pct maintenance selection
Function FB0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWSWM == "1") /* Map 1 was requested*/
    ;
    FB0C100(); /* Display map 1*/
    ;
  else
    if (FB0CW00.FB0CWSWM == "2") /* Map 1 was requested*/
      ;
      FB0C200(); /* Display map 2*/
      ;
    else
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FB0CW00.FB0CWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = "001"; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      COMMAREA.CATOAP = "FV0M"; /* TO application*/
      ;
      XSFBS01(); /* Exit to another application*/
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
      ;
      exit program; /* Severe error exit to CICS*/
      ;
    end
    ;
  end
  ;
  ;
end // end FB0C001

// map 1 processing
Function FB0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
   /* map 1 processing*/
   /* ------------------------------------------------------------*/
  ;
  FB0C110(); /* Obtain the data to display*/
  ;
  FB0C120(); /* Format and display map 1*/
  ;
  FB0C130(); /* Check attention identifier*/
  ;
  FB0C140(); /* Reset fields to normal intensity*/
  ;
  FB0C150(); /* Verify the entered data*/
  ;
  FB0C160(); /* Process valid input request*/
  ;
  ;
end // end FB0C100

// Obtain the data to display
Function FB0C110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWSWR == "0" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* Or an error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain either the product curve or unassigned user curve*/
   /* data depending upon the value of the obtain data flag.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWSWR == "1")
    ;
    FB0C111(); /* Obtain product curve data*/
    ;
  else
    ;
    FB0C112(); /* Obtain unassigned user curve data*/
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FB0CW00.FB0CWSWR = "0"; /* Set obtain data flag to no*/
  end
  ;
end // end FB0C110

// Product curve processing
Function FB0C111()
   /* ------------------------------------------------------------*/
   /* Obtain the style description and the colors description*/
   /* for the map heading.*/
   /* ------------------------------------------------------------*/
  ;
  FB0C113(); /* Obtain style and color desc*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain product curve data*/
   /* ------------------------------------------------------------*/
  ;
  FB0C114(); /* Obtain product curve data*/
  ;
end // end FB0C111

// unassigned user processing
Function FB0C112()
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vselhd01*/
   /* ------------------------------------------------------------*/
  ;
  FB0C122(); /* select vselhd01 rows*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the first vselhd01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWIXM = +1; /* Initialize map index*/
  ;
  FB0C123(); /* Fetch vselhd01 row*/
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display, return a message to the user*/
   /* otherwise get all the vselhd01 data*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWHCF == "Y") /* No vselhd01 data available*/
    FB0CM010.XXXMODID = "112"; /* module identifcation*/
    converseLib.validationFailed(18); /* 'no data to display'*/
    exit stack;
  end
  ;
  while (FB0CW00.FB0CWHCF != "Y") /* until end vselhd01 cursor*/
    ;
    FB0C124(); /* get all unassigned curve data*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vselhd01 cursor*/
   /* ------------------------------------------------------------*/
  ;
  FB0C125(); /* Close vselhd01 cursor*/
  ;
end // end FB0C112

// obtain style/color description
Function FB0C113()
   /* ------------------------------------------------------------*/
   /* Clear row storage areas, format the key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PG2REC empty; /* Clear row storage area*/
  ;
  PG2REC.XGPCD = FB0CW00.XGPCD; /* GPC*/
  PG2REC.SY1STNBR = FB0CW01.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = FB0CW01.SY2CLRID; /* Color*/
  PG2REC.XDMCD = FB0CW01.XDMCD; /* Dimension*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FB0CW01.SY1STYNM = PG2REC.SY1STYNM; /* Style description*/
      FB0CW02.SY1STYNM = PG2REC.SY1STYNM; /* Style description*/
      FB0CW01.SY2CLRDS = PG2REC.SY2CLRAB; /* Color description*/
      FB0CW02.SY2CLRDS = PG2REC.SY2CLRAB; /* Color description*/
      ;
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
        /* ------------------------------------------------------------*/
         /* Indicate that no data was found to display.*/
        /* ------------------------------------------------------------*/
        FB0CM010.XXXMODID = "11A"; /* Module identification*/
        set FB0CM010.SY1STNBR bold; /* Highlight*/
        set FB0CM010.SY2CLRID bold; /* Highlight*/
        set FB0CM010.XDMCD bold; /* Highlight*/
        converseLib.validationFailed(22); /* 'No data to display'*/
        exit stack;
        ;
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB0CM010.XXXMODID = "11A"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FB0C113

// obtain product curve data
Function FB0C114()
   /* ------------------------------------------------------------*/
   /* Clear row storage area*/
   /* ------------------------------------------------------------*/
  ;
  set FB4REC empty; /* clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the product curve key*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = -1; /* wild card*/
  FB4REC.XGPCD = FB0CW00.XGPCD; /* product group code*/
  FB4REC.SY1STNBR = FB0CW01.SY1STNBR; /* style number*/
  FB4REC.SY2CLRID = FB0CW01.SY2CLRID; /* color*/
  FB4REC.XDMCD = FB0CW01.XDMCD; /* dimension*/
  FB4REC.XQACD = "01";
  FB4REC.PC2INSEG = "000";
  FB4REC.XSACD = "000";
  FB4REC.XPGCD = "00";
  FB4REC.XUMCD = PG2REC.XUMCD;
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vcurve01*/
   /* ------------------------------------------------------------*/
  ;
  FB0C115(); /* Select and open vcurve01 cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* fetch the first vcurve01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS01(); /* Fetch vcurve01 row*/
  ;
  FB0CW00.FB0CWIXM = +1; /* Initialize map index*/
  ;
   /* ------------------------------------------------------------*/
   /* If no data to display, return a message to the user.*/
   /* Otherwise get all the vcurve01 data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWCCF == "Y") /* No vcurve01 data available*/
    ;
    FB0CM010.XXXMODID = "11C"; /* module identification*/
    converseLib.validationFailed(18); /* 'No data to display'*/
    exit stack; /* Return to flow*/
  end
  ;
  while (FB0CW00.FB0CWCCF != "Y") /* Until end vcurve01 cursor*/
    FB0C116(); /* Fetch next vcurve01 rows*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vcurve01 set*/
   /* ------------------------------------------------------------*/
  FB0C117();
  ;
end // end FB0C114

// IO to select & open vcurve01
Function FB0C115()
  FB0CW00.FB0CWCCF = "N"; /* End of vcurve01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("S1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "11D"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0C115

// fetch all vcurve01 rows
Function FB0C116()
   /* ------------------------------------------------------------*/
   /* The vcurve01 set is ordered descending by change date so*/
   /* the most current date will be the first row for an*/
   /* internal sequence number.  However each sequence number*/
   /* can have up to 3 row.  Consequently the sequence numbers*/
   /* must be saved in the working storage record and if a*/
   /* duplicate is obtained it is bypassed.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWXM2 = +1;
                                   /* set index to 1(this is not map index)*/
  ;
  while (FB0CW00.FB0CWXM2 <= +10)
    if (FB4REC.FB1INSEQ == FB0CW00.FB1INSEQ[FB0CWXM2]
     && FB4REC.FB4CRVNB == FB0CW00.FB4CRVNB[FB0CWXM2])
       /* Sequence number has already been selected for display*/
      FB0CS01(); /* Fetch the next vcurve01 row*/
      return; /* Return to previous process*/
      ;
    end
    FB0CW00.FB0CWXM2 = FB0CW00.FB0CWXM2 + 1;
    ;
  end
  ;
  FB0CW00.FB1INSEQ[FB0CWIXM] = FB4REC.FB1INSEQ;
  FB0CW00.FB4CRVNB[FB0CWIXM] = FB4REC.FB4CRVNB; /* Curve number*/
  ;
   /* ------------------------------------------------------------*/
   /* Move data from vcurve01 row to storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW01.FB4CRVNB[FB0CWIXM] = FB4REC.FB4CRVNB; /* Curve number*/
  if (FB4REC.FB4STDFL == "Y")
    FB0CW01.FB4STDFL[FB0CWIXM] = "*"; /* Standard*/
    FB0CW02.FB4STDFL[FB0CWIXM] = "*"; /* Standard*/
  else
    FB0CW01.FB4STDFL[FB0CWIXM] = " "; /* Standard*/
    FB0CW02.FB4STDFL[FB0CWIXM] = " "; /* Standard*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move updated date to working storage to reformat for map*/
   /* display*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWFDT = FB4REC.ZZZCHGDT; /* Updated date*/
  FB0CW02.FB0CWUPM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* Change month*/
  FB0CW02.FB0CWUPD[FB0CWIXM] = FB0CW00.FB0CWFDD; /* Change day*/
  FB0CW02.FB0CWUPY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* Change year*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain remaining tables*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS02(); /* Select vselhd01 row*/
  FB0CS04(); /* Get order type group(s)*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next vcurve01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS01(); /* Fetch the next vcurve01*/
  ;
  FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* increment map index*/
  ;
   /* ------------------------------------------------------------*/
   /* The application can display only 10 lines of data on the*/
   /* screen.  If there are more than 10 curves on the database*/
   /* set flag to yes and bypass the remaining curve data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWCCF == "N"
   && FB0CW00.FB0CWIXM > 10)
    FB0CW00.FB0CWCCF = "Y";
  end
  ;
end // end FB0C116

// IO to close vcurve01 set
Function FB0C117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("C1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "11F"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VCURVE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0C117

// Format and converse map 1
Function FB0C120()
   /* ------------------------------------------------------------*/
   /* If an error was found, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    ;
    set FB0CM010 alarm; /* Indicate sound alarm*/
    FBWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If map not formated, format data from storage for display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CM010.XXXCURDT == 0) /* Map not formatted*/
    FB0C121(); /* Format the data on the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If there are no errors set attributes for select fields to*/
   /* allow entry if curves have been displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    FB0CW00.FB0CWIXM = 1; /* Initialize line index*/
    ;
    while (FB0CW00.FB0CWIXM <= 10 /* All possible curves on screen*/
     && FB0CW01.XXXUSRID[FB0CWIXM] > " ") /* Curves displayed*/
      ;
      if (FB0CW00.FB0CWIXM == 1) /* First select field*/
        ;
        set FB0CM010.FB0CMSEL[FB0CWIXM] cursor, normal; /* Position cursor*/
      else
        set FB0CM010.FB0CMSEL[FB0CWIXM] normal; /* Unprotect*/
        ;
      end
      ;
      FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* Increment line index*/
      ;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format any heading or other information in the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  if (FBWREC.XXXMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(FBWREC.XXXMSGNO);
  end /* Message number*/
  FB0CM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FB0CM010.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  converse FB0CM010 ;
   /* ------------------------------------------------------------*/
   /* Initialize message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FBWREC.XXXMSGNO = 0; /* Message number*/
  FB0CM010.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = FB0CM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FB0CM010.CAITEM; /* Application data*/
  ;
  ;
end // end FB0C120

// Format the map 1 display data
Function FB0C121()
  ;
   /* ------------------------------------------------------------*/
   /* Format the heading data from the display storage.*/
   /* storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CM010.SY1STNBR = FB0CW01.SY1STNBR; /* Style number*/
  FB0CM010.SY2CLRID = FB0CW01.SY2CLRID; /* Color identification*/
  FB0CM010.XDMCD = FB0CW01.XDMCD; /* Dimension code*/
  FB0CM010.SY1STYNM = FB0CW01.SY1STYNM; /* Style description*/
  FB0CM010.SY2CLRDS = FB0CW01.SY2CLRDS; /* Color description*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the detail data from the display storage.*/
   /* ------------------------------------------------------------*/
  FB0CW00.FB0CWIXM = 1; /* Initialize line index*/
  ;
  while (FB0CW00.FB0CWIXM <= 10 /* Until screen is full*/
   && FB0CW01.XXXUSRID[FB0CWIXM] > " ") /* or no more curves*/
    ;
    /* ------------------------------------------------------------*/
     /* Set atributes for select field to allow entry if any*/
     /* curves have been displayed.*/
    /* ------------------------------------------------------------*/
    if (FB0CW00.FB0CWIXM == 1) /* First select field*/
      ;
      set FB0CM010.FB0CMSEL[FB0CWIXM] cursor, normal; /* Position cursor*/
    else
      set FB0CM010.FB0CMSEL[FB0CWIXM] normal; /* Unprotect*/
      ;
    end
    FB0CM010.FB4CRVNB[FB0CWIXM] = FB0CW01.FB4CRVNB[FB0CWIXM];
    FB0CM010.FB1DUMNB[FB0CWIXM] = FB0CW01.FB1DUMNB[FB0CWIXM];
    FB0CM010.FB4STDFL[FB0CWIXM] = FB0CW01.FB4STDFL[FB0CWIXM];
    FB0CM010.XXXUSRID[FB0CWIXM] = FB0CW01.XXXUSRID[FB0CWIXM];
    FB0CM010.FB0CMFRM[FB0CWIXM] = FB0CW01.FB0CWFRM[FB0CWIXM];
    FB0CM010.FB0CMFRY[FB0CWIXM] = FB0CW01.FB0CWFRY[FB0CWIXM];
    FB0CM010.FB0CMTOM[FB0CWIXM] = FB0CW01.FB0CWTOM[FB0CWIXM];
    FB0CM010.FB0CMTOY[FB0CWIXM] = FB0CW01.FB0CWTOY[FB0CWIXM];
    FB0CM010.YSMXOT[FB0CWIXM] = FB0CW01.YSMXOT[FB0CWIXM];
    FB0CM010.FB0CWXOT[FB0CWIXM] = FB0CW01.FB0CWXOT[FB0CWIXM];
    FB0CM010.FB1CMNT[FB0CWIXM] = FB0CW01.FB1CMNT[FB0CWIXM];
    ;
    ;
    FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
  ;
end // end FB0C121

// IO to select & open vselhd01
Function FB0C122()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FB1REC empty; /* Clear row storage area*/
  FB0CW00.FB0CWHCF = "N"; /* End of vselhd01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key*/
   /* ------------------------------------------------------------*/
  ;
  FB1REC.FB1CRVST = "3"; /* '3' = unassigned*/
  FB1REC.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("S1", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "12A"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VCURVE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "FB1REC"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0C122

// get next vselhd01 row
Function FB0C123()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("N1", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0CW01.XXXUSRID[FB0CWIXM] = FB1REC.XXXUSRID; /* User id*/
      FB0CW02.XXXUSRID[FB0CWIXM] = FB1REC.XXXUSRID; /* User id*/
      FB0CW01.FB1CMNT[FB0CWIXM] = FB1REC.FB1CMNT; /* comments*/
      FB0CW01.FB1DUMNB[FB0CWIXM] = FB1REC.FB1DUMNB; /* dummy curve*/
      FB0CW00.FB1CRVST[FB0CWIXM] = FB1REC.FB1CRVST; /* Size % curve*/
      ;
      /* ------------------------------------------------------------*/
       /* Move created date and updated date to working storage to*/
       /* format for map display.*/
      /* ------------------------------------------------------------*/
      ;
      FB0CW00.FB0CWFDT = FB1REC.ZZZSDT; /* created date*/
      FB0CW02.FB0CWCRM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* format month*/
      FB0CW02.FB0CWCRD[FB0CWIXM] = FB0CW00.FB0CWFDD; /* format day*/
      FB0CW02.FB0CWCRY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* format year*/
      FB0CW00.FB0CWFDT = FB1REC.ZZZCHGDT; /* updated date*/
      FB0CW02.FB0CWUPM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* format month*/
      FB0CW02.FB0CWUPD[FB0CWIXM] = FB0CW00.FB0CWFDD; /* format day*/
      FB0CW02.FB0CWUPY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* format year*/
      ;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0CW00.FB0CWHCF = "Y"; /* Indicate vselhd01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "12B"; /* Module identification*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0C123

// get unassigned curve data
Function FB0C124()
  ;
   /* ------------------------------------------------------------*/
   /* Save the vselhd01 internal sequence number*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB1INSEQ[FB0CWIXM] = FB1REC.FB1INSEQ;
  ;
  ;
  set FB4REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the unassigned user curve key*/
   /* ------------------------------------------------------------*/
  ;
  FB4REC.FB1INSEQ = FB1REC.FB1INSEQ; /* Internal seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* IO to select and open vcurve01*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FB0C115(); /* IO to select and open vcurve01*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the first vcurve01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS01(); /* get first vcurve01 row*/
  ;
  FB0CW00.FB4CRVNB[FB0CWIXM] = FB4REC.FB4CRVNB; /* Curve number*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if there are no rows in the set it is a fatal error.*/
   /* Call the error diagnosis routine and exit to the menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWCCF == "Y") /* end of cursor on first fetch*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "NO CURVE DATA AVAILABLE    ";
    TA1REC.TA1PGMNO = "12C"; /* Program number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    COMMAREA.CATOAP = "FY0M"; /* To application*/
    XSFBS01();
    FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move data to display storage*/
   /* ------------------------------------------------------------*/
  ;
  if (FB4REC.FB4STDFL == "Y")
    FB0CW01.FB4STDFL[FB0CWIXM] = "*"; /* Standard*/
    FB0CW02.FB4STDFL[FB0CWIXM] = "*"; /* Standard*/
  else
    FB0CW01.FB4STDFL[FB0CWIXM] = " "; /* Standard*/
    FB0CW02.FB4STDFL[FB0CWIXM] = " "; /* Standard*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain remaining tables*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS04(); /* Get order type group(s)*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vcurve01 set*/
   /* ------------------------------------------------------------*/
  ;
  FB0C117();
  ;
   /* ------------------------------------------------------------*/
   /* Fetch vselhd01 row. Increment the index.  If there are*/
   /* more than 10 rows of data set the flag to end of data*/
   /* (the screen can only display 10 lines)*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* Increment index*/
  ;
  FB0C123(); /* Fetch next vselhd01 row*/
  ;
  ;
  if (FB0CW00.FB0CWHCF == "N"
   && FB0CW00.FB0CWIXM > 10)
    ;
    FB0CW00.FB0CWHCF = "Y"; /* Set flag to end of cursor*/
  end
  ;
end // end FB0C124

// IO to close vselhd01 set
Function FB0C125()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("C1", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "12D"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELHD01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0C125

// Check map 1 attn identifier
Function FB0C130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    if (FB0CM010.SY1STNBR == " ") /* Old style nbr erased*/
      FB0CW00.FB0CWSWR = "2"; /* Unassigned curve requested*/
      FB0CM010.SY2CLRID = " "; /* Init color and style to spaces*/
      FB0CM010.XDMCD = " ";
    else
      FB0CW00.FB0CWSWR = "1"; /* Product curve requested*/
      if (FB0CM010.SY2CLRID == "   ")
        FB0CM010.SY2CLRID = "00 "; /* Init color and style to zeros*/
      end
      if (FB0CM010.XDMCD == "   ")
        FB0CM010.XDMCD = "00";
      end
    end
    ;
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFBS01(); /* Exit to another application*/
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
      ;
    else
      ;
      converseLib.validationFailed(36); /* 'PA PF keys may not be used with*/
        /* fast path'*/
      ;
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or pf5 was pressed*/
   || converseVar.eventKey is pf14) /* or pf14 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* To application*/
      COMMAREA.CAITEM = "FB0CM010"; /* Application find code*/
      XSFBS01(); /* Exit to another application*/
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0M"; /* TO application*/
      XSFBS01();
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
    if (converseVar.eventKey is pf5) /* pf5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
      XSFBS01();
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
    if (converseVar.eventKey is pf14) /* pf14 was pressed*/
      COMMAREA.CATOAP = "FB0A"; /* TO application*/
      XSFBS01();
      FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if second screen was requested set flag to display map 2*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* transfer to second screen requested*/
    FB0CW00.FB0CWSWM = "2"; /* set map switch to display map 2*/
    exit stack;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER or any other valid*/
   && converseVar.eventKey not pf11  /* PF keys not used*/
   && converseVar.eventKey not pf12  
   && converseVar.eventKey not pf13  
   && converseVar.eventKey not pf15  
   && converseVar.eventKey not pf16)
    ;
    FB0CM010.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* 'pf key not suppored on this screen'*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FB0C130

// Reset highlighted fields
Function FB0C140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FB0CM010.SY1STNBR initialAttributes; /* Style number*/
  set FB0CM010.SY2CLRID initialAttributes; /* Color identification*/
  set FB0CM010.XDMCD initialAttributes; /* Dimension code*/
  set FB0CM010.CATOAP initialAttributes; /* Commarea TO application*/
  set FB0CM010.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FB0CW00.FB0CWIXM = 1; /* Initialize line index*/
  ;
  ;
  while (FB0CW00.FB0CWIXM <= 10 /* all 10 lines*/
   && FB0CM010.XXXUSRID[FB0CWIXM] > " ")
    ;
    set FB0CM010.FB0CMSEL[FB0CWIXM] normal;
    ;
    FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end FB0C140

// Verify the entered data
Function FB0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FB0CM010.XXXMODID = "150"; /* Module identification*/
    set FB0CM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Validate all the select code fields on the map--starting*/
   /* at the bottom of the map.*/
    /* 1). if the select code is non blank and not an 's' it*/
         /* is an error*/
    /* 2). if an 's' has been entered in more than one select*/
        /* code field it's an error*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWCNT = 0;
                                   /* Field to count number of select codes*/
  FB0CW00.FB0CWIXM = +10; /* Start edit at bottom of screen*/
  ;
  while (FB0CW00.FB0CWIXM >= 1) /* Check all the select code fields*/
    ;
    if (FB0CM010.FB0CMSEL[FB0CWIXM] == "S")
      FB0CW00.FB0CWCNT = FB0CW00.FB0CWCNT + 1;
      FB0CW00.FB0CWXM2 = +1; /* initialize second index*/
      while (FB0CW00.FB0CWXM2 <= 10)
        if (FB0CM010.FB0CMSEL[FB0CWIXM] == FB0CM010.FB0CMSEL[FB0CWXM2]
         && FB0CW00.FB0CWIXM != FB0CW00.FB0CWXM2)
          FB0CM010.XXXMODID = "150"; /* Module identification*/
          set FB0CM010.FB0CMSEL[FB0CWIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(37); /* 'multiple curves selected*/
        end
        FB0CW00.FB0CWXM2 = FB0CW00.FB0CWXM2 + 1;
      end
    else
      if (FB0CM010.FB0CMSEL[FB0CWIXM] != " ")
        FB0CM010.XXXMODID = "150"; /* Module identification*/
        set FB0CM010.FB0CMSEL[FB0CWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* 'Invalid value entered'*/
        ;
      end
    end
    ;
    FB0CWIXM = FB0CWIXM - 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error if any maintenance/change application*/
   /* has been requested and no curve has been selected.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12 /* Application FB0K*/
   || converseVar.eventKey is pf13 /* Application FB0J*/
   || converseVar.eventKey is pf15 /* Application FB0L*/
   || converseVar.eventKey is pf16) /* Application FB0I*/
    ;
    if (FB0CW00.FB0CWCNT == +0) /* No 's' entered in any field*/
      FB0CM010.XXXMODID = "150"; /* Module identification*/
      converseLib.validationFailed(38);
                                   /* 'No curve selected for maintenance or*/
       /* 'change'.*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check the style number field to see if it has changed.*/
   /* If a new style number has been entered get the product*/
   /* curve.  If the old style number has been erased get the*/
   /* unassigned user curve.  If the style number field has not*/
   /* changed and style number is spaces get the unassigned*/
   /* user curve.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FB0CM010.SY1STNBR != FB0CW01.SY1STNBR /* New style number entered*/
     || FB0CM010.SY2CLRID != FB0CW01.SY2CLRID /* New color*/
     || FB0CM010.XDMCD != FB0CW01.XDMCD)      /* New Dim*/
      if (FB0CM010.SY1STNBR == " ") /* Old style nbr erased*/
        FB0CW00.FB0CWSWR = "2"; /* Unassigned curve requested*/
        FB0CM010.SY2CLRID = " "; /* Init color and style to spaces*/
        FB0CM010.XDMCD = " ";
      else
        FB0CW00.FB0CWSWR = "1"; /* Product curve requested*/
        if (FB0CM010.SY2CLRID == "   ")
          FB0CM010.SY2CLRID = "00 "; /* Init color and style to zeros*/
        end
        if (FB0CM010.XDMCD == "   ")
          FB0CM010.XDMCD = "00";
        end
      end
    else
      if (FB0CM010.SY1STNBR == " " /* Style number never entered*/
       && FB0CM010.XXXUSRID[1] == " ") /* and map never formatted*/
        FB0CW00.FB0CWSWR = "2"; /* Unassigned curve requested*/
        FB0CM010.SY2CLRID = " "; /* Init color and style to spaces*/
        FB0CM010.XDMCD = " ";
      end
    end
  end
  ;
end // end FB0C150

// Process valid input request
Function FB0C160()
   /* ------------------------------------------------------------*/
   /* Determine what application to transfer to based upon*/
   /* pfkeys.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
     /* Initialize passed data fields*/
    FBWREC.FBWKEY = " ";
    FBWREC.FB1CRVST = "0";
    FBWREC.FB1DUMNB = 0;
    ;
    FB0CW00.FB0CWIXM = +1; /* Initialize index*/
    ;
    /* ------------------------------------------------------------*/
     /* Determine index value by finding field with select code*/
    /* ------------------------------------------------------------*/
    while (FB0CW00.FB0CWIXM <= 10
     && FB0CM010.FB0CMSEL[FB0CWIXM] != "S")
      FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1;
    end
    /* ------------------------------------------------------------*/
     /* Load the fbwrec prior to transfer*/
       /* (Use the value of the index to move the correct sequence*/
        /* number and curve standard for the curve selected.*/
    /* ------------------------------------------------------------*/
    FBWREC.FB1INSEQ = FB0CW00.FB1INSEQ[FB0CWIXM];
    FBWREC.FB1CRVST = FB0CW00.FB1CRVST[FB0CWIXM];
    FBWREC.FB4CRVNB = FB0CW00.FB4CRVNB[FB0CWIXM];
    ;
    if (FB4REC.SY1STNBR > " ")
      /* ------------------------------------------------------------*/
         /* Load fbwrec with product curve key data*/
      /* ------------------------------------------------------------*/
       /* key fields for vcurve01 record*/
      FBWREC.XGPCD = FB0CW00.XGPCD;
      FBWREC.SY1STNBR = FB4REC.SY1STNBR;
      FBWREC.SY2CLRID = FB4REC.SY2CLRID;
      FBWREC.XDMCD = FB4REC.XDMCD;
      FBWREC.XQACD = FB4REC.XQACD;
      FBWREC.PC2INSEG = FB4REC.PC2INSEG;
      FBWREC.XSACD = FB4REC.XSACD;
      FBWREC.XPGCD = FB4REC.XPGCD;
      FBWREC.XUMCD = FB4REC.XUMCD;
    else
      FBWREC.FB1DUMNB = FB0CW01.FB1DUMNB[FB0CWIXM];
    end
    ;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP; /* fbwrec to commarea*/
    ;
    if (converseVar.eventKey is pf12)
      COMMAREA.CATOAP = "FB0K"; /* to application*/
    end
    ;
    if (converseVar.eventKey is pf13)
      COMMAREA.CATOAP = "FB0J"; /* to application*/
    end
    ;
    if (converseVar.eventKey is pf15)
      COMMAREA.CATOAP = "FB0L"; /* to application*/
    end
    ;
    if (converseVar.eventKey is pf16)
      COMMAREA.CATOAP = "FB0I"; /* to application*/
    end
    ;
    XSFBS01();
    FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
    exit stack; /* return to show error msg*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If there is no new data request and the application did*/
   /* not do a pfkey transfer, the current data will be*/
   /* redisplayed. so storage areas need not be updated and*/
   /* the maps should not be cleared.*/
   /* ------------------------------------------------------------*/
  if (FB0CW00.FB0CWSWR == "0")
    ;
    return;
  end
  ;
  set FB0CW01 empty; /* M010  display storage*/
  set FB0CW02 empty; /* M020  display storage*/
  move 0 to FB0CW00.FB1INSEQ[1] for all; /* Initialize seq nbr array in storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the key map data in storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW01.XGPCD = FB0CW00.XGPCD; /* GPC code- map 1*/
  FB0CW01.SY1STNBR = FB0CM010.SY1STNBR; /* Style code- map 1*/
  FB0CW02.SY1STNBR = FB0CM010.SY1STNBR; /* Style code- map 2*/
  FB0CW01.SY2CLRID = FB0CM010.SY2CLRID; /* Color code- map 1*/
  FB0CW02.SY2CLRID = FB0CM010.SY2CLRID; /* Color code- map 2*/
  FB0CW01.XDMCD = FB0CM010.XDMCD; /* Dimension code- map 1*/
  FB0CW02.XDMCD = FB0CM010.XDMCD; /* Dimension code- map 2*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear map input/output areas.*/
   /* ------------------------------------------------------------*/
  set FB0CM010 initial; /* M010 input/output*/
  set FB0CM020 initial; /* M020 input/output*/
  ;
  ;
end // end FB0C160

// map 2 processing
Function FB0C200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map 2.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
   /* map 2 processing*/
   /* ------------------------------------------------------------*/
  ;
  FB0C210(); /* Format and display the map*/
  ;
  FB0C220(); /* Check attention identifier*/
  ;
  ;
end // end FB0C200

// Format and converse map 2
Function FB0C210()
  ;
   /* ------------------------------------------------------------*/
   /* If data has been requested, format data for display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CM020.XXXCURDT == 0) /* map is not formatted*/
    FB0C211(); /* Format the data on map 2*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format any heading or other information in the map.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CM020.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  ;
   /* ------------------------------------------------------------*/
  ;
  converse FB0CM020 ;
  ;
  ;
end // end FB0C210

// format display data for map 2
Function FB0C211()
   /* ------------------------------------------------------------*/
   /* Format the heading data from display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CM020.SY1STNBR = FB0CW02.SY1STNBR; /* Style number*/
  FB0CM020.SY2CLRID = FB0CW02.SY2CLRID; /* Color identification*/
  FB0CM020.XDMCD = FB0CW02.XDMCD; /* Dimension code*/
  FB0CM020.SY1STYNM = FB0CW02.SY1STYNM; /* Style description*/
  FB0CM020.SY2CLRDS = FB0CW02.SY2CLRDS; /* Color description*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the detail data from display storage.*/
   /* ------------------------------------------------------------*/
  FB0CW00.FB0CWIXM = 1; /* Initialize line index*/
  ;
  while (FB0CW00.FB0CWIXM <= 10 /* Until screen is full*/
   && FB0CW01.XXXUSRID[FB0CWIXM] > " ") /* or end of data*/
    ;
    ;
    FB0CM020.FB4STDFL[FB0CWIXM] = FB0CW02.FB4STDFL[FB0CWIXM];
    FB0CM020.XXXUSRID[FB0CWIXM] = FB0CW02.XXXUSRID[FB0CWIXM];
    FB0CM020.FB0CMFRM[FB0CWIXM] = FB0CW02.FB0CWFRM[FB0CWIXM];
    FB0CM020.FB0CMFRY[FB0CWIXM] = FB0CW02.FB0CWFRY[FB0CWIXM];
    FB0CM020.FB0CMTOM[FB0CWIXM] = FB0CW02.FB0CWTOM[FB0CWIXM];
    FB0CM020.FB0CMTOY[FB0CWIXM] = FB0CW02.FB0CWTOY[FB0CWIXM];
    FB0CM020.FB0CMCRM[FB0CWIXM] = FB0CW02.FB0CWCRM[FB0CWIXM];
    FB0CM020.FB0CMCRD[FB0CWIXM] = FB0CW02.FB0CWCRD[FB0CWIXM];
    FB0CM020.FB0CMCRY[FB0CWIXM] = FB0CW02.FB0CWCRY[FB0CWIXM];
    FB0CM020.FB0CMUPM[FB0CWIXM] = FB0CW02.FB0CWUPM[FB0CWIXM];
    FB0CM020.FB0CMUPD[FB0CWIXM] = FB0CW02.FB0CWUPD[FB0CWIXM];
    FB0CM020.FB0CMUPY[FB0CWIXM] = FB0CW02.FB0CWUPY[FB0CWIXM];
    ;
    FB0CW00.FB0CWIXM = FB0CW00.FB0CWIXM + 1; /* Increment line index*/
    ;
  end
  ;
end // end FB0C211

// Check map 2 attn identifier
Function FB0C220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    if (FB0CM020.SY1STNBR == " ") /* Old style nbr erased*/
      FB0CW00.FB0CWSWR = "2"; /* Unassigned curve requested*/
    else
      FB0CW00.FB0CWSWR = "1"; /* Product curve requested*/
    end
    ;
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or pf5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* To application*/
      COMMAREA.CAITEM = "FB0CM020"; /* Find application*/
      XSFBS01(); /* Exit to another application*/
      FB0CM020.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FB0M"; /* TO application*/
      XSFBS01();
      FB0CM020.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
    if (converseVar.eventKey is pf5) /* pf5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* TO application*/
      XSFBS01();
      FB0CM020.VAGen_EZEMSG = COMMAREA.CAMSG; /* if bad transfer*/
      exit stack; /* return to show error msg*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10) /* not other screen request*/
    ;
    converseLib.validationFailed(3);
                                   /* 'pf key not supported on this screen'*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* if first screen was requested set flag to display map 1*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* transfer to first screen requested*/
    FB0CW00.FB0CWSWM = "1"; /* map one to be displayed*/
  end
  ;
  ;
end // end FB0C220

// get next vcure01 row
Function FB0CS01()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3020" ("N1", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0CW00.FB0CWCCF = "Y"; /* Indicate vcurve01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "S01"; /* Module identification*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0CS01

// fetch vselhd01 row
Function FB0CS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and record key*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set FB1REC empty; /* Clear row storage area*/
  ;
  FB1REC.FB1INSEQ = FB0CW00.FB1INSEQ[FB0CWIXM]; /* internal seq nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3030" ("S ", SQLCA, FB1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage and return*/
   /* to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FB0CW01.XXXUSRID[FB0CWIXM] = FB1REC.XXXUSRID; /* User id*/
      FB0CW02.XXXUSRID[FB0CWIXM] = FB1REC.XXXUSRID; /* User id*/
      FB0CW01.FB1CMNT[FB0CWIXM] = FB1REC.FB1CMNT; /* comments*/
      FB0CW00.FB1CRVST[FB0CWIXM] = FB1REC.FB1CRVST; /* curve standard*/
      ;
      /* ------------------------------------------------------------*/
       /* move created date to working storage date field to format*/
       /* for map display.*/
      /* ------------------------------------------------------------*/
      ;
      FB0CW00.FB0CWFDT = FB1REC.ZZZSDT; /* created date*/
      FB0CW02.FB0CWCRM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* format month*/
      FB0CW02.FB0CWCRD[FB0CWIXM] = FB0CW00.FB0CWFDD; /* format day*/
      FB0CW02.FB0CWCRY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* format year*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* if data not found abort the applicaton otherwiseindicated*/
   /* that a system error has occured*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(19); /* 'Resources unavailabe'*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(11); /* 'Record not on database'*/
      else
        converseLib.validationFailed(01); /* 'error - please notify programming'*/
      end
    end
    ;
  end
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH VSELHD01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB1REC.FB1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0CS02

// get order type group
Function FB0CS04()
   /* ------------------------------------------------------------*/
   /* IO to select and open vseldt01*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS05(); /* ; Open cursor for vseldt01*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the first vseldt01 row*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS06(); /* fetch vseldt01 row*/
  ;
   /* ------------------------------------------------------------*/
   /* if there are no rows in the set it is a fatal error.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB0CW00.FB0CWDCF == "Y") /* end of cursor on first fetch*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "NO VSELDT01 DATA    ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "S04"; /* Program number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    COMMAREA.CATOAP = "FY0M"; /* To application*/
    XSFBS01();
    FB0CM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* If bad transfer*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move the date from the first record to working storage*/
   /* to format and then move the month and year fields to map*/
   /* map storage.*/
   /* ------------------------------------------------------------*/
  ;
  FB0CW00.FB0CWFDT = FB5REC.FB5TODT; /* Updated date*/
  FB0CW01.FB0CWTOM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* To month*/
  FB0CW02.FB0CWTOM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* To month*/
  FB0CW01.FB0CWTOY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* To year*/
  FB0CW02.FB0CWTOY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* To year*/
  FB0CW00.FB0CWFDT = FB5REC.FB5FRMDT; /* Updated date*/
  FB0CW01.FB0CWFRM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* From month*/
  FB0CW02.FB0CWFRM[FB0CWIXM] = FB0CW00.FB0CWFMM; /* From month*/
  FB0CW01.FB0CWFRY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* From year*/
  FB0CW02.FB0CWFRY[FB0CWIXM] = FB0CW00.FB0CWFYY; /* From year*/
   /* ------------------------------------------------------------*/
   /* move the order type group code to storage.*/
   /* ------------------------------------------------------------*/
  FB0CW01.YSMXOT[FB0CWIXM] = FB5REC.YSMXOT;
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the second vseldt01 row.  if the second from date*/
   /* is equal to the first move the group type code to storage*/
   /* ------------------------------------------------------------*/
  ;
  FB0CS06(); /* Fetch vseldt01 row*/
  ;
  if (FB0CW00.FB0CWDCF == "N" /* Not end of cursor*/
   && FB5REC.FB5FRMDT == FB0CW00.FB0CWFDT)
                                   /* and current date = prior date*/
    /* ------------------------------------------------------------*/
     /* Move the order type group code from the second record*/
    /* ------------------------------------------------------------*/
    FB0CW01.FB0CWXOT[FB0CWIXM] = FB5REC.YSMXOT;
    ;
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* IO to close vseldt01 set*/
   /* ------------------------------------------------------------*/
  FB0CS07(); /* Close cursor for vseldt01*/
  ;
end // end FB0CS04

// select cursor for vseldt01
Function FB0CS05()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/
  ;
  set FB5REC empty; /* clear row storage area*/
  FB0CW00.FB0CWDCF = "N"; /* End of vseldt01 flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the key with saved sequence number from vcurve01 or*/
   /* vselhd01.*/
   /* ------------------------------------------------------------*/
  ;
  FB5REC.FB1INSEQ = FB0CW00.FB1INSEQ[FB0CWIXM];
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("S1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "S05"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(19); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VSELDT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
  ;
end // end FB0CS05

// fetch vseldt01 row
Function FB0CS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("N1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FB0CW00.FB0CWDCF = "Y"; /* Indicate vseldt01 end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "S06"; /* Module identification*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    ;
    converseLib.validationFailed(19); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB5REC.FB5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0CS06

// close cursor for vseldt01
Function FB0CS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3040" ("C1", SQLCA, FB5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FB0CM010.XXXMODID = "S07"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSELDT01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0CM010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELDT01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB0CS07

//*** RECORD=FB0CW00 ****
// ----------------------------
// application working storage.
// ----------------------------
// ***********************
Record FB0CW00 type basicRecord
  10 FB0CWSWR FB0CWSWR ; 
  10 FB0CWSWM FB0CWSWM ; 
  10 FB0CWCCF FB0CWCCF ; 
  10 FB0CWDCF FB0CWDCF ; 
  10 FB0CWHCF FB0CWHCF ; 
  10 FB0CWIXM FB0CWIXM ; 
  10 FB0CWXM2 FB0CWXM2 ; 
  10 FB0CWCNT FB0CWCNT ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 FB1CRVST FB1CRVST [10] ; 
  10 FB1INSEQ FB1INSEQ [10] ; 
  10 FB4CRVNB FB4CRVNB [10] ; 
  10 XGPCD XGPCD ; 
  10 FB0CWFDT FB0CWFDT ; 
    15 FB0CWFCT FB0CWFCT ; 
    15 FB0CWFYY FB0CWFYY ; 
    15 FB0CWFMM FB0CWFMM ; 
    15 FB0CWFDD FB0CWFDD ; 
end // end FB0CW00

//*** RECORD=FB0CW01 ****
// -------------------------------------
// Map 010 display storage.
// -------------------------------------
// ***********************
Record FB0CW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 XDMCD XDMCD ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY1STYNM SY1STYNM ; 
  10 SY2CLRDS SY2CLRDS ; 
  10 XPCSDESC XPCSDESC ; 
  10 FB0CWSEL FB0CWSEL [10] ; 
  10 FB4CRVNB FB4CRVNB [10] ; 
  10 FB1DUMNB FB1DUMNB [10] ; 
  10 FB4STDFL FB4STDFL [10] ; 
  10 XXXUSRID XXXUSRID [10] ; 
  10 FB0CWFRM FB0CWFRM [10] ; 
  10 FB0CWFRY FB0CWFRY [10] ; 
  10 FB0CWTOM FB0CWTOM [10] ; 
  10 FB0CWTOY FB0CWTOY [10] ; 
  10 YSMXOT YSMXOT [10] ; 
  10 FB0CWXOT FB0CWXOT [10] ; 
  10 FB1CMNT FB1CMNT [10] ; 
end // end FB0CW01

//*** RECORD=FB0CW02 ****
// -------------------------------------
// Map 020 display storage.
// -------------------------------------
// ***********************
Record FB0CW02 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 XDMCD XDMCD ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY1STYNM SY1STYNM ; 
  10 SY2CLRDS SY2CLRDS ; 
  10 XPCSDESC XPCSDESC ; 
  10 FB4STDFL FB4STDFL [10] ; 
  10 XXXUSRID XXXUSRID [10] ; 
  10 FB0CWFRM FB0CWFRM [10] ; 
  10 FB0CWFRY FB0CWFRY [10] ; 
  10 FB0CWTOM FB0CWTOM [10] ; 
  10 FB0CWTOY FB0CWTOY [10] ; 
  10 FB0CWCRM FB0CWCRM [10] ; 
  10 FB0CWCRD FB0CWCRD [10] ; 
  10 FB0CWCRY FB0CWCRY [10] ; 
  10 FB0CWUPM FB0CWUPM [10] ; 
  10 FB0CWUPD FB0CWUPD [10] ; 
  10 FB0CWUPY FB0CWUPY [10] ; 
end // end FB0CW02

// vcurve01 cursor flag
DataItem FB0CWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select code counter
DataItem FB0CWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map created day
DataItem FB0CWCRD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map created month
DataItem FB0CWCRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map created year
DataItem FB0CWCRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vseldt01 cursor flag
DataItem FB0CWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map reformat century
DataItem FB0CWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map reformat day
DataItem FB0CWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map reformat date field
DataItem FB0CWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map reformat month
DataItem FB0CWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map from month
DataItem FB0CWFRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map from year
DataItem FB0CWFRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map reformat year
DataItem FB0CWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// vselhd01 cursor flag
DataItem FB0CWHCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem FB0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map display flag
DataItem FB0CWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to month
DataItem FB0CWTOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to year
DataItem FB0CWTOY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map updated day
DataItem FB0CWUPD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map updated month
DataItem FB0CWUPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map updated year
DataItem FB0CWUPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem FB0CWXM2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second order type code
DataItem FB0CWXOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

