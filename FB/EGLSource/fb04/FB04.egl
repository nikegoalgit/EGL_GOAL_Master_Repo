package fb04;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XFRCD;
import corpx2.XPCCD;
import corpx2.XPGCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB-LATE-BK-FL;
import fb.common.FB-LATE-BK-FL-MDT;
import fb.common.FB7BUYST;
import fb.common.FB7GROUP;
import fb.common.FB7QTB;
import fb.common.FB7REC;
import fb.common.FB7RTADT;
import fb.common.FB7RTAPC;
import fb.common.FB8BUYDT;
import fb.common.FB8FTQTB;
import fb.common.FB9REC;
import fb.common.FBDBTCD;
import fb.common.FBWREC;
import fb.common.FBXFRMDT;
import fb.common.FBXREC;
import fb.common.FBXTODT;
import ff.common.FF00ENU;
import fy.common.FY1FCTYC;
import fy.common.FY2MFGPC;
import fy.common.FY3REC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP2LNINB;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pg.common.PG3REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FB04 ****
// This application is part of the footwear buy system.  It
// provides the capability of moving quantities by size from
// one rta date to another rta date for a specific product.
// Product 'from' and 'to' rta dates are selected in FB03 and
// passed to this application through the commarea.  The
// information can also be entered by the user.  The applica-
// tion selects the size information from the merged quantity
// to buy table and stores the data in working storage.  After
// the data is stored in working storage, the application
// formats the data snd displays the map.  The user has the
// option of moving any size quantities or portion thereof from
// the 'from' rta date to the 'to' rtad.  After all desired
// changes have been made, the user presses enter.  The
// application then makes the desired adjustments, recalculates
// the total size quantities for each rta date, and redisplays
// the map.  Whenever an updae occurs, the merged qtb table is
// updated.
// PF10 and PF11 are provided to shift left and right to view
// all sizes.  In addition, the number of sizes to be shifted
// may be entered.  The default is ten.
// the user may exit to any allowed application via fast path
// or PF keys/
// ************************************************************
// *    maintenance history                                   *
// *                                                          *
// * date     init       comments
// * ------  ------    -------------------------------------- *
// * 080190  tjf       added code to fb04500 to correct date  *
// *                   edit processing                        *
// *                   added code to fb04530 to allow add-    *
// *                   itional qtys that total lt the total   *
// *                   buy qty to be added.                   *
// * 100991  jalle1    oct '91 tbl chgs - fix w02 and w03 by  *
// *                   adding xfrcd, fb-late-bk-fl, and       *
// *                   fb-late-bk-fl-mdt.
// * 030692  PMAINW    FB-257 SUPPORT MULTIPLE S.O. BY XREF   *
// * 092793  LDELUH    Convert to csp v4.
// * 102494  JJUDKI    Bug. Too many RTA days allowed for a
// *                  short month. Added ta0040 to fb04210.
// * 2-95    LREIN     added code for centralised european
// *                   forecast project
// * FB-873  CCAINT    access VSYCLR01 instead of VFFSTY01
// * YR2000  rgilli    Y2K MODIFICATIONS MADE TO:
// *                   FB04M010: Right justified to rta date
// *                   FB04100:  Add century windowing.
// *                   FB04500:  Add century windowing.
// *                   FB04600:  Add century windowing.
// * 010402  greddy    Call IO3120 instead of IO3990 to get
// *                   product descriptions.
// *********************
Program FB04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB04W00 FB04W00; // record
  FB04W01 FB04W01; // record
  FB04W02 FB04W02; // record
  FB04W03 FB04W03; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  FY3REC FY3REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use FB04M.FB04M010, // form
  		FB04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    ;
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
    ;
     /* ------------------------------------------------------------*/
      /* initialise working storage and map areas*/
     /* ------------------------------------------------------------*/
    ;
    set FB04W00 empty; /* working storage*/
    set FB04W01 empty; /* screen display working storage*/
    set FB04M010 initial; /* map area*/
    FB04M010.FB04MSCR = 10; /* default scroll size*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    FB04W00.FB04WMCS = "N"; /* dont format map*/
    FB04W00.FB04WSAS = "N"; /* scrolling not allowed yet*/
    FB04W00.FB04WRDF = "N"; /* row not deleted*/
    ;
     /* ------------------------------------------------------------*/
      /* see if key data is in commarea*/
     /* ------------------------------------------------------------*/
    ;
    if (CAFRMSYS == "FB")
      ;
      if (FBXREC.SY1STNBR[1] != " ") /* style number in commarea*/
        FB04M010.SY1STNBR = FBXREC.SY1STNBR[1];
        FB04W00.FB04WRDS = "Y"; /* request data*/
      end
      ;
      if (FBXREC.XCTCD != " ") /* country code entered*/
        FB04M010.XCTCD = FBXREC.XCTCD;
        FB04W00.FB04WRDS = "Y"; /* request data*/
      end
      ;
      if (FBXREC.XDMCD[1] != " ") /* dimension code*/
        FB04M010.XDMCD = FBXREC.XDMCD[1];
        FB04W00.FB04WRDS = "Y"; /* request data*/
      else
        FB04M010.XDMCD = "00"; /* default dimension code*/
      end
      ;
      if (FBXREC.SY2CLRID[1] != " ") /* color code*/
        FB04M010.SY2CLRID = FBXREC.SY2CLRID[1];
        FB04W00.FB04WRDS = "Y"; /* request data*/
      else
        FB04M010.SY2CLRID = "00"; /* default color code*/
      end
      ;
      if (FBXREC.PC2CUXID != " ") /* cust cross ref*/
        FB04M010.FB04MFCX = FBXREC.PC2CUXID;
        FB04M010.FB04MTCX = FBXREC.PC2CUXID;
        FB04M010.OP1CUOID = FBXREC.OP1CUOID;
        FB04M010.OP1NORID = FBXREC.OP1NORID;
        FB04M010.OP1PARTN = FBXREC.OP1PARTN;
        FB04W00.FB04WRDS = "Y"; /* request data*/
      end
      ;
      if (FBXREC.FBXFCTY1 != " ") /* factory code*/
        FB04M010.FB04MFFY = FBXREC.FBXFCTY1;
        FB04M010.FB04MTFY = FBXREC.FBXFCTY1;
        FB04W00.FB04WRDS = "Y"; /* request data*/
      end
      ;
      if (FBXREC.FBXFRMDT != 0) /* from rtadate*/
        FB04W00.FB04WDT2 = FBXREC.FBXFRMDT; /* yymmdd*/
        FB04W00.FB04WYY1 = FB04W00.FB04WYY2;
        FB04W00.FB04WMM1 = FB04W00.FB04WMM2;
        FB04W00.FB04WDD1 = FB04W00.FB04WDD2;
        FB04M010.FBXFRMDT = FB04W00.FB04WDT1;
           /* MOVE FBXREC.FBXFRMDT TO FB04M010.FBXFRMDT;*/
        FB04W00.FB04WRDS = "Y"; /* request data*/
      end
      ;
      FB04M010.FBXTODT = 0; /* to rta date*/
      ;
    end
    ;
    FB04001: FB04001();
    goto FB04001;
  end // end main
end // end FB04

// nil rta maint size qty moves
Function FB04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FB04100(); /* obtain data to display*/
  ;
  FB04200(); /* format and display map*/
  ;
  FB04300(); /* Check attention identifier*/
  ;
  FB04400(); /* Reset fields to normal intensity*/
  ;
  FB04500(); /* Verify the entered data*/
  ;
  FB04600(); /* Process valid input request*/
  ;
  ;
end // end FB04001

// obtain data to display
Function FB04100()
  if (FB04W00.FB04WRDS != "Y" /* data has not been requested*/
   || converseVar.validationMsgNum != 0) /* an error occurred*/
    return; /* return to calling process*/
  end
  ;
  FB04M010.FB04MSCR = 10; /* scroll amount*/
  FB04W00.FB04WSAS = "N"; /* scroll allowed switch*/
  FB04W00.FB04WRDS = "N"; /* dont request data*/
  FB04110(); /* get tolerance*/
  ;
   /* ------------------------------------------------------------*/
   /* build key for 'from' rta date data*/
   /* ------------------------------------------------------------*/
  ;
  set FB7REC empty; /* initialise record*/
  FB7REC.FY1FCTYC = FB04M010.FB04MFFY; /* factory code*/
  FB7REC.SY1STNBR = FB04M010.SY1STNBR; /* style number*/
  FB7REC.SY2CLRID = FB04M010.SY2CLRID; /* color code*/
  FB7REC.XDMCD = FB04M010.XDMCD; /* dimension code*/
  FB7REC.PC2CUXID = FB04M010.FB04MFCX; /* cust xref*/
  FB7REC.OP1CUOID = FB04M010.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB04M010.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.OP1PARTN = FB04M010.OP1PARTN; /* OP-PART-CHAR*/
  FB7REC.XCTCD = FB04M010.XCTCD; /* country code*/
  FB04W00.FB04WDT1 = FB04M010.FBXFRMDT; /* mmddyy*/
  FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
  FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
  FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
   /* --------------------- y2k out begin ------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2;/* yymmdd*/
   /* --------------------- y2k out end   ------------------*/
   /* --------------------- y2k in begin  ------------------*/
  if (FB04W00.FB04WYY2 > 60)
    FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2; /* yymmdd*/
  else
    FB7REC.FB7RTADT = 20000000 + FB04W00.FB04WDT2; /* yymmdd*/
  end
   /* --------------------- y2k in end    ------------------*/
  FB7REC.FB8BUYDT = FBXREC.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = FBXREC.XWHCD1; /* warehouse code*/
  ;
  if (FB04W00.FB04WRDF != "Y") /* row was not deleted*/
    FB04120(); /* get quantities*/
  end
  ;
  if (converseVar.validationMsgNum == 18) /* no data to display*/
    FB04S01(); /* reset screen*/
    XXXMODID = "120"; /* process number*/
    set FB04M010.FBXFRMDT skip, bold; /* Highlight from date*/
    exit stack; /* display map*/
  else
    FB04W02.FB7GROUP = FB7REC.FB7GROUP; /* save from data*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* build key for 'to' rta date data*/
   /* ------------------------------------------------------------*/
  ;
  set FB04W03 empty;
  set FB7REC empty; /* initialise record*/
  FB7REC.FY1FCTYC = FB04M010.FB04MFFY; /* factory code*/
  FB7REC.SY1STNBR = FB04M010.SY1STNBR; /* style number*/
  FB7REC.SY2CLRID = FB04M010.SY2CLRID; /* color code*/
  FB7REC.XDMCD = FB04M010.XDMCD; /* dimension code*/
  FB7REC.PC2CUXID = FB04M010.FB04MFCX; /* cust xref*/
  FB7REC.OP1CUOID = FB04M010.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB04M010.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.OP1PARTN = FB04M010.OP1PARTN; /* OP-PART-CHAR*/
  FB7REC.XCTCD = FB04M010.XCTCD; /* country code*/
  FB04W00.FB04WDT1 = FB04M010.FBXTODT; /* mmddyy*/
  FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
  FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
  FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
   /* --------------------- y2k out begin ------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2;/* yymmdd*/
   /* --------------------- y2k out end   ------------------*/
   /* --------------------- y2k in begin  ------------------*/
  if (FB04W00.FB04WYY2 > 60)
    FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2; /* yymmdd*/
  else
    FB7REC.FB7RTADT = 20000000 + FB04W00.FB04WDT2; /* yymmdd*/
  end
   /* --------------------- y2k in end    ------------------*/
  FB7REC.FB8BUYDT = FBXREC.FB8BUYDT; /* buy date*/
  FB7REC.XWHCD = FBXREC.XWHCD1; /* warehouse code*/
  ;
  if (FB04M010.FBXTODT != 0) /* a 'to' rta date entered*/
    FB04120(); /* get quantities*/
  end
  ;
  if (converseVar.validationMsgNum == 18) /* no data to display*/
    converseLib.validationFailed(0);
  else
    FB04W03.FB7GROUP = FB7REC.FB7GROUP; /* save to data*/
  end
  ;
  FB04130(); /* get product description*/
  FB04140(); /* get size descriptions*/
  FB04150(); /* determine scroll bounds*/
  FB04W00.FB04WSCL = FB04W00.FB04WLSB; /* start at first size with data*/
  FB04W00.FB04WECL = FB04W00.FB04WSCL + 9; /* end column*/
  FB04W00.FB04WSIX = FB04W00.FB04WSCL; /* first size*/
  FB04W00.FB04WMCS = "Y"; /* format map*/
  FB04W00.FB04WSAS = "Y"; /* scroll allowed switch*/
  FB04160(); /* get first, last rta date*/
  ;
   /* ------------------------------------------------------------*/
   /* save key data in display working storage*/
   /* ------------------------------------------------------------*/
  ;
  FB04W01.SY1STNBR = FB7REC.SY1STNBR; /* style number*/
  FB04W01.SY2CLRID = FB7REC.SY2CLRID; /* color code*/
  FB04W01.XDMCD = FB7REC.XDMCD; /* dimension code*/
  FB04W01.XCTCD = FB7REC.XCTCD; /* country code*/
  FB04W01.FBXFRMDT = FB04M010.FBXFRMDT; /* from rta date*/
  FB04W01.FBXTODT = FB04M010.FBXTODT; /* to rta date*/
  FB04W01.FB04MFCX = FB04M010.FB04MFCX; /* from cust xref*/
  FB04W01.FB04MTCX = FB04M010.FB04MFCX; /* to cust xref*/
  FB04W01.FB04MFFY = FB04M010.FB04MFFY; /* from factory*/
  FB04W01.FB04MTFY = FB04M010.FB04MFFY; /* to factory*/
end // end FB04100

// get tolerance quantity
Function FB04110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FB9REC empty;
  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB04M010.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB04M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB04110

// get row from VMFBUY01 table
Function FB04120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3490" ("SB", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      converseLib.validationFailed(18); /* no data found*/
      return; /* return to caller*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB04M010.XXXMODID = "122"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    FB04W00.FB04WMCS = "N"; /* dont format map*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB04M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB7REC.FB7GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  FB04W00.FB04WRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB04120

// get product descriptions
Function FB04130()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.SY1STNBR = FB04M010.SY1STNBR;
  PG2REC.SY2CLRID = FB04M010.SY2CLRID;
  PG2REC.XDMCD = FB04M010.XDMCD;
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* If not found, move all * to the fields*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      PG2REC.SY1SSTNM = "************";
      PG2REC.SY2CLRAB = "************";
      SQLCA.VAGen_SQLCODE = 0; /* reset return code*/
      return; /* display the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FB04M010.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB04M010.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
end // end FB04130

// get size descriptions
Function FB04140()
   /* ------------------------------------------------------------*/
    /* build key for pg2rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty;
  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FB04M010.SY1STNBR;
  PG2REC.SY2CLRID = FB04M010.SY2CLRID;
  PG2REC.XDMCD = FB04M010.XDMCD;
  TA1REC.TA1PGMNM = "FB04140";
  ;
  XSPG202();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or product not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB04M010.XXXMODID = "140"; /* process number*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* product not found*/
    FB04S01(); /* reset screen*/
    converseLib.validationFailed(167); /* invalid product*/
    set FB04M010.SY1STNBR cursor, bold;
    FB04M010.XXXMODID = "140"; /* process number*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* build key for pg3rec*/
   /* ------------------------------------------------------------*/
  ;
  set PG3REC empty;
  PG3REC.PG3FUNCD = "PC"; /* all valid sizes*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  TA1REC.TA1PGMNM = "FB04140"; /* module id*/
  PG3REC.XGPCD = "02";
  PG3REC.SY1STNBR = FB04M010.SY1STNBR;
  PG3REC.SY2CLRID = FB04M010.SY2CLRID;
  PG3REC.XDMCD = FB04M010.XDMCD;
  PG3REC.PG3XDVCD = PG2REC.XDVCD1; /* highest division*/
  PG3REC.XQACD = "01"; /* move default*/
  ;
  XSPG301();
  ;
   /* ------------------------------------------------------------*/
    /* if non normal rtn code, or sizes not found, set up error*/
   /* ------------------------------------------------------------*/
  ;
  if (TA1REC.TA1FUNC == "RETN") /* abend message sent to screen*/
    converseLib.clearScreen();
     /* reset screen*/
    FB04M010.XXXMODID = "140"; /* process number*/
  end
  ;
  if (TA1REC.TA1FUNC == "POST") /* resource in use*/
    converseLib.validationFailed(47); /* set error message*/
    FB04M010.XXXMODID = "140"; /* process number*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
  if (TA1REC.TA1FUNC == "RETN" /* database error*/
   || SQLCA.VAGen_SQLCODE != 0) /* no sizes found*/
    FB04S01(); /* reset map*/
    FB04W00.FB04WSAS = "N"; /* scroll switch*/
    converseLib.validationFailed(01); /* set error message*/
    FB04M010.XXXMODID = "140"; /* process number*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    exit stack; /* display map*/
  end
  ;
end // end FB04140

// set scroll bounds
Function FB04150()
  FB04W00.FB04WLSB = 1; /* left scroll bound*/
  FB04W00.FB04WRSB = 40; /* right scroll bound*/
  FB04W00.FB04WSIX = 1; /* first possible size*/
  ;
  while (FB04W02.FB7QTB[FB04WSIX] == 0 /* no from size qtb*/
   && FB04W03.FB7QTB[FB04WSIX] == 0 /* no to size qtb*/
   && PG3REC.SY4IDDSC[FB04WSIX] == " ") /* no size description*/
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size*/
  end
  ;
  FB04W00.FB04WLSB = FB04W00.FB04WSIX; /* save bucket for left bound*/
  FB04W00.FB04WSIX = 40; /* last possible size*/
  ;
  while (FB04W02.FB7QTB[FB04WSIX] == 0 /* no from size qtb*/
   && FB04W03.FB7QTB[FB04WSIX] == 0 /* no to size qtb*/
   && PG3REC.SY4IDDSC[FB04WSIX] == " ") /* no size description*/
    FB04W00.FB04WSIX = FB04W00.FB04WSIX - 1; /* previous bucket*/
  end
  ;
  FB04W00.FB04WRSB = FB04W00.FB04WSIX; /* save right scroll bound*/
end // end FB04150

// get first poss rta date
Function FB04160()
  set TA2REC empty;
  TA2REC.TA2GRGGN = FBXREC.FB8BUYDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2DYAOD = -90;
  TA2REC.TA2GRTYP = "G";
  ;
   /* ------------------------------------------------------------*/
   /* get the earliest possible rta date*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get date*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      FB04W00.FB04WFRD = TA2REC.TA2GRGGN; /* first poss rta dt*/
      FB04161(); /* get last poss rta date*/
      return; /* Return to previous process*/
    else
      ;
      if (TA2REC.TA2RTNCD < 888)
        converseLib.validationFailed(17); /* invalid date*/
        FB04M010.XXXMODID = "160";
             /* SET FB04M010.FB04MBMO CURSOR,BRIGHT;*/
        return; /* Return to previous process*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  ;
  FB04M010.XXXMODID = "160"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET DATE            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB04M010.XXXMODID; /* Program number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB04160

// get last poss rta date
Function FB04161()
  set TA2REC empty;
  TA2REC.TA2GRGGN = FBXREC.FB8BUYDT;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2DYAOD = 90;
  TA2REC.TA2GRTYP = "G";
  ;
   /* ------------------------------------------------------------*/
   /* get the earliest possible rta date*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get date*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      FB04W00.FB04WLRD = TA2REC.TA2GRGGN; /* last  poss rta dt*/
      return; /* Return to previous process*/
    else
      ;
      if (TA2REC.TA2RTNCD < 888)
        converseLib.validationFailed(17); /* invalid date*/
        FB04M010.XXXMODID = "161";
             /* SET FB04M010.FB04MBMO CURSOR,BRIGHT;*/
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  ;
  FB04M010.XXXMODID = "161"; /* Module identification*/
  ;
  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET DATE            ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB04M010.XXXMODID; /* Program number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FB04161

// format and display map
Function FB04200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  FB04M010.XXXCURDT = VGVar.currentShortGregorianDate;
  ;
  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    FBWREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end
  ;
  if (FB04W00.FB04WMCS == "Y") /* map needs to be formatted*/
    FB04210(); /* format the map*/
  end
  ;
  if (FBWREC.XXXMSGNO != 0)
                                   /* error or informational message*/
    ;
    if (FBWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FBWREC.XXXMSGNO);
    end /* move to map*/
    set FB04M010 alarm; /* indicate sound alarm*/
    ;
  end
  ;
  converse FB04M010 ;
   /* ----------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  FBWREC.XXXMSGNO = 0; /* clear message number*/
  COMMAREA.CATOAP = FB04M010.CATOAP; /* xfer to application*/
  COMMAREA.CAITEM = FB04M010.CAITEM; /* xfer to appl data*/
end // end FB04200

// format screen
Function FB04210()
  FB04M010.SY1SSTNM = PG2REC.SY1SSTNM;
  FB04M010.SY2CLRAB = PG2REC.SY2CLRAB;
  FB04M010.XQACD = FB04W02.XQACD;
  FB04M010.PC2INSEG = FB04W02.PC2INSEG;
  FB04M010.XPGCD = FB04W02.XPGCD;
  FB04M010.XUMCD = FB04W02.XUMCD;
  FB04W00.FB04WDT2 = FB04W02.FB7RTADT;
  FB04W00.FB04WYY1 = FB04W00.FB04WYY2;
  FB04W00.FB04WMM1 = FB04W00.FB04WMM2;
  FB04W00.FB04WDD1 = FB04W00.FB04WDD2;
  FB04M010.FBXFRMDT = FB04W00.FB04WDT1;
  FB04M010.FB04MFCX = FB04W02.PC2CUXID;
  FB04M010.OP1CUOID = FB04W02.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB04M010.OP1NORID = FB04W02.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB04M010.OP1PARTN = FB04W02.OP1PARTN; /* OP-PART-CHAR*/
  FB04M010.FB04MFFY = FB04W02.FY1FCTYC;
  FB04M010.FBXTODT = FB04W01.FBXTODT;
  FB04M010.FB04MTCX = FB04W02.PC2CUXID;
  FB04M010.FB04MTFY = FB04W02.FY1FCTYC;
  FB04M010.FB04MADT = FB04W01.FB04MADT;
  FB04M010.XCTCD = FB04W02.XCTCD;
  ;
  if (FB04W02.OP1CUOID == 0
   && FB04W02.OP1NORID == 0)
    set FB04M010.OP1CUOID skip, invisible;
    set FB04M010.OP1NORID skip, invisible;
    set FB04M010.OP1PARTN skip, invisible;
    set FB04M010.FB04MDOT skip, invisible;
  end
  ;
  FB04W00.FB04WMIX = 1;
  FB04W00.FB04WMI2 = 11;
  FB04W00.FB04WSIX = FB04W00.FB04WSCL; /* start column*/
  ;
  while (FB04W00.FB04WMIX < 11)
    FB04M010.SY4IDDSC[FB04WMIX] = PG3REC.SY4IDDSC[FB04WSIX];
    FB04M010.FB04MADJ[FB04WMIX] = FB04W01.FB04MADJ[FB04WSIX];
    FB04W01.FB04MADJ[FB04WSIX] = 0;
    FB04M010.FB7QTB[FB04WMIX] = FB04W02.FB7QTB[FB04WSIX];
    FB04M010.FB7QTB[FB04WMI2] = FB04W03.FB7QTB[FB04WSIX];
    ;
    if (PG3REC.SY4IDDSC[FB04WSIX] == " ")
      set FB04M010.FB04MADJ[FB04WMIX] skip, invisible;
    end
    ;
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1;
    FB04W00.FB04WMI2 = FB04W00.FB04WMI2 + 1;
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1;
  end
  ;
  if (FB04M010.FBXTODT == 0)
    converseLib.validationFailed(8);
    FB04M010.XXXMODID = "210";
    set FB04M010.FBXTODT cursor, bold;
    set FB04M010.FB04MADT skip;
    FB04W00.FB04WMIX = 1;
    ;
    while (FB04W00.FB04WMIX < 11)
      set FB04M010.FB04MADJ[FB04WMIX] skip;
      FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1;
    end
    ;
  else
    ;
    if (FB04M010.FB04MADT == 0)
      converseLib.validationFailed(8);
      FB04M010.XXXMODID = "210";
      set FB04M010.FB04MADT cursor, bold;
    else
      set FB04M010.FB04MADJ[1] cursor;
    end
    ;
  end
  ;
  FB04W00.FB04WSIX = 1; /* first size*/
  FB04M010.FB04MFQT = 0;
  FB04M010.FB04MTQT = 0;
  ;
  while (FB04W00.FB04WSIX < 41)
    FB04M010.FB04MFQT = FB04M010.FB04MFQT + FB04W02.FB7QTB[FB04WSIX];
    FB04M010.FB04MTQT = FB04M010.FB04MTQT + FB04W03.FB7QTB[FB04WSIX];
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1;
  end
  ;
end // end FB04210

// check attention identifier
Function FB04300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (FB04M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FBXREC.SY1STNBR[1] = FB04M010.SY1STNBR; /* style number*/
      FBXREC.SY2CLRID[1] = FB04M010.SY2CLRID; /* color code*/
      FBXREC.PC2CUXID = FB04M010.FB04MFCX; /* cust xref*/
      FBXREC.OP1CUOID = FB04M010.OP1CUOID; /* OP-CUST-ORD-ID*/
      FBXREC.OP1NORID = FB04M010.OP1NORID; /* OP-NIKE-ORD-ID*/
      FBXREC.OP1PARTN = FB04M010.OP1PARTN; /* OP-PART-CHAR*/
      FBXREC.FBXFCTY1 = FB04M010.FB04MFFY; /* factory*/
      FB04W00.FB04WDT1 = FB04M010.FBXFRMDT; /* mmddyy*/
      FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
      FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
      FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
      FBXREC.FBXFRMDT = FB04W00.FB04WDT2; /* from rta date yymmdd*/
      /* MOVE FB04M010.FBXFRMDT TO FBXREC.FBXFRMDT;   from rta dt*/
      FB04W00.FB04WDT1 = FB04M010.FBXTODT; /* mmddyy*/
      FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
      FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
      FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
      FBXREC.FBXTODT = FB04W00.FB04WDT2; /* to rta date yymmdd*/
      /* MOVE FB04M010.FBXTODT TO FBXREC.FBXTODT;     to rta date*/
      FBXREC.XCTCD = FB04M010.XCTCD; /* country code*/
      FBXREC.XDMCD[1] = FB04M010.XDMCD; /* dimension code*/
      FBWREC.FBWFILL = FBXREC.FBXGROUP;
      XSFBS01(); /* Exit to another application*/
      FB04M010.XXXMODID = "300"; /* Process name*/
      set FB04M010.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/
    else
      converseLib.validationFailed(36); /* only enter with fastpath*/
      FB04M010.XXXMODID = "300"; /* Process name*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1  /* help*/
   || converseVar.eventKey is pf3  /* buy menu*/
   || converseVar.eventKey is pf4  /* master menu*/
   || converseVar.eventKey is pf12 /* rta maint - country*/
   || converseVar.eventKey is pf13 /* rta prod maint*/
   || converseVar.eventKey is pa2) /* reset screen*/
    ;
    if (converseVar.eventKey is pa2) /* reset screen*/
      COMMAREA.CATOAP = "FB04"; /* display the blank map*/
    end
    ;
    if (converseVar.eventKey is pf1) /* help*/
      COMMAREA.CAITEM = "FB04M010"; /* for help*/
    end
    ;
    if (converseVar.eventKey is pf3) /* buy menu*/
      COMMAREA.CATOAP = "FB0F";
    end
    ;
    if (converseVar.eventKey is pf12) /* rta maint- country*/
      COMMAREA.CATOAP = "FB03";
    end
    ;
    if (converseVar.eventKey is pf13) /* rta prod maint*/
      COMMAREA.CATOAP = "FB05";
    end
    ;
    FBXREC.SY1STNBR[1] = FB04M010.SY1STNBR; /* style number*/
    FBXREC.SY2CLRID[1] = FB04M010.SY2CLRID; /* color code*/
    FBXREC.PC2CUXID = FB04M010.FB04MFCX; /* cust xref*/
    FBXREC.OP1CUOID = FB04M010.OP1CUOID; /* OP-CUST-ORD-ID*/
    FBXREC.OP1NORID = FB04M010.OP1NORID; /* OP-NIKE-ORD-ID*/
    FBXREC.OP1PARTN = FB04M010.OP1PARTN; /* OP-PART-CHAR*/
    FBXREC.FBXFCTY1 = FB04M010.FB04MFFY; /* factory*/
    FB04W00.FB04WDT1 = FB04M010.FBXFRMDT; /* mmddyy*/
    FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
    FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
    FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
    FBXREC.FBXFRMDT = FB04W00.FB04WDT2; /* from rta date yymmdd*/
    FB04W00.FB04WDT1 = FB04M010.FBXTODT; /* mmddyy*/
    FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
    FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
    FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
    FBXREC.FBXTODT = FB04W00.FB04WDT2; /* to rta date yymmdd*/
    FBXREC.XCTCD = FB04M010.XCTCD; /* country code*/
    FBXREC.XDMCD[1] = FB04M010.XDMCD; /* dimension code*/
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    XSFBS01(); /* transfer to another application*/
    FB04W00.FB04WRDS = "N"; /* dont request data*/
    FB04W00.FB04WMCS = "N"; /* dont format map*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf10 /* scroll left*/
   && converseVar.eventKey not pf11 /* scroll right*/
   && converseVar.eventKey not pa1  
   && converseVar.eventKey not pa3)
    converseLib.validationFailed(3); /* invalid key*/
    FB04M010.XXXMODID = "300"; /* program name*/
    exit stack;
  end
  ;
  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
     /* reset map*/
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf10 /* scroll left*/
   || converseVar.eventKey is pf11) /* scroll right*/
    ;
    if (FB04W00.FB04WSAS == "N") /* scrolling not allowed (bad product)*/
      converseLib.validationFailed(290); /* cant scroll now*/
      FB04M010.XXXMODID = "300"; /* program name*/
      exit stack;
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf10 /* scroll left*/
   && FB04W00.FB04WSCL <= FB04W00.FB04WLSB) /* already at left bound*/
    FB04M010.XXXMODID = "300"; /* process number*/
    converseLib.validationFailed(23); /* cant scroll left*/
    exit stack; /* display the map*/
  end
  ;
  if (converseVar.eventKey is pf11 /* scroll right*/
   && FB04W00.FB04WECL >= FB04W00.FB04WRSB) /* already at right bound*/
    FB04M010.XXXMODID = "300"; /* process number*/
    converseLib.validationFailed(24); /* cant scroll right*/
    exit stack; /* display the map*/
  end
   /* ************/
end // end FB04300

// reset highlighted fields
Function FB04400()
  set FB04M010.SY1STNBR initialAttributes; /* style number*/
  set FB04M010.SY2CLRID initialAttributes; /* color code*/
  set FB04M010.XDMCD initialAttributes; /* dimension code*/
  set FB04M010.XCTCD initialAttributes; /* country code*/
  set FB04M010.FBXFRMDT initialAttributes; /* from rta date*/
  set FB04M010.FBXTODT initialAttributes; /* to rta date*/
  set FB04M010.FB04MADT initialAttributes; /* adjust total*/
  set FB04M010.FB04MCAT initialAttributes; /* calculated adjust total*/
  set FB04M010.FB04MFCX initialAttributes; /* from cust xref*/
  set FB04M010.FB04MTCX initialAttributes; /* to cust xref*/
  set FB04M010.FB04MFFY initialAttributes; /* from factory*/
  set FB04M010.FB04MTFY initialAttributes; /* to factory*/
  set FB04M010.FB04MFQT initialAttributes; /* from total qty*/
  set FB04M010.OP1CUOID initialAttributes; /* order nbr*/
  set FB04M010.OP1NORID initialAttributes; /* nike order id*/
  set FB04M010.OP1PARTN initialAttributes; /* order part char*/
  set FB04M010.FB04MDOT initialAttributes; /* dot*/
  FB04W00.FB04WMIX = 1; /* first column on screen*/
  ;
  while (FB04W00.FB04WMIX < 11) /* for each column on screen*/
    set FB04M010.FB04MADJ[FB04WMIX] initialAttributes;
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* scroll to the left*/
   && converseVar.eventKey not pf11) /* scroll to the right*/
    FB04M010.XXXMODID = "400"; /* Module identification*/
    converseLib.validationFailed(19); /* Indicate pf key not valid*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FB04M010.XCTCD == "?") /* country list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "               COUNTRY CODE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FB04M010.XCTCD = FB04W01.XCTCD;
    else
      FB04M010.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
    ;
    set FB04M010.XCTCD cursor; /* Establish cursor position*/
    /* ------------------------------------------------------------*/
     /* Indicate that the requested lists have been displayed and*/
     /* that ENTER must be pressed to process any changes.*/
    /* ------------------------------------------------------------*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    FB04M010.XXXMODID = "400"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
  ;
end // end FB04400

// verify the entered data
Function FB04500()
   /* ------------------------------------------------------------*/
    /* protect enterable fields until date edit ok*/
   /* ------------------------------------------------------------*/
  ;
  set FB04M010.FB04MADT skip; /* adjust total*/
  FB04W00.FB04WMIX = 1; /* map index*/
  ;
  while (FB04W00.FB04WMIX < 11) /* for each bucket*/
    set FB04M010.FB04MADJ[FB04WMIX] skip; /* size adjustments*/
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next bucket*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* Check if key changed*/
   /* ------------------------------------------------------------*/
  ;
  if (FB04M010.FBXTODT != FB04W01.FBXTODT) /* to rta date*/
    FB04W00.FB04WKCS = "Y"; /* key changed*/
  else
    FB04W00.FB04WKCS = "N"; /* key didnt change*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* save the adjustments on the screen in the*/
   /* appropriate size buckets in display working storage*/
   /* ------------------------------------------------------------*/
  ;
  FB04W00.FB04WMIX = 1; /* first screen column*/
  FB04W00.FB04WSIX = FB04W00.FB04WSCL; /* starting size index*/
  ;
  while (FB04W00.FB04WMIX < 11) /* for each adjustment on the screen*/
    FB04W01.FB04MADJ[FB04WSIX] = FB04M010.FB04MADJ[FB04WMIX];
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next screen column*/
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size index*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* Check if data changed*/
   /* ------------------------------------------------------------*/
  ;
  FB04W00.FB04WDCS = "N"; /* data didnt change*/
  ;
  if (FB04M010.FB04MADT != FB04W01.FB04MADT) /* adjust total changed*/
    FB04W00.FB04WDCS = "Y"; /* data changed*/
  end
  ;
  FB04W00.FB04WMIX = 1; /* first screen column*/
  FB04W00.FB04WSIX = FB04W00.FB04WSCL; /* starting size index*/
  ;
  while (FB04W00.FB04WMIX < 11 /* for each screen column*/
   && FB04W00.FB04WDCS != "Y") /* and data not changed*/
    ;
    if (FB04M010.FB04MADJ[FB04WMIX] != FB04W01.FB04MADJ[FB04WSIX])
      FB04W00.FB04WDCS = "Y"; /* data changed*/
    end
    ;
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size index*/
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next column*/
  end
  ;
   /* ------------------------------------------------------------*/
    /* edit fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FB04W00.FB04WKCS == "Y" /* key changed*/
   && FB04W00.FB04WDCS == "Y") /* data changed*/
    FB04M010.XXXMODID = "500"; /* process number*/
    converseLib.validationFailed(130); /* cant change key and data*/
  end
  ;
  if (FB04M010.FBXTODT == 0) /* to rta date not entered*/
    FB04M010.XXXMODID = "500"; /* process number*/
    converseLib.validationFailed(8); /* required field*/
    set FB04M010.FBXTODT cursor, bold; /* highlight*/
  else
    FB04W00.FB04WBDT = FB04M010.FBXTODT; /* break out mmddyy*/
    ;
    if (FB04W00.FB04WBMM < 1 /* to rta mo lt 1*/
     || FB04W00.FB04WBMM > 12) /* to rta mo gt than 12*/
      FB04M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(151); /* date out of range*/
      set FB04M010.FBXTODT cursor, bold; /* highlight*/
    end
    ;
    if (FB04W00.FB04WBDD < 1 /* to rta day lt 1*/
     || FB04W00.FB04WBDD > 31) /* to rta day gt 31*/
      FB04M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(151); /* date out of range*/
      set FB04M010.FBXTODT cursor, bold; /* highlight*/
    end
    ;
    FB04W00.FB04WMM2 = FB04W00.FB04WBMM;
    FB04W00.FB04WDD2 = FB04W00.FB04WBDD;
    FB04W00.FB04WYY2 = FB04W00.FB04WBYY;
    /* -------------------- y2k out begin ---------------*/
    /* MOVE 19 TO FB04W00.FB04WCC2;*/
    /* -------------------- y2k out end   ---------------*/
    /* -------------------- y2k in begin  ---------------*/
    ;
    if (FB04W00.FB04WYY2 > 60) /* Century windowing*/
      FB04W00.FB04WCC2 = 19;
    else
      FB04W00.FB04WCC2 = 20;
    end
    /* -------------------- y2k in end    ---------------*/
    /* Validate rta date*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = FB04W00.FB04WDTC;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (TA2RTNCD != "0000")
      converseLib.validationFailed(151);
      FBWREC.XXXMSGNO = 151;
      set FB04M010.FBXTODT cursor, bold;
    end
    ;
    if (FB04W00.FB04WDTC < FB04W00.FB04WFRD
     || FB04W00.FB04WDTC > FB04W00.FB04WLRD)
      converseLib.validationFailed(343); /* date not within 90 days*/
      FB04M010.XXXMODID = "500"; /* process number*/
      set FB04M010.FBXTODT cursor, bold; /* highlight*/
    end
    ;
    if (FB04M010.FBXFRMDT == FB04M010.FBXTODT) /* from and to dates are =*/
      FB04M010.XXXMODID = "500"; /* process number*/
      converseLib.validationFailed(253); /* error dates equal*/
      set FB04M010.FBXFRMDT skip, bold; /* highlight*/
      set FB04M010.FBXTODT cursor, bold; /* highlight*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 151 /* good to rta date*/
   && converseVar.validationMsgNum != 253 
   && converseVar.validationMsgNum != 343 
   && converseVar.validationMsgNum != 8) 
    FB04W01.FBXTODT = FB04M010.FBXTODT; /* save it*/
    set FB04M010.FB04MADT normal; /* adjust total*/
    FB04W00.FB04WMIX = 1; /* map index*/
    ;
    while (FB04W00.FB04WMIX < 11) /* for each bucket*/
      set FB04M010.FB04MADJ[FB04WMIX] normal; /* size adjustments*/
      FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next bucket*/
    end
  else
    FB04W00.FB04WMCS = "N"; /* dont format map*/
    exit stack;
  end
  ;
  if (FB04W00.FB04WKCS == "Y" /* key changed*/
   && FB04W00.FB04WDCS == "N" /* data didnt change*/
   && converseVar.validationMsgNum == 0) /* good 'to' rta date entered*/
    return; /* return to calling process*/
  end
  ;
  if (FB04M010.FB04MADT == 0)
                                   /* total ajustment not entered*/
    FB04M010.XXXMODID = "500"; /* process number*/
    converseLib.validationFailed(8); /* required field*/
    set FB04M010.FB04MADT cursor, bold; /* highlight*/
  end
  ;
  if (converseVar.validationMsgNum != 8)
                                   /* all required fields entered*/
    FB04530(); /* edit adjustments*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* errors encountered*/
    FB04W00.FB04WMCS = "N"; /* dont format map*/
    exit stack;
  end
  ;
end // end FB04500

// edit adjustments
Function FB04530()
  FB04W00.FB04WMIX = 10; /* last adjustment column*/
  ;
  while (FB04W00.FB04WMIX > 0) /* for each screen column*/
    FB04W00.FB04WWK = FB04M010.FB04MADJ[FB04WMIX] % 6;
    ;
    if (FB04W00.FB04WWK != 0) /* adj not evenly divisible by 6*/
      FB04M010.XXXMODID = "530"; /* process number*/
      converseLib.validationFailed(326); /* must be 1/2 doz multiple*/
      set FB04M010.FB04MADJ[FB04WMIX] cursor, bold;
    end
    ;
    FB04W00.FB04WWK = FB04M010.FB04MADJ[FB04WMIX];
    FB04W00.FB04WWK = FB04M010.FB7QTB[FB04WMIX] - FB04W00.FB04WWK;
    ;
    if (FB04W00.FB04WWK < 0)
      FB04M010.XXXMODID = "530"; /* process number*/
      converseLib.validationFailed(285); /* not enough qty in 'from'*/
      set FB04M010.FB04MADJ[FB04WMIX] cursor, bold;
    end
    ;
    FB04W00.FB04WMIX = FB04W00.FB04WMIX - 1; /* previous adjustment*/
  end
  ;
  if (converseVar.eventKey is enter) /* enter is update request*/
    FB04W00.FB04WSIX = 1; /* first column*/
    FB04W00.FB04WMIX = 1; /* first screen column*/
    FB04W00.FB04WWK = 0; /* initialise work area*/
    ;
    while (FB04W00.FB04WSIX < 41) /* for each column*/
      FB04W00.FB04WWK = FB04W00.FB04WWK + FB04W01.FB04MADJ[FB04WSIX];
      FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next column*/
    end
    ;
    /* WHILE FB04W00.FB04WMIX LT 11;            /* for each column*/
     /* FB04W00.FB04WWK = FB04W00.FB04WWK + FB04W01.FB04MADJ(FB04WMIX);*/
     /* FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next column*/
    /* END;*/
    ;
    FB04M010.FB04MCAT = FB04W00.FB04WWK; /* calculated total adj*/
    ;
    if (FB04M010.FB04MADT != FB04W00.FB04WWK) /* sum of adj not = total*/
      FB04M010.XXXMODID = "530"; /* process number*/
      converseLib.validationFailed(264); /* sum of adj not = total*/
      set FB04M010.FB04MADT cursor, bold; /* highlight*/
      set FB04M010.FB04MCAT skip, bold; /* highlight*/
    else /* ;  adjustments crossfoot*/
      ;
      if (FB04W00.FB04WWK < FB9REC.FB9BTQTY) /* total less than tolerance*/
        FB04W00.FB04WWK = FB04W00.FB04WWK + FB04M010.FB04MTQT;
        if (FB04W00.FB04WWK < FB9REC.FB9BTQTY) /* total less than tolerance*/
          FB04M010.XXXMODID = "530"; /* process number*/
          converseLib.validationFailed(363); /* less than tolerance*/
          set FB04M010.FB04MCAT bold; /* highlight*/
        end
      end
      ;
      FB04W00.FB04WWK = FB04M010.FB04MFQT - FB04W00.FB04WWK;
      ;
      if (FB04W00.FB04WWK < FB9REC.FB9BTQTY /* total less than tolerance*/
       && FB04W00.FB04WWK > 0)              /* but not deleting*/
        FB04M010.XXXMODID = "530"; /* process number*/
        converseLib.validationFailed(364); /* less than tolerance*/
        set FB04M010.FB04MFQT bold; /* highlight*/
      end
      ;
    end
    ;
    ;
  end
  ;
  ;
end // end FB04530

// process valid input request
Function FB04600()
  if (FB04W00.FB04WKCS == "Y") /* key was changed*/
    set FB04W00 empty; /* initialise*/
    set FB04W01 empty; /* initialise disp ws*/
    set FB04W02 empty; /* initialise from data*/
    set FB04W03 empty; /* initialise to data*/
    FB04M010.FB04MCAT = 0; /* calculated adjustment total*/
    FB04W00.FB04WRDS = "Y"; /* request data*/
    FB04W00.FB04WRDF = "N"; /* row not deleted*/
    return; /* continue*/
  end
  ;
  FB04W01.FB04MADT = FB04M010.FB04MADT; /* save tot adjustments*/
  FB04W01.FBXTODT = FB04M010.FBXTODT; /* to rta date*/
  FB04W01.FB04MTFY = FB04M010.FB04MTFY; /* to factory*/
  FB04W01.FB04MTCX = FB04M010.FB04MTCX; /* to cust xref*/
  ;
   /* ------------------------------------------------------------*/
   /* if scrolling save the adjustments on the screen in the*/
   /* appropriate size buckets in display working storage*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10 /* scroll to the left*/
   || converseVar.eventKey is pf11) /* scroll to the right*/
    FB04W00.FB04WMIX = 1; /* first screen column*/
    FB04W00.FB04WSIX = FB04W00.FB04WSCL; /* starting size index*/
    ;
    while (FB04W00.FB04WMIX < 11) /* for each adjustment on the screen*/
      FB04W01.FB04MADJ[FB04WSIX] = FB04M010.FB04MADJ[FB04WMIX];
      FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next screen column*/
      FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size index*/
    end
    ;
    FB04W00.FB04WSIX = 1;
    FB04M010.FB04MCAT = 0;
    ;
    while (FB04W00.FB04WSIX < 41)
      FB04M010.FB04MCAT = FB04M010.FB04MCAT + FB04W01.FB04MADJ[FB04WSIX];
      FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if scrolling set up the appropriate left and right column*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* scroll to the left*/
    FB04W00.FB04WSCL = FB04W00.FB04WSCL - FB04M010.FB04MSCR;
    ;
    if (FB04W00.FB04WSCL < FB04W00.FB04WLSB)
                                   /* start col less left bound*/
      FB04W00.FB04WSCL = FB04W00.FB04WLSB; /* start col = left bound*/
    end
    ;
    FB04W00.FB04WECL = FB04W00.FB04WSCL + 9; /* end column*/
    FB04M010.XXXMODID = "600"; /* process number*/
    FBWREC.XXXMSGNO = 15; /* info msg scroll ok*/
    FB04W00.FB04WMCS = "Y"; /* format map*/
    return;
                                   /* return to calling process*/
  end
  ;
  if (converseVar.eventKey is pf11) /* scroll to the right*/
    FB04W00.FB04WECL = FB04W00.FB04WECL + FB04M010.FB04MSCR;
    ;
    if (FB04W00.FB04WECL > FB04W00.FB04WRSB) /* end col > right bound*/
      FB04W00.FB04WECL = FB04W00.FB04WRSB; /* end col = right bound*/
    end
    ;
    FB04W00.FB04WSCL = FB04W00.FB04WECL - 9; /* start column*/
    FB04M010.XXXMODID = "600"; /* process number*/
    FBWREC.XXXMSGNO = 14; /* info msg scroll ok*/
    FB04W00.FB04WMCS = "Y"; /* format map*/
    return;
                                   /* return to calling process*/
  end
  ;
  FB04W00.FB04WWK = 0;
  FB04W00.FB04WSIX = 1;
  ;
  while (FB04W00.FB04WSIX < 41)
    FB04W00.FB04WWK = FB04W00.FB04WWK + FB04W01.FB04MADJ[FB04WSIX];
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1;
  end
  ;
  if (FB04W00.FB04WWK == 0
   && FB04W01.FB04MADT == 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* this is now the update pass.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  set FB7REC empty; /* initialise*/
  FB7REC.FB7GROUP = FB04W02.FB7GROUP; /* from record*/
  FB7REC.XWHCD = FBXREC.XWHCD1;
  FB04W00.FB04WSIX = 1; /* first size*/
  FB04W00.FB04WUQT = 0; /* updated quantity*/
  ;
  while (FB04W00.FB04WSIX < 41) /* for each size*/
    FB04W00.FB04WWK = FB7REC.FB7QTB[FB04WSIX]; /* move to wk area*/
    FB04W00.FB04WWK = FB04W00.FB04WWK - FB04W01.FB04MADJ[FB04WSIX];
    FB04W00.FB04WUQT = FB04W00.FB04WUQT + FB04W00.FB04WWK;
    FB7REC.FB7QTB[FB04WSIX] = FB04W00.FB04WWK; /* back to bucket*/
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size*/
  end
  ;
  if (FB04W00.FB04WUQT != 0) /* still qty in from*/
    FB04610(); /* update vmfbuy01*/
  else
    FB04630();
                                   /* delete from vmfbuy01*/
  end
  ;
  if (FB04W03.ZZZSDT != 0) /* a to rta row exists*/
    FB7REC.FB7GROUP = FB04W03.FB7GROUP;
  end
  ;
  FB04W00.FB04WSIX = 1; /* first size*/
  ;
  while (FB04W00.FB04WSIX < 41) /* for each size*/
    ;
    if (FB04W03.ZZZSDT != 0) /* a to rta row exists*/
      FB04W00.FB04WWK = FB04W01.FB04MADJ[FB04WSIX];
      FB7REC.FB7QTB[FB04WSIX] = FB7REC.FB7QTB[FB04WSIX] + FB04W00.FB04WWK;
    else
      FB7REC.FB7QTB[FB04WSIX] = FB04W01.FB04MADJ[FB04WSIX];
    end
    ;
    FB04W00.FB04WSIX = FB04W00.FB04WSIX + 1; /* next size*/
  end
  ;
  FB7REC.FY1FCTYC = FB04M010.FB04MTFY;
  FB7REC.PC2CUXID = FB04M010.FB04MTCX;
  FB7REC.OP1CUOID = FB04M010.OP1CUOID; /* OP-CUST-ORD-ID*/
  FB7REC.OP1NORID = FB04M010.OP1NORID; /* OP-NIKE-ORD-ID*/
  FB7REC.OP1PARTN = FB04M010.OP1PARTN; /* OP-PART-CHAR*/
  FB04W00.FB04WDT1 = FB04M010.FBXTODT; /* mmddyy*/
  FB04W00.FB04WMM2 = FB04W00.FB04WMM1;
  FB04W00.FB04WDD2 = FB04W00.FB04WDD1;
  FB04W00.FB04WYY2 = FB04W00.FB04WYY1;
   /* --------------------- y2k out begin ------------------*/
   /* FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2;/* yymmdd*/
   /* --------------------- y2k out end   ------------------*/
   /* --------------------- y2k in begin  ------------------*/
  if (FB04W00.FB04WYY2 > 60)
    FB7REC.FB7RTADT = 19000000 + FB04W00.FB04WDT2; /* yymmdd*/
  else
    FB7REC.FB7RTADT = 20000000 + FB04W00.FB04WDT2; /* yymmdd*/
  end
   /* --------------------- y2k in end    ------------------*/
  ;
  if (FB04W03.ZZZSDT == 0) /* a new 'to' rta row*/
    FB04620(); /* add vmfbuy01*/
  else
    FB04610(); /* update vmfbuy01*/
  end
  ;
  set FB04W01 empty; /* initialise disp ws*/
  set FB04W02 empty; /* initialise from data*/
  set FB04W03 empty; /* initialise to data*/
  FB04M010.FB04MCAT = 0; /* calculated adjustment total*/
  FB04W00.FB04WRDS = "Y"; /* request data*/
  FB04M010.XXXMODID = "600"; /* process number*/
  FBWREC.XXXMSGNO = 32; /* info msg update ok*/
end // end FB04600

// update DFBUY.VMFBUY01 row
Function FB04610()
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3490" ("U2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return, msg updated since last. If found,*/
   /* process.  If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB04M010.XXXMODID = "610"; /* process number*/
      converseLib.validationFailed(20); /* updated since displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back any changes*/
      exit stack; /* display map*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB04610"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE ROW              ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB04M010.XXXMODID = "610";
  exit stack;
  ;
  ;
  ;
end // end FB04610

// add DFBUY.VMFBUY01 row
Function FB04620()
  FB7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FB7REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FB7REC.ZZZCHGCT = 0;
  ;
  try
    call "IO3490" ("A ", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return, msg updated since last. If found,*/
   /* process.  If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* norman return code*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB04620"; /* Process name*/
  TA1REC.TA1LOC = "ADD ROW                 ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB04M010.XXXMODID = "620";
  exit stack;
  ;
  ;
  ;
end // end FB04620

// delete VMFBUY01 row
Function FB04630()
  ;
  try
    call "IO3490" ("D2", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If row not found return, msg updated since last. If found,*/
   /* process.  If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* norman return code*/
      FB04W00.FB04WRDF = "Y"; /* row deleted*/
      return; /* return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FB04M010.XXXMODID = "630"; /* process number*/
      FBWREC.XXXMSGNO = 21; /* deleted since last displayed*/
      FB04W00.FB04WRDF = "Y"; /* row deleted*/
      return; /* return to calling process*/
    end
    ;
  end
  ;
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(47); /* In use*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    converseLib.clearScreen();
    
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB04630"; /* Process name*/
  TA1REC.TA1LOC = "ADD ROW                 ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  FB04M010.XXXMODID = "630";
  exit stack;
  ;
  ;
  ;
end // end FB04630

// reset screen
Function FB04S01()
  FB04W00.FB04WMIX = 1; /* first screen column*/
  ;
  while (FB04W00.FB04WMIX < 11) /* end of first row*/
    set FB04M010.FB7QTB[FB04WMIX] skip, invisible;
    set FB04M010.FB04MADJ[FB04WMIX] skip, invisible;
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next column*/
  end
  ;
  while (FB04W00.FB04WMIX < 21) /* end of second row*/
    set FB04M010.FB7QTB[FB04WMIX] skip, invisible;
    FB04W00.FB04WMIX = FB04W00.FB04WMIX + 1; /* next column*/
  end
  ;
  FB04M010.FB04MFQT = 0; /* from total*/
  FB04M010.FB04MTQT = 0; /* to total*/
  FB04M010.FB04MADT = 0; /* adjust total*/
end // end FB04S01

Record FB04W00 type basicRecord
  10 FB04WRDS FB04WRDS ; 
  10 FB04WMCS FB04WMCS ; 
  10 FB04WSAS FB04WSAS ; 
  10 FB04WKCS FB04WKCS ; 
  10 FB04WDCS FB04WDCS ; 
  10 FB04WLSB FB04WLSB ; 
  10 FB04WRSB FB04WRSB ; 
  10 FB04WSCL FB04WSCL ; 
  10 FB04WECL FB04WECL ; 
  10 FB04WSIX FB04WSIX ; 
  10 FB04WMIX FB04WMIX ; 
  10 FB04WMI2 FB04WMI2 ; 
  10 FB04WFRD FB04WFRD ; 
  10 FB04WLRD FB04WLRD ; 
  10 FB04WDT1 FB04WDT1 ; 
    15 FB04WMM1 FB04WMM1 ; 
    15 FB04WDD1 FB04WDD1 ; 
    15 FB04WYY1 FB04WYY1 ; 
  10 FB04WDTC FB04WDTC ; 
    15 FB04WCC2 FB04WCC2 ; 
    15 FB04WDT2 FB04WDT2 ; 
      20 FB04WYY2 FB04WYY2 ; 
      20 FB04WMM2 FB04WMM2 ; 
      20 FB04WDD2 FB04WDD2 ; 
  10 FB04WBDT FB04WBDT ; 
    15 FB04WBMM FB04WBMM ; 
    15 FB04WBDD FB04WBDD ; 
    15 FB04WBYY FB04WBYY ; 
  10 FB04WWK FB04WWK ; 
  10 FB04WUQT FB04WUQT ; 
  10 FB04WRDF FB04WRDF ; 
end // end FB04W00

Record FB04W01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XCTCD XCTCD ; 
  10 FBXFRMDT FBXFRMDT ; 
  10 FBXTODT FBXTODT ; 
  10 FB04MFCX FB04MFCX ; 
  10 FB04MTCX FB04MTCX ; 
  10 FB04MFFY FB04MFFY ; 
  10 FB04MTFY FB04MTFY ; 
  10 FB04MADT FB04MADT ; 
  10 FB04MADJ FB04MADJ [40] ; 
end // end FB04W01

//*** RECORD=FB04W02 ****
// this is a direct copy of fb7rec for use in fb04 as the
// 'from' rta date record
// ***********************
Record FB04W02 type basicRecord
  5 FB7GROUP FB7GROUP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 XDVCD XDVCD ; 
    10 XCTCD XCTCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB04W02

//*** RECORD=FB04W03 ****
// this is a copy of fb7rec for use in fb04 to store the 'to'
// rta date record
// ***********************
Record FB04W03 type basicRecord
  5 FB7GROUP FB7GROUP ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FY2MFGPC FY2MFGPC ; 
    10 XDVCD XDVCD ; 
    10 XCTCD XCTCD ; 
    10 FB8BUYDT FB8BUYDT ; 
    10 FBDBTCD FBDBTCD ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 XWHCD XWHCD ; 
    10 FB7RTADT FB7RTADT ; 
    10 FB7RTAPC FB7RTAPC ; 
    10 FB7BUYST FB7BUYST ; 
    10 FB8FTQTB FB8FTQTB ; 
    10 FB7QTB FB7QTB [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FB04W03

// size adjustment
DataItem FB04MADJ num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// screen adjustment total
DataItem FB04MADT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// from cust xref
DataItem FB04MFCX char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from factory
DataItem FB04MFFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to cust xref
DataItem FB04MTCX char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to factory
DataItem FB04MTFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// breakout day
DataItem FB04WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout date
DataItem FB04WBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout month
DataItem FB04WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout year
DataItem FB04WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd century
DataItem FB04WCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem FB04WDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mmddyy day
DataItem FB04WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd day
DataItem FB04WDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date mmddyy
DataItem FB04WDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date yymmdd
DataItem FB04WDT2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date ccyymmdd
DataItem FB04WDTC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen end column
DataItem FB04WECL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first possible rta date
DataItem FB04WFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem FB04WKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last possible rta date
DataItem FB04WLRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// left scroll bound
DataItem FB04WLSB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format map switch
DataItem FB04WMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// alternate map index
DataItem FB04WMI2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index
DataItem FB04WMIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy month
DataItem FB04WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd month
DataItem FB04WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row deleted flag
DataItem FB04WRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem FB04WRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// right scroll bound
DataItem FB04WRSB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// scroll allowed switch
DataItem FB04WSAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen start column
DataItem FB04WSCL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size index
DataItem FB04WSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity left in 'from' date
DataItem FB04WUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem FB04WWK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy year
DataItem FB04WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd year
DataItem FB04WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

