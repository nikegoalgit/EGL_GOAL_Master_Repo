package fb0u;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFB001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom4.XSFBS01;
import corpcom4.XSPG202;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpcom7.XXXUSER;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import fb.common.FB7REC;
import fb.common.FB9REC;
import fb.common.FBAREC;
import fb.common.FBFREC;
import fb.common.FBKREC;
import fb.common.FBKRTAFL;
import fb.common.FBMALAFL;
import fb.common.FBMREC;
import fb.common.FBWREC;
import fb.common.FBXREC;
import ff.common.FF00ENU;
import fy.common.FY1FCTYC;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA1TBLKE;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FB0U ****
// This program is part of the footwear buy system.
// It displays the scheduler user id.  The user enters a
// product line and category(category is optional) and presses
// the enter key.  The application displays a list of products
// assigned to the user for that product line and category.
// The user can select up to fourteen products from this list
// and go to the RTA percent maintenance screen.
// (NOTE: If the commarea already has product line and
// category, then the application will display a list of
// products assigned to the user for that product lin and
// category).
// 
// Products may only be selected from the current screen
// 
// The user has the option of submitting on-line JCl
// submission to print FB2511 'RTA merged quantity report'
// report by pressing PF14.  The user has the option of
// The user has the option of submitting on-line JCl
// submission to print FB1191 'RTA calculation/size detail'
// report by pressing PF18.  The user has the option of
// paging to a product by entering the product number. The
// screen will then display all products beginning with the
// entered product number.  The user may also page forward and
// backward through the list using PF keyd.
// 
// The user may exit to any allowed application via fast
// path or PF keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 11/09/89   wdishm   Created.
// 08/08/90   jalle1   Fixed popup window problems.
// 09/05/90   mgatre   change source of factory list to
//                     vmfbuy01 (s03,s04,s05,150)
// 10/18/90   jmclau   modify application to pass style, color
//                     dimension parms instead of the product
//                     line when requesting to print a report.
// 10/23/90   jmclau   modify application to submit jcl to run
//                     the rta merged qty report fb251d.
// 01/30/91   jalle1   fix error handling on dprodg.vsyclr01.
// 11/09/92   ldeluh   fix so not always submit production jcl.
// 07/21/93   ldeluh   Chg testrms to be testenc.
// 12/02/94   pmainw   Re-compile for table change (vfsctl01).
// 01/27/95   JALLE1   Fix FB2511 to print reports correctly.
// 12/03/97   rgilli   Y2K MODIFICATIONS MADE TO:
//                     FB0UM010: Remove zero supression
//                     FB0UW00:  Add ccyy item
//                     FB0U500:  Add century windowing
//                               change date calculation to
//                               include ccyy vs. yy.
// *********************
Program FB0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB0UW00 FB0UW00; // record
  FB0UW01 FB0UW01; // record
  FB0UW02 FB0UW02; // record
  FB7REC FB7REC; // record
  FB9REC FB9REC; // record
  FBAREC FBAREC; // record
  FBFREC FBFREC; // record
  FBKREC FBKREC; // record
  FBMREC FBMREC; // record
  FBWREC FBWREC; // record
  FBXREC FBXREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use XPLTBL; // table
  use FB0UT01; // table
  use FB0UT02; // table
  use FB0UT03 {deleteAfterUse = yes}; // table
  use FB0UT04 {deleteAfterUse = yes}; // table
  use FB0UM.FB0UM010, // form
  		FB0UM.XX0XM001,
  		FB0UM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFB001: XPFB001();
    goto FB0U001;
    FB0U001: FB0U001();
     /* ------------------------------------------------------------*/
     /* Flow to converse RTA maintanence product select*/
     /* ------------------------------------------------------------*/

    goto FB0U002; /* Converse RTA main prod select*/


    FB0U002: FB0U002();
    goto FB0U002;
  end // end main
end // end FB0U

// RTA main product selection
Function FB0U001()


   /* ---------------------------------------------------------*/
   /* If entry is  from the footwear buy system move the*/
   /* fill area in the FBWREC to the FBXREC*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FB0A"
   || COMMAREA.CAFROMAP == "FB0B"
   || COMMAREA.CAFROMAP == "FB0C"
   || COMMAREA.CAFROMAP == "FB0D"
   || COMMAREA.CAFROMAP == "FB0E"
   || COMMAREA.CAFROMAP == "FB0G"
   || COMMAREA.CAFROMAP == "FB0I"
   || COMMAREA.CAFROMAP == "FB0J"
   || COMMAREA.CAFROMAP == "FB0K"
   || COMMAREA.CAFROMAP == "FB0L"
   || COMMAREA.CAFROMAP == "FB0N"
   || COMMAREA.CAFROMAP == "FB0O"
   || COMMAREA.CAFROMAP == "FB0P"
   || COMMAREA.CAFRMSYS != "FB") /* NOT FROM FOOTWEAR*/
    set FBXREC empty;
    set FBWREC empty;
    FBWREC.FBWFILL = FBXREC.FBXGROUP;
  else
    FBXREC.FBXGROUP = FBWREC.FBWFILL;
  end


   /* ---------------------------------------------------------*/
   /* Initialize the work record and the map storage record.*/
   /* Set obtain data flag to yes.*/
   /* ---------------------------------------------------------*/

  set FB0UW00 empty; /* Working storage record*/
  set FB0UW01 empty; /* Map storage for map heading data*/
  set FB0UW02 empty;

  set FB0UM010 empty;

  set SQLCA empty;
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  FB0UW00.FB0UWTSL = 914; /* Temporary storage page length*/
  FB0UW00.FB0UWMAX = 14; /* Max lines per map page*/
  FB0UW00.FB0UWTSP = 1; /* Temp storage page request*/

   /* ---------------------------------------------------------*/
   /* If data has been passed in the FBXREC than load the*/
   /* data to the map and set request for data flag to yes.*/
   /* ---------------------------------------------------------*/

  FB0UW00.FB0UWRDF = "N"; /* Request for data flag*/

  if (FBXREC.CAUSERID != " ")
    FB0UW01.XXXUSER = FBXREC.CAUSERID;
  else
    FB0UW01.XXXUSER = COMMAREA.CAUSERID;
  end


  if (FBXREC.XPLCD != " ") /* Data has been passed*/
    FB0UW00.FB0UWRDF = "Y"; /* Request for data flag*/
    FB0UW01.XPLCD = FBXREC.XPLCD;
    FB0UW00.FB0UWBDT = FBXREC.FB8BUYDT;
    FB0UW01.FB0UWBYM = FB0UW00.FB0UWBYM;
    FB0UM010.XPLCD = FBXREC.XPLCD;
    if (FBXREC.XPCCD != " ")
      FB0UM010.XPCCD = FBXREC.XPCCD;
      FB0UW01.XPCCD = FBXREC.XPCCD;
    else
      set FB0UM010.XPCCD cursor, bold;
      converseLib.validationFailed(8); /* Required field*/
    end
  else
    FB0US12(); /* Get current buy date*/
    FB0UW00.FB0UWBDT = FB9REC.FB8BUYDT;
    FB0UW01.FB0UWBYM = FB0UW00.FB0UWBYM;
  end



end // end FB0U001

// Footwear products to buy
Function FB0U002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to disply*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  FB0U100(); /* Obtain data to display*/

  FB0U200(); /* Format and display the map*/

  FB0U300(); /* Check attention identifier*/

  FB0U400(); /* Reset fields to normal intensity*/

  FB0U500(); /* Verify the entered data*/

  FB0U600(); /* Process valid input request*/

end // end FB0U002

// Obtain data to display
Function FB0U100()


   /* ------------------------------------------------------------*/
   /* If an error was found or data not requested return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0UW00.FB0UWRDF != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0) /* Error found*/
    return;
  end


  FB0U110(); /* Purge temporary storage*/

  set PG1REC empty;
  PG1REC.XXXUSER = FB0UW01.XXXUSER;

  FB0U120(); /* Obtain scheduler code*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(18); /* No data to display*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Get the factory model standards for the factories*/
   /* ------------------------------------------------------------*/

  FB0U130(); /* Obtain factory model*/

   /* ------------------------------------------------------------*/
   /* Get the autoload accept flag*/
   /* ------------------------------------------------------------*/

  FB0U140(); /* Obtain autoload accept flag*/

   /* ------------------------------------------------------------*/
   /* Get the user list of products for the line entered.*/
   /* Open cursor for Dfbuy.Vrtqtb01*/
   /* ------------------------------------------------------------*/

  set FBFREC empty; /* Initialize record*/

  FBFREC.PG1SC4CD = PG1REC.PG1SC4CD; /* Scheduler code*/

  if (FB0UM010.FB0UMPTS != " ")
    FBFREC.SY1STNBR = FB0UM010.FB0UMPTS;
  else
    FBFREC.SY1STNBR = "*";
  end

  if (FB0UW01.XPLCD != " ")
    FBFREC.XPLCD = FB0UW01.XPLCD; /* Product line*/
  end

  if (FB0UW01.XPCCD != " ")
    FBFREC.XPCCD = FB0UW01.XPCCD;
  end


  FB0US01(); /* Open cursor for DFbuy.Vrtqtb01*/

   /* ------------------------------------------------------------*/
   /* Obtain first row--if rows exist process all of the records.*/
   /* ------------------------------------------------------------*/


  FB0US02(); /* Obtain next Dfbuy.Vrtqtb01 row*/

  if (FB0UW00.FB0UWFSC == "Y") /* If end of cursor on first read*/
    converseLib.validationFailed(18); /* Request processed no data to display*/
    return;
  end


  while (FB0UW00.FB0UWFSC == "N") /* While cursor not at end*/

    if (FBFREC.XDVCD != "02")

      FB0U150(); /* Process all styles for scheduler*/

    else
      FB0US02(); /* Obtain next Dfbuy.Vrtqtb01 row*/
    end

  end

  FB0US06(); /* Close DFbuy.Vrtqtb01 cursor*/


   /* ------------------------------------------------------------*/
   /* If a partial page has been formatted add  to temp storage.*/
   /* ------------------------------------------------------------*/

  if (FB0UW00.FB0UWIXM != 0) /* Write partial page to temp storage*/

    FB0UW00.FB0UWIX1 = FB0UW00.TA5TSQIX + 1;
    FB0UW00.FB0UWLSN[FB0UWIX1] = FB0UW02.SY1STNBR[FB0UWIXM];

    FB0US11(); /* Add to temp storage*/

  end

  if (FB0UW00.TA5TSQIX == 0)
    set FB0UM010 empty;
    FB0UW00.XXXMSGNO = 18; /* No data to display*/
  end


  FB0UW00.FB0UWRDF = "N"; /* Data not requested*/



end // end FB0U100

// Purge temporary storage
Function FB0U110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FB0UW02 empty; /* Map temporary storage page*/
  set TA5REC empty; /* temporary storage record*/


  FB0UW00.TA5TSQIX = 0; /* Highest page number*/
  FB0UW00.FB0UWIXM = 0; /* temporary storage line index*/
  FB0UW00.FB0UWTSP = 1;

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FB0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0UM010.XXXPRCNM = "FB0U110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0UM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0U110

// Obtain scheduler code
Function FB0U120()

   /* -------------------------------------------------*/
     /* Format key*/
   /* -------------------------------------------------*/

  PG1REC.XGPCD = "02"; /* Footwear*/
  PG1REC.PG1SC4CD = "**"; /* Scheduler code*/
  PG1REC.PG1FCTCD = "**"; /* Forecast code*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* No row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0U120"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SCHEDULER CODE    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0U120";
  exit stack;

end // end FB0U120

// Obtain factory model
Function FB0U130()

   /* -------------------------------------------------*/
   /* Initialize record--and format key*/

   /* -------------------------------------------------*/

  set FBAREC empty;
  FBAREC.FBDMDTYP = "FL1";
  FBAREC.FB8BUYDT = FB0UW00.FB0UWBDT;
  FBAREC.FBASTDFL = "Y";

  try
    call "IO3470" ("SA", SQLCA, FBAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/
      converseLib.validationFailed(18); /* No data to display message*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0U130"; /* Process name*/
  TA1REC.TA1LOC = "FETCH FACTORY MODEL     ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYMDL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0U130";
  exit stack;

end // end FB0U130

// Obtain autoload acpt flag
Function FB0U140()

   /* -------------------------------------------------*/
   /* Initialize record--and format key*/

   /* -------------------------------------------------*/

  set FBMREC empty;
  FBMREC.PG1SC4CD = PG1REC.PG1SC4CD;

  try
    call "IO4670" ("S ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      FB0UW01.FBMALAFL = FBMREC.FBMALAFL;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/
      converseLib.validationFailed(18); /* No data to display message*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0U140"; /* Process name*/
  TA1REC.TA1LOC = "FETCH FOOTWEAR SCHEDULER";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "FSCTL011"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0U140";
  exit stack;

end // end FB0U140

// Process all style for schedule
Function FB0U150()

   /* ------------------------------------------------------------*/
   /* If the first line on the page move the style number to the*/
   /* first style array--for the current page.*/
   /* if the style number is the same as the previous style nbr*/
   /* don't increment the line index.*/
   /* ------------------------------------------------------------*/

  if (FB0UW00.FB0UWIXM == 0)
    FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1; /* Temp storage index*/
    FB0UW00.FB0UWIX1 = FB0UW00.TA5TSQIX + 1; /* add 1 to page nbr*/
    FB0UW00.FB0UWFSN[FB0UWIX1] = FBFREC.SY1STNBR;
  else
    if (FBFREC.SY1STNBR != FB0UW02.SY1STNBR[FB0UWIXM]
     || FBFREC.SY2CLRID != FB0UW02.SY2CLRID[FB0UWIXM]
     || FBFREC.XDMCD != FB0UW02.XDMCD[FB0UWIXM])
      FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1; /* Temp storage index*/
    end
  end


  FB0UW02.SY1STNBR[FB0UWIXM] = FBFREC.SY1STNBR;
  FB0UW02.SY2CLRID[FB0UWIXM] = FBFREC.SY2CLRID;
  FB0UW02.XDMCD[FB0UWIXM] = FBFREC.XDMCD;

   /* ------------------------------------------------------------*/
   /* Get the style color and description for the product.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Initialize record*/

  PG2REC.XGPCD = "02";
  PG2REC.SY1STNBR = FBFREC.SY1STNBR;
  PG2REC.SY2CLRID = FBFREC.SY2CLRID;
  PG2REC.XDMCD = FBFREC.XDMCD;

  XSPG202(); /* Obtain style color row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FB0UW02.SY1SSTNM[FB0UWIXM] = PG2REC.SY1SSTNM;
    FB0UW02.SY2CLRAB[FB0UWIXM] = PG2REC.SY2CLRAB;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FB0UW02.SY1SSTNM[FB0UWIXM] = "************";
      FB0UW02.SY2CLRAB[FB0UWIXM] = "************";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database in use*/
        converseLib.validationFailed(19); /* database in use by another user*/
        FB0UM010.XXXPRCNM = "FB0U150";
      else
        converseLib.validationFailed(1); /* system error*/
        FB0UM010.XXXPRCNM = "FB0U150";
      end
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Add to stock qty bought and direct ship quantity bought*/
   /* ------------------------------------------------------------*/

  FB0UW00.FB0UWIX1 = 1;
  FB0UW00.FB0UWWF1 = 0;
  FB0UW00.FB0UWWF2 = 0;

  while (FB0UW00.FB0UWIX1 <= 40)
    if (FBFREC.PC2CUXID == " ")
      FB0UW00.FB0UWWF1 = FB0UW00.FB0UWWF1 + FBFREC.FB7QTB[FB0UWIX1];
    else
      FB0UW00.FB0UWWF2 = FB0UW00.FB0UWWF2 + FBFREC.FB7QTB[FB0UWIX1];
    end
    FB0UW00.FB0UWIX1 = FB0UW00.FB0UWIX1 + 1;
  end

  FB0UW02.FB0UWSTQ[FB0UWIXM] = FB0UW02.FB0UWSTQ[FB0UWIXM] + FB0UWWF1;
  FB0UW02.FB0UWDRQ[FB0UWIXM] = FB0UW02.FB0UWDRQ[FB0UWIXM] + FB0UWWF2;

   /* ------------------------------------------------------------*/
   /* Get the accept flag for the product.*/
   /* ------------------------------------------------------------*/

  set FBKREC empty; /* Init record*/

  FBKREC.SY1STNBR = FBFREC.SY1STNBR;
  FBKREC.SY2CLRID = FBFREC.SY2CLRID;
  FBKREC.XDMCD = FBFREC.XDMCD;

  FBKREC.FB8BUYDT = FB0UW00.FB0UWBDT;

  FBKREC.FB8RCTYP = "B";

  FB0U151(); /* Obtain unique VFQTBS01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FB0UW02.FBKRTAFL[FB0UWIXM] = FBKREC.FBKRTAFL;
  end

   /* ------------------------------------------------------------*/
   /* Get all the factories for the product.*/
   /* ------------------------------------------------------------*/

  set FB7REC empty; /* Init record*/

  FB7REC.SY1STNBR = FBFREC.SY1STNBR;
  FB7REC.SY2CLRID = FBFREC.SY2CLRID;
  FB7REC.XDMCD = FBFREC.XDMCD;
  FB7REC.XWHCD = "*";
  FB7REC.PC2CUXID = "*";
  FB7REC.FB7RTADT = -1;

  if (FBXREC.FB8BUYDT != 0)
    FB7REC.FB8BUYDT = FBXREC.FB8BUYDT;
  else
    FB7REC.FB8BUYDT = FB0UW00.FB0UWBDT;
  end



  FB0US03(); /* Open cursor for DFBUY.VMFBUY01*/

  FB0US04(); /* Fetch DFBUY.VMFBUY01 row*/


   /* ------------------------------------------------------------*/
   /* FB0U can display only 3 factory codes--however FB0W can*/
   /* display up to 5 factories consequently five factories*/
   /* can be loaded into the temp storage record.*/
   /* ------------------------------------------------------------*/

  FB0UW00.FB0UWIX1 = 1; /* Init work index*/
  while (FB0UW00.FB0UWFLC == "N") /* While not end of cursor*/

    if (FB7REC.FY1FCTYC == FB0UW02.FB0UWFC1[FB0UWIXM]
     || FB7REC.FY1FCTYC == FB0UW02.FB0UWFC2[FB0UWIXM]
     || FB7REC.FY1FCTYC == FB0UW02.FB0UWFC3[FB0UWIXM]
     || FB7REC.FY1FCTYC == FB0UW02.FB0UWFC4[FB0UWIXM]
     || FB7REC.FY1FCTYC == FB0UW02.FB0UWFC5[FB0UWIXM])
       /* next sentence*/
    else
      if (FB0UW00.FB0UWIX1 == 1)
        FB0UW02.FB0UWFC1[FB0UWIXM] = FB7REC.FY1FCTYC;
      end
      if (FB0UW00.FB0UWIX1 == 2)
        FB0UW02.FB0UWFC2[FB0UWIXM] = FB7REC.FY1FCTYC;
      end
      if (FB0UW00.FB0UWIX1 == 3)
        FB0UW02.FB0UWFC3[FB0UWIXM] = FB7REC.FY1FCTYC;
      end
      if (FB0UW00.FB0UWIX1 == 4)
        FB0UW02.FB0UWFC4[FB0UWIXM] = FB7REC.FY1FCTYC;
      end
      if (FB0UW00.FB0UWIX1 == 5)
        FB0UW02.FB0UWFC5[FB0UWIXM] = FB7REC.FY1FCTYC;
      end
      FB0UW00.FB0UWIX1 = FB0UW00.FB0UWIX1 + 1;
    end


    FB0US04(); /* Fetch DFBUY.FLQTB011 row*/

  end


  FB0US05(); /* Close DFBUY.VMFBUY01 cursor*/


   /* ------------------------------------------------------------*/
   /* Add to temp storage if all lines on page have been filled*/
   /* ------------------------------------------------------------*/

  if (FB0UW00.FB0UWIXM == FB0UW00.FB0UWMAX)
                                   /* Line index = max lines per page*/

    FB0UW00.FB0UWIX1 = FB0UW00.TA5TSQIX + 1;
    FB0UW00.FB0UWLSN[FB0UWIX1] = FB0UW02.SY1STNBR[FB0UWIXM];

    FB0US11(); /* add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch next VFRQTB01 row.*/
   /* ------------------------------------------------------------*/

  FB0US02(); /* Fetch next VFRQTB01 row*/

end // end FB0U150

// Obtain unique VFQTBS01
Function FB0U151()


  try
    call "IO4740" ("S ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0U151"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0U151";
  exit stack;

end // end FB0U151

// Format and display map 1
Function FB0U200()


  if (converseVar.validationMsgNum != 0)
    set FB0UM010 alarm; /* Indicate sound alarm*/
  end

   /* -----------------------------------------------------------*/
   /* If no data found clear the map.*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 18) /* No data to display*/

    set FB0UM010 initial;
  end

   /* -----------------------------------------------------------*/
   /* If current page not equal request page, obtain temp*/
   /* storage record.*/
   /* -----------------------------------------------------------*/

  if (FB0UW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FB0UW00.FB0UWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/

      set FB0UM010 initial;

      FB0US07(); /* Obtain temp storage page*/


    end
  end

   /* -----------------------------------------------------------*/
   /* If map is not formatted--format heading and detail*/
   /* data.*/
   /* -----------------------------------------------------------*/

  if (FB0UM010.XXXCURDT == 0) /* Map not formatted*/

    FB0U210(); /* Move header data to the map*/

    FB0U220(); /* Format map 1 detail lines*/

  end

  FB0UM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* -----------------------------------------------------------*/
   /* Position cursor if no errors*/
   /* -----------------------------------------------------------*/

  if (FB0UW00.XXXMSGNO != 0) /* Contains informational message*/
    if (FB0UW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FB0UW00.XXXMSGNO);
    end
  end

  if (converseVar.validationMsgNum == 0)
    if (FB0UM010.FB0UMBYM == 0)
      set FB0UM010.FB0UMBYM cursor;
    else
      if (FB0UM010.XPLCD == " ")
        set FB0UM010.XPLCD cursor;
      else
        set FB0UM010.FB0UMSEL[1] cursor;
      end
    end
  end



  FB0UM010.XXXPRCNM = "FB0U"; /* Process number*/

  converse FB0UM010 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  FB0UW00.XXXMSGNO = 0; /* Message number*/
  FB0UM010.XXXPRCNM = "FB0U"; /* Process number*/

end // end FB0U200

// Format map Header data
Function FB0U210()

   /* ------------------------------------------------------------*/
   /* Move map header from fb0uw01 display storage to the map*/
   /* fields.*/
   /* ------------------------------------------------------------*/


  FB0UM010.XXXUSER = FB0UW01.XXXUSER;

  if (FB0UW01.FB0UWBYM != 0)
    FB0UM010.FB0UMBYM = FB0UW01.FB0UWBYM; /* buy month*/
  end

  FB0UM010.XPLCD = FB0UW01.XPLCD; /* line code*/
  FB0UM010.XPCCD = FB0UW01.XPCCD; /* category code*/
  FB0UM010.FBMALAFL = FB0UW01.FBMALAFL;
  FB0UM010.FB0UMPTS = FB0UW01.FB0UWPTS;

end // end FB0U210

// Format map 1 Detail lines
Function FB0U220()

   /* ------------------------------------------------------------*/
   /* Move each temporary storage line from the record to*/
   /* the map line.  Unprotect and display the select field*/
   /* when there is data to display.*/
   /* Position the cursor on the first select field if key fields*/
   /* have been passed in the FBXREC.*/
   /* ------------------------------------------------------------*/


  FB0UW00.FB0UWIXM = FB0UW00.FB0UWMAX; /* set to max lines*/

  while (FB0UW00.FB0UWIXM >= 1)


    if (FB0UW02.SY1STNBR[FB0UWIXM] != " ")
      FB0UM010.SY1STNBR[FB0UWIXM] = FB0UW02.SY1STNBR[FB0UWIXM];
      FB0UM010.SY2CLRID[FB0UWIXM] = FB0UW02.SY2CLRID[FB0UWIXM];
      FB0UM010.XDMCD[FB0UWIXM] = FB0UW02.XDMCD[FB0UWIXM];
      FB0UM010.SY1SSTNM[FB0UWIXM] = FB0UW02.SY1SSTNM[FB0UWIXM];
      FB0UM010.SY2CLRAB[FB0UWIXM] = FB0UW02.SY2CLRAB[FB0UWIXM];
      FB0UM010.FB0UMSTQ[FB0UWIXM] = FB0UW02.FB0UWSTQ[FB0UWIXM];
      FB0UM010.FB0UMDRQ[FB0UWIXM] = FB0UW02.FB0UWDRQ[FB0UWIXM];
      FB0UM010.FBKRTAFL[FB0UWIXM] = FB0UW02.FBKRTAFL[FB0UWIXM];
      FB0UM010.FB0UMFC1[FB0UWIXM] = FB0UW02.FB0UWFC1[FB0UWIXM];
      FB0UM010.FB0UMFC2[FB0UWIXM] = FB0UW02.FB0UWFC2[FB0UWIXM];
      FB0UM010.FB0UMFC3[FB0UWIXM] = FB0UW02.FB0UWFC3[FB0UWIXM];
      set FB0UM010.FB0UMSEL[FB0UWIXM] normal; /* Allow entry*/
    else
      set FB0UM010.FB0UMSEL[FB0UWIXM] initialAttributes; /* Protect and darken*/
    end
    FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM - 1;
  end




end // end FB0U220

// Check attention ID
Function FB0U300()


   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    FB0UM010.XXXPRCNM = "FB0U";
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Validate scroll request if  PF7 or PF8*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* Scroll forward requested*/

    FB0U310(); /* Validate scroll request*/
    return; /* Exit to next process*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to application.*/
   /* ------------------------------------------------------------*/

  if (FB0UM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FB0U110(); /* Purge temp storage*/

      COMMAREA.CATOAP = FB0UM010.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FB0UM010.CAITEM; /* TO application key*/
      XSFBS01();
      set FB0UM010.CATOAP cursor, bold;
      exit stack;
    else
      FB0UM010.XXXPRCNM = "FB0U300"; /* Module identification*/
      converseLib.validationFailed(36); /* Enter must be used for fast path*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* On PF1 transfer to GD01(Help screen)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* Help screen requested*/

    FB0U110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "GD01"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0UM010.XXXPRCNM = "FB0U300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF3 transfer to FB0F(footwear buy menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* menu screen requested*/

    FB0U110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "FB0F"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0UM010.XXXPRCNM = "FB0U300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* On PF4 transfer to MN0N (Master menu)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Menu screen requested*/

    FB0U110(); /* Purge temp storage*/

    COMMAREA.CATOAP = "MN0N"; /* TO application*/
    COMMAREA.CAITEM = " "; /* TO application key*/
    XSFBS01();
    FB0UM010.XXXPRCNM = "FB0U300"; /* Module identification*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Continue processing if following keys are pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* (Process screen input)*/
   || converseVar.eventKey is pf13  /* FB0W (RTA percent maintenance)*/
   || converseVar.eventKey is pf14  /* Submit jcl to run FB251d*/
   || converseVar.eventKey is pf18) /* Submit jcl to run FL119d*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set FB0UM010 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  FB0UM010.XXXPRCNM = "FB0U300";
  converseLib.validationFailed(03); /* PF key not supported on this screen*/
  exit stack;



end // end FB0U300

// Validate scroll request
Function FB0U310()



   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FB0UW00.FB0UWTSP < 2)       /* and no previous pages*/

    FB0UM010.XXXPRCNM = "FB0U131"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/



  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FB0UW00.FB0UWTSP >= FB0UW00.TA5TSQIX) /* and no more pages*/

    FB0UM010.XXXPRCNM = "FB0U310"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


  if (converseVar.eventKey is pf7 /* Scroll backward request*/
   && FB0UW00.FB0UWTSP == 1)      /* on first page*/

    FB0UM010.XXXPRCNM = "FB0U310"; /* Module identification*/
    converseLib.validationFailed(6); /* No more pages to display*/

  end
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end



end // end FB0U310

// Reset highlighted fields
Function FB0U400()

   /* ----------------------------------------------------*/
   /* Set the select code to either defined or normal*/
   /* ----------------------------------------------------*/

  FB0UW00.FB0UWIXM = 1; /* Initialize map index*/

  while (FB0UW00.FB0UWIXM <= FB0UW00.FB0UWMAX) /* Max lines*/
    if (FB0UM010.SY1STNBR[FB0UWIXM] == " ")

      set FB0UM010.FB0UMSEL[FB0UWIXM] initialAttributes; /* Protect and darken*/
    else
      set FB0UM010.FB0UMSEL[FB0UWIXM] normal; /* Allow entry*/

    end
    FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1;
  end

  set FB0UM010.FB0UMBYM initialAttributes;
  set FB0UM010.FB0UMPTS initialAttributes;
  set FB0UM010.XPLCD initialAttributes;
  set FB0UM010.XPCCD initialAttributes;
  set FB0UM010.FBMALAFL initialAttributes;
  set FB0UM010.XXXUSER initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FB0UM010.XPLCD == "?" /* Product line list requested*/
   || FB0UM010.XPCCD == "?") /* Category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FB0UM010.XXXPRCNM = "400"; /* Module identification*/
      converseLib.validationFailed(03); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FB0UM010.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB0UM010.XPCCD = FB0UW01.XPCCD; /* Restore prior code*/
    else
      FB0UM010.XPCCD = XPCTBL.XPCCD[XX0XWPIX];

    end

    set FB0UM010.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FB0UM010.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the silhouette list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FB0UM010.XPLCD = FB0UW01.XPLCD; /* Restore prior code*/
    else
      FB0UM010.XPLCD = XPLTBL.XPLCD[XX0XWPIX];

    end

    set FB0UM010.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FB0UM010.XXXPRCNM = "400"; /* Module identification*/

  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FB0U400

// Verify entered data
Function FB0U500()


  FB0UM010.XXXPRCNM = "FB0U500";

   /* ----------------------------------------------------*/
   /* If autoload flag has been entered verify that*/
   /* no other key fields were entered or changed.*/
   /* ----------------------------------------------------*/

  if (FB0UM010.FBMALAFL != " " /* Autoload flag entered*/
   && FB0UM010.FBMALAFL != FB0UW01.FBMALAFL) /* autoload flag changed*/
    FB0UW00.FB0UWALE = "Y"; /* autoload entered flag*/
    FB0UW01.FBMALAFL = " ";
    if (FB0UM010.FB0UMPTS != " "
     && FB0UM010.FB0UMPTS != FB0UW01.FB0UWPTS)
      converseLib.validationFailed(128); /* cannot enter when key fields changed*/
      set FB0UM010.FBMALAFL cursor, bold;
      FB0UW00.FB0UWALE = "N"; /* autoload entered flag*/
    end
    if (FB0UM010.XPCCD != " "
     && FB0UM010.XPCCD != FB0UW01.XPCCD)
      converseLib.validationFailed(128); /* cannot enter when key fields changed*/
      set FB0UM010.FBMALAFL cursor, bold;
      FB0UW00.FB0UWALE = "N"; /* autoload entered flag*/
    end
    if (FB0UM010.XPLCD != " "
     && FB0UM010.XPLCD != FB0UW01.XPLCD)
      converseLib.validationFailed(128); /* cannot enter when key fields changed*/
      set FB0UM010.FBMALAFL cursor, bold;
      FB0UW00.FB0UWALE = "N"; /* autoload entered flag*/
    end
    if (FB0UM010.FB0UMBYM != 0
     && FB0UM010.FB0UMBYM != FB0UW01.FB0UWBYM)
      converseLib.validationFailed(128); /* cannot enter when key fields changed*/
      set FB0UM010.FBMALAFL cursor, bold;
      FB0UW00.FB0UWALE = "N"; /* autoload entered flag*/
    end
    if (FB0UM010.XXXUSER != " "
     && FB0UM010.XXXUSER != FB0UW01.XXXUSER)
      converseLib.validationFailed(128); /* cannot enter when key fields changed*/
      set FB0UM010.FBMALAFL cursor, bold;
      FB0UW00.FB0UWALE = "N"; /* autoload entered flag*/
    end
  end


   /* ----------------------------------------------------*/
   /* Do select field validation.*/
     /* l). verify only 's' has been entered*/
     /* 2). verify that no buy month, line, category or*/
         /* page to style have been entered*/
     /* 3). verify that scrolling has not been requested*/
         /* when a select code has been entered.*/
   /* ----------------------------------------------------*/


  if (FB0UM010.SY1STNBR[1] != " ") /* Style exists or*/

    FB0UW00.FB0UWIXM = FB0UW00.FB0UWMAX;
    FB0UW00.FB0UWCNT = 0; /* Field to count select codes*/

    while (FB0UW00.FB0UWIXM >= 1)
      if (FB0UM010.FB0UMSEL[FB0UWIXM] == "S")
        FB0UW00.FB0UWCNT = FB0UW00.FB0UWCNT + 1;
      else
        if (FB0UM010.FB0UMSEL[FB0UWIXM] != " ")
          set FB0UM010.FB0UMSEL[FB0UWIXM] cursor, bold;
          converseLib.validationFailed(41); /* 'S' is the only valid selection code*/
        end
      end
      FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM - 1;
    end
  end

  if (FB0UW00.FB0UWCNT != 0)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      converseLib.validationFailed(5);
    end
    if (FB0UM010.FB0UMPTS != " "
     && FB0UM010.FB0UMPTS != FB0UW01.FB0UWPTS)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB0UM010.FB0UMPTS cursor, bold;
    end
    if (FB0UM010.XPCCD != " "
     && FB0UM010.XPCCD != FB0UW01.XPCCD)
      converseLib.validationFailed(194); /* 'S' invalid when key fields changed*/
      set FB0UM010.XPCCD cursor, bold;
    end
    if (FB0UM010.XPLCD != " "
     && FB0UM010.XPLCD != FB0UW01.XPLCD)
      converseLib.validationFailed(194); /* 's'  invalid when key fields changed*/
      set FB0UM010.XPLCD cursor, bold;
    end
    if (FB0UM010.FB0UMBYM != 0
     && FB0UM010.FB0UMBYM != FB0UW01.FB0UWBYM)
      converseLib.validationFailed(194); /* 's' invalid when key fields changed*/
      set FB0UM010.FB0UMBYM cursor, bold;
    end
    if (FB0UM010.XXXUSER != " "
     && FB0UM010.XXXUSER != FB0UW01.XXXUSER)
      converseLib.validationFailed(194); /* 's' invalid when key fields changed*/
      set FB0UM010.XXXUSER cursor, bold;
    end
  else /* No select code entered*/
    if (converseVar.eventKey is pf13)
      converseLib.validationFailed(196);
                                   /* At lease one product must be selected*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* Edit category code if entered or changed*/
   /* ----------------------------------------------------*/
  FB0UW00.FB0UWKFC = "N"; /* key fields changed flag*/

  if (FB0UM010.XPCCD == " ")
    FB0UW01.XPCCD = " "; /* Map field may have been erased*/
    converseLib.validationFailed(8); /* Required field*/
    set FB0UM010.XPCCD cursor, bold;
  else
    if (FB0UM010.XPCCD != FB0UW01.XPCCD) /* Category changed*/
      FB0UW00.FB0UWKFC = "Y"; /* Key fields have changed*/
      XPCREC.XPCCD = FB0UM010.XPCCD;
      XPCREC.XGPCD = "02";
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB0UW01.XPCCD = FB0UM010.XPCCD;
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0UM010.XPCCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit product line code  if entered or changed*/
   /* ----------------------------------------------------*/

  if (FB0UM010.XPLCD == " ")
    FB0UW01.XPLCD = " "; /* Field may have been erased*/
    converseLib.validationFailed(8); /* Required field*/
    set FB0UM010.XPLCD cursor, bold;
  else
    if (FB0UM010.XPLCD != FB0UW01.XPLCD) /* product line changed*/
      FB0UW00.FB0UWKFC = "Y"; /* Key fields have changed*/
      XPLREC.XPLCD = FB0UM010.XPLCD;
      XPLREC.XGPCD = "02";
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        FB0UW01.XPLCD = FB0UM010.XPLCD;
      else
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0UM010.XPLCD cursor, bold;
      end
    end
  end

   /* ----------------------------------------------------*/
   /* Edit buy date if entered or changed.*/
   /* ----------------------------------------------------*/

  if (FB0UM010.FB0UMBYM == 0)
    FB0UW01.FB0UWBYM = "0"; /* Field may have been erased*/
    FB0UW00.FB0UWBDT = "0";
    converseLib.validationFailed(8); /* Required field*/
    set FB0UM010.FB0UMBYM cursor, bold;
  else
    if (FB0UM010.FB0UMBYM != FB0UW01.FB0UWBYM)
      FB0UW00.FB0UWKFC = "Y"; /* Key fields have changed*/
      FB0UW01.FB0UWBYM = 0;
      FB0UW00.FB0UWBDT = 0;
      /* ------------------- y2k out begin -----------------*/
      /* MOVE EZEDTE TO FB0UW00.FB0UWSDT;*/
      /* MOVE 19 TO FB0UW00.FB0UWBCC;  /* Buy century*/
      /* ------------------- y2k out end  ------------------*/
      FB0UW00.FB0UWBDD = 1; /* Buy day*/
      FB0UW00.FB0UWBYM = FB0UM010.FB0UMBYM;
      /* ------------------- y2k in begin ------------------*/
      if (FB0UW00.FB0UWBYY > 60) /* Century windowing*/
        FB0UW00.FB0UWBCC = 19;
      else
        FB0UW00.FB0UWBCC = 20;
      end
      /* ------------------- y2k in end   ------------------*/
      if (FB0UW00.FB0UWBMM > 12) /* Month > 12*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0UM010.FB0UMBYM cursor, bold;
        FB0UW00.FB0UWBDT = 0;
        FB0UW01.FB0UWBYM = 0;
      else
        FB0UW00.FB0UWBYM = FB0UM010.FB0UMBYM;
        FB0UW01.FB0UWBYM = FB0UM010.FB0UMBYM;
      end
      if (FB0UW00.FB0UWBMM < 1) /* Month < 1*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0UM010.FB0UMBYM cursor, bold;
        FB0UW00.FB0UWBDT = 0;
        FB0UW01.FB0UWBYM = 0;
      else
        FB0UW00.FB0UWBYM = FB0UM010.FB0UMBYM;
        FB0UW01.FB0UWBYM = FB0UM010.FB0UMBYM;
      end
      /* --------------------- y2k out begin ------------------*/
      /* FB0UW00.FB0UWSYY = FB0UW00.FB0UWSYY - 1;*/
      /* IF FB0UW00.FB0UWBYY LT*/
          /* FB0UW00.FB0UWSYY; /* Year < current*/
                                   /* year - 1*/
      /* --------------------- y2k out end   ------------------*/
      /* --------------------- y2k in begin  ------------------*/
      FB0UW00.FB0UW-BUY-CCYYMM = FB0UW00.FB0UWBDT;
      FB0UW00.FB0UWSDT = VGVar.currentGregorianDate;
      FB0UW00.FB0UWSCY = FB0UW00.FB0UWSCY - 1;
      if (FB0UW00.FB0UW-BUY-CCYY < FB0UW00.FB0UWSCY) /* Year < cur yy - 1*/
        /* --------------------- y2k in end    ------------------*/
        converseLib.validationFailed(10); /* Invalid data entered*/
        set FB0UM010.FB0UMBYM cursor, bold;
        FB0UW00.FB0UWBDT = 0;
        FB0UW01.FB0UWBYM = 0;
      else
        FB0UW00.FB0UWBYM = FB0UM010.FB0UMBYM;
        FB0UW01.FB0UWBYM = FB0UM010.FB0UMBYM;
      end
    end
  end


   /* ----------------------------------------------------*/
   /* If ready for autoload flag has been modified*/
   /* verify that a 'y' or 'n' was entered.*/
   /* ----------------------------------------------------*/

  if (FB0UM010.FBMALAFL != " ") /* autoload flag entered*/
    if (FB0UM010.FBMALAFL == "Y"
     || FB0UM010.FBMALAFL == "N")
       /* next sentence*/
    else
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FB0UM010.FBMALAFL cursor, bold;
    end
  end

   /* ----------------------------------------------------*/
   /* Validate userid field against DPRODG.VSUSER01 table*/
   /* if field has been modified.*/
   /* ----------------------------------------------------*/

  if (FB0UM010.XXXUSER != " "
   && FB0UM010.XXXUSER != FB0UW01.XXXUSER)
    if (converseVar.eventKey is enter)

      set PG1REC empty;
      PG1REC.XXXUSER = FB0UM010.XXXUSER;

      FB0U120(); /* validate user id*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(257); /* scheduler code not on table*/
        set FB0UM010.XXXUSER cursor, bold;
      else
        FB0UW01.XXXUSER = FB0UM010.XXXUSER;
        FB0UW00.FB0UWKFC = "Y"; /* key fields changed flag*/
      end

    else
      converseLib.validationFailed(219); /* displayed data cannot change etc.*/
      set FB0UM010.XXXUSER cursor, bold;
    end
  end

   /* ----------------------------------------------------*/
   /* If any edit errors on entered key fields exit to*/
   /* display map, otherwise if key fields have changed*/
   /* set request for data flag to yes.*/
   /* ----------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  FB0UM010.XXXPRCNM = " ";

  if (FB0UW00.FB0UWKFC == "Y") /* If key fields changed*/
    FB0UW00.FB0UWKFC = "N"; /* Key fields changed flag*/
    set FB0UM010 empty;
    FB0UW00.FB0UWTSP = 1; /* temp storage page requested*/
    FB0UW00.FB0UWRDF = "Y"; /* Set request data flag to yes*/
    exit stack;
  end


   /* ----------------------------------------------------*/
   /* If the page to style nbr has been entered verify*/
   /* that is exists on the DFBUY.VRTQTB01 table and*/
   /* find the page that it is on in temp storage.*/
   /* ----------------------------------------------------*/

  FB0UM010.XXXPRCNM = "FB0U500";

  if (FB0UM010.FB0UMPTS != " ") /* Page to style nbr entered*/
    if (FB0UM010.FB0UMPTS != FB0UW01.FB0UWPTS)
      FB0U510(); /* Verify page to style number*/
      FB0U520(); /* Find page in temp storage*/
    end
  else
    FB0UW01.FB0UWPTS = " ";
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------*/
   /* If PF13 (transfer to FB0W) check the autoload*/
   /* flag on the scheduler table.  IF it is a 'y'*/
   /* do not allow the transfer.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    if (FBMREC.FBMALAFL == "Y")
      converseLib.validationFailed(322);
      exit stack;
    end
  end

  FB0UM010.XXXPRCNM = " ";
  if (FB0UW00.FB0UWALE == "Y") /* autoload entered & passed edits*/
    FB0UW01.FBMALAFL = FB0UM010.FBMALAFL; /* Move to storage*/
  end

end // end FB0U500

// Verify page to style nbr
Function FB0U510()
   /* -------------------------------------------------*/
   /* Initialize record--and format key*/
   /* -------------------------------------------------*/

  set FBFREC empty;
  FBFREC.SY1STNBR = FB0UM010.FB0UMPTS;
  FBFREC.SY2CLRID = "00 ";
  FBFREC.XDMCD = "00";
  FBFREC.FB8BUYDT = FB0UW00.FB0UWBDT;

  FB0US08(); /* Open DFBUY.VRTQTB01*/

  FB0US09(); /* FETCH DFBUY.VRTQTB01*/

  FB0UW00.FB0UWSFF = "N"; /* Style found flag*/

  while (FB0UW00.FB0UWFSC == "N" /* While more rows*/
   && FB0UW00.FB0UWSFF == "N") /* And style not found*/
    if (FBFREC.PG1SC4CD == PG1REC.PG1SC4CD)
      FB0UW00.FB0UWSFF = "Y";
    end
    FB0US09(); /* FETCH DFBUY.VRTQTB01*/
  end

  FB0US10(); /* Close DFBUY.VRTQTB01*/

  if (FB0UW00.FB0UWSFF == "N")
    converseLib.validationFailed(22); /* invalid style number entered*/
    set FB0UM010.FB0UMPTS cursor, bold;
  else
    FB0UW01.FB0UWPTS = FB0UM010.FB0UMPTS;
  end

end // end FB0U510

// Find temp storage page
Function FB0U520()

  FB0UW00.FB0UWIX1 = 1;

  while (FB0UW00.FB0UWIX1 <= 50)
    if (FB0UW00.FB0UWFSN[FB0UWIX1] != " ")
      if (FB0UM010.FB0UMPTS <= FB0UW00.FB0UWLSN[FB0UWIX1])
        FB0UW00.FB0UWTSP = FB0UW00.FB0UWIX1;
        exit stack; /* ezeflo to display map*/
      end
    end
    FB0UW00.FB0UWIX1 = FB0UW00.FB0UWIX1 + 1;
  end


end // end FB0U520

// Process valid input
Function FB0U600()

   /* ----------------------------------------------------*/
   /* If PF7 or PF8 has been pressed increment or*/
   /* decrement the page requested and return to the*/
   /* calling process.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    FB0UW00.XXXMSGNO = 13;
    FB0UW00.FB0UWTSP = FB0UW00.FB0UWTSP - 1;
    return;
  end

  if (converseVar.eventKey is pf8)
    FB0UW00.XXXMSGNO = 12;
    FB0UW00.FB0UWTSP = FB0UW00.FB0UWTSP + 1;
    return;
  end


   /* ----------------------------------------------------*/
   /* If autoload flag has been entered,*/
   /* update the VFSCTL01 table.*/
   /* ----------------------------------------------------*/

  if (FB0UW00.FB0UWALE == "Y") /* if autoload flag entered*/

    FB0U610(); /* Update ready for autoload flag*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    FB0UW00.FB0UWALE = "N";
    FB0UW01.FBMALAFL = FB0UM010.FBMALAFL;

  end

   /* ----------------------------------------------------*/
   /* If enter has been pressed ezertn to display map*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is enter)
    return;
  end

   /* ----------------------------------------------------*/
   /* If PF13, has been pressed*/
   /* set up FBXREc for transfer, purge temp storage*/
   /* and transfer to requested applications.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* FB0W*/


    FBXREC.XPLCD = FB0UW01.XPLCD;
    FBXREC.XPCCD = FB0UW01.XPCCD;
    FBXREC.FB8BUYDT = FB0UW00.FB0UWBDT;
    FBXREC.CAUSERID = FB0UW01.XXXUSER;
    FBXREC.XGPCD = "02";

    FB0UW00.FB0UWIX1 = 1; /* Init FBXREC product array*/
    FB0UW00.FB0UWIXM = 1; /* Init map index*/

    while (FB0UW00.FB0UWIXM <= FB0UW00.FB0UWMAX) /* Max lines*/

      if (FB0UM010.FB0UMSEL[FB0UWIXM] == "S")
        FBXREC.SY1STNBR[FB0UWIX1] = FB0UM010.SY1STNBR[FB0UWIXM];
        FBXREC.SY2CLRID[FB0UWIX1] = FB0UM010.SY2CLRID[FB0UWIXM];
        FBXREC.XDMCD[FB0UWIX1] = FB0UM010.XDMCD[FB0UWIXM];
        FBXREC.FBXFCTY1[FB0UWIX1] = FB0UM010.FB0UMFC1[FB0UWIXM];
        FBXREC.FBXFCTY2[FB0UWIX1] = FB0UM010.FB0UMFC2[FB0UWIXM];
        FBXREC.FBXFCTY3[FB0UWIX1] = FB0UM010.FB0UMFC3[FB0UWIXM];
        FBXREC.FBXFCTY4[FB0UWIX1] = FB0UW02.FB0UWFC4[FB0UWIXM];
        FBXREC.FBXFCTY5[FB0UWIX1] = FB0UW02.FB0UWFC5[FB0UWIXM];
        FB0UW00.FB0UWIX1 = FB0UW00.FB0UWIX1 + 1;
      end

      FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1;
    end

    FBWREC.FBWFILL = FBXREC.FBXGROUP;
    COMMAREA.CAUSERA = FBWREC.FBWGROUP;

    FB0U110(); /* Purge temp storage*/


    COMMAREA.CATOAP = "FB0W";

    XSFBS01();
    FB0UM010.XXXPRCNM = "FB0U600";
    exit stack;

  end


   /* ----------------------------------------------------*/
   /* If PF14 has been pressed submit JCl to run job*/
   /* FB2511.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* RTA Report print*/
   /* ------------------------------------------------------------*/
    /* Call sub-routine to find which environment the program is*/
    /* executing in, development or production.*/
   /* ------------------------------------------------------------*/
    TA3REC.TA3OPTN = "ALLFLDS";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FB0U620(); /* format production jcl*/
      else
        FB0U630(); /* format development jcl*/
      end
    end

    FB0U640(); /* Submit the JCL*/
    set FB0UM010 empty; /* 010 input/output area*/
    FB0UM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/
    FB0UW00.FB0UWRDF = "Y"; /* Don't want to display data*/
    FB0UW00.XXXMSGNO = 76; /* Job submitted for batch processing*/
    return;

  end

   /* ----------------------------------------------------*/
   /* If PF18 has been pressed submit JCl to run job*/
   /* FB119d.*/
   /* ----------------------------------------------------*/

  if (converseVar.eventKey not pf18)
    return;
  end

   /* ------------------------------------------------------------*/
    /* Call sub-routine to find which environment the program is*/
    /* executing in, development or production.*/
   /* ------------------------------------------------------------*/
  TA3REC.TA3OPTN = "ALLFLDS";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FB0U650(); /* format production jcl*/
    else
      FB0U660(); /* format development jcl*/
    end
  end

  FB0U640(); /* Submit the JCL*/
  set FB0UM010 empty; /* 010 input/output area*/
  FB0UM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Move date to map*/
  FB0UW00.FB0UWRDF = "Y"; /* Don't want to display data*/
  FB0UW00.XXXMSGNO = 76; /* Job submitted for batch processing*/


end // end FB0U600

// Update autoload flag
Function FB0U610()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/


  XX0XS01();

  FBMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FBMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  FBMREC.FBMALAFL = FB0UW01.FBMALAFL;


  try
    call "IO4670" ("U ", SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      converseLib.validationFailed(32); /* update successful*/
      return;

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/

      converseLib.validationFailed(20); /* Record updated by another user*/
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback if bad return code*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0U610 "; /* Process name*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0U610"; /* Process name*/

  exit stack;

end // end FB0U610

// Format production jcl
Function FB0U620()

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the production fb2511 jcl.*/
    /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6MSGSW = "N";
  FB0UW00.FB0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB0UW00.FB0UWIXT > 0) /* Until end of table*/
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FB0UT03.TARJCL[FB0UWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FB0UT03.TARTYPE[FB0UWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB0UT03.TARJCL[FB0UWIXT] == "/*EOF") /* End of table*/

      FB0UW00.FB0UWIXT = 0; /* Indicate end of table*/

    else

      FB0UW00.FB0UWIXT = FB0UW00.FB0UWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0U620

// Format development jcl
Function FB0U630()

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used for*/
     /* submitting the production fb2511 jcl.*/
    /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6MSGSW = "N";
  FB0UW00.FB0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

  while (FB0UW00.FB0UWIXT > 0) /* Until end of table*/
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = FB0UT04.TARJCL[FB0UWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = FB0UT04.TARTYPE[FB0UWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

    if (FB0UT04.TARJCL[FB0UWIXT] == "/*EOF") /* End of table*/

      FB0UW00.FB0UWIXT = 0; /* Indicate end of table*/

    else

      FB0UW00.FB0UWIXT = FB0UW00.FB0UWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0U630

// Submit jcl to internal reader
Function FB0U640()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    FB0UM010.XXXPRCNM = "FB0U640"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    FB0UM010.XXXPRCNM = "FB0U640"; /* module identification*/

  end


  exit stack; /* Exit to display map*/


end // end FB0U640

// Format production jcl
Function FB0U650()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the production*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6MSGSW = "N";
  FB0UW00.FB0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0UW00.FB0UWIXT > 0) /* Until end of table*/

    if (FB0UT01.TARTYPE[FB0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/

      FB0UW00.FB0UWIXM = 1; /* Init map index*/

      while (FB0UW00.FB0UWIXM <= FB0UW00.FB0UWMAX) /* Max lines*/

        if (FB0UM010.FB0UMSEL[FB0UWIXM] == "S")
          FB0UW00.SY1STNBR = FB0UM010.SY1STNBR[FB0UWIXM];
          FB0UW00.SY2CLRID = FB0UM010.SY2CLRID[FB0UWIXM];
          FB0UW00.XDMCD = FB0UM010.XDMCD[FB0UWIXM];

          TA6REC.TARJCL[TA6INDEX] = FB0UW00.FB0UWPRM; /* Jcl*/
          TA6REC.TARTYPE[TA6INDEX] = FB0UT01.TARTYPE[FB0UWIXT];

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        end

        FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1;
      end

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0UT01.TARJCL[FB0UWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0UT01.TARTYPE[FB0UWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0UT01.TARJCL[FB0UWIXT] == "/*EOF") /* End of table*/

      FB0UW00.FB0UWIXT = 0; /* Indicate end of table*/

    else

      FB0UW00.FB0UWIXT = FB0UW00.FB0UWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0U650

// Format development jcl
Function FB0U660()

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used for*/
   /* submitting the production*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6MSGSW = "N";
  FB0UW00.FB0UWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (FB0UW00.FB0UWIXT > 0) /* Until end of table*/

    if (FB0UT02.TARTYPE[FB0UWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* move required parm fields to working storage and then*/
       /* move working storage parm line to the TA6REC.*/
      /* ------------------------------------------------------------*/

      FB0UW00.FB0UWIXM = 1; /* Init map index*/

      while (FB0UW00.FB0UWIXM <= FB0UW00.FB0UWMAX) /* Max lines*/

        if (FB0UM010.FB0UMSEL[FB0UWIXM] == "S")
          FB0UW00.SY1STNBR = FB0UM010.SY1STNBR[FB0UWIXM];
          FB0UW00.SY2CLRID = FB0UM010.SY2CLRID[FB0UWIXM];
          FB0UW00.XDMCD = FB0UM010.XDMCD[FB0UWIXM];

          TA6REC.TARJCL[TA6INDEX] = FB0UW00.FB0UWPRM; /* Jcl*/
          TA6REC.TARTYPE[TA6INDEX] = FB0UT02.TARTYPE[FB0UWIXT];

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        end

        FB0UW00.FB0UWIXM = FB0UW00.FB0UWIXM + 1;
      end

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FB0UT02.TARJCL[FB0UWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FB0UT02.TARTYPE[FB0UWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FB0UT02.TARJCL[FB0UWIXT] == "/*EOF") /* End of table*/

      FB0UW00.FB0UWIXT = 0; /* Indicate end of table*/

    else

      FB0UW00.FB0UWIXT = FB0UW00.FB0UWIXT + 1; /* Increment table index*/

    end

  end


end // end FB0U660

// open DFBUY.VRTQTB01 cursor
Function FB0US01()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VRTQTB01*/
   /* ------------------------------------------------------------*/

  FB0UW00.FB0UWFSC = "N"; /* Set cursor to no*/



  try
    call "IO4620" ("S2", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US01"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US01";
  exit stack;

end // end FB0US01

// Fetch DFBUY.VRTQTB01 row
Function FB0US02()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4620" ("N2", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0UW00.FB0UWFSC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US02"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US02";
  exit stack;

end // end FB0US02

// open DFBUY.VMFBUY01 cursor
Function FB0US03()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VMFBUY01*/
   /* ------------------------------------------------------------*/

  FB0UW00.FB0UWFLC = "N"; /* Set cursor to no*/



  try
    call "IO3490" ("S1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US03"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US03";
  exit stack;

end // end FB0US03

// Fetch DFBUY.VMFBUY01 row
Function FB0US04()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3490" ("N1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0UW00.FB0UWFLC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US04";
  exit stack;

end // end FB0US04

// Close VMFBUY01 cursor
Function FB0US05()



  try
    call "IO3490" ("C1", SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US05"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US05";
  exit stack;


end // end FB0US05

// Close DFBUY.VRTQTB01
Function FB0US06()




  try
    call "IO4620" ("C2", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US06"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US06";
  exit stack;


end // end FB0US06

// Obtain temp storage page
Function FB0US07()


   /* ------------------------------------------------------------*/
   /* Obtain the next page of data from temporary storage*/
   /* ------------------------------------------------------------*/

  FB0UW02.FB0UWTSL = FB0UW00.FB0UWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FB0UW00.FB0UWTSP; /* Page number requested*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FB0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0UM010.XXXPRCNM = "FB0US11"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0UM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0US07

// open DFBUY.VRTQTB01 cursor
Function FB0US08()

   /* ------------------------------------------------------------*/
   /* Declare cursor for DFBUY.VRTQTB01*/
   /* ------------------------------------------------------------*/

  FB0UW00.FB0UWFSC = "N"; /* Set cursor to no*/



  try
    call "IO4620" ("S1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US01"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US08";
  exit stack;

end // end FB0US08

// Fetch DFBUY.VRTQTB01 row
Function FB0US09()

   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4620" ("N1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FB0UW00.FB0UWFSC = "Y"; /* Indicate cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US09"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US09";
  exit stack;

end // end FB0US09

// Close DFBUY.VRTQTB01
Function FB0US10()




  try
    call "IO4620" ("C1", SQLCA, FBFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US10"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE TABLE CURSOR";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRTQTB01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US10";
  exit stack;


end // end FB0US10

// Add page to temp storage
Function FB0US11()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FB0UW02.FB0UWTSL = FB0UW00.FB0UWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FB0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage areas and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FB0UW02 empty; /* Temp storage record*/

    FB0UW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FB0UW00.FB0UWIXM = 0; /* temp storage line index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FB0UM010.XXXPRCNM = "FB0US09"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FB0UM010.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "FB0UM010"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FB0US11

// Get current buy date
Function FB0US12()


  set FB9REC empty;

  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "FB0US12"; /* Process name*/
  TA1REC.TA1LOC = "FETCH UNIQUE TABLE ROW  ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  FB0UM010.XXXPRCNM = "FB0US12";
  exit stack;



end // end FB0US12

//*** RECORD=FB0UW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record FB0UW00 type basicRecord
  5 * char(821) ; 
    10 FB0UWTSL FB0UWTSL ; 
    10 FB0UWRDF FB0UWRDF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 FB0UWTSP FB0UWTSP ; 
    10 FB0UWFSC FB0UWFSC ; 
    10 FB0UWFLC FB0UWFLC ; 
    10 FB0UWALE FB0UWALE ; 
    10 FB0UWSFF FB0UWSFF ; 
    10 FB0UWKFC FB0UWKFC ; 
    10 FB0UWLCT FB0UWLCT ; 
    10 FB0UWCNT FB0UWCNT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 * char(1) ; 
    10 FB0UWFDT FB0UWFDT ; 
      15 FB0UWFCT FB0UWFCT ; 
      15 FB0UWFYM FB0UWFYM ; 
        20 FB0UWFYY FB0UWFYY ; 
        20 FB0UWFMM FB0UWFMM ; 
      15 FB0UWFDD FB0UWFDD ; 
    10 FB0UWYMD FB0UWYMD ; 
      15 FB0UWYY FB0UWYY ; 
      15 FB0UWMM FB0UWMM ; 
      15 FB0UWDD FB0UWDD ; 
    10 FB0UWBDT FB0UWBDT ; 
      15 FB0UWBCC FB0UWBCC ; 
      15 FB0UWBYM FB0UWBYM ; 
        20 FB0UWBYY FB0UWBYY ; 
        20 FB0UWBMM FB0UWBMM ; 
      15 FB0UWBDD FB0UWBDD ; 
    10 FB0UWDRD FB0UWDRD ; 
      15 FB0UWDYY FB0UWDYY ; 
      15 FB0UWDMM FB0UWDMM ; 
      15 FB0UWDDD FB0UWDDD ; 
    10 FB0UWSDT FB0UWSDT ; 
      15 FB0UWSCY FB0UWSCY ; 
        20 FB0UWSCC FB0UWSCC ; 
        20 FB0UWSYY FB0UWSYY ; 
      15 FB0UWSMM FB0UWSMM ; 
      15 FB0UWSDD FB0UWSDD ; 
    10 TA1TBLKE TA1TBLKE ; 
      15 FB0UWKA1 FB0UWKA1 ; 
      15 FB0UWKA2 FB0UWKA2 ; 
      15 FB0UWKA3 FB0UWKA3 ; 
      15 FB0UWKA4 FB0UWKA4 ; 
    10 FB0UWIXM FB0UWIXM ; 
    10 FB0UWIXT FB0UWIXT ; 
    10 FB0UWIX1 FB0UWIX1 ; 
    10 FB0UWIX2 FB0UWIX2 ; 
    10 FB0UWIX3 FB0UWIX3 ; 
    10 FB0UWIX4 FB0UWIX4 ; 
    10 FB0UWIX5 FB0UWIX5 ; 
    10 FB0UWMAX FB0UWMAX ; 
    10 * char(1) ; 
    10 FB0UWPRM FB0UWPRM ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 * char(69) ; 
    10 FB0UWWF1 FB0UWWF1 ; 
    10 FB0UWWF2 FB0UWWF2 ; 
    10 * char(1) ; 
    10 FB0UWFSN FB0UWFSN [50] ; 
    10 FB0UWLSN FB0UWLSN [50] ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 FB0UW-BUY-CCYYMM FB0UW-BUY-CCYYMM ; 
      15 FB0UW-BUY-CCYY FB0UW-BUY-CCYY ; 
        20 FB0UW-BUY-CC FB0UW-BUY-CC ; 
        20 FB0UW-BUY-YY FB0UW-BUY-YY ; 
      15 FB0UW-BUY-MM FB0UW-BUY-MM ; 
      15 FB0UW-BUY-DD FB0UW-BUY-DD ; 
end // end FB0UW00

//*** RECORD=FB0UW01 ****
// Fb0um010 map heading storage record
// ***********************
Record FB0UW01 type basicRecord
  10 XXXUSER XXXUSER ; 
  10 FB0UWBYM FB0UWBYM ; 
  10 XPLCD XPLCD ; 
  10 XPCCD XPCCD ; 
  10 FBMALAFL FBMALAFL ; 
  10 FB0UWPTS FB0UWPTS ; 
  10 * char(1) ; 
end // end FB0UW01

//*** RECORD=FB0UW02 ****
// FB0u temporary storage detail record
// ***********************
Record FB0UW02 type basicRecord
  5 FB0UW02G FB0UW02G ; 
    10 FB0UWTSL FB0UWTSL ; 
    10 FB0UW02R FB0UW02R [14] ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 FB0UWSTQ FB0UWSTQ ; 
      15 FB0UWDRQ FB0UWDRQ ; 
      15 FBKRTAFL FBKRTAFL ; 
      15 FB0UWFC1 FB0UWFC1 ; 
      15 FB0UWFC2 FB0UWFC2 ; 
      15 FB0UWFC3 FB0UWFC3 ; 
      15 FB0UWFC4 FB0UWFC4 ; 
      15 FB0UWFC5 FB0UWFC5 ; 
end // end FB0UW02

DataItem FB0UW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW-BUY-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW-BUY-CCYYMM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UW02G char(914)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0UW02R char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// autoload entered flag
DataItem FB0UWALE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy century
DataItem FB0UWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB0UWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem FB0UWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem FB0UWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date yymm
DataItem FB0UWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy year
DataItem FB0UWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select field counter
DataItem FB0UWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD
DataItem FB0UWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA day
DataItem FB0UWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA month
DataItem FB0UWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat detail RTA date
DataItem FB0UWDRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DRS QTB
DataItem FB0UWDRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail RTA year
DataItem FB0UWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory 1 code
DataItem FB0UWFC1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory 2 code
DataItem FB0UWFC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory 3 code
DataItem FB0UWFC3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory 4 code
DataItem FB0UWFC4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory 5 code
DataItem FB0UWFC5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat century
DataItem FB0UWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem FB0UWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem FB0UWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory cursor flag
DataItem FB0UWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem FB0UWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast style cursor flag
DataItem FB0UWFSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FB0UWFSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymm
DataItem FB0UWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem FB0UWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 1
DataItem FB0UWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem FB0UWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem FB0UWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 4
DataItem FB0UWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 5
DataItem FB0UWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem FB0UWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem FB0UWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem FB0UWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem FB0UWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem FB0UWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem FB0UWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key fields changed flag
DataItem FB0UWKFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line counter
DataItem FB0UWLCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UWLSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max lines per map
DataItem FB0UWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM
DataItem FB0UWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FB0UWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page to style number
DataItem FB0UWPTS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem FB0UWRDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// System year
DataItem FB0UWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System year
DataItem FB0UWSCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System day
DataItem FB0UWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System date
DataItem FB0UWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style found flag
DataItem FB0UWSFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// System month
DataItem FB0UWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stock QTB
DataItem FB0UWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// System year
DataItem FB0UWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage page length
DataItem FB0UWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Increment and decrement page
DataItem FB0UWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 1
DataItem FB0UWWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field 2
DataItem FB0UWWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMMDD Date
DataItem FB0UWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY
DataItem FB0UWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

