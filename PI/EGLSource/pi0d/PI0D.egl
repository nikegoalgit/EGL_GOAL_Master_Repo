package pi0d;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSPIS-IO5950;
import corpcom4.XSPIS-TA0040;
import corpcom4.XSPIS01;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSPAG;
import corpcom7.ZZAMT1;
import corpcom7.ZZAMT10;
import corpcom7.ZZAMT11;
import corpcom7.ZZAMT12;
import corpcom7.ZZAMT13;
import corpcom7.ZZAMT14;
import corpcom7.ZZAMT15;
import corpcom7.ZZAMT16;
import corpcom7.ZZAMT17;
import corpcom7.ZZAMT18;
import corpcom7.ZZAMT19;
import corpcom7.ZZAMT2;
import corpcom7.ZZAMT20;
import corpcom7.ZZAMT3;
import corpcom7.ZZAMT4;
import corpcom7.ZZAMT5;
import corpcom7.ZZAMT6;
import corpcom7.ZZAMT7;
import corpcom7.ZZAMT8;
import corpcom7.ZZAMT9;
import corpcom7.ZZQTY1;
import corpcom7.ZZQTY10;
import corpcom7.ZZQTY11;
import corpcom7.ZZQTY12;
import corpcom7.ZZQTY13;
import corpcom7.ZZQTY14;
import corpcom7.ZZQTY15;
import corpcom7.ZZQTY16;
import corpcom7.ZZQTY17;
import corpcom7.ZZQTY18;
import corpcom7.ZZQTY19;
import corpcom7.ZZQTY2;
import corpcom7.ZZQTY20;
import corpcom7.ZZQTY3;
import corpcom7.ZZQTY4;
import corpcom7.ZZQTY5;
import corpcom7.ZZQTY6;
import corpcom7.ZZQTY7;
import corpcom7.ZZQTY8;
import corpcom7.ZZQTY9;
import pi.common.PIFREC;
import pi.common.PIGREC;
import pi.common.PIPROCDT;
import pi.common.PIWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx09.*;
import xx09.YSMSUMCD;
import xx09.YSMSUMID;
//*** PROGRAM=PI0D ****
// This application allows a user to inquire rows in db2 table
// dpairc.vpitbl01.
// 
// There are two different screens that may be displayed the
// right and left half of the data.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/15/90  jcampb  New application.
//          11/08/90  jcampb  ADD CURRENT TO MTD QTYS
//          12/30/90  jcampb  ADD yesterdays allocation qtys
//          04/25/91  jcampb  REFORMAT COLUMNS
//          10/04/91  jlucas  delete column title nike interntl
// PI#1004  08/19/92  rmorga  update forcast percent w/today's
// PI#0     06/24/93  THARR1  increased the number of occurance
//                            of PI0CW01.PI0CWGRP TO 150.
// 1H002    07/12/93  THARR1  add other & nsg regions don't upd
//                            alloc-mtd after end of cal. month
//          10/08/93  jlucas  add pizrec to appl.
// PI9001   02/25/94  hkempe  Generate/Compile to use revised
//                            COMMAREA and XSPIS01.  Delete any
//                            reference to PIZREC.
// PI9002    03/10/97  WRYAN   Paircount Enhancements
//                             Removed row for 'YESTERDAY'
//                             allocations and two blank rows.
//                             Added rows for three days of
//                             allocations based on PI_PROC_DT.
//                             Added corresponding columns for
//                             amounts and quantiies.
// PI9003  05/28/97  WRYAN    Phase II - Combine columns and
//                            new columns.  Changes made:
//                            1) Screen map PI0DM01 and map
//                            format process PI0D121.
//                            2) Screen map PI0CM002 and map
//                            format process PI0D221.
// 
// *********************
Program PI0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PI00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PI0DW00 PI0DW00; // record
  PI0DW01 PI0DW01; // record
  PIFREC PIFREC; // record
  PIGREC PIGREC; // record
  PIWREC PIWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PI0DM.PI0DM001,  // forms
      PI0DM.PI0DM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PI0D000: PI0D000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set PI0DM001 initial; /* M001 input/output*/
    set PI0DM002 initial; /* M002 input/output*/
    set PI0DW00 empty; /* Working storage*/
    set PI0DW01 empty; /* display storage*/
    set PIFREC empty; /* db2 dpairc.vpisum01*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    PI0DW00.PI0DWSWD = "1"; /* Map to be displayed switch*/
    PI0DW00.PI0DWOPT = "TOTAL"; /* current map option*/
    PI0DW00.PI0DWSDF = "Y"; /* Format the map switch*/
    PI0DW00.PI0DWSWR = "Y"; /* Request for data switch*/
    COMMAREA.CAITEM = " "; /* Clear passed data*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto PI0D001; /* Converse the main process*/
    ;
    ;
    PI0D001: PI0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto PI0D001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end PI0D

Function PI0D000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* Application entry validation*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/
  ;
  XSSEGTR(); /* Set transaction identification*/
  ;
   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/
    ;
    PIWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set PIWREC empty; /* Initialize work record area*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  ;
  ;
end // end PI0D000

// Main process to display a map
Function PI0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DW00.PI0DWSWD == "1") /* Map 1 was requested*/
    ;
    PI0D100(); /* Display map 1*/
    ;
  else
    ;
    if (PI0DW00.PI0DWSWD == "2") /* Map 2 was requested*/
      ;
      PI0D200(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      PIWREC.XXXMODID = "001"; /* Module identification*/
      PIWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PI0DW00.PI0DWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end PI0D001

// List the rows in the table
Function PI0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PI0D110(); /* Obtain the data to display*/
  ;
  PI0D120(); /* Format and display the map*/
  ;
  PI0D130(); /* Check attention identifier*/
  ;
  PI0D140(); /* Reset fields to normal intensity*/
  ;
  PI0D150(); /* Verify the entered data*/
  ;
  PI0D160(); /* Process valid input request*/
  ;
  ;
end // end PI0D100

// Obtain the data to display
Function PI0D110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DW00.PI0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/
    ;
    PI0DW00.PI0DWSWC = "N";
    PI0D111(); /* Select set and open cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    PI0DW00.PI0DWIXM = 0; /* Display line index*/
    ;
    while (PI0DW00.PI0DWSWC == "N") /* Until end of cursor*/
      ;
      PI0D112(); /* Fetch next row in the cursor*/
      ;
      /* ------------------------------------------------------------*/
       /* If not end of cursor, save the data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      if (PI0DW00.PI0DWSWC == "N") /* Not end of cursor*/
        PI0D113(); /* Save data in display storage*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/
    ;
    PI0D114(); /* Close the selected set cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* If no pages were formatted, indicate no data to display.*/
    /* ------------------------------------------------------------*/
    ;
    if (PI0DW00.PI0DWIXM == 0) /* No data found to display*/
      ;
      PIWREC.XXXMODID = "110"; /* Module identification*/
      PIWREC.XXXMSGNO = 18; /* No data was found to display*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/
    ;
  end
  PI0DW00.PI0DWSWR = "N"; /* Request for data switch*/
  ;
end // end PI0D110

// Select set and open cursor
Function PI0D111()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PIFREC empty; /* Clear row storage area*/
  ;
  PIFREC.XXXPGMNB = "PI1140";
  ;
  try
    call "IO5270" ("S1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0D111

// Fetch next row in the cursor
Function PI0D112()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5270" ("N1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      PI0DW00.PI0DWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0D112

// Save data in display storage
Function PI0D113()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWIXM = PI0DW00.PI0DWIXM + 1;
  ;
  PI0DW01.PI0DWDPS[PI0DWIXM] = "Y"; /* data present switch*/
  PI0DW01.YSMSUMCD[PI0DWIXM] = PIFREC.YSMSUMCD;
  PI0DW01.YSMSUMID[PI0DWIXM] = PIFREC.YSMSUMID;
  PI0DW01.PIPROCDT[PI0DWIXM] = PIFREC.PIFPRCDT;
  ;
  /* Prop / Fill-In*/
  PI0DW01.ZZQTY1[PI0DWIXM] = (PIFREC.ZZQTY[01] + PIFREC.ZZQTY[02]);
  /* Close Outs and B-Grades*/
  PI0DW01.ZZQTY2[PI0DWIXM] = PIFREC.ZZQTY[03];
  /* National Futures & Future-1*/
  PI0DW01.ZZQTY3[PI0DWIXM] = (PIFREC.ZZQTY[04] + PIFREC.ZZQTY[08]);
  /* Future-2*/
  PI0DW01.ZZQTY4[PI0DWIXM] = PIFREC.ZZQTY[05];
  /* Future-3*/
  PI0DW01.ZZQTY5[PI0DWIXM] = PIFREC.ZZQTY[06];
  /* Future-4*/
  PI0DW01.ZZQTY6[PI0DWIXM] = PIFREC.ZZQTY[07];
  /* Special Make Ups*/
  PI0DW01.ZZQTY7[PI0DWIXM] = PIFREC.ZZQTY[09];
  /* Domestic Nike Total*/
  PI0DW01.ZZQTY8[PI0DWIXM] = PIFREC.ZZQTY[10];
  /* Futures Prior*/
  PI0DW01.ZZQTY9[PI0DWIXM] = PIFREC.ZZQTY[14];
  /* Futures Current + 1*/
  PI0DW01.ZZQTY10[PI0DWIXM] = PIFREC.ZZQTY[15];
  /* Nike Misc. NIL*/
  PI0DW01.ZZQTY11[PI0DWIXM] = PIFREC.ZZQTY[11];
  /* Pack Hold Current*/
  PI0DW01.ZZQTY12[PI0DWIXM] = PIFREC.ZZQTY[12];
  ;
  /* Prop / Fill-In*/
  PI0DW01.ZZAMT1[PI0DWIXM] = ((PIFREC.ZZAMT[01] + PIFREC.ZZAMT[02])                          / (1));
  /* Close Outs and B-Grades*/
  PI0DW01.ZZAMT2[PI0DWIXM] = (PIFREC.ZZAMT[03] / 1);
  /* National Futures & Future-1*/
  PI0DW01.ZZAMT3[PI0DWIXM] = ((PIFREC.ZZAMT[04] + PIFREC.ZZAMT[08])                          / 1);
  /* Future-2*/
  PI0DW01.ZZAMT4[PI0DWIXM] = (PIFREC.ZZAMT[05] / 1);
  /* Future-3*/
  PI0DW01.ZZAMT5[PI0DWIXM] = (PIFREC.ZZAMT[06] / 1);
  /* Future-4*/
  PI0DW01.ZZAMT6[PI0DWIXM] = (PIFREC.ZZAMT[07] / 1);
  /* Special Make Ups*/
  PI0DW01.ZZAMT7[PI0DWIXM] = (PIFREC.ZZAMT[09] / 1);
  /* Domestic Nike Total*/
  PI0DW01.ZZAMT8[PI0DWIXM] = (PIFREC.ZZAMT[10] / 1);
  /* Futures Prior*/
  PI0DW01.ZZAMT9[PI0DWIXM] = (PIFREC.ZZAMT[14] / 1);
  /* Futures Current + 1*/
  PI0DW01.ZZAMT10[PI0DWIXM] = (PIFREC.ZZAMT[15] / 1);
  /* Nike Misc. NIL*/
  PI0DW01.ZZAMT11[PI0DWIXM] = (PIFREC.ZZAMT[11] / 1);
  /* Pack Hold Current*/
  PI0DW01.ZZAMT12[PI0DWIXM] = PIFREC.ZZAMT[12];
  PI0DW01.ZZAMT12[PI0DWIXM] = (PIFREC.ZZAMT[12] / 1);
  ;
  PI0DW01.PI0DCHDT[PI0DWIXM] = PIFREC.ZZZCHGDT;
  PI0DW01.PI0DCHTM[PI0DWIXM] = PIFREC.ZZZCHGTM;
  ;
   /* ******************* end of pi0d113 **********************/
end // end PI0D113

// close cursor
Function PI0D114()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5270" ("C1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    return;
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0D114

// Format and converse the map
Function PI0D120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PIWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DW00.PI0DWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (PI0DW00.PI0DWSDF == "Y") /* Map must be formatted*/
      PI0D121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  PI0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PI0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (PIWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (PIWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (PIWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PIWREC.XXXMSGNO);
      end /* Message number*/
    else
      PI0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    PI0DM001.XXXMODID = PIWREC.XXXMODID; /* Module identification*/
    ;
    set PI0DM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse PI0DM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PIWREC.XXXMODID = " "; /* Module identification*/
  PIWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = PI0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PI0DM001.CAITEM; /* Application data*/
  ;
  ;
end // end PI0D120

// Format the display data
Function PI0D121()
   /* -----------------------------------------------------------*/
   /* Get the last month-end date and the current date.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PIGREC empty; /* Clear row storage area*/
  PIGREC.XXXPGMNO = "PI1170"; /* Move parameter to be called*/
  XSPIS-IO5950(); /* Get last month-end run date*/
  PI0DW00.PI0DWSDT = PIGREC.XXXLSTDT; /* Format last month-end data*/
  ;
  set TA2REC empty; /* Clear row storage area*/
  TA2REC.TA2DTOPT = "GETDATE "; /* Move parameter to be called*/
  XSPIS-TA0040(); /* Get todays processing date*/
  ;
   /* -----------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWSDF = "N"; /* Format the map switch*/
  ;
  if (PI0DW00.PI0DWIXM > 0) /* Pages were formatted*/
    ;
    set PI0DM001 initial; /* M001 input-output area*/
    PI0DM001.PI0DMOPT = PI0DW00.PI0DWOPT;
    PI0DW00.PI0DWARG = PI0DW00.PI0DWOPT;
    if (PI0DW00.PI0DWOPT == "TOTAL")
      PI0DW00.PI0DWARG = "GR";
    end
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWARG = "WE";
    end
    if (PI0DW00.PI0DWOPT == "MWST")
      PI0DW00.PI0DWARG = "MW";
    end
    if (PI0DW00.PI0DWOPT == "NSG ")
      PI0DW00.PI0DWARG = "NS";
    end
    if (PI0DW00.PI0DWOPT == "OTHR")
      PI0DW00.PI0DWARG = "OT";
    end
    if (PI0DW00.PI0DWOPT == "DSHP")
      PI0DW00.PI0DWARG = "DS";
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
    ;
     /* move allocation data to map*/
    ;
    PI0DW00.PI0DWIXM = 1; /* Initialize line index*/
    while (PI0DW00.PI0DWIXM <= 150 /* Until all datalines found*/
     && PI0DW01.PI0DWDPS[PI0DWIXM] == "Y")
      if (PI0DW01.YSMSUMCD[PI0DWIXM] == PI0DW00.PI0DWARG)
        PI0DW00.PI0DWIXX = 0;
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 101) /* todays alloc amts*/
          PI0DW00.PI0DWIXX = 1;
          PI0DM001.XXXCURDT = PI0DW01.PI0DCHDT[PI0DWIXM];
          PI0DW00.PI0DWHH = PI0DW01.PI0DCHHH[PI0DWIXM];
          PI0DW00.PI0DWMM = PI0DW01.PI0DCHMM[PI0DWIXM];
          PI0DW00.PI0DWCLN = ":";
          PI0DW00.PI0DWAPM = "AM";
          if (PI0DW00.PI0DWHH >= 12)
            PI0DW00.PI0DWAPM = "PM";
            if (PI0DW00.PI0DWHH > 12)
              PI0DW00.PI0DWHH = PI0DW00.PI0DWHH - 12;
            end
          end
          PI0DM001.PI0DMTIM = PI0DW00.PI0DWTIM;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 109) /* yesterdays alloc amts*/
          PI0DM001.PIPRODT1 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 1st day*/
          PI0DW00.PI0DWIXX = 9;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 111) /* second alloc date*/
          PI0DM001.PIPRODT2 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 2nd day*/
          PI0DW00.PI0DWIXX = 10;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 112) /* third alloc date*/
          PI0DM001.PIPRODT3 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 3rd day*/
          PI0DW00.PI0DWIXX = 11;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 102) /* mtd    alloc amts*/
          PI0DW00.PI0DWIXX = 2;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 103) /* prev yr allocation*/
          PI0DW00.PI0DWIXX = 5;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 104) /* forcast quantity amts*/
          PI0DW00.PI0DWIXX = 3;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 202) /* mtd shipments*/
          PI0DW00.PI0DWIXX = 6;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 203) /* prev yr shiped*/
          PI0DW00.PI0DWIXX = 8;
        end
        if (PI0DW00.PI0DWIXX > 0)
          if (PI0DW00.PI0DWIXX == 1 /* Daily activity*/
           && TA2REC.TA2GRCYM == PI0DW00.PI0DWSYM) /* Not month-end*/
         /* If todays date CCYYMM not = last month-end date CCYYMM it's*/
         /* Prop / Fill-in*/
            PI0DMQ1[2] = PI0DMQ1[2] + PI0DW01.ZZAMT1[PI0DWIXM];
         /* Close Outs and B-Grades*/
            PI0DMQ2[2] = PI0DMQ2[2] + PI0DW01.ZZAMT2[PI0DWIXM];
         /* National Future & Future-1*/
            PI0DMQ3[2] = PI0DMQ3[2] + PI0DW01.ZZAMT3[PI0DWIXM];
         /* Future-2*/
            PI0DMQ4[2] = PI0DMQ4[2] + PI0DW01.ZZAMT4[PI0DWIXM];
         /* Future-3*/
            PI0DMQ5[2] = PI0DMQ5[2] + PI0DW01.ZZAMT5[PI0DWIXM];
         /* Future-4*/
            PI0DMQ6[2] = PI0DMQ6[2] + PI0DW01.ZZAMT6[PI0DWIXM];
         /*  */
          end
         /*  */
          if (PI0DW00.PI0DWIXX == 2)
         /* Prop / Fill-In*/
            PI0DMQ1[2] = PI0DMQ1[2] + PI0DW01.ZZAMT1[PI0DWIXM];
         /* Close Outs & B-Grades*/
            PI0DMQ2[2] = PI0DMQ2[2] + PI0DW01.ZZAMT2[PI0DWIXM];
         /* National Futures & Future-1*/
            PI0DMQ3[2] = PI0DMQ3[2] + PI0DW01.ZZAMT3[PI0DWIXM];
         /* Future-2*/
            PI0DMQ4[2] = PI0DMQ4[2] + PI0DW01.ZZAMT4[PI0DWIXM];
         /* Future-3*/
            PI0DMQ5[2] = PI0DMQ5[2] + PI0DW01.ZZAMT5[PI0DWIXM];
         /* Future-4*/
            PI0DMQ6[2] = PI0DMQ6[2] + PI0DW01.ZZAMT6[PI0DWIXM];
          end
          if (PI0DW00.PI0DWIXX != 2)
         /* Prop / Fill-in*/
            PI0DM001.PI0DMQ1[PI0DWIXX] = PI0DW01.ZZAMT1[PI0DWIXM];
         /* Close-Outs & B-Grades*/
            PI0DM001.PI0DMQ2[PI0DWIXX] = PI0DW01.ZZAMT2[PI0DWIXM];
         /* National Futures & Future-1*/
            PI0DM001.PI0DMQ3[PI0DWIXX] = PI0DW01.ZZAMT3[PI0DWIXM];
         /* Future-2*/
            PI0DM001.PI0DMQ4[PI0DWIXX] = PI0DW01.ZZAMT4[PI0DWIXM];
         /* Future-3*/
            PI0DM001.PI0DMQ5[PI0DWIXX] = PI0DW01.ZZAMT5[PI0DWIXM];
         /* Future-4*/
            PI0DM001.PI0DMQ6[PI0DWIXX] = PI0DW01.ZZAMT6[PI0DWIXM];
          end
        end
      end
      PI0DW00.PI0DWIXM = PI0DW00.PI0DWIXM + 1; /* Increment line index*/
      ;
    end
    ;
     /* calculate pct of forcast - allocation (pi0dMQx(4))*/
     /* calculate pct ot forcast - shipping   (pi0dMQx(7))*/
     /* using : forcast        (pi0dMQx(3))*/
     /* : MTD shipping   (pi0dMQx(6))*/
     /* : MTD allocation (pi0dMQx(2))*/
    ;
    if (PI0DMQ1[3] > 0)
      PI0DMQ1[4] = 100 * PI0DMQ1[2] / PI0DMQ1[3];
      PI0DMQ1[7] = 100 * PI0DMQ1[6] / PI0DMQ1[3];
    else
      PI0DMQ1[4] = 0;
      PI0DMQ1[7] = 0;
    end
    if (PI0DMQ2[3] > 0)
      PI0DMQ2[4] = 100 * PI0DMQ2[2] / PI0DMQ2[3];
      PI0DMQ2[7] = 100 * PI0DMQ2[6] / PI0DMQ2[3];
    else
      PI0DMQ2[4] = 0;
      PI0DMQ2[7] = 0;
    end
    if (PI0DMQ3[3] > 0)
      PI0DMQ3[4] = 100 * PI0DMQ3[2] / PI0DMQ3[3];
      PI0DMQ3[7] = 100 * PI0DMQ3[6] / PI0DMQ3[3];
    else
      PI0DMQ3[4] = 0;
      PI0DMQ3[7] = 0;
    end
    if (PI0DMQ4[3] > 0)
      PI0DMQ4[4] = 100 * PI0DMQ4[2] / PI0DMQ4[3];
      PI0DMQ4[7] = 100 * PI0DMQ4[6] / PI0DMQ4[3];
    else
      PI0DMQ4[4] = 0;
      PI0DMQ4[7] = 0;
    end
    if (PI0DMQ5[3] > 0)
      PI0DMQ5[4] = 100 * PI0DMQ5[2] / PI0DMQ5[3];
      PI0DMQ5[7] = 100 * PI0DMQ5[6] / PI0DMQ5[3];
    else
      PI0DMQ5[4] = 0;
      PI0DMQ5[7] = 0;
    end
    if (PI0DMQ6[3] > 0)
      PI0DMQ6[4] = 100 * PI0DMQ6[2] / PI0DMQ6[3];
      PI0DMQ6[7] = 100 * PI0DMQ6[6] / PI0DMQ6[3];
    else
      PI0DMQ6[4] = 0;
      PI0DMQ6[7] = 0;
    end
    ;
  end
  ;
end // end PI0D121

// Check attention identifier
Function PI0D130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (PI0DW00.PI0DWSWR == "Y") /* Request for data*/
      set PI0DW01 empty; /* M001 display storage*/
    end
    ;
    PI0DW00.PI0DWSDF = "Y"; /* Format the map switch*/
    PI0DW00.PI0DWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      set PI0DM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      PIWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PI0DM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "PI0E"; /* TO application*/
    end
    ;
    XSPIS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/
    ;
    PIWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end PI0D130

// Reset highlighted fields
Function PI0D140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PI0DM001.CATOAP initialAttributes; /* TO application*/
  set PI0DM001.CAITEM initialAttributes; /* Application data*/
  set PI0DM001.PI0DMOPT initialAttributes; /* requested data*/
  ;
  ;
end // end PI0D140

// Verify data that was entered
Function PI0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DM001.CAITEM > " ") /* Application data was entered*/
    ;
    PIWREC.XXXMODID = "150"; /* Module identification*/
    set PI0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/
  ;
  PI0D151();
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end PI0D150

// verify entered data
Function PI0D151()
   /* ------------------------------------------------------------*/
     /* Verify Entered data*/
  ;
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWWCH = PI0DM001.PI0DMOPT;
  if (PI0DW00.PI0DWCHR[1] == "W")
    PI0DW00.PI0DWOPT = "WEST";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "M")
    PI0DW00.PI0DWOPT = "MWST";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "D")
    PI0DW00.PI0DWOPT = "DSHP";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "N")
    PI0DW00.PI0DWOPT = "NSG ";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "O")
    PI0DW00.PI0DWOPT = "OTHR";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "T")
    PI0DW00.PI0DWOPT = "TOTAL";
    return;
  end
  ;
  set PI0DM001.PI0DMOPT cursor, bold;
  PIWREC.XXXMODID = 151;
  converseLib.validationFailed(8);
  exit stack;
end // end PI0D151

// Process valid input request
Function PI0D160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWSDF = "Y"; /* Format the map switch*/
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWOPT = "TOTAL";
    else
      if (PI0DW00.PI0DWOPT == "MWST")
        PI0DW00.PI0DWOPT = "WEST ";
      else
        if (PI0DW00.PI0DWOPT == "NSG ")
          PI0DW00.PI0DWOPT = "MWST ";
        else
          if (PI0DW00.PI0DWOPT == "DSHP")
            PI0DW00.PI0DWOPT = "NSG  ";
          else
            if (PI0DW00.PI0DWOPT == "OTHR")
              PI0DW00.PI0DWOPT = "DSHP ";
            else
              if (PI0DW00.PI0DWOPT == "TOTAL")
                PI0DW00.PI0DWOPT = "OTHR ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWOPT = "MWST ";
    else
      if (PI0DW00.PI0DWOPT == "MWST")
        PI0DW00.PI0DWOPT = "NSG  ";
      else
        if (PI0DW00.PI0DWOPT == "NSG ")
          PI0DW00.PI0DWOPT = "DSHP ";
        else
          if (PI0DW00.PI0DWOPT == "DSHP")
            PI0DW00.PI0DWOPT = "OTHR ";
          else
            if (PI0DW00.PI0DWOPT == "OTHR")
              PI0DW00.PI0DWOPT = "TOTAL";
            else
              if (PI0DW00.PI0DWOPT == "TOTAL")
                PI0DW00.PI0DWOPT = "WEST ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11)
    ;
    PI0DW00.PI0DWSWD = 2;
    ;
    return;
    ;
  end
end // end PI0D160

// Display the selected table row
Function PI0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PI0D210(); /* Obtain the data to display*/
  ;
  PI0D220(); /* Format and display the map*/
  ;
  PI0D230(); /* Check attention identifier*/
  ;
  PI0D240(); /* Reset fields to normal intensity*/
  ;
  PI0D250(); /* Verify the entered data*/
  ;
  PI0D260(); /* Process valid input request*/
  ;
  ;
end // end PI0D200

// Obtain the data to display
Function PI0D210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DW00.PI0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/
    ;
    PI0DW00.PI0DWSWC = "N";
    PI0D111(); /* Select set and open cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    PI0DW00.PI0DWIXM = 0; /* Display line index*/
    ;
    while (PI0DW00.PI0DWSWC == "N") /* Until end of cursor*/
      ;
      PI0D112(); /* Fetch next row in the cursor*/
      ;
      /* ------------------------------------------------------------*/
       /* If not end of cursor, save the data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      if (PI0DW00.PI0DWSWC == "N") /* Not end of cursor*/
        PI0D113(); /* Save data in display storage*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/
    ;
    PI0D114(); /* Close the selected set cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* If no pages were formatted, indicate no data to display.*/
    /* ------------------------------------------------------------*/
    ;
    if (PI0DW00.PI0DWIXM == 0) /* No data found to display*/
      ;
      PIWREC.XXXMODID = "210"; /* Module identification*/
      PIWREC.XXXMSGNO = 18; /* No data was found to display*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/
    ;
  end
  PI0DW00.PI0DWSWR = "N"; /* Request for data switch*/
  ;
end // end PI0D210

// Format and converse the map
Function PI0D220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PIWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DW00.PI0DWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (PI0DW00.PI0DWSDF == "Y") /* Map must be formatted*/
      PI0D221(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  PI0DM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PI0DM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (PIWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (PIWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (PIWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PIWREC.XXXMSGNO);
      end /* Message number*/
    else
      PI0DM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    PI0DM002.XXXMODID = PIWREC.XXXMODID; /* Module identification*/
    ;
    set PI0DM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse PI0DM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PIWREC.XXXMODID = " "; /* Module identification*/
  PIWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = PI0DM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PI0DM002.CAITEM; /* Application data*/
  ;
  ;
end // end PI0D220

// Format the display data
Function PI0D221()
   /* ------------------------------------------------------------*/
   /* Get tha last month-end date and the current date.*/
   /* change columns for paircount phs II*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PIGREC empty; /* Clear row storage area*/
  PIGREC.XXXPGMNO = "PI1170"; /* Move parameter to be called*/
  XSPIS-IO5950(); /* Get last month-end run date*/
  PI0DW00.PI0DWSDT = PIGREC.XXXLSTDT; /* Format last month-end date*/
  ;
  set TA2REC empty; /* Clear row storage area*/
  TA2REC.TA2DTOPT = "GETDATE "; /* Move parameter to be called*/
  XSPIS-TA0040(); /* Get todays processing date*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWSDF = "N"; /* Format the map switch*/
  ;
  if (PI0DW00.PI0DWIXM > 0) /* Pages were formatted*/
    ;
    set PI0DM002 initial; /* m002 input/output area*/
    PI0DM002.PI0DMOPT = PI0DW00.PI0DWOPT;
    PI0DW00.PI0DWARG = PI0DW00.PI0DWOPT;
    if (PI0DW00.PI0DWOPT == "TOTAL")
      PI0DW00.PI0DWARG = "GR";
    end
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWARG = "WE";
    end
    if (PI0DW00.PI0DWOPT == "MWST")
      PI0DW00.PI0DWARG = "MW";
    end
    if (PI0DW00.PI0DWOPT == "NSG ")
      PI0DW00.PI0DWARG = "NS";
    end
    if (PI0DW00.PI0DWOPT == "DSHP")
      PI0DW00.PI0DWARG = "DS";
    end
    if (PI0DW00.PI0DWOPT == "OTHR")
      PI0DW00.PI0DWARG = "OT";
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
    ;
     /* move allocation data to map*/
    ;
    PI0DW00.PI0DWIXM = 1; /* Initialize line index*/
    while (PI0DW00.PI0DWIXM <= 150 /* Until all datalines found*/
     && PI0DW01.PI0DWDPS[PI0DWIXM] == "Y")
      if (PI0DW01.YSMSUMCD[PI0DWIXM] == PI0DW00.PI0DWARG)
        PI0DW00.PI0DWIXX = 0;
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 101) /* todays alloc amts*/
          PI0DW00.PI0DWIXX = 1;
          PI0DM002.XXXCURDT = PI0DW01.PI0DCHDT[PI0DWIXM];
          PI0DW00.PI0DWHH = PI0DW01.PI0DCHHH[PI0DWIXM];
          PI0DW00.PI0DWMM = PI0DW01.PI0DCHMM[PI0DWIXM];
          PI0DW00.PI0DWCLN = ":";
          PI0DW00.PI0DWAPM = "AM";
          if (PI0DW00.PI0DWHH >= 12)
            PI0DW00.PI0DWAPM = "PM";
            if (PI0DW00.PI0DWHH > 12)
              PI0DW00.PI0DWHH = PI0DW00.PI0DWHH - 12;
            end
          end
          PI0DM002.PI0DMTIM = PI0DW00.PI0DWTIM;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 109) /* yesterdays alloc amts*/
          PI0DM002.PIPRODT1 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 1st day*/
          PI0DW00.PI0DWIXX = 9;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 111) /* second day*/
          PI0DM002.PIPRODT2 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 2nd day*/
          PI0DW00.PI0DWIXX = 10;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 112) /* third day*/
          PI0DM002.PIPRODT3 = PI0DW01.PIPROCDT[PI0DWIXM]; /* 3rd day*/
          PI0DW00.PI0DWIXX = 11;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 102) /* mtd    alloc amts*/
          PI0DW00.PI0DWIXX = 2;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 103) /* prev yr allocation*/
          PI0DW00.PI0DWIXX = 5;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 104) /* forcast quantity amts*/
          PI0DW00.PI0DWIXX = 3;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 202) /* mtd    shippments*/
          PI0DW00.PI0DWIXX = 6;
        end
        if (PI0DW01.YSMSUMID[PI0DWIXM] == 203) /* previous yr shiped*/
          PI0DW00.PI0DWIXX = 8;
        end
        if (PI0DW00.PI0DWIXX > 0)
          if (PI0DW00.PI0DWIXX == 1 /* Daily actavity*/
           && TA2REC.TA2GRCYM == PI0DW00.PI0DWSYM) /* Not month-end*/
         /* If todays date CCYYMM not = last month-end date CCYYMM it's*/
         /* month-end and don't add todays totals to allocation MTD*/
         /* Special Make-Ups*/
            PI0DMQ7[2] = PI0DMQ7[2] + PI0DW01.ZZAMT7[PI0DWIXM];
         /* Domestic Nike Total*/
            PI0DMQ8[2] = PI0DMQ8[2] + PI0DW01.ZZAMT8[PI0DWIXM];
         /* Futures Prior*/
            PI0DMQ9[2] = PI0DMQ9[2] + PI0DW01.ZZAMT9[PI0DWIXM];
         /* Futures Current + 1*/
            PI0DMQ10[2] = PI0DMQ10[2] + PI0DW01.ZZAMT10[PI0DWIXM];
         /* Nike Misc/NIL*/
            PI0DMQ11[2] = PI0DMQ11[2] + PI0DW01.ZZAMT11[PI0DWIXM];
         /* Pack & Hold Current*/
            PI0DMQ12[2] = PI0DMQ12[2] + PI0DW01.ZZAMT12[PI0DWIXM];
         /* Unused Column*/
         /* PI0DMQ13(2) = PI0DMQ13(2) + PI0DW01.ZZAMT13(PI0DWIXM);*/
          end
          if (PI0DW00.PI0DWIXX == 2)
         /* Special Make-Ups*/
            PI0DMQ7[2] = PI0DMQ7[2] + PI0DW01.ZZAMT7[PI0DWIXM];
         /* Domestic Nike Total*/
            PI0DMQ8[2] = PI0DMQ8[2] + PI0DW01.ZZAMT8[PI0DWIXM];
         /* Futures Prior*/
            PI0DMQ9[2] = PI0DMQ9[2] + PI0DW01.ZZAMT9[PI0DWIXM];
         /* Futures Current + 1*/
            PI0DMQ10[2] = PI0DMQ10[2] + PI0DW01.ZZAMT10[PI0DWIXM];
         /* Nike Misc/NIL*/
            PI0DMQ11[2] = PI0DMQ11[2] + PI0DW01.ZZAMT11[PI0DWIXM];
         /* Pack & Hold Current*/
            PI0DMQ12[2] = PI0DMQ12[2] + PI0DW01.ZZAMT12[PI0DWIXM];
         /* Unused Column*/
         /* PI0DMQ13(2) = PI0DMQ13(2) + PI0DW01.ZZAMT13(PI0DWIXM);*/
          end
          if (PI0DW00.PI0DWIXX != 2)
         /* Special Make-Ups*/
            PI0DM002.PI0DMQ7[PI0DWIXX] = PI0DW01.ZZAMT7[PI0DWIXM];
         /* Nike Domestic Total*/
            PI0DM002.PI0DMQ8[PI0DWIXX] = PI0DW01.ZZAMT8[PI0DWIXM];
         /* Futures Prior*/
            PI0DM002.PI0DMQ9[PI0DWIXX] = PI0DW01.ZZAMT9[PI0DWIXM];
         /* Futures Current + 1*/
            PI0DM002.PI0DMQ10[PI0DWIXX] = PI0DW01.ZZAMT10[PI0DWIXM];
         /* Nike Misc/NIL*/
            PI0DM002.PI0DMQ11[PI0DWIXX] = PI0DW01.ZZAMT11[PI0DWIXM];
         /* Pack and Hold Current*/
            PI0DM002.PI0DMQ12[PI0DWIXX] = PI0DW01.ZZAMT12[PI0DWIXM];
         /* Unused Column*/
         /* MOVE PI0DW01.ZZAMT13(PI0DWIXM) TO PI0DM002.PI0DMQ13(PI0DWIXX);*/
          end
        end
      end
      PI0DW00.PI0DWIXM = PI0DW00.PI0DWIXM + 1; /* Increment line index*/
      ;
    end
    ;
     /* calculate pct of forcast- allocation (pi0dMQx(4))*/
     /* calculate pct of forcast- shippments (pi0dMQx(7))*/
     /* using : forcast        (pi0cMQx(3))*/
     /* : MTD allocation (pi0dMQx(2))*/
     /* : MTD shipping   (pi0dMQx(6))*/
    ;
    if (PI0DMQ7[3] > 0)
      PI0DMQ7[4] = 100 * PI0DMQ7[2] / PI0DMQ7[3];
      PI0DMQ7[7] = 100 * PI0DMQ7[6] / PI0DMQ7[3];
    else
      PI0DMQ7[4] = 0;
      PI0DMQ7[7] = 0;
    end
    if (PI0DMQ8[3] > 0)
      PI0DMQ8[4] = 100 * PI0DMQ8[2] / PI0DMQ8[3];
      PI0DMQ8[7] = 100 * PI0DMQ8[6] / PI0DMQ8[3];
    else
      PI0DMQ8[4] = 0;
      PI0DMQ8[7] = 0;
    end
    if (PI0DMQ9[3] > 0)
      PI0DMQ9[4] = 100 * PI0DMQ9[2] / PI0DMQ9[3];
      PI0DMQ9[7] = 100 * PI0DMQ9[6] / PI0DMQ9[3];
    else
      PI0DMQ9[4] = 0;
      PI0DMQ9[7] = 0;
    end
    if (PI0DMQ10[3] > 0)
      PI0DMQ10[4] = 100 * PI0DMQ10[2] / PI0DMQ10[3];
      PI0DMQ10[7] = 100 * PI0DMQ10[6] / PI0DMQ10[3];
    else
      PI0DMQ10[4] = 0;
      PI0DMQ10[7] = 0;
    end
    if (PI0DMQ11[3] > 0)
      PI0DMQ11[4] = 100 * PI0DMQ11[2] / PI0DMQ11[3];
      PI0DMQ11[7] = 100 * PI0DMQ11[6] / PI0DMQ11[3];
    else
      PI0DMQ11[4] = 0;
      PI0DMQ11[7] = 0;
    end
    if (PI0DMQ12[3] > 0)
      PI0DMQ12[4] = 100 * PI0DMQ12[2] / PI0DMQ12[3];
      PI0DMQ12[7] = 100 * PI0DMQ12[6] / PI0DMQ12[3];
    else
      PI0DMQ12[4] = 0;
      PI0DMQ12[7] = 0;
    end
    ;
  end
  ;
end // end PI0D221

// Check attention identifier
Function PI0D230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (PI0DW00.PI0DWSWR == "Y") /* Request for data*/
      set PI0DW01 empty; /* m002 display storage*/
    end
    ;
    PI0DW00.PI0DWSDF = "Y"; /* Format the map switch*/
    PI0DW00.PI0DWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      set PI0DM002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      PIWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6) /* or pf6 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PI0DM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "PI0E"; /* TO application*/
    end
    ;
    XSPIS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10) /* and PF10 was not pressed*/
    ;
    PIWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end PI0D230

// Reset highlighted fields
Function PI0D240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PI0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PI0DM002.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end PI0D240

// Verify data that was entered
Function PI0D250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0DM002.CAITEM > " ") /* Application data was entered*/
    ;
    PIWREC.XXXMODID = "250"; /* Module identification*/
    set PI0DM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/
  ;
  PI0D251();
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end PI0D250

// verify entered data
Function PI0D251()
   /* ------------------------------------------------------------*/
     /* Verify Entered data*/
  ;
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWWCH = PI0DM002.PI0DMOPT;
  if (PI0DW00.PI0DWCHR[1] == "W")
    PI0DW00.PI0DWOPT = "WEST";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "M")
    PI0DW00.PI0DWOPT = "MWST";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "N")
    PI0DW00.PI0DWOPT = "NSG ";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "D")
    PI0DW00.PI0DWOPT = "DSHP";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "O")
    PI0DW00.PI0DWOPT = "OTHR";
    return;
  end
  ;
  if (PI0DW00.PI0DWCHR[1] == "T")
    PI0DW00.PI0DWOPT = "TOTAL";
    return;
  end
  ;
  converseLib.validationFailed(8);
  PIWREC.XXXMODID = 251;
  set PI0DM002.PI0DMOPT cursor, bold;
end // end PI0D251

// Process valid input request
Function PI0D260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  PI0DW00.PI0DWSDF = "Y"; /* Format the map switch*/
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWOPT = "TOTAL";
    else
      if (PI0DW00.PI0DWOPT == "MWST")
        PI0DW00.PI0DWOPT = "WEST ";
      else
        if (PI0DW00.PI0DWOPT == "NSG ")
          PI0DW00.PI0DWOPT = "MWST ";
        else
          if (PI0DW00.PI0DWOPT == "DSHP")
            PI0DW00.PI0DWOPT = "NSG  ";
          else
            if (PI0DW00.PI0DWOPT == "OTHR")
              PI0DW00.PI0DWOPT = "DSHP ";
            else
              if (PI0DW00.PI0DWOPT == "TOTAL")
                PI0DW00.PI0DWOPT = "OTHR ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    if (PI0DW00.PI0DWOPT == "WEST")
      PI0DW00.PI0DWOPT = "MWST ";
    else
      if (PI0DW00.PI0DWOPT == "MWST")
        PI0DW00.PI0DWOPT = "NSG  ";
      else
        if (PI0DW00.PI0DWOPT == "NSG ")
          PI0DW00.PI0DWOPT = "DSHP ";
        else
          if (PI0DW00.PI0DWOPT == "DSHP")
            PI0DW00.PI0DWOPT = "OTHR ";
          else
            if (PI0DW00.PI0DWOPT == "OTHR")
              PI0DW00.PI0DWOPT = "TOTAL";
            else
              if (PI0DW00.PI0DWOPT == "TOTAL")
                PI0DW00.PI0DWOPT = "WEST ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf10)
    ;
    PI0DW00.PI0DWSWD = 1;
    ;
    return;
    ;
  end
end // end PI0D260

//*** RECORD=PI0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PI0DW00 type basicRecord
  10 PI0DWIXM PI0DWIXM ; 
  10 PI0DWIXX PI0DWIXX ; 
  10 PI0DWSWC PI0DWSWC ; 
  10 PI0DWSWD PI0DWSWD ; 
  10 PI0DWSDF PI0DWSDF ; 
  10 PI0DWSWR PI0DWSWR ; 
  10 PI0DWOPT PI0DWOPT ; 
  10 PI0DWARG PI0DWARG ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PI0DWPTY PI0DWPTY [5] ; 
  10 PI0DWTIM PI0DWTIM ; 
    15 PI0DWHH PI0DWHH ; 
    15 PI0DWCLN PI0DWCLN ; 
    15 PI0DWMM PI0DWMM ; 
    15 * char(1) ; 
    15 PI0DWAPM PI0DWAPM ; 
  10 PI0DWWCH PI0DWWCH ; 
    15 PI0DWCHR PI0DWCHR [5] ; 
  10 PI0DWF1 PI0DWF1 ; 
  10 PI0DWF2 PI0DWF2 ; 
  10 PI0DWF3 PI0DWF3 ; 
  10 PI0DWF4 PI0DWF4 ; 
  10 PI0DWF5 PI0DWF5 ; 
  10 PI0DWF6 PI0DWF6 ; 
  10 PI0DWF7 PI0DWF7 ; 
  10 PI0DWF8 PI0DWF8 ; 
  10 PI0DWF9 PI0DWF9 ; 
  10 PI0DWF10 PI0DWF10 ; 
  10 PI0DWF11 PI0DWF11 ; 
  10 PI0DWF12 PI0DWF12 ; 
  10 PI0DWF13 PI0DWF13 ; 
  10 PI0DWW1 PI0DWW1 ; 
  10 PI0DWW2 PI0DWW2 ; 
  10 PI0DWW3 PI0DWW3 ; 
  10 PI0DWW4 PI0DWW4 ; 
  10 PI0DWW5 PI0DWW5 ; 
  10 PI0DWW6 PI0DWW6 ; 
  10 PI0DWW7 PI0DWW7 ; 
  10 PI0DWW8 PI0DWW8 ; 
  10 PI0DWW9 PI0DWW9 ; 
  10 PI0DWW10 PI0DWW10 ; 
  10 PI0DWW11 PI0DWW11 ; 
  10 PI0DWW12 PI0DWW12 ; 
  10 PI0DWW13 PI0DWW13 ; 
  10 PI0DWP1 PI0DWP1 ; 
  10 PI0DWP2 PI0DWP2 ; 
  10 PI0DWP3 PI0DWP3 ; 
  10 PI0DWP4 PI0DWP4 ; 
  10 PI0DWP5 PI0DWP5 ; 
  10 PI0DWP6 PI0DWP6 ; 
  10 PI0DWP7 PI0DWP7 ; 
  10 PI0DWP8 PI0DWP8 ; 
  10 PI0DWP9 PI0DWP9 ; 
  10 PI0DWP10 PI0DWP10 ; 
  10 PI0DWP11 PI0DWP11 ; 
  10 PI0DWP12 PI0DWP12 ; 
  10 PI0DWP13 PI0DWP13 ; 
  10 PI0DWSDT PI0DWSDT ; 
    15 PI0DWSYM PI0DWSYM ; 
    15 * num(2) ; 
end // end PI0DW00

//*** RECORD=PI0DW01 ****
// ------------------------
// Map 001 and 002 display storage.
// 03/10/97   WRYAN    Added PIPROCDT for screen display.
// ------------------------
// ***********************
Record PI0DW01 type basicRecord
  5 PI0DWGRP PI0DWGRP [150] ; 
    10 PI0DWDPS PI0DWDPS ; 
    10 YSMSUMCD YSMSUMCD ; 
    10 YSMSUMID YSMSUMID ; 
    10 PIPROCDT PIPROCDT ; 
    10 ZZQTY1 ZZQTY1 ; 
    10 ZZQTY2 ZZQTY2 ; 
    10 ZZQTY3 ZZQTY3 ; 
    10 ZZQTY4 ZZQTY4 ; 
    10 ZZQTY5 ZZQTY5 ; 
    10 ZZQTY6 ZZQTY6 ; 
    10 ZZQTY7 ZZQTY7 ; 
    10 ZZQTY8 ZZQTY8 ; 
    10 ZZQTY9 ZZQTY9 ; 
    10 ZZQTY10 ZZQTY10 ; 
    10 ZZQTY11 ZZQTY11 ; 
    10 ZZQTY12 ZZQTY12 ; 
    10 ZZQTY13 ZZQTY13 ; 
    10 ZZQTY14 ZZQTY14 ; 
    10 ZZQTY15 ZZQTY15 ; 
    10 ZZQTY16 ZZQTY16 ; 
    10 ZZQTY17 ZZQTY17 ; 
    10 ZZQTY18 ZZQTY18 ; 
    10 ZZQTY19 ZZQTY19 ; 
    10 ZZQTY20 ZZQTY20 ; 
    10 ZZAMT1 ZZAMT1 ; 
    10 ZZAMT2 ZZAMT2 ; 
    10 ZZAMT3 ZZAMT3 ; 
    10 ZZAMT4 ZZAMT4 ; 
    10 ZZAMT5 ZZAMT5 ; 
    10 ZZAMT6 ZZAMT6 ; 
    10 ZZAMT7 ZZAMT7 ; 
    10 ZZAMT8 ZZAMT8 ; 
    10 ZZAMT9 ZZAMT9 ; 
    10 ZZAMT10 ZZAMT10 ; 
    10 ZZAMT11 ZZAMT11 ; 
    10 ZZAMT12 ZZAMT12 ; 
    10 ZZAMT13 ZZAMT13 ; 
    10 ZZAMT14 ZZAMT14 ; 
    10 ZZAMT15 ZZAMT15 ; 
    10 ZZAMT16 ZZAMT16 ; 
    10 ZZAMT17 ZZAMT17 ; 
    10 ZZAMT18 ZZAMT18 ; 
    10 ZZAMT19 ZZAMT19 ; 
    10 ZZAMT20 ZZAMT20 ; 
    10 PI0DCHDT PI0DCHDT ; 
    10 PI0DCHTM PI0DCHTM ; 
      15 PI0DCHHH PI0DCHHH ; 
      15 PI0DCHMM PI0DCHMM ; 
end // end PI0DW01

// ZZ_CHNG_DT
DataItem PI0DCHDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hour
DataItem PI0DCHHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minute
DataItem PI0DCHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_HHMM
DataItem PI0DCHTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// am/pm
DataItem PI0DWAPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working search arg
DataItem PI0DWARG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PI0DWCHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// colon ':'
DataItem PI0DWCLN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data in row
DataItem PI0DWDPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWF9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PI0DWGRP char(227)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour
DataItem PI0DWHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end



DataItem PI0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PI0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index
DataItem PI0DWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current map option
DataItem PI0DWOPT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field
DataItem PI0DWP1 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP10 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP11 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP12 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP13 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP2 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP3 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP4 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP5 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP6 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP7 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP8 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0DWP9 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page hdg values
DataItem PI0DWPTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PI0DWSDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last month-end date
DataItem PI0DWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PI0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PI0DWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem PI0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last month-end CCYYMM
DataItem PI0DWSYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen time format
DataItem PI0DWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0DWW9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem PI0DWWCH char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
