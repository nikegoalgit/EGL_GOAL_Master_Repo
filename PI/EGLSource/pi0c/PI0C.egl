package pi0c;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSPIS-IO5950;
import corpcom4.XSPIS-TA0040;
import corpcom4.XSPIS01;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.*;
import pi.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx09.*;
import xx09.YSMSUMCD;
import xx09.YSMSUMID;
//*** PROGRAM=PI0C ****
// This application allows a user to inquire rows in db2 table
// dpairc.vpitbl01 (psdo report table).
// 
// it has two screens a right and left half of the report.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      10/15/90  jcampb  New application.
//          11/08/90  jcampb  add current to mtd
//          11/08/90  jcampb  add yesterdays quantities
//          04/25/91  jcampb  reformat columns
// PI#1004  08/19/92  rmorga  update percent forcast w/today's
// PI#0     12/15/92  rmorga  merge futures 2 and 3 on maps
// PI#0     06/24/93  tharr1  increased the number of occurancs
//                            of pi0cw01.pi0cwgrp to 150.
// 1H002    07/14/93  tharr1  add othr region don't update mtd-
//                            allc after end of calender month.
//          10/08/93  jlucas  added record pizrec
// PI9001   02/25/94  hkempe  Generate/Compile to use revised
//                            COMMAREA and XSPIS01.  Delete any
//                            reference to PIZREC.
// PI9002   03/10/97  WRYAN   Paircount Enhancements
//                            Removed row for 'YESTERDAY'
//                            allocations and two blank rows.
//                            Added rows for three days of
//                            allocations based on PI_PROC_DT.
//                            Added corresponding columns for
//                            amounts and quantiies.
// PI9003  05/28/97  WRYAN    Phase II - Combine columns and
//                            new columns.  Changes made:
//                            1) Screen map PI0CM001 and map
//                            format process PI0C121.
//                            2) Screen map PI0CM002 and map
//                            format process PI0C221.
// pi9004 07/31/97   bbasha   Phase II remove combine columns
//                            from pi0c121 and move to pi0c113
//                            so working storage corresponds to
//                            the map.  this was done to fix
//                            a problem where values were
//                            changing when scrolling right and
//                            left.
// *********************
Program PI0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PI00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PI0CW00 PI0CW00; // record
  PI0CW01 PI0CW01; // record
  PIFREC PIFREC; // record
  PIGREC PIGREC; // record
  PIWREC PIWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PI0CM.PI0CM001,  // forms
      PI0CM.PI0CM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PI0C000: PI0C000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set PI0CM001 initial; /* M001 input/output*/
    set PI0CM002 initial; /* M002 input/output*/
    set PI0CW00 empty; /* Working storage*/
    set PI0CW01 empty; /* display storage*/
    set PIFREC empty; /* db2 dpairc.vpisum01*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    PI0CW00.PI0CWSWD = "1"; /* Map to be displayed switch*/
    PI0CW00.PI0CWOPT = "TOTAL"; /* current map option*/
    PI0CW00.PI0CWSDF = "Y"; /* Format the map switch*/
    PI0CW00.PI0CWSWR = "Y"; /* Request for data switch*/
    COMMAREA.CAITEM = " "; /* Clear passed data*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto PI0C001; /* Converse the main process*/
    ;
    ;
    PI0C001: PI0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto PI0C001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end PI0C

Function PI0C000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* Application entry validation*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/
  ;
  XSSEGTR(); /* Set transaction identification*/
  ;
   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* Same system*/
    ;
    PIWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
  else
    set PIWREC empty; /* Initialize work record area*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  ;
  ;
end // end PI0C000

// Main process to display a map
Function PI0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CW00.PI0CWSWD == "1") /* Map 1 was requested*/
    ;
    PI0C100(); /* Display map 1*/
    ;
  else
    ;
    if (PI0CW00.PI0CWSWD == "2") /* Map 2 was requested*/
      ;
      PI0C200(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      PIWREC.XXXMODID = "001"; /* Module identification*/
      PIWREC.XXXMSGNO = 10; /* Unexpected error occurred*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PI0CW00.PI0CWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end PI0C001

// List the rows in the table
Function PI0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PI0C110(); /* Obtain the data to display*/
  ;
  PI0C120(); /* Format and display the map*/
  ;
  PI0C130(); /* Check attention identifier*/
  ;
  PI0C140(); /* Reset fields to normal intensity*/
  ;
  PI0C150(); /* Verify the entered data*/
  ;
  PI0C160(); /* Process valid input request*/
  ;
  ;
end // end PI0C100

// Obtain the data to display
Function PI0C110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CW00.PI0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/
    ;
    PI0CW00.PI0CWSWC = "N";
    PI0C111(); /* Select set and open cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    PI0CW00.PI0CWIXM = 0; /* Display line index*/
    ;
    while (PI0CW00.PI0CWSWC == "N") /* Until end of cursor*/
      ;
      PI0C112(); /* Fetch next row in the cursor*/
      ;
      /* ------------------------------------------------------------*/
       /* If not end of cursor, save the data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      if (PI0CW00.PI0CWSWC == "N") /* Not end of cursor*/
        PI0C113(); /* Save data in display storage*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/
    ;
    PI0C114(); /* Close the selected set cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* If no pages were formatted, indicate no data to display.*/
    /* ------------------------------------------------------------*/
    ;
    if (PI0CW00.PI0CWIXM == 0) /* No data found to display*/
      ;
      PIWREC.XXXMODID = "110"; /* Module identification*/
      PIWREC.XXXMSGNO = 18; /* No data was found to display*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/
    ;
  end
  PI0CW00.PI0CWSWR = "N"; /* Request for data switch*/
  ;
end // end PI0C110

// Select set and open cursor
Function PI0C111()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set PIFREC empty; /* Clear row storage area*/
  ;
  PIFREC.XXXPGMNB = "PI1040";
  ;
  try
    call "IO5270" ("S1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0C111

// Fetch next row in the cursor
Function PI0C112()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5270" ("N1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      PI0CW00.PI0CWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0C112

// Save data in display storage
Function PI0C113()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWIXM = PI0CW00.PI0CWIXM + 1;
  ;
  PI0CW01.PI0CWDPS[PI0CWIXM] = "Y"; /* data present switch*/
  PI0CW01.YSMSUMCD[PI0CWIXM] = PIFREC.YSMSUMCD;
  PI0CW01.YSMSUMID[PI0CWIXM] = PIFREC.YSMSUMID;
  PI0CW01.PIPROCDT[PI0CWIXM] = PIFREC.PIFPRCDT;
  ;
  /* Prop Fill-in*/
  PI0CW01.ZZQTY1[PI0CWIXM] = (PIFREC.ZZQTY[01]   + PIFREC.ZZQTY[02]   + PIFREC.ZZQTY[03]);
  if (PI0CWIXM == 5)
    PI0CW01.ZZQTY1[PI0CWIXM] = PI0CW01.ZZQTY1[PI0CWIXM]     + PI0CW01.ZZQTY1[1];
  end
  /* B-Grades*/
  PI0CW01.ZZQTY2[PI0CWIXM] = PIFREC.ZZQTY[04];
  /* Close Outs*/
  PI0CW01.ZZQTY3[PI0CWIXM] = PIFREC.ZZQTY[05];
  /* Futures Prior*/
  PI0CW01.ZZQTY4[PI0CWIXM] = PIFREC.ZZQTY[14];
  /* Futures Current*/
  PI0CW01.ZZQTY5[PI0CWIXM] = ((PIFREC.ZZQTY[06]   + PIFREC.ZZQTY[07]   + PIFREC.ZZQTY[08])   - (PIFREC.ZZQTY[14]   + PIFREC.ZZQTY[15]   + PIFREC.ZZQTY[16]));
  /* Futures Current + 1*/
  PI0CW01.ZZQTY6[PI0CWIXM] = PIFREC.ZZQTY[15];
  /* Futures Current + 2*/
  PI0CW01.ZZQTY7[PI0CWIXM] = PIFREC.ZZQTY[16];
  /* Domsetic Nike Total*/
  PI0CW01.ZZQTY8[PI0CWIXM] = PIFREC.ZZQTY[09];
  /* Misc/Nil*/
  if (PIFREC.YSMSUMID == 203)
    PI0CW01.ZZQTY9[PI0CWIXM] = PIFREC.ZZQTY[11];
  else
    PI0CW01.ZZQTY9[PI0CWIXM] = PIFREC.ZZQTY[10];
  end
  /* Pack Hold Current*/
  if (PIFREC.YSMSUMID == 203)
    PI0CW01.ZZQTY10[PI0CWIXM] = PIFREC.ZZQTY[12];
  else
    PI0CW01.ZZQTY10[PI0CWIXM] = PIFREC.ZZQTY[11];
  end
  PI0CW01.ZZAMT1[PI0CWIXM] = PIFREC.ZZAMT[01];
  PI0CW01.ZZAMT2[PI0CWIXM] = PIFREC.ZZAMT[02];
  PI0CW01.ZZAMT3[PI0CWIXM] = PIFREC.ZZAMT[03];
  PI0CW01.ZZAMT4[PI0CWIXM] = PIFREC.ZZAMT[04];
  PI0CW01.ZZAMT5[PI0CWIXM] = PIFREC.ZZAMT[05];
  PI0CW01.ZZAMT6[PI0CWIXM] = PIFREC.ZZAMT[06];
  PI0CW01.ZZAMT7[PI0CWIXM] = PIFREC.ZZAMT[07];
  PI0CW01.ZZAMT8[PI0CWIXM] = PIFREC.ZZAMT[08];
  PI0CW01.ZZAMT9[PI0CWIXM] = PIFREC.ZZAMT[09];
  PI0CW01.ZZAMT10[PI0CWIXM] = PIFREC.ZZAMT[10];
  PI0CW01.ZZAMT11[PI0CWIXM] = PIFREC.ZZAMT[11];
  PI0CW01.ZZAMT12[PI0CWIXM] = PIFREC.ZZAMT[12];
  PI0CW01.ZZAMT13[PI0CWIXM] = PIFREC.ZZAMT[13];
  PI0CW01.ZZAMT14[PI0CWIXM] = PIFREC.ZZAMT[14];
  PI0CW01.ZZAMT15[PI0CWIXM] = PIFREC.ZZAMT[15];
  PI0CW01.ZZAMT16[PI0CWIXM] = PIFREC.ZZAMT[16];
  PI0CW01.ZZAMT17[PI0CWIXM] = PIFREC.ZZAMT[17];
  PI0CW01.ZZAMT18[PI0CWIXM] = PIFREC.ZZAMT[18];
  PI0CW01.ZZAMT19[PI0CWIXM] = PIFREC.ZZAMT[19];
  PI0CW01.ZZAMT20[PI0CWIXM] = PIFREC.ZZAMT[20];
  ;
  PI0CW01.PI0CCHDT[PI0CWIXM] = PIFREC.ZZZCHGDT;
  PI0CW01.PI0CCHTM[PI0CWIXM] = PIFREC.ZZZCHGTM;
  ;
   /* ******************* end of pi0c113 **********************/
end // end PI0C113

// close cursor
Function PI0C114()
   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5270" ("C1", SQLCA, PIFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  PIWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    return;
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PIWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPAIRC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPISUM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PIFREC.XXXPGMNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end PI0C114

// Format and converse the map
Function PI0C120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PIWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CW00.PI0CWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (PI0CW00.PI0CWSDF == "Y") /* Map must be formatted*/
      PI0C121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  PI0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PI0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (PIWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (PIWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (PIWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PIWREC.XXXMSGNO);
      end /* Message number*/
    else
      PI0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    PI0CM001.XXXMODID = PIWREC.XXXMODID; /* Module identification*/
    ;
    set PI0CM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse PI0CM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PIWREC.XXXMODID = " "; /* Module identification*/
  PIWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = PI0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PI0CM001.CAITEM; /* Application data*/
  ;
  ;
end // end PI0C120

// Format the display data
Function PI0C121()
   /* -----------------------------------------------------------*/
   /* Get the last month-end date and the current date.*/
   /* -----------------------------------------------------------*/
  ;
  ;
  set PIGREC empty; /* Clear row storage area*/
  PIGREC.XXXPGMNO = "PI1170"; /* Move parameter to be called*/
  XSPIS-IO5950(); /* Get last mnth-end run date*/
  PI0CW00.PI0CWSDT = PIGREC.XXXLSTDT; /* Format last month-end date*/
  ;
  set TA2REC empty; /* Clear row storage area*/
  TA2REC.TA2DTOPT = "GETDATE "; /* Move parameter to be called*/
  XSPIS-TA0040(); /* Get todays processing date*/
  ;
   /* -----------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* -----------------------------------------------------------*/
  ;
  PI0CW00.PI0CWSDF = "N"; /* Format the map switch*/
  ;
  if (PI0CW00.PI0CWIXM > 0) /* Pages were formatted*/
    ;
    set PI0CM001 initial; /* M001 input-output area*/
    PI0CM001.PI0CMOPT = PI0CW00.PI0CWOPT;
    PI0CW00.PI0CWARG = PI0CW00.PI0CWOPT;
    if (PI0CW00.PI0CWOPT == "TOTAL")
      PI0CW00.PI0CWARG = "GR";
    end
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWARG = "WE";
    end
    if (PI0CW00.PI0CWOPT == "MWST")
      PI0CW00.PI0CWARG = "MW";
    end
    if (PI0CW00.PI0CWOPT == "EAST")
      PI0CW00.PI0CWARG = "EA";
    end
    if (PI0CW00.PI0CWOPT == "DSHP")
      PI0CW00.PI0CWARG = "DS";
    end
    if (PI0CW00.PI0CWOPT == "OTHR")
      PI0CW00.PI0CWARG = "OT";
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
    ;
     /* move allocation data to map*/

    ;
    PI0CW00.PI0CWIXM = 1; /* Initialize line index*/
    while (PI0CW00.PI0CWIXM <= 150 /* Until all datalines found*/
     && PI0CW01.PI0CWDPS[PI0CWIXM] == "Y")
      if (PI0CW01.YSMSUMCD[PI0CWIXM] == PI0CW00.PI0CWARG)
        PI0CW00.PI0CWIXX = 0;
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 101) /* todays alloc units*/
          PI0CW00.PI0CWIXX = 1;
          PI0CM001.XXXCURDT = PI0CW01.PI0CCHDT[PI0CWIXM];
          PI0CW00.PI0CWHH = PI0CW01.PI0CCHHH[PI0CWIXM];
          PI0CW00.PI0CWMM = PI0CW01.PI0CCHMM[PI0CWIXM];
          PI0CW00.PI0CWCLN = ":";
          PI0CW00.PI0CWAPM = "AM";
          if (PI0CW00.PI0CWHH >= 12)
            PI0CW00.PI0CWAPM = "PM";
            if (PI0CW00.PI0CWHH > 12)
              PI0CW00.PI0CWHH = PI0CW00.PI0CWHH - 12;
            end
          end
          PI0CM001.PI0CMTIM = PI0CW00.PI0CWTIM;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 102) /* mtd    alloc units*/
          PI0CW00.PI0CWIXX = 2;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 103) /* prev yr allocation*/
          PI0CW00.PI0CWIXX = 5;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 104) /* forcast quantity units*/
          PI0CW00.PI0CWIXX = 3;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 109) /* yesterdays alloc units*/
          PI0CM001.PIPRODT1 = PI0CW01.PIPROCDT[PI0CWIXM]; /* first day*/
          PI0CW00.PI0CWIXX = 09;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 111) /* second alloc date*/
          PI0CM001.PIPRODT2 = PI0CW01.PIPROCDT[PI0CWIXM]; /* 2nd day*/
          PI0CW00.PI0CWIXX = 10;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 112) /* third alloc date*/
          PI0CM001.PIPRODT3 = PI0CW01.PIPROCDT[PI0CWIXM]; /* 3rd day*/
          PI0CW00.PI0CWIXX = 11;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 202) /* mtd  shipments*/
          PI0CW00.PI0CWIXX = 6;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 203) /* previous yr shipped*/
          PI0CW00.PI0CWIXX = 8;
         /*  */
        end
         /*  */
        if (PI0CW00.PI0CWIXX > 0)
          if (PI0CW00.PI0CWIXX == 1 /* dly activity*/
           && TA2REC.TA2GRCYM == PI0CW00.PI0CWSYM) /* not month end*/
         /* if todays date CCYYMM not = last month-end date CCYYMM it's*/
         /* month-end and don't add todays totals to allocation MTD*/
         /* Prop Fill-in*/
            PI0CMQ1[2] = PI0CMQ1[2] + PI0CW01.ZZQTY1[PI0CWIXM];
         /* B-Grades*/
            PI0CMQ2[2] = PI0CMQ2[2] + PI0CW01.ZZQTY2[PI0CWIXM];
         /* Close Outs*/
            PI0CMQ3[2] = PI0CMQ3[2] + PI0CW01.ZZQTY3[PI0CWIXM];
         /* Futures Prior*/
            PI0CMQ4[2] = PI0CMQ4[2] + PI0CW01.ZZQTY4[PI0CWIXM];
         /* Futures Current*/
            PI0CMQ5[2] = PI0CMQ5[2] + PI0CW01.ZZQTY5[PI0CWIXM];
         /* Futures Current + 1*/
            PI0CMQ6[2] = PI0CMQ6[2] + PI0CW01.ZZQTY6[PI0CWIXM];
         /* Futures Current + 2*/
            PI0CMQ7[2] = PI0CMQ7[2] + PI0CW01.ZZQTY7[PI0CWIXM];
         /*  */
          end
         /*  */
          if (PI0CW00.PI0CWIXX == 2) /* mtd activity*/
         /* Prop Fill-In*/
            PI0CMQ1[2] = PI0CMQ1[2] + PI0CW01.ZZQTY1[PI0CWIXM];
         /* B-Grades*/
            PI0CMQ2[2] = PI0CMQ2[2] + PI0CW01.ZZQTY2[PI0CWIXM];
         /* Close Outs*/
            PI0CMQ3[2] = PI0CMQ3[2] + PI0CW01.ZZQTY3[PI0CWIXM];
         /* Futures Prior*/
            PI0CMQ4[2] = PI0CMQ4[2] + PI0CW01.ZZQTY4[PI0CWIXM];
         /* Futures Current*/
            PI0CMQ5[2] = PI0CMQ5[2] + PI0CW01.ZZQTY5[PI0CWIXM];
         /* Futures Current + 1*/
            PI0CMQ6[2] = PI0CMQ6[2] + PI0CW01.ZZQTY6[PI0CWIXM];
         /* Futures Current + 2*/
            PI0CMQ7[2] = PI0CMQ7[2] + PI0CW01.ZZQTY7[PI0CWIXM];
         /*  */
          end
         /*  */
          if (PI0CW00.PI0CWIXX != 2)
         /* Prop Fill-In*/
            PI0CM001.PI0CMQ1[PI0CWIXX] = PI0CW01.ZZQTY1[PI0CWIXM];
         /* B-Grades*/
            PI0CM001.PI0CMQ2[PI0CWIXX] = PI0CW01.ZZQTY2[PI0CWIXM];
         /* Close Outs*/
            PI0CM001.PI0CMQ3[PI0CWIXX] = PI0CW01.ZZQTY3[PI0CWIXM];
         /* Futures Prior*/
            PI0CM001.PI0CMQ4[PI0CWIXX] = PI0CW01.ZZQTY4[PI0CWIXM];
         /* Futures Current*/
            PI0CM001.PI0CMQ5[PI0CWIXX] = PI0CW01.ZZQTY5[PI0CWIXM];
         /* Futures Current + 1*/
            PI0CM001.PI0CMQ6[PI0CWIXX] = PI0CW01.ZZQTY6[PI0CWIXM];
         /* Futures Current + 2*/
            PI0CM001.PI0CMQ7[PI0CWIXX] = PI0CW01.ZZQTY7[PI0CWIXM];
          end
        end
      end
      PI0CW00.PI0CWIXM = PI0CW00.PI0CWIXM + 1; /* Increment line index*/
      ;
    end
    ;
     /* if forecast > 0*/
     /* calculate pct of forcast- allocation (PI0CMQx(4))*/
     /* percent forecast = 100 * updated MTD / forecast*/
    ;
     /* and*/
     /* calculate pct of forcast- shippments (PI0CMQx(7))*/
     /* percent shipment = 100 * MTD shipments / forecast*/
    ;
    if (PI0CMQ1[3] > 0)
      PI0CMQ1[4] = 100 * PI0CMQ1[2] / PI0CMQ1[3];
      PI0CMQ1[7] = 100 * PI0CMQ1[6] / PI0CMQ1[3];
    else
      PI0CMQ1[4] = 0;
      PI0CMQ1[7] = 0;
    end
    if (PI0CMQ2[3] > 0)
      PI0CMQ2[4] = 100 * PI0CMQ2[2] / PI0CMQ2[3];
      PI0CMQ2[7] = 100 * PI0CMQ2[6] / PI0CMQ2[3];
    else
      PI0CMQ2[4] = 0;
      PI0CMQ2[7] = 0;
    end
    if (PI0CMQ3[3] > 0)
      PI0CMQ3[4] = 100 * PI0CMQ3[2] / PI0CMQ3[3];
      PI0CMQ3[7] = 100 * PI0CMQ3[6] / PI0CMQ3[3];
    else
      PI0CMQ3[4] = 0;
      PI0CMQ3[7] = 0;
    end
    if (PI0CMQ4[3] > 0)
      PI0CMQ4[4] = 100 * PI0CMQ4[2] / PI0CMQ4[3];
      PI0CMQ4[7] = 100 * PI0CMQ4[6] / PI0CMQ4[3];
    else
      PI0CMQ4[4] = 0;
      PI0CMQ4[7] = 0;
    end
    if (PI0CMQ5[3] > 0)
      PI0CMQ5[4] = 100 * PI0CMQ5[2] / PI0CMQ5[3];
      PI0CMQ5[7] = 100 * PI0CMQ5[6] / PI0CMQ5[3];
    else
      PI0CMQ5[4] = 0;
      PI0CMQ5[7] = 0;
    end
    if (PI0CMQ6[3] > 0)
      PI0CMQ6[4] = 100 * PI0CMQ6[2] / PI0CMQ6[3];
      PI0CMQ6[7] = 100 * PI0CMQ6[6] / PI0CMQ6[3];
    else
      PI0CMQ6[4] = 0;
      PI0CMQ6[7] = 0;
    end
    if (PI0CMQ7[3] > 0)
      PI0CMQ7[4] = 100 * PI0CMQ7[2] / PI0CMQ7[3];
      PI0CMQ7[7] = 100 * PI0CMQ7[6] / PI0CMQ7[3];
    else
      PI0CMQ7[4] = 0;
      PI0CMQ7[7] = 0;
    end
    ;
  end
  ;
end // end PI0C121

// Check attention identifier
Function PI0C130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (PI0CW00.PI0CWSWR == "Y") /* Request for data*/
      set PI0CW01 empty; /* M001 display storage*/
    end
    ;
    PI0CW00.PI0CWSDF = "Y"; /* Format the map switch*/
    PI0CW00.PI0CWSWR = "Y"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      set PI0CM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      PIWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PI0CM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "PI0E"; /* TO application*/
    end
    ;
    XSPIS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/
    ;
    PIWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end PI0C130

// Reset highlighted fields
Function PI0C140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PI0CM001.CATOAP initialAttributes; /* TO application*/
  set PI0CM001.CAITEM initialAttributes; /* Application data*/
  set PI0CM001.PI0CMOPT initialAttributes; /* requested data*/
  ;
  ;
end // end PI0C140

// Verify data that was entered
Function PI0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CM001.CAITEM > " ") /* Application data was entered*/
    ;
    PIWREC.XXXMODID = "150"; /* Module identification*/
    set PI0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/
  ;
  PI0C151();
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end PI0C150

// verify entered data
Function PI0C151()
   /* ------------------------------------------------------------*/
     /* Verify Entered data*/
  ;
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWWCH = PI0CM001.PI0CMOPT;
  if (PI0CW00.PI0CWCHR[1] == "W")
    PI0CW00.PI0CWOPT = "WEST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "E")
    PI0CW00.PI0CWOPT = "EAST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "M")
    PI0CW00.PI0CWOPT = "MWST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "D")
    PI0CW00.PI0CWOPT = "DSHP";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "O")
    PI0CW00.PI0CWOPT = "OTHR";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "T")
    PI0CW00.PI0CWOPT = "TOTAL";
    return;
  end
  ;
end // end PI0C151

// Process valid input request
Function PI0C160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWSDF = "Y"; /* Format the map switch*/
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWOPT = "TOTAL";
    else
      if (PI0CW00.PI0CWOPT == "EAST")
        PI0CW00.PI0CWOPT = "WEST ";
      else
        if (PI0CW00.PI0CWOPT == "MWST")
          PI0CW00.PI0CWOPT = "EAST ";
        else
          if (PI0CW00.PI0CWOPT == "DSHP")
            PI0CW00.PI0CWOPT = "MWST ";
          else
            if (PI0CW00.PI0CWOPT == "OTHR")
              PI0CW00.PI0CWOPT = "DSHP ";
            else
              if (PI0CW00.PI0CWOPT == "TOTAL")
                PI0CW00.PI0CWOPT = "OTHR ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWOPT = "EAST ";
    else
      if (PI0CW00.PI0CWOPT == "EAST")
        PI0CW00.PI0CWOPT = "MWST ";
      else
        if (PI0CW00.PI0CWOPT == "MWST")
          PI0CW00.PI0CWOPT = "DSHP ";
        else
          if (PI0CW00.PI0CWOPT == "DSHP")
            PI0CW00.PI0CWOPT = "OTHR ";
          else
            if (PI0CW00.PI0CWOPT == "OTHR")
              PI0CW00.PI0CWOPT = "TOTAL";
            else
              if (PI0CW00.PI0CWOPT == "TOTAL")
                PI0CW00.PI0CWOPT = "WEST ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf11)
    ;
    PI0CW00.PI0CWSWD = 2;
    ;
    return;
    ;
  end
end // end PI0C160

// Display the selected table row
Function PI0C200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  PI0C210(); /* Obtain the data to display*/
  ;
  PI0C220(); /* Format and display the map*/
  ;
  PI0C230(); /* Check attention identifier*/
  ;
  PI0C240(); /* Reset fields to normal intensity*/
  ;
  PI0C250(); /* Verify the entered data*/
  ;
  PI0C260(); /* Process valid input request*/
  ;
  ;
end // end PI0C200

// Obtain the data to display
Function PI0C210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CW00.PI0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Select and open the cursor for the set to be formatted.*/
    /* ------------------------------------------------------------*/
    ;
    PI0CW00.PI0CWSWC = "N";
    PI0C111(); /* Select set and open cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* Fetch and format the data into pages until end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    PI0CW00.PI0CWIXM = 0; /* Display line index*/
    ;
    while (PI0CW00.PI0CWSWC == "N") /* Until end of cursor*/
      ;
      PI0C112(); /* Fetch next row in the cursor*/
      ;
      /* ------------------------------------------------------------*/
       /* If not end of cursor, save the data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      if (PI0CW00.PI0CWSWC == "N") /* Not end of cursor*/
        PI0C113(); /* Save data in display storage*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected set.*/
    /* ------------------------------------------------------------*/
    ;
    PI0C114(); /* Close the selected set cursor*/
    ;
    /* ------------------------------------------------------------*/
     /* If no pages were formatted, indicate no data to display.*/
    /* ------------------------------------------------------------*/
    ;
    if (PI0CW00.PI0CWIXM == 0) /* No data found to display*/
      ;
      PIWREC.XXXMODID = "210"; /* Module identification*/
      PIWREC.XXXMSGNO = 18; /* No data was found to display*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Indicate that the request for data is complete.*/
    /* ------------------------------------------------------------*/
    ;
  end
  PI0CW00.PI0CWSWR = "N"; /* Request for data switch*/
  ;
end // end PI0C210

// Format and converse the map
Function PI0C220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PIWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CW00.PI0CWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (PI0CW00.PI0CWSDF == "Y") /* Map must be formatted*/
      PI0C221(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  PI0CM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PI0CM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (PIWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (PIWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (PIWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PIWREC.XXXMSGNO);
      end /* Message number*/
    else
      PI0CM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    PI0CM002.XXXMODID = PIWREC.XXXMODID; /* Module identification*/
    ;
    set PI0CM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse PI0CM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  PIWREC.XXXMODID = " "; /* Module identification*/
  PIWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = PI0CM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PI0CM002.CAITEM; /* Application data*/
  ;
  ;
end // end PI0C220

// Format the display data
Function PI0C221()
   /* -----------------------------------------------------------*/
   /* Get the last month-end date and the current date.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set PIGREC empty; /* Clear row storage area*/
  PIGREC.XXXPGMNO = "PI1170"; /* Move parameter in for call*/
  XSPIS-IO5950(); /* Get last month-end run date*/
  PI0CW00.PI0CWSDT = PIGREC.XXXLSTDT; /* Format last mnth-end date*/
  ;
  set TA2REC empty; /* Clear row storage area*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move parameter in for call*/
  XSPIS-TA0040(); /* Get todays processing date*/
  ;
   /* -----------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWSDF = "N"; /* Format the map switch*/
  ;
  if (PI0CW00.PI0CWIXM > 0) /* Pages were formatted*/
    ;
    set PI0CM002 initial; /* m002 input/output area*/
    PI0CM002.PI0CMOPT = PI0CW00.PI0CWOPT;
    PI0CW00.PI0CWARG = PI0CW00.PI0CWOPT;
    if (PI0CW00.PI0CWOPT == "TOTAL")
      PI0CW00.PI0CWARG = "GR";
    end
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWARG = "WE";
    end
    if (PI0CW00.PI0CWOPT == "MWST")
      PI0CW00.PI0CWARG = "MW";
    end
    if (PI0CW00.PI0CWOPT == "EAST")
      PI0CW00.PI0CWARG = "EA";
    end
    if (PI0CW00.PI0CWOPT == "OTHR")
      PI0CW00.PI0CWARG = "OT";
    end
    if (PI0CW00.PI0CWOPT == "DSHP")
      PI0CW00.PI0CWARG = "DS";
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/
    ;
     /* move allocation data to map*/
    ;
    PI0CW00.PI0CWIXM = 1; /* Initialize line index*/
    while (PI0CW00.PI0CWIXM <= 150 /* Until all datalines found*/
     && PI0CW01.PI0CWDPS[PI0CWIXM] == "Y")
      if (PI0CW01.YSMSUMCD[PI0CWIXM] == PI0CW00.PI0CWARG)
        PI0CW00.PI0CWIXX = 0;
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 101) /* todays alloc units*/
          PI0CW00.PI0CWIXX = 1;
          PI0CM002.XXXCURDT = PI0CW01.PI0CCHDT[PI0CWIXM];
          PI0CW00.PI0CWHH = PI0CW01.PI0CCHHH[PI0CWIXM];
          PI0CW00.PI0CWMM = PI0CW01.PI0CCHMM[PI0CWIXM];
          PI0CW00.PI0CWCLN = ":";
          PI0CW00.PI0CWAPM = "AM";
          if (PI0CW00.PI0CWHH >= 12)
            PI0CW00.PI0CWAPM = "PM";
            if (PI0CW00.PI0CWHH > 12)
              PI0CW00.PI0CWHH = PI0CW00.PI0CWHH - 12;
            end
          end
          PI0CM002.PI0CMTIM = PI0CW00.PI0CWTIM;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 102) /* mtd    alloc units*/
          PI0CW00.PI0CWIXX = 2;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 103) /* prev yr allocation*/
          PI0CW00.PI0CWIXX = 5;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 104) /* forcast quantity units*/
          PI0CW00.PI0CWIXX = 3;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 109) /* yesterdays alloc units*/
          PI0CM002.PIPRODT1 = PI0CW01.PIPROCDT[PI0CWIXM]; /* 1st day*/
          PI0CW00.PI0CWIXX = 9;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 111) /* second day*/
          PI0CM002.PIPRODT2 = PI0CW01.PIPROCDT[PI0CWIXM]; /* 2nd day*/
          PI0CW00.PI0CWIXX = 10;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 112) /* third day*/
          PI0CM002.PIPRODT3 = PI0CW01.PIPROCDT[PI0CWIXM]; /* 3rd day*/
          PI0CW00.PI0CWIXX = 11;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 202) /* mtd    shippments*/
          PI0CW00.PI0CWIXX = 6;
        end
        if (PI0CW01.YSMSUMID[PI0CWIXM] == 203) /* previous yr shiped*/
          PI0CW00.PI0CWIXX = 8;
        end
        if (PI0CW00.PI0CWIXX > 0)
          if (PI0CW00.PI0CWIXX == 1 /* Daily activity*/
           && TA2REC.TA2GRCYM == PI0CW00.PI0CWSYM) /* Not month-end*/
         /* If todays date CCYYMM not = last month-end date CCYYMM it's*/
         /* month-end and don't add todays totals to allocation MTD*/
         /* Domestic Nike Total*/
            PI0CMQ8[2] = PI0CMQ8[2] + PI0CW01.ZZQTY8[PI0CWIXM];
         /* Misc & Nil*/
            PI0CMQ9[2] = PI0CMQ9[2] + PI0CW01.ZZQTY9[PI0CWIXM];
         /* Pack and Hold*/
            PI0CMQ10[2] = PI0CMQ10[2] + PI0CW01.ZZQTY10[PI0CWIXM];
          end
          if (PI0CW00.PI0CWIXX == 2)
         /* Domestic Nike Total*/
            PI0CMQ8[2] = PI0CMQ8[2] + PI0CW01.ZZQTY8[PI0CWIXM];
         /* Misc & Nil*/
            PI0CMQ9[2] = PI0CMQ9[2] + PI0CW01.ZZQTY9[PI0CWIXM];
         /* Pack & Hold*/
            PI0CMQ10[2] = PI0CMQ10[2] + PI0CW01.ZZQTY10[PI0CWIXM];
          end
          if (PI0CW00.PI0CWIXX != 2)
         /* Domestic Nike Total*/
            PI0CM002.PI0CMQ8[PI0CWIXX] = PI0CW01.ZZQTY8[PI0CWIXM];
         /* Misc & Nil*/
            PI0CM002.PI0CMQ9[PI0CWIXX] = PI0CW01.ZZQTY9[PI0CWIXM];
         /* Pack & Hold*/
            PI0CM002.PI0CMQ10[PI0CWIXX] = PI0CW01.ZZQTY10[PI0CWIXM];
          end
        end
      end
      PI0CW00.PI0CWIXM = PI0CW00.PI0CWIXM + 1; /* Increment line index*/
      ;
    end
    ;
     /* calculate pct of forcast - allocation (PI0CMQx(4))*/
     /* and*/
     /* calculate pct of forcast - shippments (PI0CMQx(7))*/
     /* using : forecast                PI0CMQx(3)*/
     /* : updated allocation MTD  PI0CMQx(2)*/
     /* : shipping MTD            PI0CMQx(6)*/
    ;
    if (PI0CMQ8[3] > 0)
      PI0CMQ8[4] = 100 * PI0CMQ8[2] / PI0CMQ8[3];
      PI0CMQ8[7] = 100 * PI0CMQ8[6] / PI0CMQ8[3];
    else
      PI0CMQ8[4] = 0;
      PI0CMQ8[7] = 0;
    end
    if (PI0CMQ9[3] > 0)
      PI0CMQ9[4] = 100 * PI0CMQ9[2] / PI0CMQ9[3];
      PI0CMQ9[7] = 100 * PI0CMQ9[6] / PI0CMQ9[3];
    else
      PI0CMQ9[4] = 0;
      PI0CMQ9[7] = 0;
    end
    if (PI0CMQ10[3] > 0)
      PI0CMQ10[4] = 100 * PI0CMQ10[2] / PI0CMQ10[3];
      PI0CMQ10[7] = 100 * PI0CMQ10[6] / PI0CMQ10[3];
    else
      PI0CMQ10[4] = 0;
      PI0CMQ10[7] = 0;
    end
    if (PI0CMQ11[3] > 0)
      PI0CMQ11[4] = 100 * PI0CMQ11[2] / PI0CMQ11[3];
      PI0CMQ11[7] = 100 * PI0CMQ11[6] / PI0CMQ11[3];
    else
      PI0CMQ11[4] = 0;
      PI0CMQ11[7] = 0;
    end
    ;
  end
  ;
end // end PI0C221

// Check attention identifier
Function PI0C230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (PI0CW00.PI0CWSWR == "Y") /* Request for data*/
      set PI0CW01 empty; /* m002 display storage*/
    end
    ;
    PI0CW00.PI0CWSDF = "Y"; /* Format the map switch*/
    PI0CW00.PI0CWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSPIS01(); /* Exit to another application*/
      ;
      set PI0CM002.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      PIWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf6) /* or pf6 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PI0CM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PI0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "PI0E"; /* TO application*/
    end
    ;
    XSPIS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10) /* and PF10 was not pressed*/
    ;
    PIWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end PI0C230

// Reset highlighted fields
Function PI0C240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set PI0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PI0CM002.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
end // end PI0C240

// Verify data that was entered
Function PI0C250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (PI0CM002.CAITEM > " ") /* Application data was entered*/
    ;
    PIWREC.XXXMODID = "250"; /* Module identification*/
    set PI0CM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/
  ;
  PI0C251();
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end PI0C250

// verify entered data
Function PI0C251()
   /* ------------------------------------------------------------*/
     /* Verify Entered data*/
  ;
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWWCH = PI0CM002.PI0CMOPT;
  if (PI0CW00.PI0CWCHR[1] == "W")
    PI0CW00.PI0CWOPT = "WEST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "E")
    PI0CW00.PI0CWOPT = "EAST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "M")
    PI0CW00.PI0CWOPT = "MWST";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "O")
    PI0CW00.PI0CWOPT = "OTHR";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "D")
    PI0CW00.PI0CWOPT = "DSHP";
    return;
  end
  ;
  if (PI0CW00.PI0CWCHR[1] == "T")
    PI0CW00.PI0CWOPT = "TOTAL";
    return;
  end
  ;
end // end PI0C251

// Process valid input request
Function PI0C260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  PI0CW00.PI0CWSDF = "Y"; /* Format the map switch*/
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWOPT = "TOTAL";
    else
      if (PI0CW00.PI0CWOPT == "EAST")
        PI0CW00.PI0CWOPT = "WEST ";
      else
        if (PI0CW00.PI0CWOPT == "MWST")
          PI0CW00.PI0CWOPT = "EAST ";
        else
          if (PI0CW00.PI0CWOPT == "DSHP")
            PI0CW00.PI0CWOPT = "MWST ";
          else
            if (PI0CW00.PI0CWOPT == "OTHR")
              PI0CW00.PI0CWOPT = "DSHP ";
            else
              if (PI0CW00.PI0CWOPT == "TOTAL")
                PI0CW00.PI0CWOPT = "OTHR ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    if (PI0CW00.PI0CWOPT == "WEST")
      PI0CW00.PI0CWOPT = "EAST ";
    else
      if (PI0CW00.PI0CWOPT == "EAST")
        PI0CW00.PI0CWOPT = "MWST ";
      else
        if (PI0CW00.PI0CWOPT == "MWST")
          PI0CW00.PI0CWOPT = "DSHP ";
        else
          if (PI0CW00.PI0CWOPT == "DSHP")
            PI0CW00.PI0CWOPT = "OTHR ";
          else
            if (PI0CW00.PI0CWOPT == "OTHR")
              PI0CW00.PI0CWOPT = "TOTAL";
            else
              if (PI0CW00.PI0CWOPT == "TOTAL")
                PI0CW00.PI0CWOPT = "WEST ";
              end
            end
          end
        end
      end
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (converseVar.eventKey is pf10)
    ;
    PI0CW00.PI0CWSWD = 1;
    ;
    return;
    ;
  end
end // end PI0C260

//*** RECORD=PI0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PI0CW00 type basicRecord
  10 PI0CWIXM PI0CWIXM ; 
  10 PI0CWIXX PI0CWIXX ; 
  10 PI0CWSWC PI0CWSWC ; 
  10 PI0CWSWD PI0CWSWD ; 
  10 PI0CWSDF PI0CWSDF ; 
  10 PI0CWSWR PI0CWSWR ; 
  10 PI0CWOPT PI0CWOPT ; 
  10 PI0CWARG PI0CWARG ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PI0CWPTY PI0CWPTY [5] ; 
  10 PI0CWWCH PI0CWWCH ; 
    15 PI0CWCHR PI0CWCHR [5] ; 
  10 PI0CWTIM PI0CWTIM ; 
    15 PI0CWHH PI0CWHH ; 
    15 PI0CWCLN PI0CWCLN ; 
    15 PI0CWMM PI0CWMM ; 
    15 * char(1) ; 
    15 PI0CWAPM PI0CWAPM ; 
  10 PI0CWF1 PI0CWF1 ; 
  10 PI0CWF2 PI0CWF2 ; 
  10 PI0CWF3 PI0CWF3 ; 
  10 PI0CWF4 PI0CWF4 ; 
  10 PI0CWF5 PI0CWF5 ; 
  10 PI0CWF6 PI0CWF6 ; 
  10 PI0CWF7 PI0CWF7 ; 
  10 PI0CWF8 PI0CWF8 ; 
  10 PI0CWF9 PI0CWF9 ; 
  10 PI0CWF10 PI0CWF10 ; 
  10 PI0CWF11 PI0CWF11 ; 
  10 PI0CWF12 PI0CWF12 ; 
  10 PI0CWW1 PI0CWW1 ; 
  10 PI0CWW2 PI0CWW2 ; 
  10 PI0CWW3 PI0CWW3 ; 
  10 PI0CWW4 PI0CWW4 ; 
  10 PI0CWW5 PI0CWW5 ; 
  10 PI0CWW6 PI0CWW6 ; 
  10 PI0CWW7 PI0CWW7 ; 
  10 PI0CWW8 PI0CWW8 ; 
  10 PI0CWW9 PI0CWW9 ; 
  10 PI0CWW10 PI0CWW10 ; 
  10 PI0CWW11 PI0CWW11 ; 
  10 PI0CWW12 PI0CWW12 ; 
  10 PI0CWP1 PI0CWP1 ; 
  10 PI0CWP2 PI0CWP2 ; 
  10 PI0CWP3 PI0CWP3 ; 
  10 PI0CWP4 PI0CWP4 ; 
  10 PI0CWP5 PI0CWP5 ; 
  10 PI0CWP6 PI0CWP6 ; 
  10 PI0CWP7 PI0CWP7 ; 
  10 PI0CWP8 PI0CWP8 ; 
  10 PI0CWP9 PI0CWP9 ; 
  10 PI0CWP10 PI0CWP10 ; 
  10 PI0CWP11 PI0CWP11 ; 
  10 PI0CWP12 PI0CWP12 ; 
  10 PI0CWSDT PI0CWSDT ; 
    15 PI0CWSYM PI0CWSYM ; 
    15 * num(2) ; // last stmt yr-month
end // end PI0CW00

//*** RECORD=PI0CW01 ****
// ------------------------
// Map 001 and 002 display storage.
// 03/10/97   WRYAN    Added PIPROCDT for screen display.
// ------------------------
// ***********************
Record PI0CW01 type basicRecord
  5 PI0CWGRP PI0CWGRP [150] ; 
    10 PI0CWDPS PI0CWDPS ; 
    10 YSMSUMCD YSMSUMCD ; 
    10 YSMSUMID YSMSUMID ; 
    10 PIPROCDT PIPROCDT ; 
    10 ZZQTY1 ZZQTY1 ; 
    10 ZZQTY2 ZZQTY2 ; 
    10 ZZQTY3 ZZQTY3 ; 
    10 ZZQTY4 ZZQTY4 ; 
    10 ZZQTY5 ZZQTY5 ; 
    10 ZZQTY6 ZZQTY6 ; 
    10 ZZQTY7 ZZQTY7 ; 
    10 ZZQTY8 ZZQTY8 ; 
    10 ZZQTY9 ZZQTY9 ; 
    10 ZZQTY10 ZZQTY10 ; 
    10 ZZQTY11 ZZQTY11 ; 
    10 ZZQTY12 ZZQTY12 ; 
    10 ZZQTY13 ZZQTY13 ; 
    10 ZZQTY14 ZZQTY14 ; 
    10 ZZQTY15 ZZQTY15 ; 
    10 ZZQTY16 ZZQTY16 ; 
    10 ZZQTY17 ZZQTY17 ; 
    10 ZZQTY18 ZZQTY18 ; 
    10 ZZQTY19 ZZQTY19 ; 
    10 ZZQTY20 ZZQTY20 ; 
    10 ZZAMT1 ZZAMT1 ; 
    10 ZZAMT2 ZZAMT2 ; 
    10 ZZAMT3 ZZAMT3 ; 
    10 ZZAMT4 ZZAMT4 ; 
    10 ZZAMT5 ZZAMT5 ; 
    10 ZZAMT6 ZZAMT6 ; 
    10 ZZAMT7 ZZAMT7 ; 
    10 ZZAMT8 ZZAMT8 ; 
    10 ZZAMT9 ZZAMT9 ; 
    10 ZZAMT10 ZZAMT10 ; 
    10 ZZAMT11 ZZAMT11 ; 
    10 ZZAMT12 ZZAMT12 ; 
    10 ZZAMT13 ZZAMT13 ; 
    10 ZZAMT14 ZZAMT14 ; 
    10 ZZAMT15 ZZAMT15 ; 
    10 ZZAMT16 ZZAMT16 ; 
    10 ZZAMT17 ZZAMT17 ; 
    10 ZZAMT18 ZZAMT18 ; 
    10 ZZAMT19 ZZAMT19 ; 
    10 ZZAMT20 ZZAMT20 ; 
    10 PI0CCHDT PI0CCHDT ; 
    10 PI0CCHTM PI0CCHTM ; 
      15 PI0CCHHH PI0CCHHH ; 
      15 PI0CCHMM PI0CCHMM ; 
end // end PI0CW01

// ZZ_CHNG_DT
DataItem PI0CCHDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hour
DataItem PI0CCHHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minute
DataItem PI0CCHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_HHMM
DataItem PI0CCHTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// am/pm
DataItem PI0CWAPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working search arg
DataItem PI0CWARG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PI0CWCHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// colon ':'
DataItem PI0CWCLN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data in row
DataItem PI0CWDPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWF9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PI0CWGRP char(227)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hour
DataItem PI0CWHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PI0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index
DataItem PI0CWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minute
DataItem PI0CWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map option
DataItem PI0CWOPT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field
DataItem PI0CWP1 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP10 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP11 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP12 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP2 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP3 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP4 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP5 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP6 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP7 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP8 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// percent work field
DataItem PI0CWP9 decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page hdg values
DataItem PI0CWPTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PI0CWSDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last statement date
DataItem PI0CWSDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PI0CWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem PI0CWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PI0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last stmt yr-month
DataItem PI0CWSYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen time format
DataItem PI0CWTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW8 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity work fld
DataItem PI0CWW9 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PI0CWWCH char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

