package mn0x;
import corpx1.*;
import corpx2.*;
import mn.common.*;
//*** PROGRAM=MN0X ****
// 02/23/93   jcampb    make psdo-conversational
// *********************
Program MN0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = MN0XW01, segmented = no
  }

  // Data Declarations
  MN0XW01 MN0XW01 ; // record
  MN0XW01_Level77Items MN0XW01_Level77Items { initialized = yes }; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC { redefines = MN1REC } ; // record
  MN3REC MN3REC { redefines = MN1REC } ; // record
  MN4REC MN4REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use MN0XM.MN0XM001,  // forms
      MN0XM.MN0XM002
   {
    pfKeyEquate = yes
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    MN0X010: MN0X010();
  end // end main
end // end MN0X

// INITIALIZE
Function MN0X000()
  set MN0XW01 empty;

  set MN1REC empty;
  set MN4REC empty;

  converseLib.clearScreen();
  set MN0XM001 initial;
  converseLib.clearScreen();
  set MN0XM002 initial;
  MN0XM001.MN0XMOPT = 0;
  MN0XW01_Level77Items.MN0XWIDX = 0;
  MN0XW01.MN0XWIFL = "N";
  MN0XW01.MN0XW1FL = "Y";
end // end MN0X000

// MAIN LOGIC FLOW
Function MN0X010()
  while (MN0XW01.MN0XWIFL != "N")
    MN0X000();
  end

  while (MN0XW01.MN0XW1FL == "Y")
    MN0X100();
    MN0X101();
  end


  if (MN0XM001.MN0XMOPT == 0)
    MN0X200();
  end

  if (MN0XM001.MN0XMOPT == 1)
    MN0X210();
  end

  if (MN0XM001.MN0XMOPT == 2)
    MN0X220();
  end

  if (MN0XM001.MN0XMOPT == 3)
    MN0X230();
  end

  if (MN0XM001.MN0XMOPT == 5)
    MN0X250();
  end
  MN0X010();
end // end MN0X010

// DISPLAY SCREEN #1
Function MN0X100()
  MN0XM001.MN0XMDTE = VGVar.currentShortGregorianDate;
  converse MN0XM001 ;
end // end MN0X100

// AFTER SCREEN #1 EDITS
Function MN0X101()
  if (converseVar.eventKey is pf3)
    exit program;
  end

  if (converseVar.eventKey is pf8)
    /* next sentence*/
  else
    if (converseVar.eventKey is enter)
      /* next sentence*/
    else
      MN0XM001.MN0XMAER = "INVALID KEY - TRY AGAIN";
      MN0XW01.MN0XW1FL = "Y";
      return;
    end
  end

   /* EDIT MN0XMOPT (OPTION) FIELD*/

  if (MN0XM001.MN0XMOPT < 0
   || MN0XM001.MN0XMOPT > 5)
    MN0XM001.MN0XMAER = "INVALID OPTION FIELD VALUE -- REENTER";
    MN0XW01.MN0XW1FL = "Y";
    set MN0XM001.MN0XMOPT cursor;
  else
    MN0XW01.MN0XW1FL = "N";
    set MN0XM001.MN0XMOPT cursor;
  end

end // end MN0X101

// DISPLAY SCREEN #2
Function MN0X110()
  MN0XM002.MN0XMDTE = VGVar.currentShortGregorianDate;
  if (MN0XM001.MN0XMOPT == 0)
    MN0XM002.MN0XMSTY = "0 = TYPE 1 - TYPE 3 RECORDS";
  end
  if (MN0XM001.MN0XMOPT == 1)
    MN0XM002.MN0XMSTY = "1 = MENU TYPE 1 RECORDS";
  end
  if (MN0XM001.MN0XMOPT == 2)
    MN0XM002.MN0XMSTY = "2 = USER TYPE 2 RECORDS";
  end
  if (MN0XM001.MN0XMOPT == 3)
    MN0XM002.MN0XMSTY = "3 = APPLICATION TYPE 3 RECORDS";
  end
  if (MN0XM001.MN0XMOPT == 4)
    MN0XMSTY = "4 = ALT-SPEC RECORDS";
  end
  if (MN0XM001.MN0XMOPT == 5)
    MN0XMSTY = "5 = ALT-SPEC SPECIAL DISPLAY";
  end
  MN0XM002.MN0XMPNO = MN0XM002.MN0XMPNO + 1;
  converse MN0XM002 ;
end // end MN0X110

// AFTER SCREEN #2 EDITS
Function MN0X111()
  MN0XM002.MN0XMAER = " ";
  if (converseVar.eventKey is enter)
    MN0XW01.MN0XW2FL = "N";
    MN0XW01_Level77Items.MN0XWIDX = 1;
  else
    if (converseVar.eventKey is pf3)
      MN0XW01.MN0XW1FL = "Y";
      MN0XW01.MN0XW2FL = "N";
      MN0XW01.MN0XWIFL = "Y";
    else
      if (converseVar.eventKey is pf8)
        MN0XW01.MN0XW2FL = "N";
        MN0XW01_Level77Items.MN0XWIDX = 1;
      else
        MN0XM002.MN0XMAER = "INVALID KEY - TRY AGAIN";
        MN0XW01.MN0XW2FL = "Y";
      end
    end
  end

end // end MN0X111

// process all types display
Function MN0X200()
  if (MN0XW01_Level77Items.MN0XWIDX == 0)
    MN1REC.MN1KEY = MN0XM001.MN0XMSKY;
    MN0XW01_Level77Items.MN0XWIDX = 1;
    set MN1REC position;
  end
  if (MN0XW01.MN0XW1FL == "Y")
    MN0XW01.MN0XWIFL = "Y";
    return;
  end
  while (MN0XW01.MN0XW2FL != "Y")
    MN0X300();
    MN0XW01.MN0XWLRC = "SCAN MN1REC";
    MN0X201();
  end
  while (MN0XW01.MN0XW2FL == "Y")
    MN0X110();
    MN0X111();
  end
end // end MN0X200

// move flds to w/s & map #2
Function MN0X201()
  MN0XW01.MN0XWLES = sysVar.errorCode;
  MN0XW01.MN0XWLRK = MN1REC.MN1KEY;
  MN0XW01.MN0XWLSN = MN0XW01.MN0XWRCT;
  MN0XMLN[MN0XWIDX] = MN0XW01.MN0XWLNE;
  if (MN0XW01_Level77Items.MN0XWIDX == 14)
    MN0XW01.MN0XW2FL = "Y";
  else
    MN0XW01_Level77Items.MN0XWIDX = MN0XW01_Level77Items.MN0XWIDX + 1;
  end
  if (MN1REC is endOfFile)
    MN0XM002.MN0XMAER = "END OF FILE REACHED";
    MN0XW01.MN0XW2FL = "Y";
  end
end // end MN0X201

// process type-1 display
Function MN0X210()
   /* *************************************************************/
   /* ***    process type-1 (mn1rec) display                   ****/
   /* *************************************************************/

  if (MN0XW01_Level77Items.MN0XWIDX == 0)
    MN1REC.MN1KEY = MN0XM001.MN0XMSKY;
    if (MN1REC.MN1KEY == " ")
      MN1REC.MN1TYPE1 = 1;
      MN1REC.MN1TYPE2 = 1;
    end
    if (MN1REC.MN1TYPE1 != 1
     || MN1REC.MN1TYPE2 != 1)
      MN0XM001.MN0XMAER = "INVALID TYPE CODE FOR MN1REC ENTERED";
      MN0XW01.MN0XW1FL = "Y";
      set MN0XM001.MN0XMSKY cursor;
      MN0X010();
    else
      MN0XW01_Level77Items.MN0XWIDX = 1;
      set MN1REC position;
    end
  end

  if (MN0XW01.MN0XW1FL == "Y")
    MN0XW01.MN0XWIFL = "Y";
    return;
  end

  while (MN0XW01.MN0XW2FL != "Y")
    MN0X300();
    MN0XW01.MN0XWLRC = "SCAN MN1REC";
    MN0X201();
    if (MN1REC.MN1TYPE1 != "1")
      MN0XM001.MN0XMAER = "END OF TYPE-1 RECORDS REACHED";
      MN0XW01.MN0XW1FL = "Y";
      MN0X010();
    end
  end

  while (MN0XW01.MN0XW2FL == "Y")
    MN0X110();
    MN0X111();
  end
end // end MN0X210

// process type-2 display
Function MN0X220()
   /* *************************************************************/
   /* ***        process type-2 (mn2rec) display               ****/
   /* *************************************************************/

  if (MN0XW01_Level77Items.MN0XWIDX == 0)
    MN2REC.MN1KEY = MN0XM001.MN0XMSKY;
    if (MN2REC.MN1KEY == " ")
      MN2REC.MN1TYPE1 = 2;
      MN2REC.MN1TYPE2 = 2;
    end
    if (MN2REC.MN1TYPE1 != 2
     || MN2REC.MN1TYPE2 != 2)
      MN0XM001.MN0XMAER = "INVALID TYPE CODE FOR MN2REC ENTERED";
      MN0XW01.MN0XW1FL = "Y";
      set MN0XM001.MN0XMSKY cursor;
      MN0X010();
    else
      MN0XW01_Level77Items.MN0XWIDX = 1;
      set MN1REC position;
    end
  end

  if (MN0XW01.MN0XW1FL == "Y")
    MN0XW01.MN0XWIFL = "Y";
    return;
  end

  while (MN0XW01.MN0XW2FL != "Y")
    MN0X300();
    MN0XW01.MN0XWLRC = "SCAN MN1REC";
    MN0X201();
  end

  while (MN0XW01.MN0XW2FL == "Y")
    MN0X110();
    MN0X111();
  end
end // end MN0X220

// process type-3 display
Function MN0X230()
   /* *************************************************************/
   /* ***        process type-3 (mn1rec) display               ****/
   /* *************************************************************/

  if (MN0XW01_Level77Items.MN0XWIDX == 0)
    MN3REC.MN1KEY = MN0XM001.MN0XMSKY;
    if (MN3REC.MN1KEY == " ")
      MN3REC.MN1TYPE1 = 3;
      MN3REC.MN1TYPE2 = 3;
    end
    if (MN3REC.MN1TYPE1 != 3
     || MN3REC.MN1TYPE2 != 3)
      MN0XM001.MN0XMAER = "INVALID TYPE CODE FOR MN3REC ENTERED";
      MN0XW01.MN0XW1FL = "Y";
      set MN0XM001.MN0XMSKY cursor;
      MN0X010();
    else
      MN0XW01_Level77Items.MN0XWIDX = 1;
      set MN1REC position;
    end
  end

  if (MN0XW01.MN0XW1FL == "Y")
    MN0XW01.MN0XWIFL = "Y";
    return;
  end

  while (MN0XW01.MN0XW2FL != "Y")
    MN0X300();
    MN0XW01.MN0XWLRC = "SCAN MN1REC";
    MN0X201();
  end

  while (MN0XW01.MN0XW2FL == "Y")
    MN0X110();
    MN0X111();
  end
end // end MN0X230

// process type 3 & 2's display
Function MN0X250()
  if (MN0XW01_Level77Items.MN0XWIDX == 0)
    MN4REC.MN1KEY = MN0XM001.MN0XMSKY;
    set MN4REC position;
    MN0XW01_Level77Items.MN0XWIDX = 1;
  end

  while (MN0XW01.MN0XW2FL == "Y")
    MN0X110();
    MN0X111();
  end
  if (MN0XW01.MN0XW1FL == "Y")
    MN0XW01.MN0XWIFL = "Y";
    return;
  end

  while (MN0XW01.MN0XW2FL != "Y")
    MN0X340();
    MN0XW01.MN0XWLRC = "SCAN MN4REC";
    MN0X251();
    MN2REC.MN1KEY = " ";
    MN2REC.MN1USER = MN4REC.MN1USER;
    MN2REC.MN1TYPE1 = "2";
    MN2REC.MN1TYPE2 = "2";
    MN0X310();
    MN0XW01.MN0XWLRC = "INQUIRY MN1REC";
    MN0X252();
  end

  MN0X250();
end // end MN0X250

// move mn4rec flds to map #2
Function MN0X251()
  MN0XW01.MN0XWLES = sysVar.errorCode;
  MN0XW01.MN0XWLRK = MN4REC.MN1KEY;
  MN0XW01.MN0XWLSN = MN0XW01.MN0XWRCT;
  MN0XMLN[MN0XWIDX] = MN0XW01.MN0XWLNE;
  if (MN0XW01_Level77Items.MN0XWIDX == 14)
    MN0XW01.MN0XW2FL = "Y";
  else
    MN0XW01_Level77Items.MN0XWIDX = MN0XW01_Level77Items.MN0XWIDX + 1;
  end
  if (MN4REC is endOfFile)
    MN0XW01.MN0XW2FL = "Y";
  end
end // end MN0X251

// move mn1rec flds to map #2
Function MN0X252()
  MN0XW01.MN0XWLES = sysVar.errorCode;
  MN0XW01.MN0XWLRK = MN1REC.MN1KEY;
  MN0XWLSN = MN0XW01.MN0XWRCT;
  MN0XMLN[MN0XWIDX] = MN0XW01.MN0XWLNE;
  if (MN0XW01_Level77Items.MN0XWIDX == 14)
    MN0XW01.MN0XW2FL = "Y";
  else
    MN0XW01_Level77Items.MN0XWIDX = MN0XW01_Level77Items.MN0XWIDX + 1;
  end
  if (MN1REC is endOfFile)
    MN0XW01.MN0XW2FL = "Y";
  end
end // end MN0X252

// get next mn1rec
Function MN0X300()
  try
    get next MN1REC ;
  end
  MN0XW01.MN0XWRCT = MN0XW01.MN0XWRCT + 1;
end // end MN0X300

// GET MN1REC using key
Function MN0X310()
  try
    get MN1REC ;
  end
  MN0XW01.MN0XWRCT = MN0XW01.MN0XWRCT + 1;
end // end MN0X310

// get next mn4rec
Function MN0X340()
  try
    get next MN4REC ;
  end
  MN0XW01.MN0XWRCT = MN0XW01.MN0XWRCT + 1;
end // end MN0X340

//*** RECORD=MN0XW01 ****
// THIS RECORD IS THE WORKING-STORAGE RECORD FOR MN0X
// ***********************
Record MN0XW01 type basicRecord
  10 MN1KEY MN1KEY ; 
  10 MN0XWRCT MN0XWRCT ; 
  10 MN0XW1FL MN0XW1FL ; 
  10 MN0XW2FL MN0XW2FL ; 
  10 MN0XWEFL MN0XWEFL ; 
  10 MN0XWIFL MN0XWIFL ; 
  10 MN0XWLNE MN0XWLNE ; 
    15 MN0XWLSN MN0XWLSN ; 
    15 * char(3) ; 
    15 MN0XWLRK MN0XWLRK ; 
    15 * char(3) ; 
    15 MN0XWLES MN0XWLES ; 
    15 * char(2) ; 
    15 MN0XWLRC MN0XWLRC ; 
end // end MN0XW01

Record MN0XW01_Level77Items type basicRecord
  3 MN0XWIDX MN0XWIDX;
end // end MN0XW01_Level77Items

// map #1 display y/n flag
DataItem MN0XW1FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map #2 display flag
DataItem MN0XW2FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map #1 edit error y/n flag
DataItem MN0XWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index field for map lines
DataItem MN0XWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// initialize y/n flag
DataItem MN0XWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line read error status
DataItem MN0XWLES char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map w/s line
DataItem MN0XWLNE char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line read command issued
DataItem MN0XWLRC char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line returned record key
DataItem MN0XWLRK char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line seq no
DataItem MN0XWLSN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RECORD COUNT
DataItem MN0XWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

