package ak0b;

import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom3.XPAF001;
import corpcom3.XPTA0P;
import corpcom3.XSAFS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=AK0B ****
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// Y2KFIX   12/16/97  ksumme  Y2K MODIFICATIONS MADE TO:
//                            (GLOBAL CHG TO XP1REC TO EXPAND
//                            AB3BUYMO AND AF-MO FOR CC.
// *********************
Program AK0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AFWREC AFWREC; // record
  AK0BW01 AK0BW01; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AK0BT01 {deleteAfterUse = yes}; // table
  use AK0BM.AK0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    set AFWREC empty; /* Initialize working storage*/
    set AK0BW01 empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA6REC empty; /* Initialize working storage*/
    set AK0BM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AK0B"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "    "; /* Initialize process number to zero*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "Y"; /* Indicate request for data*/
    ;
    XP1REC.XP1MNO = 0; /* Initialize xp1rec message no.*/
    ;
    ;
    goto AK0B-0001; /* Converse Special Initialization*/
    ;
    ;
    AK0B-0001: AK0B-0001();
     /* *************************************************************/
      /* Flow to converse*/
     /* *************************************************************/
    ;
    goto AK0B-0001;
    ;
    ;
  end // end main
end // end AK0B

// Choose which map to display
Function AK0B-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the only map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
  AFWREC.AFWPRCSN = "    "; /* Re-Initialize process name*/
  ;
  AK0B-1000(); /* Display map 1*/
  ;
end // end AK0B-0001

// Driver process for 100 map
Function AK0B-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AK0B-1100(); /* Format and display the map*/
  ;
  AK0B-1200(); /* Check attention identifier*/
  ;
  AK0B-1300(); /* Reset fields to normal intensity*/
  ;
  AK0B-1400(); /* Verify the entered data*/
  ;
  AK0B-1500(); /* Process valid input request*/
  ;
  ;
end // end AK0B-1000

// Format and display the map
Function AK0B-1100()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  ;
  if (converseVar.validationMsgNum != 0 /* Error message to display*/
   && converseVar.validationMsgNum != 64)
    set AK0BM001 alarm; /* Indicate sound alarm*/
  else
    ;
    converseLib.clearScreen();
     /* Clear map output area*/
    AFWREC.AFWPRCSN = "    "; /* Clear process indicator*/
    AK0BM001.XXXPRCNM = AFWREC.AFWERLOC;
                                   /* move process ind to screen*/
    AK0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move today's date to map*/
    ;
  end
  ;
  AFWREC.AFWNMO = 0; /* reset info message no.*/
  ;
  converse AK0BM001 ;
  ;
  ;
end // end AK0B-1100

// Check attention identifier
Function AK0B-1200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set AK0BM001 initial; /* Clear the map fields*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (AK0BM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AK0BM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AK0BM001.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AK0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AK0B-1200

// Reset highlighted fields
Function AK0B-1300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  set AK0BM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AK0BM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
end // end AK0B-1300

// Verify the entered data
Function AK0B-1400()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWPRCSN = "    "; /* Clear Process number*/
  AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Clear Process name*/
  ;
  if (AK0BM001.CAITEM > " ") /* Application data was entered*/
    ;
    set AK0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "150 "; /* Process number*/
    AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
  end
  ;
  if (XP1REC.XP1MNO == 0) /* No errors were found*/
    XP1REC.XP1MNO = 64; /* submit JCL message*/
  end
  ;
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end
  ;
end // end AK0B-1400

// Process valid input request
Function AK0B-1500()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 64)
    exit stack; /* Redisplay map with message*/
  end
  ;
  ;
   /* -------------------*/
   /* GET REGION ID-----*/
  AK0B-1510();
   /* -------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
  if (TA3REC.TA3RGNID == "03")
    AK0BW01.AK0BW-JCL-TABLE-INDEX = 1;
  else
    if ("/*EOF" in AK0BT01.TARJCL)
      AK0BW01.AK0BW-JCL-TABLE-INDEX = sysVar.arrayIndex;
      AK0BW01.AK0BW-JCL-TABLE-INDEX = AK0BW01.AK0BW-JCL-TABLE-INDEX + 1;
    else
      AK0BW01.AK0BW-JCL-TABLE-INDEX = 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (AK0BW01.AK0BW-JCL-TABLE-INDEX > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AK0BT01.TARJCL[AK0BW-JCL-TABLE-INDEX];
                                   /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AK0BT01.TARTYPE[AK0BW-JCL-TABLE-INDEX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AK0BT01.TARJCL[AK0BW-JCL-TABLE-INDEX] == "/*EOF") /* End of table*/
      AK0BW01.AK0BW-JCL-TABLE-INDEX = 0; /* Indicate end of table*/
    else
      AK0BW01.AK0BW-JCL-TABLE-INDEX = AK0BW01.AK0BW-JCL-TABLE-INDEX + 1;
                                   /* Increment table index*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(0);
  AK0B-1520(); /* Submit the JCL*/
  ;
   /* ------------------------------------------------------------*/
   /* Clear map to avoid inadvertant double submition of the job*/
   /* ------------------------------------------------------------*/
  ;
  set AK0BM001 initial;
  XP1REC.XP1MNO = 70;
  set AK0BM001.CATOAP cursor;
end // end AK0B-1500

// Determine cics region
Function AK0B-1510()
   /* ------------------------------------------------------------*/
    /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /* ------------------------------------------------------------*/
  ;
  set TA3REC empty;
  ;
  TA3REC.TA3OPTN = "ASSIGN ";
  ;
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000")
    /* NEXT SENTENCE*/
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "162"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CSP ERROR -BAD CALL";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  if (TA3REC.TA3RTNCD == 0)
    return;
  else
    TAEREC.TAEDESC1 = TA3REC.TA3RTNCD; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/
    ;
    AFWREC.AFWPRCSN = "S40"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "GET REGION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* Exit to display map*/
    ;
    ;
  end
  ;
  ;
  ;
end // end AK0B-1510

// Submit Job/Select Printer
Function AK0B-1520()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Submit the JCL*/
  end
  ;
   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/
  ;
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  AK0BM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 69; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AK0B-1520

//*** RECORD=AK0BW01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AK0BW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AK0BW-JOB-SUBMIT-SWITCH AK0BW-JOB-SUBMIT-SWITCH ; 
  10 AK0BW-JCL-TABLE-INDEX AK0BW-JCL-TABLE-INDEX ; 
end // end AK0BW01

// JCL table index
DataItem AK0BW-JCL-TABLE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted switch
DataItem AK0BW-JOB-SUBMIT-SWITCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

