package ak0a;

import af.common.AF2REC;
import af.common.AF2SFODT;
import af.common.AF5CLBFL;
import af.common.AF5REC;
import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XDMCD;
import corpx1.XDVCD;
import corpx1.XSETBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpy2.YSNTBL;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import pg.common.PG2SCRFL;
import sy.common.SY1BSTNB;
import sy.common.SY1STNBR;
import sy.common.SY2BCLCD;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=AK0A ****
// This application manually adds rows to both AFSTY and AFCLR
// with owner groups other than '00'.  the style/color/season
// must exist with owner group '00', and the rows added will be
// modeled after the existing owner group '00' rows.  This
// application will be used on an exception basis when data in
// the various related tables cannot be changed in time for the
// needed rows to be added during the nightly process by the
// system
//   DATE     NAME   DESCRIPTION OF CHANGE
// --------  ------  ------------------------------------------
// 06-30-93  LREINInitial Installation
// 02-15-95  kj      xsn-ysn
// Y2KFIX   12/16/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            AK0AM001, AK0A-5300
//                            (global table change to XP1REC)
// 05-28-99 craymo   AK0A-5200, modified logic to disallow any
//                   data entry beyond SU 2000.
// *********************
Program AK0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AFWREC AFWREC; // record
  AK0AW00 AK0AW00; // record
  AK0AW01 AK0AW01; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use AK0AM.AK0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
    set AK0AW00 empty;
    set AFWREC empty;
    set AK0AM001 initial;
    set AF2REC empty;
    set AF5REC empty;
    set TA1REC empty;
    move " " to AK0AM001.XSECD[1] for all;
    AK0AW00.AK0AW-MAX-SCREEN-LINES = sysVar.arrayIndex;
    AFWREC.AFWAPPL = "AK0A";
    goto AK0A-0001;
    AK0A-0001: AK0A-0001();
    goto AK0A-0001;
  end // end main
end // end AK0A

// Main process
Function AK0A-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AK0A-2000(); /* Format and display the map*/
  ;
  AK0A-3000(); /* Check attention identifier*/
  ;
  AK0A-4000(); /* Reset fields to normal intensity*/
  ;
  AK0A-5000(); /* Verify the entered data*/
  ;
  AK0A-6000(); /* Process valid input request*/
  ;
end // end AK0A-0001

// Format and display map
Function AK0A-2000()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error found*/
    set AK0AM001 initial; /* Format the data on the map*/
  else
    AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AK0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  AK0AM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AK0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AK0AM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse AK0AM001 ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  COMMAREA.CATOAP = AK0AM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AK0AM001.CAITEM; /* Application data*/
  ;
  ;
end // end AK0A-2000

// Check attention identifier
Function AK0A-3000()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AK0AM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AK0AM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    ;
    set AK0AM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "3000"; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (AK0AM001.CAITEM > " ") /* application data was entered*/
    set AK0AM001.CAITEM cursor, modified, bold; /* highlight data*/
    converseLib.validationFailed(7); /* enter only with fast path*/
    AFWREC.AFWPRCSN = "3000"; /* process number*/
    exit stack; /* redisplay map*/
  end
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* pf1 is pressed*/
      COMMAREA.CAITEM = "AK0AM001"; /* appl find code*/
    end
    ;
    AFWREC.AFWPRCSN = "3000"; /* process number*/
    converseLib.validationFailed(6); /* cant transfer*/
    XSAFS01();
    exit stack; /* Exit to redisplay map*/
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    AFWREC.AFWPRCSN = "3000"; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
end // end AK0A-3000

// Reset highlighted fields
Function AK0A-4000()
  AFWREC.AFWIXM = 1;
  ;
  while (AFWREC.AFWIXM <= AK0AW00.AK0AW-MAX-SCREEN-LINES)
    set AK0AM001.XSECD[AFWIXM] initialAttributes;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] initialAttributes;
    set AK0AM001.SY1STNBR[AFWIXM] initialAttributes;
    set AK0AM001.SY2CLRID[AFWIXM] initialAttributes;
    set AK0AM001.XOWCD[AFWIXM] initialAttributes;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end
end // end AK0A-4000

// Validate input data
Function AK0A-5000()
  AFWREC.AFWIXM = AK0AW00.AK0AW-MAX-SCREEN-LINES;
  ;
  while (AFWREC.AFWIXM > 0) /* for each screen row*/
    ;
    if (AK0AM001.XSECD[AFWIXM] != " ") /* an entry this scrn row*/
      AK0AW00.AK0AW-ERROR-FLAG = "N"; /* no errs so far*/
      AK0A-5100(); /* validate style nbr*/
      ;
      if (AK0AW00.AK0AW-ERROR-FLAG == "N") /* style ok*/
        AK0A-5200(); /* validate color code*/
      end
      ;
      AK0A-5300(); /* validate season and season year*/
      ;
  /* IF AK0AW00.AK0AW-ERROR-FLAG = 'N';/* season yr ok*/
  /* PERFORM AK0A-5310;         /* validate season cd*/
  /* END;*/
      ;
      if (AK0AW00.AK0AW-ERROR-FLAG == "N") /* no errs so far*/
        AK0A-5400(); /* xow '00' there for sty?*/
      end
      ;
      if (AK0AW00.AK0AW-ERROR-FLAG == "N") /* no errs so far*/
        AK0A-5500(); /* xow '00' there for color?*/
      end
      ;
      if (AK0AW00.AK0AW-ERROR-FLAG == "N") /* no errs so far*/
        AK0A-5600(); /* check for dup afclr rows*/
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* prev screen line*/
  end
  ;
end // end AK0A-5000

// Validate style number
Function AK0A-5100()
  set PG2REC empty;
  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM];
  AK0A-5110(); /* select set*/
  AK0A-5120(); /* fetch row*/
  AK0A-5130(); /* close curses*/
end // end AK0A-5100

// Select set SYCLR
Function AK0A-5110()
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "5110"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AK0A-5110

// Fetch row SYCLR
Function AK0A-5120()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      set AK0AM001.SY1STNBR[AFWIXM] cursor, bold; /* Highlight field*/
      AK0AW00.AK0AW-ERROR-FLAG = "Y";
      converseLib.validationFailed(33); /* Indicate not found*/
      AFWREC.AFWPRCSN = "5120"; /* Process number*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "5120"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AK0A-5120

// Close cursor SYCLR
Function AK0A-5130()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "5130"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
end // end AK0A-5130

// Validate color code
Function AK0A-5200()
  PG2REC.SY2CLRID = AK0AM001.SY2CLRID[AFWIXM];
  PG2REC.XDMCD = "00";
  ;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
      AK0AW00.AK0AW-ERROR-FLAG = "Y";
      AFWREC.AFWPRCSN = "5200"; /* Process number*/
      converseLib.validationFailed(23); /* invalid sty/colr combo*/
      set AK0AM001.SY1STNBR[AFWIXM] cursor, bold;
      set AK0AM001.SY2CLRID[AFWIXM] bold;
      return; /* Return to calling process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available,            r condition.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "5200"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end AK0A-5200

// Validate season
Function AK0A-5300()
  AK0AW00.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM];
   /* ----------- Y2K OUT BEGIN ---------------------------*/
   /*  */
   /* AK0AW00.XSNYR = AK0AW00.XSNYR + 1900;/* move century*/
   /*  */
   /* IF AK0AW00.XSNYR LT 1975;*/
   /* AK0AW00.XSNYR = AK0AW00.XSNYR + 1000;*/
   /* END;*/
   /*  */
   /* ----------- Y2K OUT END -----------------------------*/
   /* ----------- Y2K IN BEGIN ---------------------------*/
   /*  */
  if (AK0AW00.XSNYR > 60)
    AK0AW00.XSNYR = AK0AW00.XSNYR + 1900; /* move century*/
  else
    AK0AW00.XSNYR = AK0AW00.XSNYR + 2000; /* move century*/
  end
   /*  */
   /* ----------- Y2K IN END -----------------------------*/
  ;
  if (AK0AW00.XSNYR < 2000)
    AK0AS-5300();
  else
    if (AK0AW00.XSNYR == 2000)
      if (AK0AM001.XSECD[AFWIXM] == "SP"
       || AK0AM001.XSECD[AFWIXM] == "SU")
        AK0AS-5300();
      else
        AFWREC.AFWPRCSN = "5300"; /* Process number*/
        AK0AW00.AK0AW-ERROR-FLAG = "Y";
        set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] cursor, bold;
        set AK0AM001.XSECD[AFWIXM] cursor, bold; /* highlight fields*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    else
      if (AK0AW00.XSNYR > 2000)
        AFWREC.AFWPRCSN = "5300"; /* Process number*/
        AK0AW00.AK0AW-ERROR-FLAG = "Y";
        set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] cursor, bold;
        set AK0AM001.XSECD[AFWIXM] cursor, bold; /* highlight fields*/
        converseLib.validationFailed(138); /* indicate error message*/
      end
    end
  end
  ;
end // end AK0A-5300

// Validate season code
Function AK0A-5310()
  if (AK0AM001.XSECD[AFWIXM] in XSETBL.XSECD)
    /* next sentence*/
  else
    AFWREC.AFWPRCSN = "5310"; /* Process number*/
    AK0AW00.AK0AW-ERROR-FLAG = "Y";
    set AK0AM001.XSECD[AFWIXM] cursor, bold; /* highlight field*/
    converseLib.validationFailed(16); /* indicate error message*/
    return; /* return to calling process*/
  end
  ;
  AK0AW00.AK0AWXSS = AK0AM001.XSECD[AFWIXM]; /* To XSECD wk area*/
  AK0AW00.AK0AWXYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /**/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AK0AW00.AK0AWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
  AFWREC.AFWPRCSN = "5310"; /* Process number*/
  AK0AW00.AK0AW-ERROR-FLAG = "Y";
  set AK0AM001.XSECD[AFWIXM] cursor, bold;
  set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
  converseLib.validationFailed(26); /* indicate error message*/
end // end AK0A-5310

// Validate AFSTY OG 00 exists
Function AK0A-5400()
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set AF2REC empty; /* Reset Wk Storage field*/
  ;
  AF2REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
  AF2REC.XSECD = AK0AM001.XSECD; /* Season cd*/
  AF2REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
  ;
  if (AF2REC.XSNYR < 85)
    AF2REC.XSNYR = AF2REC.XSNYR + 2000;
  else
    AF2REC.XSNYR = AF2REC.XSNYR + 1900;
  end
  ;
  AF2REC.XDMCD = "00"; /* Dim cd*/
  AF2REC.XOWCD = "00"; /* Owner group*/
  AF2REC.XDVCD = "01"; /* Div cd*/
   /* Select unique DACAST.VAFSTY01 row*/
  AK0A-S0200();
  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    converseLib.validationFailed(136);
    AK0AW00.AK0AW-ERROR-FLAG = "Y";
    AFWREC.AFWPRCSN = "5400"; /* Process number*/
    set AK0AM001.XSECD[AFWIXM] cursor, bold;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
    set AK0AM001.SY1STNBR[AFWIXM] bold;
    set AK0AM001.SY2CLRID[AFWIXM] bold;
  end
  ;
  ;
  ;
end // end AK0A-5400

// Validate AFCLR OG 00 exists
Function AK0A-5500()
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set AF5REC empty; /* Reset Wk Storage field*/
  ;
  AF5REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
  AF5REC.SY2CLRID = AK0AM001.SY2CLRID[AFWIXM]; /* color*/
  AF5REC.XSECD = AK0AM001.XSECD; /* Season cd*/
  AF5REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
  ;
  if (AF5REC.XSNYR < 85)
    AF5REC.XSNYR = AF5REC.XSNYR + 2000;
  else
    AF5REC.XSNYR = AF5REC.XSNYR + 1900;
  end
  ;
  AF5REC.XDMCD = "00"; /* Dim cd*/
  AF5REC.XOWCD = "00"; /* Owner group*/
  AF5REC.XDVCD = "01"; /* Div cd*/
  AK0A-S0100(); /* Select unique DACAST.VAFCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    converseLib.validationFailed(136);
    AK0AW00.AK0AW-ERROR-FLAG = "Y";
    AFWREC.AFWPRCSN = "5500"; /* Process number*/
    set AK0AM001.XSECD[AFWIXM] cursor, bold;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
    set AK0AM001.SY1STNBR[AFWIXM] bold;
    set AK0AM001.SY2CLRID[AFWIXM] bold;
  end
  ;
  ;
end // end AK0A-5500

// Check for Dups
Function AK0A-5600()
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set AF5REC empty; /* Reset Wk Storage field*/
  ;
  AF5REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
  AF5REC.SY2CLRID = AK0AM001.SY2CLRID[AFWIXM]; /* color*/
  AF5REC.XSECD = AK0AM001.XSECD; /* Season cd*/
  AF5REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
  AF5REC.XOWCD = AK0AM001.XOWCD[AFWIXM]; /* Owner group*/
  ;
  if (AF5REC.XSNYR < 85)
    AF5REC.XSNYR = AF5REC.XSNYR + 2000;
  else
    AF5REC.XSNYR = AF5REC.XSNYR + 1900;
  end
  ;
  AF5REC.XDMCD = "00"; /* Dim cd*/
  AF5REC.XDVCD = "01"; /* Div cd*/
  AK0A-S0100(); /* Select unique DACAST.VAFCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    converseLib.validationFailed(55);
    AFWREC.AFWPRCSN = "5600"; /* Process number*/
    set AK0AM001.XSECD[AFWIXM] cursor, bold;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
    set AK0AM001.SY1STNBR[AFWIXM] bold;
    set AK0AM001.SY2CLRID[AFWIXM] bold;
    set AK0AM001.XOWCD[AFWIXM] bold;
  end
  ;
  ;
end // end AK0A-5600

// Process valid input request
Function AK0A-6000()
  if (converseVar.validationMsgNum != 0) /* an error*/
    return; /* dont do this*/
  end
  ;
  XX0XS01(); /* get date and time*/
  ;
  AFWREC.AFWIXM = 1; /* first row*/
  ;
  while (AFWREC.AFWIXM <= AK0AW00.AK0AW-MAX-SCREEN-LINES /* for each row*/
   && AK0AM001.XSECD[AFWIXM] != " ") /* with data*/
    ;
    /* *==================**/
    /* *  Build DB Keys   **/
    /* *==================**/
    ;
    set AF2REC empty; /* Reset Wk Storage field*/
    AF2REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
    AF2REC.XSECD = AK0AM001.XSECD[AFWIXM]; /* Season cd*/
    AF2REC.XOWCD = AK0AM001.XOWCD[AFWIXM]; /* owner group*/
    AF2REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
    ;
    if (AF2REC.XSNYR < 85)
      AF2REC.XSNYR = AF2REC.XSNYR + 2000;
    else
      AF2REC.XSNYR = AF2REC.XSNYR + 1900;
    end
    ;
    AF2REC.XDMCD = "00"; /* Dim cd*/
    AF2REC.XDVCD = "01"; /* Div cd*/
    AK0A-S0200(); /* Select unique DACAST.VAFSTY01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      AK0A-6100(); /* color processing*/
    else
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        AF2REC.XOWCD = "00";
        AK0A-S0200(); /* Select unique DACAST.VAFSTY01 row*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          converseLib.validationFailed(136);
          AFWREC.AFWPRCSN = "6000"; /* Process number*/
          set AK0AM001.XSECD[AFWIXM] cursor, bold;
          set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
          set AK0AM001.SY1STNBR[AFWIXM] bold;
          set AK0AM001.SY2CLRID[AFWIXM] bold;
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* roll back changes*/
          exit stack;
        else
          AK0A-6200(); /* update AFSTY*/
          AK0A-6100(); /* update AFCLR*/
          ;
        end
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* next row*/
  end
  ;
  AFWREC.AFWNMO = 1;
end // end AK0A-6000

// Insert AFCLR process
Function AK0A-6100()
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set AF5REC empty; /* Reset Wk Storage field*/
  ;
  AF5REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
  AF5REC.SY2CLRID = AK0AM001.SY2CLRID[AFWIXM]; /* color*/
  AF5REC.XSECD = AK0AM001.XSECD; /* Season cd*/
  AF5REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
  ;
  if (AF5REC.XSNYR < 85)
    AF5REC.XSNYR = AF5REC.XSNYR + 2000;
  else
    AF5REC.XSNYR = AF5REC.XSNYR + 1900;
  end
  ;
  AF5REC.XDMCD = "00"; /* Dim cd*/
  AF5REC.XOWCD = "00"; /* Owner group*/
  AF5REC.XDVCD = "01"; /* Div cd*/
  AK0A-S0100(); /* Select unique DACAST.VAFCLR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    converseLib.validationFailed(136);
    AFWREC.AFWPRCSN = "6100"; /* Process number*/
    set AK0AM001.XSECD[AFWIXM] cursor, bold;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
    set AK0AM001.SY1STNBR[AFWIXM] bold;
    set AK0AM001.SY2CLRID[AFWIXM] bold;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    exit stack;
  else
    ;
    AK0AW01.SY1STNBR = AF5REC.SY1STNBR; /* Style no.*/
    AK0AW01.SY2CLRID = AF5REC.SY2CLRID; /* color*/
    AK0AW01.XDMCD = AF5REC.XDMCD; /* Dim cd*/
    AK0AW01.XDVCD = AF5REC.XDVCD; /* Div cd*/
    AK0AW01.XSECD = AF5REC.XSECD; /* Season cd*/
    AK0AW01.XSNYR = AF5REC.XSNYR; /* Season yr*/
    AK0AW01.XCTCD = AF5REC.XCTCD; /* ctry*/
    AK0AW01.PG1SC4CD = AF5REC.PG1SC4CD; /* sched*/
    AK0AW01.XPCCD = AF5REC.XPCCD; /* category*/
    AK0AW01.XPLCD = AF5REC.XPLCD; /* line*/
    AK0AW01.XPRCD = AF5REC.XPRCD; /* type*/
    AK0AW01.PG2SCRFL = AF5REC.PG2SCRFL; /* screen flag*/
    AK0AW01.SY1STNBR = AF5REC.SY1STNBR; /* blank style*/
    AK0AW01.SY2BCLCD = AF5REC.SY2BCLCD; /* blank color*/
    AK0AW01.AF2SFODT = AF5REC.AF2SFODT; /* first offer date*/
    ;
    set AF5REC empty; /* Reset Wk Storage field*/
    /* MOVE SAVED FIELDS AND FILL REMAINING FIELDS*/
    ;
    AF5REC.SY1STNBR = AK0AW01.SY1STNBR; /* Style no.*/
    AF5REC.SY2CLRID = AK0AW01.SY2CLRID; /* color*/
    AF5REC.XDMCD = AK0AW01.XDMCD; /* Dim cd*/
    AF5REC.XDVCD = AK0AW01.XDVCD; /* Div cd*/
    AF5REC.XSECD = AK0AW01.XSECD; /* Season cd*/
    AF5REC.XSNYR = AK0AW01.XSNYR; /* Season yr*/
    AF5REC.XCTCD = AK0AW01.XCTCD; /* ctry*/
    AF5REC.PG1SC4CD = AK0AW01.PG1SC4CD; /* sched*/
    AF5REC.XPCCD = AK0AW01.XPCCD; /* category*/
    AF5REC.XPLCD = AK0AW01.XPLCD; /* line*/
    AF5REC.XPRCD = AK0AW01.XPRCD; /* type*/
    AF5REC.PG2SCRFL = AK0AW01.PG2SCRFL; /* screen flag*/
    AF5REC.SY1STNBR = AK0AW01.SY1STNBR; /* blank style*/
    AF5REC.SY2BCLCD = AK0AW01.SY2BCLCD; /* blank color*/
    AF5REC.AF2SFODT = AK0AW01.AF2SFODT; /* first offer date*/
    ;
    AF5REC.AF5FSCST = "N"; /* color status*/
    AF5REC.AF5CLBFL = "Y"; /* color buy flag*/
    ;
    ;
    AF5REC.XOWCD = AK0AM001.XOWCD[AFWIXM]; /* owner group*/
    AF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    AF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    AK0A-6110(); /* insert AFCLR row*/
  end
  ;
  ;
end // end AK0A-6100

// Insert AFCLR row
Function AK0A-6110()
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFCLR01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3520" ("A ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to calling process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "6110"; /* Process number*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "6110"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AK0A-6110

// Insert AFSTY process
Function AK0A-6200()
   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/
  ;
  set AF2REC empty; /* Reset Wk Storage field*/
  ;
  AF2REC.SY1STNBR = AK0AM001.SY1STNBR[AFWIXM]; /* Style no.*/
  AF2REC.XSECD = AK0AM001.XSECD; /* Season cd*/
  AF2REC.XSNYR = AK0AM001.AK0AM-SESN-YEAR[AFWIXM]; /* Season cd*/
  ;
  if (AF2REC.XSNYR < 85)
    AF2REC.XSNYR = AF2REC.XSNYR + 2000;
  else
    AF2REC.XSNYR = AF2REC.XSNYR + 1900;
  end
  ;
  AF2REC.XDMCD = "00"; /* Dim cd*/
  AF2REC.XOWCD = "00"; /* Owner group*/
  AF2REC.XDVCD = "01"; /* Div cd*/
   /* Select unique DACAST.VAFSTY01 row*/
  AK0A-S0200();
  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
    converseLib.validationFailed(999);
    AFWREC.AFWPRCSN = "6200"; /* Process number*/
    set AK0AM001.XSECD[AFWIXM] cursor, bold;
    set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] bold;
    set AK0AM001.SY1STNBR[AFWIXM] bold;
    set AK0AM001.SY2CLRID[AFWIXM] bold;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back any changes*/
    exit stack;
  else
    AF2FSTDL = 0; /* forecast style dollars*/
    AF2FSTDT = 0; /* forecast style dollars date*/
    AF-MKT-STY-DLR = 0;
    AF-MKT-STY-DLR-DT = 0;
    AF-MUL-FCTR = 0;
    AF2REC.AF2SPCDT = 0; /* size pct chg date*/
    AF2REC.AF2FSTST = "N"; /* style status*/
    AF2REC.AF-MUL-FCTR-FL = "N";
    AF2REC.ZZZCHGDT = 0;
    AF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    AF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    AF2REC.XOWCD = AK0AM001.XOWCD[AFWIXM]; /* owner group*/
    AFWREC.AFWIDX1 = 1; /* first bucket*/
    ;
    while (AFWREC.AFWIDX1 <= 10) /* for each bucket*/
      AF2REC.SY5SZID[AFWIDX1] = 0;
      AF2REC.AF2SZPCT[AFWIDX1] = 0;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* next bucket*/
    end
    ;
    AK0A-6210(); /* update AFSTY row*/
    ;
  end
  ;
  ;
  ;
end // end AK0A-6200

// Insert AFSTY row
Function AK0A-6210()
  ;
   /* *==============================**/
   /* *  Update DACAST.VAFSTY01 Row  **/
   /* *==============================**/
  ;
  try
    call "IO3510" ("A ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AFWREC.AFWSWR = "Y"; /* request new data*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Data updated by other user/s*/
      AFWREC.AFWSWR = "Y"; /* Reselect same data*/
      AFWREC.AFWNMO = 12; /* Indicate external update done*/
      AFWREC.AFWPRCSN = "162"; /* Process number*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
      end
    end
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "6210"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AK0A-6210

// Select unique AFCLR row
Function AK0A-S0100()
   /* ------------------------------------------------------------*/
   /* Select unique DACAST.VAFCLR01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3520" ("S ", SQLCA, AF5REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S100"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AK0A-S0100

// Select unique AFSTY row
Function AK0A-S0200()
   /* ------------------------------------------------------------*/
   /* Select unique DACAST.VAFSTY01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to calling process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S200"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = "AK0AM001"; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AK0AM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  exit stack; /* Exit to redisplay map*/
  ;
end // end AK0A-S0200

// Select unique AFSTY row
Function AK0AS-5300()
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AK0AW00.XSNYR
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      AK0A-5310(); /* validate season*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
        AFWREC.AFWPRCSN = "5300"; /* Process number*/
        AK0AW00.AK0AW-ERROR-FLAG = "Y";
        set AK0AM001.AK0AM-SESN-YEAR[AFWIXM] cursor, bold;
                                   /* highlight field*/
        converseLib.validationFailed(26); /* indicate error message*/
      end
    end
  end
  ;
end // end AK0AS-5300

//*** RECORD=AK0AW00 ****
// *AK0A misc working storage
// ***********************
Record AK0AW00 type basicRecord
  10 AK0AW-MAX-SCREEN-LINES AK0AW-MAX-SCREEN-LINES ; 
  10 AK0AW-ERROR-FLAG AK0AW-ERROR-FLAG ; 
  10 XSNYR XSNYR ; 
  10 AK0AWXSA AK0AWXSA ; 
    15 AK0AWXSS AK0AWXSS ; 
    15 AK0AWXYR AK0AWXYR ; 
end // end AK0AW00

//*** RECORD=AK0AW01 ****
// ******************** saved forecast ************************
// 
// DB2 TABLE:           DACAST.VAFCLR01
// 
// COPYLIB MEMBER:      DCL00612
// 
// I/O MOD:             IO3520
// 
// KEY TO DB2 TABLE:    sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xdvcd
//                      xsecd
//                      xsnyr
// 
// DATE CREATED:        05/23/89
// 
// MAINTENANCE LOG:
// 
//   DATE    USERID     COMMENT
// --------  ------     ---------------------------------------
// 05-23-89  cepple     INITIAL RECORD CREATION
// 08/30/90  Wkinca     ADD PRODUCT TYPE, LINE & CATEGORY
// 06/07/91  kjohn2     add first offer dte - june tble chngs
// 10-03-91  kjohn2     Add pg-sched-spclt-cd,
//                          pg-scn-sty-ind,
//                          sy-blnk-colr-cd-id,
//                          sy-blnk-sty-nbr,
//                          xow-own-grp-cd.
// 06-05-92  lrein      add af-in-stk-proc-fl
//                          af-in-stk-ovrdfl
//                          af-in-stk-qty
// 03-22-93  LREIN      del af-in-stk-ovrdfl
//                      add af-in-stk-pct
//                          af-instk-pct-grpid
// 07-12-93  Tdodso     add xctcd (xct_ctry_cd)
//                      add af-wt-colr-pct
//                      add af-lgsh-blabk-ind
// 03-31-94  LREIN      add AF-LGSH-CALC-HHMM
//                          AF-LSGH-TS-QTY
//                          AF-LGSH-PUR-TS-QTY
// ***********************
Record AK0AW01 type basicRecord
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XDVCD XDVCD ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 XCTCD XCTCD ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 XPCCD XPCCD ; 
  10 XPLCD XPLCD ; 
  10 XPRCD XPRCD ; 
  10 PG2SCRFL PG2SCRFL ; 
  10 SY1BSTNB SY1BSTNB ; 
  10 SY2BCLCD SY2BCLCD ; 
  10 AF5CLBFL AF5CLBFL ; 
  10 AF2SFODT AF2SFODT ; 
end // end AK0AW01

// error indicator
DataItem AK0AW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max lines per screen
DataItem AK0AW-MAX-SCREEN-LINES smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// seas code & 2 digit yr
DataItem AK0AWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code
DataItem AK0AWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2 digit season year
DataItem AK0AWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

