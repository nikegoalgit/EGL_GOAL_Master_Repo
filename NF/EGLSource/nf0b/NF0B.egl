package nf0b;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXX-CURR-PAGE-NBR;
import corpcom7.XXX-HI-PAGE-NBR;
import corpcom7.XXX-INX-FLD-NBR;
import corpcom7.XXX-INX-LMT-NBR;
import corpcom7.XXX-MAP-FMAT-FL;
import corpcom7.XXX-RQT-DATA-FL;
import corpcom7.XXX-TEMP-STG-LNTH;
import corpcom7.ZZZSTM;
import corpx1.XCTCD;
import corpz3.ZZZSDT;
import ff.common.FFABEGMO;
import ff.common.FFAENDMO;
import ku.common.KUCCOID;
import nf.common.NFWREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=NF0B ****
// This application displays the contents of dfcast.vrlog001.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// AS-902   12/15/94  mwalke  New application.
// FF175    12/18/96  DSMITH  Regenerated for year 2000.
// *********************
Program NF0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  NF0BW00 NF0BW00; // record
  NF0BW01 NF0BW01; // record
  NFWREC NFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VRLOG001 VRLOG001; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NF0BM.NF0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPNF-00000: XPNF-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set NF0BM001 initial; /* M001 input/output*/
    set NF0BW00 empty; /* Working storage*/
    set NF0BW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    NF0BW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    NF0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    NF0BW00.XXX-TEMP-STG-LNTH = 462; /* Temporary storage length*/
    NF0BW00.XXX-INX-LMT-NBR = 14; /* Number of lines on a page*/
    ;
    set NF0BM001.CATOAP cursor; /* place cursor*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto NF0B-00000; /* Converse the main process*/
    ;
    ;
    NF0B-00000: NF0B-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto NF0B-00000; /* Converse the main process*/
    ;
    ;
  end // end main
end // end NF0B

// Determine which map to display
Function NF0B-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /*  */
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  NF0B-10000(); /* Obtain the data to display*/
  ;
  NF0B-20000(); /* Format and display the map*/
  ;
  NF0B-30000(); /* Check attention identifier*/
  ;
  NF0B-40000(); /* Validate data.*/
  ;
end // end NF0B-00000

// Obtain data for display
Function NF0B-10000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (NFWREC.XXX-MSG-NBR == 0) /* No message to display*/
    NF0BW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BS-TA0050-P(); /* Purge any temporary storage*/
  ;
  NF0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Select and open the cursor dfcast.vrlog001.*/
   /* ------------------------------------------------------------*/
  set VRLOG001 empty; /* Clear row storage area*/
  ;
  NF0BS-VRLOG001-S1(); /* Open cursor for dfcast.vrlog001*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  NF0BW00.XXX-INX-FLD-NBR = 1; /* set line index*/
  NF0BW00.NF0BW-EOC-FL = "N"; /* set end of cursor flag*/
  ;
  while (NF0BW00.NF0BW-EOC-FL == "N") /* Until end of cursor*/
    NF0BS-VRLOG001-N1(); /* Fetch next row in cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0BW00.NF0BW-EOC-FL == "N") /* Not end of cursor*/
      ;
      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* - country code, forecast begin month, forecast end month,*/
      /* setup date, and setup time.*/
      /* ------------------------------------------------------------*/
      ;
      NF0BW01.NF0BW-KUCCOID[XXX-INX-FLD-NBR] = VRLOG001.KUCCOID;
      NF0BW01.NF0BW-XCTCD[XXX-INX-FLD-NBR] = VRLOG001.XCTCD;
      NF0BW01.NF0BW-FFABEGMO[XXX-INX-FLD-NBR] = VRLOG001.FFABEGMO;
      NF0BW01.NF0BW-FFAENDMO[XXX-INX-FLD-NBR] = VRLOG001.FFAENDMO;
      NF0BW01.NF0BW-ZZZSDT[XXX-INX-FLD-NBR] = VRLOG001.ZZZSDT;
      NF0BW01.NF0BW-ZZZSTM[XXX-INX-FLD-NBR] = VRLOG001.ZZZSTM;
      ;
      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      NF0BW00.XXX-INX-FLD-NBR = NF0BW00.XXX-INX-FLD-NBR + 1; /* inc ln idx*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0BW00.XXX-INX-FLD-NBR > NF0BW00.XXX-INX-LMT-NBR) /* Page is full*/
      ;
      NF0BS-TA0050-A(); /* Add page to temporary storage*/
      NF0BW00.XXX-INX-FLD-NBR = 1; /* Display line index*/
      NF0BW00.XXX-CURR-PAGE-NBR = NF0BW00.XXX-CURR-PAGE-NBR + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BW00.XXX-INX-FLD-NBR > 1) /* Page was formatted*/
    NF0BS-TA0050-A(); /* Add page to temporary storage*/
  end
  ;
  NF0BW00.XXX-HI-PAGE-NBR = NF0BW00.XXX-CURR-PAGE-NBR;
  NF0BW00.XXX-CURR-PAGE-NBR = 1; /* reset current page NBR*/
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  NF0BS-VRLOG001-C1(); /* Close selected set cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/
    NFWREC.XXX-MSG-LOC-ID = "10000"; /* Message location*/
    converseLib.validationFailed(4); /* No data was found to display*/
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
  ;
  ;
end // end NF0B-10000

// display the map
Function NF0B-20000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    NFWREC.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    NF0B-21000(); /* Format the data in the map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  NF0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  NF0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (NFWREC.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")  /* or message text*/
    ;
    if (NFWREC.XXX-MSG-NBR != 0) /* Message to display*/
      if (NFWREC.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(NFWREC.XXX-MSG-NBR);
      end /* Message number*/
    else
      NF0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    ;
    NF0BM001.XXX-MSG-LOC-ID = NFWREC.XXX-MSG-LOC-ID;
                                   /* Message location*/
    set NF0BM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse NF0BM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  NFWREC.XXX-MSG-LOC-ID = " "; /* Message location*/
  NFWREC.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = NF0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = NF0BM001.CAITEM; /* Application data*/
  ;
  set NF0BM001.CATOAP normal; /* TO application*/
  set NF0BM001.CAITEM normal; /* Application data*/
  ;
  ;
end // end NF0B-20000

// format data for display
Function NF0B-21000()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set NF0BM001 initial; /* M001 input/output area*/
  NF0BW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/
  ;
  set NF0BM001.CATOAP cursor; /* place cursor*/
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/
    if (NF0BW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
      ;
      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (NF0BW00.XXX-CURR-PAGE-NBR > NF0BW00.XXX-HI-PAGE-NBR) /* desire > hi*/
        NF0BW00.XXX-CURR-PAGE-NBR = NF0BW00.XXX-HI-PAGE-NBR; /* default*/
      end
      ;
      NF0BS-TA0050-R(); /* Read temporary storage page*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    NF0BM001.XXX-CURR-PAGE-NBR = NF0BW00.XXX-CURR-PAGE-NBR;
    NF0BM001.XXX-HI-PAGE-NBR = NF0BW00.XXX-HI-PAGE-NBR;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
  ;
  while (NF0BW00.XXX-INX-FLD-NBR <= NF0BW00.XXX-INX-LMT-NBR)
    ;
    NF0BM001.NF0BM-KUCCOID[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-KUCCOID[XXX-INX-FLD-NBR];
    NF0BM001.NF0BM-XCTCD[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-XCTCD[XXX-INX-FLD-NBR];
    NF0BM001.NF0BM-FFABEGMO[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-FFABEGMO[XXX-INX-FLD-NBR];
    NF0BM001.NF0BM-FFAENDMO[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-FFAENDMO[XXX-INX-FLD-NBR];
    NF0BM001.NF0BM-ZZZSDT[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-ZZZSDT[XXX-INX-FLD-NBR];
    NF0BM001.NF0BM-ZZZSTM[XXX-INX-FLD-NBR] = NF0BW01.NF0BW-ZZZSTM[XXX-INX-FLD-NBR];
    ;
    NF0BW00.XXX-INX-FLD-NBR = NF0BW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
    ;
  end
  ;
  ;
end // end NF0B-21000

// check the attention identifier
Function NF0B-30000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (NF0BW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set NF0BW01 empty; /* M001 display storage*/
    end
    ;
    NF0BW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    NF0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      NF0BS-TA0050-P(); /* Purge any temporary storage*/
      XSNFS-EXIT(); /* Exit to another application*/
      set NF0BM001.CATOAP cursor, bold; /* Highlight*/
    else
      NFWREC.XXX-MSG-LOC-ID = "30000"; /* Message location*/
      converseLib.validationFailed(7); /* PA/PF key may not be used*/
    end
    ;
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf9) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "NF0BM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "NL0A"; /* System Menu*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* System Menu*/
    end
    ;
    if (converseVar.eventKey is pf9) /* PF9 was pressed*/
      COMMAREA.CATOAP = "NF0M"; /* System Menu*/
    end
    ;
    NF0BS-TA0050-P(); /* Purge any temporary storage*/
    XSNFS-EXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* or PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* or PF8 was not pressed*/
    ;
    NFWREC.XXX-MSG-LOC-ID = "30000"; /* Message location*/
    converseLib.validationFailed(2); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end NF0B-30000

// validate data
Function NF0B-40000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0BM001.CAITEM > " ") /* Application data was entered*/
    NFWREC.XXX-MSG-LOC-ID = "40000"; /* Module identification*/
    set NF0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Enter only with FAST PATH*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* Errors were found*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      ;
      /* ------------------------------------------------------------*/
      /* If scroll back was requested, ensure that pages exist.*/
      /* ------------------------------------------------------------*/
      if (converseVar.eventKey is pf7) /* Scroll back request*/
        if (NF0BW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/
          NFWREC.XXX-MSG-LOC-ID = "40000";
          converseLib.validationFailed(3); /* No previous page to display*/
        else
          NF0BW00.XXX-CURR-PAGE-NBR = NF0BW00.XXX-CURR-PAGE-NBR - 1;
          NF0BW00.XXX-MAP-FMAT-FL = "Y";
          return; /* Return to previous process*/
        end
      end
      ;
      /* ------------------------------------------------------------*/
      /* If scroll forward was requested, ensure that pages exist.*/
      /* ------------------------------------------------------------*/
      ;
      if (converseVar.eventKey is pf8) /* Scroll forward request*/
        if (NF0BW00.XXX-CURR-PAGE-NBR >= NF0BW00.XXX-HI-PAGE-NBR)
          NFWREC.XXX-MSG-LOC-ID = "40000";
          converseLib.validationFailed(9); /* No more pages to display*/
        else
          NF0BW00.XXX-CURR-PAGE-NBR = NF0BW00.XXX-CURR-PAGE-NBR + 1;
          NF0BW00.XXX-MAP-FMAT-FL = "Y";
          return; /* Return to previous process*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end NF0B-40000

// add page to temp storage
Function NF0BS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BW01.XXX-TEMP-STG-LNTH = NF0BW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (NF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set NF0BW01 empty; /* M001 display storage*/
    ;
    NF0BW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/
    ;
    TA5REC.TA5TSQIX = 0; /* Clear last page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  converseLib.validationFailed(5); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-TA0050-A

// purge temp storage
Function NF0BS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set NF0BW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  NF0BW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (NF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  converseLib.validationFailed(5); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-TA0050-P

// read temp storage
Function NF0BS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  NF0BW01.XXX-TEMP-STG-LNTH = NF0BW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = NF0BW00.XXX-CURR-PAGE-NBR; /* Page number*/
  ;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (NF0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  converseLib.validationFailed(5); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-TA0050-R

// Close selected set cursor
Function NF0BS-VRLOG001-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of rows from dfcast.vrlog001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VRLOG001" ("C1", SQLCA, VRLOG001) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "VRLOG-C1"; /* Message location*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  ;
  converseLib.validationFailed(5); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLOG001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-VRLOG001-C1

// Fetch next row in cursor
Function NF0BS-VRLOG001-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from dfcast.vrlog001.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VRLOG001" ("N1", SQLCA, VRLOG001) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      NF0BW00.NF0BW-EOC-FL = "Y"; /* End of cursor*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "VRLOG-N1"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(6); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(5); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DFCAST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLOG001"; /* Table view name*/
  TA1REC.TA1TBLKE = VRLOG001.VRLOG001-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-VRLOG001-N1

// Select set and open cursor
Function NF0BS-VRLOG001-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from dfcast.vrlog001.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VRLOG001" ("S1", SQLCA, VRLOG001) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "VRLOG-S1"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(6); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(5); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = NFWREC.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLOG001"; /* Table view name*/
  TA1REC.TA1TBLKE = VRLOG001.VRLOG001-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end NF0BS-VRLOG001-S1

// Application initialization
Function XPNF-00000()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* Application entry validation*/
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the segmented transaction identification.*/
   /* ------------------------------------------------------------*/
  ;
  XSSEGTR(); /* Set transaction identification*/
  ;
   /* ------------------------------------------------------------*/
   /* If control was passed to this transaction from another*/
   /* within the same application system, restore the work record*/
   /* from the COMMAREA.  Otherwise, initialize the work record.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFRMSYS == "NF" /* Same system*/
   || COMMAREA.CAFRMSYS == "NL" /* or alternate system*/
  )                             /* NEXT SENTENCE*/
  else
    set NFWREC empty; /* Initialize work record area*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize CSP special function and exit switch data items.*/
   /* ------------------------------------------------------------*/
  ;
  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/
  ;
  ;
end // end XPNF-00000

// common exit routine
Function XSNFS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end
  ;
  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/
    ;
    /* MOVE NFWREC.CAUSERA TO COMMAREA.CAUSERA;/* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  ;
  XSEXIT(); /* Exit to another application*/
  ;
  NFWREC.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/
  ;
   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/
  ;
  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/
  ;
  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    ;
    COMMAREA.CATOAP = " "; /* Clear TO application*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
    ;
  end
  ;
  ;
end // end XSNFS-EXIT

//*** RECORD=NF0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record NF0BW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 NF0BW-EOC-FL NF0BW-EOC-FL ; 
end // end NF0BW00

//*** RECORD=NF0BW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record NF0BW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(462) ; // Temporary storage length
    10 NF0BW-KUCCOID NF0BW-KUCCOID [14] ; 
    10 NF0BW-XCTCD NF0BW-XCTCD [14] ; 
    10 NF0BW-FFABEGMO NF0BW-FFABEGMO [14] ; 
    10 NF0BW-FFAENDMO NF0BW-FFAENDMO [14] ; 
    10 NF0BW-ZZZSDT NF0BW-ZZZSDT [14] ; 
    10 NF0BW-ZZZSTM NF0BW-ZZZSTM [14] ; 
end // end NF0BW01

//*** RECORD=VRLOG001 ****
// **************** RECEIVE LOG TABLE *************************
// 
// DB2 TABLE:           DFCAST.VRLOG001
// 
// COPYLIB MEMBER:      DRLOG001
// 
// KEY TO DB2 TABLE:    XCT_CTRY_CD
// 
// DATE      INIT      COMMENTS
// --------  -----     -------------------------------------
// 12-19-94  MWALKE    INITIAL CREATION
// ************************************************************
// ************************
Record VRLOG001 type basicRecord
  5 VRLOG001-GROUP VRLOG001-GROUP ; 
    10 VRLOG001-KEY VRLOG001-KEY ; 
      15 KUCCOID KUCCOID ; 
      15 XCTCD XCTCD ; 
    10 FFABEGMO FFABEGMO ; 
    10 FFAENDMO FFAENDMO ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
end // end VRLOG001

// end of cursor flag
DataItem NF0BW-EOC-FL char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// fcst begin month array
DataItem NF0BW-FFABEGMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst end month array
DataItem NF0BW-FFAENDMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// customer id array
DataItem NF0BW-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// country code array
DataItem NF0BW-XCTCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setup date array
DataItem NF0BW-ZZZSDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setup time array
DataItem NF0BW-ZZZSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data group item entire row
DataItem VRLOG001-GROUP char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key into Table
DataItem VRLOG001-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

