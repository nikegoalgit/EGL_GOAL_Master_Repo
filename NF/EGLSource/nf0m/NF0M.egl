package nf0m;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXPR01;
import corpcom3.XPXSN01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom3.XPZRG01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom6.UT1REC;
import corpcom6.UT2REC;
import corpx1.*;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSECD;
import corpx2.XSNYR;
import corpx2.XURCOPY;
import corpx2.XURUSRNM;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import corpy2.YSMSRCVL;
import corpy2.YSMXDV;
import corpz3.ZRGCD;
import corpz3.ZRGTBL;
import ff.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=NF0M ****
// **********************************************************
// This application submits batch jobs to request NIL reports
// **********************************************************
// maint.
// date      by     why
// --------  ------ -------------------------------------------
// 09-14-90  JJUDKI  New application.
// 11-09-90  JJUDKI  Add table nf0mt03 to process longer map
//                  option descriptions
//  1-18-91  JJUDKI  NIL TASKS 1,2,3,4,6: ADD 2 REPORTS TO
//                  NF1141. PUT SUBMITTED MSG BACK IN.
//  2-12-91  JJUDKI  REGENED FOR XCTTBL STRUCTURE CHANGES
//  2-25-91  JJUDKI  ADD OPTION #14
//  3-14-91  JJUDKI  CHANGES FOR BUNDL. ENABLE USER TO REQUEST
//                  DIFFERENT REMOTE PRINTER AND CHANGE NUMBER
//                  COPIES.
//  4-02-91  JJUDKI  REMOVE USE OF INTERNAL SECURITY NF0MT02.
//                  IN NF0M002. USE TA6REC.XURUSRID IN PROC
//                  NF0M104 TO ASSIGN FORMS CODES.
//  4-19-91  JJUDKI  ADD NF1142 JOB TO SUBMIT TOTNIL SUMMARY
//                  REPORTS OFF OF OPTION #2.
//  5-22-91  JJUDKI  Allow 3 digit remote printer id's. Add
//                  P0050 to NF1001 thru NF1008 jobs to run
//                  NF1270 (style group 3yc detail report).
//  6-03-91  JJUDKI  change forms code for style group print
//                  to allow 120 lines portrait duplex.
//  7-18-91  JJUDKI  Add scrolling of map1 menu options. Add
//                  prod fcst vs. sales fcst data choice. Add
//                  Charles Seng forms code output.
//  8-02-91  JSHANN  added option 16
//  8-07-91  JJUDKI  Added option 17. Changed option 15 edits
//                  to check dates,mgtrgn,slsrgn and ctry.
//  8-15-91  JSHANN  Added prod type as selection
//  9-25-91  JSHANN  Changed opt 16 for sales region
//  9-26-91  jjudki  Change tartype 'n' to 'x' in nf0m105.
// 10-09-91  jjudki  Add product type code edit to nf0m170, and
//                   add copies to output parm card.
// 10-09-91  jjudki  Add exception % for option 17.
// 11-07-91  jjudki  Add country summary proc for option 17
// 12-20-91  JSHANN  Added opt 18, factory exception w/orders
// 12-27-91  JSHANN  Added /EOF card for opt 18-3
// 02-11-92  jjudki  Pass season code to extract program.
// 02-19-92  JSHANN  Pass correct occurance of season.
// 03-02-92  jjudki  Pass season code for options 7 and 10.
// 03-05-92  JSHANN  Added to option 11 the send report via
//                   GE-Mail to HONG KONG.
// 04-16-92  jjudki  Comment out Level card in nf0mt17,19,21.
// 04-20-92  jjudki  Add Dave Mondor forms code output.
// 08-14-92  jjudki  Add NBAUTH forms code output.
// 07-30-92  jjudki  Add product type selection for option #17
//                  per Caroline Marquiss.
//                   Add edit to option #17 to not allow select
//                  of adjustment ctry for ctry report per
//                  Phil Simmons.
// 11-02-92  jjudki  Add JGUTHR forms code output.
// 12-04-92  jjudki  Change JGUTHR forms codes.
// 01-07-93  jjudki  Give NCHISH forms code formerly used by
//                  CSENG.
// 02-08-92  jjudki  Add SSPERL forms code output.
// 02-09-93  JJUDKI  Added to option 9 the send report via
//                   GE-Mail to HONG KONG.
// 03-16-93  JJUDKI  Changes for regional forecasting. Allow
//                  all mgt regions for options #9 and #11.
// 06-02-93  JJUDKI  Allow no adjustments for totnil option 1.
// 06-18-93  kshaw   changed test jcl to use testenc.
// 10-05-93  jjudki  Add CTEEUW forms code output.
// 12-06-93  bschul  Add EHQ printing.
// 12-20-93  bschul  Added NF0MW12 and other changes for EHQ.
// 06-09-94  jjudki  Add PROSS forms code output to table.
// 07-26-94  KGRAHA  Allow new option 'C' (CFP Sales Forecast)
//                   to be entered under 'Origin of Forecast
//                   Qtys' field.
// 01-20-95  MWALKE  Remove option #19; replaced with as902
//                   project (NF0B).
// 09-21-95  DPACK   Remove EXCP PCT from option #17 report
// 12/18/96  DSMITH  Regenerated for year 2000.
// 03/17/99  SBUNGO  y2k fix in nf0m205 and nf0m206
// 07/27/99  cwhit1  make change to option 11 rpt, inactivate
//                   other menu selections
// 08/19/99  ldavi4  Add PO-typ-cd option to menu option 11.
// *********************
Program NF0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  NF0MW04 NF0MW04; // record
  NF0MW07 NF0MW07; // record
  NF0MW09 NF0MW09; // record
  NF0MW10 NF0MW10; // record
  NF0MW12 NF0MW12; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NF0MT02; // table
  use NF0MT03; // table
  use NF0MT04; // table
  use NF0MT05; // table
  use NF0MT06; // table
  use NF0MT07; // table
  use NF0MT08; // table
  use NF0MT09; // table
  use NF0MT11; // table
  use NF0MT12 {deleteAfterUse = yes}; // table
  use NF0MT17; // table
  use NF0MT18; // table
  use NF0MT19; // table
  use NF0MT21; // table
  use NF0MT22 {deleteAfterUse = yes}; // table
  use NF0MT31; // table
  use NF0MT41 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use ZRGTBL {deleteAfterUse = yes}; // table
  use NF0MM.NF0MM001,  // forms
      NF0MM.NF0MM002, 
      NF0MM.NF0MM004, 
      NF0MM.NF0MM005, 
      NF0MM.NF0MM006, 
      NF0MM.XX0XM001,
      NF0MM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NF0M000: NF0M000();
    exit program;
  end // end main
end // end NF0M

// main flow
Function NF0M000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR();
  ;
  TA6REC.TA6SUBSW = "I"; /* get information only*/
  NF0M001(); /* initialize the application*/
  ;
  NF0MM001.NF0MMNBR = "00"; /* appl maintainence revision number*/
  ;
  NF0MW04.NF0MWEOA = "N"; /* set end of application flag*/
  NF0MW04.NF0MWEOS = "N"; /* set end of screen flag*/
  ;
  while (NF0MW04.NF0MWEOA == "N") /* while not end of application*/
    NF0M002(); /* process the report options*/
  end
  ;
  COMMAREA.CATOAP = "FY0M"; /* return to main menu*/
  ;
end // end NF0M000

// init NIL rept selection
Function NF0M001()
  ;
  NF0MW04.NF0MWPRO = "NF0M001";
  ;
  set TA0PM001 empty;
  set NF0MM001 empty;
  set NF0MM002 empty;
  set NF0MM004 empty;
  set NF0MM005 empty;
  set NF0MM006 empty;
  ;
  set NF0MW04 empty;
  set NF0MW07 empty;
  set NF0MW09 empty;
  set TAEREC empty;
  set TA1REC empty;
  set SQLCA empty;
  ;
  set NF0MM001 initial; /* clear map*/
  set NF0MM002 initial; /* clear map*/
  set NF0MM004 initial; /* clear map*/
  set NF0MM005 initial; /* clear map*/
  set NF0MM006 initial; /* clear map*/
  ;
   /* --------------------------------------------------*/
   /* call sub-rtn to find which environment the program*/
   /* is executing. Production ('03') or devl*/
   /* --------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ALLFLDS";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  NF0MW04.NF0MWTAU = TA3REC.TA3USRID;
  ;
  ;
  NF0MW04.NF0MWSCR = "NF0MM001"; /* first screen*/
  NF0MW04.NF0MWNAM[1] = "NF0MM001"; /* init screens used in applic.*/
  ;
  NF0MM001.NF0MMRDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  NF0MW04.NF0MWFD1 = "S"; /* default to sls fcst data*/
  ;
  NF0MW04.NF0MWCT1 = 1; /* table counter*/
  NF0MW04.NF0MWCT2 = 1; /* screen counter*/
  ;
  NF0MS03(); /* count report options*/
  NF0M109(); /* count report options*/
  ;
end // end NF0M001

// Main process to display a map
Function NF0M002()
  ;
  FFWREC.XXXMSGNO = 0;
  NF0MM001.VAGen_EZEMSG = "  ";
  set NF0MW07 empty;
  ;
  if (NF0MW04.NF0MWERR != "Y")
    NF0MM001.NF0MMOPT = "  ";
    NF0MM001.NF0MM-001-DATA-SRC = "F";
  end
  ;
  NF0MM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.XGPCD = "02";
  ;
  NF0MW04.NF0MWERR = "N";
  ;
  if (NF0MW04.NF0MWEND == "Y")
    NF0M109(); /* build map1 descrips from table*/
  end
  ;
  NF0MM001.NF0MMFDS = NF0MW04.NF0MWFD1; /* fcst data source*/
  ;
  converse NF0MM001 ;
  ;
  NF0MW04.NF0MWFD2 = NF0MM001.NF0MMOPT; /* map1 menu option*/
  NF0MW-07-DATA-SRC = NF0MM001.NF0MM-001-DATA-SRC; /* map1 fcst/ords*/
  ;
  NF0M092(); /* check attention keys*/
  ;
  if (NF0MW04.NF0MWERR == "N")
    NF0M108(); /* process menu options*/
  end
  ;
end // end NF0M002

// Process NIL reports
Function NF0M070()
   /* ---------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* ------------------------------------------------------------*/
  if (NF0MM001.NF0MMOPT == "01")
    NF0M071(); /* Format and display the map*/
    NF0M072(); /* Check attention identifier*/
    NF0M073(); /* Reset fields to normal intensity*/
    NF0M074(); /* Verify the data that was entered*/
    ;
    if (converseVar.validationMsgNum == 0)
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        NF0M075(); /* Process valid input request*/
      else
        NF0M077(); /* Process valid input request*/
      end
    end
  else
    NF0M097(); /* Format and display the map*/
    NF0M099(); /* Check attention identifier*/
    NF0M100(); /* Reset fields to normal intensity*/
    NF0M101(); /* Verify the data that was entered*/
    ;
    if (converseVar.validationMsgNum == 0)
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        if (NF0MM004.NF0MMRFL == "Y")
          NF0M105(); /* Process valid input request*/
        else
          NF0M102(); /* Process valid input request*/
        end
      else
        if (NF0MM004.NF0MMRFL == "Y")
          NF0M106(); /* Process valid input request*/
        else
          NF0M103(); /* Process valid input request*/
        end
      end
    end
  end
  ;
  ;
end // end NF0M070

// Format and display the map
Function NF0M071()
   /* ------------------------------------------------------------*/
  ;
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    set NF0MM002 initial;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  NF0MM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  NF0MM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  NF0MM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  NF0MM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  NF0MM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
  NF0M076();
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      NF0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    NF0MM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set NF0MM002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse NF0MM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end NF0M071

// Check attention identifier
Function NF0M072()
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set NF0MM002 initial; /* m002 input/output*/
    NF0MW04.NF0MWEOS = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12) /* EDIT MAP*/
    return; /* Exit to display map*/
  end
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    return; /* Exit to display map*/
  end
  ;
  ;
end // end NF0M072

// Reset highlighted fields
Function NF0M073()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW09.NF0MWIXM = 1; /* Map line index*/
  ;
  set NF0MM002.NF0MMFSB initialAttributes; /* fall beg month*/
  set NF0MM002.NF0MMFSE initialAttributes; /* fall end month*/
  set NF0MM002.NF0MMSSB initialAttributes; /* spring beg month*/
  set NF0MM002.NF0MMSSE initialAttributes; /* spring end month*/
  set NF0MM002.YPGCD initialAttributes; /* Type group*/
  set NF0MM002.XPRCD initialAttributes; /* Product type group*/
  set NF0MM002.XPLCD initialAttributes; /* Product line*/
  set NF0MM002.XPCCD initialAttributes; /* category*/
  set NF0MM002.ZRGCD initialAttributes; /* region*/
  set NF0MM002.YSMXDV initialAttributes; /* division group*/
  set NF0MM002.XCTCD initialAttributes; /* Foreign country*/
  set NF0MM002.NF0MMYSC initialAttributes; /* mgt region*/
  set NF0MM002.NF0MMLVL initialAttributes; /* style group/color level*/
  set NF0MM002.NF0MMSFL initialAttributes; /* summary flag*/
  set NF0MM002.NF0MMFSB cursor;
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPLCD == "?"    /* Product line list requested*/
   || NF0MM002.XPRCD == "?"    /* or product type group list requested*/
   || NF0MM002.YPGCD == "?"    /* or type group list requested*/
   || NF0MM002.XPCCD == "?"    /* or product category list requested*/
   || NF0MM002.ZRGCD == "?"    /* or sales region list requested*/
   || NF0MM002.XCTCD == "?"    /* or foreign country list requested*/
   || NF0MM002.NF0MMYSC == "?" /* or mgt region list requested*/
   || NF0MM002.NF0MMLVL == "?") /* or style group/color level requested*/
    if (converseVar.eventKey is enter /* ENTER was not pressed*/
     || converseVar.eventKey is pf12)
     /* next sentence*/
    else
      FFWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      return; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Display the list of style group/color options.*/
   /* ------------------------------------------------------------*/
  if (NF0MM002.NF0MMLVL == "?")
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "STYLE LEVEL"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      NF0M107(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.NF0MMLVL = " "; /* clear code*/
    else
      NF0MM002.NF0MMLVL = NF0MT05.NF0MTLVL[XX0XWPIX];
    end
    set NF0MM002.NF0MMLVL cursor; /* Establish cursor position*/
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of management region codes.*/
   /* ------------------------------------------------------------*/
  if (NF0MM002.NF0MMYSC == "?") /* mgt region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  MGT REG"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      NF0M095(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.NF0MMYSC = " "; /* clear code*/
      NF0MM002.NF0MMYSM = " "; /* ABBRV*/
    else
      NF0MM002.NF0MMYSC = NF0MT04.NF0MTMRC[XX0XWPIX];
      NF0MM002.NF0MMYSM = NF0MT04.NF0MTMRC[XX0XWPIX];
    end
    set NF0MM002.NF0MMYSC cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.YPGCD == "?") /* Product type group list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Footwear forecasting flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.YPGCD = " "; /* Clear code*/
      NF0MM002.YPGDESC = " "; /* Abbreviation*/
    else
      NF0MM002.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.YPGDESC = YPGTBL.YPGDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.YPGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sales region codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.ZRGCD == "?") /* Sales region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  REGION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPZRG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.ZRGCD = " "; /* Clear code*/
      NF0MM002.ZRGDESC = " "; /* Abbreviation*/
    else
      NF0MM002.ZRGCD = ZRGTBL.ZRGCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.ZRGDESC = ZRGTBL.ZRGDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.ZRGCD cursor; /* Establish cursor position*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.XPLCD = " "; /* Clear code*/
      NF0MM002.XPLDESC = " "; /* Abbreviation*/
    else
      NF0MM002.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.XPLDESC = XPLTBL.XPLDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.XPLCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of foreign country codes.*/
   /* ------------------------------------------------------------*/
  if (NF0MM002.XCTCD == "?") /* Dimension list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.XCTCD = " "; /* Clear code*/
      NF0MM002.XCTDESC = " "; /* Abbreviation*/
    else
      NF0MM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.XCTCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes.*/
   /* ------------------------------------------------------------*/
  if (NF0MM002.XPRCD == "?") /* product type rquested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.XPRCD = " "; /* Clear code*/
      NF0MM002.XPRDESC = " "; /* Abbreviation*/
    else
      NF0MM002.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.XPRDESC = XPRTBL.XPRDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.XCTCD cursor; /* Establish cursor position*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPCCD == "?") /* Product category list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM002.XPCCD = " "; /* Clear code*/
      NF0MM002.XPCDESC = " "; /* Abbreviation*/
    else
      NF0MM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      NF0MM002.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM002.XPCCD cursor; /* Establish cursor position*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  FFWREC.XXXMODID = "073"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
end // end NF0M073

// Verify the entered data
Function NF0M074()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPCCD > " ") /* Product category entered*/
    if (NF0MM002.XPCCD != "*") /* Product CATEGORY*/
      XPCREC.XPCCD = NF0MM002.XPCCD; /* Product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (XPCTBL.XPCCD[sysVar.arrayIndex] == "00")
          NF0MM002.XPCDESC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "074"; /* Module identification*/
          set NF0MM002.XPCCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(424); /* Invalid value entered*/
        else
          NF0MM002.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
          if (NF0MM002.XPLCD > " " /* product line*/
           && NF0MM002.XPLCD != "*")
            set NF0MM002.XPLCD bold; /* Highlight*/
            set NF0MM002.XPCCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(417); /* Invalid RELATION REQUESTED*/
          end
        end
      else
        NF0MM002.XPCDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set NF0MM002.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(424); /* Invalid value entered*/
      end
    else
      NF0MM002.XPCDESC = "ALL, SORT BY CATEGORY";
    end
  else
    NF0MM002.XPCDESC = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(424); /* Invalid value entered*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid division group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MM002.YSMXDV = "20";
  YSMREC.YSMSUMCD = "02";
  if (YSMREC.YSMSUMCD in XDVTBL.XDVCD
   && XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    NF0MM002.YSMSMDSC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  else
    NF0MM002.YSMSMDSC = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value entered*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPRCD > " ") /* Product type entered*/
    if (NF0MM002.XPRCD in XPRTBL.XPRCD /* Code in table*/
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01" /* type group*/
       || XPRTBL.YPGCD[sysVar.arrayIndex] == "02") /* type group*/
        if (NF0MM002.YPGCD == XPRTBL.YPGCD[sysVar.arrayIndex]
         || NF0MM002.YPGCD == " ")
          NF0MM002.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
        else
          NF0MM002.XPRDESC = " "; /* Abbreviation*/
          set NF0MM002.XPRCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(422); /* Invalid value entered*/
        end
      else
        NF0MM002.XPRDESC = " "; /* Abbreviation*/
        set NF0MM002.XPRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(425); /* Invalid value entered*/
      end
    else
      NF0MM002.XPRDESC = " "; /* Abbreviation*/
      set NF0MM002.XPRCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(425); /* Invalid value entered*/
    end
  else
    NF0MM002.XPRDESC = "ALL, COMBINED PROD TYPE";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid foreign country code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XCTCD > " ") /* Foreign country entered*/
    if (NF0MM002.YSMXDV == "20" /* Nil*/
     && NF0MM002.XCTCD == "USA") /* and USA*/
      set NF0MM002.YSMXDV bold; /* Highlight*/
      set NF0MM002.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Inconsistent relationship*/
    else
      if (NF0MM002.ZRGCD > " " /* Sales region entered*/
       || NF0MM002.NF0MMYSC > " ") /* management region*/
        set NF0MM002.XCTCD cursor, bold; /* Highlight*/
        set NF0MM002.ZRGCD bold; /* Highlight*/
        set NF0MM002.NF0MMYSC bold; /* Highlight*/
        converseLib.validationFailed(421); /* Mutually exclusive*/
      end
      if (NF0MM002.XCTCD in XCTTBL.XCTCD           /* Code in table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XCTTBL.XCTCD != "USA")                  
        NF0MM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      else
        NF0MM002.XCTDESC = " "; /* Abbreviation*/
        set NF0MM002.XCTCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(426); /* Invalid value entered*/
      end
    end
  else
    NF0MM002.XCTCD = " ";
    if (NF0MM002.ZRGCD > " "
     || NF0MM002.NF0MMYSC > " ")
      NF0MM002.XCTDESC = " "; /* Abbreviation*/
    else
      NF0MM002.XCTDESC = "ALL COUNTRIES"; /* Abbreviation*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.XPLCD > " ") /* Product line entered*/
    if (NF0MM002.XPLCD != "*") /* and not wild card*/
      XPLREC.XPLCD = NF0MM002.XPLCD; /* Product line*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XPLCD[sysVar.arrayIndex] != "00")
        NF0MM002.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM002.XPLDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set NF0MM002.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(424); /* Invalid value entered*/
      end
    else
      NF0MM002.XPLDESC = "ALL, SORT BY PROD LINE";
    end
  else
    NF0MM002.XPLDESC = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(424); /* Invalid value entered*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid sales region code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.ZRGCD > " ") /* Sales region entered*/
    if (NF0MM002.NF0MMYSC > " ") /* mgmt region entered*/
      set NF0MM002.NF0MMYSC bold; /* Highlight*/
      set NF0MM002.ZRGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(421); /* mutually exclusive*/
    end
    if (NF0MM002.ZRGCD in ZRGTBL.ZRGCD /* Code in table*/
     && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      NF0MM002.ZRGDESC = ZRGTBL.ZRGDESC[sysVar.arrayIndex]; /* Abbreviation*/
    else
      NF0MM002.ZRGDESC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "074"; /* Module identification*/
      set NF0MM002.ZRGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
    end
  else
    NF0MM002.ZRGCD = " ";
    if (NF0MM002.XCTCD > " "
     || NF0MM002.NF0MMYSC > " ")
      NF0MM002.ZRGDESC = " "; /* Abbreviation*/
    else
      NF0MM002.ZRGDESC = "ALL SLS REGIONS"; /* Abbreviation*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.YPGCD > " ") /* type group entered*/
    if (NF0MM002.YPGCD != "*")
      if (NF0MM002.YPGCD in YPGTBL.YPGCD /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (NF0MM002.YPGCD == "01"
         || NF0MM002.YPGCD == "02")
          NF0MM002.YPGDESC = YPGTBL.YPGDESC[sysVar.arrayIndex];
          NF0MM002.NF0MMCFL = "N";
        else
          NF0MM002.YPGDESC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "074"; /* Module identification*/
          set NF0MM002.YPGCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(426); /* Invalid value entered*/
        end
      else
        NF0MM002.YPGDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "074"; /* Module identification*/
        set NF0MM002.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(426); /* Invalid value entered*/
      end
    else
      NF0MM002.YPGDESC = "ALL, SORT BY TYPE GRP";
      NF0MM002.NF0MMCFL = "N";
    end
  else
    NF0MM002.YPGDESC = "COMBINED TYPE GROUPS";
    NF0MM002.NF0MMCFL = "Y";
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid mgmt region code was entered.*/
   /* 08-23-99 LDAVI4 ADDED CHECK FOR 'AF' AFRICA*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMYSC != "  ")
    if (NF0MM002.NF0MMYSC == "AP")
      NF0MM002.NF0MMYSM = "ASIA-PACIFIC";
    else
      if (NF0MM002.NF0MMYSC == "CA")
        NF0MM002.NF0MMYSM = "CANADA      ";
      else
        if (NF0MM002.NF0MMYSC == "EU")
          NF0MM002.NF0MMYSM = "EUROPE      ";
        else
          if (NF0MM002.NF0MMYSC == "LA")
            NF0MM002.NF0MMYSM = "LATIN AMERICA";
          else
            if (NF0MM002.NF0MMYSC == "AF")
              NF0MM002.NF0MMYSM = "AFRICA       ";
            else
              NF0MM002.NF0MMYSM = " "; /* Abbreviation*/
              FFWREC.XXXMODID = "074"; /* Module identification*/
              set NF0MM002.NF0MMYSC cursor, bold; /* Highlight*/
              converseLib.validationFailed(10); /* Invalid value entered*/
            end
          end
        end
      end
    end
  else
    if (NF0MM002.ZRGCD > " "
     || NF0MM002.XCTCD > " ")
      NF0MM002.NF0MMYSM = " "; /* Abbreviation*/
    else
      NF0MM002.NF0MMYSM = "ALL MGT REGIONS"; /* Abbreviation*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* set total nil flag*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMYSC == " "
   && NF0MM002.ZRGCD == " "
   && NF0MM002.XCTCD == " ")
    NF0MM002.NF0MMTFL = "Y";
  else
    NF0MM002.NF0MMTFL = "N";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert spring season beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMSSB > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM002.NF0MMSSB; /* beginning yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        set NF0MM002.NF0MMSSB cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Invalid value entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.NF0MMSSB cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
   /* ------------------------------------------------------------*/
   /* Convert spring season end date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMSSE > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM002.NF0MMSSE; /* ending yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWSE = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        set NF0MM002.NF0MMSSE cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Invalid value entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.NF0MMSSE cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Convert fall season end date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMFSE > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM002.NF0MMFSE; /* ending yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSE = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        set NF0MM002.NF0MMFSE cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Invalid value entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.NF0MMFSE cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Convert fall season beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM002.NF0MMFSB > 0) /* date not empty*/
    set FFZREC empty; /* Subroutine parameters*/
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM002.NF0MMFSB; /* beginning yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
        /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        set NF0MM002.NF0MMFSB cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Invalid value entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM002.NF0MMFSB cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  if (NF0MM002.NF0MMLVL != "G")
    if (NF0MM002.NF0MMLVL != "C")
      set NF0MM002.NF0MMLVL cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Required field*/
    end
  end
  if (NF0MM002.NF0MMSFL != "Y")
    if (NF0MM002.NF0MMSFL != "N")
      set NF0MM002.NF0MMSFL cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Required field*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Adjust Flag Must Be "Y" Or "N"*/
   /* Indicate Error If Adjust Flag Is "N" And Mgt Rgn Is Spaces*/
   /* ------------------------------------------------------------*/
  if (NF0MM-002-NA == "Y"
   || NF0MM-002-NA == "N")
   /* IF NF0MM-002-NA EQ 'N';*/
     /* IF NF0MM002.NF0MMYSC EQ '  ';*/
       /* MOVE '074' TO FFWREC.XXXMODID;/* Module identification*/
       /* SET NF0MM-002-NA CURSOR,BRIGHT;/* Highlight NIL Adjust Flag*/
       /* SET NF0MM002.NF0MMYSC BRIGHT;/* Highlight Mgt Rgn*/
       /* MOVE 485 TO EZEMNO;        /* Mgt Rgn Must Be Entered*/
     /* END;*/
   /* END;*/
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM-002-NA cursor, bold; /* Highlight NIL Adjust Flag*/
    converseLib.validationFailed(427); /* Must Enter "Y" Or "N"*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum;
    return;
  else
    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(428);
    end
  end
  ;
     /* PERFORM NF0M077                 ; display map 2*/
  ;
end // end NF0M074

// Process valid input request
Function NF0M075()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN CORRECT FORMS CODE FOR USER*/
  ;
  if (NF0MM002.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "N";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "P";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM002.NF0MMTFL == "Y") /* total nil*/
    NF0MM002.XCTCD = "ALL ";
    NF0MW09.NF0MWJOB = "1001"; /* Job identification*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1002";
    end
  end
  if (NF0MM002.XCTCD != "ALL ") /* country*/
    if (NF0MM002.XCTCD != "    ")
      NF0MW09.NF0MWJOB = "1003"; /* process ctry*/
      NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
      if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
        NF0MW09.NF0MWJOB = "1006"; /* process ctry*/
      end
    end
  end
  if (NF0MM002.NF0MMYSC != "  ") /* mgmt region*/
    NF0MW09.NF0MWJOB = "1005"; /* process mgmt reg*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1008"; /* process mgmt reg*/
    end
  end
  if (NF0MM002.ZRGCD != "  ") /* sales region*/
    NF0MW09.NF0MWJOB = "1004"; /* process sls reg*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1007"; /* process sls reg*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT08.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT08.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT08.TARTYPE[NF0MWIXU] == "M" /* Parameters statement*/
     || NF0MT08.TARTYPE[NF0MWIXU] == "X") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
         /* SET NF0MW07 EMPTY           ; Parameters work area*/
      NF0MW07.YSMSRCVL = NF0MM002.NF0MMYSC; /* mgmt region*/
      NF0MW07.XPLCD = NF0MM002.XPLCD; /* Product line*/
      NF0MW07.YPGCD = NF0MM002.YPGCD; /* Type group*/
      NF0MW07.XPRCD = NF0MM002.XPRCD; /* Product type*/
      NF0MW07.XPCCD = NF0MM002.XPCCD; /* Product category*/
      NF0MW07.ZRGCD = NF0MM002.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM002.XCTCD; /* Foreign country*/
      NF0MW07.YSMXDV = NF0MM002.YSMXDV; /* Division group*/
      NF0MW07.NF0MMSFL = NF0MM002.NF0MMSFL; /* summary rpt flag*/
      if (NF0MM002.NF0MMSFL == "N")
        NF0MW07.NF0MMSFL = NF0MM002.NF0MMLVL; /* summary rpt flag*/
      end
      NF0MW07.NF0MMTFL = NF0MM002.NF0MMTFL; /* totnil flag*/
      NF0MW07.NF0MMCFL = NF0MM002.NF0MMCFL; /* combined prdt typ*/
      NF0MW07.XURCOPY = NF0MM002.XURCOPY; /* copies requested*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      NF0MW07.NF0MMCA = NF0MM-002-NA; /* Include NIL Adjustment Flag*/
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT08.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT08.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT08.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT08.TARTYPE[NF0MWIXU] == "4" /* or FORMS  statement*/
       || NF0MT08.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT08.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT08.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT08.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT08.TARTYPE[NF0MWIXU]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT08.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "075"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM002 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M075

// Process valid input request
Function NF0M076()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN CORRECT FORMS CODE FOR USER*/
  NF0MW09.NF0MWJOB = "1001"; /* Job identification*/
  NF0MM002.NF0MMV = NF0MW04.NF0MMV[01]; /* desc*/
  NF0MM002.NF0MMOP2 = "01"; /* option number*/
  ;
  NF0MM002.YSMXDV = "20";
  NF0MM002.YSMSMDSC = "INTERNATIONAL";
  if (converseVar.validationMsgNum == 0)
    NF0MM002.NF0MMCFL = "Y"; /* combine type group*/
    NF0MM002.NF0MMSFL = "N"; /* summary flag*/
    NF0MM002.NF0MMTFL = "Y"; /* total nil flag*/
    NF0MM002.NF0MMLVL = "C"; /* level flag*/
    NF0MM002.NF0MM-002-NA = "Y"; /* NIL adjustment rows included?*/
    NF0MM002.NF0MMFDD = NF0MW04.NF0MWFD1; /* SALES/FORECAST DATA*/
    NF0MM002.NF0MMYSC = " "; /* MANAGEMENT REGION*/
    NF0MM002.ZRGCD = " "; /* SALES REGION*/
    NF0MM002.XCTCD = " "; /* COUNTRY CODE*/
    NF0MM002.NF0MMYSM = "ALL MGT REGIONS";
    NF0MM002.ZRGDESC = "ALL SLS REGIONS";
    NF0MM002.XCTDESC = "ALL COUNTRIES";
    NF0MM002.YPGCD = " "; /* TYPE GROUP*/
    NF0MM002.YPGDESC = "COMBINE TYPE GROUPS";
    NF0MM002.XPLCD = "*"; /* prod line*/
    NF0MM002.XPLDESC = "SORT BY PROD LINE";
    NF0MM002.XPRCD = " "; /* product type*/
    NF0MM002.XPRDESC = "COMBINE PROD TYPES";
    NF0MM002.XPCCD = "*"; /* category*/
    NF0MM002.XPCDESC = "SORT BY CATEGORIES";
  end
  ;
end // end NF0M076

// Process valid input request
Function NF0M077()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE*/
  ;
  if (NF0MM002.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "2";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "T";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM002.NF0MMTFL == "Y") /* total nil*/
    NF0MM002.XCTCD = "ALL ";
    NF0MW09.NF0MWJOB = "1001"; /* total nil*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1002";
    end
  end
  if (NF0MM002.XCTCD != "ALL ") /* country*/
    if (NF0MM002.XCTCD != "    ")
      NF0MW09.NF0MWJOB = "1003"; /* process ctry*/
      NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
      if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
        NF0MW09.NF0MWJOB = "1006"; /* process ctry*/
      end
    end
  end
  if (NF0MM002.NF0MMYSC != "  ") /* mgmt region*/
    NF0MW09.NF0MWJOB = "1005"; /* process mgt reg*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1008"; /* process mgt reg*/
    end
  end
  if (NF0MM002.ZRGCD != "  ") /* sales region*/
    NF0MW09.NF0MWJOB = "1004"; /* process sls reg*/
    NF0MM002.NF0MMV = NF0MM001.NF0MMV[01]; /* desc*/
    if (NF0MM002.NF0MMCFL == "Y") /* combine prod types*/
      NF0MW09.NF0MWJOB = "1007"; /* process sls reg*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT18.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT18.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT18.TARTYPE[NF0MWIXU] == "M" /* Parameters statement*/
     || NF0MT18.TARTYPE[NF0MWIXU] == "X") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
         /* SET NF0MW07 EMPTY           ; Parameters work area*/
      ;
      NF0MW07.YSMSRCVL = NF0MM002.NF0MMYSC; /* mgmt region*/
      NF0MW07.XPLCD = NF0MM002.XPLCD; /* Product line*/
      NF0MW07.YPGCD = NF0MM002.YPGCD; /* Type group*/
      NF0MW07.XPRCD = NF0MM002.YPGCD; /* Product type*/
      NF0MW07.XPCCD = NF0MM002.XPCCD; /* Product category*/
      NF0MW07.ZRGCD = NF0MM002.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM002.XCTCD; /* Foreign country*/
      NF0MW07.YSMXDV = NF0MM002.YSMXDV; /* Division group*/
      NF0MW07.NF0MMSFL = NF0MM002.NF0MMSFL; /* summary rpt flag*/
      NF0MW07.XURCOPY = NF0MM002.XURCOPY; /* copies requested*/
      if (NF0MM002.NF0MMSFL == "N")
        NF0MW07.NF0MMSFL = NF0MM002.NF0MMLVL; /* summary rpt flag*/
      end
      NF0MW07.NF0MMTFL = NF0MM002.NF0MMTFL; /* totnil flag*/
      NF0MW07.NF0MMCFL = NF0MM002.NF0MMCFL; /* combined prdt typ*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      NF0MW07.NF0MMCA = NF0MM-002-NA; /* Include NIL Adjustment Flag*/
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT18.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT18.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT18.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT18.TARTYPE[NF0MWIXU] == "4" /* or SYSOUT statement*/
       || NF0MT18.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT18.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT18.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT18.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT18.TARTYPE[NF0MWIXU]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT18.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "075"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM002 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M077

// Check attention identifier
Function NF0M092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set NF0MM001 initial; /* m001 input/output*/
    NF0MW04.NF0MWEOS = "Y";
    NF0MW04.NF0MWEOA = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    COMMAREA.CATOAP = "FY0M";
    XSEXIT(); /* Exit to production menu*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    NF0MW04.NF0MWEOA = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    COMMAREA.CATOAP = "GD01";
    XSEXIT();
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    NF0MW04.NF0MWEOA = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    COMMAREA.CATOAP = "FY0M";
    XSEXIT(); /* Exit to production menu*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    NF0MW04.NF0MWEOA = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    COMMAREA.CATOAP = "MN0M";
    XSEXIT(); /* Exit to goal menu*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Allow for scrolling menu options*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   && NF0MW04.NF0MWCT1 == 17)
    NF0MW04.NF0MWERR = "Y";
    converseLib.validationFailed(409);
    return;
  end
  ;
  if (converseVar.eventKey is pf8
   && NF0MW04.NF0MWCT1 > NF0MW04.NF0MWCT3)
    NF0MW04.NF0MWERR = "Y";
    converseLib.validationFailed(410);
    return;
  end
  ;
  if (converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is pf8) /* scroll formard*/
    return; /* Exit to goal menu*/
  end
  ;
   /* IF EZEAID IS PF7                ; scroll backward*/
    /* OR EZEAID IS PF8              ; scroll formard*/
    /* MOVE 'Y' TO NF0MW04.NF0MWFFL  ; first time flag*/
    /* MOVE 'N' TO NF0MW04.NF0MWEND  ; error flag*/
    /* MOVE 1 TO NF0MW04.NF0MWCT1    ; table counter*/
    /* MOVE 1 TO NF0MW04.NF0MWCT2    ; screen counter*/
    /* MOVE 0 TO NF0MW04.NF0MWSIX; end of first page save index*/
    /* WHILE NF0MW04.NF0MWEND EQ 'N';*/
      /* PERFORM NF0M110;*/
    /* END ;*/
    /* XSEXIT                        ; Exit to goal menu*/
   /* END ;*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    return; /* Exit to display map*/
  end
  ;
  ;
end // end NF0M092

// converse pop up window
Function NF0M095()
   /* ------------------------------------------------------------*/
  ;
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && NF0MT04.NF0MTMRC[XX0XWCT1] != "99") /* Or end of data*/
        if (NF0MT04.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = NF0MT04.NF0MTMRC[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = NF0MT04.NF0MTMRD[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (NF0MT04.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = NF0MT04.NF0MTMRC[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = NF0MT04.NF0MTMRD[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && NF0MT04.NF0MTMRC[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end NF0M095

// Format and display the map
Function NF0M097()
   /* ------------------------------------------------------------*/
  ;
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  NF0MM004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  NF0MM004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  NF0MM004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  NF0MM004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  NF0MM004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
  NF0M098();
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      NF0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    NF0MM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set NF0MM004 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse NF0MM004 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
      /* MOVE 0 TO FFWREC.XXXMSGNO       ; Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end NF0M097

// Process valid input request
Function NF0M098()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
   /* MOVE '00' TO NF0MW09.NF0MWFOR   ; Forms code*/
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  NF0MW09.NF0MWJOB = "1141"; /* Job identification*/
  NF0MM004.NF0MMV = NF0MW04.NF0MMV[02]; /* desc*/
  NF0MM004.NF0MMOP2 = " 2"; /* option number*/
  NF0MM004.NF0MMTFL = "N";
  NF0MM004.NF0MMRFL = "N";
  ;
end // end NF0M098

// Check attention identifier
Function NF0M099()
  ;
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set NF0MM004 initial; /* m004 input/output*/
    NF0MW04.NF0MWEOS = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    converseLib.validationFailed(0);
    FFWREC.XXXMSGNO = 0;
    NF0MM001.VAGen_EZEMSG = " ";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    return; /* Exit to display map*/
  end
  ;
  ;
end // end NF0M099

// Reset highlighted fields
Function NF0M100()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW09.NF0MWIXM = 1; /* Map line index*/
  ;
  set NF0MM004.NF0MMFSB initialAttributes; /* fall beg month*/
  set NF0MM004.NF0MMFSE initialAttributes; /* fall end month*/
  set NF0MM004.NF0MMSSB initialAttributes; /* spring beg month*/
  set NF0MM004.NF0MMSSE initialAttributes; /* spring end month*/
  set NF0MM004.ZRGCD initialAttributes; /* region*/
  set NF0MM004.NF0MMYSC initialAttributes; /* mgt region*/
  set NF0MM004.YPGCD initialAttributes; /* PRODUCT TYPE*/
     /* SET NF0MM004.XPLCD DEFINED      ; PRODUCT LINE*/
  set NF0MM004.NF0MMFSB cursor;
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.ZRGCD == "?" /* sales region list requested*/
   || NF0MM004.NF0MMYSC == "?") /* or mgt region list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      return; /* Exit to display map*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sales region codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.ZRGCD == "?") /* Sales region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  REGION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPZRG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM004.ZRGCD = " "; /* Clear code*/
      NF0MM004.ZRGABRV = " "; /* Abbreviation*/
    else
      NF0MM004.ZRGCD = ZRGTBL.ZRGCD[XX0XWPIX]; /* Selected code*/
      NF0MM004.ZRGABRV = ZRGTBL.ZRGABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM004.ZRGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of management region codes.*/
   /* ------------------------------------------------------------*/
  if (NF0MM004.NF0MMYSC == "?") /* mgt region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  MGT REG"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      NF0M095(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM004.NF0MMYSC = " "; /* clear code*/
      NF0MM004.NF0MMYSM = " "; /* ABBRV*/
    else
      NF0MM004.NF0MMYSC = NF0MT04.NF0MTMRC[XX0XWPIX];
      NF0MM004.NF0MMYSM = NF0MT04.NF0MTMRC[XX0XWPIX];
    end
    set NF0MM004.NF0MMYSC cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of PRODUCT LINE codes.*/
   /* ------------------------------------------------------------*/
  ;
   /* IF NF0MM004.XPLCD EQ '?' ; PRODUCT LINE list requested*/
    /* PERFORM XPXX001               ; window initialization*/
    /* MOVE '  LINE' TO XX0XW02.XX0XWHDR    ; Heading*/
    /* WHILE XX0XW02.XX0XWEND EQ 'N' ; Until end of request*/
      /* PERFORM XPXPL01             ; Display the list*/
    /* END ;*/
    /* IF XX0XW02.XX0XWPIX EQ 0      ; No selection made*/
      /* MOVE ' ' TO NF0MM004.XPLCD  ; Clear code*/
      /* MOVE ' ' TO NF0MM004.XPLABRV       ; Abbreviation*/
    /* ELSE ;*/
      /* MOVE XPLTBL.XPLCD(XX0XWPIX) TO NF0MM004.XPLCD; code*/
      /* MOVE XPLTBL.XPLABRV(XX0XWPIX) TO NF0MM004.XPLABRV; AbbrV*/
    /* END ;*/
    /* SET NF0MM004.XPLCD CURSOR     ; Establish cursor position*/
   /* END ;*/
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of PRODUCT TYPE GROUP CODES.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.YPGCD == "?") /* PRODUCT LINE list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYPE GROUP"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM004.YPGCD = " "; /* Clear code*/
      NF0MM004.YPGABRV = " "; /* Abbreviation*/
    else
      NF0MM004.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      NF0MM004.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM004.YPGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  FFWREC.XXXMODID = "100"; /* Module identification*/
   /* MOVE 97 TO EZEMNO               ; Indicate press ENTER*/
  ;
  ;
  ;
  ;
end // end NF0M100

// Verify the entered data
Function NF0M101()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that parameters were specified.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMTFL != "Y"
   && NF0MM004.NF0MMRFL != "Y"
   && NF0MM004.NF0MMYSC == " "
   && NF0MM004.ZRGCD == " ")
    set NF0MM004.NF0MMYSC bold; /* Highlight*/
    set NF0MM004.ZRGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* required field*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid PRODUCT TYPE GROUP was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMTFL != "Y" /* NOT TOTAL NIL REQUESTED*/
   && NF0MM004.NF0MMRFL != "Y")
    if (NF0MM004.YPGCD > " "
     && NF0MM004.YPGCD != "*") /* NOT ALL CHOSEN*/
      if (NF0MM004.YPGCD in YPGTBL.YPGCD /* CODE WITHIN TABLE*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (NF0MM004.YPGCD == "01"
         || NF0MM004.YPGCD == "02")
          NF0MM004.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
        else
          NF0MM004.YPGABRV = "  ";
          FFWREC.XXXMODID = "074";
          set NF0MM004.YPGCD cursor, bold;
          converseLib.validationFailed(10); /* INVALID VALUE ENTERED*/
        end
      end
    else
      if (NF0MM004.YPGCD == "*")
        NF0MM004.YPGABRV = "ALL";
      else
        NF0MM004.YPGABRV = "  ";
      end
    end
  else
    NF0MM004.YPGCD = "  ";
    NF0MM004.YPGABRV = "ALL";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid PRODUCT LINE CODE was entered.*/
   /* ------------------------------------------------------------*/
  ;
   /* IF NF0MM004.NF0MMTFL NE 'Y'     ; NOT TOTAL NIL REQUESTED*/
    /* IF NF0MM004.XPLCD GT ' ';*/
      /* AND NF0MM004.XPLCD NE '*'   ; NOT ALL CHOSEN*/
      /* MOVE NF0MM004.XPLCD TO XPLREC.XPLCD;*/
      /* MOVE COMMAREA.XGPCD TO XPLREC.XGPCD; GPC*/
      /* IF XPLREC.XPLKEY IN XPLTBL.XPLKEY  ; CODE WITHIN TABLE*/
        /* AND XPLTBL.XXXSTAT(EZETST) EQ 'A';*/
        /* MOVE XPLTBL.XPLABRV(EZETST) TO NF0MM004.XPLABRV;*/
      /* ELSE ;*/
        /* MOVE '  ' TO NF0MM004.XPLABRV;*/
        /* MOVE '074' TO FFWREC.XXXMODID;*/
        /* SET NF0MM004.XPLCD CURSOR,BRIGHT;*/
        /* MOVE 10 TO EZEMNO         ; INVALID VALUE ENTERED*/
      /* END ;*/
    /* ELSE ;*/
      /* IF NF0MM004.XPLCD EQ '*';*/
        /* MOVE '  ' TO NF0MM004.XPLCD;*/
        /* MOVE 'ALL' TO NF0MM004.XPLABRV;*/
      /* ELSE ;*/
        /* MOVE '  ' TO NF0MM004.XPLABRV;*/
      /* END ;*/
    /* END ;*/
   /* ELSE ;*/
    /* MOVE '  ' TO NF0MM004.XPLCD;*/
    /* MOVE 'ALL' TO NF0MM004.XPLABRV;*/
   /* END ;*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid sales region code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.ZRGCD > " ") /* Sales region entered*/
    if (NF0MM004.NF0MMYSC > " ") /* mgmt region entered*/
      set NF0MM004.NF0MMYSC bold; /* Highlight*/
      set NF0MM004.ZRGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* mutually exclusive*/
    else
      if (NF0MM004.ZRGCD in ZRGTBL.ZRGCD /* Code in table*/
       && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        NF0MM004.ZRGABRV = ZRGTBL.ZRGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM004.ZRGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "101"; /* Module identification*/
        set NF0MM004.ZRGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
  else
    NF0MM004.ZRGABRV = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid mgmt region code was entered.*/
   /* 08-23-99 LDAVI4 ADDED LOGIC FOR 'AF' AFRICA*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMYSC != "  ")
    if (NF0MM004.NF0MMYSC == "AP")
      NF0MM004.NF0MMYSM = "ASIA-PACIFIC";
    else
      if (NF0MM004.NF0MMYSC == "CA")
        NF0MM004.NF0MMYSM = "CANADA      ";
      else
        if (NF0MM004.NF0MMYSC == "EU")
          NF0MM004.NF0MMYSM = "EUROPE      ";
        else
          if (NF0MM004.NF0MMYSC == "LA")
            NF0MM004.NF0MMYSM = "LAAM";
          else
            if (NF0MM004.NF0MMYSC == "AF")
              NF0MM004.NF0MMYSM = "AFRICA      ";
            else
              NF0MM004.NF0MMYSC = " "; /* Abbreviation*/
              NF0MM004.NF0MMYSM = " "; /* description*/
              FFWREC.XXXMODID = "074"; /* Module identification*/
              set NF0MM004.NF0MMYSC cursor, bold; /* Highlight*/
              converseLib.validationFailed(10); /* Invalid value entered*/
            end
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Convert spring season beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMSSB > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM004.NF0MMSSB; /* beginning yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM004.NF0MMSSB cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
   /* ------------------------------------------------------------*/
   /* Convert spring season end date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMSSE > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM004.NF0MMSSE; /* ending yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWSE = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM004.NF0MMSSE cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Convert fall season end date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMFSE > 0)
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM004.NF0MMFSE; /* ending yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSE = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM004.NF0MMFSE cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Convert fall season beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM004.NF0MMFSB > 0) /* date not empty*/
    set FFZREC empty; /* Subroutine parameters*/
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM004.NF0MMFSB; /* beginning yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
        /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set NF0MM004.NF0MMFSB cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum;
    return;
  end
  ;
  ;
end // end NF0M101

// Process valid input request
Function NF0M102()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM004.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "N";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "P";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM004.NF0MMTFL == "Y") /* total nil*/
    /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* Job identification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  if (NF0MM004.ZRGCD != "  ") /* sls region*/
    /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* job identification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  if (NF0MM004.NF0MMYSC != "  ") /* mgt region*/
    /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* job identification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT09.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT09.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT09.TARTYPE[NF0MWIXU] == "M") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMSRCVL = NF0MM004.NF0MMYSC; /* mgmt region*/
      NF0MW07.ZRGCD = NF0MM004.ZRGCD; /* Sales region*/
      NF0MW07.XPLCD = "  "; /* PRODUCT LINE CODE*/
      NF0MW07.NF0MMTFL = NF0MM004.NF0MMTFL; /* totnil flag*/
      NF0MW07.XURCOPY = NF0MM004.XURCOPY; /* copies requested*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      NF0MW07.YSMXDV = "20"; /* division group*/
      if (NF0MM004.YPGCD == "  "
       || NF0MM004.YPGCD == "*")
        NF0MW07.YPGCD = "* "; /* PRODUCT TYPE GROUP*/
        NF0MW07.NF0MMCFL = "Y"; /* COMBINE TYPE FLAG*/
      else
        NF0MW07.YPGCD = NF0MM004.YPGCD; /* PRODUCT TYPE GROUP*/
        NF0MW07.NF0MMCFL = "N"; /* COMBINE TYPE FLAG*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT09.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT09.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT09.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT09.TARTYPE[NF0MWIXU] == "4" /* or FORMS  statement*/
       || NF0MT09.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT09.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT09.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT09.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT09.TARTYPE[NF0MWIXU]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT09.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "102"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM004 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M102

// Process valid input request
Function NF0M103()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM004.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "000000";
    NF0MW04.NF0MWRI = "000000";
    NF0MW09.NF0MWOC = "2";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "T";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM004.NF0MMTFL == "Y") /* total nil*/
     /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* total nil*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  if (NF0MM004.ZRGCD != "    ") /* sls region*/
    /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* job indentification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  if (NF0MM004.NF0MMYSC != "    ") /* mgt region*/
    /* MOVE '01' TO NF0MW09.NF0MWFOR ; Forms code*/
    NF0MW09.NF0MWJOB = "1141"; /* job indentification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT19.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT19.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT19.TARTYPE[NF0MWIXU] == "M") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMSRCVL = NF0MM004.NF0MMYSC; /* mgmt region*/
      NF0MW07.ZRGCD = NF0MM004.ZRGCD; /* Sales region*/
      NF0MW07.XPLCD = "  "; /* PRODUCT LINE*/
      NF0MW07.NF0MMTFL = NF0MM004.NF0MMTFL; /* totnil flag*/
      NF0MW07.XURCOPY = NF0MM004.XURCOPY; /* copies requested*/
      NF0MW07.YSMXDV = "20"; /* division group*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      if (NF0MM004.YPGCD == "  "
       || NF0MM004.YPGCD == "  ")
        NF0MW07.YPGCD = "* "; /* PRODUCT GROUP*/
        NF0MW07.NF0MMCFL = "Y"; /* COMBINE TYPE FLAG*/
      else
        NF0MW07.YPGCD = NF0MM004.YPGCD; /* PRODUCT GROUP*/
        NF0MW07.NF0MMCFL = "N"; /* COMBINE TYPE FLAG*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT19.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT19.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT19.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT STATEMENT*/
       || NF0MT19.TARTYPE[NF0MWIXU] == "4" /* or SYSOUT STATEMENT*/
       || NF0MT19.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT19.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT19.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT19.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT19.TARTYPE[NF0MWIXU];
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT19.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "075"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM004 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M103

// ASSIGN CORRECT FORMS CODE
Function NF0M104()
   /* ;*/
   /* ------------------------------------------------------------*/
   /* ASSIGN CORRECT FORMS CODE.*/
   /* ------------------------------------------------------------*/
  if (TA6REC.XURUSRID in NF0MT41.NF0MT-USRID)
    NF0MW09.NF0MWFOR = NF0MT41.NF0MT-FOR[sysVar.arrayIndex]; /* FORMS CODE*/
    NF0MW09.NF0MWFC = NF0MT41.NF0MT-FC[sysVar.arrayIndex]; /* FORMS CODE*/
    NF0MW04.NF0MWFCG = NF0MT41.NF0MT-FCG[sysVar.arrayIndex]; /* FORMS CODE*/
    NF0MW04.NF0MWFCF = NF0MT41.NF0MT-FCF[sysVar.arrayIndex]; /* FORMS CODE lans*/
  else /* MOVE DEFAULT FORMS CODES TO WORK AREAS*/
    NF0MW09.NF0MWFOR = NF0MT41.NF0MT-FOR[1]; /* FORMS CODE*/
    NF0MW09.NF0MWFC = NF0MT41.NF0MT-FC[1]; /* FORMS CODE*/
    NF0MW04.NF0MWFCG = NF0MT41.NF0MT-FCG[1]; /* FORMS CODE*/
    NF0MW04.NF0MWFCF = NF0MT41.NF0MT-FCF[1]; /* FORMS CODE lans*/
  end
  ;
end // end NF0M104

// Process valid input request
Function NF0M105()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM004.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "N";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "P";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM004.NF0MMRFL == "Y") /* TOTNIL SUM RPTS*/
    NF0MM004.NF0MMTFL = "N"; /* totnil nf1141 flag*/
    NF0MW09.NF0MWJOB = "1142"; /* job identification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT11.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT11.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT11.TARTYPE[NF0MWIXU] == "M" /* Parameters statement*/
     || NF0MT11.TARTYPE[NF0MWIXU] == "X") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMSRCVL = NF0MM004.NF0MMYSC; /* mgmt region*/
      NF0MW07.ZRGCD = NF0MM004.ZRGCD; /* Sales region*/
      NF0MW07.XPLCD = "  "; /* PRODUCT LINE CODE*/
      NF0MW07.NF0MMTFL = NF0MM004.NF0MMTFL; /* totnil flag*/
      NF0MW07.XURCOPY = NF0MM004.XURCOPY; /* copies requested*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      NF0MW07.YSMXDV = "20"; /* division group*/
      if (NF0MM004.YPGCD == "  "
       || NF0MM004.YPGCD == "*")
        NF0MW07.YPGCD = "* "; /* PRODUCT TYPE GROUP*/
        NF0MW07.NF0MMCFL = "Y"; /* COMBINE TYPE FLAG*/
      else
        NF0MW07.YPGCD = NF0MM004.YPGCD; /* PRODUCT TYPE GROUP*/
        NF0MW07.NF0MMCFL = "N"; /* COMBINE TYPE FLAG*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT11.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT11.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT11.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT11.TARTYPE[NF0MWIXU] == "4" /* or FORMS  statement*/
       || NF0MT11.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT11.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT11.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT11.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT11.TARTYPE[NF0MWIXU]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT11.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "102"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM004 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M105

// Process valid input request
Function NF0M106()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM004.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "000000";
    NF0MW04.NF0MWRI = "000000";
    NF0MW09.NF0MWOC = "2";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "T";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM004.NF0MMRFL != "    ") /* TOTNIL SUMMARY RPTS*/
    NF0MW09.NF0MWJOB = "1142"; /* job indentification*/
    NF0MM004.NF0MMV = NF0MM001.NF0MMV[02]; /* desc*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT21.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT21.TARTYPE[NF0MWIXU] == "Q" /* Parameters statement*/
     || NF0MT21.TARTYPE[NF0MWIXU] == "M" /* Parameters statement*/
     || NF0MT21.TARTYPE[NF0MWIXU] == "X") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMSRCVL = NF0MM004.NF0MMYSC; /* mgmt region*/
      NF0MW07.ZRGCD = NF0MM004.ZRGCD; /* Sales region*/
      NF0MW07.XPLCD = "  "; /* PRODUCT LINE*/
      NF0MW07.NF0MMTFL = NF0MM004.NF0MMTFL; /* totnil flag*/
      NF0MW07.XURCOPY = NF0MM004.XURCOPY; /* copies requested*/
      NF0MW07.YSMXDV = "20"; /* division group*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      if (NF0MM004.YPGCD == "  "
       || NF0MM004.YPGCD == "  ")
        NF0MW07.YPGCD = "* "; /* PRODUCT GROUP*/
        NF0MW07.NF0MMCFL = "Y"; /* COMBINE TYPE FLAG*/
      else
        NF0MW07.YPGCD = NF0MM004.YPGCD; /* PRODUCT GROUP*/
        NF0MW07.NF0MMCFL = "N"; /* COMBINE TYPE FLAG*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      ;
      if (NF0MT21.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT21.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT21.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT STATEMENT*/
       || NF0MT21.TARTYPE[NF0MWIXU] == "4" /* or FORMS  STATEMENT*/
       || NF0MT21.TARTYPE[NF0MWIXU] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT21.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT21.TARTYPE[NF0MWIXU]; /* Type*/
        ;
        NF0MS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT21.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT21.TARTYPE[NF0MWIXU];
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT21.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "075"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM004 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
end // end NF0M106

// converse pop up window
Function NF0M107()
   /* ------------------------------------------------------------*/
  ;
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && NF0MT05.NF0MTLVL[XX0XWCT1] != "99") /* Or end of data*/
        if (NF0MT05.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = NF0MT05.NF0MTLVL[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = NF0MT05.NF0MTLD[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (NF0MT05.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = NF0MT05.NF0MTLVL[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = NF0MT05.NF0MTLD[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && NF0MT05.NF0MTLVL[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end NF0M107

// Main process to display a map
Function NF0M108()
  ;
  NF0MW04.NF0MWFD2 = NF0MM001.NF0MMOPT; /* save map1 menu option*/
  ;
  NF0M120(); /* pre edit options entered on map 1*/
  ;
  if (NF0MW04.NF0MWERR != "Y")
    NF0M110(); /* load descrips to map 1*/
  end
  ;
  ;
  if (NF0MW04.NF0MWEND == "Y"
   && NF0MW04.NF0MWERR == "N")
    TA6REC.TA6SUBSW = "N";
    ;
    if (NF0MM001.NF0MMOPT != "19")
      XPTA0P();
      ;
      NF0MW09.XURUSRNM = TA6REC.XURUSRNM;
      ;
      NF0MM002.XURDEST = TA6REC.XURDEST;
      NF0MM002.XRODESC = TA6REC.XRODESC;
      NF0MM002.XURUSRNM = TA6REC.XURUSRNM;
      NF0MM002.XURBLDID = TA6REC.XURBLDID;
      NF0MM002.XURCOPY = TA6REC.XURCOPY;
      ;
      NF0MM004.XURDEST = TA6REC.XURDEST;
      NF0MM004.XRODESC = TA6REC.XRODESC;
      NF0MM004.XURUSRNM = TA6REC.XURUSRNM;
      NF0MM004.XURBLDID = TA6REC.XURBLDID;
      NF0MM004.XURCOPY = TA6REC.XURCOPY;
      ;
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* pass to nf1000 extract*/
      NF0MW04.NF0MWEOS = "N";
      NF0MM004.NF0MMFDD = NF0MW04.NF0MWFD1; /* fcst data source*/
      NF0MW07.NF0MMF = NF0MW04.NF0MWFD1; /* fcst data source*/
      ;
    end
    ;
    if (NF0MM001.NF0MMOPT == "01"
     || NF0MM001.NF0MMOPT == "02")
      NF0MW07.NF0MMCOP = "01"; /* passed to nf1000 extract*/
      while (NF0MW04.NF0MWEOS == "N")
        NF0M070();
      end
    else
      if (NF0MM001.NF0MMOPT == "17")
        while (NF0MW04.NF0MWEOS == "N")
          NF0M171();
        end
      else
        while (NF0MW04.NF0MWEOS == "N")
          NF0M190();
        end
      end
    end
  end
end // end NF0M108

// load map from table
Function NF0M109()
  ;
  NF0MW04.NF0MWPRO = "NF0M109";
  ;
   /* MOVE 1 TO NF0MW04.NF0MWDX3;*/
   /* WHILE NF0MW04.NF0MWDX3 LE 16;*/
    /* ; SET NF0MM001.NF0MMV(NF0MWDX3) AUTOSKIP,DARK;*/
    /* MOVE '  ' TO NF0MM001.NF0MMV(NF0MWDX3);*/
    /* NF0MW04.NF0MWDX3 = NF0MW04.NF0MWDX3 + 1;*/
   /* END ;*/
  ;
   /* move from table to map*/
  ;
   /* MOVE 1 TO NF0MW04.NF0MWDX3;*/
   /* WHILE NF0MW04.NF0MWDX3 LE 16;*/
   /* MOVE NF0MT03.NF0MTDES(NF0MWDX3) TO NF0MM001.NF0MMV(NF0MWDX3)*/
    /* NF0MW04.NF0MWDX3 = NF0MW04.NF0MWDX3 + 1;*/
   /* END ;*/
  ;
  NF0MW04.NF0MWCT1 = 1;
  NF0MW04.NF0MWCT2 = 1;
  while (NF0MW04.NF0MWCT2 <= 16
   && NF0MT03.NF0MTDES[NF0MWCT1] != "99")
    NF0MM001.NF0MMV[NF0MWCT2] = NF0MT03.NF0MTDES[NF0MWCT1];
    NF0MW04.NF0MWCT1 = NF0MW04.NF0MWCT1 + 1;
    NF0MW04.NF0MWCT2 = NF0MW04.NF0MWCT2 + 1;
  end
  ;
end // end NF0M109

// load descrips to map1
Function NF0M110()
  if (NF0MW04.NF0MWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* **********************************************************/
    ;
     /* IF NF0MW04.NF0MWFFL EQ 'N'; if not the first time through*/
       /* NF0MW04.NF0MWCT1 = NF0MW04.NF0MWINX(15) + 1; set up pf8*/
     /* END ;*/
    ;
      /* *********************************************************/
      /* ******  Check for PFkey errors and scroll errors  *******/
      /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     && NF0MT03.NF0MTDES[NF0MWCT1] == "99") /* And end of table*/
      NF0MW04.NF0MWERR = "Y"; /* Set error flag*/
      converseLib.validationFailed(410);
    else
      if (converseVar.eventKey is pf7 /* If PF7 pressed*/
       && NF0MW04.NF0MWCT1 <= 17)    
        NF0MW04.NF0MWERR = "Y"; /* Set error flag*/
        converseLib.validationFailed(409);
      end
    end
    ;
      /* *********************************************************/
    if (NF0MW04.NF0MWERR != "Y")
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8)
        NF0MW04.NF0MWDX3 = 1;
        while (NF0MW04.NF0MWDX3 <= 16)
          NF0MM001.NF0MMV[NF0MWDX3] = " ";
          NF0MW04.NF0MWDX3 = NF0MW04.NF0MWDX3 + 1;
        end
      end
    end
    ;
      /* *********************************************************/
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (NF0MW04.NF0MWERR != "Y")
      if (converseVar.eventKey is pf8 /* If PF8 pressed*/
       || NF0MW04.NF0MWFFL == "Y")    /* first time thru*/
        NF0MW04.NF0MWCT2 = 1; /* Set up screen index*/
        NF0MW04.NF0MWCT1 = NF0MW04.NF0MWDX3; /* Set up table index*/
        while (NF0MW04.NF0MWCT2 <= 16 /* Until end of screen lines*/
         && NF0MT03.NF0MTDES[NF0MWCT1] != "99") /* Or end of data*/
          if (NF0MT03.XXXSTAT[NF0MWCT1] == "A") /* If active status on code*/
            NF0MM001.NF0MMV[NF0MWCT2] = NF0MT03.NF0MTDES[NF0MWCT1];
            NF0MW04.NF0MWINX[NF0MWCT2] = NF0MW04.NF0MWCT1; /* Save array*/
            if (NF0MW04.NF0MWFFL == "Y") /* If first time thru*/
              NF0MW04.NF0MWSIX = NF0MW04.NF0MWCT1; /* Save last index*/
            end
            NF0MW04.NF0MWCT2 = NF0MW04.NF0MWCT2 + 1; /* Increment screen index*/
          end
          NF0MW04.NF0MWCT1 = NF0MW04.NF0MWCT1 + 1; /* Increment table index*/
        end
        NF0MW04.NF0MWFFL = "N"; /* Set first time flag to no*/
      end
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (NF0MW04.NF0MWERR != "Y")
      if (converseVar.eventKey is pf7) /* If PF7 pressed*/
        NF0MW04.NF0MWCT1 = NF0MW04.NF0MWINX[1] - 1; /* Set up table index*/
        NF0MW04.NF0MWCT2 = 16; /* Set up screen index*/
        while (NF0MW04.NF0MWCT2 >= 1) /* Load from the bottom up*/
          if (NF0MT03.XXXSTAT[NF0MWCT1] == "A") /* If the status is active*/
            NF0MM001.NF0MMV[NF0MWCT2] = NF0MT03.NF0MTDES[NF0MWCT1];
            NF0MW04.NF0MWINX[NF0MWCT2] = NF0MW04.NF0MWCT1; /* Save array*/
            NF0MW04.NF0MWCT2 = NF0MW04.NF0MWCT2 - 1; /* Decrement screen index*/
          end
          NF0MW04.NF0MWCT1 = NF0MW04.NF0MWCT1 - 1; /* Decrement table index*/
        end
        if (NF0MW04.NF0MWCT1 < 1) /* If the table index was decremented*/
          NF0MW04.NF0MWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
        end
      end
    end
    ;
  end
  ;
   /* **********************************************************/
  ;
  NF0MW04.NF0MWERR = "N"; /* Reset error flag*/
  ;
  if (converseVar.eventKey is pf7 /* If PF8 pressed*/
   || converseVar.eventKey is pf8) /* If PF8 pressed*/
    NF0MW04.NF0MWEND = "N"; /* end of scrolling*/
  else
    NF0MW04.NF0MWEND = "Y"; /* end of scrolling*/
  end
  ;
  ;
end // end NF0M110

// Main process to display a map
Function NF0M120()
  ;
  ;
  set NF0MM001.NF0MMFDS normal;
  set NF0MM001.NF0MM-001-DATA-SRC normal;
  set NF0MM001.NF0MMOPT cursor, normal;
  NF0MW04.NF0MWFD1 = NF0MM001.NF0MMFDS; /* save fcst data source*/
  ;
   /* Fcst data source fields must be blank when req extract file crt*/
  ;
  if (NF0MM001.NF0MMOPT == "19")
    if (NF0MM001.NF0MM-001-DATA-SRC != " ")
      NF0MW04.NF0MWERR = "Y";
      set NF0MM001.NF0MM-001-DATA-SRC cursor, bold; /* highlight*/
      converseLib.validationFailed(501); /* specification not valid*/
    end
    if (NF0MM001.NF0MMFDS != " ")
      NF0MW04.NF0MWERR = "Y";
      set NF0MM001.NF0MMFDS cursor, bold; /* highlight*/
      converseLib.validationFailed(501); /* specification not valid*/
    end
  else
   /* Check fcst data source*/
    ;
    if (NF0MM001.NF0MM-001-DATA-SRC != "F"
     && NF0MM-001-DATA-SRC != "O")
      NF0MW04.NF0MWERR = "Y";
      set NF0MM001.NF0MM-001-DATA-SRC cursor, bold; /* highlight*/
      converseLib.validationFailed(493); /* invalid value entered*/
    end
    ;
    if (NF0MM001.NF0MMFDS != "S"
     && NF0MM001.NF0MMFDS != "P"
     && NF0MM001.NF0MMFDS != "C")
      NF0MW04.NF0MWERR = "Y";
      set NF0MM001.NF0MMFDS cursor, bold; /* highlight*/
      converseLib.validationFailed(412); /* invalid value entered*/
    end
    ;
    if (NF0MM001.NF0MMFDS == "C"
     && NF0MM001.NF0MM-001-DATA-SRC == "O")
      NF0MW04.NF0MWERR = "Y";
      set NF0MM001.NF0MM-001-DATA-SRC cursor, bold; /* highlight*/
      set NF0MM001.NF0MMFDS cursor, bold; /* highlight*/
      converseLib.validationFailed(500); /* invalid combination entered*/
    end
  end
  ;
  if (NF0MM001.NF0MMOPT == "17"
   && NF0MM001.NF0MMFDS != "S")
    NF0MW04.NF0MWERR = "Y";
    set NF0MM001.NF0MMFDS cursor, bold; /* highlight*/
    converseLib.validationFailed(494); /* invalid value entered*/
  end
  ;
  ;
  NF0MM001.NF0MMOPT = NF0MW04.NF0MWFD2; /* map1 menu option*/
  ;
  if (NF0MM001.NF0MMOPT == "01"
   || NF0MM001.NF0MMOPT == "1 "
   || NF0MM001.NF0MMOPT == " 1")
    NF0MM001.NF0MMOPT = "01";
  end
  ;
  if (NF0MM001.NF0MMOPT == "02"
   || NF0MM001.NF0MMOPT == "2 "
   || NF0MM001.NF0MMOPT == " 2")
    NF0MM001.NF0MMOPT = "02";
  end
  ;
  if (NF0MM001.NF0MMOPT == "03"
   || NF0MM001.NF0MMOPT == "3 "
   || NF0MM001.NF0MMOPT == " 3")
    NF0MM001.NF0MMOPT = "03";
  end
  ;
  if (NF0MM001.NF0MMOPT == "04"
   || NF0MM001.NF0MMOPT == "4 "
   || NF0MM001.NF0MMOPT == " 4")
    NF0MM001.NF0MMOPT = "04";
  end
  ;
  if (NF0MM001.NF0MMOPT == "05"
   || NF0MM001.NF0MMOPT == "5 "
   || NF0MM001.NF0MMOPT == " 5")
    NF0MM001.NF0MMOPT = "05";
  end
  ;
  if (NF0MM001.NF0MMOPT == "06"
   || NF0MM001.NF0MMOPT == "6 "
   || NF0MM001.NF0MMOPT == " 6")
    NF0MM001.NF0MMOPT = "06";
  end
  ;
  if (NF0MM001.NF0MMOPT == "07"
   || NF0MM001.NF0MMOPT == "7 "
   || NF0MM001.NF0MMOPT == " 7")
    NF0MM001.NF0MMOPT = "07";
  end
  ;
  if (NF0MM001.NF0MMOPT == "08"
   || NF0MM001.NF0MMOPT == "8 "
   || NF0MM001.NF0MMOPT == " 8")
    NF0MM001.NF0MMOPT = "08";
  end
  ;
  if (NF0MM001.NF0MMOPT == "09"
   || NF0MM001.NF0MMOPT == "9 "
   || NF0MM001.NF0MMOPT == " 9")
    NF0MM001.NF0MMOPT = "09";
  end
  ;
  if (NF0MM001.NF0MMOPT == "  "
   && converseVar.eventKey not pa2
   && converseVar.eventKey not pf1
   && converseVar.eventKey not pf3
   && converseVar.eventKey not pf4
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8)
    NF0MW04.NF0MWERR = "Y";
    NF0MW04.NF0MWEND = "Y";
    set NF0MM001.NF0MMOPT cursor, bold; /* highlight*/
    converseLib.validationFailed(411); /* entered option out of range*/
  else
    if (NF0MM001.NF0MMOPT < NF0MW04.NF0MWLOW
     || NF0MM001.NF0MMOPT > NF0MW04.NF0MWHIC
     || NF0MM001.NF0MMOPT == "01"
     || NF0MM001.NF0MMOPT == "02"
     || NF0MM001.NF0MMOPT == "10"
     || NF0MM001.NF0MMOPT == "12"
     || NF0MM001.NF0MMOPT == "13"
     || NF0MM001.NF0MMOPT == "14"
     || NF0MM001.NF0MMOPT == "15"
     || NF0MM001.NF0MMOPT == "17"
     || NF0MM001.NF0MMOPT == "18")
      if (converseVar.eventKey not pa2
       && converseVar.eventKey not pf1
       && converseVar.eventKey not pf3
       && converseVar.eventKey not pf4
       && converseVar.eventKey not pf7
       && converseVar.eventKey not pf8)
        NF0MW04.NF0MWERR = "Y";
        NF0MW04.NF0MWEND = "Y";
        set NF0MM001.NF0MMOPT cursor, bold; /* highlight*/
        converseLib.validationFailed(411); /* / * entered option out of range*/
      end
    else
      NF0MW04.NF0MWOPT = NF0MM001.NF0MMOPT; /* store option*/
    end
  end
  ;
end // end NF0M120

// Verify the entered data
Function NF0M170()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XPCCD > " ") /* Product category entered*/
    if (NF0MM005.XPLCD > " ") /* prod line entered*/
      FFWREC.XXXMODID = "170"; /* Module identification*/
      set NF0MM005.XPCCD cursor, bold; /* Highlight*/
      set NF0MM005.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(417); /* cat or line*/
    else
      XPCREC.XPCCD = NF0MM005.XPCCD; /* Product line*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        NF0MM005.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM005.XPCABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
  else
    NF0MM005.XPCABRV = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XPLCD > " ") /* Product line entered*/
    if (NF0MM005.XPCCD > " ") /* prod cat entered*/
      FFWREC.XXXMODID = "170"; /* Module identification*/
      set NF0MM005.XPCCD cursor, bold; /* Highlight*/
      set NF0MM005.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(417); /* cat or line*/
    else
      XPLREC.XPLCD = NF0MM005.XPLCD; /* Product line*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        NF0MM005.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM005.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
  else
    NF0MM005.XPLABRV = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.YPGCD > " " /* Product type group entered*/
   && NF0MM005.YPGCD != "*") /* and not wild card*/
    if (NF0MM005.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (NF0MM005.YPGCD == "01"
       || NF0MM005.YPGCD == "02")
        NF0MM005.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM005.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    else
      NF0MM005.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "170"; /* Module identification*/
      set NF0MM005.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
    end
  else
    if (NF0MM005.YPGCD == "*") /* Wild card*/
      NF0MM005.YPGABRV = "ALL"; /* Abbreviation*/
    else
      NF0MM005.YPGABRV = " "; /* Abbreviation*/
      /* MOVE '170' TO FFWREC.XXXMODID;       /* Module identification*/
      /* SET NF0MM005.YPGCD CURSOR,BRIGHT;    /* Highlight*/
      /* MOVE 415 TO EZEMNO;           /* Required field*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type code was entered.*/
   /* ------------------------------------------------------------*/
  if (NF0MM005.XPRCD > " ") /* Product type entered*/
    if (NF0MM005.XPRCD in XPRTBL.XPRCD /* Code in table*/
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01" /* type group*/
       || XPRTBL.YPGCD[sysVar.arrayIndex] == "02") /* type group*/
        if (NF0MM005.YPGCD == XPRTBL.YPGCD[sysVar.arrayIndex]
         || NF0MM005.YPGCD == " ")
          NF0MM005.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
        else
          NF0MM005.XPRDESC = " "; /* Abbreviation*/
          set NF0MM005.XPRCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(422); /* Invalid value entered*/
        end
      else
        NF0MM005.XPRDESC = " "; /* Abbreviation*/
        set NF0MM005.XPRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(425); /* Invalid value entered*/
      end
    else
      NF0MM005.XPRDESC = " "; /* Abbreviation*/
      set NF0MM005.XPRCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(425); /* Invalid value entered*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid foreign country code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XCTCD > " ") /* Foreign country entered*/
    if (NF0MM005.XCTCD == "USA") /* and USA*/
      FFWREC.XXXMODID = "170"; /* Module identification*/
      set NF0MM005.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Inconsistent relationship*/
    else
      if (NF0MM005.ZRGCD > " " /* Sales region entered*/
       || NF0MM005.NF0MMYSC > " ") /* mgmt region entered*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.XCTCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(293); /* Mutually exclusive*/
      else
        if (NF0MM005.XCTCD in XCTTBL.XCTCD /* Code in table*/
         && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          NF0MM005.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
        else
          NF0MM005.XCTABRV = " "; /* Abbreviation*/
          ;
          FFWREC.XXXMODID = "170"; /* Module identification*/
          set NF0MM005.XCTCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value entered*/
        end
      end
    end
  else
    NF0MM005.XCTABRV = " "; /* Abbreviation*/
    if (NF0MM005.ZRGCD > " " /* Sales region entered*/
     || NF0MM005.NF0MMYSC > " ") /* magmt region entered*/
       /* NEXT SENTENCE*/
    else
      FFWREC.XXXMODID = "170"; /* Module identification*/
      /* SET NF0MM005.XCTCD CURSOR,BRIGHT;    /* Highlight*/
      /* MOVE 416 TO EZEMNO;           /* mgt,sls, or ctry required*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid mgmt region code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMYSC != "  ")
    if (NF0MM005.ZRGCD > " " /* Sales region entered*/
     || NF0MM005.XCTCD > " ") /* country entered*/
      FFWREC.XXXMODID = "170"; /* Module identification*/
      set NF0MM005.ZRGCD cursor, bold; /* Highlight*/
      set NF0MM005.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(293); /* Mutually exclusive*/
    else
      if (NF0MM005.NF0MMYSC in NF0MT04.NF0MTMRC)
        NF0MM005.NF0MMYSM = NF0MT04.NF0MTMRD[sysVar.arrayIndex];
      else
        NF0MM005.NF0MMYSC = " "; /* Abbreviation*/
        NF0MM005.NF0MMYSM = " "; /* DESC*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.NF0MMYSC cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
  else
    NF0MM005.NF0MMYSM = " "; /* DESC*/
  end
   /* ------------------------------------------------------------*/
   /* Verify that a valid sales region code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.ZRGCD > " ") /* Sales region entered*/
    if (NF0MM005.NF0MMYSC > " " /* mgmt region entered*/
     || NF0MM005.XCTCD > " ")   /* country entered*/
      set NF0MM005.NF0MMYSC bold; /* Highlight*/
      set NF0MM005.ZRGCD cursor, bold; /* Highlight*/
      set NF0MM005.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(293); /* mutually exclusive*/
    else
      if (NF0MM005.ZRGCD in ZRGTBL.ZRGCD /* Code in table*/
       && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        NF0MM005.ZRGABRV = ZRGTBL.ZRGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM005.ZRGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "170"; /* Module identification*/
        set NF0MM005.ZRGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      end
    end
  else
    NF0MM005.ZRGABRV = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid ord/fcst detail level parm was chosen.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMNA != "Y") /* nil adjust lvl flag*/
    if (NF0MM005.NF0MMNA != "N") /**/
      set NF0MM005.NF0MMNA cursor, bold; /* Highlight*/
      converseLib.validationFailed(427); /* put 'y' or 'n' only*/
    end
  end
  ;
  if (NF0MM005.NF0MMCD != "Y") /* ctry summary flag*/
    if (NF0MM005.NF0MMCD != "N") /**/
      set NF0MM005.NF0MMCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(427); /* put 'y' or 'n' only*/
    end
  end
  ;
   /* -----------------------------------------------------------------*/
   /* Verify that adjustment ctry cannot be selected with ctry report*/
   /* -----------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMCD == "Y" /* ctry summary flag*/
   && NF0MM005.NF0MMNA != "N") /* adjustment ctry flag*/
    set NF0MM005.NF0MMNA cursor, bold; /* Highlight*/
    converseLib.validationFailed(462); /* cannot choose adjust w/ctry rpt*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid exception % range was chosen.*/
   /* ------------------------------------------------------------*/
  ;
   /* F NF0MM005.NF0MMEP GT 100       /* exception %*/
   /* OR NF0MM005.NF0MMEP LT 1;*/
   /* SET NF0MM005.NF0MMEP CURSOR,BRIGHT;/* Highlight*/
   /* MOVE 429 TO EZEMNO;            /* cannot be greater than 100*/
   /* ND;*/
  ;
   /* ------------------------------------------------------------*/
   /* Convert fall season beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMFSB > 0) /* date not empty*/
    set FFZREC empty; /* Subroutine parameters*/
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM005.NF0MMFSB; /* beginning yymm to validate*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
    ;
    /* ------------------------------------------------------------*/
        /* Indicate error if the date doesn't pass the verification*/
    /* ------------------------------------------------------------*/
    ;
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        set NF0MM005.NF0MMFSB cursor, bold; /* Highlight*/
        converseLib.validationFailed(010); /* invalid value entered*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "170"; /* Module identification*/
    set NF0MM005.NF0MMFSB cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum;
    return;
  end
  ;
  ;
end // end NF0M170

// Process NIL reports
Function NF0M171()
   /* ---------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "ezertn" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M172(); /* Format and display the map*/
  ;
  NF0M173(); /* Check attention identifier*/
  ;
  NF0M174(); /* Reset fields to normal intensity*/
  ;
   /* PERFORM NF0M175   ; Verify the data that was entered*/
  NF0M170(); /* Verify the data that was entered*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      NF0M176(); /* Process valid input request*/
    else
      NF0M177(); /* Process valid input request*/
    end
  end
  ;
  ;
end // end NF0M171

// Format and display the map
Function NF0M172()
   /* ------------------------------------------------------------*/
  ;
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  NF0MM005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  NF0MM005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  NF0MM005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  NF0MM005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  NF0MM005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
  NF0M178();
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
     /* OR COMMAREA.CAMSG NE ' '      ; or message text*/
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      NF0MM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    NF0MM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set NF0MM005 alarm; /* Indicate sound alarm*/
  end
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    NF0MM005.NF0MMCD = "N"; /* set defaults*/
    NF0MM005.NF0MMNA = "N"; /**/
  end
  ;
  converse NF0MM005 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end NF0M172

// Check attention identifier
Function NF0M173()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set NF0MM005 initial; /* m001 input/output*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FFWREC.XXXMODID = "173"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    return; /* Exit to display map*/
  end
  ;
  ;
end // end NF0M173

// Reset highlighted fields
Function NF0M174()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW09.NF0MWIXM = 1; /* Map line index*/
  ;
  set NF0MM005.NF0MMFSB initialAttributes; /* orders month*/
  set NF0MM005.NF0MMYSC initialAttributes; /* mgmt region*/
  set NF0MM005.ZRGCD initialAttributes; /* sales region*/
  set NF0MM005.XCTCD initialAttributes; /* Foreign country*/
  set NF0MM005.YPGCD initialAttributes; /* product type group*/
  set NF0MM005.XPRCD initialAttributes; /* product type*/
  set NF0MM005.XPLCD initialAttributes; /* product line*/
  set NF0MM005.XPCCD initialAttributes; /* product cat*/
  set NF0MM005.NF0MMCD initialAttributes; /* detail level*/
  set NF0MM005.NF0MMNA initialAttributes; /* nil adjust level*/
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMYSC == "?" /* mgt region list requested*/
   || NF0MM005.ZRGCD == "?"    /* sls region list requested*/
   || NF0MM005.XCTCD == "?"    /* or foreign country list requested*/
   || NF0MM005.YPGCD == "?"    /* or product type group list requested*/
   || NF0MM005.XPRCD == "?"    /* or product type list requested*/
   || NF0MM005.XPLCD == "?"    /* or prod line list requested*/
   || NF0MM005.XPCCD == "?")   /* or prod cat list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "174"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      return; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of management regions.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.NF0MMYSC == "?") /* mgt region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  MGT REG"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      NF0M095(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.NF0MMYSC = " "; /* clear code*/
      NF0MM005.NF0MMYSM = " "; /* ABBRV*/
    else
      NF0MM005.NF0MMYSC = NF0MT04.NF0MTMRC[XX0XWPIX];
      NF0MM005.NF0MMYSM = NF0MT04.NF0MTMRD[XX0XWPIX];
    end
    set NF0MM005.NF0MMYSC cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sales region codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.ZRGCD == "?") /* Sales region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  REGION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPZRG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.ZRGCD = " "; /* Clear code*/
      NF0MM005.ZRGABRV = " "; /* Abbreviation*/
    else
      NF0MM005.ZRGCD = ZRGTBL.ZRGCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.ZRGABRV = ZRGTBL.ZRGABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.ZRGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of foreign country codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XCTCD == "?") /* Dimension list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.XCTCD = " "; /* Clear code*/
      NF0MM005.XCTABRV = " "; /* Abbreviation*/
    else
      NF0MM005.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.XCTCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.YPGCD == "?") /* product type requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYP GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* ftwr fcst flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.XCTCD = " "; /* Clear code*/
      NF0MM005.XCTABRV = " "; /* Abbreviation*/
    else
      NF0MM005.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.YPGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes.*/
   /* ------------------------------------------------------------*/
  if (NF0MM005.XPRCD == "?") /* product type rquested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.XPRCD = " "; /* Clear code*/
      NF0MM005.XPRDESC = " "; /* Abbreviation*/
    else
      NF0MM005.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.XPRDESC = XPRTBL.XPRDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.XPRCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XPLCD == "?") /* product line requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "LINE   "; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* ftwr fcst flag*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.XPLCD = " "; /* Clear code*/
      NF0MM005.XPLABRV = " "; /* Abbreviation*/
    else
      NF0MM005.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.XPLCD cursor; /* Establish cursor position*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product cat codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM005.XPCCD == "?") /* product category requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* ftwr fcst flag*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM005.XPCCD = " "; /* Clear code*/
      NF0MM005.XPCABRV = " "; /* Abbreviation*/
    else
      NF0MM005.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      NF0MM005.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM005.XPCCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "174"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  ;
  ;
end // end NF0M174

// Process valid input request
Function NF0M176()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM005.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "N";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "P";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM001.NF0MMOPT == "17") /* order/fcst variance rpt*/
    if (NF0MM005.NF0MMCD == "N") /* not ctry summary*/
      NF0MW09.NF0MWJOB = "2001"; /* Job identification*/
      NF0MM005.NF0MMV = NF0MT03.NF0MTDES[18]; /* desc*/
    else
      if (NF0MM005.NF0MMCD == "Y") /* ctry summary chosen*/
        NF0MW09.NF0MWJOB = "2021"; /* Job identification*/
        NF0MM005.NF0MMV = NF0MT03.NF0MTDES[19]; /* desc*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT07.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT07.TARTYPE[NF0MWIXU] == "Q") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMXDV = "20"; /* division*/
      NF0MW07.YSMSRCVL = NF0MM005.NF0MMYSC; /* mgmt  region*/
      NF0MW07.ZRGCD = NF0MM005.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM005.XCTCD; /* Foreign country*/
      NF0MW07.YPGCD = NF0MM005.YPGCD; /* product type group*/
      NF0MW07.XPRCD = NF0MM005.XPRCD; /* product type*/
      NF0MW07.XPLCD = NF0MM005.XPLCD; /* product line*/
      NF0MW07.XPCCD = NF0MM005.XPCCD; /* product category*/
      NF0MW07.XURCOPY = NF0MM005.XURCOPY; /* copies requested*/
     /* MOVE NF0MM005.NF0MMEP TO NF0MW07.NF0MMEP; /* exception %*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      ;
      if (NF0MM005.NF0MMNA == "N")
        NF0MW07.NF0MMCA = "D"; /* country detail level*/
      else
        if (NF0MM005.NF0MMNA == "Y")
          NF0MW07.NF0MMCA = "A"; /* nil adjustment level*/
        end
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      if (NF0MT07.TARTYPE[NF0MWIXU] == "R" /* Report distribution*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "4") /* or FORMS  statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT07.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT07.TARTYPE[NF0MWIXU]; /* Type*/
        NF0MS01(); /* Format variable JCL statements*/
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT07.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT07.TARTYPE[NF0MWIXU]; /* Type*/
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT07.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "176"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM005 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
  ;
end // end NF0M176

// Process valid input request
Function NF0M177()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM005.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "2";
  else
    NF0MW04.NF0MWPI = NF0MM004.XURDEST;
    NF0MW04.NF0MWRI = NF0MM004.XURDEST;
    NF0MW09.NF0MWOC = "T";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  if (NF0MM001.NF0MMOPT == "17") /* order/fcst variance rpt*/
    if (NF0MM005.NF0MMCD == "N") /* not ctry summary*/
      NF0MW09.NF0MWJOB = "2001"; /* Job identification*/
      NF0MM005.NF0MMV = NF0MT03.NF0MTDES[18]; /* desc*/
    else
      if (NF0MM005.NF0MMCD == "Y") /* ctry summary chosen*/
        NF0MW09.NF0MWJOB = "2021"; /* Job identification*/
        NF0MM005.NF0MMV = NF0MT03.NF0MTDES[19]; /* desc*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT17.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT17.TARTYPE[NF0MWIXU] == "Q") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMXDV = "20"; /* division*/
      NF0MW07.YSMSRCVL = NF0MM005.NF0MMYSC; /* mgmt region*/
      NF0MW07.ZRGCD = NF0MM005.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM005.XCTCD; /* Foreign country*/
      NF0MW07.YPGCD = NF0MM005.YPGCD; /* product type group*/
      NF0MW07.XPRCD = NF0MM005.XPRCD; /* product type*/
      NF0MW07.XPLCD = NF0MM005.XPLCD; /* product line*/
      NF0MW07.XPCCD = NF0MM005.XPCCD; /* product category*/
      NF0MW07.XURCOPY = NF0MM005.XURCOPY; /* copies requested*/
     /* MOVE NF0MM005.NF0MMEP TO NF0MW07.NF0MMEP; /* exception %*/
      NF0MW07.NF0MMCOP = NF0MM001.NF0MMOPT; /* map1 option*/
      if (NF0MM005.NF0MMNA == "N")
        NF0MW07.NF0MMCA = "D"; /* country detail*/
      else
        NF0MW07.NF0MMCA = "A"; /* nil adjust*/
      end
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      if (NF0MT17.TARTYPE[NF0MWIXU] == "R" /* Report distribution*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "4") /* or SYSOUT statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT17.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT17.TARTYPE[NF0MWIXU]; /* Type*/
        NF0MS01(); /* Format variable JCL statements*/
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = NF0MT17.TARJCL[NF0MWIXU]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = NF0MT17.TARTYPE[NF0MWIXU]; /* Type*/
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT17.TARJCL[NF0MWIXU] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "177"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM005 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
  ;
end // end NF0M177

// Process valid input request
Function NF0M178()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  ;
  if (NF0MM001.NF0MMOPT == "17") /* order/fcst variance rept*/
    NF0MM005.NF0MMOP2 = "17"; /* option nbr*/
    NF0MM005.NF0MMFDD = NF0MM001.NF0MMFDS; /* fcst source*/
    NF0MM005.NF0MMV = NF0MT03.NF0MTDES[18]; /* desc*/
  end
  ;
  ;
end // end NF0M178

// Process NIL reports
Function NF0M190()
   /* ---------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "ezertn" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M191(); /* Format and display the map*/
  ;
  NF0M192(); /* Check attention identifier*/
  ;
  NF0M193(); /* Reset fields to normal intensity*/
  ;
  NF0M194(); /* Verify the data that was entered*/
  ;
  if (converseVar.validationMsgNum == 0)
    NF0MS02();
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      NF0M195(); /* Process valid input request*/
    else
      NF0M197(); /* Process valid input request*/
    end
  end
  ;
  ;
end // end NF0M190

// Format and display the map
Function NF0M191()
   /* ------------------------------------------------------------*/
  ;
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  else
    set NF0MM006 initial;
    NF0M198();
  end
  ;
  NF0M196();
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
     /* OR COMMAREA.CAMSG NE ' '      ; or message text*/
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      NF0MM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    NF0MM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set NF0MM006 alarm; /* Indicate sound alarm*/
  end
  ;
  converse NF0MM006 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
      /* MOVE 0 TO FFWREC.XXXMSGNO       ; Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end NF0M191

// Check attention identifier
Function NF0M192()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set NF0MM006 initial; /* m001 input/output*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    NF0MW09.NF0MWSWX = "Y"; /* Indicate exit requested*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12) /* edit key was entered*/
    return; /* Exit to display map*/
  end
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    return; /* Exit to display map*/
  end
  ;
  ;
end // end NF0M192

// Reset highlighted fields
Function NF0M193()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW09.NF0MWIXM = 1; /* Map line index*/
  ;
  NF0M198(); /* SET MAP FIELDS*/
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.NF0MMYSC == "?" /* or mgt region list requested*/
   || NF0MM006.ZRGCD == "?"    /* sls region list requested*/
   || NF0MM006.XCTCD == "?"    /* or foreign country list requested*/
   || NF0MM006.YPGCD == "?"    /* or product type group list requested*/
   || NF0MM006.XPLCD == "?"    /* or product line list requested*/
   || NF0MM006.XPRCD == "?"    /* or product type list requested*/
   || NF0MM006.XPCCD == "?"    /* or product cat list requested*/
   || NF0MM006.XSNABRV == "?") /* or Season Code list requested*/
    if (converseVar.eventKey is enter /* ENTER was not pressed*/
     || converseVar.eventKey is pf12)
   /* next sentence*/
    else
      FFWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      return; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of management regions.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.NF0MMYSC == "?") /* mgt region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  MGT REG"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      NF0M095(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.NF0MMYSC = " "; /* clear code*/
      NF0MM006.NF0MMYSM = " "; /* ABBRV*/
    else
      NF0MM006.NF0MMYSC = NF0MT04.NF0MTMRC[XX0XWPIX];
      NF0MM006.NF0MMYSM = NF0MT04.NF0MTMRD[XX0XWPIX];
    end
    set NF0MM006.NF0MMYSC cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of sales region codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.ZRGCD == "?") /* Sales region list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  REGION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPZRG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.ZRGCD = " "; /* Clear code*/
      NF0MM006.ZRGDESC = " "; /* Abbreviation*/
    else
      NF0MM006.ZRGCD = ZRGTBL.ZRGCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.ZRGDESC = ZRGTBL.ZRGDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.ZRGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of foreign country codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XCTCD == "?") /* Dimension list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XCTCD = " "; /* Clear code*/
      NF0MM006.XCTDESC = " "; /* Abbreviation*/
    else
      NF0MM006.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.XCTCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.YPGCD == "?") /* product type requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYP GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* ftwr fcst flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XCTCD = " "; /* Clear code*/
      NF0MM006.XCTDESC = " "; /* Abbreviation*/
    else
      NF0MM006.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.YPGDESC = YPGTBL.YPGDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.YPGCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XPLCD = " "; /* Clear code*/
      NF0MM006.XPLDESC = " "; /* Abbreviation*/
    else
      NF0MM006.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.XPLDESC = XPLTBL.XPLDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.XPLCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XPRCD == "?") /* product type rquested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XPRCD = " "; /* Clear code*/
      NF0MM006.XPRDESC = " "; /* Abbreviation*/
    else
      NF0MM006.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.XPRDESC = XPRTBL.XPRDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.XCTCD cursor; /* Establish cursor position*/
  end
  ;
   /* -----------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* -----------------------------------------------------------------*/
  ;
  if (NF0MM006.XPCCD == "?") /* Product category list requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XPCCD = " "; /* Clear code*/
      NF0MM006.XPCDESC = " "; /* Abbreviation*/
    else
      NF0MM006.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      NF0MM006.XPCDESC = XPCTBL.XPCDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.XPCCD cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of Season Codes and Abreviations.*/
   /* ------------------------------------------------------------*/
  if (NF0MM006.XSNABRV == "?") /* Season code*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "SEASON CODE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSN01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      NF0MM006.XSNABRV = " "; /* Clear code*/
      NF0MM006.XSNDESC = " "; /* Abbreviation*/
    else
      NF0MM006.XSNABRV = XSNTBL.XSNABRV[XX0XWPIX]; /* Selected code*/
      NF0MM006.XSNDESC = XSNTBL.XSNDESC[XX0XWPIX]; /* Abbreviation*/
    end
    set NF0MM006.XSNABRV cursor; /* Establish cursor position*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "193"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
end // end NF0M193

// Verify the entered data
Function NF0M194()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid Season Code code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XSNABRV > " ") /* Season Code*/
    if (NF0MM006.XSNABRV in XSNTBL.XSNABRV /* Code in table*/
     && XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      NF0MM006.XSNDESC = XSNTBL.XSNDESC[sysVar.arrayIndex]; /* Abbreviation*/
    else
      NF0MM006.XSNDESC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "194"; /* Module identification*/
      set NF0MM006.XSNABRV cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
    end
  else
    NF0MM006.XSNABRV = " ";
    NF0MM006.XSNDESC = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert beg date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.NF0MMBDT > 0) /* date not empty*/
    set FFZREC empty; /* Subroutine parameters*/
    set TA2REC empty; /* clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
    TA2REC.TA2GRTYP = "E"; /* type*/
    TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
    TA2REC.TA2GRGYM = NF0MM006.NF0MMBDT; /* beginning yymm*/
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/
   /* ------------------------------------------------------------*/
    /* Indicate error if the date doesn't pass the verification*/
   /* ------------------------------------------------------------*/
    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
      if (TA2REC.TA2RTNCD == 0) /* normal return code*/
        NF0MW07.NF0MWFSB = TA2REC.TA2GRCYM;
      else
        FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.NF0MMBDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(17); /* Required field*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "CONVERT SEASON DATE ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
      FFWREC.XXXMODID = "X30"; /* module i.d.*/
      converseLib.validationFailed(1); /* systems error occurred*/
      return; /* exit to display map*/
    end
  else
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set NF0MM006.NF0MMBDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Required field*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert end date from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW04.NF0MWOPT != "18")
    if (NF0MM006.NF0MMEDT > 0)
      set TA2REC empty; /* clear row storage area*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
      TA2REC.TA2GRTYP = "E"; /* type*/
      TA2REC.TA2GRGDD = 01; /* dd to be evaluated*/
      TA2REC.TA2GRGYM = NF0MM006.NF0MMEDT; /* ending yymm to validate*/
      try
        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      end /* date routine*/
      ;
   /* ------------------------------------------------------------*/
    /* Indicate error if the date doesn't pass the verification*/
   /* ------------------------------------------------------------*/
      ;
      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA2REC.TA2RTNCD < 888)         /* and subrtn completed*/
        if (TA2REC.TA2RTNCD == 0) /* normal return code*/
          NF0MW07.NF0MWFSE = TA2REC.TA2GRCYM;
        else
          FFZREC.FFZBEGRC = "2"; /* indicate invalid date entered*/
          set NF0MM006.NF0MMEDT cursor, bold; /* Highlight*/
          converseLib.validationFailed(17); /* Required field*/
        end
      else
        TAEREC.TAEDESC1 = sysVar.errorCode;
        TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        TA1REC.TA1TYPE = "APPL"; /* type of error*/
        TA1REC.TA1LOC = "CONVERT SEASON DATE ";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diag routine*/
        FFWREC.XXXMODID = "X30"; /* module i.d.*/
        converseLib.validationFailed(1); /* systems error occurred*/
        return; /* exit to display map*/
      end
    else
      if (NF0MW04.NF0MWOPT != "18")
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.NF0MMEDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Required field*/
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0
   && NF0MW04.NF0MWOPT != "18")
    if (NF0MW04.NF0MWOPT == "15")
      NF0M205(); /* 6 to 12 month range*/
    else
      NF0M206(); /* 1 to 12 month range only*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify required selection criteria was entered.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M203();

   /* ------------------------------------------------------------*/
   /* Verify that a valid mgmt region code was entered.*/
   /* 08-23-99 LDAVI4 ADDED LOGIC FOR 'AF' AFRICA*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.NF0MMYSC != "  ") /* management region entered*/
    if (NF0MM006.NF0MMYSC == "AP")
      NF0MM006.NF0MMYSM = "ASIA-PACIFIC";
    else
      if (NF0MM006.NF0MMYSC == "CA")
        NF0MM006.NF0MMYSM = "CANADA      ";
      else
        if (NF0MM006.NF0MMYSC == "EU")
          NF0MM006.NF0MMYSM = "EUROPE      ";
        else
          if (NF0MM006.NF0MMYSC == "LA")
            NF0MM006.NF0MMYSM = "LAAM";
          else
            if (NF0MM006.NF0MMYSC == "AF")
              NF0MM006.NF0MMYSM = "AFRICA      ";
            else
              NF0MM006.NF0MMYSM = " "; /* DESC*/
              FFWREC.XXXMODID = "194"; /* Module identification*/
              set NF0MM006.NF0MMYSC cursor, bold; /* Highlight*/
              converseLib.validationFailed(10); /* Invalid value entered*/
            end
          end
        end
      end
    end
  else
    NF0MM006.NF0MMYSC = " ";
    NF0MM006.NF0MMYSM = " ";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid sales region code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.ZRGCD > " ") /* Sales region entered*/
    if (NF0MM006.ZRGCD in ZRGTBL.ZRGCD /* Code in table*/
     && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (ZRGTBL.ZRGCD[sysVar.arrayIndex] == "9999"
       || ZRGTBL.ZRGCD[sysVar.arrayIndex] == "0000")
        NF0MM006.ZRGDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.ZRGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid value entered*/
      else
        NF0MM006.ZRGDESC = ZRGTBL.ZRGDESC[sysVar.arrayIndex]; /* Abbreviation*/
      end
    else
      NF0MM006.ZRGDESC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "194"; /* Module identification*/
      set NF0MM006.ZRGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
    end
  else
    NF0MM006.ZRGCD = " ";
    NF0MM006.ZRGDESC = " "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid foreign country code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XCTCD > " ") /* Foreign country entered*/
    if (NF0MM006.XCTCD == "USA") /* and USA*/
      FFWREC.XXXMODID = "194"; /* Module identification*/
      set NF0MM006.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Inconsistent relationship*/
    else
      if (NF0MM006.XCTCD != "ALL ")
        if (NF0MM006.XCTCD in XCTTBL.XCTCD /* Code in table*/
         && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          if (XCTTBL.XCTCD[sysVar.arrayIndex] == "0000"
           || XCTTBL.XCTCD[sysVar.arrayIndex] == "9999")
            NF0MM006.XCTDESC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "194"; /* Module identification*/
            set NF0MM006.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(10); /* Invalid value entered*/
          else
            NF0MM006.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          end
        else
          NF0MM006.XCTDESC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "194"; /* Module identification*/
          set NF0MM006.XCTCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Invalid value entered*/
        end
      end
    end
  else
    NF0MM006.XCTCD = "    ";
    NF0MM006.XCTDESC = "    "; /* Abbreviation*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.YPGCD > " ") /* Product type group entered*/
    if (NF0MM006.YPGCD == "01"
     || NF0MM006.YPGCD == "02")
      if (NF0MM006.YPGCD in YPGTBL.YPGCD /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        NF0MM006.YPGDESC = YPGTBL.YPGDESC[sysVar.arrayIndex]; /* Abbreviation*/
      else
        NF0MM006.YPGDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(425); /* Invalid value entered*/
      end
    else
      NF0MM006.YPGDESC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "194"; /* Module identification*/
      set NF0MM006.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(425); /* Invalid value entered*/
    end
  else
    NF0MM006.YPGCD = " ";
    NF0MM006.YPGDESC = "ALL, COMBINE TYPE GROUPS";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XPLCD > " ") /* Product line entered*/
    if (NF0MM006.XPLCD != "*") /* and not wild card*/
      XPLREC.XPLCD = NF0MM006.XPLCD; /* Product line*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (XPLTBL.XPLCD[sysVar.arrayIndex] == "00")
          NF0MM006.XPLDESC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "194"; /* Module identification*/
          set NF0MM006.XPLCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(424); /* Invalid value entered*/
        else
          NF0MM006.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* Abbreviation*/
        end
      else
        NF0MM006.XPLDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(424); /* Invalid value entered*/
      end
    else
      NF0MM006.XPLDESC = "ALL, SORT BY PRODUCT LINE";
    end
  else
    NF0MM006.XPLDESC = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set NF0MM006.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(424); /* Invalid value entered*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XPRCD > " ") /* Product type entered*/
    if (NF0MM006.XPRCD in XPRTBL.XPRCD /* Code in table*/
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01"
       || XPRTBL.YPGCD[sysVar.arrayIndex] == "02")
        if (NF0MM006.YPGCD == XPRTBL.YPGCD[sysVar.arrayIndex]
         || NF0MM006.YPGCD == " ")
          NF0MM006.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
        else
          NF0MM006.XPRDESC = " "; /* Abbreviation*/
          set NF0MM006.XPRCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(422); /* Invalid value entered*/
        end
      else
        NF0MM006.XPRDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.XPRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(423); /* Invalid value entered*/
      end
    else
      NF0MM006.XPRDESC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "194"; /* Module identification*/
      set NF0MM006.XPRCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(425); /* Invalid value entered*/
    end
  else
    NF0MM006.XPRCD = " ";
    NF0MM006.XPRDESC = "ALL, COMBINE PRODUCT TYPES";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XPCCD > " ") /* Product category entered*/
    if (NF0MM006.XPCCD != "*") /* Product type*/
      XPCREC.XPCCD = NF0MM006.XPCCD; /* Product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (XPCTBL.XPCCD[sysVar.arrayIndex] == "00")
          NF0MM006.XPCDESC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "194"; /* Module identification*/
          set NF0MM006.XPCCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(424); /* Invalid value entered*/
        else
          if (NF0MM006.XPLCD > " "
           && NF0MM006.XPLCD != "*")
            set NF0MM006.XPLCD bold; /* Highlight*/
            set NF0MM006.XPCCD cursor, bold; /* Highlight*/
            NF0MM006.XPLDESC = " "; /* Abbreviation*/
            NF0MM006.XPCDESC = " "; /* Abbreviation*/
            converseLib.validationFailed(417); /* Invalid value entered*/
          else
            NF0MM006.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex];
          end
        end
      else
        NF0MM006.XPCDESC = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "194"; /* Module identification*/
        set NF0MM006.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(424); /* Invalid value entered*/
      end /* category*/
    else
      NF0MM006.XPCDESC = "ALL, SORT BY CATEGORY"; /* Abbreviation*/
    end
  else
    NF0MM006.XPCDESC = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set NF0MM006.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(424); /* Invalid value entered*/
  end
  if (NF0MW04.NF0MWOPT == "18")
    if (NF0MM-006-REPORT-TYPE == "1"
     || NF0MM-006-REPORT-TYPE == "2"
     || NF0MM-006-REPORT-TYPE == "3")
        /* next sentence;*/
    else
      converseLib.validationFailed(433);
      set NF0MM-006-REPORT-TYPE cursor, bold;
    end
  end
  if (NF0MW04.NF0MWOPT == "09")
    if (NF0MM-006-REGION-SEND-FL == "Y"
     || NF0MM-006-REGION-SEND-FL == "N")
     /* next sentence;*/
    else
      converseLib.validationFailed(427);
      set NF0MM-006-REGION-SEND-FL cursor, bold;
    end
  end
  if (NF0MW04.NF0MWOPT == "11")
    if (NF0MM-006-REGION-SEND-FL == "Y"
     || NF0MM-006-REGION-SEND-FL == "N")
  /* IF NF0MM-006-REGION-SEND-FL = 'Y';*/
   /* IF NF0MM006.NF0MMYSC EQ 'AP';*/
             /* next sentence;*/
  /* ELSE;*/
  /* MOVE 441 TO EZEMNO;*/
  /* SET NF0MM-006-REGION-SEND-FL CURSOR,BRIGHT;*/
   /* END;*/
  /* END;*/
    else
      converseLib.validationFailed(427);
      set NF0MM-006-REGION-SEND-FL cursor, bold;
    end
  end
  if (NF0MM-006-NA == "Y" /* include nil adjustment*/
   || NF0MM-006-NA == "N")
    /* next sentence;*/
  else
    converseLib.validationFailed(427); /* must enter 'y' or 'n'*/
    set NF0MM-006-NA cursor, bold;
  end
  ;
  if (NF0MW04.NF0MWOPT == "11")
    if (NF0MM-PO-TYP-CD-VAL == "FT"
     || NF0MM-PO-TYP-CD-VAL == "LP"
     || NF0MM-PO-TYP-CD-VAL == "*")
      /* NEXT SENTENCE;*/
    else
      converseLib.validationFailed(424); /* Invalid value entered*/
      set NF0MM-PO-TYP-CD-VAL cursor, bold;
    end
  end
  ;
  if (converseVar.eventKey is pf12
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(428); /* edits passed message*/
  end
end // end NF0M194

// Process valid input request
Function NF0M195()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  if (NF0MM006.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "N";
  else
    NF0MW04.NF0MWPI = NF0MM006.XURDEST;
    NF0MW04.NF0MWRI = NF0MM006.XURDEST;
    NF0MW09.NF0MWOC = "P";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT07.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT07.TARTYPE[NF0MWIXU] == "Q") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMXDV = "20"; /* Division code*/
      NF0MW07.YSMSRCVL = NF0MM006.NF0MMYSC; /* Management region*/
      NF0MW07.ZRGCD = NF0MM006.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM006.XCTCD; /* Foreign country*/
      NF0MW07.YPGCD = NF0MM006.YPGCD; /* product type group*/
      NF0MW07.XPLCD = NF0MM006.XPLCD; /* product line*/
      NF0MW07.XPRCD = NF0MM006.XPRCD; /* product type*/
      NF0MW07.XPCCD = NF0MM006.XPCCD; /* product cat*/
      NF0MW07.XURCOPY = NF0MM006.XURCOPY; /* copies requested*/
      NF0MW07.NF0MMCA = NF0MM-006-NA; /* include nil adjustment flag*/
      NF0MW07.PO-TYP-CD = NF0MM006.NF0MM-PO-TYP-CD-VAL; /* PO type*/
      if (NF0MM006.XSNABRV > "    " /* Season Code*/
       && NF0MM006.XSNABRV in XSNTBL.XSNABRV
       && XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        NF0MW07.XSECD = XSNTBL.XSECD[sysVar.arrayIndex];
        NF0MW07.XSNYR = XSNTBL.XSNYR[sysVar.arrayIndex];
      else
        NF0MW07.XSECD = "    ";
        NF0MW07.XSNYR = 0;
      end
      if (NF0MW04.NF0MWOPT == "14"
       || NF0MW04.NF0MWOPT == "15"
       || NF0MW04.NF0MWOPT == "16"
       || NF0MW04.NF0MWOPT == "18")
        NF0MW07.XCTCD = "ALL "; /* Foreign country*/
        if (NF0MW04.NF0MWOPT == "15"
         || NF0MW04.NF0MWOPT == "18")
          if (NF0MM006.XCTCD > " ")
            NF0MW07.XCTCD = NF0MM006.XCTCD; /* Foreign country*/
          end
        end
      end
      NF0MW07.NF0MMCOP = NF0MW04.NF0MWOPT; /* map1 option*/
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      if (NF0MT07.TARTYPE[NF0MWIXU] == "R" /* Report distribution*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT07.TARTYPE[NF0MWIXU] == "4") /* or FORMS  statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT07.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT07.TARTYPE[NF0MWIXU]; /* Type*/
        NF0MS01(); /* Format variable JCL statements*/
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        if (NF0MT07.TARJCL[NF0MWIXU] == "            /*EOF" /* End of table*/
         && NF0MM-006-REPORT-TYPE == "3")           
            /* next sentence*/
        else
          if (NF0MT07.TARJCL[NF0MWIXU] == "/*EOF18") /* End of table*/
            TA6REC.TARJCL[TA6INDEX] = "/*EOF";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = NF0MT07.TARJCL[NF0MWIXU];
            TA6REC.TARTYPE[TA6INDEX] = NF0MT07.TARTYPE[NF0MWIXU];
          end
        end
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT07.TARJCL[NF0MWIXU] == "            /*EOF" /* End of table*/
     && NF0MM-006-REPORT-TYPE != "3")           
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      if (NF0MT07.TARJCL[NF0MWIXU] == "/*EOF18") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "075"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM006 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
  ;
end // end NF0M195

// Process valid input request
Function NF0M196()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  NF0M104(); /* ASSIGN FORMS CODE FOR USER*/
  NF0MM006.NF0MMV = NF0MW04.NF0MMV[NF0MWOPN]; /* DESC*/
  NF0MM006.NF0MMOP2 = NF0MW04.NF0MWOPT; /* option nbr*/
  if (NF0MW04.NF0MWOPT in NF0MT31.NF0MWOPT) /* test program table*/
    NF0MW09.NF0MWJOB = NF0MT31.NF0MWPGM[sysVar.arrayIndex]; /* move job*/
  end
  ;
   /* set default values for product data*/
  ;
  if (converseVar.validationMsgNum == 0)
    NF0MM006.YPGCD = " "; /* product type*/
    NF0MM006.XPLCD = "*"; /* product line*/
    NF0MM006.XPRCD = " "; /* product type*/
    NF0MM006.XPCCD = "*"; /* product cat*/
    NF0MM006.YPGDESC = "ALL, COMBINE TYPE GROUPS"; /* product type*/
    NF0MM006.XPLDESC = "ALL, SORT BY PRODUCT LINE"; /* product line*/
    NF0MM006.XPRDESC = "ALL, COMBINE PRODUCT TYPES"; /* product type*/
    NF0MM006.XPCDESC = "ALL, SORT BY CATEGORY"; /* product cat*/
    if (NF0MW04.NF0MWOPT == "18")
      NF0MM-006-REPORT-TYPE = "1";
    end
    if (NF0MW04.NF0MWOPT == "09"
     || NF0MW04.NF0MWOPT == "11")
      NF0MM-006-REGION-SEND-FL = "N";
    end
    if (NF0MW04.NF0MWOPT == "11")
      NF0MM006.NF0MM-PO-TYP-CD-VAL = "*"; /* po type code*/
    end
  end
  ;
  NF0MM-006-NA = "Y"; /* include nil adjustment flag*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  NF0MM006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  NF0MM006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  NF0MM006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  NF0MM006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  NF0MM006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  NF0MM006.NF0MMFDD = NF0MW04.NF0MWFD1;
  ;
end // end NF0M196

// Process valid input request
Function NF0M197()
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MM006.XURDEST == "LOCAL")
    NF0MW04.NF0MWPI = "0000";
    NF0MW04.NF0MWRI = "0000";
    NF0MW09.NF0MWOC = "2";
  else
    NF0MW04.NF0MWPI = NF0MM006.XURDEST;
    NF0MW04.NF0MWRI = NF0MM006.XURDEST;
    NF0MW09.NF0MWOC = "T";
  end
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM006.XURCOPY;
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    if (NF0MT17.TARTYPE[NF0MWIXU] == "P" /* Parameters statement*/
     || NF0MT17.TARTYPE[NF0MWIXU] == "Q") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      NF0MW07.YSMXDV = "20"; /* Division Code*/
      NF0MW07.YSMSRCVL = NF0MM006.NF0MMYSC; /* Management region*/
      NF0MW07.ZRGCD = NF0MM006.ZRGCD; /* Sales region*/
      NF0MW07.XCTCD = NF0MM006.XCTCD; /* Foreign country*/
      NF0MW07.YPGCD = NF0MM006.YPGCD; /* product type group*/
      NF0MW07.XPLCD = NF0MM006.XPLCD; /* product line*/
      NF0MW07.XPRCD = NF0MM006.XPRCD; /* product type*/
      NF0MW07.XPCCD = NF0MM006.XPCCD; /* product cat*/
      NF0MW07.XURCOPY = NF0MM006.XURCOPY; /* copies requested*/
      NF0MW07.NF0MMCA = NF0MM-006-NA; /* include nil adjustment*/
      NF0MW07.PO-TYP-CD = NF0MM006.NF0MM-PO-TYP-CD-VAL; /* PO type*/
      if (NF0MM006.XSNABRV > "    " /* Season Code*/
       && NF0MM006.XSNABRV in XSNTBL.XSNABRV
       && XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        NF0MW07.XSECD = XSNTBL.XSECD[sysVar.arrayIndex];
        NF0MW07.XSNYR = XSNTBL.XSNYR[sysVar.arrayIndex];
      else
        NF0MW07.XSECD = "    ";
        NF0MW07.XSNYR = 0;
      end
      if (NF0MW04.NF0MWOPT == "14"
       || NF0MW04.NF0MWOPT == "15"
       || NF0MW04.NF0MWOPT == "16"
       || NF0MW04.NF0MWOPT == "18")
        NF0MW07.XCTCD = "ALL "; /* Foreign country*/
        if (NF0MW04.NF0MWOPT == "15"
         || NF0MW04.NF0MWOPT == "18")
          if (NF0MM006.XCTCD > " ")
            NF0MW07.XCTCD = NF0MM006.XCTCD; /* Foreign country*/
          end
        end
      end
      NF0MW07.NF0MMCOP = NF0MW04.NF0MWOPT; /* map1 option*/
      ;
      TA6REC.TARJCL[TA6INDEX] = NF0MW07.TARJCL; /* Parameters*/
      ;
    else
      if (NF0MT17.TARTYPE[NF0MWIXU] == "R" /* Report distribution*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "1" /* or JOB statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "2" /* or EXEC statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "3" /* or SYSOUT statement*/
       || NF0MT17.TARTYPE[NF0MWIXU] == "4") /* or SYSOUT statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        NF0MW10.TARJCL = NF0MT17.TARJCL[NF0MWIXU]; /* JCL*/
        NF0MW10.TARTYPE = NF0MT17.TARTYPE[NF0MWIXU]; /* Type*/
        NF0MS01(); /* Format variable JCL statements*/
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        if (NF0MT17.TARJCL[NF0MWIXU] == "            /*EOF" /* End of table*/
         && NF0MM-006-REPORT-TYPE == "3")            /* need two datain parms*/
          /* next sentence*/
        else
          if (NF0MT17.TARJCL[NF0MWIXU] == "/*EOF18")
            TA6REC.TARJCL[TA6INDEX] = "/*EOF";
            TA6REC.TARTYPE[TA6INDEX] = " ";
          else
            TA6REC.TARJCL[TA6INDEX] = NF0MT17.TARJCL[NF0MWIXU];
            TA6REC.TARTYPE[TA6INDEX] = NF0MT17.TARTYPE[NF0MWIXU];
          end
        end
      end
    end
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (NF0MT17.TARJCL[NF0MWIXU] == "            /*EOF" /* End of table*/
     && NF0MM-006-REPORT-TYPE != "3")            /* need two datain parms*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      if (NF0MT17.TARJCL[NF0MWIXU] == "/*EOF18") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        NF0MW09.NF0MWIXU = NF0MW09.NF0MWIXU + 1; /* Input table index*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  XPTA0P(); /* Submit JCL for background job*/
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "197"; /* Module identification*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NF0MW09.NF0MMSEL[7] = "*"; /* Indicate function completed*/
    set NF0MM006 initial; /* Clear map output area*/
    NF0MW04.NF0MWEOS = "Y";
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    converseLib.validationFailed(1); /* Unexpected error occurred*/
  end
  ;
  ;
end // end NF0M197

// Reset highlighted fields
Function NF0M198()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW09.NF0MWIXM = 1; /* Map line index*/
  ;
  set NF0MM006.NF0MMBDT initialAttributes; /* beg month*/
  set NF0MM006.NF0MMBDT cursor; /* begin date*/
  set NF0MM006.NF0MMEDT initialAttributes; /* end month*/
  set NF0MM006.YPGCD initialAttributes; /* product type*/
  set NF0MM006.XPLCD initialAttributes; /* product line*/
  set NF0MM006.XPRCD initialAttributes; /* product type*/
  set NF0MM006.XPCCD initialAttributes; /* product cat*/
  if (NF0MW04.NF0MWOPT == "18") /* new factory exception reports*/
    NF0MM-006-REPORT-TYPE-LIT = "BY COUNTRY = 1, BY STYLE = 2, BOTH = 3:";
    set NF0MM006.NF0MMEDT skip, invisible;
    set NF0MM-006-REPORT-TYPE initialAttributes;
  else
    set NF0MM-006-REPORT-TYPE-LIT skip, invisible;
    set NF0MM-006-REPORT-TYPE skip, invisible;
    NF0MM-006-END-DATE-LIT = "END YYMM:";
    set NF0MM006.NF0MMEDT initialAttributes;
  end
  if (NF0MW04.NF0MWOPT == "05"
   || NF0MW04.NF0MWOPT == "09"
   || NF0MW04.NF0MWOPT == "12"
   || NF0MW04.NF0MWOPT == "14"
   || NF0MW04.NF0MWOPT == "16")
    set NF0MM006.NF0MMYSC invisible, protect; /* mgmt region*/
    set NF0MM006.ZRGCD invisible, protect; /* sales region*/
    set NF0MM006.XCTCD invisible, protect; /* country code*/
    set NF0MM006.NF0MMMGT invisible, protect; /* MGT region LIT*/
    set NF0MM006.NF0MMSLS invisible, protect; /* SLS region LIT*/
    set NF0MM006.NF0MMXCT invisible, protect; /* XCT region LIT*/
  else
    if (NF0MW04.NF0MWOPT == "03"
     || NF0MW04.NF0MWOPT == "10"
     || NF0MW04.NF0MWOPT == "13")
      set NF0MM006.NF0MMYSC invisible, protect; /* mgmt region*/
      set NF0MM006.ZRGCD initialAttributes; /* sales region*/
      set NF0MM006.XCTCD invisible, protect; /* country code*/
      set NF0MM006.NF0MMMGT invisible, protect; /* MGT region LIT*/
      set NF0MM006.NF0MMSLS initialAttributes; /* SLS region LIT*/
      set NF0MM006.NF0MMXCT invisible, protect; /* XCT region LIT*/
      NF0MM006.NF0MMSLS = "SLS  REG;";
    else
      if (NF0MW04.NF0MWOPT == "04"
       || NF0MW04.NF0MWOPT == "06"
       || NF0MW04.NF0MWOPT == "08"
       || NF0MW04.NF0MWOPT == "11")
        set NF0MM006.NF0MMYSC initialAttributes; /* mgmt region*/
   /* SET NF0MM006.ZRGCD DARK,PROTECT;/* sales region*/
        set NF0MM006.ZRGCD initialAttributes; /* sales region*/
   /* SET NF0MM006.XCTCD DARK,PROTECT;/* country code*/
        set NF0MM006.XCTCD initialAttributes; /* country code*/
        set NF0MM006.NF0MMMGT initialAttributes; /* MGT region LIT*/
   /* SET NF0MM006.NF0MMSLS DARK,PROTECT;/* SLS region LIT*/
        set NF0MM006.NF0MMSLS initialAttributes; /* SLS region LIT*/
   /* SET NF0MM006.NF0MMXCT DARK,PROTECT;/* XCT region LIT*/
        set NF0MM006.NF0MMXCT initialAttributes; /* XCT region LIT*/
        NF0MM006.NF0MMXCT = "COUNTRY ;";
        NF0MM006.NF0MMSLS = "SLS  REG;";
        NF0MM006.NF0MMMGT = "MNGT REG;";
      else
        if (NF0MW04.NF0MWOPT == "07")
          set NF0MM006.NF0MMYSC invisible, protect; /* mgmt region*/
          set NF0MM006.ZRGCD invisible, protect; /* sales region*/
          set NF0MM006.XCTCD initialAttributes; /* country code*/
          set NF0MM006.NF0MMMGT invisible, protect; /* MGT region LIT*/
          set NF0MM006.NF0MMSLS invisible, protect; /* SLS region LIT*/
          set NF0MM006.NF0MMXCT initialAttributes; /* XCT region LIT*/
          NF0MM006.NF0MMXCT = "COUNTRY ;";
        else
          set NF0MM006.NF0MMYSC initialAttributes; /* MGT REGION*/
          set NF0MM006.ZRGCD initialAttributes; /* sales region*/
          set NF0MM006.XCTCD initialAttributes; /* country code*/
          set NF0MM006.NF0MMMGT initialAttributes; /* MGT region LIT*/
          set NF0MM006.NF0MMSLS initialAttributes; /* SLS region LIT*/
          set NF0MM006.NF0MMXCT initialAttributes; /* XCT region LIT*/
          NF0MM006.NF0MMXCT = "COUNTRY ;";
          NF0MM006.NF0MMSLS = "SLS  REG;";
          NF0MM006.NF0MMMGT = "MNGT REG;";
        end
      end
    end
  end
  if (NF0MW04.NF0MWOPT == "07"
   || NF0MW04.NF0MWOPT == "10"
   || NF0MW04.NF0MWOPT == "11"
   || NF0MW04.NF0MWOPT == "12"
   || NF0MW04.NF0MWOPT == "13")
    NF0MM006.NF0MM-006-SEASON-CD-LIT = "SEASON  CD;";
    set NF0MM006.XSNABRV initialAttributes; /* Season Code*/
  else
    set NF0MM006.NF0MM-006-SEASON-CD-LIT invisible, protect;
    set NF0MM006.XSNABRV invisible, protect;
  end
  if (NF0MW04.NF0MWOPT == "09"
   || NF0MW04.NF0MWOPT == "11")
    set NF0MM006.NF0MM-006-REGION-SEND-LIT initialAttributes;
    set NF0MM006.NF0MM-006-REGION-SEND-FL initialAttributes;
  else
    set NF0MM006.NF0MM-006-REGION-SEND-LIT invisible, skip;
    set NF0MM006.NF0MM-006-REGION-SEND-FL invisible, skip;
  end
  ;
  if (NF0MW04.NF0MWOPT == "05"
   || NF0MW04.NF0MWOPT == "08"
   || NF0MW04.NF0MWOPT == "09"
   || NF0MW04.NF0MWOPT == "11"
   || NF0MW04.NF0MWOPT == "12")
    NF0MM-006-LIT1 = "INCLUDE ADJUSTMENT:";
    NF0MM-006-LIT2 = "(Y OR N)";
    set NF0MM-006-NA initialAttributes;
  else
    set NF0MM-006-LIT1 skip, invisible;
    set NF0MM-006-LIT2 skip, invisible;
    set NF0MM-006-NA skip, invisible;
  end
  if (NF0MW04.NF0MWOPT == "11")
    NF0MM006.SUM-BY-LINE-LIT = "SUM BY LINE:";
    set NF0MM006.SUM-BY-LINE-SW initialAttributes;
    NF0MM006.NF0MM-PO-TYP-CD-DSC = "PO TYPE CODE:";
    set NF0MM006.NF0MM-PO-TYP-CD-VAL initialAttributes;
  else
    set NF0MM006.SUM-BY-LINE-LIT skip, invisible;
    set NF0MM006.SUM-BY-LINE-SW skip, invisible;
    set NF0MM006.NF0MM-PO-TYP-CD-DSC skip, invisible;
    set NF0MM006.NF0MM-PO-TYP-CD-VAL skip, invisible;
  end
end // end NF0M198

// Test required report fields
Function NF0M203()
  ;
   /* ------------------------------------------------------------*/
   /* Test required slection criteria*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Sales region is a required field for these options*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW04.NF0MWOPT == "03"
   || NF0MW04.NF0MWOPT == "10"
   || NF0MW04.NF0MWOPT == "13")
    if (NF0MM006.ZRGCD == " ")
      set NF0MM006.ZRGCD cursor, bold;
      converseLib.validationFailed(8);
    end
  else
    ;
   /* ------------------------------------------------------------*/
    /* Management region is required for these options*/
   /* ------------------------------------------------------------*/
    ;
    if (NF0MW04.NF0MWOPT == "04"
     || NF0MW04.NF0MWOPT == "06"
     || NF0MW04.NF0MWOPT == "08"
     || NF0MW04.NF0MWOPT == "11")
      if (NF0MM006.NF0MMYSC == " ") /* mgmt region*/
        set NF0MM006.NF0MMYSC cursor, bold;
        converseLib.validationFailed(8);
      end
    else
      if (NF0MW04.NF0MWOPT == "07")
        if (NF0MM006.XCTCD == " ") /* country code*/
          set NF0MM006.XCTCD cursor, bold; /* country code*/
          converseLib.validationFailed(8);
        end
      else
        if (NF0MW04.NF0MWOPT == "15")
          if (NF0MM006.XCTCD > " ") /* country code*/
            if (NF0MM006.ZRGCD > " " /* sales region*/
             || NF0MM006.NF0MMYSC > " ") /* management region*/
              set NF0MM006.XCTCD cursor, bold; /* country code*/
              if (NF0MM006.ZRGCD > " ")
                set NF0MM006.ZRGCD bold; /* sales*/
              end
              if (NF0MM006.NF0MMYSC > " ")
                set NF0MM006.NF0MMYSC bold; /* management*/
              end
              converseLib.validationFailed(421);
            end
          else
            if (NF0MM006.ZRGCD > " " /* sales region*/
             && NF0MM006.NF0MMYSC > " ") /* management region*/
              set NF0MM006.ZRGCD cursor, bold; /* sales*/
              set NF0MM006.NF0MMYSC bold; /* management*/
              converseLib.validationFailed(421);
            end
          end
        end
      end
    end
  end
  ;
end // end NF0M203

// limit to 12 month range
Function NF0M205()
  ;
   /* ------------------------------------------------------------*/
   /* Allow only a 6 to 12 month range.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW07.NF0MMBC = NF0MM006.NF0MMBDT; /* start yymm*/
  NF0MW07.NF0MMEC = NF0MM006.NF0MMEDT; /* end yymm*/
  ;
   /* IF NF0MW07.NF0MMBNY GT NF0MW07.NF0MMENY;*/
  if (NF0MW07.NF0MWFSBCCYY > NF0MW07.NF0MWFSECCYY)
    converseLib.validationFailed(368);
    set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
    return;
  else
    /* IF NF0MW07.NF0MMBNY EQ NF0MW07.NF0MMENY*/
    /* AND NF0MW07.NF0MMENM LT NF0MW07.NF0MMBNM;*/
    if (NF0MW07.NF0MWFSBCCYY == NF0MW07.NF0MWFSECCYY
     && NF0MW07.NF0MWFSEMM < NF0MW07.NF0MWFSBMM)
      converseLib.validationFailed(368);
      set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
      return;
    else
      /* NF0MW07.NF0MMD = NF0MW07.NF0MMENY - NF0MW07.NF0MMBNY;*/
      NF0MW07.NF0MMD = NF0MW07.NF0MWFSECCYY - NF0MW07.NF0MWFSBCCYY;
      if (NF0MW07.NF0MMD > 1)
        converseLib.validationFailed(414);
        set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
        return;
      else
        if (NF0MW07.NF0MMD == 1)
          /* NF0MW07.NF0MMD = 13 - NF0MW07.NF0MMBNM;*/
          NF0MW07.NF0MMD = 13 - NF0MW07.NF0MWFSBMM;
          /* NF0MW07.NF0MMDD = NF0MW07.NF0MMD + NF0MW07.NF0MMENM;*/
          NF0MW07.NF0MMDD = NF0MW07.NF0MMD + NF0MW07.NF0MWFSEMM;
          if (NF0MW07.NF0MMDD > 12
           || NF0MW07.NF0MMDD < 6)
            converseLib.validationFailed(414);
            set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
            return;
          end
        else
          if (NF0MW07.NF0MMD == 0)
            /* NF0MW07.NF0MMDD = NF0MW07.NF0MMENM - NF0MW07.NF0MMBNM;*/
            NF0MW07.NF0MMDD = NF0MW07.NF0MWFSEMM - NF0MW07.NF0MWFSBMM;
            if (NF0MW07.NF0MMDD < 5)
              converseLib.validationFailed(413);
              set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
              return;
            end
          end
        end
      end
    end
  end
  ;
end // end NF0M205

// limit to 12 month range
Function NF0M206()
  ;
   /* ------------------------------------------------------------*/
   /* Allow only a 12 month range.*/
   /* ------------------------------------------------------------*/
  ;
  NF0MW07.NF0MMBC = NF0MM006.NF0MMBDT; /* start yymm*/
  NF0MW07.NF0MMEC = NF0MM006.NF0MMEDT; /* end yymm*/
  ;
   /* IF NF0MW07.NF0MMBNY GT NF0MW07.NF0MMENY;*/
  if (NF0MW07.NF0MWFSBCCYY > NF0MW07.NF0MWFSECCYY)
    converseLib.validationFailed(368);
    set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
    return;
  else
    /* IF NF0MW07.NF0MMBNY EQ NF0MW07.NF0MMENY*/
    /* AND NF0MW07.NF0MMENM LT NF0MW07.NF0MMBNM;*/
    if (NF0MW07.NF0MWFSBCCYY == NF0MW07.NF0MWFSECCYY
     && NF0MW07.NF0MWFSEMM < NF0MW07.NF0MWFSBMM)
      converseLib.validationFailed(368);
      set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
      return;
    else
      /* NF0MW07.NF0MMD = NF0MW07.NF0MMENY - NF0MW07.NF0MMBNY;*/
      NF0MW07.NF0MMD = NF0MW07.NF0MWFSECCYY - NF0MW07.NF0MWFSBCCYY;
      if (NF0MW07.NF0MMD > 1)
        converseLib.validationFailed(151);
        set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
        return;
      else
        if (NF0MW07.NF0MMD == 1)
          /* NF0MW07.NF0MMD = 13 - NF0MW07.NF0MMBNM;*/
          NF0MW07.NF0MMD = 13 - NF0MW07.NF0MWFSBMM;
          /* NF0MW07.NF0MMDD = NF0MW07.NF0MMD + NF0MW07.NF0MMENM;*/
          NF0MW07.NF0MMDD = NF0MW07.NF0MMD + NF0MW07.NF0MWFSEMM;
          if (NF0MW07.NF0MMDD > 12)
            converseLib.validationFailed(151);
            set NF0MM006.NF0MMEDT cursor, bold; /* highlight*/
            return;
          end
        end
      end
    end
  end
  ;
end // end NF0M206

// Format variable JCL statements
Function NF0MS01()
   /* ------------------------------------------------------------*/
   /* Format the variable report distribution information.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW10.TARTYPE == "R") /* Report distribution*/
    ;
    if (NF0MM001.NF0MMOPT == "15"
     || NF0MM001.NF0MMOPT == "18")
      NF0MW10.NF0MWRFO = NF0MW04.NF0MWFCF; /* Form*/
    else
      NF0MW10.NF0MWRFO = NF0MW09.NF0MWFOR; /* Form*/
    end
    NF0MW10.NF0MWRPR = NF0MW09.NF0MWJOB; /* Program*/
    ;
    TA6REC.TARTYPE[TA6INDEX] = NF0MW10.TARTYPE; /* Type*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable JOB statement information in 3 and 4.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW10.TARTYPE == "1") /* JOB statement*/
    NF0MW10.NF0MW1JO = NF0MW09.NF0MWJOB; /* Job cols 3 and 4*/
    if (NF0MM-006-REGION-SEND-FL == "Y") /* SEND TO HONG KONG*/
      if (NF0MW09.NF0MWJOB == "1091") /* OPTION 9*/
        NF0MW10.NF0MW1JO = "1092"; /* Job cols 3 and 4*/
      else
        if (NF0MW09.NF0MWJOB == "1111") /* OPTION 11*/
          NF0MW10.NF0MW1JO = "1112"; /* Job cols 3 and 4*/
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable EXEC statement information.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW10.TARTYPE == "2") /* EXEC statement*/
    if (NF0MM001.NF0MMOPT == "18")
      if (NF0MM-006-REPORT-TYPE == "1")
        NF0MW10.NF0MW2PR = "1331"; /* Procedure*/
      else
        if (NF0MM-006-REPORT-TYPE == "2")
          NF0MW10.NF0MW2PR = "1332"; /* Procedure*/
        else
          NF0MW10.NF0MW2PR = "1333"; /* Procedure*/
        end
      end
    else
      if (NF0MM001.NF0MMOPT == "09"
       && NF0MM-006-REGION-SEND-FL == "Y") /* SEND TO HONG KONG*/
        NF0MW10.NF0MW2PR = "1092"; /* Procedure*/
      else
        if (NF0MM001.NF0MMOPT == "11"
         && NF0MM-006-REGION-SEND-FL == "Y") /* SEND TO HONG KONG*/
          NF0MW10.NF0MW2PR = "1112"; /* Procedure*/
        else
          if (NF0MM001.NF0MMOPT == "11"
           && NF0MM006.SUM-BY-LINE-SW == "Y")
            NF0MW10.NF0MW2PR = "1113"; /* Procedure*/
          else
            NF0MW10.NF0MW2PR = NF0MW09.NF0MWJOB; /* Procedure*/
          end
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* FORMAT THE VARIABLE SYSOUT STATEMENT INFORMATION.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW10.TARTYPE == "3") /* SYSOUT Statement*/
    if (NF0MW09.NF0MWRP == "01") /* EHQ Printer selected*/
      NF0MW10.NF0MWRPL = "AS4"; /* Remote printer dest*/
      NF0MW10.NF0MWRP = "EHQ"; /* Remote printer dest*/
      NF0MW10.NF0MWOTQ = "TRSPRT01,"; /* Out queue*/
      ;
    else
      ;
      NF0MW10.NF0MWRPL = "RMT"; /* Remote printer dest*/
      NF0MW10.NF0MWOTQ = ","; /* Out Queue*/
      if (NF0MW09.NF0MWOC == "2") /* REMOTE PRINTER = LASER PRINTER*/
        NF0MW09.NF0MWRP = "000"; /* ADD ZERO FILLER FOR LASER*/
      end
      if (NF0MW09.NF0MWOC == "N") /* REMOTE PRINTER = LASER PRINTER*/
        NF0MW09.NF0MWRP = "000"; /* ADD ZERO FILLER FOR LASER*/
      end
      if (NF0MW09.NF0MWRP3 == " ") /* REMOTE PRINTER < 100*/
        NF0MW09.NF0MWRP3 = NF0MW09.NF0MWRP2; /* RIGHT JUSTIFY*/
        NF0MW09.NF0MWRP2 = NF0MW09.NF0MWRP1; /* RIGHT JUSTIFY*/
        NF0MW09.NF0MWRP1 = "0"; /* ADD ZERO FILLER TO FRONT*/
      end
      NF0MW10.NF0MWRP = NF0MW09.NF0MWRP; /* REMOTE PRINTER*/
    end
    NF0MW10.NF0MWOC = NF0MW09.NF0MWOC; /* OUTPUT CLASS*/
    NF0MW10.NF0MWRC = NF0MW09.NF0MWRC; /* NUMBER OF COPIES*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* FORMAT THE FORMS CODES*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW10.TARTYPE == "4") /* Forms statement*/
    NF0MW12.NF0MWFMC = NF0MW10.TARJCL; /* MOVE JCL REC TO FORMS REC*/
    if (NF0MW09.NF0MWRP != "01") /* EHQ Printer NOT Selected*/
      if (NF0MM001.NF0MMOPT == "15"
       || NF0MM001.NF0MMOPT == "18")
        NF0MW12.NF0MWFC1 = "NF"; /* Forms code lans*/
        NF0MW12.NF0MWFC2 = NF0MW04.NF0MWFCF; /* Forms code lans*/
      else
        NF0MW12.NF0MWFC1 = "NF"; /* FORMS PREFIX*/
        NF0MW12.NF0MWFC2 = NF0MW09.NF0MWFC; /* FORMS CODE*/
      end
      if (NF0MM001.NF0MMOPT == "01") /* nf1001 thru nf1008*/
        NF0MW12.NF0MWFC3 = ",FORM="; /* FORM CONSTANT*/
        NF0MW12.NF0MWFC4 = "NF"; /* FORMS PREFIX*/
        NF0MW12.NF0MWFC5 = NF0MW04.NF0MWFCG; /* FORMS CODE*/
      else
        NF0MW12.NF0MWFC3 = "      "; /* sty grp literal*/
        NF0MW12.NF0MWFC4 = "  "; /* FORMS PREFIX*/
        NF0MW12.NF0MWFC5 = "  "; /* FORMS CODE*/
      end
    else
      if (NF0MM001.NF0MMOPT == "01") /* nf1001 thru nf1008*/
        NF0MW12.NF0MWFCS = ",FORM="; /* EHQ FORMS CODES*/
      else
        NF0MW12.NF0MWFCS = "              "; /* EHQ FORMS CODES*/
      end
    end
    NF0MW10.TARJCL = NF0MW12.NF0MWFMC; /* MOVE FORMS REC TO JCL REC*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move formatted statement to the submit subroutine array.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA6REC.TARJCL[TA6INDEX] = NF0MW10.TARJCL; /* JCL statement*/
  ;
  ;
end // end NF0MS01

// set up jcl parms
Function NF0MS02()
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
  if (NF0MW04.NF0MWRIB == " ")
    NF0MW09.NF0MWRP = NF0MW04.NF0MWRIS;
  else
    NF0MW04.NF0MWPN = NF0MW04.NF0MWPIS;
    NF0MW09.NF0MWRP = NF0MW04.NF0MWPN;
  end
  NF0MW09.NF0MWRC = NF0MM004.XURCOPY;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  NF0MW09.NF0MWIXU = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
end // end NF0MS02

// Count the report options
Function NF0MS03()
  NF0MW04.NF0MWPRO = "NF0MS03";
  ;
   /* Count table entries*/
  ;
  NF0MW04.NF0MWCT3 = 1;
  NF0MW04.NF0MWDX1 = 0;
  while (NF0MT03.NF0MTDES[NF0MWCT3] != "99")
    if (NF0MTTYP[NF0MWCT3] == "D")
      NF0MW04.NF0MWDX1 = NF0MW04.NF0MWDX1 + 1;
      NF0MW04.NF0MMV[NF0MWDX1] = NF0MT03.NF0MTDES[NF0MWCT3];
    end
    NF0MW04.NF0MWCT3 = NF0MW04.NF0MWCT3 + 1;
  end
  NF0MW04.NF0MWLOW = "01"; /* low option value*/
  NF0MW04.NF0MWHI = NF0MW04.NF0MWDX1; /* high option value*/
  ;
end // end NF0MS03

//*** RECORD=NF0MW04 ****
// **************NIL common data names record *****************
// 
// This record contains many common data names used by many
// NIL applications. This is not a global working-storage
// passed to other NIL applics.  It is a second w-s record
// for an individual application .
// 
// ************************************************************
// ***********************
Record NF0MW04 type basicRecord
  10 NF0MWEOA NF0MWEOA ; 
  10 NF0MWEOS NF0MWEOS ; 
  10 NF0MWUEF NF0MWUEF ; 
  10 NF0MWERR NF0MWERR ; 
  10 NF0MWBSC NF0MWBSC ; 
  10 NF0MWSCX NF0MWSCX ; 
  10 NF0MWPRO NF0MWPRO ; 
  10 NF0MWSCR NF0MWSCR ; 
  10 NF0MWNAM NF0MWNAM [6] ; 
  10 NF0MWOPT NF0MWOPT ; 
    15 NF0MWOPN NF0MWOPN ; 
  10 NF0MWTAU NF0MWTAU ; 
  10 NF0MMV NF0MMV [50] ; 
  10 NF0MWPI NF0MWPI ; 
    15 NF0MWPIP NF0MWPIP ; 
    15 NF0MWPIS NF0MWPIS ; 
    15 NF0MWPIB NF0MWPIB ; 
  10 NF0MWPN NF0MWPN ; 
    15 NF0MWPNP NF0MWPNP ; 
    15 NF0MWPNS NF0MWPNS ; 
  10 NF0MWRI NF0MWRI ; 
    15 NF0MWRIP NF0MWRIP ; 
    15 NF0MWRIS NF0MWRIS ; 
    15 NF0MWRIB NF0MWRIB ; 
  10 NF0MWFCG NF0MWFCG ; 
  10 NF0MWFCF NF0MWFCF ; 
  10 NF0MWDX1 NF0MWDX1 ; 
  10 NF0MWDX3 NF0MWDX3 ; 
  10 NF0MWCT1 NF0MWCT1 ; 
  10 NF0MWCT2 NF0MWCT2 ; 
  10 NF0MWCT3 NF0MWCT3 ; 
  10 NF0MWINX NF0MWINX [16] ; 
  10 NF0MWSIX NF0MWSIX ; 
  10 NF0MWPIX NF0MWPIX ; 
  10 NF0MWFFL NF0MWFFL ; 
  10 NF0MWEND NF0MWEND ; 
  10 NF0MWFD1 NF0MWFD1 ; 
  10 NF0MWFD2 NF0MWFD2 ; 
  10 NF0MWLOW NF0MWLOW ; 
  10 NF0MWHI NF0MWHI ; 
    15 NF0MWHIC NF0MWHIC ; 
  10 NF0MW-04-DATA-SRC NF0MW-04-DATA-SRC ; 
end // end NF0MW04

//*** RECORD=NF0MW07 ****
// ------------------------------------------------------------
// Parameters for NF1001 - 3 Year Comparison By Style/Color
// 
// 09/17/91  jjudki  added nf0mmca
// 10/09/91  jjudki  added xurcopy
// 10/15/91  jjudki  added nf0mmep
// ------------------------------------------------------------
// ***********************
Record NF0MW07 type basicRecord
  5 TARJCL TARJCL ; 
    10 NF0MWFSB NF0MWFSB ; 
      15 NF0MWFSBCCYY NF0MWFSBCCYY ; 
      15 NF0MWFSBMM NF0MWFSBMM ; 
    10 NF0MWFSE NF0MWFSE ; 
      15 NF0MWFSECCYY NF0MWFSECCYY ; 
      15 NF0MWFSEMM NF0MWFSEMM ; 
    10 NF0MWSB NF0MWSB ; 
    10 NF0MWSE NF0MWSE ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 ZRGCD ZRGCD ; 
    10 XCTCD XCTCD ; 
    10 YSMXDV YSMXDV ; 
    10 YSMSRCVL YSMSRCVL ; 
    10 NF0MMSFL NF0MMSFL ; 
    10 NF0MMTFL NF0MMTFL ; 
    10 NF0MMCFL NF0MMCFL ; 
    10 NF0MMCOP NF0MMCOP ; 
    10 NF0MMF NF0MMF ; 
    10 NF0MMBC NF0MMBC ; 
      15 NF0MMBN NF0MMBN ; 
        20 NF0MMBNY NF0MMBNY ; 
        20 NF0MMBNM NF0MMBNM ; 
    10 NF0MMEC NF0MMEC ; 
      20 NF0MMENY NF0MMENY ; 
      20 NF0MMENM NF0MMENM ; 
    10 NF0MMD NF0MMD ; 
    10 NF0MMDD NF0MMDD ; 
    10 XPRCD XPRCD ; 
    10 NF0MMCA NF0MMCA ; 
    10 XURCOPY XURCOPY ; 
    10 NF0MMEP NF0MMEP ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 NF0MW-07-DATA-SRC NF0MW-07-DATA-SRC ; 
    10 PO-TYP-CD PO-TYP-CD ; 
    10 * char(6) ; 
end // end NF0MW07

//*** RECORD=NF0MW09 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record NF0MW09 type basicRecord
  10 NF0MWFOR NF0MWFOR ; 
  10 NF0MWJOB NF0MWJOB ; 
  10 NF0MW5JO NF0MW5JO ; 
  10 NF0MW6DI NF0MW6DI ; 
  10 NF0MMSEL NF0MMSEL [8] ; 
  10 NF0MWIXL NF0MWIXL ; 
  10 NF0MWIXM NF0MWIXM ; 
  10 NF0MWIX2 NF0MWIX2 ; 
  10 NF0MWIXU NF0MWIXU ; 
  10 NF0MWSWX NF0MWSWX ; 
  10 NF0MWDAT NF0MWDAT ; 
    15 NF0MWYY NF0MWYY ; 
    15 NF0MWMM NF0MWMM ; 
  10 NF0MWRP NF0MWRP ; 
    15 NF0MWRP1 NF0MWRP1 ; 
    15 NF0MWRP2 NF0MWRP2 ; 
    15 NF0MWRP3 NF0MWRP3 ; 
  10 NF0MWRC NF0MWRC ; 
  10 NF0MWFC NF0MWFC ; 
  10 NF0MWOC NF0MWOC ; 
  10 XURUSRNM XURUSRNM ; 
end // end NF0MW09

//*** RECORD=NF0MW10 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// 12/22/93  bschul  REORGANIZED FOR EHQ PRINTING
// ***********************
Record NF0MW10 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 NF0MW1JO NF0MW1JO ; 
      15 NF0MWRFO NF0MWRFO ; 
    10 NF0MW5JO NF0MW5JO ; 
    10 NF0MWRPR NF0MWRPR ; 
    10 * char(1) ; 
    10 NF0MW3PR NF0MW3PR ; 
    10 NF0MW2PR NF0MW2PR ; 
    10 NF0MWRPL NF0MWRPL ; 
    10 NF0MWRP NF0MWRP ; 
    10 NF0MWDFC NF0MWDFC ; 
    10 * char(6) ; 
    10 NF0MWRC NF0MWRC ; 
    10 * char(9) ; 
    10 NF0MWOC NF0MWOC ; 
    10 * char(6) ; 
    10 NF0MWOTQ NF0MWOTQ ; 
    10 * char(20) ; 
  5 TARTYPE TARTYPE ; 
end // end NF0MW10

//*** RECORD=NF0MW12 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// 12/22/93  bschul  NEW RECORD CONTAINS FORMS CODES
// ***********************
Record NF0MW12 type basicRecord
  5 NF0MWFMC NF0MWFMC ; 
    10 * char(21) ; 
    10 NF0MWFCS NF0MWFCS ; 
      15 NF0MWFC1 NF0MWFC1 ; 
      15 NF0MWFC2 NF0MWFC2 ; 
      15 NF0MWFC3 NF0MWFC3 ; 
      15 NF0MWFC4 NF0MWFC4 ; 
      15 NF0MWFC5 NF0MWFC5 ; 
    10 * char(45) ; 
end // end NF0MW12

// alpha start yymm
DataItem NF0MMBC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric start yymm
DataItem NF0MMBN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric start mm
DataItem NF0MMBNM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric start yy
DataItem NF0MMBNY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ord/fcst var level
DataItem NF0MMCA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// combine prt typ flag
DataItem NF0MMCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map1 option
DataItem NF0MMCOP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calc field
DataItem NF0MMD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calc field
DataItem NF0MMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// alpha end yymm
DataItem NF0MMEC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric end mm
DataItem NF0MMENM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric end yy
DataItem NF0MMENY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// exception %
DataItem NF0MMEP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fcst data source flag
DataItem NF0MMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem NF0MMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary rpt flag
DataItem NF0MMSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// totnil flag
DataItem NF0MMTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MMV char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MW-04-DATA-SRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MW-07-DATA-SRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification (3,4)
DataItem NF0MW1JO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem NF0MW2PR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem NF0MW3PR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification (6)
DataItem NF0MW5JO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISP data set disposition
DataItem NF0MW6DI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen (y/n)
DataItem NF0MWBSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table counter
DataItem NF0MWCT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen counter
DataItem NF0MWCT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table entries count
DataItem NF0MWCT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem NF0MWDAT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DISSEMINATOR FORMS CODE
DataItem NF0MWDFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table entries count
DataItem NF0MWDX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map build
DataItem NF0MWDX3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of scrolling flag
DataItem NF0MWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-application flag (y/n)
DataItem NF0MWEOA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-screen flag (y/n)
DataItem NF0MWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// have map error (y/n)
DataItem NF0MWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FORM ID
DataItem NF0MWFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFC3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFC4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFC5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms code lans
DataItem NF0MWFCF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms code style group
DataItem NF0MWFCG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FORM ID
DataItem NF0MWFCS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map1 fcst data source
DataItem NF0MWFD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map1 menu option
DataItem NF0MWFD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NF0MWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem NF0MWFMC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms code
DataItem NF0MWFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fall season beg date
DataItem NF0MWFSB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFSBCCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0MWFSBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fall season end date
DataItem NF0MWFSE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWFSECCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0MWFSEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high option value numberic
DataItem NF0MWHI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high option value char
DataItem NF0MWHIC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter link screen/tbl
DataItem NF0MWINX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second index for map fields
DataItem NF0MWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// limit for map fields index
DataItem NF0MWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem NF0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table fields
DataItem NF0MWIXU smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job identification
DataItem NF0MWJOB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low option value
DataItem NF0MWLOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minute
DataItem NF0MWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen name
DataItem NF0MWNAM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OUTPUT CLASS
DataItem NF0MWOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claims menu option
DataItem NF0MWOPN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OUT QUEUE
DataItem NF0MWOTQ char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID
DataItem NF0MWPI char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID BLANK
DataItem NF0MWPIB num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REMOTE PRINTER ID PREFIX
DataItem NF0MWPIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID SUFFIX
DataItem NF0MWPIS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// passed index table location
DataItem NF0MWPIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRINTER ID NUMERIC
DataItem NF0MWPN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRINTER ID SUFFIX
DataItem NF0MWPNP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRINTER ID SUFFIX
DataItem NF0MWPNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// name of current process
DataItem NF0MWPRO char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NUMBER OF COPIES
DataItem NF0MWRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution form
DataItem NF0MWRFO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID
DataItem NF0MWRI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID BLANK
DataItem NF0MWRIB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID PREFIX
DataItem NF0MWRIP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID SUFFIX
DataItem NF0MWRIS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID
DataItem NF0MWRP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWRP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWRP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWRP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0MWRPL char(3)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem NF0MWRPR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spring season beg date
DataItem NF0MWSB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// name of current screen
DataItem NF0MWSCR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen pointer
DataItem NF0MWSCX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// spring season end date
DataItem NF0MWSE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of first page save index
DataItem NF0MWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Exit requested switch
DataItem NF0MWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-uto200-userid
DataItem NF0MWTAU char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user not found
DataItem NF0MWUEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year work area
DataItem NF0MWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PO-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

