package nf0a;

import corpcom2.XX0XW01;
import corpcom2.XZCREC;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.ZZ-LDT;
import corpcom7.ZZ-LOAD-HHMM;
import corpcom7.ZZ-SETUP-HHMM;
import corpx1.XCLTBL;
import corpx1.XCT-CTRY-CD;
import corpx1.XCTTBL;
import corpx1.XDM-DIM-CD;
import corpx1.XGP-GPC-CD;
import corpx1.XLATBL;
import corpx2.XPC-PROD-CAT-CD;
import corpx2.XPL-PROD-LN-CD;
import corpz3.ZCSTBL;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import ff.common.FF-SBMT-QTB;
import ku.common.KUCREC;
import nf.common.NFWREC;
import nk.common.NK1TBL;
import nl.common.NLXREC;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=NF0A ****
// ************************************************************
// 
//   NF0A - International Short Range Transfer Log
//   -------------------------------------------------
// General program explanation and notes:
// 
//   This application will be used to:
//      Submit print jobs
//      Submit upload jobs
//      Delete headers and associated detail.
//    The approval list will be created from the short range
// country headers which previously had been uploaded from the
// AS/400 NIL Short-Range SQTB system.
// 
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 06-07-93 JJUDKI New application.
// 10-04-93 JJUDKI Remove ahowar/password from nf0at52
// 10-25-93 JJUDKI Add mvs bridge step s0030 to nf0at02, and
//                 change group/job in nf0at52.
// 10-28-93 JJUDKI Add ta0p and outclas requested by BBenson.
// 11-01-93 JJUDKI Use ta3rgnid to route prod jcl.
// 11-11-93 JJUDKI BBenson enhancements. Allow ftwr fcst group
//                to print. Use pf9,13,16 to submit/print.
//                Change map literal.
// 12-06-93 JJUDKI Print after upload.
// 06-20-94 JJUDKI MF772,773. Save details. Do not protect sel
//                field for submitted headers (to allow print
//                and deletion).
// 12-17-96 DSMITH Regenerated for yr 2000.
// 06-04-98 BMUSTI Checked for Y2K compliancy.
// 07-06-99 VANNAM Removed the FTP & INQ step to AS4NIL in
//                 NF0AT02, NF0AT04, NF0AT52, & NF0AT54 tables
// *********************
Program NF0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NF0AW01 NF0AW01; // record
  NF0AW02 NF0AW02; // record
  NF0AW03 NF0AW03; // record
  NF0AW04 NF0AW04; // record
  NF0AW05 NF0AW05; // record
  NF0AW10 NF0AW10; // record
  NF0AW99 NF0AW99; // record
  NFWREC NFWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VSRSQD01 VSRSQD01; // record
  VSRSQH01 VSRSQH01; // record
  XX0XW01 XX0XW01; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NF0AT02; // table
  use NF0AT03; // table
  use NF0AT04 {deleteAfterUse = yes}; // table
  use NF0AT52; // table
  use NF0AT53; // table
  use NF0AT54 {deleteAfterUse = yes}; // table
  use NK1TBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use NF0AM.NF0AM100, // form
  		NF0AM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NF0A-000: NF0A-000();
    exit program;
  end // end main
end // end NF0A

// Application main logic
Function NF0A-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NF0A-000";
  ;
  NF0A-001(); /* Initialize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NF0A-050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
end // end NF0A-000

// Initialize application
Function NF0A-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  NLXREC.NLXCPROC = "NF0A-001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NF0AW01 empty;
  set NF0AW02 empty;
  set NF0AW03 empty;
  set NF0AW04 empty;
  set NF0AW05 empty;
  set KUCREC empty;
  set NFWREC empty;
  set VSRSQH01 empty;
  set VSRSQD01 empty;
  ;
   /* IF COMMAREA.CAFROMAP NE 'NL0A';*/
    /* MOVE ' ' TO COMMAREA.CAUSERA;*/
    /* MOVE 32 TO NFWREC.NFW-MSG-NBR; /* Clear work area for key*/
    /* MOVE 'NL0A' TO COMMAREA.CATOAP;*/
    /* MOVE NFWREC.NFW-GROUP TO COMMAREA.CAUSERA;*/
    /* PERFORM XPNL002;*/
   /* END;*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  NF0AW-01-PF9 = "N"; /* submit upload and print report*/
  NF0AW-01-PF16 = "N"; /* submit upload w/o report*/
  ;
  NF0AS-SEC-LVL(); /* Check Security Level For User Id*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NF0AM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NF0AM100";
                                   /* init screens used in this applic.*/
  ;
   /* Call subroutine to get environment (production '03' or test)*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ALLFLDS";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
  ;
end // end NF0A-001

// Screen branch control
Function NF0A-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/
  ;
     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NF0A-050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NF0AM100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NF0A-100();
    end
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of NF0%050...*/
       /* else*/
         /* the perform will auto return to NF0%000.*/
  ;
  ;
end // end NF0A-050

// SHORT RANGE TRANSFER LOG
Function NF0A-100()
   /* -----------------------------------------------------------*/
       /* Process screen NF0AM100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NF0A050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NF0A-100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NF0A-101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NF0AM100 ;
  ;
  NF0AM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NF0A-110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NF0A-120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NF0A-130(); /* determine next action...*/
  end
  ;
  ;
end // end NF0A-100

// Build screen
Function NF0A-101()
   /* **************************************/
   /* Build MAP NF0AM100                 **/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NF0A-101";
  ;
  converseLib.clearScreen();
  set NF0AM100 initial;
  ;
  NF0AM100.XXXRVNBR = "00"; /* revision nbr*/
  NF0AM100.XXXMAPNM = "NF0AM100"; /* map name*/
  NF0AM100.XXXPRCNM = "NF0A-100"; /* process name*/
   /* Bgn tcs*/
   /* MOVE EZEDTE TO NF0AM100.XXXCURDT;/* system date*/
  XX0XS01();
  NF0AM100.XXXCURDT = XX0XW01.XX0XWDAT; /* system date*/
   /* end tcs*/
  ;
  NF0AW02.NF0AW-02-XCT-CTRY-CD-HLD = 0; /* Previous QTB Id*/
  NF0AW02.NF0AW-02-LCNT = 0; /* Screen Line Count*/
  NF0AW02.NF0AW-02-CCNT = 0; /* Total QTB Count*/
  NF0AW02.NF0AW-02-XCT-CTRY-CD = 0; /* Previous QTB Id*/
  NF0AW02.NF0AW-02-PCNT = 1; /* Screen Page Count*/
  NF0AW02.NF0AW-02-DX1 = 1;
  ;
  NF0AW-02-W05SIZE = 984; /* Temp Storage Size For Map100*/
  if (NF0AW-02-NEXT-PAGE-NBR == 0) /* Current Page Number*/
    NF0AW-02-NEXT-PAGE-NBR = 1;
  end
  NF0AW-02-INDEX = 0;
  ;
  NF0AS-DEL-TMP-STG(); /* Delete temp storage prior to writing*/
  ;
  NF0AS-S1-VSRSQH01(); /* Select Correct Cursor*/
  ;
  if (NLXERRF != "Y")
    while (SQLCA.VAGen_SQLCODE == 0)
      NF0AS-N1-VSRSQH01(); /* Fetch All QTB Into Temp Storage*/
      if (SQLCA.VAGen_SQLCODE == 0)
        NF0AS-BLD-TMP-STG(); /* Load QTB Hdr Info Temp Storage*/
      end
    end
    NF0AS-C1-VSRSQH01(); /* Close QTB Header Cursor*/
  end
  ;
  if (NF0AW-02-INDEX > 0)
    NF0AS-ADD-TMP-STG();
  end
  ;
  NF0AM100.NF0AM-100-TO-PAGE = NF0AW-02-HIGH-PAGE-NBR;
  ;
   /* Load Screen Of QTB*/
  set NF0AW05 empty;
  if (NF0AW-02-HIGH-PAGE-NBR > 0
   && NF0AW-02-NEXT-PAGE-NBR <= NF0AW-02-HIGH-PAGE-NBR)
    NF0AS-GET-TMP-STG();
  end
  ;
  NF0AS-LOAD-MAP();
  ;
  NF0AW02.NF0AW-02-NOT = "NOTE: ";
  NF0AW02.NF0AW-02-REM = " QTB HAVE BEEN SELECTED ";
  NF0AM100.VAGen_EZEMSG = NF0AW02.NF0AW-02-MSG;
  ;
  ;
  NF0AM100.NF0AM-100-FM-PAGE = NF0AW-02-NEXT-PAGE-NBR;
  NF0AM100.NF0AM-100-TO-PAGE = NF0AW-02-HIGH-PAGE-NBR;
  ;
  ;
end // end NF0A-101

// Validate PF keys; act on some
Function NF0A-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
     /* Active PF keys: 1, 3, 7, 8, 9, 13, 16, 20*/
   /* -----------------------------------------------------------*/
  NLXREC.NLXCPROC = "NF0A-110";
  set NF0AM100.CATOAP initialAttributes;
  set NF0AM100.CAITEM initialAttributes;
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter /* Process Headers*/
   || converseVar.eventKey is pf1   /* Help*/
   || converseVar.eventKey is pf3   /* Return To NF0A*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8   /* Page Forward*/
   || converseVar.eventKey is pf9   /* Print then upload*/
   || converseVar.eventKey is pf13  /* Print only*/
   || converseVar.eventKey is pf16  /* Upload only*/
   || converseVar.eventKey is pf20) /* Xfer to NL0A*/
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
    converseLib.validationFailed(2); /* Invalid PF Key Used*/
    return;
  end
  ;
  if (NF0AM100.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      NF0AS-DEL-TMP-STG(); /* Purge Temp Storage Before Exit*/
      COMMAREA.CATOAP = NF0AM100.CATOAP;
      COMMAREA.CAITEM = NF0AM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      NLXREC.NLXEOSF = "Y";
      COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* Print then upload*/
    NF0AW-01-ATTN-KEY = "PF9";
  else
    if (converseVar.eventKey is pf13) /* Print only*/
      NF0AW-01-ATTN-KEY = "PF13";
    else
      if (converseVar.eventKey is pf16) /* Upload only*/
        NF0AW-01-ATTN-KEY = "PF16";
      end
    end
  end
  ;
  if (converseVar.eventKey is enter /* Valid Non-transfer PF Keys*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8   /* Page Forward*/
   || converseVar.eventKey is pf9   /* Print then upload*/
   || converseVar.eventKey is pf13  /* Print only*/
   || converseVar.eventKey is pf16) /* Upload only*/
    return;
  end
  ;
  if (converseVar.eventKey is pf1 /* Help*/
   || converseVar.eventKey is pf3 /* Return To NL0A*/
   || converseVar.eventKey is pf20) /* Xfer to NL0A*/
    NF0AS-DEL-TMP-STG(); /* Purge Temp Storage Before Exit*/
  end
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* go to previous appl*/
    COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
    COMMAREA.CAFROMAP = "NL0A"; /* Go To NF0A Map200 Selection List*/
    COMMAREA.CAUSERA = NFWREC.NFW-GROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf20)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
  ;
      /* pf key not valid*/
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NF0A-110

// Edit/Act on function keys
Function NF0A-120()
   /* *****************************************************/
   /* Edit QTBs Screen Entries*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NF0A-120";
  ;
  NF0AW-02-HSF = "  ";
  converseLib.validationFailed(0);
  ;
  NF0AW02.NF0AW-02-INDEX = 14; /* Initialize screen*/
  while (NF0AW02.NF0AW-02-INDEX > 0)
    if (NF0AM100.NF0AM-100-ZZ-LDT[NF0AW-02-INDEX] != "         ") /* Uploaded*/
      if (NF0AW-01-ATTN-KEY == "PF9"
       || NF0AW-01-ATTN-KEY == "PF16")
        /* SET NF0AM100.NF0AM-100-SEL(NF0AW-02-INDEX) AUTOSKIP,DARK;*/
      end
    else
      set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] normal;
    end
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX - 1;
  end
  ;
  set NF0AM100.NF0AM-100-FM-PAGE normal;
  if (NF0AW-02-SL == "N")
    set NF0AM100.NF0AM-100-SEL[1] cursor;
  end
  ;
  NF0AW-02-INDEX = 14; /* Edit screen in reverse order...*/
  while (NF0AW02.NF0AW-02-INDEX > 0) /* For all screen entries*/
    if (NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == "S") /* Selected*/
      if (converseVar.eventKey is pf9
       && CAALVL[1] == "N")
        NLXERRF = "Y";
        set NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold;
        converseLib.validationFailed(418); /* not permitted to upload*/
      else
        if (converseVar.eventKey is pf16
         && CAALVL[1] == "N")
          NLXERRF = "Y";
          set NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold;
          converseLib.validationFailed(418); /* not permitted to upload*/
        else
          if (converseVar.eventKey is pf13
           && CACLVL[1] == "N")
            NLXERRF = "Y";
            set NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold;
            converseLib.validationFailed(419); /* not permitted to print*/
          else
            if (converseVar.eventKey not pf9
             && converseVar.eventKey not pf13
             && converseVar.eventKey not pf16)
              if (converseVar.eventKey not pf7
               && converseVar.eventKey not pf8)
                NLXERRF = "Y";
                set NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold;
                converseLib.validationFailed(420); /* must use pf9,13,16 with "S"*/
              end
            end
          end
        end
      end
    else
      if (NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == " " /* Not selected*/
       || NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == "D" 
       || NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == "S" 
       || NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == "V")
        NF0AW-05-SEL[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX];
        NF0AW-05-EZEMNO[NF0AW-02-INDEX] = 0;
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(404); /* Must Be s or d*/
        NF0AW-05-EZEMNO[NF0AW-02-INDEX] = 404;
        set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold, modified;
      end
    end
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX - 1; /* Decrement*/
  end
  ;
   /* Make Sure User Entered Page Is Within Correct Range*/
  if (NF0AM100.NF0AM-100-FM-PAGE < 1
   || NF0AM100.NF0AM-100-FM-PAGE > NF0AW-02-HIGH-PAGE-NBR)
    converseLib.validationFailed(296); /* Page Number Out Of Range*/
    set NF0AM100.NF0AM-100-FM-PAGE cursor, bold;
    NLXREC.NLXERRF = "Y";
  end
  ;
end // end NF0A-120

// Determine next action
Function NF0A-130()
  ;
  NLXREC.NLXCPROC = "NF0A-130";
  ;
  converseLib.validationFailed(0);
  set NF0AW05 empty;
   /* Move Current Map Fields To TEMP STORAGE*/
  NF0AW02.NF0AW-02-INDEX = 1;
   /* MOVE 14 TO NF0AW02.NF0AW-02-INDEX;*/
  while (NF0AW02.NF0AW-02-INDEX < 15)
    /* WHILE NF0AW02.NF0AW-02-INDEX GT 0;*/
    NF0AW-05-KUCCOID[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-KUCCOID[NF0AW-02-INDEX];
    NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
    NF0AW-05-SEL[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX];
    if (NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] == " ")
      NF0AW-05-EZEMNO[NF0AW-02-INDEX] = 0;
    end
    NF0AW-05-XCT-CTRY-CD[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-XCT-CTRY-CD[NF0AW-02-INDEX];
    NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-ZZ-LDT[NF0AW-02-INDEX];
    NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-ZZ-LOAD-HHMM[NF0AW-02-INDEX];
    NF0AW-05-ZZ-SDT[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-ZZ-SDT[NF0AW-02-INDEX];
    NF0AW-05-ZZ-SETUP-HHMM[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-ZZ-SETUP-HHMM[NF0AW-02-INDEX];
    NF0AW-05-FF-SBMT-QTB[NF0AW-02-INDEX] = NF0AM100.NF0AM-100-FF-SBMT-QTB[NF0AW-02-INDEX];
    if (NF0AW-05-XCT-CTRY-CD[NF0AW-02-INDEX] != 0)
      NF0AW-02-XCT-CTRY-CD-HLD = NF0AW-05-XCT-CTRY-CD[NF0AW-02-INDEX];
    end
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX + 1;
    /* NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX - 1;*/
  end
  ;
  NF0AS-UPDT-TMP-STG(); /* Update Temp Storage With Map Changes*/
  ;
  if (converseVar.eventKey is pf7) /* Page Backward*/
    if (NF0AW-02-NEXT-PAGE-NBR == 1)
      NF0AS-LOAD-MAP();
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(29); /* Already At Top*/
    else
      NF0AW-02-NEXT-PAGE-NBR = NF0AW-02-NEXT-PAGE-NBR - 1;
      NF0AS-LOAD-MAP();
    end
  end
  ;
  if (converseVar.eventKey is pf8) /* Page Forward*/
    set NF0AW05 empty;
    NF0AW-02-PPG = NF0AW-02-NEXT-PAGE-NBR + 1;
    if (NF0AW-02-PPG > NF0AW-02-HIGH-PAGE-NBR)
      NF0AS-LOAD-MAP();
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(30); /* Already At Bottom*/
    else
      NF0AW-02-NEXT-PAGE-NBR = NF0AW-02-NEXT-PAGE-NBR + 1;
      NF0AS-LOAD-MAP();
    end
  end
  ;
  if (converseVar.eventKey is enter)
    if (NF0AM100.NF0AM-100-FM-PAGE is modified)
      if (NF0AM100.NF0AM-100-FM-PAGE < 1
       || NF0AM100.NF0AM-100-FM-PAGE > NF0AM100.NF0AM-100-TO-PAGE)
        NLXREC.NLXERRF = "Y";
        set NF0AM100.NF0AM-100-FM-PAGE cursor, bold;
        converseLib.validationFailed(296); /* Entered Page Is Out Of Range*/
        return;
      else
        NF0AW-02-NEXT-PAGE-NBR = NF0AM100.NF0AM-100-FM-PAGE;
        NF0AS-LOAD-MAP();
      end
    else
      NF0AS-SELECTED(); /* Find First Selected Non-Viewed QTB*/
    end
  end
  ;
  if (converseVar.eventKey is pf9 /* print then upload*/
   || converseVar.eventKey is pf16) /* upload only*/
    NF0AW02.NF0AW-02-INDEX = 1;
    while (NF0AW02.NF0AW-02-INDEX < 15)
      if (NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] > "     "
       && NF0AW-05-SEL[NF0AW-02-INDEX] == "S")
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(428); /* Cannot submit again*/
        set NF0AM-100-SEL[NF0AW-02-INDEX] cursor, bold;
      end
      NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX + 1;
    end
    if (NLXERRF == "Y")
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* print then upload*/
    if (NF0AW-01-PF9 == "Y")
      NF0AS-SELECTED(); /* Find First Selected Non-Viewed QTB*/
      NF0AW-01-PF9 = "N";
    else
      NF0AS-LOAD-MAP();
      converseLib.validationFailed(421);
      NLXERRF = "Y";
      NF0AW-01-PF9 = "Y";
      NF0AW-01-PF16 = "N"; /* User changed upload option*/
    end
  end
  ;
  if (converseVar.eventKey is pf13) /* print only*/
    NF0AS-SELECTED(); /* Find First Selected Non-Viewed QTB*/
  end
  ;
  if (converseVar.eventKey is pf16) /* upload only*/
    if (NF0AW-01-PF16 == "Y")
      NF0AS-SELECTED(); /* Find First Selected Non-Viewed QTB*/
      NF0AW-01-PF16 = "N";
    else
      NF0AS-LOAD-MAP();
      converseLib.validationFailed(422);
      NLXERRF = "Y";
      NF0AW-01-PF16 = "Y";
      NF0AW-01-PF9 = "N"; /* User changed upload option*/
    end
  end
  ;
  if (converseVar.eventKey not pf16 /* upload only*/
   && converseVar.eventKey not pf9) /* print then upload*/
    NF0AW-01-PF16 = "N";
    NF0AW-01-PF9 = "N";
  end
  ;
  ;
  ;
end // end NF0A-130

// Add temp storage
Function NF0AS-ADD-TMP-STG()
   /* ***********************************************************************/
   /* Write temp storage*/
   /* ***********************************************************************/
  NLXREC.NLXCPROC = "NF0AS-ADD-TMP-STG";
  move NF0AW-02-W05SIZE to NF0AW-05-LENGTH withV60Compat;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (NF0AW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    NF0AW-02-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return to previous process*/
  else
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    converseLib.validationFailed(299); /* Indicate system error*/
    XPNL-006(); /* abend routine*/
  end
  ;
end // end NF0AS-ADD-TMP-STG

// FORMAT TA6REC
Function NF0AS-BLD-TA6REC()
  ;
   /* MOVE 'NF0AS-BLD-TA6REC ' TO NLXREC.NLXCPROC;*/
  ;
   /* *********************************************************/
   /* Format the variable areas of the JCL statement.*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* If error occurred, report to the error diagnosis facility.*/
   /* Indicate the job was submitted when end of file is written.*/
   /* 1.  J = job control card*/
   /* 2.  N = notify card*/
   /* 3.  O = report format information and number of copies*/
   /* 4.  U = UCC7 interface*/
   /* 5.  P = Parameter card for the JCL*/
   /* *********************************************************/
  ;
  if (NF0AW-01-TTYP == "P") /* Parameter statement*/
    NF0AW-01-ALPHA = "       ";
    NF0AW-01-PR2 = "       ";
    NF0AW-01-NUMERIC = 0;
    NF0AW-01-NUMERIC = NF0AW-05-KUCCOID[NF0AW-02-INDEX];
    move NF0AW-01-NUMERIC to NF0AW-01-CU-CO-ID withV60Compat;
    ;
    NF0AW-01-ALPHA = "    ";
    NF0AW-01-NUMERIC = 0;
    /* MOVE NF0AW-05-FF-MAIN-BUY-MO(NF0AW-02-INDEX) TO NF0AW-01-ALPHA-4;*/
    /* MOVE NF0AW-01-NUMERIC-4 TO NF0AW-01-NUMERIC;*/
    /* MOVE NF0AW-01-NUMERIC TO NF0AW-01-FF-MAIN-BUY-MO;*/
    NF0AW-02-PDA = 0;
    NF0AW-02-BM = NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
    /* bgn tcs*/
    /* MOVE 19 TO NF0AW-02-PYY;*/
    if (NF0AW-02-BM-YY < 57)
      NF0AW-02-PYY = 20;
    else
      NF0AW-02-PYY = 19;
    end
    /* end tcs*/

    move NF0AW-02-BM-YY to NF0AW-02-PMM withV60Compat;
    move NF0AW-02-BM-MM to NF0AW-02-PDD withV60Compat;
    move NF0AW-02-PDA to NF0AW-01-FF-MAIN-BUY-MO withV60Compat;
    ;
    TA6REC.TARJCL[NF0AW-01-SUB] = NF0AW-01-PR2; /* PARM*/
    TA6REC.TARTYPE[NF0AW-01-SUB] = NF0AW-01-TTYP;
  else
    if (NF0AW-01-TTYP == "3")
      /* MOVE NF0AW-53-JCL(NF0AW-01-SUB) TO NF0AW10.TARJCL;*/
      if (TA0PM001.XURDEST == "LOCAL")
        NF0AW-10-RP = "RMT000";
      else
        NF0AW-01-RPT = TA0PM001.XURDEST;
        if (NF0AW-01-RPT3 == " ")
          move NF0AW-01-RPT2 to NF0AW-01-RPT2-RED-N withV60Compat;
          move NF0AW-01-RPT1 to NF0AW-01-RPT-RED-A withV60Compat;
          move NF0AW-01-RPT-RED to NF0AW-10-RP withV60Compat;
        else
          move NF0AW-01-RPT to NF0AW-10-RP withV60Compat;
        end
      end
      if (TA0PM001.XURDEST == "LOCAL")
        NF0AW-10-DFC = "N";
      else
        if (TA3RGNID == "03")
          NF0AW-10-DFC = "P";
        else
          NF0AW-10-DFC = "T";
        end
      end
      TA6REC.TARJCL[NF0AW-01-SUB] = NF0AW10.TARJCL;
      TA6REC.TARTYPE[NF0AW-01-SUB] = NF0AW-01-TTYP;
      ;
    else
      TA6REC.TARJCL[NF0AW-01-SUB] = NF0AW-99-JCL;
      TA6REC.TARTYPE[NF0AW-01-SUB] = NF0AW-01-TTYP;
    end
  end
  ;
  if (NF0AW-99-JCL == "/*EOF") /* End of file*/
    NF0AW-01-FL3 = "Y"; /* Indicate end of table*/
  end
  ;
  ;
end // end NF0AS-BLD-TA6REC

// Build VSRSQH01 temp storage
Function NF0AS-BLD-TMP-STG()
   /* ***********************************************************************/
   /* Build temp storage*/
   /* ***********************************************************************/
  NLXREC.NLXCPROC = "NF0AS-BLD-TMP-STG";
  NF0AW-02-INDEX = NF0AW-02-INDEX + 1; /* M100 display storage*/
  NF0AW-05-UPD-FL[NF0AW-02-INDEX] = "N";
  NF0AW-05-SEL[NF0AW-02-INDEX] = " ";
  NF0AW-05-KUCCOID[NF0AW-02-INDEX] = VSRSQH01.CU-CO-ID;
  NF0AW-05-XCT-CTRY-CD[NF0AW-02-INDEX] = VSRSQH01.XCT-CTRY-CD;
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  if (VSRSQH01.FF-MAIN-BUY-MO > 0) /* buy month*/
    NF0AW02.NF0AW-02-PDA = VSRSQH01.FF-MAIN-BUY-MO;
    NF0AW02.NF0AW-02-BM-YY = NF0AW02.NF0AW-02-PMM;
    NF0AW02.NF0AW-02-BM-MM = NF0AW02.NF0AW-02-PDD;
    NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX] = NF0AW02.NF0AW-02-BM;
  end
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  if (VSRSQH01.ZZ-LDT > 0) /* load date*/
    NF0AW02.NF0AW-02-PDA = VSRSQH01.ZZ-LDT;
    NF0AW02.NF0AW-02-PRY = NF0AW02.NF0AW-02-PYY;
    NF0AW02.NF0AW-02-PRM = NF0AW02.NF0AW-02-PMM;
    NF0AW02.NF0AW-02-PRD = NF0AW02.NF0AW-02-PDD;
    NF0AW02.NF0AW-02-PS1 = "-";
    NF0AW02.NF0AW-02-PS2 = "-";
    NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = NF0AW02.NF0AW-02-PDT;
  end
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  if (VSRSQH01.ZZ-SDT > 0) /* setup date*/
    NF0AW02.NF0AW-02-PDA = VSRSQH01.ZZ-SDT;
    NF0AW02.NF0AW-02-PRY = NF0AW02.NF0AW-02-PYY;
    NF0AW02.NF0AW-02-PRM = NF0AW02.NF0AW-02-PMM;
    NF0AW02.NF0AW-02-PRD = NF0AW02.NF0AW-02-PDD;
    NF0AW02.NF0AW-02-PS1 = "-";
    NF0AW02.NF0AW-02-PS2 = "-";
    NF0AW-05-ZZ-SDT[NF0AW-02-INDEX] = NF0AW02.NF0AW-02-PDT;
  end
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  ;
  if (VSRSQH01.ZZ-SETUP-HHMM > 0) /* setup time*/
    NF0AW02.NF0AW-02-PDA = VSRSQH01.ZZ-SETUP-HHMM;
    NF0AW02.NF0AW-02-PRM = NF0AW02.NF0AW-02-PMM;
    NF0AW02.NF0AW-02-PRD = NF0AW02.NF0AW-02-PDD;
    NF0AW02.NF0AW-02-PS1 = ":";
    NF0AW-05-ZZ-SETUP-HHMM[NF0AW-02-INDEX] = NF0AW02.NF0AW-02-PDT;
  end
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  ;
  if (VSRSQH01.ZZ-LOAD-HHMM > 0)
    NF0AW02.NF0AW-02-PDA = VSRSQH01.ZZ-LOAD-HHMM;
    NF0AW02.NF0AW-02-PRM = NF0AW02.NF0AW-02-PMM;
    NF0AW02.NF0AW-02-PRD = NF0AW02.NF0AW-02-PDD;
    NF0AW02.NF0AW-02-PS1 = ":";
    NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AW02.NF0AW-02-PDT;
  end
  ;
  NF0AW-02-PDA = 0;
  NF0AW-02-PDT = "         ";
  ;
  NF0AW-02-QTB-NUM = 0;
  NF0AW-02-QTB-ALPHA = "              ";
  NF0AW-02-QTB-NUM = VSRSQH01.FF-SBMT-QTB;
  if (NF0AW-02-QTB-TN > 0)
    move NF0AW-02-QTB-TN to NF0AW-02-QTB-WRK withV60Compat;
    if (NF0AW-02-QTB-WRK1 == 0)
      NF0AW-02-QTB-WRK1 = "  ";
    end
    if (NF0AW-02-QTB-WRK2 == 0
     && NF0AW-02-QTB-WRK1 == " ")
      NF0AW-02-QTB-WRK2 = "  ";
    end
    move NF0AW-02-QTB-WRK to NF0AW-02-QTB-TA withV60Compat;
    NF0AW-02-QTB-PS1 = ",";
  else
    NF0AW-02-QTB-TA = "   ";
  end
  if (NF0AW-02-QTB-TN != 0
   && NF0AW-02-QTB-HN == 0)
    move NF0AW-02-QTB-HN to NF0AW-02-QTB-WRK withV60Compat;
    move NF0AW-02-QTB-WRK to NF0AW-02-QTB-HA withV60Compat;
    NF0AW-02-QTB-PS2 = ",";
  else
    if (NF0AW-02-QTB-HN > 0)
      move NF0AW-02-QTB-HN to NF0AW-02-QTB-WRK withV60Compat;
      if (NF0AW-02-QTB-WRK1 == 0
       && NF0AW-02-QTB-TN == 0)
        NF0AW-02-QTB-WRK1 = "  ";
      end
      if (NF0AW-02-QTB-WRK2 == 0
       && NF0AW-02-QTB-WRK1 == " ")
        NF0AW-02-QTB-WRK2 = "  ";
      end
      move NF0AW-02-QTB-WRK to NF0AW-02-QTB-HA withV60Compat;
      NF0AW-02-QTB-PS2 = ",";
    else
      NF0AW-02-QTB-HA = "   ";
    end
  end
  if (NF0AW-02-QTB-TN == 0
   && NF0AW-02-QTB-HN == 0)
    move NF0AW-02-QTB-DN to NF0AW-02-QTB-WRK withV60Compat;
    if (NF0AW-02-QTB-WRK1 == 0)
      NF0AW-02-QTB-WRK1 = "  ";
    end
    if (NF0AW-02-QTB-WRK2 == 0
     && NF0AW-02-QTB-WRK1 == " ")
      NF0AW-02-QTB-WRK2 = "  ";
    end
    move NF0AW-02-QTB-WRK to NF0AW-02-QTB-DA withV60Compat;
  else
    move NF0AW-02-QTB-DN to NF0AW-02-QTB-DA withV60Compat;
  end
  NF0AW-05-FF-SBMT-QTB[NF0AW-02-INDEX] = NF0AW-02-QTB-ALPHA;
  ;
  NF0AW-05-ZZZCHGCT = VSRSQH01.ZZ-CHNG-CNT;
  ;
  NF0AW-05-PAGE[NF0AW-02-INDEX] = NF0AW-02-NEXT-PAGE-NBR;
  NF0AW-05-PREV-XCT-CTRY-CD[NF0AW-02-INDEX] = VSRSQH01.XCT-CTRY-CD;
  NF0AW-02-XCT-CTRY-CD = VSRSQH01.XCT-CTRY-CD;
  NF0AW-02-CCNT = NF0AW-02-CCNT + 1;
  ;
  NF0AW-05-PREV-XCT-CTRY-CD[NF0AW-02-INDEX] = NF0AW-02-XCT-CTRY-CD-HLD;
  ;
  if (NF0AW-02-INDEX == 14)
    NF0AW-02-XCT-CTRY-CD-HLD = VSRSQH01.XCT-CTRY-CD;
    NF0AS-ADD-TMP-STG();
    set NF0AW05 empty;
    NF0AW-02-INDEX = 0;
    NF0AW-02-XCT-CTRY-CD = 0;
  end
  ;
  ;
end // end NF0AS-BLD-TMP-STG

// Close VSRSQH01 cursor
Function NF0AS-C1-VSRSQH01()
  ;
  NLXREC.NLXCPROC = "NF0AS-CLOSE-VSRSQH01";
  NF0AW03.NF0AW-03-IO-TASK = NF0AW-02-IO-CLOSE;
   /* Close cursor for QTB header*/
  call "IO6750" ("C1", SQLCA, VSRSQH01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = NF0AW-02-CLOSE-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6750 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VSRSQH01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NF0AS-C1-VSRSQH01

// Delete VSRSQD01 Row
Function NF0AS-D-VSRSQD01()
  ;
  NLXREC.NLXCPROC = "NF0AS-D-VSRSQD01";
  ;
   /* Build Key For Detail To Be Deleted*/
  set VSRSQD01 empty;
   /* MOVE NF0AM-100-KUCCOID(NF0AW-02-INDEX) TO VSRSQD01.CU-CO-ID;*/
  VSRSQD01.CU-CO-ID = NF0AW-05-KUCCOID[NF0AW-02-INDEX];
  ;
  NF0AW-02-PDT = "        ";
  NF0AW-02-PDA = 0;
   /* MOVE NF0AM-100-FF-MAIN-BUY-MO(NF0AW-02-INDEX) TO NF0AW-02-BM;*/
  NF0AW-02-BM = NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
   /* Bgn tcs*/
   /* MOVE 19 TO NF0AW-02-PYY;*/
  if (NF0AW-02-BM-YY < 57)
    NF0AW-02-PYY = 20;
  else
    NF0AW-02-PYY = 19;
  end
   /* End tcs*/
  move NF0AW-02-BM-YY to NF0AW-02-PMM withV60Compat;
  move NF0AW-02-BM-MM to NF0AW-02-PDD withV60Compat;
  VSRSQD01.FF-MAIN-BUY-MO = NF0AW-02-PDA;
  ;
  call "IO6760" ("D ", SQLCA, VSRSQD01) {isNoRefresh = yes, isExternal = yes}; /* Delete*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        /* MOVE 408 TO EZEMNO;        /* Not Valid buy hdr*/
      else
        NF0AW-01-LIT1 = "CU: ";
        NF0AW-01-CUST = VSRSQH01.CU-CO-ID;
        NF0AW-01-LIT2 = " BUY:";
        NF0AW-01-BUYMO = VSRSQH01.FF-MAIN-BUY-MO;
        TA1REC.TA1TBLKE = NF0AW-01-KEY;
        TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO6760 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VSRSQD01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
  ;
end // end NF0AS-D-VSRSQD01

// Delete VSRSQH01 Row
Function NF0AS-D-VSRSQH01()
  ;
  NLXREC.NLXCPROC = "NF0AS-D-VSRSQH01";
  ;
   /* Build Key For Header To Be Deleted*/
  set VSRSQH01 empty;
   /* MOVE NF0AM-100-KUCCOID(NF0AW-02-INDEX) TO VSRSQH01.CU-CO-ID;*/
  VSRSQH01.CU-CO-ID = NF0AW-05-KUCCOID[NF0AW-02-INDEX];
  ;
  NF0AW-02-PDT = "        ";
  NF0AW-02-PDA = 0;
   /* MOVE NF0AM-100-FF-MAIN-BUY-MO(NF0AW-02-INDEX) TO NF0AW-02-BM;*/
  NF0AW-02-BM = NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
   /* Bgn tcs*/
   /* MOVE 19 TO NF0AW-02-PYY;*/
  if (NF0AW-02-BM-YY < 57)
    NF0AW-02-PYY = 20;
  else
    NF0AW-02-PYY = 19;
  end
   /* End tcs*/
  move NF0AW-02-BM-YY to NF0AW-02-PMM withV60Compat;
  move NF0AW-02-BM-MM to NF0AW-02-PDD withV60Compat;
  VSRSQH01.FF-MAIN-BUY-MO = NF0AW-02-PDA;
  ;
  call "IO6750" ("D ", SQLCA, VSRSQH01) {isNoRefresh = yes, isExternal = yes}; /* Delete*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
      /* ELSE;*/
      /* IF SQLCA.SQLCODE EQ 100;*/
       /* MOVE 408 TO EZEMNO;        /* Not Valid buy hdr*/
    else
      NF0AW-01-LIT1 = "CU: ";
      NF0AW-01-CUST = VSRSQH01.CU-CO-ID;
      NF0AW-01-LIT2 = " BUY:";
      NF0AW-01-BUYMO = VSRSQH01.FF-MAIN-BUY-MO;
      TA1REC.TA1TBLKE = NF0AW-01-KEY;
      TA1REC.TA1LOCAT[2] = "D      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "IO6750 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO "; /* data base*/
      TA1REC.TA1TBLVU = "VSRSQH01"; /* table view*/
      XPNL005(); /* abend routine*/
      /* END;*/
    end
  end
  ;
  ;
end // end NF0AS-D-VSRSQH01

// PURGE TEMP STORAGE
Function NF0AS-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /* ***********************************************************************/
  NLXREC.NLXCPROC = "NF0AS-DEL-TMP-STG";
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  try
    call "TA0050" (NF0AW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NF0AS-DEL-TMP-STG

// Get m100 temp storage
Function NF0AS-GET-TMP-STG()
   /* ***********************************************************************/
   /* Get temp storage for current page*/
   /* ***********************************************************************/
  NLXREC.NLXCPROC = "NF0AS-GET-TMP-STG";
  TA1REC.TA1LOC = "NF0AS-GET-TMP-STG";
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  move NF0AW-02-W05SIZE to NF0AW-05-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NF0AW-02-NEXT-PAGE-NBR; /* Page number to fetch*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  try
    call "TA0050" (NF0AW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    converseLib.validationFailed(299); /* Indicate system error*/
    XPNL-006(); /* abend routine*/
  end
  ;
end // end NF0AS-GET-TMP-STG

// Load Map From Array
Function NF0AS-LOAD-MAP()
  ;
  NLXREC.NLXCPROC = "NF0AS-LOAD-MAP";
  ;
  set NF0AW05 empty;
  converseLib.validationFailed(0);
  ;
  if (NF0AW-02-HIGH-PAGE-NBR > 0
   && NF0AW-02-NEXT-PAGE-NBR <= NF0AW-02-HIGH-PAGE-NBR)
    NF0AS-GET-TMP-STG();
  end
  ;
  NF0AW-02-INDEX = 1;
  while (NF0AW-02-INDEX < 15)
    set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] initialAttributes; /* <<WAS NORMAL*/
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX + 1;
  end
  set NF0AM100.CAITEM normal;
  set NF0AM100.CATOAP cursor, normal;
  ;
  NF0AW-02-INDEX = 1;
  while (NF0AW-02-INDEX < 15)
    NF0AS-SET-LIT();
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX + 1;
  end
  ;
  NF0AW-02-INDEX = 14;
  while (NF0AW02.NF0AW-02-INDEX > 0)
    NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] = NF0AW-05-SEL[NF0AW-02-INDEX];
    /* IF NF0AW-05-ZZ-LDT(NF0AW-02-INDEX) GT '        '*/
     /* OR NF0AW-05-ZZ-LDT(NF0AW-02-INDEX) EQ 'UPL SENT'*/
    if (NF0AW-05-KUCCOID[NF0AW-02-INDEX] == 0)
      /* IF NF0AW-05-ZZ-LDT(NF0AW-02-INDEX) NE 'PRT SENT';*/
      set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] skip, invisible;
      /* END;*/
    else
      if (NF0AW-02-SL == "Y")
        set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] cursor, initialAttributes;
      end /* <<CURSOR*/
    end
    ;
    if (NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] == "UPL SENT"
     || NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] == "PRT SENT")
      NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = "       ";
      NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = "      ";
    end
    ;
    NF0AM100.NF0AM-100-XCT-CTRY-CD[NF0AW-02-INDEX] = NF0AW-05-XCT-CTRY-CD[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-KUCCOID[NF0AW-02-INDEX] = NF0AW-05-KUCCOID[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-FF-MAIN-BUY-MO[NF0AW-02-INDEX] = NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-ZZ-LDT[NF0AW-02-INDEX] = NF0AW-05-ZZ-LDT[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-ZZ-SDT[NF0AW-02-INDEX] = NF0AW-05-ZZ-SDT[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-FF-SBMT-QTB[NF0AW-02-INDEX] = NF0AW-05-FF-SBMT-QTB[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX];
    NF0AM100.NF0AM-100-ZZ-SETUP-HHMM[NF0AW-02-INDEX] = NF0AW-05-ZZ-SETUP-HHMM[NF0AW-02-INDEX];
    ;
    NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX - 1;
  end
  ;
  if (NF0AW-02-SL == "N")
    NF0AW-02-INDEX = 14;
    while (NF0AW02.NF0AW-02-INDEX > 0)
      set NF0AM100.NF0AM-100-SEL[NF0AW-02-INDEX] skip, invisible;
      NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX - 1;
    end
  end
  ;
  NF0AM100.NF0AM-100-FM-PAGE = NF0AW-02-NEXT-PAGE-NBR;
  ;
  ;
end // end NF0AS-LOAD-MAP

// Build screen
Function NF0AS-LOAD-TMP-STG()
  ;
  NLXREC.NLXCPROC = "NF0AS-LOAD-TMP-STG";
  ;
  NF0AW-02-INDEX = 0;
  NF0AS-DEL-TMP-STG(); /* Delete temp storage prior to writing*/
  ;
  set NF0AW05 empty;
  ;
  NF0AS-S1-VSRSQH01(); /* Select Correct Cursor*/
  if (NLXERRF != "Y")
    while (SQLCA.VAGen_SQLCODE == 0)
      NF0AS-N1-VSRSQH01(); /* Fetch All QTB Into Temp Storage*/
      if (SQLCA.VAGen_SQLCODE == 0)
        NF0AS-BLD-TMP-STG(); /* Load QTB Hdr Info Temp Storage*/
      end
    end
    NF0AS-C1-VSRSQH01(); /* Close QTB Header Cursor*/
  end
  if (NF0AW-02-INDEX > 0)
    NF0AS-ADD-TMP-STG();
  end
  ;
   /* MOVE NF0AW-02-HIGH-PAGE-NBR TO NF0AM100.NF0AM-100-TO-PAGE;*/
  ;
  ;
  ;
end // end NF0AS-LOAD-TMP-STG

// Fetch next VSRSQH01 row
Function NF0AS-N1-VSRSQH01()
  ;
  NLXREC.NLXCPROC = "NF0AS-N1-HDR";
   /* read cursor -*/
   /* SET NF0AW04 EMPTY;*/
  set VSRSQH01 empty;
   /* format key for invoice header table*/
  NF0AW03.NF0AW-03-IO-TASK = NF0AW-02-IO-FETCH;
   /* Read cursor for QTB header*/
   /* CALL IO6750 NF0AW03,SQLCA,NF0AW04 (NOMAPS,NONCSP;*/
  call "IO6750" ("N1", SQLCA, VSRSQH01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    NF0AW-01-LIT1 = "CU: ";
    NF0AW-01-CUST = VSRSQH01.CU-CO-ID;
    NF0AW-01-LIT2 = " BUY:";
    NF0AW-01-BUYMO = VSRSQH01.FF-MAIN-BUY-MO;
    NF0AW-01-LIT3 = " CNT:";
    NF0AW-01-CNT = VSRSQH01.ZZ-CHNG-CNT;
    TA1REC.TA1TBLKE = NF0AW-01-KEY;
    TA1REC.TA1LOCAT[3] = "IO6750 "; /* io module*/
    TA1REC.TA1LOCAT[2] = NF0AW-02-FETCH-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6750 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VSRSQH01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NF0AS-N1-VSRSQH01

// Submit Production Job
Function NF0AS-PROD-SUBMIT()
   /* *****************************************************/
   /* Submit Print Or Upload Job*/
   /* *****************************************************/
  NLXREC.NLXCPROC = "NF0AS-PROD-SUBMIT   ";
  ;
  NF0AW01.NF0AW-01-FL3 = "N"; /* the end of process flag*/
  NF0AW01.NF0AW-01-SUB = 1; /* set table index to 1*/
  TA6REC.TA6ROW = " ";
  ;
  while (NF0AW01.NF0AW-01-FL3 == "N" /* process a job stream table*/
   && NF0AW01.NF0AW-01-ERR == "N")
    if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S")
      if (NF0AW-01-ATTN-KEY == "PF9")
        NF0AW10.TARJCL = NF0AW-02-JCL[NF0AW-01-SUB];
        NF0AW99.NF0AW-99-JCL = NF0AT02.NF0AW-02-JCL[NF0AW-01-SUB]; /* jcl*/
        NF0AW01.NF0AW-01-TTYP = NF0AT02.NF0AW-02-TTYP[NF0AW-01-SUB]; /* type*/
      else
        if (NF0AW-01-ATTN-KEY == "PF16")
          NF0AW10.TARJCL = NF0AW-04-JCL[NF0AW-01-SUB];
          NF0AW99.NF0AW-99-JCL = NF0AT04.NF0AW-04-JCL[NF0AW-01-SUB]; /* jcl*/
          NF0AW01.NF0AW-01-TTYP = NF0AT04.NF0AW-04-TTYP[NF0AW-01-SUB]; /* type*/
        else
          if (NF0AW-01-ATTN-KEY == "PF13")
            NF0AW10.TARJCL = NF0AW-03-JCL[NF0AW-01-SUB];
            NF0AW99.NF0AW-99-JCL = NF0AT03.NF0AW-03-JCL[NF0AW-01-SUB]; /* jcl*/
            NF0AW01.NF0AW-01-TTYP = NF0AT03.NF0AW-03-TTYP[NF0AW-01-SUB]; /* type*/
          end
        end
      end
    end
    NF0AS-BLD-TA6REC(); /* MOVE JCL TO TA6REC*/
    NF0AW-01-SUB = NF0AW-01-SUB + 1; /* increment table index*/
  end
  ;
  NF0AS-SUBMIT-JCL(); /* SUBMIT JCL VIA TAOP*/
  ;
  ;
end // end NF0AS-PROD-SUBMIT

// declare VSRSQH01 cursor
Function NF0AS-S1-VSRSQH01()
  ;
  NLXREC.NLXCPROC = "NF0AS-S1-HDR";
   /* declare and read cursor -*/
  set VSRSQH01 empty;
   /* format key for QTBs Header table*/
  NF0AW-02-IO-CURSOR = "S1"; /* Build QTBs Selection List*/
  NF0AW-02-IO-FETCH = "N1";
  NF0AW-02-IO-CLOSE = "C1";
  NF0AW-02-OPEN-ACTION = "OPEN SELECTION LIST ";
  NF0AW-02-FETCH-ACTION = "FETCH SELECTION LIST ";
  NF0AW-02-CLOSE-ACTION = "CLOSE SELECTION LIST ";
   /* declare cursor for QTB header*/
  NF0AW03.NF0AW-03-IO-TASK = NF0AW-02-IO-CURSOR;
  ;
  call "IO6750" ("S1", SQLCA, VSRSQH01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    NF0AW-01-LIT1 = "CU: ";
    NF0AW-01-CUST = VSRSQH01.CU-CO-ID;
    NF0AW-01-LIT2 = " BUY:";
    NF0AW-01-BUYMO = VSRSQH01.FF-MAIN-BUY-MO;
    NF0AW-01-LIT3 = " CNT:";
    NF0AW-01-CNT = VSRSQH01.ZZ-CHNG-CNT;
    TA1REC.TA1TBLKE = NF0AW-01-KEY;
    TA1REC.TA1LOCAT[2] = NF0AW-02-OPEN-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6750 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VSRSQH01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NF0AS-S1-VSRSQH01

// Check Security Lvl For User Id
Function NF0AS-SEC-LVL()
  ;
  NLXREC.NLXCPROC = "NF0AS-SEC-LVL";
  ;
  if (COMMAREA.CAADDFL == "Y"
   || COMMAREA.CACHGFL == "Y"
   || COMMAREA.CADELFL == "Y")
    NF0AW02.NF0AW-02-SL = "Y";
  else
    NF0AW02.NF0AW-02-SL = "N";
  end
  ;
  ;
end // end NF0AS-SEC-LVL

// View Selected VSRSQH01
Function NF0AS-SELECTED()
  ;
  NLXREC.NLXCPROC = "NF0AS-SELECTED";
  ;
   /* Edit Temp Storage Rows From First Page Down To Last*/
  NF0AW-02-END = "N"; /* Selected QTB Found Switch*/
  NF0AW-02-UFL = "N"; /* Update Flag*/
  NF0AW-01-ERR = "N"; /* Error Flag*/
  move NF0AW-02-NEXT-PAGE-NBR to NF0AW-02-SUB withV60Compat; /* Save Current Page Number*/
  NF0AW-02-NEXT-PAGE-NBR = 1; /* Start At First Page For Search*/
  while (NF0AW-02-NEXT-PAGE-NBR <= NF0AW-02-HIGH-PAGE-NBR)
    set NF0AW05 empty;
    NF0AS-GET-TMP-STG();
    NF0AW-02-INDEX = 1;
    while (NF0AW02.NF0AW-02-INDEX <= 14)
      if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S"
       || NF0AW-05-SEL[NF0AW-02-INDEX] == "D")
       /* MOVE NF0AW-05-SEL(NF0AW-02-INDEX) TO NF0AW-02-HSF;*/
        NF0AW-02-END = "Y"; /* Selected QTB Found Switch*/
        NF0AS-SET-UPLOAD();
      end
      NF0AW02.NF0AW-02-INDEX = NF0AW02.NF0AW-02-INDEX + 1;
    end
   /* IF NF0AW-02-HSF NE 'D';*/
    NF0AS-UPDT-TMP-STG();
   /* END;*/
    NF0AW-02-NEXT-PAGE-NBR = NF0AW-02-NEXT-PAGE-NBR + 1;
  end
  ;
  move NF0AW-02-SUB to NF0AW-02-NEXT-PAGE-NBR withV60Compat; /* Restore Current Page Number*/
  ;
  NF0AS-LOAD-TMP-STG();
  NF0AS-LOAD-MAP();
  ;
  if (NF0AW-02-END == "N"
   && NF0AW-02-HSF != "D")
    NLXERRF = "Y";
    converseLib.validationFailed(209); /* no selection made*/
  end
  ;
  ;
end // end NF0AS-SELECTED

// Track Selected cu-co-id/hhmm
Function NF0AS-SET-LIT()
  ;
  NLXREC.NLXCPROC = "NF0AS-SET-LIT";
  ;
  NF0AW-02-IDX = 1;
  while (NF0AW-02-IDX <= 100
   && NF0AW-01-TBL-CU-CO-ID[NF0AW-02-IDX] > 0)
    if (NF0AW-05-KUCCOID[NF0AW-02-INDEX] == 
    NF0AW-01-TBL-CU-CO-ID[NF0AW-02-IDX]
     && NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX] == 
    NF0AW-01-TBL-FF-MAIN-BUY-MO[NF0AW-02-IDX])
      if (NF0AW-01-TBL-SEL[NF0AW-02-IDX] == "S")
        if (NF0AW-01-ATTN-KEY == "PF9"
         || NF0AW-01-ATTN-KEY == "PF16")
          if (NF0AW-01-PF9 == "Y"
           || NF0AW-01-PF16 == "Y")
            /* MOVE 'UPL SENT' TO NF0AW-05-ZZ-LDT(NF0AW-02-INDEX);*/
            XX0XS01();
            NF0AW-02-PDT = "        ";
            NF0AW-02-PDA = 0;
            NF0AW-02-PDA = XX0XW01.XX0XWDAT;
            /* MOVE 19 TO NF0AW-02-PCC;*/
            move NF0AW-02-PYY to NF0AW-02-PRY withV60Compat;
            move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
            move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
            NF0AW-02-PS1 = "-";
            NF0AW-02-PS2 = "-";
            NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = NF0AW-02-PDT;
            ;
            NF0AW-02-PDT = "        ";
            NF0AW-02-PDA = 0;
            NF0AW-02-PDA = XX0XW01.XX0XWTIM;
            /* MOVE 19 TO NF0AW-02-PCC;*/
            move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
            move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
            NF0AW-02-PS1 = ":";
            NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AW-02-PDT;
            /* ELSE;*/
            /* IF NF0AW-01-ATTN-KEY EQ 'PF16'*/
            /* AND NF0AW-01-PF16 EQ 'Y';*/
            /* MOVE 'UPL SENT' TO NF0AW-05-ZZ-LDT(NF0AW-02-INDEX);*/
            /* ELSE;*/
            /* IF NF0AW-01-ATTN-KEY EQ 'PF13';*/
             /* MOVE 'PRT SENT' TO NF0AW-05-ZZ-LDT(NF0AW-02-INDEX);*/
            /* END;*/
            /* END;*/
          end
        end
      end
      NF0AW-02-IDX = 101;
      /* MOVE 'V' TO NF0AW-05-SEL(NF0AW-02-INDEX);*/
      ;
    else
      NF0AW-02-IDX = NF0AW-02-IDX + 1;
    end
  end
  ;
  ;
  ;
end // end NF0AS-SET-LIT

// Track Selected cu-co-id/hhmm
Function NF0AS-SET-UPLOAD()
  ;
  NLXREC.NLXCPROC = "NF0AS-SET-UPLOAD";
  ;
  NF0AW-02-IDX = 1;
  ;
  while (NF0AW-02-IDX <= 100)
    if (NF0AW-05-KUCCOID[NF0AW-02-INDEX] == 
    NF0AW-01-TBL-CU-CO-ID[NF0AW-02-IDX]
     && NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX] == 
    NF0AW-01-TBL-FF-MAIN-BUY-MO[NF0AW-02-IDX])
      /* IF NF0AW-05-SEL(NF0AW-02-INDEX) EQ 'P';*/
       /* NF0AS-SUBMIT;*/
      /* END;*/
      if (NF0AW-01-ATTN-KEY == "PF13")
        NF0AS-SUBMIT();
      end
      if (NF0AW-05-SEL[NF0AW-02-INDEX] != 
      NF0AW-01-TBL-SEL[NF0AW-02-IDX])
        if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S")
          ;
          if (converseVar.eventKey is pf9 /* upload*/
           || converseVar.eventKey is pf16) /* upload*/
            XX0XS01();
            NF0AW-02-PDT = "        ";
            NF0AW-02-PDA = 0;
            NF0AW-02-PDA = XX0XW01.XX0XWDAT;
            /* bgn tcs*/
            /* MOVE 19 TO NF0AW-02-PCC;*/
            /* end tcs*/
            move NF0AW-02-PYY to NF0AW-02-PRY withV60Compat;
            move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
            move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
            NF0AW-02-PS1 = "-";
            NF0AW-02-PS2 = "-";
            NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = NF0AW-02-PDT;
            ;
            NF0AW-02-PDT = "        ";
            NF0AW-02-PDA = 0;
            NF0AW-02-PDA = XX0XW01.XX0XWTIM;
            /* bgn tcs*/
            /* MOVE 19 TO NF0AW-02-PCC;*/
            /* end tcs*/
            move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
            move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
            NF0AW-02-PS1 = ":";
            NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AW-02-PDT;
          end
          NF0AS-SUBMIT();
        else
          if (NF0AW-05-SEL[NF0AW-02-INDEX] == "D")
            NF0AS-D-VSRSQD01();
            NF0AS-D-VSRSQH01();
            NF0AW-02-HSF = "D";
          end
        end
      end
      NF0AW-01-TBL-SEL[NF0AW-02-IDX] = NF0AW-05-SEL[NF0AW-02-INDEX];
      /* MOVE 'V' TO NF0AW-05-SEL(NF0AW-02-INDEX);*/
      NF0AW-02-IDX = 101;
      ;
    else
      if (NF0AW-01-TBL-CU-CO-ID[NF0AW-02-IDX] == 0)
        if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S"
         && converseVar.eventKey not pf13) /* not print only*/
          XX0XS01();
          NF0AW-02-PDT = "        ";
          NF0AW-02-PDA = 0;
          NF0AW-02-PDA = XX0XW01.XX0XWDAT;
          /* bgn tcs*/
          /* MOVE 19 TO NF0AW-02-PCC;*/
          /* end tcs*/
          move NF0AW-02-PYY to NF0AW-02-PRY withV60Compat;
          move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
          move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
          NF0AW-02-PS1 = "-";
          NF0AW-02-PS2 = "-";
          NF0AW-05-ZZ-LDT[NF0AW-02-INDEX] = NF0AW-02-PDT;
          ;
          NF0AW-02-PDT = "        ";
          NF0AW-02-PDA = 0;
          NF0AW-02-PDA = XX0XW01.XX0XWTIM;
          /* bgn tcs*/
          /* MOVE 19 TO NF0AW-02-PCC;*/
          /* end tcs*/
          move NF0AW-02-PMM to NF0AW-02-PRM withV60Compat;
          move NF0AW-02-PDD to NF0AW-02-PRD withV60Compat;
          NF0AW-02-PS1 = ":";
          NF0AW-05-ZZ-LOAD-HHMM[NF0AW-02-INDEX] = NF0AW-02-PDT;
        end
        ;
        NF0AW-01-TBL-CU-CO-ID[NF0AW-02-IDX] = NF0AW-05-KUCCOID[NF0AW-02-INDEX];
        NF0AW-01-TBL-FF-MAIN-BUY-MO[NF0AW-02-IDX] = NF0AW-05-FF-MAIN-BUY-MO[NF0AW-02-INDEX];
        NF0AW-01-TBL-SEL[NF0AW-02-IDX] = NF0AW-05-SEL[NF0AW-02-INDEX];
        NF0AW-02-IDX = 101;
        ;
        if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S")
          NF0AS-SUBMIT();
        else
          if (NF0AW-05-SEL[NF0AW-02-INDEX] == "D")
            NF0AS-D-VSRSQD01();
            NF0AS-D-VSRSQH01();
            NF0AW-02-HSF = "D";
          end
        end
        /* MOVE 'V' TO NF0AW-05-SEL(NF0AW-02-INDEX);*/
        ;
      else
        NF0AW-02-IDX = NF0AW-02-IDX + 1;
      end
    end
  end
  ;
  ;
end // end NF0AS-SET-UPLOAD

// Submit Print Or Upload Job
Function NF0AS-SUBMIT()
   /* *****************************************************/
   /* Submit Print Or Upload Job*/
   /* *****************************************************/
  NLXREC.NLXCPROC = "NF0AS-SUBMIT   ";
  ;
  set TA6REC empty;
  ;
  TA6REC.TA6SUBSW = "N"; /* show map only*/
  ;
  if (NF0AW-01-ATTN-KEY == "PF9"
   || NF0AW-01-ATTN-KEY == "PF13")
    XPTA0P();
  end
  ;
  if (TA3REC.TA3RGNID == "03") /* Production region*/
    NF0AS-PROD-SUBMIT();
  else
    NF0AS-TEST-SUBMIT();
  end
  ;
  ;
end // end NF0AS-SUBMIT

// FORMAT JCL FOR TA0P
Function NF0AS-SUBMIT-JCL()
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
   /* MOVE 'N' TO TA6REC.TA6MSGSW;      /* EOJ online message switch*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* SUBMIT JCL FOR BACKGROUND JOB*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
   /* MOVE 'NF0AS-SUBMIT-JCL' TO NIWREC.XXXMODID   ; Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    TA1REC.TA1LOCAT[1] = "NF0AS-SUBMIT-JCL ";
    TA1REC.TA1LOCAT[2] = "TA0P    ";
    TA1REC.TA1LOCAT[3] = "RTN CD -";
    TA1REC.TA1LOCAT[4] = TA6REC.TA6RTNCD;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1PGMNM = "NF0A ";
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA);
     /* MOVE XX TO EZEMNO             ; Unexpected error occurred*/
    ;
  end
  ;
end // end NF0AS-SUBMIT-JCL

// Submit Test Job
Function NF0AS-TEST-SUBMIT()
   /* *****************************************************/
   /* Submit Print Or Upload Job*/
   /* *****************************************************/
  NLXREC.NLXCPROC = "NF0AS-TEST-SUBMIT   ";
  ;
  NF0AW01.NF0AW-01-FL3 = "N"; /* the end of process flag*/
  NF0AW01.NF0AW-01-SUB = 1; /* set table index to 1*/
  TA6REC.TA6ROW = " ";
  ;
  while (NF0AW01.NF0AW-01-FL3 == "N" /* process a job stream table*/
   && NF0AW01.NF0AW-01-ERR == "N")
    if (NF0AW-05-SEL[NF0AW-02-INDEX] == "S")
      if (NF0AW-01-ATTN-KEY == "PF9")
        NF0AW10.TARJCL = NF0AW-52-JCL[NF0AW-01-SUB];
        NF0AW99.NF0AW-99-JCL = NF0AT52.NF0AW-52-JCL[NF0AW-01-SUB]; /* jcl*/
        NF0AW01.NF0AW-01-TTYP = NF0AT52.NF0AW-52-TTYP[NF0AW-01-SUB]; /* rec*/
      else
        if (NF0AW-01-ATTN-KEY == "PF16")
          NF0AW10.TARJCL = NF0AW-54-JCL[NF0AW-01-SUB];
          NF0AW99.NF0AW-99-JCL = NF0AT54.NF0AW-54-JCL[NF0AW-01-SUB]; /* jcl*/
          NF0AW01.NF0AW-01-TTYP = NF0AT54.NF0AW-54-TTYP[NF0AW-01-SUB]; /* rec*/
        else
          if (NF0AW-01-ATTN-KEY == "PF13")
            NF0AW10.TARJCL = NF0AW-53-JCL[NF0AW-01-SUB];
            NF0AW99.NF0AW-99-JCL = NF0AT53.NF0AW-53-JCL[NF0AW-01-SUB]; /* jcl*/
            NF0AW01.NF0AW-01-TTYP = NF0AT53.NF0AW-53-TTYP[NF0AW-01-SUB]; /* rec*/
          end
        end
      end
    end
    NF0AS-BLD-TA6REC(); /* MOVE JCL TO TA6REC*/
    NF0AW-01-SUB = NF0AW-01-SUB + 1; /* increment table index*/
  end
  ;
  NF0AS-SUBMIT-JCL(); /* SUBMIT JCL VIA TAOP*/
  ;
  ;
end // end NF0AS-TEST-SUBMIT

// UPDATE TEMP STORAGE
Function NF0AS-UPDT-TMP-STG()
   /* ***********************************************************************/
   /* Update Temp Storage*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NF0AS-UPDT-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  move NF0AW-02-W05SIZE to NF0AW-05-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NF0AW-02-NEXT-PAGE-NBR;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  try
    call "TA0050" (NF0AW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  converseLib.validationFailed(299); /* Indicate system error*/
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NF0AS-UPDT-TMP-STG

//*** RECORD=NF0AW01 ****
// Working storage for NF0A - short range buy
// ***********************
Record NF0AW01 type basicRecord
  5 NF0AW-01-GRP NF0AW-01-GRP ; 
    10 NF0AW-01-TMX NF0AW-01-TMX ; 
    10 NF0AW-01-TOP NF0AW-01-TOP ; 
    10 NF0AW-01-UID NF0AW-01-UID ; 
    10 NF0AW-01-PR1 NF0AW-01-PR1 ; 
      15 NF0AW-01-SHP NF0AW-01-SHP ; 
      15 NF0AW-01-1CU NF0AW-01-1CU ; 
      15 NF0AW-01-1NO NF0AW-01-1NO ; 
      15 NF0AW-01-TY1 NF0AW-01-TY1 ; 
      15 * char(59) ; 
    10 NF0AW-01-PR2 NF0AW-01-PR2 ; 
      15 NF0AW-01-CU-CO-ID NF0AW-01-CU-CO-ID ; 
      15 NF0AW-01-FF-MAIN-BUY-MO NF0AW-01-FF-MAIN-BUY-MO ; 
      15 * char(62) ; 
    10 NF0AW-01-CPY NF0AW-01-CPY ; 
    10 NF0AW-01-XSOPDEST NF0AW-01-XSOPDEST ; 
    10 NF0AW-01-TTYP NF0AW-01-TTYP ; 
    10 NF0AW-01-TSPC NF0AW-01-TSPC ; 
    10 NF0AW-01-SWK NF0AW-01-SWK ; 
    10 NF0AW-01-F17 NF0AW-01-F17 ; 
    10 NF0AW-01-CAF NF0AW-01-CAF ; 
    10 NF0AW-01-RP2 NF0AW-01-RP2 ; 
    10 NF0AW-01-NBR NF0AW-01-NBR ; 
      15 NF0AW-01-NB1 NF0AW-01-NB1 ; 
      15 NF0AW-01-NB2 NF0AW-01-NB2 ; 
    10 NF0AW-01-SCH NF0AW-01-SCH ; 
    10 NF0AW-01-TA3APLID NF0AW-01-TA3APLID ; 
      15 * char(5) ; 
      15 NF0AW-01-REG NF0AW-01-REG ; 
      15 * char(1) ; 
    10 NF0AW-01-ERR NF0AW-01-ERR ; 
    10 NF0AW-01-SUB NF0AW-01-SUB ; 
    10 NF0AW-01-FL3 NF0AW-01-FL3 ; 
    10 NF0AW-01-XXXNBRCY NF0AW-01-XXXNBRCY ; 
    10 NF0AW-01-ALPHA NF0AW-01-ALPHA ; 
      15 NF0AW-01-NUMERIC NF0AW-01-NUMERIC ; 
    10 NF0AW-01-ALPHA-4 NF0AW-01-ALPHA-4 ; 
      15 NF0AW-01-NUMERIC-4 NF0AW-01-NUMERIC-4 ; 
    10 NF0AW-01-KEY NF0AW-01-KEY ; 
      15 NF0AW-01-LIT1 NF0AW-01-LIT1 ; 
      15 NF0AW-01-CUST NF0AW-01-CUST ; 
      15 NF0AW-01-LIT2 NF0AW-01-LIT2 ; 
      15 NF0AW-01-BUYMO NF0AW-01-BUYMO ; 
      15 NF0AW-01-LIT3 NF0AW-01-LIT3 ; 
      15 NF0AW-01-CNT NF0AW-01-CNT ; 
    10 NF0AW-01-TBL NF0AW-01-TBL ; 
      15 NF0AW-01-TBL-SEL NF0AW-01-TBL-SEL [100] ; 
      15 NF0AW-01-TBL-CU-CO-ID NF0AW-01-TBL-CU-CO-ID [100] ; 
      15 NF0AW-01-TBL-FF-MAIN-BUY-MO NF0AW-01-TBL-FF-MAIN-BUY-MO [100] ; 
    10 * char(1) ; 
    10 NF0AW-01-RPT NF0AW-01-RPT ; 
      15 NF0AW-01-RPT1 NF0AW-01-RPT1 ; 
      15 NF0AW-01-RPT2 NF0AW-01-RPT2 ; 
      15 NF0AW-01-RPT3 NF0AW-01-RPT3 ; 
    10 NF0AW-01-RPT-RED NF0AW-01-RPT-RED ; 
      15 NF0AW-01-RPT-RED-A NF0AW-01-RPT-RED-A ; 
      15 NF0AW-01-RPT2-RED-N NF0AW-01-RPT2-RED-N ; 
    10 NF0AW-01-ATTN-KEY NF0AW-01-ATTN-KEY ; 
    10 NF0AW-01-PF9 NF0AW-01-PF9 ; 
    10 NF0AW-01-PF16 NF0AW-01-PF16 ; 
end // end NF0AW01

//*** RECORD=NF0AW02 ****
// This is the main working storage record for NF0A.
// ***********************
Record NF0AW02 type basicRecord
  5 NF0AW-02-INDEX NF0AW-02-INDEX ; 
  5 NF0AW-02-LENGTH NF0AW-02-LENGTH ; 
  5 NF0AW-02-W05SIZE NF0AW-02-W05SIZE ; 
  5 NF0AW-02-NEXT-PAGE-NBR NF0AW-02-NEXT-PAGE-NBR ; 
  5 NF0AW-02-HIGH-PAGE-NBR NF0AW-02-HIGH-PAGE-NBR ; 
  5 NF0AW-02-INQ NF0AW-02-INQ ; 
  5 NF0AW-02-PCT NF0AW-02-PCT ; 
  5 NF0AW-02-ICT NF0AW-02-ICT ; 
  5 NF0AW-02-LCNT NF0AW-02-LCNT ; 
  5 NF0AW-02-PCNT NF0AW-02-PCNT ; 
  5 NF0AW-02-PHLD NF0AW-02-PHLD ; 
  5 NF0AW-02-EPG NF0AW-02-EPG ; 
  5 NF0AW-02-IDX NF0AW-02-IDX ; 
  5 NF0AW-02-LDX NF0AW-02-LDX ; 
  5 NF0AW-02-SCX NF0AW-02-SCX ; 
  5 NF0AW-02-PPG NF0AW-02-PPG ; 
  5 NF0AW-02-IO-CURSOR NF0AW-02-IO-CURSOR ; 
  5 NF0AW-02-IO-FETCH NF0AW-02-IO-FETCH ; 
  5 NF0AW-02-IO-CLOSE NF0AW-02-IO-CLOSE ; 
  5 NF0AW-02-OPEN-ACTION NF0AW-02-OPEN-ACTION ; 
  5 NF0AW-02-FETCH-ACTION NF0AW-02-FETCH-ACTION ; 
  5 NF0AW-02-CLOSE-ACTION NF0AW-02-CLOSE-ACTION ; 
  5 NF0AW-02-KUCCOID-ALPHA NF0AW-02-KUCCOID-ALPHA ; 
    10 NF0AW-02-KUCCOID-NUM NF0AW-02-KUCCOID-NUM ; 
  5 NF0AW-02-XCT-CTRY-CD NF0AW-02-XCT-CTRY-CD ; 
  5 NF0AW-02-XCT-CTRY-CD-HLD NF0AW-02-XCT-CTRY-CD-HLD ; 
  5 NF0AW-02-SL NF0AW-02-SL ; 
  5 NF0AW-02-HSF NF0AW-02-HSF ; 
  5 NF0AW-02-UFL NF0AW-02-UFL ; 
  5 NF0AW-02-PDF NF0AW-02-PDF ; 
  5 NF0AW-02-IPG NF0AW-02-IPG ; 
  5 NF0AW-02-IDF NF0AW-02-IDF ; 
  5 NF0AW-02-IER NF0AW-02-IER ; 
  5 NF0AW-02-NER NF0AW-02-NER ; 
  5 NF0AW-02-PER NF0AW-02-PER ; 
  5 NF0AW-02-ORD NF0AW-02-ORD ; 
    10 NF0AW-02-FIL NF0AW-02-FIL ; 
    10 NF0AW-02-PTN NF0AW-02-PTN ; 
  5 NF0AW-02-COS NF0AW-02-COS ; 
  5 NF0AW-02-SMS NF0AW-02-SMS ; 
  5 NF0AW-02-SCF NF0AW-02-SCF ; 
  5 NF0AW-02-PUW NF0AW-02-PUW ; 
  5 NF0AW-02-EXT NF0AW-02-EXT ; 
  5 NF0AW-02-SUB NF0AW-02-SUB ; 
  5 NF0AW-02-DAT NF0AW-02-DAT ; 
    10 NF0AW-02-MON NF0AW-02-MON ; 
    10 NF0AW-02-DAY NF0AW-02-DAY ; 
    10 NF0AW-02-YER NF0AW-02-YER ; 
  5 NF0AW-02-DT9 NF0AW-02-DT9 ; 
    10 NF0AW-02-CEN NF0AW-02-CEN ; 
    10 NF0AW-02-YR9 NF0AW-02-YR9 ; 
    10 NF0AW-02-MN9 NF0AW-02-MN9 ; 
    10 NF0AW-02-DY9 NF0AW-02-DY9 ; 
  5 NF0AW-02-END NF0AW-02-END ; 
  5 NF0AW-02-ONE NF0AW-02-ONE ; 
  5 NF0AW-02-SQCE NF0AW-02-SQCE ; 
  5 NF0AW-02-W1X NF0AW-02-W1X ; 
  5 NF0AW-02-DX1 NF0AW-02-DX1 ; 
  5 NF0AW-02-DX2 NF0AW-02-DX2 ; 
  5 NF0AW-02-DX3 NF0AW-02-DX3 ; 
  5 NF0AW-02-MSG NF0AW-02-MSG ; 
    10 NF0AW-02-NOT NF0AW-02-NOT ; 
    10 NF0AW-02-CCNT NF0AW-02-CCNT ; 
    10 NF0AW-02-REM NF0AW-02-REM ; 
  5 NF0AW-02-PDA NF0AW-02-PDA ; 
    10 NF0AW-02-PCC NF0AW-02-PCC ; 
    10 NF0AW-02-PYY NF0AW-02-PYY ; 
    10 NF0AW-02-PMM NF0AW-02-PMM ; 
    10 NF0AW-02-PDD NF0AW-02-PDD ; 
  5 NF0AW-02-PDT NF0AW-02-PDT ; 
    10 NF0AW-02-PRM NF0AW-02-PRM ; 
    10 NF0AW-02-PS1 NF0AW-02-PS1 ; 
    10 NF0AW-02-PRD NF0AW-02-PRD ; 
    10 NF0AW-02-PS2 NF0AW-02-PS2 ; 
    10 NF0AW-02-PRY NF0AW-02-PRY ; 
  5 NF0AW-02-QTB-NUM NF0AW-02-QTB-NUM ; 
    10 NF0AW-02-QTB-MN NF0AW-02-QTB-MN ; 
    10 NF0AW-02-QTB-TN NF0AW-02-QTB-TN ; 
    10 NF0AW-02-QTB-HN NF0AW-02-QTB-HN ; 
    10 NF0AW-02-QTB-DN NF0AW-02-QTB-DN ; 
  5 NF0AW-02-QTB-ALPHA NF0AW-02-QTB-ALPHA ; 
    10 NF0AW-02-QTB-TA NF0AW-02-QTB-TA ; 
    10 NF0AW-02-QTB-PS1 NF0AW-02-QTB-PS1 ; 
    10 NF0AW-02-QTB-HA NF0AW-02-QTB-HA ; 
    10 NF0AW-02-QTB-PS2 NF0AW-02-QTB-PS2 ; 
    10 NF0AW-02-QTB-DA NF0AW-02-QTB-DA ; 
  5 NF0AW-02-QTB-WRK NF0AW-02-QTB-WRK ; 
    10 NF0AW-02-QTB-WRK1 NF0AW-02-QTB-WRK1 ; 
    10 NF0AW-02-QTB-WRK2 NF0AW-02-QTB-WRK2 ; 
    10 NF0AW-02-QTB-WRK3 NF0AW-02-QTB-WRK3 ; 
  5 NF0AW-02-BM NF0AW-02-BM ; 
    10 NF0AW-02-BM-YY NF0AW-02-BM-YY ; 
    10 NF0AW-02-BM-MM NF0AW-02-BM-MM ; 
  5 NF0AW-02-HC NF0AW-02-HC ; 
  5 NF0AW-02-HB NF0AW-02-HB ; 
end // end NF0AW02

//*** RECORD=NF0AW03 ****
// ******  International Short-Range Transfer Log *************
// 
// This record will be used by IO Mod io6750 to pass the I-O
// task, and the key ranges.
// 
// Maintenance Log:
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 06-07-93  JJUDKI     Initial Creation.
// ***********************
Record NF0AW03 type basicRecord
  5 NF0AW-03-GROUP NF0AW-03-GROUP ; 
    10 NF0AW-03-IO-TASK NF0AW-03-IO-TASK ; 
    10 NF0AW-03-KUCCOID NF0AW-03-KUCCOID ; 
    10 NF0AW-03-FF-MAIN-BUY-MO NF0AW-03-FF-MAIN-BUY-MO ; 
    10 NF0AW-03-XCT-CTRY-CD NF0AW-03-XCT-CTRY-CD ; 
    10 NF0AW-03-FF-SBMT-QTB NF0AW-03-FF-SBMT-QTB ; 
    10 NF0AW-03-ZZ-LDT NF0AW-03-ZZ-LDT ; 
    10 NF0AW-03-ZZ-LOAD-HHMM NF0AW-03-ZZ-LOAD-HHMM ; 
    10 NF0AW-03-ZZ-SDT NF0AW-03-ZZ-SDT ; 
    10 NF0AW-03-ZZ-SETUP-HHMM NF0AW-03-ZZ-SETUP-HHMM ; 
    10 NF0AW-03-ZZ-CHNG-DT NF0AW-03-ZZ-CHNG-DT ; 
    10 NF0AW-03-ZZ-CHNG-HHMM NF0AW-03-ZZ-CHNG-HHMM ; 
    10 NF0AW-03-ZZ-CHNG-CNT NF0AW-03-ZZ-CHNG-CNT ; 
end // end NF0AW03

//*** RECORD=NF0AW04 ****
// ******  International SHORT RANGE TRANSFER LOG  ************
// 
// This record will be used by IO Mod IO6750 to return the data
// base record for dnilo.vsrsqh01.
// 
// Maintenance Log:
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 06-07-93  jjudki     Initial Creation.
// ***********************
Record NF0AW04 type basicRecord
  5 NF0AW-04-GROUP NF0AW-04-GROUP ; 
    10 NF0AW-04-KUCCOID NF0AW-04-KUCCOID ; 
    10 NF0AW-04-FF-MAIN-BUY-MO NF0AW-04-FF-MAIN-BUY-MO ; 
    10 NF0AW-04-XCT-CTRY-CD NF0AW-04-XCT-CTRY-CD ; 
    10 NF0AW-04-FF-SBMT-QTB NF0AW-04-FF-SBMT-QTB ; 
    10 NF0AW-04-ZZ-LDT NF0AW-04-ZZ-LDT ; 
    10 NF0AW-04-ZZ-LOAD-HHMM NF0AW-04-ZZ-LOAD-HHMM ; 
    10 NF0AW-04-ZZ-SDT NF0AW-04-ZZ-SDT ; 
    10 NF0AW-04-ZZ-SETUP-HHMM NF0AW-04-ZZ-SETUP-HHMM ; 
end // end NF0AW04

//*** RECORD=NF0AW05 ****
// ************  MAP100 temp storage record  *****************
// Maintenance Log:
//   Date    Init.       Comment
// -------   ------      -------------------------------------
// 06/07/93  JJUDKI      Initial creattion.
// ***********************
Record NF0AW05 type basicRecord
  5 NF0AW-05-LENGTH NF0AW-05-LENGTH ; 
  5 NF0AW-05-GROUP NF0AW-05-GROUP ; 
    10 NF0AW-05-SEL NF0AW-05-SEL [14] ; 
    10 NF0AW-05-XCT-CTRY-CD NF0AW-05-XCT-CTRY-CD [14] ; 
    10 NF0AW-05-KUCCOID NF0AW-05-KUCCOID [14] ; 
    10 NF0AW-05-FF-MAIN-BUY-MO NF0AW-05-FF-MAIN-BUY-MO [14] ; 
    10 NF0AW-05-ZZ-LDT NF0AW-05-ZZ-LDT [14] ; 
    10 NF0AW-05-ZZ-LOAD-HHMM NF0AW-05-ZZ-LOAD-HHMM [14] ; 
    10 NF0AW-05-ZZ-SDT NF0AW-05-ZZ-SDT [14] ; 
    10 NF0AW-05-ZZ-SETUP-HHMM NF0AW-05-ZZ-SETUP-HHMM [14] ; 
    10 NF0AW-05-FF-SBMT-QTB NF0AW-05-FF-SBMT-QTB [14] ; 
    10 NF0AW-05-PAGE NF0AW-05-PAGE [14] ; 
    10 NF0AW-05-EZEMNO NF0AW-05-EZEMNO [14] ; 
    10 NF0AW-05-XXXUSERID NF0AW-05-XXXUSERID [14] ; 
    10 NF0AW-05-ZZZCHGCT NF0AW-05-ZZZCHGCT [14] ; 
    10 NF0AW-05-PREV-XCT-CTRY-CD NF0AW-05-PREV-XCT-CTRY-CD [14] ; 
    10 NF0AW-05-UPD-FL NF0AW-05-UPD-FL [14] ; 
end // end NF0AW05

//*** RECORD=NF0AW10 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record NF0AW10 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(18) ; 
    10 NF0AW-10-RP NF0AW-10-RP ; 
    10 * char(9) ; 
    10 NF0AW-10-DFC NF0AW-10-DFC ; 
    10 * char(46) ; 
  5 TARTYPE TARTYPE ; 
end // end NF0AW10

//*** RECORD=NF0AW99 ****
// System internal reader queue (INTR) record definition.
// ***********************
Record NF0AW99 type serialRecord  {
  fileName = "INTR"
  }
  10 NF0AW-99-JCL NF0AW-99-JCL ; 
end // end NF0AW99

//*** RECORD=VSRSQD01 ****
// **International Short Range Submitted Buy Detail ***
// Record name:        VSRSQD01
// Copylib Member:     DCL01148
// I/O Mod:            IO6760
// Key to DB2 Table:   CU-CO-ID,
//                     FF-MAIN-BUY-MO
// Date Created:       06/03/93
// Maintenance Log:
//   Date    User Id   Comment
// --------  --------  ----------------------------------------
// 06/10/93  JJUDKI    Initial record creation.
// 
// ************************
Record VSRSQD01 type basicRecord
  5 VSRSQD01-GROUP VSRSQD01-GROUP ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 FF-MAIN-BUY-MO FF-MAIN-BUY-MO ; 
    10 XPL-PROD-LN-CD XPL-PROD-LN-CD ; 
    10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
end // end VSRSQD01

//*** RECORD=VSRSQH01 ****
// **International Short Range Submitted Buy Header ***
// Record name:        VSRSQH01
// Copylib Member:     DCL01147
// I/O Mod:            IO6750
// Key to DB2 Table:   CU-CO-ID,
//                     FF-MAIN-BUY-MO
// Date Created:       06/03/93
// Maintenance Log:
//   Date    User Id   Comment
// --------  --------  ----------------------------------------
// 06/10/93  JJUDKI    Initial record creation.
// 
// ************************
Record VSRSQH01 type basicRecord
  5 VSRSQH01-GROUP VSRSQH01-GROUP ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 FF-MAIN-BUY-MO FF-MAIN-BUY-MO ; 
    10 XCT-CTRY-CD XCT-CTRY-CD ; 
    10 FF-SBMT-QTB FF-SBMT-QTB ; 
    10 ZZ-LDT ZZ-LDT ; 
    10 ZZ-LOAD-HHMM ZZ-LOAD-HHMM ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VSRSQH01

// buy month
DataItem FF-MAIN-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order nbr
DataItem NF0AW-01-1CU num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub-order nbr
DataItem NF0AW-01-1NO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer number
DataItem NF0AW-01-ALPHA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem NF0AW-01-ALPHA-4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// attention key
DataItem NF0AW-01-ATTN-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-BUYMO num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fast path confirmation
DataItem NF0AW-01-CAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-CNT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of copies to print
DataItem NF0AW-01-CPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer number
DataItem NF0AW-01-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-01-CUST num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem NF0AW-01-ERR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem NF0AW-01-F17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short range buy month
DataItem NF0AW-01-FF-MAIN-BUY-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process flag
DataItem NF0AW-01-FL3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-GRP char(1393)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display key
DataItem NF0AW-01-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-LIT1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-LIT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-LIT3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first part of req nbr
DataItem NF0AW-01-NB1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second part of req nbr
DataItem NF0AW-01-NB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sa-btch-rqt-nbr
DataItem NF0AW-01-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer number
DataItem NF0AW-01-NUMERIC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer number
DataItem NF0AW-01-NUMERIC-4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirm upload
DataItem NF0AW-01-PF16 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirm upload
DataItem NF0AW-01-PF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl card
DataItem NF0AW-01-PR1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl card
DataItem NF0AW-01-PR2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cics region number
DataItem NF0AW-01-REG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second report requested flag
DataItem NF0AW-01-RP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT-RED char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT-RED-A char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-RPT2-RED-N num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-01-RPT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// schedule i.d. number work
DataItem NF0AW-01-SCH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_NIKE_SHP_ID
DataItem NF0AW-01-SHP num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NF0AW-01-SUB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer error switch
DataItem NF0AW-01-SWK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wta0230-assign-applid
DataItem NF0AW-01-TA3APLID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-TBL char(1100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-TBL-CU-CO-ID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-01-TBL-FF-MAIN-BUY-MO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-TBL-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remote printer tbl max
DataItem NF0AW-01-TMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen marker
DataItem NF0AW-01-TOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-01-TSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem NF0AW-01-TTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request type
DataItem NF0AW-01-TY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem NF0AW-01-UID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSO_PRTR_DEST_ID
DataItem NF0AW-01-XSOPDEST char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-nbr-of-copy
DataItem NF0AW-01-XXXNBRCY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem NF0AW-02-BM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month month
DataItem NF0AW-02-BM-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month month
DataItem NF0AW-02-BM-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claims Count
DataItem NF0AW-02-CCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// always '019'
DataItem NF0AW-02-CEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Identify Type of close
DataItem NF0AW-02-CLOSE-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// 'Cursor' open switch
DataItem NF0AW-02-COS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of date
DataItem NF0AW-02-DAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NF0AW-02-DAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NF0AW-02-DT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-DX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-DX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-DX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NF0AW-02-DY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First Time Flag
DataItem NF0AW-02-END char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error Page Pointer
DataItem NF0AW-02-EPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF exit switch(contains PFK#)
DataItem NF0AW-02-EXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Identify Type of fetch
DataItem NF0AW-02-FETCH-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Discard portion of Order #
DataItem NF0AW-02-FIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// held buy-mo
DataItem NF0AW-02-HB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// held cu-co-id
DataItem NF0AW-02-HC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-HIGH-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Held Selection Flag
DataItem NF0AW-02-HSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal Comment Fetch Count
DataItem NF0AW-02-ICT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal Page Down Error Flag
DataItem NF0AW-02-IDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Index
DataItem NF0AW-02-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Dates error
DataItem NF0AW-02-IER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index
DataItem NF0AW-02-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NF0AW-02-INQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of cursor close
DataItem NF0AW-02-IO-CLOSE char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Type of cursor declare
DataItem NF0AW-02-IO-CURSOR char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Type of cursor fetch
DataItem NF0AW-02-IO-FETCH char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Internal Comment Page Flag
DataItem NF0AW-02-IPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem NF0AW-02-KUCCOID-ALPHA char(7)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID
DataItem NF0AW-02-KUCCOID-NUM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Screen Line Count
DataItem NF0AW-02-LCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index For Top Of Screeen
DataItem NF0AW-02-LDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NF0AW02 Length record
DataItem NF0AW-02-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem NF0AW-02-MN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NF0AW-02-MON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # Claims Selected Message
DataItem NF0AW-02-MSG char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Needed Dates error
DataItem NF0AW-02-NER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-NEXT-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Literal 'Note: '
DataItem NF0AW-02-NOT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NF0AW-02-ONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Identify Type of open
DataItem NF0AW-02-OPEN-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// W/S order number
DataItem NF0AW-02-ORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-PCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Page Count
DataItem NF0AW-02-PCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Comment Fetch Count
DataItem NF0AW-02-PCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-PDA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-PDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Page Down Error Flag
DataItem NF0AW-02-PDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Posting Dates error
DataItem NF0AW-02-PER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Held Screen Page Count
DataItem NF0AW-02-PHLD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-PMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page Counter
DataItem NF0AW-02-PPG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-PRD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order partition number
DataItem NF0AW-02-PTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window switch
DataItem NF0AW-02-PUW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-PYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-QTB-ALPHA char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-DA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-DN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-QTB-HA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-HN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-QTB-MN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-QTB-NUM num(12)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-QTB-PS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-PS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-TA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-TN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redefined digits
DataItem NF0AW-02-QTB-WRK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-WRK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-WRK2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-QTB-WRK3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remainder Of Message
DataItem NF0AW-02-REM char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen filled      (y = yes)
DataItem NF0AW-02-SCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index
DataItem NF0AW-02-SCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid User Security Level Flag
DataItem NF0AW-02-SL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem NF0AW-02-SMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row Sequence
DataItem NF0AW-02-SQCE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working subscript
DataItem NF0AW-02-SUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update Error Flag
DataItem NF0AW-02-UFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-W05SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-W1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NF0AW-02-XCT-CTRY-CD char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NF0AW-02-XCT-CTRY-CD-HLD char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NF0AW-02-YER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NF0AW-02-YR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month
DataItem NF0AW-03-FF-MAIN-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// submitted qty to buy
DataItem NF0AW-03-FF-SBMT-QTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claims common working storage
DataItem NF0AW-03-GROUP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk1070-task
DataItem NF0AW-03-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-co-id
DataItem NF0AW-03-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// country
DataItem NF0AW-03-XCT-CTRY-CD char(4)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// change count
DataItem NF0AW-03-ZZ-CHNG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date
DataItem NF0AW-03-ZZ-CHNG-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change time
DataItem NF0AW-03-ZZ-CHNG-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load date
DataItem NF0AW-03-ZZ-LDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load time
DataItem NF0AW-03-ZZ-LOAD-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setup date
DataItem NF0AW-03-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setup time
DataItem NF0AW-03-ZZ-SETUP-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy month
DataItem NF0AW-04-FF-MAIN-BUY-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// submitted qty to buy
DataItem NF0AW-04-FF-SBMT-QTB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claims common working storage
DataItem NF0AW-04-GROUP char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-co-id
DataItem NF0AW-04-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// country
DataItem NF0AW-04-XCT-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load date
DataItem NF0AW-04-ZZ-LDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load time
DataItem NF0AW-04-ZZ-LOAD-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setup date
DataItem NF0AW-04-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setup time
DataItem NF0AW-04-ZZ-SETUP-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error Message For SR
DataItem NF0AW-05-EZEMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy month
DataItem NF0AW-05-FF-MAIN-BUY-MO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submitted qty to buy
DataItem NF0AW-05-FF-SBMT-QTB char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NF0AW02 group item
DataItem NF0AW-05-GROUP char(980)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer Id
DataItem NF0AW-05-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NF0AW02 Length record
DataItem NF0AW-05-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error Page
DataItem NF0AW-05-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SR Id From Previous Page
DataItem NF0AW-05-PREV-XCT-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select Flag
DataItem NF0AW-05-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Updated SR Flag
DataItem NF0AW-05-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country
DataItem NF0AW-05-XCT-CTRY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Approval Level User Id
DataItem NF0AW-05-XXXUSERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load date
DataItem NF0AW-05-ZZ-LDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load time
DataItem NF0AW-05-ZZ-LOAD-HHMM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setup date
DataItem NF0AW-05-ZZ-SDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setyp time
DataItem NF0AW-05-ZZ-SETUP-HHMM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_cnt
DataItem NF0AW-05-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DISSEMINATOR FORMS CODE
DataItem NF0AW-10-DFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMOTE PRINTER ID
DataItem NF0AW-10-RP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl card
DataItem NF0AW-99-JCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD GROUP
DataItem VSRSQD01-GROUP char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD GROUP
DataItem VSRSQH01-GROUP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

