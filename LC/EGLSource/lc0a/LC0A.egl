package lc0a;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=LC0A ****
// This application displays the Letter of Credit Menu and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/30/92   lsutto   New application.
// 02/01/93   KSANFO   Add L/C Inquiry screen option to menu
// 05/10/94   SLEWIS   Add FOOTWEAR PRICE EXEPCTION  to menu
// 09/30/98   NREDDY   PCF999-TO DISPLAY APPL. NAMES ON SCREEN
// 12/03/99   jniese   PCF205-add bank control appl.
// 12/17/01   SPITCH   DISABLED PB0N
// 01/03/02   SPITCH   DISABLED PB0R
// *********************
Program LC0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  LC0AW01 LC0AW01; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XROTBL {deleteAfterUse = yes}; // table
  use LC0AM.LC0AM099 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    LC0A001: LC0A001();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Production Order Report Request process*/
     /* ------------------------------------------------------------*/

    goto LC0A002; /* Production Order Report Request*/


    LC0A002: LC0A002();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Production Order Report Request process*/
     /* ------------------------------------------------------------*/

    goto LC0A002; /* Production Order Report Request*/


  end // end main
end // end LC0A

// Report Requests initialization
Function LC0A001()
   /* ------------------------------------------------------------*/
   /* Perform application initialization.*/
   /* ------------------------------------------------------------*/

  XPPC001(); /* Application initialization*/

   /* ------------------------------------------------------------*/
   /* Initialize the working storage areas and variables.*/
   /* ------------------------------------------------------------*/

  set LC0AM099 initial; /* M099 input/output*/
  set LC0AW01 empty; /* Working storage*/
  set SQLCA empty; /* SQL communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/

  LC0AW01.LC0AWIXL = 05; /* Number of menu selection lines*/

   /* ------------------------------------------------------------*/
   /* Obtain the user identification.*/
   /* ------------------------------------------------------------*/

  set TA3REC empty; /* Initialize subroutine parameters*/

  TA3REC.TA3OPTN = "USERID"; /* Indicate subroutine option*/

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user information*/

   /* ------------------------------------------------------------*/
   /* If an error occurred, indicate user information error.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || TA3REC.TA3RTNCD != 0)          /* or non-zero return code*/

    /* ------------------------------------------------------------*/
     /* Post the error information to the Error Diagnosis Facility.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "UNABLE TO OBTAIN USER INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "001"; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Exit to display the application menu.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "PC0A"; /* TO application*/

    XSPCS01(); /* Exit to another application*/

    exit program; /* Severe error return to CICS*/

  end

   /* ------------------------------------------------------------*/
   /* Save the user identification and LOCAL printer description.*/
   /* ------------------------------------------------------------*/

  LC0AW01.XURUSRID = TA3REC.TA3USRID; /* User identification*/

  if ("LOCAL" in XROTBL.XROPDEST /* Printer in table*/
   && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    LC0AW01.XURDEST = "LOCAL"; /* Remote printer*/
    LC0AW01.XRODESC = XROTBL.XRODESC[sysVar.arrayIndex]; /* Description*/

  end


end // end LC0A001

// FOOTWEAR DEMAND Report Request
Function LC0A002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (LC0AW01.LC0AWSWX != "Y") /* EXIT not requested*/

    if (LC0AW01.LC0ASEL[1] == "S") /* Line 1 was selected*/
      COMMAREA.CATOAP = "PC01";
      XSPCS01();
    end

    if (LC0AW01.LC0ASEL[2] == "S") /* Line 2 was selected*/
      COMMAREA.CATOAP = "PC02";
      XSPCS01();
    end

    if (LC0AW01.LC0ASEL[3] == "S") /* Line 3 was selected*/
      COMMAREA.CATOAP = "PC03";
      XSPCS01();
    end

    if (LC0AW01.LC0ASEL[4] == "S") /* Line 4 was selected*/
      COMMAREA.CATOAP = "PC0D";
      XSPCS01();
    end

  /* IF LC0AW01.LC0ASEL(5) EQ 'S';  /* Line 5 was selected*/
  /* MOVE 'PB0N' TO COMMAREA.CATOAP;*/
  /* XSPCS01;*/
  /* END;*/

  /* IF LC0AW01.LC0ASEL(5) EQ 'S';  /* Line 6 was selected*/
  /* MOVE 'PB0R' TO COMMAREA.CATOAP;*/
  /* XSPCS01;*/
  /* END;*/
  /* ;*/
    if (LC0AW01.LC0ASEL[5] == "S") /* Line 7 was selected*/
      COMMAREA.CATOAP = "LC0B";
      XSPCS01();
    end

  end


  LC0AW01.LC0AWSWX = "N"; /* Reset exit requested switch*/

  LC0A990(); /* Report Request Menu*/


end // end LC0A002

Function LC0A990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  LC0A991(); /* Format and display the map*/

  LC0A992(); /* Check attention identifier*/

  LC0A993(); /* Reset fields to normal intensity*/

  LC0A994(); /* Verify the data that was entered*/

  LC0A995(); /* Process valid input request*/


end // end LC0A990

Function LC0A991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set LC0AM099 initial; /* M099 input/output*/

    LC0AW01.LC0AWIXM = 1; /* Initialize map index*/

    while (LC0AW01.LC0AWIXM <= LC0AW01.LC0AWIXL) /* Until end of array*/

      LC0AM099.LC0ASEL[LC0AWIXM] = LC0AW01.LC0ASEL[LC0AWIXM];

      LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  LC0AM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  LC0AM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  LC0AM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
    set LC0AM099 alarm; /* Indicate sound alarm*/

  end

  converse LC0AM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  LC0AM099.XXXMODID = " "; /* Module identification*/
  COMMAREA.CATOAP = LC0AM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = LC0AM099.CAITEM; /* Application data*/


end // end LC0A991

Function LC0A992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set LC0AM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    LC0AS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPCS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    LC0AM099.XXXMODID = "992"; /* Module identification*/
    set LC0AM099.CATOAP cursor, bold; /* Highlight*/

    LC0AS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "LC0AM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* TO application*/
    end

    XSPCS01(); /* Exit to another application*/

    LC0AM099.XXXMODID = "992"; /* Module identification*/

    LC0AS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    LC0AM099.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    LC0AS99(); /* Exit to display map*/

  end


end // end LC0A992

Function LC0A993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  LC0AW01.LC0AWIXM = 1; /* Initialize index*/

  while (LC0AW01.LC0AWIXM <= LC0AW01.LC0AWIXL) /* Until all lines are reset*/

    set LC0AM099.LC0ASEL[LC0AWIXM] initialAttributes; /* Reset select field*/

    LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM + 1; /* Increment line index*/

  end

  set LC0AM099.CATOAP initialAttributes; /* TO application*/
  set LC0AM099.CAITEM initialAttributes; /* Application data*/


end // end LC0A993

Function LC0A994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    LC0AM099.XXXMODID = "994"; /* Module identification*/
    set LC0AM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check that only one selected*/
   /* ------------------------------------------------------------*/

  if (LC0AM099.LC0ASEL[1] != " ")
    if (LC0AM099.LC0ASEL[2] != " "
     || LC0AM099.LC0ASEL[3] != " "
     || LC0AM099.LC0ASEL[4] != " "
     || LC0AM099.LC0ASEL[5] != " ")
  /* OR LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* OR LC0AM099.LC0ASEL(7) ^= ' ';*/
      LC0AM099.XXXMODID = "994"; /* Module identification*/
      set LC0AM099.LC0ASEL[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(144); /* Enter only with FAST PATH*/
    end
  end

  if (LC0AM099.LC0ASEL[2] != " ")
    if (LC0AM099.LC0ASEL[3] != " "
     || LC0AM099.LC0ASEL[4] != " "
     || LC0AM099.LC0ASEL[5] != " ")
  /* OR LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* OR LC0AM099.LC0ASEL(7) ^= ' ';*/
      LC0AM099.XXXMODID = "994"; /* Module identification*/
      set LC0AM099.LC0ASEL[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(144); /* Enter only with FAST PATH*/
    end
  end

  if (LC0AM099.LC0ASEL[3] != " ")
    if (LC0AM099.LC0ASEL[4] != " "
     || LC0AM099.LC0ASEL[5] != " ")
  /* OR LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* OR LC0AM099.LC0ASEL(7) ^= ' ';*/
      LC0AM099.XXXMODID = "994"; /* Module identification*/
      set LC0AM099.LC0ASEL[3] cursor, bold; /* Highlight*/
      converseLib.validationFailed(144); /* Enter only with FAST PATH*/
    end
  end

  if (LC0AM099.LC0ASEL[4] != " ")
    if (LC0AM099.LC0ASEL[5] != " ")
  /* OR LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* OR LC0AM099.LC0ASEL(7) ^= ' ';*/
      LC0AM099.XXXMODID = "994"; /* Module identification*/
      set LC0AM099.LC0ASEL[4] cursor, bold; /* Highlight*/
      converseLib.validationFailed(144); /* Enter only with FAST PATH*/
    end
  end

  /* IF LC0AM099.LC0ASEL(5) ^= ' ';*/
  /* IF LC0AM099.LC0ASEL(5) ^= ' '*/
  /* OR LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* MOVE '994' TO LC0AM099.XXXMODID;/* Module identification*/
  /* SET LC0AM099.LC0ASEL(5) CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 144 TO EZEMNO;          /* Enter only with FAST PATH*/
  /* END;*/
  /* END;*/

  /* IF LC0AM099.LC0ASEL(5) ^= ' ';*/
  /* IF LC0AM099.LC0ASEL(6) ^= ' ';*/
  /* MOVE '994' TO LC0AM099.XXXMODID;/* Module identification*/
  /* SET LC0AM099.LC0ASEL(5) CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 144 TO EZEMNO;          /* Enter only with FAST PATH*/
  /* END;*/
  /* END;*/
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXL; /* Initialize line index*/

  while (LC0AW01.LC0AWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (LC0AM099.LC0ASEL[LC0AWIXM] != LC0AW01.LC0ASEL[LC0AWIXM]
     && LC0AM099.LC0ASEL[LC0AWIXM] != " " /* Line was selected*/
     && LC0AM099.LC0ASEL[LC0AWIXM] != "S") /* and not with an "S"*/

      LC0AM099.XXXMODID = "994"; /* Module identification*/
      set LC0AM099.LC0ASEL[LC0AWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    LC0AS99(); /* Exit to display map*/
  end


end // end LC0A994

Function LC0A995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  LC0AW01.LC0AWIXM = 1; /* Initialize map line index*/

  while (LC0AW01.LC0AWIXM <= LC0AW01.LC0AWIXL) /* Until end of array*/

    LC0AW01.LC0ASEL[LC0AWIXM] = LC0AM099.LC0ASEL[LC0AWIXM];

    LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM + 1; /* Increment line number*/

  end

   /* ------------------------------------------------------------*/
   /* If no default print destination and at least one line was*/
   /* selected, force selection of printer.*/
   /* ------------------------------------------------------------*/

  if (LC0AW01.XURDEST == " " /* No default print destination*/
   && LC0AW01.LC0ASEL[1] != "S") /* and specify printer not selected*/

    LC0AW01.LC0AWIXM = 1; /* Initialize map line index*/

    while (LC0AW01.LC0AWIXM <= LC0AW01.LC0AWIXL /* Until end of selections*/
     && LC0AW01.LC0ASEL[1] != "S") /* or specification is forced*/

      if (LC0AW01.LC0ASEL[LC0AWIXM] == "S") /* Line was selected*/

        LC0AW01.LC0ASEL[1] = "S"; /* Force printer specification*/

      end

      LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM + 1; /* Increment line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print destinations requested, initialize the page index.*/
   /* ------------------------------------------------------------*/

  if (LC0AW01.LC0ASEL[1] == "S") /* If specify printer selected*/
    LC0AW01.LC0AWIXP = 0; /* Initialize page index*/
  end


end // end LC0A995

Function LC0AS99()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* Exit to redisplay the selection menu map.*/
   /* ------------------------------------------------------------*/

  LC0AW01.LC0AWIXM = 1; /* Initialize map index*/

  while (LC0AW01.LC0AWIXM <= LC0AW01.LC0AWIXL) /* Until end of array*/

    if (LC0AW01.LC0ASEL[LC0AWIXM] == "S") /* Entry is selected*/

      LC0AW01.LC0ASEL[LC0AWIXM] = " "; /* Reset entry*/

    end

    LC0AW01.LC0AWIXM = LC0AW01.LC0AWIXM + 1; /* Increment index*/

  end

  exit stack; /* Exit to redisplay map*/


end // end LC0AS99

//*** RECORD=LC0AW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record LC0AW01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 XURCOPY XURCOPY ; 
  10 XURUSRID XURUSRID ; 
  10 XURUSRNM XURUSRNM ; 
  10 XURDEST XURDEST ; 
  10 XRODESC XRODESC ; 
  10 LC0ASEL LC0ASEL [98] ; 
  10 LC0AWIXL LC0AWIXL ; 
  10 LC0AWIXM LC0AWIXM ; 
  10 LC0AWIXP LC0AWIXP ; 
  10 LC0AWIXS LC0AWIXS [99] ; 
  10 LC0AWIXT LC0AWIXT ; 
  10 LC0AWSWP LC0AWSWP ; 
  10 LC0AWSWS LC0AWSWS ; 
  10 LC0AWSWX LC0AWSWX ; 
end // end LC0AW01

// Menu selection field
DataItem LC0ASEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem LC0AWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem LC0AWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem LC0AWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem LC0AWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem LC0AWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem LC0AWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem LC0AWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem LC0AWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

