package lc0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=LC0B ****
// THIS PROGRAM WILL ALLOW THE USER TO LIST/ADD ROWS TO
// THE LC BANK CONTROL TABLE.
// 
// BASED UPON THE data ENTERED THE DATABASE WILL RETURN
// 0 TO N ROWS.  THESE ROWS WILL BE FORMATTED ON THE LIST
// SCREEN AS INSTRUCTED BY THIS PROGRAM.
// 
// THIS PROGRAM WILL ALLOW THE USER TO ADD NEW BANK COMNTROL
// ROWS OR INQURE ON THE EXISTING ROWS.
// 
// ALL PROGRAM FUNCTIONS CAN EITHER BE IMPLEMENTED FROM THE
// LIST SCREEN OR VIA FAST PATH.
// 
// WHEN SELECTING A FUNCTION FROM THE LIST SCREEN
// THE USER WILL MAKE THE FUCTION SELECTION VIA PF KEYS.
// 
//                     PF13 FOR THE ADD
//                     ENTER - NO FUNCTION
// 
// AN INQUIRY CAN BE DONE ON ANY ROW SELECTED.
// AS MANY AS 14 ROWS CAN BE SELECTED FROM ANY ONE PAGE.
// 
// 
//                   * FAST PATH *
// 
// THE USE OF POP-UP WINDOWS HAS BEEN INCORPORATED INTO THIS
// PROGRAM.  THIS WILL ALLOW THE USER TO FIND AND ENTER THE
// CORRECT GPC CODE, COUNTRY, DESTINATION, PO REGION ETC...
// 
// 
//   DATE        NAME       DESCRIPTION OF CHANGE
// ________     ______     ___________________________________
// 11/10/99     jniese     cloned from fy0h.
// 01/20/00     SBUNGO     FIX IN LC0B120 PROCESS FOR PF7 AND
//                         PF8 KEYS TO WORK RIGHT
// 07/31/01     SVANJA     FIX IN LC0B152 & LC0B251 TO ALLOW
//                         GPC '03' EQUIPMENT FCTY.
// *********************
Program LC0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  LC0BW00 LC0BW00; // record
  LC0BW01 LC0BW01; // record
  LC0BW02 LC0BW02; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  VFCTY003 VFCTY003; // record
  VLCBNK01 VLCBNK01; // record
  VPOREG01 VPOREG01; // record
  VPOTYP01 VPOTYP01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XIBTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use LC0BM.LC0BM001,  // forms
      LC0BM.LC0BM002, 
      LC0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE AND MAP OUTPUT AREAS.*/
     /* FLOW TO CONVERSE THE lc bankl code PROCESS.*/
     /* ------------------------------------------------------------*/

    set LC0BW00 empty; /* Initialize working storage*/
    set LC0BW01 empty; /* Initialize map1 storage*/
    set LC0BW02 empty; /* Initialize map2 storage*/
    set SQLCA empty; /* Initialize SQL record*/
    set ERRSQLCA empty; /* Initialize SQL error record*/
    set TA1REC empty; /* Initialize error diag. module*/
    set TA5REC empty; /* Initialize ta0050 record*/
    set XX0XW01 empty; /* Initialize date record*/
    set XX0XW02 empty; /* Initialize date record*/
    set XX0XM001 initial; /* Clear pop-up window map*/
    set LC0BM001 initial; /* Clear list screen map*/
    set LC0BM002 initial; /* Clear functions map*/

    LC0BW00.PO-REG-CD = "01"; /* MAP1 DEFAULT SET TO region 01*/
    LC0BW00.LC0B-PC-PO-ID-MO-RNG = 0; /* initialize po id*/
    LC0BW00.PC-SESN-YR = 0; /* initialize season year*/
    LC0BW00.LC0BWIXM = 14; /* Initialize list screen lines*/
    LC0BW00.LC0BWSWR = "N"; /* Initialize request for data*/
    LC0BW00.LC0BWMAP = "1"; /* Initialize list map*/
    LC0BW00.LC0BWFNC = " "; /* Set function code to spaces*/

     /* -----------------------------------------------------------*/
     /* THE GPC CODE WILL BE CHECKED WHEN ENTERING VIA FAST PATH*/
     /* FOR VALIDITY.*/
     /* -----------------------------------------------------------*/

    if (COMMAREA.XGPCD in XGPTBL.XGPCD) /* If GPC code in table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        LC0BM001.XGPCD = COMMAREA.XGPCD; /* Move code to map1*/
        LC0BM002.XGPCD = COMMAREA.XGPCD; /* Move code to map2*/
        LC0BW00.XGPCD = COMMAREA.XGPCD; /* Move code to storage*/
        LC0BM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc. to map2*/
        LC0BW00.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* GPC desc.*/
      end
    end

    LC0B001: LC0B001();
    goto LC0B001;
  end // end main
end // end LC0B

// lc bank control
Function LC0B001()

   /* ------------------------------------------------------------*/
   /* This is the main flow used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (LC0BW00.LC0BWMAP == "1") /* Map 1 was requested*/
    LC0B100(); /* Display map 1*/
  else
    if (LC0BW00.LC0BWMAP == "2") /* Map 2 was requested*/
      LC0B200(); /* Display map 2*/
    else

      /* -----------------------------------------------------------*/
      /* This error routine is executed from the Main Application*/
      /* Flow if an error has occured due to an invalid map number,*/
      /* function code, or major error not covered in the Main*/
      /* Process flow.*/
      /* -----------------------------------------------------------*/

      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "LC0B001"; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = LC0BW00.LC0BWMAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

      XSPF4(); /* Exit to master menu*/

    end
  end

end // end LC0B001

// L/C Bank inquiry List Map
Function LC0B100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (LC0BW00.LC0BWSWR == "Y") /* Request for data turned on*/
      LC0B110(); /* Obtain the data to display*/
    end
  end

  LC0B120(); /* Format and display the map*/

  LC0B130(); /* Check attention identifier*/

  LC0B140(); /* Reset fields to normal intensity*/

  LC0B150(); /* Verify the entered data*/

  LC0B160(); /* Process valid input request*/

end // end LC0B100

// Obtain the L/C Bank data
Function LC0B110()

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  LC0BS01(); /* Purge temporary storage*/
  LC0BS10(); /* Select set and open the cursor*/
  LC0BS11(); /* Read next record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    LC0BW00.LC0BWSWC = "N"; /* Initialize end of file switch*/
    LC0BW00.LC0BWIXM = 1; /* Initialize display line number*/
    set LC0BW01 empty; /* Clear temporary storage*/

    while (LC0BW00.LC0BWSWC == "N") /* Until cursor end of file*/
      LC0BS12(); /* Move data to map1 working storage*/
      LC0BW00.LC0BWIXM = LC0BW00.LC0BWIXM + 1; /* increment line count*/
      if (LC0BW00.LC0BWIXM > 14) /* Page is full*/
        LC0BS02(); /* Add page to temporary storage*/
      end
      LC0BS11(); /* Read next record*/
    end
    if (LC0BW00.LC0BWSWC == "Y") /* End of file flag*/
      if (LC0BW00.LC0BWIXM > 1) /* And page was formatted*/
        LC0BS02(); /* Add page to temporary storage*/
      end
      LC0BW00.LC0BWTSP = 1; /* Initialize page number*/
      LC0BW00.LC0BWSWR = "N"; /* Request for data completed*/
      LC0BS13(); /* Close the selected set cursor*/
    end
  end

  if (LC0BW00.TA5TSQIX == 0) /* No data to display*/
    set LC0BM001 initial;
    LC0BM001.XXXPRCNM = "LC0B110"; /* Process name*/
    converseLib.validationFailed(18); /* No data to display*/
    set LC0BM001.XGPCD cursor;
  end

end // end LC0B110

// Format and display the map
Function LC0B120()

   /* ------------------------------------------------------------*/
   /* clear map and restore entered fields.*/
   /* If no error to display, format and display selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* No message to display*/
    set LC0BM001 initial; /* Clear map output area*/
    LC0B121(); /* Format the selected data*/
  else
    if (converseVar.validationMsgNum != 2
     && converseVar.validationMsgNum != 3)
      LC0BS01(); /* Purge temp storage*/
      LC0BM001.XGPCD = LC0BW00.XGPCD;
      LC0BM001.PO-REG-CD = LC0BW00.PO-REG-CD;
      LC0BM001.PO-REG-DESC = LC0BW00.PO-REG-DESC;
      LC0BM001.FY-FCTY-TYP-CD = LC0BW00.FY-FCTY-TYP-CD;
      LC0BM001.LC0BMPCCYY = LC0BW00.LC0BWPCCYY; /* po id cent/year*/
      LC0BM001.LC0BMPMO = LC0BW00.LC0BWPMO; /* po id prod month*/
      LC0BM001.LC0BMDMO = LC0BW00.LC0BWDMO; /* po id delvr month*/
      LC0BM001.LC0B-XSE-SESN-CD = LC0BW00.XSE-SESN-CD;
      LC0BM001.LC0B-PC-SESN-YR = LC0BW00.PC-SESN-YR;
      LC0BM001.LC0B-XIB-IBANK-CD = LC0BW00.XIB-IBANK-CD;
      set LC0BM001 alarm; /* Indicate sound alarm*/
    end
  end

  LC0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse LC0BM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CATOAP = LC0BM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = LC0BM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
    /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    LC0B122();
  end

end // end LC0B120

// Format the selected data
Function LC0B121()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  LC0BM001.XGPCD = LC0BW00.XGPCD;
  LC0BM001.PO-REG-CD = LC0BW00.PO-REG-CD;
  LC0BM001.PO-REG-DESC = LC0BW00.PO-REG-DESC;
  LC0BM001.FY-FCTY-TYP-CD = LC0BW00.FY-FCTY-TYP-CD;
  LC0BM001.LC0BMPCCYY = LC0BW00.LC0BWPCCYY; /* po id cent/year*/
  LC0BM001.LC0BMPMO = LC0BW00.LC0BWPMO; /* po id prod month*/
  LC0BM001.LC0BMDMO = LC0BW00.LC0BWDMO; /* po id delvr month*/
  LC0BM001.LC0B-XSE-SESN-CD = LC0BW00.XSE-SESN-CD;
  LC0BM001.LC0B-PC-SESN-YR = LC0BW00.PC-SESN-YR;
  LC0BM001.LC0B-XIB-IBANK-CD = LC0BW00.XIB-IBANK-CD;

  if (LC0BW00.TA5TSQIX == 0) /* No data to display*/
    set LC0BM001.XGPCD cursor; /* Set cursor at gpc*/
    return;
  else
    LC0BS03(); /* Read temp. storage page*/
    set LC0BM001.XGPCD cursor; /* Set cursor at style no.*/
  end

  set LC0BM001.LC0BMPGL skip; /* Display "PAGE" literal*/
  set LC0BM001.LC0BMOFL skip; /* Display "OF" literal*/

  LC0BM001.LC0BMTSP = LC0BW00.LC0BWTSP; /* Current page number*/
  set LC0BM001.LC0BMTSP skip; /* Shows current page number*/
  LC0BM001.TA5TSQIX = LC0BW00.TA5TSQIX; /* Highest page number*/
  set LC0BM001.TA5TSQIX skip; /* Shows highest page number*/

  LC0BW00.LC0BWIXM = 1; /* Initialize line index*/

  while (LC0BW00.LC0BWIXM <= 14) /* Until end of lines*/

    if (LC0BW01.XIB-IBANK-CD[LC0BWIXM] > " ")
      LC0BM001.PC-PO-ID-MO-RNG[LC0BWIXM] = LC0BW01.PC-PO-ID-MO-RNG[LC0BWIXM];
      LC0BM001.XSE-SESN-CD[LC0BWIXM] = LC0BW01.XSE-SESN-CD[LC0BWIXM];
      LC0BM001.PC-SESN-YR[LC0BWIXM] = LC0BW01.PC-SESN-YR[LC0BWIXM];
      LC0BM001.PC-PO-OT-CD[LC0BWIXM] = LC0BW01.PC-PO-OT-CD[LC0BWIXM];
      LC0BM001.FY-FCTY-CD[LC0BWIXM] = LC0BW01.FY-FCTY-CD[LC0BWIXM];
      LC0BM001.PC-XCT-ORIG-CD[LC0BWIXM] = LC0BW01.PC-XCT-ORIG-CD[LC0BWIXM];
      LC0BM001.PC-DEST-XCT-CD[LC0BWIXM] = LC0BW01.PC-DEST-XCT-CD[LC0BWIXM];
      LC0BM001.XIB-IBANK-CD[LC0BWIXM] = LC0BW01.XIB-IBANK-CD[LC0BWIXM];
    end
    LC0BW00.LC0BWIXM = LC0BW00.LC0BWIXM + 1; /* Increment line index*/
  end

end // end LC0B121

// Check for ? by User
Function LC0B122()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (LC0BM001.XGPCD == "?"            /* if ? in gpc code field*/
   || LC0BM001.LC0B-XSE-SESN-CD == "?" /* if ? in season field*/
   || LC0BM001.LC0B-XIB-IBANK-CD == "?") /* if ? in issue bank field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

     /* *******************************************/
     /* GPC                    **/
     /* *******************************************/

  if (LC0BM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                GPC CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      COMMAREA.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      LC0BW00.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      set LC0BM001.XGPCD cursor, modified;
    else
      LC0BW00.XGPCD = " "; /* clear fields*/
      LC0BW00.XGPDESC = " ";
      set LC0BM001.XGPCD cursor, modified;
    end
  end

     /* *******************************************/
     /* season code  - xse          **/
     /* *******************************************/

  if (LC0BM001.LC0B-XSE-SESN-CD == "?") /* if ? in season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "    SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform season window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW00.XSE-SESN-CD = XSETBL.XSECD[XX0XWPIX];
      set LC0BM001.LC0B-XSE-SESN-CD cursor, modified;
    else
      LC0BW00.XSE-SESN-CD = " "; /* clear fields*/
      set LC0BM001.LC0B-XSE-SESN-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* ibank - xib                 **/
     /* *******************************************/

  if (LC0BM001.LC0B-XIB-IBANK-CD == "?") /* if ? in issue bank code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "   L/C ISSUING BANK CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXIB01(); /* perform issue bank window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW00.XIB-IBANK-CD = XIBTBL.XIB-IBANK-CD[XX0XWPIX];
      set LC0BM001.LC0B-XIB-IBANK-CD cursor, modified;
    else
      LC0BW00.XIB-IBANK-CD = " "; /* clear fields*/
      set LC0BM001.LC0B-XIB-IBANK-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* redisplay the map           **/
     /* *******************************************/

  converseLib.clearScreen();
   /* restore the original map*/
  LC0BM001.XXXPRCNM = "LC0B122"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/
  exit stack; /* Exit to redisplay the map*/

end // end LC0B122

// Check attention identifier
Function LC0B130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set LC0BM001 initial; /* Clear map before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end

  if (LC0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      LC0BS01(); /* Purge any temporary storage*/
      COMMAREA.CATOAP = LC0BM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = LC0BM001.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

      LC0BW00.LC0BWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      LC0BM001.XXXPRCNM = "LC0B130"; /* Process name*/
    end

    set LC0BM001.CATOAP cursor, modified, bold; /* Highlight*/
    LC0BM001.XXXPRCNM = "LC0B130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "LC0BM001"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    LC0BS01(); /* Purge any temporary storage*/
    XSPCS01(); /* Exit to another application*/
    LC0BM001.XXXPRCNM = "LC0B130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "LC0A"; /* Set to factory application*/
    LC0BS01(); /* Purge temp. storage*/
    XSPCS01(); /* Exit to another application*/
    LC0BM001.XXXPRCNM = "LC0B130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* PF13 was not pressed*/
    LC0BM001.XXXPRCNM = "LC0B130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end LC0B130

// Reset highlighted fields
Function LC0B140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set LC0BM001.XGPCD initialAttributes; /* Gpc code*/
  set LC0BM001.PO-REG-CD initialAttributes; /* po region*/
  set LC0BM001.FY-FCTY-TYP-CD initialAttributes; /* factory type*/
  set LC0BM001.LC0BMPCCYY initialAttributes; /* po id year*/
  set LC0BM001.LC0BMPMO initialAttributes; /* po id make month*/
  set LC0BM001.LC0BMDMO initialAttributes; /* po id dlvr month*/
  set LC0BM001.LC0B-XSE-SESN-CD initialAttributes; /* Season Range code*/
  set LC0BM001.LC0B-PC-SESN-YR initialAttributes; /* Season year*/
  set LC0BM001.LC0B-XIB-IBANK-CD initialAttributes; /* Bank Code*/
  set LC0BM001.CATOAP initialAttributes; /* Commarea option*/
  set LC0BM001.CAITEM initialAttributes; /* Commarea item data*/

end // end LC0B140

// Verify the entered data
Function LC0B150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (LC0BM001.CAITEM > " ") /* Application data was entered*/
    set LC0BM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    LC0BM001.XXXPRCNM = "LC0B150"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8 /* or scroll forward request*/
     || converseVar.eventKey is pf13) /* or scroll forward request*/
      LC0B151(); /* Verify scroll/add request*/
    else /* Otherwise must be ENTER, so*/
      LC0B152(); /* Verify entered data*/
    end
  end

end // end LC0B150

// Verify scroll request
Function LC0B151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && LC0BW00.LC0BWTSP < 2)       /* and no previous pages*/
    LC0BM001.XXXPRCNM = "LC0B151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && LC0BW00.LC0BWTSP >= LC0BW00.TA5TSQIX) /* and no more pages*/
    LC0BM001.XXXPRCNM = "LC0B151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

end // end LC0B151

// Verify any entered data
Function LC0B152()

   /* ------------------------------------------------------------*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
                      /* Ibank code*/
    /* ------------------------------------------------------------*/

  LC0BW00.XIB-IBANK-CD = LC0BM001.LC0B-XIB-IBANK-CD;
  if (LC0BM001.LC0B-XIB-IBANK-CD > " ") /* If something in ibank*/
    if (LC0BM001.LC0B-XIB-IBANK-CD in XIBTBL.XIB-IBANK-CD /* If in xib*/
     && XIBTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* If xib code active*/
          /* next sentence - ibank valid*/
    else
      set LC0BM001.LC0B-XIB-IBANK-CD cursor, bold; /* Highlight ibank*/
      LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
      converseLib.validationFailed(569); /* Must have valid ibank*/
    end
  else
    LC0BW00.XIB-IBANK-CD = " "; /* ibank is not required*/
  end

    /* ------------------------------------------------------------*/
                      /* season year*/
    /* ------------------------------------------------------------*/

  LC0BW00.PC-SESN-YR = LC0BM001.LC0B-PC-SESN-YR;
  if (LC0BM001.LC0B-PC-SESN-YR != 0) /* If something in year*/
    if (LC0BM001.XGPCD == "03")
      if (LC0BM001.LC0B-PC-SESN-YR > 1998
       && LC0BM001.LC0B-PC-SESN-YR < 2020)
          /* next sentence - year valid*/
      else
        set LC0BM001.LC0B-PC-SESN-YR cursor, bold; /* Highlight year*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(38); /* date invalid*/
      end
    else
      set LC0BM001.LC0B-PC-SESN-YR cursor, bold; /* Highlight year*/
      LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
      converseLib.validationFailed(138); /* not allowed for this gpc*/
    end
  else
    LC0BW00.PC-SESN-YR = 0; /* year not required*/
  end

    /* ------------------------------------------------------------*/
                     /* SEASON CODE CHECK*/
    /* ------------------------------------------------------------*/

  LC0BW00.XSE-SESN-CD = LC0BM001.LC0B-XSE-SESN-CD;
  if (LC0BM001.LC0B-XSE-SESN-CD > " ") /* If nothing in SEASON*/
    if (LC0BM001.XGPCD == "03") /* apparel*/
      if (LC0BM001.LC0B-XSE-SESN-CD in XSETBL.XSECD /* If season valid*/
       && XSETBL.XSECOVFL[sysVar.arrayIndex] == "N" /* not a carryover*/
       && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
          /* next sentence - season valid*/
      else
        set LC0BM001.LC0B-XSE-SESN-CD cursor, bold; /* Highlight SEASON*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(129); /* season invalid*/
      end
    else
      if (LC0BM001.LC0B-XSE-SESN-CD != "  ")
        set LC0BM001.LC0B-XSE-SESN-CD cursor, bold; /* Highlight SEASON*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(138); /* season not allowed*/
      end
    end
  else
         /* next sentence - season not required*/
  end

    /* ------------------------------------------------------------*/
                      /* po id dates*/
    /* ------------------------------------------------------------*/

  LC0BW00.LC0BWPCCYY = LC0BM001.LC0BMPCCYY;
  LC0BW00.LC0BWPMO = LC0BM001.LC0BMPMO;
  LC0BW00.LC0BWDMO = LC0BM001.LC0BMDMO;
  if (LC0BM001.LC0BMPCCYY > 0
   || LC0BM001.LC0BMPMO > 0
   || LC0BM001.LC0BMDMO > 0)
    if (LC0BM001.XGPCD == "02")
      if (LC0BM001.LC0BMDMO >= 01
       && LC0BM001.LC0BMDMO <= 12)
          /* next sentence - dlvr mo valid*/
      else
        set LC0BM001.LC0BMDMO cursor, bold; /* Highlight year*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(421); /* po id invalid*/
      end
      if (LC0BM001.LC0BMPMO >= 01
       && LC0BM001.LC0BMPMO <= 12)
          /* next sentence - prod mo valid*/
      else
        set LC0BM001.LC0BMPMO cursor, bold; /* Highlight year*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(421); /* po id invalid*/
      end
      if (LC0BM001.LC0BMPCCYY > 1998
       && LC0BM001.LC0BMPCCYY < 2020)
          /* next sentence - year valid*/
      else
        set LC0BM001.LC0BMPCCYY cursor, bold; /* Highlight year*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(365); /* po id invalid*/
      end
    else
      set LC0BM001.LC0BMDMO cursor, bold; /* Highlight delv mo*/
      set LC0BM001.LC0BMPMO cursor, bold; /* Highlight prod mo*/
      set LC0BM001.LC0BMPCCYY cursor, bold; /* Highlight year*/
      LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
      converseLib.validationFailed(138); /* not allowed for this gpc*/
    end
  else
         /* po id is not required*/
    LC0BW00.LC0BWPCCYY = 0;
    LC0BW00.LC0BWPMO = 0;
    LC0BW00.LC0BWDMO = 0;
  end

    /* ------------------------------------------------------------*/
                      /* factory type*/
    /* ------------------------------------------------------------*/

  LC0BW00.FY-FCTY-TYP-CD = LC0BM001.FY-FCTY-TYP-CD;
  if (LC0BM001.FY-FCTY-TYP-CD > " ") /* If something in factory type*/
    if (LC0BM001.XGPCD == "03")
      if (LC0BM001.FY-FCTY-TYP-CD == "A"
       || LC0BM001.FY-FCTY-TYP-CD == "AJ"
       || LC0BM001.FY-FCTY-TYP-CD == "E")
          /* next sentence - factory type valid*/
      else
        set LC0BM001.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(570); /* factory type missing*/
      end
    else
      if (LC0BM001.XGPCD == "02")
        if (LC0BM001.FY-FCTY-TYP-CD == "F"
         || LC0BM001.FY-FCTY-TYP-CD == "E"
         || LC0BM001.FY-FCTY-TYP-CD == "FJ"
         || LC0BM001.FY-FCTY-TYP-CD == "EJ")
            /* next sentence - factory type valid*/
        else
          set LC0BM001.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
          LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
          converseLib.validationFailed(570); /* factory type missing*/
        end
      else
        set LC0BM001.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
        LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
        converseLib.validationFailed(570); /* factory type missing*/
      end
    end
  else
    set LC0BM001.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
    LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
    converseLib.validationFailed(570); /* factory type missing*/
  end
    /* ------------------------------------------------------------*/
                      /* po region code*/
    /* ------------------------------------------------------------*/

  LC0BW00.PO-REG-CD = LC0BM001.PO-REG-CD;
  LC0BW00.XGPCD = LC0BM001.XGPCD;
  if (LC0BM001.PO-REG-CD > " ") /* If something in region*/
    LC0BS40();
    if (SQLCA.VAGen_SQLCODE == 0)
      LC0BW00.PO-REG-DESC = VPOREG01.PO-REG-DESC;
    else
      set LC0BM001.PO-REG-CD cursor, bold; /* Highlight region*/
      LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
      converseLib.validationFailed(528); /* Must have valid region*/
    end
  else
    set LC0BM001.PO-REG-CD cursor, bold; /* Highlight region*/
    LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
    converseLib.validationFailed(528); /* Must have valid region*/
  end

    /* ------------------------------------------------------------*/
                        /* GPC CODE CHECK*/
    /* ------------------------------------------------------------*/

  if (LC0BM001.XGPCD != COMMAREA.XGPCD)
    COMMAREA.XGPCD = LC0BM001.XGPCD;
  end

  if (LC0BM001.XGPCD > " ") /* If something in GPC code*/
    if (LC0BM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
      COMMAREA.XGPCD = LC0BM001.XGPCD;
      LC0BW00.XGPCD = LC0BM001.XGPCD;
    else
      set LC0BM001.XGPCD cursor, bold; /* Highlight GPC code*/
      LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
      converseLib.validationFailed(28); /* Must have valid GPC code*/
    end
  else
    set LC0BM001.XGPCD cursor, bold; /* Highlight GPC code*/
    LC0BM001.XXXPRCNM = "LC0B152"; /* Process name*/
    converseLib.validationFailed(28); /* Must have valid GPC code*/
  end

    /* ------------------------------------------------------------*/
                        /* request data if no errors*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    LC0BW00.LC0BWSWR = "Y"; /* Turn on request for data*/
  end

end // end LC0B152

// Process valid input request
Function LC0B160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (converseVar.eventKey is pf7) /* Scroll baCk requested*/
      LC0BW00.LC0BWTSP = LC0BW00.LC0BWTSP - 1; /* Decrement page number*/
    end

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      LC0BW00.LC0BWTSP = LC0BW00.LC0BWTSP + 1; /* Increment page number*/
    end

    if (converseVar.eventKey is pf13) /* add new entry requested*/
      LC0B161(); /* validate add request/security*/
    end
  end

end // end LC0B160

// Process selected input request
Function LC0B161()

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (LC0BM001.XGPCD > " ") /* If something in GPC code*/
    if (LC0BM001.XGPCD in XGPTBL.XGPCD /* If GPC code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If GPC code active*/
      COMMAREA.XGPCD = LC0BM001.XGPCD;
      LC0BW00.XGPCD = LC0BM001.XGPCD;
      LC0BW00.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      set LC0BM001.XGPCD cursor, bold; /* Highlight GPC code*/
      LC0BM001.XXXPRCNM = "LC0B161"; /* Process name*/
      converseLib.validationFailed(28); /* Must have valid GPC code*/
      return; /* return*/
    end
  else
    set LC0BM001.XGPCD cursor, bold; /* Highlight GPC code*/
    LC0BM001.XXXPRCNM = "LC0B161"; /* Process name*/
    converseLib.validationFailed(28); /* Must have valid GPC code*/
    return; /* return*/
  end

   /* ------------------------------------------------------------*/
   /* get the po region desc.*/
   /* ------------------------------------------------------------*/

  LC0BS40();
  if (SQLCA.VAGen_SQLCODE == 0)
    LC0BW00.PO-REG-DESC = VPOREG01.PO-REG-DESC;
  else
    set LC0BM001.PO-REG-CD cursor, bold; /* Highlight region*/
    LC0BM001.XXXPRCNM = "LC0B161"; /* Process name*/
    converseLib.validationFailed(528); /* Must have valid region*/
    return; /* return*/
  end

   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (LC0BM001.XGPCD == "02")
    if (COMMAREA.CAALVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      converseLib.validationFailed(104); /* ===> user does not have add authority*/
      LC0BM001.XXXPRCNM = "LC0B161"; /* Process name*/
      return;
    end
  end

  if (LC0BM001.XGPCD == "03")
    if (COMMAREA.CAALVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      converseLib.validationFailed(104); /* ===> user does not have add authority*/
      LC0BM001.XXXPRCNM = "LC0B161"; /* Process name*/
      return;
    end
  end

   /* ---------------------------------------------------------*/
   /* Request add screen*/
   /* ---------------------------------------------------------*/

  LC0BW00.LC0BWMAP = "2"; /* ==>Map to be displayed switch*/
  LC0BW00.LC0BWFNC = "A"; /* ==>set the add function flag*/
  LC0BW00.LC0BWSWR = "Y"; /* ==>request data switch*/
  LC0BW00.LC0BWSWF = "Y"; /* ==>format the map*/
  return;
   /* **                                                        ***/
   /* ********************** End of lc0b161 ***********************/
end // end LC0B161

// L/C Bank Add Map
Function LC0B200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all PF key selections, "EZEFLO" is used to exit and*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  LC0B220(); /* Format and display the map*/

  LC0B230(); /* Check attention identifier*/

  LC0B240(); /* Reset fields to normal intensity*/

  LC0B250(); /* Verify the entered data*/

  LC0B260(); /* Process valid input request*/

end // end LC0B200

// Format and display the map
Function LC0B220()

   /* ------------------------------------------------------------*/
   /* clear map and restore entered fields.*/
   /* If no error to display, format and display selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* no message to display*/
    set LC0BM002 initial; /* Clear map output area*/
  else
    set LC0BM002 alarm; /* Indicate sound alarm*/
  end

  LC0BM002.XGPCD = LC0BW00.XGPCD;
  LC0BM002.XGPDESC = LC0BW00.XGPDESC;
  LC0BM002.PO-REG-CD = LC0BW00.PO-REG-CD;
  LC0BM002.PO-REG-DESC = LC0BW00.PO-REG-DESC;
  LC0BM002.FY-FCTY-TYP-CD = LC0BW02.FY-FCTY-TYP-CD;
  LC0BM002.LC0BMPCCYY = LC0BW02.LC0BWPCCYY; /* po id cent/year*/
  LC0BM002.LC0BMPMO = LC0BW02.LC0BWPMO; /* po id prod month*/
  LC0BM002.LC0BMDMO = LC0BW02.LC0BWDMO; /* po id delvr month*/
  LC0BM002.XSE-SESN-CD = LC0BW02.XSE-SESN-CD;
  LC0BM002.PC-SESN-YR = LC0BW02.PC-SESN-YR;
  LC0BM002.XIB-IBANK-CD = LC0BW02.XIB-IBANK-CD;
  LC0BM002.XIB-IBANK-NM = LC0BW02.XIB-IBANK-NM;
  LC0BM002.XIB-IBANK-SHORT-NM = LC0BW02.XIB-IBANK-SHORT-NM;
  LC0BM002.PC-PO-OT-CD = LC0BW02.PC-PO-OT-CD;
  LC0BM002.PC-XCT-ORIG-CD = LC0BW02.PC-XCT-ORIG-CD;
  LC0BM002.FY-FCTY-CD = LC0BW02.FY-FCTY-CD;
  LC0BM002.PC-DEST-XCT-CD = LC0BW02.PC-DEST-XCT-CD;

  LC0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse LC0BM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CATOAP = LC0BM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = LC0BM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
    /* CHECK AND SEE IF POP-UP WINDOW REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    LC0B222();
  end

end // end LC0B220

// Check for ? by User
Function LC0B222()


   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (LC0BM002.XSE-SESN-CD == "?"    /* if ? in season code*/
   || LC0BM002.XIB-IBANK-CD == "?"   /* if ? in issue bank field*/
   || LC0BM002.PC-XCT-ORIG-CD == "?" /* if ? in mco field*/
   || LC0BM002.PC-DEST-XCT-CD == "?") /* if ? in dest ctry field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end


     /* *******************************************/
     /* season code  - xse          **/
     /* *******************************************/

  if (LC0BM002.XSE-SESN-CD == "?") /* if ? in season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "    SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform season window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW02.XSE-SESN-CD = XSETBL.XSECD[XX0XWPIX];
      set LC0BM002.XSE-SESN-CD cursor, modified;
    else
      LC0BW02.XSE-SESN-CD = " "; /* clear fields*/
      set LC0BM002.XSE-SESN-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* ibank code - xib            **/
     /* *******************************************/

  if (LC0BM002.XIB-IBANK-CD == "?") /* if ? in issue bank code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "   L/C ISSUING BANK CODES "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXIB01(); /* perform issue bank window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW02.XIB-IBANK-CD = XIBTBL.XIB-IBANK-CD[XX0XWPIX];
      LC0BW02.XIB-IBANK-NM = XIBTBL.XIB-IBANK-NM[XX0XWPIX];
      LC0BW02.XIB-IBANK-SHORT-NM = XIBTBL.XIB-IBANK-SHORT-NM[XX0XWPIX];
      set LC0BM002.XIB-IBANK-CD cursor, modified;
    else
      LC0BW02.XIB-IBANK-CD = " "; /* clear fields*/
      LC0BW02.XIB-IBANK-NM = " "; /* clear fields*/
      LC0BW02.XIB-IBANK-SHORT-NM = " "; /* clear fields*/
      set LC0BM002.XIB-IBANK-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* manf ctry orig - xct        **/
     /* *******************************************/

  if (LC0BM002.PC-XCT-ORIG-CD == "?") /* if ? in mco field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "MANUFACTURING COUNTRY"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW02.PC-XCT-ORIG-CD = XCTTBL.XCTCD[XX0XWPIX];
      set LC0BM002.PC-XCT-ORIG-CD cursor, modified;
    else
      LC0BW02.PC-XCT-ORIG-CD = " "; /* clear field*/
      set LC0BM002.PC-XCT-ORIG-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* destination ctry - xct      **/
     /* *******************************************/

  if (LC0BM002.PC-DEST-XCT-CD == "?") /* if ? in dest xct field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "DESTINATION COUNTRY"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform country window*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      LC0BW02.PC-DEST-XCT-CD = XCTTBL.XCTCD[XX0XWPIX];
      set LC0BM002.PC-DEST-XCT-CD cursor, modified;
    else
      LC0BW02.PC-DEST-XCT-CD = " "; /* clear field*/
      set LC0BM002.PC-DEST-XCT-CD cursor, modified;
    end
  end

     /* *******************************************/
     /* redisplay map                **/
     /* *******************************************/

  converseLib.clearScreen();
   /* restore the original map*/
  LC0BM002.XXXPRCNM = "LC0B222"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/
  exit stack; /* Exit to redisplay the map*/

end // end LC0B222

// Check attention identifier
Function LC0B230()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set LC0BM002 initial; /* Clear map before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end

  if (LC0BM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      LC0BS01(); /* Purge any temporary storage*/
      COMMAREA.CATOAP = LC0BM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = LC0BM002.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

      LC0BW00.LC0BWSWR = "Y"; /* Set request for data to yes*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      LC0BM002.XXXPRCNM = "LC0B230"; /* Process name*/
    end

    set LC0BM002.CATOAP cursor, modified, bold; /* Highlight*/
    LC0BM002.XXXPRCNM = "LC0B230"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "LC0BM002"; /* Move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item field*/
    end
    LC0BS01(); /* Purge any temporary storage*/
    XSPCS01(); /* Exit to another application*/
    LC0BM002.XXXPRCNM = "LC0B230"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "LC0A"; /* Set to l/c application*/
    LC0BS01(); /* Purge temp. storage*/
    XSPCS01(); /* Exit to another application*/
    LC0BM002.XXXPRCNM = "LC0B230"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf5) /* PF5 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = " "; /* clear field*/
    LC0BW00.LC0BWSWR = "N"; /* Initialize request for data*/
    LC0BW00.LC0BWMAP = "1"; /* Initialize list map*/
    LC0BW00.LC0BWFNC = " "; /* Set function code to spaces*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed and*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/
    LC0BM002.XXXPRCNM = "LC0B230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/

  end

end // end LC0B230

// Reset highlighted fields
Function LC0B240()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set LC0BM002.XGPCD initialAttributes; /* Gpc code*/
  set LC0BM002.XGPDESC initialAttributes; /* Gpc desc*/
  set LC0BM002.PO-REG-CD initialAttributes; /* po region*/
  set LC0BM002.PO-REG-DESC initialAttributes; /* po region desc*/
  set LC0BM002.FY-FCTY-TYP-CD initialAttributes; /* factory type*/
  set LC0BM002.LC0BMPCCYY initialAttributes; /* po id year*/
  set LC0BM002.LC0BMPMO initialAttributes; /* po id make month*/
  set LC0BM002.LC0BMDMO initialAttributes; /* po id dlvr month*/
  set LC0BM002.XSE-SESN-CD initialAttributes; /* Season Range code*/
  set LC0BM002.PC-SESN-YR initialAttributes; /* Season year*/
  set LC0BM002.XIB-IBANK-CD initialAttributes; /* Bank Code*/
  set LC0BM002.XIB-IBANK-NM initialAttributes; /* Bank Code name*/
  set LC0BM002.XIB-IBANK-SHORT-NM initialAttributes; /* Bank Code short name*/
  set LC0BM002.PC-PO-OT-CD initialAttributes; /* po type*/
  set LC0BM002.PC-XCT-ORIG-CD initialAttributes; /* mco*/
  set LC0BM002.FY-FCTY-CD initialAttributes; /* mco*/
  set LC0BM002.PC-DEST-XCT-CD initialAttributes; /* mco*/
  set LC0BM002.LC0BM-PF9-CONFIRM initialAttributes; /* pf9*/
  set LC0BM002.CATOAP initialAttributes; /* Commarea option*/
  set LC0BM002.CAITEM initialAttributes; /* Commarea item data*/

end // end LC0B240

// Verify the entered data
Function LC0B250()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (LC0BM002.CAITEM > " ") /* Application data was entered*/
    set LC0BM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    LC0BM001.XXXPRCNM = "LC0B250"; /* Process name*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    LC0B251(); /* Verify data values*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      LC0B252(); /* Verify add request*/
    end
  end

  if (converseVar.validationMsgNum == 384 /* all data was fine and pf9 pressed.*/
   && converseVar.eventKey is pf9         
   && LC0BW00.LC0BW-PF9-CONFIRM == "Y")  
      /* next sentence -  insert row*/
  else
    exit stack; /* redisplay map with errors*/
  end

end // end LC0B250

// Verify any entered data
Function LC0B251()

   /* ------------------------------------------------------------*/
   /* Check if Any Data changed when pf9 entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   && LC0BW02.FY-FCTY-TYP-CD == LC0BM002.FY-FCTY-TYP-CD
   && LC0BW02.LC0BWPCCYY == LC0BM002.LC0BMPCCYY
   && LC0BW02.LC0BWPMO == LC0BM002.LC0BMPMO
   && LC0BW02.LC0BWDMO == LC0BM002.LC0BMDMO
   && LC0BW02.XSE-SESN-CD == LC0BM002.XSE-SESN-CD
   && LC0BW02.PC-SESN-YR == LC0BM002.PC-SESN-YR
   && LC0BW02.XIB-IBANK-CD == LC0BM002.XIB-IBANK-CD
   && LC0BW02.XIB-IBANK-NM == LC0BM002.XIB-IBANK-NM
   && LC0BW02.XIB-IBANK-SHORT-NM == LC0BM002.XIB-IBANK-SHORT-NM
   && LC0BW02.PC-PO-OT-CD == LC0BM002.PC-PO-OT-CD
   && LC0BW02.PC-XCT-ORIG-CD == LC0BM002.PC-XCT-ORIG-CD
   && LC0BW02.FY-FCTY-CD == LC0BM002.FY-FCTY-CD
   && LC0BW02.PC-DEST-XCT-CD == LC0BM002.PC-DEST-XCT-CD)
    LC0BW00.LC0BW-PF9-CONFIRM = "Y"; /* no changes and pf9 pressed*/
  else
    LC0BW00.LC0BW-PF9-CONFIRM = "N";
  end

   /* ------------------------------------------------------------*/
   /* Optional Data Elements*/
   /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
                      /* Dest Country*/
    /* ------------------------------------------------------------*/

  LC0BW02.PC-DEST-XCT-CD = LC0BM002.PC-DEST-XCT-CD;
  if (LC0BM002.PC-DEST-XCT-CD > " ") /* If something in dest ctry*/
    if (LC0BM002.PC-DEST-XCT-CD in XCTTBL.XCTCD /* If in xct*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If xct code active*/
          /* next sentence - dest ctry valid*/
    else
      set LC0BM002.PC-DEST-XCT-CD cursor, bold; /* Highlight dest ctry*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(49); /* Must have valid dest ctry*/
    end
  else
          /* next sentence - dest ctry not required*/
  end

    /* ------------------------------------------------------------*/
                      /* factory code*/
    /* ------------------------------------------------------------*/

  LC0BW02.FY-FCTY-CD = LC0BM002.FY-FCTY-CD;
  LC0BW00.XGPCD = LC0BM002.XGPCD;
  if (LC0BM002.FY-FCTY-CD > " ") /* If something in factory*/
    LC0BS41(); /* read factory table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VFCTY003.XXXSTAT == "A") /* If factory active*/
        /* next sentence -  factory valid*/
      else
        set LC0BM002.FY-FCTY-CD cursor, bold; /* Highlight factory*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(32); /* Must have valid factory*/
      end
    else
      set LC0BM002.FY-FCTY-CD cursor, bold; /* Highlight factory*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(32); /* Must have valid factory*/
    end
  else
      /* next sentence -  factory not required*/
  end

    /* ------------------------------------------------------------*/
                      /* MCO code*/
    /* ------------------------------------------------------------*/

  LC0BW02.PC-XCT-ORIG-CD = LC0BM002.PC-XCT-ORIG-CD;
  if (LC0BM002.PC-XCT-ORIG-CD > " ") /* If something in mco*/
    if (LC0BM002.PC-XCT-ORIG-CD in XCTTBL.XCTCD /* If in xct*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If xct code active*/
          /* next sentence - mco valid*/
    else
      set LC0BM002.PC-XCT-ORIG-CD cursor, bold; /* Highlight mco*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(49); /* Must have valid mco*/
    end
  else
          /* next sentence - mco not required*/
  end

    /* ------------------------------------------------------------*/
                      /* PO Type Code*/
    /* ------------------------------------------------------------*/

  LC0BW02.PC-PO-OT-CD = LC0BM002.PC-PO-OT-CD;
  LC0BW00.XGPCD = LC0BM002.XGPCD;
  if (LC0BM002.PC-PO-OT-CD > " ") /* If something in po type*/
    LC0BS42(); /* read po type table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VPOTYP01.XXXSTAT == "A") /* If po type active*/
        /* next sentence -  po type valid*/
      else
        set LC0BM002.PC-PO-OT-CD cursor, bold; /* Highlight po type*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(124); /* Must have valid po type*/
      end
    else
      set LC0BM002.PC-PO-OT-CD cursor, bold; /* Highlight po type*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(124); /* Must have valid po type*/
    end
  else
      /* next sentence -  po type not required*/
  end


   /* ------------------------------------------------------------*/
   /* Required Data Elements*/
   /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
                      /* Ibank code*/
    /* ------------------------------------------------------------*/

  LC0BW02.XIB-IBANK-CD = LC0BM002.XIB-IBANK-CD;
  if (LC0BM002.XIB-IBANK-CD > " ") /* If something in ibank*/
    if (LC0BM002.XIB-IBANK-CD in XIBTBL.XIB-IBANK-CD /* If in xib*/
     && XIBTBL.XXXSTAT[sysVar.arrayIndex] == "A")    /* If xib code active*/
      LC0BW02.XIB-IBANK-NM = XIBTBL.XIB-IBANK-NM[sysVar.arrayIndex];
      LC0BW02.XIB-IBANK-SHORT-NM = XIBTBL.XIB-IBANK-SHORT-NM[sysVar.arrayIndex];
    else
      set LC0BM002.XIB-IBANK-CD cursor, bold; /* Highlight ibank*/
      LC0BW02.XIB-IBANK-NM = " ";
      LC0BW02.XIB-IBANK-SHORT-NM = " ";
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(569); /* Must have valid ibank*/
    end
  else
    set LC0BM002.XIB-IBANK-CD cursor, bold; /* Highlight ibank*/
    LC0BW02.XIB-IBANK-NM = " ";
    LC0BW02.XIB-IBANK-SHORT-NM = " ";
    LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
    converseLib.validationFailed(569); /* Must have valid ibank*/
  end

    /* ------------------------------------------------------------*/
                      /* season year*/
    /* ------------------------------------------------------------*/

  LC0BW02.PC-SESN-YR = LC0BM002.PC-SESN-YR;
  if (LC0BM002.XGPCD == "03")
    if (LC0BM002.PC-SESN-YR != 0) /* If something in year*/
      if (LC0BM002.PC-SESN-YR > 1998
       && LC0BM002.PC-SESN-YR < 2020)
          /* next sentence - year valid*/
      else
        set LC0BM002.PC-SESN-YR cursor, bold; /* Highlight year*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(38); /* date invalid*/
      end
    else
      set LC0BM002.PC-SESN-YR cursor, bold; /* Highlight year*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(38); /* date invalid*/
    end
  else
    if (LC0BM002.PC-SESN-YR != 0) /* If something in year*/
      set LC0BM002.PC-SESN-YR cursor, bold; /* Highlight year*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(138); /* not allowed for this gpc*/
    else
      LC0BW02.PC-SESN-YR = 0; /* year not required*/
    end
  end

    /* ------------------------------------------------------------*/
                     /* SEASON CODE CHECK*/
    /* ------------------------------------------------------------*/

  LC0BW02.XSE-SESN-CD = LC0BM002.XSE-SESN-CD;
  if (LC0BM002.XGPCD == "03") /* apparel*/
    if (LC0BM002.XSE-SESN-CD != " ") /* If something in season*/
      if (LC0BM002.XSE-SESN-CD in XSETBL.XSECD      /* If season valid*/
       && XSETBL.XSECOVFL[sysVar.arrayIndex] == "N" /* not a carryover*/
       && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
          /* next sentence - season valid*/
      else
        set LC0BM002.XSE-SESN-CD cursor, bold; /* Highlight SEASON*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(129); /* season invalid*/
      end
    else
      set LC0BM002.XSE-SESN-CD cursor, bold; /* Highlight SEASON*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(129); /* season invalid*/
    end
  else
    if (LC0BM002.XSE-SESN-CD != " ") /* If something in season*/
        /* season not allowed*/
      set LC0BM002.XSE-SESN-CD cursor, bold; /* Highlight SEASON*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(138); /* season not allowed*/
    end
  end

    /* ------------------------------------------------------------*/
                      /* po id dates*/
    /* ------------------------------------------------------------*/

  LC0BW02.LC0BWPCCYY = LC0BM002.LC0BMPCCYY;
  LC0BW02.LC0BWPMO = LC0BM002.LC0BMPMO;
  LC0BW02.LC0BWDMO = LC0BM002.LC0BMDMO;
  if (LC0BM002.XGPCD == "02")
    if (LC0BM002.LC0BMPCCYY > 0
     || LC0BM002.LC0BMPMO > 0
     || LC0BM002.LC0BMDMO > 0)
      if (LC0BM002.LC0BMDMO >= 01
       && LC0BM002.LC0BMDMO <= 12)
          /* next sentence - dlvr mo valid*/
      else
        set LC0BM002.LC0BMDMO cursor, bold; /* Highlight year*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(421); /* po id invalid*/
      end
      if (LC0BM002.LC0BMPMO >= 01
       && LC0BM002.LC0BMPMO <= 12)
          /* next sentence - prod mo valid*/
      else
        set LC0BM002.LC0BMPMO cursor, bold; /* Highlight year*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(421); /* po id invalid*/
      end
      if (LC0BM002.LC0BMPCCYY > 1998
       && LC0BM002.LC0BMPCCYY < 2020)
          /* next sentence - year valid*/
      else
        set LC0BM002.LC0BMPCCYY cursor, bold; /* Highlight year*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(365); /* po id invalid*/
      end
    else
      set LC0BM002.LC0BMDMO cursor, bold; /* Highlight delv mo*/
      set LC0BM002.LC0BMPMO cursor, bold; /* Highlight prod mo*/
      set LC0BM002.LC0BMPCCYY cursor, bold; /* Highlight year*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(313); /* po id invalid*/
    end
  else
    if (LC0BM002.LC0BMPCCYY > 0
     || LC0BM002.LC0BMPMO > 0
     || LC0BM002.LC0BMDMO > 0)
      set LC0BM002.LC0BMDMO cursor, bold; /* Highlight delv mo*/
      set LC0BM002.LC0BMPMO cursor, bold; /* Highlight prod mo*/
      set LC0BM002.LC0BMPCCYY cursor, bold; /* Highlight year*/
      LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
      converseLib.validationFailed(138); /* not allowed for this gpc*/
    else
          /* po id not required*/
      LC0BW02.LC0BWPCCYY = 0;
      LC0BW02.LC0BWPMO = 0;
      LC0BW02.LC0BWDMO = 0;
    end
  end

    /* ------------------------------------------------------------*/
                      /* factory type*/
    /* ------------------------------------------------------------*/

  LC0BW02.FY-FCTY-TYP-CD = LC0BM002.FY-FCTY-TYP-CD;
  if (LC0BM002.FY-FCTY-TYP-CD > " ") /* If something in factory type*/
    if (LC0BM002.XGPCD == "03")
      if (LC0BM002.FY-FCTY-TYP-CD == "A"
       || LC0BM002.FY-FCTY-TYP-CD == "AJ"
       || LC0BM002.FY-FCTY-TYP-CD == "E")
          /* next sentence - factory type valid*/
      else
        set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(570); /* factory type missing*/
      end
    else
      if (LC0BM002.XGPCD == "02")
        if (LC0BM002.FY-FCTY-TYP-CD == "F"
         || LC0BM002.FY-FCTY-TYP-CD == "E"
         || LC0BM002.FY-FCTY-TYP-CD == "FJ"
         || LC0BM002.FY-FCTY-TYP-CD == "EJ")
            /* next sentence - factory type valid*/
        else
          set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
          LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
          converseLib.validationFailed(570); /* factory type missing*/
        end
      else
        set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
        LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
        converseLib.validationFailed(570); /* factory type missing*/
      end
    end
  else
    set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight type*/
    LC0BM002.XXXPRCNM = "LC0B251"; /* Process name*/
    converseLib.validationFailed(570); /* factory type missing*/
  end

end // end LC0B251

// Verify any entered data
Function LC0B252()

   /* ------------------------------------------------------------*/
   /* data cross checks and existing entry checks*/
   /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
                      /* factory code and type*/
    /* ------------------------------------------------------------*/

  if (LC0BM002.FY-FCTY-CD > " ") /* If something in factory*/
    if (VFCTY003.FY-FCTY-TYP-CD == LC0BM002.FY-FCTY-TYP-CD) /* types match*/
        /* next sentence -  factory type valid*/
    else
      set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight factory type*/
      LC0BM002.XXXPRCNM = "LC0B252"; /* Process name*/
      converseLib.validationFailed(571); /* factory type does not match factory*/
    end
  end

    /* ------------------------------------------------------------*/
                      /* factory code and mco*/
    /* ------------------------------------------------------------*/

  if (LC0BM002.FY-FCTY-CD > " " /* If something in factory*/
   && LC0BM002.PC-XCT-ORIG-CD > " ") /* and something in the mco*/
    set LC0BM002.FY-FCTY-CD cursor, bold; /* Highlight factory*/
    set LC0BM002.PC-XCT-ORIG-CD cursor, bold; /* Highlight mco*/
    LC0BM002.XXXPRCNM = "LC0B252"; /* Process name*/
    converseLib.validationFailed(573); /* factory and mco mutially exc.*/
  end

    /* ------------------------------------------------------------*/
                      /* 1 optional field required*/
    /* ------------------------------------------------------------*/

  if (LC0BM002.PC-PO-OT-CD > " "    /* If something in po type*/
   || LC0BM002.PC-XCT-ORIG-CD > " " /* or something in the mco*/
   || LC0BM002.FY-FCTY-CD > " "     /* or something in factory*/
   || LC0BM002.PC-DEST-XCT-CD > " ") /* or something in the dest xct*/
        /* next sentence -  1 optional field entered*/
  else
    set LC0BM002.PC-PO-OT-CD cursor, bold; /* Highlight po type*/
    LC0BM002.XXXPRCNM = "LC0B252"; /* Process name*/
    converseLib.validationFailed(572); /* one field required.*/
  end

    /* ------------------------------------------------------------*/
                      /* Check for existing entry.*/
    /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If No errors*/
    LC0BS50(); /* read lc bank table*/
    if (SQLCA.VAGen_SQLCODE == 100)
      set LC0BM002.LC0BM-PF9-CONFIRM protect, bold; /* Highlight pf9*/
      converseLib.validationFailed(384); /* require pf9 to process*/
    else
      if (VLCBNK01.XXX-STAT == "A")
        set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight factory type*/
        LC0BM002.XXXPRCNM = "LC0B252"; /* Process name*/
        converseLib.validationFailed(19); /* duplicate active entry*/
      else
        set LC0BM002.FY-FCTY-TYP-CD cursor, bold; /* Highlight factory type*/
        LC0BM002.XXXPRCNM = "LC0B252"; /* Process name*/
        converseLib.validationFailed(20); /* duplicate inactive entry*/
      end
    end
  else
      /* next sentence -  errors - redisplay map*/
  end

end // end LC0B252

// Process valid input request
Function LC0B260()
   /* ------------------------------------------------------------*/
      /* add the row to the data base table*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* add the table row.*/
   /* ------------------------------------------------------------*/

  LC0BS51(); /* Add table row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  set LC0BM-PF9-CONFIRM initialAttributes; /* darken pf9*/
  converseLib.validationFailed(23); /* database updated.*/
  LC0BM001.XXXPRCNM = "LC0B260"; /* Process name*/


   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* **                                                        ***/
   /* ********************** End of lc0b260 ***********************/
end // end LC0B260

// Purge Temporary Storage
Function LC0BS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "LC0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (LC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No Error was found*/
    LC0BW00.LC0BWTSP = 0; /* Reset current page number*/
    LC0BW00.TA5TSQIX = 0; /* Reset highest page number*/

  else
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "LC0BS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

end // end LC0BS01

// Add Row To Temporary Storage
Function LC0BS02()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

   /* 14 rows * 25 bytes plus 4 rdw = 354 tsl*/
  LC0BW01.LC0BWLEN = 354; /* Temporary storage length*/

  TA5REC.TA5APPID = "LC0B"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (LC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/
    LC0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    LC0BW00.LC0BWIXM = 1; /* Reset display line number*/
    set LC0BW01 empty; /* Clears temporary storage record*/
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "LC0BS02"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    LC0BM001.XXXPRCNM = "LC0BS02"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end LC0BS02

// get Next Page from Temp Stor.
Function LC0BS03()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

   /* 14 rows * 25 bytes plus 4 rdw = 354 tsl*/
  LC0BW01.LC0BWLEN = 354; /* Temporary storage length*/
  TA5REC.TA5APPID = "LC0B"; /* Application identification*/
  TA5REC.TA5TSQIX = LC0BW00.LC0BWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (LC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* No error was found*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "LC0BS03"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    LC0BM001.XXXPRCNM = "LC0BS03"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end LC0BS03

// open lcbnk01 cursor
Function LC0BS10()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VLCBNK01 empty; /* clear bank control record*/
  VLCBNK01.XGPCD = LC0BM001.XGPCD; /* Search key*/
  VLCBNK01.PO-REG-CD = LC0BM001.PO-REG-CD;
  VLCBNK01.FY-FCTY-TYP-CD = LC0BM001.FY-FCTY-TYP-CD;

  if (LC0BM001.LC0BMPCCYY == 0)
    VLCBNK01.PC-PO-ID-MO-RNG = -1;
  else
    LC0BW00.LC0BWPCCYY = LC0BM001.LC0BMPCCYY;
    LC0BW00.LC0BWPMO = LC0BM001.LC0BMPMO;
    LC0BW00.LC0BWDMO = LC0BM001.LC0BMDMO;
    VLCBNK01.PC-PO-ID-MO-RNG = LC0BW00.LC0B-PC-PO-ID-MO-RNG;
  end

  if (LC0BM001.LC0B-XSE-SESN-CD > " ")
    VLCBNK01.XSE-SESN-CD = LC0BM001.LC0B-XSE-SESN-CD;
  else
    VLCBNK01.XSE-SESN-CD = "*";
  end

  if (LC0BM001.LC0B-PC-SESN-YR == 0)
    VLCBNK01.PC-SESN-YR = -1;
  else
    VLCBNK01.PC-SESN-YR = LC0BM001.LC0B-PC-SESN-YR;
  end

  if (LC0BM001.LC0B-XIB-IBANK-CD > " ")
    VLCBNK01.XIB-IBANK-CD = LC0BM001.LC0B-XIB-IBANK-CD;
  else
    VLCBNK01.XIB-IBANK-CD = "*";
  end

   /* Get only active status*/
  VLCBNK01.XXX-STAT = "A";
  call "VLCBNK01" ("S1", SQLCA, VLCBNK01) {isNoRefresh = yes, isExternal = yes}; /* Select*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

       /* NEXT SENTENCE*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "LC0BS10"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF LC BANK ROWS";
    TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VLCBNK01"; /* Table view name*/
    TA1REC.TA1TBLKE = VLCBNK01.XGPCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    LC0BM001.XXXPRCNM = "LC0BS10"; /* Process name*/
  end

end // end LC0BS10

// fetch next lcbnk01 record
Function LC0BS11()

   /* ------------------------------------------------------------*/
   /* Fetch the  row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VLCBNK01" ("N1", SQLCA, VLCBNK01) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

        /* NEXT SENTENCE            ;*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      LC0BW00.LC0BWSWC = "Y"; /* Indicate end of file*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "LC0BS11"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VLCBNK01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      LC0BM001.XXXPRCNM = "LC0BS11"; /* Process name*/
    end
  end

end // end LC0BS11

// move lcbnk01 data to map1 ws.
Function LC0BS12()

  LC0BW01.PC-PO-ID-MO-RNG[LC0BWIXM] = VLCBNK01.PC-PO-ID-MO-RNG;
  LC0BW01.XSE-SESN-CD[LC0BWIXM] = VLCBNK01.XSE-SESN-CD;
  LC0BW01.PC-SESN-YR[LC0BWIXM] = VLCBNK01.PC-SESN-YR;
  LC0BW01.PC-PO-OT-CD[LC0BWIXM] = VLCBNK01.PC-PO-OT-CD;
  LC0BW01.FY-FCTY-CD[LC0BWIXM] = VLCBNK01.FY-FCTY-CD;
  LC0BW01.PC-XCT-ORIG-CD[LC0BWIXM] = VLCBNK01.PC-XCT-ORIG-CD;
  LC0BW01.PC-DEST-XCT-CD[LC0BWIXM] = VLCBNK01.PC-DEST-XCT-CD;
  LC0BW01.XIB-IBANK-CD[LC0BWIXM] = VLCBNK01.XIB-IBANK-CD;

end // end LC0BS12

// close lcbnk01 cursor
Function LC0BS13()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VLCBNK01" ("C1", SQLCA, VLCBNK01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

     /* GO ON*/

  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "LC0BS13"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "LC0BM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VLCBNK01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    LC0BM001.XXXPRCNM = "LC0BS13"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

end // end LC0BS13

// Select unique from VPOREG01
Function LC0BS40()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = LC0BW00.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = LC0BW00.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to verify REGION.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  LC0BM001.XXXPRCNM = "LC0BS40"; /* Module name*/
  LC0BM002.XXXPRCNM = "LC0BS40"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set LC0BM001 initial; /* Clear screen before display*/
    set LC0BM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "LC0BS40"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end LC0BS40

// Select unique from Vfcty003
Function LC0BS41()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VFCTY003 empty; /* Row storage area*/

  VFCTY003.XGPCD = LC0BW00.XGPCD; /* GPC*/
  VFCTY003.FY1FCTYC = LC0BW02.FY-FCTY-CD; /* factory*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.vfcty003 to verify factory*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  LC0BM001.XXXPRCNM = "LC0BS41"; /* Module name*/
  LC0BM002.XXXPRCNM = "LC0BS41"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set LC0BM001 initial; /* Clear screen before display*/
    set LC0BM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "LC0BS41"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end LC0BS41

// Select unique from VPOtyp01
Function LC0BS42()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOTYP01 empty; /* Row storage area*/

  VPOTYP01.XGPCD = LC0BW00.XGPCD; /* GPC*/
  VPOTYP01.PC4ORTYP = LC0BW02.PC-PO-OT-CD; /* po type*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.vpotyp01 to verify po type.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, VPOTYP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  LC0BM001.XXXPRCNM = "LC0BS42"; /* Module name*/
  LC0BM002.XXXPRCNM = "LC0BS42"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set LC0BM001 initial; /* Clear screen before display*/
    set LC0BM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "LC0BS42"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOTYP01.VPOTYP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end LC0BS42

// Select unique from Vlcbnk01
Function LC0BS50()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VLCBNK01 empty; /* Row storage area*/

  VLCBNK01.XGPCD = LC0BW00.XGPCD; /* GPC*/
  VLCBNK01.PO-REG-CD = LC0BW00.PO-REG-CD; /* region*/
  VLCBNK01.PC-PO-ID-MO-RNG = LC0BW02.LC0B-PC-PO-ID-MO-RNG; /* po id*/
  VLCBNK01.XSE-SESN-CD = LC0BW02.XSE-SESN-CD; /* sesn cd*/
  VLCBNK01.PC-SESN-YR = LC0BW02.PC-SESN-YR; /* sesn yr*/
  VLCBNK01.FY-FCTY-TYP-CD = LC0BW02.FY-FCTY-TYP-CD; /* factory type*/
  VLCBNK01.PC-PO-OT-CD = LC0BW02.PC-PO-OT-CD; /* po type*/
  VLCBNK01.FY-FCTY-CD = LC0BW02.FY-FCTY-CD; /* factory*/
  VLCBNK01.PC-XCT-ORIG-CD = LC0BW02.PC-XCT-ORIG-CD; /* mco*/
  VLCBNK01.PC-DEST-XCT-CD = LC0BW02.PC-DEST-XCT-CD; /* dest xct*/
  VLCBNK01.XIB-IBANK-CD = LC0BW02.XIB-IBANK-CD; /* ibank*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.vlcbnk01 to verify if dup.*/
   /* ------------------------------------------------------------*/

  try
    call "VLCBNK01" ("S ", SQLCA, VLCBNK01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  LC0BM001.XXXPRCNM = "LC0BS50"; /* Module name*/
  LC0BM002.XXXPRCNM = "LC0BS50"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set LC0BM001 initial; /* Clear screen before display*/
    set LC0BM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "LC0BS50"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLCBNK01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLCBNK01.VLCBNK01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end LC0BS50

// Insert unique into Vlcbnk01
Function LC0BS51()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VLCBNK01 empty; /* Row storage area*/

  VLCBNK01.XGPCD = LC0BW00.XGPCD; /* GPC*/
  VLCBNK01.PO-REG-CD = LC0BW00.PO-REG-CD; /* region*/
  VLCBNK01.PC-PO-ID-MO-RNG = LC0BW02.LC0B-PC-PO-ID-MO-RNG; /* po id*/
  VLCBNK01.XSE-SESN-CD = LC0BW02.XSE-SESN-CD; /* sesn cd*/
  VLCBNK01.PC-SESN-YR = LC0BW02.PC-SESN-YR; /* sesn yr*/
  VLCBNK01.FY-FCTY-TYP-CD = LC0BW02.FY-FCTY-TYP-CD; /* factory type*/
  VLCBNK01.PC-PO-OT-CD = LC0BW02.PC-PO-OT-CD; /* po type*/
  VLCBNK01.FY-FCTY-CD = LC0BW02.FY-FCTY-CD; /* factory*/
  VLCBNK01.PC-XCT-ORIG-CD = LC0BW02.PC-XCT-ORIG-CD; /* mco*/
  VLCBNK01.PC-DEST-XCT-CD = LC0BW02.PC-DEST-XCT-CD; /* dest xct*/
  VLCBNK01.XIB-IBANK-CD = LC0BW02.XIB-IBANK-CD; /* ibank*/
  VLCBNK01.XXX-STAT = "A"; /* Status*/
  VLCBNK01.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/
  VLCBNK01.ZZ-SDT = XX0XW01.XX0XWDAT; /* Add date*/
  VLCBNK01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM; /* Change time*/
  VLCBNK01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VLCBNK01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Insert row into DPRODC.vlcbnk01*/
   /* ------------------------------------------------------------*/

  try
    call "VLCBNK01" ("A ", SQLCA, VLCBNK01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row Added*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

  LC0BM001.XXXPRCNM = "LC0BS51"; /* Module name*/
  LC0BM002.XXXPRCNM = "LC0BS51"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set LC0BM001 initial; /* Clear screen before display*/
    set LC0BM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "LC0BS51"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLCBNK01"; /* Table view name*/
  TA1REC.TA1TBLKE = VLCBNK01.VLCBNK01-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end LC0BS51

// converse pop up window
Function XPXIB01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XIBTBL.XIB-IBANK-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (XIBTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIBTBL.XIB-IBANK-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIBTBL.XIB-IBANK-NM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XIBTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XIBTBL.XIB-IBANK-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XIBTBL.XIB-IBANK-NM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XIBTBL.XIB-IBANK-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXIB01

//*** RECORD=LC0BW00 ****
// Working storage for lc0b - lcbank table
// ***********************
Record LC0BW00 type basicRecord
  10 LC0BWSWR LC0BWSWR ; 
  10 LC0BWTSP LC0BWTSP ; 
  10 LC0BWIXM LC0BWIXM ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 LC0BWMAP LC0BWMAP ; 
  10 LC0BWIND LC0BWIND ; 
  10 LC0BWSWC LC0BWSWC ; 
  10 LC0BWSWF LC0BWSWF ; 
  10 LC0BW-PF9-CONFIRM LC0BW-PF9-CONFIRM ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PO-REG-DESC PO-REG-DESC ; 
  10 FY-FCTY-TYP-CD FY-FCTY-TYP-CD ; 
  10 LC0B-PC-PO-ID-MO-RNG LC0B-PC-PO-ID-MO-RNG ; 
    15 LC0BWPCCYY LC0BWPCCYY ; 
    15 LC0BWPMO LC0BWPMO ; 
    15 LC0BWDMO LC0BWDMO ; 
  10 XSE-SESN-CD XSE-SESN-CD ; 
  10 PC-SESN-YR PC-SESN-YR ; 
  10 XIB-IBANK-CD XIB-IBANK-CD ; 
  10 CAITEM CAITEM ; 
    15 LC0BWFNC LC0BWFNC ; 
    15 * char(19) ; 
end // end LC0BW00

//*** RECORD=LC0BW01 ****
// Temporary storage record for lc0bm001 lcbnk inquiry
// ***********************
Record LC0BW01 type basicRecord
  10 LC0BWLEN LC0BWLEN ; 
  10 LC0BWLIN LC0BWLIN [14] ; 
    15 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
    15 XSE-SESN-CD XSE-SESN-CD ; 
    15 PC-SESN-YR PC-SESN-YR ; 
    15 PC-PO-OT-CD PC-PO-OT-CD ; 
    15 FY-FCTY-CD FY-FCTY-CD ; 
    15 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    15 PC-DEST-XCT-CD PC-DEST-XCT-CD ; 
    15 XIB-IBANK-CD XIB-IBANK-CD ; 
end // end LC0BW01

//*** RECORD=LC0BW02 ****
// Working storage for lc0bm002
// ***********************
Record LC0BW02 type basicRecord
  10 FY-FCTY-TYP-CD FY-FCTY-TYP-CD ; 
  10 LC0B-PC-PO-ID-MO-RNG LC0B-PC-PO-ID-MO-RNG ; 
    15 LC0BWPCCYY LC0BWPCCYY ; 
    15 LC0BWPMO LC0BWPMO ; 
    15 LC0BWDMO LC0BWDMO ; 
  10 XSE-SESN-CD XSE-SESN-CD ; 
  10 PC-SESN-YR PC-SESN-YR ; 
  10 XIB-IBANK-CD XIB-IBANK-CD ; 
  10 XIB-IBANK-NM XIB-IBANK-NM ; 
  10 XIB-IBANK-SHORT-NM XIB-IBANK-SHORT-NM ; 
  10 PC-PO-OT-CD PC-PO-OT-CD ; 
  10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
  10 FY-FCTY-CD FY-FCTY-CD ; 
  10 PC-DEST-XCT-CD PC-DEST-XCT-CD ; 
end // end LC0BW02

//*** RECORD=VLCBNK01 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VLCBNK01
// 
// COPYLIB MEMBER:      DLCBNK01
// 
// I/O MODULE:          VLCBNK01
// 
// KEY TO DB2 TABLE:    ALL DATA FIELDS
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/24/99   JNIESE   PCF205 - NISSHO PROJECT
// 
// ************************
Record VLCBNK01 type basicRecord
  5 VLCBNK01-GROUP VLCBNK01-GROUP ; 
    10 VLCBNK01-KEY VLCBNK01-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC-PO-ID-MO-RNG PC-PO-ID-MO-RNG ; 
      15 XSE-SESN-CD XSE-SESN-CD ; 
      15 PC-SESN-YR PC-SESN-YR ; 
      15 FY-FCTY-CD FY-FCTY-CD ; 
      15 FY-FCTY-TYP-CD FY-FCTY-TYP-CD ; 
      15 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
      15 PC-PO-OT-CD PC-PO-OT-CD ; 
      15 PC-PRDCU-ID PC-PRDCU-ID ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 PC-DEST-XCT-CD PC-DEST-XCT-CD ; 
      15 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 XXX-STAT XXX-STAT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VLCBNK01

// entire poid-rng(ccyymmmm)
DataItem LC0B-PC-PO-ID-MO-RNG num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirm update switch
DataItem LC0BW-PF9-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id deliver month
DataItem LC0BWDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Function flag
DataItem LC0BWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line count flag
DataItem LC0BWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem LC0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem LC0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// List map line
DataItem LC0BWLIN char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem LC0BWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production ccyy
DataItem LC0BWPCCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem LC0BWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor End of file switch
DataItem LC0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the Map switch
DataItem LC0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem LC0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Curent page number
DataItem LC0BWTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_DEST_XCT_CD
DataItem PC-DEST-XCT-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC-SESN-YR
DataItem PC-SESN-YR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// vlcbnk01-group
DataItem VLCBNK01-GROUP char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vlcbnk01-key
DataItem VLCBNK01-KEY char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

